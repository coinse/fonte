{"sha": "632e72228ad994efa19c0a9ae84923718f259cdf", "log": "Added support for id() and key()   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/IdentityManager.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/IdentityManager.java,v 1.1 2002/06/08 22:47:24 dmitri Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/06/08 22:47:24 $\n+ *\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation and was\n+ * originally based on software copyright (c) 2001, Plotnix, Inc,\n+ * <http://www.plotnix.com/>.\n+ * For more information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.jxpath;\n+\n+/**\n+ * A delegate of JXPathContext that implements the XPath <code>\"id()\"</code>\n+ * function. This delegate is only used when there is no default implementation\n+ * of the <code>id()</code> function. For example, it is <i>not</i> used\n+ * when the root of the context is a DOM Node.\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2002/06/08 22:47:24 $\n+ */\n+public interface IdentityManager {\n+\n+    /**\n+     * Finds a node by its ID.\n+     */\n+    Pointer getPointerByID(JXPathContext context, String id);\n+}\n--- a/src/java/org/apache/commons/jxpath/JXPathContext.java\n+++ b/src/java/org/apache/commons/jxpath/JXPathContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/JXPathContext.java,v 1.9 2002/05/08 23:19:31 dmitri Exp $\n- * $Revision: 1.9 $\n- * $Date: 2002/05/08 23:19:31 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/JXPathContext.java,v 1.10 2002/06/08 22:47:24 dmitri Exp $\n+ * $Revision: 1.10 $\n+ * $Date: 2002/06/08 22:47:24 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * <h3>Example 5: Retrieving Multiple Results</h3>\n  *\n  * JXPath can retrieve multiple objects from a graph. Note that the method\n- * called in this case is not <code>getValue</code>, but <code>eval</code>.\n+ * called in this case is not <code>getValue</code>, but <code>iterate</code>.\n  *\n  * <pre><blockquote>\n  * public class Author {\n  * ...\n  *\n  * JXPathContext context = JXPathContext.newContext(auth);\n- * List threeBooks = (List)context.eval(\"books[position() &lt; 4]\");\n+ * Iterator threeBooks = context.iterate(\"books[position() &lt; 4]\");\n  * </blockquote></pre>\n  *\n  * This returns a list of at most three books from the array of all books\n  * <h3>Example 7: Creating objects</h3>\n  * JXPath can be used to create new objects. First, create a subclass of\n  * {@link AbstractFactory AbstractFactory} and install it on the JXPathContext.\n- * Then call {@link JXPathContext#createPath createPath()} instead of \"setValue\".\n+ * Then call {@link JXPathContext#createPath createPathAndSetValue()} instead of \"setValue\".\n  * JXPathContext will invoke your AbstractFactory when it discovers that an\n  * intermediate node of the path is <b>null</b>.  It will not override existing\n  * nodes.\n  *\n  * JXPathContext context = JXPathContext.newContext(emp);\n  * context.setFactory(new AddressFactory());\n- * context.createPath(\"address/zipCode\", \"90190\");\n+ * context.createPathAndSetValue(\"address/zipCode\", \"90190\");\n  * </blockquote></pre>\n  *\n  * <h3>Example 8: Using Variables</h3>\n  *\n  * JXPathContext context = JXPathContext.newContext(varContext, auth);\n  *\n- * List javaBooks = (List)context.eval(\"books[title = $title]\");\n+ * Iterator javaBooks = context.iterate(\"books[title = $title]\");\n  * </blockquote></pre>\n  *\n  * <h3>Using Custom Variable Pools</h3>\n  * Also see <a href=\"http://www.w3.org/TR/xpath\">XML Path Language (XPath) Version 1.0 </a>\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.9 $ $Date: 2002/05/08 23:19:31 $\n+ * @version $Revision: 1.10 $ $Date: 2002/06/08 22:47:24 $\n  */\n public abstract class JXPathContext {\n     protected JXPathContext parentContext;\n     protected AbstractFactory factory;\n     protected Locale locale;\n     protected boolean lenient = false;\n+    protected IdentityManager idManager;\n+    protected KeyManager keyManager;\n \n     private static JXPathContext compilationContext;\n \n     public Object getContextBean(){\n         return contextBean;\n     }\n+\n+    /**\n+     * Returns a Pointer for the context bean.\n+     */\n+    public abstract Pointer getContextPointer();\n \n     public void setVariables(Variables vars){\n         this.vars = vars;\n      */\n     protected Locale getLocale(){\n         if (locale == null){\n-            locale = Locale.getDefault();\n+            if (parentContext != null){\n+                return parentContext.getLocale();\n+            }\n+            else {\n+                locale = Locale.getDefault();\n+            }\n         }\n         return locale;\n     }\n      * in the graph, the Iterator be empty, but not null.\n      */\n     public abstract Iterator iteratePointers(String xpath);\n+\n+    /**\n+     * Install an identity manager that will be used by the context\n+     * to look up a node by its ID.\n+     */\n+    public void setIdentityManager(IdentityManager idManager){\n+        this.idManager = idManager;\n+    }\n+\n+    /**\n+     * Returns this context's identity manager. If none has been installed,\n+     * returns the identity manager of the parent context.\n+     */\n+    public IdentityManager getIdentityManager(){\n+        if (idManager == null && parentContext != null){\n+            return parentContext.getIdentityManager();\n+        }\n+        return idManager;\n+    }\n+\n+    /**\n+     * Locates a Node by its ID.\n+     *\n+     * @param id is the ID of the sought node.\n+     */\n+    public Pointer getPointerByID(String id){\n+        IdentityManager manager = getIdentityManager();\n+        if (manager != null){\n+            return manager.getPointerByID(this, id);\n+        }\n+        else {\n+            throw new JXPathException(\"Cannot find an element by ID - \" +\n+                \"no IdentityManager has been specified\");\n+        }\n+    }\n+\n+    /**\n+     * Install a key manager that will be used by the context\n+     * to look up a node by a key value.\n+     */\n+    public void setKeyManager(KeyManager keyManager){\n+        this.keyManager = keyManager;\n+    }\n+\n+    /**\n+     * Returns this context's key manager. If none has been installed,\n+     * returns the key manager of the parent context.\n+     */\n+    public KeyManager getKeyManager(){\n+        if (keyManager == null && parentContext != null){\n+            return parentContext.getKeyManager();\n+        }\n+        return keyManager;\n+    }\n+\n+    /**\n+     * Locates a Node by a key value.\n+     */\n+    public Pointer getPointerByKey(String key, String value){\n+        KeyManager manager = getKeyManager();\n+        if (manager != null){\n+            return manager.getPointerByKey(this, key, value);\n+        }\n+        else {\n+            throw new JXPathException(\"Cannot find an element by key - \" +\n+                \"no KeyManager has been specified\");\n+        }\n+    }\n }\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/KeyManager.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/KeyManager.java,v 1.1 2002/06/08 22:47:24 dmitri Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/06/08 22:47:24 $\n+ *\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation and was\n+ * originally based on software copyright (c) 2001, Plotnix, Inc,\n+ * <http://www.plotnix.com/>.\n+ * For more information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.jxpath;\n+\n+/**\n+ * A delegate of JXPathContext that implements the XPath <code>\"key()\"</code>\n+ * function.\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2002/06/08 22:47:24 $\n+ */\n+public interface KeyManager {\n+\n+    /**\n+     * Finds a node by a key value.\n+     */\n+    Pointer getPointerByKey(JXPathContext context, String keyName, String keyValue);\n+}\n--- a/src/java/org/apache/commons/jxpath/ri/Compiler.java\n+++ b/src/java/org/apache/commons/jxpath/ri/Compiler.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/Compiler.java,v 1.3 2002/04/24 04:05:40 dmitri Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/04/24 04:05:40 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/Compiler.java,v 1.4 2002/06/08 22:47:25 dmitri Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/06/08 22:47:25 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * </pre></blockquote>\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2002/04/24 04:05:40 $\n+ * @version $Revision: 1.4 $ $Date: 2002/06/08 22:47:25 $\n  */\n public interface Compiler {\n \n     public static final int FUNCTION_CEILING = 26;\n     public static final int FUNCTION_ROUND = 27;\n     public static final int FUNCTION_NULL = 28;\n-//    public static final int FUNCTION_KEY = 29;\n+    public static final int FUNCTION_KEY = 29;\n \n     /**\n      * Produces an EXPRESSION object that represents a numeric constant.\n--- a/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n+++ b/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java,v 1.18 2002/05/29 00:41:53 dmitri Exp $\n- * $Revision: 1.18 $\n- * $Date: 2002/05/29 00:41:53 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java,v 1.19 2002/06/08 22:47:25 dmitri Exp $\n+ * $Revision: 1.19 $\n+ * $Date: 2002/06/08 22:47:25 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * The reference implementation of JXPathContext.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.18 $ $Date: 2002/05/29 00:41:53 $\n+ * @version $Revision: 1.19 $ $Date: 2002/06/08 22:47:25 $\n  */\n public class JXPathContextReferenceImpl extends JXPathContext\n {\n         }\n     }\n \n-    private synchronized NodePointer getRootPointer(){\n+    public synchronized Pointer getContextPointer(){\n         if (rootPointer == null){\n             rootPointer = NodePointer.newNodePointer(new QName(null, \"root\"),\n                 getContextBean(), getLocale());\n     }\n \n     private EvalContext getRootContext(){\n-        return new RootContext(this, getRootPointer());\n+        return new RootContext(this, (NodePointer)getContextPointer());\n     }\n \n     public NodePointer getVariablePointer(QName name){\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java,v 1.4 2002/05/08 00:39:59 dmitri Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/05/08 00:39:59 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java,v 1.5 2002/06/08 22:47:25 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/06/08 22:47:25 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.jxpath.ri.compiler;\n \n+import org.apache.commons.jxpath.JXPathContext;\n import org.apache.commons.jxpath.JXPathException;\n import org.apache.commons.jxpath.ri.Compiler;\n import org.apache.commons.jxpath.ri.InfoSetUtil;\n  * like \"position()\" or \"number()\".\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2002/05/08 00:39:59 $\n+ * @version $Revision: 1.5 $ $Date: 2002/06/08 22:47:25 $\n  */\n public class CoreFunction extends Operation {\n \n             case Compiler.FUNCTION_FLOOR:            function = \"floor\"; break;\n             case Compiler.FUNCTION_CEILING:          function = \"ceiling\"; break;\n             case Compiler.FUNCTION_ROUND:            function = \"round\"; break;\n-//            case Compiler.FUNCTION_KEY:            function = \"key\"; break;\n+            case Compiler.FUNCTION_KEY:              function = \"key\"; break;\n         }\n         return super.opCodeToString() + ':' + function;\n     }\n             case Compiler.FUNCTION_POSITION:            return functionPosition(context);\n             case Compiler.FUNCTION_COUNT:               return functionCount(context);\n             case Compiler.FUNCTION_LANG:                return functionLang(context);\n-            case Compiler.FUNCTION_ID:\n-            {\n-                System.err.println(\"UNIMPLEMENTED: \" + this);\n-                return null;\n-            }\n+            case Compiler.FUNCTION_ID:                  return functionID(context);\n             case Compiler.FUNCTION_LOCAL_NAME:          return functionLocalName(context);\n             case Compiler.FUNCTION_NAMESPACE_URI:       return functionNamespaceURI(context);\n             case Compiler.FUNCTION_NAME:                return functionName(context);\n             case Compiler.FUNCTION_FLOOR:               return functionFloor(context);\n             case Compiler.FUNCTION_CEILING:             return functionCeiling(context);\n             case Compiler.FUNCTION_ROUND:               return functionRound(context);\n-//            case Compiler.FUNCTION_KEY:\n-//                System.err.println(\"UNIMPLEMENTED: \" + function);\n+            case Compiler.FUNCTION_KEY:                 return functionKey(context);\n         }\n         return null;\n     }\n             return Boolean.FALSE;\n         }\n         return pointer.isLanguage(lang) ? Boolean.TRUE: Boolean.FALSE;\n+    }\n+\n+    protected Object functionID(EvalContext context){\n+        assertArgCount(1);\n+        String id = InfoSetUtil.stringValue(getArg1().computeValue(context));\n+        JXPathContext jxpathContext = context.getJXPathContext();\n+        NodePointer pointer = (NodePointer)jxpathContext.getContextPointer();\n+        return pointer.getPointerByID(jxpathContext, id);\n+    }\n+\n+    protected Object functionKey(EvalContext context){\n+        assertArgCount(2);\n+        String key = InfoSetUtil.stringValue(getArg1().computeValue(context));\n+        String value = InfoSetUtil.stringValue(getArg2().computeValue(context));\n+        JXPathContext jxpathContext = context.getJXPathContext();\n+        NodePointer pointer = (NodePointer)jxpathContext.getContextPointer();\n+        return pointer.getPointerByKey(jxpathContext, key, value);\n     }\n \n     protected Object functionNamespaceURI(EvalContext context){\n--- a/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java,v 1.5 2002/05/08 23:05:04 dmitri Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/05/08 23:05:04 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java,v 1.6 2002/06/08 22:47:24 dmitri Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/06/08 22:47:24 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * context-independent predicates.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2002/05/08 23:05:04 $\n+ * @version $Revision: 1.6 $ $Date: 2002/06/08 22:47:24 $\n  */\n public abstract class NodePointer implements Pointer, Cloneable, Comparable {\n \n      */\n     public QName getExpandedName() {\n         return getName();\n+    }\n+\n+    /**\n+     * Locates a node by ID.\n+     */\n+    public Pointer getPointerByID(JXPathContext context, String id){\n+        return context.getPointerByID(id);\n+    }\n+\n+    /**\n+     * Locates a node by key and value.\n+     */\n+    public Pointer getPointerByKey(JXPathContext context,\n+                                      String key, String value){\n+        return context.getPointerByKey(key, value);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/NullPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/NullPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/NullPointer.java,v 1.3 2002/05/08 23:05:05 dmitri Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/05/08 23:05:05 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/NullPointer.java,v 1.4 2002/06/08 22:47:24 dmitri Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/06/08 22:47:24 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n \n /**\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2002/05/08 23:05:05 $\n+ * @version $Revision: 1.4 $ $Date: 2002/06/08 22:47:24 $\n  */\n public class NullPointer extends PropertyOwnerPointer {\n     private QName name;\n+    private String id;\n \n     public NullPointer(QName name, Locale locale){\n         super(null, locale);\n         this.name = name;\n     }\n \n+    public NullPointer(Locale locale, String id){\n+        super(null, locale);\n+        this.id = id;\n+    }\n+\n     public QName getName(){\n         return name;\n     }\n     }\n \n     public String asPath(){\n+        if (id != null){\n+            return \"id(\" + id + \")\";\n+        }\n+\n         if (parent != null){\n             return super.asPath();\n         }\n--- a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java,v 1.6 2002/05/29 00:40:58 dmitri Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/05/29 00:40:58 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java,v 1.7 2002/06/08 22:47:25 dmitri Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/06/08 22:47:25 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import org.apache.commons.jxpath.AbstractFactory;\n import org.apache.commons.jxpath.JXPathContext;\n import org.apache.commons.jxpath.JXPathException;\n+import org.apache.commons.jxpath.Pointer;\n import org.apache.commons.jxpath.ri.Compiler;\n import org.apache.commons.jxpath.ri.QName;\n import org.apache.commons.jxpath.ri.compiler.NodeNameTest;\n import org.apache.commons.jxpath.ri.compiler.NodeTest;\n import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;\n import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;\n+import org.apache.commons.jxpath.ri.model.beans.NullPointer;\n import org.apache.commons.jxpath.ri.model.NodeIterator;\n import org.apache.commons.jxpath.ri.model.NodePointer;\n import org.apache.commons.jxpath.util.TypeUtils;\n import org.w3c.dom.Attr;\n import org.w3c.dom.Comment;\n+import org.w3c.dom.Document;\n import org.w3c.dom.Element;\n import org.w3c.dom.NamedNodeMap;\n import org.w3c.dom.Node;\n  * A Pointer that points to a DOM node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.6 $ $Date: 2002/05/29 00:40:58 $\n+ * @version $Revision: 1.7 $ $Date: 2002/06/08 22:47:25 $\n  */\n public class DOMNodePointer extends NodePointer {\n     private Node node;\n     private Map namespaces;\n     private String defaultNamespace;\n+    private String id;\n \n     public static final String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\";\n     public static final String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\";\n     public DOMNodePointer(Node node, Locale locale){\n         super(null, locale);\n         this.node = node;\n+    }\n+\n+    public DOMNodePointer(Node node, Locale locale, String id){\n+        super(null, locale);\n+        this.node = node;\n+        this.id = id;\n     }\n \n     public DOMNodePointer(NodePointer parent, Node node){\n     }\n \n     public String asPath(){\n+        if (id != null){\n+            return \"id('\" + escape(id) + \"')\";\n+        }\n+\n         StringBuffer buffer = new StringBuffer();\n         if (parent != null){\n             buffer.append(parent.asPath());\n         return buffer.toString();\n     }\n \n+    private String escape(String string){\n+        int index = string.indexOf('\\'');\n+        while (index != -1){\n+            string = string.substring(0, index) + \"&apos;\" + string.substring(index + 1);\n+            index = string.indexOf('\\'');\n+        }\n+        index = string.indexOf('\\\"');\n+        while (index != -1){\n+            string = string.substring(0, index) + \"&quot;\" + string.substring(index + 1);\n+            index = string.indexOf('\\\"');\n+        }\n+        return string;\n+    }\n+\n     private int getRelativePositionByName(){\n         int count = 1;\n         Node n = node.getPreviousSibling();\n         }\n     }\n \n+    /**\n+     * Locates a node by ID.\n+     */\n+    public Pointer getPointerByID(JXPathContext context, String id){\n+        Document document;\n+        if (node.getNodeType() == Node.DOCUMENT_NODE){\n+            document = (Document)node;\n+        }\n+        else {\n+            document = node.getOwnerDocument();\n+        }\n+        Element element = document.getElementById(id);\n+        if (element != null){\n+            return new DOMNodePointer(element, getLocale(), id);\n+        }\n+        else {\n+            return new NullPointer(getLocale(), id);\n+        }\n+    }\n+\n     private AbstractFactory getAbstractFactory(JXPathContext context){\n         AbstractFactory factory = context.getFactory();\n         if (factory == null){\n--- a/src/java/org/apache/commons/jxpath/ri/parser/XPathParser.java\n+++ b/src/java/org/apache/commons/jxpath/ri/parser/XPathParser.java\n     case FUNCTION_ROUND:\n       jj_consume_token(FUNCTION_ROUND);\n       break;\n+    case FUNCTION_KEY:\n+      jj_consume_token(FUNCTION_KEY);\n+      break;\n     default:\n       jj_la1[0] = jj_gen;\n       jj_consume_token(-1);\n       jj_consume_token(FUNCTION_ROUND);\n                                       code = Compiler.FUNCTION_ROUND;\n       break;\n+    case FUNCTION_KEY:\n+      jj_consume_token(FUNCTION_KEY);\n+                                      code = Compiler.FUNCTION_KEY;\n+      break;\n     default:\n       jj_la1[2] = jj_gen;\n       jj_consume_token(-1);\n  String nc1, nc2 = null;\n     nc1 = NCName();\n     switch (jj_nt.kind) {\n-    case 73:\n-      jj_consume_token(73);\n+    case 74:\n+      jj_consume_token(74);\n       nc2 = NCName();\n       break;\n     default:\n     String nc1, nc2 = null;\n     if (jj_2_1(2147483647)) {\n       nc1 = NCName();\n-      jj_consume_token(73);\n+      jj_consume_token(74);\n       nc2 = NCName();\n     } else {\n       switch (jj_nt.kind) {\n     case FUNCTION_POSITION:\n     case FUNCTION_COUNT:\n     case FUNCTION_ID:\n+    case FUNCTION_KEY:\n     case FUNCTION_LOCAL_NAME:\n     case FUNCTION_NAMESPACE_URI:\n     case FUNCTION_NAME:\n     case FUNCTION_CEILING:\n     case FUNCTION_ROUND:\n     case NCName:\n-    case 76:\n     case 77:\n-    case 80:\n-    case 82:\n+    case 78:\n+    case 81:\n+    case 83:\n       ex = RelativeLocationPath();\n       break;\n     case SLASH:\n     case FUNCTION_POSITION:\n     case FUNCTION_COUNT:\n     case FUNCTION_ID:\n+    case FUNCTION_KEY:\n     case FUNCTION_LOCAL_NAME:\n     case FUNCTION_NAMESPACE_URI:\n     case FUNCTION_NAME:\n     case FUNCTION_CEILING:\n     case FUNCTION_ROUND:\n     case NCName:\n-    case 80:\n-    case 82:\n+    case 81:\n+    case 83:\n       axis = AxisSpecifier();\n       if (jj_2_3(2147483647)) {\n         type = NodeType();\n-        jj_consume_token(74);\n         jj_consume_token(75);\n+        jj_consume_token(76);\n       } else if (jj_2_4(2147483647)) {\n         jj_consume_token(PI);\n-        jj_consume_token(74);\n+        jj_consume_token(75);\n         jj_consume_token(Literal);\n                     instruction = unescape(token.image.substring(1, token.image.length() - 1));\n-        jj_consume_token(75);\n+        jj_consume_token(76);\n       } else {\n         switch (jj_nt.kind) {\n         case OR:\n         case FUNCTION_POSITION:\n         case FUNCTION_COUNT:\n         case FUNCTION_ID:\n+        case FUNCTION_KEY:\n         case FUNCTION_LOCAL_NAME:\n         case FUNCTION_NAMESPACE_URI:\n         case FUNCTION_NAME:\n         case FUNCTION_CEILING:\n         case FUNCTION_ROUND:\n         case NCName:\n-        case 82:\n+        case 83:\n           name = WildcardName();\n           break;\n         default:\n         }\n       }\n       break;\n-    case 76:\n-      jj_consume_token(76);\n+    case 77:\n+      jj_consume_token(77);\n                     axis = Compiler.AXIS_SELF;\n                     type = Compiler.NODE_TYPE_NODE;\n       break;\n-    case 77:\n-      jj_consume_token(77);\n+    case 78:\n+      jj_consume_token(78);\n                     axis = Compiler.AXIS_PARENT;\n                     type = Compiler.NODE_TYPE_NODE;\n       break;\n     label_3:\n     while (true) {\n       switch (jj_nt.kind) {\n-      case 78:\n+      case 79:\n         ;\n         break;\n       default:\n /* [9] PredicateExpr ::=  Expr  */\n   final public Object Predicate() throws ParseException {\n     Object ex;\n-    jj_consume_token(78);\n+    jj_consume_token(79);\n     ex = Expression();\n-    jj_consume_token(79);\n+    jj_consume_token(80);\n         {if (true) return ex;}\n     throw new Error(\"Missing return statement in function\");\n   }\n   final public int AbbreviatedAxisSpecifier() throws ParseException {\n     int axis = Compiler.AXIS_CHILD;\n     switch (jj_nt.kind) {\n-    case 80:\n-      jj_consume_token(80);\n+    case 81:\n+      jj_consume_token(81);\n            axis = Compiler.AXIS_ATTRIBUTE;\n       break;\n     default:\n     case VARIABLE:\n       ex = VariableReference();\n       break;\n-    case 74:\n-      jj_consume_token(74);\n+    case 75:\n+      jj_consume_token(75);\n       ex = Expression();\n-      jj_consume_token(75);\n+      jj_consume_token(76);\n       break;\n     case Literal:\n       jj_consume_token(Literal);\n         case FUNCTION_POSITION:\n         case FUNCTION_COUNT:\n         case FUNCTION_ID:\n+        case FUNCTION_KEY:\n         case FUNCTION_LOCAL_NAME:\n         case FUNCTION_NAMESPACE_URI:\n         case FUNCTION_NAME:\n   final public ArrayList ArgumentList() throws ParseException {\n     ArrayList args = null;\n     Object arg;\n-    jj_consume_token(74);\n+    jj_consume_token(75);\n     switch (jj_nt.kind) {\n     case SLASH:\n     case SLASHSLASH:\n     case FUNCTION_POSITION:\n     case FUNCTION_COUNT:\n     case FUNCTION_ID:\n+    case FUNCTION_KEY:\n     case FUNCTION_LOCAL_NAME:\n     case FUNCTION_NAMESPACE_URI:\n     case FUNCTION_NAME:\n     case FUNCTION_CEILING:\n     case FUNCTION_ROUND:\n     case NCName:\n-    case 74:\n-    case 76:\n+    case 75:\n     case 77:\n-    case 80:\n-    case 82:\n+    case 78:\n+    case 81:\n+    case 83:\n       arg = Argument();\n                                 args = new ArrayList(); args.add(arg);\n       label_4:\n       while (true) {\n         switch (jj_nt.kind) {\n-        case 81:\n+        case 82:\n           ;\n           break;\n         default:\n           jj_la1[18] = jj_gen;\n           break label_4;\n         }\n-        jj_consume_token(81);\n+        jj_consume_token(82);\n         arg = Argument();\n                                        args.add(arg);\n       }\n       jj_la1[19] = jj_gen;\n       ;\n     }\n-    jj_consume_token(75);\n+    jj_consume_token(76);\n         {if (true) return args;}\n     throw new Error(\"Missing return statement in function\");\n   }\n       case FUNCTION_POSITION:\n       case FUNCTION_COUNT:\n       case FUNCTION_ID:\n+      case FUNCTION_KEY:\n       case FUNCTION_LOCAL_NAME:\n       case FUNCTION_NAMESPACE_URI:\n       case FUNCTION_NAME:\n       case FUNCTION_CEILING:\n       case FUNCTION_ROUND:\n       case NCName:\n-      case 76:\n       case 77:\n-      case 80:\n-      case 82:\n+      case 78:\n+      case 81:\n+      case 83:\n         ex = LocationPath();\n         break;\n       default:\n     label_6:\n     while (true) {\n       switch (jj_nt.kind) {\n-      case 78:\n+      case 79:\n         ;\n         break;\n       default:\n       switch (jj_nt.kind) {\n       case MOD:\n       case DIV:\n-      case 82:\n+      case 83:\n         ;\n         break;\n       default:\n         break label_14;\n       }\n       switch (jj_nt.kind) {\n-      case 82:\n-        jj_consume_token(82);\n+      case 83:\n+        jj_consume_token(83);\n         r = UnaryExpr();\n                                     ex = compiler.multiply(ex, r);\n         break;\n     case FUNCTION_POSITION:\n     case FUNCTION_COUNT:\n     case FUNCTION_ID:\n+    case FUNCTION_KEY:\n     case FUNCTION_LOCAL_NAME:\n     case FUNCTION_NAMESPACE_URI:\n     case FUNCTION_NAME:\n     case FUNCTION_CEILING:\n     case FUNCTION_ROUND:\n     case NCName:\n-    case 74:\n-    case 76:\n+    case 75:\n     case 77:\n-    case 80:\n-    case 82:\n+    case 78:\n+    case 81:\n+    case 83:\n       ex = UnionExpr();\n       break;\n     case MINUS:\n     Object qn;\n     String nc1, nc2 = null;\n     switch (jj_nt.kind) {\n-    case 82:\n-      jj_consume_token(82);\n+    case 83:\n+      jj_consume_token(83);\n       break;\n     case OR:\n     case AND:\n     case FUNCTION_POSITION:\n     case FUNCTION_COUNT:\n     case FUNCTION_ID:\n+    case FUNCTION_KEY:\n     case FUNCTION_LOCAL_NAME:\n     case FUNCTION_NAMESPACE_URI:\n     case FUNCTION_NAME:\n     }\n                            nc1 = token.image;\n     switch (jj_nt.kind) {\n-    case 73:\n-      jj_consume_token(73);\n+    case 74:\n+      jj_consume_token(74);\n       switch (jj_nt.kind) {\n-      case 82:\n-        jj_consume_token(82);\n+      case 83:\n+        jj_consume_token(83);\n         break;\n       case OR:\n       case AND:\n       case FUNCTION_POSITION:\n       case FUNCTION_COUNT:\n       case FUNCTION_ID:\n+      case FUNCTION_KEY:\n       case FUNCTION_LOCAL_NAME:\n       case FUNCTION_NAMESPACE_URI:\n       case FUNCTION_NAME:\n     return retval;\n   }\n \n-  final private boolean jj_3R_87() {\n-    if (jj_scan_token(FUNCTION_ROUND)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_59() {\n-    if (jj_scan_token(PI)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_58() {\n-    if (jj_scan_token(COMMENT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_86() {\n-    if (jj_scan_token(FUNCTION_CEILING)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_57() {\n-    if (jj_scan_token(NODE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_85() {\n-    if (jj_scan_token(FUNCTION_FLOOR)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_84() {\n-    if (jj_scan_token(FUNCTION_SUM)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_56() {\n-    if (jj_scan_token(TEXT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_83() {\n-    if (jj_scan_token(FUNCTION_NUMBER)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_82() {\n-    if (jj_scan_token(FUNCTION_LANG)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_81() {\n-    if (jj_scan_token(FUNCTION_NULL)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_80() {\n-    if (jj_scan_token(FUNCTION_FALSE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_79() {\n-    if (jj_scan_token(FUNCTION_TRUE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_78() {\n-    if (jj_scan_token(FUNCTION_NOT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_17() {\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_56()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_57()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_58()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_59()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_77() {\n-    if (jj_scan_token(FUNCTION_BOOLEAN)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_76() {\n-    if (jj_scan_token(FUNCTION_TRANSLATE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_75() {\n-    if (jj_scan_token(FUNCTION_NORMALIZE_SPACE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_74() {\n-    if (jj_scan_token(FUNCTION_STRING_LENGTH)) return true;\n+  final private boolean jj_3R_65() {\n+    if (jj_scan_token(FUNCTION_LOCAL_NAME)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_64() {\n+    if (jj_scan_token(FUNCTION_ID)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_63() {\n+    if (jj_scan_token(FUNCTION_COUNT)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_62() {\n+    if (jj_scan_token(FUNCTION_POSITION)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n   final private boolean jj_3R_102() {\n     if (jj_3R_116()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_115()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_151() {\n-    if (jj_3R_15()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_73() {\n-    if (jj_scan_token(FUNCTION_SUBSTRING)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_72() {\n-    if (jj_scan_token(FUNCTION_SUBSTRING_AFTER)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_71() {\n-    if (jj_scan_token(FUNCTION_SUBSTRING_BEFORE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_70() {\n-    if (jj_scan_token(FUNCTION_CONTAINS)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3_5() {\n-    if (jj_3R_18()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(74)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_69() {\n-    if (jj_scan_token(FUNCTION_STARTS_WITH)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_68() {\n-    if (jj_scan_token(FUNCTION_CONCAT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_128() {\n-    if (jj_3R_15()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_150() {\n-    if (jj_scan_token(82)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_67() {\n-    if (jj_scan_token(FUNCTION_STRING)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_66() {\n-    if (jj_scan_token(FUNCTION_NAME)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_65() {\n-    if (jj_scan_token(FUNCTION_NAMESPACE_URI)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_64() {\n-    if (jj_scan_token(FUNCTION_LOCAL_NAME)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_63() {\n-    if (jj_scan_token(FUNCTION_ID)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_129() {\n-    if (jj_scan_token(73)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_150()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_151()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_62() {\n-    if (jj_scan_token(FUNCTION_COUNT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_127() {\n-    if (jj_scan_token(82)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_61() {\n-    if (jj_scan_token(FUNCTION_POSITION)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_93() {\n-    if (jj_3R_102()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_60() {\n     if (jj_scan_token(FUNCTION_LAST)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_92() {\n-    if (jj_3R_101()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_91() {\n-    if (jj_scan_token(Number)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_90() {\n-    if (jj_scan_token(Literal)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_89() {\n-    if (jj_scan_token(74)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_100()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(75)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_88() {\n-    if (jj_3R_99()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_119() {\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_127()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_128()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    xsp = jj_scanpos;\n-    if (jj_3R_129()) jj_scanpos = xsp;\n-    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_18() {\n     Token xsp;\n     xsp = jj_scanpos;\n-    if (jj_3R_60()) {\n-    jj_scanpos = xsp;\n     if (jj_3R_61()) {\n     jj_scanpos = xsp;\n     if (jj_3R_62()) {\n     jj_scanpos = xsp;\n     if (jj_3R_86()) {\n     jj_scanpos = xsp;\n-    if (jj_3R_87()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_19() {\n+    if (jj_3R_87()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_88()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_89()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_109() {\n+    if (jj_scan_token(DIV)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_108() {\n+    if (jj_scan_token(MOD)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_107() {\n+    if (jj_scan_token(AND)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_106() {\n+    if (jj_scan_token(OR)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_105() {\n+    if (jj_scan_token(NCName)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_96() {\n     Token xsp;\n     xsp = jj_scanpos;\n-    if (jj_3R_88()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_89()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_90()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_91()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_92()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_93()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_107() {\n-    if (jj_scan_token(DIV)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_106() {\n-    if (jj_scan_token(MOD)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_105() {\n-    if (jj_scan_token(AND)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_104() {\n-    if (jj_scan_token(OR)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_103() {\n-    if (jj_scan_token(NCName)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_99() {\n-    if (jj_scan_token(VARIABLE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_113()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_94() {\n+    if (jj_3R_105()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_106()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_107()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_108()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_109()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_171() {\n+    if (jj_scan_token(MINUS)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_168()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_169() {\n     Token xsp;\n     xsp = jj_scanpos;\n-    if (jj_3R_103()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_104()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_105()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_106()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_107()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_100() {\n-    if (jj_3R_114()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_172()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_173()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_174()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_170() {\n+    if (jj_3R_175()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_151() {\n+    if (jj_scan_token(81)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_53() {\n+    if (jj_scan_token(FUNCTION_KEY)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_128() {\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_151()) jj_scanpos = xsp;\n+    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n     return false;\n   }\n \n-  final private boolean jj_3R_51() {\n-    if (jj_scan_token(FUNCTION_CEILING)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_116() {\n-    if (jj_3R_124()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_50() {\n-    if (jj_scan_token(FUNCTION_FLOOR)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_49() {\n-    if (jj_scan_token(FUNCTION_SUM)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_48() {\n-    if (jj_scan_token(FUNCTION_NUMBER)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_47() {\n-    if (jj_scan_token(FUNCTION_LANG)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_46() {\n-    if (jj_scan_token(FUNCTION_NULL)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_45() {\n-    if (jj_scan_token(FUNCTION_FALSE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_44() {\n-    if (jj_scan_token(FUNCTION_TRUE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_43() {\n-    if (jj_scan_token(FUNCTION_NOT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_42() {\n-    if (jj_scan_token(FUNCTION_BOOLEAN)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_41() {\n-    if (jj_scan_token(FUNCTION_TRANSLATE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_40() {\n-    if (jj_scan_token(FUNCTION_NORMALIZE_SPACE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_39() {\n-    if (jj_scan_token(FUNCTION_STRING_LENGTH)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_38() {\n-    if (jj_scan_token(FUNCTION_SUBSTRING)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_37() {\n-    if (jj_scan_token(FUNCTION_SUBSTRING_AFTER)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_36() {\n-    if (jj_scan_token(FUNCTION_SUBSTRING_BEFORE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_35() {\n-    if (jj_scan_token(FUNCTION_CONTAINS)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_34() {\n-    if (jj_scan_token(FUNCTION_STARTS_WITH)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_33() {\n-    if (jj_scan_token(FUNCTION_CONCAT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_32() {\n-    if (jj_scan_token(FUNCTION_STRING)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_31() {\n-    if (jj_scan_token(FUNCTION_NAME)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_149() {\n-    if (jj_scan_token(80)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_30() {\n-    if (jj_scan_token(FUNCTION_NAMESPACE_URI)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_29() {\n-    if (jj_scan_token(FUNCTION_LOCAL_NAME)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_126() {\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_149()) jj_scanpos = xsp;\n-    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_28() {\n-    if (jj_scan_token(FUNCTION_ID)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_27() {\n-    if (jj_scan_token(FUNCTION_COUNT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_26() {\n-    if (jj_scan_token(FUNCTION_POSITION)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_25() {\n-    if (jj_scan_token(FUNCTION_LAST)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_24() {\n-    if (jj_scan_token(PI)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_23() {\n-    if (jj_scan_token(COMMENT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_22() {\n-    if (jj_scan_token(TEXT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_21() {\n-    if (jj_scan_token(NODE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_20() {\n-    if (jj_3R_94()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_15() {\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_20()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_21()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_22()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_23()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_24()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_25()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_26()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_27()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_28()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_29()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_30()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_31()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_32()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_33()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_34()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_35()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_36()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_37()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_38()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_39()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_40()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_41()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_42()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_43()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_44()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_45()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_46()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_47()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_48()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_49()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_50()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_51()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_52()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_112() {\n-    if (jj_scan_token(78)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_100()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(79)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_169() {\n-    if (jj_scan_token(MINUS)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_166()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_167() {\n+  final private boolean jj_3R_168() {\n     Token xsp;\n     xsp = jj_scanpos;\n     if (jj_3R_170()) {\n     jj_scanpos = xsp;\n-    if (jj_3R_171()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_172()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_168() {\n-    if (jj_3R_173()) return true;\n+    if (jj_3R_171()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_51() {\n+    if (jj_scan_token(FUNCTION_CEILING)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_50() {\n+    if (jj_scan_token(FUNCTION_FLOOR)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_49() {\n+    if (jj_scan_token(FUNCTION_SUM)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_48() {\n+    if (jj_scan_token(FUNCTION_NUMBER)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_47() {\n+    if (jj_scan_token(FUNCTION_LANG)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_46() {\n+    if (jj_scan_token(FUNCTION_NULL)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_174() {\n+    if (jj_scan_token(MOD)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_168()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_45() {\n+    if (jj_scan_token(FUNCTION_FALSE)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_173() {\n+    if (jj_scan_token(DIV)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_168()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_44() {\n+    if (jj_scan_token(FUNCTION_TRUE)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_172() {\n+    if (jj_scan_token(83)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_168()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_43() {\n+    if (jj_scan_token(FUNCTION_NOT)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_42() {\n+    if (jj_scan_token(FUNCTION_BOOLEAN)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_41() {\n+    if (jj_scan_token(FUNCTION_TRANSLATE)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_40() {\n+    if (jj_scan_token(FUNCTION_NORMALIZE_SPACE)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_39() {\n+    if (jj_scan_token(FUNCTION_STRING_LENGTH)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_114() {\n+    if (jj_scan_token(79)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_102()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_scan_token(80)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_38() {\n+    if (jj_scan_token(FUNCTION_SUBSTRING)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_37() {\n+    if (jj_scan_token(FUNCTION_SUBSTRING_AFTER)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_36() {\n+    if (jj_scan_token(FUNCTION_SUBSTRING_BEFORE)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_35() {\n+    if (jj_scan_token(FUNCTION_CONTAINS)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_34() {\n+    if (jj_scan_token(FUNCTION_STARTS_WITH)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_166() {\n+    if (jj_3R_168()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_168()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_169()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    while (true) {\n+      xsp = jj_scanpos;\n+      if (jj_3R_169()) { jj_scanpos = xsp; break; }\n+      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_33() {\n+    if (jj_scan_token(FUNCTION_CONCAT)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_32() {\n+    if (jj_scan_token(FUNCTION_STRING)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_31() {\n+    if (jj_scan_token(FUNCTION_NAME)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_30() {\n+    if (jj_scan_token(FUNCTION_NAMESPACE_URI)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_29() {\n+    if (jj_scan_token(FUNCTION_LOCAL_NAME)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_28() {\n+    if (jj_scan_token(FUNCTION_ID)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_27() {\n+    if (jj_scan_token(FUNCTION_COUNT)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_167() {\n+    if (jj_scan_token(MINUS)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_166()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_26() {\n+    if (jj_scan_token(FUNCTION_POSITION)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_25() {\n+    if (jj_scan_token(FUNCTION_LAST)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_24() {\n+    if (jj_scan_token(PI)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_150() {\n+    if (jj_scan_token(AXIS_DESCENDANT_OR_SELF)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_23() {\n+    if (jj_scan_token(COMMENT)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_149() {\n+    if (jj_scan_token(AXIS_PRECEDING_SIBLING)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_22() {\n+    if (jj_scan_token(TEXT)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_148() {\n-    if (jj_scan_token(AXIS_DESCENDANT_OR_SELF)) return true;\n+    if (jj_scan_token(AXIS_FOLLOWING_SIBLING)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_21() {\n+    if (jj_scan_token(NODE)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_147() {\n-    if (jj_scan_token(AXIS_PRECEDING_SIBLING)) return true;\n+    if (jj_scan_token(AXIS_ANCESTOR_OR_SELF)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_161() {\n+    if (jj_scan_token(PLUS)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_160()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_20() {\n+    if (jj_3R_96()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_146() {\n-    if (jj_scan_token(AXIS_FOLLOWING_SIBLING)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_172() {\n-    if (jj_scan_token(MOD)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_166()) return true;\n+    if (jj_scan_token(AXIS_DESCENDANT)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_145() {\n-    if (jj_scan_token(AXIS_ANCESTOR_OR_SELF)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_171() {\n-    if (jj_scan_token(DIV)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_166()) return true;\n+    if (jj_scan_token(AXIS_FOLLOWING)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_144() {\n-    if (jj_scan_token(AXIS_DESCENDANT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_170() {\n-    if (jj_scan_token(82)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_166()) return true;\n+    if (jj_scan_token(AXIS_PRECEDING)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_143() {\n-    if (jj_scan_token(AXIS_FOLLOWING)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_142() {\n-    if (jj_scan_token(AXIS_PRECEDING)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_141() {\n     if (jj_scan_token(AXIS_NAMESPACE)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n-  final private boolean jj_3R_140() {\n-    if (jj_scan_token(AXIS_ATTRIBUTE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_139() {\n-    if (jj_scan_token(AXIS_ANCESTOR)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_138() {\n-    if (jj_scan_token(AXIS_PARENT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_137() {\n-    if (jj_scan_token(AXIS_CHILD)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_136() {\n-    if (jj_scan_token(AXIS_SELF)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_164() {\n+  final private boolean jj_3R_160() {\n     if (jj_3R_166()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     Token xsp;\n     return false;\n   }\n \n-  final private boolean jj_3R_125() {\n+  final private boolean jj_3R_142() {\n+    if (jj_scan_token(AXIS_ATTRIBUTE)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_15() {\n     Token xsp;\n     xsp = jj_scanpos;\n-    if (jj_3R_136()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_137()) {\n-    jj_scanpos = xsp;\n+    if (jj_3R_20()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_21()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_22()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_23()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_24()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_25()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_26()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_27()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_28()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_29()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_30()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_31()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_32()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_33()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_34()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_35()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_36()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_37()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_38()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_39()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_40()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_41()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_42()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_43()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_44()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_45()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_46()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_47()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_48()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_49()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_50()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_51()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_52()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_53()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_141() {\n+    if (jj_scan_token(AXIS_ANCESTOR)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_140() {\n+    if (jj_scan_token(AXIS_PARENT)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_139() {\n+    if (jj_scan_token(AXIS_CHILD)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_138() {\n+    if (jj_scan_token(AXIS_SELF)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_127() {\n+    Token xsp;\n+    xsp = jj_scanpos;\n     if (jj_3R_138()) {\n     jj_scanpos = xsp;\n     if (jj_3R_139()) {\n     jj_scanpos = xsp;\n     if (jj_3R_147()) {\n     jj_scanpos = xsp;\n-    if (jj_3R_148()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_165() {\n-    if (jj_scan_token(MINUS)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_164()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_159() {\n-    if (jj_scan_token(PLUS)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_158()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_158() {\n-    if (jj_3R_164()) return true;\n+    if (jj_3R_148()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_149()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_150()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_157() {\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_162()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_163()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_164()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_165()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_156() {\n+    if (jj_3R_160()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     Token xsp;\n     while (true) {\n       xsp = jj_scanpos;\n-      if (jj_3R_165()) { jj_scanpos = xsp; break; }\n+      if (jj_3R_161()) { jj_scanpos = xsp; break; }\n       if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     }\n     return false;\n   }\n \n-  final private boolean jj_3R_118() {\n-    if (jj_3R_126()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_117() {\n-    if (jj_3R_125()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_108() {\n+  final private boolean jj_3R_120() {\n+    if (jj_3R_128()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_119() {\n+    if (jj_3R_127()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_165() {\n+    if (jj_scan_token(GTE)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_156()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_110() {\n     Token xsp;\n     xsp = jj_scanpos;\n-    if (jj_3R_117()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_118()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_119()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_120()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_164() {\n+    if (jj_scan_token(LTE)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_156()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_163() {\n+    if (jj_scan_token(GT)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_156()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_155() {\n     Token xsp;\n     xsp = jj_scanpos;\n-    if (jj_3R_160()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_161()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_162()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_163()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_158()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_159()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_162() {\n+    if (jj_scan_token(LT)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_156()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_154() {\n-    if (jj_3R_158()) return true;\n+    if (jj_3R_156()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     Token xsp;\n     while (true) {\n       xsp = jj_scanpos;\n-      if (jj_3R_159()) { jj_scanpos = xsp; break; }\n+      if (jj_3R_157()) { jj_scanpos = xsp; break; }\n       if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     }\n     return false;\n   }\n \n-  final private boolean jj_3R_98() {\n-    if (jj_3R_112()) return true;\n+  final private boolean jj_3R_159() {\n+    if (jj_scan_token(NEQ)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_154()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_158() {\n+    if (jj_scan_token(EQ)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_154()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_100() {\n+    if (jj_3R_114()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n   final private boolean jj_3_3() {\n     if (jj_3R_17()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(74)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     if (jj_scan_token(75)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_163() {\n-    if (jj_scan_token(GTE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_154()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_97() {\n+    if (jj_scan_token(76)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_99() {\n+    if (jj_scan_token(78)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_98() {\n     if (jj_scan_token(77)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n-  final private boolean jj_3R_162() {\n-    if (jj_scan_token(LTE)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_154()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_161() {\n-    if (jj_scan_token(GT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_154()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_153() {\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_156()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_157()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_96() {\n-    if (jj_scan_token(76)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_160() {\n-    if (jj_scan_token(LT)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_154()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_111() {\n-    if (jj_3R_119()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_110() {\n-    if (jj_scan_token(PI)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(74)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(Literal)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(75)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_109() {\n-    if (jj_3R_17()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(74)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(75)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_152() {\n+  final private boolean jj_3R_113() {\n+    if (jj_3R_121()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_132() {\n     if (jj_3R_154()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     Token xsp;\n     return false;\n   }\n \n-  final private boolean jj_3R_95() {\n-    if (jj_3R_108()) return true;\n+  final private boolean jj_3R_112() {\n+    if (jj_scan_token(PI)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_scan_token(75)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_scan_token(Literal)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_scan_token(76)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_111() {\n+    if (jj_3R_17()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_scan_token(75)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_scan_token(76)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_97() {\n+    if (jj_3R_110()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     Token xsp;\n     xsp = jj_scanpos;\n-    if (jj_3R_109()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_110()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_111()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_157() {\n-    if (jj_scan_token(NEQ)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_152()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_156() {\n-    if (jj_scan_token(EQ)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_152()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_55() {\n+    if (jj_3R_111()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_112()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_113()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_133() {\n+    if (jj_scan_token(AND)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_132()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_56() {\n     Token xsp;\n     xsp = jj_scanpos;\n-    if (jj_3R_95()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_96()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_97()) return true;\n+    if (jj_3R_97()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_98()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_99()) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     while (true) {\n       xsp = jj_scanpos;\n-      if (jj_3R_98()) { jj_scanpos = xsp; break; }\n+      if (jj_3R_100()) { jj_scanpos = xsp; break; }\n       if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     }\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_130() {\n-    if (jj_3R_152()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    Token xsp;\n-    while (true) {\n-      xsp = jj_scanpos;\n-      if (jj_3R_153()) { jj_scanpos = xsp; break; }\n-      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    }\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_189() {\n-    if (jj_3R_16()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_54() {\n-    if (jj_scan_token(SLASHSLASH)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_131() {\n-    if (jj_scan_token(AND)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_130()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_53() {\n-    if (jj_scan_token(SLASH)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_16() {\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_53()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_54()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_55()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_186() {\n-    if (jj_3R_16()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_121() {\n-    if (jj_3R_130()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    Token xsp;\n-    while (true) {\n-      xsp = jj_scanpos;\n-      if (jj_3R_131()) { jj_scanpos = xsp; break; }\n-      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    }\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_122() {\n-    if (jj_scan_token(OR)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_121()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_184() {\n-    if (jj_3R_55()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    Token xsp;\n-    while (true) {\n-      xsp = jj_scanpos;\n-      if (jj_3R_186()) { jj_scanpos = xsp; break; }\n-      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    }\n-    return false;\n-  }\n-\n-  final private boolean jj_3_2() {\n-    if (jj_3R_16()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_114() {\n-    if (jj_3R_121()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    Token xsp;\n-    while (true) {\n-      xsp = jj_scanpos;\n-      if (jj_3R_122()) { jj_scanpos = xsp; break; }\n-      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    }\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_188() {\n-    if (jj_scan_token(SLASH)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_187() {\n-    if (jj_3R_16()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    Token xsp;\n-    while (true) {\n-      xsp = jj_scanpos;\n-      if (jj_3R_189()) { jj_scanpos = xsp; break; }\n-      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    }\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_185() {\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_187()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_188()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_183() {\n-    if (jj_3R_185()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_182() {\n-    if (jj_3R_184()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_181() {\n-    if (jj_3R_16()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_179() {\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_182()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_183()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_180() {\n-    if (jj_3R_112()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_178() {\n-    if (jj_3R_19()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    Token xsp;\n-    while (true) {\n-      xsp = jj_scanpos;\n-      if (jj_3R_180()) { jj_scanpos = xsp; break; }\n-      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    }\n-    while (true) {\n-      xsp = jj_scanpos;\n-      if (jj_3R_181()) { jj_scanpos = xsp; break; }\n-      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    }\n-    return false;\n-  }\n-\n-  final private boolean jj_3_6() {\n-    if (jj_3R_19()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_177() {\n-    if (jj_3R_179()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_176() {\n-    if (jj_3R_178()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_174() {\n-    Token xsp;\n-    xsp = jj_scanpos;\n-    if (jj_3R_176()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_177()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_175() {\n-    if (jj_scan_token(UNION)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_174()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_173() {\n-    if (jj_3R_174()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    Token xsp;\n-    while (true) {\n-      xsp = jj_scanpos;\n-      if (jj_3R_175()) { jj_scanpos = xsp; break; }\n-      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    }\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_132() {\n-    if (jj_3R_100()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3_1() {\n-    if (jj_3R_15()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(73)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_133() {\n-    if (jj_scan_token(81)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_132()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_135() {\n-    if (jj_3R_94()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n     return false;\n   }\n \n-  final private boolean jj_3R_134() {\n-    if (jj_3R_15()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(73)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_15()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_120() {\n-    if (jj_scan_token(73)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_3R_15()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_115() {\n-    if (jj_scan_token(74)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+  final private boolean jj_3R_191() {\n+    if (jj_3R_16()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_55() {\n+    if (jj_scan_token(SLASHSLASH)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_54() {\n+    if (jj_scan_token(SLASH)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_124() {\n+    if (jj_scan_token(OR)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_123()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_16() {\n     Token xsp;\n     xsp = jj_scanpos;\n-    if (jj_3R_123()) jj_scanpos = xsp;\n-    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    if (jj_scan_token(75)) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_124() {\n+    if (jj_3R_54()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_55()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_56()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_188() {\n+    if (jj_3R_16()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_116() {\n+    if (jj_3R_123()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    Token xsp;\n+    while (true) {\n+      xsp = jj_scanpos;\n+      if (jj_3R_124()) { jj_scanpos = xsp; break; }\n+      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_186() {\n+    if (jj_3R_56()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    Token xsp;\n+    while (true) {\n+      xsp = jj_scanpos;\n+      if (jj_3R_188()) { jj_scanpos = xsp; break; }\n+      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3_2() {\n+    if (jj_3R_16()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_183() {\n+    if (jj_3R_16()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_190() {\n+    if (jj_scan_token(SLASH)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_189() {\n+    if (jj_3R_16()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    Token xsp;\n+    while (true) {\n+      xsp = jj_scanpos;\n+      if (jj_3R_191()) { jj_scanpos = xsp; break; }\n+      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_182() {\n+    if (jj_3R_114()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_187() {\n     Token xsp;\n     xsp = jj_scanpos;\n-    if (jj_3R_134()) {\n-    jj_scanpos = xsp;\n-    if (jj_3R_135()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n-    return false;\n-  }\n-\n-  final private boolean jj_3R_113() {\n-    if (jj_3R_15()) return true;\n-    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_189()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_190()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_180() {\n+    if (jj_3R_19()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    Token xsp;\n+    while (true) {\n+      xsp = jj_scanpos;\n+      if (jj_3R_182()) { jj_scanpos = xsp; break; }\n+      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    }\n+    while (true) {\n+      xsp = jj_scanpos;\n+      if (jj_3R_183()) { jj_scanpos = xsp; break; }\n+      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3_6() {\n+    if (jj_3R_19()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_185() {\n+    if (jj_3R_187()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_184() {\n+    if (jj_3R_186()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_181() {\n     Token xsp;\n     xsp = jj_scanpos;\n-    if (jj_3R_120()) jj_scanpos = xsp;\n+    if (jj_3R_184()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_185()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_179() {\n+    if (jj_3R_181()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_178() {\n+    if (jj_3R_180()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_176() {\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_178()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_179()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_177() {\n+    if (jj_scan_token(UNION)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_176()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_175() {\n+    if (jj_3R_176()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    Token xsp;\n+    while (true) {\n+      xsp = jj_scanpos;\n+      if (jj_3R_177()) { jj_scanpos = xsp; break; }\n+      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_134() {\n+    if (jj_3R_102()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_135() {\n+    if (jj_scan_token(82)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_134()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_125() {\n+    if (jj_3R_134()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    Token xsp;\n+    while (true) {\n+      xsp = jj_scanpos;\n+      if (jj_3R_135()) { jj_scanpos = xsp; break; }\n+      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    }\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_117() {\n+    if (jj_scan_token(75)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_125()) jj_scanpos = xsp;\n     else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_scan_token(76)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_60() {\n+    if (jj_scan_token(PI)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_59() {\n+    if (jj_scan_token(COMMENT)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_58() {\n+    if (jj_scan_token(NODE)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_57() {\n+    if (jj_scan_token(TEXT)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3_1() {\n+    if (jj_3R_15()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_scan_token(74)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_17() {\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_57()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_58()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_59()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_60()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_153() {\n+    if (jj_3R_15()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_137() {\n+    if (jj_3R_96()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_136() {\n+    if (jj_3R_15()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_scan_token(74)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_15()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_152() {\n+    if (jj_scan_token(83)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_130() {\n+    if (jj_3R_15()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_103() {\n+    if (jj_3R_18()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_117()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_122() {\n+    if (jj_scan_token(74)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_15()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_131() {\n+    if (jj_scan_token(74)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_152()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_153()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_126() {\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_136()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_137()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_129() {\n+    if (jj_scan_token(83)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_121() {\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_129()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_130()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    xsp = jj_scanpos;\n+    if (jj_3R_131()) jj_scanpos = xsp;\n+    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_104() {\n+    if (jj_3R_118()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_117()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_115() {\n+    if (jj_3R_15()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_122()) jj_scanpos = xsp;\n+    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3_5() {\n+    if (jj_3R_18()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_scan_token(75)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n \n   final private boolean jj_3R_101() {\n-    if (jj_3R_18()) return true;\n+    if (jj_scan_token(VARIABLE)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     if (jj_3R_115()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_89() {\n+    if (jj_scan_token(FUNCTION_KEY)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_88() {\n+    if (jj_scan_token(FUNCTION_ROUND)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_87() {\n+    if (jj_scan_token(FUNCTION_CEILING)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_86() {\n+    if (jj_scan_token(FUNCTION_FLOOR)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_95() {\n+    if (jj_3R_104()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_85() {\n+    if (jj_scan_token(FUNCTION_SUM)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_94() {\n+    if (jj_3R_103()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_84() {\n+    if (jj_scan_token(FUNCTION_NUMBER)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_93() {\n+    if (jj_scan_token(Number)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_83() {\n+    if (jj_scan_token(FUNCTION_LANG)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_92() {\n+    if (jj_scan_token(Literal)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_82() {\n+    if (jj_scan_token(FUNCTION_NULL)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_91() {\n+    if (jj_scan_token(75)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_3R_102()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    if (jj_scan_token(76)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_81() {\n+    if (jj_scan_token(FUNCTION_FALSE)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_90() {\n+    if (jj_3R_101()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_80() {\n+    if (jj_scan_token(FUNCTION_TRUE)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_79() {\n+    if (jj_scan_token(FUNCTION_NOT)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_118() {\n+    if (jj_3R_126()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_78() {\n+    if (jj_scan_token(FUNCTION_BOOLEAN)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_77() {\n+    if (jj_scan_token(FUNCTION_TRANSLATE)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_76() {\n+    if (jj_scan_token(FUNCTION_NORMALIZE_SPACE)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_75() {\n+    if (jj_scan_token(FUNCTION_STRING_LENGTH)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_19() {\n+    Token xsp;\n+    xsp = jj_scanpos;\n+    if (jj_3R_90()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_91()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_92()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_93()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_94()) {\n+    jj_scanpos = xsp;\n+    if (jj_3R_95()) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_74() {\n+    if (jj_scan_token(FUNCTION_SUBSTRING)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_73() {\n+    if (jj_scan_token(FUNCTION_SUBSTRING_AFTER)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_72() {\n+    if (jj_scan_token(FUNCTION_SUBSTRING_BEFORE)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_71() {\n+    if (jj_scan_token(FUNCTION_CONTAINS)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_70() {\n+    if (jj_scan_token(FUNCTION_STARTS_WITH)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_69() {\n+    if (jj_scan_token(FUNCTION_CONCAT)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_68() {\n+    if (jj_scan_token(FUNCTION_STRING)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_67() {\n+    if (jj_scan_token(FUNCTION_NAME)) return true;\n+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n+    return false;\n+  }\n+\n+  final private boolean jj_3R_66() {\n+    if (jj_scan_token(FUNCTION_NAMESPACE_URI)) return true;\n     if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;\n     return false;\n   }\n   final private int[] jj_la1 = new int[39];\n   final private int[] jj_la1_0 = {0x7f800000,0x7800000,0x0,0x0,0x7800000,0xff80000c,0xc,0x4,0xc,0xc,0x7f800000,0xff800000,0x0,0x80000000,0x80000000,0x0,0x16000,0x7f800000,0x0,0xff81604c,0x10,0xff80000c,0x0,0xc,0x800000,0x1000000,0x180,0x180,0x1e00,0x1e00,0x20,0x40,0x6000000,0x6000000,0xff81604c,0x7f800000,0x7f800000,0x0,0x78000000,};\n   final private int[] jj_la1_1 = {0xfffff000,0x0,0xfffff000,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0xfffff000,0xffffffff,0x0,0xfff,0xfff,0x0,0x0,0xfffff000,0x0,0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xfffff000,0xfffff000,0x0,0x0,};\n-  final private int[] jj_la1_2 = {0x1ff,0x100,0xff,0x200,0x100,0x531ff,0x0,0x0,0x0,0x0,0x401ff,0x531ff,0x4000,0x0,0x0,0x10000,0x400,0x1ff,0x20000,0x535ff,0x0,0x531ff,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x40000,0x535ff,0x401ff,0x401ff,0x200,0x0,};\n+  final private int[] jj_la1_2 = {0x3ff,0x200,0x1ff,0x400,0x200,0xa63ff,0x0,0x0,0x0,0x0,0x803ff,0xa63ff,0x8000,0x0,0x0,0x20000,0x800,0x3ff,0x40000,0xa6bff,0x0,0xa63ff,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x80000,0xa6bff,0x803ff,0x803ff,0x400,0x0,};\n   final private JJCalls[] jj_2_rtns = new JJCalls[6];\n   private boolean jj_rescan = false;\n   private int jj_gc = 0;\n \n   final public ParseException generateParseException() {\n     jj_expentries.removeAllElements();\n-    boolean[] la1tokens = new boolean[83];\n-    for (int i = 0; i < 83; i++) {\n+    boolean[] la1tokens = new boolean[84];\n+    for (int i = 0; i < 84; i++) {\n       la1tokens[i] = false;\n     }\n     if (jj_kind >= 0) {\n         }\n       }\n     }\n-    for (int i = 0; i < 83; i++) {\n+    for (int i = 0; i < 84; i++) {\n       if (la1tokens[i]) {\n         jj_expentry = new int[1];\n         jj_expentry[0] = i;\n--- a/src/java/org/apache/commons/jxpath/ri/parser/XPathParserConstants.java\n+++ b/src/java/org/apache/commons/jxpath/ri/parser/XPathParserConstants.java\n   int FUNCTION_POSITION = 45;\n   int FUNCTION_COUNT = 46;\n   int FUNCTION_ID = 47;\n-  int FUNCTION_LOCAL_NAME = 48;\n-  int FUNCTION_NAMESPACE_URI = 49;\n-  int FUNCTION_NAME = 50;\n-  int FUNCTION_STRING = 51;\n-  int FUNCTION_CONCAT = 52;\n-  int FUNCTION_STARTS_WITH = 53;\n-  int FUNCTION_CONTAINS = 54;\n-  int FUNCTION_SUBSTRING_BEFORE = 55;\n-  int FUNCTION_SUBSTRING_AFTER = 56;\n-  int FUNCTION_SUBSTRING = 57;\n-  int FUNCTION_STRING_LENGTH = 58;\n-  int FUNCTION_NORMALIZE_SPACE = 59;\n-  int FUNCTION_TRANSLATE = 60;\n-  int FUNCTION_BOOLEAN = 61;\n-  int FUNCTION_NOT = 62;\n-  int FUNCTION_TRUE = 63;\n-  int FUNCTION_FALSE = 64;\n-  int FUNCTION_NULL = 65;\n-  int FUNCTION_LANG = 66;\n-  int FUNCTION_NUMBER = 67;\n-  int FUNCTION_SUM = 68;\n-  int FUNCTION_FLOOR = 69;\n-  int FUNCTION_CEILING = 70;\n-  int FUNCTION_ROUND = 71;\n-  int NCName = 72;\n+  int FUNCTION_KEY = 48;\n+  int FUNCTION_LOCAL_NAME = 49;\n+  int FUNCTION_NAMESPACE_URI = 50;\n+  int FUNCTION_NAME = 51;\n+  int FUNCTION_STRING = 52;\n+  int FUNCTION_CONCAT = 53;\n+  int FUNCTION_STARTS_WITH = 54;\n+  int FUNCTION_CONTAINS = 55;\n+  int FUNCTION_SUBSTRING_BEFORE = 56;\n+  int FUNCTION_SUBSTRING_AFTER = 57;\n+  int FUNCTION_SUBSTRING = 58;\n+  int FUNCTION_STRING_LENGTH = 59;\n+  int FUNCTION_NORMALIZE_SPACE = 60;\n+  int FUNCTION_TRANSLATE = 61;\n+  int FUNCTION_BOOLEAN = 62;\n+  int FUNCTION_NOT = 63;\n+  int FUNCTION_TRUE = 64;\n+  int FUNCTION_FALSE = 65;\n+  int FUNCTION_NULL = 66;\n+  int FUNCTION_LANG = 67;\n+  int FUNCTION_NUMBER = 68;\n+  int FUNCTION_SUM = 69;\n+  int FUNCTION_FLOOR = 70;\n+  int FUNCTION_CEILING = 71;\n+  int FUNCTION_ROUND = 72;\n+  int NCName = 73;\n \n   int DEFAULT = 0;\n \n     \"\\\"position\\\"\",\n     \"\\\"count\\\"\",\n     \"\\\"id\\\"\",\n+    \"\\\"key\\\"\",\n     \"\\\"local-name\\\"\",\n     \"\\\"namespace-uri\\\"\",\n     \"\\\"name\\\"\",\n--- a/src/java/org/apache/commons/jxpath/ri/parser/XPathParserTokenManager.java\n+++ b/src/java/org/apache/commons/jxpath/ri/parser/XPathParserTokenManager.java\n    switch (pos)\n    {\n       case 0:\n-         if ((active1 & 0x3000L) != 0L)\n+         if ((active1 & 0x6000L) != 0L)\n             return 11;\n-         if ((active0 & 0xffffffffff800000L) != 0L || (active1 & 0xffL) != 0L)\n-         {\n-            jjmatchedKind = 72;\n+         if ((active0 & 0xffffffffff800000L) != 0L || (active1 & 0x1ffL) != 0L)\n+         {\n+            jjmatchedKind = 73;\n             return 13;\n          }\n          return -1;\n       case 1:\n          if ((active0 & 0x800000800000L) != 0L)\n             return 13;\n-         if ((active0 & 0xffff7fffff000000L) != 0L || (active1 & 0xffL) != 0L)\n-         {\n-            jjmatchedKind = 72;\n+         if ((active0 & 0xffff7fffff000000L) != 0L || (active1 & 0x1ffL) != 0L)\n+         {\n+            jjmatchedKind = 73;\n             jjmatchedPos = 1;\n             return 13;\n          }\n          return -1;\n       case 2:\n-         if ((active0 & 0xbfff7ffff8000000L) != 0L || (active1 & 0xefL) != 0L)\n-         {\n-            jjmatchedKind = 72;\n+         if ((active0 & 0x7ffe7ffff8000000L) != 0L || (active1 & 0x1dfL) != 0L)\n+         {\n+            jjmatchedKind = 73;\n             jjmatchedPos = 2;\n             return 13;\n          }\n-         if ((active0 & 0x4000000007000000L) != 0L || (active1 & 0x10L) != 0L)\n+         if ((active0 & 0x8001000007000000L) != 0L || (active1 & 0x20L) != 0L)\n             return 13;\n          return -1;\n       case 3:\n-         if ((active0 & 0x8006101018000000L) != 0L || (active1 & 0x6L) != 0L)\n-            return 13;\n-         if ((active0 & 0x3ff96fefe0000000L) != 0L || (active1 & 0xe9L) != 0L)\n+         if ((active0 & 0x7ff26fefe0000000L) != 0L || (active1 & 0x1d2L) != 0L)\n          {\n             if (jjmatchedPos != 3)\n             {\n-               jjmatchedKind = 72;\n+               jjmatchedKind = 73;\n                jjmatchedPos = 3;\n             }\n             return 13;\n          }\n+         if ((active0 & 0xc101018000000L) != 0L || (active1 & 0xdL) != 0L)\n+            return 13;\n          return -1;\n       case 4:\n-         if ((active0 & 0x400000000000L) != 0L || (active1 & 0xa1L) != 0L)\n-            return 13;\n-         if ((active0 & 0x3ffb2fff60000000L) != 0L || (active1 & 0x48L) != 0L)\n-         {\n-            jjmatchedKind = 72;\n+         if ((active0 & 0x400000000000L) != 0L || (active1 & 0x142L) != 0L)\n+            return 13;\n+         if ((active0 & 0x7ff62fff60000000L) != 0L || (active1 & 0x90L) != 0L)\n+         {\n+            jjmatchedKind = 73;\n             jjmatchedPos = 4;\n             return 13;\n          }\n          {\n             if (jjmatchedPos < 3)\n             {\n-               jjmatchedKind = 72;\n+               jjmatchedKind = 73;\n                jjmatchedPos = 3;\n             }\n             return -1;\n          }\n          return -1;\n       case 5:\n+         if ((active0 & 0x77c62ffe60000000L) != 0L || (active1 & 0x80L) != 0L)\n+         {\n+            if (jjmatchedPos != 5)\n+            {\n+               jjmatchedKind = 73;\n+               jjmatchedPos = 5;\n+            }\n+            return 13;\n+         }\n+         if ((active0 & 0x830000000000000L) != 0L || (active1 & 0x10L) != 0L)\n+            return 13;\n          if ((active0 & 0x100000000L) != 0L)\n          {\n             if (jjmatchedPos < 4)\n             {\n-               jjmatchedKind = 72;\n+               jjmatchedKind = 73;\n                jjmatchedPos = 4;\n             }\n             return -1;\n          }\n-         if ((active0 & 0x418000000000000L) != 0L || (active1 & 0x8L) != 0L)\n-            return 13;\n          if ((active0 & 0x80000000L) != 0L)\n          {\n             if (jjmatchedPos < 3)\n             {\n-               jjmatchedKind = 72;\n+               jjmatchedKind = 73;\n                jjmatchedPos = 3;\n             }\n             return -1;\n          }\n-         if ((active0 & 0x3be32ffe60000000L) != 0L || (active1 & 0x40L) != 0L)\n-         {\n-            if (jjmatchedPos != 5)\n-            {\n-               jjmatchedKind = 72;\n+         return -1;\n+      case 6:\n+         if ((active0 & 0x3fc62ffc40000000L) != 0L)\n+         {\n+            jjmatchedKind = 73;\n+            jjmatchedPos = 6;\n+            return 13;\n+         }\n+         if ((active0 & 0x4000000020000000L) != 0L || (active1 & 0x80L) != 0L)\n+            return 13;\n+         if ((active0 & 0x200000000L) != 0L)\n+         {\n+            if (jjmatchedPos < 5)\n+            {\n+               jjmatchedKind = 73;\n                jjmatchedPos = 5;\n             }\n-            return 13;\n-         }\n-         return -1;\n-      case 6:\n+            return -1;\n+         }\n          if ((active0 & 0x100000000L) != 0L)\n          {\n             if (jjmatchedPos < 4)\n             {\n-               jjmatchedKind = 72;\n+               jjmatchedKind = 73;\n                jjmatchedPos = 4;\n             }\n             return -1;\n          }\n-         if ((active0 & 0x2000000020000000L) != 0L || (active1 & 0x40L) != 0L)\n-            return 13;\n+         return -1;\n+      case 7:\n+         if ((active0 & 0x80200000000000L) != 0L)\n+            return 13;\n+         if ((active0 & 0x3f460ffc40000000L) != 0L)\n+         {\n+            jjmatchedKind = 73;\n+            jjmatchedPos = 7;\n+            return 13;\n+         }\n          if ((active0 & 0x200000000L) != 0L)\n          {\n             if (jjmatchedPos < 5)\n             {\n-               jjmatchedKind = 72;\n+               jjmatchedKind = 73;\n                jjmatchedPos = 5;\n             }\n             return -1;\n          }\n-         if ((active0 & 0x1fe32ffc40000000L) != 0L)\n-         {\n-            jjmatchedKind = 72;\n-            jjmatchedPos = 6;\n-            return 13;\n-         }\n-         return -1;\n-      case 7:\n-         if ((active0 & 0x40200000000000L) != 0L)\n-            return 13;\n-         if ((active0 & 0x200000000L) != 0L)\n-         {\n-            if (jjmatchedPos < 5)\n-            {\n-               jjmatchedKind = 72;\n-               jjmatchedPos = 5;\n+         return -1;\n+      case 8:\n+         if ((active0 & 0x18460ff840000000L) != 0L)\n+         {\n+            if (jjmatchedPos != 8)\n+            {\n+               jjmatchedKind = 73;\n+               jjmatchedPos = 8;\n+            }\n+            return 13;\n+         }\n+         if ((active0 & 0x2700000000000000L) != 0L)\n+            return 13;\n+         if ((active0 & 0x400000000L) != 0L)\n+         {\n+            if (jjmatchedPos < 7)\n+            {\n+               jjmatchedKind = 73;\n+               jjmatchedPos = 7;\n             }\n             return -1;\n          }\n-         if ((active0 & 0x1fa30ffc40000000L) != 0L)\n-         {\n-            jjmatchedKind = 72;\n-            jjmatchedPos = 7;\n-            return 13;\n-         }\n-         return -1;\n-      case 8:\n-         if ((active0 & 0x1380000000000000L) != 0L)\n-            return 13;\n+         return -1;\n+      case 9:\n+         if ((active0 & 0x1b440f8040000000L) != 0L)\n+         {\n+            jjmatchedKind = 73;\n+            jjmatchedPos = 9;\n+            return 13;\n+         }\n+         if ((active0 & 0x2000000000000L) != 0L)\n+            return 13;\n+         if ((active0 & 0x7800000000L) != 0L)\n+         {\n+            if (jjmatchedPos < 8)\n+            {\n+               jjmatchedKind = 73;\n+               jjmatchedPos = 8;\n+            }\n+            return -1;\n+         }\n          if ((active0 & 0x400000000L) != 0L)\n          {\n             if (jjmatchedPos < 7)\n             {\n-               jjmatchedKind = 72;\n+               jjmatchedKind = 73;\n                jjmatchedPos = 7;\n             }\n             return -1;\n          }\n-         if ((active0 & 0xc230ff840000000L) != 0L)\n-         {\n-            if (jjmatchedPos != 8)\n-            {\n-               jjmatchedKind = 72;\n+         return -1;\n+      case 10:\n+         if ((active0 & 0x40000000000000L) != 0L)\n+            return 13;\n+         if ((active0 & 0x8000000000L) != 0L)\n+         {\n+            if (jjmatchedPos < 9)\n+            {\n+               jjmatchedKind = 73;\n+               jjmatchedPos = 9;\n+            }\n+            return -1;\n+         }\n+         if ((active0 & 0x7800000000L) != 0L)\n+         {\n+            if (jjmatchedPos < 8)\n+            {\n+               jjmatchedKind = 73;\n                jjmatchedPos = 8;\n             }\n-            return 13;\n-         }\n-         return -1;\n-      case 9:\n-         if ((active0 & 0x7800000000L) != 0L)\n-         {\n-            if (jjmatchedPos < 8)\n-            {\n-               jjmatchedKind = 72;\n-               jjmatchedPos = 8;\n-            }\n             return -1;\n          }\n-         if ((active0 & 0x1000000000000L) != 0L)\n-            return 13;\n-         if ((active0 & 0xda20f8040000000L) != 0L)\n-         {\n-            jjmatchedKind = 72;\n-            jjmatchedPos = 9;\n-            return 13;\n-         }\n-         if ((active0 & 0x400000000L) != 0L)\n-         {\n-            if (jjmatchedPos < 7)\n-            {\n-               jjmatchedKind = 72;\n-               jjmatchedPos = 7;\n+         if ((active0 & 0x1b040f0040000000L) != 0L)\n+         {\n+            jjmatchedKind = 73;\n+            jjmatchedPos = 10;\n+            return 13;\n+         }\n+         return -1;\n+      case 11:\n+         if ((active0 & 0x1b040f0040000000L) != 0L)\n+         {\n+            jjmatchedKind = 73;\n+            jjmatchedPos = 11;\n+            return 13;\n+         }\n+         if ((active0 & 0x8000000000L) != 0L)\n+         {\n+            if (jjmatchedPos < 9)\n+            {\n+               jjmatchedKind = 73;\n+               jjmatchedPos = 9;\n             }\n             return -1;\n          }\n          return -1;\n-      case 10:\n-         if ((active0 & 0x7800000000L) != 0L)\n-         {\n-            if (jjmatchedPos < 8)\n-            {\n-               jjmatchedKind = 72;\n-               jjmatchedPos = 8;\n-            }\n-            return -1;\n-         }\n-         if ((active0 & 0x20000000000000L) != 0L)\n-            return 13;\n-         if ((active0 & 0xd820f0040000000L) != 0L)\n-         {\n-            jjmatchedKind = 72;\n-            jjmatchedPos = 10;\n-            return 13;\n-         }\n-         if ((active0 & 0x8000000000L) != 0L)\n-         {\n-            if (jjmatchedPos < 9)\n-            {\n-               jjmatchedKind = 72;\n-               jjmatchedPos = 9;\n-            }\n-            return -1;\n-         }\n-         return -1;\n-      case 11:\n-         if ((active0 & 0xd820f0040000000L) != 0L)\n-         {\n-            jjmatchedKind = 72;\n-            jjmatchedPos = 11;\n-            return 13;\n-         }\n-         if ((active0 & 0x8000000000L) != 0L)\n-         {\n-            if (jjmatchedPos < 9)\n-            {\n-               jjmatchedKind = 72;\n-               jjmatchedPos = 9;\n-            }\n-            return -1;\n-         }\n-         return -1;\n       case 12:\n-         if ((active0 & 0x402000000000000L) != 0L)\n-            return 13;\n-         if ((active0 & 0x9800f0040000000L) != 0L)\n-         {\n-            jjmatchedKind = 72;\n+         if ((active0 & 0x13000f0040000000L) != 0L)\n+         {\n+            jjmatchedKind = 73;\n             jjmatchedPos = 12;\n             return 13;\n          }\n+         if ((active0 & 0x804000000000000L) != 0L)\n+            return 13;\n          return -1;\n       case 13:\n-         if ((active0 & 0x9800f0040000000L) != 0L)\n-         {\n-            jjmatchedKind = 72;\n+         if ((active0 & 0x13000f0040000000L) != 0L)\n+         {\n+            jjmatchedKind = 73;\n             jjmatchedPos = 13;\n             return 13;\n          }\n          return -1;\n       case 14:\n-         if ((active0 & 0x900000000000000L) != 0L)\n-            return 13;\n-         if ((active0 & 0x800f0040000000L) != 0L)\n-         {\n-            jjmatchedKind = 72;\n+         if ((active0 & 0x1000f0040000000L) != 0L)\n+         {\n+            jjmatchedKind = 73;\n             jjmatchedPos = 14;\n             return 13;\n          }\n+         if ((active0 & 0x1200000000000000L) != 0L)\n+            return 13;\n          return -1;\n       case 15:\n-         if ((active0 & 0x80000000000000L) != 0L)\n-            return 13;\n          if ((active0 & 0xf0040000000L) != 0L)\n          {\n-            jjmatchedKind = 72;\n+            jjmatchedKind = 73;\n             jjmatchedPos = 15;\n             return 13;\n          }\n+         if ((active0 & 0x100000000000000L) != 0L)\n+            return 13;\n          return -1;\n       case 16:\n          if ((active0 & 0x10000000000L) != 0L)\n          {\n             if (jjmatchedPos < 15)\n             {\n-               jjmatchedKind = 72;\n+               jjmatchedKind = 73;\n                jjmatchedPos = 15;\n             }\n             return -1;\n          }\n          if ((active0 & 0xe0040000000L) != 0L)\n          {\n-            jjmatchedKind = 72;\n+            jjmatchedKind = 73;\n             jjmatchedPos = 16;\n             return 13;\n          }\n          return -1;\n       case 17:\n+         if ((active0 & 0x60000000000L) != 0L)\n+         {\n+            if (jjmatchedPos < 16)\n+            {\n+               jjmatchedKind = 73;\n+               jjmatchedPos = 16;\n+            }\n+            return -1;\n+         }\n          if ((active0 & 0x10000000000L) != 0L)\n          {\n             if (jjmatchedPos < 15)\n             {\n-               jjmatchedKind = 72;\n+               jjmatchedKind = 73;\n                jjmatchedPos = 15;\n             }\n             return -1;\n          }\n-         if ((active0 & 0x60000000000L) != 0L)\n-         {\n-            if (jjmatchedPos < 16)\n-            {\n-               jjmatchedKind = 72;\n-               jjmatchedPos = 16;\n-            }\n-            return -1;\n-         }\n          if ((active0 & 0x80040000000L) != 0L)\n          {\n-            jjmatchedKind = 72;\n+            jjmatchedKind = 73;\n             jjmatchedPos = 17;\n             return 13;\n          }\n          {\n             if (jjmatchedPos < 16)\n             {\n-               jjmatchedKind = 72;\n+               jjmatchedKind = 73;\n                jjmatchedPos = 16;\n             }\n             return -1;\n          }\n          if ((active0 & 0x40000000L) != 0L)\n          {\n-            jjmatchedKind = 72;\n+            jjmatchedKind = 73;\n             jjmatchedPos = 18;\n             return 13;\n          }\n          {\n             if (jjmatchedPos < 17)\n             {\n-               jjmatchedKind = 72;\n+               jjmatchedKind = 73;\n                jjmatchedPos = 17;\n             }\n             return -1;\n       case 19:\n          if ((active0 & 0x40000000L) != 0L)\n          {\n-            jjmatchedKind = 72;\n+            jjmatchedKind = 73;\n             jjmatchedPos = 19;\n             return 13;\n          }\n          {\n             if (jjmatchedPos < 17)\n             {\n-               jjmatchedKind = 72;\n+               jjmatchedKind = 73;\n                jjmatchedPos = 17;\n             }\n             return -1;\n       case 20:\n          if ((active0 & 0x40000000L) != 0L)\n          {\n-            jjmatchedKind = 72;\n+            jjmatchedKind = 73;\n             jjmatchedPos = 20;\n             return 13;\n          }\n       case 36:\n          return jjStopAtPos(0, 13);\n       case 40:\n-         return jjStopAtPos(0, 74);\n+         return jjStopAtPos(0, 75);\n       case 41:\n-         return jjStopAtPos(0, 75);\n+         return jjStopAtPos(0, 76);\n       case 42:\n-         return jjStopAtPos(0, 82);\n+         return jjStopAtPos(0, 83);\n       case 43:\n          return jjStopAtPos(0, 5);\n       case 44:\n-         return jjStopAtPos(0, 81);\n+         return jjStopAtPos(0, 82);\n       case 45:\n          return jjStopAtPos(0, 6);\n       case 46:\n-         jjmatchedKind = 76;\n-         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L);\n+         jjmatchedKind = 77;\n+         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L);\n       case 47:\n          jjmatchedKind = 2;\n          return jjMoveStringLiteralDfa1_0(0x8L, 0x0L);\n       case 58:\n-         return jjStopAtPos(0, 73);\n+         return jjStopAtPos(0, 74);\n       case 60:\n          jjmatchedKind = 9;\n          return jjMoveStringLiteralDfa1_0(0x400L, 0x0L);\n          jjmatchedKind = 11;\n          return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);\n       case 64:\n+         return jjStopAtPos(0, 81);\n+      case 91:\n+         return jjStopAtPos(0, 79);\n+      case 93:\n          return jjStopAtPos(0, 80);\n-      case 91:\n-         return jjStopAtPos(0, 78);\n-      case 93:\n-         return jjStopAtPos(0, 79);\n       case 97:\n          return jjMoveStringLiteralDfa1_0(0x10c01000000L, 0x0L);\n       case 98:\n-         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);\n+         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);\n       case 99:\n-         return jjMoveStringLiteralDfa1_0(0x50400120000000L, 0x40L);\n+         return jjMoveStringLiteralDfa1_0(0xa0400120000000L, 0x80L);\n       case 100:\n          return jjMoveStringLiteralDfa1_0(0x88004000000L, 0x0L);\n       case 102:\n-         return jjMoveStringLiteralDfa1_0(0x24000000000L, 0x21L);\n+         return jjMoveStringLiteralDfa1_0(0x24000000000L, 0x42L);\n       case 105:\n          return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);\n+      case 107:\n+         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L);\n       case 108:\n-         return jjMoveStringLiteralDfa1_0(0x1100000000000L, 0x4L);\n+         return jjMoveStringLiteralDfa1_0(0x2100000000000L, 0x8L);\n       case 109:\n          return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);\n       case 110:\n-         return jjMoveStringLiteralDfa1_0(0x4806001008000000L, 0xaL);\n+         return jjMoveStringLiteralDfa1_0(0x900c001008000000L, 0x14L);\n       case 111:\n          return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);\n       case 112:\n          return jjMoveStringLiteralDfa1_0(0x242240000000L, 0x0L);\n       case 114:\n-         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);\n+         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);\n       case 115:\n-         return jjMoveStringLiteralDfa1_0(0x7a8000080000000L, 0x10L);\n+         return jjMoveStringLiteralDfa1_0(0xf50000080000000L, 0x20L);\n       case 116:\n-         return jjMoveStringLiteralDfa1_0(0x9000000010000000L, 0x0L);\n+         return jjMoveStringLiteralDfa1_0(0x2000000010000000L, 0x1L);\n       case 124:\n          return jjStopAtPos(0, 4);\n       default :\n    switch(curChar)\n    {\n       case 46:\n-         if ((active1 & 0x2000L) != 0L)\n-            return jjStopAtPos(1, 77);\n+         if ((active1 & 0x4000L) != 0L)\n+            return jjStopAtPos(1, 78);\n          break;\n       case 47:\n          if ((active0 & 0x8L) != 0L)\n             return jjStopAtPos(1, 12);\n          break;\n       case 97:\n-         return jjMoveStringLiteralDfa2_0(active0, 0x6101200000000L, active1, 0x5L);\n+         return jjMoveStringLiteralDfa2_0(active0, 0xc101200000000L, active1, 0xaL);\n       case 100:\n          if ((active0 & 0x800000000000L) != 0L)\n             return jjStartNfaWithStates_0(1, 47, 13);\n          break;\n       case 101:\n-         return jjMoveStringLiteralDfa2_0(active0, 0x88090000000L, active1, 0x40L);\n+         return jjMoveStringLiteralDfa2_0(active0, 0x1088090000000L, active1, 0x80L);\n       case 104:\n          return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L);\n       case 105:\n          return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);\n       case 108:\n-         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20L);\n+         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40L);\n       case 110:\n          return jjMoveStringLiteralDfa2_0(active0, 0x10401000000L, active1, 0L);\n       case 111:\n-         return jjMoveStringLiteralDfa2_0(active0, 0x685162402a000000L, active1, 0x80L);\n+         return jjMoveStringLiteralDfa2_0(active0, 0xd0a262402a000000L, active1, 0x100L);\n       case 114:\n          if ((active0 & 0x800000L) != 0L)\n             return jjStartNfaWithStates_0(1, 23, 13);\n-         return jjMoveStringLiteralDfa2_0(active0, 0x9000042040000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa2_0(active0, 0x2000042040000000L, active1, 0x1L);\n       case 116:\n-         return jjMoveStringLiteralDfa2_0(active0, 0x428000800000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa2_0(active0, 0x850000800000000L, active1, 0L);\n       case 117:\n-         return jjMoveStringLiteralDfa2_0(active0, 0x380000000000000L, active1, 0x1aL);\n+         return jjMoveStringLiteralDfa2_0(active0, 0x700000000000000L, active1, 0x34L);\n       default :\n          break;\n    }\n    switch(curChar)\n    {\n       case 97:\n-         return jjMoveStringLiteralDfa3_0(active0, 0x1020000000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa3_0(active0, 0x2040000000000000L, active1, 0L);\n       case 98:\n-         return jjMoveStringLiteralDfa3_0(active0, 0x380000000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa3_0(active0, 0x700000000000000L, active1, 0L);\n       case 99:\n-         return jjMoveStringLiteralDfa3_0(active0, 0x1010400000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa3_0(active0, 0x2010400000000L, active1, 0L);\n       case 100:\n          if ((active0 & 0x1000000L) != 0L)\n             return jjStartNfaWithStates_0(2, 24, 13);\n       case 101:\n          return jjMoveStringLiteralDfa3_0(active0, 0x42000000000L, active1, 0L);\n       case 105:\n-         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0x40L);\n+         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0x80L);\n       case 108:\n-         return jjMoveStringLiteralDfa3_0(active0, 0x24080000000L, active1, 0x3L);\n+         return jjMoveStringLiteralDfa3_0(active0, 0x24080000000L, active1, 0x6L);\n       case 109:\n-         if ((active1 & 0x10L) != 0L)\n-            return jjStartNfaWithStates_0(2, 68, 13);\n-         return jjMoveStringLiteralDfa3_0(active0, 0x6001020000000L, active1, 0x8L);\n+         if ((active1 & 0x20L) != 0L)\n+            return jjStartNfaWithStates_0(2, 69, 13);\n+         return jjMoveStringLiteralDfa3_0(active0, 0xc001020000000L, active1, 0x10L);\n       case 110:\n-         return jjMoveStringLiteralDfa3_0(active0, 0x50000000000000L, active1, 0x4L);\n+         return jjMoveStringLiteralDfa3_0(active0, 0xa0000000000000L, active1, 0x8L);\n       case 111:\n-         return jjMoveStringLiteralDfa3_0(active0, 0x2000000040000000L, active1, 0x20L);\n+         return jjMoveStringLiteralDfa3_0(active0, 0x4000000040000000L, active1, 0x40L);\n       case 114:\n-         return jjMoveStringLiteralDfa3_0(active0, 0xc08000200000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa3_0(active0, 0x1810000200000000L, active1, 0L);\n       case 115:\n          return jjMoveStringLiteralDfa3_0(active0, 0x388000000000L, active1, 0L);\n       case 116:\n-         if ((active0 & 0x4000000000000000L) != 0L)\n-            return jjStartNfaWithStates_0(2, 62, 13);\n+         if ((active0 & 0x8000000000000000L) != 0L)\n+            return jjStartNfaWithStates_0(2, 63, 13);\n          return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L);\n       case 117:\n-         return jjMoveStringLiteralDfa3_0(active0, 0x8000400000000000L, active1, 0x80L);\n+         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0x101L);\n       case 118:\n          if ((active0 & 0x4000000L) != 0L)\n             return jjStartNfaWithStates_0(2, 26, 13);\n          break;\n       case 120:\n          return jjMoveStringLiteralDfa3_0(active0, 0x10000000L, active1, 0L);\n+      case 121:\n+         if ((active0 & 0x1000000000000L) != 0L)\n+            return jjStartNfaWithStates_0(2, 48, 13);\n+         break;\n       default :\n          break;\n    }\n    switch(curChar)\n    {\n       case 97:\n-         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0L);\n       case 98:\n-         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8L);\n+         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10L);\n       case 99:\n-         return jjMoveStringLiteralDfa4_0(active0, 0x100ca040000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa4_0(active0, 0x200ca040000000L, active1, 0L);\n       case 101:\n          if ((active0 & 0x8000000L) != 0L)\n             return jjStartNfaWithStates_0(3, 27, 13);\n-         else if ((active0 & 0x4000000000000L) != 0L)\n-         {\n-            jjmatchedKind = 50;\n+         else if ((active0 & 0x8000000000000L) != 0L)\n+         {\n+            jjmatchedKind = 51;\n             jjmatchedPos = 3;\n          }\n-         else if ((active0 & 0x8000000000000000L) != 0L)\n-            return jjStartNfaWithStates_0(3, 63, 13);\n-         return jjMoveStringLiteralDfa4_0(active0, 0x2011600000000L, active1, 0L);\n+         else if ((active1 & 0x1L) != 0L)\n+            return jjStartNfaWithStates_0(3, 64, 13);\n+         return jjMoveStringLiteralDfa4_0(active0, 0x4011600000000L, active1, 0L);\n       case 102:\n          return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0L);\n       case 103:\n+         if ((active1 & 0x8L) != 0L)\n+            return jjStartNfaWithStates_0(3, 67, 13);\n+         break;\n+      case 105:\n+         return jjMoveStringLiteralDfa4_0(active0, 0x810200000000000L, active1, 0L);\n+      case 108:\n          if ((active1 & 0x4L) != 0L)\n             return jjStartNfaWithStates_0(3, 66, 13);\n-         break;\n-      case 105:\n-         return jjMoveStringLiteralDfa4_0(active0, 0x408200000000000L, active1, 0L);\n-      case 108:\n-         if ((active1 & 0x2L) != 0L)\n-            return jjStartNfaWithStates_0(3, 65, 13);\n-         return jjMoveStringLiteralDfa4_0(active0, 0x2000024100000000L, active1, 0x40L);\n+         return jjMoveStringLiteralDfa4_0(active0, 0x4000024100000000L, active1, 0x80L);\n       case 109:\n-         return jjMoveStringLiteralDfa4_0(active0, 0x800000020000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa4_0(active0, 0x1000000020000000L, active1, 0L);\n       case 110:\n-         return jjMoveStringLiteralDfa4_0(active0, 0x1000400000000000L, active1, 0x80L);\n+         return jjMoveStringLiteralDfa4_0(active0, 0x2000400000000000L, active1, 0x100L);\n       case 111:\n-         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20L);\n+         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L);\n       case 114:\n-         return jjMoveStringLiteralDfa4_0(active0, 0x20000800000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa4_0(active0, 0x40000800000000L, active1, 0L);\n       case 115:\n-         return jjMoveStringLiteralDfa4_0(active0, 0x380000000000000L, active1, 0x1L);\n+         return jjMoveStringLiteralDfa4_0(active0, 0x700000000000000L, active1, 0x2L);\n       case 116:\n          if ((active0 & 0x10000000L) != 0L)\n             return jjStartNfaWithStates_0(3, 28, 13);\n          else if ((active0 & 0x100000000000L) != 0L)\n             return jjStartNfaWithStates_0(3, 44, 13);\n-         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0L);\n       default :\n          break;\n    }\n       case 58:\n          return jjMoveStringLiteralDfa5_0(active0, 0x80000000L, active1, 0L);\n       case 97:\n-         return jjMoveStringLiteralDfa5_0(active0, 0x850000000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa5_0(active0, 0x10a0000000000000L, active1, 0L);\n       case 100:\n-         if ((active1 & 0x80L) != 0L)\n-            return jjStartNfaWithStates_0(4, 71, 13);\n+         if ((active1 & 0x100L) != 0L)\n+            return jjStartNfaWithStates_0(4, 72, 13);\n          return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0L);\n       case 101:\n-         if ((active1 & 0x1L) != 0L)\n-            return jjStartNfaWithStates_0(4, 64, 13);\n-         return jjMoveStringLiteralDfa5_0(active0, 0x20000ca060000000L, active1, 0x8L);\n+         if ((active1 & 0x2L) != 0L)\n+            return jjStartNfaWithStates_0(4, 65, 13);\n+         return jjMoveStringLiteralDfa5_0(active0, 0x40000ca060000000L, active1, 0x10L);\n       case 105:\n-         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0x40L);\n+         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0x80L);\n       case 108:\n-         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0L);\n       case 110:\n-         return jjMoveStringLiteralDfa5_0(active0, 0x408000200000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa5_0(active0, 0x810000200000000L, active1, 0L);\n       case 111:\n          return jjMoveStringLiteralDfa5_0(active0, 0x24000000000L, active1, 0L);\n       case 114:\n-         if ((active1 & 0x20L) != 0L)\n-            return jjStartNfaWithStates_0(4, 69, 13);\n+         if ((active1 & 0x40L) != 0L)\n+            return jjStartNfaWithStates_0(4, 70, 13);\n          break;\n       case 115:\n-         return jjMoveStringLiteralDfa5_0(active0, 0x1002011400000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa5_0(active0, 0x2004011400000000L, active1, 0L);\n       case 116:\n          if ((active0 & 0x400000000000L) != 0L)\n             return jjStartNfaWithStates_0(4, 46, 13);\n-         return jjMoveStringLiteralDfa5_0(active0, 0x3a0200000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa5_0(active0, 0x740200000000000L, active1, 0L);\n       default :\n          break;\n    }\n    switch(curChar)\n    {\n       case 45:\n-         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L, active1, 0L);\n       case 58:\n          if ((active0 & 0x80000000L) != 0L)\n             return jjStopAtPos(5, 31);\n          return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0L);\n       case 97:\n-         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0L);\n       case 98:\n          return jjMoveStringLiteralDfa6_0(active0, 0x800000000L, active1, 0L);\n       case 100:\n          return jjMoveStringLiteralDfa6_0(active0, 0x42000000000L, active1, 0L);\n       case 103:\n-         if ((active0 & 0x8000000000000L) != 0L)\n-         {\n-            jjmatchedKind = 51;\n+         if ((active0 & 0x10000000000000L) != 0L)\n+         {\n+            jjmatchedKind = 52;\n             jjmatchedPos = 5;\n          }\n-         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0L);\n       case 105:\n-         return jjMoveStringLiteralDfa6_0(active0, 0x40200000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa6_0(active0, 0x80200000000000L, active1, 0L);\n       case 108:\n-         return jjMoveStringLiteralDfa6_0(active0, 0x1800000000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa6_0(active0, 0x3000000000000000L, active1, 0L);\n       case 110:\n-         return jjMoveStringLiteralDfa6_0(active0, 0x88020000000L, active1, 0x40L);\n+         return jjMoveStringLiteralDfa6_0(active0, 0x88020000000L, active1, 0x80L);\n       case 112:\n-         return jjMoveStringLiteralDfa6_0(active0, 0x2001000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa6_0(active0, 0x4001000000000L, active1, 0L);\n       case 114:\n-         if ((active1 & 0x8L) != 0L)\n-            return jjStartNfaWithStates_0(5, 67, 13);\n-         return jjMoveStringLiteralDfa6_0(active0, 0x380000000000000L, active1, 0L);\n+         if ((active1 & 0x10L) != 0L)\n+            return jjStartNfaWithStates_0(5, 68, 13);\n+         return jjMoveStringLiteralDfa6_0(active0, 0x700000000000000L, active1, 0L);\n       case 115:\n-         return jjMoveStringLiteralDfa6_0(active0, 0x20000040000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa6_0(active0, 0x40000040000000L, active1, 0L);\n       case 116:\n-         if ((active0 & 0x10000000000000L) != 0L)\n-            return jjStartNfaWithStates_0(5, 52, 13);\n+         if ((active0 & 0x20000000000000L) != 0L)\n+            return jjStartNfaWithStates_0(5, 53, 13);\n          return jjMoveStringLiteralDfa6_0(active0, 0x10600000000L, active1, 0L);\n       case 119:\n          return jjMoveStringLiteralDfa6_0(active0, 0x24000000000L, active1, 0L);\n    switch(curChar)\n    {\n       case 45:\n-         return jjMoveStringLiteralDfa7_0(active0, 0x420000000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa7_0(active0, 0x840000000000000L, active1, 0L);\n       case 58:\n          if ((active0 & 0x100000000L) != 0L)\n             return jjStopAtPos(6, 32);\n          return jjMoveStringLiteralDfa7_0(active0, 0x200000000L, active1, 0L);\n       case 97:\n-         return jjMoveStringLiteralDfa7_0(active0, 0x1002001000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa7_0(active0, 0x2004001000000000L, active1, 0L);\n       case 100:\n          return jjMoveStringLiteralDfa7_0(active0, 0x88000000000L, active1, 0L);\n       case 103:\n-         if ((active1 & 0x40L) != 0L)\n-            return jjStartNfaWithStates_0(6, 70, 13);\n+         if ((active1 & 0x80L) != 0L)\n+            return jjStartNfaWithStates_0(6, 71, 13);\n          break;\n       case 105:\n-         return jjMoveStringLiteralDfa7_0(active0, 0xb80066000000000L, active1, 0L);\n+         return jjMoveStringLiteralDfa7_0(active0, 0x1700066000000000L, active1, 0L);\n       case 110:\n-         if ((active0 & 0x2000000000000000L) != 0L)\n-            return jjStartNfaWithStates_0(6, 61, 13);\n-         return jjMoveStringLiteralDfa7_0(active0, 0x41000000000000L, active1, 0L);\n+         if ((active0 & 0x4000000000000000L) != 0L)\n+            return jjStartNfaWithStates_0(6, 62, 13);\n+         return jjMoveStringLiteralDfa7_0(active0, 0x82000000000000L, active1, 0L);\n       case 111:\n          return jjMoveStringLiteralDfa7_0(active0, 0x210400000000L, active1, 0L);\n       case 115:\n             return jjStopAtPos(7, 33);\n          break;\n       case 97:\n-         return jjMoveStringLiteralDfa8_0(active0, 0x1088000000000L);\n+         return jjMoveStringLiteralDfa8_0(active0, 0x2088000000000L);\n       case 99:\n-         return jjMoveStringLiteralDfa8_0(active0, 0x2001000000000L);\n+         return jjMoveStringLiteralDfa8_0(active0, 0x4001000000000L);\n       case 105:\n          return jjMoveStringLiteralDfa8_0(active0, 0x40000000L);\n       case 108:\n-         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000000L);\n+         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000000L);\n       case 110:\n          if ((active0 & 0x200000000000L) != 0L)\n             return jjStartNfaWithStates_0(7, 45, 13);\n-         return jjMoveStringLiteralDfa8_0(active0, 0x380066000000000L);\n+         return jjMoveStringLiteralDfa8_0(active0, 0x700066000000000L);\n       case 114:\n          return jjMoveStringLiteralDfa8_0(active0, 0x10400000000L);\n       case 115:\n-         if ((active0 & 0x40000000000000L) != 0L)\n-            return jjStartNfaWithStates_0(7, 54, 13);\n+         if ((active0 & 0x80000000000000L) != 0L)\n+            return jjStartNfaWithStates_0(7, 55, 13);\n          break;\n       case 116:\n-         return jjMoveStringLiteralDfa8_0(active0, 0x1000000800000000L);\n+         return jjMoveStringLiteralDfa8_0(active0, 0x2000000800000000L);\n       case 119:\n-         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000000L);\n+         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L);\n       case 122:\n-         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000000L);\n+         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000000L);\n       default :\n          break;\n    }\n       case 58:\n          return jjMoveStringLiteralDfa9_0(active0, 0x400000000L);\n       case 101:\n-         if ((active0 & 0x1000000000000000L) != 0L)\n-            return jjStartNfaWithStates_0(8, 60, 13);\n-         return jjMoveStringLiteralDfa9_0(active0, 0xc02001800000000L);\n+         if ((active0 & 0x2000000000000000L) != 0L)\n+            return jjStartNfaWithStates_0(8, 61, 13);\n+         return jjMoveStringLiteralDfa9_0(active0, 0x1804001800000000L);\n       case 103:\n-         if ((active0 & 0x200000000000000L) != 0L)\n-         {\n-            jjmatchedKind = 57;\n+         if ((active0 & 0x400000000000000L) != 0L)\n+         {\n+            jjmatchedKind = 58;\n             jjmatchedPos = 8;\n          }\n-         return jjMoveStringLiteralDfa9_0(active0, 0x180066000000000L);\n+         return jjMoveStringLiteralDfa9_0(active0, 0x300066000000000L);\n       case 105:\n-         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000000L);\n+         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L);\n       case 109:\n-         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000L);\n+         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000L);\n       case 110:\n          return jjMoveStringLiteralDfa9_0(active0, 0x88040000000L);\n       default :\n    switch(curChar)\n    {\n       case 45:\n-         return jjMoveStringLiteralDfa10_0(active0, 0x982060000000000L);\n+         return jjMoveStringLiteralDfa10_0(active0, 0x1304060000000000L);\n       case 58:\n          if ((active0 & 0x400000000L) != 0L)\n             return jjStopAtPos(9, 34);\n          return jjMoveStringLiteralDfa10_0(active0, 0x7800000000L);\n       case 101:\n-         if ((active0 & 0x1000000000000L) != 0L)\n-            return jjStartNfaWithStates_0(9, 48, 13);\n+         if ((active0 & 0x2000000000000L) != 0L)\n+            return jjStartNfaWithStates_0(9, 49, 13);\n          break;\n       case 103:\n          return jjMoveStringLiteralDfa10_0(active0, 0x40000000L);\n       case 110:\n-         return jjMoveStringLiteralDfa10_0(active0, 0x400000000000000L);\n+         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000000L);\n       case 111:\n          return jjMoveStringLiteralDfa10_0(active0, 0x10000000000L);\n       case 116:\n-         return jjMoveStringLiteralDfa10_0(active0, 0x20088000000000L);\n+         return jjMoveStringLiteralDfa10_0(active0, 0x40088000000000L);\n       default :\n          break;\n    }\n             return jjStopAtPos(10, 38);\n          return jjMoveStringLiteralDfa11_0(active0, 0x8000000000L);\n       case 97:\n+         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000000L);\n+      case 98:\n          return jjMoveStringLiteralDfa11_0(active0, 0x100000000000000L);\n-      case 98:\n-         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000000L);\n       case 103:\n-         return jjMoveStringLiteralDfa11_0(active0, 0x400000000000000L);\n+         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000000L);\n       case 104:\n-         if ((active0 & 0x20000000000000L) != 0L)\n-            return jjStartNfaWithStates_0(10, 53, 13);\n+         if ((active0 & 0x40000000000000L) != 0L)\n+            return jjStartNfaWithStates_0(10, 54, 13);\n          break;\n       case 114:\n          return jjMoveStringLiteralDfa11_0(active0, 0x10000000000L);\n       case 115:\n-         return jjMoveStringLiteralDfa11_0(active0, 0x800060000000000L);\n+         return jjMoveStringLiteralDfa11_0(active0, 0x1000060000000000L);\n       case 117:\n-         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000L);\n+         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000L);\n       default :\n          break;\n    }\n             return jjStopAtPos(11, 39);\n          break;\n       case 101:\n-         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000000L);\n+         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000000L);\n       case 102:\n-         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000000L);\n+         return jjMoveStringLiteralDfa12_0(active0, 0x200000000000000L);\n       case 105:\n          return jjMoveStringLiteralDfa12_0(active0, 0x60040000000L);\n       case 111:\n          return jjMoveStringLiteralDfa12_0(active0, 0x80000000000L);\n       case 112:\n+         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000000L);\n+      case 114:\n+         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000L);\n+      case 116:\n          return jjMoveStringLiteralDfa12_0(active0, 0x800000000000000L);\n-      case 114:\n-         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000000L);\n-      case 116:\n-         return jjMoveStringLiteralDfa12_0(active0, 0x400000000000000L);\n       default :\n          break;\n    }\n    switch(curChar)\n    {\n       case 97:\n-         return jjMoveStringLiteralDfa13_0(active0, 0x800000000000000L);\n+         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000000000L);\n       case 98:\n          return jjMoveStringLiteralDfa13_0(active0, 0x60000000000L);\n       case 102:\n-         return jjMoveStringLiteralDfa13_0(active0, 0x80000000000000L);\n+         return jjMoveStringLiteralDfa13_0(active0, 0x100000000000000L);\n       case 104:\n-         if ((active0 & 0x400000000000000L) != 0L)\n-            return jjStartNfaWithStates_0(12, 58, 13);\n+         if ((active0 & 0x800000000000000L) != 0L)\n+            return jjStartNfaWithStates_0(12, 59, 13);\n          break;\n       case 105:\n-         if ((active0 & 0x2000000000000L) != 0L)\n-            return jjStartNfaWithStates_0(12, 49, 13);\n+         if ((active0 & 0x4000000000000L) != 0L)\n+            return jjStartNfaWithStates_0(12, 50, 13);\n          break;\n       case 110:\n          return jjMoveStringLiteralDfa13_0(active0, 0x40000000L);\n       case 115:\n          return jjMoveStringLiteralDfa13_0(active0, 0x10000000000L);\n       case 116:\n-         return jjMoveStringLiteralDfa13_0(active0, 0x100000000000000L);\n+         return jjMoveStringLiteralDfa13_0(active0, 0x200000000000000L);\n       default :\n          break;\n    }\n       case 45:\n          return jjMoveStringLiteralDfa14_0(active0, 0x80000000000L);\n       case 99:\n-         return jjMoveStringLiteralDfa14_0(active0, 0x800000000000000L);\n+         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000000000L);\n       case 101:\n-         return jjMoveStringLiteralDfa14_0(active0, 0x100010000000000L);\n+         return jjMoveStringLiteralDfa14_0(active0, 0x200010000000000L);\n       case 108:\n          return jjMoveStringLiteralDfa14_0(active0, 0x60000000000L);\n       case 111:\n-         return jjMoveStringLiteralDfa14_0(active0, 0x80000000000000L);\n+         return jjMoveStringLiteralDfa14_0(active0, 0x100000000000000L);\n       case 115:\n          return jjMoveStringLiteralDfa14_0(active0, 0x40000000L);\n       default :\n    switch(curChar)\n    {\n       case 101:\n-         if ((active0 & 0x800000000000000L) != 0L)\n-            return jjStartNfaWithStates_0(14, 59, 13);\n+         if ((active0 & 0x1000000000000000L) != 0L)\n+            return jjStartNfaWithStates_0(14, 60, 13);\n          break;\n       case 105:\n          return jjMoveStringLiteralDfa15_0(active0, 0x60000000000L);\n       case 108:\n          return jjMoveStringLiteralDfa15_0(active0, 0x10000000000L);\n       case 114:\n-         if ((active0 & 0x100000000000000L) != 0L)\n-            return jjStartNfaWithStates_0(14, 56, 13);\n-         return jjMoveStringLiteralDfa15_0(active0, 0x80000000000000L);\n+         if ((active0 & 0x200000000000000L) != 0L)\n+            return jjStartNfaWithStates_0(14, 57, 13);\n+         return jjMoveStringLiteralDfa15_0(active0, 0x100000000000000L);\n       case 115:\n          return jjMoveStringLiteralDfa15_0(active0, 0x80000000000L);\n       case 116:\n    switch(curChar)\n    {\n       case 101:\n-         if ((active0 & 0x80000000000000L) != 0L)\n-            return jjStartNfaWithStates_0(15, 55, 13);\n+         if ((active0 & 0x100000000000000L) != 0L)\n+            return jjStartNfaWithStates_0(15, 56, 13);\n          return jjMoveStringLiteralDfa16_0(active0, 0x80000000000L);\n       case 102:\n          return jjMoveStringLiteralDfa16_0(active0, 0x10000000000L);\n                case 13:\n                   if ((0x3ff600000000000L & l) == 0L)\n                      break;\n-                  if (kind > 72)\n-                     kind = 72;\n+                  if (kind > 73)\n+                     kind = 73;\n                   jjstateSet[jjnewStateCnt++] = 13;\n                   break;\n                default : break;\n                case 13:\n                   if ((0x7fffffe87fffffeL & l) == 0L)\n                      break;\n-                  if (kind > 72)\n-                     kind = 72;\n+                  if (kind > 73)\n+                     kind = 73;\n                   jjCheckNAdd(13);\n                   break;\n                case 2:\n                case 1:\n                   if (!jjCanMove_1(hiByte, i1, i2, l1, l2))\n                      break;\n-                  if (kind > 72)\n-                     kind = 72;\n+                  if (kind > 73)\n+                     kind = 73;\n                   jjCheckNAdd(13);\n                   break;\n                case 2:\n                case 13:\n                   if (!jjCanMove_2(hiByte, i1, i2, l1, l2))\n                      break;\n-                  if (kind > 72)\n-                     kind = 72;\n+                  if (kind > 73)\n+                     kind = 73;\n                   jjCheckNAdd(13);\n                   break;\n                default : break;\n \"\\144\\145\\163\\143\\145\\156\\144\\141\\156\\164\\72\\72\", \"\\141\\156\\143\\145\\163\\164\\157\\162\\55\\157\\162\\55\\163\\145\\154\\146\\72\\72\", \n \"\\146\\157\\154\\154\\157\\167\\151\\156\\147\\55\\163\\151\\142\\154\\151\\156\\147\\72\\72\", \"\\160\\162\\145\\143\\145\\144\\151\\156\\147\\55\\163\\151\\142\\154\\151\\156\\147\\72\\72\", \n \"\\144\\145\\163\\143\\145\\156\\144\\141\\156\\164\\55\\157\\162\\55\\163\\145\\154\\146\\72\\72\", \"\\154\\141\\163\\164\", \"\\160\\157\\163\\151\\164\\151\\157\\156\", \n-\"\\143\\157\\165\\156\\164\", \"\\151\\144\", \"\\154\\157\\143\\141\\154\\55\\156\\141\\155\\145\", \n+\"\\143\\157\\165\\156\\164\", \"\\151\\144\", \"\\153\\145\\171\", \"\\154\\157\\143\\141\\154\\55\\156\\141\\155\\145\", \n \"\\156\\141\\155\\145\\163\\160\\141\\143\\145\\55\\165\\162\\151\", \"\\156\\141\\155\\145\", \"\\163\\164\\162\\151\\156\\147\", \"\\143\\157\\156\\143\\141\\164\", \n \"\\163\\164\\141\\162\\164\\163\\55\\167\\151\\164\\150\", \"\\143\\157\\156\\164\\141\\151\\156\\163\", \n \"\\163\\165\\142\\163\\164\\162\\151\\156\\147\\55\\142\\145\\146\\157\\162\\145\", \"\\163\\165\\142\\163\\164\\162\\151\\156\\147\\55\\141\\146\\164\\145\\162\", \n    \"DEFAULT\", \n };\n static final long[] jjtoToken = {\n-   0xffffffffff817ffdL, 0x7ffffL, \n+   0xffffffffff817ffdL, 0xfffffL, \n };\n static final long[] jjtoSkip = {\n    0x2L, 0x0L, \n--- a/src/test/org/apache/commons/jxpath/JXPathTestCase.java\n+++ b/src/test/org/apache/commons/jxpath/JXPathTestCase.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/JXPathTestCase.java,v 1.21 2002/05/30 01:57:35 dmitri Exp $\n- * $Revision: 1.21 $\n- * $Date: 2002/05/30 01:57:35 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/JXPathTestCase.java,v 1.22 2002/06/08 22:47:24 dmitri Exp $\n+ * $Revision: 1.22 $\n+ * $Date: 2002/06/08 22:47:24 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * </p>\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.21 $ $Date: 2002/05/30 01:57:35 $\n+ * @version $Revision: 1.22 $ $Date: 2002/06/08 22:47:24 $\n  */\n \n public class JXPathTestCase extends TestCase\n      * Test property iterators, the core of the graph traversal engine\n      */\n     public void testIndividualIterators(){\n-        if (true){\n+        if (!enabled){\n+            return;\n+        }\n //        testIndividual(0, 0, true, false, 3);\n             testIndividual(+1, 0, true, false, 0);\n             testIndividual(-1, 0, true, false, 4);\n \n             testIndividual(0, 0, false, false, 4);\n             testIndividual(0, 0, false, true, 4);\n-        }\n     }\n \n     private void testIndividual(int relativePropertyIndex, int offset, boolean useStartLocation, boolean reverse, int expected){\n     }\n \n     public void testMultipleIterators(){\n-        if (true){\n+        if (!enabled){\n+            return;\n+        }\n             testMultiple(0, 0, true, false, 20);\n \n             testMultiple(3, 0, true, false, 16);\n \n             testMultiple(3, 1, true, false, 15);\n             testMultiple(3, 3, true, false, 13);\n-        }\n     }\n \n     private void testMultiple(int propertyIndex, int offset, boolean useStartLocation, boolean reverse, int expected){\n         JXPathContext context = JXPathContext.newContext(map);\n         testIterate(context, \"foo\", list(\"a\", \"b\", \"c\"));\n \n-//        context = JXPathContext.newContext(bean);\n-//        testIterate(context, \"nestedBean/strings[2]/following::node()\", null);\n+        context = JXPathContext.newContext(bean);\n+        Iterator it = context.iteratePointers(\"/integers\");\n+        List actual = new ArrayList();\n+        for (int i = 0; i < 4; i++){\n+            actual.add(it.next().toString());\n+        }\n+        assertEquals(\"Iterating <\" + \"/integers\" + \">\",\n+            list(\"/integers[1]\", \"/integers[2]\", \"/integers[3]\", \"/integers[4]\"),\n+            actual);\n     }\n \n     private void testIterate(JXPathContext context, String xpath, List expected) {\n     }\n \n     public void testDocumentOrder(){\n-//        if (!enabled){\n-//            return;\n-//        }\n+        if (!enabled){\n+            return;\n+        }\n \n         JXPathContext context = JXPathContext.newContext(createTestBeanWithDOM());\n \n         context.removePath(\"vendor/location[@id = '100']/@name\");\n         assertEquals(\"Remove DOM attribute\", new Double(0),\n                     context.getValue(\"count(vendor/location[@id = '100']/@name)\"));\n+    }\n+\n+    public void testIDAndKey(){\n+        if (!enabled){\n+            return;\n+        }\n+        JXPathContext context = JXPathContext.newContext(createTestBeanWithDOM());\n+        context.setIdentityManager(new IdentityManager(){\n+            public Pointer getPointerByID(JXPathContext context, String id){\n+                NodePointer ptr = (NodePointer)context.getPointer(\"/vendor\");\n+                return ptr.getPointerByID(context, id);\n+            }\n+        });\n+        context.setKeyManager(new KeyManager(){\n+            public Pointer getPointerByKey(JXPathContext context,\n+                                            String key, String value){\n+                return NodePointer.newNodePointer(null, \"42\", null);\n+            }\n+        });\n+        assertEquals(\"Test ID\", \"Tangerine Drive\",\n+            context.getValue(\"id(101)//street\"));\n+        assertEquals(\"Test ID Path\", \"id('101')/address[1]/street[1]\",\n+            context.getPointer(\"id(101)//street\").asPath());\n+        assertEquals(\"Test ID Path Null\", \"id(105)/address[1]/street\",\n+            context.getPointer(\"id(105)/address/street\").asPath());\n+        assertEquals(\"Test key\", \"42\",\n+            context.getValue(\"key('a', 'b')\"));\n     }\n \n     public void testNull(){\n         test(\"integers[position() = last() - 1]\", new Integer(3)),\n         testEval(\"integers[position() < 3]\", list(new Integer(1), new Integer(2))),\n         test(\"count(beans/strings)\", new Double(6)),\n-        test(\"integers[string() = '2.0']\", new Integer(2)),\n+        test(\"integers[string() = '2']\", new Integer(2)),\n \n         test(\"name(integers)\", \"integers\"),\n         testEval(\"*[name(.) = 'integers']\", list(new Integer(1), new Integer(2), new Integer(3), new Integer(4))),\n         testPath(\"map[@name = 'Key&quot;&apos;&quot;&apos;1']\", \"/map[@name='Key&quot;&apos;&quot;&apos;1']\"),\n \n         // Standard functions\n-        test(\"string(2)\", \"2.0\"),\n+        test(\"string(2)\", \"2\"),\n         test(\"string($nan)\", \"NaN\"),\n         test(\"string(-$nan)\", \"NaN\"),\n         test(\"string(-2 div 0)\", \"-Infinity\"),\n         test(\"string(\" + TestFunctions.class.getName() + \".new())\", \"foo=0; bar=null\"),\n         test(\"string(test:new(3, 'baz'))\", \"foo=3; bar=baz\"),\n         test(\"string(test:new('3', 4))\", \"foo=3; bar=4.0\"),\n-        test(\"string(test:getFoo($test))\", \"4.0\"),\n-        test(\"string(call:getFoo($test))\", \"4.0\"),\n-        test(\"string(getFoo($test))\", \"4.0\"),\n+        test(\"string(test:getFoo($test))\", \"4\"),\n+        test(\"string(call:getFoo($test))\", \"4\"),\n+        test(\"string(getFoo($test))\", \"4\"),\n         test(\"string(test:setFooAndBar($test, 7, 'biz'))\", \"foo=7; bar=biz\"),\n         test(\"string(test:build(8, 'goober'))\", \"foo=8; bar=goober\"),\n         test(\"string(jxpathtest:TestFunctions.build(8, 'goober'))\", \"foo=8; bar=goober\"),\n         test(\"string(\" + TestFunctions.class.getName() + \".build(8, 'goober'))\", \"foo=8; bar=goober\"),\n-        test(\"string(test:increment(8))\", \"9.0\"),\n+        test(\"string(test:increment(8))\", \"9\"),\n         test(\"length('foo')\", new Integer(3)),\n         test(\"call:substring('foo', 1, 2)\", \"o\"),\n         test(\"//.[test:isMap()]/Key1\", \"Value 1\"),\n \n         testEval(\"vendor/contact/following::location//street\",\n             list(\"Orchard Road\", \"Tangerine Drive\")),\n-    };\n+\n+        test(\"id('101')//street\", \"Tangerine Drive\"),\n+        testPath(\"id('101')//street\", \"id('101')/address[1]/street[1]\"),\n+   };\n \n     public void testTypeConversions(){\n         for (int i=0; i < typeConversionTests.length; i++) {", "timestamp": 1023576445, "metainfo": ""}