{"sha": "e7ecdaf5a2ea7c59b20edfbc92dfc31d6002945a", "log": "Improved type conversion for extenstion functions   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/PackageFunctions.java\n+++ b/src/java/org/apache/commons/jxpath/PackageFunctions.java\n import org.apache.commons.jxpath.functions.ConstructorFunction;\n import org.apache.commons.jxpath.functions.MethodFunction;\n import org.apache.commons.jxpath.util.MethodLookupUtils;\n+import org.apache.commons.jxpath.util.TypeUtils;\n \n /**\n  * Extension functions provided by Java classes.  The class prefix specified\n \n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.12 $ $Date: 2004/02/29 14:17:42 $\n+ * @version $Revision: 1.13 $ $Date: 2004/03/25 05:42:01 $\n  */\n public class PackageFunctions implements Functions {\n     private String classPrefix;\n         }\n \n         if (parameters.length >= 1) {\n-            Object target = parameters[0];\n+            Object target = TypeUtils.convert(parameters[0], Object.class);\n             if (target != null) {\n                 Method method =\n                     MethodLookupUtils.lookupMethod(\n--- a/src/java/org/apache/commons/jxpath/ri/EvalContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/EvalContext.java\n  * implement behavior of various XPath axes: \"child::\", \"parent::\" etc.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.29 $ $Date: 2004/02/29 14:17:45 $\n+ * @version $Revision: 1.30 $ $Date: 2004/03/25 05:42:01 $\n  */\n public abstract class EvalContext implements ExpressionContext, Iterator {\n     protected EvalContext parentContext;\n \n         return set;\n     }\n+    \n+    /**\n+     * Typically returns the NodeSet by calling getNodeSet(), \n+     * but will be overridden for contexts that more naturally produce\n+     * individual values, e.g. VariableContext\n+     */\n+    public Object getValue() {\n+        return getNodeSet();\n+    }\n \n     public String toString() {\n         Pointer ptr = getContextNodePointer();\n--- a/src/java/org/apache/commons/jxpath/ri/axes/InitialContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/axes/InitialContext.java\n  * on to the parent context.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.13 $ $Date: 2004/02/29 14:17:37 $\n+ * @version $Revision: 1.14 $ $Date: 2004/03/25 05:42:01 $\n  */\n public class InitialContext extends EvalContext {\n     private boolean startedSet = false;\n     public NodePointer getCurrentNodePointer() {\n         return nodePointer;\n     }\n-\n+    \n+    public Object getValue() {\n+        return nodePointer;\n+    }\n+    \n     public boolean nextNode() {\n         return setPosition(position + 1);\n     }\n--- a/src/java/org/apache/commons/jxpath/ri/axes/NamespaceContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/axes/NamespaceContext.java\n  * EvalContext that walks the \"namespace::\" axis.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.9 $ $Date: 2004/02/29 14:17:38 $\n+ * @version $Revision: 1.10 $ $Date: 2004/03/25 05:42:01 $\n  */\n public class NamespaceContext extends EvalContext {\n     private NodeTest nodeTest;\n                 return false;\n             }\n \n-            QName testName = ((NodeNameTest) nodeTest).getNodeName();\n+            NodeNameTest nodeNameTest = (NodeNameTest) nodeTest;\n+            QName testName = nodeNameTest.getNodeName();\n             if (testName.getPrefix() != null) {\n                 return false;\n             }\n-            String testLocalName = testName.getName();\n-            if (testLocalName.equals(\"*\")) {\n+            if (nodeNameTest.isWildcard()) {\n                 iterator =\n                     parentContext.getCurrentNodePointer().namespaceIterator();\n             }\n             else {\n                 currentNodePointer =\n                     parentContext.getCurrentNodePointer().namespacePointer(\n-                        testLocalName);\n+                            testName.getName());\n                 return currentNodePointer != null;\n             }\n         }\n--- a/src/java/org/apache/commons/jxpath/ri/axes/RootContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/axes/RootContext.java\n  * EvalContext that is used to hold the root node for the path traversal.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.16 $ $Date: 2004/02/29 14:17:38 $\n+ * @version $Revision: 1.17 $ $Date: 2004/03/25 05:42:01 $\n  */\n public class RootContext extends EvalContext {\n     private JXPathContextReferenceImpl jxpathContext;\n     public NodePointer getCurrentNodePointer() {\n         return pointer;\n     }\n-\n+    \n+    public Object getValue() {\n+        return pointer;\n+    }\n+    \n     public int getCurrentPosition() {\n         throw new UnsupportedOperationException();\n     }\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/ExtensionFunction.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/ExtensionFunction.java\n  * call.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.12 $ $Date: 2004/02/29 14:17:38 $\n+ * @version $Revision: 1.13 $ $Date: 2004/03/25 05:42:01 $\n  */\n public class ExtensionFunction extends Operation {\n \n     \n     private Object convert(Object object) {\n         if (object instanceof EvalContext) {\n-            return ((EvalContext) object).getNodeSet();\n+            return ((EvalContext) object).getValue();\n         }\n         return object;\n     }  \n--- a/src/java/org/apache/commons/jxpath/util/BasicTypeConverter.java\n+++ b/src/java/org/apache/commons/jxpath/util/BasicTypeConverter.java\n  * The default implementation of TypeConverter.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.12 $ $Date: 2004/02/29 14:17:43 $\n+ * @version $Revision: 1.13 $ $Date: 2004/03/25 05:42:01 $\n  */\n public class BasicTypeConverter implements TypeConverter {\n \n         }\n \n         if (toType == Object.class) {\n+            if (object instanceof NodeSet) {\n+                return convert(((NodeSet) object).getValues(), toType);\n+            }\n+            else if (object instanceof Pointer) {\n+                return convert(((Pointer) object).getValue(), toType);\n+            }\n             return object;\n         }\n \n--- a/src/test/org/apache/commons/jxpath/ri/compiler/ExtensionFunctionTest.java\n+++ b/src/test/org/apache/commons/jxpath/ri/compiler/ExtensionFunctionTest.java\n  * Test extension functions.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.14 $ $Date: 2004/02/29 14:17:42 $\n+ * @version $Revision: 1.15 $ $Date: 2004/03/25 05:42:01 $\n  */\n \n public class ExtensionFunctionTest extends JXPathTestCase {\n \n         // Allocate new object using a custom constructor - type conversion\n         assertXPathValue(context, \"string(test:new('3', 4))\", \"foo=3; bar=4.0\");\n+        \n+        context.getVariables().declareVariable(\"A\", \"baz\");        \n+        assertXPathValue(\n+                context,\n+                \"string(test:new(2, $A, false))\",\n+                \"foo=2; bar=baz\");\n     }\n \n     public void testMethodCall() {\n             \"size(beans)\", \n             new Integer(2));\n             \n-        boolean exception = false;\n-        try {\n-            assertXPathValue(context, \"add($myList, 'hello')\", Boolean.TRUE);\n-        }\n-        catch (Exception ex) {\n-            exception = true;\n-        }\n-        assertTrue(\n-            \"Exception trying to add to an unmodifiable list\",\n-            exception);\n+        context.getValue(\"add($myList, 'hello')\");\n+        assertEquals(\"After adding an element\", 2, list.size());\n     }\n \n     public void testStaticMethodCall() {\n--- a/src/test/org/apache/commons/jxpath/ri/compiler/TestFunctions.java\n+++ b/src/test/org/apache/commons/jxpath/ri/compiler/TestFunctions.java\n \n /**\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.9 $ $Date: 2004/02/29 14:17:42 $\n+ * @version $Revision: 1.10 $ $Date: 2004/03/25 05:42:01 $\n  */\n public class TestFunctions {\n \n         this.foo =\n             ((Number) context.getContextNodePointer().getValue()).intValue();\n         this.bar = bar;\n+    }\n+    \n+    public TestFunctions(int foo, Object object, boolean another) {\n+        this.foo = foo;\n+        bar = String.valueOf(object);\n     }\n \n     public int getFoo() {", "timestamp": 1080193321, "metainfo": ""}