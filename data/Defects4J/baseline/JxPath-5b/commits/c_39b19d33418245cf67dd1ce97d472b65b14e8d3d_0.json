{"sha": "39b19d33418245cf67dd1ce97d472b65b14e8d3d", "log": "Fixes for bug 32360. Please follow discussions at: http://issues.apache.org/bugzilla/show_bug.cgi?id=32360  ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/JXPathContext.java\n+++ b/src/java/org/apache/commons/jxpath/JXPathContext.java\n         throw new UnsupportedOperationException(\n                 \"Namespace registration is not implemented by \" + getClass());\n     }\n+\n+    /**\n+     * If true, default namespace declarations in XML are ignored. Thus, if you\n+     * have this XML: \n+     * <pre>\n+     *   &lt;a xmlns=\"myns\"&gt; \n+     *     &lt;b&gt;109&lt;/b&gt;\n+     *   &lt;/a&gt; \n+     * </pos>\n+     * you can use the path \"/a/b\" to retrieve the contents of the nested element.\n+     * <p>\n+     * If false (default), you have to do the default thing, which is this:\n+     * <pre>\n+     *   context.registerNamespace(\"ns\", \"myns\");\n+     *   context.getValue(\"/ns:a/ns:b\");\n+     * </pre>\n+     */\n+    public boolean isDefaultNamespaceIgnored() {\n+        return false;        \n+    }\n+    \n+    \n+    /**\n+     * Changing this flag to true makes jxpath forgive missing default namespace specification.\n+     * @see #isDefaultNamespaceIgnored(boolean)\n+     */\n+    public void setDefaultNamespaceIgnored(boolean flag) {\n+        throw new UnsupportedOperationException(\n+                \"Namespace registration is not implemented by \" + getClass());        \n+    }\n }\n--- a/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n+++ b/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n     private Pointer contextPointer;\n     \n     protected NamespaceResolver namespaceResolver;\n+    private boolean defaultNamespaceIgnored;\n \n     // The frequency of the cache cleanup\n     private static final int CLEANUP_THRESHOLD = 500;\n \n     public NamespaceResolver getNamespaceResolver() {\n         namespaceResolver.seal();\n+        namespaceResolver.setDefaultNamespaceIgnored(isDefaultNamespaceIgnored());\n         return namespaceResolver;\n     }\n     \n+    public boolean isDefaultNamespaceIgnored() {\n+        if (defaultNamespaceIgnored) {\n+            return true;\n+        }\n+        if (parentContext != null) {\n+            return parentContext.isDefaultNamespaceIgnored();\n+        }\n+        \n+        return false;\n+    }\n+\n+    public void setDefaultNamespaceIgnored(boolean flag) {\n+        defaultNamespaceIgnored = flag;\n+    }\n+\n     /**\n      * Checks if existenceCheckClass exists on the class path. If so, allocates\n      * an instance of the specified class, otherwise returns null.\n--- a/src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java\n+++ b/src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java\n     protected HashMap reverseMap;\n     protected NodePointer pointer;\n     private boolean sealed;\n+    private boolean defaultNamespaceIgnored;\n         \n     public NamespaceResolver(NamespaceResolver parent) {\n         this.parent = parent;\n             if (ni != null) {\n                 for (int position = 1; ni.setPosition(position); position++) {\n                     NodePointer nsPointer = ni.getNodePointer();\n-                    QName qname = nsPointer.getName();\n-                    reverseMap.put(qname.getPrefix(), qname.getName());\n+                    reverseMap.put(nsPointer.getNamespaceURI(), \n+                            nsPointer.getName().getName());\n                 }\n             }\n             Iterator it = namespaceMap.entrySet().iterator();\n             return parent.getPrefix(namespaceURI);\n         }\n         return prefix;\n+    }\n+        \n+    public boolean isDefaultNamespaceIgnored() {\n+        return defaultNamespaceIgnored;\n+    }\n+\n+    public void setDefaultNamespaceIgnored(boolean flag) {\n+        this.defaultNamespaceIgnored = flag;\n     }\n     \n     public boolean isSealed() {\n             return null;\n         }\n     }\n+\n }\n--- a/src/java/org/apache/commons/jxpath/ri/axes/RootContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/axes/RootContext.java\n import org.apache.commons.jxpath.NodeSet;\n import org.apache.commons.jxpath.ri.EvalContext;\n import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;\n-import org.apache.commons.jxpath.ri.NamespaceResolver;\n import org.apache.commons.jxpath.ri.QName;\n import org.apache.commons.jxpath.ri.model.NodePointer;\n \n     private NodePointer pointer;\n     private Object registers[];\n     private int availableRegister = 0;\n-    private NamespaceResolver namespaceResolver;\n     public static final Object UNKNOWN_VALUE = new Object();\n     private static final int MAX_REGISTER = 4;\n \n--- a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodeIterator.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodeIterator.java\n     }\n \n     private boolean testChild() {\n-        return DOMNodePointer.testNode(child, nodeTest);\n+        boolean ignoreNS = \n+            parent.getNamespaceResolver().isDefaultNamespaceIgnored();\n+        return DOMNodePointer.testNode(child, nodeTest, ignoreNS);\n     }\n }\n--- a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n import org.apache.commons.jxpath.ri.compiler.NodeTest;\n import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;\n import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;\n-import org.apache.commons.jxpath.ri.model.beans.NullPointer;\n import org.apache.commons.jxpath.ri.model.NodeIterator;\n import org.apache.commons.jxpath.ri.model.NodePointer;\n+import org.apache.commons.jxpath.ri.model.beans.NullPointer;\n import org.apache.commons.jxpath.util.TypeUtils;\n import org.w3c.dom.Attr;\n import org.w3c.dom.Comment;\n  * @version $Revision$ $Date$\n  */\n public class DOMNodePointer extends NodePointer {\n+\n+    private static final long serialVersionUID = -8751046933894857319L;\n+    \n     private Node node;\n     private Map namespaces;\n     private String defaultNamespace;\n     }\n     \n     public boolean testNode(NodeTest test) {\n-        return testNode(node, test);\n+        return testNode(node, test, \n+                getNamespaceResolver().isDefaultNamespaceIgnored());\n     }\n \n     public static boolean testNode(Node node, NodeTest test) {\n+        return testNode(node, test, false);\n+    }\n+\n+    public static boolean testNode(Node node, NodeTest test,\n+            boolean ignoreDefaultNamespace)\n+    {\n         if (test == null) {\n             return true;\n         }\n             if (wildcard\n                 || testName.getName()\n                         .equals(DOMNodePointer.getLocalName(node))) {\n+                if (ignoreDefaultNamespace && testPrefix == null\n+                        && node.getPrefix() == null) {\n+                    return true;\n+                }\n                 String nodeNS = DOMNodePointer.getNamespaceURI(node);\n                 return equalStrings(namespaceURI, nodeNS);\n             }\n         }\n         \n         // TBD: We are supposed to resolve relative URIs to absolute ones.\n-        return namespace;\n-    }\n-\n-    private String getNamespaceURI(String prefix, String namespace) {\n-        String qname = \"xmlns:\" + prefix;\n-        Node aNode = node;\n-        if (aNode instanceof Document) {\n-            aNode = ((Document)aNode).getDocumentElement();\n-        }\n-        while (aNode != null) {\n-            if (aNode.getNodeType() == Node.ELEMENT_NODE) {\n-                Attr attr = ((Element) aNode).getAttributeNode(qname);\n-                if (attr != null) {\n-                    namespace = attr.getValue();\n-                    break;\n-                }\n-            }\n-            aNode = aNode.getParentNode();\n-        }\n         return namespace;\n     }\n \n--- a/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodeIterator.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodeIterator.java\n     }\n \n     private boolean testChild() {\n-        return JDOMNodePointer.testNode(parent, child, nodeTest);\n+        boolean ignoreNS = \n+            parent.getNamespaceResolver().isDefaultNamespaceIgnored();\n+        return JDOMNodePointer.testNode(parent, child, nodeTest, ignoreNS);\n     }\n }\n--- a/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java\n \n import java.util.List;\n import java.util.Locale;\n-import java.util.Map;\n \n import org.apache.commons.jxpath.AbstractFactory;\n import org.apache.commons.jxpath.JXPathContext;\n  * @version $Revision$ $Date$\n  */\n public class JDOMNodePointer extends NodePointer {\n+    private static final long serialVersionUID = -6346532297491082651L;\n+    \n     private Object node;\n-    private Map namespaces;\n-    private String defaultNamespace;\n     private String id;\n \n     public static final String XML_NAMESPACE_URI =\n     }\n     \n     public boolean testNode(NodeTest test) {\n-        return testNode(this, node, test);\n-    }\n-\n+        return testNode(this, node, test, \n+                getNamespaceResolver().isDefaultNamespaceIgnored());\n+    }\n+    \n     public static boolean testNode(\n         NodePointer pointer,\n         Object node,\n         NodeTest test) \n+    {\n+        return testNode(pointer, node, test, false);\n+    }\n+    \n+    public static boolean testNode(NodePointer pointer, Object node,\n+            NodeTest test, boolean ignoreDefaultNamespace)\n     {\n         if (test == null) {\n             return true;\n             if (wildcard\n                 || testName.getName()\n                         .equals(JDOMNodePointer.getLocalName(node))) {\n+                if (ignoreDefaultNamespace && testPrefix == null\n+                        && ((Element)node).getNamespacePrefix().equals(\"\")) {\n+                    return true;\n+                }\n                 String nodeNS = JDOMNodePointer.getNamespaceURI(node);\n                 return equalStrings(namespaceURI, nodeNS);\n             }\n--- a/src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java\n+++ b/src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java\n         context.registerNamespace(\"x\", \"temp\");\n         assertXPathValue(context, \"vendor/x:pos//number\", \"109\");\n     }\n+    \n+    public void testDefaultNamespaceIgnored() {\n+        context.setDefaultNamespaceIgnored(true);\n+        assertXPathValue(context, \"vendor/pos//number\", \"109\");\n+        context.setDefaultNamespaceIgnored(false);\n+    }\n \n     public void testAxisChildIndexPredicate() {\n         assertXPathValue(", "timestamp": 1130612558, "metainfo": ""}