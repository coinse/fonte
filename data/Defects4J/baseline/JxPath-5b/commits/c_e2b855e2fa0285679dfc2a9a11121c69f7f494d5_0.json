{"sha": "e2b855e2fa0285679dfc2a9a11121c69f7f494d5", "log": "don't loop through a String array calling equals(); use a map  ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java\n+++ b/src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java\n import java.beans.PropertyDescriptor;\n import java.util.Arrays;\n import java.util.Comparator;\n+import java.util.HashMap;\n \n /**\n  * An implementation of JXPathBeanInfo based on JavaBeans' BeanInfo. Properties\n     private boolean atomic = false;\n     private Class clazz;\n     private PropertyDescriptor propertyDescriptors[];\n-    private String[] propertyNames;\n     private Class dynamicPropertyHandlerClass;\n+    private HashMap propertyDescriptorMap;\n \n     public JXPathBasicBeanInfo(Class clazz) {\n         this.clazz = clazz;\n         return dynamicPropertyHandlerClass != null;\n     }\n \n-    public PropertyDescriptor[] getPropertyDescriptors() {\n+    public synchronized PropertyDescriptor[] getPropertyDescriptors() {\n         if (propertyDescriptors == null) {\n             try {\n                 BeanInfo bi = null;\n         return propertyDescriptors;\n     }\n \n-    public PropertyDescriptor getPropertyDescriptor(String propertyName) {\n-        if (propertyNames == null) {\n+    public synchronized PropertyDescriptor getPropertyDescriptor(String propertyName) {\n+        if (propertyDescriptorMap == null) {\n+            propertyDescriptorMap = new HashMap();\n             PropertyDescriptor[] pds = getPropertyDescriptors();\n-            String[] names = new String[pds.length];\n             for (int i = 0; i < pds.length; i++) {\n-                names[i] = pds[i].getName();\n-            }\n-            propertyNames = names;\n-        }\n-\n-        for (int i = 0; i < propertyNames.length; i++) {\n-            if (propertyNames[i] == propertyName) {\n-                return propertyDescriptors[i];\n+                propertyDescriptorMap.put(pds[i].getName(), pds[i]);\n             }\n         }\n-\n-        for (int i = 0; i < propertyNames.length; i++) {\n-            if (propertyNames[i].equals(propertyName)) {\n-                return propertyDescriptors[i];\n-            }\n-        }\n-        return null;\n+        return (PropertyDescriptor) propertyDescriptorMap.get(propertyName);\n     }\n \n     /**", "timestamp": 1170363040, "metainfo": ""}