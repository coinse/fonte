{"sha": "413edb7f5000c8f53914bcaf73058d763adfd525", "log": "Another attempt at closing bug 32360.  See http://issues.apache.org/bugzilla/show_bug.cgi?id=32360  ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/JXPathContext.java\n+++ b/src/java/org/apache/commons/jxpath/JXPathContext.java\n     }\n \n     /**\n-     * If true, default namespace declarations in XML are ignored. Thus, if you\n-     * have this XML: \n+     * Binds a namespace URI for XPath QNames that are missing the prefix.\n+     * If you have this XML: \n      * <pre>\n      *   &lt;a xmlns=\"myns\"&gt; \n      *     &lt;b&gt;109&lt;/b&gt;\n      *   &lt;/a&gt; \n-     * </pos>\n-     * you can use the path \"/a/b\" to retrieve the contents of the nested element.\n-     * <p>\n-     * If false (default), you have to do the default thing, which is this:\n+     * </pre>\n+     * and\n      * <pre>\n-     *   context.registerNamespace(\"ns\", \"myns\");\n-     *   context.getValue(\"/ns:a/ns:b\");\n+     *   context.setDefaultNamespaceURI(\"myns\");\n      * </pre>\n-     */\n-    public boolean isDefaultNamespaceIgnored() {\n-        return false;        \n-    }\n-    \n-    \n-    /**\n-     * Changing this flag to true makes jxpath forgive missing default namespace specification.\n-     * @see #isDefaultNamespaceIgnored(boolean)\n-     */\n-    public void setDefaultNamespaceIgnored(boolean flag) {\n+     * you can use the path \"/a/b\" instead of \"/foo:a/foo:b\" (the assumption\n+     * here is that the prefix \"foo\" is bound to \"myns\" by calling \n+     * registerNamespace).\n+      */\n+    public void registerDefaultNamespace(String uri) {\n         throw new UnsupportedOperationException(\n                 \"Namespace registration is not implemented by \" + getClass());        \n     }\n+\n+    /**\n+    */\n+    public String getDefaultNamespaceURI() {\n+        return null;        \n+    }    \n }\n--- a/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n+++ b/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n     private Pointer contextPointer;\n     \n     protected NamespaceResolver namespaceResolver;\n-    private boolean defaultNamespaceIgnored;\n+    private String defaultNamespaceURI;\n \n     // The frequency of the cache cleanup\n     private static final int CLEANUP_THRESHOLD = 500;\n \n     public NamespaceResolver getNamespaceResolver() {\n         namespaceResolver.seal();\n-        namespaceResolver.setDefaultNamespaceIgnored(isDefaultNamespaceIgnored());\n+        namespaceResolver.registerDefaultNamespaceURI(getDefaultNamespaceURI());\n         return namespaceResolver;\n     }\n     \n-    public boolean isDefaultNamespaceIgnored() {\n-        if (defaultNamespaceIgnored) {\n-            return true;\n+    public String getDefaultNamespaceURI() {\n+        if (defaultNamespaceURI != null) {\n+            return defaultNamespaceURI;\n         }\n         if (parentContext != null) {\n-            return parentContext.isDefaultNamespaceIgnored();\n+            return parentContext.getDefaultNamespaceURI();\n         }\n         \n-        return false;\n-    }\n-\n-    public void setDefaultNamespaceIgnored(boolean flag) {\n-        defaultNamespaceIgnored = flag;\n+        return null;\n+    }\n+\n+    public void registerDefaultNamespace(String uri) {\n+        defaultNamespaceURI = uri;\n     }\n \n     /**\n--- a/src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java\n+++ b/src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java\n     protected HashMap namespaceMap = new HashMap();\n     protected HashMap reverseMap;\n     protected NodePointer pointer;\n+    private String defaultNamespaceURI;\n     private boolean sealed;\n-    private boolean defaultNamespaceIgnored;\n         \n     public NamespaceResolver(NamespaceResolver parent) {\n         this.parent = parent;\n         return prefix;\n     }\n         \n-    public boolean isDefaultNamespaceIgnored() {\n-        return defaultNamespaceIgnored;\n+    public String getDefaultNamespaceURI() {\n+        return defaultNamespaceURI;\n     }\n \n-    public void setDefaultNamespaceIgnored(boolean flag) {\n-        this.defaultNamespaceIgnored = flag;\n+    public void registerDefaultNamespaceURI(String uri) {\n+        this.defaultNamespaceURI = uri;\n     }\n     \n     public boolean isSealed() {\n--- a/src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java\n+++ b/src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java\n             NodeTest nodeTest = step.getNodeTest();\n             QName qname = ((NodeNameTest) nodeTest).getNodeName();\n             String prefix = qname.getPrefix();\n-            if (prefix != null) {\n-                String namespaceURI = context.getJXPathContext()\n-                        .getNamespaceURI(prefix);\n+            String namespaceURI = prefix != null \n+                ? context.getJXPathContext().getNamespaceURI(prefix) \n+                : context.getJXPathContext().getDefaultNamespaceURI();\n+            if (namespaceURI != null) {\n                 nodeTest = new NodeNameTest(qname, namespaceURI);\n-\n             }\n             return pointer.childIterator(nodeTest, false, null);\n         }\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/Path.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/Path.java\n         if (nodeTest instanceof NodeNameTest) {\n             QName qname = ((NodeNameTest) nodeTest).getNodeName();\n             String prefix = qname.getPrefix();\n-            if (prefix != null) {\n-                String namespaceURI = context.getJXPathContext()\n-                        .getNamespaceURI(prefix);\n+            String namespaceURI = prefix != null \n+                ? context.getJXPathContext().getNamespaceURI(prefix) \n+                : context.getJXPathContext().getDefaultNamespaceURI();\n+            if (namespaceURI != null) {\n                 nodeTest = new NodeNameTest(qname, namespaceURI);\n             }\n         }\n--- a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodeIterator.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodeIterator.java\n     }\n \n     private boolean testChild() {\n-        boolean ignoreNS = \n-            parent.getNamespaceResolver().isDefaultNamespaceIgnored();\n-        return DOMNodePointer.testNode(child, nodeTest, ignoreNS);\n+        return DOMNodePointer.testNode(child, nodeTest);\n     }\n }\n--- a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n     }\n     \n     public boolean testNode(NodeTest test) {\n-        return testNode(node, test, \n-                getNamespaceResolver().isDefaultNamespaceIgnored());\n+        return testNode(node, test);\n     }\n \n     public static boolean testNode(Node node, NodeTest test) {\n-        return testNode(node, test, false);\n-    }\n-\n-    public static boolean testNode(Node node, NodeTest test,\n-            boolean ignoreDefaultNamespace)\n-    {\n         if (test == null) {\n             return true;\n         }\n             if (wildcard\n                 || testName.getName()\n                         .equals(DOMNodePointer.getLocalName(node))) {\n-                if (ignoreDefaultNamespace && testPrefix == null\n-                        && node.getPrefix() == null) {\n-                    return true;\n-                }\n                 String nodeNS = DOMNodePointer.getNamespaceURI(node);\n                 return equalStrings(namespaceURI, nodeNS);\n             }\n         if (success) {\n             NodeTest nodeTest;\n             String prefix = name.getPrefix();\n-            if (prefix != null) {\n-                String namespaceURI = context.getNamespaceURI(prefix);\n-                nodeTest = new NodeNameTest(name, namespaceURI);\n-            }\n-            else {\n-                nodeTest = new NodeNameTest(name);\n-            }\n+            String namespaceURI = prefix != null \n+                ? context.getNamespaceURI(prefix) \n+                : context.getDefaultNamespaceURI();\n+            nodeTest = new NodeNameTest(name, namespaceURI);\n \n             NodeIterator it = childIterator(nodeTest, false, null);\n             if (it != null && it.setPosition(index + 1)) {\n                             || buffer.charAt(buffer.length() - 1) != '/') {\n                         buffer.append('/');\n                     }\n+                    String ln = DOMNodePointer.getLocalName(node);\n                     String nsURI = getNamespaceURI();\n-                    String ln = DOMNodePointer.getLocalName(node);\n-                    \n-                    if (nsURI == null) {\n+                    if (equalStrings(nsURI, \n+                            getNamespaceResolver().getDefaultNamespaceURI())) {\n                         buffer.append(ln);\n                         buffer.append('[');\n                         buffer.append(getRelativePositionByName()).append(']');\n--- a/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodeIterator.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodeIterator.java\n     }\n \n     private boolean testChild() {\n-        boolean ignoreNS = \n-            parent.getNamespaceResolver().isDefaultNamespaceIgnored();\n-        return JDOMNodePointer.testNode(parent, child, nodeTest, ignoreNS);\n+        return JDOMNodePointer.testNode(parent, child, nodeTest);\n     }\n }\n--- a/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java\n     }\n     \n     public boolean testNode(NodeTest test) {\n-        return testNode(this, node, test, \n-                getNamespaceResolver().isDefaultNamespaceIgnored());\n+        return testNode(this, node, test);\n     }\n     \n     public static boolean testNode(\n         NodePointer pointer,\n         Object node,\n         NodeTest test) \n-    {\n-        return testNode(pointer, node, test, false);\n-    }\n-    \n-    public static boolean testNode(NodePointer pointer, Object node,\n-            NodeTest test, boolean ignoreDefaultNamespace)\n     {\n         if (test == null) {\n             return true;\n             if (wildcard\n                 || testName.getName()\n                         .equals(JDOMNodePointer.getLocalName(node))) {\n-                if (ignoreDefaultNamespace && testPrefix == null\n-                        && ((Element)node).getNamespacePrefix().equals(\"\")) {\n-                    return true;\n-                }\n                 String nodeNS = JDOMNodePointer.getNamespaceURI(node);\n                 return equalStrings(namespaceURI, nodeNS);\n             }\n         if (success) {\n             NodeTest nodeTest;\n             String prefix = name.getPrefix();\n-            if (prefix != null) {\n-                String namespaceURI = context.getNamespaceURI(prefix);\n-                nodeTest = new NodeNameTest(name, namespaceURI);\n-            }\n-            else {\n-                nodeTest = new NodeNameTest(name);\n-            }\n+            String namespaceURI = prefix != null \n+                ? context.getNamespaceURI(prefix) \n+                : context.getDefaultNamespaceURI();\n+            nodeTest = new NodeNameTest(name, namespaceURI);\n \n             NodeIterator it =\n                 childIterator(nodeTest, false, null);\n                 String nsURI = getNamespaceURI();\n                 String ln = JDOMNodePointer.getLocalName(node);\n                 \n-                if (nsURI == null) {\n+                if (equalStrings(nsURI, \n+                        getNamespaceResolver().getDefaultNamespaceURI())) {\n                     buffer.append(ln);\n                     buffer.append('[');\n                     buffer.append(getRelativePositionByName()).append(']');\n--- a/src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java\n+++ b/src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java\n     }\n     \n     public void testDefaultNamespaceIgnored() {\n-        context.setDefaultNamespaceIgnored(true);\n-        assertXPathValue(context, \"vendor/pos//number\", \"109\");\n-        context.setDefaultNamespaceIgnored(false);\n+        context.registerDefaultNamespace(\"temp\");\n+        assertXPathValueAndPointer(context, \"//pos//number\", \"110\",\n+                \"/node()[1]/pos[2]/register[1]/number[1]\");\n+        context.registerDefaultNamespace(null);\n     }\n \n     public void testAxisChildIndexPredicate() {", "timestamp": 1130815532, "metainfo": ""}