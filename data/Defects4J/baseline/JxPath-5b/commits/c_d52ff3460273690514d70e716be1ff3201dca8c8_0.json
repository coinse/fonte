{"sha": "d52ff3460273690514d70e716be1ff3201dca8c8", "log": "Introduced NodeNameTest.isWildcard()   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/NodeNameTest.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/NodeNameTest.java\n \n /**\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.9 $ $Date: 2004/02/29 14:17:38 $\n+ * @version $Revision: 1.10 $ $Date: 2004/03/25 05:41:29 $\n  */\n public class NodeNameTest extends NodeTest {\n     private QName qname;\n     public QName getNodeName() {\n         return qname;\n     }\n+    \n+    public boolean isWildcard() {\n+        return qname.getName().equals(\"*\");\n+    }\n \n     public String toString() {\n         return qname.toString();\n--- a/src/java/org/apache/commons/jxpath/ri/compiler/Path.java\n+++ b/src/java/org/apache/commons/jxpath/ri/compiler/Path.java\n \n /**\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.12 $ $Date: 2004/02/29 14:17:39 $\n+ * @version $Revision: 1.13 $ $Date: 2004/03/25 05:41:29 $\n  */\n public abstract class Path extends Expression {\n \n                 return false;\n             }\n             \n-            String name = ((NodeNameTest) nodeTest).getNodeName().getName();\n-            if (name.equals(\"*\")) {\n+            if (((NodeNameTest) nodeTest).isWildcard()) {\n                 return false;\n             }\n             return areBasicPredicates(step.getPredicates());\n--- a/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n  * attribute and only simple, context-independent predicates.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.23 $ $Date: 2004/03/25 03:49:50 $\n+ * @version $Revision: 1.24 $ $Date: 2004/03/25 05:41:29 $\n  */\n public abstract class NodePointer implements Pointer {\n \n             if (isContainer()) {\n                 return false;\n             }\n-            QName testName = ((NodeNameTest) test).getNodeName();\n+            NodeNameTest nodeNameTest = (NodeNameTest) test;\n+            QName testName = nodeNameTest.getNodeName();\n             QName nodeName = getName();\n             if (nodeName == null) {\n                 return false;\n                     return false;\n                 }\n             }\n-            String testLocalName = testName.getName();\n-            if (testLocalName.equals(\"*\")) {\n+            if (nodeNameTest.isWildcard()) {\n                 return true;\n             }\n-            return testLocalName.equals(nodeName.getName());\n+            return testName.getName().equals(nodeName.getName());\n         }\n         else if (test instanceof NodeTypeTest) {\n             if (((NodeTypeTest) test).getNodeType()\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java\n  * a collection.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.17 $ $Date: 2004/02/29 14:17:41 $\n+ * @version $Revision: 1.18 $ $Date: 2004/03/25 05:41:29 $\n  */\n public abstract class PropertyOwnerPointer extends NodePointer {\n \n             return createNodeIterator(null, reverse, startWith);\n         }\n         else if (test instanceof NodeNameTest) {\n-            QName testName = ((NodeNameTest) test).getNodeName();\n+            NodeNameTest nodeNameTest = (NodeNameTest) test;\n+            QName testName = nodeNameTest.getNodeName();\n             String property;\n             if (!isDefaultNamespace(testName.getPrefix())) {\n                 return null;\n             }\n-            else if (testName.getName().equals(\"*\")) {\n+            else if (nodeNameTest.isWildcard()) {\n                 property = null;\n             }\n             else {\n--- a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n  * A Pointer that points to a DOM node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.21 $ $Date: 2004/02/29 14:17:44 $\n+ * @version $Revision: 1.22 $ $Date: 2004/03/25 05:41:29 $\n  */\n public class DOMNodePointer extends NodePointer {\n     private Node node;\n                 return false;\n             }\n \n-            QName testName = ((NodeNameTest) test).getNodeName();\n-            String testLocalName = testName.getName();\n-            boolean wildcard = testLocalName.equals(\"*\");\n+            NodeNameTest nodeNameTest = (NodeNameTest) test;\n+            QName testName = nodeNameTest.getNodeName();\n+            boolean wildcard = nodeNameTest.isWildcard();\n             String testPrefix = testName.getPrefix();\n             if (wildcard && testPrefix == null) {\n                 return true;\n             }\n \n             if (wildcard\n-                || testLocalName.equals(DOMNodePointer.getLocalName(node))) {\n+                || testName.getName()\n+                        .equals(DOMNodePointer.getLocalName(node))) {\n                 String nodePrefix = DOMNodePointer.getPrefix(node);\n                 if (equalStrings(testPrefix, nodePrefix)) {\n                     return true;\n--- a/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java\n  * A Pointer that points to a DOM node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.14 $ $Date: 2004/03/04 01:01:27 $\n+ * @version $Revision: 1.15 $ $Date: 2004/03/25 05:41:29 $\n  */\n public class JDOMNodePointer extends NodePointer {\n     private Object node;\n                 return false;\n             }\n \n-            QName testName = ((NodeNameTest) test).getNodeName();\n-            String testLocalName = testName.getName();\n-            boolean wildcard = testLocalName.equals(\"*\");\n+            NodeNameTest nodeNameTest = (NodeNameTest) test;\n+            QName testName = nodeNameTest.getNodeName();\n+            boolean wildcard = nodeNameTest.isWildcard();\n             if (wildcard && testName.getPrefix() == null) {\n                 return true;\n             }\n \n             if (wildcard\n-                || testLocalName.equals(\n+                || testName.getName().equals(\n                     JDOMNodePointer.getLocalName((Element) node))) {\n                 String testPrefix = testName.getPrefix();\n                 String nodePrefix = JDOMNodePointer.getPrefix((Element) node);", "timestamp": 1080193289, "metainfo": ""}