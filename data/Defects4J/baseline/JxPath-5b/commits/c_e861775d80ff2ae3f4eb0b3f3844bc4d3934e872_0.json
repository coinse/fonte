{"sha": "e861775d80ff2ae3f4eb0b3f3844bc4d3934e872", "log": "Fixed a bug having to do with creation of nodes with prefixes   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n  * A Pointer that points to a DOM node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.23 $ $Date: 2004/04/01 02:55:32 $\n+ * @version $Revision: 1.24 $ $Date: 2004/06/29 22:58:17 $\n  */\n public class DOMNodePointer extends NodePointer {\n     private Node node;\n                 name.toString(),\n                 index);\n         if (success) {\n-            NodeIterator it =\n-                childIterator(new NodeNameTest(name), false, null);\n+            NodeTest nodeTest;\n+            String prefix = name.getPrefix();\n+            if (prefix != null) {\n+                String namespaceURI = context.getNamespaceURI(prefix);\n+                nodeTest = new NodeNameTest(name, namespaceURI);\n+            }\n+            else {\n+                nodeTest = new NodeNameTest(name);\n+            }\n+\n+            NodeIterator it = childIterator(nodeTest, false, null);\n             if (it != null && it.setPosition(index + 1)) {\n                 return it.getNodePointer();\n             }\n--- a/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java\n  * A Pointer that points to a DOM node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.16 $ $Date: 2004/04/01 02:55:31 $\n+ * @version $Revision: 1.17 $ $Date: 2004/06/29 22:58:18 $\n  */\n public class JDOMNodePointer extends NodePointer {\n     private Object node;\n                 name.toString(),\n                 index);\n         if (success) {\n+            NodeTest nodeTest;\n+            String prefix = name.getPrefix();\n+            if (prefix != null) {\n+                String namespaceURI = context.getNamespaceURI(prefix);\n+                nodeTest = new NodeNameTest(name, namespaceURI);\n+            }\n+            else {\n+                nodeTest = new NodeNameTest(name);\n+            }\n+\n             NodeIterator it =\n-                childIterator(new NodeNameTest(name), false, null);\n+                childIterator(nodeTest, false, null);\n             if (it != null && it.setPosition(index + 1)) {\n                 return it.getNodePointer();\n             }\n--- a/src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java\n+++ b/src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java\n  * DOM, JDOM etc.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.21 $ $Date: 2004/04/01 02:55:32 $\n+ * @version $Revision: 1.22 $ $Date: 2004/06/29 22:58:18 $\n  */\n \n public abstract class XMLModelTestCase extends JXPathTestCase {\n             context,\n             \"/vendor[1]/location[4]/@manager\",\n             \"\",\n-            \"/vendor[1]/location[4]/@manager\");   \n+            \"/vendor[1]/location[4]/@manager\");\n+         \n+         context.registerNamespace(\"price\", \"priceNS\");\n+         \n+         // Create a DOM element\n+         assertXPathCreatePath(\n+             context,\n+             \"/vendor[1]/price:foo/price:bar\",\n+             \"\",\n+             \"/vendor[1]/price:foo[1]/price:bar[1]\");\n     }\n \n     /**\n             \"vendor/product/product:name/attribute::price:language\",\n             \"English\",\n             \"/vendor[1]/product[1]/product:name[1]/@price:language\");\n+        \n+        context.registerNamespace(\"price\", \"priceNS\");\n+        \n+        // Create a DOM element\n+        assertXPathCreatePathAndSetValue(\n+            context,\n+            \"/vendor[1]/price:foo/price:bar\",\n+            \"123.20\",\n+            \"/vendor[1]/price:foo[1]/price:bar[1]\");\n     }\n \n     /**\n                 \"//product:name\",\n                 \"Box of oranges\",\n                 \"/vendor[1]/product[1]/goods:name[1]\");\n-        \n-//        if (isExternalNamespaceSupported()) {\n-//             DocumentContainer container = new DocumentContainer(\n-//                    XMLModelTestCase.class.getResource(\"ExternalNamespaceTest.xml\"),\n-//                    getModel());\n-//            JXPathContext context = JXPathContext.newContext(container);             \n-//            NamespaceManager nsm = context.getNamespaceManager();\n-//            nsm.registerNamespace(\"quality\", \"qualityNS\");\n-//            nsm.registerNamespace(\"money\", \"priceNS\");\n-//            \n-//            assertXPathValueAndPointer(\n-//                    context,\n-//                    \"//quality:color\",\n-//                    \"orange\",\n-//                    \"/vendor[1]/product[1]/quality:color[1]\");\n-//            \n-//            // It is supposed to figure out that the prefixes \"money\" and\n-//            // \"value\" map to the same namespaceURI\n-//            assertXPathValueAndPointer(\n-//                    context,\n-//                    \"//value:price\",\n-//                    \"1000.00\",\n-//                    \"/vendor[1]/product[1]/money:price[1]\");\n-//            \n-//            assertXPathValue(\n-//                    context,\n-//                    \"local-name(vendor/product/value:price)\",\n-//                    \"price\");\n-//            \n-//            assertXPathValue(\n-//                    context,\n-//                    \"name(vendor/product/quality:color)\",\n-//                    \"qualityNS:color\");\n-//\n-//            assertXPathValue(\n-//                    context,\n-//                    \"namespace-uri(vendor/product/value:price)\",\n-//                    \"priceNS\");\n-//        }\n     }\n }\n--- a/src/test/org/apache/commons/jxpath/ri/model/dom/TestDOMFactory.java\n+++ b/src/test/org/apache/commons/jxpath/ri/model/dom/TestDOMFactory.java\n import org.apache.commons.jxpath.AbstractFactory;\n import org.apache.commons.jxpath.JXPathContext;\n import org.apache.commons.jxpath.Pointer;\n+import org.w3c.dom.Document;\n import org.w3c.dom.Node;\n \n /**\n  * Test AbstractFactory.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2004/02/29 14:17:46 $\n+ * @version $Revision: 1.6 $ $Date: 2004/06/29 22:58:17 $\n  */\n public class TestDOMFactory extends AbstractFactory {\n \n         if (name.equals(\"location\")\n             || name.equals(\"address\")\n             || name.equals(\"street\")) {\n-            addDOMElement((Node) parent, index, name);\n+            addDOMElement((Node) parent, index, name, null);\n+            return true;\n+        }\n+        if (name.startsWith(\"price:\")) {\n+            String namespaceURI = context.getNamespaceURI(\"price\");\n+            addDOMElement((Node) parent, index, name, namespaceURI);\n             return true;\n         }\n         return false;\n     }\n \n-    private void addDOMElement(Node parent, int index, String tag) {\n+    private void addDOMElement(Node parent, int index, String tag, String namespaceURI) {\n         Node child = parent.getFirstChild();\n         int count = 0;\n         while (child != null) {\n \n         // Keep inserting new elements until we have index + 1 of them\n         while (count <= index) {\n-            Node newElement = parent.getOwnerDocument().createElement(tag);\n+            Document doc = parent.getOwnerDocument();\n+            Node newElement;\n+            if (namespaceURI == null) {\n+                newElement = doc.createElement(tag);\n+            } \n+            else {\n+                newElement = doc.createElementNS(namespaceURI, tag);\n+            }\n+       \n             parent.appendChild(newElement);\n             count++;\n         }\n--- a/src/test/org/apache/commons/jxpath/ri/model/jdom/TestJDOMFactory.java\n+++ b/src/test/org/apache/commons/jxpath/ri/model/jdom/TestJDOMFactory.java\n  * Test AbstractFactory.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2004/02/29 14:17:43 $\n+ * @version $Revision: 1.6 $ $Date: 2004/06/29 22:58:17 $\n  */\n public class TestJDOMFactory extends AbstractFactory {\n \n         if (name.equals(\"location\")\n             || name.equals(\"address\")\n             || name.equals(\"street\")) {\n-            addJDOMElement((Element) parent, index, name);\n+            addJDOMElement((Element) parent, index, name, null);\n             return true;\n         }\n+        if (name.startsWith(\"price:\")) {\n+            String namespaceURI = context.getNamespaceURI(\"price\");\n+            addJDOMElement((Element) parent, index, name, namespaceURI);\n+            return true;\n+        }\n+\n         return false;\n     }\n \n-    private void addJDOMElement(Element parent, int index, String tag) {\n+    private void addJDOMElement(Element parent, int index, String tag, String namespaceURI) {\n         List children = parent.getContent();\n         int count = 0;\n         for (int i = 0; i < children.size(); i++) {\n         while (count <= index) {\n             // In a real factory we would need to do the right thing with\n             // the namespace prefix.\n-            Element newElement = new Element(tag);\n+            Element newElement;\n+            if (namespaceURI != null) {\n+                String prefix = tag.substring(0, tag.indexOf(':'));\n+                tag = tag.substring(tag.indexOf(':') + 1);\n+                newElement = new Element(tag, prefix, namespaceURI);\n+            }\n+            else {\n+                newElement = new Element(tag);\n+            }\n             parent.addContent(newElement);\n             count++;\n         }", "timestamp": 1088549898, "metainfo": ""}