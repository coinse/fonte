{"sha": "9d8c0fe0c12845c111d3cb1b0b11126839e764f5", "log": "Interface-based introspection   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/JXPathIntrospector.java\n+++ b/src/java/org/apache/commons/jxpath/JXPathIntrospector.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/JXPathIntrospector.java,v 1.3 2002/04/24 03:29:33 dmitri Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/04/24 03:29:33 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/JXPathIntrospector.java,v 1.4 2002/08/10 01:27:38 dmitri Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/08/10 01:27:38 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n package org.apache.commons.jxpath;\n \n import java.util.Date;\n+import java.util.Map;\n import java.util.HashMap;\n-import java.util.Properties;\n-import java.util.WeakHashMap;\n \n /**\n  * JXPathIntrospector maintains a registry of {@link JXPathBeanInfo JXPathBeanInfo} objects\n  * for Java classes.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.3 $ $Date: 2002/04/24 03:29:33 $\n+ * @version $Revision: 1.4 $ $Date: 2002/08/10 01:27:38 $\n  */\n public class JXPathIntrospector {\n \n     private static HashMap byClass = new HashMap();\n+    private static HashMap byInterface = new HashMap();\n+\n     static {\n         registerAtomicClass(Boolean.TYPE);\n         registerAtomicClass(Boolean.class);\n         registerAtomicClass(java.sql.Time.class);\n         registerAtomicClass(java.sql.Timestamp.class);\n \n-        registerDynamicClass(HashMap.class, MapDynamicPropertyHandler.class);\n-        registerDynamicClass(Properties.class, MapDynamicPropertyHandler.class);\n-        registerDynamicClass(WeakHashMap.class, MapDynamicPropertyHandler.class);\n+        registerDynamicClass(Map.class, MapDynamicPropertyHandler.class);\n     }\n \n     /**\n      * Automatically creates and registers a JXPathBeanInfo object\n      * for the specified class. That object returns true to isDynamic().\n      */\n-    public static void registerDynamicClass(Class beanClass, Class dynamicPropertyHandlerClass) {\n-        byClass.put(beanClass, new JXPathBasicBeanInfo(beanClass, dynamicPropertyHandlerClass));\n+    public static void registerDynamicClass(\n+            Class beanClass, Class dynamicPropertyHandlerClass) {\n+        JXPathBasicBeanInfo bi =\n+            new JXPathBasicBeanInfo(beanClass, dynamicPropertyHandlerClass);\n+        if (beanClass.isInterface()){\n+            byInterface.put(beanClass, bi);\n+        }\n+        else {\n+            byClass.put(beanClass, bi);\n+        }\n     }\n \n     /**\n     public static JXPathBeanInfo getBeanInfo(Class beanClass) {\n         JXPathBeanInfo beanInfo = (JXPathBeanInfo) byClass.get(beanClass);\n         if (beanInfo == null) {\n-            beanInfo = findInformant(beanClass);\n-            if (beanInfo == null) {\n-                beanInfo = new JXPathBasicBeanInfo(beanClass);\n+            beanInfo = findDynamicBeanInfo(beanClass);\n+            if (beanInfo == null){\n+                beanInfo = findInformant(beanClass);\n+                if (beanInfo == null) {\n+                    beanInfo = new JXPathBasicBeanInfo(beanClass);\n+                }\n             }\n             byClass.put(beanClass, beanInfo);\n         }\n         return beanInfo;\n+    }\n+\n+    /**\n+     * Find a dynamic bean info if available for any superclasses or\n+     * interfaces.\n+     */\n+    private static JXPathBeanInfo findDynamicBeanInfo(Class beanClass){\n+        JXPathBeanInfo beanInfo;\n+        if (beanClass.isInterface()){\n+            beanInfo = (JXPathBeanInfo) byInterface.get(beanClass);\n+            if (beanInfo != null){\n+                return beanInfo;\n+            }\n+        }\n+\n+        Class interfaces[] = beanClass.getInterfaces();\n+        if (interfaces != null){\n+            for (int i = 0; i < interfaces.length; i++){\n+                beanInfo = findDynamicBeanInfo(interfaces[i]);\n+                if (beanInfo != null){\n+                    return beanInfo;\n+                }\n+            }\n+        }\n+\n+        Class sup = beanClass.getSuperclass();\n+        if (sup != null){\n+            return findDynamicBeanInfo(sup);\n+        }\n+        return null;\n     }\n \n     private static synchronized JXPathBeanInfo findInformant(Class beanClass) {", "timestamp": 1028942858, "metainfo": ""}