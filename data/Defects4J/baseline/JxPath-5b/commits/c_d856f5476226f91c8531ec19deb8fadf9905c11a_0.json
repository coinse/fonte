{"sha": "d856f5476226f91c8531ec19deb8fadf9905c11a", "log": "complete sealing handling  ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java\n+++ b/src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java\n     public NamespaceResolver(NamespaceResolver parent) {\n         this.parent = parent;\n     }\n-    \n+\n     /**\n      * Registers a namespace prefix.\n      * \n      * @param prefix A namespace prefix\n      * @param namespaceURI A URI for that prefix\n      */\n-    public void registerNamespace(String prefix, String namespaceURI) {\n+    public synchronized void registerNamespace(String prefix, String namespaceURI) {\n+        if (isSealed()) {\n+            throw new IllegalStateException(\"Cannot register namespaces on a sealed NamespaceResolver\");\n+        }\n         namespaceMap.put(prefix, namespaceURI);\n         reverseMap = null;\n     }\n      * @param prefix The namespace prefix to look up\n      * @return namespace URI or null if the prefix is undefined.\n      */\n-    public String getNamespaceURI(String prefix) {\n+    public synchronized String getNamespaceURI(String prefix) {\n         String uri = (String) namespaceMap.get(prefix);\n         if (uri == null && pointer != null) {\n             uri = pointer.getNamespaceURI(prefix);\n      * @param namespaceURI the ns URI to check.\n      * @return String prefix\n      */\n-    public String getPrefix(String namespaceURI) {\n+    public synchronized String getPrefix(String namespaceURI) {\n         if (reverseMap == null) {\n             reverseMap = new HashMap();\n             NodeIterator ni = pointer.namespaceIterator();\n      */\n     public Object clone() {\n         try {\n-            return super.clone();\n+            NamespaceResolver result = (NamespaceResolver) super.clone();\n+            result.sealed = false;\n+            return result;\n         }\n         catch (CloneNotSupportedException e) {\n             // Of course, it's supported.", "timestamp": 1181760343, "metainfo": ""}