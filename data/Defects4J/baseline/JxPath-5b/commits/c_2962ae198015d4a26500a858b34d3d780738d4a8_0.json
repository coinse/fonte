{"sha": "2962ae198015d4a26500a858b34d3d780738d4a8", "log": "Added support for parser features   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/xml/DOMParser.java\n+++ b/src/java/org/apache/commons/jxpath/xml/DOMParser.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/xml/DOMParser.java,v 1.4 2003/10/09 21:31:42 rdonkin Exp $\n- * $Revision: 1.4 $\n- * $Date: 2003/10/09 21:31:42 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/xml/DOMParser.java,v 1.5 2004/01/18 01:42:58 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2004/01/18 01:42:58 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * An implementation of the XMLParser interface that produces a DOM Document.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2003/10/09 21:31:42 $\n+ * @version $Revision: 1.5 $ $Date: 2004/01/18 01:42:58 $\n  */\n-public class DOMParser implements XMLParser {\n+public class DOMParser extends XMLParser2 {\n \n     public Object parseXML(InputStream stream) {\n         try {\n             DocumentBuilderFactory factory =\n                     DocumentBuilderFactory.newInstance();\n+            \n+            factory.setValidating(isValidating());\n+            factory.setNamespaceAware(isNamespaceAware());\n+            factory.setIgnoringElementContentWhitespace(\n+                    isIgnoringElementContentWhitespace());\n+            factory.setExpandEntityReferences(isExpandEntityReferences());\n+            factory.setIgnoringComments(isIgnoringComments());\n+            factory.setCoalescing(isCoalescing());\n             return factory.newDocumentBuilder().parse(stream);\n         }\n         catch (Exception ex) {\n--- a/src/java/org/apache/commons/jxpath/xml/DocumentContainer.java\n+++ b/src/java/org/apache/commons/jxpath/xml/DocumentContainer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/xml/DocumentContainer.java,v 1.7 2003/10/09 21:31:42 rdonkin Exp $\n- * $Revision: 1.7 $\n- * $Date: 2003/10/09 21:31:42 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/xml/DocumentContainer.java,v 1.8 2004/01/18 01:42:58 dmitri Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2004/01/18 01:42:58 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * read at all.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.7 $ $Date: 2003/10/09 21:31:42 $\n+ * @version $Revision: 1.8 $ $Date: 2004/01/18 01:42:58 $\n  */\n-public class DocumentContainer implements Container {\n+public class DocumentContainer extends XMLParser2 implements Container {\n \n     public static final String MODEL_DOM = \"DOM\";\n     public static final String MODEL_JDOM = \"JDOM\";\n      */\n     public static void registerXMLParser(String model, XMLParser parser) {\n         parsers.put(model, parser);\n+    }\n+\n+    /**\n+     * Add a class of a custom XML parser. \n+     * Parsers for the models \"DOM\" and \"JDOM\" are pre-registered.\n+     */    \n+    public static void registerXMLParser(String model, String parserClassName) {\n+        parserClasses.put(model, parserClassName);\n     }\n \n     /**\n                     if (xmlURL != null) {\n                         stream = xmlURL.openStream();\n                     }\n-                    document = getParser(model).parseXML(stream);\n+                    document = parseXML(stream);\n                 }\n                 finally {\n                     if (stream != null) {\n     }\n \n     /**\n+     * Parses XML using the parser for the specified model.\n+     */\n+    public Object parseXML(InputStream stream) {\n+        XMLParser parser = getParser(model);\n+        if (parser instanceof XMLParser2) {\n+            XMLParser2 parser2 = (XMLParser2) parser;\n+            parser2.setValidating(isValidating());\n+            parser2.setNamespaceAware(isNamespaceAware());\n+            parser2.setIgnoringElementContentWhitespace(\n+                    isIgnoringElementContentWhitespace());\n+            parser2.setExpandEntityReferences(isExpandEntityReferences());\n+            parser2.setIgnoringComments(isIgnoringComments());\n+            parser2.setCoalescing(isCoalescing());\n+        }\n+        return parser.parseXML(stream);\n+    }\n+\n+    /**\n      * Throws an UnsupportedOperationException\n      */\n     public void setValue(Object value) {\n             }\n             try {\n                 Class clazz = Class.forName(className);\n-                parser = (XMLParser) clazz.newInstance();\n+                parser = (XMLParser) clazz.newInstance();                \n             }\n             catch (Exception ex) {\n                 throw new JXPathException(\n--- a/src/java/org/apache/commons/jxpath/xml/JDOMParser.java\n+++ b/src/java/org/apache/commons/jxpath/xml/JDOMParser.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/xml/JDOMParser.java,v 1.4 2003/10/09 21:31:42 rdonkin Exp $\n- * $Revision: 1.4 $\n- * $Date: 2003/10/09 21:31:42 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/xml/JDOMParser.java,v 1.5 2004/01/18 01:42:58 dmitri Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2004/01/18 01:42:58 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * An implementation of the XMLParser interface that produces a JDOM Document.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.4 $ $Date: 2003/10/09 21:31:42 $\n+ * @version $Revision: 1.5 $ $Date: 2004/01/18 01:42:58 $\n  */\n-public class JDOMParser implements XMLParser {\n-\n+public class JDOMParser extends XMLParser2 {\n+    \n+    /**\n+     * Temporary fix for JDOM problem - JDOM B9 does not properly handle\n+     * isNamespaceAware = false\n+     */\n+    public boolean isNamespaceAware() {\n+        return true;\n+    }\n+    \n     public Object parseXML(InputStream stream) {\n         try {\n             SAXBuilder builder = new SAXBuilder();\n+            builder.setExpandEntities(isExpandEntityReferences());\n+            builder.setIgnoringElementContentWhitespace(\n+                    isIgnoringElementContentWhitespace());\n+            builder.setValidation(isValidating());\n+            builder.setFeature(\n+                    \"http://xml.org/sax/features/namespaces\",\n+                    isNamespaceAware());\n+            builder.setFeature(\n+                    \"http://xml.org/sax/features/namespace-prefixes\",\n+                    isNamespaceAware());\n             return builder.build(stream);\n         }\n         catch (Exception ex) {\n+            ex.printStackTrace();\n             throw new JXPathException(\"JDOM parser error\", ex);\n         }\n     }\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/xml/XMLParser2.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/xml/XMLParser2.java,v 1.1 2004/01/18 01:42:58 dmitri Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2004/01/18 01:42:58 $\n+ *\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ *\n+ * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation and was\n+ * originally based on software copyright (c) 2001, Plotnix, Inc,\n+ * <http://www.plotnix.com/>.\n+ * For more information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.jxpath.xml;\n+\n+import java.io.InputStream;\n+\n+/**\n+ * The abstract superclass of XML parsers that produce DOM Documents.\n+ * The features have the same defaults as DocumentBuilderFactory.\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2004/01/18 01:42:58 $\n+ */\n+public abstract class XMLParser2 implements XMLParser \n+{\n+    private boolean validating = false;\n+    private boolean namespaceAware = false;\n+    private boolean whitespace = false;\n+    private boolean expandEntityRef = true;\n+    private boolean ignoreComments = false;\n+    private boolean coalescing = false;\n+    \n+    /**\n+     * @see DocumentBuilderFactory#setValidating(boolean)\n+     */\n+    public void setValidating(boolean validating) {\n+        this.validating = validating;\n+    }\n+    \n+    /**\n+     * @see DocumentBuilderFactory#isValidating()\n+     */\n+    public boolean isValidating() {\n+        return validating;\n+    }\n+    \n+    /**\n+     * @see DocumentBuilderFactory#isNamespaceAware()\n+     */\n+    public boolean isNamespaceAware() {\n+        return namespaceAware;\n+    }\n+    \n+    /**\n+     * @see DocumentBuilderFactory#setNamespaceAware(boolean)\n+     */\n+    public void setNamespaceAware(boolean namespaceAware) {\n+        this.namespaceAware = namespaceAware;\n+    }\n+    \n+    /**\n+     * @see DocumentBuilderFactory#setIgnoringElementContentWhitespace(boolean)\n+     */\n+    public void setIgnoringElementContentWhitespace(boolean whitespace) {\n+        this.whitespace = whitespace;\n+    }\n+    \n+    /**\n+     * @see DocumentBuilderFactory#isIgnoringElementContentWhitespace()\n+     */\n+    public boolean isIgnoringElementContentWhitespace() {\n+        return whitespace;\n+    }\n+    \n+    /**\n+     * @see DocumentBuilderFactory#isExpandEntityReferences()\n+     */\n+    public boolean isExpandEntityReferences() {\n+        return expandEntityRef;\n+    }\n+    \n+    /**\n+     * @see DocumentBuilderFactory#setExpandEntityReferences(boolean)\n+     */\n+    public void setExpandEntityReferences(boolean expandEntityRef) {\n+        this.expandEntityRef = expandEntityRef;\n+    }\n+    \n+    /**\n+     * @see DocumentBuilderFactory#isIgnoringComments()\n+     */\n+    public boolean isIgnoringComments() {\n+        return ignoreComments;\n+    }\n+    \n+    /**\n+     * @see DocumentBuilderFactory#setIgnoringComments(boolean)\n+     */\n+    public void setIgnoringComments(boolean ignoreComments) {\n+        this.ignoreComments = ignoreComments;\n+    }\n+    \n+    /**\n+     * @see DocumentBuilderFactory#isCoalescing()\n+     */\n+    public boolean isCoalescing() {\n+        return coalescing;\n+    }\n+    \n+    /**\n+     * @see DocumentBuilderFactory#setCoalescing(boolean)\n+     */\n+    public void setCoalescing(boolean coalescing) {\n+        this.coalescing = coalescing;\n+    }\n+    \n+    public abstract Object parseXML(InputStream stream);\n+}", "timestamp": 1074390178, "metainfo": ""}