{"sha": "af29beb2518f46e18de3e82c304b5ea9b0e6d090", "log": "Fixed issues with JXPathServletContexts   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/servlet/HttpSessionAndServletContext.java\n+/*\n+ * Copyright 1999-2004 The Apache Software Foundation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.jxpath.servlet;\n+\n+import javax.servlet.ServletContext;\n+import javax.servlet.http.HttpSession;\n+\n+/**\n+ * Just a structure to hold a ServletRequest and ServletContext together.\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2004/05/08 15:10:49 $\n+ */\n+public class HttpSessionAndServletContext {\n+\n+    private HttpSession session;\n+    private ServletContext context;\n+\n+    public HttpSessionAndServletContext(HttpSession session,\n+            ServletContext context) {\n+        this.session = session;\n+        this.context = context;\n+    }\n+    \n+    public HttpSession getSession() {\n+        return session;\n+    }\n+    \n+    public ServletContext getServletContext() {\n+        return context;\n+    }\n+}\n--- a/src/java/org/apache/commons/jxpath/servlet/HttpSessionHandler.java\n+++ b/src/java/org/apache/commons/jxpath/servlet/HttpSessionHandler.java\n package org.apache.commons.jxpath.servlet;\n \n import java.util.Enumeration;\n+import java.util.HashSet;\n \n import javax.servlet.http.HttpSession;\n-import org.apache.commons.jxpath.DynamicPropertyHandler;\n+\n+import org.apache.commons.jxpath.JXPathException;\n \n /**\n  * Implementation of the DynamicPropertyHandler interface that provides\n  * access to attributes of a HttpSession.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2004/02/29 14:17:40 $\n+ * @version $Revision: 1.6 $ $Date: 2004/05/08 15:10:49 $\n  */\n-public class HttpSessionHandler implements DynamicPropertyHandler {\n+public class HttpSessionHandler extends ServletContextHandler {\n \n-    public String[] getPropertyNames(Object session) {\n-        Enumeration e = ((HttpSession) session).getAttributeNames();\n-        return Util.toStrings(e);\n+    protected void collectPropertyNames(HashSet set, Object bean) {\n+        HttpSessionAndServletContext handle = \n+            (HttpSessionAndServletContext) bean;\n+        super.collectPropertyNames(set, handle.getServletContext());\n+        HttpSession session = handle.getSession();\n+        if (session != null) {\n+            Enumeration e = session.getAttributeNames();\n+            while (e.hasMoreElements()) {\n+                set.add(e.nextElement());\n+            }\n+        }\n+    }\n+    \n+    public Object getProperty(Object bean, String property) {\n+        HttpSessionAndServletContext handle = \n+            (HttpSessionAndServletContext) bean;\n+        HttpSession session = handle.getSession();\n+        if (session != null) {\n+            Object object = session.getAttribute(property);\n+            if (object != null) {\n+                return object;\n+            }\n+        }\n+        return super.getProperty(handle.getServletContext(), property);\n     }\n \n-    public Object getProperty(Object session, String property) {\n-        return ((HttpSession) session).getAttribute(property);\n-    }\n-\n-    public void setProperty(Object session, String property, Object value) {\n-        ((HttpSession) session).setAttribute(property, value);\n+    public void setProperty(Object bean, String property, Object value) {\n+        HttpSessionAndServletContext handle = \n+            (HttpSessionAndServletContext) bean;\n+        HttpSession session = handle.getSession();\n+        if (session != null) {\n+            session.setAttribute(property, value);\n+        }\n+        else {\n+            throw new JXPathException(\"Cannot set session attribute: \"\n+                    + \"there is no session\");\n+        }\n     }\n }\n--- a/src/java/org/apache/commons/jxpath/servlet/JXPathServletContexts.java\n+++ b/src/java/org/apache/commons/jxpath/servlet/JXPathServletContexts.java\n  * servlet. JXPath does not automatically create sessions.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2004/02/29 14:17:40 $\n+ * @version $Revision: 1.6 $ $Date: 2004/05/08 15:10:49 $\n  */\n public final class JXPathServletContexts {\n \n \n     static {\n         JXPathIntrospector.registerDynamicClass(\n-            PageScopeContext.class,\n-            PageScopeContextHandler.class);\n+                PageScopeContext.class,\n+                PageScopeContextHandler.class);\n+        JXPathIntrospector.registerDynamicClass(\n+                PageContext.class,\n+                PageContextHandler.class);\n+        JXPathIntrospector.registerDynamicClass(\n+                ServletContext.class,\n+                ServletContextHandler.class);\n+        JXPathIntrospector.registerDynamicClass(\n+                ServletRequestAndContext.class,\n+                ServletRequestHandler.class);\n+        JXPathIntrospector.registerDynamicClass(\n+                HttpSessionAndServletContext.class,\n+                HttpSessionHandler.class);\n         factory = JXPathContextFactory.newInstance();\n     }\n \n         JXPathContext context =\n             (JXPathContext) pageContext.getAttribute(Constants.JXPATH_CONTEXT);\n         if (context == null) {\n-            JXPathIntrospector.registerDynamicClass(\n-                pageContext.getClass(),\n-                PageContextHandler.class);\n             JXPathContext parentContext =\n                 getRequestContext(\n                     pageContext.getRequest(),\n     {\n         JXPathContext context =\n             (JXPathContext) request.getAttribute(Constants.JXPATH_CONTEXT);\n-        if (context == null) {\n-            JXPathContext parentContext = null;\n-            if (request instanceof HttpServletRequest) {\n-                HttpSession session =\n-                    ((HttpServletRequest) request).getSession(false);\n-                if (session != null) {\n-                    parentContext = getSessionContext(session, servletContext);\n-                }\n-                else {\n-                    parentContext = getApplicationContext(servletContext);\n-                }\n+        // If we are in an included JSP or Servlet, the request parameter\n+        // will represent the included URL, but the JXPathContext we have\n+        // just acquired will represent the outer request.\n+        if (context != null) {\n+            ServletRequestAndContext handle = \n+                (ServletRequestAndContext) context.getContextBean();\n+            if (handle.getServletRequest() == request) {\n+                return context;\n             }\n-            JXPathIntrospector.registerDynamicClass(\n-                request.getClass(),\n-                ServletRequestHandler.class);\n-            context = factory.newContext(parentContext, request);\n-            context.setVariables(\n-                new KeywordVariables(Constants.REQUEST_SCOPE, request));\n-            request.setAttribute(Constants.JXPATH_CONTEXT, context);\n         }\n+        \n+        JXPathContext parentContext = null;\n+        if (request instanceof HttpServletRequest) {\n+            HttpSession session =\n+                ((HttpServletRequest) request).getSession(false);\n+            if (session != null) {\n+                parentContext = getSessionContext(session, servletContext);\n+            }\n+            else {\n+                parentContext = getApplicationContext(servletContext);\n+            }\n+        }\n+        ServletRequestAndContext handle = \n+            new ServletRequestAndContext(request, servletContext);\n+        context = factory.newContext(parentContext, handle);\n+        context.setVariables(\n+            new KeywordVariables(Constants.REQUEST_SCOPE, handle));\n+        request.setAttribute(Constants.JXPATH_CONTEXT, context);\n         return context;\n     }\n \n         JXPathContext context =\n             (JXPathContext) session.getAttribute(Constants.JXPATH_CONTEXT);\n         if (context == null) {\n-            JXPathIntrospector.registerDynamicClass(\n-                session.getClass(),\n-                HttpSessionHandler.class);\n             JXPathContext parentContext = getApplicationContext(servletContext);\n-            context = factory.newContext(parentContext, session);\n+            HttpSessionAndServletContext handle = \n+                new HttpSessionAndServletContext(session, servletContext);\n+            context = factory.newContext(parentContext, handle);\n             context.setVariables(\n-                new KeywordVariables(Constants.SESSION_SCOPE, session));\n+                new KeywordVariables(Constants.SESSION_SCOPE, handle));\n             session.setAttribute(Constants.JXPATH_CONTEXT, context);\n         }\n         return context;\n             (JXPathContext) servletContext.getAttribute(\n                 Constants.JXPATH_CONTEXT);\n         if (context == null) {\n-            JXPathIntrospector.registerDynamicClass(\n-                servletContext.getClass(),\n-                ServletContextHandler.class);\n             context = factory.newContext(null, servletContext);\n             context.setVariables(\n                 new KeywordVariables(\n--- a/src/java/org/apache/commons/jxpath/servlet/PageContextHandler.java\n+++ b/src/java/org/apache/commons/jxpath/servlet/PageContextHandler.java\n  */\n package org.apache.commons.jxpath.servlet;\n \n-import java.util.ArrayList;\n import java.util.Enumeration;\n+import java.util.HashSet;\n \n import javax.servlet.jsp.PageContext;\n+\n import org.apache.commons.jxpath.DynamicPropertyHandler;\n \n /**\n  * access to attributes of a PageContext in all scopes.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2004/02/29 14:17:40 $\n+ * @version $Revision: 1.6 $ $Date: 2004/05/08 15:10:49 $\n  */\n public class PageContextHandler implements DynamicPropertyHandler {\n \n     public String[] getPropertyNames(Object pageContext) {\n-        ArrayList list = new ArrayList();\n+        HashSet list = new HashSet();\n         Enumeration e =\n             ((PageContext) pageContext).getAttributeNamesInScope(\n                 PageContext.PAGE_SCOPE);\n--- a/src/java/org/apache/commons/jxpath/servlet/PageScopeContextHandler.java\n+++ b/src/java/org/apache/commons/jxpath/servlet/PageScopeContextHandler.java\n  */\n package org.apache.commons.jxpath.servlet;\n \n+import java.util.ArrayList;\n import java.util.Enumeration;\n \n import org.apache.commons.jxpath.DynamicPropertyHandler;\n  * access to attributes of a PageScopeContext.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2004/02/29 14:17:40 $\n+ * @version $Revision: 1.6 $ $Date: 2004/05/08 15:10:49 $\n  */\n public class PageScopeContextHandler implements DynamicPropertyHandler {\n+    \n+    private static final String[] STRING_ARRAY = new String[0];\n \n     public String[] getPropertyNames(Object pageScope) {\n         Enumeration e = ((PageScopeContext) pageScope).getAttributeNames();\n-        return Util.toStrings(e);\n+        ArrayList list = new ArrayList(16);\n+        while (e.hasMoreElements()) {\n+            list.add(e.nextElement());\n+        }\n+        return (String[]) list.toArray(STRING_ARRAY);\n     }\n \n     public Object getProperty(Object pageScope, String property) {\n--- a/src/java/org/apache/commons/jxpath/servlet/ServletContextHandler.java\n+++ b/src/java/org/apache/commons/jxpath/servlet/ServletContextHandler.java\n package org.apache.commons.jxpath.servlet;\n \n import java.util.Enumeration;\n+import java.util.HashSet;\n \n import javax.servlet.ServletContext;\n+\n import org.apache.commons.jxpath.DynamicPropertyHandler;\n \n /**\n  * access to attributes of a ServletContext.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2004/02/29 14:17:40 $\n+ * @version $Revision: 1.6 $ $Date: 2004/05/08 15:10:49 $\n  */\n public class ServletContextHandler implements DynamicPropertyHandler {\n+    \n+    private static final String[] STRING_ARRAY = new String[0];\n \n     public String[] getPropertyNames(Object context) {\n-        Enumeration e = ((ServletContext) context).getAttributeNames();\n-        return Util.toStrings(e);\n+        HashSet list = new HashSet(16);\n+        collectPropertyNames(list, context);\n+        return (String[]) list.toArray(STRING_ARRAY);\n+    }\n+    \n+    protected void collectPropertyNames(HashSet set, Object bean) {\n+        Enumeration e = ((ServletContext) bean).getAttributeNames();\n+        while (e.hasMoreElements()) {\n+            set.add(e.nextElement());\n+        }\n     }\n \n     public Object getProperty(Object context, String property) {\n--- /dev/null\n+++ b/src/java/org/apache/commons/jxpath/servlet/ServletRequestAndContext.java\n+/*\n+ * Copyright 1999-2004 The Apache Software Foundation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.jxpath.servlet;\n+\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpSession;\n+\n+/**\n+ * Just a structure to hold a ServletRequest and ServletContext together.\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2004/05/08 15:10:49 $\n+ */\n+public class ServletRequestAndContext extends\n+        HttpSessionAndServletContext\n+{\n+    private ServletRequest request;\n+\n+    public ServletRequestAndContext(ServletRequest request,\n+            ServletContext context) \n+    {\n+        super(null, context);\n+        this.request = request;\n+    }\n+\n+    \n+    public HttpSession getSession() {\n+        if (request instanceof HttpServletRequest) {\n+            return ((HttpServletRequest)request).getSession(false);\n+        }\n+        return null;\n+    }\n+    \n+    public ServletRequest getServletRequest() {\n+        return request;\n+    }\n+}\n--- a/src/java/org/apache/commons/jxpath/servlet/ServletRequestHandler.java\n+++ b/src/java/org/apache/commons/jxpath/servlet/ServletRequestHandler.java\n package org.apache.commons.jxpath.servlet;\n \n import java.util.Enumeration;\n+import java.util.HashSet;\n \n import javax.servlet.ServletRequest;\n-import org.apache.commons.jxpath.DynamicPropertyHandler;\n \n /**\n  * Implementation of the DynamicPropertyHandler interface that provides\n- * access to attributes of a ServletRequest.\n+ * access to attributes and parameters of a ServletRequest.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.5 $ $Date: 2004/02/29 14:17:40 $\n+ * @version $Revision: 1.6 $ $Date: 2004/05/08 15:10:49 $\n  */\n-public class ServletRequestHandler implements DynamicPropertyHandler {\n-\n-    public String[] getPropertyNames(Object request) {\n-        Enumeration e = ((ServletRequest) request).getAttributeNames();\n-        return Util.toStrings(e);\n+public class ServletRequestHandler extends HttpSessionHandler {\n+    \n+    protected void collectPropertyNames(HashSet set, Object bean) {\n+        super.collectPropertyNames(set, bean);\n+        ServletRequestAndContext handle = (ServletRequestAndContext) bean; \n+        ServletRequest servletRequest = handle.getServletRequest();\n+        Enumeration e = servletRequest.getAttributeNames();\n+        while (e.hasMoreElements()) {\n+            set.add(e.nextElement());\n+        }\n+        e = servletRequest.getParameterNames();\n+        while (e.hasMoreElements()) {\n+            set.add(e.nextElement());\n+        }\n     }\n-\n-    public Object getProperty(Object request, String property) {\n-        return ((ServletRequest) request).getAttribute(property);\n+    \n+    public Object getProperty(Object bean, String property) { \n+        ServletRequestAndContext handle = (ServletRequestAndContext) bean; \n+        ServletRequest servletRequest = handle.getServletRequest();\n+        String[] strings = servletRequest.getParameterValues(property);\n+        if (strings != null) {\n+            if (strings.length == 0) {\n+                return null;\n+            }\n+            if (strings.length == 1) {\n+                return strings[0];\n+            }\n+            return strings;\n+        }\n+        \n+        Object object = servletRequest.getAttribute(property);\n+        if (object != null) {\n+            return object;\n+        }\n+        \n+        return super.getProperty(bean, property);\n     }\n \n     public void setProperty(Object request, String property, Object value) {\n--- /dev/null\n+++ b/src/test-webapp/JXPathServletContextsTestServlet.java\n+/*\n+ * Copyright 1999-2004 The Apache Software Foundation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+\n+import org.apache.commons.jxpath.JXPathContext;\n+import org.apache.commons.jxpath.servlet.JXPathServletContexts;\n+\n+/**\n+ * Invoke like this: http://localhost:8080/jxpath?parm=OK\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2004/05/08 15:10:49 $\n+ */\n+public class JXPathServletContextsTestServlet extends HttpServlet {\n+\n+    public void doGet(HttpServletRequest request, HttpServletResponse response)\n+    throws IOException, ServletException\n+    {\n+        ServletContext servletContext = getServletContext();\n+        servletContext.setAttribute(\"app\", \"OK\");\n+        JXPathContext appContext = JXPathServletContexts\n+                .getApplicationContext(servletContext);\n+        \n+        request.setAttribute(\"attr\", \"OK\");\n+        JXPathContext reqContext = JXPathServletContexts.getRequestContext(\n+                request,\n+                servletContext);\n+                \n+        HttpSession session = request.getSession();\n+        Integer count = (Integer) session.getAttribute(\"count\");\n+        if (count == null) {\n+            count = new Integer(0);\n+        }\n+        else {\n+            count = new Integer(count.intValue() + 1);\n+        }\n+        session.setAttribute(\"count\", count);\n+        \n+        JXPathContext sessionContext = JXPathServletContexts.getSessionContext(\n+                session,\n+                servletContext);\n+        \n+        response.setContentType(\"text/html\");\n+        PrintWriter out = response.getWriter();\n+        out.println(\"<html>\");\n+        out.println(\"<head>\");\n+        out.println(\"<title>JXPathServletContext</title>\");\n+        out.println(\"</head>\");\n+        out.println(\"<body>\");\n+        out.println(\"<h1>JXPathServletContexts Servlet Context Test</h1>\");\n+        assertEqual(\n+                out,\n+                \"Application Context\",\n+                appContext.getValue(\"app\"),\n+                \"OK\");\n+        assertEqual(\n+                out,\n+                \"Request Context Attribute\",\n+                reqContext.getValue(\"attr\"),\n+                \"OK\");\n+        assertEqual(\n+                out,\n+                \"Request Context Attribute\",\n+                reqContext.getValue(\"attr\"),\n+                \"OK\");\n+        \n+        if (request.getParameter(\"parm\") == null) {\n+            out.println(\"<p><b>Invoke this test servlet like this: \"\n+                    + \"http://localhost:8080/jxpath-war/jxpath?parm=OK<b>\");\n+        }\n+        else {\n+            assertEqual(\n+                    out,\n+                    \"Request Context Parameter\",\n+                    reqContext.getValue(\"parm\"),\n+                    \"OK\");\n+        }\n+        assertEqual(\n+                out,\n+                \"Session Context Parameter (reload for actual test)\",\n+                sessionContext.getValue(\"count\"),\n+                count);\n+        assertEqual(\n+                out,\n+                \"Application Context via Request Context\",\n+                reqContext.getValue(\"app\"),\n+                \"OK\");\n+        assertEqual(\n+                out,\n+                \"Session Context via Request Context\",\n+                reqContext.getValue(\"count\"),\n+                count);\n+        assertEqual(\n+                out,\n+                \"Application Context via Session Context\",\n+                sessionContext.getValue(\"app\"),\n+                \"OK\");\n+        \n+        out.println(\"</body>\");\n+        out.println(\"</html>\");\n+    }\n+\n+    private void assertEqual(\n+            PrintWriter out,\n+            String title,\n+            Object actual,\n+            Object expected) \n+    {\n+        if ((actual == null && expected == null)\n+                || (actual != null && actual.equals(expected))) {\n+            out.println(\"<p>\" + title + \": Ok\");\n+        }\n+        else {\n+            out.println(\"<p><font color=red>\" + title + \": Failure</font>\");\n+        }\n+    }\n+}\n+", "timestamp": 1084029049, "metainfo": ""}