{"sha": "75548377c5f5821be2ca75eb247a6ddd4bbb6a88", "log": "In some situations JXPath would not open containers during path traversal.  Made the container opening consistent throughout RI.   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n+++ b/src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java\n  * The reference implementation of JXPathContext.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.41 $ $Date: 2004/04/01 02:55:32 $\n+ * @version $Revision: 1.42 $ $Date: 2004/04/04 22:06:36 $\n  */\n public class JXPathContextReferenceImpl extends JXPathContext {\n     \n             return new VariablePointer(vars, name);\n         }\n         else {\n+            // The variable is not declared, but we will create\n+            // a pointer anyway in case the user want to set, rather\n+            // than get, the value of the variable.\n             return new VariablePointer(name);\n         }\n     }\n--- a/src/java/org/apache/commons/jxpath/ri/model/VariablePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/VariablePointer.java\n  * Pointer to a context variable.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.17 $ $Date: 2004/02/29 14:17:45 $\n+ * @version $Revision: 1.18 $ $Date: 2004/04/04 22:06:36 $\n  */\n public class VariablePointer extends NodePointer {\n     private Variables variables;\n         if (index != WHOLE_COLLECTION) {\n             return ValueUtils.getValue(value, index);\n         }\n-        return value;\n+        else {\n+            return ValueUtils.getValue(value);\n+        }\n     }\n \n     public void setValue(Object value) {\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java\n  * Pointer pointing to a property of a JavaBean.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.16 $ $Date: 2004/02/29 14:17:41 $\n+ * @version $Revision: 1.17 $ $Date: 2004/04/04 22:06:36 $\n  */\n public class BeanPropertyPointer extends PropertyPointer {\n     private String propertyName;\n     public Object getImmediateNode() {\n         if (value == UNINITIALIZED) {\n             if (index == WHOLE_COLLECTION) {\n-                value = getBaseValue();\n+                value = ValueUtils.getValue(getBaseValue());\n             }\n             else {\n                 PropertyDescriptor pd = getPropertyDescriptor();\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java\n  * Transparent pointer to a collection (array or Collection).\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.18 $ $Date: 2004/03/25 03:49:50 $\n+ * @version $Revision: 1.19 $ $Date: 2004/04/04 22:06:35 $\n  */\n public class CollectionPointer extends NodePointer {\n     private Object collection;\n         if (index != WHOLE_COLLECTION) {\n             return ValueUtils.getValue(collection, index);\n         }\n-        return collection;\n+        else {\n+            return ValueUtils.getValue(collection);\n+        }\n     }\n \n     public void setValue(Object value) {\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java\n  * a collection.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.18 $ $Date: 2004/03/25 05:41:29 $\n+ * @version $Revision: 1.19 $ $Date: 2004/04/04 22:06:36 $\n  */\n public abstract class PropertyOwnerPointer extends NodePointer {\n \n     public Object getImmediateNode() {\n         if (value == UNINITIALIZED) {\n             if (index == WHOLE_COLLECTION) {\n-                value = getBaseValue();\n+                value = ValueUtils.getValue(getBaseValue());\n             }\n             else {\n                 value = ValueUtils.getValue(getBaseValue(), index);\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java\n  * a property of the parent object.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.13 $ $Date: 2004/03/25 03:49:50 $\n+ * @version $Revision: 1.14 $ $Date: 2004/04/04 22:06:36 $\n  */\n public abstract class PropertyPointer extends NodePointer {\n     public static final int UNSPECIFIED_PROPERTY = Integer.MIN_VALUE;\n     public Object getImmediateNode() {\n         if (value == UNINITIALIZED) {\n             if (index == WHOLE_COLLECTION) {\n-                value = getBaseValue();\n+                value = ValueUtils.getValue(getBaseValue());\n             }\n             else {\n                 value = ValueUtils.getValue(getBaseValue(), index);\n--- a/src/java/org/apache/commons/jxpath/ri/model/container/ContainerPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/container/ContainerPointer.java\n  * itself.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.12 $ $Date: 2004/04/01 02:55:32 $\n+ * @version $Revision: 1.13 $ $Date: 2004/04/04 22:06:36 $\n  */\n public class ContainerPointer extends NodePointer {\n     private Container container;\n     }\n \n     public Object getBaseValue() {\n-        return container.getValue();\n+        return container;\n     }\n     \n     public boolean isCollection() {\n                 return null;\n             }\n         }\n-        return value;\n+        else {\n+            return ValueUtils.getValue(value);\n+        }\n     }\n \n     public void setValue(Object value) {\n+        // TODO: what if this is a collection?\n         container.setValue(value);\n     }\n \n--- a/src/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPropertyPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPropertyPointer.java\n  * Pointer pointing to a property of a DynaBean.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.11 $ $Date: 2004/02/29 14:17:40 $\n+ * @version $Revision: 1.12 $ $Date: 2004/04/04 22:06:35 $\n  */\n public class DynaBeanPropertyPointer extends PropertyPointer {\n     private DynaBean dynaBean;\n \n         Object value;\n         if (index == WHOLE_COLLECTION) {\n-            value = dynaBean.get(name);\n+            value = ValueUtils.getValue(dynaBean.get(name));\n         }\n         else if (isIndexedProperty()) {\n             // DynaClass at this point is not based on whether\n             // whether it is an array or List. Therefore\n             // the indexed set may fail.\n             try {\n-                value = dynaBean.get(name, index);\n+                value = ValueUtils.getValue(dynaBean.get(name, index));\n             }\n             catch (ArrayIndexOutOfBoundsException ex) {\n                 value = null;\n--- a/src/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPropertyPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPropertyPointer.java\n  * Pointer pointing to a property of an object with dynamic properties.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.7 $ $Date: 2004/03/25 03:49:50 $\n+ * @version $Revision: 1.8 $ $Date: 2004/04/04 22:06:36 $\n  */\n public class DynamicPropertyPointer extends PropertyPointer {\n     private DynamicPropertyHandler handler;\n     public Object getImmediateNode() {\n         Object value;\n         if (index == WHOLE_COLLECTION) {\n-            value = handler.getProperty(getBean(), getPropertyName());\n+            value = ValueUtils.getValue(handler.getProperty(\n+                    getBean(),\n+                    getPropertyName()));\n         }\n         else {\n-            value =\n-                ValueUtils.getValue(\n-                    handler.getProperty(getBean(), getPropertyName()),\n-                    index);\n+            value = ValueUtils.getValue(handler.getProperty(\n+                    getBean(),\n+                    getPropertyName()), index);\n         }\n         return value;\n     }\n--- a/src/java/org/apache/commons/jxpath/util/ValueUtils.java\n+++ b/src/java/org/apache/commons/jxpath/util/ValueUtils.java\n  * Collection and property access utilities.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.18 $ $Date: 2004/02/29 14:17:43 $\n+ * @version $Revision: 1.19 $ $Date: 2004/04/04 22:06:36 $\n  */\n public class ValueUtils {\n     private static Map dynamicPropertyHandlerMap = new HashMap();\n         if (value == null) {\n             return false;\n         }\n-        else if (value.getClass().isArray()) {\n+        value = getValue(value);\n+        if (value.getClass().isArray()) {\n             return true;\n         }\n         else if (value instanceof Collection) {\n         if (collection == null) {\n             return 0;\n         }\n-        else if (collection.getClass().isArray()) {\n+        collection = getValue(collection);\n+        if (collection.getClass().isArray()) {\n             return Array.getLength(collection);\n         }\n         else if (collection instanceof Collection) {\n      * Returns the index'th element from the supplied collection.\n      */\n     public static Object remove(Object collection, int index) {\n-        collection = openContainers(collection);\n+        collection = getValue(collection);\n         if (collection == null) {\n             return null;\n         }\n      * Returns the index'th element of the supplied collection.\n      */\n     public static Object getValue(Object collection, int index) {\n-        collection = openContainers(collection);\n+        collection = getValue(collection);\n         Object value = collection;\n         if (collection != null) {\n             if (collection.getClass().isArray()) {\n      * Converts the value to the required type if necessary.\n      */\n     public static void setValue(Object collection, int index, Object value) {\n-        collection = openContainers(collection);\n+        collection = getValue(collection);\n         if (collection != null) {\n             if (collection.getClass().isArray()) {\n                 Array.set(\n         }\n         // We will fall through if there is no indexed read\n         Object collection = getValue(bean, propertyDescriptor);\n-        if (isCollection(openContainers(collection))) {\n+        if (isCollection(collection)) {\n             setValue(collection, index, value);\n         }\n         else if (index == 0) {\n      * If the parameter is a container, opens the container and\n      * return the contents.  The method is recursive.\n      */\n-    private static Object openContainers(Object collection) {\n-        while (collection instanceof Container) {\n-            collection = ((Container) collection).getValue();\n-        }\n-        return collection;\n+    public static Object getValue(Object object) {\n+        while (object instanceof Container) {\n+            object = ((Container) object).getValue();\n+        }\n+        return object;\n     }\n     \n     /**\n--- a/src/test/org/apache/commons/jxpath/JXPathTestSuite.java\n+++ b/src/test/org/apache/commons/jxpath/JXPathTestSuite.java\n import org.apache.commons.jxpath.ri.compiler.VariableTest;\n import org.apache.commons.jxpath.ri.model.MixedModelTest;\n import org.apache.commons.jxpath.ri.model.beans.BeanModelTest;\n+import org.apache.commons.jxpath.ri.model.container.ContainerModelTest;\n import org.apache.commons.jxpath.ri.model.dom.DOMModelTest;\n import org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanModelTest;\n import org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertiesModelTest;\n  * </p>\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.6 $ $Date: 2004/02/29 14:17:40 $\n+ * @version $Revision: 1.7 $ $Date: 2004/04/04 22:06:35 $\n  */\n \n public class JXPathTestSuite extends TestCase {\n         suite.addTestSuite(CoreOperationTest.class);\n         suite.addTestSuite(ExtensionFunctionTest.class);\n         suite.addTestSuite(VariableTest.class);\n+        suite.addTestSuite(ContainerModelTest.class);\n         suite.addTestSuite(BeanModelTest.class);\n         suite.addTestSuite(DynamicPropertiesModelTest.class);\n         suite.addTestSuite(DOMModelTest.class);\n--- a/src/test/org/apache/commons/jxpath/ri/model/MixedModelTest.java\n+++ b/src/test/org/apache/commons/jxpath/ri/model/MixedModelTest.java\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n \n import org.apache.commons.jxpath.JXPathContext;\n import org.apache.commons.jxpath.JXPathTestCase;\n  * Tests JXPath with mixed model: beans, maps, DOM etc.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.8 $ $Date: 2004/02/29 14:17:45 $\n+ * @version $Revision: 1.9 $ $Date: 2004/04/04 22:06:36 $\n  */\n \n public class MixedModelTest extends JXPathTestCase {\n         super(name);\n     }\n \n+    public static void main(String[] args) {\n+        TestRunner.run(new MixedModelTest(\"testContainerWithCollection\"));\n+    }\n+    \n     /**\n      * Return the tests included in this test suite.\n      */\n--- /dev/null\n+++ b/src/test/org/apache/commons/jxpath/ri/model/container/ContainerModelTest.java\n+/*\n+ * Copyright 1999-2004 The Apache Software Foundation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.jxpath.ri.model.container;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+import org.apache.commons.jxpath.Container;\n+import org.apache.commons.jxpath.JXPathContext;\n+import org.apache.commons.jxpath.JXPathTestCase;\n+\n+/**\n+ * Tests JXPath with containers as root or value of a variable, property, etc.\n+ *\n+ * @author Dmitri Plotnikov\n+ * @version $Revision: 1.1 $ $Date: 2004/04/04 22:06:35 $\n+ */\n+\n+public class ContainerModelTest extends JXPathTestCase {\n+    private JXPathContext context;\n+\n+    /**\n+     * Construct a new instance of this test case.\n+     *\n+     * @param name Name of the test case\n+     */\n+    public ContainerModelTest(String name) {\n+        super(name);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+    \n+    /**\n+     * Return the tests included in this test suite.\n+     */\n+    public static Test suite() {\n+        return (new TestSuite(ContainerModelTest.class));\n+    }\n+\n+    \n+    private class ArrayContainer implements Container\n+    {\n+        private String[] array = new String[]{\"foo\", \"bar\"};\n+        public Object getValue() {\n+            return array;\n+        }\n+\n+        public void setValue(Object value) {\n+            throw new UnsupportedOperationException();\n+        }\n+    };\n+\n+    public class ListContainer implements Container\n+    {\n+        private List list;\n+\n+        public ListContainer() {\n+            list = new ArrayList();\n+            list.add(\"foo\");\n+            list.add(\"bar\");\n+        }\n+\n+        public Object getValue() {\n+            return list;\n+        }\n+\n+        public void setValue(Object value) {\n+            throw new UnsupportedOperationException();\n+        }\n+    }\n+\n+    public class Bean\n+    {\n+        private ListContainer container = new ListContainer();\n+\n+        public ListContainer getContainer() {\n+            return container;\n+        }\n+    }\n+        \n+    public void testContainerVariableWithCollection() {\n+        ArrayContainer container = new ArrayContainer();\n+        String[] array = (String[]) container.getValue();\n+        \n+        JXPathContext context = JXPathContext.newContext(null);\n+        context.getVariables().declareVariable(\"list\", container);\n+        \n+        assertXPathValueAndPointer(context, \"$list\", array, \"$list\");\n+        assertXPathValueAndPointer(context, \"$list[1]\", \"foo\", \"$list[1]\");\n+        assertXPathValueAndPointer(context, \"$list[2]\", \"bar\", \"$list[2]\");\n+        \n+        assertXPathSetValue(context, \"$list[1]\", \"baz\");\n+        assertEquals(\"Checking setValue(index)\", \"baz\", array[0]);\n+    }\n+    \n+    public void testContainerPropertyWithCollection() {\n+        Bean bean = new Bean();\n+        List list = (List) bean.getContainer().getValue();\n+        \n+        JXPathContext context = JXPathContext.newContext(bean);\n+        \n+        assertXPathValueAndPointer(context, \"/container\", \n+                list, \"/container\");\n+        assertXPathValueAndPointer(context, \"/container[1]\",\n+                list.get(0), \"/container[1]\");\n+        assertXPathValueAndPointer(context, \"/container[2]\",\n+                list.get(1), \"/container[2]\");\n+        \n+        assertXPathSetValue(context, \"/container[1]\", \"baz\");\n+        assertEquals(\"Checking setValue(index)\", \"baz\", list.get(0));\n+    }\n+    \n+    public void testContainerMapWithCollection() {\n+        ListContainer container = new ListContainer();\n+        List list = (List) container.getValue();\n+                \n+        Map map = new HashMap();\n+        map.put(\"container\", container);\n+        \n+        JXPathContext context = JXPathContext.newContext(map);\n+        \n+        assertXPathValueAndPointer(context, \"/container\", \n+                list, \"/.[@name='container']\");\n+        assertXPathValueAndPointer(context, \"/container[1]\",\n+                list.get(0), \"/.[@name='container'][1]\");\n+        assertXPathValueAndPointer(context, \"/container[2]\",\n+                list.get(1), \"/.[@name='container'][2]\");\n+        \n+        assertXPathSetValue(context, \"/container[1]\", \"baz\");\n+        assertEquals(\"Checking setValue(index)\", \"baz\", list.get(0));\n+    }\n+    \n+    public void testContainerRootWithCollection() {\n+        ArrayContainer container = new ArrayContainer();\n+        String[] array = (String[]) container.getValue();\n+        \n+        JXPathContext context = JXPathContext.newContext(container);\n+        context.getVariables().declareVariable(\"list\", container);\n+        \n+        assertXPathValueAndPointer(context, \"/\", array, \"/\");\n+        assertXPathValueAndPointer(context, \"/.[1]\", \"foo\", \"/.[1]\");\n+        assertXPathValueAndPointer(context, \"/.[2]\", \"bar\", \"/.[2]\");\n+        \n+        assertXPathSetValue(context, \"/.[1]\", \"baz\");\n+        assertEquals(\"Checking setValue(index)\", \"baz\", array[0]);    }\n+    \n+}", "timestamp": 1081116396, "metainfo": ""}