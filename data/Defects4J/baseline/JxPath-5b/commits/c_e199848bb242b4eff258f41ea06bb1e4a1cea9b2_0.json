{"sha": "e199848bb242b4eff258f41ea06bb1e4a1cea9b2", "log": "Updated the setValue method   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java,v 1.10 2002/10/13 02:59:02 dmitri Exp $\n- * $Revision: 1.10 $\n- * $Date: 2002/10/13 02:59:02 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java,v 1.11 2002/10/20 03:44:52 dmitri Exp $\n+ * $Revision: 1.11 $\n+ * $Date: 2002/10/20 03:44:52 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * A Pointer that points to a DOM node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.10 $ $Date: 2002/10/13 02:59:02 $\n+ * @version $Revision: 1.11 $ $Date: 2002/10/20 03:44:52 $\n  */\n public class DOMNodePointer extends NodePointer {\n     private Node node;\n     private String defaultNamespace;\n     private String id;\n \n-    public static final String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\";\n-    public static final String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\";\n+    public static final String XML_NAMESPACE_URI = \n+    \t\t\"http://www.w3.org/XML/1998/namespace\";\n+    public static final String XMLNS_NAMESPACE_URI = \n+    \t\t\"http://www.w3.org/2000/xmlns/\";\n \n     public DOMNodePointer(Node node, Locale locale){\n         super(null, locale);\n         return testNode(this, node, test);\n     }\n \n-    public static boolean testNode(NodePointer pointer, Node node, NodeTest test){\n+    public static boolean testNode(\n+    \t\tNodePointer pointer, Node node, NodeTest test)\n+    {\n         if (test == null){\n             return true;\n         }\n \n             QName testName = ((NodeNameTest)test).getNodeName();\n             String testLocalName = testName.getName();\n-            if (testLocalName.equals(\"*\") || testLocalName.equals(DOMNodePointer.getLocalName(node))){\n+            if (testLocalName.equals(\"*\") || \n+            \t\ttestLocalName.equals(DOMNodePointer.getLocalName(node))){\n                 String testPrefix = testName.getPrefix();\n                 String nodePrefix = DOMNodePointer.getPrefix(node);\n                 if (equalStrings(testPrefix, nodePrefix)){\n     }\n \n     /**\n-     * Sets text contents of the node to the specified value\n+     * Sets contents of the node to the specified value. If the value is\n+     * a String, the contents of the node are replaced with this text.\n+     * If the value is an Element or Document, the children of the\n+     * node are replaced with the children of the passed node.\n      */\n     public void setValue(Object value){\n-        String string = null;\n-        if (value != null){\n-            string = (String)TypeUtils.convert(value, String.class);\n-            if (string.equals(\"\")){\n-                string = null;\n-            }\n-        }\n-\n-        if (node.getNodeType() == Node.TEXT_NODE){\n-            if (string != null){\n+        if (node.getNodeType() == Node.TEXT_NODE ||\n+        \t\tnode.getNodeType() == Node.CDATA_SECTION_NODE){\n+            String string = (String)TypeUtils.convert(value, String.class);\n+            if (string != null && !string.equals(\"\")){\n                 node.setNodeValue(string);\n             }\n             else {\n         else {\n             NodeList children = node.getChildNodes();\n             int count = children.getLength();\n-            for (int i = count; --i >= 0;){\n-                Node child = children.item(i);\n-                if (child.getNodeType() == Node.TEXT_NODE ||\n-                        child.getNodeType() == Node.CDATA_SECTION_NODE){\n-                    node.removeChild(child);\n-                }\n-            }\n-            if (string != null){\n-                Node text = node.getOwnerDocument().createTextNode(string);\n-                node.appendChild(text);\n-            }\n-        }\n-    }\n-\n-    public NodePointer createChild(JXPathContext context, QName name, int index){\n+\t        for (int i = count; --i >= 0;){\n+\t            Node child = children.item(i);\n+\t            node.removeChild(child);\n+\t        }\n+            \n+        \tif (value instanceof Node){\n+        \t\tNode valueNode = (Node)value;\n+        \t\tif (valueNode instanceof Element ||\n+        \t\t\t\tvalueNode instanceof Document){\n+        \t\t\tchildren = valueNode.getChildNodes();\n+        \t\t\tfor (int i = 0; i < children.getLength(); i++){\n+        \t\t\t\tNode child = children.item(i);\n+        \t\t\t\tnode.appendChild(child.cloneNode(true));\n+        \t\t\t}\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tnode.appendChild(valueNode.cloneNode(true));\n+\t\t\t\t}        \t\n+        \t}\n+        \telse {\n+\t            String string = (String)TypeUtils.convert(value, String.class);\n+\t            if (string != null && !string.equals(\"\")){\n+\t            \tNode textNode = \n+\t            \t\t\tnode.getOwnerDocument().createTextNode(string);\n+\t                node.appendChild(textNode);\n+\t            }\n+        \t}\n+        }\n+    }\n+    \n+    public NodePointer createChild(JXPathContext context, \n+    \t\t\tQName name, int index)\n+    {\n         if (index == WHOLE_COLLECTION){\n             index = 0;\n         }\n-        if (!getAbstractFactory(context).createObject(context, this, node, name.toString(), index)){\n-            throw new JXPathException(\"Factory could not create a child node for path: \" +\n+        if (!getAbstractFactory(context).\n+                createObject(context, this, node, name.toString(), index)){\n+            throw new JXPathException(\n+                    \"Factory could not create a child node for path: \" +\n                     asPath() + \"/\" + name + \"[\" + (index+1) + \"]\");\n         }\n         NodeIterator it = childIterator(new NodeNameTest(name), false, null);\n         if (it == null || !it.setPosition(index + 1)){\n-            throw new JXPathException(\"Factory could not create a child node for path: \" +\n+            throw new JXPathException(\n+                    \"Factory could not create a child node for path: \" +\n                     asPath() + \"/\" + name + \"[\" + (index+1) + \"]\");\n         }\n         return it.getNodePointer();\n     }\n \n-    public NodePointer createChild(JXPathContext context, QName name, int index, Object value){\n+    public NodePointer createChild(JXPathContext context, \n+                QName name, int index, Object value)\n+    {\n         NodePointer ptr = createChild(context, name, index);\n         ptr.setValue(value);\n         return ptr;\n         if (prefix != null){\n             String ns = getNamespaceURI(prefix);\n             if (ns == null){\n-                throw new JXPathException(\"Unknown namespace prefix: \" + prefix);\n+                throw new JXPathException(\n+                \t\"Unknown namespace prefix: \" + prefix);\n             }\n             element.setAttributeNS(ns, name.toString(), \"\");\n         }\n                 // the parent's responsibility to produce the node test part\n                 // of the path\n                 if (parent instanceof DOMNodePointer){\n-                    buffer.append('/');\n+                    if (buffer.length() == 0 ||\n+                            buffer.charAt(buffer.length()-1) != '/'){\n+                    \tbuffer.append('/');\n+                    }\n                     buffer.append(getName());\n-                    buffer.append('[').append(getRelativePositionByName()).append(']');\n+                    buffer.append('[');\n+                    buffer.append(getRelativePositionByName()).append(']');\n                 }\n                 break;\n             case Node.TEXT_NODE:\n             case Node.CDATA_SECTION_NODE:\n                 buffer.append(\"/text()\");\n-                buffer.append('[').append(getRelativePositionOfTextNode()).append(']');\n+                buffer.append('[');\n+                buffer.append(getRelativePositionOfTextNode()).append(']');\n                 break;\n             case Node.PROCESSING_INSTRUCTION_NODE:\n                 String target = ((ProcessingInstruction)node).getTarget();\n-                buffer.append(\"/processing-instruction(\\'\").append(target).append(\"')\");\n-                buffer.append('[').append(getRelativePositionOfPI(target)).append(']');\n+                buffer.append(\"/processing-instruction(\\'\");\n+                buffer.append(target).append(\"')\");\n+                buffer.append('[');\n+                buffer.append(getRelativePositionOfPI(target)).append(']');\n                 break;\n             case Node.DOCUMENT_NODE:\n                 // That'll be empty\n     private String escape(String string){\n         int index = string.indexOf('\\'');\n         while (index != -1){\n-            string = string.substring(0, index) + \"&apos;\" + string.substring(index + 1);\n+            string = string.substring(0, index) + \n+            \t\"&apos;\" + string.substring(index + 1);\n             index = string.indexOf('\\'');\n         }\n         index = string.indexOf('\\\"');\n         while (index != -1){\n-            string = string.substring(0, index) + \"&quot;\" + string.substring(index + 1);\n+            string = string.substring(0, index) + \n+            \t\"&quot;\" + string.substring(index + 1);\n             index = string.indexOf('\\\"');\n         }\n         return string;\n         int count = 1;\n         Node n = node.getPreviousSibling();\n         while (n != null){\n-            if (n.getNodeType() == Node.TEXT_NODE || n.getNodeType() == Node.CDATA_SECTION_NODE){\n+            if (n.getNodeType() == Node.TEXT_NODE || \n+            \t\t\tn.getNodeType() == Node.CDATA_SECTION_NODE){\n                 count ++;\n             }\n             n = n.getPreviousSibling();\n     private AbstractFactory getAbstractFactory(JXPathContext context){\n         AbstractFactory factory = context.getFactory();\n         if (factory == null){\n-            throw new JXPathException(\"Factory is not set on the JXPathContext - cannot create path: \" + asPath());\n+            throw new JXPathException(\n+            \t\"Factory is not set on the JXPathContext - \" +\n+            \t\"cannot create path: \" + asPath());\n         }\n         return factory;\n     }\n \n-    public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2){\n+    public int compareChildNodePointers(\n+    \t\tNodePointer pointer1, NodePointer pointer2)\n+    {\n         Node node1 = (Node)pointer1.getBaseValue();\n         Node node2 = (Node)pointer2.getBaseValue();\n         if (node1 == node2){\n--- a/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java,v 1.2 2002/10/13 02:59:02 dmitri Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/10/13 02:59:02 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java,v 1.3 2002/10/20 03:44:51 dmitri Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/10/20 03:44:51 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n import org.jdom.Attribute;\n import org.jdom.CDATA;\n import org.jdom.Comment;\n+import org.jdom.Document;\n import org.jdom.Element;\n import org.jdom.Namespace;\n import org.jdom.ProcessingInstruction;\n  * A Pointer that points to a DOM node.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.2 $ $Date: 2002/10/13 02:59:02 $\n+ * @version $Revision: 1.3 $ $Date: 2002/10/20 03:44:51 $\n  */\n public class JDOMNodePointer extends NodePointer {\n     private Object node;\n     public String getNamespaceURI(){\n         if (node instanceof Element){\n             Element element = (Element)node;\n-            return element.getNamespaceURI();\n+            String ns = element.getNamespaceURI();\n+            if (ns != null && ns.equals(\"\")){\n+                ns = null;\n+            }\n+            return ns;\n         }\n         return null;\n     }\n         if (node instanceof Element){\n             Element element = (Element)node;\n             Namespace ns = element.getNamespace(prefix);\n-//            System.err.println(\"PREFIX: \" + prefix + \" NS: \" + ns);\n             if (ns == null){\n                 return null;\n             }\n         return node;\n     }\n \n+    public boolean isCollection(){\n+        return false;\n+    }\n+    \n+    public int getLength(){\n+        return 1;\n+    }    \n+\n+    public boolean isLeaf(){\n+        if (node instanceof Element){\n+            return ((Element)node).getContent().size() == 0;\n+        }\n+        else if (node instanceof Document){\n+            return ((Document)node).getContent().size() == 0;\n+        }\n+        return true;\n+    }\n \n     /**\n      * @see org.apache.commons.jxpath.ri.model.NodePointer#getName()\n     /**\n      * @see org.apache.commons.jxpath.Pointer#setValue(Object)\n      */\n+//        String string = null;\n+//        if (value != null){\n+//            string = (String)TypeUtils.convert(value, String.class);\n+//            if (string.equals(\"\")){\n+//                string = null;\n+//            }\n+//        }\n+//\n+//        if (node instanceof Text){\n+//            if (string != null){\n+//                ((Text)node).setText(string);\n+//            }\n+//            else {\n+//                nodeParent(node).removeContent((Text)node);\n+//            }\n+//        }\n+//        else {\n+//            Element element = (Element)node;\n+//            // First remove all text from the element\n+//            List content = new ArrayList(element.getContent());\n+//            for (int i = content.size(); --i >= 0;){\n+//                Object child = content.get(i);\n+//                if (child instanceof Text){\n+//                    element.removeContent((Text)node);\n+//                }\n+//                else if (child instanceof CDATA){\n+//                    element.removeContent((CDATA)node);\n+//                }\n+//            }\n+//            if (string != null){\n+//                element.addContent(new Text(string));\n+//            }\n+//        }\n+\n     public void setValue(Object value) {\n-        String string = null;\n-        if (value != null){\n-            string = (String)TypeUtils.convert(value, String.class);\n-            if (string.equals(\"\")){\n-                string = null;\n-            }\n-        }\n-\n         if (node instanceof Text){\n-            if (string != null){\n+            String string = (String)TypeUtils.convert(value, String.class);\n+            if (string != null && !string.equals(\"\")){\n                 ((Text)node).setText(string);\n             }\n             else {\n             }\n         }\n         else {\n-            Element element = (Element)node;\n-            // First remove all text from the element\n-            List content = new ArrayList(element.getContent());\n-            for (int i = content.size(); --i >= 0;){\n-                Object child = content.get(i);\n-                if (child instanceof Text){\n-                    element.removeContent((Text)node);\n-                }\n-                else if (child instanceof CDATA){\n-                    element.removeContent((CDATA)node);\n-                }\n-            }\n-            if (string != null){\n-                element.addContent(new Text(string));\n-            }\n-        }\n-    }\n-\n+        \tElement element = (Element)node;\n+        \telement.getContent().clear();\n+        \t            \n+        \tif (value instanceof Element){\n+        \t\tElement valueElement = (Element)value;\n+        \t\taddContent(valueElement.getContent());\n+        \t}\n+        \telse if (value instanceof Document){\n+        \t\tDocument valueDocument = (Document)value;        \t\t\n+        \t\taddContent(valueDocument.getContent());\n+        \t}\n+        \telse if (value instanceof Text ||\n+        \t\t\t value instanceof CDATA){\n+        \t\tString string = ((Text)value).getText();\n+        \t\telement.addContent(new Text(string));\n+\t\t\t}\n+\t\t\telse if (value instanceof ProcessingInstruction){\n+\t\t\t\tProcessingInstruction pi = (ProcessingInstruction)\n+\t\t\t\t\t\t((ProcessingInstruction)value).clone();\n+\t\t\t\telement.addContent(pi);\n+\t\t\t}\n+\t\t\telse if (value instanceof Comment){\n+\t\t\t\tComment comment = (Comment)((Comment)value).clone();\n+\t\t\t\telement.addContent(comment);\n+\t\t\t}\n+        \telse {\n+\t            String string = (String)TypeUtils.convert(value, String.class);\n+\t            if (string != null && !string.equals(\"\")){\n+\t                element.addContent(new Text(string));\n+\t            }\n+        \t}\n+        }\n+    }\n+    \n+    private void addContent(List content){\n+    \tElement element = (Element)node;\n+    \tint count = content.size();\n+    \t\n+    \tfor (int i = 0; i < count; i++){\n+    \t\tObject child = content.get(i);\n+    \t\tif (child instanceof Element){\n+    \t\t\tchild = ((Element)child).clone();\n+    \t\t\telement.addContent((Element)child);\n+    \t\t}\n+\t        else if (child instanceof Text){\n+    \t\t\tchild = ((Text)child).clone();\n+    \t\t\telement.addContent((Text)child);\n+\t        }\n+\t        else if (node instanceof CDATA){\n+    \t\t\tchild = ((CDATA)child).clone();\n+    \t\t\telement.addContent((CDATA)child);\n+\t        }\n+\t        else if (node instanceof ProcessingInstruction){\n+    \t\t\tchild = ((ProcessingInstruction)child).clone();\n+    \t\t\telement.addContent((ProcessingInstruction)child);\n+\t        }\n+\t        else if (node instanceof Comment){\n+    \t\t\tchild = ((Comment)child).clone();\n+    \t\t\telement.addContent((Comment)child);\n+\t        }\n+    \t}\n+    }\n+    \n     public boolean testNode(NodeTest test){\n         return testNode(this, node, test);\n     }\n             // the parent's responsibility to produce the node test part\n             // of the path\n             if (parent instanceof JDOMNodePointer){\n-                buffer.append('/');\n+                if (buffer.length() == 0 ||\n+                        buffer.charAt(buffer.length()-1) != '/'){\n+                \tbuffer.append('/');\n+                }\n                 buffer.append(getName());\n                 buffer.append('[');\n                 buffer.append(getRelativePositionByName());", "timestamp": 1035085492, "metainfo": ""}