{"sha": "16b91ad2b9f5f524b2b07ba4515c65479999f7ee", "log": "its now possible to specify the number of argument values an option can have, refactored parsers argument value handling, refactored argument handling in Option, added getOptions method on CommandLine to return an array of the processed Options   ", "commit": "\n--- a/src/java/org/apache/commons/cli/CommandLine.java\n+++ b/src/java/org/apache/commons/cli/CommandLine.java\n \n package org.apache.commons.cli;\n \n+import java.util.Collection;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n     /** the unrecognised options/arguments */\n     private List args    = new LinkedList();\n \n-    /** the recognised options/arguments */\n+    /** the recognised options */\n     private Map  options = new HashMap();\n+\n+    /** the processed options */\n+    private Option[] optionsArray;\n \n     /**\n      * <p>Creates a command line.</p>\n         return options.values().iterator();\n     }\n \n+    /**\n+     * <p>Returns an array of the processed {@link Option}s.</p>\n+     *\n+     * @return an array of the processed {@link Option}s.\n+     */\n+    public Option[] getOptions( ) {\n+        Collection processed = options.values();\n+\n+        // reinitialise array\n+        optionsArray = new Option[ processed.size() ];\n+\n+        // return the array\n+        return (Option[]) processed.toArray( optionsArray );\n+    }\n+\n }\n--- a/src/java/org/apache/commons/cli/GnuParser.java\n+++ b/src/java/org/apache/commons/cli/GnuParser.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/GnuParser.java,v 1.2 2002/07/04 22:32:12 jkeyes Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/07/04 22:32:12 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/GnuParser.java,v 1.3 2002/08/03 23:45:09 jkeyes Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/08/03 23:45:09 $\n  *\n  * ====================================================================\n  *\n \n         while ( iter.hasNext() ) {\n             token = (String) iter.next();\n-\n             if ( token.equals(\"--\") ) {\n                 eatTheRest = true;\n             }\n      * @param opt the specified option\n      * @param iter the iterator over the command line tokens\n      */\n-    public void processMultipleArgs( Option opt, ListIterator iter ) {\n+    public void processArgs( Option opt, ListIterator iter ) \n+    throws ParseException \n+    {\n+        if( !iter.hasNext() ) {\n+            throw new MissingArgumentException( \"no argument for:\" + opt.getOpt() );\n+        }\n         // loop until an option is found\n         while( iter.hasNext() ) {\n             String var = (String)iter.next();\n \n             // its an option\n-            if( var.startsWith( \"-\" ) ) {\n+            if( !var.equals( \"-\" ) && var.startsWith( \"-\" ) ) {\n                 // set the iterator pointer back a position\n                 iter.previous();\n                 break;\n             }\n             // its a value\n             else {\n-                opt.addValue( var );\n+                if( !opt.addValue( var ) ) {\n+                    iter.previous();\n+                    break;\n+                }\n             }\n         }\n     }\n         if( specialOption != null && opt == null) {\n             opt = specialOption;\n             value = arg.substring( 2 );\n+            opt.addValue( value );\n         }\n \n         // if there is no option throw an UnrecognisedOptionException\n         }\n \n         // if the option takes an argument value\n-        if ( opt.hasArg() ) {\n-            try {\n-                value = (value != null) ? value : (String)iter.next(); \n-            }\n-            catch( java.util.NoSuchElementException exp ) {\n-                throw new MissingArgumentException( \"no argument for:\" + arg );\n-            }\n-            opt.addValue( value );\n-            if  (opt.hasMultipleArgs() ) {\n-                processMultipleArgs( opt, iter );\n-            }\n+        if ( opt.hasArg() ) { \n+            processArgs( opt, iter );\n         }\n \n         // set the option on the command line\n--- a/src/java/org/apache/commons/cli/Option.java\n+++ b/src/java/org/apache/commons/cli/Option.java\n     /** required specifies whether this option is required to be present */\n     private boolean    required     = false;\n \n-    /** multipleArgs specifies whether this option has multiple argument values */\n-    private boolean    multipleArgs = false;   \n+    /** \n+     * numberOfArgs specifies the number of argument values this option \n+     * can have \n+     */\n+    private int    numberOfArgs = UNINITIALIZED;   \n+\n+    /** number of arguments constants */\n+    public final static int UNINITIALIZED = -1;\n+    public final static int UNLIMITED_VALUES = -2;\n \n     /** the type of this Option */\n     private Object     type         = null;   \n     /** ?? **/\n     private ArrayList  values       = new ArrayList();\n     \n+    /** option char (only valid for single character options) */\n+    private char id;\n \n     private void validateOption( String opt ) \n     throws IllegalArgumentException\n                 throw new IllegalArgumentException( \"illegal option value '\" \n                                                     + opt.charAt( 0 ) + \"'\" );\n             }\n+            id = opt.charAt( 0 );\n         }\n         else {\n             char[] chars = opt.toCharArray();\n         }\n         return true;\n     }\n+\n+    public int getId( ) {\n+        return id;\n+    }\n+\n+    /**\n+     * Creates an Option using the specified parameters.\n+     *\n+     * @param opt short representation of the option\n+     * @param hasArg specifies whether the Option takes an argument or not\n+     * @param description describes the function of the option\n+     */\n+    public Option(String opt, String description) \n+    throws IllegalArgumentException\n+    {\n+        this(opt, null, false, description);\n+    }\n+\n     /**\n      * Creates an Option using the specified parameters.\n      *\n \n         this.opt          = opt;\n         this.longOpt      = longOpt;\n+\n+        if( hasArg ) {\n+            this.numberOfArgs = 1;\n+        }\n         this.hasArg       = hasArg;\n         this.description  = description;\n     }\n      * @return boolean flag indicating if an argument is required\n      */\n     public boolean hasArg() {\n-        return this.hasArg;\n+        return this.numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\n     }\n     \n     /** <p>Retrieve the self-documenting description of this Option</p>\n          this.required = required;\n      }\n \n-     /** <p>Query to see if this Option can take multiple values</p>\n+     /** <p>Query to see if this Option can take many values</p>\n       *\n       * @return boolean flag indicating if multiple values are allowed\n       */\n-     public boolean hasMultipleArgs() {\n-         return this.multipleArgs;\n-     }\n-\n-     public void setMultipleArgs( boolean multipleArgs ) {\n-         this.multipleArgs = multipleArgs;\n+     public boolean hasArgs() {\n+         return ( this.numberOfArgs > 1 || this.numberOfArgs == UNLIMITED_VALUES );\n+     }\n+\n+     /** <p>Sets the number of argument values this Option can take.</p>\n+      *\n+      * @param num the number of argument values\n+      */\n+     public void setArgs( int num ) {\n+         this.numberOfArgs = num;\n+     }\n+\n+     /** <p>Returns the number of argument values this Option can take.</p>\n+      *\n+      * @return num the number of argument values\n+      */\n+     public int getArgs( ) {\n+         return this.numberOfArgs;\n      }\n \n     /** <p>Dump state, suitable for debugging.</p>\n      * \n      * @param value is a/the value of this Option\n      */\n-    public void addValue( String value ) {\n-        this.values.add( value );\n+    public boolean addValue( String value ) {\n+        switch( numberOfArgs ) {\n+            case UNINITIALIZED:\n+                return false;\n+            case UNLIMITED_VALUES:\n+                this.values.add( value );\n+                return true;\n+            default:\n+                if( values.size() > numberOfArgs-1 ) {\n+                    return false;\n+                }\n+                this.values.add( value );\n+                return true;\n+        }\n     }\n \n     /**\n--- a/src/java/org/apache/commons/cli/OptionBuilder.java\n+++ b/src/java/org/apache/commons/cli/OptionBuilder.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/OptionBuilder.java,v 1.2 2002/07/30 23:06:21 jkeyes Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/07/30 23:06:21 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/OptionBuilder.java,v 1.3 2002/08/03 23:45:09 jkeyes Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/08/03 23:45:09 $\n  *\n  * ====================================================================\n  *\n     private static String longopt;\n     /** option description */\n     private static String description;\n-    /** has an argument? */\n-    private static boolean arg;\n     /** is required? */\n     private static boolean required;\n-    /** has multiple arguments */\n-    private static boolean multipleArgs;\n+    /** the number of arguments */\n+    private static int numberOfArgs = Option.UNINITIALIZED;\n     /** option type */\n     private static Object type;\n \n         description = null;\n         longopt = null;\n         type = null;\n-        arg = false;\n         required = false;\n-        multipleArgs = false;\n+        numberOfArgs = Option.UNINITIALIZED;\n     }\n \n     /**\n      * @return the OptionBuilder instance\n      */\n     public static OptionBuilder hasArg( ) {\n-        instance.arg = true;\n+        instance.numberOfArgs = 1;\n         return instance;\n     }\n \n      * @return the OptionBuilder instance\n      */\n     public static OptionBuilder hasArg( boolean hasArg ) {\n-        instance.arg = hasArg;\n+        instance.numberOfArgs = ( hasArg == true ) ? 1 : Option.UNINITIALIZED;\n         return instance;\n     }\n \n     }\n \n     /**\n-     * <p>The next Option created can have multiple argument values.</p>\n-     *\n-     * @return the OptionBuilder instance\n-     */\n-    public static OptionBuilder hasMultipleArgs( ) {\n-        instance.multipleArgs = true;\n+     * <p>The next Option created can have unlimited argument values.</p>\n+     *\n+     * @return the OptionBuilder instance\n+     */\n+    public static OptionBuilder hasArgs( ) {\n+        instance.numberOfArgs = Option.UNLIMITED_VALUES;\n+        return instance;\n+    }\n+\n+    /**\n+     * <p>The next Option created can have <code>num</code> \n+     * argument values.</p>\n+     *\n+     * @param num the number of args that the option can have\n+     * @return the OptionBuilder instance\n+     */\n+    public static OptionBuilder hasArgs( int num ) {\n+        instance.numberOfArgs = num;\n         return instance;\n     }\n \n     throws IllegalArgumentException\n     {\n         // create the option\n-        Option option = new Option( opt, arg, description );\n+        Option option = new Option( opt, description );\n \n         // set the option properties\n         option.setLongOpt( longopt );\n         option.setRequired( required );\n-        option.setMultipleArgs( multipleArgs );\n+        option.setArgs( numberOfArgs );\n         option.setType( type );\n \n         // reset the OptionBuilder properties\n--- a/src/java/org/apache/commons/cli/PosixParser.java\n+++ b/src/java/org/apache/commons/cli/PosixParser.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/PosixParser.java,v 1.3 2002/07/04 22:32:12 jkeyes Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/07/04 22:32:12 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/PosixParser.java,v 1.4 2002/08/03 23:45:09 jkeyes Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/08/03 23:45:09 $\n  *\n  * ====================================================================\n  *\n         \n         // process each command line token\n         while ( iter.hasNext() ) {\n+\n             // get the next command line token\n             token = (String) iter.next();\n             \n                                 // add the argument value\n                                 opt.addValue( token.substring(i+1) );\n \n-                                // if the option takes multiple values\n-                                if  (opt.hasMultipleArgs() ) {\n-                                    processMultipleArgs( opt, iter );\n-                                }\n                                 // set the option \n                                 cmd.setOpt( opt );\n \n \n         // if the option takes an argument value\n         if ( opt.hasArg() ) {\n-            if  (opt.hasMultipleArgs() ) {\n-                processMultipleArgs( opt, iter );\n-            }\n-            else {\n-                opt.addValue( (String)iter.next() );\n-            }\n+            processArgs( opt, iter );\n         }\n \n         // set the option on the command line\n      * @param opt the specified option\n      * @param iter the iterator over the command line tokens\n      */\n-    public void processMultipleArgs( Option opt, ListIterator iter ) {\n+    public void processArgs( Option opt, ListIterator iter ) \n+    throws ParseException \n+    {\n+        if( !iter.hasNext() ) {\n+            throw new MissingArgumentException( \"no argument for:\" + opt.getOpt() );\n+        }\n         // loop until an option is found\n         while( iter.hasNext() ) {\n             String var = (String)iter.next();\n \n             // its an option\n-            if( var.startsWith( \"-\" ) ) {\n+            if( !var.equals( \"-\" ) && var.startsWith( \"-\" ) ) {\n                 // set the iterator pointer back a position\n                 iter.previous();\n                 break;\n             }\n             // its a value\n             else {\n-                opt.addValue( var );\n+                if( !opt.addValue( var ) ) {\n+                    iter.previous();\n+                    break;\n+                }\n             }\n         }\n     }\n--- a/src/test/org/apache/commons/cli/ApplicationTest.java\n+++ b/src/test/org/apache/commons/cli/ApplicationTest.java\n         options.addOption( \"buildfile\", true, \"use given buildfile\" );\n         options.addOption( OptionBuilder.withDescription( \"use value for given property\" )\n                                         .hasArg()\n-                                        .hasMultipleArgs()\n+                                        .hasArgs()\n                                         .create( 'D' ) );\n                            //, null, true, , false, true );\n         options.addOption( \"find\", true, \"search for buildfile towards the root of the filesystem and use it\" );\n--- a/src/test/org/apache/commons/cli/OptionBuilderTest.java\n+++ b/src/test/org/apache/commons/cli/OptionBuilderTest.java\n         Option simple = OptionBuilder.withLongOpt( \"simple option\")\n                                      .hasArg( )\n                                      .isRequired( )\n-                                     .hasMultipleArgs( )\n+                                     .hasArgs( )\n                                      .withType( new Float( 10 ) )\n                                      .withDescription( \"this is a simple option\" )\n                                      .create( 's' );\n         assertEquals( simple.getType().getClass(), Float.class );\n         assertTrue( simple.hasArg() );\n         assertTrue( simple.isRequired() );\n-        assertTrue( simple.hasMultipleArgs() );\n+        assertTrue( simple.hasArgs() );\n     }\n \n     public void testTwoCompleteOptions( ) {\n         Option simple = OptionBuilder.withLongOpt( \"simple option\")\n                                      .hasArg( )\n                                      .isRequired( )\n-                                     .hasMultipleArgs( )\n+                                     .hasArgs( )\n                                      .withType( new Float( 10 ) )\n                                      .withDescription( \"this is a simple option\" )\n                                      .create( 's' );\n         assertEquals( simple.getType().getClass(), Float.class );\n         assertTrue( simple.hasArg() );\n         assertTrue( simple.isRequired() );\n-        assertTrue( simple.hasMultipleArgs() );\n+        assertTrue( simple.hasArgs() );\n \n         simple = OptionBuilder.withLongOpt( \"dimple option\")\n                               .hasArg( )\n         assertNull( simple.getType() );\n         assertTrue( simple.hasArg() );\n         assertTrue( !simple.isRequired() );\n-        assertTrue( !simple.hasMultipleArgs() );\n+        assertTrue( !simple.hasArgs() );\n     }\n \n     public void testBaseOptionCharOpt() {\n         }\n     }\n \n+    public void testOptionArgNumbers() {\n+        Option opt = OptionBuilder.withDescription( \"option description\" )\n+                                  .hasArgs( 2 )\n+                                  .create( 'o' );\n+        assertEquals( 2, opt.getArgs() );\n+    }\n+\n     public void testIllegalOptions() {\n         // bad single character option\n         try {\n--- a/src/test/org/apache/commons/cli/ParseTest.java\n+++ b/src/test/org/apache/commons/cli/ParseTest.java\n \n     public void setUp()\n     {\n-        System.setProperty( \"org.apache.commons.cli.parser\",\n-                            \"org.apache.commons.cli.PosixParser\");\n-\n         _options = new Options()\n             .addOption(\"a\",\n                        \"enable-a\",\n--- a/src/test/org/apache/commons/cli/ValuesTest.java\n+++ b/src/test/org/apache/commons/cli/ValuesTest.java\n \n package org.apache.commons.cli;\n \n+import java.util.Arrays;\n+\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n public class ValuesTest extends TestCase\n {\n+    /** CommandLine instance */\n+    private CommandLine _cmdline = null;\n \n     public static Test suite() { \n-        return new TestSuite(ValuesTest.class); \n-        /*\n-        TestSuite suite = new TestSuite();\n-\n-        suite.addTest( new ValueTest(\"testLongNoArg\") );\n-\n-        return suite;\n-        */\n+        return new TestSuite( ValuesTest.class );\n     }\n \n-    private CommandLine _cl = null;\n-\n-\n-    public ValuesTest(String name)\n+    public ValuesTest( String name )\n     {\n-        super(name);\n+        super( name );\n     }\n \n     public void setUp()\n     {\n         Options opts = new Options();\n+\n         opts.addOption(\"a\",\n                        false,\n                        \"toggle -a\");\n                        \"set -d\");\n         \n         opts.addOption( OptionBuilder.withLongOpt( \"e\" )\n-                                     .hasArg()\n-                                     .hasMultipleArgs()\n+                                     .hasArgs()\n                                      .withDescription( \"set -e \")\n                                      .create( 'e' ) );\n \n                        \"f\",\n                        false,\n                        \"jk\");\n+        \n+        opts.addOption( OptionBuilder.withLongOpt( \"g\" )\n+                        .hasArgs( 2 )\n+                        .withDescription( \"set -g\")\n+                        .create( 'g' ) );\n \n+        opts.addOption( OptionBuilder.withLongOpt( \"h\" )\n+                        .hasArgs( 2 )\n+                        .withDescription( \"set -h\")\n+                        .create( 'h' ) );\n+\n+        opts.addOption( OptionBuilder.withLongOpt( \"i\" )\n+                        .withDescription( \"set -i\")\n+                        .create( 'i' ) );\n+        \n         String[] args = new String[] { \"-a\",\n                                        \"-b\", \"foo\",\n                                        \"--c\",\n                                        \"--d\", \"bar\",\n                                        \"-e\", \"one\", \"two\",\n                                        \"-f\",\n-                                       \"arg1\", \"arg2\" };\n+                                       \"arg1\", \"arg2\",\n+                                       \"-g\", \"val1\", \"val2\" , \"arg3\",\n+                                       \"-h\", \"val1\", \"-i\",\n+                                       \"-h\", \"val2\" };\n \n         CommandLineParser parser = CommandLineParserFactory.newParser();\n \n         try\n         {\n-            _cl = parser.parse(opts,args);\n+            _cmdline = parser.parse(opts,args);\n         }\n         catch (ParseException e)\n         {\n \n     public void testShortArgs()\n     {\n-        assertTrue( _cl.hasOption(\"a\") );\n-        assertTrue( _cl.hasOption(\"c\") );\n+        assertTrue( _cmdline.hasOption(\"a\") );\n+        assertTrue( _cmdline.hasOption(\"c\") );\n \n-        assertNull( _cl.getOptionValues(\"a\") );\n-        assertNull( _cl.getOptionValues(\"c\") );\n+        assertNull( _cmdline.getOptionValues(\"a\") );\n+        assertNull( _cmdline.getOptionValues(\"c\") );\n     }\n \n     public void testShortArgsWithValue()\n     {\n-        assertTrue( _cl.hasOption(\"b\") );\n-        assertTrue( _cl.getOptionValue(\"b\").equals(\"foo\"));\n-        assertTrue( _cl.getOptionValues(\"b\").length == 1);\n+        assertTrue( _cmdline.hasOption(\"b\") );\n+        assertTrue( _cmdline.getOptionValue(\"b\").equals(\"foo\"));\n+        assertTrue( _cmdline.getOptionValues(\"b\").length == 1);\n \n-        assertTrue( _cl.hasOption(\"d\") );\n-        assertTrue( _cl.getOptionValue(\"d\").equals(\"bar\"));\n-        assertTrue( _cl.getOptionValues(\"d\").length == 1);\n+        assertTrue( _cmdline.hasOption(\"d\") );\n+        assertTrue( _cmdline.getOptionValue(\"d\").equals(\"bar\"));\n+        assertTrue( _cmdline.getOptionValues(\"d\").length == 1);\n     }\n \n     public void testMultipleArgValues()\n     {\n-        String[] result = _cl.getOptionValues(\"e\");\n+        String[] result = _cmdline.getOptionValues(\"e\");\n         String[] values = new String[] { \"one\", \"two\" };\n-        assertTrue( _cl.hasOption(\"e\") );\n-        assertTrue( _cl.getOptionValues(\"e\").length == 2);\n-        assertTrue( java.util.Arrays.equals( values, _cl.getOptionValues(\"e\") ) );\n+        assertTrue( _cmdline.hasOption(\"e\") );\n+        assertTrue( _cmdline.getOptionValues(\"e\").length == 2);\n+        assertTrue( Arrays.equals( values, _cmdline.getOptionValues(\"e\") ) );\n+    }\n+\n+    public void testTwoArgValues()\n+    {\n+        String[] result = _cmdline.getOptionValues(\"g\");\n+        String[] values = new String[] { \"val1\", \"val2\" };\n+        assertTrue( _cmdline.hasOption(\"g\") );\n+        assertTrue( _cmdline.getOptionValues(\"g\").length == 2);\n+        assertTrue( Arrays.equals( values, _cmdline.getOptionValues(\"g\") ) );\n+    }\n+\n+    public void testComplexValues()\n+    {\n+        String[] result = _cmdline.getOptionValues(\"h\");\n+        String[] values = new String[] { \"val1\", \"val2\" };\n+        assertTrue( _cmdline.hasOption(\"i\") );\n+        assertTrue( _cmdline.hasOption(\"h\") );\n+        assertTrue( _cmdline.getOptionValues(\"h\").length == 2);\n+        assertTrue( Arrays.equals( values, _cmdline.getOptionValues(\"h\") ) );\n     }\n \n     public void testExtraArgs()\n     {\n-        String[] args = new String[] { \"arg1\", \"arg2\" };\n-        assertTrue( _cl.getArgs().length == 2);\n-        assertTrue( java.util.Arrays.equals( args, _cl.getArgs() ) );\n+        String[] args = new String[] { \"arg1\", \"arg2\", \"arg3\" };\n+        assertTrue( _cmdline.getArgs().length == 3 );\n+        assertTrue( Arrays.equals( args, _cmdline.getArgs() ) );\n     }\n }", "timestamp": 1028418309, "metainfo": ""}