{"sha": "a8a8ec06a85a1090d560dc6cf236663da580863e", "log": "Lots of minor refactoring and tidying to avoid compiler warnings   ", "commit": "\n--- a/src/java/org/apache/commons/cli/CommandLine.java\n+++ b/src/java/org/apache/commons/cli/CommandLine.java\n      */\n     CommandLine()\n     {\n+        // nothing to do\n     }\n \n     /** \n      */\n     public String[] getOptionValues(String opt)\n     {\n-        List values = new java.util.ArrayList();\n-\n         opt = Util.stripLeadingHyphens(opt);\n \n         String key = opt;\n--- a/src/java/org/apache/commons/cli/HelpFormatter.java\n+++ b/src/java/org/apache/commons/cli/HelpFormatter.java\n \n             return sb;\n         }\n-        else\n-        {\n-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n-        }\n+        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n \n         // all following lines must be padded with nextLineTabStop space \n         // characters\n         {\n             return pos;\n         }\n-        else\n-        {\n-            // must look for the first whitespace chearacter after startPos \n-            // + width\n-            pos = startPos + width;\n-\n-            while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')\n-                   && (c != '\\n') && (c != '\\r'))\n-            {\n-                ++pos;\n-            }\n-\n-            return (pos == text.length())        ? (-1) : pos;\n-        }\n+        \n+        // must look for the first whitespace chearacter after startPos \n+        // + width\n+        pos = startPos + width;\n+\n+        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')\n+               && (c != '\\n') && (c != '\\r'))\n+        {\n+            ++pos;\n+        }\n+\n+        return (pos == text.length())        ? (-1) : pos;\n     }\n \n     /**\n--- a/src/java/org/apache/commons/cli/OptionBuilder.java\n+++ b/src/java/org/apache/commons/cli/OptionBuilder.java\n      */\n     private OptionBuilder()\n     {\n+        // hide the constructor\n     }\n \n     /**\n     /**\n      * The next Option created will have the following long option value.\n      *\n-     * @param longopt the long option value\n-     * @return the OptionBuilder instance\n-     */\n-    public static OptionBuilder withLongOpt(String longopt)\n-    {\n-        instance.longopt = longopt;\n+     * @param newLongopt the long option value\n+     * @return the OptionBuilder instance\n+     */\n+    public static OptionBuilder withLongOpt(String newLongopt)\n+    {\n+        OptionBuilder.longopt = newLongopt;\n \n         return instance;\n     }\n      */\n     public static OptionBuilder hasArg()\n     {\n-        instance.numberOfArgs = 1;\n+        OptionBuilder.numberOfArgs = 1;\n \n         return instance;\n     }\n      */\n     public static OptionBuilder hasArg(boolean hasArg)\n     {\n-        instance.numberOfArgs = (hasArg == true) ? 1 : Option.UNINITIALIZED;\n+        OptionBuilder.numberOfArgs = (hasArg == true) ? 1 : Option.UNINITIALIZED;\n \n         return instance;\n     }\n      */\n     public static OptionBuilder withArgName(String name)\n     {\n-        instance.argName = name;\n+        OptionBuilder.argName = name;\n \n         return instance;\n     }\n      */\n     public static OptionBuilder isRequired()\n     {\n-        instance.required = true;\n+        OptionBuilder.required = true;\n \n         return instance;\n     }\n      */\n     public static OptionBuilder withValueSeparator(char sep)\n     {\n-        instance.valuesep = sep;\n+        OptionBuilder.valuesep = sep;\n \n         return instance;\n     }\n      */\n     public static OptionBuilder withValueSeparator()\n     {\n-        instance.valuesep = '=';\n+        OptionBuilder.valuesep = '=';\n \n         return instance;\n     }\n      * The next Option created will be required if <code>required</code>\n      * is true.\n      *\n-     * @param required if true then the Option is required\n-     * @return the OptionBuilder instance\n-     */\n-    public static OptionBuilder isRequired(boolean required)\n-    {\n-        instance.required = required;\n+     * @param newRequired if true then the Option is required\n+     * @return the OptionBuilder instance\n+     */\n+    public static OptionBuilder isRequired(boolean newRequired)\n+    {\n+        OptionBuilder.required = newRequired;\n \n         return instance;\n     }\n      */\n     public static OptionBuilder hasArgs()\n     {\n-        instance.numberOfArgs = Option.UNLIMITED_VALUES;\n+        OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES;\n \n         return instance;\n     }\n      */\n     public static OptionBuilder hasArgs(int num)\n     {\n-        instance.numberOfArgs = num;\n+        OptionBuilder.numberOfArgs = num;\n \n         return instance;\n     }\n      */\n     public static OptionBuilder hasOptionalArg()\n     {\n-        instance.numberOfArgs = 1;\n-        instance.optionalArg = true;\n+        OptionBuilder.numberOfArgs = 1;\n+        OptionBuilder.optionalArg = true;\n \n         return instance;\n     }\n      */\n     public static OptionBuilder hasOptionalArgs()\n     {\n-        instance.numberOfArgs = Option.UNLIMITED_VALUES;\n-        instance.optionalArg = true;\n+        OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES;\n+        OptionBuilder.optionalArg = true;\n \n         return instance;\n     }\n      */\n     public static OptionBuilder hasOptionalArgs(int numArgs)\n     {\n-        instance.numberOfArgs = numArgs;\n-        instance.optionalArg = true;\n+        OptionBuilder.numberOfArgs = numArgs;\n+        OptionBuilder.optionalArg = true;\n \n         return instance;\n     }\n      * The next Option created will have a value that will be an instance \n      * of <code>type</code>.\n      *\n-     * @param type the type of the Options argument value\n-     * @return the OptionBuilder instance\n-     */\n-    public static OptionBuilder withType(Object type)\n-    {\n-        instance.type = type;\n+     * @param newType the type of the Options argument value\n+     * @return the OptionBuilder instance\n+     */\n+    public static OptionBuilder withType(Object newType)\n+    {\n+        OptionBuilder.type = newType;\n \n         return instance;\n     }\n     /**\n      * The next Option created will have the specified description\n      *\n-     * @param description a description of the Option's purpose\n-     * @return the OptionBuilder instance\n-     */\n-    public static OptionBuilder withDescription(String description)\n-    {\n-        instance.description = description;\n+     * @param newDescription a description of the Option's purpose\n+     * @return the OptionBuilder instance\n+     */\n+    public static OptionBuilder withDescription(String newDescription)\n+    {\n+        OptionBuilder.description = newDescription;\n \n         return instance;\n     }\n \n \n         // reset the OptionBuilder properties\n-        instance.reset();\n+        OptionBuilder.reset();\n \n         // return the Option instance\n         return option;\n--- a/src/java/org/apache/commons/cli/Options.java\n+++ b/src/java/org/apache/commons/cli/Options.java\n      */\n     public Options()\n     {\n+        // nothing to do\n     }\n \n     /**\n--- a/src/java/org/apache/commons/cli/Parser.java\n+++ b/src/java/org/apache/commons/cli/Parser.java\n             if (options.hasOption(str) && str.startsWith(\"-\"))\n             {\n                 iter.previous();\n-\n                 break;\n             }\n \n             // found a value\n-            else\n-            {\n-\n-                try\n-                {\n-                    opt.addValue( Util.stripLeadingAndTrailingQuotes(str) );\n-                }\n-                catch (RuntimeException exp)\n-                {\n-                    iter.previous();\n-\n-                    break;\n-                }\n+            try\n+            {\n+                opt.addValue( Util.stripLeadingAndTrailingQuotes(str) );\n+            }\n+            catch (RuntimeException exp)\n+            {\n+                iter.previous();\n+                break;\n             }\n         }\n \n     private void processOption(String arg, ListIterator iter)\n         throws ParseException\n     {\n-        // get the option represented by arg\n-        Option opt = null;\n-\n         boolean hasOption = options.hasOption(arg);\n \n         // if there is no option throw an UnrecognisedOptionException\n             throw new UnrecognizedOptionException(\"Unrecognized option: \" \n                                                   + arg);\n         }\n-        else\n-        {\n-            opt = (Option) options.getOption(arg);\n-        }\n+        \n+        // get the option represented by arg\n+        final Option opt = options.getOption(arg);\n \n         // if the option is a required option remove the option from\n         // the requiredOptions list\n         // option of the group\n         if (options.getOptionGroup(opt) != null)\n         {\n-            OptionGroup group = (OptionGroup) options.getOptionGroup(opt);\n+            OptionGroup group = options.getOptionGroup(opt);\n \n             if (group.isRequired())\n             {\n--- a/src/java/org/apache/commons/cli/PatternOptionBuilder.java\n+++ b/src/java/org/apache/commons/cli/PatternOptionBuilder.java\n             {\n                 if (opt != ' ')\n                 {\n+                    OptionBuilder.hasArg(type != null);\n+                    OptionBuilder.isRequired(required);\n+                    OptionBuilder.withType(type);\n+                    \n                     // we have a previous one to deal with\n-                    options.addOption(\n-                            OptionBuilder.hasArg(type != null)\n-                                         .isRequired(required).withType(type)\n-                                         .create(opt));\n+                    options.addOption(OptionBuilder.create(opt));\n                     required = false;\n                     type = null;\n                     opt = ' ';\n \n         if (opt != ' ')\n         {\n+            OptionBuilder.hasArg(type != null);\n+            OptionBuilder.isRequired(required);\n+            OptionBuilder.withType(type);\n+            \n             // we have a final one to deal with\n-            options.addOption(\n-                    OptionBuilder.hasArg(type != null).isRequired(required)\n-                                 .withType(type).create(opt));\n+            options.addOption(OptionBuilder.create(opt));\n         }\n \n         return options;\n--- a/src/java/org/apache/commons/cli2/DisplaySetting.java\n+++ b/src/java/org/apache/commons/cli2/DisplaySetting.java\n         if (that instanceof DisplaySetting) {\n             return name.compareTo(that.toString()) == 0;\n         }\n-        else {\n-            return false;\n-        }\n+        return false;\n     }\n \n     public String toString() {\n--- a/src/java/org/apache/commons/cli2/Option.java\n+++ b/src/java/org/apache/commons/cli2/Option.java\n import java.util.List;\n import java.util.ListIterator;\n import java.util.Set;\n-\n-import org.apache.commons.cli2.util.HelpFormatter;\n \n /**\n  * The super type of all options representing a particular element of the\n--- a/src/java/org/apache/commons/cli2/OptionException.java\n+++ b/src/java/org/apache/commons/cli2/OptionException.java\n     public static final Set HELP_SETTINGS = \n         Collections.unmodifiableSet(\n             Collections.singleton(\n-                DisplaySetting.DISPLAY_PROPERTY_OPTION));;\n+                DisplaySetting.DISPLAY_PROPERTY_OPTION));\n \n     /** The Option the exception relates to */\n     private final Option option;\n--- a/src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java\n+++ b/src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java\n         final String shortPrefix,\n         final String longPrefix,\n         final boolean burstEnabled) throws IllegalArgumentException{\n+        \n         if (shortPrefix == null || shortPrefix.length() == 0) {\n             throw new IllegalArgumentException(\"shortPrefix should be at least 1 character long\");\n         }\n-        else {\n-            this.shortPrefix = shortPrefix;\n-        }\n-\n         if (longPrefix == null || longPrefix.length() == 0) {\n             throw new IllegalArgumentException(\"longPrefix should be at least 1 character long\");\n         }\n-        else {\n-            this.longPrefix = longPrefix;\n-        }\n-\n+        \n+        this.shortPrefix = shortPrefix;\n+        this.longPrefix = longPrefix;\n         this.burstEnabled = burstEnabled;\n         reset();\n     }\n--- a/src/java/org/apache/commons/cli2/builder/SwitchBuilder.java\n+++ b/src/java/org/apache/commons/cli2/builder/SwitchBuilder.java\n     /**\n      * Sets the default state for this switch\n      * \n-     * @param switchDefault the default state\n+     * @param newSwitchDefault the default state\n      * @return this SwitchBuilder\n      */\n-    public final SwitchBuilder withSwitchDefault(final Boolean switchDefault) {\n-        this.switchDefault = switchDefault;\n+    public final SwitchBuilder withSwitchDefault(final Boolean newSwitchDefault) {\n+        this.switchDefault = newSwitchDefault;\n         return this;\n     }\n }\n--- a/src/java/org/apache/commons/cli2/option/ArgumentImpl.java\n+++ b/src/java/org/apache/commons/cli2/option/ArgumentImpl.java\n         final Option option)\n         throws OptionException {\n         int argumentCount = commandLine.getValues(option,Collections.EMPTY_LIST).size();\n-        final int initialCount = argumentCount;\n         while (arguments.hasNext() && argumentCount < maximum) {\n \n             final String allValues =\n         if (!token.startsWith(\"\\\"\") || !token.endsWith(\"\\\"\")) {\n             return token;\n         }\n-        else {\n-            if (token.startsWith(\"\\\"\")) {\n-                token = token.substring(1, token.length());\n-            }\n-\n-            if (token.endsWith(\"\\\"\")) {\n-                token = token.substring(0, token.length() - 1);\n-            }\n-\n-            return token;\n-        }\n+        \n+        if (token.startsWith(\"\\\"\")) {\n+            token = token.substring(1, token.length());\n+        }\n+\n+        if (token.endsWith(\"\\\"\")) {\n+            token = token.substring(0, token.length() - 1);\n+        }\n+\n+        return token;\n     }\n     \n     public boolean isRequired() {\n--- a/src/java/org/apache/commons/cli2/util/Comparators.java\n+++ b/src/java/org/apache/commons/cli2/util/Comparators.java\n public class Comparators {\n \t\n \tprivate Comparators(){\n-\t\t;// constructor hiden from potential users\n+\t\t// constructor hiden from potential users\n \t}\n \t\n \n                 if (l) {\n                     return -1;\n                 }\n-                else {\n-                    return 1;\n-                }\n-            }\n-            else {\n-                return 0;\n-            }\n+                return 1;\n+            }\n+            return 0;\n         }\n     }\n \n                 if (l) {\n                     return -1;\n                 }\n-                else {\n-                    return 1;\n-                }\n-            }\n-            else {\n-                return 0;\n-            }\n+                return 1;\n+            }\n+            return 0;\n         }\n     }\n \n                 if (l) {\n                     return -1;\n                 }\n-                else {\n-                    return 1;\n-                }\n-            }\n-            else {\n-                return 0;\n-            }\n+                return 1;\n+            }\n+            return 0;\n         }\n     }\n \n                 if (l) {\n                     return -1;\n                 }\n-                else {\n-                    return 1;\n-                }\n-            }\n-            else {\n-                return 0;\n-            }\n+                return 1;\n+            }\n+            return 0;\n         }\n     }\n \n                 if (l) {\n                     return -1;\n                 }\n-                else {\n-                    return 1;\n-                }\n-            }\n-            else {\n-                return 0;\n-            }\n+                return 1;\n+            }\n+            return 0;\n         }\n     }\n \n                 if (l) {\n                     return -1;\n                 }\n-                else {\n-                    return 1;\n-                }\n-            }\n-            else {\n-                return 0;\n-            }\n+                return 1;\n+            }\n+            return 0;\n         }\n     }\n }\n--- a/src/java/org/apache/commons/cli2/validation/ClassValidator.java\n+++ b/src/java/org/apache/commons/cli2/validation/ClassValidator.java\n                 if (!Character.isJavaIdentifierStart(c)) {\n                     return false;\n                 }\n-                else {\n-                    expectingStart = false;\n-                }\n+                expectingStart = false;\n             }\n             else {\n                 if (c == '.') {\n--- a/src/java/org/apache/commons/cli2/validation/FileValidator.java\n+++ b/src/java/org/apache/commons/cli2/validation/FileValidator.java\n \n                 throw new InvalidArgumentException(name);\n             }\n-            else {\n-                i.set(f);\n-            }\n+            \n+            i.set(f);\n         }\n     }\n \n--- a/src/test/org/apache/commons/cli2/CommandLineTestCase.java\n+++ b/src/test/org/apache/commons/cli2/CommandLineTestCase.java\n \n     public final void testProperties() {\n         final Option option = new PropertyOption();\n-        final List args = OptionTestCase.list();\n-        final WriteableCommandLine commandLine =\n+        final List args = CLITestCase.list();\n+        final WriteableCommandLine writeable =\n             OptionTestCase.commandLine(option, args);\n \n-        assertTrue(commandLine.getProperties().isEmpty());\n-\n-        commandLine.addProperty(\"myprop\", \"myval\");\n-        assertEquals(1, commandLine.getProperties().size());\n-        assertEquals(\"myval\", commandLine.getProperty(\"myprop\"));\n-\n-        commandLine.addProperty(\"myprop\", \"myval2\");\n-        assertEquals(1, commandLine.getProperties().size());\n-        assertEquals(\"myval2\", commandLine.getProperty(\"myprop\"));\n-\n-        commandLine.addProperty(\"myprop2\", \"myval3\");\n-        assertEquals(2, commandLine.getProperties().size());\n-        assertEquals(\"myval3\", commandLine.getProperty(\"myprop2\"));\n+        assertTrue(writeable.getProperties().isEmpty());\n+\n+        writeable.addProperty(\"myprop\", \"myval\");\n+        assertEquals(1, writeable.getProperties().size());\n+        assertEquals(\"myval\", writeable.getProperty(\"myprop\"));\n+\n+        writeable.addProperty(\"myprop\", \"myval2\");\n+        assertEquals(1, writeable.getProperties().size());\n+        assertEquals(\"myval2\", writeable.getProperty(\"myprop\"));\n+\n+        writeable.addProperty(\"myprop2\", \"myval3\");\n+        assertEquals(2, writeable.getProperties().size());\n+        assertEquals(\"myval3\", writeable.getProperty(\"myprop2\"));\n     }\n \n     public final void testOptions() {\n         final Option option = new PropertyOption();\n-        final List args = OptionTestCase.list();\n-        final WriteableCommandLine commandLine =\n+        final List args = CLITestCase.list();\n+        final WriteableCommandLine writeable =\n             OptionTestCase.commandLine(option, args);\n \n         final Option start = CommandTest.buildStartCommand();\n \n-        assertFalse(commandLine.hasOption(start));\n-        assertFalse(commandLine.hasOption(\"start\"));\n-        assertFalse(commandLine.hasOption(\"go\"));\n-\n-        commandLine.addOption(start);\n-\n-        assertTrue(commandLine.hasOption(start));\n-        assertTrue(commandLine.hasOption(\"start\"));\n-        assertTrue(commandLine.hasOption(\"go\"));\n+        assertFalse(writeable.hasOption(start));\n+        assertFalse(writeable.hasOption(\"start\"));\n+        assertFalse(writeable.hasOption(\"go\"));\n+\n+        writeable.addOption(start);\n+\n+        assertTrue(writeable.hasOption(start));\n+        assertTrue(writeable.hasOption(\"start\"));\n+        assertTrue(writeable.hasOption(\"go\"));\n     }\n \n     public final void testValues() {\n         final Option option = new PropertyOption();\n-        final List args = OptionTestCase.list();\n-        final WriteableCommandLine commandLine =\n+        final List args = CLITestCase.list();\n+        final WriteableCommandLine writeable =\n             OptionTestCase.commandLine(option, args);\n \n         final Option start = CommandTest.buildStartCommand();\n \n-        assertNull(commandLine.getValue(start));\n-        assertTrue(commandLine.getValues(start).isEmpty());\n-\n-        commandLine.addOption(start);\n-\n-        assertTrue(commandLine.getValues(start).isEmpty());\n-\n-        commandLine.addValue(start, \"file1\");\n-\n-        assertEquals(\"file1\", commandLine.getValue(start));\n-        assertEquals(\"file1\", commandLine.getValue(\"start\"));\n-        assertEquals(\"file1\", commandLine.getValue(\"go\"));\n-        assertEquals(1, commandLine.getValues(start).size());\n-        assertEquals(1, commandLine.getValues(\"start\").size());\n-        assertEquals(1, commandLine.getValues(\"go\").size());\n-        assertTrue(commandLine.getValues(start).contains(\"file1\"));\n-        assertTrue(commandLine.getValues(\"start\").contains(\"file1\"));\n-        assertTrue(commandLine.getValues(\"go\").contains(\"file1\"));\n-\n-        commandLine.addValue(start, \"file2\");\n+        assertNull(writeable.getValue(start));\n+        assertTrue(writeable.getValues(start).isEmpty());\n+\n+        writeable.addOption(start);\n+\n+        assertTrue(writeable.getValues(start).isEmpty());\n+\n+        writeable.addValue(start, \"file1\");\n+\n+        assertEquals(\"file1\", writeable.getValue(start));\n+        assertEquals(\"file1\", writeable.getValue(\"start\"));\n+        assertEquals(\"file1\", writeable.getValue(\"go\"));\n+        assertEquals(1, writeable.getValues(start).size());\n+        assertEquals(1, writeable.getValues(\"start\").size());\n+        assertEquals(1, writeable.getValues(\"go\").size());\n+        assertTrue(writeable.getValues(start).contains(\"file1\"));\n+        assertTrue(writeable.getValues(\"start\").contains(\"file1\"));\n+        assertTrue(writeable.getValues(\"go\").contains(\"file1\"));\n+\n+        writeable.addValue(start, \"file2\");\n \n         try {\n-            commandLine.getValue(start);\n+            writeable.getValue(start);\n             fail(\"Cannot get single value if multiple are present\");\n         }\n         catch (IllegalStateException ise) {\n         }\n \n         try {\n-            commandLine.getValue(\"start\");\n+            writeable.getValue(\"start\");\n             fail(\"Cannot get single value if multiple are present\");\n         }\n         catch (IllegalStateException ise) {\n             assertEquals(\"More than one value was supplied\", ise.getMessage());\n         }\n \n-        commandLine.getValues(start).add(\"file3\");\n+        writeable.getValues(start).add(\"file3\");\n     }\n \n     public final void testSwitches() {\n         final Option option = new PropertyOption();\n-        final List args = OptionTestCase.list();\n-        final WriteableCommandLine commandLine =\n+        final List args = CLITestCase.list();\n+        final WriteableCommandLine writeable =\n             OptionTestCase.commandLine(option, args);\n \n         final Option start = CommandTest.buildStartCommand();\n \n-        assertNull(commandLine.getSwitch(start));\n-        assertNull(commandLine.getSwitch(\"start\"));\n-        assertNull(commandLine.getSwitch(\"go\"));\n-\n-        commandLine.addSwitch(start, true);\n+        assertNull(writeable.getSwitch(start));\n+        assertNull(writeable.getSwitch(\"start\"));\n+        assertNull(writeable.getSwitch(\"go\"));\n+\n+        writeable.addSwitch(start, true);\n         try {\n-            commandLine.addSwitch(start, false);\n+            writeable.addSwitch(start, false);\n             fail(\"Switch cannot be changed\");\n         }\n         catch (IllegalStateException ise) {\n \n     public final void testSwitches_True() {\n         final Option option = new PropertyOption();\n-        final List args = OptionTestCase.list();\n-        final WriteableCommandLine commandLine =\n+        final List args = CLITestCase.list();\n+        final WriteableCommandLine writeable =\n             OptionTestCase.commandLine(option, args);\n \n         final Option start = CommandTest.buildStartCommand();\n \n-        commandLine.addSwitch(start, true);\n-        assertSame(Boolean.TRUE, commandLine.getSwitch(start));\n+        writeable.addSwitch(start, true);\n+        assertSame(Boolean.TRUE, writeable.getSwitch(start));\n     }\n \n     public final void testSwitches_False() {\n         final Option option = new PropertyOption();\n-        final List args = OptionTestCase.list();\n-        final WriteableCommandLine commandLine =\n+        final List args = CLITestCase.list();\n+        final WriteableCommandLine writeable =\n             OptionTestCase.commandLine(option, args);\n \n         final Option start = CommandTest.buildStartCommand();\n \n-        commandLine.addSwitch(start, false);\n-        assertSame(Boolean.FALSE, commandLine.getSwitch(start));\n+        writeable.addSwitch(start, false);\n+        assertSame(Boolean.FALSE, writeable.getSwitch(start));\n     }\n \n //    public final void testLooksLikeOption() {\n     }\n \n     public final void testOptionAsArgument() throws OptionException {\n-    \tfinal Option bool = new DefaultOptionBuilder().withShortName(\"p\").create();\n+    \tfinal Option p = new DefaultOptionBuilder().withShortName(\"p\").create();\n     \tfinal Argument argument = new ArgumentBuilder().create();\n     \tfinal Option withArgument = new DefaultOptionBuilder().withShortName(\"attr\").withArgument(argument).create();\n \n     \tfinal Group group =\n             new GroupBuilder()\n-                .withOption(bool)\n+                .withOption(p)\n                 .withOption(withArgument)\n                 .create();\n \n--- a/src/test/org/apache/commons/cli2/PrecedenceTest.java\n+++ b/src/test/org/apache/commons/cli2/PrecedenceTest.java\n         assertEquals(new String[] { \"-f\" }, cl);\n     }\n \n-    public CommandLine buildCommandLine(final Group group, final String[] args)\n+    public CommandLine buildCommandLine(final Group group, final String[] arguments)\n         throws OptionException {\n         Parser p = new Parser();\n         p.setGroup(group);\n-        return p.parse(args);\n+        return p.parse(arguments);\n     }\n \n     public void assertEquals(final String options[], final CommandLine line) {\n--- a/src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java\n+++ b/src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java\n \t * @see org.apache.commons.cli2.CommandLineTest#createCommandLine()\n \t */\n \tprotected final CommandLine createCommandLine() {\n-\t\tfinal WriteableCommandLine writeable = createWriteableCommandLine();\n-\t\twriteable.addOption(present);\n-\t\twriteable.addProperty(\"present\",\"present property\");\n-\t\twriteable.addSwitch(bool,true);\n-\t\twriteable.addValue(present,\"present value\");\n-\t\twriteable.addOption(multiple);\n-\t\twriteable.addValue(multiple,\"value 1\");\n-\t\twriteable.addValue(multiple,\"value 2\");\n-\t\twriteable.addValue(multiple,\"value 3\");\n-\t\treturn writeable;\n+\t\tfinal WriteableCommandLine cl = createWriteableCommandLine();\n+\t\tcl.addOption(present);\n+\t\tcl.addProperty(\"present\",\"present property\");\n+\t\tcl.addSwitch(bool,true);\n+\t\tcl.addValue(present,\"present value\");\n+\t\tcl.addOption(multiple);\n+\t\tcl.addValue(multiple,\"value 1\");\n+\t\tcl.addValue(multiple,\"value 2\");\n+\t\tcl.addValue(multiple,\"value 3\");\n+\t\treturn cl;\n \t}\n \t\n \t/*\n--- a/src/test/org/apache/commons/cli2/application/CpTest.java\n+++ b/src/test/org/apache/commons/cli2/application/CpTest.java\n                 .create();\n     }\n \n-    public void testNoSource() throws OptionException {\n+    public void testNoSource() {\n         Parser parser = new Parser();\n         parser.setGroup(options);\n         try {\n--- a/src/test/org/apache/commons/cli2/bug/Bug28005Test.java\n+++ b/src/test/org/apache/commons/cli2/bug/Bug28005Test.java\n import org.apache.commons.cli2.builder.DefaultOptionBuilder;\n import org.apache.commons.cli2.builder.GroupBuilder;\n import org.apache.commons.cli2.commandline.Parser;\n-import org.apache.commons.cli2.option.Command;\n import junit.framework.TestCase;\n \n public class Bug28005Test extends TestCase {\n--- a/src/test/org/apache/commons/cli2/bug/Bug32533Test.java\n+++ b/src/test/org/apache/commons/cli2/bug/Bug32533Test.java\n  */\n package org.apache.commons.cli2.bug;\n \n-import org.apache.commons.cli2.Argument;\n import org.apache.commons.cli2.Group;\n import org.apache.commons.cli2.Option;\n import org.apache.commons.cli2.OptionException;\n-import org.apache.commons.cli2.builder.ArgumentBuilder;\n import org.apache.commons.cli2.builder.DefaultOptionBuilder;\n import org.apache.commons.cli2.builder.GroupBuilder;\n import org.apache.commons.cli2.commandline.Parser;\n--- a/src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java\n+++ b/src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java\n     /*\n      * Class to test for void DefaultOptionBuilder(String, String, boolean)\n      */\n-    public void testCtor() {\n-        {\n-            try {\n-                DefaultOptionBuilder builder = new DefaultOptionBuilder(null, null,\n-                        false);\n-                fail(\"null short prefix is not permitted\");\n-            }\n-            catch(IllegalArgumentException exp) {\n-            }\n-        }\n-\n-        {\n-            try {\n-                DefaultOptionBuilder builder = new DefaultOptionBuilder(\"\", null,\n-                        false);\n-                fail(\"empty short prefix is not permitted\");\n-            }\n-            catch(IllegalArgumentException exp) {\n-            }\n-        }\n-        \n-        {\n-            try {\n-                DefaultOptionBuilder builder = new DefaultOptionBuilder(\"-\", null,\n-                        false);\n-                fail(\"null long prefix is not permitted\");\n-            }\n-            catch(IllegalArgumentException exp) {\n-            }\n-        }\n-\n-        {\n-            try {\n-                DefaultOptionBuilder builder = new DefaultOptionBuilder(\"-\", \"\",\n-                        false);\n-                fail(\"empty long prefix is not permitted\");\n-            }\n-            catch(IllegalArgumentException exp) {\n-            }\n+    public void testNew_NullShortPrefix() {\n+        try {\n+            new DefaultOptionBuilder(null, null,\n+                    false);\n+            fail(\"null short prefix is not permitted\");\n+        }\n+        catch(IllegalArgumentException e) {\n+            assertEquals(\"shortPrefix should be at least 1 character long\",e.getMessage());\n+        }\n+    }\n+\n+    /*\n+     * Class to test for void DefaultOptionBuilder(String, String, boolean)\n+     */\n+    public void testNew_EmptyShortPrefix() {\n+        try {\n+            new DefaultOptionBuilder(\"\", null,\n+                    false);\n+            fail(\"empty short prefix is not permitted\");\n+        }\n+        catch(IllegalArgumentException e) {\n+            assertEquals(\"shortPrefix should be at least 1 character long\",e.getMessage());\n+        }\n+    }\n+\n+    /*\n+     * Class to test for void DefaultOptionBuilder(String, String, boolean)\n+     */\n+    public void testNew_NullLongPrefix() {\n+        try {\n+            new DefaultOptionBuilder(\"-\", null,\n+                    false);\n+            fail(\"null long prefix is not permitted\");\n+        }\n+        catch(IllegalArgumentException e) {\n+            assertEquals(\"longPrefix should be at least 1 character long\",e.getMessage());\n+        }\n+    }\n+\n+    /*\n+     * Class to test for void DefaultOptionBuilder(String, String, boolean)\n+     */\n+    public void testNew_EmptyLongPrefix() {\n+        try {\n+            new DefaultOptionBuilder(\"-\", \"\",\n+                    false);\n+            fail(\"empty long prefix is not permitted\");\n+        }\n+        catch(IllegalArgumentException e) {\n+            assertEquals(\"longPrefix should be at least 1 character long\",e.getMessage());\n         }\n     }\n \n             this.defaultOptionBuilder.create();\n             fail(\"options must have a name\");\n         }\n-        catch (IllegalStateException exp) {\n+        catch (IllegalStateException e) {\n+            assertEquals(\"Options must have at least one name\",e.getMessage());\n         }\n         \n         {\n             DefaultOptionBuilder builder = new DefaultOptionBuilder(\"-\", \"--\",\n                     true);\n             builder.withShortName(\"mx\");\n-        }\n-        \n-        {\n         }\n     }\n \n--- a/src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java\n+++ b/src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java\n  * Window - Preferences - Java - Code Generation - Code and Comments\n  */\n public class DefaultingCommandLineTest extends CommandLineTestCase {\n-\t\n-\tprivate DefaultingCommandLine defaults;\n \t\n \tprivate CommandLine first;\n \tprivate CommandLine second;\n--- a/src/test/org/apache/commons/cli2/option/ArgumentTest.java\n+++ b/src/test/org/apache/commons/cli2/option/ArgumentTest.java\n             List defaults = new ArrayList();\n             \n             try {\n-                ArgumentImpl arg = new ArgumentImpl(\n+                new ArgumentImpl(\n                     null,\n                     \"the last acceptable date\",\n                     1,\n                 defaults.add(\"1\");\n                 defaults.add(\"2\");\n             \n-                ArgumentImpl arg = new ArgumentImpl(\n+                new ArgumentImpl(\n                     null,\n                     \"the last acceptable date\",\n                     1,\n         assertEquals(\"rob\", commandLine.getValue(option));\n     }\n \n-    public void testProcessValues_Optional() throws OptionException {\n+    public void testProcessValues_Optional() {\n         final Argument option = buildTargetsArgument();\n         final List args = list();\n         final WriteableCommandLine commandLine = commandLine(option, args);\n             commandLine.getValues(option));\n     }\n \n-    public void testProcessValues_ContractedTooFew() throws OptionException {\n+    public void testProcessValues_ContractedTooFew() {\n         final Argument option = buildHostArgument();\n         final List args = list(\"box1\");\n         final WriteableCommandLine commandLine = commandLine(option, args);\n         option.validate(commandLine);\n     }\n \n-    public void testValidate_Minimum() throws OptionException {\n+    public void testValidate_Minimum() {\n         final Argument option = buildUsernameArgument();\n         final WriteableCommandLine commandLine = commandLine(option, list());\n \n         }\n     }\n \n-    public void testValidate_Maximum() throws OptionException {\n+    public void testValidate_Maximum() {\n         final Argument option = buildUsernameArgument();\n         final WriteableCommandLine commandLine = commandLine(option, list());\n \n         assertFalse(iterator.hasNext());\n     }\n \n-    public void testProcess_ConsumeNothing() throws OptionException {\n+    public void testProcess_ConsumeNothing() {\n         final Option option = buildPathArgument();\n         final List args = list(\"--\");\n         final WriteableCommandLine commandLine = commandLine(option, args);\n--- a/src/test/org/apache/commons/cli2/option/CommandTest.java\n+++ b/src/test/org/apache/commons/cli2/option/CommandTest.java\n      * \n      * @see org.apache.commons.cli2.OptionTestCase#testValidate()\n      */\n-    public void testValidate() throws OptionException {\n+    public void testValidate() {\n         final Parent option = buildCommitCommand();\n         final WriteableCommandLine commandLine = commandLine(option, list());\n \n--- a/src/test/org/apache/commons/cli2/option/DefaultOptionTest.java\n+++ b/src/test/org/apache/commons/cli2/option/DefaultOptionTest.java\n      * \n      * @see org.apache.commons.cli2.OptionTestCase#testValidate()\n      */\n-    public void testValidate() throws OptionException {\n+    public void testValidate() {\n         final Parent option = buildXOption();\n         final WriteableCommandLine commandLine = commandLine(option, list());\n \n--- a/src/test/org/apache/commons/cli2/option/GroupTest.java\n+++ b/src/test/org/apache/commons/cli2/option/GroupTest.java\n         option.validate(commandLine);\n     }\n \n-    public void testValidate_UnexpectedOption() throws OptionException {\n+    public void testValidate_UnexpectedOption() {\n         final Group option = buildApacheCommandGroup();\n         final WriteableCommandLine commandLine = commandLine(option, list());\n \n         }\n     }\n \n-    public void testValidate_MissingOption() throws OptionException {\n+    public void testValidate_MissingOption() {\n         final Group option = buildApacheCommandGroup();\n         final WriteableCommandLine commandLine = commandLine(option, list());\n \n--- a/src/test/org/apache/commons/cli2/option/NestedGroupTest.java\n+++ b/src/test/org/apache/commons/cli2/option/NestedGroupTest.java\n \n         CommandLine commandLine = parser.parse(args);\n \n-        assertTrue(\"/tmp/filename.txt\".equals(\n-                (String) commandLine.getValue(\"-f\")));\n+        assertTrue(\"/tmp/filename.txt\".equals(commandLine.getValue(\"-f\")));\n         assertTrue(commandLine.hasOption(\"-e\"));\n         assertTrue(commandLine.hasOption(\"-b\"));\n         assertFalse(commandLine.hasOption(\"-d\"));\n     }\n \n-    public void testNestedGroupHelp()\n-        throws OptionException {\n-        final String[] args = {\n-                \"-eb\",\n-                \"--file\",\n-                \"/tmp/filename.txt\"\n-            };\n-\n+    public void testNestedGroupHelp() {\n         Group[] nestedGroups = {\n                 buildActionGroup(),\n                 buildAlgorithmGroup(),\n--- a/src/test/org/apache/commons/cli2/option/PropertyOptionTest.java\n+++ b/src/test/org/apache/commons/cli2/option/PropertyOptionTest.java\n         assertEquals(1, commandLine.getProperties().size());\n     }\n \n-    public void testProcess_UnexpectedOptionException()\n-        throws OptionException {\n+    public void testProcess_UnexpectedOptionException() {\n         final Option option = new PropertyOption();\n         final List args = list(\"--help\");\n         final WriteableCommandLine commandLine = commandLine(option, args);\n--- a/src/test/org/apache/commons/cli2/option/SwitchTest.java\n+++ b/src/test/org/apache/commons/cli2/option/SwitchTest.java\n      * \n      * @see org.apache.commons.cli2.OptionTestCase#testValidate()\n      */\n-    public void testValidate() throws OptionException {\n+    public void testValidate() {\n         final Parent option = buildDisplaySwitch();\n         final WriteableCommandLine commandLine = commandLine(option, list());\n \n--- a/src/test/org/apache/commons/cli2/util/ComparatorsTest.java\n+++ b/src/test/org/apache/commons/cli2/util/ComparatorsTest.java\n package org.apache.commons.cli2.util;\n \n import java.util.Collections;\n-import java.util.Comparator;\n import java.util.List;\n \n import junit.framework.TestCase;\n \n+import org.apache.commons.cli2.CLITestCase;\n import org.apache.commons.cli2.Option;\n-import org.apache.commons.cli2.builder.SwitchBuilder;\n import org.apache.commons.cli2.option.CommandTest;\n import org.apache.commons.cli2.option.DefaultOptionTest;\n import org.apache.commons.cli2.option.GroupTest;\n-import org.apache.commons.cli2.option.OptionTestCase;\n import org.apache.commons.cli2.option.ParentTest;\n import org.apache.commons.cli2.option.SwitchTest;\n \n     public void testGroupFirst() {\n         final Option o1 = GroupTest.buildAntGroup();\n         final Option o2 = ParentTest.buildLibParent();\n-        final List list = OptionTestCase.list(o1, o2);\n+        final List list = CLITestCase.list(o1, o2);\n \n         Collections.sort(list, Comparators.groupFirst());\n \n-        OptionTestCase.assertListContentsEqual(\n-            OptionTestCase.list(o1, o2),\n+        CLITestCase.assertListContentsEqual(\n+            CLITestCase.list(o1, o2),\n             list);\n     }\n \n     public void testGroupLast() {\n         final Option o1 = GroupTest.buildAntGroup();\n         final Option o2 = ParentTest.buildLibParent();\n-        final List list = OptionTestCase.list(o1, o2);\n+        final List list = CLITestCase.list(o1, o2);\n \n         Collections.sort(list, Comparators.groupLast());\n \n-        OptionTestCase.assertListContentsEqual(\n-            OptionTestCase.list(o2, o1),\n+        CLITestCase.assertListContentsEqual(\n+            CLITestCase.list(o2, o1),\n             list);\n     }\n \n     public void testSwitchFirst() {\n         final Option o1 = SwitchTest.buildDisplaySwitch();\n         final Option o2 = ParentTest.buildLibParent();\n-        final List list = OptionTestCase.list(o1, o2);\n+        final List list = CLITestCase.list(o1, o2);\n \n         Collections.sort(list, Comparators.switchFirst());\n \n-        OptionTestCase.assertListContentsEqual(\n-            OptionTestCase.list(o1, o2),\n+        CLITestCase.assertListContentsEqual(\n+            CLITestCase.list(o1, o2),\n             list);\n     }\n \n     public void testSwitchLast() {\n         final Option o1 = SwitchTest.buildDisplaySwitch();\n         final Option o2 = ParentTest.buildLibParent();\n-        final Option o3 = new SwitchBuilder().withName(\"hidden\").create();\n-        final List list = OptionTestCase.list(o1, o2);\n+        //final Option o3 = new SwitchBuilder().withName(\"hidden\").create();\n+        final List list = CLITestCase.list(o1, o2);\n \n         Collections.sort(list, Comparators.switchLast());\n \n-        OptionTestCase.assertListContentsEqual(\n-            OptionTestCase.list(o2, o1),\n+        CLITestCase.assertListContentsEqual(\n+            CLITestCase.list(o2, o1),\n             list);\n     }\n \n     public void testCommandFirst() {\n         final Option o1 = CommandTest.buildCommitCommand();\n         final Option o2 = ParentTest.buildLibParent();\n-        final List list = OptionTestCase.list(o1, o2);\n+        final List list = CLITestCase.list(o1, o2);\n \n         Collections.sort(list, Comparators.commandFirst());\n \n-        OptionTestCase.assertListContentsEqual(\n-            OptionTestCase.list(o1, o2),\n+        CLITestCase.assertListContentsEqual(\n+            CLITestCase.list(o1, o2),\n             list);\n     }\n \n     public void testCommandLast() {\n         final Option o1 = CommandTest.buildCommitCommand();\n         final Option o2 = ParentTest.buildLibParent();\n-        final List list = OptionTestCase.list(o1, o2);\n+        final List list = CLITestCase.list(o1, o2);\n \n         Collections.sort(list, Comparators.commandLast());\n \n-        OptionTestCase.assertListContentsEqual(\n-            OptionTestCase.list(o2, o1),\n+        CLITestCase.assertListContentsEqual(\n+            CLITestCase.list(o2, o1),\n             list);\n     }\n \n     public void testDefaultOptionFirst() {\n         final Option o1 = DefaultOptionTest.buildHelpOption();\n         final Option o2 = CommandTest.buildCommitCommand();\n-        final List list = OptionTestCase.list(o1, o2);\n+        final List list = CLITestCase.list(o1, o2);\n \n         Collections.sort(list, Comparators.defaultOptionFirst());\n \n-        OptionTestCase.assertListContentsEqual(\n-            OptionTestCase.list(o1, o2),\n+        CLITestCase.assertListContentsEqual(\n+            CLITestCase.list(o1, o2),\n             list);\n     }\n \n     public void testDefaultOptionLast() {\n         final Option o1 = DefaultOptionTest.buildHelpOption();\n         final Option o2 = CommandTest.buildCommitCommand();\n-        final List list = OptionTestCase.list(o1, o2);\n+        final List list = CLITestCase.list(o1, o2);\n \n         Collections.sort(list, Comparators.defaultOptionLast());\n \n-        OptionTestCase.assertListContentsEqual(\n-            OptionTestCase.list(o2, o1),\n+        CLITestCase.assertListContentsEqual(\n+            CLITestCase.list(o2, o1),\n             list);\n     }\n \n     public void testNamedFirst() {\n         final Option o1 = DefaultOptionTest.buildHelpOption();\n         final Option o2 = ParentTest.buildLibParent();\n-        final List list = OptionTestCase.list(o1, o2);\n+        final List list = CLITestCase.list(o1, o2);\n \n         Collections.sort(list, Comparators.namedFirst(\"--help\"));\n \n-        OptionTestCase.assertListContentsEqual(\n-            OptionTestCase.list(o1, o2),\n+        CLITestCase.assertListContentsEqual(\n+            CLITestCase.list(o1, o2),\n             list);\n     }\n \n     public void testNamedLast() {\n         final Option o1 = DefaultOptionTest.buildHelpOption();\n         final Option o2 = ParentTest.buildLibParent();\n-        final List list = OptionTestCase.list(o1, o2);\n+        final List list = CLITestCase.list(o1, o2);\n \n         Collections.sort(list, Comparators.namedLast(\"--help\"));\n \n-        OptionTestCase.assertListContentsEqual(\n-            OptionTestCase.list(o2, o1),\n+        CLITestCase.assertListContentsEqual(\n+            CLITestCase.list(o2, o1),\n             list);\n     }\n \n     public void testPreferredNameFirst() {\n         final Option o1 = DefaultOptionTest.buildHelpOption();\n         final Option o2 = ParentTest.buildLibParent();\n-        final List list = OptionTestCase.list(o1, o2);\n+        final List list = CLITestCase.list(o1, o2);\n \n         Collections.sort(list, Comparators.preferredNameFirst());\n \n-        OptionTestCase.assertListContentsEqual(\n-            OptionTestCase.list(o1, o2),\n+        CLITestCase.assertListContentsEqual(\n+            CLITestCase.list(o1, o2),\n             list);\n     }\n \n     public void testPreferredNameLast() {\n         final Option o1 = DefaultOptionTest.buildHelpOption();\n         final Option o2 = ParentTest.buildLibParent();\n-        final List list = OptionTestCase.list(o1, o2);\n+        final List list = CLITestCase.list(o1, o2);\n \n         Collections.sort(list, Comparators.preferredNameLast());\n \n-        OptionTestCase.assertListContentsEqual(\n-            OptionTestCase.list(o2, o1),\n+        CLITestCase.assertListContentsEqual(\n+            CLITestCase.list(o2, o1),\n             list);\n     }\n \n     public void testRequiredFirst() {\n         final Option o1 = DefaultOptionTest.buildHelpOption();\n         final Option o2 = DefaultOptionTest.buildXOption();\n-        final List list = OptionTestCase.list(o1, o2);\n+        final List list = CLITestCase.list(o1, o2);\n \n         Collections.sort(list, Comparators.requiredFirst());\n \n-        OptionTestCase.assertListContentsEqual(\n-            OptionTestCase.list(o2, o1),\n+        CLITestCase.assertListContentsEqual(\n+            CLITestCase.list(o2, o1),\n             list);\n     }\n \n     public void testRequiredLast() {\n         final Option o1 = DefaultOptionTest.buildHelpOption();\n         final Option o2 = DefaultOptionTest.buildXOption();\n-        final List list = OptionTestCase.list(o1, o2);\n+        final List list = CLITestCase.list(o1, o2);\n \n         Collections.sort(list, Comparators.requiredLast());\n \n-        OptionTestCase.assertListContentsEqual(\n-            OptionTestCase.list(o1, o2),\n+        CLITestCase.assertListContentsEqual(\n+            CLITestCase.list(o1, o2),\n             list);\n     }\n     \n         final Option o1 = CommandTest.buildCommitCommand();\n         final Option o2 = SwitchTest.buildDisplaySwitch();\n         final Option o3 = DefaultOptionTest.buildHelpOption();\n-        final List list = OptionTestCase.list(o1, o2, o3);\n+        final List list = CLITestCase.list(o1, o2, o3);\n         \n         Collections.sort(\n             list, \n                 Comparators.namedFirst(\"--help\"),\n                 Comparators.commandFirst()));\n \n-        OptionTestCase.assertListContentsEqual(\n-            OptionTestCase.list(o3, o1, o2),\n+        CLITestCase.assertListContentsEqual(\n+            CLITestCase.list(o3, o1, o2),\n             list);\n     }\n }\n--- a/src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java\n+++ b/src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java\n         }\n     }\n \n-    public void testLoadable() throws InvalidArgumentException {\n+    public void testLoadable() {\n         assertFalse(\"Validator is loadable\", validator.isLoadable());\n         validator.setLoadable(true);\n         assertTrue(\"Validator is NOT loadable\", validator.isLoadable());\n         }\n     }\n \n-    public void testInstantiate() throws InvalidArgumentException {\n+    public void testInstantiate() {\n         assertFalse(\"Validator creates instances\", validator.isInstance());\n         validator.setInstance(true);\n         assertTrue(\n             list.get(0) instanceof java.util.Vector);\n     }\n \n-    public void testCreateInterfaceInstance() throws InvalidArgumentException {\n+    public void testCreateInterfaceInstance() {\n         final String className = \"java.util.Map\";\n         final Object[] array = new Object[] { className };\n         final List list = Arrays.asList(array);\n         }\n     }\n \n-    public void testCreateProtectedInstance() throws InvalidArgumentException {\n+    public void testCreateProtectedInstance() {\n         final String className = \"org.apache.commons.cli2.validation.protect.ProtectedClass\";\n         final Object[] array = new Object[] { className };\n         final List list = Arrays.asList(array);\n         }\n     }\n     \n-    public void testClassloader() throws InvalidArgumentException {\n+    public void testClassloader() {\n         assertEquals(\n             \"Wrong classloader found\",\n             validator.getClass().getClassLoader(),\n--- a/src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java\n+++ b/src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java\n package org.apache.commons.cli2.validation;\n \n import java.util.Arrays;\n-import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n import junit.framework.TestCase;\n \n public class EnumValidatorTest extends TestCase {\n-    private final Set enum = new TreeSet(\n+    private final Set enumSet = new TreeSet(\n             Arrays.asList(\n                     new Object[]{\"red\", \"green\", \"blue\"}));\n     \n     public void testValidate() throws InvalidArgumentException {\n         final Object[] array = new Object[] { \"red\", \"green\"};\n         final List list = Arrays.asList(array);\n-        final Validator validator = new EnumValidator(enum);\n+        final Validator validator = new EnumValidator(enumSet);\n \n         validator.validate(list);\n \n         assertFalse(i.hasNext());\n     }\n     \n-    public void testNonMember() throws InvalidArgumentException {\n+    public void testNonMember() {\n         final Object[] array = new Object[] { \"red\", \"pink\"};\n         final List list = Arrays.asList(array);\n-        final Validator validator = new EnumValidator(enum);\n+        final Validator validator = new EnumValidator(enumSet);\n \n         try{\n             validator.validate(list);\n--- a/src/test/org/apache/commons/cli2/validation/FileValidatorTest.java\n+++ b/src/test/org/apache/commons/cli2/validation/FileValidatorTest.java\n         assertFalse(i.hasNext());\n     }\n     \n-    public void testValidate_Directory() throws InvalidArgumentException {\n+    public void testValidate_Directory() {\n         final Object[] array = new Object[] { \"src\", \"project.xml\"};\n         final List list = Arrays.asList(array);\n         final Validator validator = FileValidator.getExistingDirectoryInstance();\n         }\n     }\n     \n-    public void testValidate_File() throws InvalidArgumentException {\n+    public void testValidate_File() {\n         final Object[] array = new Object[] { \"project.xml\", \"src\"};\n         final List list = Arrays.asList(array);\n         final Validator validator = FileValidator.getExistingFileInstance();\n         }\n     }\n     \n-    public void testValidate_Existing() throws InvalidArgumentException {\n+    public void testValidate_Existing() {\n         final Object[] array = new Object[] { \"project.xml\", \"veryunlikelyfilename\"};\n         final List list = Arrays.asList(array);\n         final Validator validator = FileValidator.getExistingInstance();\n--- a/src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java\n+++ b/src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java\n         assertFalse(i.hasNext());\n     }\n \n-    public void testValidate_ExcessChars() throws InvalidArgumentException {\n+    public void testValidate_ExcessChars() {\n         final Object[] array = new Object[] { \"10DowningStreet\"};\n         final List list = Arrays.asList(array);\n         final Validator validator = NumberValidator.getIntegerInstance();\n--- a/src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java\n+++ b/src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java\n         assertFalse(i.hasNext());\n     }\n     \n-    public void testBadProtocol() throws InvalidArgumentException, MalformedURLException {\n+    public void testBadProtocol() {\n         final Object[] array = new Object[] { \"http://www.apache.org/\", \"file:///etc\"};\n         final List list = Arrays.asList(array);\n         final UrlValidator validator = new UrlValidator();\n--- a/src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java\n+++ b/src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java\n \n class ProtectedClass {\n     protected ProtectedClass() {\n+        // used to test something???\n     }\n-};\n+}", "timestamp": 1109301718, "metainfo": ""}