{"sha": "2490250f9b3044e4cd946f11b46694f943f5814d", "log": "Removed the unused constructors, suite() and teardown() methods from the test cases  ", "commit": "\n--- a/src/test/org/apache/commons/cli/ApplicationTest.java\n+++ b/src/test/org/apache/commons/cli/ApplicationTest.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.cli;\n \n-import junit.framework.Test;\n import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n \n /**\n  * <p>\n  */\n public class ApplicationTest extends TestCase {\n \n-    public static Test suite() { \n-        return new TestSuite(ApplicationTest.class); \n-    }\n-\n-    public ApplicationTest(String name)\n-    {\n-        super(name);\n-    }\n-    \n     /**\n      *\t\n      */\n--- a/src/test/org/apache/commons/cli/ArgumentIsOptionTest.java\n+++ b/src/test/org/apache/commons/cli/ArgumentIsOptionTest.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.cli;\n \n-import junit.framework.Test;\n import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n-\n \n public class ArgumentIsOptionTest extends TestCase {\n     private Options options = null;\n     private CommandLineParser parser = null;\n-\n-    public ArgumentIsOptionTest(String name) {\n-        super(name);\n-    }\n-\n-    public static Test suite() {\n-        return new TestSuite(ArgumentIsOptionTest.class);\n-    }\n \n     public void setUp() {\n         options = new Options().addOption(\"p\", false, \"Option p\").addOption(\"attr\",\n                 true, \"Option accepts argument\");\n \n         parser = new PosixParser();\n-    }\n-\n-    public void tearDown() {\n     }\n \n     public void testOptionAndOptionWithArgument() {\n--- a/src/test/org/apache/commons/cli/BugsTest.java\n+++ b/src/test/org/apache/commons/cli/BugsTest.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.cli;\n \n import java.io.ByteArrayOutputStream;\n import java.io.StringWriter;\n import java.util.Properties;\n \n-import junit.framework.Test;\n import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n \n public class BugsTest extends TestCase\n {\n-    /** CommandLine instance */\n-    private CommandLine _cmdline = null;\n-    private Option _option = null;\n-\n-    public static Test suite() { \n-        return new TestSuite( BugsTest.class );\n-    }\n-\n-    public BugsTest( String name )\n-    {\n-        super( name );\n-    }\n-\n-    public void setUp()\n-    {\n-    }\n-\n-    public void tearDown()\n-    {\n-    }\n-\n     public void test11457() {\n         Options options = new Options();\n         options.addOption( OptionBuilder.withLongOpt( \"verbose\" )\n--- a/src/test/org/apache/commons/cli/BuildTest.java\n+++ b/src/test/org/apache/commons/cli/BuildTest.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.cli;\n \n-import junit.framework.Test;\n import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n \n public class BuildTest extends TestCase\n {\n-\n-    public static Test suite() { \n-        return new TestSuite(BuildTest.class); \n-    }\n-\n-    public BuildTest(String name)\n-    {\n-        super(name);\n-    }\n-\n-    public void setUp()\n-    {\n-\n-    }\n-\n-    public void tearDown()\n-    {\n-\n-    }\n-\n     public void testSimple()\n     {\n         Options opts = new Options();\n--- a/src/test/org/apache/commons/cli/GnuParseTest.java\n+++ b/src/test/org/apache/commons/cli/GnuParseTest.java\n  */\n package org.apache.commons.cli;\n \n-import junit.framework.Test;\n import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n \n public class GnuParseTest extends TestCase\n {\n     private Options _options = null;\n     private Parser _parser = null;\n-\n-    public static Test suite() { \n-        return new TestSuite( GnuParseTest.class ); \n-    }\n-\n-    public GnuParseTest( String name )\n-    {\n-        super( name );\n-    }\n \n     public void setUp()\n     {\n         _parser = new GnuParser( );\n     }\n \n-    public void tearDown()\n-    {\n-\n-    }\n-\n     public void testSimpleShort()\n     {\n         String[] args = new String[] { \"-a\",\n \n     public void testMissingArg()\n     {\n-\n         String[] args = new String[] { \"-b\" };\n \n         boolean caught = false;\n \n         try\n         {\n-            CommandLine cl = _parser.parse(_options, args);\n+            _parser.parse(_options, args);\n         }\n         catch (MissingArgumentException e)\n         {\n--- a/src/test/org/apache/commons/cli/HelpFormatterExamples.java\n+++ b/src/test/org/apache/commons/cli/HelpFormatterExamples.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.cli;\n \n /** \n--- a/src/test/org/apache/commons/cli/HelpFormatterTest.java\n+++ b/src/test/org/apache/commons/cli/HelpFormatterTest.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.cli;\n \n import java.io.ByteArrayOutputStream;\n import java.io.PrintWriter;\n-\n import java.util.Comparator;\n \n import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n \n /** \n  * Test case for the HelpFormatter class \n  **/\n public class HelpFormatterTest extends TestCase\n {\n-\n    private static final String EOL = System.getProperty(\"line.separator\");\n \n    public static void main( String[] args )\n       junit.textui.TestRunner.main(testName);\n    }\n \n-   public static TestSuite suite()\n-   {\n-      return new TestSuite(HelpFormatterTest.class);\n-   }\n-\n-   public HelpFormatterTest( String s )\n-   {\n-      super( s );\n-   }\n-\n-   public void testFindWrapPos()\n-      throws Exception\n+   public void testFindWrapPos() throws Exception\n    {\n       HelpFormatter hf = new HelpFormatter();\n \n       assertEquals(\"wrap position 3\", 4, hf.findWrapPos(text, 3, 0));\n    }\n \n-   public void testPrintWrapped()\n-      throws Exception\n+   public void testPrintWrapped() throws Exception\n    {\n       StringBuffer sb = new StringBuffer();\n       HelpFormatter hf = new HelpFormatter();\n       assertEquals(\"multi-line padded text\", expected, sb.toString());\n    }\n \n-   public void testPrintOptions()\n-   throws Exception\n+   public void testPrintOptions() throws Exception\n    {\n        StringBuffer sb = new StringBuffer();\n        HelpFormatter hf = new HelpFormatter();\n        assertEquals(\"multiple wrapped options\", expected, sb.toString());\n    }\n \n-   public void testAutomaticUsage()\n-   throws Exception\n+   public void testAutomaticUsage() throws Exception\n    {\n        HelpFormatter hf = new HelpFormatter();\n        Options options = null;\n--- a/src/test/org/apache/commons/cli/LongOptionWithShort.java\n+++ b/src/test/org/apache/commons/cli/LongOptionWithShort.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.cli;\n \n-import junit.framework.Test;\n import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n-\n \n /**\n- * <p>\n  * This is a collection of tests that test real world\n  * applications command lines focusing on options with\n  * long and short names.\n- * </p>\n  */\n public class LongOptionWithShort extends TestCase {\n-    public LongOptionWithShort(String name) {\n-        super(name);\n-    }\n \n-    public static Test suite() {\n-        return new TestSuite(LongOptionWithShort.class);\n-    }\n-\n-    /**\n-     *\n-     */\n     public void testLongOptionWithShort() {\n         Option help = new Option(\"h\", \"help\", false, \"print this message\");\n         Option version = new Option(\"v\", \"version\", false,\n--- a/src/test/org/apache/commons/cli/OptionBuilderTest.java\n+++ b/src/test/org/apache/commons/cli/OptionBuilderTest.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.cli;\n \n-import junit.framework.Test;\n import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n-\n-import junit.textui.TestRunner;\n \n public class OptionBuilderTest extends TestCase {\n-\n-    public OptionBuilderTest( String name ) {\n-        super( name );\n-    }\n-\n-    public static Test suite() { \n-        return new TestSuite( OptionBuilderTest.class ); \n-    }\n-\n-    public static void main( String args[] ) { \n-        TestRunner.run( suite() );\n-    }\n \n     public void testCompleteOption( ) {\n         Option simple = OptionBuilder.withLongOpt( \"simple option\")\n             fail( \"IllegalArgumentException caught\" );\n         }\n     }\n-}\n+}\n--- a/src/test/org/apache/commons/cli/OptionGroupTest.java\n+++ b/src/test/org/apache/commons/cli/OptionGroupTest.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.cli;\n \n-import junit.framework.Test;\n import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n \n /**\n  * @author John Keyes (john at integralsource.com)\n  */\n public class OptionGroupTest extends TestCase\n {\n-\n     private Options _options = null;\n     private CommandLineParser parser = new PosixParser();\n-\n-\n-    public static Test suite() \n-    { \n-        return new TestSuite ( OptionGroupTest.class ); \n-    }\n-\n-    public OptionGroupTest( String name )\n-    {\n-        super( name );\n-    }\n \n     public void setUp()\n     {\n         _options.addOption( \"r\", \"revision\", false, \"revision number\" );\n     }\n \n-    public void tearDown()\n-    {\n-    }\n-\n     public void testSingleOptionFromGroup()\n     {\n         String[] args = new String[] { \"-f\" };\n \n         try\n         {\n-            CommandLine cl = parser.parse( _options, args);\n+            parser.parse( _options, args);\n             fail( \"two arguments from group not allowed\" );\n         }\n         catch (ParseException e)\n \n         try\n         {\n-            CommandLine cl = parser.parse( _options, args);\n+            parser.parse(_options, args);\n             fail( \"two arguments from group not allowed\" );\n         }\n         catch (ParseException e)\n         }\n     }\n \n-\n }\n--- a/src/test/org/apache/commons/cli/OptionTest.java\n+++ b/src/test/org/apache/commons/cli/OptionTest.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.cli;\n \n import junit.framework.TestCase;\n--- a/src/test/org/apache/commons/cli/OptionsTest.java\n+++ b/src/test/org/apache/commons/cli/OptionsTest.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.cli;\n \n import java.util.ArrayList;\n import java.util.Collection;\n \n-import junit.framework.Test;\n import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n \n /**\n  * @author Rob Oxspring roxspring@apache.org\n  */\n public class OptionsTest extends TestCase\n {\n-\n-    public static Test suite() \n-    { \n-        return new TestSuite ( OptionsTest.class ); \n-    }\n-\n-    public OptionsTest( String name )\n-    {\n-        super( name );\n-    }\n-\n-    public void setUp()\n-    {\n-    }\n-\n-    public void tearDown()\n-    {\n-    }\n-    \n     public void testHelpOptions(){\n         \n         Option longOnly1 = OptionBuilder\n     }\n \n }\n-\n--- a/src/test/org/apache/commons/cli/ParseRequiredTest.java\n+++ b/src/test/org/apache/commons/cli/ParseRequiredTest.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.cli;\n \n-import junit.framework.Test;\n import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n \n /**\n  * @author John Keyes (john at integralsource.com)\n  */\n public class ParseRequiredTest extends TestCase\n {\n-\n     private Options _options = null;\n     private CommandLineParser parser = new PosixParser();\n-\n-    public static Test suite() { \n-        return new TestSuite(ParseRequiredTest.class); \n-    }\n-\n-    public ParseRequiredTest(String name)\n-    {\n-        super(name);\n-    }\n \n     public void setUp()\n     {\n                                      .isRequired()\n                                      .withDescription( \"set the value of [b]\" )\n                                      .create( 'b' ) );\n-    }\n-\n-    public void tearDown()\n-    {\n-\n     }\n \n     public void testWithRequiredOption()\n--- a/src/test/org/apache/commons/cli/ParseTest.java\n+++ b/src/test/org/apache/commons/cli/ParseTest.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.cli;\n \n-import junit.framework.Test;\n import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n \n public class ParseTest extends TestCase\n {\n-\n     private Options _options = null;\n     private Parser _parser = null;\n-\n-    public static Test suite() { \n-        return new TestSuite(ParseTest.class); \n-    }\n-\n-    public ParseTest(String name)\n-    {\n-        super(name);\n-    }\n \n     public void setUp()\n     {\n         _parser = new PosixParser();\n     }\n \n-    public void tearDown()\n-    {\n-\n-    }\n-\n     public void testSimpleShort()\n     {\n         String[] args = new String[] { \"-a\",\n--- a/src/test/org/apache/commons/cli/PatternOptionBuilderTest.java\n+++ b/src/test/org/apache/commons/cli/PatternOptionBuilderTest.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.cli;\n \n import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n \n /** \n  * Test case for the PatternOptionBuilder class \n  *\n  * @author Henri Yandell\n  **/\n-public class PatternOptionBuilderTest\n-extends TestCase\n+public class PatternOptionBuilderTest extends TestCase\n {\n+   public void testSimplePattern() throws Exception\n+   {\n+       Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\n+       String[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n \n-   public static TestSuite suite()\n-   {\n-      return new TestSuite(PatternOptionBuilderTest.class);\n+       CommandLineParser parser = new PosixParser();\n+       CommandLine line = parser.parse(options,args);\n+\n+       assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));\n+       assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));\n+       assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));\n+       assertTrue(\"boolean true flag c\", line.hasOption(\"c\"));\n+       assertFalse(\"boolean false flag d\", line.hasOption(\"d\"));\n+       assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));\n+       assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));\n+       assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));\n+       assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));\n+\n+       // tests the char methods of CommandLine that delegate to the String methods\n+       assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));\n+       assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));\n+       assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));\n+       assertTrue(\"boolean true flag c\", line.hasOption('c'));\n+       assertFalse(\"boolean false flag d\", line.hasOption('d'));\n+       assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));\n+       assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));\n+       assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));\n+       assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject('t'));\n+\n+       /// DATES NOT SUPPORTED YET.\n+       //      assertEquals(\"number flag t\", new java.util.Date(1023400137276L), line.getOptionObject('z'));\n+       //     input is:  \"Thu Jun 06 17:48:57 EDT 2002\"\n    }\n-\n-   public void testSimplePattern()\n-   {\n-       try {\n-           Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\n-           String[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n-      \n-           CommandLineParser parser = new PosixParser();\n-           CommandLine line = parser.parse(options,args);\n-\n-           assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));\n-           assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));\n-           assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));\n-           assertTrue(\"boolean true flag c\", line.hasOption(\"c\"));\n-           assertFalse(\"boolean false flag d\", line.hasOption(\"d\"));\n-           assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));\n-           assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));\n-           assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));\n-           assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));\n-\n-           // tests the char methods of CommandLine that delegate to the String methods\n-           assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));\n-           assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));\n-           assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));\n-           assertTrue(\"boolean true flag c\", line.hasOption('c'));\n-           assertFalse(\"boolean false flag d\", line.hasOption('d'));\n-           assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));\n-           assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));\n-           assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));\n-           assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject('t'));\n-\n-           /// DATES NOT SUPPORTED YET.\n-           //      assertEquals(\"number flag t\", new java.util.Date(1023400137276L), line.getOptionObject('z'));\n-           //     input is:  \"Thu Jun 06 17:48:57 EDT 2002\"\n-       }\n-       catch( ParseException exp ) {\n-           fail( exp.getMessage() );\n-       }\n-       catch( java.net.MalformedURLException exp ) {\n-           fail( exp.getMessage() );\n-       }\n-   }\n-\n }\n--- a/src/test/org/apache/commons/cli/UtilTest.java\n+++ b/src/test/org/apache/commons/cli/UtilTest.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.cli;\n \n import junit.framework.TestCase;\n  * @author brianegge\n  */\n public class UtilTest extends TestCase {\n+\n     public void testStripLeadingHyphens() {\n         assertEquals(\"f\", Util.stripLeadingHyphens(\"-f\"));\n         assertEquals(\"foo\", Util.stripLeadingHyphens(\"--foo\"));\n--- a/src/test/org/apache/commons/cli/ValueTest.java\n+++ b/src/test/org/apache/commons/cli/ValueTest.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.cli;\n-\n-import junit.framework.Test;\n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n \n import java.util.Arrays;\n import java.util.Properties;\n \n+import junit.framework.TestCase;\n+\n public class ValueTest extends TestCase\n {\n-\n-    public static Test suite() { \n-        return new TestSuite(ValueTest.class); \n-    }\n-\n     private CommandLine _cl = null;\n-    private CommandLine _clOptional = null;\n     private Options opts = new Options();\n-\n-    public ValueTest(String name)\n-    {\n-        super(name);\n-    }\n \n     public void setUp()\n     {\n         {\n             fail(\"Cannot setUp() CommandLine: \" + e.toString());\n         }\n-    }\n-\n-    public void tearDown()\n-    {\n-\n     }\n \n     public void testShortNoArg()\n--- a/src/test/org/apache/commons/cli/ValuesTest.java\n+++ b/src/test/org/apache/commons/cli/ValuesTest.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.cli;\n \n import java.util.Arrays;\n \n-import junit.framework.Test;\n import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n \n public class ValuesTest extends TestCase\n {\n     /** CommandLine instance */\n     private CommandLine _cmdline = null;\n     private Option _option = null;\n-\n-    public static Test suite() { \n-        return new TestSuite( ValuesTest.class );\n-    }\n-\n-    public ValuesTest( String name )\n-    {\n-        super( name );\n-    }\n \n     public void setUp()\n     {\n         }\n     }\n \n-    public void tearDown()\n-    {\n-\n-    }\n-\n     public void testShortArgs()\n     {\n         assertTrue( _cmdline.hasOption(\"a\") );\n--- a/src/test/org/apache/commons/cli/bug/BugCLI133Test.java\n+++ b/src/test/org/apache/commons/cli/bug/BugCLI133Test.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.cli.bug;\n \n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.cli.PosixParser;\n+\n import junit.framework.TestCase;\n-import org.apache.commons.cli.*;\n \n /**\n  * @author brianegge\n--- a/src/test/org/apache/commons/cli/bug/BugCLI13Test.java\n+++ b/src/test/org/apache/commons/cli/bug/BugCLI13Test.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.cli.bug;\n \n-import junit.framework.TestCase;\n import org.apache.commons.cli.CommandLine;\n import org.apache.commons.cli.Option;\n import org.apache.commons.cli.OptionBuilder;\n import org.apache.commons.cli.ParseException;\n import org.apache.commons.cli.PosixParser;\n \n+import junit.framework.TestCase;\n+\n /**\n  * @author brianegge\n  */\n-public class BugCLI13Test\n-    extends TestCase\n+public class BugCLI13Test extends TestCase\n {\n-    public void testCLI13()\n-        throws ParseException\n+    public void testCLI13() throws ParseException\n     {\n         final String debugOpt = \"debug\";\n         Option debug = OptionBuilder\n--- a/src/test/org/apache/commons/cli/bug/BugCLI148Test.java\n+++ b/src/test/org/apache/commons/cli/bug/BugCLI148Test.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.cli.bug;\n \n-import org.apache.commons.cli.*;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.OptionBuilder;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.PosixParser;\n+\n import junit.framework.TestCase;\n \n /**\n--- a/src/test/org/apache/commons/cli/bug/BugCLI18Test.java\n+++ b/src/test/org/apache/commons/cli/bug/BugCLI18Test.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.cli.bug;\n-\n-import org.apache.commons.cli.*;\n \n import java.io.PrintWriter;\n import java.io.StringWriter;\n+\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n \n import junit.framework.TestCase;\n \n /**\n  * http://issues.apache.org/jira/browse/CLI-18\n  */\n-public class BugCLI18Test extends TestCase {\n+public class BugCLI18Test extends TestCase\n+{\n+    public void testCLI18()\n+    {\n+        Options options = new Options();\n+        options.addOption(new Option(\"a\", \"aaa\", false, \"aaaaaaa\"));\n+        options.addOption(new Option(null, \"bbb\", false, \"bbbbbbb dksh fkshd fkhs dkfhsdk fhskd hksdks dhfowehfsdhfkjshf skfhkshf sf jkshfk sfh skfh skf f\"));\n+        options.addOption(new Option(\"c\", null, false, \"ccccccc\"));\n \n-  public void testCLI18() {\n-    Options options = new Options();\n-    options.addOption(new Option(\"a\",\"aaa\",false,\"aaaaaaa\"));\n-    options.addOption(new Option(null,\"bbb\",false,\"bbbbbbb dksh fkshd fkhs dkfhsdk fhskd hksdks dhfowehfsdhfkjshf skfhkshf sf jkshfk sfh skfh skf f\"));\n-    options.addOption(new Option(\"c\",null,false,\"ccccccc\"));\n+        HelpFormatter formatter = new HelpFormatter();\n+        StringWriter out = new StringWriter();\n \n-    HelpFormatter formatter = new HelpFormatter();\n-    StringWriter out = new StringWriter();\n-\n-    formatter.printHelp(new PrintWriter(out),80, \"foobar\", \"dsfkfsh kdh hsd hsdh fkshdf ksdh fskdh fsdh fkshfk sfdkjhskjh fkjh fkjsh khsdkj hfskdhf skjdfh ksf khf s\", options, 2, 2, \"blort j jgj j jg jhghjghjgjhgjhg jgjhgj jhg jhg hjg jgjhghjg jhg hjg jhgjg jgjhghjg jg jgjhgjgjg jhg jhgjh\" + '\\r' + '\\n' + \"rarrr\", true);\n-  }\n+        formatter.printHelp(new PrintWriter(out), 80, \"foobar\", \"dsfkfsh kdh hsd hsdh fkshdf ksdh fskdh fsdh fkshfk sfdkjhskjh fkjh fkjsh khsdkj hfskdhf skjdfh ksf khf s\", options, 2, 2, \"blort j jgj j jg jhghjghjgjhgjhg jgjhgj jhg jhg hjg jgjhghjg jhg hjg jhgjg jgjhghjg jg jgjhgjgjg jhg jhgjh\" + '\\r' + '\\n' + \"rarrr\", true);\n+    }\n }\n-\n--- a/src/test/org/apache/commons/cli/bug/BugCLI51Test.java\n+++ b/src/test/org/apache/commons/cli/bug/BugCLI51Test.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.cli.bug;\n \n-import junit.framework.TestCase;\n import org.apache.commons.cli.CommandLine;\n import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.OptionBuilder;\n import org.apache.commons.cli.Options;\n-import org.apache.commons.cli.ParseException;\n import org.apache.commons.cli.PosixParser;\n-import org.apache.commons.cli.OptionBuilder;\n-import org.apache.commons.cli.Option;\n+\n+import junit.framework.TestCase;\n \n /**\n  * @author brianegge\n  */\n-public class BugCLI51Test\n-    extends TestCase\n+public class BugCLI51Test extends TestCase\n {\n     public void test() throws Exception\n     {\n         Options options = buildCommandLineOptions();\n         CommandLineParser parser = new PosixParser();\n-        String[] args = new String[] {\"-t\", \"-something\" };\n-        CommandLine commandLine;\n-        commandLine = parser.parse( options, args );\n-        assertEquals(\"-something\", commandLine.getOptionValue( 't'));\n+        String[] args = new String[]{\"-t\", \"-something\"};\n+\n+        CommandLine commandLine = parser.parse(options, args);\n+        assertEquals(\"-something\", commandLine.getOptionValue('t'));\n     }\n \n     private Options buildCommandLineOptions()\n     {\n-        Option opt = OptionBuilder.withArgName( \"t\").hasArg().create('t');\n+        Option opt = OptionBuilder.withArgName(\"t\").hasArg().create('t');\n         Options options = new Options();\n-        options.addOption( opt);\n+        options.addOption(opt);\n         return options;\n     }\n }\n--- a/src/test/org/apache/commons/cli/bug/BugCLI71Test.java\n+++ b/src/test/org/apache/commons/cli/bug/BugCLI71Test.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n+\n package org.apache.commons.cli.bug;\n \n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.MissingArgumentException;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.PosixParser;\n+\n import junit.framework.TestCase;\n-\n-import org.apache.commons.cli.*;\n \n public class BugCLI71Test extends TestCase {\n ", "timestamp": 1212075040, "metainfo": ""}