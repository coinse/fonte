{"sha": "665386dce6e8804408871eb35040bec6d42da528", "log": "Renamed the test case LongOptionWithShort into PosixParserTest to make it executed by Maven  ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/cli/PosixParserTest.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.cli;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * This is a collection of tests that test real world\n+ * applications command lines focusing on options with\n+ * long and short names.\n+ */\n+public class PosixParserTest extends TestCase {\n+\n+    public void testLongOptionWithShort() throws Exception {\n+        Option help = new Option(\"h\", \"help\", false, \"print this message\");\n+        Option version = new Option(\"v\", \"version\", false, \"print version information\");\n+        Option newRun = new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\n+        Option trackerRun = new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\n+\n+        Option timeLimit = OptionBuilder.withLongOpt(\"limit\").hasArg()\n+                                        .withValueSeparator()\n+                                        .withDescription(\"Set time limit for execution, in mintues\")\n+                                        .create(\"l\");\n+\n+        Option age = OptionBuilder.withLongOpt(\"age\").hasArg()\n+                                  .withValueSeparator()\n+                                  .withDescription(\"Age (in days) of cache item before being recomputed\")\n+                                  .create(\"a\");\n+\n+        Option server = OptionBuilder.withLongOpt(\"server\").hasArg()\n+                                     .withValueSeparator()\n+                                     .withDescription(\"The NLT server address\")\n+                                     .create(\"s\");\n+\n+        Option numResults = OptionBuilder.withLongOpt(\"results\").hasArg()\n+                                         .withValueSeparator()\n+                                         .withDescription(\"Number of results per item\")\n+                                         .create(\"r\");\n+\n+        Option configFile = OptionBuilder.withLongOpt(\"file\").hasArg()\n+                                         .withValueSeparator()\n+                                         .withDescription(\"Use the specified configuration file\")\n+                                         .create();\n+\n+        Options options = new Options();\n+        options.addOption(help);\n+        options.addOption(version);\n+        options.addOption(newRun);\n+        options.addOption(trackerRun);\n+        options.addOption(timeLimit);\n+        options.addOption(age);\n+        options.addOption(server);\n+        options.addOption(numResults);\n+        options.addOption(configFile);\n+\n+        // create the command line parser\n+        CommandLineParser parser = new PosixParser();\n+\n+        String[] args = new String[] {\n+                \"-v\",\n+                \"-l\",\n+                \"10\",\n+                \"-age\",\n+                \"5\",\n+                \"-file\",\n+                \"filename\"\n+            };\n+\n+        CommandLine line = parser.parse(options, args);\n+        assertTrue(line.hasOption(\"v\"));\n+        assertEquals(line.getOptionValue(\"l\"), \"10\");\n+        assertEquals(line.getOptionValue(\"limit\"), \"10\");\n+        assertEquals(line.getOptionValue(\"a\"), \"5\");\n+        assertEquals(line.getOptionValue(\"age\"), \"5\");\n+        assertEquals(line.getOptionValue(\"file\"), \"filename\");\n+    }\n+}", "timestamp": 1212075575, "metainfo": ""}