{"sha": "5606f004a69c67c4a9dfbe199818ec92ea7f502e", "log": "", "commit": "\n--- a/src/java/org/apache/commons/cli2/validation/EnumValidator.java\n+++ b/src/java/org/apache/commons/cli2/validation/EnumValidator.java\n      * @param values The list of permitted values\n      */\n     public EnumValidator(final Set values) {\n-        this.validValues = values;\n+        setValidValues(values);\n     }\n \n     /**\n      *\n      * @param validValues The Set of valid argument values.\n      */\n-    public void setValidValues(Set validValues) {\n+    protected void setValidValues(Set validValues) {\n         this.validValues = validValues;\n     }\n }\n--- a/src/java/org/apache/commons/cli2/validation/NumberValidator.java\n+++ b/src/java/org/apache/commons/cli2/validation/NumberValidator.java\n     private Number maximum = null;\n \n     /**\n-     * Creates a new NumberValidator.\n-     */\n-    public NumberValidator() {\n-        this(NumberFormat.getInstance());\n-    }\n-\n-    /**\n      * Creates a new NumberValidator based on the specified NumberFormat\n      * @param format the format of numbers to accept\n      */\n     public NumberValidator(final NumberFormat format) {\n-        this.format = format;\n+        setFormat(format);\n     }\n \n     /**\n      */\n     public void validate(final List values) throws InvalidArgumentException {\n         for (final ListIterator i = values.listIterator(); i.hasNext();) {\n-            final String value = (String)i.next();\n+            final String value = (String) i.next();\n \n             final ParsePosition pp = new ParsePosition(0);\n             final Number number = format.parse(value, pp);\n      *\n      * @param format the format being used to validate argument values against.\n      */\n-    public void setFormat(NumberFormat format) {\n+    protected void setFormat(NumberFormat format) {\n         this.format = format;\n     }\n     \n--- a/src/test/org/apache/commons/cli2/validation/DateValidatorTest.java\n+++ b/src/test/org/apache/commons/cli2/validation/DateValidatorTest.java\n \n     public void testFormats() throws InvalidArgumentException {\n         final DateValidator validator = new DateValidator(formats);\n-        assertEquals(\"date formats are incorrect\", formats, validator.getFormats());\n+        assertEquals(\"date format is incorrect\", \n+                     ((SimpleDateFormat)formats.get(0)).toPattern(), \n+                     ((SimpleDateFormat)validator.getFormats()[0]).toPattern());\n+        assertEquals(\"date format is incorrect\", \n+                     ((SimpleDateFormat)formats.get(1)).toPattern(), \n+                     ((SimpleDateFormat)validator.getFormats()[1]).toPattern());\n     }\n \n     public void testMaximumBounds() throws InvalidArgumentException {\n--- a/src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java\n+++ b/src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java\n     private final Set enumSet = new TreeSet(\n             Arrays.asList(\n                     new Object[]{\"red\", \"green\", \"blue\"}));\n-    \n+\n     public void testValidate() throws InvalidArgumentException {\n         final Object[] array = new Object[] { \"red\", \"green\"};\n-        final List list = Arrays.asList(array);\n-        final Validator validator = new EnumValidator(enumSet);\n+        {\n+            final List list = Arrays.asList(array);        \n+            final EnumValidator validator = new EnumValidator(enumSet);\n+            assertEquals(\"valid values are incorrect\", enumSet, validator.getValidValues());\n+            validator.validate(list);\n \n-        validator.validate(list);\n+            final Iterator i = list.iterator();\n+            assertEquals(\"red\", i.next());\n+            assertEquals(\"green\", i.next());\n+            assertFalse(i.hasNext());\n+        }\n+    }\n \n-        final Iterator i = list.iterator();\n-        assertEquals(\"red\", i.next());\n-        assertEquals(\"green\", i.next());\n-        assertFalse(i.hasNext());\n-    }\n-    \n     public void testNonMember() {\n         final Object[] array = new Object[] { \"red\", \"pink\"};\n         final List list = Arrays.asList(array);\n--- a/src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java\n+++ b/src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java\n-/**\n- * Copyright 2003-2004 The Apache Software Foundation\n+/*\n+ * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n \n import junit.framework.TestCase;\n \n+/**\n+ * JUnit test case for NumberValidator.\n+ *\n+ * @author Rob Oxspring\n+ * @author John Keyes\n+ */\n public class NumberValidatorTest extends TestCase {\n     \n     public void testValidate_Number() throws InvalidArgumentException {\n         \n         final Object[] array = \n             new Object[] { \n-                format.format(1d), \n-                format.format(1.07d), \n-                format.format(-.45d)};\n-        \n-        final List list = Arrays.asList(array);\n-        final Validator validator = NumberValidator.getNumberInstance();\n+            format.format(1d), \n+            format.format(1.07d), \n+            format.format(-.45d)};\n \n-        validator.validate(list);\n+        {\n+            final List list = Arrays.asList(array);\n+            final Validator validator = NumberValidator.getNumberInstance();\n \n-        final Iterator i = list.iterator();\n-        assertEquals(1d, ((Number)i.next()).doubleValue(), 0.0001);\n-        assertEquals(1.07d, ((Number)i.next()).doubleValue(), 0.0001);\n-        assertEquals(-.45d, ((Number)i.next()).doubleValue(), 0.0001);\n-        assertFalse(i.hasNext());\n+            validator.validate(list);\n+\n+            final Iterator i = list.iterator();\n+            assertEquals(1d, ((Number)i.next()).doubleValue(), 0.0001);\n+            assertEquals(1.07d, ((Number)i.next()).doubleValue(), 0.0001);\n+            assertEquals(-.45d, ((Number)i.next()).doubleValue(), 0.0001);\n+            assertFalse(i.hasNext());\n+        }\n     }\n \n     public void testValidate_Currency() throws InvalidArgumentException {\n                 format.format(1.07),\n                 format.format(-0.45)};\n         final List list = Arrays.asList(array);\n-        final Validator validator = NumberValidator.getCurrencyInstance();\n+        \n+        final NumberValidator validator = NumberValidator.getCurrencyInstance();\n+        assertEquals(\"incorrect currency format\", format, validator.getFormat());\n \n         validator.validate(list);\n \n         final Object[] array = new Object[] { \"1\", \"107\" };\n         final List list = Arrays.asList(array);\n         final NumberValidator validator = NumberValidator.getIntegerInstance();\n-        validator.setMaximum(new Integer(100));\n+        Integer max = new Integer(100);\n+\n+        validator.setMaximum(max);\n+\n+        assertTrue(\"no minimum set\", validator.getMinimum() == null);\n+        assertEquals(\"incorrect maximum value\", max, validator.getMaximum());\n \n         try {\n             validator.validate(list);\n         final Object[] array = new Object[] { \"107\", \"1\" };\n         final List list = Arrays.asList(array);\n         final NumberValidator validator = NumberValidator.getIntegerInstance();\n-        validator.setMinimum(new Integer(100));\n+        Integer min = new Integer(100);\n+        validator.setMinimum(min);\n+\n+        assertTrue(\"no maximum set\", validator.getMaximum() == null);\n+        assertEquals(\"incorrect minimum value\", min, validator.getMinimum());\n \n         try {\n             validator.validate(list);", "timestamp": 1125874732, "metainfo": ""}