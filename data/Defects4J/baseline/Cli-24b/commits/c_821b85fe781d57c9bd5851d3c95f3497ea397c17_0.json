{"sha": "821b85fe781d57c9bd5851d3c95f3497ea397c17", "log": "added Pete Maddocks fix for options only created with a longopt   ", "commit": "\n--- a/src/java/org/apache/commons/cli/HelpFormatter.java\n+++ b/src/java/org/apache/commons/cli/HelpFormatter.java\n       {\n          option = (Option) i.next();\n          optBuf = new StringBuffer(8);\n-         optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n-         if ( option.hasLongOpt() )\n-         {\n-            optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());\n-         }\n+\n+         if (option.getOpt().equals(\" \"))\n+         {\n+             optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\n+         }\n+         else\n+         {\n+             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n+             if ( option.hasLongOpt() )\n+             {\n+                optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());\n+             }\n+\n+         }\n+\n+\n          if ( option.hasArg() )\n          {\n             //FIXME - should have a way to specify arg name per option\n       for ( Iterator i = prefixList.iterator(); i.hasNext(); )\n       {\n          optBuf = (StringBuffer) i.next();\n-         opt = optBuf.toString();\n+         opt = optBuf.toString().trim();\n          if( opt.indexOf( ',' ) != -1 ) {\n-             opt = opt.substring( optOffset, opt.indexOf( ',', optOffset ) );\n-         }\n-         else {\n-             opt = opt.substring( optOffset, opt.indexOf( ' ', optOffset ) );\n-         }\n-         option = options.getOption( \"-\" + opt );\n+             opt = opt.substring(0, opt.indexOf( ',', optOffset ) );\n+         }\n+         option = options.getOption(opt);\n \n          renderWrappedText(sb, width, nextLineTabStop,\n                            optBuf.append(option.getDescription()).toString());\n    \n    // ----------------------------------------------------------- Inner classes\n \n-   private static class StringBufferComparator\n-   implements Comparator\n-   {\n-      public int compare( Object o1, Object o2 )\n-      {\n-         return ((StringBuffer) o1).toString().compareTo(((StringBuffer) o2).toString());\n-      }\n-   }\n+    private static class StringBufferComparator\n+    implements Comparator\n+    {\n+        public int compare( Object o1, Object o2 )\n+        {\n+            String str1 = stripPrefix(o1.toString());\n+            String str2 = stripPrefix(o2.toString());\n+            return (str1.compareTo(str2));\n+        }\n+\n+        private String stripPrefix(String strOption)\n+        {\n+            // Strip any leading '-' characters\n+            int iStartIndex = strOption.lastIndexOf('-');\n+            if (iStartIndex == -1)\n+            {\n+              iStartIndex = 0;\n+            }\n+            return strOption.substring(iStartIndex);\n+\n+        }\n+    }\n }", "timestamp": 1031601081, "metainfo": ""}