{"sha": "fc0723b7aa9d4f05dd7ac5fb6131efe419da31d1", "log": "bug #12210 fixed   ", "commit": "\n--- a/src/java/org/apache/commons/cli/GnuParser.java\n+++ b/src/java/org/apache/commons/cli/GnuParser.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/GnuParser.java,v 1.8 2002/08/26 20:15:02 jkeyes Exp $\n- * $Revision: 1.8 $\n- * $Date: 2002/08/26 20:15:02 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/GnuParser.java,v 1.9 2002/08/31 17:53:11 jkeyes Exp $\n+ * $Revision: 1.9 $\n+ * $Date: 2002/08/31 17:53:11 $\n  *\n  * ====================================================================\n  *\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Iterator;\n-import java.util.Map;\n-import java.util.Iterator;\n \n /**\n  * The class GnuParser provides an implementation of the \n  *\n  * @author John Keyes (jbjk at mac.com)\n  * @see Parser\n- * @version $Revision: 1.8 $\n+ * @version $Revision: 1.9 $\n  */\n public class GnuParser extends Parser {\n \n                                 boolean stopAtNonOption )\n     {\n         init();\n+        boolean eatTheRest = false;\n+        Option currentOption = null;\n+\n         for( int i = 0; i < arguments.length; i++ ) {\n-            Option option = options.getOption( arguments[i] );\n-            try {\n-                Option specialOption = options.getOption( arguments[i].substring(0,2) );\n-                if( specialOption != null && option == null ) {\n-                    tokens.add( arguments[i].substring(0,2) );\n-                    tokens.add( arguments[i].substring(2) );\n+            if( \"--\".equals( arguments[i] ) ) {\n+                eatTheRest = true;\n+                tokens.add( \"--\" );\n+            }\n+            else if ( \"-\".equals( arguments[i] ) ) {\n+                tokens.add( \"-\" );\n+            }\n+            else if( arguments[i].startsWith( \"-\" ) ) {\n+                Option option = options.getOption( arguments[i] );\n+\n+                // this is not an Option\n+                if( option == null ) {\n+                    // handle special properties Option\n+                    Option specialOption = options.getOption( arguments[i].substring(0,2) );\n+                    if( specialOption != null ) {\n+                        tokens.add( arguments[i].substring(0,2) );\n+                        tokens.add( arguments[i].substring(2) );\n+                    }\n+                    else if( stopAtNonOption ) {\n+                        eatTheRest = true;\n+                        tokens.add( arguments[i] );\n+                    }\n+                    else {\n+                        tokens.add( arguments[i] );\n+                    }\n                 }\n                 else {\n+                    currentOption = option;\n+                    // special option\n+                    Option specialOption = options.getOption( arguments[i].substring(0,2) );\n+                    if( specialOption != null && option == null ) {\n+                        tokens.add( arguments[i].substring(0,2) );\n+                        tokens.add( arguments[i].substring(2) );\n+                    }\n+                    else if( currentOption != null && currentOption.hasArg() ) {\n+                        if( currentOption.hasArg() ) {\n+                            tokens.add( arguments[i] );\n+                            currentOption= null;\n+                        }\n+                        else if ( currentOption.hasArgs() ) {\n+                            tokens.add( arguments[i] );\n+                        }\n+                        else if ( stopAtNonOption ) {\n+                            eatTheRest = true;\n+                            tokens.add( \"--\" );\n+                            tokens.add( arguments[i] );\n+                        }\n+                        else {\n+                            tokens.add( arguments[i] );\n+                        }\n+                    } \n+                    else if (currentOption != null ) {\n+                        tokens.add( arguments[i] );\n+                    } \n+                    else if ( stopAtNonOption ) {\n+                        eatTheRest = true;\n+                        tokens.add( \"--\" );\n+                        tokens.add( arguments[i] );\n+                    }\n+                    else {\n+                        tokens.add( arguments[i] );\n+                    }\n+                }\n+            }\n+            else {\n+                tokens.add( arguments[i] );\n+            }\n+\n+            if( eatTheRest ) {\n+                for( i++; i < arguments.length; i++ ) {\n                     tokens.add( arguments[i] );\n                 }\n-            }\n-            catch( IndexOutOfBoundsException exp ) {\n-                tokens.add( arguments[i] );\n             }\n         }\n         return (String[])tokens.toArray( new String[] {} );\n--- a/src/java/org/apache/commons/cli/Parser.java\n+++ b/src/java/org/apache/commons/cli/Parser.java\n                         cmd.addArg( t );\n                     }\n                 }\n+                else if ( stopAtNonOption && !options.hasOption( t ) ) {\n+                    eatTheRest = true;\n+                    cmd.addArg( t );\n+                }\n                 else {\n                     processOption( t, iterator );\n                 }\n \n             if( eatTheRest ) {\n                 while( iterator.hasNext() ) {\n-                    cmd.addArg( (String)iterator.next() );\n+                    String str = (String)iterator.next();\n+                    if( !\"--\".equals( str ) ) {\n+                        cmd.addArg( str );\n+                    }\n                 }\n             }\n         }\n--- a/src/test/org/apache/commons/cli/BugsTest.java\n+++ b/src/test/org/apache/commons/cli/BugsTest.java\n  * version 1.1, a copy of which has been included with this distribution in\n  * the LICENSE file.\n  * \n- * $Id: BugsTest.java,v 1.4 2002/08/18 19:07:42 jkeyes Exp $\n+ * $Id: BugsTest.java,v 1.5 2002/08/31 17:53:11 jkeyes Exp $\n  */\n \n package org.apache.commons.cli;\n \n     }\n \n+    public void test12210() {\n+        // create the main options object which will handle the first parameter\n+        Options mainOptions = new Options();\n+        // There can be 2 main exclusive options:  -exec|-rep\n+\n+        // Therefore, place them in an option group\n+\n+        String[] argv = new String[] { \"-exec\", \"-execopto\", \"-execoptt\" };\n+        OptionGroup grp = new OptionGroup();\n+\n+        grp.addOption(new Option(\"exec\",false,\"description for this option\"));\n+\n+        grp.addOption(new Option(\"rep\",false,\"description for this option\"));\n+\n+        mainOptions.addOptionGroup(grp);\n+\n+        // for the exec option, there are 2 options...\n+        Options execOptions = new Options();\n+        execOptions.addOption(\"execopto\",false,\" desc\");\n+        execOptions.addOption(\"execoptt\",false,\" desc\");\n+\n+        // similarly, for rep there are 2 options...\n+        Options repOptions = new Options();\n+        repOptions.addOption(\"repopto\",false,\"desc\");\n+        repOptions.addOption(\"repoptt\",false,\"desc\");\n+\n+        // create the parser\n+        GnuParser parser = new GnuParser();\n+\n+        // finally, parse the arguments:\n+\n+        // first parse the main options to see what the user has specified\n+        // We set stopAtNonOption to true so it does not touch the remaining\n+        // options\n+        try {\n+            CommandLine cmd = parser.parse(mainOptions,argv,true);\n+            // get the remaining options...\n+            argv = cmd.getArgs();\n+\n+            if(cmd.hasOption(\"exec\")){\n+                cmd = parser.parse(execOptions,argv,false);\n+                // process the exec_op1 and exec_opt2...\n+                assertTrue( cmd.hasOption(\"execopto\") );\n+                assertTrue( cmd.hasOption(\"execoptt\") );\n+            }\n+            else if(cmd.hasOption(\"rep\")){\n+                cmd = parser.parse(repOptions,argv,false);\n+                // process the rep_op1 and rep_opt2...\n+            }\n+            else {\n+                fail( \"exec option not found\" );\n+            }\n+        }\n+        catch( ParseException exp ) {\n+            fail( \"Unexpected exception: \" + exp.getMessage() );\n+        }\n+    }\n }", "timestamp": 1030816391, "metainfo": ""}