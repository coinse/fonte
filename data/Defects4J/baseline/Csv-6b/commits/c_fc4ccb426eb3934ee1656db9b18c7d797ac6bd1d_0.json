{"sha": "fc4ccb426eb3934ee1656db9b18c7d797ac6bd1d", "log": "Removed CSVParser.nextValue() (SANDBOX-220)  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n         if (records.size() > 0) {\n             ret = new String[records.size()][];\n             records.toArray(ret);\n-        }\n-        return ret;\n-    }\n-\n-    /**\n-     * Parses the CSV according to the given strategy\n-     * and returns the next csv-value as string.\n-     *\n-     * @return next value in the input stream ('null' when end of file)\n-     * @throws IOException on parse error or input read-failure\n-     */\n-    public String nextValue() throws IOException {\n-        Token tkn = nextToken();\n-        String ret = null;\n-        switch (tkn.type) {\n-            case TT_TOKEN:\n-            case TT_EORECORD:\n-                ret = tkn.content.toString();\n-                break;\n-            case TT_EOF:\n-                ret = null;\n-                break;\n-            case TT_INVALID:\n-            default:\n-                // error no token available (or error)\n-                throw new IOException(\n-                        \"(line \" + getLineNumber()\n-                                + \") invalid parse sequence\");\n-                // unreachable: break;\n         }\n         return ret;\n     }\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n         assertTrue(tmp == null);\n     }\n \n-    public void testNextValue() throws IOException {\n-        CSVParser parser = new CSVParser(new StringReader(code));\n-        String tmp = null;\n-        for (int i = 0; i < res.length; i++) {\n-            for (int j = 0; j < res[i].length; j++) {\n-                tmp = parser.nextValue();\n-                assertEquals(res[i][j], tmp);\n-            }\n-        }\n-        tmp = parser.nextValue();\n-        assertTrue(tmp == null);\n-    }\n-\n     public void testGetAllValues() throws IOException {\n         CSVParser parser = new CSVParser(new StringReader(code));\n         String[][] tmp = parser.getAllValues();\n         assertEquals(3, data.length);\n     }\n \n-    public void testLineTokenConsistency() throws IOException {\n-        String code = \"\\nfoo,baar\\n\\r\\n,\\n\\n,world\\r\\n\\n\";\n-        CSVParser parser = new CSVParser(new StringReader(code));\n-        String[][] data = parser.getAllValues();\n-        parser = new CSVParser(new StringReader(code));\n-        CSVParser parser1 = new CSVParser(new StringReader(code));\n-        for (int i = 0; i < data.length; i++) {\n-            assertTrue(Arrays.equals(parser1.getLine(), data[i]));\n-            for (int j = 0; j < data[i].length; j++) {\n-                assertEquals(parser.nextValue(), data[i][j]);\n-            }\n-        }\n-    }\n-\n     // From SANDBOX-153\n     public void testDelimiterIsWhitespace() throws IOException {\n         String code = \"one\\ttwo\\t\\tfour \\t five\\t six\";", "timestamp": 1320850445, "metainfo": ""}