{"sha": "625bafab76ca7053920364045905abc05f3e31fa", "log": "Add CVSRecord.isSet(String) API.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVRecord.java\n+++ b/src/main/java/org/apache/commons/csv/CSVRecord.java\n         if (mapping == null) {\n             throw new IllegalStateException(\"No header mapping was specified, the record values can't be accessed by name\");\n         }\n-\n         final Integer index = mapping.get(name);\n-\n         return index != null ? values[index.intValue()] : null;\n     }\n \n     /**\n-     * Checks whether a given columns is mapped.\n+     * Checks whether a given column is mapped.\n      * \n      * @param name\n      *            the name of the column to be retrieved.\n      */\n     public boolean isMapped(final String name) {\n         return mapping != null ? mapping.containsKey(name) : false;\n+    }\n+    \n+    /**\n+     * Checks whether a given columns is mapped and has a value.\n+     * \n+     * @param name\n+     *            the name of the column to be retrieved.\n+     * @return whether a given columns is mapped.\n+     */\n+    public boolean isSet(final String name) {\n+        return isMapped(name) && mapping.get(name).intValue() < values.length;\n     }\n     \n     public Iterator<String> iterator() {\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n             assertEquals(record.get(2), record.get(\"C\"));\n         }\n \n+        assertFalse(records.hasNext());\n+    }\n+\n+    @Test\n+    public void testMappedButNotSetAsOutlook2007ContactExport() throws Exception {\n+        final Reader in = new StringReader(\"a,b,c\\n1,2\\nx,y,z\");\n+\n+        final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader(\"A\", \"B\", \"C\").parse(in).iterator();\n+\n+        // header record\n+        assertTrue(records.hasNext());\n+        CSVRecord record = records.next();\n+        assertTrue(record.isMapped(\"A\"));\n+        assertTrue(record.isMapped(\"B\"));\n+        assertTrue(record.isMapped(\"C\"));\n+        assertTrue(record.isSet(\"A\"));\n+        assertTrue(record.isSet(\"B\"));\n+        assertTrue(record.isSet(\"C\"));\n+        assertEquals(\"a\", record.get(\"A\"));\n+        assertEquals(\"b\", record.get(\"B\"));\n+        assertEquals(\"c\", record.get(\"C\"));\n+\n+        // 1st record\n+        record = records.next();\n+        assertTrue(record.isMapped(\"A\"));\n+        assertTrue(record.isMapped(\"B\"));\n+        assertTrue(record.isMapped(\"C\"));\n+        assertTrue(record.isSet(\"A\"));\n+        assertTrue(record.isSet(\"B\"));\n+        assertFalse(record.isSet(\"C\"));\n+        assertEquals(\"1\", record.get(\"A\"));\n+        assertEquals(\"2\", record.get(\"B\"));\n+        \n+        // 2nd record\n+        record = records.next();\n+        assertTrue(record.isMapped(\"A\"));\n+        assertTrue(record.isMapped(\"B\"));\n+        assertTrue(record.isMapped(\"C\"));\n+        assertTrue(record.isSet(\"A\"));\n+        assertTrue(record.isSet(\"B\"));\n+        assertTrue(record.isSet(\"C\"));\n+        assertEquals(\"x\", record.get(\"A\"));\n+        assertEquals(\"y\", record.get(\"B\"));\n+        assertEquals(\"z\", record.get(\"C\"));\n+        \n         assertFalse(records.hasNext());\n     }\n ", "timestamp": 1349971671, "metainfo": ""}