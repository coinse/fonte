{"sha": "8a5f777a0e1fc896ba6de71c7af68b32dda2cc39", "log": "CSVParser JavaDoc should be about using the CSVParser and not how to customize CSVFormats. Customizing CSVFormats is subject of CSVFormat JavaDoc.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n  * Because CSV appears in many different dialects, the parser supports many formats by allowing the\n  * specification of a {@link CSVFormat}.\n  *\n+ * The parser works record wise. It is not possible to go back, once a record has been parsed from the input stream.\n+ *\n  * <h4>Creating instances</h4>\n  * There are several static factory methods that can be used to create instances for various types of resources:\n  * <p>\n  *\n  * <h4>Parsing record wise</h4>\n  * <p>\n- * To parse a CSV input with tabs as separators, '\"' (double-quote) as an optional value encapsulator, and comments\n- * starting with '#', you write:\n+ * To parse a CSV input from a file, you write:\n  * </p>\n  *\n  * <pre>\n- * Reader in = new StringReader(&quot;a\\tb\\nc\\td&quot;);\n- * Iterable&lt;CSVRecord&gt; parser = CSVFormat.DEFAULT\n- *     .withCommentStart('#')\n- *     .withDelimiter('\\t')\n- *     .withQuoteChar('\"').parse(in);\n- *  for (CSVRecord csvRecord : parse) {\n- *     ...\n- *  }\n- * </pre>\n- *\n- * <p>\n- * To parse CSV input in a given format like Excel, you write:\n- * </p>\n- *\n- * <pre>\n- * Reader in = new StringReader(\"a;b\\nc;d\");\n- * Iterable&lt;CSVRecord&gt; parser = CSVFormat.EXCEL.parse(in);\n- * for (CSVRecord record : parser) {\n+ * File csvData = new File(&quot;/path/to/csv&quot;);\n+ * CSVParser parser = CSVParser.parse(csvData, CSVFormat.RFC4180);\n+ * for (CSVRecord csvRecord : parser) {\n  *     ...\n  * }\n  * </pre>\n+ *\n+ * <p>\n+ * This will read the parse the contents of the file using the\n+ * <a href=\"http://tools.ietf.org/html/rfc4180\" target=\"_blank\">RFC 4180</a> format.\n+ * </p>\n+ *\n+ * <p>\n+ * To parse CSV input in a format like Excel, you write:\n+ * </p>\n+ *\n+ * <pre>\n+ * CSVParser parser = CSVParser.parse(csvData, CSVFormat.EXCEL);\n+ * for (CSVRecord csvRecord : parser) {\n+ *     ...\n+ * }\n+ * </pre>\n+ *\n+ * <p>\n+ * If the predefined formats don't match the format at hands, custom formats can be defined. More information about\n+ * customising CSVFormats is available in {@link CSVFormat CSVFormat JavaDoc}.\n+ * </p>\n  *\n  * <h4>Parsing completely into memory</h4>\n  * <p>", "timestamp": 1379065495, "metainfo": ""}