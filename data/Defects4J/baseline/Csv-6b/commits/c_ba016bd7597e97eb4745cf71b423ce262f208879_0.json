{"sha": "ba016bd7597e97eb4745cf71b423ce262f208879", "log": "Javadoc.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n  * specification of a {@link CSVFormat}.\n  *\n  * <p>\n- * Parsing of a csv-string having tabs as separators, '\"' as an optional value encapsulator, and comments starting with\n- * '#':\n+ * To parse a CSV input with tabs as separators, '\"' (double-quote) as an optional value encapsulator, \n+ * and comments starting with '#', you write:\n  * </p>\n  *\n  * <pre>\n- * CSVFormat format = new CSVFormat('\\t', '&quot;', '#');\n  * Reader in = new StringReader(&quot;a\\tb\\nc\\td&quot;);\n- * List&lt;CSVRecord&gt; records = new CSVParser(in, format).getRecords();\n+ * Iterable&lt;CSVRecord&gt; parser = CSVFormat.newBuilder()\n+ *     .withCommentStart('#')\n+ *     .withDelimiter('\\t')\n+ *     .withQuoteChar('\"').parse(in);\n+ *  for (CSVRecord csvRecord : parse) {\n+ *     ...\n+ *  }\n  * </pre>\n  *\n  * <p>\n- * Parsing of a csv-string in Excel CSV format, using a for-each loop:\n+ * To parse CSV input in a given format like Excel, you write:\n  * </p>\n  *\n  * <pre>\n  * Reader in = new StringReader(\"a;b\\nc;d\");\n- * CSVParser parser = new CSVParser(in, CSVFormat.EXCEL);\n+ * Iterable&lt;CSVRecord&gt; parser = CSVFormat.EXCEL.parse(in);\n  * for (CSVRecord record : parser) {\n  *     ...\n  * }\n  * </pre>\n- *\n+ * <p>\n+ * You may also get a List of records:\n+ * </p>\n+ * <pre>\n+ * Reader in = new StringReader(\"a;b\\nc;d\");\n+ * CSVParser parser = new CSVParser(in, CSVFormat.EXCEL);\n+ * List&lt;CSVRecord&gt; list = parser.getRecords();\n+ * </pre>\n  * <p>\n  * Internal parser state is completely covered by the format and the reader-state.\n  * </p>", "timestamp": 1364315818, "metainfo": ""}