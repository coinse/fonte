{"sha": "1ae3639d2ca9c31ef07b3edcd2a946e6b60d94b1", "log": "CSV-71 - Add convenience Methods to CSVLexer Added methods to Lexer parent class (updated CSVLexer to follow)  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/Lexer.java\n+++ b/src/main/java/org/apache/commons/csv/Lexer.java\n  */\n abstract class Lexer {\n \n+    private final boolean isEncapsulating;\n+    private final boolean isEscaping;\n+    private final boolean isCommentEnabled;\n+    \n+    private final char delimiter;\n+    private final char escape;\n+    private final char encapsulator;\n+    private final char commmentStart;\n+    \n+    \n     final CSVFormat format;\n     \n     /** The input stream */\n     Lexer(CSVFormat format, ExtendedBufferedReader in) {\n         this.format = format;\n         this.in = in;\n+        this.isEncapsulating = format.isEncapsulating();\n+        this.isEscaping = format.isEscaping();\n+        this.isCommentEnabled = format.isCommentingEnabled();\n+        this.delimiter = format.getDelimiter();\n+        this.escape = format.getEscape();\n+        this.encapsulator = format.getEncapsulator();\n+        this.commmentStart = format.getCommentStart();\n     }\n \n     int getLineNumber() {\n     }\n \n     abstract Token nextToken(Token reusableToken) throws IOException;\n+    \n+    boolean isDelimiter(int c) {\n+        return c == delimiter;\n+    }\n+\n+    boolean isEscape(int c) {\n+        return isEscaping && c == escape;\n+    }\n+\n+    boolean isEncapsulator(int c) {\n+        return isEncapsulating && c == encapsulator;\n+    }\n+\n+    boolean isCommentStart(int c) {\n+        return isCommentEnabled && c == commmentStart;\n+    }\n }", "timestamp": 1332434221, "metainfo": ""}