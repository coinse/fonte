{"sha": "9c5ce3501938cff01d78b7a1fff10a60abe9e0cf", "log": "Fixed PosixParser to stop bursting tokens when a non option character is found (CLI-163)  ", "commit": "\n--- a/src/java/org/apache/commons/cli/PosixParser.java\n+++ b/src/java/org/apache/commons/cli/PosixParser.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.cli;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Iterator;\n+import java.util.List;\n \n /**\n  * The class PosixParser provides an implementation of the \n public class PosixParser extends Parser {\n \n     /** holder for flattened tokens */\n-    private ArrayList tokens = new ArrayList();\n+    private List tokens = new ArrayList();\n \n     /** specifies if bursting should continue */\n     private boolean eatTheRest;\n     private Options options;\n \n     /**\n-     * <p>Resets the members to their original state i.e. remove\n+     * Resets the members to their original state i.e. remove\n      * all of <code>tokens</code> entries, set <code>eatTheRest</code>\n-     * to false and set <code>currentOption</code> to null.</p>\n+     * to false and set <code>currentOption</code> to null.\n      */\n     private void init()\n     {\n      * when an non option is found.\n      * @return The flattened <code>arguments</code> String array.\n      */\n-    protected String[] flatten(Options options, String[] arguments, \n-                               boolean stopAtNonOption)\n+    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n     {\n         init();\n         this.options = options;\n \n         // an iterator for the command line tokens\n         Iterator iter = Arrays.asList(arguments).iterator();\n-        String token;\n \n         // process each command line token\n         while (iter.hasNext())\n         {\n             // get the next command line token\n-            token = (String) iter.next();\n+            String token = (String) iter.next();\n \n             // handle SPECIAL TOKEN\n             if (token.startsWith(\"--\"))\n                 if (token.indexOf('=') != -1)\n                 {\n                     tokens.add(token.substring(0, token.indexOf('=')));\n-                    tokens.add(token.substring(token.indexOf('=') + 1, \n-                                               token.length()));\n+                    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n                 }\n                 else\n                 {\n                 {\n                     processOptionToken(token, stopAtNonOption);\n                 }\n-                else if (options.hasOption(token)) {\n-                \ttokens.add(token);\n+                else if (options.hasOption(token))\n+                {\n+                    tokens.add(token);\n                 }\n                 // requires bursting\n                 else\n     }\n \n     /**\n-     * <p>Adds the remaining tokens to the processed tokens list.</p>\n+     * Adds the remaining tokens to the processed tokens list.\n      *\n      * @param iter An iterator over the remaining tokens\n      */\n      * <p>If there is a current option and it can have an argument\n      * value then add the token to the processed tokens list and \n      * set the current option to null.</p>\n+     *\n      * <p>If there is a current option and it can have argument\n      * values then add the token to the processed tokens list.</p>\n+     *\n      * <p>If there is not a current option add the special token\n      * \"<b>--</b>\" and the current <code>value</code> to the processed\n      * tokens list.  The add all the remaining <code>argument</code>\n      */\n     private void process(String value)\n     {\n-        if ((currentOption != null) && currentOption.hasArg())\n+        if (currentOption != null && currentOption.hasArg())\n         {\n             if (currentOption.hasArg())\n             {\n     }\n \n     /**\n-     * <p>If it is a hyphen then add the hyphen directly to\n-     * the processed tokens list.</p>\n+     * If it is a hyphen then add the hyphen directly to\n+     * the processed tokens list.\n      *\n      * @param hyphen The hyphen token\n      */\n      * <p>If an {@link Option} exists for <code>token</code> then\n      * set the current option and add the token to the processed \n      * list.</p>\n+     *\n      * <p>If an {@link Option} does not exist and <code>stopAtNonOption</code>\n      * is set then ignore the current token and add the remaining tokens\n      * to the processed tokens list directly.</p>\n      */\n     protected void burstToken(String token, boolean stopAtNonOption)\n     {\n-        int tokenLength = token.length();\n-\n-        for (int i = 1; i < tokenLength; i++)\n+        for (int i = 1; i < token.length(); i++)\n         {\n             String ch = String.valueOf(token.charAt(i));\n-            boolean hasOption = options.hasOption(ch);\n-\n-            if (hasOption)\n+\n+            if (options.hasOption(ch))\n             {\n                 tokens.add(\"-\" + ch);\n                 currentOption = options.getOption(ch);\n             else if (stopAtNonOption)\n             {\n                 process(token.substring(i));\n+                break;\n             }\n             else\n             {\n--- a/src/test/org/apache/commons/cli/PosixParserTest.java\n+++ b/src/test/org/apache/commons/cli/PosixParserTest.java\n         assertTrue( \"Confirm  2 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 2);\n     }\n \n+    public void testStopBursting() throws Exception\n+    {\n+        String[] args = new String[] { \"-azc\" };\n+\n+        CommandLine cl = parser.parse(options, args, true);\n+        assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n+        assertFalse( \"Confirm -c is not set\", cl.hasOption(\"c\") );\n+\n+        assertTrue( \"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n+        assertTrue(cl.getArgList().contains(\"zc\"));\n+    }\n+\n     public void testMultiple() throws Exception\n     {\n         String[] args = new String[] { \"-c\",\n                                        \"foobar\",\n                                        \"--bfile\", \"toast\" };\n \n-        CommandLine cl = parser.parse(options,args,\n-                                        true);\n+        CommandLine cl = parser.parse(options,args, true);\n         assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n         assertTrue( \"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n ", "timestamp": 1217201901, "metainfo": ""}