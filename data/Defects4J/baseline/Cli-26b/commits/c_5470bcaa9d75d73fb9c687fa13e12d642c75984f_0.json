{"sha": "5470bcaa9d75d73fb9c687fa13e12d642c75984f", "log": "fix bug 14786, some refactorings   ", "commit": "\n--- a/src/java/org/apache/commons/cli/Option.java\n+++ b/src/java/org/apache/commons/cli/Option.java\n         return this.description;\n     }\n \n-     /** \n-      * <p>Query to see if this Option requires an argument</p>\n-      *\n-      * @return boolean flag indicating if an argument is required\n-      */\n-     public boolean isRequired() {\n-         return this.required;\n-     }\n-\n-     /**\n-      * <p>Sets whether this Option is mandatory.</p>\n-      *\n-      * @param required specifies whether this Option is mandatory\n-      */\n-     public void setRequired( boolean required ) {\n-         this.required = required;\n-     }\n-\n-     /**\n-      * <p>Sets the display name for the argument value.</p>\n-      *\n-      * @param argName the display name for the argument value.\n-      */\n-     public void setArgName( String argName ) {\n-         this.argName = argName;\n-     }\n-\n-     /**\n-      * <p>Gets the display name for the argument value.</p>\n-      *\n-      * @return the display name for the argument value.\n-      */\n-     public String getArgName() {\n-         return this.argName;\n-     }\n-\n-     /**\n-      * <p>Returns whether the display name for the argument value\n-      * has been set.</p>\n-      *\n-      * @return if the display name for the argument value has been\n-      * set.\n-      */\n-     public boolean hasArgName() {\n-         return (this.argName != null && this.argName.length() > 0 );\n-     }\n-\n-     /** \n-      * <p>Query to see if this Option can take many values</p>\n-      *\n-      * @return boolean flag indicating if multiple values are allowed\n-      */\n-     public boolean hasArgs() {\n-         return ( this.numberOfArgs > 1 || this.numberOfArgs == UNLIMITED_VALUES );\n-     }\n-\n-     /** \n-      * <p>Sets the number of argument values this Option can take.</p>\n-      *\n-      * @param num the number of argument values\n-      */\n-     public void setArgs( int num ) {\n-         this.numberOfArgs = num;\n-     }\n-\n-     /**\n-      * <p>Sets the value separator.  For example if the argument value\n-      * was a Java property, the value separator would be '='.</p>\n-      *\n-      * @param sep The value separator.\n-      */\n-     public void setValueSeparator( char sep ) {\n-         this.valuesep = sep;\n-     }\n-\n-     /**\n-      * <p>Returns the value separator character.</p>\n-      *\n-      * @return the value separator character.\n-      */\n-     public char getValueSeparator() {\n-         return this.valuesep;\n-     }\n-\n-     /** \n-      * <p>Returns the number of argument values this Option can take.</p>\n-      *\n-      * @return num the number of argument values\n-      */\n-     public int getArgs( ) {\n-         return this.numberOfArgs;\n-     }\n-\n-    public void clearValues() {\n-        this.values.clear();\n+    /** \n+     * <p>Query to see if this Option requires an argument</p>\n+     *\n+     * @return boolean flag indicating if an argument is required\n+     */\n+    public boolean isRequired() {\n+        return this.required;\n+    }\n+\n+    /**\n+     * <p>Sets whether this Option is mandatory.</p>\n+     *\n+     * @param required specifies whether this Option is mandatory\n+     */\n+    public void setRequired( boolean required ) {\n+        this.required = required;\n+    }\n+\n+    /**\n+     * <p>Sets the display name for the argument value.</p>\n+     *\n+     * @param argName the display name for the argument value.\n+     */\n+    public void setArgName( String argName ) {\n+        this.argName = argName;\n+    }\n+\n+    /**\n+     * <p>Gets the display name for the argument value.</p>\n+     *\n+     * @return the display name for the argument value.\n+     */\n+    public String getArgName() {\n+        return this.argName;\n+    }\n+\n+    /**\n+     * <p>Returns whether the display name for the argument value\n+     * has been set.</p>\n+     *\n+     * @return if the display name for the argument value has been\n+     * set.\n+     */\n+    public boolean hasArgName() {\n+        return (this.argName != null && this.argName.length() > 0 );\n+    }\n+\n+    /** \n+     * <p>Query to see if this Option can take many values</p>\n+     *\n+     * @return boolean flag indicating if multiple values are allowed\n+     */\n+    public boolean hasArgs() {\n+        return this.numberOfArgs > 1 || this.numberOfArgs == UNLIMITED_VALUES;\n+    }\n+\n+    /** \n+     * <p>Sets the number of argument values this Option can take.</p>\n+     *\n+     * @param num the number of argument values\n+     */\n+    public void setArgs( int num ) {\n+        this.numberOfArgs = num;\n+    }\n+\n+    /**\n+     * <p>Sets the value separator.  For example if the argument value\n+     * was a Java property, the value separator would be '='.</p>\n+     *\n+     * @param sep The value separator.\n+     */\n+    public void setValueSeparator( char sep ) {\n+        this.valuesep = sep;\n+    }\n+\n+    /**\n+     * <p>Returns the value separator character.</p>\n+     *\n+     * @return the value separator character.\n+     */\n+    public char getValueSeparator() {\n+        return this.valuesep;\n+    }\n+\n+    /**\n+     * ...\n+     */\n+    public boolean hasValueSeparator() {\n+        return ( this.valuesep > 0 );\n+    }\n+\n+    /** \n+     * <p>Returns the number of argument values this Option can take.</p>\n+     *\n+     * @return num the number of argument values\n+     */\n+    public int getArgs( ) {\n+        return this.numberOfArgs;\n     }\n \n     /**\n      * \n      * @param value is a/the value of this Option\n      */\n-    public boolean addValue( String value ) {\n-\n+    void addValue( String value )\n+    {\n         switch( numberOfArgs ) {\n             case UNINITIALIZED:\n-                return false;\n-            case UNLIMITED_VALUES:\n-                if( getValueSeparator() > 0 ) {\n-                    int index = 0;\n-                    while( (index = value.indexOf( getValueSeparator() ) ) != -1 ) {\n-                        this.values.add( value.substring( 0, index ) );\n-                        value = value.substring( index+1 );\n-                    }\n-                }\n-                this.values.add( value );\n-                return true;\n+                break;\n             default:\n-                if( getValueSeparator() > 0 ) {\n-                    int index = 0;\n-                    while( (index = value.indexOf( getValueSeparator() ) ) != -1 ) {\n-                        if( values.size() > numberOfArgs-1 ) {\n-                            return false;\n-                        }\n-                        this.values.add( value.substring( 0, index ) );\n-                        value = value.substring( index+1 );\n-                    }\n-                }\n-                if( values.size() > numberOfArgs-1 ) {\n-                    return false;\n-                }\n-                this.values.add( value );\n-                return true;\n-        }\n+                processValue( value );\n+        }\n+    }\n+\n+    /**\n+     * <p>Processes the value.  If this Option has a value separator\n+     * the value will have to be parsed into individual tokens.  When\n+     * n-1 tokens have been processed and there are more value separators\n+     * in the value, parsing is ceased and the remaining characters are\n+     * added as a single token.</p>\n+     *\n+     * @since 1.0.1\n+     */\n+    private void processValue( String value ) {\n+\n+        // this Option has a separator character\n+        if( hasValueSeparator() ) {\n+\n+            // get the separator character\n+            char sep = getValueSeparator();\n+\n+            // store the index for the value separator\n+            int index = value.indexOf( sep );\n+\n+            // while there are more value separators\n+            while( index != -1 ) {\n+\n+                // next value to be added \n+                if( values.size() == numberOfArgs-1 ) {\n+                    break;\n+                } \n+\n+                // store\n+                add( value.substring( 0, index ) );\n+\n+                // parse\n+                value = value.substring( index+1 );\n+\n+                // get new index\n+                index = value.indexOf( sep );\n+            }\n+        }\n+\n+        // store the actual value or the last value that has been parsed\n+        add( value );\n+    }\n+\n+    /**\n+     * <p>Add the value to this Option.  If the number of arguments\n+     * is greater than zero and there is enough space in the list then\n+     * add the value.  Otherwise, throw a runtime exception.\n+     * </p>\n+     *\n+     * @since 1.0.1\n+     */\n+    private void add( String value ) {\n+        if( numberOfArgs > 0 && values.size() > numberOfArgs-1 ) {\n+            throw new RuntimeException( \"Cannot add value, list full.\" );\n+        }\n+        // store value\n+        this.values.add( value );\n     }\n \n     /**\n--- a/src/java/org/apache/commons/cli/Options.java\n+++ b/src/java/org/apache/commons/cli/Options.java\n      * @return the resulting Options instance\n      */\n     public Options addOption(Option opt)  {\n-        String shortOpt = opt.getOpt();\n-        \n-        // add it to the long option list\n-        if ( opt.hasLongOpt() ) {\n-            longOpts.put( opt.getLongOpt(), opt );\n-        }\n-        \n-        // if the option is required add it to the required list\n-        if ( opt.isRequired() ) {\n-            requiredOpts.add( opt.getKey() );\n-        }\n-\n-        shortOpts.put( shortOpt, opt );\n-        \n+        String key = opt.getKey();\n+        \n+            // add it to the long option list\n+            if ( opt.hasLongOpt() ) {\n+                longOpts.put( opt.getLongOpt(), opt );\n+            }\n+        \n+            // if the option is required add it to the required list\n+            if ( opt.isRequired() && !requiredOpts.contains( key ) ) {\n+                requiredOpts.add( key );\n+            }\n+            shortOpts.put( key, opt );\n+\n         return this;\n     }\n     \n--- a/src/java/org/apache/commons/cli/Parser.java\n+++ b/src/java/org/apache/commons/cli/Parser.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/Parser.java,v 1.8 2002/11/18 08:41:26 jkeyes Exp $\n- * $Revision: 1.8 $\n- * $Date: 2002/11/18 08:41:26 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/Parser.java,v 1.9 2002/11/25 23:43:40 jkeyes Exp $\n+ * $Revision: 1.9 $\n+ * $Date: 2002/11/25 23:43:40 $\n  *\n  * ====================================================================\n  *\n  *\n  * @author John Keyes (john at integralsource.com)\n  * @see Parser\n- * @version $Revision: 1.8 $\n+ * @version $Revision: 1.9 $\n  */\n public abstract class Parser implements CommandLineParser {\n \n                 break;\n             }\n             // found a value\n-            else if( !opt.addValue( str ) ) {\n-                iter.previous();\n-                break;\n+            else {\n+                try {\n+                    opt.addValue( str ) ;\n+                }\n+                catch( RuntimeException exp ) {\n+                    iter.previous();\n+                    break;\n+                }\n             }\n         }\n \n--- a/src/test/org/apache/commons/cli/BugsTest.java\n+++ b/src/test/org/apache/commons/cli/BugsTest.java\n  * version 1.1, a copy of which has been included with this distribution in\n  * the LICENSE file.\n  * \n- * $Id: BugsTest.java,v 1.11 2002/11/18 08:41:26 jkeyes Exp $\n+ * $Id: BugsTest.java,v 1.12 2002/11/25 23:43:41 jkeyes Exp $\n  */\n \n package org.apache.commons.cli;\n             fail( \"Unexpected exception: \" + exp.getClass().getName() + \":\" + exp.getMessage() );\n         }\n     }\n+\n+    public void test14786() {\n+        Option o = OptionBuilder.isRequired().withDescription(\"test\").create(\"test\");\n+        Options opts = new Options();\n+        opts.addOption(o);\n+        opts.addOption(o);\n+\n+        CommandLineParser parser = new GnuParser();\n+\n+        String[] args = new String[] { \"-test\" };\n+        try {\n+            CommandLine line = parser.parse( opts, args );\n+        }\n+        catch( ParseException exp ) {\n+            fail( \"Unexpected exception:\" + exp.getMessage() );\n+        }\n+    }\n+\n }\n--- a/src/test/org/apache/commons/cli/ValuesTest.java\n+++ b/src/test/org/apache/commons/cli/ValuesTest.java\n         String[] values = new String[] { \"key\", \"value\", \"key\", \"value\" };\n         assertTrue( _cmdline.hasOption( \"j\" ) );\n         assertTrue( _cmdline.hasOption( 'j' ) );\n-        assertTrue( _cmdline.getOptionValues( \"j\" ).length == 4);\n-        assertTrue( _cmdline.getOptionValues( 'j' ).length == 4);\n+        assertEquals( 4, _cmdline.getOptionValues( \"j\" ).length );\n+        assertEquals( 4, _cmdline.getOptionValues( 'j' ).length );\n         assertTrue( Arrays.equals( values, _cmdline.getOptionValues( \"j\" ) ) );\n         assertTrue( Arrays.equals( values, _cmdline.getOptionValues( 'j' ) ) );\n ", "timestamp": 1038267821, "metainfo": ""}