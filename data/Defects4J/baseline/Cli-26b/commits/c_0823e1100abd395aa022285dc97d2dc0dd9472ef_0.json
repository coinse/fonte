{"sha": "0823e1100abd395aa022285dc97d2dc0dd9472ef", "log": "Removed the unused code from PosixParser  ", "commit": "\n--- a/src/java/org/apache/commons/cli/PosixParser.java\n+++ b/src/java/org/apache/commons/cli/PosixParser.java\n     /** specifies if bursting should continue */\n     private boolean eatTheRest;\n \n-    /** holder for the current option */\n-    private Option currentOption;\n-\n     /** the command line Options */\n     private Options options;\n \n     /**\n      * Resets the members to their original state i.e. remove\n-     * all of <code>tokens</code> entries, set <code>eatTheRest</code>\n-     * to false and set <code>currentOption</code> to null.\n+     * all of <code>tokens</code> entries and set <code>eatTheRest</code>\n+     * to false.\n      */\n     private void init()\n     {\n         eatTheRest = false;\n         tokens.clear();\n-        currentOption = null;\n     }\n \n     /**\n \n                 if (!options.hasOption(opt) && stopAtNonOption)\n                 {\n-                    process(token);\n+                    processNonOptionToken(token);\n                 }\n                 else\n                 {\n             }\n             else if (stopAtNonOption)\n             {\n-                process(token);\n+                processNonOptionToken(token);\n             }\n             else\n             {\n     }\n \n     /**\n-     * <p>If there is a current option and it can have an argument\n-     * value then add the token to the processed tokens list and \n-     * set the current option to null.</p>\n-     *\n-     * <p>If there is a current option and it can have argument\n-     * values then add the token to the processed tokens list.</p>\n-     *\n-     * <p>If there is not a current option add the special token\n-     * \"<b>--</b>\" and the current <code>value</code> to the processed\n-     * tokens list.  The add all the remaining <code>argument</code>\n-     * values to the processed tokens list.</p>\n+     * Add the special token \"<b>--</b>\" and the current <code>value</code>\n+     * to the processed tokens list. Then add all the remaining\n+     * <code>argument</code> values to the processed tokens list.\n      *\n      * @param value The current token\n      */\n-    private void process(String value)\n-    {\n-        if (currentOption != null && currentOption.hasArg())\n-        {\n-            if (currentOption.hasArg())\n-            {\n-                tokens.add(value);\n-                currentOption = null;\n-            }\n-            else if (currentOption.hasArgs())\n-            {\n-                tokens.add(value);\n-            }\n-        }\n-        else\n-        {\n-            eatTheRest = true;\n-            tokens.add(\"--\");\n-            tokens.add(value);\n-        }\n+    private void processNonOptionToken(String value)\n+    {\n+        eatTheRest = true;\n+        tokens.add(\"--\");\n+        tokens.add(value);\n     }\n \n     /**\n      * <p>If an {@link Option} exists for <code>token</code> then\n-     * set the current option and add the token to the processed \n-     * list.</p>\n+     * add the token to the processed list.</p>\n      *\n      * <p>If an {@link Option} does not exist and <code>stopAtNonOption</code>\n-     * is set then ignore the current token and add the remaining tokens\n-     * to the processed tokens list directly.</p>\n+     * is set then add the remaining tokens to the processed tokens list\n+     * directly.</p>\n      *\n      * @param token The current option token\n      * @param stopAtNonOption Specifies whether flattening should halt\n      */\n     private void processOptionToken(String token, boolean stopAtNonOption)\n     {\n-        if (options.hasOption(token))\n-        {\n-            currentOption = options.getOption(token);\n-        }\n-        else if (stopAtNonOption)\n+        if (!options.hasOption(token) && stopAtNonOption)\n         {\n             eatTheRest = true;\n         }\n      */\n     protected void burstToken(String token, boolean stopAtNonOption)\n     {\n+        Option currentOption;\n+        \n         for (int i = 1; i < token.length(); i++)\n         {\n             String ch = String.valueOf(token.charAt(i));\n             }\n             else if (stopAtNonOption)\n             {\n-                process(token.substring(i));\n+                processNonOptionToken(token.substring(i));\n                 break;\n             }\n             else", "timestamp": 1217241408, "metainfo": ""}