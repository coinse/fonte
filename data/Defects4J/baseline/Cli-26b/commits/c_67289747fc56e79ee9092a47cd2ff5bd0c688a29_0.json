{"sha": "67289747fc56e79ee9092a47cd2ff5bd0c688a29", "log": "Merged the common parser tests into ParserTestCase Fixed the integration test for Groovy, highlighting a regression in CLI 1.2  ", "commit": "\n--- a/src/test/org/apache/commons/cli/ApplicationTest.java\n+++ b/src/test/org/apache/commons/cli/ApplicationTest.java\n import junit.framework.TestCase;\n \n /**\n+ * This is a collection of tests that test real world applications command lines.\n+ *\n  * <p>\n- * This is a collection of tests that test real world\n- * applications command lines.\n- * </p>\n- * \n- * <p>\n- * The following are the applications that are tested:\n+ * The following applications are tested:\n  * <ul>\n- * <li>Ant</li>\n+ *   <li>ls</li>\n+ *   <li>Ant</li>\n+ *   <li>Groovy</li>\n  * </ul>\n  * </p>\n  *\n             .create('a'));\n \n         Parser parser = new PosixParser();\n-        CommandLine line = parser.parse(options, new String[] { \"-e\", \"println 'hello'\" });\n+        CommandLine line = parser.parse(options, new String[] { \"-e\", \"println 'hello'\" }, true);\n \n         assertTrue(line.hasOption('e'));\n         assertEquals(\"println 'hello'\", line.getOptionValue('e'));\n--- a/src/test/org/apache/commons/cli/BasicParserTest.java\n+++ b/src/test/org/apache/commons/cli/BasicParserTest.java\n \n package org.apache.commons.cli;\n \n-import junit.framework.TestCase;\n-\n /**\n  * @author Emmanuel Bourg\n  * @version $Revision$, $Date$\n  */\n-public class BasicParserTest extends TestCase\n+public class BasicParserTest extends ParserTestCase\n {\n-    public void testParser() throws Exception {\n-        String[] args = new String[] { \"-f\", \"1\" };\n+    public void setUp()\n+    {\n+        super.setUp();\n+        parser = new BasicParser();\n+    }\n \n-        Options options = new Options();\n-        options.addOption(\"f\", \"foo\", true, null);\n+    public void testPropertiesOption() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n \n-        CommandLine cl = new BasicParser().parse(options, args);\n+    public void testShortWithEqual() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n \n-        assertNotNull(\"null CommandLine\", cl);\n-        assertEquals(\"1\", cl.getOptionValue(\"foo\"));\n+    public void testShortWithoutEqual() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n \n+    public void testLongWithEqual() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n+    public void testLongWithEqualSingleDash() throws Exception\n+    {\n+        // not supported by the BasicParser\n     }\n }\n--- a/src/test/org/apache/commons/cli/GnuParserTest.java\n+++ b/src/test/org/apache/commons/cli/GnuParserTest.java\n \n package org.apache.commons.cli;\n \n-import java.util.Arrays;\n-import java.util.List;\n-\n-import junit.framework.TestCase;\n-\n-public class GnuParserTest extends TestCase\n+public class GnuParserTest extends ParserTestCase\n {\n-    private Options options;\n-    private Parser parser;\n-\n     public void setUp()\n     {\n-        options = new Options()\n-            .addOption(\"a\", \"enable-a\", false, \"turn [a] on or off\")\n-            .addOption(\"b\", \"bfile\", true, \"set the value of [b]\")\n-            .addOption(\"c\", \"copt\", false, \"turn [c] on or off\");\n-\n-        parser = new GnuParser( );\n-    }\n-\n-    public void testSimpleShort() throws Exception\n-    {\n-        String[] args = new String[] { \"-a\",\n-                                       \"-b\", \"toast\",\n-                                       \"foo\", \"bar\" };\n-\n-        CommandLine cl = parser.parse(options, args);\n-\n-        assertTrue(\"Confirm -a is set\", cl.hasOption(\"a\"));\n-        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n-        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\"));\n-        assertTrue(\"Confirm size of extra args\", cl.getArgList().size() == 2);\n-    }\n-\n-    public void testSimpleLong() throws Exception\n-    {\n-        String[] args = new String[] { \"--enable-a\",\n-                                       \"--bfile\", \"toast\",\n-                                       \"foo\", \"bar\" };\n-\n-        CommandLine cl = parser.parse(options, args);\n-\n-        assertTrue(\"Confirm -a is set\", cl.hasOption(\"a\"));\n-        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n-        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\"));\n-        assertTrue(\"Confirm size of extra args\", cl.getArgList().size() == 2);\n-    }\n-\n-    public void testUnrecognizedOption() throws Exception\n-    {\n-        String[] args = new String[] { \"-a\", \"-d\", \"-b\", \"toast\", \"foo\", \"bar\" };\n-\n-        try\n-        {\n-            parser.parse(options, args);\n-            fail(\"UnrecognizedOptionException wasn't thrown\");\n-        }\n-        catch (UnrecognizedOptionException e)\n-        {\n-            assertEquals(\"-d\", e.getOption());\n-        }\n-    }\n-\n-    public void testMissingArg() throws Exception\n-    {\n-        String[] args = new String[] { \"-b\" };\n-\n-        boolean caught = false;\n-\n-        try\n-        {\n-            parser.parse(options, args);\n-        }\n-        catch (MissingArgumentException e)\n-        {\n-            caught = true;\n-            assertEquals(\"option missing an argument\", \"b\", e.getOption().getOpt());\n-        }\n-\n-        assertTrue( \"Confirm MissingArgumentException caught\", caught );\n-    }\n-\n-    public void testStop() throws Exception\n-    {\n-        String[] args = new String[] { \"-c\",\n-                                       \"foober\",\n-                                       \"-b\",\n-                                       \"toast\" };\n-\n-        CommandLine cl = parser.parse(options, args, true);\n-        assertTrue(\"Confirm -c is set\", cl.hasOption(\"c\"));\n-        assertTrue(\"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n-    }\n-\n-    public void testMultiple() throws Exception\n-    {\n-        String[] args = new String[] { \"-c\",\n-                                       \"foobar\",\n-                                       \"-b\",\n-                                       \"toast\" };\n-\n-        CommandLine cl = parser.parse(options, args, true);\n-        assertTrue(\"Confirm -c is set\", cl.hasOption(\"c\"));\n-        assertTrue(\"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n-\n-        cl = parser.parse(options, cl.getArgs());\n-\n-        assertTrue(\"Confirm -c is not set\", !cl.hasOption(\"c\"));\n-        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n-        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\"));\n-        assertTrue(\"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n-        assertTrue(\"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\"));\n-    }\n-\n-    public void testMultipleWithLong() throws Exception\n-    {\n-        String[] args = new String[] { \"--copt\",\n-                                       \"foobar\",\n-                                       \"--bfile\", \"toast\" };\n-\n-        CommandLine cl = parser.parse(options,args, true);\n-        assertTrue(\"Confirm -c is set\", cl.hasOption(\"c\"));\n-        assertTrue(\"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n-\n-        cl = parser.parse(options, cl.getArgs());\n-\n-        assertTrue(\"Confirm -c is not set\", !cl.hasOption(\"c\"));\n-        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n-        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\"));\n-        assertTrue(\"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n-        assertTrue(\"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\"));\n-    }\n-\n-    public void testDoubleDash() throws Exception\n-    {\n-        String[] args = new String[] { \"--copt\",\n-                                       \"--\",\n-                                       \"-b\", \"toast\" };\n-\n-        CommandLine cl = parser.parse(options, args);\n-\n-        assertTrue(\"Confirm -c is set\", cl.hasOption(\"c\"));\n-        assertTrue(\"Confirm -b is not set\", !cl.hasOption(\"b\"));\n-        assertTrue(\"Confirm 2 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 2);\n-    }\n-\n-    public void testSingleDash() throws Exception\n-    {\n-        String[] args = new String[] { \"--copt\",\n-                                       \"-b\", \"-\",\n-                                       \"-a\",\n-                                       \"-\" };\n-\n-        CommandLine cl = parser.parse(options, args);\n-\n-        assertTrue(\"Confirm -a is set\", cl.hasOption(\"a\"));\n-        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n-        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"-\"));\n-        assertTrue(\"Confirm 1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n-        assertTrue(\"Confirm value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"-\"));\n-    }\n-\n-    public void testNegativeArgument() throws Exception\n-    {\n-        String[] args = new String[] { \"-a\", \"-1\"} ;\n-\n-        Options options = new Options();\n-        options.addOption(OptionBuilder.hasArg().create(\"a\"));\n-\n-        Parser parser = new GnuParser();\n-        CommandLine cl = parser.parse(options, args);\n-        assertEquals(\"-1\", cl.getOptionValue(\"a\"));\n-    }\n-\n-    public void testShortWithEqual() throws Exception\n-    {\n-        String[] args = new String[] { \"-f=bar\" };\n-\n-        Options options = new Options();\n-        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n-\n-        Parser parser = new GnuParser();\n-        CommandLine cl = parser.parse(options, args);\n-\n-        assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n-    }\n-\n-    public void testShortWithoutEqual() throws Exception\n-    {\n-        String[] args = new String[] { \"-fbar\" };\n-\n-        Options options = new Options();\n-        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n-\n-        Parser parser = new GnuParser();\n-        CommandLine cl = parser.parse(options, args);\n-\n-        assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n-    }\n-\n-    public void testLongWithEqual() throws Exception\n-    {\n-        String[] args = new String[] { \"--foo=bar\" };\n-\n-        Options options = new Options();\n-        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n-\n-        Parser parser = new GnuParser();\n-        CommandLine cl = parser.parse(options, args);\n-\n-        assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n-    }\n-\n-    public void testLongWithEqualSingleDash() throws Exception\n-    {\n-        String[] args = new String[] { \"-foo=bar\" };\n-\n-        Options options = new Options();\n-        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n-\n-        Parser parser = new GnuParser();\n-        CommandLine cl = parser.parse(options, args);\n-\n-        assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n-    }\n-\n-    public void testPropertiesOption() throws Exception\n-    {\n-        String[] args = new String[] { \"-Jsource=1.5\", \"-Jtarget=1.5\", \"foo\" };\n-\n-        Options options = new Options();\n-        options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).create('J'));\n-\n-        Parser parser = new GnuParser();\n-        CommandLine cl = parser.parse(options, args);\n-\n-        List values = Arrays.asList(cl.getOptionValues(\"J\"));\n-        assertNotNull(\"null values\", values);\n-        assertEquals(\"number of values\", 4, values.size());\n-        assertEquals(\"value 1\", \"source\", values.get(0));\n-        assertEquals(\"value 2\", \"1.5\", values.get(1));\n-        assertEquals(\"value 3\", \"target\", values.get(2));\n-        assertEquals(\"value 4\", \"1.5\", values.get(3));\n-        List argsleft = cl.getArgList();\n-        assertEquals(\"Should be 1 arg left\",1,argsleft.size());\n-        assertEquals(\"Expecting foo\",\"foo\",argsleft.get(0));\n+        super.setUp();\n+        parser = new GnuParser();\n     }\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/cli/ParserTestCase.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.cli;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Abstract test case testing common parser features.\n+ *\n+ * @author Emmanuel Bourg\n+ * @version $Revision$, $Date$\n+ */\n+public abstract class ParserTestCase extends TestCase\n+{\n+    protected Parser parser;\n+\n+    protected Options options;\n+\n+    public void setUp()\n+    {\n+        options = new Options()\n+            .addOption(\"a\", \"enable-a\", false, \"turn [a] on or off\")\n+            .addOption(\"b\", \"bfile\", true, \"set the value of [b]\")\n+            .addOption(\"c\", \"copt\", false, \"turn [c] on or off\");\n+    }\n+\n+    public void testSimpleShort() throws Exception\n+    {\n+        String[] args = new String[] { \"-a\",\n+                                       \"-b\", \"toast\",\n+                                       \"foo\", \"bar\" };\n+\n+        CommandLine cl = parser.parse(options, args);\n+\n+        assertTrue(\"Confirm -a is set\", cl.hasOption(\"a\"));\n+        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n+        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\"));\n+        assertTrue(\"Confirm size of extra args\", cl.getArgList().size() == 2);\n+    }\n+\n+    public void testSimpleLong() throws Exception\n+    {\n+        String[] args = new String[] { \"--enable-a\",\n+                                       \"--bfile\", \"toast\",\n+                                       \"foo\", \"bar\" };\n+\n+        CommandLine cl = parser.parse(options, args);\n+\n+        assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n+        assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n+        assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n+        assertTrue( \"Confirm arg of --bfile\", cl.getOptionValue( \"bfile\" ).equals( \"toast\" ) );\n+        assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 2);\n+    }\n+\n+    public void testMultiple() throws Exception\n+    {\n+        String[] args = new String[] { \"-c\",\n+                                       \"foobar\",\n+                                       \"-b\", \"toast\" };\n+\n+        CommandLine cl = parser.parse(options, args, true);\n+        assertTrue(\"Confirm -c is set\", cl.hasOption(\"c\"));\n+        assertTrue(\"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n+\n+        cl = parser.parse(options, cl.getArgs());\n+\n+        assertTrue(\"Confirm -c is not set\", !cl.hasOption(\"c\"));\n+        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n+        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\"));\n+        assertTrue(\"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n+        assertTrue(\"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\"));\n+    }\n+\n+    public void testMultipleWithLong() throws Exception\n+    {\n+        String[] args = new String[] { \"--copt\",\n+                                       \"foobar\",\n+                                       \"--bfile\", \"toast\" };\n+\n+        CommandLine cl = parser.parse(options, args, true);\n+        assertTrue(\"Confirm -c is set\", cl.hasOption(\"c\"));\n+        assertTrue(\"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n+\n+        cl = parser.parse(options, cl.getArgs());\n+\n+        assertTrue(\"Confirm -c is not set\", !cl.hasOption(\"c\"));\n+        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n+        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\"));\n+        assertTrue(\"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n+        assertTrue(\"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\"));\n+    }\n+\n+    public void testUnrecognizedOption() throws Exception\n+    {\n+        String[] args = new String[] { \"-a\", \"-d\", \"-b\", \"toast\", \"foo\", \"bar\" };\n+\n+        try\n+        {\n+            parser.parse(options, args);\n+            fail(\"UnrecognizedOptionException wasn't thrown\");\n+        }\n+        catch (UnrecognizedOptionException e)\n+        {\n+            assertEquals(\"-d\", e.getOption());\n+        }\n+    }    \n+\n+    public void testMissingArg() throws Exception\n+    {\n+        String[] args = new String[] { \"-b\" };\n+\n+        boolean caught = false;\n+\n+        try\n+        {\n+            parser.parse(options, args);\n+        }\n+        catch (MissingArgumentException e)\n+        {\n+            caught = true;\n+            assertEquals(\"option missing an argument\", \"b\", e.getOption().getOpt());\n+        }\n+\n+        assertTrue( \"Confirm MissingArgumentException caught\", caught );\n+    }\n+\n+    public void testDoubleDash() throws Exception\n+    {\n+        String[] args = new String[] { \"--copt\",\n+                                       \"--\",\n+                                       \"-b\", \"toast\" };\n+\n+        CommandLine cl = parser.parse(options, args);\n+\n+        assertTrue(\"Confirm -c is set\", cl.hasOption(\"c\"));\n+        assertTrue(\"Confirm -b is not set\", !cl.hasOption(\"b\"));\n+        assertTrue(\"Confirm 2 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 2);\n+    }\n+\n+    public void testSingleDash() throws Exception\n+    {\n+        String[] args = new String[] { \"--copt\",\n+                                       \"-b\", \"-\",\n+                                       \"-a\",\n+                                       \"-\" };\n+\n+        CommandLine cl = parser.parse(options, args);\n+\n+        assertTrue(\"Confirm -a is set\", cl.hasOption(\"a\"));\n+        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n+        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"-\"));\n+        assertTrue(\"Confirm 1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n+        assertTrue(\"Confirm value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"-\"));\n+    }\n+\n+    public void testStopAtUnexpectedArg() throws Exception\n+    {\n+        String[] args = new String[] { \"-c\",\n+                                       \"foober\",\n+                                       \"-b\",\n+                                       \"toast\" };\n+\n+        CommandLine cl = parser.parse(options, args, true);\n+        assertTrue(\"Confirm -c is set\", cl.hasOption(\"c\"));\n+        assertTrue(\"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n+    }\n+\n+   public void testStopAtExpectedArg() throws Exception\n+    {\n+        String[] args = new String[]{\"-b\", \"foo\"};\n+\n+        CommandLine cl = parser.parse(options, args, true);\n+\n+        assertTrue(\"Confirm -b is set\", cl.hasOption('b'));\n+        assertEquals(\"Confirm -b is set\", \"foo\", cl.getOptionValue('b'));\n+        assertTrue(\"Confirm no extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 0);\n+    }\n+\n+    public void testStopAtNonOptionShort() throws Exception\n+    {\n+        String[] args = new String[]{\"-z\",\n+                                     \"-a\",\n+                                     \"-btoast\"};\n+\n+        CommandLine cl = parser.parse(options, args, true);\n+        assertFalse(\"Confirm -a is not set\", cl.hasOption(\"a\"));\n+        assertTrue(\"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n+    }\n+\n+    public void testStopAtNonOptionLong() throws Exception\n+    {\n+        String[] args = new String[]{\"--zop==1\",\n+                                     \"-abtoast\",\n+                                     \"--b=bar\"};\n+\n+        CommandLine cl = parser.parse(options, args, true);\n+\n+        assertFalse(\"Confirm -a is not set\", cl.hasOption(\"a\"));\n+        assertFalse(\"Confirm -b is not set\", cl.hasOption(\"b\"));\n+        assertTrue(\"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n+    }\n+\n+    public void testNegativeArgument() throws Exception\n+    {\n+        String[] args = new String[] { \"-b\", \"-1\"} ;\n+\n+        CommandLine cl = parser.parse(options, args);\n+        assertEquals(\"-1\", cl.getOptionValue(\"b\"));\n+    }\n+\n+    public void testShortWithEqual() throws Exception\n+    {\n+        String[] args = new String[] { \"-f=bar\" };\n+\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n+\n+        CommandLine cl = parser.parse(options, args);\n+\n+        assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n+    }\n+\n+    public void testShortWithoutEqual() throws Exception\n+    {\n+        String[] args = new String[] { \"-fbar\" };\n+\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n+\n+        CommandLine cl = parser.parse(options, args);\n+\n+        assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n+    }\n+\n+    public void testLongWithEqual() throws Exception\n+    {\n+        String[] args = new String[] { \"--foo=bar\" };\n+\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n+\n+        CommandLine cl = parser.parse(options, args);\n+\n+        assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n+    }\n+\n+    public void testLongWithEqualSingleDash() throws Exception\n+    {\n+        String[] args = new String[] { \"-foo=bar\" };\n+\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n+\n+        CommandLine cl = parser.parse(options, args);\n+\n+        assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n+    }\n+\n+    public void testPropertiesOption() throws Exception\n+    {\n+        String[] args = new String[] { \"-Jsource=1.5\", \"-J\", \"target\", \"1.5\", \"foo\" };\n+\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).create('J'));\n+\n+        CommandLine cl = parser.parse(options, args);\n+\n+        List values = Arrays.asList(cl.getOptionValues(\"J\"));\n+        assertNotNull(\"null values\", values);\n+        assertEquals(\"number of values\", 4, values.size());\n+        assertEquals(\"value 1\", \"source\", values.get(0));\n+        assertEquals(\"value 2\", \"1.5\", values.get(1));\n+        assertEquals(\"value 3\", \"target\", values.get(2));\n+        assertEquals(\"value 4\", \"1.5\", values.get(3));\n+        List argsleft = cl.getArgList();\n+        assertEquals(\"Should be 1 arg left\",1,argsleft.size());\n+        assertEquals(\"Expecting foo\",\"foo\",argsleft.get(0));\n+    }\n+}\n--- a/src/test/org/apache/commons/cli/PosixParserTest.java\n+++ b/src/test/org/apache/commons/cli/PosixParserTest.java\n \n package org.apache.commons.cli;\n \n-import java.util.Arrays;\n-import java.util.List;\n-\n-import junit.framework.TestCase;\n-\n /**\n  * Test case for the PosixParser.\n  *\n  * @version $Revision$, $Date$\n  */\n-public class PosixParserTest extends TestCase\n+public class PosixParserTest extends ParserTestCase\n {\n-    private Options options = null;\n-    private Parser parser = null;\n-\n     public void setUp()\n     {\n-        options = new Options()\n-            .addOption(\"a\", \"enable-a\", false, \"turn [a] on or off\")\n-            .addOption(\"b\", \"bfile\", true, \"set the value of [b]\")\n-            .addOption(\"c\", \"copt\", false, \"turn [c] on or off\");\n-\n+        super.setUp();\n         parser = new PosixParser();\n     }\n \n-    public void testSimpleShort() throws Exception\n-    {\n-        String[] args = new String[] { \"-a\",\n-                                       \"-b\", \"toast\",\n-                                       \"foo\", \"bar\" };\n-\n-        CommandLine cl = parser.parse(options, args);\n-\n-        assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n-        assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n-        assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n-        assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 2);\n-    }\n-\n-    public void testSimpleLong() throws Exception\n-    {\n-        String[] args = new String[] { \"--enable-a\",\n-                                       \"--bfile\", \"toast\",\n-                                       \"foo\", \"bar\" };\n-\n-        CommandLine cl = parser.parse(options, args);\n-\n-        assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n-        assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n-        assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n-        assertTrue( \"Confirm arg of --bfile\", cl.getOptionValue( \"bfile\" ).equals( \"toast\" ) );\n-        assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 2);\n-    }\n-\n-    public void testComplexShort() throws Exception\n+    public void testBursting() throws Exception\n     {\n         String[] args = new String[] { \"-acbtoast\",\n                                        \"foo\", \"bar\" };\n         assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 2);\n     }\n \n-    public void testUnrecognizedOption() throws Exception\n+    public void testUnrecognizedOptionWithBursting() throws Exception\n     {\n         String[] args = new String[] { \"-adbtoast\", \"foo\", \"bar\" };\n \n         }\n     }\n \n-    public void testUnrecognizedOption2() throws Exception\n-    {\n-        String[] args = new String[] { \"-z\", \"-abtoast\", \"foo\", \"bar\" };\n-\n-        try\n-        {\n-            parser.parse(options, args);\n-            fail(\"UnrecognizedOptionException wasn't thrown\");\n-        }\n-        catch (UnrecognizedOptionException e)\n-        {\n-            assertEquals(\"-z\", e.getOption());\n-        }\n-    }\n-\n-    public void testMissingArg() throws Exception\n+    public void testMissingArgWithBursting() throws Exception\n     {\n         String[] args = new String[] { \"-acb\" };\n \n         assertTrue( \"Confirm MissingArgumentException caught\", caught );\n     }\n \n-    public void testStop() throws Exception\n-    {\n-        String[] args = new String[] { \"-c\",\n-                                       \"foober\",\n-                                       \"-btoast\" };\n-\n-        CommandLine cl = parser.parse(options, args, true);\n-        assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n-        assertTrue( \"Confirm  2 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 2);\n-    }\n-\n-    public void testStop2() throws Exception\n-    {\n-        String[] args = new String[]{\"-z\",\n-                                     \"-a\",\n-                                     \"-btoast\"};\n-\n-        CommandLine cl = parser.parse(options, args, true);\n-        assertFalse(\"Confirm -a is not set\", cl.hasOption(\"a\"));\n-        assertTrue(\"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n-    }\n-\n-    public void testStop3() throws Exception\n-    {\n-        String[] args = new String[]{\"--zop==1\",\n-                                     \"-abtoast\",\n-                                     \"--b=bar\"};\n-\n-        CommandLine cl = parser.parse(options, args, true);\n-\n-        assertFalse(\"Confirm -a is not set\", cl.hasOption(\"a\"));\n-        assertFalse(\"Confirm -b is not set\", cl.hasOption(\"b\"));\n-        assertTrue(\"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n-    }\n-\n     public void testStopBursting() throws Exception\n     {\n         String[] args = new String[] { \"-azc\" };\n         assertTrue(cl.getArgList().contains(\"zc\"));\n     }\n \n-    public void testMultiple() throws Exception\n+    public void testStopBursting2() throws Exception\n     {\n         String[] args = new String[] { \"-c\",\n                                        \"foobar\",\n                                        \"-btoast\" };\n \n         CommandLine cl = parser.parse(options, args, true);\n-        assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n-        assertTrue( \"Confirm  2 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 2);\n+        assertTrue(\"Confirm -c is set\", cl.hasOption(\"c\"));\n+        assertTrue(\"Confirm  2 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 2);\n \n-        cl = parser.parse(options, cl.getArgs() );\n+        cl = parser.parse(options, cl.getArgs());\n \n-        assertTrue( \"Confirm -c is not set\", ! cl.hasOption(\"c\") );\n-        assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n-        assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n-        assertTrue( \"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n-        assertTrue( \"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\") );\n-    }\n-\n-    public void testMultipleWithLong() throws Exception\n-    {\n-        String[] args = new String[] { \"--copt\",\n-                                       \"foobar\",\n-                                       \"--bfile\", \"toast\" };\n-\n-        CommandLine cl = parser.parse(options,args, true);\n-        assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n-        assertTrue( \"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n-\n-        cl = parser.parse(options, cl.getArgs() );\n-\n-        assertTrue( \"Confirm -c is not set\", ! cl.hasOption(\"c\") );\n-        assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n-        assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n-        assertTrue( \"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n-        assertTrue( \"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\") );\n-    }\n-\n-    public void testDoubleDash() throws Exception\n-    {\n-        String[] args = new String[] { \"--copt\",\n-                                       \"--\",\n-                                       \"-b\", \"toast\" };\n-\n-        CommandLine cl = parser.parse(options, args);\n-\n-        assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n-        assertTrue( \"Confirm -b is not set\", ! cl.hasOption(\"b\") );\n-        assertTrue( \"Confirm 2 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 2);\n-    }\n-\n-    public void testSingleDash() throws Exception\n-    {\n-        String[] args = new String[] { \"--copt\",\n-                                       \"-b\", \"-\",\n-                                       \"-a\",\n-                                       \"-\" };\n-\n-        CommandLine cl = parser.parse(options, args);\n-\n-        assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n-        assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n-        assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"-\") );\n-        assertTrue( \"Confirm 1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n-        assertTrue( \"Confirm value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"-\") );\n+        assertTrue(\"Confirm -c is not set\", !cl.hasOption(\"c\"));\n+        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n+        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\"));\n+        assertTrue(\"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n+        assertTrue(\"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\"));\n     }\n \n     /**\n \n         Option timeLimit = OptionBuilder.withLongOpt(\"limit\").hasArg()\n                                         .withValueSeparator()\n-                                        .withDescription(\"Set time limit for execution, in mintues\")\n+                                        .withDescription(\"Set time limit for execution, in minutes\")\n                                         .create(\"l\");\n \n         Option age = OptionBuilder.withLongOpt(\"age\").hasArg()\n         assertEquals(line.getOptionValue(\"file\"), \"filename\");\n     }\n \n-    public void testPropertiesOption() throws Exception\n+    public void testLongWithEqualSingleDash() throws Exception\n     {\n-        String[] args = new String[] { \"-Jsource=1.5\", \"-J\", \"target\", \"1.5\", \"foo\" };\n+        // not supported by the PosixParser\n+    }\n \n-        Options options = new Options();\n-        options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).create('J'));\n-\n-        Parser parser = new PosixParser();\n-        CommandLine cl = parser.parse(options, args);\n-\n-        List values = Arrays.asList(cl.getOptionValues(\"J\"));\n-        assertNotNull(\"null values\", values);\n-        assertEquals(\"number of values\", 4, values.size());\n-        assertEquals(\"value 1\", \"source\", values.get(0));\n-        assertEquals(\"value 2\", \"1.5\", values.get(1));\n-        assertEquals(\"value 3\", \"target\", values.get(2));\n-        assertEquals(\"value 4\", \"1.5\", values.get(3));\n-        List argsleft = cl.getArgList();\n-        assertEquals(\"Should be 1 arg left\",1,argsleft.size());\n-        assertEquals(\"Expecting foo\",\"foo\",argsleft.get(0));\n+    public void testShortWithEqual() throws Exception\n+    {\n+        // not supported by the PosixParser\n     }\n }", "timestamp": 1221474338, "metainfo": ""}