{"sha": "7d52b84bd4399872c37c6c0fc3936ff7a7415c6a", "log": "Renaming TestHelpFormatter to the more obvious HelpFormatterTest  ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/cli/HelpFormatterTest.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.cli;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintWriter;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/** \n+ * Test case for the HelpFormatter class \n+ *\n+ * @author Slawek Zachcial\n+ * @author John Keyes ( john at integralsource.com )\n+ * @author brianegge\n+ **/\n+public class HelpFormatterTest extends TestCase\n+{\n+\n+   private static final String EOL = System.getProperty(\"line.separator\");\n+\n+   public static void main( String[] args )\n+   {\n+      String[] testName = { HelpFormatterTest.class.getName() };\n+      junit.textui.TestRunner.main(testName);\n+   }\n+\n+   public static TestSuite suite()\n+   {\n+      return new TestSuite(HelpFormatterTest.class);\n+   }\n+\n+   public HelpFormatterTest( String s )\n+   {\n+      super( s );\n+   }\n+\n+   public void testFindWrapPos()\n+      throws Exception\n+   {\n+      HelpFormatter hf = new HelpFormatter();\n+\n+      String text = \"This is a test.\";\n+      //text width should be max 8; the wrap postition is 7\n+      assertEquals(\"wrap position\", 7, hf.findWrapPos(text, 8, 0));\n+      //starting from 8 must give -1 - the wrap pos is after end\n+      assertEquals(\"wrap position 2\", -1, hf.findWrapPos(text, 8, 8));\n+      //if there is no a good position before width to make a wrapping look for the next one\n+      text = \"aaaa aa\";\n+      assertEquals(\"wrap position 3\", 4, hf.findWrapPos(text, 3, 0));\n+   }\n+\n+   public void testPrintWrapped()\n+      throws Exception\n+   {\n+      StringBuffer sb = new StringBuffer();\n+      HelpFormatter hf = new HelpFormatter();\n+\n+      String text = \"This is a test.\";\n+      String expected;\n+\n+      expected = \"This is a\" + hf.getNewLine() + \"test.\";\n+      hf.renderWrappedText(sb, 12, 0, text);\n+      assertEquals(\"single line text\", expected, sb.toString());\n+\n+      sb.setLength(0);\n+      expected = \"This is a\" + hf.getNewLine() + \"    test.\";\n+      hf.renderWrappedText(sb, 12, 4, text);\n+      assertEquals(\"single line padded text\", expected, sb.toString());\n+\n+      text =\n+         \"aaaa aaaa aaaa\" + hf.getNewLine() +\n+         \"aaaaaa\" + hf.getNewLine() +\n+         \"aaaaa\";\n+\n+      expected = text;\n+      sb.setLength(0);\n+      hf.renderWrappedText(sb, 16, 0, text);\n+      assertEquals(\"multi line text\", expected, sb.toString());\n+\n+      expected =\n+         \"aaaa aaaa aaaa\" + hf.getNewLine() +\n+         \"    aaaaaa\" + hf.getNewLine() +\n+         \"    aaaaa\";\n+      sb.setLength(0);\n+      hf.renderWrappedText(sb, 16, 4, text);\n+      assertEquals(\"multi-line padded text\", expected, sb.toString());\n+   }\n+\n+   public void testPrintOptions()\n+   throws Exception\n+   {\n+       StringBuffer sb = new StringBuffer();\n+       HelpFormatter hf = new HelpFormatter();\n+       final int leftPad = 1;\n+       final int descPad = 3;\n+       final String lpad = hf.createPadding(leftPad);\n+       final String dpad = hf.createPadding(descPad);\n+       Options options = null;\n+       String expected = null;\n+\n+       options = new Options().addOption(\"a\", false, \"aaaa aaaa aaaa aaaa aaaa\");\n+       expected = lpad + \"-a\" + dpad + \"aaaa aaaa aaaa aaaa aaaa\";\n+       hf.renderOptions(sb, 60, options, leftPad, descPad);\n+       assertEquals(\"simple non-wrapped option\", expected, sb.toString());\n+\n+       int nextLineTabStop = leftPad+descPad+\"-a\".length();\n+       expected =\n+           lpad + \"-a\" + dpad + \"aaaa aaaa aaaa\" + hf.getNewLine() +\n+           hf.createPadding(nextLineTabStop) + \"aaaa aaaa\";\n+       sb.setLength(0);\n+       hf.renderOptions(sb, nextLineTabStop+17, options, leftPad, descPad);\n+       assertEquals(\"simple wrapped option\", expected, sb.toString());\n+\n+\n+       options = new Options().addOption(\"a\", \"aaa\", false, \"dddd dddd dddd dddd\");\n+       expected = lpad + \"-a,--aaa\" + dpad + \"dddd dddd dddd dddd\";\n+       sb.setLength(0);\n+       hf.renderOptions(sb, 60, options, leftPad, descPad);\n+       assertEquals(\"long non-wrapped option\", expected, sb.toString());\n+\n+       nextLineTabStop = leftPad+descPad+\"-a,--aaa\".length();\n+       expected =\n+           lpad + \"-a,--aaa\" + dpad + \"dddd dddd\" + hf.getNewLine() +\n+           hf.createPadding(nextLineTabStop) + \"dddd dddd\";\n+       sb.setLength(0);\n+       hf.renderOptions(sb, 25, options, leftPad, descPad);\n+       assertEquals(\"long wrapped option\", expected, sb.toString());\n+\n+       options = new Options().\n+           addOption(\"a\", \"aaa\", false, \"dddd dddd dddd dddd\").\n+           addOption(\"b\", false, \"feeee eeee eeee eeee\");\n+       expected =\n+           lpad + \"-a,--aaa\" + dpad + \"dddd dddd\" + hf.getNewLine() +\n+           hf.createPadding(nextLineTabStop) + \"dddd dddd\" + hf.getNewLine() +\n+           lpad + \"-b      \" + dpad + \"feeee eeee\" + hf.getNewLine() +\n+           hf.createPadding(nextLineTabStop) + \"eeee eeee\";\n+       sb.setLength(0);\n+       hf.renderOptions(sb, 25, options, leftPad, descPad);\n+       assertEquals(\"multiple wrapped options\", expected, sb.toString());\n+   }\n+\n+   public void testAutomaticUsage()\n+   throws Exception\n+   {\n+       HelpFormatter hf = new HelpFormatter();\n+       Options options = null;\n+       String expected = \"usage: app [-a]\";\n+       ByteArrayOutputStream out = new ByteArrayOutputStream( );\n+       PrintWriter pw = new PrintWriter( out );\n+\n+       options = new Options().addOption(\"a\", false, \"aaaa aaaa aaaa aaaa aaaa\");\n+       hf.printUsage( pw, 60, \"app\", options );\n+       pw.flush();\n+       assertEquals(\"simple auto usage\", expected, out.toString().trim());\n+       out.reset();\n+\n+       expected = \"usage: app [-a] [-b]\";\n+       options = new Options().addOption(\"a\", false, \"aaaa aaaa aaaa aaaa aaaa\")\n+       .addOption(\"b\", false, \"bbb\" );\n+       hf.printUsage( pw, 60, \"app\", options );\n+       pw.flush();\n+       assertEquals(\"simple auto usage\", expected, out.toString().trim());\n+       out.reset();\n+   }\n+\n+    // This test ensures the options are properly sorted\n+    // See https://issues.apache.org/jira/browse/CLI-131\n+    public void testPrintUsage() {\n+        Option optionA = new Option(\"a\", \"first\");\n+        Option optionB = new Option(\"b\", \"second\");\n+        Option optionC = new Option(\"c\", \"third\");\n+        Options opts = new Options();\n+        opts.addOption(optionA);\n+        opts.addOption(optionB);\n+        opts.addOption(optionC);\n+        HelpFormatter helpFormatter = new HelpFormatter();\n+        ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();\n+        PrintWriter printWriter = new PrintWriter(bytesOut);\n+        helpFormatter.printUsage(printWriter, 80, \"app\", opts);\n+        printWriter.close();\n+        assertEquals(\"usage: app [-a] [-b] [-c]\" + EOL, bytesOut.toString());\n+    }\n+\n+}", "timestamp": 1181116977, "metainfo": ""}