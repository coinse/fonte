{"sha": "7efb32e5ab2acecf30ca344857c420a4e7133c95", "log": "Renamed GnuParseTest into GnuParserTest + style reformatting  ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/cli/GnuParserTest.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.cli;\n+\n+import junit.framework.TestCase;\n+\n+public class GnuParserTest extends TestCase\n+{\n+    private Options options;\n+    private Parser parser;\n+\n+    public void setUp()\n+    {\n+        options = new Options()\n+            .addOption(\"a\", \"enable-a\", false, \"turn [a] on or off\")\n+            .addOption(\"b\", \"bfile\", true, \"set the value of [b]\")\n+            .addOption(\"c\", \"copt\", false, \"turn [c] on or off\");\n+\n+        parser = new GnuParser( );\n+    }\n+\n+    public void testSimpleShort() throws Exception\n+    {\n+        String[] args = new String[] { \"-a\",\n+                                       \"-b\", \"toast\",\n+                                       \"foo\", \"bar\" };\n+\n+        CommandLine cl = parser.parse(options, args);\n+\n+        assertTrue(\"Confirm -a is set\", cl.hasOption(\"a\"));\n+        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n+        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\"));\n+        assertTrue(\"Confirm size of extra args\", cl.getArgList().size() == 2);\n+    }\n+\n+    public void testSimpleLong() throws Exception\n+    {\n+        String[] args = new String[] { \"--enable-a\",\n+                                       \"--bfile\", \"toast\",\n+                                       \"foo\", \"bar\" };\n+\n+        CommandLine cl = parser.parse(options, args);\n+\n+        assertTrue(\"Confirm -a is set\", cl.hasOption(\"a\"));\n+        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n+        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\"));\n+        assertTrue(\"Confirm size of extra args\", cl.getArgList().size() == 2);\n+    }\n+\n+    public void testExtraOption() throws Exception\n+    {\n+        String[] args = new String[] { \"-a\", \"-d\", \"-b\", \"toast\",\n+                                       \"foo\", \"bar\" };\n+\n+        boolean caught = false;\n+\n+        try\n+        {\n+            CommandLine cl = parser.parse(options, args);\n+\n+            assertTrue(\"Confirm -a is set\", cl.hasOption(\"a\"));\n+            assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n+            assertTrue(\"confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\"));\n+            assertTrue(\"Confirm size of extra args\", cl.getArgList().size() == 3);\n+        }\n+        catch (UnrecognizedOptionException e)\n+        {\n+            caught = true;\n+        }\n+\n+        assertTrue( \"Confirm UnrecognizedOptionException caught\", caught );\n+    }\n+\n+    public void testMissingArg() throws Exception\n+    {\n+        String[] args = new String[] { \"-b\" };\n+\n+        boolean caught = false;\n+\n+        try\n+        {\n+            parser.parse(options, args);\n+        }\n+        catch (MissingArgumentException e)\n+        {\n+            caught = true;\n+        }\n+\n+        assertTrue( \"Confirm MissingArgumentException caught\", caught );\n+    }\n+\n+    public void testStop() throws Exception\n+    {\n+        String[] args = new String[] { \"-c\",\n+                                       \"foober\",\n+                                       \"-b\",\n+                                       \"toast\" };\n+\n+        CommandLine cl = parser.parse(options, args, true);\n+        assertTrue(\"Confirm -c is set\", cl.hasOption(\"c\"));\n+        assertTrue(\"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n+    }\n+\n+    public void testMultiple() throws Exception\n+    {\n+        String[] args = new String[] { \"-c\",\n+                                       \"foobar\",\n+                                       \"-b\",\n+                                       \"toast\" };\n+\n+        CommandLine cl = parser.parse(options, args, true);\n+        assertTrue(\"Confirm -c is set\", cl.hasOption(\"c\"));\n+        assertTrue(\"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n+\n+        cl = parser.parse(options, cl.getArgs());\n+\n+        assertTrue(\"Confirm -c is not set\", !cl.hasOption(\"c\"));\n+        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n+        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\"));\n+        assertTrue(\"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n+        assertTrue(\"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\"));\n+    }\n+\n+    public void testMultipleWithLong() throws Exception\n+    {\n+        String[] args = new String[] { \"--copt\",\n+                                       \"foobar\",\n+                                       \"--bfile\", \"toast\" };\n+\n+        CommandLine cl = parser.parse(options,args, true);\n+        assertTrue(\"Confirm -c is set\", cl.hasOption(\"c\"));\n+        assertTrue(\"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n+\n+        cl = parser.parse(options, cl.getArgs());\n+\n+        assertTrue(\"Confirm -c is not set\", !cl.hasOption(\"c\"));\n+        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n+        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\"));\n+        assertTrue(\"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n+        assertTrue(\"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\"));\n+    }\n+\n+    public void testDoubleDash() throws Exception\n+    {\n+        String[] args = new String[] { \"--copt\",\n+                                       \"--\",\n+                                       \"-b\", \"toast\" };\n+\n+        CommandLine cl = parser.parse(options, args);\n+\n+        assertTrue(\"Confirm -c is set\", cl.hasOption(\"c\"));\n+        assertTrue(\"Confirm -b is not set\", !cl.hasOption(\"b\"));\n+        assertTrue(\"Confirm 2 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 2);\n+    }\n+\n+    public void testSingleDash() throws Exception\n+    {\n+        String[] args = new String[] { \"--copt\",\n+                                       \"-b\", \"-\",\n+                                       \"-a\",\n+                                       \"-\" };\n+\n+        CommandLine cl = parser.parse(options, args);\n+\n+        assertTrue(\"Confirm -a is set\", cl.hasOption(\"a\"));\n+        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n+        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"-\"));\n+        assertTrue(\"Confirm 1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n+        assertTrue(\"Confirm value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"-\"));\n+    }\n+\n+    public void testNegativeArgument() throws Exception\n+    {\n+        String[] args = new String[] { \"-a\", \"-1\"} ;\n+\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.hasArg().create(\"a\"));\n+\n+        Parser parser = new GnuParser();\n+        CommandLine cl = parser.parse(options, args);\n+        assertEquals(\"-1\", cl.getOptionValue(\"a\"));\n+    }\n+}", "timestamp": 1212173977, "metainfo": ""}