{"sha": "6dffb657aa427151ba9bf2b832977c42f8c01f7a", "log": "some more tests   ", "commit": "\n--- a/src/test/org/apache/commons/cli/ValueTest.java\n+++ b/src/test/org/apache/commons/cli/ValueTest.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import java.util.Arrays;\n import java.util.Properties;\n \n public class ValueTest extends TestCase\n \n         opts.addOption( OptionBuilder.hasOptionalArgs( )\n                         .create( 'j' ) );\n+\n+        opts.addOption( OptionBuilder.hasArgs( ).withValueSeparator( ',' )\n+                        .create( 'k' ) );\n \n         String[] args = new String[] { \"-a\",\n             \"-b\", \"foo\",\n \n     public void testLongOptionalNArgValues()\n     {\n-        String[] args = new String[] { \"--hide\", \"house\", \"hair\", \"head\"\n-        };\n-        try\n-        {\n-            CommandLineParser parser = new PosixParser();\n+        String[] args = new String[] { \n+            \"--hide\", \"house\", \"hair\", \"head\"\n+        };\n+\n+        CommandLineParser parser = new PosixParser();\n+\n+        try\n+        {\n             CommandLine cmd = parser.parse(opts,args);\n             assertTrue( cmd.hasOption(\"hide\") );\n             assertEquals( \"house\", cmd.getOptionValue(\"hide\") );\n         }\n     }\n \n-    public void testPropertyValues()\n+    public void testPropertyOptionSingularValue()\n     {\n         Properties properties = new Properties();\n         properties.setProperty( \"hide\", \"seek\" );\n-        try\n-        {\n-            CommandLineParser parser = new PosixParser();\n+\n+        CommandLineParser parser = new PosixParser();\n+        \n+        try\n+        {\n             CommandLine cmd = parser.parse(opts, null, properties);\n             assertTrue( cmd.hasOption(\"hide\") );\n             assertEquals( \"seek\", cmd.getOptionValue(\"hide\") );\n         {\n             fail(\"Cannot setUp() CommandLine: \" + e.toString());\n         }\n+    }\n+\n+    public void testPropertyOptionFlags()\n+    {\n+        Properties properties = new Properties();\n+        properties.setProperty( \"a\", \"true\" );\n+        properties.setProperty( \"c\", \"yes\" );\n+        properties.setProperty( \"e\", \"1\" );\n+\n+        CommandLineParser parser = new PosixParser();\n+        \n+        try\n+        {\n+            CommandLine cmd = parser.parse(opts, null, properties);\n+            assertTrue( cmd.hasOption(\"a\") );\n+            assertTrue( cmd.hasOption(\"c\") );\n+            assertTrue( cmd.hasOption(\"e\") );\n+        }\n+        catch (ParseException e)\n+        {\n+            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n+        }\n+\n+        properties = new Properties();\n+        properties.setProperty( \"a\", \"false\" );\n+        properties.setProperty( \"c\", \"no\" );\n+        properties.setProperty( \"e\", \"0\" );\n+        try\n+        {\n+            CommandLine cmd = parser.parse(opts, null, properties);\n+            assertTrue( !cmd.hasOption(\"a\") );\n+            assertTrue( !cmd.hasOption(\"c\") );\n+            assertTrue( !cmd.hasOption(\"e\") );\n+        }\n+        catch (ParseException e)\n+        {\n+            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n+        }\n+\n+        properties = new Properties();\n+        properties.setProperty( \"a\", \"TRUE\" );\n+        properties.setProperty( \"c\", \"nO\" );\n+        properties.setProperty( \"e\", \"TrUe\" );\n+        try\n+        {\n+            CommandLine cmd = parser.parse(opts, null, properties);\n+            assertTrue( cmd.hasOption(\"a\") );\n+            assertTrue( !cmd.hasOption(\"c\") );\n+            assertTrue( cmd.hasOption(\"e\") );\n+        }\n+        catch (ParseException e)\n+        {\n+            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n+        }\n+\n+        properties = new Properties();\n+        properties.setProperty( \"a\", \"just a string\" );\n+        properties.setProperty( \"e\", \"\" );\n+        try\n+        {\n+            CommandLine cmd = parser.parse(opts, null, properties);\n+            assertTrue( !cmd.hasOption(\"a\") );\n+            assertTrue( !cmd.hasOption(\"c\") );\n+            assertTrue( !cmd.hasOption(\"e\") );\n+        }\n+        catch (ParseException e)\n+        {\n+            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n+        }\n+\n     } \n+\n+    public void testPropertyOptionMultipleValues()\n+    {\n+        Properties properties = new Properties();\n+        properties.setProperty( \"k\", \"one,two\" );\n+\n+        CommandLineParser parser = new PosixParser();\n+        \n+        String[] values = new String[] {\n+            \"one\", \"two\"\n+        };\n+        try\n+        {\n+            CommandLine cmd = parser.parse(opts, null, properties);\n+            assertTrue( cmd.hasOption(\"k\") );\n+            assertTrue( Arrays.equals( values, cmd.getOptionValues('k') ) );\n+        }\n+        catch (ParseException e)\n+        {\n+            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n+        }\n+    }\n \n     public void testPropertyOverrideValues()\n     {", "timestamp": 1038439478, "metainfo": ""}