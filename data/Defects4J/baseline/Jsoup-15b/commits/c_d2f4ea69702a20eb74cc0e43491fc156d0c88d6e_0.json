{"sha": "d2f4ea69702a20eb74cc0e43491fc156d0c88d6e", "log": "Add addClass, removeClass, toggleClass, hasClass to Element and Elements.  Closes #2", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n package org.jsoup.nodes;\n \n import org.apache.commons.lang.Validate;\n+import org.apache.commons.lang.StringUtils;\n import org.jsoup.parser.Parser;\n import org.jsoup.parser.Tag;\n import org.jsoup.select.Collector;\n \n     /**\n      * Get all of the element's class names. E.g. on element {@code <div class=\"header gray\"}>},\n-     * returns a set of two elements {@code \"header\", \"gray\"}.\n+     * returns a set of two elements {@code \"header\", \"gray\"}. Note that modifications to this set are not pushed to\n+     * the backing {@code class} attribute; use the {@link #classNames(java.util.Set)} method to persist them.\n      * @return set of classnames, empty if no class attribute\n      */\n     public Set<String> classNames() {\n         if (classNames == null) {\n             String[] names = className().split(\"\\\\s+\");\n-            classNames = new HashSet<String>(Arrays.asList(names));\n+            classNames = new LinkedHashSet<String>(Arrays.asList(names));\n         }\n         return classNames;\n+    }\n+\n+    /**\n+     Set the element's {@code class} attribute to the supplied class names.\n+     @param classNames set of classes\n+     @return this element, for chaining\n+     */\n+    public Element classNames(Set<String> classNames) {\n+        Validate.notNull(classNames);\n+        attributes.put(\"class\", StringUtils.join(classNames, \" \"));\n+        return this;\n     }\n \n     /**\n      */\n     public boolean hasClass(String className) {\n         return classNames().contains(className);\n+    }\n+\n+    /**\n+     Add a class name to this element's {@code class} attribute.\n+     @param className class name to add\n+     @return this element\n+     */\n+    public Element addClass(String className) {\n+        Validate.notNull(className);\n+\n+        Set<String> classes = classNames();\n+        classes.add(className);\n+        classNames(classes);\n+\n+        return this;\n+    }\n+\n+    /**\n+     Remove a class name from this element's {@code class} attribute.\n+     @param className class name to remove\n+     @return this element\n+     */\n+    public Element removeClass(String className) {\n+        Validate.notNull(className);\n+\n+        Set<String> classes = classNames();\n+        classes.remove(className);\n+        classNames(classes);\n+\n+        return this;\n+    }\n+\n+    /**\n+     Toggle a class name on this element's {@code class} attribute: if present, remove it; otherwise add it.\n+     @param className class name to toggle\n+     @return this element\n+     */\n+    public Element toggleClass(String className) {\n+        Validate.notNull(className);\n+\n+        Set<String> classes = classNames();\n+        if (classes.contains(className))\n+            classes.remove(className);\n+        else\n+            classes.add(className);\n+        classNames(classes);\n+\n+        return this;\n     }\n \n     void outerHtml(StringBuilder accum) {\n--- a/src/main/java/org/jsoup/select/Elements.java\n+++ b/src/main/java/org/jsoup/select/Elements.java\n     }\n \n     /**\n-     Checks if the first matched value has this attribute set.\n+     Checks if any of the matched elements have this attribute set.\n      @param attributeKey attribute key\n-     @return true if the first element has the attribute; false if it doesn't, or if no elements were matched.\n+     @return true if any of the elements have the attribute; false if none do.\n      */\n     public boolean hasAttr(String attributeKey) {\n-        return !contents.isEmpty() && first().hasAttr(attributeKey);\n+        for (Element element : contents) {\n+            if (element.hasAttr(attributeKey))\n+                return true;\n+        }\n+        return false;\n     }\n \n     /**\n             element.removeAttr(attributeKey);\n         }\n         return this;\n+    }\n+\n+    /**\n+     Add the class name to every matched element's {@code class} attribute.\n+     @param className class name to add\n+     @return this\n+     */\n+    public Elements addClass(String className) {\n+        for (Element element : contents) {\n+            element.addClass(className);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     Remove the class name from every matched element's {@code class} attribute, if present.\n+     @param className class name to remove\n+     @return this\n+     */\n+    public Elements removeClass(String className) {\n+        for (Element element : contents) {\n+            element.removeClass(className);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     Toggle the class name on every matched element's {@code class} attribute.\n+     @param className class name to add if missing, or remove if present, from every element.\n+     @return this\n+     */\n+    public Elements toggleClass(String className) {\n+        for (Element element : contents) {\n+            element.toggleClass(className);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     Determine if any of the matched elements have this class name set in their {@code class} attribute.\n+     @param className class name to check for\n+     @return true if any do, false if none do\n+     */\n+    public boolean hasClass(String className) {\n+        for (Element element : contents) {\n+            if (element.hasClass(className))\n+                return true;\n+        }\n+        return false;\n     }\n     \n     /**\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n         assertFalse(doc.hasClass(\"mellow\"));\n     }\n \n+    @Test public void testClassUpdates() {\n+        Document doc = Jsoup.parse(\"<div class='mellow yellow'></div>\");\n+        Element div = doc.select(\"div\").first();\n+\n+        div.addClass(\"green\");\n+        assertEquals(\"mellow yellow green\", div.className());\n+        div.removeClass(\"red\"); // noop\n+        div.removeClass(\"yellow\");\n+        assertEquals(\"mellow green\", div.className());\n+        div.toggleClass(\"green\").toggleClass(\"red\");\n+        assertEquals(\"mellow red\", div.className());\n+    }\n+\n     @Test public void testOuterHtml() {\n         Document doc = Jsoup.parse(\"<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there\");\n         assertEquals(\"<html><head></head><body><div title=\\\"Tags &amp;c.\\\"><img src=\\\"foo.png\\\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>\",\n--- a/src/test/java/org/jsoup/select/ElementsTest.java\n+++ b/src/test/java/org/jsoup/select/ElementsTest.java\n         assertEquals(\"classy\", ps.last().attr(\"style\"));\n         assertEquals(\"bar\", ps.last().attr(\"class\"));\n     }\n+\n+    @Test public void classes() {\n+        Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\");\n+\n+        Elements els = doc.select(\"p\");\n+        assertTrue(els.hasClass(\"red\"));\n+        assertFalse(els.hasClass(\"blue\"));\n+        els.addClass(\"blue\");\n+        els.removeClass(\"yellow\");\n+        els.toggleClass(\"mellow\");\n+\n+        assertEquals(\"blue\", els.get(0).className());\n+        assertEquals(\"red green blue mellow\", els.get(1).className());\n+    }\n     \n     @Test public void text() {\n         String h = \"<div><p>Hello<p>there<p>world</div>\";", "timestamp": 1309605110, "metainfo": ""}