{"sha": "36be16cd662f56ea0fc01bedf14c8651ed74776f", "log": "Cleaner javadoc", "commit": "\n--- a/src/main/java/org/jsoup/safety/Cleaner.java\n+++ b/src/main/java/org/jsoup/safety/Cleaner.java\n \n import java.util.List;\n \n+/**\n+ The whitelist based HTML cleaner. Use to ensure that end-user provided HTML contains only the elements and attributes\n+ that you are expecting; no junk, and no cross-site scripting attacks!\n+ <p/>\n+ The HTML cleaner parses the input as HTML and then runs it through a white-list, so the output HTML can only contain\n+ HTML that is allowed by the whitelist.\n+ <p/>\n+ It is assumed that the input HTML is a body fragment; the clean methods only pull from the source's body, and the\n+ canned white-lists only allow body contained tags.\n+ <p/>\n+ Rather than interacting directly with a Cleaner object, generally see the {@code clean} methods in {@link org.jsoup.Jsoup}.\n+ */\n public class Cleaner {\n     private Whitelist whitelist;\n \n+    /**\n+     Create a new cleaner, that sanitizes documents using the supplied whitelist.\n+     @param whitelist white-list to clean with\n+     */\n     public Cleaner(Whitelist whitelist) {\n         Validate.notNull(whitelist);\n         this.whitelist = whitelist;\n--- a/src/main/java/org/jsoup/safety/Whitelist.java\n+++ b/src/main/java/org/jsoup/safety/Whitelist.java\n /**\n  Whitelists define what HTML (elements and attributes) to allow through the cleaner. Everything else is removed.\n  <p/>\n- Pick one of the defaults ({@link #none}, {@link #simpleText}, {@link #basic}, {@link #basicWithImages}, or {@link\n-#relaxed}), and either use as-is, or use the {@link #addTags}, {@link #addAttributes}, {@link #addEnforcedAttribute},\n- and {@link #addProtocols} methods to tweak the whitelist as necessary.\n+ Start with one of the defaults:\n+ <ul>\n+ <li>{@link #none}\n+ <li>{@link #simpleText}\n+ <li>{@link #basic}\n+ <li>{@link #basicWithImages}\n+ <li>{@link #relaxed}\n+ </ul>\n+ <p/>\n+ If you need to allow more through (please be careful!), tweak a base whitelist with:\n+ <ul>\n+ <li>{@link #addTags}\n+ <li>{@link #addAttributes}\n+ <li>{@link #addEnforcedAttribute}\n+ <li>{@link #addProtocols}\n+ </ul>\n  <p/>\n  The cleaner and these whitelists assume that you want to clean a <code>body</code> fragment of HTML (to add user\n  supplied HTML into a templated page), and not to clean a full HTML document. If the latter is the case, either wrap the", "timestamp": 1309605108, "metainfo": ""}