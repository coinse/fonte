{"sha": "83b8d1a6c8db2d34fbb344ae3125781978910725", "log": "Initial Cleaner implementation.", "commit": "\n--- a/src/main/java/org/jsoup/Jsoup.java\n+++ b/src/main/java/org/jsoup/Jsoup.java\n \n import org.jsoup.nodes.Document;\n import org.jsoup.parser.Parser;\n+import org.jsoup.safety.Cleaner;\n+import org.jsoup.safety.Whitelist;\n \n /**\n  * Jsoup main entry point.\n     public static Document parse(String html, String baseUri) {\n         return Parser.parse(html, baseUri);\n     }\n+\n     public static Document parse(String html) {\n         return Parser.parse(html, \"\");\n     }\n+\n+    public static String clean(String html, Whitelist whitelist) {\n+        Document dirty = Jsoup.parse(html);\n+        Cleaner cleaner = new Cleaner(whitelist);\n+        Document clean = cleaner.clean(dirty);\n+        return clean.getBody().html();\n+    }\n }\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n package org.jsoup.nodes;\n \n+import org.apache.commons.lang.Validate;\n import org.jsoup.parser.StartTag;\n import org.jsoup.parser.Tag;\n \n \n     public Document(String baseUri) {\n         super(new StartTag(Tag.valueOf(\"#root\"), baseUri));\n+    }\n+\n+    /**\n+     Create a valid, empty shell of a document, suitable for adding more elements to (without parsing).\n+     @param baseUri baseUri of document\n+     @return document with html, head, and body elements.\n+     */\n+    static public Document createShell(String baseUri) {\n+        Validate.notNull(baseUri);\n+\n+        Document doc = new Document(baseUri);\n+        Element html = doc.createElement(Tag.valueOf(\"html\"));\n+        Element head = doc.createElement(Tag.valueOf(\"head\"));\n+        Element body = doc.createElement(Tag.valueOf(\"body\"));\n+\n+        doc.addChild(html);\n+        html.addChild(head);\n+        html.addChild(body);\n+\n+        return doc;\n     }\n \n     public Element getHead() {\n         this.title = title;\n     }\n \n+    public Element createElement(Tag tag) {\n+        return new Element(tag, baseUri());\n+    }\n+\n     @Override\n     public String outerHtml() {\n         return super.html(); // no outer wrapper tag\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n         super(startTag.getBaseUri(), startTag.getAttributes());\n         this.tag = startTag.getTag();\n         elementChildren = new ArrayList<Element>();\n+    }\n+\n+    public Element(Tag tag, String baseUri) {\n+        this(new StartTag(tag, baseUri));\n     }\n \n     public String nodeName() {\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n     Node parentNode;\n     final List<Node> childNodes;\n     final Attributes attributes;\n-    final String baseUri;\n+    String baseUri;\n \n     /**\n      Create a new node.\n \n     public String baseUri() {\n         return baseUri;\n+    }\n+\n+    public void setBaseUri(String baseUri) {\n+        Validate.notNull(baseUri);\n+        this.baseUri = baseUri;\n     }\n \n     public String absUrl(String attribute) {\n--- a/src/main/java/org/jsoup/parser/Parser.java\n+++ b/src/main/java/org/jsoup/parser/Parser.java\n         // <base href>: update the base uri\n         if (child.tagName().equals(\"base\")) {\n             baseUri = child.absUrl(\"href\");\n+            doc.setBaseUri(baseUri); // set on the doc so doc.createElement(Tag) will get updated base\n         }\n \n         addChildToParent(child, isEmptyElement);\n--- a/src/main/java/org/jsoup/safety/Cleaner.java\n+++ b/src/main/java/org/jsoup/safety/Cleaner.java\n package org.jsoup.safety;\n \n+import org.apache.commons.lang.Validate;\n+import org.jsoup.nodes.*;\n+import org.jsoup.parser.StartTag;\n+import org.jsoup.parser.Tag;\n+\n+import java.util.List;\n+\n public class Cleaner {\n-    \n+    private Whitelist whitelist;\n+\n+    public Cleaner(Whitelist whitelist) {\n+        Validate.notNull(whitelist);\n+        this.whitelist = whitelist;\n+    }\n+\n+    /**\n+     Creates a new, clean document, from the original dirty document, containing only elements allowed by the whitelist.\n+     The original document is not modified. Only elements from the dirt document's <code>body</code> are used.\n+     @param dirtyDocument Untrusted base document to clean.\n+     @return cleaned document.\n+     */\n+    public Document clean(Document dirtyDocument) {\n+        Validate.notNull(dirtyDocument);\n+\n+        Document clean = Document.createShell(dirtyDocument.baseUri());\n+        copySafeNodes(dirtyDocument.getBody(), clean.getBody());\n+\n+        return clean;\n+    }\n+\n+    private void copySafeNodes(Element source, Element dest) {\n+        List<Node> sourceChildren = source.childNodes();\n+\n+        for (Node sourceChild : sourceChildren) {\n+            if (sourceChild instanceof Element) {\n+                Element sourceEl = (Element) sourceChild;\n+\n+                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n+                    Element destChild = createSafeElement(sourceEl);\n+                    dest.addChild(destChild);\n+                    copySafeNodes(sourceEl, destChild); // recurs\n+                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n+                    copySafeNodes(sourceEl, dest);\n+                }\n+            } else if (sourceChild instanceof TextNode) {\n+                TextNode sourceText = (TextNode) sourceChild;\n+                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n+                dest.addChild(destText);\n+            } // else, we don't care about comments, xml proc instructions, etc\n+        }\n+    }\n+\n+    private Element createSafeElement(Element sourceEl) {\n+        String sourceTag = sourceEl.tagName();\n+        Attributes destAttrs = new Attributes();\n+        Element dest = new Element(new StartTag(Tag.valueOf(sourceTag), sourceEl.baseUri(), destAttrs));\n+\n+        Attributes sourceAttrs = sourceEl.getAttributes();\n+        for (Attribute sourceAttr : sourceAttrs) {\n+            if (whitelist.isSafeAttribute(sourceTag, sourceAttr))\n+                destAttrs.put(sourceAttr);\n+        }\n+        Attributes enforcedAttrs = whitelist.getEnforcedAttributes(sourceTag);\n+        destAttrs.mergeAttributes(enforcedAttrs);\n+        return dest;\n+    }\n+\n }\n--- a/src/main/java/org/jsoup/safety/Whitelist.java\n+++ b/src/main/java/org/jsoup/safety/Whitelist.java\n  */\n \n import org.apache.commons.lang.Validate;\n+import org.jsoup.nodes.Attribute;\n+import org.jsoup.nodes.Attributes;\n \n import java.util.HashMap;\n import java.util.HashSet;\n         return this;\n     }\n \n+    boolean isSafeTag(String tag) {\n+        return tagNames.contains(TagName.valueOf(tag));\n+    }\n+\n+    boolean isSafeAttribute(String tagName, Attribute attr) {\n+        TagName tag = TagName.valueOf(tagName);\n+        AttributeKey key = AttributeKey.valueOf(attr.getKey());\n+        AttributeValue value = AttributeValue.valueOf(attr.getValue());\n+\n+        if (attributes.containsKey(tag)) {\n+            if (attributes.get(tag).contains(key)) {\n+                if (protocols.containsKey(tag)) {\n+                    Map<AttributeKey, Set<Protocol>> attrProts = protocols.get(tag);\n+                    // ok if not defined protocol; otherwise test\n+                    return !attrProts.containsKey(key) || testValidProtocol(value, attrProts.get(key));\n+                } else { // attribute found, no protocols defined, so OK\n+                    return true;\n+                }\n+            }\n+        } else { // no attributes defined for tag, try :all tag\n+            return !tagName.equals(\":all\") && isSafeAttribute(\":all\", attr);\n+        }\n+        return false;\n+    }\n+\n+    private boolean testValidProtocol(AttributeValue value, Set<Protocol> protocols) {\n+        // todo: use the absUrl method and test this is a good URL\n+        for (Protocol protocol : protocols) {\n+            String prot = protocol.toString() + \":\";\n+            if (value.toString().toLowerCase().startsWith(prot)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    Attributes getEnforcedAttributes(String tagName) {\n+        Attributes attrs = new Attributes();\n+        TagName tag = TagName.valueOf(tagName);\n+        if (enforcedAttributes.containsKey(tag)) {\n+            Map<AttributeKey, AttributeValue> keyVals = enforcedAttributes.get(tag);\n+            for (Map.Entry<AttributeKey, AttributeValue> entry : keyVals.entrySet()) {\n+                attrs.put(entry.getKey().toString(), entry.getValue().toString());\n+            }\n+        }\n+        return attrs;\n+    }\n+    \n     // named types for config. All just hold strings, but here for my sanity.\n \n     static class TagName extends TypedValue {\n--- /dev/null\n+++ b/src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java\n+package org.jsoup.org.jsoup.safety;\n+\n+import org.jsoup.Jsoup;\n+import org.jsoup.safety.Whitelist;\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+\n+/**\n+ Tests for the cleaner.\n+\n+ @author Jonathan Hedley, jonathan@hedley.net */\n+public class CleanerTest {\n+    @Test public void simpleBehaviourTest() {\n+        String h = \"<div><p class=foo><a href='http://evil.com'>Hello <b id=bar>there</b>!</a></div>\";\n+        String cleanHtml = Jsoup.clean(h, Whitelist.simpleText());\n+\n+        assertEquals(\"Hello <b>there</b>!\", cleanHtml);\n+    }\n+\n+    @Test public void basicBehaviourTest() {\n+        String h = \"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\";\n+        String cleanHtml = Jsoup.clean(h, Whitelist.basic());\n+\n+        assertEquals(\"<p><a rel=\\\"nofollow\\\">Dodgy</a> <a href=\\\"HTTP://nice.com\\\" rel=\\\"nofollow\\\">Nice</a></p><blockquote>Hello</blockquote>\", cleanHtml);\n+    }\n+}\n--- a/src/test/java/org/jsoup/parser/ParserTest.java\n+++ b/src/test/java/org/jsoup/parser/ParserTest.java\n     @Test public void handlesBaseTags() {\n         String h = \"<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=4>#</a>\";\n         Document doc = Jsoup.parse(h, \"http://foo/\");\n-        assertEquals(\"http://foo/\", doc.baseUri());\n+        assertEquals(\"http://bar\", doc.baseUri()); // gets updated as base changes, so doc.createElement has latest.\n \n         Elements anchors = doc.getElementsByTag(\"a\");\n         assertEquals(3, anchors.size());", "timestamp": 1309605104, "metainfo": ""}