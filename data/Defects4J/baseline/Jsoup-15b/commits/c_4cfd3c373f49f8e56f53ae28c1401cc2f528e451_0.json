{"sha": "4cfd3c373f49f8e56f53ae28c1401cc2f528e451", "log": "Implemented parse from URL.", "commit": "\n--- a/src/main/java/org/jsoup/DataUtil.java\n+++ b/src/main/java/org/jsoup/DataUtil.java\n package org.jsoup;\n \n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n-import java.io.Reader;\n+import org.apache.commons.lang.Validate;\n+\n+import java.io.*;\n+import java.net.URL;\n+import java.net.HttpURLConnection;\n \n /**\n  * Internal static utilities for handling data.\n      * @throws IOException\n      */\n     static String load(File in, String charsetName) throws IOException {        \n+        InputStream inStream = new FileInputStream(in);\n+        String data = readInputStream(inStream, charsetName);\n+        inStream.close();\n+        return data;\n+    }\n+\n+    /**\n+     Fetches a URL and gets as a string.\n+     @param url\n+     @param timeoutMillis\n+     @return\n+     @throws IOException\n+     */\n+    static String load(URL url, int timeoutMillis) throws IOException {\n+        String protocol = url.getProtocol();\n+        Validate.isTrue(protocol.equals(\"http\") || protocol.equals(\"https\"), \"Only http & https protocols supported\");\n+\n+        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n+        conn.setInstanceFollowRedirects(true);\n+        conn.setConnectTimeout(timeoutMillis);\n+        conn.setReadTimeout(timeoutMillis);\n+        conn.connect();\n+\n+        int res = conn.getResponseCode();\n+        if (res != HttpURLConnection.HTTP_OK)\n+            throw new IOException(res + \" error loading URL \" + url.toString());\n+        InputStream inStream = new BufferedInputStream(conn.getInputStream());\n+        String charSet = \"UTF-8\"; // todo[must]: get from content-encoding, or http-equiv (two-pass?)\n+\n+        String data = readInputStream(inStream, charSet);\n+        inStream.close();\n+        return data;\n+    }\n+\n+    private static String readInputStream(InputStream inStream, String charsetName) throws IOException {\n         char[] buffer = new char[0x20000]; // ~ 130K\n         StringBuilder data = new StringBuilder(0x20000);\n-        InputStream inStream = new FileInputStream(in);\n         Reader inReader = new InputStreamReader(inStream, charsetName);\n         int read;\n         do {\n             if (read > 0) {\n                 data.append(buffer, 0, read);\n             }\n-            \n+\n         } while (read >= 0);\n-        \n-        return data.toString();        \n+\n+        return data.toString();\n     }\n     \n+    \n }\n--- a/src/main/java/org/jsoup/Jsoup.java\n+++ b/src/main/java/org/jsoup/Jsoup.java\n \n import java.io.File;\n import java.io.IOException;\n+import java.net.URL;\n \n import org.jsoup.nodes.Document;\n import org.jsoup.parser.Parser;\n      */\n     public static Document parse(String html) {\n         return Parser.parse(html, \"\");\n+    }\n+\n+    /**\n+     Fetch a URL, and parse it as HTML.\n+     @param url URL to fetch (with a GET). The protocol muse be {@code http} or {@code https}.\n+     @param timeoutMillis Connection and read timeout, in milliseconds. If exceeded, IOException is thrown.\n+     @return The parsed HTML.\n+     @throws IOException If the final server response != 200 (redirects are followed), or if there's an error reading\n+        the response stream.\n+     */\n+    public static Document parse(URL url, int timeoutMillis) throws IOException {\n+        String html = DataUtil.load(url, timeoutMillis);\n+        return parse(html, url.toExternalForm());\n     }\n     \n     /**\n--- /dev/null\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+package org.jsoup.integration;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.Jsoup;\n+\n+import java.net.URL;\n+import java.io.IOException;\n+\n+/**\n+ Tests the URL connection. Not enabled by default, so tests don't require network connection.\n+\n+ @author Jonathan Hedley, jonathan@hedley.net */\n+public class UrlConnectTest {\n+    // @Test // uncomment to enable test\n+    public void testFetchURl() throws IOException {\n+        String url = \"http://www.google.com\"; // no trailing / to force redir\n+        Document doc = Jsoup.parse(new URL(url), 10*1000);\n+        assertTrue(doc.title().contains(\"Google\"));\n+    }\n+}", "timestamp": 1309605107, "metainfo": ""}