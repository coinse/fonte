{"sha": "b1edd537c70143026ebb9eb2c9eca0d7417a398d", "log": "CSVWriter.writeValue does not use value delimiter (SANDBOX-243).  ", "commit": "\n--- a/src/java/org/apache/commons/csv/writer/CSVWriter.java\n+++ b/src/java/org/apache/commons/csv/writer/CSVWriter.java\n                 // value to big..\n                 value = value.substring(0, field.getSize());\n             }\n-            if (!config.isValueDelimiterIgnored()) {\n-                // add the value delimiter..\n-                value = config.getValueDelimiter()+value+config.getValueDelimiter();\n-            }\n+        }\n+        if (!config.isValueDelimiterIgnored()) {\n+            // add the value delimiter..\n+            value = config.getValueDelimiter()+value+config.getValueDelimiter();\n         }\n         return value;\n     }\n+    \n     /**\n      * @return the CVSConfig or null if not present\n      */\n--- a/src/test/org/apache/commons/csv/writer/CSVWriterTest.java\n+++ b/src/test/org/apache/commons/csv/writer/CSVWriterTest.java\n  */\n public class CSVWriterTest extends TestCase {\n \n+    private Map map;\n+    \n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        \n+        map = new HashMap();\n+        map.put(\"field1\", \"12345\");\n+        map.put(\"field2\", \"1234\");\n+    }\n+\n     public void testCSVConfig() {\n         CSVWriter writer = new CSVWriter();\n         assertEquals(null, writer.getConfig());\n         writer = new CSVWriter(config);\n         assertEquals(config, writer.getConfig());\n     }\n-    \n-    public void testWriter() {\n+\n+    public void testWriterDefaults() throws Exception {\n         CSVWriter writer = new CSVWriter();\n+        CSVConfig config = getConfig();\n+        writer.setConfig(config);\n+        StringWriter sw = new StringWriter();\n+        writer.setWriter(sw);\n+        writer.writeRecord(map);\n+        assertEquals(\"12345,1234\\n\", sw.toString());\n+    }\n+\n+    public void testWriterWithExplicitDelimiter() throws Exception {\n+        CSVWriter writer = new CSVWriter();\n+        CSVConfig config = getConfig();\n+        config.setDelimiter(';');\n+        config.setIgnoreDelimiter(false);\n+        writer.setConfig(config);\n+        StringWriter sw = new StringWriter();\n+        writer.setWriter(sw);\n+        writer.writeRecord(map);\n+        assertEquals(\"12345;1234\\n\", sw.toString());\n+    }\n+\n+    public void testWriterIgnoringDelimiter() throws Exception {\n+        CSVWriter writer = new CSVWriter();\n+        CSVConfig config = getConfig();\n+        config.setDelimiter(';');\n+        config.setIgnoreDelimiter(true);\n+        writer.setConfig(config);\n+        StringWriter sw = new StringWriter();\n+        writer.setWriter(sw);\n+        writer.writeRecord(map);\n+        assertEquals(\"123451234\\n\", sw.toString());\n+    }\n+\n+    public void testWriterWithExplicitValueDelimiter() throws Exception {\n+        CSVWriter writer = new CSVWriter();\n+        CSVConfig config = getConfig();\n+        config.setValueDelimiter('\"');\n+        config.setIgnoreValueDelimiter(false);\n+        writer.setConfig(config);\n+        StringWriter sw = new StringWriter();\n+        writer.setWriter(sw);\n+        writer.writeRecord(map);\n+        assertEquals(\"\\\"12345\\\",\\\"1234\\\"\\n\", sw.toString());\n+    }\n+\n+    public void testWriterIgnoringValueDelimiter() throws Exception {\n+        CSVWriter writer = new CSVWriter();\n+        CSVConfig config = getConfig();\n+        config.setValueDelimiter('\"');\n+        config.setIgnoreValueDelimiter(true);\n+        writer.setConfig(config);\n+        StringWriter sw = new StringWriter();\n+        writer.setWriter(sw);\n+        writer.writeRecord(map);\n+        assertEquals(\"12345,1234\\n\", sw.toString());\n+    }\n+\n+    public void testWriterWithoutHeader() throws Exception {\n+        CSVWriter writer = new CSVWriter();\n+        CSVConfig config = getConfig();\n+        config.setFieldHeader(false);\n+        writer.setConfig(config);\n+        StringWriter sw = new StringWriter();\n+        writer.setWriter(sw);\n+        writer.writeRecord(map);\n+        assertEquals(\"12345,1234\\n\", sw.toString());\n+    }\n+\n+    // TODO: SANDBOX-324\n+    public void todoTestWriterWithHeader() throws Exception {\n+        CSVWriter writer = new CSVWriter();\n+        CSVConfig config = getConfig();\n+        config.setFieldHeader(true);\n+        writer.setConfig(config);\n+        StringWriter sw = new StringWriter();\n+        writer.setWriter(sw);\n+        writer.writeRecord(map);\n+        assertEquals(\"field1,field2\\n12345,1234\\n\", sw.toString());\n+    }\n+\n+    public void testWriterWithExplicitRowDelimiterLF() throws Exception {\n+        CSVWriter writer = new CSVWriter();\n+        CSVConfig config = getConfig();\n+        config.setRowDelimiter(\"\\n\");\n+        writer.setConfig(config);\n+        StringWriter sw = new StringWriter();\n+        writer.setWriter(sw);\n+        writer.writeRecord(map);\n+        assertEquals(\"12345,1234\\n\", sw.toString());\n+    }\n+\n+    public void testWriterWithExplicitRowDelimiterCRLF() throws Exception {\n+        CSVWriter writer = new CSVWriter();\n+        CSVConfig config = getConfig();\n+        config.setRowDelimiter(\"\\r\\n\");\n+        writer.setConfig(config);\n+        StringWriter sw = new StringWriter();\n+        writer.setWriter(sw);\n+        writer.writeRecord(map);\n+        assertEquals(\"12345,1234\\r\\n\", sw.toString());\n+    }\n+\n+    private CSVConfig getConfig() {\n         CSVConfig config = new CSVConfig();\n         config.addField(new CSVField(\"field1\", 5));\n         config.addField(new CSVField(\"field2\", 4));\n-        writer.setConfig(config);\n-        StringWriter sw = new StringWriter();\n-        writer.setWriter(sw);\n-        Map map = new HashMap();\n-        map.put(\"field1\", \"12345\");\n-        map.put(\"field2\", \"1234\");\n-        writer.writeRecord(map);\n-        assertEquals(\"12345,1234\\n\",sw.toString());\n+\n+        return config;\n     }\n }", "timestamp": 1290419275, "metainfo": ""}