{"sha": "66a56ee1a47645c4d91076858e00ab9977d1a399", "log": "Refactor magic strings into constants.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVPrinter.java\n+++ b/src/main/java/org/apache/commons/csv/CSVPrinter.java\n  */\n public class CSVPrinter {\n \n+    private static final char COMMENT = '#';\n+    private static final String EMPTY = \"\";\n+    private static final char SP = ' ';\n+    private static final char CR = '\\r';\n+    private static final char LF = '\\n';\n+    \n     /** The place that the values get written. */\n     private final Appendable out;\n     private final CSVFormat format;\n             println();\n         }\n         out.append(format.getCommentStart());\n-        out.append(' ');\n+        out.append(SP);\n         for (int i = 0; i < comment.length(); i++) {\n             final char c = comment.charAt(i);\n             switch (c) {\n-            case '\\r':\n-                if (i + 1 < comment.length() && comment.charAt(i + 1) == '\\n') {\n+            case CR:\n+                if (i + 1 < comment.length() && comment.charAt(i + 1) == LF) {\n                     i++;\n                 }\n                 //$FALL-THROUGH$ break intentionally excluded.\n-            case '\\n':\n+            case LF:\n                 println();\n                 out.append(format.getCommentStart());\n-                out.append(' ');\n+                out.append(SP);\n                 break;\n             default:\n                 out.append(c);\n \n         while (pos < end) {\n             char c = value.charAt(pos);\n-            if (c == '\\r' || c == '\\n' || c == delim || c == escape) {\n+            if (c == CR || c == LF || c == delim || c == escape) {\n                 // write out segment up until this char\n                 if (pos > start) {\n                     out.append(value, start, pos);\n                 }\n-                if (c == '\\n') {\n+                if (c == LF) {\n                     c = 'n';\n-                } else if (c == '\\r') {\n+                } else if (c == CR) {\n                     c = 'r';\n                 }\n \n             if (first && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z'))) {\n                 quote = true;\n                 // } else if (c == ' ' || c == '\\f' || c == '\\t') {\n-            } else if (c <= '#') {\n+            } else if (c <= COMMENT) {\n                 // Some other chars at the start of a value caused the parser to fail, so for now\n                 // encapsulate if we start in anything less than '#'. We are being conservative\n                 // by including the default comment char too.\n             } else {\n                 while (pos < end) {\n                     c = value.charAt(pos);\n-                    if (c == '\\n' || c == '\\r' || c == encapsulator || c == delim) {\n+                    if (c == LF || c == CR || c == encapsulator || c == delim) {\n                         quote = true;\n                         break;\n                     }\n                     // if (c == ' ' || c == '\\f' || c == '\\t') {\n                     // Some other chars at the end caused the parser to fail, so for now\n                     // encapsulate if we end in anything less than ' '\n-                    if (c <= ' ') {\n+                    if (c <= SP) {\n                         quote = true;\n                     }\n                 }\n     public void print(String value, final boolean checkForEscape) throws IOException {\n         if (value == null) {\n             // null values are considered empty\n-            value = \"\";\n+            value = EMPTY;\n         }\n \n         if (!checkForEscape) {", "timestamp": 1350043964, "metainfo": ""}