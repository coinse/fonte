{"sha": "e6759b8c109cc7babd5b20b5982a3c423fccb4f7", "log": "Sort members.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n public class CSVParser implements Iterable<CSVRecord>, Closeable {\n \n     /**\n+     * Creates a parser for the given {@link File}.\n+     * \n+     * @param file\n+     *            a CSV file\n+     * @param format\n+     *            the CSVFormat used for CSV parsing\n+     * @return a new parser\n+     * @throws IOException\n+     *             If an I/O error occurs\n+     */\n+    public static CSVParser parseFile(File file, final CSVFormat format) throws IOException {\n+        return new CSVParser(new FileReader(file), format);\n+    }\n+    \n+    /**\n      * Creates a parser for the given resource.\n      * \n      * <p>\n     public static CSVParser parseString(String string) throws IOException {\n         return parseString(string, CSVFormat.DEFAULT);\n     }\n-    \n+\n     /**\n      * Creates a parser for the given {@link String}.\n      * \n      */\n     public static CSVParser parseString(String string, final CSVFormat format) throws IOException {\n         return new CSVParser(new StringReader(string), format);\n-    }\n-\n-    /**\n-     * Creates a parser for the given {@link File}.\n-     * \n-     * @param file\n-     *            a CSV file\n-     * @param format\n-     *            the CSVFormat used for CSV parsing\n-     * @return a new parser\n-     * @throws IOException\n-     *             If an I/O error occurs\n-     */\n-    public static CSVParser parseFile(File file, final CSVFormat format) throws IOException {\n-        return new CSVParser(new FileReader(file), format);\n     }\n \n     /**", "timestamp": 1375219492, "metainfo": ""}