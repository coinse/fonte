{"sha": "fa5dca3be144dcfd855384471f1687fa2dc95aca", "log": "Test cases for CSVPrinter.printComment()  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVPrinter.java\n+++ b/src/main/java/org/apache/commons/csv/CSVPrinter.java\n         newLine = true;\n     }\n \n+    /**\n+     * Flush the underlying stream.\n+     * \n+     * @throws IOException\n+     */\n     public void flush() throws IOException {\n         out.flush();\n     }\n \n \n     /**\n-     * Put a comment among the comma separated values.\n-     * Comments will always begin on a new line and occupy a\n-     * least one full line. The character specified to star\n-     * comments and a space will be inserted at the beginning of\n-     * each new line in the comment.\n+     * Put a comment on a new line among the comma separated values. Comments\n+     * will always begin on a new line and occupy a least one full line. The\n+     * character specified to start comments and a space will be inserted at\n+     * the beginning of each new line in the comment.\n+     * <p/>\n+     * If comments are disabled in the current CSV format this method does nothing.\n      *\n      * @param comment the comment to output\n      */\n-    public void printlnComment(String comment) throws IOException {\n+    public void printComment(String comment) throws IOException {\n         if (this.format.isCommentingDisabled()) {\n             return;\n         }\n         if (!newLine) {\n             println();\n         }\n-        out.write(this.format.getCommentStart());\n+        out.write(format.getCommentStart());\n         out.write(' ');\n         for (int i = 0; i < comment.length(); i++) {\n             char c = comment.charAt(i);\n                     // break intentionally excluded.\n                 case '\\n':\n                     println();\n-                    out.write(this.format.getCommentStart());\n+                    out.write(format.getCommentStart());\n                     out.write(' ');\n                     break;\n                 default:\n--- a/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n  */\n public class CSVPrinterTest extends TestCase {\n \n-    String lineSeparator = \"\\r\\n\";\n+    String lineSeparator = CSVFormat.DEFAULT.getLineSeparator();\n \n     public void testPrinter1() throws IOException {\n         StringWriter sw = new StringWriter();\n         assertEquals(\"\\\"a,b\\\",b\" + lineSeparator, sw.toString());\n     }\n \n+    public void testDisabledComment() throws IOException {\n+        StringWriter sw = new StringWriter();\n+        CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n+        printer.printComment(\"This is a comment\");\n+        \n+        assertEquals(\"\", sw.toString());\n+    }\n+\n+    public void testSingleLineComment() throws IOException {\n+        StringWriter sw = new StringWriter();\n+        CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withCommentStart('#'));\n+        printer.printComment(\"This is a comment\");\n+        \n+        assertEquals(\"# This is a comment\" + lineSeparator, sw.toString());\n+    }\n+\n+    public void testMultiLineComment() throws IOException {\n+        StringWriter sw = new StringWriter();\n+        CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withCommentStart('#'));\n+        printer.printComment(\"This is a comment\\non multiple lines\");\n+        \n+        assertEquals(\"# This is a comment\" + lineSeparator + \"# on multiple lines\" + lineSeparator, sw.toString());\n+    }\n \n     public void testRandom() throws Exception {\n         int iter = 10000;\n     }\n \n     public static String printable(String s) {\n-        StringBuffer sb = new StringBuffer();\n+        StringBuilder sb = new StringBuilder();\n         for (int i = 0; i < s.length(); i++) {\n             char ch = s.charAt(i);\n             if (ch <= ' ' || ch >= 128) {\n-                sb.append(\"(\" + (int) ch + \")\");\n+                sb.append(\"(\").append((int) ch).append(\")\");\n             } else {\n                 sb.append(ch);\n             }", "timestamp": 1330958534, "metainfo": ""}