{"sha": "03dbcf48c086db6b87a3f57e01fe0a9979fc79f0", "log": "Test with empty lines  ", "commit": "\n--- a/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n \n     }\n \n+    // multiline including comments (and empty lines)\n+    @Test\n+    public void testNextToken2EmptyLines() throws IOException {\n+        final String code = \n+                \"1,2,3,\\n\"+                // 1\n+                \"a,b x,c#no-comment\\n\"+    // 2\n+                \"#foo\\n\"+                  // 3\n+                \"\\n\"+                      // 4\n+                \"d,e,#no-comment\\n\"+       // 5\n+                \"# penultimate comment\\n\"+ // 6\n+                \"# Final comment\\n\";       // 7\n+        CSVFormat format = CSVFormat.DEFAULT.withCommentStart('#').withEmptyLinesIgnored(false);\n+        assertFalse(\"Should not ignore empty lines\", format.isEmptyLinesIgnored());\n+        \n+        Lexer parser = getLexer(code, format);\n+\n+\n+        assertTokenEquals(TOKEN, \"1\", parser.nextToken(new Token()));\n+        assertTokenEquals(TOKEN, \"2\", parser.nextToken(new Token()));\n+        assertTokenEquals(TOKEN, \"3\", parser.nextToken(new Token()));\n+        assertTokenEquals(EORECORD, \"\", parser.nextToken(new Token()));             // 1\n+        assertTokenEquals(TOKEN, \"a\", parser.nextToken(new Token()));\n+        assertTokenEquals(TOKEN, \"b x\", parser.nextToken(new Token()));\n+        assertTokenEquals(EORECORD, \"c#no-comment\", parser.nextToken(new Token())); // 2\n+        assertTokenEquals(COMMENT, \"\", parser.nextToken(new Token()));              // 3\n+        assertTokenEquals(EORECORD, \"\", parser.nextToken(new Token()));             // 4\n+        assertTokenEquals(TOKEN, \"d\", parser.nextToken(new Token()));\n+        assertTokenEquals(TOKEN, \"e\", parser.nextToken(new Token()));\n+        assertTokenEquals(EORECORD, \"#no-comment\", parser.nextToken(new Token()));  // 5\n+        assertTokenEquals(COMMENT, \"\", parser.nextToken(new Token()));              // 6\n+        assertTokenEquals(COMMENT, \"\", parser.nextToken(new Token()));              // 7\n+        assertTokenEquals(EOF, \"\", parser.nextToken(new Token()));\n+        assertTokenEquals(EOF, \"\", parser.nextToken(new Token()));\n+\n+    }\n+\n     // simple token with escaping\n     @Test\n     public void testNextToken3() throws IOException {", "timestamp": 1332979545, "metainfo": ""}