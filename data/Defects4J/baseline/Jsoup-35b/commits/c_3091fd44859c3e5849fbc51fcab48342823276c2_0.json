{"sha": "3091fd44859c3e5849fbc51fcab48342823276c2", "log": "Treat HTTP headers as case insensitive in Jsoup.Connection. Improves compatibility for HTTP responses.", "commit": "\n--- a/src/main/java/org/jsoup/Connection.java\n+++ b/src/main/java/org/jsoup/Connection.java\n \n         /**\n          * Get the value of a header. This is a simplified header model, where a header may only have one value.\n-         * @param name name of header\n+         * <p>\n+         * Header names are case insensitive.\n+         * @param name name of header (case insensitive)\n          * @return value of header, or null if not set.\n          * @see #hasHeader(String)\n          * @see #cookie(String)\n         public String header(String name);\n \n         /**\n-         * Set a header.\n+         * Set a header. This method will overwrite any existing header with the same case insensitive name. \n          * @param name Name of header\n          * @param value Value of header\n          * @return this, for chaining\n \n         /**\n          * Check if a header is present\n-         * @param name name of header\n+         * @param name name of header (case insensitive)\n          * @return if the header is present in this request/response\n          */\n         public boolean hasHeader(String name);\n \n         /**\n          * Remove a header by name\n-         * @param name name of header to remove\n+         * @param name name of header to remove (case insensitive)\n          * @return this, for chianing\n          */\n         public T removeHeader(String name);\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n \n         public String header(String name) {\n             Validate.notNull(name, \"Header name must not be null\");\n-            return headers.get(name);\n+            return getHeaderCaseInsensitive(name);\n         }\n \n         public T header(String name, String value) {\n             Validate.notEmpty(name, \"Header name must not be empty\");\n             Validate.notNull(value, \"Header value must not be null\");\n+            removeHeader(name); // ensures we don't get an \"accept-encoding\" and a \"Accept-Encoding\"\n             headers.put(name, value);\n             return (T) this;\n         }\n \n         public boolean hasHeader(String name) {\n             Validate.notEmpty(name, \"Header name must not be empty\");\n-            return headers.containsKey(name);\n+            return getHeaderCaseInsensitive(name) != null;\n         }\n \n         public T removeHeader(String name) {\n             Validate.notEmpty(name, \"Header name must not be empty\");\n-            headers.remove(name);\n+            Map.Entry<String, String> entry = scanHeaders(name); // remove is case insensitive too\n+            if (entry != null)\n+                headers.remove(entry.getKey()); // ensures correct case\n             return (T) this;\n         }\n \n         public Map<String, String> headers() {\n             return headers;\n+        }\n+\n+        private String getHeaderCaseInsensitive(String name) {\n+            Validate.notNull(name, \"Header name must not be null\");\n+            // quick evals for common case of title case, lower case, then scan for mixed\n+            String value = headers.get(name);\n+            if (value == null)\n+                value = headers.get(name.toLowerCase());\n+            if (value == null) {\n+                Map.Entry<String, String> entry = scanHeaders(name);\n+                if (entry != null)\n+                    value = entry.getValue();\n+            }\n+            return value;\n+        }\n+\n+        private Map.Entry<String, String> scanHeaders(String name) {\n+            String lc = name.toLowerCase();\n+            for (Map.Entry<String, String> entry : headers.entrySet()) {\n+                if (entry.getKey().toLowerCase().equals(lc))\n+                    return entry;\n+            }\n+            return null;\n         }\n \n         public String cookie(String name) {\n--- a/src/test/java/org/jsoup/helper/HttpConnectionTest.java\n+++ b/src/test/java/org/jsoup/helper/HttpConnectionTest.java\n package org.jsoup.helper;\n \n-import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.*;\n import org.junit.Test;\n import org.jsoup.Connection;\n \n import java.io.IOException;\n+import java.util.Map;\n \n public class HttpConnectionTest {\n     /* most actual network http connection tests are in integration */\n         Connection con = HttpConnection.connect(\"http://example.com\");\n         con.response().bodyAsBytes();\n     }\n+\n+    @Test public void caseInsensitiveHeaders() {\n+        Connection.Response res = new HttpConnection.Response();\n+        Map<String, String> headers = res.headers();\n+        headers.put(\"Accept-Encoding\", \"gzip\");\n+        headers.put(\"content-type\", \"text/html\");\n+        headers.put(\"refErrer\", \"http://example.com\");\n+\n+        assertTrue(res.hasHeader(\"Accept-Encoding\"));\n+        assertTrue(res.hasHeader(\"accept-encoding\"));\n+        assertTrue(res.hasHeader(\"accept-Encoding\"));\n+\n+        assertEquals(\"gzip\", res.header(\"accept-Encoding\"));\n+        assertEquals(\"text/html\", res.header(\"Content-Type\"));\n+        assertEquals(\"http://example.com\", res.header(\"Referrer\"));\n+\n+        res.removeHeader(\"Content-Type\");\n+        assertFalse(res.hasHeader(\"content-type\"));\n+\n+        res.header(\"accept-encoding\", \"deflate\");\n+        assertEquals(\"deflate\", res.header(\"Accept-Encoding\"));\n+        assertEquals(\"deflate\", res.header(\"accept-Encoding\"));\n+    }\n }", "timestamp": 1309605120, "metainfo": ""}