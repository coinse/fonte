{"sha": "f548940dd8be5f8c93ef17a8896b2807aa2a08bc", "log": "Optimised textnodes to not hold attributes or childnodes unless required on use.", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n  @author Jonathan Hedley, jonathan@hedley.net */\n public abstract class Node {\n     Node parentNode;\n-    final List<Node> childNodes;\n-    final Attributes attributes;\n+    List<Node> childNodes;\n+    Attributes attributes;\n     String baseUri;\n     int siblingIndex;\n \n \n     protected Node(String baseUri) {\n         this(baseUri, new Attributes());\n+    }\n+\n+    /**\n+     * Default constructor. Doesn't setup base uri, children, or attributes; use with caution.\n+     */\n+    protected Node() {\n+        childNodes = Collections.EMPTY_LIST;\n+        attributes = null;\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/nodes/TextNode.java\n+++ b/src/main/java/org/jsoup/nodes/TextNode.java\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n public class TextNode extends Node {\n+    /*\n+    TextNode is a node, and so by default comes with attributes and children. The attributes are seldom used, but use\n+    memory, and the child nodes are never used. So we don't have them, and override accessors to attributes to create\n+    them as needed on the fly.\n+     */\n     private static final String TEXT_KEY = \"text\";\n+    String text;\n \n     /**\n      Create a new TextNode representing the supplied (unencoded) text).\n      @see #createFromEncoded(String, String)\n      */\n     public TextNode(String text, String baseUri) {\n-        super(baseUri);\n-        attributes.put(TEXT_KEY, text);\n+        this.baseUri = baseUri;\n+        this.text = text;\n     }\n \n     public String nodeName() {\n      * @see TextNode#getWholeText()\n      */\n     public String text() {\n-        return outerHtml();\n+        return normaliseWhitespace(getWholeText());\n     }\n     \n     /**\n      * @return this, for chaining\n      */\n     public TextNode text(String text) {\n-        attributes.put(TEXT_KEY, text);\n+        this.text = text;\n+        if (attributes != null)\n+            attributes.put(TEXT_KEY, text);\n         return this;\n     }\n \n      @return text\n      */\n     public String getWholeText() {\n-        return attributes.get(TEXT_KEY);\n+        return attributes == null ? text : attributes.get(TEXT_KEY);\n     }\n+\n \n     /**\n      Test if this text node is blank -- that is, empty or only whitespace (including newlines).\n     static boolean lastCharIsWhitespace(StringBuilder sb) {\n         return sb.length() != 0 && sb.charAt(sb.length() - 1) == ' ';\n     }\n+\n+    // attribute fiddling. create on first access.\n+    private void ensureAttributes() {\n+        if (attributes == null) {\n+            attributes = new Attributes();\n+            attributes.put(TEXT_KEY, text);\n+        }\n+    }\n+\n+    @Override\n+    public String attr(String attributeKey) {\n+        ensureAttributes();\n+        return super.attr(attributeKey);\n+    }\n+\n+    @Override\n+    public Attributes attributes() {\n+        ensureAttributes();\n+        return super.attributes();\n+    }\n+\n+    @Override\n+    public Node attr(String attributeKey, String attributeValue) {\n+        ensureAttributes();\n+        return super.attr(attributeKey, attributeValue);\n+    }\n+\n+    @Override\n+    public boolean hasAttr(String attributeKey) {\n+        ensureAttributes();\n+        return super.hasAttr(attributeKey);\n+    }\n+\n+    @Override\n+    public Node removeAttr(String attributeKey) {\n+        ensureAttributes();\n+        return super.removeAttr(attributeKey);\n+    }\n+\n+    @Override\n+    public String absUrl(String attributeKey) {\n+        ensureAttributes();\n+        return super.absUrl(attributeKey);\n+    }\n }\n--- a/src/test/java/org/jsoup/nodes/TextNodeTest.java\n+++ b/src/test/java/org/jsoup/nodes/TextNodeTest.java\n     }\n     \n     @Test public void testTextBean() {\n-        Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\");\n+        Document doc = Jsoup.parse(\"<p>One <span>two &amp;</span> three &amp;</p>\");\n         Element p = doc.select(\"p\").first();\n+\n+        Element span = doc.select(\"span\").first();\n+        assertEquals(\"two &\", span.text());\n+        TextNode spanText = (TextNode) span.childNode(0);\n+        assertEquals(\"two &\", spanText.text());\n         \n         TextNode tn = (TextNode) p.childNode(2);\n-        assertEquals(\" three\", tn.text());\n+        assertEquals(\" three &\", tn.text());\n         \n         tn.text(\" POW!\");\n-        assertEquals(\"One <span>two</span> POW!\", p.html());\n+        assertEquals(\"One <span>two &amp;</span> POW!\", p.html());\n+\n+        tn.attr(\"text\", \"kablam &\");\n+        assertEquals(\"kablam &\", tn.text());\n+        assertEquals(\"One <span>two &amp;</span>kablam &amp;\", p.html());\n     }\n }", "timestamp": 1309605118, "metainfo": ""}