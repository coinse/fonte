{"sha": "935cab0e00f289ce5369f4c217b5eb3a3d9e33e7", "log": "Simplified Entity unescaper", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Entities.java\n+++ b/src/main/java/org/jsoup/nodes/Entities.java\n package org.jsoup.nodes;\n-\n-import org.jsoup.parser.TokenQueue;\n \n import java.util.HashMap;\n import java.util.Map;\n-import java.nio.charset.Charset;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n import java.nio.charset.CharsetEncoder;\n \n /**\n     private static final Map<String, Character> full;\n     private static final Map<Character, String> baseByVal;\n     private static final Map<Character, String> fullByVal;\n+    private static final Pattern unescapePattern = Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\");\n \n     static String escape(String string, CharsetEncoder encoder, EscapeMode escapeMode) {\n         StringBuilder accum = new StringBuilder(string.length() * 2);\n         if (!string.contains(\"&\"))\n             return string;\n \n-        StringBuilder accum = new StringBuilder(string.length());\n-        TokenQueue cq = new TokenQueue(string);\n+        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\n+        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs\n \n-        // formats dealt with: [&amp] (no semi), [&amp;], [&#123;] (int), &#\n-        while (!cq.isEmpty()) {\n-            accum.append(cq.consumeTo(\"&\"));\n-            if (!cq.matches(\"&\")) { // ran to end\n-                accum.append(cq.remainder());\n-                break;\n+        while (m.find()) {\n+            int charval = -1;\n+            String num = m.group(3);\n+            if (num != null) {\n+                try {\n+                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator\n+                    charval = Integer.valueOf(num, base);\n+                } catch (NumberFormatException e) {\n+                } // skip\n+            } else {\n+                String name = m.group(1).toLowerCase();\n+                if (full.containsKey(name))\n+                    charval = full.get(name);\n             }\n-            cq.advance(); // past &\n-            String val;\n-            int charval = -1;\n \n-            boolean isNum = false;\n-            if (cq.matches(\"#\")) {\n-                isNum = true;\n-                cq.consume();\n+            if (charval != -1 || charval > 0xFFFF) { // out of range\n+                String c = Character.toString((char) charval);\n+                m.appendReplacement(accum, c);\n+            } else {\n+                m.appendReplacement(accum, m.group(0)); // replace with original string\n             }\n-            val = cq.consumeWord(); // and num!\n-            if (val.length() == 0) {\n-                accum.append(\"&\");\n-                continue;\n-            }\n-            if (cq.matches(\";\"))\n-                cq.advance();\n-\n-            if (isNum) {\n-                try {\n-                    if (val.charAt(0) == 'x' || val.charAt(0) == 'X')\n-                        charval = Integer.valueOf(val.substring(1), 16);\n-                    else\n-                        charval = Integer.valueOf(val, 10);\n-                } catch (NumberFormatException e) {\n-                    // skip\n-                }\n-            } else {\n-                if (full.containsKey(val.toLowerCase()))\n-                    charval = full.get(val.toLowerCase());\n-            }\n-            if (charval == -1 || charval > 0xFFFF) // out of range\n-                accum.append(\"&\").append(val).append(\";\");\n-            else\n-                accum.append((char) charval);\n         }\n-\n+        m.appendTail(accum);\n         return accum.toString();\n     }\n \n--- a/src/test/java/org/jsoup/nodes/EntitiesTest.java\n+++ b/src/test/java/org/jsoup/nodes/EntitiesTest.java\n         String text = \"Hello &amp;&LT&gt; &ANGST &#960; &#960 &#x65B0; there &!\";\n         assertEquals(\"Hello &<> \u00c5 \u03c0 \u03c0 \u65b0 there &!\", Entities.unescape(text));\n \n-        assertEquals(\"&0987654321; &unknown;\", Entities.unescape(\"&0987654321; &unknown\"));\n-        // these missed encodes aren't 100%, not sure how correct the fallback need to be\n+        assertEquals(\"&0987654321; &unknown\", Entities.unescape(\"&0987654321; &unknown\"));\n     }\n }", "timestamp": 1309605117, "metainfo": ""}