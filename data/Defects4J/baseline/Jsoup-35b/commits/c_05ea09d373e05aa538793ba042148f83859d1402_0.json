{"sha": "05ea09d373e05aa538793ba042148f83859d1402", "log": "Cleanup Element and Node add mechanism", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     public Element appendChild(Node child) {\n         Validate.notNull(child);\n         \n-        child.setParentNode(this);\n-        childNodes.add(child);\n+        addChildren(child);\n         return this;\n     }\n     \n     public Element prependChild(Node child) {\n         Validate.notNull(child);\n         \n-        child.setParentNode(this);\n-        childNodes.add(0, child);\n+        addChildren(0, child);\n         return this;\n     }\n     \n         Validate.notNull(html);\n         \n         Element fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n-        for (Node node : fragment.childNodes()) {\n-            node.parentNode = null;\n-            appendChild(node);\n-        }\n+        addChildren(fragment.childNodesAsArray());\n         return this;\n     }\n     \n         Validate.notNull(html);\n         \n         Element fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n-        List<Node> nodes = fragment.childNodes();\n-        for (int i = nodes.size() - 1; i >= 0; i--) {\n-            Node node = nodes.get(i);\n-            node.parentNode = null;\n-            prependChild(node);\n-        }\n-        return this;\n-    }\n-    \n+        addChildren(0, fragment.childNodesAsArray());\n+        return this;\n+    }\n+       \n     /**\n      * Remove all of the element's child nodes. Any attributes are left as-is.\n      * @return this element\n \n         Element deepest = getDeepChild(wrap);\n         parentNode.replaceChild(this, wrap);\n-        deepest.addChild(this);\n+        deepest.addChildren(this);\n \n         // remainder (unbalananced wrap, like <div></div><p></p> -- The <p> is remainder\n         if (wrapChildren.size() > 1) {\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n     public List<Node> childNodes() {\n         return Collections.unmodifiableList(childNodes);\n     }\n+    \n+    protected Node[] childNodesAsArray() {\n+        return childNodes.toArray(new Node[childNodes().size()]);\n+    }\n \n     /**\n      Gets this node's parent node.\n \n     protected void setParentNode(Node parentNode) {\n         if (this.parentNode != null)\n-            throw new NotImplementedException(\"Cannot (yet) move nodes in tree\"); // TODO: remove from prev node children\n+            this.parentNode.removeChild(this);\n         this.parentNode = parentNode;\n     }\n \n         out.parentNode = null;\n     }\n \n-    protected void addChild(Node in) {\n-        Validate.notNull(in);\n-        if (in.parentNode != null)\n-            in.parentNode.removeChild(in);\n-        \n-        childNodes.add(in);\n-        in.parentNode = this;\n+    protected void addChildren(Node... children) {\n+        addChildren(childNodes.size(), children);\n+    }\n+    \n+    protected void addChildren(int index, Node... children) {\n+        Validate.noNullElements(children);\n+        for (int i = children.length - 1; i >= 0; i--) {\n+            Node in = children[i];\n+            if (in.parentNode != null)\n+                in.parentNode.removeChild(in);\n+            \n+            childNodes.add(index, in);\n+            in.setParentNode(this);\n+        }\n     }\n \n     protected int nodeDepth() {", "timestamp": 1309605113, "metainfo": ""}