{"sha": "e5cd584705f746893f75e85cf7acdb2d7a0db1af", "log": "Removed Element children list, and create on fly from nodes.", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n  */\n public class Element extends Node {\n     private final Tag tag;\n-    private final List<Element> elementChildren; // subset of Node.children, only holds Elements\n     private Set<String> classNames;\n     \n     /**\n         \n         Validate.notNull(tag);    \n         this.tag = tag;\n-        elementChildren = new ArrayList<Element>();\n     }\n     \n     /**\n      * @see #childNode(int)\n      */\n     public Element child(int index) {\n-        return elementChildren.get(index);\n+        return children().get(index);\n     }\n \n     /**\n      * Get this element's child elements.\n      * <p/>\n      * This is effectively a filter on {@link #childNodes()} to get Element nodes.\n-     * @return an unmodifiable list of children elements. If this element has no children, returns an\n+     * @return child elements. If this element has no children, returns an\n      * empty list.\n      * @see #childNodes()\n      */\n-    public List<Element> children() {\n-        return Collections.unmodifiableList(elementChildren);\n+    public Elements children() {\n+        // create on the fly rather than maintaining two lists. if gets slow, memoize, and mark dirty on change\n+        List<Element> elements = new ArrayList<Element>();\n+        for (Node node : childNodes) {\n+            if (node instanceof Element)\n+                elements.add((Element) node);\n+        }\n+        return new Elements(elements);\n     }\n \n     /**\n     public Element appendChild(Element child) { // TODO remove, and dynamically filter for children()\n         Validate.notNull(child);\n         \n-        elementChildren.add(child);\n         childNodes.add(child);\n         child.setParentNode(this);\n         return this;\n      */\n     public Element empty() {\n         childNodes.clear();\n-        elementChildren.clear();\n-        return this;\n+        return this;\n+    }\n+    \n+    /**\n+     * Get sibling elements.\n+     * @return sibling elements\n+     */\n+    public Elements siblingElements() {\n+        return parent().children();\n     }\n \n     /**\n      * @see #previousElementSibling()\n      */\n     public Element nextElementSibling() {\n-        List<Element> siblings = parent().elementChildren;\n+        List<Element> siblings = parent().children();\n         Integer index = indexInList(this, siblings);\n         Validate.notNull(index);\n         if (siblings.size() > index+1)\n      * @see #nextElementSibling()\n      */\n     public Element previousElementSibling() {\n-        List<Element> siblings = parent().elementChildren;\n+        List<Element> siblings = parent().children();\n         Integer index = indexInList(this, siblings);\n         Validate.notNull(index);\n         if (index > 0)\n      */\n     public Element firstElementSibling() {\n         // todo: should firstSibling() exclude this?\n-        List<Element> siblings = parent().elementChildren;\n+        List<Element> siblings = parent().children();\n         return siblings.size() > 1 ? siblings.get(0) : null;\n     }\n \n      * @return the last sibling that is an element (aka the parent's last element child) \n      */\n     public Element lastElementSibling() {\n-        List<Element> siblings = parent().elementChildren;\n+        List<Element> siblings = parent().children();\n         return siblings.size() > 1 ? siblings.get(siblings.size() - 1) : null;\n     }\n \n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n             throw new NotImplementedException(\"Cannot (yet) move nodes in tree\"); // TODO: remove from prev node children\n         this.parentNode = parentNode;\n     }\n+    \n+    public List<Node> siblingNodes() {\n+        return parent().childNodes();\n+    }\n \n     public Node nextSibling() {\n         List<Node> siblings = parentNode.childNodes;\n--- a/src/main/java/org/jsoup/select/Elements.java\n+++ b/src/main/java/org/jsoup/select/Elements.java\n  A list of {@link Element Elements}, with methods that act on every element in the list\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n-public class Elements implements List<Element>{\n+public class Elements implements List<Element> {\n     private List<Element> contents;\n \n     public Elements() {\n \n     public Elements(Collection<Element> elements) {\n         contents = new ArrayList<Element>(elements);\n+    }\n+    \n+    public Elements(List<Element> elements) {\n+        contents = elements;\n     }\n     \n     public Elements(Element... elements) {", "timestamp": 1309605106, "metainfo": ""}