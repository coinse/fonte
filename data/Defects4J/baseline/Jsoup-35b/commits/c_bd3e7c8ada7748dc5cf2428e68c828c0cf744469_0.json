{"sha": "bd3e7c8ada7748dc5cf2428e68c828c0cf744469", "log": "Simplified Document bean methods for consistency.", "commit": "\n--- a/src/main/java/org/jsoup/Jsoup.java\n+++ b/src/main/java/org/jsoup/Jsoup.java\n         Document dirty = parseBodyFragment(bodyHtml, baseUri);\n         Cleaner cleaner = new Cleaner(whitelist);\n         Document clean = cleaner.clean(dirty);\n-        return clean.getBody().html();\n+        return clean.body().html();\n     }\n     \n     public static String clean(String bodyHtml, Whitelist whitelist) {\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n         return doc;\n     }\n \n-    public Element getHead() {\n+    public Element head() {\n         return getElementsByTag(\"head\").get(0);\n     }\n \n-    public Element getBody() {\n+    public Element body() {\n         return getElementsByTag(\"body\").get(0);\n     }\n \n-    public String getTitle() {\n+    public String title() {\n         return title;\n     }\n \n-    public void setTitle(String title) {\n+    public void title(String title) {\n         this.title = title;\n     }\n \n \n     @Override\n     public Element text(String text) {\n-        getBody().text(text); // overridden to not nuke doc structure\n+        body().text(text); // overridden to not nuke doc structure\n         return this;\n     }\n \n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     public Element append(String html) {\n         Validate.notNull(html);\n         \n-        Element fragment = Parser.parseBodyFragment(html, baseUri).getBody();\n+        Element fragment = Parser.parseBodyFragment(html, baseUri).body();\n         // TODO: must parse without implicit elements, so you can e.g. add <td> to a <tr> (without creating a whole new table)\n         for (Node node : fragment.childNodes()) {\n             node.parentNode = null;\n     public Element prepend(String html) {\n         Validate.notNull(html);\n         \n-        Element fragment = Parser.parseBodyFragment(html, baseUri).getBody();\n+        Element fragment = Parser.parseBodyFragment(html, baseUri).body();\n         // TODO: must parse without implicit elements, so you can e.g. add <td> to a <tr> (without creating a whole new table)\n         List<Node> nodes = fragment.childNodes();\n         for (int i = nodes.size() - 1; i >= 0; i--) {\n--- a/src/main/java/org/jsoup/parser/Parser.java\n+++ b/src/main/java/org/jsoup/parser/Parser.java\n \n         if (isBodyFragment) {\n             doc = Document.createShell(baseUri);\n-            stack.add(doc.getBody());\n+            stack.add(doc.body());\n         } else {\n             doc = new Document(baseUri);\n             stack.add(doc);\n             child.appendChild(dataNode);\n \n             if (tag.equals(titleTag))\n-                doc.setTitle(child.data());\n+                doc.title(child.data());\n         }\n \n         // <base href>: update the base uri\n--- a/src/main/java/org/jsoup/safety/Cleaner.java\n+++ b/src/main/java/org/jsoup/safety/Cleaner.java\n         Validate.notNull(dirtyDocument);\n \n         Document clean = Document.createShell(dirtyDocument.baseUri());\n-        copySafeNodes(dirtyDocument.getBody(), clean.getBody());\n+        copySafeNodes(dirtyDocument.body(), clean.body());\n \n         return clean;\n     }\n--- a/src/test/java/org/jsoup/integration/ParseTest.java\n+++ b/src/test/java/org/jsoup/integration/ParseTest.java\n     @Test public void testSmhBizArticle() {\n         String h = loadFile(\"/htmltests/smh-biz-article-1.html\");\n         Document doc = Jsoup.parse(h, \"http://www.smh.com.au/business/the-boards-next-fear-the-female-quota-20100106-lteq.html\");\n-        assertEquals(\"The board\u2019s next fear: the female quota\", doc.getTitle()); // note that the apos in the source is a literal \u2019 (8217), not escaped or '\n+        assertEquals(\"The board\u2019s next fear: the female quota\", doc.title()); // note that the apos in the source is a literal \u2019 (8217), not escaped or '\n         assertEquals(\"en\", doc.select(\"html\").attr(\"xml:lang\"));\n \n         Elements articleBody = doc.select(\".articleBody > *\");\n     @Test public void testNewsHomepage() {\n         String h = loadFile(\"/htmltests/news-com-au-home.html\");\n         Document doc = Jsoup.parse(h, \"http://www.news.com.au/\");\n-        assertEquals(\"News.com.au | News from Australia and around the world online | NewsComAu\", doc.getTitle());\n+        assertEquals(\"News.com.au | News from Australia and around the world online | NewsComAu\", doc.title());\n         assertEquals(\"Brace yourself for Metro meltdown\", doc.select(\".id1225817868581 h4\").text().trim());\n         \n         Element a = doc.select(\"a[href=/entertainment/horoscopes]\").first();\n     @Test public void testGoogleSearchIpod() {\n         String h = loadFile(\"/htmltests/google-ipod.html\");\n         Document doc = Jsoup.parse(h, \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\");\n-        assertEquals(\"ipod - Google Search\", doc.getTitle());\n+        assertEquals(\"ipod - Google Search\", doc.title());\n         Elements results = doc.select(\"h3.r > a\");\n         assertEquals(12, results.size());\n         assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", \n     @Test public void testYahooJp() {\n         String h = loadFile(\"/htmltests/yahoo-jp.html\");\n         Document doc = Jsoup.parse(h, \"http://www.yahoo.co.jp/index.html\"); // http charset is utf-8.\n-        assertEquals(\"Yahoo! JAPAN\", doc.getTitle());\n+        assertEquals(\"Yahoo! JAPAN\", doc.title());\n         Element a = doc.select(\"a[href=t/2322m2]\").first();\n         assertEquals(\"http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/t/2322m2\", \n                 a.attr(\"abs:href\")); // session put into <base>\n--- a/src/test/java/org/jsoup/nodes/DocumentTest.java\n+++ b/src/test/java/org/jsoup/nodes/DocumentTest.java\n         Document doc = Jsoup.parse(\"<p>Hello</p>\");\n         doc.text(\"Replaced\");\n         assertEquals(\"Replaced\", doc.text());\n-        assertEquals(\"Replaced\", doc.getBody().text());\n+        assertEquals(\"Replaced\", doc.body().text());\n         assertEquals(1, doc.select(\"head\").size());\n     }\n }\n--- a/src/test/java/org/jsoup/parser/ParserTest.java\n+++ b/src/test/java/org/jsoup/parser/ParserTest.java\n         String html = \"<html><head><title>First!</title></head><body><p>First post! <img src=\\\"foo.png\\\" /></p></body></html>\";\n         Document doc = Jsoup.parse(html);\n         // need a better way to verify these:\n-        Element p = doc.getBody().child(0);\n+        Element p = doc.body().child(0);\n         assertEquals(\"p\", p.tagName());\n         Element img = p.child(0);\n         assertEquals(\"foo.png\", img.attr(\"src\"));\n         Document doc = Jsoup.parse(html);\n \n         // need a better way to verify these:\n-        Element p = doc.getBody().child(0);\n+        Element p = doc.body().child(0);\n         assertEquals(\"p\", p.tagName());\n         assertEquals(\"foo > bar\", p.attr(\"class\"));\n     }\n         String html = \"<html><head></head><body><img src=foo><!-- <table><tr><td></table> --><p>Hello</p></body></html>\";\n         Document doc = Jsoup.parse(html);\n         \n-        Element body = doc.getBody();\n+        Element body = doc.body();\n         Comment comment = (Comment) body.childNode(1); // comment should not be sub of img, as it's an empty tag\n         assertEquals(\" <table><tr><td></table> \", comment.getData());\n         Element p = body.child(1);\n     @Test public void createsDocumentStructure() {\n         String html = \"<meta name=keywords /><link rel=stylesheet /><title>jsoup</title><p>Hello world</p>\";\n         Document doc = Jsoup.parse(html);\n-        Element head = doc.getHead();\n-        Element body = doc.getBody();\n+        Element head = doc.head();\n+        Element body = doc.body();\n \n         assertEquals(1, doc.children().size()); // root node: contains html node\n         assertEquals(2, doc.child(0).children().size()); // html node: head and body\n \n         assertEquals(\"keywords\", head.getElementsByTag(\"meta\").get(0).attr(\"name\"));\n         assertEquals(0, body.getElementsByTag(\"meta\").size());\n-        assertEquals(\"jsoup\", doc.getTitle());\n+        assertEquals(\"jsoup\", doc.title());\n         assertEquals(\"Hello world\", body.text());\n         assertEquals(\"Hello world\", body.children().get(0).text());\n     }\n     @Test public void createsImplicitTable() {\n         String h = \"<td>Hello<td><p>There<p>now\";\n         Document doc = Jsoup.parse(h);\n-        assertEquals(\"<table><tr><td>Hello</td><td><p>There</p><p>now</p></td></tr></table>\", doc.getBody().html());\n+        assertEquals(\"<table><tr><td>Hello</td><td><p>There</p><p>now</p></td></tr></table>\", doc.body().html());\n     }\n \n     @Test public void handlesBaseTags() {\n         String h = \"<body><p>Hello</body><p>there</p></body></body></html><p>now\";\n         Document doc = Jsoup.parse(h);\n         assertEquals(3, doc.select(\"p\").size());\n-        assertEquals(3, doc.getBody().children().size());\n+        assertEquals(3, doc.body().children().size());\n     }\n \n ", "timestamp": 1309605106, "metainfo": ""}