{"sha": "916d5399a698ccf3eb2e0f02f4cad234fedec177", "log": "Implemented :matches(regex) selector.", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n import org.jsoup.select.Selector;\n \n import java.util.*;\n+import java.util.regex.Pattern;\n+import java.util.regex.PatternSyntaxException;\n \n /**\n  * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n     }\n     \n     /**\n+     * Find elements whose text matches the supplied regular expression.\n+     * @param pattern regular expression to match text against\n+     * @return elements matching the supplied regular expression.\n+     */\n+    public Elements getElementsMatchingText(Pattern pattern) {\n+        return Collector.collect(new Evaluator.Matches(pattern), this);\n+    }\n+    \n+    /**\n+     * Find elements whose text matches the supplied regular expression.\n+     * @param regex regular expression to match text against\n+     * @return elements matching the supplied regular expression.\n+     */\n+    public Elements getElementsMatchingText(String regex) {\n+        Pattern pattern;\n+        try {\n+            pattern = Pattern.compile(regex);\n+        } catch (PatternSyntaxException e) {\n+            throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e);\n+        }\n+        return getElementsMatchingText(pattern);\n+    }\n+    \n+    /**\n      * Find all elements under this element (including self, and children of children).\n      * \n      * @return all elements\n--- a/src/main/java/org/jsoup/nodes/Evaluator.java\n+++ b/src/main/java/org/jsoup/nodes/Evaluator.java\n package org.jsoup.nodes;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n import org.apache.commons.lang.Validate;\n \n             return (element.text().toLowerCase().contains(searchText));\n         }\n     }\n+    \n+    static final class Matches extends Evaluator {\n+        private Pattern pattern;\n+        Matches(Pattern pattern) {\n+            this.pattern = pattern;\n+        }\n+\n+        public boolean matches(Element element) {\n+            Matcher m = pattern.matcher(element.text());\n+            return m.find();\n+        }\n+    }\n \n \n }\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n package org.jsoup.nodes;\n \n-import org.apache.commons.lang.NotImplementedException;\n import org.apache.commons.lang.Validate;\n import org.apache.commons.lang.StringUtils;\n \n--- a/src/main/java/org/jsoup/select/Selector.java\n+++ b/src/main/java/org/jsoup/select/Selector.java\n  <tr><td><code>E:eq(<em>n</em>)</code></td><td>an Element whose sibling index is equal to <em>n</em></td><td><code>td:eq(0)</code> finds the first cell of each row</td></tr>\n  <tr><td><code>E:has(<em>selector</em>)</code></td><td>an Element that contains at least one element matching the <em>selector</em></td><td><code>div:has(p)</code> finds divs that contain p elements </td></tr>\n  <tr><td><code>E:contains(<em>text</em>)</code></td><td>an Element that contains the specified text. The search is case insensitive. The text may appear in the found Element, or any of its descendants.</td><td><code>p:contains(jsoup)</code> finds p elements containing the text \"jsoup\".</td></tr>\n+ <tr><td><code>E:matches(<em>regex</em>)</code></td><td>an Element whose text matches the specified regular expression. The text may appear in the found Element, or any of its descendants.</td><td><code>td:matches(\\\\d+)</code> finds table cells containing digits. <code>div:matches((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n  </table>\n \n  @see Element#select(String)\n             return has();\n         } else if (tq.matches(\":contains(\")) {\n             return contains();\n+        } else if (tq.matches(\":matches(\")) {\n+            return matches();\n         } else { // unhandled\n             throw new SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n         }\n     }\n     \n     // pseudo selector :contains(text)\n-    // todo: allow escaped ) in there. probably do a balanced match, for convenience of caller\n     private Elements contains() {\n         tq.consume(\":contains\");\n         String searchText = TokenQueue.unescape(tq.chompBalanced('(',')'));\n         Validate.notEmpty(searchText, \":contains(text) query must not be empty\");\n         \n         return root.getElementsContainingText(searchText);\n+    }\n+    \n+    // :matches(regex)\n+    private Elements matches() {\n+        tq.consume(\":matches\");\n+        String regex = tq.chompBalanced('(', ')'); // don't unescape, as regex bits will be escaped\n+        Validate.notEmpty(regex, \":matches(regex) query must not be empty\");\n+        \n+        return root.getElementsMatchingText(regex);\n     }\n \n     // direct child descendants\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n         List<Element> none = doc.getElementsByAttributeValue(\"style\", \"none\");\n         assertEquals(0, none.size());\n     }\n-\n+    \n     @Test public void testClassDomMethods() {\n         Document doc = Jsoup.parse(\"<div><span class='mellow yellow'>Hello <b>Yellow</b></span></div>\");\n         List<Element> els = doc.getElementsByAttribute(\"class\");\n--- a/src/test/java/org/jsoup/select/SelectorTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorTest.java\n         assertEquals(1, ps2.size());\n         assertEquals(\"2\", ps2.first().id());\n     }\n+    \n+    @Test public void testMatches() {       \n+        Document doc = Jsoup.parse(\"<p id=1>The <i>Rain</i></p> <p id=2>There are 99 bottles.</p> <p id=3>Harder (this)</p> <p id=4>Rain</p>\");\n+        \n+        Elements p1 = doc.select(\"p:matches(The rain)\"); // no match, case sensitive\n+        assertEquals(0, p1.size());\n+        \n+        Elements p2 = doc.select(\"p:matches((?i)the rain)\"); // case insense. should include root, html, body\n+        assertEquals(1, p2.size());\n+        assertEquals(\"1\", p2.first().id());\n+        \n+        Elements p4 = doc.select(\"p:matches((?i)^rain$)\"); // bounding\n+        assertEquals(1, p4.size());\n+        assertEquals(\"4\", p4.first().id());\n+        \n+        Elements p5 = doc.select(\"p:matches(\\\\d+)\");\n+        assertEquals(1, p5.size());\n+        assertEquals(\"2\", p5.first().id());\n+        \n+        Elements p6 = doc.select(\"p:matches(\\\\w+\\\\s+\\\\(\\\\w+\\\\))\"); // test bracket matching\n+        assertEquals(1, p6.size());\n+        assertEquals(\"3\", p6.first().id());\n+        \n+        Elements p7 = doc.select(\"p:matches((?i)the):has(i)\"); // multi\n+        assertEquals(1, p7.size());\n+        assertEquals(\"1\", p7.first().id());\n+    }\n }", "timestamp": 1309605114, "metainfo": ""}