{"sha": "a657d090e2f127ebdce131f1f97e7758a8ddc463", "log": "Draft implementation of Parser.", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n+package org.jsoup.nodes;\n+\n+/**\n+ Element attribute list.\n+\n+ @author Jonathan Hedley, jonathan@hedley.net */\n+public class Attributes {\n+}\n--- /dev/null\n+++ b/src/main/java/org/jsoup/nodes/Comment.java\n+package org.jsoup.nodes;\n+\n+/**\n+ A comment node.\n+\n+ @author Jonathan Hedley, jonathan@hedley.net */\n+public class Comment extends Node {\n+    private String data;\n+\n+    protected Comment(Node parentNode) {\n+        super(parentNode, null);\n+    }\n+\n+    public String getNodeName() {\n+        return \"#comment\";\n+    }\n+\n+    public String getData() {\n+        return data;\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n+package org.jsoup.nodes;\n+\n+import org.jsoup.parser.StartTag;\n+import org.jsoup.parser.Tag;\n+\n+/**\n+ Document element.\n+\n+ @author Jonathan Hedley, jonathan@hedley.net */\n+public class Document extends Element {\n+    private Element head;\n+    private Element body;\n+    private String title;\n+\n+    public Document() {\n+        super(null, new StartTag(Tag.valueOf(\"html\"), null));\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n+package org.jsoup.nodes;\n+\n+import org.apache.commons.lang.Validate;\n+import org.jsoup.parser.StartTag;\n+import org.jsoup.parser.Tag;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ A HTML element: tag + data, e.g. <code>&lt;div id=\"foo\"&gt;content&lt;/div&gt;</code>\n+\n+ @author Jonathan Hedley, jonathan@hedley.net */\n+public class Element extends Node {\n+    private final Tag tag;\n+    private final List<Element> elementChildren; // subset of Node.children, only holds Elements\n+\n+    public Element(Node parentNode, StartTag startTag) {\n+        super(parentNode, startTag.getAttributes());\n+        this.tag = startTag.getTag();\n+        elementChildren = new ArrayList<Element>();\n+    }\n+\n+    public String getNodeName() {\n+        return tag.getName();\n+    }\n+\n+    public String getTagName() {\n+        return tag.getName();\n+    }\n+\n+    public Tag getTag() {\n+        return tag;\n+    }\n+\n+    public List<Element> getChildren() {\n+        return Collections.unmodifiableList(elementChildren);\n+    }\n+\n+    public void addChild(Element child) {\n+        Validate.notNull(child);\n+        elementChildren.add(child);\n+        childNodes.add(child);\n+    }\n+\n+    public void addChild(Node child) {\n+        Validate.notNull(child);\n+        childNodes.add(child);\n+    }\n+\n+    public Element getNextElementSibling() {\n+        // TODO: implement\n+        return null;\n+    }\n+\n+    public Element getPreviousElementSibling() {\n+        // TODO: implement\n+        return null;\n+    }\n+\n+\n+}\n--- /dev/null\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n+package org.jsoup.nodes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ Base Node model.\n+\n+ @author Jonathan Hedley, jonathan@hedley.net */\n+public abstract class Node {\n+    final Node parentNode;\n+    final List<Node> childNodes;\n+    final Attributes attributes;\n+\n+    /**\n+     Create a new node.\n+     @param parentNode This node's parent node. Null indicates this is the root node.\n+     */\n+    protected Node(Node parentNode, Attributes attributes) {\n+        this.parentNode = parentNode;\n+        childNodes = new ArrayList<Node>();\n+        this.attributes = attributes;\n+    }\n+\n+    public abstract String getNodeName();\n+\n+    public Node getParentNode() {\n+        return parentNode;\n+    }\n+\n+    public Node getNextSibling() {\n+        // TODO: implement\n+        return null;\n+    }\n+\n+    public Node getPreviousSibling() {\n+        // TODO: implement\n+        return null;\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/jsoup/nodes/TextNode.java\n+package org.jsoup.nodes;\n+\n+/**\n+ A text node.\n+\n+ @author Jonathan Hedley, jonathan@hedley.net */\n+public class TextNode extends Node {\n+    private String text;\n+\n+    public TextNode(Node parentNode, String text) {\n+        super(parentNode, null);\n+        this.text = text;\n+    }\n+\n+    public String getNodeName() {\n+        return \"#text\";\n+    }\n+\n+    public String getWholeText() {\n+        return text;\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/jsoup/parser/AttributeParser.java\n+package org.jsoup.parser;\n+\n+import org.jsoup.nodes.Attributes;\n+\n+/**\n+ Parse attribute strings into attributes.\n+\n+ @author Jonathan Hedley, jonathan@hedley.net */\n+public class AttributeParser {\n+\n+    public Attributes parse(String attributeString) {\n+        return null;\n+        // TODO: implement\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/jsoup/parser/Parser.java\n+package org.jsoup.parser;\n+\n+import org.apache.commons.lang.Validate;\n+import org.jsoup.nodes.*;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+\n+/**\n+ Parses a {@link TokenStream} into a {@link Document}\n+\n+ @author Jonathan Hedley, jonathan@hedley.net */\n+public class Parser {\n+    private TokenStream tokenStream;\n+    private LinkedList<Element> stack;\n+    private AttributeParser attributeParser;\n+\n+    public Parser(TokenStream tokenStream) {\n+        Validate.notNull(tokenStream);\n+\n+        this.tokenStream = tokenStream;\n+        this.stack = new LinkedList<Element>();\n+        this.attributeParser = new AttributeParser();\n+    }\n+\n+    public Document parse() {\n+        // TODO: figure out implicit head & body elements\n+        Document doc = new Document();\n+        stack.add(doc);\n+\n+        while (tokenStream.hasNext()) {\n+            Token token = tokenStream.next();\n+\n+            if (token.isStartTag()) {\n+                Attributes attributes = attributeParser.parse(token.getAttributeString());\n+                Tag tag = Tag.valueOf(token.getTagName());\n+                StartTag startTag = new StartTag(tag, attributes);\n+\n+                Element parent = popStackToSuitableContainer(tag);\n+                Validate.notNull(parent, \"Should always have a viable container\");\n+                Element node = new Element(parent, startTag);\n+                parent.addChild(node);\n+                stack.add(node);\n+            }\n+\n+            if (token.isEndTag()) { // empty tags are both start and end tags\n+                stack.removeLast();\n+            }\n+\n+            // TODO[must] handle comments\n+\n+            else if (token.isTextNode()) {\n+                String text = token.getData();\n+                TextNode textNode = new TextNode(stack.peek(), text);\n+                stack.getLast().addChild(textNode);\n+            }\n+        }\n+        return doc;\n+    }\n+\n+    private Element popStackToSuitableContainer(Tag tag) {\n+        while (stack.size() > 0) {\n+            if (stack.peek().getTag().canContain(tag))\n+                return stack.getLast();\n+            else\n+                stack.removeLast();\n+        }\n+        return null;\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/jsoup/parser/StartTag.java\n+package org.jsoup.parser;\n+\n+import org.jsoup.nodes.Attributes;\n+\n+/**\n+ A start tag consists of a Tag and Attributes.\n+\n+ @author Jonathan Hedley, jonathan@hedley.net */\n+public class StartTag {\n+    Tag tag;\n+    Attributes attributes;\n+\n+    public StartTag(Tag tag, Attributes attributes) {\n+        this.tag = tag;\n+        this.attributes = attributes;\n+    }\n+\n+    public Tag getTag() {\n+        return tag;\n+    }\n+\n+    public Attributes getAttributes() {\n+        return attributes;\n+    }\n+}\n--- a/src/main/java/org/jsoup/parser/Tag.java\n+++ b/src/main/java/org/jsoup/parser/Tag.java\n  but it should capture most of what we need to know to intelligently parse a doc.\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n-class Tag {\n+public class Tag {\n     private static final Map<String, Tag> tags = new HashMap<String, Tag>();\n \n     private String tagName;\n         this.canContainInline = canContainInline;\n         this.optionalClosing = optionalClosing;\n         this.empty = empty;\n+    }\n+\n+    public String getName() {\n+        return tagName;\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/parser/Token.java\n+++ b/src/main/java/org/jsoup/parser/Token.java\n package org.jsoup.parser;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n /**\n  A Token of HTML. Internal use only.\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n class Token {\n+    private static final Pattern tagPattern = Pattern.compile(\"^<\\\\s*(/?)\\\\s*(\\\\w+)\\\\b\\\\s*(.*?)\\\\s*(/?)\\\\s*>$\");\n+    // pattern: <, opt space, opt closer, tagname, opt attribs, opt empty closer, >\n+\n     private String data;\n     private Position pos;\n \n+    private boolean startTag;\n+    private boolean endTag;\n+    private boolean textNode;\n+    private String tagName;\n+    private String attributes;\n \n     Token(String data, Position pos) {\n         this.data = data;\n         this.pos = pos;\n+\n+        Matcher tagMatch = tagPattern.matcher(data);\n+        if (tagMatch.matches()) {\n+            startTag = (tagMatch.group(1).isEmpty()); // 1: closer\n+            endTag = (!tagMatch.group(1).isEmpty()) || (!tagMatch.group(4).isEmpty()); // 4: empty tag\n+            tagName = tagMatch.group(2);\n+            attributes = (tagMatch.group(3).isEmpty() ? null : tagMatch.group(3));\n+        } else {\n+            // TODO: comments\n+            textNode = true;\n+        }\n     }\n+\n \n     public String getData() {\n         return data;\n \n     public void setPos(Position pos) {\n         this.pos = pos;\n+    }\n+\n+    public boolean isStartTag() {\n+        return startTag;\n+    }\n+\n+    public boolean isEndTag() {\n+        return endTag;\n+    }\n+\n+    public boolean isTextNode() {\n+        return textNode;\n+    }\n+\n+    public String getTagName() {\n+        return tagName;\n+    }\n+\n+    public String getAttributeString() {\n+        return attributes;\n     }\n \n     @Override\n--- /dev/null\n+++ b/src/test/java/org/jsoup/parser/ParserTest.java\n+package org.jsoup.parser;\n+\n+import org.jsoup.nodes.Document;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ Tests for the Parser\n+\n+ @author Jonathan Hedley, jonathan@hedley.net */\n+public class ParserTest {\n+\n+    @Test public void testParsesSimpleDocument() {\n+        TokenStream tokenStream = TokenStream.create(\"<html><head><title>First!</title></head><body><p>First post! <img src=\\\"foo.png\\\" /></p></body></html>\");\n+        Parser parser = new Parser(tokenStream);\n+        Document doc = parser.parse();\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/jsoup/parser/TokenTest.java\n+package org.jsoup.parser;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+\n+/**\n+ Tests Tokens.\n+\n+ @author Jonathan Hedley, jonathan@hedley.net */\n+public class TokenTest {\n+    private static Position startPos = new Position();\n+\n+    @Test public void matchesStartTag() {\n+        Token t = token(\"<p>\");\n+\n+        assertTrue(t.isStartTag());\n+        assertFalse(t.isEndTag());\n+        assertEquals(\"p\", t.getTagName());\n+        assertNull(t.getAttributeString());\n+    }\n+\n+    @Test public void matchesTagWithAttributes() {\n+        Token t = token(\"<div id=\\\"foo\\\" width=500>\");\n+\n+        assertTrue(t.isStartTag());\n+        assertFalse(t.isEndTag());\n+        assertEquals(\"div\", t.getTagName());\n+        assertEquals(\"id=\\\"foo\\\" width=500\", t.getAttributeString());\n+    }\n+\n+    @Test public void matchesEndTag() {\n+        Token t = token(\"</span>\");\n+\n+        assertFalse(t.isStartTag());\n+        assertTrue(t.isEndTag());\n+        assertEquals(\"span\", t.getTagName());\n+        assertNull(t.getAttributeString());\n+    }\n+\n+    @Test public void matchesEmptyTag() {\n+        Token t = token(\"<br />\");\n+\n+        assertTrue(t.isStartTag());\n+        assertTrue(t.isEndTag());\n+        assertEquals(\"br\", t.getTagName());\n+        assertNull(t.getAttributeString());\n+\n+        // repeat without space\n+        t = token(\"<br/>\");\n+        assertTrue(t.isStartTag());\n+        assertTrue(t.isEndTag());\n+        assertEquals(\"br\", t.getTagName());\n+        assertNull(t.getAttributeString());\n+    }\n+\n+    @Test public void matchesEmptyTagWithAttributes() {\n+        Token t = token(\"<img src=foo.png />\");\n+\n+        assertTrue(t.isStartTag());\n+        assertTrue(t.isEndTag());\n+        assertEquals(\"img\", t.getTagName());\n+        assertEquals(\"src=foo.png\", t.getAttributeString());\n+    }\n+\n+    @Test public void matchesText() {\n+        Token t = token(\"Hello, world!\");\n+\n+        assertTrue(t.isTextNode());\n+        assertFalse(t.isStartTag());\n+        assertFalse(t.isEndTag());\n+        assertNull(t.getAttributeString());\n+        assertEquals(\"Hello, world!\", t.getData());\n+    }\n+\n+    private Token token(String data) {\n+        return new Token(data, startPos);\n+    }\n+}", "timestamp": 1309605099, "metainfo": ""}