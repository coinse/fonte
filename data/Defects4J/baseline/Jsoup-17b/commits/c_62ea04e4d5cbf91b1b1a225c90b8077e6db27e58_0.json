{"sha": "62ea04e4d5cbf91b1b1a225c90b8077e6db27e58", "log": "Whitespace tests", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Comment.java\n+++ b/src/main/java/org/jsoup/nodes/Comment.java\n         return attributes.get(COMMENT_KEY);\n     }\n \n-    public void outerHtml(StringBuilder accum) {\n+    void outerHtml(StringBuilder accum) {\n         accum.append(String.format(\"<!--%s-->\", getData()));\n     }\n \n--- a/src/main/java/org/jsoup/nodes/DataNode.java\n+++ b/src/main/java/org/jsoup/nodes/DataNode.java\n         return attributes.get(DATA_KEY);\n     }\n \n-    public void outerHtml(StringBuilder accum) {\n+    void outerHtml(StringBuilder accum) {\n         accum.append(getWholeData()); // data is not escaped in return from data nodes, so \" in script, style is plain\n     }\n \n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     public String text() {\n         StringBuilder sb = new StringBuilder();\n         text(sb);\n-        return sb.toString();\n+        return sb.toString().trim();\n     }\n \n     private void text(StringBuilder accum) {\n-        int numNodes = childNodes.size();\n-        for (int i = 0; i <= numNodes; i++) {\n-            Node child = childNodes.get(i);\n-\n+        for (Node child : childNodes) {\n             if (child instanceof TextNode) {\n                 TextNode textNode = (TextNode) child;\n                 String text = textNode.getWholeText();\n \n             } else if (child instanceof Element) {\n                 Element element = (Element) child;\n-                if (element.isBlock() && !TextNode.lastCharIsWhitespace(accum))\n+                if (accum.length() > 0 && element.isBlock() && !TextNode.lastCharIsWhitespace(accum))\n                     accum.append(\" \");\n                 element.text(accum);\n             }\n     }\n \n     void outerHtml(StringBuilder accum) {\n+ \n         accum\n                 .append(\"<\")\n                 .append(tagName())\n             accum.append(\" />\");\n         } else {\n             accum.append(\">\");\n+            if (tag.canContainBlock())\n+                accum.append(\"\\n\");\n             html(accum);\n             accum.append(\"</\").append(tagName()).append(\">\");\n+            if (tag.isBlock())\n+                accum.append(\"\\n\");\n         }\n     }\n \n     public String html() {\n         StringBuilder accum = new StringBuilder();\n         html(accum); \n-        return accum.toString();\n+        return accum.toString().trim();\n     }\n \n     private void html(StringBuilder accum) {\n--- a/src/main/java/org/jsoup/nodes/TextNode.java\n+++ b/src/main/java/org/jsoup/nodes/TextNode.java\n \n     void outerHtml(StringBuilder accum) {\n         String html = StringEscapeUtils.escapeHtml(getWholeText());\n-        if (parent() instanceof Element && !((Element) parent()).tag().preserveWhitespace())\n-            html = normaliseWhitespace(html).trim();\n+        if (parent() instanceof Element && !((Element) parent()).tag().preserveWhitespace()) {\n+            html = normaliseWhitespace(html);\n+        }\n \n         accum.append(html);\n     }\n     }\n \n     static String stripLeadingWhitespace(String text) {\n-        return text.replaceFirst(\"\\\\s+\", \"\");\n+        return text.replaceFirst(\"^\\\\s+\", \"\");\n     }\n \n     static boolean lastCharIsWhitespace(StringBuilder sb) {\n--- a/src/main/java/org/jsoup/nodes/XmlDeclaration.java\n+++ b/src/main/java/org/jsoup/nodes/XmlDeclaration.java\n         return attributes.get(DECL_KEY);\n     }\n \n-    public String outerHtml() {\n-        return String.format(\"<%s%s>\", isProcessingInstruction ? \"!\" : \"?\", getWholeDeclaration());\n+    void outerHtml(StringBuilder accum) {\n+        accum.append(String.format(\"<%s%s>\", isProcessingInstruction ? \"!\" : \"?\", getWholeDeclaration()));\n     }\n \n     public String toString() {\n--- a/src/main/java/org/jsoup/parser/Tag.java\n+++ b/src/main/java/org/jsoup/parser/Tag.java\n \n     public boolean isBlock() {\n         return isBlock;\n+    }\n+\n+    public boolean canContainBlock() {\n+        return canContainBlock;\n     }\n \n     public boolean isInline() {\n--- /dev/null\n+++ b/src/test/java/org/jsoup/TextUtil.java\n+package org.jsoup;\n+\n+/**\n+ Text utils to ease testing\n+\n+ @author Jonathan Hedley, jonathan@hedley.net */\n+public class TextUtil {\n+    public static String stripNewlines(String text) {\n+        text = text.replaceAll(\"[\\\\n\\\\r]\", \"\");\n+        return text;\n+    }\n+}\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n package org.jsoup.nodes;\n \n import org.jsoup.Jsoup;\n+import org.jsoup.TextUtil;\n import org.junit.Test;\n \n import static org.junit.Assert.*;\n     @Test public void testNormalisesText() {\n         String h = \"<p>Hello<p>There.</p> \\n <p>Here <b>is</b> \\n s<b>om</b>e text.\";\n         Document doc = Jsoup.parse(h);\n-        assertEquals(\"Hello There. Here is some text.\", doc.text());\n-    }\n-\n-    @Test public void testKeepsPreTexT() {\n+        String text = doc.text();\n+        assertEquals(\"Hello There. Here is some text.\", text);\n+    }\n+\n+    @Test public void testKeepsPreText() {\n         String h = \"<p>Hello \\n \\n there.</p> <div><pre>  What's \\n\\n  that?</pre>\";\n         Document doc = Jsoup.parse(h);\n-        assertEquals(\"Hello there.  What's \\n\\n  that?\", doc.text());\n+        assertEquals(\"Hello there.   What's \\n\\n  that?\", doc.text());\n     }\n \n     @Test public void testGetSiblings() {\n \n     @Test public void testOuterHtml() {\n         Document doc = Jsoup.parse(\"<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there\");\n-        assertEquals(\"<html><head></head><body><div title=\\\"Tags &amp;c.\\\"><img src=\\\"foo.png\\\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>\", doc.outerHtml());\n+        assertEquals(\"<html><head></head><body><div title=\\\"Tags &amp;c.\\\"><img src=\\\"foo.png\\\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>\",\n+                TextUtil.stripNewlines(doc.outerHtml()));\n     }\n \n     @Test public void testInnerHtml() {\n         assertEquals(\"<p>Hello</p>\", doc.getElementsByTag(\"div\").get(0).html());\n     }\n \n+    @Test public void testFormatHtml() {\n+        Document doc = Jsoup.parse(\"<div><p>Hello</p></div>\");\n+        assertEquals(\"<html>\\n<head>\\n</head>\\n<body>\\n<div>\\n<p>Hello</p>\\n</div>\\n</body>\\n</html>\", doc.html());\n+    }\n+\n     @Test public void testSetText() {\n         String h = \"<div id=1>Hello <p>there <b>now</b></p></div>\";\n         Document doc = Jsoup.parse(h);\n-        assertEquals(\"Hello  there now\", doc.text()); // need to sort out node whitespace\n+        assertEquals(\"Hello there now\", doc.text()); // need to sort out node whitespace\n         assertEquals(\"there now\", doc.select(\"p\").get(0).text());\n \n         Element div = doc.getElementById(\"1\").text(\"Gone\");\n         div.appendElement(\"p\").text(\"there\");\n         div.appendElement(\"P\").attr(\"class\", \"second\").text(\"now\");\n         assertEquals(\"<html><head></head><body><div id=\\\"1\\\"><p>Hello</p><p>there</p><p class=\\\"second\\\">now</p></div></body></html>\",\n-                doc.html());\n+                TextUtil.stripNewlines(doc.html()));\n     }\n     \n     @Test public void testPrependElement() {\n         Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n         Element div = doc.getElementById(\"1\");\n         div.appendText(\" there & now >\");\n-        assertEquals(\"<p>Hello</p> there &amp; now &gt;\", div.html());\n+        assertEquals(\"<p>Hello</p>\\n there &amp; now &gt;\", div.html());\n     }\n     \n     @Test public void testPrependText() {\n         Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n         Element div = doc.getElementById(\"1\");\n         div.prependText(\"there & now > \");\n+        assertEquals(\"there & now > Hello\", div.text());\n         assertEquals(\"there &amp; now &gt; <p>Hello</p>\", div.html());\n     }\n     \n         Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n         Element div = doc.getElementById(\"1\");\n         div.append(\"<p>there</p><p>now</p>\");\n-        assertEquals(\"<p>Hello</p><p>there</p><p>now</p>\", div.html());\n+        assertEquals(\"<p>Hello</p><p>there</p><p>now</p>\", TextUtil.stripNewlines(div.html()));\n     }\n     \n     @Test public void testPrependNewHtml() {\n         Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n         Element div = doc.getElementById(\"1\");\n         div.prepend(\"<p>there</p><p>now</p>\");\n-        assertEquals(\"<p>there</p><p>now</p><p>Hello</p>\", div.html());\n+        assertEquals(\"<p>there</p><p>now</p><p>Hello</p>\", TextUtil.stripNewlines(div.html()));\n     }\n     \n     @Test public void testSetHtml() {\n         Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n         Element div = doc.getElementById(\"1\");\n         div.html(\"<p>there</p><p>now</p>\");\n-        assertEquals(\"<p>there</p><p>now</p>\", div.html());\n+        assertEquals(\"<p>there</p><p>now</p>\", TextUtil.stripNewlines(div.html()));\n     }\n \n \n--- a/src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java\n+++ b/src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java\n package org.jsoup.org.jsoup.safety;\n \n import org.jsoup.Jsoup;\n+import org.jsoup.TextUtil;\n import org.jsoup.safety.Whitelist;\n import org.junit.Test;\n import static org.junit.Assert.*;\n         String h = \"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\";\n         String cleanHtml = Jsoup.clean(h, Whitelist.basic());\n \n-        assertEquals(\"<p><a rel=\\\"nofollow\\\">Dodgy</a> <a href=\\\"HTTP://nice.com\\\" rel=\\\"nofollow\\\">Nice</a></p><blockquote>Hello</blockquote>\", cleanHtml);\n+        assertEquals(\"<p><a rel=\\\"nofollow\\\">Dodgy</a> <a href=\\\"HTTP://nice.com\\\" rel=\\\"nofollow\\\">Nice</a></p><blockquote>Hello</blockquote>\",\n+                TextUtil.stripNewlines(cleanHtml));\n     }\n     \n     @Test public void basicWithImagesTest() {\n         String h = \"<div><p><img src='http://example.com/' alt=Image></p><p><img src='ftp://ftp.example.com'></p></div>\";\n         String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages());\n-        assertEquals(\"<p><img src=\\\"http://example.com/\\\" alt=\\\"Image\\\" /></p><p><img /></p>\", cleanHtml);\n+        assertEquals(\"<p><img src=\\\"http://example.com/\\\" alt=\\\"Image\\\" /></p><p><img /></p>\", TextUtil.stripNewlines(cleanHtml));\n     }\n     \n     @Test public void testRelaxed() {\n         String h = \"<h1>Head</h1><td>One<td>Two</td>\";\n         String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());\n-        assertEquals(\"<h1>Head</h1><table><tr><td>One</td><td>Two</td></tr></table>\", cleanHtml);\n+        assertEquals(\"<h1>Head</h1><table><tr><td>One</td><td>Two</td></tr></table>\", TextUtil.stripNewlines(cleanHtml));\n     }\n     \n     @Test public void testDropComments() {\n--- a/src/test/java/org/jsoup/parser/ParserTest.java\n+++ b/src/test/java/org/jsoup/parser/ParserTest.java\n package org.jsoup.parser;\n \n import org.jsoup.Jsoup;\n+import org.jsoup.TextUtil;\n import org.jsoup.nodes.Comment;\n import org.jsoup.nodes.Document;\n import org.jsoup.nodes.Element;\n     @Test public void createsImplicitTable() {\n         String h = \"<td>Hello<td><p>There<p>now\";\n         Document doc = Jsoup.parse(h);\n-        assertEquals(\"<table><tr><td>Hello</td><td><p>There</p><p>now</p></td></tr></table>\", doc.body().html());\n+        assertEquals(\"<table><tr><td>Hello</td><td><p>There</p><p>now</p></td></tr></table>\", TextUtil.stripNewlines(doc.body().html()));\n     }\n \n     @Test public void handlesBaseTags() {\n         String h = \"<div id=1><![CData[<html>\\n<foo><&amp;]]></div>\"; // \"cdata\" insensitive. the &amp; in there should remain literal\n         Document doc = Jsoup.parse(h);\n         Element div = doc.getElementById(\"1\");\n-        assertEquals(\"<html>\\n<foo><&amp;\", div.text());\n+        assertEquals(\"<html> <foo><&amp;\", div.text());\n         assertEquals(0, div.children().size());\n         assertEquals(1, div.childNodes().size()); // no elements, one text node\n     }", "timestamp": 1309605107, "metainfo": ""}