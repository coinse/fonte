{"sha": "72fe7662416118598bc0af126c15cba3ca09d9b4", "log": "Fixed select parser for childs.", "commit": "\n--- a/src/main/java/org/jsoup/select/Selector.java\n+++ b/src/main/java/org/jsoup/select/Selector.java\n \n     private Elements select() {\n         tq.consumeWhitespace();\n-\n-        if (tq.matchChomp(\"#\")) {\n-            byId();\n-        } else if (tq.matchChomp(\".\")) {\n-            byClass();\n-        } else if (tq.matchesWord()) {\n-            byTag();\n-        } else if (tq.matchChomp(\"[\")) {\n-            byAttribute();\n-        } else if (tq.matchChomp(\"*\")) {\n-            allElements();\n-        } else { // unhandled\n-            throw new SelectorParseException(\"Could not parse query \" + query);\n-        }\n-\n-        // hierarchy (todo: implement +, ~)\n-        boolean seenWhite = tq.consumeWhitespace();\n-        if (!tq.isEmpty()) { \n+        addElements(findElements()); // chomp first matcher off queue        \n+        while (!tq.isEmpty()) {\n+            // hierarchy and extras (todo: implement +, ~)\n+            boolean seenWhite = tq.consumeWhitespace();\n+            \n             if (tq.matchChomp(\",\")) { // group or\n                 while (!tq.isEmpty()) {\n                     String subQuery = tq.chompTo(\",\");\n                     elements.addAll(select(subQuery, root));\n                 }\n-                return new Elements(elements);\n             } else if (tq.matchChomp(\">\")) { // parent > child\n                 Elements candidates = new Elements(select(tq.remainder(), elements));\n                 return filterForChildren(elements, candidates);\n                 Elements candidates = new Elements(select(tq.remainder(), elements));\n                 return filterForDescendants(elements, candidates);\n             } else { // E.class, E#id, E[attr] etc. AND\n-                Elements candidates = new Elements(select(tq.remainder(), elements));\n-                return filterForSelf(elements, candidates);\n+                Elements candidates = findElements(); // take next el, #. etc off queue\n+                intersectElements(filterForSelf(elements, candidates));\n             }\n-        } else {\n-            return new Elements(elements);\n-        }\n-    }\n-\n-    private void byId() {\n+        }\n+        return new Elements(elements);\n+    }\n+    \n+    private Elements findElements() {\n+        if (tq.matchChomp(\"#\")) {\n+            return byId();\n+        } else if (tq.matchChomp(\".\")) {\n+            return byClass();\n+        } else if (tq.matchesWord()) {\n+            return byTag();\n+        } else if (tq.matchChomp(\"[\")) {\n+            return byAttribute();\n+        } else if (tq.matchChomp(\"*\")) {\n+            return allElements();\n+        } else { // unhandled\n+            throw new SelectorParseException(\"Could not parse query \" + query);\n+        }\n+    }\n+    \n+    private void addElements(Collection<Element> add) {\n+        elements.addAll(add);\n+    }\n+    \n+    private void intersectElements(Collection<Element> intersect) {\n+        elements.retainAll(intersect);\n+    }\n+\n+    private Elements byId() {\n         String id = tq.consumeWord();\n         Validate.notEmpty(id);\n \n         Element found = root.getElementById(id);\n+        Elements byId = new Elements();\n         if(found != null)\n-            elements.add(found);\n-    }\n-\n-    private void byClass() {\n+            byId.add(found);\n+        return byId;\n+    }\n+\n+    private Elements byClass() {\n         String className = tq.consumeClassName();\n         Validate.notEmpty(className);\n \n-        List<Element> found = root.getElementsByClass(className);\n-        elements.addAll(found);\n-    }\n-\n-    private void byTag() {\n+        return root.getElementsByClass(className);\n+    }\n+\n+    private Elements byTag() {\n         String tagName = tq.consumeWord();\n         Validate.notEmpty(tagName);\n \n-        elements.addAll(root.getElementsByTag(tagName));\n-    }\n-\n-    private void byAttribute() {\n+        return root.getElementsByTag(tagName);\n+    }\n+\n+    private Elements byAttribute() {\n         String key = tq.consumeToAny(\"=\", \"!=\", \"^=\", \"$=\", \"*=\", \"]\"); // eq, not, start, end, contain, (no val)\n         Validate.notEmpty(key);\n \n         if (tq.matchChomp(\"]\")) {\n-            elements.addAll(root.getElementsByAttribute(key));\n+            return root.getElementsByAttribute(key);\n         } else {\n             if (tq.matchChomp(\"=\"))\n-                elements.addAll(root.getElementsByAttributeValue(key, tq.chompTo(\"]\")));\n+                return root.getElementsByAttributeValue(key, tq.chompTo(\"]\"));\n \n             else if (tq.matchChomp(\"!=\"))\n-                elements.addAll(root.getElementsByAttributeValueNot(key, tq.chompTo(\"]\")));\n+                return root.getElementsByAttributeValueNot(key, tq.chompTo(\"]\"));\n \n             else if (tq.matchChomp(\"^=\"))\n-                elements.addAll(root.getElementsByAttributeValueStarting(key, tq.chompTo(\"]\")));\n+                return root.getElementsByAttributeValueStarting(key, tq.chompTo(\"]\"));\n \n             else if (tq.matchChomp(\"$=\"))\n-                elements.addAll(root.getElementsByAttributeValueEnding(key, tq.chompTo(\"]\")));\n+                return root.getElementsByAttributeValueEnding(key, tq.chompTo(\"]\"));\n \n             else if (tq.matchChomp(\"*=\"))\n-                elements.addAll(root.getElementsByAttributeValueContaining(key, tq.chompTo(\"]\")));\n-        }\n-    }\n-\n-    private void allElements() {\n-        elements.addAll(Collector.collect(new Evaluator.AllElements(), root));\n+                return root.getElementsByAttributeValueContaining(key, tq.chompTo(\"]\"));\n+            \n+            else\n+                throw new SelectorParseException(\"Could not parse attribute query \" + query);\n+        }\n+    }\n+\n+    private Elements allElements() {\n+        return Collector.collect(new Evaluator.AllElements(), root);\n     }\n \n     // direct child descendants\n--- a/src/test/java/org/jsoup/select/SelectorTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorTest.java\n     }\n \n     @Test public void testByClass() {\n-        Elements els = Jsoup.parse(\"<p id=0 class='one two'><p id=1 class='one'><p id=2 class='two'>\").select(\".one\");\n+        Elements els = Jsoup.parse(\"<p id=0 class='one two'><p id=1 class='one'><p id=2 class='two'>\").select(\"p.one\");\n         assertEquals(2, els.size());\n         assertEquals(\"0\", els.get(0).id());\n         assertEquals(\"1\", els.get(1).id());\n         assertEquals(1, div2.size());\n         assertEquals(\"2\", div2.get(0).id());\n     }\n+    \n+    @Test public void parentWithClassChild() {\n+        String h = \"<h1 class=foo><a href=1 /></h1><h1 class=foo><a href=2 class=bar /></h1><h1><a href=3 /></h1>\";\n+        Document doc = Jsoup.parse(h);\n+        \n+        Elements allAs = doc.select(\"h1 > a\");\n+        assertEquals(3, allAs.size());\n+        assertEquals(\"a\", allAs.first().tagName());\n+        \n+        Elements fooAs = doc.select(\"h1.foo > a\");\n+        assertEquals(2, fooAs.size());\n+        assertEquals(\"a\", fooAs.first().tagName());\n+        \n+        Elements barAs = doc.select(\"h1.foo > a.bar\");\n+        assertEquals(1, barAs.size());\n+    }\n \n     @Test public void parentChildStar() {\n         String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\";", "timestamp": 1309605104, "metainfo": ""}