{"sha": "7b9f17760049161b775fd23b15653961620e259d", "log": "Added Element.textNodes() and Element.dataNodes(), to easily access an element's children text nodes and data nodes.", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n                 elements.add((Element) node);\n         }\n         return new Elements(elements);\n+    }\n+\n+    /**\n+     * Get this element's child text nodes. The list is unmodifiable but the text nodes may be manipulated.\n+     * <p/>\n+     * This is effectively a filter on {@link #childNodes()} to get Text nodes.\n+     * @return child text nodes. If this element has no text nodes, returns an\n+     * empty list.\n+     * <p/>\n+     * For example, with the input HTML: {@code <p>One <span>Two</span> Three <br> Four</p>} with the {@code p} element selected:\n+     * <ul>\n+     *     <li>{@code p.text()} = {@code \"One Two Three Four\"}</li>\n+     *     <li>{@code p.ownText()} = {@code \"One Three Four\"}</li>\n+     *     <li>{@code p.children()} = {@code Elements[<span>, <br>]}</li>\n+     *     <li>{@code p.childNodes()} = {@code List<Node>[\"One \", <span>, \" Three \", <br>, \" Four\"]}</li>\n+     *     <li>{@code p.textNodes()} = {@code List<TextNode>[\"One \", \" Three \", \" Four\"]}</li>\n+     * </ul>\n+     */\n+    public List<TextNode> textNodes() {\n+        List<TextNode> textNodes = new ArrayList<TextNode>();\n+        for (Node node : childNodes) {\n+            if (node instanceof TextNode)\n+                textNodes.add((TextNode) node);\n+        }\n+        return Collections.unmodifiableList(textNodes);\n+    }\n+\n+    /**\n+     * Get this element's child data nodes. The list is unmodifiable but the data nodes may be manipulated.\n+     * <p/>\n+     * This is effectively a filter on {@link #childNodes()} to get Data nodes.\n+     * @return child data nodes. If this element has no data nodes, returns an\n+     * empty list.\n+     * @see #data()\n+     */\n+    public List<DataNode> dataNodes() {\n+        List<DataNode> dataNodes = new ArrayList<DataNode>();\n+        for (Node node : childNodes) {\n+            if (node instanceof DataNode)\n+                dataNodes.add((DataNode) node);\n+        }\n+        return Collections.unmodifiableList(dataNodes);\n     }\n \n     /**\n      *\n      * @return unencoded text, or empty string if none.\n      * @see #ownText()\n+     * @see #textNodes()\n      */\n     public String text() {\n         StringBuilder sb = new StringBuilder();\n      *\n      * @return unencoded text, or empty string if none.\n      * @see #text()\n+     * @see #textNodes()\n      */\n     public String ownText() {\n         StringBuilder sb = new StringBuilder();\n     /**\n      * Get the combined data of this element. Data is e.g. the inside of a {@code script} tag.\n      * @return the data, or empty string if none\n+     *\n+     * @see #dataNodes()\n      */\n     public String data() {\n         StringBuilder sb = new StringBuilder();\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n         assertTrue(doc.html().contains(doc.select(\"div\").outerHtml()));\n     }\n \n-\n+    @Test public void testGetTextNodes() {\n+        Document doc = Jsoup.parse(\"<p>One <span>Two</span> Three <br> Four</p>\");\n+        List<TextNode> textNodes = doc.select(\"p\").first().textNodes();\n+\n+        assertEquals(3, textNodes.size());\n+        assertEquals(\"One \", textNodes.get(0).text());\n+        assertEquals(\" Three \", textNodes.get(1).text());\n+        assertEquals(\" Four\", textNodes.get(2).text());\n+\n+        assertEquals(0, doc.select(\"br\").first().textNodes().size());\n+    }\n+\n+    @Test public void testManipulateTextNodes() {\n+        Document doc = Jsoup.parse(\"<p>One <span>Two</span> Three <br> Four</p>\");\n+        Element p = doc.select(\"p\").first();\n+        List<TextNode> textNodes = p.textNodes();\n+\n+        textNodes.get(1).text(\" three-more \");\n+        textNodes.get(2).splitText(3).text(\"-ur\");\n+\n+        assertEquals(\"One Two three-more Fo-ur\", p.text());\n+        assertEquals(\"One three-more Fo-ur\", p.ownText());\n+        assertEquals(4, p.textNodes().size()); // grew because of split\n+    }\n+\n+    @Test public void testGetDataNodes() {\n+        Document doc = Jsoup.parse(\"<script>One Two</script> <style>Three Four</style> <p>Fix Six</p>\");\n+        Element script = doc.select(\"script\").first();\n+        Element style = doc.select(\"style\").first();\n+        Element p = doc.select(\"p\").first();\n+\n+        List<DataNode> scriptData = script.dataNodes();\n+        assertEquals(1, scriptData.size());\n+        assertEquals(\"One Two\", scriptData.get(0).getWholeData());\n+\n+        List<DataNode> styleData = style.dataNodes();\n+        assertEquals(1, styleData.size());\n+        assertEquals(\"Three Four\", styleData.get(0).getWholeData());\n+\n+        List<DataNode> pData = p.dataNodes();\n+        assertEquals(0, pData.size());\n+    }\n }", "timestamp": 1314670532, "metainfo": ""}