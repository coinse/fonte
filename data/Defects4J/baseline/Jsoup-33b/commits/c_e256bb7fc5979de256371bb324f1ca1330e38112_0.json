{"sha": "e256bb7fc5979de256371bb324f1ca1330e38112", "log": "Added support for non-pretty-printed HTML output, to more closely mirror the input HTML.  Fixes #8", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Comment.java\n+++ b/src/main/java/org/jsoup/nodes/Comment.java\n     }\n \n     void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n-        indent(accum, depth);\n+        if (out.prettyPrint())\n+            indent(accum, depth, out);\n         accum\n                 .append(\"<!--\")\n                 .append(getData())\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n         private Entities.EscapeMode escapeMode = Entities.EscapeMode.base;\n         private Charset charset = Charset.forName(\"UTF-8\");\n         private CharsetEncoder charsetEncoder = charset.newEncoder();\n+        private boolean prettyPrint = true;\n+        private int indentAmount = 1;\n \n         public OutputSettings() {}\n \n         CharsetEncoder encoder() {\n             return charsetEncoder;\n         }\n+\n+        /**\n+         * Get if pretty printing is enabled. Default is true. If disabled, the HTML output methods will not re-format\n+         * the output, and the output will generally look like the input.\n+         * @return if pretty printing is enabled.\n+         */\n+        public boolean prettyPrint() {\n+            return prettyPrint;\n+        }\n+\n+        /**\n+         * Enable or disable pretty printing.\n+         * @param pretty new pretty print setting\n+         * @return this, for chaining\n+         */\n+        public OutputSettings prettyPrint(boolean pretty) {\n+            prettyPrint = pretty;\n+            return this;\n+        }\n+\n+        /**\n+         * Get the current tag indent amount, used when pretty printing.\n+         * @return the current indent amount\n+         */\n+        public int indentAmount() {\n+            return indentAmount;\n+        }\n+\n+        /**\n+         * Set the indent amount for pretty printing\n+         * @param indentAmount number of spaces to use for indenting each level. Must be >= 0.\n+         * @return this, for chaining\n+         */\n+        public OutputSettings indentAmount(int indentAmount) {\n+            Validate.isTrue(indentAmount >= 0);\n+            this.indentAmount = indentAmount;\n+            return this;\n+        }\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     }\n \n     void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n-        if (isBlock() || (parent() != null && parent().tag().canContainBlock() && siblingIndex() == 0))\n-            indent(accum, depth);\n+        if (out.prettyPrint() && (isBlock() || (parent() != null && parent().tag().canContainBlock() && siblingIndex() == 0)))\n+            indent(accum, depth, out);\n         accum\n                 .append(\"<\")\n                 .append(tagName());\n \n     void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {\n         if (!(childNodes.isEmpty() && tag.isSelfClosing())) {\n-            if (!childNodes.isEmpty() && tag.canContainBlock())\n-                indent(accum, depth);\n+            if (out.prettyPrint() && !childNodes.isEmpty() && tag.canContainBlock())\n+                indent(accum, depth, out);\n             accum.append(\"</\").append(tagName()).append(\">\");\n         }\n     }\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n         return outerHtml();\n     }\n \n-    protected void indent(StringBuilder accum, int depth) {\n-        accum.append(\"\\n\").append(StringUtil.padding(depth));\n+    protected void indent(StringBuilder accum, int depth, Document.OutputSettings out) {\n+        accum.append(\"\\n\").append(StringUtil.padding(depth * out.indentAmount()));\n     }\n \n     @Override\n--- a/src/main/java/org/jsoup/nodes/TextNode.java\n+++ b/src/main/java/org/jsoup/nodes/TextNode.java\n \n     void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n         String html = Entities.escape(getWholeText(), out);\n-        if (parent() instanceof Element && !((Element) parent()).preserveWhitespace()) {\n+        if (out.prettyPrint() && parent() instanceof Element && !((Element) parent()).preserveWhitespace()) {\n             html = normaliseWhitespace(html);\n         }\n \n-        if (siblingIndex() == 0 && parentNode instanceof Element && ((Element) parentNode).tag().canContainBlock() && !isBlank())\n-            indent(accum, depth);\n+        if (out.prettyPrint() && siblingIndex() == 0 && parentNode instanceof Element && ((Element) parentNode).tag().canContainBlock() && !isBlank())\n+            indent(accum, depth, out);\n         accum.append(html);\n     }\n \n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n         Document doc = Jsoup.parse(\"<div><p>Hello</p></div>\");\n         assertEquals(\"<html>\\n <head></head>\\n <body>\\n  <div>\\n   <p>Hello</p>\\n  </div>\\n </body>\\n</html>\", doc.html());\n     }\n+\n+    @Test public void testSetIndent() {\n+        Document doc = Jsoup.parse(\"<div><p>Hello\\nthere</p></div>\");\n+        doc.outputSettings().indentAmount(0);\n+        assertEquals(\"<html>\\n<head></head>\\n<body>\\n<div>\\n<p>Hello there</p>\\n</div>\\n</body>\\n</html>\", doc.html());\n+    }\n+\n+    @Test public void testNotPretty() {\n+        Document doc = Jsoup.parse(\"<div>   \\n<p>Hello\\n there</p></div>\");\n+        doc.outputSettings().prettyPrint(false);\n+        assertEquals(\"<html><head></head><body><div>   \\n<p>Hello\\n there</p></div></body></html>\", doc.html());\n+    }\n     \n     @Test public void testEmptyElementFormatHtml() {\n         // don't put newlines into empty blocks", "timestamp": 1309605119, "metainfo": ""}