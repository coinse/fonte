{"sha": "ca8bad78bf898f808ad6028d4a7c09a69bc65b84", "log": "Added Elements.not(selector) method, to remove undesired results from selector results.", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     }\n \n     /**\n-     * Find elements that match the selector query, with this element as the starting context. Matched elements\n+     * Find elements that match the {@link Selector} query, with this element as the starting context. Matched elements\n      * may include this element, or any of its children.\n      * <p/>\n      * This method is generally more powerful to use than the DOM-type {@code getElementBy*} methods, because\n--- a/src/main/java/org/jsoup/select/Elements.java\n+++ b/src/main/java/org/jsoup/select/Elements.java\n     \n     /**\n      * Find matching elements within this element list.\n-     * @param query A selector query\n+     * @param query A {@link Selector} query\n      * @return the filtered list of elements, or an empty list if none match.\n      */\n     public Elements select(String query) {\n         return Selector.select(query, this);\n+    }\n+\n+    /**\n+     * Remove elements from this list that do not match the {@link Selector} query.\n+     * <p>\n+     * E.g. HTML: {@code <div class=logo>One</div> <div>Two</div>}<br>\n+     * <code>Elements divs = doc.select(\"div\").not(\"#logo\");</code><br>\n+     * Result: {@code divs: [<div>Two</div>]}\n+     * <p>\n+     * @param query the selector query whose results should be removed from these elements\n+     * @return a new elements list that contains only the filtered results\n+     */\n+    public Elements not(String query) {\n+        Elements out = Selector.select(query, this);\n+        return Selector.filterOut(this, out);\n     }\n     \n     /**\n--- a/src/main/java/org/jsoup/select/Selector.java\n+++ b/src/main/java/org/jsoup/select/Selector.java\n   <tr><td><code>:gt(<em>n</em>)</code></td><td>elements whose sibling index is greater than <em>n</em></td><td><code>td:gt(1)</code> finds cells after skipping the first two</td></tr>\n   <tr><td><code>:eq(<em>n</em>)</code></td><td>elements whose sibling index is equal to <em>n</em></td><td><code>td:eq(0)</code> finds the first cell of each row</td></tr>\n   <tr><td><code>:has(<em>selector</em>)</code></td><td>elements that contains at least one element matching the <em>selector</em></td><td><code>div:has(p)</code> finds divs that contain p elements </td></tr>\n-  <tr><td><code>:not(<em>selector</em>)</code></td><td>elements that do not match the <em>selector</em></td><code>div:not(.logo)</code> finds all divs that do not have the \"logo\" class</td></tr>\n+  <tr><td><code>:not(<em>selector</em>)</code></td><td>elements that do not match the <em>selector</em>. See also {@link Elements#not(String)}</td><code>div:not(.logo)</code> finds all divs that do not have the \"logo\" class</td></tr>\n   <tr><td><code>:contains(<em>text</em>)</code></td><td>elements that contains the specified text. The search is case insensitive. The text may appear in the found element, or any of its descendants.</td><td><code>p:contains(jsoup)</code> finds p elements containing the text \"jsoup\".</td></tr>\n   <tr><td><code>:matches(<em>regex</em>)</code></td><td>elements whose text matches the specified regular expression. The text may appear in the found element, or any of its descendants.</td><td><code>td:matches(\\\\d+)</code> finds table cells containing digits. <code>div:matches((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n   <tr><td><code>:containsOwn(<em>text</em>)</code></td><td>elements that directly contains the specified text. The search is case insensitive. The text must appear in the found element, not any of its descendants.</td><td><code>p:containsOwn(jsoup)</code> finds p elements with own text \"jsoup\".</td></tr>\n--- a/src/test/java/org/jsoup/select/ElementsTest.java\n+++ b/src/test/java/org/jsoup/select/ElementsTest.java\n         assertEquals(\"body\", parents.get(1).tagName());\n         assertEquals(\"html\", parents.get(2).tagName());\n     }\n+\n+    @Test public void not() {\n+        Document doc = Jsoup.parse(\"<div id=1><p>One</p></div> <div id=2><p><span>Two</span></p></div>\");\n+\n+        Elements div1 = doc.select(\"div\").not(\":has(p > span)\");\n+        assertEquals(1, div1.size());\n+        assertEquals(\"1\", div1.first().id());\n+\n+        Elements div2 = doc.select(\"div\").not(\"#1\");\n+        assertEquals(1, div2.size());\n+        assertEquals(\"2\", div2.first().id());\n+    }\n }", "timestamp": 1309605122, "metainfo": ""}