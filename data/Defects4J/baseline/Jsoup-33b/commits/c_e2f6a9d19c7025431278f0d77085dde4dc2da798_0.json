{"sha": "e2f6a9d19c7025431278f0d77085dde4dc2da798", "log": "Neatened Parser", "commit": "\n--- a/src/main/java/org/jsoup/parser/Parser.java\n+++ b/src/main/java/org/jsoup/parser/Parser.java\n         Attributes attributes = new Attributes();\n \n         String tagName = tq.consumeWord();\n-        while (!tq.matches(\"<\") && !tq.matches(\"/>\") && !tq.matches(\">\") && !tq.isEmpty()) {\n+        while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n             Attribute attribute = parseAttribute();\n             if (attribute != null)\n                 attributes.put(attribute);\n         if (tag.isData()) {\n             String data = tq.chompTo(\"</\" + tagName);\n             tq.chompTo(\">\");\n-            TextNode textNode = TextNode.createFromEncoded(data);\n+            TextNode textNode = TextNode.createFromEncoded(data); // TODO: maybe have this be another data type? So doesn't come back in text()?\n             child.addChild(textNode);\n \n             if (tag.equals(titleTag))\n             } else {\n                 StringBuilder valueAccum = new StringBuilder();\n                 // no ' or \" to look for, so scan to end tag or space (or end of stream)\n-                while (!tq.matches(\"<\") && !tq.matches(\"/>\") && !tq.matches(\">\") && !tq.matchesWhitespace() && !tq.isEmpty()) {\n+                while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.matchesWhitespace() && !tq.isEmpty()) {\n                     valueAccum.append(tq.consume());\n                 }\n                 value = valueAccum.toString();\n \n     private void parseTextNode() {\n         // TODO: work out whitespace requirements (between blocks, between inlines)\n-        StringBuilder textAccum = new StringBuilder();\n-        while (!tq.matches(\"<\") && !tq.isEmpty()) { // scan to next tag\n-            textAccum.append(tq.consume());\n-        }\n-        TextNode textNode = TextNode.createFromEncoded(textAccum.toString());\n+        String text = tq.consumeTo(\"<\");\n+        TextNode textNode = TextNode.createFromEncoded(text);\n         last().addChild(textNode);\n     }\n ", "timestamp": 1309605102, "metainfo": ""}