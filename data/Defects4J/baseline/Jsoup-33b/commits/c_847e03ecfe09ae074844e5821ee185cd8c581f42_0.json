{"sha": "847e03ecfe09ae074844e5821ee185cd8c581f42", "log": "Implemented Element.dataset(), to retrieve a map of custom data attributes.", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Attribute.java\n+++ b/src/main/java/org/jsoup/nodes/Attribute.java\n import org.apache.commons.lang.StringEscapeUtils;\n import org.apache.commons.lang.Validate;\n \n+import java.util.Map;\n+\n /**\n  A single key + value attribute. Keys are trimmed and normalised to lower-case.\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n-public class Attribute {\n+public class Attribute implements Map.Entry<String, String>  {\n     private String key;\n     private String value;\n \n      Set the attribute value.\n      @param value the new attribute value; must not be null\n      */\n-    public void setValue(String value) {\n+    public String setValue(String value) {\n         Validate.notNull(value);\n+        String old = this.value;\n         this.value = value;\n+        return old;\n     }\n \n     /**\n         return new Attribute(unencodedKey, value);\n     }\n \n+    protected boolean isDataAttribute() {\n+        return key.startsWith(Attributes.dataPrefix) && key.length() > Attributes.dataPrefix.length();\n+    }\n+\n     @Override\n     public boolean equals(Object o) {\n         if (this == o) return true;\n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n  * @author Jonathan Hedley, jonathan@hedley.net\n  */\n public class Attributes implements Iterable<Attribute> {\n+    protected static final String dataPrefix = \"data-\";\n+    \n     private LinkedHashMap<String, Attribute> attributes = new LinkedHashMap<String, Attribute>(2);\n     // linked hash map to preserve insertion order.\n \n     }\n \n     /**\n+     * Retrieves a filtered view of attributes that are HTML5 custom data attributes; that is, attributes with keys\n+     * starting with {@code data-}.\n+     * @return map of custom data attributes.\n+     */\n+    public Map<String, String> dataset() {\n+        return new Dataset();\n+    }\n+\n+    /**\n      Get the HTML representation of these attributes.\n      @return HTML\n      */\n         return attributes != null ? attributes.hashCode() : 0;\n     }\n \n+    private class Dataset extends AbstractMap<String, String> {\n+\n+        public Set<Entry<String, String>> entrySet() {\n+            return new EntrySet();\n+        }\n+\n+        @Override\n+        public String put(String key, String value) {\n+            String dataKey = dataKey(key);\n+            String oldValue = hasKey(dataKey) ? attributes.get(dataKey).getValue() : null;\n+            Attribute attr = new Attribute(dataKey, value);\n+            attributes.put(dataKey, attr);\n+            return oldValue;\n+        }\n+\n+        private class EntrySet extends AbstractSet<Map.Entry<String, String>> {\n+            public Iterator<Map.Entry<String, String>> iterator() {\n+                return new DatasetIterator();\n+            }\n+\n+            public int size() {\n+                int count = 0;\n+                Iterator iter = new DatasetIterator();\n+                while (iter.hasNext())\n+                    count++;\n+                return count;\n+            }\n+        }\n+\n+        private class DatasetIterator implements Iterator<Map.Entry<String, String>> {\n+            private Iterator<Attribute> attrIter = attributes.values().iterator();\n+            private Attribute attr;\n+            public boolean hasNext() {\n+                while (attrIter.hasNext()) {\n+                    attr = attrIter.next();\n+                    if (attr.isDataAttribute()) return true;\n+                }\n+                return false;\n+            }\n+\n+            public Entry<String, String> next() {\n+                return new Attribute(attr.getKey().substring(dataPrefix.length()), attr.getValue());\n+            }\n+\n+            public void remove() {\n+                attributes.remove(attr.getKey());\n+            }\n+        }\n+    }\n+\n+    private static String dataKey(String key) {\n+        return dataPrefix + key;\n+    }\n }\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     public Element attr(String attributeKey, String attributeValue) {\n         super.attr(attributeKey, attributeValue);\n         return this;\n+    }\n+\n+    /**\n+     * Get this element's HTML5 custom data attributes. Each attribute in the element that has a key\n+     * starting with \"data-\" is included the dataset.\n+     * <p>\n+     * E.g., the element {@code &lt;div data-package=\"jsoup\" data-language=\"Java\" class=\"group\"&gt;...} has the dataset\n+     * {@code package=jsoup, language=java}.\n+     * <p>\n+     * This map is a filtered view of the element's attribute map. Changes to one map (add, remove, update) are reflected\n+     * in the other map.\n+     * <p>\n+     * You can find elements that have data attributes using the {@code [^data-]} attribute key prefix selector.\n+     * @return a map of {@code key=value} custom data attributes.\n+     */\n+    public Map<String, String> dataset() {\n+        return attributes.dataset();\n     }\n \n     @Override\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n \n import java.util.List;\n import java.util.Set;\n+import java.util.Map;\n \n /**\n  * Tests for Element (DOM stuff mostly).\n         assertFalse(ps.last().hasText());\n     }\n \n+    @Test public void dataset() {\n+        Document doc = Jsoup.parse(\"<div id=1 data-name=jsoup class=new data-package=jar>Hello</div><p id=2>Hello</p>\");\n+        Element div = doc.select(\"div\").first();\n+        Map<String, String> dataset = div.dataset();\n+        Attributes attributes = div.attributes();\n+\n+        // size, get, set, add, remove\n+        assertEquals(2, dataset.size());\n+        assertEquals(\"jsoup\", dataset.get(\"name\"));\n+        assertEquals(\"jar\", dataset.get(\"package\"));\n+\n+        dataset.put(\"name\", \"jsoup updated\");\n+        dataset.put(\"language\", \"java\");\n+        dataset.remove(\"package\");\n+\n+        assertEquals(2, dataset.size());\n+        assertEquals(4, attributes.size());\n+        assertEquals(\"jsoup updated\", attributes.get(\"data-name\"));\n+        assertEquals(\"jsoup updated\", dataset.get(\"name\"));\n+        assertEquals(\"java\", attributes.get(\"data-language\"));\n+        assertEquals(\"java\", dataset.get(\"language\"));\n+\n+        attributes.put(\"data-food\", \"bacon\");\n+        assertEquals(3, dataset.size());\n+        assertEquals(\"bacon\", dataset.get(\"food\"));\n+\n+        attributes.put(\"data-\", \"empty\");\n+        assertEquals(null, dataset.get(\"\")); // data- is not a data attribute\n+\n+        Element p = doc.select(\"p\").first();\n+        assertEquals(0, p.dataset().size());\n+\n+    }\n+\n \n }", "timestamp": 1309605115, "metainfo": ""}