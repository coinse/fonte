{"sha": "d23db47db68a1b25b90e4ce255156e9758697ed2", "log": "Implement baseURIs for all Nodes, and absolute URL attribute getter.", "commit": "\n--- a/src/main/java/org/jsoup/Jsoup.java\n+++ b/src/main/java/org/jsoup/Jsoup.java\n  * @author Jonathan Hedley\n  */\n public class Jsoup {\n+    public static Document parse(String html, String baseUri) {\n+        return Parser.parse(html, baseUri);\n+    }\n     public static Document parse(String html) {\n-        return Parser.parse(html);\n+        return Parser.parse(html, \"\");\n     }\n }\n--- a/src/main/java/org/jsoup/nodes/Comment.java\n+++ b/src/main/java/org/jsoup/nodes/Comment.java\n public class Comment extends Node {\n     private static final String COMMENT_KEY = \"comment\";\n \n-    public Comment(String data) {\n-        super();\n+    public Comment(String data, String baseUri) {\n+        super(baseUri);\n         attributes.put(COMMENT_KEY, data);\n     }\n \n--- a/src/main/java/org/jsoup/nodes/DataNode.java\n+++ b/src/main/java/org/jsoup/nodes/DataNode.java\n public class DataNode extends Node{\n     private static final String DATA_KEY = \"data\";\n \n-    public DataNode(String data) {\n-        super();\n+    public DataNode(String data, String baseUri) {\n+        super(baseUri);\n         attributes.put(DATA_KEY, data);\n     }\n \n         return outerHtml();\n     }\n \n-    public static DataNode createFromEncoded(String encodedData) {\n+    public static DataNode createFromEncoded(String encodedData, String baseUri) {\n         String data = StringEscapeUtils.unescapeHtml(encodedData);\n-        return new DataNode(data);\n+        return new DataNode(data, baseUri);\n     }\n }\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n public class Document extends Element {\n     private String title;\n \n-    public Document() {\n-        super(new StartTag(Tag.valueOf(\"#root\")));\n+    public Document(String baseUri) {\n+        super(new StartTag(Tag.valueOf(\"#root\"), baseUri));\n     }\n \n     public Element getHead() {\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     private Set<String> classNames;\n \n     public Element(StartTag startTag) {\n-        super(startTag.getAttributes());\n+        super(startTag.getBaseUri(), startTag.getAttributes());\n         this.tag = startTag.getTag();\n         elementChildren = new ArrayList<Element>();\n     }\n \n         childNodes.clear();\n         elementChildren.clear();\n-        TextNode textNode = new TextNode(text);\n+        TextNode textNode = new TextNode(text, baseUri);\n         addChild(textNode);\n \n         return this;\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n import org.apache.commons.lang.NotImplementedException;\n import org.apache.commons.lang.Validate;\n \n+import java.net.MalformedURLException;\n+import java.net.URL;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n     Node parentNode;\n     final List<Node> childNodes;\n     final Attributes attributes;\n+    final String baseUri;\n \n     /**\n      Create a new node.\n      */\n-    protected Node(Attributes attributes) {\n+    protected Node(String baseUri, Attributes attributes) {\n+        Validate.notNull(baseUri);\n+        Validate.notNull(attributes);\n+        \n         childNodes = new ArrayList<Node>();\n+        this.baseUri = baseUri.trim();\n         this.attributes = attributes;\n     }\n \n-    protected Node() {\n-        this(new Attributes());\n+    protected Node(String baseUri) {\n+        this(baseUri, new Attributes());\n     }\n \n     public abstract String nodeName();\n \n     public String attr(String attributeKey) {\n-        return attributes.get(attributeKey);\n+        String value = attributes.get(attributeKey);\n+        return value == null ? \"\" : value;\n     }\n \n     public Node attr(String attributeKey, String attributeValue) {\n         attributes.put(attributeKey, attributeValue);\n         return this;\n+    }\n+\n+    public boolean hasAttr(String attributeKey) {\n+        Validate.notNull(attributeKey);\n+        return attributes.hasKey(attributeKey);\n+    }\n+\n+    public String baseUri() {\n+        return baseUri;\n+    }\n+\n+    public String absUrl(String attribute) {\n+        Validate.notEmpty(attribute);\n+\n+        String relUrl = attr(attribute);\n+        if (baseUri.isEmpty()) {\n+            return relUrl; // nothing to make absolute with\n+        } else {\n+            URL base;\n+            try {\n+                try {\n+                    base = new URL(baseUri);\n+                } catch (MalformedURLException e) {\n+                    // the base is unsuitable, but the attribute may be abs, so try that\n+                    URL abs = new URL(relUrl);\n+                    return abs.toExternalForm();\n+                }\n+                URL abs = new URL(base, relUrl);\n+                return abs.toExternalForm();\n+            } catch (MalformedURLException e) {\n+                return \"\";\n+            }\n+        }\n     }\n \n     public Node childNode(int index) {\n--- a/src/main/java/org/jsoup/nodes/TextNode.java\n+++ b/src/main/java/org/jsoup/nodes/TextNode.java\n     /**\n      * Create a new TextNode representing the supplied (unencoded) text).\n      * @param text raw text\n-     * @see #createFromEncoded(String)\n+     * @see #createFromEncoded(String, String)\n      */\n-    public TextNode(String text) {\n-        super();\n+    public TextNode(String text, String baseUri) {\n+        super(baseUri);\n         attributes.put(TEXT_KEY, text);\n     }\n \n      * @param encodedText Text containing encoded HTML (e.g. &amp;lt;)\n      * @return TextNode containing unencoded data (e.g. &lt;)\n      */\n-    public static TextNode createFromEncoded(String encodedText) {\n+    public static TextNode createFromEncoded(String encodedText, String baseUri) {\n         String text = StringEscapeUtils.unescapeHtml(encodedText);\n-        return new TextNode(text);\n+        return new TextNode(text, baseUri);\n     }\n }\n--- a/src/main/java/org/jsoup/nodes/XmlDeclaration.java\n+++ b/src/main/java/org/jsoup/nodes/XmlDeclaration.java\n public class XmlDeclaration extends Node {\n     private static final String DECL_KEY = \"declaration\";\n \n-    public XmlDeclaration(String data) {\n-        super();\n+    public XmlDeclaration(String data, String baseUri) {\n+        super(baseUri);\n         attributes.put(DECL_KEY, data);\n     }\n \n--- a/src/main/java/org/jsoup/parser/Parser.java\n+++ b/src/main/java/org/jsoup/parser/Parser.java\n     private LinkedList<Element> stack;\n     private TokenQueue tq;\n     private Document doc;\n-\n-    public Parser(String html) {\n+    private String baseUri;\n+\n+    public Parser(String html, String baseUri) {\n         Validate.notNull(html);\n+        Validate.notNull(baseUri);\n \n         stack = new LinkedList<Element>();\n         tq = new TokenQueue(html);\n-\n-        doc = new Document();\n+        this.baseUri = baseUri;\n+\n+        doc = new Document(baseUri);\n         stack.add(doc);\n     }\n \n-    public static Document parse(String html) {\n-        Parser parser = new Parser(html);\n+    public static Document parse(String html, String baseUri) {\n+        Parser parser = new Parser(html, baseUri);\n         return parser.parse();\n     }\n \n \n         if (data.endsWith(\"-\")) // i.e. was -->\n             data = data.substring(0, data.length()-1);\n-        Comment comment = new Comment(data);\n+        Comment comment = new Comment(data, baseUri);\n         last().addChild(comment);\n     }\n \n         tq.consume(\"<\"); tq.consume(); // <? or <!, from initial match.\n         String data = tq.chompTo(\">\");\n \n-        XmlDeclaration decl = new XmlDeclaration(data);\n+        XmlDeclaration decl = new XmlDeclaration(data, baseUri);\n         last().addChild(decl);\n     }\n \n         }\n \n         Tag tag = Tag.valueOf(tagName);\n-        StartTag startTag = new StartTag(tag, attributes);\n+        StartTag startTag = new StartTag(tag, baseUri, attributes);\n         Element child = new Element(startTag);\n \n         if (!tq.matchChomp(\"/>\")) { // close empty element or tag\n         if (tag.isData()) {\n             String data = tq.chompTo(\"</\" + tagName);\n             tq.chompTo(\">\");\n-            DataNode dataNode = DataNode.createFromEncoded(data);\n+            DataNode dataNode = DataNode.createFromEncoded(data, baseUri);\n             child.addChild(dataNode);\n \n             if (tag.equals(titleTag))\n                 doc.setTitle(child.data());\n         }\n+\n+        // <base href>: update the base uri\n+        if (child.tagName().equals(\"base\")) {\n+            baseUri = child.absUrl(\"href\");\n+        }\n+\n         addChildToParent(child);\n     }\n \n     private void parseTextNode() {\n         // TODO: work out whitespace requirements (between blocks, between inlines)\n         String text = tq.consumeTo(\"<\");\n-        TextNode textNode = TextNode.createFromEncoded(text);\n+        TextNode textNode = TextNode.createFromEncoded(text, baseUri);\n         last().addChild(textNode);\n     }\n \n         if (!validAncestor) {\n             // create implicit parent around this child\n             Tag parentTag = childTag.getImplicitParent();\n-            StartTag parentStart = new StartTag(parentTag);\n+            StartTag parentStart = new StartTag(parentTag, baseUri);\n             Element implicit = new Element(parentStart);\n             // special case: make sure there's a head before putting in body\n             if (child.getTag().equals(bodyTag)) {\n-                Element head = new Element(new StartTag(headTag));\n+                Element head = new Element(new StartTag(headTag, baseUri));\n                 implicit.addChild(head);\n             }\n             implicit.addChild(child);\n--- a/src/main/java/org/jsoup/parser/StartTag.java\n+++ b/src/main/java/org/jsoup/parser/StartTag.java\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n public class StartTag {\n-    Tag tag;\n-    Attributes attributes;\n+    final Tag tag;\n+    final Attributes attributes;\n+    final String baseUri;\n \n-    public StartTag(Tag tag, Attributes attributes) {\n+    public StartTag(Tag tag, String baseUri, Attributes attributes) {\n         Validate.notNull(attributes);\n+        Validate.notNull(baseUri);\n+\n         this.tag = tag;\n+        this.baseUri = baseUri;\n         this.attributes = attributes;\n     }\n \n-    public StartTag(Tag tag) {\n-        this(tag, new Attributes());\n+    public StartTag(Tag tag, String baseUri) {\n+        this(tag, baseUri, new Attributes());\n     }\n \n     public Tag getTag() {\n     public Attributes getAttributes() {\n         return attributes;\n     }\n+\n+    public String getBaseUri() {\n+        return baseUri;\n+    }\n }\n--- a/src/main/java/org/jsoup/select/Evaluator.java\n+++ b/src/main/java/org/jsoup/select/Evaluator.java\n         }\n \n         boolean matches(Element element) {\n-            return (element.attr(key) != null);\n+            return (element.hasAttr(key));\n         }\n     }\n \n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n     }\n \n     @Test public void testGetElementsWithAttribute() {\n-        Document doc = Jsoup.parse(\"<div style='bold'><p><p><b style></b></p></div>\");\n+        Document doc = Jsoup.parse(\"<div style='bold'><p title=qux><p><b style></b></p></div>\");\n         List<Element> els = doc.getElementsWithAttribute(\"style\");\n         assertEquals(2, els.size());\n         assertEquals(\"div\", els.get(0).tagName());\n--- /dev/null\n+++ b/src/test/java/org/jsoup/nodes/NodeTest.java\n+package org.jsoup.nodes;\n+\n+import org.jsoup.parser.StartTag;\n+import org.jsoup.parser.Tag;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+/**\n+ Tests Nodes\n+\n+ @author Jonathan Hedley, jonathan@hedley.net */\n+public class NodeTest {\n+    @Test public void handlesBaseUri() {\n+        Tag tag = Tag.valueOf(\"a\");\n+        Attributes attribs = new Attributes();\n+        attribs.put(\"relHref\", \"/foo\");\n+        attribs.put(\"absHref\", \"http://bar/qux\");\n+\n+        Element noBase = new Element(new StartTag(tag, \"\", attribs));\n+        assertEquals(\"/foo\", noBase.absUrl(\"relHref\")); // with no base, should fallback to href attrib, whatever it is\n+\n+        Element withBase = new Element(new StartTag(tag, \"http://foo/\", attribs));\n+        assertEquals(\"http://foo/foo\", withBase.absUrl(\"relHref\")); // construct abs from base + rel\n+        assertEquals(\"http://bar/qux\", withBase.absUrl(\"absHref\")); // href is abs, so returns that\n+        assertEquals(\"http://foo/\", withBase.absUrl(\"noval\"));\n+\n+        Element dodgyBase = new Element(new StartTag(tag, \"wtf://no-such-protocol/\", attribs));\n+        assertEquals(\"http://bar/qux\", dodgyBase.absUrl(\"absHref\")); // base fails, but href good, so get that\n+        assertEquals(\"\", dodgyBase.absUrl(\"relHref\")); // base fails, only rel href, so return nothing \n+    }\n+}\n--- a/src/test/java/org/jsoup/parser/ParserTest.java\n+++ b/src/test/java/org/jsoup/parser/ParserTest.java\n         assertEquals(\"<table><tr><td>Hello</td><td><p>There</p><p>now</p></td></tr></table>\", doc.getBody().html());\n     }\n \n+    @Test public void handlesBaseTags() {\n+        String h = \"<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=4>#</a>\";\n+        Document doc = Jsoup.parse(h, \"http://foo/\");\n+        assertEquals(\"http://foo/\", doc.baseUri());\n+\n+        Elements anchors = doc.getElementsByTag(\"a\");\n+        assertEquals(3, anchors.size());\n+\n+        assertEquals(\"http://foo/\", anchors.get(0).baseUri());\n+        assertEquals(\"http://foo/2/\", anchors.get(1).baseUri());\n+        assertEquals(\"http://bar\", anchors.get(2).baseUri());\n+\n+        assertEquals(\"http://foo/1\", anchors.get(0).absUrl(\"href\"));\n+        assertEquals(\"http://foo/2/3\", anchors.get(1).absUrl(\"href\"));\n+        assertEquals(\"http://bar/4\", anchors.get(2).absUrl(\"href\"));\n+    }\n+\n \n }\n--- a/src/test/java/org/jsoup/select/SelectorTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorTest.java\n     }\n \n     @Test public void testByAttribute() {\n-        String h = \"<div title=foo /><div title=bar /><div />\";\n+        String h = \"<div title=foo /><div title=bar /><div style=qux />\";\n         Document doc = Jsoup.parse(h);\n         Elements withTitle = doc.select(\"[title]\");\n         Elements foo = doc.select(\"[title=foo]\");\n         assertEquals(\"div\", els.get(2).tagName());\n         assertEquals(\"bar\", els.get(2).attr(\"title\"));\n         assertEquals(\"div\", els.get(3).tagName());\n-        assertNull(els.get(3).attr(\"title\"));\n+        assertTrue(els.get(3).attr(\"title\").isEmpty()); // missing attributes come back as empty string\n+        assertFalse(els.get(3).hasAttr(\"title\"));\n         assertEquals(\"span\", els.get(4).tagName());\n     }\n ", "timestamp": 1309605102, "metainfo": ""}