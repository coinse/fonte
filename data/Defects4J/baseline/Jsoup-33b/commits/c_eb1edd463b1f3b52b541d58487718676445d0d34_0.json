{"sha": "eb1edd463b1f3b52b541d58487718676445d0d34", "log": "Fixed support for character class regular expressions in [attr=~regex] selector", "commit": "\n--- a/src/main/java/org/jsoup/select/Selector.java\n+++ b/src/main/java/org/jsoup/select/Selector.java\n             return byClass();\n         } else if (tq.matchesWord()) {\n             return byTag();\n-        } else if (tq.matchChomp(\"[\")) {\n+        } else if (tq.matches(\"[\")) {\n             return byAttribute();\n         } else if (tq.matchChomp(\"*\")) {\n             return allElements();\n     }\n \n     private Elements byAttribute() {\n-        String key = tq.consumeToAny(\"=\", \"!=\", \"^=\", \"$=\", \"*=\", \"~=\", \"]\"); // eq, not, start, end, contain, match, (no val)\n+        TokenQueue cq = new TokenQueue(tq.chompBalanced('[', ']')); // content queue\n+        String key = cq.consumeToAny(\"=\", \"!=\", \"^=\", \"$=\", \"*=\", \"~=\"); // eq, not, start, end, contain, match, (no val)\n         Validate.notEmpty(key);\n-\n-        if (tq.matchChomp(\"]\")) {\n+        cq.consumeWhitespace();\n+\n+        if (cq.isEmpty()) {\n             return key.startsWith(\"^\") ? root.getElementsByAttributeStarting(key.substring(1)) : root.getElementsByAttribute(key);\n         } else {\n-            if (tq.matchChomp(\"=\"))\n-                return root.getElementsByAttributeValue(key, tq.chompTo(\"]\"));\n-\n-            else if (tq.matchChomp(\"!=\"))\n-                return root.getElementsByAttributeValueNot(key, tq.chompTo(\"]\"));\n-\n-            else if (tq.matchChomp(\"^=\"))\n-                return root.getElementsByAttributeValueStarting(key, tq.chompTo(\"]\"));\n-\n-            else if (tq.matchChomp(\"$=\"))\n-                return root.getElementsByAttributeValueEnding(key, tq.chompTo(\"]\"));\n-\n-            else if (tq.matchChomp(\"*=\"))\n-                return root.getElementsByAttributeValueContaining(key, tq.chompTo(\"]\"));\n+            if (cq.matchChomp(\"=\"))\n+                return root.getElementsByAttributeValue(key, cq.remainder());\n+\n+            else if (cq.matchChomp(\"!=\"))\n+                return root.getElementsByAttributeValueNot(key, cq.remainder());\n+\n+            else if (cq.matchChomp(\"^=\"))\n+                return root.getElementsByAttributeValueStarting(key, cq.remainder());\n+\n+            else if (cq.matchChomp(\"$=\"))\n+                return root.getElementsByAttributeValueEnding(key, cq.remainder());\n+\n+            else if (cq.matchChomp(\"*=\"))\n+                return root.getElementsByAttributeValueContaining(key, cq.remainder());\n             \n-            else if (tq.matchChomp(\"~=\"))\n-                return root.getElementsByAttributeValueMatching(key, tq.chompTo(\"]\"));\n+            else if (cq.matchChomp(\"~=\"))\n+                return root.getElementsByAttributeValueMatching(key, cq.remainder());\n             \n             else\n-                throw new SelectorParseException(\"Could not parse attribute query '%s': unexpected token at '%s'\", query, tq.remainder());\n+                throw new SelectorParseException(\"Could not parse attribute query '%s': unexpected token at '%s'\", query, cq.remainder());\n         }\n     }\n \n--- a/src/test/java/org/jsoup/select/SelectorTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorTest.java\n         assertEquals(\"1\", imgs.get(0).id());\n         assertEquals(\"2\", imgs.get(1).id());\n         assertEquals(\"3\", imgs.get(2).id());\n+    }\n+\n+    @Test public void testByAttributeRegexCharacterClass() {\n+        Document doc = Jsoup.parse(\"<p><img src=foo.png id=1><img src=bar.jpg id=2><img src=qux.JPEG id=3><img src=old.gif id=4></p>\");\n+        Elements imgs = doc.select(\"img[src~=[o]]\");\n+        assertEquals(2, imgs.size());\n+        assertEquals(\"1\", imgs.get(0).id());\n+        assertEquals(\"4\", imgs.get(1).id());\n     }\n \n     @Test public void testAllElements() {", "timestamp": 1309605116, "metainfo": ""}