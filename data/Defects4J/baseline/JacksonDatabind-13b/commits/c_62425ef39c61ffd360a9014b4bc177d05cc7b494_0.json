{"sha": "62425ef39c61ffd360a9014b4bc177d05cc7b494", "log": "Pruning of \"deprecated enough\" methods from internal (non-public) interfaces", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n public abstract class SerializerProvider\n     extends DatabindContext\n {\n-    @Deprecated // since 2.3, not used by anything it seems\n-    protected final static JavaType TYPE_OBJECT = TypeFactory.defaultInstance().uncheckedSimpleType(Object.class);\n-\n     /**\n      * Setting for determining whether mappings for \"unknown classes\" should be\n      * cached for faster resolution. Usually this isn't needed, but maybe it\n      */\n \n     /**\n-     * @deprecated Since 2.3 (and to be removed from 2.4); use\n-     *   {@link #handlePrimaryContextualization} or {@link #handleSecondaryContextualization}\n-     *   instead\n-     */\n-    @Deprecated\n-    public JsonSerializer<?> handleContextualization(JsonSerializer<?> ser,\n-            BeanProperty property)\n-        throws JsonMappingException\n-    {\n-        return handleSecondaryContextualization(ser, property);\n-    }\n-    \n-    /**\n      * Method called for primary property serializers (ones\n      * directly created to serialize values of a POJO property),\n      * to handle details of resolving\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n         //   For now, won't add, since it is inferred, not explicit...\n     }\n \n-    @Deprecated // since 2.3\n-    public void addInjectable(String propName, JavaType propType,\n-            Annotations contextAnnotations, AnnotatedMember member,\n-            Object valueId)\n-    {\n-        addInjectable(new PropertyName(propName), propType, contextAnnotations, member, valueId);\n-    }\n-    \n     public void addInjectable(PropertyName propName, JavaType propType,\n             Annotations contextAnnotations, AnnotatedMember member,\n             Object valueId)\n         return _properties.values().iterator();\n     }\n \n-    /**\n-     * @since 2.3\n-     */\n     public SettableBeanProperty findProperty(PropertyName propertyName) {\n         return _properties.get(propertyName.getSimpleName());\n     }\n \n-    @Deprecated // since 2.3\n-    public SettableBeanProperty findProperty(String propertyName) {\n-        return _properties.get(propertyName);\n-    }\n-\n-    /**\n-     * @since 2.3\n-     */\n     public boolean hasProperty(PropertyName propertyName) {\n         return findProperty(propertyName) != null;\n     }\n-    \n-    @Deprecated // since 2.3\n-    public boolean hasProperty(String propertyName) {\n-        return findProperty(propertyName) != null;\n-    }\n-\n-    /**\n-     * @since 2.3\n-     */\n+\n     public SettableBeanProperty removeProperty(PropertyName name) {\n         return _properties.remove(name.getSimpleName());\n-    }\n-    \n-    @Deprecated // since 2.3\n-    public SettableBeanProperty removeProperty(String name) {\n-        return _properties.remove(name);\n     }\n \n     public SettableAnyProperty getAnySetter() {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableAnyProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableAnyProperty.java\n     /**********************************************************\n      */\n \n-    @Deprecated // since 2.3\n-    public SettableAnyProperty(BeanProperty property, AnnotatedMethod setter, JavaType type,\n-            JsonDeserializer<Object> valueDeser) {\n-        this(property, setter, type, valueDeser, null);\n-    }\n-\n     public SettableAnyProperty(BeanProperty property, AnnotatedMethod setter, JavaType type,\n             JsonDeserializer<Object> valueDeser, TypeDeserializer typeDeser)\n     {\n         this(property, setter.getAnnotated(), type, valueDeser, typeDeser);\n     }\n-    \n-    @Deprecated // since 2.3\n-    public SettableAnyProperty(BeanProperty property, Method rawSetter, JavaType type,\n-            JsonDeserializer<Object> valueDeser) {\n-        this(property, rawSetter, type, valueDeser, null);\n-    }\n-    \n+\n     public SettableAnyProperty(BeanProperty property, Method rawSetter, JavaType type,\n             JsonDeserializer<Object> valueDeser, TypeDeserializer typeDeser)\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n                 contextAnnotations, propDef.getMetadata());\n     }\n \n-    @Deprecated // since 2.2\n-    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n-            TypeDeserializer typeDeser, Annotations contextAnnotations)\n-    {\n-        this(new PropertyName(propName), type, wrapper, typeDeser, contextAnnotations,\n-                PropertyMetadata.STD_OPTIONAL);\n-    }\n-\n     @Deprecated // since 2.3\n     protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n             TypeDeserializer typeDeser, Annotations contextAnnotations,\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n         _annotationIntrospector = annotationIntrospector;\n         _forSerialization = forSerialization;\n     }\n-    \n-    @Deprecated // since 2.3\n-    public POJOPropertyBuilder(String simpleInternalName,\n-            AnnotationIntrospector annotationIntrospector, boolean forSerialization)\n-    {\n-        this(new PropertyName(simpleInternalName), annotationIntrospector, forSerialization);\n-    }\n \n     public POJOPropertyBuilder(POJOPropertyBuilder src, PropertyName newName)\n     {\n     /* Fluent factory methods\n     /**********************************************************\n      */\n-\n-    @Deprecated // since 2.3\n-    @Override\n-    public POJOPropertyBuilder withName(String newName) {\n-        return withSimpleName(newName);\n-    }\n \n     @Override\n     public POJOPropertyBuilder withName(PropertyName newName) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n \n     public Class<?>[] getViews() { return _includeInViews; }\n \n-    /**\n-     *<p>\n-     * NOTE: due to introspection, this is a <b>slow</b> method to call\n-     * and should never be called during actual serialization or filtering\n-     * of the property. Rather it is needed for traversal needed for things\n-     * like constructing JSON Schema instances.\n-     * \n-     * @since 2.1\n-     * \n-     * @deprecated since 2.2, use {@link #isRequired()} instead.\n-     */\n-    @Deprecated\n-    protected boolean isRequired(AnnotationIntrospector intr) { return _metadata.isRequired(); }\n-    \n     /*\n     /**********************************************************\n     /* PropertyWriter methods (serialization)\n     }\n \n     /**\n-     * @deprecated Since 2.3 Use overloaded variants\n-     */\n-    @Deprecated\n-    protected void _handleSelfReference(Object bean, JsonSerializer<?> ser)\n-        throws JsonMappingException {\n-        _handleSelfReference(bean, null, null, ser);\n-    }\n-    \n-    /**\n      * Method called to handle a direct self-reference through this property.\n      * Method can choose to indicate an error by throwing {@link JsonMappingException};\n      * fully handle serialization (and return true); or indicate that it should be\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n         findValueSerializer(javaType, null).acceptJsonFormatVisitor(visitor, javaType);\n     }\n \n-    @Deprecated // since 2.3; use the overloaded variant\n-    public boolean hasSerializerFor(Class<?> cls) {\n-        return hasSerializerFor(cls, null);\n-    }\n-    \n     /**\n      * Method that can be called to see if this serializer provider\n      * can find a serializer for an instance of given class.\n--- a/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n         /**********************************************************\n          */\n \n-        @Deprecated // since 2.3\n-        protected Parser(Segment firstSeg, ObjectCodec codec) {\n-            this(firstSeg, codec, false, false);\n-        }\n-\n-        /**\n-         * @since 2.3\n-         */\n         public Parser(Segment firstSeg, ObjectCodec codec,\n                 boolean hasNativeTypeIds,\n                 boolean hasNativeObjectIds)\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/introspect/TestMixinMerging.java\n+package com.fasterxml.jackson.databind.introspect;\n+\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+\n+public class TestMixinMerging extends BaseMapTest\n+{\n+    // for [Issue#515]\n+    public void testDisappearingMixins515() throws Exception\n+    {\n+        // TBI\n+    }\n+}", "timestamp": 1407969004, "metainfo": ""}