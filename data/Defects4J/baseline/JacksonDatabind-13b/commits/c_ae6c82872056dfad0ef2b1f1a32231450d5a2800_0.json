{"sha": "ae6c82872056dfad0ef2b1f1a32231450d5a2800", "log": "Start work on [JACKSON-787]; implemented for serialization", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n      * after other detection mechanisms, to filter out these specific\n      * properties from being serialized and deserialized.\n      */\n-    public String[] findPropertiesToIgnore(AnnotatedClass ac) {\n+    public String[] findPropertiesToIgnore(Annotated ac) {\n         return null;\n     }\n \n         }\n \n         @Override\n-        public String[] findPropertiesToIgnore(AnnotatedClass ac)\n+        public String[] findPropertiesToIgnore(Annotated ac)\n         {\n             String[] result = _primary.findPropertiesToIgnore(ac);\n             if (result == null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n     }\n \n     @Override\n-    public String[] findPropertiesToIgnore(AnnotatedClass ac) {\n+    public String[] findPropertiesToIgnore(Annotated ac) {\n         JsonIgnoreProperties ignore = ac.getAnnotation(JsonIgnoreProperties.class);\n         return (ignore == null) ? null : ignore.value();\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java\n     protected BeanSerializer(BeanSerializerBase src, ObjectIdWriter objectIdWriter) {\n         super(src, objectIdWriter);\n     }\n+\n+    protected BeanSerializer(BeanSerializerBase src, String[] toIgnore) {\n+        super(src, toIgnore);\n+    }\n     \n     /*\n     /**********************************************************\n     @Override\n     protected BeanSerializer withObjectIdWriter(ObjectIdWriter objectIdWriter) {\n         return new BeanSerializer(this, objectIdWriter);\n+    }\n+\n+    @Override\n+    protected BeanSerializer withIgnorals(String[] toIgnore) {\n+        return new BeanSerializer(this, toIgnore);\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanSerializer.java\n         super(src, objectIdWriter);\n         _nameTransformer = src._nameTransformer;\n     }\n+\n+    protected UnwrappingBeanSerializer(UnwrappingBeanSerializer src, String[] toIgnore) {\n+        super(src, toIgnore);\n+        _nameTransformer = src._nameTransformer;\n+    }\n     \n     /*\n     /**********************************************************\n     @Override\n     protected UnwrappingBeanSerializer withObjectIdWriter(ObjectIdWriter objectIdWriter) {\n         return new UnwrappingBeanSerializer(this, objectIdWriter);\n+    }\n+\n+    @Override\n+    protected UnwrappingBeanSerializer withIgnorals(String[] toIgnore) {\n+        return new UnwrappingBeanSerializer(this, toIgnore);\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n \n import java.io.IOException;\n import java.lang.reflect.Type;\n+import java.util.*;\n \n import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;\n import com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator;\n import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;\n+import com.fasterxml.jackson.databind.util.ArrayBuilders;\n import com.fasterxml.jackson.databind.util.NameTransformer;\n \n /**\n         _propertyFilterId = src._propertyFilterId;\n     }\n \n+    protected BeanSerializerBase(BeanSerializerBase src, String[] toIgnore)\n+    {\n+        super(src._handledType);\n+\n+        // Bit clumsy, but has to do:\n+        HashSet<String> ignoredSet = ArrayBuilders.arrayToSet(toIgnore);\n+        final BeanPropertyWriter[] propsIn = src._props;\n+        final BeanPropertyWriter[] fpropsIn = src._filteredProps;\n+        final int len = propsIn.length;\n+\n+        ArrayList<BeanPropertyWriter> propsOut = new ArrayList<BeanPropertyWriter>(len);\n+        ArrayList<BeanPropertyWriter> fpropsOut = (fpropsIn == null) ? null : new ArrayList<BeanPropertyWriter>(len);\n+\n+        for (int i = 0; i < len; ++i) {\n+            BeanPropertyWriter bpw = propsIn[i];\n+            // should be ignored?\n+            if (ignoredSet.contains(bpw.getName())) {\n+                continue;\n+            }\n+            propsOut.add(bpw);\n+            if (fpropsIn != null) {\n+                fpropsOut.add(fpropsIn[i]);\n+            }\n+        }\n+        _props = propsOut.toArray(new BeanPropertyWriter[propsOut.size()]);\n+        _filteredProps = (fpropsOut == null) ? null : fpropsOut.toArray(new BeanPropertyWriter[fpropsOut.size()]);\n+        \n+        _typeId = src._typeId;\n+        _anyGetterWriter = src._anyGetterWriter;\n+        _objectIdWriter = src._objectIdWriter;\n+        _propertyFilterId = src._propertyFilterId;\n+    }\n+    \n     /**\n      * Fluent factory used for creating a new instance with different\n      * {@link ObjectIdWriter}.\n+     * \n+     * @since 2.0\n      */\n     protected abstract BeanSerializerBase withObjectIdWriter(ObjectIdWriter objectIdWriter);\n+\n+    /**\n+     * Fluent factory used for creating a new instance with additional\n+     * set of properties to ignore (from properties this instance otherwise has)\n+     * \n+     * @since 2.0\n+     */\n+    protected abstract BeanSerializerBase withIgnorals(String[] toIgnore);\n     \n     /**\n      * Copy-constructor that is useful for sub-classes that just want to\n         throws JsonMappingException\n     {\n         ObjectIdWriter oiw = _objectIdWriter;\n+        String[] ignorals = null;\n+        final AnnotationIntrospector intr = provider.getAnnotationIntrospector();\n         \n         // First: may have an override for Object Id:\n-        if (property != null) {\n-            final AnnotationIntrospector intr = provider.getAnnotationIntrospector();\n+        if (property != null && intr != null) {\n             final AnnotatedMember accessor = property.getMember();\n+            ignorals = intr.findPropertiesToIgnore(accessor);\n             final ObjectIdInfo objectIdInfo = intr.findObjectIdInfo(accessor);\n             if (objectIdInfo != null) {\n                 /* Ugh: mostly copied from BeanSerializerBase: but can't easily\n             }\n         }\n         // either way, need to resolve serializer:\n+        BeanSerializerBase contextual = this;\n         if (oiw != null) {\n             JsonSerializer<?> ser = provider.findValueSerializer(oiw.idType, property);\n             oiw = oiw.withSerializer(ser);\n             if (oiw != _objectIdWriter) {\n-                return withObjectIdWriter(oiw);\n-            }\n-        }\n-        return this;\n+                contextual = withObjectIdWriter(oiw);\n+            }\n+        }\n+        // And possibly add more properties to ignore\n+        if (ignorals != null && ignorals.length != 0) {\n+            contextual = contextual.withIgnorals(ignorals);\n+        }\n+        return contextual;\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/util/ArrayBuilders.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/ArrayBuilders.java\n         return result;\n     }\n \n+    public static <T> ArrayList<T> arrayToList(T[] elements)\n+    {\n+        ArrayList<T> result = new ArrayList<T>();\n+        if (elements != null) {\n+            for (T elem : elements) {\n+                result.add(elem);\n+            }\n+        }\n+        return result;\n+    }\n+    \n     /**\n      * Helper method for adding specified element to a List, but also\n      * considering case where the List may not have been yet constructed\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestOverloaded.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestOverloaded.java\n import java.util.*;\n \n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.databind.*;\n \n /**\n- * Unit tests related to handling of overloaded methods;\n- * and specifically addressing problem [JACKSON-189].\n- *\n- * @since 1.5\n+ * Unit tests related to handling of overloaded methods.\n+ * and specifically addressing problems [JACKSON-189]\n+ * and [JACKSON-739]\n  */\n public class TestOverloaded\n     extends BaseMapTest\n     \tpublic void setValue(String str) { value = str; }\n     }\n \n+    // [JACKSON-739]\n+    static class Overloaded739\n+    {\n+        protected Object _value;\n+        \n+        @JsonProperty\n+        public void setValue(String str) { _value = str; }\n+\n+        // no annotation, should not be chosen:\n+        public void setValue(Object o) { throw new UnsupportedOperationException(); }\n+    }\n+    \n     /**\n      * And then a Bean that is conflicting and should not work\n      */\n     \n     /*\n     /************************************************************\n-    /* Unit tests\n+    /* Unit tests, valid\n     /************************************************************\n     */\n \n+    private final ObjectMapper MAPPER = new ObjectMapper();\n+    \n     /**\n      * Unit test related to [JACKSON-189]\n      */\n      */\n     public void testSpecialization() throws Exception\n     {\n-        ArrayListBean bean = new ObjectMapper().readValue\n+        ArrayListBean bean = MAPPER.readValue\n             (\"{\\\"list\\\":[\\\"a\\\",\\\"b\\\",\\\"c\\\"]}\", ArrayListBean.class);\n         assertNotNull(bean.list);\n         assertEquals(3, bean.list.size());\n      */\n     public void testOverride() throws Exception\n     {\n-        WasNumberBean bean = new ObjectMapper().readValue\n+        WasNumberBean bean = MAPPER.readValue\n             (\"{\\\"value\\\" : \\\"abc\\\"}\", WasNumberBean.class);\n         assertNotNull(bean);\n         assertEquals(\"abc\", bean.value);\n     }\n \n+    // for [JACKSON-739]\n+    public void testConflictResolution() throws Exception\n+    {\n+        Overloaded739 bean = MAPPER.readValue\n+                (\"{\\\"value\\\":\\\"abc\\\"}\", Overloaded739.class);\n+        assertNotNull(bean);\n+        assertEquals(\"abc\", bean._value);\n+    }\n+    \n+    /*\n+    /************************************************************\n+    /* Unit tests, failures\n+    /************************************************************\n+    */\n+    \n     /**\n      * For genuine setter conflict, an exception is to be thrown.\n      */\n     public void testSetterConflict() throws Exception\n     {\n     \ttry {    \t\t\n-    \t\tnew ObjectMapper().readValue(\"{ }\", ConflictBean.class);\n+    \tMAPPER.readValue(\"{ }\", ConflictBean.class);\n     \t} catch (Exception e) {\n-    \t\tverifyException(e, \"Conflicting setter definitions\");\n+    \t    verifyException(e, \"Conflicting setter definitions\");\n     \t}\n     }\n }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/filter/TestIgnorePropsForSerialization.java\n+package com.fasterxml.jackson.databind.filter;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+public class TestIgnorePropsForSerialization\n+    extends BaseMapTest\n+{\n+    /*\n+    /****************************************************************\n+    /* Helper classes\n+    /****************************************************************\n+     */\n+\n+    @JsonIgnoreProperties({\"b\", \"c\"})\n+    static class IgnoreSome\n+    {\n+        public int a = 3;\n+        public String b = \"x\";\n+\n+        public int getC() { return -6; }\n+        public String getD() { return \"abc\"; }\n+    }\n+\n+    @SuppressWarnings(\"serial\")\n+    @JsonIgnoreProperties({\"@class\"})\n+    static class MyMap extends HashMap<String,String> { }\n+\n+    // [JACKSON-787]: allow use of @JsonIgnoreProperties for properties\n+    static class WrapperWithPropIgnore\n+    {\n+        @JsonIgnoreProperties(\"y\")\n+        public XY value = new XY();\n+    }\n+\n+    static class XY {\n+        public int x = 1;\n+        public int y = 2;\n+    }\n+\n+    static class WrapperWithPropIgnore2\n+    {\n+        @JsonIgnoreProperties(\"z\")\n+        public XYZ value = new XYZ();\n+    }\n+\n+    @JsonIgnoreProperties({\"x\"})\n+    static class XYZ {\n+        public int x = 1;\n+        public int y = 2;\n+        public int z = 3;\n+    }\n+    \n+    /*\n+    /****************************************************************\n+    /* Unit tests\n+    /****************************************************************\n+     */\n+\n+    private final ObjectMapper MAPPER = new ObjectMapper();\n+    \n+    public void testExplicitIgnoralWithBean() throws Exception\n+    {\n+        IgnoreSome value = new IgnoreSome();\n+        Map<String,Object> result = writeAndMap(MAPPER, value);\n+        assertEquals(2, result.size());\n+        // verify that specified fields are ignored\n+        assertFalse(result.containsKey(\"b\"));\n+        assertFalse(result.containsKey(\"c\"));\n+        // and that others are not\n+        assertEquals(Integer.valueOf(value.a), result.get(\"a\"));\n+        assertEquals(value.getD(), result.get(\"d\"));\n+    }\n+\n+    public void testExplicitIgnoralWithMap() throws Exception\n+    {\n+        // test simulating need to filter out metadata like class name\n+        MyMap value = new MyMap();\n+        value.put(\"a\", \"b\");\n+        value.put(\"@class\", MyMap.class.getName());\n+        Map<String,Object> result = writeAndMap(MAPPER, value);\n+        assertEquals(1, result.size());\n+        // verify that specified field is ignored\n+        assertFalse(result.containsKey(\"@class\"));\n+        // and that others are not\n+        assertEquals(value.get(\"a\"), result.get(\"a\"));\n+    }\n+\n+    public void testIgnoreViaOnlyProps() throws Exception\n+    {\n+        assertEquals(\"{\\\"value\\\":{\\\"x\\\":1}}\",\n+                MAPPER.writeValueAsString(new WrapperWithPropIgnore()));\n+    }\n+\n+    public void testIgnoreViaPropsAndClass() throws Exception\n+    {\n+        assertEquals(\"{\\\"value\\\":{\\\"y\\\":2}}\",\n+                MAPPER.writeValueAsString(new WrapperWithPropIgnore2()));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/filter/TestSimpleSerializationIgnore.java\n+package com.fasterxml.jackson.databind.filter;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+/**\n+ * This unit test suite tests use of {@link JsonIgnore} annotations\n+ * with  bean serialization; as well as (since 1.7)\n+ * {@link JsonIgnoreType}.\n+ */\n+public class TestSimpleSerializationIgnore\n+    extends BaseMapTest\n+{\n+    /*\n+    /**********************************************************\n+    /* Annotated helper classes\n+    /**********************************************************\n+     */\n+\n+    /// Class for testing enabled {@link JsonIgnore} annotation\n+    final static class SizeClassEnabledIgnore\n+    {\n+        @JsonIgnore public int getY() { return 9; }\n+\n+        // note: must be public to be seen\n+        public int getX() { return 1; }\n+\n+        @JsonIgnore public int getY2() { return 1; }\n+        @JsonIgnore public int getY3() { return 2; }\n+    }\n+\n+    /// Class for testing disabled {@link JsonIgnore} annotation\n+    final static class SizeClassDisabledIgnore\n+    {\n+        // note: must be public to be seen\n+        public int getX() { return 3; }\n+        @JsonIgnore(false) public int getY() { return 4; }\n+    }\n+\n+    static class BaseClassIgnore\n+    {\n+        @JsonProperty(\"x\")\n+        @JsonIgnore\n+        public int x() { return 1; }\n+\n+        public int getY() { return 2; }\n+    }\n+\n+    static class SubClassNonIgnore\n+        extends BaseClassIgnore\n+    {\n+        /* Annotations to disable ignorance, in sub-class; note that\n+         * we must still get \"JsonProperty\" fro super class\n+         */\n+        @Override\n+        @JsonIgnore(false)\n+        public int x() { return 3; }\n+    }\n+\n+    @JsonIgnoreType\n+    static class IgnoredType { }\n+\n+    @JsonIgnoreType(false)\n+    static class NonIgnoredType\n+    {\n+        public int value = 13;\n+        \n+        public IgnoredType ignored = new IgnoredType();\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    public void testSimpleIgnore() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        // Should see \"x\", not \"y\"\n+        Map<String,Object> result = writeAndMap(m, new SizeClassEnabledIgnore());\n+        assertEquals(1, result.size());\n+        assertEquals(Integer.valueOf(1), result.get(\"x\"));\n+        assertNull(result.get(\"y\"));\n+    }\n+\n+    public void testDisabledIgnore() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        // Should see \"x\" and \"y\"\n+        Map<String,Object> result = writeAndMap(m, new SizeClassDisabledIgnore());\n+        assertEquals(2, result.size());\n+        assertEquals(Integer.valueOf(3), result.get(\"x\"));\n+        assertEquals(Integer.valueOf(4), result.get(\"y\"));\n+    }\n+\n+    /**\n+     * Test case to verify that ignore tag can also be disabled\n+     * via inheritance\n+     */\n+    public void testIgnoreOver() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+\n+        // should only see \"y\"\n+        Map<String,Object> result = writeAndMap(m, new BaseClassIgnore());\n+        assertEquals(1, result.size());\n+        assertEquals(Integer.valueOf(2), result.get(\"y\"));\n+\n+        // Should see \"x\" and \"y\"\n+        result = writeAndMap(m, new SubClassNonIgnore());\n+        assertEquals(2, result.size());\n+        assertEquals(Integer.valueOf(3), result.get(\"x\"));\n+        assertEquals(Integer.valueOf(2), result.get(\"y\"));\n+    }\n+\n+    /**\n+     * @since 1.7\n+     */\n+    public void testIgnoreType() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        assertEquals(\"{\\\"value\\\":13}\", m.writeValueAsString(new NonIgnoredType()));\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/failing/TestGenericSubTyping.java\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestGenericSubTyping.java\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.BaseMapTest;\n-import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.ObjectMapper;\n \n public class TestGenericSubTyping extends BaseMapTest", "timestamp": 1329799552, "metainfo": ""}