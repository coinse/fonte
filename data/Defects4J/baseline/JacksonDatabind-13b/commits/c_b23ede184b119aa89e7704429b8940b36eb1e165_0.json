{"sha": "b23ede184b119aa89e7704429b8940b36eb1e165", "log": "Start working on even more improvements to bean property introspection", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/Annotated.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/Annotated.java\n      * not exposed to developers since instances are mutable.\n      */\n     protected abstract AnnotationMap getAllAnnotations();\n+\n+    // Also: ensure we can use #equals, #hashCode\n+    \n+    @Override\n+    public abstract boolean equals(Object o);\n+\n+    @Override\n+    public abstract int hashCode();\n+\n+    @Override\n+    public abstract String toString();\n }\n-\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java\n         _addAnnotationsIfNotPresent(target, src.getDeclaredAnnotations());\n     }\n \n-   private final boolean _isAnnotationBundle(Annotation ann)\n-   {\n+   private final boolean _isAnnotationBundle(Annotation ann) {\n        return (_annotationIntrospector != null) && _annotationIntrospector.isAnnotationBundle(ann);\n    }\n    \n      */\n \n     @Override\n-    public String toString()\n-    {\n+    public String toString() {\n         return \"[AnnotedClass \"+_class.getName()+\"]\";\n     }\n+\n+    @Override\n+    public int hashCode() {\n+        return _class.getName().hashCode();\n+    }\n+    \n+    @Override\n+    public boolean equals(Object o) {\n+        if (o == this) return true;\n+        if (o == null || o.getClass() != getClass()) return false;\n+        return ((AnnotatedClass) o)._class == _class;\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java\n         return \"[constructor for \"+getName()+\", annotations: \"+_annotations+\"]\";\n     }\n \n+    @Override\n+    public int hashCode() {\n+        return _constructor.getName().hashCode();\n+    }\n+    \n+    @Override\n+    public boolean equals(Object o) {\n+        if (o == this) return true;\n+        if (o == null || o.getClass() != getClass()) return false;\n+        return ((AnnotatedConstructor) o)._constructor == _constructor;\n+    }\n+    \n     /*\n     /**********************************************************\n     /* JDK serialization handling\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedField.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedField.java\n     public String getName() { return _field.getName(); }\n \n     @Override\n-    public <A extends Annotation> A getAnnotation(Class<A> acls)\n-    {\n+    public <A extends Annotation> A getAnnotation(Class<A> acls) {\n         return (_annotations == null) ? null : _annotations.get(acls);\n     }\n \n     public int getAnnotationCount() { return _annotations.size(); }\n \n     @Override\n-    public String toString()\n-    {\n+    public int hashCode() {\n+        return _field.getName().hashCode();\n+    }\n+    \n+    @Override\n+    public boolean equals(Object o) {\n+        if (o == this) return true;\n+        if (o == null || o.getClass() != getClass()) return false;\n+        return ((AnnotatedField) o)._field == _field;\n+    }\n+\n+    @Override\n+    public String toString() {\n         return \"[field \"+getFullName()+\"]\";\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMember.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMember.java\n  * a class; fields, methods and constructors. This is a superset\n  * of things that can represent logical properties as it contains\n  * constructors in addition to fields and methods.\n- * \n- * @author tatu\n  */\n public abstract class AnnotatedMember\n     extends Annotated\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java\n      */\n \n     @Override\n-    public String toString()\n-    {\n+    public String toString() {\n         return \"[method \"+getFullName()+\"]\";\n     }\n \n+    @Override\n+    public int hashCode() {\n+        return _method.getName().hashCode();\n+    }\n+    \n+    @Override\n+    public boolean equals(Object o) {\n+        if (o == this) return true;\n+        if (o == null || o.getClass() != getClass()) return false;\n+        return ((AnnotatedMethod) o)._method == _method;\n+    }\n+    \n     /*\n     /**********************************************************\n     /* JDK serialization handling\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java\n import java.lang.reflect.AnnotatedElement;\n import java.lang.reflect.Member;\n import java.lang.reflect.Type;\n-\n \n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n      */\n     \n     @Override\n-    public String toString()\n-    {\n+    public int hashCode() {\n+        return _owner.hashCode() + _index;\n+    }\n+    \n+    @Override\n+    public boolean equals(Object o) {\n+        if (o == this) return true;\n+        if (o == null || o.getClass() != getClass()) return false;\n+        AnnotatedParameter other = (AnnotatedParameter) o;\n+        return other._owner.equals(_owner) && (other._index == _index);\n+    }\n+    \n+    @Override\n+    public String toString() {\n         return \"[parameter #\"+getIndex()+\", annotations: \"+_annotations+\"]\";\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/failing/TestCreatorWithNamingStrategy556.java\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestCreatorWithNamingStrategy556.java\n public class TestCreatorWithNamingStrategy556\n     extends BaseMapTest\n {\n-    static class CreatorBean\n+    static class RenamingCtorBean\n     {\n         protected String myName;\n         protected int myAge;\n \n         @JsonCreator\n-        public CreatorBean(int myAge, String myName)\n+        public RenamingCtorBean(int myAge, String myName)\n         {\n             this.myName = myName;\n             this.myAge = myAge;\n         }\n     }\n \n+    // Try the same with factory, too\n+    static class RenamedFactoryBean\n+    {\n+        protected String myName;\n+        protected int myAge;\n+\n+        private RenamedFactoryBean(int a, String n, boolean foo) {\n+            myAge = a;\n+            myName = n;\n+        }\n+        \n+        @JsonCreator\n+        public static RenamedFactoryBean create(int age, String name) {\n+            return new RenamedFactoryBean(age, name, true);\n+        }\n+    }\n+    \n     @SuppressWarnings(\"serial\")\n     static class MyParamIntrospector extends JacksonAnnotationIntrospector\n     {\n         MAPPER.setAnnotationIntrospector(new MyParamIntrospector());\n     }\n \n-    public void testPascalCaseWithImplicitNames() throws Exception\n+    private final static String CTOR_JSON = \"{ \\\"MyAge\\\" : 42,  \\\"MyName\\\" : \\\"NotMyRealName\\\" }\";\n+    \n+    public void testRenameViaCtor() throws Exception\n     {\n-        CreatorBean bean = MAPPER.readValue(\"{ \\\"MyAge\\\" : 42,  \\\"MyName\\\" : \\\"NotMyRealName\\\" }\", CreatorBean.class);\n+        RenamingCtorBean bean = MAPPER.readValue(CTOR_JSON, RenamingCtorBean.class);\n         assertEquals(42, bean.myAge);\n         assertEquals(\"NotMyRealName\", bean.myName);\n     }\n \n+    public void testRenameViaFactory() throws Exception\n+    {\n+        RenamedFactoryBean bean = MAPPER.readValue(CTOR_JSON, RenamedFactoryBean.class);\n+        assertEquals(42, bean.myAge);\n+        assertEquals(\"NotMyRealName\", bean.myName);\n+    }\n }", "timestamp": 1411612852, "metainfo": ""}