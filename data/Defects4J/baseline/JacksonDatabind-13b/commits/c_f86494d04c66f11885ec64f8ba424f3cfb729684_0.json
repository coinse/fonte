{"sha": "f86494d04c66f11885ec64f8ba424f3cfb729684", "log": "Unit test weeding", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestPOJOAsArray.java\n+package com.fasterxml.jackson.databind.struct;\n+\n+import com.fasterxml.jackson.annotation.JsonFormat;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+public class TestPOJOAsArray extends BaseMapTest\n+{\n+    static class Pojo\n+    {\n+        @JsonFormat(shape=JsonFormat.Shape.ARRAY)\n+        public PojoValue value;\n+\n+        public Pojo() { }\n+        public Pojo(String name, int x, int y, boolean c) {\n+            value = new PojoValue(name, x, y, c);\n+        }\n+    }\n+\n+    // note: must be serialized/deserialized alphabetically; fields NOT declared in that order\n+    @JsonPropertyOrder(alphabetic=true)\n+    static class PojoValue\n+    {\n+        public int x, y;\n+        public String name;\n+        public boolean complete;\n+\n+        public PojoValue() { }\n+        public PojoValue(String name, int x, int y, boolean c) {\n+            this.name = name;\n+            this.x = x;\n+            this.y = y;\n+            this.complete = c;\n+        }\n+    }\n+\n+    @JsonPropertyOrder(alphabetic=true)\n+    @JsonFormat(shape=JsonFormat.Shape.ARRAY)\n+    static class FlatPojo\n+    {\n+        public int x, y;\n+        public String name;\n+        public boolean complete;\n+\n+        public FlatPojo() { }\n+        public FlatPojo(String name, int x, int y, boolean c) {\n+            this.name = name;\n+            this.x = x;\n+            this.y = y;\n+            this.complete = c;\n+        }\n+    }\n+\n+    /*\n+    /*****************************************************\n+    /* Basic tests\n+    /*****************************************************\n+     */\n+\n+    private final static ObjectMapper MAPPER = new ObjectMapper();\n+    \n+    /**\n+     * Test that verifies that property annotation works\n+     */\n+    public void testReadSimplePropertyValue() throws Exception\n+    {\n+        String json = \"{\\\"value\\\":[true,\\\"Foobar\\\",42,13]}\";\n+        Pojo p = MAPPER.readValue(json, Pojo.class);\n+        assertNotNull(p.value);\n+        assertTrue(p.value.complete);\n+        assertEquals(\"Foobar\", p.value.name);\n+        assertEquals(42, p.value.x);\n+        assertEquals(13, p.value.y);\n+    }\n+\n+    /**\n+     * Test that verifies that Class annotation works\n+     */\n+    public void testReadSimpleRootValue() throws Exception\n+    {\n+        String json = \"[false,\\\"Bubba\\\",1,2]\";\n+        FlatPojo p = MAPPER.readValue(json, FlatPojo.class);\n+        assertFalse(p.complete);\n+        assertEquals(\"Bubba\", p.name);\n+        assertEquals(1, p.x);\n+        assertEquals(2, p.y);\n+    }\n+    \n+    /**\n+     * Test that verifies that property annotation works\n+     */\n+    public void testWriteSimplePropertyValue() throws Exception\n+    {\n+        String json = MAPPER.writeValueAsString(new Pojo(\"Foobar\", 42, 13, true));\n+        // will have wrapper POJO, then POJO-as-array..\n+        assertEquals(\"{\\\"value\\\":[true,\\\"Foobar\\\",42,13]}\", json);\n+    }\n+\n+    /**\n+     * Test that verifies that Class annotation works\n+     */\n+    public void testWriteSimpleRootValue() throws Exception\n+    {\n+        String json = MAPPER.writeValueAsString(new FlatPojo(\"Bubba\", 1, 2, false));\n+        // will have wrapper POJO, then POJO-as-array..\n+        assertEquals(\"[false,\\\"Bubba\\\",1,2]\", json);\n+    }    \n+\n+    /*\n+    /*****************************************************\n+    /* Round-trip tests\n+    /*****************************************************\n+     */\n+\n+}", "timestamp": 1342829491, "metainfo": ""}