{"sha": "d01f2070a73533097a852935bc53be1381741d9f", "log": "Add a unit test that tries to reproduce #692", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/TestObjectMapper.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestObjectMapper.java\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;\n+import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;\n import com.fasterxml.jackson.databind.node.*;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n \n             return super.createDeserializationContext(jp, cfg);\n         }\n     }\n-    \n+\n+    @SuppressWarnings(\"serial\")\n+    static class MyAnnotationIntrospector extends JacksonAnnotationIntrospector { }\n+\n     /*\n     /**********************************************************\n     /* Test methods\n         assertEquals(1, m.getDeserializationConfig().mixInCount());\n         assertEquals(0, m2.getDeserializationConfig().mixInCount());\n     }\n+\n+    public void testAnnotationIntrospectorCopyin() \n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        m.setAnnotationIntrospector(new MyAnnotationIntrospector());\n+        assertEquals(MyAnnotationIntrospector.class,\n+                m.getDeserializationConfig().getAnnotationIntrospector().getClass());\n+        ObjectMapper m2 = m.copy();\n+\n+        assertEquals(MyAnnotationIntrospector.class,\n+                m2.getDeserializationConfig().getAnnotationIntrospector().getClass());\n+        assertEquals(MyAnnotationIntrospector.class,\n+                m2.getSerializationConfig().getAnnotationIntrospector().getClass());\n+    }\n }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestObjectMapper.java.orig\n+package com.fasterxml.jackson.databind;\n+\n+import java.io.*;\n+\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonParser;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;\n+import com.fasterxml.jackson.databind.node.*;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n+\n+public class TestObjectMapper extends BaseMapTest\n+{\n+    static class Bean {\n+        int value = 3;\n+        \n+        public void setX(int v) { value = v; }\n+    }\n+\n+    // for [Issue#206]\n+    @SuppressWarnings(\"serial\")\n+    static class CustomMapper extends ObjectMapper {\n+        @Override\n+        protected DefaultDeserializationContext createDeserializationContext(JsonParser jp,\n+                DeserializationConfig cfg) {\n+            return super.createDeserializationContext(jp, cfg);\n+        }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+    \n+    final static ObjectMapper MAPPER = new ObjectMapper();\n+    \n+    public void testProps()\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        // should have default factory\n+        assertNotNull(m.getNodeFactory());\n+        JsonNodeFactory nf = JsonNodeFactory.instance;\n+        m.setNodeFactory(nf);\n+        assertSame(nf, m.getNodeFactory());\n+    }\n+\n+    public void testSupport()\n+    {\n+        assertTrue(MAPPER.canSerialize(String.class));\n+        assertTrue(MAPPER.canDeserialize(TypeFactory.defaultInstance().constructType(String.class)));\n+    }\n+\n+    public void testTreeRead() throws Exception\n+    {\n+        String JSON = \"{ }\";\n+        JsonNode n = MAPPER.readTree(JSON);\n+        assertTrue(n instanceof ObjectNode);\n+\n+        n = MAPPER.readTree(new StringReader(JSON));\n+        assertTrue(n instanceof ObjectNode);\n+\n+        n = MAPPER.readTree(new ByteArrayInputStream(JSON.getBytes(\"UTF-8\")));\n+        assertTrue(n instanceof ObjectNode);\n+    }\n+\n+    // Test to ensure that we can check property ordering defaults...\n+    public void testConfigForPropertySorting() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        \n+        // sort-alphabetically is disabled by default:\n+        assertFalse(m.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY));\n+        SerializationConfig sc = m.getSerializationConfig();\n+        assertFalse(sc.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY));\n+        assertFalse(sc.shouldSortPropertiesAlphabetically());\n+        DeserializationConfig dc = m.getDeserializationConfig();\n+        assertFalse(dc.shouldSortPropertiesAlphabetically());\n+\n+        // but when enabled, should be visible:\n+        m.enable(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY);\n+        sc = m.getSerializationConfig();\n+        assertTrue(sc.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY));\n+        assertTrue(sc.shouldSortPropertiesAlphabetically());\n+        dc = m.getDeserializationConfig();\n+        // and not just via SerializationConfig, but also via DeserializationConfig\n+        assertTrue(dc.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY));\n+        assertTrue(dc.shouldSortPropertiesAlphabetically());\n+    }\n+\n+\n+    public void testJsonFactoryLinkage()\n+    {\n+        // first, implicit factory, giving implicit linkage\n+        assertSame(MAPPER, MAPPER.getFactory().getCodec());\n+\n+        // and then explicit factory, which should also be implicitly linked\n+        JsonFactory f = new JsonFactory();\n+        ObjectMapper m = new ObjectMapper(f);\n+        assertSame(f, m.getFactory());\n+        assertSame(m, f.getCodec());\n+    }\n+    \n+    /**\n+     * Test for verifying working of [JACKSON-191]\n+     */\n+    public void testProviderConfig() throws Exception   \n+    {\n+        ObjectMapper m = new ObjectMapper();\n+\n+        assertEquals(0, m._deserializationContext._cache.cachedDeserializersCount());\n+        // and then should get one constructed for:\n+        Bean bean = m.readValue(\"{ \\\"x\\\" : 3 }\", Bean.class);\n+        assertNotNull(bean);\n+        assertEquals(1, m._deserializationContext._cache.cachedDeserializersCount());\n+        m._deserializationContext._cache.flushCachedDeserializers();\n+        assertEquals(0, m._deserializationContext._cache.cachedDeserializersCount());\n+    }\n+    \n+    // [Issue#28]: ObjectMapper.copy()\n+    public void testCopy() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        assertTrue(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES));\n+        m.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n+        assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES));\n+\n+        // // First: verify that handling of features is decoupled:\n+        \n+        ObjectMapper m2 = m.copy();\n+        assertFalse(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES));\n+        m2.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n+        assertTrue(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES));\n+        // but should NOT change the original\n+        assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES));\n+\n+        // nor vice versa:\n+        assertFalse(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE));\n+        assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE));\n+        m.enable(DeserializationFeature.UNWRAP_ROOT_VALUE);\n+        assertTrue(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE));\n+        assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE));\n+\n+        // // Also, underlying JsonFactory instances should be distinct\n+        \n+        assertNotSame(m.getFactory(), m2.getFactory());\n+\n+        // [Issue#122]: Need to ensure mix-ins are not shared\n+        assertEquals(0, m.getSerializationConfig().mixInCount());\n+        assertEquals(0, m2.getSerializationConfig().mixInCount());\n+        assertEquals(0, m.getDeserializationConfig().mixInCount());\n+        assertEquals(0, m2.getDeserializationConfig().mixInCount());\n+\n+        m.addMixInAnnotations(String.class, Integer.class);\n+        assertEquals(1, m.getSerializationConfig().mixInCount());\n+        assertEquals(0, m2.getSerializationConfig().mixInCount());\n+        assertEquals(1, m.getDeserializationConfig().mixInCount());\n+        assertEquals(0, m2.getDeserializationConfig().mixInCount());\n+    }\n+}", "timestamp": 1422770873, "metainfo": ""}