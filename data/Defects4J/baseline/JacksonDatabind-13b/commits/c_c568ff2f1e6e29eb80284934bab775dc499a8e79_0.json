{"sha": "c568ff2f1e6e29eb80284934bab775dc499a8e79", "log": "Add a test for #738", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/RaceCondition738Test.java\n+package com.fasterxml.jackson.failing;\n+\n+import java.util.*;\n+import java.util.concurrent.*;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+public class RaceCondition738Test extends BaseMapTest\n+{\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.WRAPPER_OBJECT)\n+    @JsonSubTypes({\n+        @JsonSubTypes.Type(value = TypeOne.class, name = \"one\"),\n+        @JsonSubTypes.Type(value = TypeTwo.class, name = \"two\"),\n+        @JsonSubTypes.Type(value = TypeThree.class, name = \"three\")\n+    })\n+    static abstract class AbstractHasSubTypes implements HasSubTypes { }\n+\n+    static class TypeOne extends AbstractHasSubTypes {\n+        private final String id;\n+        public TypeOne(String id) {\n+            this.id = id;\n+        }\n+        @JsonProperty\n+        public String getId() {\n+            return id;\n+        }\n+        @Override\n+        public String getType() {\n+            return TypeOne.class.getSimpleName();\n+        }\n+    }\n+\n+    static class TypeTwo extends AbstractHasSubTypes {\n+        private final String id;\n+        public TypeTwo(String id) {\n+            this.id = id;\n+        }\n+        @JsonProperty\n+        public String getId() {\n+            return id;\n+        }\n+        @Override\n+        public String getType() {\n+            return TypeTwo.class.getSimpleName();\n+        }\n+    }    \n+\n+    static class TypeThree extends AbstractHasSubTypes {\n+        private final String id;\n+        public TypeThree(String id) {\n+            this.id = id;\n+        }\n+        @JsonProperty\n+        public String getId() {\n+            return id;\n+        }\n+        @Override\n+        public String getType() {\n+            return TypeThree.class.getSimpleName();\n+        }\n+    }\n+\n+    public interface HasSubTypes {\n+        String getType();\n+    }\n+\n+    static class Wrapper {\n+        private final HasSubTypes hasSubTypes;\n+\n+        private Wrapper(HasSubTypes hasSubTypes) {\n+            this.hasSubTypes = hasSubTypes;\n+        }\n+\n+        @JsonProperty\n+        public HasSubTypes getHasSubTypes() {\n+            return hasSubTypes;\n+        }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+    \n+    public void testRepeatedly() throws Exception {\n+        for (int i = 0; i < 1000; i++) {\n+            runOnce();\n+        }\n+    }\n+    \n+    void runOnce() throws Exception {\n+        final ObjectMapper mapper = getObjectMapper();\n+        Callable<String> writeJson = new Callable<String>() {\n+            @Override\n+            public String call() throws Exception {\n+                Wrapper wrapper = new Wrapper(new TypeOne(\"test\"));\n+                return mapper.writeValueAsString(wrapper);\n+            }\n+        };\n+\n+        int numThreads = 4;\n+        ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n+        List<Future<String>> jsonFutures = new ArrayList<Future<String>>();\n+        for (int i = 0; i < numThreads; i++) {\n+            jsonFutures.add(executor.submit(writeJson));\n+        }\n+\n+        executor.shutdown();\n+        executor.awaitTermination(5, TimeUnit.SECONDS);\n+\n+        for (Future<String> jsonFuture : jsonFutures) {\n+            String json = jsonFuture.get();\n+            JsonNode tree = mapper.readTree(json);\n+            JsonNode wrapped = tree.get(\"hasSubTypes\");\n+\n+            if (!wrapped.has(\"one\")) {\n+                throw new IllegalStateException(\"Missing 'one', source: \"+json);\n+            }\n+        }\n+    }\n+\n+    private static ObjectMapper getObjectMapper() {\n+        SimpleModule module = new SimpleModule(\"subTypeRace\");\n+        module.setMixInAnnotation(HasSubTypes.class, AbstractHasSubTypes.class);\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(module);\n+        return mapper;\n+    }\n+}", "timestamp": 1427488314, "metainfo": ""}