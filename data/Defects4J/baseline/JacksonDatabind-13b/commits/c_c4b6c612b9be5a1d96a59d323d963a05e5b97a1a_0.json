{"sha": "c4b6c612b9be5a1d96a59d323d963a05e5b97a1a", "log": "Implemented #165: Add `DeserializationContext.getContextualType()` which can be called by contextual deserializers to know nominal type for them, without needing to decipher it from `BeanProperty`", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n      * @since 2.3\n      */\n     protected transient ContextAttributes _attributes;\n+\n+    /**\n+     * Type of {@link JsonDeserializer} (or, more specifically,\n+     *   {@link ContextualizableDeserializer}) that is being\n+     *   contextualized currently.\n+     *\n+     * @since 2.5\n+     */\n+    protected LinkedNode<JavaType> _currentType;\n     \n     /*\n     /**********************************************************\n \n     /*\n     /**********************************************************\n-    /* Generic attributes (2.3+)\n+    /* Access to per-call state, like generic attributes (2.3+)\n     /**********************************************************\n      */\n \n         _attributes = _attributes.withPerCallAttribute(key, value);\n         return this;\n     }\n-    \n-    /*\n-    /**********************************************************\n-    /* Public API, accessors\n+\n+    /**\n+     * Accessor to {@link JavaType} of currently contextualized\n+     * {@link ContextualDeserializer}, if any.\n+     * This is sometimes useful for generic {@link JsonDeserializer}s that\n+     * do not get passed (or do not retain) type information when being\n+     * constructed: happens for example for deserializers constructed\n+     * from annotations.\n+     * \n+     * @since 2.5\n+     *\n+     * @return Type of {@link ContextualDeserializer} being contextualized,\n+     *   if process is on-going; null if not.\n+     */\n+    public JavaType getContextualType() {\n+        return (_currentType == null) ? null : _currentType.value();\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Public API, config setting accessors\n     /**********************************************************\n      */\n \n     {\n         JsonDeserializer<Object> deser = _cache.findValueDeserializer(this, _factory, type);\n         if (deser != null) {\n-            deser = (JsonDeserializer<Object>) handleSecondaryContextualization(deser, prop);\n+            deser = (JsonDeserializer<Object>) handleSecondaryContextualization(deser, prop, type);\n         }\n         return deser;\n     }\n      * {@link #findRootValueDeserializer(JavaType)}.\n      * This method is usually called from within {@link ResolvableDeserializer#resolve},\n      * and expectation is that caller then calls either\n-     * {@link #handlePrimaryContextualization(JsonDeserializer, BeanProperty)} or\n-     * {@link #handleSecondaryContextualization(JsonDeserializer, BeanProperty)} at a\n+     * {@link #handlePrimaryContextualization(JsonDeserializer, BeanProperty, JavaType)} or\n+     * {@link #handleSecondaryContextualization(JsonDeserializer, BeanProperty, JavaType)} at a\n      * later point, as necessary.\n      *\n      * @since 2.5\n         if (deser == null) { // can this occur?\n             return null;\n         }\n-        deser = (JsonDeserializer<Object>) handleSecondaryContextualization(deser, null);\n+        deser = (JsonDeserializer<Object>) handleSecondaryContextualization(deser, null, type);\n         TypeDeserializer typeDeser = _factory.findTypeDeserializer(_config, type);\n         if (typeDeser != null) {\n             // important: contextualize to indicate this is for root value\n      * \n      * @param prop Property for which the given primary deserializer is used; never null.\n      * \n-     * @since 2.3\n-     */\n+     * @since 2.5\n+     */\n+    public JsonDeserializer<?> handlePrimaryContextualization(JsonDeserializer<?> deser,\n+            BeanProperty prop, JavaType type)\n+        throws JsonMappingException\n+    {\n+        if (deser instanceof ContextualDeserializer) {\n+            _currentType = new LinkedNode<JavaType>(type, _currentType);\n+            try {\n+                deser = ((ContextualDeserializer) deser).createContextual(this, prop);\n+            } finally {\n+                _currentType = _currentType.next();\n+            }\n+        }\n+        return deser;\n+    }\n+\n+    @Deprecated // since 2.5; remove from 2.6\n     public JsonDeserializer<?> handlePrimaryContextualization(JsonDeserializer<?> deser,\n             BeanProperty prop)\n         throws JsonMappingException\n     {\n-        if (deser instanceof ContextualDeserializer) {\n-            deser = ((ContextualDeserializer) deser).createContextual(this, prop);\n-        }\n-        return deser;\n-    }\n-\n+        return handlePrimaryContextualization(deser, prop, TypeFactory.unknownType());\n+    }\n+    \n     /**\n      * Method called for secondary property deserializers (ones\n      * NOT directly created to deal with an annotatable POJO property,\n      * @param prop Property for which deserializer is used, if any; null\n      *    when deserializing root values\n      * \n-     * @since 2.3\n-     */\n+     * @since 2.5\n+     */\n+    public JsonDeserializer<?> handleSecondaryContextualization(JsonDeserializer<?> deser,\n+            BeanProperty prop, JavaType type)\n+        throws JsonMappingException\n+    {\n+        if (deser instanceof ContextualDeserializer) {\n+            _currentType = new LinkedNode<JavaType>(type, _currentType);\n+            try {\n+                deser = ((ContextualDeserializer) deser).createContextual(this, prop);\n+            } finally {\n+                _currentType = _currentType.next();\n+            }\n+        }\n+        return deser;\n+    }\n+\n+    @Deprecated // since 2.5; remove from 2.6\n     public JsonDeserializer<?> handleSecondaryContextualization(JsonDeserializer<?> deser,\n             BeanProperty prop)\n         throws JsonMappingException\n         }\n         return deser;\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Parsing methods that may use reusable/-cyclable objects\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n                 metadata);\n         if (deser != null) {\n             // As per [Issue#462] need to ensure we contextualize deserializer before passing it on\n-            deser = ctxt.handlePrimaryContextualization(deser, prop);\n+            deser = ctxt.handlePrimaryContextualization(deser, prop, type);\n             prop = prop.withValueDeserializer(deser);\n         }\n         return prop;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n                 /* Important! This is the only place where actually handle \"primary\"\n                  * property deserializers -- call is different from other places.\n                  */\n-                JsonDeserializer<?> cd = ctxt.handlePrimaryContextualization(deser, prop);\n+                JsonDeserializer<?> cd = ctxt.handlePrimaryContextualization(deser, prop,\n+                        prop.getType());\n                 if (cd != deser) {\n                     prop = prop.withValueDeserializer(cd);\n                 }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n         JsonDeserializer<?> valueDeser = _valueDeserializer;\n         // #125: May have a content converter\n         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n+        final JavaType vt = _collectionType.getContentType();\n         if (valueDeser == null) {\n-            valueDeser = ctxt.findContextualValueDeserializer(\n-                    _collectionType.getContentType(), property);\n+            valueDeser = ctxt.findContextualValueDeserializer(vt, property);\n         } else { // if directly assigned, probably not yet contextual, so:\n-            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property);\n+            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);\n         }\n         // and finally, type deserializer needs context as well\n         TypeDeserializer valueTypeDeser = _valueTypeDeserializer;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java\n             BeanProperty property)\n         throws JsonMappingException\n     {\n-        JsonDeserializer<?> del = ctxt.handleSecondaryContextualization(_delegatee, property);\n+        JavaType vt = ctxt.constructType(_delegatee.handledType());\n+        JsonDeserializer<?> del = ctxt.handleSecondaryContextualization(_delegatee,\n+                property, vt);\n         if (del == _delegatee) {\n             return this;\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java\n             kd = ctxt.findKeyDeserializer(_mapType.getKeyType(), property);\n         }\n         JsonDeserializer<?> vd = _valueDeserializer;\n+        final JavaType vt = _mapType.getContentType();\n         if (vd == null) {\n-            vd = ctxt.findContextualValueDeserializer(_mapType.getContentType(), property);\n+            vd = ctxt.findContextualValueDeserializer(vt, property);\n         } else { // if directly assigned, probably not yet contextual, so:\n-            vd = ctxt.handleSecondaryContextualization(vd, property);\n+            vd = ctxt.handleSecondaryContextualization(vd, property, vt);\n         }\n         TypeDeserializer vtd = _valueTypeDeserializer;\n         if (vtd != null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java\n         if (deser == null) {\n             deser = ctxt.findContextualValueDeserializer(_enumType, property);\n         } else { // if directly assigned, probably not yet contextual, so:\n-            deser = ctxt.handleSecondaryContextualization(deser, property);\n+            deser = ctxt.handleSecondaryContextualization(deser, property, _enumType);\n         }\n         return withDeserializer(deser);\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n         JsonDeserializer<?> vd = _valueDeserializer;\n         // #125: May have a content converter\n         vd = findConvertingContentDeserializer(ctxt, property, vd);\n+        final JavaType vt = _mapType.getContentType();\n         if (vd == null) {\n-            vd = ctxt.findContextualValueDeserializer(_mapType.getContentType(), property);\n+            vd = ctxt.findContextualValueDeserializer(vt, property);\n         } else { // if directly assigned, probably not yet contextual, so:\n-            vd = ctxt.handleSecondaryContextualization(vd, property);\n+            vd = ctxt.handleSecondaryContextualization(vd, property, vt);\n         }\n         TypeDeserializer vtd = _valueTypeDeserializer;\n         if (vtd != null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapEntryDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapEntryDeserializer.java\n         }\n         JsonDeserializer<?> vd = _valueDeserializer;\n         vd = findConvertingContentDeserializer(ctxt, property, vd);\n+        JavaType contentType = _type.containedType(1);\n         if (vd == null) {\n-            vd = ctxt.findContextualValueDeserializer(_type.containedType(1), property);\n+            vd = ctxt.findContextualValueDeserializer(contentType, property);\n         } else { // if directly assigned, probably not yet contextual, so:\n-            vd = ctxt.handleSecondaryContextualization(vd, property);\n+            vd = ctxt.handleSecondaryContextualization(vd, property, contentType);\n         }\n         TypeDeserializer vtd = _valueTypeDeserializer;\n         if (vtd != null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java\n         JsonDeserializer<?> deser = _elementDeserializer;\n         // #125: May have a content converter\n         deser = findConvertingContentDeserializer(ctxt, property, deser);\n+        final JavaType vt = _arrayType.getContentType();\n         if (deser == null) {\n-            deser = ctxt.findContextualValueDeserializer(_arrayType.getContentType(), property);\n+            deser = ctxt.findContextualValueDeserializer(vt, property);\n         } else { // if directly assigned, probably not yet contextual, so:\n-            deser = ctxt.handleSecondaryContextualization(deser, property);\n+            deser = ctxt.handleSecondaryContextualization(deser, property, vt);\n         }\n         TypeDeserializer elemTypeDeser = _elementTypeDeserializer;\n         if (elemTypeDeser != null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java\n     {\n         // First: if already got serializer to delegate to, contextualize it:\n         if (_delegateDeserializer != null) {\n-            JsonDeserializer<?> deser = ctxt.handleSecondaryContextualization(_delegateDeserializer, property);\n+            JsonDeserializer<?> deser = ctxt.handleSecondaryContextualization(_delegateDeserializer,\n+                    property, _delegateType);\n             if (deser != _delegateDeserializer) {\n                 return withDelegate(_converter, _delegateType, deser);\n             }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java\n         JsonDeserializer<?> deser = _elementDeserializer;\n         // #125: May have a content converter\n         deser = findConvertingContentDeserializer(ctxt, property, deser);\n+        JavaType type = ctxt.constructType(String.class);\n         if (deser == null) {\n-            deser = ctxt.findContextualValueDeserializer(ctxt.constructType(String.class), property);\n+            deser = ctxt.findContextualValueDeserializer(type, property);\n         } else { // if directly assigned, probably not yet contextual, so:\n-            deser = ctxt.handleSecondaryContextualization(deser, property);\n+            deser = ctxt.handleSecondaryContextualization(deser, property, type);\n         }\n         // Ok ok: if all we got is the default String deserializer, can just forget about it\n         if (deser != null && this.isDefaultDeserializer(deser)) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n             }\n         }\n         JsonDeserializer<?> valueDeser = _valueDeserializer;\n+        final JavaType valueType = _collectionType.getContentType();\n         if (valueDeser == null) {\n             // #125: May have a content converter\n             valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n             if (valueDeser == null) {\n             // And we may also need to get deserializer for String\n-                valueDeser = ctxt.findContextualValueDeserializer( _collectionType.getContentType(), property);\n+                valueDeser = ctxt.findContextualValueDeserializer(valueType, property);\n             }\n         } else { // if directly assigned, probably not yet contextual, so:\n-            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property);\n+            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);\n         } \n         if (isDefaultDeserializer(valueDeser)) {\n             valueDeser = null;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java\n \n         // and then do bogus contextualization, in case custom ones need to resolve dependencies of\n         // their own\n-        _mapDeserializer = (JsonDeserializer<Object>) ctxt.handleSecondaryContextualization(_mapDeserializer, null);\n-        _listDeserializer = (JsonDeserializer<Object>) ctxt.handleSecondaryContextualization(_listDeserializer, null);\n-        _stringDeserializer = (JsonDeserializer<Object>) ctxt.handleSecondaryContextualization(_stringDeserializer, null);\n-        _numberDeserializer = (JsonDeserializer<Object>) ctxt.handleSecondaryContextualization(_numberDeserializer, null);\n+        JavaType unknown = TypeFactory.unknownType();\n+        _mapDeserializer = (JsonDeserializer<Object>) ctxt.handleSecondaryContextualization(_mapDeserializer, null, unknown);\n+        _listDeserializer = (JsonDeserializer<Object>) ctxt.handleSecondaryContextualization(_listDeserializer, null, unknown);\n+        _stringDeserializer = (JsonDeserializer<Object>) ctxt.handleSecondaryContextualization(_stringDeserializer, null, unknown);\n+        _numberDeserializer = (JsonDeserializer<Object>) ctxt.handleSecondaryContextualization(_numberDeserializer, null, unknown);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n--- a/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualDeserialization.java\n import java.util.*;\n \n import com.fasterxml.jackson.annotation.*;\n-\n import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.core.Version;\n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import com.fasterxml.jackson.databind.deser.ContextualDeserializer;\n+import com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n \n /**\n  * that can use contextual information (like field/method\n  * annotations) for configuration.\n  */\n+@SuppressWarnings(\"serial\")\n public class TestContextualDeserialization extends BaseMapTest\n {\n-    /*\n-    /**********************************************************\n-    /* Helper classes\n-    /**********************************************************\n-     */\n-\n-    /* NOTE: important; MUST be considered a 'Jackson' annotation to be seen\n-     * (or recognized otherwise via AnnotationIntrospect.isHandled())\n-     */\n     @Target({ElementType.FIELD, ElementType.PARAMETER, ElementType.TYPE})\n     @Retention(RetentionPolicy.RUNTIME)\n     @JacksonAnnotation\n             String propertyName = (ann == null) ?  \"UNKNOWN\" : ann.value();\n             return new MyContextualDeserializer(propertyName);\n         }\n+    }\n+\n+    static class GenericStringDeserializer\n+        extends StdScalarDeserializer<Object>\n+        implements ContextualDeserializer\n+    {\n+        final String _value;\n+\n+        public GenericStringDeserializer() { this(\"N/A\"); }\n+        protected GenericStringDeserializer(String value) {\n+            super(String.class);\n+            _value = value;\n+        }\n+\n+        @Override\n+        public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) {\n+            return new GenericStringDeserializer(String.valueOf(ctxt.getContextualType().getRawClass().getSimpleName()));\n+        }\n+\n+        @Override\n+        public Object deserialize(JsonParser p, DeserializationContext ctxt) {\n+            return _value;\n+        }\n+    }\n+\n+    static class GenericBean {\n+        @JsonDeserialize(contentUsing=GenericStringDeserializer.class)\n+        public Map<Integer, String> stuff;\n     }\n     \n     /*\n         assertEquals(\"1\", entry.getKey());\n         assertEquals(\"map=2\", entry.getValue().value);\n     }\n-    \n+\n+    // for [databind#165]\n+    public void testContextualType() throws Exception {\n+        GenericBean bean = new ObjectMapper().readValue(aposToQuotes(\"{'stuff':{'1':'b'}}\"),\n+                GenericBean.class);\n+        assertNotNull(bean.stuff);\n+        assertEquals(1, bean.stuff.size());\n+        assertEquals(\"String\", bean.stuff.get(Integer.valueOf(1)));\n+    }\n+\n     /*\n     /**********************************************************\n     /* Helper methods", "timestamp": 1419660474, "metainfo": ""}