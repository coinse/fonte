{"sha": "886ca96f608a1a3e9a72b1cb2d86a2b45c5eae40", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/BeanDescription.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/BeanDescription.java\n     /**********************************************************\n      */\n     \n-    public abstract AnnotatedMethod findAnyGetter();\n+    public abstract AnnotatedMember findAnyGetter();\n \n     /**\n      * Method used to locate the method of introspected class that\n--- a/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java\n             _member = member;\n             _contextAnnotations = contextAnnotations;\n         }\n-\n+        \n         public Std withType(JavaType type) {\n             return new Std(_name, type, _contextAnnotations, _member);\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n     \n     protected AnnotatedMethod _jsonValueMethod;\n \n-    protected AnnotatedMethod _anyGetterMethod;\n+    protected AnnotatedMember _anyGetter;\n     \n     /*\n     /**********************************************************\n         BasicBeanDescription desc = new BasicBeanDescription(coll.getConfig(),\n                 coll.getType(), coll.getClassDef(), coll.getProperties());\n         desc._jsonValueMethod = coll.getJsonValueMethod();\n-        desc._anyGetterMethod = coll.getAnyGetterMethod();\n+        desc._anyGetter = coll.getAnyGetter();\n         return desc;\n     }\n \n      * If more than one are found, an exception is thrown.\n      */\n     @Override\n-    public AnnotatedMethod findAnyGetter() throws IllegalArgumentException\n-    {\n-        if (_anyGetterMethod != null) {\n+    public AnnotatedMember findAnyGetter() throws IllegalArgumentException\n+    {\n+        if (_anyGetter != null) {\n             /* For now let's require a Map; in future can add support for other\n              * types like perhaps Iterable<Map.Entry>?\n              */\n-            Class<?> type = _anyGetterMethod.getRawReturnType();\n+            Class<?> type = _anyGetter.getRawType();\n             if (!Map.class.isAssignableFrom(type)) {\n-                throw new IllegalArgumentException(\"Invalid 'any-getter' annotation on method \"+_anyGetterMethod.getName()+\"(): return type is not instance of java.util.Map\");\n-            }\n-        }\n-        return _anyGetterMethod;\n+                throw new IllegalArgumentException(\"Invalid 'any-getter' annotation on method \"+_anyGetter.getName()+\"(): return type is not instance of java.util.Map\");\n+            }\n+        }\n+        return _anyGetter;\n     }\n     \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n \n     protected LinkedList<POJOPropertyBuilder> _creatorProperties = null;\n     \n-    protected LinkedList<AnnotatedMethod> _anyGetters = null;\n+    protected LinkedList<AnnotatedMember> _anyGetters = null;\n \n     protected LinkedList<AnnotatedMethod> _anySetters = null;\n \n         return null;\n     }\n \n-    public AnnotatedMethod getAnyGetterMethod()\n+    public AnnotatedMember getAnyGetter()\n     {\n         if (_anyGetters != null) {\n             if (_anyGetters.size() > 1) {\n                 if (ai != null) {\n                     if (ai.hasAnyGetterAnnotation(m)) {\n                         if (_anyGetters == null) {\n-                            _anyGetters = new LinkedList<AnnotatedMethod>();\n+                            _anyGetters = new LinkedList<AnnotatedMember>();\n                         }\n                         _anyGetters.add(m);\n                         continue;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/AnyGetterWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/AnyGetterWriter.java\n package com.fasterxml.jackson.databind.ser;\n \n-import java.lang.reflect.Method;\n import java.util.Map;\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.ser.std.MapSerializer;\n \n /**\n  */\n public class AnyGetterWriter\n {\n-    protected final Method _anyGetter;\n+    protected final BeanProperty _property;\n+\n+    /**\n+     * Method (or field) that represents the \"any getter\"\n+     */\n+    protected final AnnotatedMember _accessor;\n     \n-    protected final MapSerializer _serializer;\n+    protected MapSerializer _serializer;\n     \n-    public AnyGetterWriter(AnnotatedMethod anyGetter, MapSerializer serializer)\n+    public AnyGetterWriter(BeanProperty property,\n+            AnnotatedMember accessor, MapSerializer serializer)\n     {\n-        _anyGetter = anyGetter.getAnnotated();\n+        _accessor = accessor;\n+        _property = property;\n         _serializer = serializer;\n     }\n \n     public void getAndSerialize(Object bean, JsonGenerator jgen, SerializerProvider provider)\n         throws Exception\n     {\n-        Object value = _anyGetter.invoke(bean);\n+        Object value = _accessor.getValue(bean);\n         if (value == null) {\n             return;\n         }\n         if (!(value instanceof Map<?,?>)) {\n-            throw new JsonMappingException(\"Value returned by 'any-getter' (\"+_anyGetter.getName()+\"()) not java.util.Map but \"\n-                    +value.getClass().getName());\n+            throw new JsonMappingException(\"Value returned by 'any-getter' (\"\n+                    +_accessor.getName()+\"()) not java.util.Map but \"+value.getClass().getName());\n         }\n         _serializer.serializeFields((Map<?,?>) value, jgen, provider);\n     }\n \n+    // Note: NOT part of ResolvableSerializer...\n     public void resolve(SerializerProvider provider) throws JsonMappingException\n     {\n-        _serializer.resolve(provider);\n+        _serializer = (MapSerializer) _serializer.createContextual(provider, _property);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n                     elementTypeSerializer, elementValueSerializer);\n         }\n         return MapSerializer.construct(config.getAnnotationIntrospector().findPropertiesToIgnore(beanDesc.getClassInfo()),\n-                type, staticTyping, elementTypeSerializer, property,\n+                type, staticTyping, elementTypeSerializer,\n                 keySerializer, elementValueSerializer);\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n         builder.setProperties(props);\n         builder.setFilterId(findFilterId(config, beanDesc));\n         \n-        AnnotatedMethod anyGetter = beanDesc.findAnyGetter();\n+        AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n         if (anyGetter != null) { // since 1.6\n             if (config.canOverrideAccessModifiers()) {\n                 anyGetter.fixAccess();\n             TypeSerializer typeSer = createTypeSerializer(config, valueType, property);\n             // last 2 nulls; don't know key, value serializers (yet)\n             MapSerializer mapSer = MapSerializer.construct(/* ignored props*/ null, type, staticTyping,\n-                    typeSer, property, null, null);\n-            builder.setAnyGetter(new AnyGetterWriter(anyGetter, mapSer));\n+                    typeSer, null, null);\n+            BeanProperty.Std anyProp = new BeanProperty.Std(anyGetter.getName(), valueType,\n+                    beanDesc.getClassAnnotations(), anyGetter);\n+            builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n         }\n         // One more thing: need to gather view information, if any:\n         processViews(config, builder);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/CollectionSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/CollectionSerializer.java\n             JsonSerializer<?> elementSerializer) {\n         return new CollectionSerializer(this, property, elementSerializer);\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Accessors\n+    /**********************************************************\n+     */\n     \n     @Override\n     public boolean isEmpty(Collection<?> value) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n-import com.fasterxml.jackson.databind.ser.ResolvableSerializer;\n+import com.fasterxml.jackson.databind.ser.ContextualSerializer;\n import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n \n @JacksonStdImpl\n public class MapSerializer\n     extends ContainerSerializer<Map<?,?>>\n-    implements ResolvableSerializer\n+    implements ContextualSerializer\n {\n     protected final static JavaType UNSPECIFIED_TYPE = TypeFactory.unknownType();\n     \n      */\n     protected PropertySerializerMap _dynamicValueSerializers;\n     \n-    protected MapSerializer() {\n-        this((HashSet<String>)null, null, null, false, null, null, null, null);\n-    }\n-    \n+    /*\n+    /**********************************************************\n+    /* Life-cycle\n+    /**********************************************************\n+     */\n+    \n+    @SuppressWarnings(\"unchecked\")\n     protected MapSerializer(HashSet<String> ignoredEntries,\n             JavaType keyType, JavaType valueType, boolean valueTypeIsStatic,\n             TypeSerializer vts,\n-            JsonSerializer<Object> keySerializer, JsonSerializer<Object> valueSerializer, \n-            BeanProperty property)\n+            JsonSerializer<?> keySerializer, JsonSerializer<?> valueSerializer)\n     {\n         super(Map.class, false);\n-        _property = property;\n         _ignoredEntries = ignoredEntries;\n         _keyType = keyType;\n         _valueType = valueType;\n         _valueTypeIsStatic = valueTypeIsStatic;\n         _valueTypeSerializer = vts;\n-        _keySerializer = keySerializer;\n-        _valueSerializer = valueSerializer;\n+        _keySerializer = (JsonSerializer<Object>) keySerializer;\n+        _valueSerializer = (JsonSerializer<Object>) valueSerializer;\n         _dynamicValueSerializers = PropertySerializerMap.emptyMap();\n-    }\n-    \n-    @Override\n-    public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts)\n-    {\n-        MapSerializer ms = new MapSerializer(_ignoredEntries, _keyType, _valueType, _valueTypeIsStatic, vts,\n-                _keySerializer, _valueSerializer, _property);\n-        if (_valueSerializer != null) {\n-            ms._valueSerializer = _valueSerializer;\n-        }\n-        return ms;\n+        _property = null;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected MapSerializer(MapSerializer src, BeanProperty property,\n+            JsonSerializer<?> keySerializer, JsonSerializer<?> valueSerializer)\n+    {\n+        super(Map.class, false);\n+        _ignoredEntries = src._ignoredEntries;\n+        _keyType = src._keyType;\n+        _valueType = src._valueType;\n+        _valueTypeIsStatic = src._valueTypeIsStatic;\n+        _valueTypeSerializer = src._valueTypeSerializer;\n+        _keySerializer = (JsonSerializer<Object>) keySerializer;\n+        _valueSerializer = (JsonSerializer<Object>) valueSerializer;\n+        _dynamicValueSerializers = src._dynamicValueSerializers;\n+        _property = property;\n+    }\n+\n+    protected MapSerializer(MapSerializer src, TypeSerializer vts)\n+    {\n+        super(Map.class, false);\n+        _ignoredEntries = src._ignoredEntries;\n+        _keyType = src._keyType;\n+        _valueType = src._valueType;\n+        _valueTypeIsStatic = src._valueTypeIsStatic;\n+        _valueTypeSerializer = vts;\n+        _keySerializer = src._keySerializer;\n+        _valueSerializer = src._valueSerializer;\n+        _dynamicValueSerializers = src._dynamicValueSerializers;\n+        _property = src._property;\n+    }\n+    \n+    @Override\n+    public MapSerializer _withValueTypeSerializer(TypeSerializer vts)\n+    {\n+        return new MapSerializer(this, vts);\n+    }\n+\n+    public MapSerializer withResolved(BeanProperty property,\n+            JsonSerializer<?> keySerializer, JsonSerializer<?> valueSerializer)\n+    {\n+        return new MapSerializer(this, property, keySerializer, valueSerializer);\n     }\n     \n     public static MapSerializer construct(String[] ignoredList, JavaType mapType,\n-            boolean staticValueType, TypeSerializer vts, BeanProperty property,\n+            boolean staticValueType, TypeSerializer vts,\n             JsonSerializer<Object> keySerializer, JsonSerializer<Object> valueSerializer)\n     {\n         HashSet<String> ignoredEntries = toSet(ignoredList);\n             staticValueType = (valueType != null && valueType.isFinal());\n         }\n         return new MapSerializer(ignoredEntries, keyType, valueType, staticValueType, vts,\n-                keySerializer, valueSerializer, property);\n+                keySerializer, valueSerializer);\n     }\n \n     private static HashSet<String> toSet(String[] ignoredEntries) {\n     \n     /*\n     /**********************************************************\n-    /* JsonSerializer implementation\n+    /* Post-processing (contextualization)\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public JsonSerializer<?> createContextual(SerializerProvider provider,\n+            BeanProperty property)\n+        throws JsonMappingException\n+    {\n+        JsonSerializer<?> ser = _valueSerializer;\n+        if (ser == null) {\n+            if (_valueTypeIsStatic) {\n+                ser = provider.findValueSerializer(_valueType, _property);\n+            }\n+        } else if (ser instanceof ContextualSerializer) {\n+            ser = ((ContextualSerializer) ser).createContextual(provider, property);\n+        }\n+        /* 10-Dec-2010, tatu: Let's also fetch key serializer; and always assume we'll\n+         *   do that just by using static type information\n+         */\n+        /* 25-Feb-2011, tatu: May need to reconsider this static checking (since it\n+         *   differs from value handling)... but for now, it's ok to ensure contextual\n+         *   aspects are handled; this is done by provider.\n+         */\n+        JsonSerializer<?> keySer = _keySerializer;\n+        if (keySer == null) {\n+            keySer = provider.findKeySerializer(_keyType, _property);\n+        } else if (keySer instanceof ContextualSerializer) {\n+            keySer = ((ContextualSerializer) keySer).createContextual(provider, property);\n+        }\n+        return withResolved(property, keySer, ser);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Accessors\n     /**********************************************************\n      */\n \n     public boolean isEmpty(Map<?,?> value) {\n         return (value == null) || value.isEmpty();\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* JsonSerializer implementation\n+    /**********************************************************\n+     */\n     \n     @Override\n     public void serialize(Map<?,?> value, JsonGenerator jgen, SerializerProvider provider)\n         return o;\n     }\n \n-    /**\n-     * Need to get callback to resolve value serializer, if static typing\n-     * is used (either being forced, or because value type is final)\n-     */\n-    @Override\n-    public void resolve(SerializerProvider provider)\n-        throws JsonMappingException\n-    {\n-        if (_valueTypeIsStatic && _valueSerializer == null) {\n-            _valueSerializer = provider.findValueSerializer(_valueType, _property);\n-        }\n-        /* 10-Dec-2010, tatu: Let's also fetch key serializer; and always assume we'll\n-         *   do that just by using static type information\n-         */\n-        /* 25-Feb-2011, tatu: May need to reconsider this static checking (since it\n-         *   differs from value handling)... but for now, it's ok to ensure contextual\n-         *   aspects are handled; this is done by provider.\n-         */\n-        if (_keySerializer == null) {\n-            _keySerializer = provider.findKeySerializer(_keyType, _property);\n-        }\n-    }\n-\n     /*\n     /**********************************************************\n     /* Internal methods", "timestamp": 1328071356, "metainfo": ""}