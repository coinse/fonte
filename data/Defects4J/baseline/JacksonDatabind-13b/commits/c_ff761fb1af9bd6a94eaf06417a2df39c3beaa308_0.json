{"sha": "ff761fb1af9bd6a94eaf06417a2df39c3beaa308", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n      * Method for constructing a new reader instance that is configured\n      * with specified feature enabled.\n      */\n-    public final ObjectReader with(DeserializationFeature feature) {\n+    public ObjectReader with(DeserializationFeature feature) {\n         return _with(_config.with(feature));\n-    }    \n+    }\n \n     /**\n      * Method for constructing a new reader instance that is configured\n      * with specified features enabled.\n      */\n-    public final ObjectReader with(DeserializationFeature first,\n+    public ObjectReader with(DeserializationFeature first,\n             DeserializationFeature... other)\n     {\n         return _with(_config.with(first, other));\n      * Method for constructing a new reader instance that is configured\n      * with specified features enabled.\n      */\n-    public final ObjectReader withFeatures(DeserializationFeature... features) {\n+    public ObjectReader withFeatures(DeserializationFeature... features) {\n         return _with(_config.withFeatures(features));\n     }    \n-    \n+\n     /**\n      * Method for constructing a new reader instance that is configured\n      * with specified feature disabled.\n      */\n-    public final ObjectReader without(DeserializationFeature feature) {\n+    public ObjectReader without(DeserializationFeature feature) {\n         return _with(_config.without(feature)); \n-    }    \n+    }\n \n     /**\n      * Method for constructing a new reader instance that is configured\n      * with specified features disabled.\n      */\n-    public final ObjectReader without(DeserializationFeature first,\n+    public ObjectReader without(DeserializationFeature first,\n             DeserializationFeature... other) {\n         return _with(_config.without(first, other));\n     }    \n      * Method for constructing a new reader instance that is configured\n      * with specified features disabled.\n      */\n-    public final ObjectReader withoutFeatures(DeserializationFeature... features) {\n+    public ObjectReader withoutFeatures(DeserializationFeature... features) {\n         return _with(_config.withoutFeatures(features));\n     }    \n     \n      * Note that the method does NOT change state of this reader, but\n      * rather construct and returns a newly configured instance.\n      */\n-    public final ObjectReader with(JsonNodeFactory f) {\n+    public ObjectReader with(JsonNodeFactory f) {\n         return _with(_config.with(f));\n     }\n \n      * Note that the method does NOT change state of this reader, but\n      * rather construct and returns a newly configured instance.\n      */\n-    public final ObjectReader withRootName(String rootName) {\n+    public ObjectReader withRootName(String rootName) {\n         return _with(_config.withRootName(rootName));\n     }\n \n      * Note that the method does NOT change state of this reader, but\n      * rather construct and returns a newly configured instance.\n      */\n-    public final ObjectReader withType(JavaType valueType)\n+    public ObjectReader withType(JavaType valueType)\n     {\n         if (valueType != null && valueType.equals(_valueType)) {\n             return this;\n      * Note that the method does NOT change state of this reader, but\n      * rather construct and returns a newly configured instance.\n      */\n-    public final ObjectReader withType(Class<?> valueType) {\n+    public ObjectReader withType(Class<?> valueType) {\n         return withType(_config.constructType(valueType));\n     }    \n \n      * Note that the method does NOT change state of this reader, but\n      * rather construct and returns a newly configured instance.\n      */\n-    public final ObjectReader withType(java.lang.reflect.Type valueType) {\n+    public ObjectReader withType(java.lang.reflect.Type valueType) {\n         return withType(_config.getTypeFactory().constructType(valueType));\n     }    \n \n      * Note that the method does NOT change state of this reader, but\n      * rather construct and returns a newly configured instance.\n      */\n-    public final ObjectReader withType(TypeReference<?> valueTypeRef) {\n+    public ObjectReader withType(TypeReference<?> valueTypeRef) {\n         return withType(_config.getTypeFactory().constructType(valueTypeRef.getType()));\n     }    \n \n      * Note that the method does NOT change state of this reader, but\n      * rather construct and returns a newly configured instance.\n      */\n-    public final ObjectReader withView(Class<?> activeView) {\n+    public ObjectReader withView(Class<?> activeView) {\n         return _with(_config.withView(activeView));\n     }\n \n-    public final ObjectReader with(Locale l) {\n+    public ObjectReader with(Locale l) {\n         return _with(_config.with(l));\n     }\n \n-    public final ObjectReader with(TimeZone tz) {\n+    public ObjectReader with(TimeZone tz) {\n         return _with(_config.with(tz));\n     }\n \n-    public final ObjectReader withHandler(DeserializationProblemHandler h) {\n+    public ObjectReader withHandler(DeserializationProblemHandler h) {\n         return _with(_config.withHandler(h));\n     }\n \n-    public final ObjectReader with(Base64Variant defaultBase64) {\n+    public ObjectReader with(Base64Variant defaultBase64) {\n         return _with(_config.with(defaultBase64));\n     }\n \n      * \n      * @since 2.1\n      */\n-    public final ObjectReader withFormatDetection(ObjectReader... readers) {\n+    public ObjectReader withFormatDetection(ObjectReader... readers) {\n         return withFormatDetection(new DataFormatReaders(readers));\n     }\n \n     /**\n      * @since 2.3\n      */\n-    public final ObjectReader with(ContextAttributes attrs) {\n+    public ObjectReader with(ContextAttributes attrs) {\n         return _with(_config.with(attrs));\n     }\n \n     /**\n      * @since 2.3\n      */\n-    public final ObjectReader withAttributes(Map<Object,Object> attrs) {\n+    public ObjectReader withAttributes(Map<Object,Object> attrs) {\n         return _with(_config.withAttributes(attrs));\n     }\n \n     /**\n      * @since 2.3\n      */\n-    public final ObjectReader withAttribute(Object key, Object value) {\n+    public ObjectReader withAttribute(Object key, Object value) {\n         return _with( _config.withAttribute(key, value));\n     }\n \n     /**\n      * @since 2.3\n      */\n-    public final ObjectReader withoutAttribute(Object key) {\n+    public ObjectReader withoutAttribute(Object key) {\n         return _with(_config.withoutAttribute(key));\n     }\n \n         if (newConfig == _config) {\n             return this;\n         }\n-        if (_dataFormatReaders != null) {\n-            return _new(this, newConfig)\n-                .withFormatDetection(_dataFormatReaders.with(newConfig));\n-        }\n-        return _new(this, newConfig);\n+        ObjectReader r = _new(this, newConfig);\n+        if (_dataFormatReaders != null) {\n+            r  = r.withFormatDetection(_dataFormatReaders.with(newConfig));\n+        }\n+        return r;\n     }\n     \n     /*\n     public JsonParser treeAsTokens(TreeNode n) {\n         return new TreeTraversingParser((JsonNode) n, this);\n     }\n-     /**\n-      * Convenience method that binds content read using given parser, using\n-      * configuration of this reader, except that content is bound as\n-      * JSON tree instead of configured root value type.\n-      *<p>\n-      * Note: if an object was specified with {@link #withValueToUpdate}, it\n-      * will be ignored.\n-      *<p>\n-      * NOTE: this method never tries to auto-detect format, since actual\n-      * (data-format specific) parser is given.\n-      */\n-     @SuppressWarnings(\"unchecked\")\n-     @Override\n-     public <T extends TreeNode> T readTree(JsonParser jp)\n-         throws IOException, JsonProcessingException\n-     {\n-         return (T) _bindAsTree(jp);\n-     }\n+\n+    /**\n+     * Convenience method that binds content read using given parser, using\n+     * configuration of this reader, except that content is bound as\n+     * JSON tree instead of configured root value type.\n+     *<p>\n+     * Note: if an object was specified with {@link #withValueToUpdate}, it\n+     * will be ignored.\n+     *<p>\n+     * NOTE: this method never tries to auto-detect format, since actual\n+     * (data-format specific) parser is given.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public <T extends TreeNode> T readTree(JsonParser jp)\n+            throws IOException, JsonProcessingException\n+    {\n+        return (T) _bindAsTree(jp);\n+    }\n      \n     @Override\n     public void writeTree(JsonGenerator jgen, TreeNode rootNode) {\n      * by configuration. Method also is NOT to throw an exception if\n      * access fails.\n      */\n-    protected JsonDeserializer<Object> _prefetchRootDeserializer(\n-            DeserializationConfig config, JavaType valueType)\n+    protected JsonDeserializer<Object> _prefetchRootDeserializer(DeserializationConfig config, JavaType valueType)\n     {\n         if (valueType == null || !_config.isEnabled(DeserializationFeature.EAGER_DESERIALIZER_FETCH)) {\n             return null;", "timestamp": 1412359616, "metainfo": ""}