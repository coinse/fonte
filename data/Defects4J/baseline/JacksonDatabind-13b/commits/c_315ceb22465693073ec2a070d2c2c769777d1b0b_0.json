{"sha": "315ceb22465693073ec2a070d2c2c769777d1b0b", "log": "Fixes #528 - Added another set of unit tests for EXISTING_PROPERTY serialization and deserialization", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestSubtypesExistingProperty.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestSubtypesExistingProperty.java\n import com.fasterxml.jackson.databind.ObjectMapper;\n \n public class TestSubtypesExistingProperty extends BaseMapTest {\n-\t\n+\n+    /**\n+     * Polymorphic base class - existing property as simple property on subclasses\n+     */\n+\t@JsonTypeInfo(use = Id.NAME, include = As.EXISTING_PROPERTY, property = \"type\")\n+\t@JsonSubTypes({\n+\t\t@Type(value = Apple.class, name = \"apple\") ,\n+\t\t@Type(value = Orange.class, name = \"orange\") \n+\t\t})\n+\tstatic abstract class Fruit {\n+        public String name;\n+        protected Fruit(String n)  { name = n; }\n+    }\n+\n+    @JsonTypeName(\"apple\")\n+    static class Apple extends Fruit\n+    {\n+    \tpublic int seedCount;\n+    \tpublic String type;\n+        \n+        private Apple() { super(null); type = \"apple\"; }\n+        public Apple(String name, int b) {\n+            super(name);\n+            seedCount = b;\n+            type = \"apple\";\n+        }\n+    }\n+    \n+    @JsonTypeName(\"orange\")\n+    static class Orange extends Fruit\n+    {\n+        public String color;\n+        public String type;\n+        \n+        private Orange() { super(null); type = \"orange\"; }\n+        public Orange(String name, String c) {\n+            super(name);\n+            color = c;\n+            type = \"orange\";\n+        }\n+    }\n+\n+    static class FruitWrapper {\n+        public Fruit fruit;\n+        public FruitWrapper() {}\n+        public FruitWrapper(Fruit f) { fruit = f; }\n+    }\n+    \n     /**\n      * Polymorphic base class - existing property forced by abstract method\n      */\n     /**********************************************************\n      */\n \n+\tprivate static final Orange mandarin = new Orange(\"Mandarin Orange\", \"orange\");\n+\tprivate static final String mandarinJson = \"{\\\"name\\\":\\\"Mandarin Orange\\\",\\\"color\\\":\\\"orange\\\",\\\"type\\\":\\\"orange\\\"}\";\t\n+\tprivate static final Apple pinguo = new Apple(\"Apple-A-Day\", 16);\n+\tprivate static final String pinguoJson = \"{\\\"name\\\":\\\"Apple-A-Day\\\",\\\"seedCount\\\":16,\\\"type\\\":\\\"apple\\\"}\";\n+\tprivate static final FruitWrapper pinguoWrapper = new FruitWrapper(pinguo);\n+\tprivate static final String pinguoWrapperJson = \"{\\\"fruit\\\":\" + pinguoJson + \"}\";\n+\tprivate static final List<Fruit> fruitList = Arrays.asList(pinguo, mandarin);\n+\tprivate static final String fruitListJson = \"[\" + pinguoJson + \",\" + mandarinJson + \"]\";\n+\n \tprivate static final Cat beelzebub = new Cat(\"Beelzebub\", \"tabby\");\n \tprivate static final String beelzebubJson = \"{\\\"name\\\":\\\"Beelzebub\\\",\\\"furColor\\\":\\\"tabby\\\",\\\"type\\\":\\\"kitty\\\"}\";\t\n \tprivate static final Dog rover = new Dog(\"Rover\", 42);\n     /* Unit tests\n     /**********************************************************\n      */\n+\n+    /**\n+     * Fruits - serialization tests for simple property on sub-classes\n+     */\n+    public void testExistingPropertySerializationFruits() throws Exception\n+    {\n+        Map<String,Object> result = writeAndMap(MAPPER, pinguo);\n+        assertEquals(3, result.size());\n+        assertEquals(pinguo.name, result.get(\"name\"));\n+        assertEquals(pinguo.seedCount, result.get(\"seedCount\"));\n+        assertEquals(pinguo.type, result.get(\"type\"));\n+        \n+        result = writeAndMap(MAPPER, mandarin);\n+        assertEquals(3, result.size());\n+        assertEquals(mandarin.name, result.get(\"name\"));\n+        assertEquals(mandarin.color, result.get(\"color\"));\n+        assertEquals(mandarin.type, result.get(\"type\"));\n+        \n+        String pinguoSerialized = MAPPER.writeValueAsString(pinguo);\n+        assertEquals(pinguoSerialized, pinguoJson);\n+\n+        String mandarinSerialized = MAPPER.writeValueAsString(mandarin);\n+        assertEquals(mandarinSerialized, mandarinJson);\n+\n+        String fruitWrapperSerialized = MAPPER.writeValueAsString(pinguoWrapper);\n+        assertEquals(fruitWrapperSerialized, pinguoWrapperJson);\n+\n+        String fruitListSerialized = MAPPER.writeValueAsString(fruitList);\n+        assertEquals(fruitListSerialized, fruitListJson);\n+    }\n+\n+    /**\n+     * Fruits - deserialization tests for simple property on sub-classes\n+     */\n+    public void testSimpleClassAsExistingPropertyDeserializationFruits() throws Exception\n+    {\n+    \tFruit pinguoDeserialized = MAPPER.readValue(pinguoJson, Fruit.class);\n+    \tassertTrue(pinguoDeserialized instanceof Apple);\n+        assertSame(pinguoDeserialized.getClass(), Apple.class);\n+    \tassertEquals(pinguo.name, pinguoDeserialized.name);\n+    \tassertEquals(pinguo.seedCount, ((Apple) pinguoDeserialized).seedCount);\n+    \tassertEquals(pinguo.type, ((Apple) pinguoDeserialized).type);\n+\n+    \tFruitWrapper pinguoWrapperDeserialized = MAPPER.readValue(pinguoWrapperJson, FruitWrapper.class);\n+    \tFruit pinguoExtracted = pinguoWrapperDeserialized.fruit;\n+    \tassertTrue(pinguoExtracted instanceof Apple);\n+        assertSame(pinguoExtracted.getClass(), Apple.class);\n+    \tassertEquals(pinguo.name, pinguoExtracted.name);\n+    \tassertEquals(pinguo.seedCount, ((Apple) pinguoExtracted).seedCount);\n+    \tassertEquals(pinguo.type, ((Apple) pinguoExtracted).type);\n+\n+    \t@SuppressWarnings(\"unchecked\")\n+\t\tList<Fruit> fruitListDeserialized = MAPPER.readValue(fruitListJson, List.class);\n+    \tassertNotNull(fruitListDeserialized);\n+    \tassertTrue(fruitListDeserialized.size() == 2);\n+    \tFruit apple = MAPPER.convertValue(fruitListDeserialized.get(0), Apple.class);\n+    \tassertTrue(apple instanceof Apple);\n+        assertSame(apple.getClass(), Apple.class);\n+    \tFruit orange = MAPPER.convertValue(fruitListDeserialized.get(1), Orange.class);\n+    \tassertTrue(orange instanceof Orange);\n+        assertSame(orange.getClass(), Orange.class);\n+    }\n+\n \n     /**\n      * Animals - serialization tests for abstract method in base class", "timestamp": 1413383992, "metainfo": ""}