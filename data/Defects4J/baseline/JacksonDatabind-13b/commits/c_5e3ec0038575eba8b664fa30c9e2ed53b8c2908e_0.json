{"sha": "5e3ec0038575eba8b664fa30c9e2ed53b8c2908e", "log": "Improve creation of MappingIterator by ObjectReader, to allow for sub-classing", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java\n      */\n     @Deprecated\n     protected MappingIterator(JavaType type, JsonParser jp, DeserializationContext ctxt,\n-            JsonDeserializer<?> deser)\n-    {\n+            JsonDeserializer<?> deser) {\n         this(type, jp, ctxt, deser, true, null);\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n     }\n \n     /**\n+     * Factory method used to create {@link MappingIterator} instances;\n+     * either default, or custom subtype.\n+     * \n+     * @since 2.5\n+     */\n+    protected <T> MappingIterator<T> _newIterator(JavaType valueType,\n+            JsonParser parser, DeserializationContext ctxt,\n+            JsonDeserializer<?> deser, boolean parserManaged, Object valueToUpdate)\n+    {\n+            return new MappingIterator<T>(valueType, parser, ctxt,\n+                    deser, parserManaged, valueToUpdate);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Methods sub-classes may choose to override, if customized\n+    /* initialization is needed.\n+    /**********************************************************\n+     */\n+\n+    /**\n      * NOTE: changed from static to non-static in 2.5; unfortunate but\n      * necessary change to support overridability\n      */\n     {\n         DeserializationContext ctxt = createDeserializationContext(jp, _config);\n         // false -> do not close as caller gave parser instance\n-        return new MappingIterator<T>(_valueType, jp, ctxt,\n+        return _newIterator(_valueType, jp, ctxt,\n                 _findRootDeserializer(ctxt, _valueType),\n                 false, _valueToUpdate);\n     }\n         _initForMultiRead(p);\n         p.nextToken();\n         DeserializationContext ctxt = createDeserializationContext(p, _config);\n-        return new MappingIterator<T>(_valueType, p, ctxt,\n+        return _newIterator(_valueType, p, ctxt,\n                 _findRootDeserializer(ctxt, _valueType), true, _valueToUpdate);\n     }\n     \n         _initForMultiRead(p);\n         p.nextToken();\n         DeserializationContext ctxt = createDeserializationContext(p, _config);\n-        return new MappingIterator<T>(_valueType, p, ctxt,\n+        return _newIterator(_valueType, p, ctxt,\n                 _findRootDeserializer(ctxt, _valueType), true, _valueToUpdate);\n     }\n \n         _initForMultiRead(p);\n         p.nextToken();\n         DeserializationContext ctxt = createDeserializationContext(p, _config);\n-        return new MappingIterator<T>(_valueType, p, ctxt, \n-                _findRootDeserializer(ctxt, _valueType),\n-                true, _valueToUpdate);\n+        return _newIterator(_valueType, p, ctxt, \n+                _findRootDeserializer(ctxt, _valueType), true, _valueToUpdate);\n     }\n \n     protected Object _unwrapAndDeserialize(JsonParser jp, DeserializationContext ctxt,", "timestamp": 1414643340, "metainfo": ""}