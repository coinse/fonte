{"sha": "054467f2dce77e1a1f1aa074772d6860fa52b5ca", "log": "Fix #428", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n                 PropertyName pn = ai.findNameForDeserialization(f);\n                 explName = (pn == null) ? null : pn.getSimpleName();\n             }\n+            boolean nameExplicit = (explName != null);\n+            \n             if (\"\".equals(explName)) { // empty String meaning \"use default name\", here just means \"same as field name\"\n                 explName = implName;\n+                nameExplicit= false;\n             }\n             // having explicit name means that field is visible; otherwise need to check the rules\n             boolean visible = (explName != null);\n             if (pruneFinalFields && (explName == null) && !ignored && Modifier.isFinal(f.getModifiers())) {\n                 continue;\n             }\n-            _property(implName).addField(f, explName, true, visible, ignored);\n+            _property(implName).addField(f, explName, nameExplicit, visible, ignored);\n         }\n     }\n \n \n         PropertyName pn = (ai == null) ? null : ai.findNameForSerialization(m);\n         String explName = (pn == null) ? null : pn.getSimpleName();\n-        if (explName == null) { // no explicit name; must follow naming convention\n+        \n+        boolean nameExplicit = (explName != null);\n+\n+        if (!nameExplicit) { // no explicit name; must follow naming convention\n             implName = BeanUtil.okNameForRegularGetter(m, m.getName());\n             if (implName == null) { // if not, must skip\n                 implName = BeanUtil.okNameForIsGetter(m, m.getName());\n                 implName = m.getName();\n             }\n             if (explName.length() == 0) {\n+                nameExplicit = false;\n                 explName = implName;\n             }\n             visible = true;\n         }\n         boolean ignore = (ai == null) ? false : ai.hasIgnoreMarker(m);\n-        _property(implName).addGetter(m, explName, true, visible, ignore);\n+        _property(implName).addGetter(m, explName, nameExplicit, visible, ignore);\n     }\n \n     protected void _addSetterMethod(AnnotatedMethod m, AnnotationIntrospector ai)\n         boolean visible;\n         PropertyName pn = (ai == null) ? null : ai.findNameForDeserialization(m);\n         String explName = (pn == null) ? null : pn.getSimpleName();\n-        if (explName == null) { // no explicit name; must follow naming convention\n+        boolean nameExplicit = (explName != null);\n+        if (!nameExplicit) { // no explicit name; must follow naming convention\n             implName = BeanUtil.okNameForMutator(m, _mutatorPrefix);\n             if (implName == null) { // if not, must skip\n             \treturn;\n             }\n             if (explName.length() == 0) { \n                 explName = implName;\n+                nameExplicit = false;\n             }\n             visible = true;\n         }\n         boolean ignore = (ai == null) ? false : ai.hasIgnoreMarker(m);\n-        _property(implName).addSetter(m, explName, true, visible, ignore);\n+        _property(implName).addSetter(m, explName, nameExplicit, visible, ignore);\n     }\n     \n     protected void _addInjectables()\n         for (POJOPropertyBuilder prop : props) {\n             PropertyName fullName = prop.getFullName();\n             String rename = null;\n-            if (_forSerialization) {\n-                if (prop.hasGetter()) {\n-                    rename = naming.nameForGetterMethod(_config, prop.getGetter(), fullName.getSimpleName());\n-                } else if (prop.hasField()) {\n-                    rename = naming.nameForField(_config, prop.getField(), fullName.getSimpleName());\n-                }\n-            } else {\n-                if (prop.hasSetter()) {\n-                    rename = naming.nameForSetterMethod(_config, prop.getSetter(), fullName.getSimpleName());\n-                } else if (prop.hasConstructorParameter()) {\n-                    rename = naming.nameForConstructorParameter(_config, prop.getConstructorParameter(), fullName.getSimpleName());\n-                } else if (prop.hasField()) {\n-                    rename = naming.nameForField(_config, prop.getField(), fullName.getSimpleName());\n-                } else if (prop.hasGetter()) {\n-                    /* Plus, when getter-as-setter is used, need to convert that too..\n-                     * (should we verify that's enabled? For now, assume it's ok always)\n-                     */\n-                    rename = naming.nameForGetterMethod(_config, prop.getGetter(), fullName.getSimpleName());\n+            // As per [#428](https://github.com/FasterXML/jackson-databind/issues/428) need\n+            // to skip renaming if property has explicitly defined name\n+            if (!prop.isExplicitlyNamed()) {\n+                if (_forSerialization) {\n+                    if (prop.hasGetter()) {\n+                        rename = naming.nameForGetterMethod(_config, prop.getGetter(), fullName.getSimpleName());\n+                    } else if (prop.hasField()) {\n+                        rename = naming.nameForField(_config, prop.getField(), fullName.getSimpleName());\n+                    }\n+                } else {\n+                    if (prop.hasSetter()) {\n+                        rename = naming.nameForSetterMethod(_config, prop.getSetter(), fullName.getSimpleName());\n+                    } else if (prop.hasConstructorParameter()) {\n+                        rename = naming.nameForConstructorParameter(_config, prop.getConstructorParameter(), fullName.getSimpleName());\n+                    } else if (prop.hasField()) {\n+                        rename = naming.nameForField(_config, prop.getField(), fullName.getSimpleName());\n+                    } else if (prop.hasGetter()) {\n+                        /* Plus, when getter-as-setter is used, need to convert that too..\n+                         * (should we verify that's enabled? For now, assume it's ok always)\n+                         */\n+                        rename = naming.nameForGetterMethod(_config, prop.getGetter(), fullName.getSimpleName());\n+                    }\n                 }\n             }\n             final String simpleName;\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n         _ctorParameters = _removeIgnored(_ctorParameters);\n     }\n \n-    /**\n-     * @deprecated Since 2.2, use variant that takes boolean argument\n-     */\n-    @Deprecated\n-    public void removeNonVisible() {\n-        removeNonVisible(false);\n-    }\n-    \n     public void removeNonVisible(boolean force)\n     {\n         /* 21-Aug-2011, tatu: This is tricky part -- if and when allow", "timestamp": 1396048191, "metainfo": ""}