{"sha": "f4b6730ac7a72b9b22db9f2b1370f507d4c32438", "log": "silly little stylistic tweaking", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java\n  * Bean properties are logical entities that represent data\n  * that Java objects (POJOs (Plain Old Java Objects), sometimes also called \"beans\")\n  * contain; and that are accessed using accessors (methods like getters\n- * and setters, fields, contstructor parametrers).\n+ * and setters, fields, constructor parametrers).\n  * Instances allow access to annotations directly associated\n  * to property (via field or method), as well as contextual\n  * annotations (annotations for class that contains properties).\n             return (_contextAnnotations == null) ? null : _contextAnnotations.get(acls);\n         }\n         \n-        @Override\n-        public String getName() {\n-            return _name.getSimpleName();\n-        }\n-\n-        @Override\n-        public PropertyName getFullName() {\n-            return _name;\n-        }\n-        \n-        @Override\n-        public JavaType getType() {\n-            return _type;\n-        }\n-\n-        @Override\n-        public PropertyName getWrapperName() {\n-            return _wrapperName;\n-        }\n-        \n-        @Override\n-        public boolean isRequired() {\n-            return _metadata.isRequired();\n-        }\n-\n-        @Override\n-        public PropertyMetadata getMetadata() {\n-            return _metadata;\n-        }\n-        \n-        @Override\n-        public AnnotatedMember getMember() {\n-            return _member;\n-        }\n+        @Override public String getName() { return _name.getSimpleName(); }\n+        @Override public PropertyName getFullName() { return _name; }\n+        @Override public JavaType getType() { return _type; }\n+        @Override public PropertyName getWrapperName() { return _wrapperName; }\n+        @Override public boolean isRequired() { return _metadata.isRequired(); }\n+        @Override public PropertyMetadata getMetadata() { return _metadata; }\n+        @Override public AnnotatedMember getMember() { return _member; }\n \n         /**\n          * Implementation of this method throws\n          */\n         @Override\n         public void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor) {\n-            throw new UnsupportedOperationException(\"Instances of \"+getClass().getName()\n-                    +\" should not get visited\");\n+            throw new UnsupportedOperationException(\"Instances of \"+getClass().getName()+\" should not get visited\");\n         }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/InjectableValues.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/InjectableValues.java\n      * @param beanInstance Bean instance that contains property to inject,\n      *    if available; null if bean has not yet been constructed.\n      */\n-    public abstract Object findInjectableValue(Object valueId,\n-            DeserializationContext ctxt, BeanProperty forProperty,\n-            Object beanInstance);\n+    public abstract Object findInjectableValue(Object valueId, DeserializationContext ctxt,\n+            BeanProperty forProperty, Object beanInstance);\n \n     /*\n     /**********************************************************\n             _values = values;\n         }\n \n-        public Std addValue(String key, Object value)\n-        {\n+        public Std addValue(String key, Object value) {\n             _values.put(key, value);\n             return this;\n         }\n \n-        public Std addValue(Class<?> classKey, Object value)\n-        {\n+        public Std addValue(Class<?> classKey, Object value) {\n             _values.put(classKey.getName(), value);\n             return this;\n         }\n         \n         @Override\n-        public Object findInjectableValue(Object valueId,\n-                DeserializationContext ctxt, BeanProperty forProperty,\n-                Object beanInstance)\n+        public Object findInjectableValue(Object valueId, DeserializationContext ctxt,\n+                BeanProperty forProperty, Object beanInstance)\n         {\n             if (!(valueId instanceof String)) {\n                 String type = (valueId == null) ? \"[null]\" : valueId.getClass().getName();\n             String key = (String) valueId;\n             Object ob = _values.get(key);\n             if (ob == null && !_values.containsKey(key)) {\n-                throw new IllegalArgumentException(\"No injectable id with value '\"+key+\"' found (for property '\"\n-                        +forProperty.getName()+\"')\");\n+                throw new IllegalArgumentException(\"No injectable id with value '\"+key+\"' found (for property '\"+forProperty.getName()+\"')\");\n             }\n             return ob;\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/JavaType.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JavaType.java\n     public JavaType narrowBy(Class<?> subclass)\n     {\n         // First: if same raw class, just return this instance\n-        if (subclass == _class) {\n-            return this;\n-        }\n+        if (subclass == _class) { return this; }\n         // Otherwise, ensure compatibility\n         _assertSubclass(subclass, _class);\n         JavaType result = _narrow(subclass);\n      * If class is same as the current raw class, instance itself is\n      * returned.\n      */\n-    public JavaType widenBy(Class<?> superclass)\n-    {\n+    public JavaType widenBy(Class<?> superclass) {\n         // First: if same raw class, just return this instance\n-        if (superclass == _class) {\n-            return this;\n-        }\n+        if (superclass == _class) { return this; }\n         // Otherwise, ensure compatibility\n         _assertSubclass(_class, superclass);\n         return _widen(superclass);\n      * Default implementation is just to call {@link #_narrow}, since\n      * underlying type construction is usually identical\n      */\n-    protected JavaType _widen(Class<?> superclass) {\n-        return _narrow(superclass);\n-    }\n+    protected JavaType _widen(Class<?> superclass) { return _narrow(superclass); }\n \n     public abstract JavaType narrowContentsBy(Class<?> contentClass);\n \n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n      */\n \n     @Deprecated // since 2.3\n-    public BeanPropertyDefinition withName(String newName) {\n-        return withSimpleName(newName);\n-    }\n+    public BeanPropertyDefinition withName(String newName) { return withSimpleName(newName); }\n     \n     /**\n      * Method that can be used to create a definition with\n     /**********************************************************\n      */\n \n-    public boolean couldDeserialize() {\n-        return getMutator() != null;\n-    }\n-    public boolean couldSerialize() {\n-        return getAccessor() != null;\n-    }\n+    public boolean couldDeserialize() { return getMutator() != null; }\n+    public boolean couldSerialize() { return getAccessor() != null; }\n     \n     /*\n     /**********************************************************\n      * \n      * @since 2.1\n      */\n-    public AnnotatedMember getPrimaryMember() {\n-        return null;\n-    }\n+    public AnnotatedMember getPrimaryMember() { return null; }\n     \n     /*\n     /**********************************************************\n      * Method used to find whether property is part of a bi-directional\n      * reference.\n      */\n-    public AnnotationIntrospector.ReferenceProperty findReferenceType() {\n-        return null;\n-    }\n+    public AnnotationIntrospector.ReferenceProperty findReferenceType() { return null; }\n \n     /**\n      * Method used to check whether this logical property has a marker\n      * to indicate it should be used as the type id for polymorphic type\n      * handling.\n      */\n-    public boolean isTypeId() {\n-        return false;\n-    }\n+    public boolean isTypeId() { return false; }\n \n     /**\n      * Method used to check whether this logical property indicates that\n      * value POJOs should be written using additional Object Identifier\n      * (or, when multiple references exist, all but first AS Object Identifier).\n      */\n-    public ObjectIdInfo findObjectIdInfo() {\n-        return null;\n-    }\n+    public ObjectIdInfo findObjectIdInfo() { return null; }\n     \n     /**\n      * Method used to check if this property is expected to have a value;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n     /* Construction, configuration\n     /**********************************************************\n      */\n-    \n+\n     @SuppressWarnings(\"unchecked\")\n     public BeanPropertyWriter(BeanPropertyDefinition propDef,\n             AnnotatedMember member, Annotations contextAnnotations,", "timestamp": 1390280562, "metainfo": ""}