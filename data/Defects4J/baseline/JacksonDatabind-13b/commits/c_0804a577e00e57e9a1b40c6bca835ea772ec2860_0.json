{"sha": "0804a577e00e57e9a1b40c6bca835ea772ec2860", "log": "unit test cleanup", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/util/TestTokenBuffer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/util/TestTokenBuffer.java\n import java.io.*;\n \n import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.util.JsonParserSequence;\n \n public class TestTokenBuffer extends com.fasterxml.jackson.test.BaseTest\n {\n+    /*\n+    /**********************************************************\n+    /* Basic TokenBuffer tests\n+    /**********************************************************\n+     */\n+    \n     /**\n      * Test writing of individual simple values\n      */\n         // then content check too:\n         verifyJsonSpecSampleDoc(tb.asParser(), true);\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Tests to verify interaction of TokenBuffer and JsonParserSequence\n+    /**********************************************************\n+     */\n+    \n+    public void testWithJsonParserSequenceSimple() throws IOException\n+    {\n+        // Let's join a TokenBuffer with JsonParser first\n+        TokenBuffer buf = new TokenBuffer(null);\n+        buf.writeStartArray();\n+        buf.writeString(\"test\");\n+        JsonParser jp = createParserUsingReader(\"[ true, null ]\");\n+        \n+        JsonParserSequence seq = JsonParserSequence.createFlattened(buf.asParser(), jp);\n+        assertEquals(2, seq.containedParsersCount());\n+\n+        assertFalse(jp.isClosed());\n+        \n+        assertFalse(seq.hasCurrentToken());\n+        assertNull(seq.getCurrentToken());\n+        assertNull(seq.getCurrentName());\n+\n+        assertToken(JsonToken.START_ARRAY, seq.nextToken());\n+        assertToken(JsonToken.VALUE_STRING, seq.nextToken());\n+        assertEquals(\"test\", seq.getText());\n+        // end of first parser input, should switch over:\n+        \n+        assertToken(JsonToken.START_ARRAY, seq.nextToken());\n+        assertToken(JsonToken.VALUE_TRUE, seq.nextToken());\n+        assertToken(JsonToken.VALUE_NULL, seq.nextToken());\n+        assertToken(JsonToken.END_ARRAY, seq.nextToken());\n+\n+        /* 17-Jan-2009, tatus: At this point, we may or may not get an\n+         *   exception, depending on how underlying parsers work.\n+         *   Ideally this should be fixed, probably by asking underlying\n+         *   parsers to disable checking for balanced start/end markers.\n+         */\n+\n+        // for this particular case, we won't get an exception tho...\n+        assertNull(seq.nextToken());\n+        // not an error to call again...\n+        assertNull(seq.nextToken());\n+\n+        // also: original parsers should be closed\n+        assertTrue(jp.isClosed());\n+    }\n+    \n+    /**\n+     * Test to verify that TokenBuffer and JsonParserSequence work together\n+     * as expected.\n+     */\n+    public void testWithMultipleJsonParserSequences() throws IOException\n+    {\n+        TokenBuffer buf1 = new TokenBuffer(null);\n+        buf1.writeStartArray();\n+        TokenBuffer buf2 = new TokenBuffer(null);\n+        buf2.writeString(\"a\");\n+        TokenBuffer buf3 = new TokenBuffer(null);\n+        buf3.writeNumber(13);\n+        TokenBuffer buf4 = new TokenBuffer(null);\n+        buf4.writeEndArray();\n+\n+        JsonParserSequence seq1 = JsonParserSequence.createFlattened(buf1.asParser(), buf2.asParser());\n+        assertEquals(2, seq1.containedParsersCount());\n+        JsonParserSequence seq2 = JsonParserSequence.createFlattened(buf3.asParser(), buf4.asParser());\n+        assertEquals(2, seq2.containedParsersCount());\n+        JsonParserSequence combo = JsonParserSequence.createFlattened(seq1, seq2);\n+        // should flatten it to have 4 underlying parsers\n+        assertEquals(4, combo.containedParsersCount());\n+\n+        assertToken(JsonToken.START_ARRAY, combo.nextToken());\n+        assertToken(JsonToken.VALUE_STRING, combo.nextToken());\n+        assertEquals(\"a\", combo.getText());\n+        assertToken(JsonToken.VALUE_NUMBER_INT, combo.nextToken());\n+        assertEquals(13, combo.getIntValue());\n+        assertToken(JsonToken.END_ARRAY, combo.nextToken());\n+        assertNull(combo.nextToken());        \n+    }    \n }", "timestamp": 1327085408, "metainfo": ""}