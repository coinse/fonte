{"sha": "3bbe215e5e73a4c9c4b2b08b187a93ce48763f9d", "log": "removed Schema knowledge from objectMapper  ObjectMapper now acceptsJsonFormatVisitor rather than  generateJsonSchema.  Added setProvider to JsonFormatVisitor so that ObjectMapper can pass reference to first visitor.  Schema Hierarchy passes parent references, and gets provider from parent.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n import com.fasterxml.jackson.databind.introspect.ClassIntrospector;\n import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;\n import com.fasterxml.jackson.databind.introspect.VisibilityChecker;\n-import com.fasterxml.jackson.databind.jsonschema.factories.SchemaFactory;\n-import com.fasterxml.jackson.databind.jsonschema.types.JsonSchema;\n+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n import com.fasterxml.jackson.databind.jsontype.*;\n import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;\n import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;\n      * instance for specified class.\n      *\n      * @param t The class to generate schema for\n-     * @return Constructed JSON schema.\n-     */\n-    public JsonSchema generateJsonSchema(Class<?> t) throws JsonMappingException {\n+     */\n+    public void acceptJsonFormatVisitor(Class<?> t, JsonFormatVisitor visitor) throws JsonMappingException {\n+    \tif (t == null) {\n+    \t\tthrow new IllegalArgumentException(\"class must be provided\");\n+    \t}\n+    \t\n+    \tif (visitor == null) {\n+    \t\treturn;\n+    \t}\n     \tDefaultSerializerProvider provider = _serializerProvider(getSerializationConfig());\n-    \tSchemaFactory visitor = new SchemaFactory(provider);\n-        provider.acceptJsonFormatVisitor(t, visitor);\n-        return visitor.finalSchema();\n+        visitor.setProvider(provider);\n+    \tprovider.acceptJsonFormatVisitor(t, visitor);\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/AnySchemaFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/AnySchemaFactory.java\n \tprotected AnySchema anySchema;\n \t\n \tpublic AnySchemaFactory(SchemaFactory parent) {\n-\t\tsuper(parent.provider);\n \t\tthis.parent = parent;\n+\t\tsetProvider(parent.getProvider());\n \t\tanySchema = new AnySchema();\n \t}\n \n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/ArraySchemaFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/ArraySchemaFactory.java\n \tprotected BeanProperty _property;\n \t\n \tpublic ArraySchemaFactory(SchemaFactory parent, BeanProperty property) {\n-\t\tsuper(parent.provider);\n \t\tthis.parent = parent;\n+\t\tsetProvider(parent.getProvider());\n \t\tarraySchema = new ArraySchema();\n \t}\n \n \t\t\ttry {\n \t\t\t\tser = getProvider().findValueSerializer(contentType, _property);\n \t\t\t\tif (ser instanceof JsonFormatVisitorAware) {\n-\t            \tSchemaFactory visitor = new SchemaFactory(provider);\n+\t            \tSchemaFactory visitor = new SchemaFactory();\n+\t            \tvisitor.setProvider(provider);\n \t                ((JsonFormatVisitorAware) ser).acceptJsonFormatVisitor(visitor, contentType);\n \t                arraySchema.setItemsSchema(visitor.finalSchema());\n \t            }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/BooleanSchemaFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/BooleanSchemaFactory.java\n public class BooleanSchemaFactory extends ValueTypeSchemaFactory implements\n \t\tSchemaFactoryDelegate, JsonBooleanFormatVisitor {\n \n-\tprotected SchemaFactory parent;\n \tprotected BooleanSchema booleanSchema;\n \t\n \tpublic BooleanSchemaFactory(SchemaFactory parent) {\n-\t\tsuper(parent.provider);\n-\t\tthis.parent = parent;\n+\t\tsuper(parent);\n \t\tbooleanSchema = new BooleanSchema();\n \t}\n \n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/IntegerSchemaFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/IntegerSchemaFactory.java\n public class IntegerSchemaFactory extends ValueTypeSchemaFactory implements\n \t\tJsonIntegerFormatVisitor, SchemaFactoryDelegate {\n \n-\tprotected SchemaFactory parent;\n \tprotected IntegerSchema integerSchema;\n \t\n \tpublic IntegerSchemaFactory(SchemaFactory parent) {\n-\t\tsuper(parent.provider);\n-\t\tthis.parent = parent;\n+\t\tsuper(parent);\n \t\tintegerSchema = new IntegerSchema();\n \t}\n \n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/NullSchemaFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/NullSchemaFactory.java\n \tprotected NullSchema nullSchema;\n \t\n \tpublic NullSchemaFactory(SchemaFactory parent) {\n-\t\tsuper(parent.provider);\n \t\tthis.parent = parent;\n+\t\tsetProvider(parent.getProvider());\n \t\tnullSchema = new NullSchema();\n \t}\n \n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/NumberSchemaFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/NumberSchemaFactory.java\n public class NumberSchemaFactory extends ValueTypeSchemaFactory implements\n \t\tJsonNumberFormatVisitor, SchemaFactoryDelegate {\n \n-\tprotected SchemaFactory parent;\n \tprotected NumberSchema numberSchema;\n \t\n \tpublic NumberSchemaFactory(SchemaFactory parent) {\n-\t\tsuper(parent.provider);\n+\t\tsuper(parent);\n \t\tthis.parent = parent;\n \t\tnumberSchema = new NumberSchema();\n \t}\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/ObjectSchemaFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/ObjectSchemaFactory.java\n \tprotected ObjectSchema objectSchema;\n \t\n \tpublic ObjectSchemaFactory(SchemaFactory parent) {\n-\t\tsuper(parent.provider);\n \t\tthis.parent = parent;\n+\t\tsetProvider(parent.getProvider());\n \t\tobjectSchema = new ObjectSchema();\n \t}\n \t\n \t}\t\n \t\n \tprotected JsonSchema propertySchema(BeanPropertyWriter writer) {\n-\t\tSchemaFactory visitor = new SchemaFactory(provider);\n+\t\tSchemaFactory visitor = new SchemaFactory();\n+\t\tvisitor.setProvider(provider);\n \t\tJsonSerializer<Object> ser = getSer(writer);\n \t\tif (ser != null && ser instanceof JsonFormatVisitorAware) {\n \t\t\t((JsonFormatVisitorAware)ser).acceptJsonFormatVisitor(visitor, writer.getType());\n \t}\n \t\n \tprotected JsonSchema propertySchema(JsonFormatVisitorAware handler, JavaType propertyTypeHint) {\n-\t\tSchemaFactory visitor = new SchemaFactory(provider);\n+\t\tSchemaFactory visitor = new SchemaFactory();\n+\t\tvisitor.setProvider(provider);\n \t\thandler.acceptJsonFormatVisitor(visitor, propertyTypeHint);\n \t\treturn visitor.finalSchema();\n \t}\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/SchemaFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/SchemaFactory.java\n \tprivate SchemaFactoryDelegate delegate;\n \tprotected SerializerProvider provider;\n \n-\tpublic SchemaFactory(SerializerProvider mapper) {\n-\t\tthis.provider = mapper;\n+\tpublic SchemaFactory() {\n \t}\n \n \tpublic JsonAnyFormatVisitor anyFormat() {\n \n \t}\n \n+\t/**\n+\t * {@link SchemaFactory#provider}\n+\t * @param provider the provider to set\n+\t */\n+\tpublic void setProvider(SerializerProvider provider) {\n+\t\tthis.provider = provider;\n+\t}\n+\t\n \tpublic SerializerProvider getProvider() {\n \t\treturn provider;\n \t}\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/StringSchemaFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/StringSchemaFactory.java\n \t\tSchemaFactoryDelegate {\n \n \tprotected StringSchema stringSchema;\n-\tprotected SchemaFactory parent;\n \t\n \tpublic StringSchemaFactory(SchemaFactory parent) {\n-\t\tsuper(parent.provider);\n-\t\tthis.parent = parent;\n+\t\tsuper(parent);\n \t\tstringSchema = new StringSchema();\n \t}\n \n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/ValueTypeSchemaFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/ValueTypeSchemaFactory.java\n \n import java.util.Set;\n \n-import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsonschema.types.JsonValueFormat;\n import com.fasterxml.jackson.databind.jsonschema.types.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.types.ValueTypeSchema;\n public abstract class ValueTypeSchemaFactory extends SchemaFactory implements\n \t\tSchemaFactoryDelegate, JsonValueFormatVisitor {\n \n-\tprotected ValueTypeSchemaFactory(SerializerProvider provider) {\n-\t\tsuper(provider);\n+\tprotected SchemaFactory parent; \n+\t\n+\tprotected ValueTypeSchemaFactory(SchemaFactory parent) {\n+\t\tthis.parent = parent;\n+\t\tsetProvider(parent.getProvider());\n \t}\n \n \tpublic JsonSchema getSchema() {\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/visitors/JsonFormatVisitor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/visitors/JsonFormatVisitor.java\n \tpublic JsonAnyFormatVisitor anyFormat();\n \t\n \tpublic SerializerProvider getProvider();\n+\tpublic abstract void setProvider(SerializerProvider provider);\n \n }\n--- a/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestGenerateJsonSchema.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestGenerateJsonSchema.java\n import com.fasterxml.jackson.annotation.JsonFilter;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.jsonschema.factories.SchemaFactory;\n import com.fasterxml.jackson.databind.jsonschema.types.ObjectSchema;\n import com.fasterxml.jackson.databind.jsonschema.types.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.types.ArraySchema.Items;\n-import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;\n import com.fasterxml.jackson.databind.ser.FilterProvider;\n import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;\n import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;\n     public void testGeneratingJsonSchema()\n         throws Exception\n     {\n-    \tDefaultSerializerProvider sp = new DefaultSerializerProvider.Impl();\n         ObjectMapper m = new ObjectMapper();\n-        m.setSerializerProvider(sp);\n-        JsonSchema jsonSchema = m.generateJsonSchema(SimpleBean.class);\n+        SchemaFactory visitor = new SchemaFactory();\n+        m.acceptJsonFormatVisitor(SimpleBean.class, visitor);\n+        JsonSchema jsonSchema = visitor.finalSchema();\n         \n         assertNotNull(jsonSchema);\n \n     public void testGeneratingJsonSchemaWithFilters() throws Exception {\n     \tObjectMapper mapper = new ObjectMapper();\n     \tmapper.setFilters(secretFilterProvider);\n-    \tJsonSchema jsonSchema = mapper.generateJsonSchema(FilteredBean.class);\n+    \tSchemaFactory visitor = new SchemaFactory();\n+        mapper.acceptJsonFormatVisitor(FilteredBean.class, visitor);\n+        JsonSchema jsonSchema = visitor.finalSchema();\n     \tassertNotNull(jsonSchema);\n     \tassertTrue(jsonSchema.isObjectSchema());\n     \tObjectSchema object = jsonSchema.asObjectSchema();\n     public void testSchemaSerialization()\n             throws Exception\n     {\n-        JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class);\n+    \tSchemaFactory visitor = new SchemaFactory();\n+        MAPPER.acceptJsonFormatVisitor(SimpleBean.class, visitor);\n+        JsonSchema jsonSchema = visitor.finalSchema();\n         Map<String,Object> result = writeAndMap(MAPPER, jsonSchema);\n         assertNotNull(result);\n         // no need to check out full structure, just basics...\n     {\n         // not ok to pass null\n         try {\n-            MAPPER.generateJsonSchema(null);\n+        \tSchemaFactory visitor = new SchemaFactory();\n+            MAPPER.acceptJsonFormatVisitor(null, visitor);\n+            JsonSchema jsonSchema = visitor.finalSchema();\n             fail(\"Should have failed\");\n         } catch (IllegalArgumentException iae) {\n             verifyException(iae, \"class must be provided\");\n      */\n     public void testThatObjectsHaveNoItems() throws Exception\n     {\n-        JsonSchema jsonSchema = MAPPER.generateJsonSchema(TrivialBean.class);\n+    \tSchemaFactory visitor = new SchemaFactory();\n+        MAPPER.acceptJsonFormatVisitor(TrivialBean.class, visitor);\n+        JsonSchema jsonSchema = visitor.finalSchema();\n         Map<String,Object> result = writeAndMap(MAPPER, jsonSchema);\n         // can we count on ordering being stable? I think this is true with current ObjectNode impl\n         // as perh [JACKSON-563]; 'required' is only included if true\n     @SuppressWarnings({ \"unchecked\", \"rawtypes\", \"serial\" })\n \tpublic void testSchemaId() throws Exception\n     {\n-        JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class);\n+    \tSchemaFactory visitor = new SchemaFactory();\n+        MAPPER.acceptJsonFormatVisitor(BeanWithId.class, visitor);\n+        JsonSchema jsonSchema = visitor.finalSchema();\n         Map<String,Object> result = writeAndMap(MAPPER, jsonSchema);\n         \n         assertEquals(new HashMap() {{ \n         \tput(\"type\", \"object\");\n-        \t//put(\"id\", \"myType\"); /* This is not a correct use of id. see \"http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.27\" */\n         \tput(\"properties\", \n         \t\t\tnew HashMap(){{ put(\"value\", \n         \t\t\t\t\tnew HashMap() {{ put(\"type\", \"string\");}}\n         \t\t\t);}}\n         \t);}}, result);\n-        //assertEquals(\"{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}\",\n-          //      json);\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestReadJsonSchema.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestReadJsonSchema.java\n import java.util.*;\n \n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.jsonschema.factories.SchemaFactory;\n import com.fasterxml.jackson.databind.jsonschema.types.JsonSchema;\n \n /**\n     public void testDeserializeSimple() throws Exception\n     {\n         ObjectMapper mapper = new ObjectMapper();\n-        JsonSchema jsonSchema = mapper.generateJsonSchema(Schemable.class);\n+        SchemaFactory visitor = new SchemaFactory();\n+        mapper.acceptJsonFormatVisitor(Schemable.class, visitor);\n+        JsonSchema jsonSchema = visitor.finalSchema();\n         assertNotNull(jsonSchema);\n \n         String schemaStr = mapper.writeValueAsString(jsonSchema);", "timestamp": 1344305064, "metainfo": ""}