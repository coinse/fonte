{"sha": "28c4ada692e8b6768b476b2ed6060afc753e5514", "log": "Verified #594 works for 2.5.0, improved access handling", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n                         final Class<?> rawType = am.getRawReturnType();\n                         JsonSerializer<?> delegate = StdKeySerializers.getStdKeySerializer(config,\n                                 rawType, true);\n-                        ser = new JsonValueSerializer(am.getAnnotated(), delegate);\n+                        Method m = am.getAnnotated();\n+                        if (config.canOverrideAccessModifiers()) {\n+                            ClassUtil.checkAndFixAccess(m);\n+                        }\n+                        ser = new JsonValueSerializer(m, delegate);\n                     } else {\n                         ser = StdKeySerializers.getDefault();\n                     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n      */\n     \n     @Override\n-    public void serialize(Object bean, JsonGenerator jgen, SerializerProvider prov)\n-        throws IOException, JsonGenerationException\n+    public void serialize(Object bean, JsonGenerator jgen, SerializerProvider prov) throws IOException\n     {\n         try {\n             Object value = _accessorMethod.invoke(bean);\n \n     @Override\n     public void serializeWithType(Object bean, JsonGenerator jgen, SerializerProvider provider,\n-            TypeSerializer typeSer0)\n-        throws IOException, JsonProcessingException\n+            TypeSerializer typeSer0) throws IOException\n     {\n         // Regardless of other parts, first need to find value to serialize:\n         Object value = null;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n         }\n         \n         @Override\n-        public boolean isEmpty(byte[] value) {\n+        public boolean isEmpty(SerializerProvider prov, byte[] value) {\n             return (value == null) || (value.length == 0);\n         }\n         \n         @Override\n         public void serialize(byte[] value, JsonGenerator jgen, SerializerProvider provider)\n-            throws IOException, JsonGenerationException\n+            throws IOException\n         {\n             jgen.writeBinary(provider.getConfig().getBase64Variant(),\n                     value, 0, value.length);\n         @Override\n         public void serializeWithType(byte[] value, JsonGenerator jgen, SerializerProvider provider,\n                 TypeSerializer typeSer)\n-            throws IOException, JsonGenerationException\n+            throws IOException\n         {\n             typeSer.writeTypePrefixForScalar(value, jgen);\n             jgen.writeBinary(provider.getConfig().getBase64Variant(),\n         public CharArraySerializer() { super(char[].class); }\n         \n         @Override\n-        public boolean isEmpty(char[] value) {\n+        public boolean isEmpty(SerializerProvider prov, char[] value) {\n             return (value == null) || (value.length == 0);\n         }\n         \n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestEnumSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestEnumSerialization.java\n         @JsonFormat(shape=Shape.NUMBER)\n         public PoNUM value = PoNUM.B;\n     }\n-    \n+\n+    static enum MyEnum594 {\n+        VALUE_WITH_A_REALLY_LONG_NAME_HERE(\"longValue\");\n+\n+        private final String key;\n+        private MyEnum594(String k) { key = k; }\n+\n+        @JsonValue\n+        public String getKey() { return key; }\n+    }\n+\n+    static class MyStuff594 {\n+        public Map<MyEnum594,String> stuff = new EnumMap<MyEnum594,String>(MyEnum594.class);\n+        \n+        public MyStuff594(String value) {\n+            stuff.put(MyEnum594.VALUE_WITH_A_REALLY_LONG_NAME_HERE, value);\n+        }\n+    }\n+\n     /*\n     /**********************************************************\n     /* Tests\n \n     public void testOverrideEnumAsNumber() throws Exception {\n         assertEquals(\"{\\\"value\\\":1}\", mapper.writeValueAsString(new PoOverrideAsNumber()));\n+    }\n+\n+    // [databind#594]\n+    public void testJsonValueForEnumMapKey() throws Exception {\n+        assertEquals(aposToQuotes(\"{'stuff':{'longValue':'foo'}}\"),\n+                mapper.writeValueAsString(new MyStuff594(\"foo\")));\n     }\n }\n ", "timestamp": 1420161762, "metainfo": ""}