{"sha": "88040e2fa32c3bff2ce18e40a55807a3fca3d2d2", "log": "Improved handling of \"always-as-id\" references; might now actually be useful", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n     public ObjectIdInfo findObjectIdInfo(Annotated ann) {\n         return null;\n     }\n+\n+    /**\n+     * Method for figuring out additional properties of an Object Identity reference\n+     * \n+     * @since 2.1\n+     */\n+    public ObjectIdInfo findObjectReferenceInfo(Annotated ann, ObjectIdInfo objectIdInfo) {\n+        return objectIdInfo;\n+    }\n     \n     /*\n     /**********************************************************\n         }\n \n         @Override\n+        public ObjectIdInfo findObjectReferenceInfo(Annotated ann, ObjectIdInfo objectIdInfo) {\n+            // to give precedence for primary, must start with secondary:\n+            objectIdInfo = _secondary.findObjectReferenceInfo(ann, objectIdInfo);\n+            objectIdInfo = _primary.findObjectReferenceInfo(ann, objectIdInfo);\n+            return objectIdInfo;\n+        }\n+        \n+        @Override\n         public JsonFormat.Value findFormat(Annotated ann) {\n             JsonFormat.Value result = _primary.findFormat(ann);\n             if (result == null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n                 ? null : property.getMember();\n         if (property != null && intr != null) {\n             ignorals = intr.findPropertiesToIgnore(accessor);\n-            final ObjectIdInfo objectIdInfo = intr.findObjectIdInfo(accessor);\n+            ObjectIdInfo objectIdInfo = intr.findObjectIdInfo(accessor);\n             if (objectIdInfo != null) { // some code duplication here as well (from BeanDeserializerFactory)\n+                // 2.1: allow modifications by \"id ref\" annotations as well:\n+                objectIdInfo = intr.findObjectReferenceInfo(accessor, objectIdInfo);\n+                \n                 Class<?> implClass = objectIdInfo.getGeneratorType();\n                 // Property-based generator is trickier\n                 JavaType idType;\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n         if (info == null || info.generator() == ObjectIdGenerators.None.class) {\n             return null;\n         }\n-        return new ObjectIdInfo(info.property(), info.scope(), info.generator(),\n-                info.firstAsId());\n-    }\n-\n+        return new ObjectIdInfo(info.property(), info.scope(), info.generator());\n+    }\n+\n+    @Override\n+    public ObjectIdInfo findObjectReferenceInfo(Annotated ann, ObjectIdInfo objectIdInfo) {\n+        JsonIdentityReference ref = ann.getAnnotation(JsonIdentityReference.class);\n+        if (ref != null) {\n+            objectIdInfo = objectIdInfo.withAlwaysAsId(ref.alwaysAsId());\n+        }\n+        return objectIdInfo;\n+    }\n+    \n     @Override\n     public JsonFormat.Value findFormat(AnnotatedMember member) {\n         return findFormat(member);\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/ObjectIdInfo.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/ObjectIdInfo.java\n     protected final String _propertyName;\n     protected final Class<? extends ObjectIdGenerator<?>> _generator;\n     protected final Class<?> _scope;\n-    protected final boolean _firstAsId;\n+    protected final boolean _alwaysAsId;\n \n-    /**\n-     * @deprecated Since 2.1 use the constructor that takes 4 arguments.\n-     */\n-    @Deprecated\n     public ObjectIdInfo(String prop, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen) {\n         this(prop, scope, gen, false);\n     }\n-    \n-    public ObjectIdInfo(String prop, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen,\n-            boolean firstAsId)\n+\n+    protected ObjectIdInfo(String prop, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen,\n+            boolean alwaysAsId)\n     {\n         _propertyName = prop;\n+        _scope = scope;\n         _generator = gen;\n-        _scope = scope;\n-        _firstAsId = firstAsId;\n+        _alwaysAsId = alwaysAsId;\n     }\n \n+    public ObjectIdInfo withAlwaysAsId(boolean state) {\n+        if (_alwaysAsId == state) {\n+            return this;\n+        }\n+        return new ObjectIdInfo(_propertyName, _scope, _generator, state);\n+    }\n+    \n     public String getPropertyName() { return _propertyName; }\n     public Class<?> getScope() { return _scope; }\n     public Class<? extends ObjectIdGenerator<?>> getGeneratorType() { return _generator; }\n-    public boolean getFirstAsId() { return _firstAsId; }\n-}\n+    public boolean getAlwaysAsId() { return _alwaysAsId; }\n+\n+    @Override\n+    public String toString() {\n+        return \"ObjectIdInfo: propName=\"+_propertyName\n+                +\", scope=\"+(_scope == null ? \"null\" : _scope.getName())\n+                +\", generatorType=\"+(_generator == null ? \"null\" : _generator.getName())\n+                +\", alwaysAsId=\"+_alwaysAsId;\n+    }\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n         if (_annotationIntrospector == null) {\n             return null;\n         }\n-        return _annotationIntrospector.findObjectIdInfo(_classDef);\n+        ObjectIdInfo info = _annotationIntrospector.findObjectIdInfo(_classDef);\n+        if (info != null) { // 2.1: may also have different defaults for refs:\n+            info = _annotationIntrospector.findObjectReferenceInfo(_classDef, info);\n+        }\n+        return info;\n     }\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n     public ObjectIdInfo findObjectIdInfo() {\n         return fromMemberAnnotation(new WithMember<ObjectIdInfo>() {\n             public ObjectIdInfo withMember(AnnotatedMember member) {\n-                return _annotationIntrospector.findObjectIdInfo(member);\n+                ObjectIdInfo info = _annotationIntrospector.findObjectIdInfo(member);\n+                if (info != null) {\n+                    info = _annotationIntrospector.findObjectReferenceInfo(member, info);\n+                }\n+                return info;\n             }\n         });\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java\n         oid.serializer = w.serializer;\n         oid.id = id = oid.generator.generateId(bean);\n         // possibly. Or maybe not:\n-        if (w.firstAsId) { \n+        if (w.alwaysAsId) { \n             oid.serializer.serialize(id, jgen, provider);\n             return;\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n             JavaType idType = idProp.getType();\n             gen = new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n             // one more thing: must ensure that ObjectIdWriter does not actually write the value:\n-            return ObjectIdWriter.construct(idType, null, gen, objectIdInfo.getFirstAsId());\n+            return ObjectIdWriter.construct(idType, null, gen, objectIdInfo.getAlwaysAsId());\n             \n         } \n         // other types are simpler\n         JavaType idType = prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n         gen = prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n         return ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen,\n-                objectIdInfo.getFirstAsId());\n+                objectIdInfo.getAlwaysAsId());\n     }\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/ObjectIdWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/ObjectIdWriter.java\n      * \n      * @since 2.1\n      */\n-    public final boolean firstAsId;\n+    public final boolean alwaysAsId;\n     \n     /*\n     /**********************************************************\n \n     @SuppressWarnings(\"unchecked\")\n     protected ObjectIdWriter(JavaType t, SerializedString propName,\n-            ObjectIdGenerator<?> gen, JsonSerializer<?> ser, boolean firstAsId)\n+            ObjectIdGenerator<?> gen, JsonSerializer<?> ser, boolean alwaysAsId)\n     {\n         idType = t;\n         propertyName = propName;\n         generator = gen;\n         serializer = (JsonSerializer<Object>) ser;\n-        this.firstAsId = firstAsId;\n+        this.alwaysAsId = alwaysAsId;\n     }\n \n     /**\n      * for which serializer is being built.\n      */\n     public static ObjectIdWriter construct(JavaType idType, String propName,\n-            ObjectIdGenerator<?> generator, boolean firstAsId)\n+            ObjectIdGenerator<?> generator, boolean alwaysAsId)\n     {\n         SerializedString serName = (propName == null) ? null : new SerializedString(propName);\n-        return new ObjectIdWriter(idType, serName, generator, null, firstAsId);\n+        return new ObjectIdWriter(idType, serName, generator, null, alwaysAsId);\n     }\n \n     public ObjectIdWriter withSerializer(JsonSerializer<?> ser) {\n-        return new ObjectIdWriter(idType, propertyName, generator, ser, firstAsId);\n+        return new ObjectIdWriter(idType, propertyName, generator, ser, alwaysAsId);\n+    }\n+\n+    /**\n+     * @since 2.1\n+     */\n+    public ObjectIdWriter withAlwaysAsId(boolean newState) {\n+        if (newState == alwaysAsId) {\n+            return this;\n+        }\n+        return new ObjectIdWriter(idType, propertyName, generator, serializer, newState);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanSerializer.java\n         oid.serializer = w.serializer;\n         oid.id = id = oid.generator.generateId(bean);\n         // possibly. Or maybe not:\n-        if (w.firstAsId) { \n+        if (w.alwaysAsId) { \n             oid.serializer.serialize(id, jgen, provider);\n             return;\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n      * If this POJO can be alternatively serialized using just an object id\n      * to denote a reference to previously serialized object,\n      * this Object will handle details.\n-     *<p>\n-     * Note: not final since we need to get contextual instance during\n-     * resolution.\n      */\n     final protected ObjectIdWriter _objectIdWriter;\n \n                 ? null : property.getMember();\n         \n         // First: may have an override for Object Id:\n-        if (property != null && intr != null) {\n+        if (accessor != null) {\n             ignorals = intr.findPropertiesToIgnore(accessor);\n-            final ObjectIdInfo objectIdInfo = intr.findObjectIdInfo(accessor);\n-            if (objectIdInfo != null) {\n+            ObjectIdInfo objectIdInfo = intr.findObjectIdInfo(accessor);\n+            if (objectIdInfo == null) {\n+                // no ObjectId override, but maybe ObjectIdRef?\n+                if (oiw != null) {\n+                    objectIdInfo = intr.findObjectReferenceInfo(accessor, new ObjectIdInfo(\"\", null, null));\n+                    oiw = _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());\n+                }\n+            } else {\n                 /* Ugh: mostly copied from BeanSerializerBase: but can't easily\n                  * change it to be able to move to SerializerProvider (where it\n                  * really belongs)\n                  */\n+                \n+                // 2.1: allow modifications by \"id ref\" annotations as well:\n+                objectIdInfo = intr.findObjectReferenceInfo(accessor, objectIdInfo);\n                 ObjectIdGenerator<?> gen;\n                 Class<?> implClass = objectIdInfo.getGeneratorType();\n                 JavaType type = provider.constructType(implClass);\n                     }\n                     idType = idProp.getType();\n                     gen = new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n-                    oiw = ObjectIdWriter.construct(idType, null, gen, objectIdInfo.getFirstAsId());\n+                    oiw = ObjectIdWriter.construct(idType, null, gen, objectIdInfo.getAlwaysAsId());\n                 } else { // other types need to be simpler\n                     gen = provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                     oiw = ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen,\n-                            objectIdInfo.getFirstAsId());\n+                            objectIdInfo.getAlwaysAsId());\n                 }\n             }\n         }\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdSerialization.java\n package com.fasterxml.jackson.databind.struct;\n \n import com.fasterxml.jackson.annotation.JsonIdentityInfo;\n+import com.fasterxml.jackson.annotation.JsonIdentityReference;\n import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n \n         }\n     }\n \n-    // For [https://github.com/FasterXML/jackson-annotations/issues/4]\n-    @JsonIdentityInfo(generator=ObjectIdGenerators.IntSequenceGenerator.class,\n-            property=\"id\", firstAsId=true)\n+    @JsonIdentityInfo(generator=ObjectIdGenerators.IntSequenceGenerator.class, property=\"id\")\n     static class AlwaysAsId\n     {\n         public int value;\n         }\n     }\n \n+    // For [https://github.com/FasterXML/jackson-annotations/issues/4]\n     @JsonPropertyOrder(alphabetic=true)\n     static class AlwaysContainer\n     {\n+        @JsonIdentityReference(alwaysAsId=true)\n         public AlwaysAsId a = new AlwaysAsId(13);\n         \n-        @JsonIdentityInfo(generator=ObjectIdGenerators.IntSequenceGenerator.class,\n-                property=\"id\", firstAsId=true)\n+        @JsonIdentityInfo(generator=ObjectIdGenerators.IntSequenceGenerator.class, property=\"id\")\n+        @JsonIdentityReference(alwaysAsId=true)\n         public Value b = new Value();\n     }\n \n     static class Value {\n         public int x = 3;\n     }\n-    \n+\n+    @JsonIdentityInfo(generator=ObjectIdGenerators.PropertyGenerator.class, property=\"id\")\n+    static class TreeNode\n+    {\n+        public int id;\n+        public String name;\n+\n+        @JsonIdentityReference(alwaysAsId=true)\n+        public TreeNode parent;\n+\n+        // children serialized with ids if need be\n+        public TreeNode child;\n+\n+        public TreeNode() { }\n+        public TreeNode(TreeNode p, int id, String name) {\n+            parent = p;\n+            this.id = id;\n+            this.name = name;\n+        }\n+    }\n+\n     // // Let's also have one 'broken' test\n \n     // no \"id\" property\n     public void testAlwaysAsId() throws Exception\n     {\n         String json = MAPPER.writeValueAsString(new AlwaysContainer());\n-        assertEquals(json, \"{\\\"a\\\":1,\\\"b\\\":2}\");\n+        assertEquals(\"{\\\"a\\\":1,\\\"b\\\":2}\", json);\n+    }\n+\n+    public void testAlwaysIdForTree() throws Exception\n+    {\n+        TreeNode root = new TreeNode(null, 1, \"root\");     \n+        TreeNode leaf = new TreeNode(root, 2, \"leaf\");\n+        root.child = leaf;\n+        String json = MAPPER.writeValueAsString(root);\n+        System.out.println(json);\n+        assertEquals(\"{\\\"id\\\":1,\\\"name\\\":\\\"root\\\",\\\"parent\\\":null,\\\"child\\\":\"\n+                +\"{\\\"id\\\":2,\\\"name\\\":\\\"leaf\\\",\\\"parent\\\":1,\\\"child\\\":null}}\",\n+                json);\n+        \t\t\n     }\n     \n     /*", "timestamp": 1345840380, "metainfo": ""}