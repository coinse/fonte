{"sha": "e1e19f512c25e1509f0fd386ab84e7fe287708f7", "log": "More work on converting deserializers", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n         }\n         // also, often value deserializer is resolved here:\n         JsonDeserializer<?> valueDeser = _valueDeserializer;\n+        // #125: May have a content converter\n+        valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n         if (valueDeser == null) {\n             valueDeser = ctxt.findContextualValueDeserializer(\n                     _collectionType.getContentType(), property);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n             }\n         }\n         JsonDeserializer<?> vd = _valueDeserializer;\n+        // #125: May have a content converter\n+        vd = findConvertingContentDeserializer(ctxt, property, vd);\n         if (vd == null) {\n             vd = ctxt.findContextualValueDeserializer(_mapType.getContentType(), property);\n         } else { // if directly assigned, probably not yet contextual, so:\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java\n                 (JsonDeserializer<Object>) elemDeser, elemTypeDeser);\n     }\n \n-//    @Override\n+    @Override\n     public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n             BeanProperty property) throws JsonMappingException\n     {\n         JsonDeserializer<?> deser = _elementDeserializer;\n+        // #125: May have a content converter\n+        deser = findConvertingContentDeserializer(ctxt, property, deser);\n         if (deser == null) {\n             deser = ctxt.findContextualValueDeserializer(_arrayType.getContentType(), property);\n         } else { // if directly assigned, probably not yet contextual, so:\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java\n     /**********************************************************\n      */\n     \n-\n+    @Override\n     public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property)\n         throws JsonMappingException\n     {\n+        // First: if already got serializer to delegate to, contextualize it:\n+        if (_delegateDeserializer != null) {\n+            if (_delegateDeserializer instanceof ContextualDeserializer) {\n+                JsonDeserializer<?> deser = ((ContextualDeserializer)_delegateDeserializer).createContextual(ctxt, property);\n+                if (deser != _delegateDeserializer || true) {\n+                    return withDelegate(_converter, _delegateType, deser);\n+                }\n+            }\n+            return this;\n+        }\n+\n         // First: figure out what is the fully generic delegate type:\n         TypeFactory tf = ctxt.getTypeFactory();\n         JavaType implType = tf.constructType(_converter.getClass());\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n-import com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.fasterxml.jackson.databind.util.Converter;\n \n             BeanProperty prop, JsonDeserializer<?> existingDeserializer)\n         throws JsonMappingException\n     {\n-        /*\n         final AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();\n         if (intr != null && prop != null) {\n-            Object convDef = intr.findSerializationContentConverter(prop.getMember());\n+            Object convDef = intr.findDeserializationContentConverter(prop.getMember());\n             if (convDef != null) {\n                 Converter<Object,Object> conv = ctxt.converterInstance(prop.getMember(), convDef);\n                 TypeFactory tf = ctxt.getTypeFactory();\n                     throw new JsonMappingException(\"Could not determine Converter parameterization for \"\n                             +converterType);\n                 }\n-                JavaType delegateType = params[1];\n+                // We need to use input type, as that's what deserializer needs to produce:\n+                JavaType delegateType = params[0];\n                 if (existingDeserializer == null) {\n-                    existingDeserializer = ctxt.findValueSerializer(delegateType, prop);\n+                    existingDeserializer = ctxt.findContextualValueDeserializer(delegateType, prop);\n                 }\n                 return new StdDelegatingDeserializer<Object>(conv, delegateType, existingDeserializer);\n             }\n         }\n-        */\n         return existingDeserializer;\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java\n         if (_delegateSerializer != null) {\n             if (_delegateSerializer instanceof ContextualSerializer) {\n                 JsonSerializer<?> ser = ((ContextualSerializer)_delegateSerializer).createContextual(provider, property);\n-                if (ser != _delegateSerializer) {\n+                if (ser == _delegateSerializer) {\n                     return this;\n                 }\n                 return withDelegate(_converter, _delegateType, ser);", "timestamp": 1362261379, "metainfo": ""}