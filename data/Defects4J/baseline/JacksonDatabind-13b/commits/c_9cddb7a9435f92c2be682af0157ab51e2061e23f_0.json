{"sha": "9cddb7a9435f92c2be682af0157ab51e2061e23f", "log": "Fixed [Issue-13]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java\n             HashMap<String,Integer> names = new HashMap<String,Integer>();\n             for (int i = 0, len = properties.length; i < len; ++i) {\n                 String name = properties[i].getName();\n+                /* [Issue-13]: Need to consider Injectables, which may not have\n+                 *   a name at all, and need to be skipped\n+                 */\n+                if (name.length() == 0 && properties[i].getInjectableValueId() != null) {\n+                    continue;\n+                }\n                 Integer old = names.put(name, Integer.valueOf(i));\n                 if (old != null) {\n                     throw new IllegalArgumentException(\"Duplicate creator property \\\"\"+name+\"\\\" (index \"+old+\" vs \"+i+\")\");\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.java\n     protected final HashMap<String, SettableBeanProperty> _properties;\n \n     /**\n+     * Number of properties: usually same as size of {@link #_properties},\n+     * but not necessarily, when we have unnamed injectable properties.\n+     */\n+    protected final int _propertyCount;\n+    \n+    /**\n      * If some property values must always have a non-null value (like\n      * primitive types do), this array contains such default values.\n      */\n         _valueInstantiator = valueInstantiator;\n         _properties = new HashMap<String, SettableBeanProperty>();\n         SettableBeanProperty[] propertiesWithInjectables = null;\n-        for (int i = 0, len = creatorProps.length; i < len; ++i) {\n+        final int len = creatorProps.length;\n+        _propertyCount = len;\n+        for (int i = 0; i < len; ++i) {\n             SettableBeanProperty prop = creatorProps[i];\n             _properties.put(prop.getName(), prop);\n             Object injectableValueId = prop.getInjectableValueId();\n             }\n         }\n         _defaultValues = defaultValues;\n-        _propertiesWithInjectables = propertiesWithInjectables;        \n+        _propertiesWithInjectables = propertiesWithInjectables;\n     }\n \n     /**\n      */\n     public PropertyValueBuffer startBuilding(JsonParser jp, DeserializationContext ctxt)\n     {\n-        PropertyValueBuffer buffer = new PropertyValueBuffer(jp, ctxt, _properties.size());\n+        PropertyValueBuffer buffer = new PropertyValueBuffer(jp, ctxt, _propertyCount);\n         if (_propertiesWithInjectables != null) {\n             buffer.inject(_propertiesWithInjectables);\n         }\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestInjectables.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestInjectables.java\n             age = a;\n         }\n     }\n+\n+    static class CtorBean2 {\n+        protected String name;\n+        protected Integer age;\n+        \n+        public CtorBean2(@JacksonInject String n, @JacksonInject(\"number\") Integer a)\n+        {\n+            name = n;\n+            age = a;\n+        }\n+    }\n     \n     /*\n     /**********************************************************\n         assertEquals(\"xyz\", bean.otherStuff);\n         assertEquals(37L, bean.third);\n     }\n-\n+    \n     public void testWithCtors() throws Exception\n     {\n         ObjectMapper mapper = new ObjectMapper();\n         CtorBean bean = mapper.readValue(\"{\\\"age\\\":55}\", CtorBean.class);\n         assertEquals(55, bean.age);\n         assertEquals(\"Bubba\", bean.name);\n+    }\n+\n+    // [Issue-13]\n+    public void testTwoInjectablesViaCreator() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.setInjectableValues(new InjectableValues.Std()\n+            .addValue(String.class, \"Bob\")\n+            .addValue(\"number\", Integer.valueOf(13))\n+            );\n+        CtorBean2 bean = mapper.readValue(\"{ }\", CtorBean2.class);\n+        assertEquals(Integer.valueOf(13), bean.age);\n+        assertEquals(\"Bob\", bean.name);\n     }\n     \n     public void testInvalidDup() throws Exception", "timestamp": 1335939656, "metainfo": ""}