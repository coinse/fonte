{"sha": "36b227a8840ec998daab09b905bd3f30ded65f28", "log": "Add a test for #661; now works (assuming `writeString()` changed to `writeFieldName()`)", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestEnumSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestEnumSerialization.java\n import java.io.*;\n import java.util.*;\n \n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n import com.fasterxml.jackson.annotation.JsonFormat;\n import com.fasterxml.jackson.annotation.JsonFormat.Shape;\n import com.fasterxml.jackson.annotation.JsonProperty;\n         }\n     }\n \n+    public class MyBean661 {\n+        private Map<Foo661, String> foo = new EnumMap<Foo661, String>(Foo661.class);\n+\n+        public MyBean661(String value) {\n+            foo.put(Foo661.FOO, value);\n+        }\n+\n+        @JsonAnyGetter\n+        @JsonSerialize(keyUsing = Foo661.Serializer.class)\n+        public Map<Foo661, String> getFoo() {\n+            return foo;\n+        }\n+    }\n+\n+    enum Foo661 {\n+        FOO;\n+        public static class Serializer extends JsonSerializer<Foo661> {\n+            @Override\n+            public void serialize(Foo661 value, JsonGenerator jgen, SerializerProvider provider) \n+                    throws IOException {\n+                jgen.writeFieldName(\"X-\"+value.name());\n+            }\n+        }\n+    }\n     /*\n     /**********************************************************\n     /* Tests\n     public void testJsonValueForEnumMapKey() throws Exception {\n         assertEquals(aposToQuotes(\"{'stuff':{'longValue':'foo'}}\"),\n                 mapper.writeValueAsString(new MyStuff594(\"foo\")));\n+    }\n+\n+    // [databind#661]\n+    public void testCustomEnumMapKeySerializer() throws Exception {\n+        String json = mapper.writeValueAsString(new MyBean661(\"abc\"));\n+        assertEquals(aposToQuotes(\"{'X-FOO':'abc'}\"), json);\n     }\n }\n ", "timestamp": 1420162191, "metainfo": ""}