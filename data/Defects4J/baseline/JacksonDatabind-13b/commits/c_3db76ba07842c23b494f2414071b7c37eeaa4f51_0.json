{"sha": "3db76ba07842c23b494f2414071b7c37eeaa4f51", "log": "Adding test to try to reproduce #186.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java\n  */\n @SuppressWarnings(\"serial\")\n public class JsonNodeDeserializer\n-    extends BaseNodeDeserializer<JsonNode>\n+    extends BaseNodeDeserializer\n {\n     /**\n      * Singleton instance of generic deserializer for {@link JsonNode}.\n      */\n     private final static JsonNodeDeserializer instance = new JsonNodeDeserializer();\n \n-    protected JsonNodeDeserializer() { super(JsonNode.class); }\n+    protected JsonNodeDeserializer() { }\n \n     /**\n      * Factory method for accessing deserializer for specific node type\n      */\n \n     final static class ObjectDeserializer\n-        extends BaseNodeDeserializer<ObjectNode>\n+        extends BaseNodeDeserializer\n     {\n         private static final long serialVersionUID = 1L;\n \n         protected final static ObjectDeserializer _instance = new ObjectDeserializer();\n \n-        protected ObjectDeserializer() {\n-            super(ObjectNode.class);\n-        }\n+        protected ObjectDeserializer() { }\n \n         public static ObjectDeserializer getInstance() { return _instance; }\n         \n     }\n         \n     final static class ArrayDeserializer\n-        extends BaseNodeDeserializer<ArrayNode>\n+        extends BaseNodeDeserializer\n     {\n         private static final long serialVersionUID = 1L;\n \n         protected final static ArrayDeserializer _instance = new ArrayDeserializer();\n \n-        protected ArrayDeserializer() {\n-            super(ArrayNode.class);\n-        }\n+        protected ArrayDeserializer() { }\n \n         public static ArrayDeserializer getInstance() { return _instance; }\n         \n  * implementations\n  */\n @SuppressWarnings(\"serial\")\n-abstract class BaseNodeDeserializer<N extends JsonNode>\n-    extends StdDeserializer<N>\n+abstract class BaseNodeDeserializer\n+    extends StdDeserializer<JsonNode>\n {\n-    public BaseNodeDeserializer(Class<N> nodeClass)\n-    {\n-        super(nodeClass);\n+    public BaseNodeDeserializer()\n+    {\n+        super(JsonNode.class);\n     }\n     \n     @Override\n          * a priori. So:\n          */\n         return typeDeserializer.deserializeTypedFromAny(jp, ctxt);\n+    }\n+\n+    @Override\n+    public JsonNode getNullValue() {\n+        return NullNode.getInstance();\n     }\n \n     /*\n--- a/src/test/java/com/fasterxml/jackson/databind/BaseMapTest.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/BaseMapTest.java\n \n     private final static ObjectMapper SHARED_MAPPER = new ObjectMapper();\n \n+    protected ObjectMapper objectMapper() {\n+        return SHARED_MAPPER;\n+    }\n+    \n     protected ObjectWriter objectWriter() {\n         return SHARED_MAPPER.writer();\n     }\n         return (Map<String,Object>) m.readValue(str, Map.class);\n     }\n \n+    protected <T> T readAndMapFromString(String input, Class<T> cls)\n+        throws IOException\n+    {\n+        return readAndMapFromString(SHARED_MAPPER, input, cls);\n+    }\n+    \n     protected <T> T readAndMapFromString(ObjectMapper m, String input, Class<T> cls)\n         throws IOException\n     {\n         return (T) m.readValue(\"\\\"\"+input+\"\\\"\", cls);\n     }\n-\n+    \n     protected String serializeAsString(ObjectMapper m, Object value)\n         throws IOException\n     {\n     protected String serializeAsString(Object value)\n         throws IOException\n     {\n-        return serializeAsString(new ObjectMapper(), value);\n+        return serializeAsString(SHARED_MAPPER, value);\n     }\n \n     protected String asJSONObjectValueString(Object... args)\n         throws IOException\n     {\n-        return asJSONObjectValueString(new ObjectMapper(), args);\n+        return asJSONObjectValueString(SHARED_MAPPER, args);\n     }\n \n     protected String asJSONObjectValueString(ObjectMapper m, Object... args)\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestTreeDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestTreeDeserialization.java\n     /* Unit tests\n     /**********************************************************\n      */\n-    \n+\n     /**\n      * This test checks that is possible to mix \"regular\" Java objects\n      * and JsonNode.\n         String value = out.path(\"field\").asText();\n         assertNotNull(value);\n     }\n+\n+    // Issue#186\n+    public void testNullHandling() throws Exception\n+    {\n+        // First, a stand-alone null\n+        JsonNode n = objectReader().readTree(\"null\");\n+        assertNotNull(n);\n+        assertTrue(n.isNull());\n+\n+        n = objectMapper().readTree(\"null\");\n+        assertNotNull(n);\n+        assertTrue(n.isNull());\n+        \n+        // Then object property\n+        ObjectNode root = (ObjectNode) objectReader().readTree(\"{\\\"x\\\":null}\");\n+        assertEquals(1, root.size());\n+        n = root.get(\"x\");\n+        assertNotNull(n);\n+        assertTrue(n.isNull());\n+    }\n }", "timestamp": 1362953742, "metainfo": ""}