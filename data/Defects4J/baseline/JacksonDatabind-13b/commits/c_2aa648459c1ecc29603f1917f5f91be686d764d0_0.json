{"sha": "2aa648459c1ecc29603f1917f5f91be686d764d0", "log": "Implement [JACKSON-751], add @JsonInclude", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n import java.lang.annotation.Annotation;\n import java.util.*;\n \n+import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.core.Version;\n import com.fasterxml.jackson.core.Versioned;\n import com.fasterxml.jackson.core.util.VersionUtil;\n      * @return Enumerated value indicating which properties to include\n      *   in serialization\n      */\n-    public JsonSerialize.Inclusion findSerializationInclusion(Annotated a, JsonSerialize.Inclusion defValue) {\n+    public JsonInclude.Include findSerializationInclusion(Annotated a, JsonInclude.Include defValue) {\n         return defValue;\n     }\n \n         }\n         \n         @Override\n-        public JsonSerialize.Inclusion findSerializationInclusion(Annotated a,\n-                JsonSerialize.Inclusion defValue)\n+        public JsonInclude.Include findSerializationInclusion(Annotated a,\n+                JsonInclude.Include defValue)\n         {\n             /* This is bit trickier: need to combine results in a meaningful\n              * way. Seems like it should be a disjoint; that is, most\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n import java.util.concurrent.ConcurrentHashMap;\n \n import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.annotation.PropertyAccessor;\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.type.ResolvedType;\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.core.util.*;\n-import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import com.fasterxml.jackson.databind.deser.*;\n import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;\n import com.fasterxml.jackson.databind.introspect.ClassIntrospector;\n      *  mapper.setSerializationConfig(mapper.getSerializationConfig().withSerializationInclusion(incl));\n      *</pre>\n      */\n-    public ObjectMapper setSerializationInclusion(JsonSerialize.Inclusion incl) {\n+    public ObjectMapper setSerializationInclusion(JsonInclude.Include incl) {\n         _serializationConfig = _serializationConfig.withSerializationInclusion(incl);\n         return this;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n      * changed to only include non-null properties, or properties\n      * with non-default values.\n      */\n-    protected JsonSerialize.Inclusion _serializationInclusion = null;\n+    protected JsonInclude.Include _serializationInclusion = null;\n \n     /**\n      * View to use for filtering out properties to serialize.\n         _filterProvider = src._filterProvider;\n     }\n \n-    protected SerializationConfig(SerializationConfig src, JsonSerialize.Inclusion incl)\n+    protected SerializationConfig(SerializationConfig src, JsonInclude.Include incl)\n     {\n         super(src);\n         _serializationInclusion = incl;\n         return new SerializationConfig(this, view);\n     }\n \n-    public SerializationConfig withSerializationInclusion(JsonSerialize.Inclusion incl) {\n+    public SerializationConfig withSerializationInclusion(JsonInclude.Include incl) {\n         return new SerializationConfig(this, incl);\n     }\n \n      */\n     public Class<?> getSerializationView() { return _serializationView; }\n \n-    public JsonSerialize.Inclusion getSerializationInclusion()\n+    public JsonInclude.Include getSerializationInclusion()\n     {\n         if (_serializationInclusion != null) {\n             return _serializationInclusion;\n         }\n-        return JsonSerialize.Inclusion.ALWAYS;\n+        return JsonInclude.Include.ALWAYS;\n     }\n     \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/annotation/JsonSerialize.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/annotation/JsonSerialize.java\n  *<pre>\n  *  &#64;JsonSerialize(using=MySerializer.class,\n  *    as=MySubClass.class,\n- *    include=JsonSerialize.Inclusion.NON_NULL,\n  *    typing=JsonSerialize.Typing.STATIC\n  *  )\n  *</pre>\n  * (which would be redundant, since some properties block others:\n  * specifically, 'using' has precedence over 'as', which has precedence\n  * over 'typing' setting)\n- *<p>\n- * NOTE: since version 1.2, annotation has also been applicable\n- * to (constructor) parameters\n- *\n- * @since 1.1\n  */\n @Target({ElementType.METHOD, ElementType.FIELD, ElementType.TYPE, ElementType.PARAMETER})\n @Retention(RetentionPolicy.RUNTIME)\n      * of a Collection/array, values of Maps) of annotated property.\n      * Can only be used on properties (methods, fields, constructors),\n      * and not value classes themselves (as they are typically generic)\n-     *\n-     * @since 1.8\n      */\n     public Class<? extends JsonSerializer<?>> contentUsing()\n         default JsonSerializer.None.class;\n      * of annotated property.\n      * Can only be used on properties (methods, fields, constructors),\n      * and not value classes themselves.\n-     *\n-     * @since 1.8\n      */\n     public Class<? extends JsonSerializer<?>> keyUsing()\n         default JsonSerializer.None.class;\n      * Whether type detection used is dynamic or static: that is,\n      * whether actual runtime type is used (dynamic), or just the\n      * declared type (static).\n-     *\n-     * @since 1.2\n      */\n     public Typing typing() default Typing.DYNAMIC;\n \n      * being property setting for a Bean constructed with default no-arg\n      * constructor, often null).\n      *\n-     */\n+     * @deprecated As of Jackson 2.0, this annotation has been replaced\n+     *    by {@link com.fasterxml.jackson.annotation.JsonInclude}\n+     */\n+    @Deprecated\n     public Inclusion include() default Inclusion.ALWAYS;\n     \n     /*\n      * Enumeration used with {@link JsonSerialize#include} property\n      * to define which properties\n      * of Java Beans are to be included in serialization\n-     *\n-     * @since 1.1\n      */\n     public enum Inclusion\n     {\n          *   </li>\n          * <ul>\n          *  For other types, non-null values are to be included.\n-         * \n-         * @since 1.9\n          */\n         NON_EMPTY\n         ;\n      * Enumeration used with {@link JsonSerialize#typing} property\n      * to define whether type detection is based on dynamic runtime\n      * type (DYNAMIC) or declared type (STATIC).\n-     * \n-     * @since 1.1\n      */\n     public enum Typing\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n import java.lang.reflect.Method;\n import java.util.*;\n \n-\n+import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import com.fasterxml.jackson.databind.type.TypeBindings;\n import com.fasterxml.jackson.databind.util.Annotations;\n \n      * feature (lowest priority, passed as argument)\n      * and per-class annotation (highest priority).\n      */\n-    public JsonSerialize.Inclusion findSerializationInclusion(JsonSerialize.Inclusion defValue)\n+    public JsonInclude.Include findSerializationInclusion(JsonInclude.Include defValue)\n     {\n         if (_annotationIntrospector == null) {\n             return defValue;\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n     }\n     \n     @Override\n-    public JsonSerialize.Inclusion findSerializationInclusion(Annotated a, JsonSerialize.Inclusion defValue)\n-    {\n+    public JsonInclude.Include findSerializationInclusion(Annotated a, JsonInclude.Include defValue)\n+    {\n+        JsonInclude inc = a.getAnnotation(JsonInclude.class);\n+        if (inc != null) {\n+            return inc.value();\n+        }\n         JsonSerialize ann = a.getAnnotation(JsonSerialize.class);\n         if (ann != null) {\n-            return ann.include();\n+            @SuppressWarnings(\"deprecation\")\n+            JsonSerialize.Inclusion i2 = ann.include();\n+            switch (i2) {\n+            case ALWAYS:\n+                return JsonInclude.Include.ALWAYS;\n+            case NON_NULL:\n+                return JsonInclude.Include.NON_NULL;\n+            case NON_DEFAULT:\n+                return JsonInclude.Include.NON_DEFAULT;\n+            case NON_EMPTY:\n+                return JsonInclude.Include.NON_EMPTY;\n+            }\n         }\n         return defValue;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n \n+import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion;\n {\n     final protected SerializationConfig _config;\n     final protected BasicBeanDescription _beanDesc;\n-    final protected JsonSerialize.Inclusion _outputProps;\n+    final protected JsonInclude.Include _outputProps;\n \n     final protected AnnotationIntrospector _annotationIntrospector;\n \n         Object valueToSuppress = null;\n         boolean suppressNulls = false;\n \n-        JsonSerialize.Inclusion methodProps = _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n+        JsonInclude.Include methodProps = _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n         \n         if (methodProps != null) {\n             switch (methodProps) {\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestExceptionDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestExceptionDeserialization.java\n package com.fasterxml.jackson.databind.deser;\n-\n \n import java.io.IOException;\n import java.util.*;\n import com.fasterxml.jackson.annotation.*;\n \n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n \n /**\n  * Unit tests for verifying that simple exceptions can be deserialized.\n     public void testWithNullMessage() throws IOException\n     {\n         ObjectMapper mapper = new ObjectMapper();\n-        mapper.setSerializationInclusion(JsonSerialize.Inclusion.NON_NULL);\n+        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n         String json = mapper.writeValueAsString(new IOException((String) null));\n         IOException result = mapper.readValue(json, IOException.class);\n         assertNotNull(result);\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics.java\n \n import java.io.IOException;\n import java.util.*;\n-\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.annotation.*;\n import com.fasterxml.jackson.annotation.JsonTypeInfo.As;\n import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;\n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;\n import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;\n import com.fasterxml.jackson.databind.ser.ResolvableSerializer;\n     {\n         ObjectMapper om = new ObjectMapper();\n         om.enableDefaultTyping( ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT, JsonTypeInfo.As.PROPERTY );\n-        om.setSerializationInclusion( JsonSerialize.Inclusion.NON_NULL );\n+        om.setSerializationInclusion(JsonInclude.Include.NON_NULL );\n         om.enable( SerializationConfig.Feature.INDENT_OUTPUT);\n \n         MyClass mc = new MyClass();\n--- a/src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinSerWithViews.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinSerWithViews.java\n import com.fasterxml.jackson.annotation.*;\n \n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n \n public class TestMixinSerWithViews\n     extends BaseMapTest\n     {\n       ObjectMapper objectMapper = new ObjectMapper( );\n       objectMapper.configure( SerializationConfig.Feature.FAIL_ON_EMPTY_BEANS, false );\n-      objectMapper.setSerializationInclusion( JsonSerialize.Inclusion.NON_NULL );\n+      objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL );\n       objectMapper.configure( SerializationConfig.Feature.DEFAULT_VIEW_INCLUSION, false );\n \n       Map<Class<?>, Class<?>> sourceMixins = new HashMap<Class<?>, Class<?>>( );\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestAnnotationJsonSerialize2.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestAnnotationJsonSerialize2.java\n     public void testEmptyInclusion() throws IOException\n     {\n         ObjectMapper defMapper = MAPPER;\n-        ObjectMapper inclMapper = new ObjectMapper().setSerializationInclusion(JsonSerialize.Inclusion.NON_EMPTY);\n+        ObjectMapper inclMapper = new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_EMPTY);\n \n         StringWrapper str = new StringWrapper(\"\");\n         assertEquals(\"{\\\"str\\\":\\\"\\\"}\", defMapper.writeValueAsString(str));\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestViews2.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestViews2.java\n import com.fasterxml.jackson.annotation.*;\n \n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n \n public class TestViews2 extends BaseMapTest\n {\n-\n     /*\n     /************************************************************************ \n     /* Tests\n   {\n     ObjectMapper objectMapper = new ObjectMapper( );\n     objectMapper.configure( SerializationConfig.Feature.FAIL_ON_EMPTY_BEANS, false );\n-    objectMapper.setSerializationInclusion(JsonSerialize.Inclusion.NON_NULL );\n+    objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL );\n     objectMapper.configure( SerializationConfig.Feature.DEFAULT_VIEW_INCLUSION, false );\n //    objectMapper.getSerializationConfig( ).disable( SerializationConfig.Feature.DEFAULT_VIEW_INCLUSION );\n //    objectMapper.getSerializationConfig( ).setSerializationView( viewClass );", "timestamp": 1326608708, "metainfo": ""}