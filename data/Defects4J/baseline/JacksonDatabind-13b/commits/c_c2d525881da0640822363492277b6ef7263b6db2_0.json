{"sha": "c2d525881da0640822363492277b6ef7263b6db2", "log": "Improve error messaging for non-static inner classes that try to declare @JsonCreator constructors", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n                     // [712] secondary: all but one injectable, one un-annotated (un-named)\n                     creators.addDelegatingCreator(ctor, isCreator, properties);\n                 } else { // otherwise, epic fail\n-                    throw new IllegalArgumentException(\"Argument #\"+nonAnnotatedParam.getIndex()\n+                    // 28-Dec-2014, tatu: Let's consider non-static inner class as a special case...\n+                    int ix = nonAnnotatedParam.getIndex();\n+                    if ((ix == 0) && ClassUtil.isNonStaticInnerClass(ctor.getDeclaringClass())) {\n+                        throw new IllegalArgumentException(\"Non-static inner classes like \"\n+                                +ctor.getDeclaringClass().getName()+\" can not use @JsonCreator for constructors\");\n+                    }\n+                    throw new IllegalArgumentException(\"Argument #\"+ix\n                             +\" of constructor \"+ctor+\" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");\n                 }\n             }\n--- a/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil.java\n         return (implClass.getAnnotation(JacksonStdImpl.class) != null);\n     }\n \n-    public final static boolean isBogusClass(Class<?> cls) {\n+    public static boolean isBogusClass(Class<?> cls) {\n         return (cls == Void.class || cls == Void.TYPE\n                 || cls == com.fasterxml.jackson.databind.annotation.NoClass.class);\n+    }\n+\n+    public static boolean isNonStaticInnerClass(Class<?> cls) {\n+        return (cls.getEnclosingClass() != null)\n+                && !Modifier.isStatic(cls.getModifiers());\n     }\n     \n     /*\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestPOJOAsArray.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestPOJOAsArray.java\n             attrs.put(x, y);\n         }\n     }\n+\n+    @JsonFormat(shape=JsonFormat.Shape.ARRAY)\n+    static class CreatorWithIndex {\n+        protected int _a, _b;\n+\n+        @JsonCreator\n+        public CreatorWithIndex(@JsonProperty(index=0, value=\"a\") int a,\n+                @JsonProperty(index=1, value=\"b\") int b) {\n+            this._a = a;\n+            this._b = b;\n+        }\n+    }\n+\n \n     /*\n     /*****************************************************\n         assertEquals(\"foobar\", result.name);\n     }\n \n-    static class CreatorWithIndex {\n-        protected int _a, _b;\n-\n-        @JsonCreator\n-        public CreatorWithIndex(@JsonProperty(index=0, value=\"a\") int a,\n-                @JsonProperty(index=1, value=\"b\") int b) {\n-            this._a = a;\n-            this._b = b;\n-        }\n-    }\n-\n     /*\n     /*****************************************************\n     /* Round-trip tests\n \n     public void testSimpleWithIndex() throws Exception\n     {\n-        CreatorWithIndex value = MAPPER.readValue(aposToQuotes(\"{'b':1,'a':2}\"),\n+        // as POJO:\n+//        CreatorWithIndex value = MAPPER.readValue(aposToQuotes(\"{'b':1,'a':2}\"),\n+        CreatorWithIndex value = MAPPER.readValue(aposToQuotes(\"[2,1]\"),\n                 CreatorWithIndex.class);\n         assertEquals(2, value._a);\n         assertEquals(1, value._b);", "timestamp": 1419828438, "metainfo": ""}