{"sha": "3701cafc3b21da34cf6c7e5268d20d21905549fd", "log": "add bit more serialization benchmarks", "commit": "\n--- /dev/null\n+++ b/src/test/java/perf/ManualWritePerfWithAllTypes.java\n+package perf;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.*;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+\n+/* Test modified from json-parsers-benchmark, to be able to profile\n+ * Jackson implementation.\n+ */\n+public class ManualWritePerfWithAllTypes\n+    extends ObjectWriterBase<ManualWritePerfWithAllTypes.AllTypes, ManualWritePerfWithAllTypes.AllTypes>\n+{\n+    @Override\n+    protected int targetSizeMegs() { return 15; }\n+\n+    public static void main(String[] args) throws Exception\n+    {\n+        if (args.length != 0) {\n+            System.err.println(\"Usage: java ...\");\n+            System.exit(1);\n+        }\n+        ObjectMapper m = new ObjectMapper();\n+        AllTypes input1 = AllTypes.bigObject();\n+        AllTypes input2 = AllTypes.bigObject();\n+        new ManualWritePerfWithAllTypes().test(m,\n+                \"AllTypes/small-1\", input1, AllTypes.class,\n+                \"AllTypes/small-2\", input2, AllTypes.class);\n+    }\n+\n+    @Override\n+    protected long testSer(int REPS, Object value, ObjectWriter writer) throws Exception\n+    {\n+        final NopOutputStream out = new NopOutputStream();\n+        long start = System.nanoTime();\n+        byte[] output = null;\n+\n+        while (--REPS >= 0) {\n+            output = writer.writeValueAsBytes(value);\n+        }\n+        hash = output.length;\n+        long nanos = System.nanoTime() - start;\n+        out.close();\n+        return nanos;\n+    }\n+\n+    // Value type for test\n+    public static class AllTypes\n+    {\n+        enum FooEnum {\n+            FOO, BAR;\n+        }\n+\n+        protected String ignoreMe;\n+\n+        public String ignoreMe2;\n+        public String ignoreMe3;\n+\n+        public int myInt;\n+        public boolean myBoolean;\n+        public short myShort;\n+        public long myLong;\n+        public String string;\n+        public String string2;\n+        public BigDecimal bigDecimal;\n+        public BigInteger bigInteger;\n+        public Date date;\n+\n+        public float myFloat;\n+        public double myDouble;\n+        public byte myByte;\n+\n+        public FooEnum foo;\n+        public FooEnum bar;\n+\n+        public long someDate = new Date().getTime ();\n+\n+        public AllTypes allType;\n+\n+        public List<AllTypes> allTypes = new ArrayList<AllTypes>();\n+\n+        static AllTypes _small() {\n+            AllTypes small = new AllTypes();\n+            small.ignoreMe = \"THIS WILL NOT PASS\";\n+            small.ignoreMe2 = \"THIS WILL NOT PASS EITHER\";\n+            small.ignoreMe3 = \"THIS WILL NOT PASS TOO\";\n+            small.bigDecimal = new BigDecimal(\"1.235678900\");\n+            small.date = new Date();\n+            small.bar = FooEnum.BAR;\n+            small.foo = FooEnum.FOO;\n+            small.string = \"Hi Mom\";\n+            small.myDouble = 1.2345d;\n+            small.myFloat = 1.0f;\n+            small.myShort = (short)1;\n+            small.myByte = (byte)1;\n+            return small;\n+        }\n+\n+        public static AllTypes smallObject() {\n+            AllTypes small = _small();\n+            small.allType = _small();\n+            small.allType.string = \"Hi Dad\";\n+            small.allTypes = Arrays.asList(_small(), _small());\n+            return small;\n+        }\n+\n+        public static AllTypes bigObject() {\n+            AllTypes big = new AllTypes();\n+            final List<AllTypes> list = new ArrayList<AllTypes>();\n+            for (int index = 0; index < 10000; index++) {\n+                AllTypes item = new AllTypes();\n+\n+                item.ignoreMe = \"THIS WILL NOT PASS\";\n+                item.ignoreMe2 = \"THIS WILL NOT PASS EITHER\";\n+                item.ignoreMe3 = \"THIS WILL NOT PASS TOO\";\n+                item.bigDecimal = new BigDecimal(\"1.235678900\");\n+                item.date = new Date ();\n+                item.bar = FooEnum.BAR;\n+                item.foo = FooEnum.FOO;\n+                item.string = \"Hi Mom\" + System.currentTimeMillis();\n+                item.myDouble = 1.2345d;\n+                item.myFloat = 1.0f;\n+                item.myShort = (short)1;\n+                item.myByte = (byte)1;\n+\n+                list.add(item);\n+            }\n+            big.allTypes = list;\n+            return big;\n+        }\n+    }\n+}\n--- a/src/test/java/perf/ManualWritePerfWithRecord.java\n+++ b/src/test/java/perf/ManualWritePerfWithRecord.java\n public class ManualWritePerfWithRecord\n     extends ObjectWriterBase<Record, RecordAsArray>\n {\n+    @Override\n+    protected int targetSizeMegs() { return 10; }\n+\n     public static void main(String[] args) throws Exception\n     {\n         if (args.length != 0) {\n         new ManualWritePerfWithRecord().test(m,\n                 \"JSON-as-Object\", input1, Record.class,\n                 \"JSON-as-Array\", input2, RecordAsArray.class);\n-              \n-        \n     }\n }\n--- a/src/test/java/perf/ManulWritePerfWithUUID.java\n+++ b/src/test/java/perf/ManulWritePerfWithUUID.java\n public class ManulWritePerfWithUUID\n     extends ObjectWriterBase<UUIDFast, UUIDSlow>\n {\n+    @Override\n+    protected int targetSizeMegs() { return 10; }\n     \n     public static void main(String[] args) throws Exception\n     {\n--- a/src/test/java/perf/ObjectWriterBase.java\n+++ b/src/test/java/perf/ObjectWriterBase.java\n abstract class ObjectWriterBase<T1,T2>\n {\n     protected int hash;\n-    \n+\n+    protected abstract int targetSizeMegs();\n+\n     protected void test(ObjectMapper mapper,\n-            String desc1, T1 inputValue1, Class<T1> inputClass1,\n-            String desc2, T2 inputValue2, Class<T2> inputClass2)\n+            String desc1, T1 inputValue1, Class<? extends T1> inputClass1,\n+            String desc2, T2 inputValue2, Class<? extends T2> inputClass2)\n         throws Exception\n     {\n         final int REPS;\n             final byte[] input2 = mapper.writeValueAsBytes(inputValue2);\n             \n             // Let's try to guestimate suitable size, N megs of output\n-            REPS = (int) ((double) (9 * 1000 * 1000) / (double) input1.length);\n+            REPS = (int) ((double) (targetSizeMegs() * 1000 * 1000) / (double) input1.length);\n             System.out.printf(\"Read %d bytes to bind (%d as array); will do %d repetitions\\n\",\n                     input1.length, input2.length, REPS);\n         }\n         int i = 0;\n         int roundsDone = 0;\n         final int TYPES = 2;\n-        final int WARMUP_ROUNDS = 5;\n \n+        // Skip first 5 seconds\n+        long startMeasure = System.currentTimeMillis() + 5000L;\n+        \n         final long[] times = new long[TYPES];\n \n+        System.out.print(\"Warming up\");\n+        \n         while (true) {\n-            @SuppressWarnings(\"resource\")\n-            final NopOutputStream out = new NopOutputStream();\n-            try {  Thread.sleep(100L); } catch (InterruptedException ie) { }\n-            int round = (i++ % TYPES);\n+            final int round = (i % TYPES);\n+            final boolean lf = (++i % TYPES) == 0;\n \n             String msg;\n-            boolean lf = (round == 0);\n \n-            long msecs;\n             ObjectWriter writer;\n             Object value;\n             switch (round) {\n                 value = inputValue2;\n                 break;\n             default:\n-               out.close(); // silly eclipse juno\n                 throw new Error();\n             }\n-            msecs = testSer(REPS, value, writer, out);\n \n-            // skip first 5 rounds to let results stabilize\n-            if (roundsDone >= WARMUP_ROUNDS) {\n-                times[round] += msecs;\n-            }\n-            \n-            System.out.printf(\"Test '%s' [hash: 0x%s] -> %d msecs\\n\", msg, this.hash, msecs);\n-            if (lf) {\n-                ++roundsDone;\n-                if ((roundsDone % 3) == 0 && roundsDone > WARMUP_ROUNDS) {\n-                    double den = (double) (roundsDone - WARMUP_ROUNDS);\n-                    System.out.printf(\"Averages after %d rounds (pre / no): %.1f / %.1f msecs\\n\",\n-                            (int) den,\n-                            times[0] / den, times[1] / den);\n-                            \n+            long nanos = testSer(REPS, value, writer);\n+            long msecs = nanos >> 20; // close enough for comparisons\n+\n+            // skip first N seconds to let results stabilize\n+            if (startMeasure > 0L) {\n+                if ((round != 0) || (System.currentTimeMillis() < startMeasure)) {\n+                    System.out.print(\".\");\n+                    continue;\n                 }\n+                startMeasure = 0L;\n+                System.out.println();\n+                System.out.println(\"Starting measurements...\");\n+                Thread.sleep(250L);\n                 System.out.println();\n             }\n+\n+            times[round] += msecs;\n+\n             if ((i % 17) == 0) {\n                 System.out.println(\"[GC]\");\n                 Thread.sleep(100L);\n                 System.gc();\n                 Thread.sleep(100L);\n             }\n+            \n+            System.out.printf(\"Test '%s' [hash: 0x%s] -> %d msecs\\n\", msg, this.hash, msecs);\n+            Thread.sleep(50L);\n+            if (!lf) {\n+                continue;\n+            }\n+            \n+            if ((++roundsDone % 3) == 0) {\n+                double den = (double) roundsDone;\n+                System.out.printf(\"Averages after %d rounds (%s/%s): %.1f / %.1f msecs\\n\",\n+                        roundsDone, desc1, desc2,\n+                        times[0] / den, times[1] / den);\n+            }\n+            System.out.println();\n         }\n     }\n \n-    protected final long testSer(int REPS, Object value, ObjectWriter writer, NopOutputStream out) throws Exception\n+    protected long testSer(int REPS, Object value, ObjectWriter writer) throws Exception\n     {\n-        long start = System.currentTimeMillis();\n+        final NopOutputStream out = new NopOutputStream();\n+        long start = System.nanoTime();\n         while (--REPS >= 0) {\n             writer.writeValue(out, value);\n         }\n         hash = out.size();\n-        return System.currentTimeMillis() - start;\n+        long nanos = System.nanoTime() - start;\n+        out.close();\n+        return nanos;\n     }\n }", "timestamp": 1398790347, "metainfo": ""}