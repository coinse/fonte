{"sha": "bfc98f2c087810bc8a57c26aa02efcc3ddc9cef4", "log": "Added serialization support for custom ids (property-based)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java\n \n import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.io.SerializedString;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;\n import com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer;\n         oid.id = id = oid.generator.generateId(bean);\n         // If not, need to inject the id:\n         jgen.writeStartObject();\n-        jgen.writeFieldName(w.propertyName);\n-        w.serializer.serialize(id, jgen, provider);\n+        SerializedString name = w.propertyName;\n+        if (name != null) {\n+            jgen.writeFieldName(name);\n+            w.serializer.serialize(id, jgen, provider);\n+        }\n         if (_propertyFilterId != null) {\n             serializeFieldsFiltered(bean, jgen, provider);\n         } else {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n         if (implClass == ObjectIdGenerators.PropertyGenerator.class) { // most special one, needs extra work\n             String propName = oidInfo.getPropertyName();\n             BeanPropertyWriter idProp = null;\n-            \n-            for (BeanPropertyWriter prop : props) {\n+\n+            for (int i = 0, len = props.size() ;; ++i) {\n+                if (i == len) {\n+                    throw new IllegalArgumentException(\"Invalid Object Id definition for \"+beanDesc.getBeanClass().getName()\n+                            +\": can not find property with name '\"+propName+\"'\");\n+                }\n+                BeanPropertyWriter prop = props.get(i);\n                 if (propName.equals(prop.getName())) {\n                     idProp = prop;\n+                    /* Let's force it to be the first property to output\n+                     * (although it may still get rearranged etc)\n+                     */\n+                    if (i > 0) {\n+                        props.remove(i);\n+                        props.add(0, idProp);\n+                    }\n                     break;\n                 }\n             }\n-            if (idProp == null) {\n-                throw new IllegalArgumentException(\"Invalid Object Id definition for \"+beanDesc.getBeanClass().getName()\n-                        +\": can not find property with name '\"+propName+\"'\");\n-            }\n             idType = idProp.getType();\n             gen = new PropertyBasedObjectIdGenerator(oidInfo, idProp);\n-        } else { // other types need to be simpler\n-            JavaType type = prov.constructType(implClass);\n-            // Could require type to be passed explicitly, but we should be able to find it too:\n-            idType = prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n-            gen = prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), implClass);\n-        }\n+            // one more thing: must ensure that ObjectIdWriter does not actually write the value:\n+            return ObjectIdWriter.construct(idType, null, gen);\n+            \n+        } \n+        // other types are simpler\n+        JavaType type = prov.constructType(implClass);\n+        // Could require type to be passed explicitly, but we should be able to find it too:\n+        idType = prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n+        gen = prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), implClass);\n         return ObjectIdWriter.construct(idType, oidInfo.getPropertyName(), gen);\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/ObjectIdWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/ObjectIdWriter.java\n {\n     public final JavaType idType;\n \n+    /**\n+     * Name of id property to write, if not null: if null, should\n+     * only write references, but id property is handled by some\n+     * other entity.\n+     */\n     public final SerializedString propertyName;\n     \n     /**\n     /* Life-cycle\n     /**********************************************************\n      */\n-    \n+\n     @SuppressWarnings(\"unchecked\")\n     protected ObjectIdWriter(JavaType t, SerializedString propName, ObjectIdGenerator<?> gen,\n             JsonSerializer<?> ser)\n     public static ObjectIdWriter construct(JavaType idType, String propName,\n             ObjectIdGenerator<?> generator)\n     {\n-        return new ObjectIdWriter(idType, new SerializedString(propName), generator, null);\n+        SerializedString serName = (propName == null) ? null : new SerializedString(propName);\n+        return new ObjectIdWriter(idType, serName, generator, null);\n     }\n \n     public ObjectIdWriter withSerializer(JsonSerializer<?> ser) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.databind.ser.*;\n import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;\n+import com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator;\n import com.fasterxml.jackson.databind.util.NameTransformer;\n \n /**\n                 JavaType type = provider.constructType(implClass);\n                 JavaType idType = provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                 // Property-based generator is trickier\n-                if (implClass == ObjectIdGenerators.PropertyGenerator.class) {\n-                    // !!! TODO\n-                    gen = null;\n-                    if (true) throw new IllegalStateException(\"Not yet implemented!\");\n+                if (implClass == ObjectIdGenerators.PropertyGenerator.class) { // most special one, needs extra work\n+                    String propName = objectIdInfo.getPropertyName();\n+                    BeanPropertyWriter idProp = null;\n+\n+                    for (int i = 0, len = _props.length ;; ++i) {\n+                        if (i == len) {\n+                            throw new IllegalArgumentException(\"Invalid Object Id definition for \"+_handledType.getName()\n+                                    +\": can not find property with name '\"+propName+\"'\");\n+                        }\n+                        BeanPropertyWriter prop = _props[i];\n+                        if (propName.equals(prop.getName())) {\n+                            idProp = prop;\n+                            /* Let's force it to be the first property to output\n+                             * (although it may still get rearranged etc)\n+                             */\n+                            if (i > 0) { // note: must shuffle both regular properties and filtered\n+                                System.arraycopy(_props, 0, _props, 1, i);\n+                                _props[0] = idProp;\n+                                if (_filteredProps != null) {\n+                                    BeanPropertyWriter fp = _filteredProps[i];\n+                                    System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n+                                    _filteredProps[0] = fp;\n+                                }\n+                            }\n+                            break;\n+                        }\n+                    }\n+                    idType = idProp.getType();\n+                    gen = new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n+                    oiw = ObjectIdWriter.construct(idType, null, gen);\n                 } else { // other types need to be simpler\n                     gen = provider.objectIdGeneratorInstance(accessor, implClass);\n-                }\n-                oiw = ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);\n-\n+                    oiw = ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);\n+                }\n             }\n         }\n         // either way, need to resolve serializer:\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdSerialization.java\n     @JsonIdentityInfo(generator=ObjectIdGenerators.PropertyGenerator.class, property=\"customId\")\n     static class IdentifiableWithProp\n     {\n+        public int value;\n+\n         // Property that contains Object Id to use\n         public int customId;\n-        \n-        public int value;\n \n         public IdentifiableWithProp next;\n         \n             this.value = value;\n         }\n     }\n+\n+    // For property reference, need another class:\n     \n     static class IdWrapper\n     {\n         public ValueNode(int v) { value = v; }\n     }\n \n-    @JsonIdentityInfo(generator=ObjectIdGenerators.UUIDGenerator.class, property=\"#\")\n-    static class UUIDNode\n+    // Similarly for property-ref via property:\n+    \n+    protected static class IdWrapperCustom\n+    {\n+        @JsonIdentityInfo(generator=ObjectIdGenerators.PropertyGenerator.class, property=\"id\")\n+        public ValueNodeCustom node;\n+\n+        public IdWrapperCustom() { }\n+        public IdWrapperCustom(int id, int value) {\n+            node = new ValueNodeCustom(id, value);\n+        }\n+    }\n+\n+    protected static class ValueNodeCustom {\n+        public int value;\n+        private int id;\n+        public IdWrapperCustom next;\n+\n+        public int getId() { return id; }\n+        \n+        public ValueNodeCustom() { this(0, 0); }\n+        public ValueNodeCustom(int id, int value) {\n+            this.id = id;\n+            this.value = value;\n+        }\n+    }\n+\n+    // // Let's also have one 'broken' test\n+\n+    // no \"id\" property\n+    @JsonIdentityInfo(generator=ObjectIdGenerators.PropertyGenerator.class, property=\"id\")\n+    static class Broken\n     {\n         public int value;\n-        public UUIDNode parent;\n-        public UUIDNode first;\n-        public UUIDNode second;\n-\n-        public UUIDNode() { this(0); }\n-        public UUIDNode(int v) { value = v; }\n+        public int customId;\n     }\n     \n     /*\n     /*****************************************************\n-    /* Unit tests\n+    /* Unit tests, external id serialization\n     /*****************************************************\n      */\n \n         json = mapper.writeValueAsString(src);\n         assertEquals(EXP_SIMPLE_INT_CLASS, json);\n     }\n-\n-    private final static String EXP_SIMPLE_PROP = \"{\\\"customId\\\":123,\\\"value\\\":-19,\\\"next\\\":123}\";\n-\n-    public void testSimpleFromPropertyOnClass() throws Exception\n-    {\n-        IdentifiableWithProp src = new IdentifiableWithProp(123, -19);\n-        src.next = src;\n-        \n-        // First, serialize:\n-        String json = mapper.writeValueAsString(src);\n-        assertEquals(EXP_SIMPLE_PROP, json);\n-\n-        // and ensure that state is cleared in-between as well:\n-        json = mapper.writeValueAsString(src);\n-        assertEquals(EXP_SIMPLE_PROP, json);\n-    }\n     \n     // Bit more complex, due to extra wrapping etc:\n     private final static String EXP_SIMPLE_INT_PROP = \"{\\\"node\\\":{\\\"@id\\\":1,\\\"value\\\":7,\\\"next\\\":{\\\"node\\\":1}}}\";\n         json = mapper.writeValueAsString(src);\n         assertEquals(EXP_SIMPLE_INT_PROP, json);\n     }\n+\n+    /*\n+    /*****************************************************\n+    /* Unit tests, custom (property) id serialization\n+    /*****************************************************\n+     */\n+\n+    private final static String EXP_CUSTOM_PROP = \"{\\\"customId\\\":123,\\\"value\\\":-19,\\\"next\\\":123}\";\n+    // Test for verifying that custom\n+    public void testCustomPropertyForClass() throws Exception\n+    {\n+        IdentifiableWithProp src = new IdentifiableWithProp(123, -19);\n+        src.next = src;\n+        \n+        // First, serialize:\n+        String json = mapper.writeValueAsString(src);\n+        assertEquals(EXP_CUSTOM_PROP, json);\n+\n+        // and ensure that state is cleared in-between as well:\n+        json = mapper.writeValueAsString(src);\n+        assertEquals(EXP_CUSTOM_PROP, json);\n+    }\n+\n+    private final static String EXP_CUSTOM_PROP_VIA_REF = \"{\\\"node\\\":{\\\"id\\\":123,\\\"value\\\":7,\\\"next\\\":{\\\"node\\\":123}}}\";\n+    // Test for verifying that custom\n+    public void testCustomPropertyViaProperty() throws Exception\n+    {\n+        IdWrapperCustom src = new IdWrapperCustom(123, 7);\n+        src.node.next = src;\n+        \n+        // First, serialize:\n+        String json = mapper.writeValueAsString(src);\n+        assertEquals(EXP_CUSTOM_PROP_VIA_REF, json);\n+        // and second time too, for a good measure\n+        json = mapper.writeValueAsString(src);\n+        assertEquals(EXP_CUSTOM_PROP_VIA_REF, json);\n+    }\n+\n+    /*\n+    /*****************************************************\n+    /* Unit tests, error handling\n+    /*****************************************************\n+     */\n+\n+    public void testInvalidProp() throws Exception\n+    {\n+        try {\n+            mapper.writeValueAsString(new Broken());\n+            fail(\"Should have thrown an exception\");\n+        } catch (JsonMappingException e) {\n+            verifyException(e, \"can not find property with name 'id'\");\n+        }\n+    }\n }", "timestamp": 1328855776, "metainfo": ""}