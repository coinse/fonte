{"sha": "b478c792e0e68039224109129350dd71f768ddc1", "log": "Still tweaking bean property handling for deser", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n             String propName = p.getCurrentName();\n             p.nextToken();\n-            try {\n-                if (_beanProperties.findDeserializeAndSet(p, ctxt, bean, propName)) {\n-                    continue;\n-                }\n-            } catch (Exception e) {\n-                wrapAndThrow(e, bean, propName, ctxt);\n-            }\n-            handleUnknownVanilla(p, ctxt, bean, propName);\n+            if (!_beanProperties.findDeserializeAndSet(p, ctxt, bean, propName)) {\n+                handleUnknownVanilla(p, ctxt, bean, propName);\n+            }\n         }\n         return bean;\n     }\n         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n             String propName = p.getCurrentName();\n             p.nextToken();\n-            try {\n-                if (_beanProperties.findDeserializeAndSet(p, ctxt, bean, propName)) {\n-                    continue;\n-                }\n-            } catch (Exception e) {\n-                wrapAndThrow(e, bean, propName, ctxt);\n-            }\n-            handleUnknownVanilla(p, ctxt, bean, propName);\n+            if (!_beanProperties.findDeserializeAndSet(p, ctxt, bean, propName)) {\n+                handleUnknownVanilla(p, ctxt, bean, propName);\n+            }\n         }\n         return bean;\n     }\n         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n             String propName = p.getCurrentName();\n             p.nextToken();\n-            try {\n-                if (_beanProperties.findDeserializeAndSet(p, ctxt, bean, propName)) {\n-                    continue;\n-                }\n-            } catch (Exception e) {\n-                wrapAndThrow(e, bean, propName, ctxt);\n-            }\n-            handleUnknownVanilla(p, ctxt, bean, propName);\n+            if (!_beanProperties.findDeserializeAndSet(p, ctxt, bean, propName)) {\n+                handleUnknownVanilla(p, ctxt, bean, propName);\n+            }\n         }\n         return bean;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n      * that should be consumed to produce the value (the only value for\n      * scalars, multiple for Objects and Arrays).\n      */\n-    public abstract void deserializeAndSet(JsonParser jp,\n-    \t\tDeserializationContext ctxt, Object instance)\n-        throws IOException, JsonProcessingException;\n+    public abstract void deserializeAndSet(JsonParser p,\n+    \t\tDeserializationContext ctxt, Object instance) throws IOException;\n \n \t/**\n \t * Alternative to {@link #deserializeAndSet} that returns\n \t *\n \t * @since 2.0\n \t */\n-    public abstract Object deserializeSetAndReturn(JsonParser jp,\n-    \t\tDeserializationContext ctxt, Object instance)\n-        throws IOException, JsonProcessingException;\n+    public abstract Object deserializeSetAndReturn(JsonParser p,\n+    \t\tDeserializationContext ctxt, Object instance) throws IOException;\n \n     /**\n      * Method called to assign given value to this property, on\n      * implementations, creator-backed properties for example do not\n      * support this method.\n      */\n-    public abstract void set(Object instance, Object value)\n-        throws IOException;\n+    public abstract void set(Object instance, Object value) throws IOException;\n \n     /**\n      * Method called to assign given value to this property, on\n      * Note: this is an optional operation, not supported by all\n      * implementations, creator-backed properties for example do not\n      * support this method.\n-     * \n-     * @since 2.0\n-     */\n-    public abstract Object setAndReturn(Object instance, Object value)\n-        throws IOException;\n+     */\n+    public abstract Object setAndReturn(Object instance, Object value) throws IOException;\n     \n     /**\n      * This method is needed by some specialized bean deserializers,\n      * this method should also not be called directly unless you really know\n      * what you are doing (and probably not even then).\n      */\n-    public final Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n-    {\n-        JsonToken t = jp.getCurrentToken();\n+    public final Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n+    {\n+        JsonToken t = p.getCurrentToken();\n         \n         if (t == JsonToken.VALUE_NULL) {\n             return (_nullProvider == null) ? null : _nullProvider.nullValue(ctxt);\n         }\n         if (_valueTypeDeserializer != null) {\n-            return _valueDeserializer.deserializeWithType(jp, ctxt, _valueTypeDeserializer);\n-        }\n-        return _valueDeserializer.deserialize(jp, ctxt);\n+            return _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer);\n+        }\n+        return _valueDeserializer.deserialize(p, ctxt);\n     }\n     \n     /*\n      * Method that takes in exception of any type, and casts or wraps it\n      * to an IOException or its subclass.\n      */\n-    protected void _throwAsIOE(Exception e, Object value)\n-        throws IOException\n+    protected void _throwAsIOE(Exception e, Object value) throws IOException\n     {\n         if (e instanceof IllegalArgumentException) {\n             String actType = (value == null) ? \"[NULL]\" : value.getClass().getName();\n         _throwAsIOE(e);\n     }\n \n-    protected IOException _throwAsIOE(Exception e)\n-        throws IOException\n+    protected IOException _throwAsIOE(Exception e) throws IOException\n     {\n         if (e instanceof IOException) {\n             throw (IOException) e;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java\n package com.fasterxml.jackson.databind.deser.impl;\n \n import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n import java.util.*;\n \n import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n import com.fasterxml.jackson.databind.util.NameTransformer;\n \n     // Confining this case insensitivity to this function (and the find method) in case we want to\n     // apply a particular locale to the lower case function.  For now, using the default.\n     private String getPropertyName(SettableBeanProperty prop) {\n-    \treturn _caseInsensitive ? prop.getName().toLowerCase() : prop.getName();\n+        return _caseInsensitive ? prop.getName().toLowerCase() : prop.getName();\n     }\n \n     /*\n     }\n \n     /**\n+     * Convenience method that tries to find property with given name, and\n+     * if it is found, call {@link SettableBeanProperty#deserializeAndSet}\n+     * on it, and return true; or, if not found, return false.\n+     * Note, too, that if deserialization is attempted, possible exceptions\n+     * are wrapped if and as necessary, so caller need not handle those.\n+     * \n      * @since 2.5\n      */\n     public boolean findDeserializeAndSet(JsonParser p, DeserializationContext ctxt,\n         }\n         // Primarily we do just identity comparison as keys should be interned\n         if (bucket.key == key) {\n-            bucket.value.deserializeAndSet(p, ctxt, bean);\n+            try {\n+                bucket.value.deserializeAndSet(p, ctxt, bean);\n+            } catch (Exception e) {\n+                wrapAndThrow(e, bean, key, ctxt);\n+            }\n             return true;\n-        }\n+        } \n         return _findDeserializeAndSet2(p, ctxt, bean, key, index);\n     }\n-\n+    \n     private final boolean _findDeserializeAndSet2(JsonParser p, DeserializationContext ctxt,\n             Object bean, String key, int index) throws IOException\n     {\n+        SettableBeanProperty prop = null;\n         Bucket bucket = _buckets[index];\n-        while ((bucket = bucket.next) != null) {\n+        while (true) {\n+            if ((bucket = bucket.next) == null) {\n+                prop = _findWithEquals(key, index);\n+                if (prop == null) {\n+                    return false;\n+                }\n+                break;\n+            }\n             if (bucket.key == key) {\n-                bucket.value.deserializeAndSet(p, ctxt, bean);\n-                return true;\n-            }\n-        }\n-        SettableBeanProperty prop = _findWithEquals(key, index);\n-        if (prop == null) {\n-            return false;\n-        }\n-        prop.deserializeAndSet(p, ctxt, bean);\n+                prop = bucket.value;\n+                break;\n+            }\n+        }\n+        try {\n+            prop.deserializeAndSet(p, ctxt, bean);\n+        } catch (Exception e) {\n+            wrapAndThrow(e, bean, key, ctxt);\n+        }\n         return true;\n     }\n \n             bucket = bucket.next;\n         }\n         return null;\n+    }\n+\n+    /**\n+     * @since 2.5\n+     */\n+    protected void wrapAndThrow(Throwable t, Object bean, String fieldName, DeserializationContext ctxt)\n+        throws IOException\n+    {\n+        // inlined 'throwOrReturnThrowable'\n+        while (t instanceof InvocationTargetException && t.getCause() != null) {\n+            t = t.getCause();\n+        }\n+        // Errors to be passed as is\n+        if (t instanceof Error) {\n+            throw (Error) t;\n+        }\n+        // StackOverflowErrors are tricky ones; need to be careful...\n+        boolean wrap = (ctxt == null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);\n+        // Ditto for IOExceptions; except we may want to wrap JSON exceptions\n+        if (t instanceof IOException) {\n+            if (!wrap || !(t instanceof JsonProcessingException)) {\n+                throw (IOException) t;\n+            }\n+        } else if (!wrap) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions\n+            if (t instanceof RuntimeException) {\n+                throw (RuntimeException) t;\n+            }\n+        }\n+        throw JsonMappingException.wrapWithPath(t, bean, fieldName);\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/FieldProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/FieldProperty.java\n import java.lang.reflect.Field;\n \n import com.fasterxml.jackson.core.JsonParser;\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.DeserializationContext;\n-import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.JsonDeserializer;\n-import com.fasterxml.jackson.databind.PropertyName;\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n import com.fasterxml.jackson.databind.introspect.AnnotatedField;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n \n     @Override\n     public void deserializeAndSet(JsonParser jp,\n-    \t\tDeserializationContext ctxt, Object instance)\n-        throws IOException, JsonProcessingException\n+    \t\tDeserializationContext ctxt, Object instance) throws IOException\n     {\n-        set(instance, deserialize(jp, ctxt));\n+        \n+        Object value = deserialize(jp, ctxt);\n+        try {\n+            _field.set(instance, value);\n+        } catch (Exception e) {\n+            _throwAsIOE(e, value);\n+        }\n     }\n \n     @Override\n     public Object deserializeSetAndReturn(JsonParser jp,\n-    \t\tDeserializationContext ctxt, Object instance)\n-        throws IOException, JsonProcessingException\n+    \t\tDeserializationContext ctxt, Object instance) throws IOException\n     {\n-        return setAndReturn(instance, deserialize(jp, ctxt));\n+        Object value = deserialize(jp, ctxt);\n+        try {\n+            _field.set(instance, value);\n+        } catch (Exception e) {\n+            _throwAsIOE(e, value);\n+        }\n+        return instance;\n     }\n     \n     @Override\n-    public final void set(Object instance, Object value)\n-        throws IOException\n+    public final void set(Object instance, Object value) throws IOException\n     {\n         try {\n             _field.set(instance, value);\n     }\n \n     @Override\n-    public Object setAndReturn(Object instance, Object value)\n-        throws IOException\n+    public Object setAndReturn(Object instance, Object value) throws IOException\n     {\n         try {\n             _field.set(instance, value);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/MethodProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/MethodProperty.java\n import java.lang.reflect.Method;\n \n import com.fasterxml.jackson.core.JsonParser;\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.DeserializationContext;\n-import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.JsonDeserializer;\n-import com.fasterxml.jackson.databind.PropertyName;\n+\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n \n     @Override\n     public void deserializeAndSet(JsonParser jp, DeserializationContext ctxt,\n-            Object instance)\n-        throws IOException, JsonProcessingException\n+            Object instance) throws IOException\n     {\n-        set(instance, deserialize(jp, ctxt));\n+        Object value = deserialize(jp, ctxt);\n+        try {\n+            _setter.invoke(instance, value);\n+        } catch (Exception e) {\n+            _throwAsIOE(e, value);\n+        }\n     }\n \n     @Override\n     public Object deserializeSetAndReturn(JsonParser jp,\n     \t\tDeserializationContext ctxt, Object instance) throws IOException\n     {\n-        return setAndReturn(instance, deserialize(jp, ctxt));\n+        Object value = deserialize(jp, ctxt);\n+        try {\n+            Object result = _setter.invoke(instance, value);\n+            return (result == null) ? instance : result;\n+        } catch (Exception e) {\n+            _throwAsIOE(e, value);\n+            return null;\n+        }\n     }\n     \n     @Override", "timestamp": 1418512854, "metainfo": ""}