{"sha": "6f4306bd8375f6761e27bd619a310c840e212dbc", "log": "Fix #234", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DatabindContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DatabindContext.java\n      * type parameter (if any)\n      */\n     public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass) {\n+        // simple optimization to avoid costly introspection if type-erased type does NOT differ\n+        if (baseType.getRawClass() == subclass) {\n+            return baseType;\n+        }\n         return getConfig().constructSpecializedType(baseType, subclass);\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n         return new CollectionDeserializer(_collectionType,\n                 (JsonDeserializer<Object>) vd, vtd,\n                 _valueInstantiator, (JsonDeserializer<Object>) dd);\n-                \n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n                 if (cc == prevValueClass) {\n                     currSerializer = prevValueSerializer;\n                 } else {\n-                    currSerializer = provider.findValueSerializer(cc, _property);\n+                    if (_valueType.hasGenericTypes()) {\n+                        currSerializer = provider.findValueSerializer(provider.constructSpecializedType(_valueType, cc), _property);\n+                    } else {\n+                        currSerializer = provider.findValueSerializer(cc, _property);\n+                    }\n                     prevValueSerializer = currSerializer;\n                     prevValueClass = cc;\n                 }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdContainerSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdContainerSerializers.java\n public class StdContainerSerializers\n {\n     protected StdContainerSerializers() { }\n-    \n+\n     /**\n      * @since 2.1\n      */\n     {\n         return new IndexedListSerializer(elemType, staticTyping, vts, null, valueSerializer);\n     }\n-    \n+\n     /**\n      * @since 2.1\n      */\n--- a/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java\n      */\n     public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)\n     {\n+        // simple optimization to avoid costly introspection if type-erased type does NOT differ\n+        if (baseType.getRawClass() == subclass) {\n+            return baseType;\n+        }\n         // Currently only SimpleType instances can become something else\n         if (baseType instanceof SimpleType) {\n             // and only if subclass is an array, Collection or Map\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForMaps.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForMaps.java\n import java.util.*;\n \n import com.fasterxml.jackson.annotation.*;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import com.fasterxml.jackson.databind.jsontype.NamedType;\n public class TestDefaultForMaps \n     extends BaseMapTest\n {\n-    /*\n-    /**********************************************************\n-    /* Helper types\n-    /**********************************************************\n-     */\n-\n     static class MapKey {\n         public String key;\n \n             return new MapKey(key);\n         }\n     }\n-    \n+\n     static class MapHolder\n     {\n         @JsonDeserialize(keyAs=MapKey.class, keyUsing=MapKeyDeserializer.class)\n         public Map<MapKey,List<Object>> map;\n     }\n \n+    // // For #234\n+    \n+    static class ItemList {\n+        public String value;\n+        public List<ItemList> childItems = new LinkedList<ItemList>();\n+\n+        public void addChildItem(ItemList l) { childItems.add(l); }\n+    }\n+\n+    static class ItemMap\n+    {\n+        public String value;\n+\n+        public Map<String, List<ItemMap>> childItems = new HashMap<String, List<ItemMap>>();\n+\n+        public void addChildItem(String key, ItemMap childItem) {\n+          List<ItemMap> items;\n+          if (childItems.containsKey(key)) {\n+              items = childItems.get(key);\n+          } else {\n+              items = new ArrayList<ItemMap>();\n+          }\n+          items.add(childItem);\n+          childItems.put(key, items);\n+        }\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Unit tests\n         return TypeNameIdResolver.construct(mapper.getDeserializationConfig(),\n                 TypeFactory.defaultInstance().constructType(Object.class), subtypes, forSerialization, !forSerialization);\n     }\n+\n+    // // For #234:\n+    \n+    public void testList() throws Exception\n+    {\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE, JsonTypeInfo.As.PROPERTY);\n+        ItemList child = new ItemList();\n+        child.value = \"I am child\";\n+\n+        ItemList parent = new ItemList();\n+        parent.value = \"I am parent\";\n+        parent.addChildItem(child);\n+        String json = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(parent);\n+\n+        Object o = mapper.readValue(json, ItemList.class);\n+        assertNotNull(o);\n+    }\n+\n+    public void testMap() throws Exception\n+    {\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE, JsonTypeInfo.As.PROPERTY);\n+        ItemMap child = new ItemMap();\n+        child.value = \"I am child\";\n+\n+        ItemMap parent = new ItemMap();\n+        parent.value = \"I am parent\";\n+        parent.addChildItem(\"child\", child);\n+\n+        String json = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(parent);\n+        Object o = mapper.readValue(json, ItemMap.class);\n+        assertNotNull(o);\n+    }\n+\n }", "timestamp": 1376364337, "metainfo": ""}