{"sha": "14d9761c9a8e36ee48caf0d44a9fec7055a233d9", "log": "bit more tweaking of null serialization", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n      */\n     protected DateFormat _dateFormat;\n \n+    /**\n+     * Flag set to indicate that we are using vanilla null value serialization\n+     * \n+     * @since 2.3\n+     */\n+    protected final boolean _stdNullValueSerializer;\n+    \n     /*\n     /**********************************************************\n     /* Life-cycle\n         _rootNames = new RootNameLookup();\n \n         _serializationView = null;\n+\n+        // not relevant for blueprint instance, could set either way:\n+        _stdNullValueSerializer = true;\n     }\n \n     /**\n         _unknownTypeSerializer = src._unknownTypeSerializer;\n         _keySerializer = src._keySerializer;\n         _nullValueSerializer = src._nullValueSerializer;\n+        _stdNullValueSerializer = (_nullValueSerializer == DEFAULT_NULL_KEY_SERIALIZER);\n         _nullKeySerializer = src._nullKeySerializer;\n         _rootNames = src._rootNames;\n \n     /**\n      * Method that can be used to specify serializer that will be\n      * used to write JSON values matching Java null values\n-     * instead of default one (which simply writes JSON null)\n+     * instead of default one (which simply writes JSON null).\n+     *<p>\n+     * Note that you can get finer control over serializer to use by overriding\n+     * {@link #findNullValueSerializer}, which gets called once per each\n+     * property.\n      */\n     public void setNullValueSerializer(JsonSerializer<Object> nvs)\n     {\n \n     /**\n      * Method called to get the serializer to use for serializing null\n-     * property values.\n+     * values for specified property.\n      *<p>\n      * Default implementation simply calls {@link #getDefaultNullValueSerializer()};\n      * can be overridden to add custom null serialization for properties\n-     * of certain type or name.\n+     * of certain type or name. This gives method full granularity to basically\n+     * override null handling for any specific property or class of properties.\n      * \n      * @since 2.0\n      */\n         throws IOException, JsonProcessingException\n     {\n         if (value == null) {\n-            _nullValueSerializer.serialize(null, jgen, this);\n+            if (_stdNullValueSerializer) { // minor perf optimization\n+                jgen.writeNull();\n+            } else {\n+                _nullValueSerializer.serialize(null, jgen, this);\n+            }\n         } else {\n             Class<?> cls = value.getClass();\n             findTypedValueSerializer(cls, true, null).serialize(value, jgen, this);\n             /* Note: can't easily check for suppression at this point\n              * any more; caller must check it.\n              */\n-            _nullValueSerializer.serialize(null, jgen, this);\n+            if (_stdNullValueSerializer) { // minor perf optimization\n+                jgen.writeNull();\n+            } else {\n+                _nullValueSerializer.serialize(null, jgen, this);\n+            }\n         } else {\n             Class<?> cls = value.getClass();\n             findTypedValueSerializer(cls, true, null).serialize(value, jgen, this);\n     public final void defaultSerializeNull(JsonGenerator jgen)\n         throws IOException, JsonProcessingException\n     {\n-        _nullValueSerializer.serialize(null, jgen, this);\n+        if (_stdNullValueSerializer) { // minor perf optimization\n+            jgen.writeNull();\n+        } else {\n+            _nullValueSerializer.serialize(null, jgen, this);\n+        }\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/node/POJONode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/POJONode.java\n         throws IOException, JsonProcessingException\n     {\n         if (_value == null) {\n-            jg.writeNull();\n+            provider.defaultSerializeNull(jg);\n         } else {\n             jg.writeObject(_value);\n         }", "timestamp": 1375941395, "metainfo": ""}