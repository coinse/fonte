{"sha": "5dba16a51c5c7081687dc8f60d5dff4ebd26ee76", "log": "Minor cleanup, ensuring SettableAnyProperty is properly JDK serializable", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n \n \n     /**\n-     * @deprecated Since 2.5: replaced by a fluent form of the method; {@link #setMixIns(Class, Class)}.\n+     * @deprecated Since 2.5: replaced by a fluent form of the method; {@link #setMixIns}.\n      */\n     @Deprecated\n     public void setMixInAnnotations(Map<Class<?>, Class<?>> sourceMixins) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n      * to use have been successfully resolved.\n      */\n     final protected BeanPropertyMap _beanProperties;\n-    \n+\n     /**\n      * List of {@link ValueInjector}s, if any injectable values are\n      * expected by the bean; otherwise null.\n      * and fields, but not ones passed through constructor parameters.\n      */\n     final protected ValueInjector[] _injectables;\n-    \n+\n     /**\n      * Fallback setter used for handling any properties that are not\n      * mapped to regular setters. If setter is not null, it will be\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableAnyProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableAnyProperty.java\n package com.fasterxml.jackson.databind.deser;\n \n import java.io.IOException;\n-import java.lang.reflect.*;\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n      * information. Retained to allow contextualization of any properties.\n      */\n     protected final BeanProperty _property;\n-    \n-    /**\n-     * Physical JDK object used for assigning properties.\n-     *<p>\n-     * NOTE: must be marked transient since it is not serializable,\n-     * in case these are to be serialized\n-     */\n-    protected final transient Method _setter;\n+\n+    /**\n+     * Annotated variant is needed for JDK serialization only\n+     */\n+    final protected AnnotatedMethod _setter;\n \n     protected final JavaType _type;\n \n     public SettableAnyProperty(BeanProperty property, AnnotatedMethod setter, JavaType type,\n             JsonDeserializer<Object> valueDeser, TypeDeserializer typeDeser)\n     {\n-        this(property, setter.getAnnotated(), type, valueDeser, typeDeser);\n-    }\n-\n-    public SettableAnyProperty(BeanProperty property, Method rawSetter, JavaType type,\n-            JsonDeserializer<Object> valueDeser, TypeDeserializer typeDeser)\n-    {\n         _property = property;\n+        _setter = setter;\n         _type = type;\n-        _setter = rawSetter;\n         _valueDeserializer = valueDeser;\n         _valueTypeDeserializer = typeDeser;\n     }\n         return new SettableAnyProperty(_property, _setter, _type,\n                 deser, _valueTypeDeserializer);\n     }\n+\n+    /**\n+     * Constructor used for JDK Serialization when reading persisted object\n+     */\n+    protected SettableAnyProperty(SettableAnyProperty src)\n+    {\n+        _property = src._property;\n+        _setter = src._setter;\n+        _type = src._type;\n+        _valueDeserializer = src._valueDeserializer;\n+        _valueTypeDeserializer = src._valueTypeDeserializer;\n+    }\n     \n     /*\n     /**********************************************************\n     /**********************************************************\n      */\n \n-    // TODO (2.3): handle restoring of reference to any-setter method\n-    \n-/*\n+    /**\n+     * Need to define this to verify that we retain actual Method reference\n+     */\n     Object readResolve() {\n-        return new SettableAnyProperty(this, _annotated.getAnnotated());\n-    }\n-    */\n+        // sanity check...\n+        if (_setter == null || _setter.getAnnotated() == null) {\n+            throw new IllegalArgumentException(\"Missing method (broken JDK (de)serialization?)\");\n+        }\n+        return this;\n+    }\n     \n     /*\n     /**********************************************************\n     public void set(Object instance, String propName, Object value) throws IOException\n     {\n         try {\n-            _setter.invoke(instance, propName, value);\n+            // note: can not use 'setValue()' due to taking 2 args\n+            _setter.getAnnotated().invoke(instance, propName, value);\n         } catch (Exception e) {\n             _throwAsIOE(e, propName, value);\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java\n     public Method getMember() { return _method; }\n \n     @Override\n-    public void setValue(Object pojo, Object value)\n-        throws IllegalArgumentException\n+    public void setValue(Object pojo, Object value) throws IllegalArgumentException\n     {\n         try {\n             _method.invoke(pojo, value);\n--- a/src/test/java/com/fasterxml/jackson/databind/creators/TestPolymorphicDelegating.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestPolymorphicDelegating.java\n package com.fasterxml.jackson.databind.creators;\n \n-import com.fasterxml.jackson.annotation.JsonCreator;\n-import com.fasterxml.jackson.annotation.JacksonInject;\n-import com.fasterxml.jackson.annotation.JsonTypeInfo;\n-import com.fasterxml.jackson.annotation.JsonValue;\n+import com.fasterxml.jackson.annotation.*;\n import com.fasterxml.jackson.databind.*;\n \n public class TestPolymorphicDelegating extends BaseMapTest\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestGenericListSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestGenericListSerialization.java\n \n import com.fasterxml.jackson.annotation.*;\n \n-import com.fasterxml.jackson.core.Version;\n import com.fasterxml.jackson.core.type.TypeReference;\n \n import com.fasterxml.jackson.databind.*;", "timestamp": 1413525014, "metainfo": ""}