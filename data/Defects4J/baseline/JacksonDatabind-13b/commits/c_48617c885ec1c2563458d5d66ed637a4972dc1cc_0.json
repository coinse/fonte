{"sha": "48617c885ec1c2563458d5d66ed637a4972dc1cc", "log": "Simplify failing test", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/failing/RaceCondition738Test.java\n+++ b/src/test/java/com/fasterxml/jackson/failing/RaceCondition738Test.java\n import com.fasterxml.jackson.databind.BaseMapTest;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.module.SimpleModule;\n \n public class RaceCondition738Test extends BaseMapTest\n {\n-    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.WRAPPER_OBJECT)\n-    @JsonSubTypes({\n-        @JsonSubTypes.Type(value = TypeOne.class, name = \"one\"),\n-        @JsonSubTypes.Type(value = TypeTwo.class, name = \"two\"),\n-        @JsonSubTypes.Type(value = TypeThree.class, name = \"three\")\n-    })\n     static abstract class AbstractHasSubTypes implements HasSubTypes { }\n \n     static class TypeOne extends AbstractHasSubTypes {\n         }\n     }\n \n-    static class TypeTwo extends AbstractHasSubTypes {\n-        private final String id;\n-        public TypeTwo(String id) {\n-            this.id = id;\n-        }\n-        @JsonProperty\n-        public String getId() {\n-            return id;\n-        }\n-        @Override\n-        public String getType() {\n-            return TypeTwo.class.getSimpleName();\n-        }\n-    }    \n-\n-    static class TypeThree extends AbstractHasSubTypes {\n-        private final String id;\n-        public TypeThree(String id) {\n-            this.id = id;\n-        }\n-        @JsonProperty\n-        public String getId() {\n-            return id;\n-        }\n-        @Override\n-        public String getType() {\n-            return TypeThree.class.getSimpleName();\n-        }\n-    }\n-\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.WRAPPER_OBJECT)\n+    @JsonSubTypes({\n+        @JsonSubTypes.Type(value = TypeOne.class, name = \"one\")\n+    })\n     public interface HasSubTypes {\n         String getType();\n     }\n      */\n     \n     public void testRepeatedly() throws Exception {\n-        for (int i = 0; i < 1000; i++) {\n-            runOnce();\n+        final int COUNT = 50;\n+        for (int i = 0; i < COUNT; i++) {\n+            runOnce(i, COUNT);\n         }\n     }\n     \n-    void runOnce() throws Exception {\n+    void runOnce(int round, int max) throws Exception {\n         final ObjectMapper mapper = getObjectMapper();\n         Callable<String> writeJson = new Callable<String>() {\n             @Override\n             JsonNode wrapped = tree.get(\"hasSubTypes\");\n \n             if (!wrapped.has(\"one\")) {\n-                throw new IllegalStateException(\"Missing 'one', source: \"+json);\n+System.out.println(\"JSON wrong: \"+json);\n+                throw new IllegalStateException(\"Round #\"+round+\"/\"+max+\" ; missing property 'one', source: \"+json);\n             }\n+System.out.println(\"JSON fine: \"+json);\n         }\n     }\n \n     private static ObjectMapper getObjectMapper() {\n-        SimpleModule module = new SimpleModule(\"subTypeRace\");\n-        module.setMixInAnnotation(HasSubTypes.class, AbstractHasSubTypes.class);\n-\n-        ObjectMapper mapper = new ObjectMapper();\n-        mapper.registerModule(module);\n-        return mapper;\n+        return new ObjectMapper();\n     }\n }", "timestamp": 1427492360, "metainfo": ""}