{"sha": "d4c6f36d8f6c25261f7dea699d57cd64b6d2b67e", "log": "minor code cleanup, to remove a work-around that was needed pre-JDK-1.6", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n         _mapFallbacks.put(ConcurrentMap.class.getName(), ConcurrentHashMap.class);\n         _mapFallbacks.put(SortedMap.class.getName(), TreeMap.class);\n \n-        /* 11-Jan-2009, tatu: Let's see if we can still add support for\n-         *    JDK 1.6 interfaces, even if we run on 1.5. Just need to be\n-         *    more careful with typos, since compiler won't notice any\n-         *    problems...\n-         */\n-        _mapFallbacks.put(\"java.util.NavigableMap\", TreeMap.class);\n-        try {\n-            Class<?> key = java.util.concurrent.ConcurrentNavigableMap.class;\n-            Class<?> value = java.util.concurrent.ConcurrentSkipListMap.class;\n-            @SuppressWarnings(\"unchecked\")\n-                Class<? extends Map<?,?>> mapValue = (Class<? extends Map<?,?>>) value;\n-            _mapFallbacks.put(key.getName(), mapValue);\n-        } catch (Throwable e) { // some class loading problems are Errors, others Exceptions\n-            System.err.println(\"Problems with (optional) types: \"+e);\n-        }\n+        _mapFallbacks.put(java.util.NavigableMap.class.getName(), TreeMap.class);\n+        _mapFallbacks.put(java.util.concurrent.ConcurrentNavigableMap.class.getName(),\n+                java.util.concurrent.ConcurrentSkipListMap.class);\n     }\n \n     /* We do some defaulting for abstract Collection classes and\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n             Class<?> type, Map<Class<?>,Boolean> ignoredTypes)\n     {\n         Boolean status = ignoredTypes.get(type);\n-        if (status == null) {\n-            BeanDescription desc = config.introspectClassAnnotations(type);\n-            status = config.getAnnotationIntrospector().isIgnorableType(desc.getClassInfo());\n-            // We default to 'false', i.e. not ignorable\n-            if (status == null) {\n-                status = Boolean.FALSE;\n-            }\n-        }\n-        return status;\n+        if (status != null) {\n+            return status.booleanValue();\n+        }\n+        BeanDescription desc = config.introspectClassAnnotations(type);\n+        status = config.getAnnotationIntrospector().isIgnorableType(desc.getClassInfo());\n+        // We default to 'false', i.e. not ignorable\n+        return (status == null) ? false : status.booleanValue(); \n     }\n }", "timestamp": 1416434655, "metainfo": ""}