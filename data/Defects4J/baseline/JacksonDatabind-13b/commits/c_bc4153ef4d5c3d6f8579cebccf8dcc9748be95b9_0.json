{"sha": "bc4153ef4d5c3d6f8579cebccf8dcc9748be95b9", "log": "Implemented [JACKSON-718]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/node/BigIntegerNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/BigIntegerNode.java\n public final class BigIntegerNode\n     extends NumericNode\n {\n+    private final static BigInteger MIN_INTEGER = BigInteger.valueOf(Integer.MIN_VALUE);\n+    private final static BigInteger MAX_INTEGER = BigInteger.valueOf(Integer.MAX_VALUE);\n+    private final static BigInteger MIN_LONG = BigInteger.valueOf(Long.MIN_VALUE);\n+    private final static BigInteger MAX_LONG = BigInteger.valueOf(Long.MAX_VALUE);\n+    \n     final protected BigInteger _value;\n-\n+    \n     /*\n     /**********************************************************\n     /* Construction\n     @Override\n     public boolean isBigInteger() { return true; }\n \n+    @Override public boolean canConvertToInt() {\n+        return (_value.compareTo(MIN_INTEGER) >= 0) && (_value.compareTo(MAX_INTEGER) <= 0);\n+    }\n+    @Override public boolean canConvertToLong() {\n+        return (_value.compareTo(MIN_LONG) >= 0) && (_value.compareTo(MAX_LONG) <= 0);\n+    }\n+    \n     @Override\n     public Number getNumberValue() {\n         return _value;\n--- a/src/main/java/com/fasterxml/jackson/databind/node/DecimalNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/DecimalNode.java\n public final class DecimalNode\n     extends NumericNode\n {\n+    private final static BigDecimal MIN_INTEGER = BigDecimal.valueOf(Integer.MIN_VALUE);\n+    private final static BigDecimal MAX_INTEGER = BigDecimal.valueOf(Integer.MAX_VALUE);\n+    private final static BigDecimal MIN_LONG = BigDecimal.valueOf(Long.MIN_VALUE);\n+    private final static BigDecimal MAX_LONG = BigDecimal.valueOf(Long.MAX_VALUE);\n+\n     final protected BigDecimal _value;\n \n     /* \n     \n     @Override\n     public boolean isBigDecimal() { return true; }\n+\n+    @Override public boolean canConvertToInt() {\n+        return (_value.compareTo(MIN_INTEGER) >= 0) && (_value.compareTo(MAX_INTEGER) <= 0);\n+    }\n+    @Override public boolean canConvertToLong() {\n+        return (_value.compareTo(MIN_LONG) >= 0) && (_value.compareTo(MAX_LONG) <= 0);\n+    }\n     \n     @Override\n     public Number getNumberValue() { return _value; }\n--- a/src/main/java/com/fasterxml/jackson/databind/node/DoubleNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/DoubleNode.java\n     @Override\n     public boolean isDouble() { return true; }\n \n+    @Override public boolean canConvertToInt() {\n+        return (_value >= Integer.MIN_VALUE && _value <= Integer.MAX_VALUE);\n+    }\n+    @Override public boolean canConvertToLong() {\n+        return (_value >= Long.MIN_VALUE && _value <= Long.MAX_VALUE);\n+    }\n+    \n     @Override\n     public Number getNumberValue() {\n         return Double.valueOf(_value);\n--- a/src/main/java/com/fasterxml/jackson/databind/node/IntNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/IntNode.java\n     @Override\n     public boolean isInt() { return true; }\n \n+    @Override public boolean canConvertToInt() { return true; }\n+    @Override public boolean canConvertToLong() { return true; }\n+    \n     @Override\n     public Number getNumberValue() {\n         return Integer.valueOf(_value);\n--- a/src/main/java/com/fasterxml/jackson/databind/node/LongNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/LongNode.java\n     @Override\n     public boolean isLong() { return true; }\n \n+    @Override public boolean canConvertToInt() {\n+        return (_value >= Integer.MIN_VALUE && _value <= Integer.MAX_VALUE);\n+    }\n+    @Override public boolean canConvertToLong() { return true; }\n+    \n     @Override\n     public Number getNumberValue() {\n         return Long.valueOf(_value);\n--- a/src/main/java/com/fasterxml/jackson/databind/node/NumericNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/NumericNode.java\n     @Override\n     public abstract BigInteger getBigIntegerValue();\n \n+    @Override public abstract boolean canConvertToInt();\n+    @Override public abstract boolean canConvertToLong();\n+    \n     /* \n     /**********************************************************\n     /* General type coercions\n--- a/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.base.ParserMinimalBase;\n-import com.fasterxml.jackson.core.io.SerializedString;\n import com.fasterxml.jackson.core.json.JsonReadContext;\n import com.fasterxml.jackson.core.json.JsonWriteContext;\n import com.fasterxml.jackson.core.util.ByteArrayBuilder;\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestJsonNode.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestJsonNode.java\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.node.BigIntegerNode;\n-import com.fasterxml.jackson.databind.node.BinaryNode;\n-import com.fasterxml.jackson.databind.node.BooleanNode;\n-import com.fasterxml.jackson.databind.node.DecimalNode;\n-import com.fasterxml.jackson.databind.node.DoubleNode;\n-import com.fasterxml.jackson.databind.node.IntNode;\n-import com.fasterxml.jackson.databind.node.LongNode;\n-import com.fasterxml.jackson.databind.node.MissingNode;\n-import com.fasterxml.jackson.databind.node.NullNode;\n-import com.fasterxml.jackson.databind.node.POJONode;\n-import com.fasterxml.jackson.databind.node.TextNode;\n \n /**\n  * Basic tests for {@link JsonNode} base class and some features\n         assertNodeNumbers(t, 1, 1.0);\n     }\n \n-    public void testInt()\n-    {\n-        IntNode n = IntNode.valueOf(1);\n-        assertStandardEquals(n);\n-        assertTrue(0 != n.hashCode());\n-        assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken());\n-        assertEquals(JsonParser.NumberType.INT, n.getNumberType());\n-        assertEquals(1, n.getIntValue());\n-        assertEquals(1L, n.getLongValue());\n-        assertEquals(BigDecimal.ONE, n.getDecimalValue());\n-        assertEquals(BigInteger.ONE, n.getBigIntegerValue());\n-        assertEquals(\"1\", n.asText());\n-\n-        // 1.6:\n-        assertNodeNumbers(n, 1, 1.0);\n-    }\n-\n-    public void testLong()\n-    {\n-        LongNode n = LongNode.valueOf(1L);\n-        assertStandardEquals(n);\n-        assertTrue(0 != n.hashCode());\n-        assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken());\n-        assertEquals(JsonParser.NumberType.LONG, n.getNumberType());\n-        assertEquals(1, n.getIntValue());\n-        assertEquals(1L, n.getLongValue());\n-        assertEquals(BigDecimal.ONE, n.getDecimalValue());\n-        assertEquals(BigInteger.ONE, n.getBigIntegerValue());\n-        assertEquals(\"1\", n.asText());\n-\n-        // 1.6:\n-        assertNodeNumbers(n, 1, 1.0);\n-    }\n-\n-    public void testDouble()\n-    {\n-        DoubleNode n = DoubleNode.valueOf(0.25);\n-        assertStandardEquals(n);\n-        assertTrue(0 != n.hashCode());\n-        assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken());\n-        assertEquals(JsonParser.NumberType.DOUBLE, n.getNumberType());\n-        assertEquals(0, n.getIntValue());\n-        assertEquals(0.25, n.getDoubleValue());\n-        assertNotNull(n.getDecimalValue());\n-        assertEquals(BigInteger.ZERO, n.getBigIntegerValue());\n-        assertEquals(\"0.25\", n.asText());\n-\n-        // 1.6:\n-        assertNodeNumbers(DoubleNode.valueOf(4.5), 4, 4.5);\n-    }\n-\n-    public void testDecimalNode() throws Exception\n-    {\n-        DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE);\n-        assertStandardEquals(n);\n-        assertTrue(n.equals(new DecimalNode(BigDecimal.ONE)));\n-        assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken());\n-        assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.getNumberType());\n-        assertTrue(n.isNumber());\n-        assertFalse(n.isIntegralNumber());\n-        assertTrue(n.isBigDecimal());\n-        assertEquals(BigDecimal.ONE, n.getNumberValue());\n-        assertEquals(1, n.getIntValue());\n-        assertEquals(1L, n.getLongValue());\n-        assertEquals(BigDecimal.ONE, n.getDecimalValue());\n-        assertEquals(\"1\", n.asText());\n-\n-        // 1.6:\n-        assertNodeNumbers(n, 1, 1.0);\n-    }\n-\n-    public void testBigIntegerNode() throws Exception\n-    {\n-        BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE);\n-        assertStandardEquals(n);\n-        assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE)));\n-        assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken());\n-        assertEquals(JsonParser.NumberType.BIG_INTEGER, n.getNumberType());\n-        assertTrue(n.isNumber());\n-        assertTrue(n.isIntegralNumber());\n-        assertTrue(n.isBigInteger());\n-        assertEquals(BigInteger.ONE, n.getNumberValue());\n-        assertEquals(1, n.getIntValue());\n-        assertEquals(1L, n.getLongValue());\n-        assertEquals(BigInteger.ONE, n.getBigIntegerValue());\n-        assertEquals(\"1\", n.asText());\n-        \n-        // 1.6:\n-        assertNodeNumbers(n, 1, 1.0);\n-\n-        BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE);\n-        \n-        n = BigIntegerNode.valueOf(maxLong);\n-        assertEquals(Long.MAX_VALUE, n.getLongValue());\n-\n-        ObjectMapper mapper = new ObjectMapper();\n-        JsonNode n2 = mapper.readTree(maxLong.toString());\n-        assertEquals(Long.MAX_VALUE, n2.getLongValue());\n-\n-        // then over long limit:\n-        BigInteger beyondLong = maxLong.shiftLeft(2); // 4x max long\n-        n2 = mapper.readTree(beyondLong.toString());\n-        assertEquals(beyondLong, n2.getBigIntegerValue());\n-    }\n \n     public void testBinary() throws Exception\n     {\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestNumberNodes.java\n+package com.fasterxml.jackson.databind.node;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+\n+import com.fasterxml.jackson.core.JsonNode;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonToken;\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ * Basic tests for {@link JsonNode} implementations that\n+ * contain numeric values.\n+ */\n+public class TestNumberNodes extends BaseMapTest\n+{\n+    public void testInt()\n+    {\n+        IntNode n = IntNode.valueOf(1);\n+        assertStandardEquals(n);\n+        assertTrue(0 != n.hashCode());\n+        assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken());\n+        assertEquals(JsonParser.NumberType.INT, n.getNumberType());\n+        assertEquals(1, n.getIntValue());\n+        assertEquals(1L, n.getLongValue());\n+        assertEquals(BigDecimal.ONE, n.getDecimalValue());\n+        assertEquals(BigInteger.ONE, n.getBigIntegerValue());\n+        assertEquals(\"1\", n.asText());\n+\n+        assertNodeNumbers(n, 1, 1.0);\n+\n+        assertTrue(IntNode.valueOf(0).canConvertToInt());\n+        assertTrue(IntNode.valueOf(Integer.MAX_VALUE).canConvertToInt());\n+        assertTrue(IntNode.valueOf(Integer.MIN_VALUE).canConvertToInt());\n+\n+        assertTrue(IntNode.valueOf(0).canConvertToLong());\n+        assertTrue(IntNode.valueOf(Integer.MAX_VALUE).canConvertToLong());\n+        assertTrue(IntNode.valueOf(Integer.MIN_VALUE).canConvertToLong());\n+    }\n+\n+    public void testLong()\n+    {\n+        LongNode n = LongNode.valueOf(1L);\n+        assertStandardEquals(n);\n+        assertTrue(0 != n.hashCode());\n+        assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken());\n+        assertEquals(JsonParser.NumberType.LONG, n.getNumberType());\n+        assertEquals(1, n.getIntValue());\n+        assertEquals(1L, n.getLongValue());\n+        assertEquals(BigDecimal.ONE, n.getDecimalValue());\n+        assertEquals(BigInteger.ONE, n.getBigIntegerValue());\n+        assertEquals(\"1\", n.asText());\n+\n+        assertNodeNumbers(n, 1, 1.0);\n+\n+        // ok if contains small enough value\n+        assertTrue(LongNode.valueOf(0).canConvertToInt());\n+        assertTrue(LongNode.valueOf(Integer.MAX_VALUE).canConvertToInt());\n+        assertTrue(LongNode.valueOf(Integer.MIN_VALUE).canConvertToInt());\n+        // but not in other cases\n+        assertFalse(LongNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt());\n+        assertFalse(LongNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt());\n+\n+        assertTrue(LongNode.valueOf(0L).canConvertToLong());\n+        assertTrue(LongNode.valueOf(Long.MAX_VALUE).canConvertToLong());\n+        assertTrue(LongNode.valueOf(Long.MIN_VALUE).canConvertToLong());\n+    }\n+\n+    public void testDouble()\n+    {\n+        DoubleNode n = DoubleNode.valueOf(0.25);\n+        assertStandardEquals(n);\n+        assertTrue(0 != n.hashCode());\n+        assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken());\n+        assertEquals(JsonParser.NumberType.DOUBLE, n.getNumberType());\n+        assertEquals(0, n.getIntValue());\n+        assertEquals(0.25, n.getDoubleValue());\n+        assertNotNull(n.getDecimalValue());\n+        assertEquals(BigInteger.ZERO, n.getBigIntegerValue());\n+        assertEquals(\"0.25\", n.asText());\n+\n+        // 1.6:\n+        assertNodeNumbers(DoubleNode.valueOf(4.5), 4, 4.5);\n+\n+        assertTrue(DoubleNode.valueOf(0).canConvertToInt());\n+        assertTrue(DoubleNode.valueOf(Integer.MAX_VALUE).canConvertToInt());\n+        assertTrue(DoubleNode.valueOf(Integer.MIN_VALUE).canConvertToInt());\n+        assertFalse(DoubleNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt());\n+        assertFalse(DoubleNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt());\n+\n+        assertTrue(DoubleNode.valueOf(0L).canConvertToLong());\n+        assertTrue(DoubleNode.valueOf(Long.MAX_VALUE).canConvertToLong());\n+        assertTrue(DoubleNode.valueOf(Long.MIN_VALUE).canConvertToLong());\n+    }\n+\n+    public void testDecimalNode() throws Exception\n+    {\n+        DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE);\n+        assertStandardEquals(n);\n+        assertTrue(n.equals(new DecimalNode(BigDecimal.ONE)));\n+        assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken());\n+        assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.getNumberType());\n+        assertTrue(n.isNumber());\n+        assertFalse(n.isIntegralNumber());\n+        assertTrue(n.isBigDecimal());\n+        assertEquals(BigDecimal.ONE, n.getNumberValue());\n+        assertEquals(1, n.getIntValue());\n+        assertEquals(1L, n.getLongValue());\n+        assertEquals(BigDecimal.ONE, n.getDecimalValue());\n+        assertEquals(\"1\", n.asText());\n+\n+        // 1.6:\n+        assertNodeNumbers(n, 1, 1.0);\n+\n+        assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt());\n+        assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt());\n+        assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt());\n+        assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt());\n+        assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt());\n+\n+        assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong());\n+        assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong());\n+        assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong());\n+    }\n+\n+    public void testBigIntegerNode() throws Exception\n+    {\n+        BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE);\n+        assertStandardEquals(n);\n+        assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE)));\n+        assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken());\n+        assertEquals(JsonParser.NumberType.BIG_INTEGER, n.getNumberType());\n+        assertTrue(n.isNumber());\n+        assertTrue(n.isIntegralNumber());\n+        assertTrue(n.isBigInteger());\n+        assertEquals(BigInteger.ONE, n.getNumberValue());\n+        assertEquals(1, n.getIntValue());\n+        assertEquals(1L, n.getLongValue());\n+        assertEquals(BigInteger.ONE, n.getBigIntegerValue());\n+        assertEquals(\"1\", n.asText());\n+        \n+        // 1.6:\n+        assertNodeNumbers(n, 1, 1.0);\n+\n+        BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE);\n+        \n+        n = BigIntegerNode.valueOf(maxLong);\n+        assertEquals(Long.MAX_VALUE, n.getLongValue());\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonNode n2 = mapper.readTree(maxLong.toString());\n+        assertEquals(Long.MAX_VALUE, n2.getLongValue());\n+\n+        // then over long limit:\n+        BigInteger beyondLong = maxLong.shiftLeft(2); // 4x max long\n+        n2 = mapper.readTree(beyondLong.toString());\n+        assertEquals(beyondLong, n2.getBigIntegerValue());\n+\n+        assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt());\n+        assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt());\n+        assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt());\n+        assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt());\n+        assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt());\n+\n+        assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong());\n+        assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong());\n+        assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong());\n+    }\n+\n+}", "timestamp": 1326927944, "metainfo": ""}