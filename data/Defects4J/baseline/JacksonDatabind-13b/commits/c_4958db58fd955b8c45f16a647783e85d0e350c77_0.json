{"sha": "4958db58fd955b8c45f16a647783e85d0e350c77", "log": "Fix #646 for 2.5, too risky for backport.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/BeanAsArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/BeanAsArraySerializer.java\n     /**********************************************************\n      */\n \n-    // Re-defined from base class...\n-    @Override\n-    public void serializeWithType(Object bean, JsonGenerator jgen,\n+    // Re-defined from base class, due to differing prefixes\n+    @Override\n+    public void serializeWithType(Object bean, JsonGenerator gen,\n             SerializerProvider provider, TypeSerializer typeSer)\n-        throws IOException, JsonGenerationException\n+        throws IOException\n     {\n-        /* Should not even get here; but let's be nice and re-route\n-         * if need be.\n+        /* 10-Dec-2014, tatu: Not sure if this can be made to work reliably;\n+         *   but for sure delegating to default implementation will not work. So:\n          */\n-        _defaultSerializer.serializeWithType(bean, jgen, provider, typeSer);\n+        \n+        if (_objectIdWriter != null) {\n+            _serializeWithObjectId(bean, gen, provider, typeSer);\n+            return;\n+        }\n+\n+        String typeStr = (_typeId == null) ? null : _customTypeId(bean);\n+        if (typeStr == null) {\n+            typeSer.writeTypePrefixForArray(bean, gen);\n+        } else {\n+            typeSer.writeCustomTypePrefixForArray(bean, gen, typeStr);\n+        }\n+        serializeAsArray(bean, gen, provider);\n+        if (typeStr == null) {\n+            typeSer.writeTypeSuffixForArray(bean, gen);\n+        } else {\n+            typeSer.writeCustomTypeSuffixForArray(bean, gen, typeStr);\n+        }\n+        \n     }\n     \n     /**\n      */\n     @Override\n     public final void serialize(Object bean, JsonGenerator gen, SerializerProvider provider)\n-        throws IOException, JsonGenerationException\n+        throws IOException\n     {\n         // [JACKSON-805]\n         if (provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)\n             }\n             // NOTE: any getters can not be supported either\n             //if (_anyGetterWriter != null) {\n-            //    _anyGetterWriter.getAndSerialize(bean, jgen, provider);\n+            //    _anyGetterWriter.getAndSerialize(bean, gen, provider);\n             //}\n         } catch (Exception e) {\n             String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n      * reference to that member.\n      */\n     final protected AnnotatedMember _typeId;\n-    \n+\n     /**\n      * If this POJO can be alternatively serialized using just an object id\n      * to denote a reference to previously serialized object,\n      * Requested shape from bean class annotations.\n      */\n     final protected JsonFormat.Shape _serializationShape;\n-    \n+\n     /*\n     /**********************************************************\n     /* Life-cycle: constructors\n     // Main serialization method left unimplemented\n     @Override\n     public abstract void serialize(Object bean, JsonGenerator jgen, SerializerProvider provider)\n-        throws IOException, JsonGenerationException;\n+        throws IOException;\n \n     // Type-info-augmented case implemented as it does not usually differ between impls\n     @Override\n-    public void serializeWithType(Object bean, JsonGenerator jgen,\n+    public void serializeWithType(Object bean, JsonGenerator gen,\n             SerializerProvider provider, TypeSerializer typeSer)\n-        throws IOException, JsonGenerationException\n+        throws IOException\n     {\n         if (_objectIdWriter != null) {\n-            _serializeWithObjectId(bean, jgen, provider, typeSer);\n+            _serializeWithObjectId(bean, gen, provider, typeSer);\n             return;\n         }\n \n-        String typeStr = (_typeId == null) ? null :_customTypeId(bean);\n+        String typeStr = (_typeId == null) ? null : _customTypeId(bean);\n         if (typeStr == null) {\n-            typeSer.writeTypePrefixForObject(bean, jgen);\n-        } else {\n-            typeSer.writeCustomTypePrefixForObject(bean, jgen, typeStr);\n+            typeSer.writeTypePrefixForObject(bean, gen);\n+        } else {\n+            typeSer.writeCustomTypePrefixForObject(bean, gen, typeStr);\n         }\n         if (_propertyFilterId != null) {\n-            serializeFieldsFiltered(bean, jgen, provider);\n-        } else {\n-            serializeFields(bean, jgen, provider);\n+            serializeFieldsFiltered(bean, gen, provider);\n+        } else {\n+            serializeFields(bean, gen, provider);\n         }\n         if (typeStr == null) {\n-            typeSer.writeTypeSuffixForObject(bean, jgen);\n-        } else {\n-            typeSer.writeCustomTypeSuffixForObject(bean, jgen, typeStr);\n+            typeSer.writeTypeSuffixForObject(bean, gen);\n+        } else {\n+            typeSer.writeCustomTypeSuffixForObject(bean, gen, typeStr);\n         }\n     }\n \n         }\n     }\n     \n-    private final String _customTypeId(Object bean)\n+    protected final String _customTypeId(Object bean)\n     {\n         final Object typeId = _typeId.getValue(bean);\n         if (typeId == null) {\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/PojoAsArray646Test.java\n+package com.fasterxml.jackson.databind.struct;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+public class PojoAsArray646Test extends BaseMapTest\n+{\n+    @JsonFormat(shape = JsonFormat.Shape.ARRAY)\n+    @JsonPropertyOrder(alphabetic = true)\n+    static class Outer {\n+\n+        private Map<String, TheItem> attributes;\n+\n+        public Outer() {\n+            attributes = new HashMap<String, TheItem>();\n+        }\n+\n+        @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.WRAPPER_ARRAY)\n+        public Map<String, TheItem> getAttributes() {\n+            return attributes;\n+        }\n+    }\n+\n+    @JsonFormat(shape = JsonFormat.Shape.ARRAY)\n+    @JsonPropertyOrder(alphabetic = true)\n+    static class TheItem {\n+\n+        @JsonFormat(shape = JsonFormat.Shape.ARRAY)\n+        @JsonPropertyOrder(alphabetic = true)\n+        public static class NestedItem {\n+            public String nestedStrValue;\n+\n+            @JsonCreator\n+            public NestedItem(@JsonProperty(\"nestedStrValue\") String nestedStrValue) {\n+                this.nestedStrValue = nestedStrValue;\n+            }\n+        }\n+\n+        private String strValue;\n+        private boolean boolValue;\n+        private List<NestedItem> nestedItems;\n+\n+        @JsonCreator\n+        public TheItem(@JsonProperty(\"strValue\") String strValue, @JsonProperty(\"boolValue\") boolean boolValue, @JsonProperty(\"nestedItems\") List<NestedItem> nestedItems) {\n+            this.strValue = strValue;\n+            this.boolValue = boolValue;\n+            this.nestedItems = nestedItems;\n+        }\n+\n+        public String getStrValue() {\n+            return strValue;\n+        }\n+\n+        public void setStrValue(String strValue) {\n+            this.strValue = strValue;\n+        }\n+\n+        public boolean isBoolValue() {\n+            return boolValue;\n+        }\n+\n+        public void setBoolValue(boolean boolValue) {\n+            this.boolValue = boolValue;\n+        }\n+\n+        public List<NestedItem> getNestedItems() {\n+            return nestedItems;\n+        }\n+\n+        public void setNestedItems(List<NestedItem> nestedItems) {\n+            this.nestedItems = nestedItems;\n+        }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Tests\n+    /**********************************************************\n+     */\n+\n+    private final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    public void testWithCustomTypeId() throws Exception {\n+\n+        List<TheItem.NestedItem> nestedList = new ArrayList<TheItem.NestedItem>();\n+        nestedList.add(new TheItem.NestedItem(\"foo1\"));\n+        nestedList.add(new TheItem.NestedItem(\"foo2\"));\n+        TheItem item = new TheItem(\"first\", false, nestedList);\n+        Outer outer = new Outer();\n+        outer.getAttributes().put(TheItem.class.getName(), item);\n+\n+        String json = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(outer);\n+\n+        Outer result = MAPPER.readValue(json, Outer.class);\n+        assertNotNull(result);\n+        assertNotNull(result.attributes);\n+        assertEquals(1, result.attributes.size());\n+    }\n+}", "timestamp": 1418272707, "metainfo": ""}