{"sha": "c25fbfc0da395b436d3b95cf00b96b27b71e4dd9", "log": "minor clean up related to attribute-backed virtual properties", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java\n     implements ClassIntrospector.MixInResolver,\n         java.io.Serializable\n {\n-    private static final long serialVersionUID = 8891625428805876137L;\n+    private static final long serialVersionUID = 1L; // since 2.5\n \n     /**\n      * Set of shared mapper features enabled.\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n      * Method used to find the property member (getter, setter, field) that has\n      * the highest precedence in current context (getter method when serializing,\n      * if available, and so forth), if any.\n+     *<p>\n+     * Note: abstract since 2.5\n      * \n      * @since 2.1\n      */\n-    public AnnotatedMember getPrimaryMember() { return null; }\n+    public abstract AnnotatedMember getPrimaryMember();\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n         if (ann == null) {\n             return;\n         }\n-        JavaType defaultType = null;\n+        JavaType propType = null;\n         for (JsonAppend.Attr attr : ann.attrs()) {\n             PropertyMetadata metadata = attr.required() ?\n                     PropertyMetadata.STD_REQUIRED : PropertyMetadata.STD_OPTIONAL;\n             if (!propName.hasSimpleName()) {\n                 propName = new PropertyName(attrName);\n             }\n+            // should there be a way to specify expected type?\n+            if (propType == null) {\n+                propType = config.constructType(Object.class);\n+            }\n+            // now, then, we need a placeholder for member (no real Field/Method):\n+            AnnotatedMember member = new VirtualAnnotatedMember(ac.getRawType(),\n+                    attrName, propType.getRawClass());\n+            // and with that and property definition\n             SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(config,\n-                    /*AnnotatedMember*/ null, propName, metadata);\n-            // should there be a way to specify expected type?\n-            if (defaultType == null) {\n-                defaultType = config.constructType(Object.class);\n-            }\n+                    member, propName, metadata);\n+            // can construct the property writer\n             properties.add(AttributePropertyWriter.construct(attrName, propDef,\n-                    ac, defaultType, attr.include()));\n+                    ac.getAnnotations(), propType, attr.include()));\n         }\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/VirtualBeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/VirtualBeanPropertyWriter.java\n      * want full control over implementation.\n      */\n     protected VirtualBeanPropertyWriter(BeanPropertyDefinition propDef,\n-            AnnotatedMember member,\n             Annotations contextAnnotations, JavaType declaredType,\n             JsonSerializer<?> ser, TypeSerializer typeSer, JavaType serType,\n             boolean suppressNulls, Object suppressableValue)\n     {\n-        super(propDef, member, contextAnnotations, declaredType,\n+        super(propDef, propDef.getPrimaryMember(), contextAnnotations, declaredType,\n                 ser, typeSer, serType, suppressNulls, suppressableValue);\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/AttributePropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/AttributePropertyWriter.java\n package com.fasterxml.jackson.databind.ser.impl;\n \n import com.fasterxml.jackson.annotation.JsonInclude;\n+\n import com.fasterxml.jackson.core.JsonGenerator;\n+\n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.introspect.AnnotatedClass;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\n-import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;\n import com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter;\n import com.fasterxml.jackson.databind.util.Annotations;\n \n      */\n \n     protected AttributePropertyWriter(String attrName, BeanPropertyDefinition propDef,\n-            AnnotatedMember member,\n             Annotations contextAnnotations, JavaType declaredType,\n             JsonInclude.Include inclusion)\n     {\n-        super(propDef, member, contextAnnotations, declaredType,\n+        super(propDef, contextAnnotations, declaredType,\n                 /* value serializer */ null, /* type serializer */ null, /* ser type */ null,\n                 _suppressNulls(inclusion), null);\n         _attrName = attrName;\n     }\n \n     public static AttributePropertyWriter construct(String attrName,\n-            BeanPropertyDefinition propDef, AnnotatedClass declaringClass,\n+            BeanPropertyDefinition propDef,\n+            Annotations contextAnnotations,\n             JavaType declaredType, JsonInclude.Include inclusion)\n     {\n         return new AttributePropertyWriter(attrName, propDef,\n-                new VirtualAnnotatedMember(declaringClass.getRawType(), attrName, declaredType.getRawClass()),\n-                declaringClass.getAnnotations(), declaredType, inclusion);\n+                contextAnnotations, declaredType, inclusion);\n     }\n     \n     protected AttributePropertyWriter(AttributePropertyWriter base) {", "timestamp": 1417668115, "metainfo": ""}