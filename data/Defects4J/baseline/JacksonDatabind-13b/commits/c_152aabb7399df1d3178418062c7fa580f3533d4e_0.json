{"sha": "152aabb7399df1d3178418062c7fa580f3533d4e", "log": "Fixed #539 in master (for 2.5.0) -- slightly risky change so can't easily backport unfortunately.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n         return _unknownTypeSerializer;\n     }\n \n+    /**\n+     * Helper method called to see if given serializer is considered to be\n+     * something returned by {@link #getUnknownTypeSerializer}, that is, something\n+     * for which no regular serializer was found or constructed.\n+     * \n+     * @since 2.5\n+     */\n+    public boolean isUnknownTypeSerializer(JsonSerializer<?> ser) {\n+        return (ser == _unknownTypeSerializer) || (ser == null);\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Methods for creating instances based on annotations\n      * @return Serializer if one can be found, null if not.\n      */\n     protected JsonSerializer<Object> _findExplicitUntypedSerializer(Class<?> runtimeType)\n-\t\tthrows JsonMappingException\n+        throws JsonMappingException\n     {        \n         // Fast lookup from local lookup thingy works?\n         JsonSerializer<Object> ser = _knownSerializers.untypedValueSerializer(runtimeType);\n-        if (ser != null) {\n-            return ser;\n-        }\n-        // If not, maybe shared map already has it?\n-        ser = _serializerCache.untypedValueSerializer(runtimeType);\n-        if (ser != null) {\n-            return ser;\n-        }\n-        return _createAndCacheUntypedSerializer(runtimeType);\n+        if (ser == null) {\n+            // If not, maybe shared map already has it?\n+            ser = _serializerCache.untypedValueSerializer(runtimeType);\n+            if (ser == null) {\n+                ser = _createAndCacheUntypedSerializer(runtimeType);\n+                /* 18-Sep-2014, tatu: This is unfortunate patch over related change\n+                 *    that pushes creation of \"unknown type\" serializer deeper down\n+                 *    in BeanSerializerFactory; as a result, we need to \"undo\" creation\n+                 *    here.\n+                 */\n+                if (isUnknownTypeSerializer(ser)) {\n+                    return null;\n+                }\n+            }\n+        }\n+        return ser;\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n                     // Finally: maybe we can still deal with it as an implementation of some basic JDK interface?\n                     if (ser == null) {\n                         ser = findSerializerByAddonType(config, type, beanDesc, staticTyping);\n+                        // 18-Sep-2014, tatu: Actually, as per [jackson-databind#539], need to get\n+                        //   'unknown' serializer assigned earlier, here, so that it gets properly\n+                        //   post-processed\n+                        if (ser == null) {\n+                            ser = prov.getUnknownTypeSerializer(beanDesc.getBeanClass());\n+                        }\n                     }\n                 }\n             }\n         \n         JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n         \n-        /* However, after all modifications: no properties, no serializer\n-         * (note; as per [JACKSON-670], check was moved later on from an earlier location)\n-         */\n         if (ser == null) {\n-            /* 27-Nov-2009, tatu: Except that as per [JACKSON-201], we are\n-             *   ok with that as long as it has a recognized class annotation\n-             *  (which may come from a mix-in too)\n-             */\n+            // If we get this far, there were no properties found, so no regular BeanSerializer\n+            // would be constructed. But, couple of exceptions.\n+            // First: if there are known annotations, just create 'empty bean' serializer\n             if (beanDesc.hasKnownClassAnnotations()) {\n                 return builder.createDummy();\n             }\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestBeanSerializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestBeanSerializer.java\n \n import com.fasterxml.jackson.annotation.*;\n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.introspect.AnnotatedField;\n import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;\n @SuppressWarnings(\"serial\")\n public class TestBeanSerializer extends BaseMapTest\n {\n-    /*\n-    /********************************************************\n-    /* Helper types\n-    /********************************************************\n-     */\n-\n-    static class ModuleImpl extends SimpleModule\n+    static class SerializerModifierModule extends SimpleModule\n     {\n         protected BeanSerializerModifier modifier;\n         \n-        public ModuleImpl(BeanSerializerModifier modifier)\n+        public SerializerModifierModule(BeanSerializerModifier modifier)\n         {\n             super(\"test\", Version.unknownVersion());\n             this.modifier = modifier;\n         }\n     }\n \n+    // [Issue#539]: use post-modifier\n+    static class EmptyBeanModifier539 extends BeanSerializerModifier\n+    {\n+        @Override\n+        public List<BeanPropertyWriter> changeProperties(SerializationConfig config,\n+                BeanDescription beanDesc, List<BeanPropertyWriter> beanProperties)\n+        {\n+            System.err.println(\"DEBUG: changeProperties!\");\n+            return beanProperties;\n+        }\n+        \n+        @Override\n+        public JsonSerializer<?> modifySerializer(SerializationConfig config,\n+                BeanDescription beanDesc, JsonSerializer<?> serializer) {\n+System.err.println(\"DEBUG: modifySer!\");            \n+            return new BogusBeanSerializer(42);\n+        }\n+    }\n     // [Issue#120], arrays, collections, maps\n     \n     static class ArraySerializerModifier extends BeanSerializerModifier {\n     public void testPropertyRemoval() throws Exception\n     {\n         ObjectMapper mapper = new ObjectMapper();\n-        mapper.registerModule(new ModuleImpl(new RemovingModifier(\"a\")));\n+        mapper.registerModule(new SerializerModifierModule(new RemovingModifier(\"a\")));\n         Bean bean = new Bean();\n         assertEquals(\"{\\\"b\\\":\\\"b\\\"}\", mapper.writeValueAsString(bean));\n     }\n     public void testPropertyReorder() throws Exception\n     {\n         ObjectMapper mapper = new ObjectMapper();\n-        mapper.registerModule(new ModuleImpl(new ReorderingModifier()));\n+        mapper.registerModule(new SerializerModifierModule(new ReorderingModifier()));\n         Bean bean = new Bean();\n         assertEquals(\"{\\\"a\\\":\\\"a\\\",\\\"b\\\":\\\"b\\\"}\", mapper.writeValueAsString(bean));\n     }\n     public void testBuilderReplacement() throws Exception\n     {\n         ObjectMapper mapper = new ObjectMapper();\n-        mapper.registerModule(new ModuleImpl(new BuilderModifier(new BogusBeanSerializer(17))));\n+        mapper.registerModule(new SerializerModifierModule(new BuilderModifier(new BogusBeanSerializer(17))));\n         Bean bean = new Bean();\n         assertEquals(\"17\", mapper.writeValueAsString(bean));\n     }    \n     public void testSerializerReplacement() throws Exception\n     {\n         ObjectMapper mapper = new ObjectMapper();\n-        mapper.registerModule(new ModuleImpl(new ReplacingModifier(new BogusBeanSerializer(123))));\n+        mapper.registerModule(new SerializerModifierModule(new ReplacingModifier(new BogusBeanSerializer(123))));\n         Bean bean = new Bean();\n         assertEquals(\"123\", mapper.writeValueAsString(bean));\n     }\n         assertEquals(\"{\\\"bogus\\\":\\\"foo\\\"}\", json);\n     }\n \n+    // [Issue#539]\n+    public void testEmptyBean539() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(new SimpleModule(\"test\", Version.unknownVersion()) {\n+            @Override\n+            public void setupModule(SetupContext context)\n+            {\n+                super.setupModule(context);\n+                context.addBeanSerializerModifier(new EmptyBeanModifier539());\n+            }\n+        });\n+        String json = mapper.writeValueAsString(new EmptyBean());\n+        assertEquals(\"42\", json);\n+    }\n+    \n     // [Issue#121]\n \n     public void testModifyArraySerializer() throws Exception", "timestamp": 1411078570, "metainfo": ""}