{"sha": "7324b9b96e3bb4821449329b0d8bfec30d271e65", "log": "Add unit tests for [JACKSON-762]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java\n      * serialized as numeric timestamps (true; the default),\n      * or as something else (usually textual representation).\n      * If textual representation is used, the actual format is\n-     * one returned by a call to {@link #getDateFormat}.\n+     * one returned by a call to\n+     * {@link com.fasterxml.jackson.databind.cfg.SerializationConfig#getDateFormat}.\n      *<p>\n      * Note: whether this feature affects handling of other date-related\n      * types depend on handlers of those types, although ideally they\n      * is used; if disabled, return value of <code>Enum.name()</code> is used.\n      *<p>\n      * Note: this feature should usually have same value\n-     * as {@link DeserializationConfig.DeserializationFeature#READ_ENUMS_USING_TO_STRING}.\n+     * as {@link DeserializationFeature#READ_ENUMS_USING_TO_STRING}.\n      *<p>\n      * SerializationFeature is disabled by default.\n      */\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestVisibleTypeId.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestVisibleTypeId.java\n \n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import com.fasterxml.jackson.annotation.JsonTypeName;\n+\n import com.fasterxml.jackson.databind.*;\n \n /**\n- * Tests to verify [JACKSON-437]\n+ * Tests to verify [JACKSON-437], [JACKSON-762]\n  */\n public class TestVisibleTypeId extends BaseMapTest\n {\n \n         public void setType(String t) { type = t; }\n     }\n+\n+    // // // [JACKSON-762]: type id from property\n+    \n+    @JsonTypeInfo(use=JsonTypeInfo.Id.NAME, include=JsonTypeInfo.As.PROPERTY,\n+            property=\"type\")\n+    static class TypeIdFromFieldProperty {\n+        public int a = 3;\n+        public String type = \"SomeType\";\n+    }\n+\n+    @JsonTypeInfo(use=JsonTypeInfo.Id.NAME, include=JsonTypeInfo.As.WRAPPER_ARRAY,\n+            property=\"type\")\n+    static class TypeIdFromFieldArray {\n+        public int a = 3;\n+        public String type = \"SomeType\";\n+    }\n+\n+    @JsonTypeInfo(use=JsonTypeInfo.Id.NAME, include=JsonTypeInfo.As.WRAPPER_OBJECT,\n+            property=\"type\")\n+    static class TypeIdFromMethodObject {\n+        public int a = 3;\n+        public String getType() { return \"SomeType\"; }\n+    }\n+\n+    static class ExternalIdWrapper2 {\n+        @JsonTypeInfo(use=JsonTypeInfo.Id.NAME, include=JsonTypeInfo.As.EXTERNAL_PROPERTY,\n+                property=\"type\", visible=true)\n+        public ExternalIdBean2 bean = new ExternalIdBean2();\n+        public String getType() { return \"SomeType\"; }\n+    }\n+\n+    static class ExternalIdBean2 {\n+        public int a = 2;\n+    }\n     \n     /*\n     /**********************************************************\n         assertEquals(\"ExternalType\", result.bean.type);\n         assertEquals(2, result.bean.a);\n     }\n+\n+    // [JACKSON-762]\n+\n+    public void testTypeIdFromProperty() throws Exception\n+    {\n+        assertEquals(\"{\\\"type\\\":\\\"SomeType\\\":\\\"a\\\":3}\",\n+                mapper.writeValueAsString(new TypeIdFromFieldProperty()));\n+    }\n+\n+    public void testTypeIdFromArray() throws Exception\n+    {\n+        assertEquals(\"[\\\"SomeType\\\",{\\\"a\\\":3}]\",\n+                mapper.writeValueAsString(new TypeIdFromFieldArray()));\n+    }\n+\n+    public void testTypeIdFromObject() throws Exception\n+    {\n+        assertEquals(\"{\\\"SomeType\\\":{\\\"a\\\":3}}\",\n+                mapper.writeValueAsString(new TypeIdFromMethodObject()));\n+    }\n+\n+    public void testTypeIdFromExternal() throws Exception\n+    {\n+        assertEquals(\"{\\\"type\\\":\\\"SomeType\\\":\\\"bean\\\":{\\\"a\\\":2}}\",\n+                mapper.writeValueAsString(new ExternalIdWrapper2()));\n+        \n+    }\n }", "timestamp": 1328248276, "metainfo": ""}