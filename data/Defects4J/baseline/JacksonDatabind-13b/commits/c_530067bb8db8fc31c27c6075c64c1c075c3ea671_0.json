{"sha": "530067bb8db8fc31c27c6075c64c1c075c3ea671", "log": "Remove @JsonCachable, replace with a method", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n     */\n \n     /**\n-     * Method that checks whether specified class has annotations\n-     * that indicate that it is (or is not) cachable. Exact\n-     * semantics depend on type of class annotated and using\n-     * class (factory or provider).\n-     *<p>\n-     * Currently only used\n-     * with deserializers, to determine whether provider\n-     * should cache instances, and if no annotations are found,\n-     * assumes non-cachable instances.\n-     *\n-     * @return True, if class is considered cachable within context,\n-     *   False if not, and null if introspector does not care either\n-     *   way.\n-     */\n-    public Boolean findCachability(AnnotatedClass ac) {\n-        return null;\n-    }\n-\n-    /**\n      * Method for locating name used as \"root name\" (for use by\n      * some serializers when outputting root-level object -- mostly\n      * for XML compatibility purposes) for given class, if one\n         /* General class annotations\n         /******************************************************\n          */\n-\n-        @Override\n-        public Boolean findCachability(AnnotatedClass ac)\n-        {\n-            Boolean result = _primary.findCachability(ac);\n-            if (result == null) {\n-                result = _secondary.findCachability(ac);\n-            }\n-            return result;\n-        }\n \n         @Override\n         public String findRootName(AnnotatedClass ac)\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java\n      * code.\n      * \n      * @param typeDeserializer Deserializer to use for handling type information\n-     * \n-     * @since 1.5\n      */\n     @SuppressWarnings(\"unchecked\")\n     public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,\n      *<p>\n      * Default implementation just returns 'this'\n      * indicating that no unwrapped variant exists\n-     * \n-     * @since 1.9\n      */\n     public JsonDeserializer<T> unwrappingDeserializer() {\n         return this;\n      *<p>\n      * Default implementation simple calls {@link #getNullValue} and\n      * returns value.\n-     * \n-     * @since 1.9\n      */\n     public T getEmptyValue() { return getNullValue(); }\n+\n+    /**\n+     * Method called to see if deserializer instance is cachable and\n+     * usable for other properties of same type (type for which instance\n+     * was created).\n+     *<p>\n+     * Note that cached instances are still resolved on per-property basis,\n+     * if instance implements {@link ResolvableDeserializer}: cached instance\n+     * is just as the base. This means that in most cases it is safe to\n+     * cache instances; however, it only makes sense to cache instances\n+     * if instantiation is expensive, or if instances are heavy-weight.\n+     *<p>\n+     * Default implementation returns false, to indicate that no caching\n+     * is done.\n+     */\n+    public boolean isCachable() { return false; }\n     \n     /*\n     /**********************************************************\n      * Specifically, this class is to be used as the marker for\n      * annotation {@link com.fasterxml.jackson.databind.annotation.JsonDeserialize}\n      */\n-    public abstract static class None\n-        extends JsonDeserializer<Object> { }\n+    public abstract static class None extends JsonDeserializer<Object> {\n+        private None() { } // not to be instantiated\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.annotation.JsonCachable;\n import com.fasterxml.jackson.databind.deser.impl.*;\n import com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase;\n import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n  * arbitrary bean objects, usually from JSON Object structs,\n  * but possibly also from simple types like String values.\n  */\n-@JsonCachable\n-/* Because of costs associated with constructing bean deserializers,\n- * they usually should be cached unlike other deserializer types.\n- * But more importantly, it is important to be able to cache\n- * bean serializers to handle cyclic references.\n- */\n public class BeanDeserializer\n     extends StdDeserializer<Object>\n     implements ResolvableDeserializer\n     /**********************************************************\n      */\n \n+    /**\n+     * Because of costs associated with constructing bean deserializers,\n+     * they usually should be cached unlike other deserializer types.\n+     */\n+    @Override\n+    public boolean isCachable() { return true; }\n+    \n     public boolean hasProperty(String propertyName) {\n         return _beanProperties.find(propertyName) != null;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n import com.fasterxml.jackson.core.JsonNode;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.impl.CreatorCollector;\n-import com.fasterxml.jackson.databind.deser.impl.CreatorProperty;\n import com.fasterxml.jackson.databind.deser.std.JacksonDeserializers;\n import com.fasterxml.jackson.databind.deser.std.ThrowableDeserializer;\n import com.fasterxml.jackson.databind.introspect.*;\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java\n+package com.fasterxml.jackson.databind.deser;\n+\n+import java.io.IOException;\n+import java.lang.annotation.Annotation;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n+import com.fasterxml.jackson.databind.util.Annotations;\n+\n+/**\n+ * This concrete sub-class implements property that is passed\n+ * via Creator (constructor or static factory method).\n+ * It is not a full-featured implementation in that its set method\n+ * should never be called -- instead, value must separately passed.\n+ *<p>\n+ * Note on injectable values (1.9): unlike with other mutators, where\n+ * deserializer and injecting are separate, here we deal the two as related\n+ * things. This is necessary to add proper priority, as well as to simplify\n+ * coordination.\n+ */\n+public class CreatorProperty\n+    extends SettableBeanProperty\n+{\n+    /**\n+     * Placeholder that represents constructor parameter, when it is created\n+     * from actual constructor.\n+     * May be null when a synthetic instance is created.\n+     */\n+    protected final AnnotatedParameter _annotated;\n+\n+    /**\n+     * Id of value to inject, if value injection should be used for this parameter\n+     * (in addition to, or instead of, regular deserialization).\n+     */\n+    protected final Object _injectableValueId;\n+    \n+    /**\n+     * @param name Name of the logical property\n+     * @param type Type of the property, used to find deserializer\n+     * @param typeDeser Type deserializer to use for handling polymorphic type\n+     *    information, if one is needed\n+     * @param contextAnnotations Contextual annotations (usually by class that\n+     *    declares creator [constructor, factory method] that includes\n+     *    this property)\n+     * @param param Representation of property, constructor or factory\n+     *    method parameter; used for accessing annotations of the property\n+     */\n+    public CreatorProperty(String name, JavaType type, TypeDeserializer typeDeser,\n+            Annotations contextAnnotations, AnnotatedParameter param,\n+            int index, Object injectableValueId)\n+    {\n+        super(name, type, typeDeser, contextAnnotations);\n+        _annotated = param;\n+        _propertyIndex = index;\n+        _injectableValueId = injectableValueId;\n+    }\n+\n+    protected CreatorProperty(CreatorProperty src, JsonDeserializer<Object> deser) {\n+        super(src, deser);\n+        _annotated = src._annotated;\n+        _injectableValueId = src._injectableValueId;\n+    }\n+    \n+    @Override\n+    public CreatorProperty withValueDeserializer(JsonDeserializer<Object> deser) {\n+        return new CreatorProperty(this, deser);\n+    }\n+\n+    /**\n+     * Method that can be called to locate value to be injected for this\n+     * property, if it is configured for this.\n+     */\n+    public Object findInjectableValue(DeserializationContext context, Object beanInstance)\n+    {\n+        if (_injectableValueId == null) {\n+            throw new IllegalStateException(\"Property '\"+getName()\n+                    +\"' (type \"+getClass().getName()+\") has no injectable value id configured\");\n+        }\n+        return context.findInjectableValue(_injectableValueId, this, beanInstance);\n+    }\n+    \n+    /**\n+     * Method to find value to inject, and inject it to this property.\n+     */\n+    public void inject(DeserializationContext context, Object beanInstance)\n+        throws IOException\n+    {\n+        set(beanInstance, findInjectableValue(context, beanInstance));\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* BeanProperty impl\n+    /**********************************************************\n+     */\n+    \n+    @Override\n+    public <A extends Annotation> A getAnnotation(Class<A> acls) {\n+        if (_annotated == null) {\n+            return null;\n+        }\n+        return _annotated.getAnnotation(acls);\n+    }\n+\n+    @Override public AnnotatedMember getMember() {  return _annotated; }\n+    \n+    /*\n+    /**********************************************************\n+    /* Overridden methods\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public void deserializeAndSet(JsonParser jp, DeserializationContext ctxt,\n+                                  Object instance)\n+        throws IOException, JsonProcessingException\n+    {\n+        set(instance, deserialize(jp, ctxt));\n+    }\n+\n+    @Override\n+    public void set(Object instance, Object value)\n+        throws IOException\n+    {\n+        /* Hmmmh. Should we return quietly (NOP), or error?\n+         * For now, let's just bail out without fuss.\n+         */\n+        //throw new IllegalStateException(\"Method should never be called on a \"+getClass().getName());\n+    }\n+\n+    @Override\n+    public Object getInjectableValueId() {\n+        return _injectableValueId;\n+    }\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/StdDeserializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/StdDeserializerProvider.java\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.io.SerializedString;\n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.deser.BeanDeserializer;\n import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;\n import com.fasterxml.jackson.databind.introspect.AnnotatedClass;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n      * This can be used to remove memory usage (in case some deserializers are\n      * only used once or so), or to force re-construction of deserializers after\n      * configuration changes for mapper than owns the provider.\n-     * \n-     * @since 1.4\n      */\n     @Override\n     public void flushCachedDeserializers() {\n          */\n         // 08-Jun-2010, tatu: Related to [JACKSON-296], need to avoid caching MapSerializers... so:\n         boolean isResolvable = (deser instanceof ResolvableDeserializer);\n-        boolean addToCache = (deser.getClass() == BeanDeserializer.class);\n-        if (!addToCache) {\n-            // 14-Feb-2011, tatu: As per [JACKSON-487], try fully blocking annotation access:\n-            if (config.isEnabled(DeserializationConfig.Feature.USE_ANNOTATIONS)) {\n-                AnnotationIntrospector aintr = config.getAnnotationIntrospector();\n-                // note: pass 'null' to prevent mix-ins from being used\n-                AnnotatedClass ac = AnnotatedClass.construct(deser.getClass(), aintr, null);\n-                Boolean cacheAnn = aintr.findCachability(ac);\n-                if (cacheAnn != null) {\n-                    addToCache = cacheAnn.booleanValue();\n-                }\n-            }\n-        }\n+        boolean addToCache = deser.isCachable();\n+\n         /* we will temporarily hold on to all created deserializers (to\n          * handle cyclic references, and possibly reuse non-cached\n          * deserializers (list, map))\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java\n      * property types to locate deserializers.\n      *<p>\n      * NOTE: all properties will be of type\n-     * {@link com.fasterxml.jackson.databind.deser.impl.CreatorProperty}.\n+     * {@link com.fasterxml.jackson.databind.deser.CreatorProperty}.\n      */\n     public SettableBeanProperty[] getFromObjectArguments(DeserializationConfig config) {\n         return null;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java\n \n import com.fasterxml.jackson.databind.DeserializationConfig;\n import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.deser.CreatorProperty;\n import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n import com.fasterxml.jackson.databind.deser.std.StdValueInstantiator;\n import com.fasterxml.jackson.databind.introspect.*;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n import com.fasterxml.jackson.databind.DeserializationConfig;\n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n-import com.fasterxml.jackson.databind.annotation.JsonCachable;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n import com.fasterxml.jackson.databind.util.EnumResolver;\n /**\n  * Deserializer class that can deserialize instances of\n  * specified Enum class from Strings and Integers.\n- * \n- * @since 1.9 (moved from higher-level package)\n  */\n-@JsonCachable\n public class EnumDeserializer\n     extends StdScalarDeserializer<Enum<?>>\n {\n      * \n      * @return Deserializer based on given factory method, if type was suitable;\n      *  null if type can not be used\n-     * \n-     * @since 1.6\n      */\n     public static JsonDeserializer<?> deserializerForCreator(DeserializationConfig config,\n             Class<?> enumClass, AnnotatedMethod factory)\n     /**********************************************************\n      */\n \n+    /**\n+     * Because of costs associated with constructing Enum resolvers,\n+     * let's cache instances by default.\n+     */\n+    @Override\n+    public boolean isCachable() { return true; }\n+    \n     @Override\n     public Enum<?> deserialize(JsonParser jp, DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java\n import com.fasterxml.jackson.databind.util.EnumResolver;\n \n /**\n- * \n+ * Deserializer for {@link EnumMap} values.\n  * <p>\n  * Note: casting within this class is all messed up -- just could not figure out a way\n  * to properly deal with recursive definition of \"EnumMap<K extends Enum<K>, V>\n         _valueDeserializer = valueDes;\n     }\n \n+    /**\n+     * Because of costs associated with constructing Enum resolvers,\n+     * let's cache instances by default.\n+     */\n+    @Override\n+    public boolean isCachable() { return true; }\n+    \n     @Override\n     public EnumMap<?,?> deserialize(JsonParser jp, DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java\n  * to properly deal with recursive definition of \"EnumSet<K extends Enum<K>, V>\n  * \n  * @author tsaloranta\n- * \n- * @since 1.9 (moved from higher-level package)\n  */\n @SuppressWarnings(\"rawtypes\")\n public class EnumSetDeserializer\n         _enumClass = (Class<Enum>) ((Class<?>) enumRes.getEnumClass());\n     }\n \n+    /**\n+     * Because of costs associated with constructing Enum resolvers,\n+     * let's cache instances by default.\n+     */\n+    @Override\n+    public boolean isCachable() { return true; }\n+    \n     @SuppressWarnings(\"unchecked\") \n     @Override\n     public EnumSet<?> deserialize(JsonParser jp, DeserializationContext ctxt)\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JacksonDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JacksonDeserializers.java\n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.deser.CreatorProperty;\n import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n-import com.fasterxml.jackson.databind.deser.impl.CreatorProperty;\n import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;\n import com.fasterxml.jackson.databind.util.TokenBuffer;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java\n import com.fasterxml.jackson.databind.DeserializationConfig;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.deser.CreatorProperty;\n import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n-import com.fasterxml.jackson.databind.deser.impl.CreatorProperty;\n import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;\n \n \n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n     /* General class annotations\n     /**********************************************************\n      */\n-\n-    @Override\n-    public Boolean findCachability(AnnotatedClass ac)\n-    {\n-        JsonCachable ann = ac.getAnnotation(JsonCachable.class);\n-        if (ann == null) {\n-            return null;\n-        }\n-        return ann.value() ? Boolean.TRUE : Boolean.FALSE;\n-    }\n \n     @Override\n     public String findRootName(AnnotatedClass ac)\n--- a/src/main/java/com/fasterxml/jackson/databind/module/package-info.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/package-info.java\n  * many cases, but not all. So if you will need to register\n  * handlers for generic types, you will usually need to either\n  * sub-class handlers, or implement/extend base types directly.\n- * \n- * @since 1.7\n  */\n package com.fasterxml.jackson.databind.module;\n--- a/src/test/java/com/fasterxml/jackson/databind/module/TestValueInstantiator.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/module/TestValueInstantiator.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonValueInstantiator;\n import com.fasterxml.jackson.databind.deser.*;\n-import com.fasterxml.jackson.databind.deser.impl.CreatorProperty;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n ", "timestamp": 1325097322, "metainfo": ""}