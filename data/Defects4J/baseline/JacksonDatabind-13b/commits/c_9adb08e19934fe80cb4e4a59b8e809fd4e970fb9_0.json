{"sha": "9adb08e19934fe80cb4e4a59b8e809fd4e970fb9", "log": "Fix #206", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n      * for deserializing a single root value.\n      * Can be overridden if a custom context is needed.\n      */\n-    protected final DefaultDeserializationContext createDeserializationContext(JsonParser jp,\n+    protected DefaultDeserializationContext createDeserializationContext(JsonParser jp,\n             DeserializationConfig cfg)\n     {\n         return _deserializationContext.createInstance(cfg,\n--- a/src/test/java/com/fasterxml/jackson/databind/TestObjectMapper.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestObjectMapper.java\n import java.io.*;\n \n import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonParser;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;\n import com.fasterxml.jackson.databind.node.*;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n \n         public void setX(int v) { value = v; }\n     }\n \n+    // for [Issue#206]\n+    @SuppressWarnings(\"serial\")\n+    static class CustomMapper extends ObjectMapper {\n+        @Override\n+        protected DefaultDeserializationContext createDeserializationContext(JsonParser jp,\n+                DeserializationConfig cfg) {\n+            return super.createDeserializationContext(jp, cfg);\n+        }\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Test methods", "timestamp": 1365722999, "metainfo": ""}