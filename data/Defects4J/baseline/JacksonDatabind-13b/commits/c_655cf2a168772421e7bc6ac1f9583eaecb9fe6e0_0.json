{"sha": "655cf2a168772421e7bc6ac1f9583eaecb9fe6e0", "log": "Merge pull request #59 from pgelinas/hasNext  MappingIterator#hasNext doesn't work properly with wrapped json", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java\n             _hasNextChecked = true;\n             if (t == null) { // un-initialized or cleared; find next\n                 t = _parser.nextToken();\n-                // If EOF, no more\n-                if (t == null) {\n+                // If EOF, no more, or if we hit END_ARRAY (although we don't clear the token).\n+                if (t == null || t == JsonToken.END_ARRAY) {\n                     JsonParser jp = _parser;\n                     _parser = null;\n                     if (_closeParser) {\n                         jp.close();\n                     }\n-                    return false;\n-                }\n-                /* And similarly if we hit END_ARRAY; except that we won't close parser\n-                 * (because it's not a root-level iterator)\n-                 */\n-                if (t == JsonToken.END_ARRAY) {\n                     return false;\n                 }\n             }\n--- a/src/test/java/com/fasterxml/jackson/databind/TestReadValues.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestReadValues.java\n         array = it.next();\n         assertEquals(1, array.length);\n         assertEquals(3, array[0]);\n+        assertFalse(it.hasNext());\n+    }\n+    \n+    public void testHasNextWithEndArray() throws Exception {\n+        final String JSON = \"[1,3]\";\n+        JsonParser jp = MAPPER.getFactory().createJsonParser(JSON);\n+\n+        // NOTE: We must point JsonParser to the first element; if we tried to\n+        // use \"managed\" accessor, it would try to advance past START_ARRAY.\n+        assertToken(JsonToken.START_ARRAY, jp.nextToken());\n+        jp.nextToken();\n+        \n+        Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(jp);\n+        assertTrue(it.hasNext());\n+        int value = it.next();\n+        assertEquals(1, value);\n+        assertTrue(it.hasNext());\n+        value = it.next();\n+        assertEquals(3, value);\n+        assertFalse(it.hasNext());\n+        assertFalse(it.hasNext());\n+    }\n+    \n+    public void testHasNextWithEndArrayManagedParser() throws Exception {\n+        final String JSON = \"[1,3]\";\n+\n+        Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON);\n+        assertTrue(it.hasNext());\n+        int value = it.next();\n+        assertEquals(1, value);\n+        assertTrue(it.hasNext());\n+        value = it.next();\n+        assertEquals(3, value);\n+        assertFalse(it.hasNext());\n         assertFalse(it.hasNext());\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java\n package com.fasterxml.jackson.databind;\n \n+import java.io.Closeable;\n import java.io.IOException;\n import java.util.*;\n \n  * objects. Extension is done to allow more convenient exposing of\n  * {@link IOException} (which basic {@link Iterator} does not expose)\n  */\n-public class MappingIterator<T> implements Iterator<T>\n+public class MappingIterator<T> implements Iterator<T>, Closeable\n {\n     protected final static MappingIterator<?> EMPTY_ITERATOR =\n         new MappingIterator<Object>(null, null, null, null, false, null);\n     public void remove() {\n         throw new UnsupportedOperationException();\n     }\n+    \n+    public void close() throws IOException{\n+        if(_parser != null) {\n+            _parser.close();\n+        }\n+    }\n \n     /*\n     /**********************************************************", "timestamp": 1346175248, "metainfo": ""}