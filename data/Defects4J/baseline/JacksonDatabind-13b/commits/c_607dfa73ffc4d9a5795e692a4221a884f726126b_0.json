{"sha": "607dfa73ffc4d9a5795e692a4221a884f726126b", "log": "Add accessor methods for new `@JsonCreator.mode` annotation", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n import java.lang.annotation.Annotation;\n import java.util.*;\n \n+import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonFormat;\n import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.core.Version;\n         return false;\n     }\n \n+    /**\n+     * Method for finding indication of creator binding mode for\n+     * a creator (something for which {@link #hasCreatorAnnotation} returns\n+     * true), for cases where there may be ambiguity (currently: single-argument\n+     * creator with implicit but no explicit name for the argument).\n+     * \n+     * @since 2.5\n+     */\n+    public JsonCreator.Mode findCreatorBinding(Annotated a) {\n+        return null;\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Overridable methods: may be used as low-level extension\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java\n import java.util.Collection;\n import java.util.List;\n \n+import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonFormat;\n import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.core.Version;\n         return _primary.hasCreatorAnnotation(a) || _secondary.hasCreatorAnnotation(a);\n     }\n \n+    @Override\n+    public JsonCreator.Mode findCreatorBinding(Annotated a) {\n+        JsonCreator.Mode mode = _primary.findCreatorBinding(a);\n+        if (mode != null) {\n+            return mode;\n+        }\n+        return _secondary.findCreatorBinding(a);\n+    }\n+    \n     protected boolean _isExplicitClassOrOb(Object maybeCls, Class<?> implicit) {\n         if (maybeCls == null) {\n             return false;\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n          */\n         return _hasAnnotation(a, JsonCreator.class);\n     }\n-    \n+\n+    @Override\n+    public JsonCreator.Mode findCreatorBinding(Annotated a) {\n+        JsonCreator ann = _findAnnotation(a, JsonCreator.class);\n+        return (ann == null) ? null : ann.mode();\n+    }\n+\n     /*\n     /**********************************************************\n     /* Helper methods\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/NopAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/NopAnnotationIntrospector.java\n         @Override\n         public Version version() {\n             return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION;\n-       }\n+        }\n     };\n \n     @Override\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestGenericTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestGenericTypes.java\n         public Person1(String name) { this.name = name; }\n \n         public String getName() {\n-                return name;\n+            return name;\n         }\n \n         public Key<Account> getAccount() {\n-                return account;\n+            return account;\n         }\n \n         public Long getId() {\n-                return id;\n+            return id;\n         }\n \n         public void setAccount(Key<Account> account) {\n--- a/src/test/java/com/fasterxml/jackson/failing/TestMapJsonValueKey47.java\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestMapJsonValueKey47.java\n package com.fasterxml.jackson.failing;\n \n import java.util.HashMap;\n-import java.util.Map;\n \n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonValue;\n         }\n     }\n \n+    @SuppressWarnings(\"serial\")\n+    static class WatMap extends HashMap<Wat,Boolean> { }\n+    \n     public void testMapJsonValueKey()\n     throws Exception\n     {\n-        Map<Wat, Boolean> input = new HashMap<Wat, Boolean>();\n+        WatMap input = new WatMap();\n         input.put(new Wat(\"3\"), true);\n \n         ObjectMapper mapper = new ObjectMapper();", "timestamp": 1416205525, "metainfo": ""}