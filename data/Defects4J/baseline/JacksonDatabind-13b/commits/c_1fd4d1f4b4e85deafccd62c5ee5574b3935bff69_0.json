{"sha": "1fd4d1f4b4e85deafccd62c5ee5574b3935bff69", "log": "minor fixes to javadoc comments", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n             boolean isVisible =  vchecker.isCreatorVisible(ctor);\n             // some single-arg constructors (String, number) are auto-detected\n             if (argCount == 1) {\n+System.err.println(\"Visible: \"+isVisible+\", \"+ctor);                \n                 PropertyName name = (ctor == propertyCtor) ? ctorPropNames[0] : null;\n                 _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                         ctor, isCreator, isVisible, name);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java\n         final JavaType type = _beanDesc.getType();\n \n         // Any non-standard creator will prevent; with one exception: int-valued constructor\n-        // that standard containers container can be ignored\n+        // that standard containers have can be ignored\n         maybeVanilla &= (_propertyBasedCreator == null)\n                 && (_delegateCreator == null)\n                 && (_stringCreator == null)\n                 ;\n \n         if (maybeVanilla) {\n-        /* 10-May-2014, tatu: If we have nothing special, and we are dealing with one\n-         *   of \"well-known\" types, can create a non-reflection-based instantiator.\n-         */\n+            /* 10-May-2014, tatu: If we have nothing special, and we are dealing with one\n+             *   of \"well-known\" types, can create a non-reflection-based instantiator.\n+             */\n             final Class<?> rawType = type.getRawClass();\n             if (rawType == Collection.class || rawType == List.class || rawType == ArrayList.class) {\n                 return new Vanilla(Vanilla.TYPE_COLLECTION);\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java\n     * Default standard implementation is purely based on visibility\n     * modifier of given class members, and its configured minimum\n     * levels.\n-    * Implemented using \"builder\" (aka \"Fluid\") pattern, whereas instances\n+    * Implemented using \"builder\" (or \"Fluent\") pattern, whereas instances\n     * are immutable, and configuration is achieved by chainable factory\n     * methods. As a result, type is declared is funky recursive generic\n     * type, to allow for sub-classing of build methods with property type", "timestamp": 1403056641, "metainfo": ""}