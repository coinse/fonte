{"sha": "e6faa455fdc0475c62fe268e7dbd39bfebddffd0", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.fasterxml.jackson.databind.util.ArrayBuilders;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n-import com.fasterxml.jackson.databind.util.ISO8601Utils;\n import com.fasterxml.jackson.databind.util.LinkedNode;\n import com.fasterxml.jackson.databind.util.ObjectBuffer;\n \n \n     /*\n     /**********************************************************\n-    /* Configuration, other\n-    /**********************************************************\n-     */\n-\n-    /**\n-     * Locale used for formatting purposes.\n-     */\n-    protected Locale _locale;\n-\n-    /**\n-     * Timezone to use as the default; if not specified, will\n-     * default to GMT\n-     */\n-    protected TimeZone _timezone;\n-\n-    /*\n-    /**********************************************************\n     /* Configuration that gets set for instances (not blueprints)\n     /* (partly denormalized for performance)\n     /**********************************************************\n         _parser = jp;\n         _injectableValues = injectableValues;\n     }\n-\n-    /*\n-    /**********************************************************\n-    /* Public API, mutators\n-    /**********************************************************\n-     */\n-\n-    /**\n-     * @since 2.0\n-     */\n-    public void setLocale(Locale l) {\n-        _locale = l;\n-    }\n-    \n-    /**\n-     * @since 2.0\n-     */\n-    public void setTimeZone(TimeZone tz) {\n-        _timezone = tz;\n-    }\n     \n     /*\n     /**********************************************************\n     }\n \n     /**\n-     * Method for accessing default Locale to use; can be overridden.\n+     * Method for accessing default Locale to use: convenience method for\n+     *<pre>\n+     *   getConfig().getLocale();\n+     *</pre>\n      */\n     public Locale getLocale() {\n-        if (_locale != null) {\n-            return _locale;\n-        }\n-        return Locale.getDefault();\n-    }\n-\n+        return _config.getLocale();\n+    }\n+\n+    /**\n+     * Method for accessing default TimeZone to use: convenience method for\n+     *<pre>\n+     *   getConfig().getTimeZone();\n+     *</pre>\n+     */\n     public TimeZone getTimeZone() {\n-        if (_timezone != null) {\n-            return _timezone;\n-        }\n-        return ISO8601Utils.timeZoneGMT();\n+        return _config.getTimeZone();\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n import com.fasterxml.jackson.databind.ser.std.StdKeySerializers;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n-import com.fasterxml.jackson.databind.util.ISO8601Utils;\n import com.fasterxml.jackson.databind.util.RootNameLookup;\n \n /**\n      * can be defined.\n      */\n     protected JsonSerializer<Object> _nullKeySerializer = DEFAULT_NULL_KEY_SERIALIZER;\n-\n-    /*\n-    /**********************************************************\n-    /* Configuration, other\n-    /**********************************************************\n-     */\n-\n-    /**\n-     * Locale used for formatting purposes.\n-     */\n-    protected Locale _locale;\n-\n-    /**\n-     * Timezone to use as the default; if not specified, will\n-     * default to GMT\n-     */\n-    protected TimeZone _timezone;\n     \n     /*\n     /**********************************************************\n         _nullValueSerializer = src._nullValueSerializer;\n         _nullKeySerializer = src._nullKeySerializer;\n         _rootNames = src._rootNames;\n-        _locale = src._locale;\n-        _timezone = src._timezone;\n \n         /* Non-blueprint instances do have a read-only map; one that doesn't\n          * need synchronization for lookups.\n         }\n         _nullKeySerializer = nks;\n     }\n-\n-    /**\n-     * @since 2.0\n-     */\n-    public void setLocale(Locale l) {\n-        _locale = l;\n-    }\n-    \n-    /**\n-     * @since 2.0\n-     */\n-    public void setTimeZone(TimeZone tz) {\n-        _timezone = tz;\n-    }\n         \n     /*\n     /**********************************************************\n     }\n \n     /**\n-     * Method for accessing default Locale to use; can be overridden.\n+     * Method for accessing default Locale to use: convenience method for\n+     *<pre>\n+     *   getConfig().getLocale();\n+     *</pre>\n      */\n     public Locale getLocale() {\n-        if (_locale != null) {\n-            return _locale;\n-        }\n-        return Locale.getDefault();\n-    }\n-\n+        return _config.getLocale();\n+    }\n+\n+    /**\n+     * Method for accessing default TimeZone to use: convenience method for\n+     *<pre>\n+     *   getConfig().getTimeZone();\n+     *</pre>\n+     */\n     public TimeZone getTimeZone() {\n-        if (_timezone != null) {\n-            return _timezone;\n-        }\n-        return ISO8601Utils.timeZoneGMT();\n+        return _config.getTimeZone();\n     }\n     \n     /*", "timestamp": 1330055082, "metainfo": ""}