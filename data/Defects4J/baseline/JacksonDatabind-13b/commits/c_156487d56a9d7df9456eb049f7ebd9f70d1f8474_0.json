{"sha": "156487d56a9d7df9456eb049f7ebd9f70d1f8474", "log": "start adding support for bean property descriptions", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n      * @since 2.1\n      */\n     public PropertyName findWrapperName(Annotated ann) {\n+        return null;\n+    }\n+\n+    /**\n+     * Method used to check whether specified property member (accessor\n+     * or mutator) defines human-readable description to use for documentation.\n+     * There are no further definitions for contents; for example, whether\n+     * these may be marked up using HTML is not defined.\n+     * \n+     * @return Human-readable description, if any.\n+     * \n+     * @since 2.3\n+     */\n+    public String findPropertyDescription(Annotated ann) {\n         return null;\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n      * @param fromValue Bean value to convert\n      * @return Root node of the resulting JSON tree\n      */\n-    @SuppressWarnings(\"unchecked\")\n+    @SuppressWarnings({ \"unchecked\", \"resource\" })\n     public <T extends JsonNode> T valueToTree(Object fromValue)\n         throws IllegalArgumentException\n     {\n      *<p>\n      * Note: prior to version 2.1, throws clause included {@link IOException}; 2.1 removed it.\n      */\n+    @SuppressWarnings(\"resource\")\n     public String writeValueAsString(Object value)\n         throws JsonProcessingException\n     {        \n      *<p>\n      * Note: prior to version 2.1, throws clause included {@link IOException}; 2.1 removed it.\n      */\n+    @SuppressWarnings(\"resource\")\n     public byte[] writeValueAsBytes(Object value)\n         throws JsonProcessingException\n     {\n      * caller must use explicit <code>writeValue</code> and\n      * <code>readValue</code> methods.\n      */\n+    @SuppressWarnings(\"resource\")\n     protected Object _convert(Object fromValue, JavaType toValueType)\n         throws IllegalArgumentException\n     {        \n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java\n \n import com.fasterxml.jackson.annotation.JsonFormat;\n import com.fasterxml.jackson.annotation.JsonInclude;\n-\n import com.fasterxml.jackson.core.Version;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n         return name;\n     }\n     \n+    @Override\n+    public String findPropertyDescription(Annotated ann)\n+    {\n+        String result = _primary.findPropertyDescription(ann);\n+        if (result == null) {\n+            result = _secondary.findPropertyDescription(ann);\n+        }\n+        return result;\n+    }\n+\n     // // // Serialization: class annotations\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n import java.util.List;\n \n import com.fasterxml.jackson.annotation.*;\n-\n import com.fasterxml.jackson.core.Version;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.*;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n         return (ann == null)  ? null : new JsonFormat.Value(ann);\n     }\n \n+    @Override\n+    public String findPropertyDescription(Annotated annotated)\n+    {\n+        JsonPropertyDescription desc = annotated.getAnnotation(JsonPropertyDescription.class);\n+        return (desc == null) ? null : desc.value();\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Serialization: class annotations", "timestamp": 1374804832, "metainfo": ""}