{"sha": "8bdd49b36c8c05483669f6bd50b3839016f78983", "log": "Complete handling of property description -- need to test still", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n      */\n     @Deprecated\n     public JsonFormat.Value findFormat(AnnotatedMember member) {\n-        return null;\n+        return findFormat((Annotated) member);\n     }\n \n     /**\n      * @since 2.1\n      */\n     public JsonFormat.Value findFormat(Annotated memberOrClass) {\n-        if (memberOrClass instanceof AnnotatedMember) {\n-            return findFormat((AnnotatedMember) memberOrClass);\n-        }\n         return null;\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/BeanDescription.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/BeanDescription.java\n \n     protected BeanDescription(JavaType type)\n     {\n-    \t_type = type;\n+        _type = type;\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java\n      * @since 2.2\n      */\n     public PropertyName getWrapperName();\n+\n+    /**\n+     * Accessor for additional optional information about property.\n+     * \n+     * @since 2.3\n+     */\n+    public PropertyMetadata getMetadata();\n     \n     /**\n      * Whether value for property is marked as required using\n         protected final PropertyName _name;\n         protected final JavaType _type;\n         protected final PropertyName _wrapperName;\n-        \n-        protected final boolean _isRequired;\n+\n+        protected final PropertyMetadata _metadata;\n \n         /**\n          * Physical entity (field, method or constructor argument) that\n \n         public Std(PropertyName name, JavaType type, PropertyName wrapperName,\n                 Annotations contextAnnotations, AnnotatedMember member,\n-                boolean isRequired)\n+                PropertyMetadata metadata)\n         {\n             _name = name;\n             _type = type;\n             _wrapperName = wrapperName;\n-            _isRequired = isRequired;\n+            _metadata = metadata;\n             _member = member;\n             _contextAnnotations = contextAnnotations;\n         }\n                 boolean isRequired)\n         {\n             this(new PropertyName(name), type, wrapperName, contextAnnotations,\n-                    member, isRequired);\n+                    member,\n+                    isRequired ? PropertyMetadata.STD_REQUIRED : PropertyMetadata.STD_OPTIONAL);\n         }\n         \n         public Std withType(JavaType type) {\n-            return new Std(_name, type, _wrapperName, _contextAnnotations, _member, _isRequired);\n+            return new Std(_name, type, _wrapperName, _contextAnnotations, _member, _metadata);\n         }\n         \n         @Override\n         \n         @Override\n         public boolean isRequired() {\n-            return _isRequired;\n+            return _metadata.isRequired();\n+        }\n+\n+        @Override\n+        public PropertyMetadata getMetadata() {\n+            return _metadata;\n         }\n         \n         @Override\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/PropertyMetadata.java\n+package com.fasterxml.jackson.databind;\n+\n+/**\n+ * Simple container class used for storing \"additional\" metadata about\n+ * properties. Carved out to reduce number of distinct properties that\n+ * actual property implementations and placeholders need to store;\n+ * since this instances are immutable, they can be freely shared.\n+ * \n+ * @since 2.3\n+ */\n+public class PropertyMetadata\n+    implements java.io.Serializable\n+{\n+    private static final long serialVersionUID = -1;\n+\n+    public final static PropertyMetadata STD_REQUIRED = new PropertyMetadata(Boolean.TRUE, null);\n+\n+    public final static PropertyMetadata STD_OPTIONAL = new PropertyMetadata(Boolean.FALSE, null);\n+\n+    public final static PropertyMetadata STD_REQUIRED_OR_OPTIONAL = new PropertyMetadata(null, null);\n+    \n+    /**\n+     * Three states: required, not required and unknown; unknown represented\n+     * as null.\n+     */\n+    protected final Boolean _required;\n+\n+    /**\n+     * Optional human-readable description associated with the property.\n+     */\n+    protected final String _description;\n+\n+    /*\n+    /**********************************************************\n+    /* Construction, configuration\n+    /**********************************************************\n+     */\n+    \n+    protected PropertyMetadata(Boolean req, String desc)\n+    {\n+        _required = req;\n+        _description = desc;\n+    }\n+\n+    public static PropertyMetadata construct(boolean req, String desc) {\n+        PropertyMetadata md = req ? STD_REQUIRED : STD_OPTIONAL;\n+        if (desc != null) {\n+            return md.withDescription(desc);\n+        }\n+        return md;\n+    }\n+    \n+    /**\n+     * Minor optimization: let's canonicalize back to placeholders in cases\n+     * where there is no real data to consider\n+     */\n+    protected Object readResolve()\n+    {\n+        if (_description == null) {\n+            if (_required == null) {\n+                return STD_REQUIRED_OR_OPTIONAL;\n+            }\n+            return _required.booleanValue() ? STD_REQUIRED : STD_OPTIONAL;\n+        }\n+        return this;\n+    }\n+\n+    public PropertyMetadata withDescription(String desc) {\n+        return new PropertyMetadata(_required, desc);\n+    }\n+\n+    public PropertyMetadata withRequired(Boolean b) {\n+        if (b == null) {\n+            if (_required == null) {\n+                return this;\n+            }\n+        } else {\n+            if (_required != null && _required.booleanValue() == b.booleanValue()) {\n+                return this;\n+            }\n+        }\n+        return new PropertyMetadata(b, _description);\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Accessors\n+    /**********************************************************\n+     */\n+\n+    public String getDescription() { return _description; }\n+\n+    public boolean isRequired() { return (_required != null) && _required.booleanValue(); }\n+    \n+    public Boolean getRequired() { return _required; }\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n     {\n         final DeserializationConfig config = ctxt.getConfig();\n         final AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();\n-        Boolean b = (intr == null) ? null : intr.hasRequiredMarker(param);\n-        // how to default? Other code assumes missing value means 'false', so:\n-        boolean req = (b == null) ? false : b.booleanValue();\n-\n+        PropertyMetadata metadata;\n+\n+        {\n+            Boolean b = (intr == null) ? null : intr.hasRequiredMarker(param);\n+            boolean req = (b != null && b.booleanValue());\n+            String desc = (intr == null) ? null : intr.findPropertyDescription(param);\n+            metadata = PropertyMetadata.construct(req, desc);\n+        }\n+            \n         JavaType t0 = config.getTypeFactory().constructType(param.getParameterType(), beanDesc.bindingsForBeanType());\n         BeanProperty.Std property = new BeanProperty.Std(name, t0,\n                 intr.findWrapperName(param),\n-                beanDesc.getClassAnnotations(), param, req);\n+                beanDesc.getClassAnnotations(), param, metadata);\n         JavaType type = resolveType(ctxt, beanDesc, t0, param);\n         if (type != t0) {\n             property = property.withType(type);\n \n         CreatorProperty prop = new CreatorProperty(name, type, property.getWrapperName(),\n                 typeDeser, beanDesc.getClassAnnotations(), param, index, injectableValueId,\n-                property.isRequired());\n+                metadata);\n         if (deser != null) {\n             prop = prop.withValueDeserializer(deser);\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n              *   but no easy access. But hard to see id property being optional,\n              *   so let's consider required at this point.\n              */\n-            ObjectIdValueProperty idProp = new ObjectIdValueProperty(oir, true);\n+            ObjectIdValueProperty idProp = new ObjectIdValueProperty(oir, PropertyMetadata.STD_REQUIRED);\n             _beanProperties = src._beanProperties.withProperty(idProp);\n         }\n     }\n             AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();\n             // Need to create a temporary property to allow contextual deserializers:\n             BeanProperty.Std property = new BeanProperty.Std(TEMP_PROPERTY_NAME,\n-                    delegateType, null, _classAnnotations, delegateCreator, false);\n+                    delegateType, null, _classAnnotations, delegateCreator,\n+                    PropertyMetadata.STD_OPTIONAL);\n             _delegateDeserializer = findDeserializer(ctxt, delegateType, property);\n         }\n         \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n              *   but no easy access. But hard to see id property being optional,\n              *   so let's consider required at this point.\n              */\n-            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n+            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, PropertyMetadata.STD_REQUIRED);\n             propertyMap = propertyMap.withProperty(prop);\n         }\n         \n              *   but no easy access. But hard to see id property being optional,\n              *   so let's consider required at this point.\n              */\n-            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n+            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader,\n+                    PropertyMetadata.STD_REQUIRED);\n             propertyMap = propertyMap.withProperty(prop);\n         }\n         \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n         // we know it's a 2-arg method, second arg is the value\n         JavaType type = beanDesc.bindingsForBeanType().resolveType(setter.getGenericParameterType(1));\n         BeanProperty.Std property = new BeanProperty.Std(new PropertyName(setter.getName()),\n-                type, null, beanDesc.getClassAnnotations(), setter, false);\n+                type, null, beanDesc.getClassAnnotations(), setter,\n+                PropertyMetadata.STD_OPTIONAL);\n         type = resolveType(ctxt, beanDesc, type, setter);\n \n         /* AnySetter can be annotated with @JsonClass (etc) just like a\n \n         BeanProperty.Std property = new BeanProperty.Std(propDef.getFullName(),\n                 t0, propDef.getWrapperName(),\n-                beanDesc.getClassAnnotations(), mutator, propDef.isRequired());\n+                beanDesc.getClassAnnotations(), mutator, propDef.getMetadata());\n         JavaType type = resolveType(ctxt, beanDesc, t0, mutator);\n         // did type change?\n         if (type != t0) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java\n \n import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.core.JsonProcessingException;\n-\n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.PropertyMetadata;\n import com.fasterxml.jackson.databind.PropertyName;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;\n             TypeDeserializer typeDeser,\n             Annotations contextAnnotations, AnnotatedParameter param,\n             int index, Object injectableValueId,\n-            boolean isRequired)\n-    {\n-        super(name, type, wrapperName, typeDeser, contextAnnotations, isRequired);\n+            PropertyMetadata metadata)\n+    {\n+        super(name, type, wrapperName, typeDeser, contextAnnotations, metadata);\n         _annotated = param;\n         _creatorIndex = index;\n         _injectableValueId = injectableValueId;\n             boolean isRequired)\n     {\n         this(new PropertyName(name), type, wrapperName, typeDeser,\n-                contextAnnotations, param, index, injectableValueId, isRequired);\n+                contextAnnotations, param, index, injectableValueId,\n+                PropertyMetadata.construct(isRequired, null));\n     }\n     \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n import com.fasterxml.jackson.databind.util.ViewMatcher;\n \n /**\n- * Base class for deserilizable properties of a bean: contains\n+ * Base class for deserializable properties of a bean: contains\n  * both type and name definitions, and reflection-based set functionality.\n  * Concrete sub-classes implement details, so that field- and\n  * setter-backed properties, as well as a few more esoteric variations,\n     protected final NullProvider _nullProvider;\n \n     /**\n-     * Whether value of this property has been marked as required.\n-     * Retained since it will be needed when traversing type hierarchy\n-     * for producing schemas (and other similar tasks); currently not\n-     * used for serialization.\n-     * \n-     * @since 2.2\n-     */\n-    protected final boolean _isRequired;\n+     * Additional optional property metadata, such as whether\n+     * property is required, and whether there is additional\n+     * human-readable description\n+     * \n+     * @since 2.3\n+     */\n+    protected final PropertyMetadata _metadata;\n \n     /*\n     /**********************************************************\n     protected SettableBeanProperty(BeanPropertyDefinition propDef,\n             JavaType type, TypeDeserializer typeDeser, Annotations contextAnnotations)\n     {\n-        this(propDef.getName(), type, propDef.getWrapperName(), typeDeser, contextAnnotations,\n-                propDef.isRequired());\n+        this(propDef.getFullName(), type, propDef.getWrapperName(), typeDeser,\n+                contextAnnotations, propDef.getMetadata());\n     }\n \n     @Deprecated // since 2.2\n     protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n             TypeDeserializer typeDeser, Annotations contextAnnotations)\n     {\n-        this(new PropertyName(propName), type, wrapper, typeDeser, contextAnnotations, false);\n+        this(new PropertyName(propName), type, wrapper, typeDeser, contextAnnotations,\n+                PropertyMetadata.STD_OPTIONAL);\n     }\n \n     @Deprecated // since 2.3\n             TypeDeserializer typeDeser, Annotations contextAnnotations,\n             boolean isRequired)\n     {\n-        this(new PropertyName(propName), type, wrapper, typeDeser, contextAnnotations, isRequired);\n+        this(new PropertyName(propName), type, wrapper, typeDeser, contextAnnotations,\n+                PropertyMetadata.construct(isRequired, null));\n     }\n     \n     protected SettableBeanProperty(PropertyName propName, JavaType type, PropertyName wrapper,\n             TypeDeserializer typeDeser, Annotations contextAnnotations,\n-            boolean isRequired)\n+            PropertyMetadata metadata)\n     {\n         // 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         //  field names are (usually) interned too, hence lookups will be faster.\n         }\n         _type = type;\n         _wrapperName = wrapper;\n-        _isRequired = isRequired;\n+        _metadata = metadata;\n         _contextAnnotations = contextAnnotations;\n         _viewMatcher = null;\n         _nullProvider = null;\n      * @since 2.3\n      */\n     protected SettableBeanProperty(PropertyName propName, JavaType type, \n-            boolean isRequired, JsonDeserializer<Object> valueDeser)\n+            PropertyMetadata metadata, JsonDeserializer<Object> valueDeser)\n     {\n         // as with above ctor, intern()ing probably fine\n         if (propName == null) {\n         }\n         _type = type;\n         _wrapperName = null;\n-        _isRequired = isRequired;\n+        _metadata = metadata;\n         _contextAnnotations = null;\n         _viewMatcher = null;\n         _nullProvider = null;\n         _propName = src._propName;\n         _type = src._type;\n         _wrapperName = src._wrapperName;\n-        _isRequired = src._isRequired;\n+        _metadata = src._metadata;\n         _contextAnnotations = src._contextAnnotations;\n         _valueDeserializer = src._valueDeserializer;\n         _valueTypeDeserializer = src._valueTypeDeserializer;\n         _propName = src._propName;\n         _type = src._type;\n         _wrapperName = src._wrapperName;\n-        _isRequired = src._isRequired;\n+        _metadata = src._metadata;\n         _contextAnnotations = src._contextAnnotations;\n         _valueTypeDeserializer = src._valueTypeDeserializer;\n         _managedReferenceName = src._managedReferenceName;\n         _propName = newName;\n         _type = src._type;\n         _wrapperName = src._wrapperName;\n-        _isRequired = src._isRequired;\n+        _metadata = src._metadata;\n         _contextAnnotations = src._contextAnnotations;\n         _valueDeserializer = src._valueDeserializer;\n         _valueTypeDeserializer = src._valueTypeDeserializer;\n     }\n     \n     @Override\n-    public boolean isRequired() { return _isRequired; }\n+    public boolean isRequired() { return _metadata.isRequired(); }\n+\n+    @Override\n+    public PropertyMetadata getMetadata() { return _metadata; }\n     \n     @Override\n     public JavaType getType() { return _type; }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ManagedReferenceProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ManagedReferenceProperty.java\n     {\n         super(forward.getFullName(), forward.getType(), forward.getWrapperName(),\n                 forward.getValueTypeDeserializer(), contextAnnotations,\n-                forward.isRequired());\n+                forward.getMetadata());\n         _referenceName = refName;\n         _managedProperty = forward;\n         _backProperty = backward;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java\n \n import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.core.JsonProcessingException;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.*;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n \n     @Deprecated // since 2.2\n     public ObjectIdValueProperty(ObjectIdReader objectIdReader) {\n-        this(objectIdReader, true);\n+        this(objectIdReader, PropertyMetadata.STD_REQUIRED);\n     }\n     \n     public ObjectIdValueProperty(ObjectIdReader objectIdReader,\n-            boolean isRequired)\n+            PropertyMetadata metadata)\n     {\n-        super(objectIdReader.propertyName, objectIdReader.idType, isRequired,\n+        super(objectIdReader.propertyName, objectIdReader.idType, metadata,\n                 objectIdReader.deserializer);\n         _objectIdReader = objectIdReader;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ValueInjector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ValueInjector.java\n import com.fasterxml.jackson.databind.BeanProperty;\n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.PropertyMetadata;\n import com.fasterxml.jackson.databind.PropertyName;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.util.Annotations;\n             Annotations contextAnnotations, AnnotatedMember mutator,\n             Object valueId)\n     {\n-        super(propName, type, null, contextAnnotations, mutator, false);\n+        super(propName, type, null, contextAnnotations, mutator,\n+                PropertyMetadata.STD_OPTIONAL);\n         _valueId = valueId;\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JacksonDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JacksonDeserializers.java\n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.PropertyMetadata;\n import com.fasterxml.jackson.databind.PropertyName;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.deser.CreatorProperty;\n \n         private static CreatorProperty creatorProp(String name, JavaType type, int index) {\n             return new CreatorProperty(new PropertyName(name), type, null,\n-                    null, null, null, index, null, true);\n+                    null, null, null, index, null, PropertyMetadata.STD_REQUIRED);\n         }\n         \n         @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n \n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n import com.fasterxml.jackson.databind.BeanProperty;\n+import com.fasterxml.jackson.databind.PropertyMetadata;\n import com.fasterxml.jackson.databind.PropertyName;\n import com.fasterxml.jackson.databind.util.Named;\n \n     public abstract PropertyName getWrapperName();\n \n     /**\n+     * Method for accessing additional metadata.\n+     * NOTE: will never return null, so deferencing return value\n+     * is safe.\n+     * \n+     * @since 2.3\n+     */\n+    public abstract PropertyMetadata getMetadata();\n+    \n+    /**\n      * Accessor that can be called to check whether property was included\n      * due to an explicit marker (usually annotation), or just by naming\n      * convention.\n      * fail deserialization), or handled by other means (by providing default\n      * value)\n      */\n-    public boolean isRequired() {\n-        return false;\n+    public final boolean isRequired() {\n+        PropertyMetadata md = getMetadata();\n+        return (md != null)  && md.isRequired();\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n     }\n     \n     @Override\n-    public JsonFormat.Value findFormat(AnnotatedMember member) {\n-        return findFormat(member);\n-    }\n-    \n-    @Override\n     public JsonFormat.Value findFormat(Annotated annotated) {\n         JsonFormat ann = annotated.getAnnotation(JsonFormat.class);\n         return (ann == null)  ? null : new JsonFormat.Value(ann);\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n package com.fasterxml.jackson.databind.introspect;\n \n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n+import com.fasterxml.jackson.databind.PropertyMetadata;\n import com.fasterxml.jackson.databind.PropertyName;\n import com.fasterxml.jackson.databind.util.BeanUtil;\n \n     }\n \n     @Override\n-    public boolean isRequired() {\n+    public PropertyMetadata getMetadata() {\n+        return PropertyMetadata.construct(_isRequired(), _findDescription());\n+    }\n+\n+    protected boolean _isRequired() {\n         Boolean b = fromMemberAnnotations(new WithMember<Boolean>() {\n             @Override\n             public Boolean withMember(AnnotatedMember member) {\n         });\n         return (b != null) && b.booleanValue();\n     }\n-\n+    \n+    protected String _findDescription() {\n+        return fromMemberAnnotations(new WithMember<String>() {\n+            @Override\n+            public String withMember(AnnotatedMember member) {\n+                return _annotationIntrospector.findPropertyDescription(member);\n+            }\n+        });\n+    }\n+    \n     @Override\n     public ObjectIdInfo findObjectIdInfo() {\n         return fromMemberAnnotations(new WithMember<ObjectIdInfo>() {\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonObjectFormatVisitor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonObjectFormatVisitor.java\n \n public interface JsonObjectFormatVisitor extends JsonFormatVisitorWithSerializerProvider\n {\n+    /**\n+     * Callback method called when a POJO property is being traversed.\n+     */\n     public void property(BeanProperty writer) throws JsonMappingException;\n+\n+    /**\n+     * Callback method called when a non-POJO property (typically something\n+     * like an Enum entry of {@link java.util.EnumMap} type) is being\n+     * traversed. With POJOs, {@link #property(BeanProperty)} is called instead.\n+     */\n     public void property(String name, JsonFormatVisitable handler, JavaType propertyTypeHint) throws JsonMappingException;\n-\n-    @Deprecated\n-    public void property(String name) throws JsonMappingException;\n \n     public void optionalProperty(BeanProperty writer) throws JsonMappingException;\n     public void optionalProperty(String name, JsonFormatVisitable handler,\n             JavaType propertyTypeHint)\n         throws JsonMappingException;\n-\n-    @Deprecated\n-    public void optionalProperty(String name) throws JsonMappingException;\n \n     /**\n      * Default \"empty\" implementation, useful as the base to start on;\n         public void property(String name, JsonFormatVisitable handler,\n                 JavaType propertyTypeHint) throws JsonMappingException { }\n \n-        @Deprecated\n-        @Override\n-        public void property(String name) throws JsonMappingException { }\n-\n         @Override\n         public void optionalProperty(BeanProperty prop)\n                 throws JsonMappingException { }\n         @Override\n         public void optionalProperty(String name, JsonFormatVisitable handler,\n                 JavaType propertyTypeHint) throws JsonMappingException { }\n-\n-        @Deprecated\n-        @Override\n-        public void optionalProperty(String name) throws JsonMappingException { }\n     }\n }\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/package-info.java\n+/**\n+ * Classes used for exposing logical structure of POJOs as Jackson\n+ * sees it, and exposed via\n+ * {@link com.fasterxml.jackson.databind.ObjectMapper#acceptJsonFormatVisitor(Class, JsonFormatVisitorWrapper)}\n+ * and\n+ * {@link com.fasterxml.jackson.databind.ObjectMapper#acceptJsonFormatVisitor(com.fasterxml.jackson.databind.JavaType, JsonFormatVisitorWrapper)}\n+ * methods.\n+ *<p>\n+ * The main entrypoint for code, then, is {@link com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper} and other\n+ * types are recursively needed during traversal.\n+ */\n+package com.fasterxml.jackson.databind.jsonFormatVisitors;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n      * is null), we will use a lookup structure for storing dynamically\n      * resolved mapping from type(s) to serializer(s).\n      */\n-    protected PropertySerializerMap _dynamicSerializers;\n+    protected transient PropertySerializerMap _dynamicSerializers;\n \n     /**\n      * Whether null values are to be suppressed (nothing written out if\n     protected JavaType _nonTrivialBaseType;\n \n     /**\n-     * Whether value of this property has been marked as required.\n-     * Retained since it will be needed when traversing type hierarchy\n-     * for producing schemas (and other similar tasks); currently not\n-     * used for serialization.\n-     * \n-     * @since 2.2\n-     */\n-    protected final boolean _isRequired;\n-    \n+     * Additional information about property\n+     * \n+     * @since 2.3\n+     */\n+    protected final PropertyMetadata _metadata;\n+\n     /*\n     /**********************************************************\n     /* Construction, configuration\n             JsonSerializer<?> ser, TypeSerializer typeSer, JavaType serType,\n             boolean suppressNulls, Object suppressableValue)\n     {\n-        \n         _member = member;\n         _contextAnnotations = contextAnnotations;\n         _name = new SerializedString(propDef.getName());\n         _dynamicSerializers = (ser == null) ? PropertySerializerMap.emptyMap() : null;\n         _typeSerializer = typeSer;\n         _cfgSerializationType = serType;\n-        _isRequired = propDef.isRequired();\n+        _metadata = propDef.getMetadata();\n \n         if (member instanceof AnnotatedField) {\n             _accessorMethod = null;\n         _includeInViews = base._includeInViews;\n         _typeSerializer = base._typeSerializer;\n         _nonTrivialBaseType = base._nonTrivialBaseType;\n-        _isRequired = base._isRequired;\n+        _metadata = base._metadata;\n     }\n \n     public BeanPropertyWriter rename(NameTransformer transformer) {\n \n     @Override\n     public boolean isRequired() {\n-        return _isRequired;\n+        return _metadata.isRequired();\n+    }\n+\n+    @Override\n+    public PropertyMetadata getMetadata() {\n+        return _metadata;\n     }\n     \n     @Override\n      */\n     @Deprecated\n     protected boolean isRequired(AnnotationIntrospector intr) {\n-        return _isRequired;\n+        return _metadata.isRequired();\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n             // TODO: can we find full PropertyName?\n             PropertyName name = new PropertyName(anyGetter.getName());\n             BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null,\n-                    beanDesc.getClassAnnotations(), anyGetter, false);\n+                    beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n             builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n         }\n         // Next: need to gather view information, if any:\n         }\n         JavaType type = accessor.getType(typeContext);\n         BeanProperty.Std property = new BeanProperty.Std(name, type, propDef.getWrapperName(),\n-                pb.getClassAnnotations(), accessor, propDef.isRequired());\n+                pb.getClassAnnotations(), accessor, propDef.getMetadata());\n \n         // Does member specify a serializer? If so, let's use it.\n         JsonSerializer<?> annotatedSerializer = findSerializerFromAnnotation(prov,\n--- a/src/main/java/com/fasterxml/jackson/databind/util/SimpleBeanPropertyDefinition.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/SimpleBeanPropertyDefinition.java\n package com.fasterxml.jackson.databind.util;\n \n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n+import com.fasterxml.jackson.databind.PropertyMetadata;\n import com.fasterxml.jackson.databind.PropertyName;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n import com.fasterxml.jackson.databind.introspect.*;\n     // hmmh. what should we claim here?\n     @Override\n     public boolean isExplicitlyIncluded() { return false; }\n+\n+    /**\n+     * We will indicate that property is optional, since there is nothing\n+     * to indicate whether it might be required.\n+     */\n+    @Override\n+    public PropertyMetadata getMetadata() {\n+        return PropertyMetadata.STD_OPTIONAL;\n+    }\n     \n     /*\n     /**********************************************************\n--- a/src/test/java/com/fasterxml/jackson/databind/creators/TestValueInstantiator.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestValueInstantiator.java\n         public CreatorProperty[] getFromObjectArguments(DeserializationConfig config) {\n             return  new CreatorProperty[] {\n                     new CreatorProperty(new PropertyName(\"type\"), config.constructType(Class.class), null,\n-                            null, null, null, 0, null, true)\n+                            null, null, null, 0, null,\n+                            PropertyMetadata.STD_REQUIRED)\n             };\n         }\n \n         public CreatorProperty[] getFromObjectArguments(DeserializationConfig config) {\n             return  new CreatorProperty[] {\n                     new CreatorProperty(new PropertyName(\"name\"), config.constructType(String.class), null,\n-                            null, null, null, 0, null, true)\n+                            null, null, null, 0, null,\n+                            PropertyMetadata.STD_REQUIRED)\n             };\n         }\n \n                     public CreatorProperty[] getFromObjectArguments(DeserializationConfig config) {\n                         return  new CreatorProperty[] {\n                                 new CreatorProperty(new PropertyName(\"secret\"), config.constructType(String.class), null,\n-                                        null, null, null, 0, null, true)\n+                                        null, null, null, 0, null,\n+                                        PropertyMetadata.STD_REQUIRED)\n                         };\n                     }\n         ", "timestamp": 1374880712, "metainfo": ""}