{"sha": "9439a310c169a00cd01a4e9b64fb9f5441297b96", "log": "More work on converters for deserialization; now passes 2/6 of new tests. Also adding 'DatabindContext', shared base class for DeserializationContext, SerializerProvider", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/BeanDescription.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/BeanDescription.java\n      * Method for finding {@link Converter} used for serializing instances\n      * of this class.\n      * \n-     * @since 2.1\n+     * @since 2.2\n      */\n     public abstract Converter<Object,Object> findSerializationConverter();\n-    \n+\n+    /**\n+     * Method for finding {@link Converter} used for serializing instances\n+     * of this class.\n+     * \n+     * @since 2.2\n+     */\n+    public abstract Converter<Object,Object> findDeserializationConverter();\n+\n     /*\n     /**********************************************************\n     /* Basic API, other\n--- a/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java\n     /**\n      * Method to get logical name of the property\n      */\n-//  @Override\n+    @Override\n     public String getName();\n     \n     /**\n             return new Std(_name, type, _contextAnnotations, _member);\n         }\n         \n-//        @Override\n+        @Override\n         public <A extends Annotation> A getAnnotation(Class<A> acls) {\n             return (_member == null) ? null : _member.getAnnotation(acls);\n         }\n \n-//        @Override\n+        @Override\n         public <A extends Annotation> A getContextAnnotation(Class<A> acls) {\n             return (_contextAnnotations == null) ? null : _contextAnnotations.get(acls);\n         }\n         \n-//      @Override\n+        @Override\n         public String getName() {\n             return _name;\n         }\n \n-//      @Override\n+        @Override\n         public JavaType getType() {\n             return _type;\n         }\n \n-//      @Override\n+        @Override\n         public boolean isRequired() {\n             // !!! TODO (maybe): allow changing\n             return false;\n         }\n         \n-//      @Override\n+        @Override\n         public AnnotatedMember getMember() {\n             return _member;\n         }\n          * implementation should not be used as part of actual structure\n          * visited. Rather, other implementations should handle it.\n          */\n-//      @Override\n+        @Override\n         public void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor) {\n             throw new UnsupportedOperationException(\"Instances of \"+getClass().getName()\n                     +\" should not get visited\");\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/DatabindContext.java\n+package com.fasterxml.jackson.databind;\n+\n+import java.lang.reflect.Type;\n+\n+import com.fasterxml.jackson.databind.cfg.MapperConfig;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n+\n+/**\n+ * Shared base class for {@link DeserializationContext} and\n+ * {@link SerializerProvider}, context objects passed through data-binding\n+ * process. Designed so that some of implementations can rely on shared\n+ * aspects like access to secondary contextual objects like type factories\n+ * or handler instantiators.\n+ * \n+ * @since 2.2\n+ */\n+public abstract class DatabindContext\n+{\n+    /*\n+    /**********************************************************\n+    /* Generic config access\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Accessor to currently active configuration (both per-request configs\n+     * and per-mapper config).\n+     */\n+    public abstract MapperConfig<?> getConfig();\n+\n+    /**\n+     * Convenience method for accessing serialization view in use (if any); equivalent to:\n+     *<pre>\n+     *   getConfig().getAnnotationIntrospector();\n+     *</pre>\n+     */\n+    public abstract AnnotationIntrospector getAnnotationIntrospector();\n+    \n+    /*\n+    /**********************************************************\n+    /* Access to specific config settings\n+    /**********************************************************\n+     */\n+    \n+    /**\n+     * Convenience method for checking whether specified serialization\n+     * feature is enabled or not.\n+     * Shortcut for:\n+     *<pre>\n+     *  getConfig().isEnabled(feature);\n+     *</pre>\n+     */\n+    public final boolean isEnabled(MapperFeature feature) {\n+        return getConfig().isEnabled(feature);\n+    }\n+\n+    /**\n+     * Convenience method for accessing serialization view in use (if any); equivalent to:\n+     *<pre>\n+     *   getConfig().canOverrideAccessModifiers();\n+     *</pre>\n+     */\n+    public final boolean canOverrideAccessModifiers() {\n+        return getConfig().canOverrideAccessModifiers();\n+    }\n+\n+    /**\n+     * Accessor for locating currently active view, if any;\n+     * returns null if no view has been set.\n+     */\n+    public abstract Class<?> getActiveView();\n+    \n+    /*\n+    /**********************************************************\n+    /* Type instantiation/resolution\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Convenience method for constructing {@link JavaType} for given JDK\n+     * type (usually {@link java.lang.Class})\n+     */\n+    public JavaType constructType(Type type) {\n+         return getTypeFactory().constructType(type);\n+    }\n+\n+    /**\n+     * Convenience method for constructing subtypes, retaining generic\n+     * type parameter (if any)\n+     */\n+    public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass) {\n+        return getConfig().constructSpecializedType(baseType, subclass);\n+    }\n+\n+    public abstract TypeFactory getTypeFactory();\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n  * for reconfiguring blueprints and creating instances.\n  */\n public abstract class DeserializationContext\n+    extends DatabindContext\n     implements java.io.Serializable\n {\n     private static final long serialVersionUID = -7727373309391091315L;\n         _parser = jp;\n         _injectableValues = injectableValues;\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* DatabindContext implementation\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public DeserializationConfig getConfig() { return _config; }\n+\n+    @Override\n+    public final Class<?> getActiveView() { return _view; }\n+\n+    @Override\n+    public final AnnotationIntrospector getAnnotationIntrospector() {\n+        return _config.getAnnotationIntrospector();\n+    }\n+\n+    @Override\n+    public final TypeFactory getTypeFactory() {\n+        return _config.getTypeFactory();\n+    }\n     \n     /*\n     /**********************************************************\n     public DeserializerFactory getFactory() {\n         return _factory;\n     }\n-\n-    /**\n-     * Method for accessing configuration setting object for\n-     * currently active deserialization.\n-     */\n-    public DeserializationConfig getConfig() { return _config; }\n-\n+    \n     /**\n      * Convenience method for checking whether specified on/off\n      * feature is enabled\n          *   let's use a local copy of feature settings:\n          */\n         return (_featureFlags & feat.getMask()) != 0;\n-    }\n-\n-    public final boolean isEnabled(MapperFeature feat) {\n-        return _config.isEnabled(feat);\n-    }\n-    \n-    public final AnnotationIntrospector getAnnotationIntrospector() {\n-        return _config.getAnnotationIntrospector();\n     }\n \n     /**\n     }\n \n     /**\n-     * Accessor for locating currently active view, if any;\n-     * returns null if no view has been set.\n-     */\n-    public final Class<?> getActiveView() {\n-        return _view;\n-    }\n-\n-    /**\n-     * Convenience method, functionally equivalent to:\n-     *<pre>\n-     *  getConfig().canOverrideAccessModifiers();\n-     * </pre>\n-     */\n-    public final boolean canOverrideAccessModifiers() {\n-        return _config.canOverrideAccessModifiers();\n-    }\n-\n-    /**\n      * Convenience method for accessing the default Base64 encoding\n      * used for decoding base64 encoded binary content.\n      * Same as calling:\n      */\n     public final JsonNodeFactory getNodeFactory() {\n         return _config.getNodeFactory();\n-    }\n-\n-    /**\n-     * Convenience method, functionally equivalent to:\n-     *<pre>\n-     *  getConfig().getTypeFactory();\n-     * </pre>\n-     */\n-    public final TypeFactory getTypeFactory() {\n-        return _config.getTypeFactory();\n     }\n \n     /**\n     public abstract ObjectIdGenerator<?> objectIdGeneratorInstance(Annotated annotated,\n             ObjectIdInfo objectIdInfo)\n         throws JsonMappingException;\n-    \n+\n+    /**\n+     * @since 2.2\n+     */\n+    public abstract Converter<Object,Object> converterInstance(Annotated annotated,\n+            Object converterDef)\n+        throws JsonMappingException;    \n+\n     /*\n     /**********************************************************\n     /* Public API, helper object recycling\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java\n         _defaultState = defaultState;\n     }\n \n-//  @Override\n+    @Override\n     public boolean enabledByDefault() { return _defaultState; }\n \n-//  @Override\n+    @Override\n     public int getMask() { return (1 << ordinal()); }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n      * convenience \"for-each\" loop can be used for looping over elements\n      * of JSON Array constructs.\n      */\n+    @Override\n     public final Iterator<JsonNode> iterator() { return elements(); }\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java\n      * \n      * @since 2.1\n      */\n+    @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType type)\n         throws JsonMappingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java\n         _defaultState = defaultState;\n     }\n     \n-//  @Override\n+    @Override\n     public boolean enabledByDefault() { return _defaultState; }\n \n-//  @Override\n+    @Override\n     public int getMask() { return (1 << ordinal()); }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java\n     /**********************************************************\n      */\n \n-//  @Override\n+    @Override\n     public boolean hasNext()\n     {\n         try {\n         }\n     }\n \n-//  @Override\n+    @Override\n     public T next()\n     {\n         try {\n         }\n     }\n \n-//  @Override\n+    @Override\n     public void remove() {\n         throw new UnsupportedOperationException();\n     }\n     \n+    @Override\n     public void close() throws IOException{\n         if(_parser != null) {\n             _parser.close();\n--- a/src/main/java/com/fasterxml/jackson/databind/Module.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/Module.java\n      * Method that returns version of this module. Can be used by Jackson for\n      * informational purposes.\n      */\n-//  @Override\n+    @Override\n     public abstract Version version();\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n         {\n             // // // Accessors\n \n-//          @Override\n+            @Override\n             public Version getMapperVersion() {\n                 return version();\n             }\n \n             @SuppressWarnings(\"unchecked\")\n-//          @Override\n+            @Override\n             public <C extends ObjectCodec> C getOwner() {\n                 // why do we need the cast here?!?\n                 return (C) mapper;\n             }\n \n-//          @Override\n+            @Override\n             public TypeFactory getTypeFactory() {\n                 return _typeFactory;\n             }\n             \n-//          @Override\n+            @Override\n             public boolean isEnabled(MapperFeature f) {\n                 return mapper.isEnabled(f);\n             }\n \n-//          @Override\n+            @Override\n             public boolean isEnabled(DeserializationFeature f) {\n                 return mapper.isEnabled(f);\n             }\n             \n-//          @Override\n+            @Override\n             public boolean isEnabled(SerializationFeature f) {\n                 return mapper.isEnabled(f);\n             }\n \n-//          @Override\n+            @Override\n             public boolean isEnabled(JsonFactory.Feature f) {\n                 return mapper.isEnabled(f);\n             }\n \n-//          @Override\n+            @Override\n             public boolean isEnabled(JsonParser.Feature f) {\n                 return mapper.isEnabled(f);\n             }\n             \n-//          @Override\n+            @Override\n             public boolean isEnabled(JsonGenerator.Feature f) {\n                 return mapper.isEnabled(f);\n             }\n             \n             // // // Methods for registering handlers: deserializers\n             \n-//          @Override\n+            @Override\n             public void addDeserializers(Deserializers d) {\n                 DeserializerFactory df = mapper._deserializationContext._factory.withAdditionalDeserializers(d);\n                 mapper._deserializationContext = mapper._deserializationContext.with(df);\n             }\n \n-//          @Override\n+            @Override\n             public void addKeyDeserializers(KeyDeserializers d) {\n                 DeserializerFactory df = mapper._deserializationContext._factory.withAdditionalKeyDeserializers(d);\n                 mapper._deserializationContext = mapper._deserializationContext.with(df);\n             }\n \n-//          @Override\n+            @Override\n             public void addBeanDeserializerModifier(BeanDeserializerModifier modifier) {\n                 DeserializerFactory df = mapper._deserializationContext._factory.withDeserializerModifier(modifier);\n                 mapper._deserializationContext = mapper._deserializationContext.with(df);\n             \n             // // // Methods for registering handlers: serializers\n             \n-//          @Override\n+            @Override\n             public void addSerializers(Serializers s) {\n                 mapper._serializerFactory = mapper._serializerFactory.withAdditionalSerializers(s);\n             }\n \n-//          @Override\n+            @Override\n             public void addKeySerializers(Serializers s) {\n                 mapper._serializerFactory = mapper._serializerFactory.withAdditionalKeySerializers(s);\n             }\n             \n-//          @Override\n+            @Override\n             public void addBeanSerializerModifier(BeanSerializerModifier modifier) {\n                 mapper._serializerFactory = mapper._serializerFactory.withSerializerModifier(modifier);\n             }\n \n             // // // Methods for registering handlers: other\n             \n-//          @Override\n+            @Override\n             public void addAbstractTypeResolver(AbstractTypeResolver resolver) {\n                 DeserializerFactory df = mapper._deserializationContext._factory.withAbstractTypeResolver(resolver);\n                 mapper._deserializationContext = mapper._deserializationContext.with(df);\n             }\n \n-//          @Override\n+            @Override\n             public void addTypeModifier(TypeModifier modifier) {\n                 TypeFactory f = mapper._typeFactory;\n                 f = f.withModifier(modifier);\n                 mapper.setTypeFactory(f);\n             }\n \n-//          @Override\n+            @Override\n             public void addValueInstantiators(ValueInstantiators instantiators) {\n                 DeserializerFactory df = mapper._deserializationContext._factory.withValueInstantiators(instantiators);\n                 mapper._deserializationContext = mapper._deserializationContext.with(df);\n             }\n \n-//          @Override\n+            @Override\n             public void setClassIntrospector(ClassIntrospector ci) {\n                 mapper._deserializationConfig = mapper._deserializationConfig.with(ci);\n                 mapper._serializationConfig = mapper._serializationConfig.with(ci);\n             }\n \n-//          @Override\n+            @Override\n             public void insertAnnotationIntrospector(AnnotationIntrospector ai) {\n                 mapper._deserializationConfig = mapper._deserializationConfig.withInsertedAnnotationIntrospector(ai);\n                 mapper._serializationConfig = mapper._serializationConfig.withInsertedAnnotationIntrospector(ai);\n             }\n             \n-//          @Override\n+            @Override\n             public void appendAnnotationIntrospector(AnnotationIntrospector ai) {\n                 mapper._deserializationConfig = mapper._deserializationConfig.withAppendedAnnotationIntrospector(ai);\n                 mapper._serializationConfig = mapper._serializationConfig.withAppendedAnnotationIntrospector(ai);\n             }\n \n-//          @Override\n+            @Override\n             public void registerSubtypes(Class<?>... subtypes) {\n                 mapper.registerSubtypes(subtypes);\n             }\n \n-//          @Override\n+            @Override\n             public void registerSubtypes(NamedType... subtypes) {\n                 mapper.registerSubtypes(subtypes);\n             }\n             \n-//          @Override\n+            @Override\n             public void setMixInAnnotations(Class<?> target, Class<?> mixinSource) {\n                 mapper.addMixInAnnotations(target, mixinSource);\n             }\n             \n-//          @Override\n+            @Override\n             public void addDeserializationProblemHandler(DeserializationProblemHandler handler) {\n                 mapper.addHandler(handler);\n             }\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java\n         _defaultState = defaultState;\n     }\n \n-//    @Override\n+    @Override\n     public boolean enabledByDefault() { return _defaultState; }\n \n-//    @Override\n+    @Override\n     public int getMask() { return (1 << ordinal()); }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n package com.fasterxml.jackson.databind;\n \n import java.io.IOException;\n-import java.lang.reflect.Type;\n import java.text.DateFormat;\n import java.util.*;\n \n  * object is only to be used for creating instances.\n  */\n public abstract class SerializerProvider\n+    extends DatabindContext\n {\n     protected final static JavaType TYPE_OBJECT = TypeFactory.defaultInstance().uncheckedSimpleType(Object.class);\n \n         \n     /*\n     /**********************************************************\n+    /* DatabindContext implementation\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method for accessing configuration for the serialization processing.\n+     */\n+    @Override\n+    public final SerializationConfig getConfig() { return _config; }\n+\n+    @Override\n+    public final AnnotationIntrospector getAnnotationIntrospector() {\n+        return _config.getAnnotationIntrospector();\n+    }\n+\n+    @Override\n+    public final TypeFactory getTypeFactory() {\n+        return _config.getTypeFactory();\n+    }\n+    \n+    @Override\n+    public final Class<?> getActiveView() { return _serializationView; }\n+    \n+    /**\n+     * @deprecated Since 2.2, use {@link #getActiveView} instead.\n+     */\n+    @Deprecated\n+    public final Class<?> getSerializationView() { return _serializationView; }\n+    \n+    /*\n+    /**********************************************************\n     /* Access to general configuration\n     /**********************************************************\n      */\n-\n-    /**\n-     * Method for accessing configuration for the serialization processing.\n-     */\n-    public final SerializationConfig getConfig() { return _config; }\n \n     /**\n      * Convenience method for checking whether specified serialization\n      *  getConfig().isEnabled(feature);\n      *</pre>\n      */\n-    public final boolean isEnabled(MapperFeature feature) {\n-        return _config.isEnabled(feature);\n-    }\n-\n-    /**\n-     * Convenience method for checking whether specified serialization\n-     * feature is enabled or not.\n-     * Shortcut for:\n-     *<pre>\n-     *  getConfig().isEnabled(feature);\n-     *</pre>\n-     */\n     public final boolean isEnabled(SerializationFeature feature) {\n         return _config.isEnabled(feature);\n     }\n-\n-    /**\n-     * Convenience method for accessing serialization view in use (if any); equivalent to:\n-     *<pre>\n-     *   getConfig().canOverrideAccessModifiers();\n-     *</pre>\n-     */\n-    public final boolean canOverrideAccessModifiers() {\n-        return _config.canOverrideAccessModifiers();\n-    }\n-    \n-    /**\n-     * Convenience method for accessing serialization view in use (if any); equivalent to:\n-     *<pre>\n-     *   getConfig().getAnnotationIntrospector();\n-     *</pre>\n-     */\n-    public final AnnotationIntrospector getAnnotationIntrospector() {\n-        return _config.getAnnotationIntrospector();\n-    }\n-    \n-    /**\n-     * Convenience method for accessing serialization view in use (if any); equivalent to:\n-     *<pre>\n-     *   getConfig().getSerializationView();\n-     *</pre>\n-     */\n-    public final Class<?> getSerializationView() { return _serializationView; }\n \n     /**\n      * Convenience method for accessing provider to find serialization filters used,\n      */\n     public TimeZone getTimeZone() {\n         return _config.getTimeZone();\n-    }\n-    \n-    /*\n-    /**********************************************************\n-    /* Access to type handling\n-    /**********************************************************\n-     */\n-    \n-    /**\n-     * Convenience method for constructing {@link JavaType} for given JDK\n-     * type (usually {@link java.lang.Class})\n-     */\n-    public JavaType constructType(Type type) {\n-         return _config.getTypeFactory().constructType(type);\n-    }\n-\n-    /**\n-     * Convenience method for constructing subtypes, retaining generic\n-     * type parameter (if any)\n-     */\n-    public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass) {\n-        return _config.constructSpecializedType(baseType, subclass);\n-    }\n-\n-    public TypeFactory getTypeFactory() {\n-        return _config.getTypeFactory();\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java\n      * Method that will check if there are \"mix-in\" classes (with mix-in\n      * annotations) for given class\n      */\n-//  @Override\n+    @Override\n     public final Class<?> findMixInClassFor(Class<?> cls) {\n         return (_mixInAnnotations == null) ? null : _mixInAnnotations.get(new ClassKey(cls));\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n+import com.fasterxml.jackson.databind.util.Converter;\n \n /**\n  * Complete {@link DeserializationContext} implementation that adds\n         }\n         return deser;\n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n+    public Converter<Object,Object> converterInstance(Annotated annotated,\n+            Object converterDef)\n+        throws JsonMappingException\n+    {\n+        if (converterDef == null) {\n+            return null;\n+        }\n+        if (converterDef instanceof Converter<?,?>) {\n+            return (Converter<Object,Object>) converterDef;\n+        }\n+        if (!(converterDef instanceof Class)) {\n+            throw new IllegalStateException(\"AnnotationIntrospector returned Converter definition of type \"\n+                    +converterDef.getClass().getName()+\"; expected type Converter or Class<Converter> instead\");\n+        }\n+        Class<?> converterClass = (Class<?>)converterDef;\n+        // there are some known \"no class\" markers to consider too:\n+        if (converterClass == Converter.None.class || converterClass == NoClass.class) {\n+            return null;\n+        }\n+        if (!Converter.class.isAssignableFrom(converterClass)) {\n+            throw new IllegalStateException(\"AnnotationIntrospector returned Class \"\n+                    +converterClass.getName()+\"; expected Class<Converter>\");\n+        }\n+        HandlerInstantiator hi = _config.getHandlerInstantiator();\n+        Converter<?,?> conv = (hi == null) ? null : hi.converterInstance(_config, annotated, converterClass);\n+        if (conv == null) {\n+            conv = (Converter<?,?>) ClassUtil.createInstance(converterClass,\n+                    _config.canOverrideAccessModifiers());\n+        }\n+        return (Converter<Object,Object>) conv;\n+    }\n+\n     /*\n     /**********************************************************\n     /* Extended API\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java\n import java.util.concurrent.ConcurrentHashMap;\n \n import com.fasterxml.jackson.annotation.JsonFormat;\n+\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.NoClass;\n+import com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.type.*;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n+import com.fasterxml.jackson.databind.util.Converter;\n \n /**\n  * Class that defines caching layer between callers (like\n             return (JsonDeserializer<Object>) factory.createBuilderBasedDeserializer(\n             \t\tctxt, type, beanDesc, builder);\n         }\n-        \n-        // If not, let's see which factory method to use:\n+\n+        // Or perhaps a Converter?\n+        Converter<Object,Object> conv = beanDesc.findDeserializationConverter();\n+        if (conv == null) { // nope, just construct in normal way\n+            return (JsonDeserializer<Object>) _createDeserializer2(ctxt, factory, type, beanDesc);\n+        }\n+        // otherwise need to do bit of introspection\n+        TypeFactory tf = ctxt.getTypeFactory();\n+        JavaType converterType = tf.constructType(conv.getClass());\n+        JavaType[] params = tf.findTypeParameters(converterType, Converter.class);\n+        if (params == null || params.length != 2) {\n+            throw new JsonMappingException(\"Could not determine Converter parameterization for \"\n+                    +converterType);\n+        }\n+        JavaType delegateType = params[1];\n+        return new StdDelegatingDeserializer<Object>(conv, delegateType,\n+                _createDeserializer2(ctxt, factory, delegateType, beanDesc));\n+    }\n+\n+    protected JsonDeserializer<?> _createDeserializer2(DeserializationContext ctxt,\n+            DeserializerFactory factory, JavaType type, BeanDescription beanDesc)\n+        throws JsonMappingException\n+    {\n+        final DeserializationConfig config = ctxt.getConfig();\n+    // If not, let's see which factory method to use:\n         if (type.isEnumType()) {\n-            return (JsonDeserializer<Object>) factory.createEnumDeserializer(ctxt,\n-                    type, beanDesc);\n+            return factory.createEnumDeserializer(ctxt, type, beanDesc);\n         }\n         if (type.isContainerType()) {\n             if (type.isArrayType()) {\n-                return (JsonDeserializer<Object>) factory.createArrayDeserializer(ctxt,\n-                        (ArrayType) type, beanDesc);\n+                return factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc);\n             }\n             if (type.isMapLikeType()) {\n                 MapLikeType mlt = (MapLikeType) type;\n                 if (mlt.isTrueMapType()) {\n-                    return (JsonDeserializer<Object>) factory.createMapDeserializer(ctxt,\n-                            (MapType) mlt, beanDesc);\n-                }\n-                return (JsonDeserializer<Object>) factory.createMapLikeDeserializer(ctxt,\n-                        mlt, beanDesc);\n+                    return factory.createMapDeserializer(ctxt,(MapType) mlt, beanDesc);\n+                }\n+                return factory.createMapLikeDeserializer(ctxt, mlt, beanDesc);\n             }\n             if (type.isCollectionLikeType()) {\n                 /* 03-Aug-2012, tatu: As per [Issue#40], one exception is if shape\n                 if (format == null || format.getShape() != JsonFormat.Shape.OBJECT) {\n                     CollectionLikeType clt = (CollectionLikeType) type;\n                     if (clt.isTrueCollectionType()) {\n-                        return (JsonDeserializer<Object>) factory.createCollectionDeserializer(ctxt,\n-                                (CollectionType) clt, beanDesc);\n+                        return factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc);\n                     }\n-                    return (JsonDeserializer<Object>) factory.createCollectionLikeDeserializer(ctxt,\n-                            clt, beanDesc);\n+                    return factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc);\n                 }\n             }\n         }\n         if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n-            return (JsonDeserializer<Object>) factory.createTreeDeserializer(config, type, beanDesc);\n-        }\n-        return (JsonDeserializer<Object>) factory.createBeanDeserializer(ctxt, type, beanDesc);\n+            return factory.createTreeDeserializer(config, type, beanDesc);\n+        }\n+        return factory.createBeanDeserializer(ctxt, type, beanDesc);\n     }\n \n     /**\n         if (deserDef == null) {\n             return null;\n         }\n-        return ctxt.deserializerInstance(ann, deserDef);\n-    }\n-\n+        JsonDeserializer<Object> deser = ctxt.deserializerInstance(ann, deserDef);\n+        // One more thing however: may need to also apply a converter:\n+        return findConvertingDeserializer(ctxt, ann, deser);\n+    }\n+\n+    /**\n+     * Helper method that will check whether given annotated entity (usually class,\n+     * but may also be a property accessor) indicates that a {@link Converter} is to\n+     * be used; and if so, to construct and return suitable serializer for it.\n+     * If not, will simply return given serializer as is.\n+     */\n+    protected JsonDeserializer<Object> findConvertingDeserializer(DeserializationContext ctxt,\n+            Annotated a, JsonDeserializer<Object> deser)\n+        throws JsonMappingException\n+    {\n+        Converter<Object,Object> conv = findConverter(ctxt, a);\n+        if (conv == null) {\n+            return deser;\n+        }\n+        TypeFactory tf = ctxt.getTypeFactory();\n+        JavaType converterType = tf.constructType(conv.getClass());\n+        JavaType[] params = tf.findTypeParameters(converterType, Converter.class);\n+        if (params == null || params.length != 2) {\n+            throw new JsonMappingException(\"Could not determine Converter parameterization for \"\n+                    +converterType);\n+        }\n+        JavaType delegateType = params[0];\n+        return (JsonDeserializer<Object>) new StdDelegatingDeserializer<Object>(conv, delegateType, deser);\n+    }\n+\n+    protected Converter<Object,Object> findConverter(DeserializationContext ctxt,\n+            Annotated a)\n+        throws JsonMappingException\n+    {\n+        Object convDef = ctxt.getAnnotationIntrospector().findDeserializationConverter(a);\n+        if (convDef == null) {\n+            return null;\n+        }\n+        return ctxt.converterInstance(a, convDef);\n+    }    \n     /**\n      * Method called to see if given method has annotations that indicate\n      * a more specific type than what the argument specifies.\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n     /**********************************************************\n      */\n     \n-//  @Override\n+    @Override\n     public final String getName() { return _propName; }\n \n-//  @Override\n+    @Override\n     public boolean isRequired() { return _isRequired; }\n     \n-//  @Override\n+    @Override\n     public JavaType getType() { return _type; }\n \n+    @Override\n     public abstract <A extends Annotation> A getAnnotation(Class<A> acls);\n \n-//  @Override\n+    @Override\n     public abstract AnnotatedMember getMember();\n \n+    @Override\n     public <A extends Annotation> A getContextAnnotation(Class<A> acls) {\n         return _contextAnnotations.get(acls);\n     }\n \n-//  @Override\n+    @Override\n     public void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor)\n         throws JsonMappingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ArrayBlockingQueueDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ArrayBlockingQueueDeserializer.java\n     /**\n      * Fluent-factory method call to construct contextual instance.\n      */\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     protected ArrayBlockingQueueDeserializer withResolved(JsonDeserializer<?> dd,\n             JsonDeserializer<?> vd, TypeDeserializer vtd)\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n     /**********************************************************\n      */\n \n-//    @Override\n+    @Override\n     public void resolve(DeserializationContext ctxt) throws JsonMappingException\n     {\n         // May need to resolve types for delegate- and/or property-based creators:\n      * Method called to finalize setup of this deserializer,\n      * when it is known for which property deserializer is needed for.\n      */\n-//    @Override\n+    @Override\n     public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n             BeanProperty property) throws JsonMappingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java\n     }\n     \n     @SuppressWarnings(\"unchecked\")\n-    protected StdDelegatingDeserializer(Converter<Object,T> converter,\n+    public StdDelegatingDeserializer(Converter<Object,T> converter,\n             JavaType delegateType, JsonDeserializer<?> delegateDeserializer)\n     {\n         super(delegateType);\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethodMap.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethodMap.java\n     /**********************************************************\n      */\n \n-//  @Override\n+    @Override\n     public Iterator<AnnotatedMethod> iterator()\n     {\n         if (_methods != null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationMap.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationMap.java\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-//  @Override\n+    @Override\n     public <A extends Annotation> A get(Class<A> cls)\n     {\n         if (_annotations == null) {\n         return new AnnotationMap(annotations);\n     }\n     \n-//  @Override\n+    @Override\n     public int size() {\n         return (_annotations == null) ? 0 : _annotations.size();\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n     \n     /*\n     /**********************************************************\n+    /* Introspection for serialization\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public Converter<Object,Object> findSerializationConverter()\n+    {\n+        if (_annotationIntrospector == null) {\n+            return null;\n+        }\n+        return _createConverter(_annotationIntrospector.findSerializationConverter(_classInfo));\n+    }\n+\n+    /**\n+     * Method for determining whether null properties should be written\n+     * out for a Bean of introspected type. This is based on global\n+     * feature (lowest priority, passed as argument)\n+     * and per-class annotation (highest priority).\n+     */\n+    @Override\n+    public JsonInclude.Include findSerializationInclusion(JsonInclude.Include defValue)\n+    {\n+        if (_annotationIntrospector == null) {\n+            return defValue;\n+        }\n+        return _annotationIntrospector.findSerializationInclusion(_classInfo, defValue);\n+    }\n+    \n+    /**\n+     * Method used to locate the method of introspected class that\n+     * implements {@link com.fasterxml.jackson.annotation.JsonAnyGetter}.\n+     * If no such method exists null is returned.\n+     * If more than one are found, an exception is thrown.\n+     */\n+    @Override\n+    public AnnotatedMember findAnyGetter() throws IllegalArgumentException\n+    {\n+        if (_anyGetter != null) {\n+            /* For now let's require a Map; in future can add support for other\n+             * types like perhaps Iterable<Map.Entry>?\n+             */\n+            Class<?> type = _anyGetter.getRawType();\n+            if (!Map.class.isAssignableFrom(type)) {\n+                throw new IllegalArgumentException(\"Invalid 'any-getter' annotation on method \"+_anyGetter.getName()+\"(): return type is not instance of java.util.Map\");\n+            }\n+        }\n+        return _anyGetter;\n+    }\n+    \n+    @Override\n+    public Map<String,AnnotatedMember> findBackReferenceProperties()\n+    {\n+        HashMap<String,AnnotatedMember> result = null;\n+        for (BeanPropertyDefinition property : _properties) {\n+            AnnotatedMember am = property.getMutator();\n+            if (am == null) {\n+                continue;\n+            }\n+            AnnotationIntrospector.ReferenceProperty refDef = _annotationIntrospector.findReferenceType(am);\n+            if (refDef != null && refDef.isBackReference()) {\n+                if (result == null) {\n+                    result = new HashMap<String,AnnotatedMember>();\n+                }\n+                String refName = refDef.getName();\n+                if (result.put(refName, am) != null) {\n+                    throw new IllegalArgumentException(\"Multiple back-reference properties with name '\"+refName+\"'\");\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+\n+    /*\n+    /**********************************************************\n     /* Introspection for deserialization, factories\n     /**********************************************************\n      */\n         }\n         return names;\n     }\n-    \n-    /*\n-    /**********************************************************\n-    /* Introspection for serialization, other\n-    /**********************************************************\n-     */\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public Converter<Object,Object> findSerializationConverter()\n+\n+    /*\n+    /**********************************************************\n+    /* Introspection for deserialization, other\n+    /**********************************************************\n+     */\n+    \n+    @Override\n+    public Class<?> findPOJOBuilder()\n+    {\n+    \treturn (_annotationIntrospector == null) ?\n+    \t\t\tnull : _annotationIntrospector.findPOJOBuilder(_classInfo);\n+    }\n+\n+    @Override\n+    public JsonPOJOBuilder.Value findPOJOBuilderConfig()\n+    {\n+        return (_annotationIntrospector == null) ?\n+                null : _annotationIntrospector.findPOJOBuilderConfig(_classInfo);\n+    }\n+\n+    @Override\n+    public Converter<Object,Object> findDeserializationConverter()\n     {\n         if (_annotationIntrospector == null) {\n             return null;\n         }\n-        Object converterDef = _annotationIntrospector.findSerializationConverter(_classInfo);\n-        if (converterDef == null) {\n-            return null;\n-        }\n-        if (converterDef instanceof Converter<?,?>) {\n-            return (Converter<Object,Object>) converterDef;\n-        }\n-        if (!(converterDef instanceof Class)) {\n-            throw new IllegalStateException(\"AnnotationIntrospector returned Converter definition of type \"\n-                    +converterDef.getClass().getName()+\"; expected type Converter or Class<Converter> instead\");\n-        }\n-        Class<?> converterClass = (Class<?>)converterDef;\n-        // there are some known \"no class\" markers to consider too:\n-        if (converterClass == Converter.None.class || converterClass == NoClass.class) {\n-            return null;\n-        }\n-        if (!Converter.class.isAssignableFrom(converterClass)) {\n-            throw new IllegalStateException(\"AnnotationIntrospector returned Class \"\n-                    +converterClass.getName()+\"; expected Class<Converter>\");\n-        }\n-        HandlerInstantiator hi = _config.getHandlerInstantiator();\n-        Converter<?,?> conv = (hi == null) ? null : hi.converterInstance(_config, _classInfo, converterClass);\n-        if (conv == null) {\n-            conv = (Converter<?,?>) ClassUtil.createInstance(converterClass,\n-                    _config.canOverrideAccessModifiers());\n-        }\n-        return (Converter<Object,Object>) conv;\n-    }\n-\n-    /**\n-     * Method for determining whether null properties should be written\n-     * out for a Bean of introspected type. This is based on global\n-     * feature (lowest priority, passed as argument)\n-     * and per-class annotation (highest priority).\n-     */\n-    @Override\n-    public JsonInclude.Include findSerializationInclusion(JsonInclude.Include defValue)\n-    {\n-        if (_annotationIntrospector == null) {\n-            return defValue;\n-        }\n-        return _annotationIntrospector.findSerializationInclusion(_classInfo, defValue);\n-    }\n-    \n-    /**\n-     * Method used to locate the method of introspected class that\n-     * implements {@link com.fasterxml.jackson.annotation.JsonAnyGetter}.\n-     * If no such method exists null is returned.\n-     * If more than one are found, an exception is thrown.\n-     */\n-    @Override\n-    public AnnotatedMember findAnyGetter() throws IllegalArgumentException\n-    {\n-        if (_anyGetter != null) {\n-            /* For now let's require a Map; in future can add support for other\n-             * types like perhaps Iterable<Map.Entry>?\n-             */\n-            Class<?> type = _anyGetter.getRawType();\n-            if (!Map.class.isAssignableFrom(type)) {\n-                throw new IllegalArgumentException(\"Invalid 'any-getter' annotation on method \"+_anyGetter.getName()+\"(): return type is not instance of java.util.Map\");\n-            }\n-        }\n-        return _anyGetter;\n-    }\n-    \n-    @Override\n-    public Map<String,AnnotatedMember> findBackReferenceProperties()\n-    {\n-        HashMap<String,AnnotatedMember> result = null;\n-        for (BeanPropertyDefinition property : _properties) {\n-            AnnotatedMember am = property.getMutator();\n-            if (am == null) {\n-                continue;\n-            }\n-            AnnotationIntrospector.ReferenceProperty refDef = _annotationIntrospector.findReferenceType(am);\n-            if (refDef != null && refDef.isBackReference()) {\n-                if (result == null) {\n-                    result = new HashMap<String,AnnotatedMember>();\n-                }\n-                String refName = refDef.getName();\n-                if (result.put(refName, am) != null) {\n-                    throw new IllegalArgumentException(\"Multiple back-reference properties with name '\"+refName+\"'\");\n-                }\n-            }\n-        }\n-        return result;\n-    }\n-\n-    /*\n-    /**********************************************************\n-    /* Introspection for deserialization\n-    /**********************************************************\n-     */\n-    \n-    @Override\n-    public Class<?> findPOJOBuilder()\n-    {\n-    \treturn (_annotationIntrospector == null) ?\n-    \t\t\tnull : _annotationIntrospector.findPOJOBuilder(_classInfo);\n-    }\n-\n-    @Override\n-    public JsonPOJOBuilder.Value findPOJOBuilderConfig()\n-    {\n-        return (_annotationIntrospector == null) ?\n-                null : _annotationIntrospector.findPOJOBuilderConfig(_classInfo);\n-    }\n-    \n+        return _createConverter(_annotationIntrospector.findDeserializationConverter(_classInfo));\n+    }\n+\n     /*\n     /**********************************************************\n     /* Helper methods for field introspection\n         }\n         return results;\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Helper methods, other\n+    /**********************************************************\n+     */\n+    \n+    @SuppressWarnings(\"unchecked\")\n+    public Converter<Object,Object> _createConverter(Object converterDef)\n+    {\n+        if (converterDef == null) {\n+            return null;\n+        }\n+        if (converterDef instanceof Converter<?,?>) {\n+            return (Converter<Object,Object>) converterDef;\n+        }\n+        if (!(converterDef instanceof Class)) {\n+            throw new IllegalStateException(\"AnnotationIntrospector returned Converter definition of type \"\n+                    +converterDef.getClass().getName()+\"; expected type Converter or Class<Converter> instead\");\n+        }\n+        Class<?> converterClass = (Class<?>)converterDef;\n+        // there are some known \"no class\" markers to consider too:\n+        if (converterClass == Converter.None.class || converterClass == NoClass.class) {\n+            return null;\n+        }\n+        if (!Converter.class.isAssignableFrom(converterClass)) {\n+            throw new IllegalStateException(\"AnnotationIntrospector returned Class \"\n+                    +converterClass.getName()+\"; expected Class<Converter>\");\n+        }\n+        HandlerInstantiator hi = _config.getHandlerInstantiator();\n+        Converter<?,?> conv = (hi == null) ? null : hi.converterInstance(_config, _classInfo, converterClass);\n+        if (conv == null) {\n+            conv = (Converter<?,?>) ClassUtil.createInstance(converterClass,\n+                    _config.canOverrideAccessModifiers());\n+        }\n+        return (Converter<Object,Object>) conv;\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n     /**********************************************************\n      */\n \n-//    @Override\n+    @Override\n     public int compareTo(POJOPropertyBuilder other)\n     {\n         // first, if one has ctor params, that should come first:\n     /* Implementations of refinement accessors\n     /**********************************************************\n      */\n-    \n+\n     @Override\n     public Class<?>[] findViews() {\n         return fromMemberAnnotations(new WithMember<Class<?>[]>() {\n+            @Override\n             public Class<?>[] withMember(AnnotatedMember member) {\n                 return _annotationIntrospector.findViews(member);\n             }\n     @Override\n     public AnnotationIntrospector.ReferenceProperty findReferenceType() {\n         return fromMemberAnnotations(new WithMember<AnnotationIntrospector.ReferenceProperty>() {\n+            @Override\n             public AnnotationIntrospector.ReferenceProperty withMember(AnnotatedMember member) {\n                 return _annotationIntrospector.findReferenceType(member);\n             }\n     @Override\n     public boolean isTypeId() {\n         Boolean b = fromMemberAnnotations(new WithMember<Boolean>() {\n+            @Override\n             public Boolean withMember(AnnotatedMember member) {\n                 return _annotationIntrospector.isTypeId(member);\n             }\n     @Override\n     public boolean isRequired() {\n         Boolean b = fromMemberAnnotations(new WithMember<Boolean>() {\n+            @Override\n             public Boolean withMember(AnnotatedMember member) {\n                 return _annotationIntrospector.hasRequiredMarker(member);\n             }\n     @Override\n     public ObjectIdInfo findObjectIdInfo() {\n         return fromMemberAnnotations(new WithMember<ObjectIdInfo>() {\n+            @Override\n             public ObjectIdInfo withMember(AnnotatedMember member) {\n                 ObjectIdInfo info = _annotationIntrospector.findObjectIdInfo(member);\n                 if (info != null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonObjectFormatVisitor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonObjectFormatVisitor.java\n \n         public Base() { }\n         public Base(SerializerProvider p) { _provider = p; }\n-        \n+\n+        @Override\n         public SerializerProvider getProvider() { return _provider; }\n \n+        @Override\n         public void setProvider(SerializerProvider p) { _provider = p; }\n \n+        @Override\n         public void property(BeanProperty writer) throws JsonMappingException { }\n \n+        @Override\n         public void property(String name, JsonFormatVisitable handler,\n                 JavaType propertyTypeHint) throws JsonMappingException { }\n \n         @Deprecated\n+        @Override\n         public void property(String name) throws JsonMappingException { }\n \n+        @Override\n         public void optionalProperty(BeanProperty writer)\n                 throws JsonMappingException { }\n \n+        @Override\n         public void optionalProperty(String name, JsonFormatVisitable handler,\n                 JavaType propertyTypeHint) throws JsonMappingException { }\n \n         @Deprecated\n+        @Override\n         public void optionalProperty(String name) throws JsonMappingException { }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java\n     public static StdTypeResolverBuilder noTypeInfoBuilder() {\n         return new StdTypeResolverBuilder().init(JsonTypeInfo.Id.NONE, null);\n     }\n-    \n-//  @Override\n+\n+    @Override\n     public StdTypeResolverBuilder init(JsonTypeInfo.Id idType, TypeIdResolver idRes)\n     {\n         // sanity checks\n         _typeProperty = idType.getDefaultPropertyName();\n         return this;\n     }\n-    \n-//  @Override\n+\n+    @Override\n     public TypeSerializer buildTypeSerializer(SerializationConfig config,\n             JavaType baseType, Collection<NamedType> subtypes)\n     {\n         }\n         throw new IllegalStateException(\"Do not know how to construct standard type serializer for inclusion type: \"+_includeAs);\n     }\n-    \n-//  @Override\n+\n+    @Override\n     public TypeDeserializer buildTypeDeserializer(DeserializationConfig config,\n             JavaType baseType, Collection<NamedType> subtypes)\n     {\n     /**********************************************************\n      */\n \n-//  @Override\n+    @Override\n     public StdTypeResolverBuilder inclusion(JsonTypeInfo.As includeAs) {\n         if (includeAs == null) {\n             throw new IllegalArgumentException(\"includeAs can not be null\");\n      * Method for constructing an instance with specified type property name\n      * (property name to use for type id when using \"as-property\" inclusion).\n      */\n-//  @Override\n+    @Override\n     public StdTypeResolverBuilder typeProperty(String typeIdPropName)\n     {\n         // ok to have null/empty; will restore to use defaults\n         return this;\n     }\n \n-//  @Override\n+    @Override\n     public StdTypeResolverBuilder defaultImpl(Class<?> defaultImpl)\n     {\n         _defaultImpl = defaultImpl;\n         return this;\n     }\n \n-//  @Override\n+    @Override\n     public StdTypeResolverBuilder typeIdVisibility(boolean isVisible) {\n         _typeIdVisible = isVisible;\n         return this;\n \n     public String getTypeProperty() { return _typeProperty; }\n \n-//  @Override\n+    @Override\n     public Class<?> getDefaultImpl() {\n         return _defaultImpl;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java\n     /**********************************************************\n      */\n     \n-//  @Override\n+    @Override\n     public JsonDeserializer<?> findArrayDeserializer(ArrayType type,\n             DeserializationConfig config, BeanDescription beanDesc,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         return (_classMappings == null) ? null : _classMappings.get(new ClassKey(type.getRawClass()));\n     }\n \n-//  @Override\n+    @Override\n     public JsonDeserializer<?> findBeanDeserializer(JavaType type,\n             DeserializationConfig config, BeanDescription beanDesc)\n         throws JsonMappingException\n         return (_classMappings == null) ? null : _classMappings.get(new ClassKey(type.getRawClass()));\n     }\n \n-//  @Override\n+    @Override\n     public JsonDeserializer<?> findCollectionDeserializer(CollectionType type,\n             DeserializationConfig config, BeanDescription beanDesc,\n             TypeDeserializer elementTypeDeserializer,\n         return (_classMappings == null) ? null : _classMappings.get(new ClassKey(type.getRawClass()));\n     }\n \n-//  @Override\n+    @Override\n     public JsonDeserializer<?> findCollectionLikeDeserializer(CollectionLikeType type,\n             DeserializationConfig config, BeanDescription beanDesc,\n             TypeDeserializer elementTypeDeserializer,\n         return (_classMappings == null) ? null : _classMappings.get(new ClassKey(type.getRawClass()));\n     }\n     \n-//  @Override\n+    @Override\n     public JsonDeserializer<?> findEnumDeserializer(Class<?> type,\n             DeserializationConfig config, BeanDescription beanDesc)\n         throws JsonMappingException\n         return (_classMappings == null) ? null : _classMappings.get(new ClassKey(type));\n     }\n \n-//  @Override\n+    @Override\n     public JsonDeserializer<?> findMapDeserializer(MapType type,\n             DeserializationConfig config, BeanDescription beanDesc,\n             KeyDeserializer keyDeserializer,\n         return (_classMappings == null) ? null : _classMappings.get(new ClassKey(type.getRawClass()));\n     }\n \n-//  @Override\n+    @Override\n     public JsonDeserializer<?> findMapLikeDeserializer(MapLikeType type,\n             DeserializationConfig config, BeanDescription beanDesc,\n             KeyDeserializer keyDeserializer,\n         return (_classMappings == null) ? null : _classMappings.get(new ClassKey(type.getRawClass()));\n     }\n     \n-//  @Override\n+    @Override\n     public JsonDeserializer<?> findTreeNodeDeserializer(Class<? extends JsonNode> nodeType,\n             DeserializationConfig config, BeanDescription beanDesc)\n         throws JsonMappingException\n--- a/src/main/java/com/fasterxml/jackson/databind/node/BaseJsonNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/BaseJsonNode.java\n     /**\n      * Method called to serialize node instances using given generator.\n      */\n-//  @Override\n+    @Override\n     public abstract void serialize(JsonGenerator jgen, SerializerProvider provider)\n         throws IOException, JsonProcessingException;\n \n      * Type information is needed, even if JsonNode instances are \"plain\" JSON,\n      * since they may be mixed with other types.\n      */\n-//  @Override\n+   @Override\n     public abstract void serializeWithType(JsonGenerator jgen, SerializerProvider provider,\n             TypeSerializer typeSer)\n         throws IOException, JsonProcessingException;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n         return gen.forScope(objectIdInfo.getScope());\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public Converter<Object,Object> converterInstance(Annotated annotated,\n             Object converterDef)\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/Serializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/Serializers.java\n      */\n     public static class Base implements Serializers\n     {\n-//      @Override\n+        @Override\n         public JsonSerializer<?> findSerializer(SerializationConfig config,\n                 JavaType type, BeanDescription beanDesc)\n         {\n             return null;\n         }\n         \n-//      @Override\n+        @Override\n         public JsonSerializer<?> findArraySerializer(SerializationConfig config,\n                 ArrayType type, BeanDescription beanDesc,\n                 TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)\n             return null;\n         }\n \n-//      @Override\n+        @Override\n         public JsonSerializer<?> findCollectionSerializer(SerializationConfig config,\n                 CollectionType type, BeanDescription beanDesc,\n                 TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)\n             return null;\n         }\n \n-//      @Override\n+        @Override\n         public JsonSerializer<?> findCollectionLikeSerializer(SerializationConfig config,\n                 CollectionLikeType type, BeanDescription beanDesc,\n                 TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)\n             return null;\n         }\n             \n-//      @Override\n+        @Override\n         public JsonSerializer<?> findMapSerializer(SerializationConfig config,\n                 MapType type, BeanDescription beanDesc,\n                 JsonSerializer<Object> keySerializer,\n             return null;\n         }\n \n-//      @Override\n+        @Override\n         public JsonSerializer<?> findMapLikeSerializer(SerializationConfig config,\n                 MapLikeType type, BeanDescription beanDesc,\n                 JsonSerializer<Object> keySerializer,\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/BeanAsArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/BeanAsArraySerializer.java\n      */\n     private boolean hasSingleElement(SerializerProvider provider) {\n         final BeanPropertyWriter[] props;\n-        if (_filteredProps != null && provider.getSerializationView() != null) {\n+        if (_filteredProps != null && provider.getActiveView() != null) {\n             props = _filteredProps;\n         } else {\n             props = _props;\n         throws IOException, JsonGenerationException\n     {\n         final BeanPropertyWriter[] props;\n-        if (_filteredProps != null && provider.getSerializationView() != null) {\n+        if (_filteredProps != null && provider.getActiveView() != null) {\n             props = _filteredProps;\n         } else {\n             props = _props;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/FilteredBeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/FilteredBeanPropertyWriter.java\n         public void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov)\n             throws Exception\n         {\n-            Class<?> activeView = prov.getSerializationView();\n+            Class<?> activeView = prov.getActiveView();\n             if (activeView == null || _view.isAssignableFrom(activeView)) {\n                 _delegate.serializeAsField(bean, jgen, prov);\n             }\n         public void serializeAsColumn(Object bean, JsonGenerator jgen, SerializerProvider prov)\n             throws Exception\n         {\n-            Class<?> activeView = prov.getSerializationView();\n+            Class<?> activeView = prov.getActiveView();\n             if (activeView == null || _view.isAssignableFrom(activeView)) {\n                 _delegate.serializeAsColumn(bean, jgen, prov);\n             } else {\n         public void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov)\n             throws Exception\n         {\n-            final Class<?> activeView = prov.getSerializationView();\n+            final Class<?> activeView = prov.getActiveView();\n             if (activeView != null) {\n                 int i = 0, len = _views.length;\n                 for (; i < len; ++i) {\n         public void serializeAsColumn(Object bean, JsonGenerator jgen, SerializerProvider prov)\n             throws Exception\n         {\n-            final Class<?> activeView = prov.getSerializationView();\n+            final Class<?> activeView = prov.getActiveView();\n             if (activeView != null) {\n                 int i = 0, len = _views.length;\n                 for (; i < len; ++i) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n     /**********************************************************\n      */\n     \n-//  @Override\n+    @Override\n     public JsonSerializer<?> createContextual(SerializerProvider provider,\n             BeanProperty property)\n         throws JsonMappingException\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n         throws IOException, JsonGenerationException\n     {\n         final BeanPropertyWriter[] props;\n-        if (_filteredProps != null && provider.getSerializationView() != null) {\n+        if (_filteredProps != null && provider.getActiveView() != null) {\n             props = _filteredProps;\n         } else {\n             props = _props;\n          */\n         \n         final BeanPropertyWriter[] props;\n-        if (_filteredProps != null && provider.getSerializationView() != null) {\n+        if (_filteredProps != null && provider.getActiveView() != null) {\n             props = _filteredProps;\n         } else {\n             props = _props;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java\n     /**********************************************************\n      */\n     \n-    // @Override\n+    @Override\n     public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property)\n         throws JsonMappingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n      * Method called by {@link BasicSerializerFactory} to access\n      * all serializers this class provides.\n      */\n-//  @Override\n+    @Override\n     public Collection<Map.Entry<Class<?>, Object>> provide()\n     {\n         HashMap<Class<?>,Object> sers = new HashMap<Class<?>,Object>();\n--- a/src/main/java/com/fasterxml/jackson/databind/util/ArrayBuilders.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/ArrayBuilders.java\n             _index = 0;\n         }\n         \n-//      @Override\n+       @Override\n         public boolean hasNext() {\n             return _index < _array.length;\n         }\n \n-//      @Override\n+        @Override\n         public T next()\n         {\n             if (_index >= _array.length) {\n             return _array[_index++];\n         }\n \n-//      @Override\n+        @Override\n         public void remove() {\n             throw new UnsupportedOperationException();\n         }\n \n-//      @Override\n+        @Override\n         public Iterator<T> iterator() {\n             return this;\n         }\n--- a/src/test/java/com/fasterxml/jackson/databind/convert/TestConvertingDeserializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/convert/TestConvertingDeserializer.java\n \n import java.util.*;\n \n-import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n-import com.fasterxml.jackson.databind.convert.TestConvertingSerializer.ConvertingBean;\n-import com.fasterxml.jackson.databind.convert.TestConvertingSerializer.ConvertingBeanContainer;\n-import com.fasterxml.jackson.databind.convert.TestConvertingSerializer.PointListWrapperArray;\n-import com.fasterxml.jackson.databind.convert.TestConvertingSerializer.PointListWrapperList;\n-import com.fasterxml.jackson.databind.convert.TestConvertingSerializer.PointListWrapperMap;\n-import com.fasterxml.jackson.databind.convert.TestConvertingSerializer.PointWrapper;\n import com.fasterxml.jackson.databind.util.Converter;\n \n public class TestConvertingDeserializer\n     static class ConvertingBean\n     {\n         protected int x, y;\n-    \n+\n         protected ConvertingBean(int x, int y) {\n             this.x = x;\n             this.y = y;\n     static class ConvertingBeanContainer\n     {\n         public List<ConvertingBean> values;\n-        \n+\n+        public ConvertingBeanContainer() { }\n         public ConvertingBeanContainer(ConvertingBean... beans) {\n             values = Arrays.asList(beans);\n         }\n     static class PointWrapper {\n         @JsonDeserialize(converter=PointConverter.class)\n         public Point value;\n-    \n+\n+        protected PointWrapper() { }\n         public PointWrapper(int x, int y) {\n             value = new Point(x, y);\n         }\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java\n             _desc = d;\n         }\n \n-//      @Override\n+        @Override\n         public void serialize(JsonGenerator jgen, SerializerProvider provider)\n             throws IOException, JsonGenerationException\n         {\n             return _desc.equals(other._desc);\n         }\n \n-//      @Override\n+        @Override\n         public void serializeWithType(JsonGenerator jgen,\n                 SerializerProvider provider, TypeSerializer typeSer)\n                 throws IOException, JsonProcessingException {\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestConcurrency.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestConcurrency.java\n             return b;\n         }\n \n-//      @Override\n+        @Override\n         public void resolve(DeserializationContext ctxt) throws JsonMappingException\n         {\n             try {\n         for (int i = 0; i < 5; ++i) {\n             final ObjectMapper mapper = new ObjectMapper();\n             Runnable r = new Runnable() {\n-//              @Override\n+                @Override\n                 public void run() {\n                     try {\n                         /*Bean b =*/ mapper.readValue(JSON, Bean.class);\n--- a/src/test/java/com/fasterxml/jackson/databind/interop/TestCglibUsage.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/interop/TestCglibUsage.java\n         Enhancer enh = new Enhancer();\n         enh.setInterfaces(new Class[] { BeanInterface.class });\n         enh.setCallback(new MethodInterceptor() {\n-//          @Override\n+            @Override\n             public Object intercept(Object obj, Method method,\n                                         Object[] args, MethodProxy proxy)\n                     throws Throwable\n     }\n \n     /*\n-    //////////////////////////////////////////////\n-    // Helper methods\n-    //////////////////////////////////////////////\n+    /**********************************************************\n+    /* Helper methods\n+    /**********************************************************\n      */\n \n     @SuppressWarnings(\"unchecked\")\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestAbstractTypeNames.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestAbstractTypeNames.java\n             _employer = employer;\n         }\n \n-//      @Override\n+        @Override\n         public String getEmployer() {\n             return _employer;\n         }\n             _friends = friends;\n         }\n \n+        @Override\n         public String getName() {\n             return _name;\n         }\n \n+        @Override\n         public List<User> getFriends() {\n             return _friends;\n         }\n--- a/src/test/java/com/fasterxml/jackson/databind/module/TestAbstractTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/module/TestAbstractTypes.java\n         \n         public MyString(String s) { value = s; }\n \n-//      @Override\n+        @Override\n         public char charAt(int index) {\n             return value.charAt(index);\n         }\n \n-//      @Override\n+        @Override\n         public int length() {\n             return value.length();\n         }\n \n-//      @Override\n+        @Override\n         public CharSequence subSequence(int arg0, int arg1) { return this; }\n     }\n     \n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestAnnotationInheritance.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestAnnotationInheritance.java\n     {\n         // Both should be recognized as getters here\n \n-//      @Override\n+        @Override\n         public int width() { return 1; }\n-//      @Override\n+        @Override\n         public int length() { return 2; }\n \n         public int getFoobar() { return 5; }\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestCollectionSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestCollectionSerialization.java\n             }\n         }\n \n-//      @Override\n+        @Override\n         public Iterator<Integer> iterator() {\n             return _ints.iterator();\n         }\n \n     static class IntIterable implements Iterable<Integer>\n     {\n+        @Override\n         public Iterator<Integer> iterator() {\n             return new IntIterator(1, 3);\n         }\n             this.last = last;\n         }\n \n+        @Override\n         public boolean hasNext() {\n             return i <= last;\n         }\n \n+        @Override\n         public Integer next() {\n             return i++;\n         }\n \n-        public void remove() {\n-        }\n+        @Override\n+        public void remove() { }\n \n         public int getX() { return 13; }\n     }\n--- a/src/test/java/com/fasterxml/jackson/failing/TestCollectionSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestCollectionSerialization.java\n     //@com.fasterxml.jackson.databind.annotation.JsonSerialize(as=Issue822Interface.class)\n     // but it should not be necessary when root type is passed\n     static class Issue822Impl implements Issue822Interface {\n+        @Override\n         public int getA() { return 3; }\n         public int getB() { return 9; }\n     }", "timestamp": 1362258789, "metainfo": ""}