{"sha": "2e980c04fadc5e5d861d44bd30f2521dea4d2006", "log": "try to reproduce a bug", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/introspect/TestNameConflicts.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/introspect/TestNameConflicts.java\n \n public class TestNameConflicts extends BaseMapTest\n {\n+    @JsonAutoDetect\n+    (fieldVisibility= JsonAutoDetect.Visibility.NONE,getterVisibility= JsonAutoDetect.Visibility.NONE, setterVisibility= JsonAutoDetect.Visibility.NONE, isGetterVisibility= JsonAutoDetect.Visibility.NONE)\n+    static class CoreBean158 {\n+        private String bar = \"x\";\n+\n+        @JsonProperty\n+        public String getBar() {\n+            return bar;\n+        }\n+\n+        @JsonProperty\n+        public void setBar(String bar) {\n+            this.bar = bar;\n+        }\n+\n+        public void setBar(java.io.Serializable bar) {\n+            this.bar = bar.toString();\n+        }\n+    }\n+    \n     static class Bean193\n     {\n         @JsonProperty(\"val1\")\n     /**********************************************************\n      */\n \n+    private final ObjectMapper MAPPER = objectMapper();\n+    \n     // [Issue#193]\n     public void testIssue193() throws Exception\n     {\n     // [Issue#327]\n     public void testNonConflict() throws Exception\n     {\n-        String json = objectMapper().writeValueAsString(new BogusConflictBean());\n+        String json = MAPPER.writeValueAsString(new BogusConflictBean());\n         assertEquals(aposToQuotes(\"{'prop1':2,'prop2':1}\"), json);\n     }    \n \n         String json = objectWriter().writeValueAsString(new MultipleTheoreticalGetters());\n         assertEquals(aposToQuotes(\"{'a':3}\"), json);\n     }\n+\n+    // for [jackson-core#158]\n+    public void testOverrideName() throws Exception\n+    {\n+        String json = MAPPER.writeValueAsString(new CoreBean158());\n+        assertEquals(aposToQuotes(\"{'bar':'x'}\"), json);\n+        \n+        // and back\n+        CoreBean158 result = MAPPER.readValue(aposToQuotes(\"{'bar':'y'}\"), CoreBean158.class);\n+        assertNotNull(result);\n+        assertEquals(\"y\", result.bar);\n+    }    \n }", "timestamp": 1413049784, "metainfo": ""}