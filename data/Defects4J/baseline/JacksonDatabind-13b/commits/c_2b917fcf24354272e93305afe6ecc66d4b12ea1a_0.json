{"sha": "2b917fcf24354272e93305afe6ecc66d4b12ea1a", "log": "Implement #596", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java\n     /**\n      * Whether value for property is marked as required using\n      * annotations or associated schema.\n+     * Equivalent to:\n+     *<code>\n+     *  getMetadata().isRequired()\n+     *</code>\n      * \n      * @since 2.2\n      */\n--- a/src/main/java/com/fasterxml/jackson/databind/PropertyMetadata.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/PropertyMetadata.java\n {\n     private static final long serialVersionUID = -1;\n \n-    public final static PropertyMetadata STD_REQUIRED = new PropertyMetadata(Boolean.TRUE, null, null);\n+    public final static PropertyMetadata STD_REQUIRED = new PropertyMetadata(Boolean.TRUE, null, null, null);\n \n-    public final static PropertyMetadata STD_OPTIONAL = new PropertyMetadata(Boolean.FALSE, null, null);\n+    public final static PropertyMetadata STD_OPTIONAL = new PropertyMetadata(Boolean.FALSE, null, null, null);\n \n-    public final static PropertyMetadata STD_REQUIRED_OR_OPTIONAL = new PropertyMetadata(null, null, null);\n+    public final static PropertyMetadata STD_REQUIRED_OR_OPTIONAL = new PropertyMetadata(null, null, null, null);\n     \n     /**\n      * Three states: required, not required and unknown; unknown represented\n      * @since 2.4\n      */\n     protected final Integer _index;\n+\n+    /**\n+     * Optional default value, as String, for property; not used cor\n+     * any functionality by core databind, offered as metadata for\n+     * extensions.\n+     */\n+    protected final String _defaultValue;\n     \n     /*\n     /**********************************************************\n      */\n     \n     @Deprecated // since 2.4\n-    protected PropertyMetadata(Boolean req, String desc) { this(req, desc, null); }\n+    protected PropertyMetadata(Boolean req, String desc) { this(req, desc, null, null); }\n \n-    protected PropertyMetadata(Boolean req, String desc, Integer index)\n+    /**\n+     * @since 2.5\n+     */\n+    protected PropertyMetadata(Boolean req, String desc, Integer index, String def)\n     {\n         _required = req;\n         _description = desc;\n         _index = index;\n+        _defaultValue = (def == null || def.isEmpty()) ? null : def;\n     }\n \n     /**\n-     * @since 2.4 Use variant that takes three arguments.\n+     * @since 2.4 Use variant that takes more arguments.\n      */\n     @Deprecated\n     public static PropertyMetadata construct(boolean req, String desc) {\n-    \treturn construct(req, desc, null);\n+        return construct(req, desc, null, null);\n     }\n-    \n-    public static PropertyMetadata construct(boolean req, String desc, Integer index) {\n-        PropertyMetadata md = req ? STD_REQUIRED : STD_OPTIONAL;\n-        if (desc != null) {\n-            md = md.withDescription(desc);\n+\n+    public static PropertyMetadata construct(boolean req, String desc, Integer index,\n+            String defaultValue) {\n+        if (desc != null || index != null || defaultValue != null) {\n+            return new PropertyMetadata(req, desc, index, defaultValue);\n         }\n-        if (index != null) {\n-        \tmd = md.withIndex(index);\n-        }\n-        return md;\n+        return req ? STD_REQUIRED : STD_OPTIONAL;\n     }\n     \n     /**\n      */\n     protected Object readResolve()\n     {\n-        if (_description == null && _index == null) {\n+        if (_description == null && _index == null && _defaultValue == null) {\n             if (_required == null) {\n                 return STD_REQUIRED_OR_OPTIONAL;\n             }\n     }\n \n     public PropertyMetadata withDescription(String desc) {\n-        return new PropertyMetadata(_required, desc, _index);\n+        return new PropertyMetadata(_required, desc, _index, _defaultValue);\n     }\n \n+    public PropertyMetadata withDefaultValue(String def) {\n+        if ((def == null) || def.isEmpty()) {\n+            if (_defaultValue == null) {\n+                return this;\n+            }\n+            def = null;\n+        } else if (_defaultValue.equals(def)) {\n+            return this;\n+        }\n+        return new PropertyMetadata(_required, _description, _index, def);\n+    }\n+    \n     public PropertyMetadata withIndex(Integer index) {\n-        return new PropertyMetadata(_required, _description, index);\n+        return new PropertyMetadata(_required, _description, index, _defaultValue);\n     }\n     \n     public PropertyMetadata withRequired(Boolean b) {\n                 return this;\n             }\n         }\n-        return new PropertyMetadata(b, _description, _index);\n+        return new PropertyMetadata(b, _description, _index, _defaultValue);\n     }\n     \n     /*\n \n     public String getDescription() { return _description; }\n \n+    /**\n+     * @since 2.5\n+     */\n+    public String getDefaultValue() { return _defaultValue; }\n+\n+    /**\n+     * @since 2.5\n+     */\n+    public boolean hasDefuaultValue() { return (_defaultValue != null); }\n+    \n     public boolean isRequired() { return (_required != null) && _required.booleanValue(); }\n     \n     public Boolean getRequired() { return _required; }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n         final DeserializationConfig config = ctxt.getConfig();\n         final AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();\n         PropertyMetadata metadata;\n-\n         {\n-            Boolean b = (intr == null) ? null : intr.hasRequiredMarker(param);\n-            boolean req = (b != null && b.booleanValue());\n-            String desc = (intr == null) ? null : intr.findPropertyDescription(param);\n-            Integer idx = (intr == null) ? null : intr.findPropertyIndex(param);\n-            metadata = PropertyMetadata.construct(req, desc, idx);\n+            if (intr == null) {\n+                metadata = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;\n+            } else {\n+                Boolean b = intr.hasRequiredMarker(param);\n+                boolean req = (b != null && b.booleanValue());\n+                String desc = intr.findPropertyDescription(param);\n+                Integer idx = intr.findPropertyIndex(param);\n+                String def = intr.findPropertyDefaultValue(param);\n+                metadata = PropertyMetadata.construct(req, desc, idx, def);\n+            }\n         }\n             \n         JavaType t0 = config.getTypeFactory().constructType(param.getParameterType(), beanDesc.bindingsForBeanType());\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java\n     {\n         this(new PropertyName(name), type, wrapperName, typeDeser,\n                 contextAnnotations, param, index, injectableValueId,\n-                PropertyMetadata.construct(isRequired, null, null));\n+                PropertyMetadata.construct(isRequired, null, null, null));\n     }\n     \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n             boolean isRequired)\n     {\n         this(new PropertyName(propName), type, wrapper, typeDeser, contextAnnotations,\n-                PropertyMetadata.construct(isRequired, null, null));\n+                PropertyMetadata.construct(isRequired, null, null, null));\n     }\n     \n     protected SettableBeanProperty(PropertyName propName, JavaType type, PropertyName wrapper,\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n     @Override\n     public String findPropertyDefaultValue(Annotated ann) {\n         JsonProperty prop = _findAnnotation(ann, JsonProperty.class);\n-        return (prop == null) ? null : prop.defaultValue();\n+        if (prop == null) {\n+            return null;\n+        }\n+        String str = prop.defaultValue();\n+        // Since annotations do not allow nulls, need to assume empty means \"none\"\n+        return str.isEmpty() ? null : str;\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n         final Boolean b = _findRequired();\n         final String desc = _findDescription();\n         final Integer idx = _findIndex();\n-        if (b == null && idx == null) {\n+        final String def = _findDefaultValue();\n+        if (b == null && idx == null && def == null) {\n             return (desc == null) ? PropertyMetadata.STD_REQUIRED_OR_OPTIONAL\n                     : PropertyMetadata.STD_REQUIRED_OR_OPTIONAL.withDescription(desc);\n         }\n-        return PropertyMetadata.construct(b.booleanValue(), desc, idx);\n+        return PropertyMetadata.construct(b.booleanValue(), desc, idx, def);\n     }\n \n     protected Boolean _findRequired() {\n             @Override\n             public Integer withMember(AnnotatedMember member) {\n                 return _annotationIntrospector.findPropertyIndex(member);\n+            }\n+        });\n+    }\n+\n+    protected String _findDefaultValue() {\n+        return fromMemberAnnotations(new WithMember<String>() {\n+            @Override\n+            public String withMember(AnnotatedMember member) {\n+                return _annotationIntrospector.findPropertyDefaultValue(member);\n             }\n         });\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/introspect/TestPOJOPropertiesCollector.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/introspect/TestPOJOPropertiesCollector.java\n \n         public void setA(String a) { this.a = a; }\n \n-        @JsonProperty(required=true, index=B_INDEX)\n+        @JsonProperty(required=true, index=B_INDEX, defaultValue=\"13\")\n         public int getB() { return b; }\n     }\n     \n     {\n         // start via deser\n         BeanDescription beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(PropDescBean.class));\n-        _verifyProperty(beanDesc, true, false);\n+        _verifyProperty(beanDesc, true, false, \"13\");\n         // and then via ser:\n         beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(PropDescBean.class));\n-        _verifyProperty(beanDesc, true, false);\n+        _verifyProperty(beanDesc, true, false, \"13\");\n     }\n \n     // [#438]: Support @JsonProperty.index\n     public void testPropertyIndex() throws Exception\n     {\n         BeanDescription beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(PropDescBean.class));\n-        _verifyProperty(beanDesc, false, true);\n+        _verifyProperty(beanDesc, false, true, \"13\");\n         beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(PropDescBean.class));\n-        _verifyProperty(beanDesc, false, true);\n+        _verifyProperty(beanDesc, false, true, \"13\");\n     }\n \n     private void _verifyProperty(BeanDescription beanDesc,\n-    \t\tboolean verifyDesc, boolean verifyIndex)\n+    \t\tboolean verifyDesc, boolean verifyIndex, String expDefaultValue)\n     {\n         assertNotNull(beanDesc);\n         List<BeanPropertyDefinition> props = beanDesc.findProperties();\n                 if (verifyIndex) {\n                 \tassertEquals(Integer.valueOf(PropDescBean.B_INDEX), md.getIndex());\n                 }\n+                if (expDefaultValue != null) {\n+                    assertEquals(expDefaultValue, md.getDefaultValue());\n+                }\n             } else {\n                 fail(\"Unrecognized property '\"+name+\"'\");\n             }", "timestamp": 1419399943, "metainfo": ""}