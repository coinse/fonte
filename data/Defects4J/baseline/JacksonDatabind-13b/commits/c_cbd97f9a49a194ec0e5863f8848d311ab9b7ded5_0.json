{"sha": "cbd97f9a49a194ec0e5863f8848d311ab9b7ded5", "log": "unit test cleanup (silly eclipse warnings)", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestSimpleTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestSimpleTypes.java\n         TokenBuffer buf = new TokenBuffer(null);\n         buf.writeObject(null);\n         assertNull(MAPPER.readValue(buf.asParser(), UUID.class));\n+        buf.close();\n \n         // then, UUID itself come as is:\n         buf = new TokenBuffer(null);\n         UUID value2 = MAPPER.readValue(buf.asParser(), UUID.class);\n         \n         assertEquals(value, value2);\n+        buf.close();\n     }\n \n     public void testURL() throws Exception\n         TokenBuffer buf = new TokenBuffer(null);\n         buf.writeObject(null);\n         assertNull(MAPPER.readValue(buf.asParser(), URL.class));\n+        buf.close();\n \n         // then, UUID itself come as is:\n         buf = new TokenBuffer(null);\n         buf.writeObject(value);\n         assertSame(value, MAPPER.readValue(buf.asParser(), URL.class));\n+        buf.close();\n     }\n \n     public void testURI() throws Exception\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestConversions.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestConversions.java\n         TokenBuffer buf = new TokenBuffer(MAPPER);\n         buf.writeObject(new byte[3]);\n         JsonNode node = MAPPER.readTree(buf.asParser());\n+        buf.close();\n         assertTrue(node.isBinary());\n         byte[] data = node.binaryValue();\n         assertNotNull(data);\n         buf.writeObject(MARKER);\n         buf.writeEndArray();\n         JsonNode node = MAPPER.readTree(buf.asParser());\n+        buf.close();\n         assertTrue(node.isArray());\n         assertEquals(1, node.size());\n         JsonNode n = node.get(0);\n         buf.writeObject(MARKER);\n         buf.writeEndObject();\n         JsonNode node = MAPPER.readTree(buf.asParser());\n+        buf.close();\n         assertTrue(node.isObject());\n         assertEquals(1, node.size());\n         JsonNode n = node.get(\"pojo\");\n--- a/src/test/java/com/fasterxml/jackson/databind/util/TestTokenBuffer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/util/TestTokenBuffer.java\n         assertEquals(13, jp.getIntValue());\n         assertNull(jp.nextToken());\n         jp.close();\n+        buf.close();\n     }\n \n     public void testSimpleArray() throws IOException\n         assertTrue(jp.getParsingContext().inRoot());\n         assertNull(jp.nextToken());\n         jp.close();\n+        buf.close();\n \n         // Then one with simple contents\n         buf = new TokenBuffer(null);\n         assertToken(JsonToken.END_ARRAY, jp.nextToken());\n         assertNull(jp.nextToken());\n         jp.close();\n+        buf.close();\n \n         // And finally, with array-in-array\n         buf = new TokenBuffer(null);\n         assertToken(JsonToken.END_ARRAY, jp.nextToken());\n         assertNull(jp.nextToken());\n         jp.close();\n+        buf.close();\n     }\n \n     public void testSimpleObject() throws IOException\n         assertTrue(jp.getParsingContext().inRoot());\n         assertNull(jp.nextToken());\n         jp.close();\n+        buf.close();\n \n         // Then one with simple contents\n         buf = new TokenBuffer(null);\n         assertNull(jp.getCurrentName());\n         assertNull(jp.nextToken());\n         jp.close();\n+        buf.close();\n     }\n \n     /**\n \n         // then content check too:\n         verifyJsonSpecSampleDoc(tb.asParser(), true);\n+        tb.close();\n     }\n \n     public void testAppend() throws IOException\n         assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n         assertEquals(13, jp.getIntValue());\n         assertToken(JsonToken.END_OBJECT, jp.nextToken());\n+        jp.close();\n+        buf1.close();\n     }\n     \n     /*\n \n         // also: original parsers should be closed\n         assertTrue(jp.isClosed());\n+        jp.close();\n+        buf.close();\n     }\n     \n     /**\n         assertEquals(13, combo.getIntValue());\n         assertToken(JsonToken.END_ARRAY, combo.nextToken());\n         assertNull(combo.nextToken());        \n+        buf1.close();\n+        buf2.close();\n+        buf3.close();\n+        buf4.close();\n     }    \n }", "timestamp": 1348550599, "metainfo": ""}