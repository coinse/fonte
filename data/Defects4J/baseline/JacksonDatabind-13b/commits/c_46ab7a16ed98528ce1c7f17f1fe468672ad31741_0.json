{"sha": "46ab7a16ed98528ce1c7f17f1fe468672ad31741", "log": "Implement #623", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java\n     private static final long serialVersionUID = 1L;\n \n     protected final Converter<Object,T> _converter;\n-    \n+\n     /**\n      * Fully resolved delegate type, with generic information if any available.\n      */\n     protected final JavaType _delegateType;\n-    \n+\n     /**\n      * Underlying serializer for type <code>T<.code>.\n      */\n     protected final JsonDeserializer<Object> _delegateDeserializer;\n-    \n+\n     /*\n     /**********************************************************\n     /* Life-cycle\n         _delegateType = null;\n         _delegateDeserializer = null;\n     }\n-    \n+\n     @SuppressWarnings(\"unchecked\")\n     public StdDelegatingDeserializer(Converter<Object,T> converter,\n             JavaType delegateType, JsonDeserializer<?> delegateDeserializer)\n         _converter = converter;\n         _delegateType = delegateType;\n         _delegateDeserializer = (JsonDeserializer<Object>) delegateDeserializer;\n+    }\n+\n+    /**\n+     * @since 2.5\n+     */\n+    protected StdDelegatingDeserializer(StdDelegatingDeserializer<T> src)\n+    {\n+        super(src);\n+        _converter = src._converter;\n+        _delegateType = src._delegateType;\n+        _delegateDeserializer = src._delegateDeserializer;\n     }\n \n     /**\n             ((ResolvableDeserializer) _delegateDeserializer).resolve(ctxt);\n         }\n     }\n-    \n+\n     @Override\n     public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property)\n         throws JsonMappingException\n     public Class<?> handledType() {\n         return _delegateDeserializer.handledType();\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Serialization\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n \n     protected StdDeserializer(JavaType valueType) {\n         _valueClass = (valueType == null) ? null : valueType.getRawClass();\n+    }\n+\n+    /**\n+     * Copy-constructor for sub-classes to use, most often when creating\n+     * new instances for {@link ContextualDeserializer}.\n+     * \n+     * @since 2.5\n+     */\n+    protected StdDeserializer(StdDeserializer<?> src) {\n+        _valueClass = src._valueClass;\n     }\n \n     /*\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdNodeBasedDeserializer.java\n+package com.fasterxml.jackson.databind.deser.std;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.deser.ResolvableDeserializer;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n+\n+/**\n+ * Convenience deserializer that may be used to deserialize values given an\n+ * intermediate tree representation ({@link JsonNode}).\n+ * Note that this is a slightly simplified alternative to {@link StdDelegatingDeserializer}).\n+ *\n+ * @param <T> Target type of this deserializer; that is, type of values that\n+ *   input data is deserialized into.\n+ * \n+ * @since 2.5\n+ */\n+public abstract class StdNodeBasedDeserializer<T>\n+    extends StdDeserializer<T>\n+    implements ResolvableDeserializer\n+{\n+    private static final long serialVersionUID = 1L;\n+\n+    protected JsonDeserializer<Object> _treeDeserializer;\n+\n+    /*\n+    /**********************************************************\n+    /* Life-cycle\n+    /**********************************************************\n+     */\n+    \n+    protected StdNodeBasedDeserializer(JavaType targetType) {\n+        super(targetType);\n+    }\n+\n+    protected StdNodeBasedDeserializer(Class<T> targetType) {\n+        super(targetType);\n+    }\n+\n+    /**\n+     * \"Copy-constructor\" used when creating a modified copies, most often\n+     * if sub-class implements {@link ContextualDeserializer}.\n+     */\n+    protected StdNodeBasedDeserializer(StdNodeBasedDeserializer<?> src) {\n+        super(src);\n+        _treeDeserializer = src._treeDeserializer;\n+    }\n+\n+    @Override\n+    public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n+        _treeDeserializer = ctxt.findRootValueDeserializer(ctxt.constructType(JsonNode.class));\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Abstract methods for sub-classes\n+    /**********************************************************\n+     */\n+\n+    public abstract T convert(JsonNode root, DeserializationContext ctxt) throws IOException;\n+\n+    /*\n+    /**********************************************************\n+    /* JsonDeserializer impl\n+    /**********************************************************\n+     */\n+    \n+    @Override\n+    public T deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n+        JsonNode n = (JsonNode) _treeDeserializer.deserialize(jp, ctxt);\n+        return convert(n, ctxt);\n+    }\n+\n+    @Override\n+    public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,\n+            TypeDeserializer td)\n+        throws IOException, JsonProcessingException\n+    {\n+        /* 19-Nov-2014, tatu: Quite likely we'd have some issues but... let's\n+         *   try, just in case.\n+         */\n+        JsonNode n = (JsonNode) _treeDeserializer.deserializeWithType(jp, ctxt, td);\n+        return convert(n, ctxt);\n+    }\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdScalarDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdScalarDeserializer.java\n \n     protected StdScalarDeserializer(Class<?> vc) { super(vc); }\n     protected StdScalarDeserializer(JavaType valueType) { super(valueType); }\n+\n+    // since 2.5\n+    protected StdScalarDeserializer(StdScalarDeserializer<?> src) { super(src); }\n     \n     @Override\n     public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException {\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestCustomDeserializers.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestCustomDeserializers.java\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer;\n import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+import com.fasterxml.jackson.databind.deser.std.StdNodeBasedDeserializer;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n import com.fasterxml.jackson.databind.util.StdConverter;\n \n         assertEquals(7, imm.y);\n     }\n \n+    // [databind#623]\n+    public void testJsonNodeDelegating() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        SimpleModule module = new SimpleModule(\"test\", Version.unknownVersion());\n+        module.addDeserializer(Immutable.class,\n+            new StdNodeBasedDeserializer<Immutable>(Immutable.class) {\n+                @Override\n+                public Immutable convert(JsonNode root, DeserializationContext ctxt) throws IOException {\n+                    int x = root.path(\"x\").asInt();\n+                    int y = root.path(\"y\").asInt();\n+                    return new Immutable(x, y);\n+                }\n+        });\n+        mapper.registerModule(module);\n+        Immutable imm = mapper.readValue(\"{\\\"x\\\":-10,\\\"y\\\":3}\", Immutable.class);\n+        assertEquals(-10, imm.x);\n+        assertEquals(3, imm.y);\n+    }\n+    \n     public void testIssue882() throws Exception\n     {\n         Model original = new Model(Collections.singletonMap(new CustomKey(123), \"test\"));", "timestamp": 1416437843, "metainfo": ""}