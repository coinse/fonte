{"sha": "d0cc247fe6d59dd27430756ef3c8134c168f2f09", "log": "Fixed #113F", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n     {\n         final SettableBeanProperty[] creatorProps =\n                 builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig());\n+        final boolean isConcrete = !beanDesc.getType().isAbstract();\n         \n         // Things specified as \"ok to ignore\"? [JACKSON-77]\n         AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();\n                     prop = constructSetterlessProperty(ctxt, beanDesc, propDef);\n                 }\n             }\n-            if (propDef.hasConstructorParameter()) {\n+            // 25-Sep-2014, tatu: No point in finding constructor parameters for abstract types\n+            //   (since they are never used anyway)\n+            if (isConcrete && propDef.hasConstructorParameter()) {\n                 /* [JACKSON-700] If property is passed via constructor parameter, we must\n                  *   handle things in special way. Not sure what is the most optimal way...\n                  *   for now, let's just call a (new) method in builder, which does nothing.\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestCreatorWithPolymorphic113.java\n+package com.fasterxml.jackson.databind.creators;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+/**\n+ * Test(s) for [Issue#113], problems with polymorphic types, JsonCreator.\n+ */\n+public class TestCreatorWithPolymorphic113 extends BaseMapTest\n+{\n+    @JsonIgnoreProperties(ignoreUnknown = true)\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"_class\")\n+    @JsonSubTypes({  @JsonSubTypes.Type(Dog.class) })\n+    public static abstract class Animal {\n+        public final static String ID = \"id\";\n+\n+        private String id;\n+\n+        @JsonCreator\n+        public Animal(@JsonProperty(ID) String id) {\n+            this.id = id;\n+        }\n+\n+        @JsonProperty(ID)\n+        public String getId() {\n+            return id;\n+        }\n+    }\n+\n+    @JsonIgnoreProperties(ignoreUnknown = true)\n+    public static class Dog extends Animal {\n+        @JsonCreator\n+        public Dog(@JsonProperty(ID) String id) {\n+            super(id);\n+        }\n+    }\n+\n+    @JsonIgnoreProperties(ignoreUnknown = true)\n+    public static class AnimalWrapper {\n+        private Animal animal;\n+\n+        @JsonCreator\n+        public AnimalWrapper(@JsonProperty(\"animal\") Animal animal) {\n+            this.animal = animal;\n+        }\n+\n+        public Animal getAnimal() {\n+            return animal;\n+        }\n+    }\n+\n+    public void testSubtypes() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        String id = \"nice dogy\";\n+        String json = mapper.writeValueAsString(new AnimalWrapper(new Dog(id)));\n+//System.err.println(\"JSON = \"+json);\n+        AnimalWrapper wrapper = mapper.readValue(json, AnimalWrapper.class);\n+        assertEquals(id, wrapper.getAnimal().getId());\n+    }\n+}", "timestamp": 1411710477, "metainfo": ""}