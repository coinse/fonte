{"sha": "7ec58bf26f919903b40b08a9e938b478c9f83b40", "log": "removing an unnecessary class", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java\n                 } else {\n                     // [JACKSON-531]: Allow comparison of arrays too...\n                     if (valueToSuppress.getClass().isArray()) {\n-                        valueToSuppress = Comparators.getArrayComparator(valueToSuppress);\n+                        valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);\n                     }\n                 }\n                 break;\n--- a/src/main/java/com/fasterxml/jackson/databind/util/ArrayBuilders.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/ArrayBuilders.java\n  */\n public final class ArrayBuilders\n {\n-    BooleanBuilder _booleanBuilder = null;\n+    private BooleanBuilder _booleanBuilder = null;\n \n     // note: no need for char[] builder, assume they are Strings\n \n-    ByteBuilder _byteBuilder = null;\n-    ShortBuilder _shortBuilder = null;\n-    IntBuilder _intBuilder = null;\n-    LongBuilder _longBuilder = null;\n-    \n-    FloatBuilder _floatBuilder = null;\n-    DoubleBuilder _doubleBuilder = null;\n+    private ByteBuilder _byteBuilder = null;\n+    private ShortBuilder _shortBuilder = null;\n+    private IntBuilder _intBuilder = null;\n+    private LongBuilder _longBuilder = null;\n+    \n+    private FloatBuilder _floatBuilder = null;\n+    private DoubleBuilder _doubleBuilder = null;\n \n     public ArrayBuilders() { }\n \n     /**********************************************************\n      */\n \n+    /**\n+     * Helper method used for constructing simple value comparator used for\n+     * comparing arrays for content equality.\n+     *<p>\n+     * Note: current implementation is not optimized for speed; if performance\n+     * ever becomes an issue, it is possible to construct much more efficient\n+     * typed instances (one for Object[] and sub-types; one per primitive type).\n+     * \n+     * @since 2.2 Moved from earlier <code>Comparators</code> class\n+     */\n+    public static Object getArrayComparator(final Object defaultValue)\n+    {\n+        final int length = Array.getLength(defaultValue);\n+        final Class<?> defaultValueType = defaultValue.getClass();\n+        return new Object() {\n+            @Override\n+            public boolean equals(Object other) {\n+                if (other == this) return true;\n+                if (other == null || other.getClass() != defaultValueType) {\n+                    return false;\n+                }\n+                if (Array.getLength(other) != length) return false;\n+                // so far so good: compare actual equality; but only shallow one\n+                for (int i = 0; i < length; ++i) {\n+                    Object value1 = Array.get(defaultValue, i);\n+                    Object value2 = Array.get(other, i);\n+                    if (value1 == value2) continue;\n+                    if (value1 != null) {\n+                        if (!value1.equals(value2)) {\n+                            return false;\n+                        }\n+                    }\n+                }\n+                return true;\n+            }\n+        };\n+    }\n+    \n     public static <T> HashSet<T> arrayToSet(T[] elements)\n     {\n         HashSet<T> result = new HashSet<T>();", "timestamp": 1366168307, "metainfo": ""}