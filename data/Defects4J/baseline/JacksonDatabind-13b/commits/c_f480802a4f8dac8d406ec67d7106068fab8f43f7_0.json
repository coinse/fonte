{"sha": "f480802a4f8dac8d406ec67d7106068fab8f43f7", "log": "Improved error reporting a bit for uninitialized deserializers", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n+import com.fasterxml.jackson.databind.jsontype.impl.FailingDeserializer;\n import com.fasterxml.jackson.databind.util.Annotations;\n import com.fasterxml.jackson.databind.util.ViewMatcher;\n \n     private static final long serialVersionUID = -1026580169193933453L;\n \n     /**\n+     * To avoid nasty NPEs, let's use a placeholder for _valueDeserializer,\n+     * if real deserializer is not (yet) available.\n+     * \n+     * @since 2.2\n+     */\n+    protected static final JsonDeserializer<Object> MISSING_VALUE_DESERIALIZER = new FailingDeserializer(\n+            \"No _valueDeserializer assigned\");\n+    \n+    /**\n      * Logical name of the property (often but not always derived\n      * from the setter method name)\n      */\n             typeDeser = typeDeser.forProperty(this);\n         }\n         _valueTypeDeserializer = typeDeser;\n+        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n     }\n \n     /**\n         _managedReferenceName = src._managedReferenceName;\n         _propertyIndex = src._propertyIndex;\n \n-        _valueDeserializer = (JsonDeserializer<Object>) deser;\n         if (deser == null) {\n             _nullProvider = null;\n+            _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n         } else {\n             Object nvl = deser.getNullValue();\n             _nullProvider = (nvl == null) ? null : new NullProvider(_type, nvl);\n+            _valueDeserializer = (JsonDeserializer<Object>) deser;\n         }\n         _viewMatcher = src._viewMatcher;\n     }\n \n     public String getManagedReferenceName() { return _managedReferenceName; }\n \n-    public boolean hasValueDeserializer() { return (_valueDeserializer != null); }\n+    public boolean hasValueDeserializer() {\n+        return (_valueDeserializer != null) && (_valueDeserializer != MISSING_VALUE_DESERIALIZER);\n+    }\n \n     public boolean hasValueTypeDeserializer() { return (_valueTypeDeserializer != null); }\n     \n-    public JsonDeserializer<Object> getValueDeserializer() { return _valueDeserializer; }\n+    public JsonDeserializer<Object> getValueDeserializer() {\n+        JsonDeserializer<Object> deser = _valueDeserializer;\n+        if (deser == MISSING_VALUE_DESERIALIZER) {\n+            return null;\n+        }\n+        return deser;\n+    }\n \n     public TypeDeserializer getValueTypeDeserializer() { return _valueTypeDeserializer; }\n \n         if (_valueTypeDeserializer != null) {\n             return _valueDeserializer.deserializeWithType(jp, ctxt, _valueTypeDeserializer);\n         }\n-if (_valueDeserializer == null) throw new JsonMappingException(\"No Value deserializer for '\"+this._propName+\"', type \"+this._type);\n         return _valueDeserializer.deserialize(jp, ctxt);\n     }\n     \n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/FailingDeserializer.java\n+package com.fasterxml.jackson.databind.jsontype.impl;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+\n+/**\n+ * Special bogus \"serializer\" that will throw\n+ * {@link JsonMappingException} if an attempt is made to deserialize\n+ * a value. This is used as placeholder to avoid NPEs for uninitialized\n+ * structured serializers or handlers.\n+ */\n+public class FailingDeserializer extends StdDeserializer<Object>\n+{\n+    private static final long serialVersionUID = 1L;\n+\n+    protected final String _message;\n+\n+    public FailingDeserializer(String m) {\n+        super(Object.class);\n+        _message = m;\n+    }\n+    \n+    @Override\n+    public Object deserialize(JsonParser jp, DeserializationContext ctxt)\n+        throws JsonMappingException\n+    {\n+        throw ctxt.mappingException(_message);\n+    }\n+}", "timestamp": 1365460130, "metainfo": ""}