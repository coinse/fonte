{"sha": "647cb683bf03067f82719cf74190f741270fcb87", "log": "Added JsonLocation info in exception thrown for object id check at end of processing.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java\n                     Referring referring = iterator.next();\n                     // TODO add proper info (class + json loc).\n                     // Modify jackson-annotation to permit access to information of IdKey.\n-                    exception.addUnresolvedId(roid.id, null, null);\n+                    exception.addUnresolvedId(roid.id, null, referring.getLocation());\n                 }\n             }\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableAnyProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableAnyProperty.java\n             if (!(_valueDeserializer.getObjectIdReader() != null)) {\n                 throw JsonMappingException.from(jp, \"Unresolved forward reference but no identity info.\", reference);\n             }\n-            AnySetterReferring referring = new AnySetterReferring(instance, propName, reference.getUnresolvedId());\n+            AnySetterReferring referring = new AnySetterReferring(instance, propName, reference.getUnresolvedId(),\n+                    reference.getLocation());\n             reference.getRoid().appendReferring(referring);\n         }\n     }\n \n     @Override public String toString() { return \"[any property on class \"+getClassName()+\"]\"; }\n \n-    private class AnySetterReferring implements Referring {\n+    private class AnySetterReferring extends Referring {\n         private Object _pojo;\n         private String _propName;\n         private Object _unresolvedId;\n \n-        public AnySetterReferring(Object instance, String propName, Object id)\n+        public AnySetterReferring(Object instance, String propName, Object id, JsonLocation location)\n         {\n+            super(location);\n             _pojo = instance;\n             _propName = propName;\n             _unresolvedId = id;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReferenceProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReferenceProperty.java\n import java.io.IOException;\n import java.lang.annotation.Annotation;\n \n+import com.fasterxml.jackson.core.JsonLocation;\n import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.DeserializationContext;\n             if (!usingIdentityInfo) {\n                 throw JsonMappingException.from(jp, \"Unresolved forward reference but no identity info.\", reference);\n             }\n-            reference.getRoid().appendReferring(new PropertyReferring(instance, reference.getUnresolvedId()));\n+            reference.getRoid().appendReferring(\n+                    new PropertyReferring(instance, reference.getUnresolvedId(), reference.getLocation()));\n             return null;\n         }\n     }\n         return _forward.setAndReturn(instance, value);\n     }\n \n-    public final class PropertyReferring implements Referring {\n+    public final class PropertyReferring extends Referring {\n         public final Object _pojo;\n         private Object _unresolvedId;\n \n-        public PropertyReferring(Object ob, Object id)\n+        public PropertyReferring(Object ob, Object id, JsonLocation location)\n         {\n+            super(location);\n             _pojo = ob;\n             _unresolvedId = id;\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ReadableObjectId.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ReadableObjectId.java\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.LinkedList;\n+\n+import com.fasterxml.jackson.core.JsonLocation;\n \n /**\n  * Simple value container for containing information about single Object Id\n     /**********************************************************\n      */\n \n-    public interface Referring {\n-        void handleResolvedForwardReference(Object id, Object value)\n+    public static abstract class Referring {\n+        private final JsonLocation _location;\n+\n+        protected Referring(JsonLocation location)\n+        {\n+            _location = location;\n+        }\n+\n+        public JsonLocation getLocation()\n+        {\n+            return _location;\n+        }\n+\n+        public abstract void handleResolvedForwardReference(Object id, Object value)\n             throws IOException;\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n         JsonDeserializer<Object> valueDes = _valueDeserializer;\n         JsonToken t;\n         final TypeDeserializer typeDeser = _valueTypeDeserializer;\n-        CollectionReferring referringAccumulator = null;\n+        CollectionReferringAccumulator referringAccumulator = null;\n         if(valueDes.getObjectIdReader() != null){\n-            referringAccumulator = new CollectionReferring(result);\n+            referringAccumulator = new CollectionReferringAccumulator(result);\n         }\n         while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n             try {\n                     throw JsonMappingException\n                             .from(jp, \"Unresolved forward reference but no identity info.\", reference);\n                 }\n-                referringAccumulator.flagUnresolved(reference.getUnresolvedId());\n-                reference.getRoid().appendReferring(referringAccumulator);\n+                Referring ref = referringAccumulator.handleUnresolvedReference(reference);\n+                reference.getRoid().appendReferring(ref);\n             }\n         }\n         return result;\n         return result;\n     }\n \n-    public final class CollectionReferring implements Referring {\n+    public final class CollectionReferringAccumulator {\n         private Collection<Object> _result;\n         /**\n          * A list of {@link UnresolvedId} to maintain ordering.\n          */\n         private List<UnresolvedId> _accumulator = new ArrayList<UnresolvedId>();\n \n-        public CollectionReferring(Collection<Object> result)\n+        public CollectionReferringAccumulator(Collection<Object> result)\n         {\n             _result = result;\n         }\n             }\n         }\n \n-        public void flagUnresolved(Object id)\n+        public Referring handleUnresolvedReference(UnresolvedForwardReference reference)\n         {\n-            _accumulator.add(new UnresolvedId(id));\n-        }\n-\n-        @Override\n-        public void handleResolvedForwardReference(Object id, Object value)\n+            UnresolvedId id = new UnresolvedId(reference.getUnresolvedId(), reference.getLocation());\n+            _accumulator.add(id);\n+            return id;\n+        }\n+\n+        public void resolveForwardReference(Object id, Object value)\n             throws IOException\n         {\n             Iterator<UnresolvedId> iterator = _accumulator.iterator();\n             throw new IllegalArgumentException(\"Trying to resolve a forward reference with id [\" + id\n                     + \"] that wasn't previously seen as unresolved.\");\n         }\n-    }\n-\n-    /**\n-     * Helper class to maintain processing order of value. The resolved object\n-     * associated with {@link #_id} comes before the values in {@link _next}.\n-     */\n-    private static final class UnresolvedId {\n-        private final Object _id;\n-        private final List<Object> _next = new ArrayList<Object>();\n-\n-        private UnresolvedId(Object id)\n-        {\n-            _id = id;\n+\n+        /**\n+         * Helper class to maintain processing order of value. The resolved\n+         * object associated with {@link #_id} comes before the values in\n+         * {@link _next}.\n+         */\n+        private final class UnresolvedId extends Referring {\n+            private final Object _id;\n+            private final List<Object> _next = new ArrayList<Object>();\n+\n+            private UnresolvedId(Object id, JsonLocation location)\n+            {\n+                super(location);\n+                _id = id;\n+            }\n+\n+            @Override\n+            public void handleResolvedForwardReference(Object id, Object value)\n+                throws IOException\n+            {\n+                resolveForwardReference(id, value);\n+            }\n         }\n     }\n }", "timestamp": 1389625653, "metainfo": ""}