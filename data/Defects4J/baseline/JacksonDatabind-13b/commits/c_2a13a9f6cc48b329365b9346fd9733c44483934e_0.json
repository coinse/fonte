{"sha": "2a13a9f6cc48b329365b9346fd9733c44483934e", "log": "more test fixes", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/creators/TestPolymorphicCreators.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestPolymorphicCreators.java\n \n     static class Animal\n     {\n-\t// All animals have names, for our demo purposes...\n-\tpublic String name;\n+        // All animals have names, for our demo purposes...\n+        public String name;\n \n-\tprotected Animal() { }\n+        protected Animal() { }\n \n-\t/**\n-\t * Creator method that can instantiate instances of\n-\t * appropriate polymoprphic type\n-\t */\n+        /**\n+         * Creator method that can instantiate instances of\n+         * appropriate polymoprphic type\n+         */\n         @JsonCreator\n-\tpublic static Animal create(@JsonProperty(\"type\") String type)\n-\t{\n+        public static Animal create(@JsonProperty(\"type\") String type)\n+        {\n \t    if (\"dog\".equals(type)) {\n \t\treturn new Dog();\n \t    }\n \t\treturn new Cat();\n \t    }\n \t    throw new IllegalArgumentException(\"No such animal type ('\"+type+\"')\");\n-\t}\n+        }\n     }\n \n     static class Dog extends Animal\n     {\n-\tdouble barkVolume; // in decibels\n-\tpublic Dog() { }\n-\tpublic void setBarkVolume(double v) { barkVolume = v; }\n+        double barkVolume; // in decibels\n+        public Dog() { }\n+        public void setBarkVolume(double v) { barkVolume = v; }\n     }\n \n     static class Cat extends Animal\n     {\n-\tboolean likesCream;\n-\tpublic int lives;\n-\tpublic Cat() { }\n-\tpublic void setLikesCream(boolean likesCreamSurely) { likesCream = likesCreamSurely; }\n+        boolean likesCream;\n+        public int lives;\n+        public Cat() { }\n+        public void setLikesCream(boolean likesCreamSurely) { likesCream = likesCreamSurely; }\n     }\n \n     abstract static class AbstractRoot\n     }\n \n     static final class One extends AbstractRoot {\n-            private One(String opt) {\n-                    super(opt);\n-            }\n+        private One(String opt) {\n+            super(opt);\n+        }\n \n-            @Override public int getWhich() {\n-                    return 1;\n-            }\n+        @Override public int getWhich() {\n+            return 1;\n+        }\n     }\n     \n     /*\n-    **********************************************\n-    * Actual tests\n-    **********************************************\n+    /**********************************************************\n+    /* Actual tests\n+    /**********************************************************\n      */\n \n+    private final ObjectMapper MAPPER = new ObjectMapper();\n+    \n     /**\n      * Simple test to verify that it is possible to implement polymorphic\n      * deserialization manually.\n      */\n     public void testManualPolymorphicDog() throws Exception\n     {\n-\tObjectMapper mapper = new ObjectMapper();\n-\t// first, a dog, start with type\n-\tAnimal animal = mapper.readValue(\"{ \\\"type\\\":\\\"dog\\\", \\\"name\\\":\\\"Fido\\\", \\\"barkVolume\\\" : 95.0 }\", Animal.class);\n-\tassertEquals(Dog.class, animal.getClass());\n-\tassertEquals(\"Fido\", animal.name);\n-\tassertEquals(95.0, ((Dog) animal).barkVolume);\n+        // first, a dog, start with type\n+        Animal animal = MAPPER.readValue(\"{ \\\"type\\\":\\\"dog\\\", \\\"name\\\":\\\"Fido\\\", \\\"barkVolume\\\" : 95.0 }\", Animal.class);\n+        assertEquals(Dog.class, animal.getClass());\n+        assertEquals(\"Fido\", animal.name);\n+        assertEquals(95.0, ((Dog) animal).barkVolume);\n     }\n \n     public void testManualPolymorphicCatBasic() throws Exception\n     {\n-\tObjectMapper mapper = new ObjectMapper();\n-\t// and finally, lactose-intolerant, but otherwise robust super-cat:\n-\tAnimal animal = mapper.readValue(\"{ \\\"name\\\" : \\\"Macavity\\\", \\\"type\\\":\\\"cat\\\", \\\"lives\\\":18, \\\"likesCream\\\":false }\", Animal.class);\n-\tassertEquals(Cat.class, animal.getClass());\n-\tassertEquals(\"Macavity\", animal.name); // ... there's no one like Macavity!\n-\tCat cat = (Cat) animal;\n-\tassertEquals(18, cat.lives);\n-\t// ok, he can't drink dairy products. Let's verify:\n-\tassertEquals(false, cat.likesCream);\n+        // and finally, lactose-intolerant, but otherwise robust super-cat:\n+        Animal animal = MAPPER.readValue(\"{ \\\"name\\\" : \\\"Macavity\\\", \\\"type\\\":\\\"cat\\\", \\\"lives\\\":18, \\\"likesCream\\\":false }\", Animal.class);\n+        assertEquals(Cat.class, animal.getClass());\n+        assertEquals(\"Macavity\", animal.name); // ... there's no one like Macavity!\n+        Cat cat = (Cat) animal;\n+        assertEquals(18, cat.lives);\n+        // ok, he can't drink dairy products. Let's verify:\n+        assertEquals(false, cat.likesCream);\n     }\n \n     public void testManualPolymorphicCatWithReorder() throws Exception\n     {\n-\tObjectMapper mapper = new ObjectMapper();\n-\t// Then cat; shuffle order to mandate buffering\n-\tAnimal animal = mapper.readValue(\"{ \\\"likesCream\\\":true, \\\"name\\\" : \\\"Venla\\\", \\\"type\\\":\\\"cat\\\" }\", Animal.class);\n-\tassertEquals(Cat.class, animal.getClass());\n-\tassertEquals(\"Venla\", animal.name);\n-\t// bah, of course cats like cream. But let's ensure Jackson won't mess with laws of nature!\n-\tassertTrue(((Cat) animal).likesCream);\n+        // Then cat; shuffle order to mandate buffering\n+        Animal animal = MAPPER.readValue(\"{ \\\"likesCream\\\":true, \\\"name\\\" : \\\"Venla\\\", \\\"type\\\":\\\"cat\\\" }\", Animal.class);\n+        assertEquals(Cat.class, animal.getClass());\n+        assertEquals(\"Venla\", animal.name);\n+        // bah, of course cats like cream. But let's ensure Jackson won't mess with laws of nature!\n+        assertTrue(((Cat) animal).likesCream);\n     }\n \n     public void testManualPolymorphicWithNumbered() throws Exception\n     {\n-         final ObjectMapper m = new ObjectMapper();\n-         final ObjectWriter w = m.writerWithType(AbstractRoot.class);\n-         final ObjectReader r = m.reader(AbstractRoot.class);\n+         final ObjectWriter w = MAPPER.writerWithType(AbstractRoot.class);\n+         final ObjectReader r = MAPPER.reader(AbstractRoot.class);\n \n-        AbstractRoot input = AbstractRoot.make(1, \"oh hai!\");\n-        String json = w.writeValueAsString(input);\n-        AbstractRoot result = r.readValue(json);\n-        assertNotNull(result);\n-        assertEquals(\"oh hai!\", result.getOpt());\n+         AbstractRoot input = AbstractRoot.make(1, \"oh hai!\");\n+         String json = w.writeValueAsString(input);\n+         AbstractRoot result = r.readValue(json);\n+         assertNotNull(result);\n+         assertEquals(\"oh hai!\", result.getOpt());\n     }\n }", "timestamp": 1353180854, "metainfo": ""}