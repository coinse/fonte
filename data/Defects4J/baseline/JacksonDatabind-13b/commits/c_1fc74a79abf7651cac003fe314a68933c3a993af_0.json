{"sha": "1fc74a79abf7651cac003fe314a68933c3a993af", "log": "Implement #405", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java\n     FAIL_ON_EMPTY_BEANS(true),\n \n     /**\n+     * Feature that determines what happens when a direct self-reference\n+     * is detected by a POJO (and no Object Id handling is enabled for it):\n+     * either a {@link JsonMappingException} is\n+     * thrown (if true), or reference is normally processed (false).\n+     *<p>\n+     * Feature is enabled by default.\n+     *\n+     * @since 2.4\n+     */\n+    FAIL_ON_SELF_REFERENCES(true),\n+    \n+    /**\n      * Feature that determines whether Jackson code should catch\n      * and wrap {@link Exception}s (but never {@link Error}s!)\n      * to add additional information about\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;\n import com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter;\n+import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;\n import com.fasterxml.jackson.databind.util.Annotations;\n import com.fasterxml.jackson.databind.util.NameTransformer;\n \n         }\n         // For non-nulls: simple check for direct cycles\n         if (value == bean) {\n-            _handleSelfReference(bean, ser);\n+            // three choices: exception; handled by call; or pass-through\n+            if (_handleSelfReference(bean, jgen, prov, ser)) {\n+                return;\n+            }\n         }\n         jgen.writeFieldName(_name);\n         if (_typeSerializer == null) {\n         }\n         // For non-nulls: simple check for direct cycles\n         if (value == bean) {\n-            _handleSelfReference(bean, ser);\n+            if (_handleSelfReference(bean, jgen, prov, ser)) {\n+                return;\n+            }\n         }\n         if (_typeSerializer == null) {\n             ser.serialize(value, jgen, prov);\n         return _field.get(bean);\n     }\n \n-    protected void _handleSelfReference(Object bean, JsonSerializer<?> ser) throws JsonMappingException {\n-        /* 05-Feb-2012, tatu: Usually a problem, but NOT if we are handling\n-         *    object id; this may be the case for BeanSerializers at least.\n-         */\n-        if (ser.usesObjectId()) { return; }\n-        throw new JsonMappingException(\"Direct self-reference leading to cycle\");\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n+    /**\n+     * Method called to handle a direct self-reference through this property.\n+     * Method can choose to indicate an error by throwing {@link JsonMappingException};\n+     * fully handle serialization (and return true); or indicate that it should be\n+     * serialized normally (return false).\n+     *<p>\n+     * Default implementation will throw {@link JsonMappingException} if\n+     * {@link SerializationFeature.FAIL_ON_SELF_REFERENCES} is enabled;\n+     * or return <code>false</code> if it is disabled.\n+     * \n+     * @return True if method fully handled self-referential value; false if not (caller\n+     *    is to handle it) or {@link JsonMappingException} if there is no way handle it\n+     */\n+    protected boolean _handleSelfReference(Object bean, JsonGenerator jgen, SerializerProvider prov, JsonSerializer<?> ser)\n+            throws JsonMappingException {\n+        if (prov.isEnabled(SerializationFeature.FAIL_ON_SELF_REFERENCES)\n+                && !ser.usesObjectId()) {\n+            // 05-Feb-2013, tatu: Usually a problem, but NOT if we are handling\n+            //    object id; this may be the case for BeanSerializers at least.\n+            // 13-Feb-2014, tatu: another possible ok case: custom serializer (something\n+            //   OTHER than {@link BeanSerializerBase}\n+            if (ser instanceof BeanSerializerBase) {\n+                throw new JsonMappingException(\"Direct self-reference leading to cycle\");\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public String toString() {\n         StringBuilder sb = new StringBuilder(40);\n         sb.append(\"property '\").append(getName()).append(\"' (\");\n         if (_accessorMethod != null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanPropertyWriter.java\n         }\n         // For non-nulls, first: simple check for direct cycles\n         if (value == bean) {\n-            _handleSelfReference(bean, ser);\n+            if (_handleSelfReference(bean, jgen, prov, ser)) {\n+                return;\n+            }\n         }\n \n         // note: must verify we are using unwrapping serializer; if not, will write field name\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestCyclicTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestCyclicTypes.java\n     static class StringLink extends GenericLink<String> {\n     }\n \n-    static class Selfie382 {\n+    static class Selfie405 {\n         public int id;\n \n         @JsonIgnoreProperties({ \"parent\" })\n-        public Selfie382 parent;\n+        public Selfie405 parent;\n         \n-        public Selfie382(int id) { this.id = id; }\n+        public Selfie405(int id) { this.id = id; }\n     }\n     \n     /*\n         assertNull(b.a);\n     }\n \n-    // [Issue#382]: Should be possible to ignore cyclic ref\n+    // [Issue#405]: Should be possible to ignore cyclic ref\n     public void testIgnoredCycle() throws Exception\n     {\n-        Selfie382 self1 = new Selfie382(1);\n-        Selfie382 self2 = new Selfie382(2);\n-        self1.parent = self2;\n-        self2.parent = self1;\n-        String json = MAPPER.writeValueAsString(self1);\n+        Selfie405 self1 = new Selfie405(1);\n+        self1.parent = self1;\n+\n+        // First: exception with default settings:\n+        assertTrue(MAPPER.isEnabled(SerializationFeature.FAIL_ON_SELF_REFERENCES));\n+        try {\n+            MAPPER.writeValueAsString(self1);\n+            fail(\"Should fail with direct self-ref\");\n+        } catch (JsonMappingException e) {\n+            verifyException(e, \"Direct self-reference\");\n+        }\n+        \n+        ObjectWriter w = MAPPER.writer()\n+                .without(SerializationFeature.FAIL_ON_SELF_REFERENCES);\n+        String json = w.writeValueAsString(self1);\n         assertNotNull(json);\n-        assertEquals(aposToQuotes(\"{'id':1,'parent':{'id':2}}\"), json);\n+        assertEquals(aposToQuotes(\"{'id':1,'parent':{'id':1}}\"), json);\n     }\n \n }", "timestamp": 1392340869, "metainfo": ""}