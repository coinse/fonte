{"sha": "917e7229ca6a72ff4f0b1912d566af50ec6de89d", "log": "Minor test improvement for #646", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/BeanAsArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/BeanAsArraySerializer.java\n \n import java.io.IOException;\n \n-import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n+\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n         /* 10-Dec-2014, tatu: Not sure if this can be made to work reliably;\n          *   but for sure delegating to default implementation will not work. So:\n          */\n-        \n         if (_objectIdWriter != null) {\n             _serializeWithObjectId(bean, gen, provider, typeSer);\n             return;\n         }\n-\n         String typeStr = (_typeId == null) ? null : _customTypeId(bean);\n         if (typeStr == null) {\n             typeSer.writeTypePrefixForArray(bean, gen);\n         } else {\n             typeSer.writeCustomTypeSuffixForArray(bean, gen, typeStr);\n         }\n-        \n-    }\n-    \n+    }\n+\n     /**\n      * Main serialization method that will delegate actual output to\n      * configured\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/PojoAsArray646Test.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/PojoAsArray646Test.java\n         nestedList.add(new TheItem.NestedItem(\"foo2\"));\n         TheItem item = new TheItem(\"first\", false, nestedList);\n         Outer outer = new Outer();\n-        outer.getAttributes().put(TheItem.class.getName(), item);\n+        outer.getAttributes().put(\"entry1\", item);\n \n         String json = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(outer);\n ", "timestamp": 1418273174, "metainfo": ""}