{"sha": "442a26a8f48336cb78e305162a85cddcb8283201", "log": "Improve javadocs wrt #628", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n      * type (it can be an array type, however): typically a bean, array\n      * or a wrapper type (like {@link java.lang.Boolean}).\n      *<p>\n+     * If a low-level I/O problem (missing input, network error) occurs,\n+     * a {@link IOException} will be thrown.\n+     * If a parsing problem occurs (invalid JSON),\n+     * {@link JsonParseException} will be thrown.\n+     * If the input JSON structure does not match structure expected for\n+     * result type (or has other mismatch issues), a {@link JsonMappingException}\n+     * will be thrown.\n+     *<p>\n      * Note: this method should NOT be used if the result type is a\n      * container ({@link java.util.Collection} or {@link java.util.Map}.\n      * The reason is that due to type erasure, key and value types\n      * \"super type token\" (see )\n      * and specifically needs to be used if the root type is a \n      * parameterized (generic) container type.\n+     *<p>\n+     * If a low-level I/O problem (missing input, network error) occurs,\n+     * a {@link IOException} will be thrown.\n+     * If a parsing problem occurs (invalid JSON),\n+     * {@link JsonParseException} will be thrown.\n+     * If the input JSON structure does not match structure expected for\n+     * result type (or has other mismatch issues), a {@link JsonMappingException}\n+     * will be thrown.\n      */\n     @Override\n     @SuppressWarnings(\"unchecked\")\n      * to which is passed as argument. Type is passed using \n      * Jackson specific type; instance of which can be constructed using\n      * {@link TypeFactory}.\n+     *<p>\n+     * If a low-level I/O problem (missing input, network error) occurs,\n+     * a {@link IOException} will be thrown.\n+     * If a parsing problem occurs (invalid JSON),\n+     * {@link JsonParseException} will be thrown.\n+     * If the input JSON structure does not match structure expected for\n+     * result type (or has other mismatch issues), a {@link JsonMappingException}\n+     * will be thrown.\n      */\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     }\n \n     /**\n-     * Type-safe overloaded method, basically alias for {@link #readValue(JsonParser, ResolvedType)}.\n+     * Type-safe overloaded method, basically alias for {@link #readValue(JsonParser, Class)}.\n      */\n     @SuppressWarnings(\"unchecked\")\n     public <T> T readValue(JsonParser jp, JavaType valueType)\n      * root of the resulting tree (where root can consist\n      * of just a single node if the current event is a\n      * value event, not container).\n+     *<p>\n+     * If a low-level I/O problem (missing input, network error) occurs,\n+     * a {@link IOException} will be thrown.\n+     * If a parsing problem occurs (invalid JSON),\n+     * {@link JsonParseException} will be thrown.\n+     * If no content is found from input (end-of-input), Java\n+     * <code>null</code> will be returned.\n+     * \n+     * @return a {@link JsonNode}, if valid JSON content found; null\n+     *   if input has no content to bind -- note, however, that if\n+     *   JSON <code>null</code> token is found, it will be represented\n+     *   as a non-null {@link JsonNode} (one that returns <code>true</code>\n+     *   for {@link JsonNode#isNull()}\n      */\n     @Override\n     public <T extends TreeNode> T readTree(JsonParser jp)\n      * Returns root of the resulting tree (where root can consist\n      * of just a single node if the current event is a\n      * value event, not container).\n-     *\n+     *<p>\n+     * If a low-level I/O problem (missing input, network error) occurs,\n+     * a {@link IOException} will be thrown.\n+     * If a parsing problem occurs (invalid JSON),\n+     * {@link JsonParseException} will be thrown.\n+     * If no content is found from input (end-of-input), Java\n+     * <code>null</code> will be returned.\n+     * \n      * @param in Input stream used to read JSON content\n      *   for building the JSON tree.\n+     * \n+     * @return a {@link JsonNode}, if valid JSON content found; null\n+     *   if input has no content to bind -- note, however, that if\n+     *   JSON <code>null</code> token is found, it will be represented\n+     *   as a non-null {@link JsonNode} (one that returns <code>true</code>\n+     *   for {@link JsonNode#isNull()}\n      */\n     public JsonNode readTree(InputStream in)\n         throws IOException, JsonProcessingException\n      * Returns root of the resulting tree (where root can consist\n      * of just a single node if the current event is a\n      * value event, not container).\n+     *<p>\n+     * If a low-level I/O problem (missing input, network error) occurs,\n+     * a {@link IOException} will be thrown.\n+     * If a parsing problem occurs (invalid JSON),\n+     * {@link JsonParseException} will be thrown.\n+     * If no content is found from input (end-of-input), Java\n+     * <code>null</code> will be returned.\n      *\n      * @param r Reader used to read JSON content\n      *   for building the JSON tree.\n+     * \n+     * @return a {@link JsonNode}, if valid JSON content found; null\n+     *   if input has no content to bind -- note, however, that if\n+     *   JSON <code>null</code> token is found, it will be represented\n+     *   as a non-null {@link JsonNode} (one that returns <code>true</code>\n+     *   for {@link JsonNode#isNull()}\n      */\n     public JsonNode readTree(Reader r)\n         throws IOException, JsonProcessingException\n      * Method to deserialize JSON content as tree expressed using set of {@link JsonNode} instances.\n      * Returns root of the resulting tree (where root can consist of just a single node if the current\n      * event is a value event, not container).\n+     *<p>\n+     * If a low-level I/O problem (missing input, network error) occurs,\n+     * a {@link IOException} will be thrown.\n+     * If a parsing problem occurs (invalid JSON),\n+     * {@link JsonParseException} will be thrown.\n+     * If no content is found from input (end-of-input), Java\n+     * <code>null</code> will be returned.\n      *\n      * @param content JSON content to parse to build the JSON tree.\n+     * \n+     * @return a {@link JsonNode}, if valid JSON content found; null\n+     *   if input has no content to bind -- note, however, that if\n+     *   JSON <code>null</code> token is found, it will be represented\n+     *   as a non-null {@link JsonNode} (one that returns <code>true</code>\n+     *   for {@link JsonNode#isNull()}\n      */\n     public JsonNode readTree(String content)\n         throws IOException, JsonProcessingException", "timestamp": 1419400385, "metainfo": ""}