{"sha": "a9290a6cc723cb65d7dd6effa5771573cd2484ec", "log": "...", "commit": "\n--- a/src/test/java/perf/ManualReadPerfUntyped.java\n+++ b/src/test/java/perf/ManualReadPerfUntyped.java\n package perf;\n \n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.*;\n \n public class ManualReadPerfUntyped extends ObjectReaderBase\n {\n                 );\n     }\n \n+    // When comparing to simple streaming parsing, uncomment:\n+\n+    /*\n+    @Override\n+    protected long testDeser2(int reps, String input, ObjectReader reader) throws Exception {\n+        long start = System.currentTimeMillis();\n+        final JsonFactory f = reader.getFactory();\n+        while (--reps >= 0) {\n+            JsonParser p = f.createParser(input);\n+            while (p.nextToken() != null) {\n+                ;\n+            }\n+            p.close();\n+        }\n+        hash = f.hashCode();\n+        return System.currentTimeMillis() - start;\n+    }\n+    */\n }\n--- a/src/test/java/perf/ObjectReaderBase.java\n+++ b/src/test/java/perf/ObjectReaderBase.java\n             switch (type) {\n             case 0:\n                 msg = _desc1;\n-                msecs = testDeser(REPS, byteInput1, jsonReader);\n+                msecs = testDeser1(REPS, byteInput1, jsonReader);\n                 break;\n             case 1:\n                 msg = _desc2;\n-                msecs = testDeser(REPS, byteInput2, arrayReader);\n+                msecs = testDeser2(REPS, byteInput2, arrayReader);\n                 break;\n             default:\n                 throw new Error();\n             switch (type) {\n             case 0:\n                 msg = _desc1;\n-                msecs = testDeser(REPS, input1, jsonReader);\n+                msecs = testDeser1(REPS, input1, jsonReader);\n                 break;\n             case 1:\n                 msg = _desc2;\n-                msecs = testDeser(REPS, input2, arrayReader);\n+                msecs = testDeser2(REPS, input2, arrayReader);\n                 break;\n             default:\n                 throw new Error();\n             Thread.sleep(100L);\n         }\n     }\n-    \n-    private final long testDeser(int reps, byte[] input, ObjectReader reader) throws Exception\n+\n+    protected long testDeser1(int reps, byte[] input, ObjectReader reader) throws Exception {\n+        return _testDeser(reps, input, reader);\n+    }\n+    protected long testDeser2(int reps, byte[] input, ObjectReader reader) throws Exception {\n+        return _testDeser(reps, input, reader);\n+    }\n+    \n+    private final long _testDeser(int reps, byte[] input, ObjectReader reader) throws Exception\n     {\n         long start = System.currentTimeMillis();\n         Object result = null;\n         return System.currentTimeMillis() - start;\n     }\n \n-    private final long testDeser(int reps, String input, ObjectReader reader) throws Exception\n+    protected long testDeser1(int reps, String input, ObjectReader reader) throws Exception {\n+        return _testDeser(reps, input, reader);\n+    }\n+\n+    protected long testDeser2(int reps, String input, ObjectReader reader) throws Exception {\n+        return _testDeser(reps, input, reader);\n+    }\n+    \n+    private final long _testDeser(int reps, String input, ObjectReader reader) throws Exception\n     {\n         long start = System.currentTimeMillis();\n         Object result = null;\n         hash = result.hashCode();\n         return System.currentTimeMillis() - start;\n     }\n-    \n+\n     public static byte[] readAll(String filename) throws IOException\n     {\n         File f = new File(filename);", "timestamp": 1398045193, "metainfo": ""}