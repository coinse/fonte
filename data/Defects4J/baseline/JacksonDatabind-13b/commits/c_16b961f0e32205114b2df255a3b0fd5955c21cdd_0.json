{"sha": "16b961f0e32205114b2df255a3b0fd5955c21cdd", "log": "Starting to work on #194", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n      */\n     public int intValue() { return 0; }\n \n+    /**\n+     * Returns 64-bit long value for this node, <b>if and only if</b>\n+     * this node is numeric ({@link #isNumber} returns true). For other\n+     * types returns 0.\n+     * For floating-point numbers, value is truncated using default\n+     * Java coercion, similar to how cast from double to long operates.\n+     *\n+     * @return Long value this node contains, if any; 0 for non-number\n+     *   nodes.\n+     */\n     public long longValue() { return 0L; }\n+    \n+    /**\n+     * Returns 32-bit floating value for this node, <b>if and only if</b>\n+     * this node is numeric ({@link #isNumber} returns true). For other\n+     * types returns 0.0.\n+     * For integer values, conversion is done using coercion; this means\n+     * that an overflow is possible for `long` values\n+     *\n+     * @return 32-bit float value this node contains, if any; 0.0 for non-number nodes.\n+     *\n+     * @since 2.2\n+     */\n+    public float floatValue() { return 0.0f; }\n+\n+    /**\n+     * Returns 64-bit floating point (double) value for this node, <b>if and only if</b>\n+     * this node is numeric ({@link #isNumber} returns true). For other\n+     * types returns 0.0.\n+     * For integer values, conversion is done using coercion; this may result\n+     * in overflows with {@link BigInteger} values.\n+     *\n+     * @return 64-bit double value this node contains, if any; 0.0 for non-number nodes.\n+     *\n+     * @since 2.2\n+     */\n     public double doubleValue() { return 0.0; }\n+\n     public BigDecimal decimalValue() { return BigDecimal.ZERO; }\n     public BigInteger bigIntegerValue() { return BigInteger.ZERO; }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/node/BigIntegerNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/BigIntegerNode.java\n     public BigInteger bigIntegerValue() { return _value; }\n \n     @Override\n+    public float floatValue() { return _value.floatValue(); }\n+\n+    @Override\n     public double doubleValue() { return _value.doubleValue(); }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/node/DecimalNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/DecimalNode.java\n     public BigInteger bigIntegerValue() { return _value.toBigInteger(); }\n \n     @Override\n+    public float floatValue() { return _value.floatValue(); }\n+    \n+    @Override\n     public double doubleValue() { return _value.doubleValue(); }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/node/DoubleNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/DoubleNode.java\n     }\n \n     @Override\n-        public int intValue() { return (int) _value; }\n+    public int intValue() { return (int) _value; }\n \n     @Override\n-        public long longValue() { return (long) _value; }\n+    public long longValue() { return (long) _value; }\n \n     @Override\n-        public double doubleValue() { return _value; }\n+    public float floatValue() { return (float) _value; }\n+    \n+    @Override\n+    public double doubleValue() { return _value; }\n \n     @Override\n-        public BigDecimal decimalValue() { return BigDecimal.valueOf(_value); }\n+    public BigDecimal decimalValue() { return BigDecimal.valueOf(_value); }\n \n     @Override\n     public BigInteger bigIntegerValue() {\n--- a/src/main/java/com/fasterxml/jackson/databind/node/IntNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/IntNode.java\n     public long longValue() { return (long) _value; }\n \n     @Override\n+    public float floatValue() { return (float) _value; }\n+    \n+    @Override\n     public double doubleValue() { return (double) _value; }\n \n+    \n     @Override\n     public BigDecimal decimalValue() { return BigDecimal.valueOf(_value); }\n ", "timestamp": 1364507773, "metainfo": ""}