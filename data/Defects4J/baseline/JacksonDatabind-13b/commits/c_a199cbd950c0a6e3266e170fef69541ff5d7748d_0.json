{"sha": "a199cbd950c0a6e3266e170fef69541ff5d7748d", "log": "Refactoring to make ObjectWriter more robust", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n      * @since 2.1\n      */\n     protected final JsonSerializer<Object> _rootSerializer;\n-    \n-    /**\n-     * To allow for dynamic enabling/disabling of pretty printing,\n-     * pretty printer can be optionally configured for writer\n-     * as well\n-     */\n-    protected final PrettyPrinter _prettyPrinter;\n-    \n-    /**\n-     * When using data format that uses a schema, schema is passed\n-     * to generator.\n-     */\n-    protected final FormatSchema _schema;\n-    \n-    /**\n-     * Caller may want to specify character escaping details, either as\n-     * defaults, or on call-by-call basis.\n-     * \n-     * @since 2.3\n-     */\n-    protected final CharacterEscapes _characterEscapes;\n+\n+    /**\n+     * Container for settings that need to be passed to {@link JsonGenerator}\n+     * constructed for serializing values.\n+     *\n+     * @since 2.5\n+     */\n+    protected final GeneratorSettings _generatorSettings;\n \n     /*\n     /**********************************************************\n         _serializerProvider = mapper._serializerProvider;\n         _serializerFactory = mapper._serializerFactory;\n         _generatorFactory = mapper._jsonFactory;\n-        _prettyPrinter = pp;\n-        _schema = null;\n-        _characterEscapes = null;\n+        _generatorSettings = (pp == null) ? GeneratorSettings.empty\n+                : new GeneratorSettings(pp, null, null);\n \n         // 29-Apr-2014, tatu: There is no \"untyped serializer\", so:\n         if (rootType == null || rootType.hasRawClass(Object.class)) {\n \n         _rootType = null;\n         _rootSerializer = null;\n-        _prettyPrinter = null;\n-        _schema = null;\n-        _characterEscapes = null;\n+        _generatorSettings = GeneratorSettings.empty;\n     }\n \n     /**\n \n         _rootType = null;\n         _rootSerializer = null;\n-        _prettyPrinter = null;\n-        _schema = s;\n-        _characterEscapes = null;\n+        _generatorSettings = (s == null) ? GeneratorSettings.empty\n+                : new GeneratorSettings(null, s, null);\n     }\n     \n     /**\n      */\n     protected ObjectWriter(ObjectWriter base, SerializationConfig config,\n             JavaType rootType, JsonSerializer<Object> rootSer,\n-            PrettyPrinter pp, FormatSchema s, CharacterEscapes escapes)\n+            GeneratorSettings genSettings)\n     {\n         _config = config;\n \n \n         _rootType = rootType;\n         _rootSerializer = rootSer;\n-        _prettyPrinter = pp;\n-        _schema = s;\n-        _characterEscapes = escapes;\n+        _generatorSettings = genSettings;\n     }\n \n     /**\n         _serializerProvider = base._serializerProvider;\n         _serializerFactory = base._serializerFactory;\n         _generatorFactory = base._generatorFactory;\n-        _schema = base._schema;\n-        _characterEscapes = base._characterEscapes;\n+        _generatorSettings = base._generatorSettings;\n \n         _rootType = base._rootType;\n         _rootSerializer = base._rootSerializer;\n-        _prettyPrinter = base._prettyPrinter;\n     }\n \n     /**\n         _serializerProvider = base._serializerProvider;\n         _serializerFactory = base._serializerFactory;\n         _generatorFactory = base._generatorFactory;\n-        _schema = base._schema;\n-        _characterEscapes = base._characterEscapes;\n+        _generatorSettings = base._generatorSettings;\n \n         _rootType = base._rootType;\n         _rootSerializer = base._rootSerializer;\n-        _prettyPrinter = base._prettyPrinter;\n     }\n \n     /**\n     }\n \n     /**\n-     * Overridable factory method called by various \"withXxx()\" methods\n-     * \n-     * @since 2.5\n-     */\n-    protected ObjectWriter _new(ObjectWriter base, SerializationConfig config,\n-            JavaType rootType, JsonSerializer<Object> rootSer,\n-            PrettyPrinter pp, FormatSchema s, CharacterEscapes escapes) {\n-        return new ObjectWriter(base, config, rootType, rootSer, pp, s, escapes);\n+     * Overridable factory method called by various \"withXxx()\" methods.\n+     * It assumes `this` as base for settings other than those directly\n+     * passed in.\n+     * \n+     * @since 2.5\n+     */\n+    protected ObjectWriter _new(JavaType rootType, JsonSerializer<Object> rootSer,\n+            GeneratorSettings genSettings) {\n+        return new ObjectWriter(this, _config, rootType, rootSer, genSettings);\n     }\n \n     /**\n      * printer (or, if null, will not do any pretty-printing)\n      */\n     public ObjectWriter with(PrettyPrinter pp) {\n-        if (pp == _prettyPrinter) {\n+        GeneratorSettings genSet = _generatorSettings.with(pp);\n+        if (genSet == _generatorSettings) {\n             return this;\n         }\n-        // since null would mean \"don't care\", need to use placeholder to indicate \"disable\"\n-        if (pp == null) {\n-            pp = NULL_PRETTY_PRINTER;\n-        }\n-        return _new(this, _config, _rootType, _rootSerializer,\n-                pp, _schema, _characterEscapes);\n+        return _new(_rootType, _rootSerializer, genSet);\n     }\n \n     /**\n      * rather construct and returns a newly configured instance.\n      */\n     public ObjectWriter with(FormatSchema schema) {\n-        if (_schema == schema) {\n+        GeneratorSettings genSet = _generatorSettings.with(schema);\n+        if (genSet == _generatorSettings) {\n             return this;\n         }\n         _verifySchemaType(schema);\n-        return _new(this, _config, _rootType, _rootSerializer,\n-                _prettyPrinter, schema, _characterEscapes);\n+        return _new(_rootType, _rootSerializer, genSet);\n     }\n \n     /**\n             rootType = rootType.withStaticTyping();\n             rootSer = _prefetchRootSerializer(_config, rootType);\n         }\n-        return _new(this, _config, rootType, rootSer,\n-                _prettyPrinter, _schema, _characterEscapes);\n+        return _new(rootType, rootSer, _generatorSettings);\n     }    \n \n     /**\n      * @since 2.3\n      */\n     public ObjectWriter with(CharacterEscapes escapes) {\n-        if (_characterEscapes == escapes) {\n+        GeneratorSettings genSet = _generatorSettings.with(escapes);\n+        if (genSet == _generatorSettings) {\n             return this;\n         }\n-        return _new(this, _config, _rootType, _rootSerializer,\n-                _prettyPrinter, _schema, escapes);\n+        return _new(_rootType, _rootSerializer, genSet);\n     }\n \n     /**\n     public boolean canSerialize(Class<?> type, AtomicReference<Throwable> cause) {\n         return _serializerProvider(_config).hasSerializerFor(type, cause);\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Overridable helper methods\n     /**********************************************************\n      */\n-    \n+\n     /**\n      * Overridable helper method used for constructing\n      * {@link SerializerProvider} to use for serialization.\n     protected DefaultSerializerProvider _serializerProvider(SerializationConfig config) {\n         return _serializerProvider.createInstance(config, _serializerFactory);\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Internal methods\n      */\n     protected JsonGenerator _configureGenerator(JsonGenerator gen)\n     {\n-        if (_prettyPrinter != null) {\n-            PrettyPrinter pp = _prettyPrinter;\n+        GeneratorSettings genSet = _generatorSettings;\n+        PrettyPrinter pp = genSet.prettyPrinter;\n+        if (pp != null) {\n             if (pp == NULL_PRETTY_PRINTER) {\n                 gen.setPrettyPrinter(null);\n             } else {\n         } else if (_config.isEnabled(SerializationFeature.INDENT_OUTPUT)) {\n             gen.useDefaultPrettyPrinter();\n         }\n-        if (_characterEscapes != null) {\n-            gen.setCharacterEscapes(_characterEscapes);\n+        CharacterEscapes esc = genSet.characterEscapes;\n+        if (esc != null) {\n+            gen.setCharacterEscapes(esc);\n         }\n         // [JACKSON-520]: add support for pass-through schema:\n-        if (_schema != null) {\n-            gen.setSchema(_schema);\n+        FormatSchema sch = genSet.schema;\n+        if (sch != null) {\n+            gen.setSchema(sch);\n         }\n         _config.initialize(gen); // since 2.5\n         return gen;\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Helper classes for configuration\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Helper class used for containing settings specifically related\n+     * to (re)configuring {@link JsonGenerator} constructed for\n+     * writing output.\n+     * \n+     * @since 2.5\n+     */\n+    public final static class GeneratorSettings\n+        implements java.io.Serializable\n+    {\n+        private static final long serialVersionUID = 1L;\n+\n+        public final static GeneratorSettings empty = new GeneratorSettings(null, null, null);\n+        \n+        /**\n+         * To allow for dynamic enabling/disabling of pretty printing,\n+         * pretty printer can be optionally configured for writer\n+         * as well\n+         */\n+        public final PrettyPrinter prettyPrinter;\n+    \n+        /**\n+         * When using data format that uses a schema, schema is passed\n+         * to generator.\n+         */\n+        public final FormatSchema schema;\n+    \n+        /**\n+         * Caller may want to specify character escaping details, either as\n+         * defaults, or on call-by-call basis.\n+         */\n+        public final CharacterEscapes characterEscapes;\n+\n+        public GeneratorSettings(PrettyPrinter pp, FormatSchema sch, CharacterEscapes esc) {\n+            prettyPrinter = pp;\n+            schema = sch;\n+            characterEscapes = esc;\n+        }\n+\n+        public GeneratorSettings with(PrettyPrinter pp) {\n+            // since null would mean \"don't care\", need to use placeholder to indicate \"disable\"\n+            if (pp == null) {\n+                pp = NULL_PRETTY_PRINTER;\n+            }\n+            return (pp == prettyPrinter) ? this\n+                    : new GeneratorSettings(pp, schema, characterEscapes);\n+        }\n+\n+        public GeneratorSettings with(FormatSchema sch) {\n+            return (schema == sch) ? this\n+                    : new GeneratorSettings(prettyPrinter, sch, characterEscapes);\n+        }\n+\n+        public GeneratorSettings with(CharacterEscapes esc) {\n+            return (characterEscapes == esc) ? this\n+                    : new GeneratorSettings(prettyPrinter, schema, esc);\n+        }\n+    }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/seq/SequenceWriterTest.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/seq/SequenceWriterTest.java\n         assertEquals(aposToQuotes(\"[{'type':'A','value':-1},{'type':'A','value':6}]\"),\n                 strw.toString());\n     }\n+\n+    @SuppressWarnings(\"resource\")\n+    public void testPolymorphicArrayWithType() throws Exception\n+    {\n+        StringWriter strw = new StringWriter();\n+        SequenceWriter w = WRITER\n+                .forType(PolyBase.class)\n+                .writeValuesAsArray(strw);\n+        w.write(new ImplA(-1))\n+            .write(new ImplA(6))\n+            .close();\n+        assertEquals(aposToQuotes(\"[{'type':'A','value':-1},{'type':'A','value':6}]\"),\n+                strw.toString());\n+    }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestObjectWriter.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestObjectWriter.java\n package com.fasterxml.jackson.databind.ser;\n \n import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.fasterxml.jackson.annotation.JsonTypeName;\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n {\n     final ObjectMapper MAPPER = new ObjectMapper();\n \n+    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = \"type\")\n+    static class PolyBase {\n+    }\n+\n+    @JsonTypeName(\"A\")\n+    static class ImplA extends PolyBase {\n+        public int value;\n+        \n+        public ImplA(int v) { value = v; }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+    \n     public void testPrettyPrinter() throws Exception\n     {\n         ObjectWriter writer = MAPPER.writer();\n         String json = writer.writeValueAsString(stuff);\n         assertEquals(\"{\\\"a\\\":5}\", json);\n     }\n+\n+    public void testPolymorpicWithTyping() throws Exception\n+    {\n+        ObjectWriter writer = MAPPER.writerFor(PolyBase.class);\n+        String json = writer.writeValueAsString(new ImplA(3));\n+        assertEquals(aposToQuotes(\"{'type':'A':'value':3}\"), json);\n+    }\n }", "timestamp": 1418787693, "metainfo": ""}