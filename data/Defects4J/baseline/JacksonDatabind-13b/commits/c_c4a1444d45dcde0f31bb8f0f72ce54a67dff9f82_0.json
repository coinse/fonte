{"sha": "c4a1444d45dcde0f31bb8f0f72ce54a67dff9f82", "log": "Merge pull request #423 from sergeymetallic/patch-1  Update CalendarSerializer.java", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/CalendarSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/CalendarSerializer.java\n         } else if (_customFormat != null) {\n             // 21-Feb-2011, tatu: not optimal, but better than alternatives:\n             synchronized (_customFormat) {\n-                jgen.writeString(_customFormat.format(value));\n+                // _customformat cannot parse Calendar, so Date should be passed\n+                jgen.writeString(_customFormat.format(value.getTime()));\n             }\n         } else {\n             provider.defaultSerializeDateValue(value.getTime(), jgen);\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n             TimeZone.getTimeZone(\"GMT\"),\n             Base64Variants.getDefaultVariant() // 2.1\n     );\n-    \n+\n     /*\n     /**********************************************************\n     /* Configuration settings, shared\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java\n         if (cls == String.class) {\n             return DEFAULT_STRING_SERIALIZER;\n         }\n-        if (cls == Object.class) {\n+        if (cls == Object.class || cls.isPrimitive() || Number.class.isAssignableFrom(cls)) {\n             return DEFAULT_KEY_SERIALIZER;\n         }\n-        // [JACKSON-606] special handling for dates...\n         if (Date.class.isAssignableFrom(cls)) {\n             return (JsonSerializer<Object>) DateKeySerializer.instance;\n         }\n         if (Calendar.class.isAssignableFrom(cls)) {\n             return (JsonSerializer<Object>) CalendarKeySerializer.instance;\n         }\n+        /* 14-Mar-2014, tatu: Should support @JsonValue, as per #47; but that\n+         *   requires extensive introspection, and passing in more information\n+         *   to this method.\n+         */\n         // If no match, just use default one:\n         return DEFAULT_KEY_SERIALIZER;\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestJsonPointer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestJsonPointer.java\n         assertTrue(SAMPLE_ROOT.at(\"/Image/Depth\").isMissingNode());\n         assertTrue(SAMPLE_ROOT.at(\"/Image/1\").isMissingNode());\n     }\n+\n+    // To help verify [Core#133]; should be fine with \"big numbers\" as property keys\n+    public void testLongNumbers() throws Exception\n+    {\n+        \n+        // First, with small int key\n+        JsonNode root = objectMapper().readTree(\"{\\\"123\\\" : 456}\");\n+        JsonNode jn2 = root.at(\"/123\"); \n+        assertEquals(456, jn2.asInt());\n+\n+        // and then with above int-32:\n+        root = objectMapper().readTree(\"{\\\"35361706045\\\" : 1234}\");\n+        jn2 = root.at(\"/35361706045\"); \n+        assertEquals(1234, jn2.asInt());\n+    }\n }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestTreeWithType.java\n+package com.fasterxml.jackson.databind.node;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+public class TestTreeWithType extends BaseMapTest\n+{\n+    public static class Foo {\n+        public String bar;\n+\n+        public Foo() { }\n+\n+        public Foo(String bar) {\n+            this.bar = bar;\n+        }\n+    }\n+\n+    // [Issue#353]\n+    public class SavedCookie {\n+        public String name, value;\n+\n+        public SavedCookie() { }\n+        public SavedCookie(String n, String v) {\n+            name = n;\n+            value = v;\n+        }\n+    }\n+\n+    public class SavedCookieDeserializer extends JsonDeserializer<SavedCookie> {\n+        @Override\n+        public SavedCookie deserialize(JsonParser jsonParser, DeserializationContext ctxt)\n+                throws IOException {\n+           ObjectCodec oc = jsonParser.getCodec();\n+           JsonNode node = oc.readTree(jsonParser);\n+           return new SavedCookie(node.path(\"name\").textValue(),\n+                   node.path(\"value\").textValue());\n+        }\n+\n+        @Override\n+        public SavedCookie deserializeWithType(JsonParser jp, DeserializationContext ctxt,\n+                TypeDeserializer typeDeserializer)\n+            throws IOException, JsonProcessingException\n+        {\n+            return (SavedCookie) typeDeserializer.deserializeTypedFromObject(jp, ctxt);\n+        }\n+    }    \n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    private final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    public void testValueAsStringWithoutDefaultTyping() throws Exception {\n+\n+        Foo foo = new Foo(\"baz\");\n+        String json = MAPPER.writeValueAsString(foo);\n+\n+        JsonNode jsonNode = MAPPER.readTree(json);\n+        assertEquals(jsonNode.get(\"bar\").textValue(), foo.bar);\n+    }\n+\n+    public void testValueAsStringWithDefaultTyping() throws Exception {\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);\n+\n+        Foo foo = new Foo(\"baz\");\n+        String json = mapper.writeValueAsString(foo);\n+\n+        JsonNode jsonNode = mapper.readTree(json);\n+        assertEquals(jsonNode.get(\"bar\").textValue(), foo.bar);\n+    }\n+\n+    public void testReadTreeWithDefaultTyping() throws Exception\n+    {\n+        final String CLASS = Foo.class.getName();\n+\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL,\n+                JsonTypeInfo.As.PROPERTY);\n+        String json = \"{\\\"@class\\\":\\\"\"+CLASS+\"\\\",\\\"bar\\\":\\\"baz\\\"}\";\n+        JsonNode jsonNode = mapper.readTree(json);\n+        assertEquals(jsonNode.get(\"bar\").textValue(), \"baz\");\n+    }\n+\n+    public void testValueToTreeWithoutDefaultTyping() throws Exception {\n+\n+        Foo foo = new Foo(\"baz\");\n+        JsonNode jsonNode = MAPPER.valueToTree(foo);\n+        assertEquals(jsonNode.get(\"bar\").textValue(), foo.bar);\n+    }\n+\n+    public void testValueToTreeWithDefaultTyping() throws Exception {\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);\n+\n+        Foo foo = new Foo(\"baz\");\n+        JsonNode jsonNode = mapper.valueToTree(foo);\n+        assertEquals(jsonNode.get(\"bar\").textValue(), foo.bar);\n+    }\n+\n+    public void testIssue353() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        mapper.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.NON_FINAL, \"@class\");\n+\n+         SimpleModule testModule = new SimpleModule(\"MyModule\", new Version(1, 0, 0, null, \"TEST\", \"TEST\"));\n+         testModule.addDeserializer(SavedCookie.class, new SavedCookieDeserializer());\n+         mapper.registerModule(testModule);\n+\n+         SavedCookie savedCookie = new SavedCookie(\"key\", \"v\");\n+         String json = mapper.writeValueAsString(savedCookie);\n+         SavedCookie out = mapper.reader(SavedCookie.class).readValue(json);\n+\n+         assertEquals(\"key\", out.name);\n+         assertEquals(\"v\", out.value);\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/failing/TestMapJsonValueKey.java\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestMapJsonValueKey.java\n \n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonValue;\n-import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.BaseMapTest;\n import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.test.BaseTest;\n \n-public class TestMapJsonValueKey extends BaseTest\n+// [Issue#47]\n+public class TestMapJsonValueKey extends BaseMapTest\n {\n     public static class Wat\n     {\n         private final String wat;\n \n         @JsonCreator\n-        Wat(String wat)\n-        {\n+        Wat(String wat) {\n             this.wat = wat;\n         }\n \n         @JsonValue\n-        public String getWat()\n-        {\n+        public String getWat() {\n             return wat;\n         }\n \n         @Override\n-        public String toString()\n-        {\n-            return \"[Wat: \" + wat + \"]\";\n+        public String toString() {\n+            return \"(String)[Wat: \" + wat + \"]\";\n         }\n     }\n \n     public void testMapJsonValueKey()\n     throws Exception\n     {\n-        Map<Wat, Boolean> map = new HashMap<Wat, Boolean>();\n-        map.put(new Wat(\"3\"), true);\n-        map.put(new Wat(\"x\"), false);\n-\n-        TypeReference<Map<Wat, Boolean>> type = new TypeReference<Map<Wat, Boolean>>(){};\n+        Map<Wat, Boolean> input = new HashMap<Wat, Boolean>();\n+        input.put(new Wat(\"3\"), true);\n \n         ObjectMapper mapper = new ObjectMapper();\n-        assertEquals(map, mapper.readValue(mapper.writeValueAsBytes(map), type));\n+        String json = mapper.writeValueAsString(input);\n+        assertEquals(aposToQuotes(\"{'3':'true'}\"), json);\n     }\n }", "timestamp": 1394830355, "metainfo": ""}