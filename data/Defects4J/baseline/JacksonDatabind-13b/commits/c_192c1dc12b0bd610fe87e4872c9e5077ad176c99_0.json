{"sha": "192c1dc12b0bd610fe87e4872c9e5077ad176c99", "log": "Implemented #148", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java\n     FAIL_ON_NUMBERS_FOR_ENUMS(false),\n \n     /**\n+     * Feature that determines what happens when type of a polymorphic\n+     * value (indicated for example by {@link com.fasterxml.jackson.annotation.JsonTypeInfo})\n+     * can not be found (missing) or resolved (invalid class name, unmappable id);\n+     * if enabled, an exception ir thrown; if false, null value is used instead.\n+     *<p>\n+     * Feature is enabled by default so that exception is thrown for missing or invalid\n+     * type information.\n+     * \n+     * @since 2.2\n+     */\n+    FAIL_ON_INVALID_SUBTYPE(true),\n+    \n+    /**\n      * Feature that determines whether Jackson code should catch\n      * and wrap {@link Exception}s (but never {@link Error}s!)\n      * to add additional information about\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n import com.fasterxml.jackson.databind.deser.*;\n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n-import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n import com.fasterxml.jackson.databind.jsontype.*;\n import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;\n import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;\n      * @return Constructed JSON schema.\n      */\n     @SuppressWarnings(\"deprecation\")\n-    public JsonSchema generateJsonSchema(Class<?> t) throws JsonMappingException {\n+    public com.fasterxml.jackson.databind.jsonschema.JsonSchema generateJsonSchema(Class<?> t)\n+            throws JsonMappingException {\n         return _serializerProvider(getSerializationConfig()).generateJsonSchema(t);\n     }\n \n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/NullifyingDeserializer.java\n+package com.fasterxml.jackson.databind.deser.std;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n+\n+/**\n+ * Bogus deserializer that will simply skip all content there is to map\n+ * and returns Java null reference.\n+ * \n+ * @since 2.2\n+ */\n+public class NullifyingDeserializer\n+    extends StdDeserializer<Object>\n+{\n+    private static final long serialVersionUID = 1L;\n+\n+    public final static NullifyingDeserializer instance = new NullifyingDeserializer();\n+    \n+    public NullifyingDeserializer() { super(Object.class); }\n+\n+    /*\n+    /**********************************************************\n+    /* Deserializer API\n+    /**********************************************************\n+     */\n+    \n+    @Override\n+    public Object deserialize(JsonParser jp, DeserializationContext ctxt)\n+        throws IOException, JsonProcessingException\n+    {\n+        jp.skipChildren();\n+        return null;\n+    }\n+\n+    @Override\n+    public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,\n+            TypeDeserializer typeDeserializer)\n+        throws IOException, JsonProcessingException\n+    {\n+        // Not sure if we need to bother but:\n+\n+        JsonToken t = jp.getCurrentToken();\n+        switch (t) {\n+        case START_ARRAY:\n+        case START_OBJECT:\n+        case FIELD_NAME:\n+            return typeDeserializer.deserializeTypedFromAny(jp, ctxt);\n+        default:\n+            return null;\n+        }\n+    }\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java\n         throws IOException, JsonProcessingException\n     {\n         // As per [JACKSON-614], may have default implementation to use\n-        if (_defaultImpl != null) { \n-            JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);\n+        JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);\n+        if (deser != null) {\n             if (tb != null) {\n                 tb.writeEndObject();\n                 jp = tb.asParser(jp);\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java\n \n import com.fasterxml.jackson.databind.BeanProperty;\n import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.annotation.NoClass;\n+import com.fasterxml.jackson.databind.deser.std.NullifyingDeserializer;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n \n     implements java.io.Serializable\n {\n     private static final long serialVersionUID = 278445030337366675L;\n-\n+    \n     protected final TypeIdResolver _idResolver;\n     \n     protected final JavaType _baseType;\n     protected final JsonDeserializer<Object> _findDefaultImplDeserializer(DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n     {\n+        /* 06-Feb-2013, tatu: As per [Issue#148], consider default implementation value of\n+         *   {@link NoClass} to mean \"serialize as null\"; as well as DeserializationFeature\n+         *   to do swift mapping to null\n+         */\n         if (_defaultImpl == null) {\n+            if (!ctxt.isEnabled(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE)) {\n+                return NullifyingDeserializer.instance;\n+            }\n             return null;\n         }\n+        if (_defaultImpl.getRawClass() == NoClass.class) {\n+            return NullifyingDeserializer.instance;\n+        }\n+        \n         synchronized (_defaultImpl) {\n             if (_defaultImplDeserializer == null) {\n                 _defaultImplDeserializer = ctxt.findContextualValueDeserializer(\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedDeserializationWithDefault.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedDeserializationWithDefault.java\n \n import com.fasterxml.jackson.annotation.*;\n import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.annotation.NoClass;\n \n /**\n  * Unit tests related to [JACKSON-712]; specialized handling of\n         }\n     }\n \n+    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\",\n+            defaultImpl = NoClass.class)\n+    public static class DefaultWithNoClass { }\n+\n+    // and then one with no defaultImpl nor listed subtypes\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\")\n+    abstract static class MysteryPolymorphic { }\n+    \n     /*\n     /**********************************************************\n     /* Unit tests, deserialization\n     /**********************************************************\n      */\n-\n+    \n     public void testDeserializationWithObject() throws Exception\n     {\n         Inter inter = objectReader(Inter.class).readValue(\"{\\\"type\\\": \\\"mine\\\", \\\"blah\\\": [\\\"a\\\", \\\"b\\\", \\\"c\\\"]}\");\n         assertTrue(inter instanceof LegacyInter);\n         assertEquals(Arrays.asList(\"a\", \"b\"), ((MyInter) inter).blah);\n     }\n+\n+    // [Issue#148]\n+    public void testDefaultAsNoClass() throws Exception\n+    {\n+        Object ob = objectReader(DefaultWithNoClass.class).readValue(\"{ }\");\n+        assertNull(ob);\n+        ob = objectReader(DefaultWithNoClass.class).readValue(\"{ \\\"bogus\\\":3 }\");\n+        assertNull(ob);\n+    }\n+\n+    // [Issue#148]\n+    public void testBadTypeAsNull() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE);\n+        Object ob = mapper.readValue(\"{}\", MysteryPolymorphic.class);\n+        assertNull(ob);\n+        ob = mapper.readValue(\"{ \\\"whatever\\\":13}\", MysteryPolymorphic.class);\n+        assertNull(ob);\n+    }\n }", "timestamp": 1360218538, "metainfo": ""}