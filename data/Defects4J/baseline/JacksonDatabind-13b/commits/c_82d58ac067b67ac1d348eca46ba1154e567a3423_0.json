{"sha": "82d58ac067b67ac1d348eca46ba1154e567a3423", "log": "enums for #120", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n             JavaType type, BeanDescription beanDesc)\n         throws JsonMappingException\n     {\n-        Class<?> enumClass = type.getRawClass();\n+        final DeserializationConfig config = ctxt.getConfig();\n+        final Class<?> enumClass = type.getRawClass();\n         // 23-Nov-2010, tatu: Custom deserializer?\n-        JsonDeserializer<?> custom = _findCustomEnumDeserializer(enumClass,\n-                ctxt.getConfig(), beanDesc);\n-        if (custom != null) {\n-            return custom;\n-        }\n-\n-        // [JACKSON-193] May have @JsonCreator for static factory method:\n-        for (AnnotatedMethod factory : beanDesc.getFactoryMethods()) {\n-            if (ctxt.getAnnotationIntrospector().hasCreatorAnnotation(factory)) {\n-                int argCount = factory.getParameterCount();\n-                if (argCount == 1) {\n-                    Class<?> returnType = factory.getRawReturnType();\n-                    // usually should be class, but may be just plain Enum<?> (for Enum.valueOf()?)\n-                    if (returnType.isAssignableFrom(enumClass)) {\n-                        return EnumDeserializer.deserializerForCreator(ctxt.getConfig(), enumClass, factory);\n+        JsonDeserializer<?> deser = _findCustomEnumDeserializer(enumClass, config, beanDesc);\n+        if (deser == null) {\n+            // [JACKSON-193] May have @JsonCreator for static factory method:\n+            for (AnnotatedMethod factory : beanDesc.getFactoryMethods()) {\n+                if (ctxt.getAnnotationIntrospector().hasCreatorAnnotation(factory)) {\n+                    int argCount = factory.getParameterCount();\n+                    if (argCount == 1) {\n+                        Class<?> returnType = factory.getRawReturnType();\n+                        // usually should be class, but may be just plain Enum<?> (for Enum.valueOf()?)\n+                        if (returnType.isAssignableFrom(enumClass)) {\n+                            deser = EnumDeserializer.deserializerForCreator(config, enumClass, factory);\n+                            break;\n+                        }\n                     }\n-                }\n-                throw new IllegalArgumentException(\"Unsuitable method (\"+factory+\") decorated with @JsonCreator (for Enum type \"\n-                        +enumClass.getName()+\")\");\n-            }\n-        }\n-        // [JACKSON-749] Also, need to consider @JsonValue, if one found\n-        return new EnumDeserializer(constructEnumResolver(enumClass, ctxt.getConfig(), beanDesc.findJsonValueMethod()));\n+                    throw new IllegalArgumentException(\"Unsuitable method (\"+factory+\") decorated with @JsonCreator (for Enum type \"\n+                            +enumClass.getName()+\")\");\n+                }\n+            }\n+            // [JACKSON-749] Also, need to consider @JsonValue, if one found\n+            if (deser == null) {\n+                deser = new EnumDeserializer(constructEnumResolver(enumClass, config, beanDesc.findJsonValueMethod()));\n+            }\n+        }\n+\n+        // and then new with 2.2: ability to post-process it too (Issue#120)\n+        if (_factoryConfig.hasDeserializerModifiers()) {\n+            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n+                deser = mod.modifyEnumDeserializer(config, type, beanDesc, deser);\n+            }\n+        }\n+        return deser;\n     }\n \n     protected JsonDeserializer<?> _findCustomEnumDeserializer(Class<?> type,\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerModifier.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerModifier.java\n             MapLikeType type, BeanDescription beanDesc, JsonDeserializer<?> deserializer) {\n         return deserializer;\n     }\n+\n+    /**\n+     * @since 2.2\n+     */\n+    public JsonDeserializer<?> modifyEnumDeserializer(DeserializationConfig config,\n+            JavaType type, BeanDescription beanDesc, JsonDeserializer<?> deserializer) {\n+        return deserializer;\n+    }\n     \n-    /*\n-    \n-    public abstract JsonDeserializer<?> createEnumDeserializer(DeserializationContext ctxt,\n-            JavaType type, BeanDescription beanDesc)\n-        throws JsonMappingException;\n-\n-    public abstract KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,\n-            JavaType type)\n-        throws JsonMappingException;\n+    /**\n+     * @since 2.2\n      */\n+    public KeyDeserializer createKeyDeserializer(DeserializationConfig config,\n+            JavaType type, KeyDeserializer deserializer) {\n+        return deserializer;\n+    }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n     \n     // [Issue#121], arrays, collections, maps\n \n+    enum EnumABC { A, B, C; }\n+    \n     static class ArrayDeserializerModifier extends BeanDeserializerModifier {\n         public JsonDeserializer<?> modifyArrayDeserializer(DeserializationConfig config, ArrayType valueType,\n                 BeanDescription beanDesc, JsonDeserializer<?> deserializer) {\n             };\n         }\n     }\n+\n+    static class EnumDeserializerModifier extends BeanDeserializerModifier {\n+        public JsonDeserializer<?> modifyEnumDeserializer(DeserializationConfig config, JavaType valueType,\n+                BeanDescription beanDesc, JsonDeserializer<?> deserializer) {\n+            return (JsonDeserializer<?>) new StdDeserializer<Object>(Object.class) {\n+                @Override public Object deserialize(JsonParser jp,\n+                        DeserializationContext ctxt) {\n+                    return \"foo\";\n+                }\n+            };\n+        }\n+    }\n     \n     /*\n     /********************************************************\n         assertEquals(1, result.size());\n         assertEquals(\"foo\", result.get(\"a\"));\n     }\n+\n+    public void testModifyEnumDeserializer() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(new SimpleModule(\"test\")\n+            .setDeserializerModifier(new EnumDeserializerModifier())\n+        );\n+        Object result = mapper.readValue(quote(\"B\"), EnumABC.class);\n+        assertEquals(\"foo\", result);\n+    }\n }", "timestamp": 1354325112, "metainfo": ""}