{"sha": "6290eefe92259a85e46a5e082f6327296c8a09f0", "log": "Fixed #691", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n                     continue;\n                 }\n                 valueSer = provider.getDefaultNullValueSerializer();\n-                keySerializer.serialize(keyElem, gen, provider);\n-                provider.defaultSerializeNull(gen);\n             } else {\n                 valueSer = _valueSerializer;\n                 Class<?> cc = valueElem.getClass();\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NullSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NullSerializer.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n /**\n  * This is a simple dummy serializer that will just output literal\n     private NullSerializer() { super(Object.class); }\n     \n     @Override\n-    public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n-        jgen.writeNull();\n+    public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+        gen.writeNull();\n+    }\n+\n+    /**\n+     * Although this method should rarely get called, for convenience we should override\n+     * it, and handle it same way as \"natural\" types: by serializing exactly as is,\n+     * without type decorations. The most common possible use case is that of delegation\n+     * by JSON filter; caller can not know what kind of serializer it gets handed.\n+     */\n+    @Override\n+    public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider serializers,\n+            TypeSerializer typeSer)\n+        throws IOException\n+    {\n+        gen.writeNull();\n     }\n     \n     @Override\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization.java\n     @JsonTypeName(\"mymap\")\n     static class MapWithTypedValues extends LinkedHashMap<String,String> { }\n \n+    @JsonTypeInfo(use = Id.CLASS)\n+    public static class Mixin691 { }\n+\n     /*\n     /**********************************************************\n     /* Test methods\n         assertEquals(aposToQuotes(\"{'@type':'mymap','id':'Test','NULL':null}\"),\n                 json);\n     }    \n+\n+    // [databind#691]\n+    public void testNullJsonInTypedMap691() throws Exception {\n+        Map<String, String> map = new HashMap<String, String>();\n+        map.put(\"NULL\", null);\n+    \n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.addMixIn(Object.class, Mixin691.class);\n+        String json = mapper.writeValueAsString(map);\n+        assertEquals(\"{\\\"@class\\\":\\\"java.util.HashMap\\\",\\\"NULL\\\":null}\", json);\n+    }\n }\n+", "timestamp": 1423342356, "metainfo": ""}