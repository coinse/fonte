{"sha": "75eabfa2949a9cb78b94316cc90a20046d3fc2f6", "log": "Adding concept of 'delegating [de]serializer', to help with multi-level delegation", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java\n     public JsonDeserializer<T> unwrappingDeserializer(NameTransformer unwrapper) {\n         return this;\n     }\n+\n+    /**\n+     * Method that can be called to try to replace deserializer this deserializer\n+     * delegates calls to. If not supported (either this deserializer does not\n+     * delegate anything; or it does not want any changes), should either\n+     * throw {@link UnsupportedOperationException} (if operation does not\n+     * make sense or is not allowed); or return this deserializer as is.\n+     * \n+     * @since 2.1\n+     */\n+    public JsonDeserializer<T> replaceDelegatee(JsonDeserializer<?> delegatee) {\n+        throw new UnsupportedOperationException();\n+    }\n     \n     /*\n     /**********************************************************\n      * @since 2.0\n      */\n     public ObjectIdReader getObjectIdReader() { return null; }\n+\n+    /**\n+     * Accessor that can be used to determine if this deserializer uses\n+     * another deserializer for actual deserialization, by delegating\n+     * calls. If so, will return immediate delegate (which itself may\n+     * delegate to further deserializers); otherwise will return null.\n+     * \n+     * @return Deserializer this deserializer delegates calls to, if null;\n+     *   null otherwise.\n+     * \n+     * @since 2.1\n+     */\n+    public JsonDeserializer<?> getDelegatee() {\n+        return null;\n+    }\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java\n     }\n \n     /**\n-     * Accessor for checking whether this serializer is an\n-     * \"unwrapping\" serializer; this is necessary to know since\n-     * it may also require caller to suppress writing of the\n-     * leading property name.\n-     */\n-    public boolean isUnwrappingSerializer() {\n-        return false;\n+     * Method that can be called to try to replace serializer this serializer\n+     * delegates calls to. If not supported (either this serializer does not\n+     * delegate anything; or it does not want any changes), should either\n+     * throw {@link UnsupportedOperationException} (if operation does not\n+     * make sense or is not allowed); or return this serializer as is.\n+     * \n+     * @since 2.1\n+     */\n+    public JsonSerializer<T> replaceDelegatee(JsonSerializer<?> delegatee) {\n+        throw new UnsupportedOperationException();\n     }\n     \n     /*\n     \n     /*\n     /**********************************************************\n-    /* Introspection methods needed for type handling \n+    /* Other accessors\n     /**********************************************************\n      */\n     \n     public boolean usesObjectId() {\n         return false;\n     }\n+\n+    /**\n+     * Accessor for checking whether this serializer is an\n+     * \"unwrapping\" serializer; this is necessary to know since\n+     * it may also require caller to suppress writing of the\n+     * leading property name.\n+     */\n+    public boolean isUnwrappingSerializer() {\n+        return false;\n+    }\n+    \n+    /**\n+     * Accessor that can be used to determine if this serializer uses\n+     * another serializer for actual serialization, by delegating\n+     * calls. If so, will return immediate delegate (which itself may\n+     * delegate to further serializers); otherwise will return null.\n+     * \n+     * @return Serializer this serializer delegates calls to, if null;\n+     *   null otherwise.\n+     * \n+     * @since 2.1\n+     */\n+    public JsonSerializer<?> getDelegatee() {\n+        return null;\n+    }\n     \n     /*\n     /**********************************************************", "timestamp": 1346731169, "metainfo": ""}