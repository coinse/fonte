{"sha": "34accc0d765a56602794c996e424fe1820273d8f", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n      *   due to naming or visibility definitions (that is, implicit)\n      */\n     public abstract boolean isExplicitlyIncluded();\n+\n+    /**\n+     * Accessor that can be called to check whether property name was\n+     * due to an explicit marker (usually annotation), or just by naming\n+     * convention or use of \"use-default-name\" marker (annotation).\n+     *<p>\n+     * Note that entries that return true from this method will always\n+     * return true for {@link #isExplicitlyIncluded()}, but not necessarily\n+     * vice versa.\n+     *\n+     * @since 2.4\n+     */\n+    public boolean isExplicitlyNamed() {\n+        return isExplicitlyIncluded();\n+    }\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/util/SimpleBeanPropertyDefinition.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/SimpleBeanPropertyDefinition.java\n     }\n     \n     // hmmh. what should we claim here?\n-    @Override\n-    public boolean isExplicitlyIncluded() { return false; }\n+\n+    @Override public boolean isExplicitlyIncluded() { return false; }\n+    @Override public boolean isExplicitlyNamed() { return false; }\n \n     /**\n      * We will indicate that property is optional, since there is nothing", "timestamp": 1396046620, "metainfo": ""}