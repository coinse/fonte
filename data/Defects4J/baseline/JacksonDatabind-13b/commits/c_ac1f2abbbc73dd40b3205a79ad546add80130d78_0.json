{"sha": "ac1f2abbbc73dd40b3205a79ad546add80130d78", "log": "Implement [JACKSON-758]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonMappingException.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonMappingException.java\n package com.fasterxml.jackson.databind;\n \n+import java.io.IOException;\n import java.io.Serializable;\n import java.util.*;\n \n     }\n \n     /**\n+     * Factory method used when \"upgrading\" an {@link IOException} into\n+     * {@link JsonMappingException}: usually only needed to comply with\n+     * a signature.\n+     * \n+     * @since 2.1\n+     */\n+    public static JsonMappingException fromUnexpectedIOE(IOException src)\n+    {\n+        return new JsonMappingException(\"Unexpected IOException (of type \"\n+                +src.getClass().getName()+\"): \"+src.getMessage(), (JsonLocation)null, src);\n+    }\n+    \n+    /**\n      * Method that can be called to either create a new JsonMappingException\n      * (if underlying exception is not a JsonMappingException), or augment\n      * given exception with given path/reference information.\n         jme.prependPath(ref);\n         return jme;\n     }\n-\n+    \n     /*\n     /**********************************************************\n     /* Accessors/mutators\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n      * a String. Functionally equivalent to calling\n      * {@link #writeValue(Writer,Object)} with {@link java.io.StringWriter}\n      * and constructing String, but more efficient.\n+     *<p>\n+     * Note: prior to version 2.1, throws clause included {@link IOException}; 2.1 removed it.\n      */\n     public String writeValueAsString(Object value)\n-        throws IOException, JsonGenerationException, JsonMappingException\n+        throws JsonProcessingException\n     {        \n         // alas, we have to pull the recycler directly here...\n         SegmentedStringWriter sw = new SegmentedStringWriter(_jsonFactory._getBufferRecycler());\n-        _configAndWriteValue(_jsonFactory.createJsonGenerator(sw), value);\n+        try {\n+            _configAndWriteValue(_jsonFactory.createJsonGenerator(sw), value);\n+        } catch (JsonProcessingException e) { // to support [JACKSON-758]\n+            throw e;\n+        } catch (IOException e) { // shouldn't really happen, but is declared as possibility so:\n+            throw JsonMappingException.fromUnexpectedIOE(e);\n+        }\n         return sw.getAndClear();\n     }\n     \n      * {@link #writeValue(Writer,Object)} with {@link java.io.ByteArrayOutputStream}\n      * and getting bytes, but more efficient.\n      * Encoding used will be UTF-8.\n+     *<p>\n+     * Note: prior to version 2.1, throws clause included {@link IOException}; 2.1 removed it.\n      */\n     public byte[] writeValueAsBytes(Object value)\n-        throws IOException, JsonGenerationException, JsonMappingException\n-    {        \n+        throws JsonProcessingException\n+    {\n         ByteArrayBuilder bb = new ByteArrayBuilder(_jsonFactory._getBufferRecycler());\n-        _configAndWriteValue(_jsonFactory.createJsonGenerator(bb, JsonEncoding.UTF8), value);\n+        try {\n+            _configAndWriteValue(_jsonFactory.createJsonGenerator(bb, JsonEncoding.UTF8), value);\n+        } catch (JsonProcessingException e) { // to support [JACKSON-758]\n+            throw e;\n+        } catch (IOException e) { // shouldn't really happen, but is declared as possibility so:\n+            throw JsonMappingException.fromUnexpectedIOE(e);\n+        }\n         byte[] result = bb.toByteArray();\n         bb.release();\n         return result;\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n      * a String. Functionally equivalent to calling\n      * {@link #writeValue(Writer,Object)} with {@link java.io.StringWriter}\n      * and constructing String, but more efficient.\n+     *<p>\n+     * Note: prior to version 2.1, throws clause included {@link IOException}; 2.1 removed it.\n      */\n     public String writeValueAsString(Object value)\n-        throws IOException, JsonGenerationException, JsonMappingException\n+        throws JsonProcessingException\n     {        \n         // alas, we have to pull the recycler directly here...\n         SegmentedStringWriter sw = new SegmentedStringWriter(_jsonFactory._getBufferRecycler());\n-        _configAndWriteValue(_jsonFactory.createJsonGenerator(sw), value);\n+        try {\n+            _configAndWriteValue(_jsonFactory.createJsonGenerator(sw), value);\n+        } catch (JsonProcessingException e) { // to support [JACKSON-758]\n+            throw e;\n+        } catch (IOException e) { // shouldn't really happen, but is declared as possibility so:\n+            throw JsonMappingException.fromUnexpectedIOE(e);\n+        }\n         return sw.getAndClear();\n     }\n     \n      * {@link #writeValue(Writer,Object)} with {@link java.io.ByteArrayOutputStream}\n      * and getting bytes, but more efficient.\n      * Encoding used will be UTF-8.\n+     *<p>\n+     * Note: prior to version 2.1, throws clause included {@link IOException}; 2.1 removed it.\n      */\n     public byte[] writeValueAsBytes(Object value)\n-        throws IOException, JsonGenerationException, JsonMappingException\n-    {        \n+        throws JsonProcessingException\n+    {\n         ByteArrayBuilder bb = new ByteArrayBuilder(_jsonFactory._getBufferRecycler());\n-        _configAndWriteValue(_jsonFactory.createJsonGenerator(bb, JsonEncoding.UTF8), value);\n+        try {\n+            _configAndWriteValue(_jsonFactory.createJsonGenerator(bb, JsonEncoding.UTF8), value);\n+        } catch (JsonProcessingException e) { // to support [JACKSON-758]\n+            throw e;\n+        } catch (IOException e) { // shouldn't really happen, but is declared as possibility so:\n+            throw JsonMappingException.fromUnexpectedIOE(e);\n+        }\n         byte[] result = bb.toByteArray();\n         bb.release();\n         return result;", "timestamp": 1343875760, "metainfo": ""}