{"sha": "75617a2d1e11cff3df3f43e3feae9d0a5d0f8716", "log": "Merge pull request #587 from christophercurrie/single-arg-implicits  Fixup Scala-like test", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/failing/TestScalaLikeImplicitProperties.java\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestScalaLikeImplicitProperties.java\n                 if (name.endsWith(\"\u203f\")) {\n                     return name.substring(0, name.length()-1);\n                 }\n-            } else if (member instanceof AnnotatedField) {\n+            } else if (member instanceof AnnotatedMethod) {\n                 name = member.getName();\n                 if (name.endsWith(\"_\u2040\")) {\n                     return name.substring(0, name.length()-2);\n                 }\n+                if (!name.startsWith(\"get\") && !name.startsWith(\"set\")) {\n+                    return name;\n+                }\n+            } else if (member instanceof AnnotatedParameter) {\n+                // A placeholder for legitimate property name detection\n+                // such as what the JDK8 module provides\n+                return \"prop\";\n             }\n             return null;\n+        }\n+\n+        @Override\n+        public boolean hasCreatorAnnotation(Annotated a) {\n+            // A placeholder for legitmate creator detection.\n+            // In Scala, all primary constructors should be creators,\n+            // but I can't obtain a reference to the AnnotatedClass from the\n+            // AnnotatedConstructor, so it's simulated here.\n+            return (a instanceof AnnotatedConstructor);\n         }\n     }\n     \n     static class ValProperty\n     {\n-        public final String prop\u203f;\n+        private final String prop\u203f;\n         public String prop() { return prop\u203f; }\n \n         public ValProperty(String prop) {\n \n     static class ValWithBeanProperty\n     {\n-        public final String prop\u203f;\n+        private final String prop\u203f;\n         public String prop() { return prop\u203f; }\n         public String getProp() { return prop\u203f; }\n \n \n     static class VarProperty\n     {\n-        public String prop\u203f;\n+        private String prop\u203f;\n         public String prop() { return prop\u203f; }\n         public void prop_\u2040(String p) { prop\u203f = p; }\n-\n-        // tatu: this is needed, unless single-arg ctor auto-detected\n-        //  ... or, with JDK8, implicit ctor arg name used along with creator\n-        public VarProperty() { }\n \n         public VarProperty(String prop) {\n             prop\u203f = prop;\n \n     static class VarWithBeanProperty\n     {\n-        public String prop\u203f;\n+        private String prop\u203f;\n         public String prop() { return prop\u203f; }\n         public void prop_\u2040(String p) { prop\u203f = p; }\n         public String getProp() { return prop\u203f; }\n     {\n         ObjectMapper m = manglingMapper();\n \n-        // TODO: Activate whatever handler implements the property detection style\n-\n         assertEquals(\"{\\\"prop\\\":\\\"val\\\"}\", m.writeValueAsString(new ValProperty(\"val\")));\n     }\n \n     {\n         ObjectMapper m = manglingMapper();\n \n-        // TODO: Activate whatever handler implements the property detection style\n-\n         assertEquals(\"{\\\"prop\\\":\\\"val\\\"}\", m.writeValueAsString(new ValWithBeanProperty(\"val\")));\n     }\n \n     public void testVarProperty() throws Exception\n     {\n         ObjectMapper m = manglingMapper();\n-\n-        // TODO: Activate whatever handler implements the property detection style\n \n         assertEquals(\"{\\\"prop\\\":\\\"var\\\"}\", m.writeValueAsString(new VarProperty(\"var\")));\n         VarProperty result = m.readValue(\"{\\\"prop\\\":\\\"read\\\"}\", VarProperty.class);\n     {\n         ObjectMapper m = manglingMapper();\n \n-        // TODO: Activate whatever handler implements the property detection style\n-\n         assertEquals(\"{\\\"prop\\\":\\\"var\\\"}\", m.writeValueAsString(new VarWithBeanProperty(\"var\")));\n         VarWithBeanProperty result = m.readValue(\"{\\\"prop\\\":\\\"read\\\"}\", VarWithBeanProperty.class);\n         assertEquals(\"read\", result.prop());\n     public void testGetterSetterProperty() throws Exception\n     {\n         ObjectMapper m = manglingMapper();\n-\n-        // TODO: Activate whatever handler implements the property detection style\n \n         assertEquals(\"{\\\"prop\\\":\\\"get/set\\\"}\", m.writeValueAsString(new GetterSetterProperty()));\n         GetterSetterProperty result = m.readValue(\"{\\\"prop\\\":\\\"read\\\"}\", GetterSetterProperty.class);", "timestamp": 1413564649, "metainfo": ""}