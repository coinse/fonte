{"sha": "be7d645c8c460307c5329ea5b367fbeefa294992", "log": "add AnnotationIntrospector.findParameterSourceName(), to distinguish explicit vs implicit ctor/method param names", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n      */\n     public Integer findPropertyIndex(Annotated ann) { return null; }\n \n+    /**\n+     * Method for finding parameter name used in source code, and typically\n+     * not indicated by an annotation (which is ironic considering the context).\n+     * The reason for including method here is that of convenience; while\n+     * it is not part of annotation handling, it is closely related to\n+     * property introspection project. {@link AnnotationIntrospector} handling\n+     * is also one of limited number of truly pluggable extension points, making\n+     * it ideal from developer perspective; even at the expense of strict\n+     * naming consistency.\n+     * \n+     * @since 2.4\n+     */\n+    public String findParameterSourceName(AnnotatedParameter param) { return null; }\n+    \n     /*\n     /**********************************************************\n     /* Serialization: general annotations\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java\n         return (r == null) ? _secondary.findPropertyIndex(ann) : r;\n     }\n     \n+    @Override\n+    public String findParameterSourceName(AnnotatedParameter param) {\n+        String r = _primary.findParameterSourceName(param);\n+        return (r == null) ? _secondary.findParameterSourceName(param) : r;\n+    }\n+\n     // // // Serialization: class annotations\n \n     @Override\n     @Override\n     public Object findKeyDeserializer(Annotated am) {\n         Object result = _primary.findKeyDeserializer(am);\n-        if (result == null || result == KeyDeserializer.None.class || result == NoClass.class) {\n-            result = _secondary.findKeyDeserializer(am);\n-        }\n-        return result;\n+        return (result == null || result == KeyDeserializer.None.class || result == NoClass.class) ?\n+                _secondary.findKeyDeserializer(am) : result;\n     }\n \n     @Override\n     public Object findContentDeserializer(Annotated am) {\n         Object result = _primary.findContentDeserializer(am);\n-        if (result == null || result == JsonDeserializer.None.class || result == NoClass.class) {\n-            result = _secondary.findContentDeserializer(am);\n-        }\n-        return result;\n+        return (result == null || result == JsonDeserializer.None.class || result == NoClass.class) ?\n+                _secondary.findContentDeserializer(am) : result;\n     }\n     \n     @Override\n     public Class<?> findDeserializationType(Annotated am, JavaType baseType) {\n         Class<?> result = _primary.findDeserializationType(am, baseType);\n-        if (result == null) {\n-            result = _secondary.findDeserializationType(am, baseType);\n-        }\n-        return result;\n+        return (result == null) ? _secondary.findDeserializationType(am, baseType) : result;\n     }\n \n     @Override\n     public Class<?> findDeserializationKeyType(Annotated am, JavaType baseKeyType) {\n         Class<?> result = _primary.findDeserializationKeyType(am, baseKeyType);\n-        if (result == null) {\n-            result = _secondary.findDeserializationKeyType(am, baseKeyType);\n-        }\n-        return result;\n+        return (result == null) ? _secondary.findDeserializationKeyType(am, baseKeyType) : result;\n     }\n \n     @Override\n     public Class<?> findDeserializationContentType(Annotated am, JavaType baseContentType) {\n         Class<?> result = _primary.findDeserializationContentType(am, baseContentType);\n-        if (result == null) {\n-            result = _secondary.findDeserializationContentType(am, baseContentType);\n-        }\n-        return result;\n+        return (result == null) ? _secondary.findDeserializationContentType(am, baseContentType) : result;\n     }\n \n     @Override\n     public Object findDeserializationConverter(Annotated a) {\n         Object ob = _primary.findDeserializationConverter(a);\n-        if (ob == null) {\n-            ob = _secondary.findDeserializationConverter(a);\n-        }\n-        return ob;\n+        return (ob == null) ? _secondary.findDeserializationConverter(a) : ob;\n     }\n \n     @Override\n     public Object findDeserializationContentConverter(AnnotatedMember a) {\n         Object ob = _primary.findDeserializationContentConverter(a);\n-        if (ob == null) {\n-            ob = _secondary.findDeserializationContentConverter(a);\n-        }\n-        return ob;\n+        return (ob == null) ? _secondary.findDeserializationContentConverter(a) : ob;\n     }\n     \n     // // // Deserialization: class annotations\n \n     @Override\n-    public Object findValueInstantiator(AnnotatedClass ac)\n-    {\n+    public Object findValueInstantiator(AnnotatedClass ac) {\n         Object result = _primary.findValueInstantiator(ac);\n-        if (result == null) {\n-            result = _secondary.findValueInstantiator(ac);\n-        }\n-        return result;\n-    }\n-\n-    @Override\n-    public Class<?> findPOJOBuilder(AnnotatedClass ac)\n-    {\n-            Class<?> result = _primary.findPOJOBuilder(ac);\n-            if (result == null) {\n-                    result = _secondary.findPOJOBuilder(ac);\n-            }\n-            return result;\n-    }\n-\n-    @Override\n-    public JsonPOJOBuilder.Value findPOJOBuilderConfig(AnnotatedClass ac)\n-    {\n+        return (result == null) ? _secondary.findValueInstantiator(ac) : result;\n+    }\n+\n+    @Override\n+    public Class<?> findPOJOBuilder(AnnotatedClass ac) {\n+        Class<?> result = _primary.findPOJOBuilder(ac);\n+        return (result == null) ? _secondary.findPOJOBuilder(ac) : result;\n+    }\n+\n+    @Override\n+    public JsonPOJOBuilder.Value findPOJOBuilderConfig(AnnotatedClass ac) {\n         JsonPOJOBuilder.Value result = _primary.findPOJOBuilderConfig(ac);\n-        if (result == null) {\n-            result = _secondary.findPOJOBuilderConfig(ac);\n-        }\n-        return result;\n+        return (result == null) ? _secondary.findPOJOBuilderConfig(ac) : result;\n     }\n     \n     // // // Deserialization: method annotations\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n         return null;\n     }\n \n+    @Override\n+    public String findParameterSourceName(AnnotatedParameter param) {\n+        // not known by default (until JDK8); but leave explicit:\n+        return null;\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Serialization: class annotations\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/introspect/TestNameConflicts193And327.java\n+package com.fasterxml.jackson.failing;\n+\n+import com.fasterxml.jackson.annotation.*;\n+import com.fasterxml.jackson.databind.*;\n+\n+public class TestNameConflicts193And327 extends BaseMapTest\n+{\n+    static class Bean193\n+    {\n+        @JsonProperty(\"val1\")\n+        private int x;\n+        @JsonIgnore\n+        private int value2;\n+        \n+        public Bean193(@JsonProperty(\"val1\")int value1,\n+                    @JsonProperty(\"val2\")int value2)\n+        {\n+            this.x = value1;\n+            this.value2 = value2;\n+        }\n+        \n+        @JsonProperty(\"val2\")\n+        int x()\n+        {\n+            return value2;\n+        }\n+    }\n+\n+    /* We should only report an exception for cases where there is\n+     * real ambiguity as to how to rename things; but not when everything\n+     * has been explicitly defined\n+     */\n+    // [Issue#327]\n+    @JsonPropertyOrder({ \"prop1\", \"prop2\" })\n+    static class BogusConflictBean\n+    {\n+        @JsonProperty(\"prop1\")\n+        public int a = 2;\n+\n+        @JsonProperty(\"prop2\")\n+        public int getA() {\n+            return 1;\n+        }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+\n+    // [Issue#193]\n+    public void testIssue193() throws Exception\n+    {\n+        String json = objectWriter().writeValueAsString(new Bean193(1, 2));\n+        assertNotNull(json);\n+    }\n+\n+    // [Issue#327]\n+    public void testNonConflict() throws Exception\n+    {\n+        String json = objectMapper().writeValueAsString(new BogusConflictBean());\n+        assertEquals(aposToQuotes(\"{'prop1':2,'prop2':1}\"), json);\n+    }    \n+}", "timestamp": 1397454479, "metainfo": ""}