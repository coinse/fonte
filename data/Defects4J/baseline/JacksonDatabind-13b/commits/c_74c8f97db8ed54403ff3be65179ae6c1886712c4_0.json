{"sha": "74c8f97db8ed54403ff3be65179ae6c1886712c4", "log": "Update release notes wrt #671", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java\n import java.net.URI;\n import java.net.URL;\n import java.util.Calendar;\n+import java.util.Currency;\n import java.util.Date;\n import java.util.Locale;\n import java.util.UUID;\n     public final static int TYPE_URI = 13;\n     public final static int TYPE_URL = 14;\n     public final static int TYPE_CLASS = 15;\n+    public final static int TYPE_CURRENCY = 16;\n \n     final protected int _kind;\n     final protected Class<?> _keyClass;\n         } else if (raw == Locale.class) {\n             FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Locale.class);\n             return new StdKeyDeserializer(TYPE_LOCALE, raw, deser);\n+        } else if (raw == Currency.class) {\n+            FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Currency.class);\n+            return new StdKeyDeserializer(TYPE_CURRENCY, raw, deser);\n         } else {\n             return null;\n         }\n             } catch (IOException e) {\n                 throw ctxt.weirdKeyException(_keyClass, key, \"unable to parse key as locale\");\n             }\n-\n+        case TYPE_CURRENCY:\n+            try {\n+                return _deser._deserialize(key, ctxt);\n+            } catch (IOException e) {\n+                throw ctxt.weirdKeyException(_keyClass, key, \"unable to parse key as currency\");\n+            }\n         case TYPE_DATE:\n             return ctxt.parseDate(key);\n         case TYPE_CALENDAR:\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestMapDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestMapDeserialization.java\n         assertEquals(key, ob);\n     }\n \n+    public void testCurrencyKeyMap() throws Exception {\n+        Currency key = Currency.getInstance(\"USD\");\n+        String JSON = \"{ \\\"\" + key + \"\\\":4}\";\n+        Map<Currency, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<Currency, Object>>() {\n+        });\n+        assertNotNull(result);\n+        assertEquals(1, result.size());\n+        Object ob = result.keySet().iterator().next();\n+        assertNotNull(ob);\n+        assertEquals(Currency.class, ob.getClass());\n+        assertEquals(key, ob);\n+    }\n+\n     // Test confirming that @JsonCreator may be used with Map Key types\n     public void testKeyWithCreator() throws Exception\n     {", "timestamp": 1420674006, "metainfo": ""}