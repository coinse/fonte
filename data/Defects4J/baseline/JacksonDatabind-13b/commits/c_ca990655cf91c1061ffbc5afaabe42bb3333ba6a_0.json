{"sha": "ca990655cf91c1061ffbc5afaabe42bb3333ba6a", "log": "Implement #540", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n                 wrapInstantiationProblem(e, ctxt);\n             }\n         } else if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n-            jp.nextToken();\n+            JsonToken t = jp.nextToken();\n+            if (t == JsonToken.END_ARRAY && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT)) {\n+                return null;\n+            }\n             final Object value = deserialize(jp, ctxt);\n             if (jp.nextToken() != JsonToken.END_ARRAY) {\n                 throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n                         \"Attempted to unwrap single value array for single '\" + _valueClass.getName() + \"' value but there was more than a single value in the array\");\n             }\n             return value;\n-        }\n-        throw ctxt.mappingException(getBeanClass());\n+        } else if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT)) {\n+            JsonToken t = jp.nextToken();\n+            if (t == JsonToken.END_ARRAY) {\n+                return null;\n+            }\n+            throw ctxt.mappingException(handledType(), JsonToken.START_ARRAY);\n+        }\n+        throw ctxt.mappingException(handledType());\n     }\n \n     public Object deserializeFromEmbedded(JsonParser jp, DeserializationContext ctxt) throws IOException\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java\n     extends ContainerDeserializerBase<EnumMap<?,?>>\n     implements ContextualDeserializer\n {\n-    private static final long serialVersionUID = 4564890642370311174L;\n+    private static final long serialVersionUID = 1;\n \n     protected final JavaType _mapType;\n     \n     /* Actual deserialization\n     /**********************************************************\n      */\n-\n+    \n     @Override\n-    public EnumMap<?,?> deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException\n+    public EnumMap<?,?> deserialize(JsonParser jp, DeserializationContext ctxt)\n+        throws IOException\n     {\n         // Ok: must point to START_OBJECT\n         if (jp.getCurrentToken() != JsonToken.START_OBJECT) {\n-            throw ctxt.mappingException(EnumMap.class);\n+            return _deserializeFromEmpty(jp, ctxt);\n         }\n         EnumMap result = constructMap();\n         final JsonDeserializer<Object> valueDes = _valueDeserializer;\n     }\n \n     @Override\n-   public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt, TypeDeserializer typeDeserializer)\n+    public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt, TypeDeserializer typeDeserializer)\n         throws IOException, JsonProcessingException\n     {\n         // In future could check current token... for now this should be enough:\n         return typeDeserializer.deserializeTypedFromObject(jp, ctxt);\n     }\n     \n-    private EnumMap<?,?> constructMap() {\n+    protected EnumMap<?,?> constructMap() {\n         return new EnumMap(_enumClass);\n     }\n }\n+\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n             if (t == JsonToken.VALUE_STRING) {\n                 return (Map<Object,Object>) _valueInstantiator.createFromString(ctxt, jp.getText());\n             }\n-            throw ctxt.mappingException(getMapClass());\n+            // slightly redundant (since String was passed above), but\n+            return _deserializeFromEmpty(jp, ctxt);\n         }\n         final Map<Object,Object> result = (Map<Object,Object>) _valueInstantiator.createUsingDefault(ctxt);\n         if (_standardStringKey) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n         throw ctxt.mappingException(String.class, jp.getCurrentToken());\n     }\n \n+    /**\n+     * Helper method that may be used to support fallback for Empty String / Empty Array\n+     * non-standard representations; usually for things serialized as JSON Objects.\n+     * \n+     * @since 2.5\n+     */\n+    protected T _deserializeFromEmpty(JsonParser jp, DeserializationContext ctxt)\n+        throws IOException\n+    {\n+        JsonToken t = jp.getCurrentToken();\n+        if (t == JsonToken.START_ARRAY) {\n+            if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT)) {\n+                t = jp.nextToken();\n+                if (t == JsonToken.END_ARRAY) {\n+                    return null;\n+                }\n+                throw ctxt.mappingException(handledType(), JsonToken.START_ARRAY);\n+            }\n+        } else if (t == JsonToken.VALUE_STRING) {\n+            if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n+                String str = jp.getText().trim();\n+                if (str.isEmpty()) {\n+                    return null;\n+                }\n+            }\n+        }\n+        throw ctxt.mappingException(handledType());\n+    }\n+    \n     /**\n      * Helper method called to determine if we are seeing String value of\n      * \"null\", and, further, that it should be coerced to null just like\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestMapDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestMapDeserialization.java\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.type.TypeReference;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n public class TestMapDeserialization\n     extends BaseMapTest\n {\n-    /*\n-    /**********************************************************\n-    /* Test classes, enums\n-    /**********************************************************\n-     */\n-\n-    enum Key {\n+    static enum Key {\n         KEY1, KEY2, WHATEVER;\n     }\n \n         ONE, TWO;\n     }\n \n-    \n-    \n     /*\n     /**********************************************************\n     /* Test methods, untyped (Object valued) maps\n         assertEquals(Integer.valueOf(1), result.get(\"a\"));\n \n         assertNull(result.get(\"\"));\n+    }\n+\n+    // [Databind#540]\n+    public void testMapFromEmptyArray() throws Exception\n+    {\n+        final String JSON = \"  [\\n]\";\n+        assertFalse(MAPPER.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT));\n+        // first, verify default settings which do not accept empty Array\n+        ObjectMapper mapper = new ObjectMapper();\n+        try {\n+            mapper.readValue(JSON, Map.class);\n+            fail(\"Should not accept Empty Array for Map by default\");\n+        } catch (JsonProcessingException e) {\n+            verifyException(e, \"START_ARRAY token\");\n+        }\n+        // should be ok to enable dynamically:\n+        ObjectReader r = MAPPER.reader(Map.class)\n+                .with(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT);\n+\n+        Map<?,?> result = r.readValue(JSON);\n+        assertNull(result);\n+\n+        EnumMap<?,?> result2 = r.withType(new TypeReference<EnumMap<Key,String>>() { })\n+                .readValue(JSON);\n+        assertNull(result2);\n     }\n \n     /*", "timestamp": 1411708509, "metainfo": ""}