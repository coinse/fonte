{"sha": "2ca3fa5b3c2f645a1173258efd43195df5b9c796", "log": "Collapse more deserializers", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java\n     \n     @SuppressWarnings(\"unchecked\")\n     @Override\n-    public final T deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n+    public T deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n     {\n         // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:\n         String text = jp.getValueAsString();\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n      * this method if they are to handle type information.\n      */\n     @Override\n-    public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt, TypeDeserializer typeDeserializer)\n-        throws IOException\n-    {\n+    public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException {\n         return typeDeserializer.deserializeTypedFromAny(jp, ctxt);\n     }\n     \n     /**********************************************************\n      */\n \n-    protected final boolean _parseBooleanPrimitive(JsonParser jp, DeserializationContext ctxt)\n-        throws IOException\n-    {\n-        JsonToken t = jp.getCurrentToken();\n-        if (t == JsonToken.VALUE_TRUE) {\n-            return true;\n-        }\n-        if (t == JsonToken.VALUE_FALSE) {\n-            return false;\n-        }\n-        if (t == JsonToken.VALUE_NULL) {\n-            return false;\n-        }\n+    protected final boolean _parseBooleanPrimitive(JsonParser jp, DeserializationContext ctxt) throws IOException\n+    {\n+        JsonToken t = jp.getCurrentToken();\n+        if (t == JsonToken.VALUE_TRUE) return true;\n+        if (t == JsonToken.VALUE_FALSE) return false;\n+        if (t == JsonToken.VALUE_NULL) return false;\n+\n         // [JACKSON-78]: should accept ints too, (0 == false, otherwise true)\n         if (t == JsonToken.VALUE_NUMBER_INT) {\n             // 11-Jan-2012, tatus: May be outside of int...\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdScalarDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdScalarDeserializer.java\n import java.io.IOException;\n \n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLDeserializers.java\n import java.io.IOException;\n import java.util.*;\n \n-import javax.xml.datatype.DatatypeConfigurationException;\n-import javax.xml.datatype.DatatypeFactory;\n-import javax.xml.datatype.Duration;\n-import javax.xml.datatype.XMLGregorianCalendar;\n+import javax.xml.datatype.*;\n import javax.xml.namespace.QName;\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.Deserializers;\n import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;\n-import com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer;\n \n /**\n  * Container deserializers that handle \"core\" XML types: ones included in standard\n  * JDK 1.5. Types are directly needed by JAXB, but may be unavailable on some\n  * limited platforms; hence separate out from basic deserializer factory.\n  */\n-public class CoreXMLDeserializers\n-    extends Deserializers.Base\n+public class CoreXMLDeserializers extends Deserializers.Base\n {\n     /**\n      * Data type factories are thread-safe after instantiation (and\n     {\n         Class<?> raw = type.getRawClass();\n         if (raw == QName.class) {\n-            return QNameDeserializer.instance;\n+            return new Std(raw, TYPE_QNAME);\n         }\n         if (raw == XMLGregorianCalendar.class) {\n-            return GregorianCalendarDeserializer.instance;\n+            return new Std(raw, TYPE_G_CALENDAR);\n         }\n         if (raw == Duration.class) {\n-            return DurationDeserializer.instance;\n+            return new Std(raw, TYPE_DURATION);\n         }\n         return null;\n     }\n     /**********************************************************\n      */\n \n-    public static class DurationDeserializer\n-        extends FromStringDeserializer<Duration>\n+    protected final static int TYPE_DURATION = 1;\n+    protected final static int TYPE_G_CALENDAR = 2;\n+    protected final static int TYPE_QNAME = 3;\n+    \n+    public static class Std extends FromStringDeserializer<Object>\n     {\n         private static final long serialVersionUID = 1L;\n-        public final static DurationDeserializer instance = new DurationDeserializer();\n-        public DurationDeserializer() { super(Duration.class); }\n-    \n+\n+        protected final int _kind;\n+\n+        public Std(Class<?> raw, int kind) {\n+            super(raw);\n+            _kind = kind;\n+        }\n+\n         @Override\n-        protected Duration _deserialize(String value, DeserializationContext ctxt)\n-            throws IllegalArgumentException\n-        {\n-            return _dataTypeFactory.newDuration(value);\n-        }\n-    }\n-\n-    public static class GregorianCalendarDeserializer\n-        extends StdScalarDeserializer<XMLGregorianCalendar>\n-    {\n-        private static final long serialVersionUID = 1L;\n-        public final static GregorianCalendarDeserializer instance = new GregorianCalendarDeserializer();\n-        public GregorianCalendarDeserializer() { super(XMLGregorianCalendar.class); }\n-        \n-        @Override\n-        public XMLGregorianCalendar deserialize(JsonParser jp, DeserializationContext ctxt)\n+        public Object deserialize(JsonParser jp, DeserializationContext ctxt)\n             throws IOException, JsonProcessingException\n         {\n-            Date d = _parseDate(jp, ctxt);\n-            if (d == null) {\n-                return null;\n+            // For most types, use super impl; but not for GregorianCalendar\n+            if (_kind == TYPE_G_CALENDAR) {\n+                Date d = _parseDate(jp, ctxt);\n+                if (d == null) {\n+                    return null;\n+                }\n+                GregorianCalendar calendar = new GregorianCalendar();\n+                calendar.setTime(d);\n+                TimeZone tz = ctxt.getTimeZone();\n+                if (tz != null) {\n+                    calendar.setTimeZone(tz);\n+                }\n+                return _dataTypeFactory.newXMLGregorianCalendar(calendar);\n             }\n-            GregorianCalendar calendar = new GregorianCalendar();\n-            calendar.setTime(d);\n-            TimeZone tz = ctxt.getTimeZone();\n-            if (tz != null) {\n-                calendar.setTimeZone(tz);\n+            return super.deserialize(jp, ctxt);\n+        }\n+\n+        @Override\n+        protected Object _deserialize(String value, DeserializationContext ctxt) throws IllegalArgumentException\n+        {\n+            switch (_kind) {\n+            case TYPE_DURATION:\n+                return _dataTypeFactory.newDuration(value);\n+            case TYPE_QNAME:\n+                return QName.valueOf(value);\n             }\n-            return _dataTypeFactory.newXMLGregorianCalendar(calendar);\n-        }\n-    }\n-\n-    public static class QNameDeserializer\n-        extends FromStringDeserializer<QName>\n-    {\n-        private static final long serialVersionUID = 1L;\n-        public final static QNameDeserializer instance = new QNameDeserializer();\n-        \n-        \n-        public QNameDeserializer() { super(QName.class); }\n-        \n-        @Override\n-        protected QName _deserialize(String value, DeserializationContext ctxt)\n-            throws IllegalArgumentException\n-        {\n-            return QName.valueOf(value);\n+            throw new IllegalStateException();\n         }\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/ext/TestCoreXMLTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ext/TestCoreXMLTypes.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n \n /**\n  * Core XML types (javax.xml) are considered \"external\" (or more precisely \"optional\")\n      */\n     \n     // First things first: must be able to load the deserializers...\n-    @SuppressWarnings(\"unused\")\n     public void testDeserializerLoading()\n     {\n-        new CoreXMLDeserializers.DurationDeserializer();\n-        new CoreXMLDeserializers.GregorianCalendarDeserializer();\n-        new CoreXMLDeserializers.QNameDeserializer();\n+        CoreXMLDeserializers sers = new CoreXMLDeserializers();\n+        TypeFactory f = TypeFactory.defaultInstance();\n+        sers.findBeanDeserializer(f.constructType(Duration.class), null, null);\n+        sers.findBeanDeserializer(f.constructType(XMLGregorianCalendar.class), null, null);\n+        sers.findBeanDeserializer(f.constructType(QName.class), null, null);\n     }\n \n     public void testQNameDeser() throws Exception", "timestamp": 1388624156, "metainfo": ""}