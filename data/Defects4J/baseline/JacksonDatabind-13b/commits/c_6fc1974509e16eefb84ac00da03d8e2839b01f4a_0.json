{"sha": "6fc1974509e16eefb84ac00da03d8e2839b01f4a", "log": "Add one more unit test for Map.Entry handling", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapEntryDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapEntryDeserializer.java\n         t = jp.nextToken();\n         if (t != JsonToken.END_OBJECT) {\n             if (t == JsonToken.FIELD_NAME) { // most likely\n-                throw ctxt.mappingException(\"Problem binding JSON into Map.Entry: more than entry in JSON (second field: '\"+jp.getCurrentName()+\"')\");\n+                throw ctxt.mappingException(\"Problem binding JSON into Map.Entry: more than one entry in JSON (second field: '\"+jp.getCurrentName()+\"')\");\n             }\n             // how would this occur?\n             throw ctxt.mappingException(\"Problem binding JSON into Map.Entry: unexpected content after JSON Object entry: \"+t);\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestMapDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestMapDeserialization.java\n         StringWrapper sw = stuff.get(1).getValue();\n         assertEquals(\"Bar\", sw.str);\n     }\n+\n+    public void testMapEntryFail() throws Exception\n+    {\n+        try {\n+            /*List<Map.Entry<Integer,StringWrapper>> stuff =*/ MAPPER.readValue(aposToQuotes(\"[{'28':'Foo','13':'Bar'}]\"),\n+                    new TypeReference<List<Map.Entry<Integer,StringWrapper>>>() { });\n+            fail(\"Should not have passed\");\n+        } catch (Exception e) {\n+            verifyException(e, \"more than one entry in JSON\");\n+        }\n+    }\n     \n     /*\n     /**********************************************************", "timestamp": 1412040314, "metainfo": ""}