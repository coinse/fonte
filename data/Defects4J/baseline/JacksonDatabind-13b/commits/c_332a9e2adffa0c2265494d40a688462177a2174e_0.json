{"sha": "332a9e2adffa0c2265494d40a688462177a2174e", "log": "Start work on converters for serialization; adding annotations", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java\n     {\n         if (visitor != null) visitor.expectAnyFormat(type);\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Helper class(es)\n--- a/src/main/java/com/fasterxml/jackson/databind/annotation/JsonDeserialize.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/annotation/JsonDeserialize.java\n \n import com.fasterxml.jackson.databind.JsonDeserializer;\n import com.fasterxml.jackson.databind.KeyDeserializer;\n+import com.fasterxml.jackson.databind.util.Converter;\n \n /**\n  * Annotation use for configuring deserialization aspects, by attaching\n      */\n     public Class<?> builder()\n         default NoClass.class;\n+\n+    // // // Annotations for specifying intermediate Converters (2.2+)\n+    \n+    /**\n+     * Which helper object (if any) is to be used to convert from Jackson-bound\n+     * intermediate type (source type of converter) into actual property type\n+     * (which must be same as result type of converter). This is often used\n+     * for two-step deserialization; Jackson binds data into suitable intermediate\n+     * type (like Tree representation), and converter then builds actual property\n+     * type.\n+     *\n+     * @since 2.2\n+     */\n+    public Class<? extends Converter<?,?>> converter() default Converter.None.class;\n+\n+    /**\n+     * Similar to {@link #converter}, but used for values of structures types\n+     * (List, arrays, Maps).\n+     *\n+     * @since 2.2\n+     */\n+    public Class<? extends Converter<?,?>> contentConverter() default Converter.None.class;\n+    \n     \n     // // // Annotations for explicitly specifying deserialization type\n     // // // (which is used for choosing deserializer, if not explicitly\n--- a/src/main/java/com/fasterxml/jackson/databind/annotation/JsonSerialize.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/annotation/JsonSerialize.java\n import java.lang.annotation.Target;\n \n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.util.Converter;\n \n /**\n  * Annotation used for configuring serialization aspects, by attaching\n      */\n     public Typing typing() default Typing.DYNAMIC;\n \n+    // // // Annotations for specifying intermediate Converters (2.2+)\n+    \n+    /**\n+     * Which helper object is to be used to convert type into something\n+     * that Jackson knows how to serialize; either because base type\n+     * can not be serialized easily, or just to alter serialization.\n+     *\n+     * @since 2.2\n+     */\n+    public Class<? extends Converter<?,?>> converter() default Converter.None.class;\n+\n+    /**\n+     * Similar to {@link #converter}, but used for values of structures types\n+     * (List, arrays, Maps).\n+     *\n+     * @since 2.2\n+     */\n+    public Class<? extends Converter<?,?>> contentConverter() default Converter.None.class;\n+    \n     // // // Annotation(s) for inclusion criteria\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/util/Converter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/Converter.java\n  * Helper interface for things that convert Objects of\n  * one type to another.\n  *\n- * @param <IN>\n- * @param <OUT>\n+ * @param <IN> Type of values converter takes\n+ * @param <OUT> Result type from conversion\n  * \n- * @seealso {@link com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer}\n+ * @see com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer\n  * \n  * @since 2.1\n  */\n public interface Converter<IN,OUT>\n {\n     /**\n-     * Main conversion methods\n+     * Main conversion method.\n      */\n     public OUT convert(IN value);\n+\n+    /*\n+    /**********************************************************\n+    /* Helper class(es)\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * This marker class is only to be used with annotations, to\n+     * indicate that <b>no converter is to be used</b>.\n+     *<p>\n+     * Specifically, this class is to be used as the marker for\n+     * annotation {@link com.fasterxml.jackson.databind.annotation.JsonSerialize},\n+     * property <code>converter</code> (and related)\n+     * \n+     * @since 2.2\n+     */\n+    public abstract static class None\n+        implements Converter<Object,Object> { }\n }", "timestamp": 1360908560, "metainfo": ""}