{"sha": "85d1f498eaa799868e5d3dd22eca5278083ee392", "log": "1) Unit test for funky polymorphic deserialization.  It appears that jackson messes up and returns the interface's deserialized value instead of the concrete class", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestPolymorphicDeserialization.java\n+package com.fasterxml.jackson.databind.deser;\n+\n+import com.fasterxml.jackson.annotation.JsonSubTypes;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ */\n+public class TestPolymorphicDeserialization extends BaseMapTest\n+{\n+  @Test\n+  public void testName() throws Exception\n+  {\n+    ObjectMapper mapper = objectMapper();\n+\n+    Assert.assertEquals(\"A\", mapper.readValue(\"{\\\"type\\\": \\\"a\\\"}\", SomeInterface.class).get());\n+    Assert.assertEquals(\"A\", mapper.readValue(\"{}\", SomeInterface.class).get());\n+    Assert.assertEquals(\"B\", mapper.readValue(\"{\\\"type\\\": \\\"b\\\"}\", SomeInterface.class).get());\n+    Assert.assertEquals(\"A\", mapper.readValue(\"{\\\"type\\\": \\\"c\\\"}\", SomeInterface.class).get());\n+\n+    Assert.assertEquals(\"A\", mapper.readValue(\"{\\\"type\\\": \\\"a\\\"}\", ClassA.class).get());\n+    Assert.assertEquals(\"B\", mapper.readValue(\"{\\\"type\\\": \\\"b\\\"}\", ClassB.class).get());\n+    Assert.assertEquals(\"C\", mapper.readValue(\"{\\\"type\\\": \\\"c\\\"}\", ClassC.class).get());\n+  }\n+\n+  @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\", defaultImpl = ClassA.class)\n+  @JsonSubTypes({\n+          @JsonSubTypes.Type(name = \"a\", value = ClassA.class),\n+          @JsonSubTypes.Type(name = \"b\", value = ClassB.class)\n+  })\n+  public static interface SomeInterface\n+  {\n+    public String get();\n+  }\n+\n+  public static class ClassA implements SomeInterface\n+  {\n+    @Override\n+    public String get()\n+    {\n+      return \"A\";\n+    }\n+  }\n+\n+  public static class ClassB implements SomeInterface\n+  {\n+    @Override\n+    public String get()\n+    {\n+      return \"B\";\n+    }\n+  }\n+\n+  public static class ClassC implements SomeInterface\n+  {\n+    @Override\n+    public String get()\n+    {\n+      return \"C\";\n+    }\n+  }\n+\n+}", "timestamp": 1376524874, "metainfo": ""}