{"sha": "2e9defec2dc83e9b1e436f5f9223d685c776da32", "log": "Fix #572", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n             JavaType type, BeanDescription beanDesc)\n         throws JsonMappingException\n     {\n-        /* As per [Issue#24], may want to use alternate shape, serialize as JSON Object.\n+        /* As per [databind#24], may want to use alternate shape, serialize as JSON Object.\n          * Challenge here is that EnumSerializer does not know how to produce\n          * POJO style serialization, so we must handle that special case separately;\n          * otherwise pass it to EnumSerializer.\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n         return null;\n     }\n \n+    @SuppressWarnings(\"incomplete-switch\")\n     @Override\n     public JsonSerializer<?> createContextual(SerializerProvider provider,\n             BeanProperty property)\n         throws JsonMappingException\n     {\n+        final AnnotationIntrospector intr = provider.getAnnotationIntrospector();\n+        final AnnotatedMember accessor = (property == null || intr == null)\n+                ? null : property.getMember();\n+        final SerializationConfig config = provider.getConfig();\n+        \n+        // Let's start with one big transmutation: Enums that are annotated\n+        // to serialize as Objects may want to revert\n+        JsonFormat.Shape shape = null;\n+        if (accessor != null) {\n+            JsonFormat.Value format = intr.findFormat((Annotated) accessor);\n+\n+            if (format != null) {\n+                shape = format.getShape();\n+                // or, alternatively, asked to revert \"back to\" other representations...\n+                if (shape != _serializationShape) {\n+                    if (_handledType.isEnum()) {\n+                        switch (shape) {\n+                        case STRING:\n+                        case NUMBER:\n+                        case NUMBER_INT:\n+                            // 12-Oct-2014, tatu: May need to introspect full annotations... but\n+                            //   for now, just do class ones\n+                            BeanDescription desc = config.introspectClassAnnotations(_handledType);\n+                            JsonSerializer<?> ser = EnumSerializer.construct(_handledType,\n+                                    provider.getConfig(), desc, format);\n+                            return provider.handlePrimaryContextualization(ser, property);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n         ObjectIdWriter oiw = _objectIdWriter;\n         String[] ignorals = null;\n         Object newFilterId = null;\n-        final AnnotationIntrospector intr = provider.getAnnotationIntrospector();\n-        final AnnotatedMember accessor = (property == null || intr == null)\n-                ? null : property.getMember();\n         \n-        // First: may have an override for Object Id:\n+        // Then we may have an override for Object Id\n         if (accessor != null) {\n             ignorals = intr.findPropertiesToIgnore(accessor);\n             ObjectIdInfo objectIdInfo = intr.findObjectIdInfo(accessor);\n         if (newFilterId != null) {\n             contextual = contextual.withFilterId(newFilterId);\n         }\n-        \n-        // One more thing: are we asked to serialize POJO as array?\n-        JsonFormat.Shape shape = null;\n-        if (accessor != null) {\n-            JsonFormat.Value format = intr.findFormat((Annotated) accessor);\n-\n-            if (format != null) {\n-                shape = format.getShape();\n-            }\n-        }\n         if (shape == null) {\n             shape = _serializationShape;\n         }\n         if (shape == JsonFormat.Shape.ARRAY) {\n-            contextual = contextual.asArraySerializer();\n+            return contextual.asArraySerializer();\n         }\n         return contextual;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java\n import com.fasterxml.jackson.annotation.JsonFormat;\n import com.fasterxml.jackson.annotation.JsonFormat.Shape;\n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n      * \n      * @since 2.1\n      */\n-    public static EnumSerializer construct(Class<Enum<?>> enumClass, SerializationConfig config,\n+    @SuppressWarnings(\"unchecked\")\n+    public static EnumSerializer construct(Class<?> enumClass, SerializationConfig config,\n             BeanDescription beanDesc, JsonFormat.Value format)\n     {\n         // [JACKSON-212]: If toString() is to be used instead, leave EnumValues null\n-        EnumValues v = EnumValues.construct(config, enumClass);\n+        EnumValues v = EnumValues.construct(config, (Class<Enum<?>>) enumClass);\n         Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n         return new EnumSerializer(v, serializeAsIndex);\n     }\n     @Override\n     public JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException\n     {\n-System.err.println(\"DEBUG: createContextual... prop = \"+property);    \t\n         if (property != null) {\n             JsonFormat.Value format = prov.getAnnotationIntrospector().findFormat((Annotated) property.getMember());\n             if (format != null) {\n--- a/src/test/java/com/fasterxml/jackson/databind/introspect/TestNameConflicts.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/introspect/TestNameConflicts.java\n     // for [jackson-core#158]\n     public void testOverrideName() throws Exception\n     {\n-        String json = MAPPER.writeValueAsString(new CoreBean158());\n+        final ObjectMapper mapper = objectMapper();\n+        String json = mapper.writeValueAsString(new CoreBean158());\n         assertEquals(aposToQuotes(\"{'bar':'x'}\"), json);\n-        \n+\n         // and back\n-        CoreBean158 result = MAPPER.readValue(aposToQuotes(\"{'bar':'y'}\"), CoreBean158.class);\n+        CoreBean158 result = null;\n+        try {\n+            result = mapper.readValue(aposToQuotes(\"{'bar':'y'}\"), CoreBean158.class);\n+        } catch (Exception e) {\n+            fail(\"Unexpected failure when reading CoreBean158: \"+e);\n+        }\n         assertNotNull(result);\n         assertEquals(\"y\", result.bar);\n     }    \n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestEnumSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestEnumSerialization.java\n import com.fasterxml.jackson.annotation.JsonFormat.Shape;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.annotation.JsonValue;\n-\n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n             jgen.writeString(value.name().toLowerCase());\n         }\n     }\n+\n+    // for [databind#572]\n+    static class PoOverrideAsString\n+    {\n+        @JsonFormat(shape=Shape.STRING)\n+        public PoNUM value = PoNUM.B;\n+    }\n+\n+    static class PoOverrideAsNumber\n+    {\n+        @JsonFormat(shape=Shape.NUMBER)\n+        public PoNUM value = PoNUM.B;\n+    }\n     \n     /*\n     /**********************************************************\n         module.addSerializer(Enum.class, new LowerCasingEnumSerializer());\n         m.registerModule(module);\n         assertEquals(quote(\"b\"), m.writeValueAsString(TestEnum.B));\n+    }\n+\n+    // [databind#572]\n+    public void testOverrideEnumAsString() throws Exception {\n+        assertEquals(\"{\\\"value\\\":\\\"B\\\"}\", mapper.writeValueAsString(new PoOverrideAsString()));\n+    }\n+\n+    public void testOverrideEnumAsNumber() throws Exception {\n+        assertEquals(\"{\\\"value\\\":1}\", mapper.writeValueAsString(new PoOverrideAsNumber()));\n     }\n }\n ", "timestamp": 1413152679, "metainfo": ""}