{"sha": "9077a58a1325a4e5e610c13849b3509e8cd88111", "log": "Fix #362", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java\n import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.util.TokenBuffer;\n \n /**\n  * Specialized {@link JsonSerializer} to output {@link java.util.UUID}s.\n     {\n         // First: perhaps we could serialize it as raw binary data?\n         if (jgen.canWriteBinaryNatively()) {\n-            jgen.writeBinary(_asBytes(value));\n-            return;\n+            /* 07-Dec-2013, tatu: One nasty case; that of TokenBuffer. While it can\n+             *   technically retain binary data, we do not want to do use binary\n+             *   with it, as that results in UUIDs getting converted to Base64 for\n+             *   most conversions.\n+             */\n+            if (!(jgen instanceof TokenBuffer)) {\n+                jgen.writeBinary(_asBytes(value));\n+                return;\n+            }\n         }\n         \n         // UUID.toString() works ok functionally, but we can make it go much faster\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestJdkTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestJdkTypes.java\n public class TestJdkTypes\n     extends com.fasterxml.jackson.databind.BaseMapTest\n {\n-    private final ObjectMapper MAPPER = new ObjectMapper();\n+    private final ObjectMapper MAPPER = objectMapper();\n     \n     /**\n      * Unit test to catch bug [JACKSON-8].\n             UUID uuid = UUID.fromString(value);\n             String json = MAPPER.writeValueAsString(uuid);\n             assertEquals(quote(uuid.toString()), json);\n+\n+            // Also, wrt [#362], should convert cleanly\n+            String str = MAPPER.convertValue(uuid, String.class);\n+            assertEquals(value, str);\n         }\n         \n         // then use templating; note that these are not exactly valid UUIDs\n--- a/src/test/java/com/fasterxml/jackson/databind/util/TestTokenBuffer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/util/TestTokenBuffer.java\n             UUID out = mapper.readValue(buf.asParser(), UUID.class);\n             assertEquals(uuid.toString(), out.toString());\n \n-            // second part: ensure it's written as binary...\n+            // second part: As per [#362], should NOT use binary with TokenBuffer\n             JsonParser jp = buf.asParser();\n-            assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, jp.nextToken());\n-            byte[] raw = jp.getBinaryValue();\n-            assertEquals(16, raw.length);\n+            assertEquals(JsonToken.VALUE_STRING, jp.nextToken());\n+            String str = jp.getText();\n+            assertEquals(value, str);\n             jp.close();\n         }\n     }", "timestamp": 1386478738, "metainfo": ""}