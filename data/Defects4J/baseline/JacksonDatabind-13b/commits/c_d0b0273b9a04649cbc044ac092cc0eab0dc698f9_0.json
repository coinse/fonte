{"sha": "d0b0273b9a04649cbc044ac092cc0eab0dc698f9", "log": "Impelment #442", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/Annotated.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/Annotated.java\n     \n     public abstract <A extends Annotation> A getAnnotation(Class<A> acls);\n \n-    public final <A extends Annotation> boolean hasAnnotation(Class<A> acls)\n-    {\n+    public final <A extends Annotation> boolean hasAnnotation(Class<A> acls) {\n         return getAnnotation(acls) != null;\n     }\n-\n+    \n     /**\n      * Fluent factory method that will construct a new instance that uses specified\n      * instance annotations instead of currently configured ones.\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java\n     @Override\n     public Iterable<Annotation> annotations() {\n         if (_classAnnotations == null) {\n-            return Collections.emptyList();\n+            resolveClassAnnotations();\n         }\n         return _classAnnotations.annotations();\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java\n      */\n \n     @Override\n-    public final <A extends Annotation> A getAnnotation(Class<A> acls)\n-    {\n+    public final <A extends Annotation> A getAnnotation(Class<A> acls) {\n         return _annotations.get(acls);\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationMap.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationMap.java\n     }\n \n     @Override\n-    public String toString()\n-    {\n+    public String toString() {\n         if (_annotations == null) {\n             return \"[null]\";\n         }\n     /**********************************************************\n      */\n \n-    protected final void _add(Annotation ann)\n-    {\n+    protected final void _add(Annotation ann) {\n         if (_annotations == null) {\n             _annotations = new HashMap<Class<? extends Annotation>,Annotation>();\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n             JsonProperty pann = a.getAnnotation(JsonProperty.class);\n             if (pann != null) {\n                 name = pann.value();\n+                /* 22-Apr-2014, tatu: Should figure out a better way to do this, but\n+                 *   it's actually bit tricky to do it more efficiently (meta-annotations\n+                 *   add more lookups; AnnotationMap costs etc)\n+                 */\n             } else if (a.hasAnnotation(JsonDeserialize.class)\n                     || a.hasAnnotation(JsonView.class)\n+                    || a.hasAnnotation(JsonUnwrapped.class) // [#442]\n                     || a.hasAnnotation(JsonBackReference.class)\n                     || a.hasAnnotation(JsonManagedReference.class)) {\n                     name = \"\";", "timestamp": 1398219477, "metainfo": ""}