{"sha": "464981e31b28415173837a63f886ac23af0be3de", "log": "adding unit test for [JACKSON-850]", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/creators/TestCreators.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestCreators.java\n         @JsonCreator public MultiBean(String v) { value = v; }\n         @JsonCreator public MultiBean(boolean v) { value = v; }\n     }\n+\n+    // for [JACKSON-850]\n+    static class NoArgFactoryBean {\n+        public int x;\n+        public int y;\n+        \n+        public NoArgFactoryBean(int value) { x = value; }\n+        \n+        @JsonCreator\n+        public static NoArgFactoryBean create() { return new NoArgFactoryBean(123); }\n+    }\n     \n     /*\n     /**********************************************************\n     }\n \n     /*\n-    //////////////////////////////////////////////\n-    // Annotated helper classes for Maps\n-    //////////////////////////////////////////////\n+    /**********************************************************\n+    /* Annotated helper classes for Maps\n+    /**********************************************************\n      */\n \n     @SuppressWarnings(\"serial\")\n     }\n \n     /*\n-    /////////////////////////////////////////////////////\n-    // Test methods, valid cases, non-deferred, no-mixins\n-    /////////////////////////////////////////////////////\n-     */\n-\n+    /**********************************************************\n+    /* Test methods, valid cases, non-deferred, no-mixins\n+    /**********************************************************\n+     */\n+\n+    private final ObjectMapper MAPPER = new ObjectMapper();\n+    \n     public void testSimpleConstructor() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n-        ConstructorBean bean = m.readValue(\"{ \\\"x\\\" : 42 }\", ConstructorBean.class);\n+        ConstructorBean bean = MAPPER.readValue(\"{ \\\"x\\\" : 42 }\", ConstructorBean.class);\n         assertEquals(42, bean.x);\n     }\n \n+    // [JACKSON-850]\n+    public void testNoArgsFactory() throws Exception\n+    {\n+        NoArgFactoryBean value = MAPPER.readValue(\"{\\\"y\\\":13}\", NoArgFactoryBean.class);\n+        assertEquals(13, value.y);\n+        assertEquals(123, value.x);\n+    }\n+    \n     public void testSimpleDoubleConstructor() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n         Double exp = new Double(\"0.25\");\n-        DoubleConstructorBean bean = m.readValue(exp.toString(), DoubleConstructorBean.class);\n+        DoubleConstructorBean bean = MAPPER.readValue(exp.toString(), DoubleConstructorBean.class);\n         assertEquals(exp, bean.d);\n     }\n \n     public void testSimpleBooleanConstructor() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n-        BooleanConstructorBean bean = m.readValue(\" true \", BooleanConstructorBean.class);\n+        BooleanConstructorBean bean = MAPPER.readValue(\" true \", BooleanConstructorBean.class);\n         assertEquals(Boolean.TRUE, bean.b);\n \n-        BooleanConstructorBean2 bean2 = m.readValue(\" true \", BooleanConstructorBean2.class);\n+        BooleanConstructorBean2 bean2 = MAPPER.readValue(\" true \", BooleanConstructorBean2.class);\n         assertTrue(bean2.b);\n     }\n \n     public void testSimpleFactory() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n-        FactoryBean bean = m.readValue(\"{ \\\"f\\\" : 0.25 }\", FactoryBean.class);\n+        FactoryBean bean = MAPPER.readValue(\"{ \\\"f\\\" : 0.25 }\", FactoryBean.class);\n         assertEquals(0.25, bean.d);\n     }\n \n     public void testLongFactory() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n         long VALUE = 123456789000L;\n-        LongFactoryBean bean = m.readValue(String.valueOf(VALUE), LongFactoryBean.class);\n+        LongFactoryBean bean = MAPPER.readValue(String.valueOf(VALUE), LongFactoryBean.class);\n         assertEquals(VALUE, bean.value);\n     }\n \n     public void testStringFactory() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n         String str = \"abc\";\n-        StringFactoryBean bean = m.readValue(quote(str), StringFactoryBean.class);\n+        StringFactoryBean bean = MAPPER.readValue(quote(str), StringFactoryBean.class);\n         assertEquals(str, bean.value);\n     }\n \n     public void testConstructorCreator() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n-        CreatorBean bean = m.readValue\n+        CreatorBean bean = MAPPER.readValue\n             (\"{ \\\"a\\\" : \\\"xyz\\\", \\\"x\\\" : 12 }\", CreatorBean.class);\n         assertEquals(13, bean.x);\n         assertEquals(\"ctor:xyz\", bean.a);\n \n     public void testConstructorAndProps() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n-        ConstructorAndPropsBean bean = m.readValue\n+        ConstructorAndPropsBean bean = MAPPER.readValue\n             (\"{ \\\"a\\\" : \\\"1\\\", \\\"b\\\": 2, \\\"c\\\" : true }\", ConstructorAndPropsBean.class);\n         assertEquals(1, bean.a);\n         assertEquals(2, bean.b);\n \n     public void testFactoryAndProps() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n-        FactoryAndPropsBean bean = m.readValue\n+        FactoryAndPropsBean bean = MAPPER.readValue\n             (\"{ \\\"a\\\" : [ false, true, false ], \\\"b\\\": 2, \\\"c\\\" : -1 }\", FactoryAndPropsBean.class);\n         assertEquals(2, bean.arg2);\n         assertEquals(-1, bean.arg3);\n      */\n     public void testMultipleCreators() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n-        MultiBean bean = m.readValue(\"123\", MultiBean.class);\n+        MultiBean bean = MAPPER.readValue(\"123\", MultiBean.class);\n         assertEquals(Integer.valueOf(123), bean.value);\n-        bean = m.readValue(quote(\"abc\"), MultiBean.class);\n+        bean = MAPPER.readValue(quote(\"abc\"), MultiBean.class);\n         assertEquals(\"abc\", bean.value);\n-        bean = m.readValue(\"0.25\", MultiBean.class);\n+        bean = MAPPER.readValue(\"0.25\", MultiBean.class);\n         assertEquals(Double.valueOf(0.25), bean.value);\n     }\n \n \n     public void testDeferredConstructorAndProps() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n-        DeferredConstructorAndPropsBean bean = m.readValue\n+        DeferredConstructorAndPropsBean bean = MAPPER.readValue\n             (\"{ \\\"propB\\\" : \\\"...\\\", \\\"createA\\\" : [ 1 ], \\\"propA\\\" : null }\",\n              DeferredConstructorAndPropsBean.class);\n \n \n     public void testDeferredFactoryAndProps() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n-        DeferredFactoryAndPropsBean bean = m.readValue\n+        DeferredFactoryAndPropsBean bean = MAPPER.readValue\n             (\"{ \\\"prop\\\" : \\\"1\\\", \\\"ctor\\\" : \\\"2\\\" }\", DeferredFactoryAndPropsBean.class);\n         assertEquals(\"1\", bean.prop);\n         assertEquals(\"2\", bean.ctor);\n     }\n \n     /*\n-    /////////////////////////////////////////////////////\n-    // Test methods, valid cases, mixins\n-    /////////////////////////////////////////////////////\n+    /**********************************************************\n+    /* Test methods, valid cases, mixins\n+    /**********************************************************\n      */\n \n     public void testFactoryCreatorWithMixin() throws Exception\n     }\n \n     /*\n-    /////////////////////////////////////////////////////\n-    // Test methods, valid cases, Map with creator\n-    // (to test [JACKSON-153])\n-    /////////////////////////////////////////////////////\n+    /**********************************************************\n+    /* Test methods, valid cases, Map with creator\n+    /* (to test [JACKSON-153])\n+    /**********************************************************\n      */\n \n     public void testMapWithConstructor() throws Exception\n     {\n-        MapWithCtor result = new ObjectMapper().readValue\n+        MapWithCtor result = MAPPER.readValue\n             (\"{\\\"text\\\":\\\"abc\\\", \\\"entry\\\":true, \\\"number\\\":123, \\\"xy\\\":\\\"yx\\\"}\",\n              MapWithCtor.class);\n         // regular Map entries:\n \n     public void testMapWithFactory() throws Exception\n     {\n-        MapWithFactory result = new ObjectMapper().readValue\n+        MapWithFactory result = MAPPER.readValue\n             (\"{\\\"x\\\":\\\"...\\\",\\\"b\\\":true  }\",\n              MapWithFactory.class);\n         assertEquals(\"...\", result.get(\"x\"));\n     }\n \n     /*\n-    //////////////////////////////////////////////\n-    // Test methods, invalid/broken cases\n-    //////////////////////////////////////////////\n+    /**********************************************************\n+    /* Test methods, invalid/broken cases\n+    /**********************************************************\n      */\n \n     public void testBrokenConstructor() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n         try {\n-            /*BrokenBean bean =*/ m.readValue(\"{ \\\"x\\\" : 42 }\", BrokenBean.class);\n+            /*BrokenBean bean =*/ MAPPER.readValue(\"{ \\\"x\\\" : 42 }\", BrokenBean.class);\n         } catch (JsonMappingException je) {\n             verifyException(je, \"has no property name\");\n         }", "timestamp": 1343014009, "metainfo": ""}