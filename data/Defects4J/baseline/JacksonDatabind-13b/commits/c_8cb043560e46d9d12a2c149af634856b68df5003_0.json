{"sha": "8cb043560e46d9d12a2c149af634856b68df5003", "log": "Merge branch 'master' of github.com:FasterXML/jackson-databind", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n     /**\n      * Offlined method called to handle \"native\" Object Id that has been read\n      * and known to be associated with given deserialized POJO.\n-     * \n+     *\n      * @since 2.3\n      */\n     protected Object _handleTypedObjectId(JsonParser jp, DeserializationContext ctxt,\n-            Object pojo, Object id)\n-        throws IOException, JsonProcessingException\n-    {\n+            Object pojo, Object rawId)\n+        throws IOException, JsonProcessingException\n+    {\n+        /* 07-Aug-2013, tatu: One more challenge: type of id may not be type\n+         *   of property we are expecting later on; specifically, numeric ids\n+         *   vs Strings.\n+         */\n+        JsonDeserializer<Object> idDeser = _objectIdReader.getDeserializer();\n+        final Object id;\n+\n+        // Ok, this is bit ridiculous; let's see if conversion is needed:\n+        if ((idDeser instanceof StdDeserializer)\n+            && ((StdDeserializer<?>) idDeser).getValueClass() == rawId.getClass()) {\n+            // nope: already same type\n+            id = rawId;\n+        } else {\n+            id = _convertObjectId(jp, ctxt, rawId, idDeser);\n+        }\n+\n         ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator);\n         roid.bindItem(pojo);\n         // also: may need to set a property value as well\n         }\n         return pojo;\n     }\n-    \n+\n+    /**\n+     * Helper method we need to do necessary conversion from whatever native object id\n+     * type is, into declared type that Jackson internals expect. This may be\n+     * simple cast (for String ids), or something more complicated; in latter\n+     * case we may need to create bogus content buffer to allow use of\n+     * id deserializer.\n+     *\n+     * @since 2.3\n+     */\n+    protected Object _convertObjectId(JsonParser jp, DeserializationContext ctxt,\n+            Object rawId, JsonDeserializer<Object> idDeser)\n+        throws IOException, JsonProcessingException\n+    {\n+        @SuppressWarnings(\"resource\") // no need to close really\n+        TokenBuffer buf = new TokenBuffer(jp);\n+        if (rawId instanceof String) {\n+            buf.writeString((String) rawId);\n+        } else if (rawId instanceof Long) {\n+            buf.writeNumber(((Long) rawId).longValue());\n+        } else if (rawId instanceof Integer) {\n+            buf.writeNumber(((Integer) rawId).intValue());\n+        } else {\n+            // should we worry about UUIDs? They should be fine, right?\n+            buf.writeObject(rawId);\n+        }\n+        JsonParser bufParser = buf.asParser();\n+        bufParser.nextToken();\n+        return idDeser.deserialize(bufParser, ctxt);\n+    }\n+\n     // NOTE: currently only used by standard BeanDeserializer (not Builder-based)\n     /**\n      * Alternative deserialization method used when we expect to see Object Id;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReader.java\n     /**********************************************************\n      */\n \n-    public JsonDeserializer<?> getDeserializer() {\n+    public JsonDeserializer<Object> getDeserializer() {\n         return _deserializer;\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n     }\n \n     @Override\n+    public int getFeatureMask() {\n+        return _generatorFeatures;\n+    }\n+\n+    @Override\n+    public JsonGenerator setFeatureMask(int mask) {\n+        _generatorFeatures = mask;\n+        return this;\n+    }\n+    \n+    @Override\n     public JsonGenerator useDefaultPrettyPrinter() {\n         // No-op: we don't indent\n         return this;", "timestamp": 1375928541, "metainfo": ""}