{"sha": "934699bde2b789b201c818530bd40716bd6d1edf", "log": "minor warning cleanup", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeResolverBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeResolverBuilder.java\n  * polymorphic type handling.\n  *<p>\n  * Builder is first initialized by calling {@link #init} method, and then\n- * configured using <code>setXxx</code> (and <code>registerXxx</code>)\n- * methods. Finally, after calling all configuration methods,\n+ * configured using 'set' methods like {@link #inclusion}.\n+ * Finally, after calling all configuration methods,\n  * {@link #buildTypeSerializer} or {@link #buildTypeDeserializer}\n  * will be called to get actual type resolver constructed\n  * and used for resolving types for configured base type and its\n  * create builders are only made when builders are certainly needed; whereas\n  * in second case builder has to first verify whether type information is\n  * applicable for given type, and if not, just return null to indicate this.\n- * \n- * @author tatu\n  */\n public interface TypeResolverBuilder<T extends TypeResolverBuilder<T>>\n {\n      * @param includeAs Mechanism used for including type metadata in JSON\n      * \n      * @return Resulting builder instance (usually this builder,\n-     *   but not necessarily)\n+     *   but may be a newly constructed instance for immutable builders}\n      */\n     public T inclusion(As includeAs);\n \n      *    type information\n      * \n      * @return Resulting builder instance (usually this builder,\n-     *   but not necessarily)\n+     *   but may be a newly constructed instance for immutable builders}\n      */\n     public T typeProperty(String propName);\n \n     /**\n      * Method for specifying default implementation to use if type id \n      * is either not available, or can not be resolved.\n+     * \n+     * @return Resulting builder instance (usually this builder,\n+     *   but may be a newly constructed instance for immutable builders}\n      */\n     public T defaultImpl(Class<?> defaultImpl);\n \n      * Method for specifying whether type id should be visible to\n      * {@link com.fasterxml.jackson.databind.JsonDeserializer}s or not.\n      * \n+     * @return Resulting builder instance (usually this builder,\n+     *   but may be a newly constructed instance for immutable builders}\n+     * \n      * @since 2.0\n      */\n     public T typeIdVisibility(boolean isVisible);\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestObjectNode.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestObjectNode.java\n         assertTrue(n.path(\"a\").isMissingNode());\n \n         TextNode text = TextNode.valueOf(\"x\");\n-        n.set(\"a\", text);\n+        assertSame(n, n.set(\"a\", text));\n+        \n         assertEquals(1, n.size());\n         assertTrue(n.elements().hasNext());\n         assertTrue(n.fields().hasNext());", "timestamp": 1380404905, "metainfo": ""}