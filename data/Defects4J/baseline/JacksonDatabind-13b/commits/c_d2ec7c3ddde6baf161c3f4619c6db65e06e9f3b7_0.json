{"sha": "d2ec7c3ddde6baf161c3f4619c6db65e06e9f3b7", "log": "Fixed #232", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java\n      * Feature that determines whether {@link java.math.BigDecimal} entries are\n      * serialized using {@link java.math.BigDecimal#toPlainString()} to prevent\n      * values to be written using scientific notation.\n-     * <p>\n+     *<p>\n+     * NOTE: since this feature typically requires use of\n+     * {@link com.fasterxml.jackson.core.JsonGenerator#writeNumber(String)}\n+     * ot may cause compatibility problems since not all {@link com.fasterxml.jackson.core.JsonGenerator}\n+     * implementations support such mode of output: usually only text-based formats\n+     * support it.\n+     *<p>\n      * Feature is disabled by default.\n      */\n     WRITE_BIGDECIMAL_AS_PLAIN(false),\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n             @SuppressWarnings(\"unchecked\")\n                 Class<? extends Map<?,?>> mapValue = (Class<? extends Map<?,?>>) value;\n             _mapFallbacks.put(key.getName(), mapValue);\n-        } catch (Throwable e) { // is this possible?\n+        } catch (Throwable e) { // some class loading problems are Errors, others Exceptions\n             System.err.println(\"Problems with (optional) types: \"+e);\n         }\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor;\n+import com.fasterxml.jackson.databind.util.TokenBuffer;\n \n /**\n  * Container class for serializers used for handling standard JDK-provided types.\n             // As per [JACKSON-423], handling for BigInteger and BigDecimal was missing!\n             if (value instanceof BigDecimal) {\n                 if (provider.isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n-                    jgen.writeNumber(((BigDecimal) value).toPlainString());\n-                } else {\n-                    jgen.writeNumber((BigDecimal) value);\n+                    // [Issue#232]: Ok, rather clumsy, but let's try to work around the problem with:\n+                    if (!(jgen instanceof TokenBuffer)) {\n+                        jgen.writeNumber(((BigDecimal) value).toPlainString());\n+                        return;\n+                    }\n                 }\n+                jgen.writeNumber((BigDecimal) value);\n             } else if (value instanceof BigInteger) {\n                 jgen.writeNumber((BigInteger) value);\n                 \n--- a/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n         @Override\n         public final Number getNumberValue() throws IOException, JsonParseException {\n             _checkIsNumber();\n-            return (Number) _currentObject();\n+            Object value = _currentObject();\n+            if (value instanceof Number) {\n+                return (Number) value;\n+            }\n+            // Difficult to really support numbers-as-Strings; but let's try.\n+            // NOTE: no access to DeserializationConfig, unfortunately, so can not\n+            // try to determine Double/BigDecimal preference...\n+            if (value instanceof String) {\n+                String str = (String) value;\n+                if (str.indexOf('.') >= 0) {\n+                    return Double.parseDouble(str);\n+                }\n+                return Long.parseLong(str);\n+            }\n+            if (value == null) {\n+                return null;\n+            }\n+            throw new IllegalStateException(\"Internal error: entry should be a Number, but is of type \"\n+                    +value.getClass().getName());\n         }\n         \n         /*\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestConversions.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestConversions.java\n package com.fasterxml.jackson.databind.node;\n \n import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.util.*;\n \n import static org.junit.Assert.*;\n \n         assertTrue(n.isPojo());\n         assertSame(MARKER, ((POJONode) n).getPojo());\n     }\n+\n+    // [Issue#232]\n+    public void testBigDecimalAsPlainStringTreeConversion()\n+        throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.enable(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN);\n+        Map<String, Object> map = new HashMap<String, Object>();\n+        String PI_STR = \"3.00000000\";\n+        map.put(\"pi\", new BigDecimal(PI_STR));\n+        JsonNode tree = mapper.valueToTree(map);\n+        assertNotNull(tree);\n+        assertEquals(1, tree.size());\n+        assertTrue(tree.has(\"pi\"));\n+    }\n }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestDateSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestDateSerialization.java\n import java.io.*;\n import java.text.*;\n import java.util.*;\n-\n \n import com.fasterxml.jackson.annotation.JsonFormat;\n import com.fasterxml.jackson.databind.*;", "timestamp": 1369526552, "metainfo": ""}