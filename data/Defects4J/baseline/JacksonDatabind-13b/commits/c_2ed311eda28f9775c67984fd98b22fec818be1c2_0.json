{"sha": "2ed311eda28f9775c67984fd98b22fec818be1c2", "log": "Change StringDeserializer to use new 'JsonParser.getValueAsText()', to allow for more flexible handling", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java\n     public final T deserialize(JsonParser jp, DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n     {\n-        if (jp.getCurrentToken() == JsonToken.VALUE_STRING) {\n-            String text = jp.getText().trim();\n-            // 15-Oct-2010, tatu: Empty String usually means null, so\n-            if (text.length() == 0) {\n+        // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:\n+        String text = jp.getValueAsString();\n+        if (text != null) { // has String representation\n+            if (text.length() == 0 || (text = text.trim()).length() == 0) {\n+                // 15-Oct-2010, tatu: Empty String usually means null, so\n                 return null;\n             }\n             try {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java\n         public String deserialize(JsonParser jp, DeserializationContext ctxt)\n             throws IOException, JsonProcessingException\n         {\n+            // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:\n+            String text = jp.getValueAsString();\n+            if (text != null) {\n+                return text;\n+            }\n+            // [JACKSON-330]: need to gracefully handle byte[] data, as base64\n             JsonToken curr = jp.getCurrentToken();\n-            // Usually should just get string value:\n-            if (curr == JsonToken.VALUE_STRING) {\n-                return jp.getText();\n-            }\n-            // [JACKSON-330]: need to gracefully handle byte[] data, as base64\n             if (curr == JsonToken.VALUE_EMBEDDED_OBJECT) {\n                 Object ob = jp.getEmbeddedObject();\n                 if (ob == null) {\n                 }\n                 // otherwise, try conversion using toString()...\n                 return ob.toString();\n-            }\n-            // Can deserialize any scalar value, but not markers\n-            if (curr.isScalarValue()) {\n-                return jp.getText();\n             }\n             throw ctxt.mappingException(_valueClass, curr);\n         }", "timestamp": 1348372040, "metainfo": ""}