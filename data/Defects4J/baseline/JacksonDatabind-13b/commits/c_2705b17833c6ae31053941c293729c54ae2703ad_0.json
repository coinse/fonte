{"sha": "2705b17833c6ae31053941c293729c54ae2703ad", "log": "more work on supporting Map/include values", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/AnyGetterWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/AnyGetterWriter.java\n                 throw new JsonMappingException(\"Value returned by 'any-getter' (\"\n                         +_accessor.getName()+\"()) not java.util.Map but \"+value.getClass().getName());\n             }\n-            _serializer.serializeFilteredFields((Map<?,?>) value, jgen, provider, filter);\n+            // 19-Oct-2014, tatu: Should we try to support @JsonInclude options here?\n+            _serializer.serializeFilteredFields((Map<?,?>) value, jgen, provider, filter, null);\n         }\n     \n     // Note: NOT part of ResolvableSerializer...\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n import java.util.*;\n \n import com.fasterxml.jackson.annotation.JsonFormat;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;\n import com.fasterxml.jackson.databind.ser.impl.*;\n import com.fasterxml.jackson.databind.ser.std.*;\n import com.fasterxml.jackson.databind.type.*;\n-import com.fasterxml.jackson.databind.util.ClassUtil;\n-import com.fasterxml.jackson.databind.util.Converter;\n-import com.fasterxml.jackson.databind.util.EnumValues;\n-import com.fasterxml.jackson.databind.util.TokenBuffer;\n+import com.fasterxml.jackson.databind.util.*;\n \n /**\n  * Factory class that can provide serializers for standard JDK classes,\n                     elementTypeSerializer, elementValueSerializer);\n             } else {\n                 Object filterId = findFilterId(config, beanDesc);\n-                ser = MapSerializer.construct(config.getAnnotationIntrospector().findPropertiesToIgnore(beanDesc.getClassInfo()),\n+                MapSerializer mapSer = MapSerializer.construct(config.getAnnotationIntrospector().findPropertiesToIgnore(beanDesc.getClassInfo()),\n                     type, staticTyping, elementTypeSerializer,\n                     keySerializer, elementValueSerializer, filterId);\n+                Object suppressableValue = findSuppressableContentValue(config,\n+                        type.getContentType(), beanDesc);\n+                if (suppressableValue != null) {\n+                    mapSer = mapSer.withContentInclusion(suppressableValue);\n+                }\n+                ser = mapSer;\n             }\n         }\n         // [Issue#120]: Allow post-processing\n         return ser;\n     }\n \n+    /**\n+     * @since 2.5\n+     */\n+    protected Object findSuppressableContentValue(SerializationConfig config,\n+            JavaType contentType, BeanDescription beanDesc)\n+        throws JsonMappingException\n+    {\n+        JsonInclude.Include incl = beanDesc.findSerializationInclusionForContent(null);\n+\n+        if (incl != null) {\n+            switch (incl) {\n+            case NON_DEFAULT:\n+                // 19-Oct-2014, tatu: Not sure what this'd mean; so take it to mean \"NON_EMPTY\"...\n+                incl = JsonInclude.Include.NON_EMPTY;\n+                break;\n+            default:\n+                // all other modes actually good as is, unless we'll find better ways\n+                break;\n+            }\n+            return incl;\n+        }\n+        return null;\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Factory methods, for Arrays\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n import java.lang.reflect.Type;\n import java.util.HashMap;\n \n+import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.core.SerializableString;\n import com.fasterxml.jackson.core.io.SerializedString;\n     /**\n      * Marker object used to indicate \"do not serialize if empty\"\n      */\n-    public final static Object MARKER_FOR_EMPTY = new Object();\n-    \n+    public final static Object MARKER_FOR_EMPTY = JsonInclude.Include.NON_EMPTY;\n+\n     /*\n     /**********************************************************\n     /* Settings for accessing property value to serialize\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n import java.lang.reflect.Type;\n import java.util.*;\n \n+import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.ser.PropertyFilter;\n import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n+import com.fasterxml.jackson.databind.util.ArrayBuilders;\n \n /**\n  * Standard serializer implementation for serializing {link java.util.Map} types.\n     implements ContextualSerializer\n {\n     protected final static JavaType UNSPECIFIED_TYPE = TypeFactory.unknownType();\n-    \n+\n     /**\n      * Map-valued property being serialized with this instance\n      */\n     protected final BeanProperty _property;\n-    \n+\n     /**\n      * Set of entries to omit during serialization, if any\n      */\n      * @since 2.4\n      */\n     protected final boolean _sortKeys;\n+\n+    /**\n+     * Value that indicates suppression mechanism to use; either one of\n+     * values of {@link JsonInclude.Include}, or actual object to compare\n+     * against (\"default value\")\n+     * \n+     * @since 2.5\n+     */\n+    protected final Object _suppressableValue;\n     \n     /*\n     /**********************************************************\n     /**********************************************************\n      */\n     \n+    /**\n+     * @since 2.5\n+     */\n     @SuppressWarnings(\"unchecked\")\n     protected MapSerializer(HashSet<String> ignoredEntries,\n             JavaType keyType, JavaType valueType, boolean valueTypeIsStatic,\n         _property = null;\n         _filterId = null;\n         _sortKeys = false;\n-    }\n-\n+        _suppressableValue = null;\n+    }\n+\n+    /**\n+     * @since 2.5\n+     */\n+    protected void _ensureOverride() {\n+        if (getClass() != MapSerializer.class) {\n+            throw new IllegalStateException(\"Missing override in class \"+getClass().getName());\n+        }\n+    }\n+    \n     @SuppressWarnings(\"unchecked\")\n     protected MapSerializer(MapSerializer src, BeanProperty property,\n             JsonSerializer<?> keySerializer, JsonSerializer<?> valueSerializer,\n         _property = property;\n         _filterId = src._filterId;\n         _sortKeys = src._sortKeys;\n-    }\n-\n-    protected MapSerializer(MapSerializer src, TypeSerializer vts)\n+        _suppressableValue = src._suppressableValue;\n+    }\n+\n+    @Deprecated // since 2.5\n+    protected MapSerializer(MapSerializer src, TypeSerializer vts) {\n+        this(src, vts, src._suppressableValue);\n+    }\n+\n+    /**\n+     * @since 2.5\n+     */\n+    protected MapSerializer(MapSerializer src, TypeSerializer vts,\n+            Object suppressableValue)\n     {\n         super(Map.class, false);\n         _ignoredEntries = src._ignoredEntries;\n         _property = src._property;\n         _filterId = src._filterId;\n         _sortKeys = src._sortKeys;\n+        _suppressableValue = suppressableValue;\n     }\n \n     protected MapSerializer(MapSerializer src, Object filterId, boolean sortKeys)\n         _property = src._property;\n         _filterId = filterId;\n         _sortKeys = sortKeys;\n-    }\n-    \n+        _suppressableValue = src._suppressableValue;\n+    }\n+\n     @Override\n     public MapSerializer _withValueTypeSerializer(TypeSerializer vts) {\n-        return new MapSerializer(this, vts);\n+        if (_valueTypeSerializer == vts) {\n+            return this;\n+        }\n+        _ensureOverride();\n+        return new MapSerializer(this, vts, null);\n     }\n \n     /**\n             JsonSerializer<?> keySerializer, JsonSerializer<?> valueSerializer,\n             HashSet<String> ignored, boolean sortKeys)\n     {\n+        _ensureOverride();\n         MapSerializer ser = new MapSerializer(this, property, keySerializer, valueSerializer, ignored);\n         if (sortKeys != ser._sortKeys) {\n             ser = new MapSerializer(ser, _filterId, sortKeys);\n      * @since 2.3\n      */\n     public MapSerializer withFilterId(Object filterId) {\n-        return (_filterId == filterId) ? this : new MapSerializer(this, filterId, _sortKeys);\n-    }\n+        if (_filterId == filterId) {\n+            return this;\n+        }\n+        _ensureOverride();\n+        return new MapSerializer(this, filterId, _sortKeys);\n+    }\n+\n+    /**\n+     * Mutant factory for constructing an instance with different inclusion strategy\n+     * for content (Map values).\n+     * \n+     * @since 2.5\n+     */\n+    public MapSerializer withContentInclusion(Object suppressableValue) {\n+        if (suppressableValue == _suppressableValue) {\n+            return this;\n+        }\n+        _ensureOverride();\n+        return new MapSerializer(this, _valueTypeSerializer, suppressableValue);\n+    }                \n     \n     /**\n      * @since 2.3\n             JsonSerializer<Object> keySerializer, JsonSerializer<Object> valueSerializer,\n             Object filterId)\n     {\n-        HashSet<String> ignoredEntries = toSet(ignoredList);\n+        HashSet<String> ignoredEntries = (ignoredList == null || ignoredList.length == 0)\n+                ? null : ArrayBuilders.arrayToSet(ignoredList);\n+\n         JavaType keyType, valueType;\n         \n         if (mapType == null) {\n             ser = ser.withFilterId(filterId);\n         }\n         return ser;\n-    }\n-\n-    private static HashSet<String> toSet(String[] ignoredEntries) {\n-        if (ignoredEntries == null || ignoredEntries.length == 0) {\n-            return null;\n-        }\n-        HashSet<String> result = new HashSet<String>(ignoredEntries.length);\n-        for (String prop : ignoredEntries) {\n-            result.add(prop);\n-        }\n-        return result;\n     }\n \n     /*\n         JsonSerializer<?> keySer = null;\n         final AnnotationIntrospector intr = provider.getAnnotationIntrospector();\n         final AnnotatedMember propertyAcc = (property == null) ? null : property.getMember();\n+        Object suppressableValue = _suppressableValue;\n \n         // First: if we have a property, may have property-annotation overrides\n         if (propertyAcc != null && intr != null) {\n             serDef = intr.findContentSerializer(propertyAcc);\n             if (serDef != null) {\n                 ser = provider.serializerInstance(propertyAcc, serDef);\n+            }\n+            JsonInclude.Include incl = intr.findSerializationInclusionForContent(propertyAcc, null);\n+            if (incl != null) {\n+                suppressableValue = incl;\n             }\n         }\n         if (ser == null) {\n             sortKeys = (b != null) && b.booleanValue();\n         }\n         MapSerializer mser = withResolved(property, keySer, ser, ignored, sortKeys);\n+        if (suppressableValue != _suppressableValue) {\n+            mser = mser.withContentInclusion(suppressableValue);\n+        }\n \n         // [Issue#307]: allow filtering\n         if (property != null) {\n     {\n         jgen.writeStartObject();\n         if (!value.isEmpty()) {\n+            Object suppressableValue = _suppressableValue;\n+            if (suppressableValue == null) {\n+                if (!provider.isEnabled(SerializationFeature.WRITE_NULL_MAP_VALUES)) {\n+                    suppressableValue = JsonInclude.Include.NON_NULL;\n+                }\n+                \n+            }\n             if (_filterId != null) {\n                 serializeFilteredFields(value, jgen, provider,\n-                        findPropertyFilter(provider, _filterId, value));\n+                        findPropertyFilter(provider, _filterId, value), suppressableValue);\n                 jgen.writeEndObject();\n                 return;\n             }\n             if (_sortKeys || provider.isEnabled(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS)) {\n                 value = _orderEntries(value);\n             }\n-            if (_valueSerializer != null) {\n+            if (suppressableValue != null) {\n+// !!! TEST\n+                serializeFields(value, jgen, provider);\n+//                serializeOptionalFields(value, jgen, provider);\n+            } else if (_valueSerializer != null) {\n                 serializeFieldsUsing(value, jgen, provider, _valueSerializer);\n             } else {\n                 serializeFields(value, jgen, provider);\n     {\n         typeSer.writeTypePrefixForObject(value, jgen);\n         if (!value.isEmpty()) {\n+            Object suppressableValue = _suppressableValue;\n+            if (suppressableValue == null) {\n+                if (!provider.isEnabled(SerializationFeature.WRITE_NULL_MAP_VALUES)) {\n+                    suppressableValue = JsonInclude.Include.NON_NULL;\n+                }\n+                \n+            }\n             if (_sortKeys || provider.isEnabled(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS)) {\n                 value = _orderEntries(value);\n             }\n-            if (_valueSerializer != null) {\n+            if (suppressableValue != null) {\n+// !!! TEST\n+                serializeFields(value, jgen, provider);\n+            } else if (_valueSerializer != null) {\n                 serializeFieldsUsing(value, jgen, provider, _valueSerializer);\n             } else {\n                 serializeFields(value, jgen, provider);\n      * @since 2.3\n      */\n     public void serializeFilteredFields(Map<?,?> value, JsonGenerator jgen, SerializerProvider provider,\n-            PropertyFilter filter)\n+            PropertyFilter filter,\n+            Object suppressableValue) // since 2.5\n         throws IOException\n     {\n         final HashSet<String> ignored = _ignoredEntries;\n             }\n         }\n     }\n-    \n-    protected void serializeTypedFields(Map<?,?> value, JsonGenerator jgen, SerializerProvider provider)\n+\n+    @Deprecated // since 2.5\n+    public void serializeFilteredFields(Map<?,?> value, JsonGenerator gen, SerializerProvider provider,\n+            PropertyFilter filter) throws IOException\n+    {\n+        serializeFilteredFields(value, gen, provider, filter, null);\n+    }\n+    \n+    protected void serializeTypedFields(Map<?,?> value, JsonGenerator gen, SerializerProvider provider)\n         throws IOException\n     {\n         final JsonSerializer<Object> keySerializer = _keySerializer;\n             // First, serialize key\n             Object keyElem = entry.getKey();\n             if (keyElem == null) {\n-                provider.findNullKeySerializer(_keyType, _property).serialize(null, jgen, provider);\n+                provider.findNullKeySerializer(_keyType, _property).serialize(null, gen, provider);\n             } else {\n                 // [JACKSON-314] also may need to skip entries with null values\n                 if (skipNulls && valueElem == null) continue;\n                 // One twist: is entry ignorable? If so, skip\n                 if (ignored != null && ignored.contains(keyElem)) continue;\n-                keySerializer.serialize(keyElem, jgen, provider);\n+                keySerializer.serialize(keyElem, gen, provider);\n             }\n     \n             // And then value\n             if (valueElem == null) {\n-                provider.defaultSerializeNull(jgen);\n+                provider.defaultSerializeNull(gen);\n             } else {\n                 Class<?> cc = valueElem.getClass();\n                 JsonSerializer<Object> currSerializer;\n                     prevValueClass = cc;\n                 }\n                 try {\n-                    currSerializer.serializeWithType(valueElem, jgen, provider, _valueTypeSerializer);\n+                    currSerializer.serializeWithType(valueElem, gen, provider, _valueTypeSerializer);\n                 } catch (Exception e) {\n                     // [JACKSON-55] Need to add reference information\n                     String keyDesc = \"\"+keyElem;\n             }\n         }\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Schema related functionality\n+    /**********************************************************\n+     */\n     \n     @Override\n     public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization.java\n             return this;\n         }\n     }\n+\n+    // [databind#527]\n+    @JsonInclude(content=JsonInclude.Include.NON_NULL)\n+    static class NoNullsStringMap extends LinkedHashMap<String,String> {\n+        public NoNullsStringMap add(String key, String value) {\n+            put(key, value);\n+            return this;\n+        }\n+    }\n     \n     /*\n     /**********************************************************\n         assertEquals(aposToQuotes(\"[{'answer':42}]\"), json);\n     }        \n \n+    // [databind#527]\n     public void testNonNullValueMap() throws IOException\n+    {\n+        String json = MAPPER.writeValueAsString(new NoNullsStringMap()\n+            .add(\"a\", \"foo\")\n+            .add(\"b\", null)\n+            .add(\"c\", \"bar\"));\n+        assertEquals(aposToQuotes(\"{'stuff':{'a':'foo','c':'bar'}}\"), json);\n+    }\n+\n+    // [databind#527]\n+    public void testNonNullValueMapViaProp() throws IOException\n     {\n         String json = MAPPER.writeValueAsString(new NoNullValuesMapContainer()\n             .add(\"a\", \"foo\")", "timestamp": 1413778678, "metainfo": ""}