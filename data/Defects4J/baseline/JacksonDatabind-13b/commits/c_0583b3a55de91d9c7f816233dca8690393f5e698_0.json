{"sha": "0583b3a55de91d9c7f816233dca8690393f5e698", "log": "Add access to type deserializer construction via DeserializationConfig", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n import com.fasterxml.jackson.databind.cfg.MapperConfigBase;\n import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedClass;\n import com.fasterxml.jackson.databind.introspect.ClassIntrospector;\n import com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector;\n import com.fasterxml.jackson.databind.introspect.VisibilityChecker;\n+import com.fasterxml.jackson.databind.jsontype.NamedType;\n import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\n import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n import com.fasterxml.jackson.databind.type.ClassKey;\n     public final JsonNodeFactory getNodeFactory() {\n         return _nodeFactory;\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Introspection methods\n     public <T extends BeanDescription> T introspectForBuilder(JavaType type) {\n         return (T) getClassIntrospector().forDeserializationWithBuilder(this, type, this);\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Support for polymorphic type handling\n+    /**********************************************************\n+     */\n+    \n+    /**\n+     * Helper method that is needed to properly handle polymorphic referenced\n+     * types, such as types referenced by {@link java.util.concurrent.atomic.AtomicReference},\n+     * or various \"optional\" types.\n+     * \n+     * @since 2.4\n+     */\n+    public TypeDeserializer findTypeDeserializer(JavaType baseType)\n+        throws JsonMappingException\n+    {\n+        BeanDescription bean = introspectClassAnnotations(baseType.getRawClass());\n+        AnnotatedClass ac = bean.getClassInfo();\n+        TypeResolverBuilder<?> b = getAnnotationIntrospector().findTypeResolver(this, ac, baseType);\n+\n+        /* Ok: if there is no explicit type info handler, we may want to\n+         * use a default. If so, config object knows what to use.\n+         */\n+        Collection<NamedType> subtypes = null;\n+        if (b == null) {\n+            b = getDefaultTyper(baseType);\n+            if (b == null) {\n+                return null;\n+            }\n+        } else {\n+            subtypes = getSubtypeResolver().collectAndResolveSubtypes(ac, this, getAnnotationIntrospector());\n+        }\n+        /* 04-May-2014, tatu: When called from DeserializerFactory, additional code like\n+         *   this is invoked. But here we do not actually have access to mappings, so not\n+         *   quite sure what to do, if anything. May need to revisit if the underlying\n+         *   problem re-surfaces...\n+         */\n+        /*\n+        if ((b.getDefaultImpl() == null) && baseType.isAbstract()) {\n+            JavaType defaultType = mapAbstractType(config, baseType);\n+            if (defaultType != null && defaultType.getRawClass() != baseType.getRawClass()) {\n+                b = b.defaultImpl(defaultType.getRawClass());\n+            }\n+        }\n+        */\n+        return b.buildTypeDeserializer(this, baseType, subtypes);\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n             JavaType baseType)\n         throws JsonMappingException\n     {\n-        Class<?> cls = baseType.getRawClass();\n-        BeanDescription bean = config.introspectClassAnnotations(cls);\n+        BeanDescription bean = config.introspectClassAnnotations(baseType.getRawClass());\n         AnnotatedClass ac = bean.getClassInfo();\n         AnnotationIntrospector ai = config.getAnnotationIntrospector();\n         TypeResolverBuilder<?> b = ai.findTypeResolver(config, ac, baseType);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n     extends ContainerDeserializerBase<Collection<Object>>\n     implements ContextualDeserializer\n {\n-    private static final long serialVersionUID = -2003828398549708958L;\n+    private static final long serialVersionUID = 3917273725180652224L;\n \n     // // Configuration\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n         }\n         return existingDeserializer;\n     }\n-\n+    \n     /*\n     /**********************************************************\n     /* Helper methods for sub-classes, problem reporting", "timestamp": 1399271324, "metainfo": ""}