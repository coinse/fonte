{"sha": "47ac6bd51e63b0cbfef2e431a94193433d15077a", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n             BeanProperty property)\n         throws JsonMappingException\n     {\n-        if (deser == null) {\n-            return deser;\n-        }\n-        if (deser instanceof ContextualDeserializer) {\n-            deser = ((ContextualDeserializer) deser).createContextual(this, property);\n+        if (deser != null) {\n+            if (deser instanceof ContextualDeserializer) {\n+                deser = ((ContextualDeserializer) deser).createContextual(this, property);\n+            }\n         }\n         return deser;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java\n     /* Other accessors\n     /**********************************************************\n      */\n+\n+    /**\n+     * Method for accessing type of values this deserializer produces.\n+     * Note that this information is not guaranteed to be exact -- it\n+     * may be a more generic (super-type) -- but it should not be\n+     * incorrect (return a non-related type).\n+     *<p>\n+     * Default implementation will return null, which means almost same\n+     * same as returning <code>Object.class</code> would; that is, that\n+     * nothing is known about handled type.\n+     *<p>\n+     * @since 2.3\n+     */\n+    public Class<?> handledType() { return null; }\n     \n     /**\n      * Method that can be called to determine value to be used for\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n             BeanProperty property)\n         throws JsonMappingException\n     {\n-        if (ser == null) {\n-            return ser;\n-        }\n-        if (ser instanceof ContextualSerializer) {\n-            ser = ((ContextualSerializer) ser).createContextual(this, property);\n+        if (ser != null) {\n+            if (ser instanceof ContextualSerializer) {\n+                ser = ((ContextualSerializer) ser).createContextual(this, property);\n+            }\n         }\n         return ser;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java\n  * type handling deserialization. If so, there is no real deserializer associated\n  * with nominal type, just {@link TypeDeserializer}; and any calls that do not\n  * pass such resolver will result in an error.\n- * \n- * @author tatu\n  */\n public class AbstractDeserializer\n     extends JsonDeserializer<Object>\n     /**********************************************************\n      */\n \n+    @Override\n+    public Class<?> handledType() {\n+        return _baseType.getRawClass();\n+    }\n+    \n     @Override\n     public boolean isCachable() { return true; }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n             }\n             return deserializeFromObject(jp, ctxt);\n         default:\n-            throw ctxt.mappingException(getBeanClass());\n+            throw ctxt.mappingException(handledType());\n         }\n     }\n \n     protected Object _missingToken(JsonParser jp, DeserializationContext ctxt)\n         throws JsonProcessingException\n     {\n-        throw ctxt.endOfInputException(getBeanClass());\n+        throw ctxt.endOfInputException(handledType());\n     }\n     \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n     @Override\n     public boolean isCachable() { return true; }\n \n+    @Override\n+    public Class<?> handledType() {\n+        return _beanType.getRawClass();\n+    }\n+    \n     /**\n      * Overridden to return true for those instances that are\n      * handling value for which Object Identity handling is enabled\n         }\n         return names;\n     }\n-    \n+\n+    /**\n+     * @deprecated Since 2.3, use {@link #handledType()} instead\n+     */\n+    @Deprecated\n     public final Class<?> getBeanClass() { return _beanType.getRawClass(); }\n \n-    @Override public JavaType getValueType() { return _beanType; }\n+    @Override\n+    public JavaType getValueType() { return _beanType; }\n \n     /**\n      * Accessor for iterating over properties this deserializer uses; with\n         final Object id;\n \n         // Ok, this is bit ridiculous; let's see if conversion is needed:\n-        if ((idDeser instanceof StdDeserializer)\n-            && ((StdDeserializer<?>) idDeser).getValueClass() == rawId.getClass()) {\n+        if (idDeser.handledType() == rawId.getClass()) {\n             // nope: already same type\n             id = rawId;\n         } else {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java\n         case END_OBJECT: // added to resolve [JACKSON-319], possible related issues\n             return finishBuild(ctxt, deserializeFromObject(jp, ctxt));\n         default:\n-            throw ctxt.mappingException(getBeanClass());\n+            throw ctxt.mappingException(handledType());\n         }\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/TypeWrappedDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/TypeWrappedDeserializer.java\n     }\n \n     @Override\n+    public Class<?> handledType() {\n+        return _deserializer.handledType();\n+    }\n+    \n+    @Override\n     public Object deserialize(JsonParser jp, DeserializationContext ctxt)\n             throws IOException, JsonProcessingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n             ValueInstantiator valueInstantiator,\n             JsonDeserializer<Object> delegateDeser)\n     {\n-        super(collectionType.getRawClass());\n+        super(collectionType);\n         _collectionType = collectionType;\n         _valueDeserializer = valueDeser;\n         _valueTypeDeserializer = valueTypeDeser;\n      */\n     protected CollectionDeserializer(CollectionDeserializer src)\n     {\n-        super(src._valueClass);\n+        super(src._collectionType);\n         _collectionType = src._collectionType;\n         _valueDeserializer = src._valueDeserializer;\n         _valueTypeDeserializer = src._valueTypeDeserializer;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java\n public abstract class ContainerDeserializerBase<T>\n     extends StdDeserializer<T>\n {\n+    protected ContainerDeserializerBase(JavaType selfType)\n+    {\n+        super(selfType);\n+    }\n+\n+    /**\n+     * @deprecated Since 2.3 use one that takes {@link JavaType}\n+     */\n+    @Deprecated\n     protected ContainerDeserializerBase(Class<?> selfType)\n     {\n         super(selfType);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java\n     \n     private static Class<?> _figureType(JsonDeserializer<?> deser)\n     {\n-        if (deser instanceof StdDeserializer<?>) {\n-            return ((StdDeserializer<?>) deser).getValueClass();\n+        Class<?> cls = deser.handledType();\n+        if (cls != null) {\n+            return cls;\n         }\n         return Object.class;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java\n import java.io.IOException;\n \n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.node.*;\n     @Override\n     public JsonNode getNullValue() {\n         return NullNode.getInstance();\n+    }\n+\n+    @Override\n+    public Class<?> handledType() {\n+        return JsonNode.class;\n     }\n \n     /*\n         //case END_OBJECT:\n         //case END_ARRAY:\n         default:\n-            throw ctxt.mappingException(getValueClass());\n+            throw ctxt.mappingException(handledType());\n         }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n             KeyDeserializer keyDeser, JsonDeserializer<Object> valueDeser,\n             TypeDeserializer valueTypeDeser)\n     {\n-        super(Map.class);\n+        super(mapType);\n         _mapType = mapType;\n         _keyDeserializer = keyDeser;\n         _valueDeserializer = valueDeser;\n      */\n     protected MapDeserializer(MapDeserializer src)\n     {\n-        super(src._valueClass);\n+        super(src._mapType);\n         _mapType = src._mapType;\n         _keyDeserializer = src._keyDeserializer;\n         _valueDeserializer = src._valueDeserializer;\n             TypeDeserializer valueTypeDeser,\n             HashSet<String> ignorable)\n     {\n-        super(src._valueClass);\n+        super(src._mapType);\n         _mapType = src._mapType;\n         _keyDeserializer = keyDeser;\n         _valueDeserializer = valueDeser;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java\n     public ObjectArrayDeserializer(ArrayType arrayType,\n             JsonDeserializer<Object> elemDeser, TypeDeserializer elemTypeDeser)\n     {\n-        super(Object[].class);\n+        super(arrayType);\n         _arrayType = arrayType;\n         _elementClass = arrayType.getContentType().getRawClass();\n         _untyped = (_elementClass == Object.class);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java\n \n import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.core.JsonProcessingException;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.ContextualDeserializer;\n import com.fasterxml.jackson.databind.deser.ResolvableDeserializer;\n         return _delegateDeserializer;\n     }\n \n+    @Override\n+    public Class<?> handledType() {\n+        return _delegateDeserializer.handledType();\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Serialization\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.JsonParser.NumberType;\n import com.fasterxml.jackson.core.io.NumberInput;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n     protected StdDeserializer(JavaType valueType) {\n         _valueClass = (valueType == null) ? null : valueType.getRawClass();\n     }\n-    \n+\n     /*\n     /**********************************************************\n+    /* Accessors\n+    /**********************************************************\n+     */\n+    \n+    @Override\n+    public Class<?> handledType() {\n+        return _valueClass;\n+    }\n+    \n+    /*\n+    /**********************************************************\n     /* Extended API\n     /**********************************************************\n      */\n \n-    public Class<?> getValueClass() { return _valueClass; }\n+    /**\n+     * @deprecated Since 2.3 use {@link #handledType} instead\n+     */\n+    @Deprecated\n+    public final Class<?> getValueClass() { return _valueClass; }\n \n     /**\n      * Exact structured type deserializer handles, if known.\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n             ValueInstantiator valueInstantiator, JsonDeserializer<?> delegateDeser,\n             JsonDeserializer<?> valueDeser)\n     {\n-        super(collectionType.getRawClass());\n+        super(collectionType);\n         _collectionType = collectionType;\n         _valueDeserializer = (JsonDeserializer<String>) valueDeser;\n         _valueInstantiator = valueInstantiator;", "timestamp": 1378439700, "metainfo": ""}