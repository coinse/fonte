{"sha": "20d53b08cf263f0ef8894ca325f619db600e2f99", "log": "Fix #188, probs with ObjectId, 'alwaysAsId' references", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java\n \n import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.core.io.SerializedString;\n+\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer;\n import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;\n import com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer;\n-import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;\n import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;\n import com.fasterxml.jackson.databind.util.NameTransformer;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/WritableObjectId.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/WritableObjectId.java\n package com.fasterxml.jackson.databind.ser.impl;\n \n+import java.io.IOException;\n+\n import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n-import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.core.JsonGenerationException;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.io.SerializedString;\n+\n+import com.fasterxml.jackson.databind.SerializerProvider;\n \n /**\n  * Simple value container used to keep track of Object Ids during\n public final class WritableObjectId\n {\n     public final ObjectIdGenerator<?> generator;\n-    \n-    public JsonSerializer<Object> serializer;\n \n     public Object id;\n+\n+    protected boolean idWritten = false;\n     \n     public WritableObjectId(ObjectIdGenerator<?> generator) {\n         this.generator = generator;\n     }\n+    \n+    public boolean writeAsId(JsonGenerator jgen, SerializerProvider provider, ObjectIdWriter w)\n+        throws IOException, JsonGenerationException\n+    {\n+        if (id != null && (idWritten || w.alwaysAsId)) {\n+            w.serializer.serialize(id, jgen, provider);\n+            return true;\n+        }\n+        return false;\n+    }\n+    \n+    public Object generateId(Object forPojo) {\n+        return (id = generator.generateId(forPojo));\n+    }\n+\n+    public void writeAsField(JsonGenerator jgen, SerializerProvider provider,\n+            ObjectIdWriter w)\n+        throws IOException, JsonGenerationException\n+    {\n+        SerializedString name = w.propertyName;\n+        idWritten = true;\n+        if (name != null) {\n+            jgen.writeFieldName(name);\n+            w.serializer.serialize(id, jgen, provider);\n+        }\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n import com.fasterxml.jackson.annotation.JsonFormat;\n import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n+\n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.io.SerializedString;\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n         throws IOException, JsonGenerationException\n     {\n         final ObjectIdWriter w = _objectIdWriter;\n-        WritableObjectId oid = provider.findObjectId(bean, w.generator);\n-        Object id = oid.id;\n-        \n-        if (id != null) { // have seen before; serialize just id\n-            oid.serializer.serialize(id, jgen, provider);\n+        WritableObjectId objectId = provider.findObjectId(bean, w.generator);\n+        // If possible, write as id already\n+        if (objectId.writeAsId(jgen, provider, w)) {\n             return;\n         }\n-        // if not, bit more work:\n-        oid.serializer = w.serializer;\n-        oid.id = id = oid.generator.generateId(bean);\n-        // possibly. Or maybe not:\n-        if (w.alwaysAsId) { \n-            oid.serializer.serialize(id, jgen, provider);\n+        // If not, need to inject the id:\n+        Object id = objectId.generateId(bean);\n+        if (w.alwaysAsId) {\n+            w.serializer.serialize(id, jgen, provider);\n             return;\n         }\n-        // If not, need to inject the id:\n         if (startEndObject) {\n             jgen.writeStartObject();\n         }\n-        SerializedString name = w.propertyName;\n-        if (name != null) {\n-            jgen.writeFieldName(name);\n-            w.serializer.serialize(id, jgen, provider);\n-        }\n+        objectId.writeAsField(jgen, provider, w);\n         if (_propertyFilterId != null) {\n             serializeFieldsFiltered(bean, jgen, provider);\n         } else {\n         throws IOException, JsonGenerationException\n     {\n         final ObjectIdWriter w = _objectIdWriter;\n-        WritableObjectId oid = provider.findObjectId(bean, w.generator);\n-        Object id = oid.id;\n-        \n-        if (id != null) { // have seen before; serialize just id\n-            oid.serializer.serialize(id, jgen, provider);\n+        WritableObjectId objectId = provider.findObjectId(bean, w.generator);\n+        // If possible, write as id already\n+        if (objectId.writeAsId(jgen, provider, w)) {\n             return;\n         }\n-        // if not, bit more work:\n-        oid.serializer = w.serializer;\n-        oid.id = id = oid.generator.generateId(bean);\n-        \n+        // If not, need to inject the id:\n+        Object id = objectId.generateId(bean);\n+        if (w.alwaysAsId) {\n+            w.serializer.serialize(id, jgen, provider);\n+            return;\n+        }\n         String typeStr = (_typeId == null) ? null :_customTypeId(bean);\n         if (typeStr == null) {\n             typeSer.writeTypePrefixForObject(bean, jgen);\n         } else {\n             typeSer.writeCustomTypePrefixForObject(bean, jgen, typeStr);\n         }\n-\n-        // Very first thing: inject the id property\n-        SerializedString name = w.propertyName;\n-        if (name != null) {\n-            jgen.writeFieldName(name);\n-            w.serializer.serialize(id, jgen, provider);\n-        }\n-\n+        objectId.writeAsField(jgen, provider, w);\n         if (_propertyFilterId != null) {\n             serializeFieldsFiltered(bean, jgen, provider);\n         } else {", "timestamp": 1362981383, "metainfo": ""}