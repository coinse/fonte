{"sha": "f078ebb77005b3ab60e0bc3eb472de62d6be036f", "log": "Add a text for #572", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java\n     @Override\n     public JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException\n     {\n+System.err.println(\"DEBUG: createContextual... prop = \"+property);    \t\n         if (property != null) {\n             JsonFormat.Value format = prov.getAnnotationIntrospector().findFormat((Annotated) property.getMember());\n             if (format != null) {\n     \n     @Override\n     public final void serialize(Enum<?> en, JsonGenerator jgen, SerializerProvider provider)\n-        throws IOException, JsonGenerationException\n+        throws IOException\n     {\n         // [JACKSON-684]: serialize as index?\n         if (_serializeAsIndex(provider)) {\n     \n     @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-            throws JsonMappingException\n+        throws JsonMappingException\n     {\n         // [JACKSON-684]: serialize as index?\n         if (visitor.getProvider().isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX)) {\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestEnumSerialization572.java\n+package com.fasterxml.jackson.failing;\n+\n+import com.fasterxml.jackson.annotation.JsonFormat;\n+import com.fasterxml.jackson.annotation.JsonFormat.Shape;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+/**\n+ * Unit tests for verifying serialization of simple basic non-structured\n+ * types; primitives (and/or their wrappers), Strings.\n+ */\n+public class TestEnumSerialization572 extends BaseMapTest\n+{\n+    @JsonFormat(shape=JsonFormat.Shape.OBJECT)\n+    static enum PoNUM {\n+        A(\"a1\"), B(\"b2\");\n+\n+        @JsonProperty\n+        protected final String value;\n+        \n+        private PoNUM(String v) { value = v; }\n+\n+        public String getValue() { return value; }\n+    }\n+\n+    // for [databind#572]\n+    static class PoOverrideAsString\n+    {\n+        @JsonFormat(shape=Shape.STRING)\n+    \tpublic PoNUM value = PoNUM.B;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Tests\n+    /**********************************************************\n+     */\n+\n+    private final ObjectMapper mapper = new ObjectMapper();\n+\n+    // [databind#572]\n+    public void testOverrideEnum() throws Exception\n+    {\n+    \tassertEquals(\"{\\\"value\\\":\\\"B\\\"}\", mapper.writeValueAsString(new PoOverrideAsString()));\n+    }\n+}", "timestamp": 1413081572, "metainfo": ""}