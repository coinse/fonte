{"sha": "4f90dbca87b680cb10abdb0df5129491da3486d2", "log": "Further improvements to contextualization for deser side", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n         JsonDeserializer<Object> deser = _cache.findValueDeserializer(this,\n                 _factory, type);\n         if (deser != null) {\n-            deser = (JsonDeserializer<Object>) handleContextualization(deser, property);\n+            deser = (JsonDeserializer<Object>) handleSecondaryContextualization(deser, property);\n         }\n         return deser;\n     }\n         if (deser == null) { // can this occur?\n             return null;\n         }\n-        deser = (JsonDeserializer<Object>) handleContextualization(deser, null);\n+        deser = (JsonDeserializer<Object>) handleSecondaryContextualization(deser, null);\n         TypeDeserializer typeDeser = _factory.findTypeDeserializer(_config, type);\n         if (typeDeser != null) {\n             // important: contextualize to indicate this is for root value\n      */\n \n     /**\n-     * Method that should be called to take of possible calls to resolve\n-     * {@link ContextualDeserializer} with given property context (if any;\n-     * none for root-value deserializers).\n-     * \n-     * @param property Property for which deserializer is used, if any; null\n-     *    when deserializing root values\n+     * Method called for primary property deserializers (ones\n+     * directly created to deal with an annotatable POJO property),\n+     * to handle details of resolving\n+     * {@link ContextualDeserializer} with given property context.\n+     * \n+     * @param property Property for which the given primary deserializer is used; never null.\n      * \n      * @since 2.3\n      */\n-    public JsonDeserializer<?> handleContextualization(JsonDeserializer<?> deser,\n+    public JsonDeserializer<?> handlePrimaryContextualization(JsonDeserializer<?> deser,\n             BeanProperty property)\n         throws JsonMappingException\n     {\n         return deser;\n     }\n \n+    /**\n+     * Method called for secondary property deserializers (ones\n+     * NOT directly created to deal with an annotatable POJO property,\n+     * but instead created as a component -- such as value deserializers\n+     * for structured types, or deserializers for root values)\n+     * to handle details of resolving\n+     * {@link ContextualDeserializer} with given property context.\n+     * Given that these serializers are not directly related to given property\n+     * (or, in case of root value property, to any property), annotations\n+     * accessible may or may not be relevant.\n+     * \n+     * @param property Property for which deserializer is used, if any; null\n+     *    when deserializing root values\n+     * \n+     * @since 2.3\n+     */\n+    public JsonDeserializer<?> handleSecondaryContextualization(JsonDeserializer<?> deser,\n+            BeanProperty property)\n+        throws JsonMappingException\n+    {\n+        if (deser != null) {\n+            if (deser instanceof ContextualDeserializer) {\n+                deser = ((ContextualDeserializer) deser).createContextual(this, property);\n+            }\n+        }\n+        return deser;\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Parsing methods that may use reusable/-cyclable objects\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n                 prop = prop.withValueDeserializer(deser);\n             } else { // may need contextual version\n                 JsonDeserializer<Object> deser = prop.getValueDeserializer();\n-                JsonDeserializer<?> cd = ctxt.handleContextualization(deser, prop);\n+                /* Important! This is the only place where actually handle \"primary\"\n+                 * property deserializers -- call is different from other places.\n+                 */\n+                JsonDeserializer<?> cd = ctxt.handlePrimaryContextualization(deser, prop);\n                 if (cd != deser) {\n                     prop = prop.withValueDeserializer(cd);\n                 }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n             valueDeser = ctxt.findContextualValueDeserializer(\n                     _collectionType.getContentType(), property);\n         } else { // if directly assigned, probably not yet contextual, so:\n-            valueDeser = ctxt.handleContextualization(valueDeser, property);\n+            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property);\n         }\n         // and finally, type deserializer needs context as well\n         TypeDeserializer valueTypeDeser = _valueTypeDeserializer;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java\n             BeanProperty property)\n         throws JsonMappingException\n     {\n-        JsonDeserializer<?> del = ctxt.handleContextualization(_delegatee, property);\n+        JsonDeserializer<?> del = ctxt.handleSecondaryContextualization(_delegatee, property);\n         if (del == _delegatee) {\n             return this;\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java\n         if (vd == null) {\n             vd = ctxt.findContextualValueDeserializer(_mapType.getContentType(), property);\n         } else { // if directly assigned, probably not yet contextual, so:\n-            vd = ctxt.handleContextualization(vd, property);\n+            vd = ctxt.handleSecondaryContextualization(vd, property);\n         }\n         TypeDeserializer vtd = _valueTypeDeserializer;\n         if (vtd != null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java\n         if (deser == null) {\n             deser = ctxt.findContextualValueDeserializer(_enumType, property);\n         } else { // if directly assigned, probably not yet contextual, so:\n-            deser = ctxt.handleContextualization(deser, property);\n+            deser = ctxt.handleSecondaryContextualization(deser, property);\n         }\n         return withDeserializer(deser);\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n         if (vd == null) {\n             vd = ctxt.findContextualValueDeserializer(_mapType.getContentType(), property);\n         } else { // if directly assigned, probably not yet contextual, so:\n-            vd = ctxt.handleContextualization(vd, property);\n+            vd = ctxt.handleSecondaryContextualization(vd, property);\n         }\n         TypeDeserializer vtd = _valueTypeDeserializer;\n         if (vtd != null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java\n         if (deser == null) {\n             deser = ctxt.findContextualValueDeserializer(_arrayType.getContentType(), property);\n         } else { // if directly assigned, probably not yet contextual, so:\n-            deser = ctxt.handleContextualization(deser, property);\n+            deser = ctxt.handleSecondaryContextualization(deser, property);\n         }\n         TypeDeserializer elemTypeDeser = _elementTypeDeserializer;\n         if (elemTypeDeser != null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java\n     {\n         // First: if already got serializer to delegate to, contextualize it:\n         if (_delegateDeserializer != null) {\n-            JsonDeserializer<?> deser = ctxt.handleContextualization(_delegateDeserializer, property);\n+            JsonDeserializer<?> deser = ctxt.handleSecondaryContextualization(_delegateDeserializer, property);\n             if (deser != _delegateDeserializer) {\n                 return withDelegate(_converter, _delegateType, deser);\n             }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java\n         if (deser == null) {\n             deser = ctxt.findContextualValueDeserializer(ctxt.constructType(String.class), property);\n         } else { // if directly assigned, probably not yet contextual, so:\n-            deser = ctxt.handleContextualization(deser, property);\n+            deser = ctxt.handleSecondaryContextualization(deser, property);\n         }\n         // Ok ok: if all we got is the default String deserializer, can just forget about it\n         if (deser != null && this.isDefaultDeserializer(deser)) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n                 valueDeser = ctxt.findContextualValueDeserializer( _collectionType.getContentType(), property);\n             }\n         } else { // if directly assigned, probably not yet contextual, so:\n-            valueDeser = ctxt.handleContextualization(valueDeser, property);\n+            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property);\n         } \n         if (isDefaultDeserializer(valueDeser)) {\n             valueDeser = null;", "timestamp": 1378442753, "metainfo": ""}