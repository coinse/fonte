{"sha": "87e4661193cb9f55ab2bf5ee469168c3fdd7037b", "log": "Fix #635", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n         return ((rawKeyType == String.class || rawKeyType == Object.class)\n                 && isDefaultKeyDeserializer(keyDeser));\n     }\n-    \n+\n     public void setIgnorableProperties(String[] ignorable) {\n         _ignorableProperties = (ignorable == null || ignorable.length == 0) ?\n             null : ArrayBuilders.arrayToSet(ignorable);\n     /**\n      * Turns out that these are expensive enough to create so that caching\n      * does make sense.\n+     *<p>\n+     * IMPORTANT: but, note, that instances CAN NOT BE CACHED if there is\n+     * a value type deserializer; this caused an issue with 2.4.4 of\n+     * JAXB Annotations (failing a test).\n+     * It is also possible that some other settings could make deserializers\n+     * un-cacheable; but on the other hand, caching can make a big positive\n+     * difference with performance... so it's a hard choice.\n      * \n      * @since 2.4.4\n      */\n     @Override\n-    public boolean isCachable() { return true; }\n+    public boolean isCachable() {\n+        return (_valueTypeDeserializer == null) && (_ignorableProperties == null);\n+    }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n         throw JsonMappingException.wrapWithPath(t, ref, key);\n     }\n \n-    private void handleUnresolvedReference(JsonParser jp, MapReferringAccumulator accumulator, Object key,\n-            UnresolvedForwardReference reference)\n+    private void handleUnresolvedReference(JsonParser jp, MapReferringAccumulator accumulator,\n+            Object key, UnresolvedForwardReference reference)\n         throws JsonMappingException\n     {\n         if (accumulator == null) {\n         reference.getRoid().appendReferring(referring);\n     }\n \n-    private final static class MapReferringAccumulator  {\n+    private final static class MapReferringAccumulator {\n         private final Class<?> _valueType;\n         private Map<Object,Object> _result;\n         /**\n         public final Map<Object, Object> next = new LinkedHashMap<Object, Object>();\n         public final Object key;\n         \n-        private MapReferring(MapReferringAccumulator parent, UnresolvedForwardReference ref,\n+        protected MapReferring(MapReferringAccumulator parent, UnresolvedForwardReference ref,\n                 Class<?> valueType, Object key)\n         {\n             super(ref, valueType);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleFilterProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleFilterProvider.java\n     extends FilterProvider\n     implements java.io.Serializable // since 2.1\n {\n-    // for 2.3.0\n-    private static final long serialVersionUID = -6305772546718366447L;\n+    // for 2.5+\n+    private static final long serialVersionUID = 1L;\n \n     /**\n      * Mappings from ids to filters.", "timestamp": 1416954276, "metainfo": ""}