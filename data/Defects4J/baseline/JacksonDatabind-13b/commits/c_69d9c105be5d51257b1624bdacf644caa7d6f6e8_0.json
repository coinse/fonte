{"sha": "69d9c105be5d51257b1624bdacf644caa7d6f6e8", "log": "Bit of refactoring to allow easier access to find wrapper name in use (if any)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n  * This way added methods will not break backwards compatibility of custom annotation\n  * introspectors.\n  */\n-public abstract class AnnotationIntrospector implements Versioned\n+@SuppressWarnings(\"serial\")\n+public abstract class AnnotationIntrospector\n+    implements Versioned, java.io.Serializable\n {    \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java\n      * Method to get declared type of the property.\n      */\n     public JavaType getType();\n-\n+    \n     /**\n      * Whether value for property is marked as required using\n      * annotations or associated schema.\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n          */\n         AnnotatedMethod am = beanDesc.findMethod(\"initCause\", INIT_CAUSE_PARAMS);\n         if (am != null) { // should never be null\n-            SimpleBeanPropertyDefinition propDef = new SimpleBeanPropertyDefinition(am, \"cause\");\n+            SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(ctxt.getConfig(), am, \"cause\");\n             SettableBeanProperty prop = constructSettableProperty(ctxt, beanDesc, propDef,\n                     am.getGenericParameterType(0));\n             if (prop != null) {\n                 } else {\n                     genericType = m.getRawType();\n                 }\n-                SimpleBeanPropertyDefinition propDef = new SimpleBeanPropertyDefinition(m);\n+                SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(\n+                \t\tctxt.getConfig(), m);\n                 builder.addBackReferenceProperty(name, constructSettableProperty(\n                         ctxt, beanDesc, propDef, genericType));\n             }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n                 propDef.isRequired());\n     }\n \n-    /*\n     @Deprecated // since 2.2\n     protected SettableBeanProperty(String propName,\n             JavaType type, TypeDeserializer typeDeser, Annotations contextAnnotations)\n     {\n         this(propName, type, typeDeser, contextAnnotations, false);\n     }\n-    */\n     \n     protected SettableBeanProperty(String propName,\n             JavaType type, TypeDeserializer typeDeser, Annotations contextAnnotations,\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n \n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n import com.fasterxml.jackson.databind.BeanProperty;\n+import com.fasterxml.jackson.databind.PropertyName;\n import com.fasterxml.jackson.databind.util.Named;\n \n /**\n      * annotations or naming strategy.\n      */\n     public abstract String getInternalName();\n+    \n+    /**\n+     * Accessor for finding wrapper name to use for property (if any).\n+     * \n+     * @since 2.2\n+     */\n+    public abstract PropertyName getWrapperName();\n \n     /**\n      * Accessor that can be called to check whether property was included\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n package com.fasterxml.jackson.databind.introspect;\n \n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n+import com.fasterxml.jackson.databind.PropertyName;\n \n /**\n  * Helper class used for aggregating information about a single\n          */\n         return getName().compareTo(other.getName());\n     }\n-    \n-    /*\n-    /**********************************************************\n-    /* BeanPropertyDefinition implementation\n+\n+    /*\n+    /**********************************************************\n+    /* BeanPropertyDefinition implementation, name/type\n     /**********************************************************\n      */\n \n \n     @Override\n     public String getInternalName() { return _internalName; }\n+\n+    @Override\n+    public PropertyName getWrapperName() {\n+    \t/* 13-Mar-2013, tatu: Accessing via primary member SHOULD work,\n+    \t *   due to annotation merging. However, I have seen some problems\n+    \t *   with this access (for other annotations) so will leave full\n+    \t *   traversal code in place just in case.\n+    \t */\n+    \tAnnotatedMember member = getPrimaryMember();\n+    \treturn (member == null) ? null : _annotationIntrospector.findWrapperName(member);\n+    \t/*\n+        return fromMemberAnnotations(new WithMember<PropertyName>() {\n+            @Override\n+            public PropertyName withMember(AnnotatedMember member) {\n+                return _annotationIntrospector.findWrapperName(member);\n+            }\n+        });\n+        */\n+    }\n \n     @Override\n     public boolean isExplicitlyIncluded() {\n                 ;\n     }\n \n+    /*\n+    /**********************************************************\n+    /* BeanPropertyDefinition implementation, accessor access\n+    /**********************************************************\n+     */\n     \n     @Override\n     public boolean hasGetter() { return _getters != null; }\n--- a/src/main/java/com/fasterxml/jackson/databind/util/SimpleBeanPropertyDefinition.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/SimpleBeanPropertyDefinition.java\n package com.fasterxml.jackson.databind.util;\n \n-import com.fasterxml.jackson.databind.introspect.AnnotatedField;\n-import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n-import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;\n-import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;\n-import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\n+import com.fasterxml.jackson.databind.AnnotationIntrospector;\n+import com.fasterxml.jackson.databind.PropertyName;\n+import com.fasterxml.jackson.databind.cfg.MapperConfig;\n+import com.fasterxml.jackson.databind.introspect.*;\n \n /**\n  * Simple immutable {@link BeanPropertyDefinition} implementation that can\n public class SimpleBeanPropertyDefinition\n     extends BeanPropertyDefinition\n {\n+\tprotected final AnnotationIntrospector _introspector;\n+\t\n     /**\n      * Member that defines logical property. Assumption is that it\n      * should be a 'simple' accessor; meaning a zero-argument getter,\n     /* Construction\n     /**********************************************************\n      */\n-    \n+\n+    /**\n+     * @since 2.2 Use {@link #construct} instead\n+     */\n+    @Deprecated\n     public SimpleBeanPropertyDefinition(AnnotatedMember member) {\n-        this(member, member.getName());\n-    }\n-\n+    \tthis(member, member.getName(), null);\n+    }\n+\n+    /**\n+     * @since 2.2 Use {@link #construct} instead\n+     */\n+    @Deprecated\n     public SimpleBeanPropertyDefinition(AnnotatedMember member, String name) {\n+    \tthis(member, name, null);\n+    }\n+    \n+    private SimpleBeanPropertyDefinition(AnnotatedMember member, String name,\n+    \t\tAnnotationIntrospector intr) {\n+        _introspector = intr;\n         _member = member;\n         _name = name;\n     }\n \n+    /**\n+     * @since 2.2\n+     */\n+    public static SimpleBeanPropertyDefinition construct(MapperConfig<?> config,\n+    \t\tAnnotatedMember member) {\n+    \treturn new SimpleBeanPropertyDefinition(member, member.getName(),\n+    \t\t\tconfig.getAnnotationIntrospector());\n+    }\n+    \n+    /**\n+     * @since 2.2\n+     */\n+    public static SimpleBeanPropertyDefinition construct(MapperConfig<?> config,\n+    \t\tAnnotatedMember member, String name) {\n+    \treturn new SimpleBeanPropertyDefinition(member, name, config.getAnnotationIntrospector());\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Fluent factories\n         if (_name.equals(newName)) {\n             return this;\n         }\n-        return new SimpleBeanPropertyDefinition(_member, newName);\n+        return new SimpleBeanPropertyDefinition(_member, newName, _introspector);\n     }\n     \n     /*\n     @Override\n     public String getInternalName() { return getName(); }\n \n+    @Override\n+    public PropertyName getWrapperName() {\n+    \treturn (_introspector == null) ? null : _introspector.findWrapperName(_member);\n+    }\n+    \n     // hmmh. what should we claim here?\n     @Override\n     public boolean isExplicitlyIncluded() { return false; }", "timestamp": 1363213218, "metainfo": ""}