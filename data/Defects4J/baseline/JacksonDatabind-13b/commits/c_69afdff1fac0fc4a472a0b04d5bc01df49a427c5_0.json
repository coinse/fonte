{"sha": "69afdff1fac0fc4a472a0b04d5bc01df49a427c5", "log": "Fixed [JACKSON-774] for 2.0.0 as well", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n         // if ValueInstantiator can use \"creator\" approach, need to resolve it here...\n         if (_valueInstantiator.canCreateFromObjectWith()) {\n             SettableBeanProperty[] creatorProps = _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n-            _propertyBasedCreator = new PropertyBasedCreator(_valueInstantiator, creatorProps);\n-            for (SettableBeanProperty prop : creatorProps) {\n-                if (!prop.hasValueDeserializer()) {\n-                    _propertyBasedCreator.assignDeserializer(prop,\n-                           findDeserializer(ctxt, prop.getType(), prop));\n-                }\n-            }\n+            _propertyBasedCreator = PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n         }\n \n         Iterator<SettableBeanProperty> it = _beanProperties.allProperties();\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.java\n \n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n      */\n     protected final SettableBeanProperty[] _propertiesWithInjectables;\n     \n-    public PropertyBasedCreator(ValueInstantiator valueInstantiator,\n-            SettableBeanProperty[] creatorProps)\n+    /*\n+    /**********************************************************\n+    /* Construction, initialization\n+    /**********************************************************\n+     */\n+    \n+    protected PropertyBasedCreator(ValueInstantiator valueInstantiator,\n+            SettableBeanProperty[] creatorProps, Object[] defaultValues)\n     {\n         _valueInstantiator = valueInstantiator;\n         _properties = new HashMap<String, SettableBeanProperty>();\n-        // [JACKSON-372]: primitive types need extra care\n-        Object[] defValues = null;\n         SettableBeanProperty[] propertiesWithInjectables = null;\n         for (int i = 0, len = creatorProps.length; i < len; ++i) {\n             SettableBeanProperty prop = creatorProps[i];\n             _properties.put(prop.getName(), prop);\n-            if (prop.getType().isPrimitive()) {\n-                if (defValues == null) {\n-                    defValues = new Object[len];\n-                }\n-                defValues[i] = ClassUtil.defaultValue(prop.getType().getRawClass());\n-            }\n             Object injectableValueId = prop.getInjectableValueId();\n             if (injectableValueId != null) {\n                 if (propertiesWithInjectables == null) {\n                 propertiesWithInjectables[i] = prop;\n             }\n         }\n-        _defaultValues = defValues;\n+        _defaultValues = defaultValues;\n         _propertiesWithInjectables = propertiesWithInjectables;        \n     }\n \n+    /**\n+     * Factory method used for building actual instances: resolves deserializers\n+     * and checks for \"null values\".\n+     */\n+    public static PropertyBasedCreator construct(DeserializationContext ctxt,\n+            ValueInstantiator valueInstantiator, SettableBeanProperty[] srcProps)\n+        throws JsonMappingException\n+    {\n+        final int len = srcProps.length;\n+        SettableBeanProperty[] creatorProps = new SettableBeanProperty[len];\n+        Object[] defaultValues = null;\n+        for (int i = 0; i < len; ++i) {\n+            SettableBeanProperty prop = srcProps[i];\n+            if (!prop.hasValueDeserializer()) {\n+                prop = prop.withValueDeserializer(ctxt.findContextualValueDeserializer(prop.getType(), prop));\n+            }\n+            creatorProps[i] = prop;\n+            // [JACKSON-372]: primitive types need extra care\n+            // [JACKSON-774]: as do non-default nulls...\n+            JsonDeserializer<?> deser = prop.getValueDeserializer();\n+            Object nullValue = (deser == null) ? null : deser.getNullValue();\n+            if ((nullValue == null) && prop.getType().isPrimitive()) {\n+                nullValue = ClassUtil.defaultValue(prop.getType().getRawClass());\n+            }\n+            if (nullValue != null) {\n+                if (defaultValues == null) {\n+                    defaultValues = new Object[len];\n+                }\n+                defaultValues[i] = nullValue;\n+            }\n+        }\n+        return new PropertyBasedCreator(valueInstantiator, creatorProps, defaultValues);\n+    }\n+    \n+    public void assignDeserializer(SettableBeanProperty prop, JsonDeserializer<Object> deser) {\n+        prop = prop.withValueDeserializer(deser);\n+        _properties.put(prop.getName(), prop);\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Accessors\n+    /**********************************************************\n+     */\n+    \n     public Collection<SettableBeanProperty> getCreatorProperties() {\n         return _properties.values();\n     }\n     public SettableBeanProperty findCreatorProperty(String name) {\n         return _properties.get(name);\n     }\n+    \n+    /*\n+    /**********************************************************\n+    /* Building process\n+    /**********************************************************\n+     */\n \n-    public void assignDeserializer(SettableBeanProperty prop, JsonDeserializer<Object> deser) {\n-        prop = prop.withValueDeserializer(deser);\n-        _properties.put(prop.getName(), prop);\n-    }\n-    \n     /**\n      * Method called when starting to build a bean instance.\n      */\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n         }\n         if (_valueInstantiator.canCreateFromObjectWith()) {\n             SettableBeanProperty[] creatorProps = _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n-            _propertyBasedCreator = new PropertyBasedCreator(_valueInstantiator, creatorProps);\n-            for (SettableBeanProperty prop : creatorProps) {\n-                if (!prop.hasValueDeserializer()) {\n-                    _propertyBasedCreator.assignDeserializer(prop,\n-                            findDeserializer(ctxt, prop.getType(), prop));\n-                }\n-            }\n+            _propertyBasedCreator = PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n         }\n         _standardStringKey = _isStdKeyDeser(_mapType, _keyDeserializer);\n     }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestCreatorNullValue.java\n+package com.fasterxml.jackson.databind.creators;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.core.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n+import com.fasterxml.jackson.databind.deser.*;\n+\n+// Mostly for [JACSON-774]\n+public class TestCreatorNullValue extends BaseMapTest\n+{\n+    protected static class Container {\n+        Contained<String> contained;\n+\n+        @JsonCreator\n+        public Container(@JsonProperty(\"contained\") Contained<String> contained) {\n+            this.contained = contained;\n+        }\n+    }\n+\n+    private static interface Contained<T> {}\n+\n+    private static class NullContained implements Contained<Object> {}\n+\n+    private static final NullContained NULL_CONTAINED = new NullContained();\n+\n+    private static class ContainedDeserializer extends JsonDeserializer<Contained<?>> {\n+        @Override\n+        public Contained<?> deserialize(JsonParser jp, DeserializationContext ctxt) throws JsonProcessingException {\n+            return null;\n+        }\n+\n+        @Override\n+        public Contained<?> getNullValue() {\n+            return NULL_CONTAINED;\n+        }\n+    }\n+\n+    private static class ContainerDeserializerResolver extends Deserializers.Base {\n+        @Override\n+        public JsonDeserializer<?> findBeanDeserializer(JavaType type,\n+                DeserializationConfig config, BeanDescription beanDesc)\n+            throws JsonMappingException\n+        {\n+            if (!Contained.class.isAssignableFrom(type.getRawClass())) {\n+                return null;\n+            } else {\n+                return new ContainedDeserializer();\n+            }\n+        }\n+    }\n+\n+    private static class TestModule extends Module\n+    {\n+        @Override\n+        public String getModuleName() {\n+            return \"ContainedModule\";\n+        }\n+\n+        @Override\n+        public Version version() {\n+            return Version.unknownVersion();\n+        }\n+\n+        @Override\n+        public void setupModule(SetupContext setupContext) {\n+            setupContext.addDeserializers(new ContainerDeserializerResolver());\n+        }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+    \n+    public void testUsesDeserializersNullValue() throws Exception {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(new TestModule());\n+        Container container = mapper.readValue(\"{}\", Container.class);\n+        assertEquals(NULL_CONTAINED, container.contained);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestCreators.java\n+package com.fasterxml.jackson.databind.creators;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+/**\n+ * Unit tests for verifying that it is possible to annotate\n+ * various kinds of things with {@link JsonCreator} annotation.\n+ */\n+public class TestCreators\n+    extends BaseMapTest\n+{\n+    /*\n+    /**********************************************************\n+    /* Annotated helper classes, simple\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Simple(st) possible demonstration of using annotated\n+     * constructors\n+     */\n+    static class ConstructorBean {\n+        int x;\n+\n+        @JsonCreator protected ConstructorBean(@JsonProperty(\"x\") int x) {\n+            this.x = x;\n+        }\n+    }\n+\n+    /**\n+     * Another simple constructor, but with bit more unusual argument\n+     * type\n+     */\n+    static class BooleanConstructorBean {\n+        Boolean b;\n+        @JsonCreator protected BooleanConstructorBean(Boolean b) {\n+            this.b = b;\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unused\")\n+    private static class BooleanConstructorBean2 {\n+        boolean b;\n+        @JsonCreator protected BooleanConstructorBean2(boolean b) {\n+            this.b = b;\n+        }\n+    }\n+    \n+    static class DoubleConstructorBean {\n+        Double d; // cup?\n+        @JsonCreator protected DoubleConstructorBean(Double d) {\n+            this.d = d;\n+        }\n+    }\n+\n+    static class FactoryBean {\n+        double d; // teehee\n+\n+        private FactoryBean(double value, boolean dummy) { d = value; }\n+\n+        @JsonCreator protected static FactoryBean createIt(@JsonProperty(\"f\") double value) {\n+            return new FactoryBean(value, true);\n+        }\n+    }\n+\n+    static class LongFactoryBean {\n+        long value;\n+\n+        private LongFactoryBean(long v) { value = v; }\n+\n+        @JsonCreator static protected LongFactoryBean valueOf(long v) {\n+            return new LongFactoryBean(v);\n+        }\n+    }\n+\n+    static class StringFactoryBean {\n+        String value;\n+\n+        private StringFactoryBean(String v, boolean dummy) { value = v; }\n+\n+        @JsonCreator static protected StringFactoryBean valueOf(String v) {\n+            return new StringFactoryBean(v, true);\n+        }\n+    }\n+\n+    static class FactoryBeanMixIn { // static just to be able to use static methods\n+        /**\n+         * Note: signature (name and parameter types) must match; but\n+         * only annotations will be used, not code or such. And use\n+         * is by augmentation, so we only need to add things to add\n+         * or override.\n+         */\n+        static FactoryBean createIt(@JsonProperty(\"mixed\") double xyz) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Simple demonstration of INVALID construtor annotation (only\n+     * defining name for first arg)\n+     */\n+    static class BrokenBean {\n+        @JsonCreator protected BrokenBean(@JsonProperty(\"a\") int a,\n+                                          int b) {\n+        }\n+    }\n+\n+    /**\n+     * Bean that defines both creator and factory methor as\n+     * creators. Constructors have priority; but it is possible\n+     * to hide it using mix-in annotations.\n+     */\n+    static class CreatorBean\n+    {\n+        String a;\n+        int x;\n+\n+        @JsonCreator\n+        protected CreatorBean(@JsonProperty(\"a\") String paramA,\n+                              @JsonProperty(\"x\") int paramX)\n+        {\n+            a = \"ctor:\"+paramA;\n+            x = 1+paramX;\n+        }\n+\n+        private CreatorBean(String a, int x, boolean dummy) {\n+            this.a = a;\n+            this.x = x;\n+        }\n+\n+        @JsonCreator\n+        public static CreatorBean buildMeUpButterCup(@JsonProperty(\"a\") String paramA,\n+                                                     @JsonProperty(\"x\") int paramX)\n+        {\n+            return new CreatorBean(\"factory:\"+paramA, paramX-1, false);\n+        }\n+    }\n+\n+    /**\n+     * Class for sole purpose of hosting mix-in annotations.\n+     * Couple of things to note: (a) MUST be static class (non-static\n+     * get implicit pseudo-arg, 'this';\n+     * (b) for factory methods, must have static to match (part of signature)\n+     */\n+    abstract static class MixIn {\n+        @JsonIgnore private MixIn(String a, int x) { }\n+    }\n+\n+    static class MultiBean {\n+        Object value;\n+\n+        @JsonCreator public MultiBean(int v) { value = v; }\n+        @JsonCreator public MultiBean(double v) { value = v; }\n+        @JsonCreator public MultiBean(String v) { value = v; }\n+        @JsonCreator public MultiBean(boolean v) { value = v; }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Annotated helper classes, mixed (creator and props)\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Test bean for ensuring that constructors can be mixed with setters\n+     */\n+    static class ConstructorAndPropsBean\n+    {\n+        final int a, b;\n+        boolean c;\n+\n+        @JsonCreator protected ConstructorAndPropsBean(@JsonProperty(\"a\") int a,\n+                                                       @JsonProperty(\"b\") int b)\n+        {\n+            this.a = a;\n+            this.b = b;\n+        }\n+\n+        public void setC(boolean value) { c = value; }\n+    }\n+\n+    /**\n+     * Test bean for ensuring that factory methods can be mixed with setters\n+     */\n+    static class FactoryAndPropsBean\n+    {\n+        boolean[] arg1;\n+        int arg2, arg3;\n+\n+        @JsonCreator protected FactoryAndPropsBean(@JsonProperty(\"a\") boolean[] arg)\n+        {\n+            arg1 = arg;\n+        }\n+\n+        public void setB(int value) { arg2 = value; }\n+        public void setC(int value) { arg3 = value; }\n+    }\n+\n+    static class DeferredConstructorAndPropsBean\n+    {\n+        final int[] createA;\n+        String propA = \"xyz\";\n+        String propB;\n+\n+        @JsonCreator\n+        public DeferredConstructorAndPropsBean(@JsonProperty(\"createA\") int[] a)\n+        {\n+            createA = a;\n+        }\n+        public void setPropA(String a) { propA = a; }\n+        public void setPropB(String b) { propB = b; }\n+    }\n+\n+    static class DeferredFactoryAndPropsBean\n+    {\n+        String prop, ctor;\n+\n+        @JsonCreator DeferredFactoryAndPropsBean(@JsonProperty(\"ctor\") String str)\n+        {\n+            ctor = str;\n+        }\n+\n+        public void setProp(String str) { prop = str; }\n+    }\n+\n+    /*\n+    //////////////////////////////////////////////\n+    // Annotated helper classes for Maps\n+    //////////////////////////////////////////////\n+     */\n+\n+    @SuppressWarnings(\"serial\")\n+    static class MapWithCtor extends HashMap<Object,Object>\n+    {\n+        final int _number;\n+        String _text = \"initial\";\n+\n+        MapWithCtor() { this(-1, \"default\"); }\n+\n+        @JsonCreator\n+            public MapWithCtor(@JsonProperty(\"number\") int nr,\n+                               @JsonProperty(\"text\") String t)\n+        {\n+            _number = nr;\n+            _text = t;\n+        }\n+    }\n+\n+    @SuppressWarnings(\"serial\")\n+    static class MapWithFactory extends TreeMap<Object,Object>\n+    {\n+        Boolean _b;\n+\n+        private MapWithFactory(Boolean b) {\n+            _b = b;\n+        }\n+\n+        @JsonCreator\n+            static MapWithFactory createIt(@JsonProperty(\"b\") Boolean b)\n+        {\n+            return new MapWithFactory(b);\n+        }\n+    }\n+\n+    /*\n+    /////////////////////////////////////////////////////\n+    // Test methods, valid cases, non-deferred, no-mixins\n+    /////////////////////////////////////////////////////\n+     */\n+\n+    public void testSimpleConstructor() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        ConstructorBean bean = m.readValue(\"{ \\\"x\\\" : 42 }\", ConstructorBean.class);\n+        assertEquals(42, bean.x);\n+    }\n+\n+    public void testSimpleDoubleConstructor() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        Double exp = new Double(\"0.25\");\n+        DoubleConstructorBean bean = m.readValue(exp.toString(), DoubleConstructorBean.class);\n+        assertEquals(exp, bean.d);\n+    }\n+\n+    public void testSimpleBooleanConstructor() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        BooleanConstructorBean bean = m.readValue(\" true \", BooleanConstructorBean.class);\n+        assertEquals(Boolean.TRUE, bean.b);\n+\n+        BooleanConstructorBean2 bean2 = m.readValue(\" true \", BooleanConstructorBean2.class);\n+        assertTrue(bean2.b);\n+    }\n+\n+    public void testSimpleFactory() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        FactoryBean bean = m.readValue(\"{ \\\"f\\\" : 0.25 }\", FactoryBean.class);\n+        assertEquals(0.25, bean.d);\n+    }\n+\n+    public void testLongFactory() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        long VALUE = 123456789000L;\n+        LongFactoryBean bean = m.readValue(String.valueOf(VALUE), LongFactoryBean.class);\n+        assertEquals(VALUE, bean.value);\n+    }\n+\n+    public void testStringFactory() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        String str = \"abc\";\n+        StringFactoryBean bean = m.readValue(quote(str), StringFactoryBean.class);\n+        assertEquals(str, bean.value);\n+    }\n+\n+    public void testConstructorCreator() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        CreatorBean bean = m.readValue\n+            (\"{ \\\"a\\\" : \\\"xyz\\\", \\\"x\\\" : 12 }\", CreatorBean.class);\n+        assertEquals(13, bean.x);\n+        assertEquals(\"ctor:xyz\", bean.a);\n+    }\n+\n+    public void testConstructorAndProps() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        ConstructorAndPropsBean bean = m.readValue\n+            (\"{ \\\"a\\\" : \\\"1\\\", \\\"b\\\": 2, \\\"c\\\" : true }\", ConstructorAndPropsBean.class);\n+        assertEquals(1, bean.a);\n+        assertEquals(2, bean.b);\n+        assertEquals(true, bean.c);\n+    }\n+\n+    public void testFactoryAndProps() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        FactoryAndPropsBean bean = m.readValue\n+            (\"{ \\\"a\\\" : [ false, true, false ], \\\"b\\\": 2, \\\"c\\\" : -1 }\", FactoryAndPropsBean.class);\n+        assertEquals(2, bean.arg2);\n+        assertEquals(-1, bean.arg3);\n+        boolean[] arg1 = bean.arg1;\n+        assertNotNull(arg1);\n+        assertEquals(3, arg1.length);\n+        assertFalse(arg1[0]);\n+        assertTrue(arg1[1]);\n+        assertFalse(arg1[2]);\n+    }\n+\n+    /**\n+     * Test to verify that multiple creators may co-exist, iff\n+     * they use different JSON type as input\n+     */\n+    public void testMultipleCreators() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        MultiBean bean = m.readValue(\"123\", MultiBean.class);\n+        assertEquals(Integer.valueOf(123), bean.value);\n+        bean = m.readValue(quote(\"abc\"), MultiBean.class);\n+        assertEquals(\"abc\", bean.value);\n+        bean = m.readValue(\"0.25\", MultiBean.class);\n+        assertEquals(Double.valueOf(0.25), bean.value);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Test methods, valid cases, deferred, no mixins\n+    /**********************************************************\n+     */\n+\n+    public void testDeferredConstructorAndProps() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        DeferredConstructorAndPropsBean bean = m.readValue\n+            (\"{ \\\"propB\\\" : \\\"...\\\", \\\"createA\\\" : [ 1 ], \\\"propA\\\" : null }\",\n+             DeferredConstructorAndPropsBean.class);\n+\n+        assertEquals(\"...\", bean.propB);\n+        assertNull(bean.propA);\n+        assertNotNull(bean.createA);\n+        assertEquals(1, bean.createA.length);\n+        assertEquals(1, bean.createA[0]);\n+    }\n+\n+    public void testDeferredFactoryAndProps() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        DeferredFactoryAndPropsBean bean = m.readValue\n+            (\"{ \\\"prop\\\" : \\\"1\\\", \\\"ctor\\\" : \\\"2\\\" }\", DeferredFactoryAndPropsBean.class);\n+        assertEquals(\"1\", bean.prop);\n+        assertEquals(\"2\", bean.ctor);\n+    }\n+\n+    /*\n+    /////////////////////////////////////////////////////\n+    // Test methods, valid cases, mixins\n+    /////////////////////////////////////////////////////\n+     */\n+\n+    public void testFactoryCreatorWithMixin() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        m.addMixInAnnotations(CreatorBean.class, MixIn.class);\n+        CreatorBean bean = m.readValue\n+            (\"{ \\\"a\\\" : \\\"xyz\\\", \\\"x\\\" : 12 }\", CreatorBean.class);\n+        assertEquals(11, bean.x);\n+        assertEquals(\"factory:xyz\", bean.a);\n+    }\n+\n+    public void testFactoryCreatorWithRenamingMixin() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        m.addMixInAnnotations(FactoryBean.class, FactoryBeanMixIn.class);\n+        // override changes property name from \"f\" to \"mixed\"\n+        FactoryBean bean = m.readValue(\"{ \\\"mixed\\\" :  20.5 }\", FactoryBean.class);\n+        assertEquals(20.5, bean.d);\n+    }\n+\n+    /*\n+    /////////////////////////////////////////////////////\n+    // Test methods, valid cases, Map with creator\n+    // (to test [JACKSON-153])\n+    /////////////////////////////////////////////////////\n+     */\n+\n+    public void testMapWithConstructor() throws Exception\n+    {\n+        MapWithCtor result = new ObjectMapper().readValue\n+            (\"{\\\"text\\\":\\\"abc\\\", \\\"entry\\\":true, \\\"number\\\":123, \\\"xy\\\":\\\"yx\\\"}\",\n+             MapWithCtor.class);\n+        // regular Map entries:\n+        assertEquals(Boolean.TRUE, result.get(\"entry\"));\n+        assertEquals(\"yx\", result.get(\"xy\"));\n+        assertEquals(2, result.size());\n+        // then ones passed via constructor\n+        assertEquals(\"abc\", result._text);\n+        assertEquals(123, result._number);\n+    }\n+\n+    public void testMapWithFactory() throws Exception\n+    {\n+        MapWithFactory result = new ObjectMapper().readValue\n+            (\"{\\\"x\\\":\\\"...\\\",\\\"b\\\":true  }\",\n+             MapWithFactory.class);\n+        assertEquals(\"...\", result.get(\"x\"));\n+        assertEquals(1, result.size());\n+        assertEquals(Boolean.TRUE, result._b);\n+    }\n+\n+    /*\n+    //////////////////////////////////////////////\n+    // Test methods, invalid/broken cases\n+    //////////////////////////////////////////////\n+     */\n+\n+    public void testBrokenConstructor() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        try {\n+            /*BrokenBean bean =*/ m.readValue(\"{ \\\"x\\\" : 42 }\", BrokenBean.class);\n+        } catch (JsonMappingException je) {\n+            verifyException(je, \"has no property name\");\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestCreators2.java\n+\n+package com.fasterxml.jackson.databind.creators;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+public class TestCreators2\n+    extends BaseMapTest\n+{\n+    /*\n+    /**********************************************************\n+    /* Helper classes\n+    /**********************************************************\n+     */\n+\n+    static class HashTest\n+    {\n+        final byte[] bytes;\n+        final String type;\n+\n+        @JsonCreator\n+        public HashTest(@JsonProperty(\"bytes\") @JsonDeserialize(using = BytesDeserializer.class) final byte[] bytes,\n+                @JsonProperty(\"type\") final String type)\n+        {\n+            this.bytes = bytes;\n+            this.type = type;\n+        }\n+    }\n+\n+    static class BytesDeserializer extends JsonDeserializer<byte[]>\n+    {\n+        @Override\n+        public byte[] deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n+            String str = jp.getText();\n+            return str.getBytes(\"UTF-8\");\n+        }\n+    }\n+\n+    static class Primitives\n+    {\n+        protected int x = 3;\n+        protected double d = -0.5;\n+        protected boolean b = true;\n+        \n+        @JsonCreator\n+        public Primitives(@JsonProperty(\"x\") int x,\n+                @JsonProperty(\"d\") double d,\n+                @JsonProperty(\"b\") boolean b)\n+        {\n+            this.x = x;\n+            this.d = d;\n+            this.b = b;\n+        }\n+    }\n+    \n+    protected static class Test431Container {\n+        protected final List<Item431> items;\n+\n+        @JsonCreator\n+        public Test431Container(@JsonProperty(\"items\") final List<Item431> i) {\n+            items = i;\n+        }\n+}    \n+\n+    @JsonIgnoreProperties(ignoreUnknown = true)\n+    protected static class Item431 {\n+        protected final String id;\n+\n+        @JsonCreator\n+        public Item431(@JsonProperty(\"id\") String id) {\n+            this.id = id;\n+        }\n+    }\n+\n+    // Test class for verifying that creator-call failures are reported as checked exceptions\n+    static class BeanFor438 {\n+        @JsonCreator\n+        public BeanFor438(@JsonProperty(\"name\") String s) {\n+            throw new IllegalArgumentException(\"I don't like that name!\");\n+        }\n+    }\n+\n+    // For [JACKSON-465]\n+    static class MapBean\n+    {\n+        protected Map<String,Long> map;\n+        \n+        @JsonCreator\n+        public MapBean(Map<String, Long> map) {\n+            this.map = map;\n+        }\n+    }\n+\n+    // For [JACKSON-470]: should be appropriately detected, reported error about\n+    static class BrokenCreatorBean\n+    {\n+        protected String bar;\n+        \n+        @JsonCreator\n+        public BrokenCreatorBean(@JsonProperty(\"bar\") String bar1, @JsonProperty(\"bar\") String bar2) {\n+            bar = \"\"+bar1+\"/\"+bar2;\n+        }\n+    }\n+    \n+    // For [JACKSON-541]: should not need @JsonCreator if SerializationFeature.AUTO_DETECT_CREATORS is on.\n+    static class AutoDetectConstructorBean\n+    {\n+    \tprotected final String foo;\n+    \tprotected final String bar;\n+\n+    \tpublic AutoDetectConstructorBean(@JsonProperty(\"bar\") String bar, @JsonProperty(\"foo\") String foo){\n+    \t    this.bar = bar;\n+    \t    this.foo = foo;\n+    \t}\n+    }\n+\n+    static class BustedCtor {\n+        @JsonCreator\n+        BustedCtor(@JsonProperty(\"a\") String value) {\n+            throw new IllegalArgumentException(\"foobar\");\n+        }\n+    }\n+\n+    // As per [JACKSON-575]\n+    static class IgnoredCtor\n+    {\n+        @JsonIgnore\n+        public IgnoredCtor(String arg) {\n+            throw new RuntimeException(\"Should never use this constructor\");\n+        }\n+\n+        public IgnoredCtor() { }\n+    }\n+\n+    abstract static class AbstractBase {\n+        @JsonCreator\n+        public static AbstractBase create(Map<String,Object> props)\n+        {\n+            return new AbstractBaseImpl(props);\n+        }\n+    }\n+\n+    static class AbstractBaseImpl extends AbstractBase\n+    {\n+        protected Map<String,Object> props;\n+        \n+        public AbstractBaseImpl(Map<String,Object> props) {\n+            this.props = props;\n+        }\n+    }\n+    \n+    static interface Issue700Set extends java.util.Set<Object> { }\n+\n+    static class Issue700Bean\n+    {\n+        protected Issue700Set item;\n+\n+        @JsonCreator\n+        public Issue700Bean(@JsonProperty(\"item\") String item) { }\n+\n+        public String getItem() { return null; }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    // for [JACKSON-547]\n+    public void testExceptionFromConstructor() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        try {\n+            m.readValue(\"{}\", BustedCtor.class);\n+            fail(\"Expected exception\");\n+        } catch (JsonMappingException e) {\n+            verifyException(e, \": foobar\");\n+            // also: should have nested exception\n+            Throwable t = e.getCause();\n+            assertNotNull(t);\n+            assertEquals(IllegalArgumentException.class, t.getClass());\n+            assertEquals(\"foobar\", t.getMessage());\n+        }\n+    }\n+    \n+    public void testSimpleConstructor() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        HashTest test = m.readValue(\"{\\\"type\\\":\\\"custom\\\",\\\"bytes\\\":\\\"abc\\\" }\", HashTest.class);\n+        assertEquals(\"custom\", test.type);\n+        assertEquals(\"abc\", new String(test.bytes, \"UTF-8\"));\n+    }    \n+\n+    // Test for [JACKSON-372]\n+    public void testMissingPrimitives() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        Primitives p = m.readValue(\"{}\", Primitives.class);\n+        assertFalse(p.b);\n+        assertEquals(0, p.x);\n+        assertEquals(0.0, p.d);\n+    }\n+\n+    public void testJackson431() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        final Test431Container foo = m.readValue(\n+                \"{\\\"items\\\":\\n\"\n+                +\"[{\\\"bar\\\": 0,\\n\"\n+                +\"\\\"id\\\": \\\"id123\\\",\\n\"\n+                +\"\\\"foo\\\": 1\\n\" \n+                +\"}]}\",\n+                Test431Container.class);\n+        assertNotNull(foo);\n+    }\n+\n+    // [JACKSON-438]: Catch and rethrow exceptions that Creator methods throw\n+    public void testJackson438() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        try {\n+            m.readValue(\"{ \\\"name\\\":\\\"foobar\\\" }\", BeanFor438.class);\n+            fail(\"Should have failed\");\n+        } catch (Exception e) {\n+            if (!(e instanceof JsonMappingException)) {\n+                fail(\"Should have received JsonMappingException, caught \"+e.getClass().getName());\n+            }\n+            verifyException(e, \"don't like that name\");\n+            // Ok: also, let's ensure root cause is directly linked, without other extra wrapping:\n+            Throwable t = e.getCause();\n+            assertNotNull(t);\n+            assertEquals(IllegalArgumentException.class, t.getClass());\n+            verifyException(e, \"don't like that name\");\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testIssue465() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        final String JSON = \"{\\\"A\\\":12}\";\n+\n+        // first, test with regular Map, non empty\n+        Map<String,Long> map = mapper.readValue(JSON, Map.class);\n+        assertEquals(1, map.size());\n+        assertEquals(Integer.valueOf(12), map.get(\"A\"));\n+        \n+        MapBean bean = mapper.readValue(JSON, MapBean.class);\n+        assertEquals(1, bean.map.size());\n+        assertEquals(Long.valueOf(12L), bean.map.get(\"A\"));\n+\n+        // and then empty ones\n+        final String EMPTY_JSON = \"{}\";\n+\n+        map = mapper.readValue(EMPTY_JSON, Map.class);\n+        assertEquals(0, map.size());\n+        \n+        bean = mapper.readValue(EMPTY_JSON, MapBean.class);\n+        assertEquals(0, bean.map.size());\n+    }\n+\n+    public void testCreatorWithDupNames() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        try {\n+            mapper.readValue(\"{\\\"bar\\\":\\\"x\\\"}\", BrokenCreatorBean.class);\n+            fail(\"Should have caught duplicate creator parameters\");\n+        } catch (JsonMappingException e) {\n+            verifyException(e, \"duplicate creator property \\\"bar\\\"\");\n+        }\n+    }\n+    \n+    public void testCreatorMultipleArgumentWithoutAnnotation() throws Exception {\n+    \tObjectMapper mapper = new ObjectMapper();\n+    \tAutoDetectConstructorBean value = mapper.readValue(\"{\\\"bar\\\":\\\"bar\\\",\\\"foo\\\":\\\"foo\\\"}\", AutoDetectConstructorBean.class);\n+    \tassertEquals(\"bar\", value.bar);\n+    \tassertEquals(\"foo\", value.foo);\n+    }\n+\n+    // for [JACKSON-575]\n+    public void testIgnoredSingleArgCtor() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        try {\n+            mapper.readValue(quote(\"abc\"), IgnoredCtor.class);\n+            fail(\"Should have caught missing constructor problem\");\n+        } catch (JsonMappingException e) {\n+            verifyException(e, \"no single-String constructor/factory method\");\n+        }\n+    }\n+\n+    public void testAbstractFactory() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        AbstractBase bean = mapper.readValue(\"{\\\"a\\\":3}\",\n+                AbstractBase.class);\n+        assertNotNull(bean);\n+        AbstractBaseImpl impl = (AbstractBaseImpl) bean;\n+        assertEquals(1, impl.props.size());\n+        assertEquals(Integer.valueOf(3), impl.props.get(\"a\"));\n+    }\n+\n+    // [JACKSON-700]\n+    public void testCreatorProperties() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        Issue700Bean value = mapper.readValue(\"{ \\\"item\\\" : \\\"foo\\\" }\", Issue700Bean.class);\n+        assertNotNull(value);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestValueInstantiator.java\n+package com.fasterxml.jackson.databind.creators;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.annotation.JsonValueInstantiator;\n+import com.fasterxml.jackson.databind.cfg.DeserializationConfig;\n+import com.fasterxml.jackson.databind.deser.*;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n+\n+/**\n+ * Test related to [JACKSON-580] (allow specifying custom instantiators)\n+ */\n+public class TestValueInstantiator extends BaseMapTest\n+{\n+    static class MyBean\n+    {\n+        String _secret;\n+        \n+        public MyBean(String s, boolean bogus) {\n+            _secret = s;\n+        }\n+    }\n+\n+    static class MysteryBean\n+    {\n+        Object value;\n+        \n+        public MysteryBean(Object v) { value = v; }\n+    }\n+    \n+    static class CreatorBean\n+    {\n+        String _secret;\n+\n+        public String value;\n+        \n+        protected CreatorBean(String s) {\n+            _secret = s;\n+        }\n+    }\n+\n+    static abstract class InstantiatorBase extends ValueInstantiator\n+    {\n+        @Override\n+        public String getValueTypeDesc() {\n+            return \"UNKNOWN\";\n+        }\n+\n+        @Override\n+        public boolean canCreateUsingDelegate() { return false; }\n+    }\n+    \n+    static abstract class PolymorphicBeanBase { }\n+    \n+    static class PolymorphicBean extends PolymorphicBeanBase\n+    {\n+        public String name;\n+    }\n+    \n+    @SuppressWarnings(\"serial\")\n+    static class MyList extends ArrayList<Object>\n+    {\n+        public MyList(boolean b) { super(); }\n+    }\n+\n+    @SuppressWarnings(\"serial\")\n+    static class MyMap extends HashMap<String,Object>\n+    {\n+        public MyMap(boolean b) { super(); }\n+        public MyMap(String name) {\n+            super();\n+            put(name, name);\n+        }\n+    }\n+    \n+    static class MyBeanInstantiator extends InstantiatorBase\n+    {\n+        @Override\n+        public String getValueTypeDesc() {\n+            return MyBean.class.getName();\n+        }\n+        \n+        @Override\n+        public boolean canCreateUsingDefault() { return true; }\n+\n+        @Override\n+        public MyBean createUsingDefault(DeserializationContext ctxt) {\n+            return new MyBean(\"secret!\", true);\n+        }\n+    }\n+\n+    /**\n+     * Something more ambitious: semi-automated approach to polymorphic\n+     * deserialization, using ValueInstantiator; from Object to any\n+     * type...\n+     */\n+    static class PolymorphicBeanInstantiator extends InstantiatorBase\n+    {\n+        @Override\n+        public String getValueTypeDesc() {\n+            return Object.class.getName();\n+        }\n+        \n+        @Override\n+        public boolean canCreateFromObjectWith() { return true; }\n+\n+        @Override\n+        public CreatorProperty[] getFromObjectArguments(DeserializationConfig config) {\n+            return  new CreatorProperty[] {\n+                    new CreatorProperty(\"type\", config.constructType(Class.class),\n+                            null, null, null, 0, null)\n+            };\n+        }\n+\n+        @Override\n+        public Object createFromObjectWith(DeserializationContext ctxt, Object[] args) {\n+            try {\n+                Class<?> cls = (Class<?>) args[0];\n+                return cls.newInstance();\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+    \n+    static class CreatorMapInstantiator extends InstantiatorBase\n+    {\n+        @Override\n+        public String getValueTypeDesc() {\n+            return MyMap.class.getName();\n+        }\n+        \n+        @Override\n+        public boolean canCreateFromObjectWith() { return true; }\n+\n+        @Override\n+        public CreatorProperty[] getFromObjectArguments(DeserializationConfig config) {\n+            return  new CreatorProperty[] {\n+                    new CreatorProperty(\"name\", config.constructType(String.class),\n+                            null, null, null, 0, null)\n+            };\n+        }\n+\n+        @Override\n+        public Object createFromObjectWith(DeserializationContext ctxt, Object[] args) {\n+            return new MyMap((String) args[0]);\n+        }\n+    }\n+    \n+    static class MyDelegateBeanInstantiator extends ValueInstantiator\n+    {\n+        @Override\n+        public String getValueTypeDesc() { return \"xxx\"; }\n+        \n+        @Override\n+        public boolean canCreateUsingDelegate() { return true; }\n+\n+        @Override\n+        public JavaType getDelegateType(DeserializationConfig config) {\n+            return config.constructType(Object.class);\n+        }\n+        \n+        @Override\n+        public Object createUsingDelegate(DeserializationContext ctxt, Object delegate) {\n+            return new MyBean(\"\"+delegate, true);\n+        }\n+    }\n+    \n+    static class MyListInstantiator extends InstantiatorBase\n+    {\n+        @Override\n+        public String getValueTypeDesc() {\n+            return MyList.class.getName();\n+        }\n+        \n+        @Override\n+        public boolean canCreateUsingDefault() { return true; }\n+\n+        @Override\n+        public MyList createUsingDefault(DeserializationContext ctxt) {\n+            return new MyList(true);\n+        }\n+    }\n+\n+    static class MyDelegateListInstantiator extends ValueInstantiator\n+    {\n+        @Override\n+        public String getValueTypeDesc() { return \"xxx\"; }\n+        \n+        @Override\n+        public boolean canCreateUsingDelegate() { return true; }\n+\n+        @Override\n+        public JavaType getDelegateType(DeserializationConfig config) {\n+            return config.constructType(Object.class);\n+        }\n+        \n+        @Override\n+        public Object createUsingDelegate(DeserializationContext ctxt, Object delegate) {\n+            MyList list = new MyList(true);\n+            list.add(delegate);\n+            return list;\n+        }\n+    }\n+    \n+    static class MyMapInstantiator extends InstantiatorBase\n+    {\n+        @Override\n+        public String getValueTypeDesc() {\n+            return MyMap.class.getName();\n+        }\n+        \n+        @Override\n+        public boolean canCreateUsingDefault() { return true; }\n+\n+        @Override\n+        public MyMap createUsingDefault(DeserializationContext ctxt) {\n+            return new MyMap(true);\n+        }\n+    }\n+\n+    static class MyDelegateMapInstantiator extends ValueInstantiator\n+    {\n+        @Override\n+        public String getValueTypeDesc() { return \"xxx\"; }\n+        \n+        @Override\n+        public boolean canCreateUsingDelegate() { return true; }\n+\n+        @Override\n+        public JavaType getDelegateType(DeserializationConfig config) {\n+            return TypeFactory.defaultInstance().constructType(Object.class);\n+        }\n+        \n+        @Override\n+        public Object createUsingDelegate(DeserializationContext ctxt, Object delegate) {\n+            MyMap map = new MyMap(true);\n+            map.put(\"value\", delegate);\n+            return map;\n+        }\n+    }\n+\n+    @JsonValueInstantiator(AnnotatedBeanInstantiator.class)\n+    static class AnnotatedBean {\n+        protected final String a;\n+        protected final int b;\n+        \n+        public AnnotatedBean(String a, int b) {\n+            this.a = a;\n+            this.b = b;\n+        }\n+    }\n+\n+    static class AnnotatedBeanInstantiator extends InstantiatorBase\n+    {\n+        @Override\n+        public String getValueTypeDesc() {\n+            return MyMap.class.getName();\n+        }\n+        \n+        @Override\n+        public boolean canCreateUsingDefault() { return true; }\n+\n+        @Override\n+        public AnnotatedBean createUsingDefault(DeserializationContext ctxt) {\n+            return new AnnotatedBean(\"foo\", 3);\n+        }\n+    }\n+    \n+    static class MyModule extends SimpleModule\n+    {\n+        public MyModule(Class<?> cls, ValueInstantiator inst)\n+        {\n+            super(\"Test\", Version.unknownVersion());\n+            this.addValueInstantiator(cls, inst);\n+        }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests for default creators\n+    /**********************************************************\n+     */\n+\n+    public void testCustomBeanInstantiator() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(new MyModule(MyBean.class, new MyBeanInstantiator()));\n+        MyBean bean = mapper.readValue(\"{}\", MyBean.class);\n+        assertNotNull(bean);\n+        assertEquals(\"secret!\", bean._secret);\n+    }\n+\n+    public void testCustomListInstantiator() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(new MyModule(MyList.class, new MyListInstantiator()));\n+        MyList result = mapper.readValue(\"[]\", MyList.class);\n+        assertNotNull(result);\n+        assertEquals(MyList.class, result.getClass());\n+        assertEquals(0, result.size());\n+    }\n+\n+    public void testCustomMapInstantiator() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(new MyModule(MyMap.class, new MyMapInstantiator()));\n+        MyMap result = mapper.readValue(\"{ \\\"a\\\":\\\"b\\\" }\", MyMap.class);\n+        assertNotNull(result);\n+        assertEquals(MyMap.class, result.getClass());\n+        assertEquals(1, result.size());\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests for delegate creators\n+    /**********************************************************\n+     */\n+\n+    public void testDelegateBeanInstantiator() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(new MyModule(MyBean.class, new MyDelegateBeanInstantiator()));\n+        MyBean bean = mapper.readValue(\"123\", MyBean.class);\n+        assertNotNull(bean);\n+        assertEquals(\"123\", bean._secret);\n+    }\n+\n+    public void testDelegateListInstantiator() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(new MyModule(MyList.class, new MyDelegateListInstantiator()));\n+        MyList result = mapper.readValue(\"123\", MyList.class);\n+        assertNotNull(result);\n+        assertEquals(1, result.size());\n+        assertEquals(Integer.valueOf(123), result.get(0));\n+    }\n+    \n+    public void testDelegateMapInstantiator() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(new MyModule(MyMap.class, new MyDelegateMapInstantiator()));\n+        MyMap result = mapper.readValue(\"123\", MyMap.class);\n+        assertNotNull(result);\n+        assertEquals(1, result.size());\n+        assertEquals(Integer.valueOf(123), result.values().iterator().next());\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests for property-based creators\n+    /**********************************************************\n+     */\n+\n+    public void testPropertyBasedBeanInstantiator() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(new MyModule(CreatorBean.class,\n+                new InstantiatorBase() {\n+                    @Override\n+                    public boolean canCreateFromObjectWith() { return true; }\n+        \n+                    @Override\n+                    public CreatorProperty[] getFromObjectArguments(DeserializationConfig config) {\n+                        return  new CreatorProperty[] {\n+                                new CreatorProperty(\"secret\", config.constructType(String.class),\n+                                        null, null, null, 0, null)\n+                        };\n+                    }\n+        \n+                    @Override\n+                    public Object createFromObjectWith(DeserializationContext ctxt, Object[] args) {\n+                        return new CreatorBean((String) args[0]);\n+                    }\n+        }));\n+        CreatorBean bean = mapper.readValue(\"{\\\"secret\\\":123,\\\"value\\\":37}\", CreatorBean.class);\n+        assertNotNull(bean);\n+        assertEquals(\"123\", bean._secret);\n+    }\n+\n+    public void testPropertyBasedMapInstantiator() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(new MyModule(MyMap.class, new CreatorMapInstantiator()));\n+        MyMap result = mapper.readValue(\"{\\\"name\\\":\\\"bob\\\", \\\"x\\\":\\\"y\\\"}\", MyMap.class);\n+        assertNotNull(result);\n+        assertEquals(2, result.size());\n+        assertEquals(\"bob\", result.get(\"bob\"));\n+        assertEquals(\"y\", result.get(\"x\"));\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests for scalar-delegates\n+    /**********************************************************\n+     */\n+\n+    public void testBeanFromString() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(new MyModule(MysteryBean.class,\n+                new InstantiatorBase() {\n+                    @Override\n+                    public boolean canCreateFromString() { return true; }\n+                    \n+                    @Override\n+                    public Object createFromString(DeserializationContext ctxt, String value) {\n+                        return new MysteryBean(value);\n+                    }\n+        }));\n+        MysteryBean result = mapper.readValue(quote(\"abc\"), MysteryBean.class);\n+        assertNotNull(result);\n+        assertEquals(\"abc\", result.value);\n+    }\n+\n+    public void testBeanFromInt() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(new MyModule(MysteryBean.class,\n+                new InstantiatorBase() {\n+                    @Override\n+                    public boolean canCreateFromInt() { return true; }\n+                    \n+                    @Override\n+                    public Object createFromInt(DeserializationContext ctxt, int value) {\n+                        return new MysteryBean(value+1);\n+                    }\n+        }));\n+        MysteryBean result = mapper.readValue(\"37\", MysteryBean.class);\n+        assertNotNull(result);\n+        assertEquals(Integer.valueOf(38), result.value);\n+    }\n+\n+    public void testBeanFromLong() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(new MyModule(MysteryBean.class,\n+                new InstantiatorBase() {\n+                    @Override\n+                    public boolean canCreateFromLong() { return true; }\n+                    \n+                    @Override\n+                    public Object createFromLong(DeserializationContext ctxt, long value) {\n+                        return new MysteryBean(value+1L);\n+                    }\n+        }));\n+        MysteryBean result = mapper.readValue(\"9876543210\", MysteryBean.class);\n+        assertNotNull(result);\n+        assertEquals(Long.valueOf(9876543211L), result.value);\n+    }\n+\n+    public void testBeanFromDouble() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(new MyModule(MysteryBean.class,\n+                new InstantiatorBase() {\n+                    @Override\n+                    public boolean canCreateFromDouble() { return true; }\n+\n+                    @Override\n+                    public Object createFromDouble(DeserializationContext ctxt, double value) {\n+                        return new MysteryBean(2.0 * value);\n+                    }\n+        }));\n+        MysteryBean result = mapper.readValue(\"0.25\", MysteryBean.class);\n+        assertNotNull(result);\n+        assertEquals(Double.valueOf(0.5), result.value);\n+    }\n+\n+    public void testBeanFromBoolean() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(new MyModule(MysteryBean.class,\n+                new InstantiatorBase() {\n+                    @Override\n+                    public boolean canCreateFromBoolean() { return true; }\n+                    \n+                    @Override\n+                    public Object createFromBoolean(DeserializationContext ctxt, boolean value) {\n+                        return new MysteryBean(Boolean.valueOf(value));\n+                    }\n+        }));\n+        MysteryBean result = mapper.readValue(\"true\", MysteryBean.class);\n+        assertNotNull(result);\n+        assertEquals(Boolean.TRUE, result.value);\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Other tests\n+    /**********************************************************\n+     */\n+\n+    \n+    /**\n+     * Beyond basic features, it should be possible to even implement\n+     * polymorphic handling...\n+     */\n+    public void testPolymorphicCreatorBean() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(new MyModule(PolymorphicBeanBase.class, new PolymorphicBeanInstantiator()));\n+        String JSON = \"{\\\"type\\\":\"+quote(PolymorphicBean.class.getName())+\",\\\"name\\\":\\\"Axel\\\"}\";\n+        PolymorphicBeanBase result = mapper.readValue(JSON, PolymorphicBeanBase.class);\n+        assertNotNull(result);\n+        assertSame(PolymorphicBean.class, result.getClass());\n+        assertEquals(\"Axel\", ((PolymorphicBean) result).name);\n+    }\n+\n+    public void testJackson633() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        AnnotatedBean bean = mapper.readValue(\"{}\", AnnotatedBean.class);\n+        assertNotNull(bean);\n+        assertEquals(\"foo\", bean.a);\n+        assertEquals(3, bean.b);\n+    }\n+}", "timestamp": 1328216423, "metainfo": ""}