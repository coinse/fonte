{"sha": "dfc4c888a41d550febd26f0a687bf92fc736b623", "log": "Fixed [JACKSON-780]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/node/MissingNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/MissingNode.java\n \n     @Override\n     public String asText() { return \"\"; }\n+\n+    // // Note: not a numeric node, hence default 'asXxx()' are fine:\n     \n-    @Override\n-    public int asInt(int defaultValue) {\n-        return 0;\n-    }\n-    @Override\n-    public long asLong(long defaultValue) {\n-        return 0L;\n-    }\n-    @Override\n-    public double asDouble(double defaultValue) {\n-        return 0.0;\n-    }\n+    /*\n+    public int asInt(int defaultValue);\n+    public long asLong(long defaultValue);\n+    public double asDouble(double defaultValue);\n+    public boolean asBoolean(boolean defaultValue);\n+    */\n     \n     @Override\n     public JsonNode path(String fieldName) { return this; }\n     {\n         /* Nothing to output... should we signal an error tho?\n          * Chances are, this is an erroneous call. For now, let's\n-         * not do that.\n+         * not do that; serialize as explicit null. Why? Because we\n+         * can not just omit a value as JSON Object field name may have\n+         * been written out.\n          */\n         jg.writeNull();\n     }\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/NodeTestBase.java\n+package com.fasterxml.jackson.databind.node;\n+\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+abstract class NodeTestBase extends BaseMapTest\n+{\n+    protected void assertNodeNumbersForNonNumeric(JsonNode n)\n+    { \n+        assertFalse(n.isNumber());\n+        assertEquals(0, n.asInt());\n+        assertEquals(-42, n.asInt(-42));\n+        assertEquals(0, n.asLong());\n+        assertEquals(12345678901L, n.asLong(12345678901L));\n+        assertEquals(0.0, n.asDouble());\n+        assertEquals(-19.25, n.asDouble(-19.25));\n+    }\n+    \n+    protected void assertNodeNumbers(JsonNode n, int expInt, double expDouble)\n+    {\n+        assertEquals(expInt, n.asInt());\n+        assertEquals(expInt, n.asInt(-42));\n+        assertEquals((long) expInt, n.asLong());\n+        assertEquals((long) expInt, n.asLong(19L));\n+        assertEquals(expDouble, n.asDouble());\n+        assertEquals(expDouble, n.asDouble(-19.25));\n+    }\n+\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/node/NullNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/NullNode.java\n         return \"null\";\n     }\n \n-    @Override\n-    public int asInt(int defaultValue) {\n-        return 0;\n-    }\n-    @Override\n-    public long asLong(long defaultValue) {\n-        return 0L;\n-    }\n-    @Override\n-    public double asDouble(double defaultValue) {\n-        return 0.0;\n-    }\n+    // as with MissingNode, not considered number node; hence defaults are returned if provided\n+    \n+    /*\n+    public int asInt(int defaultValue);\n+    public long asLong(long defaultValue);\n+    public double asDouble(double defaultValue);\n+    public boolean asBoolean(boolean defaultValue);\n+    */\n     \n     @Override\n     public final void serialize(JsonGenerator jg, SerializerProvider provider)\n--- a/src/test/java/com/fasterxml/jackson/databind/BaseMapTest.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/BaseMapTest.java\n         // just for fun, let's also call hash code...\n         o.hashCode();\n     }\n-\n-    protected void assertNodeNumbersForNonNumeric(JsonNode n)\n-    { \n-        assertEquals(0, n.asInt());\n-        assertEquals(-42, n.asInt(-42));\n-        assertEquals(0, n.asLong());\n-        assertEquals(12345678901L, n.asLong(12345678901L));\n-        assertEquals(0.0, n.asDouble());\n-        assertEquals(-19.25, n.asDouble(-19.25));\n-    }\n-    \n-    protected void assertNodeNumbers(JsonNode n, int expInt, double expDouble)\n-    {\n-        assertEquals(expInt, n.asInt());\n-        assertEquals(expInt, n.asInt(-42));\n-        assertEquals((long) expInt, n.asLong());\n-        assertEquals((long) expInt, n.asLong(19L));\n-        assertEquals(expDouble, n.asDouble());\n-        assertEquals(expDouble, n.asDouble(-19.25));\n-    }\n     \n     /*\n     /**********************************************************\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestJsonNode.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestJsonNode.java\n package com.fasterxml.jackson.databind.node;\n-\n-import java.math.BigInteger;\n-import java.math.BigDecimal;\n-\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n  * Basic tests for {@link JsonNode} base class and some features\n  * of implementation classes\n  */\n-public class TestJsonNode\n-    extends BaseMapTest\n+public class TestJsonNode extends NodeTestBase\n {\n-    public void testBasicsWithNullNode() throws Exception\n-    {\n-        // Let's use something that doesn't add much beyond JsonNode base\n-        NullNode n = NullNode.instance;\n-\n-        // basic properties\n-        assertFalse(n.isContainerNode());\n-        assertFalse(n.isBigDecimal());\n-        assertFalse(n.isBigInteger());\n-        assertFalse(n.isBinary());\n-        assertFalse(n.isBoolean());\n-        assertFalse(n.isPojo());\n-        assertFalse(n.isMissingNode());\n-\n-        // fallback accessors\n-        assertFalse(n.booleanValue());\n-        assertNull(n.numberValue());\n-        assertEquals(0, n.intValue());\n-        assertEquals(0L, n.longValue());\n-        assertEquals(BigDecimal.ZERO, n.decimalValue());\n-        assertEquals(BigInteger.ZERO, n.bigIntegerValue());\n-\n-        assertEquals(0, n.size());\n-        assertFalse(n.elements().hasNext());\n-        assertFalse(n.fieldNames().hasNext());\n-        // path is never null; but does point to missing node\n-        assertNotNull(n.path(\"xyz\"));\n-        assertTrue(n.path(\"xyz\").isMissingNode());\n-\n-        assertFalse(n.has(\"field\"));\n-        assertFalse(n.has(3));\n-\n-        // 1.6:\n-        assertNodeNumbers(n, 0, 0.0);\n-    }\n-\n     public void testText()\n     {\n         assertNull(TextNode.valueOf(null));\n         // but if wrapping actual number, use it\n         assertNodeNumbers(new POJONode(Integer.valueOf(123)), 123, 123.0);\n     }\n-\n-    public void testMissing()\n-    {\n-        MissingNode n = MissingNode.getInstance();\n-        assertEquals(JsonToken.NOT_AVAILABLE, n.asToken());\n-        // as per [JACKSON-775]\n-        assertEquals(\"\", n.asText());\n-        assertStandardEquals(n);\n-        assertEquals(\"\", n.toString());\n-\n-        // missing acts same as null, so:\n-        assertNodeNumbers(n, 0, 0.0);\n-    }\n }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestMissingNode.java\n+package com.fasterxml.jackson.databind.node;\n+\n+import com.fasterxml.jackson.core.JsonToken;\n+\n+public class TestMissingNode extends NodeTestBase\n+{\n+    public void testMissing()\n+    {\n+        MissingNode n = MissingNode.getInstance();\n+        assertEquals(JsonToken.NOT_AVAILABLE, n.asToken());\n+        // as per [JACKSON-775]\n+        assertEquals(\"\", n.asText());\n+        assertStandardEquals(n);\n+        assertEquals(\"\", n.toString());\n+\n+        /* As of 2.0, MissingNode is considered non-numeric, meaning\n+         * that default values are served.\n+         */\n+        assertNodeNumbersForNonNumeric(n);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestNullNode.java\n+package com.fasterxml.jackson.databind.node;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+\n+public class TestNullNode extends NodeTestBase\n+{\n+    public void testBasicsWithNullNode() throws Exception\n+    {\n+        // Let's use something that doesn't add much beyond JsonNode base\n+        NullNode n = NullNode.instance;\n+\n+        // basic properties\n+        assertFalse(n.isContainerNode());\n+        assertFalse(n.isBigDecimal());\n+        assertFalse(n.isBigInteger());\n+        assertFalse(n.isBinary());\n+        assertFalse(n.isBoolean());\n+        assertFalse(n.isPojo());\n+        assertFalse(n.isMissingNode());\n+\n+        // fallback accessors\n+        assertFalse(n.booleanValue());\n+        assertNull(n.numberValue());\n+        assertEquals(0, n.intValue());\n+        assertEquals(0L, n.longValue());\n+        assertEquals(BigDecimal.ZERO, n.decimalValue());\n+        assertEquals(BigInteger.ZERO, n.bigIntegerValue());\n+\n+        assertEquals(0, n.size());\n+        assertFalse(n.elements().hasNext());\n+        assertFalse(n.fieldNames().hasNext());\n+        // path is never null; but does point to missing node\n+        assertNotNull(n.path(\"xyz\"));\n+        assertTrue(n.path(\"xyz\").isMissingNode());\n+\n+        assertFalse(n.has(\"field\"));\n+        assertFalse(n.has(3));\n+\n+        // 1.6:\n+        assertNodeNumbersForNonNumeric(n);\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestNumberNodes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestNumberNodes.java\n  * Basic tests for {@link JsonNode} implementations that\n  * contain numeric values.\n  */\n-public class TestNumberNodes extends com.fasterxml.jackson.databind.BaseMapTest\n+public class TestNumberNodes extends NodeTestBase\n {\n     public void testInt()\n     {", "timestamp": 1328997267, "metainfo": ""}