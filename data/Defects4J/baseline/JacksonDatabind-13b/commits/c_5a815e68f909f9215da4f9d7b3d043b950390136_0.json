{"sha": "5a815e68f909f9215da4f9d7b3d043b950390136", "log": "Fix ArrayNode.equals() as well (bad merge?)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n      */\n \n     @Override\n-    public boolean equals(Object o)\n+    public final boolean equals(Object o)\n     {\n         if (o == this) return true;\n         if (o == null) return false;\n         if (o.getClass() != getClass()) { // final class, can do this\n             return false;\n         }\n-        ArrayNode other = (ArrayNode) o;\n+        /* This is bit convoluted, but the goal is to make it possible to\n+         * fully override equality comparison, even though it is\n+         * asymmetric (i.e. can be called on either side, but we\n+         * want behavior to match).\n+         */\n+        return _equals((ArrayNode) o);\n+    }\n+\n+    /**\n+     * Method that sub-classes should override, if equality comparison\n+     * needs additional verification beyond defaults.\n+     *\n+     * @since 2.1\n+     */\n+    protected boolean _equals(ArrayNode other)\n+    {\n+        return _stdEquals(other)\n+                &&_customEquals(other)\n+                && other._customEquals(this)\n+                ;\n+    }\n+    \n+    /**\n+     * Method that sub-classes should override, if equality comparison\n+     * needs additional verification beyond defaults.\n+     *\n+     * @since 2.1\n+     */\n+    protected boolean _customEquals(ArrayNode other) {\n+        return true;\n+    }\n+\n+    /**\n+     * Standard equality check, which may also be overridden by\n+     * sub-classes if necessary (but usually isn't).\n+     *\n+     * @since 2.1\n+     */\n+    protected final boolean _stdEquals(ArrayNode other)\n+    {\n         if (_children == null || _children.size() == 0) {\n             return other.size() == 0;\n         }", "timestamp": 1353351214, "metainfo": ""}