{"sha": "5f177cc6a1fc10de8bca2f42e28f9f0c211b94b1", "log": "cosmetic", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n         throws IOException, JsonProcessingException\n     {\n         JsonToken t = jp.getCurrentToken();\n-\n+        \n         if (t == JsonToken.VALUE_NULL) {\n             return (_nullProvider == null) ? null : _nullProvider.nullValue(ctxt);\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReferenceProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReferenceProperty.java\n     public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance)\n         throws IOException, JsonProcessingException\n     {\n-        boolean usingIdentityInfo = _objectIdInfo != null || _valueDeserializer.getObjectIdReader() != null;\n+        boolean usingIdentityInfo = (_objectIdInfo != null) || (_valueDeserializer.getObjectIdReader() != null);\n         try {\n             return setAndReturn(instance, deserialize(jp, ctxt));\n         } catch (UnresolvedForwardReference reference) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java\n import java.lang.annotation.Annotation;\n \n import com.fasterxml.jackson.core.JsonParser;\n-import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.*;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n \n     @Override\n     public void deserializeAndSet(JsonParser jp, DeserializationContext ctxt,\n-            Object instance)\n-        throws IOException, JsonProcessingException\n+            Object instance) throws IOException\n     {\n         deserializeSetAndReturn(jp, ctxt, instance);\n     }\n \n     @Override\n     public Object deserializeSetAndReturn(JsonParser jp,\n-    \t\tDeserializationContext ctxt, Object instance)\n-        throws IOException, JsonProcessingException\n+    \t\tDeserializationContext ctxt, Object instance) throws IOException\n     {\n         // note: no null checks (unlike usually); deserializer should fail if one found\n         Object id = _valueDeserializer.deserialize(jp, ctxt);\n     }\n \n     @Override\n-    public Object setAndReturn(Object instance, Object value)\n-        throws IOException\n+    public Object setAndReturn(Object instance, Object value) throws IOException\n     {\n         SettableBeanProperty idProp = _objectIdReader.idProperty;\n         if (idProp == null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/UUIDDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/UUIDDeserializer.java\n         throw new NumberFormatException(\"Non-hex character '\"+c+\"', not valid character for a UUID String\"\n                 +\"' (value 0x\"+Integer.toHexString(c)+\") for UUID String \\\"\"+uuidStr+\"\\\"\");\n     }\n-    \n+\n     private UUID _fromBytes(byte[] bytes, DeserializationContext ctxt) throws IOException {\n         if (bytes.length != 16) {\n             ctxt.mappingException(\"Can only construct UUIDs from byte[16]; got \"+bytes.length+\" bytes\");", "timestamp": 1407479218, "metainfo": ""}