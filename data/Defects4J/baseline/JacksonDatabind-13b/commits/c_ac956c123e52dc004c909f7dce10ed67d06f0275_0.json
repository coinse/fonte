{"sha": "ac956c123e52dc004c909f7dce10ed67d06f0275", "log": "Add a test to verify that #557 isn't a real bug", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/creators/SingleArgCreatorTest.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/SingleArgCreatorTest.java\n package com.fasterxml.jackson.databind.creators;\n \n import com.fasterxml.jackson.annotation.*;\n-\n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;\n+import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;\n \n public class SingleArgCreatorTest extends BaseMapTest\n {\n         public String getSs() { return _ss; }\n     }\n \n+    // [Databind#557]\n+    \n+    static class StringyBean\n+    {\n+        public final String value;\n+\n+        private StringyBean(String value) { this.value = value; }\n+\n+        public String getValue() {\n+            return value;\n+        }\n+    }\n+\n+    @SuppressWarnings(\"serial\")\n+    static class MyParamIntrospector extends JacksonAnnotationIntrospector\n+    {\n+        @Override\n+        public String findImplicitPropertyName(AnnotatedMember param) {\n+            if (param instanceof AnnotatedParameter) {\n+                AnnotatedParameter ap = (AnnotatedParameter) param;\n+                switch (ap.getIndex()) {\n+                case 0: return \"value\";\n+                }\n+                return \"param\"+ap.getIndex();\n+            }\n+            return super.findImplicitPropertyName(param);\n+        }\n+    }\n+\n     /*\n     /**********************************************************\n     /* Test methods\n                 SingleNamedStringBean.class);\n         assertEquals(\"foobar\", bean._ss);\n     }\n+\n+    public void testSingleStringArgWithImplicitName() throws Exception\n+    {\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.setAnnotationIntrospector(new MyParamIntrospector());\n+        StringyBean bean = mapper.readValue(quote(\"foobar\"), StringyBean.class);\n+        assertEquals(\"foobar\", bean.getValue());\n+    }    \n }\n+", "timestamp": 1411537882, "metainfo": ""}