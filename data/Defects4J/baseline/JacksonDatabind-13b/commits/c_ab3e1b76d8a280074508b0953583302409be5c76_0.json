{"sha": "ab3e1b76d8a280074508b0953583302409be5c76", "log": "Minor fixes to schema productions for BigDecimal/BigInteger", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n         _concrete.put(Boolean.class.getName(), new BooleanSerializer(false));\n \n         // Other numbers, more complicated\n-        final JsonSerializer<?> ns = NumberSerializer.instance;\n-        _concrete.put(BigInteger.class.getName(), ns);\n-        _concrete.put(BigDecimal.class.getName(), ns);\n+        _concrete.put(BigInteger.class.getName(), new NumberSerializer(BigInteger.class));\n+        _concrete.put(BigDecimal.class.getName(),new NumberSerializer(BigDecimal.class));\n \n         // Other discrete non-container types:\n         // First, Date/Time zoo:\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java\n \n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.core.JsonParser;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor;\n \n /**\n  * like {@link BigInteger} and {@link BigDecimal}.\n  */\n @JacksonStdImpl\n-public final class NumberSerializer\n+public class NumberSerializer\n     extends StdScalarSerializer<Number>\n {\n-    public final static NumberSerializer instance = new NumberSerializer();\n+    /**\n+     * Static instance that is only to be used for {@link java.lang.Number}.\n+     */\n+    public final static NumberSerializer instance = new NumberSerializer(Number.class);\n \n-    public NumberSerializer() { super(Number.class); }\n+    protected final boolean _isInt;\n+\n+    @Deprecated // since 2.5\n+    public NumberSerializer() {\n+        super(Number.class);\n+        _isInt = false;\n+    }\n+\n+    /**\n+     * @since 2.5\n+     */\n+    public NumberSerializer(Class<? extends Number> rawType) {\n+        super(rawType, false);\n+        // since this will NOT be constructed for Integer or Long, only case is:\n+        _isInt = (rawType == BigInteger.class);\n+    }\n \n     @Override\n     public void serialize(Number value, JsonGenerator jgen, SerializerProvider provider) throws IOException\n     {\n+        // should mostly come in as one of these two:\n         if (value instanceof BigDecimal) {\n             jgen.writeNumber((BigDecimal) value);\n         } else if (value instanceof BigInteger) {\n \n     @Override\n     public JsonNode getSchema(SerializerProvider provider, Type typeHint) {\n-        return createSchemaNode(\"number\", true);\n+        return createSchemaNode(_isInt ? \"integer\" : \"number\", true);\n     }\n-    \n+\n     @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n     {\n-        // Hmmh. What should it be? Ideally should probably indicate BIG_DECIMAL\n-        // to ensure no information is lost? But probably won't work that well...\n-        JsonNumberFormatVisitor v2 = visitor.expectNumberFormat(typeHint);\n-        if (v2 != null) {\n-            v2.numberType(JsonParser.NumberType.BIG_DECIMAL);\n+        if (_isInt) {\n+            JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat(typeHint);\n+            if (v2 != null) {\n+                v2.numberType(JsonParser.NumberType.BIG_INTEGER);\n+            }\n+        } else {\n+            JsonNumberFormatVisitor v2 = visitor.expectNumberFormat(typeHint);\n+            if (v2 != null) {\n+                Class<?> h = handledType();\n+                if (h == BigDecimal.class) {\n+                    v2.numberType(JsonParser.NumberType.BIG_DECIMAL);\n+                } // otherwise it's for Number... anything we could do there?\n+            }\n         }\n     }\n }", "timestamp": 1415404534, "metainfo": ""}