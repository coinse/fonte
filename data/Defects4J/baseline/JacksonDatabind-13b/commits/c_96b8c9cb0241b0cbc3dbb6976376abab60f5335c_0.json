{"sha": "96b8c9cb0241b0cbc3dbb6976376abab60f5335c", "log": "Merge pull request #317 from sethp-jive/master  Fixing {Object,Array}Deserializer's illegal nullValue", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java\n  */\n @SuppressWarnings(\"serial\")\n public class JsonNodeDeserializer\n-    extends BaseNodeDeserializer\n+    extends BaseNodeDeserializer<JsonNode>\n {\n     /**\n      * Singleton instance of generic deserializer for {@link JsonNode}.\n      */\n     private final static JsonNodeDeserializer instance = new JsonNodeDeserializer();\n \n-    protected JsonNodeDeserializer() { }\n+    protected JsonNodeDeserializer() { super(JsonNode.class); }\n \n     /**\n      * Factory method for accessing deserializer for specific node type\n     /* Actual deserializer implementations\n     /**********************************************************\n      */\n+\n+    @Override\n+    public JsonNode getNullValue() {\n+        return NullNode.getInstance();\n+    }\n \n     /**\n      * Implementation that will produce types of any JSON nodes; not just one\n      */\n \n     final static class ObjectDeserializer\n-        extends BaseNodeDeserializer\n+        extends BaseNodeDeserializer<ObjectNode>\n     {\n         private static final long serialVersionUID = 1L;\n \n         protected final static ObjectDeserializer _instance = new ObjectDeserializer();\n \n-        protected ObjectDeserializer() { }\n+        protected ObjectDeserializer() { super(ObjectNode.class); }\n \n         public static ObjectDeserializer getInstance() { return _instance; }\n         \n     }\n         \n     final static class ArrayDeserializer\n-        extends BaseNodeDeserializer\n+        extends BaseNodeDeserializer<ArrayNode>\n     {\n         private static final long serialVersionUID = 1L;\n \n         protected final static ArrayDeserializer _instance = new ArrayDeserializer();\n \n-        protected ArrayDeserializer() { }\n+        protected ArrayDeserializer() { super(ArrayNode.class); }\n \n         public static ArrayDeserializer getInstance() { return _instance; }\n         \n  * implementations\n  */\n @SuppressWarnings(\"serial\")\n-abstract class BaseNodeDeserializer\n-    extends StdDeserializer<JsonNode>\n+abstract class BaseNodeDeserializer<T extends JsonNode>\n+    extends StdDeserializer<T>\n {\n-    public BaseNodeDeserializer()\n-    {\n-        super(JsonNode.class);\n+    public BaseNodeDeserializer(Class<T> vc)\n+    {\n+        super(vc);\n     }\n     \n     @Override\n          * a priori. So:\n          */\n         return typeDeserializer.deserializeTypedFromAny(jp, ctxt);\n-    }\n-\n-    @Override\n-    public JsonNode getNullValue() {\n-        return NullNode.getInstance();\n-    }\n-\n-    @Override\n-    public Class<?> handledType() {\n-        return JsonNode.class;\n     }\n \n     /*\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestTreeDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestTreeDeserialization.java\n package com.fasterxml.jackson.databind.node;\n \n-import java.io.*;\n-\n-import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n \n /**\n  * This unit test suite tries to verify that JsonNode-based trees\n         assertNotNull(n);\n         assertTrue(n.isNull());\n     }\n+\n+    final static class CovarianceBean {\n+        ObjectNode _object;\n+        ArrayNode _array;\n+\n+        public void setObject(ObjectNode n) { _object = n; }\n+        public void setArray(ArrayNode n) { _array = n; }\n+    }\n+\n+    public void testNullHandlingCovariance() throws Exception\n+    {\n+        String JSON = \"{\\\"object\\\" : null, \\\"array\\\" : null }\";\n+        CovarianceBean bean = objectMapper().readValue(JSON, CovarianceBean.class);\n+\n+        ObjectNode on = bean._object;\n+        assertNull(on);\n+\n+        ArrayNode an = bean._array;\n+        assertNull(an);\n+    }\n }", "timestamp": 1380839133, "metainfo": ""}