{"sha": "b5800973de79de9a1534d50bc5c7e49d17cc11de", "log": "benchmark improvements: longer per-iteration runtime", "commit": "\n--- a/src/test/java/perf/ManualReadPerfUntyped.java\n+++ b/src/test/java/perf/ManualReadPerfUntyped.java\n \n public class ManualReadPerfUntyped extends ObjectReaderBase\n {\n+    @Override\n+    protected int targetSizeMegs() { return 10; }\n+    \n     public static void main(String[] args) throws Exception\n     {\n         if (args.length != 1) {\n--- a/src/test/java/perf/ManualReadPerfUntypedReader.java\n+++ b/src/test/java/perf/ManualReadPerfUntypedReader.java\n \n public class ManualReadPerfUntypedReader extends ObjectReaderBase\n {\n+    @Override\n+    protected int targetSizeMegs() { return 15; }\n+\n     public static void main(String[] args) throws Exception\n     {\n         if (args.length != 1) {\n--- a/src/test/java/perf/ManualReadPerfUntypedStream.java\n+++ b/src/test/java/perf/ManualReadPerfUntypedStream.java\n \n public class ManualReadPerfUntypedStream extends ObjectReaderBase\n {\n+    @Override\n+    protected int targetSizeMegs() { return 15; }\n+    \n     public static void main(String[] args) throws Exception\n     {\n         if (args.length != 1) {\n--- a/src/test/java/perf/ManualReadPerfWithMedia.java\n+++ b/src/test/java/perf/ManualReadPerfWithMedia.java\n \n public class ManualReadPerfWithMedia extends ObjectReaderBase\n {\n+    @Override\n+    protected int targetSizeMegs() { return 8; }\n+    \n     public static void main(String[] args) throws Exception\n     {\n         if (args.length != 0) {\n--- a/src/test/java/perf/ManualReadPerfWithRecord.java\n+++ b/src/test/java/perf/ManualReadPerfWithRecord.java\n  */\n public class ManualReadPerfWithRecord extends ObjectReaderBase\n {\n+    @Override\n+    protected int targetSizeMegs() { return 8; }\n+\n     public static void main(String[] args) throws Exception\n     {\n         if (args.length != 0) {\n--- a/src/test/java/perf/ManualReadPerfWithUUID.java\n+++ b/src/test/java/perf/ManualReadPerfWithUUID.java\n         public UUIDNative(UUID[] ids) { this.ids = ids; }\n     }\n \n+    @Override\n+    protected int targetSizeMegs() { return 8; }\n+    \n     @SuppressWarnings(\"serial\")\n     static class SlowDeser extends FromStringDeserializer<UUID>\n     {\n--- a/src/test/java/perf/ObjectReaderBase.java\n+++ b/src/test/java/perf/ObjectReaderBase.java\n     protected int REPS;\n \n     private double[] timeMsecs;;\n+\n+    protected abstract int targetSizeMegs();\n     \n     protected void testFromBytes(ObjectMapper mapper1, String desc1,\n             Object inputValue1, Class<?> inputClass1,\n         final byte[] byteInput1 = mapper1.writeValueAsBytes(inputValue1);\n         final byte[] byteInput2 = mapper2.writeValueAsBytes(inputValue2);\n         // Let's try to guestimate suitable size... to get to N megs to process\n-        REPS = (int) ((double) (8 * 1000 * 1000) / (double) byteInput1.length);\n+        REPS = (int) ((double) (targetSizeMegs() * 1000 * 1000) / (double) byteInput1.length);\n \n         // sanity check:\n         /*T1 back1 =*/ mapper1.readValue(byteInput1, inputClass1);", "timestamp": 1398743511, "metainfo": ""}