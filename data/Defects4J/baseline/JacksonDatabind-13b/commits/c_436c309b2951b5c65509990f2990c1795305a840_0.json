{"sha": "436c309b2951b5c65509990f2990c1795305a840", "log": "Fixed #733", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java\n             return _throwNoSuchElement();\n         }\n         _hasNextChecked = false;\n-        T result;\n-        \n-        if (_updatedValue == null) {\n-            result = _deserializer.deserialize(_parser, _context);\n-        } else{\n-            _deserializer.deserialize(_parser, _context, _updatedValue);\n-            result = _updatedValue;\n-        }\n-        // Need to consume the token too\n-        _parser.clearCurrentToken();\n-        return result;\n+\n+        try {\n+            if (_updatedValue == null) {\n+                return _deserializer.deserialize(_parser, _context);\n+            } else{\n+                _deserializer.deserialize(_parser, _context, _updatedValue);\n+                return _updatedValue;\n+            }\n+        } finally {\n+            /* 24-Mar-2015, tatu: As per [#733], need to mark token consumed no\n+             *   matter what, to avoid infinite loop for certain failure cases.\n+             *   For 2.6 need to improve further.\n+             */\n+            // Need to consume the token too\n+            _parser.clearCurrentToken();\n+        }\n     }\n \n     /**\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/seq/ReadRecoveryTest.java\n+package com.fasterxml.jackson.databind.seq;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.seq.ReadValuesTest.Bean;\n+\n+/**\n+ * Tests to verify aspects of error recover for reading using\n+ * iterator.\n+ */\n+public class ReadRecoveryTest extends BaseMapTest\n+{\n+    static class Bean {\n+        public int a;\n+\n+        @Override public String toString() { return \"{Bean, a=\"+a+\"}\"; }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests; root-level value sequences via Mapper\n+    /**********************************************************\n+     */\n+\n+    private final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    public void testRootBeans() throws Exception\n+    {\n+        final String JSON = aposToQuotes(\"{'a':3} {'b':5}\");\n+        MappingIterator<Bean> it = MAPPER.reader(Bean.class).readValues(JSON);\n+        // First one should be fine\n+        assertTrue(it.hasNextValue());\n+        Bean bean = it.nextValue();\n+        assertEquals(3, bean.a);\n+        // but second one not\n+        try {\n+            bean = it.nextValue();\n+            fail(\"Should not have succeeded\");\n+        } catch (JsonMappingException e) {\n+            verifyException(e, \"Unrecognized field\");\n+        }\n+        // 24-Mar-2015, tatu: With 2.5, best we can do is to avoid infinite loop;\n+        //    also, since the next token is END_OBJECT, will produce empty Object\n+        assertTrue(it.hasNextValue());\n+        bean = it.nextValue();\n+        assertEquals(0, bean.a);\n+        // and we should be done now\n+        assertFalse(it.hasNextValue());\n+        it.close();\n+    }\n+}", "timestamp": 1427258203, "metainfo": ""}