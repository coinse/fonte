{"sha": "ef4115cacf4526a69c0613a61b80317a676955df", "log": "Last tweaks wrt #614", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/BeanDescription.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/BeanDescription.java\n     /* Basic API for finding properties\n     /**********************************************************\n      */\n-    \n+\n     /**\n      * @return Ordered Map with logical property name as key, and\n      *    matching getter method as value.\n      */\n     public abstract List<BeanPropertyDefinition> findProperties();\n-    \n+\n     /**\n      * Method for locating all back-reference properties (setters, fields) bean has\n      */\n     public abstract Map<String,AnnotatedMember> findBackReferenceProperties();\n \n     public abstract Set<String> getIgnoredPropertyNames();\n-    \n+\n     /*\n     /**********************************************************\n     /* Basic API for finding creator members\n     /**********************************************************\n      */\n-    \n+\n     public abstract List<AnnotatedConstructor> getConstructors();\n-    \n+\n     public abstract List<AnnotatedMethod> getFactoryMethods();\n-    \n+\n     /**\n      * Method that will locate the no-arg constructor for this class,\n      * if it has one, and that constructor has not been marked as\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n \n             // some single-arg factory methods (String, number) are auto-detected\n             if (argCount == 1) {\n-                BeanPropertyDefinition propDef = (propDefs == null) ? null : propDefs[0];\n-                boolean hasExplicitName = (propDef != null) && propDef.isExplicitlyNamed();\n-                Object injectId = intr.findInjectableValueId(ctor.getParameter(0));\n-\n-                JsonCreator.Mode mode = intr.findCreatorBinding(ctor);\n-                \n-                boolean withProps = (mode == JsonCreator.Mode.PROPERTIES);\n-                if (!withProps && (mode != JsonCreator.Mode.DELEGATING)) {\n-                    if (hasExplicitName || (injectId != null)) {\n-                        withProps = true;\n-                    } else {\n-                        // TODO: one more thing -- if property has matching field\n-                        // or setter, also consider property-based\n-                    }\n-                }\n-                if (withProps) {\n+                BeanPropertyDefinition argDef = (propDefs == null) ? null : propDefs[0];\n+                boolean useProps = _checkIfCreatorPropertyBased(intr, ctor, argDef);\n+\n+                if (useProps) {\n                     CreatorProperty[] properties = new CreatorProperty[1];\n-                    PropertyName name = (propDef == null) ? null : propDef.getFullName();\n-                    properties[0] = constructCreatorProperty(ctxt, beanDesc, name, 0, ctor.getParameter(0), injectId);\n+                    PropertyName name = (argDef == null) ? null : argDef.getFullName();\n+                    AnnotatedParameter arg = ctor.getParameter(0);\n+                    properties[0] = constructCreatorProperty(ctxt, beanDesc, name, 0, arg,\n+                            intr.findInjectableValueId(arg));\n                     creators.addPropertyCreator(ctor, properties);\n                 } else {\n                     /*boolean added = */ _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                             vchecker.isCreatorVisible(ctor));\n                     // one more thing: sever link to creator property, to avoid possible later\n                     // problems with \"unresolved\" constructor property\n-                    if (propDef != null) {\n-                        ((POJOPropertyBuilder) propDef).removeConstructors();\n+                    if (argDef != null) {\n+                        ((POJOPropertyBuilder) argDef).removeConstructors();\n                     }\n                 }\n                 // regardless, fully handled\n         }\n     }\n \n+    protected boolean _checkIfCreatorPropertyBased(AnnotationIntrospector intr,\n+            AnnotatedWithParams creator, BeanPropertyDefinition propDef)\n+    {\n+        JsonCreator.Mode mode = intr.findCreatorBinding(creator);\n+\n+        if (mode == JsonCreator.Mode.PROPERTIES) {\n+            return true;\n+        }\n+        if (mode == JsonCreator.Mode.DELEGATING) {\n+            return false;\n+        }\n+        // If explicit name, or inject id, property-based\n+        if (((propDef != null) && propDef.isExplicitlyNamed())\n+                || (intr.findInjectableValueId(creator.getParameter(0)) != null)) {\n+            return true;\n+        }\n+        if (propDef != null) {\n+            // One more thing: if implicit name matches property with a getter\n+            // or field, we'll consider it property-based as well\n+            String implName = propDef.getName();\n+            if (implName != null && !implName.isEmpty()) {\n+                if (propDef.couldSerialize()) {\n+                    return true;\n+                }\n+            }\n+        }\n+        // in absence of everything else, default to delegating\n+        return false;\n+    }\n+    \n     protected boolean _handleSingleArgumentConstructor(DeserializationContext ctxt,\n             BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n             AnnotationIntrospector intr, CreatorCollector creators,\n             final BeanPropertyDefinition[] propDefs = creatorParams.get(factory);\n             // some single-arg factory methods (String, number) are auto-detected\n             if (argCount == 1) {\n-                BeanPropertyDefinition propDef = (propDefs == null) ? null : propDefs[0];\n-                boolean hasExplicitName = (propDef != null) && propDef.isExplicitlyNamed();\n-                final Object injectId = intr.findInjectableValueId(factory.getParameter(0));\n-\n-                JsonCreator.Mode mode = intr.findCreatorBinding(factory);\n-                \n-                boolean withProps = (mode == JsonCreator.Mode.PROPERTIES);\n-                if (!withProps && (mode != JsonCreator.Mode.DELEGATING)) {\n-                    if (hasExplicitName || (injectId != null)) {\n-                        withProps = true;\n-                    } else {\n-                        // TODO: one more thing -- if property has matching field\n-                        // or setter, also consider property-based\n-                    }\n-                }\n-                if (!withProps) { // not property based but delegating\n+                BeanPropertyDefinition argDef = (propDefs == null) ? null : propDefs[0];\n+                boolean useProps = _checkIfCreatorPropertyBased(intr, factory, argDef);\n+                if (!useProps) { // not property based but delegating\n                     /*boolean added=*/ _handleSingleArgumentFactory(config, beanDesc, vchecker, intr, creators,\n                             factory, isCreator);\n                     // otherwise just ignored\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n                     +\" (need to add/enable type information?)\");\n         }\n         throw JsonMappingException.from(jp, \"No suitable constructor found for type \"\n-                +_beanType+\": can not instantiate from JSON object (need to add/enable type information?)\");\n+                +_beanType+\": can not instantiate from JSON object (missing default constructor or creator, or perhaps need to add/enable type information?)\");\n     }\n \n     protected abstract Object _deserializeUsingPropertyBased(final JsonParser jp,\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n \n     @Override\n     public ObjectIdInfo getObjectIdInfo() { return  _objectIdInfo; }\n-    \n+\n     @Override\n     public List<BeanPropertyDefinition> findProperties() {\n         return _properties;\n         }\n         return _ignoredPropertyNames;\n     }\n-    \n+\n     @Override\n     public boolean hasKnownClassAnnotations() {\n         return _classInfo.hasAnnotations();\n--- a/src/test/java/com/fasterxml/jackson/databind/creators/SingleArgCreatorTest.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/SingleArgCreatorTest.java\n         }\n     }\n \n+    static class StringyBeanWithProps\n+    {\n+        public final String value;\n+\n+        @JsonCreator\n+        private StringyBeanWithProps(String v) { value = v; }\n+\n+        public String getValue() {\n+            return value;\n+        }\n+    }\n+    \n     @SuppressWarnings(\"serial\")\n     static class MyParamIntrospector extends JacksonAnnotationIntrospector\n     {\n+        private final String name;\n+        \n+        public MyParamIntrospector(String n) { name = n; }\n+        \n         @Override\n         public String findImplicitPropertyName(AnnotatedMember param) {\n             if (param instanceof AnnotatedParameter) {\n                 AnnotatedParameter ap = (AnnotatedParameter) param;\n                 switch (ap.getIndex()) {\n-                case 0: return \"value\";\n+                case 0: return name;\n                 }\n                 return \"param\"+ap.getIndex();\n             }\n     public void testSingleStringArgWithImplicitName() throws Exception\n     {\n         final ObjectMapper mapper = new ObjectMapper();\n-        mapper.setAnnotationIntrospector(new MyParamIntrospector());\n+        mapper.setAnnotationIntrospector(new MyParamIntrospector(\"value\"));\n         StringyBean bean = mapper.readValue(quote(\"foobar\"), StringyBean.class);\n         assertEquals(\"foobar\", bean.getValue());\n     }    \n \n+    // [databind#714]\n+    public void testSingleImplicitlyNamedNotDelegating() throws Exception\n+    {\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.setAnnotationIntrospector(new MyParamIntrospector(\"value\"));\n+        StringyBeanWithProps bean = mapper.readValue(\"{\\\"value\\\":\\\"x\\\"}\", StringyBeanWithProps.class);\n+        assertEquals(\"x\", bean.getValue());\n+    }    \n+    \n     // [databind#714]\n     public void testSingleExplicitlyNamedButDelegating() throws Exception\n     {\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestForwardReference.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestForwardReference.java\n package com.fasterxml.jackson.databind.deser;\n \n-import com.fasterxml.jackson.annotation.JsonIdentityInfo;\n-import com.fasterxml.jackson.annotation.JsonInclude;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import com.fasterxml.jackson.annotation.JsonSubTypes;\n-import com.fasterxml.jackson.annotation.JsonTypeInfo;\n-import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n-import com.fasterxml.jackson.core.JsonParseException;\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n import com.fasterxml.jackson.databind.BaseMapTest;\n import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.SerializationFeature;\n-\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.List;\n \n /**\n  * Test for testing forward reference handling\n \t}\n \n \t@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY)\n-\tprivate static class YetAnotherClass\n+\tstatic class YetAnotherClass\n \t{\n \t\tpublic YetAnotherClass() {}\n \t\tpublic ForwardReferenceClass frc;", "timestamp": 1416210223, "metainfo": ""}