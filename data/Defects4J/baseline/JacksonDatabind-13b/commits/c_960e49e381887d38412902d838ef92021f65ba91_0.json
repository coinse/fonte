{"sha": "960e49e381887d38412902d838ef92021f65ba91", "log": "Minor improvements to error reporting, related to work on #691", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java\n         if (clz == null) {\n             clz = value.getClass();\n         }\n-        throw new UnsupportedOperationException(\"Type id handling not implemented for type \"+clz.getName());\n+        throw serializers.mappingException(\"Type id handling not implemented for type %s (by serializer of type %s)\",\n+                clz.getName(), getClass().getName());\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n     \n     /*\n     /********************************************************\n-    /* Convenience methods\n+    /* Convenience methods for serializing using default methods\n     /********************************************************\n      */\n \n      * field values are best handled calling\n      * {@link #defaultSerializeField} instead.\n      */\n-    public final void defaultSerializeValue(Object value, JsonGenerator jgen)\n-        throws IOException, JsonProcessingException\n+    public final void defaultSerializeValue(Object value, JsonGenerator jgen) throws IOException\n     {\n         if (value == null) {\n             if (_stdNullValueSerializer) { // minor perf optimization\n      * null) using standard serializer locating functionality.\n      */\n     public final void defaultSerializeField(String fieldName, Object value, JsonGenerator jgen)\n-        throws IOException, JsonProcessingException\n+        throws IOException\n     {\n         jgen.writeFieldName(fieldName);\n         if (value == null) {\n         }\n     }\n \n-    /*\n-    /**********************************************************\n-    /* Convenience methods\n-    /**********************************************************\n-     */\n-\n     /**\n      * Method that will handle serialization of Date(-like) values, using\n      * {@link SerializationConfig} settings to determine expected serialization\n      * Java convention (and not date-only values like in SQL)\n      */\n     public final void defaultSerializeDateValue(long timestamp, JsonGenerator jgen)\n-        throws IOException, JsonProcessingException\n+        throws IOException\n     {\n         // [JACKSON-87]: Support both numeric timestamps and textual\n         if (isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)) {\n      * Java convention (and not date-only values like in SQL)\n      */\n     public final void defaultSerializeDateValue(Date date, JsonGenerator jgen)\n-        throws IOException, JsonProcessingException\n+        throws IOException\n     {\n         // [JACKSON-87]: Support both numeric timestamps and textual\n         if (isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)) {\n      * value (and if using textual representation, configured date format)\n      */\n     public void defaultSerializeDateKey(long timestamp, JsonGenerator jgen)\n-        throws IOException, JsonProcessingException\n+        throws IOException\n     {\n         if (isEnabled(SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS)) {\n             jgen.writeFieldName(String.valueOf(timestamp));\n      * based on {@link SerializationFeature#WRITE_DATE_KEYS_AS_TIMESTAMPS}\n      * value (and if using textual representation, configured date format)\n      */\n-    public void defaultSerializeDateKey(Date date, JsonGenerator jgen)\n-        throws IOException, JsonProcessingException\n+    public void defaultSerializeDateKey(Date date, JsonGenerator jgen) throws IOException\n     {\n         if (isEnabled(SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS)) {\n             jgen.writeFieldName(String.valueOf(date.getTime()));\n             jgen.writeFieldName(_dateFormat().format(date));\n         }\n     }\n-    \n-    public final void defaultSerializeNull(JsonGenerator jgen)\n-        throws IOException, JsonProcessingException\n+\n+    public final void defaultSerializeNull(JsonGenerator jgen) throws IOException\n     {\n         if (_stdNullValueSerializer) { // minor perf optimization\n             jgen.writeNull();\n \n     /*\n     /********************************************************\n+    /* Error reporting\n+    /********************************************************\n+     */\n+\n+    /**\n+     * @since 2.6\n+     */\n+    public JsonMappingException mappingException(String message, Object... args) {\n+        if (args != null && args.length > 0) {\n+            message = String.format(message, args);\n+        }\n+        return new JsonMappingException(message);\n+    }\n+\n+    /*\n+    /********************************************************\n     /* Helper methods\n     /********************************************************\n      */\n-    \n+\n     protected void _reportIncompatibleRootType(Object value, JavaType rootType)\n         throws IOException, JsonProcessingException\n     {\n     /* serializers\n     /**********************************************************\n      */\n-    \n+\n     /**\n      * Method that will try to construct a value serializer; and if\n      * one is successfully created, cache it for reuse.", "timestamp": 1423341279, "metainfo": ""}