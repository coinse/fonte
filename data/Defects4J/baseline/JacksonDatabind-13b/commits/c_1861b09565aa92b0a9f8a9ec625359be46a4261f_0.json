{"sha": "1861b09565aa92b0a9f8a9ec625359be46a4261f", "log": "bit more access for maps-vs-null-values", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/BeanDescription.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/BeanDescription.java\n     public abstract JsonInclude.Include findSerializationInclusion(JsonInclude.Include defValue);\n \n     /**\n+     * @since 2.5\n+     */\n+    public abstract JsonInclude.Include findSerializationInclusionForContent(JsonInclude.Include defValue);\n+    \n+    /**\n      * Method for checking what is the expected format for POJO, as\n      * defined by defaults and possible annotations.\n      * Note that this may be further refined by per-property annotations.\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n     public ObjectMapper enableDefaultTyping(DefaultTyping applicability, JsonTypeInfo.As includeAs)\n     {\n         /* 18-Sep-2014, tatu: Let's add explicit check to ensure no one tries to\n-         *   use \"As.EXTERNAL_PROPERTY\", since that will not work.\n+         *   use \"As.EXTERNAL_PROPERTY\", since that will not work (with 2.5+)\n          */\n         if (includeAs == JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n             throw new IllegalArgumentException(\"Can not use includeAs of \"+includeAs);\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n      * and per-class annotation (highest priority).\n      */\n     @Override\n-    public JsonInclude.Include findSerializationInclusion(JsonInclude.Include defValue)\n-    {\n+    public JsonInclude.Include findSerializationInclusion(JsonInclude.Include defValue) {\n         if (_annotationIntrospector == null) {\n             return defValue;\n         }\n         return _annotationIntrospector.findSerializationInclusion(_classInfo, defValue);\n+    }\n+\n+    @Override\n+    public JsonInclude.Include findSerializationInclusionForContent(JsonInclude.Include defValue) {\n+        if (_annotationIntrospector == null) {\n+            return defValue;\n+        }\n+        return _annotationIntrospector.findSerializationInclusionForContent(_classInfo, defValue);\n     }\n     \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java\n     }\n \n     /**\n-     * @deprecated Since 2.3, use variant that takes {@link SerializerProvider} as\n-     *   first argument -- to be removed from 2.4\n-     */\n-    @Deprecated\n-    protected final BeanPropertyWriter buildWriter(BeanPropertyDefinition propDef,\n-            JavaType declaredType, JsonSerializer<?> ser,\n-            TypeSerializer typeSer, TypeSerializer contentTypeSer,\n-            AnnotatedMember am, boolean defaultUseStaticTyping)\n-    {\n-        /* We will only retain this method until 2.4; left for now to explicitly\n-         * cause compilation/linking issue iff anyone has overridden the method\n-         * (hopefully not)\n-         */\n-        throw new IllegalStateException();\n-    }\n-\n-    /**\n      * @param contentTypeSer Optional explicit type information serializer\n      *    to use for contained values (only used for properties that are\n      *    of container type)\n             }\n             JavaType ct = serializationType.getContentType();\n             /* 03-Sep-2010, tatu: This is somehow related to [JACKSON-356], but I don't completely\n-             *   yet understand how pieces fit together. Still, better be explicit than rely on\n+             *   yet understand how pieces fit together. Still, better to be explicit than rely on\n              *   NPE to indicate an issue...\n              */\n             if (ct == null) {\n                 am, _beanDesc.getClassAnnotations(), declaredType,\n                 ser, typeSer, serializationType, suppressNulls, valueToSuppress);\n \n-        // 14-Oct-2013, tatu: And how about custom null serializer?\n+        // How about custom null serializer?\n         Object serDef = _annotationIntrospector.findNullSerializer(am);\n         if (serDef != null) {\n             bpw.assignNullSerializer(prov.serializerInstance(am, serDef));\n         }\n-        \n-        // [JACKSON-132]: Unwrapping\n+        // And then, handling of unwrapping\n         NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am);\n         if (unwrapper != null) {\n             bpw = bpw.unwrappingWriter(unwrapper);\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization.java\n import java.util.*;\n import java.util.concurrent.ConcurrentHashMap;\n \n+import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n             throw new UnsupportedOperationException();\n         }\n     }\n+\n+    // [databind#527]\n+    static class NoNullValuesMapContainer {\n+        @JsonInclude(content=JsonInclude.Include.NON_NULL)\n+        public Map<String,String> stuff = new LinkedHashMap<String,String>();\n+        \n+        public NoNullValuesMapContainer add(String key, String value) {\n+            stuff.put(key, value);\n+            return this;\n+        }\n+    }\n     \n     /*\n     /**********************************************************\n         json = MAPPER.writeValueAsString(array);\n         assertEquals(aposToQuotes(\"[{'answer':42}]\"), json);\n     }        \n+\n+    public void testNonNullValueMap() throws IOException\n+    {\n+        String json = MAPPER.writeValueAsString(new NoNullValuesMapContainer()\n+            .add(\"a\", \"foo\")\n+            .add(\"b\", null)\n+            .add(\"c\", \"bar\"));\n+        assertEquals(aposToQuotes(\"{'stuff':{'a':'foo','c':'bar'}}\"), json);\n+    }\n }", "timestamp": 1413691804, "metainfo": ""}