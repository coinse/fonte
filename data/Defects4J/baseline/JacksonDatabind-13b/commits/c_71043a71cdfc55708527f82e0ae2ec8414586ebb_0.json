{"sha": "71043a71cdfc55708527f82e0ae2ec8414586ebb", "log": "cleanup", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializerProvider.java\n package com.fasterxml.jackson.databind;\n \n-import com.fasterxml.jackson.core.io.SerializedString;\n-import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;\n-import com.fasterxml.jackson.databind.deser.DeserializerFactory;\n-import com.fasterxml.jackson.databind.deser.Deserializers;\n-import com.fasterxml.jackson.databind.deser.KeyDeserializers;\n-import com.fasterxml.jackson.databind.deser.ValueInstantiators;\n-\n+import com.fasterxml.jackson.databind.deser.*;\n \n /**\n  * Abstract class that defines API used by {@link ObjectMapper} and\n      */\n     public abstract JavaType mapAbstractType(DeserializationConfig config, JavaType type)\n         throws JsonMappingException;\n-\n-\n-    /**\n-     * Method that can be used to try find expected root name for given type\n-     */\n-    public abstract SerializedString findExpectedRootName(DeserializationConfig config, JavaType type)\n-        throws JsonMappingException;\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n import com.fasterxml.jackson.databind.type.SimpleType;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.fasterxml.jackson.databind.type.TypeModifier;\n+import com.fasterxml.jackson.databind.util.RootNameLookup;\n import com.fasterxml.jackson.databind.util.StdDateFormat;\n import com.fasterxml.jackson.databind.util.TokenBuffer;\n \n      * super/sub-types as needed.\n      */\n     protected SubtypeResolver _subtypeResolver;\n+\n+    /**\n+     * Cache for root names used when root-wrapping is enabled.\n+     */\n+    protected final RootNameLookup _rootNames;\n     \n     /*\n     /**********************************************************\n             }\n         }\n         _subtypeResolver = new StdSubtypeResolver();\n+        _rootNames = new RootNameLookup();\n         // and default type factory is shared one\n         _typeFactory = TypeFactory.defaultInstance();\n         _serializationConfig = new SerializationConfig(DEFAULT_BASE,\n     {\n         String expName = config.getRootName();\n         if (expName == null) {\n-            SerializedString sstr = _deserializerProvider.findExpectedRootName(config, rootType);\n+            SerializedString sstr = _rootNames.findRootName(rootType, config);\n             expName = sstr.getValue();\n         }\n         if (jp.getCurrentToken() != JsonToken.START_OBJECT) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n import com.fasterxml.jackson.databind.node.NullNode;\n import com.fasterxml.jackson.databind.node.TreeTraversingParser;\n import com.fasterxml.jackson.databind.type.SimpleType;\n+import com.fasterxml.jackson.databind.util.RootNameLookup;\n \n /**\n  * Builder object that can be used for per-serialization configuration of\n      * Factory used for constructing {@link JsonGenerator}s\n      */\n     protected final JsonFactory _jsonFactory;\n+\n+    /**\n+     * Cache for root names used when root-wrapping is enabled.\n+     */\n+    protected final RootNameLookup _rootNames;\n     \n     /*\n     /**********************************************************\n         _rootDeserializers = mapper._rootDeserializers;\n         _provider = mapper._deserializerProvider;\n         _jsonFactory = mapper._jsonFactory;\n+        _rootNames = mapper._rootNames;\n         _valueType = valueType;\n         _valueToUpdate = valueToUpdate;\n         if (valueToUpdate != null && valueType.isArrayType()) {\n         _rootDeserializers = base._rootDeserializers;\n         _provider = base._provider;\n         _jsonFactory = base._jsonFactory;\n+        _rootNames = base._rootNames;\n \n         _valueType = valueType;\n         _valueToUpdate = valueToUpdate;\n         _rootDeserializers = base._rootDeserializers;\n         _provider = base._provider;\n         _jsonFactory = base._jsonFactory;\n+        _rootNames = base._rootNames;\n \n         _valueType = base._valueType;\n         _valueToUpdate = base._valueToUpdate;\n     {\n         String expName = _config.getRootName();\n         if (expName == null) {\n-            SerializedString sstr = _provider.findExpectedRootName(_config, rootType);\n+            SerializedString sstr = _rootNames.findRootName(rootType, _config);\n             expName = sstr.getValue();\n         }\n         if (jp.getCurrentToken() != JsonToken.START_OBJECT) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/StdDeserializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/StdDeserializerProvider.java\n import java.util.concurrent.ConcurrentHashMap;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.io.SerializedString;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.type.*;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n-import com.fasterxml.jackson.databind.util.RootNameLookup;\n \n /**\n  * Default {@link DeserializerProvider} implementation.\n      */\n     final protected HashMap<JavaType, JsonDeserializer<Object>> _incompleteDeserializers\n         = new HashMap<JavaType, JsonDeserializer<Object>>(8);\n-\n-    final protected RootNameLookup _rootNames;\n     \n     /*\n     /**********************************************************\n \n     public StdDeserializerProvider(DeserializerFactory f) {\n         _factory = f;\n-        _rootNames = new RootNameLookup();\n     }\n \n     @Override\n             throws JsonMappingException\n     {\n         return _factory.mapAbstractType(config, type);\n-    }\n-\n-    @Override\n-    public SerializedString findExpectedRootName(DeserializationConfig config, JavaType type)\n-         throws JsonMappingException\n-    {\n-        return _rootNames.findRootName(type, config);\n     }\n     \n     @SuppressWarnings(\"unchecked\")", "timestamp": 1327385293, "metainfo": ""}