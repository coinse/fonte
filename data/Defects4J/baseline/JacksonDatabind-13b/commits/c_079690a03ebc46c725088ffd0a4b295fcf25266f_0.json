{"sha": "079690a03ebc46c725088ffd0a4b295fcf25266f", "log": "Add a test for #580", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java\n      * \n      * @since 2.3\n      */\n-    public static AbstractDeserializer constructForNonPOJO(BeanDescription beanDesc)\n-    {\n+    public static AbstractDeserializer constructForNonPOJO(BeanDescription beanDesc) {\n         return new AbstractDeserializer(beanDesc);\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n                 ;\n     }\n \n-    protected BeanDeserializerBase(BeanDeserializerBase src)\n-    {\n+    protected BeanDeserializerBase(BeanDeserializerBase src) {\n         this(src, src._ignoreAllUnknown);\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n      * \n      * @since 2.0\n      */\n-    public AbstractDeserializer buildAbstract()\n-    {\n+    public AbstractDeserializer buildAbstract() {\n         return new AbstractDeserializer(this, _beanDesc, _backRefProperties);\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java\n      */\n     \n     @Override\n-    public Object createUsingDefault(DeserializationContext ctxt)\n-        throws IOException, JsonProcessingException\n+    public Object createUsingDefault(DeserializationContext ctxt) throws IOException\n     {\n         if (_defaultCreator == null) { // sanity-check; caller should check\n             throw new IllegalStateException(\"No default constructor for \"+getValueTypeDesc());\n     }\n     \n     @Override\n-    public Object createFromObjectWith(DeserializationContext ctxt, Object[] args)\n-        throws IOException, JsonProcessingException\n+    public Object createFromObjectWith(DeserializationContext ctxt, Object[] args) throws IOException\n     {\n         if (_withArgsCreator == null) { // sanity-check; caller should check\n             throw new IllegalStateException(\"No with-args constructor for \"+getValueTypeDesc());\n     }\n \n     @Override\n-    public Object createUsingDelegate(DeserializationContext ctxt, Object delegate)\n-        throws IOException, JsonProcessingException\n+    public Object createUsingDelegate(DeserializationContext ctxt, Object delegate) throws IOException\n     {\n         if (_delegateCreator == null) { // sanity-check; caller should check\n             throw new IllegalStateException(\"No delegate constructor for \"+getValueTypeDesc());\n      */\n     \n     @Override\n-    public Object createFromString(DeserializationContext ctxt, String value)\n-            throws IOException, JsonProcessingException\n+    public Object createFromString(DeserializationContext ctxt, String value) throws IOException\n     {\n         if (_fromStringCreator != null) {\n             try {\n     }\n     \n     @Override\n-    public Object createFromInt(DeserializationContext ctxt, int value)\n-            throws IOException, JsonProcessingException\n+    public Object createFromInt(DeserializationContext ctxt, int value) throws IOException\n     {\n         try {\n             // First: \"native\" int methods work best:\n     }\n \n     @Override\n-    public Object createFromLong(DeserializationContext ctxt, long value)\n-            throws IOException, JsonProcessingException\n+    public Object createFromLong(DeserializationContext ctxt, long value) throws IOException\n     {\n         try {\n             if (_fromLongCreator != null) {\n     }\n \n     @Override\n-    public Object createFromDouble(DeserializationContext ctxt, double value)\n-            throws IOException, JsonProcessingException\n+    public Object createFromDouble(DeserializationContext ctxt, double value) throws IOException\n     {\n         try {\n             if (_fromDoubleCreator != null) {\n     }\n \n     @Override\n-    public Object createFromBoolean(DeserializationContext ctxt, boolean value)\n-            throws IOException, JsonProcessingException\n+    public Object createFromBoolean(DeserializationContext ctxt, boolean value) throws IOException\n     {\n         try {\n             if (_fromBooleanCreator != null) {\n     public AnnotatedParameter getIncompleteParameter() {\n         return _incompleteParameter;\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Internal methods\n--- a/src/test/java/com/fasterxml/jackson/databind/creators/TestCreatorsDelegating.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestCreatorsDelegating.java\n \n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JacksonInject;\n-\n import com.fasterxml.jackson.databind.*;\n \n public class TestCreatorsDelegating extends BaseMapTest\n             return new FactoryBean711(a, n1, n2);\n         }\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Unit tests\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestPolymorphicDelegating.java\n+package com.fasterxml.jackson.failing;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JacksonInject;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+import com.fasterxml.jackson.databind.*;\n+\n+public class TestPolymorphicDelegating extends BaseMapTest\n+{\n+\n+    // For [databind#580]\n+    \n+    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS)\n+    static abstract class Issue580Base {\n+    }\n+\n+    static class Issue580Impl extends Issue580Base {\n+        public int id = 3;\n+\n+        public Issue580Impl() { }\n+        public Issue580Impl(int id) { this.id = id; }\n+    }\n+\n+    static class Issue580Bean {\n+        public Issue580Base value;\n+\n+        @JsonCreator\n+        public Issue580Bean(Issue580Base v) {\n+            value = v;\n+        }\n+\n+        @JsonValue\n+        public Issue580Base value() {\n+            return value;\n+        }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    public void testAbstractDelegateWithCreator() throws Exception\n+    {\n+        Issue580Bean input = new Issue580Bean(new Issue580Impl(13));\n+        ObjectMapper mapper = new ObjectMapper();\n+        String json = mapper.writeValueAsString(input);\n+\n+        Issue580Bean result = mapper.readValue(json, Issue580Bean.class);\n+        assertNotNull(result);\n+        assertNotNull(result.value);\n+        assertEquals(13, ((Issue580Impl) result.value).id);\n+    }\n+}", "timestamp": 1413329177, "metainfo": ""}