{"sha": "d6e90d0259da622ddc593215361acdec3950bfe8", "log": "Remove BeanProperty refererence from BeanDeserializer", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n     \n     @Override\n     public JsonDeserializer<?> createTreeDeserializer(DeserializationConfig config,\n-            JavaType nodeType, BeanDescription beanDesc, BeanProperty property)\n+            JavaType nodeType, BeanDescription beanDesc)\n         throws JsonMappingException\n     {\n         @SuppressWarnings(\"unchecked\")\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n      * Declared type of the bean this deserializer handles.\n      */\n     final protected JavaType _beanType;\n-\n-    /**\n-     * Property that contains value to be deserialized using\n-     * deserializer; mostly needed to find contextual annotations\n-     * for subtypes.\n-     */\n-    final protected BeanProperty _property;\n     \n     /*\n     /**********************************************************\n     /**********************************************************\n      */\n \n-    public BeanDeserializer(BeanDescription beanDesc, BeanProperty property,\n+    public BeanDeserializer(BeanDescription beanDesc,\n             ValueInstantiator valueInstantiator,\n             BeanPropertyMap properties, Map<String, SettableBeanProperty> backRefs,\n             HashSet<String> ignorableProps, boolean ignoreAllUnknown,\n             SettableAnyProperty anySetter, List<ValueInjector> injectables,\n             boolean hasViews)\n     {\n-        this(beanDesc.getClassInfo(), beanDesc.getType(), property,\n+        this(beanDesc.getClassInfo(), beanDesc.getType(),\n                 valueInstantiator,\n                 properties, backRefs,\n                 ignorableProps, ignoreAllUnknown,\n                 anySetter, injectables, hasViews);\n     }\n     \n-    protected BeanDeserializer(AnnotatedClass forClass, JavaType type, BeanProperty property,\n+    protected BeanDeserializer(AnnotatedClass forClass, JavaType type,\n             ValueInstantiator valueInstantiator,\n             BeanPropertyMap properties, Map<String, SettableBeanProperty> backRefs,\n             HashSet<String> ignorableProps, boolean ignoreAllUnknown,\n         super(type);\n         _forClass = forClass;\n         _beanType = type;\n-        _property = property;\n \n         _valueInstantiator = valueInstantiator;\n         \n         \n         _forClass = src._forClass;\n         _beanType = src._beanType;\n-        _property = src._property;\n         \n         _valueInstantiator = src._valueInstantiator;\n         _delegateDeserializer = src._delegateDeserializer;\n     \n         _forClass = src._forClass;\n         _beanType = src._beanType;\n-        _property = src._property;\n         \n         _valueInstantiator = src._valueInstantiator;\n         _delegateDeserializer = src._delegateDeserializer;\n         }\n         // If not, maybe we can locate one. First, need provider\n         JavaType type = ctxt.constructType(bean.getClass());\n-        /* 09-Dec-2010, tatu: Would be nice to know which property pointed to this\n-         *    bean... but, alas, no such information is retained, so:\n+        /* 30-Jan-2012, tatu: Ideally we would be passing referring\n+         *   property; which in theory we could keep track of via\n+         *   ResolvableDeserializer (if we absolutely must...).\n+         *   But for now, let's not bother.\n          */\n-        subDeser = ctxt.findValueDeserializer(type, _property);\n+//        subDeser = ctxt.findValueDeserializer(type, _property);\n+        subDeser = ctxt.findRootValueDeserializer(type);\n         // Also, need to cache it\n         if (subDeser != null) {\n             synchronized (this) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n     /**********************************************************\n      */\n \n-    public JsonDeserializer<?> build(BeanProperty forProperty)\n+    public JsonDeserializer<?> build()\n     {\n         Collection<SettableBeanProperty> props = _properties.values();\n         BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n             }\n         }\n         \n-        return new BeanDeserializer(_beanDesc, forProperty,\n+        return new BeanDeserializer(_beanDesc,\n                 _valueInstantiator, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,\n                 _anySetter, _injectables, anyViews);\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n \n     // Note: NOT overriding, superclass has no matching method\n     @SuppressWarnings(\"unchecked\")\n-    protected JsonDeserializer<Object> _findCustomBeanDeserializer(JavaType type, DeserializationConfig config,\n-            BeanDescription beanDesc, BeanProperty property)\n+    protected JsonDeserializer<Object> _findCustomBeanDeserializer(JavaType type,\n+            DeserializationConfig config, BeanDescription beanDesc)\n         throws JsonMappingException\n     {\n         for (Deserializers d  : _factoryConfig.deserializers()) {\n      */\n     @Override\n     public JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ctxt,\n-            JavaType type, BeanDescription beanDesc, BeanProperty property)\n+            JavaType type, BeanDescription beanDesc)\n         throws JsonMappingException\n     {\n         final DeserializationConfig config = ctxt.getConfig();\n         // We may also have custom overrides:\n-        JsonDeserializer<Object> custom = _findCustomBeanDeserializer(type, config, beanDesc, property);\n+        JsonDeserializer<Object> custom = _findCustomBeanDeserializer(type, config, beanDesc);\n         if (custom != null) {\n             return custom;\n         }\n          * different handling.\n          */\n         if (type.isThrowable()) {\n-            return buildThrowableDeserializer(ctxt, type, beanDesc, property);\n+            return buildThrowableDeserializer(ctxt, type, beanDesc);\n         }\n         /* Or, for abstract types, may have alternate means for resolution\n          * (defaulting, materialization)\n                  * interface doesn't have constructors, for one)\n                  */\n                 beanDesc = config.introspect(concreteType);\n-                return buildBeanDeserializer(ctxt, concreteType, beanDesc, property);\n+                return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n             }\n         }\n \n         // Otherwise, may want to check handlers for standard types, from superclass:\n-        JsonDeserializer<Object> deser = findStdBeanDeserializer(config, type, property);\n+        JsonDeserializer<Object> deser = findStdBeanDeserializer(config, type);\n         if (deser != null) {\n             return deser;\n         }\n             return null;\n         }\n         // Use generic bean introspection to build deserializer\n-        return buildBeanDeserializer(ctxt, type, beanDesc, property);\n+        return buildBeanDeserializer(ctxt, type, beanDesc);\n     }\n     \n     /**\n      */\n     @SuppressWarnings(\"unchecked\")\n     protected JsonDeserializer<Object> findStdBeanDeserializer(DeserializationConfig config,\n-            JavaType type, BeanProperty property)\n+            JavaType type)\n         throws JsonMappingException\n     {\n         Class<?> cls = type.getRawClass();\n      */\n     @SuppressWarnings(\"unchecked\")\n     public JsonDeserializer<Object> buildBeanDeserializer(DeserializationContext ctxt,\n-            JavaType type, BeanDescription beanDesc, BeanProperty property)\n+            JavaType type, BeanDescription beanDesc)\n         throws JsonMappingException\n     {\n         // First: check what creators we can use, if any\n                 builder = mod.updateBuilder(config, beanDesc, builder);\n             }\n         }\n-        JsonDeserializer<?> deserializer = builder.build(property);\n+        JsonDeserializer<?> deserializer = builder.build();\n \n         // [JACKSON-440]: may have modifier(s) that wants to modify or replace serializer we just built:\n         if (_factoryConfig.hasDeserializerModifiers()) {\n \n     @SuppressWarnings(\"unchecked\")\n     public JsonDeserializer<Object> buildThrowableDeserializer(DeserializationContext ctxt,\n-            JavaType type, BeanDescription beanDesc, BeanProperty property)\n+            JavaType type, BeanDescription beanDesc)\n         throws JsonMappingException\n     {\n         final DeserializationConfig config = ctxt.getConfig();\n                 builder = mod.updateBuilder(config, beanDesc, builder);\n             }\n         }\n-        JsonDeserializer<?> deserializer = builder.build(property);\n+        JsonDeserializer<?> deserializer = builder.build();\n         \n         /* At this point it ought to be a BeanDeserializer; if not, must assume\n          * it's some other thing that can handle deserialization ok...\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java\n \n         // 02-Mar-2009, tatu: Let's consider JsonNode to be a type of its own\n         if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n-            return (JsonDeserializer<Object>)_factory.createTreeDeserializer(config, type, beanDesc, property);\n-        }\n-        return (JsonDeserializer<Object>)_factory.createBeanDeserializer(ctxt, type, beanDesc, property);\n+            return (JsonDeserializer<Object>)_factory.createTreeDeserializer(config, type, beanDesc);\n+        }\n+        return (JsonDeserializer<Object>)_factory.createBeanDeserializer(ctxt, type, beanDesc);\n     }\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerFactory.java\n      * @param type Type to be deserialized\n      */\n     public abstract JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ctxt,\n-            JavaType type, BeanDescription beanDesc, BeanProperty property)\n+            JavaType type, BeanDescription beanDesc)\n         throws JsonMappingException;\n \n     /**\n      * JsonNode(s) from JSON content.\n      */\n     public abstract JsonDeserializer<?> createTreeDeserializer(DeserializationConfig config,\n-            JavaType type, BeanDescription beanDesc, BeanProperty property)\n+            JavaType type, BeanDescription beanDesc)\n         throws JsonMappingException;\n \n     /**", "timestamp": 1327979751, "metainfo": ""}