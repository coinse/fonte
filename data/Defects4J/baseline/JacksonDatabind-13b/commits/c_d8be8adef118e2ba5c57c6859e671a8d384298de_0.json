{"sha": "d8be8adef118e2ba5c57c6859e671a8d384298de", "log": "Fix #571", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n     }\n \n     /**\n+     * @since 2.1\n+     */\n+    protected void _checkInvalidCopy(Class<?> exp)\n+    {\n+        if (getClass() != exp) {\n+            throw new IllegalStateException(\"Failed copy(): \"+getClass().getName()\n+                    +\" (version: \"+version()+\") does not override copy(); it has to\");\n+        }\n+    }\n+\n+    /**\n      * Factory method sub-classes must override, to produce {@link ObjectReader}\n      * instances of proper sub-type\n      * \n             FormatSchema schema, InjectableValues injectableValues) {\n         return new ObjectReader(this, config, valueType, valueToUpdate, schema, injectableValues);\n     }\n-    \n-    /**\n-     * @since 2.1\n-     */\n-    protected void _checkInvalidCopy(Class<?> exp)\n-    {\n-        if (getClass() != exp) {\n-            throw new IllegalStateException(\"Failed copy(): \"+getClass().getName()\n-                    +\" (version: \"+version()+\") does not override copy(); it has to\");\n-        }\n-    }\n-    \n+\n+    /**\n+     * Factory method sub-classes must override, to produce {@link ObjectWriter}\n+     * instances of proper sub-type\n+     * \n+     * @since 2.5\n+     */\n+    protected ObjectWriter _newWriter(SerializationConfig config) {\n+        return new ObjectWriter(this, config);\n+    }\n+\n+    /**\n+     * Factory method sub-classes must override, to produce {@link ObjectWriter}\n+     * instances of proper sub-type\n+     * \n+     * @since 2.5\n+     */\n+    protected ObjectWriter _newWriter(SerializationConfig config, FormatSchema schema) {\n+        return new ObjectWriter(this, config, schema);\n+    }\n+    \n+    /**\n+     * Factory method sub-classes must override, to produce {@link ObjectWriter}\n+     * instances of proper sub-type\n+     * \n+     * @since 2.5\n+     */\n+    protected ObjectWriter _newWriter(SerializationConfig config,\n+            JavaType rootType, PrettyPrinter pp) {\n+        return new ObjectWriter(this, config, rootType, pp);\n+    }\n+\n     /*\n     /**********************************************************\n     /* Versioned impl\n      * with default settings.\n      */\n     public ObjectWriter writer() {\n-        return new ObjectWriter(this, getSerializationConfig());\n+        return _newWriter(getSerializationConfig());\n     }\n \n     /**\n      * mapper instance has).\n      */\n     public ObjectWriter writer(SerializationFeature feature) {\n-        return new ObjectWriter(this, getSerializationConfig().with(feature));\n+        return _newWriter(getSerializationConfig().with(feature));\n     }\n \n     /**\n      */\n     public ObjectWriter writer(SerializationFeature first,\n             SerializationFeature... other) {\n-        return new ObjectWriter(this, getSerializationConfig().with(first, other));\n+        return _newWriter(getSerializationConfig().with(first, other));\n     }\n     \n     /**\n      * null passed, using timestamp (64-bit number.\n      */\n     public ObjectWriter writer(DateFormat df) {\n-        return new ObjectWriter(this, getSerializationConfig().with(df));\n+        return _newWriter(getSerializationConfig().with(df));\n     }\n     \n     /**\n      * serialize objects using specified JSON View (filter).\n      */\n     public ObjectWriter writerWithView(Class<?> serializationView) {\n-        return new ObjectWriter(this, getSerializationConfig().withView(serializationView));\n+        return _newWriter(getSerializationConfig().withView(serializationView));\n     }\n     \n     /**\n      * type.\n      */\n     public ObjectWriter writerWithType(Class<?> rootType) {\n-        return new ObjectWriter(this, getSerializationConfig(),\n+        return _newWriter(getSerializationConfig(),\n                 // 15-Mar-2013, tatu: Important! Indicate that static typing is needed:\n                 ((rootType == null) ? null :_typeFactory.constructType(rootType)),\n                 /*PrettyPrinter*/null);\n      * runtime type of value. Type must be a super-type of runtime type.\n      */\n     public ObjectWriter writerWithType(TypeReference<?> rootType) {\n-        return new ObjectWriter(this, getSerializationConfig(),\n+        return _newWriter(getSerializationConfig(),\n                 // 15-Mar-2013, tatu: Important! Indicate that static typing is needed:\n                 ((rootType == null) ? null : _typeFactory.constructType(rootType)),\n                 /*PrettyPrinter*/null);\n      * runtime type of value. Type must be a super-type of runtime type.\n      */\n     public ObjectWriter writerWithType(JavaType rootType) {\n-        return new ObjectWriter(this, getSerializationConfig(), rootType, /*PrettyPrinter*/null);\n+        return _newWriter(getSerializationConfig(), rootType, /*PrettyPrinter*/null);\n     }\n     \n     /**\n         if (pp == null) { // need to use a marker to indicate explicit disabling of pp\n             pp = ObjectWriter.NULL_PRETTY_PRINTER;\n         }\n-        return new ObjectWriter(this, getSerializationConfig(), /*root type*/ null, pp);\n+        return _newWriter(getSerializationConfig(), /*root type*/ null, pp);\n     }\n     \n     /**\n      * serialize objects using the default pretty printer for indentation\n      */\n     public ObjectWriter writerWithDefaultPrettyPrinter() {\n-        return new ObjectWriter(this, getSerializationConfig(),\n+        return _newWriter(getSerializationConfig(),\n                 /*root type*/ null, _defaultPrettyPrinter());\n     }\n     \n      * serialize objects using specified filter provider.\n      */\n     public ObjectWriter writer(FilterProvider filterProvider) {\n-        return new ObjectWriter(this,\n-                getSerializationConfig().withFilters(filterProvider));\n+        return _newWriter(getSerializationConfig().withFilters(filterProvider));\n     }\n     \n     /**\n      */\n     public ObjectWriter writer(FormatSchema schema) {\n         _verifySchemaType(schema);\n-        return new ObjectWriter(this, getSerializationConfig(), schema);\n+        return _newWriter(getSerializationConfig(), schema);\n     }\n \n     /**\n      * @since 2.1\n      */\n     public ObjectWriter writer(Base64Variant defaultBase64) {\n-        return new ObjectWriter(this, getSerializationConfig().with(defaultBase64));\n+        return _newWriter(getSerializationConfig().with(defaultBase64));\n     }\n \n     /**\n      * @since 2.3\n      */\n     public ObjectWriter writer(CharacterEscapes escapes) {\n-        return writer().with(escapes);\n+        return _newWriter(getSerializationConfig()).with(escapes);\n     }\n \n     /**\n      * @since 2.3\n      */\n     public ObjectWriter writer(ContextAttributes attrs) {\n-        return new ObjectWriter(this, getSerializationConfig().with(attrs));\n+        return _newWriter(getSerializationConfig().with(attrs));\n     }\n     \n     /*", "timestamp": 1413426216, "metainfo": ""}