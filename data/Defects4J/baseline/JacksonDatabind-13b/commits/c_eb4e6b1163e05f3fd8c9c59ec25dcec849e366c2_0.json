{"sha": "eb4e6b1163e05f3fd8c9c59ec25dcec849e366c2", "log": "Added bit more testing for [Issue#64]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/PropertyNamingStrategy.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/PropertyNamingStrategy.java\n     \n     /**\n      * See {@link PascalCaseStrategy} for details.\n+     * \n+     * @since 2.1\n      */\n     public static final PropertyNamingStrategy PASCAL_CASE_TO_CAMEL_CASE =\n         new PascalCaseStrategy();\n      * This rules result in the following example translation from \n      * Java property names to JSON element names.\n      * <ul><li>&quot;userName&quot; is translated to &quot;UserName&quot;</li></ul>\n+     * \n+     * @since 2.1\n      */\n     public static class PascalCaseStrategy extends PropertyNamingStrategyBase\n     {\n     \t */\n     \t@Override\n     \tpublic String translate(String input) {\n-    \t\tif (input == null){\n-    \t\t\treturn input; // garbage in, garbage out\n-    \t\t}else{\n-    \t\t\t// Replace first lower-case letter with upper-case equivalent\n-    \t\t\treturn input.substring(0, 1).toUpperCase() + input.substring(1);\n-    \t\t}\n+    \t    if (input == null || input.length() == 0){\n+    \t        return input; // garbage in, garbage out\n+    \t    }\n+    \t    // Replace first lower-case letter with upper-case equivalent\n+    \t    char c = input.charAt(0);\n+    \t    if (Character.isUpperCase(c)) {\n+    \t        return input;\n+    \t    }\n+    \t    StringBuilder sb = new StringBuilder(input);\n+    \t    sb.setCharAt(0, Character.toUpperCase(c));\n+    \t    return sb.toString();\n     \t}\t\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/TestStdNamingStrategies.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestStdNamingStrategies.java\n package com.fasterxml.jackson.databind;\n-\n-import static com.fasterxml.jackson.databind.PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES;\n-import static com.fasterxml.jackson.databind.PropertyNamingStrategy.PASCAL_CASE_TO_CAMEL_CASE;\n \n import java.util.Arrays;\n import java.util.List;\n     {\n         super.setUp();\n         mapper = new ObjectMapper();\n-        mapper.setPropertyNamingStrategy(CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES);\n+        mapper.setPropertyNamingStrategy(PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES);\n     }\n     \n     /*\n     \n     /*\n     /**********************************************************\n-    /* Test methods for PASCAL_CASE_TO_CAMEL_CASE\n+    /* Test methods for PASCAL_CASE_TO_CAMEL_CASE (added in 2.1)\n     /**********************************************************\n      */\n \n     @Test\n     public void testPascalCaseStandAlone()\n     {\n-    \tString translatedJavaName = PropertyNamingStrategy.PASCAL_CASE_TO_CAMEL_CASE.nameForField(null, null,\n-                \"userName\");\n+    \tString translatedJavaName = PropertyNamingStrategy.PASCAL_CASE_TO_CAMEL_CASE.nameForField\n+    \t        (null, null, \"userName\");\n         assertEquals(\"UserName\", translatedJavaName);\n+\n+        translatedJavaName = PropertyNamingStrategy.PASCAL_CASE_TO_CAMEL_CASE.nameForField\n+                (null, null, \"User\");\n+        assertEquals(\"User\", translatedJavaName);\n+\n+        translatedJavaName = PropertyNamingStrategy.PASCAL_CASE_TO_CAMEL_CASE.nameForField\n+                (null, null, \"user\");\n+        assertEquals(\"User\", translatedJavaName);\n+        translatedJavaName = PropertyNamingStrategy.PASCAL_CASE_TO_CAMEL_CASE.nameForField\n+                (null, null, \"x\");\n+        assertEquals(\"X\", translatedJavaName);\n     }\n }", "timestamp": 1346378537, "metainfo": ""}