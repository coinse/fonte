{"sha": "a56270abbf1d6c3c4eb88daff53a51bdf8cc7900", "log": "Minor improvement wrt #614", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n import java.util.concurrent.*;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.core.JsonLocation;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;\n                 boolean hasExplicitName = (propDef != null) && propDef.isExplicitlyNamed();\n                 Object injectId = intr.findInjectableValueId(ctor.getParameter(0));\n \n-                if (hasExplicitName || (injectId != null)) {\n+                JsonCreator.Mode mode = intr.findCreatorBinding(ctor);\n+                \n+                boolean withProps = (mode == JsonCreator.Mode.PROPERTIES);\n+                if (!withProps && (mode != JsonCreator.Mode.DELEGATING)) {\n+                    if (hasExplicitName || (injectId != null)) {\n+                        withProps = true;\n+                    } else {\n+                        // TODO: one more thing -- if property has matching field\n+                        // or setter, also consider property-based\n+                    }\n+                }\n+                if (withProps) {\n                     CreatorProperty[] properties = new CreatorProperty[1];\n                     PropertyName name = (propDef == null) ? null : propDef.getFullName();\n                     properties[0] = constructCreatorProperty(ctxt, beanDesc, name, 0, ctor.getParameter(0), injectId);\n                     /*boolean added = */ _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                             ctor, isCreator,\n                             vchecker.isCreatorVisible(ctor));\n+                    // one more thing: sever link to creator property, to avoid possible later\n+                    // problems with \"unresolved\" constructor property\n+                    if (propDef != null) {\n+                        ((POJOPropertyBuilder) propDef).removeConstructors();\n+                    }\n                 }\n                 // regardless, fully handled\n                 continue;\n                 BeanPropertyDefinition propDef = (propDefs == null) ? null : propDefs[0];\n                 boolean hasExplicitName = (propDef != null) && propDef.isExplicitlyNamed();\n                 final Object injectId = intr.findInjectableValueId(factory.getParameter(0));\n-                if ((injectId == null) && !hasExplicitName) { // not property based\n+\n+                JsonCreator.Mode mode = intr.findCreatorBinding(factory);\n+                \n+                boolean withProps = (mode == JsonCreator.Mode.PROPERTIES);\n+                if (!withProps && (mode != JsonCreator.Mode.DELEGATING)) {\n+                    if (hasExplicitName || (injectId != null)) {\n+                        withProps = true;\n+                    } else {\n+                        // TODO: one more thing -- if property has matching field\n+                        // or setter, also consider property-based\n+                    }\n+                }\n+                if (!withProps) { // not property based but delegating\n                     /*boolean added=*/ _handleSingleArgumentFactory(config, beanDesc, vchecker, intr, creators,\n                             factory, isCreator);\n                     // otherwise just ignored\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n         }\n     }\n \n+    /**\n+     * Mutator that will simply drop any constructor parameters property may have.\n+     * \n+     * @since 2.5\n+     */\n+    public void removeConstructors() {\n+        _ctorParameters = null;\n+    }\n+    \n     /**\n      * Method called to trim unnecessary entries, such as implicit\n      * getter if there is an explict one available. This is important\n--- a/src/test/java/com/fasterxml/jackson/databind/creators/SingleArgCreatorTest.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/SingleArgCreatorTest.java\n \n public class SingleArgCreatorTest extends BaseMapTest\n {\n-    // [Issue#430]: single arg BUT named; should not delegate\n+    // [databind#430]: single arg BUT named; should not delegate\n \n     static class SingleNamedStringBean {\n-\n         final String _ss;\n \n         @JsonCreator\n         public String getSs() { return _ss; }\n     }\n \n-    // [Databind#557]\n+    // For [databind#614]\n+    static class SingleNamedButStillDelegating {\n+        protected final String value;\n+\n+        @JsonCreator(mode=JsonCreator.Mode.DELEGATING)\n+        public SingleNamedButStillDelegating(@JsonProperty(\"foobar\") String v){\n+            value = v;\n+        }\n+\n+        public String getFoobar() { return \"x\"; }\n+    }\n+    \n+    // [databind#557]\n     \n     static class StringyBean\n     {\n         StringyBean bean = mapper.readValue(quote(\"foobar\"), StringyBean.class);\n         assertEquals(\"foobar\", bean.getValue());\n     }    \n+\n+    // [databind#714]\n+    public void testSingleExplicitlyNamedButDelegating() throws Exception\n+    {\n+        SingleNamedButStillDelegating bean = MAPPER.readValue(quote(\"xyz\"),\n+                SingleNamedButStillDelegating.class);\n+        assertEquals(\"xyz\", bean.value);\n+    }\n }\n ", "timestamp": 1416207918, "metainfo": ""}