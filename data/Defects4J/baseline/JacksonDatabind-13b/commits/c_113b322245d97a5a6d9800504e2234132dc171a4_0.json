{"sha": "113b322245d97a5a6d9800504e2234132dc171a4", "log": "visitorAware -> visitable, schemaType -> jsonFormatType  also trying to clean up diffs", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonArrayFormatVisitor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonArrayFormatVisitor.java\n \n \tvoid itemsFormat(JavaType contentType);\n \n-\tvoid itemsFormat(SchemaType format);\n+\tvoid itemsFormat(JsonFormatTypes format);\n \n }\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatTypes.java\n+package com.fasterxml.jackson.databind.jsonFormatVisitors;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+\n+public enum JsonFormatTypes {\n+\t\n+\tSTRING,\n+\tNUMBER,\n+\tINTEGER,\n+\tBOOLEAN,\n+\tOBJECT,\n+\tARRAY,\n+\tNULL,\n+\tANY;\n+\t\n+\t\n+\t@JsonValue\n+\tpublic String value() {\n+\t\treturn this.name().toLowerCase();\n+\t}\n+\t\n+\t@JsonCreator\n+\tpublic static JsonFormatTypes forValue(String s) {\n+\t\treturn valueOf(s.toUpperCase());\n+\t}\n+}\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitable.java\n+package com.fasterxml.jackson.databind.jsonFormatVisitors;\n+\n+\n+import com.fasterxml.jackson.databind.JavaType;\n+\n+/**\n+ * Marker interface for schema-aware serializers.\n+ */\n+public interface JsonFormatVisitable\n+{\n+    /**\n+     * Get the representation of the schema to which this serializer will conform.\n+     * @param typeHint TODO\n+     *\n+     * @return <a href=\"http://json-schema.org/\">Json-schema</a> for this serializer.\n+     */\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint);\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonObjectFormatVisitor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonObjectFormatVisitor.java\n \n \tpublic void optionalProperty(BeanPropertyWriter writer);\n \n-\tpublic void property(String name, JsonFormatVisitorAware handler, JavaType propertyTypeHint);\n+\tpublic void property(String name, JsonFormatVisitable handler, JavaType propertyTypeHint);\n \n-\tpublic void optionalProperty(String name, JsonFormatVisitorAware handler,\n+\tpublic void optionalProperty(String name, JsonFormatVisitable handler,\n \t\t\tJavaType propertyTypeHint);\n \n \tpublic void property(String name);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;\n-import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorAware;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n          * type information it needs is accessible via \"untyped\" serializer)\n          */\n         JsonSerializer<Object> ser = findValueSerializer(type, null);\n-        if (ser instanceof JsonFormatVisitorAware) {\n-        \t((JsonFormatVisitorAware) ser).acceptJsonFormatVisitor(visitor, constructType(type));\n+        if (ser instanceof JsonFormatVisitable) {\n+        \t((JsonFormatVisitable) ser).acceptJsonFormatVisitor(visitor, constructType(type));\n         } else {\n         \tvisitor.expectAnyFormat(constructType(type));\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedStringListSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedStringListSerializer.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor;\n-import com.fasterxml.jackson.databind.jsonFormatVisitors.SchemaType;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.ContextualSerializer;\n import com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase;\n \n \t@Override\n \tprotected void acceptContentVisitor(JsonArrayFormatVisitor visitor) {\n-\t\tvisitor.itemsFormat(SchemaType.STRING);\n+\t\tvisitor.itemsFormat(JsonFormatTypes.STRING);\n \t\t\n \t}\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n-import com.fasterxml.jackson.databind.jsonFormatVisitors.SchemaType;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n     @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n     {\n-    \tvisitor.expectArrayFormat(null).itemsFormat(SchemaType.STRING);\n+    \tvisitor.expectArrayFormat(null).itemsFormat(JsonFormatTypes.STRING);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringCollectionSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringCollectionSerializer.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor;\n-import com.fasterxml.jackson.databind.jsonFormatVisitors.SchemaType;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.ContextualSerializer;\n import com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase;\n     \n \t@Override\n \tprotected void acceptContentVisitor(JsonArrayFormatVisitor visitor) {\n-\t\tvisitor.itemsFormat(SchemaType.STRING);\n+\t\tvisitor.itemsFormat(JsonFormatTypes.STRING);\n \t\t\n \t}\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;\n-import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorAware;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n public abstract class BeanSerializerBase\n     extends StdSerializer<Object>\n     implements ContextualSerializer, ResolvableSerializer,\n-        JsonFormatVisitorAware, SchemaAware\n+        JsonFormatVisitable, SchemaAware\n {\n     final protected static BeanPropertyWriter[] NO_PROPS = new BeanPropertyWriter[0];\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n-import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorAware;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n                 \tString name = visitor.getProvider().getConfig().getAnnotationIntrospector().findEnumValue((Enum<?>)enumValue);\n                 \ttry {\n                 \t\tser = visitor.getProvider().findValueSerializer(valueType.getRawClass(), _property);\n-                \t\tif (ser instanceof JsonFormatVisitorAware)  {\n-                \t\t\tobjectVisitor.property(name, (JsonFormatVisitorAware) ser, valueType);\n+                \t\tif (ser instanceof JsonFormatVisitable)  {\n+                \t\t\tobjectVisitor.property(name, (JsonFormatVisitable) ser, valueType);\n                 \t\t} \n                 \t\tcontinue;\n                 \t} catch (JsonMappingException e) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n import com.fasterxml.jackson.databind.MapperFeature;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n-import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorAware;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n @JacksonStdImpl\n public class JsonValueSerializer\n     extends StdSerializer<Object>\n-    implements ContextualSerializer, JsonFormatVisitorAware, SchemaAware\n+    implements ContextualSerializer, JsonFormatVisitable, SchemaAware\n {\n     protected final Method _accessorMethod;\n \n     @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n     {\n-    \tif (_valueSerializer instanceof JsonFormatVisitorAware) {\n-    \t\t((JsonFormatVisitorAware) _valueSerializer).acceptJsonFormatVisitor(visitor, null); \n+    \tif (_valueSerializer instanceof JsonFormatVisitable) {\n+    \t\t((JsonFormatVisitable) _valueSerializer).acceptJsonFormatVisitor(visitor, null); \n     \t} else {\n     \t\tvisitor.expectAnyFormat(typeHint);\n     \t}\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n-import com.fasterxml.jackson.databind.jsonFormatVisitors.SchemaType;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n         @Override\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n         {\n-        \tvisitor.expectArrayFormat(typeHint).itemsFormat(SchemaType.BOOLEAN);\n+        \tvisitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.BOOLEAN);\n         }\n     }\n \n         @Override\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n         {\n-        \tvisitor.expectArrayFormat(typeHint).itemsFormat(SchemaType.STRING);\n+        \tvisitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.STRING);\n         }\n     }\n \n         @Override\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n         {\n-        \tvisitor.expectArrayFormat(typeHint).itemsFormat(SchemaType.INTEGER);\n+        \tvisitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.INTEGER);\n         }\n     }\n \n         @Override\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n         {\n-        \tvisitor.expectArrayFormat(typeHint).itemsFormat(SchemaType.STRING);\n+        \tvisitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.STRING);\n         }\n     }\n \n         @Override\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n         {\n-        \tvisitor.expectArrayFormat(typeHint).itemsFormat(SchemaType.INTEGER);\n+        \tvisitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.INTEGER);\n         }\n     }\n \n         @Override\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n         {\n-        \tvisitor.expectArrayFormat(typeHint).itemsFormat(SchemaType.NUMBER);\n+        \tvisitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.NUMBER);\n         }\n     }\n \n         @Override\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n         {\n-        \tvisitor.expectArrayFormat(typeHint).itemsFormat(SchemaType.NUMBER);\n+        \tvisitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.NUMBER);\n         }\n     }\n \n         @Override\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n         {\n-        \tvisitor.expectArrayFormat(typeHint).itemsFormat(SchemaType.NUMBER);\n+        \tvisitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.NUMBER);\n         }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java\n import com.fasterxml.jackson.databind.SerializationFeature;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n-import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorAware;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n  * Base class used by all standard serializers, and can also\n  * be used for custom serializers (in fact, this is the recommended\n  * base class to use).\n- * Provides convenience methods for implementing {@link JsonFormatVisitorAware}\n+ * Provides convenience methods for implementing {@link JsonFormatVisitable}\n  */\n public abstract class StdSerializer<T>\n     extends JsonSerializer<T>\n-    implements JsonFormatVisitorAware, SchemaAware\n+    implements JsonFormatVisitable, SchemaAware\n {\n     /**\n      * Nominal type supported, usually declared type of", "timestamp": 1345074408, "metainfo": ""}