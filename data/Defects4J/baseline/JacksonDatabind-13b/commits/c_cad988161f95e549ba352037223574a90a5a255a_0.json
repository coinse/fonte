{"sha": "cad988161f95e549ba352037223574a90a5a255a", "log": "refactoring", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java\n     }\n \n     public int getFieldCount() {\n-        return (_fields == null) ? 0 : _fields.size();\n+        if (_fields == null) {\n+            resolveFields();\n+        }\n+        return _fields.size();\n     }\n \n     public Iterable<AnnotatedField> fields()\n     {\n         if (_fields == null) {\n-            return Collections.emptyList();\n+            resolveFields();\n         }\n         return _fields;\n     }\n      * that are either public, or have at least a single annotation\n      * associated with them.\n      */\n-    public void resolveFields()\n-    {\n-        LinkedHashMap<String,AnnotatedField> foundFields = new LinkedHashMap<String,AnnotatedField>();\n-        _addFields(foundFields, _class);\n-        if (foundFields.isEmpty()) {\n+    private void resolveFields()\n+    {\n+        Map<String,AnnotatedField> foundFields = _findFields(_class, null);\n+        if (foundFields == null || foundFields.size() == 0) {\n             _fields = Collections.emptyList();\n         } else {\n             _fields = new ArrayList<AnnotatedField>(foundFields.size());\n     /**********************************************************\n      */\n \n-    protected void _addFields(Map<String,AnnotatedField> fields, Class<?> c)\n+    protected Map<String,AnnotatedField> _findFields(Class<?> c, Map<String,AnnotatedField> fields)\n     {\n         /* First, a quick test: we only care for regular classes (not\n          * interfaces, primitive types etc), except for Object.class.\n             /* 21-Feb-2010, tatu: Need to handle masking: as per [JACKSON-226]\n              *    we otherwise get into trouble...\n              */\n-            _addFields(fields, parent);\n+            fields = _findFields(parent, fields);\n             for (Field f : c.getDeclaredFields()) {\n                 // static fields not included, nor transient\n                 if (!_isIncludableField(f)) {\n                  * added, and partly because logic can be done when\n                  * determining get/settability of the field.\n                  */\n+                if (fields == null) {\n+                    fields = new LinkedHashMap<String,AnnotatedField>();\n+                }\n                 fields.put(f.getName(), _constructField(f));\n             }\n             // And then... any mix-in overrides?\n                 }\n             }\n         }\n+        return fields;\n     }\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java\n     {\n         AnnotatedClass ac = classWithCreators(config, type, r);\n         ac.resolveMemberMethods(MINIMAL_FILTER);\n-        ac.resolveFields();\n         return constructPropertyCollector(config, ac, type, forSerialization).collect();\n     }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/type/TestAnnotatedClass.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/type/TestAnnotatedClass.java\n     {\n         // null -> no mix-in annotations\n         AnnotatedClass ac = AnnotatedClass.construct(FieldBean.class, new JacksonAnnotationIntrospector(), null);\n-        ac.resolveFields();\n-        /* 14-Jul-2009, tatu: AnnotatedClass does remove forcibly ignored\n-         *   entries, but will still contain non-public fields too (earlier\n-         *   versions didn't, but filtering was moved to a later point)\n-         */\n+        // AnnotatedClass does not ignore non-visible fields, yet\n         assertEquals(2, ac.getFieldCount());\n         for (AnnotatedField f : ac.fields()) {\n             String fname = f.getName();", "timestamp": 1327297783, "metainfo": ""}