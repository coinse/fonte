{"sha": "6d12ad79c2c22f28eb63038ac38de177d1624efd", "log": "start refactoring to remove one factory class", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n import com.fasterxml.jackson.databind.jsontype.NamedType;\n import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer;\n import com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer;\n import com.fasterxml.jackson.databind.ser.impl.StringArraySerializer;\n import com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer;\n                 if (!enumType.isEnumType()) {\n                     enumType = null;\n                 }\n-                ser = StdContainerSerializers.enumSetSerializer(enumType);\n+                ser = buildEnumSetSerializer(enumType);\n             } else {\n                 Class<?> elementRaw = type.getContentType().getRawClass();\n                 if (isIndexedList(raw)) {\n                             ser = IndexedStringListSerializer.instance;\n                         }\n                     } else {\n-                        ser = StdContainerSerializers.indexedListSerializer(type.getContentType(), staticTyping,\n+                        ser = buildIndexedListSerializer(type.getContentType(), staticTyping,\n                             elementTypeSerializer, elementValueSerializer);\n                     }\n                 } else if (elementRaw == String.class) {\n                     }\n                 }\n                 if (ser == null) {\n-                    ser = StdContainerSerializers.collectionSerializer(type.getContentType(), staticTyping,\n+                    ser = buildCollectionSerializer(type.getContentType(), staticTyping,\n                             elementTypeSerializer, elementValueSerializer);\n                 }\n             }\n         }\n         return ser;\n     }\n-    \n+\n+    /*\n+    /**********************************************************\n+    /* Factory methods, for Collections\n+    /**********************************************************\n+     */\n+\n     protected boolean isIndexedList(Class<?> cls)\n     {\n         return RandomAccess.class.isAssignableFrom(cls);\n     }\n-    \n+\n+    public  ContainerSerializer<?> buildIndexedListSerializer(JavaType elemType,\n+            boolean staticTyping, TypeSerializer vts, JsonSerializer<Object> valueSerializer) {\n+        return new IndexedListSerializer(elemType, staticTyping, vts, null, valueSerializer);\n+    }\n+    public ContainerSerializer<?> buildCollectionSerializer(JavaType elemType,\n+            boolean staticTyping, TypeSerializer vts, JsonSerializer<Object> valueSerializer) {\n+        return new CollectionSerializer(elemType, staticTyping, vts, null, valueSerializer);\n+    }\n+\n+    public JsonSerializer<?> buildEnumSetSerializer(JavaType enumType) {\n+        return new EnumSetSerializer(enumType, null);\n+    }\n+\n     /*\n     /**********************************************************\n     /* Factory methods, for Maps\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdContainerSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdContainerSerializers.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n-import com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer;\n import com.fasterxml.jackson.databind.ser.impl.IteratorSerializer;\n-import com.fasterxml.jackson.databind.ser.std.CollectionSerializer;\n \n /**\n  * Dummy container class to group standard container serializers: serializers\n public class StdContainerSerializers\n {\n     protected StdContainerSerializers() { }\n-\n-    /**\n-     * @since 2.1\n-     */\n-    public static ContainerSerializer<?> indexedListSerializer(JavaType elemType,\n-            boolean staticTyping, TypeSerializer vts, JsonSerializer<Object> valueSerializer) {\n-        return new IndexedListSerializer(elemType, staticTyping, vts, null, valueSerializer);\n-    }\n-\n-    /**\n-     * @since 2.1\n-     */\n-    public static ContainerSerializer<?> collectionSerializer(JavaType elemType,\n-            boolean staticTyping, TypeSerializer vts, JsonSerializer<Object> valueSerializer) {\n-        return new CollectionSerializer(elemType, staticTyping, vts, null, valueSerializer);\n-    }\n-\n+    \n     public static ContainerSerializer<?> iteratorSerializer(JavaType elemType,\n             boolean staticTyping, TypeSerializer vts) {\n         return new IteratorSerializer(elemType, staticTyping, vts, null);\n             boolean staticTyping, TypeSerializer vts) {\n         return new IterableSerializer(elemType, staticTyping, vts, null);\n     }\n-\n-    public static JsonSerializer<?> enumSetSerializer(JavaType enumType) {\n-        return new EnumSetSerializer(enumType, null);\n-    }\n }", "timestamp": 1388469146, "metainfo": ""}