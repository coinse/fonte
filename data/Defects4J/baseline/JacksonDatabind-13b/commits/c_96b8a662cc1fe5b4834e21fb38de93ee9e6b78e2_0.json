{"sha": "96b8a662cc1fe5b4834e21fb38de93ee9e6b78e2", "log": "minor test refactoring", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/introspect/TestPropertyConflicts.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/introspect/TestPropertyConflicts.java\n package com.fasterxml.jackson.databind.introspect;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.BaseMapTest;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.*;\n \n /**\n  * Unit tests verifying handling of potential and actual\n         \n         public int getValue() { return value+1; }\n     }\n+\n+    // [Issue#323] (fixed in 2.4)\n+    static class Bean323 { \n+        private int a;\n+\n+        public Bean323 (@JsonProperty(\"a\") final int a ) {\n+            this.a = a;\n+        }\n+\n+        @JsonProperty(\"b\")\n+        private int getA () {\n+            return a;\n+        }\n+    }    \n     \n     /*\n     /**********************************************************\n     /* Test methods\n     /**********************************************************\n      */\n-\n-    private final ObjectMapper MAPPER = objectMapper();\n     \n     // for [JACKSON-694]\n     public void testFailWithDupProps() throws Exception\n     {\n         BeanWithConflict bean = new BeanWithConflict();\n         try {\n-            String json = MAPPER.writeValueAsString(bean);\n+            String json = objectWriter().writeValueAsString(bean);\n             fail(\"Should have failed due to conflicting accessor definitions; got JSON = \"+json);\n         } catch (JsonProcessingException e) {\n             verifyException(e, \"Conflicting getter definitions\");\n     // [Issue#238]: ok to have getter, \"isGetter\"\n     public void testRegularAndIsGetter() throws Exception\n     {\n+        final ObjectWriter writer = objectWriter();\n+        \n         // first, serialize without probs:\n-        assertEquals(\"{\\\"value\\\":4}\", MAPPER.writeValueAsString(new Getters1A()));\n-        assertEquals(\"{\\\"value\\\":4}\", MAPPER.writeValueAsString(new Getters1B()));\n+        assertEquals(\"{\\\"value\\\":4}\", writer.writeValueAsString(new Getters1A()));\n+        assertEquals(\"{\\\"value\\\":4}\", writer.writeValueAsString(new Getters1B()));\n \n         // and similarly, deserialize\n-        assertEquals(1, MAPPER.readValue(\"{\\\"value\\\":1}\", Getters1A.class).value);\n-        assertEquals(2, MAPPER.readValue(\"{\\\"value\\\":2}\", Getters1B.class).value);\n+        ObjectMapper mapper = objectMapper();\n+        assertEquals(1, mapper.readValue(\"{\\\"value\\\":1}\", Getters1A.class).value);\n+        assertEquals(2, mapper.readValue(\"{\\\"value\\\":2}\", Getters1B.class).value);\n+    }\n+\n+    // [Issue#323]\n+    public void testCreatorPropRename() throws Exception\n+    {\n+        Bean323 input = new Bean323(7);\n+        assertEquals(\"{\\\"b\\\":7}\", objectWriter().writeValueAsString(input));\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/failing/TestNameConflicts193And327.java\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestNameConflicts193And327.java\n             return value2;\n         }\n     }\n-\n-    // [Issue#323]\n-    static class Bean323 { \n-        private int a;\n-\n-        public Bean323 (@JsonProperty(\"a\") final int a ) {\n-            this.a = a;\n-        }\n-\n-        @JsonProperty(\"b\")\n-        private int getA () {\n-            return a;\n-        }\n-    }    \n \n     /* We should only report an exception for cases where there is\n      * real ambiguity as to how to rename things; but not when everything\n         assertNotNull(json);\n     }\n \n-    // [Issue#323]\n-    public void testCreatorPropRename() throws Exception\n-    {\n-        Bean323 input = new Bean323(7);\n-        assertEquals(\"{\\\"b\\\":7}\", objectWriter().writeValueAsString(input));\n-    }\n-\n     // [Issue#327]\n     public void testNonConflict() throws Exception\n     {", "timestamp": 1396066904, "metainfo": ""}