{"sha": "87dc3181f863f3771531ce26e3bce392bf9a8e96", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedStringListSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedStringListSerializer.java\n     /**********************************************************\n      */\n     \n-    protected IndexedStringListSerializer() {\n-        this(null);\n-    }\n+    protected IndexedStringListSerializer() { this(null); }\n \n     @SuppressWarnings(\"unchecked\")\n     public IndexedStringListSerializer(JsonSerializer<?> ser) {\n         super(List.class);\n         _serializer = (JsonSerializer<String>) ser;\n-        \n     }\n \n-    @Override protected JsonNode contentSchema() {\n-        return createSchemaNode(\"string\", true);\n-    }\n+    @Override protected JsonNode contentSchema() { return createSchemaNode(\"string\", true); }\n \n     @Override\n-    protected void acceptContentVisitor(JsonArrayFormatVisitor visitor)\n-        throws JsonMappingException\n-    {\n-\t\tvisitor.itemsFormat(JsonFormatTypes.STRING);\n+    protected void acceptContentVisitor(JsonArrayFormatVisitor visitor) throws JsonMappingException {\n+        visitor.itemsFormat(JsonFormatTypes.STRING);\n     }\n \n     /*\n      */\n \n     @Override\n-    public JsonSerializer<?> createContextual(SerializerProvider provider,\n-            BeanProperty property)\n-        throws JsonMappingException\n+    public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException\n     {\n         /* 29-Sep-2012, tatu: Actually, we need to do much more contextual\n          *    checking here since we finally know for sure the property,\n      */\n \n     @Override\n-    public void serialize(List<String> value, JsonGenerator jgen, SerializerProvider provider)\n-        throws IOException, JsonGenerationException\n+    public void serialize(List<String> value, JsonGenerator jgen, SerializerProvider provider) throws IOException\n     {\n         final int len = value.size();\n         // [JACKSON-805]\n         jgen.writeEndArray();\n     }\n \n-    private final void _serializeUnwrapped(List<String> value, JsonGenerator jgen, SerializerProvider provider)\n-        throws IOException, JsonGenerationException\n+    private final void _serializeUnwrapped(List<String> value, JsonGenerator jgen, SerializerProvider provider) throws IOException\n     {\n         if (_serializer == null) {\n             serializeContents(value, jgen, provider, 1);\n     \n     @Override\n     public void serializeWithType(List<String> value, JsonGenerator jgen, SerializerProvider provider,\n-            TypeSerializer typeSer)\n-        throws IOException, JsonGenerationException\n+            TypeSerializer typeSer) throws IOException\n     {\n         final int len = value.size();\n         typeSer.writeTypePrefixForArray(value, jgen);\n     }\n     \n     private final void serializeContents(List<String> value, JsonGenerator jgen, SerializerProvider provider,\n-            int len)\n-        throws IOException, JsonGenerationException\n+            int len) throws IOException\n     {\n         int i = 0;\n         try {\n     }\n \n     private final void serializeUsingCustom(List<String> value, JsonGenerator jgen, SerializerProvider provider,\n-            int len)\n-        throws IOException, JsonGenerationException\n+            int len) throws IOException\n     {\n         int i = 0;\n         try {", "timestamp": 1390762624, "metainfo": ""}