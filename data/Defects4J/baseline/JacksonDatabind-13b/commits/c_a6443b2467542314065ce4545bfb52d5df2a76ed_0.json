{"sha": "a6443b2467542314065ce4545bfb52d5df2a76ed", "log": "Fixed #669", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n             }\n             // or, Object Ids Jackson explicitly sets\n             JsonToken t = p.getCurrentToken();\n-            // for now (2.2.x) we only allow scalar types (Strings, integral numbers):\n-            // NOTE: may  need to allow handling of structured values in future for JSOG\n-            if (t != null && (t.isScalarValue() || _objectIdReader.maySerializeAsObject())) {\n-                return deserializeFromObjectId(p, ctxt);\n+            if (t != null) {\n+                // Most commonly, a scalar (int id, uuid String, ...)\n+                if (t.isScalarValue()) {\n+                    return deserializeFromObjectId(p, ctxt);\n+                }\n+                // but, with 2.5+, a simple Object-wrapped value also legal:\n+                if (t == JsonToken.START_OBJECT) {\n+                    t = p.nextToken();\n+                }\n+                if (t == JsonToken.FIELD_NAME && _objectIdReader.maySerializeAsObject()\n+                        && _objectIdReader.isValidReferencePropertyName(p.getCurrentName(), p)) {\n+                    return deserializeFromObjectId(p, ctxt);\n+                }\n             }\n         }\n         // In future could check current token... for now this should be enough:", "timestamp": 1420752753, "metainfo": ""}