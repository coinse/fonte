{"sha": "e1b200913602809c983a917b15d0ecfa5e74ceca", "log": "Bit more testing for default-typing, as.property inclusion", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForObject.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForObject.java\n      * Another enum type, but this time forcing sub-classing\n      */\n     enum ComplexChoice {\n-    \tMAYBE(true), PROBABLY_NOT(false);\n-\n-    \tprivate boolean state;\n+        MAYBE(true), PROBABLY_NOT(false);\n+\n+        private boolean state;\n     \t\n-    \tprivate ComplexChoice(boolean b) { state = b; }\n+        private ComplexChoice(boolean b) { state = b; }\n     \t\n         @Override\n-    \tpublic String toString() { return String.valueOf(state); }\n+        public String toString() { return String.valueOf(state); }\n     }\n \n     // [JACKSON-311]\n         assertEquals(\"abc\", ((StringBean) result[0]).name);\n     }\n \n+    // with 2.5, another test to check that \"as-property\" is valid option\n+    public void testBeanAsObjectUsingAsProperty() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        m.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.NON_FINAL,\n+                \".hype\");\n+        // note: need to wrap, to get declared as Object\n+        String json = m.writeValueAsString(new StringBean(\"abc\"));\n+\n+        System.err.println(\"JSON == \"+json);\n+        \n+        // Ok: serialization seems to work as expected. Now deserialize:\n+        Object result = m.readValue(json, Object.class);\n+        assertNotNull(result);\n+        assertEquals(StringBean.class, result.getClass());\n+        assertEquals(\"abc\", ((StringBean) result).name);\n+    }\n+    \n     /**\n      * Unit test that verifies that an abstract bean is stored with type information\n      * if default type information is enabled for non-concrete types.", "timestamp": 1411079347, "metainfo": ""}