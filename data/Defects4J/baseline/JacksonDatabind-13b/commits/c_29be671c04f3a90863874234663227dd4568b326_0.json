{"sha": "29be671c04f3a90863874234663227dd4568b326", "log": "Remove DeserializerProvider from calls to Deserializers", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n      */\n     \n     protected abstract JsonDeserializer<?> _findCustomArrayDeserializer(ArrayType type,\n-            DeserializationConfig config, DeserializerProvider p, BeanProperty property,\n+            DeserializationConfig config, BeanProperty property,\n             TypeDeserializer elementTypeDeser, JsonDeserializer<?> elementDeser)\n         throws JsonMappingException;\n     \n     protected abstract JsonDeserializer<?> _findCustomCollectionDeserializer(\n             CollectionType type, DeserializationConfig config,\n-            DeserializerProvider p, BeanDescription beanDesc, BeanProperty property,\n+            BeanDescription beanDesc, BeanProperty property,\n             TypeDeserializer elementTypeDeser, JsonDeserializer<?> elementDeser)\n         throws JsonMappingException;\n \n     protected abstract JsonDeserializer<?> _findCustomCollectionLikeDeserializer(\n             CollectionLikeType type, DeserializationConfig config,\n-            DeserializerProvider p, BeanDescription beanDesc, BeanProperty property,\n+            BeanDescription beanDesc, BeanProperty property,\n             TypeDeserializer elementTypeDeser, JsonDeserializer<?> elementDeser)\n         throws JsonMappingException;\n     \n \n     protected abstract JsonDeserializer<?> _findCustomMapDeserializer(MapType type,\n             DeserializationConfig config,\n-            DeserializerProvider p, BeanDescription beanDesc, BeanProperty property,\n+            BeanDescription beanDesc, BeanProperty property,\n             KeyDeserializer keyDeser,\n             TypeDeserializer elementTypeDeser, JsonDeserializer<?> elementDeser)\n         throws JsonMappingException;\n \n     protected abstract JsonDeserializer<?> _findCustomMapLikeDeserializer(MapLikeType type,\n             DeserializationConfig config,\n-            DeserializerProvider p, BeanDescription beanDesc, BeanProperty property,\n+            BeanDescription beanDesc, BeanProperty property,\n             KeyDeserializer keyDeser,\n             TypeDeserializer elementTypeDeser, JsonDeserializer<?> elementDeser)\n         throws JsonMappingException;\n                  *   deserializers for all types (including primitive arrays) is useful\n                  *   so let's allow this\n                  */\n-                JsonDeserializer<?> custom = _findCustomArrayDeserializer(type, config, p, property, null, null);\n+                JsonDeserializer<?> custom = _findCustomArrayDeserializer(type, config, property, null, null);\n                 if (custom != null) {\n                     return custom;\n                 }\n             elemTypeDeser = findTypeDeserializer(config, elemType, property);\n         }\n         // 23-Nov-2010, tatu: Custom array deserializer?\n-        JsonDeserializer<?> custom = _findCustomArrayDeserializer(type, config, p, property, elemTypeDeser, contentDeser);\n+        JsonDeserializer<?> custom = _findCustomArrayDeserializer(type, config, property, elemTypeDeser, contentDeser);\n         if (custom != null) {\n             return custom;\n         }\n         }\n \n         // 23-Nov-2010, tatu: Custom deserializer?\n-        JsonDeserializer<?> custom = _findCustomCollectionDeserializer(type, config, p, beanDesc, property,\n+        JsonDeserializer<?> custom = _findCustomCollectionDeserializer(type, config, beanDesc, property,\n                 contentTypeDeser, contentDeser);\n         if (custom != null) {\n             return custom;\n         if (contentTypeDeser == null) {\n             contentTypeDeser = findTypeDeserializer(config, contentType, property);\n         }\n-        return _findCustomCollectionLikeDeserializer(type, config, p, beanDesc, property,\n+        return _findCustomCollectionLikeDeserializer(type, config, beanDesc, property,\n                 contentTypeDeser, contentDeser);\n     }\n     \n         }\n \n         // 23-Nov-2010, tatu: Custom deserializer?\n-        JsonDeserializer<?> custom = _findCustomMapDeserializer(type, config, p, beanDesc, property,\n+        JsonDeserializer<?> custom = _findCustomMapDeserializer(type, config, beanDesc, property,\n                 keyDes, contentTypeDeser, contentDeser);\n \n         if (custom != null) {\n         if (contentTypeDeser == null) {\n             contentTypeDeser = findTypeDeserializer(config, contentType, property);\n         }\n-        return _findCustomMapLikeDeserializer(type, config, p, beanDesc, property,\n+        return _findCustomMapLikeDeserializer(type, config, beanDesc, property,\n                 keyDes, contentTypeDeser, contentDeser);\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n     \n     @Override\n     protected JsonDeserializer<?> _findCustomArrayDeserializer(ArrayType type,\n-            DeserializationConfig config, DeserializerProvider provider,\n+            DeserializationConfig config,\n             BeanProperty property,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException\n     {\n         for (Deserializers d  : _factoryConfig.deserializers()) {\n-            JsonDeserializer<?> deser = d.findArrayDeserializer(type, config, provider, property,\n+            JsonDeserializer<?> deser = d.findArrayDeserializer(type, config, property,\n                         elementTypeDeserializer, elementDeserializer);\n             if (deser != null) {\n                 return deser;\n \n     @Override\n     protected JsonDeserializer<?> _findCustomCollectionDeserializer(CollectionType type,\n-            DeserializationConfig config, DeserializerProvider provider, BeanDescription beanDesc,\n-            BeanProperty property,\n+            DeserializationConfig config,\n+            BeanDescription beanDesc, BeanProperty property,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException\n     {\n         for (Deserializers d  : _factoryConfig.deserializers()) {\n-            JsonDeserializer<?> deser = d.findCollectionDeserializer(type, config, provider, beanDesc, property,\n+            JsonDeserializer<?> deser = d.findCollectionDeserializer(type, config, beanDesc, property,\n                     elementTypeDeserializer, elementDeserializer);\n             if (deser != null) {\n                 return deser;\n \n     @Override\n     protected JsonDeserializer<?> _findCustomCollectionLikeDeserializer(CollectionLikeType type,\n-            DeserializationConfig config, DeserializerProvider provider, BeanDescription beanDesc,\n-            BeanProperty property,\n+            DeserializationConfig config,\n+            BeanDescription beanDesc, BeanProperty property,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException\n     {\n         for (Deserializers d  : _factoryConfig.deserializers()) {\n-            JsonDeserializer<?> deser = d.findCollectionLikeDeserializer(type, config, provider, beanDesc, property,\n+            JsonDeserializer<?> deser = d.findCollectionLikeDeserializer(type, config, beanDesc, property,\n                     elementTypeDeserializer, elementDeserializer);\n             if (deser != null) {\n                 return deser;\n \n     @Override\n     protected JsonDeserializer<?> _findCustomMapDeserializer(MapType type,\n-            DeserializationConfig config, DeserializerProvider provider, BeanDescription beanDesc, BeanProperty property,\n+            DeserializationConfig config, \n+            BeanDescription beanDesc, BeanProperty property,\n             KeyDeserializer keyDeserializer,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException\n     {\n         for (Deserializers d  : _factoryConfig.deserializers()) {\n-            JsonDeserializer<?> deser = d.findMapDeserializer(type, config, provider, beanDesc, property,\n+            JsonDeserializer<?> deser = d.findMapDeserializer(type, config, beanDesc, property,\n                     keyDeserializer, elementTypeDeserializer, elementDeserializer);\n             if (deser != null) {\n                 return deser;\n     @Override\n     protected JsonDeserializer<?> _findCustomMapLikeDeserializer(MapLikeType type,\n             DeserializationConfig config,\n-            DeserializerProvider provider, BeanDescription beanDesc, BeanProperty property,\n+            BeanDescription beanDesc, BeanProperty property,\n             KeyDeserializer keyDeserializer,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException\n     {\n         for (Deserializers d  : _factoryConfig.deserializers()) {\n-            JsonDeserializer<?> deser = d.findMapLikeDeserializer(type, config, provider, beanDesc, property,\n+            JsonDeserializer<?> deser = d.findMapLikeDeserializer(type, config, beanDesc, property,\n                     keyDeserializer, elementTypeDeserializer, elementDeserializer);\n             if (deser != null) {\n                 return deser;\n         throws JsonMappingException\n     {\n         for (Deserializers d  : _factoryConfig.deserializers()) {\n-            JsonDeserializer<?> deser = d.findBeanDeserializer(type, config, provider, beanDesc, property);\n+            JsonDeserializer<?> deser = d.findBeanDeserializer(type, config, beanDesc, property);\n             if (deser != null) {\n                 return (JsonDeserializer<Object>) deser;\n             }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerProvider.java\n package com.fasterxml.jackson.databind.deser;\n \n-import com.fasterxml.jackson.databind.AbstractTypeResolver;\n-import com.fasterxml.jackson.databind.BeanProperty;\n-import com.fasterxml.jackson.databind.DeserializationConfig;\n-import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.JsonDeserializer;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.KeyDeserializer;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.deser.*;\n+import com.fasterxml.jackson.databind.*;\n \n /**\n  * Abstract class that defines API used by {@link ObjectMapper} and\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/Deserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/Deserializers.java\n      * \n      * @param type Type of array instances to deserialize\n      * @param config Configuration in effect\n-     * @param provider Provider that can be used to locate deserializer for component type (if\n-     *    one not provided, or needs to be overridden)\n      * @param property Property that contains array value  (null for root values)\n      * @param elementTypeDeserializer If element type needs polymorphic type handling, this is\n      *    the type information deserializer to use; should usually be used as is when constructing\n      * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n      */\n     public JsonDeserializer<?> findArrayDeserializer(ArrayType type, DeserializationConfig config,\n-            DeserializerProvider provider,\n             BeanProperty property,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException;\n      * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n      */\n     public JsonDeserializer<?> findCollectionDeserializer(CollectionType type, DeserializationConfig config,\n-            DeserializerProvider provider, BeanDescription beanDesc, BeanProperty property,\n+            BeanDescription beanDesc, BeanProperty property,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException;\n \n      * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n      */\n     public JsonDeserializer<?> findCollectionLikeDeserializer(CollectionLikeType type, DeserializationConfig config,\n-            DeserializerProvider provider, BeanDescription beanDesc, BeanProperty property,\n+            BeanDescription beanDesc, BeanProperty property,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException;\n     \n      * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n      */\n     public JsonDeserializer<?> findMapDeserializer(MapType type, DeserializationConfig config,\n-            DeserializerProvider provider, BeanDescription beanDesc, BeanProperty property,\n+            BeanDescription beanDesc, BeanProperty property,\n             KeyDeserializer keyDeserializer,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException;\n      * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n      */\n     public JsonDeserializer<?> findMapLikeDeserializer(MapLikeType type, DeserializationConfig config,\n-            DeserializerProvider provider, BeanDescription beanDesc, BeanProperty property,\n+            BeanDescription beanDesc, BeanProperty property,\n             KeyDeserializer keyDeserializer,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException;\n      * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n      */\n     public JsonDeserializer<?> findBeanDeserializer(JavaType type, DeserializationConfig config,\n-            DeserializerProvider provider, BeanDescription beanDesc,\n-            BeanProperty property)\n+            BeanDescription beanDesc, BeanProperty property)\n         throws JsonMappingException;\n \n     /*\n     {\n         @Override\n         public JsonDeserializer<?> findArrayDeserializer(ArrayType type, DeserializationConfig config,\n-                DeserializerProvider provider, BeanProperty property,\n-                TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n-            throws JsonMappingException\n-        {\n-            return null;\n-        }\n-\n-        @Override\n-        public JsonDeserializer<?> findCollectionDeserializer(CollectionType type, DeserializationConfig config,\n-                DeserializerProvider provider, BeanDescription beanDesc, BeanProperty property,\n+                BeanProperty property,\n+                TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n+            throws JsonMappingException\n+        {\n+            return null;\n+        }\n+\n+        @Override\n+        public JsonDeserializer<?> findCollectionDeserializer(CollectionType type,\n+                DeserializationConfig config,\n+                BeanDescription beanDesc, BeanProperty property,\n                 TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n             throws JsonMappingException\n         {\n \n         @Override\n         public JsonDeserializer<?> findCollectionLikeDeserializer(CollectionLikeType type, DeserializationConfig config,\n-                DeserializerProvider provider, BeanDescription beanDesc, BeanProperty property,\n+                BeanDescription beanDesc, BeanProperty property,\n                 TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n             throws JsonMappingException\n         {\n \n         @Override\n         public JsonDeserializer<?> findMapDeserializer(MapType type, DeserializationConfig config,\n-                DeserializerProvider provider, BeanDescription beanDesc, BeanProperty property,\n+                BeanDescription beanDesc, BeanProperty property,\n                 KeyDeserializer keyDeserializer,\n                 TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n             throws JsonMappingException\n \n         @Override\n         public JsonDeserializer<?> findMapLikeDeserializer(MapLikeType type, DeserializationConfig config,\n-                DeserializerProvider provider, BeanDescription beanDesc, BeanProperty property,\n+                BeanDescription beanDesc, BeanProperty property,\n                 KeyDeserializer keyDeserializer,\n                 TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n             throws JsonMappingException\n \n         @Override\n         public JsonDeserializer<?> findBeanDeserializer(JavaType type, DeserializationConfig config,\n-                DeserializerProvider provider,\n-                BeanDescription beanDesc,\n-                BeanProperty property)\n+                BeanDescription beanDesc, BeanProperty property)\n             throws JsonMappingException\n         {\n             return null;\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java\n import com.fasterxml.jackson.core.JsonNode;\n \n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.deser.DeserializerProvider;\n import com.fasterxml.jackson.databind.deser.Deserializers;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.type.*;\n     \n     @Override\n     public JsonDeserializer<?> findArrayDeserializer(ArrayType type,\n-            DeserializationConfig config, DeserializerProvider provider,\n+            DeserializationConfig config, \n             BeanProperty property,\n-            TypeDeserializer elementTypeDeserializer,\n-            JsonDeserializer<?> elementDeserializer)\n+            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         throws JsonMappingException\n     {\n         return (_classMappings == null) ? null : _classMappings.get(new ClassKey(type.getRawClass()));\n \n     @Override\n     public JsonDeserializer<?> findBeanDeserializer(JavaType type,\n-            DeserializationConfig config, DeserializerProvider provider,\n+            DeserializationConfig config,\n             BeanDescription beanDesc, BeanProperty property)\n         throws JsonMappingException\n     {\n \n     @Override\n     public JsonDeserializer<?> findCollectionDeserializer(CollectionType type,\n-            DeserializationConfig config, DeserializerProvider provider,\n+            DeserializationConfig config,\n             BeanDescription beanDesc, BeanProperty property,\n             TypeDeserializer elementTypeDeserializer,\n             JsonDeserializer<?> elementDeserializer)\n \n     @Override\n     public JsonDeserializer<?> findCollectionLikeDeserializer(CollectionLikeType type,\n-            DeserializationConfig config, DeserializerProvider provider,\n+            DeserializationConfig config,\n             BeanDescription beanDesc, BeanProperty property,\n             TypeDeserializer elementTypeDeserializer,\n             JsonDeserializer<?> elementDeserializer)\n \n     @Override\n     public JsonDeserializer<?> findMapDeserializer(MapType type,\n-            DeserializationConfig config, DeserializerProvider provider,\n+            DeserializationConfig config,\n             BeanDescription beanDesc, BeanProperty property,\n             KeyDeserializer keyDeserializer,\n             TypeDeserializer elementTypeDeserializer,\n \n     @Override\n     public JsonDeserializer<?> findMapLikeDeserializer(MapLikeType type,\n-            DeserializationConfig config, DeserializerProvider provider,\n+            DeserializationConfig config,\n             BeanDescription beanDesc, BeanProperty property,\n             KeyDeserializer keyDeserializer,\n             TypeDeserializer elementTypeDeserializer,\n--- a/src/test/java/com/fasterxml/jackson/databind/module/TestTypeModifiers.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/module/TestTypeModifiers.java\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n-import com.fasterxml.jackson.databind.deser.DeserializerProvider;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.module.SimpleDeserializers;\n             context.addDeserializers(new SimpleDeserializers() {\n                 @Override\n                 public JsonDeserializer<?> findCollectionLikeDeserializer(CollectionLikeType type, DeserializationConfig config,\n-                        DeserializerProvider provider, BeanDescription beanDesc, BeanProperty property,\n+                        BeanDescription beanDesc, BeanProperty property,\n                         TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n                     throws JsonMappingException\n                 {\n                 }\n                 @Override\n                 public JsonDeserializer<?> findMapLikeDeserializer(MapLikeType type, DeserializationConfig config,\n-                        DeserializerProvider provider, BeanDescription beanDesc, BeanProperty property,\n+                        BeanDescription beanDesc, BeanProperty property,\n                         KeyDeserializer keyDeserializer,\n                         TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n                     throws JsonMappingException", "timestamp": 1327431600, "metainfo": ""}