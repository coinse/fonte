{"sha": "06a6ebf478c0e1960894916b6ffbb24139c6e30b", "log": "Fix #411 for master", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java\n import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.core.JsonToken;\n-\n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n              */\n             if (t == JsonToken.VALUE_STRING) { // let's do implicit re-parse\n                 String text = jp.getText().trim();\n+                if (text.length() == 0) {\n+                    return getEmptyValue();\n+                }\n+                if (_hasTextualNull(text)) {\n+                    return getNullValue();\n+                }\n+                if (_isPosInf(text)) {\n+                    return Double.POSITIVE_INFINITY;\n+                }\n+                if (_isNegInf(text)) {\n+                    return Double.NEGATIVE_INFINITY;\n+                }\n+                if (_isNaN(text)) {\n+                    return Double.NaN;\n+                }\n                 try {\n                     if (text.indexOf('.') >= 0) { // floating point\n-                        // as per [JACKSON-72]:\n                         if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\n                             return new BigDecimal(text);\n                         }\n                         return new Double(text);\n                     }\n-                    // as per [JACKSON-100]:\n                     if (ctxt.isEnabled(DeserializationFeature.USE_BIG_INTEGER_FOR_INTS)) {\n                         return new BigInteger(text);\n                     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n             }\n             switch (text.charAt(0)) {\n             case 'I':\n-                if (\"Infinity\".equals(text) || \"INF\".equals(text)) {\n+                if (_isPosInf(text)) {\n                     return Float.POSITIVE_INFINITY;\n                 }\n                 break;\n             case 'N':\n-                if (\"NaN\".equals(text)) {\n+                if (_isNaN(text)) {\n                     return Float.NaN;\n                 }\n                 break;\n             case '-':\n-                if (\"-Infinity\".equals(text) || \"-INF\".equals(text)) {\n+                if (_isNegInf(text)) {\n                     return Float.NEGATIVE_INFINITY;\n                 }\n                 break;\n         // Otherwise, no can do:\n         throw ctxt.mappingException(_valueClass, t);\n     }\n-\n+    \n     protected final float _parseFloatPrimitive(JsonParser jp, DeserializationContext ctxt)\n         throws IOException\n     {\n             }\n             switch (text.charAt(0)) {\n             case 'I':\n-                if (\"Infinity\".equals(text) || \"INF\".equals(text)) {\n+                if (_isNegInf(text)) {\n                     return Float.POSITIVE_INFINITY;\n                 }\n                 break;\n             case 'N':\n-                if (\"NaN\".equals(text)) {\n-                    return Float.NaN;\n-                }\n+                if (_isNaN(text)) { return Float.NaN; }\n                 break;\n             case '-':\n-                if (\"-Infinity\".equals(text) || \"-INF\".equals(text)) {\n+                if (_isPosInf(text)) {\n                     return Float.NEGATIVE_INFINITY;\n                 }\n                 break;\n             }\n             switch (text.charAt(0)) {\n             case 'I':\n-                if (\"Infinity\".equals(text) || \"INF\".equals(text)) {\n+                if (_isPosInf(text)) {\n                     return Double.POSITIVE_INFINITY;\n                 }\n                 break;\n             case 'N':\n-                if (\"NaN\".equals(text)) {\n+                if (_isNaN(text)) {\n                     return Double.NaN;\n                 }\n                 break;\n             case '-':\n-                if (\"-Infinity\".equals(text) || \"-INF\".equals(text)) {\n+                if (_isNegInf(text)) {\n                     return Double.NEGATIVE_INFINITY;\n                 }\n                 break;\n             }\n             switch (text.charAt(0)) {\n             case 'I':\n-                if (\"Infinity\".equals(text) || \"INF\".equals(text)) {\n+                if (_isPosInf(text)) {\n                     return Double.POSITIVE_INFINITY;\n                 }\n                 break;\n             case 'N':\n-                if (\"NaN\".equals(text)) {\n+                if (_isNaN(text)) {\n                     return Double.NaN;\n                 }\n                 break;\n             case '-':\n-                if (\"-Infinity\".equals(text) || \"-INF\".equals(text)) {\n+                if (_isNegInf(text)) {\n                     return Double.NEGATIVE_INFINITY;\n                 }\n                 break;\n      * \n      * @since 2.3\n      */\n-    protected boolean _hasTextualNull(String value)\n-    {\n+    protected boolean _hasTextualNull(String value) {\n         return \"null\".equals(value);\n     }\n+\n+    protected final boolean _isNegInf(String text) {\n+        return \"-Infinity\".equals(text) || \"-INF\".equals(text);\n+    }\n+\n+    protected final boolean _isPosInf(String text) {\n+        return \"Infinity\".equals(text) || \"INF\".equals(text);\n+    }\n+\n+    protected final boolean _isNaN(String text) { return \"NaN\".equals(text); }\n     \n     /*\n     /****************************************************\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestNumbers.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestNumbers.java\n     /**********************************************************************\n      */\n     \n-    public void testFloatNaN() throws Exception\n+    public void testNaN() throws Exception\n     {\n         ObjectMapper m = new ObjectMapper();\n         Float result = m.readValue(\" \\\"NaN\\\"\", Float.class);\n         assertEquals(Float.valueOf(Float.NaN), result);\n+\n+        Double d = m.readValue(\" \\\"NaN\\\"\", Double.class);\n+        assertEquals(Double.valueOf(Double.NaN), d);\n+\n+        Number num = m.readValue(\" \\\"NaN\\\"\", Number.class);\n+        assertEquals(Double.valueOf(Double.NaN), num);\n     }\n \n     public void testDoubleInf() throws Exception", "timestamp": 1393396107, "metainfo": ""}