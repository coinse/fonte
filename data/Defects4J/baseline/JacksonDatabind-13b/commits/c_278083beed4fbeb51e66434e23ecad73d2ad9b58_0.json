{"sha": "278083beed4fbeb51e66434e23ecad73d2ad9b58", "log": "Merge branch 'master' of github.com:FasterXML/jackson-databind", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n {\n     /**\n      * Flag that indicates that serialization must be done as the\n-     * Java timetamp, regardless of other settings.\n+     * Java timestamp, regardless of other settings.\n      */\n     protected final boolean _useTimestamp;\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n             } else {\n                 serializeFields(value, jgen, provider);\n             }\n-        }        \n+        }\n         jgen.writeEndObject();\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n         }\n         // Slight detour: do we have a Converter to consider?\n         Converter<Object,Object> conv = beanDesc.findSerializationConverter();\n-        if (conv == null) { // no, simple:\n+        if (conv == null) { // no, simple\n             return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n         }\n         JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n+        \n         // One more twist, as per [Issue#288]; probably need to get new BeanDesc\n         if (!delegateType.hasRawClass(type.getRawClass())) {\n             beanDesc = config.introspect(delegateType);\n-        }\n-        return new StdDelegatingSerializer(conv, delegateType,\n-                _createSerializer2(prov, delegateType, beanDesc, true));\n+            // [#359]: explicitly check (again) for @JsonSerializer...\n+            ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n+        }\n+        if (ser == null) {\n+            ser = _createSerializer2(prov, delegateType, beanDesc, true);\n+        }\n+        return new StdDelegatingSerializer(conv, delegateType, ser);\n     }\n \n     protected JsonSerializer<?> _createSerializer2(SerializerProvider prov,\n--- a/src/test/java/com/fasterxml/jackson/databind/convert/TestConvertingSerializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/convert/TestConvertingSerializer.java\n package com.fasterxml.jackson.databind.convert;\n \n+import java.io.IOException;\n import java.util.*;\n \n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import com.fasterxml.jackson.databind.util.StdConverter;\n \n         }\n     }\n \n+    // [Issue#359]\n+    static class Bean359 {\n+        @JsonSerialize(as = List.class, contentAs = Source.class)\n+        public List<Source> stuff = Arrays.asList(new Source());\n+    }\n+\n+    @JsonSerialize(using = TargetSerializer.class)\n+    static class Target {\n+        public String unexpected = \"Bye.\";\n+    }\n+\n+    @JsonSerialize(converter = SourceToTargetConverter.class)\n+    static class Source { }\n+\n+    static class SourceToTargetConverter extends StdConverter<Source, Target> {\n+        @Override\n+        public Target convert(Source value) {\n+            return new Target();\n+        }\n+    }\n+\n+    static class TargetSerializer extends JsonSerializer<Target>\n+    {\n+        @Override\n+        public void serialize(Target a, JsonGenerator jsonGenerator, SerializerProvider provider) throws IOException {\n+            jsonGenerator.writeString(\"Target\");\n+        }\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Test methods\n         String json = objectWriter().writeValueAsString(new PointListWrapperMap(\"a\", 1, 2));\n         assertEquals(\"{\\\"values\\\":{\\\"a\\\":[1,2]}}\", json);\n     }\n+\n+    // [Issue#359]\n+    public void testIssue359() throws Exception {\n+        String json = objectWriter().writeValueAsString(new Bean359());\n+        assertEquals(\"{\\\"stuff\\\":[\\\"Target\\\"]}\", json);\n+    }\n }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestConvertingSerializer357.java\n+package com.fasterxml.jackson.failing;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.fasterxml.jackson.databind.util.StdConverter;\n+\n+public class TestConvertingSerializer357\n+    extends com.fasterxml.jackson.databind.BaseMapTest\n+{\n+    // [Issue#357]\n+    static class A { }\n+\n+    static class B {\n+        @JsonSerialize(contentConverter = AToStringConverter.class)\n+        public List<A> list = Arrays.asList(new A());\n+    }\n+\n+    static class AToStringConverter extends StdConverter<A, List<String>> {\n+        @Override\n+        public List<String> convert(A value) {\n+            return Arrays.asList(\"Hello world!\");\n+        }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+\n+    // [Issue#357]\n+    public void testConverterForList357() throws Exception {\n+        String json = objectWriter().writeValueAsString(new B());\n+        assertEquals(\"{\\\"list\\\":[[\\\"Hello world!\\\"]]}\", json);\n+    }\n+}", "timestamp": 1395115603, "metainfo": ""}