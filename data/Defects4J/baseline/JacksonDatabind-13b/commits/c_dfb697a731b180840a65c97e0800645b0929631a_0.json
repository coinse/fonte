{"sha": "dfb697a731b180840a65c97e0800645b0929631a", "log": "Add support for 'float' in JsonNode", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n      */\n     public boolean isLong() { return false; }\n \n+    /**\n+     * @since 2.2\n+     */\n+    public boolean isFloat() { return false; }\n+\n     public boolean isDouble() { return false; }\n     public boolean isBigDecimal() { return false; }\n     public boolean isBigInteger() { return false; }\n \n+    /**\n+     * Method that checks whether this node represents basic JSON String\n+     * value.\n+     */\n     public final boolean isTextual() {\n         return getNodeType() == JsonNodeType.STRING;\n     }\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/FloatNode.java\n+package com.fasterxml.jackson.databind.node;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.io.NumberOutput;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+\n+/**\n+ * <code>JsonNode</code> implementation for efficiently containing 32-bit\n+ * `float` values.\n+ * \n+ * @since 2.2\n+ */\n+public class FloatNode extends NumericNode\n+{\n+    protected final float _value;\n+\n+    /* \n+    /**********************************************************\n+    /* Construction\n+    /**********************************************************\n+     */\n+\n+    public FloatNode(float v) { _value = v; }\n+\n+    public static FloatNode valueOf(float v) { return new FloatNode(v); }\n+\n+    /* \n+    /**********************************************************\n+    /* BaseJsonNode extended API\n+    /**********************************************************\n+     */\n+\n+    @Override public JsonToken asToken() { return JsonToken.VALUE_NUMBER_FLOAT; }\n+\n+    @Override\n+    public JsonParser.NumberType numberType() { return JsonParser.NumberType.FLOAT; }\n+\n+    /* \n+    /**********************************************************\n+    /* Overrridden JsonNode methods\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public boolean isFloatingPointNumber() { return true; }\n+\n+    @Override\n+    public boolean isFloat() { return true; }\n+\n+    @Override public boolean canConvertToInt() {\n+        return (_value >= Integer.MIN_VALUE && _value <= Integer.MAX_VALUE);\n+    }\n+\n+    @Override public boolean canConvertToLong() {\n+        return (_value >= Long.MIN_VALUE && _value <= Long.MAX_VALUE);\n+    }\n+    \n+    @Override\n+    public Number numberValue() {\n+        return Float.valueOf(_value);\n+    }\n+\n+    @Override\n+    public int intValue() { return (int) _value; }\n+\n+    @Override\n+    public long longValue() { return (long) _value; }\n+\n+    @Override\n+    public float floatValue() { return (float) _value; }\n+    \n+    @Override\n+    public double doubleValue() { return _value; }\n+\n+    @Override\n+    public BigDecimal decimalValue() { return BigDecimal.valueOf(_value); }\n+\n+    @Override\n+    public BigInteger bigIntegerValue() {\n+        return decimalValue().toBigInteger();\n+    }\n+\n+    @Override\n+    public String asText() {\n+        return NumberOutput.toString(_value);\n+    }\n+\n+    @Override\n+    public final void serialize(JsonGenerator jg, SerializerProvider provider)\n+        throws IOException, JsonProcessingException\n+    {\n+        jg.writeNumber(_value);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+        if (o == this) return true;\n+        if (o == null) return false;\n+        if (o.getClass() != getClass()) { // final class, can do this\n+            return false;\n+        }\n+\n+        // We must account for NaNs: NaN does not equal NaN, therefore we have\n+        // to use Double.compare().\n+        final float otherValue = ((FloatNode) o)._value;\n+        return Float.compare(_value, otherValue) == 0;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Float.floatToIntBits(_value);\n+    }\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/node/JsonNodeFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/JsonNodeFactory.java\n      * Factory method for getting an instance of JSON numeric value\n      * that expresses given 32-bit floating point value\n      */\n-    public NumericNode numberNode(float v) { return DoubleNode.valueOf((double) v); }\n+    public NumericNode numberNode(float v) { return FloatNode.valueOf((float) v); }\n \n     /**\n      * Alternate factory method that will handle wrapper value, which may\n      * {@link NumericNode}, but just {@link ValueNode}.\n      */\n     public ValueNode numberNode(Float value) {\n-        return (value == null) ? nullNode() : DoubleNode.valueOf(value.doubleValue());\n+        return (value == null) ? nullNode() : FloatNode.valueOf(value.floatValue());\n     }\n     \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/node/JsonNodeType.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/JsonNodeType.java\n package com.fasterxml.jackson.databind.node;\n \n-import com.fasterxml.jackson.databind.JsonNode;\n-\n /**\n- * Enumeration of all different {@link JsonNode} types\n- *\n- * <p>This covers all JSON types defined by <a\n+ * Enumeration of JSON types.\n+ * Covers all JSON types defined by <a\n  * href=\"http://tools.ietf.org/html/rfc4627\">RFC 4627</a> (array, boolean,\n  * null, number, object and string) but also Jackson-specific types: binary,\n- * missing and POJO.</p>\n+ * missing and POJO; although does not distinguish between more granular\n+ * types.\n  *\n  * @see BinaryNode\n  * @see MissingNode\n  * @see POJONode\n+ * \n+ * @since 2.2\n  */\n public enum JsonNodeType\n {\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestNumberNodes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestNumberNodes.java\n         assertTrue(DoubleNode.valueOf(Long.MIN_VALUE).canConvertToLong());\n     }\n \n+    // @since 2.2\n+    public void testFloat()\n+    {\n+        FloatNode n = FloatNode.valueOf(0.25f);\n+        assertStandardEquals(n);\n+        assertTrue(0 != n.hashCode());\n+        assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken());\n+        assertEquals(JsonParser.NumberType.FLOAT, n.numberType());\n+        assertEquals(0, n.intValue());\n+        assertEquals(0.25, n.doubleValue());\n+        assertEquals(0.25f, n.floatValue());\n+        assertNotNull(n.decimalValue());\n+        assertEquals(BigInteger.ZERO, n.bigIntegerValue());\n+        assertEquals(\"0.25\", n.asText());\n+\n+        // 1.6:\n+        assertNodeNumbers(FloatNode.valueOf(4.5f), 4, 4.5f);\n+\n+        assertTrue(FloatNode.valueOf(0).canConvertToInt());\n+        assertTrue(FloatNode.valueOf(Integer.MAX_VALUE).canConvertToInt());\n+        assertTrue(FloatNode.valueOf(Integer.MIN_VALUE).canConvertToInt());\n+\n+        // rounding errors if we just add/sub 1... so:\n+        assertFalse(FloatNode.valueOf(1000L + Integer.MAX_VALUE).canConvertToInt());\n+        assertFalse(FloatNode.valueOf(-1000L + Integer.MIN_VALUE).canConvertToInt());\n+\n+        assertTrue(FloatNode.valueOf(0L).canConvertToLong());\n+        assertTrue(FloatNode.valueOf(Integer.MAX_VALUE).canConvertToLong());\n+        assertTrue(FloatNode.valueOf(Integer.MIN_VALUE).canConvertToLong());\n+    }\n+    \n     public void testDecimalNode() throws Exception\n     {\n         DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE);", "timestamp": 1364508708, "metainfo": ""}