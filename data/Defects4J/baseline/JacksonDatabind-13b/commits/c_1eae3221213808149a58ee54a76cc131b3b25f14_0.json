{"sha": "1eae3221213808149a58ee54a76cc131b3b25f14", "log": "More warnings cleanup", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedStringListSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedStringListSerializer.java\n     extends StaticListSerializerBase<List<String>>\n     implements ContextualSerializer\n {\n+    private static final long serialVersionUID = 1L;\n+\n     public final static IndexedStringListSerializer instance = new IndexedStringListSerializer();\n     \n     protected final JsonSerializer<String> _serializer;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/IteratorSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/IteratorSerializer.java\n import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n import com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase;\n \n+@SuppressWarnings(\"serial\")\n @JacksonStdImpl\n public class IteratorSerializer\n     extends AsArraySerializerBase<Iterator<?>>\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/MapEntrySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/MapEntrySerializer.java\n /**\n  * @since 2.5\n  */\n+@SuppressWarnings(\"serial\")\n @JacksonStdImpl\n public class MapEntrySerializer\n     extends ContainerSerializer<Map.Entry<?,?>>\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n  * Standard serializer used for <code>String[]</code> values.\n  */\n @JacksonStdImpl\n+@SuppressWarnings(\"serial\")\n public class StringArraySerializer\n     extends ArraySerializerBase<String[]>\n     implements ContextualSerializer\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringCollectionSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringCollectionSerializer.java\n import java.util.*;\n \n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n  * String serializer.\n  */\n @JacksonStdImpl\n+@SuppressWarnings(\"serial\")\n public class StringCollectionSerializer\n     extends StaticListSerializerBase<Collection<String>>\n     implements ContextualSerializer\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java\n import java.lang.reflect.Type;\n \n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n \n+@SuppressWarnings(\"serial\")\n public class UnknownSerializer\n     extends StdSerializer<Object>\n {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n  * Can be used for custom bean serializers as well, although that\n  * is not the primary design goal.\n  */\n+@SuppressWarnings(\"serial\")\n public abstract class BeanSerializerBase\n     extends StdSerializer<Object>\n     implements ContextualSerializer, ResolvableSerializer,\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ClassSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ClassSerializer.java\n  * Also: default bean access will not do much good with Class.class. But\n  * we can just serialize the class name and that should be enough.\n  */\n+@SuppressWarnings(\"serial\")\n public class ClassSerializer\n     extends StdScalarSerializer<Class<?>>\n {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/InetAddressSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/InetAddressSerializer.java\n import java.net.InetAddress;\n \n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n  * Simple serializer for {@link java.net.InetAddress}. Main complexity is\n  * with registration, since same serializer is to be used for sub-classes.\n  */\n+@SuppressWarnings(\"serial\")\n public class InetAddressSerializer\n     extends StdScalarSerializer<InetAddress>\n {\n     public InetAddressSerializer() { super(InetAddress.class); }\n \n     @Override\n-    public void serialize(InetAddress value, JsonGenerator jgen, SerializerProvider provider)\n-        throws IOException, JsonGenerationException\n+    public void serialize(InetAddress value, JsonGenerator jgen, SerializerProvider provider) throws IOException\n     {\n         // Ok: get textual description; choose \"more specific\" part\n         String str = value.toString().trim();\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/IterableSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/IterableSerializer.java\n import java.util.*;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.databind.BeanProperty;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n \n @JacksonStdImpl\n+@SuppressWarnings(\"serial\")\n public class IterableSerializer\n     extends AsArraySerializerBase<Iterable<?>>\n {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n  *  This must be done from {@link #createContextual} method, and NOT from constructor;\n  * otherwise we could end up with an infinite loop.\n  */\n+@SuppressWarnings(\"serial\")\n @JacksonStdImpl\n public class JsonValueSerializer\n     extends StdSerializer<Object>\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n     extends ContainerSerializer<Map<?,?>>\n     implements ContextualSerializer\n {\n+    private static final long serialVersionUID = -3465193297149553004L;\n+\n     protected final static JavaType UNSPECIFIED_TYPE = TypeFactory.unknownType();\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NonTypedScalarSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NonTypedScalarSerializerBase.java\n import java.io.IOException;\n \n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n  * types: {@link java.lang.String}, {@link java.lang.Integer},\n  * {@link java.lang.Double} and {@link java.lang.Boolean}.\n  */\n+@SuppressWarnings(\"serial\")\n public abstract class NonTypedScalarSerializerBase<T>\n     extends StdScalarSerializer<T>\n {\n \n     @Override\n     public final void serializeWithType(T value, JsonGenerator jgen, SerializerProvider provider,\n-            TypeSerializer typeSer)\n-        throws IOException, JsonGenerationException\n+            TypeSerializer typeSer) throws IOException\n     {\n         // no type info, just regular serialization\n         serialize(value, jgen, provider);            \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NullSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NullSerializer.java\n import java.io.IOException;\n \n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n  * more exotic types (java.lang.Void).\n  */\n @JacksonStdImpl\n+@SuppressWarnings(\"serial\")\n public class NullSerializer\n     extends StdSerializer<Object>\n {\n     private NullSerializer() { super(Object.class); }\n     \n     @Override\n-    public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider)\n-        throws IOException, JsonGenerationException\n-    {\n+    public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n         jgen.writeNull();\n     }\n     \n     @Override\n-    public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n-        throws JsonMappingException\n-    {\n+    public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException {\n         return createSchemaNode(\"null\");\n     }\n     \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-        throws JsonMappingException\n-    {\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n         visitor.expectNullFormat(typeHint);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java\n  * like {@link BigInteger} and {@link BigDecimal}.\n  */\n @JacksonStdImpl\n+@SuppressWarnings(\"serial\")\n public class NumberSerializer\n     extends StdScalarSerializer<Number>\n {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n  * Generic serializer for Object arrays (<code>Object[]</code>).\n  */\n @JacksonStdImpl\n+@SuppressWarnings(\"serial\")\n public class ObjectArraySerializer\n     extends ArraySerializerBase<Object[]>\n     implements ContextualSerializer\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/RawSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/RawSerializer.java\n import java.io.IOException;\n \n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n  * This is a simple dummy serializer that will just output raw values by calling\n  * toString() on value to serialize.\n  */\n+@SuppressWarnings(\"serial\")\n public class RawSerializer<T>\n     extends StdSerializer<T>\n {\n     }\n \n     @Override\n-    public void serialize(T value, JsonGenerator jgen, SerializerProvider provider)\n-        throws IOException, JsonGenerationException\n-    {\n+    public void serialize(T value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n         jgen.writeRawValue(value.toString());\n     }\n \n     @Override\n     public void serializeWithType(T value, JsonGenerator jgen, SerializerProvider provider,\n             TypeSerializer typeSer)\n-        throws IOException, JsonProcessingException\n+        throws IOException\n     {\n         typeSer.writeTypePrefixForScalar(value, jgen);\n         serialize(value, jgen, provider);\n     }\n     \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-        throws JsonMappingException\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n     {\n         visitor.expectStringFormat(typeHint);\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/SerializableSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/SerializableSerializer.java\n import java.util.concurrent.atomic.AtomicReference;\n \n import com.fasterxml.jackson.core.*;\n-\n-\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonNode;\n  * interface, can not be checked for direct class equivalence.\n  */\n @JacksonStdImpl\n+@SuppressWarnings(\"serial\")\n public class SerializableSerializer\n     extends StdSerializer<JsonSerializable>\n {\n     protected SerializableSerializer() { super(JsonSerializable.class); }\n \n     @Override\n-    public void serialize(JsonSerializable value, JsonGenerator jgen, SerializerProvider provider)\n-        throws IOException, JsonGenerationException\n-    {\n+    public void serialize(JsonSerializable value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n         value.serialize(jgen, provider);\n     }\n \n     @Override\n     public final void serializeWithType(JsonSerializable value, JsonGenerator jgen, SerializerProvider provider,\n-            TypeSerializer typeSer)\n-        throws IOException, JsonGenerationException\n-    {\n+            TypeSerializer typeSer) throws IOException {\n         value.serializeWithType(jgen, provider, typeSer);\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/SqlDateSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/SqlDateSerializer.java\n  * that should not be used by plain SQL date.\n  */\n @JacksonStdImpl\n+@SuppressWarnings(\"serial\")\n public class SqlDateSerializer\n     extends DateTimeSerializerBase<java.sql.Date>\n {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/SqlTimeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/SqlTimeSerializer.java\n import java.io.IOException;\n import java.lang.reflect.Type;\n \n-import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;\n \n @JacksonStdImpl\n+@SuppressWarnings(\"serial\")\n public class SqlTimeSerializer\n     extends StdScalarSerializer<java.sql.Time>\n {\n     public SqlTimeSerializer() { super(java.sql.Time.class); }\n \n     @Override\n-    public void serialize(java.sql.Time value, JsonGenerator jgen, SerializerProvider provider)\n-        throws IOException, JsonGenerationException\n+    public void serialize(java.sql.Time value, JsonGenerator jgen, SerializerProvider provider) throws IOException\n     {\n         jgen.writeString(value.toString());\n     }\n \n     @Override\n-    public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n-    {\n+    public JsonNode getSchema(SerializerProvider provider, Type typeHint) {\n         return createSchemaNode(\"string\", true);\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java\n  * Intermediate base class for Lists, Collections and Arrays\n  * that contain static (non-dynamic) value types.\n  */\n+@SuppressWarnings(\"serial\")\n public abstract class StaticListSerializerBase<T extends Collection<?>>\n     extends StdSerializer<T>\n {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java\n import java.util.Date;\n \n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonNode;\n  * serializer, when serializing {@link java.util.Map}s to JSON\n  * Objects.\n  */\n+@SuppressWarnings(\"serial\")\n public class StdKeySerializer extends StdSerializer<Object>\n {\n     public StdKeySerializer() { super(Object.class); }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java\n import java.lang.reflect.Type;\n \n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n+@SuppressWarnings(\"serial\")\n public abstract class StdScalarSerializer<T>\n     extends StdSerializer<T>\n {\n      */\n     @Override\n     public void serializeWithType(T value, JsonGenerator jgen, SerializerProvider provider,\n-            TypeSerializer typeSer)\n-        throws IOException, JsonGenerationException\n+            TypeSerializer typeSer) throws IOException\n     {\n         typeSer.writeTypePrefixForScalar(value, jgen);\n         serialize(value, jgen, provider);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StringSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StringSerializer.java\n public final class StringSerializer\n     extends NonTypedScalarSerializerBase<String>\n {\n+    private static final long serialVersionUID = 1L;\n+\n     public StringSerializer() { super(String.class); }\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/TimeZoneSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/TimeZoneSerializer.java\n import java.util.TimeZone;\n \n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n+@SuppressWarnings(\"serial\")\n public class TimeZoneSerializer extends StdScalarSerializer<TimeZone>\n {\n     public TimeZoneSerializer() { super(TimeZone.class); }\n \n     @Override\n-    public void serialize(TimeZone value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n+    public void serialize(TimeZone value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n         jgen.writeString(value.getID());\n     }\n \n     @Override\n-    public void serializeWithType(TimeZone value, JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer) throws IOException, JsonGenerationException {\n+    public void serializeWithType(TimeZone value, JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n         // Better ensure we don't use specific sub-classes:\n         typeSer.writeTypePrefixForScalar(value, jgen, TimeZone.class);\n         serialize(value, jgen, provider);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java\n import java.lang.reflect.Type;\n \n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonNode;\n  * value.\n  */\n @JacksonStdImpl\n+@SuppressWarnings(\"serial\")\n public class ToStringSerializer\n     extends StdSerializer<Object>\n {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/TokenBufferSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/TokenBufferSerializer.java\n import java.lang.reflect.Type;\n \n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonNode;\n  * (which is only included in the mapper package)\n  */\n @JacksonStdImpl\n+@SuppressWarnings(\"serial\")\n public class TokenBufferSerializer\n     extends StdSerializer<TokenBuffer>\n {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java\n import java.util.UUID;\n \n import com.fasterxml.jackson.core.JsonGenerator;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.util.TokenBuffer;\n \n  * allow serialization using raw binary output (as 16-byte block)\n  * if underlying data format has efficient means to access that.\n  */\n+@SuppressWarnings(\"serial\")\n public class UUIDSerializer\n     extends StdScalarSerializer<UUID>\n {\n--- a/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextAttributeWithSer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextAttributeWithSer.java\n import java.io.IOException;\n \n import com.fasterxml.jackson.core.JsonGenerator;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import com.fasterxml.jackson.databind.ser.std.StdScalarSerializer;\n public class TestContextAttributeWithSer extends BaseMapTest\n {\n     final static String KEY = \"foobar\";\n-    \n+\n+    @SuppressWarnings(\"serial\")\n     static class PrefixStringSerializer extends StdScalarSerializer<String>\n     {\n         protected PrefixStringSerializer() {\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestCustomSerializers.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestCustomSerializers.java\n         }\n     }\n     \n+    @SuppressWarnings(\"serial\")\n     static class ParentClassSerializer\n         extends StdScalarSerializer<Object>\n     {\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestEnumSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestEnumSerialization.java\n         A, B;\n     }\n \n-    @SuppressWarnings(\"rawtypes\")\n+    @SuppressWarnings({ \"rawtypes\", \"serial\" })\n     static class LowerCasingEnumSerializer extends StdSerializer<Enum>\n     {\n         public LowerCasingEnumSerializer() { super(Enum.class); }\n--- a/src/test/java/perf/ManulWritePerfWithUUID.java\n+++ b/src/test/java/perf/ManulWritePerfWithUUID.java\n     public UUIDSlow(UUID[] v) { values = v; }\n }\n \n+@SuppressWarnings(\"serial\")\n class SlowSer extends StdScalarSerializer<UUID>\n {\n     public SlowSer() { super(UUID.class); }", "timestamp": 1419370043, "metainfo": ""}