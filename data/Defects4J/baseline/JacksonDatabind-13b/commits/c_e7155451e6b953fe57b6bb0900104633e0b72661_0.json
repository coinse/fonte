{"sha": "e7155451e6b953fe57b6bb0900104633e0b72661", "log": "Minor fix to #426 unit test (problem itself still persists)", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/failing/TestUnknownProperty426.java\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestUnknownProperty426.java\n     // For [Issue#426]\n     @JsonIgnoreProperties({ \"userId\" })\n     static class User {\n+        public String firstName;\n         Integer userId; \n \n         void setUserId(String id) {\n             setUserId(new Integer(id));\n         }\n-    \n+\n         public Integer getUserId() {\n             return userId;\n         }\n-    \n+\n         public void setUserId(Integer v) {\n             this.userId = v;\n         }\n \n     public void testIssue426() throws Exception\n     {\n-        final String JSON = aposToQuotes(\"{'id': 9, 'firstName': 'Mike' }\");\n+        final String JSON = aposToQuotes(\"{'userId': 9, 'firstName': 'Mike' }\");\n         User result = MAPPER.reader(User.class).readValue(JSON);\n         assertNotNull(result);\n+        assertEquals(\"Mike\", result.firstName);\n     }\n }\n \n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestUnwrappedWithCreator265.java\n+package com.fasterxml.jackson.failing;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+public class TestUnwrappedWithCreator265 extends BaseMapTest\n+{\n+    static class JAddress {\n+        protected String address;\n+        protected String city;\n+        protected String state;\n+         \n+        @JsonCreator\n+        public JAddress( @JsonProperty(\"address\") String address,\n+                @JsonProperty(\"city\") String city,\n+                @JsonProperty(\"state\") String state\n+        ){\n+            this.address = address;\n+            this.city = city;\n+            this.state = state;\n+        }\n+         \n+        public String getAddress1() { return address; }\n+        public String getCity() { return city; }\n+        public String getState() { return state; }\n+    }\n+\n+    static class JPerson {\n+        protected String _name;\n+        protected JAddress _address;\n+        protected String _alias;\n+         \n+        @JsonCreator\n+        public JPerson(@JsonProperty(\"name\") String name,\n+        @JsonUnwrapped JAddress address,\n+        @JsonProperty(\"alias\") String alias) {\n+            _name = name;\n+            _address = address;\n+            _alias = alias;\n+        }\n+         \n+        public String getName() {\n+            return _name;\n+        }\n+         \n+        @JsonUnwrapped public JAddress getAddress() {\n+            return _address;\n+        }\n+         \n+        public String getAlias() { return _alias; }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+\n+    // For [Issue#265] / [Scala#90]\n+    public void testUnwrappedWithCreator() throws Exception\n+    {\n+        JPerson person = new JPerson(\"MyName\", new JAddress(\"main street\", \"springfield\", \"WA\"), \"bubba\");\n+        ObjectMapper mapper = new ObjectMapper();\n+        String json = mapper.writeValueAsString(person);\n+        JPerson result = mapper.readValue(json, JPerson.class);\n+        assertNotNull(result);\n+        assertEquals(person._name, result._name);\n+        assertNotNull(result._address);\n+        assertEquals(person._address.city, result._address.city);\n+\n+        // and see that round-tripping works\n+        assertEquals(json, mapper.writeValueAsString(result));\n+    }\n+}", "timestamp": 1418404829, "metainfo": ""}