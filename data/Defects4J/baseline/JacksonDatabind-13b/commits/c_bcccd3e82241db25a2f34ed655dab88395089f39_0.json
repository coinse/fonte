{"sha": "bcccd3e82241db25a2f34ed655dab88395089f39", "log": "Fix #592", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n      * \n      * @since 2.3\n      */\n-    public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt)\n-        throws IOException, JsonProcessingException\n-    {\n-        copyCurrentStructure(jp);\n+    public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n+    {\n+        if (jp.getCurrentTokenId() != JsonToken.FIELD_NAME.id()) {\n+            copyCurrentStructure(jp);\n+            return this;\n+        }\n+        /* 28-Oct-2014, tatu: As per #592, need to support a special case of starting from\n+         *    FIELD_NAME, which is taken to mean that we are missing START_OBJECT, but need\n+         *    to assume one did exist.\n+         */\n+        JsonToken t;\n+        writeStartObject();\n+        do {\n+            copyCurrentStructure(jp);\n+        } while ((t = jp.nextToken()) == JsonToken.FIELD_NAME);\n+        if (t != JsonToken.END_OBJECT) {\n+            throw ctxt.mappingException(\"Expected END_OBJECT after copying contents of a JsonParser into TokenBuffer, got \"+t);\n+        }\n+        writeEndObject();\n         return this;\n     }\n     \n--- a/src/test/java/com/fasterxml/jackson/databind/creators/TestCreatorsDelegating.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestCreatorsDelegating.java\n \n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JacksonInject;\n-\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonToken;\n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.util.TokenBuffer;\n \n public class TestCreatorsDelegating extends BaseMapTest\n {\n             return new FactoryBean711(a, n1, n2);\n         }\n     }\n-    \n+\n+    static class Value592\n+    {\n+        protected Object stuff;\n+\n+        protected Value592(Object ob, boolean bogus) {\n+            stuff = ob;\n+        }\n+        \n+        @JsonCreator\n+        public static Value592 from(TokenBuffer buffer) {\n+            return new Value592(buffer, false);\n+        }\n+    }\n+        \n     /*\n     /**********************************************************\n     /* Unit tests\n         assertEquals(\"Fygar\", bean.name1);\n         assertEquals(\"Fygar\", bean.name2);\n     }\n+\n+    // [databind#592]\n+    public void testDelegateWithTokenBuffer() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        Value592 value = mapper.readValue(\"{\\\"a\\\":1,\\\"b\\\":2}\", Value592.class);\n+        assertNotNull(value);\n+        Object ob = value.stuff;\n+        assertEquals(TokenBuffer.class, ob.getClass());\n+        JsonParser jp = ((TokenBuffer) ob).asParser();\n+        assertToken(JsonToken.START_OBJECT, jp.nextToken());\n+        assertToken(JsonToken.FIELD_NAME, jp.nextToken());\n+        assertEquals(\"a\", jp.getCurrentName());\n+        assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n+        assertEquals(1, jp.getIntValue());\n+        assertToken(JsonToken.FIELD_NAME, jp.nextToken());\n+        assertEquals(\"b\", jp.getCurrentName());\n+        assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n+        assertEquals(2, jp.getIntValue());\n+        assertToken(JsonToken.END_OBJECT, jp.nextToken());\n+        jp.close();\n+    }\n+\n }", "timestamp": 1414553567, "metainfo": ""}