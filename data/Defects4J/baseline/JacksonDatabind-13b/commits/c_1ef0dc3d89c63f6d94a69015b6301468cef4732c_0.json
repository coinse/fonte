{"sha": "1ef0dc3d89c63f6d94a69015b6301468cef4732c", "log": "Remove BeanProperty from SerializerFactory.createKeySerializer()", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n             BeanProperty property)\n         throws JsonMappingException\n     {\n-        JsonSerializer<Object> ser = _serializerFactory.createKeySerializer(this, keyType, property);\n+        JsonSerializer<Object> ser = _serializerFactory.createKeySerializer(_config, keyType);\n     \n         // First things first: maybe there are registered custom implementations\n         // if not, use default one:\n     }\n \n     @SuppressWarnings(\"unchecked\")\n+    protected JsonSerializer<Object> _handleResolvable(JsonSerializer<?> ser)\n+        throws JsonMappingException\n+    {\n+        if (ser instanceof ResolvableSerializer) {\n+            ((ResolvableSerializer) ser).resolve(this);\n+        }\n+        return (JsonSerializer<Object>) ser;\n+    }\n+    \n+    @SuppressWarnings(\"unchecked\")\n     protected JsonSerializer<Object> _handleContextual(JsonSerializer<?> ser,\n             BeanProperty property)\n         throws JsonMappingException\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public JsonSerializer<Object> createKeySerializer(SerializerProvider prov,\n-            JavaType type, BeanProperty property)\n+    public JsonSerializer<Object> createKeySerializer(SerializationConfig config,\n+            JavaType type)\n     {\n         // Minor optimization: to avoid constructing beanDesc, bail out if none registered\n         if (!_factoryConfig.hasKeySerializers()) {\n             return null;\n         }\n-\n-        final SerializationConfig config = prov.getConfig();\n         // We should not need any member method info; at most class annotations for Map type\n         BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());\n         JsonSerializer<?> ser = null;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/SerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/SerializerFactory.java\n      * key type, and is for specified property (or, if property is null, as root value)\n      * \n      * @param baseType Declared type for Map keys\n-     * @param property Property that contains Map being serialized; null when serializing root Map value.\n      * \n-     * @return Serializer to use, if factory knows it; null if not (in which case default serializer\n-     *   is to be used)\n+     * @return Serializer to use, if factory knows it; null if not (in which case default\n+     *   serializer is to be used)\n      */\n-    public abstract JsonSerializer<Object> createKeySerializer(SerializerProvider prov,\n-            JavaType baseType, BeanProperty property)\n+    public abstract JsonSerializer<Object> createKeySerializer(SerializationConfig config,\n+            JavaType baseType)\n         throws JsonMappingException;\n }", "timestamp": 1328148622, "metainfo": ""}