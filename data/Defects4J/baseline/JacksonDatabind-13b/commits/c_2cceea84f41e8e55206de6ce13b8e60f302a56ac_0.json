{"sha": "2cceea84f41e8e55206de6ce13b8e60f302a56ac", "log": "Fixed [Issue#118]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeSerializer.java\n    @Override\n    public AsExternalTypeSerializer forProperty(BeanProperty prop) {\n        if (_property == prop) return this;\n-       return new AsExternalTypeSerializer(this._idResolver, prop, this._typePropertyName);\n+       return new AsExternalTypeSerializer(_idResolver, prop, _typePropertyName);\n    }\n    \n    @Override\n    public void writeTypePrefixForObject(Object value, JsonGenerator jgen)\n        throws IOException, JsonProcessingException\n    {\n-       _writePrefix(value, jgen);\n+       _writeObjectPrefix(value, jgen);\n    }\n \n    @Override\n    public void writeTypePrefixForObject(Object value, JsonGenerator jgen, Class<?> type)\n        throws IOException, JsonProcessingException\n    {\n-       _writePrefix(value, jgen, type);\n+       _writeObjectPrefix(value, jgen);\n    }\n    \n    @Override\n    public void writeTypePrefixForArray(Object value, JsonGenerator jgen)\n        throws IOException, JsonProcessingException\n    {\n-       _writePrefix(value, jgen);\n+       _writeArrayPrefix(value, jgen);\n    }\n \n    @Override\n    public void writeTypePrefixForArray(Object value, JsonGenerator jgen, Class<?> type)\n            throws IOException, JsonProcessingException\n    {\n-       _writePrefix(value, jgen, type);\n+       _writeArrayPrefix(value, jgen);\n    }\n \n    @Override\n    public void writeTypePrefixForScalar(Object value, JsonGenerator jgen)\n            throws IOException, JsonProcessingException\n    {\n-       _writePrefix(value, jgen);\n+       _writeScalarPrefix(value, jgen);\n    }\n \n    @Override\n    public void writeTypePrefixForScalar(Object value, JsonGenerator jgen, Class<?> type)\n            throws IOException, JsonProcessingException\n    {\n-       _writePrefix(value, jgen, type);\n+       _writeScalarPrefix(value, jgen);\n    }\n \n    /*\n    public void writeTypeSuffixForObject(Object value, JsonGenerator jgen)\n        throws IOException, JsonProcessingException\n    {\n-       _writeSuffix(value, jgen, idFromValue(value));\n+       _writeObjectSuffix(value, jgen, idFromValue(value));\n    }\n \n    @Override\n    public void writeTypeSuffixForArray(Object value, JsonGenerator jgen)\n        throws IOException, JsonProcessingException\n    {\n-       _writeSuffix(value, jgen, idFromValue(value));\n+       _writeArraySuffix(value, jgen, idFromValue(value));\n    }\n    \n    @Override\n    public void writeTypeSuffixForScalar(Object value, JsonGenerator jgen)\n        throws IOException, JsonProcessingException\n    {\n-       _writeSuffix(value, jgen, idFromValue(value));\n+       _writeScalarSuffix(value, jgen, idFromValue(value));\n    }\n \n    /*\n    public void writeCustomTypePrefixForScalar(Object value, JsonGenerator jgen, String typeId)\n        throws IOException, JsonProcessingException\n    {\n-       _writePrefix(value, jgen); // here standard works fine\n+       _writeScalarPrefix(value, jgen);\n    }\n    \n    @Override\n    public void writeCustomTypePrefixForObject(Object value, JsonGenerator jgen, String typeId)\n        throws IOException, JsonProcessingException {\n-       _writePrefix(value, jgen); // here standard works fine\n+       _writeObjectPrefix(value, jgen);\n    }\n    \n    @Override\n    public void writeCustomTypePrefixForArray(Object value, JsonGenerator jgen, String typeId)\n        throws IOException, JsonProcessingException\n    {\n-       _writePrefix(value, jgen); // here standard works fine\n+       _writeArrayPrefix(value, jgen);\n    }\n \n    @Override\n    public void writeCustomTypeSuffixForScalar(Object value, JsonGenerator jgen, String typeId)\n        throws IOException, JsonProcessingException {\n-       _writeSuffix(value, jgen, typeId);// here standard works fine\n+       _writeScalarSuffix(value, jgen, typeId);\n    }\n \n    @Override\n    public void writeCustomTypeSuffixForObject(Object value, JsonGenerator jgen, String typeId)\n        throws IOException, JsonProcessingException {\n-       _writeSuffix(value, jgen, typeId);// here standard works fine\n+       _writeObjectSuffix(value, jgen, typeId);\n    }\n \n    @Override\n    public void writeCustomTypeSuffixForArray(Object value, JsonGenerator jgen, String typeId)\n            throws IOException, JsonProcessingException {\n-       _writeSuffix(value, jgen, typeId);// here standard works fine\n+       _writeArraySuffix(value, jgen, typeId);\n    }\n    \n    /*\n    /* Helper methods\n    /**********************************************************\n     */\n-   \n-   protected final void _writePrefix(Object value, JsonGenerator jgen)\n-       throws IOException, JsonProcessingException\n-   {\n+\n+   protected final void _writeScalarPrefix(Object value, JsonGenerator jgen)\n+       throws IOException, JsonProcessingException {\n+       // nothing to wrap it with\n+   }\n+\n+   protected final void _writeObjectPrefix(Object value, JsonGenerator jgen)\n+       throws IOException, JsonProcessingException {\n        jgen.writeStartObject();\n    }\n \n-   protected final void _writePrefix(Object value, JsonGenerator jgen, Class<?> type)\n-       throws IOException, JsonProcessingException\n-   {\n-       jgen.writeStartObject();\n-   }\n-   \n-   protected final void _writeSuffix(Object value, JsonGenerator jgen, String typeId)\n+   protected final void _writeArrayPrefix(Object value, JsonGenerator jgen)\n+       throws IOException, JsonProcessingException {\n+       jgen.writeStartArray();\n+   }\n+   \n+   protected final void _writeScalarSuffix(Object value, JsonGenerator jgen, String typeId)\n+       throws IOException, JsonProcessingException\n+   {\n+       jgen.writeStringField(_typePropertyName, typeId);\n+   }\n+   \n+   protected final void _writeObjectSuffix(Object value, JsonGenerator jgen, String typeId)\n        throws IOException, JsonProcessingException\n    {\n        jgen.writeEndObject();\n        jgen.writeStringField(_typePropertyName, typeId);\n    }\n+\n+   protected final void _writeArraySuffix(Object value, JsonGenerator jgen, String typeId)\n+       throws IOException, JsonProcessingException\n+   {\n+       jgen.writeEndArray();\n+       jgen.writeStringField(_typePropertyName, typeId);\n+   }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestExternalId.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestExternalId.java\n package com.fasterxml.jackson.databind.jsontype;\n+\n+import java.util.Date;\n \n import com.fasterxml.jackson.annotation.*;\n import com.fasterxml.jackson.annotation.JsonTypeInfo.As;\n         }\n     }    \n \n+    static class ExternalTypeWithNonPOJO {\n+        @JsonTypeInfo(use = JsonTypeInfo.Id.NAME,\n+                property = \"type\",\n+                visible = true,\n+                include = JsonTypeInfo.As.EXTERNAL_PROPERTY,\n+                defaultImpl = String.class)\n+        @JsonSubTypes({\n+            @JsonSubTypes.Type(value = Date.class, name = \"date\"),\n+            @JsonSubTypes.Type(value = String.class, name = \"\")\n+        })\n+        public Object value;\n+\n+        public ExternalTypeWithNonPOJO() { }\n+        public ExternalTypeWithNonPOJO(Object o) { value = o; }\n+    }    \n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests, serialization\n+    /**********************************************************\n+     */\n+\n     private final ObjectMapper MAPPER = new ObjectMapper();\n-\n-    /*\n-    /**********************************************************\n-    /* Unit tests, serialization\n-    /**********************************************************\n-     */\n     \n     public void testSimpleSerialization() throws Exception\n     {\n         assertNotNull(defaulted.bean);\n         assertSame(ValueBean.class, defaulted.bean.getClass());\n     }\n+\n+    // For [Issue#118]\n+    // Note: String works fine, since no type id will used; other scalar types have issues\n+    public void testWithScalar118() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        String json;\n+\n+        ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L));\n+        json = mapper.writeValueAsString(input);\n+        System.out.println(\"JSON with Date: \"+json);\n+        assertNotNull(json);\n+\n+        // and back just to be sure:\n+        ExternalTypeWithNonPOJO result = mapper.readValue(json, ExternalTypeWithNonPOJO.class);\n+        assertNotNull(result.value);\n+        assertTrue(result.value instanceof java.util.Date);\n+    }\n }", "timestamp": 1354495747, "metainfo": ""}