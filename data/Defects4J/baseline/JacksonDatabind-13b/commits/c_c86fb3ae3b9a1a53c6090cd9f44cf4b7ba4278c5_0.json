{"sha": "c86fb3ae3b9a1a53c6090cd9f44cf4b7ba4278c5", "log": "Start implementing #540", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java\n      * If disabled, standard POJOs can only be bound from JSON null or\n      * JSON Object (standard meaning that no custom deserializers or\n      * constructors are defined; both of which can add support for other\n-     * kinds of JSON values); if enable, empty JSON String can be taken\n+     * kinds of JSON values); if enabled, empty JSON String can be taken\n      * to be equivalent of JSON null.\n      *<p>\n      * Feature is disabled by default.\n      */\n     ACCEPT_EMPTY_STRING_AS_NULL_OBJECT(false),\n+\n+    /**\n+     * Feature that can be enabled to allow empty JSON Array\n+     * value (that is, <code>[ ]</code>) to be bound to POJOs as null.\n+     * If disabled, standard POJOs can only be bound from JSON null or\n+     * JSON Object (standard meaning that no custom deserializers or\n+     * constructors are defined; both of which can add support for other\n+     * kinds of JSON values); if enabled, empty JSON Array will be taken\n+     * to be equivalent of JSON null.\n+     *<p>\n+     * Feature is disabled by default.\n+     * \n+     * @since 2.5\n+     */\n+    ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT(false),\n     \n     /**\n      * Feature that allows unknown Enum values to be parsed as null values. \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n     implements ContextualDeserializer, ResolvableDeserializer,\n         java.io.Serializable // since 2.1\n {\n-    private static final long serialVersionUID = 2960120955735322578L;\n+    private static final long serialVersionUID = 1;\n \n     protected final static PropertyName TEMP_PROPERTY_NAME = new PropertyName(\"#temporary-name\");\n \n--- a/src/test/java/com/fasterxml/jackson/databind/creators/TestBuilderSimple.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestBuilderSimple.java\n     {\n         public int x, y;\n     \t\n-        public SimpleBuilderXY withX(int x) {\n-    \t\t    this.x = x;\n+        public SimpleBuilderXY withX(int x0) {\n+    \t\t    this.x = x0;\n     \t\t    return this;\n         }\n \n-        public SimpleBuilderXY withY(int y) {\n-    \t\t    this.y = y;\n+        public SimpleBuilderXY withY(int y0) {\n+    \t\t    this.y = y0;\n     \t\t    return this;\n         }\n \n         private int b, c;\n     \t\n         @JsonProperty(\"b\")\n-        public BuildABC assignB(int b) {\n-            this.b = b;\n+        public BuildABC assignB(int b0) {\n+            this.b = b0;\n             return this;\n         }\n \n         // Also ok NOT to return 'this'\n         @JsonSetter(\"c\")\n-        public void c(int c) {\n-            this.c = c;\n+        public void c(int c0) {\n+            this.c = c0;\n         }\n \n         public ValueClassABC build() {\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n     /********************************************************\n      */\n \n+    private final ObjectMapper MAPPER = new ObjectMapper();\n+    \n     public void testPropertyRemoval() throws Exception\n     {\n         ObjectMapper mapper = new ObjectMapper();\n     public void testPOJOFromEmptyString() throws Exception\n     {\n         // first, verify default settings which do not accept empty String:\n-        ObjectMapper mapper = new ObjectMapper();\n+        assertFalse(MAPPER.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT));\n         try {\n-            mapper.readValue(quote(\"\"), Bean.class);\n+            MAPPER.readValue(quote(\"\"), Bean.class);\n             fail(\"Should not accept Empty String for POJO\");\n         } catch (JsonProcessingException e) {\n             verifyException(e, \"from String value\");\n             assertValidLocation(e.getLocation());\n         }\n+        // should be ok to enable dynamically\n+        ObjectReader r = MAPPER.reader(Bean.class)\n+                .with(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);\n+        Bean result = r.readValue(quote(\"\"));\n+        assertNull(result);\n+    }\n+\n+    // [Databind#540]\n+    public void testPOJOFromEmptyArray() throws Exception\n+    {\n+        final String JSON = \"  [\\n]\";\n+        assertFalse(MAPPER.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT));\n+        // first, verify default settings which do not accept empty Array\n+        ObjectMapper mapper = new ObjectMapper();\n+        try {\n+            mapper.readValue(JSON, Bean.class);\n+            fail(\"Should not accept Empty Array for POJO by default\");\n+        } catch (JsonProcessingException e) {\n+            verifyException(e, \"START_ARRAY token\");\n+            assertValidLocation(e.getLocation());\n+        }\n \n         // should be ok to enable dynamically:\n-        mapper = new ObjectMapper();\n-        mapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true);\n-        Bean result = mapper.readValue(quote(\"\"), Bean.class);\n+        ObjectReader r = MAPPER.reader(Bean.class)\n+                .with(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT);\n+        Bean result = r.readValue(JSON);\n         assertNull(result);\n     }\n-\n+    \n     // [Issue#120]\n     public void testModifyArrayDeserializer() throws Exception\n     {\n--- a/src/test/java/com/fasterxml/jackson/databind/introspect/TestBuilderMethods.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/introspect/TestBuilderMethods.java\n     {\n         public int x;\n \n-        public SimpleBuilder withX(int x) {\n-    \t\t    this.x = x;\n+        public SimpleBuilder withX(int x0) {\n+    \t\t    this.x = x0;\n     \t\t    return this;\n         }\n     }", "timestamp": 1411702554, "metainfo": ""}