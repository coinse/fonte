{"sha": "1ab4fdaf1109ff4d738704d2031d835cbea2922b", "log": "Improve unit testing to reproduce issue #428", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/introspect/TestNamingStrategyCustom.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/introspect/TestNamingStrategyCustom.java\n import java.util.*;\n \n import com.fasterxml.jackson.annotation.*;\n+\n import com.fasterxml.jackson.databind.BaseMapTest;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.PropertyNamingStrategy;\n-import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n-import com.fasterxml.jackson.databind.annotation.JsonNaming;\n+import com.fasterxml.jackson.databind.annotation.*;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n import com.fasterxml.jackson.databind.introspect.AnnotatedField;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;\n     \n     static class RenamedCollectionBean\n     {\n-        @JsonDeserialize\n-        private List<String> THEvalues = Collections.emptyList();\n+//        @JsonDeserialize\n+        @JsonProperty\n+        private List<String> theValues = Collections.emptyList();\n         \n         // intentionally odd name, to be renamed by naming strategy\n-        public List<String> getTheVALUEs() { return THEvalues; }\n+        public List<String> getTheValues() { return theValues; }\n     }\n \n     // [Issue#45]: Support @JsonNaming\n     }\n \n     // For [JACKSON-687]\n-    public void testJson() throws Exception\n+    public void testLowerCase() throws Exception\n     {\n         ObjectMapper mapper = new ObjectMapper();\n         mapper.setPropertyNamingStrategy(new LcStrategy());\n //        mapper.disable(DeserializationConfig.DeserializationFeature.USE_GETTERS_AS_SETTERS);\n-        RenamedCollectionBean foo = mapper.readValue(\"{\\\"thevalues\\\":[\\\"a\\\"]}\", RenamedCollectionBean.class);\n-        assertNotNull(foo.getTheVALUEs());\n-        assertEquals(1, foo.getTheVALUEs().size());\n-        assertEquals(\"a\", foo.getTheVALUEs().get(0));\n+        RenamedCollectionBean result = mapper.readValue(\"{\\\"thevalues\\\":[\\\"a\\\"]}\",\n+                RenamedCollectionBean.class);\n+        assertNotNull(result.getTheValues());\n+        assertEquals(1, result.getTheValues().size());\n+        assertEquals(\"a\", result.getTheValues().get(0));\n     }\n \n     // @JsonNaming / [Issue#45]\n--- a/src/test/java/com/fasterxml/jackson/databind/introspect/TestNamingStrategyStd.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/introspect/TestNamingStrategyStd.java\n             this.___ = ___;\n             this.$User = $User;\n         }\n+    }\n+\n+    static class Bean428 {\n+        @JsonProperty(\"fooBar\")\n+        public String whatever() {return \"\";}\n     }\n     \n     /*\n      * PASCAL_CASE_TO_CAMEL_CASE was added in Jackson 2.1.0, \n      * as per [JACKSON-63].\n      */\n-    @Test\n     public void testPascalCaseStandAlone()\n     {\n-    \tString translatedJavaName = PropertyNamingStrategy.PASCAL_CASE_TO_CAMEL_CASE.nameForField\n+        String translatedJavaName = PropertyNamingStrategy.PASCAL_CASE_TO_CAMEL_CASE.nameForField\n     \t        (null, null, \"userName\");\n         assertEquals(\"UserName\", translatedJavaName);\n \n                 (null, null, \"x\");\n         assertEquals(\"X\", translatedJavaName);\n     }\n+\n+    /**\n+     * [Issue#428]\n+     */\n+    public void testIssue428PascalWithOverrides() throws Exception {\n+\n+        String json = new ObjectMapper()\n+                            .setPropertyNamingStrategy(PropertyNamingStrategy.PASCAL_CASE_TO_CAMEL_CASE)\n+                            .writeValueAsString(new Bean428());\n+        \n+        if (!json.contains(quote(\"fooBar\"))) {\n+            fail(\"Should use name 'fooBar', does not: \"+json);\n+        }\n+    }\n }\n+", "timestamp": 1396046532, "metainfo": ""}