{"sha": "fe7c82d7c260b39d487eb6414c7efe4112d108ae", "log": "Add a unit test reproducing an issue with custom id resolver, external property", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestCustomTypeIdResolver.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestCustomTypeIdResolver.java\n {\n     @JsonTypeInfo(use=Id.CUSTOM, include=As.WRAPPER_OBJECT)\n     @JsonTypeIdResolver(CustomResolver.class)\n-    static class CustomBean {\n+    static abstract class CustomBean { }\n+\n+    static class CustomBeanImpl extends CustomBean {\n         public int x;\n         \n-        public CustomBean() { }\n-        public CustomBean(int x) { this.x = x; }\n+        public CustomBeanImpl() { }\n+        public CustomBeanImpl(int x) { this.x = x; }\n+    }\n+\n+    static class CustomBeanWrapper {\n+//        @JsonTypeInfo(use=Id.NONE, include=As.EXTERNAL_PROPERTY, property=\"type\")\n+        @JsonTypeInfo(use=Id.CUSTOM, include=As.PROPERTY, property=\"type\")\n+        public CustomBean value;\n     }\n     \n     static class CustomResolver implements TypeIdResolver\n         static List<JavaType> initTypes;\n \n         public CustomResolver() { }\n-        \n+\n         @Override\n         public Id getMechanism() {\n             return Id.CUSTOM;\n         @Override\n         public String idFromValue(Object value)\n         {\n-            if (value.getClass() == CustomBean.class) {\n+            if (value instanceof CustomBean) {\n                 return \"*\";\n             }\n             return \"unknown\";\n         public JavaType typeFromId(String id)\n         {\n             if (\"*\".equals(id)) {\n-                return TypeFactory.defaultInstance().constructType(CustomBean.class);\n+                return TypeFactory.defaultInstance().constructType(CustomBeanImpl.class);\n             }\n             return null;\n         }\n     /**********************************************************\n      */\n \n+    private final ObjectMapper MAPPER = objectMapper();\n+    \n     // for [JACKSON-359]\n     public void testCustomTypeIdResolver() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n         List<JavaType> types = new ArrayList<JavaType>();\n         CustomResolver.initTypes = types;\n-        String json = m.writeValueAsString(new CustomBean[] { new CustomBean(28) });\n+        String json = MAPPER.writeValueAsString(new CustomBean[] { new CustomBeanImpl(28) });\n         assertEquals(\"[{\\\"*\\\":{\\\"x\\\":28}}]\", json);\n         assertEquals(1, types.size());\n         assertEquals(CustomBean.class, types.get(0).getRawClass());\n \n         types = new ArrayList<JavaType>();\n         CustomResolver.initTypes = types;\n-        CustomBean[] result = m.readValue(json, CustomBean[].class);\n+        CustomBean[] result = MAPPER.readValue(json, CustomBean[].class);\n         assertNotNull(result);\n         assertEquals(1, result.length);\n-        assertEquals(28, result[0].x);\n+        assertEquals(28, ((CustomBeanImpl) result[0]).x);\n         assertEquals(1, types.size());\n         assertEquals(CustomBean.class, types.get(0).getRawClass());\n     }\n+\n+    public void testCustomWithExternal() throws Exception\n+    {\n+        CustomBeanWrapper w = new CustomBeanWrapper();\n+        w.value = new CustomBeanImpl(12);\n+\n+        String json = MAPPER.writeValueAsString(w);\n+\n+System.out.println(\"JSON = \"+json);\n+        \n+        CustomBeanWrapper out = MAPPER.readValue(json, CustomBeanWrapper.class);\n+        assertNotNull(out);\n+        \n+        assertEquals(12, ((CustomBeanImpl) out.value).x);\n+    }\n }", "timestamp": 1392406909, "metainfo": ""}