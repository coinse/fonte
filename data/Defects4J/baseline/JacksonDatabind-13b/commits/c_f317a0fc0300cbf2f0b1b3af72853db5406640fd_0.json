{"sha": "f317a0fc0300cbf2f0b1b3af72853db5406640fd", "log": "Add a unit test to reproduce #466", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestTypeWithJsonValue466.java\n+package com.fasterxml.jackson.failing;\n+\n+import java.io.*;\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.*;\n+import com.fasterxml.jackson.databind.*;\n+\n+@SuppressWarnings(\"serial\")\n+public class TestTypeWithJsonValue466 extends BaseMapTest\n+{\n+    // The following is required for the testDecimalMetadata test case. That case fails.\n+    @JsonTypeName(value = \"decimalValue\")\n+    public static class DecimalValue {\n+        private java.math.BigDecimal value;\n+        public DecimalValue(){ this.value = java.math.BigDecimal.valueOf( 1234.4321 ); }\n+     \n+        @JsonValue\n+        public java.math.BigDecimal getValue(){ return value; }\n+    }\n+\n+    @JsonPropertyOrder({\"key\",\"value\"})\n+    public static class DecimalEntry {\n+    public DecimalEntry(){}\n+        public String getKey(){ return \"num\"; }\n+         \n+        @JsonTypeInfo(use=JsonTypeInfo.Id.NAME, include=JsonTypeInfo.As.EXTERNAL_PROPERTY)\n+        public DecimalValue getValue(){\n+            return new DecimalValue();\n+        }\n+    }\n+\n+    public static class DecimalMetadata {\n+        @JsonProperty(\"metadata\")\n+        public List<DecimalEntry> getMetadata() {\n+            return new ArrayList<DecimalEntry>() { {add(new DecimalEntry());} };\n+        }\n+    }\n+\n+    // The following succeeds. It's included for comparison\n+    @JsonTypeName(value = \"doubleValue\")\n+    public static class DoubleValue {\n+        private Double value;\n+        public DoubleValue(){ this.value = 1234.4321; }\n+         \n+        @JsonValue\n+        public Double getValue(){ return value; }\n+    }\n+\n+    @JsonPropertyOrder({\"key\",\"value\"})\n+    public static class DoubleEntry {\n+        public DoubleEntry(){}\n+        public String getKey(){ return \"num\"; }\n+     \n+        @JsonTypeInfo(use=JsonTypeInfo.Id.NAME, include=JsonTypeInfo.As.EXTERNAL_PROPERTY)\n+        public DoubleValue getValue(){ return new DoubleValue(); }\n+    }\n+\n+    public static class DoubleMetadata {\n+        @JsonProperty(\"metadata\")\n+        public List<DoubleEntry> getMetadata() {\n+            return new ArrayList<DoubleEntry>() { {add(new DoubleEntry());} };\n+        }\n+    }\n+\n+    final ObjectMapper MAPPER = new ObjectMapper();\n+    \n+    public void testDoubleMetadata() throws IOException {\n+        DoubleMetadata doub = new DoubleMetadata();\n+        String expected = \"{\\\"metadata\\\":[{\\\"key\\\":\\\"num\\\",\\\"value\\\":1234.4321,\\\"@type\\\":\\\"doubleValue\\\"}]}\";\n+        String json = MAPPER.writeValueAsString(doub);\n+        assertEquals(\"Serialized json not equivalent\", expected, json);\n+    }\n+\n+    public void testDecimalMetadata() throws IOException{\n+        DecimalMetadata dec = new DecimalMetadata();\n+        String expected = \"{\\\"metadata\\\":[{\\\"key\\\":\\\"num\\\",\\\"value\\\":1234.4321,\\\"@type\\\":\\\"decimalValue\\\"}]}\";\n+        String json = MAPPER.writeValueAsString(dec);\n+        assertEquals(\"Serialized json not equivalent\", expected, json);\n+    }\n+}", "timestamp": 1401255616, "metainfo": ""}