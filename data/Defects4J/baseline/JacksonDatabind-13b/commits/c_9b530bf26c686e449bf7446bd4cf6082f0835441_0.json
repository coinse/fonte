{"sha": "9b530bf26c686e449bf7446bd4cf6082f0835441", "log": "Merge branch '2.4'  Conflicts: \tsrc/test/java/com/fasterxml/jackson/databind/introspect/TestMixinMerging.java", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java\n     extends Annotated\n {\n     private final static AnnotationMap[] NO_ANNOTATION_MAPS = new AnnotationMap[0];\n-    \n+\n     /*\n     /**********************************************************\n     /* Configuration\n                      * just placeholder, can't be called)\n                      */\n                 } else {\n-                    mixIns.add(_constructMethod(m));\n+                    // Well, or, as per [Issue#515], multi-level merge within mixins...\n+                    am = mixIns.find(m);\n+                    if (am != null) {\n+                        _addMixUnders(m, am);\n+                    } else {\n+                        mixIns.add(_constructMethod(m));\n+                    }\n                 }\n             }\n         }\n--- a/src/test/java/com/fasterxml/jackson/databind/introspect/TestMixinMerging.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/introspect/TestMixinMerging.java\n package com.fasterxml.jackson.databind.introspect;\n \n-import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n \n public class TestMixinMerging extends BaseMapTest\n {\n+    public interface Contact {\n+        String getCity();\n+    }\n+\n+    static class ContactImpl implements Contact {\n+        public String getCity() { return \"Seattle\"; }\n+    }\n+\n+    static class ContactMixin implements Contact {\n+        @JsonProperty\n+        public String getCity() { return null; }\n+    }\n+\n+    public interface Person extends Contact {}\n+\n+    static class PersonImpl extends ContactImpl implements Person {}\n+\n+    static class PersonMixin extends ContactMixin implements Person {}\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+    \n     // for [Issue#515]\n     public void testDisappearingMixins515() throws Exception\n     {\n-        // TBI\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.disable(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS)\n+            .disable(MapperFeature.AUTO_DETECT_FIELDS)\n+            .disable(MapperFeature.AUTO_DETECT_GETTERS)\n+            .disable(MapperFeature.AUTO_DETECT_IS_GETTERS)\n+            .disable(MapperFeature.INFER_PROPERTY_MUTATORS);\n+        SimpleModule module = new SimpleModule(\"Test\");\n+        module.setMixInAnnotation(Person.class, PersonMixin.class);        \n+        mapper.registerModule(module);\n+\n+        assertEquals(\"{\\\"city\\\":\\\"Seattle\\\"}\", mapper.writeValueAsString(new PersonImpl()));\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n public abstract class SerializerProvider\n     extends DatabindContext\n {\n-    @Deprecated // since 2.3, not used by anything it seems\n-    protected final static JavaType TYPE_OBJECT = TypeFactory.defaultInstance().uncheckedSimpleType(Object.class);\n-\n     /**\n      * Setting for determining whether mappings for \"unknown classes\" should be\n      * cached for faster resolution. Usually this isn't needed, but maybe it\n      */\n \n     /**\n-     * @deprecated Since 2.3 (and to be removed from 2.4); use\n-     *   {@link #handlePrimaryContextualization} or {@link #handleSecondaryContextualization}\n-     *   instead\n-     */\n-    @Deprecated\n-    public JsonSerializer<?> handleContextualization(JsonSerializer<?> ser,\n-            BeanProperty property)\n-        throws JsonMappingException\n-    {\n-        return handleSecondaryContextualization(ser, property);\n-    }\n-    \n-    /**\n      * Method called for primary property serializers (ones\n      * directly created to serialize values of a POJO property),\n      * to handle details of resolving\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n \n         for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n             int argCount = ctor.getParameterCount();\n-            boolean isCreator = intr.hasCreatorAnnotation(ctor) || ctor == propertyCtor;\n+            boolean isCreator = intr.hasCreatorAnnotation(ctor) || (ctor == propertyCtor);\n+//            boolean isCreator = intr.hasCreatorAnnotation(ctor);\n+            \n             boolean isVisible =  vchecker.isCreatorVisible(ctor);\n             // some single-arg constructors (String, number) are auto-detected\n             if (argCount == 1) {\n             PropertyName name)\n         throws JsonMappingException\n     {\n-        // note: if we do have parameter name, it'll be \"property constructor\":\n+        // note: if we do have EXPLICIT parameter name, it'll be \"property constructor\":\n         AnnotatedParameter param = ctor.getParameter(0);\n         if (name == null) {\n-            name = _findParamName(param, intr);\n+            name = _findExplicitParamName(param, intr);\n         }\n         Object injectId = intr.findInjectableValueId(param);\n     \n         if ((injectId != null) || (name != null && name.hasSimpleName())) { // property-based\n-            // We know there's a name and it's only 1 parameter.\n+            // We know there's EXPLICIT name and it's only 1 parameter.\n             CreatorProperty[] properties = new CreatorProperty[1];\n             properties[0] = constructCreatorProperty(ctxt, beanDesc, name, 0, param, injectId);\n             creators.addPropertyCreator(ctor, properties);\n             // some single-arg factory methods (String, number) are auto-detected\n             if (argCount == 1) {\n                 AnnotatedParameter param = factory.getParameter(0);\n-                PropertyName pn = _findParamName(param, intr);\n+                // NOTE: only consider EXPLICIT names for auto-detection\n+                PropertyName pn = _findExplicitParamName(param, intr);\n                 String name = (pn == null) ? null : pn.getSimpleName();\n                 Object injectId = intr.findInjectableValueId(param);\n \n         }\n         return prop;\n     }\n-\n+    \n     protected PropertyName _findParamName(AnnotatedParameter param, AnnotationIntrospector intr)\n     {\n         if (param != null && intr != null) {\n             }\n         }\n         return null;\n+    }\n+\n+    protected PropertyName _findExplicitParamName(AnnotatedParameter param, AnnotationIntrospector intr)\n+    {\n+        if (param != null && intr != null) {\n+            return intr.findNameForDeserialization(param);\n+        }\n+        return null;\n+    }\n+    \n+    protected boolean _hasExplicitParamName(AnnotatedParameter param, AnnotationIntrospector intr)\n+    {\n+        if (param != null && intr != null) {\n+            PropertyName n = intr.findNameForDeserialization(param);\n+            return (n != null) && n.hasSimpleName();\n+        }\n+        return false;\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n         //   For now, won't add, since it is inferred, not explicit...\n     }\n \n-    @Deprecated // since 2.3\n-    public void addInjectable(String propName, JavaType propType,\n-            Annotations contextAnnotations, AnnotatedMember member,\n-            Object valueId)\n-    {\n-        addInjectable(new PropertyName(propName), propType, contextAnnotations, member, valueId);\n-    }\n-    \n     public void addInjectable(PropertyName propName, JavaType propType,\n             Annotations contextAnnotations, AnnotatedMember member,\n             Object valueId)\n         return _properties.values().iterator();\n     }\n \n-    /**\n-     * @since 2.3\n-     */\n     public SettableBeanProperty findProperty(PropertyName propertyName) {\n         return _properties.get(propertyName.getSimpleName());\n     }\n \n-    @Deprecated // since 2.3\n-    public SettableBeanProperty findProperty(String propertyName) {\n-        return _properties.get(propertyName);\n-    }\n-\n-    /**\n-     * @since 2.3\n-     */\n     public boolean hasProperty(PropertyName propertyName) {\n         return findProperty(propertyName) != null;\n     }\n-    \n-    @Deprecated // since 2.3\n-    public boolean hasProperty(String propertyName) {\n-        return findProperty(propertyName) != null;\n-    }\n-\n-    /**\n-     * @since 2.3\n-     */\n+\n     public SettableBeanProperty removeProperty(PropertyName name) {\n         return _properties.remove(name.getSimpleName());\n-    }\n-    \n-    @Deprecated // since 2.3\n-    public SettableBeanProperty removeProperty(String name) {\n-        return _properties.remove(name);\n     }\n \n     public SettableAnyProperty getAnySetter() {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableAnyProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableAnyProperty.java\n     /**********************************************************\n      */\n \n-    @Deprecated // since 2.3\n-    public SettableAnyProperty(BeanProperty property, AnnotatedMethod setter, JavaType type,\n-            JsonDeserializer<Object> valueDeser) {\n-        this(property, setter, type, valueDeser, null);\n-    }\n-\n     public SettableAnyProperty(BeanProperty property, AnnotatedMethod setter, JavaType type,\n             JsonDeserializer<Object> valueDeser, TypeDeserializer typeDeser)\n     {\n         this(property, setter.getAnnotated(), type, valueDeser, typeDeser);\n     }\n-    \n-    @Deprecated // since 2.3\n-    public SettableAnyProperty(BeanProperty property, Method rawSetter, JavaType type,\n-            JsonDeserializer<Object> valueDeser) {\n-        this(property, rawSetter, type, valueDeser, null);\n-    }\n-    \n+\n     public SettableAnyProperty(BeanProperty property, Method rawSetter, JavaType type,\n             JsonDeserializer<Object> valueDeser, TypeDeserializer typeDeser)\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n                 contextAnnotations, propDef.getMetadata());\n     }\n \n-    @Deprecated // since 2.2\n-    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n-            TypeDeserializer typeDeser, Annotations contextAnnotations)\n-    {\n-        this(new PropertyName(propName), type, wrapper, typeDeser, contextAnnotations,\n-                PropertyMetadata.STD_OPTIONAL);\n-    }\n-\n     @Deprecated // since 2.3\n     protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n             TypeDeserializer typeDeser, Annotations contextAnnotations,\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n         _annotationIntrospector = annotationIntrospector;\n         _forSerialization = forSerialization;\n     }\n-    \n-    @Deprecated // since 2.3\n-    public POJOPropertyBuilder(String simpleInternalName,\n-            AnnotationIntrospector annotationIntrospector, boolean forSerialization)\n-    {\n-        this(new PropertyName(simpleInternalName), annotationIntrospector, forSerialization);\n-    }\n \n     public POJOPropertyBuilder(POJOPropertyBuilder src, PropertyName newName)\n     {\n     /* Fluent factory methods\n     /**********************************************************\n      */\n-\n-    @Deprecated // since 2.3\n-    @Override\n-    public POJOPropertyBuilder withName(String newName) {\n-        return withSimpleName(newName);\n-    }\n \n     @Override\n     public POJOPropertyBuilder withName(PropertyName newName) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n \n     public Class<?>[] getViews() { return _includeInViews; }\n \n-    /**\n-     *<p>\n-     * NOTE: due to introspection, this is a <b>slow</b> method to call\n-     * and should never be called during actual serialization or filtering\n-     * of the property. Rather it is needed for traversal needed for things\n-     * like constructing JSON Schema instances.\n-     * \n-     * @since 2.1\n-     * \n-     * @deprecated since 2.2, use {@link #isRequired()} instead.\n-     */\n-    @Deprecated\n-    protected boolean isRequired(AnnotationIntrospector intr) { return _metadata.isRequired(); }\n-    \n     /*\n     /**********************************************************\n     /* PropertyWriter methods (serialization)\n     }\n \n     /**\n-     * @deprecated Since 2.3 Use overloaded variants\n-     */\n-    @Deprecated\n-    protected void _handleSelfReference(Object bean, JsonSerializer<?> ser)\n-        throws JsonMappingException {\n-        _handleSelfReference(bean, null, null, ser);\n-    }\n-    \n-    /**\n      * Method called to handle a direct self-reference through this property.\n      * Method can choose to indicate an error by throwing {@link JsonMappingException};\n      * fully handle serialization (and return true); or indicate that it should be\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n         findValueSerializer(javaType, null).acceptJsonFormatVisitor(visitor, javaType);\n     }\n \n-    @Deprecated // since 2.3; use the overloaded variant\n-    public boolean hasSerializerFor(Class<?> cls) {\n-        return hasSerializerFor(cls, null);\n-    }\n-    \n     /**\n      * Method that can be called to see if this serializer provider\n      * can find a serializer for an instance of given class.\n--- a/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n         /**********************************************************\n          */\n \n-        @Deprecated // since 2.3\n-        protected Parser(Segment firstSeg, ObjectCodec codec) {\n-            this(firstSeg, codec, false, false);\n-        }\n-\n-        /**\n-         * @since 2.3\n-         */\n         public Parser(Segment firstSeg, ObjectCodec codec,\n                 boolean hasNativeTypeIds,\n                 boolean hasNativeObjectIds)\n--- a/src/test/java/com/fasterxml/jackson/databind/creators/TestCreators3.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestCreators3.java\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;\n+import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;\n \n public class TestCreators3 extends BaseMapTest\n {\n \n         private MultiCtor() { }\n \n-        private MultiCtor(String a, String b, Object c) {\n+        private MultiCtor(String a, String b, Boolean c) {\n             if (c == null) {\n                 throw new RuntimeException(\"Wrong factory!\");\n             }\n         }\n         \n     }\n+\n+    @SuppressWarnings(\"serial\")\n+    static class MyParamIntrospector extends JacksonAnnotationIntrospector\n+    {\n+        @Override\n+        public String findImplicitPropertyName(AnnotatedMember param) {\n+            if (param instanceof AnnotatedParameter) {\n+                AnnotatedParameter ap = (AnnotatedParameter) param;\n+                switch (ap.getIndex()) {\n+                case 0: return \"a\";\n+                case 1: return \"b\";\n+                case 2: return \"c\";\n+                default:\n+                    return \"param\"+ap.getIndex();\n+                }\n+            }\n+            return super.findImplicitPropertyName(param);\n+        }\n+    }\n     \n     /*\n     /**********************************************************\n     /**********************************************************\n      */\n \n-    private final ObjectMapper MAPPER = new ObjectMapper();\n-\n     // [Issue#421]\n     public void testMultiCtor421() throws Exception\n     {\n-        MultiCtor bean = MAPPER.readValue(aposToQuotes(\"{'a':'123','b':'foo'}\"), MultiCtor.class);\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.setAnnotationIntrospector(new MyParamIntrospector());\n+\n+        MultiCtor bean = mapper.readValue(aposToQuotes(\"{'a':'123','b':'foo'}\"), MultiCtor.class);\n         assertNotNull(bean);\n         assertEquals(\"123\", bean._a);\n         assertEquals(\"foo\", bean._b);", "timestamp": 1407971137, "metainfo": ""}