{"sha": "7ff745c4a8c66769fc50b3cdaeb2e1d35327909e", "log": "More complete fix for #735", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java\n         if (type == null) {\n             throw new IllegalArgumentException(\"Null JavaType passed\");\n         }\n+        if (_hasCustomValueHandler(type)) {\n+            return null;\n+        }\n         return _cachedDeserializers.get(type);\n     }\n \n      * @param ctxt Currently active deserialization context\n      * @param type Type of property to deserialize\n      */\n-    protected JsonDeserializer<Object>_createAndCacheValueDeserializer(DeserializationContext ctxt,\n+    protected JsonDeserializer<Object> _createAndCacheValueDeserializer(DeserializationContext ctxt,\n             DeserializerFactory factory, JavaType type)\n         throws JsonMappingException\n     {\n          */\n         // 08-Jun-2010, tatu: Related to [JACKSON-296], need to avoid caching MapSerializers... so:\n         boolean isResolvable = (deser instanceof ResolvableDeserializer);\n-        boolean addToCache = deser.isCachable();\n+        // 27-Mar-2015, tatu: As per [databind#735], avoid caching types with custom value desers\n+        boolean addToCache = !_hasCustomValueHandler(type) && deser.isCachable();\n \n         /* we will temporarily hold on to all created deserializers (to\n          * handle cyclic references, and possibly reuse non-cached\n         return type;\n     }\n \n+    /*\n+    /**********************************************************\n+    /* Helper methods, other\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Helper method used to prevent both caching and cache lookups for structured\n+     * types that have custom value handlers\n+     *\n+     * @since 2.4.6\n+     */\n+    private boolean _hasCustomValueHandler(JavaType t) {\n+        if (t.isContainerType()) {\n+            JavaType ct = t.getContentType();\n+            return (ct != null) && (ct.getValueHandler() != null);\n+        }\n+        return false;\n+    }\n+\n     private Class<?> _verifyAsClass(Object src, String methodName, Class<?> noneClass)\n     {\n         if (src == null) {\n         }\n         return cls;\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Overridable error reporting methods\n--- a/src/main/java/com/fasterxml/jackson/databind/node/FloatNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/FloatNode.java\n import java.math.BigInteger;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.io.NumberOutput;\n import com.fasterxml.jackson.databind.SerializerProvider;\n \n /**\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestCustomDeserializers.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestCustomDeserializers.java\n package com.fasterxml.jackson.databind.deser;\n \n import java.io.*;\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n+import java.lang.annotation.*;\n import java.util.*;\n \n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+\n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.TypeReference;\n+\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestForwardReference.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestForwardReference.java\n package com.fasterxml.jackson.databind.deser;\n \n-import com.fasterxml.jackson.annotation.JsonIdentityInfo;\n-import com.fasterxml.jackson.annotation.JsonInclude;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import com.fasterxml.jackson.annotation.JsonSubTypes;\n-import com.fasterxml.jackson.annotation.JsonTypeInfo;\n-import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n-import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.annotation.*;\n+\n import com.fasterxml.jackson.databind.BaseMapTest;\n import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.SerializationFeature;\n \n import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.List;\n \n /**\n  * Test for testing forward reference handling\n \t}\n \n \t@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY)\n-\tprivate static class YetAnotherClass\n+\tstatic class YetAnotherClass\n \t{\n \t\tpublic YetAnotherClass() {}\n \t\tpublic ForwardReferenceClass frc;", "timestamp": 1427486970, "metainfo": ""}