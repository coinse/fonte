{"sha": "77c3f1f32eb79941f7cb1b7b530b4ec37d216dba", "log": "Merge branch 'master' of github.com:FasterXML/jackson-databind", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n             JsonSerializer<Object> keySerializer, JsonSerializer<Object> valueSerializer)\n     {\n         return construct(ignoredList, mapType, staticValueType, vts,\n-                keySerializer, valueSerializer);\n+                keySerializer, valueSerializer, null);\n     }\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n                     properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                 } else {\n                     NameTransformer unwrapper = intr.findUnwrappingNameTransformer(param);\n-                    if (unwrapper != null) {\n+                    if (unwrapper != null) { // [Issue#265]: allow unwrapped properties\n                         properties[i] = constructCreatorProperty(ctxt, beanDesc,\n                                 UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);\n                         ++namedCount;\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n     }\n \n     @Override\n+    @Deprecated\n     public String findSerializationName(AnnotatedField af)\n     {\n         JsonProperty pann = af.getAnnotation(JsonProperty.class);\n     }\n     \n     @Override\n+    @Deprecated\n     public String findSerializationName(AnnotatedMethod am)\n     {\n         // @JsonGetter is most specific, has precedence\n         return null;\n     }\n     \n+    @Deprecated\n     @Override\n     public String findDeserializationName(AnnotatedMethod am)\n     {\n         return null;\n     }\n \n+    @Deprecated\n     @Override\n     public String findDeserializationName(AnnotatedField af)\n     {\n         }\n         return null;\n     }\n+\n+    @Deprecated\n     @Override\n     public String findDeserializationName(AnnotatedParameter param)\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeNameIdResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeNameIdResolver.java\n         }\n         return idFromValue(value);\n     }\n-    \n+\n+    @Deprecated\n     @Override\n     public JavaType typeFromId(String id) {\n-        return _idToType.get(id);\n+        return _typeFromId(id);\n     }    \n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n      * is serialized as JSON Array; the difference is that no field names\n      * are written.\n      * \n-     * @since 2.1\n-     */\n-    @Override\n-    public void serializeAsColumn(Object bean, JsonGenerator jgen, SerializerProvider prov)\n+     * @since 2.3\n+     */\n+    @Override\n+    public void serializeAsElement(Object bean, JsonGenerator jgen, SerializerProvider prov)\n         throws Exception\n     {\n         Object value = get(bean);\n             jgen.writeNull();\n         }\n     }\n-\n+    \n     /*\n     /**********************************************************\n     /* PropertyWriter methods (schema generation)\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/FilterProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/FilterProvider.java\n      * method, then wrap filter if one found as {@link PropertyFilter}.\n      * It should be overridden by up-to-date implementations\n      * \n+     * @param filterId Id of the filter to fetch\n+     * @param valueToFilter Object being filtered (usually POJO, but may be a {@link java.util.Map},\n+     *   or in future a container), <b>if available</b>; not available when generating\n+     *   schemas.\n+     * \n+     * @return Filter to use, if any.\n+     * \n      * @since 2.3\n      */\n-    public PropertyFilter findPropertyFilter(Object filterId)\n+    public PropertyFilter findPropertyFilter(Object filterId, Object valueToFilter)\n     {\n         @SuppressWarnings(\"deprecation\")\n         BeanPropertyFilter old = findFilter(filterId);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/PropertyFilter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/PropertyFilter.java\n public interface PropertyFilter\n {\n     /**\n-     * Method called by {@link BeanSerializer} to let filter decide what to do with\n-     * given bean property value: the usual choices are to either filter out (i.e.\n-     * do nothing) or write using given {@link BeanPropertyWriter}, although filters\n+     * Method called by {@link BeanSerializer} to let the filter decide what to do with\n+     * given bean property value:\n+     * the usual choices are to either filter out (i.e.\n+     * do nothing) or write using given {@link PropertyWriter}, although filters\n      * can choose other to do something different altogether.\n      *<p>\n      * Typical implementation is something like:\n      * @param jgen Generator use for serializing value\n      * @param prov Provider that can be used for accessing dynamic aspects of serialization\n      *    processing\n-     * @param writer Default bean property serializer to use\n+     * @param writer Object called to do actual serialization of the field, if not filtered out\n      */\n     public void serializeAsField(Object pojo, JsonGenerator jgen, SerializerProvider prov,\n+            PropertyWriter writer)\n+        throws Exception;\n+\n+    /**\n+     * Method called by container to let the filter decide what to do with given element\n+     * value: \n+     * the usual choices are to either filter out (i.e.\n+     * do nothing) or write using given {@link PropertyWriter}, although filters\n+     * can choose other to do something different altogether.\n+     *<p>\n+     * Typical implementation is something like:\n+     *<pre>\n+     * if (include(writer)) {\n+     *      writer.serializeAsElement(pojo, jgen, prov);\n+     * }\n+     *</pre>\n+     * \n+     * @param elementValue Element value being serializerd\n+     * @param jgen Generator use for serializing value\n+     * @param prov Provider that can be used for accessing dynamic aspects of serialization\n+     *    processing\n+     * @param writer Object called to do actual serialization of the field, if not filtered out\n+     */\n+    public void serializeAsElement(Object elementValue, JsonGenerator jgen, SerializerProvider prov,\n             PropertyWriter writer)\n         throws Exception;\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/PropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/PropertyWriter.java\n      */\n \n     /**\n-     * Serialization method called when output is to be done in tabular format, omitting\n-     * property names. Note that this mode of operation is independent of underlying\n-     * data format; so it is typically NOT called for fully tabular formats such as CSV.\n+     * Serialization method called when output is to be done as an array,\n+     * that is, not using property names. This is needed when serializing\n+     * container ({@link java.util.Collection}, array) types,\n+     * or POJOs using <code>tabular</code> (\"as array\") output format.\n+     *<p>\n+     * Note that this mode of operation is independent of underlying\n+     * data format; so it is typically NOT called for fully tabular formats such as CSV,\n+     * where logical output is still as form of POJOs.\n      */\n-    public abstract void serializeAsColumn(Object pojo, JsonGenerator jgen, SerializerProvider prov)\n+    public abstract void serializeAsElement(Object pojo, JsonGenerator jgen, SerializerProvider prov)\n         throws Exception;\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/BeanAsArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/BeanAsArraySerializer.java\n                 if (prop == null) { // can have nulls in filtered list; but if so, MUST write placeholders\n                     jgen.writeNull();\n                 } else {\n-                    prop.serializeAsColumn(bean, jgen, provider);\n+                    prop.serializeAsElement(bean, jgen, provider);\n                 }\n             }\n             // NOTE: any getters can not be supported either\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/FilteredBeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/FilteredBeanPropertyWriter.java\n         }\n \n         @Override\n-        public void serializeAsColumn(Object bean, JsonGenerator jgen, SerializerProvider prov)\n+        public void serializeAsElement(Object bean, JsonGenerator jgen, SerializerProvider prov)\n             throws Exception\n         {\n             Class<?> activeView = prov.getActiveView();\n             if (activeView == null || _view.isAssignableFrom(activeView)) {\n-                _delegate.serializeAsColumn(bean, jgen, prov);\n+                _delegate.serializeAsElement(bean, jgen, prov);\n             } else {\n                 _delegate.serializeAsPlaceholder(bean, jgen, prov);\n             }\n         }\n \n         @Override\n-        public void serializeAsColumn(Object bean, JsonGenerator jgen, SerializerProvider prov)\n+        public void serializeAsElement(Object bean, JsonGenerator jgen, SerializerProvider prov)\n             throws Exception\n         {\n             final Class<?> activeView = prov.getActiveView();\n                     return;\n                 }\n             }\n-            _delegate.serializeAsColumn(bean, jgen, prov);\n+            _delegate.serializeAsElement(bean, jgen, prov);\n         }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleBeanPropertyFilter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleBeanPropertyFilter.java\n  * because it can provide default implementation for any methods that may\n  * be added in {@link PropertyFilter} (as unfortunate as additions may be).\n  */\n-@SuppressWarnings(\"deprecation\")\n public abstract class SimpleBeanPropertyFilter\n     implements BeanPropertyFilter, PropertyFilter\n         // sub-classes must also implement java.io.Serializable\n      * \n      * @since 2.3\n      */\n+    @SuppressWarnings(\"deprecation\")\n     public static PropertyFilter from(final BeanPropertyFilter src)\n     {\n         return new PropertyFilter() {\n                 src.serializeAsField(pojo, jgen, prov, (BeanPropertyWriter) writer);\n             }\n \n-            @Deprecated\n             @Override\n             public void depositSchemaProperty(PropertyWriter writer,\n                     ObjectNode propertiesNode, SerializerProvider provider)\n                 SerializerProvider provider) throws JsonMappingException {\n                 src.depositSchemaProperty((BeanPropertyWriter) writer, objectVisitor, provider);\n             }\n+\n+            @Override\n+            public void serializeAsElement(Object elementValue,\n+                    JsonGenerator jgen, SerializerProvider prov,\n+                    PropertyWriter writer) throws Exception {\n+                // not needed; element filtering only available through new interfaces\n+                throw new UnsupportedOperationException();\n+            }\n             \n         };\n     }\n      */\n     protected abstract boolean include(PropertyWriter writer);\n \n-    /*\n-    /**********************************************************\n-    /* BeanPropertyFilter implementation\n-    /**********************************************************\n-     */\n-    \n+    /**\n+     * Method that defines what to do with container elements;\n+     * default implementation simply writes them out.\n+     * \n+     * @since 2.3\n+     */\n+    protected boolean includeElement(Object elementValue) {\n+        return true;\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* BeanPropertyFilter (deprecated) implementation\n+    /**********************************************************\n+     */\n+    \n+    @Deprecated\n     @Override\n     public void serializeAsField(Object bean, JsonGenerator jgen,\n             SerializerProvider provider, BeanPropertyWriter writer) throws Exception\n         }\n     }\n \n+    @Deprecated\n     @Override\n     public void depositSchemaProperty(BeanPropertyWriter writer,\n             ObjectNode propertiesNode, SerializerProvider provider)\n         }\n     }\n \n+    @Deprecated\n     @Override\n     public void depositSchemaProperty(BeanPropertyWriter writer,\n             JsonObjectFormatVisitor objectVisitor, SerializerProvider provider)\n         }\n     }\n \n+    @Override\n+    public void serializeAsElement(Object elementValue, JsonGenerator jgen, SerializerProvider provider,\n+            PropertyWriter writer)\n+        throws Exception\n+    {\n+        if (includeElement(elementValue)) {\n+            writer.serializeAsElement(elementValue, jgen, provider);\n+        }\n+    }\n+    \n     @Deprecated\n     @Override\n     public void depositSchemaProperty(PropertyWriter writer,\n      */\n     public static class SerializeExceptFilter\n         extends SimpleBeanPropertyFilter\n-    {\n+        implements java.io.Serializable\n+    {\n+        private static final long serialVersionUID = 1L;\n+\n         /**\n          * Set of property names to filter out.\n          */\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleFilterProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleFilterProvider.java\n     }\n     \n     @Override\n-    public PropertyFilter findPropertyFilter(Object filterId)\n+    public PropertyFilter findPropertyFilter(Object filterId, Object valueToFilter)\n     {\n         PropertyFilter f = _filtersById.get(filterId);\n         if (f == null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n         } else {\n             props = _props;\n         }\n-        final PropertyFilter filter = findFilter(provider, _propertyFilterId);\n+        final PropertyFilter filter = findPropertyFilter(provider, _propertyFilterId, bean);\n         // better also allow missing filter actually..\n         if (filter == null) {\n             serializeFields(bean, jgen, provider);\n         ObjectNode propertiesNode = o.objectNode();\n         final PropertyFilter filter;\n         if (_propertyFilterId != null) {\n-            filter = findFilter(provider, _propertyFilterId);\n+            filter = findPropertyFilter(provider, _propertyFilterId, null);\n         } else {\n             filter = null;\n         }\n             return;\n         }\n         if (_propertyFilterId != null) {\n-            PropertyFilter filter = findFilter(visitor.getProvider(), _propertyFilterId);\n+            PropertyFilter filter = findPropertyFilter(visitor.getProvider(),\n+                    _propertyFilterId, null);\n             for (int i = 0; i < _props.length; i++) {\n                 filter.depositSchemaProperty(_props[i], objectVisitor, visitor.getProvider());\n             }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapProperty.java\n     }\n \n     @Override\n-    public void serializeAsColumn(Object pojo, JsonGenerator jgen,\n+    public void serializeAsElement(Object pojo, JsonGenerator jgen,\n             SerializerProvider provider) throws Exception\n     {\n         if (_typeSerializer == null) {\n             _valueSerializer.serializeWithType(_value, jgen, provider, _typeSerializer);\n         }\n     }\n-\n+    \n     @Override\n     public void serializeAsPlaceholder(Object pojo, JsonGenerator jgen,\n             SerializerProvider provider) throws Exception\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n         jgen.writeStartObject();\n         if (!value.isEmpty()) {\n             if (_filterId != null) {\n-                serializeFilteredFields(value, jgen, provider, findFilter(provider, _filterId));\n+                serializeFilteredFields(value, jgen, provider,\n+                        findPropertyFilter(provider, _filterId, value));\n                 return;\n             }\n             if (provider.isEnabled(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS)) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java\n      * \n      * @since 2.3\n      */\n-    protected PropertyFilter findFilter(SerializerProvider provider, Object filterId)\n+    protected PropertyFilter findPropertyFilter(SerializerProvider provider,\n+            Object filterId, Object valueToFilter)\n         throws JsonMappingException\n     {\n         FilterProvider filters = provider.getFilterProvider();\n         if (filters == null) {\n             throw new JsonMappingException(\"Can not resolve PropertyFilter with id '\"+filterId+\"'; no FilterProvider configured\");\n         }\n-        PropertyFilter filter = filters.findPropertyFilter(filterId);\n+        PropertyFilter filter = filters.findPropertyFilter(filterId, valueToFilter);\n         // But whether unknown ids are ok just depends on filter provider; if we get null that's fine\n         return filter;\n     }", "timestamp": 1382413258, "metainfo": ""}