{"sha": "fcbbccccff541e3492ebf5425ed5223581f77641", "log": "cleanup", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n import com.fasterxml.jackson.core.io.SerializedString;\n import com.fasterxml.jackson.core.type.ResolvedType;\n import com.fasterxml.jackson.core.type.TypeReference;\n-\n import com.fasterxml.jackson.databind.deser.DataFormatReaders;\n import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;\n import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;\n     /**\n      * Overloaded version of {@link #readValue(InputStream)}.\n      */\n+    @SuppressWarnings(\"resource\")\n     public <T> MappingIterator<T> readValues(Reader src)\n         throws IOException, JsonProcessingException\n     {\n      * \n      * @param json String that contains JSON content to parse\n      */\n+    @SuppressWarnings(\"resource\")\n     public <T> MappingIterator<T> readValues(String json)\n         throws IOException, JsonProcessingException\n     {\n     /**********************************************************\n      */\n     \n+    @SuppressWarnings(\"resource\")\n     protected Object _detectBindAndClose(byte[] src, int offset, int length) throws IOException\n     {\n         DataFormatReaders.Match match = _dataFormatReaders.findFormat(src, offset, length);\n         return match.getReader()._bindAndClose(jp, _valueToUpdate);\n     }\n \n+    @SuppressWarnings(\"resource\")\n     protected Object _detectBindAndClose(DataFormatReaders.Match match, boolean forceClosing)\n         throws IOException\n     {\n         return match.getReader()._bindAndClose(p, _valueToUpdate);\n     }\n \n+    @SuppressWarnings(\"resource\")\n     protected <T> MappingIterator<T> _detectBindAndReadValues(DataFormatReaders.Match match, boolean forceClosing)\n         throws IOException, JsonProcessingException\n     {\n         return match.getReader()._bindAndReadValues(p, _valueToUpdate);\n     }\n     \n+    @SuppressWarnings(\"resource\")\n     protected JsonNode _detectBindAndCloseAsTree(InputStream in) throws IOException\n     {\n         DataFormatReaders.Match match = _dataFormatReaders.findFormat(in);\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;\n import com.fasterxml.jackson.core.util.Instantiatable;\n import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;\n-\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;\n import com.fasterxml.jackson.databind.ser.FilterProvider;\n      *<p>\n      * Note: prior to version 2.1, throws clause included {@link IOException}; 2.1 removed it.\n      */\n+    @SuppressWarnings(\"resource\")\n     public String writeValueAsString(Object value)\n         throws JsonProcessingException\n     {        \n      *<p>\n      * Note: prior to version 2.1, throws clause included {@link IOException}; 2.1 removed it.\n      */\n+    @SuppressWarnings(\"resource\")\n     public byte[] writeValueAsBytes(Object value)\n         throws JsonProcessingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n                     return StringArrayDeserializer.instance;\n                 }\n             }\n-            if (deser == null) {\n-                deser = new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n-            }\n+            deser = new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n         }\n         // and then new with 2.2: ability to post-process it too (Issue#120)\n         if (_factoryConfig.hasDeserializerModifiers()) {\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n         }\n         AnnotatedMember prev = _injectables.put(id, m);\n         if (prev != null) {\n-            String type = (id == null) ? \"[null]\" : id.getClass().getName();\n+            String type = id.getClass().getName();\n             throw new IllegalArgumentException(\"Duplicate injectable value with id '\"\n                     +String.valueOf(id)+\"' (of type \"+type+\")\");\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java\n import com.fasterxml.jackson.annotation.JsonTypeInfo.As;\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.util.JsonParserSequence;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n  * the same, regardless of structure used for actual value: wrapping\n  * is done using a 2-element JSON Array where type id is the first\n  * element, and actual object data as second element.\n- * \n- * @author tatu\n  */\n public class AsArrayTypeDeserializer\n     extends TypeDeserializerBase\n      * subtype deserializer to use, and calls it to do actual\n      * deserialization.\n      */\n+    @SuppressWarnings(\"resource\")\n     private final Object _deserialize(JsonParser jp, DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n     {\n         // Minor complication: we may need to merge type id in?\n         if (_typeIdVisible && jp.getCurrentToken() == JsonToken.START_OBJECT) {\n             // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n-            @SuppressWarnings(\"resource\")\n             TokenBuffer tb = new TokenBuffer(null);\n             tb.writeStartObject(); // recreate START_OBJECT\n             tb.writeFieldName(_typePropertyName);\n--- a/src/test/java/com/fasterxml/jackson/databind/TestReadValues.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestReadValues.java\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.ObjectMapper;\n \n+@SuppressWarnings(\"resource\")\n public class TestReadValues extends BaseMapTest\n {\n     /*\n      */\n \n     private final ObjectMapper MAPPER = new ObjectMapper();\n-    \n+\n     public void testRootBeans() throws Exception\n     {\n         final String JSON = \"{\\\"a\\\":3}{\\\"a\\\":27}  \";", "timestamp": 1374817371, "metainfo": ""}