{"sha": "b471a0424503f6dd1a873ecb5ab1041706ca64e6", "log": "Implement [JACKSON-769], add more chainability for ObjectNode, ArrayNode", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n  * Node class that represents Arrays mapped from Json content.\n  */\n public final class ArrayNode\n-    extends ContainerNode\n+    extends ContainerNode<ArrayNode>\n {\n     protected ArrayList<JsonNode> _children;\n \n         return _set(index, value);\n     }\n \n-    public void add(JsonNode value)\n+    /**\n+     * Method for adding specified node at the end of this array.\n+     * \n+     * @return This node, to allow chaining\n+     */\n+    public ArrayNode add(JsonNode value)\n     {\n         if (value == null) { // let's not store 'raw' nulls but nodes\n             value = nullNode();\n         }\n         _add(value);\n+        return this;\n     }\n \n     /**\n      * \n      * @return This node (to allow chaining)\n      */\n-    public JsonNode addAll(ArrayNode other)\n+    public ArrayNode addAll(ArrayNode other)\n     {\n         int len = other.size();\n         if (len > 0) {\n      * \n      * @return This node (to allow chaining)\n      */\n-    public JsonNode addAll(Collection<JsonNode> nodes)\n+    public ArrayNode addAll(Collection<JsonNode> nodes)\n     {\n         int len = nodes.size();\n         if (len > 0) {\n      * the first element; if >= size(), appended at the end, and otherwise\n      * inserted before existing element in specified index.\n      * No exceptions are thrown for any index.\n-     */\n-    public void insert(int index, JsonNode value)\n+     * \n+     * @return This node (to allow chaining)\n+     */\n+    public ArrayNode insert(int index, JsonNode value)\n     {\n         if (value == null) {\n             value = nullNode();\n         }\n         _insert(index, value);\n+        return this;\n     }\n \n     /**\n     /**\n      * Method that will construct a POJONode and add it at the end\n      * of this array node.\n-     */\n-    public void addPOJO(Object value)\n+     * \n+     * @return This array node, to allow chaining\n+     */\n+    public ArrayNode addPOJO(Object value)\n     {\n         if (value == null) {\n             addNull();\n         } else {\n             _add(POJONode(value));\n         }\n-    }\n-\n-    public void addNull()\n+        return this;\n+    }\n+\n+    /**\n+     * Method that will add a null value at the end of this array node.\n+     * \n+     * @return This array node, to allow chaining\n+     */\n+    public ArrayNode addNull()\n     {\n         _add(nullNode());\n-    }\n-\n-    /**\n-     * Method for setting value of a field to specified numeric value.\n-     */\n-    public void add(int v) { _add(numberNode(v)); }\n-\n-    /**\n-     * Alternative method that we need to avoid bumping into NPE issues\n-     * with auto-unboxing.\n-     */\n-    public void add(Integer value) {\n-        if (value == null) {\n-            addNull();\n-        } else {\n-            _add(numberNode(value.intValue()));\n-        }\n-    }\n-    \n-    /**\n-     * Method for setting value of a field to specified numeric value.\n-     */\n-    public void add(long v) { _add(numberNode(v)); }\n-\n-    /**\n-     * Alternative method that we need to avoid bumping into NPE issues\n-     * with auto-unboxing.\n-     */\n-    public void add(Long value) {\n-        if (value == null) {\n-            addNull();\n-        } else {\n-            _add(numberNode(value.longValue()));\n-        }\n-    }\n-    \n-    /**\n-     * Method for setting value of a field to specified numeric value.\n-     */\n-    public void add(float v) { _add(numberNode(v)); }\n-\n-    /**\n-     * Alternative method that we need to avoid bumping into NPE issues\n-     * with auto-unboxing.\n-     */\n-    public void add(Float value) {\n-        if (value == null) {\n-            addNull();\n-        } else {\n-            _add(numberNode(value.floatValue()));\n-        }\n-    }\n-    \n-    /**\n-     * Method for setting value of a field to specified numeric value.\n-     */\n-    public void add(double v) { _add(numberNode(v)); }\n-\n-    /**\n-     * Alternative method that we need to avoid bumping into NPE issues\n-     * with auto-unboxing.\n-     */\n-    public void add(Double value) {\n-        if (value == null) {\n-            addNull();\n-        } else {\n-            _add(numberNode(value.doubleValue()));\n-        }\n-    }\n-    \n-    /**\n-     * Method for setting value of a field to specified numeric value.\n-     */\n-    public void add(BigDecimal v) {\n+        return this;\n+    }\n+\n+    /**\n+     * Method for adding specified number at the end of this array.\n+     * \n+     * @return This array node, to allow chaining\n+     */\n+    public ArrayNode add(int v) {\n+        _add(numberNode(v));\n+        return this;\n+    }\n+\n+    /**\n+     * Alternative method that we need to avoid bumping into NPE issues\n+     * with auto-unboxing.\n+     * \n+     * @return This array node, to allow chaining\n+     */\n+    public ArrayNode add(Integer value) {\n+        if (value == null) {\n+            return addNull();\n+        }\n+        return _add(numberNode(value.intValue()));\n+    }\n+    \n+    /**\n+     * Method for adding specified number at the end of this array.\n+     * \n+     * @return This array node, to allow chaining\n+     */\n+    public ArrayNode add(long v) { return _add(numberNode(v)); }\n+\n+    /**\n+     * Alternative method that we need to avoid bumping into NPE issues\n+     * with auto-unboxing.\n+     * \n+     * @return This array node, to allow chaining\n+     */\n+    public ArrayNode add(Long value) {\n+        if (value == null) {\n+            return addNull();\n+        }\n+        return _add(numberNode(value.longValue()));\n+    }\n+    \n+    /**\n+     * Method for adding specified number at the end of this array.\n+     * \n+     * @return This array node, to allow chaining\n+     */\n+    public ArrayNode add(float v) {\n+        return _add(numberNode(v));\n+    }\n+\n+    /**\n+     * Alternative method that we need to avoid bumping into NPE issues\n+     * with auto-unboxing.\n+     * \n+     * @return This array node, to allow chaining\n+     */\n+    public ArrayNode add(Float value) {\n+        if (value == null) {\n+            return addNull();\n+        }\n+        return _add(numberNode(value.floatValue()));\n+    }\n+    \n+    /**\n+     * Method for adding specified number at the end of this array.\n+     * \n+     * @return This array node, to allow chaining\n+     */\n+    public ArrayNode add(double v) {\n+        return _add(numberNode(v));\n+    }\n+\n+    /**\n+     * Alternative method that we need to avoid bumping into NPE issues\n+     * with auto-unboxing.\n+     * \n+     * @return This array node, to allow chaining\n+     */\n+    public ArrayNode add(Double value) {\n+        if (value == null) {\n+            return addNull();\n+        }\n+        return _add(numberNode(value.doubleValue()));\n+    }\n+    \n+    /**\n+     * Method for adding specified number at the end of this array.\n+     * \n+     * @return This array node, to allow chaining\n+     */\n+    public ArrayNode add(BigDecimal v) {\n         if (v == null) {\n-            addNull();\n-        } else {\n-            _add(numberNode(v));\n-        }\n-    }\n-\n-    /**\n-     * Method for setting value of a field to specified String value.\n-     */\n-    public void add(String v) {\n+            return addNull();\n+        }\n+        return _add(numberNode(v));\n+    }\n+\n+    /**\n+     * Method for adding specified String value at the end of this array.\n+     * \n+     * @return This array node, to allow chaining\n+     */\n+    public ArrayNode add(String v) {\n         if (v == null) {\n-            addNull();\n-        } else {\n-            _add(textNode(v));\n-        }\n-    }\n-\n-    /**\n-     * Method for setting value of a field to specified String value.\n-     */\n-    public void add(boolean v) { _add(booleanNode(v)); }\n-\n-    /**\n-     * Alternative method that we need to avoid bumping into NPE issues\n-     * with auto-unboxing.\n-     */\n-    public void add(Boolean value) {\n-        if (value == null) {\n-            addNull();\n-        } else {\n-            _add(booleanNode(value.booleanValue()));\n-        }\n-    }\n-    \n-    /**\n-     * Method for setting value of a field to specified binary value\n-     */\n-    public void add(byte[] v) {\n+            return addNull();\n+        }\n+        return _add(textNode(v));\n+    }\n+\n+    /**\n+     * Method for adding specified boolean value at the end of this array.\n+     * \n+     * @return This array node, to allow chaining\n+     */\n+    public ArrayNode add(boolean v) {\n+        return _add(booleanNode(v));\n+    }\n+\n+    /**\n+     * Alternative method that we need to avoid bumping into NPE issues\n+     * with auto-unboxing.\n+     * \n+     * @return This array node, to allow chaining\n+     */\n+    public ArrayNode add(Boolean value) {\n+        if (value == null) {\n+            return addNull();\n+        }\n+        return _add(booleanNode(value.booleanValue()));\n+    }\n+    \n+    /**\n+     * Method for adding specified binary value at the end of this array\n+     * (note: when serializing as JSON, will be output Base64 encoded)\n+     * \n+     * @return This array node, to allow chaining\n+     */\n+    public ArrayNode add(byte[] v) {\n         if (v == null) {\n-            addNull();\n-        } else {\n-            _add(binaryNode(v));\n-        }\n-    }\n-\n+            return addNull();\n+        }\n+        return _add(binaryNode(v));\n+    }\n+\n+    /**\n+     * Method for creating an array node, inserting it at the\n+     * specified point in the array,\n+     * and returning the <b>newly created array</b>\n+     * (note: NOT 'this' array)\n+     */\n     public ArrayNode insertArray(int index)\n     {\n         ArrayNode n  = arrayNode();\n     }\n \n     /**\n-     * Method that will construct an ObjectNode and add it at the end\n-     * of this array node.\n-     *\n+     * Method for creating an {@link ObjectNode}, appending it at the end\n+     * of this array, and returning the <b>newly created node</b>\n+     * (note: NOT 'this' array)\n+     * \n      * @return Newly constructed ObjectNode\n      */\n     public ObjectNode insertObject(int index)\n     }\n \n     /**\n-     * Method that will construct a POJONode and add it at the end\n-     * of this array node.\n-     */\n-    public void insertPOJO(int index, Object value)\n-    {\n-        if (value == null) {\n-            insertNull(index);\n-        } else {\n-            _insert(index, POJONode(value));\n-        }\n-    }\n-\n-    public void insertNull(int index)\n+     * Method that will construct a POJONode and\n+     * insert it at specified position in this array.\n+     * \n+     * @return This array node, to allow chaining\n+     */\n+    public ArrayNode insertPOJO(int index, Object value)\n+    {\n+        if (value == null) {\n+            return insertNull(index);\n+        }\n+        return _insert(index, POJONode(value));\n+    }\n+\n+    /**\n+     * Method that will insert a null value\n+     * at specified position in this array.\n+     * \n+     * @return This array node, to allow chaining\n+     */\n+    public ArrayNode insertNull(int index)\n     {\n         _insert(index, nullNode());\n-    }\n-\n-    /**\n-     * Method for setting value of a field to specified numeric value.\n-     */\n-    public void insert(int index, int v) { _insert(index, numberNode(v)); }\n-\n-    /**\n-     * Alternative method that we need to avoid bumping into NPE issues\n-     * with auto-unboxing.\n-     */\n-    public void insert(int index, Integer value) {\n+        return this;\n+    }\n+\n+    /**\n+     * Method that will insert specified numeric value\n+     * at specified position in this array.\n+     * \n+     * @return This array node, to allow chaining\n+     */\n+    public ArrayNode insert(int index, int v) {\n+        _insert(index, numberNode(v));\n+        return this;\n+    }\n+\n+    /**\n+     * Alternative method that we need to avoid bumping into NPE issues\n+     * with auto-unboxing.\n+     * \n+     * @return This array node, to allow chaining\n+     */\n+    public ArrayNode insert(int index, Integer value) {\n         if (value == null) {\n             insertNull(index);\n         } else {\n             _insert(index, numberNode(value.intValue()));\n         }\n-    }\n-    \n-    /**\n-     * Method for setting value of a field to specified numeric value.\n-     */\n-    public void insert(int index, long v) { _insert(index, numberNode(v)); }\n-\n-    /**\n-     * Alternative method that we need to avoid bumping into NPE issues\n-     * with auto-unboxing.\n-     */\n-    public void insert(int index, Long value) {\n-        if (value == null) {\n-            insertNull(index);\n-        } else {\n-            _insert(index, numberNode(value.longValue()));\n-        }\n-    }\n-    \n-    /**\n-     * Method for setting value of a field to specified numeric value.\n-     */\n-    public void insert(int index, float v) { _insert(index, numberNode(v)); }\n-\n-    /**\n-     * Alternative method that we need to avoid bumping into NPE issues\n-     * with auto-unboxing.\n-     */\n-    public void insert(int index, Float value) {\n-        if (value == null) {\n-            insertNull(index);\n-        } else {\n-            _insert(index, numberNode(value.floatValue()));\n-        }\n-    }\n-    \n-    /**\n-     * Method for setting value of a field to specified numeric value.\n-     */\n-    public void insert(int index, double v) { _insert(index, numberNode(v)); }\n-\n-    /**\n-     * Alternative method that we need to avoid bumping into NPE issues\n-     * with auto-unboxing.\n-     */\n-    public void insert(int index, Double value) {\n-        if (value == null) {\n-            insertNull(index);\n-        } else {\n-            _insert(index, numberNode(value.doubleValue()));\n-        }\n-    }\n-\n-    /**\n-     * Method for setting value of a field to specified numeric value.\n-     */\n-    public void insert(int index, BigDecimal v) {\n+        return this;\n+    }\n+    \n+    /**\n+     * Method that will insert specified numeric value\n+     * at specified position in this array.\n+     * \n+     * @return This array node, to allow chaining\n+     */\n+    public ArrayNode insert(int index, long v) {\n+        return _insert(index, numberNode(v));\n+    }\n+\n+    /**\n+     * Alternative method that we need to avoid bumping into NPE issues\n+     * with auto-unboxing.\n+     * \n+     * @return This array node, to allow chaining\n+     */\n+    public ArrayNode insert(int index, Long value) {\n+        if (value == null) {\n+            return insertNull(index);\n+        }\n+        return _insert(index, numberNode(value.longValue()));\n+    }\n+    \n+    /**\n+     * Method that will insert specified numeric value\n+     * at specified position in this array.\n+     * \n+     * @return This array node, to allow chaining\n+     */\n+    public ArrayNode insert(int index, float v) {\n+        return _insert(index, numberNode(v));\n+    }\n+\n+    /**\n+     * Alternative method that we need to avoid bumping into NPE issues\n+     * with auto-unboxing.\n+     * \n+     * @return This array node, to allow chaining\n+     */\n+    public ArrayNode insert(int index, Float value) {\n+        if (value == null) {\n+            return insertNull(index);\n+        }\n+        return _insert(index, numberNode(value.floatValue()));\n+    }\n+    \n+    /**\n+     * Method that will insert specified numeric value\n+     * at specified position in this array.\n+     * \n+     * @return This array node, to allow chaining\n+     */\n+    public ArrayNode insert(int index, double v) {\n+        return _insert(index, numberNode(v));\n+    }\n+\n+    /**\n+     * Alternative method that we need to avoid bumping into NPE issues\n+     * with auto-unboxing.\n+     * \n+     * @return This array node, to allow chaining\n+     */\n+    public ArrayNode insert(int index, Double value) {\n+        if (value == null) {\n+            return insertNull(index);\n+        }\n+        return _insert(index, numberNode(value.doubleValue()));\n+    }\n+\n+    /**\n+     * Method that will insert specified numeric value\n+     * at specified position in this array.\n+     * \n+     * @return This array node, to allow chaining\n+     */\n+    public ArrayNode insert(int index, BigDecimal v) {\n         if (v == null) {\n-            insertNull(index);\n-        } else {\n-            _insert(index, numberNode(v));\n-        }\n-    }\n-\n-    /**\n-     * Method for setting value of a field to specified String value.\n-     */\n-    public void insert(int index, String v) {\n+            return insertNull(index);\n+        }\n+        return _insert(index, numberNode(v));\n+    }\n+\n+    /**\n+     * Method that will insert specified String\n+     * at specified position in this array.\n+     * \n+     * @return This array node, to allow chaining\n+     */\n+    public ArrayNode insert(int index, String v) {\n         if (v == null) {\n-            insertNull(index);\n-        } else {\n-            _insert(index, textNode(v));\n-        }\n-    }\n-\n-    /**\n-     * Method for setting value of a field to specified String value.\n-     */\n-    public void insert(int index, boolean v) { _insert(index, booleanNode(v)); }\n-\n-    /**\n-     * Alternative method that we need to avoid bumping into NPE issues\n-     * with auto-unboxing.\n-     */\n-    public void insert(int index, Boolean value) {\n-        if (value == null) {\n-            insertNull(index);\n-        } else {\n-            _insert(index, booleanNode(value.booleanValue()));\n-        }\n-    }\n-    \n-    /**\n-     * Method for setting value of a field to specified binary value\n-     */\n-    public void insert(int index, byte[] v) {\n+            return insertNull(index);\n+        }\n+        return _insert(index, textNode(v));\n+    }\n+\n+    /**\n+     * Method that will insert specified String\n+     * at specified position in this array.\n+     * \n+     * @return This array node, to allow chaining\n+     */\n+    public ArrayNode insert(int index, boolean v) {\n+        return _insert(index, booleanNode(v));\n+    }\n+\n+    /**\n+     * Alternative method that we need to avoid bumping into NPE issues\n+     * with auto-unboxing.\n+     * \n+     * @return This array node, to allow chaining\n+     */\n+    public ArrayNode insert(int index, Boolean value) {\n+        if (value == null) {\n+            return insertNull(index);\n+        }\n+        return _insert(index, booleanNode(value.booleanValue()));\n+    }\n+    \n+    /**\n+     * Method that will insert specified binary value\n+     * at specified position in this array\n+     * (note: when written as JSON, will be Base64 encoded)\n+     * \n+     * @return This array node, to allow chaining\n+     */\n+    public ArrayNode insert(int index, byte[] v) {\n         if (v == null) {\n-            insertNull(index);\n-        } else {\n-            _insert(index, binaryNode(v));\n-        }\n+            return insertNull(index);\n+        }\n+        return _insert(index, binaryNode(v));\n     }\n \n     /*\n         return _children.set(index, value);\n     }\n \n-    private void _add(JsonNode node)\n+    private ArrayNode _add(JsonNode node)\n     {\n         if (_children == null) {\n             _children = new ArrayList<JsonNode>();\n         }\n         _children.add(node);\n-    }\n-\n-    private void _insert(int index, JsonNode node)\n+        return this;\n+    }\n+\n+    private ArrayNode _insert(int index, JsonNode node)\n     {\n         if (_children == null) {\n             _children = new ArrayList<JsonNode>();\n             _children.add(node);\n-            return;\n+            return this;\n         }\n         if (index < 0) {\n             _children.add(0, node);\n         } else {\n             _children.add(index, node);\n         }\n+        return this;\n     }\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ContainerNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ContainerNode.java\n  * This intermediate base class is used for all container nodes,\n  * specifically, array and object nodes.\n  */\n-public abstract class ContainerNode\n+public abstract class ContainerNode<T extends ContainerNode<T>>\n     extends BaseJsonNode\n {\n     /**\n      * that can construct instances of nodes to add to this container\n      * node.\n      */\n-    JsonNodeFactory _nodeFactory;\n+    protected final JsonNodeFactory _nodeFactory;\n \n     protected ContainerNode(JsonNodeFactory nc)\n     {\n      *\n      * @return Container node itself (to allow method call chaining)\n      */\n-    public abstract ContainerNode removeAll();\n+    public abstract T removeAll();\n \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/node/NodeCursor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/NodeCursor.java\n         @Override\n         public boolean currentHasChildren() {\n             // note: ONLY to be called for container nodes\n-            return ((ContainerNode) currentNode()).size() > 0;\n+            return ((ContainerNode<?>) currentNode()).size() > 0;\n         }\n     }\n \n         @Override\n         public boolean currentHasChildren() {\n             // note: ONLY to be called for container nodes\n-            return ((ContainerNode) currentNode()).size() > 0;\n+            return ((ContainerNode<?>) currentNode()).size() > 0;\n         }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n  * Node that maps to JSON Object structures in JSON content.\n  */\n public class ObjectNode\n-    extends ContainerNode\n+    extends ContainerNode<ObjectNode>\n {\n     protected LinkedHashMap<String, JsonNode> _children = null;\n \n         return n;\n     }\n \n-    public void putPOJO(String fieldName, Object pojo)\n-    {\n+    public ObjectNode putPOJO(String fieldName, Object pojo) {\n         _put(fieldName, POJONode(pojo));\n-    }\n-\n-    public void putNull(String fieldName)\n+        return this;\n+    }\n+\n+    public ObjectNode putNull(String fieldName)\n     {\n         _put(fieldName, nullNode());\n+        return this;\n     }\n \n     /**\n      * Method for setting value of a field to specified numeric value.\n      */\n-    public void put(String fieldName, int v) { _put(fieldName, numberNode(v)); }\n+    public ObjectNode put(String fieldName, int v) {\n+        _put(fieldName, numberNode(v));\n+        return this;\n+    }\n \n     /**\n      * Alternative method that we need to avoid bumping into NPE issues\n      * with auto-unboxing.\n      */\n-    public void put(String fieldName, Integer value) {\n+    public ObjectNode put(String fieldName, Integer value) {\n         if (value == null) {\n             _put(fieldName, nullNode());\n         } else {\n             _put(fieldName, numberNode(value.intValue()));\n         }\n+        return this;\n     }\n     \n     /**\n      * Method for setting value of a field to specified numeric value.\n      */\n-    public void put(String fieldName, long v) { _put(fieldName, numberNode(v)); }\n+    public ObjectNode put(String fieldName, long v) {\n+        _put(fieldName, numberNode(v));\n+        return this;\n+    }\n \n     /**\n      * Alternative method that we need to avoid bumping into NPE issues\n      * with auto-unboxing.\n      */\n-    public void put(String fieldName, Long value) {\n+    public ObjectNode put(String fieldName, Long value) {\n         if (value == null) {\n             _put(fieldName, nullNode());\n         } else {\n             _put(fieldName, numberNode(value.longValue()));\n         }\n+        return this;\n     }\n     \n     /**\n      * Method for setting value of a field to specified numeric value.\n      */\n-    public void put(String fieldName, float v) { _put(fieldName, numberNode(v)); }\n+    public ObjectNode put(String fieldName, float v) {\n+        _put(fieldName, numberNode(v));\n+        return this;\n+    }\n \n     /**\n      * Alternative method that we need to avoid bumping into NPE issues\n      * with auto-unboxing.\n      */\n-    public void put(String fieldName, Float value) {\n+    public ObjectNode put(String fieldName, Float value) {\n         if (value == null) {\n             _put(fieldName, nullNode());\n         } else {\n             _put(fieldName, numberNode(value.floatValue()));\n         }\n+        return this;\n     }\n     \n     /**\n      * Method for setting value of a field to specified numeric value.\n      */\n-    public void put(String fieldName, double v) { _put(fieldName, numberNode(v)); }\n+    public ObjectNode put(String fieldName, double v) {\n+        _put(fieldName, numberNode(v));\n+        return this;\n+    }\n \n     /**\n      * Alternative method that we need to avoid bumping into NPE issues\n      * with auto-unboxing.\n      */\n-    public void put(String fieldName, Double value) {\n+    public ObjectNode put(String fieldName, Double value) {\n         if (value == null) {\n             _put(fieldName, nullNode());\n         } else {\n             _put(fieldName, numberNode(value.doubleValue()));\n         }\n+        return this;\n     }\n     \n     /**\n      * Method for setting value of a field to specified numeric value.\n      */\n-    public void put(String fieldName, BigDecimal v) {\n+    public ObjectNode put(String fieldName, BigDecimal v) {\n         if (v == null) {\n             putNull(fieldName);\n         } else {\n             _put(fieldName, numberNode(v));\n         }\n+        return this;\n     }\n \n     /**\n      * Method for setting value of a field to specified String value.\n      */\n-    public void put(String fieldName, String v) {\n+    public ObjectNode put(String fieldName, String v) {\n         if (v == null) {\n             putNull(fieldName);\n         } else {\n             _put(fieldName, textNode(v));\n         }\n+        return this;\n     }\n \n     /**\n      * Method for setting value of a field to specified String value.\n      */\n-    public void put(String fieldName, boolean v) { _put(fieldName, booleanNode(v)); }\n+    public ObjectNode put(String fieldName, boolean v) {\n+        _put(fieldName, booleanNode(v));\n+        return this;\n+    }\n \n     /**\n      * Alternative method that we need to avoid bumping into NPE issues\n      * with auto-unboxing.\n      */\n-    public void put(String fieldName, Boolean value) {\n+    public ObjectNode put(String fieldName, Boolean value) {\n         if (value == null) {\n             _put(fieldName, nullNode());\n         } else {\n             _put(fieldName, booleanNode(value.booleanValue()));\n         }\n+        return this;\n     }\n     \n     /**\n      * Method for setting value of a field to specified binary value\n      */\n-    public void put(String fieldName, byte[] v) {\n+    public ObjectNode put(String fieldName, byte[] v) {\n         if (v == null) {\n             _put(fieldName, nullNode());\n         } else {\n             _put(fieldName, binaryNode(v));\n         }\n+        return this;\n     }\n \n     /*", "timestamp": 1327693899, "metainfo": ""}