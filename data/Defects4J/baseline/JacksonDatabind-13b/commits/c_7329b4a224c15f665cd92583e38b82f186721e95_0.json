{"sha": "7329b4a224c15f665cd92583e38b82f186721e95", "log": "Serialization test for #631", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestCustomSerializers.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestCustomSerializers.java\n import com.fasterxml.jackson.databind.module.SimpleModule;\n import com.fasterxml.jackson.databind.ser.std.CollectionSerializer;\n import com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer;\n+import com.fasterxml.jackson.databind.ser.std.StdScalarSerializer;\n import com.fasterxml.jackson.databind.util.StdConverter;\n \n /**\n         }\n     }\n \n+    // for [databind#631]\n+    static class Issue631Bean\n+    {\n+        @JsonSerialize(using=ParentClassSerializer.class)\n+        public Object prop;\n+\n+        public Issue631Bean(Object o) {\n+            prop = o;\n+        }\n+    }\n+    \n+    static class ParentClassSerializer\n+        extends StdScalarSerializer<Object>\n+    {\n+        protected ParentClassSerializer() {\n+            super(Object.class);\n+        }\n+\n+        @Override\n+        public void serialize(Object value, JsonGenerator gen,\n+                SerializerProvider provider) throws IOException {\n+            Object parent = gen.getCurrentValue();\n+            String desc = (parent == null) ? \"NULL\" : parent.getClass().getSimpleName();\n+            gen.writeString(desc+\"/\"+value);\n+        }\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Unit tests\n     // [Issue#215]: Allow registering CharacterEscapes via ObjectWriter\n     public void testCustomEscapes() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n         assertEquals(quote(\"foo\\\\u0062\\\\Ar\"),\n-                mapper.writer(new CustomEscapes()).writeValueAsString(\"foobar\"));\n+                MAPPER.writer(new CustomEscapes()).writeValueAsString(\"foobar\"));\n     }\n     \n     public void testNumberSubclass() throws Exception\n         assertEquals(aposToQuotes(\"{'x':42}\"),\n                 MAPPER.writeValueAsString(new LikeNumber(42)));\n     }\n+\n+    public void testWithCurrentValue() throws Exception\n+    {\n+        assertEquals(aposToQuotes(\"{'prop':'Issue631Bean/42'}\"),\n+                MAPPER.writeValueAsString(new Issue631Bean(42)));\n+    }\n }", "timestamp": 1417212786, "metainfo": ""}