{"sha": "2a4f66b427ac723b319ffca4582606b6d2387b5e", "log": "cleans up pull request", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n import com.fasterxml.jackson.databind.deser.*;\n-import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;\n-import com.fasterxml.jackson.databind.introspect.ClassIntrospector;\n-import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;\n-import com.fasterxml.jackson.databind.introspect.VisibilityChecker;\n+import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLSerializers.java\n package com.fasterxml.jackson.databind.ext;\n \n import java.io.IOException;\n+import java.lang.reflect.Type;\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.Map;\n                 throws IOException, JsonGenerationException {\n             CalendarSerializer.instance.serialize(value.toGregorianCalendar(), jgen, provider);\n         }\n+        \n+        @Override\n+        public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException {\n+            return CalendarSerializer.instance.getSchema(provider, typeHint);\n+        }\n \n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) {\n             CalendarSerializer.instance.acceptJsonFormatVisitor(visitor, null);\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/DOMSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/DOMSerializer.java\n package com.fasterxml.jackson.databind.ext;\n \n import java.io.IOException;\n-\n import org.w3c.dom.Node;\n import  org.w3c.dom.bootstrap.DOMImplementationRegistry;\n import  org.w3c.dom.ls.DOMImplementationLS;\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n         jgen.writeString(writer.writeToString(value));\n     }\n \n+\t@Override\n+    public JsonNode getSchema(SerializerProvider provider, java.lang.reflect.Type typeHint)\n+    {\n+        // Well... it is serialized as String\n+        return createSchemaNode(\"string\", true);\n+    }\n+\n     @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n         \tvisitor.expectAnyFormat(constructType(type));\n         }\n     }\n+    \n     /**\n      * Method that can be called to see if this serializer provider\n      * can find a serializer for an instance of given class.\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedStringListSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedStringListSerializer.java\n         _serializer = (JsonSerializer<String>) ser;\n         \n     }\n-    \n+\n     @Override protected JsonNode contentSchema() {\n         return createSchemaNode(\"string\", true);\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n import com.fasterxml.jackson.annotation.JsonFormat;\n import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n-import com.fasterxml.jackson.core.JsonGenerationException;\n-import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.io.SerializedString;\n-import com.fasterxml.jackson.databind.AnnotationIntrospector;\n-import com.fasterxml.jackson.databind.BeanProperty;\n-import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.JsonSerializer;\n-import com.fasterxml.jackson.databind.SerializerProvider;\n+\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n-import com.fasterxml.jackson.databind.ser.AnyGetterWriter;\n-import com.fasterxml.jackson.databind.ser.BeanPropertyFilter;\n-import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n-import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;\n-import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n-import com.fasterxml.jackson.databind.ser.ContextualSerializer;\n-import com.fasterxml.jackson.databind.ser.FilterProvider;\n-import com.fasterxml.jackson.databind.ser.ResolvableSerializer;\n+import com.fasterxml.jackson.databind.ser.*;\n import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;\n import com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator;\n import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;\n         o.put(\"properties\", propertiesNode);\n         return o;\n     }\n+\n+    /**\n+     * Determines if a bean property is required, as determined by\n+     * {@link com.fasterxml.jackson.databind.AnnotationIntrospector#hasRequiredMarker}.\n+     *<p>\n+     * \n+     * \n+     * @param prop the bean property.\n+     * @return true if the property is optional, false otherwise.\n+     */\n+    public static boolean isPropertyRequired(final BeanPropertyWriter prop, final SerializerProvider provider) {\n+        Boolean value = provider.getAnnotationIntrospector().hasRequiredMarker(prop.getMember());\n+        return (value == null) ? false : value.booleanValue();\n+    }\n     \n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n     {\n \t\t\tobjectVisitor.optionalProperty(writer);\n \t\t}\n \t}\n-\n-\t/**\n-     * Determines if a bean property is required, as determined by\n-     * {@link com.fasterxml.jackson.databind.AnnotationIntrospector#hasRequiredMarker}.\n-     *<p>\n-     * \n-     * \n-     * @param prop the bean property.\n-     * @return true if the property is optional, false otherwise.\n-     */\n-    public static boolean isPropertyRequired(final BeanPropertyWriter prop, final SerializerProvider provider) {\n-        Boolean value = provider.getAnnotationIntrospector().hasRequiredMarker(prop.getMember());\n-        return (value == null) ? false : value.booleanValue();\n-    }\n-    \n+   \n \n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n import com.fasterxml.jackson.annotation.JsonFormat;\n import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.databind.BeanProperty;\n-import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.JsonSerializer;\n-import com.fasterxml.jackson.databind.SerializationFeature;\n-import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n import java.io.IOException;\n import java.lang.reflect.ParameterizedType;\n import java.lang.reflect.Type;\n-import java.util.EnumMap;\n-import java.util.Map;\n-\n-import com.fasterxml.jackson.core.JsonGenerationException;\n-import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.databind.BeanProperty;\n-import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.JsonSerializer;\n-import com.fasterxml.jackson.databind.SerializerProvider;\n+import java.util.*;\n+\n+import com.fasterxml.jackson.core.*;\n+\n+\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java\n \n import com.fasterxml.jackson.annotation.JsonFormat;\n import com.fasterxml.jackson.annotation.JsonFormat.Shape;\n-import com.fasterxml.jackson.core.JsonGenerationException;\n-import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.io.SerializedString;\n-import com.fasterxml.jackson.databind.AnnotationIntrospector;\n-import com.fasterxml.jackson.databind.BeanDescription;\n-import com.fasterxml.jackson.databind.BeanProperty;\n-import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.JsonSerializer;\n-import com.fasterxml.jackson.databind.SerializationConfig;\n-import com.fasterxml.jackson.databind.SerializationFeature;\n-import com.fasterxml.jackson.databind.SerializerProvider;\n+\n+\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n import java.lang.reflect.Modifier;\n import java.lang.reflect.Type;\n \n-import com.fasterxml.jackson.core.JsonGenerationException;\n-import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.BeanProperty;\n-import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.JsonSerializer;\n-import com.fasterxml.jackson.databind.MapperFeature;\n-import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.core.*;\n+\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n \n import java.io.IOException;\n import java.lang.reflect.Type;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.SortedMap;\n-import java.util.TreeMap;\n-\n-import com.fasterxml.jackson.core.JsonGenerationException;\n-import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.databind.AnnotationIntrospector;\n-import com.fasterxml.jackson.databind.BeanProperty;\n-import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.JsonSerializer;\n-import com.fasterxml.jackson.databind.SerializationFeature;\n-import com.fasterxml.jackson.databind.SerializerProvider;\n+import java.util.*;\n+\n+import com.fasterxml.jackson.core.*;\n+\n+\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/SerializableSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/SerializableSerializer.java\n import java.lang.reflect.Type;\n import java.util.concurrent.atomic.AtomicReference;\n \n-import com.fasterxml.jackson.core.JsonGenerationException;\n-import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.*;\n+\n+\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonNode;\n  */\n @JacksonStdImpl\n public class SerializableSerializer\n-extends StdSerializer<JsonSerializable>\n+    extends StdSerializer<JsonSerializable>\n {\n-\tpublic final static SerializableSerializer instance = new SerializableSerializer();\n+    public final static SerializableSerializer instance = new SerializableSerializer();\n \n-\t// Ugh. Should NOT need this...\n-\tprivate final static AtomicReference<ObjectMapper> _mapperReference = new AtomicReference<ObjectMapper>();\n+    // Ugh. Should NOT need this...\n+    private final static AtomicReference<ObjectMapper> _mapperReference = new AtomicReference<ObjectMapper>();\n+    \n+    protected SerializableSerializer() { super(JsonSerializable.class); }\n \n-\tprotected SerializableSerializer() { super(JsonSerializable.class); }\n+    @Override\n+    public void serialize(JsonSerializable value, JsonGenerator jgen, SerializerProvider provider)\n+        throws IOException, JsonGenerationException\n+    {\n+        value.serialize(jgen, provider);\n+    }\n \n-\t@Override\n-\tpublic void serialize(JsonSerializable value, JsonGenerator jgen, SerializerProvider provider)\n-\t\t\tthrows IOException, JsonGenerationException\n-\t\t\t{\n-\t\tvalue.serialize(jgen, provider);\n-\t\t\t}\n-\n-\t@Override\n-\tpublic final void serializeWithType(JsonSerializable value, JsonGenerator jgen, SerializerProvider provider,\n-\t\t\tTypeSerializer typeSer)\n-\t\t\t\t\tthrows IOException, JsonGenerationException\n-\t\t\t\t\t{\n-\t\tvalue.serializeWithType(jgen, provider, typeSer);\n-\t\t\t\t\t}\n-\n-\t@Override\n-\tpublic JsonNode getSchema(SerializerProvider provider, Type typeHint)\n-\t\t\tthrows JsonMappingException\n-\t\t\t{\n-\t\tObjectNode objectNode = createObjectNode();\n-\t\tString schemaType = \"any\";\n-\t\tString objectProperties = null;\n-\t\tString itemDefinition = null;\n-\t\tif (typeHint != null) {\n-\t\t\tClass<?> rawClass = TypeFactory.rawClass(typeHint);\n-\t\t\tif (rawClass.isAnnotationPresent(JsonSerializableSchema.class)) {\n-\t\t\t\tJsonSerializableSchema schemaInfo = rawClass.getAnnotation(JsonSerializableSchema.class);\n-\t\t\t\tschemaType = schemaInfo.schemaType();\n-\t\t\t\tif (!JsonSerializableSchema.NO_VALUE.equals(schemaInfo.schemaObjectPropertiesDefinition())) {\n-\t\t\t\t\tobjectProperties = schemaInfo.schemaObjectPropertiesDefinition();\n-\t\t\t\t}\n-\t\t\t\tif (!JsonSerializableSchema.NO_VALUE.equals(schemaInfo.schemaItemDefinition())) {\n-\t\t\t\t\titemDefinition = schemaInfo.schemaItemDefinition();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\t/* 19-Mar-2012, tatu: geez, this is butt-ugly abonimation of code...\n-\t\t *    really, really should not require back ref to an ObjectMapper.\n-\t\t */\n-\t\tobjectNode.put(\"type\", schemaType);\n-\t\tif (objectProperties != null) {\n-\t\t\ttry {\n-\t\t\t\tobjectNode.put(\"properties\", _getObjectMapper().readTree(objectProperties));\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tthrow new JsonMappingException(\"Failed to parse @JsonSerializableSchema.schemaObjectPropertiesDefinition value\");\n-\t\t\t}\n-\t\t}\n-\t\tif (itemDefinition != null) {\n-\t\t\ttry {\n-\t\t\t\tobjectNode.put(\"items\", _getObjectMapper().readTree(itemDefinition));\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tthrow new JsonMappingException(\"Failed to parse @JsonSerializableSchema.schemaItemDefinition value\");\n-\t\t\t}\n-\t\t}\n-\t\t// always optional, no need to specify:\n-\t\t//objectNode.put(\"required\", false);\n-\t\treturn objectNode;\n-\t\t\t}\n-\n-\tprivate final static synchronized ObjectMapper _getObjectMapper()\n-\t{\n-\t\tObjectMapper mapper = _mapperReference.get();\n-\t\tif (mapper == null) {\n-\t\t\tmapper = new ObjectMapper();\n-\t\t\t_mapperReference.set(mapper);\n-\t\t}\n-\t\treturn mapper;\n-\t}\n+    @Override\n+    public final void serializeWithType(JsonSerializable value, JsonGenerator jgen, SerializerProvider provider,\n+            TypeSerializer typeSer)\n+        throws IOException, JsonGenerationException\n+    {\n+        value.serializeWithType(jgen, provider, typeSer);\n+    }\n+    \n+    @Override\n+    public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n+        throws JsonMappingException\n+    {\n+        ObjectNode objectNode = createObjectNode();\n+        String schemaType = \"any\";\n+        String objectProperties = null;\n+        String itemDefinition = null;\n+        if (typeHint != null) {\n+            Class<?> rawClass = TypeFactory.rawClass(typeHint);\n+            if (rawClass.isAnnotationPresent(JsonSerializableSchema.class)) {\n+                JsonSerializableSchema schemaInfo = rawClass.getAnnotation(JsonSerializableSchema.class);\n+                schemaType = schemaInfo.schemaType();\n+                if (!JsonSerializableSchema.NO_VALUE.equals(schemaInfo.schemaObjectPropertiesDefinition())) {\n+                    objectProperties = schemaInfo.schemaObjectPropertiesDefinition();\n+                }\n+                if (!JsonSerializableSchema.NO_VALUE.equals(schemaInfo.schemaItemDefinition())) {\n+                    itemDefinition = schemaInfo.schemaItemDefinition();\n+                }\n+            }\n+        }\n+        /* 19-Mar-2012, tatu: geez, this is butt-ugly abonimation of code...\n+         *    really, really should not require back ref to an ObjectMapper.\n+         */\n+        objectNode.put(\"type\", schemaType);\n+        if (objectProperties != null) {\n+            try {\n+                objectNode.put(\"properties\", _getObjectMapper().readTree(objectProperties));\n+            } catch (IOException e) {\n+                throw new JsonMappingException(\"Failed to parse @JsonSerializableSchema.schemaObjectPropertiesDefinition value\");\n+            }\n+        }\n+        if (itemDefinition != null) {\n+            try {\n+                objectNode.put(\"items\", _getObjectMapper().readTree(itemDefinition));\n+            } catch (IOException e) {\n+                throw new JsonMappingException(\"Failed to parse @JsonSerializableSchema.schemaItemDefinition value\");\n+            }\n+        }\n+        // always optional, no need to specify:\n+        //objectNode.put(\"required\", false);\n+        return objectNode;\n+    }\n+    \n+    private final static synchronized ObjectMapper _getObjectMapper()\n+    {\n+        ObjectMapper mapper = _mapperReference.get();\n+        if (mapper == null) {\n+            mapper = new ObjectMapper();\n+            _mapperReference.set(mapper);\n+        }\n+        return mapper;\n+    }\n \n \t@Override\n \tpublic void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java\n package com.fasterxml.jackson.databind.ser.std;\n \n import java.lang.reflect.Type;\n-import java.util.Collection;\n+import java.util.*;\n \n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonNode;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n import java.lang.reflect.Type;\n import java.util.HashMap;\n \n-import com.fasterxml.jackson.core.JsonGenerationException;\n-import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.databind.BeanProperty;\n-import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.JsonSerializer;\n-import com.fasterxml.jackson.databind.SerializationFeature;\n-import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.core.*;\n+\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n package com.fasterxml.jackson.databind.ser.std;\n \n-import java.io.File;\n-import java.io.IOException;\n+import java.io.*;\n import java.lang.reflect.Type;\n-import java.util.Collection;\n-import java.util.Currency;\n-import java.util.HashMap;\n-import java.util.Locale;\n-import java.util.Map;\n-import java.util.UUID;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.concurrent.atomic.AtomicLong;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-import com.fasterxml.jackson.core.JsonGenerationException;\n-import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.SerializerProvider;\n+import java.util.*;\n+import java.util.concurrent.atomic.*;\n+\n+import com.fasterxml.jackson.core.*;\n+\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.ser.BasicSerializerFactory;\n import com.fasterxml.jackson.databind.util.Provider;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java\n import java.lang.reflect.Type;\n import java.util.Date;\n \n-import com.fasterxml.jackson.core.JsonGenerationException;\n-import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.*;\n+\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonNode;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java\n import java.io.IOException;\n import java.lang.reflect.Type;\n \n-import com.fasterxml.jackson.core.JsonGenerationException;\n-import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.*;\n+\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonNode;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Type;\n \n-import com.fasterxml.jackson.core.JsonGenerationException;\n-import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.JsonSerializer;\n-import com.fasterxml.jackson.databind.SerializationFeature;\n-import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n  * Base class used by all standard serializers, and can also\n  * be used for custom serializers (in fact, this is the recommended\n  * base class to use).\n- * Provides convenience methods for implementing {@link JsonFormatVisitable}\n+ * Provides convenience methods for implementing {@link SchemaAware}\n  */\n public abstract class StdSerializer<T>\n     extends JsonSerializer<T>\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StringSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StringSerializer.java\n import java.io.IOException;\n import java.lang.reflect.Type;\n \n-import com.fasterxml.jackson.core.JsonGenerationException;\n-import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.*;\n+\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java\n import java.io.IOException;\n import java.lang.reflect.Type;\n \n-import com.fasterxml.jackson.core.JsonGenerationException;\n-import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.*;\n+\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonNode;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/TokenBufferSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/TokenBufferSerializer.java\n import java.io.IOException;\n import java.lang.reflect.Type;\n \n-import com.fasterxml.jackson.core.JsonGenerationException;\n-import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.*;\n+\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;", "timestamp": 1345076886, "metainfo": ""}