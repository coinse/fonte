{"sha": "6631d1b3a793f6102c3bbb55d6b47a3f7657aced", "log": "test improvements", "commit": "\n--- a/src/test/java/perf/ManualReadPerfUntyped.java\n+++ b/src/test/java/perf/ManualReadPerfUntyped.java\n         JsonNode input2 = m.readTree(data);\n \n         new ManualReadPerfUntyped()\n-//            .testFromBytes(\n-            .testFromString(\n+            .testFromBytes(\n+//            .testFromString(\n                 m, \"JSON-as-Object\", input1, UNTYPED\n                 ,m, \"JSON-as-Object2\", input2, UNTYPED\n //               ,m, \"JSON-as-Node\", input2, JsonNode.class\n--- a/src/test/java/perf/ObjectReaderTestBase.java\n+++ b/src/test/java/perf/ObjectReaderTestBase.java\n     protected String _desc1, _desc2;\n     \n     protected int hash;\n+    protected long startMeasure = System.currentTimeMillis() + 5000L;\n     protected int roundsDone = 0;\n     protected int REPS;\n     private double[] timeMsecs;\n     {\n         System.out.printf(\"Read %d bytes to bind (%d as array); will do %d repetitions\\n\",\n                 byteInput1.length, byteInput2.length, REPS);\n+        System.out.print(\"Warming up\");\n \n         final ObjectReader jsonReader = mapper1.reader()\n                 .withType(inputClass1);\n         \n         while (true) {\n             Thread.sleep(100L);\n-            int type = (i++ % TYPES);\n+            final int type = (i++ % TYPES);\n \n             String msg;\n             double msesc;\n     {\n         System.out.printf(\"Read %d bytes to bind (%d as array); will do %d repetitions\\n\",\n                 input1.length(), input2.length(), REPS);\n+        System.out.print(\"Warming up\");\n \n         final ObjectReader jsonReader = mapper1.reader()\n                 .with(DeserializationFeature.EAGER_DESERIALIZER_FETCH)\n         while (true) {\n             Thread.sleep(100L);\n             int type = (i++ % TYPES);\n-\n-// !!! TEST\n-//type = 0;            \n-            \n             String msg;\n             double msecs;\n             \n     private void updateStats(int type, boolean doGc, String msg, double msecs)\n         throws Exception\n     {\n-        // skip first N rounds to let results stabilize\n-        if (roundsDone >= WARMUP_ROUNDS) {\n+        final boolean lf = (type == (timeMsecs.length - 1));\n+\n+        if (startMeasure == 0L) { // skip first N seconds\n             timeMsecs[type] += msecs;\n-        }\n-        System.out.printf(\"Test '%s' [hash: 0x%s] -> %.1f msecs\\n\", msg, this.hash, msecs);\n-        if (type == 0) {\n+        } else {\n+            if (lf) {\n+                if (System.currentTimeMillis() >= startMeasure) {\n+                    startMeasure = 0L;\n+                    System.out.println(\" complete!\");\n+                } else {\n+                    System.out.print(\".\");\n+                }\n+            }\n+            return;\n+        }\n+\n+        System.out.printf(\"Test '%s' [hash: 0x%s] -> %.1f msecs\\n\", msg, Integer.toHexString(hash), msecs);\n+        if (lf) {\n             ++roundsDone;\n-            if ((roundsDone % 3) == 0 && roundsDone > WARMUP_ROUNDS) {\n-                double den = (double) (roundsDone - WARMUP_ROUNDS);\n-                System.out.printf(\"Averages after %d rounds (Object / Array): %.1f / %.1f msecs\\n\",\n-                        (int) den,\n+            if ((roundsDone % 3) == 0 ) {\n+                double den = (double) roundsDone;\n+                System.out.printf(\"Averages after %d rounds (%s/%s): %.1f / %.1f msecs\\n\",\n+                        (int) den, _desc1, _desc2,\n                         timeMsecs[0] / den, timeMsecs[1] / den);\n-                        \n             }\n             System.out.println();\n         }\n--- a/src/test/java/perf/ObjectWriterTestBase.java\n+++ b/src/test/java/perf/ObjectWriterTestBase.java\n \n         // Skip first 5 seconds\n         long startMeasure = System.currentTimeMillis() + 5000L;\n+        System.out.print(\"Warming up\");\n         \n         final double[] timesMsec = new double[TYPES];\n-\n-        System.out.print(\"Warming up\");\n         \n         while (true) {\n             final int round = (i % TYPES);", "timestamp": 1399177266, "metainfo": ""}