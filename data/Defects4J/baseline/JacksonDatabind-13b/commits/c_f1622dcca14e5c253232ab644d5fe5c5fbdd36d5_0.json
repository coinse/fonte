{"sha": "f1622dcca14e5c253232ab644d5fe5c5fbdd36d5", "log": "Merge branch 'master' of github.com:FasterXML/jackson-databind", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReader.java\n import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n \n /**\n- * Object that knows how to serialize Object Ids.\n+ * Object that knows how to deserialize Object Ids.\n  */\n public class ObjectIdReader\n     implements java.io.Serializable\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestCreatorWithPolymorphic113.java\n+package com.fasterxml.jackson.failing;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+/**\n+ * Test(s) for [Issue#113], problems with polymorphic types, JsonCreator.\n+ */\n+public class TestCreatorWithPolymorphic113 extends BaseMapTest\n+{\n+    @JsonIgnoreProperties(ignoreUnknown = true)\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"_class\")\n+    @JsonSubTypes({  @JsonSubTypes.Type(Dog.class) })\n+    public static abstract class Animal {\n+        public final static String ID = \"id\";\n+\n+        private String id;\n+\n+        @JsonCreator\n+        public Animal(@JsonProperty(ID) String id) {\n+            this.id = id;\n+        }\n+\n+        @JsonProperty(ID)\n+        public String getId() {\n+            return id;\n+        }\n+    }\n+\n+    @JsonIgnoreProperties(ignoreUnknown = true)\n+    public static class Dog extends Animal {\n+        @JsonCreator\n+        public Dog(@JsonProperty(ID) String id) {\n+            super(id);\n+        }\n+    }\n+\n+    @JsonIgnoreProperties(ignoreUnknown = true)\n+    public static class AnimalWrapper {\n+        private Animal animal;\n+\n+        @JsonCreator\n+        public AnimalWrapper(@JsonProperty(\"animal\") Animal animal) {\n+            this.animal = animal;\n+        }\n+\n+        public Animal getAnimal() {\n+            return animal;\n+        }\n+    }\n+\n+    public void testSubtypes() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        String id = \"nice dogy\";\n+        String json = mapper.writeValueAsString(new AnimalWrapper(new Dog(id)));\n+//System.err.println(\"JSON = \"+json);\n+        AnimalWrapper wrapper = mapper.readValue(json, AnimalWrapper.class);\n+        assertEquals(id, wrapper.getAnimal().getId());\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestNonStaticInnerClassInList.java\n+package com.fasterxml.jackson.failing;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+public class TestNonStaticInnerClassInList extends BaseMapTest\n+{\n+    public static class Dog2\n+    {\n+        public String name;\n+        public List<Leg> legs;\n+\n+        // NOTE: non-static on purpose!\n+        public class Leg {\n+            public int length;\n+        }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Tests\n+    /**********************************************************\n+     */\n+    \n+    // core/[Issue#32]\n+    public void testInnerList() throws Exception\n+    {\n+        Dog2 dog = new Dog2();\n+        dog.name = \"Spike\";\n+        dog.legs = new ArrayList<Dog2.Leg>();\n+        dog.legs.add(dog.new Leg());\n+        dog.legs.add(dog.new Leg());\n+        dog.legs.get(0).length = 5;\n+        dog.legs.get(1).length = 4;\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        String dogJson = mapper.writeValueAsString(dog);\n+//        System.out.println(dogJson);\n+      // output: {\"name\":\"Spike\",\"legs\":[{length: 5}, {length: 4}]}\n+\n+        // currently throws JsonMappingException\n+        Dog2 dogCopy = mapper.readValue(dogJson, Dog2.class);\n+        assertEquals(dogCopy.legs.get(1).length, 4);\n+        // prefer fully populated Dog instance\n+    }\n+}\n+\n+", "timestamp": 1386733228, "metainfo": ""}