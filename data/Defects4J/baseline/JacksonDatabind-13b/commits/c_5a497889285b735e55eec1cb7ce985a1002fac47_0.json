{"sha": "5a497889285b735e55eec1cb7ce985a1002fac47", "log": "Naming improvements", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n      *<p>\n      * Note that the method does NOT change state of this reader, but\n      * rather construct and returns a newly configured instance.\n-     */\n-    public ObjectReader withType(JavaType valueType)\n+     * \n+     * @since 2.5\n+     */\n+    public ObjectReader forType(JavaType valueType)\n     {\n         if (valueType != null && valueType.equals(_valueType)) {\n             return this;\n      *<p>\n      * Note that the method does NOT change state of this reader, but\n      * rather construct and returns a newly configured instance.\n-     */\n-    public ObjectReader withType(Class<?> valueType) {\n-        return withType(_config.constructType(valueType));\n+     *\n+     * @since 2.5\n+     */\n+    public ObjectReader forType(Class<?> valueType) {\n+        return forType(_config.constructType(valueType));\n     }    \n \n     /**\n      *<p>\n      * Note that the method does NOT change state of this reader, but\n      * rather construct and returns a newly configured instance.\n-     */\n+     *\n+     * @since 2.5\n+     */\n+    public ObjectReader forType(TypeReference<?> valueTypeRef) {\n+        return forType(_config.getTypeFactory().constructType(valueTypeRef.getType()));\n+    }    \n+\n+    /**\n+     * @deprecated since 2.5 Use {@link #forType(JavaType)} instead\n+     */\n+    @Deprecated\n+    public ObjectReader withType(JavaType valueType) {\n+        return forType(valueType);\n+    }\n+\n+    /**\n+     * @deprecated since 2.5 Use {@link #forType(Class)} instead\n+     */\n+    @Deprecated\n+    public ObjectReader withType(Class<?> valueType) {\n+        return forType(_config.constructType(valueType));\n+    }    \n+\n+    /**\n+     * @deprecated since 2.5 Use {@link #forType(Class)} instead\n+     */\n+    @Deprecated\n     public ObjectReader withType(java.lang.reflect.Type valueType) {\n-        return withType(_config.getTypeFactory().constructType(valueType));\n-    }    \n-\n-    /**\n-     * Method for constructing a new reader instance that is configured\n-     * to data bind into specified type.\n-     *<p>\n-     * Note that the method does NOT change state of this reader, but\n-     * rather construct and returns a newly configured instance.\n-     */\n+        return forType(_config.getTypeFactory().constructType(valueType));\n+    }\n+\n+    /**\n+     * @deprecated since 2.5 Use {@link #forType(TypeReference)} instead\n+     */\n+    @Deprecated\n     public ObjectReader withType(TypeReference<?> valueTypeRef) {\n-        return withType(_config.getTypeFactory().constructType(valueTypeRef.getType()));\n+        return forType(_config.getTypeFactory().constructType(valueTypeRef.getType()));\n     }    \n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n      * Note that method does NOT change state of this reader, but\n      * rather construct and returns a newly configured instance.\n      */\n-    \n-    public ObjectWriter withSchema(FormatSchema schema) {\n+    public ObjectWriter with(FormatSchema schema) {\n         if (_schema == schema) {\n             return this;\n         }\n         _verifySchemaType(schema);\n         return new ObjectWriter(this, _config, _rootType, _rootSerializer,\n                 _prettyPrinter, schema, _characterEscapes);\n+    }\n+\n+    /**\n+     * @deprecated Since 2.5 use {@link #with(FormatSchema)} instead\n+     */\n+    @Deprecated\n+    public ObjectWriter withSchema(FormatSchema schema) {\n+        return with(schema);\n     }\n \n     /**\n      *<p>\n      * Note that method does NOT change state of this reader, but\n      * rather construct and returns a newly configured instance.\n-     */\n-    public ObjectWriter withType(JavaType rootType)\n+     * \n+     * @since 2.5\n+     */\n+    public ObjectWriter forType(JavaType rootType)\n     {\n         JsonSerializer<Object> rootSer;\n         if (rootType == null || rootType.hasRawClass(Object.class)) {\n      * Method that will construct a new instance that uses specific type\n      * as the root type for serialization, instead of runtime dynamic\n      * type of the root object itself.\n-     */\n+     * \n+     * @since 2.5\n+     */\n+    public ObjectWriter forType(Class<?> rootType) {\n+        if (rootType == Object.class) {\n+            return forType((JavaType) null);\n+        }\n+        return forType(_config.constructType(rootType));\n+    }\n+\n+    public ObjectWriter forType(TypeReference<?> rootType) {\n+        return forType(_config.getTypeFactory().constructType(rootType.getType()));\n+    }\n+\n+    /**\n+     * @deprecated since 2.5 Use {@link #forType(JavaType)} instead\n+     */\n+    @Deprecated // since 2.5\n+    public ObjectWriter withType(JavaType rootType) {\n+        return forType(rootType);\n+    }\n+\n+    /**\n+     * @deprecated since 2.5 Use {@link #forType(Class)} instead\n+     */\n+    @Deprecated // since 2.5\n     public ObjectWriter withType(Class<?> rootType) {\n-        if (rootType == Object.class) {\n-            return withType((JavaType) null);\n-        }\n-        return withType(_config.constructType(rootType));\n-    }\n-\n+        return forType(rootType);\n+    }\n+\n+    /**\n+     * @deprecated since 2.5 Use {@link #forType(TypeReference)} instead\n+     */\n+    @Deprecated // since 2.5\n     public ObjectWriter withType(TypeReference<?> rootType) {\n-        return withType(_config.getTypeFactory().constructType(rootType.getType()));\n+        return forType(rootType);\n     }\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DataFormatReaders.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DataFormatReaders.java\n         final int len = _readers.length;\n         ObjectReader[] r = new ObjectReader[len];\n         for (int i = 0; i < len; ++i) {\n-            r[i] = _readers[i].withType(type);\n+            r[i] = _readers[i].forType(type);\n         }\n         return new DataFormatReaders(r, _optimalMatch, _minimalMatch, _maxInputLookahead);\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/TestFormatSchema.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestFormatSchema.java\n         StringReader r = new StringReader(\"{}\");\n         //  bit ugly, but can't think of cleaner simple way to check this...\n         try {\n-            mapper.reader(s).withType(Object.class).readValue(r);\n+            mapper.reader(s).forType(Object.class).readValue(r);\n             fail(\"Excpected exception\");\n         } catch (SchemaException e) {\n             assertSame(s, e._schema);\n--- a/src/test/java/com/fasterxml/jackson/databind/TestReadValues.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestReadValues.java\n             +\"{\\\"boy\\\": \\\"howdy\\\", \\\"huh\\\": \\\"what\\\"}]\";\n         final MappingIterator<Map<String, Object>> iterator = MAPPER\n                 .reader()\n-                .withType(new TypeReference<Map<String, Object>>(){})\n+                .forType(new TypeReference<Map<String, Object>>(){})\n                 .readValues(JSON);\n \n         Map<String,Object> map;\n--- a/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualKeyTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualKeyTypes.java\n         mapper.registerModule(module);\n         Map<String,Object> input = new HashMap<String,Object>();\n         input.put(\"a\", Integer.valueOf(3));\n-        String json = mapper.writerWithType(TypeFactory.defaultInstance().constructMapType(HashMap.class, String.class, Object.class))\n+        String json = mapper.writerFor(TypeFactory.defaultInstance().constructMapType(HashMap.class, String.class, Object.class))\n             .writeValueAsString(input);\n         assertEquals(\"{\\\"prefix:a\\\":3}\", json);\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestCollectionDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestCollectionDeserialization.java\n     public void testFromEmptyString() throws Exception\n     {\n         ObjectReader r = MAPPER.reader(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);\n-        List<?> result = r.withType(List.class).readValue(quote(\"\"));\n+        List<?> result = r.forType(List.class).readValue(quote(\"\"));\n         assertNull(result);\n     }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestEnumDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestEnumDeserialization.java\n     {\n         // can not use shared mapper when changing configs...\n         ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL);\n-        assertNull(reader.withType(TestEnum.class).readValue(\"\\\"NO-SUCH-VALUE\\\"\"));\n-        assertNull(reader.withType(TestEnum.class).readValue(\" 4343 \"));\n+        assertNull(reader.forType(TestEnum.class).readValue(\"\\\"NO-SUCH-VALUE\\\"\"));\n+        assertNull(reader.forType(TestEnum.class).readValue(\" 4343 \"));\n     }\n \n     public void testAllowUnknownEnumValuesForEnumSets() throws Exception\n     {\n         ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL);\n-        EnumSet<TestEnum> result = reader.withType(new TypeReference<EnumSet<TestEnum>>() { })\n+        EnumSet<TestEnum> result = reader.forType(new TypeReference<EnumSet<TestEnum>>() { })\n                 .readValue(\"[\\\"NO-SUCH-VALUE\\\"]\");\n         assertEquals(0, result.size());\n     }\n     public void testAllowUnknownEnumValuesAsMapKeysReadAsNull() throws Exception\n     {\n         ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL);\n-        ClassWithEnumMapKey result = reader.withType(ClassWithEnumMapKey.class)\n+        ClassWithEnumMapKey result = reader.forType(ClassWithEnumMapKey.class)\n                 .readValue(\"{\\\"map\\\":{\\\"NO-SUCH-VALUE\\\":\\\"val\\\"}}\");\n         assertTrue(result.map.containsKey(null));\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestMapDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestMapDeserialization.java\n         Map<?,?> result = r.readValue(JSON);\n         assertNull(result);\n \n-        EnumMap<?,?> result2 = r.withType(new TypeReference<EnumMap<Key,String>>() { })\n+        EnumMap<?,?> result2 = r.forType(new TypeReference<EnumMap<Key,String>>() { })\n                 .readValue(JSON);\n         assertNull(result2);\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/interop/TestFormatDetection.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/interop/TestFormatDetection.java\n     \n     public void testSimpleWithJSON() throws Exception\n     {\n-        ObjectReader detecting = READER.withType(POJO.class);\n+        ObjectReader detecting = READER.forType(POJO.class);\n         detecting = detecting.withFormatDetection(detecting);\n         POJO pojo = detecting.readValue(utf8Bytes(\"{\\\"x\\\":1}\"));\n         assertNotNull(pojo);\n \n     public void testInvalid() throws Exception\n     {\n-        ObjectReader detecting = READER.withType(POJO.class);\n+        ObjectReader detecting = READER.forType(POJO.class);\n         detecting = detecting.withFormatDetection(detecting);\n         try {\n             detecting.readValue(utf8Bytes(\"<POJO><x>1</x></POJO>\"));\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestObjectWriter.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestObjectWriter.java\n     {\n         ObjectWriter writer = MAPPER.writer();\n         assertFalse(writer.hasPrefetchedSerializer());\n-        writer = writer.withType(String.class);\n+        writer = writer.forType(String.class);\n         assertTrue(writer.hasPrefetchedSerializer());\n     }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/views/TestViewDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/views/TestViewDeserialization.java\n         \n         // but with different views, different contents\n         bean = mapper.readerWithView(ViewAA.class)\n-                .withType(Bean.class)\n+                .forType(Bean.class)\n                 .readValue(\"{\\\"a\\\":3, \\\"aa\\\":\\\"foo\\\", \\\"b\\\": 9 }\");\n         // should include 'a' and 'aa' (as per view)\n         assertEquals(3, bean.a);\n         assertEquals(0, bean.b);\n \n         bean = mapper.readerWithView(ViewA.class)\n-                .withType(Bean.class)\n+                .forType(Bean.class)\n                 .readValue(\"{\\\"a\\\":1, \\\"aa\\\":\\\"x\\\", \\\"b\\\": 3 }\");\n         assertEquals(1, bean.a);\n         assertNull(bean.aa);\n \n         // but with, say, AA, will not get 'b'\n         bean = myMapper.readerWithView(ViewAA.class)\n-                .withType(DefaultsBean.class)\n+                .forType(DefaultsBean.class)\n                 .readValue(\"{\\\"a\\\":1, \\\"b\\\": 2 }\");\n         // 'a' not there any more\n         assertEquals(0, bean.a);\n--- a/src/test/java/com/fasterxml/jackson/failing/TestObjectIdWithInjectables538.java\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestObjectIdWithInjectables538.java\n         A output = null;\n \n         try {\n-            output = MAPPER.reader(inject).withType(A.class).readValue(json);\n+            output = MAPPER.reader(inject).forType(A.class).readValue(json);\n         } catch (Exception e) {\n             throw new IllegalStateException(\"Failed to deserialize from JSON '\"+json+\"'\", e);\n         }\n--- a/src/test/java/perf/ObjectReaderTestBase.java\n+++ b/src/test/java/perf/ObjectReaderTestBase.java\n         System.out.print(\"Warming up\");\n \n         final ObjectReader jsonReader = mapper1.reader()\n-                .withType(inputClass1);\n+                .forType(inputClass1);\n         final ObjectReader arrayReader = mapper2.reader()\n-                .withType(inputClass2);\n+                .forType(inputClass2);\n         \n         int i = 0;\n         final int TYPES = 2;\n \n         final ObjectReader jsonReader = mapper1.reader()\n                 .with(DeserializationFeature.EAGER_DESERIALIZER_FETCH)\n-                .withType(inputClass1);\n+                .forType(inputClass1);\n         final ObjectReader arrayReader = mapper2.reader()\n                 .with(DeserializationFeature.EAGER_DESERIALIZER_FETCH)\n-                .withType(inputClass2);\n+                .forType(inputClass2);\n         \n         int i = 0;\n         final int TYPES = 2;\n--- a/src/test/java/perf/ObjectWriterTestBase.java\n+++ b/src/test/java/perf/ObjectWriterTestBase.java\n         }\n \n         final ObjectWriter writer0 = mapper.writer().with(SerializationFeature.EAGER_SERIALIZER_FETCH);\n-        final ObjectWriter writer1 = writer0.withType(inputClass1);\n-        final ObjectWriter writer2 = writer0.withType(inputClass2);\n+        final ObjectWriter writer1 = writer0.forType(inputClass1);\n+        final ObjectWriter writer2 = writer0.forType(inputClass2);\n         \n         int i = 0;\n         int roundsDone = 0;", "timestamp": 1416552490, "metainfo": ""}