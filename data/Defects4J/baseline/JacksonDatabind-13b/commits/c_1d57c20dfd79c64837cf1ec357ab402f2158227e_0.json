{"sha": "1d57c20dfd79c64837cf1ec357ab402f2158227e", "log": "Fix #735", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n      */\n     @Override\n     public boolean isCachable() {\n-        return (_valueTypeDeserializer == null) && (_ignorableProperties == null);\n+        /* As per [databind#735], existence of value or key deserializer (only passed\n+         * if annotated to use non-standard one) should also prevent caching.\n+         */\n+        return (_valueDeserializer == null)\n+                && (_keyDeserializer == null)\n+                && (_valueTypeDeserializer == null)\n+                && (_ignorableProperties == null);\n     }\n \n     @Override\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestCustomDeserializers.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestCustomDeserializers.java\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n             }\n             return this;\n         }\n-        \n+    }\n+\n+    // For [databind#735]\n+    public static class TestMapBean735 {\n+\n+        @JsonDeserialize(contentUsing = CustomDeserializer735.class)\n+        public Map<String, Integer> map1;\n+\n+        public Map<String, Integer> map2;\n+    }\n+\n+    public static class TestListBean735 {\n+\n+        @JsonDeserialize(contentUsing = CustomDeserializer735.class)\n+        public List<Integer> list1;\n+\n+        public List<Integer> list2;\n     }\n     \n+    public static class CustomDeserializer735 extends StdDeserializer<Integer> {\n+        public CustomDeserializer735() {\n+            super(Integer.class);\n+        }\n+\n+        @Override\n+        public Integer deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n+            return 100 * p.getValueAsInt();\n+        }\n+    }\n+\n     /*\n     /**********************************************************\n     /* Unit tests\n         assertNotNull(w.value.inner);\n         assertEquals(-13, w.value.inner.x);\n     }\n+\n+    // [databind#735]: erroneous application of custom deserializer\n+    public void testCustomMapValueDeser735() throws Exception {\n+        String json = \"{\\\"map1\\\":{\\\"a\\\":1},\\\"map2\\\":{\\\"a\\\":1}}\";\n+        TestMapBean735 bean = MAPPER.readValue(json, TestMapBean735.class);\n+\n+        assertEquals(100, bean.map1.get(\"a\").intValue());\n+        assertEquals(1, bean.map2.get(\"a\").intValue());\n+    }\n+\n+    public void testCustomListValueDeser735() throws Exception {\n+        String json = \"{\\\"list1\\\":[1],\\\"list2\\\":[1]}\";\n+        TestListBean735 bean = MAPPER.readValue(json, TestListBean735.class);\n+\n+        assertEquals(100, bean.list1.get(0).intValue());\n+        assertEquals(1, bean.list2.get(0).intValue());\n+    }\n }", "timestamp": 1427399398, "metainfo": ""}