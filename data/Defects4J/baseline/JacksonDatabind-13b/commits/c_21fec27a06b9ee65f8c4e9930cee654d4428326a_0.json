{"sha": "21fec27a06b9ee65f8c4e9930cee654d4428326a", "log": "add convenience methods to SimpleModule", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java\n     \n     public SimpleDeserializers() { }\n \n+    /**\n+     * @since 2.1\n+     */\n+    public SimpleDeserializers(Map<Class<?>,JsonDeserializer<?>> desers) {\n+        addDeserializers(desers);\n+    }\n+    \n     public <T> void addDeserializer(Class<T> forClass, JsonDeserializer<? extends T> deser)\n     {\n         ClassKey key = new ClassKey(forClass);\n             _classMappings = new HashMap<ClassKey,JsonDeserializer<?>>();\n         }\n         _classMappings.put(key, deser);\n+    }\n+\n+    /**\n+     * @since 2.1\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public void addDeserializers(Map<Class<?>,JsonDeserializer<?>> desers)\n+    {\n+        for (Map.Entry<Class<?>,JsonDeserializer<?>> entry : desers.entrySet()) {\n+            Class<?> cls = entry.getKey();\n+            // what a mess... nominal generics safety...\n+            JsonDeserializer<Object> deser = (JsonDeserializer<Object>) entry.getValue();\n+            addDeserializer((Class<Object>) cls, deser);\n+        }\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java\n \n import java.util.HashMap;\n import java.util.LinkedHashSet;\n+import java.util.List;\n import java.util.Map;\n \n import com.fasterxml.jackson.core.Version;\n         _name = name;\n         _version = version;\n     }\n+\n+    /**\n+     * @since 2.1\n+     */\n+    public SimpleModule(String name, Version version,\n+            Map<Class<?>,JsonDeserializer<?>> deserializers) {\n+        this(name, version, deserializers, null);\n+    }\n+\n+    /**\n+     * @since 2.1\n+     */\n+    public SimpleModule(String name, Version version,\n+            List<JsonSerializer<?>> serializers) {\n+        this(name, version, null, serializers);\n+    }\n+    \n+    /**\n+     * @since 2.1\n+     */\n+    public SimpleModule(String name, Version version,\n+            Map<Class<?>,JsonDeserializer<?>> deserializers,\n+            List<JsonSerializer<?>> serializers)\n+    {\n+        _name = name;\n+        _version = version;\n+        if (deserializers != null) {\n+            _deserializers = new SimpleDeserializers(deserializers);\n+        }\n+        if (serializers != null) {\n+            _serializers = new SimpleSerializers(serializers);\n+        }\n+    }\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleSerializers.java\n     public SimpleSerializers() { }\n \n     /**\n+     * @since 2.1\n+     */\n+    public SimpleSerializers(List<JsonSerializer<?>> sers) {\n+        addSerializers(sers);\n+    }\n+    \n+    /**\n      * Method for adding given serializer for type that {@link JsonSerializer#handledType}\n      * specifies (which MUST return a non-null class; and can NOT be {@link Object}, as a\n      * sanity check).\n     {\n         _addSerializer(type, ser);\n     }\n-    \n+\n+    /**\n+     * @since 2.1\n+     */\n+    public void addSerializers(List<JsonSerializer<?>> sers) {\n+        for (JsonSerializer<?> ser : sers) {\n+            addSerializer(ser);\n+        }\n+    }\n+\n     private void _addSerializer(Class<?> cls, JsonSerializer<?> ser)\n     {\n         ClassKey key = new ClassKey(cls);", "timestamp": 1348454900, "metainfo": ""}