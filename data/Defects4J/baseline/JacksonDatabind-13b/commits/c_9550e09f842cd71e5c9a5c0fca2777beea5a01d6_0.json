{"sha": "9550e09f842cd71e5c9a5c0fca2777beea5a01d6", "log": "Implemented [JACKSON-762], almost done (one more unit test to make work...)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n     public Class<?>[] findViews(Annotated a) {\n         return null;\n     }\n+\n+    /**\n+     * Method for checking whether given accessor claims to represent\n+     * type id: if so, its value may be used as an override,\n+     * instead of generated type id.\n+     * \n+     * @since 2.0\n+     */\n+    public Boolean isTypeId(AnnotatedMember member) {\n+        return null;\n+    }\n     \n     /*\n     /**********************************************************\n             }\n             return result;\n         }\n+\n+        @Override\n+        public Boolean isTypeId(AnnotatedMember member) {\n+            Boolean b = _primary.isTypeId(member);\n+            if (b == null) {\n+                b = _secondary.isTypeId(member);\n+            }\n+            return b;\n+        }\n         \n         // // // Serialization: class annotations\n \n--- a/src/main/java/com/fasterxml/jackson/databind/BeanPropertyDefinition.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/BeanPropertyDefinition.java\n     public AnnotationIntrospector.ReferenceProperty findReferenceType() {\n         return null;\n     }\n+\n+    /**\n+     * Method used to check whether this logical property has marker(s)\n+     * to indicate it should be used as the type id for polymorphic type\n+     * handling.\n+     */\n+    public boolean isTypeId() {\n+        return false;\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n         JsonView ann = a.getAnnotation(JsonView.class);\n         return (ann == null) ? null : ann.value();\n     }\n+\n+    @Override\n+    public Boolean isTypeId(AnnotatedMember member) {\n+        return member.hasAnnotation(JsonTypeId.class);\n+    }\n     \n     /*\n     /**********************************************************\n     /**********************************************************\n      */\n \n-    @SuppressWarnings(\"deprecation\")\n     @Override\n     public String findSerializationName(AnnotatedMethod am)\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n         return m;\n     }\n \n-    /**\n-     * Method that will try to find JSON View inclusion information\n-     * for this property.\n-     */\n+    /*\n+    /*****************************************************\n+    /* Implementations of refinement accessors\n+    /*****************************************************\n+     */\n+    \n     @Override\n     public Class<?>[] findViews() {\n         return fromMemberAnnotation(new WithMember<Class<?>[]>() {\n                 return _annotationIntrospector.findReferenceType(member);\n             }\n         });\n+    }\n+\n+    public boolean isTypeId() {\n+        Boolean b = fromMemberAnnotation(new WithMember<Boolean>() {\n+            @Override public Boolean withMember(AnnotatedMember member) {\n+                return _annotationIntrospector.isTypeId(member);\n+            }\n+        });\n+        return (b != null) && b.booleanValue();\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeSerializer.java\n     /* Writing with custom type id\n     /**********************************************************\n      */\n-\n-    public void writeCustomTypePrefixForScalar(Object value, JsonGenerator jgen, String typeId)\n-        throws IOException, JsonProcessingException\n-    {\n-        jgen.writeStartArray();\n-        jgen.writeString(typeId);\n-    }\n     \n     public void writeCustomTypePrefixForObject(Object value, JsonGenerator jgen, String typeId)\n         throws IOException, JsonProcessingException {\n         jgen.writeStartArray();\n         jgen.writeString(typeId);\n+        jgen.writeStartObject();\n     }\n     \n     public void writeCustomTypePrefixForArray(Object value, JsonGenerator jgen, String typeId)\n     {\n         jgen.writeStartArray();\n         jgen.writeString(typeId);\n+        jgen.writeStartArray();\n     }\n \n-    public void writeCustomTypeSuffixForScalar(Object value, JsonGenerator jgen, String typeId)\n-        throws IOException, JsonProcessingException {\n-        writeTypeSuffixForScalar(value, jgen); // standard impl works fine\n+    public void writeCustomTypePrefixForScalar(Object value, JsonGenerator jgen, String typeId)\n+        throws IOException, JsonProcessingException\n+    {\n+        jgen.writeStartArray();\n+        jgen.writeString(typeId);\n     }\n \n     public void writeCustomTypeSuffixForObject(Object value, JsonGenerator jgen, String typeId)\n             throws IOException, JsonProcessingException {\n         writeTypeSuffixForArray(value, jgen); // standard impl works fine\n     }\n+\n+    public void writeCustomTypeSuffixForScalar(Object value, JsonGenerator jgen, String typeId)\n+        throws IOException, JsonProcessingException {\n+        writeTypeSuffixForScalar(value, jgen); // standard impl works fine\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java\n import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer;\n import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;\n import com.fasterxml.jackson.databind.util.NameTransformer;\n      */\n     public BeanSerializer(JavaType type,\n             BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties,\n-            AnyGetterWriter anyGetterWriter,\n+            AnyGetterWriter anyGetterWriter, AnnotatedMember typeId,\n             Object filterId)\n     {\n-        super(type, properties, filteredProperties, anyGetterWriter, filterId);\n-    }\n-\n-    public BeanSerializer(Class<?> rawType,\n-            BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties,\n-            AnyGetterWriter anyGetterWriter,\n-            Object filterId)\n-    {\n-        super(rawType, properties, filteredProperties, anyGetterWriter, filterId);\n+        super(type, properties, filteredProperties, anyGetterWriter, typeId, filterId);\n     }\n \n     /**\n      * Method for constructing dummy bean deserializer; one that\n      * never outputs any properties\n      */\n-    public static BeanSerializer createDummy(Class<?> forType)\n+    public static BeanSerializer createDummy(JavaType forType)\n     {\n-        return new BeanSerializer(forType, NO_PROPS, null, null, null);\n+        return new BeanSerializer(forType, NO_PROPS, null, null, null, null);\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerBuilder.java\n import java.util.*;\n \n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n \n /**\n  * Builder class used for aggregating deserialization information about\n      */\n     protected Object _filterId;\n \n+    /**\n+     * Property that is used for type id (and not serialized as regular\n+     * property)\n+     */\n+    protected AnnotatedMember _typeId;\n+    \n     /*\n     /**********************************************************\n     /* Construction and setter methods\n     public void setFilterId(Object filterId) {\n         _filterId = filterId;\n     }\n+\n+    public void setTypeId(AnnotatedMember idProp) {\n+        _typeId = idProp;\n+    }\n     \n     /*\n     /**********************************************************\n             properties = _properties.toArray(new BeanPropertyWriter[_properties.size()]);\n             \n         }\n-        return new BeanSerializer(_beanDesc.getType(), properties, _filteredProperties, _anyGetter, _filterId);\n+        return new BeanSerializer(_beanDesc.getType(), properties, _filteredProperties,\n+                _anyGetter, _typeId, _filterId);\n     }\n     \n     /**\n      * type information)\n      */\n     public BeanSerializer createDummy() {\n-        return BeanSerializer.createDummy(_beanDesc.getBeanClass());\n+        return BeanSerializer.createDummy(_beanDesc.getType());\n     }\n }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n         BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n         \n         // First: any detectable (auto-detect, annotations) properties to serialize?\n-        List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc);\n+        List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n \n         if (props == null) {\n             props = new ArrayList<BeanPropertyWriter>();\n      * Can be overridden to implement custom detection schemes.\n      */\n     protected List<BeanPropertyWriter> findBeanProperties(SerializerProvider prov,\n-            BeanDescription beanDesc)\n+            BeanDescription beanDesc, BeanSerializerBuilder builder)\n         throws JsonMappingException\n     {\n         List<BeanPropertyDefinition> properties = beanDesc.findProperties();\n \n         ArrayList<BeanPropertyWriter> result = new ArrayList<BeanPropertyWriter>(properties.size());\n         TypeBindings typeBind = beanDesc.bindingsForBeanType();\n-        // [JACKSON-98]: start with field properties, if any\n         for (BeanPropertyDefinition property : properties) {\n+            // [JACKSON-762]: type id? Requires special handling:\n+            if (property.isTypeId()) {\n+                AnnotatedMember acc = property.getAccessor();\n+                if (acc != null) { // only add if we can access... but otherwise?\n+                    if (config.canOverrideAccessModifiers()) {\n+                        acc.fixAccess();\n+                    }\n+                    builder.setTypeId(acc);\n+                }\n+                continue;\n+            }\n+            \n             AnnotatedMember accessor = property.getAccessor();\n             // [JACKSON-235]: suppress writing of back references\n             AnnotationIntrospector.ReferenceProperty refType = property.findReferenceType();\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n \n import com.fasterxml.jackson.core.*;\n \n-\n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n     final protected AnyGetterWriter _anyGetterWriter;\n \n     /**\n+     * If using custom type ids (usually via getter, or field), this is the\n+     * reference to that member.\n+     */\n+    final protected AnnotatedMember _typeId;\n+    \n+    /**\n      * Id of the bean property filter to use, if any; null if none.\n      */\n     final protected Object _propertyFilterId;\n      */\n     protected BeanSerializerBase(JavaType type,\n             BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties,\n-            AnyGetterWriter anyGetterWriter,\n+            AnyGetterWriter anyGetterWriter, AnnotatedMember typeId,\n             Object filterId)\n     {\n         super(type);\n         _props = properties;\n         _filteredProps = filteredProperties;\n         _anyGetterWriter = anyGetterWriter;\n+        _typeId = typeId;\n         _propertyFilterId = filterId;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     public BeanSerializerBase(Class<?> rawType,\n             BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties,\n-            AnyGetterWriter anyGetterWriter,\n+            AnyGetterWriter anyGetterWriter, AnnotatedMember typeId,\n             Object filterId)\n     {\n         super((Class<Object>) rawType);\n         _props = properties;\n         _filteredProps = filteredProperties;\n         _anyGetterWriter = anyGetterWriter;\n+        _typeId = typeId;\n         _propertyFilterId = filterId;\n     }\n \n      */\n     protected BeanSerializerBase(BeanSerializerBase src) {\n         this(src._handledType,\n-                src._props, src._filteredProps, src._anyGetterWriter, src._propertyFilterId);\n+                src._props, src._filteredProps,\n+                src._anyGetterWriter, src._typeId, src._propertyFilterId);\n     }\n \n     /**\n      */\n     protected BeanSerializerBase(BeanSerializerBase src, NameTransformer unwrapper) {\n         this(src._handledType,\n-                rename(src._props, unwrapper),\n-                rename(src._filteredProps, unwrapper),\n-                src._anyGetterWriter, src._propertyFilterId);\n+                rename(src._props, unwrapper), rename(src._filteredProps, unwrapper),\n+                src._anyGetterWriter, src._typeId, src._propertyFilterId);\n     }\n \n     private final static BeanPropertyWriter[] rename(BeanPropertyWriter[] props,\n             TypeSerializer typeSer)\n         throws IOException, JsonGenerationException\n     {\n+        if (_typeId != null) {\n+            serializeWithCustomType(bean, jgen, provider, typeSer);\n+            return;\n+        }\n         typeSer.writeTypePrefixForObject(bean, jgen);\n         if (_propertyFilterId != null) {\n             serializeFieldsFiltered(bean, jgen, provider);\n         typeSer.writeTypeSuffixForObject(bean, jgen);\n     }\n \n+    private final void serializeWithCustomType(Object bean,\n+            JsonGenerator jgen, SerializerProvider provider,\n+            TypeSerializer typeSer)\n+        throws IOException, JsonGenerationException\n+    {\n+        final Object typeId = _typeId.getValue(bean);\n+        String typeStr;\n+        if (typeId == null) {\n+            typeStr = \"\";\n+        } else {\n+            typeStr = (typeId instanceof String) ? (String) typeId : typeId.toString();\n+        }\n+        typeSer.writeCustomTypePrefixForObject(bean, jgen, typeStr);\n+        if (_propertyFilterId != null) {\n+            serializeFieldsFiltered(bean, jgen, provider);\n+        } else {\n+            serializeFields(bean, jgen, provider);\n+        }\n+        typeSer.writeCustomTypeSuffixForObject(bean, jgen, typeStr);\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Field serialization methods\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestVisibleTypeId.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestVisibleTypeId.java\n package com.fasterxml.jackson.databind.jsontype;\n \n+import com.fasterxml.jackson.annotation.JsonTypeId;\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import com.fasterxml.jackson.annotation.JsonTypeName;\n \n             property=\"type\")\n     static class TypeIdFromFieldProperty {\n         public int a = 3;\n+\n+        @JsonTypeId\n         public String type = \"SomeType\";\n     }\n \n             property=\"type\")\n     static class TypeIdFromFieldArray {\n         public int a = 3;\n+        @JsonTypeId\n         public String type = \"SomeType\";\n     }\n \n             property=\"type\")\n     static class TypeIdFromMethodObject {\n         public int a = 3;\n+        \n+        @JsonTypeId\n         public String getType() { return \"SomeType\"; }\n     }\n \n         @JsonTypeInfo(use=JsonTypeInfo.Id.NAME, include=JsonTypeInfo.As.EXTERNAL_PROPERTY,\n                 property=\"type\", visible=true)\n         public ExternalIdBean2 bean = new ExternalIdBean2();\n+\n+        @JsonTypeId\n         public String getType() { return \"SomeType\"; }\n     }\n \n \n     private final ObjectMapper mapper = new ObjectMapper();\n     \n+    /*\n     public void testVisibleWithProperty() throws Exception\n     {\n         String json = mapper.writeValueAsString(new PropertyBean());\n         assertEquals(\"ExternalType\", result.bean.type);\n         assertEquals(2, result.bean.a);\n     }\n+*/\n \n     // [JACKSON-762]\n \n     public void testTypeIdFromProperty() throws Exception\n     {\n-        assertEquals(\"{\\\"type\\\":\\\"SomeType\\\":\\\"a\\\":3}\",\n+        assertEquals(\"{\\\"type\\\":\\\"SomeType\\\",\\\"a\\\":3}\",\n                 mapper.writeValueAsString(new TypeIdFromFieldProperty()));\n     }\n ", "timestamp": 1328318413, "metainfo": ""}