{"sha": "bf59bfb434b95d9c71e63eb5f5267f4c8682a243", "log": "More refactoring wrt #706", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitorWrapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitorWrapper.java\n \n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n \n /**\n  * Interface for visitor callbacks, when type in question can be any of\n  * legal JSON types.\n+ *<p>\n+ * In most cases it will make more sense to extend {@link JsonFormatVisitorWrapper.Base}\n+ * instead of directly implementing this interface.\n  */\n public interface JsonFormatVisitorWrapper extends JsonFormatVisitorWithSerializerProvider\n {\n      * @since 2.2\n      */\n     public JsonMapFormatVisitor expectMapFormat(JavaType type) throws JsonMappingException;\n+\n+    /**\n+     * Empty \"no-op\" implementation of {@link JsonFormatVisitorWrapper}, suitable for\n+     * sub-classing. Does implement {@link #setProvider(SerializerProvider)} and\n+     * {@link #getProvider()} as expected; other methods simply return null\n+     * and do nothing.\n+     *\n+     * @since 2.5\n+     */\n+    public static class Base implements JsonFormatVisitorWrapper {\n+        protected SerializerProvider _provider;\n+\n+        public Base() { }\n+\n+        public Base(SerializerProvider p) {\n+             _provider = p;\n+        }\n+\n+        @Override\n+        public SerializerProvider getProvider() {\n+             return _provider;\n+        }\n+\n+        @Override\n+        public void setProvider(SerializerProvider p) {\n+             _provider = p;\n+        }\n+\n+        @Override\n+        public JsonObjectFormatVisitor expectObjectFormat(JavaType type)\n+                  throws JsonMappingException {\n+             return null;\n+        }\n+\n+        @Override\n+        public JsonArrayFormatVisitor expectArrayFormat(JavaType type)\n+                  throws JsonMappingException {\n+             return null;\n+        }\n+\n+        @Override\n+        public JsonStringFormatVisitor expectStringFormat(JavaType type)\n+                  throws JsonMappingException {\n+             return null;\n+        }\n+\n+        @Override\n+        public JsonNumberFormatVisitor expectNumberFormat(JavaType type)\n+                  throws JsonMappingException {\n+             return null;\n+        }\n+\n+        @Override\n+        public JsonIntegerFormatVisitor expectIntegerFormat(JavaType type)\n+                  throws JsonMappingException {\n+             return null;\n+        }\n+\n+        @Override\n+        public JsonBooleanFormatVisitor expectBooleanFormat(JavaType type)\n+                  throws JsonMappingException {\n+             return null;\n+        }\n+\n+        @Override\n+        public JsonNullFormatVisitor expectNullFormat(JavaType type)\n+                  throws JsonMappingException {\n+             return null;\n+        }\n+\n+        @Override\n+        public JsonAnyFormatVisitor expectAnyFormat(JavaType type)\n+                  throws JsonMappingException {\n+             return null;\n+        }\n+\n+        @Override\n+        public JsonMapFormatVisitor expectMapFormat(JavaType type)\n+                  throws JsonMappingException {\n+             return null;\n+        }\n+   }\n }", "timestamp": 1424207012, "metainfo": ""}