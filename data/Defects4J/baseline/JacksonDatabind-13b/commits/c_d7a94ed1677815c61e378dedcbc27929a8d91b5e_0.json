{"sha": "d7a94ed1677815c61e378dedcbc27929a8d91b5e", "log": "Backport #610 in 2.4(.4), update release notes", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java\n         // do we have it resolved?\n         Object pojo = roid.resolve();\n         if (pojo == null) { // not yet; should wait...\n-            throw new IllegalStateException(\"Could not resolve Object Id [\"+id+\"] -- unresolved forward-reference?\");\n+            throw new UnresolvedForwardReference(\"Could not resolve Object Id [\"+id+\"] -- unresolved forward-reference?\", jp.getCurrentLocation(), roid);\n         }\n         return pojo;\n     }\n }\n \n+\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestForwardReference.java\n+package com.fasterxml.jackson.databind.deser;\n+\n+import com.fasterxml.jackson.annotation.JsonIdentityInfo;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonSubTypes;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Test for testing forward reference handling\n+ */\n+public class TestForwardReference extends BaseMapTest {\n+\n+\tprivate final ObjectMapper MAPPER = new ObjectMapper()\n+\t\t\t.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)\n+\t\t\t.enable(SerializationFeature.INDENT_OUTPUT)\n+\t\t\t.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n+\n+\t/** Tests that we can read a hierarchical structure with forward references*/\n+\tpublic void testForwardRef() throws IOException {\n+\t\tMAPPER.readValue(\"{\" +\n+\t\t\t\t\"  \\\"@type\\\" : \\\"TestForwardReference$ForwardReferenceContainerClass\\\",\" +\n+\t\t\t\t\"  \\\"frc\\\" : \\\"willBeForwardReferenced\\\",\" +\n+\t\t\t\t\"  \\\"yac\\\" : {\" +\n+\t\t\t\t\"    \\\"@type\\\" : \\\"TestForwardReference$YetAnotherClass\\\",\" +\n+\t\t\t\t\"    \\\"frc\\\" : {\" +\n+\t\t\t\t\"      \\\"@type\\\" : \\\"One\\\",\" +\n+\t\t\t\t\"      \\\"id\\\" : \\\"willBeForwardReferenced\\\"\" +\n+\t\t\t\t\"    },\" +\n+\t\t\t\t\"    \\\"id\\\" : \\\"anId\\\"\" +\n+\t\t\t\t\"  },\" +\n+\t\t\t\t\"  \\\"id\\\" : \\\"ForwardReferenceContainerClass1\\\"\" +\n+\t\t\t\t\"}\", ForwardReferenceContainerClass.class);\n+\n+\n+\t}\n+\n+\t@JsonTypeInfo(use=JsonTypeInfo.Id.NAME, include= JsonTypeInfo.As.PROPERTY)\n+\tpublic static class ForwardReferenceContainerClass\n+\t{\n+\t\tpublic ForwardReferenceClass frc;\n+\t\tpublic YetAnotherClass yac;\n+\t\tpublic String id;\n+\t}\n+\n+\t@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY)\n+\t@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = \"id\")\n+\t@JsonSubTypes({\n+\t\t\t@JsonSubTypes.Type(value = ForwardReferenceClassOne.class, name = \"One\"),\n+\t\t\t@JsonSubTypes.Type(value = ForwardReferenceClassTwo.class, name = \"Two\")})\n+\tprivate static abstract class ForwardReferenceClass\n+\t{\n+\t\tpublic String id;\n+\t\tpublic void setId(String id) {\n+\t\t\tthis.id = id;\n+\t\t}\n+\t}\n+\n+\t@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY)\n+\tprivate static class YetAnotherClass\n+\t{\n+\t\tpublic YetAnotherClass() {}\n+\t\tpublic ForwardReferenceClass frc;\n+\t\tpublic String id;\n+\t}\n+\n+\tpublic static class ForwardReferenceClassOne extends ForwardReferenceClass { }\n+\n+\tpublic static class ForwardReferenceClassTwo extends ForwardReferenceClass { }\n+}", "timestamp": 1415815211, "metainfo": ""}