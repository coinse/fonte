{"sha": "9e649069d9f2309f4556b2c7d510fd5d33984018", "log": "refactoring, trying to get object id reading working with native ids", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java\n     protected Object _deserializeFromObjectId(JsonParser jp, DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n     {\n-        Object id = _objectIdReader.deserializer.deserialize(jp, ctxt);\n+        Object id = _objectIdReader.readObjectReference(jp, ctxt);\n         ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator);\n         // do we have it resolved?\n         Object pojo = roid.item;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n     protected Object deserializeFromObjectId(JsonParser jp, DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n     {\n-        Object id = _objectIdReader.deserializer.deserialize(jp, ctxt);\n+        Object id = _objectIdReader.readObjectReference(jp, ctxt);\n         ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator);\n         // do we have it resolved?\n         Object pojo = roid.item;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReader.java\n package com.fasterxml.jackson.databind.deser.impl;\n \n+import java.io.IOException;\n+\n import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n-\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n \n /**\n  * Object that knows how to serialize Object Ids.\n  */\n-public final class ObjectIdReader\n+public class ObjectIdReader\n     implements java.io.Serializable\n {\n     private static final long serialVersionUID = 1L;\n \n-    public final JavaType idType;\n+    protected final JavaType _idType;\n \n     public final PropertyName propertyName;\n     \n     /**\n      * Deserializer used for deserializing id values.\n      */\n-    public final JsonDeserializer<Object> deserializer;\n+    protected final JsonDeserializer<Object> _deserializer;\n \n     public final SettableBeanProperty idProperty;\n     \n     protected ObjectIdReader(JavaType t, PropertyName propName, ObjectIdGenerator<?> gen,\n             JsonDeserializer<?> deser, SettableBeanProperty idProp)\n     {\n-        idType = t;\n+        _idType = t;\n         propertyName = propName;\n         generator = gen;\n-        deserializer = (JsonDeserializer<Object>) deser;\n+        _deserializer = (JsonDeserializer<Object>) deser;\n         idProperty = idProp;\n     }\n \n     {\n         return construct(idType, new PropertyName(propName), generator, deser, idProp);\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* API\n+    /**********************************************************\n+     */\n+\n+    public JsonDeserializer<?> getDeserializer() {\n+        return _deserializer;\n+    }\n+\n+    public JavaType getIdType() {\n+        return _idType;\n+    }\n+    \n+    /**\n+     * Method called to read value that is expected to be an Object Reference\n+     * (that is, value of an Object Id used to refer to another object).\n+     * \n+     * @since 2.3\n+     */\n+    public Object readObjectReference(JsonParser jp, DeserializationContext ctxt)\n+        throws IOException, JsonProcessingException\n+    {\n+        return _deserializer.deserialize(jp, ctxt);\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java\n         this(objectIdReader, PropertyMetadata.STD_REQUIRED);\n     }\n     \n+    @SuppressWarnings(\"unchecked\")\n     public ObjectIdValueProperty(ObjectIdReader objectIdReader,\n             PropertyMetadata metadata)\n     {\n-        super(objectIdReader.propertyName, objectIdReader.idType, metadata,\n-                objectIdReader.deserializer);\n+        super(objectIdReader.propertyName, objectIdReader.getIdType(), metadata,\n+                (JsonDeserializer<Object>) objectIdReader.getDeserializer());\n         _objectIdReader = objectIdReader;\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.java\n import java.io.IOException;\n \n import com.fasterxml.jackson.core.JsonParser;\n-\n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.deser.SettableAnyProperty;\n import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n     public boolean readIdProperty(String propName) throws IOException\n     {\n         if ((_objectIdReader != null) && propName.equals(_objectIdReader.propertyName.getSimpleName())) {\n-            _idValue = _objectIdReader.deserializer.deserialize(_parser, _context);\n+            _idValue = _objectIdReader.readObjectReference(_parser, _context);\n             return true;\n         }\n         return false;", "timestamp": 1375759773, "metainfo": ""}