{"sha": "21df384f15ea3a456b38e43b0dd613fa11025383", "log": "finish override logic and split test logic up", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java\n         if (anns != null) {\n             List<Annotation[]> bundles = null;\n             for (Annotation ann : anns) { // first: direct annotations\n-                if (_isAnnotationBundle(ann)) {\n+                // note: we will NOT filter out non-Jackson anns any more\n+                boolean wasModified = target.addOrOverride(ann);\n+                if (wasModified && _isAnnotationBundle(ann)) {\n                     if (bundles == null) {\n                         bundles = new LinkedList<Annotation[]>();\n                     }\n                     bundles.add(ann.annotationType().getDeclaredAnnotations());\n-                } else { // note: no filtering by jackson-annotations\n-                    target.addOrOverride(ann);\n                 }\n             }\n             if (bundles != null) { // and then bundles, if any: important for precedence\n--- a/src/test/java/com/fasterxml/jackson/databind/introspect/TestAnnotionBundles.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/introspect/TestAnnotionBundles.java\n     @Retention(RetentionPolicy.RUNTIME)\n     static @interface HolderB {}\n \n-    static class HolderHolder {\n-        @HolderA\n-        @InformativeHolder\n-        public int unimportant = 42;\n+    static class RecursiveHolder {\n+        @HolderA public int unimportant = 42;\n     }\n \n     @JsonProperty\n     static @interface InformativeHolder {\n         // doesn't really contribute to the test, but would be impossible without this feature\n         boolean important() default true;\n+    }\n+\n+    static class InformingHolder {\n+        @InformativeHolder public int unimportant = 42;\n     }\n \n     static class BundleAnnotationIntrospector extends JacksonAnnotationIntrospector {\n     public void testKeepAnnotationBundle() throws Exception\n     {\n         MAPPER.setAnnotationIntrospector(new BundleAnnotationIntrospector());\n-        assertEquals(\"{\\\"important\\\":42}\", MAPPER.writeValueAsString(new HolderHolder()));\n+        assertEquals(\"{\\\"important\\\":42}\", MAPPER.writeValueAsString(new InformingHolder()));\n     }\n \n     public void testRecursiveBundles() throws Exception\n     {\n-        assertEquals(\"{\\\"unimportant\\\":42}\", MAPPER.writeValueAsString(new HolderHolder()));\n+        assertEquals(\"{\\\"unimportant\\\":42}\", MAPPER.writeValueAsString(new RecursiveHolder()));\n     }\n \n     public void testBundledIgnore() throws Exception", "timestamp": 1408145855, "metainfo": ""}