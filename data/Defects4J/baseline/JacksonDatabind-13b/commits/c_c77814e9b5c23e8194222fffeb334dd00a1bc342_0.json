{"sha": "c77814e9b5c23e8194222fffeb334dd00a1bc342", "log": "add unit tests to drill down to #234", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypeNames.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypeNames.java\n         input.put(\"ama\", new Dog(\"Amadeus\", 13));\n         String json = m.writeValueAsString(input);\n         AnimalMap output = m.readValue(json, AnimalMap.class);\n-        assertEquals(input, output);\n+        assertNotNull(output);\n+        assertEquals(AnimalMap.class, output.getClass());\n+        assertEquals(input.size(), output.size());\n+\n+        // for some reason, straight comparison won't work...\n+        for (String name : input.keySet()) {\n+            Animal in = input.get(name);\n+            Animal out = output.get(name);\n+            if (!in.equals(out)) {\n+                fail(\"Animal in input was [\"+in+\"]; output not matching: [\"+out+\"]\");\n+            }\n+        }\n     }\n }\n \n         return name.equals(((Animal) o).name);\n     }\n \n+    @Override\n+    public String toString() {\n+        return getClass().toString() + \"('\"+name+\"')\";\n+    }\n }\n \n class Dog extends Animal\n     public boolean equals(Object o) {\n         return super.equals(o) && ((Cat) o).purrs == purrs;\n     }\n+\n+    @Override\n+    public String toString() {\n+        return super.toString()+\"(purrs: \"+purrs+\")\";\n+    }\n }\n \n /* uses default name (\"MaineCoon\") since there's no @JsonTypeName,\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestIssue234.java\n+package com.fasterxml.jackson.failing;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.fasterxml.jackson.databind.*;\n+\n+public class TestIssue234 extends BaseMapTest\n+{\n+    static class ItemList {\n+        public String value;\n+        public List<ItemList> childItems = new LinkedList<ItemList>();\n+\n+        public void addChildItem(ItemList l) { childItems.add(l); }\n+    }\n+\n+    static class ItemMap\n+    {\n+        public String value;\n+\n+        public Map<String, List<ItemMap>> childItems = new HashMap<String, List<ItemMap>>();\n+\n+        public void addChildItem(String key, ItemMap childItem) {\n+          List<ItemMap> items;\n+          if (childItems.containsKey(key)) {\n+              items = childItems.get(key);\n+          } else {\n+              items = new ArrayList<ItemMap>();\n+          }\n+          items.add(childItem);\n+          childItems.put(key, items);\n+        }\n+    }\n+\n+    /*\n+    public void testList() throws Exception {\n+        String json = getMapper().writerWithDefaultPrettyPrinter().writeValueAsString(generateItemList());\n+System.out.println(\"ItemList as JSON:\\n\" +json);\n+        Object o = getMapper().readValue(json, ItemList.class);\n+        assertNotNull(o);\n+    }\n+    */\n+\n+    public void testMap() throws Exception {\n+        String json = getMapper().writerWithDefaultPrettyPrinter().writeValueAsString(generateItemMap());\n+System.out.println(\"ItemMap as JSON:\\n\"+json);\n+        Object o = getMapper().readValue(json, ItemMap.class);\n+        assertNotNull(o);\n+    }\n+    /*\n+    */\n+\n+    static ItemList generateItemList() {\n+        ItemList child = new ItemList();\n+        child.value = \"I am child\";\n+\n+        ItemList parent = new ItemList();\n+        parent.value = \"I am parent\";\n+        parent.addChildItem(child);\n+        return parent;\n+    }\n+\n+    static ItemMap generateItemMap() {\n+        ItemMap child = new ItemMap();\n+        child.value = \"I am child\";\n+\n+        ItemMap parent = new ItemMap();\n+        parent.value = \"I am parent\";\n+        parent.addChildItem(\"child\", child);\n+        return parent;\n+    }\n+\n+    static ObjectMapper getMapper() {\n+        final ObjectMapper objectMapper = new ObjectMapper();\n+        objectMapper.enableDefaultTyping(\n+//                ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE,\n+                ObjectMapper.DefaultTyping.NON_FINAL,\n+                JsonTypeInfo.As.PROPERTY);\n+//                JsonTypeInfo.As.WRAPPER_ARRAY);\n+        return objectMapper;\n+     }\n+}", "timestamp": 1376362937, "metainfo": ""}