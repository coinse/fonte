{"sha": "6997ce367c941c52774377324197fb0a1896c439", "log": "Fix the last problem wrt contextual deserialization; back to fully working again", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n             throws IOException, JsonProcessingException\n     {\n         DeserializationConfig config = getDeserializationConfig();\n-        DeserializationContext ctxt = _createDeserializationContext(jp, config);\n+        DeserializationContext ctxt = createDeserializationContext(jp, config);\n         JsonDeserializer<?> deser = _findRootDeserializer(ctxt, valueType);\n         // false -> do NOT close JsonParser (since caller passed it)\n         return new MappingIterator<T>(valueType, jp, ctxt, deser,\n      */\n     public boolean canDeserialize(JavaType type)\n     {\n-        DeserializationContext ctxt = _createDeserializationContext(null,\n+        DeserializationContext ctxt = createDeserializationContext(null,\n                 getDeserializationConfig());\n         return _deserializerCache.hasValueDeserializerFor(ctxt, type);\n     }\n             final DeserializationConfig deserConfig = getDeserializationConfig();\n             JsonToken t = _initForReading(jp);\n             if (t == JsonToken.VALUE_NULL) {\n-                DeserializationContext ctxt = _createDeserializationContext(jp, deserConfig);\n+                DeserializationContext ctxt = createDeserializationContext(jp, deserConfig);\n                 result = _findRootDeserializer(ctxt, toValueType).getNullValue();\n             } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                 result = null;\n             } else { // pointing to event other than null\n-                DeserializationContext ctxt = _createDeserializationContext(jp, deserConfig);\n+                DeserializationContext ctxt = createDeserializationContext(jp, deserConfig);\n                 JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, toValueType);\n                 // note: no handling of unwarpping\n                 result = deser.deserialize(jp, ctxt);\n     /* Internal methods for deserialization, overridable\n     /**********************************************************\n      */\n+\n+    /**\n+     * Internal helper method called to create an instance of {@link DeserializationContext}\n+     * for deserializing a single root value.\n+     * Can be overridden if a custom context is needed.\n+     */\n+    protected DeserializationContext createDeserializationContext(JsonParser jp,\n+            DeserializationConfig cfg)\n+    {\n+        return new DeserializationContext(cfg, jp, _deserializerCache,\n+                _injectableValues);\n+    }\n     \n     /**\n      * Actual implementation of value reading+binding operation.\n         JsonToken t = _initForReading(jp);\n         if (t == JsonToken.VALUE_NULL) {\n             // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n-            DeserializationContext ctxt = _createDeserializationContext(jp, cfg);\n+            DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n             result = _findRootDeserializer(ctxt, valueType).getNullValue();\n         } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n             result = null;\n         } else { // pointing to event other than null\n-            DeserializationContext ctxt = _createDeserializationContext(jp, cfg);\n+            DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n             JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n             // ok, let's get the value\n             if (cfg.useRootWrapping()) {\n             JsonToken t = _initForReading(jp);\n             if (t == JsonToken.VALUE_NULL) {\n                 // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:\n-                DeserializationContext ctxt = _createDeserializationContext(jp,\n+                DeserializationContext ctxt = createDeserializationContext(jp,\n                         getDeserializationConfig());\n                 result = _findRootDeserializer(ctxt, valueType).getNullValue();\n             } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                 result = null;\n             } else {\n                 DeserializationConfig cfg = getDeserializationConfig();\n-                DeserializationContext ctxt = _createDeserializationContext(jp, cfg);\n+                DeserializationContext ctxt = createDeserializationContext(jp, cfg);\n                 JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\n                 if (cfg.useRootWrapping()) {\n                     result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n         _rootDeserializers.put(valueType, deser);\n         return deser;\n     }\n-\n-    protected DeserializationContext _createDeserializationContext(JsonParser jp, DeserializationConfig cfg)\n-    {\n-        return new DeserializationContext(cfg, jp, _deserializerCache,\n-                _injectableValues);\n-    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n     public <T> MappingIterator<T> readValues(JsonParser jp)\n         throws IOException, JsonProcessingException\n     {\n-        DeserializationContext ctxt = _createDeserializationContext(jp, _config);\n+        DeserializationContext ctxt = createDeserializationContext(jp, _config);\n         // false -> do not close as caller gave parser instance\n         return new MappingIterator<T>(_valueType, jp, ctxt,\n                 _findRootDeserializer(ctxt, _valueType),\n         if (_schema != null) {\n             jp.setSchema(_schema);\n         }\n-        DeserializationContext ctxt = _createDeserializationContext(jp, _config);\n+        DeserializationContext ctxt = createDeserializationContext(jp, _config);\n         return new MappingIterator<T>(_valueType, jp, ctxt, \n                 _findRootDeserializer(ctxt, _valueType),\n                 true, _valueToUpdate);\n         if (_schema != null) {\n             jp.setSchema(_schema);\n         }\n-        DeserializationContext ctxt = _createDeserializationContext(jp, _config);\n+        DeserializationContext ctxt = createDeserializationContext(jp, _config);\n         return new MappingIterator<T>(_valueType, jp, ctxt,\n                 _findRootDeserializer(ctxt, _valueType), true, _valueToUpdate);\n     }\n         if (_schema != null) {\n             jp.setSchema(_schema);\n         }\n-        DeserializationContext ctxt = _createDeserializationContext(jp, _config);\n+        DeserializationContext ctxt = createDeserializationContext(jp, _config);\n         return new MappingIterator<T>(_valueType, jp, ctxt,\n                 _findRootDeserializer(ctxt, _valueType), true, _valueToUpdate);\n     }\n         if (_schema != null) {\n             jp.setSchema(_schema);\n         }\n-        DeserializationContext ctxt = _createDeserializationContext(jp, _config);\n+        DeserializationContext ctxt = createDeserializationContext(jp, _config);\n         return new MappingIterator<T>(_valueType, jp, ctxt,\n                 _findRootDeserializer(ctxt, _valueType), true, _valueToUpdate);\n     }\n         if (_schema != null) {\n             jp.setSchema(_schema);\n         }\n-        DeserializationContext ctxt = _createDeserializationContext(jp, _config);\n+        DeserializationContext ctxt = createDeserializationContext(jp, _config);\n         return new MappingIterator<T>(_valueType, jp, ctxt,\n                 _findRootDeserializer(ctxt, _valueType), true, _valueToUpdate);\n     }\n         if (_schema != null) {\n             jp.setSchema(_schema);\n         }\n-        DeserializationContext ctxt = _createDeserializationContext(jp, _config);\n+        DeserializationContext ctxt = createDeserializationContext(jp, _config);\n         return new MappingIterator<T>(_valueType, jp, ctxt,\n                 _findRootDeserializer(ctxt, _valueType), true, _valueToUpdate);\n     }\n     \n     /*\n     /**********************************************************\n+    /* Helper methods, overridable\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Internal helper method called to create an instance of {@link DeserializationContext}\n+     * for deserializing a single root value.\n+     * Can be overridden if a custom context is needed.\n+     */\n+    protected DeserializationContext createDeserializationContext(JsonParser jp,\n+            DeserializationConfig cfg) {\n+        // 04-Jan-2010, tatu: we do actually need the provider too... (for polymorphic deser)\n+        return new DeserializationContext(cfg, jp, _deserializerCache, _injectableValues);\n+    }\n+\n+    /*\n+    /**********************************************************\n     /* Helper methods\n     /**********************************************************\n      */\n-\n+    \n     /**\n      * Actual implementation of value reading+binding operation.\n      */\n         JsonToken t = _initForReading(jp);\n         if (t == JsonToken.VALUE_NULL) {\n             if (_valueToUpdate == null) {\n-                DeserializationContext ctxt = _createDeserializationContext(jp, _config);\n+                DeserializationContext ctxt = createDeserializationContext(jp, _config);\n                 result = _findRootDeserializer(ctxt, _valueType).getNullValue();\n             } else {\n                 result = _valueToUpdate;\n         } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n             result = _valueToUpdate;\n         } else { // pointing to event other than null\n-            DeserializationContext ctxt = _createDeserializationContext(jp, _config);\n+            DeserializationContext ctxt = createDeserializationContext(jp, _config);\n             JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, _valueType);\n             if (_unwrapRoot) {\n                 result = _unwrapAndDeserialize(jp, ctxt, _valueType, deser);\n             JsonToken t = _initForReading(jp);\n             if (t == JsonToken.VALUE_NULL) {\n                 if (_valueToUpdate == null) {\n-                    DeserializationContext ctxt = _createDeserializationContext(jp, _config);\n+                    DeserializationContext ctxt = createDeserializationContext(jp, _config);\n                     result = _findRootDeserializer(ctxt, _valueType).getNullValue();\n                 } else {\n                     result = _valueToUpdate;\n             } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n                 result = _valueToUpdate;\n             } else {\n-                DeserializationContext ctxt = _createDeserializationContext(jp, _config);\n+                DeserializationContext ctxt = createDeserializationContext(jp, _config);\n                 JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, _valueType);\n                 if (_unwrapRoot) {\n                     result = _unwrapAndDeserialize(jp, ctxt, _valueType, deser);\n         if (t == JsonToken.VALUE_NULL || t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {\n             result = NullNode.instance;\n         } else {\n-            DeserializationContext ctxt = _createDeserializationContext(jp, _config);\n+            DeserializationContext ctxt = createDeserializationContext(jp, _config);\n             JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, JSON_NODE_TYPE);\n             if (_unwrapRoot) {\n                 result = (JsonNode) _unwrapAndDeserialize(jp, ctxt, JSON_NODE_TYPE, deser);\n         _rootDeserializers.put(valueType, deser);\n         return deser;\n     }\n-    \n-    protected DeserializationContext _createDeserializationContext(JsonParser jp, DeserializationConfig cfg) {\n-        // 04-Jan-2010, tatu: we do actually need the provider too... (for polymorphic deser)\n-        return new DeserializationContext(cfg, jp, _deserializerCache, _injectableValues);\n-    }\n \n     protected Object _unwrapAndDeserialize(JsonParser jp, DeserializationContext ctxt,\n             JavaType rootType, JsonDeserializer<Object> deser)\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n             // May already have deserializer from annotations, if so, skip:\n             if (!prop.hasValueDeserializer()) {\n                 prop = prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n+            } else { // may need contextual version\n+                JsonDeserializer<Object> deser = prop.getValueDeserializer();\n+                if (deser instanceof ContextualDeserializer) {\n+                    JsonDeserializer<?> cd = ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n+                    if (cd != deser) {\n+                        prop = prop.withValueDeserializer(cd);\n+                    }\n+                }\n             }\n             // [JACKSON-235]: need to link managed references with matching back references\n             prop = _resolveManagedReferenceProperty(ctxt, prop);\n         } else if (valueDeser instanceof ContainerDeserializerBase<?>) {\n             JsonDeserializer<?> contentDeser = ((ContainerDeserializerBase<?>) valueDeser).getContentDeserializer();\n             if (!(contentDeser instanceof BeanDeserializer)) {\n+                String deserName = (contentDeser == null) ? \"NULL\" : contentDeser.getClass().getName();\n                 throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n                         +\"': value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \"\n-                        +\" (instead it's of type \"+contentDeser.getClass().getName()+\")\");\n+                        +\" (instead it's of type \"+deserName+\")\");\n             }\n             backProp = ((BeanDeserializer) contentDeser).findBackReference(refName);\n             isContainer = true;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java\n         _injectableValueId = src._injectableValueId;\n     }\n     \n-    protected CreatorProperty(CreatorProperty src, JsonDeserializer<Object> deser) {\n+    protected CreatorProperty(CreatorProperty src, JsonDeserializer<?> deser) {\n         super(src, deser);\n         _annotated = src._annotated;\n         _injectableValueId = src._injectableValueId;\n     }\n     \n     @Override\n-    public CreatorProperty withValueDeserializer(JsonDeserializer<Object> deser) {\n+    public CreatorProperty withValueDeserializer(JsonDeserializer<?> deser) {\n         return new CreatorProperty(this, deser);\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n     /**\n      * Copy-with-deserializer-change constructor for sub-classes to use.\n      */\n-    protected SettableBeanProperty(SettableBeanProperty src, JsonDeserializer<Object> deser)\n+    @SuppressWarnings(\"unchecked\")\n+    protected SettableBeanProperty(SettableBeanProperty src, JsonDeserializer<?> deser)\n     {\n         _propName = src._propName;\n         _type = src._type;\n         _managedReferenceName = src._managedReferenceName;\n         _propertyIndex = src._propertyIndex;\n \n-        _valueDeserializer = deser;\n+        _valueDeserializer = (JsonDeserializer<Object>) deser;\n         if (deser == null) {\n             _nullProvider = null;\n         } else {\n         _viewMatcher = src._viewMatcher;\n     }\n     \n-    public abstract SettableBeanProperty withValueDeserializer(JsonDeserializer<Object> deser);\n+    public abstract SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser);\n \n     public abstract SettableBeanProperty withName(String newName);\n     \n             _setter = method.getAnnotated();\n         }\n \n-        protected MethodProperty(MethodProperty src, JsonDeserializer<Object> deser) {\n+        protected MethodProperty(MethodProperty src, JsonDeserializer<?> deser) {\n             super(src, deser);\n             _annotated = src._annotated;\n             _setter = src._setter;\n         }\n         \n         @Override\n-        public MethodProperty withValueDeserializer(JsonDeserializer<Object> deser) {\n+        public MethodProperty withValueDeserializer(JsonDeserializer<?> deser) {\n             return new MethodProperty(this, deser);\n         }\n         \n             _getter = method.getAnnotated();\n         }\n \n-        protected SetterlessProperty(SetterlessProperty src, JsonDeserializer<Object> deser) {\n+        protected SetterlessProperty(SetterlessProperty src, JsonDeserializer<?> deser) {\n             super(src, deser);\n             _annotated = src._annotated;\n             _getter = src._getter;\n         }\n         \n         @Override\n-        public SetterlessProperty withValueDeserializer(JsonDeserializer<Object> deser) {\n+        public SetterlessProperty withValueDeserializer(JsonDeserializer<?> deser) {\n             return new SetterlessProperty(this, deser);\n         }\n         \n             _field = field.getAnnotated();\n         }\n \n-        protected FieldProperty(FieldProperty src, JsonDeserializer<Object> deser) {\n+        protected FieldProperty(FieldProperty src, JsonDeserializer<?> deser) {\n             super(src, deser);\n             _annotated = src._annotated;\n             _field = src._field;\n         }\n         \n         @Override\n-        public FieldProperty withValueDeserializer(JsonDeserializer<Object> deser) {\n+        public FieldProperty withValueDeserializer(JsonDeserializer<?> deser) {\n             return new FieldProperty(this, deser);\n         }\n         \n             _isContainer = isContainer;\n         }\n \n-        protected ManagedReferenceProperty(ManagedReferenceProperty src, JsonDeserializer<Object> deser)\n+        protected ManagedReferenceProperty(ManagedReferenceProperty src, JsonDeserializer<?> deser)\n         {\n             super(src, deser);\n             _referenceName = src._referenceName;\n         }\n         \n         @Override\n-        public ManagedReferenceProperty withValueDeserializer(JsonDeserializer<Object> deser) {\n+        public ManagedReferenceProperty withValueDeserializer(JsonDeserializer<?> deser) {\n             return new ManagedReferenceProperty(this, deser);\n         }\n         \n             _creator = ctor;\n         }\n \n-        protected InnerClassProperty(InnerClassProperty src, JsonDeserializer<Object> deser)\n+        protected InnerClassProperty(InnerClassProperty src, JsonDeserializer<?> deser)\n         {\n             super(src, deser);\n             _delegate = src._delegate.withValueDeserializer(deser);\n         }\n \n         @Override\n-        public InnerClassProperty withValueDeserializer(JsonDeserializer<Object> deser) {\n+        public InnerClassProperty withValueDeserializer(JsonDeserializer<?> deser) {\n             return new InnerClassProperty(this, deser);\n         }\n         \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n      * Fluent-factory method call to construct contextual instance.\n      */\n     @SuppressWarnings(\"unchecked\")\n-    protected CollectionDeserializer withResolved(JsonDeserializer<?> delegateDeser,\n-            JsonDeserializer<?> valueDeser, TypeDeserializer valueTypeDeser)\n-    {\n+    protected CollectionDeserializer withResolved(JsonDeserializer<?> dd,\n+            JsonDeserializer<?> vd, TypeDeserializer vtd)\n+    {\n+        if ((dd == _delegateDeserializer) && (vd == _valueDeserializer) && (vtd == _valueTypeDeserializer)) {\n+            return this;\n+        }\n         return new CollectionDeserializer(_collectionType,\n-                (JsonDeserializer<Object>) valueDeser, valueTypeDeser,\n-                _valueInstantiator, (JsonDeserializer<Object>) delegateDeser);\n+                (JsonDeserializer<Object>) vd, vtd,\n+                _valueInstantiator, (JsonDeserializer<Object>) dd);\n                 \n     }\n     \n             delegateDeser = findDeserializer(ctxt, delegateType, property);\n         }\n         // also, often value deserializer is resolved here:\n-        JsonDeserializer<Object> valueDeser = _valueDeserializer;\n+        JsonDeserializer<?> valueDeser = _valueDeserializer;\n         if (valueDeser == null) {\n-            valueDeser = (JsonDeserializer<Object>)ctxt.findContextualValueDeserializer(\n+            valueDeser = ctxt.findContextualValueDeserializer(\n                     _collectionType.getContentType(), property);\n+        } else { // if directly assigned, probably not yet contextual, so:\n+            if (valueDeser instanceof ContextualDeserializer) {\n+                valueDeser = ((ContextualDeserializer) valueDeser).createContextual(ctxt, property);\n+            }\n         }\n         // and finally, type deserializer needs context as well\n         TypeDeserializer valueTypeDeser = _valueTypeDeserializer;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java\n     }\n \n     public EnumMapDeserializer withResolved(JsonDeserializer<?> keyDeserializer,\n-            JsonDeserializer<?> valueDeserializer) {\n+            JsonDeserializer<?> valueDeserializer)\n+    {\n+        if ((keyDeserializer == _keyDeserializer) && valueDeserializer == _valueDeserializer) {\n+            return this;\n+        }\n         return new EnumMapDeserializer(_mapType,\n                 keyDeserializer, valueDeserializer);\n     }\n     public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n             BeanProperty property) throws JsonMappingException\n     {\n-        // already good as is? No change then\n-        if (_keyDeserializer != null && _valueDeserializer != null) {\n-            return this;\n-        }\n-\n         // note: instead of finding key deserializer, with enums we actually\n         // work with regular deserializers (less code duplication; but not\n         // quite as clean as it ought to be)\n         JsonDeserializer<?> vd = _valueDeserializer;\n         if (vd == null) {\n             vd = ctxt.findContextualValueDeserializer(_mapType.getContentType(), property);\n+        } else { // if directly assigned, probably not yet contextual, so:\n+            if (vd instanceof ContextualDeserializer) {\n+                vd = ((ContextualDeserializer) vd).createContextual(ctxt, property);\n+            }\n         }\n+\n         return withResolved(kd, vd);\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java\n     }\n \n     public EnumSetDeserializer withDeserializer(JsonDeserializer<?> deser) {\n+        if (_enumDeserializer == deser) {\n+            return this;\n+        }\n         return new EnumSetDeserializer(_enumType, deser);\n     }\n     \n     public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n             BeanProperty property) throws JsonMappingException\n     {\n-        if (_enumDeserializer != null) {\n-            return this;\n+        JsonDeserializer<?> deser = _enumDeserializer;\n+        if (deser == null) {\n+            deser = ctxt.findContextualValueDeserializer(_enumType, property);\n+        } else { // if directly assigned, probably not yet contextual, so:\n+            if (deser instanceof ContextualDeserializer) {\n+                deser = ((ContextualDeserializer) deser).createContextual(ctxt, property);\n+            }\n         }\n-        return withDeserializer(ctxt.findContextualValueDeserializer(_enumType, property));\n+        return withDeserializer(deser);\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n      * different settings. When sub-classing, MUST be overridden.\n      */\n     @SuppressWarnings(\"unchecked\")\n-    protected MapDeserializer withResolved(KeyDeserializer keyDeser, JsonDeserializer<?> valueDeser,\n-            TypeDeserializer valueTypeDeser)\n-    {\n+    protected MapDeserializer withResolved(KeyDeserializer keyDeser,\n+            TypeDeserializer valueTypeDeser, JsonDeserializer<?> valueDeser)\n+    {\n+        if ((_keyDeserializer == keyDeser) && (_valueDeserializer == valueDeser) && (_valueTypeDeserializer == valueTypeDeser)) {\n+            return this;\n+        }\n         return new MapDeserializer(this,\n                 keyDeser, (JsonDeserializer<Object>) valueDeser, valueTypeDeser);\n     }\n         KeyDeserializer kd = _keyDeserializer;\n         if (kd == null) {\n             kd = ctxt.findKeyDeserializer(_mapType.getKeyType(), property);\n-        }\n-        JsonDeserializer<Object> vd = _valueDeserializer;\n+        } else {\n+            if (kd instanceof ContextualKeyDeserializer) {\n+                kd = ((ContextualKeyDeserializer) kd).createContextual(ctxt, property);\n+            }\n+        }\n+        JsonDeserializer<?> vd = _valueDeserializer;\n         if (vd == null) {\n             vd = ctxt.findContextualValueDeserializer(_mapType.getContentType(), property);\n+        } else { // if directly assigned, probably not yet contextual, so:\n+            if (vd instanceof ContextualDeserializer) {\n+                vd = ((ContextualDeserializer) vd).createContextual(ctxt, property);\n+            }\n         }\n         TypeDeserializer vtd = _valueTypeDeserializer;\n         if (vtd != null) {\n             vtd = vtd.forProperty(property);\n         }\n-        return withResolved(kd, vd, vtd);\n+        return withResolved(kd, vtd, vd);\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java\n      * Overridable fluent-factory method used to create contextual instances\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public ObjectArrayDeserializer withDeserializer(JsonDeserializer<?> elemDeser,\n-            TypeDeserializer elemTypeDeser) {\n+    public ObjectArrayDeserializer withDeserializer(TypeDeserializer elemTypeDeser,\n+            JsonDeserializer<?> elemDeser)\n+    {\n+        if ((elemDeser == _elementDeserializer) && (elemTypeDeser == _elementTypeDeserializer)) {\n+            return this;\n+        }\n         return new ObjectArrayDeserializer(_arrayType,\n                 (JsonDeserializer<Object>) elemDeser, elemTypeDeser);\n     }\n     public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n             BeanProperty property) throws JsonMappingException\n     {\n-        JsonDeserializer<Object> deser = _elementDeserializer;\n-        if (deser != null) {\n-            return this;\n+        JsonDeserializer<?> deser = _elementDeserializer;\n+        if (deser == null) {\n+            deser = ctxt.findContextualValueDeserializer(_arrayType.getContentType(), property);\n+        } else { // if directly assigned, probably not yet contextual, so:\n+            if (deser instanceof ContextualDeserializer) {\n+                deser = ((ContextualDeserializer) deser).createContextual(ctxt, property);\n+            }\n         }\n         TypeDeserializer elemTypeDeser = _elementTypeDeserializer;\n         if (elemTypeDeser != null) {\n             elemTypeDeser = elemTypeDeser.forProperty(property);\n         }\n-        return withDeserializer(ctxt.findContextualValueDeserializer(\n-                _arrayType.getContentType(), property), elemTypeDeser);\n+        return withDeserializer(elemTypeDeser, deser);\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n     /**********************************************************\n      */\n     \n-    @SuppressWarnings(\"unchecked\")\n     public StringCollectionDeserializer(JavaType collectionType,\n             JsonDeserializer<?> valueDeser, ValueInstantiator valueInstantiator)\n     {\n-        this(collectionType, (JsonDeserializer<String>) valueDeser,\n-                valueInstantiator, null);\n-    }\n-\n+        this(collectionType, valueInstantiator, null, valueDeser);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n     protected StringCollectionDeserializer(JavaType collectionType,\n-            JsonDeserializer<String> valueDeser, ValueInstantiator valueInstantiator,\n-            JsonDeserializer<Object> delegateDeser)\n+            ValueInstantiator valueInstantiator, JsonDeserializer<?> delegateDeser,\n+            JsonDeserializer<?> valueDeser)\n     {\n         super(collectionType.getRawClass());\n         _collectionType = collectionType;\n-        _valueDeserializer = valueDeser;\n+        _valueDeserializer = (JsonDeserializer<String>) valueDeser;\n         _valueInstantiator = valueInstantiator;\n-        _delegateDeserializer = delegateDeser;\n+        _delegateDeserializer = (JsonDeserializer<Object>) delegateDeser;\n+    }\n+\n+    protected StringCollectionDeserializer withResolved(JsonDeserializer<?> delegateDeser,\n+            JsonDeserializer<?> valueDeser)\n+    {\n+        if ((_valueDeserializer == valueDeser) && (_delegateDeserializer == delegateDeser)) {\n+            return this;\n+        }\n+        return new StringCollectionDeserializer(_collectionType,\n+                _valueInstantiator, delegateDeser, valueDeser);\n     }\n     \n     /*\n             JsonDeserializer<?> deser = ctxt.findContextualValueDeserializer(\n                     _collectionType.getContentType(), property);\n             valueDeser = (JsonDeserializer<String>) deser;\n-            if (isDefaultDeserializer(valueDeser)) {\n-                valueDeser = null;\n+        } else { // if directly assigned, probably not yet contextual, so:\n+            if (valueDeser instanceof ContextualDeserializer) {\n+                valueDeser = ((ContextualDeserializer) valueDeser).createContextual(ctxt, property);\n             }\n-        }\n-        return new StringCollectionDeserializer(_collectionType,\n-                (JsonDeserializer<String>)valueDeser, _valueInstantiator, delegate);\n+        } \n+        if (isDefaultDeserializer(valueDeser)) {\n+            valueDeser = null;\n+        }\n+        return withResolved(delegate, valueDeser);\n     }\n     \n     /*", "timestamp": 1328053833, "metainfo": ""}