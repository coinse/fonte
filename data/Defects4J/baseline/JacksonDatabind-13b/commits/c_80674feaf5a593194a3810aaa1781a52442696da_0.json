{"sha": "80674feaf5a593194a3810aaa1781a52442696da", "log": "Minor fixes to support inclusion criteria for attribute-backed props", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n \n import java.util.Iterator;\n \n+import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.util.EmptyIterator;\n import com.fasterxml.jackson.databind.util.Named;\n      * fail deserialization), or handled by other means (by providing default\n      * value)\n      */\n-    public final boolean isRequired() {\n+    public boolean isRequired() {\n         PropertyMetadata md = getMetadata();\n         return (md != null)  && md.isRequired();\n     }\n+\n+    /**\n+     * Method used to check if this property has specific inclusion override\n+     * associated with it or not.\n+     * \n+     * @since 2.5\n+     */\n+    public JsonInclude.Include findInclusion() {\n+        return null;\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n                     attrName, propType.getRawClass());\n             // and with that and property definition\n             SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(config,\n-                    member, propName, metadata);\n+                    member, propName, metadata, attr.include());\n             // can construct the property writer\n             properties.add(AttributePropertyWriter.construct(attrName, propDef,\n-                    ac.getAnnotations(), propType, attr.include()));\n+                    ac.getAnnotations(), propType));\n         }\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n \n import java.util.*;\n \n+import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.util.EmptyIterator;\n \n \n     protected Linked<AnnotatedMethod> _setters;\n \n-    public POJOPropertyBuilder(PropertyName internalName, AnnotationIntrospector ai, boolean forSerialization) {\n+    public POJOPropertyBuilder(PropertyName internalName, AnnotationIntrospector ai,\n+            boolean forSerialization) {\n         this(internalName, internalName, ai, forSerialization);\n     }\n \n             }\n         });\n     }\n-    \n+\n+    @Override\n+    public JsonInclude.Include findInclusion() {\n+        if (_annotationIntrospector == null) {\n+            return null;\n+        }\n+        AnnotatedMember am = getAccessor();\n+        return _annotationIntrospector.findSerializationInclusion(am, null);\n+    }\n+\n     /*\n     /**********************************************************\n     /* Data aggregation\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java\n {\n     final protected SerializationConfig _config;\n     final protected BeanDescription _beanDesc;\n-    final protected JsonInclude.Include _outputProps;\n+\n+    /**\n+     * Default inclusion mode for properties of the POJO for which\n+     * properties are collected; possibly overridden on\n+     * per-property basis.\n+     */\n+    final protected JsonInclude.Include _defaultInclusion;\n \n     final protected AnnotationIntrospector _annotationIntrospector;\n \n     {\n         _config = config;\n         _beanDesc = beanDesc;\n-        _outputProps = beanDesc.findSerializationInclusion(config.getSerializationInclusion());\n+        _defaultInclusion = beanDesc.findSerializationInclusion(config.getSerializationInclusion());\n         _annotationIntrospector = _config.getAnnotationIntrospector();\n     }\n \n         Object valueToSuppress = null;\n         boolean suppressNulls = false;\n \n-        JsonInclude.Include methodProps = _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n-        if (methodProps != null) {\n-            switch (methodProps) {\n+        JsonInclude.Include inclusion = propDef.findInclusion();\n+        if (inclusion == null) {\n+            inclusion = _defaultInclusion;\n+        }\n+        if (inclusion != null) {\n+            switch (inclusion) {\n             case NON_DEFAULT:\n                 valueToSuppress = getDefaultValue(propDef.getName(), am);\n                 if (valueToSuppress == null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/AttributePropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/AttributePropertyWriter.java\n package com.fasterxml.jackson.databind.ser.impl;\n \n import com.fasterxml.jackson.annotation.JsonInclude;\n-\n import com.fasterxml.jackson.core.JsonGenerator;\n-\n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\n+import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n import com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter;\n import com.fasterxml.jackson.databind.util.Annotations;\n \n      */\n \n     protected AttributePropertyWriter(String attrName, BeanPropertyDefinition propDef,\n+            Annotations contextAnnotations, JavaType declaredType) {\n+        this(attrName, propDef, contextAnnotations, declaredType, propDef.findInclusion());\n+    }\n+\n+    protected AttributePropertyWriter(String attrName, BeanPropertyDefinition propDef,\n             Annotations contextAnnotations, JavaType declaredType,\n             JsonInclude.Include inclusion)\n     {\n         super(propDef, contextAnnotations, declaredType,\n                 /* value serializer */ null, /* type serializer */ null, /* ser type */ null,\n-                _suppressNulls(inclusion), null);\n+                _suppressNulls(inclusion), _suppressableValue(inclusion));\n         _attrName = attrName;\n     }\n \n     public static AttributePropertyWriter construct(String attrName,\n             BeanPropertyDefinition propDef,\n             Annotations contextAnnotations,\n-            JavaType declaredType, JsonInclude.Include inclusion)\n+            JavaType declaredType)\n     {\n         return new AttributePropertyWriter(attrName, propDef,\n-                contextAnnotations, declaredType, inclusion);\n+                contextAnnotations, declaredType);\n     }\n     \n     protected AttributePropertyWriter(AttributePropertyWriter base) {\n         return (inclusion != JsonInclude.Include.ALWAYS);\n     }\n \n+    protected static Object _suppressableValue(JsonInclude.Include inclusion) {\n+        if ((inclusion == JsonInclude.Include.NON_EMPTY)\n+                || (inclusion == JsonInclude.Include.NON_EMPTY)) {\n+            return MARKER_FOR_EMPTY;\n+        }\n+        return null;\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Overrides for actual serialization, value access\n--- a/src/main/java/com/fasterxml/jackson/databind/util/SimpleBeanPropertyDefinition.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/SimpleBeanPropertyDefinition.java\n import java.util.Collections;\n import java.util.Iterator;\n \n+import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n import com.fasterxml.jackson.databind.PropertyMetadata;\n import com.fasterxml.jackson.databind.PropertyName;\n     protected final PropertyName _fullName;\n     \n     /**\n+     * @since 2.5\n+     */\n+    protected final JsonInclude.Include _inclusion;\n+    \n+    /**\n      * @deprecated Since 2.5 use <code>_fullName</code> instead.\n      */\n     @Deprecated\n      */\n     @Deprecated\n     public SimpleBeanPropertyDefinition(AnnotatedMember member, String name) {\n-        this(member, new PropertyName(name), null, null);\n+        this(member, new PropertyName(name), null, null, null);\n     }\n \n     protected SimpleBeanPropertyDefinition(AnnotatedMember member, PropertyName fullName,\n-            AnnotationIntrospector intr, PropertyMetadata metadata)\n+            AnnotationIntrospector intr, PropertyMetadata metadata,\n+            JsonInclude.Include inclusion)\n     {\n         _introspector = intr;\n         _member = member;\n         _fullName = fullName;\n         _name = fullName.getSimpleName();\n         _metadata = (metadata == null) ? PropertyMetadata.STD_OPTIONAL: metadata;\n+        _inclusion = inclusion;\n     }\n \n     /**\n     @Deprecated\n     protected SimpleBeanPropertyDefinition(AnnotatedMember member, String name,\n     \t\tAnnotationIntrospector intr) {\n-        this(member, new PropertyName(name), intr, null);\n+        this(member, new PropertyName(name), intr, null, null);\n     }\n \n     /**\n     \t\tAnnotatedMember member) {\n         return new SimpleBeanPropertyDefinition(member, new PropertyName(member.getName()),\n                 (config == null) ? null : config.getAnnotationIntrospector(),\n-                        null);\n+                        null, null);\n     }\n     \n     /**\n     \t\tAnnotatedMember member, String name) {\n         return new SimpleBeanPropertyDefinition(member, new PropertyName(name),\n                 (config == null) ? null : config.getAnnotationIntrospector(),\n-                        null);\n+                        null, null);\n     }\n \n     /**\n      */\n     public static SimpleBeanPropertyDefinition construct(MapperConfig<?> config,\n             AnnotatedMember member, PropertyName name) {\n-        return construct(config, member, name, null);\n+        return construct(config, member, name, null, null);\n     }\n     \n     /**\n      * @since 2.5\n      */\n     public static SimpleBeanPropertyDefinition construct(MapperConfig<?> config,\n-            AnnotatedMember member, PropertyName name, PropertyMetadata metadata) {\n+            AnnotatedMember member, PropertyName name, PropertyMetadata metadata,\n+            JsonInclude.Include inclusion) {\n           return new SimpleBeanPropertyDefinition(member, name,\n                   (config == null) ? null : config.getAnnotationIntrospector(),\n-                          metadata);\n+                          metadata, inclusion);\n       }\n     \n     /*\n             return this;\n         }\n         return new SimpleBeanPropertyDefinition(_member, new PropertyName(newName),\n-                _introspector, _metadata);\n+                _introspector, _metadata, _inclusion);\n     }\n \n     @Override\n             return this;\n         }\n         return new SimpleBeanPropertyDefinition(_member, newName,\n-                _introspector, _metadata);\n-    }\n-\n+                _introspector, _metadata, _inclusion);\n+    }\n+\n+    /**\n+     * @since 2.5\n+     */\n     public BeanPropertyDefinition withMetadata(PropertyMetadata metadata) {\n         if (metadata.equals(_metadata)) {\n             return this;\n         }\n         return new SimpleBeanPropertyDefinition(_member, _fullName,\n-                _introspector, metadata);\n+                _introspector, metadata, _inclusion);\n+    }\n+\n+    /**\n+     * @since 2.5\n+     */\n+    public BeanPropertyDefinition withInclusion(JsonInclude.Include inclusion) {\n+        if (_inclusion == inclusion) {\n+            return this;\n+        }\n+        return new SimpleBeanPropertyDefinition(_member, _fullName,\n+                _introspector, _metadata, inclusion);\n     }\n     \n     /*\n     public PropertyMetadata getMetadata() {\n         return _metadata;\n     }\n-    \n+\n+    @Override\n+    public JsonInclude.Include findInclusion() {\n+        return _inclusion;\n+    }\n+\n     /*\n     /**********************************************************\n     /* Access to accessors (fields, methods etc)\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestVirtualProperties.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestVirtualProperties.java\n package com.fasterxml.jackson.databind.ser;\n \n import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n \n import com.fasterxml.jackson.databind.BaseMapTest;\n import com.fasterxml.jackson.databind.ObjectWriter;\n     enum ABC {\n         A, B, C;\n     }\n+\n+    @JsonAppend(attrs=@JsonAppend.Attr(value=\"desc\", include=JsonInclude.Include.NON_EMPTY))\n+    static class OptionalsBean\n+    {\n+        public int value = 28;\n+    }\n     \n     /*\n     /**********************************************************\n                 .writeValueAsString(new SimpleBean());\n         assertEquals(aposToQuotes(\"{'value':13,'id':'abc123','extra':{'x':3,'y':'B'}}\"), json);\n     }\n+\n+    public void testAttributePropInclusion() throws Exception\n+    {\n+        // first, with desc\n+        String json = WRITER.withAttribute(\"desc\", \"nice\")\n+                .writeValueAsString(new OptionalsBean());\n+        assertEquals(aposToQuotes(\"{'value':28,'desc':'nice'}\"), json);\n+\n+        // then with null (not defined)\n+        json = WRITER.writeValueAsString(new OptionalsBean());\n+        assertEquals(aposToQuotes(\"{'value':28}\"), json);\n+\n+        // and finally \"empty\"\n+        json = WRITER.withAttribute(\"desc\", \"\")\n+                .writeValueAsString(new OptionalsBean());\n+        assertEquals(aposToQuotes(\"{'value':28}\"), json);\n+    }\n }", "timestamp": 1417673841, "metainfo": ""}