{"sha": "84ccc5d092db6b53768d99fabfe90a8542bb2697", "log": "Merge branch 'master' of github.com:FasterXML/jackson-databind", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n     {\n         /* 09-Dec-2014, tatu: As per [#622], we need to allow Object Id references\n          *   to come in as JSON Objects as well; but for now assume they will\n-         *   be simple, single-prooerty references, which means that we can\n+         *   be simple, single-property references, which means that we can\n          *   recognize them without having to buffer anything.\n          *   Once again, if we must, we can do more complex handling with buffering,\n          *   but let's only do that if and when that becomes necessary.\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestPOJOAsArray.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestPOJOAsArray.java\n package com.fasterxml.jackson.databind.struct;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n \n import com.fasterxml.jackson.annotation.JsonFormat;\n import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import com.fasterxml.jackson.annotation.JsonFormat.Shape;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;\n         public String bar = null;\n         public String foo = \"bar\";\n     }\n-    \n+\n+    @JsonFormat(shape=JsonFormat.Shape.ARRAY)\n+    @JsonPropertyOrder(alphabetic=true)\n+    static class AsArrayWithMap\n+    {\n+        public Map<Integer,Integer> attrs;\n+\n+        public AsArrayWithMap() { }\n+        public AsArrayWithMap(int x, int y) {\n+            attrs = new HashMap<Integer,Integer>();\n+            attrs.put(x, y);\n+        }\n+    }\n+\n     /*\n     /*****************************************************\n     /* Basic tests\n         assertNotNull(result);\n         assertEquals(\"foobar\", result.name);\n     }\n-    \n+\n     /*\n     /*****************************************************\n     /* Round-trip tests\n         mapper2.setAnnotationIntrospector(new ForceArraysIntrospector());\n         assertEquals(\"[[1,2]]\", mapper2.writeValueAsString(new A()));\n     }\n+\n+    public void testWithMaps() throws Exception\n+    {\n+        AsArrayWithMap input = new AsArrayWithMap(1, 2);\n+        String json = MAPPER.writeValueAsString(input);\n+        AsArrayWithMap output = MAPPER.readValue(json, AsArrayWithMap.class);\n+        assertNotNull(output);\n+        assertNotNull(output.attrs);\n+        assertEquals(1, output.attrs.size());\n+        assertEquals(Integer.valueOf(2), output.attrs.get(1));\n+    }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestPOJOAsArrayAdvanced.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestPOJOAsArrayAdvanced.java\n package com.fasterxml.jackson.databind.struct;\n \n import com.fasterxml.jackson.annotation.*;\n-\n import com.fasterxml.jackson.databind.BaseMapTest;\n import com.fasterxml.jackson.databind.ObjectMapper;\n \n         public int b;\n         public int c;\n     }\n-    \n+\n     /*\n     /*****************************************************\n     /* Basic tests\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/PojoAsArray646Test.java\n+package com.fasterxml.jackson.failing;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonFormat;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver;\n+import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n+\n+public class PojoAsArray646Test extends BaseMapTest\n+{\n+    @JsonFormat(shape = JsonFormat.Shape.ARRAY)\n+    @JsonPropertyOrder(alphabetic = true)\n+    static class Outer {\n+\n+        private Map<String, TheItem> attributes;\n+\n+        public Outer() {\n+            attributes = new HashMap<String, TheItem>();\n+        }\n+\n+        @JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, include = JsonTypeInfo.As.WRAPPER_ARRAY)\n+        @JsonTypeIdResolver(DmTypeIdResolver.class)\n+        public Map<String, TheItem> getAttributes() {\n+            return attributes;\n+        }\n+    }\n+\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    @JsonFormat(shape = JsonFormat.Shape.ARRAY)\n+    @JsonPropertyOrder(alphabetic = true)\n+    static class TheBean {\n+        private List<TheItem> items;\n+\n+        @JsonCreator\n+        public TheBean(@JsonProperty(\"items\") List<TheItem> items) {\n+            this.items = items;\n+        }\n+\n+\n+        public List<TheItem> getItems() {\n+            return items;\n+        }\n+\n+        public void setItems(List<TheItem> items) {\n+            this.items = items;\n+        }\n+    }\n+    \n+    @JsonFormat(shape = JsonFormat.Shape.ARRAY)\n+    @JsonPropertyOrder(alphabetic = true)\n+    static class TheItem {\n+\n+        @JsonFormat(shape = JsonFormat.Shape.ARRAY)\n+        @JsonPropertyOrder(alphabetic = true)\n+        public static class NestedItem {\n+            private String nestedStrValue;\n+\n+            @JsonCreator\n+            public NestedItem(@JsonProperty(\"nestedStrValue\") String nestedStrValue) {\n+                this.nestedStrValue = nestedStrValue;\n+            }\n+\n+            public String getNestedStrValue() {\n+                return nestedStrValue;\n+            }\n+\n+            public void setNestedStrValue(String nestedStrValue) {\n+                this.nestedStrValue = nestedStrValue;\n+            }\n+        }\n+\n+        private String strValue;\n+        private boolean boolValue;\n+        private List<NestedItem> nestedItems;\n+\n+        @JsonCreator\n+        public TheItem(@JsonProperty(\"strValue\") String strValue, @JsonProperty(\"boolValue\") boolean boolValue, @JsonProperty(\"nestedItems\") List<NestedItem> nestedItems) {\n+            this.strValue = strValue;\n+            this.boolValue = boolValue;\n+            this.nestedItems = nestedItems;\n+        }\n+\n+        public String getStrValue() {\n+            return strValue;\n+        }\n+\n+        public void setStrValue(String strValue) {\n+            this.strValue = strValue;\n+        }\n+\n+        public boolean isBoolValue() {\n+            return boolValue;\n+        }\n+\n+        public void setBoolValue(boolean boolValue) {\n+            this.boolValue = boolValue;\n+        }\n+\n+        public List<NestedItem> getNestedItems() {\n+            return nestedItems;\n+        }\n+\n+        public void setNestedItems(List<NestedItem> nestedItems) {\n+            this.nestedItems = nestedItems;\n+        }\n+    }\n+\n+    static class DmTypeIdResolver implements TypeIdResolver {\n+\n+        @Override\n+        public void init(JavaType javaType) { }\n+\n+        @Override\n+        public String idFromValue(Object o) {\n+            return idFromValueAndType(o, o.getClass());\n+        }\n+\n+        @Override\n+        public String idFromValueAndType(Object o, Class<?> aClass) {\n+            return o.getClass().getName();\n+        }\n+\n+        @Override\n+        public String idFromBaseType() {\n+            throw new RuntimeException(\"Unsupported serialization case\");\n+        }\n+\n+        @Override\n+        public JavaType typeFromId(String key) {\n+            Class<?> clazz ;\n+            try {\n+                clazz = getClass().getClassLoader().loadClass(key);\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+            return TypeFactory.defaultInstance().constructType(clazz);\n+        }\n+\n+        @Override\n+        public JsonTypeInfo.Id getMechanism() {\n+            return JsonTypeInfo.Id.CUSTOM;\n+        }\n+\n+        @Override\n+        public JavaType typeFromId(DatabindContext context, String id) {\n+            return typeFromId(id);\n+        }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Tests\n+    /**********************************************************\n+     */\n+    \n+    private final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    public void testWithCustomTypeId() throws Exception {\n+\n+        List<TheItem.NestedItem> nestedList = new ArrayList<TheItem.NestedItem>();\n+        nestedList.add(new TheItem.NestedItem(\"foo1\"));\n+        nestedList.add(new TheItem.NestedItem(\"foo2\"));\n+        TheItem item = new TheItem(\"first\", false, nestedList);\n+        Outer outer = new Outer();\n+        outer.getAttributes().put(TheItem.class.getName(), item);\n+\n+        String json = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(outer);\n+        System.out.println(json);\n+\n+        Outer result = MAPPER.readValue(json, Outer.class);\n+        assertNotNull(result);\n+    }\n+}", "timestamp": 1418270611, "metainfo": ""}