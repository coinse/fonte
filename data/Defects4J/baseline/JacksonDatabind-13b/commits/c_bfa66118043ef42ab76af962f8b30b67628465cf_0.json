{"sha": "bfa66118043ef42ab76af962f8b30b67628465cf", "log": "Refactoring to move the new failing test (for #501) under failing/, to avoid failing build", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/SetterlessProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/SetterlessProperty.java\n     public SetterlessProperty(BeanPropertyDefinition propDef, JavaType type,\n             TypeDeserializer typeDeser, Annotations contextAnnotations, AnnotatedMethod method) {\n         super(propDef, type, typeDeser, contextAnnotations);\n-System.err.println(\"Value type deser for SETTERLESS -> \"+typeDeser);        \n         _annotated = method;\n         _getter = method.getAnnotated();\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestSetterlessProperties.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestSetterlessProperties.java\n         }\n     }\n \n-    static class Poly {\n-        public int id;\n-\n-        public Poly(int id) { this.id = id; }\n-        protected Poly() { this(0); }\n-    }\n-\n-    static class Issue501Bean {\n-        protected Map<String,Poly> m = new HashMap<String,Poly>();\n-        protected List<Poly> l = new ArrayList<Poly>();\n-\n-        protected Issue501Bean() { }\n-        public Issue501Bean(String key, Poly value) {\n-            m.put(key, value);\n-            l.add(value);\n-        }\n-        \n-        @JsonTypeInfo(use = JsonTypeInfo.Id.NONE)\n-        public List<Poly> getList(){\n-            return l;\n-        }\n-\n-        @JsonTypeInfo(use = JsonTypeInfo.Id.NONE)\n-        public Map<String,Poly> getMap() {\n-            return m;\n-        }\n-\n-//        public void setMap(Map<String,Poly> m) { this.m = m; }\n-//        public void setList(List<Poly> l) { this.l = l; }\n-    }\n-    \n     /*\n     /**********************************************************\n     /* Unit tests\n         assertNotNull(value);\n         assertEquals(3, value.values.size());\n     }\n-\n-    // For [Issue#501]\n-    public void testSetterlessWithPolymorphic() throws Exception\n-    {\n-        Issue501Bean input = new Issue501Bean(\"a\", new Poly(13));\n-        ObjectMapper m = new ObjectMapper();\n-        assertTrue(m.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS));\n-        m.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n-\n-        String json = m.writerWithDefaultPrettyPrinter().writeValueAsString(input);\n-\n-        Issue501Bean output = m.readValue(json, Issue501Bean.class);\n-        assertNotNull(output);\n-\n-        assertEquals(1, output.l.size());\n-        assertEquals(1, output.m.size());\n-\n-        assertEquals(13, output.l.get(0).id);\n-        Poly p = output.m.get(\"a\");\n-        assertNotNull(p);\n-        assertEquals(13, p.id);\n-    }\n }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestSetterlessProperties501.java\n+package com.fasterxml.jackson.failing;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+/**\n+ * Unit tests for verifying that feature requested\n+ * via [JACKSON-88] (\"setterless collections\") work as\n+ * expected, similar to how Collections and Maps work\n+ * with JAXB.\n+ */\n+public class TestSetterlessProperties501\n+    extends BaseMapTest\n+{\n+    static class Poly {\n+        public int id;\n+\n+        public Poly(int id) { this.id = id; }\n+        protected Poly() { this(0); }\n+    }\n+\n+    static class Issue501Bean {\n+        protected Map<String,Poly> m = new HashMap<String,Poly>();\n+        protected List<Poly> l = new ArrayList<Poly>();\n+\n+        protected Issue501Bean() { }\n+        public Issue501Bean(String key, Poly value) {\n+            m.put(key, value);\n+            l.add(value);\n+        }\n+        \n+        @JsonTypeInfo(use = JsonTypeInfo.Id.NONE)\n+        public List<Poly> getList(){\n+            return l;\n+        }\n+\n+        @JsonTypeInfo(use = JsonTypeInfo.Id.NONE)\n+        public Map<String,Poly> getMap() {\n+            return m;\n+        }\n+\n+//        public void setMap(Map<String,Poly> m) { this.m = m; }\n+//        public void setList(List<Poly> l) { this.l = l; }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    // For [Issue#501]\n+    public void testSetterlessWithPolymorphic() throws Exception\n+    {\n+        Issue501Bean input = new Issue501Bean(\"a\", new Poly(13));\n+        ObjectMapper m = new ObjectMapper();\n+        assertTrue(m.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS));\n+        m.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n+\n+        String json = m.writerWithDefaultPrettyPrinter().writeValueAsString(input);\n+\n+        Issue501Bean output = m.readValue(json, Issue501Bean.class);\n+        assertNotNull(output);\n+\n+        assertEquals(1, output.l.size());\n+        assertEquals(1, output.m.size());\n+\n+        assertEquals(13, output.l.get(0).id);\n+        Poly p = output.m.get(\"a\");\n+        assertNotNull(p);\n+        assertEquals(13, p.id);\n+    }\n+}", "timestamp": 1405122856, "metainfo": ""}