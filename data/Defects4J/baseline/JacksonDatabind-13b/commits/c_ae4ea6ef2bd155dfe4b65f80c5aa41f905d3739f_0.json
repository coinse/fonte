{"sha": "ae4ea6ef2bd155dfe4b65f80c5aa41f905d3739f", "log": "Fix [JACKSON-829]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n         Class<?> elementRaw = type.getContentType().getRawClass();\n         if (isIndexedList(raw)) {\n             if (elementRaw == String.class) {\n-                return IndexedStringListSerializer.instance;\n+                // [JACKSON-829] Must NOT use if we have custom serializer\n+                if (elementValueSerializer == null || ClassUtil.isJacksonStdImpl(elementValueSerializer)) {\n+                    return IndexedStringListSerializer.instance;\n+                }\n             }\n             return StdContainerSerializers.indexedListSerializer(type.getContentType(), staticTyping,\n                     elementTypeSerializer, property, elementValueSerializer);\n         }\n         if (elementRaw == String.class) {\n-            return StringCollectionSerializer.instance;\n+            // [JACKSON-829] Must NOT use if we have custom serializer\n+            if (elementValueSerializer == null || ClassUtil.isJacksonStdImpl(elementValueSerializer)) {\n+                return StringCollectionSerializer.instance;\n+            }\n         }\n         return StdContainerSerializers.collectionSerializer(type.getContentType(), staticTyping,\n                 elementTypeSerializer, property, elementValueSerializer);\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerialize3.java\n+package com.fasterxml.jackson.databind.ser;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+import com.fasterxml.jackson.core.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+\n+public class TestJsonSerialize3 extends BaseMapTest\n+{\n+    // [JACKSON-829]\n+    static class FooToBarSerializer extends JsonSerializer<String> {\n+        @Override\n+        public void serialize(String value, JsonGenerator jgen, SerializerProvider provider)\n+               throws IOException {\n+            if (\"foo\".equals(value)) {\n+                jgen.writeString(\"bar\");\n+            } else {\n+                jgen.writeString(value);\n+            }\n+        }\n+    }\n+\n+    static class MyObject {\n+        @JsonSerialize(contentUsing = FooToBarSerializer.class)\n+        List<String> list;\n+    }    \n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+    \n+    public void testCustomContentSerializer() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        MyObject object = new MyObject();\n+        object.list = Arrays.asList(\"foo\");\n+        String json = m.writeValueAsString(object);\n+        assertEquals(\"{\\\"list\\\":[\\\"bar\\\"]}\", json);\n+    }\n+}", "timestamp": 1334890073, "metainfo": ""}