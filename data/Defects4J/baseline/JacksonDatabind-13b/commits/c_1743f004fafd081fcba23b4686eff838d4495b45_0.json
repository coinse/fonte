{"sha": "1743f004fafd081fcba23b4686eff838d4495b45", "log": "Added unit test for ordering being kept even with forward reference handling.", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdDeserialization.java\n package com.fasterxml.jackson.databind.struct;\n \n import java.util.HashMap;\n+import java.util.Iterator;\n import java.util.Map;\n+import java.util.Map.Entry;\n \n import com.fasterxml.jackson.annotation.JsonAnySetter;\n import com.fasterxml.jackson.annotation.JsonIdentityInfo;\n     public void testUnresolvedForwardReference()\n         throws Exception\n     {\n-        String json = \"{\\\"employees\\\":[\" + \"{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":null,\\\"reports\\\":[3]},\"\n-                + \"{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":3,\\\"reports\\\":[]}\" + \"]}\";\n+        String json = \"{\\\"employees\\\":[\" \n+                      + \"{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":null,\\\"reports\\\":[3]},\"\n+                      + \"{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":3,\\\"reports\\\":[]}\" \n+                      + \"]}\";\n         try {\n             mapper.readValue(json, Company.class);\n             fail(\"Should have thrown.\");\n         }\n     }\n \n+    public void testKeepCollectionOrdering()\n+        throws Exception\n+    {\n+        String json = \"{\\\"employees\\\":[2,1,\"\n+                + \"{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":2,\\\"reports\\\":[]},\"\n+                + \"{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":null,\\\"reports\\\":[1]}\"\n+                + \"]}\";\n+        Company company = mapper.readValue(json, Company.class);\n+        assertEquals(4, company.employees.size());\n+        // Deser must keep object ordering.\n+        Employee firstEmployee = company.employees.get(1);\n+        Employee secondEmployee = company.employees.get(0);\n+        assertEquals(1, firstEmployee.id);\n+        assertEquals(2, secondEmployee.id);\n+        assertEquals(secondEmployee, firstEmployee.manager); // Ensure that forward reference was properly resolved.\n+        assertEquals(firstEmployee, secondEmployee.reports.get(0)); // And that back reference is also properly resolved.\n+    }\n+\n+    public void testKeepMapOrdering()\n+        throws Exception\n+    {\n+        String json = \"{\\\"employees\\\":{\"\n+                      + \"\\\"1\\\":2, \\\"2\\\":1,\"\n+                      + \"\\\"3\\\":{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":2,\\\"reports\\\":[]},\"\n+                      + \"\\\"4\\\":{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":null,\\\"reports\\\":[1]}\"\n+                      + \"}}\";\n+        MappedCompany company = mapper.readValue(json, MappedCompany.class);\n+        assertEquals(4, company.employees.size());\n+        Employee firstEmployee = company.employees.get(2);\n+        Employee secondEmployee = company.employees.get(1);\n+        assertEquals(1, firstEmployee.id);\n+        assertEquals(2, secondEmployee.id);\n+        assertEquals(secondEmployee, firstEmployee.manager); // Ensure that forward reference was properly resolved.\n+        assertEquals(firstEmployee, secondEmployee.reports.get(0)); // And that back reference is also properly resolved.\n+        // Deser must keep object ordering. Not sure if it's really important for maps, but...\n+        Iterator<Entry<Integer,Employee>> iterator = company.employees.entrySet().iterator();\n+        assertEquals(secondEmployee, iterator.next().getValue());\n+        assertEquals(firstEmployee, iterator.next().getValue());\n+        assertEquals(firstEmployee, iterator.next().getValue());\n+        assertEquals(secondEmployee, iterator.next().getValue());\n+    }\n+\n     /*\n     /*****************************************************\n     /* Unit tests, custom (property-based) id deserialization", "timestamp": 1389625653, "metainfo": ""}