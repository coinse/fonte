{"sha": "5744ee8a1698687fe4acc0c269cbbbb1e234b06d", "log": "Separate testing empty line handling from comment recognition  ", "commit": "\n--- a/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n     @Test\n     public void testIgnoreEmptyLines() throws IOException {\n         final String code =\n-                \"1,2,3,\\n\"+                // 1\n-                \"\\n\"+\n-                \"\\n\"+\n-                \"a,b x,c#no-comment\\n\"+    // 2\n-                \"\\n\"+\n-                \"\\n\"+\n-                \"# foo \\n\"+                // 3\n-                \"\\n\"+                      // 4\n-                \"d,e,#no-comment\\n\"+       // 5\n-                \"\\n\"+\n-                \"\\n\"+\n-                \"# penultimate comment\\n\"+ // 6\n-                \"\\n\"+\n-                \"\\n\"+\n-                \"# Final comment\\n\";       // 7\n-        final CSVFormat format = CSVFormat.newBuilder().withCommentStart('#').withIgnoreEmptyLines(true).build();\n-        final Lexer parser = getLexer(code, format);\n-\n-        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"1\"));\n-        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"2\"));\n-        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"3\"));\n-        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"\"));             // 1\n-        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"a\"));\n-        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"b x\"));\n-        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"c#no-comment\")); // 2\n-        assertThat(parser.nextToken(new Token()), matches(COMMENT, \"foo\"));              // 3\n-        // 4 empty line, ignored                                                    // 4\n-        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"d\"));\n-        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"e\"));\n-        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"#no-comment\"));  // 5\n-        assertThat(parser.nextToken(new Token()), matches(COMMENT, \"penultimate comment\"));              // 6\n-        assertThat(parser.nextToken(new Token()), matches(COMMENT, \"Final comment\"));              // 7\n-        assertThat(parser.nextToken(new Token()), matches(EOF, \"\"));\n-        assertThat(parser.nextToken(new Token()), matches(EOF, \"\"));\n-\n+                \"first,line,\\n\"+\n+                \"\\n\"+\n+                \"\\n\"+\n+                \"second,line\\n\"+\n+                \"\\n\"+\n+                \"\\n\"+\n+                \"third line \\n\"+\n+                \"\\n\"+\n+                \"\\n\"+\n+                \"last, line \\n\"+\n+                \"\\n\"+\n+                \"\\n\"+\n+                \"\\n\";\n+        final CSVFormat format = CSVFormat.newBuilder().withIgnoreEmptyLines(true).build();\n+        final Lexer parser = getLexer(code, format);\n+\n+        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"first\"));\n+        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"line\"));\n+        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"\"));\n+        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"second\"));\n+        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"line\"));\n+        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"third line \"));\n+        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"last\"));\n+        assertThat(parser.nextToken(new Token()), matches(EORECORD, \" line \"));\n+        assertThat(parser.nextToken(new Token()), matches(EOF, \"\"));\n+        assertThat(parser.nextToken(new Token()), matches(EOF, \"\"));\n+    }\n+\n+    @Test\n+    public void testComments() throws IOException {\n+        final String code =\n+                \"first,line,\\n\"+\n+                \"second,line,tokenWith#no-comment\\n\"+\n+                \"# comment line \\n\"+\n+                \"third,line,#no-comment\\n\"+\n+                \"# penultimate comment\\n\"+\n+                \"# Final comment\\n\";\n+        final CSVFormat format = CSVFormat.newBuilder().withCommentStart('#').build();\n+        final Lexer parser = getLexer(code, format);\n+\n+        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"first\"));\n+        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"line\"));\n+        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"\"));\n+        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"second\"));\n+        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"line\"));\n+        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"tokenWith#no-comment\"));\n+        assertThat(parser.nextToken(new Token()), matches(COMMENT, \"comment line\"));\n+        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"third\"));\n+        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"line\"));\n+        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"#no-comment\"));\n+        assertThat(parser.nextToken(new Token()), matches(COMMENT, \"penultimate comment\"));\n+        assertThat(parser.nextToken(new Token()), matches(COMMENT, \"Final comment\"));\n+        assertThat(parser.nextToken(new Token()), matches(EOF, \"\"));\n+        assertThat(parser.nextToken(new Token()), matches(EOF, \"\"));\n     }\n \n     // multiline including comments (and empty lines)", "timestamp": 1365447358, "metainfo": ""}