{"sha": "ef9018bb1ef6a541ad3e2225559b145e8f90fa14", "log": "[CSV-94] Lexer should only use char fields.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/Lexer.java\n+++ b/src/main/java/org/apache/commons/csv/Lexer.java\n  */\n abstract class Lexer {\n \n-    private final Character delimiter;\n-    private final Character escape;\n-    private final Character encapsulator;\n-    private final Character commmentStart;\n+    /**\n+     * Constant char to be used for disabling comments, escapes and encapsulation. The value -2 is used because it\n+     * won't be confused with an EOF signal (-1), and because the Unicode value {@code FFFE} would be encoded as two chars\n+     * (using surrogates) and thus there should never be a collision with a real text char.\n+     */\n+    private static final char DISABLED = '\\ufffe';\n+\n+    private final char delimiter;\n+    private final char escape;\n+    private final char encapsulator;\n+    private final char commmentStart;\n \n     final boolean ignoreSurroundingSpaces;\n     final boolean ignoreEmptyLines;\n         this.format = format;\n         this.in = in;\n         this.delimiter = format.getDelimiter();\n-        this.escape = format.getEscape();\n-        this.encapsulator = format.getEncapsulator();\n-        this.commmentStart = format.getCommentStart();\n+        this.escape = nullMeansDisabled(format.getEscape());\n+        this.encapsulator = nullMeansDisabled(format.getEncapsulator());\n+        this.commmentStart = nullMeansDisabled(format.getCommentStart());\n         this.ignoreSurroundingSpaces = format.getIgnoreSurroundingSpaces();\n         this.ignoreEmptyLines = format.getIgnoreEmptyLines();\n+    }\n+\n+    private final char nullMeansDisabled(Character c) {\n+        return c == null ? DISABLED : c.charValue();\n     }\n \n     int getLineNumber() {\n     }\n \n     boolean isEscape(final int c) {\n-        return escape != null && c == escape;\n+        return c == escape;\n     }\n \n     boolean isEncapsulator(final int c) {\n-        return encapsulator != null && c == encapsulator;\n+        return c == encapsulator;\n     }\n \n     boolean isCommentStart(final int c) {\n-        return commmentStart != null && c == commmentStart;\n+        return c == commmentStart;\n     }\n }", "timestamp": 1350142916, "metainfo": ""}