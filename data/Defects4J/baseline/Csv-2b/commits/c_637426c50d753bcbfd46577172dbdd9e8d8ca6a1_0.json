{"sha": "637426c50d753bcbfd46577172dbdd9e8d8ca6a1", "log": "Removed unused methods from CharBuffer  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CharBuffer.java\n+++ b/src/main/java/org/apache/commons/csv/CharBuffer.java\n      * Creates a new CharBuffer with an initial capacity\n      * of <code>length</code> characters.\n      */\n-    CharBuffer(final int length) {\n+    CharBuffer(int length) {\n         if (length == 0) {\n             throw new IllegalArgumentException(\"Can't create an empty CharBuffer\");\n         }\n      *\n      * @param cb the CharBuffer to append or null\n      */\n-    void append(final CharBuffer cb) {\n-        if (cb == null) {\n-            return;\n+    void append(CharBuffer cb) {\n+        if (cb != null) {\n+            ensureCapacity(length + cb.length);\n+            System.arraycopy(cb.c, 0, c, length, cb.length);\n+            length += cb.length;\n         }\n-        provideCapacity(length + cb.length);\n-        System.arraycopy(cb.c, 0, c, length, cb.length);\n-        length += cb.length;\n     }\n \n     /**\n      *\n      * @param s the String to append or null\n      */\n-    void append(final String s) {\n-        if (s == null) {\n-            return;\n+    void append(String s) {\n+        if (s != null) {\n+            append(s.toCharArray());\n         }\n-        append(s.toCharArray());\n     }\n \n     /**\n      *\n      * @param data the char[] to append or null\n      */\n-    void append(final char[] data) {\n-        if (data == null) {\n-            return;\n+    void append(char[] data) {\n+        if (data != null) {\n+            ensureCapacity(length + data.length);\n+            System.arraycopy(data, 0, c, length, data.length);\n+            length += data.length;\n         }\n-        provideCapacity(length + data.length);\n-        System.arraycopy(data, 0, c, length, data.length);\n-        length += data.length;\n     }\n \n     /**\n      *\n      * @param data the char to append\n      */\n-    void append(final char data) {\n-        provideCapacity(length + 1);\n+    void append(char data) {\n+        ensureCapacity(length + 1);\n         c[length] = data;\n         length++;\n-    }\n-\n-    /**\n-     * Shrinks the capacity of the buffer to the current length if necessary.\n-     * This method involves copying the data once!\n-     */\n-    void shrink() {\n-        if (c.length == length) {\n-            return;\n-        }\n-        char[] newc = new char[length];\n-        System.arraycopy(c, 0, newc, 0, length);\n-        c = newc;\n     }\n \n     /**\n         while (length > 0 && Character.isWhitespace(c[length - 1])) {\n             length--;\n         }\n-    }\n-\n-    /**\n-     * Returns the contents of the buffer as a char[]. The returned array may\n-     * be the internal array of the buffer, so the caller must take care when\n-     * modifying it.\n-     * This method allows to avoid copying if the caller knows the exact capacity\n-     * before.\n-     *\n-     * @return\n-     */\n-    char[] getCharacters() {\n-        if (c.length == length) {\n-            return c;\n-        }\n-        char[] chars = new char[length];\n-        System.arraycopy(c, 0, chars, 0, length);\n-        return chars;\n-    }\n-\n-    /**\n-     * Returns the character at the specified position.\n-     */\n-    char charAt(int pos) {\n-        return c[pos];\n     }\n \n     /**\n      *\n      * @param capacity\n      */\n-    void provideCapacity(final int capacity) {\n-        if (c.length >= capacity) {\n-            return;\n+    void ensureCapacity(int capacity) {\n+        if (c.length < capacity) {\n+            int newcapacity = ((capacity * 3) >> 1) + 1;\n+            char[] newc = new char[newcapacity];\n+            System.arraycopy(c, 0, newc, 0, length);\n+            c = newc;\n         }\n-        int newcapacity = ((capacity * 3) >> 1) + 1;\n-        char[] newc = new char[newcapacity];\n-        System.arraycopy(c, 0, newc, 0, length);\n-        c = newc;\n     }\n }\n--- a/src/test/java/org/apache/commons/csv/CharBufferTest.java\n+++ b/src/test/java/org/apache/commons/csv/CharBufferTest.java\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.commons.csv;\n \n import junit.framework.TestCase;\n         }\n     }\n \n-    public void testShrink() {\n-        String data = \"123456789012345678901234567890\";\n-\n-        CharBuffer cb = new CharBuffer(data.length() + 100);\n-        assertEquals(data.length() + 100, cb.capacity());\n-        cb.append(data);\n-        assertEquals(data.length() + 100, cb.capacity());\n-        assertEquals(data.length(), cb.length());\n-        cb.shrink();\n-        assertEquals(data.length(), cb.capacity());\n-        assertEquals(data.length(), cb.length());\n-        assertEquals(data, cb.toString());\n-    }\n-\n     //-- the following test cases have been adapted from the HttpComponents project\n     //-- written by Oleg Kalnichevski\n \n         CharBuffer buffer = new CharBuffer(16);\n         assertEquals(16, buffer.capacity());\n         assertEquals(0, buffer.length());\n-        char[] b1 = buffer.getCharacters();\n+        char[] b1 = buffer.toString().toCharArray();\n         assertNotNull(b1);\n         assertEquals(0, b1.length);\n         assertEquals(0, buffer.length());\n         assertEquals(16, buffer.capacity());\n         assertEquals(4, buffer.length());\n \n-        char[] b2 = buffer.getCharacters();\n+        char[] b2 = buffer.toString().toCharArray();\n         assertNotNull(b2);\n         assertEquals(4, b2.length);\n         for (int i = 0; i < tmp.length; i++) {\n \n     public void testProvideCapacity() throws Exception {\n         CharBuffer buffer = new CharBuffer(4);\n-        buffer.provideCapacity(2);\n+        buffer.ensureCapacity(2);\n         assertEquals(4, buffer.capacity());\n-        buffer.provideCapacity(8);\n+        buffer.ensureCapacity(8);\n         assertTrue(buffer.capacity() >= 8);\n     }\n }", "timestamp": 1331719315, "metainfo": ""}