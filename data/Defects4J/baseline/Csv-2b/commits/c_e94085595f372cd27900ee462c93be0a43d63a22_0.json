{"sha": "e94085595f372cd27900ee462c93be0a43d63a22", "log": "CSV-35 add test  ", "commit": "\n--- a/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n         /* file: a,\\,,b\n         *       \\,,\n         */\n-        String code = \"a,\\\\,,b\\\\\\\\\\n\\\\,,\\\\\\nc,d\\\\\\n\";\n-        CSVFormat format = CSVFormat.DEFAULT.withEscape('\\\\');\n+        String code = \"a,\\\\,,b\\\\\\\\\\n\\\\,,\\\\\\nc,d\\\\\\r\\ne\";\n+        CSVFormat format = CSVFormat.DEFAULT.withEscape('\\\\').withEmptyLinesIgnored(false);\n         assertTrue(format.isEscaping());\n         Lexer parser = getLexer(code, format);\n \n         assertTokenEquals(EORECORD, \"b\\\\\", parser.nextToken(new Token()));\n         assertTokenEquals(TOKEN, \",\", parser.nextToken(new Token()));\n         assertTokenEquals(TOKEN, \"\\nc\", parser.nextToken(new Token()));\n-        assertTokenEquals(EOF, \"d\\n\", parser.nextToken(new Token()));\n-        assertTokenEquals(EOF, \"\", parser.nextToken(new Token()));\n+        assertTokenEquals(EORECORD, \"d\\r\", parser.nextToken(new Token()));\n+        assertTokenEquals(EOF, \"e\", parser.nextToken(new Token()));\n     }\n \n     // simple token with escaping enabled", "timestamp": 1333033856, "metainfo": ""}