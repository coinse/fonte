{"sha": "ee95ad7a13b3d69096bac45ad344575e2cb54c1a", "log": "Removing System outs - SANDBOX-217  ", "commit": "\n--- a/src/test/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/org/apache/commons/csv/CSVParserTest.java\n      */\n     public String testNextToken() throws IOException {\n       Token t = super.nextToken();\n-      String tmp = Integer.toString(t.type) + \";\" + t.content + \";\";\n-      System.out.println(\"token=\" + tmp);\n-      return tmp;\n+      return Integer.toString(t.type) + \";\" + t.content + \";\";\n     }\n   }\n   \n     String code = \"abc,def, hijk,  lmnop,   qrst,uv ,wxy   ,z , ,\";\n     TestCSVParser parser = new TestCSVParser(new StringReader(code));\n     parser.setStrategy(CSVStrategy.DEFAULT_STRATEGY);\n-    System.out.println(\"---------\\n\" + code + \"\\n-------------\");\n     assertEquals(CSVParser.TT_TOKEN + \";abc;\", parser.testNextToken());\n     assertEquals(CSVParser.TT_TOKEN + \";def;\", parser.testNextToken());\n     assertEquals(CSVParser.TT_TOKEN + \";hijk;\", parser.testNextToken());\n     parser.getStrategy().setIgnoreEmptyLines(false);\n     parser.setStrategy(CSVStrategy.DEFAULT_STRATEGY);\n     parser.getStrategy().setCommentStart('#');\n-    System.out.println(\"---------\\n\" + code + \"\\n-------------\");\n     assertEquals(CSVParser.TT_TOKEN + \";1;\", parser.testNextToken());\n     assertEquals(CSVParser.TT_TOKEN + \";2;\", parser.testNextToken());\n     assertEquals(CSVParser.TT_TOKEN + \";3;\", parser.testNextToken());\n     TestCSVParser parser = new TestCSVParser(new StringReader(code));\n     parser.setStrategy(CSVStrategy.DEFAULT_STRATEGY);\n     parser.getStrategy().setCommentStart('#');\n-    System.out.println(\"---------\\n\" + code + \"\\n-------------\");\n     assertEquals(CSVParser.TT_TOKEN + \";a;\", parser.testNextToken());\n     // an unquoted single backslash is not an escape char\n     assertEquals(CSVParser.TT_TOKEN + \";\\\\;\", parser.testNextToken());\n       \"a,\\\"foo\\\",b\\na,   \\\" foo\\\",b\\na,\\\"foo \\\"  ,b\\na,  \\\" foo \\\"  ,b\";\n      TestCSVParser parser = new TestCSVParser(new StringReader(code));\n      parser.setStrategy(CSVStrategy.DEFAULT_STRATEGY);\n-     System.out.println(\"---------\\n\" + code + \"\\n-------------\");\n      assertEquals(CSVParser.TT_TOKEN + \";a;\", parser.testNextToken());\n      assertEquals(CSVParser.TT_TOKEN + \";foo;\", parser.testNextToken());\n      assertEquals(CSVParser.TT_EORECORD + \";b;\", parser.testNextToken());\n       \"a,\\\"foo\\n\\\",b\\n\\\"foo\\n  baar ,,,\\\"\\n\\\"\\n\\t \\n\\\"\";\n     TestCSVParser parser = new TestCSVParser(new StringReader(code));\n     parser.setStrategy(CSVStrategy.DEFAULT_STRATEGY);\n-    System.out.println(\"---------\\n\" + code + \"\\n-------------\");\n     assertEquals(CSVParser.TT_TOKEN + \";a;\", parser.testNextToken());\n     assertEquals(CSVParser.TT_TOKEN + \";foo\\n;\", parser.testNextToken());\n     assertEquals(CSVParser.TT_EORECORD + \";b;\", parser.testNextToken());\n     String code = \"a;'b and '' more\\n'\\n!comment;;;;\\n;;\";\n     TestCSVParser parser = new TestCSVParser(new StringReader(code));\n     parser.setStrategy( new CSVStrategy(';', '\\'', '!') );\n-    System.out.println(\"---------\\n\" + code + \"\\n-------------\");\n     assertEquals(CSVParser.TT_TOKEN + \";a;\", parser.testNextToken());\n     assertEquals(\n       CSVParser.TT_EORECORD + \";b and ' more\\n;\", \n   };\n   public void testGetLine() throws IOException {\n     CSVParser parser = new CSVParser(new StringReader(code));\n-    System.out.println(\"---------\\n\" + code + \"\\n-------------\");\n     String[] tmp = null;\n     for (int i = 0; i < res.length; i++) {\n       tmp = parser.getLine();\n   \n   public void testNextValue() throws IOException {\n     CSVParser parser = new CSVParser(new StringReader(code));\n-    System.out.println(\"---------\\n\" + code + \"\\n-------------\");\n     String tmp = null;\n     for (int i = 0; i < res.length; i++) {\n       for (int j = 0; j < res[i].length; j++) {\n   \n   public void testGetAllValues() throws IOException {\n     CSVParser parser = new CSVParser(new StringReader(code));\n-    System.out.println(\"---------\\n\" + code + \"\\n-------------\");\n     String[][] tmp = parser.getAllValues();\n     assertEquals(res.length, tmp.length);\n     assertTrue(tmp.length > 0);\n       {\"\\\"hello\\\"\", \"  \\\"world\\\"\", \"abc\\ndef\", \"\"}\n     };\n     CSVParser parser = new CSVParser(new StringReader(code), CSVStrategy.EXCEL_STRATEGY);\n-    System.out.println(\"---------\\n\" + code + \"\\n-------------\");\n     String[][] tmp = parser.getAllValues();\n     assertEquals(res.length, tmp.length);\n     assertTrue(tmp.length > 0);\n     };\n     CSVParser parser = new CSVParser(new StringReader(code));\n     parser.setStrategy(CSVStrategy.EXCEL_STRATEGY);\n-    System.out.println(\"---------\\n\" + code + \"\\n-------------\");\n     String[][] tmp = parser.getAllValues();\n     assertEquals(res.length, tmp.length);\n     assertTrue(tmp.length > 0);\n     for (int i = 0; i < res.length; i++) {\n-      for (int j = 0; j < tmp[i].length; j++) {\n-        System.out.println(\"'\" + tmp[i][j] + \"'\");\n-      }\n       assertTrue(Arrays.equals(res[i], tmp[i])); \n     }\n   }\n       code = codes[codeIndex];\n       CSVParser parser = new CSVParser(new StringReader(code));\n       parser.setStrategy(CSVStrategy.EXCEL_STRATEGY);\n-      System.out.println(\"---------\\n\" + code + \"\\n-------------\");\n       String[][] tmp = parser.getAllValues();\n       assertEquals(res.length, tmp.length);\n       assertTrue(tmp.length > 0);\n       for (int i = 0; i < res.length; i++) {\n-        for (int j = 0; j < tmp[i].length; j++) {\n-          System.out.println(\"'\" + tmp[i][j] + \"'\");\n-        }\n         assertTrue(Arrays.equals(res[i], tmp[i]));\n       }\n     }\n       code = codes[codeIndex];\n       CSVParser parser = new CSVParser(new StringReader(code));\n       parser.setStrategy(CSVStrategy.DEFAULT_STRATEGY);\n-      System.out.println(\"---------\\n\" + code + \"\\n-------------\");\n       String[][] tmp = parser.getAllValues();\n       assertEquals(res.length, tmp.length);\n       assertTrue(tmp.length > 0);\n       for (int i = 0; i < res.length; i++) {\n-        for (int j = 0; j < tmp[i].length; j++) {\n-          System.out.println(\"'\" + tmp[i][j] + \"'\");\n-        }\n         assertTrue(Arrays.equals(res[i], tmp[i]));\n       }\n     }\n       code = codes[codeIndex];\n       CSVParser parser = new CSVParser(new StringReader(code));\n       parser.setStrategy(CSVStrategy.EXCEL_STRATEGY);\n-      System.out.println(\"---------\\n\" + code + \"\\n-------------\");\n       String[][] tmp = parser.getAllValues();\n       assertEquals(res.length, tmp.length);\n       assertTrue(tmp.length > 0);\n       for (int i = 0; i < res.length; i++) {\n-        for (int j = 0; j < tmp[i].length; j++) {\n-          System.out.println(\"'\" + tmp[i][j] + \"'\");\n-        }\n         assertTrue(Arrays.equals(res[i], tmp[i]));\n       }\n     }\n       code = codes[codeIndex];\n       CSVParser parser = new CSVParser(new StringReader(code));\n       parser.setStrategy(CSVStrategy.DEFAULT_STRATEGY);\n-      System.out.println(\"---------\\n\" + code + \"\\n-------------\");\n       String[][] tmp = parser.getAllValues();\n       assertEquals(res.length, tmp.length);\n       assertTrue(tmp.length > 0);\n       for (int i = 0; i < res.length; i++) {\n-        for (int j = 0; j < tmp[i].length; j++) {\n-          System.out.println(\"'\" + tmp[i][j] + \"'\");\n-        }\n         assertTrue(Arrays.equals(res[i], tmp[i]));\n       }\n     }\n         { \"a\\\\\\\\,b\" }    // backslash in quotes only escapes a delimiter (\",\")\n       };\n     CSVParser parser = new CSVParser(new StringReader(code));\n-    System.out.println(\"---------\\n\" + code + \"\\n-------------\");\n     String[][] tmp = parser.getAllValues();\n     assertEquals(res.length, tmp.length);\n     assertTrue(tmp.length > 0);\n     for (int i = 0; i < res.length; i++) {\n-      for (int j = 0; j < tmp[i].length; j++) {\n-        System.out.println(\"'\" + tmp[i][j] + \"'\");\n-      }\n       assertTrue(Arrays.equals(res[i], tmp[i])); \n     }\n   }\n     CSVStrategy strategy = new CSVStrategy(',','\\'',CSVStrategy.COMMENTS_DISABLED,'/',false,false,true,true);\n \n     CSVParser parser = new CSVParser(new StringReader(code), strategy);\n-    System.out.println(\"---------\\n\" + code + \"\\n-------------\");\n     String[][] tmp = parser.getAllValues();\n     assertTrue(tmp.length > 0);\n     for (int i = 0; i < res.length; i++) {\n-      for (int j = 0; j < tmp[i].length; j++) {\n-        System.out.println(\"'\" + tmp[i][j] + \"'  should be '\" + res[i][j] + \"'\");\n-      }\n       assertTrue(Arrays.equals(res[i], tmp[i]));\n     }\n   }\n     public void testUnicodeEscape() throws IOException {\n       String code = \"abc,\\\\u0070\\\\u0075\\\\u0062\\\\u006C\\\\u0069\\\\u0063\";\n       CSVParser parser = new CSVParser(new StringReader(code));\n-      System.out.println(\"---------\\n\" + code + \"\\n-------------\");\n       parser.getStrategy().setUnicodeEscapeInterpretation(true);\n       String[] data = parser.getLine();\n       assertEquals(2, data.length);\n     public void testCarriageReturnLineFeedEndings() throws IOException {\n      String code = \"foo\\r\\nbaar,\\r\\nhello,world\\r\\n,kanu\";\n      CSVParser parser = new CSVParser(new StringReader(code));\n-     System.out.println(\"---------\\n\" + code + \"\\n-------------\");\n      String[][] data = parser.getAllValues();\n      assertEquals(4, data.length);\n     }\n       //String code = \"world\\r\\n\\n\";\n       //String code = \"foo;baar\\r\\n\\r\\nhello;\\r\\n\\r\\nworld;\\r\\n\";\n       CSVParser parser = new CSVParser(new StringReader(code));\n-      System.out.println(\"---------\\n\" + code + \"\\n-------------\");\n       String[][] data = parser.getAllValues();\n-//      for (int i = 0; i < data.length; i++) {\n-//        if (i > 0) {\n-//          System.out.print('\\n');\n-//        }\n-//        for (int j = 0; j < data[i].length; j++) {\n-//          System.out.print(\"(\" + j + \")'\" + data[i][j] + \"'\");\n-//        }\n-//      }\n-//      System.out.println(\"----------\");\n       assertEquals(3, data.length);\n     }\n     \n     public void testLineTokenConsistency() throws IOException {\n       String code = \"\\nfoo,baar\\n\\r\\n,\\n\\n,world\\r\\n\\n\";\n       CSVParser parser = new CSVParser(new StringReader(code));\n-      System.out.println(\"---------\\n\" + code + \"\\n-------------\");\n       String[][] data = parser.getAllValues();\n       parser = new CSVParser(new StringReader(code));\n       CSVParser parser1 = new CSVParser(new StringReader(code));\n          String code = \"one\\ttwo\\t\\tfour \\t five\\t six\";\n          TestCSVParser parser = new TestCSVParser(new StringReader(code));\n          parser.setStrategy(CSVStrategy.TDF_STRATEGY);\n-         System.out.println(\"---------\\n\" + code + \"\\n-------------\");\n          assertEquals(CSVParser.TT_TOKEN + \";one;\", parser.testNextToken());\n          assertEquals(CSVParser.TT_TOKEN + \";two;\", parser.testNextToken());\n          assertEquals(CSVParser.TT_TOKEN + \";;\", parser.testNextToken());", "timestamp": 1204015245, "metainfo": ""}