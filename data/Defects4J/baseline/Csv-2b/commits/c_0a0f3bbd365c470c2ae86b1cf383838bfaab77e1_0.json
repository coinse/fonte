{"sha": "0a0f3bbd365c470c2ae86b1cf383838bfaab77e1", "log": "CSV-70 Improve readability of CSVLexer Introduce COMMENT type  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVLexer.java\n+++ b/src/main/java/org/apache/commons/csv/CSVLexer.java\n             if (isCommentStart(c)) { // TODO should only match at start of line\n                 // ignore everything till end of line and continue (incr linecount)\n                 in.readLine();\n-                tkn = nextToken(tkn.reset());\n+                tkn.type = COMMENT;\n             } else if (isDelimiter(c)) {\n                 // empty token return TOKEN(\"\")\n                 tkn.type = TOKEN;\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n                     break;\n                 case INVALID:\n                     throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n+                case COMMENT: // Ignored currently\n+                    break;\n             }\n         } while (reusableToken.type == TOKEN);\n         \n--- a/src/main/java/org/apache/commons/csv/Token.java\n+++ b/src/main/java/org/apache/commons/csv/Token.java\n         EOF,\n         \n         /** Token with content when end of a line is reached. */\n-        EORECORD\n+        EORECORD,\n+        \n+        /** Token is a comment line */\n+        COMMENT\n     }\n     \n     /** Token type */\n--- a/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n         assertTokenEquals(TOKEN, \"a\", parser.nextToken(new Token()));\n         assertTokenEquals(TOKEN, \"b x\", parser.nextToken(new Token()));\n         assertTokenEquals(EORECORD, \"c\", parser.nextToken(new Token()));\n+        assertTokenEquals(COMMENT, \"\", parser.nextToken(new Token()));\n         assertTokenEquals(EORECORD, \"\", parser.nextToken(new Token()));\n         assertTokenEquals(TOKEN, \"d\", parser.nextToken(new Token()));\n         assertTokenEquals(TOKEN, \"e\", parser.nextToken(new Token()));", "timestamp": 1332892903, "metainfo": ""}