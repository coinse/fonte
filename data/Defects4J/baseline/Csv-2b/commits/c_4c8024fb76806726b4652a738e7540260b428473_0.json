{"sha": "4c8024fb76806726b4652a738e7540260b428473", "log": "Express intention of tokens in token content and give test more structure  ", "commit": "\n--- a/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n     // Single line (without comment)\n     @Test\n     public void testIgnoreSurroundingSpacesAreDeleted() throws IOException {\n-        final String code = \"abc,def, hijk,  lmnop,   qrst,uv ,wxy   ,z , ,\";\n+        final String code = \"noSpaces,  leadingSpaces,trailingSpaces  ,  surroundingSpaces  ,  ,,\";\n         final Lexer parser = getLexer(code, CSVFormat.newBuilder().withIgnoreSurroundingSpaces(true).build());\n-        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"abc\"));\n-        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"def\"));\n-        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"hijk\"));\n-        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"lmnop\"));\n-        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"qrst\"));\n-        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"uv\"));\n-        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"wxy\"));\n-        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"z\"));\n+        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"noSpaces\"));\n+        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"leadingSpaces\"));\n+        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"trailingSpaces\"));\n+        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"surroundingSpaces\"));\n+        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"\"));\n         assertThat(parser.nextToken(new Token()), matches(TOKEN, \"\"));\n         assertThat(parser.nextToken(new Token()), matches(EOF, \"\"));\n     }", "timestamp": 1365445412, "metainfo": ""}