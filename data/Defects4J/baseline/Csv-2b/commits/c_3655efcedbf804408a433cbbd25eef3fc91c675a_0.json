{"sha": "3655efcedbf804408a433cbbd25eef3fc91c675a", "log": "Rename ivar to ignoreSurroundingSpaces to match CSVFormat.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVLexer.java\n+++ b/src/main/java/org/apache/commons/csv/CSVLexer.java\n         // important: make sure a new char gets consumed in each iteration\n         while (token.type == INVALID) {\n             // ignore whitespaces at beginning of a token\n-            if (surroundingSpacesIgnored) {\n+            if (ignoreSurroundingSpaces) {\n                 while (isWhitespace(c) && !eol) {\n                     c = in.read();\n                     eol = isEndOfLine(c);\n             }\n         }\n \n-        if (surroundingSpacesIgnored) {\n+        if (ignoreSurroundingSpaces) {\n             trimTrailingSpaces(tkn.content);\n         }\n \n--- a/src/main/java/org/apache/commons/csv/Lexer.java\n+++ b/src/main/java/org/apache/commons/csv/Lexer.java\n     private final Character encapsulator;\n     private final Character commmentStart;\n \n-    final boolean surroundingSpacesIgnored;\n+    final boolean ignoreSurroundingSpaces;\n     final boolean emptyLinesIgnored;\n \n     final CSVFormat format;\n         this.escape = format.getEscape();\n         this.encapsulator = format.getEncapsulator();\n         this.commmentStart = format.getCommentStart();\n-        this.surroundingSpacesIgnored = format.getIgnoreSurroundingSpaces();\n+        this.ignoreSurroundingSpaces = format.getIgnoreSurroundingSpaces();\n         this.emptyLinesIgnored = format.getIgnoreEmptyLines();\n     }\n \n--- a/src/test/java/org/apache/commons/csv/CSVLexer1306663.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexer1306663.java\n         //  important: make sure a new char gets consumed in each iteration\n         while (tkn.type == INVALID) {\n             // ignore whitespaces at beginning of a token\n-            if (surroundingSpacesIgnored) {\n+            if (ignoreSurroundingSpaces) {\n                 while (isWhitespace(c) && !eol) {\n                     c = in.read();\n                     eol = isEndOfLine(c);\n             }\n         }\n \n-        if (surroundingSpacesIgnored) {\n+        if (ignoreSurroundingSpaces) {\n             trimTrailingSpaces(tkn.content);\n         }\n \n--- a/src/test/java/org/apache/commons/csv/CSVLexer1306667.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexer1306667.java\n         //  important: make sure a new char gets consumed in each iteration\n         while (tkn.type == INVALID) {\n             // ignore whitespaces at beginning of a token\n-            if (surroundingSpacesIgnored) {\n+            if (ignoreSurroundingSpaces) {\n                 while (isWhitespace(c) && !eol) {\n                     c = in.read();\n                     eol = isEndOfLine(c);\n             }\n         }\n \n-        if (surroundingSpacesIgnored) {\n+        if (ignoreSurroundingSpaces) {\n             trimTrailingSpaces(tkn.content);\n         }\n \n--- a/src/test/java/org/apache/commons/csv/CSVLexer3.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexer3.java\n                             state = State.PLAIN;\n                             break;\n                         case WHITESPACE:\n-                            if (!surroundingSpacesIgnored){\n+                            if (!ignoreSurroundingSpaces){\n                                 tkn.content.append((char) intch);\n                                 state = State.PLAIN;\n                             }\n                             state = State.ESCAPE_PLAIN;\n                             break;\n                         default:\n-                            trimTrailingSpaces = surroundingSpacesIgnored; // we have a plain token\n+                            trimTrailingSpaces = ignoreSurroundingSpaces; // we have a plain token\n                             tkn.content.append((char) intch);\n                             break;\n                     }\n                             state = State.INQUOTE;\n                             break;\n                         case WHITESPACE: // trailing whitespace may be allowed\n-                            if (!surroundingSpacesIgnored) {\n+                            if (!ignoreSurroundingSpaces) {\n                                 // error invalid char between token and next delimiter\n                                 throw new IOException(\"(line \" + getLineNumber() + \") invalid char between encapsulated token and delimiter\");\n                             }", "timestamp": 1350109727, "metainfo": ""}