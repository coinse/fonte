{"sha": "d10442b68a673444a3d6716d2d7f1cf98618ce05", "log": "Javadoc.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n      *            the input stream\n      * @return a stream of CSVRecord\n      * @throws IOException\n+     *             If an I/O error occurs\n      */\n     public Iterable<CSVRecord> parse(final Reader in) throws IOException {\n         return new CSVParser(in, this);\n          * @param in\n          *            the input stream\n          * @return a CSVRecord stream\n-         * @throws IOException\n+     * @throws IOException\n+     *             If an I/O error occurs\n          */\n         public Iterable<CSVRecord> parse(final Reader in) throws IOException {\n             return this.build().parse(in);\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n      *            a Reader containing \"csv-formatted\" input\n      * @throws IllegalArgumentException\n      *             thrown if the parameters of the format are inconsistent\n+     * @throws IOException\n+     *             If an I/O error occurs\n      */\n     public CSVParser(final Reader input) throws IOException {\n         this(input, CSVFormat.DEFAULT);\n      *            the CSVFormat used for CSV parsing\n      * @throws IllegalArgumentException\n      *             thrown if the parameters of the format are inconsistent\n+     * @throws IOException\n+     *             If an I/O error occurs\n      */\n     public CSVParser(final Reader input, final CSVFormat format) throws IOException {\n         this.lexer = new CSVLexer(format, new ExtendedBufferedReader(input));\n      *            the CSVFormat used for CSV parsing\n      * @throws IllegalArgumentException\n      *             thrown if the parameters of the format are inconsistent\n+     * @throws IOException\n+     *             If an I/O error occurs\n      */\n     public CSVParser(final String input, final CSVFormat format) throws IOException {\n         this(new StringReader(input), format);\n--- a/src/main/java/org/apache/commons/csv/CSVPrinter.java\n+++ b/src/main/java/org/apache/commons/csv/CSVPrinter.java\n      * Flushes the underlying stream.\n      *\n      * @throws IOException\n+     *             If an I/O error occurs\n      */\n     public void flush() throws IOException {\n         if (out instanceof Flushable) {", "timestamp": 1364320102, "metainfo": ""}