{"sha": "10090594827c3c90b9c0a5c8288cda448b0ce10c", "log": "Make doclint happy  ", "commit": "\n--- a/src/main/java/org/apache/commons/cli/DefaultParser.java\n+++ b/src/main/java/org/apache/commons/cli/DefaultParser.java\n      *\n      * @param token The current token to be <b>burst</b>\n      * at the first non-Option encountered.\n+     * @throws ParseException if there are any problems encountered\n+     *                        while parsing the command line token.\n      */\n     protected void handleConcatenatedOptions(String token) throws ParseException\n     {\n--- a/src/main/java/org/apache/commons/cli/HelpFormatter.java\n+++ b/src/main/java/org/apache/commons/cli/HelpFormatter.java\n  * This produces the following output:\n  * \n  * <pre>\n- * usage: myapp -f <FILE> [-h] [-v]\n+ * usage: myapp -f &lt;FILE&gt; [-h] [-v]\n  * Do something useful with an input file\n  * \n- *  -f,--file &lt;FILE>   The file to be processed\n+ *  -f,--file &lt;FILE&gt;   The file to be processed\n  *  -h,--help\n  *  -v,--version       Print the version of the application\n  * \n--- a/src/main/java/org/apache/commons/cli/Option.java\n+++ b/src/main/java/org/apache/commons/cli/Option.java\n      *\n      * @return a clone of this Option instance\n      * @throws RuntimeException if a {@link CloneNotSupportedException} has been thrown\n-     * by {@link super#clone()}\n+     * by {@code super.clone()}\n      */\n     @Override\n     public Object clone()\n--- a/src/main/java/org/apache/commons/cli/Parser.java\n+++ b/src/main/java/org/apache/commons/cli/Parser.java\n      * @param stopAtNonOption specifies whether to stop\n      * flattening when a non option has been encountered\n      * @return a String array of the flattened arguments\n+     * @throws ParseException if there are any problems encountered\n+     *                        while parsing the command line tokens.\n      */\n     protected abstract String[] flatten(Options opts, String[] arguments, boolean stopAtNonOption)\n             throws ParseException;\n      * @param options the <code>Options</code>\n      * @param arguments the <code>arguments</code>\n      * @return the <code>CommandLine</code>\n-     * @throws ParseException if an error occurs when parsing the\n-     * arguments.\n+     * @throws ParseException if there are any problems encountered\n+     *                        while parsing the command line tokens.\n      */\n     public CommandLine parse(Options options, String[] arguments) throws ParseException\n     {\n      * Sets the values of Options using the values in <code>properties</code>.\n      *\n      * @param properties The value properties to be processed.\n+     * @throws ParseException if there are any problems encountered\n+     *                        while processing the properties.\n      */\n     protected void processProperties(Properties properties) throws ParseException\n     {\n--- a/src/main/java/org/apache/commons/cli/PatternOptionBuilder.java\n+++ b/src/main/java/org/apache/commons/cli/PatternOptionBuilder.java\n import java.util.Date;\n \n /**\n- * Allows Options to be created from a single String.\n+ * <p>Allows Options to be created from a single String.\n  * The pattern contains various single character flags and via\n  * an optional punctuation character, their expected type.\n- * <p>\n+ * </p>\n+ * \n  * <table border=\"1\">\n- * <tr><td>a</td><td>-a flag</td></tr>\n- * <tr><td>b@</td><td>-b [classname]</td></tr>\n- * <tr><td>c&gt;</td><td>-c [filename]</td></tr>\n- * <tr><td>d+</td><td>-d [classname] (creates object via empty constructor)</td></tr>\n- * <tr><td>e%</td><td>-e [number] (creates Double/Long instance depending on existing of a '.')</td></tr>\n- * <tr><td>f/</td><td>-f [url]</td></tr>\n- * <tr><td>g:</td><td>-g [string]</td></tr>\n+ *   <caption>Overview of PatternOptionBuilder patterns</caption>\n+ *   <tr><td>a</td><td>-a flag</td></tr>\n+ *   <tr><td>b@</td><td>-b [classname]</td></tr>\n+ *   <tr><td>c&gt;</td><td>-c [filename]</td></tr>\n+ *   <tr><td>d+</td><td>-d [classname] (creates object via empty constructor)</td></tr>\n+ *   <tr><td>e%</td><td>-e [number] (creates Double/Long instance depending on existing of a '.')</td></tr>\n+ *   <tr><td>f/</td><td>-f [url]</td></tr>\n+ *   <tr><td>g:</td><td>-g [string]</td></tr>\n  * </table>\n+ * \n  * <p>\n  * For example, the following allows command line flags of '-v -p string-value -f /dir/file'.\n  * The exclamation mark precede a mandatory option.\n+ * </p>\n  *\n  * <pre>\n  *     Options options = PatternOptionBuilder.parsePattern(\"vp:!f/\");\n  * </pre>\n  *\n  * <p>\n- * TODO These need to break out to OptionType and also to be pluggable.\n+ * TODO: These need to break out to OptionType and also to be pluggable.\n+ * </p>\n  *\n  * @version $Id$\n  */\n--- a/src/main/java/org/apache/commons/cli/PosixParser.java\n+++ b/src/main/java/org/apache/commons/cli/PosixParser.java\n      * <p>An implementation of {@link Parser}'s abstract\n      * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>\n      *\n-     * <p>The following are the rules used by this flatten method.\n+     * <p>The following are the rules used by this flatten method.</p>\n      * <ol>\n      *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not\n      *  burst anymore of <code>arguments</code> entries, just add each\n      *  by any of the previous rules, then the entry is added to the list\n      *  of processed tokens.</li>\n      * </ol>\n-     * </p>\n      *\n      * @param options The command line {@link Options}\n      * @param arguments The command line arguments to be parsed", "timestamp": 1430663251, "metainfo": ""}