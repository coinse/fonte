{"sha": "38ab386d9d86c6cacea817954064bb25fba312aa", "log": "Add more descriptive methods to Option.Builder, adapt unit tests.  ", "commit": "\n--- a/src/main/java/org/apache/commons/cli/Option.java\n+++ b/src/main/java/org/apache/commons/cli/Option.java\n         }\n         \n         /**\n+         * Marks this Option as required.\n+         *\n+         * @return this builder, to allow method chaining\n+         */\n+        public Builder required()\n+        {\n+            return required(true);\n+        }\n+\n+        /**\n          * Sets whether the Option is mandatory.\n          *\n          * @param required specifies whether the Option is mandatory\n             this.type = type;\n             return this;\n         }\n-        \n-        /**\n-         * Sets the value separator. For example if the argument value\n-         * was a Java property, the value separator would be '='.\n+\n+        /**\n+         * The Option will use '=' as a means to separate argument value.\n+         *\n+         * @return this builder, to allow method chaining\n+         */\n+        public Builder valueSeparator()\n+        {\n+            return valueSeparator('=');\n+        }\n+\n+        /**\n+         * The Option will use <code>sep</code> as a means to\n+         * separate argument values.\n+         * <p>\n+         * <b>Example:</b>\n+         * <pre>\n+         * Option opt = Option.builder(\"D\").valueSeparator('=')\n+         *                                 .build();\n+         *\n+         * String args = \"-Dkey=value\";\n+         * CommandLine line = parser.parse(args);\n+         * String propertyName = opt.getValue(0);  // will be \"key\"\n+         * String propertyValue = opt.getValue(1); // will be \"value\"\n+         * </pre>\n          *\n          * @param sep The value separator.\n          * @return this builder, to allow method chaining\n--- a/src/main/java/org/apache/commons/cli/OptionBuilder.java\n+++ b/src/main/java/org/apache/commons/cli/OptionBuilder.java\n     /**\n      * The next Option created uses <code>sep</code> as a means to\n      * separate argument values.\n-     *\n+     * <p>\n      * <b>Example:</b>\n      * <pre>\n-     * Option opt = OptionBuilder.withValueSeparator(':')\n+     * Option opt = OptionBuilder.withValueSeparator('=')\n      *                           .create('D');\n      *\n+     * String args = \"-Dkey=value\";\n      * CommandLine line = parser.parse(args);\n-     * String propertyName = opt.getValue(0);\n-     * String propertyValue = opt.getValue(1);\n+     * String propertyName = opt.getValue(0);  // will be \"key\"\n+     * String propertyValue = opt.getValue(1); // will be \"value\"\n      * </pre>\n      *\n      * @param sep The value separator to be used for the argument values.\n--- a/src/test/java/org/apache/commons/cli/HelpFormatterTest.java\n+++ b/src/test/java/org/apache/commons/cli/HelpFormatterTest.java\n     public void testPrintOptionGroupUsage()\n     {\n         OptionGroup group = new OptionGroup();\n-        group.addOption(OptionBuilder.create(\"a\"));\n-        group.addOption(OptionBuilder.create(\"b\"));\n-        group.addOption(OptionBuilder.create(\"c\"));\n+        group.addOption(Option.builder(\"a\").build());\n+        group.addOption(Option.builder(\"b\").build());\n+        group.addOption(Option.builder(\"c\").build());\n \n         Options options = new Options();\n         options.addOptionGroup(group);\n     public void testPrintRequiredOptionGroupUsage()\n     {\n         OptionGroup group = new OptionGroup();\n-        group.addOption(OptionBuilder.create(\"a\"));\n-        group.addOption(OptionBuilder.create(\"b\"));\n-        group.addOption(OptionBuilder.create(\"c\"));\n+        group.addOption(Option.builder(\"a\").build());\n+        group.addOption(Option.builder(\"b\").build());\n+        group.addOption(Option.builder(\"c\").build());\n         group.setRequired(true);\n \n         Options options = new Options();\n     @Test\n     public void testDefaultArgName()\n     {\n-        Option option = OptionBuilder.hasArg().isRequired().create(\"f\");\n+        Option option = Option.builder(\"f\").hasArg().required(true).build();\n         \n         Options options = new Options();\n         options.addOption(option);\n         Option newRun = new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\n         Option trackerRun = new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\n         \n-        Option timeLimit = OptionBuilder.withLongOpt(\"limit\")\n+        Option timeLimit = Option.builder(\"l\")\n+                                 .longOpt(\"limit\")\n+                                 .hasArg()\n+                                 .valueSeparator()\n+                                 .desc(\"Set time limit for execution, in mintues\")\n+                                 .build();\n+        \n+        Option age = Option.builder(\"a\").longOpt(\"age\")\n                                         .hasArg()\n-                                        .withValueSeparator()\n-                                        .withDescription(\"Set time limit for execution, in mintues\")\n-                                        .create(\"l\");\n-        \n-        Option age = OptionBuilder.withLongOpt(\"age\")\n-                                        .hasArg()\n-                                        .withValueSeparator()\n-                                        .withDescription(\"Age (in days) of cache item before being recomputed\")\n-                                        .create(\"a\");\n-        \n-        Option server = OptionBuilder.withLongOpt(\"server\")\n-                                        .hasArg()\n-                                        .withValueSeparator()\n-                                        .withDescription(\"The NLT server address\")\n-                                        .create(\"s\");\n-        \n-        Option numResults = OptionBuilder.withLongOpt(\"results\")\n-                                        .hasArg()\n-                                        .withValueSeparator()\n-                                        .withDescription(\"Number of results per item\")\n-                                        .create(\"r\");\n-        \n-        Option configFile = OptionBuilder.withLongOpt(\"config\")\n-                                        .hasArg()\n-                                        .withValueSeparator()\n-                                        .withDescription(\"Use the specified configuration file\")\n-                                        .create();\n+                                        .valueSeparator()\n+                                        .desc(\"Age (in days) of cache item before being recomputed\")\n+                                        .build();\n+        \n+        Option server = Option.builder(\"s\").longOpt(\"server\")\n+                                           .hasArg()\n+                                           .valueSeparator()\n+                                           .desc(\"The NLT server address\")\n+                                           .build();\n+        \n+        Option numResults = Option.builder(\"r\").longOpt(\"results\")\n+                                               .hasArg()\n+                                               .valueSeparator()\n+                                               .desc(\"Number of results per item\")\n+                                               .build();\n+        \n+        Option configFile = Option.builder().longOpt(\"config\")\n+                                            .hasArg()\n+                                            .valueSeparator()\n+                                            .desc(\"Use the specified configuration file\")\n+                                            .build();\n         \n         Options mOptions = new Options();\n         mOptions.addOption(help);\n     {\n         Options options = new Options();\n         options.addOption( \"f\", true, \"the file\" );\n-        options.addOption(OptionBuilder.withLongOpt(\"size\").withDescription(\"the size\").hasArg().withArgName(\"SIZE\").create('s'));\n-        options.addOption(OptionBuilder.withLongOpt(\"age\").withDescription(\"the age\").hasArg().create());\n+        options.addOption(Option.builder(\"s\").longOpt(\"size\").desc(\"the size\").hasArg().argName(\"SIZE\").build());\n+        options.addOption(Option.builder().longOpt(\"age\").desc(\"the age\").hasArg().build());\n         \n         HelpFormatter formatter = new HelpFormatter();\n         assertEquals(HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR, formatter.getLongOptSeparator());\n     {\n         Options options = new Options();\n         options.addOption( \"f\", true, \"the file\" );\n-        options.addOption(OptionBuilder.withLongOpt(\"size\").withDescription(\"the size\").hasArg().withArgName(\"SIZE\").create('s'));\n-        options.addOption(OptionBuilder.withLongOpt(\"age\").withDescription(\"the age\").hasArg().create());\n+        options.addOption(Option.builder(\"s\").longOpt(\"size\").desc(\"the size\").hasArg().argName(\"SIZE\").build());\n+        options.addOption(Option.builder().longOpt(\"age\").desc(\"the age\").hasArg().build());\n         \n         HelpFormatter formatter = new HelpFormatter();\n         formatter.setLongOptSeparator(\"=\");\n--- a/src/test/java/org/apache/commons/cli/OptionBuilderTest.java\n+++ b/src/test/java/org/apache/commons/cli/OptionBuilderTest.java\n \n import org.junit.Test;\n \n+@SuppressWarnings(\"deprecation\") // OptionBuilder is marked deprecated\n public class OptionBuilderTest\n {\n     @Test\n--- a/src/test/java/org/apache/commons/cli/OptionTest.java\n+++ b/src/test/java/org/apache/commons/cli/OptionTest.java\n {\n     private static class TestOption extends Option\n     {\n+        private static final long serialVersionUID = 1L;\n+\n         public TestOption(String opt, boolean hasArg, String description) throws IllegalArgumentException\n         {\n             super(opt, hasArg, description);\n \n     private static class DefaultOption extends Option\n     {\n+        private static final long serialVersionUID = 1L;\n+\n         private final String defaultValue;\n \n         public DefaultOption(String opt, String description, String defaultValue) throws IllegalArgumentException", "timestamp": 1361140341, "metainfo": ""}