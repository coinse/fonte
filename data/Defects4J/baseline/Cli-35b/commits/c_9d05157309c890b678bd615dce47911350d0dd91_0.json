{"sha": "9d05157309c890b678bd615dce47911350d0dd91", "log": "Fix some obvious raw types  ", "commit": "\n--- a/src/main/java/org/apache/commons/cli/PatternOptionBuilder.java\n+++ b/src/main/java/org/apache/commons/cli/PatternOptionBuilder.java\n public class PatternOptionBuilder\n {\n     /** String class */\n-    public static final Class STRING_VALUE = String.class;\n+    public static final Class<String> STRING_VALUE = String.class;\n \n     /** Object class */\n-    public static final Class OBJECT_VALUE = Object.class;\n+    public static final Class<Object> OBJECT_VALUE = Object.class;\n \n     /** Number class */\n-    public static final Class NUMBER_VALUE = Number.class;\n+    public static final Class<Number> NUMBER_VALUE = Number.class;\n \n     /** Date class */\n-    public static final Class DATE_VALUE = Date.class;\n+    public static final Class<Date> DATE_VALUE = Date.class;\n \n     /** Class class */\n     public static final Class CLASS_VALUE = Class.class;\n     // ie) it's for reading not writing.\n \n     /** FileInputStream class */\n-    public static final Class EXISTING_FILE_VALUE = FileInputStream.class;\n+    public static final Class<FileInputStream> EXISTING_FILE_VALUE = FileInputStream.class;\n \n     /** File class */\n-    public static final Class FILE_VALUE = File.class;\n+    public static final Class<File> FILE_VALUE = File.class;\n \n     /** File array class */\n-    public static final Class FILES_VALUE = File[].class;\n+    public static final Class<File[]> FILES_VALUE = File[].class;\n \n     /** URL class */\n-    public static final Class URL_VALUE = URL.class;\n+    public static final Class<URL> URL_VALUE = URL.class;\n \n     /**\n      * Retrieve the class that <code>ch</code> represents.\n--- a/src/test/java/org/apache/commons/cli/ParserTestCase.java\n+++ b/src/test/java/org/apache/commons/cli/ParserTestCase.java\n \n         CommandLine cl = parser.parse(options, args);\n \n-        List values = Arrays.asList(cl.getOptionValues(\"J\"));\n+        List<String> values = Arrays.asList(cl.getOptionValues(\"J\"));\n         assertNotNull(\"null values\", values);\n         assertEquals(\"number of values\", 4, values.size());\n         assertEquals(\"value 1\", \"source\", values.get(0));\n         assertEquals(\"value 3\", \"target\", values.get(2));\n         assertEquals(\"value 4\", \"1.5\", values.get(3));\n         \n-        List argsleft = cl.getArgList();\n+        List<?> argsleft = cl.getArgList();\n         assertEquals(\"Should be 1 arg left\", 1, argsleft.size());\n         assertEquals(\"Expecting foo\", \"foo\", argsleft.get(0));\n     }\n         assertEquals(\"property 1\", \"true\", props.getProperty(\"param1\"));\n         assertEquals(\"property 2\", \"value2\", props.getProperty(\"param2\"));\n         \n-        List argsleft = cl.getArgList();\n+        List<?> argsleft = cl.getArgList();\n         assertEquals(\"Should be no arg left\", 0, argsleft.size());\n     }\n \n--- a/src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java\n+++ b/src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java\n \n         assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));\n         assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));\n-        assertEquals(\"object flag b\", new Vector(), line.getOptionObject(\"b\"));\n+        assertEquals(\"object flag b\", new Vector<Object>(), line.getOptionObject(\"b\"));\n         assertTrue(\"boolean true flag c\", line.hasOption(\"c\"));\n         assertFalse(\"boolean false flag d\", line.hasOption(\"d\"));\n         assertEquals(\"file flag e\", new File(\"build.xml\"), line.getOptionObject(\"e\"));\n         // tests the char methods of CommandLine that delegate to the String methods\n         assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));\n         assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));\n-        assertEquals(\"object flag b\", new Vector(), line.getOptionObject('b'));\n+        assertEquals(\"object flag b\", new Vector<Object>(), line.getOptionObject('b'));\n         assertTrue(\"boolean true flag c\", line.hasOption('c'));\n         assertFalse(\"boolean false flag d\", line.hasOption('d'));\n         assertEquals(\"file flag e\", new File(\"build.xml\"), line.getOptionObject('e'));", "timestamp": 1359567590, "metainfo": ""}