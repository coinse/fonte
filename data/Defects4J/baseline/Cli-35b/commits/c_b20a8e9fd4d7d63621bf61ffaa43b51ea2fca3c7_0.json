{"sha": "b20a8e9fd4d7d63621bf61ffaa43b51ea2fca3c7", "log": "Applying my patch from CLI-170 - TypeHandler prints messages to stderr. It doesn't change the default behaviour, but it does provide a new method which maybe called to not get the stderr output and instead get a checked exception thrown.   ", "commit": "\n--- a/src/java/org/apache/commons/cli/CommandLine.java\n+++ b/src/java/org/apache/commons/cli/CommandLine.java\n      *\n      * @param opt the name of the option\n      * @return the type of this <code>Option</code>\n+     * @deprecated due to System.err message. Instead use getParsedOptionValue(String)\n      */\n     public Object getOptionObject(String opt)\n+    {\n+        try {\n+            return getParsedOptionValue(opt);\n+        } catch(ParseException pe) {\n+            System.err.println(\"Exception found converting \" + opt + \" to desired type: \" + \n+                pe.getMessage() );\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Return a version of this <code>Option</code> converted to a particular type. \n+     *\n+     * @param opt the name of the option\n+     * @return the value parsed into a particluar object\n+     * @throws ParseException if there are problems turning the option value into the desired type\n+     * @see PatternOptionBuilder\n+     */\n+    public Object getParsedOptionValue(String opt)\n+    throws ParseException\n     {\n         String res = getOptionValue(opt);\n \n--- a/src/java/org/apache/commons/cli/TypeHandler.java\n+++ b/src/java/org/apache/commons/cli/TypeHandler.java\n      * the value of <code>str</code>.\n      */\n     public static Object createValue(String str, Object obj)\n+    throws ParseException\n     {\n         return createValue(str, (Class) obj);\n     }\n      * the value of <code>str</code>.\n      */\n     public static Object createValue(String str, Class clazz)\n+    throws ParseException\n     {\n         if (PatternOptionBuilder.STRING_VALUE == clazz)\n         {\n       * the Object.\n       */\n     public static Object createObject(String classname)\n+    throws ParseException\n     {\n         Class cl = null;\n \n         }\n         catch (ClassNotFoundException cnfe)\n         {\n-            System.err.println(\"Unable to find the class: \" + classname);\n-\n-            return null;\n+            throw new ParseException(\"Unable to find the class: \" + classname);\n         }\n \n         Object instance = null;\n         }\n         catch (Exception e)\n         {\n-            System.err.println(e.getClass().getName() + \"; Unable to create an instance of: \" + classname);\n+            throw new ParseException(e.getClass().getName() + \"; Unable to create an instance of: \" + classname);\n         }\n \n         return instance;\n      * is not a number, null is returned.\n      */\n     public static Number createNumber(String str)\n+    throws ParseException\n     {\n         try\n         {\n         }\n         catch (NumberFormatException e)\n         {\n-            System.err.println(e.getMessage());\n-        }\n-\n-        return null;\n+            throw new ParseException(e.getMessage());\n+        }\n     }\n \n     /**\n      * @return The class if it is found, otherwise return null\n      */\n     public static Class createClass(String classname)\n+    throws ParseException\n     {\n         try\n         {\n         }\n         catch (ClassNotFoundException e)\n         {\n-            System.err.println(\"Unable to find the class: \" + classname);\n-\n-            return null;\n+            throw new ParseException(\"Unable to find the class: \" + classname);\n         }\n     }\n \n      * otherwise return null.\n      */\n     public static Date createDate(String str)\n+    throws ParseException\n     {\n         throw new UnsupportedOperationException(\"Not yet implemented\");\n     }\n      * return null.\n      */\n     public static URL createURL(String str)\n+    throws ParseException\n     {\n         try\n         {\n         }\n         catch (MalformedURLException e)\n         {\n-            System.err.println(\"Unable to parse the URL: \" + str);\n-\n-            return null;\n+            throw new ParseException(\"Unable to parse the URL: \" + str);\n         }\n     }\n \n      * @return The file represented by <code>str</code>.\n      */\n     public static File createFile(String str)\n+    throws ParseException\n     {\n         return new File(str);\n     }\n      * @return The File[] represented by <code>str</code>.\n      */\n     public static File[] createFiles(String str)\n+    throws ParseException\n     {\n         // to implement/port:\n         //        return FileW.findFiles(str);", "timestamp": 1232180615, "metainfo": ""}