{"sha": "4d2c8a22d1e1831858029b8ef225a07f4445a221", "log": "The default argument name displayed is now properly controlled by the help formatter (CLI-205)  ", "commit": "\n--- a/src/main/java/org/apache/commons/cli/HelpFormatter.java\n+++ b/src/main/java/org/apache/commons/cli/HelpFormatter.java\n         {\n             buff.append(\"--\").append(option.getLongOpt());\n         }\n-\n-        // if the Option has a value\n-        if (option.hasArg() && option.hasArgName())\n+        \n+        // if the Option has a value and a non blank argname\n+        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))\n         {\n             buff.append(option.getOpt() == null ? longOptSeparator : \" \");\n-            buff.append(\"<\").append(option.getArgName()).append(\">\");\n-        }\n-\n+            buff.append(\"<\").append(option.getArgName() != null ? option.getArgName() : getArgName()).append(\">\");\n+        }\n+        \n         // if the Option is not a required option\n         if (!required)\n         {\n \n             if (option.hasArg())\n             {\n-                if (option.hasArgName())\n+                String argName = option.getArgName();\n+                if (argName != null && argName.length() == 0)\n                 {\n-                    optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\n-                    optBuf.append(\"<\").append(option.getArgName()).append(\">\");\n+                    // if the option has a blank argname\n+                    optBuf.append(' ');\n                 }\n                 else\n                 {\n-                    optBuf.append(' ');\n+                    optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\n+                    optBuf.append(\"<\").append(argName != null ? option.getArgName() : getArgName()).append(\">\");\n                 }\n             }\n \n--- a/src/main/java/org/apache/commons/cli/Option.java\n+++ b/src/main/java/org/apache/commons/cli/Option.java\n     private String longOpt;\n \n     /** the name of the argument for this option */\n-    private String argName = \"arg\";\n+    private String argName;\n \n     /** description of the option */\n     private String description;\n     }\n \n     /**\n-     * Returns whether the display name for the argument value\n-     * has been set.\n-     *\n-     * @return if the display name for the argument value has been\n-     * set.\n+     * Returns whether the display name for the argument value has been set.\n+     *\n+     * @return if the display name for the argument value has been set.\n      */\n     public boolean hasArgName()\n     {\n--- a/src/main/java/org/apache/commons/cli/OptionBuilder.java\n+++ b/src/main/java/org/apache/commons/cli/OptionBuilder.java\n     private static void reset()\n     {\n         description = null;\n-        argName = \"arg\";\n+        argName = null;\n         longopt = null;\n         type = null;\n         required = false;\n--- a/src/test/java/org/apache/commons/cli/HelpFormatterTest.java\n+++ b/src/test/java/org/apache/commons/cli/HelpFormatterTest.java\n         assertEquals(\"usage: app -f\" + EOL, out.toString());\n     }\n \n+    public void testDefaultArgName()\n+    {\n+        Option option = OptionBuilder.hasArg().isRequired().create(\"f\");\n+        \n+        Options options = new Options();\n+        options.addOption(option);\n+        \n+        StringWriter out = new StringWriter();\n+\n+        HelpFormatter formatter = new HelpFormatter();\n+        formatter.setArgName(\"argument\");\n+        formatter.printUsage(new PrintWriter(out), 80, \"app\", options);\n+\n+        assertEquals(\"usage: app -f <argument>\" + EOL, out.toString());\n+    }\n+\n     public void testRtrim()\n     {\n         HelpFormatter formatter = new HelpFormatter();", "timestamp": 1276985160, "metainfo": ""}