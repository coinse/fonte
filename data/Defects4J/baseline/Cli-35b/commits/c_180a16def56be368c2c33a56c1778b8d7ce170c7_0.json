{"sha": "180a16def56be368c2c33a56c1778b8d7ce170c7", "log": "Added a parameter in HelpFormatter to specify the separator displayed between a long option and its value (CLI-169)  ", "commit": "\n--- a/src/java/org/apache/commons/cli/HelpFormatter.java\n+++ b/src/java/org/apache/commons/cli/HelpFormatter.java\n import java.util.Comparator;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.StringTokenizer;\n-import java.io.InputStream;\n-import java.io.ByteArrayOutputStream;\n \n /** \n  * A formatter of help messages for the current command line options\n     /** default prefix for long Option */\n     public static final String DEFAULT_LONG_OPT_PREFIX = \"--\";\n \n+    /** default separator displayed between a long Option and its value */\n+    public static final String DEFAULT_LONG_OPT_SEPARATOR = \" \";\n+\n     /** default name for an argument */\n     public static final String DEFAULT_ARG_NAME = \"arg\";\n \n      * - use get/setLongOptPrefix methods instead.\n      */\n     public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;\n+\n+    /** The separator displayed between the long option and its value. */\n+    private String longOptSeparator = DEFAULT_LONG_OPT_SEPARATOR;\n \n     /**\n      * the name of the argument\n     public String getLongOptPrefix()\n     {\n         return defaultLongOptPrefix;\n+    }\n+\n+    /**\n+     * Set the separator displayed between a long option and its value.\n+     * Ensure that the separator specified is supported by the parser used,\n+     * typically ' ' or '='.\n+     * \n+     * @param longOptSeparator the separator, typically ' ' or '='.\n+     * @since 1.3\n+     */\n+    public void setLongOptSeparator(String longOptSeparator)\n+    {\n+        this.longOptSeparator = longOptSeparator;\n+    }\n+\n+    /**\n+     * Returns the separator displayed between a long option and its value.\n+     * \n+     * @return the separator\n+     * @since 1.3\n+     */\n+    public String getLongOptSeparator()\n+    {\n+        return longOptSeparator;\n     }\n \n     /**\n     }\n \n     /**\n-     * <p>Prints the usage statement for the specified application.</p>\n+     * Prints the usage statement for the specified application.\n      *\n      * @param pw The PrintWriter to print the usage statement \n      * @param width The number of characters to display per line\n      * @param app The application name\n      * @param options The command line Options\n-     *\n      */\n     public void printUsage(PrintWriter pw, int width, String app, Options options)\n     {\n      * @param option the Option to append\n      * @param required whether the Option is required or not\n      */\n-    private static void appendOption(final StringBuffer buff, final Option option, final boolean required)\n+    private void appendOption(final StringBuffer buff, final Option option, final boolean required)\n     {\n         if (!required)\n         {\n         // if the Option has a value\n         if (option.hasArg() && option.hasArgName())\n         {\n-            buff.append(\" <\").append(option.getArgName()).append(\">\");\n+            buff.append(option.getOpt() == null ? longOptSeparator : \" \");\n+            buff.append(\"<\").append(option.getArgName()).append(\">\");\n         }\n \n         // if the Option is not a required option\n     }\n \n     /**\n-     * <p>Print the help for the specified Options to the specified writer, \n-     * using the specified width, left padding and description padding.</p>\n+     * Print the help for the specified Options to the specified writer, \n+     * using the specified width, left padding and description padding.\n      *\n      * @param pw The printWriter to write the help to\n      * @param width The number of characters to display per line\n             {\n                 if (option.hasArgName())\n                 {\n-                    optBuf.append(\" <\").append(option.getArgName()).append(\">\");\n+                    optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\n+                    optBuf.append(\"<\").append(option.getArgName()).append(\">\");\n                 }\n                 else\n                 {\n--- a/src/test/org/apache/commons/cli/HelpFormatterTest.java\n+++ b/src/test/org/apache/commons/cli/HelpFormatterTest.java\n                 ,out.toString());\n     }\n     \n+    public void testHelpWithLongOptSeparator() throws Exception\n+    {\n+        Options options = new Options();\n+        options.addOption( \"f\", true, \"the file\" );\n+        options.addOption(OptionBuilder.withLongOpt(\"size\").withDescription(\"the size\").hasArg().withArgName(\"SIZE\").create('s'));\n+        options.addOption(OptionBuilder.withLongOpt(\"age\").withDescription(\"the age\").hasArg().create());\n+        \n+        HelpFormatter formatter = new HelpFormatter();\n+        assertEquals(HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR, formatter.getLongOptSeparator());\n+        formatter.setLongOptSeparator(\"=\");\n+        assertEquals(\"=\", formatter.getLongOptSeparator());\n+        \n+        StringWriter out = new StringWriter();\n+\n+        formatter.printHelp(new PrintWriter(out), 80, \"create\", \"header\", options, 2, 2, \"footer\");\n+\n+        assertEquals(\n+                \"usage: create\" + EOL +\n+                \"header\" + EOL +\n+                \"     --age=<arg>    the age\" + EOL +\n+                \"  -f <arg>          the file\" + EOL +\n+                \"  -s,--size=<SIZE>  the size\" + EOL +\n+                \"footer\" + EOL,\n+                out.toString());\n+    }\n+\n+    public void testUsageWithLongOptSeparator() throws Exception\n+    {\n+        Options options = new Options();\n+        options.addOption( \"f\", true, \"the file\" );\n+        options.addOption(OptionBuilder.withLongOpt(\"size\").withDescription(\"the size\").hasArg().withArgName(\"SIZE\").create('s'));\n+        options.addOption(OptionBuilder.withLongOpt(\"age\").withDescription(\"the age\").hasArg().create());\n+        \n+        HelpFormatter formatter = new HelpFormatter();\n+        formatter.setLongOptSeparator(\"=\");\n+        \n+        StringWriter out = new StringWriter();\n+        \n+        formatter.printUsage(new PrintWriter(out), 80, \"create\", options);\n+        \n+        assertEquals(\"usage: create [--age=<arg>] [-f <arg>] [-s <SIZE>]\", out.toString().trim());\n+    }\n }", "timestamp": 1276611064, "metainfo": ""}