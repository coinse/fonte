{"sha": "2391d4701954389c3b51ac2357202cc335225189", "log": "CLI-126: Applied patch from Brian Egge  ", "commit": "\n--- a/src/java/org/apache/commons/cli2/CommandLine.java\n+++ b/src/java/org/apache/commons/cli2/CommandLine.java\n \n \n     /**\n-     * Retrieves the value associated with the specified property\n+     * Retrieves the value associated with the specified property for the default property set\n      *\n      * @param property the property name to lookup\n      * @return the value of the property or null\n     /**\n      * Retrieves the value associated with the specified property\n      *\n+     * @param option the option i.e., -D\n+     * @param property the property name to lookup\n+     * @return the value of the property or null\n+     */\n+    String getProperty(final Option option, final String property);\n+\n+    /**\n+     * Retrieves the value associated with the specified property\n+     *\n+     * @param option the option i.e., -D\n      * @param property the property name to lookup\n      * @param defaultValue the value to use if no other is found\n      * @return the value of the property or defaultValue\n      */\n-    String getProperty(final String property, final String defaultValue);\n-\n-    /**\n-     * Retrieves the set of all property names associated with this CommandLine\n+    String getProperty(final Option option, final String property, final String defaultValue);\n+\n+    /**\n+     * Retrieves the set of all property names associated with this option\n+     *\n+     * @param option the option i.e., -D\n+     * @return a none null set of property names\n+     */\n+    Set getProperties(final Option option);\n+\n+    /**\n+     * Retrieves the set of all property names associated with the default property option\n      *\n      * @return a none null set of property names\n      */\n--- a/src/java/org/apache/commons/cli2/WriteableCommandLine.java\n+++ b/src/java/org/apache/commons/cli2/WriteableCommandLine.java\n      * Adds a property value to a name in the CommandLine.\n      * Replaces any existing value for the property.\n      *\n+     * @param option the Option to add to\n+     * @param property the name of the property\n+     * @param value the value of the property\n+     */\n+    void addProperty(final Option option, final String property, final String value);\n+\n+    /**\n+     * Adds a property value to the default property set.\n+     * Replaces any existing value for the property.\n+     *\n      * @param property the name of the property\n      * @param value the value of the property\n      */\n--- a/src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java\n+++ b/src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java\n         return getSwitch(option, null);\n     }\n \n-    public final String getProperty(final String property) {\n-        return getProperty(property, null);\n+    public final String getProperty(final Option option, final String property) {\n+        return getProperty(option, property, null);\n     }\n \n     public final int getOptionCount(final String trigger) {\n--- a/src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java\n+++ b/src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java\n \n import org.apache.commons.cli2.CommandLine;\n import org.apache.commons.cli2.Option;\n+import org.apache.commons.cli2.option.PropertyOption;\n \n /**\n  * Manages a queue of default CommandLines. This CommandLine implementation is\n         return defaultValue;\n     }\n \n-    public String getProperty(String property, String defaultValue) {\n+    public String getProperty(final String property) {\n+        return getProperty(new PropertyOption(), property);\n+    }\n+\n+    public String getProperty(final Option option, String property, String defaultValue) {\n         for (final Iterator i = commandLines.iterator(); i.hasNext();) {\n             final CommandLine commandLine = (CommandLine)i.next();\n-            final String actual = commandLine.getProperty(property);\n+            final String actual = commandLine.getProperty(option, property);\n             if (actual != null) {\n                 return actual;\n             }\n         return defaultValue;\n     }\n \n-    public Set getProperties() {\n+    public Set getProperties(final Option option) {\n         final Set all = new HashSet();\n         for (final Iterator i = commandLines.iterator(); i.hasNext();) {\n             final CommandLine commandLine = (CommandLine)i.next();\n-            all.addAll(commandLine.getProperties());\n+            all.addAll(commandLine.getProperties(option));\n         }\n         return Collections.unmodifiableSet(all);\n     }\n+\n+    public Set getProperties() {\n+        return getProperties(new PropertyOption());\n+    }\n }\n--- a/src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java\n+++ b/src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java\n import java.util.prefs.Preferences;\n \n import org.apache.commons.cli2.Option;\n+import org.apache.commons.cli2.option.PropertyOption;\n \n /**\n  * A CommandLine implementation using the Preferences API, useful when\n         }\n     }\n \n-    public String getProperty(final String property, final String defaultValue) {\n+    public String getProperty(final String property) {\n+        return getProperty(new PropertyOption(), property);\n+    }\n+\n+    public String getProperty(final Option option, final String property, final String defaultValue) {\n         return preferences.get(property, defaultValue);\n     }\n \n-    public Set getProperties() {\n+\tpublic Set getProperties(final Option option) {\n         try {\n             return new HashSet(Arrays.asList(preferences.keys()));\n         } catch (BackingStoreException e) {\n             return Collections.EMPTY_SET;\n         }\n+    }\n+\n+    public Set getProperties() {\n+        return getProperties(new PropertyOption());\n     }\n \n     public List getOptions() {\n--- a/src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java\n+++ b/src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java\n import java.util.StringTokenizer;\n \n import org.apache.commons.cli2.Option;\n+import org.apache.commons.cli2.option.PropertyOption;\n \n /**\n  * A CommandLine implementation using a java Properties instance, useful for\n         }\n     }\n \n-    public String getProperty(final String property, final String defaultValue) {\n+    public String getProperty(final String property) {\n+        return getProperty(new PropertyOption(), property);\n+    }\n+\n+    public String getProperty(final Option option, final String property, final String defaultValue) {\n         return properties.getProperty(property,defaultValue);\n     }\n \n+\tpublic Set getProperties(final Option option) {\n+        return properties.keySet();\n+    }\n+\n     public Set getProperties() {\n-        return properties.keySet();\n+        return getProperties(new PropertyOption());\n     }\n \n     public List getOptions() {\n--- a/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java\n+++ b/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java\n import org.apache.commons.cli2.Argument;\n import org.apache.commons.cli2.Option;\n import org.apache.commons.cli2.WriteableCommandLine;\n+import org.apache.commons.cli2.option.PropertyOption;\n import org.apache.commons.cli2.resource.ResourceConstants;\n import org.apache.commons.cli2.resource.ResourceHelper;\n \n  */\n public class WriteableCommandLineImpl\n     extends CommandLineImpl implements WriteableCommandLine {\n-    private final Properties properties = new Properties();\n+    private final Map optionToProperties = new HashMap();\n+//    private final Properties properties = new Properties();\n     private final List options = new ArrayList();\n     private final Map nameToOption = new HashMap();\n     private final Map values = new HashMap();\n         return bool;\n     }\n \n-    public void addProperty(final String property,\n+    public String getProperty(final String property) {\n+        return getProperty(new PropertyOption(), property);\n+    }\n+\n+    public void addProperty(final Option option,\n+                            final String property,\n                             final String value) {\n+        Properties properties = (Properties) optionToProperties.get(option);\n+        if (properties == null) {\n+            properties = new Properties();\n+            optionToProperties.put(option, properties);\n+        }\n         properties.setProperty(property, value);\n     }\n \n-    public String getProperty(final String property,\n+    public void addProperty(final String property, final String value) {\n+        addProperty(new PropertyOption(), property, value);\n+    }\n+\n+    public String getProperty(final Option option,\n+                              final String property,\n                               final String defaultValue) {\n+        Properties properties = (Properties) optionToProperties.get(option);\n+        if (properties == null) {\n+            return defaultValue;\n+        }\n         return properties.getProperty(property, defaultValue);\n     }\n \n+    public Set getProperties(final Option option) {\n+        Properties properties = (Properties) optionToProperties.get(option);\n+        if (properties == null) {\n+            return Collections.EMPTY_SET;\n+        }\n+        return Collections.unmodifiableSet(properties.keySet());\n+    }\n+\n     public Set getProperties() {\n-        return Collections.unmodifiableSet(properties.keySet());\n+        return getProperties(new PropertyOption());\n     }\n \n     public boolean looksLikeOption(final String trigger) {\n--- a/src/java/org/apache/commons/cli2/option/PropertyOption.java\n+++ b/src/java/org/apache/commons/cli2/option/PropertyOption.java\n             value = arg.substring(equalsIndex + 1);\n         }\n \n-        commandLine.addProperty(property, value);\n+        commandLine.addProperty(this, property, value);\n     }\n \n     public Set getTriggers() {\n--- a/src/test/org/apache/commons/cli2/CommandLineTestCase.java\n+++ b/src/test/org/apache/commons/cli2/CommandLineTestCase.java\n      * Class to test for String getProperty(String, String)\n      */\n     public final void testGetPropertyStringString() {\n-        assertEquals(\"present property\", commandLine.getProperty(\"present\", \"default property\"));\n-        assertEquals(\"default property\", commandLine.getProperty(\"missing\", \"default property\"));\n+        assertEquals(\"present property\", commandLine.getProperty(new PropertyOption(), \"present\", \"default property\"));\n+        assertEquals(\"default property\", commandLine.getProperty(new PropertyOption(), \"missing\", \"default property\"));\n     }\n \n     public final void testGetProperties() {\n \n     // OLD TESTS FOLLOW\n     public final void testProperties() {\n-        final Option option = new PropertyOption();\n+        final PropertyOption option = new PropertyOption();\n         final List args = CLITestCase.list();\n         final WriteableCommandLine writeable = OptionTestCase.commandLine(option, args);\n \n-        assertTrue(writeable.getProperties().isEmpty());\n-\n-        writeable.addProperty(\"myprop\", \"myval\");\n-        assertEquals(1, writeable.getProperties().size());\n-        assertEquals(\"myval\", writeable.getProperty(\"myprop\"));\n-\n-        writeable.addProperty(\"myprop\", \"myval2\");\n-        assertEquals(1, writeable.getProperties().size());\n-        assertEquals(\"myval2\", writeable.getProperty(\"myprop\"));\n-\n-        writeable.addProperty(\"myprop2\", \"myval3\");\n-        assertEquals(2, writeable.getProperties().size());\n-        assertEquals(\"myval3\", writeable.getProperty(\"myprop2\"));\n+        assertTrue(writeable.getProperties(option).isEmpty());\n+\n+        writeable.addProperty(option, \"myprop\", \"myval\");\n+        assertEquals(1, writeable.getProperties(option).size());\n+        assertEquals(\"myval\", writeable.getProperty(option, \"myprop\"));\n+\n+        writeable.addProperty(option, \"myprop\", \"myval2\");\n+        assertEquals(1, writeable.getProperties(option).size());\n+        assertEquals(\"myval2\", writeable.getProperty(option, \"myprop\"));\n+\n+        writeable.addProperty(option, \"myprop2\", \"myval3\");\n+        assertEquals(2, writeable.getProperties(option).size());\n+        assertEquals(\"myval3\", writeable.getProperty(option, \"myprop2\"));\n     }\n \n     public final void testOptions() {\n--- a/src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java\n+++ b/src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java\n package org.apache.commons.cli2;\n \n import org.apache.commons.cli2.option.ArgumentTest;\n+import org.apache.commons.cli2.option.PropertyOption;\n \n /**\n  * @author Rob Oxspring\n \tprotected final CommandLine createCommandLine() {\n \t\tfinal WriteableCommandLine cl = createWriteableCommandLine();\n \t\tcl.addOption(present);\n-\t\tcl.addProperty(\"present\",\"present property\");\n+\t\tcl.addProperty(new PropertyOption(), \"present\",\"present property\");\n \t\tcl.addSwitch(bool,true);\n \t\tcl.addValue(present,\"present value\");\n \t\tcl.addOption(multiple);\n \t\tassertTrue(writeable.hasOption(present));\n \t}\n \tpublic final void testAddProperty() {\n-\t\tassertNull(writeable.getProperty(\"present\"));\n-\t\twriteable.addProperty(\"present\",\"present value\");\n-\t\tassertEquals(\"present value\",writeable.getProperty(\"present\"));\n+\t\tassertNull(writeable.getProperty(new PropertyOption(), \"present\"));\n+\t\twriteable.addProperty(new PropertyOption(), \"present\",\"present value\");\n+\t\tassertEquals(\"present value\",writeable.getProperty(new PropertyOption(), \"present\"));\n \t}\n \tpublic final void testLooksLikeOption() {\n \t\t//TODO Implement looksLikeOption().\n--- /dev/null\n+++ b/src/test/org/apache/commons/cli2/bug/BugCLI126Test.java\n+package org.apache.commons.cli2.bug;\n+\n+import junit.framework.TestCase;\n+import org.apache.commons.cli2.option.PropertyOption;\n+import org.apache.commons.cli2.Group;\n+import org.apache.commons.cli2.CommandLine;\n+import org.apache.commons.cli2.OptionException;\n+import org.apache.commons.cli2.commandline.Parser;\n+import org.apache.commons.cli2.builder.GroupBuilder;\n+\n+/**\n+ * @author brianegge\n+ */\n+public class BugCLI126Test extends TestCase {\n+    public void testMultiplePropertyArgs() throws OptionException {\n+        PropertyOption conf = new PropertyOption(\"-P\", \"Properties for this process\", 1);\n+        PropertyOption env = new PropertyOption(\"-C\", \"Properties for child processes\", 2);\n+        GroupBuilder builder = new GroupBuilder();\n+        Group options = builder.withOption(conf).withOption(env).create();\n+\n+        Parser parser = new Parser();\n+        parser.setGroup(options);\n+        CommandLine line =\n+            parser.parseAndHelp(\n+                new String[] {\n+                    \"-Phome=.\",\n+                    \"-Chome=/\"\n+                    });\n+        assertEquals(\".\", line.getProperty(conf, \"home\"));\n+        assertEquals(\"/\", line.getProperty(env, \"home\"));\n+    }\n+}\n--- a/src/test/org/apache/commons/cli2/bug/BugCLI12Test.java\n+++ b/src/test/org/apache/commons/cli2/bug/BugCLI12Test.java\n   public void testBug() {\n     Argument arg = new ArgumentBuilder().withName(\"file\").create();\n \n-    Option option = new PropertyOption();\n+    PropertyOption option = new PropertyOption();\n \n     Group group = new GroupBuilder().withOption(option).withOption(arg).create();\n \n       assertTrue(\"Couldn't parse valid commandLine\", false);\n     }\n \n-    assertEquals( \"myval1\", cl.getProperty(\"myprop1\"));\n-    assertEquals( \"myval2\", cl.getProperty(\"myprop2\"));\n+    assertEquals( \"myval1\", cl.getProperty(option, \"myprop1\"));\n+    assertEquals( \"myval2\", cl.getProperty(option, \"myprop2\"));\n \n     String extraArgs = (String) cl.getValue(arg);\n     assertEquals( \"myfile\", extraArgs);\n--- a/src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java\n+++ b/src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java\n import org.apache.commons.cli2.CommandLineTestCase;\n import org.apache.commons.cli2.Option;\n import org.apache.commons.cli2.WriteableCommandLine;\n+import org.apache.commons.cli2.option.PropertyOption;\n import org.apache.commons.cli2.builder.DefaultOptionBuilder;\n \n /**\n     protected final CommandLine createCommandLine() {\n         final WriteableCommandLine writeable = new WriteableCommandLineImpl(root, new ArrayList());\n         writeable.addOption(present);\n-        writeable.addProperty(\"present\", \"present property\");\n+        writeable.addProperty(new PropertyOption(), \"present\", \"present property\");\n         writeable.addSwitch(bool, true);\n         writeable.addValue(present, \"present value\");\n         writeable.addOption(multiple);\n--- a/src/test/org/apache/commons/cli2/option/PropertyOptionTest.java\n+++ b/src/test/org/apache/commons/cli2/option/PropertyOptionTest.java\n      * @see org.apache.commons.cli2.OptionTestCase#testProcess()\n      */\n     public void testProcess() throws OptionException {\n-        final Option option = new PropertyOption();\n+        final PropertyOption option = new PropertyOption();\n         final List args = list(\"-Dmyprop=myvalue\");\n         final WriteableCommandLine commandLine = commandLine(option, args);\n         final ListIterator iterator = args.listIterator();\n \n         option.process(commandLine, iterator);\n-        assertEquals(\"myvalue\", commandLine.getProperty(\"myprop\"));\n+        assertEquals(\"myvalue\", commandLine.getProperty(option, \"myprop\"));\n         assertFalse(iterator.hasNext());\n-        assertEquals(1, commandLine.getProperties().size());\n+        assertEquals(1, commandLine.getProperties(option).size());\n     }\n \n     public void testProcess_UnexpectedOptionException() {\n     }\n \n     public void testProcess_BadPropertyException() throws OptionException {\n-        final Option option = new PropertyOption();\n+        final PropertyOption option = new PropertyOption();\n         final List args = list(\"-Dmyprop\");\n         final WriteableCommandLine commandLine = commandLine(option, args);\n         final ListIterator iterator = args.listIterator();\n \n         option.process(commandLine, iterator);\n \n-        assertEquals(\"true\", commandLine.getProperty(\"myprop\"));\n+        assertEquals(\"true\", commandLine.getProperty(option, \"myprop\"));\n     }\n \n     public void testProcess_SetToEmpty() throws OptionException {\n-        final Option option = new PropertyOption();\n+        final PropertyOption option = new PropertyOption();\n         final List args = list(\"-Dmyprop=\");\n         final WriteableCommandLine commandLine = commandLine(option, args);\n         final ListIterator iterator = args.listIterator();\n \n         option.process(commandLine, iterator);\n-        assertEquals(\"\", commandLine.getProperty(\"myprop\"));\n+        assertEquals(\"\", commandLine.getProperty(option, \"myprop\"));\n         assertFalse(iterator.hasNext());\n-        assertEquals(1, commandLine.getProperties().size());\n+        assertEquals(1, commandLine.getProperties(option).size());\n     }\n \n     /*", "timestamp": 1216758429, "metainfo": ""}