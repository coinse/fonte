{"sha": "c851091864d903229ebd16656a40b28de6e56846", "log": "Remove tab characters  ", "commit": "\n--- a/src/java/org/apache/commons/cli2/Option.java\n+++ b/src/java/org/apache/commons/cli2/Option.java\n      */\n     int getId();\n \n-\t/**\n-\t * Recursively searches for an option with the supplied trigger.\n-\t *\n-\t * @param trigger the trigger to search for.\n-\t * @return the matching option or null.\n-\t */\n-\tOption findOption(final String trigger);\n+    /**\n+     * Recursively searches for an option with the supplied trigger.\n+     *\n+     * @param trigger the trigger to search for.\n+     * @return the matching option or null.\n+     */\n+    Option findOption(final String trigger);\n \n     /**\n      * Indicates whether this option is required to be present.\n--- a/src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java\n+++ b/src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java\n  */\n public class ArgumentBuilder {\n \n-\t/** i18n */\n-\tprivate final static ResourceHelper resources = ResourceHelper.getResourceHelper();\n+    /** i18n */\n+    private final static ResourceHelper resources = ResourceHelper.getResourceHelper();\n \n     /** name of the argument. Used for display and lookups in CommandLine */\n     private String name;\n      * @return this ArgumentBuilder\n      */\n     public final ArgumentBuilder withName(final String newName) {\n-    \tif (newName == null) {\n-    \t\tthrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_NAME));\n-    \t}\n-    \tif (\"\".equals(newName)) {\n-    \t\tthrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_NAME));\n-    \t}\n+        if (newName == null) {\n+            throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_NAME));\n+        }\n+        if (\"\".equals(newName)) {\n+            throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_NAME));\n+        }\n         this.name = newName;\n         return this;\n     }\n      * @return this ArgumentBuilder\n      */\n     public final ArgumentBuilder withMinimum(final int newMinimum) {\n-    \tif (newMinimum < 0) {\n-    \t\tthrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MINIMUM));\n-    \t}\n+        if (newMinimum < 0) {\n+            throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MINIMUM));\n+        }\n         this.minimum = newMinimum;\n         return this;\n     }\n      * @return this ArgumentBuilder\n      */\n     public final ArgumentBuilder withMaximum(final int newMaximum) {\n-    \tif (newMaximum < 0) {\n-    \t\tthrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MAXIMUM));\n-    \t}\n+        if (newMaximum < 0) {\n+            throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MAXIMUM));\n+        }\n         this.maximum = newMaximum;\n         return this;\n     }\n      * @return this ArgumentBuilder\n      */\n     public final ArgumentBuilder withValidator(final Validator newValidator) {\n-    \tif (newValidator == null) {\n-    \t\tthrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_VALIDATOR));\n-    \t}\n+        if (newValidator == null) {\n+            throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_VALIDATOR));\n+        }\n         this.validator = newValidator;\n         return this;\n     }\n      * @return this ArgumentBuilder\n      */\n     public final ArgumentBuilder withConsumeRemaining(final String newConsumeRemaining) {\n-    \tif (newConsumeRemaining == null) {\n-    \t\tthrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_CONSUME_REMAINING));\n-    \t}\n-    \tif ( \"\".equals(newConsumeRemaining)) {\n-    \t\tthrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_CONSUME_REMAINING));\n-    \t}\n+        if (newConsumeRemaining == null) {\n+            throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_CONSUME_REMAINING));\n+        }\n+        if ( \"\".equals(newConsumeRemaining)) {\n+            throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_CONSUME_REMAINING));\n+        }\n         this.consumeRemaining = newConsumeRemaining;\n         return this;\n     }\n      * @return this ArgumentBuilder\n      */\n     public final ArgumentBuilder withDefault(final Object defaultValue) {\n-    \tif (defaultValue == null) {\n-    \t\tthrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULT));\n-    \t}\n+        if (defaultValue == null) {\n+            throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULT));\n+        }\n \n         if (this.defaultValues == null) {\n             this.defaultValues = new ArrayList(1);\n      * @return this ArgumentBuilder\n      */\n     public final ArgumentBuilder withDefaults(final List newDefaultValues) {\n-    \tif (newDefaultValues == null) {\n-    \t\tthrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULTS));\n-    \t}\n+        if (newDefaultValues == null) {\n+            throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULTS));\n+        }\n         this.defaultValues = newDefaultValues;\n         return this;\n     }\n--- a/src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java\n+++ b/src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java\n      * @return an unmodifiable iterator\n      */\n     public Iterator commandLines(){\n-    \treturn Collections.unmodifiableList(commandLines).iterator();\n+        return Collections.unmodifiableList(commandLines).iterator();\n     }\n \n     public Option getOption(String trigger) {\n             }\n         }\n         if(defaultValues==null){\n-        \treturn Collections.EMPTY_LIST;\n+            return Collections.EMPTY_LIST;\n         }\n         else{\n-        \treturn defaultValues;\n+            return defaultValues;\n         }\n     }\n \n--- a/src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java\n+++ b/src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java\n  */\n public class PreferencesCommandLine extends CommandLineImpl {\n \n-\tprivate static final char NUL = '\\0';\n-\tprivate final Preferences preferences;\n-\tprivate final Option root;\n-\tprivate final char separator;\n+    private static final char NUL = '\\0';\n+    private final Preferences preferences;\n+    private final Option root;\n+    private final char separator;\n \n-\t/**\n+    /**\n      * Creates a new PreferencesCommandLine using the specified root Option and\n      * Preferences node.  Argument values will be separated using the char 0.\n      *\n-\t * @param root the CommandLine's root Option\n-\t * @param preferences the Preferences node to get values from\n-\t */\n-\tpublic PreferencesCommandLine(final Option root, final Preferences preferences){\n-\t\tthis(root,preferences,NUL);\n-\t}\n+     * @param root the CommandLine's root Option\n+     * @param preferences the Preferences node to get values from\n+     */\n+    public PreferencesCommandLine(final Option root, final Preferences preferences){\n+        this(root,preferences,NUL);\n+    }\n \n     /**\n      * Creates a new PreferencesCommandLine using the specified root Option,\n      * @param preferences the Preferences node to get values from\n      * @param separator the character to split argument values\n      */\n-\tpublic PreferencesCommandLine(final Option root, final Preferences preferences, final char separator){\n-\t\tthis.root = root;\n-\t\tthis.preferences = preferences;\n-\t\tthis.separator = separator;\n-\t}\n+    public PreferencesCommandLine(final Option root, final Preferences preferences, final char separator){\n+        this.root = root;\n+        this.preferences = preferences;\n+        this.separator = separator;\n+    }\n \n-\tpublic boolean hasOption(Option option) {\n-\t\tif(option==null){\n-\t\t\treturn false;\n-\t\t}\n-\t\telse{\n-\t\t\ttry {\n-\t\t\t\treturn Arrays.asList(preferences.keys()).contains(option.getPreferredName());\n-\t\t\t} catch (BackingStoreException e) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t}\n-\t}\n+    public boolean hasOption(Option option) {\n+        if(option==null){\n+            return false;\n+        }\n+        else{\n+            try {\n+                return Arrays.asList(preferences.keys()).contains(option.getPreferredName());\n+            } catch (BackingStoreException e) {\n+                return false;\n+            }\n+        }\n+    }\n \n-\tpublic Option getOption(String trigger) {\n-\t\treturn root.findOption(trigger);\n-\t}\n+    public Option getOption(String trigger) {\n+        return root.findOption(trigger);\n+    }\n \n-\tpublic List getValues(final Option option, final List defaultValues) {\n-\t\tfinal String value = preferences.get(option.getPreferredName(),null);\n+    public List getValues(final Option option, final List defaultValues) {\n+        final String value = preferences.get(option.getPreferredName(),null);\n \n-\t\tif(value==null){\n-\t\t\treturn defaultValues;\n-\t\t}\n-\t\telse if(separator>NUL){\n-\t\t\tfinal List values = new ArrayList();\n-\t\t\tfinal StringTokenizer tokens = new StringTokenizer(value,String.valueOf(separator));\n+        if(value==null){\n+            return defaultValues;\n+        }\n+        else if(separator>NUL){\n+            final List values = new ArrayList();\n+            final StringTokenizer tokens = new StringTokenizer(value,String.valueOf(separator));\n \n-\t\t\twhile(tokens.hasMoreTokens()){\n-\t\t\t\tvalues.add(tokens.nextToken());\n-\t\t\t}\n+            while(tokens.hasMoreTokens()){\n+                values.add(tokens.nextToken());\n+            }\n \n-\t\t\treturn values;\n-\t\t}\n-\t\telse{\n-\t\t\treturn Collections.singletonList(value);\n-\t\t}\n-\t}\n+            return values;\n+        }\n+        else{\n+            return Collections.singletonList(value);\n+        }\n+    }\n \n-\tpublic Boolean getSwitch(final Option option, final Boolean defaultValue) {\n-\t\tfinal String value = preferences.get(option.getPreferredName(),null);\n-\t\tif(\"true\".equals(value)){\n-\t\t\treturn Boolean.TRUE;\n-\t\t}\n-\t\telse if(\"false\".equals(value)){\n-\t\t\treturn Boolean.FALSE;\n-\t\t}\n-\t\telse{\n-\t\t\treturn defaultValue;\n-\t\t}\n-\t}\n+    public Boolean getSwitch(final Option option, final Boolean defaultValue) {\n+        final String value = preferences.get(option.getPreferredName(),null);\n+        if(\"true\".equals(value)){\n+            return Boolean.TRUE;\n+        }\n+        else if(\"false\".equals(value)){\n+            return Boolean.FALSE;\n+        }\n+        else{\n+            return defaultValue;\n+        }\n+    }\n \n-\tpublic String getProperty(final String property, final String defaultValue) {\n-\t\treturn preferences.get(property, defaultValue);\n-\t}\n+    public String getProperty(final String property, final String defaultValue) {\n+        return preferences.get(property, defaultValue);\n+    }\n \n-\tpublic Set getProperties() {\n-\t\ttry {\n-\t\t\treturn new HashSet(Arrays.asList(preferences.keys()));\n-\t\t} catch (BackingStoreException e) {\n-\t\t\treturn Collections.EMPTY_SET;\n-\t\t}\n-\t}\n+    public Set getProperties() {\n+        try {\n+            return new HashSet(Arrays.asList(preferences.keys()));\n+        } catch (BackingStoreException e) {\n+            return Collections.EMPTY_SET;\n+        }\n+    }\n \n-\tpublic List getOptions() {\n-\t\ttry {\n-\t\t\tfinal List options = new ArrayList();\n-\t\t\tfinal Iterator keys = Arrays.asList(preferences.keys()).iterator();\n-\t\t\twhile (keys.hasNext()) {\n-\t\t\t\tfinal String trigger = (String) keys.next();\n-\t\t\t\tfinal Option option = root.findOption(trigger);\n-\t\t\t\tif (option != null) {\n-\t\t\t\t\toptions.add(option);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn Collections.unmodifiableList(options);\n-\t\t} catch (BackingStoreException e) {\n-\t\t\treturn Collections.EMPTY_LIST;\n-\t\t}\n-\t}\n+    public List getOptions() {\n+        try {\n+            final List options = new ArrayList();\n+            final Iterator keys = Arrays.asList(preferences.keys()).iterator();\n+            while (keys.hasNext()) {\n+                final String trigger = (String) keys.next();\n+                final Option option = root.findOption(trigger);\n+                if (option != null) {\n+                    options.add(option);\n+                }\n+            }\n+            return Collections.unmodifiableList(options);\n+        } catch (BackingStoreException e) {\n+            return Collections.EMPTY_LIST;\n+        }\n+    }\n \n-\tpublic Set getOptionTriggers() {\n-\t\tfinal Set triggers = new HashSet();\n-\t\tfinal Iterator options = getOptions().iterator();\n-\t\twhile(options.hasNext()){\n-\t\t\tfinal Option option = (Option)options.next();\n-\t\t\ttriggers.addAll(option.getTriggers());\n-\t\t}\n-\t\treturn Collections.unmodifiableSet(triggers);\n-\t}\n+    public Set getOptionTriggers() {\n+        final Set triggers = new HashSet();\n+        final Iterator options = getOptions().iterator();\n+        while(options.hasNext()){\n+            final Option option = (Option)options.next();\n+            triggers.addAll(option.getTriggers());\n+        }\n+        return Collections.unmodifiableSet(triggers);\n+    }\n }\n--- a/src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java\n+++ b/src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java\n  */\n public class PropertiesCommandLine extends CommandLineImpl {\n \n-\tprivate static final char NUL = '\\0';\n-\tprivate final Properties properties;\n-\tprivate final Option root;\n-\tprivate final char separator;\n+    private static final char NUL = '\\0';\n+    private final Properties properties;\n+    private final Option root;\n+    private final char separator;\n \n     /**\n      * Creates a new PropertiesCommandLine using the specified root Option,\n      * @param root the CommandLine's root Option\n      * @param properties the Properties instance to get values from\n      */\n-\tpublic PropertiesCommandLine(final Option root, final Properties properties){\n-\t\tthis(root,properties,NUL);\n-\t}\n+    public PropertiesCommandLine(final Option root, final Properties properties){\n+        this(root,properties,NUL);\n+    }\n \n     /**\n      * Creates a new PropertiesCommandLine using the specified root Option,\n      * @param properties the Properties instance to get values from\n      * @param separator the character to split argument values\n      */\n-\tpublic PropertiesCommandLine(final Option root, final Properties properties, final char separator){\n-\t\tthis.root = root;\n-\t\tthis.properties = properties;\n-\t\tthis.separator = separator;\n-\t}\n+    public PropertiesCommandLine(final Option root, final Properties properties, final char separator){\n+        this.root = root;\n+        this.properties = properties;\n+        this.separator = separator;\n+    }\n \n \n-\tpublic boolean hasOption(Option option) {\n-\t\tif(option==null){\n-\t\t\treturn false;\n-\t\t}\n-\t\telse{\n-\t\t\treturn properties.containsKey(option.getPreferredName());\n-\t\t}\n-\t}\n+    public boolean hasOption(Option option) {\n+        if(option==null){\n+            return false;\n+        }\n+        else{\n+            return properties.containsKey(option.getPreferredName());\n+        }\n+    }\n \n-\tpublic Option getOption(String trigger) {\n-\t\treturn root.findOption(trigger);\n-\t}\n+    public Option getOption(String trigger) {\n+        return root.findOption(trigger);\n+    }\n \n-\tpublic List getValues(final Option option, final List defaultValues) {\n-\t\tfinal String value = properties.getProperty(option.getPreferredName());\n+    public List getValues(final Option option, final List defaultValues) {\n+        final String value = properties.getProperty(option.getPreferredName());\n \n-\t\tif(value==null){\n-\t\t\treturn defaultValues;\n-\t\t}\n-\t\telse if(separator>NUL){\n-\t\t\tfinal List values = new ArrayList();\n-\t\t\tfinal StringTokenizer tokens = new StringTokenizer(value,String.valueOf(separator));\n+        if(value==null){\n+            return defaultValues;\n+        }\n+        else if(separator>NUL){\n+            final List values = new ArrayList();\n+            final StringTokenizer tokens = new StringTokenizer(value,String.valueOf(separator));\n \n-\t\t\twhile(tokens.hasMoreTokens()){\n-\t\t\t\tvalues.add(tokens.nextToken());\n-\t\t\t}\n+            while(tokens.hasMoreTokens()){\n+                values.add(tokens.nextToken());\n+            }\n \n-\t\t\treturn values;\n-\t\t}\n-\t\telse{\n-\t\t\treturn Collections.singletonList(value);\n-\t\t}\n-\t}\n+            return values;\n+        }\n+        else{\n+            return Collections.singletonList(value);\n+        }\n+    }\n \n-\tpublic Boolean getSwitch(final Option option, final Boolean defaultValue) {\n-\t\tfinal String value = properties.getProperty(option.getPreferredName());\n-\t\tif(\"true\".equals(value)){\n-\t\t\treturn Boolean.TRUE;\n-\t\t}\n-\t\telse if(\"false\".equals(value)){\n-\t\t\treturn Boolean.FALSE;\n-\t\t}\n-\t\telse{\n-\t\t\treturn defaultValue;\n-\t\t}\n-\t}\n+    public Boolean getSwitch(final Option option, final Boolean defaultValue) {\n+        final String value = properties.getProperty(option.getPreferredName());\n+        if(\"true\".equals(value)){\n+            return Boolean.TRUE;\n+        }\n+        else if(\"false\".equals(value)){\n+            return Boolean.FALSE;\n+        }\n+        else{\n+            return defaultValue;\n+        }\n+    }\n \n-\tpublic String getProperty(final String property, final String defaultValue) {\n-\t\treturn properties.getProperty(property,defaultValue);\n-\t}\n+    public String getProperty(final String property, final String defaultValue) {\n+        return properties.getProperty(property,defaultValue);\n+    }\n \n-\tpublic Set getProperties() {\n-\t\treturn properties.keySet();\n-\t}\n+    public Set getProperties() {\n+        return properties.keySet();\n+    }\n \n-\tpublic List getOptions() {\n-\t\tfinal List options = new ArrayList();\n-\t\tfinal Iterator keys = properties.keySet().iterator();\n-\t\twhile(keys.hasNext()){\n-\t\t\tfinal String trigger = (String)keys.next();\n-\t\t\tfinal Option option = root.findOption(trigger);\n-\t\t\tif(option!=null){\n-\t\t\t\toptions.add(option);\n-\t\t\t}\n-\t\t}\n-\t\treturn Collections.unmodifiableList(options);\n-\t}\n+    public List getOptions() {\n+        final List options = new ArrayList();\n+        final Iterator keys = properties.keySet().iterator();\n+        while(keys.hasNext()){\n+            final String trigger = (String)keys.next();\n+            final Option option = root.findOption(trigger);\n+            if(option!=null){\n+                options.add(option);\n+            }\n+        }\n+        return Collections.unmodifiableList(options);\n+    }\n \n-\tpublic Set getOptionTriggers() {\n-\t\tfinal Set triggers = new HashSet();\n-\t\tfinal Iterator options = getOptions().iterator();\n-\t\twhile(options.hasNext()){\n-\t\t\tfinal Option option = (Option)options.next();\n-\t\t\ttriggers.addAll(option.getTriggers());\n-\t\t}\n-\t\treturn Collections.unmodifiableSet(triggers);\n-\t}\n+    public Set getOptionTriggers() {\n+        final Set triggers = new HashSet();\n+        final Iterator options = getOptions().iterator();\n+        while(options.hasNext()){\n+            final Option option = (Option)options.next();\n+            triggers.addAll(option.getTriggers());\n+        }\n+        return Collections.unmodifiableSet(triggers);\n+    }\n }\n--- a/src/java/org/apache/commons/cli2/option/ArgumentImpl.java\n+++ b/src/java/org/apache/commons/cli2/option/ArgumentImpl.java\n     }\n \n     public String getConsumeRemaining() {\n-    \treturn this.consumeRemaining;\n+        return this.consumeRemaining;\n     }\n \n     public List getDefaultValues() {\n-    \treturn this.defaultValues;\n+        return this.defaultValues;\n     }\n \n     public Validator getValidator() {\n-    \treturn this.validator;\n+        return this.validator;\n     }\n \n     public void validate(final WriteableCommandLine commandLine)\n--- a/src/java/org/apache/commons/cli2/resource/ResourceHelper.java\n+++ b/src/java/org/apache/commons/cli2/resource/ResourceHelper.java\n \n         Locale locale;\n         if (firstUnderscore != -1) {\n-        String language = bundleName.substring(firstUnderscore + 1, secondUnderscore);\n-        String country = bundleName.substring(secondUnderscore + 1);\n-        \tlocale = new Locale(language, country);\n+            String language = bundleName.substring(firstUnderscore + 1, secondUnderscore);\n+            String country = bundleName.substring(secondUnderscore + 1);\n+            locale = new Locale(language, country);\n         }\n         else {\n-        \tlocale = Locale.getDefault();\n+            locale = Locale.getDefault();\n         }\n         // initialize the bundle\n         try {\n     }\n \n     public String getBundleName() {\n-    \treturn this.prop;\n+        return this.prop;\n     }\n \n     /**\n--- a/src/java/org/apache/commons/cli2/util/Comparators.java\n+++ b/src/java/org/apache/commons/cli2/util/Comparators.java\n  */\n public class Comparators {\n \n-\tprivate Comparators(){\n-\t\t// constructor hiden from potential users\n-\t}\n+    private Comparators(){\n+        // constructor hiden from potential users\n+    }\n \n \n     /**", "timestamp": 1206187248, "metainfo": ""}