{"sha": "3d11b55c1c5b33af7f4a822987aad5d2e18fd39e", "log": "More tests for the Option class covering the hasArgs, hasArgName and getValue methods  ", "commit": "\n--- a/src/test/org/apache/commons/cli/OptionTest.java\n+++ b/src/test/org/apache/commons/cli/OptionTest.java\n /**\n  * @author brianegge\n  */\n-public class OptionTest extends TestCase {\n-\n-   private static class TestOption extends Option {\n-        public TestOption(String opt, boolean hasArg, String description) throws IllegalArgumentException {\n+public class OptionTest extends TestCase\n+{\n+    private static class TestOption extends Option\n+    {\n+        public TestOption(String opt, boolean hasArg, String description) throws IllegalArgumentException\n+        {\n             super(opt, hasArg, description);\n         }\n-        public boolean addValue(String value) {\n+\n+        public boolean addValue(String value)\n+        {\n             addValueForProcessing(value);\n             return true;\n         }\n-   }\n+    }\n \n-   public void testClear() {\n-       TestOption option = new TestOption(\"x\", true, \"\");\n-       assertEquals(0, option.getValuesList().size());\n-       option.addValue(\"a\");\n-       assertEquals(1, option.getValuesList().size());\n-       option.clearValues();\n-       assertEquals(0, option.getValuesList().size());\n-   }\n+    public void testClear()\n+    {\n+        TestOption option = new TestOption(\"x\", true, \"\");\n+        assertEquals(0, option.getValuesList().size());\n+        option.addValue(\"a\");\n+        assertEquals(1, option.getValuesList().size());\n+        option.clearValues();\n+        assertEquals(0, option.getValuesList().size());\n+    }\n \n     // See http://issues.apache.org/jira/browse/CLI-21\n-    public void testClone() throws CloneNotSupportedException {\n+    public void testClone() throws CloneNotSupportedException\n+    {\n         TestOption a = new TestOption(\"a\", true, \"\");\n         TestOption b = (TestOption) a.clone();\n         assertEquals(a, b);\n         assertEquals(2, b.getValues().length);\n     }\n \n-    private static class DefaultOption extends Option {\n-\n+    private static class DefaultOption extends Option\n+    {\n         private final String defaultValue;\n \n-        public DefaultOption(String opt, String description, String defaultValue) throws IllegalArgumentException {\n+        public DefaultOption(String opt, String description, String defaultValue) throws IllegalArgumentException\n+        {\n             super(opt, true, description);\n             this.defaultValue = defaultValue;\n         }\n \n-        public String getValue() {\n+        public String getValue()\n+        {\n             return super.getValue() != null ? super.getValue() : defaultValue;\n         }\n     }\n \n-    public void testSubclass() throws CloneNotSupportedException {\n+    public void testSubclass() throws CloneNotSupportedException\n+    {\n         Option option = new DefaultOption(\"f\", \"file\", \"myfile.txt\");\n         Option clone = (Option) option.clone();\n         assertEquals(\"myfile.txt\", clone.getValue());\n         assertEquals(DefaultOption.class, clone.getClass());\n     }\n \n+    public void testHasArgName()\n+    {\n+        Option option = new Option(\"f\", null);\n+\n+        option.setArgName(null);\n+        assertFalse(option.hasArgName());\n+\n+        option.setArgName(\"\");\n+        assertFalse(option.hasArgName());\n+\n+        option.setArgName(\"file\");\n+        assertTrue(option.hasArgName());\n+    }\n+\n+    public void testHasArgs()\n+    {\n+        Option option = new Option(\"f\", null);\n+\n+        option.setArgs(0);\n+        assertFalse(option.hasArgs());\n+\n+        option.setArgs(1);\n+        assertFalse(option.hasArgs());\n+\n+        option.setArgs(10);\n+        assertTrue(option.hasArgs());\n+\n+        option.setArgs(Option.UNLIMITED_VALUES);\n+        assertTrue(option.hasArgs());\n+\n+        option.setArgs(Option.UNINITIALIZED);\n+        assertFalse(option.hasArgs());\n+    }\n+\n+    public void testGetValue()\n+    {\n+        Option option = new Option(\"f\", null);\n+        option.setArgs(Option.UNLIMITED_VALUES);\n+\n+        assertEquals(\"default\", option.getValue(\"default\"));\n+        assertEquals(null, option.getValue(0));\n+\n+        option.addValueForProcessing(\"foo\");\n+        \n+        assertEquals(\"foo\", option.getValue());\n+        assertEquals(\"foo\", option.getValue(0));\n+        assertEquals(\"foo\", option.getValue(\"default\"));\n+    }\n }", "timestamp": 1212156692, "metainfo": ""}