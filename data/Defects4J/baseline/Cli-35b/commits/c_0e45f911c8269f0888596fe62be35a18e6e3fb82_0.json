{"sha": "0e45f911c8269f0888596fe62be35a18e6e3fb82", "log": "Merged ParseRequiredTest into ParserTestCase  ", "commit": "\n--- a/src/test/org/apache/commons/cli/ParserTestCase.java\n+++ b/src/test/org/apache/commons/cli/ParserTestCase.java\n  */\n public abstract class ParserTestCase extends TestCase\n {\n-    protected Parser parser;\n+    protected CommandLineParser parser;\n \n     protected Options options;\n \n         assertTrue(\"Confirm --version is set\", cl.hasOption(\"version\"));\n         assertTrue(\"Confirm -v is not set\", !cl.hasOption(\"v\"));\n     }\n+\n+    public void testWithRequiredOption() throws Exception\n+    {\n+        String[] args = new String[] { \"-b\", \"file\" };\n+        \n+        Options options = new Options();\n+        options.addOption(\"a\", \"enable-a\", false, null);\n+        options.addOption(OptionBuilder.withLongOpt(\"bfile\").hasArg().isRequired().create('b'));\n+\n+        CommandLine cl = parser.parse(options,args);\n+\n+        assertTrue(\"Confirm -a is NOT set\", !cl.hasOption(\"a\"));\n+        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n+        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"file\"));\n+        assertTrue(\"Confirm NO of extra args\", cl.getArgList().size() == 0);\n+    }\n+\n+    public void testOptionAndRequiredOption() throws Exception\n+    {\n+        String[] args = new String[] { \"-a\", \"-b\", \"file\" };\n+        \n+        Options options = new Options();\n+        options.addOption(\"a\", \"enable-a\", false, null);\n+        options.addOption(OptionBuilder.withLongOpt(\"bfile\").hasArg().isRequired().create('b'));\n+\n+        CommandLine cl = parser.parse(options,args);\n+\n+        assertTrue(\"Confirm -a is set\", cl.hasOption(\"a\"));\n+        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n+        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"file\"));\n+        assertTrue(\"Confirm NO of extra args\", cl.getArgList().size() == 0);\n+    }\n+\n+    public void testMissingRequiredOption()\n+    {\n+        String[] args = new String[] { \"-a\" };\n+        \n+        Options options = new Options();\n+        options.addOption(\"a\", \"enable-a\", false, null);\n+        options.addOption(OptionBuilder.withLongOpt(\"bfile\").hasArg().isRequired().create('b'));\n+\n+        try\n+        {\n+            parser.parse(options,args);\n+            fail(\"exception should have been thrown\");\n+        }\n+        catch (MissingOptionException e)\n+        {\n+            assertEquals( \"Incorrect exception message\", \"Missing required option: b\", e.getMessage() );\n+            assertTrue(e.getMissingOptions().contains(\"b\"));\n+        }\n+        catch (ParseException e)\n+        {\n+            fail(\"expected to catch MissingOptionException\");\n+        }\n+    }\n+\n+    public void testMissingRequiredOptions()\n+    {\n+        String[] args = new String[] { \"-a\" };\n+\n+        Options options = new Options();\n+        options.addOption(\"a\", \"enable-a\", false, null);\n+        options.addOption(OptionBuilder.withLongOpt(\"bfile\").hasArg().isRequired().create('b'));\n+        options.addOption(OptionBuilder.withLongOpt(\"cfile\").hasArg().isRequired().create('c'));\n+\n+        try\n+        {\n+            parser.parse(options,args);\n+            fail(\"exception should have been thrown\");\n+        }\n+        catch (MissingOptionException e)\n+        {\n+            assertEquals(\"Incorrect exception message\", \"Missing required options: b, c\", e.getMessage());\n+            assertTrue(e.getMissingOptions().contains(\"b\"));\n+            assertTrue(e.getMissingOptions().contains(\"c\"));\n+        }\n+        catch (ParseException e)\n+        {\n+            fail(\"expected to catch MissingOptionException\");\n+        }\n+    }\n+\n+    public void testReuseOptionsTwice() throws Exception\n+    {\n+        Options opts = new Options();\n+\t\topts.addOption(OptionBuilder.isRequired().create('v'));\n+\n+        // first parsing\n+        parser.parse(opts, new String[] { \"-v\" });\n+\n+        try\n+        {\n+            // second parsing, with the same Options instance and an invalid command line\n+            parser.parse(opts, new String[0]);\n+            fail(\"MissingOptionException not thrown\");\n+        }\n+        catch (MissingOptionException e)\n+        {\n+            // expected\n+        }\n+    }\n }", "timestamp": 1243378728, "metainfo": ""}