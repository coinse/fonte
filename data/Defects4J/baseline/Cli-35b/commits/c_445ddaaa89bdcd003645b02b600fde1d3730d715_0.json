{"sha": "445ddaaa89bdcd003645b02b600fde1d3730d715", "log": "Missing @Override  ", "commit": "\n--- a/src/main/java/org/apache/commons/cli/GnuParser.java\n+++ b/src/main/java/org/apache/commons/cli/GnuParser.java\n      *                        a non option has been encountered\n      * @return a String array of the flattened arguments\n      */\n+    @Override\n     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n     {\n         List<String> tokens = new ArrayList<String>();\n--- a/src/main/java/org/apache/commons/cli/Option.java\n+++ b/src/main/java/org/apache/commons/cli/Option.java\n      *\n      * @return Stringified form of this object\n      */\n+    @Override\n     public String toString()\n     {\n         StringBuilder buf = new StringBuilder().append(\"[ option: \");\n         return values.isEmpty();\n     }\n \n+    @Override\n     public boolean equals(Object o)\n     {\n         if (this == o)\n         return true;\n     }\n \n+    @Override\n     public int hashCode()\n     {\n         int result;\n      * @throws RuntimeException if a {@link CloneNotSupportedException} has been thrown\n      * by {@link super#clone()}\n      */\n+    @Override\n     public Object clone()\n     {\n         try\n--- a/src/main/java/org/apache/commons/cli/OptionGroup.java\n+++ b/src/main/java/org/apache/commons/cli/OptionGroup.java\n      * \n      * @return the stringified representation of this group\n      */\n+    @Override\n     public String toString()\n     {\n         StringBuilder buff = new StringBuilder();\n--- a/src/main/java/org/apache/commons/cli/Options.java\n+++ b/src/main/java/org/apache/commons/cli/Options.java\n      *\n      * @return Stringified form of this object\n      */\n+    @Override\n     public String toString()\n     {\n         StringBuilder buf = new StringBuilder();\n--- a/src/main/java/org/apache/commons/cli/PosixParser.java\n+++ b/src/main/java/org/apache/commons/cli/PosixParser.java\n      * when an non option is found.\n      * @return The flattened <code>arguments</code> String array.\n      */\n+    @Override\n     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException\n     {\n         init();\n--- a/src/test/java/org/apache/commons/cli/ArgumentIsOptionTest.java\n+++ b/src/test/java/org/apache/commons/cli/ArgumentIsOptionTest.java\n     private Options options = null;\n     private CommandLineParser parser = null;\n \n+    @Override\n     public void setUp()\n     {\n         options = new Options().addOption(\"p\", false, \"Option p\").addOption(\"attr\", true, \"Option accepts argument\");\n--- a/src/test/java/org/apache/commons/cli/BasicParserTest.java\n+++ b/src/test/java/org/apache/commons/cli/BasicParserTest.java\n  */\n public class BasicParserTest extends ParserTestCase\n {\n+    @Override\n     public void setUp()\n     {\n         super.setUp();\n         parser = new BasicParser();\n     }\n \n+    @Override\n     public void testDoubleDash2() throws Exception\n     {\n         // not supported by the BasicParser\n     }\n \n+    @Override\n     public void testLongWithoutEqualSingleDash() throws Exception\n     {\n         // not supported by the BasicParser\n     }\n     \n+    @Override\n     public void testAmbiguousLongWithoutEqualSingleDash() throws Exception\n     {\n         // not supported by the basicParser\n     }\n     \n+    @Override\n     public void testNegativeOption() throws Exception\n     {\n         // not supported by the BasicParser (CLI-184)\n     }\n \n+    @Override\n     public void testPropertiesOption1() throws Exception\n     {\n         // not supported by the BasicParser\n     }\n \n+    @Override\n     public void testPropertiesOption2() throws Exception\n     {\n         // not supported by the BasicParser\n     }    \n \n+    @Override\n     public void testShortWithEqual() throws Exception\n     {\n         // not supported by the BasicParser\n     }\n \n+    @Override\n     public void testShortWithoutEqual() throws Exception\n     {\n         // not supported by the BasicParser\n     }\n \n+    @Override\n     public void testLongWithEqualDoubleDash() throws Exception\n     {\n         // not supported by the BasicParser\n     }\n \n+    @Override\n     public void testLongWithEqualSingleDash() throws Exception\n     {\n         // not supported by the BasicParser\n     }\n     \n+    @Override\n     public void testUnambiguousPartialLongOption1() throws Exception\n     {\n         // not supported by the BasicParser\n     }\n \n+    @Override\n     public void testUnambiguousPartialLongOption2() throws Exception\n     {\n         // not supported by the BasicParser\n     }\n \n+    @Override\n     public void testUnambiguousPartialLongOption3() throws Exception\n     {\n         // not supported by the BasicParser\n     }\n \n+    @Override\n     public void testUnambiguousPartialLongOption4() throws Exception\n     {\n         // not supported by the BasicParser\n     }\n \n+    @Override\n     public void testAmbiguousPartialLongOption1() throws Exception\n     {\n         // not supported by the BasicParser\n     }\n \n+    @Override\n     public void testAmbiguousPartialLongOption2() throws Exception\n     {\n         // not supported by the BasicParser\n     }\n \n+    @Override\n     public void testAmbiguousPartialLongOption3() throws Exception\n     {\n         // not supported by the BasicParser\n     }\n \n+    @Override\n     public void testAmbiguousPartialLongOption4() throws Exception\n     {\n         // not supported by the BasicParser\n     }\n \n+    @Override\n     public void testPartialLongOptionSingleDash() throws Exception\n     {\n         // not supported by the BasicParser\n     }\n \n+    @Override\n     public void testBursting() throws Exception\n     {\n         // not supported by the BasicParser\n     }\n \n+    @Override\n     public void testUnrecognizedOptionWithBursting() throws Exception\n     {\n         // not supported by the BasicParser\n     }\n \n+    @Override\n     public void testMissingArgWithBursting() throws Exception\n     {\n         // not supported by the BasicParser\n     }\n \n+    @Override\n     public void testStopBursting() throws Exception\n     {\n         // not supported by the BasicParser\n     }\n \n+    @Override\n     public void testStopBursting2() throws Exception\n     {\n         // not supported by the BasicParser\n--- a/src/test/java/org/apache/commons/cli/DefaultParserTest.java\n+++ b/src/test/java/org/apache/commons/cli/DefaultParserTest.java\n  */\n public class DefaultParserTest extends ParserTestCase {\n \n+    @Override\n     public void setUp() {\n         super.setUp();\n         parser = new DefaultParser();\n--- a/src/test/java/org/apache/commons/cli/GnuParserTest.java\n+++ b/src/test/java/org/apache/commons/cli/GnuParserTest.java\n \n public class GnuParserTest extends ParserTestCase\n {\n+    @Override\n     public void setUp()\n     {\n         super.setUp();\n         parser = new GnuParser();\n     }\n \n+    @Override\n     public void testDoubleDash2() throws Exception\n     {\n         // not supported by the GnuParser\n     }\n     \n+    @Override\n     public void testLongWithoutEqualSingleDash() throws Exception\n     {\n         // not supported by the GnuParser\n     }\n \n+    @Override\n     public void testAmbiguousLongWithoutEqualSingleDash() throws Exception\n     {\n         // not supported by the GnuParser\n     }\n \n+    @Override\n     public void testNegativeOption() throws Exception\n     {\n         // not supported by the GnuParser (CLI-184)\n     }\n \n+    @Override\n     public void testLongWithUnexpectedArgument1() throws Exception \n     {\n         // not supported by the GnuParser\n     }\n \n+    @Override\n     public void testLongWithUnexpectedArgument2() throws Exception \n     {\n         // not supported by the GnuParser\n     }\n \n+    @Override\n     public void testShortWithUnexpectedArgument() throws Exception \n     {\n         // not supported by the GnuParser\n     }\n \n+    @Override\n     public void testUnambiguousPartialLongOption1() throws Exception\n     {\n         // not supported by the GnuParser\n     }\n \n+    @Override\n     public void testUnambiguousPartialLongOption2() throws Exception\n     {\n         // not supported by the GnuParser\n     }\n \n+    @Override\n     public void testUnambiguousPartialLongOption3() throws Exception\n     {\n         // not supported by the GnuParser\n     }\n \n+    @Override\n     public void testUnambiguousPartialLongOption4() throws Exception\n     {\n         // not supported by the GnuParser\n     }\n \n+    @Override\n     public void testAmbiguousPartialLongOption1() throws Exception\n     {\n         // not supported by the GnuParser\n     }\n \n+    @Override\n     public void testAmbiguousPartialLongOption2() throws Exception\n     {\n         // not supported by the GnuParser\n     }\n \n-   public void testAmbiguousPartialLongOption3() throws Exception\n+   @Override\n+public void testAmbiguousPartialLongOption3() throws Exception\n     {\n         // not supported by the GnuParser\n     }\n \n+    @Override\n     public void testAmbiguousPartialLongOption4() throws Exception\n     {\n         // not supported by the GnuParser\n     }\n \n+    @Override\n     public void testPartialLongOptionSingleDash() throws Exception\n     {\n         // not supported by the GnuParser\n     }\n \n+    @Override\n     public void testBursting() throws Exception\n     {\n         // not supported by the GnuParser\n     }\n \n+    @Override\n     public void testUnrecognizedOptionWithBursting() throws Exception\n     {\n         // not supported by the GnuParser\n     }\n \n+    @Override\n     public void testMissingArgWithBursting() throws Exception\n     {\n         // not supported by the GnuParser\n     }\n \n+    @Override\n     public void testStopBursting() throws Exception\n     {\n         // not supported by the GnuParser\n     }\n \n+    @Override\n     public void testStopBursting2() throws Exception\n     {\n         // not supported by the GnuParser\n--- a/src/test/java/org/apache/commons/cli/OptionGroupTest.java\n+++ b/src/test/java/org/apache/commons/cli/OptionGroupTest.java\n     private Options _options = null;\n     private Parser parser = new PosixParser();\n \n+    @Override\n     public void setUp()\n     {\n         Option file = new Option( \"f\", \"file\", false, \"file to process\" );\n--- a/src/test/java/org/apache/commons/cli/OptionTest.java\n+++ b/src/test/java/org/apache/commons/cli/OptionTest.java\n             super(opt, hasArg, description);\n         }\n \n+        @Override\n         public boolean addValue(String value)\n         {\n             addValueForProcessing(value);\n             this.defaultValue = defaultValue;\n         }\n \n+        @Override\n         public String getValue()\n         {\n             return super.getValue() != null ? super.getValue() : defaultValue;\n--- a/src/test/java/org/apache/commons/cli/ParserTestCase.java\n+++ b/src/test/java/org/apache/commons/cli/ParserTestCase.java\n \n     protected Options options;\n \n+    @Override\n     public void setUp()\n     {\n         options = new Options()\n--- a/src/test/java/org/apache/commons/cli/PosixParserTest.java\n+++ b/src/test/java/org/apache/commons/cli/PosixParserTest.java\n  */\n public class PosixParserTest extends ParserTestCase\n {\n+    @Override\n     public void setUp()\n     {\n         super.setUp();\n         parser = new PosixParser();\n     }\n \n+    @Override\n     public void testDoubleDash2() throws Exception\n     {\n         // not supported by the PosixParser\n     }\n     \n+    @Override\n     public void testLongWithoutEqualSingleDash() throws Exception\n     {\n         // not supported by the PosixParser\n     }\n \n+    @Override\n     public void testAmbiguousLongWithoutEqualSingleDash() throws Exception\n     {\n         // not supported by the PosixParser\n     }\n     \n+    @Override\n     public void testNegativeOption() throws Exception\n     {\n         // not supported by the PosixParser (CLI-184)\n     }\n \n+    @Override\n     public void testLongWithUnexpectedArgument1() throws Exception\n     {\n         // not supported by the PosixParser\n     }\n \n+    @Override\n     public void testLongWithEqualSingleDash() throws Exception\n     {\n         // not supported by the PosixParser\n     }\n \n+    @Override\n     public void testShortWithEqual() throws Exception\n     {\n         // not supported by the PosixParser\n     }\n \n+    @Override\n     public void testUnambiguousPartialLongOption4() throws Exception\n     {\n         // not supported by the PosixParser\n     }\n \n+    @Override\n     public void testAmbiguousPartialLongOption4() throws Exception\n     {\n         // not supported by the PosixParser\n--- a/src/test/java/org/apache/commons/cli/ValueTest.java\n+++ b/src/test/java/org/apache/commons/cli/ValueTest.java\n     private CommandLine _cl = null;\n     private Options opts = new Options();\n \n+    @Override\n     public void setUp() throws Exception\n     {\n         opts.addOption(\"a\", false, \"toggle -a\");\n--- a/src/test/java/org/apache/commons/cli/ValuesTest.java\n+++ b/src/test/java/org/apache/commons/cli/ValuesTest.java\n {\n     private CommandLine cmd;\n \n+    @Override\n     public void setUp() throws Exception\n     {\n         Options options = new Options();\n--- a/src/test/java/org/apache/commons/cli/bug/BugCLI148Test.java\n+++ b/src/test/java/org/apache/commons/cli/bug/BugCLI148Test.java\n {    \n     private Options options;\n \n+    @Override\n     protected void setUp() throws Exception\n     {\n         options = new Options();\n--- a/src/test/java/org/apache/commons/cli/bug/BugCLI71Test.java\n+++ b/src/test/java/org/apache/commons/cli/bug/BugCLI71Test.java\n     private Options options;\n     private CommandLineParser parser;\n \n+    @Override\n     public void setUp() {\n         options = new Options();\n ", "timestamp": 1359564718, "metainfo": ""}