{"sha": "62a3b36efc78e53c233c2fb49cc8199c5eabec1d", "log": "Option type is now set to String by default (Fixes CLI-215) The type is now explicitly a Class instance instead of an unspecified Object  ", "commit": "\n--- a/src/main/java/org/apache/commons/cli/CommandLine.java\n+++ b/src/main/java/org/apache/commons/cli/CommandLine.java\n     public Object getParsedOptionValue(String opt) throws ParseException\n     {\n         String res = getOptionValue(opt);\n-\n         Option option = resolveOption(opt);\n-        if (option == null)\n+        \n+        if (option == null || res == null)\n         {\n             return null;\n         }\n-\n-        Object type = option.getType();\n-\n-        return (res == null) ? null : TypeHandler.createValue(res, type);\n+        \n+        return TypeHandler.createValue(res, option.getType());\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/cli/Option.java\n+++ b/src/main/java/org/apache/commons/cli/Option.java\n     private int numberOfArgs = UNINITIALIZED;\n \n     /** the type of this Option */\n-    private Object type;\n+    private Class type = String.class;\n \n     /** the list of argument values **/\n     private List values = new ArrayList();\n      *\n      * @param type the type of this Option\n      */\n-    public void setType(Object type)\n+    public void setType(Class type)\n     {\n         this.type = type;\n     }\n--- a/src/main/java/org/apache/commons/cli/OptionBuilder.java\n+++ b/src/main/java/org/apache/commons/cli/OptionBuilder.java\n     private static int numberOfArgs = Option.UNINITIALIZED;\n \n     /** option type */\n-    private static Object type;\n+    private static Class type;\n \n     /** option can have an optional argument value */\n     private static boolean optionalArg;\n         description = null;\n         argName = null;\n         longopt = null;\n-        type = null;\n+        type = String.class;\n         required = false;\n         numberOfArgs = Option.UNINITIALIZED;\n         optionalArg = false;\n      * @param newType the type of the Options argument value\n      * @return the OptionBuilder instance\n      */\n-    public static OptionBuilder withType(Object newType)\n+    public static OptionBuilder withType(Class newType)\n     {\n         OptionBuilder.type = newType;\n \n--- a/src/main/java/org/apache/commons/cli/PatternOptionBuilder.java\n+++ b/src/main/java/org/apache/commons/cli/PatternOptionBuilder.java\n      * @param ch the specified character\n      * @return The class that <code>ch</code> represents\n      */\n-    public static Object getValueClass(char ch)\n+    public static Class getValueClass(char ch)\n     {\n         switch (ch)\n         {\n     {\n         char opt = ' ';\n         boolean required = false;\n-        Object type = null;\n+        Class type = null;\n \n         Options options = new Options();\n \n--- a/src/test/java/org/apache/commons/cli/CommandLineTest.java\n+++ b/src/test/java/org/apache/commons/cli/CommandLineTest.java\n         \n         assertEquals(3, cmd.getOptions().length);\n     }\n+\n+    public void testGetParsedOptionValue() throws Exception {\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.hasArg().withType(Number.class).create(\"i\"));\n+        options.addOption(OptionBuilder.hasArg().create(\"f\"));\n+        \n+        CommandLineParser parser = new DefaultParser();\n+        CommandLine cmd = parser.parse(options, new String[] { \"-i\", \"123\", \"-f\", \"foo\" });\n+        \n+        assertEquals(123, ((Number) cmd.getParsedOptionValue(\"i\")).intValue());\n+        assertEquals(\"foo\", cmd.getParsedOptionValue(\"f\"));\n+    }\n }\n--- a/src/test/java/org/apache/commons/cli/OptionBuilderTest.java\n+++ b/src/test/java/org/apache/commons/cli/OptionBuilderTest.java\n                                      .hasArg( )\n                                      .isRequired( )\n                                      .hasArgs( )\n-                                     .withType( new Float( 10 ) )\n+                                     .withType( Float.class )\n                                      .withDescription( \"this is a simple option\" )\n                                      .create( 's' );\n \n         assertEquals( \"s\", simple.getOpt() );\n         assertEquals( \"simple option\", simple.getLongOpt() );\n         assertEquals( \"this is a simple option\", simple.getDescription() );\n-        assertEquals( simple.getType().getClass(), Float.class );\n+        assertEquals( simple.getType(), Float.class );\n         assertTrue( simple.hasArg() );\n         assertTrue( simple.isRequired() );\n         assertTrue( simple.hasArgs() );\n                                      .hasArg( )\n                                      .isRequired( )\n                                      .hasArgs( )\n-                                     .withType( new Float( 10 ) )\n+                                     .withType( Float.class )\n                                      .withDescription( \"this is a simple option\" )\n                                      .create( 's' );\n \n         assertEquals( \"s\", simple.getOpt() );\n         assertEquals( \"simple option\", simple.getLongOpt() );\n         assertEquals( \"this is a simple option\", simple.getDescription() );\n-        assertEquals( simple.getType().getClass(), Float.class );\n+        assertEquals( simple.getType(), Float.class );\n         assertTrue( simple.hasArg() );\n         assertTrue( simple.isRequired() );\n         assertTrue( simple.hasArgs() );\n         assertEquals( \"d\", simple.getOpt() );\n         assertEquals( \"dimple option\", simple.getLongOpt() );\n         assertEquals( \"this is a dimple option\", simple.getDescription() );\n-        assertNull( simple.getType() );\n+        assertEquals( String.class, simple.getType() );\n         assertTrue( simple.hasArg() );\n         assertTrue( !simple.isRequired() );\n         assertTrue( !simple.hasArgs() );", "timestamp": 1302623703, "metainfo": ""}