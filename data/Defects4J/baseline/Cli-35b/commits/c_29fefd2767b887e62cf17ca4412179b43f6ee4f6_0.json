{"sha": "29fefd2767b887e62cf17ca4412179b43f6ee4f6", "log": "Fix checkstyle warnings, minor formatting, typos, complete javadoc for not yet implemented methods.  ", "commit": "\n--- a/src/main/java/org/apache/commons/cli/Option.java\n+++ b/src/main/java/org/apache/commons/cli/Option.java\n  * if any exists, a flag indicating if an argument is required for\n  * this option, and a self-documenting description of the option.</p>\n  *\n- * <p>An Option is not created independantly, but is create through\n+ * <p>An Option is not created independently, but is create through\n  * an instance of {@link Options}.<p>\n  *\n  * @see org.apache.commons.cli.Options\n--- a/src/main/java/org/apache/commons/cli/OptionValidator.java\n+++ b/src/main/java/org/apache/commons/cli/OptionValidator.java\n  */\n class OptionValidator\n {\n+    /**\n+     * Hide constructor for a utility class.\n+     */\n+    private OptionValidator()\n+    {\n+    }\n+\n     /**\n      * Validates whether <code>opt</code> is a permissable Option\n      * shortOpt.  The rules that specify if the <code>opt</code>\n             {\n                 if (!isValidChar(ch))\n                 {\n-                    throw new IllegalArgumentException(\"The option '\" + opt + \"' contains an illegal character : '\" + ch + \"'\");\n+                    throw new IllegalArgumentException(\"The option '\" + opt + \"' contains an illegal \"\n+                                                       + \"character : '\" + ch + \"'\");\n                 }\n             }\n         }\n--- a/src/main/java/org/apache/commons/cli/Parser.java\n+++ b/src/main/java/org/apache/commons/cli/Parser.java\n      * flattening when a non option has been encountered\n      * @return a String array of the flattened arguments\n      */\n-    protected abstract String[] flatten(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException;\n+    protected abstract String[] flatten(Options opts, String[] arguments, boolean stopAtNonOption)\n+            throws ParseException;\n \n     /**\n      * Parses the specified <code>arguments</code> based\n      *\n      * @since 1.1\n      */\n-    public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException\n+    public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption)\n+            throws ParseException\n     {\n         // clear out the data in options in case it's been used before (CLI-71)\n         for (Option opt : options.helpOptions()) {\n--- a/src/main/java/org/apache/commons/cli/TypeHandler.java\n+++ b/src/main/java/org/apache/commons/cli/TypeHandler.java\n import java.util.Date;\n \n /**\n-  * This is a temporary implementation. TypeHandler will handle the\n-  * pluggableness of OptionTypes and it will direct all of these types\n-  * of conversion functionalities to ConvertUtils component in Commons\n-  * already. BeanUtils I think.\n-  *\n-  * @version $Revision$, $Date$\n-  */\n+ * This is a temporary implementation. TypeHandler will handle the\n+ * pluggableness of OptionTypes and it will direct all of these types\n+ * of conversion functionalities to ConvertUtils component in Commons\n+ * already. BeanUtils I think.\n+ *\n+ * @version $Revision$, $Date$\n+ */\n public class TypeHandler\n {\n     /**\n \n     /**\n      * Returns the date represented by <code>str</code>.\n+     * <p>\n+     * This method is not yet implemented and always throws an\n+     * {@link UnsupportedOperationException}.\n      *\n      * @param str the date string\n      * @return The date if <code>str</code> is a valid date string,\n      * otherwise return null.\n+     * @throws UnsupportedOperationException always\n      */\n     public static Date createDate(String str) throws ParseException\n     {\n \n     /**\n      * Returns the File[] represented by <code>str</code>.\n+     * <p>\n+     * This method is not yet implemented and always throws an\n+     * {@link UnsupportedOperationException}.\n      *\n      * @param str the paths to the files\n      * @return The File[] represented by <code>str</code>.\n+     * @throws UnsupportedOperationException always\n      */\n     public static File[] createFiles(String str) throws ParseException\n     {\n--- a/src/main/java/org/apache/commons/cli/Util.java\n+++ b/src/main/java/org/apache/commons/cli/Util.java\n  */\n class Util\n {\n+    /**\n+     * Hide constructor for a utility class.\n+     */\n+    private Util()\n+    {\n+    }\n+\n     /**\n      * Remove the hyphens from the begining of <code>str</code> and\n      * return the new String.", "timestamp": 1359324023, "metainfo": ""}