{"sha": "fbc0bd02b0d9d97ae044aebbbfbc5b13d3eacafe", "log": "integrated PatternBuilder   ", "commit": "\n--- a/src/java/org/apache/commons/cli/Option.java\n+++ b/src/java/org/apache/commons/cli/Option.java\n     public Option(String opt, boolean hasArg, String description) \n     throws IllegalArgumentException\n     {\n-        this(opt, null, hasArg, description, false, false);\n+        this(opt, null, hasArg, description);\n     }\n     \n     /**\n     public Option(String opt, String longOpt, boolean hasArg, String description) \n     throws IllegalArgumentException\n     {\n-        this(opt, longOpt, hasArg, description, false, false );\n-    }\n-\n-    /**\n-     * Creates an Option using the specified parameters.\n-     *\n-     * @param opt short representation of the option\n-     * @param longOpt the long representation of the option\n-     * @param hasArg specifies whether the Option takes an argument or not\n-     * @param description describes the function of the option\n-     * @param required specifies whether the option is required or not\n-     */\n-    public Option(String opt, String longOpt, boolean hasArg, String description,\n-                  boolean required ) \n-    throws IllegalArgumentException\n-    {\n-        this(opt, longOpt, hasArg, description, required, false );\n-    }\n-\n-    /**\n-     * Creates an Option using the specified parameters.\n-     *\n-     * @param opt short representation of the option\n-     * @param longOpt the long representation of the option\n-     * @param hasArg specifies whether the Option takes an argument or not\n-     * @param description describes the function of the option\n-     * @param required specifies whether the option is required or not\n-     * @param multipleArgs specifies whether the option has multiple argument \n-     * values\n-     */\n-    public Option(String opt, String longOpt, boolean hasArg, String description, \n-                  boolean required, boolean multipleArgs ) \n-    throws IllegalArgumentException\n-    {\n-        this(opt, longOpt, hasArg, description, required, multipleArgs, null );\n-    }\n-\n-    /**\n-     * Creates an Option using the specified parameters.\n-     *\n-     * @param opt short representation of the option\n-     * @param longOpt the long representation of the option\n-     * @param hasArg specifies whether the Option takes an argument or not\n-     * @param description describes the function of the option\n-     * @param required specifies whether the option is required or not\n-     * @param multipleArgs specifies whether the option has multiple argument \n-     * values\n-     * @param type specifies the type of the option\n-     */\n-    public Option(String opt, String longOpt, boolean hasArg, String description, \n-                  boolean required, boolean multipleArgs, Object type ) \n-    throws IllegalArgumentException\n-    {\n         validateOption( opt );\n \n         this.opt          = opt;\n         this.longOpt      = longOpt;\n         this.hasArg       = hasArg;\n         this.description  = description;\n-        this.required     = required;\n-        this.multipleArgs = multipleArgs;\n-        this.type         = type;\n     }\n     \n     /** <p>Retrieve the name of this Option</p>\n--- a/src/java/org/apache/commons/cli/OptionBuilder.java\n+++ b/src/java/org/apache/commons/cli/OptionBuilder.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/OptionBuilder.java,v 1.2 2002/07/30 23:06:21 jkeyes Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/07/30 23:06:21 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n package org.apache.commons.cli;\n \n+/**\n+ * <p>OptionBuilder allows the user to create Options using descriptive\n+ * methods.</p>\n+ * <p>Details on the Builder pattern can be found at \n+ * <a href=\"http://\">http://</a>.</p>\n+ *\n+ * @author John Keyes ( jbjk at mac.com )\n+ * @since 1.0\n+ */\n public class OptionBuilder {\n \n+    /** long option */\n     private static String longopt;\n+    /** option description */\n     private static String description;\n+    /** has an argument? */\n     private static boolean arg;\n+    /** is required? */\n     private static boolean required;\n+    /** has multiple arguments */\n     private static boolean multipleArgs;\n+    /** option type */\n     private static Object type;\n \n+    /** option builder instance */\n     private static OptionBuilder instance = new OptionBuilder();\n \n     // private constructor\n     private OptionBuilder() {\n     }\n \n+    /**\n+     * <p>Resets the member variables to their default values.</p>\n+     */\n     private static void reset() {\n         description = null;\n         longopt = null;\n         multipleArgs = false;\n     }\n \n+    /**\n+     * <p>The next Option created will have the following long option value.</p>\n+     *\n+     * @param longopt the long option value\n+     * @return the OptionBuilder instance\n+     */\n     public static OptionBuilder withLongOpt( String longopt ) {\n         instance.longopt = longopt;\n         return instance;\n     }\n \n+    /**\n+     * <p>The next Option created will require an argument value.</p>\n+     *\n+     * @return the OptionBuilder instance\n+     */\n     public static OptionBuilder hasArg( ) {\n         instance.arg = true;\n         return instance;\n     }\n \n+    /**\n+     * <p>The next Option created will require an argument value if\n+     * <code>hasArg</code> is true.</p>\n+     *\n+     * @param hasArg if true then the Option has an argument value\n+     * @return the OptionBuilder instance\n+     */\n+    public static OptionBuilder hasArg( boolean hasArg ) {\n+        instance.arg = hasArg;\n+        return instance;\n+    }\n+\n+    /**\n+     * <p>The next Option created will be required.</p>\n+     *\n+     * @return the OptionBuilder instance\n+     */\n     public static OptionBuilder isRequired( ) {\n         instance.required = true;\n         return instance;\n     }\n \n+    /**\n+     * <p>The next Option created will be required if <code>required</code>\n+     * is true.</p>\n+     *\n+     * @param required if true then the Option is required\n+     * @return the OptionBuilder instance\n+     */\n+    public static OptionBuilder isRequired( boolean required ) {\n+        instance.required = required;\n+        return instance;\n+    }\n+\n+    /**\n+     * <p>The next Option created can have multiple argument values.</p>\n+     *\n+     * @return the OptionBuilder instance\n+     */\n     public static OptionBuilder hasMultipleArgs( ) {\n         instance.multipleArgs = true;\n         return instance;\n     }\n \n+    /**\n+     * <p>The next Option created will have a value that will be an instance \n+     * of <code>type</code>.</p>\n+     *\n+     * @param type the type of the Options argument value\n+     * @return the OptionBuilder instance\n+     */\n     public static OptionBuilder withType( Object type ) {\n         instance.type = type;\n         return instance;\n     }\n \n+    /**\n+     * <p>The next Option created will have the specified description</p>\n+     *\n+     * @param description a description of the Option's purpose\n+     * @return the OptionBuilder instance\n+     */\n     public static OptionBuilder withDescription( String description ) {\n         instance.description = description;\n         return instance;\n     }\n \n+    /**\n+     * <p>Create an Option using the current settings and with \n+     * the specified Option <code>char</code>.</p>\n+     *\n+     * @param opt the character representation of the Option\n+     * @return the Option instance\n+     * @throws IllegalArgumentException if <code>opt</code> is not\n+     * a valid character.  See Option.\n+     */\n     public static Option create( char opt )\n     throws IllegalArgumentException\n     {\n         return create( String.valueOf( opt ) );\n     }\n \n+    /**\n+     * <p>Create an Option using the current settings and with \n+     * the specified Option <code>char</code>.</p>\n+     *\n+     * @param opt the <code>java.lang.String</code> representation \n+     * of the Option\n+     * @return the Option instance\n+     * @throws IllegalArgumentException if <code>opt</code> is not\n+     * a valid character.  See Option.\n+     */\n     public static Option create( String opt ) \n     throws IllegalArgumentException\n     {\n+        // create the option\n         Option option = new Option( opt, arg, description );\n+\n+        // set the option properties\n         option.setLongOpt( longopt );\n         option.setRequired( required );\n         option.setMultipleArgs( multipleArgs );\n         option.setType( type );\n+\n+        // reset the OptionBuilder properties\n         instance.reset();\n+\n+        // return the Option instance\n         return option;\n     }\n }\n--- a/src/java/org/apache/commons/cli/Options.java\n+++ b/src/java/org/apache/commons/cli/Options.java\n      * @return the resulting Options instance\n      */\n     public Options addOption(String opt, boolean hasArg, String description) {\n-        addOption( opt, null, hasArg, description, false );\n+        addOption( opt, null, hasArg, description );\n         return this;\n     }\n     \n      * @return the resulting Options instance\n      */\n     public Options addOption(String opt, String longOpt, boolean hasArg, String description) {\n-        addOption( opt, longOpt, hasArg, description, false );        \n-        return this;\n-    }\n-\n-    /** <p>Add an option that contains a short-name and a long-name</p>\n-     * <p>It may be specified as requiring an argument.</p>\n-     *\n-     * @param opt Short single-character name of the option.\n-     * @param longOpt Long multi-character name of the option.\n-     * @param hasArg flag signally if an argument is required after this option\n-     * @param description Self-documenting description\n-     * @param required specifies if this option is required\n-     * @return the resulting Options instance\n-     */\n-    public Options addOption(String opt, String longOpt, boolean hasArg, String description,\n-                             boolean required) {\n-        addOption( new Option(opt, longOpt, hasArg, description, required) );        \n-        return this;\n-    }\n-\n-    /** <p>Add an option that contains a short-name and a long-name</p>\n-     * <p>It may be specified as requiring an argument.</p>\n-     *\n-     * @param opt Short single-character name of the option.\n-     * @param longOpt Long multi-character name of the option.\n-     * @param hasArg flag signally if an argument is required after this option\n-     * @param description Self-documenting description\n-     * @param required specifies if this option is required\n-     * @param multipleArgs specifies if this option can accept multiple argument values\n-     * @return the resulting Options instance\n-     */\n-    public Options addOption(String opt, String longOpt, boolean hasArg, String description,\n-                             boolean required, boolean multipleArgs) {\n-        addOption( new Option(opt, longOpt, hasArg, description, required, multipleArgs) );        \n-        return this;\n-    }\n-\n-    /** <p>Add an option that contains a short-name and a long-name</p>\n-     * <p>It may be specified as requiring an argument.</p>\n-     *\n-     * @param opt Short single-character name of the option.\n-     * @param longOpt Long multi-character name of the option.\n-     * @param hasArg flag signally if an argument is required after this option\n-     * @param description Self-documenting description\n-     * @param required specifies if this option is required\n-     * @param multipleArgs specifies if this option can accept multiple argument values\n-     * @param type specifies the type for the value of the option\n-     * @return the resulting Options instance\n-     */\n-    public Options addOption(String opt, String longOpt, boolean hasArg, String description,\n-                             boolean required, boolean multipleArgs, Object type) {\n-        addOption( new Option(opt, longOpt, hasArg, description, required, multipleArgs, type) );        \n+        addOption( new Option( opt, longOpt, hasArg, description ) );        \n         return this;\n     }\n \n--- a/src/java/org/apache/commons/cli/PatternOptionBuilder.java\n+++ b/src/java/org/apache/commons/cli/PatternOptionBuilder.java\n         Object type = null;\n \n         Options options = new Options();\n-\n+        \n         for(int i=0; i<sz; i++) {\n             ch = pattern.charAt(i);\n \n             if(!isValueCode(ch)) {\n                 if(opt != ' ') {\n                     // we have a previous one to deal with\n-                    options.addOption(\"\" + opt, null, (type != null), \"\", required, false, type);\n+                    options.addOption( OptionBuilder.hasArg( type != null )\n+                                                    .isRequired( required )\n+                                                    .withType( type )\n+                                                    .create( opt ) );\n                     required = false;\n                     type = null;\n                     opt = ' ';\n \n         if(opt != ' ') {\n             // we have a final one to deal with\n-            options.addOption( \"\" + opt, null, (type != null), \"\", required, false, type);\n+            options.addOption( OptionBuilder.hasArg( type != null )\n+                                            .isRequired( required )\n+                                            .withType( type )\n+                                            .create( opt ) );\n         }\n \n         return options;\n--- a/src/test/org/apache/commons/cli/ApplicationTest.java\n+++ b/src/test/org/apache/commons/cli/ApplicationTest.java\n         options.addOption( \"logger\", true, \"the class which is to perform the logging\" );\n         options.addOption( \"listener\", true, \"add an instance of a class as a project listener\" );\n         options.addOption( \"buildfile\", true, \"use given buildfile\" );\n-        options.addOption( \"D\", null, true, \"use value for given property\", false, true );\n+        options.addOption( OptionBuilder.withDescription( \"use value for given property\" )\n+                                        .hasArg()\n+                                        .hasMultipleArgs()\n+                                        .create( 'D' ) );\n+                           //, null, true, , false, true );\n         options.addOption( \"find\", true, \"search for buildfile towards the root of the filesystem and use it\" );\n \n         String[] args = new String[]{ \"-buildfile\", \"mybuild.xml\",\n--- a/src/test/org/apache/commons/cli/ParseRequiredTest.java\n+++ b/src/test/org/apache/commons/cli/ParseRequiredTest.java\n                        \"enable-a\",\n                        false,\n                        \"turn [a] on or off\")\n-            .addOption(\"b\",\n-                       \"bfile\",\n-                       true,\n-                       \"set the value of [b]\",\n-                       true);\n+            .addOption( OptionBuilder.withLongOpt( \"bfile\" )\n+                                     .hasArg()\n+                                     .isRequired()\n+                                     .withDescription( \"set the value of [b]\" )\n+                                     .create( 'b' ) );\n     }\n \n     public void tearDown()\n--- a/src/test/org/apache/commons/cli/PatternOptionBuilderTest.java\n+++ b/src/test/org/apache/commons/cli/PatternOptionBuilderTest.java\n public class PatternOptionBuilderTest\n extends TestCase\n {\n-   public static void main( String[] args )\n+    public static void main( String[] args )\n    {\n       String[] testName = { PatternOptionBuilderTest.class.getName() };\n       junit.textui.TestRunner.main(testName);\n    }\n \n    public void testSimplePattern()\n-      throws Exception\n    {\n-      Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\n-      String[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n+       try {\n+           Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\n+           String[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n       \n-      CommandLineParser parser = CommandLineParserFactory.newParser();\n-      CommandLine line = parser.parse(options,args);\n-      assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));\n-      assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));\n-      assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));\n-      assertEquals(\"boolean true flag c\", true, line.hasOption(\"c\"));\n-      assertEquals(\"boolean false flag d\", false, line.hasOption(\"d\"));\n-      assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));\n-      assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));\n-      assertEquals(\"number flag n\", new Float(4.5), line.getOptionObject(\"n\"));\n-      assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));\n-/// DATES NOT SUPPORTED YET.\n-//      assertEquals(\"number flag t\", new java.util.Date(1023400137276L), line.getOptionObject('z'));\n-//     input is:  \"Thu Jun 06 17:48:57 EDT 2002\"\n+           CommandLineParser parser = CommandLineParserFactory.newParser();\n+           CommandLine line = parser.parse(options,args);\n+           assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));\n+           assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));\n+           assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));\n+           assertEquals(\"boolean true flag c\", true, line.hasOption(\"c\"));\n+           assertEquals(\"boolean false flag d\", false, line.hasOption(\"d\"));\n+           assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));\n+           assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));\n+           assertEquals(\"number flag n\", new Float(4.5), line.getOptionObject(\"n\"));\n+           assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));\n+           /// DATES NOT SUPPORTED YET.\n+           //      assertEquals(\"number flag t\", new java.util.Date(1023400137276L), line.getOptionObject('z'));\n+           //     input is:  \"Thu Jun 06 17:48:57 EDT 2002\"\n+       }\n+       catch( ParseException exp ) {\n+           fail( exp.getMessage() );\n+       }\n+       catch( java.net.MalformedURLException exp ) {\n+           fail( exp.getMessage() );\n+       }\n    }\n \n }\n--- a/src/test/org/apache/commons/cli/ValuesTest.java\n+++ b/src/test/org/apache/commons/cli/ValuesTest.java\n                        true,\n                        \"set -d\");\n         \n-        opts.addOption(\"e\",\n-                       \"e\",\n-                       true,\n-                       \"set -e\",\n-                       false,\n-                       true);\n+        opts.addOption( OptionBuilder.withLongOpt( \"e\" )\n+                                     .hasArg()\n+                                     .hasMultipleArgs()\n+                                     .withDescription( \"set -e \")\n+                                     .create( 'e' ) );\n \n         opts.addOption(\"f\",\n                        \"f\",", "timestamp": 1028070382, "metainfo": ""}