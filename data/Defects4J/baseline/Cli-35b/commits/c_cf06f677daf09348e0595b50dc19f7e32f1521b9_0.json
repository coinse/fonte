{"sha": "cf06f677daf09348e0595b50dc19f7e32f1521b9", "log": "CLI-159: It is now possible to set a required flag on a group explicitly. If this group is then added as child to another group, it is only validated if options of this group are found on the command line or its required flag is true.  ", "commit": "\n--- a/src/java/org/apache/commons/cli2/builder/GroupBuilder.java\n+++ b/src/java/org/apache/commons/cli2/builder/GroupBuilder.java\n     private List options;\n     private int minimum;\n     private int maximum;\n+    private boolean required;\n \n     /**\n      * Creates a new GroupBuilder\n      */\n     public Group create() {\n         final GroupImpl group =\n-            new GroupImpl(options, name, description, minimum, maximum);\n+            new GroupImpl(options, name, description, minimum, maximum, required);\n \n         reset();\n \n         options = new ArrayList();\n         minimum = 0;\n         maximum = Integer.MAX_VALUE;\n+        required = true;\n         return this;\n     }\n \n         this.options.add(option);\n         return this;\n     }\n+\n+    /**\n+     * Sets the required flag. This flag is evaluated for groups that are\n+     * added to other groups as child groups. If set to <b>true</b> the\n+     * minimum and maximum constraints of the child group are always evaluated.\n+     * @param newRequired the required flag\n+     * @return this builder\n+     */\n+    public GroupBuilder withRequired(final boolean newRequired) {\n+        this.required = newRequired;\n+        return this;\n+    }\n }\n--- a/src/java/org/apache/commons/cli2/option/GroupImpl.java\n+++ b/src/java/org/apache/commons/cli2/option/GroupImpl.java\n      * @param description a description of this Group\n      * @param minimum the minimum number of Options for a valid CommandLine\n      * @param maximum the maximum number of Options for a valid CommandLine\n+     * @param required a flag whether this group is required\n      */\n     public GroupImpl(final List options,\n                      final String name,\n                      final String description,\n                      final int minimum,\n-                     final int maximum) {\n-        super(0, false);\n+                     final int maximum,\n+                     final boolean required) {\n+        super(0, required);\n \n         this.name = name;\n         this.description = description;\n             final Option option = (Option) i.next();\n \n             // needs validation?\n-            boolean validate = option.isRequired() || option instanceof Group;\n+            boolean validate = option.isRequired();\n \n             // if the child option is present then validate it\n             if (commandLine.hasOption(option)) {\n         return maximum;\n     }\n \n-    public boolean isRequired() {\n-        return getMinimum() > 0;\n+    /**\n+     * Tests whether this option is required. For groups we evaluate the\n+     * <code>required</code> flag common to all options, but also take the\n+     * minimum constraints into account.\n+     *\n+     * @return a flag whether this option is required\n+     */\n+    public boolean isRequired()\n+    {\n+        return (getParent() == null || super.isRequired()) && getMinimum() > 0;\n     }\n \n     public void defaults(final WriteableCommandLine commandLine) {\n--- /dev/null\n+++ b/src/test/org/apache/commons/cli2/bug/BugCLI159Test.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.cli2.bug;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.cli2.CommandLine;\n+import org.apache.commons.cli2.Group;\n+import org.apache.commons.cli2.Option;\n+import org.apache.commons.cli2.OptionException;\n+import org.apache.commons.cli2.builder.DefaultOptionBuilder;\n+import org.apache.commons.cli2.builder.GroupBuilder;\n+import org.apache.commons.cli2.commandline.Parser;\n+\n+/**\n+ * Inconsistent handling of minimum and maximum constraints for groups and their\n+ * child groups.\n+ *\n+ * @author Oliver Heger\n+ * @version $Id$\n+ */\n+public class BugCLI159Test extends TestCase\n+{\n+    /** The parent group. */\n+    private Group parent;\n+\n+    /** The child group. */\n+    private Group child;\n+\n+    /** The parser. */\n+    private Parser parser;\n+\n+    /**\n+     * Creates some test options, including a group with a child group.\n+     *\n+     * @param childGroupRequired a flag whether the child group is required\n+     */\n+    private void setUpOptions(boolean childGroupRequired)\n+    {\n+        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();\n+        final GroupBuilder gbuilder = new GroupBuilder();\n+        Option parentOpt = obuilder.withLongName(\"parent\").withShortName(\"p\")\n+                .create();\n+        Option childOpt1 = obuilder.withLongName(\"child\").withShortName(\"c\")\n+                .create();\n+        Option childOpt2 = obuilder.withLongName(\"sub\").withShortName(\"s\")\n+                .create();\n+        Option childOpt3 = obuilder.withLongName(\"test\").withShortName(\"t\")\n+                .create();\n+        child = gbuilder.withName(\"childOptions\").withOption(childOpt1)\n+                .withOption(childOpt2).withOption(childOpt3).withMinimum(2)\n+                .withRequired(childGroupRequired).create();\n+        parent = gbuilder.withName(\"options\").withOption(parentOpt).withOption(\n+                child).withMinimum(0).create();\n+        parser = new Parser();\n+        parser.setGroup(parent);\n+    }\n+\n+    /**\n+     * Tests whether the child group can be omitted.\n+     */\n+    public void testNoChildGroup() throws OptionException\n+    {\n+        setUpOptions(false);\n+        CommandLine cl = parser.parse(new String[] {\n+            \"--parent\"\n+        });\n+        assertNotNull(\"No command line parsed\", cl);\n+        assertFalse(\"Child group found\", cl.hasOption(child));\n+    }\n+\n+    /**\n+     * Tests whether a required child groupd can be omitted.\n+     */\n+    public void testNoChildGroupRequired()\n+    {\n+        setUpOptions(true);\n+        try\n+        {\n+            parser.parse(new String[] {\n+                \"--parent\"\n+            });\n+            fail(\"Missing child group not detected!\");\n+        }\n+        catch (OptionException oex)\n+        {\n+            // ok\n+        }\n+    }\n+\n+    /**\n+     * Tests parsing an empty command line. Because the parent group is optional\n+     * this should be possible.\n+     */\n+    public void testNoOptions() throws OptionException\n+    {\n+        setUpOptions(false);\n+        CommandLine cl = parser.parse(new String[0]);\n+        assertFalse(\"Found parent option\", cl.hasOption(\"--parent\"));\n+        assertFalse(\"Found child option\", cl.hasOption(\"--child\"));\n+    }\n+\n+    /**\n+     * Tests parsing a command line with options of the child group.\n+     */\n+    public void testWithChildOptions() throws OptionException\n+    {\n+        setUpOptions(false);\n+        CommandLine cl = parser.parse(new String[] {\n+            \"-ct\"\n+        });\n+        assertTrue(\"child option not found\", cl.hasOption(\"--child\"));\n+        assertTrue(\"test option not found\", cl.hasOption(\"--test\"));\n+    }\n+\n+    /**\n+     * Tests a command line containing options of the child group, but the\n+     * minimum constraint is violated.\n+     */\n+    public void testWithChildOptionsMissing()\n+    {\n+        setUpOptions(false);\n+        try\n+        {\n+            parser.parse(new String[] {\n+                    \"--parent\", \"--sub\"\n+            });\n+            fail(\"Missing options of child group not detected!\");\n+        }\n+        catch (OptionException oex)\n+        {\n+            // ok\n+        }\n+    }\n+\n+    /**\n+     * Tests whether the root group is always validated.\n+     */\n+    public void testRequiredRootGroup()\n+    {\n+        setUpOptions(false);\n+        parser.setGroup(child);\n+        try\n+        {\n+            parser.parse(new String[] {\n+                \"--test\"\n+            });\n+            fail(\"Missing options not detected!\");\n+        }\n+        catch (OptionException oex)\n+        {\n+            // ok\n+        }\n+    }\n+}\n--- a/src/test/org/apache/commons/cli2/option/GroupTest.java\n+++ b/src/test/org/apache/commons/cli2/option/GroupTest.java\n         options.add(COMMAND_START);\n         options.add(COMMAND_STOP);\n \n-        return new GroupImpl(options, \"httpd-cmds\", \"The command to pass to the server\", 1, 1);\n+        return new GroupImpl(options, \"httpd-cmds\", \"The command to pass to the server\", 1, 1, true);\n     }\n \n     public static Group buildApachectlGroup() {\n         options.add(ParentTest.buildKParent());\n \n         return new GroupImpl(options, \"apachectl\", \"Controls the apache http deamon\", 0,\n-                             Integer.MAX_VALUE);\n+                             Integer.MAX_VALUE, true);\n     }\n \n     public static Group buildAntGroup() {\n         options.add(DefaultOptionTest.buildHelpOption());\n         options.add(ArgumentTest.buildTargetsArgument());\n \n-        return new GroupImpl(options, \"ant\", \"The options for ant\", 0, Integer.MAX_VALUE);\n+        return new GroupImpl(options, \"ant\", \"The options for ant\", 0, Integer.MAX_VALUE, true);\n+    }\n+\n+    private static Group buildRequiredTestGroup(final boolean required,\n+            final int minimum)\n+    {\n+        final Group group = new GroupImpl(new ArrayList(), \"test\", null,\n+                minimum, Integer.MAX_VALUE, required);\n+        final List options = new ArrayList(1);\n+        options.add(group);\n+        new GroupImpl(options, \"parent\", null, 0, Integer.MAX_VALUE, false);\n+        return group;\n     }\n \n     /*\n \n         assertFalse(i.hasNext());\n     }\n+\n+    /**\n+     * Tests isRequired() for a child group if neither the required flag nor a\n+     * minimum constraint is set.\n+     */\n+    public void testIsRequired_ChildNoFlagNoMinimum()\n+    {\n+        final Group group = buildRequiredTestGroup(false, 0);\n+        assertFalse(\"Group is required\", group.isRequired());\n+    }\n+\n+    /**\n+     * Tests isRequired() for a child group that has a minimum constraint, but\n+     * the required flag is not set.\n+     */\n+    public void testIsRequired_ChildNoFlagMinimum()\n+    {\n+        final Group group = buildRequiredTestGroup(false, 10);\n+        assertFalse(\"Group is required\", group.isRequired());\n+    }\n+\n+    /**\n+     * Tests isRequired() for a child group that has the required flag set, but\n+     * no minimum constraint. In this constellation the group is de facto not\n+     * required.\n+     */\n+    public void testIsRequired_ChildFlagNoMinimum()\n+    {\n+        final Group group = buildRequiredTestGroup(true, 0);\n+        assertFalse(\"Group is required\", group.isRequired());\n+    }\n+\n+    /**\n+     * Tests isRequired() for a child group that has both the required flag and\n+     * a minimum constraint set. This is indeed a required group.\n+     */\n+    public void testIsRequired_ChildFlagMinimum()\n+    {\n+        final Group group = buildRequiredTestGroup(true, 10);\n+        assertTrue(\"Group is not required\", group.isRequired());\n+    }\n+\n+    /**\n+     * Tests isRequired() for the root group when no minimum constraint is set.\n+     */\n+    public void testIsRequired_ParentNoMinimum()\n+    {\n+        final Group parent = (Group) buildRequiredTestGroup(false, 0)\n+                .getParent();\n+        assertFalse(\"Group is required\", parent.isRequired());\n+    }\n+\n+    /**\n+     * Tests isRequired() for the root group with a minimum constraint.\n+     */\n+    public void testIsRequired_ParentMiminum()\n+    {\n+        final Group parent = new GroupImpl(new ArrayList(), \"test\", null, 10,\n+                Integer.MAX_VALUE, false);\n+        assertTrue(\"Group not required\", parent.isRequired());\n+    }\n }", "timestamp": 1217190734, "metainfo": ""}