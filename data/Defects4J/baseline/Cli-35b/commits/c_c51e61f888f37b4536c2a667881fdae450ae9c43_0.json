{"sha": "c51e61f888f37b4536c2a667881fdae450ae9c43", "log": "- javadoc updated  ", "commit": "\n--- a/src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java\n+++ b/src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java\n-/**\n- * Copyright 2003-2004 The Apache Software Foundation\n+/*\n+ * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n package org.apache.commons.cli2.validation;\n \n /**\n- * An exception indicating validation failure\n+ * An exception indicating validation failure.\n+ *\n+ * @author Rob Oxspring\n+ * @author John Keyes\n  */\n public class InvalidArgumentException extends Exception {\n \n--- a/src/java/org/apache/commons/cli2/validation/NumberValidator.java\n+++ b/src/java/org/apache/commons/cli2/validation/NumberValidator.java\n-/**\n- * Copyright 2003-2004 The Apache Software Foundation\n+/*\n+ * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n import java.util.ListIterator;\n \n /**\n- * A Validator instance that parses Numbers\n+ * The <code>NumberValidator</code> validates the string argument\n+ * values are numbers.  If the value is a number, the string value in\n+ * the {@link java.util.List} of values is replaced with the\n+ * {@link java.lang.Number} instance.\n+ *\n+ * A maximum and minimum value can also be specified using \n+ * the {@link #setMaximum setMaximum}, and the \n+ * {@link #setMinimum setMinimum} methods.\n+ *\n+ * The following example shows how to limit the valid values\n+ * for the age attribute to integers less than 100.\n+ *\n+ * <pre>\n+ * ...\n+ * ArgumentBuilder builder = new ArgumentBuilder();\n+ * NumberValidator validator = NumberValidator.getIntegerInstance();\n+ * validator.setMaximum(new Integer(100));\n+ * \n+ * Argument age = \n+ *     builder.withName(\"age\");\n+ *            .withValidator(validator);\n+ * </pre>\n+ * \n+ * @author Rob Oxspring\n+ * @author John Keyes\n  */\n public class NumberValidator implements Validator {\n \n     /**\n-     * @return an instance using local currency format\n+     * Returns a <code>NumberValidator</code> for a currency format \n+     * for the current default locale.\n+     * @return a <code>NumberValidator</code> for a currency format \n+     * for the current default locale.\n      */\n     public static NumberValidator getCurrencyInstance() {\n         return new NumberValidator(NumberFormat.getCurrencyInstance());\n     }\n \n     /**\n-     * @return an instance using local integer format\n+     * Returns a <code>NumberValidator</code> for an integer number format \n+     * for the current default locale.\n+     * @return a <code>NumberValidator</code> for an integer number format \n+     * for the current default locale.\n      */\n     public static NumberValidator getIntegerInstance() {\n         final NumberFormat format = NumberFormat.getNumberInstance();\n     }\n \n     /**\n-     * @return an instance using local percent format\n+     * Returns a <code>NumberValidator</code> for a percentage format \n+     * for the current default locale.\n+     * @return a <code>NumberValidator</code> for a percentage format \n+     * for the current default locale.\n      */\n     public static NumberValidator getPercentInstance() {\n         return new NumberValidator(NumberFormat.getPercentInstance());\n     }\n \n     /**\n-     * @return an instance using local number format\n+     * Returns a <code>NumberValidator</code> for a general-purpose \n+     * number format for the current default locale.\n+     * @returns a <code>NumberValidator</code> for a general-purpose \n+     * number format for the current default locale.\n      */\n     public static NumberValidator getNumberInstance() {\n         return new NumberValidator(NumberFormat.getNumberInstance());\n     }\n \n+    /** the <code>NumberFormat</code> being used. */\n     private NumberFormat format;\n+\n+    /** the lower bound for argument values. */\n     private Number minimum = null;\n+    \n+    /** the upper bound for argument values */\n     private Number maximum = null;\n \n     /**\n-     * Creates a new NumberValidator\n+     * Creates a new NumberValidator.\n      */\n     public NumberValidator() {\n         this(NumberFormat.getInstance());\n         this.format = format;\n     }\n \n+    /**\n+     * Validate the list of values against the list of permitted values.\n+     * If a value is valid, replace the string in the <code>values</code>\n+     * {@link java.util.List} with the {@link java.lang.Number} instance.\n+     * \n+     * @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)\n+     */\n     public void validate(final List values) throws InvalidArgumentException {\n         for (final ListIterator i = values.listIterator(); i.hasNext();) {\n             final String value = (String)i.next();\n     }\n \n     /**\n-     * @return the format of a valid Number\n+     * Return the format being used to validate argument values against.\n+     *\n+     * @return the format being used to validate argument values against.\n      */\n     public NumberFormat getFormat() {\n         return format;\n     }\n \n     /**\n-     * @return the maximum value for a valid Number\n+     * Specify the format being used to validate argument values against.\n+     *\n+     * @param format the format being used to validate argument values against.\n+     */\n+    public void setFormat(NumberFormat format) {\n+        this.format = format;\n+    }\n+    \n+    /**\n+     * Return the maximum value allowed for an argument value.\n+     *\n+     * @return the maximum value allowed for an argument value.\n      */\n     public Number getMaximum() {\n         return maximum;\n     }\n \n     /**\n-     * @param maximum the maximum value for a valid Number\n+     * Specify the maximum value allowed for an argument value.\n+     *\n+     * @param maximum the maximum value allowed for an argument value.\n      */\n     public void setMaximum(Number maximum) {\n         this.maximum = maximum;\n     }\n \n     /**\n-     * @return the minimum value for a valid Number\n+     * Return the minimum value allowed for an argument value.\n+     *\n+     * @return the minimum value allowed for an argument value.\n      */\n     public Number getMinimum() {\n         return minimum;\n     }\n \n     /**\n-     * @param minimum the minimum value for a valid Number\n+     * Specify the minimum value allowed for an argument value.\n+     *\n+     * @param minimum the minimum value allowed for an argument value.\n      */\n     public void setMinimum(Number minimum) {\n         this.minimum = minimum;\n     }\n-\n-    /**\n-     * @param format The format to set.\n-     */\n-    public void setFormat(NumberFormat format) {\n-        this.format = format;\n-    }\n }\n--- a/src/java/org/apache/commons/cli2/validation/UrlValidator.java\n+++ b/src/java/org/apache/commons/cli2/validation/UrlValidator.java\n     /**\n      * Validate the list of values against the list of permitted values.\n      * If a value is valid, replace the string in the <code>values</code>\n-     * {@link java.util.List} with the {@link java.net.URL}.\n+     * {@link java.util.List} with the {@link java.net.URL} instance.\n      * \n      * @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)\n      */", "timestamp": 1125760713, "metainfo": ""}