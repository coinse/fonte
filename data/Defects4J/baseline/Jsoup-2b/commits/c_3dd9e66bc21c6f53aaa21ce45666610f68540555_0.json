{"sha": "3dd9e66bc21c6f53aaa21ce45666610f68540555", "log": "Have Element DOM methods return Elements instead of List<Element>, to give ready access to .select(query)", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n      * @param tagName The tag name to search for (case insensitively).\n      * @return a matching unmodifiable list of elements. Will be empty if this element and none of its children match.\n      */\n-    public List<Element> getElementsByTag(String tagName) {\n+    public Elements getElementsByTag(String tagName) {\n         Validate.notEmpty(tagName);\n         tagName = tagName.toLowerCase().trim();\n \n     public Element getElementById(String id) {\n         Validate.notEmpty(id);\n         \n-        List<Element> elements = Collector.collect(new Evaluator.Id(id), this);\n+        Elements elements = Collector.collect(new Evaluator.Id(id), this);\n         if (elements.size() > 0)\n             return elements.get(0);\n         else\n             return null;\n     }\n \n-    public List<Element> getElementsWithClass(String className) {\n+    public Elements getElementsWithClass(String className) {\n         Validate.notEmpty(className);\n \n         return Collector.collect(new Evaluator.Class(className), this);\n     }\n \n-    public List<Element> getElementsWithAttribute(String attributeKey) {\n+    public Elements getElementsWithAttribute(String attributeKey) {\n         Validate.notEmpty(attributeKey);\n         attributeKey = attributeKey.trim().toLowerCase();\n \n         return Collector.collect(new Evaluator.Attribute(attributeKey), this);\n     }\n \n-    public List<Element> getElementsWithAttributeValue(String key, String value) {\n+    public Elements getElementsWithAttributeValue(String key, String value) {\n         Validate.notEmpty(key);\n         key = key.trim().toLowerCase();\n         Validate.notEmpty(value);\n--- a/src/main/java/org/jsoup/select/Collector.java\n+++ b/src/main/java/org/jsoup/select/Collector.java\n  * @author Jonathan Hedley\n  */\n public class Collector {\n-    public static List<Element> collect (Evaluator eval, Element root) {\n-        List<Element> elements = new ArrayList<Element>();\n+    public static Elements collect (Evaluator eval, Element root) {\n+        Elements elements = new Elements();\n         accumulateMatches(eval, elements, root);\n-        return Collections.unmodifiableList(elements);\n+        return elements;\n     }\n \n     private static void accumulateMatches(Evaluator eval, List<Element> elements, Element element) {", "timestamp": 1309605102, "metainfo": ""}