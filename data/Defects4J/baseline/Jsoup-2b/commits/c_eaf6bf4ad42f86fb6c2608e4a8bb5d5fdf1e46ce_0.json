{"sha": "eaf6bf4ad42f86fb6c2608e4a8bb5d5fdf1e46ce", "log": "Handle HTML encoded (escaped) data in text nodes and attributes.", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Attribute.java\n+++ b/src/main/java/org/jsoup/nodes/Attribute.java\n package org.jsoup.nodes;\n \n+import org.apache.commons.lang.StringEscapeUtils;\n import org.apache.commons.lang.Validate;\n \n /**\n     private String key;\n     private String value;\n \n+    /**\n+     * Create a new attribute from unencoded (raw) key and value.\n+     * @param key attribute key\n+     * @param value attribute value\n+     * @see #createFromEncoded\n+     */\n     public Attribute(String key, String value) {\n         Validate.notEmpty(key);\n         Validate.notNull(value);\n         Validate.notNull(value);\n         this.value = value;\n     }\n+\n+    /**\n+     * Create a new Attribute from an unencoded key and a HMTL attribute encoded value.\n+     * @param unencodedKey assumes the key is not encoded, as can be only run of simple \\w chars.\n+     * @param encodedValue HTML attribute encoded value\n+     * @return attribute\n+     */\n+    public static Attribute createFromEncoded(String unencodedKey, String encodedValue) {\n+        String value = StringEscapeUtils.unescapeHtml(encodedValue);\n+        return new Attribute(unencodedKey, value);\n+    }\n }\n--- a/src/main/java/org/jsoup/nodes/TextNode.java\n+++ b/src/main/java/org/jsoup/nodes/TextNode.java\n package org.jsoup.nodes;\n+\n+import org.apache.commons.lang.StringEscapeUtils;\n \n /**\n  A text node.\n  @author Jonathan Hedley, jonathan@hedley.net */\n public class TextNode extends Node {\n     private static final String TEXT_KEY = \"text\";\n+\n+    /**\n+     * Create a new TextNode representing the supplied (unencoded) text).\n+     * @param text raw text\n+     * @see #createFromEncoded(String)\n+     */\n     public TextNode(String text) {\n         super();\n         attributes.put(TEXT_KEY, text);\n     public String getWholeText() {\n         return attributes.get(TEXT_KEY);\n     }\n+\n+    /**\n+     * Create a new TextNode from HTML encoded (aka escaped) data.\n+     * @param encodedText Text containing encoded HTML (e.g. &amp;lt;)\n+     * @return TextNode containing unencoded data (e.g. &lt;)\n+     */\n+    public static TextNode createFromEncoded(String encodedText) {\n+        String text = StringEscapeUtils.unescapeHtml(encodedText);\n+        return new TextNode(text);\n+    }\n }\n--- a/src/main/java/org/jsoup/parser/Parser.java\n+++ b/src/main/java/org/jsoup/parser/Parser.java\n             tq.consumeWhitespace();\n         }\n         if (!key.isEmpty())\n-            return new Attribute(key, value);\n+            return Attribute.createFromEncoded(key, value);\n         else {\n             tq.consume(); // unknown char, keep popping so not get stuck\n             return null;\n         while (!tq.matches(\"<\") && !tq.isEmpty()) { // scan to next tag\n             textAccum.append(tq.consume());\n         }\n-        TextNode textNode = new TextNode(textAccum.toString());\n+        TextNode textNode = TextNode.createFromEncoded(textAccum.toString());\n         last().addChild(textNode);\n     }\n \n--- a/src/test/java/org/jsoup/parser/ParserTest.java\n+++ b/src/test/java/org/jsoup/parser/ParserTest.java\n         assertEquals(\"Hello world\", body.children().get(0).text());\n     }\n \n+    @Test public void handlesEscapedData() {\n+        String html = \"<div title='Surf &amp; Turf'>Reef &amp; Beef</div>\";\n+        Document doc = Jsoup.parse(html);\n+        Element div = doc.getElementsByTag(\"div\").get(0);\n+\n+        assertEquals(\"Surf & Turf\", div.attr(\"title\"));\n+        assertEquals(\"Reef & Beef\", div.text());\n+    }\n+\n \n }", "timestamp": 1309605101, "metainfo": ""}