{"sha": "f43698527ef2b5ba15fe85d46d2d505418f68243", "log": "New unified parser (CLI-181, also fixes CLI-160, CLI-161, CLI-167, CLI-184)  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/cli/DefaultParser.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.cli;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Iterator;\n+\n+/**\n+ * Default parser.\n+ * \n+ * @author Emmanuel Bourg\n+ * @version $Revision$, $Date$\n+ * @since 1.3\n+ */\n+public class DefaultParser implements CommandLineParser\n+{    \n+    protected CommandLine cmd;\n+    protected Options options;\n+    protected boolean stopAtNonOption;\n+    \n+    /** The token currently processed. */\n+    protected String currentToken;\n+    \n+    /** The last option parsed. */\n+    protected Option currentOption;\n+    \n+    /** Flag indicating if tokens should no longer be analysed and simply added as arguments of the command line. */\n+    protected boolean skipParsing;\n+    \n+    /** The required options expected to be found when parsing the command line. */\n+    protected List expectedOpts;\n+    \n+    public CommandLine parse(Options options, String[] arguments) throws ParseException\n+    {\n+        return parse(options, arguments, false);\n+    }\n+\n+    public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException\n+    {\n+        this.options = options;\n+        this.stopAtNonOption = stopAtNonOption;\n+        skipParsing = false;\n+        currentOption = null;\n+        expectedOpts = new ArrayList(options.getRequiredOptions());\n+        \n+        // clear the data from the groups\n+        for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();)\n+        {\n+            OptionGroup group = (OptionGroup) it.next();\n+            group.setSelected(null);\n+        }\n+        \n+        cmd = new CommandLine();\n+\n+        if (arguments != null)\n+        {\n+            for (int i = 0; i < arguments.length; i++)\n+            {\n+                handleToken(arguments[i]);\n+            }\n+        }\n+        \n+        // check the arguments of the last option\n+        checkRequiredArgs();\n+        \n+        checkRequiredOptions();\n+        \n+        return cmd;\n+    }\n+\n+    /**\n+     * Throws a {@link MissingOptionException} if all of the required options\n+     * are not present.\n+     *\n+     * @throws MissingOptionException if any of the required Options\n+     * are not present.\n+     */\n+    private void checkRequiredOptions() throws MissingOptionException\n+    {       \n+        // if there are required options that have not been processsed\n+        if (!expectedOpts.isEmpty())\n+        {\n+            throw new MissingOptionException(expectedOpts);\n+        }\n+    }\n+\n+    /**\n+     * Throw a {@link MissingArgumentException} if the current option\n+     * didn't receive the number of arguments expected.\n+     */\n+    private void checkRequiredArgs() throws ParseException\n+    {\n+        if (currentOption != null && currentOption.requiresArg())\n+        {\n+            throw new MissingArgumentException(currentOption);\n+        }\n+    }\n+\n+    /**\n+     * Handle any command line token.\n+     * \n+     * @param token the command line token to handle\n+     * @throws ParseException\n+     */\n+    private void handleToken(String token) throws ParseException\n+    {\n+        currentToken = token;\n+        \n+        if (skipParsing)\n+        {\n+            cmd.addArg(token);\n+        }\n+        else if (\"--\".equals(token))\n+        {\n+            skipParsing = true;\n+        }\n+        else if (currentOption != null && currentOption.acceptsArg() && isArgument(token))\n+        {\n+            currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token));\n+        }\n+        else if (token.startsWith(\"--\"))\n+        {\n+            handleLongOption(token);\n+        }\n+        else if (token.startsWith(\"-\") && !\"-\".equals(token))\n+        {\n+            handleShortAndLongOption(token);\n+        }\n+        else\n+        {\n+            handleUnknownToken(token);\n+        }\n+        \n+        if (currentOption != null && !currentOption.acceptsArg())\n+        {\n+            currentOption = null;\n+        }\n+    }\n+\n+    /**\n+     * Returns true is the token is a valid argument.\n+     * \n+     * @param token\n+     */\n+    private boolean isArgument(String token)\n+    {\n+        return !isOption(token) || isNegativeNumber(token);\n+    }\n+\n+    /**\n+     * Check if the token is a negative number.\n+     * \n+     * @param token\n+     */\n+    private boolean isNegativeNumber(String token)\n+    {\n+        try\n+        {\n+            Double.parseDouble(token);\n+            return true;\n+        }\n+        catch (NumberFormatException e)\n+        {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Tells if the token looks like an option.\n+     * \n+     * @param token\n+     */\n+    private boolean isOption(String token)\n+    {\n+        return isLongOption(token) || isShortOption(token);\n+    }\n+\n+    /**\n+     * Tells if the token looks like a short option.\n+     * \n+     * @param token\n+     */\n+    private boolean isShortOption(String token)\n+    {\n+        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)\n+        return token.startsWith(\"-\") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));\n+    }\n+\n+    /**\n+     * Tells if the token looks like a long option.\n+     * \n+     * @param token\n+     */\n+    private boolean isLongOption(String token)\n+    {\n+        if (!token.startsWith(\"-\") || token.length() == 1)\n+        {\n+            return false;\n+        }\n+\n+        int pos = token.indexOf(\"=\");\n+        String t = pos == -1 ? token : token.substring(0, pos);\n+        \n+        if (!options.getMatchingOptions(t).isEmpty())\n+        {\n+            // long or partial long options (--L, -L, --L=V, -L=V, --l, --l=V)\n+            return true;\n+        }\n+        else if (getLongPrefix(token) != null && !token.startsWith(\"--\"))\n+        {\n+            // -LV\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    /**\n+     * Handles an unknown token. If the token starts with a dash an \n+     * UnrecognizedOptionException is thrown. Otherwise the token is added \n+     * to the arguments of the command line. If the stopAtNonOption flag \n+     * is set, this stops the parsing and the remaining tokens are added \n+     * as-is in the arguments of the command line.\n+     * \n+     * @param token the command line token to handle\n+     */\n+    private void handleUnknownToken(String token) throws ParseException\n+    {\n+        if (token.startsWith(\"-\") && token.length() > 1 && !stopAtNonOption)\n+        {\n+            throw new UnrecognizedOptionException(\"Unrecognized option: \" + token, token);\n+        }\n+        \n+        cmd.addArg(token);\n+        if (stopAtNonOption)\n+        {\n+            skipParsing = true;\n+        }        \n+    }\n+\n+    /**\n+     * Handles the following tokens:\n+     * \n+     * --L\n+     * --L=V\n+     * --L V\n+     * --l\n+     * \n+     * @param token the command line token to handle\n+     */\n+    private void handleLongOption(String token) throws ParseException\n+    {\n+        if (token.indexOf('=') == -1)\n+        {\n+            handleLongOptionWithoutEqual(token);\n+        }\n+        else\n+        {\n+            handleLongOptionWithEqual(token);                                   \n+        }\n+    }\n+\n+    /**\n+     * Handles the following tokens:\n+     * \n+     * --L\n+     * -L\n+     * --l\n+     * -l\n+     * \n+     * @param token the command line token to handle\n+     */\n+    private void handleLongOptionWithoutEqual(String token) throws ParseException\n+    {\n+        List matchingOpts = options.getMatchingOptions(token);\n+        if (matchingOpts.isEmpty())\n+        {\n+            handleUnknownToken(currentToken);\n+        }\n+        else if (matchingOpts.size() > 1)\n+        {\n+            throw new AmbiguousOptionException(token, matchingOpts);\n+        }\n+        else\n+        {\n+            handleOption(options.getOption((String) matchingOpts.get(0)));\n+        }\n+    }\n+\n+    /**\n+     * Handles the following tokens:\n+     * \n+     * --L=V\n+     * -L=V\n+     * --l=V\n+     * -l=V\n+     * \n+     * @param token the command line token to handle\n+     */\n+    private void handleLongOptionWithEqual(String token) throws ParseException\n+    {\n+        int pos = token.indexOf('=');\n+\n+        String value = token.substring(pos + 1);\n+        \n+        String opt = token.substring(0, pos);\n+        \n+        List matchingOpts = options.getMatchingOptions(opt);\n+        if (matchingOpts.isEmpty())\n+        {\n+            handleUnknownToken(currentToken);\n+        }\n+        else if (matchingOpts.size() > 1)\n+        {\n+            throw new AmbiguousOptionException(opt, matchingOpts);\n+        }\n+        else\n+        {\n+            Option option = options.getOption((String) matchingOpts.get(0));\n+            \n+            if (option.acceptsArg())\n+            {\n+                handleOption(option);\n+                currentOption.addValueForProcessing(value);\n+                currentOption = null;\n+            }\n+            else\n+            {\n+                handleUnknownToken(currentToken);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Handles the following tokens:\n+     * \n+     * -S\n+     * -SV\n+     * -S V\n+     * -S=V\n+     * -S1S2\n+     * -S1S2 V\n+     * -SV1=V2\n+     * \n+     * -L\n+     * -LV\n+     * -L V\n+     * -L=V\n+     * -l\n+     * \n+     * @param token the command line token to handle\n+     */\n+    private void handleShortAndLongOption(String token) throws ParseException\n+    {\n+        String t = Util.stripLeadingHyphens(token);\n+        \n+        int pos = t.indexOf('=');\n+        \n+        if (t.length() == 1)\n+        {\n+            // -S\n+            if (options.hasShortOption(t))\n+            {\n+                handleOption(options.getOption(t));\n+            }\n+            else\n+            {\n+                handleUnknownToken(token);\n+            }\n+        }\n+        else if (pos == -1)\n+        {\n+            if (options.hasShortOption(t))\n+            {\n+                handleOption(options.getOption(t));\n+            }\n+            else if (!options.getMatchingOptions(t).isEmpty())\n+            {\n+                // -L or -l\n+                handleLongOptionWithoutEqual(token);\n+            }\n+            else\n+            {\n+                // look for a long prefix (-Xmx512m)\n+                String opt = getLongPrefix(t);\n+                \n+                if (opt != null && options.getOption(opt).acceptsArg())\n+                {\n+                    handleOption(options.getOption(opt));\n+                    currentOption.addValueForProcessing(t.substring(opt.length()));\n+                    currentOption = null;\n+                }\n+                else if (isJavaProperty(t))\n+                {\n+                    // -SV1 (-Dflag)\n+                    handleOption(options.getOption(t.substring(0, 1)));\n+                    currentOption.addValueForProcessing(t.substring(1));\n+                    currentOption = null;\n+                }\n+                else\n+                {\n+                    // -S1S2S3 or -S1S2V\n+                    handleConcatenatedOptions(token);\n+                }\n+            }\n+        }\n+        else\n+        {\n+            String opt = t.substring(0, pos);\n+            String value = t.substring(pos + 1);\n+            \n+            if (opt.length() == 1)\n+            {\n+                // -S=V\n+                Option option = options.getOption(opt);\n+                if (option != null && option.acceptsArg())\n+                {\n+                    handleOption(option);\n+                    currentOption.addValueForProcessing(value);\n+                    currentOption = null;\n+                }\n+                else\n+                {\n+                    handleUnknownToken(token);\n+                }\n+            }\n+            else if (isJavaProperty(opt))\n+            {\n+                // -SV1=V2 (-Dkey=value)\n+                handleOption(options.getOption(opt.substring(0, 1)));\n+                currentOption.addValueForProcessing(opt.substring(1));\n+                currentOption.addValueForProcessing(value);\n+                currentOption = null;\n+            }\n+            else\n+            {\n+                // -L=V or -l=V\n+                handleLongOptionWithEqual(token);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Search for a prefix that is the long name of an option (-Xmx512m)\n+     * \n+     * @param token\n+     */\n+    private String getLongPrefix(String token)\n+    {\n+        String t = Util.stripLeadingHyphens(token);\n+        \n+        int i;\n+        String opt = null;\n+        for (i = t.length() - 2; i > 1; i--)\n+        {\n+            String prefix = t.substring(0, i);\n+            if (options.hasLongOption(prefix))\n+            {\n+                opt = prefix;\n+                break;\n+            }\n+        }\n+        \n+        return opt;\n+    }\n+\n+    /**\n+     * Check if the specified token is a Java-like property (-Dkey=value).\n+     */\n+    private boolean isJavaProperty(String token)\n+    {\n+        String opt = token.substring(0, 1);\n+        Option option = options.getOption(opt);\n+        \n+        return option != null && (option.getArgs() >= 2 || option.getArgs() == Option.UNLIMITED_VALUES);\n+    }\n+\n+    private void handleOption(Option option) throws ParseException\n+    {\n+        // check the previous option before handling the next one\n+        checkRequiredArgs();\n+        \n+        option = (Option) option.clone();\n+        \n+        updateRequiredOptions(option);\n+        \n+        cmd.addOption(option);\n+        \n+        if (option.hasArg())\n+        {\n+            currentOption = option;            \n+        }\n+        else\n+        {\n+            currentOption = null;\n+        }\n+    }\n+\n+    /**\n+     * Removes the option or its group from the list of expected elements.\n+     * \n+     * @param option\n+     */\n+    private void updateRequiredOptions(Option option) throws AlreadySelectedException\n+    {\n+        if (option.isRequired())\n+        {\n+            expectedOpts.remove(option.getKey());\n+        }\n+\n+        // if the option is in an OptionGroup make that option the selected option of the group\n+        if (options.getOptionGroup(option) != null)\n+        {\n+            OptionGroup group = options.getOptionGroup(option);\n+\n+            if (group.isRequired())\n+            {\n+                expectedOpts.remove(group);\n+            }\n+\n+            group.setSelected(option);\n+        }\n+    }\n+\n+    /**\n+     * Breaks <code>token</code> into its constituent parts\n+     * using the following algorithm.\n+     *\n+     * <ul>\n+     *  <li>ignore the first character (\"<b>-</b>\")</li>\n+     *  <li>foreach remaining character check if an {@link Option}\n+     *  exists with that id.</li>\n+     *  <li>if an {@link Option} does exist then add that character\n+     *  prepended with \"<b>-</b>\" to the list of processed tokens.</li>\n+     *  <li>if the {@link Option} can have an argument value and there\n+     *  are remaining characters in the token then add the remaining\n+     *  characters as a token to the list of processed tokens.</li>\n+     *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>\n+     *  <code>stopAtNonOption</code> <b>IS</b> set then add the special token\n+     *  \"<b>--</b>\" followed by the remaining characters and also\n+     *  the remaining tokens directly to the processed tokens list.</li>\n+     *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>\n+     *  <code>stopAtNonOption</code> <b>IS NOT</b> set then add that\n+     *  character prepended with \"<b>-</b>\".</li>\n+     * </ul>\n+     *\n+     * @param token The current token to be <b>burst</b>\n+     * at the first non-Option encountered.\n+     */\n+    protected void handleConcatenatedOptions(String token) throws ParseException\n+    {\n+        for (int i = 1; i < token.length(); i++)\n+        {\n+            String ch = String.valueOf(token.charAt(i));\n+\n+            if (options.hasOption(ch))\n+            {\n+                handleOption(options.getOption(ch));\n+                \n+                if (currentOption != null && (token.length() != (i + 1)))\n+                {\n+                    // add the trail as an argument of the option\n+                    currentOption.addValueForProcessing(token.substring(i + 1));\n+                    break;\n+                }\n+            }\n+            else\n+            {                \n+                handleUnknownToken(stopAtNonOption && i > 1 ? token.substring(i) : token);\n+                break;\n+            }\n+        }\n+    }\n+}\n--- a/src/java/org/apache/commons/cli/Option.java\n+++ b/src/java/org/apache/commons/cli/Option.java\n      */\n     private void add(String value)\n     {\n-        if ((numberOfArgs > 0) && (values.size() > (numberOfArgs - 1)))\n+        if (!acceptsArg())\n         {\n             throw new RuntimeException(\"Cannot add value, list full.\");\n         }\n                 + \"Subclasses should use the addValueForProcessing method instead. \");\n     }\n \n+    /**\n+     * Tells if the option can accept more arguments.\n+     * \n+     * @return false if the maximum number of arguments is reached\n+     * @since 1.3\n+     */\n+    boolean acceptsArg()\n+    {\n+        return (hasArg() || hasArgs() || hasOptionalArg()) && (numberOfArgs <= 0 || values.size() < numberOfArgs);\n+    }\n+\n+    /**\n+     * Tells if the option requires more arguments to be valid.\n+     * \n+     * @return false if the option doesn't require more arguments\n+     * @since 1.3\n+     */\n+    boolean requiresArg()\n+    {\n+        if (optionalArg)\n+        {\n+            return false;\n+        }\n+        if (numberOfArgs == UNLIMITED_VALUES)\n+        {\n+            return values.size() < 1;\n+        }\n+        else\n+        {\n+            return acceptsArg();\n+        }\n+    }\n }\n--- a/src/java/org/apache/commons/cli/Options.java\n+++ b/src/java/org/apache/commons/cli/Options.java\n      * Returns whether the named {@link Option} is a member of this {@link Options}.\n      *\n      * @param opt short or long name of the {@link Option}\n-     * @return true if the named {@link Option} is a member\n-     * of this {@link Options}\n+     * @return true if the named {@link Option} is a member of this {@link Options}\n      */\n     public boolean hasOption(String opt)\n     {\n         opt = Util.stripLeadingHyphens(opt);\n \n         return shortOpts.containsKey(opt) || longOpts.containsKey(opt);\n+    }\n+\n+    /**\n+     * Returns whether the named {@link Option} is a member of this {@link Options}.\n+     *\n+     * @param opt long name of the {@link Option}\n+     * @return true if the named {@link Option} is a member of this {@link Options}\n+     * @since 1.3\n+     */\n+    public boolean hasLongOption(String opt)\n+    {\n+        opt = Util.stripLeadingHyphens(opt);\n+\n+        return longOpts.containsKey(opt);\n+    }\n+\n+    /**\n+     * Returns whether the named {@link Option} is a member of this {@link Options}.\n+     *\n+     * @param opt short name of the {@link Option}\n+     * @return true if the named {@link Option} is a member of this {@link Options}\n+     * @since 1.3\n+     */\n+    public boolean hasShortOption(String opt)\n+    {\n+        opt = Util.stripLeadingHyphens(opt);\n+\n+        return shortOpts.containsKey(opt);\n     }\n \n     /**\n--- a/src/test/org/apache/commons/cli/BasicParserTest.java\n+++ b/src/test/org/apache/commons/cli/BasicParserTest.java\n     {\n         super.setUp();\n         parser = new BasicParser();\n+    }\n+\n+    public void testDoubleDash2() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n+    public void testLongWithoutEqualSingleDash() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+    \n+    public void testAmbiguousLongWithoutEqualSingleDash() throws Exception\n+    {\n+        // not supported by the basicParser\n+    }\n+    \n+    public void testNegativeOption() throws Exception\n+    {\n+        // not supported by the BasicParser (CLI-184)\n     }\n \n     public void testPropertiesOption1() throws Exception\n--- /dev/null\n+++ b/src/test/org/apache/commons/cli/DefaultParserTest.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.cli;\n+\n+/**\n+ * @author Emmanuel Bourg\n+ * @version $Revision$, $Date$\n+ */\n+public class DefaultParserTest extends ParserTestCase {\n+\n+    public void setUp() {\n+        super.setUp();\n+        parser = new DefaultParser();\n+    }\n+}\n--- a/src/test/org/apache/commons/cli/GnuParserTest.java\n+++ b/src/test/org/apache/commons/cli/GnuParserTest.java\n     {\n         super.setUp();\n         parser = new GnuParser();\n+    }\n+\n+    public void testDoubleDash2() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+    \n+    public void testLongWithoutEqualSingleDash() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testAmbiguousLongWithoutEqualSingleDash() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testNegativeOption() throws Exception\n+    {\n+        // not supported by the GnuParser (CLI-184)\n+    }\n+\n+    public void testLongWithUnexpectedArgument1() throws Exception \n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testLongWithUnexpectedArgument2() throws Exception \n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testShortWithUnexpectedArgument() throws Exception \n+    {\n+        // not supported by the GnuParser\n     }\n \n     public void testUnambiguousPartialLongOption1() throws Exception\n--- a/src/test/org/apache/commons/cli/ParserTestCase.java\n+++ b/src/test/org/apache/commons/cli/ParserTestCase.java\n         assertTrue(\"Confirm 2 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 2);\n     }\n \n+    public void testDoubleDash2() throws Exception\n+    {\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.hasArg().create('n'));\n+        options.addOption(OptionBuilder.create('m'));\n+\n+        try\n+        {\n+            parser.parse(options, new String[]{\"-n\", \"--\", \"-m\"});\n+            fail(\"MissingArgumentException not thrown for option -n\");\n+        }\n+        catch (MissingArgumentException e)\n+        {\n+            assertNotNull(\"option null\", e.getOption());\n+            assertEquals(\"n\", e.getOption().getOpt());\n+        }\n+    }\n+    \n     public void testSingleDash() throws Exception\n     {\n         String[] args = new String[] { \"--copt\",\n         assertEquals(\"-1\", cl.getOptionValue(\"b\"));\n     }\n \n+    public void testNegativeOption() throws Exception\n+    {\n+        String[] args = new String[] { \"-b\", \"-1\"} ;\n+        \n+        options.addOption(\"1\", false, null);\n+\n+        CommandLine cl = parser.parse(options, args);\n+        assertEquals(\"-1\", cl.getOptionValue(\"b\"));\n+    }\n+    \n     public void testArgumentStartingWithHyphen() throws Exception\n     {\n         String[] args = new String[]{\"-b\", \"-foo\"};\n         assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n     }\n \n+    public void testLongWithoutEqualSingleDash() throws Exception\n+    {\n+        String[] args = new String[] { \"-foobar\" };\n+\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n+\n+        CommandLine cl = parser.parse(options, args);\n+\n+        assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n+    }\n+    \n+    public void testAmbiguousLongWithoutEqualSingleDash() throws Exception\n+    {\n+        String[] args = new String[] { \"-b\", \"-foobar\" };\n+\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasOptionalArg().create('f'));\n+        options.addOption(OptionBuilder.withLongOpt(\"bar\").hasOptionalArg().create('b'));\n+\n+        CommandLine cl = parser.parse(options, args);\n+\n+        assertTrue(cl.hasOption(\"b\"));\n+        assertTrue(cl.hasOption(\"f\"));\n+        assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n+    }\n+\n+    public void testLongWithoutEqualDoubleDash() throws Exception\n+    {\n+        String[] args = new String[] { \"--foobar\" };\n+\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n+\n+        CommandLine cl = parser.parse(options, args, true);\n+\n+        assertFalse(cl.hasOption(\"foo\")); // foo isn't expected to be recognized with a double dash\n+    }\n+\n+    public void testLongWithUnexpectedArgument1() throws Exception\n+    {\n+        String[] args = new String[] { \"--foo=bar\" };\n+\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"foo\").create('f'));\n+\n+        try\n+        {\n+            parser.parse(options, args);\n+        }\n+        catch (UnrecognizedOptionException e)\n+        {\n+            assertEquals(\"--foo=bar\", e.getOption());\n+            return;\n+        }\n+\n+        fail(\"UnrecognizedOptionException not thrown\");\n+    }\n+\n+    public void testLongWithUnexpectedArgument2() throws Exception\n+    {\n+        String[] args = new String[] { \"-foobar\" };\n+\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"foo\").create('f'));\n+\n+        try\n+        {\n+            parser.parse(options, args);\n+        }\n+        catch (UnrecognizedOptionException e)\n+        {\n+            assertEquals(\"-foobar\", e.getOption());\n+            return;\n+        }\n+\n+        fail(\"UnrecognizedOptionException not thrown\");\n+    }\n+\n+    public void testShortWithUnexpectedArgument() throws Exception\n+    {\n+        String[] args = new String[] { \"-f=bar\" };\n+\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"foo\").create('f'));\n+\n+        try\n+        {\n+            parser.parse(options, args);\n+        }\n+        catch (UnrecognizedOptionException e)\n+        {\n+            assertEquals(\"-f=bar\", e.getOption());\n+            return;\n+        }\n+\n+        fail(\"UnrecognizedOptionException not thrown\");\n+    }\n+    \n     public void testPropertiesOption1() throws Exception\n     {\n         String[] args = new String[] { \"-Jsource=1.5\", \"-J\", \"target\", \"1.5\", \"foo\" };\n         assertTrue(\"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n         assertTrue(\"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\"));\n     }\n+\n+    public void testUnlimitedArgs() throws Exception\n+    {\n+        String[] args = new String[]{\"-e\", \"one\", \"two\", \"-f\", \"alpha\"};\n+\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.hasArgs().create(\"e\"));\n+        options.addOption(OptionBuilder.hasArgs().create(\"f\"));\n+\n+        CommandLine cl = parser.parse(options, args);\n+\n+        assertTrue(\"Confirm -e is set\", cl.hasOption(\"e\"));\n+        assertEquals(\"number of arg for -e\", 2, cl.getOptionValues(\"e\").length);\n+        assertTrue(\"Confirm -f is set\", cl.hasOption(\"f\"));\n+        assertEquals(\"number of arg for -f\", 1, cl.getOptionValues(\"f\").length);\n+    }\n }\n--- a/src/test/org/apache/commons/cli/PosixParserTest.java\n+++ b/src/test/org/apache/commons/cli/PosixParserTest.java\n         parser = new PosixParser();\n     }\n \n+    public void testDoubleDash2() throws Exception\n+    {\n+        // not supported by the PosixParser\n+    }\n+    \n+    public void testLongWithoutEqualSingleDash() throws Exception\n+    {\n+        // not supported by the PosixParser\n+    }\n+\n+    public void testAmbiguousLongWithoutEqualSingleDash() throws Exception\n+    {\n+        // not supported by the PosixParser\n+    }\n+    \n+    public void testNegativeOption() throws Exception\n+    {\n+        // not supported by the PosixParser (CLI-184)\n+    }\n+\n+    public void testLongWithUnexpectedArgument1() throws Exception\n+    {\n+        // not supported by the PosixParser\n+    }\n+\n     public void testLongWithEqualSingleDash() throws Exception\n     {\n         // not supported by the PosixParser", "timestamp": 1243691024, "metainfo": ""}