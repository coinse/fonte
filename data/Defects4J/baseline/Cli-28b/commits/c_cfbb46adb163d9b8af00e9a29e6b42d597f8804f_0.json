{"sha": "cfbb46adb163d9b8af00e9a29e6b42d597f8804f", "log": "Improved the test coverage of TypeHandler and PatternOptionBuilder  ", "commit": "\n--- a/src/java/org/apache/commons/cli/PatternOptionBuilder.java\n+++ b/src/java/org/apache/commons/cli/PatternOptionBuilder.java\n  *\n  * <p>\n  * For example, the following allows command line flags of '-v -p string-value -f /dir/file'.\n+ * The exclamation mark precede a mandatory option.\n  * </p>\n- * <code>Options options = PatternOptionBuilder.parsePattern(\"vp:f/\");</code>\n+ * <code>Options options = PatternOptionBuilder.parsePattern(\"vp:!f/\");</code>\n  *\n  * <p>\n  * TODO These need to break out to OptionType and also \n     public static final Class URL_VALUE = URL.class;\n \n     /**\n-     * <p>Retrieve the class that <code>ch</code> represents.</p>\n+     * Retrieve the class that <code>ch</code> represents.\n      *\n      * @param ch the specified character\n      * @return The class that <code>ch</code> represents\n      */\n     public static Object getValueClass(char ch)\n     {\n-        if (ch == '@')\n+        switch (ch)\n         {\n-            return PatternOptionBuilder.OBJECT_VALUE;\n-        }\n-        else if (ch == ':')\n-        {\n-            return PatternOptionBuilder.STRING_VALUE;\n-        }\n-        else if (ch == '%')\n-        {\n-            return PatternOptionBuilder.NUMBER_VALUE;\n-        }\n-        else if (ch == '+')\n-        {\n-            return PatternOptionBuilder.CLASS_VALUE;\n-        }\n-        else if (ch == '#')\n-        {\n-            return PatternOptionBuilder.DATE_VALUE;\n-        }\n-        else if (ch == '<')\n-        {\n-            return PatternOptionBuilder.EXISTING_FILE_VALUE;\n-        }\n-        else if (ch == '>')\n-        {\n-            return PatternOptionBuilder.FILE_VALUE;\n-        }\n-        else if (ch == '*')\n-        {\n-            return PatternOptionBuilder.FILES_VALUE;\n-        }\n-        else if (ch == '/')\n-        {\n-            return PatternOptionBuilder.URL_VALUE;\n+            case '@':\n+                return PatternOptionBuilder.OBJECT_VALUE;\n+            case ':':\n+                return PatternOptionBuilder.STRING_VALUE;\n+            case '%':\n+                return PatternOptionBuilder.NUMBER_VALUE;\n+            case '+':\n+                return PatternOptionBuilder.CLASS_VALUE;\n+            case '#':\n+                return PatternOptionBuilder.DATE_VALUE;\n+            case '<':\n+                return PatternOptionBuilder.EXISTING_FILE_VALUE;\n+            case '>':\n+                return PatternOptionBuilder.FILE_VALUE;\n+            case '*':\n+                return PatternOptionBuilder.FILES_VALUE;\n+            case '/':\n+                return PatternOptionBuilder.URL_VALUE;\n         }\n \n         return null;\n     }\n \n     /**\n-     * <p>Returns whether <code>ch</code> is a value code, i.e.\n-     * whether it represents a class in a pattern.</p>\n+     * Returns whether <code>ch</code> is a value code, i.e.\n+     * whether it represents a class in a pattern.\n      * \n      * @param ch the specified character\n      * @return true if <code>ch</code> is a value code, otherwise false.\n      */\n     public static boolean isValueCode(char ch)\n     {\n-        if ((ch != '@') && (ch != ':') && (ch != '%') && (ch != '+')\n-            && (ch != '#') && (ch != '<') && (ch != '>') && (ch != '*')\n-            && (ch != '/') && (ch != '!'))\n-        {\n-            return false;\n-        }\n-\n-        return true;\n+        return ch == '@'\n+                || ch == ':'\n+                || ch == '%'\n+                || ch == '+'\n+                || ch == '#'\n+                || ch == '<'\n+                || ch == '>'\n+                || ch == '*'\n+                || ch == '/'\n+                || ch == '!';\n     }\n \n     /**\n-     * <p>Returns the {@link Options} instance represented by \n-     * <code>pattern</code>.</p>\n+     * Returns the {@link Options} instance represented by \n+     * <code>pattern</code>.\n      *\n      * @param pattern the pattern string\n      * @return The {@link Options} instance\n      */\n     public static Options parsePattern(String pattern)\n     {\n-        int sz = pattern.length();\n-\n         char opt = ' ';\n-        char ch = ' ';\n         boolean required = false;\n         Object type = null;\n \n         Options options = new Options();\n \n-        for (int i = 0; i < sz; i++)\n+        for (int i = 0; i < pattern.length(); i++)\n         {\n-            ch = pattern.charAt(i);\n+            char ch = pattern.charAt(i);\n \n             // a value code comes after an option and specifies \n             // details about it\n--- a/src/java/org/apache/commons/cli/TypeHandler.java\n+++ b/src/java/org/apache/commons/cli/TypeHandler.java\n public class TypeHandler {\n \n     /**\n-     * <p>Returns the <code>Object</code> of type <code>obj</code>\n-     * with the value of <code>str</code>.</p>\n+     * Returns the <code>Object</code> of type <code>obj</code>\n+     * with the value of <code>str</code>.\n      *\n      * @param str the command line value\n      * @param obj the type of argument\n     }\n \n     /**\n-     * <p>Returns the <code>Object</code> of type <code>clazz</code>\n-     * with the value of <code>str</code>.</p>\n+     * Returns the <code>Object</code> of type <code>clazz</code>\n+     * with the value of <code>str</code>.\n      *\n      * @param str the command line value\n      * @param clazz the type of argument\n     }\n \n     /**\n-      * <p>Create an Object from the classname and empty constructor.</p>\n+      * Create an Object from the classname and empty constructor.\n       *\n       * @param str the argument value\n       * @return the initialised object, or null if it couldn't create \n         }\n         catch (ClassNotFoundException cnfe)\n         {\n-            System.err.println(\"Unable to find: \" + str);\n+            System.err.println(\"Unable to find the class: \" + str);\n \n             return null;\n         }\n         {\n             instance = cl.newInstance();\n         }\n-        catch (InstantiationException cnfe)\n-        {\n-            System.err.println(\"InstantiationException; Unable to create: \"\n-                               + str);\n-\n-            return null;\n-        }\n-        catch (IllegalAccessException cnfe)\n-        {\n-            System.err.println(\"IllegalAccessException; Unable to create: \"\n-                               + str);\n-\n-            return null;\n+        catch (Exception e)\n+        {\n+            System.err.println(e.getClass().getName() + \"; Unable to create an instance of: \" + str);\n         }\n \n         return instance;\n     }\n \n     /**\n-     * <p>Create a number from a String. If a . is present, it creates a \n-     *    Double, otherwise a Long. </p>\n+     * Create a number from a String. If a . is present, it creates a \n+     * Double, otherwise a Long.\n      *\n      * @param str the value\n      * @return the number represented by <code>str</code>, if <code>str</code>\n     {\n         try\n         {\n-            if( str != null )\n+            if( str.indexOf('.') != -1 )\n             {\n-                if( str.indexOf('.') != -1 )\n-                {\n-                    return Double.valueOf(str);\n-                }\n-                else\n-                {\n-                    return Long.valueOf(str);\n-                }\n+                return Double.valueOf(str);\n             }\n+            else\n+            {\n+                return Long.valueOf(str);\n+            }\n         }\n         catch (NumberFormatException nfe)\n         {\n     }\n \n     /**\n-     * <p>Returns the class whose name is <code>str</code>.</p>\n+     * Returns the class whose name is <code>str</code>.\n      *\n      * @param str the class name\n      * @return The class if it is found, otherwise return null\n     }\n \n     /**\n-     * <p>Returns the date represented by <code>str</code>.</p>\n+     * Returns the date represented by <code>str</code>.\n      *\n      * @param str the date string\n      * @return The date if <code>str</code> is a valid date string,\n     }\n \n     /**\n-     * <p>Returns the URL represented by <code>str</code>.</p>\n+     * Returns the URL represented by <code>str</code>.\n      *\n      * @param str the URL string\n      * @return The URL is <code>str</code> is well-formed, otherwise\n         {\n             return new URL(str);\n         }\n-        catch (MalformedURLException mue)\n-        {\n-            System.err.println(\"Unable to parse: \" + str);\n-\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * <p>Returns the File represented by <code>str</code>.</p>\n+        catch (MalformedURLException e)\n+        {\n+            System.err.println(\"Unable to parse the URL: \" + str);\n+\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Returns the File represented by <code>str</code>.\n      *\n      * @param str the File location\n      * @return The file represented by <code>str</code>.\n     }\n \n     /**\n-     * <p>Returns the File[] represented by <code>str</code>.</p>\n+     * Returns the File[] represented by <code>str</code>.\n      *\n      * @param str the paths to the files\n      * @return The File[] represented by <code>str</code>.\n--- a/src/test/org/apache/commons/cli/PatternOptionBuilderTest.java\n+++ b/src/test/org/apache/commons/cli/PatternOptionBuilderTest.java\n  * Test case for the PatternOptionBuilder class \n  *\n  * @author Henri Yandell\n- **/\n+ * @version $Revision$, $Date$\n+ */\n public class PatternOptionBuilderTest extends TestCase\n {\n-   public void testSimplePattern() throws Exception\n-   {\n-       Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\n-       String[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n+    public void testSimplePattern() throws Exception\n+    {\n+        Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\n+        String[] args = new String[]{\"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\"};\n \n-       CommandLineParser parser = new PosixParser();\n-       CommandLine line = parser.parse(options,args);\n+        CommandLineParser parser = new PosixParser();\n+        CommandLine line = parser.parse(options, args);\n \n-       assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));\n-       assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));\n-       assertEquals(\"object flag b\", new Vector(), line.getOptionObject(\"b\"));\n-       assertTrue(\"boolean true flag c\", line.hasOption(\"c\"));\n-       assertFalse(\"boolean false flag d\", line.hasOption(\"d\"));\n-       assertEquals(\"file flag e\", new File(\"build.xml\"), line.getOptionObject(\"e\"));\n-       assertEquals(\"class flag f\", Calendar.class, line.getOptionObject(\"f\"));\n-       assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));\n-       assertEquals(\"url flag t\", new URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));\n+        assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));\n+        assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));\n+        assertEquals(\"object flag b\", new Vector(), line.getOptionObject(\"b\"));\n+        assertTrue(\"boolean true flag c\", line.hasOption(\"c\"));\n+        assertFalse(\"boolean false flag d\", line.hasOption(\"d\"));\n+        assertEquals(\"file flag e\", new File(\"build.xml\"), line.getOptionObject(\"e\"));\n+        assertEquals(\"class flag f\", Calendar.class, line.getOptionObject(\"f\"));\n+        assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));\n+        assertEquals(\"url flag t\", new URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));\n \n-       // tests the char methods of CommandLine that delegate to the String methods\n-       assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));\n-       assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));\n-       assertEquals(\"object flag b\", new Vector(), line.getOptionObject('b'));\n-       assertTrue(\"boolean true flag c\", line.hasOption('c'));\n-       assertFalse(\"boolean false flag d\", line.hasOption('d'));\n-       assertEquals(\"file flag e\", new File(\"build.xml\"), line.getOptionObject('e'));\n-       assertEquals(\"class flag f\", Calendar.class, line.getOptionObject('f'));\n-       assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));\n-       assertEquals(\"url flag t\", new URL(\"http://jakarta.apache.org/\"), line.getOptionObject('t'));\n+        // tests the char methods of CommandLine that delegate to the String methods\n+        assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));\n+        assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));\n+        assertEquals(\"object flag b\", new Vector(), line.getOptionObject('b'));\n+        assertTrue(\"boolean true flag c\", line.hasOption('c'));\n+        assertFalse(\"boolean false flag d\", line.hasOption('d'));\n+        assertEquals(\"file flag e\", new File(\"build.xml\"), line.getOptionObject('e'));\n+        assertEquals(\"class flag f\", Calendar.class, line.getOptionObject('f'));\n+        assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));\n+        assertEquals(\"url flag t\", new URL(\"http://jakarta.apache.org/\"), line.getOptionObject('t'));\n \n-       /// DATES NOT SUPPORTED YET.\n-       //      assertEquals(\"number flag t\", new Date(1023400137276L), line.getOptionObject('z'));\n-       //     input is:  \"Thu Jun 06 17:48:57 EDT 2002\"\n-   }\n+        /// DATES NOT SUPPORTED YET.\n+        //      assertEquals(\"number flag t\", new Date(1023400137276L), line.getOptionObject('z'));\n+        //     input is:  \"Thu Jun 06 17:48:57 EDT 2002\"\n+    }\n+\n+    public void testEmptyPattern() throws Exception\n+    {\n+        Options options = PatternOptionBuilder.parsePattern(\"\");\n+        assertTrue(options.getOptions().isEmpty());\n+    }\n+\n+    public void testUntypedPattern() throws Exception\n+    {\n+        Options options = PatternOptionBuilder.parsePattern(\"abc\");\n+        CommandLineParser parser = new PosixParser();\n+        CommandLine line = parser.parse(options, new String[] { \"-abc\" });\n+\n+        assertTrue(line.hasOption('a'));\n+        assertNull(\"value a\", line.getOptionObject('a'));\n+        assertTrue(line.hasOption('b'));\n+        assertNull(\"value b\", line.getOptionObject('b'));\n+        assertTrue(line.hasOption('c'));\n+        assertNull(\"value c\", line.getOptionObject('c'));\n+    }\n+\n+    public void testNumberPattern() throws Exception\n+    {\n+        Options options = PatternOptionBuilder.parsePattern(\"n%d%x%\");\n+        CommandLineParser parser = new PosixParser();\n+        CommandLine line = parser.parse(options, new String[] { \"-n\", \"1\", \"-d\", \"2.1\", \"-x\", \"3,5\" });\n+\n+        assertEquals(\"n object class\", Long.class, line.getOptionObject(\"n\").getClass());\n+        assertEquals(\"n value\", new Long(1), line.getOptionObject(\"n\"));\n+\n+        assertEquals(\"d object class\", Double.class, line.getOptionObject(\"d\").getClass());\n+        assertEquals(\"d value\", new Double(2.1), line.getOptionObject(\"d\"));\n+\n+        assertNull(\"x object\", line.getOptionObject(\"x\"));\n+    }\n+\n+    public void testClassPattern() throws Exception\n+    {\n+        Options options = PatternOptionBuilder.parsePattern(\"c+d+\");\n+        CommandLineParser parser = new PosixParser();\n+        CommandLine line = parser.parse(options, new String[] { \"-c\", \"java.util.Calendar\", \"-d\", \"System.DateTime\" });\n+\n+        assertEquals(\"c value\", Calendar.class, line.getOptionObject(\"c\"));\n+        assertNull(\"d value\", line.getOptionObject(\"d\"));\n+    }\n+\n+    public void testObjectPattern() throws Exception\n+    {\n+        Options options = PatternOptionBuilder.parsePattern(\"o@i@n@\");\n+        CommandLineParser parser = new PosixParser();\n+        CommandLine line = parser.parse(options, new String[] { \"-o\", \"java.lang.String\", \"-i\", \"java.util.Calendar\", \"-n\", \"System.DateTime\" });\n+\n+        assertEquals(\"o value\", \"\", line.getOptionObject(\"o\"));\n+        assertNull(\"i value\", line.getOptionObject(\"i\"));\n+        assertNull(\"n value\", line.getOptionObject(\"n\"));\n+    }\n+\n+    public void testURLPattern() throws Exception\n+    {\n+        Options options = PatternOptionBuilder.parsePattern(\"u/v/\");\n+        CommandLineParser parser = new PosixParser();\n+        CommandLine line = parser.parse(options, new String[] { \"-u\", \"http://commons.apache.org\", \"-v\", \"foo://commons.apache.org\" });\n+\n+        assertEquals(\"u value\", new URL(\"http://commons.apache.org\"), line.getOptionObject(\"u\"));\n+        assertNull(\"v value\", line.getOptionObject(\"v\"));\n+    }\n+\n+    public void testExistingFilePattern() throws Exception\n+    {\n+        Options options = PatternOptionBuilder.parsePattern(\"f<\");\n+        CommandLineParser parser = new PosixParser();\n+        CommandLine line = parser.parse(options, new String[] { \"-f\", \"test.properties\" });\n+\n+        assertEquals(\"f value\", new File(\"test.properties\"), line.getOptionObject(\"f\"));\n+\n+        // todo test if an error is returned if the file doesn't exists (when it's implemented)\n+    }\n+\n+    public void testRequiredOption() throws Exception\n+    {\n+        Options options = PatternOptionBuilder.parsePattern(\"!n%m%\");\n+        CommandLineParser parser = new PosixParser();\n+\n+        try\n+        {\n+            parser.parse(options, new String[]{\"\"});\n+            fail(\"MissingOptionException wasn't thrown\");\n+        }\n+        catch (MissingOptionException e)\n+        {\n+            assertEquals(1, e.getMissingOptions().size());\n+            assertTrue(e.getMissingOptions().contains(\"n\"));\n+        }\n+    }\n }", "timestamp": 1217003018, "metainfo": ""}