{"sha": "d89e42ab8c7a35853a48833d7f84294ab66f00ff", "log": "Added a test for the Groovy command line  ", "commit": "\n--- a/src/test/org/apache/commons/cli/ApplicationTest.java\n+++ b/src/test/org/apache/commons/cli/ApplicationTest.java\n         assertTrue( line.hasOption( \"projecthelp\") );\n     }\n \n+    public void testGroovy() throws Exception {\n+        Options options = new Options();\n+\n+        options.addOption(\n+            OptionBuilder.withLongOpt(\"define\").\n+                withDescription(\"define a system property\").\n+                hasArg(true).\n+                withArgName(\"name=value\").\n+                create('D'));\n+        options.addOption(\n+            OptionBuilder.hasArg(false)\n+            .withDescription(\"usage information\")\n+            .withLongOpt(\"help\")\n+            .create('h'));\n+        options.addOption(\n+            OptionBuilder.hasArg(false)\n+            .withDescription(\"debug mode will print out full stack traces\")\n+            .withLongOpt(\"debug\")\n+            .create('d'));\n+        options.addOption(\n+            OptionBuilder.hasArg(false)\n+            .withDescription(\"display the Groovy and JVM versions\")\n+            .withLongOpt(\"version\")\n+            .create('v'));\n+        options.addOption(\n+            OptionBuilder.withArgName(\"charset\")\n+            .hasArg()\n+            .withDescription(\"specify the encoding of the files\")\n+            .withLongOpt(\"encoding\")\n+            .create('c'));\n+        options.addOption(\n+            OptionBuilder.withArgName(\"script\")\n+            .hasArg()\n+            .withDescription(\"specify a command line script\")\n+            .create('e'));\n+        options.addOption(\n+            OptionBuilder.withArgName(\"extension\")\n+            .hasOptionalArg()\n+            .withDescription(\"modify files in place; create backup if extension is given (e.g. \\'.bak\\')\")\n+            .create('i'));\n+        options.addOption(\n+            OptionBuilder.hasArg(false)\n+            .withDescription(\"process files line by line using implicit 'line' variable\")\n+            .create('n'));\n+        options.addOption(\n+            OptionBuilder.hasArg(false)\n+            .withDescription(\"process files line by line and print result (see also -n)\")\n+            .create('p'));\n+        options.addOption(\n+            OptionBuilder.withArgName(\"port\")\n+            .hasOptionalArg()\n+            .withDescription(\"listen on a port and process inbound lines\")\n+            .create('l'));\n+        options.addOption(\n+            OptionBuilder.withArgName(\"splitPattern\")\n+            .hasOptionalArg()\n+            .withDescription(\"split lines using splitPattern (default '\\\\s') using implicit 'split' variable\")\n+            .withLongOpt(\"autosplit\")\n+            .create('a'));\n+\n+        Parser parser = new PosixParser();\n+        CommandLine line = parser.parse(options, new String[] { \"-e\", \"println 'hello'\" });\n+\n+        assertTrue(line.hasOption('e'));\n+        assertEquals(\"println 'hello'\", line.getOptionValue('e'));\n+    }\n+\n }", "timestamp": 1218010768, "metainfo": ""}