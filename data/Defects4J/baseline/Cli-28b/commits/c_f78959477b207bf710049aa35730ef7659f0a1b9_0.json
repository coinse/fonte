{"sha": "f78959477b207bf710049aa35730ef7659f0a1b9", "log": "Applying Brian Egge's improvement from CLI-132  ", "commit": "\n--- a/src/java/org/apache/commons/cli/Parser.java\n+++ b/src/java/org/apache/commons/cli/Parser.java\n         if (requiredOptions.size() > 0)\n         {\n             Iterator iter = requiredOptions.iterator();\n-            StringBuffer buff = new StringBuffer();\n+            StringBuffer buff = new StringBuffer(\"Missing required option\");\n+            buff.append(requiredOptions.size() == 1 ? \"\" : \"s\");\n+            buff.append(\": \");\n+\n \n             // loop through the required options\n             while (iter.hasNext())\n--- a/src/test/org/apache/commons/cli/OptionsTest.java\n+++ b/src/test/org/apache/commons/cli/OptionsTest.java\n         assertTrue(\"Everything in help should be in all\",allOptions.containsAll(helpOptions));        \n     }\n \n+    public void testMissingOptionException() throws ParseException {\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.isRequired().create(\"f\"));\n+        try {\n+            new PosixParser().parse(options, new String[0]);\n+            fail(\"Expected MissingOptionException to be thrown\");\n+        } catch (MissingOptionException e) {\n+            assertEquals(\"Missing required option: f\", e.getMessage());\n+        }\n+    }\n \n+    public void testMissingOptionsException() throws ParseException {\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.isRequired().create(\"f\"));\n+        options.addOption(OptionBuilder.isRequired().create(\"x\"));\n+        try {\n+            new PosixParser().parse(options, new String[0]);\n+            fail(\"Expected MissingOptionException to be thrown\");\n+        } catch (MissingOptionException e) {\n+            assertEquals(\"Missing required options: fx\", e.getMessage());\n+        }\n+    }\n \n }\n ", "timestamp": 1181016068, "metainfo": ""}