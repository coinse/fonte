{"sha": "03bb3ee4422d5c04795a7bb0c2f4ddec9b515d52", "log": "use the buildArray method from base class it has better generic parameter specification and does initialize array elements  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/FieldMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/FieldMatrixImpl.java\n \n package org.apache.commons.math.linear;\n \n-import java.util.Arrays;\n-\n import org.apache.commons.math.Field;\n import org.apache.commons.math.FieldElement;\n import org.apache.commons.math.MathRuntimeException;\n     protected T[][] data;\n \n     /**\n-     * Get the elements type from an array.\n-     * @param d data array\n-     * @return field to which array elements belong\n-     * @exception IllegalArgumentException if array is empty\n-     */\n-    private static Field<? extends FieldElement<?>> extractField(final FieldElement<? extends FieldElement<?>>[][] d)\n-        throws IllegalArgumentException {\n-        if (d.length == 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one row\"); \n-        }\n-        if (d[0].length == 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one column\"); \n-        }\n-        return d[0][0].getField();\n-    }\n-\n-    /**\n-     * Get the elements type from an array.\n-     * @param d data array\n-     * @return field to which array elements belong\n-     * @exception IllegalArgumentException if array is empty\n-     */\n-    private static Field<? extends FieldElement<?>> extractField(final FieldElement<? extends FieldElement<?>>[] d)\n-        throws IllegalArgumentException {\n-        if (d.length == 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one row\"); \n-        }\n-        return d[0].getField();\n-    }\n-\n-    /**\n      * Creates a matrix with no data\n      * @param field field to which the elements belong\n      */\n                            final int rowDimension, final int columnDimension)\n         throws IllegalArgumentException {\n         super(field, rowDimension, columnDimension);\n-        data = buildArray(rowDimension, columnDimension);\n-        final T zero = field.getZero();\n-        for (int i = 0; i < rowDimension; ++i) {\n-            Arrays.fill(data[i], zero);\n-        }\n+        data = buildArray(field, rowDimension, columnDimension);\n     }\n \n     /**\n      * @throws NullPointerException if <code>d</code> is null\n      * @see #FieldMatrixImpl(T[][], boolean)\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public FieldMatrixImpl(final T[][] d)\n         throws IllegalArgumentException, NullPointerException {\n         super((Field<T>) extractField(d));\n      * @throws NullPointerException if <code>d</code> is null\n      * @see #FieldMatrixImpl(T[][])\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public FieldMatrixImpl(final T[][] d, final boolean copyArray)\n         throws IllegalArgumentException, NullPointerException {\n         super((Field<T>) extractField(d));\n      *\n      * @param v column vector holding data for new matrix\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public FieldMatrixImpl(final T[] v) {\n         super((Field<T>) extractField(v));\n         final int nRows = v.length;\n-        data = buildArray(nRows, 1);\n+        data = buildArray(getField(), nRows, 1);\n         for (int row = 0; row < nRows; row++) {\n             data[row][0] = v[row];\n         }\n \n         final int rowCount    = getRowDimension();\n         final int columnCount = getColumnDimension();\n-        final T[][] outData = buildArray(rowCount, columnCount);\n+        final T[][] outData = buildArray(getField(), rowCount, columnCount);\n         for (int row = 0; row < rowCount; row++) {\n             final T[] dataRow    = data[row];\n             final T[] mRow       = m.data[row];\n \n         final int rowCount    = getRowDimension();\n         final int columnCount = getColumnDimension();\n-        final T[][] outData = buildArray(rowCount, columnCount);\n+        final T[][] outData = buildArray(getField(), rowCount, columnCount);\n         for (int row = 0; row < rowCount; row++) {\n             final T[] dataRow    = data[row];\n             final T[] mRow       = m.data[row];\n         final int nRows = this.getRowDimension();\n         final int nCols = m.getColumnDimension();\n         final int nSum = this.getColumnDimension();\n-        final T[][] outData = buildArray(nRows, nCols);\n+        final T[][] outData = buildArray(getField(), nRows, nCols);\n         for (int row = 0; row < nRows; row++) {\n             final T[] dataRow    = data[row];\n             final T[] outDataRow = outData[row];\n             if (nCols == 0) {\n                 throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one column\"); \n             }\n-            data = buildArray(subMatrix.length, nCols);\n+            data = buildArray(getField(), subMatrix.length, nCols);\n             for (int i = 0; i < data.length; ++i) {\n                 if (subMatrix[i].length != nCols) {\n                     throw MathRuntimeException.createIllegalArgumentException(\n                     \"vector length mismatch: got {0} but expected {1}\",\n                     v.length, nCols);\n         }\n-        final T[] out = buildArray(nRows);\n+        final T[] out = buildArray(getField(), nRows);\n         for (int row = 0; row < nRows; row++) {\n             final T[] dataRow = data[row];\n             T sum = getField().getZero();\n                     v.length, nRows);\n         }\n \n-        final T[] out = buildArray(nCols);\n+        final T[] out = buildArray(getField(), nCols);\n         for (int col = 0; col < nCols; ++col) {\n             T sum = getField().getZero();\n             for (int i = 0; i < nRows; ++i) {\n      */\n     private T[][] copyOut() {\n         final int nRows = this.getRowDimension();\n-        final T[][] out = buildArray(nRows, getColumnDimension());\n+        final T[][] out = buildArray(getField(), nRows, getColumnDimension());\n         // can't copy 2-d array in one shot, otherwise get row references\n         for (int i = 0; i < nRows; i++) {\n             System.arraycopy(data[i], 0, out[i], 0, data[i].length);", "timestamp": 1240258732, "metainfo": ""}