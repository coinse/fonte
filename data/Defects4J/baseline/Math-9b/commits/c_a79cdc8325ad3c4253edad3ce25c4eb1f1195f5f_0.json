{"sha": "a79cdc8325ad3c4253edad3ce25c4eb1f1195f5f", "log": "Precondition check.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java\n import java.math.MathContext;\n import java.math.BigDecimal;\n import org.apache.commons.math3.util.Pair;\n+import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n+import org.apache.commons.math3.exception.util.LocalizedFormats;\n \n /**\n  * Factory that creates Gauss-type quadrature rule using Legendre polynomials.\n      */\n     @Override\n     protected Pair<BigDecimal[], BigDecimal[]> computeRule(int numberOfPoints) {\n+        if (numberOfPoints <= 0) {\n+            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_POINTS,\n+                                                   numberOfPoints);\n+        }\n+\n         if (numberOfPoints == 1) {\n             // Break recursion.\n             return new Pair<BigDecimal[], BigDecimal[]>(new BigDecimal[] { BigDecimal.ZERO },\n--- a/src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java\n package org.apache.commons.math3.analysis.integration.gauss;\n \n import org.apache.commons.math3.util.Pair;\n+import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n+import org.apache.commons.math3.exception.util.LocalizedFormats;\n \n /**\n  * Factory that creates Gauss-type quadrature rule using Legendre polynomials.\n      */\n     @Override\n     protected Pair<Double[], Double[]> computeRule(int numberOfPoints) {\n+        if (numberOfPoints <= 0) {\n+            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_POINTS,\n+                                                   numberOfPoints);\n+        }\n+\n         if (numberOfPoints == 1) {\n             // Break recursion.\n             return new Pair<Double[], Double[]>(new Double[] { 0d },", "timestamp": 1345150839, "metainfo": ""}