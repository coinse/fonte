{"sha": "3a610d3651fd86fca04ffb426da0984cb4ec6ab1", "log": "MATH-816 Mixture model distribution.  Original code contributed by Jared Becksfort, committed with changes as discussed on the JIRA page.   ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.distribution;\n+\n+import java.util.List;\n+import java.util.ArrayList;\n+import org.apache.commons.math3.exception.DimensionMismatchException;\n+import org.apache.commons.math3.exception.NotPositiveException;\n+import org.apache.commons.math3.exception.MathArithmeticException;\n+import org.apache.commons.math3.exception.util.LocalizedFormats;\n+import org.apache.commons.math3.random.RandomGenerator;\n+import org.apache.commons.math3.random.Well19937c;\n+import org.apache.commons.math3.util.Pair;\n+\n+/**\n+ * Class for representing <a href=\"http://en.wikipedia.org/wiki/Mixture_model\">\n+ * mixture model</a> distributions.\n+ *\n+ * @param <T> Type of the mixture components.\n+ *\n+ * @version $Id$\n+ * @since 3.1\n+ */\n+public class MixtureMultivariateRealDistribution<T extends MultivariateRealDistribution>\n+    extends AbstractMultivariateRealDistribution {\n+    /** Normalized weight of each mixture component. */\n+    private final double[] weight;\n+    /** Mixture components. */\n+    private final List<T> distribution;\n+\n+    /**\n+     * Creates a mixture model from a list of distributions and their\n+     * associated weights.\n+     *\n+     * @param components List of (weight, distribution) pairs from which to sample.\n+     */\n+    public MixtureMultivariateRealDistribution(List<Pair<Double, T>> components) {\n+        this(new Well19937c(), components);\n+    }\n+\n+    /**\n+     * Creates a mixture model from a list of distributions and their\n+     * associated weights.\n+     *\n+     * @param rng Random number generator.\n+     * @param components Distributions from which to sample.\n+     * @throws NotPositiveException if any of the weights is negative.\n+     * @throws DimensionMismatchException if not all components have the same\n+     * number of variables.\n+     */\n+    public MixtureMultivariateRealDistribution(RandomGenerator rng,\n+                                               List<Pair<Double, T>> components) {\n+        super(rng, components.get(0).getSecond().getDimension());\n+\n+        final int numComp = components.size();\n+        final int dim = getDimension();\n+        double weightSum = 0;\n+        for (int i = 0; i < numComp; i++) {\n+            final Pair<Double, T> comp = components.get(i);\n+            if (comp.getSecond().getDimension() != dim) {\n+                throw new DimensionMismatchException(comp.getSecond().getDimension(), dim);\n+            }\n+            if (comp.getFirst() < 0) {\n+                throw new NotPositiveException(comp.getFirst());\n+            }\n+            weightSum += comp.getFirst();\n+        }\n+\n+        // Check for overflow.\n+        if (Double.isInfinite(weightSum)) {\n+            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);\n+        }\n+\n+        // Store each distribution and its normalized weight.\n+        distribution = new ArrayList<T>();\n+        weight = new double[numComp];\n+        for (int i = 0; i < numComp; i++) {\n+            final Pair<Double, T> comp = components.get(i);\n+            weight[i] = comp.getFirst() / weightSum;\n+            distribution.add(comp.getSecond());\n+        }\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double density(final double[] values) {\n+        double p = 0;\n+        for (int i = 0; i < weight.length; i++) {\n+            p += weight[i] * distribution.get(i).density(values);\n+        }\n+        return p;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double[] sample() {\n+        // Sampled values.\n+        double[] vals = null;\n+\n+        // Determine which component to sample from.\n+        final double randomValue = random.nextDouble();\n+        double sum = 0;\n+\n+        for (int i = 0; i < weight.length; i++) {\n+            sum += weight[i];\n+            if (randomValue <= sum) {\n+                // pick model i\n+                vals = distribution.get(i).sample();\n+                break;\n+            }\n+        }\n+\n+        if (vals == null) {\n+            // This should never happen, but it ensures we won't return a null in\n+            // case the loop above has some floating point inequality problem on\n+            // the final iteration.\n+            vals = distribution.get(weight.length - 1).sample();\n+        }\n+\n+        return vals;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public void reseedRandomGenerator(long seed) {\n+        // Seed needs to be propagated to underlying components\n+        // in order to maintain consistency between runs.\n+        super.reseedRandomGenerator(seed);\n+\n+        for (int i = 0; i < distribution.size(); i++) {\n+            // Make each component's seed different in order to avoid\n+            // using the same sequence of random numbers. XXX\n+            // components.get(i).reseedRandomGenerator(i + 1 + seed);\n+            distribution.get(i).reseedRandomGenerator(seed); // XXX original code.\n+        }\n+    }\n+\n+    /**\n+     * Gets the distributions that make up the mixture model.\n+     *\n+     * @return the component distributions and associated weights.\n+     */\n+    public List<Pair<Double, T>> getComponents() {\n+        final List<Pair<Double, T>> list = new ArrayList<Pair<Double, T>>();\n+\n+        for (int i = 0; i < weight.length; i++) {\n+            list.add(new Pair<Double, T>(weight[i], distribution.get(i)));\n+        }\n+\n+        return list;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.distribution;\n+\n+import java.util.List;\n+import java.util.ArrayList;\n+import org.apache.commons.math3.exception.NotPositiveException;\n+import org.apache.commons.math3.exception.MathArithmeticException;\n+import org.apache.commons.math3.util.Pair;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test that demonstrates the use of {@link MixtureMultivariateRealDistribution}\n+ * in order to create a mixture model composed of {@link MultivariateNormalDistribution\n+ * normal distributions}.\n+ */\n+public class MultivariateNormalMixtureModelDistributionTest {\n+\n+    @Test\n+    public void testNonUnitWeightSum() {\n+        final double[] weights = { 1, 2 };\n+        final double[][] means = { { -1.5, 2.0 },\n+                                   { 4.0, 8.2 } };\n+        final double[][][] covariances = { { { 2.0, -1.1 },\n+                                             { -1.1, 2.0 } },\n+                                           { { 3.5, 1.5 },\n+                                             { 1.5, 3.5 } } };\n+        final MultivariateNormalMixtureModelDistribution d\n+            = create(weights, means, covariances);\n+\n+        final List<Pair<Double, MultivariateNormalDistribution>> comp = d.getComponents();\n+\n+        Assert.assertEquals(1d / 3, comp.get(0).getFirst(), Math.ulp(1d));\n+        Assert.assertEquals(2d / 3, comp.get(1).getFirst(), Math.ulp(1d));\n+    }\n+\n+    @Test(expected=MathArithmeticException.class)\n+    public void testWeightSumOverFlow() {\n+        final double[] weights = { 0.5 * Double.MAX_VALUE, 0.51 * Double.MAX_VALUE };\n+        final double[][] means = { { -1.5, 2.0 },\n+                                   { 4.0, 8.2 } };\n+        final double[][][] covariances = { { { 2.0, -1.1 },\n+                                             { -1.1, 2.0 } },\n+                                           { { 3.5, 1.5 },\n+                                             { 1.5, 3.5 } } };\n+        final MultivariateNormalMixtureModelDistribution d\n+            = create(weights, means, covariances);\n+    }\n+\n+    @Test(expected=NotPositiveException.class)\n+    public void testPreconditionPositiveWeights() {\n+        final double[] negativeWeights = { -0.5, 1.5 };\n+        final double[][] means = { { -1.5, 2.0 },\n+                                   { 4.0, 8.2 } };\n+        final double[][][] covariances = { { { 2.0, -1.1 },\n+                                             { -1.1, 2.0 } },\n+                                           { { 3.5, 1.5 },\n+                                             { 1.5, 3.5 } } };\n+        final MultivariateNormalMixtureModelDistribution d\n+            = create(negativeWeights, means, covariances);\n+    }\n+\n+    /**\n+     * Test the accuracy of the density calculation.\n+     */\n+    @Test\n+    public void testDensities() {\n+        final double[] weights = { 0.3, 0.7 };\n+        final double[][] means = { { -1.5, 2.0 },\n+                                   { 4.0, 8.2 } };\n+        final double[][][] covariances = { { { 2.0, -1.1 },\n+                                             { -1.1, 2.0 } },\n+                                           { { 3.5, 1.5 },\n+                                             { 1.5, 3.5 } } };\n+        final MultivariateNormalMixtureModelDistribution d\n+            = create(weights, means, covariances);\n+\n+        // Test vectors\n+        final double[][] testValues = { { -1.5, 2 },\n+                                        { 4, 8.2 },\n+                                        { 1.5, -2 },\n+                                        { 0, 0 } };\n+\n+        // Densities that we should get back.\n+        // Calculated by assigning weights to multivariate normal distribution\n+        // and summing\n+        // values from dmvnorm function in R 2.15 CRAN package Mixtools v0.4.\n+        // Like: .3*dmvnorm(val,mu1,sigma1)+.7*dmvnorm(val,mu2,sigma2)\n+        final double[] correctDensities = { 0.02862037278930575,\n+                                            0.03523044847314091,\n+                                            0.000416241365629767,\n+                                            0.009932042831700297 };\n+\n+        for (int i = 0; i < testValues.length; i++) {\n+            Assert.assertEquals(correctDensities[i], d.density(testValues[i]), Math.ulp(1d));\n+        }\n+    }\n+\n+    /**\n+     * Test the accuracy of sampling from the distribution.\n+     */\n+    @Test\n+    public void testSampling() {\n+        final double[] weights = { 0.3, 0.7 };\n+        final double[][] means = { { -1.5, 2.0 },\n+                                   { 4.0, 8.2 } };\n+        final double[][][] covariances = { { { 2.0, -1.1 },\n+                                             { -1.1, 2.0 } },\n+                                           { { 3.5, 1.5 },\n+                                             { 1.5, 3.5 } } };\n+        final MultivariateNormalMixtureModelDistribution d\n+            = create(weights, means, covariances);\n+        d.reseedRandomGenerator(50);\n+\n+        final double[][] correctSamples = getCorrectSamples();\n+        final int n = correctSamples.length;\n+        final double[][] samples = d.sample(n);\n+\n+        for (int i = 0; i < n; i++) {\n+            for (int j = 0; j < samples[i].length; j++) {\n+                Assert.assertEquals(correctSamples[i][j], samples[i][j], 1e-16);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Creates a mixture of Gaussian distributions.\n+     *\n+     * @param weights Weights.\n+     * @param means Means.\n+     * @param covariances Covariances.\n+     * @return the mixture distribution.\n+     */\n+    private MultivariateNormalMixtureModelDistribution create(double[] weights,\n+                                                              double[][] means,\n+                                                              double[][][] covariances) {\n+        final List<Pair<Double, MultivariateNormalDistribution>> mvns\n+            = new ArrayList<Pair<Double, MultivariateNormalDistribution>>();\n+\n+        for (int i = 0; i < weights.length; i++) {\n+            final MultivariateNormalDistribution dist\n+                = new MultivariateNormalDistribution(means[i], covariances[i]);\n+            mvns.add(new Pair<Double, MultivariateNormalDistribution>(weights[i], dist));\n+        }\n+\n+        return new MultivariateNormalMixtureModelDistribution(mvns);\n+    }\n+\n+    /**\n+     * Values used in {@link #testSampling()}.\n+     */\n+    private double[][] getCorrectSamples() {\n+        // These were sampled from the MultivariateNormalMixtureModel class\n+        // with seed 50. They were then fit to a MVN mixture model in R\n+        // using mixtools. The fitted parameters were:\n+        //\n+        // - component weights: {0.3730363, 0.6269637}\n+        // - mean vectors: {-1.760221, 2.080246}, {4.042673 8.239901}\n+        // - covariance matrices:\n+        // {2.343314 -1.161423\n+        // -1.161423 2.168186},\n+        // {4.538306 1.999180\n+        // 1.999180 3.707478}\n+        //\n+        // These parameters are quite close to the given test parameters,\n+        // considering that the sample size is only 100. This indicates that\n+        // we are sampling from the given distributions correctly.\n+        //\n+        // MVN mixture model fitting is tested more directly in\n+        // MultivariateNormalMixtureModelEMTest.java.\n+        return new double[][] {\n+            { 0.2583074099703975, 8.664499710373795 },\n+            { -4.813531184031044, 3.9231359989545105 },\n+            { -0.7419261132564453, 2.4007823469659315 },\n+            { 5.509216904195162, 9.422233433392439 },\n+            { -2.381049190850173, 4.943660886154495 },\n+            { -0.8993376528270461, 0.8938743025320182 },\n+            { 4.894770663858121, 12.166851725156436 },\n+            { 4.0897683028395075, 6.918843155044206 },\n+            { 4.719618558675267, 8.341707066796028 },\n+            { 5.0119792918378385, 8.718202270235704 },\n+            { -0.9575382403048307, 1.8229677546531289 },\n+            { 6.096419130934251, 10.015298483992137 },\n+            { -0.8680257551663279, 2.017226810559624 },\n+            { 1.5561509591914775, 6.428382522063888 },\n+            { 2.9573609580937585, 4.984112447026558 },\n+            { 2.9607883517629716, 5.040859511876173 },\n+            { 6.693223483958679, 8.293058555022974 },\n+            { -0.49520319305205684, 2.654804424012847 },\n+            { 2.5982446884625903, 4.403704372523807 },\n+            { -2.8126962615987825, 1.524225284837275 },\n+            { 4.617557399108285, 10.112045833514983 },\n+            { -1.0505336217175474, -0.25620619814406176 },\n+            { 6.468546093824413, 8.492764345471349 },\n+            { -1.070959919055369, -0.21025004020250515 },\n+            { 0.7096492923917137, 0.972470062045611 },\n+            { 5.398941052924385, 9.02323432480054 },\n+            { 4.0619884910872885, 3.9387544688324274 },\n+            { 3.060654105075946, 8.375879742835302 },\n+            { -1.1120837945401831, -0.5932624462175884 },\n+            { 1.7076086958821626, 10.076176310641726 },\n+            { 0.8025522475696087, 7.376934311816509 },\n+            { -1.7692026721062535, 3.342422431805849 },\n+            { 6.347756985325947, 9.473453725270733 },\n+            { 5.881105197046502, 7.489181251843213 },\n+            { 1.2360421752575719, 6.795186398153966 },\n+            { 0.4401756166827726, 1.2313491852695706 },\n+            { 2.3000936045037568, 8.287718300406317 },\n+            { -0.670230868276056, 2.1130200354211004 },\n+            { 0.3003945370882637, -1.5819884144799348 },\n+            { 7.277242408774614, 10.927490482503183 },\n+            { 7.923140481277026, 12.004508589648411 },\n+            { 5.522112916642092, 9.78447909183086 },\n+            { 1.7119808481577339, 6.085145192818114 },\n+            { 2.105629604263621, 10.1449475519281 },\n+            { 4.972245882289706, 9.190876138075419 },\n+            { 3.55810426807224, 7.654818193514658 },\n+            { -2.356177988964854, 2.532266732955841 },\n+            { -4.1832049468547385, 4.506619880263655 },\n+            { -3.830920610669877, 2.6251612200440366 },\n+            { -0.06307681885555017, 2.099426408596512 },\n+            { 0.36171488935238116, 0.6347956010120039 },\n+            { 4.151714086462804, 8.647657431234045 },\n+            { 0.7057392641959304, 6.692562958393579 },\n+            { -0.6550353398872, 7.692019868324891 },\n+            { 4.320276127581665, 7.202292152597195 },\n+            { -3.2303904191995527, 1.961730492225101 },\n+            { -2.954784139519494, 2.7707906587677087 },\n+            { 4.467020781304962, 11.98783401317258 },\n+            { 2.516614661485048, 5.7484664274488395 },\n+            { 0.5769047448998346, 5.631710672821962 },\n+            { 0.1160140182849414, 2.9315783896969196 },\n+            { 2.5049583778078652, 8.761243869910377 },\n+            { 5.709406025351957, 8.257826327804949 },\n+            { 0.21312967519917736, 3.5654341612096037 },\n+            { 3.6569574551599913, 5.771827106887553 },\n+            { -0.8798149482991884, 2.6978303136418855 },\n+            { 2.414118561546714, 4.53422981267982 },\n+            { 1.4898922645162216, 7.761630474438329 },\n+            { -2.541784545189355, 1.1738033253079712 },\n+            { -3.879227113624057, 4.4006851836938345 },\n+            { 6.661993934276366, 7.141516646050444 },\n+            { 3.181178356801352, 8.231063903955624 },\n+            { 1.8841679086668033, 7.8838333882950895 },\n+            { -1.0951561728318044, 2.4280383085698944 },\n+            { 5.35219559310147, 10.747404919992816 },\n+            { 6.960010647189781, 6.95945895094293 },\n+            { 8.66048279380016, 10.240215090544776 },\n+            { 5.322414316267673, 11.183073632332036 },\n+            { 4.286246289231014, 9.881220496364916 },\n+            { 3.1594608386471306, 7.472785192202438 },\n+            { 7.490325449520623, 9.327482647357861 },\n+            { -1.6450957033850353, 1.7263141708037384 },\n+            { 7.640267915158525, 9.040106401524124 },\n+            { 3.225359471647853, 7.698098961183428 },\n+            { 5.511639004578083, 9.186863380867411 },\n+            { -1.5570773470706916, 2.3113691458388006 },\n+            { 3.6254977322201625, 8.605119642693507 },\n+            { 6.825831664908241, 8.090893354857114 },\n+            { 4.614281342893763, 9.430714925646987 },\n+            { 3.244449074987682, 7.4974070774986705 },\n+            { -3.630882697488002, 2.0936948617188036 },\n+            { 4.668632614740622, 9.56561505235852 },\n+            { 3.291602850422323, 7.676202933382092 },\n+            { -5.17676202387167, 3.486280073084009 },\n+            { -0.8232665608471817, 1.035856623121346 },\n+            { -2.664598562579467, 4.969780569462966 },\n+            { -1.7320549381441652, 0.5626102308837451 },\n+            { -3.3030769989674384, 1.2611477988721695 },\n+            { -2.978115812942412, 3.0819389792053005 },\n+            { 4.061270197659891, 10.977521917377931 }\n+        };\n+    }\n+}\n+\n+/**\n+ * Class that implements a mixture of Gaussian ditributions.\n+ */\n+class MultivariateNormalMixtureModelDistribution\n+    extends MixtureMultivariateRealDistribution<MultivariateNormalDistribution> {\n+\n+    public MultivariateNormalMixtureModelDistribution(List<Pair<Double, MultivariateNormalDistribution>> components) {\n+        super(components);\n+    }\n+}", "timestamp": 1350644453, "metainfo": ""}