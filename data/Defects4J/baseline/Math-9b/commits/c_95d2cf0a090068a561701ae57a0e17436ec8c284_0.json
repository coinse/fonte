{"sha": "95d2cf0a090068a561701ae57a0e17436ec8c284", "log": "improved error messages  ", "commit": "\n--- a/src/java/org/apache/commons/math/MessagesResources_fr.java\n+++ b/src/java/org/apache/commons/math/MessagesResources_fr.java\n     { \"Maximal number of iterations ({0}) exceeded\",\n       \"Nombre maximal d''it\\u00e9rations ({0}) d\\u00e9pass\\u00e9\" },\n \n+    // org.apache.commons.math.analysis.interpolation.SplineInterpolator\n+    // org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm\n     // org.apache.commons.math.DimensionMismatchException\n     // org.apache.commons.math.optimization.LeastSquaresConverter\n     // org.apache.commons.math.optimization.direct.DirectSearchOptimizer\n       \"le format complet ne doit pas \\u00eatre nul\" },\n \n     // org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils\n-    { \"Number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4},\" +\n-          \" final a value={5}, final b value={6}, f(a)={7}, f(b)={8}\",\n-      \"Nombre d''it\\u00e9rations = {0}, it\\u00e9rations maximum = {1}, valeur initiale = {2},\" +\n-          \" borne inf\\u00e9rieure = {3}, borne sup\\u00e9rieure = {4},\" +\n-          \" valeur a finale = {5}, valeur b finale = {6}, f(a) = {7}, f(b) = {8}\" },\n+    { \"function is null\",\n+      \"la fonction est nulle\" },\n+    { \"bad value for maximum iterations number: {0}\",\n+      \"valeur invalide pour le nombre maximal d''it\\u00e9rations : {0}\" },\n+    { \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n+      \"param\\u00e8tres d''encadrement invalides : borne inf\\u00e9rieure = {0}, valeur initiale = {1}, borne sup\\u00e9rieure = {2}\" },\n+    { \"number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4},\" +\n+        \" final a value={5}, final b value={6}, f(a)={7}, f(b)={8}\",\n+      \"nombre d''it\\u00e9rations = {0}, it\\u00e9rations maximum = {1}, valeur initiale = {2},\" +\n+        \" borne inf\\u00e9rieure = {3}, borne sup\\u00e9rieure = {4},\" +\n+        \" valeur a finale = {5}, valeur b finale = {6}, f(a) = {7}, f(b) = {8}\" },\n+\n+    // org.apache.commons.math.analysis.solvers.LaguerreSolver\n+    { \"polynomial degree must be positive: degree={0}\",\n+      \"le polyn\\u00f4me doit \\u00eatre de degr\\u00e9 positif : degr\\u00e9 = {0}\" },\n+\n+    // org.apache.commons.math.analysis.solvers.SecantSolver\n+    { \"function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]\",\n+      \"les valeurs de la fonctions aux bornes sont de m\\u00eame signe, bornes : [{0}, {1}], valeurs : [{2}, {3}]\" },\n+\n+    // org.apache.commons.math.analysis.interpolation.SplineInterpolator\n+    // org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm\n+    { \"{0} points are required, got only {1}\",\n+      \"{0} sont n\\u00e9cessaires, seuls {1} ont \\u00e9t\\u00e9 fournis\" },\n+\n+    // org.apache.commons.math.analysis.interpolation.SplineInterpolator\n+    { \"points {0} and {1} are not strictly increasing ({2} >= {3})\",\n+      \"les points {0} et {1} ne sont pas strictements croissants ({2} >= {3})\" },\n \n     // org.apache.commons.math.util.ContinuedFraction\n     { \"Continued fraction convergents diverged to +/- infinity for value {0}\",\n    { \"index ({0}) is not positive\",\n      \"l''indice ({0}) n''est pas positif\" },\n \n+   // org.apache.commons.math.analysis.polynomials.PolynomialFunction\n+   // org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm\n+   { \"empty polynomials coefficients array\",\n+     \"tableau de coefficients polyn\\u00f4miaux vide\" },\n+\n+   // org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm\n+   { \"array sizes should have difference 1 ({0} != {1} + 1)\",\n+     \"les tableaux devraient avoir une diff\\u00e9rence de taille de 1 ({0} != {1} + 1)\" },\n+\n    // org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm\n    { \"identical abscissas x[{0}] == x[{1}] == {2} cause division by zero\",\n      \"division par z\\u00e9ro caus\\u00e9e par les abscisses identiques x[{0}] == x[{1}] == {2}\" },\n+\n+   // org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction\n+   { \"spline partition must have at least {0} points, got {1}\",\n+     \"une partiction spline n\\u00e9cessite au moins {0} points, seuls {1} ont \\u00e9t\\u00e9 fournis\" },\n+   { \"knot values must be strictly increasing\",\n+     \"les n\\u0153uds d''interpolation doivent \\u00eatre strictement croissants\" },\n+   { \"number of polynomial interpolants must match the number of segments ({0} != {1} - 1)\",\n+     \"le nombre d''interpolants polyn\\u00f4miaux doit correspondre au nombre de segments ({0} != {1} - 1)\" },\n \n    // org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl\n    { \"function to solve cannot be null\",\n--- a/src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java\n+++ b/src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java\n         throws IllegalArgumentException {\n         super(defaultMaximalIterationCount, 1.0e-15);\n         if (f == null) {\n-            throw new IllegalArgumentException(\"Function can not be null.\");\n+            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n         }\n \n         this.f = f;\n--- a/src/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java\n+++ b/src/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java\n  */\n package org.apache.commons.math.analysis.interpolation;\n \n+import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.analysis.polynomials.PolynomialFunction;\n import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;\n      */\n     public UnivariateRealFunction interpolate(double x[], double y[]) {\n         if (x.length != y.length) {\n-            throw new IllegalArgumentException(\"Dataset arrays must have same length.\");\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"dimension mismatch {0} != {1}\", x.length, y.length);\n         }\n         \n         if (x.length < 3) {\n-            throw new IllegalArgumentException\n-                (\"At least 3 datapoints are required to compute a spline interpolant\");\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"{0} points are required, got only {1}\", 3, x.length);\n         }\n         \n         // Number of intervals.  The number of data points is n + 1.\n         \n         for (int i = 0; i < n; i++) {\n             if (x[i]  >= x[i + 1]) {\n-                throw new IllegalArgumentException(\"Dataset x values must be strictly increasing.\");\n+                throw MathRuntimeException.createIllegalArgumentException(\n+                      \"points {0} and {1} are not strictly increasing ({2} >= {3})\",\n+                      i, i+1, x[i], x[i+1]);\n             }\n         }\n         \n--- a/src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n \n     public PolynomialFunction(double c[]) {\n         super();\n         if (c.length < 1) {\n-            throw new IllegalArgumentException(\"Polynomial coefficient array must have postive length.\");\n+            throw MathRuntimeException.createIllegalArgumentException(\"empty polynomials coefficients array\");\n         }\n         int l = c.length;\n         while ((l > 1) && (c[l - 1] == 0)) {\n     protected static double evaluate(double[] coefficients, double argument) {\n         int n = coefficients.length;\n         if (n < 1) {\n-            throw new IllegalArgumentException(\"Coefficient array must have positive length for evaluation\");\n+            throw MathRuntimeException.createIllegalArgumentException(\"empty polynomials coefficients array\");\n         }\n         double result = coefficients[n - 1];\n         for (int j = n -2; j >=0; j--) {\n     protected static double[] differentiate(double[] coefficients) {\n         int n = coefficients.length;\n         if (n < 1) {\n-            throw new IllegalArgumentException(\"Coefficient array must have positive length for differentiation\");\n+            throw MathRuntimeException.createIllegalArgumentException(\"empty polynomials coefficients array\");\n         }\n         if (n == 1) {\n             return new double[]{0};\n--- a/src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java\n+++ b/src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java\n     public static void verifyInterpolationArray(double x[], double y[]) throws\n         IllegalArgumentException {\n \n-        if (x.length < 2 || y.length < 2) {\n-            throw new IllegalArgumentException\n-                (\"Interpolation requires at least two points.\");\n+        if (Math.min(x.length, y.length) < 2) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"{0} points are required, got only {1}\",\n+                  2, Math.min(x.length, y.length));\n         }\n         if (x.length != y.length) {\n-            throw new IllegalArgumentException\n-                (\"Abscissa and value arrays must have the same length.\");\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"dimension mismatch {0} != {1}\", x.length, y.length);\n         }\n     }\n }\n--- a/src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java\n+++ b/src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java\n \n import java.io.Serializable;\n import org.apache.commons.math.FunctionEvaluationException;\n+import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolator;\n \n         IllegalArgumentException {\n \n         if (a.length < 1 || c.length < 1) {\n-            throw new IllegalArgumentException\n-                (\"Input arrays must not be empty.\");\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"empty polynomials coefficients array\");\n         }\n         if (a.length != c.length + 1) {\n-            throw new IllegalArgumentException\n-                (\"Bad input array sizes, should have difference 1.\");\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"array sizes should have difference 1 ({0} != {1} + 1)\",\n+                  a.length, c.length);\n         }\n     }\n }\n--- a/src/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java\n import java.util.Arrays;\n \n import org.apache.commons.math.ArgumentOutsideDomainException;\n+import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n \n      */\n     public PolynomialSplineFunction(double knots[], PolynomialFunction polynomials[]) {\n         if (knots.length < 2) {\n-            throw new IllegalArgumentException\n-                (\"Not enough knot values -- spline partition must have at least 2 points.\");\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"spline partition must have at least {0} points, got {1}\",\n+                  2, knots.length);\n         }\n         if (knots.length - 1 != polynomials.length) {\n-            throw new IllegalArgumentException \n-            (\"Number of polynomial interpolants must match the number of segments.\");\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"number of polynomial interpolants must match the number of segments ({0} != {1} - 1)\",\n+                  polynomials.length, knots.length);\n         }\n         if (!isStrictlyIncreasing(knots)) {\n-            throw new IllegalArgumentException \n-                (\"Knot values must be strictly increasing.\");\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"knot values must be strictly increasing\");\n         }\n         \n         this.n = knots.length -1;\n--- a/src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java\n         int n = coefficients.length - 1;\n         int iterationCount = 0;\n         if (n < 1) {\n-            throw new IllegalArgumentException\n-                (\"Polynomial degree must be positive: degree=\" + n);\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"polynomial degree must be positive: degree={0}\", n);\n         }\n         Complex c[] = new Complex[n+1];    // coefficients for deflated polynomial\n         for (int i = 0; i <= n; i++) {\n \n         int n = coefficients.length - 1;\n         if (n < 1) {\n-            throw new IllegalArgumentException\n-                (\"Polynomial degree must be positive: degree=\" + n);\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"polynomial degree must be positive: degree={0}\", n);\n         }\n         Complex N = new Complex(n, 0.0);\n         Complex N1 = new Complex((n-1), 0.0);\n--- a/src/java/org/apache/commons/math/analysis/solvers/SecantSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/SecantSolver.java\n \n import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.FunctionEvaluationException;\n+import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.MaxIterationsExceededException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n \n         \n         // Verify bracketing\n         if (y0 * y1 >= 0) {\n-            throw new IllegalArgumentException\n-            (\"Function values at endpoints do not have different signs.\" +\n-                    \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n-                    \"  Values: [\" + y0 + \",\" + y1 + \"]\");       \n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"function values at endpoints do not have different signs, \" +\n+                  \"endpoints: [{0}, {1}], values: [{2}, {3}]\",\n+                  min, max, y0, y1);       \n         }\n         \n         double x2 = x0;\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n \n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.ConvergenceException;\n+import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n \n /**\n             FunctionEvaluationException {\n         \n         if (function == null) {\n-            throw new IllegalArgumentException (\"function is null.\");\n+            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n         }\n         if (maximumIterations <= 0)  {\n-            throw new IllegalArgumentException\n-            (\"bad value for maximumIterations: \" + maximumIterations);\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n         }\n         if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw new IllegalArgumentException\n-            (\"Invalid endpoint parameters:  lowerBound=\" + lowerBound + \n-              \" initial=\" + initial + \" upperBound=\" + upperBound);\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n+                  lowerBound, initial, upperBound);\n         }\n         double a = initial;\n         double b = initial;\n                 ((a > lowerBound) || (b < upperBound)));\n    \n         if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException\n-            (\"Number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}\",\n-             numIterations, maximumIterations, initial, lowerBound, upperBound, a, b, fa, fb);\n+            throw new ConvergenceException(\n+                      \"number of iterations={0}, maximum iterations={1}, \" +\n+                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n+                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n+                      numIterations, maximumIterations, initial,\n+                      lowerBound, upperBound, a, b, fa, fb);\n         }\n         \n         return new double[]{a, b};\n      */\n     private static void setup(UnivariateRealFunction f) {\n         if (f == null) {\n-            throw new IllegalArgumentException(\"function can not be null.\");    \n+            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n         }\n     }\n ", "timestamp": 1241375071, "metainfo": ""}