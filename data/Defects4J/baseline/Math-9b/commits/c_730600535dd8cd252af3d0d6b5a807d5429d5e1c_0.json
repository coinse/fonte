{"sha": "730600535dd8cd252af3d0d6b5a807d5429d5e1c", "log": "Improved robustness of k-means++ algorithm, by tracking changes in points assignments to clusters  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n+++ b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n \n         // create the initial clusters\n         List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);\n-        assignPointsToClusters(clusters, points);\n+        \n+        // create an array containing the latest assignment of a point to a cluster\n+        // no need to initialize the array, as it will be filled with the first assignment\n+        int[] assignments = new int[points.size()];\n+        assignPointsToClusters(clusters, points, assignments);\n \n         // iterate through updating the centers until we're done\n         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n         for (int count = 0; count < max; count++) {\n-            boolean clusteringChanged = false;\n+            boolean emptyCluster = false;\n             List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();\n             for (final Cluster<T> cluster : clusters) {\n                 final T newCenter;\n                         default :\n                             throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n                     }\n-                    clusteringChanged = true;\n+                    emptyCluster = true;\n                 } else {\n                     newCenter = cluster.getCenter().centroidOf(cluster.getPoints());\n-                    if (!newCenter.equals(cluster.getCenter())) {\n-                        clusteringChanged = true;\n-                    }\n                 }\n                 newClusters.add(new Cluster<T>(newCenter));\n             }\n-            if (!clusteringChanged) {\n+            int changes = assignPointsToClusters(newClusters, points, assignments);\n+            clusters = newClusters;\n+            \n+            // if there were no more changes in the point-to-cluster assignment\n+            // and there are no empty clusters left, return the current clusters\n+            if (changes == 0 && !emptyCluster) {\n                 return clusters;\n             }\n-            assignPointsToClusters(newClusters, points);\n-            clusters = newClusters;\n         }\n         return clusters;\n     }\n      * @param <T> type of the points to cluster\n      * @param clusters the {@link Cluster}s to add the points to\n      * @param points the points to add to the given {@link Cluster}s\n-     */\n-    private static <T extends Clusterable<T>> void\n-        assignPointsToClusters(final Collection<Cluster<T>> clusters, final Collection<T> points) {\n+     * @return the number of points assigned to different clusters as the iteration before\n+     */\n+    private static <T extends Clusterable<T>> int\n+        assignPointsToClusters(final List<Cluster<T>> clusters, final Collection<T> points, \n+                               final int[] assignments) {\n+        int assignedDifferently = 0;\n+        int pointIndex = 0;\n         for (final T p : points) {\n-            Cluster<T> cluster = getNearestCluster(clusters, p);\n+            int clusterIndex = getNearestCluster(clusters, p);\n+            if (clusterIndex != assignments[pointIndex]) {\n+                assignedDifferently++;\n+            }\n+            \n+            Cluster<T> cluster = clusters.get(clusterIndex);\n             cluster.addPoint(p);\n-        }\n+            assignments[pointIndex++] = clusterIndex;\n+        }\n+        \n+        return assignedDifferently;\n     }\n \n     /**\n             double sum = 0;\n             for (int i = 0; i < pointSet.size(); i++) {\n                 final T p = pointSet.get(i);\n-                final Cluster<T> nearest = getNearestCluster(resultSet, p);\n+                int nearestClusterIndex = getNearestCluster(resultSet, p);\n+                final Cluster<T> nearest = resultSet.get(nearestClusterIndex);\n                 final double d = p.distanceFrom(nearest.getCenter());\n                 sum += d * d;\n                 dx2[i] = sum;\n      * @param <T> type of the points to cluster\n      * @param clusters the {@link Cluster}s to search\n      * @param point the point to find the nearest {@link Cluster} for\n-     * @return the nearest {@link Cluster} to the given point\n-     */\n-    private static <T extends Clusterable<T>> Cluster<T>\n+     * @return the index of the nearest {@link Cluster} to the given point\n+     */\n+    private static <T extends Clusterable<T>> int\n         getNearestCluster(final Collection<Cluster<T>> clusters, final T point) {\n         double minDistance = Double.MAX_VALUE;\n-        Cluster<T> minCluster = null;\n+        int clusterIndex = 0;\n+        int minCluster = 0;\n         for (final Cluster<T> c : clusters) {\n             final double distance = point.distanceFrom(c.getCenter());\n             if (distance < minDistance) {\n                 minDistance = distance;\n-                minCluster = c;\n-            }\n+                minCluster = clusterIndex;\n+            }\n+            clusterIndex++;\n         }\n         return minCluster;\n     }", "timestamp": 1301941972, "metainfo": ""}