{"sha": "b1408ff073a223ab2ed3a3ed0b2534125efb23ac", "log": "Added @since tags for new methods. JIRA: MATH-287  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java\n      * @param length the number of elements to include\n      * @return true if the parameters are valid and designate a subarray of positive length\n      * @throws IllegalArgumentException if the indices are invalid or the array is null\n+     * @since 2.1\n      */\n     protected boolean test(\n         final double[] values,\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n      * @param length the number of elements to include\n      * @return the mean of the values or Double.NaN if length = 0\n      * @throws IllegalArgumentException if the parameters are not valid\n+     * @since 2.1\n      */\n     public double evaluate(final double[] values, final double[] weights,\n                            final int begin, final int length) {\n      * @param weights the weights array\n      * @return the mean of the values or Double.NaN if length = 0\n      * @throws IllegalArgumentException if the parameters are not valid\n+     * @since 2.1\n      */\n     public double evaluate(final double[] values, final double[] weights) {\n         return evaluate(values, weights, 0, values.length);\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n      * @param length the number of elements to include\n      * @return the weighted variance of the values or Double.NaN if length = 0\n      * @throws IllegalArgumentException if the parameters are not valid\n+     * @since 2.1\n      */\n     public double evaluate(final double[] values, final double[] weights,\n                            final int begin, final int length) {\n      * @param weights the weights array\n      * @return the weighted variance of the values\n      * @throws IllegalArgumentException if the parameters are not valid\n+     * @since 2.1\n      */\n     public double evaluate(final double[] values, final double[] weights) {\n         return evaluate(values, weights, 0, values.length);\n      * @param length the number of elements to include\n      * @return the variance of the values or Double.NaN if length = 0\n      * @throws IllegalArgumentException if the parameters are not valid\n+     * @since 2.1\n      */\n     public double evaluate(final double[] values, final double[] weights,\n                            final double mean, final int begin, final int length) {\n      * @param mean the precomputed weighted mean value\n      * @return the variance of the values or Double.NaN if length = 0\n      * @throws IllegalArgumentException if the parameters are not valid\n+     * @since 2.1\n      */\n     public double evaluate(final double[] values, final double[] weights, final double mean) {\n         return evaluate(values, weights, mean, 0, values.length);\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java\n      * @param length the number of elements to include\n      * @return the product of the values or Double.NaN if length = 0\n      * @throws IllegalArgumentException if the parameters are not valid\n+     * @since 2.1\n      */\n     public double evaluate(final double[] values, final double[] weights,\n                            final int begin, final int length) {\n      * @param weights the weights array\n      * @return the product of the values or Double.NaN if length = 0\n      * @throws IllegalArgumentException if the parameters are not valid\n+     * @since 2.1\n      */\n     public double evaluate(final double[] values, final double[] weights) {\n         return evaluate(values, weights, 0, values.length);\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n      * @param length the number of elements to include\n      * @return the sum of the values or Double.NaN if length = 0\n      * @throws IllegalArgumentException if the parameters are not valid\n+     * @since 2.1\n      */\n     public double evaluate(final double[] values, final double[] weights,\n                            final int begin, final int length) {\n      * @param weights the weights array\n      * @return the sum of the values or Double.NaN if length = 0\n      * @throws IllegalArgumentException if the parameters are not valid\n+     * @since 2.1\n      */\n     public double evaluate(final double[] values, final double[] weights) {\n         return evaluate(values, weights, 0, values.length);", "timestamp": 1262204694, "metainfo": ""}