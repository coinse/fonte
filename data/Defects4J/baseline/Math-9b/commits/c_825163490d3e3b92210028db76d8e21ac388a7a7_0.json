{"sha": "825163490d3e3b92210028db76d8e21ac388a7a7", "log": "In cases where \"getResult\" contains a statistical calculation, it now  checks if the internal state of the underlying statistic has changed  and only recalculates if this is true. this way muliple calls to getResult  when the staistic has not been incremented are less expensive  because it is only returning a property value.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java\n  *\n  * Abstract Implementation for StorelessUnivariateStatistics.\n  * Provides the ability to extend polymophically so that\n- * indiviual statistics do not need to implement these methods\n- * \n- * @author Mark Diggory\n+ * indiviual statistics do not need to implement these methods unless\n+ * there are better algorithms for handling the calculation.\n  */\n public abstract class AbstractStorelessUnivariateStatistic\n     extends AbstractUnivariateStatistic\n \n     /**\n      * This implements the AbstractUnivariateStatistic impl to funnel \n-     * calculation off to the instantanious increment method.\n+     * calculation off to the instantanious increment method. In most cases of\n+     * StorelessUnivariateStatistic this is never really used because more \n+     * efficient algorithms are available for that statistic.\n      * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n      */\n     public double evaluate(double[] values, int begin, int length) {\n                 increment(values[i]);\n             }\n         }\n-        return getValue();\n+        return getResult();\n     }\n }\n--- a/src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java\n  * Abstract Implementation for UnivariateStatistics.\n  * Provides the ability to extend polymophically so that\n  * indiviual statistics do not need to implement these methods. \n- * \n- * @author Mark Diggory\n  */\n public abstract class AbstractUnivariateStatistic\n     implements UnivariateStatistic {\n--- a/src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java\n \n /**\n  * StorelessUnivariate interface provides methods to increment and access\n- * the internal state of the Statistic.\n- *\n- * @author Mark Diggory\n+ * the internal state of the Statistic. A StorelessUnivariateStatistic does\n+ * not require that a double[] storage structure be maintained with the values\n+ * in it. As such only a subset of known statistics can actually be implmented\n+ * using it. If a Statistic cannot be implemented in a Storeless approach it\n+ * should implement the UnivariateStatistic interface directly instead.\n  */\n public interface StorelessUnivariateStatistic extends UnivariateStatistic {\n \n      * Increments the internal state of the Storagless\n      * Implementation.\n      * @param d is the value to increment the state by.\n-     * @return the new state of this Statistic. Returns \n-     * the same value as <code>getValue()</code>, Double.NaN if it\n-     * has been cleared or just instantiated.\n      */\n     public void increment(double d);\n \n     /**\n      * Returns the current state of the statistic after the\n      * last increment.\n-     * @return values of the statistic, Double.NaN if it\n+     * @return value of the statistic, Double.NaN if it\n      * has been cleared or just instantiated.\n      */\n-    public double getValue();\n+    public double getResult();\n \n \n     /**\n      */\n     public void clear();\n \n-    /**\n-     * Returns the behavior of this statistic when evaluating\n-     * double[]'s using <code>evaluate(double[], int, int)</code> and\n-     * <code>evaluate(double[])</code> methods.\n-     * @return the state\n-     */\n-    //public boolean isClearOnEval();\n-\n-    /**\n-     * Sets the behavior of this statistic when evaluating\n-     * double[]'s using <code>evaluate(double[], int, int)</code> and\n-     * <code>evaluate(double[])</code> methods. if true, the internal state\n-     * will be cleared between evaluations, otherwise it will be\n-     * incrimented.\n-     * @param b true | false\n-     */\n-    //public void setClearOnEval(boolean b);\n-\n }\n--- a/src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java\n package org.apache.commons.math.stat.univariate;\n \n /**\n- * @author Mark Diggory\n- *\n  * UnivariateStatistic interface provides methods to evaluate \n  * double[] based content using a particular algorithm.\n  * \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java\n         n0 = (double)n;\n         v = dev / n0;\n \n-        m1 += v;                    \n+        m1 += v;                   \n     }\n     \n     /**\n         n = 0;\n         dev = 0.0;\n         v = 0.0;\n-        n0 = 0.0;\n+        n0 = 0.0;  \n     }\n     \n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()\n      */\n-    public double getValue() {\n+    public double getResult() {\n         return m1;\n     }\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java\n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()\n      */\n-    public double getValue() {\n+    public double getResult() {\n         return m4;\n     }\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java\n  *\n  */\n public class GeometricMean extends SumOfLogs {\n- \n-    private int n = 0;\n+\n+    protected int n = 0;\n+\n+    private double geoMean = Double.NaN;\n     \n+    private double lastSum = 0.0;\n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n      */\n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()\n      */\n-    public double getValue() {\n-        return Math.exp( super.getValue() / (double)n );\n+    public double getResult() {\n+        if (lastSum != super.getResult() || n == 1) {\n+            lastSum = super.getResult();\n+            geoMean = Math.exp(lastSum / (double) n);\n+        }\n+        return geoMean;\n     }\n \n     /**\n      */\n     public void clear() {\n         super.clear();\n+        lastSum = 0.0;\n+        geoMean = Double.NaN;\n         n = 0;\n     }\n-    \n+\n     /**\n      * Returns the geometric mean for this collection of values\n      * @param values Is a double[] containing the values\n      * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n      */\n     public double evaluate(double[] values, int begin, int length) {\n-        return Math.exp(super.evaluate(values, begin, length) / (double) length );\n+        return Math.exp(\n+            super.evaluate(values, begin, length) / (double) length);\n     }\n \n-\n-\n }\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java\n \n     protected boolean incMoment = true;\n \n+    private double kurtosis = Double.NaN;\n+\n+    private int n = 0;\n+    \n     public Kurtosis() {\n         moment = new FourthMoment();\n     }\n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()\n      */\n-    public double getValue() {\n-\n-        if (moment.n <= 0) {\n-            return Double.NaN;\n-        }\n-\n-        double variance =\n-            (moment.n < 1) ? 0.0 : moment.m2 / (double) (moment.n - 1);\n-\n-        if (moment.n <= 3 || variance < 10E-20) {\n-            return 0.0;\n-        }\n-\n-        return (moment.n0 * (moment.n0 + 1) * moment.m4\n-                - 3 * moment.m2 * moment.m2 * moment.n1)\n-                / (moment.n1 * moment.n2 * moment.n3 * variance * variance);\n-\n+    public double getResult() {\n+        if (n < moment.n) {\n+            if (moment.n <= 0) {\n+                kurtosis = Double.NaN;\n+            }\n+\n+            double variance =\n+                (moment.n < 1) ? 0.0 : moment.m2 / (double) (moment.n - 1);\n+\n+            if (moment.n <= 3 || variance < 10E-20) {\n+                kurtosis = 0.0;\n+            } else {\n+                kurtosis =\n+                    (moment.n0 * (moment.n0 + 1) * moment.m4\n+                        - 3 * moment.m2 * moment.m2 * moment.n1)\n+                        / (moment.n1\n+                            * moment.n2\n+                            * moment.n3\n+                            * variance\n+                            * variance);\n+            }\n+            n = moment.n;\n+        }\n+        \n+        return kurtosis;\n     }\n \n     /**\n         if (incMoment) {\n             moment.clear();\n         }\n+        kurtosis = Double.NaN;\n+        n = 0;\n     }\n \n     /*UnvariateStatistic Approach */\n \n     /**\n     * This algorithm uses a corrected two pass algorithm of the following \n-    * <a href=\"http://lib-www.lanl.gov/numerical/bookcpdf/c14-1.pdf\">\n-    * corrected two pass formula (14.1.8)</a>, and also referenced in:<p/>\n-    * \"Algorithms for Computing the Sample Variance: Analysis and\n-    * Recommendations\", Chan, T.F., Golub, G.H., and LeVeque, R.J. \n-    * 1983, American Statistician, vol. 37, pp. 242?247.\n-    * <p/>\n+     * <a href=\"http://lib-www.lanl.gov/numerical/bookcpdf/c14-1.pdf\">\n+     * corrected two pass formula (14.1.8)</a>, and also referenced in:\n+     * <p>\n+     * \"Algorithms for Computing the Sample Variance: Analysis and\n+     * Recommendations\", Chan, T.F., Golub, G.H., and LeVeque, R.J. \n+     * 1983, American Statistician, vol. 37, pp. 242?247.\n+     * </p>\n     * Returns the kurtosis for this collection of values. Kurtosis is a \n     * measure of the \"peakedness\" of a distribution.\n     * @param values Is a double[] containing the values\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Mean.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Mean.java\n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()\n      */\n-    public double getValue() {\n+    public double getResult() {\n         return moment.m1;\n     }\n-\n+    \n     /*UnvariateStatistic Approach */\n     Sum sum = new Sum();\n \n     /**\n      * Returns the <a href=http://www.xycoon.com/arithmetic_mean.htm>\n-     * arithmetic mean </a> of the available values \n+     * arithmetic mean </a> of the available values.\n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n      * @param length processing at this point in the array\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java\n         \n         /* increment and return m2 */\n         m2 += n1 * dev * v;\n+\n     }\n \n     /**\n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()\n      */\n-    public double getValue() {\n+    public double getResult() {\n         return m2;\n     }\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java\n \n     protected boolean incMoment = true;\n \n+    protected double skewness = Double.NaN;\n+\n+    private int n = 0;\n+    \n     public Skewness() {\n         moment = new ThirdMoment();\n     }\n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()\n      */\n-    public double getValue() {\n-        if (moment.n <= 0) {\n-            return Double.NaN;\n+    public double getResult() {\n+        if (n < moment.n) {\n+            if (moment.n <= 0) {\n+                skewness = Double.NaN;\n+            }\n+\n+            double variance =\n+                (moment.n < 1) ? 0.0 : moment.m2 / (double) (moment.n - 1);\n+\n+            if (moment.n <= 2 || variance < 10E-20) {\n+                skewness = 0.0;\n+            } else {\n+                skewness =\n+                    (moment.n0 * moment.m3)\n+                        / (moment.n1\n+                            * moment.n2\n+                            * Math.sqrt(variance)\n+                            * variance);\n+            }\n+            n = moment.n;\n         }\n-\n-        double variance =\n-            (moment.n < 1) ? 0.0 : moment.m2 / (double) (moment.n - 1);\n-\n-        if (moment.n <= 2 || variance < 10E-20) {\n-            return 0.0;\n-        }\n-\n-        return (moment.n0 * moment.m3)\n-                / (moment.n1 * moment.n2 * Math.sqrt(variance) * variance);\n+        return skewness;\n     }\n \n     /**\n         if (incMoment) {\n             moment.clear();\n         }\n+        skewness = Double.NaN;\n+        n = 0;\n     }\n-\n+    \n     /*UnvariateStatistic Approach */\n \n     Mean mean = new Mean();\n     /**\n      * This algorithm uses a corrected two pass algorithm of the following \n      * <a href=\"http://lib-www.lanl.gov/numerical/bookcpdf/c14-1.pdf\">\n-     * corrected two pass formula (14.1.8)</a>, and also referenced in:<p/>\n+     * corrected two pass formula (14.1.8)</a>, and also referenced in:\n+     * <p>\n      * \"Algorithms for Computing the Sample Variance: Analysis and\n      * Recommendations\", Chan, T.F., Golub, G.H., and LeVeque, R.J. \n      * 1983, American Statistician, vol. 37, pp. 242?247.\n-     * <p/>\n+     * </p>\n      * Returns the skewness of a collection of values.  Skewness is a \n      * measure of the assymetry of a given distribution. \n      * @param values Is a double[] containing the values\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java\n  */\n public class StandardDeviation extends Variance {\n \n-    public StandardDeviation(){\n+    protected double std = Double.NaN;\n+\n+    private double lastVar = 0.0;\n+    \n+    public StandardDeviation() {\n         super();\n     }\n-    \n-    public StandardDeviation(SecondMoment m2){\n+\n+    public StandardDeviation(SecondMoment m2) {\n         super(m2);\n     }\n-    \n+\n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n      */\n     public void increment(double d) {\n-        super.increment(d);        \n+        super.increment(d);\n     }\n-    \n+\n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()\n      */\n-    public double getValue() {\n-        \n-        double var = super.getValue();\n-        \n-        if(Double.isNaN(var)){\n-            return Double.NaN;\n-        }else if (var == 0.0){\n-            return 0.0;\n+    public double getResult() {\n+        if (lastVar != super.getResult()) {\n+            lastVar = super.getResult();\n+            if (Double.isNaN(lastVar)) {\n+                std = Double.NaN;\n+            } else if (lastVar == 0.0) {\n+                std = 0.0;\n+            } else {\n+                std = Math.sqrt(lastVar);\n+            }\n         }\n-        \n-        return Math.sqrt(var);\n+        return std;\n     }\n-    \n+\n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()\n      */\n     public void clear() {\n         super.clear();\n+        lastVar = 0.0;\n     }\n \n     /**\n      */\n     public double evaluate(double[] values, int begin, int length) {\n         double var = super.evaluate(values, begin, length);\n-        \n-        if(Double.isNaN(var)){\n+\n+        if (Double.isNaN(var)) {\n             return Double.NaN;\n         }\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java\n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()\n      */\n-    public double getValue() {\n+    public double getResult() {\n         return m3;\n     }\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Variance.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Variance.java\n \n     protected boolean incMoment = true;\n \n+    protected double variance = Double.NaN;\n+\n+    protected int n = 0;\n+    \n     public Variance() {\n         moment = new SecondMoment();\n     }\n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()\n      */\n-    public double getValue() {\n-        if (moment.n <= 0) {\n-            return Double.NaN;\n-        } else if (moment.n <= 1) {\n-            return 0.0;\n+    public double getResult() {\n+        if (n < moment.n) {\n+            if (moment.n <= 0) {\n+                variance = Double.NaN;\n+            } else if (moment.n <= 1) {\n+                variance = 0.0;\n+            } else {\n+                variance = moment.m2 / (moment.n0 - 1); \n+            }\n+            n = moment.n;\n         }\n-        return moment.m2 / (moment.n0 - 1);\n+\n+        return variance;\n     }\n \n     /**\n         if (incMoment) {\n             moment.clear();\n         }\n+        variance = Double.NaN;\n+        n = 0;\n     }\n \n     /*UnvariateStatistic Approach */\n      * Returns the variance of the available values. This uses a corrected\n      * two pass algorithm of the following \n      * <a href=\"http://lib-www.lanl.gov/numerical/bookcpdf/c14-1.pdf\">\n-     * corrected two pass formula (14.1.8)</a>, and also referenced in:<p/>\n+     * corrected two pass formula (14.1.8)</a>, and also referenced in:\n+     * <p>\n      * \"Algorithms for Computing the Sample Variance: Analysis and\n      * Recommendations\", Chan, T.F., Golub, G.H., and LeVeque, R.J. \n      * 1983, American Statistician, vol. 37, pp. 242?247.\n-     * \n+     * </p>\n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n      * @param length processing at this point in the array\n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Max.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Max.java\n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()\n      */\n-    public double getValue() {\n+    public double getResult() {\n         return value;\n     }\n \n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Min.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Min.java\n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()\n      */\n-    public double getValue() {\n+    public double getResult() {\n         return value;\n     }\n \n--- a/src/java/org/apache/commons/math/stat/univariate/summary/Product.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/Product.java\n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()\n      */\n-    public double getValue() {\n+    public double getResult() {\n         return value;\n     }\n \n--- a/src/java/org/apache/commons/math/stat/univariate/summary/Sum.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/Sum.java\n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()\n      */\n-    public double getValue() {\n+    public double getResult() {\n         return value;\n     }\n     \n--- a/src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java\n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()\n      */\n-    public double getValue() {\n+    public double getResult() {\n         return value;\n     }\n \n--- a/src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java\n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()\n      */\n-    public double getValue() {\n+    public double getResult() {\n         return value;\n     }\n ", "timestamp": 1057767858, "metainfo": ""}