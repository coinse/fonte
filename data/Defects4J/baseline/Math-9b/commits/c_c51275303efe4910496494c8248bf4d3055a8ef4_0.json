{"sha": "c51275303efe4910496494c8248bf4d3055a8ef4", "log": "Changed deprecated MathRuntimeException in package stat.regression JIRA: MATH-459  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java\n+++ b/src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java\n  */\n package org.apache.commons.math.stat.regression;\n \n-import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.exception.NoDataException;\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n+import org.apache.commons.math.linear.NonSquareMatrixException;\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.linear.Array2DRowRealMatrix;\n import org.apache.commons.math.linear.RealVector;\n      * @param data input data array\n      * @param nobs number of observations (rows)\n      * @param nvars number of independent variables (columns, not counting y)\n-     * @throws IllegalArgumentException if the preconditions are not met\n+     * @throws NullArgumentException if the data array is null\n+     * @throws DimensionMismatchException if the length of the data array is not equal\n+     * to <code>nobs * (nvars + 1)</code>\n+     * @throws NumberIsTooSmallException if <code>nobs</code> is smaller than\n+     * <code>nvars</code>\n      */\n     public void newSampleData(double[] data, int nobs, int nvars) {\n         if (data == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    LocalizedFormats.NULL_NOT_ALLOWED);\n+            throw new NullArgumentException();\n         }\n         if (data.length != nobs * (nvars + 1)) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    LocalizedFormats.INVALID_REGRESSION_ARRAY, data.length, nobs, nvars);\n+            throw new DimensionMismatchException(data.length, nobs * (nvars + 1));\n         }\n         if (nobs <= nvars) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    LocalizedFormats.NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS);\n+            throw new NumberIsTooSmallException(nobs, nvars, false);\n         }\n         double[] y = new double[nobs];\n         final int cols = noIntercept ? nvars: nvars + 1;\n      * Loads new y sample data, overriding any previous data.\n      *\n      * @param y the array representing the y sample\n-     * @throws IllegalArgumentException if y is null or empty\n+     * @throws NullArgumentException if y is null\n+     * @throws NoDataException if y is empty\n      */\n     protected void newYSampleData(double[] y) {\n         if (y == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    LocalizedFormats.NULL_NOT_ALLOWED);\n+            throw new NullArgumentException();\n         }\n         if (y.length == 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    LocalizedFormats.NO_DATA);\n+            throw new NoDataException();\n         }\n         this.Y = new ArrayRealVector(y);\n     }\n      * specifying a model including an intercept term.\n      * </p>\n      * @param x the rectangular array representing the x sample\n-     * @throws IllegalArgumentException if x is null, empty or not rectangular\n+     * @throws NullArgumentException if x is null\n+     * @throws NoDataException if x is empty\n+     * @throws DimensionMismatchException if x is not rectangular\n      */\n     protected void newXSampleData(double[][] x) {\n         if (x == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    LocalizedFormats.NULL_NOT_ALLOWED);\n+            throw new NullArgumentException();\n         }\n         if (x.length == 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    LocalizedFormats.NO_DATA);\n+            throw new NoDataException();\n         }\n         if (noIntercept) {\n             this.X = new Array2DRowRealMatrix(x, true);\n             final double[][] xAug = new double[x.length][nVars + 1];\n             for (int i = 0; i < x.length; i++) {\n                 if (x[i].length != nVars) {\n-                    throw MathRuntimeException.createIllegalArgumentException(\n-                            LocalizedFormats.DIFFERENT_ROWS_LENGTHS,\n-                            x[i].length, nVars);\n+                    throw new DimensionMismatchException(x[i].length, nVars);\n                 }\n                 xAug[i][0] = 1.0d;\n                 System.arraycopy(x[i], 0, xAug[i], 1, nVars);\n      *\n      * @param x the [n,k] array representing the x data\n      * @param y the [n,1] array representing the y data\n-     * @throws IllegalArgumentException if any of the checks fail\n-     *\n+     * @throws NullArgumentException if {@code x} or {@code y} is null\n+     * @throws DimensionMismatchException if {@code x} and {@code y} do not\n+     * have the same length\n+     * @throws NoDataException if {@code x} or {@code y} are zero-length\n+     * @throws MathIllegalArgumentException if the number of rows of {@code x}\n+     * is not larger than the number of columns + 1\n      */\n     protected void validateSampleData(double[][] x, double[] y) {\n-        if ((x == null) || (y == null) || (x.length != y.length)) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,\n-                  (x == null) ? 0 : x.length,\n-                  (y == null) ? 0 : y.length);\n+        if ((x == null) || (y == null)) {\n+            throw new NullArgumentException();\n+        }\n+        if (x.length != y.length) {\n+            throw new DimensionMismatchException(y.length, x.length);\n         }\n         if (x.length == 0) {  // Must be no y data either\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    LocalizedFormats.NO_DATA);\n+            throw new NoDataException();\n         }\n         if (x[0].length + 1 > x.length) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  LocalizedFormats.NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS,\n-                  x.length, x[0].length);\n+            throw new MathIllegalArgumentException(\n+                    LocalizedFormats.NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS,\n+                    x.length, x[0].length);\n         }\n     }\n \n      *\n      * @param x the [n,k] array representing the x sample\n      * @param covariance the [n,n] array representing the covariance matrix\n-     * @throws IllegalArgumentException if the number of rows in x is not equal\n-     * to the number of rows in covariance or covariance is not square.\n+     * @throws DimensionMismatchException if the number of rows in x is not equal\n+     * to the number of rows in covariance\n+     * @throws NonSquareMatrixException if the covariance matrix is not square\n      */\n     protected void validateCovarianceData(double[][] x, double[][] covariance) {\n         if (x.length != covariance.length) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                 LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, x.length, covariance.length);\n+            throw new DimensionMismatchException(x.length, covariance.length);\n         }\n         if (covariance.length > 0 && covariance.length != covariance[0].length) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  LocalizedFormats.NON_SQUARE_MATRIX,\n-                  covariance.length, covariance[0].length);\n+            throw new NonSquareMatrixException(covariance.length, covariance[0].length);\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n+++ b/src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n package org.apache.commons.math.stat.regression;\n import java.io.Serializable;\n \n-import org.apache.commons.math.MathException;\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.distribution.TDistribution;\n import org.apache.commons.math.exception.MathIllegalArgumentException;\n         } else {\n             if( hasIntercept ){\n                 final double fact1 = 1.0 + n;\n-                final double fact2 = (n) / (1.0 + n);\n+                final double fact2 = n / (1.0 + n);\n                 final double dx = x - xbar;\n                 final double dy = y - ybar;\n                 sumXX += dx * dx * fact2;\n         if (n > 0) {\n             if (hasIntercept) {\n                 final double fact1 = n - 1.0;\n-                final double fact2 = (n) / (n - 1.0);\n+                final double fact2 = n / (n - 1.0);\n                 final double dx = x - xbar;\n                 final double dy = y - ybar;\n                 sumXX -= dx * dx * fact2;\n      * Bivariate Normal Distribution</a>.</p>\n      *\n      * @return half-width of 95% confidence interval for the slope estimate\n-     * @throws MathException if the confidence interval can not be computed.\n-     */\n-    public double getSlopeConfidenceInterval() throws MathException {\n+     * @throws OutOfRangeException if the confidence interval can not be computed.\n+     */\n+    public double getSlopeConfidenceInterval() {\n         return getSlopeConfidenceInterval(0.05d);\n     }\n \n      * <code>Double.NaN</code>.\n      * </li>\n      * <li><code>(0 < alpha < 1)</code>; otherwise an\n-     * <code>IllegalArgumentException</code> is thrown.\n+     * <code>OutOfRangeException</code> is thrown.\n      * </li></ul></p>\n      *\n      * @param alpha the desired significance level\n      * @return half-width of 95% confidence interval for the slope estimate\n-     * @throws MathException if the confidence interval can not be computed.\n-     */\n-    public double getSlopeConfidenceInterval(final double alpha)\n-        throws MathException {\n+     * @throws OutOfRangeException if the confidence interval can not be computed.\n+     */\n+    public double getSlopeConfidenceInterval(final double alpha) {\n         if (alpha >= 1 || alpha <= 0) {\n             throw new OutOfRangeException(LocalizedFormats.SIGNIFICANCE_LEVEL,\n                                           alpha, 0, 1);\n      * <code>Double.NaN</code>.</p>\n      *\n      * @return significance level for slope/correlation\n-     * @throws MathException if the significance level can not be computed.\n-     */\n-    public double getSignificance() throws MathException {\n+     * @throws org.apache.commons.math.exception.MaxCountExceededException\n+     * if the significance level can not be computed.\n+     */\n+    public double getSignificance() {\n         TDistribution distribution = new TDistribution(n - 2);\n         return 2d * (1.0 - distribution.cumulativeProbability(\n                     FastMath.abs(getSlope()) / getSlopeStdErr()));\n           if( FastMath.abs( sumXX ) > Precision.SAFE_MIN ){\n               final double[] params = new double[]{ getIntercept(), getSlope() };\n               final double mse = getMeanSquareError();\n-              final double _syy = sumYY + sumY * sumY / (n);\n+              final double _syy = sumYY + sumY * sumY / n;\n               final double[] vcv = new double[]{\n-                mse * (xbar *xbar /sumXX + 1.0 / (n)),\n+                mse * (xbar *xbar /sumXX + 1.0 / n),\n                 -xbar*mse/sumXX,\n                 mse/sumXX };\n               return new RegressionResults(\n                       params, new double[][]{vcv}, true, n, 2,\n                       sumY, _syy, getSumSquaredErrors(),true,false);\n           }else{\n-              final double[] params = new double[]{ sumY/(n), Double.NaN };\n+              final double[] params = new double[]{ sumY / n, Double.NaN };\n               //final double mse = getMeanSquareError();\n               final double[] vcv = new double[]{\n                 ybar / (n - 1.0),\n                 if( variablesToInclude[0] != 1 && variablesToInclude[0] != 0 ){\n                      throw new OutOfRangeException( variablesToInclude[0],0,1 );\n                 }\n-                final double _mean = sumY * sumY / (n);\n+                final double _mean = sumY * sumY / n;\n                 final double _syy = sumYY + _mean;\n                 if( variablesToInclude[0] == 0 ){\n                     //just the mean\n \n                 }else if( variablesToInclude[0] == 1){\n                     //final double _syy = sumYY + sumY * sumY / ((double) n);\n-                    final double _sxx = sumXX + sumX * sumX / (n);\n-                    final double _sxy = sumXY + sumX * sumY / (n);\n+                    final double _sxx = sumXX + sumX * sumX / n;\n+                    final double _sxy = sumXY + sumX * sumY / n;\n                     final double _sse = FastMath.max(0d, _syy - _sxy * _sxy / _sxx);\n                     final double _mse = _sse/((n-1));\n                     if( !Double.isNaN(_sxx) ){", "timestamp": 1328216574, "metainfo": ""}