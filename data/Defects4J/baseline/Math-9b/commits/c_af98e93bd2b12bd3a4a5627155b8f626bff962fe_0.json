{"sha": "af98e93bd2b12bd3a4a5627155b8f626bff962fe", "log": "Made assumption about precomputed mean explicit in javadoc.  Added missing method.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.22 $ $Date: 2004/07/18 04:42:02 $\n+ * @version $Revision: 1.23 $ $Date: 2004/09/01 15:54:39 $\n  */\n public class StandardDeviation extends AbstractStorelessUnivariateStatistic\n     implements Serializable {\n      * <p>\n      * Returns 0 for a single-value (i.e. length = 1) sample.\n      * <p>\n+     * The formula used assumes that the supplied mean value is the arithmetic\n+     * mean of the sample data, not a known population parameter.  This method\n+     * is supplied only to save computation when the mean has already been\n+     * computed.\n+     * <p>\n      * Throws <code>IllegalArgumentException</code> if the array is null.\n      * <p>\n      * Does not change the internal state of the statistic.\n             final int begin, final int length)  {\n         return Math.sqrt(variance.evaluate(values, mean, begin, length));\n     }\n+    \n+    /**\n+     * Returns the Standard Deviation of the entries in the input array, using\n+     * the precomputed mean value.  Returns\n+     * <code>Double.NaN</code> if the designated subarray is empty.\n+     * <p>\n+     * Returns 0 for a single-value (i.e. length = 1) sample.\n+     * <p>\n+     * The formula used assumes that the supplied mean value is the arithmetic\n+     * mean of the sample data, not a known population parameter.  This method\n+     * is supplied only to save computation when the mean has already been\n+     * computed.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * <p>\n+     * Does not change the internal state of the statistic.\n+     * \n+     * @param values the input array\n+     * @param mean the precomputed mean value\n+     * @return the standard deviation of the values or Double.NaN if length = 0\n+     * @throws IllegalArgumentException if the array is null or the array index\n+     *  parameters are not valid\n+     */\n+    public double evaluate(final double[] values, final double mean)  {\n+        return Math.sqrt(variance.evaluate(values, mean));\n+    }\n }", "timestamp": 1094054079, "metainfo": ""}