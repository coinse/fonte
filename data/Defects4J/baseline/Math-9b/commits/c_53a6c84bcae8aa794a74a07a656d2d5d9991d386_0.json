{"sha": "53a6c84bcae8aa794a74a07a656d2d5d9991d386", "log": "Standard unit test of least-squares optimizers based on NIST's Statistical Reference Datasets (StRD).  ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java\n package org.apache.commons.math3.optimization.general;\n \n import java.awt.geom.Point2D;\n+import java.io.IOException;\n import java.io.Serializable;\n import java.util.Arrays;\n \n         {-0.048837, -0.077056}, {-0.127729, -0.075338}, {-0.221271, -0.067526}\n     };\n \n+    public void doTestStRD(final StatisticalReferenceDataset dataset,\n+        final double errParams, final double errParamsSd) {\n+        final AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n+        final double[] w = new double[dataset.getNumObservations()];\n+        Arrays.fill(w, 1.0);\n+\n+        final double[][] data = dataset.getData();\n+        final double[] initial = dataset.getStartingPoint(0);\n+        final DifferentiableMultivariateVectorFunction problem;\n+        problem = dataset.getLeastSquaresProblem();\n+        final PointVectorValuePair optimum;\n+        optimum = optimizer.optimize(100, problem, data[1], w, initial);\n+\n+        final double[] actual = optimum.getPoint();\n+        final double[] actualSig = optimizer.guessParametersErrors();\n+        for (int i = 0; i < actual.length; i++) {\n+            double expected = dataset.getParameter(i);\n+            double delta = FastMath.abs(errParams * expected);\n+            Assert.assertEquals(dataset.getName() + \", param #\" + i,\n+                                expected, actual[i], delta);\n+            expected = dataset.getParameterStandardDeviation(i);\n+            delta = FastMath.abs(errParamsSd * expected);\n+            Assert.assertEquals(dataset.getName() + \", sd of param #\" + i,\n+                                expected, actualSig[i], delta);\n+        }\n+    }\n+\n+    @Test\n+    public void testKirby2() throws IOException {\n+        doTestStRD(StatisticalReferenceDatasetFactory.createKirby2(), 1E-7, 1E-7);\n+    }\n+\n+    @Test\n+    public void testHahn1() throws IOException {\n+        doTestStRD(StatisticalReferenceDatasetFactory.createHahn1(), 1E-7, 1E-4);\n+    }\n+\n     static class LinearProblem implements DifferentiableMultivariateVectorFunction, Serializable {\n \n         private static final long serialVersionUID = 703247177355019415L;\n--- a/src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java\n  */\n \n package org.apache.commons.math3.optimization.general;\n+\n+import java.io.IOException;\n \n import org.apache.commons.math3.exception.ConvergenceException;\n import org.apache.commons.math3.exception.TooManyEvaluationsException;\n     @Test(expected=ConvergenceException.class)\n     public void testCircleFittingBadInit() {\n         /*\n-         * This test does not converge with this optimizer\n+         * This test does not converge with this optimizer.\n          */\n         super.testCircleFittingBadInit();\n     }\n+\n+    @Override\n+    @Test(expected = ConvergenceException.class)\n+    public void testHahn1()\n+        throws IOException {\n+        /*\n+         * TODO This test leads to a singular problem with the Gauss-Newton\n+         * optimizer. This should be inquired.\n+         */\n+        super.testHahn1();\n+    }\n }\n--- a/src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java\n+++ b/src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java\n         return dataset;\n     }\n \n+    public static StatisticalReferenceDataset createLanczos1()\n+        throws IOException {\n+        final BufferedReader in =\n+            createBufferedReaderFromResource(\"Lanczos1.dat\");\n+        StatisticalReferenceDataset dataset = null;\n+        try {\n+            dataset = new StatisticalReferenceDataset(in) {\n+\n+                @Override\n+                public double getModelValue(final double x, final double[] a) {\n+                    System.out.println(a[0]+\", \"+a[1]+\", \"+a[2]+\", \"+a[3]+\", \"+a[4]+\", \"+a[5]);\n+                    return a[0] * FastMath.exp(-a[3] * x) +\n+                           a[1] * FastMath.exp(-a[4] * x) +\n+                           a[2] * FastMath.exp(-a[5] * x);\n+                }\n+\n+                @Override\n+                public double[] getModelDerivatives(final double x,\n+                    final double[] a) {\n+                    final double[] dy = new double[6];\n+                    dy[0] = FastMath.exp(-x * a[3]);\n+                    dy[1] = FastMath.exp(-x * a[4]);\n+                    dy[2] = FastMath.exp(-x * a[5]);\n+                    dy[3] = -x * a[0] * dy[0];\n+                    dy[4] = -x * a[1] * dy[1];\n+                    dy[5] = -x * a[2] * dy[2];\n+                    return dy;\n+                }\n+            };\n+        } finally {\n+            in.close();\n+        }\n+        return dataset;\n+    }\n+\n     /**\n      * Returns an array with all available reference datasets.\n      *", "timestamp": 1335937859, "metainfo": ""}