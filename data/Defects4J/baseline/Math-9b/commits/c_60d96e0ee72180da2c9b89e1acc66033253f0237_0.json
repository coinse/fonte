{"sha": "60d96e0ee72180da2c9b89e1acc66033253f0237", "log": "Added FieldElement.negate() and FieldElement.reciprocal() (MATH-686).  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/FieldElement.java\n+++ b/src/main/java/org/apache/commons/math/FieldElement.java\n      */\n     T subtract(T a);\n \n+    /**\n+     * Returns the additive inverse of {@code this} element.\n+     * @return the opposite of {@code this}.\n+     */\n+    T negate();\n+\n     /** Compute n &times; this. Multiplication by an integer number is defined\n      * as the following sum\n      * <center>\n      */\n     T divide(T a) throws ArithmeticException;\n \n+    /**\n+     * Returns the multiplicative inverse of {@code this} element.\n+     * @return the inverse of {@code this}.\n+     */\n+    T reciprocal();\n+\n     /** Get the {@link Field} to which the instance belongs.\n      * @return {@link Field} to which the instance belongs\n      */\n     Field<T> getField();\n-\n }\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n                              imaginary  / divisor);\n     }\n \n+    /** {@inheritDoc} */\n+    public Complex reciprocal() {\n+        if (isNaN) {\n+            return NaN;\n+        }\n+\n+        if (real == 0.0 && imaginary == 0.0) {\n+            return NaN;\n+        }\n+\n+        if (isInfinite) {\n+            return ZERO;\n+        }\n+\n+        if (FastMath.abs(real) < FastMath.abs(imaginary)) {\n+            double q = real / imaginary;\n+            double scale = 1. / (real * q + imaginary);\n+            return createComplex(scale * q, -scale);\n+        } else {\n+            double q = imaginary / real;\n+            double scale = 1. / (imaginary * q + real);\n+            return createComplex(scale, -scale * q);\n+        }\n+    }\n+\n     /**\n      * Test for the equality of two Complex objects.\n      * If both the real and imaginary parts of two complex numbers\n     public String toString() {\n         return \"(\" + real + \", \" + imaginary + \")\";\n     }\n+\n }\n--- a/src/main/java/org/apache/commons/math/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math/dfp/Dfp.java\n \n     }\n \n+    /** {@inheritDoc} */\n+    public Dfp reciprocal() {\n+        return field.getOne().divide(this);\n+    }\n+\n     /** Compute the square root.\n      * @return square root of the instance\n      */\n--- a/src/main/java/org/apache/commons/math/util/BigReal.java\n+++ b/src/main/java/org/apache/commons/math/util/BigReal.java\n     }\n \n     /** {@inheritDoc} */\n+    public BigReal negate() {\n+        return new BigReal(d.negate());\n+    }\n+\n+    /** {@inheritDoc} */\n     public BigReal divide(BigReal a) throws ArithmeticException {\n         return new BigReal(d.divide(a.d, scale, roundingMode));\n+    }\n+\n+    /** {@inheritDoc}} */\n+    public BigReal reciprocal(){\n+        return new BigReal(BigDecimal.ONE.divide(d, scale, roundingMode));\n     }\n \n     /** {@inheritDoc} */\n--- a/src/test/java/org/apache/commons/math/complex/ComplexTest.java\n+++ b/src/test/java/org/apache/commons/math/complex/ComplexTest.java\n     public void testScalarDivideZero() {\n         Complex x = new Complex(1,1);\n         TestUtils.assertEquals(x.divide(Complex.ZERO), x.divide(0), 0);\n+    }\n+\n+    @Test\n+    public void testReciprocal() {\n+        Complex z = new Complex(5.0, 6.0);\n+        Complex act = z.reciprocal();\n+        double expRe = 5.0 / 61.0;\n+        double expIm = -6.0 / 61.0;\n+        Assert.assertEquals(expRe, act.getReal(), FastMath.ulp(expRe));\n+        Assert.assertEquals(expIm, act.getImaginary(), FastMath.ulp(expIm));\n+    }\n+\n+    @Test\n+    public void testReciprocalReal() {\n+        Complex z = new Complex(-2.0, 0.0);\n+        Assert.assertEquals(new Complex(-0.5, 0.0), z.reciprocal());\n+    }\n+\n+    @Test\n+    public void testReciprocalImaginary() {\n+        Complex z = new Complex(0.0, -2.0);\n+        Assert.assertEquals(new Complex(0.0, 0.5), z.reciprocal());\n+    }\n+\n+    @Test\n+    public void testReciprocalInf() {\n+        Complex z = new Complex(neginf, inf);\n+        Assert.assertTrue(z.reciprocal().equals(Complex.ZERO));\n+\n+        z = new Complex(1, inf).reciprocal();\n+        Assert.assertEquals(z, Complex.ZERO);\n+    }\n+\n+    @Test\n+    public void testReciprocalZero() {\n+        Assert.assertEquals(Complex.ZERO.reciprocal(), Complex.NaN);\n+    }\n+\n+    @Test\n+    public void testReciprocalNaN() {\n+        Assert.assertTrue(Complex.NaN.reciprocal().isNaN());\n     }\n \n     @Test\n         }\n \n     }\n-\n }\n--- a/src/test/java/org/apache/commons/math/dfp/DfpTest.java\n+++ b/src/test/java/org/apache/commons/math/dfp/DfpTest.java\n         qnan    = null;\n     }\n \n-    // Generic test function.  Takes params x and y and tests them for \n+    // Generic test function.  Takes params x and y and tests them for\n     // equality.  Then checks the status flags against the flags argument.\n     // If the test fail, it prints the desc string\n     private void test(Dfp x, Dfp y, int flags, String desc)\n     {\n         boolean b = x.equals(y);\n \n-        if (!x.equals(y) && !x.unequal(y))  // NaNs involved \n+        if (!x.equals(y) && !x.unequal(y))  // NaNs involved\n             b = (x.toString().equals(y.toString()));\n \n         if (x.equals(field.newDfp(\"0\")))  // distinguish +/- zero\n     public void testAdd()\n     {\n         test(field.newDfp(\"1\").add(field.newDfp(\"1\")),      // Basic tests   1+1 = 2\n-             field.newDfp(\"2\"), \n+             field.newDfp(\"2\"),\n              0, \"Add #1\");\n \n         test(field.newDfp(\"1\").add(field.newDfp(\"-1\")),     // 1 + (-1) = 0\n-             field.newDfp(\"0\"), \n+             field.newDfp(\"0\"),\n              0, \"Add #2\");\n \n         test(field.newDfp(\"-1\").add(field.newDfp(\"1\")),     // (-1) + 1 = 0\n-             field.newDfp(\"0\"), \n+             field.newDfp(\"0\"),\n              0, \"Add #3\");\n \n         test(field.newDfp(\"-1\").add(field.newDfp(\"-1\")),     // (-1) + (-1) = -2\n-             field.newDfp(\"-2\"), \n+             field.newDfp(\"-2\"),\n              0, \"Add #4\");\n \n         // rounding mode is round half even\n \n         test(field.newDfp(\"1\").add(field.newDfp(\"1e-16\")),     // rounding on add\n-             field.newDfp(\"1.0000000000000001\"), \n+             field.newDfp(\"1.0000000000000001\"),\n              0, \"Add #5\");\n \n         test(field.newDfp(\"1\").add(field.newDfp(\"1e-17\")),     // rounding on add\n-             field.newDfp(\"1\"), \n+             field.newDfp(\"1\"),\n              DfpField.FLAG_INEXACT, \"Add #6\");\n \n         test(field.newDfp(\"0.90999999999999999999\").add(field.newDfp(\"0.1\")),     // rounding on add\n-             field.newDfp(\"1.01\"), \n+             field.newDfp(\"1.01\"),\n              DfpField.FLAG_INEXACT, \"Add #7\");\n \n         test(field.newDfp(\".10000000000000005000\").add(field.newDfp(\".9\")),     // rounding on add\n-             field.newDfp(\"1.\"), \n+             field.newDfp(\"1.\"),\n              DfpField.FLAG_INEXACT, \"Add #8\");\n \n         test(field.newDfp(\".10000000000000015000\").add(field.newDfp(\".9\")),     // rounding on add\n-             field.newDfp(\"1.0000000000000002\"), \n+             field.newDfp(\"1.0000000000000002\"),\n              DfpField.FLAG_INEXACT, \"Add #9\");\n \n         test(field.newDfp(\".10000000000000014999\").add(field.newDfp(\".9\")),     // rounding on add\n-             field.newDfp(\"1.0000000000000001\"), \n+             field.newDfp(\"1.0000000000000001\"),\n              DfpField.FLAG_INEXACT, \"Add #10\");\n \n         test(field.newDfp(\".10000000000000015001\").add(field.newDfp(\".9\")),     // rounding on add\n-             field.newDfp(\"1.0000000000000002\"), \n+             field.newDfp(\"1.0000000000000002\"),\n              DfpField.FLAG_INEXACT, \"Add #11\");\n \n         test(field.newDfp(\".11111111111111111111\").add(field.newDfp(\"11.1111111111111111\")), // rounding on add\n-             field.newDfp(\"11.22222222222222222222\"), \n+             field.newDfp(\"11.22222222222222222222\"),\n              DfpField.FLAG_INEXACT, \"Add #12\");\n \n         test(field.newDfp(\".11111111111111111111\").add(field.newDfp(\"1111111111111111.1111\")), // rounding on add\n-             field.newDfp(\"1111111111111111.2222\"), \n+             field.newDfp(\"1111111111111111.2222\"),\n              DfpField.FLAG_INEXACT, \"Add #13\");\n \n         test(field.newDfp(\".11111111111111111111\").add(field.newDfp(\"11111111111111111111\")), // rounding on add\n-             field.newDfp(\"11111111111111111111\"), \n+             field.newDfp(\"11111111111111111111\"),\n              DfpField.FLAG_INEXACT, \"Add #14\");\n \n         test(field.newDfp(\"9.9999999999999999999e131071\").add(field.newDfp(\"-1e131052\")), // overflow on add\n-             field.newDfp(\"9.9999999999999999998e131071\"), \n+             field.newDfp(\"9.9999999999999999998e131071\"),\n              0, \"Add #15\");\n \n         test(field.newDfp(\"9.9999999999999999999e131071\").add(field.newDfp(\"1e131052\")), // overflow on add\n-             pinf, \n+             pinf,\n              DfpField.FLAG_OVERFLOW, \"Add #16\");\n \n         test(field.newDfp(\"-9.9999999999999999999e131071\").add(field.newDfp(\"-1e131052\")), // overflow on add\n-             ninf, \n+             ninf,\n              DfpField.FLAG_OVERFLOW, \"Add #17\");\n \n         test(field.newDfp(\"-9.9999999999999999999e131071\").add(field.newDfp(\"1e131052\")), // overflow on add\n-             field.newDfp(\"-9.9999999999999999998e131071\"), \n+             field.newDfp(\"-9.9999999999999999998e131071\"),\n              0, \"Add #18\");\n \n         test(field.newDfp(\"1e-131072\").add(field.newDfp(\"1e-131072\")), // underflow on add\n-             field.newDfp(\"2e-131072\"), \n+             field.newDfp(\"2e-131072\"),\n              0, \"Add #19\");\n \n         test(field.newDfp(\"1.0000000000000001e-131057\").add(field.newDfp(\"-1e-131057\")), // underflow on add\n-             field.newDfp(\"1e-131073\"), \n+             field.newDfp(\"1e-131073\"),\n              DfpField.FLAG_UNDERFLOW, \"Add #20\");\n \n         test(field.newDfp(\"1.1e-131072\").add(field.newDfp(\"-1e-131072\")), // underflow on add\n-             field.newDfp(\"1e-131073\"), \n+             field.newDfp(\"1e-131073\"),\n              DfpField.FLAG_UNDERFLOW, \"Add #21\");\n \n         test(field.newDfp(\"1.0000000000000001e-131072\").add(field.newDfp(\"-1e-131072\")), // underflow on add\n-             field.newDfp(\"1e-131088\"), \n+             field.newDfp(\"1e-131088\"),\n              DfpField.FLAG_UNDERFLOW, \"Add #22\");\n \n         test(field.newDfp(\"1.0000000000000001e-131078\").add(field.newDfp(\"-1e-131078\")), // underflow on add\n-             field.newDfp(\"0\"), \n+             field.newDfp(\"0\"),\n              DfpField.FLAG_UNDERFLOW, \"Add #23\");\n \n         test(field.newDfp(\"1.0\").add(field.newDfp(\"-1e-20\")), // loss of precision on alignment?\n-             field.newDfp(\"0.99999999999999999999\"), \n+             field.newDfp(\"0.99999999999999999999\"),\n              0, \"Add #23.1\");\n \n         test(field.newDfp(\"-0.99999999999999999999\").add(field.newDfp(\"1\")), // proper normalization?\n-             field.newDfp(\"0.00000000000000000001\"), \n+             field.newDfp(\"0.00000000000000000001\"),\n              0, \"Add #23.2\");\n \n         test(field.newDfp(\"1\").add(field.newDfp(\"0\")), // adding zeros\n-             field.newDfp(\"1\"), \n+             field.newDfp(\"1\"),\n              0, \"Add #24\");\n \n         test(field.newDfp(\"0\").add(field.newDfp(\"0\")), // adding zeros\n-             field.newDfp(\"0\"), \n+             field.newDfp(\"0\"),\n              0, \"Add #25\");\n \n         test(field.newDfp(\"-0\").add(field.newDfp(\"0\")), // adding zeros\n-             field.newDfp(\"0\"), \n+             field.newDfp(\"0\"),\n              0, \"Add #26\");\n \n         test(field.newDfp(\"0\").add(field.newDfp(\"-0\")), // adding zeros\n-             field.newDfp(\"0\"), \n+             field.newDfp(\"0\"),\n              0, \"Add #27\");\n \n         test(field.newDfp(\"-0\").add(field.newDfp(\"-0\")), // adding zeros\n-             field.newDfp(\"-0\"), \n+             field.newDfp(\"-0\"),\n              0, \"Add #28\");\n \n         test(field.newDfp(\"1e-20\").add(field.newDfp(\"0\")), // adding zeros\n-             field.newDfp(\"1e-20\"), \n+             field.newDfp(\"1e-20\"),\n              0, \"Add #29\");\n \n         test(field.newDfp(\"1e-40\").add(field.newDfp(\"0\")), // adding zeros\n-             field.newDfp(\"1e-40\"), \n+             field.newDfp(\"1e-40\"),\n              0, \"Add #30\");\n \n         test(pinf.add(ninf), // adding infinities\n-             nan, \n+             nan,\n              DfpField.FLAG_INVALID, \"Add #31\");\n \n         test(ninf.add(pinf), // adding infinities\n-             nan, \n+             nan,\n              DfpField.FLAG_INVALID, \"Add #32\");\n \n         test(ninf.add(ninf), // adding infinities\n-             ninf, \n+             ninf,\n              0, \"Add #33\");\n \n         test(pinf.add(pinf), // adding infinities\n-             pinf, \n+             pinf,\n              0, \"Add #34\");\n \n         test(pinf.add(field.newDfp(\"0\")), // adding infinities\n-             pinf, \n+             pinf,\n              0, \"Add #35\");\n \n         test(pinf.add(field.newDfp(\"-1e131071\")), // adding infinities\n-             pinf, \n+             pinf,\n              0, \"Add #36\");\n \n         test(pinf.add(field.newDfp(\"1e131071\")), // adding infinities\n-             pinf, \n+             pinf,\n              0, \"Add #37\");\n \n         test(field.newDfp(\"0\").add(pinf), // adding infinities\n-             pinf, \n+             pinf,\n              0, \"Add #38\");\n \n         test(field.newDfp(\"-1e131071\").add(pinf), // adding infinities\n-             pinf, \n+             pinf,\n              0, \"Add #39\");\n \n         test(field.newDfp(\"1e131071\").add(pinf), // adding infinities\n-             pinf, \n+             pinf,\n              0, \"Add #40\");\n \n         test(ninf.add(field.newDfp(\"0\")), // adding infinities\n-             ninf, \n+             ninf,\n              0, \"Add #41\");\n \n         test(ninf.add(field.newDfp(\"-1e131071\")), // adding infinities\n-             ninf, \n+             ninf,\n              0, \"Add #42\");\n \n         test(ninf.add(field.newDfp(\"1e131071\")), // adding infinities\n-             ninf, \n+             ninf,\n              0, \"Add #43\");\n \n         test(field.newDfp(\"0\").add(ninf), // adding infinities\n-             ninf, \n+             ninf,\n              0, \"Add #44\");\n \n         test(field.newDfp(\"-1e131071\").add(ninf), // adding infinities\n-             ninf, \n+             ninf,\n              0, \"Add #45\");\n \n         test(field.newDfp(\"1e131071\").add(ninf), // adding infinities\n-             ninf, \n+             ninf,\n              0, \"Add #46\");\n \n         test(field.newDfp(\"9.9999999999999999999e131071\").add(field.newDfp(\"5e131051\")),  // overflow\n \n         test(field.newDfp(\"-0\").add(field.newDfp(\"-0\")),\n              field.newDfp(\"-0\"),\n-             0, \"Add #56\"); \n+             0, \"Add #56\");\n \n         test(field.newDfp(\"0\").add(field.newDfp(\"-0\")),\n              field.newDfp(\"0\"),\n-             0, \"Add #57\"); \n+             0, \"Add #57\");\n \n         test(field.newDfp(\"-0\").add(field.newDfp(\"0\")),\n              field.newDfp(\"0\"),\n-             0, \"Add #58\"); \n+             0, \"Add #58\");\n \n         test(field.newDfp(\"0\").add(field.newDfp(\"0\")),\n              field.newDfp(\"0\"),\n-             0, \"Add #59\"); \n+             0, \"Add #59\");\n     }\n \n     ////////////////////////////////////////////////////////////////////////////////////////////////////////\n         cmptst(field.newDfp(\"-1\"), field.newDfp(\"0\"), \"equal\", false, 7);        // -1 == 0\n         cmptst(field.newDfp(\"0\"), field.newDfp(\"-1\"), \"equal\", false, 8);        // 0 == -1\n         cmptst(field.newDfp(\"0\"), field.newDfp(\"1e-131072\"), \"equal\", false, 9); // 0 == 1e-131072\n-        // check flags \n+        // check flags\n         if (field.getIEEEFlags() != 0)\n             Assert.fail(\"assersion failed.  compare flags = \"+field.getIEEEFlags());\n \n         cmptst(field.newDfp(\"-1\"), field.newDfp(\"0\"), \"unequal\", true, 7);        // -1 == 0\n         cmptst(field.newDfp(\"0\"), field.newDfp(\"-1\"), \"unequal\", true, 8);        // 0 == -1\n         cmptst(field.newDfp(\"0\"), field.newDfp(\"1e-131072\"), \"unequal\", true, 9); // 0 == 1e-131072\n-        // check flags \n+        // check flags\n         if (field.getIEEEFlags() != 0)\n             Assert.fail(\"assersion failed.  compare flags = \"+field.getIEEEFlags());\n \n         cmptst(field.newDfp(\"-1\"), field.newDfp(\"0\"), \"lessThan\", true, 7);        // -1 < 0\n         cmptst(field.newDfp(\"0\"), field.newDfp(\"-1\"), \"lessThan\", false, 8);        // 0 < -1\n         cmptst(field.newDfp(\"0\"), field.newDfp(\"1e-131072\"), \"lessThan\", true, 9); // 0 < 1e-131072\n-        // check flags \n+        // check flags\n         if (field.getIEEEFlags() != 0)\n             Assert.fail(\"assersion failed.  compare flags = \"+field.getIEEEFlags());\n \n         cmptst(field.newDfp(\"-1\"), field.newDfp(\"0\"), \"greaterThan\", false, 7);        // -1 > 0\n         cmptst(field.newDfp(\"0\"), field.newDfp(\"-1\"), \"greaterThan\", true, 8);        // 0 > -1\n         cmptst(field.newDfp(\"0\"), field.newDfp(\"1e-131072\"), \"greaterThan\", false, 9); // 0 > 1e-131072\n-        // check flags \n+        // check flags\n         if (field.getIEEEFlags() != 0)\n             Assert.fail(\"assersion failed.  compare flags = \"+field.getIEEEFlags());\n \n     public void testMultiply()\n     {\n         test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n-             field.newDfp(\"1\"), \n+             field.newDfp(\"1\"),\n              0, \"Multiply #1\");\n \n         test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n-             field.newDfp(\"1\"), \n+             field.newDfp(\"1\"),\n              0, \"Multiply #2\");\n \n         test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n-             field.newDfp(\"-1\"), \n+             field.newDfp(\"-1\"),\n              0, \"Multiply #3\");\n \n         test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n-             field.newDfp(\"-1\"), \n+             field.newDfp(\"-1\"),\n              0, \"Multiply #4\");\n \n         // basic tests with integers\n         test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n-             field.newDfp(\"6\"), \n+             field.newDfp(\"6\"),\n              0, \"Multiply #5\");\n \n         test(field.newDfp(\"2\").multiply(3),\n-             field.newDfp(\"6\"), \n+             field.newDfp(\"6\"),\n              0, \"Multiply #6\");\n \n         test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n-             field.newDfp(\"-6\"), \n+             field.newDfp(\"-6\"),\n              0, \"Multiply #7\");\n \n         test(field.newDfp(\"-2\").multiply(3),\n-             field.newDfp(\"-6\"), \n+             field.newDfp(\"-6\"),\n              0, \"Multiply #8\");\n \n         test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n-             field.newDfp(\"-6\"), \n+             field.newDfp(\"-6\"),\n              0, \"Multiply #9\");\n \n         test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n-             field.newDfp(\"6\"), \n+             field.newDfp(\"6\"),\n              0, \"Multiply #10\");\n \n         //multiply by zero\n \n         test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n-             field.newDfp(\"-0\"), \n+             field.newDfp(\"-0\"),\n              0, \"Multiply #11\");\n \n         test(field.newDfp(\"-2\").multiply(0),\n-             field.newDfp(\"-0\"), \n+             field.newDfp(\"-0\"),\n              0, \"Multiply #12\");\n \n         test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n-             field.newDfp(\"0\"), \n+             field.newDfp(\"0\"),\n              0, \"Multiply #13\");\n \n         test(field.newDfp(\"2\").multiply(0),\n-             field.newDfp(\"0\"), \n+             field.newDfp(\"0\"),\n              0, \"Multiply #14\");\n \n         test(field.newDfp(\"2\").multiply(pinf),\n \n         test(field.newDfp(\"5e131071\").multiply(2),\n              pinf,\n-             DfpField.FLAG_OVERFLOW, \"Multiply #19\");        \n+             DfpField.FLAG_OVERFLOW, \"Multiply #19\");\n \n         test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n              field.newDfp(\"9.9999999999999950000e131071\"),\n-             0, \"Multiply #20\");        \n+             0, \"Multiply #20\");\n \n         test(field.newDfp(\"-5e131071\").multiply(2),\n              ninf,\n-             DfpField.FLAG_OVERFLOW, \"Multiply #22\");        \n+             DfpField.FLAG_OVERFLOW, \"Multiply #22\");\n \n         test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n              field.newDfp(\"-9.9999999999999950000e131071\"),\n-             0, \"Multiply #23\");        \n+             0, \"Multiply #23\");\n \n         test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n              field.newDfp(\"1e-131078\"),\n     public void testDivide()\n     {\n         test(field.newDfp(\"1\").divide(nan),      // divide by NaN = NaN\n-             nan, \n+             nan,\n              0, \"Divide #1\");\n \n         test(nan.divide(field.newDfp(\"1\")),      // NaN / number = NaN\n-             nan, \n+             nan,\n              0, \"Divide #2\");\n \n         test(pinf.divide(field.newDfp(\"1\")),\n     }\n \n     @Test\n+    public void testReciprocal()\n+    {\n+        test(nan.reciprocal(),\n+             nan,\n+             0, \"Reciprocal #1\");\n+\n+        test(field.newDfp(\"0\").reciprocal(),\n+             pinf,\n+             DfpField.FLAG_DIV_ZERO, \"Reciprocal #2\");\n+\n+        test(field.newDfp(\"-0\").reciprocal(),\n+             ninf,\n+             DfpField.FLAG_DIV_ZERO, \"Reciprocal #3\");\n+\n+        test(field.newDfp(\"3\").reciprocal(),\n+             field.newDfp(\"0.33333333333333333333\"),\n+             DfpField.FLAG_INEXACT, \"Reciprocal #4\");\n+\n+        test(field.newDfp(\"6\").reciprocal(),\n+             field.newDfp(\"0.16666666666666666667\"),\n+             DfpField.FLAG_INEXACT, \"Reciprocal #5\");\n+\n+        test(field.newDfp(\"1\").reciprocal(),\n+             field.newDfp(\"1\"),\n+             0, \"Reciprocal #6\");\n+\n+        test(field.newDfp(\"-1\").reciprocal(),\n+             field.newDfp(\"-1\"),\n+             0, \"Reciprocal #7\");\n+\n+        test(pinf.reciprocal(),\n+             field.newDfp(\"0\"),\n+             0, \"Reciprocal #8\");\n+\n+        test(ninf.reciprocal(),\n+             field.newDfp(\"-0\"),\n+             0, \"Reciprocal #9\");\n+    }\n+\n+    @Test\n     public void testDivideInt()\n     {\n         test(nan.divide(1),      // NaN / number = NaN\n-             nan, \n+             nan,\n              0, \"DivideInt #1\");\n \n         test(pinf.divide(1),\n              field.newDfp(\"-0\"),\n              DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, \"Next After #12\");\n \n-        test(field.newDfp(\"1e-131092\").nextAfter(ninf), \n+        test(field.newDfp(\"1e-131092\").nextAfter(ninf),\n              field.newDfp(\"0\"),\n              DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, \"Next After #13\");\n \n--- a/src/test/java/org/apache/commons/math/util/BigRealTest.java\n+++ b/src/test/java/org/apache/commons/math/util/BigRealTest.java\n  */\n package org.apache.commons.math.util;\n \n-\n import java.math.BigDecimal;\n import java.math.BigInteger;\n import java.math.MathContext;\n \n     @Test\n     public void testConstructor() {\n-        Assert.assertEquals(1.625, new BigReal(new BigDecimal(\"1.625\")).doubleValue(), 1.0e-15);\n-        Assert.assertEquals(-5.0, new BigReal(new BigInteger(\"-5\")).doubleValue(), 1.0e-15);\n-        Assert.assertEquals(-5.0, new BigReal(new BigInteger(\"-5\"), MathContext.DECIMAL64).doubleValue(), 1.0e-15);\n-        Assert.assertEquals(0.125, new BigReal(new BigInteger(\"125\"), 3).doubleValue(), 1.0e-15);\n-        Assert.assertEquals(0.125, new BigReal(new BigInteger(\"125\"), 3, MathContext.DECIMAL64).doubleValue(), 1.0e-15);\n-        Assert.assertEquals(1.625, new BigReal(new char[] { '1', '.', '6', '2', '5' }).doubleValue(), 1.0e-15);\n-        Assert.assertEquals(1.625, new BigReal(new char[] { 'A', 'A', '1', '.', '6', '2', '5', '9' }, 2, 5).doubleValue(), 1.0e-15);\n-        Assert.assertEquals(1.625, new BigReal(new char[] { 'A', 'A', '1', '.', '6', '2', '5', '9' }, 2, 5, MathContext.DECIMAL64).doubleValue(), 1.0e-15);\n-        Assert.assertEquals(1.625, new BigReal(new char[] { '1', '.', '6', '2', '5' }, MathContext.DECIMAL64).doubleValue(), 1.0e-15);\n+        Assert.assertEquals(1.625,\n+                            new BigReal(new BigDecimal(\"1.625\")).doubleValue(),\n+                            1.0e-15);\n+        Assert.assertEquals(-5.0,\n+                            new BigReal(new BigInteger(\"-5\")).doubleValue(),\n+                            1.0e-15);\n+        Assert.assertEquals(-5.0, new BigReal(new BigInteger(\"-5\"),\n+                                              MathContext.DECIMAL64)\n+            .doubleValue(), 1.0e-15);\n+        Assert\n+            .assertEquals(0.125,\n+                          new BigReal(new BigInteger(\"125\"), 3).doubleValue(),\n+                          1.0e-15);\n+        Assert.assertEquals(0.125, new BigReal(new BigInteger(\"125\"), 3,\n+                                               MathContext.DECIMAL64)\n+            .doubleValue(), 1.0e-15);\n+        Assert.assertEquals(1.625, new BigReal(new char[] {\n+            '1', '.', '6', '2', '5'\n+        }).doubleValue(), 1.0e-15);\n+        Assert.assertEquals(1.625, new BigReal(new char[] {\n+            'A', 'A', '1', '.', '6', '2', '5', '9'\n+        }, 2, 5).doubleValue(), 1.0e-15);\n+        Assert.assertEquals(1.625, new BigReal(new char[] {\n+            'A', 'A', '1', '.', '6', '2', '5', '9'\n+        }, 2, 5, MathContext.DECIMAL64).doubleValue(), 1.0e-15);\n+        Assert.assertEquals(1.625, new BigReal(new char[] {\n+            '1', '.', '6', '2', '5'\n+        }, MathContext.DECIMAL64).doubleValue(), 1.0e-15);\n         Assert.assertEquals(1.625, new BigReal(1.625).doubleValue(), 1.0e-15);\n-        Assert.assertEquals(1.625, new BigReal(1.625, MathContext.DECIMAL64).doubleValue(), 1.0e-15);\n+        Assert.assertEquals(1.625, new BigReal(1.625, MathContext.DECIMAL64)\n+            .doubleValue(), 1.0e-15);\n         Assert.assertEquals(-5.0, new BigReal(-5).doubleValue(), 1.0e-15);\n-        Assert.assertEquals(-5.0, new BigReal(-5, MathContext.DECIMAL64).doubleValue(), 1.0e-15);\n+        Assert.assertEquals(-5.0, new BigReal(-5, MathContext.DECIMAL64)\n+            .doubleValue(), 1.0e-15);\n         Assert.assertEquals(-5.0, new BigReal(-5l).doubleValue(), 1.0e-15);\n-        Assert.assertEquals(-5.0, new BigReal(-5l, MathContext.DECIMAL64).doubleValue(), 1.0e-15);\n+        Assert.assertEquals(-5.0, new BigReal(-5l, MathContext.DECIMAL64)\n+            .doubleValue(), 1.0e-15);\n         Assert.assertEquals(1.625, new BigReal(\"1.625\").doubleValue(), 1.0e-15);\n-        Assert.assertEquals(1.625, new BigReal(\"1.625\", MathContext.DECIMAL64).doubleValue(), 1.0e-15);\n+        Assert.assertEquals(1.625, new BigReal(\"1.625\", MathContext.DECIMAL64)\n+            .doubleValue(), 1.0e-15);\n     }\n \n     @Test\n     public void testSubtract() {\n         BigReal a = new BigReal(\"1.2345678\");\n         BigReal b = new BigReal(\"8.7654321\");\n-        Assert.assertEquals( -7.5308643, a.subtract(b).doubleValue(), 1.0e-15);\n+        Assert.assertEquals(-7.5308643, a.subtract(b).doubleValue(), 1.0e-15);\n+    }\n+\n+    @Test\n+    public void testNegate() {\n+        BigReal a = new BigReal(\"1.2345678\");\n+        BigReal zero = new BigReal(\"0.0000000\");\n+        Assert.assertEquals(a.negate().add(a), zero);\n+        Assert.assertEquals(a.add(a.negate()), zero);\n+        Assert.assertEquals(zero, zero.negate());\n     }\n \n     @Test\n         BigReal a = new BigReal(\"1.0000000000\");\n         BigReal b = new BigReal(\"0.0009765625\");\n         Assert.assertEquals(1024.0, a.divide(b).doubleValue(), 1.0e-15);\n+    }\n+\n+    @Test\n+    public void testReciprocal() {\n+        BigReal a = new BigReal(\"1.2345678\");\n+        double eps = FastMath.pow(10., -a.getScale());\n+        BigReal one = new BigReal(\"1.0000000\");\n+        BigReal b = a.reciprocal();\n+        BigReal r = one.subtract(a.multiply(b));\n+        Assert.assertTrue(FastMath.abs(r.doubleValue()) <= eps);\n+        r = one.subtract(b.multiply(a));\n+        Assert.assertTrue(FastMath.abs(r.doubleValue()) <= eps);\n     }\n \n     @Test\n \n     @Test\n     public void testBigDecimalValue() {\n-        BigDecimal pi = new BigDecimal(\"3.1415926535897932384626433832795028841971693993751\");\n+        BigDecimal pi = new BigDecimal(\n+                                       \"3.1415926535897932384626433832795028841971693993751\");\n         Assert.assertEquals(pi, new BigReal(pi).bigDecimalValue());\n-        Assert.assertEquals(new BigDecimal(0.5), new BigReal(1.0 / 2.0).bigDecimalValue());\n+        Assert.assertEquals(new BigDecimal(0.5),\n+                            new BigReal(1.0 / 2.0).bigDecimalValue());\n     }\n \n     @Test\n     @Test\n     public void testSerial() {\n         BigReal[] Reals = {\n-            new BigReal(3.0), BigReal.ONE, BigReal.ZERO,\n-            new BigReal(17), new BigReal(FastMath.PI),\n-            new BigReal(-2.5)\n+            new BigReal(3.0), BigReal.ONE, BigReal.ZERO, new BigReal(17),\n+            new BigReal(FastMath.PI), new BigReal(-2.5)\n         };\n         for (BigReal Real : Reals) {\n             Assert.assertEquals(Real, TestUtils.serializeAndRecover(Real));\n         }\n     }\n-\n }", "timestamp": 1318047660, "metainfo": ""}