{"sha": "88537f8e7ed7a173d1c99f107e4dc41727db1185", "log": "MATH-505 TestUtils is thread-hostile  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/stat/inference/TestUtils.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/TestUtils.java\n public class TestUtils  {\n \n     /** Singleton TTest instance using default implementation. */\n-    private static TTest tTest = new TTestImpl();\n+    private static final TTest T_TEST = new TTestImpl();\n \n     /** Singleton ChiSquareTest instance using default implementation. */\n-    private static ChiSquareTest chiSquareTest =\n+    private static final ChiSquareTest CHI_SQUARE_TEST = new ChiSquareTestImpl();\n+\n+    /** Singleton ChiSquareTest instance using default implementation. */\n+    private static final UnknownDistributionChiSquareTest UNKNOWN_DISTRIBUTION_CHI_SQUARE_TEST =\n         new ChiSquareTestImpl();\n \n-    /** Singleton ChiSquareTest instance using default implementation. */\n-    private static UnknownDistributionChiSquareTest unknownDistributionChiSquareTest =\n-        new ChiSquareTestImpl();\n-\n     /** Singleton OneWayAnova instance using default implementation. */\n-    private static OneWayAnova oneWayAnova =\n-        new OneWayAnovaImpl();\n+    private static final OneWayAnova ONE_WAY_ANANOVA = new OneWayAnovaImpl();\n \n     /**\n      * Prevent instantiation.\n      */\n-    protected TestUtils() {\n+    private TestUtils() {\n         super();\n     }\n \n-    /**\n-     * Set the (singleton) TTest instance.\n-     *\n-     * @param chiSquareTest the new instance to use\n-     * @since 1.2\n-     */\n-    public static void setChiSquareTest(TTest chiSquareTest) {\n-        TestUtils.tTest = chiSquareTest;\n-    }\n-\n-    /**\n-     * Return a (singleton) TTest instance.  Does not create a new instance.\n-     *\n-     * @return a TTest instance\n-     */\n-    public static TTest getTTest() {\n-        return tTest;\n-    }\n-\n-    /**\n-     * Set the (singleton) ChiSquareTest instance.\n-     *\n-     * @param chiSquareTest the new instance to use\n-     * @since 1.2\n-     */\n-    public static void setChiSquareTest(ChiSquareTest chiSquareTest) {\n-        TestUtils.chiSquareTest = chiSquareTest;\n-    }\n-\n-    /**\n-     * Return a (singleton) ChiSquareTest instance.  Does not create a new instance.\n-     *\n-     * @return a ChiSquareTest instance\n-     */\n-    public static ChiSquareTest getChiSquareTest() {\n-        return chiSquareTest;\n-    }\n-\n-    /**\n-     * Set the (singleton) UnknownDistributionChiSquareTest instance.\n-     *\n-     * @param unknownDistributionChiSquareTest the new instance to use\n-     * @since 1.2\n-     */\n-    public static void setUnknownDistributionChiSquareTest(UnknownDistributionChiSquareTest unknownDistributionChiSquareTest) {\n-        TestUtils.unknownDistributionChiSquareTest = unknownDistributionChiSquareTest;\n-    }\n-\n-    /**\n-     * Return a (singleton) UnknownDistributionChiSquareTest instance.  Does not create a new instance.\n-     *\n-     * @return a UnknownDistributionChiSquareTest instance\n-     */\n-    public static UnknownDistributionChiSquareTest getUnknownDistributionChiSquareTest() {\n-        return unknownDistributionChiSquareTest;\n-    }\n-\n-    /**\n-     * Set the (singleton) OneWayAnova instance\n-     *\n-     * @param oneWayAnova the new instance to use\n-     * @since 1.2\n-     */\n-    public static void setOneWayAnova(OneWayAnova oneWayAnova) {\n-        TestUtils.oneWayAnova = oneWayAnova;\n-    }\n-\n-    /**\n-     * Return a (singleton) OneWayAnova instance.  Does not create a new instance.\n-     *\n-     * @return a OneWayAnova instance\n-     * @since 1.2\n-     */\n-    public static OneWayAnova getOneWayAnova() {\n-        return oneWayAnova;\n-    }\n-\n-\n     // CHECKSTYLE: stop JavadocMethodCheck\n \n     /**\n      */\n     public static double homoscedasticT(double[] sample1, double[] sample2)\n         throws IllegalArgumentException {\n-        return tTest.homoscedasticT(sample1, sample2);\n+        return T_TEST.homoscedasticT(sample1, sample2);\n     }\n \n     /**\n     public static double homoscedasticT(StatisticalSummary sampleStats1,\n         StatisticalSummary sampleStats2)\n         throws IllegalArgumentException {\n-        return tTest.homoscedasticT(sampleStats1, sampleStats2);\n+        return T_TEST.homoscedasticT(sampleStats1, sampleStats2);\n     }\n \n     /**\n     public static boolean homoscedasticTTest(double[] sample1, double[] sample2,\n             double alpha)\n         throws IllegalArgumentException, MathException {\n-        return tTest. homoscedasticTTest(sample1, sample2, alpha);\n+        return T_TEST. homoscedasticTTest(sample1, sample2, alpha);\n     }\n \n     /**\n      */\n     public static double homoscedasticTTest(double[] sample1, double[] sample2)\n         throws IllegalArgumentException, MathException {\n-        return tTest.homoscedasticTTest(sample1, sample2);\n+        return T_TEST.homoscedasticTTest(sample1, sample2);\n     }\n \n     /**\n     public static double homoscedasticTTest(StatisticalSummary sampleStats1,\n         StatisticalSummary sampleStats2)\n         throws IllegalArgumentException, MathException {\n-        return tTest.homoscedasticTTest(sampleStats1, sampleStats2);\n+        return T_TEST.homoscedasticTTest(sampleStats1, sampleStats2);\n     }\n \n     /**\n      */\n     public static double pairedT(double[] sample1, double[] sample2)\n         throws IllegalArgumentException, MathException {\n-        return tTest.pairedT(sample1, sample2);\n+        return T_TEST.pairedT(sample1, sample2);\n     }\n \n     /**\n     public static boolean pairedTTest(double[] sample1, double[] sample2,\n         double alpha)\n         throws IllegalArgumentException, MathException {\n-        return tTest.pairedTTest(sample1, sample2, alpha);\n+        return T_TEST.pairedTTest(sample1, sample2, alpha);\n     }\n \n     /**\n      */\n     public static double pairedTTest(double[] sample1, double[] sample2)\n         throws IllegalArgumentException, MathException {\n-        return tTest.pairedTTest(sample1, sample2);\n+        return T_TEST.pairedTTest(sample1, sample2);\n     }\n \n     /**\n      */\n     public static double t(double mu, double[] observed)\n         throws IllegalArgumentException {\n-        return tTest.t(mu, observed);\n+        return T_TEST.t(mu, observed);\n     }\n \n     /**\n      */\n     public static double t(double mu, StatisticalSummary sampleStats)\n         throws IllegalArgumentException {\n-        return tTest.t(mu, sampleStats);\n+        return T_TEST.t(mu, sampleStats);\n     }\n \n     /**\n      */\n     public static double t(double[] sample1, double[] sample2)\n         throws IllegalArgumentException {\n-        return tTest.t(sample1, sample2);\n+        return T_TEST.t(sample1, sample2);\n     }\n \n     /**\n     public static double t(StatisticalSummary sampleStats1,\n             StatisticalSummary sampleStats2)\n         throws IllegalArgumentException {\n-        return tTest.t(sampleStats1, sampleStats2);\n+        return T_TEST.t(sampleStats1, sampleStats2);\n     }\n \n     /**\n      */\n     public static boolean tTest(double mu, double[] sample, double alpha)\n         throws IllegalArgumentException, MathException {\n-        return tTest.tTest(mu, sample, alpha);\n+        return T_TEST.tTest(mu, sample, alpha);\n     }\n \n     /**\n      */\n     public static double tTest(double mu, double[] sample)\n         throws IllegalArgumentException, MathException {\n-        return tTest.tTest(mu, sample);\n+        return T_TEST.tTest(mu, sample);\n     }\n \n     /**\n     public static boolean tTest(double mu, StatisticalSummary sampleStats,\n         double alpha)\n         throws IllegalArgumentException, MathException {\n-        return tTest. tTest(mu, sampleStats, alpha);\n+        return T_TEST. tTest(mu, sampleStats, alpha);\n     }\n \n     /**\n      */\n     public static double tTest(double mu, StatisticalSummary sampleStats)\n         throws IllegalArgumentException, MathException {\n-        return tTest.tTest(mu, sampleStats);\n+        return T_TEST.tTest(mu, sampleStats);\n     }\n \n     /**\n      */\n     public static boolean tTest(double[] sample1, double[] sample2, double alpha)\n         throws IllegalArgumentException, MathException {\n-        return tTest.tTest(sample1, sample2, alpha);\n+        return T_TEST.tTest(sample1, sample2, alpha);\n     }\n \n     /**\n      */\n     public static double tTest(double[] sample1, double[] sample2)\n         throws IllegalArgumentException, MathException {\n-        return tTest.tTest(sample1, sample2);\n+        return T_TEST.tTest(sample1, sample2);\n     }\n \n     /**\n     public static boolean tTest(StatisticalSummary sampleStats1,\n         StatisticalSummary sampleStats2, double alpha)\n         throws IllegalArgumentException, MathException {\n-        return tTest. tTest(sampleStats1, sampleStats2, alpha);\n+        return T_TEST. tTest(sampleStats1, sampleStats2, alpha);\n     }\n \n     /**\n     public static double tTest(StatisticalSummary sampleStats1,\n         StatisticalSummary sampleStats2)\n         throws IllegalArgumentException, MathException {\n-        return tTest.tTest(sampleStats1, sampleStats2);\n+        return T_TEST.tTest(sampleStats1, sampleStats2);\n     }\n \n     /**\n      */\n     public static double chiSquare(double[] expected, long[] observed)\n         throws IllegalArgumentException {\n-        return chiSquareTest.chiSquare(expected, observed);\n+        return CHI_SQUARE_TEST.chiSquare(expected, observed);\n     }\n \n     /**\n      */\n     public static double chiSquare(long[][] counts)\n         throws IllegalArgumentException {\n-        return chiSquareTest.chiSquare(counts);\n+        return CHI_SQUARE_TEST.chiSquare(counts);\n     }\n \n     /**\n     public static boolean chiSquareTest(double[] expected, long[] observed,\n         double alpha)\n         throws IllegalArgumentException, MathException {\n-        return chiSquareTest.chiSquareTest(expected, observed, alpha);\n+        return CHI_SQUARE_TEST.chiSquareTest(expected, observed, alpha);\n     }\n \n     /**\n      */\n     public static double chiSquareTest(double[] expected, long[] observed)\n         throws IllegalArgumentException, MathException {\n-        return chiSquareTest.chiSquareTest(expected, observed);\n+        return CHI_SQUARE_TEST.chiSquareTest(expected, observed);\n     }\n \n     /**\n      */\n     public static boolean chiSquareTest(long[][] counts, double alpha)\n         throws IllegalArgumentException, MathException {\n-        return chiSquareTest. chiSquareTest(counts, alpha);\n+        return CHI_SQUARE_TEST. chiSquareTest(counts, alpha);\n     }\n \n     /**\n      */\n     public static double chiSquareTest(long[][] counts)\n         throws IllegalArgumentException, MathException {\n-        return chiSquareTest. chiSquareTest(counts);\n+        return CHI_SQUARE_TEST.chiSquareTest(counts);\n     }\n \n     /**\n      */\n     public static double chiSquareDataSetsComparison(long[] observed1, long[] observed2)\n         throws IllegalArgumentException {\n-        return unknownDistributionChiSquareTest.chiSquareDataSetsComparison(observed1, observed2);\n+        return UNKNOWN_DISTRIBUTION_CHI_SQUARE_TEST.chiSquareDataSetsComparison(observed1, observed2);\n     }\n \n     /**\n      */\n     public static double chiSquareTestDataSetsComparison(long[] observed1, long[] observed2)\n         throws IllegalArgumentException, MathException {\n-        return unknownDistributionChiSquareTest.chiSquareTestDataSetsComparison(observed1, observed2);\n+        return UNKNOWN_DISTRIBUTION_CHI_SQUARE_TEST.chiSquareTestDataSetsComparison(observed1, observed2);\n     }\n \n \n     public static boolean chiSquareTestDataSetsComparison(long[] observed1, long[] observed2,\n         double alpha)\n         throws IllegalArgumentException, MathException {\n-        return unknownDistributionChiSquareTest.chiSquareTestDataSetsComparison(observed1, observed2, alpha);\n+        return UNKNOWN_DISTRIBUTION_CHI_SQUARE_TEST.chiSquareTestDataSetsComparison(observed1, observed2, alpha);\n     }\n \n     /**\n      */\n     public static double oneWayAnovaFValue(Collection<double[]> categoryData)\n     throws IllegalArgumentException, MathException {\n-        return oneWayAnova.anovaFValue(categoryData);\n+        return ONE_WAY_ANANOVA.anovaFValue(categoryData);\n     }\n \n     /**\n      */\n     public static double oneWayAnovaPValue(Collection<double[]> categoryData)\n     throws IllegalArgumentException, MathException {\n-        return oneWayAnova.anovaPValue(categoryData);\n+        return ONE_WAY_ANANOVA.anovaPValue(categoryData);\n     }\n \n     /**\n      */\n     public static boolean oneWayAnovaTest(Collection<double[]> categoryData, double alpha)\n     throws IllegalArgumentException, MathException {\n-        return oneWayAnova.anovaTest(categoryData, alpha);\n+        return ONE_WAY_ANANOVA.anovaTest(categoryData, alpha);\n     }\n \n     // CHECKSTYLE: resume JavadocMethodCheck", "timestamp": 1296585697, "metainfo": ""}