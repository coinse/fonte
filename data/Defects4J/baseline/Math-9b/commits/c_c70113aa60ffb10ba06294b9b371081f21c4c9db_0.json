{"sha": "c70113aa60ffb10ba06294b9b371081f21c4c9db", "log": "Moved BeanTransformer classes to experimental directory. Partially addresses PR# 32538 (JDK 1.4 dependencies).   ", "commit": "\n--- /dev/null\n+++ b/src/experimental/org/apache/commons/math/util/BeanTransformer.java\n+/*\n+ * Copyright 2003-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.util;\n+\n+import java.beans.Expression;\n+import java.lang.reflect.InvocationTargetException;\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ * Uses PropertyUtils to map a Bean getter to a double value.\n+ * @version $Revision: 1.3 $ $Date: 2004/12/06 05:40:48 $\n+ */\n+public class BeanTransformer implements NumberTransformer {\n+\n+    /**\n+     * The propertyName for this Transformer\n+     */\n+    private String propertyName = null;\n+    \n+    private String propertyGetter = null;\n+\n+    /**\n+     * Create a BeanTransformer\n+     */\n+    public BeanTransformer() {\n+        super();\n+    }\n+\n+    /**\n+     * Create a BeanTransformer with a specific PropertyName.\n+     * @param property The property.\n+     */\n+    public BeanTransformer(final String property) {\n+        super();\n+        setPropertyName(property);\n+    }\n+\n+    /**\n+     * Get the property String\n+     * @return the Property Name String\n+     */\n+    public String getPropertyName() {\n+        return propertyName;\n+    }\n+\n+    /**\n+     * Set the propertyString\n+     * @param string The string to set the property to.\n+     */\n+    public void setPropertyName(final String string) {\n+        this.propertyName = string;\n+        this.propertyGetter = \"get\" + string.substring(0,1).toUpperCase() + string.substring(1);\n+    }\n+\n+    \n+    /**\n+     * @see org.apache.commons.math.util.NumberTransformer#transform(java.lang.Object)\n+     */\n+    public double transform(final Object o) throws MathException {\n+        Expression expr = new Expression(o, propertyGetter, new Object[0]);\n+        Object result;\n+        try {\n+            expr.execute();\n+            result = expr.getValue();\n+        } catch (IllegalAccessException e) {\n+\t\t\tthrow new MathException(\"IllegalAccessException in Transformation: \" + e.getMessage(), e);\n+        } catch (InvocationTargetException e) {\n+\t\t\tthrow new MathException(\"InvocationTargetException in Transformation: \" + e.getMessage(), e);\n+        } catch (NoSuchMethodException e) {\n+\t\t\tthrow new MathException(\"NoSuchMethodException in Transformation: \" + e.getMessage(), e);\n+        } catch (ClassCastException e) {\n+            throw new MathException(\"ClassCastException in Transformation: \" + e.getMessage(), e);\n+        } catch (Exception e) {\n+            throw new MathException(\"Exception in Transformation: \" + e.getMessage(), e);\n+        }\n+        \n+        return ((Number) result).doubleValue();\n+    }\n+}\n--- /dev/null\n+++ b/src/experimental/org/apache/commons/math/util/BeanTransformerTest.java\n+/*\n+ * Copyright 2003-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.util;\n+\n+import org.apache.commons.math.MathException;\n+import org.apache.commons.math.TestUtils;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.3 $ $Date: 2004/12/06 05:40:48 $\n+ */\n+public class BeanTransformerTest extends TestCase {\n+    \n+    /**\n+     *\n+     */\n+    public void testConstructor(){\n+        BeanTransformer b = new BeanTransformer();\n+        assertNull(b.getPropertyName());\n+    }\n+    \n+    /**\n+     *\n+     */\n+    public void testConstructorString(){\n+        String name = \"property\";\n+        BeanTransformer b = new BeanTransformer(name);\n+        assertEquals(name, b.getPropertyName());\n+    }\n+    \n+    /**\n+     *\n+     */\n+    public void testSetPropertyName(){\n+        String name = \"property\";\n+        BeanTransformer b = new BeanTransformer();\n+        b.setPropertyName(name);\n+        assertEquals(name, b.getPropertyName());\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testTransformNoSuchMethod(){\n+        BeanTransformer b = new BeanTransformer(\"z\");\n+        TestBean target = new TestBean();\n+\t\ttry {\n+\t\t    b.transform(target);\n+\t\t\tfail(\"Expecting MathException\");\n+\t\t} catch (MathException e) {\n+\t\t\t// expected\n+\t\t}\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testTransform() throws Exception {\n+        BeanTransformer b = new BeanTransformer(\"x\");\n+        TestBean target = new TestBean();\n+\t\tdouble value = Double.NaN;\n+\t\tvalue = b.transform(target);\n+\t\tTestUtils.assertEquals(1.0, value, 1.0e-2);\n+    }\n+    \n+    /**\n+     */\n+    public void testTransformInvalidType() throws Exception {\n+        BeanTransformer b = new BeanTransformer(\"y\");\n+        TestBean target = new TestBean();\n+        try {\n+\t\t\tb.transform(target);\n+            fail(\"Expecting ClassCastException\");\n+        } catch(ClassCastException ex){\n+            // success\n+        }\n+    }\n+}", "timestamp": 1102311648, "metainfo": ""}