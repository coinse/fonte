{"sha": "a727ba2feea1ac3cb8d2e6c0df97e8b41b219c7a", "log": "MATH-690 Removed \"sign(float)\" and \"sign(double)\" from \"MathUtils\"; replaced uses by calls to \"signum\" in \"FastMath\".   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java\n package org.apache.commons.math.analysis.solvers;\n \n import org.apache.commons.math.util.FastMath;\n-import org.apache.commons.math.util.MathUtils;\n \n /**\n  * This class implements the <a href=\"http://mathworld.wolfram.com/MullersMethod.html\">\n             } else {\n                 double xm = 0.5 * (x0 + x2);\n                 double ym = computeObjectiveValue(xm);\n-                if (MathUtils.sign(y0) + MathUtils.sign(ym) == 0.0) {\n+                if (FastMath.signum(y0) + FastMath.signum(ym) == 0.0) {\n                     x2 = xm; y2 = ym;\n                 } else {\n                     x0 = xm; y0 = ym;\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java\n package org.apache.commons.math.analysis.solvers;\n \n import org.apache.commons.math.util.FastMath;\n-import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Implements the <a href=\"http://mathworld.wolfram.com/RiddersMethod.html\">\n                 return x3;\n             }\n             final double delta = 1 - (y1 * y2) / (y3 * y3);  // delta > 1 due to bracketing\n-            final double correction = (MathUtils.sign(y2) * MathUtils.sign(y3)) *\n+            final double correction = (FastMath.signum(y2) * FastMath.signum(y3)) *\n                                       (x3 - x1) / FastMath.sqrt(delta);\n             final double x = x3 - correction;                // correction != 0\n             final double y = computeObjectiveValue(x);\n             // prepare the new interval for next iteration\n             // Ridders' method guarantees x1 < x < x2\n             if (correction > 0.0) {             // x1 < x < x3\n-                if (MathUtils.sign(y1) + MathUtils.sign(y) == 0.0) {\n+                if (FastMath.signum(y1) + FastMath.signum(y) == 0.0) {\n                     x2 = x;\n                     y2 = y;\n                 } else {\n                     y2 = y3;\n                 }\n             } else {                            // x3 < x < x2\n-                if (MathUtils.sign(y2) + MathUtils.sign(y) == 0.0) {\n+                if (FastMath.signum(y2) + FastMath.signum(y) == 0.0) {\n                     x1 = x;\n                     y1 = y;\n                 } else {\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n \n     /**\n      * Returns the <a href=\"http://mathworld.wolfram.com/Sign.html\"> sign</a>\n-     * for double precision {@code x}.\n-     * <p>\n-     * For a double value {@code x}, this method returns\n-     * {@code +1.0} if {@code x > 0}, {@code 0.0} if\n-     * {@code x = 0.0}, and {@code -1.0} if {@code x < 0}.\n-     * Returns {@code NaN} if {@code x} is {@code NaN}.</p>\n-     *\n-     * @param x the value, a double\n-     * @return +1.0, 0.0, or -1.0, depending on the sign of x\n-     */\n-    public static double sign(final double x) {\n-        if (Double.isNaN(x)) {\n-            return Double.NaN;\n-        }\n-        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;\n-    }\n-\n-    /**\n-     * Returns the <a href=\"http://mathworld.wolfram.com/Sign.html\"> sign</a>\n-     * for float value {@code x}.\n-     * <p>\n-     * For a float value x, this method returns +1.0F if x > 0, 0.0F if x =\n-     * 0.0F, and -1.0F if x < 0. Returns {@code NaN} if {@code x}\n-     * is {@code NaN}.</p>\n-     *\n-     * @param x the value, a float\n-     * @return +1.0F, 0.0F, or -1.0F, depending on the sign of x\n-     */\n-    public static float sign(final float x) {\n-        if (Float.isNaN(x)) {\n-            return Float.NaN;\n-        }\n-        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;\n-    }\n-\n-    /**\n-     * Returns the <a href=\"http://mathworld.wolfram.com/Sign.html\"> sign</a>\n      * for int value {@code x}.\n      * <p>\n      * For an int value x, this method returns +1 if x > 0, 0 if x = 0, and -1\n--- a/src/test/java/org/apache/commons/math/util/FastMathTest.java\n+++ b/src/test/java/org/apache/commons/math/util/FastMathTest.java\n import org.apache.commons.math.dfp.DfpMath;\n import org.apache.commons.math.random.MersenneTwister;\n import org.apache.commons.math.random.RandomGenerator;\n+import org.apache.commons.math.TestUtils;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Ignore;\n         compareClassMethods( FastMath.class, StrictMath.class);\n     }\n \n+    @Test\n+    public void testSignumDouble() {\n+        final double delta = 0.0;\n+        Assert.assertEquals(1.0, FastMath.signum(2.0), delta);\n+        Assert.assertEquals(0.0, FastMath.signum(0.0), delta);\n+        Assert.assertEquals(-1.0, FastMath.signum(-2.0), delta);\n+        TestUtils.assertSame(-0. / 0., FastMath.signum(Double.NaN));\n+    }\n+\n+    @Test\n+    public void testSignumFloat() {\n+        final float delta = 0.0F;\n+        Assert.assertEquals(1.0F, FastMath.signum(2.0F), delta);\n+        Assert.assertEquals(0.0F, FastMath.signum(0.0F), delta);\n+        Assert.assertEquals(-1.0F, FastMath.signum(-2.0F), delta);\n+        TestUtils.assertSame(Float.NaN, FastMath.signum(Float.NaN));\n+    }\n }\n--- a/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n     }\n \n     @Test\n-    public void testSignDouble() {\n-        double delta = 0.0;\n-        Assert.assertEquals(1.0, MathUtils.sign(2.0), delta);\n-        Assert.assertEquals(0.0, MathUtils.sign(0.0), delta);\n-        Assert.assertEquals(-1.0, MathUtils.sign(-2.0), delta);\n-        TestUtils.assertSame(-0. / 0., MathUtils.sign(Double.NaN));\n-    }\n-\n-    @Test\n-    public void testSignFloat() {\n-        float delta = 0.0F;\n-        Assert.assertEquals(1.0F, MathUtils.sign(2.0F), delta);\n-        Assert.assertEquals(0.0F, MathUtils.sign(0.0F), delta);\n-        Assert.assertEquals(-1.0F, MathUtils.sign(-2.0F), delta);\n-        TestUtils.assertSame(Float.NaN, MathUtils.sign(Float.NaN));\n-    }\n-\n-    @Test\n     public void testSignInt() {\n         Assert.assertEquals(1, MathUtils.sign(2));\n         Assert.assertEquals(0, MathUtils.sign(0));", "timestamp": 1318544464, "metainfo": ""}