{"sha": "d1c0554a68e8deed374dd561df13ff51b03e6e79", "log": "Changed deprecated MathRuntimeException in package stat.correlation JIRA: MATH-459  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\n+++ b/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\n  */\n package org.apache.commons.math.stat.correlation;\n \n-import org.apache.commons.math.MathException;\n-import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.distribution.TDistribution;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.linear.RealMatrix;\n      * <i>significance</i> of the corresponding correlation coefficients.</p>\n      *\n      * @return matrix of p-values\n-     * @throws MathException if an error occurs estimating probabilities\n-     */\n-    public RealMatrix getCorrelationPValues() throws MathException {\n+     * @throws org.apache.commons.math.exception.MaxCountExceededException\n+     * if an error occurs estimating probabilities\n+     */\n+    public RealMatrix getCorrelationPValues() {\n         TDistribution tDistribution = new TDistribution(nObs - 2);\n         int nVars = correlationMatrix.getColumnDimension();\n         double[][] out = new double[nVars][nVars];\n      * @param xArray first data array\n      * @param yArray second data array\n      * @return Returns Pearson's correlation coefficient for the two arrays\n-     * @throws  IllegalArgumentException if the arrays lengths do not match or\n-     * there is insufficient data\n-     */\n-    public double correlation(final double[] xArray, final double[] yArray) throws IllegalArgumentException {\n+     * @throws DimensionMismatchException if the arrays lengths do not match\n+     * @throws MathIllegalArgumentException if there is insufficient data\n+     */\n+    public double correlation(final double[] xArray, final double[] yArray) {\n         SimpleRegression regression = new SimpleRegression();\n         if (xArray.length != yArray.length) {\n             throw new DimensionMismatchException(xArray.length, yArray.length);\n         } else if (xArray.length < 2) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  LocalizedFormats.INSUFFICIENT_DIMENSION, xArray.length, 2);\n+            throw new MathIllegalArgumentException(LocalizedFormats.INSUFFICIENT_DIMENSION,\n+                                                   xArray.length, 2);\n         } else {\n             for(int i=0; i<xArray.length; i++) {\n                 regression.addData(xArray[i], yArray[i]);\n      * two columns and two rows\n      *\n      * @param matrix matrix to check for sufficiency\n+     * @throws MathIllegalArgumentException if there is insufficient data\n      */\n     private void checkSufficientData(final RealMatrix matrix) {\n         int nRows = matrix.getRowDimension();\n         int nCols = matrix.getColumnDimension();\n         if (nRows < 2 || nCols < 2) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    LocalizedFormats.INSUFFICIENT_ROWS_AND_COLUMNS,\n-                    nRows, nCols);\n+            throw new MathIllegalArgumentException(LocalizedFormats.INSUFFICIENT_ROWS_AND_COLUMNS,\n+                                                   nRows, nCols);\n         }\n     }\n }\n--- a/src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java\n+++ b/src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java\n \n package org.apache.commons.math.stat.correlation;\n \n-import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.linear.BlockRealMatrix;\n import org.apache.commons.math.linear.RealMatrix;\n     /**\n      * Computes the Spearman's rank correlation coefficient between the two arrays.\n      *\n-     * </p>Throws IllegalArgumentException if the arrays do not have the same length\n-     * or their common length is less than 2</p>\n-     *\n      * @param xArray first data array\n      * @param yArray second data array\n      * @return Returns Spearman's rank correlation coefficient for the two arrays\n-     * @throws  IllegalArgumentException if the arrays lengths do not match or\n-     * there is insufficient data\n+     * @throws DimensionMismatchException if the arrays lengths do not match\n+     * @throws MathIllegalArgumentException if the array length is less than 2\n      */\n-    public double correlation(final double[] xArray, final double[] yArray)\n-    throws IllegalArgumentException {\n+    public double correlation(final double[] xArray, final double[] yArray) {\n         if (xArray.length != yArray.length) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, xArray.length, yArray.length);\n+            throw new DimensionMismatchException(xArray.length, yArray.length);\n         } else if (xArray.length < 2) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  LocalizedFormats.INSUFFICIENT_DIMENSION, xArray.length, 2);\n+            throw new MathIllegalArgumentException(LocalizedFormats.INSUFFICIENT_DIMENSION,\n+                                                   xArray.length, 2);\n         } else {\n             return new PearsonsCorrelation().correlation(rankingAlgorithm.rank(xArray),\n                     rankingAlgorithm.rank(yArray));", "timestamp": 1328213796, "metainfo": ""}