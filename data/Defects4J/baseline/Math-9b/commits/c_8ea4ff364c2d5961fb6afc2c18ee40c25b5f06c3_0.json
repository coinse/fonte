{"sha": "8ea4ff364c2d5961fb6afc2c18ee40c25b5f06c3", "log": "removed support for non-zero default values in OpenMapRealVector JIRA: MATH-312  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n     /** Dimension of the vector. */\n     private final int virtualSize;\n \n-    /** Negative tolerance for having a value considered zero. */\n-    private double minusEpsilon;\n-\n-    /** Positive tolerance for having a value considered zero. */\n-    private double plusEpsilon;\n+    /** Tolerance for having a value considered zero. */\n+    private double epsilon;\n \n     /**\n      * Build a 0-length vector.\n      * into this vector.</p>\n      */\n     public OpenMapRealVector() {\n-        this(0, DEFAULT_ZERO_TOLERANCE, 0);\n+        this(0, DEFAULT_ZERO_TOLERANCE);\n     }\n \n     /**\n      * @param dimension size of the vector\n      */\n     public OpenMapRealVector(int dimension) {\n-        this(dimension, DEFAULT_ZERO_TOLERANCE, 0);\n+        this(dimension, DEFAULT_ZERO_TOLERANCE);\n     }\n \n     /**\n      * @param epsilon The tolerance for having a value considered zero\n      * @param defaultValue value for non-specified entries\n      */\n-    public OpenMapRealVector(int dimension, double epsilon, double defaultValue) {\n+    public OpenMapRealVector(int dimension, double epsilon) {\n         virtualSize = dimension;\n-        entries = new OpenIntToDoubleHashMap(defaultValue);\n-        setDefault(defaultValue, epsilon);\n+        entries = new OpenIntToDoubleHashMap(0.0);\n+        this.epsilon = epsilon;\n     }\n \n     /**\n     protected OpenMapRealVector(OpenMapRealVector v, int resize) {\n         virtualSize = v.getDimension() + resize;\n         entries = new OpenIntToDoubleHashMap(v.entries);\n-        minusEpsilon = v.minusEpsilon;\n-        plusEpsilon = v.plusEpsilon;\n+        epsilon = v.epsilon;\n     }\n \n     /**\n      * @param dimension The size of the vector\n      * @param expectedSize The expected number of non-zero entries\n      * @param epsilon The tolerance for having a value considered zero\n-     * @param defaultValue value for non-specified entries\n-     */\n-    public OpenMapRealVector(int dimension, int expectedSize, double epsilon, double defaultValue) {\n+     */\n+    public OpenMapRealVector(int dimension, int expectedSize, double epsilon) {\n         virtualSize = dimension;\n-        entries = new OpenIntToDoubleHashMap(expectedSize, defaultValue);\n-        setDefault(defaultValue, epsilon);\n+        entries = new OpenIntToDoubleHashMap(expectedSize, 0.0);\n+        this.epsilon = epsilon;\n     }\n \n     /**\n     public OpenMapRealVector(double[] values, double epsilon) {\n         virtualSize = values.length;\n         entries = new OpenIntToDoubleHashMap(0.0);\n-        setDefault(0, epsilon);\n+        this.epsilon = epsilon;\n         for (int key = 0; key < values.length; key++) {\n             double value = values[key];\n             if (!isDefaultValue(value)) {\n      * @param values The set of values to create from\n      */\n     public OpenMapRealVector(Double[] values) {\n-        this(values, DEFAULT_ZERO_TOLERANCE, 0);\n+        this(values, DEFAULT_ZERO_TOLERANCE);\n     }\n \n     /**\n      * Only non-zero entries will be stored\n      * @param values The set of values to create from\n      * @param epsilon The tolerance for having a value considered zero\n-     * @param defaultValue value for non-specified entries\n-     */\n-    public OpenMapRealVector(Double[] values, double epsilon, double defaultValue) {\n+     */\n+    public OpenMapRealVector(Double[] values, double epsilon) {\n         virtualSize = values.length;\n-        entries = new OpenIntToDoubleHashMap(defaultValue);\n-        setDefault(defaultValue, epsilon);\n+        entries = new OpenIntToDoubleHashMap(0.0);\n+        this.epsilon = epsilon;\n         for (int key = 0; key < values.length; key++) {\n             double value = values[key].doubleValue();\n             if (!isDefaultValue(value)) {\n     public OpenMapRealVector(OpenMapRealVector v) {\n         virtualSize = v.getDimension();\n         entries = new OpenIntToDoubleHashMap(v.getEntries());\n-        plusEpsilon = v.plusEpsilon;\n-        minusEpsilon = v.minusEpsilon;\n+        epsilon = v.epsilon;\n     }\n \n     /**\n     public OpenMapRealVector(RealVector v) {\n         virtualSize = v.getDimension();\n         entries = new OpenIntToDoubleHashMap(0.0);\n-        setDefault(0, DEFAULT_ZERO_TOLERANCE);\n+        epsilon = DEFAULT_ZERO_TOLERANCE;\n         for (int key = 0; key < virtualSize; key++) {\n             double value = v.getEntry(key);\n             if (!isDefaultValue(value)) {\n         }\n     }\n \n-    /** Set defaults.\n-     * @param defaultValue value for non-specified entries\n-     * @param epsilon tolerance to check for equality with default value\n-     */\n-    private void setDefault(double defaultValue, double epsilon) {\n-      if (epsilon < 0) {\n-        throw new IllegalArgumentException(\"default tolerance must be > 0 :\" + epsilon);\n-      }\n-      plusEpsilon  = defaultValue + epsilon;\n-      minusEpsilon = defaultValue - epsilon;\n-    }\n-\n     /**\n      * Get the entries of this instance.\n      * @return entries of this instance\n     }\n \n     /**\n-     * Determine if this value is within epsilon of the defaultValue (currently always zero).\n+     * Determine if this value is within epsilon of zero.\n      * @param value The value to test\n-     * @return <code>true</code> if this value is within epsilon to the defaultValue, <code>false</code> otherwise\n+     * @return <code>true</code> if this value is within epsilon to zero, <code>false</code> otherwise\n      */\n     protected boolean isDefaultValue(double value) {\n-        return value < plusEpsilon && value > minusEpsilon;\n+        return Math.abs(value) < epsilon;\n     }\n \n     /** {@inheritDoc} */\n         final int prime = 31;\n         int result = 1;\n         long temp;\n-        temp = Double.doubleToLongBits(plusEpsilon) + Double.doubleToLongBits(minusEpsilon);\n+        temp = Double.doubleToLongBits(epsilon);\n         result = prime * result + (int) (temp ^ (temp >>> 32));\n         result = prime * result + virtualSize;\n         Iterator iter = entries.iterator();\n         if (virtualSize != other.virtualSize) {\n             return false;\n         }\n-        if (Double.doubleToLongBits(minusEpsilon) !=\n-            Double.doubleToLongBits(other.minusEpsilon)) {\n-            return false;\n-        }\n-        if (Double.doubleToLongBits(plusEpsilon) !=\n-            Double.doubleToLongBits(other.plusEpsilon)) {\n+        if (Double.doubleToLongBits(epsilon) !=\n+            Double.doubleToLongBits(other.epsilon)) {\n             return false;\n         }\n         Iterator iter = entries.iterator();", "timestamp": 1261939696, "metainfo": ""}