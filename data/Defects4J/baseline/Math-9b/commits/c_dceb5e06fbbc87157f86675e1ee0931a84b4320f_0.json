{"sha": "dceb5e06fbbc87157f86675e1ee0931a84b4320f", "log": "Initial commit of code split off from TestStatistic.   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/inference/TTest.java\n+/*\n+ * Copyright 2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.inference;\n+\n+import org.apache.commons.math.MathException;\n+import org.apache.commons.math.stat.univariate.StatisticalSummary;\n+\n+/**\n+ * An interface for Student's t-tests.\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2004/05/03 03:03:21 $ \n+ */\n+public interface TTest {\n+    /**\n+     * Computes a <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section2/prc22.htm#formula\"> \n+     * t statistic </a> given observed values and a comparison constant.\n+     * <p>\n+     * This statistic can be used to perform a one sample t-test for the mean.\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The observed array length must be at least 2.\n+     * </li></ul>\n+     *\n+     * @param mu comparison constant\n+     * @param observed array of values\n+     * @return t statistic\n+     * @throws IllegalArgumentException if input array length is less than 2\n+     */\n+    double t(double mu, double[] observed) \n+    throws IllegalArgumentException;\n+    \n+    /**\n+     * Computes a <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n+     * 2-sample t statistic </a>, without the assumption of equal sample variances.\n+     * <p>\n+     * This statistic can be used to perform a two-sample t-test to compare\n+     * sample means.\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The observed array lengths must both be at least 5.\n+     * </li></ul>\n+     *\n+     * @param sample1 array of sample data values\n+     * @param sample2 array of sample data values\n+     * @return t statistic\n+     * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if the statistic can not be computed do to a\n+     *         convergence or other numerical error.\n+     */\n+    double t(double[] sample1, double[] sample2) \n+    throws IllegalArgumentException, MathException;\n+    \n+    /**\n+     * Returns the <i>observed significance level</i>, or \n+     * <a href=\"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n+     * p-value</a>, associated with a two-sample, two-tailed t-test \n+     * comparing the means of the input arrays.\n+     * <p>\n+     * The number returned is the smallest significance level\n+     * at which one can reject the null hypothesis that the two means are\n+     * equal in favor of the two-sided alternative that they are different. \n+     * For a one-sided test, divide the returned value by 2.\n+     * <p>\n+     * The test does not assume that the underlying popuation variances are\n+     * equal and it uses approximated degrees of freedom computed from the \n+     * sample data as described \n+     * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">here</a>\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the p-value depends on the assumptions of the parametric\n+     * t-test procedure, as discussed \n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The observed array lengths must both be at least 5.\n+     * </li></ul>\n+     *\n+     * @param sample1 array of sample data values\n+     * @param sample2 array of sample data values\n+     * @return p-value for t-test\n+     * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    double tTest(double[] sample1, double[] sample2)\n+    throws IllegalArgumentException, MathException;\n+    \n+    /**\n+     * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm\">\n+     * two-sided t-test</a> evaluating the null hypothesis that <code>sample1</code> \n+     * and <code>sample2</code> are drawn from populations with the same mean, \n+     * with significance level <code>alpha</code>.\n+     * <p>\n+     * Returns <code>true</code> iff the null hypothesis that the means are\n+     * equal can be rejected with confidence <code>1 - alpha</code>.  To \n+     * perform a 1-sided test, use <code>alpha / 2</code>\n+     * <p>\n+     * <strong>Examples:</strong><br><ol>\n+     * <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at\n+     * the 95% level, use <br><code>tTest(sample1, sample2, 0.05) </code>\n+     * </li>\n+     * <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2 </code>\n+     * at the 99% level, first verify that the measured mean of \n+     * <code>sample 1</code> is less than the mean of <code>sample 2</code>\n+     * and then use <br><code>tTest(sample1, sample2, 0.005) </code>\n+     * </li></ol>\n+     * <p>\n+     * The test does not assume that the underlying popuation variances are\n+     * equal and it uses approximated degrees of freedom computed from the \n+     * sample data as described \n+     * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">here</a>\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the test depends on the assumptions of the parametric\n+     * t-test procedure, as discussed \n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The observed array lengths must both be at least 5.\n+     * </li>\n+     * <li> <code> 0 < alpha < 0.5 </code>\n+     * </li></ul>\n+     *\n+     * @param sample1 array of sample data values\n+     * @param sample2 array of sample data values\n+     * @param alpha significance level of the test\n+     * @return true if the null hypothesis can be rejected with \n+     * confidence 1 - alpha\n+     * @throws IllegalArgumentException if the preconditions are not met\n+     * @throws MathException if an error occurs performing the test\n+     */\n+    boolean tTest(double[] sample1, double[] sample2, double alpha)\n+    throws IllegalArgumentException, MathException;\n+    \n+    /**\n+     * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm\">\n+     * two-sided t-test</a> evaluating the null hypothesis that the mean of the population from\n+     *  which <code>sample</code> is drawn equals <code>mu</code>.\n+     * <p>\n+     * Returns <code>true</code> iff the null hypothesis can be \n+     * rejected with confidence <code>1 - alpha</code>.  To \n+     * perform a 1-sided test, use <code>alpha / 2</code>\n+     * <p>\n+     * <strong>Examples:</strong><br><ol>\n+     * <li>To test the (2-sided) hypothesis <code>sample mean = mu </code> at\n+     * the 95% level, use <br><code>tTest(mu, sample, 0.05) </code>\n+     * </li>\n+     * <li>To test the (one-sided) hypothesis <code> sample mean < mu </code>\n+     * at the 99% level, first verify that the measured sample mean is less \n+     * than <code>mu</code> and then use \n+     * <br><code>tTest(mu, sample, 0.005) </code>\n+     * </li></ol>\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the test depends on the assumptions of the one-sample \n+     * parametric t-test procedure, as discussed \n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/sg_glos.html#one-sample\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The observed array length must be at least 5.\n+     * </li></ul>\n+     *\n+     * @param mu constant value to compare sample mean against\n+     * @param sample array of sample data values\n+     * @param alpha significance level of the test\n+     * @return p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error computing the p-value\n+     */\n+    boolean tTest(double mu, double[] sample, double alpha)\n+    throws IllegalArgumentException, MathException;\n+    \n+    /**\n+     * Returns the <i>observed significance level</i>, or \n+     * <a href=\"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n+     * p-value</a>, associated with a one-sample, two-tailed t-test \n+     * comparing the mean of the input array with the constant <code>mu</code>.\n+     * <p>\n+     * The number returned is the smallest significance level\n+     * at which one can reject the null hypothesis that the mean equals \n+     * <code>mu</code> in favor of the two-sided alternative that the mean\n+     * is different from <code>mu</code>. For a one-sided test, divide the \n+     * returned value by 2.\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the test depends on the assumptions of the parametric\n+     * t-test procedure, as discussed \n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The observed array length must be at least 5.\n+     * </li></ul>\n+     *\n+     * @param mu constant value to compare sample mean against\n+     * @param sample array of sample data values\n+     * @return p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    double tTest(double mu, double[] sample)\n+    throws IllegalArgumentException, MathException;\n+    \n+    /**\n+     * Computes a <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section2/prc22.htm#formula\">\n+     * t statistic </a> to use in comparing the dataset described by <code>sampleStats</code>\n+     *  to <code>mu</code>.\n+     * <p>\n+     * This statistic can be used to perform a one sample t-test for the mean.\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li><code>observed.getN() > = 2</code>.\n+     * </li></ul>\n+     *\n+     * @param mu comparison constant\n+     * @param sampleStats DescriptiveStatistics holding sample summary statitstics\n+     * @return t statistic\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    double t(double mu, StatisticalSummary sampleStats) \n+    throws IllegalArgumentException;\n+    \n+    /**\n+     * Computes a <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n+     * 2-sample t statistic </a>, comparing the means of the datasets described\n+     * by two {@link StatisticalSummary} instances without the assumption of equal sample variances.\n+     * <p>\n+     * This statistic can be used to perform a two-sample t-test to compare\n+     * sample means.\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The datasets described by the two Univariates must each contain\n+     * at least 5 observations.\n+     * </li></ul>\n+     *\n+     * @param sampleStats1 StatisticalSummary describing data from the first sample\n+     * @param sampleStats2 StatisticalSummary describing data from the second sample\n+     * @return t statistic\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    double t(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2) \n+    throws IllegalArgumentException;\n+    \n+    /**\n+     * Returns the <i>observed significance level</i>, or \n+     * <a href=\"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n+     * p-value</a>, associated with a two-sample, two-tailed t-test \n+     * comparing the means of the datasets described by two Univariates.\n+     * <p>\n+     * The number returned is the smallest significance level\n+     * at which one can reject the null hypothesis that the two means are\n+     * equal in favor of the two-sided alternative that they are different. \n+     * For a one-sided test, divide the returned value by 2.\n+     * <p>\n+     * The test does not assume that the underlying popuation variances are\n+     * equal and it uses approximated degrees of freedom computed from the \n+     * sample data as described \n+     * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">here</a>\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the p-value depends on the assumptions of the parametric\n+     * t-test procedure, as discussed \n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The datasets described by the two Univariates must each contain\n+     * at least 5 observations.\n+     * </li></ul>\n+     *\n+     * @param sampleStats1 StatisticalSummary describing data from the first sample\n+     * @param sampleStats2 StatisticalSummary describing data from the second sample\n+     * @return p-value for t-test\n+     * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    double tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2)\n+    throws IllegalArgumentException, MathException;\n+    \n+    /**\n+     * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm\">\n+     * two-sided t-test</a> evaluating the null hypothesis that <code>sampleStats1</code>\n+     * and <code>sampleStats2</code> describe datasets drawn from populations with the \n+     * same mean, with significance level <code>alpha</code>.\n+     * <p>\n+     * Returns <code>true</code> iff the null hypothesis that the means are\n+     * equal can be rejected with confidence <code>1 - alpha</code>.  To \n+     * perform a 1-sided test, use <code>alpha / 2</code>\n+     * <p>\n+     * <strong>Examples:</strong><br><ol>\n+     * <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at\n+     * the 95% level, use \n+     * <br><code>tTest(sampleStats1, sampleStats2, 0.05) </code>\n+     * </li>\n+     * <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2 </code>\n+     * at the 99% level, first verify that the measured mean of \n+     * <code>sample 1</code> is less than the mean of <code>sample 2</code>\n+     * and then use <br><code>tTest(sampleStats1, sampleStats2, 0.005) </code>\n+     * </li></ol>\n+     * <p>\n+     * The test does not assume that the underlying popuation variances are\n+     * equal and it uses approximated degrees of freedom computed from the \n+     * sample data as described \n+     * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">here</a>\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the test depends on the assumptions of the parametric\n+     * t-test procedure, as discussed \n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The datasets described by the two Univariates must each contain\n+     * at least 5 observations.\n+     * </li>\n+     * <li> <code> 0 < alpha < 0.5 </code>\n+     * </li></ul>\n+     *\n+     * @param sampleStats1 StatisticalSummary describing sample data values\n+     * @param sampleStats2 StatisticalSummary describing sample data values\n+     * @param alpha significance level of the test\n+     * @return true if the null hypothesis can be rejected with \n+     * confidence 1 - alpha\n+     * @throws IllegalArgumentException if the preconditions are not met\n+     * @throws MathException if an error occurs performing the test\n+     */\n+    boolean tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2, \n+            double alpha)\n+    throws IllegalArgumentException, MathException;\n+    \n+    /**\n+     * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm\">\n+     * two-sided t-test</a> evaluating the null hypothesis that the mean of the population from\n+     * which the dataset described by <code>stats</code> is drawn equals <code>mu</code>.\n+     * <p>\n+     * Returns <code>true</code> iff the null hypothesis can be \n+     * rejected with confidence <code>1 - alpha</code>.  To \n+     * perform a 1-sided test, use <code>alpha / 2</code>\n+     * <p>\n+     * <strong>Examples:</strong><br><ol>\n+     * <li>To test the (2-sided) hypothesis <code>sample mean = mu </code> at\n+     * the 95% level, use <br><code>tTest(mu, sampleStats, 0.05) </code>\n+     * </li>\n+     * <li>To test the (one-sided) hypothesis <code> sample mean < mu </code>\n+     * at the 99% level, first verify that the measured sample mean is less \n+     * than <code>mu</code> and then use \n+     * <br><code>tTest(mu, sampleStats, 0.005) </code>\n+     * </li></ol>\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the test depends on the assumptions of the one-sample \n+     * parametric t-test procedure, as discussed \n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/sg_glos.html#one-sample\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The sample must include at least 5 observations.\n+     * </li></ul>\n+     *\n+     * @param mu constant value to compare sample mean against\n+     * @param sampleStats StatisticalSummary describing sample data values\n+     * @param alpha significance level of the test\n+     * @return p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    boolean tTest(double mu, StatisticalSummary sampleStats, double alpha)\n+    throws IllegalArgumentException, MathException;\n+    \n+    /**\n+     * Returns the <i>observed significance level</i>, or \n+     * <a href=\"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n+     * p-value</a>, associated with a one-sample, two-tailed t-test \n+     * comparing the mean of the dataset described by <code>sampleStats</code>\n+     * with the constant <code>mu</code>.\n+     * <p>\n+     * The number returned is the smallest significance level\n+     * at which one can reject the null hypothesis that the mean equals \n+     * <code>mu</code> in favor of the two-sided alternative that the mean\n+     * is different from <code>mu</code>. For a one-sided test, divide the \n+     * returned value by 2.\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the test depends on the assumptions of the parametric\n+     * t-test procedure, as discussed \n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The sample must contain at least 5 observations.\n+     * </li></ul>\n+     *\n+     * @param mu constant value to compare sample mean against\n+     * @param sampleStats StatisticalSummary describing sample data\n+     * @return p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    double tTest(double mu, StatisticalSummary sampleStats)\n+    throws IllegalArgumentException, MathException;\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/inference/TTestImpl.java\n+/*\n+ * Copyright 2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.inference;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.math.MathException;\n+import org.apache.commons.math.distribution.DistributionFactory;\n+import org.apache.commons.math.distribution.TDistribution;\n+import org.apache.commons.math.stat.StatUtils;\n+import org.apache.commons.math.stat.univariate.StatisticalSummary;\n+\n+/**\n+ * Implements t-test statistics defined in the {@link TTest} interface.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2004/05/03 03:03:21 $\n+ */\n+public class TTestImpl implements TTest, Serializable {\n+\n+    /** Serializable version identifier */\n+    static final long serialVersionUID = 3003851743922752186L;\n+    \n+    public TTestImpl() {\n+        super();\n+    }\n+\n+    /**\n+     * @param mu comparison constant\n+     * @param observed array of values\n+     * @return t statistic\n+     * @throws IllegalArgumentException if input array length is less than 5\n+     */\n+    public double t(double mu, double[] observed)\n+    throws IllegalArgumentException {\n+        if ((observed == null) || (observed.length < 5)) {\n+            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n+        }\n+        return t(StatUtils.mean(observed), mu, StatUtils.variance(observed), observed.length);\n+    }\n+\n+    /**\n+     * @param mu constant value to compare sample mean against\n+     * @param sample array of sample data values\n+     * @param alpha significance level of the test\n+     * @return p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    public boolean tTest(double mu, double[] sample, double alpha)\n+    throws IllegalArgumentException, MathException {\n+        if ((alpha <= 0) || (alpha > 0.5)) {\n+            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n+        }\n+        return (tTest(mu, sample) < alpha);\n+    }\n+\n+    /**\n+     * @param sample1 array of sample data values\n+     * @param sample2 array of sample data values\n+     * @return t-statistic\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    public double t(double[] sample1, double[] sample2)\n+    throws IllegalArgumentException {\n+        if ((sample1 == null) || (sample2 == null ||\n+                Math.min(sample1.length, sample2.length) < 5)) {\n+            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n+        }\n+        return t(StatUtils.mean(sample1), StatUtils.mean(sample2), StatUtils.variance(sample1),\n+                StatUtils.variance(sample2),  (double) sample1.length, (double) sample2.length);\n+    }\n+\n+    /**\n+     *\n+     * @param sample1 array of sample data values\n+     * @param sample2 array of sample data values\n+     * @return tTest p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    public double tTest(double[] sample1, double[] sample2)\n+    throws IllegalArgumentException, MathException {\n+        if ((sample1 == null) || (sample2 == null ||\n+                Math.min(sample1.length, sample2.length) < 5)) {\n+            throw new IllegalArgumentException(\"insufficient data\");\n+        }\n+        return tTest(StatUtils.mean(sample1), StatUtils.mean(sample2), StatUtils.variance(sample1),\n+                StatUtils.variance(sample2), (double) sample1.length, (double) sample2.length);\n+    }\n+\n+    /**\n+     * @param sample1 array of sample data values\n+     * @param sample2 array of sample data values\n+     * @param alpha significance level\n+     * @return true if the null hypothesis can be rejected with \n+     *     confidence 1 - alpha\n+     * @throws IllegalArgumentException if the preconditions are not met\n+     * @throws MathException if an error occurs performing the test\n+     */\n+    public boolean tTest(double[] sample1, double[] sample2, double alpha)\n+    throws IllegalArgumentException, MathException {\n+        if ((alpha <= 0) || (alpha > 0.5)) {\n+            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n+        }\n+        return (tTest(sample1, sample2) < alpha);\n+    }\n+\n+    /**\n+     * @param mu constant value to compare sample mean against\n+     * @param sample array of sample data values\n+     * @return p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    public double tTest(double mu, double[] sample)\n+    throws IllegalArgumentException, MathException {\n+        if ((sample == null) || (sample.length < 5)) {\n+            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n+        }\n+        return tTest( StatUtils.mean(sample), mu, StatUtils.variance(sample), sample.length);\n+    }\n+\n+    /**\n+     * @param mu comparison constant\n+     * @param sampleStats StatisticalSummary holding sample summary statitstics\n+     * @return t statistic\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    public double t(double mu, StatisticalSummary sampleStats)\n+    throws IllegalArgumentException {\n+        if ((sampleStats == null) || (sampleStats.getN() < 5)) {\n+            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n+        }\n+        return t(sampleStats.getMean(), mu, sampleStats.getVariance(), sampleStats.getN());\n+    }\n+\n+    /**\n+     * @param sampleStats1 StatisticalSummary describing data from the first sample\n+     * @param sampleStats2 StatisticalSummary describing data from the second sample\n+     * @return t statistic\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    public double t(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2)\n+    throws IllegalArgumentException {\n+        if ((sampleStats1 == null) ||\n+                (sampleStats2 == null ||\n+                        Math.min(sampleStats1.getN(), sampleStats2.getN()) < 5)) {\n+            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n+        }\n+        return t(sampleStats1.getMean(), sampleStats2.getMean(), sampleStats1.getVariance(),\n+                sampleStats2.getVariance(), (double) sampleStats1.getN(), (double) sampleStats2.getN());\n+    }\n+\n+    /**\n+     * @param sampleStats1 StatisticalSummary describing data from the first sample\n+     * @param sampleStats2 StatisticalSummary describing data from the second sample\n+     * @return p-value for t-test\n+     * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    public double tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2)\n+    throws IllegalArgumentException, MathException {\n+        if ((sampleStats1 == null) || (sampleStats2 == null ||\n+                Math.min(sampleStats1.getN(), sampleStats2.getN()) < 5)) {\n+            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n+        }\n+        return tTest(sampleStats1.getMean(), sampleStats2.getMean(), sampleStats1.getVariance(),\n+                sampleStats2.getVariance(), (double) sampleStats1.getN(), (double) sampleStats2.getN());\n+    }\n+\n+    /**\n+     * @param sampleStats1 StatisticalSummary describing sample data values\n+     * @param sampleStats2 StatisticalSummary describing sample data values\n+     * @param alpha significance level of the test\n+     * @return true if the null hypothesis can be rejected with \n+     *     confidence 1 - alpha\n+     * @throws IllegalArgumentException if the preconditions are not met\n+     * @throws MathException if an error occurs performing the test\n+     */\n+    public boolean tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2,\n+            double alpha)\n+    throws IllegalArgumentException, MathException {\n+        if ((alpha <= 0) || (alpha > 0.5)) {\n+            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n+        }\n+        return (tTest(sampleStats1, sampleStats2) < alpha);\n+    }\n+\n+    /**\n+     * @param mu constant value to compare sample mean against\n+     * @param sampleStats StatisticalSummary describing sample data values\n+     * @param alpha significance level of the test\n+     * @return p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    public boolean tTest( double mu, StatisticalSummary sampleStats,double alpha)\n+    throws IllegalArgumentException, MathException {\n+        if ((alpha <= 0) || (alpha > 0.5)) {\n+            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n+        }\n+        return (tTest(mu, sampleStats) < alpha);\n+    }\n+\n+    /**\n+     * @param mu constant value to compare sample mean against\n+     * @param sampleStats StatisticalSummary describing sample data\n+     * @return p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    public double tTest(double mu, StatisticalSummary sampleStats)\n+    throws IllegalArgumentException, MathException {\n+        if ((sampleStats == null) || (sampleStats.getN() < 5)) {\n+            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n+        }\n+        return tTest(sampleStats.getMean(), mu, sampleStats.getVariance(), sampleStats.getN());\n+    }\n+\n+    //----------------------------------------------- Protected methods \n+\n+    /**\n+     * Computes approximate degrees of freedom for 2-sample t-test.\n+     * \n+     * @param v1 first sample variance\n+     * @param v2 second sample variance\n+     * @param n1 first sample n\n+     * @param n2 second sample n\n+     * @return approximate degrees of freedom\n+     */\n+    protected double df(double v1, double v2, double n1, double n2) {\n+        return (((v1 / n1) + (v2 / n2)) * ((v1 / n1) + (v2 / n2))) /\n+        ((v1 * v1) / (n1 * n1 * (n1 - 1d)) + (v2 * v2) /\n+                (n2 * n2 * (n2 - 1d)));\n+    }\n+\n+    /**\n+     * Computes t test statistic for 2-sample t-test.\n+     * \n+     * @param m1 first sample mean\n+     * @param m2 second sample mean\n+     * @param v1 first sample variance\n+     * @param v2 second sample variance\n+     * @param n1 first sample n\n+     * @param n2 second sample n\n+     * @return t test statistic\n+     */\n+    protected double t(double m1, double m2,  double v1, double v2, double n1,double n2)  {\n+        return (m1 - m2) / Math.sqrt((v1 / n1) + (v2 / n2));\n+    }\n+\n+    /**\n+     * Computes t test statistic for 1-sample t-test.\n+     * \n+     * @param m sample mean\n+     * @param mu constant to test against\n+     * @param v sample variance\n+     * @param n sample n\n+     * @return t test statistic\n+     */\n+    protected double t(double m, double mu, double v, double n) {\n+        return (m - mu) / Math.sqrt(v / n);\n+    }\n+\n+    /**\n+     * Computes p-value for 2-sided, 2-sample t-test.\n+     * \n+     * @param m1 first sample mean\n+     * @param m2 second sample mean\n+     * @param v1 first sample variance\n+     * @param v2 second sample variance\n+     * @param n1 first sample n\n+     * @param n2 second sample n\n+     * @return p-value\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    protected double tTest(double m1, double m2, double v1, double v2, double n1, double n2)\n+    throws MathException {\n+        double t = Math.abs(t(m1, m2, v1, v2, n1, n2));\n+        TDistribution tDistribution =\n+            DistributionFactory.newInstance().createTDistribution(df(v1, v2, n1, n2));\n+        return 1.0 - tDistribution.cumulativeProbability(-t, t);\n+    }\n+\n+    /**\n+     * Computes p-value for 2-sided, 1-sample t-test.\n+     * \n+     * @param m sample mean\n+     * @param mu constant to test against\n+     * @param v sample variance\n+     * @param n sample n\n+     * @return p-value\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    protected double tTest(double m, double mu, double v, double n)\n+    throws MathException {\n+        double t = Math.abs(t(m, mu, v, n));\n+        TDistribution tDistribution =\n+            DistributionFactory.newInstance().createTDistribution(n - 1);\n+        return 1.0 - tDistribution.cumulativeProbability(-t, t);\n+    }\n+}", "timestamp": 1083553401, "metainfo": ""}