{"sha": "717e750a6615540b6766ed0c608c63bb66d0311b", "log": "MATH-874 I forgot to \"svn add\" classes (in revision 1402607).   ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math3/optimization/Target.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math3.optimization;\n+\n+/**\n+ * Target of the optimization procedure.\n+ * They are the values which the objective vector function must reproduce\n+ * When the parameters of the model have been optimized.\n+ * <br/>\n+ * Immutable class.\n+ *\n+ * @version $Id$\n+ * @since 3.1\n+ */\n+public class Target implements OptimizationData {\n+    /** Target values (of the objective vector function). */\n+    private final double[] target;\n+\n+    /**\n+     * @param observations Target values.\n+     */\n+    public Target(double[] observations) {\n+        target = observations.clone();\n+    }\n+\n+    /**\n+     * Gets the initial guess.\n+     *\n+     * @return the initial guess.\n+     */\n+    public double[] getTarget() {\n+        return target.clone();\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math3/optimization/Weight.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math3.optimization;\n+\n+import org.apache.commons.math3.linear.RealMatrix;\n+import org.apache.commons.math3.linear.Array2DRowRealMatrix;\n+import org.apache.commons.math3.linear.NonSquareMatrixException;\n+\n+/**\n+ * Weight matrix of the residuals between model and observations.\n+ * <br/>\n+ * Immutable class.\n+ *\n+ * @version $Id$\n+ * @since 3.1\n+ */\n+public class Weight implements OptimizationData {\n+    /** Weight matrix. */\n+    private final RealMatrix weightMatrix;\n+\n+    /**\n+     * Creates a diagonal weight matrix.\n+     *\n+     * @param weight List of the values of the diagonal.\n+     */\n+    public Weight(double[] weight) {\n+        final int dim = weight.length;\n+        weightMatrix = new Array2DRowRealMatrix(dim, dim);\n+        for (int i = 0; i < dim; i++) {\n+            weightMatrix.setEntry(i, i, weight[i]);\n+        }\n+    }\n+\n+    /**\n+     * @param weight Weight matrix.\n+     * @throws NonSquareMatrixException if the argument is not\n+     * a square matrix.\n+     */\n+    public Weight(RealMatrix weight) {\n+        if (weight.getColumnDimension() != weight.getRowDimension()) {\n+            throw new NonSquareMatrixException(weight.getColumnDimension(),\n+                                               weight.getRowDimension());\n+        }\n+\n+        weightMatrix = weight.copy();\n+    }\n+\n+    /**\n+     * Gets the initial guess.\n+     *\n+     * @return the initial guess.\n+     */\n+    public RealMatrix getWeight() {\n+        return weightMatrix.copy();\n+    }\n+}", "timestamp": 1351276054, "metainfo": ""}