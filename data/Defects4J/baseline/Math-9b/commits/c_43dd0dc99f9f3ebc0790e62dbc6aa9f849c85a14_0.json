{"sha": "43dd0dc99f9f3ebc0790e62dbc6aa9f849c85a14", "log": "Implemented a retry policy for tests that may randomly fail.  Tests classes that may fail should be annotated with @RunWith(RetryRunner.class). This custom test runner attempts to re-run tests that fail, up to a maximum number of attempts defined as a constant in the test runner (currently set to 3 attempts max).  Jira: MATH-423  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math/RetryRunner.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math;\n+\n+import org.junit.runners.BlockJUnit4ClassRunner;\n+import org.junit.runners.model.FrameworkMethod;\n+import org.junit.runners.model.InitializationError;\n+import org.junit.runners.model.Statement;\n+\n+\n+/**\n+ * A test runner that retries tests when assertions fail.\n+ * @version $Revision$ $Date$\n+ */\n+public class RetryRunner extends BlockJUnit4ClassRunner {\n+\n+    /** Maximal number of test run attempts. */\n+    private static final int MAX_ATTEMPTS = 3;\n+\n+    /** Simple constructor.\n+     * @param testClass class to test\n+     * @throws InitializationError if default runner cannot be built\n+     */\n+    public RetryRunner(final Class<?> testClass)\n+        throws InitializationError {\n+        super(testClass);\n+    }\n+\n+    @Override\n+    public Statement methodInvoker(FrameworkMethod method, Object test) {\n+        final Statement singleTryStatement = super.methodInvoker(method, test);\n+        return new Statement() {\n+\n+            /** Evaluate the statement.\n+             * We attempt several runs for the test, at most MAX_ATTEMPTS.\n+             * if one attempt succeeds, we succeed, if all attempts fail, we\n+             * fail with the reason corresponding to the last attempt\n+             */\n+            public void evaluate() throws Throwable {\n+                Throwable failureReason = null;\n+                for (int i = 0; i < MAX_ATTEMPTS; ++i) {\n+                    try {\n+\n+                        // do one test run attempt\n+                        singleTryStatement.evaluate();\n+\n+                        // attempt succeeded, stop evaluation here\n+                        return;\n+\n+                    } catch (Throwable t) {\n+                        // attempt failed, store the reason why\n+                        failureReason = t;\n+                    }\n+                }\n+\n+                // all attempts failed\n+                throw failureReason;\n+\n+            }\n+        };\n+    }\n+\n+}\n--- a/src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java\n import java.net.URL;\n import java.util.ArrayList;\n \n-import org.apache.commons.math.RetryTestCase;\n+import org.apache.commons.math.RetryRunner;\n import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.stat.descriptive.SummaryStatistics;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n \n /**\n  * Test cases for the EmpiricalDistribution class\n  * @version $Revision$ $Date$\n  */\n \n-public final class EmpiricalDistributionTest extends RetryTestCase {\n+@RunWith(RetryRunner.class)\n+public final class EmpiricalDistributionTest {\n \n     protected EmpiricalDistribution empiricalDistribution = null;\n     protected EmpiricalDistribution empiricalDistribution2 = null;\n--- a/src/test/java/org/apache/commons/math/random/RandomDataTest.java\n+++ b/src/test/java/org/apache/commons/math/random/RandomDataTest.java\n import java.util.List;\n \n \n-import org.apache.commons.math.RetryTestCase;\n+import org.apache.commons.math.RetryRunner;\n import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.distribution.BetaDistributionImpl;\n import org.apache.commons.math.distribution.BinomialDistributionImpl;\n import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.junit.Assert;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n \n /**\n  * Test cases for the RandomData class.\n  *          2009) $\n  */\n \n-public class RandomDataTest extends RetryTestCase {\n+@RunWith(RetryRunner.class)\n+public class RandomDataTest {\n \n     public RandomDataTest() {\n         randomData = new RandomDataImpl();\n--- a/src/test/java/org/apache/commons/math/random/ValueServerTest.java\n+++ b/src/test/java/org/apache/commons/math/random/ValueServerTest.java\n import java.io.EOFException;\n import java.net.URL;\n \n-import org.apache.commons.math.RetryTestCase;\n+import org.apache.commons.math.RetryRunner;\n import org.apache.commons.math.stat.descriptive.SummaryStatistics;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n \n /**\n  * Test cases for the ValueServer class.\n  * @version $Revision$ $Date$\n  */\n \n-public final class ValueServerTest extends RetryTestCase {\n+@RunWith(RetryRunner.class)\n+public final class ValueServerTest {\n \n     private ValueServer vs = new ValueServer();\n ", "timestamp": 1301238167, "metainfo": ""}