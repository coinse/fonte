{"sha": "cebe0505eeb25a7303b1fae3764d5c583ccbfb0a", "log": "Moved   - transform.FastFourierTransformer.scaleArray(Complex[], double)   - transform.FastFourierTransformer.scaleArray(double[], double) to newly created class transform.TransformUtils.  Related to MATH-677.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java\n \n         if (orthogonal) {\n             final double s = FastMath.sqrt(2.0 / (f.length - 1));\n-            return FastFourierTransformer.scaleArray(fct(f), s);\n+            return TransformUtils.scaleArray(fct(f), s);\n         }\n         return fct(f);\n     }\n \n         final double s2 = 2.0 / (f.length - 1);\n         final double s1 = orthogonal ? FastMath.sqrt(s2) : s2;\n-        return FastFourierTransformer.scaleArray(fct(f), s1);\n+        return TransformUtils.scaleArray(fct(f), s1);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java\n \n         if (unitary) {\n             final double s = 1.0 / FastMath.sqrt(f.length);\n-            return scaleArray(fft(f, false), s);\n+            return TransformUtils.scaleArray(fft(f, false), s);\n         }\n         return fft(f, false);\n     }\n         final double[] data = FunctionUtils.sample(f, min, max, n);\n         if (unitary) {\n             final double s = 1.0 / FastMath.sqrt(n);\n-            return scaleArray(fft(data, false), s);\n+            return TransformUtils.scaleArray(fft(data, false), s);\n         }\n         return fft(data, false);\n     }\n         roots.computeOmega(f.length);\n         if (unitary) {\n             final double s = 1.0 / FastMath.sqrt(f.length);\n-            return scaleArray(fft(f), s);\n+            return TransformUtils.scaleArray(fft(f), s);\n         }\n         return fft(f);\n     }\n             throws MathIllegalArgumentException {\n \n         final double s = 1.0 / (unitary ? FastMath.sqrt(f.length) : f.length);\n-        return scaleArray(fft(f, true), s);\n+        return TransformUtils.scaleArray(fft(f, true), s);\n     }\n \n     /**\n \n         final double[] data = FunctionUtils.sample(f, min, max, n);\n         final double s = 1.0 / (unitary ? FastMath.sqrt(n) : n);\n-        return scaleArray(fft(data, true), s);\n+        return TransformUtils.scaleArray(fft(data, true), s);\n     }\n \n     /**\n \n         roots.computeOmega(-f.length);    // pass negative argument\n         final double s = 1.0 / (unitary ? FastMath.sqrt(f.length) : f.length);\n-        return scaleArray(fft(f), s);\n+        return TransformUtils.scaleArray(fft(f), s);\n     }\n \n     /**\n             transformed[2 * n - i] = transformed[i].conjugate();\n         }\n \n-        return scaleArray(transformed, 0.5);\n+        return TransformUtils.scaleArray(transformed, 0.5);\n     }\n \n     /**\n                     f[j + k] = f[j + k].add(z);\n                 }\n             }\n-        }\n-        return f;\n-    }\n-\n-    /**\n-     * Multiply every component in the given real array by the\n-     * given real number. The change is made in place.\n-     *\n-     * @param f the real array to be scaled\n-     * @param d the real scaling coefficient\n-     * @return a reference to the scaled array\n-     */\n-    public static double[] scaleArray(double[] f, double d) {\n-\n-        for (int i = 0; i < f.length; i++) {\n-            f[i] *= d;\n-        }\n-        return f;\n-    }\n-\n-    /**\n-     * Multiply every component in the given complex array by the\n-     * given real number. The change is made in place.\n-     *\n-     * @param f the complex array to be scaled\n-     * @param d the real scaling coefficient\n-     * @return a reference to the scaled array\n-     */\n-    public static Complex[] scaleArray(Complex[] f, double d) {\n-\n-        for (int i = 0; i < f.length; i++) {\n-            f[i] = new Complex(d * f[i].getReal(), d * f[i].getImaginary());\n         }\n         return f;\n     }\n--- a/src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java\n     public double[] inverseTransform(double[] f)\n         throws IllegalArgumentException {\n \n-        return FastFourierTransformer.scaleArray(fht(f), 1.0 / f.length);\n+        return TransformUtils.scaleArray(fht(f), 1.0 / f.length);\n    }\n \n     /**\n \n         final double[] unscaled =\n             fht(FunctionUtils.sample(f, min, max, n));\n-        return FastFourierTransformer.scaleArray(unscaled, 1.0 / n);\n+        return TransformUtils.scaleArray(unscaled, 1.0 / n);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/math/transform/FastSineTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastSineTransformer.java\n     public double[] transform(double[] f) throws MathIllegalArgumentException {\n         if (orthogonal) {\n             final double s = FastMath.sqrt(2.0 / f.length);\n-            return FastFourierTransformer.scaleArray(fst(f), s);\n+            return TransformUtils.scaleArray(fst(f), s);\n         }\n         return fst(f);\n     }\n         data[0] = 0.0;\n         if (orthogonal) {\n             final double s = FastMath.sqrt(2.0 / n);\n-            return FastFourierTransformer.scaleArray(fst(data), s);\n+            return TransformUtils.scaleArray(fst(data), s);\n         }\n         return fst(data);\n     }\n             return transform(f);\n         }\n         final double s = 2.0 / f.length;\n-        return FastFourierTransformer.scaleArray(fst(f), s);\n+        return TransformUtils.scaleArray(fst(f), s);\n     }\n \n     /**\n         data[0] = 0.0;\n         final double s = 2.0 / n;\n \n-        return FastFourierTransformer.scaleArray(fst(data), s);\n+        return TransformUtils.scaleArray(fst(data), s);\n     }\n \n     /**\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/transform/TransformUtils.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.transform;\n+\n+import org.apache.commons.math.complex.Complex;\n+\n+/**\n+ * Useful functions for the implementation of various transforms.\n+ */\n+public class TransformUtils {\n+    /** Private constructor. */\n+    private TransformUtils() {\n+        super();\n+    }\n+\n+    /**\n+     * Multiply every component in the given real array by the\n+     * given real number. The change is made in place.\n+     *\n+     * @param f the real array to be scaled\n+     * @param d the real scaling coefficient\n+     * @return a reference to the scaled array\n+     */\n+    public static double[] scaleArray(double[] f, double d) {\n+    \n+        for (int i = 0; i < f.length; i++) {\n+            f[i] *= d;\n+        }\n+        return f;\n+    }\n+\n+    /**\n+     * Multiply every component in the given complex array by the\n+     * given real number. The change is made in place.\n+     *\n+     * @param f the complex array to be scaled\n+     * @param d the real scaling coefficient\n+     * @return a reference to the scaled array\n+     */\n+    public static Complex[] scaleArray(Complex[] f, double d) {\n+    \n+        for (int i = 0; i < f.length; i++) {\n+            f[i] = new Complex(d * f[i].getReal(), d * f[i].getImaginary());\n+        }\n+        return f;\n+    }\n+\n+}\n--- a/src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java\n+++ b/src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java\n             Assert.assertEquals(x[i], result[i], tolerance);\n         }\n \n-        FastFourierTransformer.scaleArray(x, FastMath.sqrt(0.5 * (x.length-1)));\n+        TransformUtils.scaleArray(x, FastMath.sqrt(0.5 * (x.length-1)));\n \n         transformer = FastCosineTransformer.createOrthogonal();\n         result = transformer.transform(y);\n--- a/src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java\n+++ b/src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java\n         }\n \n         double x2[] = {10.4, 21.6, 40.8, 13.6, 23.2, 32.8, 13.6, 19.2};\n-        FastFourierTransformer.scaleArray(x2, 1.0 / FastMath.sqrt(x2.length));\n+        TransformUtils.scaleArray(x2, 1.0 / FastMath.sqrt(x2.length));\n         Complex y2[] = y;\n \n         transformer = FastFourierTransformer.createUnitary();\n                 1.5), new Complex(-1, -.5)}, new Complex[] {new Complex(-2,\n                 -1.5), new Complex(0, .5)}};\n         for (int i = 0; i < goodOutput.length; i++) {\n-            FastFourierTransformer.scaleArray(\n+            TransformUtils.scaleArray(\n                 goodOutput[i],\n                 FastMath.sqrt(goodOutput[i].length) *\n                     FastMath.sqrt(goodOutput.length));\n--- a/src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java\n+++ b/src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java\n             Assert.assertEquals(x[i], result[i], tolerance);\n         }\n \n-        FastFourierTransformer.scaleArray(x, FastMath.sqrt(x.length / 2.0));\n+        TransformUtils.scaleArray(x, FastMath.sqrt(x.length / 2.0));\n         transformer = FastSineTransformer.createOrthogonal();\n \n         result = transformer.transform(y);", "timestamp": 1325736498, "metainfo": ""}