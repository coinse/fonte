{"sha": "4ae6314f2ae3a3bbb7c121be60c244e8d36a4424", "log": "Initial fixes to the iterators.  This fixes the default sparseIterator problem where a RealVector only contains zero elements, and add a sparseIterator to the OpenMapRealVector.  Still TODO: 1) add unit tests 2) remove *mapTo and *mapToSelf from OpenMapRealVector 3) fix javadocs 4) remove support for non-zero default values in OpenMapRealVector    ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n             if (current.getValue() == 0) {\n                 advance(current);\n             }\n-            next = new EntryImpl();\n-            next.setIndex(current.getIndex());\n-            advance(next);\n+            if(current.getIndex() >= 0){\n+                // There is at least one non-zero entry\n+                next = new EntryImpl();\n+                next.setIndex(current.getIndex());\n+                advance(next);\n+            } else {\n+                // The vector consists of only zero entries, so deny having a next\n+                current = null;\n+            }\n         }\n \n         /** Advance an entry up to the next non null one.\n--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n         return (double)entries.size()/(double)getDimension();\n     }\n \n+    /** @{InheritDoc} */\n+    public java.util.Iterator<Entry> sparseIterator() {\n+        return new OpenMapSparseIterator();\n+    }\n+    \n+    /**\n+     *  Implementation of <code>Entry</code> optimized for OpenMap.\n+     * <p>This implementation does not allow arbitrary calls to <code>setIndex</code>\n+     * since the order that entries are returned is undefined.\n+     */\n+    protected class OpenMapEntry extends Entry {\n+        private final Iterator iter;\n+\n+        protected OpenMapEntry(Iterator iter) {\n+            this.iter = iter;\n+        }\n+        /** {@InheritDoc} */\n+        @Override\n+        public double getValue() {\n+            return iter.value();\n+        }\n+\n+        /** {@InheritDoc} */\n+        @Override\n+        public void setValue(double value) {\n+            entries.put(iter.key(), value);\n+        }\n+        \n+        /** {@InheritDoc} */\n+        @Override\n+        public int getIndex() {\n+            return iter.key();\n+        }\n+    }\n+    \n+    /**\n+     *  Iterator class to do iteration over just the non-zero elements.\n+     *  <p>This implementation is fail-fast, so cannot be used to modify any zero element. \n+     *\n+     */\n+    \n+    protected class OpenMapSparseIterator implements java.util.Iterator<Entry> {\n+        private final Iterator iter;\n+        private final Entry current;\n+        \n+        protected OpenMapSparseIterator() {\n+            iter = entries.iterator();\n+            current = new OpenMapEntry(iter);\n+        }\n+\n+        /** {@InheritDoc} */\n+        public boolean hasNext() {\n+            return iter.hasNext();\n+        }\n+\n+        /** {@InheritDoc} */\n+        public Entry next() {\n+            iter.advance();\n+            return current;\n+        }\n+\n+        public void remove() {\n+            throw new UnsupportedOperationException(\"Not supported\");\n+       }\n+        \n+    }\n }", "timestamp": 1260513500, "metainfo": ""}