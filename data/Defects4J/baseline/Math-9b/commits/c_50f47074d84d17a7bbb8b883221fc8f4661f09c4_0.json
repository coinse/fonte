{"sha": "50f47074d84d17a7bbb8b883221fc8f4661f09c4", "log": "Javadoc only.  ", "commit": "\n--- a/src/java/org/apache/commons/math/util/ResizableDoubleArray.java\n+++ b/src/java/org/apache/commons/math/util/ResizableDoubleArray.java\n      * is thrown.\n      * \n      * @param original\n+     * @since 2.0\n      */\n     public ResizableDoubleArray(ResizableDoubleArray original) {\n         copy(original, this);\n         return discarded;\n     }\n        \n+    /**\n+     * Substitutes <code>value</code> for the most recently added value.\n+     * Returns the value that has been replaced. If the array is empty (i.e. \n+     * if {@link #numElements} is zero), a MathRuntimeException is thrown.\n+     * \n+     * @param value new value to substitute for the most recently added value\n+     * @return value that has been replaced in the array\n+     * @since 2.0\n+     */\n     public synchronized double substituteMostRecentElement(double value) {\n         if (numElements < 1) {\n             throw MathRuntimeException.createArrayIndexOutOfBoundsException(\n      * \n      * @param i  the number of elements to discard from the front of the array\n      * @throws IllegalArgumentException if i is greater than numElements.\n+     * @since 2.0\n      */\n     public synchronized void discardFrontElements(int i) {\n \n      * \n      * @param i  the number of elements to discard from the end of the array\n      * @throws IllegalArgumentException if i is greater than numElements.\n+     * @since 2.0\n      */\n     public synchronized void discardMostRecentElements(int i) {\n \n      * of the array, false if elements are to be discarded from the end\n      * of the array \n      * @throws IllegalArgumentException if i is greater than numElements.\n+     * @since 2.0\n      */\n     private synchronized void discardExtremeElements(int i,boolean front) {\n         if (i > numElements) {\n      * \n      * <p>Neither source nor dest may be null; otherwise a NullPointerException\n      * is thrown</p>\n+     * \n+     * @param source ResizableDoubleArray to copy\n+     * @param dest ResizableArray to replace with a copy of the source array\n+     * @since 2.0\n      * \n      */\n     public static void copy(ResizableDoubleArray source, ResizableDoubleArray dest) {\n      * \n      * @return a new ResizableDoubleArray with the same data and configuration\n      * properties as this\n+     * @since 2.0\n      */\n     public synchronized ResizableDoubleArray copy() {\n         ResizableDoubleArray result = new ResizableDoubleArray();\n      * @param object object to be compared for equality with this\n      * @return true iff object is a ResizableDoubleArray with the same data and\n      * properties as this\n-     *\n+     * @since 2.0\n      */\n     public boolean equals(Object object) {\n         if (object == this ) {\n      * Returns a hash code consistent with equals.\n      * \n      * @return hash code representing this ResizableDoubleArray\n+     * @since 2.0\n      */\n     public int hashCode() {\n         int[] hashData = new int[7];", "timestamp": 1227384986, "metainfo": ""}