{"sha": "74d2d6b4c0bab25b4af727bfccd24ff1c1a82318", "log": "MATH-795: in ArrayRealVectorTest, cleaned up the minimal implementation of RealVector, RealVectorTestImpl. This minimal implementation used to be cluttered with unnecessary method implementations, which should have been removed when the interface RealVector was changed into an abstract class.   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n package org.apache.commons.math3.linear;\n \n import java.io.Serializable;\n-import java.util.Iterator;\n \n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n-import org.apache.commons.math3.util.FastMath;\n import org.junit.Assert;\n import org.junit.Test;\n \n  */\n public class ArrayRealVectorTest extends RealVectorAbstractTest {\n \n-    // Testclass to test the RealVector interface\n-    // only with enough content to support the test\n+    /**\n+     * Minimal implementation of the {@link RealVector} abstract class, for\n+     * mixed types unit tests.\n+     */\n     public static class RealVectorTestImpl extends RealVector\n         implements Serializable {\n \n         /** Serializable version identifier. */\n-        private static final long serialVersionUID = 4715341047369582908L;\n+        private static final long serialVersionUID = 20120706L;\n \n         /** Entries of the vector. */\n         protected double data[];\n         }\n \n         @Override\n-        public RealVector map(UnivariateFunction function) {\n-            throw unsupported();\n-        }\n-\n-        @Override\n         public RealVector mapToSelf(UnivariateFunction function) {\n-            throw unsupported();\n-        }\n-\n-        @Override\n-        public Iterator<Entry> iterator() {\n-            return new Iterator<Entry>() {\n-                int i = 0;\n-                public boolean hasNext() {\n-                    return i<data.length;\n-                }\n-                public Entry next() {\n-                    final int j = i++;\n-                    Entry e = new Entry() {\n-                        @Override\n-                        public double getValue() {\n-                            return data[j];\n-                        }\n-                        @Override\n-                        public void setValue(double newValue) {\n-                            data[j] = newValue;\n-                        }\n-                    };\n-                    e.setIndex(j);\n-                    return e;\n-                }\n-                public void remove() { }\n-            };\n-        }\n-\n-        @Override\n-        public Iterator<Entry> sparseIterator() {\n-            return iterator();\n+            for (int i = 0; i < data.length; i++) {\n+                data[i] = function.value(data[i]);\n+            }\n+            return this;\n         }\n \n         @Override\n         public RealVector copy() {\n-            throw unsupported();\n-        }\n-\n-        @Override\n-        public RealVector add(RealVector v) {\n-            throw unsupported();\n-        }\n-\n-        public RealVector add(double[] v) {\n-            throw unsupported();\n-        }\n-\n-        @Override\n-        public RealVector subtract(RealVector v) {\n-            throw unsupported();\n-        }\n-\n-        public RealVector subtract(double[] v) {\n-            throw unsupported();\n-        }\n-\n-        @Override\n-        public RealVector mapAdd(double d) {\n-            throw unsupported();\n-        }\n-\n-        @Override\n-        public RealVector mapAddToSelf(double d) {\n-            throw unsupported();\n-        }\n-\n-        @Override\n-        public RealVector mapSubtract(double d) {\n-            throw unsupported();\n-        }\n-\n-        @Override\n-        public RealVector mapSubtractToSelf(double d) {\n-            throw unsupported();\n-        }\n-\n-        @Override\n-        public RealVector mapMultiply(double d) {\n-            double[] out = new double[data.length];\n-            for (int i = 0; i < data.length; i++) {\n-                out[i] = data[i] * d;\n-            }\n-            return new ArrayRealVector(out);\n-        }\n-\n-        @Override\n-        public RealVector mapMultiplyToSelf(double d) {\n-            throw unsupported();\n-        }\n-\n-        @Override\n-        public RealVector mapDivide(double d) {\n-            throw unsupported();\n-        }\n-\n-        @Override\n-        public RealVector mapDivideToSelf(double d) {\n-            throw unsupported();\n+            return new RealVectorTestImpl(data);\n         }\n \n         @Override\n             throw unsupported();\n         }\n \n-        public RealVector ebeMultiply(double[] v) {\n-            throw unsupported();\n-        }\n-\n         @Override\n         public RealVector ebeDivide(RealVector v) {\n-            throw unsupported();\n-        }\n-\n-        public RealVector ebeDivide(double[] v) {\n-            throw unsupported();\n-        }\n-\n-        @Override\n-        public double dotProduct(RealVector v) {\n-            double dot = 0;\n-            for (int i = 0; i < data.length; i++) {\n-                dot += data[i] * v.getEntry(i);\n-            }\n-            return dot;\n-        }\n-\n-        public double dotProduct(double[] v) {\n-            double dot = 0;\n-            for (int i = 0; i < data.length; i++) {\n-                dot += data[i] * v[i];\n-            }\n-            return dot;\n-        }\n-\n-        @Override\n-        public double cosine(RealVector v) {\n-            throw unsupported();\n-        }\n-\n-        public double cosine(double[] v) {\n-            throw unsupported();\n-        }\n-\n-        @Override\n-        public double getNorm() {\n-            double sqrNorm = 0.0;\n-            for (int i = 0; i < data.length; i++) {\n-                sqrNorm += data[i] * data[i];\n-            }\n-            return FastMath.sqrt(sqrNorm);\n-        }\n-\n-        @Override\n-        public double getL1Norm() {\n-            throw unsupported();\n-        }\n-\n-        @Override\n-        public double getLInfNorm() {\n-            throw unsupported();\n-        }\n-\n-        @Override\n-        public double getDistance(RealVector v) {\n-            throw unsupported();\n-        }\n-\n-        public double getDistance(double[] v) {\n-            throw unsupported();\n-        }\n-\n-        @Override\n-        public double getL1Distance(RealVector v) {\n-            throw unsupported();\n-        }\n-\n-        public double getL1Distance(double[] v) {\n-            throw unsupported();\n-        }\n-\n-        @Override\n-        public double getLInfDistance(RealVector v) {\n-            throw unsupported();\n-        }\n-\n-        public double getLInfDistance(double[] v) {\n-            throw unsupported();\n-        }\n-\n-        @Override\n-        public RealVector unitVector() {\n-            throw unsupported();\n-        }\n-\n-        @Override\n-        public void unitize() {\n-            throw unsupported();\n-        }\n-\n-        public RealVector projection(double[] v) {\n-            throw unsupported();\n-        }\n-\n-        @Override\n-        public RealMatrix outerProduct(RealVector v) {\n-            throw unsupported();\n-        }\n-\n-        public RealMatrix outerProduct(double[] v) {\n             throw unsupported();\n         }\n \n             throw unsupported();\n         }\n \n-        public RealVector append(double[] a) {\n-            throw unsupported();\n-        }\n-\n         @Override\n         public RealVector getSubVector(int index, int n) {\n             throw unsupported();\n \n         @Override\n         public void setSubVector(int index, RealVector v) {\n-            throw unsupported();\n-        }\n-\n-        public void setSubVector(int index, double[] v) {\n             throw unsupported();\n         }\n \n \n         @Override\n         public boolean isInfinite() {\n-            throw unsupported();\n-        }\n-\n-        public RealVector combine(double a, double b, double[] y) {\n-            throw unsupported();\n-        }\n-\n-        @Override\n-        public RealVector combine(double a, double b, RealVector y) {\n-            throw unsupported();\n-        }\n-\n-        public RealVector combineToSelf(double a, double b, double[] y) {\n-            throw unsupported();\n-        }\n-\n-        @Override\n-        public RealVector combineToSelf(double a, double b, RealVector y) {\n             throw unsupported();\n         }\n     }\n     }\n \n     @Override\n-    public RealVector createAlien(double[] data) {\n+    public RealVector createAlien(final double[] data) {\n         return new RealVectorTestImpl(data);\n     }\n ", "timestamp": 1341597582, "metainfo": ""}