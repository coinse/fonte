{"sha": "3cf4273631140f5dc9913cb1b0785c468ba441a8", "log": "Added a simple formatting class for Complex numbers. I had considered just implementing toString() on the complex class, but I decided aginst it because some fields prefer \"j\" to \"i\".  This ComplexFormat class is very straightforward, will a number of TODOs, it is accompanied by a 10 tests.   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/complex/ComplexFormat.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2004 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Geronimo\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Geronimo\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ * ====================================================================\n+ */\n+\n+package org.apache.commons.math.complex;\n+\n+import java.text.NumberFormat;\n+\n+// @TODO Maybe, eventually at least, this should work with NumberFormat\n+//       but in the mean time.  This scratches an itch\n+public class ComplexFormat {\n+\n+\tprivate static final ComplexFormat DEFAULT = new ComplexFormat();\n+\n+\t// @TODO This class only allows for max fraction digits, we might want to allow other parameters\n+\n+    private String imaginaryCharacter = \"i\";\n+    private int fractionDigits = 2;\n+\n+    public ComplexFormat() {}\n+\n+    public ComplexFormat(String imaginaryCharacter) {\n+        this.imaginaryCharacter = imaginaryCharacter;\n+    }\n+\n+    public ComplexFormat(String imaginaryCharacter, int fractionDigits) {\n+        this.imaginaryCharacter = imaginaryCharacter;\n+        this.fractionDigits = fractionDigits;\n+    }\n+\n+\t// @TODO Javadoc for this format method\n+    public String format(Complex c) {\n+\n+\t\t// @TODO What happens when either a real or imaginary is NaN, INIFINITY, etc?\n+\n+        NumberFormat format = NumberFormat.getInstance();\n+        format.setMaximumFractionDigits( fractionDigits );\n+\n+        StringBuffer buffer = new StringBuffer();\n+\n+        buffer.append( format.format( c.getReal() ) );\n+\n+        if( c.getImaginary() < 0 ) {\n+            buffer.append( \" - \" );\n+            buffer.append( format.format( Math.abs(c.getImaginary()) ) );\n+            buffer.append( imaginaryCharacter );\n+        } else if( c.getImaginary() > 0 ) {\n+            buffer.append( \" + \" );\n+            buffer.append( format.format( c.getImaginary() ) );\n+            buffer.append( imaginaryCharacter );\n+        }            \n+        \n+        return( buffer.toString() );\n+\n+    }\n+    \n+    public static String formatComplex( Complex c ) {\n+    \treturn DEFAULT.format( c );\n+    }\n+}\n+\n+\n+    \n--- /dev/null\n+++ b/src/test/org/apache/commons/math/complex/ComplexFormatTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2004 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Geronimo\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Geronimo\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ * ====================================================================\n+ */\n+\n+package org.apache.commons.math.complex;\n+\n+import junit.framework.TestCase;\n+\n+public class ComplexFormatTest extends TestCase {\n+ \n+\tComplexFormat complexFormat = null;\n+\tComplexFormat complexFormatJ = null;\n+\n+    public ComplexFormatTest(String name) {\n+        super( name );\n+    }\n+\n+\tprotected void setUp() throws Exception {\n+\t\tcomplexFormat = new ComplexFormat();\n+\t\tcomplexFormatJ = new ComplexFormat(\"j\");\n+\t}\n+   \n+    public void testSimpleNoDecimals() {\n+        Complex c = new Complex(1, 1);\n+        assertEquals( complexFormat.format( c ), \"1 + 1i\" );\n+    }\n+\n+\tpublic void testSimpleWithDecimals() {\n+\t\tComplex c = new Complex(1.23, 1.43);\n+\t\tassertEquals( complexFormat.format( c ), \"1.23 + 1.43i\" );\n+\t}\n+\n+\tpublic void testSimpleWithDecimalsTrunc() {\n+\t\tComplex c = new Complex(1.2323, 1.4343);\n+\t\tassertEquals( complexFormat.format( c ), \"1.23 + 1.43i\" );\n+\t}\n+\n+\tpublic void testNegativeReal() {\n+\t\tComplex c = new Complex(-1.2323, 1.4343);\n+\t\tassertEquals( complexFormat.format( c ), \"-1.23 + 1.43i\" );\n+\t}\n+\n+\tpublic void testNegativeImaginary() {\n+\t\tComplex c = new Complex(1.2323, -1.4343);\n+\t\tassertEquals( complexFormat.format( c ), \"1.23 - 1.43i\" );\n+\t}\n+\n+\tpublic void testNegativeBoth() {\n+\t\tComplex c = new Complex(-1.2323, -1.4343);\n+\t\tassertEquals( complexFormat.format( c ), \"-1.23 - 1.43i\" );\n+\t}\n+\n+\tpublic void testZeroReal() {\n+\t\tComplex c = new Complex(0.0, -1.4343);\n+\t\tassertEquals( complexFormat.format( c ), \"0 - 1.43i\" );\n+\t}\n+\n+\tpublic void testZeroImaginary() {\n+\t\tComplex c = new Complex(30.233, 0);\n+\t\tassertEquals( complexFormat.format( c ), \"30.23\" );\n+\t}\n+\n+\tpublic void testDifferentImaginaryChar() {\n+\t\tComplex c = new Complex(1, 1);\n+\t\tassertEquals( complexFormatJ.format( c ), \"1 + 1j\" );\n+\t}\n+\t\n+\tpublic void testStaticFormatComplex() {\n+\t\tComplex c = new Complex(232.222, -342.33);\n+\t\tassertEquals( ComplexFormat.formatComplex( c ), \"232.22 - 342.33i\" );\n+\t}\n+\n+}", "timestamp": 1075350747, "metainfo": ""}