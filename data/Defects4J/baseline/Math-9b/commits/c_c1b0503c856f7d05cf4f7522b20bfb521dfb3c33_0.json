{"sha": "c1b0503c856f7d05cf4f7522b20bfb521dfb3c33", "log": "MATH-894 Changed type of \"expansionFactor\" and \"contractionCriteria\" from \"float\" to \"double\" and deprecated methods and constructors that use \"float\".   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java\n+++ b/src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java\n import org.apache.commons.math3.exception.MathInternalError;\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n+import org.apache.commons.math3.exception.NumberIsTooSmallException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n \n /**\n \n     /** Default value for initial capacity. */\n     private static final int DEFAULT_INITIAL_CAPACITY = 16;\n-    /** Default value for initial capacity. */\n-    private static final float DEFAULT_EXPANSION_FACTOR = 2.0f;\n+    /** Default value for array size modifier. */\n+    private static final double DEFAULT_EXPANSION_FACTOR = 2.0;\n+    /**\n+     * Default value for the difference between {@link #contractionCriteria}\n+     * and {@link #expansionFactor}.\n+     */\n+    private static final double DEFAULT_CONTRACTION_DELTA = 0.5;\n \n     /**\n      * The contraction criteria determines when the internal array will be\n      * contracted to fit the number of elements contained in the element\n      *  array + 1.\n      */\n-    private float contractionCriteria = 2.5f;\n+    private double contractionCriteria = 2.5;\n \n     /**\n      * The expansion factor of the array.  When the array needs to be expanded,\n      * {@code internalArray.length + expansionFactor} if\n      * {@code expansionMode} is set to ADDITIVE_MODE.\n      */\n-    private float expansionFactor = 2.0f;\n+    private double expansionFactor = 2.0;\n \n     /**\n      * Determines whether array expansion by {@code expansionFactor}\n     public ResizableDoubleArray(double[] initialArray) {\n         this(DEFAULT_INITIAL_CAPACITY,\n              DEFAULT_EXPANSION_FACTOR,\n-             0.5f + DEFAULT_EXPANSION_FACTOR,\n+             DEFAULT_CONTRACTION_DELTA + DEFAULT_EXPANSION_FACTOR,\n              ExpansionMode.MULTIPLICATIVE,\n              initialArray);\n     }\n      * @param expansionFactor The array will be expanded based on this\n      * parameter.\n      * @throws MathIllegalArgumentException if parameters are not valid.\n-     */\n+     * @deprecated As of 3.1. Please use\n+     * {@link #ResizableDoubleArray(int,double)} instead.\n+     */\n+    @Deprecated\n     public ResizableDoubleArray(int initialCapacity,\n                                 float expansionFactor)\n         throws MathIllegalArgumentException {\n         this(initialCapacity,\n+             (double) expansionFactor);\n+    }\n+\n+    /**\n+     * Creates an instance with the specified initial capacity\n+     * and expansion factor.\n+     * The remaining properties take default values:\n+     * <ul>\n+     *  <li>{@code expansionMode = MULTIPLICATIVE}</li>\n+     *  <li>{@code contractionFactor = 0.5 + expansionFactor}</li>\n+     * </ul>\n+     * <br/>\n+     * Throws IllegalArgumentException if the following conditions are\n+     * not met:\n+     * <ul>\n+     *  <li>{@code initialCapacity > 0}</li>\n+     *  <li>{@code expansionFactor > 1}</li>\n+     * </ul>\n+     *\n+     * @param initialCapacity Initial size of the internal storage array.\n+     * @param expansionFactor The array will be expanded based on this\n+     * parameter.\n+     * @throws MathIllegalArgumentException if parameters are not valid.\n+     */\n+    public ResizableDoubleArray(int initialCapacity,\n+                                double expansionFactor)\n+        throws MathIllegalArgumentException {\n+        this(initialCapacity,\n              expansionFactor,\n-             0.5f + expansionFactor);\n+             DEFAULT_CONTRACTION_DELTA + expansionFactor);\n     }\n \n     /**\n      * parameter.\n      * @param contractionCriteria Contraction criteria.\n      * @throws MathIllegalArgumentException if parameters are not valid.\n-     */\n+     * @deprecated As of 3.1. Please use\n+     * {@link #ResizableDoubleArray(int,double,double)} instead.\n+     */\n+    @Deprecated\n     public ResizableDoubleArray(int initialCapacity,\n                                 float expansionFactor,\n                                 float contractionCriteria)\n+        throws MathIllegalArgumentException {\n+        this(initialCapacity,\n+             (double) expansionFactor,\n+             (double) contractionCriteria);\n+    }\n+\n+    /**\n+     * Creates an instance with the specified initialCapacity,\n+     * expansionFactor, and contractionCriteria.\n+     * The expansion mode will default to {@code MULTIPLICATIVE}.\n+     * <br/>\n+     * Throws IllegalArgumentException if the following conditions are\n+     * not met:\n+     * <ul>\n+     *  <li>{@code initialCapacity > 0}</li>\n+     *  <li>{@code expansionFactor > 1}</li>\n+     *  <li>{@code contractionFactor >= expansionFactor}</li>\n+     * </ul>\n+     *\n+     * @param initialCapacity Initial size of the internal storage array..\n+     * @param expansionFactor The array will be expanded based on this\n+     * parameter.\n+     * @param contractionCriteria Contraction criteria.\n+     * @throws MathIllegalArgumentException if parameters are not valid.\n+     */\n+    public ResizableDoubleArray(int initialCapacity,\n+                                double expansionFactor,\n+                                double contractionCriteria)\n         throws MathIllegalArgumentException {\n         this(initialCapacity,\n              expansionFactor,\n      * @throws MathIllegalArgumentException if the parameters are not valid.\n      */\n     public ResizableDoubleArray(int initialCapacity,\n-                                float expansionFactor,\n-                                float contractionCriteria,\n+                                double expansionFactor,\n+                                double contractionCriteria,\n                                 ExpansionMode expansionMode,\n                                 double ... data)\n         throws MathIllegalArgumentException {\n         return discarded;\n     }\n \n-\n     /**\n      * Checks the expansion factor and the contraction criteria and throws an\n      * IllegalArgumentException if the contractionCriteria is less than the\n      * @param contraction criteria to be checked\n      * @throws MathIllegalArgumentException if the contractionCriteria is less than\n      * the expansionCriteria.\n+     * @deprecated As of 3.1. Please use\n+     * {@link #checkContractExpand(double,double)} instead.\n      */\n     protected void checkContractExpand(float contraction, float expansion)\n         throws MathIllegalArgumentException {\n-\n+        checkContractExpand((double) contraction,\n+                            (double) expansion);\n+    }\n+\n+    /**\n+     * Checks the expansion factor and the contraction criteria and throws an\n+     * IllegalArgumentException if the contractionCriteria is less than the\n+     * expansionCriteria\n+     *\n+     * @param expansion factor to be checked\n+     * @param contraction criteria to be checked\n+     * @throws MathIllegalArgumentException if the contractionCriteria is less than\n+     * the expansionCriteria.\n+     */\n+    protected void checkContractExpand(double contraction,\n+                                       double expansion)\n+        throws MathIllegalArgumentException {\n         if (contraction < expansion) {\n-            throw new MathIllegalArgumentException(\n-                    LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR,\n-                    contraction, expansion);\n-        }\n-\n-        if (contraction <= 1.0) {\n-            throw new MathIllegalArgumentException(\n-                    LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_ONE,\n-                    contraction);\n-        }\n-\n-        if (expansion <= 1.0) {\n-            throw new MathIllegalArgumentException(\n-                    LocalizedFormats.EXPANSION_FACTOR_SMALLER_THAN_ONE,\n-                    expansion);\n+            final NumberIsTooSmallException e = new NumberIsTooSmallException(contraction, 1, true);\n+            e.getContext().addMessage(LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR,\n+                                      contraction, expansion);\n+            throw e;\n+        }\n+\n+        if (contraction <= 1) {\n+            final NumberIsTooSmallException e = new NumberIsTooSmallException(contraction, 1, false);\n+            e.getContext().addMessage(LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_ONE,\n+                                      contraction);\n+            throw e;\n+        }\n+\n+        if (expansion <= 1) {\n+            final NumberIsTooSmallException e = new NumberIsTooSmallException(contraction, 1, false);\n+            e.getContext().addMessage(LocalizedFormats.EXPANSION_FACTOR_SMALLER_THAN_ONE,\n+                                      expansion);\n+            throw e;\n         }\n     }\n \n         if (expansionMode == ExpansionMode.MULTIPLICATIVE) {\n             newSize = (int) FastMath.ceil(internalArray.length * expansionFactor);\n         } else {\n-            newSize = internalArray.length + FastMath.round(expansionFactor);\n+            newSize = (int) (internalArray.length + FastMath.round(expansionFactor));\n         }\n         final double[] tempArray = new double[newSize];\n \n      * <code>contractionFactor.</code>\n      *\n      * @return the contraction criteria used to reclaim memory.\n-     */\n+     * @deprecated As of 3.1. Please use {@link #getContractionCriterion()}\n+     * instead.\n+     */\n+    @Deprecated\n     public float getContractionCriteria() {\n+        return (float) getContractionCriterion();\n+    }\n+\n+    /**\n+     * The contraction criterion defines when the internal array will contract\n+     * to store only the number of elements in the element array.\n+     * If  the <code>expansionMode</code> is <code>MULTIPLICATIVE_MODE</code>,\n+     * contraction is triggered when the ratio between storage array length\n+     * and <code>numElements</code> exceeds <code>contractionFactor</code>.\n+     * If the <code>expansionMode</code> is <code>ADDITIVE_MODE</code>, the\n+     * number of excess storage locations is compared to\n+     * <code>contractionFactor.</code>\n+     *\n+     * @return the contraction criterion used to reclaim memory.\n+     */\n+    public double getContractionCriterion() {\n         return contractionCriteria;\n     }\n \n      * is 2.0.\n      *\n      * @return the expansion factor of this expandable double array\n-     */\n+     * @deprecated As of 3.1. Return type will be changed to \"double\" in 4.0.\n+     */\n+    @Deprecated\n     public float getExpansionFactor() {\n-        return expansionFactor;\n+        return (float) expansionFactor;\n     }\n \n     /**", "timestamp": 1353085156, "metainfo": ""}