{"sha": "8a1a9165920bb3d1223a79f12bb898724846953b", "log": "added tests for both the <= and the >= versions of the constraints one leads to 0 as a solution, the other one leads to no feasible solution JIRA: MATH-290  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java\n     }\n \n     @Test\n-    public void testMath290() throws OptimizationException {\n+    public void testMath290GEQ() throws OptimizationException {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 1, 5 }, 0 );\n         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n         constraints.add(new LinearConstraint(new double[] { 2, 0 }, Relationship.GEQ, -1.0));\n         SimplexSolver solver = new SimplexSolver();\n         RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n-        assertNotNull(solution);\n+        assertEquals(0, solution.getValue(), .0000001);\n+        assertEquals(0, solution.getPoint()[0], .0000001);\n+        assertEquals(0, solution.getPoint()[1], .0000001);\n+    }\n+\n+    @Test(expected=NoFeasibleSolutionException.class)\n+    public void testMath290LEQ() throws OptimizationException {\n+        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 1, 5 }, 0 );\n+        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n+        constraints.add(new LinearConstraint(new double[] { 2, 0 }, Relationship.LEQ, -1.0));\n+        SimplexSolver solver = new SimplexSolver();\n+        solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n     }\n \n     @Test", "timestamp": 1251360301, "metainfo": ""}