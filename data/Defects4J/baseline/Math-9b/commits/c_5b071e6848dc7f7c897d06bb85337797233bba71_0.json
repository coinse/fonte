{"sha": "5b071e6848dc7f7c897d06bb85337797233bba71", "log": "Added ceil and floor to DerivativeStructure.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java\n import org.apache.commons.math3.FieldElement;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.NumberIsTooLargeException;\n+import org.apache.commons.math3.util.FastMath;\n \n /** Class representing both the value and the differentials of a function.\n  * <p>This class is the workhorse of the differentiation package.</p>\n         }\n     }\n \n+    /** Get the smallest whole number larger than instance.\n+     * @return ceil(this)\n+     */\n+    public DerivativeStructure ceil() {\n+        return new DerivativeStructure(compiler.getFreeParameters(),\n+                                       compiler.getOrder(),\n+                                       FastMath.ceil(data[0]));\n+    }\n+\n+    /** Get the largest whole number smaller than instance.\n+     * @return floor(this)\n+     */\n+    public DerivativeStructure floor() {\n+        return new DerivativeStructure(compiler.getFreeParameters(),\n+                                       compiler.getOrder(),\n+                                       FastMath.floor(data[0]));\n+    }\n+\n     /** {@inheritDoc} */\n     public DerivativeStructure reciprocal() {\n         final DerivativeStructure result = new DerivativeStructure(compiler);\n--- a/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java\n     }\n \n     @Test\n+    public void testCeilFloor() {\n+\n+        DerivativeStructure x = new DerivativeStructure(1, 1, 0, -1.5);\n+        Assert.assertEquals(-1.5, x.getPartialDerivative(0), 1.0e-15);\n+        Assert.assertEquals(+1.0, x.getPartialDerivative(1), 1.0e-15);\n+        Assert.assertEquals(-1.0, x.ceil().getPartialDerivative(0), 1.0e-15);\n+        Assert.assertEquals(+0.0, x.ceil().getPartialDerivative(1), 1.0e-15);\n+        Assert.assertEquals(-2.0, x.floor().getPartialDerivative(0), 1.0e-15);\n+        Assert.assertEquals(+0.0, x.floor().getPartialDerivative(1), 1.0e-15);\n+\n+    }\n+\n+    @Test\n     public void testField() {\n         for (int maxOrder = 1; maxOrder < 5; ++maxOrder) {\n             DerivativeStructure x = new DerivativeStructure(3, maxOrder, 0, 1.0);", "timestamp": 1345111593, "metainfo": ""}