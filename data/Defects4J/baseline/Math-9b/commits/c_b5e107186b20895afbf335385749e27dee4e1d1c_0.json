{"sha": "b5e107186b20895afbf335385749e27dee4e1d1c", "log": "Changed method name to be consistent with Covariance, added double[][] compute method.  ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\n+++ b/src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\n     public PearsonsCorrelation(RealMatrix matrix) {\n         checkSufficientData(matrix);\n         nObs = matrix.getRowDimension();\n-        correlationMatrix = computeCorrelation(matrix);\n+        correlationMatrix = computeCorrelationMatrix(matrix);\n     }\n     \n     /**\n      * @param matrix matrix with columns representing variables to correlate\n      * @return correlation matrix\n      */\n-    public RealMatrix computeCorrelation(RealMatrix matrix) {\n+    public RealMatrix computeCorrelationMatrix(RealMatrix matrix) {\n         int nVars = matrix.getColumnDimension();\n         RealMatrix outMatrix = new DenseRealMatrix(nVars, nVars);\n         for (int i = 0; i < nVars; i++) {\n             outMatrix.setEntry(i, i, 1d);\n         }\n         return outMatrix;\n+    }\n+    \n+    /**\n+     * Computes the correlation matrix for the columns of the\n+     * input rectangular array.  The colums of the array represent values\n+     * of variables to be correlated.\n+     * \n+     * @param data matrix with columns representing variables to correlate\n+     * @return correlation matrix\n+     */\n+    public RealMatrix computeCorrelationMatrix(double[][] data) {\n+       return computeCorrelationMatrix(new DenseRealMatrix(data));\n     }\n     \n     /**\n--- a/src/test/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java\n+++ b/src/test/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java\n                 corrFromCovInstance2.getCorrelationStandardErrors(), 10E-15);\n     }\n     \n+     \n+    public void testConsistency() {\n+        RealMatrix matrix = createRealMatrix(longleyData, 16, 7);\n+        PearsonsCorrelation corrInstance = new PearsonsCorrelation(matrix); \n+        double[][] data = matrix.getData();\n+        double[] x = matrix.getColumn(0);\n+        double[] y = matrix.getColumn(1);\n+        assertEquals(new PearsonsCorrelation().correlation(x, y), \n+                corrInstance.getCorrelationMatrix().getEntry(0, 1), Double.MIN_VALUE);\n+        TestUtils.assertEquals(\"Correlation matrix\", corrInstance.getCorrelationMatrix(),\n+                new PearsonsCorrelation().computeCorrelationMatrix(data), Double.MIN_VALUE);\n+    }\n+    \n     protected RealMatrix createRealMatrix(double[] data, int nRows, int nCols) {\n         double[][] matrixData = new double[nRows][nCols];\n         int ptr = 0;", "timestamp": 1239562109, "metainfo": ""}