{"sha": "2be1c1f73355fe80ed84c9bfab3a91bb24dd63c5", "log": "Added bound to simulation loop in nextPoisson().   ", "commit": "\n--- a/src/java/org/apache/commons/math/random/RandomDataImpl.java\n+++ b/src/java/org/apache/commons/math/random/RandomDataImpl.java\n  * (so secure sequences started with calls to reseedSecure(long) won't be \n  * identical).</li></ul>\n  * \n- * @version $Revision: 1.10 $ $Date: 2004/01/29 00:49:01 $\n+ * @version $Revision: 1.11 $ $Date: 2004/01/31 06:58:46 $\n  */\n public class RandomDataImpl implements RandomData, Serializable {\n     \n     }\n     \n     /** \n+     * Generates a random long value from the Poisson distribution with the given mean.\n+     * <p>\n      * <strong>Algorithm Description</strong>:\n      * Uses simulation of a Poisson process using Uniform deviates, as \n      * described \n      * <a href =\"http://dmawww.epfl.ch/benarous/Pmmi/interactive/rng7.htm\">\n-     * here</a>\n+     * here.</a>\n+     * <p>  \n+     * The Poisson process (and hence value returned) is bounded by 1000 * mean.\n      * @param mean mean of the Poisson distribution.\n      * @return the random Poisson value.\n      */\n         double p = Math.exp(-mean);\n         long n = 0;\n         double r = 1.0d;\n+        double rnd = 1.0d;\n         Random rand = getRan();\n-        while (true) {\n-            double rnd = rand.nextDouble();\n+        while (n < 1000 * mean) {     \n+            rnd = rand.nextDouble();\n             r = r * rnd;\n             if (r >= p) {\n                 n++;\n                 return n;\n             }\n         }\n+        return n;\n     }\n     \n     /**", "timestamp": 1075532326, "metainfo": ""}