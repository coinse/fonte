{"sha": "2fdf5aae5d47b853112e4b51551f6c8e1350903b", "log": "Removed the ConvergingAlgorithm interface and ConvergingAlgorithmImpl class  JIRA: MATH-500  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java\n \n     }\n \n-    @Deprecated\n-    public double integrate(final double min, final double max)\n-        throws ConvergenceException,  MathUserException, IllegalArgumentException {\n-        return integrate(f, min, max);\n-    }\n-\n     /** {@inheritDoc} */\n     public double integrate(final UnivariateRealFunction f, final double min, final double max)\n         throws ConvergenceException,  MathUserException, IllegalArgumentException {\n--- a/src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java\n public class RombergIntegrator extends UnivariateRealIntegratorImpl {\n \n     /**\n-     * Construct an integrator for the given function.\n-     *\n-     * @param f function to integrate\n-     * @deprecated as of 2.0 the integrand function is passed as an argument\n-     * to the {@link #integrate(UnivariateRealFunction, double, double)}method.\n-     */\n-    @Deprecated\n-    public RombergIntegrator(UnivariateRealFunction f) {\n-        super(f, 32);\n-    }\n-\n-    /**\n      * Construct an integrator.\n      */\n     public RombergIntegrator() {\n         super(32);\n-    }\n-\n-    @Deprecated\n-    public double integrate(final double min, final double max)\n-        throws MaxCountExceededException, MathUserException, IllegalArgumentException {\n-        return integrate(f, min, max);\n     }\n \n     /** {@inheritDoc} */\n--- a/src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java\n public class SimpsonIntegrator extends UnivariateRealIntegratorImpl {\n \n     /**\n-     * Construct an integrator for the given function.\n-     *\n-     * @param f function to integrate\n-     * @deprecated as of 2.0 the integrand function is passed as an argument\n-     * to the {@link #integrate(UnivariateRealFunction, double, double)}method.\n-     */\n-    @Deprecated\n-    public SimpsonIntegrator(UnivariateRealFunction f) {\n-        super(f, 64);\n-    }\n-\n-    /**\n      * Construct an integrator.\n      */\n     public SimpsonIntegrator() {\n         super(64);\n-    }\n-\n-    @Deprecated\n-    public double integrate(final double min, final double max)\n-        throws MaxCountExceededException, MathUserException, IllegalArgumentException {\n-        return integrate(f, min, max);\n     }\n \n     /** {@inheritDoc} */\n--- a/src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java\n \n     /** Intermediate result. */\n     private double s;\n-\n-    /**\n-     * Construct an integrator for the given function.\n-     *\n-     * @param f function to integrate\n-     * @deprecated as of 2.0 the integrand function is passed as an argument\n-     * to the {@link #integrate(UnivariateRealFunction, double, double)}method.\n-     */\n-    @Deprecated\n-    public TrapezoidIntegrator(UnivariateRealFunction f) {\n-        super(f, 64);\n-    }\n \n     /**\n      * Construct an integrator.\n         }\n     }\n \n-    @Deprecated\n-    public double integrate(final double min, final double max)\n-        throws MaxCountExceededException, MathUserException, IllegalArgumentException {\n-        return integrate(f, min, max);\n-    }\n-\n     /** {@inheritDoc} */\n     public double integrate(final UnivariateRealFunction f, final double min, final double max)\n         throws MaxCountExceededException, MathUserException, IllegalArgumentException {\n--- a/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java\n  * @version $Revision$ $Date$\n  * @since 1.2\n  */\n-public interface UnivariateRealIntegrator extends ConvergingAlgorithm {\n+public interface UnivariateRealIntegrator {\n \n-   /**\n+    /**\n+     * Set the upper limit for the number of iterations.\n+     * <p>\n+     * Usually a high iteration count indicates convergence problems. However,\n+     * the \"reasonable value\" varies widely for different algorithms. Users are\n+     * advised to use the default value supplied by the algorithm.</p>\n+     * <p>\n+     * A {@link ConvergenceException} will be thrown if this number\n+     * is exceeded.</p>\n+     *\n+     * @param count maximum number of iterations\n+     */\n+    public void setMaximalIterationCount(int count);\n+\n+    /**\n+     * Get the upper limit for the number of iterations.\n+     *\n+     * @return the actual upper limit\n+     */\n+    public int getMaximalIterationCount();\n+\n+    /**\n+     * Set the absolute accuracy.\n+     * <p>\n+     * The default is usually chosen so that results in the interval\n+     * -10..-0.1 and +0.1..+10 can be found with a reasonable accuracy. If the\n+     * expected absolute value of your results is of much smaller magnitude, set\n+     * this to a smaller value.</p>\n+     * <p>\n+     * Algorithms are advised to do a plausibility check with the relative\n+     * accuracy, but clients should not rely on this.</p>\n+     *\n+     * @param accuracy the accuracy.\n+     * @throws IllegalArgumentException if the accuracy can't be achieved by\n+     * the solver or is otherwise deemed unreasonable.\n+     */\n+    public void setAbsoluteAccuracy(double accuracy);\n+\n+    /**\n+     * Get the actual absolute accuracy.\n+     *\n+     * @return the accuracy\n+     */\n+    public double getAbsoluteAccuracy();\n+\n+    /**\n+     * Set the relative accuracy.\n+     * <p>\n+     * This is used to stop iterations if the absolute accuracy can't be\n+     * achieved due to large values or short mantissa length.</p>\n+     * <p>\n+     * If this should be the primary criterion for convergence rather then a\n+     * safety measure, set the absolute accuracy to a ridiculously small value,\n+     * like {@link org.apache.commons.math.util.MathUtils#SAFE_MIN MathUtils.SAFE_MIN}.</p>\n+     *\n+     * @param accuracy the relative accuracy.\n+     */\n+    public void setRelativeAccuracy(double accuracy);\n+\n+    /**\n+     * Get the actual relative accuracy.\n+     * @return the accuracy\n+     */\n+    public double getRelativeAccuracy();\n+\n+    /**\n      * Set the lower limit for the number of iterations.\n      * <p>\n      * Minimal iteration is needed to avoid false early convergence, e.g.\n--- a/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java\n package org.apache.commons.math.analysis.integration;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n-import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.exception.MaxCountExceededException;\n \n /**\n  * Provide a default implementation for several generic functions.\n  * @version $Revision$ $Date$\n  * @since 1.2\n  */\n-public abstract class UnivariateRealIntegratorImpl\n-    extends ConvergingAlgorithmImpl implements UnivariateRealIntegrator {\n+public abstract class UnivariateRealIntegratorImpl implements UnivariateRealIntegrator {\n+\n     /** Serializable version identifier. */\n     private static final long serialVersionUID = 6248808456637441533L;\n+\n+    /** Maximum absolute error. */\n+    protected double absoluteAccuracy;\n+\n+    /** Maximum relative error. */\n+    protected double relativeAccuracy;\n+\n+    /** Maximum number of iterations. */\n+    protected int maximalIterationCount;\n+\n     /** minimum number of iterations */\n     protected int minimalIterationCount;\n+\n     /** default minimum number of iterations */\n     protected int defaultMinimalIterationCount;\n+\n+    /** The last iteration count. */\n+    protected int iterationCount;\n+\n     /** indicates whether an integral has been computed */\n     protected boolean resultComputed = false;\n+\n     /** the last computed integral */\n     protected double result;\n-    /** The integrand functione.\n-     * @deprecated as of 2.0 the integrand function is passed as an argument\n-     * to the {@link #integrate(UnivariateRealFunction, double, double)}method. */\n-    @Deprecated\n-    protected UnivariateRealFunction f;\n \n-     /**\n-      * Construct an integrator with given iteration count and accuracy.\n-      *\n-      * @param f the integrand function\n-      * @param defaultMaximalIterationCount maximum number of iterations\n-      * @throws IllegalArgumentException if f is null or the iteration\n-      * limits are not valid\n-      * @deprecated as of 2.0 the integrand function is passed as an argument\n-      * to the {@link #integrate(UnivariateRealFunction, double, double)}method.\n-      */\n-    @Deprecated\n-    protected UnivariateRealIntegratorImpl(final UnivariateRealFunction f,\n-                                           final int defaultMaximalIterationCount)\n-        throws IllegalArgumentException {\n+    /**\n+     * Construct an integrator with given iteration count and accuracy.\n+     *\n+     * @param maximalIterationCount maximum number of iterations\n+     */\n+    protected UnivariateRealIntegratorImpl(final int maximalIterationCount) {\n \n-        setMaximalIterationCount(defaultMaximalIterationCount);\n+        setMaximalIterationCount(maximalIterationCount);\n         setAbsoluteAccuracy(1.0e-15);\n-\n-        if (f == null) {\n-            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n-        }\n-\n-        this.f = f;\n-\n-        // parameters that are problem specific\n         setRelativeAccuracy(1.0e-6);\n-        this.defaultMinimalIterationCount = 3;\n-        this.minimalIterationCount = defaultMinimalIterationCount;\n+        setMinimalIterationCount(3);\n \n         verifyIterationCount();\n     }\n \n-    /**\n-     * Construct an integrator with given iteration count and accuracy.\n-     *\n-     * @param defaultMaximalIterationCount maximum number of iterations\n-     * @throws IllegalArgumentException if f is null or the iteration\n-     * limits are not valid\n-     */\n-    protected UnivariateRealIntegratorImpl(final int defaultMaximalIterationCount)\n-        throws IllegalArgumentException {\n-\n-        setMaximalIterationCount(defaultMaximalIterationCount);\n-        setAbsoluteAccuracy(1.0e-15);\n-        // parameters that are problem specific\n-        setRelativeAccuracy(1.0e-6);\n-        this.defaultMinimalIterationCount = 3;\n-        this.minimalIterationCount = defaultMinimalIterationCount;\n-\n-        verifyIterationCount();\n+    /** {@inheritDoc} */\n+    public void setMaximalIterationCount(final int count) {\n+        maximalIterationCount = count;\n     }\n \n-    /**\n-     * Access the last computed integral.\n-     *\n-     * @return the last computed integral\n-     * @throws IllegalStateException if no integral has been computed\n-     */\n+    /** {@inheritDoc} */\n+    public int getMaximalIterationCount() {\n+        return maximalIterationCount;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public void setAbsoluteAccuracy(double accuracy) {\n+        absoluteAccuracy = accuracy;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double getAbsoluteAccuracy() {\n+        return absoluteAccuracy;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public void setRelativeAccuracy(final double accuracy) {\n+        relativeAccuracy = accuracy;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double getRelativeAccuracy() {\n+        return relativeAccuracy;\n+    }\n+\n+    /** {@inheritDoc} */\n     public double getResult() throws IllegalStateException {\n         if (resultComputed) {\n             return result;\n      * @param newResult the result to set\n      * @param iterationCount the iteration count to set\n      */\n-    protected final void setResult(double newResult, int iterationCount) {\n+    protected final void setResult(final double newResult, final int iterationCount) {\n         this.result         = newResult;\n         this.iterationCount = iterationCount;\n         this.resultComputed = true;\n     }\n \n     /** {@inheritDoc} */\n-    public void setMinimalIterationCount(int count) {\n+    public void setMinimalIterationCount(final int count) {\n         minimalIterationCount = count;\n     }\n \n      * @param upper upper endpoint\n      * @throws IllegalArgumentException if not interval\n      */\n-    protected void verifyInterval(double lower, double upper) throws\n-        IllegalArgumentException {\n+    protected void verifyInterval(final double lower, final double upper)\n+        throws IllegalArgumentException {\n         if (lower >= upper) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                     LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,\n                     minimalIterationCount, maximalIterationCount);\n         }\n     }\n+\n+    /**\n+     * Reset the iterations counter to 0.\n+     *\n+     * @since 2.2\n+     */\n+    protected void resetIterationsCounter() {\n+        iterationCount = 0;\n+    }\n+\n+    /**\n+     * Increment the iterations counter by 1.\n+     *\n+     * @throws MaxCountExceededException if the maximal number\n+     * of iterations is exceeded.\n+     * @since 2.2\n+     */\n+    protected void incrementIterationsCounter() {\n+        if (++iterationCount > maximalIterationCount) {\n+            throw new MaxCountExceededException(maximalIterationCount);\n+        }\n+    }\n+\n }\n--- a/src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java\n     @Test\n     public void testSinFunction() throws MathException {\n         UnivariateRealFunction f = new SinFunction();\n-        UnivariateRealIntegrator integrator = new LegendreGaussIntegrator(5, 64);\n+        UnivariateRealIntegratorImpl integrator = new LegendreGaussIntegrator(5, 64);\n         integrator.setAbsoluteAccuracy(1.0e-10);\n         integrator.setRelativeAccuracy(1.0e-14);\n         integrator.setMinimalIterationCount(2);", "timestamp": 1300908964, "metainfo": ""}