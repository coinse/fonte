{"sha": "e3aff05625c90f3d74c740183e9bf7a499b1ff3d", "log": "Fixed javadoc typos.   ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/BigMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/BigMatrix.java\n  * Interface defining a real-valued matrix with basic algebraic operations, using\n  * BigDecimal representations for the entries.\n  *\n- * @version $Revision: 1.4 $ $Date: 2004/07/11 04:49:24 $\n+ * @version $Revision: 1.5 $ $Date: 2004/08/22 01:42:58 $\n  */\n public interface BigMatrix {\n \n     BigMatrix scalarMultiply(BigDecimal d);\n     \n     /**\n-     * Returns the result postmultiplying this by m.\n+     * Returns the result of postmultiplying this by m.\n      *\n      * @param m    matrix to postmultiply by\n      * @return     this * m\n--- a/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n  * explicitly invoke <code>LUDecompose()</code> to recompute the decomposition\n  * before using any of the methods above.\n  *\n- * @version $Revision: 1.3 $ $Date: 2004/07/11 04:49:24 $\n+ * @version $Revision: 1.4 $ $Date: 2004/08/22 01:42:58 $\n  */\n public class BigMatrixImpl implements BigMatrix, Serializable {\n     \n     }\n     \n     /**\n-     * Returns the result postmultiplying this by <code>m</code>.\n+     * Returns the result of postmultiplying this by <code>m</code>.\n      * @param m    matrix to postmultiply by\n      * @return     this*m\n      * @throws     IllegalArgumentException\n--- a/src/java/org/apache/commons/math/linear/RealMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrix.java\n \n /**\n  * Interface defining a real-valued matrix with basic algebraic operations\n- * @version $Revision: 1.19 $ $Date: 2004/06/07 03:26:31 $\n+ * @version $Revision: 1.20 $ $Date: 2004/08/22 01:42:58 $\n  */\n public interface RealMatrix {\n \n     RealMatrix scalarMultiply(double d);\n \n     /**\n-     * Returns the result postmultiplying this by m.\n+     * Returns the result of postmultiplying this by m.\n      *\n      * @param m    matrix to postmultiply by\n      * @return     this * m\n--- a/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n  * explicitly invoke <code>LUDecompose()</code> to recompute the decomposition\n  * before using any of the methods above.\n  *\n- * @version $Revision: 1.25 $ $Date: 2004/06/23 16:26:17 $\n+ * @version $Revision: 1.26 $ $Date: 2004/08/22 01:42:58 $\n  */\n public class RealMatrixImpl implements RealMatrix, Serializable {\n \n     }\n \n     /**\n-     * Returns the result postmultiplying this by <code>m</code>.\n+     * Returns the result of postmultiplying this by <code>m</code>.\n      * @param m    matrix to postmultiply by\n      * @return     this*m\n      * @throws     IllegalArgumentException\n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n  * the same effect (similarly for arguments to <code>getCount,</code> etc.).\n  * <p>\n  * The values are ordered using the default (natural order), unless a  \n- * <code>Comparator</code>is supplied in the constructor.\n+ * <code>Comparator</code> is supplied in the constructor.\n  *\n- * @version $Revision: 1.26 $ $Date: 2004/08/12 15:33:39 $\n+ * @version $Revision: 1.27 $ $Date: 2004/08/22 01:42:58 $\n  */\n public class Frequency implements Serializable {\n     \n     }\n     \n     /**\n-     * Returns the cumulative percentatge of values less than or equal to v\n+     * Returns the cumulative percentage of values less than or equal to v\n      * (as a proportion between 0 and 1).\n      * <p>\n      * Returns 0 if v is not comparable to the values set.\n--- a/src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java\n  * This interface is designed to be used for calculating statistics that can be computed in \n  * one pass through the data without storing the full array of sample values.\n  *\n- * @version $Revision: 1.18 $ $Date: 2004/07/10 17:09:08 $\n+ * @version $Revision: 1.19 $ $Date: 2004/08/22 01:42:58 $\n  */\n public interface StorelessUnivariateStatistic extends UnivariateStatistic {\n \n     long getN();\n \n     /**\n-     * Clears all the internal state of the Statistic\n+     * Clears the internal state of the Statistic\n      */\n     void clear();\n \n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java\n  * <p>\n  * To compute percentiles, the data must be (totally) ordered.  Input arrays\n  * are copied and then sorted using  {@link java.util.Arrays#sort(double[])}.\n- * The ordering used by <code>Arrays.sort(double[]</code> is the one determined\n+ * The ordering used by <code>Arrays.sort(double[])</code> is the one determined\n  * by {@link java.lang.Double#compareTo(Double)}.  This ordering makes \n  * <code>Double.NaN</code> larger than any other value (including \n  * <code>Double.POSITIVE_INFINITY</code>).  Therefore, for example, the median\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.23 $ $Date: 2004/07/11 18:39:08 $\n+ * @version $Revision: 1.24 $ $Date: 2004/08/22 01:42:58 $\n  */\n public class Percentile extends AbstractUnivariateStatistic implements Serializable {\n ", "timestamp": 1093138978, "metainfo": ""}