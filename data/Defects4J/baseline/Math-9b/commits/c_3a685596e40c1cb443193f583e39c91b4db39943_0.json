{"sha": "3a685596e40c1cb443193f583e39c91b4db39943", "log": "Added functions. Replaced hard-coded numbers by a named constant. Changed display format for ratios.   ", "commit": "\n--- a/src/test/java/org/apache/commons/math/util/FastMathTestPerformance.java\n+++ b/src/test/java/org/apache/commons/math/util/FastMathTestPerformance.java\n  */\n public class FastMathTestPerformance {\n     private static final int RUNS = Integer.parseInt(System.getProperty(\"testRuns\",\"10000000\"));\n+    private static final double F1 = 1d / RUNS;\n \n     // Header format\n     private static final String FMT_HDR = \"%-5s %13s %13s %13s Runs=%d Java %s (%s) %s (%s)\";\n     // Detail format\n-    private static final String FMT_DTL = \"%-5s %6d %6.2f %6d %6.2f %6d %6.2f\";\n+    private static final String FMT_DTL = \"%-5s %6d %6.1f %6d %6.4f %6d %6.4f\";\n \n     @BeforeClass\n     public static void header() {\n                 mathTime / RUNS, (double) mathTime / unitTime\n                 ));\n     }\n+\n     @Test\n     public void testLog() {\n         double x = 0;\n     }\n \n     @Test\n+    public void testLog10() {\n+        double x = 0;\n+        long time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += StrictMath.log10(Math.PI + i/* 1.0 + i/1e9 */);\n+        long strictMath = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += FastMath.log10(Math.PI + i/* 1.0 + i/1e9 */);\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += Math.log10(Math.PI + i/* 1.0 + i/1e9 */);\n+        long mathTime = System.nanoTime() - time;\n+\n+        report(\"log10\",strictMath,fastTime,mathTime);\n+    }\n+\n+    @Test\n+    public void testLog1p() {\n+        double x = 0;\n+        long time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += StrictMath.log1p(Math.PI + i/* 1.0 + i/1e9 */);\n+        long strictMath = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += FastMath.log1p(Math.PI + i/* 1.0 + i/1e9 */);\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += Math.log1p(Math.PI + i/* 1.0 + i/1e9 */);\n+        long mathTime = System.nanoTime() - time;\n+\n+        report(\"log1p\",strictMath,fastTime,mathTime);\n+    }\n+\n+    @Test\n     public void testPow() {\n         double x = 0;\n         long time = System.nanoTime();\n         for (int i = 0; i < RUNS; i++)\n-            x += StrictMath.pow(Math.PI + i / 1e6, i / 1e6);\n-        long strictTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += FastMath.pow(Math.PI + i / 1e6, i / 1e6);\n-        long fastTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += Math.pow(Math.PI + i / 1e6, i / 1e6);\n+            x += StrictMath.pow(Math.PI + i * F1, i * F1);\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += FastMath.pow(Math.PI + i * F1, i * F1);\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += Math.pow(Math.PI + i * F1, i * F1);\n         long mathTime = System.nanoTime() - time;\n         report(\"pow\",strictTime,fastTime,mathTime);\n     }\n         double x = 0;\n         long time = System.nanoTime();\n         for (int i = 0; i < RUNS; i++)\n-            x += StrictMath.exp(i / 1000000.0);\n-        long strictTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += FastMath.exp(i / 1000000.0);\n-        long fastTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += Math.exp(i / 1000000.0);\n+            x += StrictMath.exp(i * F1);\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += FastMath.exp(i * F1);\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += Math.exp(i * F1);\n         long mathTime = System.nanoTime() - time;\n \n         report(\"exp\",strictTime,fastTime,mathTime);\n         double x = 0;\n         long time = System.nanoTime();\n         for (int i = 0; i < RUNS; i++)\n-            x += StrictMath.sin(i / 1000000.0);\n-        long strictTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += FastMath.sin(i / 1000000.0);\n-        long fastTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += Math.sin(i / 1000000.0);\n+            x += StrictMath.sin(i * F1);\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += FastMath.sin(i * F1);\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += Math.sin(i * F1);\n         long mathTime = System.nanoTime() - time;\n \n         report(\"sin\",strictTime,fastTime,mathTime);\n         double x = 0;\n         long time = System.nanoTime();\n         for (int i = 0; i < RUNS; i++)\n-            x += StrictMath.cos(i / 1000000.0);\n-        long strictTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += FastMath.cos(i / 1000000.0);\n-        long fastTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += Math.cos(i / 1000000.0);\n+            x += StrictMath.cos(i * F1);\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += FastMath.cos(i * F1);\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += Math.cos(i * F1);\n         long mathTime = System.nanoTime() - time;\n \n         report(\"cos\",strictTime,fastTime,mathTime);\n         double x = 0;\n         long time = System.nanoTime();\n         for (int i = 0; i < RUNS; i++)\n-            x += StrictMath.tan(i / 1000000.0);\n-        long strictTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += FastMath.tan(i / 1000000.0);\n-        long fastTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += Math.tan(i / 1000000.0);\n+            x += StrictMath.tan(i * F1);\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += FastMath.tan(i * F1);\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += Math.tan(i * F1);\n         long mathTime = System.nanoTime() - time;\n \n         report(\"tan\",strictTime,fastTime,mathTime);\n         double x = 0;\n         long time = System.nanoTime();\n         for (int i = 0; i < RUNS; i++)\n-            x += StrictMath.atan(i / 1000000.0);\n-        long strictTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += FastMath.atan(i / 1000000.0);\n-        long fastTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += Math.atan(i / 1000000.0);\n+            x += StrictMath.atan(i * F1);\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += FastMath.atan(i * F1);\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += Math.atan(i * F1);\n         long mathTime = System.nanoTime() - time;\n \n         report(\"atan\",strictTime,fastTime,mathTime);\n     }\n+\n+    @Test\n+    public void testAtan2() {\n+        double x = 0;\n+        long time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += StrictMath.atan2(i * F1, i * F1);\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += FastMath.atan2(i * F1, i * F1);\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += Math.atan2(i * F1, i * F1);\n+        long mathTime = System.nanoTime() - time;\n+\n+        report(\"atan2\",strictTime,fastTime,mathTime);\n+    }\n+\n+    @Test\n+    public void testHypot() {\n+        double x = 0;\n+        long time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += StrictMath.hypot(i * F1, i * F1);\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += FastMath.hypot(i * F1, i * F1);\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += Math.hypot(i * F1, i * F1);\n+        long mathTime = System.nanoTime() - time;\n+\n+        report(\"hypot\",strictTime,fastTime,mathTime);\n+    }\n      \n     @Test\n     public void testCbrt() {\n         double x = 0;\n         long time = System.nanoTime();\n         for (int i = 0; i < RUNS; i++)\n-            x += StrictMath.cbrt(i / 1000000.0);\n-        long strictTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += FastMath.cbrt(i / 1000000.0);\n-        long fastTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += Math.cbrt(i / 1000000.0);\n+            x += StrictMath.cbrt(i * F1);\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += FastMath.cbrt(i * F1);\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += Math.cbrt(i * F1);\n         long mathTime = System.nanoTime() - time;\n \n         report(\"cbrt\",strictTime,fastTime,mathTime);\n     }\n \n     @Test\n+    public void testSqrt() {\n+        double x = 0;\n+        long time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += StrictMath.sqrt(i * F1);\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += FastMath.sqrt(i * F1);\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += Math.sqrt(i * F1);\n+        long mathTime = System.nanoTime() - time;\n+\n+        report(\"sqrt\",strictTime,fastTime,mathTime);\n+    }\n+\n+    @Test\n     public void testCosh() {\n         double x = 0;\n         long time = System.nanoTime();\n         for (int i = 0; i < RUNS; i++)\n-            x += StrictMath.cosh(i / 1000000.0);\n-        long strictTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += FastMath.cosh(i / 1000000.0);\n-        long fastTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += Math.cosh(i / 1000000.0);\n+            x += StrictMath.cosh(i * F1);\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += FastMath.cosh(i * F1);\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += Math.cosh(i * F1);\n         long mathTime = System.nanoTime() - time;\n \n         report(\"cosh\",strictTime,fastTime,mathTime);\n         double x = 0;\n         long time = System.nanoTime();\n         for (int i = 0; i < RUNS; i++)\n-            x += StrictMath.sinh(i / 1000000.0);\n-        long strictTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += FastMath.sinh(i / 1000000.0);\n-        long fastTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += Math.sinh(i / 1000000.0);\n+            x += StrictMath.sinh(i * F1);\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += FastMath.sinh(i * F1);\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += Math.sinh(i * F1);\n         long mathTime = System.nanoTime() - time;\n \n         report(\"sinh\",strictTime,fastTime,mathTime);\n         double x = 0;\n         long time = System.nanoTime();\n         for (int i = 0; i < RUNS; i++)\n-            x += StrictMath.tanh(i / 1000000.0);\n-        long strictTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += FastMath.tanh(i / 1000000.0);\n-        long fastTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += Math.tanh(i / 1000000.0);\n+            x += StrictMath.tanh(i * F1);\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += FastMath.tanh(i * F1);\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += Math.tanh(i * F1);\n         long mathTime = System.nanoTime() - time;\n \n         report(\"tanh\",strictTime,fastTime,mathTime);\n         double x = 0;\n         long time = System.nanoTime();\n         for (int i = 0; i < RUNS; i++)\n-            x += StrictMath.expm1(-i / 100000.0);\n-        long strictTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += FastMath.expm1(-i / 100000.0);\n-        long fastTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += Math.expm1(-i / 100000.0);\n+            x += StrictMath.expm1(-i * F1);\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += FastMath.expm1(-i * F1);\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += Math.expm1(-i * F1);\n         long mathTime = System.nanoTime() - time;\n         report(\"expm1\",strictTime,fastTime,mathTime);\n     }\n+\n+    @Test\n+    public void testAbs() {\n+        double x = 0;\n+        long time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += StrictMath.abs(i * (1 - 0.5 * RUNS));\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += FastMath.abs(i * (1 - 0.5 * RUNS));\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++)\n+            x += Math.abs(i * (1 - 0.5 * RUNS));\n+        long mathTime = System.nanoTime() - time;\n+\n+        report(\"abs\",strictTime,fastTime,mathTime);\n+    }\n }", "timestamp": 1296088286, "metainfo": ""}