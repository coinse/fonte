{"sha": "7c70651662941b9bfb8c95bf9272d913817c4c83", "log": "Javadoc.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n      *\n      * @param  addend Value to be added to this {@code Complex}.\n      * @return {@code this + addend}.\n-     * @throws NullArgumentException if {@code factor} is {@code null}.\n+     * @throws NullArgumentException if {@code addend} is {@code null}.\n      */\n     public Complex add(Complex addend) throws NullArgumentException {\n         MathUtils.checkNotNull(addend);\n     }\n \n     /**\n-     * Returns a {@code Complex} whose value is\n-     * {@code (this + addend)}.\n+     * Returns a {@code Complex} whose value is {@code (this + addend)},\n+     * with {@code addend} interpreted as a real number.\n      *\n      * @param addend Value to be added to this {@code Complex}.\n      * @return {@code this + addend}.\n     }\n \n     /**\n-     * Returns a {@code Complex} whose value is\n-     * {@code (this / divisor)}.\n+     * Returns a {@code Complex} whose value is {@code (this / divisor)},\n+     * with {@code divisor} interpreted as a real number.\n      *\n      * @param  divisor Value by which this {@code Complex} is to be divided.\n      * @return {@code this / divisor}.\n     }\n \n     /**\n-     * Returns a {@code Complex} whose value is {@code this * factor}.\n+     * Returns a {@code Complex} whose value is {@code this * factor}, with {@code factor}\n+     * interpreted as a real number.\n      *\n      * @param  factor value to be multiplied by this {@code Complex}.\n      * @return {@code this * factor}.\n      *   (a + bi) - (c + di) = (a-c) + (b-d)i\n      *  </code>\n      * </pre>\n-     * If either {@code this} or {@code subtrahend} has a {@code NaN]}value in either part,\n+     * If either {@code this} or {@code subtrahend} has a {@code NaN]} value in either part,\n      * {@link #NaN} is returned; otherwise infinite and {@code NaN} values are\n      * returned in the parts of the result according to the rules for\n      * {@link java.lang.Double} arithmetic.\n      *\n      * @param  subtrahend value to be subtracted from this {@code Complex}.\n      * @return {@code this - subtrahend}.\n-     * @throws NullArgumentException if {@code factor} is {@code null}.\n+     * @throws NullArgumentException if {@code subtrahend} is {@code null}.\n      */\n     public Complex subtract(Complex subtrahend)\n         throws NullArgumentException {", "timestamp": 1311525336, "metainfo": ""}