{"sha": "47cc54734398d7e6911b6eb98dd32435aaa16d6c", "log": "added Niall's patch for improved double constructor test added test for construction failure (golden-ratio) JIRA: MATH-179  ", "commit": "\n--- a/src/test/org/apache/commons/math/fraction/FractionTest.java\n+++ b/src/test/org/apache/commons/math/fraction/FractionTest.java\n             fail(ex.getMessage());\n         }\n     }\n-    \n+\n+    public void testGoldenRatio() {\n+        try {\n+            // the golden ratio is notoriously a difficult number for continuous fraction\n+            new Fraction((1 + Math.sqrt(5)) / 2, 1.0e-12, 25);\n+            fail(\"an exception should have been thrown\");\n+        } catch (ConvergenceException ce) {\n+            // expected behavior\n+        } catch (Exception e) {\n+            fail(\"wrong exception caught\");\n+        }\n+    }\n+\n+    // MATH-179\n+    public void testDoubleConstructor() throws ConvergenceException  {\n+        assertFraction(1, 2, new Fraction((double)1 / (double)2));\n+        assertFraction(1, 3, new Fraction((double)1 / (double)3));\n+        assertFraction(2, 3, new Fraction((double)2 / (double)3));\n+        assertFraction(1, 4, new Fraction((double)1 / (double)4));\n+        assertFraction(3, 4, new Fraction((double)3 / (double)4));\n+        assertFraction(1, 5, new Fraction((double)1 / (double)5));\n+        assertFraction(2, 5, new Fraction((double)2 / (double)5));\n+        assertFraction(3, 5, new Fraction((double)3 / (double)5));\n+        assertFraction(4, 5, new Fraction((double)4 / (double)5));\n+        assertFraction(1, 6, new Fraction((double)1 / (double)6));\n+        assertFraction(5, 6, new Fraction((double)5 / (double)6));\n+        assertFraction(1, 7, new Fraction((double)1 / (double)7));\n+        assertFraction(2, 7, new Fraction((double)2 / (double)7));\n+        assertFraction(3, 7, new Fraction((double)3 / (double)7));\n+        assertFraction(4, 7, new Fraction((double)4 / (double)7));\n+        assertFraction(5, 7, new Fraction((double)5 / (double)7));\n+        assertFraction(6, 7, new Fraction((double)6 / (double)7));\n+        assertFraction(1, 8, new Fraction((double)1 / (double)8));\n+        assertFraction(3, 8, new Fraction((double)3 / (double)8));\n+        assertFraction(5, 8, new Fraction((double)5 / (double)8));\n+        assertFraction(7, 8, new Fraction((double)7 / (double)8));\n+        assertFraction(1, 9, new Fraction((double)1 / (double)9));\n+        assertFraction(2, 9, new Fraction((double)2 / (double)9));\n+        assertFraction(4, 9, new Fraction((double)4 / (double)9));\n+        assertFraction(5, 9, new Fraction((double)5 / (double)9));\n+        assertFraction(7, 9, new Fraction((double)7 / (double)9));\n+        assertFraction(8, 9, new Fraction((double)8 / (double)9));\n+        assertFraction(1, 10, new Fraction((double)1 / (double)10));\n+        assertFraction(3, 10, new Fraction((double)3 / (double)10));\n+        assertFraction(7, 10, new Fraction((double)7 / (double)10));\n+        assertFraction(9, 10, new Fraction((double)9 / (double)10));\n+        assertFraction(1, 11, new Fraction((double)1 / (double)11));\n+        assertFraction(2, 11, new Fraction((double)2 / (double)11));\n+        assertFraction(3, 11, new Fraction((double)3 / (double)11));\n+        assertFraction(4, 11, new Fraction((double)4 / (double)11));\n+        assertFraction(5, 11, new Fraction((double)5 / (double)11));\n+        assertFraction(6, 11, new Fraction((double)6 / (double)11));\n+        assertFraction(7, 11, new Fraction((double)7 / (double)11));\n+        assertFraction(8, 11, new Fraction((double)8 / (double)11));\n+        assertFraction(9, 11, new Fraction((double)9 / (double)11));\n+        assertFraction(10, 11, new Fraction((double)10 / (double)11));\n+    }\n+\n     public void testCompareTo() {\n         Fraction first = new Fraction(1, 2);\n         Fraction second = new Fraction(1, 3);", "timestamp": 1201035500, "metainfo": ""}