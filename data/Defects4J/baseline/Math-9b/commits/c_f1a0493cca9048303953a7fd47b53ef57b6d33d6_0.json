{"sha": "f1a0493cca9048303953a7fd47b53ef57b6d33d6", "log": "[MATH-822] Added new constructors in EigenDecomposition. Thanks to Jared Becksfort for the report.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java\n+++ b/src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java\n      * Calculates the eigen decomposition of the given real matrix.\n      *\n      * @param matrix Matrix to decompose.\n-     * @param splitTolerance Dummy parameter (present for backward\n-     * compatibility only).\n      * @throws MaxCountExceededException if the algorithm fails to converge.\n      */\n-    public EigenDecomposition(final RealMatrix matrix,\n-                              final double splitTolerance)  {\n+    public EigenDecomposition(final RealMatrix matrix)  {\n         if (isSymmetric(matrix, false)) {\n             transformToTridiagonal(matrix);\n             findEigenVectors(transformer.getQ().getData());\n     }\n \n     /**\n-     * Calculates the eigen decomposition of the symmetric tridiagonal\n-     * matrix.  The Householder matrix is assumed to be the identity matrix.\n-     *\n-     * @param main Main diagonal of the symmetric tridiagonal form.\n-     * @param secondary Secondary of the tridiagonal form.\n+     * Calculates the eigen decomposition of the given real matrix.\n+     *\n+     * @param matrix Matrix to decompose.\n      * @param splitTolerance Dummy parameter (present for backward\n      * compatibility only).\n      * @throws MaxCountExceededException if the algorithm fails to converge.\n-     */\n-    public EigenDecomposition(final double[] main, final double[] secondary,\n-                              final double splitTolerance) {\n+     * @deprecated in 3.1 (to be removed in 4.0) due to unused parameter\n+     */\n+    public EigenDecomposition(final RealMatrix matrix,\n+                              final double splitTolerance)  {\n+        this(matrix);\n+    }\n+\n+    /**\n+     * Calculates the eigen decomposition of the symmetric tridiagonal\n+     * matrix.  The Householder matrix is assumed to be the identity matrix.\n+     *\n+     * @param main Main diagonal of the symmetric tridiagonal form.\n+     * @param secondary Secondary of the tridiagonal form.\n+     * @throws MaxCountExceededException if the algorithm fails to converge.\n+     */\n+    public EigenDecomposition(final double[] main, final double[] secondary) {\n         this.main      = main.clone();\n         this.secondary = secondary.clone();\n         transformer    = null;\n             z[i][i] = 1.0;\n         }\n         findEigenVectors(z);\n+    }\n+\n+    /**\n+     * Calculates the eigen decomposition of the symmetric tridiagonal\n+     * matrix.  The Householder matrix is assumed to be the identity matrix.\n+     *\n+     * @param main Main diagonal of the symmetric tridiagonal form.\n+     * @param secondary Secondary of the tridiagonal form.\n+     * @param splitTolerance Dummy parameter (present for backward\n+     * compatibility only).\n+     * @throws MaxCountExceededException if the algorithm fails to converge.\n+     * @deprecated in 3.1 (to be removed in 4.0) due to unused parameter\n+     */\n+    public EigenDecomposition(final double[] main, final double[] secondary,\n+                              final double splitTolerance) {\n+        this(main, secondary);\n     }\n \n     /**", "timestamp": 1342300776, "metainfo": ""}