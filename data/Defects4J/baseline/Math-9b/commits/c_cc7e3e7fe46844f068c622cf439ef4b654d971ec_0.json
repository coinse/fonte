{"sha": "cc7e3e7fe46844f068c622cf439ef4b654d971ec", "log": "Prevent NaN to occur for singular matrices Numerical inaccuracies in the underlying eigendecomposition could induce very small negative eigenvalues, so the square root produced NaNs. The eigenvalues really cannot be negative, so it is safe to replace the negative ones by 0. There are remaining problems with singular matrices:  - the singular vectors also contain NaNs  - the solver does not really work in least square sense and    complain about singular matrices JIRA: MATH-320   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java\n                                        MathUtils.SAFE_MIN);\n         singularValues = eigenDecomposition.getRealEigenvalues();\n         for (int i = 0; i < singularValues.length; ++i) {\n-            singularValues[i] = Math.sqrt(singularValues[i]);\n+            final double si = singularValues[i];\n+            singularValues[i] = (si < 0) ? 0.0 : Math.sqrt(si);\n         }\n \n     }\n                 double[] ei1 = eData[0];\n                 iData[0] = ei1;\n                 for (int i = 0; i < n - 1; ++i) {\n-                    // compute Bt.E.S^(-1) where E is the eigenvectors matrix\n+                    // compute B.E.S^(-1) where E is the eigenvectors matrix\n                     // we reuse the array from matrix E to store the result\n+                    final double mi = mainBidiagonal[i];\n+                    final double si = secondaryBidiagonal[i];\n                     final double[] ei0 = ei1;\n                     ei1 = eData[i + 1];\n                     iData[i + 1] = ei1;\n                     for (int j = 0; j < n; ++j) {\n-                        ei0[j] = (mainBidiagonal[i] * ei0[j] +\n-                                  secondaryBidiagonal[i] * ei1[j]) / singularValues[j];\n+                        ei0[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];\n                     }\n                 }\n                 // last row\n                 for (int i = 0; i < m - 1; ++i) {\n                     // compute Bt.E.S^(-1) where E is the eigenvectors matrix\n                     // we reuse the array from matrix E to store the result\n+                    final double mi = mainBidiagonal[i];\n+                    final double si = secondaryBidiagonal[i];\n                     final double[] ei0 = ei1;\n                     ei1 = eData[i + 1];\n                     iData[i + 1] = ei1;\n                     for (int j = 0; j < m; ++j) {\n-                        ei0[j] = (mainBidiagonal[i] * ei0[j] +\n-                                  secondaryBidiagonal[i] * ei1[j]) / singularValues[j];\n+                        ei0[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];\n                     }\n                 }\n                 // last row", "timestamp": 1259531616, "metainfo": ""}