{"sha": "18c7ba81f954499e4ecabf902ebf1dbf4d42b0be", "log": "Added field parameter on various constructors in Array2DRowFieldMatrix. JIRA: MATH-573  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java\n      * @see #Array2DRowFieldMatrix(FieldElement[][], boolean)\n      */\n     public Array2DRowFieldMatrix(final T[][] d) {\n-        super(extractField(d));\n+        this(extractField(d), d);\n+    }\n+\n+    /**\n+     * Create a new {@code FieldMatrix<T>} using the input array as the underlying\n+     * data array.\n+     * <p>The input array is copied, not referenced. This constructor has\n+     * the same effect as calling {@link #Array2DRowFieldMatrix(FieldElement[][], boolean)}\n+     * with the second argument set to {@code true}.</p>\n+     *\n+     * @param field Field to which the elements belong.\n+     * @param d Data for the new matrix.\n+     * @throws DimensionMismatchException if {@code d} is not rectangular.\n+     * @throws org.apache.commons.math.exception.NullArgumentException if\n+     * {@code d} is {@code null}.\n+     * @throws NoDataException if there are not at least one row and one column.\n+     * @see #Array2DRowFieldMatrix(FieldElement[][], boolean)\n+     */\n+    public Array2DRowFieldMatrix(final Field<T> field, final T[][] d) {\n+        super(field);\n         copyIn(d);\n     }\n \n      * @see #Array2DRowFieldMatrix(FieldElement[][])\n      */\n     public Array2DRowFieldMatrix(final T[][] d, final boolean copyArray) {\n-        super(extractField(d));\n+        this(extractField(d), d, copyArray);\n+    }\n+\n+    /**\n+     * Create a new {@code FieldMatrix<T>} using the input array as the underlying\n+     * data array.\n+     * <p>If an array is built specially in order to be embedded in a\n+     * {@code FieldMatrix<T>} and not used directly, the {@code copyArray} may be\n+     * set to {@code false}. This will prevent the copying and improve\n+     * performance as no new array will be built and no data will be copied.</p>\n+     *\n+     * @param field Field to which the elements belong.\n+     * @param d Data for the new matrix.\n+     * @param copyArray Whether to copy or reference the input array.\n+     * @throws DimensionMismatchException if {@code d} is not rectangular.\n+     * @throws NoDataException if there are not at least one row and one column.\n+     * @throws org.apache.commons.math.exception.NullArgumentException\n+     * if {@code d} is {@code null}.\n+     * @see #Array2DRowFieldMatrix(FieldElement[][])\n+     */\n+    public Array2DRowFieldMatrix(final Field<T> field, final T[][] d, final boolean copyArray) {\n+        super(field);\n         if (copyArray) {\n             copyIn(d);\n         } else {\n      * @param v Column vector holding data for new matrix.\n      */\n     public Array2DRowFieldMatrix(final T[] v) {\n-        super(extractField(v));\n+        this(extractField(v), v);\n+    }\n+\n+    /**\n+     * Create a new (column) {@code FieldMatrix<T>} using {@code v} as the\n+     * data for the unique column of the created matrix.\n+     * The input array is copied.\n+     *\n+     * @param field Field to which the elements belong.\n+     * @param v Column vector holding data for new matrix.\n+     */\n+    public Array2DRowFieldMatrix(final Field<T> field, final T[] v) {\n+        super(field);\n         final int nRows = v.length;\n         data = buildArray(getField(), nRows, 1);\n         for (int row = 0; row < nRows; row++) {\n     /** {@inheritDoc} */\n     @Override\n     public FieldMatrix<T> copy() {\n-        return new Array2DRowFieldMatrix<T>(copyOut(), false);\n+        return new Array2DRowFieldMatrix<T>(getField(), copyOut(), false);\n     }\n \n     /**\n             }\n         }\n \n-        return new Array2DRowFieldMatrix<T>(outData, false);\n+        return new Array2DRowFieldMatrix<T>(getField(), outData, false);\n     }\n \n     /**", "timestamp": 1305143862, "metainfo": ""}