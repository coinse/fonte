{"sha": "fb84d9ca198c41cc85d71d0be7540881362fae47", "log": "MATH-503 Added derivative function.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/function/Logistic.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Logistic.java\n package org.apache.commons.math.analysis.function;\n \n import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n import org.apache.commons.math.util.FastMath;\n \n  * @version $Revision$ $Date$\n  * @since 3.0\n  */\n-public class Logistic implements UnivariateRealFunction {\n+public class Logistic implements DifferentiableUnivariateRealFunction {\n     /** Lower asymptote. */\n     private final double a;\n     /** Upper asymptote. */\n     /** Growth rate. */\n     private final double b;\n     /** Parameter that affects near which asymptote maximum growth occurs. */\n-    private final double n;\n+    private final double oneOverN;\n     /** Parameter that affects the position of the curve along the ordinate axis. */\n     private final double q;\n     /** Abscissa of maximum growth. */\n         this.b = b;\n         this.q = q;\n         this.a = a;\n-        this.n = n;\n+        oneOverN = 1 / n;\n     }\n \n     /** {@inheritDoc} */\n     public double value(double x) {\n-        return a + (k - a) / FastMath.pow(1 + q * FastMath.exp(b * (m - x)), 1 / n);\n+        return a + (k - a) / FastMath.pow(1 + q * FastMath.exp(b * (m - x)), oneOverN);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public UnivariateRealFunction derivative() {\n+        return new UnivariateRealFunction() {\n+            /** {@inheritDoc} */\n+            public double value(double x) {\n+                final double exp = q * FastMath.exp(b * (m - x));\n+                if (Double.isInfinite(exp)) {\n+                    // Avoid returning NaN in case of overflow.\n+                    return 0;\n+                }\n+                final double exp1 = exp + 1;\n+                return b * oneOverN * exp / FastMath.pow(exp1, oneOverN + 1);\n+            }\n+        };\n     }\n }\n--- a/src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/function/LogisticTest.java\n         x = Double.POSITIVE_INFINITY;\n         Assert.assertEquals(\"x=\" + x, k, f.value(x), EPS);\n     }\n+\n+    @Test\n+    public void testCompareDerivativeSigmoid() {\n+        final double k = 3;\n+        final double a = 2;\n+\n+        final Logistic f = new Logistic(k, 0, 1, 1, a, 1);\n+        final Sigmoid g = new Sigmoid(a, k);\n+        \n+        final UnivariateRealFunction dfdx = f.derivative();\n+        final UnivariateRealFunction dgdx = g.derivative();\n+\n+        final double min = -10;\n+        final double max = 10;\n+        final double n = 20;\n+        final double delta = (max - min) / n;\n+        for (int i = 0; i < n; i++) {\n+            final double x = min + i * delta;\n+            Assert.assertEquals(\"x=\" + x, dgdx.value(x), dfdx.value(x), EPS);\n+        }\n+    }\n }", "timestamp": 1298928753, "metainfo": ""}