{"sha": "13d22f45624470ce5c07c085cf8b1ec0251eaee6", "log": "MATH-631 Early detection of \"Regula Falsi\" algorithm being stuck due to finite precision. Javadoc makes it clear that either the Pegasus or the Illinois solver should be preferred over the Regula Falsi one (due to D. Hendriks).   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n \n import org.apache.commons.math.util.FastMath;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.exception.ConvergenceException;\n import org.apache.commons.math.exception.MathInternalError;\n \n /**\n     /**\n      * Construct a solver.\n      *\n-     * @param absoluteAccuracy absolute accuracy\n-     * @param method <em>Secant</em>-based root-finding method to use\n+     * @param absoluteAccuracy Absolute accuracy.\n+     * @param method <em>Secant</em>-based root-finding method to use.\n      */\n     protected BaseSecantSolver(final double absoluteAccuracy, final Method method) {\n         super(absoluteAccuracy);\n     /**\n      * Construct a solver.\n      *\n-     * @param relativeAccuracy relative accuracy\n-     * @param absoluteAccuracy absolute accuracy\n-     * @param method <em>Secant</em>-based root-finding method to use\n+     * @param relativeAccuracy Relative accuracy.\n+     * @param absoluteAccuracy Absolute accuracy.\n+     * @param method <em>Secant</em>-based root-finding method to use.\n      */\n     protected BaseSecantSolver(final double relativeAccuracy,\n                                final double absoluteAccuracy,\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n+                    // Detect early that algorithm is stuck, instead of waiting\n+                    // for the maximum number of iterations to be exceeded.\n+                    if (x == x1) {\n+                        throw new ConvergenceException();\n+                    }\n                     break;\n                 default:\n                     // Should never happen.\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java\n  * <p>Like the <em>Regula Falsi</em> method, convergence is guaranteed by\n  * maintaining a bracketed solution. The <em>Illinois</em> method however,\n  * should converge much faster than the original <em>Regula Falsi</em>\n- * method.</p>\n+ * method. Furthermore, this implementation of the <em>Illinois</em> method\n+ * should not suffer from the same implementation issues as the <em>Regula\n+ * Falsi</em> method, which may fail to convergence in certain cases.</p>\n  *\n  * <p>The <em>Illinois</em> method assumes that the function is continuous,\n  * but not necessarily smooth.</p>\n     /**\n      * Construct a solver.\n      *\n-     * @param absoluteAccuracy absolute accuracy\n+     * @param absoluteAccuracy Absolute accuracy.\n      */\n     public IllinoisSolver(final double absoluteAccuracy) {\n         super(absoluteAccuracy, Method.ILLINOIS);\n     /**\n      * Construct a solver.\n      *\n-     * @param relativeAccuracy relative accuracy\n-     * @param absoluteAccuracy absolute accuracy\n+     * @param relativeAccuracy Relative accuracy.\n+     * @param absoluteAccuracy Absolute accuracy.\n      */\n     public IllinoisSolver(final double relativeAccuracy,\n                           final double absoluteAccuracy) {\n     /**\n      * Construct a solver.\n      *\n-     * @param relativeAccuracy relative accuracy\n-     * @param absoluteAccuracy absolute accuracy\n+     * @param relativeAccuracy Relative accuracy.\n+     * @param absoluteAccuracy Absolute accuracy.\n      * @param functionValueAccuracy Maximum function value error.\n      */\n     public IllinoisSolver(final double relativeAccuracy,\n                           final double functionValueAccuracy) {\n         super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy, Method.PEGASUS);\n     }\n-\n }\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java\n  *\n  * <p>Like the <em>Regula Falsi</em> method, convergence is guaranteed by\n  * maintaining a bracketed solution. The <em>Pegasus</em> method however,\n- * should converge much faster than the original <em>Regula Falsi</em> method.\n- * Furthermore, it should converge faster than the\n- * {@link IllinoisSolver <em>Illinois</em>} method, another\n- * <em>Regula Falsi</em>-based method.</p>\n+ * should converge much faster than the original <em>Regula Falsi</em>\n+ * method. Furthermore, this implementation of the <em>Pegasus</em> method\n+ * should not suffer from the same implementation issues as the <em>Regula\n+ * Falsi</em> method, which may fail to convergence in certain cases. Also,\n+ * the <em>Pegasus</em> method should converge faster than the\n+ * {@link IllinoisSolver <em>Illinois</em>} method, another <em>Regula\n+ * Falsi</em>-based method.</p>\n  *\n  * <p>The <em>Pegasus</em> method assumes that the function is continuous,\n  * but not necessarily smooth.</p>\n     /**\n      * Construct a solver.\n      *\n-     * @param absoluteAccuracy absolute accuracy\n+     * @param absoluteAccuracy Absolute accuracy.\n      */\n     public PegasusSolver(final double absoluteAccuracy) {\n         super(absoluteAccuracy, Method.PEGASUS);\n     /**\n      * Construct a solver.\n      *\n-     * @param relativeAccuracy relative accuracy\n-     * @param absoluteAccuracy absolute accuracy\n+     * @param relativeAccuracy Relative accuracy.\n+     * @param absoluteAccuracy Absolute accuracy.\n      */\n     public PegasusSolver(final double relativeAccuracy,\n                          final double absoluteAccuracy) {\n     /**\n      * Construct a solver.\n      *\n-     * @param relativeAccuracy relative accuracy\n-     * @param absoluteAccuracy absolute accuracy\n+     * @param relativeAccuracy Relative accuracy.\n+     * @param absoluteAccuracy Absolute accuracy.\n      * @param functionValueAccuracy Maximum function value error.\n      */\n     public PegasusSolver(final double relativeAccuracy,\n                          final double functionValueAccuracy) {\n         super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy, Method.PEGASUS);\n     }\n-\n }\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java\n \n package org.apache.commons.math.analysis.solvers;\n \n-\n /**\n  * Implements the <em>Regula Falsi</em> or <em>False position</em> method for\n  * root-finding (approximating a zero of a univariate real function). It is a\n- * modified {@link SecantSolver <em>Secant</em>} method. Unlike the\n- * <em>Secant</em> method, convergence is guaranteed by maintaining a\n- * bracketed solution.\n+ * modified {@link SecantSolver <em>Secant</em>} method.\n+ *\n+ * <p>The <em>Regula Falsi</em> method is included for completeness, for\n+ * testing purposes, for educational purposes, for comparison to other\n+ * algorithms, etc. It is however <strong>not</strong> intended to be used\n+ * for actual problems, as one of the bounds often remains fixed, resulting\n+ * in very slow convergence. Instead, one of the well-known modified\n+ * <em>Regula Falsi</em> algorithms can be used ({@link IllinoisSolver\n+ * <em>Illinois</em>} or {@link PegasusSolver <em>Pegasus</em>}). These two\n+ * algorithms solve the fundamental issues of the original <em>Regula\n+ * Falsi</em> algorithm, and greatly out-performs it for most, if not all,\n+ * (practical) functions.\n+ *\n+ * <p>Unlike the <em>Secant</em> method, the <em>Regula Falsi</em> guarantees\n+ * convergence, by maintaining a bracketed solution. Note however, that due to\n+ * the finite/limited precision of Java's {@link Double double} type, which is\n+ * used in this implementation, the algorithm may get stuck in a situation\n+ * where it no longer makes any progress. Such cases are detected and result\n+ * in a {@code ConvergenceException} exception being thrown. In other words,\n+ * the algorithm theoretically guarantees convergence, but the implementation\n+ * does not.</p>\n  *\n  * <p>The <em>Regula Falsi</em> method assumes that the function is continuous,\n  * but not necessarily smooth.</p>\n     /**\n      * Construct a solver.\n      *\n-     * @param absoluteAccuracy absolute accuracy\n+     * @param absoluteAccuracy Absolute accuracy.\n      */\n     public RegulaFalsiSolver(final double absoluteAccuracy) {\n         super(absoluteAccuracy, Method.REGULA_FALSI);\n     /**\n      * Construct a solver.\n      *\n-     * @param relativeAccuracy relative accuracy\n-     * @param absoluteAccuracy absolute accuracy\n+     * @param relativeAccuracy Relative accuracy.\n+     * @param absoluteAccuracy Absolute accuracy.\n      */\n     public RegulaFalsiSolver(final double relativeAccuracy,\n                              final double absoluteAccuracy) {\n     /**\n      * Construct a solver.\n      *\n-     * @param relativeAccuracy relative accuracy\n-     * @param absoluteAccuracy absolute accuracy\n+     * @param relativeAccuracy Relative accuracy.\n+     * @param absoluteAccuracy Absolute accuracy.\n      * @param functionValueAccuracy Maximum function value error.\n      */\n     public RegulaFalsiSolver(final double relativeAccuracy,\n--- a/src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java\n package org.apache.commons.math.analysis.solvers;\n \n import org.apache.commons.math.analysis.UnivariateRealFunction;\n-import org.apache.commons.math.exception.TooManyEvaluationsException;\n+import org.apache.commons.math.exception.ConvergenceException;\n import org.junit.Test;\n import org.junit.Assert;\n \n         return new int[] {3, 7, 8, 19, 18, 11, 67, 55, 288, 151, -1};\n     }\n \n-    @Test(expected=TooManyEvaluationsException.class)\n+    @Test(expected=ConvergenceException.class)\n     public void testIssue631() {\n         final UnivariateRealFunction f = new UnivariateRealFunction() {\n                 /** {@inheritDoc} */", "timestamp": 1314961799, "metainfo": ""}