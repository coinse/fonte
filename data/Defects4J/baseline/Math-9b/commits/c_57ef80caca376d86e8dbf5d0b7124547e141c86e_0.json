{"sha": "57ef80caca376d86e8dbf5d0b7124547e141c86e", "log": "Fixed two errors reported on commons-user / commons-dev: 1. addValue(object) and getXxx methods failing or returning incorrect results for Integer arguments when the freq table is not empty 2. getXxx methods failing / returning inconsistent values when invoked on an empty table.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n  * The values are ordered using the default (natural order), unless a  \n  * <code>Comparator</code>is supplied in the constructor.\n  *\n- * @version $Revision: 1.25 $ $Date: 2004/07/02 05:27:41 $\n+ * @version $Revision: 1.26 $ $Date: 2004/08/12 15:33:39 $\n  */\n public class Frequency implements Serializable {\n     \n     public void addValue(int v) {\n         addValue(new Long(v));\n     }\n+    \n+    /**\n+     * Adds 1 to the frequency count for v.\n+     * \n+     * @param v the value to add.\n+     */\n+    public void addValue(Integer v) {\n+        addValue(new Long(v.longValue()));\n+    }\n \n     /**\n      * Adds 1 to the frequency count for v.\n      * @return the frequency of v.\n      */\n     public long getCount(Object v) {\n+        if (v instanceof Integer) {\n+            return getCount(((Integer) v).longValue());\n+        }\n         long result = 0;\n         try { \n             Long count =  (Long) freqTable.get(v);\n     /**\n       * Returns the percentage of values that are equal to v\n      * (as a proportion between 0 and 1).\n+     * <p>\n+     * Returns <code>Double.NaN</code> if no values have been added.\n      * \n      * @param v the value to lookup\n      * @return the proportion of values equal to v\n      */\n     public double getPct(Object v) {\n+        if (getSumFreq() == 0) {\n+            return Double.NaN;\n+        }\n         return (double) getCount(v) / (double) getSumFreq();        \n     }\n     \n      * @return the proportion of values equal to v\n      */\n     public long getCumFreq(Object v) {\n+        if (getSumFreq() == 0) {\n+            return 0;\n+        }\n         Comparator c = freqTable.comparator();\n         if (c == null) {\n             c = new NaturalComparator();\n      * Returns the cumulative percentage of values less than or equal to v\n      * (as a proportion between 0 and 1).\n      * <p>\n-     * Returns 0 if v is not comparable to the values set.\n+     * Returns <code>Double.NaN</code> if no values have been added.\n+     * Returns 0 if at least one value has been added, but v is not comparable\n+     * to the values set.\n      * \n      * @param v the value to lookup\n      * @return the proportion of values less than or equal to v\n      */\n     public double getCumPct(Object v) {\n+        if (getSumFreq() == 0) {\n+            return Double.NaN;\n+        }\n         return (double) getCumFreq(v) / (double) getSumFreq();        \n     }\n     \n--- a/src/test/org/apache/commons/math/stat/FrequencyTest.java\n+++ b/src/test/org/apache/commons/math/stat/FrequencyTest.java\n /**\n  * Test cases for the {@link Frequency} class.\n  *\n- * @version $Revision: 1.12 $ $Date: 2004/03/07 00:57:11 $\n+ * @version $Revision: 1.13 $ $Date: 2004/08/12 15:33:39 $\n  */\n \n public final class FrequencyTest extends TestCase {\n         f.clear();\n         \n         f = null;\n+        Frequency f = new Frequency();\n+        f.addValue(1);\n+        f.addValue(new Integer(1));\n+        f.addValue(new Long(1));\n+        f.addValue(2);\n+        f.addValue(new Integer(-1));\n+        assertEquals(\"1 count\", 3, f.getCount(1));\n+        assertEquals(\"1 count\", 3, f.getCount(new Integer(1)));\n+        assertEquals(\"0 cum pct\", 0.2, f.getCumPct(0), tolerance);\n+        assertEquals(\"1 pct\", 0.6, f.getPct(new Integer(1)), tolerance);\n+        assertEquals(\"-2 cum pct\", 0, f.getCumPct(-2), tolerance);\n+        assertEquals(\"10 cum pct\", 1, f.getCumPct(10), tolerance);   \n+        \n+        f = null;\n         f = new Frequency(String.CASE_INSENSITIVE_ORDER);\n         f.addValue(\"one\");\n         f.addValue(\"One\");\n     \tassertEquals(\"a string cum pct\",0.0,f.getCumPct(aString),tolerance);\n     }\n     \n+    /** test empty table */\n+    public void testEmptyTable() {\n+        assertEquals(\"freq sum, empty table\", 0, f.getSumFreq());\n+        assertEquals(\"count, empty table\", 0, f.getCount(0));\n+        assertEquals(\"count, empty table\",0, f.getCount(new Integer(0)));\n+        assertEquals(\"cum freq, empty table\", 0, f.getCumFreq(0));\n+        assertEquals(\"cum freq, empty table\", 0, f.getCumFreq(\"x\"));\n+        assertTrue(\"pct, empty table\", Double.isNaN(f.getPct(0)));\n+        assertTrue(\"pct, empty table\", Double.isNaN(f.getPct(new Integer(0))));\n+        assertTrue(\"cum pct, empty table\", Double.isNaN(f.getCumPct(0)));\n+        assertTrue(\"cum pct, empty table\", Double.isNaN(f.getCumPct(new Integer(0))));   \n+    }\n+    \n     /**\n      * Tests toString() \n      */", "timestamp": 1092324819, "metainfo": ""}