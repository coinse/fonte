{"sha": "e9c43d6b521223d3702436f355de4a12a9f3f5c9", "log": "MATH-899 Added wrapper class that allows thread-safe usage of any \"RandomGenerator\".   ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math3/random/SynchronizedRandomGenerator.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.random;\n+\n+/**\n+ * Any {@link RandomGenerator} implementation can be thread-safe if it\n+ * is used through an instance of this class.\n+ * This is achieved by enclosing calls to the methods of the actual\n+ * generator inside the overridden {@code synchronized} methods of this\n+ * class.\n+ *\n+ * @since 3.1\n+ * @version $Id$\n+ */\n+public class SynchronizedRandomGenerator implements RandomGenerator {\n+    /** Object to which all calls will be delegated. */\n+    private final RandomGenerator wrapped;\n+\n+    /**\n+     * Creates a synchronized wrapper for the given {@code RandomGenerator}\n+     * instance.\n+     *\n+     * @param rng Generator whose methods will be called through\n+     * their corresponding overridden synchronized version.\n+     * To ensure thread-safety, the wrapped generator <em>must</em>\n+     * not be used directly.\n+     */\n+    public SynchronizedRandomGenerator(RandomGenerator rng) {\n+        wrapped = rng;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public synchronized void setSeed(int seed) {\n+        wrapped.setSeed(seed);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public synchronized void setSeed(int[] seed) {\n+        wrapped.setSeed(seed);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public synchronized void setSeed(long seed) {\n+        wrapped.setSeed(seed);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public synchronized void nextBytes(byte[] bytes) {\n+        wrapped.nextBytes(bytes);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public synchronized int nextInt() {\n+        return wrapped.nextInt();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public synchronized int nextInt(int n) {\n+        return wrapped.nextInt();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public synchronized long nextLong() {\n+        return wrapped.nextLong();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public synchronized boolean nextBoolean() {\n+        return wrapped.nextBoolean();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public synchronized float nextFloat() {\n+        return wrapped.nextFloat();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public synchronized double nextDouble() {\n+        return wrapped.nextDouble();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public synchronized double nextGaussian() {\n+        return wrapped.nextGaussian();\n+    }\n+}", "timestamp": 1353272434, "metainfo": ""}