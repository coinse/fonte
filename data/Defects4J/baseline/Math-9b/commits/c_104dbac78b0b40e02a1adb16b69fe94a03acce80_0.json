{"sha": "104dbac78b0b40e02a1adb16b69fe94a03acce80", "log": "Refined test (follow-up of MATH-441).   ", "commit": "\n--- a/src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java\n import org.apache.commons.math.random.JDKRandomGenerator;\n import org.apache.commons.math.util.FastMath;\n import org.junit.Test;\n+import org.junit.Assert;\n \n public class MultiStartUnivariateRealOptimizerTest {\n \n     @Test\n-    public void testSinMin() throws MathUserException {\n+    public void testSinMin() {\n         UnivariateRealFunction f = new SinFunction();\n         UnivariateRealOptimizer underlying = new BrentOptimizer(1e-10, 1e-14);\n         underlying.setMaxEvaluations(300);\n     }\n \n     @Test\n-    public void testQuinticMin() throws MathUserException {\n+    public void testQuinticMin() {\n         // The quintic function has zeros at 0, +-0.5 and +-1.\n         // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n         UnivariateRealFunction f = new QuinticFunction();\n         assertTrue(optimizer.getEvaluations() <= 100);\n     }\n \n-    @Test(expected=MathUserException.class)\n-    public void testBadFunction() throws MathUserException {\n+    @Test\n+    public void testBadFunction() {\n         UnivariateRealFunction f = new UnivariateRealFunction() {\n-                public double value(double x) throws MathUserException {\n+                public double value(double x) {\n                     if (x < 0) {\n                         throw new MathUserException();\n                     }\n         g.setSeed(4312000053L);\n         MultiStartUnivariateRealOptimizer<UnivariateRealFunction> optimizer =\n             new MultiStartUnivariateRealOptimizer<UnivariateRealFunction>(underlying, 5, g);\n+ \n+        try {\n+            UnivariateRealPointValuePair optimum\n+                = optimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n+            Assert.fail();\n+        } catch (MathUserException e) {\n+            // Expected.\n+        }\n \n-        optimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n+        // Ensure that the exception was thrown because no optimum was found.\n+        Assert.assertTrue(optimizer.getOptima()[0] == null);\n     }\n }", "timestamp": 1290306974, "metainfo": ""}