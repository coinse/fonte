{"sha": "3994e3c6ef25edc95fce8a843fc2a3bb2bebfaec", "log": "Removed double[] solve(double[]) from LUDecompositionImpl.Solver  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java\n         }\n \n         /** {@inheritDoc} */\n-        public double[] solve(double[] b) {\n-            final int m = pivot.length;\n-            if (b.length != m) {\n-                throw new DimensionMismatchException(b.length, m);\n+        public RealVector solve(RealVector b) {\n+            final int m = pivot.length;\n+            if (b.getDimension() != m) {\n+                throw new DimensionMismatchException(b.getDimension(), m);\n             }\n             if (singular) {\n                 throw new SingularMatrixException();\n \n             // Apply permutations to b\n             for (int row = 0; row < m; row++) {\n-                bp[row] = b[pivot[row]];\n+                bp[row] = b.getEntry(pivot[row]);\n             }\n \n             // Solve LY = b\n                 }\n             }\n \n-            return bp;\n-        }\n-\n-        /** {@inheritDoc} */\n-        public RealVector solve(RealVector b) {\n-            try {\n-                return solve((ArrayRealVector) b);\n-            } catch (ClassCastException cce) {\n-\n-                final int m = pivot.length;\n-                if (b.getDimension() != m) {\n-                    throw new DimensionMismatchException(b.getDimension(), m);\n-                }\n-                if (singular) {\n-                    throw new SingularMatrixException();\n-                }\n-\n-                final double[] bp = new double[m];\n-\n-                // Apply permutations to b\n-                for (int row = 0; row < m; row++) {\n-                    bp[row] = b.getEntry(pivot[row]);\n-                }\n-\n-                // Solve LY = b\n-                for (int col = 0; col < m; col++) {\n-                    final double bpCol = bp[col];\n-                    for (int i = col + 1; i < m; i++) {\n-                        bp[i] -= bpCol * lu[i][col];\n-                    }\n-                }\n-\n-                // Solve UX = Y\n-                for (int col = m - 1; col >= 0; col--) {\n-                    bp[col] /= lu[col][col];\n-                    final double bpCol = bp[col];\n-                    for (int i = 0; i < col; i++) {\n-                        bp[i] -= bpCol * lu[i][col];\n-                    }\n-                }\n-\n-                return new ArrayRealVector(bp, false);\n-            }\n-        }\n-\n-        /** Solve the linear equation A &times; X = B.\n-         * <p>The A matrix is implicit here. It is </p>\n-         * @param b right-hand side of the equation A &times; X = B\n-         * @return a vector X such that A &times; X = B\n-         * @throws DimensionMismatchException if the matrices dimensions\n-         * do not match.\n-         * @throws SingularMatrixException if decomposed matrix is singular.\n-         */\n-        public ArrayRealVector solve(ArrayRealVector b) {\n-            return new ArrayRealVector(solve(b.getDataRef()), false);\n+            return new ArrayRealVector(bp, false);\n         }\n \n         /** {@inheritDoc} */", "timestamp": 1315290031, "metainfo": ""}