{"sha": "200ab0ec4adeeea15f6b641d56170989cf16cb58", "log": "PR: http://nagoya.apache.org/bugzilla/show_bug.cgi?id=20773 Submitted by:\tbrent@worden.org   ", "commit": "\n--- a/src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n  * @author Brent Worden\n  */\n public class ExponentialDistributionImpl\n-\textends AbstractContinuousDistribution\n \timplements ExponentialDistribution {\n \n     /** The mean of this distribution. */\n \t\tsuper();\n         setMean(mean);\n \t}\n-\n-        \n-    /**\n-     * Access the domain value lower bound, based on <code>p</code>, used to\n-     * bracket a CDF root.  This method is used by\n-     * {@link #inverseCummulativeProbability(double)} to find critical values.\n-     * \n-     * @param p the desired probability for the critical value\n-     * @return domain value lower bound, i.e.\n-     *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n-     */\n-    protected double getDomainLowerBound(double p){\n-        return 0.0;\n-    }\n-\n-    /**\n-     * Access the domain value upper bound, based on <code>p</code>, used to\n-     * bracket a CDF root.  This method is used by\n-     * {@link #inverseCummulativeProbability(double)} to find critical values.\n-     * \n-     * @param p the desired probability for the critical value\n-     * @return domain value upper bound, i.e.\n-     *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n-     */\n-    protected double getDomainUpperBound(double p){\n-        return Double.MAX_VALUE;\n-    }\n-\n-    /**\n-     * Access the initial domain value, based on <code>p</code>, used to\n-     * bracket a CDF root.  This method is used by\n-     * {@link #inverseCummulativeProbability(double)} to find critical values.\n-     * \n-     * @param p the desired probability for the critical value\n-     * @return initial domain value\n-     */\n-    protected double getInitialDomain(double p){\n-        return getMean();\n-    }\n \n     /**\n      * Modify the mean.\n      */\n \tpublic double cummulativeProbability(double x) {\n         double ret;\n-\t\tif(x < 0.0){\n+\t\tif(x <= 0.0){\n             ret = 0.0;\n \t\t} else {\n             ret = 1.0 - Math.exp(-x / getMean());\n      * @return x, such that P(X &lt; x) = <code>p</code>\n      */\n     public double inverseCummulativeProbability(double p){\n+        double ret;\n+        \n         if(p < 0.0 || p > 1.0){\n-            throw new IllegalArgumentException(\n-                \"p must be between 0.0 and 1.0, inclusive.\");\n+            ret = Double.NaN;\n+        } else if(p == 1.0){\n+            ret = Double.POSITIVE_INFINITY;\n+        } else {\n+            ret = -getMean() * Math.log(1.0 - p);\n         }\n-        return -getMean() * Math.log(1.0 - p);\n+        \n+        return ret;\n+    }\n+    \n+    /**\n+     * For this disbution, X, this method returns P(x0 &lt; X &lt; x1).\n+     * @param x0 the lower bound\n+     * @param x1 the upper bound\n+     * @return the cummulative probability. \n+     */\n+    public double cummulativeProbability(double x0, double x1) {\n+        return cummulativeProbability(x1) - cummulativeProbability(x0);\n     }\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/TestUtils.java\n+package org.apache.commons.math;\n+\n+import junit.framework.Assert;\n+\n+/**\n+ * @author Brent Worden\n+ */\n+public class TestUtils {\n+    /**\n+     * \n+     */\n+    private TestUtils() {\n+        super();\n+    }\n+\n+    public static void assertEquals(double expected, double actual, double delta) {\n+        // check for NaN\n+        if(Double.isNaN(expected)){\n+            Assert.assertTrue(Double.isNaN(actual));\n+        } else {\n+            Assert.assertEquals(expected, actual, delta);\n+        }\n+    }\n+}\n--- a/src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java\n  */\n package org.apache.commons.math.stat.distribution;\n \n+import org.apache.commons.math.TestUtils;\n+\n import junit.framework.TestCase;\n \n /**\n         super.tearDown();\n     }\n \n-    public void testLowerTailProbability(){\n+    public void testInverseCummulativeProbability001() {\n+        testValue(.005003, .001);\n+    }\n+    \n+    public void testInverseCummulativeProbability010() {\n+        testValue(0.050252, .010);\n+    }\n+    \n+    public void testInverseCummulativeProbability025() {\n+        testValue(0.126589, .025);\n+    }\n+\n+    public void testInverseCummulativeProbability050() {\n+        testValue(0.256566, .050);\n+    }\n+    \n+    public void testInverseCummulativeProbability100() {\n+        testValue(0.526803, .100);\n+    }\n+\n+    public void testInverseCummulativeProbability999() {\n+        testValue(34.5388, .999);\n+    }\n+    \n+    public void testInverseCummulativeProbability990() {\n+        testValue(23.0259, .990);\n+    }\n+    \n+    public void testInverseCummulativeProbability975() {\n+        testValue(18.4444, .975);\n+    }\n+\n+    public void testInverseCummulativeProbability950() {\n+        testValue(14.9787, .950);\n+    }\n+    \n+    public void testInverseCummulativeProbability900() {\n+        testValue(11.5129, .900);\n+    }\n+\n+    public void testCummulativeProbability001() {\n         testProbability(0.005003, .001);\n+    }\n+    \n+    public void testCummulativeProbability010() {\n         testProbability(0.050252, .010);\n+    }\n+    \n+    public void testCummulativeProbability025() {\n         testProbability(0.126589, .025);\n+    }\n+\n+    public void testCummulativeProbability050() {\n         testProbability(0.256566, .050);\n+    }\n+    \n+    public void testCummulativeProbability100() {\n         testProbability(0.526803, .100);\n     }\n \n-    public void testUpperTailProbability(){\n+    public void testCummulativeProbability999() {\n         testProbability(34.5388, .999);\n+    }\n+    \n+    public void testCummulativeProbability990() {\n         testProbability(23.0259, .990);\n+    }\n+    \n+    public void testCummulativeProbability975() {\n         testProbability(18.4444, .975);\n+    }\n+\n+    public void testCummulativeProbability950() {\n         testProbability(14.9787, .950);\n+    }\n+    \n+    public void testCummulativeProbability900() {\n         testProbability(11.5129, .900);\n     }\n-    \n-    public void testLowerTailValues(){\n-        testValue(0.005003, .001);\n-        testValue(0.050252, .010);\n-        testValue(0.126589, .025);\n-        testValue(0.256566, .050);\n-        testValue(0.526803, .100);\n-    }\n-    \n-    public void testUpperTailValues(){\n-        testValue(34.5388, .999);\n-        testValue(23.0259, .990);\n-        testValue(18.4444, .975);\n-        testValue(14.9787, .950);\n-        testValue(11.5129, .900);\n+\n+    public void testCummulativeProbabilityNegative() {\n+        testProbability(-1.0, 0.0);\n+    }\n+\n+    public void testCummulativeProbabilityZero() {\n+        testProbability(0.0, 0.0);\n+    }\n+\n+    public void testInverseCummulativeProbabilityNegative() {\n+        testValue(Double.NaN, -1.0);\n+    }\n+\n+    public void testInverseCummulativeProbabilityZero() {\n+        testValue(0.0, 0.0);\n+    }\n+\n+    public void testInverseCummulativeProbabilityOne() {\n+        testValue(Double.POSITIVE_INFINITY, 1.0);\n+    }\n+\n+    public void testInverseCummulativeProbabilityPositive() {\n+        testValue(Double.NaN, 2.0);\n+    }\n+    \n+    public void testCummulativeProbability2() {\n+        double actual = exp.cummulativeProbability(0.25, 0.75);\n+        assertEquals(0.0905214, actual, 10e-4);\n     }\n     \n     private void testProbability(double x, double expected){\n         double actual = exp.cummulativeProbability(x);\n-        assertEquals(\"probability for \" + x, expected, actual, 10e-4);\n+        TestUtils.assertEquals(expected, actual, 10e-4);\n     }\n     \n     private void testValue(double expected, double p){\n         double actual = exp.inverseCummulativeProbability(p);\n-        assertEquals(\"value for \" + p, expected, actual, 10e-4);\n+        TestUtils.assertEquals(expected, actual, 10e-4);\n     }\n }", "timestamp": 1055564683, "metainfo": ""}