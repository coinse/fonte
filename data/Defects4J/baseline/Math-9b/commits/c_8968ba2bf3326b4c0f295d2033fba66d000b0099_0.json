{"sha": "8968ba2bf3326b4c0f295d2033fba66d000b0099", "log": "fixed javadoc related checkstyle errors  ", "commit": "\n--- a/src/java/org/apache/commons/math/ode/ODEIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/ODEIntegrator.java\n import org.apache.commons.math.ode.events.EventHandler;\n import org.apache.commons.math.ode.sampling.StepHandler;\n \n+/**\n+ * This interface defines the common parts shared by integrators\n+ * for first and second order differential equations.\n+ * @see FirstOrderIntegrator\n+ * @see SecondOrderIntegrator\n+ * @version $Revision$ $Date$\n+ * @since 2.0\n+ */\n public interface ODEIntegrator extends Serializable {\n \n     /** Get the name of the method.\n      */\n     double getCurrentSignedStepsize();\n \n-}\n+}\n--- a/src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java\n     }\n \n     /** Compute the backward differences coefficients array.\n-     * <p>This is quite similar to the Pascal triangle, except for a\n-     * (-1)<sup>i</sup> sign. We use a straightforward approach here,\n-     * since we don't expect this to be run too many times with too\n-     * high k. It is based on the recurrence relations:</p>\n+     * <p>This is quite similar to the Pascal triangle containing the\n+     * binomial coefficiens, except for an additional (-1)<sup>i</sup> sign.\n+     * We use a straightforward approach here, since we don't expect this to\n+     * be run too many times with too high k. It is based on the recurrence\n+     * relations:</p>\n      * <pre>\n      *   &nabla;<sup>0</sup> f<sub>n</sub> = f<sub>n</sub>\n      *   &nabla;<sup>i+1</sup> f<sub>n</sub> = &nabla;<sup>i</sup>f<sub>n</sub> - &nabla;<sup>i</sup>f<sub>n-1</sub>\n      * </pre>\n      * @param order order of the integration method\n+     * @return the coefficients array for backward differences\n      */\n     static int[][] computeBackwardDifferencesArray(final int order) {\n \n--- a/src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java\n     /** Truncate a step.\n      * <p>Truncating a step is necessary when an event is triggered\n      * before the nominal end of the step.</p>\n+     * @param truncatedEndTime end time of truncated step\n      */\n     void truncateStep(final double truncatedEndTime) {\n         currentTime = truncatedEndTime;\n--- a/src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java\n     /** Truncate a step.\n      * <p>Truncating a step is necessary when an event is triggered\n      * before the nominal end of the step.</p>\n+     * @param truncatedEndTime end time of truncated step\n      */\n     void truncateStep(final double truncatedEndTime) {\n         currentTime = truncatedEndTime;\n--- a/src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java\n         private double[] finalState;\n \n         /** Build a new instance.\n-         * @param number of steps to store\n+         * @param n number of steps to store\n          */\n         public StoringStepHandler(final int n) {\n             this.n = n;", "timestamp": 1216122803, "metainfo": ""}