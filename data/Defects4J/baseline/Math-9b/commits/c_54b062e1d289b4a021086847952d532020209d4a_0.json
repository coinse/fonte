{"sha": "54b062e1d289b4a021086847952d532020209d4a", "log": "Fixed failing test.  ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java\n     private double[][] generatePartition(double[] sample) {\n         final int length = sample.length;\n         final double[][] out = new double[5][];\n-        int cur = 0;\n-        int offset = 0;\n-        int sampleCount = 0;\n+        int cur = 0;          // beginning of current partition segment\n+        int offset = 0;       // end of current partition segment\n+        int sampleCount = 0;  // number of segments defined \n         for (int i = 0; i < 5; i++) {\n             if (cur == length || offset == length) {\n                 break;\n             }\n-            final IntegerDistribution partitionPoint = new UniformIntegerDistribution(cur, length - 1);\n-            final int next = (i == 4 || cur == length - 1) ? length - 1 : partitionPoint.sample();\n+            final int next;\n+            if (i == 4 || cur == length - 1) {\n+                next = length - 1;\n+            } else {\n+                next = (new UniformIntegerDistribution(cur, length - 1)).sample();\n+            }\n             final int subLength = next - cur + 1;\n             out[i] = new double[subLength];\n             System.arraycopy(sample, offset, out[i], 0, subLength);", "timestamp": 1344196111, "metainfo": ""}