{"sha": "e92310e1cb0862d8a529952fb02c34a1fa6f931f", "log": "In CholeskyDecompositionImpl.Solver   - removed solve(double[]) according to JIRA MATH-653   - removed solve(ArrayRealVector) because it entails no performance gain over the general solve(RealVector)  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n         }\n \n         /** {@inheritDoc} */\n-        public double[] solve(double[] b) {\n+        public RealVector solve(final RealVector b) {\n             final int m = lTData.length;\n-            if (b.length != m) {\n-                throw new DimensionMismatchException(b.length, m);\n-            }\n-\n-            final double[] x = b.clone();\n+            if (b.getDimension() != m) {\n+                throw new DimensionMismatchException(b.getDimension(), m);\n+            }\n+\n+            final double[] x = b.getData();\n \n             // Solve LY = b\n             for (int j = 0; j < m; j++) {\n                 }\n             }\n \n-            return x;\n-        }\n-\n-        /** {@inheritDoc} */\n-        public RealVector solve(RealVector b) {\n-            try {\n-                return solve((ArrayRealVector) b);\n-            } catch (ClassCastException cce) {\n-\n-                final int m = lTData.length;\n-                if (b.getDimension() != m) {\n-                    throw new DimensionMismatchException(b.getDimension(), m);\n-                }\n-\n-                final double[] x = b.getData();\n-\n-                // Solve LY = b\n-                for (int j = 0; j < m; j++) {\n-                    final double[] lJ = lTData[j];\n-                    x[j] /= lJ[j];\n-                    final double xJ = x[j];\n-                    for (int i = j + 1; i < m; i++) {\n-                        x[i] -= xJ * lJ[i];\n-                    }\n-                }\n-\n-                // Solve LTX = Y\n-                for (int j = m - 1; j >= 0; j--) {\n-                    x[j] /= lTData[j][j];\n-                    final double xJ = x[j];\n-                    for (int i = 0; i < j; i++) {\n-                        x[i] -= xJ * lTData[i][j];\n-                    }\n-                }\n-\n-                return new ArrayRealVector(x, false);\n-            }\n-        }\n-\n-        /** Solve the linear equation A &times; X = B.\n-         * <p>The A matrix is implicit here. It is </p>\n-         * @param b right-hand side of the equation A &times; X = B\n-         * @return a vector X such that A &times; X = B\n-         * @throws DimensionMismatchException if the matrices dimensions do not match.\n-         * @throws SingularMatrixException if the decomposed matrix is singular.\n-         */\n-        public ArrayRealVector solve(ArrayRealVector b) {\n-            return new ArrayRealVector(solve(b.getDataRef()), false);\n+            return new ArrayRealVector(x, false);\n         }\n \n         /** Solve the linear equation A &times; X = B for matrices A.", "timestamp": 1315193422, "metainfo": ""}