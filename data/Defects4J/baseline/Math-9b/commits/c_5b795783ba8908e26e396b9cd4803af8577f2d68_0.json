{"sha": "5b795783ba8908e26e396b9cd4803af8577f2d68", "log": "MATH-795: factored out unit tests for RealVector.map(UnivariateFunction) and RealVector.mapToSelf(UnivariateFunction).  This test fails with OpenMapRealVector. This is a known issue (sign of zero is lost in this class).  ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n import java.util.Random;\n \n import org.apache.commons.math3.TestUtils;\n+import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.function.Abs;\n import org.apache.commons.math3.analysis.function.Acos;\n import org.apache.commons.math3.analysis.function.Asin;\n         doTestMapBinaryOperation(BinaryOperation.DIV, true);\n     }\n \n+    private void doTestMapFunction(final UnivariateFunction f,\n+        final boolean inPlace) {\n+        final double x = getPreferredEntryValue();\n+        final double y = x + 1d;\n+        final double z = y + 1d;\n+        final double[] data =\n+            {\n+                Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY,\n+                0d, -0d, x, y, z, 2 * x, -x, 1 / x, x * x, x + y, x - y, y - x,\n+                0.5 * FastMath.PI, -0.5 * FastMath.PI, FastMath.E, -FastMath.E,\n+                1.0, -1.0\n+            };\n+        final double[] expected = new double[data.length];\n+        for (int i = 0; i < data.length; i++) {\n+            expected[i] = f.value(data[i]);\n+        }\n+        final RealVector v = create(data);\n+        final RealVector actual;\n+        if (inPlace) {\n+            actual = v.mapToSelf(f);\n+            Assert.assertSame(v, actual);\n+        } else {\n+            actual = v.map(f);\n+        }\n+        TestUtils.assertEquals(f.getClass().getSimpleName(), expected, actual, 1E-16);\n+    }\n+\n+    private UnivariateFunction[] createFunctions() {\n+        return new UnivariateFunction[] {\n+            new Power(2.0), new Exp(), new Expm1(), new Log(), new Log10(),\n+            new Log1p(), new Cosh(), new Sinh(), new Tanh(), new Cos(),\n+            new Sin(), new Tan(), new Acos(), new Asin(), new Atan(),\n+            new Inverse(), new Abs(), new Sqrt(), new Cbrt(), new Ceil(),\n+            new Floor(), new Rint(), new Signum(), new Ulp()\n+        };\n+    }\n+\n+    @Test\n+    public void testMap() {\n+        final UnivariateFunction[] functions = createFunctions();\n+        for (UnivariateFunction f : functions) {\n+            doTestMapFunction(f, false);\n+        }\n+    }\n+\n+    @Test\n+    public void testMapToSelf() {\n+        final UnivariateFunction[] functions = createFunctions();\n+        for (UnivariateFunction f : functions) {\n+            doTestMapFunction(f, true);\n+        }\n+    }\n+\n     @Test\n     public void testDataInOut() {\n         final RealVector v1 = create(vec1);\n         Assert.assertEquals(vout10, vout10_2);\n         vout10_2.setEntry(0, 1.1);\n         Assert.assertNotSame(vout10, vout10_2);\n-    }\n-\n-    @Test\n-    public void testMapFunctions() {\n-        final RealVector v1 = create(vec1);\n-\n-        //octave =  v1 .^ 2.0\n-        RealVector v_mapPow = v1.map(new Power(2));\n-        double[] result_mapPow = {1d, 4d, 9d};\n-        assertClose(\"compare vectors\" ,result_mapPow,v_mapPow.toArray(),normTolerance);\n-\n-        //octave =  v1 .^ 2.0\n-        RealVector v_mapPowToSelf = v1.copy();\n-        v_mapPowToSelf.mapToSelf(new Power(2));\n-        double[] result_mapPowToSelf = {1d, 4d, 9d};\n-        assertClose(\"compare vectors\" ,result_mapPowToSelf,v_mapPowToSelf.toArray(),normTolerance);\n-\n-        //octave =  exp(v1)\n-        RealVector v_mapExp = v1.map(new Exp());\n-        double[] result_mapExp = {2.718281828459045e+00d,7.389056098930650e+00d, 2.008553692318767e+01d};\n-        assertClose(\"compare vectors\" ,result_mapExp,v_mapExp.toArray(),normTolerance);\n-\n-        //octave =  exp(v1)\n-        RealVector v_mapExpToSelf = v1.copy();\n-        v_mapExpToSelf.mapToSelf(new Exp());\n-        double[] result_mapExpToSelf = {2.718281828459045e+00d,7.389056098930650e+00d, 2.008553692318767e+01d};\n-        assertClose(\"compare vectors\" ,result_mapExpToSelf,v_mapExpToSelf.toArray(),normTolerance);\n-\n-\n-        //octave =  ???\n-        RealVector v_mapExpm1 = v1.map(new Expm1());\n-        double[] result_mapExpm1 = {1.718281828459045d,6.38905609893065d, 19.085536923187668d};\n-        assertClose(\"compare vectors\" ,result_mapExpm1,v_mapExpm1.toArray(),normTolerance);\n-\n-        //octave =  ???\n-        RealVector v_mapExpm1ToSelf = v1.copy();\n-        v_mapExpm1ToSelf.mapToSelf(new Expm1());\n-        double[] result_mapExpm1ToSelf = {1.718281828459045d,6.38905609893065d, 19.085536923187668d};\n-        assertClose(\"compare vectors\" ,result_mapExpm1ToSelf,v_mapExpm1ToSelf.toArray(),normTolerance);\n-\n-        //octave =  log(v1)\n-        RealVector v_mapLog = v1.map(new Log());\n-        double[] result_mapLog = {0d,6.931471805599453e-01d, 1.098612288668110e+00d};\n-        assertClose(\"compare vectors\" ,result_mapLog,v_mapLog.toArray(),normTolerance);\n-\n-        //octave =  log(v1)\n-        RealVector v_mapLogToSelf = v1.copy();\n-        v_mapLogToSelf.mapToSelf(new Log());\n-        double[] result_mapLogToSelf = {0d,6.931471805599453e-01d, 1.098612288668110e+00d};\n-        assertClose(\"compare vectors\" ,result_mapLogToSelf,v_mapLogToSelf.toArray(),normTolerance);\n-\n-        //octave =  log10(v1)\n-        RealVector v_mapLog10 = v1.map(new Log10());\n-        double[] result_mapLog10 = {0d,3.010299956639812e-01d, 4.771212547196624e-01d};\n-        assertClose(\"compare vectors\" ,result_mapLog10,v_mapLog10.toArray(),normTolerance);\n-\n-        //octave =  log(v1)\n-        RealVector v_mapLog10ToSelf = v1.copy();\n-        v_mapLog10ToSelf.mapToSelf(new Log10());\n-        double[] result_mapLog10ToSelf = {0d,3.010299956639812e-01d, 4.771212547196624e-01d};\n-        assertClose(\"compare vectors\" ,result_mapLog10ToSelf,v_mapLog10ToSelf.toArray(),normTolerance);\n-\n-        //octave =  ???\n-        RealVector v_mapLog1p = v1.map(new Log1p());\n-        double[] result_mapLog1p = {0.6931471805599453d,1.0986122886681096d,1.3862943611198906d};\n-        assertClose(\"compare vectors\" ,result_mapLog1p,v_mapLog1p.toArray(),normTolerance);\n-\n-        //octave =  ???\n-        RealVector v_mapLog1pToSelf = v1.copy();\n-        v_mapLog1pToSelf.mapToSelf(new Log1p());\n-        double[] result_mapLog1pToSelf = {0.6931471805599453d,1.0986122886681096d,1.3862943611198906d};\n-        assertClose(\"compare vectors\" ,result_mapLog1pToSelf,v_mapLog1pToSelf.toArray(),normTolerance);\n-\n-        //octave =  cosh(v1)\n-        RealVector v_mapCosh = v1.map(new Cosh());\n-        double[] result_mapCosh = {1.543080634815244e+00d,3.762195691083631e+00d, 1.006766199577777e+01d};\n-        assertClose(\"compare vectors\" ,result_mapCosh,v_mapCosh.toArray(),normTolerance);\n-\n-        //octave =  cosh(v1)\n-        RealVector v_mapCoshToSelf = v1.copy();\n-        v_mapCoshToSelf.mapToSelf(new Cosh());\n-        double[] result_mapCoshToSelf = {1.543080634815244e+00d,3.762195691083631e+00d, 1.006766199577777e+01d};\n-        assertClose(\"compare vectors\" ,result_mapCoshToSelf,v_mapCoshToSelf.toArray(),normTolerance);\n-\n-        //octave =  sinh(v1)\n-        RealVector v_mapSinh = v1.map(new Sinh());\n-        double[] result_mapSinh = {1.175201193643801e+00d,3.626860407847019e+00d, 1.001787492740990e+01d};\n-        assertClose(\"compare vectors\" ,result_mapSinh,v_mapSinh.toArray(),normTolerance);\n-\n-        //octave =  sinh(v1)\n-        RealVector v_mapSinhToSelf = v1.copy();\n-        v_mapSinhToSelf.mapToSelf(new Sinh());\n-        double[] result_mapSinhToSelf = {1.175201193643801e+00d,3.626860407847019e+00d, 1.001787492740990e+01d};\n-        assertClose(\"compare vectors\" ,result_mapSinhToSelf,v_mapSinhToSelf.toArray(),normTolerance);\n-\n-        //octave =  tanh(v1)\n-        RealVector v_mapTanh = v1.map(new Tanh());\n-        double[] result_mapTanh = {7.615941559557649e-01d,9.640275800758169e-01d,9.950547536867305e-01d};\n-        assertClose(\"compare vectors\" ,result_mapTanh,v_mapTanh.toArray(),normTolerance);\n-\n-        //octave =  tanh(v1)\n-        RealVector v_mapTanhToSelf = v1.copy();\n-        v_mapTanhToSelf.mapToSelf(new Tanh());\n-        double[] result_mapTanhToSelf = {7.615941559557649e-01d,9.640275800758169e-01d,9.950547536867305e-01d};\n-        assertClose(\"compare vectors\" ,result_mapTanhToSelf,v_mapTanhToSelf.toArray(),normTolerance);\n-\n-        //octave =  cos(v1)\n-        RealVector v_mapCos = v1.map(new Cos());\n-        double[] result_mapCos = {5.403023058681398e-01d,-4.161468365471424e-01d, -9.899924966004454e-01d};\n-        assertClose(\"compare vectors\" ,result_mapCos,v_mapCos.toArray(),normTolerance);\n-\n-        //octave =  cos(v1)\n-        RealVector v_mapCosToSelf = v1.copy();\n-        v_mapCosToSelf.mapToSelf(new Cos());\n-        double[] result_mapCosToSelf = {5.403023058681398e-01d,-4.161468365471424e-01d, -9.899924966004454e-01d};\n-        assertClose(\"compare vectors\" ,result_mapCosToSelf,v_mapCosToSelf.toArray(),normTolerance);\n-\n-        //octave =  sin(v1)\n-        RealVector v_mapSin = v1.map(new Sin());\n-        double[] result_mapSin = {8.414709848078965e-01d,9.092974268256817e-01d,1.411200080598672e-01d};\n-        assertClose(\"compare vectors\" ,result_mapSin,v_mapSin.toArray(),normTolerance);\n-\n-        //octave =  sin(v1)\n-        RealVector v_mapSinToSelf = v1.copy();\n-        v_mapSinToSelf.mapToSelf(new Sin());\n-        double[] result_mapSinToSelf = {8.414709848078965e-01d,9.092974268256817e-01d,1.411200080598672e-01d};\n-        assertClose(\"compare vectors\" ,result_mapSinToSelf,v_mapSinToSelf.toArray(),normTolerance);\n-\n-        //octave =  tan(v1)\n-        RealVector v_mapTan = v1.map(new Tan());\n-        double[] result_mapTan = {1.557407724654902e+00d,-2.185039863261519e+00d,-1.425465430742778e-01d};\n-        assertClose(\"compare vectors\" ,result_mapTan,v_mapTan.toArray(),normTolerance);\n-\n-        //octave =  tan(v1)\n-        RealVector v_mapTanToSelf = v1.copy();\n-        v_mapTanToSelf.mapToSelf(new Tan());\n-        double[] result_mapTanToSelf = {1.557407724654902e+00d,-2.185039863261519e+00d,-1.425465430742778e-01d};\n-        assertClose(\"compare vectors\" ,result_mapTanToSelf,v_mapTanToSelf.toArray(),normTolerance);\n-\n-        double[] vat_a = {0d, 0.5d, 1.0d};\n-        final RealVector vat = create(vat_a);\n-\n-        //octave =  acos(vat)\n-        RealVector v_mapAcos = vat.map(new Acos());\n-        double[] result_mapAcos = {1.570796326794897e+00d,1.047197551196598e+00d, 0.0d};\n-        assertClose(\"compare vectors\" ,result_mapAcos,v_mapAcos.toArray(),normTolerance);\n-\n-        //octave =  acos(vat)\n-        RealVector v_mapAcosToSelf = vat.copy();\n-        v_mapAcosToSelf.mapToSelf(new Acos());\n-        double[] result_mapAcosToSelf = {1.570796326794897e+00d,1.047197551196598e+00d, 0.0d};\n-        assertClose(\"compare vectors\" ,result_mapAcosToSelf,v_mapAcosToSelf.toArray(),normTolerance);\n-\n-        //octave =  asin(vat)\n-        RealVector v_mapAsin = vat.map(new Asin());\n-        double[] result_mapAsin = {0.0d,5.235987755982989e-01d,1.570796326794897e+00d};\n-        assertClose(\"compare vectors\" ,result_mapAsin,v_mapAsin.toArray(),normTolerance);\n-\n-        //octave =  asin(vat)\n-        RealVector v_mapAsinToSelf = vat.copy();\n-        v_mapAsinToSelf.mapToSelf(new Asin());\n-        double[] result_mapAsinToSelf = {0.0d,5.235987755982989e-01d,1.570796326794897e+00d};\n-        assertClose(\"compare vectors\" ,result_mapAsinToSelf,v_mapAsinToSelf.toArray(),normTolerance);\n-\n-        //octave =  atan(vat)\n-        RealVector v_mapAtan = vat.map(new Atan());\n-        double[] result_mapAtan = {0.0d,4.636476090008061e-01d,7.853981633974483e-01d};\n-        assertClose(\"compare vectors\" ,result_mapAtan,v_mapAtan.toArray(),normTolerance);\n-\n-        //octave =  atan(vat)\n-        RealVector v_mapAtanToSelf = vat.copy();\n-        v_mapAtanToSelf.mapToSelf(new Atan());\n-        double[] result_mapAtanToSelf = {0.0d,4.636476090008061e-01d,7.853981633974483e-01d};\n-        assertClose(\"compare vectors\" ,result_mapAtanToSelf,v_mapAtanToSelf.toArray(),normTolerance);\n-\n-        //octave =  v1 .^-1\n-        RealVector v_mapInv = v1.map(new Inverse());\n-        double[] result_mapInv = {1d,0.5d,3.333333333333333e-01d};\n-        assertClose(\"compare vectors\" ,result_mapInv,v_mapInv.toArray(),normTolerance);\n-\n-        //octave =  v1 .^-1\n-        RealVector v_mapInvToSelf = v1.copy();\n-        v_mapInvToSelf.mapToSelf(new Inverse());\n-        double[] result_mapInvToSelf = {1d,0.5d,3.333333333333333e-01d};\n-        assertClose(\"compare vectors\" ,result_mapInvToSelf,v_mapInvToSelf.toArray(),normTolerance);\n-\n-        double[] abs_a = {-1.0d, 0.0d, 1.0d};\n-        final RealVector abs_v = create(abs_a);\n-\n-        //octave =  abs(abs_v)\n-        RealVector v_mapAbs = abs_v.map(new Abs());\n-        double[] result_mapAbs = {1d,0d,1d};\n-        assertClose(\"compare vectors\" ,result_mapAbs,v_mapAbs.toArray(),normTolerance);\n-\n-        //octave = abs(abs_v)\n-        RealVector v_mapAbsToSelf = abs_v.copy();\n-        v_mapAbsToSelf.mapToSelf(new Abs());\n-        double[] result_mapAbsToSelf = {1d,0d,1d};\n-        assertClose(\"compare vectors\" ,result_mapAbsToSelf,v_mapAbsToSelf.toArray(),normTolerance);\n-\n-        //octave =   sqrt(v1)\n-        RealVector v_mapSqrt = v1.map(new Sqrt());\n-        double[] result_mapSqrt = {1d,1.414213562373095e+00d,1.732050807568877e+00d};\n-        assertClose(\"compare vectors\" ,result_mapSqrt,v_mapSqrt.toArray(),normTolerance);\n-\n-        //octave =  sqrt(v1)\n-        RealVector v_mapSqrtToSelf = v1.copy();\n-        v_mapSqrtToSelf.mapToSelf(new Sqrt());\n-        double[] result_mapSqrtToSelf = {1d,1.414213562373095e+00d,1.732050807568877e+00d};\n-        assertClose(\"compare vectors\" ,result_mapSqrtToSelf,v_mapSqrtToSelf.toArray(),normTolerance);\n-\n-        double[] cbrt_a = {-2.0d, 0.0d, 2.0d};\n-        final RealVector cbrt_v = create(cbrt_a);\n-\n-        //octave =  ???\n-        RealVector v_mapCbrt = cbrt_v.map(new Cbrt());\n-        double[] result_mapCbrt = {-1.2599210498948732d,0d,1.2599210498948732d};\n-        assertClose(\"compare vectors\" ,result_mapCbrt,v_mapCbrt.toArray(),normTolerance);\n-\n-        //octave = ???\n-        RealVector v_mapCbrtToSelf = cbrt_v.copy();\n-        v_mapCbrtToSelf.mapToSelf(new Cbrt());\n-        double[] result_mapCbrtToSelf =  {-1.2599210498948732d,0d,1.2599210498948732d};\n-        assertClose(\"compare vectors\" ,result_mapCbrtToSelf,v_mapCbrtToSelf.toArray(),normTolerance);\n-\n-        double[] ceil_a = {-1.1d, 0.9d, 1.1d};\n-        ArrayRealVector ceil_v = new ArrayRealVector(ceil_a);\n-\n-        //octave =  ceil(ceil_v)\n-        RealVector v_mapCeil = ceil_v.map(new Ceil());\n-        double[] result_mapCeil = {-1d,1d,2d};\n-        assertClose(\"compare vectors\" ,result_mapCeil,v_mapCeil.toArray(),normTolerance);\n-\n-        //octave = ceil(ceil_v)\n-        RealVector v_mapCeilToSelf = ceil_v.copy();\n-        v_mapCeilToSelf.mapToSelf(new Ceil());\n-        double[] result_mapCeilToSelf =  {-1d,1d,2d};\n-        assertClose(\"compare vectors\" ,result_mapCeilToSelf,v_mapCeilToSelf.toArray(),normTolerance);\n-\n-        //octave =  floor(ceil_v)\n-        RealVector v_mapFloor = ceil_v.map(new Floor());\n-        double[] result_mapFloor = {-2d,0d,1d};\n-        assertClose(\"compare vectors\" ,result_mapFloor,v_mapFloor.toArray(),normTolerance);\n-\n-        //octave = floor(ceil_v)\n-        RealVector v_mapFloorToSelf = ceil_v.copy();\n-        v_mapFloorToSelf.mapToSelf(new Floor());\n-        double[] result_mapFloorToSelf =  {-2d,0d,1d};\n-        assertClose(\"compare vectors\" ,result_mapFloorToSelf,v_mapFloorToSelf.toArray(),normTolerance);\n-\n-        //octave =  ???\n-        RealVector v_mapRint = ceil_v.map(new Rint());\n-        double[] result_mapRint = {-1d,1d,1d};\n-        assertClose(\"compare vectors\" ,result_mapRint,v_mapRint.toArray(),normTolerance);\n-\n-        //octave = ???\n-        RealVector v_mapRintToSelf = ceil_v.copy();\n-        v_mapRintToSelf.mapToSelf(new Rint());\n-        double[] result_mapRintToSelf =  {-1d,1d,1d};\n-        assertClose(\"compare vectors\" ,result_mapRintToSelf,v_mapRintToSelf.toArray(),normTolerance);\n-\n-        //octave =  ???\n-        RealVector v_mapSignum = ceil_v.map(new Signum());\n-        double[] result_mapSignum = {-1d,1d,1d};\n-        assertClose(\"compare vectors\" ,result_mapSignum,v_mapSignum.toArray(),normTolerance);\n-\n-        //octave = ???\n-        RealVector v_mapSignumToSelf = ceil_v.copy();\n-        v_mapSignumToSelf.mapToSelf(new Signum());\n-        double[] result_mapSignumToSelf =  {-1d,1d,1d};\n-        assertClose(\"compare vectors\" ,result_mapSignumToSelf,v_mapSignumToSelf.toArray(),normTolerance);\n-\n-\n-        // Is with the used resolutions of limited value as test\n-        //octave =  ???\n-        RealVector v_mapUlp = ceil_v.map(new Ulp());\n-        double[] result_mapUlp = {2.220446049250313E-16d,1.1102230246251565E-16d,2.220446049250313E-16d};\n-        assertClose(\"compare vectors\" ,result_mapUlp,v_mapUlp.toArray(),normTolerance);\n-\n-        //octave = ???\n-        RealVector v_mapUlpToSelf = ceil_v.copy();\n-        v_mapUlpToSelf.mapToSelf(new Ulp());\n-        double[] result_mapUlpToSelf = {2.220446049250313E-16d,1.1102230246251565E-16d,2.220446049250313E-16d};\n-        assertClose(\"compare vectors\" ,result_mapUlpToSelf,v_mapUlpToSelf.toArray(),normTolerance);\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n     }\n \n     @Test\n-    public void testMap() throws Exception {\n-        double[] vec1Squared = { 1d, 4d, 9d, 16d, 25d };\n-        RealVector v = new TestVectorImpl(vec1.clone());\n-        RealVector w = v.map(new UnivariateFunction() { public double value(double x) { return x * x; } });\n-        double[] d2 = w.toArray();\n-        Assert.assertEquals(vec1Squared.length, d2.length);\n-        for(int i=0; i<vec1Squared.length; i++) {\n-            Assert.assertEquals(vec1Squared[i], d2[i], 0);\n-        }\n-    }\n-\n-    @Test\n     public void testIterator() throws Exception {\n         RealVector v = new TestVectorImpl(vec2.clone());\n         Entry e;", "timestamp": 1340690967, "metainfo": ""}