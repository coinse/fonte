{"sha": "df1cdcee65863bff532586039063461c908dbc7e", "log": "Added assertContains methods.  ", "commit": "\n--- a/src/test/org/apache/commons/math/TestUtils.java\n+++ b/src/test/org/apache/commons/math/TestUtils.java\n import java.io.ObjectOutputStream;\n \n import junit.framework.Assert;\n+import junit.framework.AssertionFailedError;\n \n import org.apache.commons.math.complex.Complex;\n+import org.apache.commons.math.complex.ComplexFormat;\n \n /**\n  * @version $Revision$ $Date$\n     public static Object serializeAndRecover(Object o){\n         \n         Object result = null;\n-        \n         File tmp = null;\n         FileOutputStream fo = null;\n         FileInputStream fi = null;\n             so.flush();\n             fo.close();\n \n-            // deserialize the Book\n+            // deserialize the Object\n             fi = new FileInputStream(tmp);\n             ObjectInputStream si = new ObjectInputStream(fi);  \n             result = si.readObject();\n                 }\n             }\n         }\n-        \n-        \n+           \n         if (tmp != null) {\n             tmp.delete();\n         }\n             Assert.assertEquals(msg, 0.0, x, relativeError);\n         }\n     }\n+    \n+    /**\n+     * Fails iff values does not contain a number within epsilon of z.\n+     * \n+     * @param msg  message to return with failure\n+     * @param values complex array to search\n+     * @param z  value sought\n+     * @param epsilon  tolerance\n+     */\n+    public static void assertContains(String msg, Complex[] values,\n+            Complex z, double epsilon) {\n+        int i = 0;\n+        boolean found = false;\n+        while (!found && i < values.length) {\n+            try {\n+                assertEquals(values[i], z, epsilon);\n+                found = true; \n+            } catch (AssertionFailedError er) {\n+                // no match\n+            }\n+            i++;\n+        }\n+        if (!found) {\n+            Assert.fail(msg + \n+                \" Unable to find \" + ComplexFormat.formatComplex(z));\n+        }\n+    }\n+    \n+    /**\n+     * Fails iff values does not contain a number within epsilon of z.\n+     * \n+     * @param values complex array to search\n+     * @param z  value sought\n+     * @param epsilon  tolerance\n+     */\n+    public static void assertContains(Complex[] values,\n+            Complex z, double epsilon) {\n+        assertContains(null, values, z, epsilon);      \n+    }\n+    \n+    /**\n+     * Fails iff values does not contain a number within epsilon of x.\n+     * \n+     * @param msg  message to return with failure\n+     * @param values double array to search\n+     * @param x value sought\n+     * @param epsilon  tolerance\n+     */\n+    public static void assertContains(String msg, double[] values,\n+            double x, double epsilon) {\n+        int i = 0;\n+        boolean found = false;\n+        while (!found && i < values.length) {\n+            try {\n+                assertEquals(values[i], x, epsilon);\n+                found = true; \n+            } catch (AssertionFailedError er) {\n+                // no match\n+            }\n+            i++;\n+        }\n+        if (!found) {\n+            Assert.fail(msg + \" Unable to find\" + x);\n+        }\n+    }\n+    \n+    /**\n+     * Fails iff values does not contain a number within epsilon of x.\n+     * \n+     * @param values double array to search\n+     * @param x value sought\n+     * @param epsilon  tolerance\n+     */\n+    public static void assertContains(double[] values, double x,\n+            double epsilon) {\n+       assertContains(null, values, x, epsilon);\n+    }\n+    \n }", "timestamp": 1135627162, "metainfo": ""}