{"sha": "c11f2191d564ab50dbe5bb0aa521a1af3fe65d00", "log": "MATH-566 Changed all exception classes to use the new \"ExceptionContext\".   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/exception/ConvergenceException.java\n+++ b/src/main/java/org/apache/commons/math/exception/ConvergenceException.java\n      * Construct the exception.\n      */\n     public ConvergenceException() {\n-        addMessage(LocalizedFormats.CONVERGENCE_FAILED);\n+        this(LocalizedFormats.CONVERGENCE_FAILED);\n     }\n \n     /**\n      */\n     public ConvergenceException(Localizable pattern,\n                                 Object ... args) {\n-        addMessage(pattern, args);\n+        getContext().addMessage(pattern, args);\n     }\n }\n--- a/src/main/java/org/apache/commons/math/exception/MathArithmeticException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathArithmeticException.java\n \n import org.apache.commons.math.exception.util.Localizable;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n+import org.apache.commons.math.exception.util.ExceptionContext;\n+import org.apache.commons.math.exception.util.ExceptionContextProvider;\n \n /**\n  * Base class for arithmetic exceptions.\n- * It is used for all the exceptions that share the semantics of the standard\n+ * It is used for all the exceptions that have the semantics of the standard\n  * {@link ArithmeticException}, but must also provide a localized\n  * message.\n  *\n  * @since 3.0\n  * @version $Revision$ $Date$\n  */\n-public class MathArithmeticException extends MathRuntimeException {\n+public class MathArithmeticException extends ArithmeticException\n+    implements ExceptionContextProvider {\n     /** Serializable version Id. */\n     private static final long serialVersionUID = -6024911025449780478L;\n+    /** Context. */\n+    private final ExceptionContext context = new ExceptionContext();\n \n     /**\n      * Default constructor.\n      */\n     public MathArithmeticException() {\n-        addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);\n+        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);\n     }\n \n     /**\n      */\n     public MathArithmeticException(Localizable pattern,\n                                    Object ... args) {\n-        addMessage(pattern, args);\n+        context.addMessage(pattern, args);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public ExceptionContext getContext() {\n+        return context;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public String getMessage() {\n+        return context.getMessage();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public String getLocalizedMessage() {\n+        return context.getLocalizedMessage();\n     }\n }\n--- a/src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java\n         return context;\n     }\n \n-   /** {@inheritDoc} */\n+    /** {@inheritDoc} */\n     @Override\n     public String getMessage() {\n         return context.getMessage();\n--- a/src/main/java/org/apache/commons/math/exception/MathIllegalStateException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathIllegalStateException.java\n \n import org.apache.commons.math.exception.util.Localizable;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n+import org.apache.commons.math.exception.util.ExceptionContext;\n+import org.apache.commons.math.exception.util.ExceptionContextProvider;\n \n /**\n  * Base class for all exceptions that signal a mismatch between the\n  * @since 2.2\n  * @version $Revision$ $Date$\n  */\n-public class MathIllegalStateException extends MathRuntimeException {\n+public class MathIllegalStateException extends IllegalStateException\n+    implements ExceptionContextProvider {\n     /** Serializable version Id. */\n     private static final long serialVersionUID = -6024911025449780478L;\n+    /** Context. */\n+    private final ExceptionContext context = new ExceptionContext();\n \n     /**\n      * Simple constructor.\n      */\n     public MathIllegalStateException(Localizable pattern,\n                                      Object ... args) {\n-        addMessage(pattern, args);\n+        context.addMessage(pattern, args);\n     }\n \n     /**\n                                      Localizable pattern,\n                                      Object ... args) {\n         super(cause);\n-        addMessage(pattern, args);\n+        context.addMessage(pattern, args);\n     }\n \n     /**\n      * Default constructor.\n      */\n     public MathIllegalStateException() {\n-        addMessage(LocalizedFormats.ILLEGAL_STATE);\n+        this(LocalizedFormats.ILLEGAL_STATE);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public ExceptionContext getContext() {\n+        return context;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public String getMessage() {\n+        return context.getMessage();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public String getLocalizedMessage() {\n+        return context.getLocalizedMessage();\n     }\n }\n--- a/src/main/java/org/apache/commons/math/exception/MathInternalError.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathInternalError.java\n      * Simple constructor.\n      */\n     public MathInternalError() {\n-        addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);\n+        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);\n     }\n \n     /**\n     public MathInternalError(final Throwable cause) {\n         super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);\n     }\n-\n }\n--- a/src/main/java/org/apache/commons/math/exception/MathParseException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathParseException.java\n package org.apache.commons.math.exception;\n \n import org.apache.commons.math.exception.util.LocalizedFormats;\n+import org.apache.commons.math.exception.util.ExceptionContext;\n+import org.apache.commons.math.exception.util.ExceptionContextProvider;\n \n /**\n  * Class to signal parse failures.\n  * @since 2.2\n  * @version $Revision$ $Date$\n  */\n-public class MathParseException extends MathRuntimeException {\n+public class MathParseException extends MathIllegalStateException\n+    implements ExceptionContextProvider {\n     /** Serializable version Id. */\n     private static final long serialVersionUID = -6024911025449780478L;\n \n     public MathParseException(String wrong,\n                               int position,\n                               Class<?> type) {\n-        addMessage(LocalizedFormats.CANNOT_PARSE_AS_TYPE,\n-                   wrong, Integer.valueOf(position), type.getName());\n+        getContext().addMessage(LocalizedFormats.CANNOT_PARSE_AS_TYPE,\n+                                wrong, Integer.valueOf(position), type.getName());\n     }\n \n     /**\n      */\n     public MathParseException(String wrong,\n                               int position) {\n-        addMessage(LocalizedFormats.CANNOT_PARSE,\n-                   wrong, Integer.valueOf(position));\n+        getContext().addMessage(LocalizedFormats.CANNOT_PARSE,\n+                                wrong, Integer.valueOf(position));\n     }\n }\n--- a/src/main/java/org/apache/commons/math/exception/MathUnsupportedOperationException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathUnsupportedOperationException.java\n \n import org.apache.commons.math.exception.util.Localizable;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n+import org.apache.commons.math.exception.util.ExceptionContext;\n+import org.apache.commons.math.exception.util.ExceptionContextProvider;\n \n /**\n  * Base class for all unsupported features.\n- * It is used for all the exceptions that share the semantics of the standard\n+ * It is used for all the exceptions that have the semantics of the standard\n  * {@link UnsupportedOperationException}, but must also provide a localized\n  * message.\n  *\n  * @since 2.2\n  * @version $Revision$ $Date$\n  */\n-public class MathUnsupportedOperationException extends MathRuntimeException {\n+public class MathUnsupportedOperationException extends UnsupportedOperationException\n+    implements ExceptionContextProvider {\n     /** Serializable version Id. */\n     private static final long serialVersionUID = -6024911025449780478L;\n+    /** Context. */\n+    private final ExceptionContext context = new ExceptionContext();\n \n     /**\n      * Default constructor.\n      */\n     public MathUnsupportedOperationException(Localizable pattern,\n                                              Object ... args) {\n-        addMessage(pattern, args);\n+        context.addMessage(pattern, args);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public ExceptionContext getContext() {\n+        return context;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public String getMessage() {\n+        return context.getMessage();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public String getLocalizedMessage() {\n+        return context.getLocalizedMessage();\n     }\n }\n--- a/src/main/java/org/apache/commons/math/exception/MathUserException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathUserException.java\n \n import org.apache.commons.math.exception.util.Localizable;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n+import org.apache.commons.math.exception.util.ExceptionContext;\n+import org.apache.commons.math.exception.util.ExceptionContextProvider;\n \n /**\n  * This class is intended as a sort of communication channel between\n  * @since 2.2\n  * @version $Revision$ $Date$\n  */\n-public class MathUserException extends MathRuntimeException {\n+public class MathUserException extends RuntimeException\n+    implements ExceptionContextProvider {\n     /** Serializable version Id. */\n     private static final long serialVersionUID = -6024911025449780478L;\n+    /** Context. */\n+    private final ExceptionContext context = new ExceptionContext();\n \n     /**\n      * Build an exception with a default message.\n      */\n     public MathUserException() {\n-        addMessage(LocalizedFormats.USER_EXCEPTION);\n+        context.addMessage(LocalizedFormats.USER_EXCEPTION);\n     }\n \n     /**\n      */\n     public MathUserException(final Throwable cause) {\n         super(cause);\n-        addMessage(LocalizedFormats.USER_EXCEPTION);\n+        context.addMessage(LocalizedFormats.USER_EXCEPTION);\n     }\n \n     /**\n      */\n     public MathUserException(final Localizable pattern,\n                              final Object ... arguments) {\n-        addMessage(pattern, arguments);\n+        context.addMessage(pattern, arguments);\n     }\n \n     /**\n                              final Localizable pattern,\n                              final Object ... arguments) {\n         super(cause);\n-        addMessage(pattern, arguments);\n+        context.addMessage(pattern, arguments);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public ExceptionContext getContext() {\n+        return context;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public String getMessage() {\n+        return context.getMessage();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public String getLocalizedMessage() {\n+        return context.getLocalizedMessage();\n     }\n }\n--- a/src/main/java/org/apache/commons/math/exception/MaxCountExceededException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MaxCountExceededException.java\n      * @param max Maximum.\n      */\n     public MaxCountExceededException(Number max) {\n-        super(LocalizedFormats.MAX_COUNT_EXCEEDED, max);\n-        this.max = max;\n+        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);\n     }\n     /**\n      * Construct the exception with a specific context.\n     public MaxCountExceededException(Localizable specific,\n                                      Number max,\n                                      Object ... args) {\n-        this(max);\n-        addMessage(specific, max, args);\n+        getContext().addMessage(specific, max, args);\n+        this.max = max;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/math/exception/TooManyEvaluationsException.java\n+++ b/src/main/java/org/apache/commons/math/exception/TooManyEvaluationsException.java\n      * @param max Maximum number of evaluations.\n      */\n     public TooManyEvaluationsException(Number max) {\n-        super(LocalizedFormats.EVALUATIONS, max);\n+        super(max);\n+        getContext().addMessage(LocalizedFormats.EVALUATIONS);\n     }\n }", "timestamp": 1304949274, "metainfo": ""}