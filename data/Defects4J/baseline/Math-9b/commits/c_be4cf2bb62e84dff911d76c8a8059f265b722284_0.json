{"sha": "be4cf2bb62e84dff911d76c8a8059f265b722284", "log": "MATH-795: in RealVectorAbstractTest   - defined class variables data1 and data2 for the creation of test vectors. Attention has been paid to \"special\" values, which are interspersed with \"normal\" values (see e.g. sparse vectors).   - created testGetDimension().   - created testGetEntry().   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n     protected Double[] dvec1 = {1d, 2d, 3d, 4d, 5d, 6d, 7d, 8d, 9d};\n     protected double[][] mat1 = {{1d, 2d, 3d}, {4d, 5d, 6d},{ 7d, 8d, 9d}};\n \n+    /**\n+     * Data which can be used to create a specific vector. The array is\n+     * interspersed with the value returned by\n+     * {@link #getPreferredEntryValue()}.\n+     */\n+    private final double[] data1;\n+\n+\n+    /**\n+     * Data which can be used to create a specific vector. The array is\n+     * interspersed with the value returned by\n+     * {@link #getPreferredEntryValue()}.\n+     */\n+    private final double[] data2;\n+\n+    public RealVectorAbstractTest() {\n+        final double x = getPreferredEntryValue();\n+        data1 = new double[] {x, 1d, 2d, x, x};\n+        data2 = new double[] {x, x, 3d, x, 4d, x};\n+    }\n+\n     // tolerances\n     protected double entryTolerance = 10E-16;\n     protected double normTolerance = 10E-14;\n+\n+    @Test\n+    public void testGetDimension() {\n+        Assert.assertEquals(data1.length, create(data1).getDimension());\n+    }\n+\n+    @Test\n+    public void testGetEntry() {\n+        final RealVector v = create(data1);\n+        for (int i = 0; i < data1.length; i++) {\n+            Assert.assertEquals(\"entry \" + i, data1[i], v.getEntry(i), 0d);\n+        }\n+    }\n \n     private void doTestAppendVector(final String message, final RealVector v1,\n         final RealVector v2, final double delta) {\n \n     @Test\n     public void testAppendVector() {\n-        final double x = getPreferredEntryValue();\n-        final double[] data1 = new double[] {x, 1d, 2d, x, x};\n-        final double[] data2 = new double[] {x, x, 3d, x, 4d, x};\n-\n         doTestAppendVector(\"same type\", create(data1), create(data2), 0d);\n         doTestAppendVector(\"mixed types\", create(data1), createAlien(data2), 0d);\n     }\n \n     @Test\n     public void testAppendScalar() {\n-        final double x = getPreferredEntryValue();\n-        final double[] data = new double[] {x, 1d, 2d, x, x};\n-\n-        doTestAppendScalar(\"same type\", create(data), 1d, 0d);\n-        doTestAppendScalar(\"mixed types\", create(data), x, 0d);\n+\n+        doTestAppendScalar(\"\", create(data1), 1d, 0d);\n+        doTestAppendScalar(\"\", create(data1), getPreferredEntryValue(), 0d);\n     }\n \n     @Test", "timestamp": 1338961281, "metainfo": ""}