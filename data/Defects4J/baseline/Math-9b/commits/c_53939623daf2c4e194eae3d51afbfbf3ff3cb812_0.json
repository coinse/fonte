{"sha": "53939623daf2c4e194eae3d51afbfbf3ff3cb812", "log": "tightened checkstyle rules catching top level exceptions (Exception, Throwable and RuntimeException) is now forbidden  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n         try {\n             da.computeStats();\n             fillBinStats(in);\n-        } catch (Exception e) {\n+        } catch (IOException e) {\n             throw new MathRuntimeException(e);\n         }\n         loaded = true;\n             new BufferedReader(new InputStreamReader(url.openStream()));\n         try {\n             DataAdapter da = new StreamDataAdapter(in);\n-            try {\n-                da.computeStats();\n-            } catch (IOException ioe) {\n-                // don't wrap exceptions which are already IOException\n-                throw ioe;\n-            } catch (RuntimeException rte) {\n-                // don't wrap RuntimeExceptions\n-                throw rte;\n-            } catch (Exception e) {\n-                throw MathRuntimeException.createIOException(e);\n-            }\n+            da.computeStats();\n             if (sampleStats.getN() == 0) {\n                 throw MathRuntimeException.createEOFException(\"URL {0} contains no data\",\n                                                               url);\n         BufferedReader in = new BufferedReader(new FileReader(file));\n         try {\n             DataAdapter da = new StreamDataAdapter(in);\n-            try {\n-                da.computeStats();\n-            } catch (IOException ioe) {\n-                // don't wrap exceptions which are already IOException\n-                throw ioe;\n-            } catch (RuntimeException rte) {\n-                // don't wrap RuntimeExceptions\n-                throw rte;\n-            } catch (Exception e) {\n-                throw MathRuntimeException.createIOException(e);\n-            }\n+            da.computeStats();\n             in = new BufferedReader(new FileReader(file));\n             fillBinStats(in);\n             loaded = true;\n      * <code>beanStats</code> abstracting the source of data.\n      */\n     private abstract class DataAdapter{\n+\n         /**\n          * Compute bin stats.\n          *\n-         * @throws Exception  if an error occurs computing bin stats\n+         * @throws IOException  if an error occurs computing bin stats\n          */\n-        public abstract void computeBinStats()\n-                throws Exception;\n+        public abstract void computeBinStats() throws IOException;\n+\n         /**\n          * Compute sample statistics.\n          *\n-         * @throws Exception if an error occurs computing sample stats\n+         * @throws IOException if an error occurs computing sample stats\n          */\n-        public abstract void computeStats() throws Exception;\n-    }\n+        public abstract void computeStats() throws IOException;\n+\n+    }\n+\n     /**\n      * Factory of <code>DataAdapter</code> objects. For every supported source\n      * of data (array of doubles, file, etc.) an instance of the proper object\n      */\n     private class StreamDataAdapter extends DataAdapter{\n \n-        /** Input stream providng access to the data */\n+        /** Input stream providing access to the data */\n         private BufferedReader inputStream;\n \n         /**\n             super();\n             inputStream = in;\n         }\n-        /**\n-         * Computes binStats\n-         *\n-         * @throws IOException if an IO error occurs\n-         */\n+\n+        /** {@inheritDoc} */\n         @Override\n-        public void computeBinStats()\n-                throws IOException {\n+        public void computeBinStats() throws IOException {\n             String str = null;\n             double val = 0.0d;\n             while ((str = inputStream.readLine()) != null) {\n             inputStream.close();\n             inputStream = null;\n         }\n-        /**\n-         * Computes sampleStats\n-         *\n-         * @throws IOException if an IOError occurs\n-         */\n+\n+        /** {@inheritDoc} */\n         @Override\n         public void computeStats() throws IOException {\n             String str = null;\n             super();\n             inputArray = in;\n         }\n-        /**\n-         * Computes sampleStats\n-         *\n-         * @throws IOException if an IO error occurs\n-         */\n+\n+        /** {@inheritDoc} */\n         @Override\n         public void computeStats() throws IOException {\n             sampleStats = new SummaryStatistics();\n                 sampleStats.addValue(inputArray[i]);\n             }\n         }\n-        /**\n-         * Computes binStats\n-         *\n-         * @throws IOException  if an IO error occurs\n-         */\n+\n+        /** {@inheritDoc} */\n         @Override\n-        public void computeBinStats()\n-            throws IOException {\n+        public void computeBinStats() throws IOException {\n             for (int i = 0; i < inputArray.length; i++) {\n                 SummaryStatistics stats =\n                     binStats.get(findBin(inputArray[i]));\n         // Filling data in binStats Array\n         DataAdapterFactory aFactory = new DataAdapterFactory();\n         DataAdapter da = aFactory.getAdapter(in);\n-        try {\n-            da.computeBinStats();\n-        } catch (IOException ioe) {\n-            // don't wrap exceptions which are already IOException\n-            throw ioe;\n-        } catch (RuntimeException rte) {\n-            // don't wrap RuntimeExceptions\n-            throw rte;\n-        } catch (Exception e) {\n-            throw MathRuntimeException.createIOException(e);\n-        }\n+        da.computeBinStats();\n \n         // Assign upperBounds based on bin counts\n         upperBounds = new double[binCount];\n--- a/src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.RetryTestCase;\n import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.stat.descriptive.SummaryStatistics;\n         EmpiricalDistribution dist = new EmpiricalDistributionImpl();\n         try {\n             dist.load((double[]) null);\n-            fail(\"load((double[]) null) expected RuntimeException\");\n-        } catch (MathRuntimeException e) {\n+            fail(\"load((double[]) null) expected NullPointerException\");\n+        } catch (NullPointerException e) {\n             // expected\n         } catch (Exception e) {\n             fail(\"wrong exception caught\");", "timestamp": 1255444227, "metainfo": ""}