{"sha": "3693e024d208baa431442218ed5b2f9f7a6d43e7", "log": "MATH-361   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java\n+++ b/src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java\n  * @since 2.2\n  * @version $Revision$ $Date$\n  */\n-public class DimensionMismatchException extends MathIllegalArgumentException {\n-    /** First dimension. */\n-    private final int dimension1;\n-\n-    /** Second dimension. */\n-    private final int dimension2;\n+public class DimensionMismatchException extends MathIllegalNumberException {\n+    /** Correct dimension. */\n+    private final int dimension;\n \n     /**\n      * Construct an exception from the mismatched dimensions.\n      *\n-     * @param dimension1 First dimension.\n-     * @param dimension2 Second dimension.\n+     * @param wrong Wrong dimension.\n+     * @param expected Expected dimension.\n      */\n-    public DimensionMismatchException(int dimension1,\n-                                      int dimension2) {\n-        super(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, dimension1, dimension2);\n-\n-        this.dimension1 = dimension1;\n-        this.dimension2 = dimension2;\n+    public DimensionMismatchException(int wrong,\n+                                      int expected) {\n+        super(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);\n+        dimension = expected;\n     }\n \n     /**\n-     * @return the first dimension.\n+     * @return the expected dimension.\n      */\n-    public int getDimension1() {\n-        return dimension1;\n-    }\n-    /**\n-     * @return the second dimension.\n-     */\n-    public int getDimension2() {\n-        return dimension2;\n+    public int getDimension() {\n+        return dimension;\n     }\n }\n--- a/src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java\n package org.apache.commons.math.exception;\n \n import java.util.Locale;\n+import java.util.List;\n+import java.util.ArrayList;\n import org.apache.commons.math.util.Localizable;\n \n /**\n  * Base class for all preconditions violation exceptions.\n- * This class is not intended to be instantiated directly in most case: it\n- * should serve as a base class to create all the exceptions that share the\n- * semantics of the standard {@link IllegalArgumentException}, but must also\n- * provide a localized message.\n+ * This class is not intended to be instantiated directly: it should serve\n+ * as a base class to create all the exceptions that share the semantics of\n+ * the standard {@link IllegalArgumentException}, but must also provide a\n+ * localized message.\n  *\n  * @since 2.2\n  * @version $Revision$ $Date$\n     \n     /**\n      * @param pattern Message pattern.\n-     * @param arguments Arguments.\n+     * @param args Arguments.\n      */\n     protected MathIllegalArgumentException(Localizable pattern,\n-                                           Object ... arguments) {\n+                                           Object ... args) {\n         this.pattern = pattern;\n-        this.arguments = arguments.clone();\n+        arguments = flatten(args).toArray();\n     }\n \n     /** {@inheritDoc} */\n     public String getLocalizedMessage() {\n         return MessageFactory.buildMessage(Locale.getDefault(), pattern, arguments);\n     }\n+\n+    /**\n+     * Transform a multidimensional array into a one-dimensional list.\n+     *\n+     * @param array Array (possibly multidimensional).\n+     * @return a list of all the {@code Object} instances contained in\n+     * {@code array}.\n+     */\n+    private List<Object> flatten(Object[] array) {\n+        final List<Object> list = new ArrayList<Object>();\n+        for (Object o : array) {\n+            if (o instanceof Object[]) {\n+                list.addAll(flatten((Object[]) o));\n+            } else {\n+                list.add(o);\n+            }\n+        }\n+        return list;\n+    }\n }\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.exception;\n+\n+import org.apache.commons.math.util.Localizable;\n+\n+/**\n+ * Base class for exceptions raised by a wrong number.\n+ * This class is not intended to be instantiated directly: it should serve\n+ * as a base class to create all the exceptions that are raised because some\n+ * precondition is violated by a number argument.\n+ *\n+ * @since 2.2\n+ * @version $Revision$ $Date$\n+ */\n+public class MathIllegalNumberException extends MathIllegalArgumentException {\n+    /** Requested. */\n+    private final Number argument;\n+\n+    /**\n+     * Construct an exception.\n+     *\n+     * @param Localizable pattern.\n+     * @param arguments Arguments. The first element must be the requested\n+     * value that raised the exception.\n+     */\n+    protected MathIllegalNumberException(Localizable pattern,\n+                                         Number wrong,\n+                                         Object ... arguments) {\n+        super(pattern, wrong, arguments);\n+        argument = wrong;\n+    }\n+\n+    /**\n+     * @return the requested value.\n+     */\n+    public Number getArgument() {\n+        return argument;\n+    }\n+}\n--- a/src/main/java/org/apache/commons/math/exception/MessageFactory.java\n+++ b/src/main/java/org/apache/commons/math/exception/MessageFactory.java\n     public static String buildMessage(Locale locale,\n                                       Localizable pattern,\n                                       Object ... arguments) {\n-        return new MessageFormat(pattern.getLocalizedString(locale), locale).format(arguments);\n+        final String locPattern = pattern.getLocalizedString(locale);\n+        return (new MessageFormat(locPattern, locale)).format(arguments);\n     }\n }\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/exception/NotPositiveException.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.exception;\n+\n+import org.apache.commons.math.util.LocalizedFormats;\n+\n+/**\n+ * Exception to be thrown when the argument is negative.\n+ *\n+ * @since 2.2\n+ * @version $Revision$ $Date$\n+ */\n+public class NotPositiveException extends MathIllegalNumberException {\n+    /**\n+     * Construct the exception.\n+     *\n+     * @param value Argument.\n+     */\n+    public NotPositiveException(Number value) {\n+        super(LocalizedFormats.NOT_POSITIVE, value);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/exception/NotStrictlyPositiveException.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.exception;\n+\n+import org.apache.commons.math.util.LocalizedFormats;\n+\n+/**\n+ * Exception to be thrown when the argument is negative.\n+ *\n+ * @since 2.2\n+ * @version $Revision$ $Date$\n+ */\n+public class NotStrictlyPositiveException extends MathIllegalNumberException {\n+    /**\n+     * Construct the exception.\n+     *\n+     * @param value Argument.\n+     */\n+    public NotStrictlyPositiveException(Number value) {\n+        super(LocalizedFormats.NOT_STRICTLY_POSITIVE, value);\n+    }\n+}\n--- a/src/main/java/org/apache/commons/math/exception/OutOfRangeException.java\n+++ b/src/main/java/org/apache/commons/math/exception/OutOfRangeException.java\n  * @since 2.2\n  * @version $Revision$ $Date$\n  */\n-public class OutOfRangeException extends MathIllegalArgumentException {\n+public class OutOfRangeException extends MathIllegalNumberException {\n     /** Lower bound. */\n     private final Number lo;\n     /** Higher bound. */\n     private final Number hi;\n-    /** Requested. */\n-    private final Number requested;\n \n     /**\n      * Construct an exception from the mismatched dimensions.\n      *\n-     * @param requested Requested value.\n+     * @param wrong Requested value.\n      * @param lo Lower bound.\n      * @param hi Higher bound.\n      */\n-    public OutOfRangeException(Number requested,\n+    public OutOfRangeException(Number wrong,\n                                Number lo,\n                                Number hi) {\n-        super(LocalizedFormats.OUT_OF_RANGE_SIMPLE, requested, lo, hi);\n-\n-        this.requested = requested;\n+        super(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);\n         this.lo = lo;\n         this.hi = hi;\n-    }\n-\n-    /**\n-     * @return the requested value.\n-     */\n-    public Number getRequested() {\n-        return requested;\n     }\n     /**\n      * @return the lower bound.\n--- a/src/main/java/org/apache/commons/math/util/LocalizedFormats.java\n+++ b/src/main/java/org/apache/commons/math/util/LocalizedFormats.java\n     DIFFERENT_ROWS_LENGTHS(\"some rows have length {0} while others have length {1}\"),\n     DIGEST_NOT_INITIALIZED(\"digest not initialized\"),\n     DIMENSIONS_MISMATCH_2x2(\"dimensions mismatch: got {0}x{1} but expected {2}x{3}\"),\n-    DIMENSIONS_MISMATCH_SIMPLE(\"dimensions mismatch {0} != {1}\"),\n+    DIMENSIONS_MISMATCH_SIMPLE(\"dimensions mismatch {0} != {1}\"), /* keep */\n     DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(\"Discrete cumulative probability function returned NaN for argument {0}\"),\n     DISTRIBUTION_NOT_LOADED(\"distribution not loaded\"),\n     DUPLICATED_ABSCISSA(\"Abscissa {0} is duplicated at both indices {1} and {2}\"),\n     NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(\"spline partition must have at least {0} points, got {1}\"),\n     NOT_INCREASING_NUMBER_OF_POINTS(\"points {0} and {1} are not increasing ({2} > {3})\"),\n     NOT_MULTIPLICATION_COMPATIBLE_MATRICES(\"{0}x{1} and {2}x{3} matrices are not multiplication compatible\"),\n+    NOT_STRICTLY_POSITIVE(\"{0} is not strictly positive\"), /* keep */\n+    NOT_POSITIVE(\"{0} is not positive\"), /* keep */\n     NOT_POSITIVE_ALPHA(\"alpha must be positive ({0})\"),\n     NOT_POSITIVE_BETA(\"beta must be positive ({0})\"),\n     NOT_POSITIVE_COLUMNDIMENSION(\"invalid column dimension: {0} (must be positive)\"),\n     OUT_OF_BOUND_SIGNIFICANCE_LEVEL(\"out of bounds significance level {0}, must be between {1} and {2}\"),\n     OUT_OF_ORDER_ABSCISSA_ARRAY(\"the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}\"),\n     OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(\"out of range root of unity index {0} (must be in [{1};{2}])\"),\n-    OUT_OF_RANGE_SIMPLE(\"{0} out of [{1}, {2}] range\"),\n+    OUT_OF_RANGE_SIMPLE(\"{0} out of [{1}, {2}] range\"), /* keep */\n     OVERFLOW_IN_FRACTION(\"overflow in fraction {0}/{1}, cannot negate\"),\n     PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(\"cannot access {0} method in percentile implementation {1}\"),\n     PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(\"percentile implementation {0} does not support {1}\"),", "timestamp": 1277470841, "metainfo": ""}