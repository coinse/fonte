{"sha": "9753686bfef0ec1a8ebe8e72ab7668afb4027252", "log": "MATH-432 New class \"Pair\" as a replacement for the standard class \"AbstractMap.SimpleEntry\" (available in Java 1.6).   ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/util/Pair.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.util;\n+\n+import java.util.Map;\n+\n+/**\n+ * Generic pair.\n+ * It is provided as a replacement for the standard\n+ * {@code AbstractMap.SimpleEntry} that is available only in Java 1.6\n+ * and later.\n+ *\n+ * @param <K> Key type.\n+ * @param <V> Value type.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Pair<K, V> implements Map.Entry<K, V> {\n+    /** Key. */\n+    private K key;\n+    /** Value. */\n+    private V value;\n+\n+    /**\n+     * Create an entry representing a mapping from the specified key to the\n+     * specified value.\n+     *\n+     * @param k Key.\n+     * @param v Value.\n+     */\n+    public Pair(K k, V v) {\n+        key = k;\n+        value = v;\n+    }\n+\n+    /**\n+     * Create an entry representing the same mapping as the specified entry.\n+     *\n+     * @param entry Entry to copy.\n+     */\n+    Pair(Map.Entry<? extends K, ? extends V> entry) {\n+        key = entry.getKey();\n+        value = entry.getValue();\n+    }\n+\n+    /**\n+     * Get the key.\n+     *\n+     * @return the key.\n+     */\n+    public K getKey() {\n+        return key;\n+    }\n+\n+    /**\n+     * Get the value.\n+     *\n+     * @return the key.\n+     */\n+    public V getValue() {\n+        return value;\n+    }\n+\n+    /**\n+     * Set the value.\n+     *\n+     * @param v Value to be stored.\n+     * @return the old value.\n+     */\n+    public V setValue(V v) {\n+        V old = value;\n+        value = v;\n+        return old;\n+    }\n+\n+    /**\n+     * Compare the specified object with this entry for equality.\n+     *\n+     * @param o Object.\n+     * @return {@code true} if the given object is also a map entry and\n+     * the two entries represent the same mapping.\n+     */\n+    public boolean equals(Object o) {\n+        if (o == null) {\n+            return false;\n+        }\n+        if (!(o instanceof Map.Entry)) {\n+            return false;\n+        } else {\n+            Map.Entry<? extends K, ? extends V> ome\n+                = (Map.Entry<? extends K, ? extends V>) o;\n+            return (key == null ?\n+                    ome.getKey() == null :\n+                    key.equals(ome.getKey())) &&\n+                (value == null ?\n+                 ome.getValue() == null :\n+                 value.equals(ome.getValue()));\n+        }\n+    }\n+\n+    /**\n+     * Compute a hash code.\n+     *\n+     * @return the hash code value.\n+     */\n+    public int hashCode() {\n+        return (key == null ? 0 : key.hashCode()) ^\n+            (value == null ? 0 : value.hashCode());\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math/util/PairTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law\n+ * or agreed to in writing, software distributed under the License is\n+ * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the specific language\n+ * governing permissions and limitations under the License.\n+ */\n+package org.apache.commons.math.util;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test for {@link Pair}.\n+ */\n+public class PairTest {\n+\n+    @Test\n+    public void testAccessor() {\n+        final Pair<Integer, Double> p\n+            = new Pair<Integer, Double>(new Integer(1), new Double(2));\n+        Assert.assertEquals(new Integer(1), p.getKey());\n+        Assert.assertEquals(new Double(2), p.getValue(), Math.ulp(1d));\n+\n+        final Double old = p.setValue(new Double(3));\n+        Assert.assertEquals(new Double(2), old, Math.ulp(1d));\n+        Assert.assertEquals(new Double(3), p.getValue(), Math.ulp(1d));\n+    }\n+\n+    @Test\n+    public void testEquals() {\n+        Pair<Integer, Double> p1 = new Pair<Integer, Double>(null, null);\n+        Assert.assertFalse(p1.equals(null));\n+\n+        Pair<Integer, Double> p2 = new Pair<Integer, Double>(null, null);\n+        Assert.assertTrue(p1.equals(p2));\n+\n+        p1 = new Pair<Integer, Double>(new Integer(1), new Double(2));\n+        Assert.assertFalse(p1.equals(p2));\n+\n+        Pair<Integer, Number> p3 = new Pair<Integer, Number>(new Integer(1), null);\n+        Assert.assertFalse(p1.equals(p3));\n+        p3.setValue(new Double(3));\n+        Assert.assertFalse(p1.equals(p3));\n+        p3.setValue(new Double(2));\n+        Assert.assertTrue(p1.equals(p3));\n+    }\n+}", "timestamp": 1288966421, "metainfo": ""}