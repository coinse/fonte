{"sha": "b848e5cc58519899c0abde9e68a4640165209f92", "log": "Moved exception utilities to package \"exception.util\". Created \"MathUnsupportedOperationException\". Replaced factory method \"createUnsupportedOperationException\" occurences by an explicit construction of a \"MathUnsupportedOperationException\". Corrected a bug (in \"AbstractRealVector\") where a \"dimension\" was stored in a \"double\". Replaced a \"createIllegalArgumentException\" by a \"DimensionMismatchException\". Removed checks for \"null\" in \"BigFraction\".   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/MathRuntimeException.java\n+++ b/src/main/java/org/apache/commons/math/MathRuntimeException.java\n      * @param arguments format arguments\n      * @return built exception\n      * @since 2.2\n+     * @deprecated in 2.2. Please use {@link org.apache.commons.math.exception.MathUnsupportedOperationException}\n+     * instead.\n      */\n     public static UnsupportedOperationException createUnsupportedOperationException(final Localizable pattern,\n                                                                                     final Object ... arguments) {\n      * @param arguments format arguments\n      * @return built exception\n      * @since 2.2\n+     * @deprecated in 2.2. Checks for \"null\" must not be performed in Commons-Math.\n      */\n     public static NullPointerException createNullPointerException(final Localizable pattern,\n                                                                   final Object ... arguments) {\n--- a/src/main/java/org/apache/commons/math/exception/LocalizedFormats.java\n+++ b/src/main/java/org/apache/commons/math/exception/LocalizedFormats.java\n     UNPARSEABLE_FRACTION_NUMBER(\"unparseable fraction number: \\\"{0}\\\"\"),\n     UNPARSEABLE_REAL_VECTOR(\"unparseable real vector: \\\"{0}\\\"\"),\n     UNSUPPORTED_EXPANSION_MODE(\"unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})\"),\n-    UNSUPPORTED_OPERATION(\"unsupported operation\"),\n+    UNSUPPORTED_OPERATION(\"unsupported operation\"), /* keep */\n     URL_CONTAINS_NO_DATA(\"URL {0} contains no data\"),\n     VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(\"{0} values have been added before statistic is configured\"),\n     VECTOR_LENGTH_MISMATCH(\"vector length mismatch: got {0} but expected {1}\"),\n--- a/src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java\n package org.apache.commons.math.exception;\n \n import java.util.Locale;\n-import java.util.List;\n-import java.util.ArrayList;\n+\n+import org.apache.commons.math.exception.util.ArgUtils;\n+import org.apache.commons.math.exception.util.MessageFactory;\n \n /**\n  * Base class for all preconditions violation exceptions.\n                                            Object ... args) {\n         this.specific = specific;\n         this.general = general;\n-        arguments = flatten(args).toArray();\n+        arguments = ArgUtils.flatten(args);\n     }\n     /**\n      * @param general Message pattern explaining the cause of the error.\n         this(null, general, args);\n     }\n \n-    /** Gets the message in a specified locale.\n-    *\n-    * @param locale Locale in which the message should be translated\n-    *\n-    * @return localized message\n-    * @since 2.2\n-    */\n-   public String getMessage(final Locale locale) {\n-       final StringBuilder sb = new StringBuilder();\n-\n-       if (specific != null) {\n-           sb.append(MessageFactory.buildMessage(locale, specific, arguments));\n-           sb.append(\": \");\n-       }\n-       sb.append(MessageFactory.buildMessage(locale, general, arguments));\n-\n-       return sb.toString();\n-   }\n+    /**\n+     * Get the message in a specified locale.\n+     *\n+     * @param locale Locale in which the message should be translated.\n+     *\n+     * @return the localized message.\n+     */\n+    public String getMessage(final Locale locale) {\n+        return MessageFactory.buildMessage(locale, specific, general, arguments);\n+    }\n \n    /** {@inheritDoc} */\n     @Override\n     public String getLocalizedMessage() {\n         return getMessage(Locale.getDefault());\n     }\n-\n-    /**\n-     * Transform a multidimensional array into a one-dimensional list.\n-     *\n-     * @param array Array (possibly multidimensional).\n-     * @return a list of all the {@code Object} instances contained in\n-     * {@code array}.\n-     */\n-    private List<Object> flatten(Object[] array) {\n-        final List<Object> list = new ArrayList<Object>();\n-        if (array != null) {\n-            for (Object o : array) {\n-                if (o instanceof Object[]) {\n-                    list.addAll(flatten((Object[]) o));\n-                } else {\n-                    list.add(o);\n-                }\n-            }\n-        }\n-        return list;\n-    }\n }\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/exception/MathUnsupportedOperationException.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.exception;\n+\n+import java.util.Locale;\n+\n+import org.apache.commons.math.exception.util.ArgUtils;\n+import org.apache.commons.math.exception.util.MessageFactory;\n+import org.apache.commons.math.exception.LocalizedFormats;\n+\n+/**\n+ * Base class for all unsupported features.\n+ * It is used for all the exceptions that share the semantics of the standard\n+ * {@link UnsupportedOperationException}, but must also provide a localized\n+ * message.\n+ *\n+ * @since 2.2\n+ * @version $Revision$ $Date$\n+ */\n+public class MathUnsupportedOperationException extends UnsupportedOperationException {\n+\n+    /** Serializable version Id. */\n+    private static final long serialVersionUID = -6024911025449780478L;\n+\n+    /**\n+     * Pattern used to build the message (specific context).\n+     */\n+    private final Localizable specific;\n+    /**\n+     * Arguments used to build the message.\n+     */\n+    private final Object[] arguments;\n+\n+    /**\n+     * @param args Arguments.\n+     */\n+    public MathUnsupportedOperationException(Object ... args) {\n+        this(null, args);\n+    }\n+    /**\n+     * @param specific Message pattern providing the specific context of\n+     * the error.\n+     * @param args Arguments.\n+     */\n+    public MathUnsupportedOperationException(Localizable specific,\n+                                             Object ... args) {\n+        this.specific = specific;\n+        arguments = ArgUtils.flatten(args);\n+    }\n+\n+    /**\n+     * Get the message in a specified locale.\n+     *\n+     * @param locale Locale in which the message should be translated.\n+     *\n+     * @return the localized message.\n+     */\n+    public String getMessage(final Locale locale) {\n+        return MessageFactory.buildMessage(locale,\n+                                           specific,\n+                                           LocalizedFormats.UNSUPPORTED_OPERATION,\n+                                           arguments);\n+    }\n+\n+   /** {@inheritDoc} */\n+    @Override\n+    public String getMessage() {\n+        return getMessage(Locale.US);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public String getLocalizedMessage() {\n+        return getMessage(Locale.getDefault());\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/exception/util/ArgUtils.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.exception.util;\n+\n+import java.util.List;\n+import java.util.ArrayList;\n+\n+public class ArgUtils {\n+    /**\n+     * Transform a multidimensional array into a one-dimensional list.\n+     *\n+     * @param array Array (possibly multidimensional).\n+     * @return a list of all the {@code Object} instances contained in\n+     * {@code array}.\n+     */\n+    public static Object[] flatten(Object[] array) {\n+        final List<Object> list = new ArrayList<Object>();\n+        if (array != null) {\n+            for (Object o : array) {\n+                if (o instanceof Object[]) {\n+                    for (Object oR : flatten((Object[]) o)) {\n+                        list.add(oR);\n+                    }\n+                } else {\n+                    list.add(o);\n+                }\n+            }\n+        }\n+        return list.toArray();\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/exception/util/MessageFactory.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.exception.util;\n+\n+import java.text.MessageFormat;\n+import java.util.Locale;\n+\n+import org.apache.commons.math.exception.Localizable;\n+\n+/**\n+ * Class for constructing localized messages.\n+ *\n+ * @since 2.2\n+ * @version $Revision$ $Date$\n+ */\n+public class MessageFactory {\n+    /**\n+     * Class contains only static methods.\n+     */\n+    private MessageFactory() {}\n+\n+    /**\n+     * Builds a message string by from a pattern and its arguments.\n+     *\n+     * @param locale Locale in which the message should be translated.\n+     * @param pattern Format specifier.\n+     * @param arguments Format arguments.\n+     * @return a localized message string.\n+     */\n+    public static String buildMessage(Locale locale,\n+                                      Localizable pattern,\n+                                      Object ... arguments) {\n+        return buildMessage(locale, null, pattern, arguments);\n+    }\n+\n+    /**\n+     * Builds a message string by from two patterns (specific and general) and\n+     * an argument list.\n+     *\n+     * @param locale Locale in which the message should be translated.\n+     * @param specific Format specifier.\n+     * @param general Format specifier.\n+     * @param arguments Format arguments. They will be substituted first in\n+     * the {@code specific} format specifier, then the remaining arguments\n+     * will be substituted in the {@code general} format specifier.\n+     * @return a localized message string.\n+     */\n+    public static String buildMessage(Locale locale,\n+                                      Localizable specific,\n+                                      Localizable general,\n+                                      Object ... arguments) {\n+        final StringBuilder sb = new StringBuilder();\n+        MessageFormat fmt = null;\n+        if (specific != null) {\n+            fmt = new MessageFormat(specific.getLocalizedString(locale), locale);\n+            sb.append(fmt.format(arguments));\n+            sb.append(\": \");\n+        }\n+        fmt = new MessageFormat(general.getLocalizedString(locale), locale);\n+        sb.append(fmt.format(arguments));\n+        \n+        return sb.toString();\n+    }\n+}\n--- a/src/main/java/org/apache/commons/math/fraction/BigFraction.java\n+++ b/src/main/java/org/apache/commons/math/fraction/BigFraction.java\n      *            the denominator, must not be <code>null</code>.\n      * @throws ArithmeticException\n      *             if the denominator is <code>zero</code>.\n-     * @throws NullPointerException\n-     *             if the numerator or the denominator is <code>zero</code>.\n      */\n     public BigFraction(BigInteger num, BigInteger den) {\n-        if (num == null) {\n-            throw MathRuntimeException.createNullPointerException(LocalizedFormats.NULL_NUMERATOR);\n-        }\n-        if (den == null) {\n-            throw MathRuntimeException.createNullPointerException(LocalizedFormats.NULL_DENOMINATOR);\n-        }\n         if (BigInteger.ZERO.equals(den)) {\n             throw MathRuntimeException.createArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);\n         }\n--- a/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n import java.util.NoSuchElementException;\n \n import org.apache.commons.math.FunctionEvaluationException;\n-import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.MathUnsupportedOperationException;\n+import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.analysis.BinaryFunction;\n import org.apache.commons.math.analysis.ComposableFunction;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n \n /**\n  * This class provides default basic implementations for many methods in the\n- * {@link RealVector} interface with.\n+ * {@link RealVector} interface.\n  * @version $Revision$ $Date$\n  * @since 2.1\n  */\n      * inconsistent with vector size\n      */\n     protected void checkVectorDimensions(int n)\n-        throws IllegalArgumentException {\n-        double d = getDimension();\n+        throws DimensionMismatchException {\n+        int d = getDimension();\n         if (d != n) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  LocalizedFormats.VECTOR_LENGTH_MISMATCH, d, n);\n+            throw new DimensionMismatchException(d, n);\n         }\n     }\n \n \n             /** {@inheritDoc} */\n             public void remove() {\n-                throw MathRuntimeException.createUnsupportedOperationException(LocalizedFormats.UNSUPPORTED_OPERATION);\n+                throw new MathUnsupportedOperationException();\n             }\n         };\n     }\n \n         /** {@inheritDoc} */\n         public void remove() {\n-            throw MathRuntimeException.createUnsupportedOperationException(LocalizedFormats.UNSUPPORTED_OPERATION);\n+            throw new MathUnsupportedOperationException();\n         }\n     }\n \n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math/exception/util/ArgUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.exception.util;\n+\n+import java.util.List;\n+import java.util.ArrayList;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test for {@link ArgUtils}.\n+ * \n+ * @version $Revision$ $Date$ \n+ */\n+public class ArgUtilsTest {\n+    @Test\n+    public void testFlatten() {\n+        final List<Object> orig = new ArrayList<Object>();\n+\n+        final Object[] struct = new Object[] {\n+            new Object[] {\n+                new Object[] {\n+                    create(orig),\n+                    create(orig),\n+                },\n+                create(orig),\n+                new Object[] {\n+                    create(orig),\n+                }\n+            },\n+            create(orig),\n+            new Object[] {\n+                create(orig),\n+                new Object[] {\n+                    create(orig),\n+                    create(orig),\n+                }\n+            },\n+            create(orig),\n+        };\n+\n+        Object[] flat = ArgUtils.flatten(struct);\n+        Assert.assertEquals(flat.length, orig.size());\n+\n+        for (int i = 0, max = orig.size(); i < max; i++) {\n+            Assert.assertEquals(orig.get(i), flat[i]);\n+        }\n+    }\n+\n+    /**\n+     * Create and store an {@code Object}.\n+     *\n+     * @param list List to store to.\n+     * @return the stored object.\n+     */\n+    private Object create(List<Object> list) {\n+        final Object o = new Object();\n+        list.add(o);\n+        return o;\n+    }\n+}", "timestamp": 1281001908, "metainfo": ""}