{"sha": "7e2ffcc9034de41d7787f0b33b5670474f7a10de", "log": "Fixed DerivativeStructure.atan2 for special cases when both arguments are +/-0.  JIRA: MATH-935  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n \n         }\n \n+        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+        result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);\n+\n     }\n \n     /** Compute hyperbolic cosine of a derivative structure.\n--- a/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java\n     }\n \n     @Test\n+    public void testAtan2SpecialCases() {\n+\n+        DerivativeStructure pp =\n+                DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, +0.0),\n+                                          new DerivativeStructure(2, 2, 1, +0.0));\n+        Assert.assertEquals(0, pp.getValue(), 1.0e-15);\n+        Assert.assertEquals(+1, FastMath.copySign(1, pp.getValue()), 1.0e-15);\n+\n+        DerivativeStructure pn =\n+                DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, +0.0),\n+                                          new DerivativeStructure(2, 2, 1, -0.0));\n+        Assert.assertEquals(FastMath.PI, pn.getValue(), 1.0e-15);\n+\n+        DerivativeStructure np =\n+                DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, -0.0),\n+                                          new DerivativeStructure(2, 2, 1, +0.0));\n+        Assert.assertEquals(0, np.getValue(), 1.0e-15);\n+        Assert.assertEquals(-1, FastMath.copySign(1, np.getValue()), 1.0e-15);\n+\n+        DerivativeStructure nn =\n+                DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, -0.0),\n+                                          new DerivativeStructure(2, 2, 1, -0.0));\n+        Assert.assertEquals(-FastMath.PI, nn.getValue(), 1.0e-15);\n+\n+    }\n+\n+    @Test\n     public void testSinhDefinition() {\n         double[] epsilon = new double[] { 3.0e-16, 3.0e-16, 5.0e-16, 2.0e-15, 6.0e-15 };\n         for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {", "timestamp": 1360916411, "metainfo": ""}