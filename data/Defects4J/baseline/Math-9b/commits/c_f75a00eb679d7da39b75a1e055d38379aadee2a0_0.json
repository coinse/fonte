{"sha": "f75a00eb679d7da39b75a1e055d38379aadee2a0", "log": "Correcting checkstyle and javadoc errors.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/StoreUnivariate.java\n+++ b/src/java/org/apache/commons/math/stat/StoreUnivariate.java\n package org.apache.commons.math.stat;\n \n /**\n- * StoreUnivariate implements the Univariate interface but maintains the set of values \n- * which contribute to the values being returned.  This implementation of Univariate\n- * provides additional functionality such as skewness, kurtosis, and mode.  This additional\n- * functionality comes with a price of increased storage costs.\n+ * StoreUnivariate implements the Univariate interface \n+ * but maintains the set of values which contribute to \n+ * the values being returned.  This implementation of \n+ * Univariate provides additional percentile functionality \n+ * such as.  This additional functionality comes with \n+ * a price of increased storage costs.\n  * \n  * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n+ * @author <a href=\"mailto:mdiggory@apache.org\">Mark R. Diggory</a>\n  */\n public interface StoreUnivariate extends Univariate {\n \n      * \n      * @return The skewness of this distribution\n      */\n-    public abstract double getSkewness();\n+    double getSkewness();\n \n     /** \n      * Kurtosis is a measure of the \"peakedness\" of a distribution\n      * \n      * @return the mode\n      */\n-    public abstract double getKurtosis();\n+    double getKurtosis();\n \n     /**\n      * Returns the Kurtosis \"classification\" a distribution can be \n      *         StoredDeviation.LEPTOKURITC, StoredDeviation.PLATYKURTIC, or \n      *         StoredDeviation.MESOKURTIC\n      */\n-    public abstract int getKurtosisClass();\n+    int getKurtosisClass();\n \n     /**\n      * Returns the current set of values in an array of double primitives.  \n      * @return returns the current set of numbers in the order in which they \n      *         were added to this set\n      */\n-    public abstract double[] getValues();\n-    \n+    double[] getValues();\n+\n     /**\n      * Returns the current set of values in an array of double primitives,  \n      * sorted in ascending order.  The returned array is a fresh\n      * copy of the underlying data -- i.e., it is not a reference to the\n      * stored data.\n-     * \n-     * @return returns the current set of numbers sorted in ascending order        \n+     * @return returns the current set of \n+     * numbers sorted in ascending order        \n      */\n-    public abstract double[] getSortedValues(); \n+    double[] getSortedValues();\n \n     /**\n      * Returns the element at the specified index\n-     * \n+     * @param index The Index of the element\n      * @return return the element at the specified index\n      */\n-    public abstract double getElement(int index);\n-    \n+    double getElement(int index);\n+\n     /**\n      * Returns an estimate for the pth percentile of the stored values. \n      * This estimate follows the interpolation-adjusted defintion presented \n      * <a href=\"http://www.utdallas.edu/~ammann/stat5311/node8.html\">here</a>\n      * <p/>\n      * <strong>Preconditions</strong>:<ul>\n-     * <li><code>0 &lt; p &lt; 100</code> (otherwise an <code>IllegalArgumentException\n-     *     </code> is thrown)</li>\n+     * <li><code>0 &lt; p &lt; 100</code> (otherwise an \n+     * <code>IllegalArgumentException</code> is thrown)</li>\n      * <li>at least one value must be stored (returns <code>Double.NaN\n      *     </code> otherwise)</li>\n      * </ul>\n      * @return An estimate for the pth percentile of the stored data \n      * values\n      */\n-    public abstract double getPercentile(double p);\n+    double getPercentile(double p);\n \n }\n--- a/src/java/org/apache/commons/math/stat/Univariate.java\n+++ b/src/java/org/apache/commons/math/stat/Univariate.java\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n- package org.apache.commons.math.stat;\n+package org.apache.commons.math.stat;\n \n /**\n  *\n  * @author Phil Steitz\n  * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n  * @author <a href=\"mailto:mdiggory@apache.org\">Mark Diggory</a>\n- * @version $Revision: 1.4 $ $Date: 2003/06/21 23:38:27 $\n+ * @version $Revision: 1.5 $ $Date: 2003/07/05 19:25:38 $\n  * \n */\n public interface Univariate {\n      * Adds the value to the set of numbers\n      * @param v the value to be added \n      */\n-    abstract void addValue(double v);\n+    void addValue(double v);\n \n     /** \n      * Returns the <a href=http://www.xycoon.com/arithmetic_mean.htm>\n      * arithmetic mean </a> of the available values \n      * @return The mean or Double.NaN if no values have been added.\n      */\n-    abstract double getMean();\n+    double getMean();\n \n     /** \n      * Returns the <a href=http://www.xycoon.com/geometric_mean.htm>\n      * @return The geometricMean, Double.NaN if no values have been added, \n      * or if the productof the available values is less than or equal to 0.\n      */\n-    abstract double getGeometricMean();\n+    double getGeometricMean();\n \n     /** \n      * Returns the variance of the available values.\n      * @return The variance, Double.NaN if no values have been added \n      * or 0.0 for a single value set.  \n      */\n-    abstract double getVariance();\n+    double getVariance();\n \n     /** \n      * Returns the standard deviation of the available values.\n      * @return The standard deviation, Double.NaN if no values have been added \n      * or 0.0 for a single value set. \n      */\n-    abstract double getStandardDeviation();\n+    double getStandardDeviation();\n \n-\t/**\n+    /**\n      * Returns the skewness of the available values. Skewness is a \n      * measure of the assymetry of a given distribution.\n-\t * @return The skewness, Double.NaN if no values have been added \n+     * @return The skewness, Double.NaN if no values have been added \n      * or 0.0 for a value set &lt;=2. \n-\t */\n-\tabstract double getSkewness();\n-\t\n-\t/**\n+     */\n+    double getSkewness();\n+\n+    /**\n      * Returns the Kurtosis of the available values. Kurtosis is a \n      * measure of the \"peakedness\" of a distribution\n      * @return The kurtosis, Double.NaN if no values have been added, or 0.0 \n      * for a value set &lt;=3. \n-\t */\n-\tabstract double getKurtosis();\n-\t\t\n+     */\n+    double getKurtosis();\n+\n     /** \n      * Returns the maximum of the available values\n      * @return The max or Double.NaN if no values have been added.\n      */\n-    abstract double getMax();\n+    double getMax();\n \n-     /** \n-     * Returns the minimum of the available values\n-     * @return The min or Double.NaN if no values have been added.\n-     */\n-    abstract double getMin();\n+    /** \n+    * Returns the minimum of the available values\n+    * @return The min or Double.NaN if no values have been added.\n+    */\n+    double getMin();\n \n     /** \n      * Returns the number of available values\n      * @return The number of available values\n      */\n-    abstract int getN();\n+    int getN();\n \n     /**\n      * Returns the sum of the values that have been added to Univariate.\n      * @return The sum or Double.NaN if no values have been added\n      */\n-    abstract double getSum();\n+    double getSum();\n \n     /**\n      * Returns the sum of the squares of the available values.\n      * @return The sum of the squares or Double.NaN if no \n      * values have been added.\n      */\n-    abstract double getSumsq();\n+    double getSumsq();\n \n     /** \n      * Resets all statistics and storage\n      */\n-    abstract void clear();\n+    void clear();\n \n     /**\n      * This constant signals that a Univariate implementation\n     /**\n      * Univariate has the ability to return only measures for the\n      * last N elements added to the set of values.\n-\t * @return The current window size or -1 if its Infinite.\n-\t */\n+     * @return The current window size or -1 if its Infinite.\n+     */\n \n-    abstract int getWindowSize();\n+    int getWindowSize();\n \n     /**\n      * WindowSize controls the number of values which contribute \n      * have been added <strong> in that order</strong> \n      * then the <i>available values</i> are {3,4,5} and all\n      * reported statistics will be based on these values\n-\t * @param windowSize sets the size of the window.\n-\t */\n-    abstract void setWindowSize(int windowSize);\n+     * @param windowSize sets the size of the window.\n+     */\n+    void setWindowSize(int windowSize);\n }", "timestamp": 1057433138, "metainfo": ""}