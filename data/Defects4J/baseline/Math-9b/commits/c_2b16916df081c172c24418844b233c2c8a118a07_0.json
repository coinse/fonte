{"sha": "2b16916df081c172c24418844b233c2c8a118a07", "log": "improved test coverage  ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/ode/DummyStepInterpolatorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.ode;\n+\n+import junit.framework.*;\n+import java.util.Random;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ByteArrayInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.IOException;\n+\n+public class DummyStepInterpolatorTest\n+  extends TestCase {\n+\n+  public DummyStepInterpolatorTest(String name) {\n+    super(name);\n+  }\n+\n+  public void testNoReset() {\n+\n+    double[]   y    =   { 0.0, 1.0, -2.0 };\n+    DummyStepInterpolator interpolator = new DummyStepInterpolator(y, true);\n+    interpolator.storeTime(0);\n+    interpolator.shift();\n+    interpolator.storeTime(1);\n+\n+    double[] result = interpolator.getInterpolatedState();\n+    for (int i = 0; i < result.length; ++i) {\n+      assertTrue(Math.abs(result[i] - y[i]) < 1.0e-10);\n+    }\n+\n+  }\n+\n+  public void testFixedState()\n+    throws DerivativeException {\n+\n+    double[]   y    =   { 1.0, 3.0, -4.0 };\n+    DummyStepInterpolator interpolator = new DummyStepInterpolator(y, true);\n+    interpolator.storeTime(0);\n+    interpolator.shift();\n+    interpolator.storeTime(1);\n+\n+    interpolator.setInterpolatedTime(0.1);\n+    double[] result = interpolator.getInterpolatedState();\n+    for (int i = 0; i < result.length; ++i) {\n+        assertTrue(Math.abs(result[i] - y[i]) < 1.0e-10);\n+    }\n+\n+    interpolator.setInterpolatedTime(0.5);\n+    result = interpolator.getInterpolatedState();\n+    for (int i = 0; i < result.length; ++i) {\n+        assertTrue(Math.abs(result[i] - y[i]) < 1.0e-10);\n+    }\n+\n+  }\n+\n+  public void testSerialization()\n+    throws DerivativeException, IntegratorException,\n+           IOException, ClassNotFoundException {\n+\n+      double[]   y    =   { 0.0, 1.0, -2.0 };\n+      DummyStepInterpolator interpolator = new DummyStepInterpolator(y, true);\n+      interpolator.storeTime(0);\n+      interpolator.shift();\n+      interpolator.storeTime(1);\n+\n+      ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+      ObjectOutputStream    oos = new ObjectOutputStream(bos);\n+      oos.writeObject(interpolator);\n+\n+      assertTrue(bos.size () > 150);\n+      assertTrue(bos.size () < 250);\n+\n+      ByteArrayInputStream  bis = new ByteArrayInputStream(bos.toByteArray());\n+      ObjectInputStream     ois = new ObjectInputStream(bis);\n+      DummyStepInterpolator dsi = (DummyStepInterpolator) ois.readObject();\n+\n+      dsi.setInterpolatedTime(0.5);\n+      double[] result = dsi.getInterpolatedState();\n+      for (int i = 0; i < result.length; ++i) {\n+          assertTrue(Math.abs(result[i] - y[i]) < 1.0e-10);\n+      }\n+\n+  }\n+\n+  public static Test suite() {\n+    return new TestSuite(DummyStepInterpolatorTest.class);\n+  }\n+\n+}", "timestamp": 1191792020, "metainfo": ""}