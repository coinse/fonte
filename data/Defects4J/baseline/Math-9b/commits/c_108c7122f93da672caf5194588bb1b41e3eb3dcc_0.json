{"sha": "108c7122f93da672caf5194588bb1b41e3eb3dcc", "log": "MATH-658 Dead code in FastMath.pow(double, double) and some improvement in test coverage Fix test cases to use Assert rather than throws Convert comments on test cases to assert messages  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/util/FastMathTest.java\n+++ b/src/test/java/org/apache/commons/math/util/FastMathTest.java\n \n     @Test\n     public void testLog1pSpecialCases() {\n-        double x;\n-\n-        x = FastMath.log1p(-1.0);\n-        if (x != Double.NEGATIVE_INFINITY)\n-            throw new RuntimeException(\"Log1p of -1 should be -infinity\");\n+\n+        Assert.assertTrue(\"Logp of -1.0 should be -Inf\", Double.isInfinite(FastMath.log1p(-1.0)));\n+\n     }\n \n     @Test\n     public void testLogSpecialCases() {\n-        double x;\n-\n-        x = FastMath.log(0.0);\n-        if (x != Double.NEGATIVE_INFINITY)\n-            throw new RuntimeException(\"Log of zero should be -Inf\");\n-\n-        x = FastMath.log(-0.0);\n-        if (x != Double.NEGATIVE_INFINITY)\n-            throw new RuntimeException(\"Log of zero should be -Inf\");\n-\n-        x = FastMath.log(Double.NaN);\n-        if (x == x)\n-            throw new RuntimeException(\"Log of NaN should be NaN\");\n-\n-        x = FastMath.log(-1.0);\n-        if (x == x)\n-            throw new RuntimeException(\"Log of negative number should be NaN\");\n-\n-        x = FastMath.log(Double.MIN_VALUE);\n-        if (x != -744.4400719213812)\n-            throw new RuntimeException(\n-                                       \"Log of Double.MIN_VALUE should be -744.4400719213812\");\n-\n-        x = FastMath.log(-1.0);\n-        if (x == x)\n-            throw new RuntimeException(\"Log of negative number should be NaN\");\n-\n-        x = FastMath.log(Double.POSITIVE_INFINITY);\n-        if (x != Double.POSITIVE_INFINITY)\n-            throw new RuntimeException(\"Log of infinity should be infinity\");\n-    }\n-\n+\n+        Assert.assertTrue(\"Log of zero should be -Inf\", Double.isInfinite(FastMath.log(0.0)));\n+\n+        Assert.assertTrue(\"Log of -zero should be -Inf\", Double.isInfinite(FastMath.log(-0.0)));\n+\n+        Assert.assertTrue(\"Log of NaN should be NaN\", Double.isNaN(FastMath.log(Double.NaN)));\n+\n+        Assert.assertTrue(\"Log of negative number should be NaN\", Double.isNaN(FastMath.log(-1.0)));\n+\n+        Assert.assertEquals(\"Log of Double.MIN_VALUE should be -744.4400719213812\", -744.4400719213812, FastMath.log(Double.MIN_VALUE), MathUtils.EPSILON);\n+\n+        Assert.assertTrue(\"Log of infinity should be infinity\", Double.isInfinite(FastMath.log(Double.POSITIVE_INFINITY)));\n+    }\n     @Test\n     public void testExpSpecialCases() {\n-        double x;\n-\n-        /* Smallest value that will round up to Double.MIN_VALUE */\n-        x = FastMath.exp(-745.1332191019411);\n-        if (x != Double.MIN_VALUE)\n-            throw new RuntimeException(\n-                                       \"exp(-745.1332191019411) should be Double.MIN_VALUE\");\n-\n-        x = FastMath.exp(-745.1332191019412);\n-        if (x != 0.0)\n-            throw new RuntimeException(\"exp(-745.1332191019412) should be 0.0\");\n-\n-        x = FastMath.exp(Double.NaN);\n-        if (x == x)\n-            throw new RuntimeException(\"exp of NaN should be NaN\");\n-\n-        x = FastMath.exp(Double.POSITIVE_INFINITY);\n-        if (x != Double.POSITIVE_INFINITY)\n-            throw new RuntimeException(\"exp of infinity should be infinity\");\n-\n-        x = FastMath.exp(Double.NEGATIVE_INFINITY);\n-        if (x != 0.0)\n-            throw new RuntimeException(\"exp of -infinity should be 0.0\");\n-\n-        x = FastMath.exp(1.0);\n-        if (x != Math.E)\n-            throw new RuntimeException(\"exp(1) should be Math.E\");\n+\n+        // Smallest value that will round up to Double.MIN_VALUE\n+        Assert.assertEquals(Double.MIN_VALUE, FastMath.exp(-745.1332191019411), MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"exp(-745.1332191019412) should be 0.0\", 0.0, FastMath.exp(-745.1332191019412), MathUtils.EPSILON);\n+\n+        Assert.assertTrue(\"exp of NaN should be NaN\", Double.isNaN(FastMath.exp(Double.NaN)));\n+\n+        Assert.assertTrue(\"exp of infinity should be infinity\", Double.isInfinite(FastMath.exp(Double.POSITIVE_INFINITY)));\n+\n+        Assert.assertEquals(\"exp of -infinity should be 0.0\", 0.0, FastMath.exp(Double.NEGATIVE_INFINITY), MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"exp(1) should be Math.E\", Math.E, FastMath.exp(1.0), MathUtils.EPSILON);\n     }\n \n     @Test\n     public void testPowSpecialCases() {\n-        double x;\n-\n-        x = FastMath.pow(-1.0, 0.0);\n-        if (x != 1.0)\n-            throw new RuntimeException(\"pow(x, 0) should be 1.0\");\n-\n-        x = FastMath.pow(-1.0, -0.0);\n-        if (x != 1.0)\n-            throw new RuntimeException(\"pow(x, -0) should be 1.0\");\n-\n-        x = FastMath.pow(Math.PI, 1.0);\n-        if (x != Math.PI)\n-            throw new RuntimeException(\"pow(PI, 1.0) should be PI\");\n-\n-        x = FastMath.pow(-Math.PI, 1.0);\n-        if (x != -Math.PI)\n-            throw new RuntimeException(\"pow(-PI, 1.0) should be PI\");\n-\n-        x = FastMath.pow(Math.PI, Double.NaN);\n-        if (x == x)\n-            throw new RuntimeException(\"pow(PI, NaN) should be NaN\");\n-\n-        x = FastMath.pow(Double.NaN, Math.PI);\n-        if (x == x)\n-            throw new RuntimeException(\"pow(NaN, PI) should be NaN\");\n-\n-        x = FastMath.pow(2.0, Double.POSITIVE_INFINITY);\n-        if (x != Double.POSITIVE_INFINITY)\n-            throw new RuntimeException(\"pow(2.0, Infinity) should be Infinity\");\n-\n-        x = FastMath.pow(0.5, Double.NEGATIVE_INFINITY);\n-        if (x != Double.POSITIVE_INFINITY)\n-            throw new RuntimeException(\"pow(0.5, -Infinity) should be Infinity\");\n-\n-        x = FastMath.pow(0.5, Double.POSITIVE_INFINITY);\n-        if (x != 0.0)\n-            throw new RuntimeException(\"pow(0.5, Infinity) should be 0.0\");\n-\n-        x = FastMath.pow(2.0, Double.NEGATIVE_INFINITY);\n-        if (x != 0.0)\n-            throw new RuntimeException(\"pow(2.0, -Infinity) should be 0.0\");\n-\n-        x = FastMath.pow(0.0, 0.5);\n-        if (x != 0.0)\n-            throw new RuntimeException(\"pow(0.0, 0.5) should be 0.0\");\n-\n-        x = FastMath.pow(Double.POSITIVE_INFINITY, -0.5);\n-        if (x != 0.0)\n-            throw new RuntimeException(\"pow(Inf, -0.5) should be 0.0\");\n-\n-        x = FastMath.pow(0.0, -0.5);\n-        if (x != Double.POSITIVE_INFINITY)\n-            throw new RuntimeException(\"pow(0.0, -0.5) should be Inf\");\n-\n-        x = FastMath.pow(Double.POSITIVE_INFINITY, 0.5);\n-        if (x != Double.POSITIVE_INFINITY)\n-            throw new RuntimeException(\"pow(Inf, 0.5) should be Inf\");\n-\n-        x = FastMath.pow(-0.0, -3.0);\n-        if (x != Double.NEGATIVE_INFINITY)\n-            throw new RuntimeException(\"pow(-0.0, -3.0) should be -Inf\");\n-\n-        x = FastMath.pow(Double.NEGATIVE_INFINITY, 3.0);\n-        if (x != Double.NEGATIVE_INFINITY)\n-            throw new RuntimeException(\"pow(-Inf, -3.0) should be -Inf\");\n-\n-        x = FastMath.pow(-0.0, -3.5);\n-        if (x != Double.POSITIVE_INFINITY)\n-            throw new RuntimeException(\"pow(-0.0, -3.5) should be Inf\");\n-\n-        x = FastMath.pow(Double.POSITIVE_INFINITY, 3.5);\n-        if (x != Double.POSITIVE_INFINITY)\n-            throw new RuntimeException(\"pow(Inf, 3.5) should be Inf\");\n-\n-        x = FastMath.pow(-2.0, 3.0);\n-        if (x != -8.0)\n-            throw new RuntimeException(\"pow(-2.0, 3.0) should be -8.0\");\n-\n-        x = FastMath.pow(-2.0, 3.5);\n-        if (x == x)\n-            throw new RuntimeException(\"pow(-2.0, 3.5) should be NaN\");\n+\n+        Assert.assertEquals(\"pow(-1, 0) should be 1.0\", 1.0, FastMath.pow(-1.0, 0.0), MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"pow(-1, -0) should be 1.0\", 1.0, FastMath.pow(-1.0, -0.0), MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"pow(PI, 1.0) should be PI\", FastMath.PI, FastMath.pow(FastMath.PI, 1.0), MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"pow(-PI, 1.0) should be -PI\", -FastMath.PI, FastMath.pow(-FastMath.PI, 1.0), MathUtils.EPSILON);\n+\n+        Assert.assertTrue(\"pow(PI, NaN) should be NaN\", Double.isNaN(FastMath.pow(Math.PI, Double.NaN)));\n+\n+        Assert.assertTrue(\"pow(NaN, PI) should be NaN\", Double.isNaN(FastMath.pow(Double.NaN, Math.PI)));\n+\n+        Assert.assertTrue(\"pow(2.0, Infinity) should be Infinity\", Double.isInfinite(FastMath.pow(2.0, Double.POSITIVE_INFINITY)));\n+\n+        Assert.assertTrue(\"pow(0.5, -Infinity) should be Infinity\", Double.isInfinite(FastMath.pow(0.5, Double.NEGATIVE_INFINITY)));\n+\n+        Assert.assertEquals(\"pow(0.5, Infinity) should be 0.0\", 0.0, FastMath.pow(0.5, Double.POSITIVE_INFINITY), MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"pow(2.0, -Infinity) should be 0.0\", 0.0, FastMath.pow(2.0, Double.NEGATIVE_INFINITY), MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"pow(0.0, 0.5) should be 0.0\", 0.0, FastMath.pow(0.0, 0.5), MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"pow(Infinity, -0.5) should be 0.0\", 0.0, FastMath.pow(Double.POSITIVE_INFINITY, -0.5), MathUtils.EPSILON);\n+\n+        Assert.assertTrue(\"pow(0.0, -0.5) should be Inf\", Double.isInfinite(FastMath.pow(0.0, -0.5)));\n+\n+        Assert.assertTrue(\"pow(Inf, 0.5) should be Inf\", Double.isInfinite(FastMath.pow(Double.POSITIVE_INFINITY, 0.5)));\n+\n+        Assert.assertTrue(\"pow(-0.0, -3.0) should be -Inf\", Double.isInfinite(FastMath.pow(-0.0, -3.0)));\n+\n+        Assert.assertTrue(\"pow(-Inf, -3.0) should be -Inf\", Double.isInfinite(FastMath.pow(Double.NEGATIVE_INFINITY, 3.0)));\n+\n+        Assert.assertTrue(\"pow(-0.0, -3.5) should be Inf\", Double.isInfinite(FastMath.pow(-0.0, -3.5)));\n+\n+        Assert.assertTrue(\"pow(Inf, 3.5) should be Inf\", Double.isInfinite(FastMath.pow(Double.POSITIVE_INFINITY, 3.5)));\n+\n+        Assert.assertEquals(\"pow(-2.0, 3.0) should be -8.0\", -8.0, FastMath.pow(-2.0, 3.0), MathUtils.EPSILON);\n+\n+        Assert.assertTrue(\"pow(-2.0, 3.5) should be NaN\", Double.isNaN(FastMath.pow(-2.0, 3.5)));\n \n         // Added tests for a 100% coverage\n \n-        x = FastMath.pow(Double.POSITIVE_INFINITY, Double.NaN);\n-        if (x == x)\n-            throw new RuntimeException(\"pow(+Inf, NaN) should be NaN\");\n-\n-        x = FastMath.pow(Double.POSITIVE_INFINITY, Double.NaN);\n-        if (x == x)\n-            throw new RuntimeException(\"pow(+Inf, NaN) should be NaN\");\n-\n-        x = FastMath.pow(1.0, Double.POSITIVE_INFINITY);\n-        if (x == x)\n-            throw new RuntimeException(\"pow(1.0, +Inf) should be NaN\");\n-\n-        x = FastMath.pow(Double.NEGATIVE_INFINITY, Double.NaN);\n-        if (x == x)\n-            throw new RuntimeException(\"pow(-Inf, NaN) should be NaN\");\n-\n-        x = FastMath.pow(Double.NEGATIVE_INFINITY, -1.0);\n-        if (x != -0.0)\n-            throw new RuntimeException(\"pow(-Inf, -1.0) should be 0.0\");\n-\n-        x = FastMath.pow(Double.NEGATIVE_INFINITY, -2.0);\n-        if (x != 0.0)\n-            throw new RuntimeException(\"pow(-Inf, -2.0) should be 0.0\");\n-\n-        x = FastMath.pow(Double.NEGATIVE_INFINITY, 1.0);\n-        if (x != Double.NEGATIVE_INFINITY)\n-            throw new RuntimeException(\"pow(-Inf, 1.0) should be -Inf\");\n-\n-        x = FastMath.pow(Double.NEGATIVE_INFINITY, 2.0);\n-        if (x != Double.POSITIVE_INFINITY)\n-            throw new RuntimeException(\"pow(-Inf, 2.0) should be +Inf\");\n-\n-        x = FastMath.pow(1.0, Double.NEGATIVE_INFINITY);\n-        if (x == x)\n-            throw new RuntimeException(\"pow(1.0, -Inf) should be NaN\");\n+        Assert.assertTrue(\"pow(+Inf, NaN) should be NaN\", Double.isNaN(FastMath.pow(Double.POSITIVE_INFINITY, Double.NaN)));\n+\n+        Assert.assertTrue(\"pow(1.0, +Inf) should be NaN\", Double.isNaN(FastMath.pow(1.0, Double.POSITIVE_INFINITY)));\n+\n+        Assert.assertTrue(\"pow(-Inf, NaN) should be NaN\", Double.isNaN(FastMath.pow(Double.NEGATIVE_INFINITY, Double.NaN)));\n+\n+        Assert.assertEquals(\"pow(-Inf, -1.0) should be 0.0\", 0.0, FastMath.pow(Double.NEGATIVE_INFINITY, -1.0), MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"pow(-Inf, -2.0) should be 0.0\", 0.0, FastMath.pow(Double.NEGATIVE_INFINITY, -2.0), MathUtils.EPSILON);\n+\n+        Assert.assertTrue(\"pow(-Inf, 1.0) should be -Inf\", Double.isInfinite(FastMath.pow(Double.NEGATIVE_INFINITY, 1.0)));\n+\n+        Assert.assertTrue(\"pow(-Inf, 2.0) should be +Inf\", Double.isInfinite(FastMath.pow(Double.NEGATIVE_INFINITY, 2.0)));\n+\n+        Assert.assertTrue(\"pow(1.0, -Inf) should be NaN\", Double.isNaN(FastMath.pow(1.0, Double.NEGATIVE_INFINITY)));\n \n     }\n \n     @Test\n     public void testAtan2SpecialCases() {\n-        double x;\n-\n-        x = FastMath.atan2(Double.NaN, 0.0);\n-        if (x == x)\n-            throw new RuntimeException(\"atan2(NaN, 0.0) should be NaN\");\n-\n-        x = FastMath.atan2(0.0, Double.NaN);\n-        if (x == x)\n-            throw new RuntimeException(\"atan2(0.0, NaN) should be NaN\");\n-\n-        x = FastMath.atan2(0.0, 0.0);\n-        if (x != 0.0 || 1 / x != Double.POSITIVE_INFINITY)\n-            throw new RuntimeException(\"atan2(0.0, 0.0) should be 0.0\");\n-\n-        x = FastMath.atan2(0.0, 0.001);\n-        if (x != 0.0 || 1 / x != Double.POSITIVE_INFINITY)\n-            throw new RuntimeException(\"atan2(0.0, 0.001) should be 0.0\");\n-\n-        x = FastMath.atan2(0.1, Double.POSITIVE_INFINITY);\n-        if (x != 0.0 || 1 / x != Double.POSITIVE_INFINITY)\n-            throw new RuntimeException(\"atan2(0.1, +Inf) should be 0.0\");\n-\n-        x = FastMath.atan2(-0.0, 0.0);\n-        if (x != 0.0 || 1 / x != Double.NEGATIVE_INFINITY)\n-            throw new RuntimeException(\"atan2(-0.0, 0.0) should be -0.0\");\n-\n-        x = FastMath.atan2(-0.0, 0.001);\n-        if (x != 0.0 || 1 / x != Double.NEGATIVE_INFINITY)\n-            throw new RuntimeException(\"atan2(-0.0, 0.001) should be -0.0\");\n-\n-        x = FastMath.atan2(-0.1, Double.POSITIVE_INFINITY);\n-        if (x != 0.0 || 1 / x != Double.NEGATIVE_INFINITY)\n-            throw new RuntimeException(\"atan2(-0.0, +Inf) should be -0.0\");\n-\n-        x = FastMath.atan2(0.0, -0.0);\n-        if (x != Math.PI)\n-            throw new RuntimeException(\"atan2(0.0, -0.0) should be PI\");\n-\n-        x = FastMath.atan2(0.1, Double.NEGATIVE_INFINITY);\n-        if (x != Math.PI)\n-            throw new RuntimeException(\"atan2(0.1, -Inf) should be PI\");\n-\n-        x = FastMath.atan2(-0.0, -0.0);\n-        if (x != -Math.PI)\n-            throw new RuntimeException(\"atan2(-0.0, -0.0) should be -PI\");\n-\n-        x = FastMath.atan2(-0.1, Double.NEGATIVE_INFINITY);\n-        if (x != -Math.PI)\n-            throw new RuntimeException(\"atan2(0.1, -Inf) should be -PI\");\n-\n-        x = FastMath.atan2(0.1, 0.0);\n-        if (x != Math.PI / 2)\n-            throw new RuntimeException(\"atan2(0.1, 0.0) should be PI/2\");\n-\n-        x = FastMath.atan2(0.1, -0.0);\n-        if (x != Math.PI / 2)\n-            throw new RuntimeException(\"atan2(0.1, -0.0) should be PI/2\");\n-\n-        x = FastMath.atan2(Double.POSITIVE_INFINITY, 0.1);\n-        if (x != Math.PI / 2)\n-            throw new RuntimeException(\"atan2(Inf, 0.1) should be PI/2\");\n-\n-        x = FastMath.atan2(Double.POSITIVE_INFINITY, -0.1);\n-        if (x != Math.PI / 2)\n-            throw new RuntimeException(\"atan2(Inf, -0.1) should be PI/2\");\n-\n-        x = FastMath.atan2(-0.1, 0.0);\n-        if (x != -Math.PI / 2)\n-            throw new RuntimeException(\"atan2(-0.1, 0.0) should be -PI/2\");\n-\n-        x = FastMath.atan2(-0.1, -0.0);\n-        if (x != -Math.PI / 2)\n-            throw new RuntimeException(\"atan2(-0.1, -0.0) should be -PI/2\");\n-\n-        x = FastMath.atan2(Double.NEGATIVE_INFINITY, 0.1);\n-        if (x != -Math.PI / 2)\n-            throw new RuntimeException(\"atan2(-Inf, 0.1) should be -PI/2\");\n-\n-        x = FastMath.atan2(Double.NEGATIVE_INFINITY, -0.1);\n-        if (x != -Math.PI / 2)\n-            throw new RuntimeException(\"atan2(-Inf, -0.1) should be -PI/2\");\n-\n-        x = FastMath.atan2(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n-        if (x != Math.PI / 4)\n-            throw new RuntimeException(\"atan2(Inf, Inf) should be PI/4\");\n-\n-        x = FastMath.atan2(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY);\n-        if (x != Math.PI * 3.0 / 4.0)\n-            throw new RuntimeException(\"atan2(Inf, -Inf) should be PI * 3/4\");\n-\n-        x = FastMath.atan2(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);\n-        if (x != -Math.PI / 4)\n-            throw new RuntimeException(\"atan2(-Inf, Inf) should be -PI/4\");\n-\n-        x = FastMath.atan2(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);\n-        if (x != -Math.PI * 3.0 / 4.0)\n-            throw new RuntimeException(\"atan2(-Inf, -Inf) should be -PI * 3/4\");\n+\n+        Assert.assertTrue(\"atan2(NaN, 0.0) should be NaN\", Double.isNaN(FastMath.atan2(Double.NaN, 0.0)));\n+\n+        Assert.assertTrue(\"atan2(0.0, NaN) should be NaN\", Double.isNaN(FastMath.atan2(0.0, Double.NaN)));\n+\n+        Assert.assertEquals(\"atan2(0.0, 0.0) should be 0.0\", 0.0, FastMath.atan2(0.0, 0.0), MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"atan2(0.0, 0.001) should be 0.0\", 0.0, FastMath.atan2(0.0, 0.001), MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"atan2(0.1, +Inf) should be 0.0\", 0.0, FastMath.atan2(0.1, Double.POSITIVE_INFINITY), MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"atan2(-0.0, 0.0) should be -0.0\", -0.0, FastMath.atan2(-0.0, 0.0), MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"atan2(-0.0, 0.001) should be -0.0\", -0.0, FastMath.atan2(-0.0, 0.001), MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"atan2(-0.0, +Inf) should be -0.0\", -0.0, FastMath.atan2(-0.1, Double.POSITIVE_INFINITY), MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"atan2(0.0, -0.0) should be PI\", FastMath.PI, FastMath.atan2(0.0, -0.0), MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"atan2(0.1, -Inf) should be PI\", FastMath.PI, FastMath.atan2(0.1, Double.NEGATIVE_INFINITY), MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"atan2(-0.0, -0.0) should be -PI\", -FastMath.PI, FastMath.atan2(-0.0, -0.0), MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"atan2(0.1, -Inf) should be -PI\", -FastMath.PI, FastMath.atan2(-0.1, Double.NEGATIVE_INFINITY), MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"atan2(0.1, 0.0) should be PI/2\", FastMath.PI / 2.0, FastMath.atan2(0.1, 0.0), MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"atan2(0.1, -0.0) should be PI/2\", FastMath.PI / 2.0, FastMath.atan2(0.1, -0.0), MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"atan2(Inf, 0.1) should be PI/2\", FastMath.PI / 2.0, FastMath.atan2(Double.POSITIVE_INFINITY, 0.1), MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"atan2(Inf, -0.1) should be PI/2\", FastMath.PI / 2.0, FastMath.atan2(Double.POSITIVE_INFINITY, -0.1), MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"atan2(-0.1, 0.0) should be -PI/2\", -FastMath.PI / 2.0, FastMath.atan2(-0.1, 0.0), MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"atan2(-0.1, -0.0) should be -PI/2\", -FastMath.PI / 2.0, FastMath.atan2(-0.1, -0.0), MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"atan2(-Inf, 0.1) should be -PI/2\", -FastMath.PI / 2.0, FastMath.atan2(Double.NEGATIVE_INFINITY, 0.1), MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"atan2(-Inf, -0.1) should be -PI/2\", -FastMath.PI / 2.0, FastMath.atan2(Double.NEGATIVE_INFINITY, -0.1), MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"atan2(Inf, Inf) should be PI/4\", FastMath.PI / 4.0, FastMath.atan2(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY),\n+                MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"atan2(Inf, -Inf) should be PI * 3/4\", FastMath.PI * 3.0 / 4.0,\n+                FastMath.atan2(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY), MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"atan2(-Inf, Inf) should be -PI/4\", -FastMath.PI / 4.0, FastMath.atan2(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY),\n+                MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"atan2(-Inf, -Inf) should be -PI * 3/4\", - FastMath.PI * 3.0 / 4.0,\n+                FastMath.atan2(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY), MathUtils.EPSILON);\n     }\n \n     @Test\n      */\n     @Test\n     public void testAcosSpecialCases() {\n-        double x;\n-\n-        x = FastMath.acos(Double.NaN);\n-        if (x == x)\n-            throw new RuntimeException(\"acos(NaN) should NaN\");\n-\n-        x = FastMath.acos(-1.1);\n-        if (x == x)\n-            throw new RuntimeException(\"acos(-1.1) should NaN\");\n-\n-        x = FastMath.acos(1.1);\n-        if (x == x)\n-            throw new RuntimeException(\"acos(-1.1) should NaN\");\n-\n-        Assert.assertEquals(FastMath.acos(-1.0), FastMath.PI, Double.MIN_VALUE);\n-\n-        Assert.assertEquals(FastMath.acos(1.0), 0.0, Double.MIN_VALUE);\n-\n-        Assert.assertEquals(FastMath.acos(0.0), FastMath.PI / 2.0, Double.MIN_VALUE);\n+        \n+        Assert.assertTrue(\"acos(NaN) should be NaN\", Double.isNaN(FastMath.acos(Double.NaN)));\n+        \n+        Assert.assertTrue(\"acos(-1.1) should be NaN\", Double.isNaN(FastMath.acos(-1.1)));\n+\n+        Assert.assertTrue(\"acos(-1.1) should be NaN\", Double.isNaN(FastMath.acos(1.1)));\n+        \n+        Assert.assertEquals(\"acos(-1.0) should be PI\", FastMath.acos(-1.0), FastMath.PI, MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"acos(1.0) should be 0.0\", FastMath.acos(1.0), 0.0, MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"acos(0.0) should be PI/2\", FastMath.acos(0.0), FastMath.PI / 2.0, MathUtils.EPSILON);\n     }\n \n     /**\n      */\n     @Test\n     public void testAsinSpecialCases() {\n-        double x;\n-\n-        x = FastMath.asin(Double.NaN);\n-        if (x == x)\n-            throw new RuntimeException(\"asin(NaN) should NaN\");\n-\n-        x = FastMath.asin(-1.1);\n-        if (x == x)\n-            throw new RuntimeException(\"asin(-1.1) should NaN\");\n-\n-        x = FastMath.asin(1.1);\n-        if (x == x)\n-            throw new RuntimeException(\"asin(-1.1) should NaN\");\n-\n-        Assert.assertEquals(FastMath.asin(1.0), FastMath.PI / 2.0, Double.MIN_VALUE);\n-\n-        Assert.assertEquals(FastMath.asin(-1.0), -FastMath.PI / 2.0, Double.MIN_VALUE);\n-\n-        Assert.assertEquals(FastMath.asin(0.0), 0.0, Double.MIN_VALUE);\n+   \n+        Assert.assertTrue(\"asin(NaN) should be NaN\", Double.isNaN(FastMath.asin(Double.NaN)));\n+        \n+        Assert.assertTrue(\"asin(1.1) should be NaN\", Double.isNaN(FastMath.asin(1.1)));\n+        \n+        Assert.assertTrue(\"asin(-1.1) should be NaN\", Double.isNaN(FastMath.asin(-1.1)));\n+        \n+        Assert.assertEquals(\"asin(1.0) should be PI/2\", FastMath.asin(1.0), FastMath.PI / 2.0, MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"asin(-1.0) should be -PI/2\", FastMath.asin(-1.0), -FastMath.PI / 2.0, MathUtils.EPSILON);\n+\n+        Assert.assertEquals(\"asin(0.0) should be 0.0\", FastMath.asin(0.0), 0.0, MathUtils.EPSILON);\n     }\n \n     private Dfp cosh(Dfp x) {", "timestamp": 1315577059, "metainfo": ""}