{"sha": "4a13c4c7b7f2c5f1c312fdda41f944e2d4f30d2b", "log": "Fixed javadoc typos.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/fraction/FractionFormat.java\n+++ b/src/main/java/org/apache/commons/math/fraction/FractionFormat.java\n      * FractionFormat.\n      *\n      * @param f Fraction object to format\n-     * @return A formatted fraction in proper form.\n+     * @return a formatted fraction in proper form.\n      */\n     public static String formatFraction(Fraction f) {\n         return getImproperInstance().format(f);\n      *            offsets of the alignment field\n      * @return the value passed in as toAppendTo.\n      * @see java.text.Format#format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)\n-     * @throws FractionConversionException if the numbrer cannot be converted to a fraction\n-     * @throws MathIllegalArgumentException is <code>obj</code> is not a valid type.\n+     * @throws FractionConversionException if the number cannot be converted to a fraction\n+     * @throws MathIllegalArgumentException if <code>obj</code> is not a valid type.\n      */\n     @Override\n     public StringBuffer format(final Object obj,\n      * Parses a string to produce a {@link Fraction} object.  This method\n      * expects the string to be formatted as an improper fraction.\n      * @param source the string to parse\n-     * @param pos input/ouput parsing parameter.\n+     * @param pos input/output parsing parameter.\n      * @return the parsed {@link Fraction} object.\n      */\n     @Override", "timestamp": 1317570459, "metainfo": ""}