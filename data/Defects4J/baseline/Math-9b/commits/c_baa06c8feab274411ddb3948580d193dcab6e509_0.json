{"sha": "baa06c8feab274411ddb3948580d193dcab6e509", "log": "Avoid some remaining array copying in ArrayFieldVector, AbstractFieldMAtrix and AbstractRealMatrix. JIRA: MATH-573  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java\n                 out[col] = sum;\n             }\n \n-            return new ArrayFieldVector<T>(out);\n+            return new ArrayFieldVector<T>(out, false);\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java\n                 out[col] = sum;\n             }\n \n-            return new ArrayRealVector(out);\n+            return new ArrayRealVector(out, false);\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java\n         for (int i = 0; i < data.length; i++) {\n             out[i] = data[i].add(d);\n         }\n-        return new ArrayFieldVector<T>(out);\n+        return new ArrayFieldVector<T>(field, out, false);\n     }\n \n     /** {@inheritDoc} */\n         for (int i = 0; i < data.length; i++) {\n             out[i] = data[i].subtract(d);\n         }\n-        return new ArrayFieldVector<T>(out);\n+        return new ArrayFieldVector<T>(field, out, false);\n     }\n \n     /** {@inheritDoc} */\n         for (int i = 0; i < data.length; i++) {\n             out[i] = data[i].multiply(d);\n         }\n-        return new ArrayFieldVector<T>(out);\n+        return new ArrayFieldVector<T>(field, out, false);\n     }\n \n     /** {@inheritDoc} */\n         for (int i = 0; i < data.length; i++) {\n             out[i] = data[i].divide(d);\n         }\n-        return new ArrayFieldVector<T>(out);\n+        return new ArrayFieldVector<T>(field, out, false);\n     }\n \n     /** {@inheritDoc} */\n         for (int i = 0; i < data.length; i++) {\n             out[i] = one.divide(data[i]);\n         }\n-        return new ArrayFieldVector<T>(out);\n+        return new ArrayFieldVector<T>(field, out, false);\n     }\n \n     /** {@inheritDoc} */\n             for (int i = 0; i < data.length; i++) {\n                 out[i] = data[i].multiply(v.getEntry(i));\n             }\n-            return new ArrayFieldVector<T>(out);\n+            return new ArrayFieldVector<T>(field, out, false);\n         }\n     }\n \n         for (int i = 0; i < data.length; i++) {\n             out[i] = data[i].multiply(v[i]);\n         }\n-        return new ArrayFieldVector<T>(out);\n+        return new ArrayFieldVector<T>(field, out, false);\n     }\n \n     /**\n             for (int i = 0; i < data.length; i++) {\n                 out[i] = data[i].divide(v.getEntry(i));\n             }\n-            return new ArrayFieldVector<T>(out);\n+            return new ArrayFieldVector<T>(field, out, false);\n         }\n     }\n \n         for (int i = 0; i < data.length; i++) {\n                 out[i] = data[i].divide(v[i]);\n         }\n-        return new ArrayFieldVector<T>(out);\n+        return new ArrayFieldVector<T>(field, out, false);\n     }\n \n     /**\n         final T[] out = buildArray(data.length + 1);\n         System.arraycopy(data, 0, out, 0, data.length);\n         out[data.length] = in;\n-        return new ArrayFieldVector<T>(out);\n+        return new ArrayFieldVector<T>(field, out, false);\n     }\n \n     /** {@inheritDoc} */", "timestamp": 1305097067, "metainfo": ""}