{"sha": "dea89fc68a7d4bba0ab396c46e046054403710b1", "log": "MATH-413 New constructor. Javadoc typos.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n      * other contructor}.\n      * The default values for the algorithm settings are:\n      * <ul>\n-     *  <li>Initial step bound factor}: 100</li>\n-     *  <li>Cost relative tolerance}: 1e-10</li>\n-     *  <li>Parameters relative tolerance}: 1e-10</li>\n-     *  <li>Orthogonality tolerance}: 1e-10</li>\n-     *  <li>QR ranking threshold}: {@link MathUtils#SAFE_MIN}</li>\n+     *  <li>Initial step bound factor: 100</li>\n+     *  <li>Cost relative tolerance: 1e-10</li>\n+     *  <li>Parameters relative tolerance: 1e-10</li>\n+     *  <li>Orthogonality tolerance: 1e-10</li>\n+     *  <li>QR ranking threshold: {@link MathUtils#SAFE_MIN}</li>\n      * </ul>\n      */\n     public LevenbergMarquardtOptimizer() {\n         this(100, 1e-10, 1e-10, 1e-10, MathUtils.SAFE_MIN);\n+    }\n+\n+    /**\n+     * Constructor that allows the specification of a custom convergence\n+     * checker.\n+     * Note that all the usual convergence checks will be <em>disabled</em>.\n+     * The default values for the algorithm settings are:\n+     * <ul>\n+     *  <li>Initial step bound factor: 100</li>\n+     *  <li>Cost relative tolerance: 1e-10</li>\n+     *  <li>Parameters relative tolerance: 1e-10</li>\n+     *  <li>Orthogonality tolerance: 1e-10</li>\n+     *  <li>QR ranking threshold: {@link MathUtils#SAFE_MIN}</li>\n+     * </ul>\n+     *\n+     * @param checker Convergence checker.\n+     */\n+    public LevenbergMarquardtOptimizer(ConvergenceChecker<VectorialPointValuePair> checker) {\n+        this(100, checker, 1e-10, 1e-10, 1e-10, MathUtils.SAFE_MIN);\n+    }\n+\n+    /**\n+     * Constructor that allows the specification of a custom convergence\n+     * checker, in addition to the standard ones.\n+     *\n+     * @param initialStepBoundFactor Positive input variable used in\n+     * determining the initial step bound. This bound is set to the\n+     * product of initialStepBoundFactor and the euclidean norm of\n+     * {@code diag * x} if non-zero, or else to {@code initialStepBoundFactor}\n+     * itself. In most cases factor should lie in the interval\n+     * {@code (0.1, 100.0)}. {@code 100} is a generally recommended value.\n+     * @param checker Convergence checker.\n+     * @param costRelativeTolerance Desired relative error in the sum of\n+     * squares.\n+     * @param parRelativeTolerance Desired relative error in the approximate\n+     * solution parameters.\n+     * @param orthoTolerance Desired max cosine on the orthogonality between\n+     * the function vector and the columns of the Jacobian.\n+     * @param threshold Desired threshold for QR ranking. If the squared norm\n+     * of a column vector is smaller or equal to this threshold during QR\n+     * decomposition, it is considered to be a zero vector and hence the rank\n+     * of the matrix is reduced.\n+     */\n+    public LevenbergMarquardtOptimizer(double initialStepBoundFactor,\n+                                       ConvergenceChecker<VectorialPointValuePair> checker,\n+                                       double costRelativeTolerance,\n+                                       double parRelativeTolerance,\n+                                       double orthoTolerance,\n+                                       double threshold) {\n+        super(checker);\n+        this.initialStepBoundFactor = initialStepBoundFactor;\n+        this.costRelativeTolerance = costRelativeTolerance;\n+        this.parRelativeTolerance = parRelativeTolerance;\n+        this.orthoTolerance = orthoTolerance;\n+        this.qrRankingThreshold = threshold;\n     }\n \n     /**", "timestamp": 1314264493, "metainfo": ""}