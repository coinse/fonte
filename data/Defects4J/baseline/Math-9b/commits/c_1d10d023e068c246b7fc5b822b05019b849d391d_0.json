{"sha": "1d10d023e068c246b7fc5b822b05019b849d391d", "log": "Added goodness of fit test for poisson deviates.  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/random/RandomDataTest.java\n+++ b/src/test/java/org/apache/commons/math/random/RandomDataTest.java\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n+import junit.framework.AssertionFailedError;\n+\n+import java.util.ArrayList;\n import java.util.HashSet;\n+import java.util.List;\n \n import org.apache.commons.math.RetryTestCase;\n+import org.apache.commons.math.distribution.PoissonDistribution;\n+import org.apache.commons.math.distribution.PoissonDistributionImpl;\n import org.apache.commons.math.stat.Frequency;\n import org.apache.commons.math.stat.inference.ChiSquareTestImpl;\n+import org.apache.commons.math.stat.inference.ChiSquareTest;\n import org.apache.commons.math.stat.descriptive.SummaryStatistics;\n \n /**\n \t\t\t// ignored\n \t\t}\n \n+\t}\n+\t\n+\tpublic void testNextPoissionConistency() throws Exception {\n+\t    // TODO: increase upper bound to 40 when MATH-294 is resolved\n+\t    for (int i = 1; i < 6; i++) {\n+\t        checkNextPoissonConsistency(i);\n+\t    }\n+\t}\n+\t\n+\t/** \n+\t * Verifies that nextPoisson(mean) generates an empirical distribution of values\n+\t * consistent with PoissonDistributionImpl by generating 1000 values, computing a\n+\t * grouped frequency distribution of the observed values and comparing this distribution\n+\t * to the corresponding expected distribution computed using PoissonDistributionImpl.\n+\t * Uses ChiSquare test of goodness of fit to evaluate the null hypothesis that the\n+\t * distributions are the same. If the null hypothesis can be rejected with confidence\n+\t * 1 - alpha, the check fails.  This check will fail randomly with probability alpha.\n+\t */\n+\tpublic void checkNextPoissonConsistency(double mean) throws Exception {\n+\t    // Generate sample values\n+\t    int sampleSize = 1000;        // Number of deviates to generate\n+\t    int minExpectedCount = 7;     // Minimum size of expected bin count \n+\t    long maxObservedValue = 0;   \n+\t    double alpha = 0.001;         // Probability of false failure         \n+\t    Frequency frequency = new Frequency();\n+\t    for (int i = 0; i < sampleSize; i++) {\n+\t        long value = randomData.nextPoisson(mean);\n+\t        if (value > maxObservedValue) {\n+\t            maxObservedValue = value;\n+\t        }\n+\t        frequency.addValue(value);\n+\t    }\n+\t    \n+\t    /*\n+\t     *  Set up bins for chi-square test.  \n+\t     *  Ensure expected counts are all at least minExpectedCount.\n+\t     *  Start with upper and lower tail bins.\n+\t     *  Lower bin = [0, lower); Upper bin = [upper, +inf).\n+\t     */\n+\t    PoissonDistribution poissonDistribution = new PoissonDistributionImpl(mean);\n+\t    int lower = 1;\n+\t    while (poissonDistribution.cumulativeProbability(lower - 1) * sampleSize < minExpectedCount) {\n+\t        lower++;\n+\t    }\n+\t    int upper = (int) (5 * mean);  // Even for mean = 1, not much mass beyond 5\n+\t    while ((1 - poissonDistribution.cumulativeProbability(upper - 1)) * sampleSize < minExpectedCount) {\n+\t        upper--;\n+\t    }\n+\t    \n+\t    // Set bin width for interior bins.  For poisson, only need to look at end bins.\n+\t    int binWidth = 1;\n+\t    boolean widthSufficient = false;\n+\t    double lowerBinMass = 0;\n+\t    double upperBinMass = 0;\n+\t    while (!widthSufficient) {\n+\t        lowerBinMass = poissonDistribution.cumulativeProbability(lower, lower + binWidth - 1);\n+\t        upperBinMass = poissonDistribution.cumulativeProbability(upper - binWidth + 1, upper);\n+\t        widthSufficient = Math.min(lowerBinMass, upperBinMass) * sampleSize >= minExpectedCount;\n+\t        binWidth++;\n+\t    }\n+\t   \n+\t    /*\n+\t     *  Determine interior bin bounds.  Bins are\n+\t     *  [0, lower = binBounds[0]), [lower, binBounds[1]), [binBounds[0], binBounds[1]), ... , \n+\t     *    [binBounds[binCount - 2], upper = binBounds[binCount - 1]), [upper, +inf)\n+\t     *  \n+\t     */\n+\t    List<Integer> binBounds = new ArrayList<Integer>();\n+\t    binBounds.add(lower);\n+\t    int bound = lower + binWidth;\n+\t    while (bound < upper - binWidth) {\n+\t        binBounds.add(bound);\n+\t        bound += binWidth;\n+\t    }\n+\t    binBounds.add(bound);\n+\t    binBounds.add(upper);\n+\t    \n+\t    // Compute observed and expected bin counts\n+\t    final int binCount = binBounds.size() + 1; \n+\t    long[] observed = new long[binCount];\n+\t    double[] expected = new double[binCount];\n+\t    \n+\t    // Bottom bin\n+\t    observed[0] = 0;\n+\t    for (int i = 0; i < lower; i++) {\n+\t        observed[0] += frequency.getCount(i);\n+\t    }\n+\t    expected[0] = poissonDistribution.cumulativeProbability(lower - 1) * sampleSize;\n+\t    \n+\t    // Top bin\n+\t    observed[binCount - 1] = 0;\n+\t    for (int i = upper; i <= maxObservedValue; i++) {\n+\t        observed[binCount - 1] += frequency.getCount(i);\n+\t    }\n+\t    expected[binCount - 1] = (1 - poissonDistribution.cumulativeProbability(upper - 1)) * sampleSize;\n+\t    \n+\t    // Interior bins\n+\t    for (int i = 1; i < binCount - 1; i++) {\n+\t        observed[i] = 0;\n+\t        for (int j = binBounds.get(i - 1); j < binBounds.get(i); j++) {\n+\t            observed[i] += frequency.getCount(j);\n+\t        } // Expected count is (mass in [binBounds[i], binBounds[i+1])) * sampleSize\n+\t        expected[i] = (poissonDistribution.cumulativeProbability(binBounds.get(i) - 1) -\n+\t            poissonDistribution.cumulativeProbability(binBounds.get(i - 1) -1)) * sampleSize;\n+\t    }\n+\t    \n+\t    // Use chisquare test to verify that generated values are poisson(mean)-distributed\n+\t    ChiSquareTest chiSquareTest = new ChiSquareTestImpl();\n+\t    try {\n+\t        // Fail if we can reject null hypothesis that distributions are the same\n+\t        assertFalse(chiSquareTest.chiSquareTest(expected, observed, alpha));\n+\t    } catch (AssertionFailedError ex) {\n+\t        StringBuffer msgBuffer = new StringBuffer();\n+\t        msgBuffer.append(\"Chisquare test failed for mean = \");\n+\t        msgBuffer.append(mean);\n+\t        msgBuffer.append(\" p-value = \");\n+\t        msgBuffer.append(chiSquareTest.chiSquareTest(expected, observed));\n+\t        msgBuffer.append(\" chisquare statistic = \");\n+\t        msgBuffer.append(chiSquareTest.chiSquare(expected, observed));\n+\t        msgBuffer.append(\". \\n\");\n+\t        msgBuffer.append(\"This test can fail randomly due to sampling error with probability \");\n+\t        msgBuffer.append(alpha);\n+\t        msgBuffer.append(\".\");\n+\t        fail(msgBuffer.toString());\n+\t    }\n+\t    \n \t}\n \n \tpublic void testNextPoissonLargeMean() {", "timestamp": 1254134206, "metainfo": ""}