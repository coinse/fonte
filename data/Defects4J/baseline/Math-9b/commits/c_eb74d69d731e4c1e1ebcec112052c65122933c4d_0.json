{"sha": "eb74d69d731e4c1e1ebcec112052c65122933c4d", "log": "added factory methods to simplify creation of runtime exceptions with helpful messages  ", "commit": "\n--- a/src/java/org/apache/commons/math/MathRuntimeException.java\n+++ b/src/java/org/apache/commons/math/MathRuntimeException.java\n  */\n package org.apache.commons.math;\n \n+import java.io.EOFException;\n import java.io.PrintStream;\n import java.io.PrintWriter;\n import java.text.MessageFormat;\n+import java.text.ParseException;\n import java.util.Locale;\n import java.util.MissingResourceException;\n import java.util.ResourceBundle;\n public class MathRuntimeException extends RuntimeException {\n     \n     /** Serializable version identifier. */\n-    private static final long serialVersionUID = -2880601850253924272L;\n+    private static final long serialVersionUID = 8560172512507661982L;\n \n     /** Cache for resources bundle. */\n     private static ResourceBundle cachedResources = null;\n      */\n     private static String buildMessage(final String pattern, final Object[] arguments,\n                                        final Locale locale) {\n-        return new MessageFormat(translate(pattern, locale), locale).format(arguments);        \n-    }\n-\n-    /**\n-     * Constructs a new <code>MathRuntimeException</code> with no\n-     * detail message.\n-     */\n-    public MathRuntimeException() {\n-        super();\n-        this.pattern   = null;\n-        this.arguments = new Object[0];\n-    }\n-    \n+        return (pattern == null) ? \"\" : new MessageFormat(translate(pattern, locale), locale).format(arguments);        \n+    }\n+\n     /**\n      * Constructs a new <code>MathRuntimeException</code> with specified\n      * formatted detail message.\n     public MathRuntimeException(final String pattern, final Object[] arguments) {\n       super(buildMessage(pattern, arguments, Locale.US));\n       this.pattern   = pattern;\n-      this.arguments = (Object[]) arguments.clone();\n+      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();\n     }\n \n     /**\n                                 final Throwable rootCause) {\n       super(buildMessage(pattern, arguments, Locale.US), rootCause);\n       this.pattern   = pattern;\n-      this.arguments = (Object[]) arguments.clone();\n+      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();\n     }\n \n     /** Gets the pattern used to build the message of this throwable.\n      * @return the arguments used to build the message of this throwable\n      */\n     public Object[] getArguments() {\n-        return (Object[]) arguments.clone();\n+        return arguments.clone();\n     }\n \n     /** Gets the message in a specified locale.\n      * @return localized message\n      */\n     public String getMessage(final Locale locale) {\n-        return (pattern == null) ? null : buildMessage(pattern, arguments, locale);\n+        return buildMessage(pattern, arguments, locale);\n     }\n \n     /** {@inheritDoc} */\n             pw.flush();\n         }\n     }\n-    \n+\n+    /**\n+     * Constructs a new <code>ArithmeticException</code> with specified formatted detail message.\n+     * Message formatting is delegated to {@link java.text.MessageFormat}.\n+     * @param pattern format specifier\n+     * @param arguments format arguments\n+     */\n+    public static ArithmeticException createArithmeticException(final String pattern,\n+                                                                final Object[] arguments) {\n+        return new ArithmeticException(buildMessage(pattern, arguments, Locale.US)) {\n+\n+            /** Serializable version identifier. */\n+            private static final long serialVersionUID = 7705628723242533939L;\n+\n+            /** {@inheritDoc} */\n+            public String getLocalizedMessage() {\n+                return buildMessage(pattern, arguments, Locale.getDefault());\n+            }\n+\n+        };\n+    }\n+\n+    /**\n+     * Constructs a new <code>ArrayIndexOutOfBoundsException</code> with specified formatted detail message.\n+     * Message formatting is delegated to {@link java.text.MessageFormat}.\n+     * @param pattern format specifier\n+     * @param arguments format arguments\n+     */\n+    public static ArrayIndexOutOfBoundsException createArrayIndexOutOfBoundsException(final String pattern,\n+                                                                                      final Object[] arguments) {\n+        return new ArrayIndexOutOfBoundsException(buildMessage(pattern, arguments, Locale.US)) {\n+\n+            /** Serializable version identifier. */\n+            private static final long serialVersionUID = 8077627622976962141L;\n+\n+            /** {@inheritDoc} */\n+            public String getLocalizedMessage() {\n+                return buildMessage(pattern, arguments, Locale.getDefault());\n+            }\n+\n+        };\n+    }\n+\n+    /**\n+     * Constructs a new <code>EOFException</code> with specified formatted detail message.\n+     * Message formatting is delegated to {@link java.text.MessageFormat}.\n+     * @param pattern format specifier\n+     * @param arguments format arguments\n+     */\n+    public static EOFException createEOFException(final String pattern,\n+                                                  final Object[] arguments) {\n+        return new EOFException(buildMessage(pattern, arguments, Locale.US)) {\n+\n+            /** Serializable version identifier. */\n+            private static final long serialVersionUID = 279461544586092584L;\n+\n+            /** {@inheritDoc} */\n+            public String getLocalizedMessage() {\n+                return buildMessage(pattern, arguments, Locale.getDefault());\n+            }\n+\n+        };\n+    }\n+\n+    /**\n+     * Constructs a new <code>IllegalArgumentException</code> with specified formatted detail message.\n+     * Message formatting is delegated to {@link java.text.MessageFormat}.\n+     * @param pattern format specifier\n+     * @param arguments format arguments\n+     */\n+    public static IllegalArgumentException createIllegalArgumentException(final String pattern,\n+                                                                          final Object[] arguments) {\n+        return new IllegalArgumentException(buildMessage(pattern, arguments, Locale.US)) {\n+\n+            /** Serializable version identifier. */\n+            private static final long serialVersionUID = -7537852425838457684L;\n+\n+            /** {@inheritDoc} */\n+            public String getLocalizedMessage() {\n+                return buildMessage(pattern, arguments, Locale.getDefault());\n+            }\n+\n+        };\n+    }\n+\n+    /**\n+     * Constructs a new <code>IllegalStateException</code> with specified formatted detail message.\n+     * Message formatting is delegated to {@link java.text.MessageFormat}.\n+     * @param pattern format specifier\n+     * @param arguments format arguments\n+     */\n+    public static IllegalStateException createIllegalStateException(final String pattern,\n+                                                                    final Object[] arguments) {\n+        return new IllegalStateException(buildMessage(pattern, arguments, Locale.US)) {\n+\n+            /** Serializable version identifier. */\n+            private static final long serialVersionUID = 5173599768297434381L;\n+\n+            /** {@inheritDoc} */\n+            public String getLocalizedMessage() {\n+                return buildMessage(pattern, arguments, Locale.getDefault());\n+            }\n+\n+        };\n+    }\n+\n+    /**\n+     * Constructs a new <code>ParseException</code> with specified\n+     * formatted detail message.\n+     * Message formatting is delegated to {@link java.text.MessageFormat}.\n+     * @param pattern format specifier\n+     * @param arguments format arguments\n+     * @param offset offset at which error occurred\n+     */\n+    public static ParseException createParseException(final String pattern,\n+                                                      final Object[] arguments,\n+                                                      final int offset) {\n+        return new ParseException(buildMessage(pattern, arguments, Locale.US), offset) {\n+\n+            /** Serializable version identifier. */\n+            private static final long serialVersionUID = -1103502177342465975L;\n+\n+            /** {@inheritDoc} */\n+            public String getLocalizedMessage() {\n+                return buildMessage(pattern, arguments, Locale.getDefault());\n+            }\n+\n+        };\n+    }\n+\n }", "timestamp": 1226068946, "metainfo": ""}