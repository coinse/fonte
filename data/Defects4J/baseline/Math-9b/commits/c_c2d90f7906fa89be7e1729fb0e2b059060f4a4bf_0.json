{"sha": "c2d90f7906fa89be7e1729fb0e2b059060f4a4bf", "log": "In GammaDistributionTest, inlined previous implementation of double Gamma.logGamma(doubl)) in order to allow for comparison with new implementation. This is in preparation of MATH-849.   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/distribution/GammaDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math3/distribution/GammaDistributionTest.java\n         Assert.assertEquals(dist.getNumericalVariance(), 1.1d * 4.2d * 4.2d, tol);\n     }\n \n+    private static final double HALF_LOG_2_PI = 0.5 * FastMath.log(2.0 * FastMath.PI);\n+\n+    public static double logGamma(double x) {\n+        /*\n+         * This is a copy of\n+         * double Gamma.logGamma(double)\n+         * prior to MATH-849\n+         */\n+        double ret;\n+\n+        if (Double.isNaN(x) || (x <= 0.0)) {\n+            ret = Double.NaN;\n+        } else {\n+            double sum = Gamma.lanczos(x);\n+            double tmp = x + Gamma.LANCZOS_G + .5;\n+            ret = ((x + .5) * FastMath.log(tmp)) - tmp +\n+                HALF_LOG_2_PI + FastMath.log(sum / x);\n+        }\n+\n+        return ret;\n+    }\n+\n     public static double density(final double x, final double shape,\n                                  final double scale) {\n         /*\n          * This is a copy of\n          * double GammaDistribution.density(double)\n-         * prior to r1338548.\n+         * prior to MATH-753.\n          */\n         if (x < 0) {\n             return 0;\n         }\n         return FastMath.pow(x / scale, shape - 1) / scale *\n-               FastMath.exp(-x / scale) / FastMath.exp(Gamma.logGamma(shape));\n+               FastMath.exp(-x / scale) / FastMath.exp(logGamma(shape));\n     }\n \n     /*", "timestamp": 1346214527, "metainfo": ""}