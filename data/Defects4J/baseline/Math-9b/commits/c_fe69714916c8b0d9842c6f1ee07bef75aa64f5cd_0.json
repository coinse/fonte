{"sha": "fe69714916c8b0d9842c6f1ee07bef75aa64f5cd", "log": "Moved all Univariate and Bivariate stats interfaces and classes to the math.stat package   ", "commit": "\n--- a/src/java/org/apache/commons/math/EmpiricalDistribution.java\n+++ b/src/java/org/apache/commons/math/EmpiricalDistribution.java\n import java.io.File;\n import java.util.ArrayList;\n \n+import org.apache.commons.math.stat.Univariate;\n+\n /**\n  * Represents an <a href=http://random.mat.sbg.ac.at/~ste/dipl/node11.html>\n  * empirical probability distribution</a> -- a probability distribution derived\n  * generate random values \"like\" those in the input file -- i.e., the values\n  * generated will follow the distribution of the values in the file.\n  * @author  Phil Steitz\n- * @version $Revision: 1.1 $\n+ * @version $Revision: 1.2 $\n  */\n public interface EmpiricalDistribution {\n     \n--- a/src/java/org/apache/commons/math/EmpiricalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/EmpiricalDistributionImpl.java\n import java.io.FileReader;\n import java.io.File;\n import java.io.IOException;\n+\n+import org.apache.commons.math.stat.Univariate;\n+import org.apache.commons.math.stat.UnivariateImpl;\n \n /**\n  * Implements <code>EmpiricalDistribution</code> interface using \n  * </ol></p>\n  *\n  * @author  Phil Steitz\n- * @version $Revision: 1.2 $\n+ * @version $Revision: 1.3 $\n  */\n public class EmpiricalDistributionImpl implements Serializable,EmpiricalDistribution {\n \n--- a/src/java/org/apache/commons/math/TestStatisticImpl.java\n+++ b/src/java/org/apache/commons/math/TestStatisticImpl.java\n \n package org.apache.commons.math;\n \n+import org.apache.commons.math.stat.Univariate;\n+import org.apache.commons.math.stat.UnivariateImpl;\n+\n /**\n  * Implements the following test statistics <ul>\n  * <li>\n  * </li>\n  * </ul>\n  * @author Phil Steitz\n- * @version $Revision: 1.2 $ $Date: 2003/05/26 17:29:36 $\n+ * @version $Revision: 1.3 $ $Date: 2003/05/29 20:35:44 $\n  * \n  */\n public class TestStatisticImpl implements TestStatistic {\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+/**\n+ * Provides univariate measures for an array of doubles.  \n+ * \n+ * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n+ * @author Mark Diggory\n+ */\n+public abstract class AbstractStoreUnivariate implements StoreUnivariate {\n+\n+    /** \n+     * Returns the most frequently occuring value\n+     * @see org.apache.commons.math.StoreUnivariate#getMode()\n+     */\n+    public double getMode() {\n+        // Mode depends on a refactor Freq class\n+        String msg = \"getMode() is not yet implemented\";\n+        throw new UnsupportedOperationException(msg);\n+    }\n+\n+    /**\n+     * Returns the skewness of this collection of values\n+     * @see org.apache.commons.math.StoreUnivariate#getSkewness()\n+     */\n+    public double getSkewness() {\n+        // Initialize the skewness\n+        double skewness = Double.NaN;\n+\n+        // Get the mean and the standard deviation\n+        double mean = getMean();\n+        double stdDev = getStandardDeviation();\n+\n+        // Sum the cubes of the distance from the mean divided by the \n+        // standard deviation\n+        double accum = 0.0;\n+        for (int i = 0; i < getN(); i++) {\n+            accum += Math.pow((getElement(i) - mean) / stdDev, 3.0);\n+        }\n+\n+        // Get N\n+        double n = getN();\n+\n+        // Calculate skewness\n+        skewness = (n / ((n - 1) * (n - 2))) * accum;\n+\n+        return skewness;\n+    }\n+\n+    /**\n+     * Returns the kurtosis for this collection of values\n+     * @see org.apache.commons.math.StoreUnivariate#getKurtosis()\n+     */\n+    public double getKurtosis() {\n+        // Initialize the kurtosis\n+        double kurtosis = Double.NaN;\n+\n+        // Get the mean and the standard deviation\n+        double mean = getMean();\n+        double stdDev = getStandardDeviation();\n+\n+        // Sum the ^4 of the distance from the mean divided by the \n+        // standard deviation\n+        double accum = 0.0;\n+        for (int i = 0; i < getN(); i++) {\n+            accum += Math.pow((getElement(i) - mean) / stdDev, 4.0);\n+        }\n+\n+        // Get N\n+        double n = getN();\n+\n+        double coefficientOne = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n+        double termTwo = ((3 * Math.pow(n - 1, 2.0)) \n+                           / ((n - 2) * (n - 3))); \n+        // Calculate kurtosis\n+        kurtosis = (coefficientOne * accum) - termTwo;\n+\n+        return kurtosis;\n+    }\n+\n+    /**\n+     * Returns the type or class of kurtosis that this collection of \n+     * values exhibits\n+     * @see org.apache.commons.math.StoreUnivariate#getKurtosisClass()\n+     */\n+    public int getKurtosisClass() {\n+\n+        int kClass = StoreUnivariate.MESOKURTIC;\n+\n+        double kurtosis = getKurtosis();\n+        if (kurtosis > 0) {\n+            kClass = StoreUnivariate.LEPTOKURTIC;\n+        } else if (kurtosis < 0) {\n+            kClass = StoreUnivariate.PLATYKURTIC;\n+        }\n+\n+        return (kClass);\n+\n+    }\n+\n+    /**\n+     * Returns the mean for this collection of values\n+     * @see org.apache.commons.math.Univariate#getMean()\n+     */\n+    public double getMean() {\n+        double arithMean = getSum() / getN();\n+        return arithMean;\n+    }\n+\n+    /**\n+     * Returns the geometric mean for this collection of values\n+     * @see org.apache.commons.math.Univariate#getGeometricMean()\n+     */\n+    public double getGeometricMean() {\n+        double gMean = Math.pow(getProduct(),(1.0/getN()));\n+        return gMean;\n+    }\n+\n+    /**\n+     * Returns the product for this collection of values\n+     * @see org.apache.commons.math.Univariate#getProduct()\n+     */\n+    public double getProduct() {\n+        double product = Double.NaN;\n+        if( getN() > 0 ) {\n+            product = 1.0;\n+            for( int i = 0; i < getN(); i++) {\n+                product *= getElement(i);\n+            }\n+        }\n+        return product;\n+    }\n+       \n+\n+    /**\n+     * Returns the variance for this collection of values\n+     * @see org.apache.commons.math.Univariate#getVariance()\n+     */\n+    public double getVariance() {\n+        // Initialize variance\n+        double variance = Double.NaN;\n+\n+        if (getN() == 1) {\n+            // If this is a single value\n+            variance = 0;\n+        } else if (getN() > 1) {\n+            // Get the mean\n+            double mean = getMean();\n+\n+            // Calculate the sum of the squares of the distance between each \n+            // value and the mean\n+            double accum = 0.0;\t\t\n+            for (int i = 0; i < getN(); i++){\n+                accum += Math.pow((getElement(i) - mean), 2.0);\n+            }\n+\n+            // Divide the accumulator by N - Hmmm... unbiased or biased?\n+            variance = accum / (getN() - 1);\n+        }\n+\n+        return variance;\n+    }\n+\n+    /**\n+     * Returns the standard deviation for this collection of values\n+     * @see org.apache.commons.math.Univariate#getStandardDeviation()\n+     */\n+    public double getStandardDeviation() {\n+        double stdDev = Double.NaN;\n+        if (getN() != 0) {\n+            stdDev = Math.sqrt(getVariance());\n+        }\n+        return (stdDev);\n+    }\n+\n+    /**\n+     * Returns the maximum value contained herein.\n+     * @see org.apache.commons.math.Univariate#getMax()\n+     */\n+    public double getMax() {\n+\n+        // Initialize maximum to NaN\n+        double max = Double.NaN;\n+\n+        for (int i = 0; i < getN(); i++) {\n+            if (i == 0) {\n+                max = getElement(i);\n+            } else {\n+                if (getElement(i) > max) {\n+                    max = getElement(i);\n+                }\n+            }\n+        }\n+\n+        return max;\n+    }\n+\n+    /**\n+     * Returns the minimum value contained herein\n+     * @see org.apache.commons.math.Univariate#getMin()\n+     */\n+    public double getMin() {\n+        // Initialize minimum to NaN\n+        double min = Double.NaN;\n+\n+        for (int i = 0; i < getN(); i++) {\n+            if (i == 0) {\n+                min = getElement(i);\n+            } else {\n+                if (getElement(i) < min) {\n+                    min = getElement(i);\n+                }\n+            }\n+        }\n+\n+        return min;\n+    }\n+\n+    /**\n+     * Returns the sum of all values contained herein\n+     * @see org.apache.commons.math.Univariate#getSum()\n+     */\n+    public double getSum() {\n+        double accum = 0.0;\n+        for (int i = 0; i < getN(); i++) {\n+            accum += getElement(i);\n+        }\n+        return accum;\n+    }\n+\n+    /**\n+     * Returns the sun of the squares of all values contained herein\n+     * @see org.apache.commons.math.Univariate#getSumsq()\n+     */\n+    public double getSumsq() {\n+        double accum = 0.0;\n+        for (int i = 0; i < getN(); i++) {\n+            accum += Math.pow(getElement(i), 2.0);\n+        }\n+        return accum;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.apache.commons.beanutils.PropertyUtils;\n+\n+/**\n+ * This implementation of StoreUnivariate uses commons-beanutils to gather\n+ * univariate statistics for a List of Java Beans by property.  This \n+ * implementation uses beanutils' PropertyUtils to get a simple, nested,\n+ * indexed, mapped, or combined property from an element of a List.\n+ *\n+ * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n+ */\n+public class BeanListUnivariateImpl extends ListUnivariateImpl {\n+\n+    private String propertyName;\n+\n+    public BeanListUnivariateImpl(List list) {\n+        super( list );\n+    }\n+\n+    public BeanListUnivariateImpl(List list, String propertyName) {\n+        super( list );\n+        setPropertyName( propertyName );\n+    }\n+\n+    public String getPropertyName() {\n+        return propertyName;\n+    }\n+\n+    public void setPropertyName(String propertyName) {\n+        System.out.println( \"Set prop name; \" + propertyName );\n+        this.propertyName = propertyName;\n+    }\n+\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.Univariate#addValue(double)\n+     */\n+    public void addValue(double v) {\n+        String msg = \"The BeanListUnivariateImpl does not accept values \" +\n+            \"through the addValue method.  Because elements of this list \" +\n+            \"are JavaBeans, one must be sure to set the 'propertyName' \" +\n+            \"property and add new Beans to the underlying list via the \" +\n+            \"addBean(Object bean) method\";\n+        throw new UnsupportedOperationException( msg );\n+    }\n+\n+    /**\n+     * Adds a bean to this list. \n+     *\n+     * @param bean Bean to add to the list\n+     */\n+    public void addObject(Object bean) {\n+        list.add(bean);\n+    }\n+\n+    /**\n+     * Reads the property of an element in the list.\n+     *\n+     * @param index The location of the value in the internal List\n+     * @return A Number object representing the value at a given \n+     *         index\n+     */\n+    protected Number getInternalIndex(int index) {\n+\n+        try {\n+            Number n = (Number) PropertyUtils.getProperty( list.get( index ), \n+                                                           propertyName );\n+\n+            return n;\n+        } catch( Exception e ) {\n+            // TODO: We could use a better strategy for error handling\n+            // here.\n+\n+            // This is a somewhat foolish design decision, but until\n+            // we figure out what needs to be done, let's return NaN\n+            return new Double(Double.NaN);\n+        }\n+\n+\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/BivariateRegression.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.math.stat;\n+\n+/**\n+ * Estimates an ordinary least squares regression model\n+ * with one independent variable: <p>\n+ *\n+ * y = intercept + slope * x  </code><p>\n+ *\n+ * Standard errors for <code>intercept</code> and <code>slope</code> are \n+ * available as well as ANOVA, r-square and Pearson's r statistics.<p>\n+ *\n+ * Observations (x,y pairs) can be added to the model one at a time or they \n+ * can be provided in a 2-dimensional array.  The observations are not stored\n+ * in memory, so there is no limit to the number of observations that can be\n+ * added to the model. <p>\n+ *\n+ * <strong>Usage Notes</strong>: <ul>\n+ * <li> When there are fewer than two observations in the model, or when\n+ * there is no variation in the x values (i.e. all x values are the same) \n+ * all statistics return <code>NaN</code>. At least two observations with\n+ * different x coordinates are requred to estimate a bivariate regression model.</li>\n+ * <li> getters for the statistics always compute values based on the current\n+ * set of observations -- i.e., you can get statistics, then add more data\n+ * and get updated statistics without using a new instance.  There is no \n+ * \"compute\" method that updates all statistics.  Each of the getters performs\n+ * the necessary computations to return the requested statistic.</li>\n+ * </ul>\n+ *\n+ * @author  Phil Steitz\n+ * @version $Revision: 1.1 $ $Date: 2003/05/29 20:35:45 $\n+ */\n+public class BivariateRegression {\n+    \n+    /** sum of x values */\n+    private double sumX = 0d;\n+    \n+    /** sum of squared x values */\n+    private double sumSqX = 0d;\n+    \n+    /** sum of y values */\n+    private double sumY = 0d;\n+    \n+    /** sum of squared y values */\n+    private double sumSqY = 0d;\n+    \n+    /** sum of products */\n+    private double sumXY = 0d;\n+    \n+    /** number of observations */\n+    private long n = 0;\n+    \n+    // ---------------------Public methods--------------------------------------\n+    \n+    /**\n+     * Adds the observation (x,y) to the regression data set\n+     *\n+     * @param x independent variable value\n+     * @param y dependent variable value\n+     */\n+    public void addData(double x, double y) {\n+        sumX += x;\n+        sumSqX += x*x;\n+        sumY += y;\n+        sumSqY += y*y;\n+        sumXY += x*y;\n+        n++;\n+    } \n+    \n+    /**\n+     * Adds the observations represented by the elements in <code>data.</code><p>\n+     * <code>(data[0][0],data[0][1])</code> will be the first observation, then\n+     * <code>(data[1][0],data[1][1])</code>, etc. <p> \n+     * \n+     * This method does not replace data that has already been added.  \n+     * To replace all data, use <code>clear()</code> before adding the new data.\n+     * \n+     * @param data array of observations to be added\n+     */\n+    public void addData(double[][] data) {\n+       for (int i = 0; i < data.length; i++) {\n+            addData(data[i][0],data[i][1]);\n+       }\n+    }\n+    \n+    /*\n+     * Clears all data from the model\n+     */\n+    public void clear() {\n+        sumX = 0d;\n+        sumSqX = 0d;\n+        sumY = 0d;\n+        sumSqY = 0d;\n+        sumXY = 0d;\n+        n = 0;\n+    }\n+          \n+    /**\n+     * Returns the number of observations that have been added to the model\n+     *\n+     * @return n\n+     */\n+    public long getN() {\n+        return n;\n+    }\n+    \n+    /**\n+     * Returns the \"predicted\" <code>y</code> value associated with the \n+     * supplied <code>x</code> value. Specifically, <p>\n+     *\n+     * <code> predict(x) = intercept + slope * x </code> <p>\n+     *\n+     * At least two observations (with at least two different x values)\n+     * must have been added before invoking this method. If this method is \n+     * invoked before a model can be estimated, <code>Double,NaN</code> is\n+     * returned.\n+     *\n+     * @param x input <code>x</code> value\n+     * @return predicted <code>y</code> value\n+     */\n+    public double predict(double x) {\n+        double b1 = getSlope();\n+        if (b1 == Double.NaN) {\n+            return b1;\n+        }\n+        return getIntercept(b1) + b1*x;\n+    }\n+    \n+    /**\n+     * Returns the intercept of the estimated regression line.\n+     * The least squares estimate of the intercept is computed using the normal\n+     * equations, as described \n+     * <a href=http://www.xycoon.com/estimation4.htm>here</a>.\n+     * The intercept is sometimes denoted b0. <p>\n+     *\n+     * At least two distinct data pairs (with at least two different x values)\n+     * must have been added before invoking this method. If this method is \n+     * invoked before a model can be estimated, <code>Double,NaN</code> is\n+     * returned.\n+     *\n+     * @return the intercept of the regression line\n+     */\n+     public double getIntercept() {\n+         return getIntercept(getSlope());\n+     }\n+     \n+     /**\n+     * Returns the slope of the estimated regression line.  \n+     * The least squares estimate of the slope is computed using the normal\n+     * equations, as described \n+     * <a href=http://www.xycoon.com/estimation4.htm>here</a>.\n+     * The slope is sometimes denoted b1. <p>\n+     *\n+     * At least two observations (with at least two different x values)\n+     * must have been added before invoking this method. If this method is \n+     * invoked before a model can be estimated, <code>Double,NaN</code> is\n+     * returned.\n+     *\n+     * @return the slope of the regression line\n+     */\n+     public double getSlope() {\n+         if (n < 2) {\n+             return Double.NaN;  //not enough data \n+         }\n+         double dn = (double) n;\n+         double denom = sumSqX - (sumX*sumX/dn);\n+         if (Math.abs(denom)< 10*Double.MIN_VALUE) { \n+             return Double.NaN; //not enough variation in x\n+         }\n+         return (sumXY - (sumX*sumY/dn))/denom;\n+     }\n+     \n+     /**\n+      * Returns the sum of squared errors</a> associated with the regression \n+      * model. This is defined as SSE \n+      * <a href=http://www.xycoon.com/SumOfSquares.htm>here</a>. <p>\n+      *\n+      * At least two distinct data pairs (with at least two different x values)\n+      * must have been added before invoking this method. If this method is \n+      * invoked before a model can be estimated, <code>Double,NaN</code> is\n+      * returned.\n+      *\n+      * @return sum of squared errors associated with the regression model\n+      */\n+     public double getSumSquaredErrors() {\n+         return getSumSquaredErrors(getSlope());\n+     }\n+     \n+     /**\n+      * Returns the sum of squared deviations of the y values about their mean.\n+      * This is defined as SSTO \n+      * <a href=http://www.xycoon.com/SumOfSquares.htm>here</a>.\n+      * <p>\n+      * If n < 2, this returns NaN.\n+      *\n+      * @return sum of squared deviations of y values\n+      */\n+     public double getTotalSumSquares() {\n+         if (n < 2) {\n+             return Double.NaN;\n+         }\n+         return sumSqY - sumY*sumY/(double) n;\n+     }\n+         \n+     /**\n+      * Returns the sum of squared deviations of the predicted y values about \n+      * their mean (which equals the mean of y).\n+      * This is usually abbreviated SSR or SSM.  It is defined as SSM \n+      * <a href=http://www.xycoon.com/SumOfSquares.htm>here</a><p>\n+      *\n+      * At least two distinct data pairs (with at least two different x values)\n+      * must have been added before invoking this method. If this method is \n+      * invoked before a model can be estimated, <code>Double,NaN</code> is\n+      * returned.\n+      *\n+      * @return sum of squared deviations of y values\n+      */\n+     public double getRegressionSumSquares() {\n+         double b1 = getSlope();\n+         if (b1 == Double.NaN) {\n+             return b1;\n+         }\n+         return b1*(sumXY - sumX*sumY/(double) n);\n+     }\n+     \n+     /**\n+      * Returns the sum of squared errors divided by the degrees of freedom.\n+      * This is usually abbreviated MSE. <p>\n+      *\n+      * If there are fewer than <strong>three</strong> data pairs in the model,\n+      * or if there is no variation in x, this returns <code>NaN</code>.\n+      *\n+      * @return sum of squared deviations of y values\n+      */\n+     public double getMeanSquareError() {\n+         if (n < 3) {\n+             return Double.NaN;\n+         }\n+         double sse = getSumSquaredErrors();\n+         if (sse == Double.NaN) {\n+             return sse;\n+         }\n+         return sse/(double) (n - 2);\n+     }\n+     \n+     /**\n+      * Returns <a href=http://www.stt.msu.edu/~xiaoyimi/STT200/Lecture5.pdf>\n+      * Pearson's product moment correlation coefficient</a>.\n+      * This is usually denoted r. <p>\n+      *\n+      * At least two observations (with at least two different x values)\n+      * must have been added before invoking this method. If this method is \n+      * invoked before a model can be estimated, <code>Double,NaN</code> is\n+      * returned.\n+      *\n+      * @return Pearson's r\n+      */\n+     public double getR() {\n+         double b1 = getSlope();\n+         if (b1 == Double.NaN) {\n+             return b1;\n+         }\n+         double result = Math.sqrt(getRSquare(b1));\n+         if (b1 < 0) {\n+             result = -result;\n+         }\n+         return result;\n+     }\n+             \n+     /** \n+      * Returns the <a href=http://www.xycoon.com/coefficient1.htm> coefficient\n+      * of determination</a>.\n+      * This is usually denoted r-square. <p>\n+      *\n+      * At least two observaions (with at least two different x values)\n+      * must have been added before invoking this method. If this method is \n+      * invoked before a model can be estimated, <code>Double,NaN</code> is\n+      * returned.\n+      *\n+      * @return r-square\n+      */\n+     public double getRSquare() {\n+         return getRSquare(getSlope());\n+     }\n+     \n+         \n+     /**\n+      * Returns the <a href=http://www.xycoon.com/standarderrorb0.htm>standard\n+      * error of the intercept estimate</a>.\n+      * This is usually denoted s(b0). <p>\n+      *\n+      * If there are fewer that <strong>three</strong> observations in the model,\n+      * or if there is no variation in x, this returns <code>NaN</code>.\n+      *\n+      * @return standard error associated with intercept estimate\n+      */\n+     public double getInterceptStdErr() {\n+         double ssx = getSumSquaresX();\n+         if (ssx == Double.NaN) {\n+             return ssx;\n+         }\n+         return Math.sqrt(getMeanSquareError()*sumSqX/(((double) n)*ssx));\n+     }\n+             \n+     /**\n+      * Returns the <a http://www.xycoon.com/standerrorb(1).htm>standard\n+      * error of the slope estimate</a>.\n+      * This is usually denoted s(b1). <p>\n+      *\n+      * If there are fewer that <strong>three</strong> data pairs in the model,\n+      * or if there is no variation in x, this returns <code>NaN</code>.\n+      *\n+      * @return standard error associated with slope estimate\n+      */\n+     public double getSlopeStdErr() {\n+         double ssx = getSumSquaresX();\n+         if (ssx == Double.NaN) {\n+             return ssx;\n+         }\n+         return Math.sqrt(getMeanSquareError()/ssx);\n+     }\n+     \n+     // ---------------------Private methods-----------------------------------\n+     \n+     /**\n+     * Returns the intercept of the estimated regression line, given the slope.\n+     * Will return <code>NaN</code> if slope is <code>NaN</code>.\n+     *\n+     * @param slope current slope\n+     * @return the intercept of the regression line\n+     */\n+     private double getIntercept(double slope) {\n+         if (slope == Double.NaN) {\n+             return slope;\n+         }\n+         return (sumY - slope*sumX)/((double) n);\n+     }\n+       \n+     /**\n+      * Returns the sum of squared errors</a> associated with the regression \n+      * model, using the slope of the regression line.  Returns NaN if the slope\n+      * is NaN.\n+      *\n+      * @return sum of squared errors associated with the regression model\n+      */\n+     private double getSumSquaredErrors(double b1) {\n+         if (b1 == Double.NaN) {\n+             return b1;\n+         }\n+         double b0 = getIntercept(b1);\n+         return sumSqY - b0*sumY - b1*sumXY;\n+     } \n+     \n+     /**\n+      * Returns the sum of squared deviations of the x values about their mean.\n+      * <p>\n+      * If n < 2, this returns NaN.\n+      *\n+      * @return sum of squared deviations of x values\n+      */\n+     private double getSumSquaresX() {\n+         if (n < 2) {\n+             return Double.NaN;\n+         }\n+         return sumSqX - sumX*sumX/(double) n;\n+     }\n+     \n+     /** \n+      * Computes r-square from the slope.\n+      * will return NaN if slope is Nan\n+      *\n+      * @return r-square\n+      */\n+     private double getRSquare(double b1) {\n+         if (b1 == Double.NaN) {\n+             return b1;\n+         }\n+         double ssto = getTotalSumSquares();\n+         if (ssto == Double.NaN) {\n+             return ssto;\n+         }\n+         return (ssto - getSumSquaredErrors(b1))/ssto;\n+     }\n+}\n+\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/ListUnivariateImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+\n+/**\n+ * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n+ */\n+public class ListUnivariateImpl extends AbstractStoreUnivariate {\n+\n+    // Holds the value of the windowSize, initial windowSize is the constant\n+    // Univariate.INFINITE_WINDOW\n+    private int windowSize = Univariate.INFINITE_WINDOW;\n+\n+    // Holds a reference to a list - GENERICs are going to make\n+    // out lives easier here as we could only accept List<Number>\n+    List list;\n+\n+    public ListUnivariateImpl(List list) {\n+        this.list = list;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.StoreUnivariate#getValues()\n+     */\n+    public double[] getValues() {\n+\n+        int startIndex = 0;\n+        int endIndex = list.size() - 1;\n+        \n+\n+        // If the window size is not INFINITE_WINDOW AND\n+        // the current list is larger that the window size, we need to\n+        // take into account only the last n elements of the list\n+        // as definied by windowSize\n+        if (windowSize != Univariate.INFINITE_WINDOW &&\n+            windowSize < list.size()) {\n+            startIndex = (list.size() - 1) - windowSize;\n+        }\n+\n+        // Create an array to hold all values\n+        double[] copiedArray = new double[list.size() - startIndex];\n+\n+        for( int i = startIndex; i <= endIndex; i++ ) {\n+            Number n = (Number) getInternalIndex( i );\n+            copiedArray[i] = n.doubleValue();\n+            i++;\n+        }\n+\n+        return copiedArray;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.StoreUnivariate#getElement(int)\n+     */\n+    public double getElement(int index) {\n+\n+        double value = Double.NaN;\n+        if (windowSize != Univariate.INFINITE_WINDOW &&\n+            windowSize < list.size()) {\n+\n+            int calcIndex = (list.size() - windowSize) + index;\n+\n+            Number n = (Number) getInternalIndex(calcIndex);\n+            value = n.doubleValue();\n+        } else {\n+            Number n = (Number) getInternalIndex(index);\n+            value = n.doubleValue();\n+        }\n+        return value;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.Univariate#getN()\n+     */\n+    public int getN() {\n+        int N = 0;\n+\n+        if (windowSize != Univariate.INFINITE_WINDOW) {\n+            if (list.size() > windowSize) {\n+                N = windowSize;\n+            } else {\n+                N = list.size();\n+            }\n+        } else {\n+            N = list.size();\n+        }\n+        return N;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.Univariate#addValue(double)\n+     */\n+    public void addValue(double v) {\n+        list.add(new Double(v));\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.Univariate#clear()\n+     */\n+    public void clear() {\n+        list.clear();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.Univariate#getWindowSize()\n+     */\n+    public int getWindowSize() {\n+        return windowSize;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.Univariate#setWindowSize(int)\n+     */\n+    public void setWindowSize(int windowSize) {\n+        this.windowSize = windowSize;\n+    }\n+\n+    /**\n+     * This function exists to support the function of classes which \n+     * extend the ListUnivariateImpl.\n+     *\n+     * @param index The location of the value in the internal List\n+     * @return A Number object representing the value at a given \n+     *         index\n+     */\n+    protected Number getInternalIndex(int index) {\n+\n+        Number n = (Number) list.get( index );\n+        return n;\n+\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/StoreUnivariate.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+/**\n+ * StoreUnivariate implements the Univariate interface but maintains the set of values \n+ * which contribute to the values being returned.  This implementation of Univariate\n+ * provides additional functionality such as skewness, kurtosis, and mode.  This additional\n+ * functionality comes with a price of increased storage costs.\n+ * \n+ * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n+ */\n+public interface StoreUnivariate extends Univariate {\n+\n+    /**\n+     * A LEPTOKURTIC set has a positive kurtosis (a high peak) \n+     */\n+    public static int LEPTOKURTIC = 1;\n+\n+    /**\n+     * A MESOKURTIC set has a kurtosis of 0 - it is a normal distribution\n+     */\n+    public static int MESOKURTIC = 0;\n+\n+    /**\n+     * A PLATYKURTIC set has a negative kurtosis (a flat \"peak\")\n+     */\n+    public static int PLATYKURTIC = -1;\n+\n+    /** \n+     * Returns the mode of the values that have been added.  The mode is\n+     * the element which occurs with the most frequency\n+     * @return the mode\n+     */\n+    public abstract double getMode();\n+\n+    /** \n+     * Returns the skewness of a given distribution.  Skewness is a \n+     * measure of the assymetry of a given distribution. \n+     * \n+     * @return The skewness of this distribution\n+     */\n+    public abstract double getSkewness();\n+\n+    /** \n+     * Kurtosis is a measure of the \"peakedness\" of a distribution\n+     * \n+     * @return the mode\n+     */\n+    public abstract double getKurtosis();\n+\n+    /**\n+     * Returns the Kurtosis \"classification\" a distribution can be \n+     * leptokurtic (high peak), platykurtic (flat peak), \n+     * or mesokurtic (zero kurtosis).  \n+     * \n+     * @return A static constant defined in this interface, \n+     *         StoredDeviation.LEPTOKURITC, StoredDeviation.PLATYKURTIC, or \n+     *         StoredDeviation.MESOKURTIC\n+     */\n+    public abstract int getKurtosisClass();\n+\n+    /**\n+     * Returns the current set of values in an array of double primitives.  \n+     * The order of addition is preserved\n+     * \n+     * @return returns the current set of numbers in the order in which they \n+     *         were added to this set\n+     */\n+    public abstract double[] getValues();\n+\n+    /**\n+     * Returns the element at the specified index\n+     * \n+     * @return return the element at the specified index\n+     */\n+    public abstract double getElement(int index);\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import org.apache.commons.math.DoubleArray;\n+import org.apache.commons.math.ContractableDoubleArray;\n+\n+/**\n+ * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n+ */\n+public class StoreUnivariateImpl extends AbstractStoreUnivariate {\n+\n+    // Use an internal double array\n+    DoubleArray eDA;\n+\n+    // Store the windowSize\n+    private int windowSize = Univariate.INFINITE_WINDOW;\n+\n+    public StoreUnivariateImpl() {\n+        // A contractable double array is used.  memory is reclaimed when\n+        // the storage of the array becomes too empty.\n+        eDA = new ContractableDoubleArray();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.StoreUnivariate#getValues()\n+     */\n+    public double[] getValues() {\n+\n+        double[] copiedArray = new double[ eDA.getNumElements() ];\n+        System.arraycopy( eDA.getElements(), 0, \n+                          copiedArray, 0, eDA.getNumElements());\n+        return copiedArray;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.StoreUnivariate#getElement(int)\n+     */\n+    public double getElement(int index) {\n+        return eDA.getElement(index);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.Univariate#getN()\n+     */\n+    public int getN() {\n+        return eDA.getNumElements();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.Univariate#addValue(double)\n+     */\n+    public synchronized void addValue(double v) {\n+        if( windowSize != Univariate.INFINITE_WINDOW ) {\n+            if( getN() == windowSize ) {\n+                eDA.addElementRolling( v );\n+            } else if( getN() < windowSize ) {\n+                eDA.addElement(v);\n+            } else {\n+                String msg = \"A window Univariate had more element than \" +\n+\t\t\t\t\t\"the windowSize.  This is an inconsistent state.\";\n+                throw new RuntimeException( msg );\n+            }\n+        } else {\n+            eDA.addElement(v);\n+        }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.Univariate#clear()\n+     */\n+    public synchronized void clear() {\n+        eDA.clear();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.Univariate#getWindowSize()\n+     */\n+    public int getWindowSize() {\n+        return windowSize;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.Univariate#setWindowSize(int)\n+     */\n+    public synchronized void setWindowSize(int windowSize) {\n+        this.windowSize = windowSize;\n+\n+        // We need to check to see if we need to discard elements\n+        // from the front of the array.  If the windowSize is less than \n+        // the current number of elements.\n+        if( windowSize < eDA.getNumElements() ) {\n+            eDA.discardFrontElements( eDA.getNumElements() - windowSize);\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/Univariate.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+ package org.apache.commons.math.stat;\n+\n+/**\n+ *\n+ * Accumulates univariate statistics for values fed in \n+ * through the addValue() method. This interface defines the LCD interface\n+ * which all Univariate implementations must implement. <p>\n+ * A \"rolling\" capability is supported by all implementations with the following\n+ * contract: <p>\n+ * <i> Setting the windowSize property limits the domain of all statistics to\n+ * the last <code>windowSize</code> values added.</i><p>\n+ * We use the term <i>available values</i> throughout the API documentation\n+ * to refer to these values when the windowSize is set. For example, if the\n+ * windowSize is set to 3 and the values {1,2,3,4,5} have been added <strong>\n+ * in that order</strong> then the <i>available values</i> are {3,4,5} and all\n+ * reported statistics will be based on these values<p>\n+ * The default windowSize is \"infinite\" -- i.e., all values added are included\n+ * in all computations.\n+ *\n+ * @author Phil Steitz\n+ * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n+ * @author Mark Diggory\n+ * @version $Revision: 1.1 $ $Date: 2003/05/29 20:35:45 $\n+ * \n+*/\n+public interface Univariate {\n+\n+    /**\n+     * Adds the value to the set of numbers\n+     * @param v the value to be added \n+     */\n+    abstract void addValue(double v);\n+\n+    /** \n+     * Returns the <a href=http://www.xycoon.com/arithmetic_mean.htm>\n+     * arithmetic mean </a> of the available values <p>\n+     *\n+     * Will return Double.NaN if no values have been added when\n+     * this method is invoked.\n+     *\n+     * @return mean value\n+     */\n+    abstract double getMean();\n+\n+    /** \n+     * Returns the <a href=http://www.xycoon.com/geometric_mean.htm>\n+     * geometric mean </a> of the available values <p>\n+     *\n+     * Will return Double.NaN if no values have been added or the product\n+     * of the available values is less than or equal to 0.\n+     *\n+     * @return mean value\n+     */\n+    abstract double getGeometricMean();\n+\n+    /** \n+     * Returns the product of the available values <p>\n+     * Will return Double.NaN if no values have been added.\n+     *\n+     * @return product of all values\n+     */\n+    abstract double getProduct();\n+\n+    /** \n+     * Returns the variance of the available values. <p>\n+     * Double.NaN is returned for an empty set of values and 0.0 is \n+     * returned for a single value set. \n+     *\n+     * @return The variance of a set of values.  \n+     */\n+    abstract double getVariance();\n+\n+    /** \n+     * Returns the variance of the available values. <p>\n+     * Double.NaN is returned for an empty set of values and 0.0 is \n+     * returned for a single value set. \n+     *\n+     * @return standard deviation value\n+     */\n+    abstract double getStandardDeviation();\n+\n+\t/**\n+     * Returns the skewness of a given distribution.  Skewness is a \n+     * measure of the assymetry of a given distribution. <p>\n+\t * Double.NaN is returned for an empty set of values and 0.0 is \n+\t * returned for a value set &lt;=2. \n+\t * \n+\t * @return Value of property skewness.\n+\t */\n+\tabstract double getSkewness();\n+\t\n+\t/**\n+     * Returns the Kurtosis of the available values. Kurtosis is a \n+     * measure of the \"peakedness\" of a distribution <p>\n+     * Double.NaN is returned for an empty set of values and 0.0 is \n+     * returned for a value set &lt;=3. \n+     * \n+     * @return Value of property kurtosis.\n+\t */\n+\tabstract double getKurtosis();\n+\t\t\n+    /** \n+     * Returns the maximum of the available values <p>\n+     * Double.NaN is returned in no values have been added\n+     *\n+     * @return Value of property max.\n+     */\n+    abstract double getMax();\n+\n+     /** \n+     * Returns the minimum of the available values <p>\n+     * Double.NaN is returned in no values have been added\n+     *\n+     * @return Value of property min.\n+     */\n+    abstract double getMin();\n+\n+    /** \n+     * Returns the number of available values\n+     * @return the number of available values\n+     */\n+    abstract int getN();\n+\n+    /**\n+     * Returns the sum of the available values <p>\n+     * Returns 0 if no values have been added.\n+     *\n+     * @return the sum of the available values\n+     */\n+    abstract double getSum();\n+\n+    /**\n+     * Returns the sum of the squares of the available values.\n+     * Returns 0 if no values have been added.\n+     *\n+     * @return the sum of the squares of the available values.\n+     */\n+    abstract double getSumsq();\n+\n+    /** Resets all statistics */\n+    abstract void clear();\n+\n+    /**\n+     * This constant signals that a Univariate implementation\n+     * takes into account the contributions of an infinite number of\n+     * elements.  In other words, if getWindow returns this\n+     * constant, there is, in effect, no \"window\".\n+     */\n+    static final int INFINITE_WINDOW = -1;\n+\n+    /**\n+     * Univariate has the ability to return only measures for the\n+     * last N elements added to the set of values.  This function returns\n+     */\n+    abstract int getWindowSize();\n+\n+    /**\n+     * Sets the window.  windowSize controls the number of value\n+     * which contribute to the values returned by Univariate.  \n+     * For example, a window value of 10 means that getMean()\n+     * will return the mean of the last 10 values added.\n+     */\n+    abstract void setWindowSize(int windowSize);\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/UnivariateImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.math.DoubleArray;\n+import org.apache.commons.math.FixedDoubleArray;\n+\n+/**\n+ *\n+ * Accumulates univariate statistics for values fed in \n+ * through the addValue() method.  Does not store raw data values.\n+ * All data are represented internally as doubles.\n+ * Integers, floats and longs can be added, but will be converted\n+ * to doubles by addValue().  \n+ *\n+ * @author Phil Steitz\n+ * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n+ * @author Mark Diggory\n+ * @author Brent Worden\n+ * @version $Revision: 1.1 $ $Date: 2003/05/29 20:35:45 $\n+ * \n+*/\n+public class UnivariateImpl implements Univariate, Serializable {\n+\n+    /** hold the window size **/\n+    private int windowSize = Univariate.INFINITE_WINDOW;\n+\n+    /** Just in case, the windowSize is not inifinite, we need to\n+     *   keep an array to remember values 0 to N\n+     */\n+    private DoubleArray doubleArray;\n+\n+    /** running sum of values that have been added */\n+    private double sum = 0.0;\n+\n+    /** running sum of squares that have been added */\n+    private double sumsq = 0.0;\n+\n+\t/** running sum of 3rd powers that have been added */\n+\tprivate double sumCube = 0.0;\n+\t\n+\t/** running sum of 4th powers that have been added */\n+\tprivate double sumQuad = 0.0;\n+\t\n+    /** count of values that have been added */\n+    private int n = 0;\n+\n+    /** min of values that have been added */\n+    private double min = Double.MAX_VALUE;\n+\n+    /** max of values that have been added */\n+    private double max = Double.MIN_VALUE;\n+\n+    /** product of values that have been added */\n+    private double product = Double.NaN;\n+\n+    /** Creates new univariate */\n+    public UnivariateImpl() {\n+        clear();\n+    }\n+    \n+    /** Create a new univariate with a fixed window **/\n+    public UnivariateImpl(int window) {\n+        windowSize = window;\n+        doubleArray = new FixedDoubleArray( window );\n+    }\n+\n+     \n+    public void addValue(double v) {\n+\n+        insertValue(v);\n+    }\n+\n+    \n+    public double getMean() {\n+        if (n == 0) {\n+            return Double.NaN;\n+        } else {\n+            return (sum / (double) n );\n+        }\n+     }\n+\n+     \n+    public double getGeometricMean() {\n+        if ((product <= 0.0) || (n == 0)) {\n+            return Double.NaN; \n+        } else {\n+            return Math.pow(product,( 1.0/(double)n ) );\n+        }\n+    }\n+\n+    \n+    public double getProduct() {\n+        return product;\n+    }\n+\n+     \n+    public double getVariance() {\n+        double variance = Double.NaN;\n+\n+        if( n == 1 ) {\n+            variance = 0.0;\n+        } else if( n > 1 ) {\n+            double xbar = getMean();\n+            variance =  (sumsq - xbar*xbar*((double) n))/(((double) n)-1);\n+        }\n+\n+        return variance;\n+    }\n+\n+    \n+    public double getStandardDeviation() {\n+        double variance = getVariance();\n+        if ((variance == 0.0) || (variance == Double.NaN)) {\n+            return variance;\n+        } else {\n+            return Math.sqrt(variance);\n+        }\n+    }\n+   \n+   \n+\t/**\n+\t * Returns the skewness of the values that have been added as described by\n+     * <a href=http://mathworld.wolfram.com/k-Statistic.html>Equation (6) for k-Statistics</a>.\n+     * \n+\t * @return The skew of a set of values.  Double.NaN is returned for\n+\t *         an empty set of values and 0.0 is returned for a &lt;= 2 value set.\n+\t */\n+\tpublic double getSkewness() {\n+\t\t\n+\t\tif( n < 1) return Double.NaN;\n+\t\tif( n <= 2 ) return 0.0;                  \n+\t\t\t\n+\t\treturn ( 2*Math.pow(sum,3) - 3*sum*sumsq + ((double)n)*((double)n)*sumCube ) / \n+\t\t\t   ( ((double)n)*(((double)n)-1)*(((double)n)-2));  \n+\t}\n+\t\n+\t/**\n+\t * Returns the kurtosis of the values that have been added as described by\n+     * <a href=http://mathworld.wolfram.com/k-Statistic.html>Equation (7) for k-Statistics</a>.\n+     * \n+\t * @return The kurtosis of a set of values.  Double.NaN is returned for\n+\t *         an empty set of values and 0.0 is returned for a &lt;= 3 value set.\n+\t */\n+\tpublic double getKurtosis() {\n+\t\t\n+\t\tif( n < 1) return Double.NaN;\n+\t\tif( n <= 3 ) return 0.0;\n+\t\t\n+\t\tdouble x1 = -6*Math.pow(sum,4);\n+\t\tdouble x2 = 12*((double)n)*Math.pow(sum,2)*sumsq;\n+\t\tdouble x3 = -3*((double)n)*(((double)n)-1)*Math.pow(sumsq,2);\n+\t\tdouble x4 = -4*((double)n)*(((double)n)+1)*sum*sumCube;\n+\t\tdouble x5 = Math.pow(((double)n),2)*(((double)n)+1)*sumQuad;\n+\t\treturn (x1 + x2 + x3 + x4 + x5) / \n+\t\t       (((double)n)*(((double)n)-1)*(((double)n)-2)*(((double)n)-3));\n+\t} \n+\t\n+    private void insertValue(double v) {\n+\n+        // The default value of product is NaN, if you\n+        // try to retrieve the product for a univariate with\n+        // no values, we return NaN.\n+        //\n+        // If this is the first call to insertValue, we want\n+        // to set product to 1.0, so that our first element\n+        // is not \"cancelled\" out by the NaN.\n+        if( n == 0 ) {\n+            product = 1.0;\n+        }\n+\n+        if( windowSize != Univariate.INFINITE_WINDOW ) {\n+            if( windowSize == n ) {\n+                double discarded = doubleArray.addElementRolling( v );\n+\n+                // Remove the influence of the discarded\n+                sum -= discarded;\n+                sumsq -= discarded * discarded;\n+\t\t\t\tsumCube -= Math.pow(discarded,3);\n+\t\t\t\tsumQuad -= Math.pow(discarded,4); \n+\t\t\t\t\n+                if(discarded == min) {\n+                    min = doubleArray.getMin();\n+                } else {\n+                    if(discarded == max){\n+                    max = doubleArray.getMax();\n+                    }\n+                } \n+                \n+                if(product != 0.0){\n+                    // can safely remove discarded value\n+                    product *= v/discarded;\n+                } else if(discarded == 0.0){\n+                    // need to recompute product\n+                    product = 1.0;\n+                    double[] elements = doubleArray.getElements();\n+                    for( int i = 0; i < elements.length; i++ ) {\n+                    \tproduct *= elements[i];\n+                    }\n+                } // else product = 0 and will still be 0 after discard\n+\n+            } else {\n+                doubleArray.addElement( v );        \t\n+                n += 1.0;\n+                if (v < min) min = v;\n+                if (v > max) max = v;\n+                product *= v;\n+            }\n+        } else {\n+            // If the windowSize is inifinite please don't take the time to\n+            // worry about storing any values.  We don't need to discard the\n+            // influence of any single item.\n+            n += 1.0;\n+            if (v < min) min = v;\n+            if (v > max) max = v;\n+            product *= v;\n+        }\n+        \n+\t\tsum += v;\n+\t\tsumsq += v*v;\n+\t\tsumCube += Math.pow(v,3);\n+\t\tsumQuad += Math.pow(v,4);\n+    }\n+\n+    /** Getter for property max.\n+     * @return Value of property max.\n+     */\n+    public double getMax() {\n+        if (n == 0) { \n+            return Double.NaN;\n+        } else {\n+            return max;\n+        }\n+    }\n+\n+    /** Getter for property min.\n+     * @return Value of property min.\n+     */\n+    public double getMin() {\n+        if (n == 0) { \n+            return Double.NaN;\n+        } else {\n+            return min;\n+        }\n+    }\n+\n+    /** Getter for property n.\n+     * @return Value of property n.\n+     */\n+    public int getN() {\n+        return n;\n+    }\n+\n+    /** Getter for property sum.\n+     * @return Value of property sum.\n+     */\n+    public double getSum() {\n+        return sum;\n+    }\n+\n+    /** Getter for property sumsq.\n+     * @return Value of property sumsq.\n+     */\n+    public double getSumsq() {\n+        return sumsq;\n+    }\n+\n+\t/** Getter for property sumCube.\n+\t * @return Value of property sumCube.\n+\t */\n+\tpublic double getSumCube() {\n+\t\treturn sumCube;\n+\t}\n+\t\n+\t/** Getter for property sumQuad.\n+\t * @return Value of property sumQuad.\n+\t */\n+\tpublic double getSumQuad() {\n+\t\treturn sumQuad;\n+\t}\n+\t\n+    /**\n+     * Generates a text report displaying \n+     * univariate statistics from values that\n+     * have been added.\n+     * @return String with line feeds displaying statistics\n+     */\n+    public String toString() {\n+        StringBuffer outBuffer = new StringBuffer();\n+        outBuffer.append(\"UnivariateImpl:\\n\");\n+        outBuffer.append(\"n: \" + n + \"\\n\");\n+        outBuffer.append(\"min: \" + min + \"\\n\");\n+        outBuffer.append(\"max: \" + max + \"\\n\");\n+        outBuffer.append(\"mean: \" + getMean() + \"\\n\");\n+        outBuffer.append(\"std dev: \" + getStandardDeviation() + \"\\n\");\n+\t\toutBuffer.append(\"skewness: \" + getSkewness() + \"\\n\");\n+\t\toutBuffer.append(\"kurtosis: \" + getKurtosis() + \"\\n\");\n+        return outBuffer.toString();\n+    }\n+    \n+    /** Resets all sums to 0, resets min and max */\n+    public void clear() {\n+        this.sum = this.sumsq = this.sumCube = this.sumQuad = 0.0;\n+        this.n = 0;\n+        this.min = Double.MAX_VALUE;\n+        this.max = Double.MIN_VALUE;\n+        this.product = Double.NaN;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.Univariate#getWindowSize()\n+     */\n+    public int getWindowSize() {\n+        return windowSize;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.Univariate#setWindowSize(int)\n+     */\n+    public void setWindowSize(int windowSize) {\n+        String msg = \"A fixed window size must be set via the \" +\n+            \"UnivariateImpl constructor\";\n+        throw new RuntimeException( msg );\n+    }\n+}\n--- a/src/test/org/apache/commons/math/EmpiricalDistributionTest.java\n+++ b/src/test/org/apache/commons/math/EmpiricalDistributionTest.java\n import java.io.File;\n import java.net.URL;\n \n+import org.apache.commons.math.stat.Univariate;\n+import org.apache.commons.math.stat.UnivariateImpl;\n+\n /**\n  * Test cases for the EmpiricalDistribution class\n  *\n  * @author Phil Steitz\n- * @version $Revision: 1.1 $ $Date: 2003/05/21 14:21:15 $\n+ * @version $Revision: 1.2 $ $Date: 2003/05/29 20:35:45 $\n  */\n \n public final class EmpiricalDistributionTest extends TestCase {\n--- a/src/test/org/apache/commons/math/RandomDataTest.java\n+++ b/src/test/org/apache/commons/math/RandomDataTest.java\n import java.security.NoSuchAlgorithmException;\n import java.util.Collection;\n import java.util.HashSet;\n+\n+import org.apache.commons.math.stat.Univariate;\n+import org.apache.commons.math.stat.UnivariateImpl;\n+\n /**\n  * Test cases for the RandomData class.\n  *\n  * @author Phil Steitz\n- * @version $Revision: 1.3 $ $Date: 2003/05/29 19:45:35 $\n+ * @version $Revision: 1.4 $ $Date: 2003/05/29 20:35:45 $\n  */\n \n public final class RandomDataTest extends TestCase {\n--- a/src/test/org/apache/commons/math/ValueServerTest.java\n+++ b/src/test/org/apache/commons/math/ValueServerTest.java\n import junit.framework.TestSuite;\n import junit.framework.AssertionFailedError;\n import java.net.URL;\n+\n+import org.apache.commons.math.stat.Univariate;\n+import org.apache.commons.math.stat.UnivariateImpl;\n  \n /**\n  * Test cases for the ValueServer class.\n  *\n  * @author  Phil Steitz\n- * @version $Revision: 1.2 $\n+ * @version $Revision: 1.3 $\n  */\n \n public final class ValueServerTest extends TestCase {\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.math.beans.*;\n+\n+/**\n+ * Test cases for the {@link BeanListUnivariateImpl} class.\n+ *\n+ * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n+ * @version $Revision: 1.1 $ $Date: 2003/05/29 20:35:46 $\n+ */\n+\n+public final class BeanListUnivariateImplTest extends TestCase {\n+    \n+    private List patientList = null;\n+    private double tolerance = Double.MIN_VALUE;\n+    \n+    public BeanListUnivariateImplTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() {  \n+        patientList = new ArrayList();\n+\n+        // Create and add patient bean 1\n+        VitalStats vs1 = new VitalStats( new Double(120.0), \n+                                         new Double(96.4) );\n+        Patient p1 = new Patient( vs1, new Integer( 35 ) );\n+        patientList.add( p1 );\n+\n+        // Create and add patient bean 2\n+        VitalStats vs2 = new VitalStats( new Double(70.0), \n+                                         new Double(97.4) );\n+        Patient p2 = new Patient( vs2, new Integer( 23 ) );\n+        patientList.add( p2 );\n+\n+        // Create and add patient bean 3\n+        VitalStats vs3 = new VitalStats( new Double(90.0), \n+                                         new Double(98.6) );\n+        Patient p3 = new Patient( vs3, new Integer( 42 ) );\n+        patientList.add( p3 );\n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(BeanListUnivariateImplTest.class);\n+        suite.setName(\"Freq Tests\");\n+        return suite;\n+    }\n+    \n+    /** test stats */\n+    public void testStats() {\n+    \t\n+        StoreUnivariate u = new BeanListUnivariateImpl( patientList ); \n+\n+        assertEquals(\"total count\",3,u.getN(),tolerance);\n+\n+        u.clear();\n+        assertEquals(\"total count\",0,u.getN(),tolerance);    \n+    }     \n+    \n+    public void testPropStats() {\n+\n+        StoreUnivariate heartU = new BeanListUnivariateImpl( patientList,\n+                                          \"vitalStats.heartRate\" );\n+\n+        \n+\n+        assertEquals( \"Mean heart rate unexpected\", 93.333, \n+                      heartU.getMean(), 0.001 );\n+        assertEquals( \"Max heart rate unexpected\", 120.0, \n+                      heartU.getMax(), 0.001 );\n+\n+        StoreUnivariate ageU = new BeanListUnivariateImpl( patientList,\n+                                                           \"age\" );\n+\n+        assertEquals( \"Mean age unexpected\", 33.333,\n+                      ageU.getMean(), 0.001 );\n+        assertEquals( \"Max age unexpected\", 42.0,\n+                      ageU.getMax(), 0.001 );\n+\n+    }\n+\n+    /*    public void testN0andN1Conditions() throws Exception {\n+    \tList list = new ArrayList();\n+    \t\n+    \tStoreUnivariate u = new ListUnivariateImpl( list );\n+    \t    \t\n+\t\tassertTrue(\"Mean of n = 0 set should be NaN\", Double.isNaN( u.getMean() ) );\n+\t\tassertTrue(\"Standard Deviation of n = 0 set should be NaN\", Double.isNaN( u.getStandardDeviation() ) );\n+\t\tassertTrue(\"Variance of n = 0 set should be NaN\", Double.isNaN(u.getVariance() ) );\n+\n+\t\tlist.add( new Double(one));\n+\n+\t\tassertTrue( \"Mean of n = 1 set should be value of single item n1\", u.getMean() == one);\n+\t\tassertTrue( \"StdDev of n = 1 set should be zero, instead it is: \" + u.getStandardDeviation(), u.getStandardDeviation() == 0);\n+\t\tassertTrue( \"Variance of n = 1 set should be zero\", u.getVariance() == 0);\t\n+    }\n+    \n+    public void testSkewAndKurtosis() {\n+    \tStoreUnivariate u = new StoreUnivariateImpl();\n+    \t\n+    \tdouble[] testArray = { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,\n+  \t  \t\t\t\t\t\t\t\t\t\t 9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };\n+  \t  \tfor( int i = 0; i < testArray.length; i++) {\n+  \t  \t\tu.addValue( testArray[i]);\n+  \t  \t}\n+  \t  \t\n+\t\tassertEquals(\"mean\", 12.40455, u.getMean(), 0.0001);\n+\t\tassertEquals(\"variance\", 10.00236, u.getVariance(), 0.0001);\n+\t\tassertEquals(\"skewness\", 1.437424, u.getSkewness(), 0.0001);\n+  \t  \tassertEquals(\"kurtosis\", 2.37719, u.getKurtosis(), 0.0001);\n+    }\n+\n+    public void testProductAndGeometricMean() throws Exception {\n+    \tListUnivariateImpl u = new ListUnivariateImpl(new ArrayList());\n+        u.setWindowSize(10);\n+    \t    \t\n+        u.addValue( 1.0 );\n+        u.addValue( 2.0 );\n+        u.addValue( 3.0 );\n+        u.addValue( 4.0 );\n+\n+        assertEquals( \"Product not expected\", 24.0, u.getProduct(), Double.MIN_VALUE );\n+        assertEquals( \"Geometric mean not expected\", 2.213364, u.getGeometricMean(), 0.00001 );\n+\n+        // Now test rolling - UnivariateImpl should discount the contribution\n+        // of a discarded element\n+        for( int i = 0; i < 10; i++ ) {\n+            u.addValue( i + 2 );\n+        }\n+        // Values should be (2,3,4,5,6,7,8,9,10,11)\n+        \n+        assertEquals( \"Product not expected\", 39916800.0, u.getProduct(), 0.00001 );\n+        assertEquals( \"Geometric mean not expected\", 5.755931, u.getGeometricMean(), 0.00001 );\n+\n+\n+        } */\n+\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/BivariateRegressionTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+/**\n+ * Test cases for the TestStatistic class.\n+ *\n+ * @author Phil Steitz\n+ * @version $Revision: 1.1 $ $Date: 2003/05/29 20:35:46 $\n+ */\n+\n+public final class BivariateRegressionTest extends TestCase {\n+\n+    /* \n+     * NIST \"Norris\" refernce data set from \n+     * http://www.itl.nist.gov/div898/strd/lls/data/LINKS/DATA/Norris.dat\n+     * Strangely, order is {y,x}\n+     */\n+    private double[][] data = {{0.1,0.2},{338.8,337.4},{118.1,118.2},\n+        {888.0,884.6},{9.2,10.1},{228.1,226.5},{668.5,666.3},{998.5,996.3},\n+        {449.1,448.6},{778.9,777.0},{559.2,558.2},{0.3,0.4},{0.1,0.6},\n+        {778.1,775.5},{668.8,666.9},{339.3,338.0},{448.9,447.5},{10.8,11.6},\n+        {557.7,556.0},{228.3,228.1},{998.0,995.8},{888.8,887.6},{119.6,120.2},\n+        {0.3,0.3},{0.6,0.3},{557.6,556.8},{339.3,339.1},{888.0,887.2},\n+        {998.5,999.0},{778.9,779.0},{10.2,11.1},{117.6,118.3},{228.9,229.2},\n+        {668.4,669.1},{449.2,448.9},{0.2,0.5}}; \n+        \n+    /* \n+     * Correlation example from \n+     * http://www.xycoon.com/correlation.htm\n+     */\n+    private double[][] corrData = {{101.0,99.2},{100.1,99.0},{100.0,100.0},\n+        {90.6,111.6},{86.5,122.2},{89.7,117.6},{90.6,121.1},{82.8,136.0},\n+        {70.1,154.2},{65.4,153.6},{61.3,158.5},{62.5,140.6},{63.6,136.2},\n+        {52.6,168.0},{59.7,154.3},{59.5,149.0},{61.3,165.5}};\n+    \n+    public BivariateRegressionTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() { \n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(BivariateRegressionTest.class);\n+        suite.setName(\"BivariateRegression Tests\");\n+        return suite;\n+    }\n+    \n+    public void testNorris() {\n+       BivariateRegression regression = new BivariateRegression();\n+       for (int i = 0; i < data.length; i++) {\n+           regression.addData(data[i][1],data[i][0]);\n+       }\n+       assertEquals(\"slope\",1.00211681802045, \n+            regression.getSlope(),10E-12);\n+       assertEquals(\"slope std err\",0.429796848199937E-03, \n+            regression.getSlopeStdErr(),10E-12);\n+       assertEquals(\"number of observations\",36,regression.getN());\n+       assertEquals(\"intercept\", -0.262323073774029,\n+            regression.getIntercept(),10E-12);\n+       assertEquals(\"std err intercept\", 0.232818234301152, \n+            regression.getInterceptStdErr(),10E-12);\n+       assertEquals(\"r-square\",0.999993745883712,\n+            regression.getRSquare(),10E-12);\n+       assertEquals(\"SSR\",4255954.13232369, \n+            regression.getRegressionSumSquares(),10E-8);\n+       assertEquals(\"MSE\",0.782864662630069, \n+            regression.getMeanSquareError(),10E-8);\n+       assertEquals(\"SSE\",26.6173985294224, \n+            regression.getSumSquaredErrors(),10E-8);\n+       assertEquals(\"predict(0)\",-0.262323073774029,\n+            regression.predict(0),10E-12);\n+       assertEquals(\"predict(1)\",1.00211681802045-0.262323073774029,\n+            regression.predict(1),10E-11);\n+    }\n+    \n+    public void testCorr() {\n+       BivariateRegression regression = new BivariateRegression();\n+       regression.addData(corrData);\n+       assertEquals(\"number of observations\",17,regression.getN());\n+       assertEquals(\"r-square\",.896123,\n+            regression.getRSquare(),10E-6);\n+       assertEquals(\"r\",-.946638, \n+            regression.getR(),10E-6);\n+    }  \n+    \n+    public void testNaNs() {\n+        \n+        BivariateRegression regression = new BivariateRegression();\n+        \n+        assertTrue(\"intercept not NaN\",Double.isNaN(regression.getIntercept()));\n+        assertTrue(\"slope not NaN\",Double.isNaN(regression.getSlope()));\n+        assertTrue(\"slope std err not NaN\",\n+            Double.isNaN(regression.getSlopeStdErr()));\n+        assertTrue(\"intercept std err not NaN\",\n+            Double.isNaN(regression.getInterceptStdErr()));\n+        assertTrue(\"MSE not NaN\",Double.isNaN(regression.getMeanSquareError()));\n+        assertTrue(\"e not NaN\",Double.isNaN(regression.getR()));\n+        assertTrue(\"r-square not NaN\",Double.isNaN(regression.getRSquare()));\n+        assertTrue(\"RSS not NaN\",\n+            Double.isNaN(regression.getRegressionSumSquares()));\n+        assertTrue(\"SSE not NaN\",Double.isNaN(regression.getSumSquaredErrors()));\n+        assertTrue(\"SSTO not NaN\",Double.isNaN(regression.getTotalSumSquares()));\n+        assertTrue(\"predict not NaN\",Double.isNaN(regression.predict(0)));\n+        \n+        regression.addData(1,2);\n+        regression.addData(1,3);\n+        \n+        // No x variation, so these should still blow...\n+        assertTrue(\"intercept not NaN\",Double.isNaN(regression.getIntercept()));\n+        assertTrue(\"slope not NaN\",Double.isNaN(regression.getSlope()));\n+        assertTrue(\"slope std err not NaN\",\n+            Double.isNaN(regression.getSlopeStdErr()));\n+        assertTrue(\"intercept std err not NaN\",\n+            Double.isNaN(regression.getInterceptStdErr()));\n+        assertTrue(\"MSE not NaN\",Double.isNaN(regression.getMeanSquareError()));\n+        assertTrue(\"e not NaN\",Double.isNaN(regression.getR()));\n+        assertTrue(\"r-square not NaN\",Double.isNaN(regression.getRSquare()));\n+        assertTrue(\"RSS not NaN\",\n+            Double.isNaN(regression.getRegressionSumSquares()));\n+        assertTrue(\"SSE not NaN\",Double.isNaN(regression.getSumSquaredErrors()));\n+        assertTrue(\"predict not NaN\",Double.isNaN(regression.predict(0)));\n+        \n+        // but SSTO should be OK\n+         assertTrue(\"SSTO NaN\",!Double.isNaN(regression.getTotalSumSquares()));\n+        \n+        regression = new BivariateRegression();\n+        \n+        regression.addData(1,2);\n+        regression.addData(3,3);\n+        \n+        // All should be OK except MSE, s(b0), s(b1) which need one more df \n+        assertTrue(\"interceptNaN\",!Double.isNaN(regression.getIntercept()));\n+        assertTrue(\"slope NaN\",!Double.isNaN(regression.getSlope()));\n+        assertTrue(\"slope std err not NaN\",\n+            Double.isNaN(regression.getSlopeStdErr()));\n+        assertTrue(\"intercept std err not NaN\",\n+            Double.isNaN(regression.getInterceptStdErr()));\n+        assertTrue(\"MSE not NaN\",Double.isNaN(regression.getMeanSquareError()));\n+        assertTrue(\"r NaN\",!Double.isNaN(regression.getR()));\n+        assertTrue(\"r-square NaN\",!Double.isNaN(regression.getRSquare()));\n+        assertTrue(\"RSS NaN\",\n+            !Double.isNaN(regression.getRegressionSumSquares()));\n+        assertTrue(\"SSE NaN\",!Double.isNaN(regression.getSumSquaredErrors()));\n+        assertTrue(\"SSTO NaN\",!Double.isNaN(regression.getTotalSumSquares()));\n+        assertTrue(\"predict NaN\",!Double.isNaN(regression.predict(0)));\n+        \n+        regression.addData(1,4);\n+        \n+        // MSE, MSE, s(b0), s(b1) should all be OK now\n+        assertTrue(\"MSE NaN\",!Double.isNaN(regression.getMeanSquareError()));\n+        assertTrue(\"slope std err NaN\",\n+            !Double.isNaN(regression.getSlopeStdErr()));\n+        assertTrue(\"intercept std err NaN\",\n+            !Double.isNaN(regression.getInterceptStdErr()));\n+    }\n+    \n+    public void testClear() {\n+       BivariateRegression regression = new BivariateRegression();\n+       regression.addData(corrData);\n+       assertEquals(\"number of observations\",17,regression.getN());\n+       regression.clear();\n+       assertEquals(\"number of observations\",0,regression.getN());\n+       regression.addData(corrData);\n+       assertEquals(\"r-square\",.896123,regression.getRSquare(),10E-6);\n+       regression.addData(data);\n+       assertEquals(\"number of observations\",53,regression.getN());\n+    }\n+                    \n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test cases for the {@link Univariate} class.\n+ *\n+ * @author <a href=\"mailto:phil@steitz.com\">Phil Steitz</a>\n+ * @version $Revision: 1.1 $ $Date: 2003/05/29 20:35:46 $\n+ */\n+\n+public final class ListUnivariateImplTest extends TestCase {\n+    private double one = 1;\n+    private float two = 2;\n+    private int three = 3;\n+\n+    private double mean = 2;\n+    private double sumSq = 18;\n+    private double sum = 8;\n+    private double var = 0.666666666666666666667;\n+    private double std = Math.sqrt(var);\n+    private double n = 4;\n+    private double min = 1;\n+    private double max = 3;\n+    private double skewness = 0;\n+    private double kurtosis = 0.5;\n+    private int kClass = StoreUnivariate.LEPTOKURTIC;\n+    private double tolerance = 10E-15;\n+    \n+    public ListUnivariateImplTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() {  \n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(ListUnivariateImplTest.class);\n+        suite.setName(\"Freq Tests\");\n+        return suite;\n+    }\n+    \n+    /** test stats */\n+    public void testStats() {\n+    \tList externalList = new ArrayList();\n+    \t\n+        StoreUnivariate u = new ListUnivariateImpl( externalList ); \n+\n+        assertEquals(\"total count\",0,u.getN(),tolerance);\n+        u.addValue(one);\n+        u.addValue(two);\n+        u.addValue(two);\n+        u.addValue(three);\n+        assertEquals(\"N\",n,u.getN(),tolerance);\n+        assertEquals(\"sum\",sum,u.getSum(),tolerance);\n+        assertEquals(\"sumsq\",sumSq,u.getSumsq(),tolerance);\n+        assertEquals(\"var\",var,u.getVariance(),tolerance);\n+        assertEquals(\"std\",std,u.getStandardDeviation(),tolerance);\n+        assertEquals(\"mean\",mean,u.getMean(),tolerance);\n+        assertEquals(\"min\",min,u.getMin(),tolerance);\n+        assertEquals(\"max\",max,u.getMax(),tolerance);\n+        u.clear();\n+        assertEquals(\"total count\",0,u.getN(),tolerance);    \n+    }     \n+    \n+    public void testN0andN1Conditions() throws Exception {\n+    \tList list = new ArrayList();\n+    \t\n+    \tStoreUnivariate u = new ListUnivariateImpl( list );\n+    \t    \t\n+\t\tassertTrue(\"Mean of n = 0 set should be NaN\", Double.isNaN( u.getMean() ) );\n+\t\tassertTrue(\"Standard Deviation of n = 0 set should be NaN\", Double.isNaN( u.getStandardDeviation() ) );\n+\t\tassertTrue(\"Variance of n = 0 set should be NaN\", Double.isNaN(u.getVariance() ) );\n+\n+\t\tlist.add( new Double(one));\n+\n+\t\tassertTrue( \"Mean of n = 1 set should be value of single item n1\", u.getMean() == one);\n+\t\tassertTrue( \"StdDev of n = 1 set should be zero, instead it is: \" + u.getStandardDeviation(), u.getStandardDeviation() == 0);\n+\t\tassertTrue( \"Variance of n = 1 set should be zero\", u.getVariance() == 0);\t\n+    }\n+    \n+    public void testSkewAndKurtosis() {\n+    \tStoreUnivariate u = new StoreUnivariateImpl();\n+    \t\n+    \tdouble[] testArray = { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,\n+  \t  \t\t\t\t\t\t\t\t\t\t 9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };\n+  \t  \tfor( int i = 0; i < testArray.length; i++) {\n+  \t  \t\tu.addValue( testArray[i]);\n+  \t  \t}\n+  \t  \t\n+\t\tassertEquals(\"mean\", 12.40455, u.getMean(), 0.0001);\n+\t\tassertEquals(\"variance\", 10.00236, u.getVariance(), 0.0001);\n+\t\tassertEquals(\"skewness\", 1.437424, u.getSkewness(), 0.0001);\n+  \t  \tassertEquals(\"kurtosis\", 2.37719, u.getKurtosis(), 0.0001);\n+    }\n+\n+    public void testProductAndGeometricMean() throws Exception {\n+    \tListUnivariateImpl u = new ListUnivariateImpl(new ArrayList());\n+        u.setWindowSize(10);\n+    \t    \t\n+        u.addValue( 1.0 );\n+        u.addValue( 2.0 );\n+        u.addValue( 3.0 );\n+        u.addValue( 4.0 );\n+\n+        assertEquals( \"Product not expected\", 24.0, u.getProduct(), Double.MIN_VALUE );\n+        assertEquals( \"Geometric mean not expected\", 2.213364, u.getGeometricMean(), 0.00001 );\n+\n+        // Now test rolling - UnivariateImpl should discount the contribution\n+        // of a discarded element\n+        for( int i = 0; i < 10; i++ ) {\n+            u.addValue( i + 2 );\n+        }\n+        // Values should be (2,3,4,5,6,7,8,9,10,11)\n+        \n+        assertEquals( \"Product not expected\", 39916800.0, u.getProduct(), 0.00001 );\n+        assertEquals( \"Geometric mean not expected\", 5.755931, u.getGeometricMean(), 0.00001 );\n+\n+\n+    }\n+\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test cases for the {@link Univariate} class.\n+ *\n+ * @author <a href=\"mailto:phil@steitz.com\">Phil Steitz</a>\n+ * @version $Revision: 1.1 $ $Date: 2003/05/29 20:35:46 $\n+ */\n+\n+public final class StoreUnivariateImplTest extends TestCase {\n+    private double one = 1;\n+    private float two = 2;\n+    private int three = 3;\n+    private double mean = 2;\n+    private double sumSq = 18;\n+    private double sum = 8;\n+    private double var = 0.666666666666666666667;\n+    private double std = Math.sqrt(var);\n+    private double n = 4;\n+    private double min = 1;\n+    private double max = 3;\n+    private double skewness = 0;\n+    private double kurtosis = 0.5;\n+    private int kClass = StoreUnivariate.LEPTOKURTIC;\n+    private double tolerance = 10E-15;\n+    \n+    public StoreUnivariateImplTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() {  \n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(StoreUnivariateImplTest.class);\n+        suite.setName(\"Freq Tests\");\n+        return suite;\n+    }\n+    \n+    /** test stats */\n+    public void testStats() {\n+        StoreUnivariate u = new StoreUnivariateImpl(); \n+        assertEquals(\"total count\",0,u.getN(),tolerance);\n+        u.addValue(one);\n+        u.addValue(two);\n+        u.addValue(two);\n+        u.addValue(three);\n+        assertEquals(\"N\",n,u.getN(),tolerance);\n+        assertEquals(\"sum\",sum,u.getSum(),tolerance);\n+        assertEquals(\"sumsq\",sumSq,u.getSumsq(),tolerance);\n+        assertEquals(\"var\",var,u.getVariance(),tolerance);\n+        assertEquals(\"std\",std,u.getStandardDeviation(),tolerance);\n+        assertEquals(\"mean\",mean,u.getMean(),tolerance);\n+        assertEquals(\"min\",min,u.getMin(),tolerance);\n+        assertEquals(\"max\",max,u.getMax(),tolerance);\n+        u.clear();\n+        assertEquals(\"total count\",0,u.getN(),tolerance);    \n+    }     \n+    \n+    public void testN0andN1Conditions() throws Exception {\n+    \tStoreUnivariate u = new StoreUnivariateImpl();\n+    \t    \t\n+\t\tassertTrue(\"Mean of n = 0 set should be NaN\", Double.isNaN( u.getMean() ) );\n+\t\tassertTrue(\"Standard Deviation of n = 0 set should be NaN\", Double.isNaN( u.getStandardDeviation() ) );\n+\t\tassertTrue(\"Variance of n = 0 set should be NaN\", Double.isNaN(u.getVariance() ) );\n+\n+\t\tu.addValue(one);\n+\n+\t\tassertTrue( \"Mean of n = 1 set should be value of single item n1\", u.getMean() == one);\n+\t\tassertTrue( \"StdDev of n = 1 set should be zero, instead it is: \" + u.getStandardDeviation(), u.getStandardDeviation() == 0);\n+\t\tassertTrue( \"Variance of n = 1 set should be zero\", u.getVariance() == 0);\t\n+    }\n+    \n+    public void testSkewAndKurtosis() {\n+    \tStoreUnivariate u = new StoreUnivariateImpl();\n+    \t\n+    \tdouble[] testArray = { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,\n+  \t  \t\t\t\t\t\t\t\t\t\t 9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };\n+  \t  \tfor( int i = 0; i < testArray.length; i++) {\n+  \t  \t\tu.addValue( testArray[i]);\n+  \t  \t}\n+  \t  \t\n+\t\tassertEquals(\"mean\", 12.40455, u.getMean(), 0.0001);\n+\t\tassertEquals(\"variance\", 10.00236, u.getVariance(), 0.0001);\n+\t\tassertEquals(\"skewness\", 1.437424, u.getSkewness(), 0.0001);\n+  \t  \tassertEquals(\"kurtosis\", 2.37719, u.getKurtosis(), 0.0001);\n+    }\n+\n+    public void testProductAndGeometricMean() throws Exception {\n+    \tStoreUnivariateImpl u = new StoreUnivariateImpl();\n+        u.setWindowSize(10);\n+    \t    \t\n+        u.addValue( 1.0 );\n+        u.addValue( 2.0 );\n+        u.addValue( 3.0 );\n+        u.addValue( 4.0 );\n+\n+        assertEquals( \"Product not expected\", 24.0, u.getProduct(), Double.MIN_VALUE );\n+        assertEquals( \"Geometric mean not expected\", 2.213364, u.getGeometricMean(), 0.00001 );\n+\n+        // Now test rolling - UnivariateImpl should discount the contribution\n+        // of a discarded element\n+        for( int i = 0; i < 10; i++ ) {\n+            u.addValue( i + 2 );\n+        }\n+        // Values should be (2,3,4,5,6,7,8,9,10,11)\n+        \n+        assertEquals( \"Product not expected\", 39916800.0, u.getProduct(), 0.00001 );\n+        assertEquals( \"Geometric mean not expected\", 5.755931, u.getGeometricMean(), 0.00001 );\n+\n+\n+    }\n+\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/UnivariateImplTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test cases for the {@link Univariate} class.\n+ *\n+ * @author Phil Steitz\n+ * @author Tim Obrien\n+ * @version $Revision: 1.1 $ $Date: 2003/05/29 20:35:46 $\n+ */\n+\n+public final class UnivariateImplTest extends TestCase {\n+    private double one = 1;\n+    private float twoF = 2;\n+    private long twoL = 2;\n+    private int three = 3;\n+    private double mean = 2;\n+    private double sumSq = 18;\n+    private double sum = 8;\n+    private double var = 0.666666666666666666667;\n+    private double std = Math.sqrt(var);\n+    private double n = 4;\n+    private double min = 1;\n+    private double max = 3;\n+    private double tolerance = 10E-15;\n+    \n+    public UnivariateImplTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() {  \n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(UnivariateImplTest.class);\n+        suite.setName(\"Freq Tests\");\n+        return suite;\n+    }\n+    \n+    /** test stats */\n+    public void testStats() {\n+        UnivariateImpl u = new UnivariateImpl(); \n+        assertEquals(\"total count\",0,u.getN(),tolerance);\n+        u.addValue(one);\n+        u.addValue(twoF);\n+        u.addValue(twoL);\n+        u.addValue(three);\n+        assertEquals(\"N\",n,u.getN(),tolerance);\n+        assertEquals(\"sum\",sum,u.getSum(),tolerance);\n+        assertEquals(\"sumsq\",sumSq,u.getSumsq(),tolerance);\n+        assertEquals(\"var\",var,u.getVariance(),tolerance);\n+        assertEquals(\"std\",std,u.getStandardDeviation(),tolerance);\n+        assertEquals(\"mean\",mean,u.getMean(),tolerance);\n+        assertEquals(\"min\",min,u.getMin(),tolerance);\n+        assertEquals(\"max\",max,u.getMax(),tolerance);\n+        u.clear();\n+        assertEquals(\"total count\",0,u.getN(),tolerance);    \n+    }     \n+    \n+    public void testN0andN1Conditions() throws Exception {\n+    \tUnivariateImpl u = new UnivariateImpl();\n+        assertTrue(\"Mean of n = 0 set should be NaN\", \n+            Double.isNaN( u.getMean() ) );\n+\t\tassertTrue(\"Standard Deviation of n = 0 set should be NaN\", \n+            Double.isNaN( u.getStandardDeviation() ) );\n+\t\tassertTrue(\"Variance of n = 0 set should be NaN\", \n+            Double.isNaN(u.getVariance() ) );\n+\t\tassertTrue(\"skew of n = 0 set should be NaN\",\n+\t\t\tDouble.isNaN(u.getSkewness() ) );\t\n+\t\tassertTrue(\"kurtosis of n = 0 set should be NaN\", \n+\t\t\tDouble.isNaN(u.getKurtosis() ) );\t\t\n+\t\t\n+\t\n+\t\t/* n=1 */\n+\t\tu.addValue(one);\n+\t\tassertTrue(\"mean should be one (n = 1)\", \n+\t\t\tu.getMean() == one);\n+\t\tassertTrue(\"geometric should be one (n = 1)\", \n+\t\t\tu.getGeometricMean() == one);\n+\t\tassertTrue(\"Std should be zero (n = 1)\", \n+\t\t\tu.getStandardDeviation() == 0.0);\n+\t\tassertTrue(\"variance should be zero (n = 1)\", \n+\t\t\tu.getVariance() == 0.0);\n+\t\tassertTrue(\"skew should be zero (n = 1)\", \n+\t\t\tu.getSkewness() == 0.0);\n+\t\tassertTrue(\"kurtosis should be zero (n = 1)\", \n+\t\t\tu.getKurtosis() == 0.0);\t\t\n+\t\t\t\t\t\n+\t\t/* n=2 */\t\t\t\t\n+\t\tu.addValue(twoF);\n+\t\tassertTrue(\"Std should not be zero (n = 2)\", \n+\t\t\tu.getStandardDeviation() != 0.0);\n+\t\tassertTrue(\"variance should not be zero (n = 2)\", \n+\t\t\tu.getVariance() != 0.0);\n+\t\tassertTrue(\"skew should not be zero (n = 2)\", \n+\t\t\tu.getSkewness() == 0.0);\n+\t\tassertTrue(\"kurtosis should be zero (n = 2)\", \n+\t\t\tu.getKurtosis() == 0.0);\n+\n+\t\t/* n=3 */\n+\t\tu.addValue(twoL);\n+\t\tassertTrue(\"skew should not be zero (n = 3)\", \n+\t\t\tu.getSkewness() != 0.0);\n+\t\tassertTrue(\"kurtosis should be zero (n = 3)\", \n+\t\t\tu.getKurtosis() == 0.0);\n+        \n+\t\t/* n=4 */\n+\t\tu.addValue(three);\n+\t\tassertTrue(\"kurtosis should not be zero (n = 4)\", \n+\t\t\tu.getKurtosis() != 0.0);        \n+            \n+    }\n+\n+    public void testProductAndGeometricMean() throws Exception {\n+    \tUnivariateImpl u = new UnivariateImpl(10);\n+    \t    \t\n+        u.addValue( 1.0 );\n+        u.addValue( 2.0 );\n+        u.addValue( 3.0 );\n+        u.addValue( 4.0 );\n+\n+        assertEquals( \"Product not expected\", 24.0, u.getProduct(),\n+            Double.MIN_VALUE );\n+        assertEquals( \"Geometric mean not expected\", 2.213364, \n+            u.getGeometricMean(), 0.00001 );\n+\n+        // Now test rolling - UnivariateImpl should discount the contribution\n+        // of a discarded element\n+        for( int i = 0; i < 10; i++ ) {\n+            u.addValue( i + 2 );\n+        }\n+        // Values should be (2,3,4,5,6,7,8,9,10,11)\n+        \n+        assertEquals( \"Product not expected\", 39916800.0, \n+            u.getProduct(), 0.00001 );\n+        assertEquals( \"Geometric mean not expected\", 5.755931, \n+            u.getGeometricMean(), 0.00001 );\n+    }\n+    \n+    public void testRollingMinMax() {\n+        UnivariateImpl u = new UnivariateImpl(3);\n+        u.addValue( 1.0 );\n+        u.addValue( 5.0 );\n+        u.addValue( 3.0 );\n+        u.addValue( 4.0 ); // discarding min\n+        assertEquals( \"min not expected\", 3.0, \n+            u.getMin(), Double.MIN_VALUE);\n+        u.addValue(1.0);  // discarding max\n+        assertEquals( \"max not expected\", 4.0, \n+            u.getMax(), Double.MIN_VALUE);\n+    }\n+    \n+    public void testNaNContracts() {\n+        UnivariateImpl u = new UnivariateImpl();\n+        double nan = Double.NaN;\n+        assertTrue(\"mean not NaN\",Double.isNaN(u.getMean())); \n+        assertTrue(\"min not NaN\",Double.isNaN(u.getMin())); \n+        assertTrue(\"std dev not NaN\",Double.isNaN(u.getStandardDeviation())); \n+        assertTrue(\"var not NaN\",Double.isNaN(u.getVariance())); \n+        assertTrue(\"geom mean not NaN\",Double.isNaN(u.getGeometricMean()));\n+        \n+        u.addValue(1.0);\n+        \n+        assertEquals( \"mean not expected\", 1.0, \n+            u.getMean(), Double.MIN_VALUE);\n+        assertEquals( \"variance not expected\", 0.0, \n+            u.getVariance(), Double.MIN_VALUE);\n+        assertEquals( \"geometric mean not expected\", 1.0, \n+            u.getGeometricMean(), Double.MIN_VALUE);\n+        \n+        u.addValue(-1.0);\n+        \n+        assertTrue(\"geom mean not NaN\",Double.isNaN(u.getGeometricMean()));\n+        \n+        u.addValue(0.0);\n+        \n+        assertTrue(\"geom mean not NaN\",Double.isNaN(u.getGeometricMean()));\n+        \n+        //FiXME: test all other NaN contract specs\n+    }\n+\n+}", "timestamp": 1054240546, "metainfo": ""}