{"sha": "baf90f0ecacb9c719a77acdaaca507d8c6b52a0c", "log": "MATH-401 Created \"NullArgumentException\" (subclass of \"MathIllegalArgumentException\"). Changed all occurrences of \"createIllegalArgumentException\" (in \"MathRuntime\") to throw the new exception whenever a \"null\" is not allowed. Added a few checks for null in \"BigFraction.java\". Simplified \"LocalizedFormats\" enum. Changed \"ZeroNotAllowedException\" to \"ZeroException\".   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.NullArgumentException;\n \n /**\n  * Provide a default implementation for several generic functions.\n         throws IllegalArgumentException {\n         super(defaultMaximalIterationCount, 1.0e-15);\n         if (f == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NULL_FUNCTION);\n+            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n \n         this.f = f;\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.NullArgumentException;\n \n /**\n  * Provide a default implementation for several functions useful to generic\n                                        final double defaultAbsoluteAccuracy) {\n         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);\n         if (f == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NULL_FUNCTION);\n+            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         this.f = f;\n         this.defaultFunctionValueAccuracy = 1.0e-15;\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.NullArgumentException;\n \n /**\n  * Utility routines for {@link UnivariateRealSolver} objects.\n             FunctionEvaluationException {\n \n         if (function == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NULL_FUNCTION);\n+            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n         if (maximumIterations <= 0)  {\n             throw MathRuntimeException.createIllegalArgumentException(\n      */\n     private static void setup(UnivariateRealFunction f) {\n         if (f == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NULL_FUNCTION);\n+            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/math/complex/ComplexFormat.java\n+++ b/src/main/java/org/apache/commons/math/complex/ComplexFormat.java\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.exception.LocalizedFormats;\n import org.apache.commons.math.util.CompositeFormat;\n+import org.apache.commons.math.exception.NullArgumentException;\n \n /**\n  * Formats a Complex number in cartesian format \"Re(c) + Im(c)i\".  'i' can\n     /**\n      * Modify the imaginaryFormat.\n      * @param imaginaryFormat The new imaginaryFormat value.\n-     * @throws IllegalArgumentException if <code>imaginaryFormat</code> is\n-     *         <code>null</code>.\n+     * @throws NullArgumentException if {@code imaginaryFormat} is {@code null}.\n      */\n     public void setImaginaryFormat(NumberFormat imaginaryFormat) {\n         if (imaginaryFormat == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  LocalizedFormats.NULL_IMAGINARY_FORMAT);\n+            throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);\n         }\n         this.imaginaryFormat = imaginaryFormat;\n     }\n     /**\n      * Modify the realFormat.\n      * @param realFormat The new realFormat value.\n-     * @throws IllegalArgumentException if <code>realFormat</code> is\n-     *         <code>null</code>.\n+     * @throws NullArgumentException if {@code realFormat} is {@code null}.\n      */\n     public void setRealFormat(NumberFormat realFormat) {\n         if (realFormat == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  LocalizedFormats.NULL_REAL_FORMAT);\n+            throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);\n         }\n         this.realFormat = realFormat;\n     }\n--- a/src/main/java/org/apache/commons/math/exception/LocalizedFormats.java\n+++ b/src/main/java/org/apache/commons/math/exception/LocalizedFormats.java\n     NEGATIVE_COMPLEX_MODULE(\"negative complex module {0}\"),\n     NEGATIVE_ELEMENT_AT_2D_INDEX(\"element ({0}, {1}) is negative: {2}\"),\n     NEGATIVE_ELEMENT_AT_INDEX(\"element {0} is negative: {1}\"),\n-    NEGATIVE_LENGTH(\"length cannot be negative ({0})\"),\n     NEGATIVE_NUMBER_OF_SUCCESSES(\"number of successes must be non-negative ({0})\"),\n     NEGATIVE_NUMBER_OF_TRIALS(\"number of trials must be non-negative ({0})\"),\n     NEGATIVE_ROBUSTNESS_ITERATIONS(\"the number of robustness iterations must be non-negative, but got {0}\"),\n-    NEGATIVE_START_POSITION(\"start position cannot be negative ({0})\"),\n+    START_POSITION(\"start position ({0})\"), /* keep */\n     NON_CONVERGENT_CONTINUED_FRACTION(\"Continued fraction convergents failed to converge for value {0}\"),\n     NON_POSITIVE_MICROSPHERE_ELEMENTS(\"number of microsphere elements must be positive, but got {0}\"),\n     NON_POSITIVE_POLYNOMIAL_DEGREE(\"polynomial degree must be positive: degree={0}\"),\n     NO_OPTIMUM_COMPUTED_YET(\"no optimum computed yet\"),\n     NO_RESULT_AVAILABLE(\"no result available\"),\n     NO_SUCH_MATRIX_ENTRY(\"no entry at indices ({0}, {1}) in a {2}x{3} matrix\"),\n-    NULL_COVARIANCE_MATRIX(\"covariance matrix is null\"),\n-    NULL_DENOMINATOR(\"denominator is null\"),\n-    NULL_DENOMINATOR_FORMAT(\"denominator format can not be null\"),\n-    NULL_FRACTION(\"null fraction\"),\n-    NULL_FUNCTION(\"function is null\"),\n-    NULL_IMAGINARY_FORMAT(\"null imaginary format\"),\n-    NULL_INPUT_ARRAY(\"input array is null\"),\n-    NULL_NUMERATOR(\"numerator is null\"),\n-    NULL_NUMERATOR_FORMAT(\"numerator format can not be null\"),\n-    NULL_OBJECT_TRANSFORMATION(\"Conversion Exception in Transformation, Object is null\"),\n-    NULL_REAL_FORMAT(\"null real format\"),\n-    NULL_WHOLE_FORMAT(\"whole format can not be null\"),\n+    NULL_NOT_ALLOWED(\"null is not allowed\"), /* keep */\n+    COVARIANCE_MATRIX(\"covariance matrix\"), /* keep */\n+    DENOMINATOR(\"denominator\"), /* keep */\n+    DENOMINATOR_FORMAT(\"denominator format\"), /* keep */\n+    FRACTION(\"fraction\"), /* keep */\n+    FUNCTION(\"function\"), /* keep */\n+    IMAGINARY_FORMAT(\"imaginary format\"), /* keep */\n+    INPUT_ARRAY(\"input array\"), /* keep */\n+    NUMERATOR(\"numerator\"), /* keep */\n+    NUMERATOR_FORMAT(\"numerator format\"), /* keep */\n+    OBJECT_TRANSFORMATION(\"conversion exception in transformation\"), /* keep */\n+    REAL_FORMAT(\"real format\"), /* keep */\n+    WHOLE_FORMAT(\"whole format\"), /* keep */\n     NUMBER_TOO_LARGE(\"{0} is larger than the maximum ({1})\"), /* keep */\n     NUMBER_TOO_SMALL(\"{0} is smaller than the minimum ({1})\"), /* keep */\n     NUMBER_TOO_LARGE_BOUND_EXCLUDED(\"{0} is larger than, or equal to, the maximum ({1})\"), /* keep */\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/exception/NullArgumentException.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.exception;\n+\n+/**\n+ * All conditions checks that fail due to a {@code null} argument must throw\n+ * this exception.\n+ * This class is meant to signal a precondition violation (\"null is an illegal\n+ * argument\") and so does not extend the standard {@code NullPointerException}.\n+ * Proagation of {@code NullPointerException} from within Commons-Math is\n+ * construed to be a bug.\n+ *\n+ * @since 2.2\n+ * @version $Revision$ $Date$\n+ */\n+public class NullArgumentException extends MathIllegalArgumentException {\n+    /** Serializable version Id. */\n+    private static final long serialVersionUID = -6024911025449780478L;\n+\n+    /**\n+     * Default constructor.\n+     */\n+    public NullArgumentException() {\n+        super(LocalizedFormats.NULL_NOT_ALLOWED);\n+    }\n+    /**\n+     * @param specific Message pattern providing the specific context of\n+     * the error.\n+     */\n+    public NullArgumentException(Localizable specific) {\n+        super(specific, LocalizedFormats.NULL_NOT_ALLOWED);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/exception/ZeroException.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.exception;\n+\n+\n+/**\n+ * Exception to be thrown when zero is provided where it is not allowed.\n+ *\n+ * @since 2.2\n+ * @version $Revision$ $Date$\n+ */\n+public class ZeroException extends MathIllegalNumberException {\n+\n+    /** Serializable version identifier */\n+    private static final long serialVersionUID = -1960874856936000015L;\n+\n+    /**\n+     * Construct the exception.\n+     */\n+    public ZeroException() {\n+        this(null);\n+    }\n+\n+    /**\n+     * Construct the exception with a specific context.\n+     *\n+     * @param specific Specific contexte pattern .\n+     */\n+    public ZeroException(Localizable specific) {\n+        super(specific, LocalizedFormats.ZERO_NOT_ALLOWED, 0);\n+    }\n+}\n--- a/src/main/java/org/apache/commons/math/fraction/AbstractFormat.java\n+++ b/src/main/java/org/apache/commons/math/fraction/AbstractFormat.java\n import java.text.ParsePosition;\n import java.util.Locale;\n \n-import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.LocalizedFormats;\n \n /**\n     /**\n      * Modify the denominator format.\n      * @param format the new denominator format value.\n-     * @throws IllegalArgumentException if <code>format</code> is\n-     *         <code>null</code>.\n+     * @throws NullArgumentException if {@code format} is {@code null}.\n      */\n     public void setDenominatorFormat(final NumberFormat format) {\n         if (format == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                LocalizedFormats.NULL_DENOMINATOR_FORMAT);\n+            throw new NullArgumentException(LocalizedFormats.DENOMINATOR_FORMAT);\n         }\n         this.denominatorFormat = format;\n     }\n     /**\n      * Modify the numerator format.\n      * @param format the new numerator format value.\n-     * @throws IllegalArgumentException if <code>format</code> is\n-     *         <code>null</code>.\n+     * @throws NullArgumentException if {@code format} is {@code null}.\n      */\n     public void setNumeratorFormat(final NumberFormat format) {\n         if (format == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                LocalizedFormats.NULL_NUMERATOR_FORMAT);\n+            throw new NullArgumentException(LocalizedFormats.NUMERATOR_FORMAT);\n         }\n         this.numeratorFormat = format;\n     }\n--- a/src/main/java/org/apache/commons/math/fraction/BigFraction.java\n+++ b/src/main/java/org/apache/commons/math/fraction/BigFraction.java\n import org.apache.commons.math.FieldElement;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.util.MathUtils;\n \n /**\n     }\n \n     /**\n-     * <p>\n      * Create a {@link BigFraction} given the numerator and denominator as\n-     * <code>BigInteger</code>. The {@link BigFraction} is reduced to lowest terms.\n-     * </p>\n-     *\n-     * @param num\n-     *            the numerator, must not be <code>null</code>.\n-     * @param den\n-     *            the denominator, must not be <code>null</code>.\n-     * @throws ArithmeticException\n-     *             if the denominator is <code>zero</code>.\n+     * {@code BigInteger}. The {@link BigFraction} is reduced to lowest terms.\n+     *\n+     * @param num the numerator, must not be {@code null}.\n+     * @param den the denominator, must not be {@code null}..\n+     * @throws ArithmeticException if the denominator is zero.\n      */\n     public BigFraction(BigInteger num, BigInteger den) {\n+        if (num == null) {\n+            throw new NullArgumentException(LocalizedFormats.NUMERATOR);\n+        }\n+        if (den == null) {\n+            throw new NullArgumentException(LocalizedFormats.DENOMINATOR);\n+        }\n         if (BigInteger.ZERO.equals(den)) {\n             throw MathRuntimeException.createArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);\n         }\n      * @param fraction\n      *            the {@link BigFraction} to add, must not be <code>null</code>.\n      * @return a {@link BigFraction} instance with the resulting values.\n-     * @throws NullPointerException\n-     *             if the {@link BigFraction} is <code>null</code>.\n+     * @throws NullArgumentException if the {@link BigFraction} is {@code null}.\n      */\n     public BigFraction add(final BigFraction fraction) {\n+        if (fraction == null) {\n+            throw new NullArgumentException(LocalizedFormats.FRACTION);\n+        }\n         if (ZERO.equals(fraction)) {\n             return this;\n         }\n      *            the <code>BigInteger</code> to divide by, must not be\n      *            <code>null</code>.\n      * @return a {@link BigFraction} instance with the resulting values.\n-     * @throws NullPointerException\n-     *             if the <code>BigInteger</code> is <code>null</code>.\n+     * @throws NullArgumentException if the {@code BigInteger} is {@code null}.\n      * @throws ArithmeticException\n      *             if the fraction to divide by is zero.\n      */\n      * reduced form.\n      * </p>\n      *\n-     * @param fraction\n-     *            the fraction to divide by, must not be <code>null</code>.\n+     * @param fraction Fraction to divide by, must not be {@code null}.\n      * @return a {@link BigFraction} instance with the resulting values.\n-     * @throws NullPointerException\n-     *             if the fraction is <code>null</code>.\n-     * @throws ArithmeticException\n-     *             if the fraction to divide by is zero.\n+     * @throws NullArgumentException if the {@code fraction} is {@code null}.\n+     * @throws ArithmeticException if the fraction to divide by is zero.\n      */\n     public BigFraction divide(final BigFraction fraction) {\n+        if (fraction == null) {\n+            throw new NullArgumentException(LocalizedFormats.FRACTION);\n+        }\n         if (BigInteger.ZERO.equals(fraction.numerator)) {\n             throw MathRuntimeException.createArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);\n         }\n      * <code>BigInteger</code>, returning the result in reduced form.\n      * </p>\n      *\n-     * @param bg\n-     *            the <code>BigInteger</code> to multiply by.\n-     * @return a <code>BigFraction</code> instance with the resulting values.\n-     * @throws NullPointerException\n-     *             if the bg is <code>null</code>.\n+     * @param bg the {@code BigInteger} to multiply by.\n+     * @return a {@code BigFraction} instance with the resulting values.\n+     * @throws NullArgumentException if {@code bg} is {@code null}.\n      */\n     public BigFraction multiply(final BigInteger bg) {\n+        if (bg == null) {\n+            throw new NullArgumentException();\n+        }\n         return new BigFraction(bg.multiply(numerator), denominator);\n     }\n \n      * reduced form.\n      * </p>\n      *\n-     * @param fraction\n-     *            the fraction to multiply by, must not be <code>null</code>.\n+     * @param fraction Fraction to multiply by, must not be {@code null}.\n      * @return a {@link BigFraction} instance with the resulting values.\n-     * @throws NullPointerException\n-     *             if the fraction is <code>null</code>.\n+     * @throws NullArgumentException if {@code fraction} is {@code null}.\n      */\n     public BigFraction multiply(final BigFraction fraction) {\n+        if (fraction == null) {\n+            throw new NullArgumentException(LocalizedFormats.FRACTION);\n+        }\n         if (numerator.equals(BigInteger.ZERO) ||\n             fraction.numerator.equals(BigInteger.ZERO)) {\n             return ZERO;\n      * returning the result in reduced form.\n      * </p>\n      *\n-     * @param bg\n-     *            the {@link BigInteger} to subtract, must'nt be\n-     *            <code>null</code>.\n-     * @return a <code>BigFraction</code> instance with the resulting values.\n-     * @throws NullPointerException\n-     *             if the {@link BigInteger} is <code>null</code>.\n+     * @param bg the {@link BigInteger} to subtract, cannot be {@code null}.\n+     * @return a {@code BigFraction} instance with the resulting values.\n+     * @throws NullArgumentException if the {@link BigInteger} is {@code null}.\n      */\n     public BigFraction subtract(final BigInteger bg) {\n+        if (bg == null) {\n+            throw new NullArgumentException();\n+        }\n         return new BigFraction(numerator.subtract(denominator.multiply(bg)), denominator);\n     }\n \n      * returning the result in reduced form.\n      * </p>\n      *\n-     * @param fraction\n-     *            the {@link BigFraction} to subtract, must not be\n-     *            <code>null</code>.\n+     * @param fraction {@link BigFraction} to subtract, must not be {@code null}.\n      * @return a {@link BigFraction} instance with the resulting values\n-     * @throws NullPointerException\n-     *             if the fraction is <code>null</code>.\n+     * @throws NullArgumentException if the {@code fraction} is {@code null}.\n      */\n     public BigFraction subtract(final BigFraction fraction) {\n+        if (fraction == null) {\n+            throw new NullArgumentException(LocalizedFormats.FRACTION);\n+        }\n         if (ZERO.equals(fraction)) {\n             return this;\n         }\n--- a/src/main/java/org/apache/commons/math/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math/fraction/Fraction.java\n import org.apache.commons.math.FieldElement;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.util.MathUtils;\n \n /**\n      */\n     private Fraction addSub(Fraction fraction, boolean isAdd) {\n         if (fraction == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NULL_FRACTION);\n+            throw new NullArgumentException(LocalizedFormats.FRACTION);\n         }\n         // zero is identity for addition.\n         if (numerator == 0) {\n      */\n     public Fraction multiply(Fraction fraction) {\n         if (fraction == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NULL_FRACTION);\n+            throw new NullArgumentException(LocalizedFormats.FRACTION);\n         }\n         if (numerator == 0 || fraction.numerator == 0) {\n             return ZERO;\n      */\n     public Fraction divide(Fraction fraction) {\n         if (fraction == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NULL_FRACTION);\n+            throw new NullArgumentException(LocalizedFormats.FRACTION);\n         }\n         if (fraction.numerator == 0) {\n             throw MathRuntimeException.createArithmeticException(\n--- a/src/main/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java\n+++ b/src/main/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java\n import java.text.NumberFormat;\n import java.text.ParsePosition;\n \n-import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.NullArgumentException;\n \n /**\n  * Formats a BigFraction number in proper format.  The number format for each of\n     /**\n      * Modify the whole format.\n      * @param format The new whole format value.\n-     * @throws IllegalArgumentException if <code>format</code> is\n-     *         <code>null</code>.\n+     * @throws NullArgumentException if {@code format} is {@code null}.\n      */\n     public void setWholeFormat(final NumberFormat format) {\n         if (format == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                LocalizedFormats.NULL_WHOLE_FORMAT);\n+            throw new NullArgumentException(LocalizedFormats.WHOLE_FORMAT);\n         }\n         this.wholeFormat = format;\n     }\n-\n }\n--- a/src/main/java/org/apache/commons/math/fraction/ProperFractionFormat.java\n+++ b/src/main/java/org/apache/commons/math/fraction/ProperFractionFormat.java\n import java.text.NumberFormat;\n import java.text.ParsePosition;\n \n-import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.util.MathUtils;\n \n /**\n     /**\n      * Modify the whole format.\n      * @param format The new whole format value.\n-     * @throws IllegalArgumentException if <code>format</code> is\n-     *         <code>null</code>.\n+     * @throws NullArgumentException if {@code format} is {@code null}.\n      */\n     public void setWholeFormat(NumberFormat format) {\n         if (format == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                LocalizedFormats.NULL_WHOLE_FORMAT);\n+            throw new NullArgumentException(LocalizedFormats.WHOLE_FORMAT);\n         }\n         this.wholeFormat = format;\n     }\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.LocalizedFormats;\n-import org.apache.commons.math.exception.ZeroNotAllowedException;\n+import org.apache.commons.math.exception.ZeroException;\n+import org.apache.commons.math.exception.NullArgumentException;\n \n /**\n  * The derivative of {@link GaussianFunction}.  Specifically:\n      */\n     public GaussianDerivativeFunction(double b, double c, double d) {\n         if (d == 0.0) {\n-            throw new ZeroNotAllowedException();\n+            throw new ZeroException();\n         }\n         this.b = b;\n         this.c = c;\n      */\n     public GaussianDerivativeFunction(double[] parameters) {\n         if (parameters == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NULL_INPUT_ARRAY);\n+            throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n         }\n         if (parameters.length != 3) {\n             throw new DimensionMismatchException(3, parameters.length);\n         }\n         if (parameters[2] == 0.0) {\n-            throw new ZeroNotAllowedException();\n+            throw new ZeroException();\n         }\n         this.b = parameters[0];\n         this.c = parameters[1];\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n package org.apache.commons.math.optimization.fitting;\n \n import org.apache.commons.math.FunctionEvaluationException;\n-import org.apache.commons.math.optimization.\n-       DifferentiableMultivariateVectorialOptimizer;\n+import org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer;\n import org.apache.commons.math.optimization.OptimizationException;\n import org.apache.commons.math.optimization.fitting.CurveFitter;\n import org.apache.commons.math.optimization.fitting.WeightedObservedPoint;\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFunction.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFunction.java\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.LocalizedFormats;\n-import org.apache.commons.math.exception.ZeroNotAllowedException;\n+import org.apache.commons.math.exception.ZeroException;\n+import org.apache.commons.math.exception.NullArgumentException;\n \n /**\n  * A Gaussian function.  Specifically:\n      */\n     public GaussianFunction(double a, double b, double c, double d) {\n         if (d == 0.0) {\n-            throw new ZeroNotAllowedException();\n+            throw new ZeroException();\n         }\n         this.a = a;\n         this.b = b;\n      */\n     public GaussianFunction(double[] parameters) {\n         if (parameters == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NULL_INPUT_ARRAY);\n+            throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n         }\n         if (parameters.length != 4) {\n             throw new DimensionMismatchException(4, parameters.length);\n         }\n         if (parameters[3] == 0.0) {\n-            throw new ZeroNotAllowedException();\n+            throw new ZeroException();\n         }\n         this.a = parameters[0];\n         this.b = parameters[1];\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianParametersGuesser.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianParametersGuesser.java\n import java.util.Arrays;\n import java.util.Comparator;\n \n-import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.exception.LocalizedFormats;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.exception.OutOfRangeException;\n-import org.apache.commons.math.exception.ZeroNotAllowedException;\n+import org.apache.commons.math.exception.ZeroException;\n+import org.apache.commons.math.exception.NullArgumentException;\n \n /**\n- * Guesses the parameters (<tt>a</tt>, <tt>b</tt>, <tt>c</tt>, and <tt>d</tt>)\n+ * Guesses the parameters ({@code a}, {@code b}, {@code c}, and {@code d})\n  * of a {@link ParametricGaussianFunction} based on the specified observed\n  * points.\n  *\n      */\n     public GaussianParametersGuesser(WeightedObservedPoint[] observations) {\n         if (observations == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NULL_INPUT_ARRAY);\n+            throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n         }\n         if (observations.length < 3) {\n             throw new NumberIsTooSmallException(observations.length, 3, true);\n     private double interpolateXAtY(WeightedObservedPoint[] points,\n                                    int startIdx, int idxStep, double y) throws OutOfRangeException {\n         if (idxStep == 0) {\n-            throw new ZeroNotAllowedException();\n+            throw new ZeroException();\n         }\n         WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n         WeightedObservedPoint pointA = twoPoints[0];\n                                                                int startIdx, int idxStep, double y)\n         throws OutOfRangeException {\n         if (idxStep == 0) {\n-            throw new ZeroNotAllowedException();\n+            throw new ZeroException();\n         }\n         for (int i = startIdx;\n              (idxStep < 0) ? (i + idxStep >= 0) : (i + idxStep < points.length);\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java\n import java.io.Serializable;\n \n import org.apache.commons.math.FunctionEvaluationException;\n-import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.LocalizedFormats;\n-import org.apache.commons.math.exception.ZeroNotAllowedException;\n+import org.apache.commons.math.exception.ZeroException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.optimization.fitting.ParametricRealFunction;\n \n /**\n      */\n     private void validateParameters(double[] parameters) throws FunctionEvaluationException {\n         if (parameters == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NULL_INPUT_ARRAY);\n+            throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n         }\n         if (parameters.length != 4) {\n             throw new DimensionMismatchException(4, parameters.length);\n         }\n         if (parameters[3] == 0.0) {\n-            throw new ZeroNotAllowedException();\n+            throw new ZeroException();\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\n+++ b/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\n import org.apache.commons.math.distribution.TDistribution;\n import org.apache.commons.math.distribution.TDistributionImpl;\n import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.linear.BlockRealMatrix;\n import org.apache.commons.math.stat.regression.SimpleRegression;\n     public PearsonsCorrelation(Covariance covariance) {\n         RealMatrix covarianceMatrix = covariance.getCovarianceMatrix();\n         if (covarianceMatrix == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NULL_COVARIANCE_MATRIX);\n+            throw new NullArgumentException(LocalizedFormats.COVARIANCE_MATRIX);\n         }\n         nObs = covariance.getN();\n         correlationMatrix = covarianceToCorrelation(covarianceMatrix);\n     public double correlation(final double[] xArray, final double[] yArray) throws IllegalArgumentException {\n         SimpleRegression regression = new SimpleRegression();\n         if (xArray.length != yArray.length) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, xArray.length, yArray.length);\n+            throw new DimensionMismatchException(xArray.length, yArray.length);\n         } else if (xArray.length < 2) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                   LocalizedFormats.INSUFFICIENT_DIMENSION, xArray.length, 2);\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java\n  */\n package org.apache.commons.math.stat.descriptive;\n \n-import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.util.MathUtils;\n \n /**\n     @Override\n     public double evaluate(final double[] values) {\n         if (values == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NULL_INPUT_ARRAY);\n+            throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n         }\n         return evaluate(values, 0, values.length);\n     }\n      */\n     public void incrementAll(double[] values) {\n         if (values == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NULL_INPUT_ARRAY);\n+            throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n         }\n         incrementAll(values, 0, values.length);\n     }\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java\n \n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.exception.NotPositiveException;\n+import org.apache.commons.math.exception.DimensionMismatchException;\n \n /**\n  * Abstract base class for all implementations of the\n         final int length) {\n \n         if (values == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NULL_INPUT_ARRAY);\n+            throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n         }\n \n         if (begin < 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  LocalizedFormats.NEGATIVE_START_POSITION, begin);\n+            throw new NotPositiveException(LocalizedFormats.START_POSITION, begin);\n         }\n \n         if (length < 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  LocalizedFormats.NEGATIVE_LENGTH, length);\n+            throw new NotPositiveException(LocalizedFormats.LENGTH, length);\n         }\n \n         if (begin + length > values.length) {\n         final int length) {\n \n         if (weights == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NULL_INPUT_ARRAY);\n+            throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n         }\n \n-        if (weights.length !=  values.length) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, weights.length, values.length);\n+        if (weights.length != values.length) {\n+            throw new DimensionMismatchException(weights.length, values.length);\n         }\n \n         boolean containsPositiveWeight = false;\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java\n package org.apache.commons.math.stat.descriptive.moment;\n \n import java.io.Serializable;\n-import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic;\n \n     @Override\n     public double evaluate(final double[] values) {\n         if (values == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NULL_INPUT_ARRAY);\n+            throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n          }\n         return evaluate(values, 0, values.length);\n     }\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n \n import java.io.Serializable;\n \n-import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.WeightedEvaluation;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n     @Override\n     public double evaluate(final double[] values) {\n         if (values == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NULL_INPUT_ARRAY);\n+            throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n         }\n         return evaluate(values, 0, values.length);\n     }\n         return result;\n     }\n \n-\n     /**\n      * Copies source to dest.\n      * <p>Neither source nor dest can be null.</p>\n      * @throws NullPointerException if either source or dest is null\n      */\n     public static void copy(Variance source, Variance dest) {\n+        if (source == null ||\n+            dest == null) {\n+            throw new NullArgumentException();\n+        }\n         dest.moment = source.moment.copy();\n         dest.isBiasCorrected = source.isBiasCorrected;\n         dest.incMoment = source.incMoment;\n     }\n-\n }\n--- a/src/main/java/org/apache/commons/math/util/DefaultTransformer.java\n+++ b/src/main/java/org/apache/commons/math/util/DefaultTransformer.java\n \n import org.apache.commons.math.MathException;\n import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.NullArgumentException;\n \n /**\n  * A Default NumberTransformer for java.lang.Numbers and Numeric Strings. This\n     /**\n      * @param o  the object that gets transformed.\n      * @return a double primitive representation of the Object o.\n-     * @throws org.apache.commons.math.MathException If it cannot successfully\n-     * be transformed or is null.\n+     * @throws MathException if it cannot successfully be transformed.\n+     * @throws NullArgumentException if is {@code null}.\n      * @see <a href=\"http://commons.apache.org/collections/api-release/org/apache/commons/collections/Transformer.html\"/>\n      */\n-    public double transform(Object o) throws MathException{\n-\n+    public double transform(Object o) throws MathException {\n         if (o == null) {\n-            throw new MathException(LocalizedFormats.NULL_OBJECT_TRANSFORMATION);\n+            throw new NullArgumentException(LocalizedFormats.OBJECT_TRANSFORMATION);\n         }\n \n         if (o instanceof Number) {\n--- a/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java\n+++ b/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java\n \n import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.TestUtils;\n+import org.apache.commons.math.exception.NullArgumentException;\n \n import junit.framework.TestCase;\n \n         assertFraction(1055531162664967l, 70368744177664l, new BigFraction(15.0000000000001));\n         try {\n             new BigFraction(null, BigInteger.ONE);\n-        } catch (NullPointerException npe) {\n+        } catch (NullArgumentException npe) {\n             // expected\n         }\n         try {\n             new BigFraction(BigInteger.ONE, null);\n-        } catch (NullPointerException npe) {\n+        } catch (NullArgumentException npe) {\n             // expected\n         }\n         try {\n \n         try {\n             f.add((BigFraction) null);\n-            fail(\"expecting NullPointerException\");\n-        } catch (NullPointerException ex) {\n+            fail(\"expecting NullArgumentException\");\n+        } catch (NullArgumentException ex) {\n         }\n \n         // if this fraction is added naively, it will overflow.\n \n         try {\n             f.divide((BigFraction) null);\n-            fail(\"expecting NullPointerException\");\n-        } catch (NullPointerException ex) {\n+            fail(\"expecting NullArgumentException\");\n+        } catch (NullArgumentException ex) {\n         }\n \n         f1 = new BigFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);\n \n         try {\n             f.multiply((BigFraction) null);\n-            fail(\"expecting NullPointerException\");\n-        } catch (NullPointerException ex) {\n+            fail(\"expecting NullArgumentException\");\n+        } catch (NullArgumentException ex) {\n         }\n \n     }\n         BigFraction f = new BigFraction(1, 1);\n         try {\n             f.subtract((BigFraction) null);\n-            fail(\"expecting NullPointerException\");\n-        } catch (NullPointerException ex) {\n+            fail(\"expecting NullArgumentException\");\n+        } catch (NullArgumentException ex) {\n         }\n \n         // if this fraction is subtracted naively, it will overflow.\n--- a/src/test/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunctionTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunctionTest.java\n package org.apache.commons.math.optimization.fitting;\n \n import org.apache.commons.math.FunctionEvaluationException;\n-import org.apache.commons.math.exception.ZeroNotAllowedException;\n+import org.apache.commons.math.exception.ZeroException;\n import org.apache.commons.math.optimization.OptimizationException;\n import org.apache.commons.math.optimization.fitting.CurveFitter;\n import org.apache.commons.math.optimization.general.\n      *\n      * @throws FunctionEvaluationException in the event of a test case error\n      */\n-    @Test(expected=ZeroNotAllowedException.class)\n+    @Test(expected=ZeroException.class)\n     public void testValue03() throws FunctionEvaluationException {\n         ParametricGaussianFunction f = new ParametricGaussianFunction();\n         f.value(0.0, new double[] {0.0, 1.0, 1.0, 0.0});\n--- a/src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java\n+++ b/src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java\n \n import org.apache.commons.math.MathException;\n import org.apache.commons.math.TestUtils;\n+import org.apache.commons.math.exception.NullArgumentException;\n \n /**\n  * @version $Revision$ $Date$\n     /**\n      *\n      */\n-    public void testTransformNull(){\n+    public void testTransformNull() throws Exception {\n         DefaultTransformer t = new DefaultTransformer();\n         try {\n             t.transform(null);\n-            fail(\"Expection MathException\");\n-        } catch (MathException e) {\n+            fail(\"Expecting NullArgumentException\");\n+        } catch (NullArgumentException e) {\n             // expected\n         }\n     }", "timestamp": 1281101341, "metainfo": ""}