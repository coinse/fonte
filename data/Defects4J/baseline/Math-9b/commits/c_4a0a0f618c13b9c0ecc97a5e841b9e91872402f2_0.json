{"sha": "4a0a0f618c13b9c0ecc97a5e841b9e91872402f2", "log": "Changed inverseCumulativeProbability to return correct values for p=0,1 as discussed on commons-dev.   ", "commit": "\n--- a/src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n /**\n  * The default implementation of {@link ExponentialDistribution}\n  *\n- * @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:15 $\n+ * @version $Revision: 1.19 $ $Date: 2004/07/24 21:41:36 $\n  */\n public class ExponentialDistributionImpl extends AbstractContinuousDistribution\n     implements ExponentialDistribution, Serializable {\n     /**\n      * For this distribution, X, this method returns the critical point x, such\n      * that P(X &lt; x) = <code>p</code>.\n-     *\n+     * <p>\n+     * Returns 0 for p=0 and <code>Double.POSITIVE_INFINITY</code> for p=1.\n+     * \n      * @param p the desired probability\n      * @return x, such that P(X &lt; x) = <code>p</code>\n      * @throws MathException if the inverse cumulative probability can not be\n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n  * Default implementation of\n  * {@link org.apache.commons.math.distribution.FDistribution}.\n  *\n- * @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:15 $\n+ * @version $Revision: 1.19 $ $Date: 2004/07/24 21:41:36 $\n  */\n public class FDistributionImpl\n     extends AbstractContinuousDistribution\n                 0.5 * m);\n         }\n         return ret;\n+    }\n+    \n+    /**\n+     * For this distribution, X, this method returns the critical point x, such\n+     * that P(X &lt; x) = <code>p</code>.\n+     * <p>\n+     * Returns 0 for p=0 and <code>Double.POSITIVE_INFINITY</code> for p=1.\n+     *\n+     * @param p the desired probability\n+     * @return x, such that P(X &lt; x) = <code>p</code>\n+     * @throws MathException if the inverse cumulative probability can not be\n+     *         computed due to convergence or other numerical errors.\n+     * @throws IllegalArgumentException if <code>p</code> is not a valid\n+     *         probability.\n+     */\n+    public double inverseCumulativeProbability(final double p) \n+        throws MathException {\n+        if (p == 0) {\n+            return 0d;\n+        }\n+        if (p == 1) {\n+            return Double.POSITIVE_INFINITY;\n+        }\n+        return super.inverseCumulativeProbability(p);\n     }\n         \n     /**\n--- a/src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n /**\n  * The default implementation of {@link GammaDistribution}\n  *\n- * @version $Revision: 1.21 $ $Date: 2004/06/23 16:26:15 $\n+ * @version $Revision: 1.22 $ $Date: 2004/07/24 21:41:36 $\n  */\n public class GammaDistributionImpl extends AbstractContinuousDistribution\n     implements GammaDistribution, Serializable  {\n     }\n     \n     /**\n+     * For this distribution, X, this method returns the critical point x, such\n+     * that P(X &lt; x) = <code>p</code>.\n+     * <p>\n+     * Returns 0 for p=0 and <code>Double.POSITIVE_INFINITY</code> for p=1.\n+     *\n+     * @param p the desired probability\n+     * @return x, such that P(X &lt; x) = <code>p</code>\n+     * @throws MathException if the inverse cumulative probability can not be\n+     *         computed due to convergence or other numerical errors.\n+     * @throws IllegalArgumentException if <code>p</code> is not a valid\n+     *         probability.\n+     */\n+    public double inverseCumulativeProbability(final double p) \n+    throws MathException {\n+        if (p == 0) {\n+            return 0d;\n+        }\n+        if (p == 1) {\n+            return Double.POSITIVE_INFINITY;\n+        }\n+        return super.inverseCumulativeProbability(p);\n+    }\n+    \n+    /**\n      * Modify the shape parameter, alpha.\n      * @param alpha the new shape parameter.\n      * @throws IllegalArgumentException if <code>alpha</code> is not positive.\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n  * Default implementation of\n  * {@link org.apache.commons.math.distribution.NormalDistribution}.\n  *\n- * @version $Revision: 1.12 $ $Date: 2004/06/23 16:26:15 $\n+ * @version $Revision: 1.13 $ $Date: 2004/07/24 21:41:36 $\n  */\n public class NormalDistributionImpl extends AbstractContinuousDistribution \n \t\timplements NormalDistribution, Serializable {\n         return 0.5 * (1.0 + Erf.erf((x - mean) /\n                 (standardDeviation * Math.sqrt(2.0))));\n \t}\n+    \n+    /**\n+     * For this distribution, X, this method returns the critical point x, such\n+     * that P(X &lt; x) = <code>p</code>.\n+     * <p>\n+     * Returns <code>Double.NEGATIVE_INFINITY</code> for p=0 and \n+     * <code>Double.POSITIVE_INFINITY</code> for p=1.\n+     *\n+     * @param p the desired probability\n+     * @return x, such that P(X &lt; x) = <code>p</code>\n+     * @throws MathException if the inverse cumulative probability can not be\n+     *         computed due to convergence or other numerical errors.\n+     * @throws IllegalArgumentException if <code>p</code> is not a valid\n+     *         probability.\n+     */\n+    public double inverseCumulativeProbability(final double p) \n+    throws MathException {\n+        if (p == 0) {\n+            return Double.NEGATIVE_INFINITY;\n+        }\n+        if (p == 1) {\n+            return Double.POSITIVE_INFINITY;\n+        }\n+        return super.inverseCumulativeProbability(p);\n+    }\n \t\n \t/**\n \t * Access the domain value lower bound, based on <code>p</code>, used to\n--- a/src/java/org/apache/commons/math/distribution/TDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/TDistributionImpl.java\n  * Default implementation of\n  * {@link org.apache.commons.math.distribution.TDistribution}.\n  *\n- * @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:15 $\n+ * @version $Revision: 1.19 $ $Date: 2004/07/24 21:41:36 $\n  */\n public class TDistributionImpl\n     extends AbstractContinuousDistribution\n \n         return ret;\n     }\n+    \n+    /**\n+     * For this distribution, X, this method returns the critical point x, such\n+     * that P(X &lt; x) = <code>p</code>.\n+     * <p>\n+     * Returns <code>Double.NEGATIVE_INFINITY</code> for p=0 and \n+     * <code>Double.POSITIVE_INFINITY</code> for p=1.\n+     *\n+     * @param p the desired probability\n+     * @return x, such that P(X &lt; x) = <code>p</code>\n+     * @throws MathException if the inverse cumulative probability can not be\n+     *         computed due to convergence or other numerical errors.\n+     * @throws IllegalArgumentException if <code>p</code> is not a valid\n+     *         probability.\n+     */\n+    public double inverseCumulativeProbability(final double p) \n+    throws MathException {\n+        if (p == 0) {\n+            return Double.NEGATIVE_INFINITY;\n+        }\n+        if (p == 1) {\n+            return Double.POSITIVE_INFINITY;\n+        }\n+        return super.inverseCumulativeProbability(p);\n+    }\n \n     /**\n      * Access the domain value lower bound, based on <code>p</code>, used to\n--- a/src/test/org/apache/commons/math/distribution/FDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/FDistributionTest.java\n  * Extends ContinuousDistributionAbstractTest.  See class javadoc for\n  * ContinuousDistributionAbstractTest for details.\n  * \n- * @version $Revision: 1.15 $ $Date: 2004/06/10 18:27:47 $\n+ * @version $Revision: 1.16 $ $Date: 2004/07/24 21:41:37 $\n  */\n public class FDistributionTest extends ContinuousDistributionAbstractTest {\n \n     }\n \n     public void testInverseCumulativeProbabilityExtremes() throws Exception {\n-        //TODO: decide what to do about p = 1.  This currently blows up the solver.\n-        setInverseCumulativeTestPoints(new double[] {0});\n-        setInverseCumulativeTestValues(new double[] {0});\n+        setInverseCumulativeTestPoints(new double[] {0, 1});\n+        setInverseCumulativeTestValues(new double[] {0, Double.POSITIVE_INFINITY});\n         verifyInverseCumulativeProbabilities();\n     }\n     \n--- a/src/test/org/apache/commons/math/distribution/GammaDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/GammaDistributionTest.java\n  * Extends ContinuousDistributionAbstractTest.  See class javadoc for\n  * ContinuousDistributionAbstractTest for details.\n  * \n- * @version $Revision: 1.17 $ $Date: 2004/05/31 00:55:22 $\n+ * @version $Revision: 1.18 $ $Date: 2004/07/24 21:41:37 $\n  */\n public class GammaDistributionTest extends ContinuousDistributionAbstractTest {\n     \n         double actual = distribution.inverseCumulativeProbability(p);\n         assertEquals(\"critical value for \" + p, expected, actual, 10e-4);\n     }\n+    \n+    public void testInverseCumulativeProbabilityExtremes() throws Exception {\n+        setInverseCumulativeTestPoints(new double[] {0, 1});\n+        setInverseCumulativeTestValues(new double[] {0, Double.POSITIVE_INFINITY});\n+        verifyInverseCumulativeProbabilities();\n+    }\n }\n--- a/src/test/org/apache/commons/math/distribution/NormalDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/NormalDistributionTest.java\n  * Extends ContinuousDistributionAbstractTest.  See class javadoc for\n  * ContinuousDistributionAbstractTest for details.\n  * \n- * @version $Revision: 1.7 $ $Date: 2004/05/30 05:54:43 $\n+ * @version $Revision: 1.8 $ $Date: 2004/07/24 21:41:37 $\n  */\n public class NormalDistributionTest extends ContinuousDistributionAbstractTest  {\n     \n         verifyQuantiles();\n     }\n     \n+    public void testInverseCumulativeProbabilityExtremes() throws Exception {\n+        setInverseCumulativeTestPoints(new double[] {0, 1});\n+        setInverseCumulativeTestValues(\n+                new double[] {Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY});\n+        verifyInverseCumulativeProbabilities();\n+    }\n+    \n     public void testGetMean() {\n         NormalDistribution distribution = (NormalDistribution) getDistribution();\n         assertEquals(2.1, distribution.getMean(), 0);\n--- a/src/test/org/apache/commons/math/distribution/TDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/TDistributionTest.java\n  * Extends ContinuousDistributionAbstractTest.  See class javadoc for\n  * ContinuousDistributionAbstractTest for details.\n  * \n- * @version $Revision: 1.14 $ $Date: 2004/05/30 22:13:35 $\n+ * @version $Revision: 1.15 $ $Date: 2004/07/24 21:41:37 $\n  */\n public class TDistributionTest extends ContinuousDistributionAbstractTest {\n \n         verifyInverseCumulativeProbabilities();\n     }\n     \n+    public void testInverseCumulativeProbabilityExtremes() throws Exception {\n+        setInverseCumulativeTestPoints(new double[] {0, 1});\n+        setInverseCumulativeTestValues(\n+                new double[] {Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY});\n+        verifyInverseCumulativeProbabilities();\n+    }\n+    \n     public void testDfAccessors() {\n         TDistribution distribution = (TDistribution) getDistribution();\n         assertEquals(5d, distribution.getDegreesOfFreedom(), Double.MIN_VALUE);", "timestamp": 1090705297, "metainfo": ""}