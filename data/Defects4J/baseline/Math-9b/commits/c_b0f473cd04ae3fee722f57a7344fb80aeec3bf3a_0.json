{"sha": "b0f473cd04ae3fee722f57a7344fb80aeec3bf3a", "log": "slightly improved documentation for random vectors generation  ", "commit": "\n--- a/src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java\n+++ b/src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java\n  * the uncorrelated components of another random vector in such a way that\n  * the resulting correlations are the ones specified by a positive\n  * definite covariance matrix.</p>\n+ * <p>The main use for correlated random vector generation is for Monte-Carlo\n+ * simulation of physical problems with several variables, for example to\n+ * generate error vectors to be added to a nominal vector. A particularly\n+ * interesting case is when the generated vector should be drawn from a <a\n+ * href=\"http://en.wikipedia.org/wiki/Multivariate_normal_distribution\">\n+ * Multivariate Normal Distribution</a>. The approach using a Cholesky\n+ * decomposition is quite usual in this case. However, it cas be extended\n+ * to other cases as long as the underlying random generator provides\n+ * {@link NormalizedRandomGenerator normalized values} like {@link\n+ * GaussianRandomGenerator} or {@link UniformRandomGenerator}.</p>\n  * <p>Sometimes, the covariance matrix for a given simulation is not\n  * strictly positive definite. This means that the correlations are\n  * not all independant from each other. In this case, however, the non\n  * strictly positive elements found during the Cholesky decomposition\n  * of the covariance matrix should not be negative either, they\n- * should be null. This implies that rather than computing <code>C =\n- * U<sup>T</sup>.U</code> where <code>C</code> is the covariance matrix and\n- * <code>U</code> is an uppertriangular matrix, we compute <code>C =\n- * B.B<sup>T</sup></code> where <code>B</code> is a rectangular matrix having\n+ * should be null. Another non-conventional extension handling this case\n+ * is used here. Rather than computing <code>C = U<sup>T</sup>.U</code>\n+ * where <code>C</code> is the covariance matrix and <code>U</code>\n+ * is an uppertriangular matrix, we compute <code>C = B.B<sup>T</sup></code>\n+ * where <code>B</code> is a rectangular matrix having\n  * more rows than columns. The number of columns of <code>B</code> is\n  * the rank of the covariance matrix, and it is the dimension of the\n  * uncorrelated random vector that is needed to compute the component", "timestamp": 1183582149, "metainfo": ""}