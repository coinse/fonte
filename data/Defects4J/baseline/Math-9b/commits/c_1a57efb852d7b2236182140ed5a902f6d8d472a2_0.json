{"sha": "1a57efb852d7b2236182140ed5a902f6d8d472a2", "log": "fixed javadoc typos  ", "commit": "\n--- a/src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n     }\n \n     /**\n-     * For this disbution, X, this method returns P(X = x).\n+     * For this distribution, X, this method returns P(X = x).\n      * \n      * @param x the value at which the PMF is evaluated.\n      * @return PMF for this distribution. \n--- a/src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java\n     }\n \n     /**\n-     * For this disbution, X, this method returns P(X &lt; <code>x</code>).\n+     * For this distribution, X, this method returns P(X &lt; <code>x</code>).\n      * @param x the value at which the CDF is evaluated.\n      * @return CDF evaluted at <code>x</code>. \n      */\n--- a/src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n     }\n         \n     /**\n-     * For this disbution, X, this method returns P(X &lt; x).\n+     * For this distribution, X, this method returns P(X &lt; x).\n      * @param x the value at which the CDF is evaluated.\n      * @return CDF for this distribution. \n      * @throws MathException if the cumulative probability can not be\n--- a/src/java/org/apache/commons/math/distribution/ContinuousDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/ContinuousDistribution.java\n public interface ContinuousDistribution extends Distribution {\n     \n     /**\n-     * For this disbution, X, this method returns x such that P(X &lt; x) = p.\n+     * For this distribution, X, this method returns x such that P(X &lt; x) = p.\n      * @param p the cumulative probability.\n      * @return x. \n      * @throws MathException if the inverse cumulative probability can not be\n--- a/src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n     }\n \n     /**\n-     * For this disbution, X, this method returns P(X &lt; x).\n+     * For this distribution, X, this method returns P(X &lt; x).\n      * \n      * The implementation of this method is based on:\n      * <ul>\n--- a/src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n     }\n     \n     /**\n-     * For this disbution, X, this method returns P(X &lt; x).\n+     * For this distribution, X, this method returns P(X &lt; x).\n      * \n      * The implementation of this method is based on:\n      * <ul>\n--- a/src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java\n     }\n \n     /**\n-     * For this disbution, X, this method returns P(X &le; x).\n+     * For this distribution, X, this method returns P(X &le; x).\n      * @param x the value at which the PDF is evaluated.\n      * @return PDF for this distribution. \n      */\n     }\n \n     /**\n-     * For this disbution, X, this method returns P(X = x).\n+     * For this distribution, X, this method returns P(X = x).\n      * \n      * @param x the value at which the PMF is evaluated.\n      * @return PMF for this distribution. \n     }\n     \n     /**\n-     * For the disbution, X, defined by the given hypergeometric distribution\n+     * For the distribution, X, defined by the given hypergeometric distribution\n      * parameters, this method returns P(X = x).\n      * \n      * @param n the population size.\n     }\n \n     /**\n-     * For this disbution, X, this method returns P(X &ge; x).\n+     * For this distribution, X, this method returns P(X &ge; x).\n      * @param x the value at which the CDF is evaluated.\n      * @return upper tail CDF for this distribution.\n      * @since 1.1\n     }\n     \n     /**\n-     * For this disbution, X, this method returns P(x0 &le; X &le; x1).  This\n+     * For this distribution, X, this method returns P(x0 &le; X &le; x1).  This\n      * probability is computed by summing the point probabilities for the values\n      * x0, x0 + 1, x0 + 2, ..., x1, in the order directed by dx. \n      * @param x0 the inclusive, lower bound\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n     }\n \n     /**\n-     * For this disbution, X, this method returns P(X &lt; <code>x</code>).\n+     * For this distribution, X, this method returns P(X &lt; <code>x</code>).\n      * @param x the value at which the CDF is evaluated.\n      * @return CDF evaluted at <code>x</code>. \n      * @throws MathException if the algorithm fails to converge; unless\n--- a/src/java/org/apache/commons/math/distribution/TDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/TDistributionImpl.java\n     }\n \n     /**\n-     * For this disbution, X, this method returns P(X &lt; <code>x</code>).\n+     * For this distribution, X, this method returns P(X &lt; <code>x</code>).\n      * @param x the value at which the CDF is evaluated.\n      * @return CDF evaluted at <code>x</code>. \n      * @throws MathException if the cumulative probability can not be\n--- a/src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java\n     }\n \n     /**\n-     * For this disbution, X, this method returns P(X &lt; <code>x</code>).\n+     * For this distribution, X, this method returns P(X &lt; <code>x</code>).\n      * @param x the value at which the CDF is evaluated.\n      * @return CDF evaluted at <code>x</code>. \n      */", "timestamp": 1204745378, "metainfo": ""}