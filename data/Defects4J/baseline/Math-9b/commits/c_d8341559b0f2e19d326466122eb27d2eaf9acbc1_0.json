{"sha": "d8341559b0f2e19d326466122eb27d2eaf9acbc1", "log": "Make CMA-ES input sigma is now consistent with boundaries units.  JIRA: MATH-702  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\n                     throw new NotPositiveException(inputSigma[i]);\n                 }\n                 if (boundaries != null) {\n-                    if (inputSigma[i] > 1.0) {\n-                        throw new OutOfRangeException(inputSigma[i], 0, 1.0);\n+                    if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {\n+                        throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);\n                     }\n                 }\n             }\n         // initialize sigma\n         double[][] sigmaArray = new double[guess.length][1];\n         for (int i = 0; i < guess.length; i++) {\n-            sigmaArray[i][0] = inputSigma != null ? inputSigma[i] : 0.3;\n+            final double range =  (boundaries == null) ? 1.0 : boundaries[1][i] - boundaries[0][i];\n+            sigmaArray[i][0]   = ((inputSigma == null) ? 0.3 : inputSigma[i]) / range;\n         }\n         RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);\n         sigma = max(insigma); // overall standard deviation\n--- a/src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java\n     public void testInputSigmaOutOfRange() {\n         double[] startPoint = point(DIM,0.5);\n         double[] insigma = point(DIM, 1.1);\n-        double[][] boundaries = boundaries(DIM,-1,2);\n+        double[][] boundaries = boundaries(DIM,-0.5,0.5);\n         RealPointValuePair expected =\n             new RealPointValuePair(point(DIM,1.0),0.0);\n         doTest(new Rosen(), startPoint, insigma, boundaries,", "timestamp": 1320675165, "metainfo": ""}