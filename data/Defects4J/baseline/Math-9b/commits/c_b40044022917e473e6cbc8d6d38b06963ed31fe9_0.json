{"sha": "b40044022917e473e6cbc8d6d38b06963ed31fe9", "log": "Fix up double nextAfter special cases; add float test  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n \n     }\n \n-    public void testNextAfterSpecialCases() {\n-        assertTrue(Double.isInfinite(FastMath.nextAfter(Double.NEGATIVE_INFINITY, 0)));\n-        assertTrue(Double.isInfinite(FastMath.nextAfter(Double.POSITIVE_INFINITY, 0)));\n-        assertTrue(Double.isNaN(FastMath.nextAfter(Double.NaN, 0)));\n-        assertTrue(Double.isInfinite(FastMath.nextAfter(Double.MAX_VALUE, Double.POSITIVE_INFINITY)));\n-        assertTrue(Double.isInfinite(FastMath.nextAfter(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY)));\n-        assertEquals(Double.MIN_VALUE, FastMath.nextAfter(0, 1), 0);\n-        assertEquals(-Double.MIN_VALUE, FastMath.nextAfter(0, -1), 0);\n-        assertEquals(0, FastMath.nextAfter(Double.MIN_VALUE, -1), 0);\n-        assertEquals(0, FastMath.nextAfter(-Double.MIN_VALUE, 1), 0);\n+    public void testDoubleNextAfterSpecialCases() {\n+        assertEquals(-Double.MAX_VALUE,FastMath.nextAfter(Double.NEGATIVE_INFINITY, 0D));\n+        assertEquals(Double.MAX_VALUE,FastMath.nextAfter(Double.POSITIVE_INFINITY, 0D));\n+        assertEquals(Double.NaN,FastMath.nextAfter(Double.NaN, 0D));\n+        assertEquals(Double.POSITIVE_INFINITY,FastMath.nextAfter(Double.MAX_VALUE, Double.POSITIVE_INFINITY));\n+        assertEquals(Double.NEGATIVE_INFINITY,FastMath.nextAfter(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY));\n+        assertEquals(Double.MIN_VALUE, FastMath.nextAfter(0D, 1D), 0D);\n+        assertEquals(-Double.MIN_VALUE, FastMath.nextAfter(0D, -1D), 0D);\n+        assertEquals(0D, FastMath.nextAfter(Double.MIN_VALUE, -1), 0D);\n+        assertEquals(0D, FastMath.nextAfter(-Double.MIN_VALUE, 1), 0D);\n+    }\n+\n+    public void testFloatNextAfterSpecialCases() {\n+        assertEquals(-Float.MAX_VALUE,FastMath.nextAfter(Float.NEGATIVE_INFINITY, 0F));\n+        assertEquals(Float.MAX_VALUE,FastMath.nextAfter(Float.POSITIVE_INFINITY, 0F));\n+        assertEquals(Float.NaN,FastMath.nextAfter(Float.NaN, 0F));\n+        assertEquals(Float.POSITIVE_INFINITY,FastMath.nextAfter(Float.MAX_VALUE, Float.POSITIVE_INFINITY));\n+        assertEquals(Float.NEGATIVE_INFINITY,FastMath.nextAfter(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY));\n+        assertEquals(Float.MIN_VALUE, FastMath.nextAfter(0F, 1F), 0F);\n+        assertEquals(-Float.MIN_VALUE, FastMath.nextAfter(0F, -1F), 0F);\n+        assertEquals(0F, FastMath.nextAfter(Float.MIN_VALUE, -1F), 0F);\n+        assertEquals(0F, FastMath.nextAfter(-Float.MIN_VALUE, 1F), 0F);\n     }\n \n     public void testScalb() {", "timestamp": 1295577952, "metainfo": ""}