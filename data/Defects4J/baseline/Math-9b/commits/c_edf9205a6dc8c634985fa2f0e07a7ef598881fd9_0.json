{"sha": "edf9205a6dc8c634985fa2f0e07a7ef598881fd9", "log": "Added a compareTo method to MathUtils that uses a number of ulps as a tolerance error, and works well on all numbers, including normals, subnormals, signed zeroes, infinities and NaNs  Jira: MATH-557  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n         if (equals(x, y, eps)) {\n             return 0;\n         } else if (x < y) {\n-          return -1;\n+            return -1;\n+        }\n+        return 1;\n+    }\n+\n+    /**\n+     * Compares two numbers given some amount of allowed error.\n+     * Two float numbers are considered equal if there are {@code (maxUlps - 1)}\n+     * (or fewer) floating point numbers between them, i.e. two adjacent floating\n+     * point numbers are considered equal.\n+     * Adapted from <a\n+     * href=\"http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm\">\n+     * Bruce Dawson</a>\n+     *\n+     * @param x first value\n+     * @param y second value\n+     * @param maxUlps {@code (maxUlps - 1)} is the number of floating point\n+     * values between {@code x} and {@code y}.\n+     * @return <ul><li>0 if  {@link #equals(double, double, int) equals(x, y, maxUlps)}</li>\n+     *       <li>&lt; 0 if !{@link #equals(double, double, int) equals(x, y, maxUlps)} &amp;&amp; x &lt; y</li>\n+     *       <li>> 0 if !{@link #equals(double, double, int) equals(x, y, maxUlps)} &amp;&amp; x > y</li></ul>\n+     */\n+    public static int compareTo(final double x, final double y, final int maxUlps) {\n+        if (equals(x, y, maxUlps)) {\n+            return 0;\n+        } else if (x < y) {\n+            return -1;\n         }\n         return 1;\n     }\n--- a/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n import org.apache.commons.math.exception.NonMonotonousSequenceException;\n import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.apache.commons.math.exception.MathArithmeticException;\n-import org.apache.commons.math.exception.MathRuntimeException;\n import org.apache.commons.math.exception.NotFiniteNumberException;\n import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n     }\n \n     @Test\n-    public void testCompareTo() {\n-      Assert.assertEquals(0, MathUtils.compareTo(152.33, 152.32, .011));\n-      Assert.assertTrue(MathUtils.compareTo(152.308, 152.32, .011) < 0);\n-      Assert.assertTrue(MathUtils.compareTo(152.33, 152.318, .011) > 0);\n+    public void testCompareToEpsilon() {\n+        Assert.assertEquals(0, MathUtils.compareTo(152.33, 152.32, .011));\n+        Assert.assertTrue(MathUtils.compareTo(152.308, 152.32, .011) < 0);\n+        Assert.assertTrue(MathUtils.compareTo(152.33, 152.318, .011) > 0);\n+        Assert.assertEquals(0, MathUtils.compareTo(Double.MIN_VALUE, +0.0, Double.MIN_VALUE));\n+        Assert.assertEquals(0, MathUtils.compareTo(Double.MIN_VALUE, -0.0, Double.MIN_VALUE));\n+    }\n+\n+    @Test\n+    public void testCompareToMaxUlps() {\n+        double a     = 152.32;\n+        double delta = FastMath.ulp(a);\n+        for (int i = 0; i <= 10; ++i) {\n+            if (i <= 5) {\n+                Assert.assertEquals( 0, MathUtils.compareTo(a, a + i * delta, 5));\n+                Assert.assertEquals( 0, MathUtils.compareTo(a, a - i * delta, 5));\n+            } else {\n+                Assert.assertEquals(-1, MathUtils.compareTo(a, a + i * delta, 5));\n+                Assert.assertEquals(+1, MathUtils.compareTo(a, a - i * delta, 5));\n+            }\n+        }\n+\n+        Assert.assertEquals( 0, MathUtils.compareTo(-0.0, 0.0, 0));\n+\n+        Assert.assertEquals(-1, MathUtils.compareTo(-Double.MIN_VALUE, -0.0, 0));\n+        Assert.assertEquals( 0, MathUtils.compareTo(-Double.MIN_VALUE, -0.0, 1));\n+        Assert.assertEquals(-1, MathUtils.compareTo(-Double.MIN_VALUE, +0.0, 0));\n+        Assert.assertEquals( 0, MathUtils.compareTo(-Double.MIN_VALUE, +0.0, 1));\n+\n+        Assert.assertEquals(+1, MathUtils.compareTo( Double.MIN_VALUE, -0.0, 0));\n+        Assert.assertEquals( 0, MathUtils.compareTo( Double.MIN_VALUE, -0.0, 1));\n+        Assert.assertEquals(+1, MathUtils.compareTo( Double.MIN_VALUE, +0.0, 0));\n+        Assert.assertEquals( 0, MathUtils.compareTo( Double.MIN_VALUE, +0.0, 1));\n+\n+        Assert.assertEquals(-1, MathUtils.compareTo(-Double.MIN_VALUE, Double.MIN_VALUE, 0));\n+        Assert.assertEquals(-1, MathUtils.compareTo(-Double.MIN_VALUE, Double.MIN_VALUE, 1));\n+        Assert.assertEquals( 0, MathUtils.compareTo(-Double.MIN_VALUE, Double.MIN_VALUE, 2));\n+\n+        Assert.assertEquals( 0, MathUtils.compareTo(Double.MAX_VALUE, Double.POSITIVE_INFINITY, 1));\n+        Assert.assertEquals(-1, MathUtils.compareTo(Double.MAX_VALUE, Double.POSITIVE_INFINITY, 0));\n+\n+        Assert.assertEquals(+1, MathUtils.compareTo(Double.MAX_VALUE, Double.NaN, Integer.MAX_VALUE));\n+        Assert.assertEquals(+1, MathUtils.compareTo(Double.NaN, Double.MAX_VALUE, Integer.MAX_VALUE));\n+\n     }\n \n     @Test", "timestamp": 1302451011, "metainfo": ""}