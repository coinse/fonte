{"sha": "eab40c568bb0d839a63583803fa909f7a0268275", "log": "removed MathUserException from linear package  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/FieldMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/FieldMatrix.java\n      * of a row from left to right before going to the leftmost element\n      * of the next row.</p>\n      * @param visitor visitor used to process all matrix entries\n-     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n-     * cannot process an entry.\n      * @see #walkInRowOrder(FieldMatrixPreservingVisitor)\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor, int, int, int, int)\n      * @see #walkInRowOrder(FieldMatrixPreservingVisitor, int, int, int, int)\n      * of a row from left to right before going to the leftmost element\n      * of the next row.</p>\n      * @param visitor visitor used to process all matrix entries\n-     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n-     * cannot process an entry.\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor)\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor, int, int, int, int)\n      * @see #walkInRowOrder(FieldMatrixPreservingVisitor, int, int, int, int)\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index\n-     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n-     * cannot process an entry.\n      * @throws org.apache.commons.math.exception.OutOfRangeException\n      * if the indices are not valid.\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor)\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index\n-     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n-     * cannot process an entry.\n      * @throws org.apache.commons.math.exception.OutOfRangeException\n      * if the indices are not valid.\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor)\n      * of a column from top to bottom before going to the topmost element\n      * of the next column.</p>\n      * @param visitor visitor used to process all matrix entries\n-     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n-     * cannot process an entry.\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor)\n      * @see #walkInRowOrder(FieldMatrixPreservingVisitor)\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor, int, int, int, int)\n      * of a column from top to bottom before going to the topmost element\n      * of the next column.</p>\n      * @param visitor visitor used to process all matrix entries\n-     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n-     * cannot process an entry.\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor)\n      * @see #walkInRowOrder(FieldMatrixPreservingVisitor)\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor, int, int, int, int)\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index\n-     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n-     * cannot process an entry.\n      * @throws org.apache.commons.math.exception.OutOfRangeException\n      * if the indices are not valid.\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor)\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index\n-     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n-     * cannot process an entry.\n      * @throws org.apache.commons.math.exception.OutOfRangeException\n      * if the indices are not valid.\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor)\n      * <p>The fastest walking order depends on the exact matrix class. It may be\n      * different from traditional row or column orders.</p>\n      * @param visitor visitor used to process all matrix entries\n-     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n-     * cannot process an entry.\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor)\n      * @see #walkInRowOrder(FieldMatrixPreservingVisitor)\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor, int, int, int, int)\n      * <p>The fastest walking order depends on the exact matrix class. It may be\n      * different from traditional row or column orders.</p>\n      * @param visitor visitor used to process all matrix entries\n-     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n-     * cannot process an entry.\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor)\n      * @see #walkInRowOrder(FieldMatrixPreservingVisitor)\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor, int, int, int, int)\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index (inclusive)\n-     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n-     * cannot process an entry.\n      * @throws org.apache.commons.math.exception.OutOfRangeException\n      * if the indices are not valid.\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor)\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index (inclusive)\n-     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n-     * cannot process an entry.\n      * @throws org.apache.commons.math.exception.OutOfRangeException\n      * if the indices are not valid.\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor)\n--- a/src/main/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java\n+++ b/src/main/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java\n      * @param column column index of the entry\n      * @param value current value of the entry\n      * @return the new value to be set for the entry\n-     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n-     * cannot process an entry.\n      */\n     T visit(int row, int column, T value);\n \n--- a/src/main/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java\n+++ b/src/main/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java\n      * @param row row index of the entry\n      * @param column column index of the entry\n      * @param value current value of the entry\n-     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n-     * cannot process an entry.\n      */\n     void visit(int row, int column, T value);\n \n--- a/src/main/java/org/apache/commons/math/linear/RealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/RealMatrix.java\n      * of a row from left to right before going to the leftmost element\n      * of the next row.</p>\n      * @param visitor visitor used to process all matrix entries\n-     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n-     * cannot process an entry.\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor)\n      * @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor, int, int, int, int)\n      * of a row from left to right before going to the leftmost element\n      * of the next row.</p>\n      * @param visitor visitor used to process all matrix entries\n-     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n-     * cannot process an entry.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor, int, int, int, int)\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index\n-     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n-     * cannot process an entry.\n      * @throws org.apache.commons.math.exception.OutOfRangeException if\n      * the indices are not valid.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index\n-     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n-     * cannot process an entry.\n      * @throws org.apache.commons.math.exception.OutOfRangeException if\n      * the indices are not valid.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * of a column from top to bottom before going to the topmost element\n      * of the next column.</p>\n      * @param visitor visitor used to process all matrix entries\n-     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n-     * cannot process an entry.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor)\n      * @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)\n      * of a column from top to bottom before going to the topmost element\n      * of the next column.</p>\n      * @param visitor visitor used to process all matrix entries\n-     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n-     * cannot process an entry.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor)\n      * @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index\n-     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n-     * cannot process an entry.\n      * @throws org.apache.commons.math.exception.OutOfRangeException if\n      * the indices are not valid.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index\n-     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n-     * cannot process an entry.\n      * @throws org.apache.commons.math.exception.OutOfRangeException if\n      * the indices are not valid.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * <p>The fastest walking order depends on the exact matrix class. It may be\n      * different from traditional row or column orders.</p>\n      * @param visitor visitor used to process all matrix entries\n-     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n-     * cannot process an entry.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor)\n      * @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)\n      * <p>The fastest walking order depends on the exact matrix class. It may be\n      * different from traditional row or column orders.</p>\n      * @param visitor visitor used to process all matrix entries\n-     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n-     * cannot process an entry.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor)\n      * @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index (inclusive)\n-     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n-     * cannot process an entry.\n      * @throws org.apache.commons.math.exception.OutOfRangeException if\n      * the indices are not valid.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index (inclusive)\n-     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n-     * cannot process an entry.\n      * @throws org.apache.commons.math.exception.OutOfRangeException if the\n      * indices are not valid.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n--- a/src/main/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java\n+++ b/src/main/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java\n      * @param column column index of the entry\n      * @param value current value of the entry\n      * @return the new value to be set for the entry\n-     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n-     * cannot process an entry.\n      */\n     double visit(int row, int column, double value);\n \n--- a/src/main/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java\n+++ b/src/main/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java\n      * @param row row index of the entry\n      * @param column column index of the entry\n      * @param value current value of the entry\n-     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n-     * cannot process an entry.\n      */\n     void visit(int row, int column, double value);\n \n--- a/src/main/java/org/apache/commons/math/linear/RealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/RealVector.java\n      *\n      * @param function Function to apply to each entry.\n      * @return a new vector.\n-     * @throws org.apache.commons.math.exception.MathUserException\n-     * if the function throws it.\n      */\n     public RealVector map(UnivariateRealFunction function) {\n         return copy().mapToSelf(function);\n      *\n      * @param function Function to apply to each entry.\n      * @return a reference to this vector.\n-     * @throws org.apache.commons.math.exception.MathUserException\n-     * if the function throws it.\n      */\n     public RealVector mapToSelf(UnivariateRealFunction function) {\n         Iterator<Entry> it = (function.value(0) == 0) ? sparseIterator() : iterator();\n--- a/src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java\n     }\n \n     @Test\n-    public void testWalk() throws MathUserException {\n+    public void testWalk() {\n         int rows    = 150;\n         int columns = 75;\n \n--- a/src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java\n     }\n \n     @Test\n-    public void testWalk() throws MathUserException {\n+    public void testWalk() {\n         int rows    = 150;\n         int columns = 75;\n \n--- a/src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java\n     }\n \n     @Test\n-    public void testWalk() throws MathUserException {\n+    public void testWalk() {\n         int rows    = 150;\n         int columns = 75;\n \n--- a/src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java\n     }\n \n     @Test\n-    public void testWalk() throws MathUserException {\n+    public void testWalk() {\n         int rows    = 150;\n         int columns = 75;\n \n--- a/src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java\n \n import java.util.Random;\n \n-import org.apache.commons.math.exception.MathUserException;\n import org.junit.Assert;\n import org.junit.Test;\n \n \n     private static final double normTolerance = 10e-14;\n \n-    /** test dimensions \n-     * @throws MathUserException */\n-    @Test\n-    public void testDimensions() throws MathUserException {\n+    /** test dimensions */\n+    @Test\n+    public void testDimensions() {\n         checkDimension(MatrixUtils.createRealMatrix(testData3x3NonSingular));\n \n         checkDimension(MatrixUtils.createRealMatrix(testData4x3));\n         Assert.assertEquals(columns, qr.getR().getColumnDimension());\n     }\n \n-    /** test A = QR \n-     * @throws MathUserException */\n-    @Test\n-    public void testAEqualQR() throws MathUserException {\n+    /** test A = QR */\n+    @Test\n+    public void testAEqualQR() {\n         checkAEqualQR(MatrixUtils.createRealMatrix(testData3x3NonSingular));\n \n         checkAEqualQR(MatrixUtils.createRealMatrix(testData3x3Singular));\n         Assert.assertEquals(0, norm, normTolerance);\n     }\n \n-    /** test the orthogonality of Q \n-     * @throws MathUserException */\n-    @Test\n-    public void testQOrthogonal() throws MathUserException {\n+    /** test the orthogonality of Q */\n+    @Test\n+    public void testQOrthogonal() {\n         checkQOrthogonal(MatrixUtils.createRealMatrix(testData3x3NonSingular));\n \n         checkQOrthogonal(MatrixUtils.createRealMatrix(testData3x3Singular));\n \n     /** test that R is upper triangular */\n     @Test\n-    public void testRUpperTriangular() throws MathUserException {\n+    public void testRUpperTriangular() {\n         RealMatrix matrix = MatrixUtils.createRealMatrix(testData3x3NonSingular);\n         checkUpperTriangular(new QRDecompositionImpl(matrix).getR());\n \n \n     }\n \n-    private void checkUpperTriangular(RealMatrix m) throws MathUserException {\n+    private void checkUpperTriangular(RealMatrix m) {\n         m.walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {\n             @Override\n             public void visit(int row, int column, double value) {\n         });\n     }\n \n-    /** test that H is trapezoidal \n-     * @throws MathUserException */\n-    @Test\n-    public void testHTrapezoidal() throws MathUserException {\n+    /** test that H is trapezoidal */\n+    @Test\n+    public void testHTrapezoidal() {\n         RealMatrix matrix = MatrixUtils.createRealMatrix(testData3x3NonSingular);\n         checkTrapezoidal(new QRDecompositionImpl(matrix).getH());\n \n \n     }\n \n-    private void checkTrapezoidal(RealMatrix m) throws MathUserException {\n+    private void checkTrapezoidal(RealMatrix m) {\n         m.walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {\n             @Override\n             public void visit(int row, int column, double value) {\n--- a/src/test/java/org/apache/commons/math/linear/QRSolverTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/QRSolverTest.java\n \n import java.util.Random;\n \n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.exception.MathIllegalArgumentException;\n \n import org.junit.Test;\n     }\n \n     @Test\n-    public void testOverdetermined() throws MathUserException {\n+    public void testOverdetermined() {\n         final Random r    = new Random(5559252868205245l);\n         int          p    = (7 * BlockRealMatrix.BLOCK_SIZE) / 4;\n         int          q    = (5 * BlockRealMatrix.BLOCK_SIZE) / 4;\n     }\n \n     @Test\n-    public void testUnderdetermined() throws MathUserException {\n+    public void testUnderdetermined() {\n         final Random r    = new Random(42185006424567123l);\n         int          p    = (5 * BlockRealMatrix.BLOCK_SIZE) / 4;\n         int          q    = (7 * BlockRealMatrix.BLOCK_SIZE) / 4;", "timestamp": 1315340377, "metainfo": ""}