{"sha": "8cbd63844bcc221f9f69a5a53245c6f96dcf38b7", "log": "deprecated tests concerning deprecated methods, to remove numerous warnings JIRA: MATH-171  ", "commit": "\n--- a/src/test/org/apache/commons/math/complex/ComplexUtilsTest.java\n+++ b/src/test/org/apache/commons/math/complex/ComplexUtilsTest.java\n     private Complex infZero = new Complex(inf, 0);\n     private Complex zeroInf = new Complex(0, inf);\n     private Complex negInfZero = new Complex(negInf, 0);\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testAcos() {\n         Complex z = new Complex(3, 4);\n         Complex expected = new Complex(0.936812, -2.30551);\n         TestUtils.assertEquals(new Complex(Math.acos(0), 0), \n                 ComplexUtils.acos(Complex.ZERO), 1.0e-12);\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testAcosInf() {\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.acos(oneInf));\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.acos(oneNegInf));\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.acos(negInfInf));\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.acos(negInfNegInf));\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testAcosNaN() {\n         assertTrue(ComplexUtils.acos(Complex.NaN).isNaN());\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testAcosNull() {\n         try {\n             ComplexUtils.acos(null); \n             // expected\n         }\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testAsin() {\n         Complex z = new Complex(3, 4);\n         Complex expected = new Complex(0.633984, 2.30551);\n         TestUtils.assertEquals(expected, ComplexUtils.asin(z), 1.0e-5);\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testAsinNaN() {\n         assertTrue(ComplexUtils.asin(Complex.NaN).isNaN());\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testAsinInf() {\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.asin(oneInf));\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.asin(oneNegInf));\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.asin(negInfInf));\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.asin(negInfNegInf));\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testAsinNull() {\n         try {\n             ComplexUtils.asin(null); \n             // expected\n         }\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testAtan() {\n         Complex z = new Complex(3, 4);\n         Complex expected = new Complex(1.44831, 0.158997);\n         TestUtils.assertEquals(expected, ComplexUtils.atan(z), 1.0e-5);\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testAtanInf() {\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.atan(oneInf));\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.atan(oneNegInf));\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.atan(negInfInf));\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.atan(negInfNegInf));\n     } \n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testAtanNaN() {\n         assertTrue(ComplexUtils.atan(Complex.NaN).isNaN());\n         assertTrue(ComplexUtils.atan(Complex.I).isNaN());\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testAtanNull() {\n         try {\n             ComplexUtils.atan(null); \n             // expected\n         }\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testCos() {\n         Complex z = new Complex(3, 4);\n         Complex expected = new Complex(-27.03495, -3.851153);\n         TestUtils.assertEquals(expected, ComplexUtils.cos(z), 1.0e-5);\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testCosNaN() {\n         assertTrue(ComplexUtils.cos(Complex.NaN).isNaN());\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testCosInf() {\n         TestUtils.assertSame(infNegInf, ComplexUtils.cos(oneInf));\n         TestUtils.assertSame(infInf, ComplexUtils.cos(oneNegInf));\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.cos(negInfInf));\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.cos(negInfNegInf));\n     } \n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testCosNull() {\n         try {\n             ComplexUtils.cos(null); \n             // expected\n         }\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testCosh() {\n         Complex z = new Complex(3, 4);\n         Complex expected = new Complex(-6.58066, -7.58155);\n         TestUtils.assertEquals(expected, ComplexUtils.cosh(z), 1.0e-5);\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testCoshNaN() {\n         assertTrue(ComplexUtils.cosh(Complex.NaN).isNaN());\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testCoshInf() {  \n         TestUtils.assertSame(Complex.NaN, ComplexUtils.cosh(oneInf));\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.cosh(oneNegInf));\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.cosh(negInfInf));\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.cosh(negInfNegInf));\n     } \n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testCoshNull() {\n         try {\n             ComplexUtils.cosh(null); \n             // expected\n         }\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testExp() {\n         Complex z = new Complex(3, 4);\n         Complex expected = new Complex(-13.12878, -15.20078);\n         TestUtils.assertEquals(Complex.ONE.negate(), \n                 ComplexUtils.exp(iPi), 10e-12);\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testExpNaN() {\n         assertTrue(ComplexUtils.exp(Complex.NaN).isNaN());\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testExpInf() {\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.exp(oneInf));\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.exp(oneNegInf));\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.exp(negInfInf));\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.exp(negInfNegInf));\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testExpNull() {\n         try {\n             ComplexUtils.exp(null); \n             // expected\n         }\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testLog() {\n         Complex z = new Complex(3, 4);\n         Complex expected = new Complex(1.60944, 0.927295);\n         TestUtils.assertEquals(expected, ComplexUtils.log(z), 1.0e-5);\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testLogNaN() {\n         assertTrue(ComplexUtils.log(Complex.NaN).isNaN());\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testLogInf() {\n         TestUtils.assertEquals(new Complex(inf, pi / 2),\n                 ComplexUtils.log(oneInf), 10e-12);\n         TestUtils.assertEquals(new Complex(inf, - 3d * pi / 4),\n                 ComplexUtils.log(negInfNegInf), 10e-12);\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testLogZero() {\n         TestUtils.assertSame(negInfZero, ComplexUtils.log(Complex.ZERO));\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testlogNull() {\n         try {\n             ComplexUtils.log(null); \n           }\n         }   \n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     protected Complex altPolar(double r, double theta) {\n         return ComplexUtils.exp(Complex.I.multiply\n                 (new Complex(theta, 0))).multiply(new Complex(r, 0));\n         TestUtils.assertSame(negInfInf, ComplexUtils.polar2Complex(inf, 3*pi/4));\n         TestUtils.assertSame(negInfNegInf, ComplexUtils.polar2Complex(inf, 5*pi/4));\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testPow() {\n         Complex x = new Complex(3, 4);\n         Complex y = new Complex(5, 6);\n         Complex expected = new Complex(-1.860893, 11.83677);\n         TestUtils.assertEquals(expected, ComplexUtils.pow(x, y), 1.0e-5);\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testPowNaNBase() {\n         Complex x = new Complex(3, 4);\n         assertTrue(ComplexUtils.pow(Complex.NaN, x).isNaN());\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testPowNaNExponent() {\n         Complex x = new Complex(3, 4);\n         assertTrue(ComplexUtils.pow(x, Complex.NaN).isNaN());\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n    public void testPowInf() {\n        TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(Complex.ONE, oneInf));\n        TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(Complex.ONE, oneNegInf));\n        TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(infNegInf, negInfNegInf));\n        TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(infNegInf, infInf));   \n    }\n-   \n+\n+   /** @deprecated to be removed in 2.0 */\n    public void testPowZero() {\n        TestUtils.assertSame(Complex.NaN, \n                ComplexUtils.pow(Complex.ZERO, Complex.ONE));\n        TestUtils.assertEquals(Complex.ONE,\n                ComplexUtils.pow(new Complex(-1, 3), Complex.ZERO), 10e-12);\n    }\n-    \n+\n+   /** @deprecated to be removed in 2.0 */\n     public void testpowNull() {\n         try {\n             ComplexUtils.pow(null, Complex.ONE); \n             // expected\n         }\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testSin() {\n         Complex z = new Complex(3, 4);\n         Complex expected = new Complex(3.853738, -27.01681);\n         TestUtils.assertEquals(expected, ComplexUtils.sin(z), 1.0e-5);\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testSinInf() {\n         TestUtils.assertSame(infInf, ComplexUtils.sin(oneInf));\n         TestUtils.assertSame(infNegInf, ComplexUtils.sin(oneNegInf));\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.sin(negInfInf));\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.sin(negInfNegInf));\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testSinNaN() {\n         assertTrue(ComplexUtils.sin(Complex.NaN).isNaN());\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testSinNull() {\n         try {\n             ComplexUtils.sin(null); \n             // expected\n         }\n     }\n-     \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testSinh() {\n         Complex z = new Complex(3, 4);\n         Complex expected = new Complex(-6.54812, -7.61923);\n         TestUtils.assertEquals(expected, ComplexUtils.sinh(z), 1.0e-5);\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testSinhNaN() {\n         assertTrue(ComplexUtils.sinh(Complex.NaN).isNaN());\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testSinhInf() {\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.sinh(oneInf));\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.sinh(oneNegInf));\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.sinh(negInfInf));\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.sinh(negInfNegInf));\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testsinhNull() {\n         try {\n             ComplexUtils.sinh(null); \n             // expected\n         }\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testSqrtRealPositive() {\n         Complex z = new Complex(3, 4);\n         Complex expected = new Complex(2, 1);\n         TestUtils.assertEquals(expected, ComplexUtils.sqrt(z), 1.0e-5);\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testSqrtRealZero() {\n         Complex z = new Complex(0.0, 4);\n         Complex expected = new Complex(1.41421, 1.41421);\n         TestUtils.assertEquals(expected, ComplexUtils.sqrt(z), 1.0e-5);\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testSqrtRealNegative() {\n         Complex z = new Complex(-3.0, 4);\n         Complex expected = new Complex(1, 2);\n         TestUtils.assertEquals(expected, ComplexUtils.sqrt(z), 1.0e-5);\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testSqrtImaginaryZero() {\n         Complex z = new Complex(-3.0, 0.0);\n         Complex expected = new Complex(0.0, 1.73205);\n         TestUtils.assertEquals(expected, ComplexUtils.sqrt(z), 1.0e-5);\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testSqrtImaginaryNegative() {\n         Complex z = new Complex(-3.0, -4.0);\n         Complex expected = new Complex(1.0, -2.0);\n         TestUtils.assertEquals(expected, ComplexUtils.sqrt(z), 1.0e-5);\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testSqrtPolar() {\n         double r = 1;\n         for (int i = 0; i < 5; i++) {\n             }\n         }       \n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testSqrtNaN() {\n         assertTrue(ComplexUtils.sqrt(Complex.NaN).isNaN());\n     }\n-      \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testSqrtInf() {\n         TestUtils.assertSame(infNaN, ComplexUtils.sqrt(oneInf));\n         TestUtils.assertSame(infNaN, ComplexUtils.sqrt(oneNegInf));\n         TestUtils.assertSame(nanInf, ComplexUtils.sqrt(negInfInf));\n         TestUtils.assertSame(nanNegInf, ComplexUtils.sqrt(negInfNegInf));\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testSqrtNull() {\n         try {\n             ComplexUtils.sqrt(null); \n         }\n     }\n \n+    /** @deprecated to be removed in 2.0 */\n     public void testSqrt1z() {\n         Complex z = new Complex(3, 4);\n         Complex expected = new Complex(4.08033, -2.94094);\n         TestUtils.assertEquals(expected, ComplexUtils.sqrt1z(z), 1.0e-5);\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testSqrt1zNaN() {\n         assertTrue(ComplexUtils.sqrt1z(Complex.NaN).isNaN());\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testSqrt1zNull() {\n         try {\n             ComplexUtils.sqrt1z(null); \n             // expected\n         }\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testTan() {\n         Complex z = new Complex(3, 4);\n         Complex expected = new Complex(-0.000187346, 0.999356);\n         TestUtils.assertEquals(expected, ComplexUtils.tan(z), 1.0e-5);\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testTanNaN() {\n         assertTrue(ComplexUtils.tan(Complex.NaN).isNaN());\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testTanInf() {\n         TestUtils.assertSame(zeroNaN, ComplexUtils.tan(oneInf));\n         TestUtils.assertSame(zeroNaN, ComplexUtils.tan(oneNegInf));\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.tan(negInfInf));\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.tan(negInfNegInf));\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n    public void testTanCritical() {\n         TestUtils.assertSame(infNaN, ComplexUtils.tan(new Complex(pi/2, 0)));\n         TestUtils.assertSame(negInfNaN, ComplexUtils.tan(new Complex(-pi/2, 0)));\n     }\n-    \n+\n+   /** @deprecated to be removed in 2.0 */\n     public void testTanNull() {\n         try {\n             ComplexUtils.tan(null); \n             // expected\n         }\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testTanh() {\n         Complex z = new Complex(3, 4);\n         Complex expected = new Complex(1.00071, 0.00490826);\n         TestUtils.assertEquals(expected, ComplexUtils.tanh(z), 1.0e-5);\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testTanhNaN() {\n         assertTrue(ComplexUtils.tanh(Complex.NaN).isNaN());\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testTanhInf() {\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.tanh(oneInf));\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.tanh(oneNegInf));\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.tanh(negInfInf));\n         TestUtils.assertSame(Complex.NaN, ComplexUtils.tanh(negInfNegInf));\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testTanhCritical() {\n         TestUtils.assertSame(nanInf, ComplexUtils.tanh(new Complex(0, pi/2)));\n     }\n-    \n+\n+    /** @deprecated to be removed in 2.0 */\n     public void testTanhNull() {\n         try {\n             ComplexUtils.tanh(null); ", "timestamp": 1199972237, "metainfo": ""}