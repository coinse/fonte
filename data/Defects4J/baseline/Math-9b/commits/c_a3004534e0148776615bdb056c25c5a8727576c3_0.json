{"sha": "a3004534e0148776615bdb056c25c5a8727576c3", "log": "MATH-795: splitted tests for   - RealVector.setEntry(int, double),   - RealVector.addToEntry(int, double).   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n import org.apache.commons.math3.exception.NumberIsTooSmallException;\n import org.apache.commons.math3.exception.OutOfRangeException;\n import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.util.MathArrays;\n import org.junit.Test;\n \n \n         create(data1).getEntry(data1.length);\n     }\n \n+    @Test\n+    public void testSetEntry() {\n+        final double[] expected = MathArrays.copyOf(data1);\n+        final RealVector actual = create(data1);\n+\n+        /*\n+         * Try setting to any value.\n+         */\n+        for (int i = 0; i < data1.length; i++) {\n+            final double oldValue = data1[i];\n+            final double newValue = oldValue + 1d;\n+            expected[i] = newValue;\n+            actual.setEntry(i, newValue);\n+            TestUtils.assertEquals(\"while setting entry #\" + i, expected,\n+                actual, 0d);\n+            expected[i] = oldValue;\n+            actual.setEntry(i, oldValue);\n+        }\n+\n+        /*\n+         * Try setting to the preferred value.\n+         */\n+        final double x = getPreferredEntryValue();\n+        for (int i = 0; i < data1.length; i++) {\n+            final double oldValue = data1[i];\n+            final double newValue = x;\n+            expected[i] = newValue;\n+            actual.setEntry(i, newValue);\n+            TestUtils.assertEquals(\"while setting entry #\" + i, expected,\n+                actual, 0d);\n+            expected[i] = oldValue;\n+            actual.setEntry(i, oldValue);\n+        }\n+    }\n+\n+    @Test(expected=OutOfRangeException.class)\n+    public void testSetEntryInvalidIndex1() {\n+        create(data1).setEntry(-1, getPreferredEntryValue());\n+    }\n+\n+    @Test(expected=OutOfRangeException.class)\n+    public void testSetEntryInvalidIndex2() {\n+        create(data1).setEntry(data1.length, getPreferredEntryValue());\n+    }\n+\n+    @Test\n+    public void testAddToEntry() {\n+        final double[] expected = MathArrays.copyOf(data1);\n+        final RealVector actual = create(data1);\n+\n+        /*\n+         * Try adding any value.\n+         */\n+        double increment = 1d;\n+        for (int i = 0; i < data1.length; i++) {\n+            final double oldValue = data1[i];\n+            expected[i] += increment;\n+            actual.addToEntry(i, increment);\n+            TestUtils.assertEquals(\"while incrementing entry #\" + i, expected,\n+                actual, 0d);\n+            expected[i] = oldValue;\n+            actual.setEntry(i, oldValue);\n+        }\n+\n+        /*\n+         * Try incrementing so that result is equal to preferred value.\n+         */\n+        final double x = getPreferredEntryValue();\n+        for (int i = 0; i < data1.length; i++) {\n+            final double oldValue = data1[i];\n+            increment = x - oldValue;\n+            expected[i] = x;\n+            actual.addToEntry(i, increment);\n+            TestUtils.assertEquals(\"while incrementing entry #\" + i, expected,\n+                actual, 0d);\n+            expected[i] = oldValue;\n+            actual.setEntry(i, oldValue);\n+        }\n+    }\n+\n+    @Test(expected=OutOfRangeException.class)\n+    public void testAddToEntryInvalidIndex1() {\n+        create(data1).addToEntry(-1, getPreferredEntryValue());\n+    }\n+\n+    @Test(expected=OutOfRangeException.class)\n+    public void testAddToEntryInvalidIndex2() {\n+        create(data1).addToEntry(data1.length, getPreferredEntryValue());\n+    }\n+\n     private void doTestAppendVector(final String message, final RealVector v1,\n         final RealVector v2, final double delta) {\n \n     public void testSerial()  {\n         RealVector v = create(new double[] { 0, 1, 2 });\n         Assert.assertEquals(v,TestUtils.serializeAndRecover(v));\n-    }\n-\n-    @Test\n-    public void testAddToEntry() {\n-        final double[] v = new double[] { 1, 2, 3 };\n-        final RealVector x = create(v);\n-        final double inc = 7;\n-        for (int i = 0; i < x.getDimension(); i++) {\n-            x.addToEntry(i, inc);\n-        }\n-        for (int i = 0; i < x.getDimension(); i++) {\n-            Assert.assertEquals(v[i] + inc, x.getEntry(i), 0);\n-        }\n     }\n \n     @Test", "timestamp": 1339047944, "metainfo": ""}