{"sha": "e06fe05e2dd68936e770ba67caa7b9924568170d", "log": "MATH-552 Fixed bug in \"MultidimensionalCounter\". Thanks to James Bence.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n-        }\n-        --idx;\n-        indices[last] = idx;\n+        indices[last] = index - count;\n \n         return indices;\n     }\n--- a/src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java\n+++ b/src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java\n \n     @Test\n     public void testIterationConsistency() {\n-        final MultidimensionalCounter c = new MultidimensionalCounter(2, 3, 2);\n+        final MultidimensionalCounter c = new MultidimensionalCounter(2, 3, 4);\n         final int[][] expected = new int[][] {\n             { 0, 0, 0 },\n             { 0, 0, 1 },\n+            { 0, 0, 2 },\n+            { 0, 0, 3 },\n             { 0, 1, 0 },\n             { 0, 1, 1 },\n+            { 0, 1, 2 },\n+            { 0, 1, 3 },\n             { 0, 2, 0 },\n             { 0, 2, 1 },\n+            { 0, 2, 2 },\n+            { 0, 2, 3 },\n             { 1, 0, 0 },\n             { 1, 0, 1 },\n+            { 1, 0, 2 },\n+            { 1, 0, 3 },\n             { 1, 1, 0 },\n             { 1, 1, 1 },\n+            { 1, 1, 2 },\n+            { 1, 1, 3 },\n             { 1, 2, 0 },\n-            { 1, 2, 1 }\n+            { 1, 2, 1 },\n+            { 1, 2, 2 },\n+            { 1, 2, 3 }\n         };\n \n         final int totalSize = c.getSize();", "timestamp": 1301652618, "metainfo": ""}