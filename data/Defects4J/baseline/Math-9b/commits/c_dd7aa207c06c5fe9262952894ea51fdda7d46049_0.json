{"sha": "dd7aa207c06c5fe9262952894ea51fdda7d46049", "log": "MATH-397 New \"Incrementor\" utility class to encapsulate the counter of function evaluations.   ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/util/Incrementor.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.util;\n+\n+import org.apache.commons.math.exception.MaxCountExceededException;\n+\n+/**\n+ * Utility that increments a counter until a maximum is reached, at which\n+ * point it will throw an exception.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Incrementor {\n+    /**\n+     * Upper limit for the counter.\n+     */\n+    private int maximalCount;\n+    /**\n+     * Current count.\n+     */\n+    private int count;\n+\n+    /**\n+     * Set the upper limit for the counter.\n+     *\n+     * @param count Upper limit of the counter.\n+     */\n+    public void setMaximalCount(int count) {\n+        maximalCount = count;\n+    }\n+\n+    /**\n+     * Get the upper limit of the counter.\n+     *\n+     * @return the counter upper limit.\n+     */\n+    public int getMaximalCount() {\n+        return maximalCount;\n+    }\n+\n+    /**\n+     * Get the current count.\n+     *\n+     * @return the current count.\n+     */\n+    public int getCount() {\n+        return count;\n+    }\n+\n+    /**\n+     * Perform multiple increments.\n+     * See the other {@link #incrementCount() incrementCount} method).\n+     *\n+     * @param value Number of increments.\n+     * @throws MaxCountExceededException at counter exhaustion.\n+     */\n+    public void incrementCount(int value) {\n+        for (int i = 0; i < value; i++) {\n+            incrementCount();\n+        }\n+    }\n+\n+    /**\n+     * Add one to the current iteration count.\n+     *\n+     * @throws MaxCountExceededException at counter exhaustion.\n+     */\n+    public void incrementCount() {\n+        if (++count > maximalCount) {\n+            throw new MaxCountExceededException(maximalCount);\n+        }\n+    }\n+\n+    /**\n+     * Reset the counter to 0.\n+     */\n+    public void resetCount() {\n+        count = 0;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math/util/IncrementorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law\n+ * or agreed to in writing, software distributed under the License is\n+ * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the specific language\n+ * governing permissions and limitations under the License.\n+ */\n+package org.apache.commons.math.util;\n+\n+import org.apache.commons.math.exception.MaxCountExceededException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test for {@link Incrementor}.\n+ */\n+public class IncrementorTest {\n+\n+    @Test\n+    public void testAccessor() {\n+        final Incrementor i = new Incrementor();\n+\n+        i.setMaximalCount(10);\n+        Assert.assertEquals(10, i.getMaximalCount());\n+        Assert.assertEquals(0, i.getCount());\n+    }\n+\n+    @Test\n+    public void testBelowMaxCount() {\n+        final Incrementor i = new Incrementor();\n+\n+        i.setMaximalCount(3);\n+        i.incrementCount();\n+        i.incrementCount();\n+        i.incrementCount();\n+\n+        Assert.assertEquals(3, i.getCount());\n+    }\n+\n+    @Test(expected = MaxCountExceededException.class)\n+    public void testAboveMaxCount() {\n+        final Incrementor i = new Incrementor();\n+\n+        i.setMaximalCount(3);\n+        i.incrementCount();\n+        i.incrementCount();\n+        i.incrementCount();\n+        i.incrementCount();\n+    }\n+\n+    @Test\n+    public void testReset() {\n+        final Incrementor i = new Incrementor();\n+\n+        i.setMaximalCount(3);\n+        i.incrementCount();\n+        i.incrementCount();\n+        i.incrementCount();\n+        Assert.assertEquals(3, i.getCount());\n+        i.resetCount();\n+        Assert.assertEquals(0, i.getCount());\n+    }\n+\n+    @Test\n+    public void testBulkIncrement() {\n+        final Incrementor i = new Incrementor();\n+\n+        i.setMaximalCount(3);\n+        i.incrementCount(2);\n+        Assert.assertEquals(2, i.getCount());\n+        i.incrementCount(1);\n+        Assert.assertEquals(3, i.getCount());\n+    }\n+}", "timestamp": 1283161119, "metainfo": ""}