{"sha": "b39e2d0fe3da5429c555ea1423ff41dc6a12d61a", "log": "Modified setSeed methods in Bitstream generators (MersenneTwister and Well generators) to clear the cache of normal deviates used by nextGaussian.  JIRA: MATH-723   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/random/AbstractWell.java\n+++ b/src/main/java/org/apache/commons/math/random/AbstractWell.java\n      */\n     @Override\n     public void setSeed(final int[] seed) {\n-\n         if (seed == null) {\n             setSeed(System.currentTimeMillis() + System.identityHashCode(this));\n             return;\n         }\n \n         index = 0;\n-\n+        clear();  // Clear normal deviate cache\n     }\n \n     /** Reinitialize the generator as if just built with the given long seed.\n--- a/src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java\n+++ b/src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java\n         return high | low;\n     }\n \n+    /**\n+     * Clears the cache used by the default implementation of\n+     * {@link #nextGaussian}.\n+     */\n+    public void clear() {\n+        nextGaussian = Double.NaN;\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math/random/MersenneTwister.java\n+++ b/src/main/java/org/apache/commons/math/random/MersenneTwister.java\n             longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;\n             mt[mti]= (int) longMT;\n         }\n+\n+        clear(); // Clear normal deviate cache\n     }\n \n     /** Reinitialize the generator as if just built with the given int array seed.\n \n         mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array\n \n+        clear(); // Clear normal deviate cache\n+\n     }\n \n     /** Reinitialize the generator as if just built with the given long seed.\n--- a/src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java\n+++ b/src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java\n         \n         @Override\n         public void setSeed(int seed) {\n-           ran.setSeed(seed);   \n+           ran.setSeed(seed);\n+           clear();\n         }\n \n         @Override\n--- a/src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java\n         TestUtils.assertChiSquareAccept(expected, count, 0.001);\n         \n     }\n+    \n+    @Test\n+    public void testSeeding() throws Exception {\n+        // makeGenerator initializes with fixed seed\n+        RandomGenerator gen = makeGenerator();\n+        RandomGenerator gen1 = makeGenerator();\n+        checkSameSequence(gen, gen1);\n+        // reseed, but recreate the second one\n+        // verifies MATH-723\n+        gen.setSeed(100);\n+        gen1 = makeGenerator();\n+        gen1.setSeed(100);\n+        checkSameSequence(gen, gen1);\n+    }\n+    \n+    private void checkSameSequence(RandomGenerator gen1, RandomGenerator gen2) throws Exception {\n+        final int len = 11;  // Needs to be an odd number to check MATH-723\n+        final double[][] values = new double[2][len];\n+        for (int i = 0; i < len; i++) {\n+            values[0][i] = gen1.nextDouble();\n+        }\n+        for (int i = 0; i < len; i++) {\n+            values[1][i] = gen2.nextDouble();\n+        }\n+        Assert.assertTrue(Arrays.equals(values[0], values[1])); \n+        for (int i = 0; i < len; i++) {\n+            values[0][i] = gen1.nextFloat();\n+        }\n+        for (int i = 0; i < len; i++) {\n+            values[1][i] = gen2.nextFloat();\n+        }\n+        Assert.assertTrue(Arrays.equals(values[0], values[1])); \n+        for (int i = 0; i < len; i++) {\n+            values[0][i] = gen1.nextInt();\n+        }\n+        for (int i = 0; i < len; i++) {\n+            values[1][i] = gen2.nextInt();\n+        }\n+        Assert.assertTrue(Arrays.equals(values[0], values[1])); \n+        for (int i = 0; i < len; i++) {\n+            values[0][i] = gen1.nextLong();\n+        }\n+        for (int i = 0; i < len; i++) {\n+            values[1][i] = gen2.nextLong();\n+        }\n+        Assert.assertTrue(Arrays.equals(values[0], values[1])); \n+        for (int i = 0; i < len; i++) {\n+            values[0][i] = gen1.nextInt(len);\n+        }\n+        for (int i = 0; i < len; i++) {\n+            values[1][i] = gen2.nextInt(len);\n+        }\n+        Assert.assertTrue(Arrays.equals(values[0], values[1])); \n+        for (int i = 0; i < len; i++) {\n+            values[0][i] = gen1.nextBoolean() ? 1 : 0;\n+        }\n+        for (int i = 0; i < len; i++) {\n+            values[1][i] = gen2.nextBoolean() ? 1 : 0;\n+        }\n+        Assert.assertTrue(Arrays.equals(values[0], values[1]));  \n+        for (int i = 0; i < len; i++) {\n+            values[0][i] = gen1.nextGaussian();\n+        }\n+        for (int i = 0; i < len; i++) {\n+            values[1][i] = gen2.nextGaussian();\n+        }\n+        Assert.assertTrue(Arrays.equals(values[0], values[1])); \n+    }\n \n }", "timestamp": 1323639217, "metainfo": ""}