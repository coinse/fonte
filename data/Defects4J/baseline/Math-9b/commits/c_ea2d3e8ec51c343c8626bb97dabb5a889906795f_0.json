{"sha": "ea2d3e8ec51c343c8626bb97dabb5a889906795f", "log": "deprecated tests for deprecated methods added new tests  ", "commit": "\n--- a/src/test/org/apache/commons/math/linear/MatrixUtilsTest.java\n+++ b/src/test/org/apache/commons/math/linear/MatrixUtilsTest.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.apache.commons.math.fraction.Fraction;\n+import org.apache.commons.math.fraction.FractionConversionException;\n+import org.apache.commons.math.fraction.FractionField;\n+\n /**\n  * Test cases for the {@link MatrixUtils} class.\n  *\n     protected BigDecimal[] bigRow = \n         {new BigDecimal(1),new BigDecimal(2),new BigDecimal(3)};\n     protected String[] stringRow = {\"1\", \"2\", \"3\"};\n+    protected Fraction[] fractionRow = \n+        {new Fraction(1),new Fraction(2),new Fraction(3)};\n     protected double[][] rowMatrix = {{1,2,3}};\n     protected BigDecimal[][] bigRowMatrix = \n         {{new BigDecimal(1), new BigDecimal(2), new BigDecimal(3)}};\n     protected String[][] stringRowMatrix = {{\"1\", \"2\", \"3\"}};\n+    protected Fraction[][] fractionRowMatrix = \n+        {{new Fraction(1), new Fraction(2), new Fraction(3)}};\n     protected double[] col = {0,4,6};\n     protected BigDecimal[] bigCol = \n         {new BigDecimal(0),new BigDecimal(4),new BigDecimal(6)};\n     protected String[] stringCol = {\"0\",\"4\",\"6\"};\n+    protected Fraction[] fractionCol = \n+        {new Fraction(0),new Fraction(4),new Fraction(6)};\n     protected double[] nullDoubleArray = null;\n     protected double[][] colMatrix = {{0},{4},{6}};\n     protected BigDecimal[][] bigColMatrix = \n         {{new BigDecimal(0)},{new BigDecimal(4)},{new BigDecimal(6)}};\n     protected String[][] stringColMatrix = {{\"0\"}, {\"4\"}, {\"6\"}};\n+    protected Fraction[][] fractionColMatrix = \n+        {{new Fraction(0)},{new Fraction(4)},{new Fraction(6)}};\n     \n     public MatrixUtilsTest(String name) {\n         super(name);\n             // expected\n         } \n     }\n-    \n+\n+    public void testcreateFieldMatrix() {\n+        assertEquals(new FieldMatrixImpl<Fraction>(asFraction(testData)), \n+                     MatrixUtils.createFieldMatrix(asFraction(testData)));\n+        assertEquals(new FieldMatrixImpl<Fraction>(fractionColMatrix), \n+                     MatrixUtils.createFieldMatrix(fractionColMatrix));\n+        try {\n+            MatrixUtils.createFieldMatrix(asFraction(new double[][] {{1}, {1,2}}));  // ragged\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        } \n+        try {\n+            MatrixUtils.createFieldMatrix(asFraction(new double[][] {{}, {}}));  // no columns\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        try {\n+            MatrixUtils.createFieldMatrix((Fraction[][])null);  // null\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+            // expected\n+        } \n+    }\n+\n+    @Deprecated\n     public void testCreateBigMatrix() {\n         assertEquals(new BigMatrixImpl(testData), \n                 MatrixUtils.createBigMatrix(testData));\n         } \n     }\n     \n+    public void testCreateRowFieldMatrix() {\n+        assertEquals(MatrixUtils.createRowFieldMatrix(asFraction(row)),\n+                     new FieldMatrixImpl<Fraction>(asFraction(rowMatrix)));\n+        assertEquals(MatrixUtils.createRowFieldMatrix(fractionRow),\n+                     new FieldMatrixImpl<Fraction>(fractionRowMatrix));\n+        try {\n+            MatrixUtils.createRowFieldMatrix(new Fraction[] {});  // empty\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        try {\n+            MatrixUtils.createRowFieldMatrix((Fraction[]) null);  // null\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+            // expected\n+        } \n+    }\n+\n+    @Deprecated\n     public void testCreateRowBigMatrix() {\n         assertEquals(MatrixUtils.createRowBigMatrix(row),\n                 new BigMatrixImpl(rowMatrix));\n             // expected\n         } \n     }\n-    \n+\n     public void testCreateColumnRealMatrix() {\n         assertEquals(MatrixUtils.createColumnRealMatrix(col),\n                      new DenseRealMatrix(colMatrix));\n         } \n     }\n     \n+    public void testCreateColumnFieldMatrix() {\n+        assertEquals(MatrixUtils.createColumnFieldMatrix(asFraction(col)),\n+                     new FieldMatrixImpl<Fraction>(asFraction(colMatrix)));\n+        assertEquals(MatrixUtils.createColumnFieldMatrix(fractionCol),\n+                     new FieldMatrixImpl<Fraction>(fractionColMatrix));\n+\n+        try {\n+            MatrixUtils.createColumnFieldMatrix(new Fraction[] {});  // empty\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        try {\n+            MatrixUtils.createColumnFieldMatrix((Fraction[]) null);  // null\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+            // expected\n+        } \n+    }\n+\n+    @Deprecated\n     public void testCreateColumnBigMatrix() {\n         assertEquals(MatrixUtils.createColumnBigMatrix(col),\n                 new BigMatrixImpl(colMatrix));\n             // expected\n         } \n     }\n-    \n+\n     /**\n      * Verifies that the matrix is an identity matrix\n      */\n     /**\n      * Verifies that the matrix is an identity matrix\n      */\n+    protected void checkIdentityFieldMatrix(FieldMatrix<Fraction> m) {\n+        for (int i = 0; i < m.getRowDimension(); i++) {\n+            for (int j =0; j < m.getColumnDimension(); j++) {\n+                if (i == j) {\n+                    assertEquals(m.getEntry(i, j), Fraction.ONE);\n+                } else {\n+                    assertEquals(m.getEntry(i, j), Fraction.ZERO);\n+                }\n+            }\n+        }   \n+    }\n+    \n+    public void testcreateFieldIdentityMatrix() {\n+        checkIdentityFieldMatrix(MatrixUtils.createFieldIdentityMatrix(FractionField.getInstance(), 3));\n+        checkIdentityFieldMatrix(MatrixUtils.createFieldIdentityMatrix(FractionField.getInstance(), 2));\n+        checkIdentityFieldMatrix(MatrixUtils.createFieldIdentityMatrix(FractionField.getInstance(), 1));\n+        try {\n+            MatrixUtils.createRealIdentityMatrix(0);\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public static final Fraction[][] asFraction(double[][] data) {\n+        Fraction d[][] = new Fraction[data.length][];\n+        try {\n+            for (int i = 0; i < data.length; ++i) {\n+                double[] dataI = data[i];\n+                Fraction[] dI  = new Fraction[dataI.length];\n+                for (int j = 0; j < dataI.length; ++j) {\n+                    dI[j] = new Fraction(dataI[j]);\n+                }\n+                d[i] = dI;\n+            }\n+        } catch (FractionConversionException fce) {\n+            fail(fce.getMessage());\n+        }\n+        return d;\n+    }\n+\n+    public static final Fraction[] asFraction(double[] data) {\n+        Fraction d[] = new Fraction[data.length];\n+        try {\n+            for (int i = 0; i < data.length; ++i) {\n+                d[i] = new Fraction(data[i]);\n+            }\n+        } catch (FractionConversionException fce) {\n+            fail(fce.getMessage());\n+        }\n+        return d;\n+    }\n+\n+    /**\n+     * Verifies that the matrix is an identity matrix\n+     */\n+    @Deprecated\n     protected void checkIdentityBigMatrix(BigMatrix m) {\n         for (int i = 0; i < m.getRowDimension(); i++) {\n             for (int j =0; j < m.getColumnDimension(); j++) {\n             }\n         }   \n     }\n-    \n+\n+    @Deprecated\n     public void testCreateBigIdentityMatrix() {\n         checkIdentityBigMatrix(MatrixUtils.createBigIdentityMatrix(3));\n         checkIdentityBigMatrix(MatrixUtils.createBigIdentityMatrix(2));\n             // expected\n         }\n     }\n-        \n+\n }\n ", "timestamp": 1240260826, "metainfo": ""}