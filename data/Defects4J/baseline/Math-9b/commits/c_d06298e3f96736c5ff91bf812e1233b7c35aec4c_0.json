{"sha": "d06298e3f96736c5ff91bf812e1233b7c35aec4c", "log": "added rounding methods.  ", "commit": "\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n \n package org.apache.commons.math.util;\n \n+import java.math.BigDecimal;\n+\n /**\n  * Some useful additions to the built-in functions in {@link Math}.\n  *\n      * Private Constructor\n      */\n     private MathUtils() {\n+    }\n+    \n+    /**\n+     * Round the given value to the specified number of decimal places.  The\n+     * value is rounded using the {@link BigDecimal#ROUND_HALF_UP} method.\n+     * @param x the value to round.\n+     * @param scale the number of digits to the right of the decimal point.\n+     * @return the rounded value.\n+     */\n+    public static double round(double x, int scale) {\n+        return round(x, scale, BigDecimal.ROUND_HALF_UP);\n+    }\n+\n+    /**\n+     * Round the given value to the specified number of decimal places.  The\n+     * value is rounded using the given method which is any method defined in\n+     * {@link BigDecimal}.\n+     * @param x the value to round.\n+     * @param scale the number of digits to the right of the decimal point.\n+     * @param roundingMethod the rounding method as defined in\n+     *        {@link BigDecimal}. \n+     * @return the rounded value.\n+     */\n+    public static double round(\n+        double x, int scale, int roundingMethod)\n+    {\n+        return (new BigDecimal(x).setScale(scale, roundingMethod))\n+            .doubleValue();\n+    }\n+    \n+    /**\n+     * Round the given value to the specified number of decimal places.  The\n+     * value is rounding using the {@link BigDecimal#ROUND_HALF_UP} method.\n+     * @param x the value to round.\n+     * @param scale the number of digits to the right of the decimal point.\n+     * @return the rounded value.\n+     */\n+    public static float round(float x, int scale) {\n+        return round(x, scale, BigDecimal.ROUND_HALF_UP);\n+    }\n+\n+    /**\n+     * Round the given value to the specified number of decimal places.  The\n+     * value is rounded using the given method which is any method defined in\n+     * {@link BigDecimal}.\n+     * @param x the value to round.\n+     * @param scale the number of digits to the right of the decimal point.\n+     * @param roundingMethod the rounding method as defined in\n+     *        {@link BigDecimal}. \n+     * @return the rounded value.\n+     */\n+    public static float round(float x, int scale, int roundingMethod) {\n+        return (new BigDecimal(x).setScale(scale, roundingMethod)).floatValue();\n     }\n     \n     /**\n--- a/src/test/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/org/apache/commons/math/util/MathUtilsTest.java\n  */\n package org.apache.commons.math.util;\n \n+import java.math.BigDecimal;\n+\n+import org.apache.commons.math.TestUtils;\n+\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n         assertEquals(150, MathUtils.lcm(a, -b));\n         assertEquals(2310, MathUtils.lcm(a, c));\n     }\n+    \n+    public void testRoundFloat() {\n+        float x = 1.234567890f;\n+        assertEquals(1.23f, MathUtils.round(x, 2), 0.0f);\n+        assertEquals(1.235f, MathUtils.round(x, 3), 0.0f);\n+        assertEquals(1.2346f, MathUtils.round(x, 4), 0.0f);\n+\n+        assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_DOWN), 0.0f);\n+        assertEquals(1.234f, MathUtils.round(x, 3, BigDecimal.ROUND_DOWN), 0.0f);\n+        assertEquals(1.2345f, MathUtils.round(x, 4, BigDecimal.ROUND_DOWN), 0.0f);\n+    }\n+    \n+    public void testRoundDouble() {\n+        double x = 1.234567890;\n+        assertEquals(1.23, MathUtils.round(x, 2), 0.0);\n+        assertEquals(1.235, MathUtils.round(x, 3), 0.0);\n+        assertEquals(1.2346, MathUtils.round(x, 4), 0.0);\n+\n+        assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_DOWN), 0.0);\n+        assertEquals(1.234, MathUtils.round(x, 3, BigDecimal.ROUND_DOWN), 0.0);\n+        assertEquals(1.2345, MathUtils.round(x, 4, BigDecimal.ROUND_DOWN), 0.0);\n+    }\n }", "timestamp": 1107584660, "metainfo": ""}