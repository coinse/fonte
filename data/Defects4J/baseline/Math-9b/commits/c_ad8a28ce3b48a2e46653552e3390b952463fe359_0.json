{"sha": "ad8a28ce3b48a2e46653552e3390b952463fe359", "log": "Removed usage of non-localized error message. Changed exception type.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/stat/regression/RegressionResults.java\n+++ b/src/main/java/org/apache/commons/math3/stat/regression/RegressionResults.java\n import java.util.Arrays;\n import org.apache.commons.math3.util.FastMath;\n import org.apache.commons.math3.util.MathArrays;\n+import org.apache.commons.math3.exception.OutOfRangeException;\n \n /**\n  * Results of a Multiple Linear Regression model fit.\n     private final boolean containsConstant;\n     /** array storing global results, SSE, MSE, RSQ, adjRSQ */\n     private final double[] globalFitInfo;\n-    /** error message */\n-    private final String indexOutOfBound = \"Index is outside of the 0 to number of variables - 1 range\";\n \n     /**\n      *  Set the default constructor to private access\n      * <p>A redundant regressor will have its redundancy flag set, as well as\n      *  a parameters estimated equal to {@code Double.NaN}</p>\n      *\n-     * @param index an integer index which must be in the range [0, numberOfParameters-1]\n-     * @return parameters estimated for regressor at index\n-     * @throws IndexOutOfBoundsException thrown if the index >= numberOfParameters\n-     */\n-    public double getParameterEstimate(int index) throws IndexOutOfBoundsException {\n+     * @param index Index.\n+     * @return the parameters estimated for regressor at index.\n+     * @throws OutOfRangeException if {@code index} is not in the interval\n+     * {@code [0, number of parameters)}.\n+     */\n+    public double getParameterEstimate(int index) {\n         if (parameters == null) {\n             return Double.NaN;\n         }\n         if (index < 0 || index >= this.parameters.length) {\n-            throw new IndexOutOfBoundsException(indexOutOfBound);\n+            throw new OutOfRangeException(index, 0, this.parameters.length - 1);\n         }\n         return this.parameters[index];\n     }\n      * error of the parameter estimate at index</a>,\n      * usually denoted s(b<sub>index</sub>).\n      *\n-     * @param index an integer index which must be in the range [0, numberOfParameters-1]\n-     * @return standard errors associated with parameters estimated at index\n-     * @throws IndexOutOfBoundsException thrown if the index >= numberOfParameters\n-     */\n-    public double getStdErrorOfEstimate(int index) throws IndexOutOfBoundsException {\n+     * @param index Index.\n+     * @return the standard errors associated with parameters estimated at index.\n+     * @throws OutOfRangeException if {@code index} is not in the interval\n+     * {@code [0, number of parameters)}.\n+     */\n+    public double getStdErrorOfEstimate(int index) {\n         if (parameters == null) {\n             return Double.NaN;\n         }\n         if (index < 0 || index >= this.parameters.length) {\n-            throw new IndexOutOfBoundsException(indexOutOfBound);\n+            throw new OutOfRangeException(index, 0, this.parameters.length - 1);\n         }\n         double var = this.getVcvElement(index, index);\n         if (!Double.isNaN(var) && var > Double.MIN_VALUE) {\n      * <p>If there are problems with an ill conditioned design matrix then the covariance\n      * which involves redundant columns will be assigned {@code Double.NaN}. </p>\n      *\n-     * @param i - the ith regression parameter\n-     * @param j - the jth regression parameter\n-     * @return the covariance of the parameter estimates\n-     * @throws IndexOutOfBoundsException thrown when i,j >= number of parameters\n-     */\n-    public double getCovarianceOfParameters(int i, int j) throws IndexOutOfBoundsException {\n+     * @param i {@code i}th regression parameter.\n+     * @param j {@code j}th regression parameter.\n+     * @return the covariance of the parameter estimates.\n+     * @throws OutOfRangeException if {@code i} or {@code j} is not in the\n+     * interval {@code [0, number of parameters)}.\n+     */\n+    public double getCovarianceOfParameters(int i, int j) {\n         if (parameters == null) {\n             return Double.NaN;\n         }\n         if (i < 0 || i >= this.parameters.length) {\n-            throw new IndexOutOfBoundsException(\" Row index is outside of the 0 \" +\n-                    \"to number of variables - 1 range\");\n+            throw new OutOfRangeException(i, 0, this.parameters.length - 1);\n         }\n         if (j < 0 || j >= this.parameters.length) {\n-            throw new IndexOutOfBoundsException(\" Column index is outside of the 0\" +\n-                    \" to number of variables - 1 range\");\n+            throw new OutOfRangeException(j, 0, this.parameters.length - 1);\n         }\n         return this.getVcvElement(i, j);\n     }", "timestamp": 1329913204, "metainfo": ""}