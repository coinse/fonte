{"sha": "dc7c90278bc5495dba318fbb6cf5528cd4326ebf", "log": "MATH-690 Removed \"sinh\" and \"cosh\" from \"MathUtils\"; replaced uses with calls to equivalent in \"FastMath\".   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n             return NaN;\n         }\n \n-        return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),\n-                             -FastMath.sin(real) * MathUtils.sinh(imaginary));\n+        return createComplex(FastMath.cos(real) * FastMath.cosh(imaginary),\n+                             -FastMath.sin(real) * FastMath.sinh(imaginary));\n     }\n \n     /**\n             return NaN;\n         }\n \n-        return createComplex(MathUtils.cosh(real) * FastMath.cos(imaginary),\n-                             MathUtils.sinh(real) * FastMath.sin(imaginary));\n+        return createComplex(FastMath.cosh(real) * FastMath.cos(imaginary),\n+                             FastMath.sinh(real) * FastMath.sin(imaginary));\n     }\n \n     /**\n             return NaN;\n         }\n \n-        return createComplex(FastMath.sin(real) * MathUtils.cosh(imaginary),\n-                             FastMath.cos(real) * MathUtils.sinh(imaginary));\n+        return createComplex(FastMath.sin(real) * FastMath.cosh(imaginary),\n+                             FastMath.cos(real) * FastMath.sinh(imaginary));\n     }\n \n     /**\n             return NaN;\n         }\n \n-        return createComplex(MathUtils.sinh(real) * FastMath.cos(imaginary),\n-            MathUtils.cosh(real) * FastMath.sin(imaginary));\n+        return createComplex(FastMath.sinh(real) * FastMath.cos(imaginary),\n+            FastMath.cosh(real) * FastMath.sin(imaginary));\n     }\n \n     /**\n \n         double real2 = 2.0 * real;\n         double imaginary2 = 2.0 * imaginary;\n-        double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);\n+        double d = FastMath.cos(real2) + FastMath.cosh(imaginary2);\n \n         return createComplex(FastMath.sin(real2) / d,\n-                             MathUtils.sinh(imaginary2) / d);\n+                             FastMath.sinh(imaginary2) / d);\n     }\n \n     /**\n \n         double real2 = 2.0 * real;\n         double imaginary2 = 2.0 * imaginary;\n-        double d = MathUtils.cosh(real2) + FastMath.cos(imaginary2);\n-\n-        return createComplex(MathUtils.sinh(real2) / d,\n+        double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);\n+\n+        return createComplex(FastMath.sinh(real2) / d,\n                              FastMath.sin(imaginary2) / d);\n     }\n \n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n      */\n     private MathUtils() {\n         super();\n-    }\n-\n-    /**\n-     * Returns the <a href=\"http://mathworld.wolfram.com/HyperbolicCosine.html\">\n-     * hyperbolic cosine</a> of x.\n-     *\n-     * @param x double value for which to find the hyperbolic cosine\n-     * @return hyperbolic cosine of x\n-     */\n-    public static double cosh(double x) {\n-        return (FastMath.exp(x) + FastMath.exp(-x)) / 2.0;\n     }\n \n     /**\n     }\n \n     /**\n-     * Compute the <a href=\"http://mathworld.wolfram.com/HyperbolicSine.html\">\n-     * hyperbolic sine</a> of the argument.\n-     *\n-     * @param x Value for which to find the hyperbolic sine.\n-     * @return hyperbolic sine of {@code x}.\n-     */\n-    public static double sinh(double x) {\n-        return (FastMath.exp(x) - FastMath.exp(-x)) / 2.0;\n-    }\n-\n-    /**\n      * Raise an int to an int power.\n      *\n      * @param k Number to raise.\n--- a/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n  *          2007) $\n  */\n public final class MathUtilsTest {\n-    @Test\n-    public void testCosh() {\n-        double x = 3.0;\n-        double expected = 10.06766;\n-        Assert.assertEquals(expected, MathUtils.cosh(x), 1.0e-5);\n-    }\n-\n-    @Test\n-    public void testCoshNaN() {\n-        Assert.assertTrue(Double.isNaN(MathUtils.cosh(Double.NaN)));\n-    }\n-\n     @Test\n     public void testHash() {\n         double[] testArray = {\n     }\n \n     @Test\n-    public void testSinh() {\n-        double x = 3.0;\n-        double expected = 10.01787;\n-        Assert.assertEquals(expected, MathUtils.sinh(x), 1.0e-5);\n-    }\n-\n-    @Test\n-    public void testSinhNaN() {\n-        Assert.assertTrue(Double.isNaN(MathUtils.sinh(Double.NaN)));\n-    }\n-\n-    @Test\n     public void testPow() {\n \n         Assert.assertEquals(1801088541, MathUtils.pow(21, 7));", "timestamp": 1318543110, "metainfo": ""}