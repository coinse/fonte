{"sha": "390ff2075b0c662d78d42abef2807675ee4bdb84", "log": "Modified constructor to copy input coefficients array. Changed evaluation to use Horner's method. Exposed coefficients as read-only property Implemented DifferentiableUnivariateRealFunction interfaces Dropped redundant firstDerivative, secondDerivative methods   ", "commit": "\n--- a/src/java/org/apache/commons/math/analysis/PolynomialFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/PolynomialFunction.java\n import java.io.Serializable;\n \n /**\n- * Represents a polynomial function with real coefficients.\n+ * Immutable representation of a real polynomial function with real coefficients.\n+ * <p>\n+ * <a href=\"http://mathworld.wolfram.com/HornersMethod.html\">Horner's Method</a>\n+ *  is used to evaluate the function.   \n  * \n- * @version $Revision: 1.7 $ $Date: 2004/02/22 22:01:29 $\n+ * @version $Revision: 1.8 $ $Date: 2004/04/02 21:08:48 $\n  */\n-public class PolynomialFunction implements UnivariateRealFunction, Serializable {\n+public class PolynomialFunction implements DifferentiableUnivariateRealFunction, Serializable {\n \n     /**\n-     * The coefficients of the polynomial, ordered by degree -- i.e.,  c[0] is the constant term\n-     * and c[n] is the coefficient of x^n where n is the degree of the polynomial.\n+     * The coefficients of the polynomial, ordered by degree -- i.e.,  coefficients[0] is the constant term\n+     * and coefficients[n] is the coefficient of x^n where n is the degree of the polynomial.\n      */\n-    private double c[];\n+    private double coefficients[];\n \n     /**\n-     * Construct a polynomial with the given coefficients\n+     * Construct a polynomial with the given coefficients.\n+     * <p>\n+     * The constructor makes a copy of the input array and assigns the copy to\n+     *  the coefficients property.\n      * \n      * @param c polynominal coefficients\n+     * @throws NullPointerException if c is null\n+     * @throws IllegalArgumentException if c is empty\n      */\n     public PolynomialFunction(double c[]) {\n         super();\n-        this.c = new double[c.length];\n-        System.arraycopy(c, 0, this.c, 0, c.length);\n+        if (c.length < 1) {\n+            throw new IllegalArgumentException(\"Polynomial coefficient array must have postive length.\");\n+        }\n+        this.coefficients = new double[c.length];\n+        System.arraycopy(c, 0, this.coefficients, 0, c.length);\n     }\n \n     /**\n      * Compute the value of the function for the given argument.\n-     *\n-     * <p>This can be explicitly determined by \n-     *   <tt>c_n * x^n + ... + c_1 * x  + c_0</tt>\n-     * </p>\n+     * <p>\n+     *  The value returned is <br>\n+     *   <code>coefficients[n] * x^n + ... + coefficients[1] * x  + coefficients[0]</code>\n      *\n      * @param x the argument for which the function value should be computed\n-     * @return the value\n-     * @throws MathException if the function couldn't be computed due to\n-     *  missing additional data or other environmental problems.\n+     * @return the value of the polynomial at the given point\n      * @see UnivariateRealFunction#value(double)\n      */\n-    public double value(double x)  {\n-\n-        double value = c[0];\n-\n-        for (int i=1; i < c.length; i++ ) {\n-            value += c[i] * Math.pow( x, (int)i);\n-        }\n-\n-        return value;\n+    public double value(double x) {\n+       return evaluate(coefficients, x);\n     }\n \n-\n-    /**\n-     * Compute the value for the first derivative of the function.\n-     *\n-     * <p>This can be explicitly determined by \n-     *   <tt>n * c_n * x^(n-1) + ... + 2 * c_2 * x  + c_1</tt>\n-     * </p>\n-     *\n-     * @param x the point for which the first derivative should be computed\n-     * @return the value\n-     */\n-    public double firstDerivative(double x)  {\n-\n-        if (this.degree() == 0) {\n-            return 0;\n-        }\n-        double value = c[1];\n-\n-        if ( c.length > 1 ) {\n-            for (int i=2; i < c.length; i++ ) {\n-                value += i * c[i] * Math.pow( x, (int)i-1);\n-            }\n-        }\n-\n-        return value;\n-    }\n-\n-    /**\n-     * Compute the value for the second derivative of the function.\n-     * \n-     * <p>This can be explicitly determined by \n-     *   <tt>n * (n-1) * c_n * x^(n-2) + ... + 3 * 2 * c_3 * x  + 2 * c_2</tt>\n-     * </p>\n-     * \n-     * @param x the point for which the first derivative should be computed\n-     * @return the value\n-     */\n-    public double secondDerivative(double x)  {\n-\n-        if (this.degree() < 2) {\n-            return 0;\n-        }\n-        double value = 2.0 * c[2];\n-\n-        if ( c.length > 2 ) {\n-            for (int i=3; i < c.length; i++ ) {\n-                value += i * (i-1) * c[i] * Math.pow( x, (int)i-2);\n-            }\n-        }\n-\n-        return value;\n-    }\n \n     /**\n      *  Returns the degree of the polynomial\n      * @return the degree of the polynomial\n      */\n     public int degree() {\n-        return c.length - 1;\n+        return coefficients.length - 1;\n     }\n+    \n+    /**\n+     * Returns a copy of the coefficients array.\n+     * <p>\n+     * Changes made to the returned copy will not affect the coefficients of\n+     * the polynomial.\n+     * \n+     * @return  a fresh copy of the coefficients array\n+     */\n+    public double[] getCoefficients() {\n+        double[] out = new double[coefficients.length];\n+        System.arraycopy(coefficients,0, out, 0, coefficients.length);\n+        return out;\n+    }\n+    \n+    /**\n+     * Uses Horner's Method to evaluate the polynomial with the given coefficients at\n+     * the argument.\n+     * \n+     * @param coefficients  the coefficients of the polynomial to evaluate\n+     * @param argument  the input value\n+     * @return  the value of the polynomial \n+     * @throws IllegalArgumentException if coefficients is empty\n+     * @throws NullPointerException if coefficients is null\n+     */\n+    protected static double evaluate(double[] coefficients, double argument) {\n+        int n = coefficients.length;\n+        if (n < 1) {\n+            throw new IllegalArgumentException(\"Coefficient array must have positive length for evaluation\");\n+        }\n+        double result = coefficients[n - 1];\n+        for (int j = n -2; j >=0; j--) {\n+            result = argument * result + coefficients[j];\n+        }\n+        return result;\n+    }\n+    \n+    /**\n+     * Returns the coefficients of the derivative of the polynomial with the given coefficients.\n+     * \n+     * @param coefficients  the coefficients of the polynomial to differentiate\n+     * @return the coefficients of the derivative or null if coefficients has length 1.\n+     * @throws IllegalArgumentException if coefficients is empty\n+     * @throws NullPointerException if coefficients is null\n+     */\n+    protected static double[] differentiate(double[] coefficients) {\n+        int n = coefficients.length;\n+        if (n < 1) {\n+            throw new IllegalArgumentException(\"Coefficient array must have positive length for differentiation\");\n+        }\n+        if (n == 1) {\n+            return new double[]{0};\n+        }\n+        double[] result = new double[n - 1];\n+        for (int i = n - 1; i  > 0; i--) {\n+            result[i - 1] = (double) i * coefficients[i];\n+        }\n+        return result;\n+    }\n+    \n+    /**\n+     * Returns the derivative as a PolynomialRealFunction\n+     * \n+     * @return  the derivative polynomial\n+     */\n+    public PolynomialFunction polynomialDerivative() {\n+        return new PolynomialFunction(differentiate(coefficients));\n+    }\n+    \n+    /**\n+     * Returns the derivative as a UnivariateRealFunction\n+     * \n+     * @return  the derivative function\n+     */\n+    public UnivariateRealFunction derivative() {\n+        return polynomialDerivative();\n+    }\n+   \n }", "timestamp": 1080940128, "metainfo": ""}