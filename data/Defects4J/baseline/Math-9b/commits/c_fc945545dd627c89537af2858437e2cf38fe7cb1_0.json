{"sha": "fc945545dd627c89537af2858437e2cf38fe7cb1", "log": "replaced calls to deprecated methods from linear algebra package  ", "commit": "\n--- a/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java\n+++ b/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java\n import java.io.Serializable;\n \n import org.apache.commons.math.linear.InvalidMatrixException;\n+import org.apache.commons.math.linear.LUDecompositionImpl;\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.linear.RealMatrixImpl;\n+import org.apache.commons.math.linear.RealVector;\n+import org.apache.commons.math.linear.RealVectorImpl;\n \n /** \n  * This class implements a solver for estimation problems.\n \n         // work matrices\n         double[] grad             = new double[parameters.length];\n-        RealMatrixImpl bDecrement = new RealMatrixImpl(parameters.length, 1);\n-        double[][] bDecrementData = bDecrement.getDataRef();\n+        RealVectorImpl bDecrement = new RealVectorImpl(parameters.length);\n+        double[] bDecrementData   = bDecrement.getDataRef();\n         RealMatrixImpl wGradGradT = new RealMatrixImpl(parameters.length, parameters.length);\n         double[][] wggData        = wGradGradT.getDataRef();\n \n \n             // build the linear problem\n             incrementJacobianEvaluationsCounter();\n-            RealMatrix b = new RealMatrixImpl(parameters.length, 1);\n+            RealVector b = new RealVectorImpl(parameters.length);\n             RealMatrix a = new RealMatrixImpl(parameters.length, parameters.length);\n             for (int i = 0; i < measurements.length; ++i) {\n                 if (! measurements [i].isIgnored()) {\n                     // compute the normal equation\n                     for (int j = 0; j < parameters.length; ++j) {\n                         grad[j] = measurements[i].getPartial(parameters[j]);\n-                        bDecrementData[j][0] = weight * residual * grad[j];\n+                        bDecrementData[j] = weight * residual * grad[j];\n                     }\n \n                     // build the contribution matrix for measurement i\n             try {\n \n                 // solve the linearized least squares problem\n-                RealMatrix dX = a.solve(b);\n+                RealVector dX = new LUDecompositionImpl(a).solve(b);\n \n                 // update the estimated parameters\n                 for (int i = 0; i < parameters.length; ++i) {\n-                    parameters[i].setEstimate(parameters[i].getEstimate() + dX.getEntry(i, 0));\n+                    parameters[i].setEstimate(parameters[i].getEstimate() + dX.getEntry(i));\n                 }\n \n             } catch(InvalidMatrixException e) {\n--- a/src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java\n  */\n package org.apache.commons.math.stat.regression;\n \n+import org.apache.commons.math.linear.LUDecompositionImpl;\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.linear.RealMatrixImpl;\n \n     /** Covariance matrix. */\n     private RealMatrix Omega;\n \n+    /** Inverse of covariance matrix. */\n+    private RealMatrix OmegaInverse;\n+\n     public void newSampleData(double[] y, double[][] x, double[][] covariance) {\n         validateSampleData(x, y);\n         newYSampleData(y);\n      */\n     protected void newCovarianceData(double[][] omega){\n         this.Omega = new RealMatrixImpl(omega);\n+        this.OmegaInverse = null;\n+    }\n+\n+    /**\n+     * Get the inverse of the covariance.\n+     * <p>The inverse of the covariance matrix is lazily evaluated and cached.</p>\n+     * @return inverse of the covariance\n+     */\n+    protected RealMatrix getOmegaInverse() {\n+        if (OmegaInverse == null) {\n+            OmegaInverse = new LUDecompositionImpl(Omega).getInverse();\n+        }\n+        return OmegaInverse;\n     }\n     \n     /**\n      * @return beta\n      */\n     protected RealMatrix calculateBeta() {\n-        RealMatrix OI = Omega.inverse();\n+        RealMatrix OI = getOmegaInverse();\n         RealMatrix XT = X.transpose();\n         RealMatrix XTOIX = XT.multiply(OI).multiply(X);\n-        return XTOIX.inverse().multiply(XT).multiply(OI).multiply(Y);\n+        return new LUDecompositionImpl(XTOIX).getInverse().multiply(XT).multiply(OI).multiply(Y);\n     }\n \n     /**\n      * @return The beta variance matrix\n      */\n     protected RealMatrix calculateBetaVariance() {\n-        RealMatrix XTOIX = X.transpose().multiply(Omega.inverse()).multiply(X);\n-        return XTOIX.inverse();\n+        RealMatrix OI = getOmegaInverse();\n+        RealMatrix XTOIX = X.transpose().multiply(OI).multiply(X);\n+        return new LUDecompositionImpl(XTOIX).getInverse();\n     }\n \n     /**\n      */\n     protected double calculateYVariance() {\n         RealMatrix u = calculateResiduals();\n-        RealMatrix sse =  u.transpose().multiply(Omega.inverse()).multiply(u);\n+        RealMatrix sse =  u.transpose().multiply(getOmegaInverse()).multiply(u);\n         return sse.getTrace()/(X.getRowDimension()-X.getColumnDimension());\n     }\n     \n--- a/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java\n  */\n package org.apache.commons.math.stat.regression;\n \n+import org.apache.commons.math.linear.LUDecompositionImpl;\n import org.apache.commons.math.linear.QRDecomposition;\n import org.apache.commons.math.linear.QRDecompositionImpl;\n import org.apache.commons.math.linear.RealMatrix;\n      */\n     protected RealMatrix calculateBetaVariance() {\n         RealMatrix XTX = X.transpose().multiply(X);\n-        return XTX.inverse();\n+        return new LUDecompositionImpl(XTX).getInverse();\n     }\n     \n ", "timestamp": 1224156878, "metainfo": ""}