{"sha": "04adbf9b75422c1956626d923c6467153682b69e", "log": "Fixes MATH-437  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java\n \n package org.apache.commons.math.linear;\n \n+import java.util.ArrayList;\n+\n import org.apache.commons.math.exception.NoDataException;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n     /** {@inheritDoc} */\n     public RealMatrix preMultiply(final RealMatrix m) {\n         return m.multiply(this);\n+    }    \n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public RealMatrix power(final int p) {\n+        if (p < 0) {\n+            throw new IllegalArgumentException(\"p must be >= 0\");\n+        }\n+        \n+        if (!isSquare()) {\n+            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());\n+        }\n+        \n+        if (p == 0) {\n+            return MatrixUtils.createRealIdentityMatrix(this.getRowDimension());\n+        }\n+        \n+        if (p == 1) {\n+            return this.copy();\n+        }\n+\n+        final int power = p - 1;\n+        \n+        /*\n+         * Only log_2(p) operations is used by doing as follows:\n+         * 5^214 = 5^128 * 5^64 * 5^16 * 5^4 * 5^2\n+         * \n+         * In general, the same approach is used for A^p.\n+         */        \n+        \n+        final char[] binaryRepresentation = Integer.toBinaryString(power).toCharArray();       \n+        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();\n+        int maxI = -1;\n+        \n+        for (int i = 0; i < binaryRepresentation.length; ++i) {            \n+            if (binaryRepresentation[i] == '1') {\n+                final int pos = binaryRepresentation.length - i - 1;\n+                nonZeroPositions.add(pos);\n+                \n+                // The positions are taken in turn, so maxI is only changed once\n+                if (maxI == -1) {\n+                    maxI = pos;\n+                }\n+            }\n+        }\n+        \n+        RealMatrix[] results = new RealMatrix[maxI + 1];\n+        results[0] = this.copy();\n+        \n+        for (int i = 1; i <= maxI; ++i) {\n+            results[i] = results[i-1].multiply(results[i-1]);\n+        }\n+        \n+        RealMatrix result = this.copy();\n+        \n+        for (Integer i : nonZeroPositions) {\n+            result = result.multiply(results[i]);\n+        }        \n+        \n+        return result;\n     }\n \n     /** {@inheritDoc} */\n--- a/src/main/java/org/apache/commons/math/linear/RealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/RealMatrix.java\n      *             if rowDimension(this) != columnDimension(m)\n      */\n     RealMatrix preMultiply(RealMatrix m);\n+    \n+    /**\n+     * Returns the result multiplying this with itself <code>p</code> times. \n+     * Depending on the underlying storage, instability for high powers might occur. \n+     * @param      p raise this to power p\n+     * @return     this^p\n+     * @throws     IllegalArgumentException if p < 0\n+     *             NonSquareMatrixException if the matrix is not square\n+     */\n+    RealMatrix power(final int p);\n \n     /**\n      * Returns matrix entries as a two-dimensional array.\n--- a/src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java\n     // tolerances\n     protected double entryTolerance = 10E-16;\n     protected double normTolerance = 10E-14;\n+    protected double powerTolerance = 10E-16;\n \n     /** test dimensions */\n     @Test\n        TestUtils.assertEquals(\"m3*m4=m5\", m3.multiply(m4), m5, entryTolerance);\n    }\n \n+    public void testPower() {\n+        Array2DRowRealMatrix m = new Array2DRowRealMatrix(testData);\n+        Array2DRowRealMatrix mInv = new Array2DRowRealMatrix(testDataInv);\n+        Array2DRowRealMatrix mPlusInv = new Array2DRowRealMatrix(testDataPlusInv);\n+        Array2DRowRealMatrix identity = new Array2DRowRealMatrix(id);\n+        \n+        TestUtils.assertEquals(\"m^0\", m.power(0),\n+            identity, entryTolerance);        \n+        TestUtils.assertEquals(\"mInv^0\", mInv.power(0),\n+                identity, entryTolerance);        \n+        TestUtils.assertEquals(\"mPlusInv^0\", mPlusInv.power(0),\n+                identity, entryTolerance);\n+        \n+        TestUtils.assertEquals(\"m^1\", m.power(1),\n+                m, entryTolerance);        \n+        TestUtils.assertEquals(\"mInv^1\", mInv.power(1),\n+                mInv, entryTolerance);        \n+        TestUtils.assertEquals(\"mPlusInv^1\", mPlusInv.power(1),\n+                mPlusInv, entryTolerance); \n+        \n+        RealMatrix C1 = m.copy();\n+        RealMatrix C2 = mInv.copy();\n+        RealMatrix C3 = mPlusInv.copy();\n+        \n+        for (int i = 2; i <= 10; ++i) {\n+            C1 = C1.multiply(m);\n+            C2 = C2.multiply(mInv);\n+            C3 = C3.multiply(mPlusInv);\n+            \n+            TestUtils.assertEquals(\"m^\" + i, m.power(i),\n+                    C1, entryTolerance);        \n+            TestUtils.assertEquals(\"mInv^\" + i, mInv.power(i),\n+                    C2, entryTolerance);        \n+            TestUtils.assertEquals(\"mPlusInv^\" + i, mPlusInv.power(i),\n+                    C3, entryTolerance);            \n+        }\n+        \n+        try {\n+            Array2DRowRealMatrix mNotSquare = new Array2DRowRealMatrix(testData2T);\n+            mNotSquare.power(2);\n+            Assert.fail(\"Expecting NonSquareMatrixException\");\n+        } catch (NonSquareMatrixException ex) {\n+            // ignored\n+        }\n+        \n+        try {\n+            m.power(-1);\n+            Assert.fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // ignored\n+        }\n+    }\n+    \n     /** test trace */\n     @Test\n     public void testTrace() {", "timestamp": 1300695257, "metainfo": ""}