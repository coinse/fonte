{"sha": "36ce2d6c7f3547321ab8a31e58f32f69bc0f4986", "log": "improved error messages consistency fixed checkstyle warnings  ", "commit": "\n--- a/src/java/org/apache/commons/math/MessagesResources_fr.java\n+++ b/src/java/org/apache/commons/math/MessagesResources_fr.java\n     { \"matrix is singular\",\n       \"matrice singuli\\u00e8re\" },\n \n+    // org.apache.commons.math.linear.CholeskyDecompositionImpl\n+    // org.apache.commons.math.linear.EigenDecompositionImpl\n+    // org.apache.commons.math.linear.LUDecompositionImpl\n+    // org.apache.commons.math.linear.QRDecompositionImpl\n+    // org.apache.commons.math.linear.SingularValueDecompositionImpl\n+    { \"vector length mismatch: got {0} but expected {1}\",\n+      \"dimension de vecteur erronn\\u00e9e : {0} \\u00e0 la place de {1}\" },\n+    { \"dimensions mismatch: got {0}x{1} but expected {2}x{3}\",\n+      \"dimensions erronn\\u00e9es : {0}x{1} \\u00e0 la place de {2}x{3}\" },\n+      \n     // org.apache.commons.math.linear.RealVectorImpl\n     { \"index {0} out of allowed range [{1}, {2}]\",\n       \"index {0} hors de la plage autoris\\u00e9e [{1}, {2}]\" },\n--- a/src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n import java.util.List;\n \n import org.apache.commons.math.ConvergenceException;\n+import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.MaxIterationsExceededException;\n import org.apache.commons.math.util.MathUtils;\n \n \n             final int m = realEigenvalues.length;\n             if (b.length != m) {\n-                throw new IllegalArgumentException(\"constant vector has wrong length\");\n+                throw MathRuntimeException.createIllegalArgumentException(\n+                        \"vector length mismatch: got {0} but expected {1}\",\n+                        new Object[] { b.length, m });\n             }\n \n             final double[] bp = new double[m];\n \n             final int m = realEigenvalues.length;\n             if (b.getDimension() != m) {\n-                throw new IllegalArgumentException(\"constant vector has wrong length\");\n+                throw MathRuntimeException.createIllegalArgumentException(\n+                        \"vector length mismatch: got {0} but expected {1}\",\n+                        new Object[] { b.getDimension(), m });\n             }\n \n             final double[] bp = new double[m];\n \n             final int m = realEigenvalues.length;\n             if (b.getRowDimension() != m) {\n-                throw new IllegalArgumentException(\"Incorrect row dimension\");\n+                throw MathRuntimeException.createIllegalArgumentException(\n+                        \"dimensions mismatch: got {0}x{1} but expected {2}x{3}\",\n+                        new Object[] {\n+                                b.getRowDimension(), b.getColumnDimension(),\n+                                m, \"n\"\n+                        });\n             }\n \n             final int nColB = b.getColumnDimension();\n--- a/src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java\n+++ b/src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java\n package org.apache.commons.math.linear;\n \n import org.apache.commons.math.ConvergenceException;\n+import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.util.MathUtils;\n \n /**\n             throws IllegalArgumentException, InvalidMatrixException {\n \n             if (b.length != singularValues.length) {\n-                throw new IllegalArgumentException(\"constant vector has wrong length\");\n+                throw MathRuntimeException.createIllegalArgumentException(\n+                        \"vector length mismatch: got {0} but expected {1}\",\n+                        new Object[] { b.length, singularValues.length });\n             }\n \n             final double[] w = uT.operate(b);\n             throws IllegalArgumentException, InvalidMatrixException {\n \n             if (b.getDimension() != singularValues.length) {\n-                throw new IllegalArgumentException(\"constant vector has wrong length\");\n+                throw MathRuntimeException.createIllegalArgumentException(\n+                        \"vector length mismatch: got {0} but expected {1}\",\n+                        new Object[] { b.getDimension(), singularValues.length });\n             }\n \n             final RealVector w = uT.operate(b);\n             throws IllegalArgumentException, InvalidMatrixException {\n \n             if (b.getRowDimension() != singularValues.length) {\n-                throw new IllegalArgumentException(\"Incorrect row dimension\");\n+                throw MathRuntimeException.createIllegalArgumentException(\n+                        \"dimensions mismatch: got {0}x{1} but expected {2}x{3}\",\n+                        new Object[] {\n+                                b.getRowDimension(), b.getColumnDimension(),\n+                                singularValues.length, \"n\"\n+                        });\n             }\n \n             final RealMatrix w = uT.multiply(b);\n--- a/src/java/org/apache/commons/math/linear/SparseRealVector.java\n+++ b/src/java/org/apache/commons/math/linear/SparseRealVector.java\n     private void checkIndex(final int index) throws MatrixIndexException {\n         if (index < 0 || index >= getDimension()) {\n             throw new MatrixIndexException(\n-                    \"index {0} out of allowed range [{1}, {2}]\", new Object[] {\n-                            index, 0, getDimension() - 1 });\n+                    \"index {0} out of allowed range [{1}, {2}]\",\n+                    new Object[] { index, 0, getDimension() - 1 });\n         }\n     }\n \n      */\n     protected void checkVectorDimensions(int n) throws IllegalArgumentException {\n         if (getDimension() != n) {\n-            throw new IllegalArgumentException(\"vector dimension is \"\n-                    + getDimension() + \", not \" + n + \" as expected\");\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                    \"vector length mismatch: got {0} but expected {1}\",\n+                    new Object[] { getDimension(), n });\n         }\n     }\n \n         return getData();\n     }\n \n-    /* (non-Javadoc)\n-     * @see java.lang.Object#hashCode()\n-     */\n+    /** {@inheritDoc} */\n     @Override\n     public int hashCode() {\n         final int prime = 31;\n         return result;\n     }\n \n-    /* (non-Javadoc)\n-     * @see java.lang.Object#equals(java.lang.Object)\n-     */\n+    /** {@inheritDoc} */\n     @Override\n     public boolean equals(Object obj) {\n         if (this == obj)", "timestamp": 1234725351, "metainfo": ""}