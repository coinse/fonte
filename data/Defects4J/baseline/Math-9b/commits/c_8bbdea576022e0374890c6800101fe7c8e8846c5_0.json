{"sha": "8bbdea576022e0374890c6800101fe7c8e8846c5", "log": "Refactored data specification in multiple regression api. JIRA: MATH-255.  Patched by Mauro Televi.  ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java\n     protected RealMatrix Y;\n \n     /**\n-     * Adds y sample data.\n+     * Loads model x and y sample data from a flat array of data, overriding any previous sample.\n+     * Assumes that rows are concatenated with y values first in each row.\n+     * \n+     * @param data input data array\n+     * @param nobs number of observations (rows)\n+     * @param nvars number of independent variables (columnns, not counting y)\n+     */\n+    public void newSampleData(double[] data, int nobs, int nvars) {\n+        double[] y = new double[nobs];\n+        double[][] x = new double[nobs][nvars + 1];\n+        int pointer = 0;\n+        for (int i = 0; i < nobs; i++) {\n+            y[i] = data[pointer++];\n+            x[i][0] = 1.0d;\n+            for (int j = 1; j < nvars + 1; j++) {\n+                x[i][j] = data[pointer++];\n+            }\n+        }\n+        this.X = new RealMatrixImpl(x);\n+        this.Y = new RealMatrixImpl(y);\n+    }\n+    \n+    /**\n+     * Loads new y sample data, overriding any previous sample\n      * \n      * @param y the [n,1] array representing the y sample\n      */\n-    protected void addYSampleData(double[] y) {\n+    protected void newYSampleData(double[] y) {\n         this.Y = new RealMatrixImpl(y);\n     }\n \n     /**\n-     * Adds x sample data.\n+     * Loads new x sample data, overriding any previous sample\n      * \n      * @param x the [n,k] array representing the x sample\n      */\n-    protected void addXSampleData(double[][] x) {\n+    protected void newXSampleData(double[][] x) {\n         this.X = new RealMatrixImpl(x);\n     }\n \n--- a/src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java\n     /** Covariance matrix. */\n     private RealMatrix Omega;\n \n-    /**\n-     * {@inheritDoc}\n-     */\n-    public void addData(double[] y, double[][] x, double[][] covariance) {\n+    public void newSampleData(double[] y, double[][] x, double[][] covariance) {\n         validateSampleData(x, y);\n-        addYSampleData(y);\n-        addXSampleData(x);\n+        newYSampleData(y);\n+        newXSampleData(x);\n         validateCovarianceData(x, covariance);\n-        addCovarianceData(covariance);\n+        newCovarianceData(covariance);\n     }\n \n     /**\n      * \n      * @param omega the [n,n] array representing the covariance\n      */\n-    protected void addCovarianceData(double[][] omega){\n+    protected void newCovarianceData(double[][] omega){\n         this.Omega = new RealMatrixImpl(omega);\n     }\n     \n--- a/src/java/org/apache/commons/math/stat/regression/MultipleLinearRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/MultipleLinearRegression.java\n public interface MultipleLinearRegression {\n \n     /**\n-     * Adds sample and covariance data.\n-     * \n-     * @param y the [n,1] array representing the y sample\n-     * @param x the [n,k] array representing x sample\n-     * @param covariance the [n,n] array representing the covariance matrix or <code>null</code> if not required for the\n-     *          specific implementation\n-     * @throws IllegalArgumentException if required data arrays are <code>null</code> or their dimensions are not appropriate\n-     */\n-    void addData(double[] y, double[][] x, double[][] covariance);\n-\n-    /**\n      * Estimates the regression parameters b.\n      * \n      * @return The [k,1] array representing b\n--- a/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java\n  */\n public class OLSMultipleLinearRegression extends AbstractMultipleLinearRegression {\n \n-    /**\n-     * {@inheritDoc}\n-     */\n-    public void addData(double[] y, double[][] x, double[][] covariance) {\n+    public void newSampleData(double[] y, double[][] x) {\n         validateSampleData(x, y);\n-        addYSampleData(y);\n-        addXSampleData(x);\n+        newYSampleData(y);\n+        newXSampleData(x);\n     }\n     \n     /**\n--- a/src/test/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegressionTest.java\n+++ b/src/test/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegressionTest.java\n         double variance = regression.estimateRegressandVariance();\n         assertTrue(variance > 0.0);\n     }   \n-    \n-    @Test(expected=IllegalArgumentException.class)\n-    public void cannotAddXSampleData() {\n-        regression.addData(new double[]{}, null, null);\n-    }\n-\n-    @Test(expected=IllegalArgumentException.class)\n-    public void cannotAddNullYSampleData() {\n-        regression.addData(null, new double[][]{}, null);\n-    }\n-    \n-    @Test(expected=IllegalArgumentException.class)\n-    public void cannotAddSampleDataWithSizeMismatch() {\n-        double[] y = new double[]{1.0, 2.0};\n-        double[][] x = new double[1][];\n-        x[0] = new double[]{1.0, 0};\n-        regression.addData(y, x, null);\n-    }\n-    \n-    /**\n-     * Loads model Y[] and X[][] arrays from a flat array of data.\n-     * Assumes that rows are concatenated with y values first in each row.\n-     * \n-     * @param data input data array\n-     * @param y vector of y values to be filled\n-     * @param x matrix of x values to be filled\n-     * @param nobs number of observations (rows)\n-     * @param nvars number of independent variables (columnns, not counting y)\n-     */\n-    protected void loadModelData(double[] data, double[] y, double[][] x, int nobs, int nvars) {\n-        int pointer = 0;\n-        for (int i = 0; i < nobs; i++) {\n-            y[i] = data[pointer++];\n-            x[i][0] = 1.0d;\n-            for (int j = 1; j < nvars + 1; j++) {\n-                x[i][j] = data[pointer++];\n-            }\n-        }\n-        \n-    }\n \n }\n--- a/src/test/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java\n+++ b/src/test/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java\n         super.setUp();\n     }\n    \n+    @Test(expected=IllegalArgumentException.class)\n+    public void cannotAddXSampleData() {\n+        createRegression().newSampleData(new double[]{}, null, null);\n+    }\n \n     @Test(expected=IllegalArgumentException.class)\n+    public void cannotAddNullYSampleData() {\n+        createRegression().newSampleData(null, new double[][]{}, null);\n+    }\n+    \n+    @Test(expected=IllegalArgumentException.class)\n+    public void cannotAddSampleDataWithSizeMismatch() {\n+        double[] y = new double[]{1.0, 2.0};\n+        double[][] x = new double[1][];\n+        x[0] = new double[]{1.0, 0};\n+        createRegression().newSampleData(y, x, null);\n+    }\n+    \n+    @Test(expected=IllegalArgumentException.class)\n     public void cannotAddNullCovarianceData() {\n-        regression.addData(new double[]{}, new double[][]{}, null);\n+        createRegression().newSampleData(new double[]{}, new double[][]{}, null);\n     }\n     \n     @Test(expected=IllegalArgumentException.class)\n         x[1] = new double[]{0, 1.0};\n         double[][] omega = new double[1][];\n         omega[0] = new double[]{1.0, 0};\n-        regression.addData(y, x, omega);\n+        createRegression().newSampleData(y, x, omega);\n     }\n \n     @Test(expected=IllegalArgumentException.class)\n         omega[0] = new double[]{1.0, 0};\n         omega[1] = new double[]{0, 1.0};\n         omega[2] = new double[]{0, 2.0};\n-        regression.addData(y, x, omega);\n+        createRegression().newSampleData(y, x, omega);\n     }\n \n-    protected MultipleLinearRegression createRegression() {\n-        MultipleLinearRegression regression = new GLSMultipleLinearRegression();\n-        regression.addData(y, x, omega);\n+    protected GLSMultipleLinearRegression createRegression() {\n+        GLSMultipleLinearRegression regression = new GLSMultipleLinearRegression();\n+        regression.newSampleData(y, x, omega);\n         return regression;\n     }\n \n--- a/src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java\n+++ b/src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java\n         super.setUp();\n     }\n \n-    protected MultipleLinearRegression createRegression() {\n-        MultipleLinearRegression regression = new OLSMultipleLinearRegression();\n-        regression.addData(y, x, null);\n+    protected OLSMultipleLinearRegression createRegression() {\n+        OLSMultipleLinearRegression regression = new OLSMultipleLinearRegression();\n+        regression.newSampleData(y, x);\n         return regression;\n     }\n \n \n     protected int getSampleSize() {\n         return y.length;\n+    }\n+    \n+    @Test(expected=IllegalArgumentException.class)\n+    public void cannotAddXSampleData() {\n+        createRegression().newSampleData(new double[]{}, null);\n+    }\n+\n+    @Test(expected=IllegalArgumentException.class)\n+    public void cannotAddNullYSampleData() {\n+        createRegression().newSampleData(null, new double[][]{});\n+    }\n+    \n+    @Test(expected=IllegalArgumentException.class)\n+    public void cannotAddSampleDataWithSizeMismatch() {\n+        double[] y = new double[]{1.0, 2.0};\n+        double[][] x = new double[1][];\n+        x[0] = new double[]{1.0, 0};\n+        createRegression().newSampleData(y, x);\n     }\n     \n     @Test\n         // Transform to Y and X required by interface\n         int nobs = 16;\n         int nvars = 6;\n-        double[] y = new double[nobs];\n-        double[][] x = new double[nobs][nvars + 1];\n-        loadModelData(design, y, x, nobs, nvars);\n         \n         // Estimate the model\n-        MultipleLinearRegression model = new OLSMultipleLinearRegression();\n-        model.addData(y, x, null);\n+        OLSMultipleLinearRegression model = new OLSMultipleLinearRegression();\n+        model.newSampleData(design, nobs, nvars);\n         \n         // Check expected beta values from NIST\n         double[] betaHat = model.estimateRegressionParameters();\n         // Transform to Y and X required by interface\n         int nobs = 47;\n         int nvars = 4;\n-        double[] y = new double[nobs];\n-        double[][] x = new double[nobs][nvars + 1];\n-        loadModelData(design, y, x, nobs, nvars);\n \n         // Estimate the model\n-        MultipleLinearRegression model = new OLSMultipleLinearRegression();\n-        model.addData(y, x, null);\n+        OLSMultipleLinearRegression model = new OLSMultipleLinearRegression();\n+        model.newSampleData(design, nobs, nvars);\n \n         // Check expected beta values from R\n         double[] betaHat = model.estimateRegressionParameters();", "timestamp": 1215898877, "metainfo": ""}