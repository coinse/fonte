{"sha": "b92cc9d1dbf07bc5626fcc2b570cbb46bd904d0d", "log": "fixed javadoc errors  ", "commit": "\n--- a/src/java/org/apache/commons/math/FunctionEvaluationException.java\n+++ b/src/java/org/apache/commons/math/FunctionEvaluationException.java\n      * \n      * @param argument  the failing function argument \n      * @param message  the exception message text\n-     * @deprecated as of 1.2, replaced by {@link #FunctionEvaluationException(double, String, Object[])\n+     * @deprecated as of 1.2, replaced by {@link #FunctionEvaluationException(double, String, Object[])}\n      */\n     public FunctionEvaluationException(double argument, String message) {\n         super(message);\n--- a/src/java/org/apache/commons/math/MaxIterationsExceededException.java\n+++ b/src/java/org/apache/commons/math/MaxIterationsExceededException.java\n     /**\n      * Constructs an exception with specified formatted detail message.\n      * Message formatting is delegated to {@link java.text.MessageFormat}.\n-     * @param argument  the failing function argument \n+     * @param maxIterations the exceeded maximal number of iterations\n      * @param pattern format specifier\n      * @param arguments format arguments\n      */\n--- a/src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java\n    * finalize the instance, then copy this finalized instance into a\n    * new object that can be kept.</p>\n \n-   * <p>This method calls the protected {@link #doFinalize doFinalize}\n-   * method if it has never been called during this step and set a\n-   * flag indicating that it has been called once. It is the {@link\n-   * #doFinalize doFinalize} method which should perform the\n-   * evaluations. This wrapping prevents from calling {@link\n-   * #doFinalize doFinalize} several times and hence evaluating the\n-   * differential equations too often. Therefore, subclasses are not\n-   * allowed not reimplement it, they should rather reimplement {@link\n-   * #doFinalize doFinalize}.</p>\n+   * <p>This method calls the protected <code>doFinalize</code> method\n+   * if it has never been called during this step and set a flag\n+   * indicating that it has been called once. It is the <code>\n+   * doFinalize</code> method which should perform the evaluations.\n+   * This wrapping prevents from calling <code>doFinalize</code> several\n+   * times and hence evaluating the differential equations too often.\n+   * Therefore, subclasses are not allowed not reimplement it, they\n+   * should rather reimplement <code>doFinalize</code>.</p>\n \n    * @throws DerivativeException this exception is propagated to the\n    * caller if the underlying user function triggers one\n--- a/src/java/org/apache/commons/math/ode/DummyStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/DummyStepInterpolator.java\n \n   /** Simple constructor.\n    * This constructor builds an instance that is not usable yet, the\n-   * {@link AbstractStepInterpolator#reinitialize} method should be called\n-   * before using the instance in order to initialize the internal arrays. This\n-   * constructor is used only in order to delay the initialization in\n-   * some cases. As an example, the {@link\n+   * <code>AbstractStepInterpolator.reinitialize</code> protected method\n+   * should be called before using the instance in order to initialize\n+   * the internal arrays. This constructor is used only in order to delay\n+   * the initialization in some cases. As an example, the {@link\n    * RungeKuttaFehlbergIntegrator} uses the prototyping design pattern\n    * to create the step interpolators by cloning an uninitialized\n    * model and latter initializing the copy.\n--- a/src/java/org/apache/commons/math/ode/FirstOrderDifferentialEquations.java\n+++ b/src/java/org/apache/commons/math/ode/FirstOrderDifferentialEquations.java\n  * @see FirstOrderIntegrator\n  * @see FirstOrderConverter\n  * @see SecondOrderDifferentialEquations\n- * @see org.spaceroots.mantissa.utilities.ArraySliceMappable\n  *\n  * @version $Id: FirstOrderDifferentialEquations.java 1705 2006-09-17 19:57:39Z luc $\n  * @author L. Maisonobe\n--- a/src/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java\n+++ b/src/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java\n  * @see SecondOrderIntegrator\n  * @see FirstOrderConverter\n  * @see FirstOrderDifferentialEquations\n- * @see org.spaceroots.mantissa.utilities.ArraySliceMappable\n \n  * @version $Id: SecondOrderDifferentialEquations.java 1705 2006-09-17 19:57:39Z luc $\n  * @author L. Maisonobe\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java\n \n     /**\n      * Add a new vector to the sample.\n-     * @param vector vector to add\n+     * @param v vector to add\n      * @exception DimensionMismatchException if the vector does not have the right dimension\n      */\n     public void increment(double[] v) throws DimensionMismatchException {\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java\n \n     /**\n      * Add a new vector to the sample.\n-     * @param vector vector to add\n+     * @param v vector to add\n      * @exception DimensionMismatchException if the vector does not have the right dimension\n      */\n     public void increment(double[] v) throws DimensionMismatchException {", "timestamp": 1172694299, "metainfo": ""}