{"sha": "be0d5800fd33ad552ebd47e5883dd722a72a4bf7", "log": "MATH-602 Inverse condition number.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java\n         return singularValues[0] / singularValues[n - 1];\n     }\n \n+    /**\n+     * Computes the inverse of the condition number.\n+     * In cases of rank deficiency, the {@link #getConditionNumber() condition\n+     * number} will become undefined.\n+     *\n+     * @return the inverse of the condition number.\n+     */\n+    public double getInverseConditionNumber() {\n+        return singularValues[n - 1] / singularValues[0];\n+    }\n+\n     /** {@inheritDoc} */\n     public int getRank() {\n         int r = 0;\n--- a/src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java\n         Assert.assertEquals(3.0, svd.getConditionNumber(), 1.5e-15);\n     }\n \n+    @Test\n+    public void testInverseConditionNumber() {\n+        SingularValueDecompositionImpl svd =\n+            new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testSquare));\n+        Assert.assertEquals(1.0/3.0, svd.getInverseConditionNumber(), 1.5e-15);\n+    }\n+    \n     private RealMatrix createTestMatrix(final Random r, final int rows, final int columns,\n                                         final double[] singularValues) {\n         final RealMatrix u =", "timestamp": 1313221542, "metainfo": ""}