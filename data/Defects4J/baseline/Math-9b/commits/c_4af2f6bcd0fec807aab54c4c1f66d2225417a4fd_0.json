{"sha": "4af2f6bcd0fec807aab54c4c1f66d2225417a4fd", "log": "Initial commit. Replaces InterpolatorTest.   ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java\n+/*\n+ * \n+ * Copyright (c) 2004 The Apache Software Foundation. All rights reserved.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy\n+ * of the License at\n+ * \n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *  \n+ */\n+package org.apache.commons.math.analysis;\n+\n+import org.apache.commons.math.MathException;\n+import org.apache.commons.math.TestUtils;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test the SplineInterpolator.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2004/04/02 20:58:59 $ \n+ */\n+public class SplineInterpolatorTest extends TestCase {\n+    \n+    /** error tolerance for spline interpolator value at knot points */\n+    protected double knotTolerance = 1E-12;\n+   \n+    /** error tolerance for interpolating polynomial coefficients */\n+    protected double coefficientTolerance = 1E-6;\n+    \n+    /** error tolerance for interpolated values -- high value is from sin test */\n+    protected double interpolationTolerance = 1E-2;\n+\n+    public SplineInterpolatorTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(SplineInterpolatorTest.class);\n+        suite.setName(\"UnivariateRealInterpolator Tests\");\n+        return suite;\n+    }\n+\n+    public void testInterpolateLinearDegenerateTwoSegment()\n+        throws Exception {\n+        double x[] = { 0.0, 0.5, 1.0 };\n+        double y[] = { 0.0, 0.5, 1.0 };\n+        UnivariateRealInterpolator i = new SplineInterpolator();\n+        UnivariateRealFunction f = i.interpolate(x, y);\n+        verifyInterpolation(f, x, y);\n+        verifyConsistency((PolynomialSplineFunction) f, x);\n+        \n+        // Verify coefficients using analytical values\n+        PolynomialFunction polynomials[] = ((PolynomialSplineFunction) f).getPolynomials();\n+        double target[] = {y[0], 1d, 0d, 0d};\n+        TestUtils.assertEquals(polynomials[0].getCoefficients(), target, coefficientTolerance);\n+        target = new double[]{y[1], 1d, 0d, 0d};\n+        TestUtils.assertEquals(polynomials[1].getCoefficients(), target, coefficientTolerance);\n+        \n+        // Check interpolation\n+        assertEquals(0.4,f.value(0.4), interpolationTolerance);    \n+    }\n+\n+    public void testInterpolateLinearDegenerateThreeSegment()\n+        throws Exception {\n+        double x[] = { 0.0, 0.5, 1.0, 1.5 };\n+        double y[] = { 0.0, 0.5, 1.0, 1.5 };\n+        UnivariateRealInterpolator i = new SplineInterpolator();\n+        UnivariateRealFunction f = i.interpolate(x, y);\n+        verifyInterpolation(f, x, y);\n+        \n+        // Verify coefficients using analytical values\n+        PolynomialFunction polynomials[] = ((PolynomialSplineFunction) f).getPolynomials();\n+        double target[] = {y[0], 1d, 0d, 0d};\n+        TestUtils.assertEquals(polynomials[0].getCoefficients(), target, coefficientTolerance);\n+        target = new double[]{y[1], 1d, 0d, 0d};\n+        TestUtils.assertEquals(polynomials[1].getCoefficients(), target, coefficientTolerance);\n+        target = new double[]{y[2], 1d, 0d, 0d};\n+        TestUtils.assertEquals(polynomials[2].getCoefficients(), target, coefficientTolerance);\n+        \n+        // Check interpolation\n+        assertEquals(1.4,f.value(1.4), interpolationTolerance);    \n+    }\n+\n+    public void testInterpolateLinear() throws Exception {\n+        double x[] = { 0.0, 0.5, 1.0 };\n+        double y[] = { 0.0, 0.5, 0.0 };\n+        UnivariateRealInterpolator i = new SplineInterpolator();\n+        UnivariateRealFunction f = i.interpolate(x, y);\n+        verifyInterpolation(f, x, y);\n+        verifyConsistency((PolynomialSplineFunction) f, x);\n+        \n+        // Verify coefficients using analytical values\n+        PolynomialFunction polynomials[] = ((PolynomialSplineFunction) f).getPolynomials();\n+        double target[] = {y[0], 1.5d, 0d, -2d};\n+        TestUtils.assertEquals(polynomials[0].getCoefficients(), target, coefficientTolerance);\n+        target = new double[]{y[1], 0d, -3d, 2d};\n+        TestUtils.assertEquals(polynomials[1].getCoefficients(), target, coefficientTolerance);    \n+    }\n+    \n+    public void testInterpolateSin() throws Exception {\n+        double x[] =\n+            {\n+                0.0,\n+                Math.PI / 6d,\n+                Math.PI / 2d,\n+                5d * Math.PI / 6d,\n+                Math.PI,\n+                7d * Math.PI / 6d,\n+                3d * Math.PI / 2d,\n+                11d * Math.PI / 6d,\n+                2.d * Math.PI };\n+        double y[] = { 0d, 0.5d, 1d, 0.5d, 0d, -0.5d, -1d, -0.5d, 0d };\n+        UnivariateRealInterpolator i = new SplineInterpolator();\n+        UnivariateRealFunction f = i.interpolate(x, y);\n+        verifyInterpolation(f, x, y);\n+        verifyConsistency((PolynomialSplineFunction) f, x);\n+        \n+        /* Check coefficients against values computed using R (version 1.8.1, Red Hat Linux 9)\n+         * \n+         * To replicate in R:\n+         *     x[1] <- 0\n+         *     x[2] <- pi / 6, etc, same for y[] (could use y <- scan() for y values)\n+         *     g <- splinefun(x, y, \"natural\")\n+         *     splinecoef <- eval(expression(z), envir = environment(g))\n+         *     print(splinecoef) \n+         */\n+        PolynomialFunction polynomials[] = ((PolynomialSplineFunction) f).getPolynomials();\n+        double target[] = {y[0], 1.002676d, 0d, -0.17415829d};\n+        TestUtils.assertEquals(polynomials[0].getCoefficients(), target, coefficientTolerance);\n+        target = new double[]{y[1], 8.594367e-01, -2.735672e-01, -0.08707914};\n+        TestUtils.assertEquals(polynomials[1].getCoefficients(), target, coefficientTolerance);\n+        target = new double[]{y[2], 1.471804e-17,-5.471344e-01, 0.08707914};\n+        TestUtils.assertEquals(polynomials[2].getCoefficients(), target, coefficientTolerance);\n+        target = new double[]{y[3], -8.594367e-01, -2.735672e-01, 0.17415829};\n+        TestUtils.assertEquals(polynomials[3].getCoefficients(), target, coefficientTolerance);\n+        target = new double[]{y[4], -1.002676, 6.548562e-17, 0.17415829};\n+        TestUtils.assertEquals(polynomials[4].getCoefficients(), target, coefficientTolerance);\n+        target = new double[]{y[5], -8.594367e-01, 2.735672e-01, 0.08707914};\n+        TestUtils.assertEquals(polynomials[5].getCoefficients(), target, coefficientTolerance);\n+        target = new double[]{y[6], 3.466465e-16, 5.471344e-01, -0.08707914};\n+        TestUtils.assertEquals(polynomials[6].getCoefficients(), target, coefficientTolerance);\n+        target = new double[]{y[7], 8.594367e-01, 2.735672e-01, -0.17415829};\n+        TestUtils.assertEquals(polynomials[7].getCoefficients(), target, coefficientTolerance); \n+        \n+        //Check interpolation\n+        assertEquals(Math.sqrt(2d) / 2d,f.value(Math.PI/4d),interpolationTolerance);\n+        assertEquals(Math.sqrt(2d) / 2d,f.value(3d*Math.PI/4d),interpolationTolerance);     \n+    }\n+    \n+\n+    public void testIllegalArguments() throws MathException {\n+        // Data set arrays of different size.\n+        UnivariateRealInterpolator i = new SplineInterpolator();\n+        try {\n+            double xval[] = { 0.0, 1.0 };\n+            double yval[] = { 0.0, 1.0, 2.0 };\n+            i.interpolate(xval, yval);\n+            fail(\"Failed to detect data set array with different sizes.\");\n+        } catch (IllegalArgumentException iae) {\n+        }\n+        // X values not sorted.\n+        try {\n+            double xval[] = { 0.0, 1.0, 0.5 };\n+            double yval[] = { 0.0, 1.0, 2.0 };\n+            i.interpolate(xval, yval);\n+            fail(\"Failed to detect unsorted arguments.\");\n+        } catch (IllegalArgumentException iae) {\n+        }\n+    }\n+    \n+    /**\n+     * verifies that f(x[i]) = y[i] for i = 0..n -1 where n is common length -- skips last point.\n+     */\n+    protected void verifyInterpolation(UnivariateRealFunction f, double x[], double y[])  \n+    \tthrows Exception{\n+        for (int i = 0; i < x.length - 1; i++) {\n+            assertEquals(f.value(x[i]), y[i], knotTolerance);\n+        }     \n+    }\n+    \n+    /**\n+     * Verifies that interpolating polynomials satisfy consistency requirement:\n+     *    adjacent polynomials must agree through two derivatives at knot points\n+     */\n+    protected void verifyConsistency(PolynomialSplineFunction f, double x[]) \n+    \tthrows Exception {\n+        PolynomialFunction polynomials[] = f.getPolynomials();\n+        for (int i = 1; i < x.length - 2; i++) {\n+            // evaluate polynomials and derivatives at x[i + 1]  \n+            assertEquals(polynomials[i].value(x[i +1] - x[i]), polynomials[i + 1].value(0), 0.1); \n+            assertEquals(polynomials[i].derivative().value(x[i +1] - x[i]), \n+                    polynomials[i + 1].derivative().value(0), 0.5); \n+            assertEquals(polynomials[i].polynomialDerivative().derivative().value(x[i +1] - x[i]), \n+                    polynomials[i + 1].polynomialDerivative().derivative().value(0), 0.5); \n+        }\n+    }\n+    \n+}", "timestamp": 1080939539, "metainfo": ""}