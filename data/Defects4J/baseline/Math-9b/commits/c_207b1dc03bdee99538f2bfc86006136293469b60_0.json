{"sha": "207b1dc03bdee99538f2bfc86006136293469b60", "log": "replaced references to RealMatrixImpl  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java\n+++ b/src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java\n         if (cachedQt == null) {\n \n             final int m = householderVectors.length;\n-            final double[][] qtData  = new double[m][m];\n+            cachedQt = MatrixUtils.createRealMatrix(m, m);\n \n             // build up first part of the matrix by applying Householder transforms\n             for (int k = m - 1; k >= 1; --k) {\n                 final double[] hK = householderVectors[k - 1];\n                 final double inv = 1.0 / (secondary[k - 1] * hK[k]);\n-                qtData[k][k] = 1;\n+                cachedQt.setEntry(k, k, 1);\n                 if (hK[k] != 0.0) {\n-                    final double[] qtK = qtData[k];\n                     double beta = 1.0 / secondary[k - 1];\n-                    qtK[k] = 1 + beta * hK[k];\n+                    cachedQt.setEntry(k, k, 1 + beta * hK[k]);\n                     for (int i = k + 1; i < m; ++i) {\n-                        qtK[i] = beta * hK[i];\n+                        cachedQt.setEntry(k, i, beta * hK[i]);\n                     }\n                     for (int j = k + 1; j < m; ++j) {\n-                        final double[] qtJ = qtData[j];\n                         beta = 0;\n                         for (int i = k + 1; i < m; ++i) {\n-                            beta += qtJ[i] * hK[i];\n+                            beta += cachedQt.getEntry(j, i) * hK[i];\n                         }\n                         beta *= inv;\n-                        qtJ[k] = beta * hK[k];\n+                        cachedQt.setEntry(j, k, beta * hK[k]);\n                         for (int i = k + 1; i < m; ++i) {\n-                            qtJ[i] += beta * hK[i];\n+                            cachedQt.addToEntry(j, i, beta * hK[i]);\n                         }\n                     }\n                 }\n             }\n-            qtData[0][0] = 1;\n-\n-            // cache the matrix for subsequent calls\n-            cachedQt = new RealMatrixImpl(qtData, false);\n+            cachedQt.setEntry(0, 0, 1);\n \n         }\n \n         if (cachedT == null) {\n \n             final int m = main.length;\n-            double[][] tData = new double[m][m];\n+            cachedT = MatrixUtils.createRealMatrix(m, m);\n             for (int i = 0; i < m; ++i) {\n-                double[] tDataI = tData[i];\n-                tDataI[i] = main[i];\n+                cachedT.setEntry(i, i, main[i]);\n                 if (i > 0) {\n-                    tDataI[i - 1] = secondary[i - 1];\n+                    cachedT.setEntry(i, i - 1, secondary[i - 1]);\n                 }\n                 if (i < main.length - 1) {\n-                    tDataI[i + 1] = secondary[i];\n-                }\n-            }\n-\n-            // cache the matrix for subsequent calls\n-            cachedT = new RealMatrixImpl(tData, false);\n+                    cachedT.setEntry(i, i + 1, secondary[i]);\n+                }\n+            }\n \n         }\n ", "timestamp": 1229952509, "metainfo": ""}