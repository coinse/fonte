{"sha": "0308fc3555d1f3b15e914fb8a097bc8f23d2f508", "log": "MATH-459 Removed usage of \"o.a.c.m.MathRuntimeException\".   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n \n import java.io.Serializable;\n \n-import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.MathArithmeticException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.MathUtils;\n import org.apache.commons.math.util.FastMath;\n  * @version $Revision$ $Date$\n  * @since 1.2\n  */\n-\n-public class Vector3D\n-  implements Serializable {\n-\n+public class Vector3D implements Serializable {\n   /** Null vector (coordinates: 0, 0, 0). */\n   public static final Vector3D ZERO   = new Vector3D(0, 0, 0);\n \n   public Vector3D normalize() {\n     double s = getNorm();\n     if (s == 0) {\n-      throw MathRuntimeException.createArithmeticException(LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR);\n+      throw new MathArithmeticException(LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR);\n     }\n     return scalarMultiply(1 / s);\n   }\n \n     double threshold = 0.6 * getNorm();\n     if (threshold == 0) {\n-      throw MathRuntimeException.createArithmeticException(LocalizedFormats.ZERO_NORM);\n+      throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n     }\n \n     if ((x >= -threshold) && (x <= threshold)) {\n \n     double normProduct = v1.getNorm() * v2.getNorm();\n     if (normProduct == 0) {\n-      throw MathRuntimeException.createArithmeticException(LocalizedFormats.ZERO_NORM);\n+      throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n     }\n \n     double dot = dotProduct(v1, v2);\n--- a/src/test/java/org/apache/commons/math/geometry/Vector3DTest.java\n+++ b/src/test/java/org/apache/commons/math/geometry/Vector3DTest.java\n \n import org.apache.commons.math.geometry.Vector3D;\n import org.apache.commons.math.util.FastMath;\n-\n-import junit.framework.*;\n-\n-public class Vector3DTest\n-  extends TestCase {\n-\n-  public Vector3DTest(String name) {\n-    super(name);\n+import org.apache.commons.math.exception.MathArithmeticException;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class Vector3DTest {\n+    @Test\n+    public void testConstructors() {\n+        double r = FastMath.sqrt(2) /2;\n+        checkVector(new Vector3D(2, new Vector3D(FastMath.PI / 3, -FastMath.PI / 4)),\n+                    r, r * FastMath.sqrt(3), -2 * r);\n+        checkVector(new Vector3D(2, Vector3D.PLUS_I,\n+                                 -3, Vector3D.MINUS_K),\n+                    2, 0, 3);\n+        checkVector(new Vector3D(2, Vector3D.PLUS_I,\n+                                 5, Vector3D.PLUS_J,\n+                                 -3, Vector3D.MINUS_K),\n+                    2, 5, 3);\n+        checkVector(new Vector3D(2, Vector3D.PLUS_I,\n+                                 5, Vector3D.PLUS_J,\n+                                 5, Vector3D.MINUS_J,\n+                                 -3, Vector3D.MINUS_K),\n+                    2, 0, 3);\n+    }\n+\n+    @Test\n+    public void testCoordinates() {\n+        Vector3D v = new Vector3D(1, 2, 3);\n+        Assert.assertTrue(FastMath.abs(v.getX() - 1) < 1.0e-12);\n+        Assert.assertTrue(FastMath.abs(v.getY() - 2) < 1.0e-12);\n+        Assert.assertTrue(FastMath.abs(v.getZ() - 3) < 1.0e-12);\n+    }\n+\n+    @Test\n+    public void testNorm1() {\n+        Assert.assertEquals(0.0, Vector3D.ZERO.getNorm1(), 0);\n+        Assert.assertEquals(6.0, new Vector3D(1, -2, 3).getNorm1(), 0);\n+    }\n+\n+    @Test\n+    public void testNorm() {\n+        Assert.assertEquals(0.0, Vector3D.ZERO.getNorm(), 0);\n+        Assert.assertEquals(FastMath.sqrt(14), new Vector3D(1, 2, 3).getNorm(), 1.0e-12);\n+    }\n+\n+    @Test\n+    public void testNormInf() {\n+        Assert.assertEquals(0.0, Vector3D.ZERO.getNormInf(), 0);\n+        Assert.assertEquals(3.0, new Vector3D(1, -2, 3).getNormInf(), 0);\n+    }\n+\n+    @Test\n+    public void testDistance1() {\n+        Vector3D v1 = new Vector3D(1, -2, 3);\n+        Vector3D v2 = new Vector3D(-4, 2, 0);\n+        Assert.assertEquals(0.0, Vector3D.distance1(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);\n+        Assert.assertEquals(12.0, Vector3D.distance1(v1, v2), 1.0e-12);\n+        Assert.assertEquals(v1.subtract(v2).getNorm1(), Vector3D.distance1(v1, v2), 1.0e-12);\n+    }\n+\n+    @Test\n+    public void testDistance() {\n+        Vector3D v1 = new Vector3D(1, -2, 3);\n+        Vector3D v2 = new Vector3D(-4, 2, 0);\n+        Assert.assertEquals(0.0, Vector3D.distance(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);\n+        Assert.assertEquals(FastMath.sqrt(50), Vector3D.distance(v1, v2), 1.0e-12);\n+        Assert.assertEquals(v1.subtract(v2).getNorm(), Vector3D.distance(v1, v2), 1.0e-12);\n+    }\n+\n+    @Test\n+    public void testDistanceSq() {\n+        Vector3D v1 = new Vector3D(1, -2, 3);\n+        Vector3D v2 = new Vector3D(-4, 2, 0);\n+        Assert.assertEquals(0.0, Vector3D.distanceSq(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);\n+        Assert.assertEquals(50.0, Vector3D.distanceSq(v1, v2), 1.0e-12);\n+        Assert.assertEquals(Vector3D.distance(v1, v2) * Vector3D.distance(v1, v2),\n+                            Vector3D.distanceSq(v1, v2), 1.0e-12);\n   }\n \n-  public void testConstructors() {\n-      double r = FastMath.sqrt(2) /2;\n-      checkVector(new Vector3D(2, new Vector3D(FastMath.PI / 3, -FastMath.PI / 4)),\n-                  r, r * FastMath.sqrt(3), -2 * r);\n-      checkVector(new Vector3D(2, Vector3D.PLUS_I,\n-                              -3, Vector3D.MINUS_K),\n-                  2, 0, 3);\n-      checkVector(new Vector3D(2, Vector3D.PLUS_I,\n-                               5, Vector3D.PLUS_J,\n-                              -3, Vector3D.MINUS_K),\n-                  2, 5, 3);\n-      checkVector(new Vector3D(2, Vector3D.PLUS_I,\n-                               5, Vector3D.PLUS_J,\n-                               5, Vector3D.MINUS_J,\n-                               -3, Vector3D.MINUS_K),\n-                  2, 0, 3);\n+    @Test\n+    public void testDistanceInf() {\n+        Vector3D v1 = new Vector3D(1, -2, 3);\n+        Vector3D v2 = new Vector3D(-4, 2, 0);\n+        Assert.assertEquals(0.0, Vector3D.distanceInf(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);\n+        Assert.assertEquals(5.0, Vector3D.distanceInf(v1, v2), 1.0e-12);\n+        Assert.assertEquals(v1.subtract(v2).getNormInf(), Vector3D.distanceInf(v1, v2), 1.0e-12);\n+    }\n+\n+    @Test\n+    public void testSubtract() {\n+        Vector3D v1 = new Vector3D(1, 2, 3);\n+        Vector3D v2 = new Vector3D(-3, -2, -1);\n+        v1 = v1.subtract(v2);\n+        checkVector(v1, 4, 4, 4);\n+\n+        checkVector(v2.subtract(v1), -7, -6, -5);\n+        checkVector(v2.subtract(3, v1), -15, -14, -13);\n+    }\n+\n+    @Test\n+    public void testAdd() {\n+        Vector3D v1 = new Vector3D(1, 2, 3);\n+        Vector3D v2 = new Vector3D(-3, -2, -1);\n+        v1 = v1.add(v2);\n+        checkVector(v1, -2, 0, 2);\n+\n+        checkVector(v2.add(v1), -5, -2, 1);\n+        checkVector(v2.add(3, v1), -9, -2, 5);\n+    }\n+\n+    @Test\n+    public void testScalarProduct() {\n+        Vector3D v = new Vector3D(1, 2, 3);\n+        v = v.scalarMultiply(3);\n+        checkVector(v, 3, 6, 9);\n+\n+        checkVector(v.scalarMultiply(0.5), 1.5, 3, 4.5);\n+    }\n+\n+    @Test\n+    public void testVectorialProducts() {\n+        Vector3D v1 = new Vector3D(2, 1, -4);\n+        Vector3D v2 = new Vector3D(3, 1, -1);\n+\n+        Assert.assertTrue(FastMath.abs(Vector3D.dotProduct(v1, v2) - 11) < 1.0e-12);\n+\n+        Vector3D v3 = Vector3D.crossProduct(v1, v2);\n+        checkVector(v3, 3, -10, -1);\n+\n+        Assert.assertTrue(FastMath.abs(Vector3D.dotProduct(v1, v3)) < 1.0e-12);\n+        Assert.assertTrue(FastMath.abs(Vector3D.dotProduct(v2, v3)) < 1.0e-12);\n+    }\n+\n+    @Test\n+    public void testAngular() {\n+        Assert.assertEquals(0,           Vector3D.PLUS_I.getAlpha(), 1.0e-10);\n+        Assert.assertEquals(0,           Vector3D.PLUS_I.getDelta(), 1.0e-10);\n+        Assert.assertEquals(FastMath.PI / 2, Vector3D.PLUS_J.getAlpha(), 1.0e-10);\n+        Assert.assertEquals(0,           Vector3D.PLUS_J.getDelta(), 1.0e-10);\n+        Assert.assertEquals(0,           Vector3D.PLUS_K.getAlpha(), 1.0e-10);\n+        Assert.assertEquals(FastMath.PI / 2, Vector3D.PLUS_K.getDelta(), 1.0e-10);\n+      \n+        Vector3D u = new Vector3D(-1, 1, -1);\n+        Assert.assertEquals(3 * FastMath.PI /4, u.getAlpha(), 1.0e-10);\n+        Assert.assertEquals(-1.0 / FastMath.sqrt(3), FastMath.sin(u.getDelta()), 1.0e-10);\n+    }\n+\n+    @Test\n+    public void testAngularSeparation() {\n+        Vector3D v1 = new Vector3D(2, -1, 4);\n+\n+        Vector3D  k = v1.normalize();\n+        Vector3D  i = k.orthogonal();\n+        Vector3D v2 = k.scalarMultiply(FastMath.cos(1.2)).add(i.scalarMultiply(FastMath.sin(1.2)));\n+\n+        Assert.assertTrue(FastMath.abs(Vector3D.angle(v1, v2) - 1.2) < 1.0e-12);\n   }\n \n-  public void testCoordinates() {\n-    Vector3D v = new Vector3D(1, 2, 3);\n-    assertTrue(FastMath.abs(v.getX() - 1) < 1.0e-12);\n-    assertTrue(FastMath.abs(v.getY() - 2) < 1.0e-12);\n-    assertTrue(FastMath.abs(v.getZ() - 3) < 1.0e-12);\n-  }\n-\n-  public void testNorm1() {\n-    assertEquals(0.0, Vector3D.ZERO.getNorm1());\n-    assertEquals(6.0, new Vector3D(1, -2, 3).getNorm1(), 0);\n-  }\n-\n-  public void testNorm() {\n-      assertEquals(0.0, Vector3D.ZERO.getNorm());\n-      assertEquals(FastMath.sqrt(14), new Vector3D(1, 2, 3).getNorm(), 1.0e-12);\n-    }\n-\n-  public void testNormInf() {\n-      assertEquals(0.0, Vector3D.ZERO.getNormInf());\n-      assertEquals(3.0, new Vector3D(1, -2, 3).getNormInf(), 0);\n-    }\n-\n-  public void testDistance1() {\n-      Vector3D v1 = new Vector3D(1, -2, 3);\n-      Vector3D v2 = new Vector3D(-4, 2, 0);\n-      assertEquals(0.0, Vector3D.distance1(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);\n-      assertEquals(12.0, Vector3D.distance1(v1, v2), 1.0e-12);\n-      assertEquals(v1.subtract(v2).getNorm1(), Vector3D.distance1(v1, v2), 1.0e-12);\n-  }\n-\n-  public void testDistance() {\n-      Vector3D v1 = new Vector3D(1, -2, 3);\n-      Vector3D v2 = new Vector3D(-4, 2, 0);\n-      assertEquals(0.0, Vector3D.distance(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);\n-      assertEquals(FastMath.sqrt(50), Vector3D.distance(v1, v2), 1.0e-12);\n-      assertEquals(v1.subtract(v2).getNorm(), Vector3D.distance(v1, v2), 1.0e-12);\n-  }\n-\n-  public void testDistanceSq() {\n-      Vector3D v1 = new Vector3D(1, -2, 3);\n-      Vector3D v2 = new Vector3D(-4, 2, 0);\n-      assertEquals(0.0, Vector3D.distanceSq(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);\n-      assertEquals(50.0, Vector3D.distanceSq(v1, v2), 1.0e-12);\n-      assertEquals(Vector3D.distance(v1, v2) * Vector3D.distance(v1, v2),\n-                   Vector3D.distanceSq(v1, v2), 1.0e-12);\n-  }\n-\n-  public void testDistanceInf() {\n-      Vector3D v1 = new Vector3D(1, -2, 3);\n-      Vector3D v2 = new Vector3D(-4, 2, 0);\n-      assertEquals(0.0, Vector3D.distanceInf(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);\n-      assertEquals(5.0, Vector3D.distanceInf(v1, v2), 1.0e-12);\n-      assertEquals(v1.subtract(v2).getNormInf(), Vector3D.distanceInf(v1, v2), 1.0e-12);\n-  }\n-\n-  public void testSubtract() {\n-\n-    Vector3D v1 = new Vector3D(1, 2, 3);\n-    Vector3D v2 = new Vector3D(-3, -2, -1);\n-    v1 = v1.subtract(v2);\n-    checkVector(v1, 4, 4, 4);\n-\n-    checkVector(v2.subtract(v1), -7, -6, -5);\n-    checkVector(v2.subtract(3, v1), -15, -14, -13);\n-\n-  }\n-\n-  public void testAdd() {\n-    Vector3D v1 = new Vector3D(1, 2, 3);\n-    Vector3D v2 = new Vector3D(-3, -2, -1);\n-    v1 = v1.add(v2);\n-    checkVector(v1, -2, 0, 2);\n-\n-    checkVector(v2.add(v1), -5, -2, 1);\n-    checkVector(v2.add(3, v1), -9, -2, 5);\n-\n-  }\n-\n-  public void testScalarProduct() {\n-    Vector3D v = new Vector3D(1, 2, 3);\n-    v = v.scalarMultiply(3);\n-    checkVector(v, 3, 6, 9);\n-\n-    checkVector(v.scalarMultiply(0.5), 1.5, 3, 4.5);\n-\n-  }\n-\n-  public void testVectorialProducts() {\n-    Vector3D v1 = new Vector3D(2, 1, -4);\n-    Vector3D v2 = new Vector3D(3, 1, -1);\n-\n-    assertTrue(FastMath.abs(Vector3D.dotProduct(v1, v2) - 11) < 1.0e-12);\n-\n-    Vector3D v3 = Vector3D.crossProduct(v1, v2);\n-    checkVector(v3, 3, -10, -1);\n-\n-    assertTrue(FastMath.abs(Vector3D.dotProduct(v1, v3)) < 1.0e-12);\n-    assertTrue(FastMath.abs(Vector3D.dotProduct(v2, v3)) < 1.0e-12);\n-\n-  }\n-\n-  public void testAngular() {\n-\n-    assertEquals(0,           Vector3D.PLUS_I.getAlpha(), 1.0e-10);\n-    assertEquals(0,           Vector3D.PLUS_I.getDelta(), 1.0e-10);\n-    assertEquals(FastMath.PI / 2, Vector3D.PLUS_J.getAlpha(), 1.0e-10);\n-    assertEquals(0,           Vector3D.PLUS_J.getDelta(), 1.0e-10);\n-    assertEquals(0,           Vector3D.PLUS_K.getAlpha(), 1.0e-10);\n-    assertEquals(FastMath.PI / 2, Vector3D.PLUS_K.getDelta(), 1.0e-10);\n-\n-    Vector3D u = new Vector3D(-1, 1, -1);\n-    assertEquals(3 * FastMath.PI /4, u.getAlpha(), 1.0e-10);\n-    assertEquals(-1.0 / FastMath.sqrt(3), FastMath.sin(u.getDelta()), 1.0e-10);\n-\n-  }\n-\n-  public void testAngularSeparation() {\n-    Vector3D v1 = new Vector3D(2, -1, 4);\n-\n-    Vector3D  k = v1.normalize();\n-    Vector3D  i = k.orthogonal();\n-    Vector3D v2 = k.scalarMultiply(FastMath.cos(1.2)).add(i.scalarMultiply(FastMath.sin(1.2)));\n-\n-    assertTrue(FastMath.abs(Vector3D.angle(v1, v2) - 1.2) < 1.0e-12);\n-\n-  }\n-\n-  public void testNormalize() {\n-    assertEquals(1.0, new Vector3D(5, -4, 2).normalize().getNorm(), 1.0e-12);\n-    try {\n-        Vector3D.ZERO.normalize();\n-        fail(\"an exception should have been thrown\");\n-    } catch (ArithmeticException ae) {\n-        // expected behavior\n-    }\n-  }\n-\n-  public void testOrthogonal() {\n-      Vector3D v1 = new Vector3D(0.1, 2.5, 1.3);\n-      assertEquals(0.0, Vector3D.dotProduct(v1, v1.orthogonal()), 1.0e-12);\n-      Vector3D v2 = new Vector3D(2.3, -0.003, 7.6);\n-      assertEquals(0.0, Vector3D.dotProduct(v2, v2.orthogonal()), 1.0e-12);\n-      Vector3D v3 = new Vector3D(-1.7, 1.4, 0.2);\n-      assertEquals(0.0, Vector3D.dotProduct(v3, v3.orthogonal()), 1.0e-12);\n-      try {\n-          new Vector3D(0, 0, 0).orthogonal();\n-          fail(\"an exception should have been thrown\");\n-      } catch (ArithmeticException ae) {\n-          // expected behavior\n-      }\n-  }\n-\n-  public void testAngle() {\n-     assertEquals(0.22572612855273393616,\n-                  Vector3D.angle(new Vector3D(1, 2, 3), new Vector3D(4, 5, 6)),\n-                  1.0e-12);\n-     assertEquals(7.98595620686106654517199e-8,\n-                  Vector3D.angle(new Vector3D(1, 2, 3), new Vector3D(2, 4, 6.000001)),\n-                  1.0e-12);\n-     assertEquals(3.14159257373023116985197793156,\n-                  Vector3D.angle(new Vector3D(1, 2, 3), new Vector3D(-2, -4, -6.000001)),\n-                  1.0e-12);\n-     try {\n-         Vector3D.angle(Vector3D.ZERO, Vector3D.PLUS_I);\n-         fail(\"an exception should have been thrown\");\n-     } catch (ArithmeticException ae) {\n-         // expected behavior\n-     }\n-  }\n-\n-  private void checkVector(Vector3D v, double x, double y, double z) {\n-      assertEquals(x, v.getX(), 1.0e-12);\n-      assertEquals(y, v.getY(), 1.0e-12);\n-      assertEquals(z, v.getZ(), 1.0e-12);\n-  }\n-\n+    @Test\n+    public void testNormalize() {\n+        Assert.assertEquals(1.0, new Vector3D(5, -4, 2).normalize().getNorm(), 1.0e-12);\n+        try {\n+            Vector3D.ZERO.normalize();\n+            Assert.fail(\"an exception should have been thrown\");\n+        } catch (MathArithmeticException ae) {\n+            // expected behavior\n+        }\n+    }\n+\n+    @Test\n+    public void testOrthogonal() {\n+        Vector3D v1 = new Vector3D(0.1, 2.5, 1.3);\n+        Assert.assertEquals(0.0, Vector3D.dotProduct(v1, v1.orthogonal()), 1.0e-12);\n+        Vector3D v2 = new Vector3D(2.3, -0.003, 7.6);\n+        Assert.assertEquals(0.0, Vector3D.dotProduct(v2, v2.orthogonal()), 1.0e-12);\n+        Vector3D v3 = new Vector3D(-1.7, 1.4, 0.2);\n+        Assert.assertEquals(0.0, Vector3D.dotProduct(v3, v3.orthogonal()), 1.0e-12);\n+        try {\n+            new Vector3D(0, 0, 0).orthogonal();\n+            Assert.fail(\"an exception should have been thrown\");\n+        } catch (MathArithmeticException ae) {\n+            // expected behavior\n+        }\n+    }\n+\n+    @Test\n+    public void testAngle() {\n+        Assert.assertEquals(0.22572612855273393616,\n+                            Vector3D.angle(new Vector3D(1, 2, 3), new Vector3D(4, 5, 6)),\n+                            1.0e-12);\n+        Assert.assertEquals(7.98595620686106654517199e-8,\n+                            Vector3D.angle(new Vector3D(1, 2, 3), new Vector3D(2, 4, 6.000001)),\n+                            1.0e-12);\n+        Assert.assertEquals(3.14159257373023116985197793156,\n+                            Vector3D.angle(new Vector3D(1, 2, 3), new Vector3D(-2, -4, -6.000001)),\n+                            1.0e-12);\n+        try {\n+            Vector3D.angle(Vector3D.ZERO, Vector3D.PLUS_I);\n+            Assert.fail(\"an exception should have been thrown\");\n+        } catch (MathArithmeticException ae) {\n+            // expected behavior\n+        }\n+    }\n+\n+    private void checkVector(Vector3D v, double x, double y, double z) {\n+        Assert.assertEquals(x, v.getX(), 1.0e-12);\n+        Assert.assertEquals(y, v.getY(), 1.0e-12);\n+        Assert.assertEquals(z, v.getZ(), 1.0e-12);\n+    }\n }", "timestamp": 1294441186, "metainfo": ""}