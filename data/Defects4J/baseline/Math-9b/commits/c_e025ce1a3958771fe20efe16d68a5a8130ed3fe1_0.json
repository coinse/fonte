{"sha": "e025ce1a3958771fe20efe16d68a5a8130ed3fe1", "log": "handle serialization of ComplexField (which is a singleton) properly and test it  ", "commit": "\n--- a/src/java/org/apache/commons/math/complex/ComplexField.java\n+++ b/src/java/org/apache/commons/math/complex/ComplexField.java\n  * @since 2.0\n  */\n public class ComplexField implements Field<Complex>, Serializable  {\n-    // TODO: Add Serializable documentation\n-    // TODO: Check Serializable implementation\n \n     /** Serializable version identifier. */\n     private static final long serialVersionUID = -6130362688700788798L;\n         private static final ComplexField INSTANCE = new ComplexField();\n     }\n \n+    /** Handle deserialization of the singleton.\n+     * @return the singleton instance\n+     */\n+    private Object readResolve() {\n+        // return the singleton instance\n+        return LazyHolder.INSTANCE; \n+    }\n+\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/complex/ComplexFieldTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.complex;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.commons.math.TestUtils;\n+import org.junit.Test;\n+\n+public class ComplexFieldTest {\n+\n+    @Test\n+    public void testZero() {\n+        assertEquals(Complex.ZERO, ComplexField.getInstance().getZero());\n+    }\n+\n+    @Test\n+    public void testOne() {\n+        assertEquals(Complex.ONE, ComplexField.getInstance().getOne());\n+    }\n+\n+    @Test\n+    public void testSerial() {\n+        // deserializing the singleton should give the singleton itself back\n+        ComplexField field = ComplexField.getInstance();\n+        assertTrue(field == TestUtils.serializeAndRecover(field));\n+    }\n+\n+}", "timestamp": 1248108510, "metainfo": ""}