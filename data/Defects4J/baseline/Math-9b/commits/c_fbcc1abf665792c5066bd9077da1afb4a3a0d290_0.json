{"sha": "fbcc1abf665792c5066bd9077da1afb4a3a0d290", "log": "fixed scalb for very large powers  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math/util/FastMath.java\n         if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {\n             return d;\n         }\n+        if (n < -2098) {\n+            return (d > 0) ? 0.0 : -0.0;\n+        }\n+        if (n > 2097) {\n+            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;\n+        }\n \n         // decompose d\n         final long bits = Double.doubleToLongBits(d);\n         // handle special cases\n         if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {\n             return f;\n+        }\n+        if (n < -277) {\n+            return (f > 0) ? 0.0f : -0.0f;\n+        }\n+        if (n > 276) {\n+            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;\n         }\n \n         // decompose f\n--- a/src/test/java/org/apache/commons/math/util/FastMathTest.java\n+++ b/src/test/java/org/apache/commons/math/util/FastMathTest.java\n         Assert.assertEquals(Double.NEGATIVE_INFINITY, FastMath.scalb(-1.1102230246251565E-16,  1079), 0D);\n         Assert.assertEquals(Double.NEGATIVE_INFINITY, FastMath.scalb(-2.2250738585072014E-308, 2047), 0D);\n         Assert.assertEquals(Double.NEGATIVE_INFINITY, FastMath.scalb(-2.2250738585072014E-308, 2048), 0D);\n+        Assert.assertEquals(Double.NEGATIVE_INFINITY, FastMath.scalb(-1.7976931348623157E308,  2147483647), 0D);\n+        Assert.assertEquals(Double.POSITIVE_INFINITY, FastMath.scalb( 1.7976931348623157E308,  2147483647), 0D);\n+        Assert.assertEquals(Double.NEGATIVE_INFINITY, FastMath.scalb(-1.1102230246251565E-16,  2147483647), 0D);\n+        Assert.assertEquals(Double.POSITIVE_INFINITY, FastMath.scalb( 1.1102230246251565E-16,  2147483647), 0D);\n+        Assert.assertEquals(Double.NEGATIVE_INFINITY, FastMath.scalb(-2.2250738585072014E-308, 2147483647), 0D);\n+        Assert.assertEquals(Double.POSITIVE_INFINITY, FastMath.scalb( 2.2250738585072014E-308, 2147483647), 0D);\n     }\n \n     @Test\n         Assert.assertEquals(Float.POSITIVE_INFINITY,  FastMath.scalb(Float.POSITIVE_INFINITY, -1000000), 0F);\n         Assert.assertEquals(-3.13994498e38f,          FastMath.scalb(-1.1e-7f,         151), 0F);\n         Assert.assertEquals(Float.NEGATIVE_INFINITY,  FastMath.scalb(-1.1e-7f,         152), 0F);\n+        Assert.assertEquals(Float.POSITIVE_INFINITY,  FastMath.scalb(3.4028235E38f,  2147483647), 0F);\n+        Assert.assertEquals(Float.NEGATIVE_INFINITY,  FastMath.scalb(-3.4028235E38f, 2147483647), 0F);;\n     }\n \n     private boolean compareClassMethods(Class<?> class1, Class<?> class2){", "timestamp": 1295896413, "metainfo": ""}