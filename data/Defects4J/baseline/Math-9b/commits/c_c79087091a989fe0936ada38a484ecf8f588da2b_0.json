{"sha": "c79087091a989fe0936ada38a484ecf8f588da2b", "log": "Javadoc.   ", "commit": "\n--- a/src/java/org/apache/commons/math/random/EmpiricalDistribution.java\n+++ b/src/java/org/apache/commons/math/random/EmpiricalDistribution.java\n  * build grouped frequnecy histograms representing the input data or to\n  * generate random values \"like\" those in the input file -- i.e., the values\n  * generated will follow the distribution of the values in the file.\n- * @version $Revision: 1.15 $ $Date: 2004/02/21 21:35:15 $\n+ * @version $Revision: 1.16 $ $Date: 2004/03/21 21:57:18 $\n  */\n public interface EmpiricalDistribution {\n  \n     \n     /**\n      * Computes the empirical distribution using data read from a URL.\n-     * @param file url of the input file\n+     * @param url url of the input file\n      * @throws IOException if an IO error occurs\n      */\n     void load(URL url) throws IOException;\n--- a/src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java\n /**\n  * Abstract superclass for DescriptiveStatistics implementations. \n  * \n- * @version $Revision: 1.4 $ $Date: 2004/02/21 21:35:15 $\n+ * @version $Revision: 1.5 $ $Date: 2004/03/21 21:57:18 $\n  */\n public abstract class AbstractDescriptiveStatistics\n     extends DescriptiveStatistics {\n     }\n     \n     /**\n-     * @see org.apache.commons.math.stat.DescriptiveStatistics#getPercentile()\n+     * @see org.apache.commons.math.stat.DescriptiveStatistics#getPercentile(double)\n      */\n     public double getPercentile(double p) {\n     \treturn apply(new Percentile(p));\n--- a/src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java\n \n /**\n  *\n- * Abstract Implementation for StorelessUnivariateStatistics.\n- * Provides the ability to extend polymophically so that\n- * indiviual statistics do not need to implement these methods unless\n- * there are better algorithms for handling the calculation.\n- * @version $Revision: 1.13 $ $Date: 2004/02/21 21:35:15 $\n+ * Abstract Implementation for the {@link StorelessUnivariateStatistic} interface.\n+ * <p>\n+ * Provides a default <code>evaluate()</code> implementation.\n+ * \n+ * @version $Revision: 1.14 $ $Date: 2004/03/21 21:57:18 $\n  */\n public abstract class AbstractStorelessUnivariateStatistic\n     extends AbstractUnivariateStatistic\n     implements StorelessUnivariateStatistic {\n \n     /**\n-     * This default implementation just calls {@link #increment} in a loop and then {@link #getResult} to\n-     * compute the return value.  Most implementations will override this method with a more efficient implementation.\n+     * This default implementation just calls {@link #increment} in a loop over the input array and \n+     * then {@link #getResult} to compute the return value.  \n+     * <p>\n+     * Most implementations will override this method with a more efficient implementation that works\n+     * directly with the input array.\n+     * \n      * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n      */\n-    public double evaluate(\n-        final double[] values,\n-        final int begin,\n-        final int length) {\n+    public double evaluate(final double[] values, final int begin, final int length) {\n         if (this.test(values, begin, length)) {\n             this.clear();\n             int l = begin + length;\n--- a/src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java\n \n /**\n  * Extends the definition of {@link UnivariateStatistic} with an {@link #increment}\n- * method for adding values and updating internal state incrementally.  This interface\n- * is designed to be used for calculating statistics that can be computed in one pass through\n- * the data without storing the full array of sample values.\n+ * method for adding values and updating internal state incrementally.  \n+ * <p>\n+ * This interface is designed to be used for calculating statistics that can be computed in \n+ * one pass through the data without storing the full array of sample values.\n  * \n- * @version $Revision: 1.14 $ $Date: 2004/02/21 21:35:15 $\n+ * @version $Revision: 1.15 $ $Date: 2004/03/21 21:57:19 $\n  */\n public interface StorelessUnivariateStatistic extends UnivariateStatistic {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java\n  * follows the first estimation procedure presented\n  * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section2/prc252.htm\">here.</a>\n  * \n- * @version $Revision: 1.15 $ $Date: 2004/03/13 20:02:28 $\n+ * @version $Revision: 1.16 $ $Date: 2004/03/21 21:57:19 $\n  */\n public class Percentile extends AbstractUnivariateStatistic implements Serializable {\n \n      * \n      * @param values Is a double[] containing the values\n      * @param p Is the quantile to evaluate to.\n-     * @param start  the first (0-based) element to include in the computation\n+     * @param begin  the first (0-based) element to include in the computation\n      * @param length  the number of array elements to include\n      * @return the result of the evaluation or Double.NaN\n      * if the array is empty\n--- a/src/java/org/apache/commons/math/util/DefaultTransformer.java\n+++ b/src/java/org/apache/commons/math/util/DefaultTransformer.java\n  * into a primitive double or to turn a String representation of a Number into \n  * a double.\n  * \n- * @version $Revision: 1.12 $ $Date: 2004/02/21 21:35:16 $\n+ * @version $Revision: 1.13 $ $Date: 2004/03/21 21:57:19 $\n  */\n public class DefaultTransformer implements NumberTransformer, Serializable {\n     \n     /**\n-     * @param Object o Is the object that gets transformed.\n+     * @param o  the object that gets transformed.\n      * @return a double primitive representation of the Object o.\n      * @throws org.apache.commons.math.MathException If it cannot successfully \n      * be transformed or is null.", "timestamp": 1079906239, "metainfo": ""}