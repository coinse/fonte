{"sha": "be5f9de63210e456e385032ad564f0336f38666e", "log": "Completed implementation of sample variance support in statistical aggregates. JIRA: MATH-693.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/stat/StatUtils.java\n+++ b/src/main/java/org/apache/commons/math/stat/StatUtils.java\n     /**\n      * Returns the variance of the entries in the input array, or\n      * <code>Double.NaN</code> if the array is empty.\n+     *\n+     * <p>This method returns the bias-corrected sample variance (using {@code n - 1} in\n+     * the denominator).  Use {@link #populationVariance()} for the non-bias-corrected\n+     * population variance.</p>\n      * <p>\n      * See {@link org.apache.commons.math.stat.descriptive.moment.Variance} for\n      * details on the computing algorithm.</p>\n      * Returns the variance of the entries in the specified portion of\n      * the input array, or <code>Double.NaN</code> if the designated subarray\n      * is empty.\n+     *\n+     * <p>This method returns the bias-corrected sample variance (using {@code n - 1} in\n+     * the denominator).  Use {@link #populationVariance()} for the non-bias-corrected\n+     * population variance.</p>\n      * <p>\n      * See {@link org.apache.commons.math.stat.descriptive.moment.Variance} for\n      * details on the computing algorithm.</p>\n      * Returns the variance of the entries in the specified portion of\n      * the input array, using the precomputed mean value.  Returns\n      * <code>Double.NaN</code> if the designated subarray is empty.\n+     *\n+     * <p>This method returns the bias-corrected sample variance (using {@code n - 1} in\n+     * the denominator).  Use {@link #populationVariance()} for the non-bias-corrected\n+     * population variance.</p>\n      * <p>\n      * See {@link org.apache.commons.math.stat.descriptive.moment.Variance} for\n      * details on the computing algorithm.</p>\n      * Returns the variance of the entries in the input array, using the\n      * precomputed mean value.  Returns <code>Double.NaN</code> if the array\n      * is empty.\n+     *\n+     * <p>This method returns the bias-corrected sample variance (using {@code n - 1} in\n+     * the denominator).  Use {@link #populationVariance()} for the non-bias-corrected\n+     * population variance.</p>\n      * <p>\n      * See {@link org.apache.commons.math.stat.descriptive.moment.Variance} for\n      * details on the computing algorithm.</p>\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n     }\n \n     /**\n-     * Returns the variance of the available values.\n+     * Returns the (sample) variance of the available values.\n+     *\n+     * <p>This method returns the bias-corrected sample variance (using {@code n - 1} in\n+     * the denominator).  Use {@link #getPopulationVariance()} for the non-bias-corrected\n+     * population variance.</p>\n+     *\n      * @return The variance, Double.NaN if no values have been added\n      * or 0.0 for a single value set.\n      */\n     public double getVariance() {\n         return apply(varianceImpl);\n+    }\n+\n+    /**\n+     * Returns the <a href=\"http://en.wikibooks.org/wiki/Statistics/Summary/Variance\">\n+     * population variance</a> of the available values.\n+     *\n+     * @return The population variance, Double.NaN if no values have been added,\n+     * or 0.0 for a single value set.\n+     */\n+    public double getPopulationVariance() {\n+        return apply(new Variance(false));\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n     }\n \n     /**\n-     * Returns the variance of the values that have been added.\n-     * <p>\n-     * Double.NaN is returned if no values have been added.\n-     * </p>\n+     * Returns the (sample) variance of the available values.\n+     *\n+     * <p>This method returns the bias-corrected sample variance (using {@code n - 1} in\n+     * the denominator).  Use {@link #getPopulationVariance()} for the non-bias-corrected\n+     * population variance.</p>\n+     *\n+     * <p>Double.NaN is returned if no values have been added.</p>\n+     *\n      * @return the variance\n      */\n     public double getVariance() {\n         return varianceImpl.getResult();\n+    }\n+\n+    /**\n+     * Returns the <a href=\"http://en.wikibooks.org/wiki/Statistics/Summary/Variance\">\n+     * population variance</a> of the values that have been added.\n+     *\n+     * <p>Double.NaN is returned if no values have been added.</p>\n+     *\n+     * @return the population variance\n+     */\n+    public double getPopulationVariance() {\n+        Variance populationVariance = new Variance(secondMoment);\n+        populationVariance.setBiasCorrected(false);\n+        return populationVariance.getResult();\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java\n      * {@inheritDoc}\n      */\n     @Override\n+    public synchronized double getPopulationVariance() {\n+        return super.getPopulationVariance();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n     public synchronized double getMax() {\n         return super.getMax();\n     }\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n      * <code>evaluate</code> leverages the fact that is has the full\n      * list of values together to execute a two-pass algorithm.\n      * See {@link Variance}.</p>\n-     * \n+     *\n      * <p>Note also that when {@link #Variance(SecondMoment)} is used to\n      * create a Variance, this method does nothing. In that case, the\n      * SecondMoment should be incremented directly.</p>\n--- a/src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java\n import java.util.Locale;\n \n \n+import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.stat.descriptive.rank.Percentile;\n+import org.apache.commons.math.stat.descriptive.moment.GeometricMean;\n+import org.apache.commons.math.stat.descriptive.moment.Mean;\n+import org.apache.commons.math.stat.descriptive.moment.Variance;\n+import org.apache.commons.math.stat.descriptive.rank.Max;\n+import org.apache.commons.math.stat.descriptive.rank.Min;\n+import org.apache.commons.math.stat.descriptive.summary.Sum;\n+import org.apache.commons.math.stat.descriptive.summary.SumOfSquares;\n import org.apache.commons.math.util.Precision;\n import org.junit.Assert;\n import org.junit.Test;\n         checkremoval(dstat, DescriptiveStatistics.INFINITE_WINDOW, 3.5, 2.5, 3.0);\n \n     }\n+    \n+    @Test\n+    public void testSummaryConsistency() {\n+        final DescriptiveStatistics dstats = new DescriptiveStatistics();\n+        final SummaryStatistics sstats = new SummaryStatistics();\n+        final int windowSize = 5;\n+        dstats.setWindowSize(windowSize);\n+        final double tol = 1E-12;\n+        for (int i = 0; i < 20; i++) {\n+            dstats.addValue(i);\n+            sstats.clear();\n+            double[] values = dstats.getValues();\n+            for (int j = 0; j < values.length; j++) {\n+                sstats.addValue(values[j]);\n+            }\n+            TestUtils.assertEquals(dstats.getMean(), sstats.getMean(), tol);\n+            TestUtils.assertEquals(new Mean().evaluate(values), dstats.getMean(), tol);\n+            TestUtils.assertEquals(dstats.getMax(), sstats.getMax(), tol);\n+            TestUtils.assertEquals(new Max().evaluate(values), dstats.getMax(), tol);\n+            TestUtils.assertEquals(dstats.getGeometricMean(), sstats.getGeometricMean(), tol);\n+            TestUtils.assertEquals(new GeometricMean().evaluate(values), dstats.getGeometricMean(), tol);\n+            TestUtils.assertEquals(dstats.getMin(), sstats.getMin(), tol);\n+            TestUtils.assertEquals(new Min().evaluate(values), dstats.getMin(), tol);\n+            TestUtils.assertEquals(dstats.getStandardDeviation(), sstats.getStandardDeviation(), tol);\n+            TestUtils.assertEquals(dstats.getVariance(), sstats.getVariance(), tol);\n+            TestUtils.assertEquals(new Variance().evaluate(values), dstats.getVariance(), tol);\n+            TestUtils.assertEquals(dstats.getSum(), sstats.getSum(), tol);\n+            TestUtils.assertEquals(new Sum().evaluate(values), dstats.getSum(), tol);\n+            TestUtils.assertEquals(dstats.getSumsq(), sstats.getSumsq(), tol);\n+            TestUtils.assertEquals(new SumOfSquares().evaluate(values), dstats.getSumsq(), tol);\n+            TestUtils.assertEquals(dstats.getPopulationVariance(), sstats.getPopulationVariance(), tol);\n+            TestUtils.assertEquals(new Variance(false).evaluate(values), dstats.getPopulationVariance(), tol);\n+        }\n+    }\n \n     public void checkremoval(DescriptiveStatistics dstat, int wsize,\n                              double mean1, double mean2, double mean3) {\n--- a/src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java\n     private double sumSq = 18;\n     private double sum = 8;\n     private double var = 0.666666666666666666667;\n+    private double popVar = 0.5;\n     private double std = FastMath.sqrt(var);\n     private double n = 4;\n     private double min = 1;\n         Assert.assertEquals(\"sum\",sum,u.getSum(),tolerance);\n         Assert.assertEquals(\"sumsq\",sumSq,u.getSumsq(),tolerance);\n         Assert.assertEquals(\"var\",var,u.getVariance(),tolerance);\n+        Assert.assertEquals(\"population var\",popVar,u.getPopulationVariance(),tolerance);\n         Assert.assertEquals(\"std\",std,u.getStandardDeviation(),tolerance);\n         Assert.assertEquals(\"mean\",mean,u.getMean(),tolerance);\n         Assert.assertEquals(\"min\",min,u.getMin(),tolerance);", "timestamp": 1322342602, "metainfo": ""}