{"sha": "65f63d07d3ad83873527890c1e6ca4cdb9bc396f", "log": "fixed many checkstyle errors about javadoc  ", "commit": "\n--- a/src/java/org/apache/commons/math/genetics/Chromosome.java\n+++ b/src/java/org/apache/commons/math/genetics/Chromosome.java\n \n /**\n  * Individual in a population. Chromosomes are compared based on their fitness.\n+ * @version $Revision$ $Date$\n  */\n public interface Chromosome {\n     /**\n--- a/src/java/org/apache/commons/math/genetics/ChromosomePair.java\n+++ b/src/java/org/apache/commons/math/genetics/ChromosomePair.java\n \n /**\n  * A pair of {@link Chromosome} objects.\n+ * @version $Revision$ $Date$\n  */\n public class ChromosomePair {\n     /** the first chromosome in the pair. */\n--- a/src/java/org/apache/commons/math/genetics/CrossoverPolicy.java\n+++ b/src/java/org/apache/commons/math/genetics/CrossoverPolicy.java\n /**\n  * Policy used to create a pair of new chromosomes by performing a crossover\n  * operation on a source pair of chromosomes.\n+ * @version $Revision$ $Date$\n  */\n public interface CrossoverPolicy {\n     /**\n--- a/src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java\n+++ b/src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java\n /**\n  * Implementation of a genetic algorithm. All factors that govern the operation\n  * of the algorithm can be configured for a specific problem.\n+ * @version $Revision$ $Date$\n  */\n public class GeneticAlgorithm {\n     /** the crossover policy used by the algorithm. */\n--- a/src/java/org/apache/commons/math/genetics/MutationPolicy.java\n+++ b/src/java/org/apache/commons/math/genetics/MutationPolicy.java\n \n /**\n  * Algorithm used to mutate a chrommosome.\n+ * @version $Revision$ $Date$\n  */\n public interface MutationPolicy {\n \n--- a/src/java/org/apache/commons/math/genetics/Population.java\n+++ b/src/java/org/apache/commons/math/genetics/Population.java\n \n /**\n  * A collection of chromosomes that facilitates generational evolution.\n+ * @version $Revision$ $Date$\n  */\n public interface Population {\n     /**\n--- a/src/java/org/apache/commons/math/genetics/SelectionPolicy.java\n+++ b/src/java/org/apache/commons/math/genetics/SelectionPolicy.java\n \n /**\n  * Algorithm used to select a chromosome pair from a population.\n+ * @version $Revision$ $Date$\n  */\n public interface SelectionPolicy {\n     /**\n--- a/src/java/org/apache/commons/math/genetics/StoppingCondition.java\n+++ b/src/java/org/apache/commons/math/genetics/StoppingCondition.java\n \n /**\n  * Algorithm used to determine when to stop evolution.\n+ * @version $Revision$ $Date$\n  */\n public interface StoppingCondition {\n     /**\n--- a/src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java\n      * input array.</p>\n      * <p>\n      * If the array is null, an IllegalArgumentException is thrown.</p>\n-     * \n+     * @param values input array\n+     * @return the value of the statistic applied to the input array\n      * @see org.apache.commons.math.stat.descriptive.UnivariateStatistic#evaluate(double[])\n      */\n     public double evaluate(final double[] values) {\n      * <p>\n      * If the array is null or the index parameters are not valid, an \n      * IllegalArgumentException is thrown.</p>\n-     * \n+     * @param values the input array\n+     * @param begin the index of the first element to include\n+     * @param length the number of elements to include\n+     * @return the value of the statistic applied to the included array entries\n      * @see org.apache.commons.math.stat.descriptive.UnivariateStatistic#evaluate(double[], int, int)\n      */\n     public double evaluate(final double[] values, final int begin, final int length) {\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#clear()\n+     * {@inheritDoc}\n      */\n     public abstract void clear();\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#getResult()\n+     * {@inheritDoc}\n      */\n     public abstract double getResult();\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#increment(double)\n+     * {@inheritDoc}\n      */\n     public abstract void increment(final double d);\n     \n--- a/src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java\n     private static final long serialVersionUID = -8007759382851708045L;\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.UnivariateStatistic#evaluate(double[])\n+     * {@inheritDoc}\n      */\n     public double evaluate(final double[] values) {\n         test(values, 0, 0);\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.UnivariateStatistic#evaluate(double[], int, int)\n+     * {@inheritDoc}\n      */\n     public abstract double evaluate(final double[] values, final int begin, final int length);\n \n--- a/src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n /*\n  * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership. The ASF\n- * licenses this file to You under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law\n- * or agreed to in writing, software distributed under the License is\n- * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied. See the License for the specific language\n- * governing permissions and limitations under the License.\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n  */\n package org.apache.commons.math.stat.descriptive;\n \n  * {@link SynchronizedSummaryStatistics} if concurrent access from multiple\n  * threads is required.\n  * </p>\n- * @version $Revision$ $Date: 2008-02-10 13:28:59 -0600 (Sun, 10 Feb\n- *          2008) $\n+ * @version $Revision$ $Date$\n  */\n public class SummaryStatistics implements StatisticalSummary, Serializable {\n \n             return false;\n         }\n         SummaryStatistics stat = (SummaryStatistics)object;\n-        return (MathUtils.equals(stat.getGeometricMean(), this.getGeometricMean()) && MathUtils.equals(stat.getMax(), this.getMax())\n-            && MathUtils.equals(stat.getMean(), this.getMean()) && MathUtils.equals(stat.getMin(), this.getMin()) && MathUtils.equals(stat.getN(), this.getN())\n-            && MathUtils.equals(stat.getSum(), this.getSum()) && MathUtils.equals(stat.getSumsq(), this.getSumsq()) && MathUtils.equals(stat.getVariance(),\n+        return (MathUtils.equals(stat.getGeometricMean(), this.getGeometricMean()) &&\n+                MathUtils.equals(stat.getMax(), this.getMax()) &&\n+                MathUtils.equals(stat.getMean(), this.getMean()) &&\n+                MathUtils.equals(stat.getMin(), this.getMin()) &&\n+                MathUtils.equals(stat.getN(), this.getN()) &&\n+                MathUtils.equals(stat.getSum(), this.getSum()) &&\n+                MathUtils.equals(stat.getSumsq(), this.getSumsq()) &&\n+                MathUtils.equals(stat.getVariance(),\n             this.getVariance()));\n     }\n \n--- a/src/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatistics.java\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.DescriptiveStatistics#addValue(double)\n+     * {@inheritDoc}\n      */\n     public synchronized void addValue(double v) {\n         super.addValue(v);\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.DescriptiveStatistics#clear()\n+     * {@inheritDoc}\n      */\n     public synchronized void clear() {\n         super.clear();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.DescriptiveStatistics#getElement(int)\n+     * {@inheritDoc}\n      */\n     public synchronized double getElement(int index) {\n         return super.getElement(index);\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.DescriptiveStatistics#getN()\n+     * {@inheritDoc}\n      */\n     public synchronized long getN() {\n         return super.getN();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.DescriptiveStatistics#getValues()\n+     * {@inheritDoc}\n      */\n     public synchronized double[] getValues() {\n         return super.getValues();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.DescriptiveStatistics#setWindowSize(int)\n+     * {@inheritDoc}\n      */\n     public synchronized void setWindowSize(int windowSize) {\n         super.setWindowSize(windowSize);\n--- a/src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics#addValue(double[])\n+     * {@inheritDoc}\n      */\n     public synchronized void addValue(double[] value)\n       throws DimensionMismatchException {\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics#getDimension()\n+     * {@inheritDoc}\n      */\n     public synchronized int getDimension() {\n         return super.getDimension();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics#getN()\n+     * {@inheritDoc}\n      */\n     public synchronized long getN() {\n         return super.getN();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics#getSum()\n+     * {@inheritDoc}\n      */\n     public synchronized double[] getSum() {\n         return super.getSum();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics#getSumSq()\n+     * {@inheritDoc}\n      */\n     public synchronized double[] getSumSq() {\n         return super.getSumSq();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics#getSumLog()\n+     * {@inheritDoc}\n      */\n     public synchronized double[] getSumLog() {\n         return super.getSumLog();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics#getMean()\n+     * {@inheritDoc}\n      */\n     public synchronized double[] getMean() {\n         return super.getMean();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics#getStandardDeviation()\n+     * {@inheritDoc}\n      */\n     public synchronized double[] getStandardDeviation() {\n         return super.getStandardDeviation();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics#getCovariance()\n+     * {@inheritDoc}\n      */\n     public synchronized RealMatrix getCovariance() {\n         return super.getCovariance();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics#getMax()\n+     * {@inheritDoc}\n      */\n     public synchronized double[] getMax() {\n         return super.getMax();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics#getMin()\n+     * {@inheritDoc}\n      */\n     public synchronized double[] getMin() {\n         return super.getMin();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics#getGeometricMean()\n+     * {@inheritDoc}\n      */\n     public synchronized double[] getGeometricMean() {\n         return super.getGeometricMean();\n     }\n     \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics#toString()\n+     * {@inheritDoc}\n      */\n     public synchronized String toString() {\n         return super.toString();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics#clear()\n+     * {@inheritDoc}\n      */\n     public synchronized void clear() {\n         super.clear();\n     }\n     \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics#equals(Object)\n+     * {@inheritDoc}\n      */\n     public synchronized boolean equals(Object object) {\n         return super.equals(object);\n     }\n     \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics#hashCode()\n+     * {@inheritDoc}\n      */\n     public synchronized int hashCode() {\n         return super.hashCode();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics#getSumImpl()\n+     * {@inheritDoc}\n      */\n     public synchronized StorelessUnivariateStatistic[] getSumImpl() {\n         return super.getSumImpl();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics#setSumImpl(StorelessUnivariateStatistic[])\n+     * {@inheritDoc}\n      */\n     public synchronized void setSumImpl(StorelessUnivariateStatistic[] sumImpl)\n       throws DimensionMismatchException {\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics#getSumsqImpl()\n+     * {@inheritDoc}\n      */\n     public synchronized StorelessUnivariateStatistic[] getSumsqImpl() {\n         return super.getSumsqImpl();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics#setSumsqImpl(StorelessUnivariateStatistic[])\n+     * {@inheritDoc}\n      */\n     public synchronized void setSumsqImpl(StorelessUnivariateStatistic[] sumsqImpl)\n       throws DimensionMismatchException {\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics#getMinImpl()\n+     * {@inheritDoc}\n      */\n     public synchronized StorelessUnivariateStatistic[] getMinImpl() {\n         return super.getMinImpl();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics#setMinImpl(StorelessUnivariateStatistic[])\n+     * {@inheritDoc}\n      */\n     public synchronized void setMinImpl(StorelessUnivariateStatistic[] minImpl)\n       throws DimensionMismatchException {\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics#getMaxImpl()\n+     * {@inheritDoc}\n      */\n     public synchronized StorelessUnivariateStatistic[] getMaxImpl() {\n         return super.getMaxImpl();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics#setMaxImpl(StorelessUnivariateStatistic[])\n+     * {@inheritDoc}\n      */\n     public synchronized void setMaxImpl(StorelessUnivariateStatistic[] maxImpl)\n       throws DimensionMismatchException {\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics#getSumLogImpl()\n+     * {@inheritDoc}\n      */\n     public synchronized StorelessUnivariateStatistic[] getSumLogImpl() {\n         return super.getSumLogImpl();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics#setSumLogImpl(StorelessUnivariateStatistic[])\n+     * {@inheritDoc}\n      */\n     public synchronized void setSumLogImpl(StorelessUnivariateStatistic[] sumLogImpl)\n       throws DimensionMismatchException {\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics#getGeoMeanImpl()\n+     * {@inheritDoc}\n      */\n     public synchronized StorelessUnivariateStatistic[] getGeoMeanImpl() {\n         return super.getGeoMeanImpl();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics#setGeoMeanImpl(StorelessUnivariateStatistic[])\n+     * {@inheritDoc}\n      */\n     public synchronized void setGeoMeanImpl(StorelessUnivariateStatistic[] geoMeanImpl)\n       throws DimensionMismatchException {\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics#getMeanImpl()\n+     * {@inheritDoc}\n      */\n     public synchronized StorelessUnivariateStatistic[] getMeanImpl() {\n         return super.getMeanImpl();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics#setMeanImpl(StorelessUnivariateStatistic[])\n+     * {@inheritDoc}\n      */\n     public synchronized void setMeanImpl(StorelessUnivariateStatistic[] meanImpl)\n       throws DimensionMismatchException {\n--- a/src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getSummary()\n+     * {@inheritDoc}\n      */\n     public synchronized StatisticalSummary getSummary() {\n         return super.getSummary();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#addValue(double)\n+     * {@inheritDoc}\n      */\n     public synchronized void addValue(double value) {\n         super.addValue(value);\n     }\n \n     /** \n-     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getN()\n+     * {@inheritDoc}\n      */\n     public synchronized long getN() {\n         return super.getN();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getSum()\n+     * {@inheritDoc}\n      */\n     public synchronized double getSum() {\n         return super.getSum();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getSumsq()\n+     * {@inheritDoc}\n      */\n     public synchronized double getSumsq() {\n         return super.getSumsq();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getMean()\n+     * {@inheritDoc}\n      */\n     public synchronized double getMean() {\n         return super.getMean();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getStandardDeviation()\n+     * {@inheritDoc}\n      */\n     public synchronized double getStandardDeviation() {\n         return super.getStandardDeviation();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getVariance()\n+     * {@inheritDoc}\n      */\n     public synchronized double getVariance() {\n         return super.getVariance();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getMax()\n+     * {@inheritDoc}\n      */\n     public synchronized double getMax() {\n         return super.getMax();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getMin()\n+     * {@inheritDoc}\n      */\n     public synchronized double getMin() {\n         return super.getMin();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getGeometricMean()\n+     * {@inheritDoc}\n      */\n     public synchronized double getGeometricMean() {\n         return super.getGeometricMean();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#toString()\n+     * {@inheritDoc}\n      */\n     public synchronized String toString() {\n         return super.toString();\n     }\n \n     /** \n-     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#clear()\n+     * {@inheritDoc}\n      */\n     public synchronized void clear() {\n         super.clear();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#equals(Object)\n+     * {@inheritDoc}\n      */\n     public synchronized boolean equals(Object object) {\n         return super.equals(object);\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#hashCode()\n+     * {@inheritDoc}\n      */\n     public synchronized int hashCode() {\n         return super.hashCode();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getSumImpl()\n+     * {@inheritDoc}\n      */\n     public synchronized StorelessUnivariateStatistic getSumImpl() {\n         return super.getSumImpl();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#setSumImpl(StorelessUnivariateStatistic)\n+     * {@inheritDoc}\n      */\n     public synchronized void setSumImpl(StorelessUnivariateStatistic sumImpl) {\n         super.setSumImpl(sumImpl);\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getSumsqImpl()\n+     * {@inheritDoc}\n      */\n     public synchronized StorelessUnivariateStatistic getSumsqImpl() {\n         return super.getSumsqImpl();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#setSumsqImpl(StorelessUnivariateStatistic)\n+     * {@inheritDoc}\n      */\n     public synchronized void setSumsqImpl(StorelessUnivariateStatistic sumsqImpl) {\n         super.setSumsqImpl(sumsqImpl);\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getMinImpl()\n+     * {@inheritDoc}\n      */\n     public synchronized StorelessUnivariateStatistic getMinImpl() {\n         return super.getMinImpl();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#setMinImpl(StorelessUnivariateStatistic)\n+     * {@inheritDoc}\n      */\n     public synchronized void setMinImpl(StorelessUnivariateStatistic minImpl) {\n         super.setMinImpl(minImpl);\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getMaxImpl()\n+     * {@inheritDoc}\n      */\n     public synchronized StorelessUnivariateStatistic getMaxImpl() {\n         return super.getMaxImpl();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#setMaxImpl(StorelessUnivariateStatistic)\n+     * {@inheritDoc}\n      */\n     public synchronized void setMaxImpl(StorelessUnivariateStatistic maxImpl) {\n         super.setMaxImpl(maxImpl);\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getSumLogImpl()\n+     * {@inheritDoc}\n      */\n     public synchronized StorelessUnivariateStatistic getSumLogImpl() {\n         return super.getSumLogImpl();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#setSumLogImpl(StorelessUnivariateStatistic)\n+     * {@inheritDoc}\n      */\n     public synchronized void setSumLogImpl(StorelessUnivariateStatistic sumLogImpl) {\n         super.setSumLogImpl(sumLogImpl);\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getGeoMeanImpl()\n+     * {@inheritDoc}\n      */\n     public synchronized StorelessUnivariateStatistic getGeoMeanImpl() {\n         return super.getGeoMeanImpl();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#setGeoMeanImpl(StorelessUnivariateStatistic)\n+     * {@inheritDoc}\n      */\n     public synchronized void setGeoMeanImpl(StorelessUnivariateStatistic geoMeanImpl) {\n         super.setGeoMeanImpl(geoMeanImpl);\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getMeanImpl()\n+     * {@inheritDoc}\n      */\n     public synchronized StorelessUnivariateStatistic getMeanImpl() {\n         return super.getMeanImpl();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#setMeanImpl(StorelessUnivariateStatistic)\n+     * {@inheritDoc}\n      */\n     public synchronized void setMeanImpl(StorelessUnivariateStatistic meanImpl) {\n         super.setMeanImpl(meanImpl);\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getVarianceImpl()\n+     * {@inheritDoc}\n      */\n     public synchronized StorelessUnivariateStatistic getVarianceImpl() {\n         return super.getVarianceImpl();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#setVarianceImpl(StorelessUnivariateStatistic)\n+     * {@inheritDoc}\n      */\n     public synchronized void setVarianceImpl(StorelessUnivariateStatistic varianceImpl) {\n         super.setVarianceImpl(varianceImpl);\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java\n     }\n     \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#increment(double)\n+     * {@inheritDoc}\n      */\n     public void increment(final double d) {\n         if (n == 0) {\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#clear()\n+     * {@inheritDoc}\n      */\n     public void clear() {\n         m1 = Double.NaN;\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#getResult()\n+     * {@inheritDoc}\n      */\n     public double getResult() {\n         return m1;\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#getN()\n+     * {@inheritDoc}\n      */\n     public long getN() {\n         return n;\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java\n     }\n     \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#increment(double)\n+     * {@inheritDoc}\n      */\n     public void increment(final double d) {\n         if (n < 1) {\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#getResult()\n+     * {@inheritDoc}\n      */\n     public double getResult() {\n         return m4;\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#clear()\n+     * {@inheritDoc}\n      */\n     public void clear() {\n         super.clear();\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java\n     \n     /**\n      * Create a GeometricMean instance using the given SumOfLogs instance\n+     * @param sumOfLogs sum of logs instance to use for computation\n      */\n     public GeometricMean(SumOfLogs sumOfLogs) {\n         this.sumOfLogs = sumOfLogs;\n     }\n     \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#increment(double)\n+     * {@inheritDoc}\n      */\n     public void increment(final double d) {\n         sumOfLogs.increment(d);\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#getResult()\n+     * {@inheritDoc}\n      */\n     public double getResult() {\n         if (sumOfLogs.getN() > 0) {\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#clear()\n+     * {@inheritDoc}\n      */\n     public void clear() {\n         sumOfLogs.clear();\n     }\n     \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#getN()\n+     * {@inheritDoc}\n      */\n     public long getN() {\n         return sumOfLogs.getN();\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#increment(double)\n+     * {@inheritDoc}\n      */\n     public void increment(final double d) {\n         if (incMoment) {\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#getResult()\n+     * {@inheritDoc}\n      */\n     public double getResult() {\n         double kurtosis = Double.NaN;\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#clear()\n+     * {@inheritDoc}\n      */\n     public void clear() {\n         if (incMoment) {\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#getN()\n+     * {@inheritDoc}\n      */\n     public long getN() {\n         return moment.getN();\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#increment(double)\n+     * {@inheritDoc}\n      */\n     public void increment(final double d) {\n         if (incMoment) {\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#clear()\n+     * {@inheritDoc}\n      */\n     public void clear() {\n         if (incMoment) {\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#getResult()\n+     * {@inheritDoc}\n      */\n     public double getResult() {\n         return moment.m1;\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#getN()\n+     * {@inheritDoc}\n      */\n     public long getN() {\n         return moment.getN();\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java\n     }\n     \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#increment(double)\n+     * {@inheritDoc}\n      */\n     public void increment(final double d) {\n         if (n < 1) {\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#clear()\n+     * {@inheritDoc}\n      */\n     public void clear() {\n         super.clear();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#getResult()\n+     * {@inheritDoc}\n      */\n     public double getResult() {\n         return m2;\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#increment(double)\n+     * {@inheritDoc}\n      */\n     public void increment(final double d) {\n         if (incMoment) {\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#getN()\n+     * {@inheritDoc}\n      */\n     public long getN() {\n         return moment.getN();\n     }\n     \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#clear()\n+     * {@inheritDoc}\n      */\n     public void clear() {\n         if (incMoment) {\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#increment(double)\n+     * {@inheritDoc}\n      */\n     public void increment(final double d) {\n         variance.increment(d);\n     }\n     \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#getN()\n+     * {@inheritDoc}\n      */\n     public long getN() {\n         return variance.getN();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#getResult()\n+     * {@inheritDoc}\n      */\n     public double getResult() {\n         return Math.sqrt(variance.getResult());\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#clear()\n+     * {@inheritDoc}\n      */\n     public void clear() {\n         variance.clear();\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#increment(double)\n+     * {@inheritDoc}\n      */\n     public void increment(final double d) {\n         if (n < 1) {\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#getResult()\n+     * {@inheritDoc}\n      */\n     public double getResult() {\n         return m3;\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#clear()\n+     * {@inheritDoc}\n      */\n     public void clear() {\n         super.clear();\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#getResult()\n+     * {@inheritDoc}\n      */\n     public double getResult() {\n             if (moment.n == 0) {\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#getN()\n+     * {@inheritDoc}\n      */\n     public long getN() {\n         return moment.getN();\n     }\n     \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#clear()\n+     * {@inheritDoc}\n      */\n     public void clear() {\n         if (incMoment) {\n--- a/src/java/org/apache/commons/math/stat/descriptive/rank/Max.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/rank/Max.java\n     }\n     \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#increment(double)\n+     * {@inheritDoc}\n      */\n     public void increment(final double d) {\n         if (d > value || Double.isNaN(value)) {\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#clear()\n+     * {@inheritDoc}\n      */\n     public void clear() {\n         value = Double.NaN;\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#getResult()\n+     * {@inheritDoc}\n      */\n     public double getResult() {\n         return value;\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#getN()\n+     * {@inheritDoc}\n      */\n     public long getN() {\n         return n;\n--- a/src/java/org/apache/commons/math/stat/descriptive/rank/Min.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/rank/Min.java\n     }\n     \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#increment(double)\n+     * {@inheritDoc}\n      */\n     public void increment(final double d) {\n         if (d < value || Double.isNaN(value)) {\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#clear()\n+     * {@inheritDoc}\n      */\n     public void clear() {\n         value = Double.NaN;\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#getResult()\n+     * {@inheritDoc}\n      */\n     public double getResult() {\n         return value;\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#getN()\n+     * {@inheritDoc}\n      */\n     public long getN() {\n         return n;\n--- a/src/java/org/apache/commons/math/stat/descriptive/summary/Product.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/summary/Product.java\n     }\n     \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#increment(double)\n+     * {@inheritDoc}\n      */\n     public void increment(final double d) {\n         if (n == 0) {\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#getResult()\n+     * {@inheritDoc}\n      */\n     public double getResult() {\n         return value;\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#getN()\n+     * {@inheritDoc}\n      */\n     public long getN() {\n         return n;\n     }\n     \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#clear()\n+     * {@inheritDoc}\n      */\n     public void clear() {\n         value = Double.NaN;\n--- a/src/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n     }\n     \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#increment(double)\n+     * {@inheritDoc}\n      */\n     public void increment(final double d) {\n         if (n == 0) {\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#getResult()\n+     * {@inheritDoc}\n      */\n     public double getResult() {\n         return value;\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#getN()\n+     * {@inheritDoc}\n      */\n     public long getN() {\n         return n;\n     }\n     \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#clear()\n+     * {@inheritDoc}\n      */\n     public void clear() {\n         value = Double.NaN;\n--- a/src/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#increment(double)\n+     * {@inheritDoc}\n      */\n     public void increment(final double d) {\n         value += Math.log(d);\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#getResult()\n+     * {@inheritDoc}\n      */\n     public double getResult() {\n         if (n > 0) {\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#getN()\n+     * {@inheritDoc}\n      */\n     public long getN() {\n         return n;\n     }\n     \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#clear()\n+     * {@inheritDoc}\n      */\n     public void clear() {\n         value = 0d;\n--- a/src/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java\n     }\n     \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#increment(double)\n+     * {@inheritDoc}\n      */\n     public void increment(final double d) {\n         if (n == 0) {\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#getResult()\n+     * {@inheritDoc}\n      */\n     public double getResult() {\n         return value;\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#getN()\n+     * {@inheritDoc}\n      */\n     public long getN() {\n         return n;\n     }\n     \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#clear()\n+     * {@inheritDoc}\n      */\n     public void clear() {\n         value = Double.NaN;\n--- a/src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java\n         No get/set methods provided.\n     */\n     private static class AnovaStats {\n+\n+        /** Degrees of freedom in numerator (between groups). */\n         private int dfbg;\n+\n+        /** Degrees of freedom in denominator (within groups). */\n         private int dfwg;\n+\n+        /** Statistic. */\n         private double F;\n \n         /**\n--- a/src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java\n \n /**\n  * Abstract base class for implementations of MultipleLinearRegression.\n+ * @version $Revision$ $Date$\n+ * @since 2.0\n  */\n public abstract class AbstractMultipleLinearRegression implements\n         MultipleLinearRegression {\n \n+    /** X sample data. */\n     protected RealMatrix X;\n+\n+    /** Y sample data. */\n     protected RealMatrix Y;\n \n     /**\n         this.X = new RealMatrixImpl(x);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public double[] estimateRegressionParameters(){\n         RealMatrix b = calculateBeta();\n         return b.getColumn(0);\n     }    \n     \n+    /**\n+     * {@inheritDoc}\n+     */\n     public double[] estimateResiduals(){\n         RealMatrix b = calculateBeta();\n         RealMatrix e = Y.subtract(X.multiply(b));\n         return e.getColumn(0);\n     }\n-    \n+\n+    /**\n+     * {@inheritDoc}\n+     */\n     public double[][] estimateRegressionParametersVariance() {\n         return calculateBetaVariance().getData();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public double estimateRegressandVariance() {\n         return calculateYVariance();\n     }\n     \n     /**\n      * Calculates the beta of multiple linear regression in matrix notation.\n+     * @return beta\n      */\n     protected abstract RealMatrix calculateBeta();    \n     \n     /**\n      * Calculates the beta variance of multiple linear regression in matrix notation.\n+     * @return beta variance\n      */\n     protected abstract RealMatrix calculateBetaVariance();\n     \n     /**\n      * Calculates the Y variance of multiple linear regression.\n+     * @return Y variance\n      */\n     protected abstract double calculateYVariance();\n \n--- a/src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java\n  * <pre>\n  * Var(b)=(X' Omega^-1 X)^-1\n  * </pre>\n+ * @version $Revision$ $Date$\n+ * @since 2.0\n  */\n public class GLSMultipleLinearRegression extends AbstractMultipleLinearRegression {\n     \n+    /** Covariance matrix. */\n     private RealMatrix Omega;\n-    \n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public void addData(double[] y, double[][] x, double[][] covariance) {\n         addYSampleData(y);\n         addXSampleData(x);\n      * Calculates beta by GLS.\n      * <pre>\n      *  b=(X' Omega^-1 X)^-1X'Omega^-1 y\n-     * </pre> \n+     * </pre>\n+     * @return beta\n      */\n     protected RealMatrix calculateBeta() {\n         RealMatrix OI = Omega.inverse();\n--- a/src/java/org/apache/commons/math/stat/regression/MultipleLinearRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/MultipleLinearRegression.java\n  * \n  * The notation is quite standard in literature, \n  * cf eg <a href=\"http://www.econ.queensu.ca/ETM\">Davidson and MacKinnon, Econometrics Theory and Methods, 2004</a>.\n+ * @version $Revision$ $Date$\n+ * @since 2.0\n  */\n public interface MultipleLinearRegression {\n \n--- a/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java\n  * <pre>\n  * Var(b)=MSE*(X'X)^-1, MSE=u'u/(n-k)\n  * </pre>\n+ * @version $Revision$ $Date$\n+ * @since 2.0\n  */\n public class OLSMultipleLinearRegression extends AbstractMultipleLinearRegression {\n-    \n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public void addData(double[] y, double[][] x, double[][] covariance) {\n         addYSampleData(y);\n         addXSampleData(x);\n      * <pre>\n      * b=(X'X)^-1X'y\n      * </pre> \n+     * @return beta\n      */\n     protected RealMatrix calculateBeta() {\n         RealMatrix XTX = X.transpose().multiply(X);", "timestamp": 1211142083, "metainfo": ""}