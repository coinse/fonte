{"sha": "5d236a32d6864dc432546cbc4d09bc1b11521b9d", "log": "MATH-798 Test case provided by the reporter, adapted to become a unit test, shows that the same convergence criterion generates a very similar solution by both \"LevenbergMarquardtOptimizer\" and \"GaussNewtonOptimizer\".    ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java\n+++ b/src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java\n package org.apache.commons.math3.optimization.fitting;\n \n import org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer;\n+import org.apache.commons.math3.optimization.general.GaussNewtonOptimizer;\n+import org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer;\n+import org.apache.commons.math3.optimization.SimpleVectorValueChecker;\n import org.apache.commons.math3.analysis.ParametricUnivariateFunction;\n+import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;\n import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.util.Precision;\n import org.junit.Assert;\n import org.junit.Test;\n \n         Assert.assertEquals(55347.47, estimatedParameters[3], 300.00);\n         Assert.assertTrue(optimizer.getRMS() < 600.0);\n \n+    }\n+\n+    @Test\n+    public void testMath798() {\n+        final double tol = 1e-14;\n+        final SimpleVectorValueChecker checker = new SimpleVectorValueChecker(tol, tol);\n+        final double[] init = new double[] { 0, 0 };\n+        final int maxEval = 3;\n+\n+        final double[] lm = doMath798(new LevenbergMarquardtOptimizer(checker), maxEval, init);\n+        final double[] gn = doMath798(new GaussNewtonOptimizer(checker), maxEval, init);\n+\n+        for (int i = 0; i <= 1; i++) {\n+            Assert.assertEquals(lm[i], gn[i], tol);\n+        }\n+    }\n+\n+    /**\n+     * @param optimizer Optimizer.\n+     * @param maxEval Maximum number of function evaluations.\n+     * @param init First guess.\n+     * @return the solution found by the given optimizer.\n+     */\n+    private double[] doMath798(DifferentiableMultivariateVectorOptimizer optimizer,\n+                               int maxEval,\n+                               double[] init) {\n+        final CurveFitter fitter = new CurveFitter(optimizer);\n+\n+        fitter.addObservedPoint(-0.2, -7.12442E-13);\n+        fitter.addObservedPoint(-0.199, -4.33397E-13);\n+        fitter.addObservedPoint(-0.198, -2.823E-13);\n+        fitter.addObservedPoint(-0.197, -1.40405E-13);\n+        fitter.addObservedPoint(-0.196, -7.80821E-15);\n+        fitter.addObservedPoint(-0.195, 6.20484E-14);\n+        fitter.addObservedPoint(-0.194, 7.24673E-14);\n+        fitter.addObservedPoint(-0.193, 1.47152E-13);\n+        fitter.addObservedPoint(-0.192, 1.9629E-13);\n+        fitter.addObservedPoint(-0.191, 2.12038E-13);\n+        fitter.addObservedPoint(-0.19, 2.46906E-13);\n+        fitter.addObservedPoint(-0.189, 2.77495E-13);\n+        fitter.addObservedPoint(-0.188, 2.51281E-13);\n+        fitter.addObservedPoint(-0.187, 2.64001E-13);\n+        fitter.addObservedPoint(-0.186, 2.8882E-13);\n+        fitter.addObservedPoint(-0.185, 3.13604E-13);\n+        fitter.addObservedPoint(-0.184, 3.14248E-13);\n+        fitter.addObservedPoint(-0.183, 3.1172E-13);\n+        fitter.addObservedPoint(-0.182, 3.12912E-13);\n+        fitter.addObservedPoint(-0.181, 3.06761E-13);\n+        fitter.addObservedPoint(-0.18, 2.8559E-13);\n+        fitter.addObservedPoint(-0.179, 2.86806E-13);\n+        fitter.addObservedPoint(-0.178, 2.985E-13);\n+        fitter.addObservedPoint(-0.177, 2.67148E-13);\n+        fitter.addObservedPoint(-0.176, 2.94173E-13);\n+        fitter.addObservedPoint(-0.175, 3.27528E-13);\n+        fitter.addObservedPoint(-0.174, 3.33858E-13);\n+        fitter.addObservedPoint(-0.173, 2.97511E-13);\n+        fitter.addObservedPoint(-0.172, 2.8615E-13);\n+        fitter.addObservedPoint(-0.171, 2.84624E-13);\n+\n+        final double[] coeff = fitter.fit(maxEval,\n+                                          new PolynomialFunction.Parametric(),\n+                                          init);\n+        return coeff;\n     }\n \n     private static class SimpleInverseFunction implements ParametricUnivariateFunction {", "timestamp": 1338659585, "metainfo": ""}