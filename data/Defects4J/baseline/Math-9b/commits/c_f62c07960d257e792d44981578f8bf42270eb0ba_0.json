{"sha": "f62c07960d257e792d44981578f8bf42270eb0ba", "log": "use the conversion functions from MatrixUtils  ", "commit": "\n--- a/src/java/org/apache/commons/math/ode/NordsieckTransformer.java\n+++ b/src/java/org/apache/commons/math/ode/NordsieckTransformer.java\n import java.math.BigInteger;\n \n import org.apache.commons.math.fraction.BigFraction;\n-import org.apache.commons.math.linear.DefaultFieldMatrixPreservingVisitor;\n import org.apache.commons.math.linear.FieldMatrix;\n import org.apache.commons.math.linear.FieldMatrixImpl;\n import org.apache.commons.math.linear.InvalidMatrixException;\n+import org.apache.commons.math.linear.MatrixUtils;\n import org.apache.commons.math.linear.RealMatrix;\n-import org.apache.commons.math.linear.RealMatrixImpl;\n import org.apache.commons.math.linear.decomposition.FieldDecompositionSolver;\n import org.apache.commons.math.linear.decomposition.FieldLUDecompositionImpl;\n \n \n         // from Nordsieck to multistep\n         final FieldMatrix<BigFraction> bigNtoM = buildNordsieckToMultistep(p, q, r, s);\n-        Convertor convertor = new Convertor();\n-        bigNtoM.walkInOptimizedOrder(convertor);\n-        nordsieckToMultistep = convertor.getConvertedMatrix();\n+        nordsieckToMultistep = MatrixUtils.bigFractionMatrixToRealMatrix(bigNtoM);\n \n         // from multistep to Nordsieck\n         final FieldDecompositionSolver<BigFraction> solver =\n             new FieldLUDecompositionImpl<BigFraction>(bigNtoM).getSolver();\n-        final FieldMatrix<BigFraction> bigMtoN = solver.getInverse();\n-        convertor = new Convertor();\n-        bigMtoN.walkInOptimizedOrder(convertor);\n-        multistepToNordsieck = convertor.getConvertedMatrix();\n+        multistepToNordsieck = MatrixUtils.bigFractionMatrixToRealMatrix(solver.getInverse());\n \n     }\n \n \n     }\n \n-    /** Convertor for {@link FieldMatrix}/{@link BigFraction}. */\n-    private static class Convertor extends DefaultFieldMatrixPreservingVisitor<BigFraction> {\n-\n-        /** Converted array. */\n-        private double[][] data;\n-\n-        /** Simple constructor. */\n-        public Convertor() {\n-            super(BigFraction.ZERO);\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override\n-        public void start(int rows, int columns,\n-                          int startRow, int endRow, int startColumn, int endColumn) {\n-            data = new double[rows][columns];\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override\n-        public void visit(int row, int column, BigFraction value) {\n-            data[row][column] = value.doubleValue();\n-        }\n-\n-        /** Get the converted matrix.\n-         * @return converted matrix\n-         */\n-        RealMatrix getConvertedMatrix() {\n-            return new RealMatrixImpl(data, false);\n-        }\n-\n-    }\n-\n     /**\n      * Transform a scalar state history from multistep form to Nordsieck form.\n      * <p>", "timestamp": 1243708703, "metainfo": ""}