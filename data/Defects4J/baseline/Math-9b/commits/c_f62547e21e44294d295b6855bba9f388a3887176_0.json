{"sha": "f62547e21e44294d295b6855bba9f388a3887176", "log": "Remove unnecessary casts, unnecessary throws and unnecessary semi-colons  ", "commit": "\n--- a/src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java\n+++ b/src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java\n      */\n     public void testFloatingPointArguments() throws Exception {\n         for (int i = 0; i < cumulativeTestPoints.length; i++) {\n-            double arg = (double) cumulativeTestPoints[i];\n+            double arg = cumulativeTestPoints[i];\n             assertEquals(\n                     \"Incorrect cumulative probability value returned for \" +\n                     cumulativeTestPoints[i],\n                     cumulativeTestValues[i], \n                     distribution.cumulativeProbability(arg), tolerance);\n             if (i < cumulativeTestPoints.length - 1) {\n-                double arg2 = (double) cumulativeTestPoints[i + 1];\n+                double arg2 = cumulativeTestPoints[i + 1];\n                 assertEquals(\"Inconsistent probability for discrete range \" +\n                         \"[ \" + arg + \",\" + arg2 + \" ]\",\n                    distribution.cumulativeProbability(\n         int one = 1;\n         int ten = 10;\n         int two = 2;\n-        double oned = (double) one;\n-        double twod = (double) two;\n-        double tend = (double) ten;\n+        double oned = one;\n+        double twod = two;\n+        double tend = ten;\n         assertEquals(distribution.cumulativeProbability(one, two), \n                 distribution.cumulativeProbability(oned, twod), tolerance);\n         assertEquals(distribution.cumulativeProbability(one, two), \n--- a/src/test/org/apache/commons/math/distribution/NormalDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/NormalDistributionTest.java\n         distribution.setMean(0);\n         distribution.setStandardDeviation(1);\n         for (int i = 0; i < 100; i+=5) { // make sure no convergence exception\n-            double lowerTail = distribution.cumulativeProbability((double)-i);\n-            double upperTail = distribution.cumulativeProbability((double) i);\n+            double lowerTail = distribution.cumulativeProbability(-i);\n+            double upperTail = distribution.cumulativeProbability(i);\n             if (i < 10) { // make sure not top-coded\n                 assertTrue(lowerTail > 0.0d);\n                 assertTrue(upperTail < 1.0d);\n--- a/src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java\n+++ b/src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java\n \n   }\n \n-  public void testNonInversible() throws EstimationException {\n+  public void testNonInversible() {\n \n     EstimatedParameter[] p = {\n        new EstimatedParameter(\"p0\", 0),\n \n   }\n \n-  public void testMoreEstimatedParametersSimple() throws EstimationException {\n+  public void testMoreEstimatedParametersSimple() {\n \n     EstimatedParameter[] p = {\n        new EstimatedParameter(\"p0\", 7),\n \n   }\n \n-  public void testMoreEstimatedParametersUnsorted() throws EstimationException {\n+  public void testMoreEstimatedParametersUnsorted() {\n     EstimatedParameter[] p = {\n       new EstimatedParameter(\"p0\", 2),\n       new EstimatedParameter(\"p1\", 2),\n       assertEquals(48.13516790438953, circle.getY(),      1.0e-10);\n     }\n \n-  public void testCircleFittingBadInit() throws EstimationException {\n+  public void testCircleFittingBadInit() {\n     Circle circle = new Circle(-12, -12);\n     double[][] points = new double[][] {\n       {-0.312967,  0.072366}, {-0.339248,  0.132965}, {-0.379780,  0.202724},\n     }\n \n     public WeightedMeasurement[] getMeasurements() {\n-      return (WeightedMeasurement[]) points.toArray(new PointModel[points.size()]);\n+      return points.toArray(new PointModel[points.size()]);\n     }\n \n     public EstimatedParameter[] getAllParameters() {\n--- a/src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java\n+++ b/src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java\n \n   }\n \n-  public void testControlParameters() throws EstimationException {\n+  public void testControlParameters() {\n       Circle circle = new Circle(98.680, 47.345);\n       circle.addPoint( 30.0,  68.0);\n       circle.addPoint( 50.0,  -6.0);\n           set.add(parameters[j]);\n         }\n       }\n-      return (EstimatedParameter[]) set.toArray(new EstimatedParameter[set.size()]);\n+      return set.toArray(new EstimatedParameter[set.size()]);\n     }\n   \n     private LinearMeasurement[] measurements;\n     }\n \n     public WeightedMeasurement[] getMeasurements() {\n-      return (WeightedMeasurement[]) points.toArray(new PointModel[points.size()]);\n+      return points.toArray(new PointModel[points.size()]);\n     }\n \n     public EstimatedParameter[] getAllParameters() {\n--- a/src/test/org/apache/commons/math/linear/BigMatrixImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/BigMatrixImplTest.java\n             m.add(m2);\n             fail(\"IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }\n     }\n     \n             m.subtract(new BigMatrixImpl(testData2));\n             fail(\"Expecting illegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }      \n     }\n    \n             m.multiply(new BigMatrixImpl(bigSingular));\n             fail(\"Expecting illegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }      \n     }   \n     \n             asDouble(m.solve(asBigDecimal(testVector2)));\n             fail(\"expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }       \n         BigMatrix bs = new BigMatrixImpl(bigSingular);\n         try {\n             bs.solve(bs);\n             fail(\"Expecting InvalidMatrixException\");\n         } catch (InvalidMatrixException ex) {\n-            ;\n+            // ignored\n         }\n         try {\n             m.solve(bs);\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }\n         try {\n             new BigMatrixImpl(testData2).solve(bs);\n             fail(\"Expecting illegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         } \n         try {\n             (new BigMatrixImpl(testData2)).luDecompose();\n             fail(\"Expecting InvalidMatrixException\");\n         } catch (InvalidMatrixException ex) {\n-            ;\n+            // ignored\n         }  \n     }\n     \n             new BigMatrixImpl(testData2).getDeterminant().doubleValue();\n             fail(\"Expecting InvalidMatrixException\");\n         } catch (InvalidMatrixException ex) {\n-            ;\n+            // ignored\n         }      \n     }\n     \n             m.getTrace().doubleValue();\n             fail(\"Expecting NonSquareMatrixException\");\n         } catch (NonSquareMatrixException ex) {\n-            ;\n+            // ignored\n         }      \n     }\n     \n             asDouble(m.operate(asBigDecimal(testVector)));\n             fail(\"Expecting illegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }      \n     }\n \n             m.preMultiply(asBigDecimal(testVector));\n             fail(\"expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }\n     }\n     \n             m.preMultiply(new BigMatrixImpl(bigSingular));\n             fail(\"Expecting illegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }      \n     }\n     \n             m.getRowAsDoubleArray(10);\n             fail(\"expecting MatrixIndexException\");\n         } catch (MatrixIndexException ex) {\n-            ;\n+            // ignored\n         }\n         try {\n             m.getColumnAsDoubleArray(-1);\n             fail(\"expecting MatrixIndexException\");\n         } catch (MatrixIndexException ex) {\n-            ;\n+            // ignored\n         }\n     }\n       \n     public void testLUDecomposition() throws Exception {\n         BigMatrixImpl m = new BigMatrixImpl(testData);\n         BigMatrix lu = m.getLUMatrix();\n-        assertClose(\"LU decomposition\", lu, (BigMatrix) new BigMatrixImpl(testDataLU), normTolerance);\n+        assertClose(\"LU decomposition\", lu, new BigMatrixImpl(testDataLU), normTolerance);\n         verifyDecomposition(m, lu);\n         m = new BigMatrixImpl(luData);\n         lu = m.getLUMatrix();\n-        assertClose(\"LU decomposition\", lu, (BigMatrix) new BigMatrixImpl(luDataLUDecomposition), normTolerance);\n+        assertClose(\"LU decomposition\", lu, new BigMatrixImpl(luDataLUDecomposition), normTolerance);\n         verifyDecomposition(m, lu);\n         m = new BigMatrixImpl(testDataMinus);\n         lu = m.getLUMatrix();\n--- a/src/test/org/apache/commons/math/linear/MatrixUtilsTest.java\n+++ b/src/test/org/apache/commons/math/linear/MatrixUtilsTest.java\n     }\n     \n     public void testCreateRowBigMatrix() {\n-        assertEquals((BigMatrixImpl) MatrixUtils.createRowBigMatrix(row),\n+        assertEquals(MatrixUtils.createRowBigMatrix(row),\n                 new BigMatrixImpl(rowMatrix));\n-        assertEquals((BigMatrixImpl) MatrixUtils.createRowBigMatrix(bigRow),\n+        assertEquals(MatrixUtils.createRowBigMatrix(bigRow),\n                 new BigMatrixImpl(bigRowMatrix));\n-        assertEquals((BigMatrixImpl) MatrixUtils.createRowBigMatrix(stringRow),\n+        assertEquals(MatrixUtils.createRowBigMatrix(stringRow),\n                 new BigMatrixImpl(stringRowMatrix));\n         try {\n             MatrixUtils.createRowBigMatrix(new double[] {});  // empty\n     }\n     \n     public void testCreateColumnBigMatrix() {\n-        assertEquals((BigMatrixImpl) MatrixUtils.createColumnBigMatrix(col),\n+        assertEquals(MatrixUtils.createColumnBigMatrix(col),\n                 new BigMatrixImpl(colMatrix));\n-        assertEquals((BigMatrixImpl) MatrixUtils.createColumnBigMatrix(bigCol),\n+        assertEquals(MatrixUtils.createColumnBigMatrix(bigCol),\n                 new BigMatrixImpl(bigColMatrix));\n-        assertEquals((BigMatrixImpl) MatrixUtils.createColumnBigMatrix(stringCol),\n+        assertEquals(MatrixUtils.createColumnBigMatrix(stringCol),\n                 new BigMatrixImpl(stringColMatrix));   \n        \n         try {\n--- a/src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java\n     double   t0 = 0;\n     double[] y0 = {0.0, 1.0, -2.0};\n \n-    double[] y = (double[]) y0.clone();\n+    double[] y = y0.clone();\n     double[][] yDot = { new double[y0.length] };\n     EulerStepInterpolator interpolator = new EulerStepInterpolator();\n     interpolator.reinitialize(new DummyEquations(), y, yDot, true);\n--- a/src/test/org/apache/commons/math/ode/nonstiff/TestProblem1.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/TestProblem1.java\n    */\n   public TestProblem1(TestProblem1 problem) {\n     super(problem);\n-    y = (double[]) problem.y.clone();\n+    y = problem.y.clone();\n   }\n \n   /**\n--- a/src/test/org/apache/commons/math/ode/nonstiff/TestProblem2.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/TestProblem2.java\n    */\n   public TestProblem2(TestProblem2 problem) {\n     super(problem);\n-    y = (double[]) problem.y.clone();\n+    y = problem.y.clone();\n   }\n \n   /**\n--- a/src/test/org/apache/commons/math/ode/nonstiff/TestProblem3.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/TestProblem3.java\n   public TestProblem3(TestProblem3 problem) {\n     super(problem);\n     e = problem.e;\n-    y = (double[]) problem.y.clone();\n+    y = problem.y.clone();\n   }\n \n   /**\n--- a/src/test/org/apache/commons/math/ode/nonstiff/TestProblem4.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/TestProblem4.java\n   public TestProblem4(TestProblem4 problem) {\n     super(problem);\n     a = problem.a;\n-    y = (double[]) problem.y.clone();\n+    y = problem.y.clone();\n   }\n \n   /**\n--- a/src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/TestProblemAbstract.java\n     if (problem.y0 == null) {\n       y0 = null;\n     } else {\n-      y0 = (double[]) problem.y0.clone();\n+      y0 = problem.y0.clone();\n     }\n     if (problem.errorScale == null) {\n       errorScale = null;\n     } else {\n-      errorScale = (double[]) problem.errorScale.clone();\n+      errorScale = problem.errorScale.clone();\n     }\n     t1 = problem.t1;\n   }\n     calls     = 0;\n     n         = y0.length;\n     this.t0   = t0;\n-    this.y0   = (double[]) y0.clone(); \n+    this.y0   = y0.clone(); \n    }\n \n   /**\n    * @param errorScale error scale\n    */\n   protected void setErrorScale(double[] errorScale) {\n-    this.errorScale = (double[]) errorScale.clone(); \n+    this.errorScale = errorScale.clone(); \n   }\n \n   public int getDimension() {\n--- a/src/test/org/apache/commons/math/random/RandomDataTest.java\n+++ b/src/test/org/apache/commons/math/random/RandomDataTest.java\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n-import java.security.NoSuchProviderException;\n-import java.security.NoSuchAlgorithmException;\n import java.util.HashSet;\n \n import org.apache.commons.math.RetryTestCase;\n             randomData.nextInt(4,3);\n             fail(\"IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }\n         Frequency freq = new Frequency();\n         int value = 0;\n             randomData.nextLong(4,3);\n             fail(\"IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }\n        Frequency freq = new Frequency();\n        long value = 0;\n             randomData.nextSecureLong(4,3);\n             fail(\"IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }\n         Frequency freq = new Frequency();\n         long value = 0;\n             randomData.nextSecureInt(4,3);\n             fail(\"IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }\n         Frequency freq = new Frequency();\n         int value = 0;\n             randomData.nextPoisson(0);\n             fail(\"zero mean -- expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }\n         Frequency f = new Frequency();\n         for (int i = 0; i<largeSampleSize; i++) {\n             randomData.nextPoisson(-1);\n             fail(\"negative mean supplied -- IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }\n         try {\n             randomData.nextPoisson(0);\n             fail(\"0 mean supplied -- IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }\n         \n     }\n             randomData.nextHexString(-1);\n             fail(\"negative length supplied -- IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }\n         try {\n             randomData.nextHexString(0);\n             fail(\"zero length supplied -- IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }\n         String hexString = randomData.nextHexString(3);\n         if (hexString.length() != 3) {\n             hexString = randomData.nextHexString(0);\n             fail(\"zero length requested -- expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }\n         if (hexString.length() != 1) {\n                 fail(\"incorrect length for generated string\");\n         double[] expected = new double[16];\n         long[] observed = new long[16];\n         for (int i = 0; i < 16; i++) {\n-            expected[i] = (double)smallSampleSize*100/(double)16;\n+            expected[i] = (double)smallSampleSize*100/16;\n             observed[i] = f.getCount(hex[i]);\n         }\n         /* Use ChiSquare dist with df = 16-1 = 15, alpha = .001\n             randomData.nextSecureHexString(-1);\n             fail(\"negative length -- IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }\n         try {\n             randomData.nextSecureHexString(0);\n             fail(\"zero length -- IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }\n         String hexString = randomData.nextSecureHexString(3);\n         if (hexString.length() != 3) {\n             hexString = randomData.nextSecureHexString(0);\n             fail(\"zero length requested -- expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }\n         if (hexString.length() != 1) {\n                 fail(\"incorrect length for generated string\");\n         double[] expected = new double[16];\n         long[] observed = new long[16];\n         for (int i = 0; i < 16; i++) {\n-            expected[i] = (double)smallSampleSize*100/(double)16;\n+            expected[i] = (double)smallSampleSize*100/16;\n             observed[i] = f.getCount(hex[i]);\n         }\n         /* Use ChiSquare dist with df = 16-1 = 15, alpha = .001\n             randomData.nextUniform(4,3);\n             fail(\"IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }\n         try {\n             randomData.nextUniform(3,3);\n             fail(\"IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }\n         double[] expected = {500,500};\n         long[] observed = {0,0};\n             randomData.nextGaussian(0,0);\n             fail(\"zero sigma -- IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }\n         SummaryStatistics u = new SummaryStatistics();\n         for (int i = 0; i<largeSampleSize; i++) {\n         }\n         double xbar = u.getMean();\n         double s = u.getStandardDeviation();\n-        double n = (double) u.getN(); \n+        double n = u.getN(); \n         /* t-test at .001-level TODO: replace with externalized t-test, with\n          * test statistic defined in TestStatistic\n          */\n             randomData.nextExponential(-1);\n             fail(\"negative mean -- expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }\n         assertEquals(\"0 mean\", 0,randomData.nextExponential(0),10E-8); \n         long cumFreq = 0;\n     } \n     \n     /** test reseeding, algorithm/provider games */\n-    public void testConfig() throws NoSuchProviderException, \n-      NoSuchAlgorithmException {\n+    public void testConfig() {\n         randomData.reSeed(1000);\n         double v = randomData.nextUniform(0,1);\n         randomData.reSeed();\n            one = randomData.nextSample(hs,2);\n            fail(\"sample size > set size, expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n-           ;\n+           // ignored\n        }\n        \n        // Make sure we fail for empty collection\n            one = randomData.nextSample(hs,0);\n            fail(\"n = k = 0, expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n-           ;\n+           // ignored\n        }\n     }\n \n                 perm = randomData.nextPermutation(2,3);\n                 fail(\"permutation k > n, expecting IllegalArgumentException\");\n             } catch (IllegalArgumentException ex) {\n-                ;\n+                // ignored\n             }\n             \n             // Make sure we fail for n = 0\n                 perm = randomData.nextPermutation(0,0);\n                 fail(\"permutation k = n = 0, expecting IllegalArgumentException\");\n             } catch (IllegalArgumentException ex) {\n-                ;\n+                // ignored\n             }  \n             \n             // Make sure we fail for k < n < 0\n                 perm = randomData.nextPermutation(-1,-3);\n                 fail(\"permutation k < n < 0, expecting IllegalArgumentException\");\n             } catch (IllegalArgumentException ex) {\n-                ;\n+                // ignored\n             }  \n             \n         }       \n--- a/src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java\n+++ b/src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java\n     \n     public void testCertifiedValues() {\n         for (String name : certifiedValues.keySet()) {\n-            Double expectedValue = (Double)certifiedValues.get(name);\n+            Double expectedValue = certifiedValues.get(name);\n \n             Double summariesValue = getProperty(summaries, name);\n             if (summariesValue != null) {\n--- a/src/test/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java\n         StorelessUnivariateStatistic replica = null;\n         \n         // Randomly select a portion of testArray to load first\n-        long index = Math.round((Math.random()) * (double) testArray.length);\n+        long index = Math.round((Math.random()) * testArray.length);\n         \n         // Put first half in master and copy master to replica\n         master.incrementAll(testArray, 0, (int) index);\n-        replica = (StorelessUnivariateStatistic) master.copy();\n+        replica = master.copy();\n         \n         // Check same\n         assertTrue(replica.equals(master));\n--- a/src/test/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java\n         for (int i = 0; i < v.length; i++) {\n             sum += (v[i] - mean) * (v[i] - mean); \n         }\n-        return Math.sqrt(sum / (double) v.length);\n+        return Math.sqrt(sum / v.length);\n     }\n \n }\n--- a/src/test/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java\n         for (int i = 0; i < v.length; i++) {\n            sum += (v[i] - mean) * (v[i] - mean); \n         }\n-        return sum / (double) v.length;\n+        return sum / v.length;\n     }\n \n }\n--- a/src/test/org/apache/commons/math/transform/FastFourierTransformerTest.java\n+++ b/src/test/org/apache/commons/math/transform/FastFourierTransformerTest.java\n     /**\n      * Test of transformer for the ad hoc data taken from Mathematica.\n      */\n-    public void testAdHocData() throws MathException {\n+    public void testAdHocData() {\n         FastFourierTransformer transformer = new FastFourierTransformer();\n         Complex result[]; double tolerance = 1E-12;\n \n         }\n     }\n     \n-    public void test2DData() throws MathException {\n+    public void test2DData() {\n         FastFourierTransformer transformer = new FastFourierTransformer();\n         double tolerance = 1E-12;\n         Complex[][] input = new Complex[][] {new Complex[] {new Complex(1, 0),\n--- a/src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java\n+++ b/src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java\n         // check double transform\n         double[] dX = new double[x.length];\n         for (int i = 0; i < dX.length; ++i) {\n-            dX[i] = (double) x[i];\n+            dX[i] = x[i];\n         }\n         double dResult[] = transformer.transform(dX);\n         for (int i = 0; i < dResult.length; i++) {\n         // check double transform\n         double[] dY = new double[y.length];\n         for (int i = 0; i < dY.length; ++i) {\n-            dY[i] = (double) y[i];\n+            dY[i] = y[i];\n         }\n         double dResult[] = transformer.inversetransform(dY);\n         for (int i = 0; i < dResult.length; i++) {\n--- a/src/test/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/org/apache/commons/math/util/MathUtilsTest.java\n         for (int n = 1; n < 10; n++) {\n             for (int k = 0; k <= n; k++) {\n                 assertEquals(n + \" choose \" + k, binomialCoefficient(n, k), MathUtils.binomialCoefficient(n, k));\n-                assertEquals(n + \" choose \" + k, (double)binomialCoefficient(n, k), MathUtils.binomialCoefficientDouble(n, k), Double.MIN_VALUE);\n-                assertEquals(n + \" choose \" + k, Math.log((double)binomialCoefficient(n, k)), MathUtils.binomialCoefficientLog(n, k), 10E-12);\n+                assertEquals(n + \" choose \" + k, binomialCoefficient(n, k), MathUtils.binomialCoefficientDouble(n, k), Double.MIN_VALUE);\n+                assertEquals(n + \" choose \" + k, Math.log(binomialCoefficient(n, k)), MathUtils.binomialCoefficientLog(n, k), 10E-12);\n             }\n         }\n \n             long expected = binomialCoefficient(n[i], k[i]);\n             assertEquals(n[i] + \" choose \" + k[i], expected,\n                 MathUtils.binomialCoefficient(n[i], k[i]));\n-            assertEquals(n[i] + \" choose \" + k[i], (double) expected,\n+            assertEquals(n[i] + \" choose \" + k[i], expected,\n                 MathUtils.binomialCoefficientDouble(n[i], k[i]), 0.0);\n             assertEquals(\"log(\" + n[i] + \" choose \" + k[i] + \")\", Math.log(expected),\n                 MathUtils.binomialCoefficientLog(n[i], k[i]), 0.0);\n             MathUtils.binomialCoefficient(4, 5);\n             fail(\"expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }\n \n         try {\n             MathUtils.binomialCoefficientDouble(4, 5);\n             fail(\"expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }\n \n         try {\n             MathUtils.binomialCoefficientLog(4, 5);\n             fail(\"expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }\n \n         try {\n             MathUtils.binomialCoefficient(-1, -2);\n             fail(\"expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }\n         try {\n             MathUtils.binomialCoefficientDouble(-1, -2);\n             fail(\"expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }\n         try {\n             MathUtils.binomialCoefficientLog(-1, -2);\n             fail(\"expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }\n \n         try {\n             MathUtils.binomialCoefficient(67, 30);\n             fail(\"expecting ArithmeticException\");\n         } catch (ArithmeticException ex) {\n-            ;\n+            // ignored\n         }\n         try {\n             MathUtils.binomialCoefficient(67, 34);\n             fail(\"expecting ArithmeticException\");\n         } catch (ArithmeticException ex) {\n-            ;\n+            // ignored\n         }\n         double x = MathUtils.binomialCoefficientDouble(1030, 515);\n         assertTrue(\"expecting infinite binomial coefficient\", Double\n     public void testFactorial() {\n         for (int i = 1; i < 21; i++) {\n             assertEquals(i + \"! \", factorial(i), MathUtils.factorial(i));\n-            assertEquals(i + \"! \", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);\n-            assertEquals(i + \"! \", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12);\n+            assertEquals(i + \"! \", factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);\n+            assertEquals(i + \"! \", Math.log(factorial(i)), MathUtils.factorialLog(i), 10E-12);\n         }\n         \n         assertEquals(\"0\", 1, MathUtils.factorial(0));\n             MathUtils.factorial(-1);\n             fail(\"expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }\n         try {\n             MathUtils.factorialDouble(-1);\n             fail(\"expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }\n         try {\n             MathUtils.factorialLog(-1);\n             fail(\"expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // ignored\n         }\n         try {\n             MathUtils.factorial(21);\n             fail(\"expecting ArithmeticException\");\n         } catch (ArithmeticException ex) {\n-            ;\n+            // ignored\n         }\n         assertTrue(\"expecting infinite factorial value\", Double.isInfinite(MathUtils.factorialDouble(171)));\n     }\n         \n         // Generate 10 distinct random values\n         for (int i = 0; i < 10; i++) {\n-            original[i] = random.nextUniform((double)i + 0.5, (double)i + 0.75);\n+            original[i] = random.nextUniform(i + 0.5, i + 0.75);\n         }\n         \n         // Generate a random permutation, making sure it is not the identity\n     }\n \n     public void testIndicatorInt() {\n-        assertEquals((int)1, MathUtils.indicator((int)(2)));\n-        assertEquals((int)1, MathUtils.indicator((int)(0)));\n-        assertEquals((int)(-1), MathUtils.indicator((int)(-2)));\n+        assertEquals(1, MathUtils.indicator((2)));\n+        assertEquals(1, MathUtils.indicator((0)));\n+        assertEquals((-1), MathUtils.indicator((-2)));\n     }\n \n     public void testIndicatorLong() {\n     }\n \n     public void testSignInt() {\n-        assertEquals((int) 1, MathUtils.sign((int) 2));\n-        assertEquals((int) 0, MathUtils.sign((int) 0));\n-        assertEquals((int) (-1), MathUtils.sign((int) (-2)));\n+        assertEquals(1, MathUtils.sign(2));\n+        assertEquals(0, MathUtils.sign(0));\n+        assertEquals((-1), MathUtils.sign((-2)));\n     }\n \n     public void testSignLong() {", "timestamp": 1238950559, "metainfo": ""}