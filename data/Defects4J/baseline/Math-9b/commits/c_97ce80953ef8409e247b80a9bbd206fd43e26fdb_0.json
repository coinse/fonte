{"sha": "97ce80953ef8409e247b80a9bbd206fd43e26fdb", "log": "Added standalone test class for AbstractIntegerDistribution default implementations. JIRA: MATH-587.  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.distribution;\n+\n+import org.apache.commons.math.MathException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test cases for AbstractIntegerDistribution default implementations\n+ *\n+ * @version $Id$\n+ */\n+public class AbtractIntegerDistributionTest {\n+\n+    protected final DiceDistribution diceDistribution = new DiceDistribution();\n+    protected final double p = diceDistribution.probability(1);\n+    \n+    @Test\n+    public void testCumulativeProbabilitiesSingleIntegerArguments() throws Exception {\n+        int lower = 1;\n+        for (int i = 1; i < 7; i++) {\n+            Assert.assertEquals(p * i,\n+                    diceDistribution.cumulativeProbability(lower), Double.MIN_VALUE);\n+            lower++;\n+        }\n+        Assert.assertEquals(0,\n+                diceDistribution.cumulativeProbability(-1), Double.MIN_VALUE);\n+        Assert.assertEquals(1,\n+                diceDistribution.cumulativeProbability(7), Double.MIN_VALUE);\n+    }\n+    \n+    @Test\n+    public void testCumulativeProbabilitiesSingleDoubleArguments() throws Exception {\n+        int lower = 1;\n+        double arg = 0;\n+        for (int i = 1; i < 7; i++) {\n+            // Exact integer\n+            arg = lower;\n+            Assert.assertEquals(p * i,\n+                    diceDistribution.cumulativeProbability(arg), Double.MIN_VALUE);\n+            \n+            // Add a fraction\n+            arg = lower + Math.random();\n+            Assert.assertEquals(p * i,\n+                    diceDistribution.cumulativeProbability(arg), Double.MIN_VALUE);\n+            lower++;\n+        }\n+    }\n+    \n+    @Test\n+    public void testCumulativeProbabilitiesRangeIntegerArguments() throws Exception {\n+        int lower = 1;\n+        int upper = 6;\n+        for (int i = 0; i < 2; i++) {\n+            // cum(1,6) = p(1 <= X <= 6) = 1, cum(2,5) = 4/6, cum(3,4) = 2/6 \n+            Assert.assertEquals(1 - p * 2 * i, \n+                    diceDistribution.cumulativeProbability(lower, upper), 1E-12);\n+            lower++;\n+            upper--;\n+        }\n+        for (int i = 1; i < 7; i++) {\n+            Assert.assertEquals(p, diceDistribution.cumulativeProbability(i, i), 1E-12);\n+        }\n+    }\n+    \n+    @Test\n+    public void testCumulativeProbabilitiesRangeDoubleArguments() throws Exception {\n+        int lower = 1;\n+        int upper = 6;\n+        double dlower = lower;\n+        double dupper = upper;\n+        for (int i = 0; i < 2; i++) {\n+            // cum(1,6) = p(1 <= X <= 6) = 1, cum(2,5) = 4/6, cum(3,4) = 2/6 \n+            // Exact integers\n+            Assert.assertEquals(1 - p * 2 * i, \n+                    diceDistribution.cumulativeProbability(dlower, dupper), 1E-12);\n+            // Subtract a fraction from lower, add to upper.  Should be no change.\n+            dlower -= Math.random();\n+            dupper += Math.random();\n+            Assert.assertEquals(1 - p * 2 * i, \n+                    diceDistribution.cumulativeProbability(dlower, dupper), 1E-12);\n+            lower++;\n+            upper--;\n+            dlower = lower;\n+            dupper = upper;\n+        }\n+        for (int i = 1; i < 7; i++) {\n+            lower = i;\n+            Assert.assertEquals(p, diceDistribution.cumulativeProbability(\n+                    lower, lower), 1E-12);\n+            Assert.assertEquals(p, diceDistribution.cumulativeProbability(\n+                    lower, lower + Math.random()), 1E-12);\n+            Assert.assertEquals(p, diceDistribution.cumulativeProbability(\n+                    lower - Math.random(), lower), 1E-12);\n+            Assert.assertEquals(p, diceDistribution.cumulativeProbability(\n+                    lower - Math.random(), lower + Math.random()), 1E-12);\n+        }\n+    }\n+\n+    /**\n+     * Simple distribution modeling a 6-sided die\n+     */\n+    class DiceDistribution extends AbstractIntegerDistribution {\n+        public static final long serialVersionUID = 23734213;\n+        private final double p = 1d/6d;\n+        public double probability(int x) {\n+            if (x < 1 || x > 6) {\n+                return 0;\n+            } else {\n+                return p;\n+            }\n+        }\n+\n+        @Override\n+        public double cumulativeProbability(int x) throws MathException {\n+            if (x < 1) {\n+                return 0;\n+            } else if (x >= 6) {\n+                return 1;\n+            } else {\n+                return p * x;\n+            }\n+        }\n+\n+        @Override\n+        protected int getDomainLowerBound(double p) {\n+            return 1;\n+        }\n+\n+        @Override\n+        protected int getDomainUpperBound(double p) {\n+            return 6;\n+        }\n+\n+        @Override\n+        public int getSupportLowerBound() {\n+            return 1;\n+        }\n+\n+        @Override\n+        public int getSupportUpperBound() {\n+            return 6;\n+        }\n+\n+        @Override\n+        protected double calculateNumericalMean() {\n+            return 3.5;\n+        }\n+\n+        @Override\n+        protected double calculateNumericalVariance() {\n+            return 12.5 - 3.5 * 3.5;  // E(X^2) - E(X)^2\n+        }\n+    }\n+}", "timestamp": 1307907567, "metainfo": ""}