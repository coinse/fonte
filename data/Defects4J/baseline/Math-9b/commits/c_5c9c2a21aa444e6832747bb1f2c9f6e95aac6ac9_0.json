{"sha": "5c9c2a21aa444e6832747bb1f2c9f6e95aac6ac9", "log": "Added tests for special values, quantile range checking.   ", "commit": "\n--- a/src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java\n+++ b/src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java\n \n /**\n  * Test cases for the {@link UnivariateStatistic} class.\n- * @version $Revision: 1.13 $ $Date: 2004/06/17 21:37:05 $\n+ * @version $Revision: 1.14 $ $Date: 2004/06/19 21:16:12 $\n  */\n public class PercentileTest extends UnivariateStatisticAbstractTest{\n \n         };\n         Percentile p = new Percentile(90); \n         assertEquals(95.1981, p.evaluate(d), 1.0e-4);\n+        assertEquals(95.1990, p.evaluate(d,0,d.length, 100d), 0);\n     }\n     \n     public void test5() {\n         Percentile percentile = new Percentile(5);\n         assertEquals(this.percentile5, percentile.evaluate(testArray), getTolerance());\n     }\n+    \n+    public void testNullEmpty() {\n+        Percentile percentile = new Percentile(50);\n+        double[] nullArray = null;\n+        double[] emptyArray = new double[] {};\n+        try {\n+            percentile.evaluate(nullArray);\n+            fail(\"Expecting IllegalArgumentException for null array\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+        assertTrue(Double.isNaN(percentile.evaluate(emptyArray)));        \n+    }\n+    \n+    public void testSingleton() {\n+        Percentile percentile = new Percentile(50);\n+        double[] singletonArray = new double[] {1d};\n+        assertEquals(1d, percentile.evaluate(singletonArray), 0);\n+        assertEquals(1d, percentile.evaluate(singletonArray, 0, 1), 0);\n+        assertEquals(1d, percentile.evaluate(singletonArray, 0, 1, 5), 0);\n+        assertEquals(1d, percentile.evaluate(singletonArray, 0, 1, 100), 0); \n+        assertTrue(Double.isNaN(percentile.evaluate(singletonArray, 0, 0)));     \n+    }\n+    \n+    public void testSpecialValues() {\n+        Percentile percentile = new Percentile(50);\n+        double[] specialValues = new double[] {0d, 1d, 2d, 3d, 4d,  Double.NaN};\n+        assertEquals(2.5d, percentile.evaluate(specialValues), 0);\n+        specialValues =  new double[] {Double.NEGATIVE_INFINITY, 1d, 2d, 3d,\n+                Double.NaN, Double.POSITIVE_INFINITY};\n+        assertEquals(2.5d, percentile.evaluate(specialValues), 0);\n+        specialValues = new double[] {1d, 1d, Double.POSITIVE_INFINITY, \n+                Double.POSITIVE_INFINITY};\n+        assertTrue(Double.isInfinite(percentile.evaluate(specialValues)));\n+        specialValues = new double[] {1d, 1d, Double.NaN, \n+                Double.NaN};\n+        assertTrue(Double.isNaN(percentile.evaluate(specialValues)));\n+        specialValues = new double[] {1d, 1d, Double.NEGATIVE_INFINITY, \n+                Double.NEGATIVE_INFINITY};\n+        // Interpolation results in NEGATIVE_INFINITY + POSITIVE_INFINITY\n+        assertTrue(Double.isNaN(percentile.evaluate(specialValues)));   \n+    }\n+    \n+    public void testSetQuantile() {\n+        Percentile percentile = new Percentile(10);\n+        percentile.setQuantile(100); // OK\n+        assertEquals(100, percentile.getQuantile(), 0);      \n+        try {\n+            percentile.setQuantile(0);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        try {\n+            percentile = new Percentile(0);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }        \n+    }\n+    \n }", "timestamp": 1087679772, "metainfo": ""}