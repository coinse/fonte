{"sha": "d0859066e141d027d43e960d129ecbea469e6cbd", "log": "No point catching and then calling fail - just let JUnit do the work  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java\n import org.junit.Assert;\n \n import org.apache.commons.math.util.FastMath;\n-import org.apache.commons.math.exception.MathParseException;\n \n public abstract class ComplexFormatAbstractTest {\n \n     public void testParseSimpleNoDecimals() {\n         String source = \"1 + 1i\";\n         Complex expected = new Complex(1, 1);\n-        try {\n-            Complex actual = complexFormat.parse(source);\n-            Assert.assertEquals(expected, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        Complex actual = complexFormat.parse(source);\n+        Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n     public void testParseSimpleWithDecimals() {\n         String source = \"1\" + getDecimalCharacter() + \"23 + 1\" + getDecimalCharacter() + \"43i\";\n         Complex expected = new Complex(1.23, 1.43);\n-        try {\n-            Complex actual = complexFormat.parse(source);\n-            Assert.assertEquals(expected, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        Complex actual = complexFormat.parse(source);\n+        Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n     public void testParseSimpleWithDecimalsTrunc() {\n         String source = \"1\" + getDecimalCharacter() + \"2323 + 1\" + getDecimalCharacter() + \"4343i\";\n         Complex expected = new Complex(1.2323, 1.4343);\n-        try {\n-            Complex actual = complexFormat.parse(source);\n-            Assert.assertEquals(expected, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        Complex actual = complexFormat.parse(source);\n+        Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n     public void testParseNegativeReal() {\n         String source = \"-1\" + getDecimalCharacter() + \"2323 + 1\" + getDecimalCharacter() + \"4343i\";\n         Complex expected = new Complex(-1.2323, 1.4343);\n-        try {\n-            Complex actual = complexFormat.parse(source);\n-            Assert.assertEquals(expected, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        Complex actual = complexFormat.parse(source);\n+        Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n     public void testParseNegativeImaginary() {\n         String source = \"1\" + getDecimalCharacter() + \"2323 - 1\" + getDecimalCharacter() + \"4343i\";\n         Complex expected = new Complex(1.2323, -1.4343);\n-        try {\n-            Complex actual = complexFormat.parse(source);\n-            Assert.assertEquals(expected, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        Complex actual = complexFormat.parse(source);\n+        Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n     public void testParseNegativeBoth() {\n         String source = \"-1\" + getDecimalCharacter() + \"2323 - 1\" + getDecimalCharacter() + \"4343i\";\n         Complex expected = new Complex(-1.2323, -1.4343);\n-        try {\n-            Complex actual = complexFormat.parse(source);\n-            Assert.assertEquals(expected, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        Complex actual = complexFormat.parse(source);\n+        Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n     public void testParseZeroReal() {\n         String source = \"0\" + getDecimalCharacter() + \"0 - 1\" + getDecimalCharacter() + \"4343i\";\n         Complex expected = new Complex(0.0, -1.4343);\n-        try {\n-            Complex actual = complexFormat.parse(source);\n-            Assert.assertEquals(expected, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        Complex actual = complexFormat.parse(source);\n+        Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n     public void testParseZeroImaginary() {\n         String source = \"-1\" + getDecimalCharacter() + \"2323\";\n         Complex expected = new Complex(-1.2323, 0);\n-        try {\n-            Complex actual = complexFormat.parse(source);\n-            Assert.assertEquals(expected, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        Complex actual = complexFormat.parse(source);\n+        Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n     public void testParseDifferentImaginaryChar() {\n         String source = \"-1\" + getDecimalCharacter() + \"2323 - 1\" + getDecimalCharacter() + \"4343j\";\n         Complex expected = new Complex(-1.2323, -1.4343);\n-        try {\n-            Complex actual = complexFormatJ.parse(source);\n-            Assert.assertEquals(expected, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        Complex actual = complexFormatJ.parse(source);\n+        Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n     public void testParseNan() {\n         String source = \"(NaN) + (NaN)i\";\n         Complex expected = new Complex(Double.NaN, Double.NaN);\n-        try {\n-            Complex actual = complexFormat.parse(source);\n-            Assert.assertEquals(expected, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        Complex actual = complexFormat.parse(source);\n+        Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n     public void testParsePositiveInfinity() {\n         String source = \"(Infinity) + (Infinity)i\";\n         Complex expected = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n-        try {\n-            Complex actual = complexFormat.parse(source);\n-            Assert.assertEquals(expected, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        Complex actual = complexFormat.parse(source);\n+        Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n     public void testPaseNegativeInfinity() {\n         String source = \"(-Infinity) - (Infinity)i\";\n         Complex expected = new Complex(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);\n-        try {\n-            Complex actual = complexFormat.parse(source);\n-            Assert.assertEquals(expected, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        Complex actual = complexFormat.parse(source);\n+        Assert.assertEquals(expected, actual);\n     }\n \n     @Test", "timestamp": 1296611005, "metainfo": ""}