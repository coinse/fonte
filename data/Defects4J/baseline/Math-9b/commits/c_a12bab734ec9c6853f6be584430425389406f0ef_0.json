{"sha": "a12bab734ec9c6853f6be584430425389406f0ef", "log": "reenabled tests removed a development test that was committed by error  ", "commit": "\n--- a/src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.events.EventHandler;\n-import org.junit.Ignore;\n import org.junit.Test;\n \n public class AdamsIntegratorTest {\n \n     @Test(expected=IntegratorException.class)\n-    @Ignore\n     public void dimensionCheckBashforth() throws DerivativeException, IntegratorException {\n         TestProblem1 pb = new TestProblem1();\n         new AdamsIntegrator(3, false, 0.01).integrate(pb,\n     public void decreasingStepsBashforth() throws DerivativeException, IntegratorException {\n \n         TestProblemAbstract[] problems = TestProblemFactory.getProblems();\n-        for (int k = 3; k < problems.length; ++k) {\n+        for (int k = 0; k < problems.length; ++k) {\n \n             double previousError = Double.NaN;\n             for (int i = 6; i < 10; ++i) {\n     }\n \n     @Test\n-    @Ignore\n     public void smallStepBashforth() throws DerivativeException, IntegratorException {\n \n         TestProblem1 pb  = new TestProblem1();\n     }\n \n     @Test\n-    @Ignore\n     public void bigStepBashforth() throws DerivativeException, IntegratorException {\n \n         TestProblem1 pb  = new TestProblem1();\n     }\n \n     @Test\n-    @Ignore\n     public void backwardBashforth() throws DerivativeException, IntegratorException {\n \n         TestProblem5 pb = new TestProblem5();\n     }\n \n     @Test\n-    @Ignore\n     public void polynomialBashforth() throws DerivativeException, IntegratorException {\n         TestProblem6 pb = new TestProblem6();\n         double step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.02;\n     }\n \n     @Test\n-    @Ignore\n     public void serializationBashforth()\n         throws IntegratorException, DerivativeException,\n                IOException, ClassNotFoundException {\n     }\n \n     @Test(expected=IntegratorException.class)\n-    @Ignore\n     public void dimensionCheckMoulton()\n         throws DerivativeException, IntegratorException {\n         TestProblem1 pb = new TestProblem1();\n     }\n \n     @Test\n-    @Ignore\n     public void decreasingStepsMoulton()\n         throws DerivativeException, IntegratorException {\n \n     }\n \n     @Test\n-    @Ignore\n     public void smallStepMoulton()\n         throws DerivativeException, IntegratorException {\n \n     }\n \n     @Test\n-    @Ignore\n     public void bigStepMoulton()\n         throws DerivativeException, IntegratorException {\n \n     }\n \n     @Test\n-    @Ignore\n     public void backwardMoulton()\n         throws DerivativeException, IntegratorException {\n \n     }\n \n     @Test\n-    @Ignore\n     public void polynomialMoulton()\n         throws DerivativeException, IntegratorException {\n         TestProblem6 pb = new TestProblem6();\n \n     }\n \n-    @Test\n-    @Ignore\n-    public void comparison()\n-        throws DerivativeException, IntegratorException {\n-        TestProblem3 pb = new TestProblem3(0.9);\n-        double range = Math.abs(pb.getFinalTime() - pb.getInitialTime());\n-        FirstOrderIntegrator dp853 =\n-            new DormandPrince853Integrator(0, range, 1.0e-8, 1.0e-8);\n-        ContinuousOutputModel model1 = new ContinuousOutputModel();\n-        dp853.addStepHandler(model1);\n-        dp853.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n-                            pb.getFinalTime(), new double[pb.getDimension()]);\n-        AdamsIntegrator ab8 = new AdamsIntegrator(8, false, range / 100.0);\n-        ab8.setStarterIntegrator(dp853);\n-        ContinuousOutputModel model2 = new ContinuousOutputModel();\n-        ab8.addStepHandler(model2);\n-        ab8.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n-                            pb.getFinalTime(), new double[pb.getDimension()]);\n-        AdamsIntegrator am8 = new AdamsIntegrator(8, true, range / 100.0);\n-        am8.setStarterIntegrator(dp853);\n-        ContinuousOutputModel model3 = new ContinuousOutputModel();\n-        am8.addStepHandler(model3);\n-        am8.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n-                            pb.getFinalTime(), new double[pb.getDimension()]);\n-        for (double t = pb.getInitialTime(); t < pb.getFinalTime(); t += 1.0e-3 * range) {\n-            model1.setInterpolatedTime(t);\n-            model2.setInterpolatedTime(t);\n-            model3.setInterpolatedTime(t);\n-            System.out.println(t + \" \" +\n-                               pb.computeTheoreticalState(t)[0] + \" \" +\n-                               (model1.getInterpolatedState()[0]-pb.computeTheoreticalState(t)[0]) + \" \" +\n-                               (model2.getInterpolatedState()[0]-pb.computeTheoreticalState(t)[0]) + \" \" +\n-                               (model3.getInterpolatedState()[0]-pb.computeTheoreticalState(t)[0]));\n-        }\n-    }\n-\n }", "timestamp": 1243975553, "metainfo": ""}