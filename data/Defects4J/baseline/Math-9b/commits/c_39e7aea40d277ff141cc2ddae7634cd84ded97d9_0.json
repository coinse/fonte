{"sha": "39e7aea40d277ff141cc2ddae7634cd84ded97d9", "log": "fixed checkstyle errors about utility classes constructors  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n      * <p>We use here the Initialization On Demand Holder Idiom.</p>\n      */\n     private static class LazyHolder {\n+\n+        /** Private constructor. */\n+        private LazyHolder() {\n+        }\n+\n         /** Cached solver factory */\n         private static final UnivariateRealSolverFactory FACTORY =\n             UnivariateRealSolverFactory.newInstance();\n+\n     }\n \n }\n--- a/src/main/java/org/apache/commons/math/complex/ComplexField.java\n+++ b/src/main/java/org/apache/commons/math/complex/ComplexField.java\n      * <p>We use here the Initialization On Demand Holder Idiom.</p>\n      */\n     private static class LazyHolder {\n+\n+        /** Private constructor. */\n+        private LazyHolder() {\n+        }\n+\n         /** Cached field instance. */\n         private static final ComplexField INSTANCE = new ComplexField();\n+\n     }\n \n     /** Handle deserialization of the singleton.\n--- a/src/main/java/org/apache/commons/math/fraction/BigFractionField.java\n+++ b/src/main/java/org/apache/commons/math/fraction/BigFractionField.java\n      * <p>We use here the Initialization On Demand Holder Idiom.</p>\n      */\n     private static class LazyHolder {\n+\n+        /** Private constructor. */\n+        private LazyHolder() {\n+        }\n+\n         /** Cached field instance. */\n         private static final BigFractionField INSTANCE = new BigFractionField();\n+\n     }\n \n     /** Handle deserialization of the singleton.\n--- a/src/main/java/org/apache/commons/math/fraction/FractionField.java\n+++ b/src/main/java/org/apache/commons/math/fraction/FractionField.java\n      * <p>We use here the Initialization On Demand Holder Idiom.</p>\n      */\n     private static class LazyHolder {\n+\n+        /** Private constructor. */\n+        private LazyHolder() {\n+        }\n+\n         /** Cached field instance. */\n         private static final FractionField INSTANCE = new FractionField();\n+\n     }\n \n     /** Handle deserialization of the singleton.\n--- a/src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java\n          * @param dfwg degrees of freedom in denominator (within groups)\n          * @param F statistic\n          */\n-        AnovaStats(int dfbg, int dfwg, double F) {\n+        public AnovaStats(int dfbg, int dfwg, double F) {\n             this.dfbg = dfbg;\n             this.dfwg = dfwg;\n             this.F = F;\n--- a/src/main/java/org/apache/commons/math/util/BigRealField.java\n+++ b/src/main/java/org/apache/commons/math/util/BigRealField.java\n      * <p>We use here the Initialization On Demand Holder Idiom.</p>\n      */\n     private static class LazyHolder {\n+\n+        /** Private constructor. */\n+        private LazyHolder() {\n+        }\n+\n         /** Cached field instance. */\n         private static final BigRealField INSTANCE = new BigRealField();\n+\n     }\n \n     /** Handle deserialization of the singleton.", "timestamp": 1252226339, "metainfo": ""}