{"sha": "efa9de05114492ca38cf4739a07339f5ad6faddc", "log": "MATH-864 Fixed missing \"repair\" of a point that lies outside the boundaries. Thanks to Frank Hessen for the report and for pinpointing the cause of the problem.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n import org.apache.commons.math3.analysis.MultivariateFunction;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.MathUnsupportedOperationException;\n+import org.apache.commons.math3.exception.MathIllegalStateException;\n import org.apache.commons.math3.exception.NotPositiveException;\n import org.apache.commons.math3.exception.OutOfRangeException;\n import org.apache.commons.math3.exception.TooManyEvaluationsException;\n+import org.apache.commons.math3.exception.util.LocalizedFormats;\n import org.apache.commons.math3.linear.Array2DRowRealMatrix;\n import org.apache.commons.math3.linear.EigenDecomposition;\n import org.apache.commons.math3.linear.MatrixUtils;\n                     bestValue = bestFitness;\n                     lastResult = optimum;\n                     optimum = new PointValuePair(\n-                            fitfun.decode(bestArx.getColumn(0)),\n+                            fitfun.repairAndDecode(bestArx.getColumn(0)),\n                             isMinimize ? bestFitness : -bestFitness);\n                     if (getConvergenceChecker() != null && lastResult != null) {\n                         if (getConvergenceChecker().converged(iterations, optimum, lastResult)) {\n \n         /**\n          * @param x Normalized objective variables.\n+         * @return the original objective variables, possibly repaired.\n+         */\n+        public double[] repairAndDecode(final double[] x) {\n+            return boundaries != null && isRepairMode ?\n+                decode(repair(x)) :\n+                decode(x);\n+        }\n+\n+        /**\n+         * @param x Normalized objective variables.\n          * @return the original objective variables.\n          */\n         public double[] decode(final double[] x) {\n--- a/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java\n                 GoalType.MINIMIZE, LAMBDA, false, 1, 1e-13,\n                 1e-10, 1e-4, 1000000, expected);\n      }\n+\n+    @Test\n+    public void testMath864() {\n+        final CMAESOptimizer optimizer = new CMAESOptimizer();\n+        final MultivariateFunction fitnessFunction = new MultivariateFunction() {\n+                @Override\n+                public double value(double[] parameters) {\n+                    final double target = 1;\n+                    final double error = target - parameters[0];\n+                    return error * error;\n+                }\n+            };\n+\n+        final double[] start = { 0 };\n+        final double[] lower = { -1e6 };\n+        final double[] upper = { 0.5 };\n+        final double[] result = optimizer.optimize(10000, fitnessFunction, GoalType.MINIMIZE,\n+                                                   start, lower, upper).getPoint();\n+        Assert.assertTrue(\"Out of bounds (\" + result[0] + \" > \" + upper[0] + \")\",\n+                          result[0] <= upper[0]);\n+    }\n \n     /**\n      * @param func Function to optimize.", "timestamp": 1348237057, "metainfo": ""}