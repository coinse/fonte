{"sha": "f8d4090a899526c34fe32435a67ef5f4559dbf2f", "log": "Corrected inverseCumulativeProbability(0).   ", "commit": "\n--- a/src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n /**\n  * The default implementation of {@link BinomialDistribution}.\n  *\n- * @version $Revision: 1.17 $ $Date: 2004/07/23 05:22:36 $\n+ * @version $Revision: 1.18 $ $Date: 2004/07/25 16:29:24 $\n  */\n public class BinomialDistributionImpl\n     extends AbstractDiscreteDistribution\n     /**\n      * For this distribution, X, this method returns the largest x, such\n      * that P(X &le; x) &le; <code>p</code>.\n+     * <p>\n+     * Returns <code>-1</code> for p=0 and <code>Integer.MAX_VALUE</code> for\n+     * p=1.\n      *\n      * @param p the desired probability\n      * @return the largest x such that P(X &le; x) <= p\n     public int inverseCumulativeProbability(final double p) throws MathException {\n         // handle extreme values explicitly\n         if (p == 0) {\n-            return 0;\n+            return -1;\n         } \n         if (p == 1) {\n             return Integer.MAX_VALUE; \n--- a/src/java/org/apache/commons/math/distribution/DiscreteDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/DiscreteDistribution.java\n /**\n  * Base interface for various discrete distributions.\n  *\n- * @version $Revision: 1.15 $ $Date: 2004/06/23 16:26:15 $\n+ * @version $Revision: 1.16 $ $Date: 2004/07/25 16:29:24 $\n  */\n public interface DiscreteDistribution {\n     /**\n     double cumulativeProbability(int x0, int x1) throws MathException;\n     \n     /**\n-     * For this distribution, X, this method returns the largest x such that P(X &le; x) <= p.\n+     * For this distribution, X, this method returns the largest x such that\n+     * P(X &le; x) <= p.\n+     * <p>\n+     * Note that this definition implies: <ul>\n+     * <li> If there is a minimum value, <code>m</code>, with postive\n+     * probablility under (the density of) X, then <code>m - 1</code> is\n+     * returned by <code>inverseCumulativeProbability(0).</code>  If there is\n+     * no such value <code>m,  Integer.MIN_VALUE</code> is \n+     * returned.</li>\n+     * <li> If there is a maximum value, <code>M</code>, such that\n+     * P(X &le; M) =1, then <code>M</code> is returned by \n+     * <code>inverseCumulativeProbability(1).</code>\n+     * If there is no such value, <code>M, Integer.MAX_VALUE</code> is \n+     * returned.</li></ul>\n+     * \n      * @param p the cumulative probability.\n-     * @return x. \n+     * @return the largest x such that P(X &le; x) <= p\n      * @throws MathException if the inverse cumulative probability can not be\n      *            computed due to convergence or other numerical errors.\n+     * @throws IllegalArgumentException if p is not between 0 and 1 (inclusive)\n      */\n     int inverseCumulativeProbability(double p) throws MathException;\n }\n--- a/src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java\n  * Extends DiscreteDistributionAbstractTest.  See class javadoc for\n  * DiscreteDistributionAbstractTest for details.\n  * \n- * @version $Revision: 1.14 $ $Date: 2004/07/23 05:22:36 $\n+ * @version $Revision: 1.15 $ $Date: 2004/07/25 16:29:25 $\n  */\n public class BinomialDistributionTest extends DiscreteDistributionAbstractTest {\n     \n     \n     /** Creates the default inverse cumulative probability density test expected values */\n     public int[] makeInverseCumulativeTestValues() {\n-        return new int[] {0,1, 2, 3, 4, 4, 9, 9, 9, 8, 8, Integer.MAX_VALUE};\n+        return new int[] {-1, 1, 2, 3, 4, 4, 9, 9, 9, 8, 8, Integer.MAX_VALUE};\n     }\n \n     //----------------- Additional test cases ---------------------------------\n--- a/src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java\n  * Extends DiscreteDistributionAbstractTest.  See class javadoc for\n  * DiscreteDistributionAbstractTest for details.\n  * \n- * @version $Revision: 1.11 $ $Date: 2004/05/11 02:12:11 $\n+ * @version $Revision: 1.12 $ $Date: 2004/07/25 16:29:25 $\n  */\n public class HypergeometricDistributionTest extends DiscreteDistributionAbstractTest {\n \n     \n     /** Creates the default inverse cumulative probability test input values */\n     public double[] makeInverseCumulativeTestPoints() {\n-        return new double[] {0.001d, 0.010d, 0.025d, 0.050d, 0.100d, 0.999d,\n-                0.990d, 0.975d, 0.950d, 0.900d}; \n+        return new double[] {0d, 0.001d, 0.010d, 0.025d, 0.050d, 0.100d, 0.999d,\n+                0.990d, 0.975d, 0.950d, 0.900d, 1d}; \n     }\n     \n     /** Creates the default inverse cumulative probability density test expected values */\n     public int[] makeInverseCumulativeTestValues() {\n-        return new int[] {-1, 0, 0, 0, 0, 4, 3, 3, 3, 3};\n+        return new int[] {-1, -1, 0, 0, 0, 0, 4, 3, 3, 3, 3, 5};\n     }\n     \n     //-------------------- Additional test cases ------------------------------", "timestamp": 1090772965, "metainfo": ""}