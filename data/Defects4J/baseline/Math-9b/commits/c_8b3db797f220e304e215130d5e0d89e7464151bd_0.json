{"sha": "8b3db797f220e304e215130d5e0d89e7464151bd", "log": "Removing @author tags, adding missing @version tags.   ", "commit": "\n--- a/src/java/org/apache/commons/math/MathConfigurationException.java\n+++ b/src/java/org/apache/commons/math/MathConfigurationException.java\n /**\n  * Signals a configuration problem with any of the factory methods.\n  * \n- * @author pietsch at apache.org\n- *\n+ * @version $Revision: 1.4 $ $Date: 2003/07/09 20:02:44 $\n  */\n public class MathConfigurationException extends MathException {\n \n--- a/src/java/org/apache/commons/math/MathException.java\n+++ b/src/java/org/apache/commons/math/MathException.java\n /**\n  * A generic exception indicating problems in the math package.\n  *  \n- * @author pietsch at apache.org\n+ * @version $Revision: 1.4 $ $Date: 2003/07/09 20:02:44 $\n  */\n public class MathException extends Exception {\n \n--- a/src/java/org/apache/commons/math/analysis/BisectionSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BisectionSolver.java\n  * functions.  It will only search for one zero in the given interval.  The\n  * function is supposed to be continuous but not necessarily smooth.\n  *  \n- * @author Brent Worden\n+ * @version $Revision: 1.2 $ $Date: 2003/07/09 20:02:43 $\n  */\n public class BisectionSolver extends UnivariateRealSolverImpl {\n     /**\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n  * It will only search for one zero in the given interval.\n  * The function is supposed to be continuous but not necessarily smooth.\n  *  \n- * @author pietsch at apache.org\n+ * @version $Revision: 1.3 $ $Date: 2003/07/09 20:02:43 $\n  */\n public class BrentSolver extends UnivariateRealSolverImpl {\n     /**\n--- a/src/java/org/apache/commons/math/analysis/ConvergenceException.java\n+++ b/src/java/org/apache/commons/math/analysis/ConvergenceException.java\n  * Error thrown when a numerical computation can not be performed because the\n  * numerical result failed to converge to a finite value.\n  * \n- * @author Brent Worden\n+ * @version $Revision: 1.2 $ $Date: 2003/07/09 20:02:43 $\n  */\n public class ConvergenceException extends RuntimeException {\n     /**\n--- a/src/java/org/apache/commons/math/analysis/CubicSplineFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/CubicSplineFunction.java\n  * polynominal coefficents are used.\n  * Arguments outside of the domain cause an IllegalArgumentException.\n  * \n- * @author pietsch at apache.org\n+ * @version $Revision: 1.2 $ $Date: 2003/07/09 20:02:43 $\n  *\n  */\n public class CubicSplineFunction implements UnivariateRealFunction {\n--- a/src/java/org/apache/commons/math/analysis/RootFinding.java\n+++ b/src/java/org/apache/commons/math/analysis/RootFinding.java\n /**\n  * Utility class comprised of root finding techniques.\n  *\n- * @author Brent Worden\n+ * @version $Revision: 1.3 $ $Date: 2003/07/09 20:02:43 $\n  */\n public class RootFinding {\n     /** Maximum allowed numerical error. */\n--- a/src/java/org/apache/commons/math/analysis/SecantSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/SecantSolver.java\n  * It will only search for one zero in the given interval.\n  * The function is supposed to be continuous but not necessarily smooth.\n  *  \n- * @author pietsch at apache.org\n+ * @version $Revision: 1.3 $ $Date: 2003/07/09 20:02:43 $\n  */\n public class SecantSolver extends UnivariateRealSolverImpl {\n     /**\n--- a/src/java/org/apache/commons/math/analysis/SplineInterpolator.java\n+++ b/src/java/org/apache/commons/math/analysis/SplineInterpolator.java\n /**\n  * Computes a natural spline interpolation for the data set.\n  *\n- * @author pietsch at apache.org\n+ * @version $Revision: 1.2 $ $Date: 2003/07/09 20:02:43 $\n  *\n  */\n public class SplineInterpolator implements UnivariateRealInterpolator {\n--- a/src/java/org/apache/commons/math/analysis/UnivariateFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateFunction.java\n package org.apache.commons.math.analysis;\n \n /**\n- * @author Brent Worden\n+ * @version $Revision: 1.2 $ $Date: 2003/07/09 20:02:43 $\n  */\n public interface UnivariateFunction {\n     // TODO: More documentation\n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java\n  * that derivatives are evaluated after the value, the evaluation algorithm\n  * should throw an InvalidStateException if it can't cope with this.\n  *  \n- * @author pietsch at apache.org\n+ * @version $Revision: 1.2 $ $Date: 2003/07/09 20:02:43 $\n  */\n public interface UnivariateRealFunction {\n \n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java\n /**\n  *  Interface for interpolating a data set.\n  *  \n- *  * @author pietsch at apache.org\n- *\n+ * @version $Revision: 1.2 $ $Date: 2003/07/09 20:02:43 $\n  */\n public interface UnivariateRealInterpolator {\n \n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java\n  * functions.\n  * An implementation will only search for one zero in the given interval.\n  *  \n- * @author pietsch at apache.org\n+ * @version $Revision: 1.3 $ $Date: 2003/07/09 20:02:43 $\n  */\n public interface UnivariateRealSolver {\n \n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java\n import org.apache.commons.math.MathException;\n \n /**\n- * @author pietsch at apache.org\n- *\n  * A factory to easily get a default solver and some convenience\n  * functions.\n  * Because solvers are easily reusable, the factory does not\n  * store configuration data and creates preconfigured solvers\n  * (this may be controversial, because the configuration data\n  * may also be used for the default solver used by the static\n- * solve() method).\n- * \n+ * solve() method). \n+ * @version $Revision: 1.2 $ $Date: 2003/07/09 20:02:43 $\n  */\n public class UnivariateRealSolverFactory {\n     protected UnivariateRealSolverFactory() {\n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java\n  * Provide a default implementation for several functions useful to generic\n  * solvers.\n  *  \n- * @author pietsch at apache.org\n+ * @version $Revision: 1.3 $ $Date: 2003/07/09 20:02:43 $\n  */\n public abstract class UnivariateRealSolverImpl\n     implements UnivariateRealSolver {\n--- a/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n  * implementations for some of the methods that do not vary from distribution\n  * to distribution.\n  *  \n- * @author Brent Worden\n+ * @version $Revision: 1.7 $ $Date: 2003/07/09 20:03:23 $\n  */\n public abstract class AbstractContinuousDistribution\n     implements ContinuousDistribution {\n--- a/src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java\n  * Chi-Squared Distribution</a></li>\n  * </ul>\n  * \n- * @author Brent Worden\n+ * @version $Revision: 1.5 $ $Date: 2003/07/09 20:03:22 $\n  */\n public interface ChiSquaredDistribution extends ContinuousDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n /**\n  * The default implementation of {@link ChiSquaredDistribution}\n  * \n- * @author Brent Worden\n+ * @version $Revision: 1.5 $ $Date: 2003/07/09 20:03:23 $\n  */\n public class ChiSquaredDistributionImpl\n     extends AbstractContinuousDistribution\n--- a/src/java/org/apache/commons/math/distribution/ContinuousDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/ContinuousDistribution.java\n /**\n  * Base interface for various continuous distributions.\n  * \n- * @author Brent Worden\n+ * @version $Revision: 1.3 $ $Date: 2003/07/09 20:03:23 $\n  */\n public interface ContinuousDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n+++ b/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n  * ChiSquaredDistribution chi = factory.createChiSquareDistribution(5.0);\n  * </pre>\n  * \n- * @author Brent Worden\n+ * @version $Revision: 1.8 $ $Date: 2003/07/09 20:03:22 $\n  */\n public abstract class DistributionFactory {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java\n  * A concrete distribution factory.  This is the default factory used by\n  * Commons-Math.\n  *  \n- * @author Brent Worden\n+ * @version $Revision: 1.7 $ $Date: 2003/07/09 20:03:23 $\n  */\n public class DistributionFactoryImpl extends DistributionFactory {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/ExponentialDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/ExponentialDistribution.java\n  * <li><a href=\"http://mathworld.wolfram.com/ExponentialDistribution.html\">\n  * Exponential Distribution</a></li>\n  * \n- * @author Brent Worden\n+ * @version $Revision: 1.3 $ $Date: 2003/07/09 20:03:23 $\n  */\n public interface ExponentialDistribution extends ContinuousDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n /**\n  * The default implementation of {@link ExponentialDistribution}\n  * \n- * @author Brent Worden\n+ * @version $Revision: 1.4 $ $Date: 2003/07/09 20:03:23 $\n  */\n public class ExponentialDistributionImpl\n     implements ExponentialDistribution {\n--- a/src/java/org/apache/commons/math/distribution/FDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistribution.java\n  * F-Distribution</a></li>\n  * </ul>\n  * \n- * @author Brent Worden\n+ * @version $Revision: 1.4 $ $Date: 2003/07/09 20:03:23 $\n  */\n public interface FDistribution extends ContinuousDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n  * Default implementation of\n  * {@link org.apache.commons.math.stat.distribution.FDistribution}.\n  * \n- * @author Brent Worden\n+ * @version $Revision: 1.4 $ $Date: 2003/07/09 20:03:23 $\n  */\n public class FDistributionImpl\n     extends AbstractContinuousDistribution\n--- a/src/java/org/apache/commons/math/distribution/GammaDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/GammaDistribution.java\n  * Gamma Distribution</a></li>\n  * </ul>\n  *  \n- * @author Brent Worden\n+ * @version $Revision: 1.6 $ $Date: 2003/07/09 20:03:22 $\n  */\n public interface GammaDistribution extends ContinuousDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n /**\n  * The default implementation of {@link GammaDistribution}\n  * \n- * @author Brent Worden\n+ * @version $Revision: 1.5 $ $Date: 2003/07/09 20:03:23 $\n  */\n public class GammaDistributionImpl extends AbstractContinuousDistribution\n     implements GammaDistribution {\n--- a/src/java/org/apache/commons/math/distribution/TDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/TDistribution.java\n  * Student's t-Distribution</a></li>\n  * </ul>\n  * \n- * @author Brent Worden\n+ * @version $Revision: 1.3 $ $Date: 2003/07/09 20:03:23 $\n  */\n public interface TDistribution extends ContinuousDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/TDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/TDistributionImpl.java\n  * Default implementation of\n  * {@link org.apache.commons.math.stat.distribution.TDistribution}.\n  * \n- * @author Brent Worden\n+ * @version $Revision: 1.4 $ $Date: 2003/07/09 20:03:23 $\n  */\n public class TDistributionImpl\n     extends AbstractContinuousDistribution\n--- a/src/java/org/apache/commons/math/random/EmpiricalDistribution.java\n+++ b/src/java/org/apache/commons/math/random/EmpiricalDistribution.java\n  * build grouped frequnecy histograms representing the input data or to\n  * generate random values \"like\" those in the input file -- i.e., the values\n  * generated will follow the distribution of the values in the file.\n- * @version $Revision: 1.2 $\n+ * @version $Revision: 1.3 $ $Date: 2003/07/09 20:02:59 $\n  */\n public interface EmpiricalDistribution {\n     \n--- a/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n  *    entry per line.</li>\n  * </ol></p>\n  *\n- * @version $Revision: 1.2 $\n+ * @version $Revision: 1.3 $ $Date: 2003/07/09 20:02:59 $\n  */\n public class EmpiricalDistributionImpl implements Serializable,EmpiricalDistribution {\n \n--- a/src/java/org/apache/commons/math/random/ValueServer.java\n+++ b/src/java/org/apache/commons/math/random/ValueServer.java\n  *                       standard deviation = <code>sigma</code></li>\n  * <li> CONSTANT_MODE -- returns <code>mu</code> every time.</li></ul> \n  *\n- * @version $Revision: 1.2 $\n+ * @version $Revision: 1.3 $ $Date: 2003/07/09 20:02:59 $\n  *\n  */\n public class ValueServer {\n--- a/src/java/org/apache/commons/math/special/Beta.java\n+++ b/src/java/org/apache/commons/math/special/Beta.java\n  * This is a utility class that provides computation methods related to the\n  * Beta family of functions.\n  * \n- * @author Brent Worden\n+ * @version $Revision: 1.7 $ $Date: 2003/07/09 20:03:09 $\n  */\n public class Beta {\n     /** Maximum allowed numerical error. */\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n  * This is a utility class that provides computation methods related to the\n  * Gamma family of functions.\n  * \n- * @author Brent Worden\n+ * @version $Revision: 1.9 $ $Date: 2003/07/09 20:03:09 $\n  */\n public class Gamma {\n     /** Maximum allowed numerical error. */\n--- a/src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java\n  * Provides the ability to extend polymophically so that\n  * indiviual statistics do not need to implement these methods unless\n  * there are better algorithms for handling the calculation.\n+ * @version $Revision: 1.4 $ $Date: 2003/07/09 20:04:13 $\n  */\n public abstract class AbstractStorelessUnivariateStatistic\n     extends AbstractUnivariateStatistic\n--- a/src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java\n  * Abstract Implementation for UnivariateStatistics.\n  * Provides the ability to extend polymophically so that\n  * indiviual statistics do not need to implement these methods. \n+ * @version $Revision: 1.4 $ $Date: 2003/07/09 20:04:13 $\n  */\n public abstract class AbstractUnivariateStatistic\n     implements UnivariateStatistic {\n--- a/src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java\n  * in it. As such only a subset of known statistics can actually be implmented\n  * using it. If a Statistic cannot be implemented in a Storeless approach it\n  * should implement the UnivariateStatistic interface directly instead.\n+ * @version $Revision: 1.5 $ $Date: 2003/07/09 20:04:13 $\n  */\n public interface StorelessUnivariateStatistic extends UnivariateStatistic {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java\n /**\n  * UnivariateStatistic interface provides methods to evaluate \n  * double[] based content using a particular algorithm.\n- * \n+ * @version $Revision: 1.4 $ $Date: 2003/07/09 20:04:13 $\n  */\n public interface UnivariateStatistic {\n     \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java\n import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;\n \n /**\n+ * FirstMoment.java\n  * \n+ * The FirstMoment (arithmentic mean) is calculated using the following \n+ * <a href=\"http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf\">\n+ * recursive strategy\n+ * </a>. Both incremental and evaluation strategies currently use this approach.\n+ * @version $Revision: 1.4 $ $Date: 2003/07/09 20:04:10 $\n  */\n public class FirstMoment extends AbstractStorelessUnivariateStatistic {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java\n package org.apache.commons.math.stat.univariate.moment;\n \n /**\n- * \n- *\n+ * The FourthMoment is calculated using the following \n+ * <a href=\"http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf\">\n+ * recursive strategy\n+ * </a>. Both incremental and evaluation strategies currently use this approach.\n+ * @version $Revision: 1.6 $ $Date: 2003/07/09 20:04:10 $\n  */\n public class FourthMoment extends ThirdMoment {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java\n \n import org.apache.commons.math.stat.univariate.summary.SumOfLogs;\n \n-/**\n- * \n- *\n+/** \n+ * Returns the <a href=\"http://www.xycoon.com/geometric_mean.htm\">\n+ * geometric mean </a> of the available values\n+ * @version $Revision: 1.8 $ $Date: 2003/07/09 20:04:10 $\n  */\n public class GeometricMean extends SumOfLogs {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java\n     .AbstractStorelessUnivariateStatistic;\n \n /**\n- *\n+ * @version $Revision: 1.6 $ $Date: 2003/07/09 20:04:10 $\n  */\n public class Kurtosis extends AbstractStorelessUnivariateStatistic {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Mean.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Mean.java\n  */\n package org.apache.commons.math.stat.univariate.moment;\n \n-import org\n-    .apache\n-    .commons\n-    .math\n-    .stat\n-    .univariate\n-    .AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math.stat.univariate.summary.Sum;\n \n /**\n- *\n+ * Returns the <a href=\"http://www.xycoon.com/arithmetic_mean.htm\">\n+ * arithmetic mean </a> of the available values.\n+ * @version $Revision: 1.6 $ $Date: 2003/07/09 20:04:10 $\n  */\n-public class Mean extends AbstractStorelessUnivariateStatistic {\n+public class Mean extends Sum {\n \n     /** first moment of values that have been added */\n     protected FirstMoment moment = null;\n         return moment.m1;\n     }\n     \n-    /*UnvariateStatistic Approach */\n-    Sum sum = new Sum();\n-\n     /**\n-     * Returns the <a href=http://www.xycoon.com/arithmetic_mean.htm>\n-     * arithmetic mean </a> of the available values.\n+     * Returns the <a href=\"http://www.xycoon.com/arithmetic_mean.htm\">\n+     * arithmetic mean </a> of a double[] of the available values.\n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n      * @param length processing at this point in the array\n      */\n     public double evaluate(double[] values, int begin, int length) {\n         if (test(values, begin, length)) {\n-            return sum.evaluate(values, begin, length) / ((double) length);\n+            return super.evaluate(values, begin, length) / ((double) length);\n         }\n         return Double.NaN;\n     }\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java\n package org.apache.commons.math.stat.univariate.moment;\n \n /**\n- * \n- *\n+ * The SecondMoment is calculated using the following \n+ * <a href=\"http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf\">\n+ * recursive strategy\n+ * </a>. Both incremental and evaluation strategies currently use this approach.\n+ * @version $Revision: 1.6 $ $Date: 2003/07/09 20:04:10 $\n  */\n public class SecondMoment extends FirstMoment {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java\n \n /**\n  * \n- *\n+ * @version $Revision: 1.6 $ $Date: 2003/07/09 20:04:10 $\n  */\n public class Skewness extends AbstractStorelessUnivariateStatistic {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java\n \n /**\n  * \n- *\n+ * @version $Revision: 1.6 $ $Date: 2003/07/09 20:04:10 $\n  */\n public class StandardDeviation extends Variance {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java\n package org.apache.commons.math.stat.univariate.moment;\n \n /**\n- * \n- *\n+ * The ThirdMoment (arithmentic mean) is calculated using the following \n+ * <a href=\"http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf\">\n+ * recursive strategy\n+ * </a>. Both incremental and evaluation strategies currently use this approach.\n+ * @version $Revision: 1.6 $ $Date: 2003/07/09 20:04:10 $\n  */\n public class ThirdMoment extends SecondMoment{\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Variance.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Variance.java\n \n /**\n  *\n- *\n+ * @version $Revision: 1.6 $ $Date: 2003/07/09 20:04:10 $\n  */\n public class Variance extends AbstractStorelessUnivariateStatistic {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Max.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Max.java\n     .AbstractStorelessUnivariateStatistic;\n \n /**\n- *\n+ * @version $Revision: 1.6 $ $Date: 2003/07/09 20:04:12 $\n  */\n public class Max extends AbstractStorelessUnivariateStatistic {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Median.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Median.java\n \n \n /**\n- *\n+ * @version $Revision: 1.3 $ $Date: 2003/07/09 20:04:12 $\n  */\n public class Median extends Percentile {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Min.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Min.java\n     .AbstractStorelessUnivariateStatistic;\n \n /**\n- *\n+ * @version $Revision: 1.6 $ $Date: 2003/07/09 20:04:12 $\n  */\n public class Min extends AbstractStorelessUnivariateStatistic {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java\n import org.apache.commons.math.stat.univariate.AbstractUnivariateStatistic;\n \n /**\n- *\n+ * @version $Revision: 1.4 $ $Date: 2003/07/09 20:04:12 $\n  */\n public class Percentile extends AbstractUnivariateStatistic {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/summary/Product.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/Product.java\n     .AbstractStorelessUnivariateStatistic;\n \n /**\n- *\n+ * @version $Revision: 1.6 $ $Date: 2003/07/09 20:04:13 $\n  */\n public class Product extends AbstractStorelessUnivariateStatistic {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/summary/Sum.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/Sum.java\n     .AbstractStorelessUnivariateStatistic;\n \n /**\n- *\n+ * @version $Revision: 1.6 $ $Date: 2003/07/09 20:04:13 $\n  */\n public class Sum extends AbstractStorelessUnivariateStatistic {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java\n     .AbstractStorelessUnivariateStatistic;\n \n /**\n- *\n+ * @version $Revision: 1.6 $ $Date: 2003/07/09 20:04:13 $\n  */\n public class SumOfLogs extends AbstractStorelessUnivariateStatistic {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java\n     .AbstractStorelessUnivariateStatistic;\n \n /**\n- *\n+ * @version $Revision: 1.6 $ $Date: 2003/07/09 20:04:13 $\n  */\n public class SumOfSquares extends AbstractStorelessUnivariateStatistic {\n \n--- a/src/java/org/apache/commons/math/util/BeanTransformer.java\n+++ b/src/java/org/apache/commons/math/util/BeanTransformer.java\n \n /**\n  * Uses PropertyUtils to map a Bean getter to a double value.\n+ * @version $Revision: 1.3 $ $Date: 2003/07/09 20:04:12 $\n  */\n public class BeanTransformer implements NumberTransformer {\n \n--- a/src/java/org/apache/commons/math/util/ContinuedFraction.java\n+++ b/src/java/org/apache/commons/math/util/ContinuedFraction.java\n  * <li><a href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">\n  * Continued Fraction</a></li>\n  * </ul>\n- * \n- * @author Brent Worden\n+ * @version $Revision: 1.3 $ $Date: 2003/07/09 20:04:12 $\n  */\n public abstract class ContinuedFraction {\n     /** Maximum allowed numerical error. */\n--- a/src/java/org/apache/commons/math/util/ContractableDoubleArray.java\n+++ b/src/java/org/apache/commons/math/util/ContractableDoubleArray.java\n  * internal storage array is swapped.\n  * </p>\n  * \n- * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n+ * @version $Revision: 1.3 $ $Date: 2003/07/09 20:04:12 $\n  */\n public class ContractableDoubleArray\n     extends ExpandableDoubleArray\n--- a/src/java/org/apache/commons/math/util/DefaultTransformer.java\n+++ b/src/java/org/apache/commons/math/util/DefaultTransformer.java\n \n /**\n  * A Default NumberTransformer for java.lang.Numbers and Numeric Strings. \n+ * @version $Revision: 1.3 $ $Date: 2003/07/09 20:04:12 $\n  */\n public class DefaultTransformer implements NumberTransformer {\n \n--- a/src/java/org/apache/commons/math/util/DoubleArray.java\n+++ b/src/java/org/apache/commons/math/util/DoubleArray.java\n  * Collections API by allowing a user to select from a number of \n  * array implementations with support for various storage mechanisms\n  * such as automatic expansion, contraction, and array \"rolling\".\n- * \n- * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n+ * @version $Revision: 1.3 $ $Date: 2003/07/09 20:04:12 $\n  */\n public interface DoubleArray {\n \n--- a/src/java/org/apache/commons/math/util/ExpandableDoubleArray.java\n+++ b/src/java/org/apache/commons/math/util/ExpandableDoubleArray.java\n  * expand the array 10 times - first from 2 -> 4. then 4 -> 8, 8 -> 16,\n  * and so on until we reach 4096 which is sufficient to hold 3546 elements.\n  * </p>\n- * \n- * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n+ * @version $Revision: 1.4 $ $Date: 2003/07/09 20:04:12 $\n  */\n public class ExpandableDoubleArray implements Serializable, DoubleArray {\n \n--- a/src/java/org/apache/commons/math/util/FixedDoubleArray.java\n+++ b/src/java/org/apache/commons/math/util/FixedDoubleArray.java\n  * \"fixed\" in memory, this implementation will never allocate, or copy\n  * the internal storage array to a new array instance.\n  * </p>\n- *\n- * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n+ * @version $Revision: 1.5 $ $Date: 2003/07/09 20:04:12 $\n  */\n public class FixedDoubleArray implements DoubleArray {\n \n--- a/src/java/org/apache/commons/math/util/NumberTransformer.java\n+++ b/src/java/org/apache/commons/math/util/NumberTransformer.java\n \n /**\n  * Subclasses implementing this interface can transform Objects to doubles.\n+ * @version $Revision: 1.3 $ $Date: 2003/07/09 20:04:12 $\n  */\n public interface NumberTransformer {\n     \n--- a/src/java/org/apache/commons/math/util/TransformerMap.java\n+++ b/src/java/org/apache/commons/math/util/TransformerMap.java\n  * It provides a means to set NumberTransformers that will be selected \n  * based on the Class of the object handed to the Maps\n  * <code>double transform(Object o)</code> method.\n+ * @version $Revision: 1.3 $ $Date: 2003/07/09 20:04:12 $\n  */\n public class TransformerMap implements NumberTransformer {\n ", "timestamp": 1057781053, "metainfo": ""}