{"sha": "ad94f87d49767e481381952243bffbd6e0e346e2", "log": "Added getSumOfLogs method to SummaryStatistics and made sum of logs instance used by GeometricMean configurable. JIRA: MATH-191   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n     protected SumOfLogs sumLog = new SumOfLogs();\n \n     /** geoMean of values that have been added */\n-    protected GeometricMean geoMean = new GeometricMean();\n+    protected GeometricMean geoMean = new GeometricMean(sumLog);\n \n     /** mean of values that have been added */\n     protected Mean mean = new Mean();\n         minImpl.increment(value);\n         maxImpl.increment(value);\n         sumLogImpl.increment(value);\n-        geoMean.increment(value);\n         secondMoment.increment(value);\n-        // If mean or variance have been overridden,\n-        // need to increment these, since they don't have secondMoment\n+        // If mean, variance or geomean have been overridden,\n+        // need to increment these\n         if (!(meanImpl instanceof Mean)) {\n                 meanImpl.increment(value);\n         }\n         if (!(varianceImpl instanceof Variance)) {\n             varianceImpl.increment(value);\n+        }\n+        if (!(geoMeanImpl instanceof GeometricMean)) {\n+            geoMeanImpl.increment(value);\n         }\n         n++;\n     }\n      */\n     public double getGeometricMean() {\n         return geoMeanImpl.getResult();\n+    }\n+    \n+    /**\n+     * Returns the sum of the logs of the values that have been added.\n+     * <p>\n+     *  Double.NaN is returned if no values have been added.</p>\n+     *\n+     * @return the sum of logs  \n+     */\n+    public double getSumOfLogs() {\n+        return sumLogImpl.getResult();\n     }\n     \n     /**\n         outBuffer.append(\"variance: \" + getVariance() + \"\\n\");\n         outBuffer.append(\"sum of squares: \" + getSumsq() + \"\\n\");\n         outBuffer.append(\"standard deviation: \" + getStandardDeviation() + \"\\n\");\n+        outBuffer.append(\"sum of logs: \" + getSumOfLogs() + \"\\n\");\n         return outBuffer.toString();\n     }\n \n             StorelessUnivariateStatistic sumLogImpl) {\n         checkEmpty();\n         this.sumLogImpl = sumLogImpl;\n+        geoMean.setSumLogImpl(sumLogImpl);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java\n package org.apache.commons.math.stat.descriptive.moment;\n \n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n+import org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic;\n import org.apache.commons.math.stat.descriptive.summary.SumOfLogs;\n \n /**\n     private static final long serialVersionUID = -8178734905303459453L;  \n     \n     /** Wrapped SumOfLogs instance */\n-    private SumOfLogs sumOfLogs;\n+    private StorelessUnivariateStatistic sumOfLogs;\n \n     /**\n      * Create a GeometricMean instance\n      */\n     public GeometricMean() {\n         sumOfLogs = new SumOfLogs();\n+    }\n+    \n+    /**\n+     * Create a GeometricMean instance using the given SumOfLogs instance\n+     */\n+    public GeometricMean(SumOfLogs sumOfLogs) {\n+        this.sumOfLogs = sumOfLogs;\n     }\n     \n     /**\n     public long getN() {\n         return sumOfLogs.getN();\n     }\n+    \n+    /**\n+     * <p>Sets the implementation for the sum of logs.</p>\n+     * <p>This method must be activated before any data has been added - i.e.,\n+     * before {@link #addValue(double) addValue} has been used to add data; \n+     * otherwise an IllegalStateException will be thrown.</p>\n+     * \n+     * @param sumLogImpl the StorelessUnivariateStatistic instance to use\n+     * for computing the log sum\n+     * @throws IllegalStateException if data has already been added \n+     *  (i.e if n > 0)\n+     */\n+    public void setSumLogImpl(\n+            StorelessUnivariateStatistic sumLogImpl) {\n+        checkEmpty();\n+        this.sumOfLogs = sumLogImpl;\n+    }\n+    \n+    /**\n+     * Returns the currently configured sum of logs implementation\n+     * \n+     * @return the StorelessUnivariateStatistic implementing the log sum\n+     */\n+    public StorelessUnivariateStatistic getSumLogImpl() {\n+        return sumOfLogs;\n+    }\n+    \n+    /**\n+     * Throws IllegalStateException if n > 0.\n+     */\n+    private void checkEmpty() {\n+        if (getN() > 0) {\n+            throw new IllegalStateException(\n+                \"Implementation must be configured before values are added.\");\n+        }\n+    }\n \n }\n--- a/src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java\n import junit.framework.TestSuite;\n \n import org.apache.commons.math.stat.descriptive.moment.Mean;\n+import org.apache.commons.math.stat.descriptive.summary.Sum;\n /**\n  * Test cases for the {@link SummaryStatistics} class.\n  * When SummaryStatisticsImpl is removed in math 2.0, test cases from\n     \n     public void testSetterInjection() throws Exception {\n         SummaryStatistics u = createSummaryStatistics();\n-        u.setMeanImpl(new sumMean());\n+        u.setMeanImpl(new Sum());\n+        u.setSumLogImpl(new Sum());\n         u.addValue(1);\n         u.addValue(3);\n         assertEquals(4, u.getMean(), 1E-14);\n+        assertEquals(4, u.getSumOfLogs(), 1E-14);\n+        assertEquals(Math.exp(2), u.getGeometricMean(), 1E-14);\n         u.clear();\n         u.addValue(1);\n         u.addValue(2);\n         u.addValue(1);\n         u.addValue(3);\n         try {\n-            u.setMeanImpl(new sumMean());\n+            u.setMeanImpl(new Sum());\n             fail(\"Expecting IllegalStateException\");\n         } catch (IllegalStateException ex) {\n             // expected\n         }\n     }\n-    \n-    /**\n-     * Bogus mean implementation to test setter injection.\n-     * Returns the sum instead of the mean.\n-     */\n-    static class sumMean implements StorelessUnivariateStatistic {   \n-        private static final long serialVersionUID = 6492471391340853423L;\n-        private double sum = 0;\n-        private long n = 0;\n-        public double evaluate(double[] values, int begin, int length) {\n-            return 0;\n-        }\n-        public double evaluate(double[] values) {\n-            return 0;\n-        }\n-        public void clear() {\n-          sum = 0; \n-          n = 0;\n-        }\n-        public long getN() {\n-            return n;\n-        }\n-        public double getResult() {\n-            return sum;\n-        }\n-        public void increment(double d) {\n-            sum += d;\n-            n++;\n-        }\n-        public void incrementAll(double[] values, int start, int length) {\n-        }\n-        public void incrementAll(double[] values) {\n-        }   \n-    }  \n }", "timestamp": 1202600564, "metainfo": ""}