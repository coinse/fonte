{"sha": "621806b796bc416f00341feca894ebae07be5ed0", "log": "[MATH-778] Allow unlimited input values for Dfp#multiply.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n \n     }\n \n-    /** Multiply this by a single digit 0&lt;=x&lt;radix.\n-     * There are speed advantages in this special case\n+    /** Multiply this by a single digit x.\n      * @param x multiplicand\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n+        if (x >= 0 && x < RADIX) {\n+            return multiplyFast(x);\n+        } else {\n+            return multiply(newInstance(x));\n+        }\n+    }\n+\n+    /** Multiply this by a single digit 0&lt;=x&lt;radix.\n+     * There are speed advantages in this special case.\n+     * @param x multiplicand\n+     * @return product of this and x\n+     */\n+    private Dfp multiplyFast(final int x) {\n         Dfp result = newInstance(this);\n \n         /* handle special cases */\n--- a/src/test/java/org/apache/commons/math3/dfp/DfpTest.java\n+++ b/src/test/java/org/apache/commons/math3/dfp/DfpTest.java\n              nan,\n              0, \"Multiply #36\");\n \n-        test(field.newDfp(\"1\").multiply(10000),  // out of range\n-             nan,\n-             DfpField.FLAG_INVALID, \"Multiply #37\");\n-\n-        test(field.newDfp(\"1\").multiply(-1),  // out of range\n-             nan,\n-             DfpField.FLAG_INVALID, \"Multiply #38\");\n+        test(field.newDfp(\"1\").multiply(10000),\n+             field.newDfp(\"10000\"),\n+             0, \"Multiply #37\");\n+\n+        test(field.newDfp(\"2\").multiply(1000000),\n+             field.newDfp(\"2000000\"),\n+             0, \"Multiply #38\");\n+\n+        test(field.newDfp(\"1\").multiply(-1),\n+             field.newDfp(\"-1\"),\n+             0, \"Multiply #39\");\n     }\n \n     @Test", "timestamp": 1350836570, "metainfo": ""}