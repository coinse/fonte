{"sha": "06b393d11a28f15276599526538dec5dbfde1fb7", "log": "[MATH-930] Add info the class javadoc wrt convergence criteria, add another ctor to only adjust the epsilon value.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java\n \n /**\n  * Solves a linear problem using the \"Two-Phase Simplex\" method.\n+ * <p>\n+ * <b>Note:</b> Depending on the problem definition, the default convergence criteria\n+ * may be too strict, resulting in {@link NoFeasibleSolutionException} or\n+ * {@link TooManyIterationsException}. In such a case it is advised to adjust these\n+ * criteria with more appropriate values, e.g. relaxing the epsilon value.\n+ * <p>\n+ * Default convergence criteria:\n+ * <ul>\n+ *   <li>Algorithm convergence: 1e-6</li>\n+ *   <li>Floating-point comparisons: 10 ulp</li>\n+ * </ul>\n+ * <p>\n+ * It may also be counter-productive to provide a too large value for {@link MaxIter}\n+ * as parameter in the call of {@link #optimize(org.apache.commons.math3.optim.OptimizationData...)},\n+ * as the {@link SimplexSolver} will use different strategies depending on the current iteration\n+ * count. After half of the allowed max iterations has already been reached, the strategy to select\n+ * pivot rows will change in order to break possible cycles due to degenerate problems.\n  *\n  * @version $Id$\n  * @since 2.0\n      */\n     public SimplexSolver() {\n         this(DEFAULT_EPSILON, DEFAULT_ULPS);\n+    }\n+\n+    /**\n+     * Builds a simplex solver with a specified accepted amount of error.\n+     *\n+     * @param epsilon Amount of error to accept for algorithm convergence.\n+     */\n+    public SimplexSolver(final double epsilon) {\n+        this(epsilon, DEFAULT_ULPS);\n     }\n \n     /**", "timestamp": 1358602809, "metainfo": ""}