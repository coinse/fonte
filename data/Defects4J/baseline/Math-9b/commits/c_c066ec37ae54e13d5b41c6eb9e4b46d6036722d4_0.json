{"sha": "c066ec37ae54e13d5b41c6eb9e4b46d6036722d4", "log": "optimized isInfinite for NaN vectors reverted hashcode back to its previous behavior to avoid breaking consistency with equals  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/SparseRealVector.java\n+++ b/src/java/org/apache/commons/math/linear/SparseRealVector.java\n     /** {@inheritDoc} */\n     public boolean isInfinite() {\n         boolean infiniteFound = false;\n-        boolean nanFound      = false;\n         Iterator iter = entries.iterator();\n         while (iter.hasNext()) {\n             iter.advance();\n             final double value = iter.value();\n             if (Double.isNaN(value)) {\n-                nanFound = true;\n+                return false;\n             }\n             if (Double.isInfinite(value)) {\n                 infiniteFound = true;\n             }\n         }\n-        return infiniteFound && (!nanFound);\n+        return infiniteFound;\n     }\n \n     /** {@inheritDoc} */\n         temp = Double.doubleToLongBits(epsilon);\n         result = prime * result + (int) (temp ^ (temp >>> 32));\n         result = prime * result + virtualSize;\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            temp = Double.doubleToLongBits(iter.value());\n-            result = prime * result + (int) (temp ^ (temp >>> 32));\n-        }\n         return result;\n     }\n \n--- a/src/test/org/apache/commons/math/linear/SparseRealVectorTest.java\n+++ b/src/test/org/apache/commons/math/linear/SparseRealVectorTest.java\n         assertNotSame(v, new SparseRealVector(new double[] { 0, 1, 2 + Math.ulp(2)}));\n         assertNotSame(v, new SparseRealVector(new double[] { 0, 1, 2, 3 }));\n \n-        assertTrue(new SparseRealVector(new double[] { Double.NaN, 1, 2 }).hashCode() !=\n-                      new SparseRealVector(new double[] { 0, Double.NaN, 2 }).hashCode());\n-\n-        assertTrue(new SparseRealVector(new double[] { Double.NaN, 1, 2 }).hashCode() !=\n-                   new SparseRealVector(new double[] { 0, 1, 2 }).hashCode());\n-\n     }\n \n     /** verifies that two vectors are close (sup norm) */", "timestamp": 1240252931, "metainfo": ""}