{"sha": "6b589ca6ac276df021171e33273a5251ce5dcd14", "log": "MATH-854: fill the throws clause of all methods.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java\n+++ b/src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.NumberIsTooLargeException;\n+import org.apache.commons.math3.exception.NumberIsTooSmallException;\n import org.apache.commons.math3.exception.OutOfRangeException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n import org.apache.commons.math3.util.MathUtils;\n      * @throws NullArgumentException if {@code d} is {@code null}.\n      * @see #ArrayRealVector(double[])\n      */\n-    public ArrayRealVector(double[] d, boolean copyArray) {\n+    public ArrayRealVector(double[] d, boolean copyArray)\n+        throws NullArgumentException {\n         if (d == null) {\n             throw new NullArgumentException();\n         }\n      * @throws NumberIsTooLargeException if the size of {@code d} is less\n      * than {@code pos + size}.\n      */\n-    public ArrayRealVector(double[] d, int pos, int size) {\n+    public ArrayRealVector(double[] d, int pos, int size)\n+        throws NullArgumentException, NumberIsTooLargeException {\n         if (d == null) {\n             throw new NullArgumentException();\n         }\n      * @throws NumberIsTooLargeException if the size of {@code d} is less\n      * than {@code pos + size}.\n      */\n-    public ArrayRealVector(Double[] d, int pos, int size) {\n+    public ArrayRealVector(Double[] d, int pos, int size)\n+        throws NullArgumentException, NumberIsTooLargeException {\n         if (d == null) {\n             throw new NullArgumentException();\n         }\n      * @param v vector to copy.\n      * @throws NullArgumentException if {@code v} is {@code null}.\n      */\n-    public ArrayRealVector(RealVector v) {\n+    public ArrayRealVector(RealVector v) throws NullArgumentException {\n         if (v == null) {\n             throw new NullArgumentException();\n         }\n      * @param v Vector to copy.\n      * @throws NullArgumentException if {@code v} is {@code null}.\n      */\n-    public ArrayRealVector(ArrayRealVector v) {\n+    public ArrayRealVector(ArrayRealVector v) throws NullArgumentException {\n         this(v, true);\n     }\n \n \n     /** {@inheritDoc} */\n     @Override\n-    public ArrayRealVector add(RealVector v) {\n+    public ArrayRealVector add(RealVector v)\n+        throws DimensionMismatchException {\n         if (v instanceof ArrayRealVector) {\n             final double[] vData = ((ArrayRealVector) v).data;\n             final int dim = vData.length;\n \n     /** {@inheritDoc} */\n     @Override\n-    public ArrayRealVector subtract(RealVector v) {\n+    public ArrayRealVector subtract(RealVector v)\n+        throws DimensionMismatchException {\n         if (v instanceof ArrayRealVector) {\n             final double[] vData = ((ArrayRealVector) v).data;\n             final int dim = vData.length;\n \n     /** {@inheritDoc} */\n     @Override\n-    public ArrayRealVector ebeMultiply(RealVector v) {\n+    public ArrayRealVector ebeMultiply(RealVector v)\n+        throws DimensionMismatchException {\n         if (v instanceof ArrayRealVector) {\n             final double[] vData = ((ArrayRealVector) v).data;\n             final int dim = vData.length;\n \n     /** {@inheritDoc} */\n     @Override\n-    public ArrayRealVector ebeDivide(RealVector v) {\n+    public ArrayRealVector ebeDivide(RealVector v)\n+        throws DimensionMismatchException {\n         if (v instanceof ArrayRealVector) {\n             final double[] vData = ((ArrayRealVector) v).data;\n             final int dim = vData.length;\n \n     /** {@inheritDoc} */\n     @Override\n-    public double dotProduct(RealVector v) {\n+    public double dotProduct(RealVector v) throws DimensionMismatchException {\n         if (v instanceof ArrayRealVector) {\n             final double[] vData = ((ArrayRealVector) v).data;\n             checkVectorDimensions(vData.length);\n \n     /** {@inheritDoc} */\n     @Override\n-    public double getDistance(RealVector v) {\n+    public double getDistance(RealVector v) throws DimensionMismatchException {\n         if (v instanceof ArrayRealVector) {\n             final double[] vData = ((ArrayRealVector) v).data;\n             checkVectorDimensions(vData.length);\n \n     /** {@inheritDoc} */\n     @Override\n-    public double getL1Distance(RealVector v) {\n+    public double getL1Distance(RealVector v)\n+        throws DimensionMismatchException {\n         if (v instanceof ArrayRealVector) {\n             final double[] vData = ((ArrayRealVector) v).data;\n             checkVectorDimensions(vData.length);\n \n     /** {@inheritDoc} */\n     @Override\n-    public double getLInfDistance(RealVector v) {\n+    public double getLInfDistance(RealVector v)\n+        throws DimensionMismatchException {\n         if (v instanceof ArrayRealVector) {\n             final double[] vData = ((ArrayRealVector) v).data;\n             checkVectorDimensions(vData.length);\n \n     /** {@inheritDoc} */\n     @Override\n-    public double getEntry(int index) {\n+    public double getEntry(int index) throws OutOfRangeException {\n         try {\n             return data[index];\n         } catch (IndexOutOfBoundsException e) {\n \n     /** {@inheritDoc} */\n     @Override\n-    public RealVector getSubVector(int index, int n) {\n+    public RealVector getSubVector(int index, int n)\n+        throws OutOfRangeException, NotPositiveException {\n         if (n < 0) {\n             throw new NotPositiveException(LocalizedFormats.NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, n);\n         }\n \n     /** {@inheritDoc} */\n     @Override\n-    public void setEntry(int index, double value) {\n+    public void setEntry(int index, double value) throws OutOfRangeException {\n         try {\n             data[index] = value;\n         } catch (IndexOutOfBoundsException e) {\n \n     /** {@inheritDoc} */\n     @Override\n-    public void addToEntry(int index, double increment) {\n+    public void addToEntry(int index, double increment)\n+        throws OutOfRangeException {\n         try {\n         data[index] += increment;\n         } catch(IndexOutOfBoundsException e){\n \n     /** {@inheritDoc} */\n     @Override\n-    public void setSubVector(int index, RealVector v) {\n+    public void setSubVector(int index, RealVector v)\n+        throws OutOfRangeException {\n         if (v instanceof ArrayRealVector) {\n             setSubVector(index, ((ArrayRealVector) v).data);\n         } else {\n      *\n      * @param index Index of first element to be set.\n      * @param v Vector containing the values to set.\n-     * @throws org.apache.commons.math3.exception.OutOfRangeException\n-     * if the index is inconsistent with the vector size.\n-     */\n-    public void setSubVector(int index, double[] v) {\n+     * @throws OutOfRangeException if the index is inconsistent with the vector\n+     * size.\n+     */\n+    public void setSubVector(int index, double[] v)\n+        throws OutOfRangeException {\n         try {\n             System.arraycopy(v, 0, data, index, v.length);\n         } catch (IndexOutOfBoundsException e) {\n      * have the same dimension.\n      */\n     @Override\n-    protected void checkVectorDimensions(RealVector v) {\n+    protected void checkVectorDimensions(RealVector v)\n+        throws DimensionMismatchException {\n         checkVectorDimensions(v.getDimension());\n     }\n \n      * inconsistent with vector size.\n      */\n     @Override\n-    protected void checkVectorDimensions(int n) {\n+    protected void checkVectorDimensions(int n)\n+        throws DimensionMismatchException {\n         if (data.length != n) {\n             throw new DimensionMismatchException(data.length, n);\n         }\n \n     /** {@inheritDoc} */\n     @Override\n-    public ArrayRealVector combine(double a, double b, RealVector y) {\n+    public ArrayRealVector combine(double a, double b, RealVector y)\n+        throws DimensionMismatchException {\n         return copy().combineToSelf(a, b, y);\n     }\n \n     /** {@inheritDoc} */\n     @Override\n-    public ArrayRealVector combineToSelf(double a, double b, RealVector y) {\n+    public ArrayRealVector combineToSelf(double a, double b, RealVector y)\n+        throws DimensionMismatchException {\n         if (y instanceof ArrayRealVector) {\n             final double[] yData = ((ArrayRealVector) y).data;\n             checkVectorDimensions(yData.length);\n     /** {@inheritDoc} */\n     @Override\n     public double walkInDefaultOrder(final RealVectorPreservingVisitor visitor,\n-        final int start, final int end) {\n+        final int start, final int end) throws NumberIsTooSmallException,\n+        OutOfRangeException {\n         checkIndices(start, end);\n         visitor.start(data.length, start, end);\n         for (int i = start; i <= end; i++) {\n      */\n     @Override\n     public double walkInOptimizedOrder(final RealVectorPreservingVisitor visitor,\n-        final int start, final int end) {\n+        final int start, final int end) throws NumberIsTooSmallException,\n+        OutOfRangeException {\n         return walkInDefaultOrder(visitor, start, end);\n     }\n \n     /** {@inheritDoc} */\n     @Override\n     public double walkInDefaultOrder(final RealVectorChangingVisitor visitor,\n-        final int start, final int end) {\n+        final int start, final int end) throws NumberIsTooSmallException,\n+        OutOfRangeException {\n         checkIndices(start, end);\n         visitor.start(data.length, start, end);\n         for (int i = start; i <= end; i++) {\n      */\n     @Override\n     public double walkInOptimizedOrder(final RealVectorChangingVisitor visitor,\n-        final int start, final int end) {\n+        final int start, final int end) throws NumberIsTooSmallException,\n+        OutOfRangeException {\n         return walkInDefaultOrder(visitor, start, end);\n     }\n }", "timestamp": 1346731809, "metainfo": ""}