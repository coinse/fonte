{"sha": "0ea2f11caba4c50ecb740a35337f1e16cd625e69", "log": "Added some unit tests for descriptive statistics.  Fixed bug dealing with resizing to infinite window size.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/univariate/AbstractDescriptiveStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/AbstractDescriptiveStatistics.java\n /**\n  * Abstract superclass for DescriptiveStatistics implementations. \n  * \n- * @version $Revision: 1.1 $ $Date: 2004/04/12 02:27:49 $\n+ * @version $Revision: 1.2 $ $Date: 2004/05/03 14:32:25 $\n  */\n public abstract class AbstractDescriptiveStatistics\n     extends DescriptiveStatistics {\n     /**\n      * Create an AbstractDescriptiveStatistics\n      */\n-    public AbstractDescriptiveStatistics() {\n-    }\n-\n-    /**\n-     * Create an AbstractDescriptiveStatistics with a specific Window\n-     * @param window WindowSIze for stat calculation\n-     */\n-    public AbstractDescriptiveStatistics(int window)  {\n-    \tsetWindowSize(window);\n+    protected AbstractDescriptiveStatistics() {\n+        super();\n     }\n \n     /**\n--- a/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatistics.java\n /**\n  * Abstract factory class for univariate statistical summaries.\n  * \n- * @version $Revision: 1.2 $ $Date: 2004/04/23 19:50:27 $\n+ * @version $Revision: 1.3 $ $Date: 2004/05/03 14:32:25 $\n  */\n public abstract class DescriptiveStatistics implements Serializable, StatisticalSummary {\n \n \t\t\t\tDescriptiveStatistics.class,\n \t\t\t\t\"org.apache.commons.math.stat.univariate.DescriptiveStatisticsImpl\");\n \t\t} catch(Exception ex) {\n+            ex.printStackTrace();\n \t\t\t// ignore as default implementation will be used.\n \t\t}\n \t\treturn factory;\n--- a/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java\n  * Default implementation of\n  * {@link org.apache.commons.math.stat.univariate.DescriptiveStatistics}.\n  * \n- * @version $Revision: 1.3 $ $Date: 2004/04/26 19:15:48 $\n+ * @version $Revision: 1.4 $ $Date: 2004/05/03 14:32:25 $\n  */\n public class DescriptiveStatisticsImpl extends AbstractDescriptiveStatistics implements Serializable {\n \n \t/** hold the window size **/\n-\tprotected int windowSize = INFINITE_WINDOW;\n+\tprotected int windowSize;\n     \n     /** \n      *  Stored data values\n      * Construct a DescriptiveStatisticsImpl with infinite window\n      */\n     public DescriptiveStatisticsImpl() {\n-    \tsuper();\n-        eDA = new ContractableDoubleArray();\n+    \tthis(INFINITE_WINDOW);\n     }\n     \n     /**\n      * @param window the finite window size.\n      */\n     public DescriptiveStatisticsImpl(int window) {\n-    \tsuper(window);\n+    \tsuper();\n     \teDA = new ContractableDoubleArray();\n+        setWindowSize(window);\n     }\n \n     /**\n     }\n     \n     /**\n-     * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#getSortedValues()\n-     */\n-    public double[] getSortedValues() {\n-    \tdouble[] sort = getValues();\n-    \tArrays.sort(sort);\n-    \treturn sort;\n-    }\n-\n-    /**\n      * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#getElement(int)\n      */\n     public double getElement(int index) {\n     /**\n      * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#addValue(double)\n      */\n-    public synchronized void addValue(double v) {\n+    public void addValue(double v) {\n         if (windowSize != INFINITE_WINDOW) {\n             if (getN() == windowSize) {\n                 eDA.addElementRolling(v);\n             } else if (getN() < windowSize) {\n                 eDA.addElement(v);\n-            } else {\n-                String msg =\n-                    \"A window Univariate had more element than \" +\n-                    \"the windowSize.  This is an inconsistent state.\";\n-                throw new RuntimeException(msg);\n             }\n         } else {\n             eDA.addElement(v);\n     /**\n      * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#clear()\n      */\n-    public synchronized void clear() {\n+    public void clear() {\n         eDA.clear();\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#setWindowSize(int)\n      */\n-    public synchronized void setWindowSize(int windowSize) {\n+    public void setWindowSize(int windowSize) {\n+        if (windowSize < 1) {\n+            if (windowSize != INFINITE_WINDOW) {\n+                throw new IllegalArgumentException(\"window size must be positive.\");\n+            }\n+        }\n+        \n         this.windowSize = windowSize;\n \n         // We need to check to see if we need to discard elements\n         // from the front of the array.  If the windowSize is less than \n         // the current number of elements.\n-        if (windowSize < eDA.getNumElements()) {\n+        if (windowSize != INFINITE_WINDOW && windowSize < eDA.getNumElements()) {\n             eDA.discardFrontElements(eDA.getNumElements() - windowSize);\n         }\n     }\n      * @return the computed value of the statistic.\n      */\n     public double apply(UnivariateStatistic stat) {\n-        if (eDA != null) {\n-            return stat.evaluate(eDA.getValues(), eDA.start(), eDA.getNumElements());\n-        }\n-        return Double.NaN;\n+        return stat.evaluate(eDA.getValues(), eDA.start(), eDA.getNumElements());\n     }\n-}\n+}\n--- a/src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java\n+++ b/src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.apache.commons.math.MathException;\n import org.apache.commons.math.TestUtils;\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.analysis.UnivariateRealSolverFactory;\n+import org.apache.commons.math.analysis.UnivariateRealSolverUtils;\n import org.apache.commons.math.random.RandomData;\n import org.apache.commons.math.random.RandomDataImpl;\n \n /**\n  * Test cases for the {@link Univariate} class.\n  *\n- * @version $Revision: 1.2 $ $Date: 2004/04/27 16:42:32 $\n+ * @version $Revision: 1.3 $ $Date: 2004/05/03 14:32:25 $\n  */\n \n public final class DescriptiveStatisticsTest extends TestCase {\n         }\n         \n     }\n+    \n     public void testNewInstanceStringValid() {\n         try {\n             DescriptiveStatistics u = DescriptiveStatistics.newInstance(\n         }\n         \n     }\n+    \n     public void testNewInstanceClassValid() {\n         try {\n             DescriptiveStatistics u = DescriptiveStatistics.newInstance(\n             fail();\n         }\n     }\n+    \n+    public void testWindowSize() {\n+        DescriptiveStatistics u = DescriptiveStatistics.newInstance();\n+        u.setWindowSize(1234);\n+        assertEquals(1234, u.getWindowSize());\n+        \n+        u.addValue(1.0);\n+        u.addValue(2.0);\n+        u.addValue(3.0);\n+        u.addValue(4.0);\n+        u.addValue(5.0);\n+        assertEquals(5, u.getN());\n+        \n+        u.setWindowSize(DescriptiveStatistics.INFINITE_WINDOW);\n+        assertEquals(5, u.getN());\n+    }\n+    \n+    public void testWindowing() {\n+        DescriptiveStatistics u = DescriptiveStatistics.newInstance();\n+        u.setWindowSize(2);\n+        \n+        u.addValue(1.0);\n+        assertEquals(1.0, u.getMean(), tolerance);\n+        \n+        u.addValue(2.0);\n+        assertEquals(1.5, u.getMean(), tolerance);\n+        \n+        u.addValue(3.0);\n+        assertEquals(2.5, u.getMean(), tolerance);\n+        \n+        u.setWindowSize(1);\n+        assertEquals(3.0, u.getMean(), tolerance);\n+    }\n+    \n+    public void testGetKurtosis() throws MathException {\n+        UnivariateRealFunction f = new UnivariateRealFunction() {\n+            public double value(double x) throws MathException {\n+                DescriptiveStatistics u = DescriptiveStatistics.newInstance();\n+                u.setWindowSize(5);\n+                \n+                u.addValue(1.0);\n+                u.addValue(1.5);\n+                u.addValue(x);\n+                u.addValue(1.5);\n+                u.addValue(1.0);\n+                \n+                return u.getKurtosis();\n+            }\n+        };\n+        \n+        assertEquals(0.0, UnivariateRealSolverUtils.solve(f, 2.0, 2.5), 1.0e-5);\n+    }\n+    \n+    public void testKurtosisClass() {\n+        DescriptiveStatistics u = DescriptiveStatistics.newInstance();\n+        u.setWindowSize(5);\n+        \n+        u.addValue(1.0);\n+        u.addValue(1.0);\n+        u.addValue(2.0);\n+        u.addValue(1.0);\n+        u.addValue(1.0);\n+        assertEquals(DescriptiveStatistics.LEPTOKURTIC, u.getKurtosisClass());\n+        \n+        u.addValue(1.0);\n+        u.addValue(2.0);\n+        u.addValue(2.0);\n+        u.addValue(2.0);\n+        u.addValue(1.0);\n+        assertEquals(DescriptiveStatistics.PLATYKURTIC, u.getKurtosisClass());\n+//        \n+//        u.addValue(1.0);\n+//        u.addValue(1.5);\n+//        u.addValue(2.0912994180548905);\n+//        u.addValue(1.5);\n+//        u.addValue(1.0);\n+//        assertEquals(DescriptiveStatistics.MESOKURTIC, u.getKurtosisClass());\n+    }\n }\n ", "timestamp": 1083594745, "metainfo": ""}