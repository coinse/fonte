{"sha": "bd88f845cba1ec04c66d83c2f6e925b705b26b22", "log": "Fix id tags and svn:keywords in analysis package.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java\n  * @param <T> Type of the number used to represent the points and weights of\n  * the quadrature rules.\n  *\n+ * @since 3.1\n  * @version $Id$\n- * @since 3.1\n  */\n public abstract class BaseRuleFactory<T extends Number> {\n     /** List of points and weights, indexed by the order of the rule. */\n--- a/src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java\n  * {@link #integrate(UnivariateFunction) integrating} a weighted\n  * function.\n  *\n+ * @since 3.1\n  * @version $Id$\n- * @since 3.1\n  */\n public class GaussIntegrator {\n     /** Nodes. */\n--- a/src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java\n  * Class that provides different ways to compute the nodes and weights to be\n  * used by the {@link GaussIntegrator Gaussian integration rule}.\n  *\n+ * @since 3.1\n  * @version $Id$\n- * @since 3.1\n  */\n public class GaussIntegratorFactory {\n     /** Generator of Gauss-Legendre integrators. */\n--- a/src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java\n  * presented in <a href=\"http://en.wikipedia.org/wiki/Abramowitz_and_Stegun\"\n  * Abramowitz and Stegun, 1964</a>.\n  *\n+ * @since 3.1\n  * @version $Id$\n- * @since 3.1\n  */\n public class LegendreHighPrecisionRuleFactory extends BaseRuleFactory<BigDecimal> {\n     /** Settings for enhanced precision computations. */\n--- a/src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java\n  * presented in <a href=\"http://en.wikipedia.org/wiki/Abramowitz_and_Stegun\"\n  * Abramowitz and Stegun, 1964</a>.\n  *\n+ * @since 3.1\n  * @version $Id$\n- * @since 3.1\n  */\n public class LegendreRuleFactory extends BaseRuleFactory<Double> {\n     /**\n--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolatingFunction.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolatingFunction.java\n  * <a href=\"http://en.wikipedia.org/wiki/Bicubic_interpolation\">\n  * bicubic spline interpolation</a>.\n  *\n+ * @since 2.1\n  * @version $Id$\n- * @since 2.1\n  */\n public class BicubicSplineInterpolatingFunction\n     implements BivariateFunction {\n--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java\n  * also distributed under the terms of the Apache License V2. Original copyright\n  * is: Copyright 2002-2012 CS Syst\u00e8mes d'Information.\n  * </p>\n+ *\n  * @version $Id$\n  * @since 3.1\n  */\n--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/LinearInterpolator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/LinearInterpolator.java\n \n /**\n  * Implements a linear function for interpolation of real univariate functions.\n+ *\n  * @version $Id$\n  */\n public class LinearInterpolator implements UnivariateInterpolator {\n--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/MicrosphereInterpolator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/MicrosphereInterpolator.java\n  * Interpolator that implements the algorithm described in\n  * <em>William Dudziak</em>'s\n  * <a href=\"http://www.dudziak.com/microsphere.pdf\">MS thesis</a>.\n+ *\n  * @since 2.1\n- *\n  * @version $Id$\n  */\n public class MicrosphereInterpolator\n--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/SplineInterpolator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/SplineInterpolator.java\n  * </p>\n  *\n  * @version $Id$\n- *\n  */\n public class SplineInterpolator implements UnivariateInterpolator {\n \n--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/TricubicSplineInterpolatingFunction.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/TricubicSplineInterpolatingFunction.java\n  *  <em>Int. J. Numer. Meth. Engng</em> 2005; <b>63</b>:455-471\n  * </quote>\n  *\n+ * @since 2.2\n  * @version $Id$\n- * @since 2.2\n  */\n public class TricubicSplineInterpolatingFunction\n     implements TrivariateFunction {\n--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/TricubicSplineInterpolator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/TricubicSplineInterpolator.java\n /**\n  * Generates a tricubic interpolating function.\n  *\n+ * @since 2.2\n  * @version $Id$\n- * @since 2.2\n  */\n public class TricubicSplineInterpolator\n     implements TrivariateGridInterpolator {\n--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/TrivariateGridInterpolator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/TrivariateGridInterpolator.java\n  * Interface representing a trivariate real interpolating function where the\n  * sample points must be specified on a regular grid.\n  *\n+ * @since 2.2\n  * @version $Id$\n- * @since 2.2\n  */\n public interface TrivariateGridInterpolator {\n     /**\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/AbstractDifferentiableUnivariateSolver.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/AbstractDifferentiableUnivariateSolver.java\n  * Provide a default implementation for several functions useful to generic\n  * solvers.\n  *\n+ * @since 3.0\n  * @version $Id$\n- * @since 3.0\n  */\n public abstract class AbstractDifferentiableUnivariateSolver\n     extends BaseAbstractUnivariateSolver<DifferentiableUnivariateFunction>\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/AbstractPolynomialSolver.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/AbstractPolynomialSolver.java\n /**\n  * Base class for solvers.\n  *\n+ * @since 3.0\n  * @version $Id$\n- * @since 3.0\n  */\n public abstract class AbstractPolynomialSolver\n     extends BaseAbstractUnivariateSolver<PolynomialFunction>\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver.java\n /**\n  * Base class for solvers.\n  *\n+ * @since 3.0\n  * @version $Id$\n- * @since 3.0\n  */\n public abstract class AbstractUnivariateSolver\n     extends BaseAbstractUnivariateSolver<UnivariateFunction>\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver.java\n  *\n  * @param <FUNC> Type of function to solve.\n  *\n+ * @since 2.0\n  * @version $Id$\n- * @since 2.0\n  */\n public abstract class BaseAbstractUnivariateSolver<FUNC extends UnivariateFunction>\n     implements BaseUnivariateSolver<FUNC> {\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/BaseUnivariateSolver.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/BaseUnivariateSolver.java\n  * DifferentiableUnivariateSolver}.\n  * @param <FUNC> Type of function to solve.\n  *\n+ * @since 3.0\n  * @version $Id$\n- * @since 3.0\n  * @see UnivariateSolver\n  * @see PolynomialSolver\n  * @see DifferentiableUnivariateSolver\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/PolynomialSolver.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/PolynomialSolver.java\n  * Interface for (polynomial) root-finding algorithms.\n  * Implementations will search for only one zero in the given interval.\n  *\n+ * @since 3.0\n  * @version $Id$\n- * @since 3.0\n  */\n public interface PolynomialSolver\n     extends BaseUnivariateSolver<PolynomialFunction> {}", "timestamp": 1342980851, "metainfo": ""}