{"sha": "2bfd2cc7db199cd6c5e8958e1712a45171eb09ff", "log": "MATH-738: New implementation of Beta.logBeta(double, double), based on the NSWC library of mathematical functions.   - increased accuracy   - deprecation of Beta.logBeta(double, double, double, int) as the new     implementation is no longer iterative.   - some private methods are tested through reflection.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/special/Beta.java\n+++ b/src/main/java/org/apache/commons/math3/special/Beta.java\n  */\n package org.apache.commons.math3.special;\n \n+import org.apache.commons.math3.exception.NumberIsTooSmallException;\n+import org.apache.commons.math3.exception.OutOfRangeException;\n import org.apache.commons.math3.util.ContinuedFraction;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n+ * <p>\n  * This is a utility class that provides computation methods related to the\n  * Beta family of functions.\n+ * </p>\n+ * <p>\n+ * Implementation of {@link #logBeta(double, double)} is based on the\n+ * algorithms described in\n+ * <ul>\n+ * <li><a href=\"http://dx.doi.org/10.1145/22721.23109\">Didonato and Morris\n+ *     (1986)</a>, <em>Computation of the Incomplete Gamma Function Ratios\n+ *     and their Inverse</em>, TOMS 12(4), 377-393,</li>\n+ * <li><a href=\"http://dx.doi.org/10.1145/131766.131776\">Didonato and Morris\n+ *     (1992)</a>, <em>Algorithm 708: Significant Digit Computation of the\n+ *     Incomplete Beta Function Ratios</em>, TOMS 18(3), 360-373,</li>\n+ * </ul>\n+ * and implemented in the\n+ * <a href=\"http://www.dtic.mil/docs/citations/ADA476840\">NSWC Library of Mathematical Functions</a>,\n+ * available\n+ * <a href=\"http://www.ualberta.ca/CNS/RESEARCH/Software/NumericalNSWC/site.html\">here</a>.\n+ * This library is \"approved for public release\", and the\n+ * <a href=\"http://www.dtic.mil/dtic/pdf/announcements/CopyrightGuidance.pdf\">Copyright guidance</a>\n+ * indicates that unless otherwise stated in the code, all FORTRAN functions in\n+ * this library are license free. Since no such notice appears in the code these\n+ * functions can safely be ported to Commons-Math.\n+ * </p>\n+ *\n  *\n  * @version $Id$\n  */\n public class Beta {\n     /** Maximum allowed numerical error. */\n     private static final double DEFAULT_EPSILON = 1E-14;\n+\n+    /** The constant value of \u00bdlog 2\u03c0. */\n+    private static final double HALF_LOG_TWO_PI = .9189385332046727;\n+\n+    /**\n+     * <p>\n+     * The coefficients of the series expansion of the \u0394 function. This function\n+     * is defined as follows\n+     * </p>\n+     * <center>\u0394(x) = log \u0393(x) - (x - 0.5) log a + a - 0.5 log 2\u03c0,</center>\n+     * <p>\n+     * see equation (23) in Didonato and Morris (1992). The series expansion,\n+     * which applies for x \u2265 10, reads\n+     * </p>\n+     * <pre>\n+     *                 14\n+     *                ====\n+     *             1  \\                2 n\n+     *     \u0394(x) = ---  >    d  (10 / x)\n+     *             x  /      n\n+     *                ====\n+     *                n = 0\n+     * <pre>\n+     */\n+    private static final double[] DELTA = {\n+        .833333333333333333333333333333E-01,\n+        -.277777777777777777777777752282E-04,\n+        .793650793650793650791732130419E-07,\n+        -.595238095238095232389839236182E-09,\n+        .841750841750832853294451671990E-11,\n+        -.191752691751854612334149171243E-12,\n+        .641025640510325475730918472625E-14,\n+        -.295506514125338232839867823991E-15,\n+        .179643716359402238723287696452E-16,\n+        -.139228964661627791231203060395E-17,\n+        .133802855014020915603275339093E-18,\n+        -.154246009867966094273710216533E-19,\n+        .197701992980957427278370133333E-20,\n+        -.234065664793997056856992426667E-21,\n+        .171348014966398575409015466667E-22\n+    };\n \n     /**\n      * Default constructor.  Prohibit instantiation.\n     /**\n      * Returns the natural logarithm of the beta function B(a, b).\n      *\n-     * @param a Parameter {@code a}.\n-     * @param b Parameter {@code b}.\n-     * @return log(B(a, b)).\n-     */\n-    public static double logBeta(double a, double b) {\n-        return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n-    }\n-\n-    /**\n-     * Returns the natural logarithm of the beta function B(a, b).\n-     *\n      * The implementation of this method is based on:\n      * <ul>\n      * <li><a href=\"http://mathworld.wolfram.com/BetaFunction.html\">\n      *\n      * @param a Parameter {@code a}.\n      * @param b Parameter {@code b}.\n-     * @param epsilon When the absolute value of the nth item in the\n-     * series is less than epsilon the approximation ceases to calculate\n-     * further elements in the series.\n-     * @param maxIterations Maximum number of \"iterations\" to complete.\n+     * @param epsilon This parameter is ignored.\n+     * @param maxIterations This parameter is ignored.\n      * @return log(B(a, b)).\n-     */\n+     * @deprecated as of version 3.1, this method is deprecated as the\n+     * computation of the beta function is no longer iterative. This method\n+     * internally calls {@link #logBeta(double, double)}.\n+     */\n+    @Deprecated\n     public static double logBeta(double a, double b,\n                                  double epsilon,\n                                  int maxIterations) {\n-        double ret;\n-\n-        if (Double.isNaN(a) ||\n-            Double.isNaN(b) ||\n-            a <= 0.0 ||\n-            b <= 0.0) {\n-            ret = Double.NaN;\n+\n+        return logBeta(a, b);\n+    }\n+\n+\n+    /**\n+     * Returns the value of log \u0393(a + b) for 1 \u2264 a, b \u2264 2. Based on the\n+     * <em>NSWC Library of Mathematics Subroutines</em> double precision\n+     * implementation, {@code DGSMLN}.\n+     *\n+     * @param a First argument.\n+     * @param b Second argument.\n+     * @return the value of {@code log(Gamma(a + b))}.\n+     * @throws OutOfRangeException if {@code a} or {@code b} is lower than\n+     * {@code 1.0} or greater than {@code 2.0}.\n+     */\n+    private static double logGammaSum(final double a, final double b)\n+        throws OutOfRangeException {\n+\n+        if ((a < 1.0) || (a > 2.0)) {\n+            throw new OutOfRangeException(a, 1.0, 2.0);\n+        }\n+        if ((b < 1.0) || (b > 2.0)) {\n+            throw new OutOfRangeException(b, 1.0, 2.0);\n+        }\n+\n+        final double x = (a - 1.0) + (b - 1.0);\n+        if (x <= 0.5) {\n+            return Gamma.logGamma1p(1.0 + x);\n+        } else if (x <= 1.5) {\n+            return Gamma.logGamma1p(x) + FastMath.log1p(x);\n         } else {\n-            ret = Gamma.logGamma(a) + Gamma.logGamma(b) -\n-                Gamma.logGamma(a + b);\n-        }\n-\n-        return ret;\n+            return Gamma.logGamma1p(x - 1.0) + FastMath.log(x * (1.0 + x));\n+        }\n+    }\n+\n+    /**\n+     * Returns the value of log[\u0393(b) / \u0393(a + b)] for a \u2265 0 and b \u2265 10. Based on\n+     * the <em>NSWC Library of Mathematics Subroutines</em> double precision\n+     * implementation, {@code DLGDIV}.\n+     *\n+     * @param a First argument.\n+     * @param b Second argument.\n+     * @return the value of {@code log(Gamma(b) / Gamma(a + b))}.\n+     * @throws NumberIsTooSmallException if {@code a < 0.0} or {@code b < 10.0}.\n+     */\n+    private static double logGammaMinusLogGammaSum(final double a,\n+                                                   final double b)\n+        throws NumberIsTooSmallException {\n+\n+        if (a < 0.0) {\n+            throw new NumberIsTooSmallException(a, 0.0, true);\n+        }\n+        if (b < 10.0) {\n+            throw new NumberIsTooSmallException(b, 10.0, true);\n+        }\n+\n+        /*\n+         * p = a / (a + b), q = b / (a + b), d = a + b - 0.5\n+         */\n+        final double p;\n+        final double q;\n+        final double d;\n+        final double w;\n+        if (a <= b) {\n+            d = b + (a - 0.5);\n+            w = deltaMinusDeltaSum(a, b);\n+        } else {\n+            d = a + (b - 0.5);\n+            w = deltaMinusDeltaSum(b, a);\n+        }\n+\n+        final double u = d * FastMath.log1p(a / b);\n+        final double v = a * (FastMath.log(b) - 1.0);\n+\n+        return u <= v ? (w - u) - v : (w - v) - u;\n+    }\n+\n+    /**\n+     * Returns the value of \u0394(b) - \u0394(a + b), with 0 \u2264 a \u2264 b and b \u2265 10. Based\n+     * on equations (26), (27) and (28) in Didonato and Morris (1992).\n+     *\n+     * @param a First argument.\n+     * @param b Second argument.\n+     * @return the value of {@code Delta(b) - Delta(a + b)}\n+     * @throws OutOfRangeException if {@code a < 0} or {@code a > b}\n+     * @throws NumberIsTooSmallException if {@code b < 10}\n+     */\n+    private static double deltaMinusDeltaSum(final double a,\n+                                             final double b)\n+        throws OutOfRangeException, NumberIsTooSmallException {\n+\n+        if ((a < 0) || (a > b)) {\n+            throw new OutOfRangeException(a, 0, b);\n+        }\n+        if (b < 10) {\n+            throw new NumberIsTooSmallException(b, 10, true);\n+        }\n+\n+        final double h = a / b;\n+        final double p = h / (1.0 + h);\n+        final double q = 1.0 / (1.0 + h);\n+        final double q2 = q * q;\n+        /*\n+         * s[i] = 1 + q + ... - q**(2 * i)\n+         */\n+        final double[] s = new double[DELTA.length];\n+        s[0] = 1.0;\n+        for (int i = 1; i < s.length; i++) {\n+            s[i] = 1.0 + (q + q2 * s[i - 1]);\n+        }\n+        /*\n+         * w = Delta(b) - Delta(a + b)\n+         */\n+        final double sqrtT = 10.0 / b;\n+        final double t = sqrtT * sqrtT;\n+        double w = DELTA[DELTA.length - 1] * s[s.length - 1];\n+        for (int i = DELTA.length - 2; i >= 0; i--) {\n+            w = t * w + DELTA[i] * s[i];\n+        }\n+        return w * p / b;\n+    }\n+\n+    /**\n+     * Returns the value of \u0394(p) + \u0394(q) - \u0394(p + q), with p, q \u2265 10. Based on\n+     * the <em>NSWC Library of Mathematics Subroutines</em> double precision\n+     * implementation, {@code DBCORR}.\n+     *\n+     * @param p First argument.\n+     * @param q Second argument.\n+     * @return the value of {@code Delta(p) + Delta(q) - Delta(p + q)}.\n+     * @throws NumberIsTooSmallException if {@code p < 10.0} or {@code q < 10.0}.\n+     */\n+    private static double sumDeltaMinusDeltaSum(final double p,\n+                                                final double q) {\n+\n+        if (p < 10.0) {\n+            throw new NumberIsTooSmallException(p, 10.0, true);\n+        }\n+        if (q < 10.0) {\n+            throw new NumberIsTooSmallException(q, 10.0, true);\n+        }\n+\n+        final double a = FastMath.min(p, q);\n+        final double b = FastMath.max(p, q);\n+        final double sqrtT = 10.0 / a;\n+        final double t = sqrtT * sqrtT;\n+        double z = DELTA[DELTA.length - 1];\n+        for (int i = DELTA.length - 2; i >= 0; i--) {\n+            z = t * z + DELTA[i];\n+        }\n+        return z / a + deltaMinusDeltaSum(a, b);\n+    }\n+\n+    /**\n+     * Returns the value of log B(p, q) for 0 \u2264 x \u2264 1 and p, q > 0. Based on the\n+     * <em>NSWC Library of Mathematics Subroutines</em> implementation,\n+     * {@code DBETLN}.\n+     *\n+     * @param p First argument.\n+     * @param q Second argument.\n+     * @return the value of {@code log(Beta(p, q))}, {@code NaN} if\n+     * {@code p <= 0} or {@code q <= 0}.\n+     */\n+    public static final double logBeta(final double p, final double q) {\n+\n+        if (Double.isNaN(p) || Double.isNaN(q) || (p <= 0.0) || (q <= 0.0)) {\n+            return Double.NaN;\n+        }\n+\n+        final double a = FastMath.min(p, q);\n+        final double b = FastMath.max(p, q);\n+        if (a >= 10.0) {\n+            final double w = sumDeltaMinusDeltaSum(a, b);\n+            final double h = a / b;\n+            final double c = h / (1.0 + h);\n+            final double u = -(a - 0.5) * FastMath.log(c);\n+            final double v = b * FastMath.log1p(h);\n+            if (u <= v) {\n+                return (((-0.5 * FastMath.log(b) + HALF_LOG_TWO_PI) + w) - u) - v;\n+            } else {\n+                return (((-0.5 * FastMath.log(b) + HALF_LOG_TWO_PI) + w) - v) - u;\n+            }\n+        } else if (a > 2.0) {\n+            if (b > 1000.0) {\n+                final int n = (int) FastMath.floor(a - 1.0);\n+                double prod = 1.0;\n+                double ared = a;\n+                for (int i = 0; i < n; i++) {\n+                    ared -= 1.0;\n+                    prod *= ared / (1.0 + ared / b);\n+                }\n+                return (FastMath.log(prod) - n * FastMath.log(b)) +\n+                        (Gamma.logGamma(ared) +\n+                         logGammaMinusLogGammaSum(ared, b));\n+            } else {\n+                double prod1 = 1.0;\n+                double ared = a;\n+                while (ared > 2.0) {\n+                    ared -= 1.0;\n+                    final double h = ared / b;\n+                    prod1 *= h / (1.0 + h);\n+                }\n+                if (b < 10.0) {\n+                    double prod2 = 1.0;\n+                    double bred = b;\n+                    while (bred > 2.0) {\n+                        bred -= 1.0;\n+                        prod2 *= bred / (ared + bred);\n+                    }\n+                    return FastMath.log(prod1) +\n+                           FastMath.log(prod2) +\n+                           (Gamma.logGamma(ared) +\n+                           (Gamma.logGamma(bred) -\n+                            logGammaSum(ared, bred)));\n+                } else {\n+                    return FastMath.log(prod1) +\n+                           Gamma.logGamma(ared) +\n+                           logGammaMinusLogGammaSum(ared, b);\n+                }\n+            }\n+        } else if (a >= 1.0) {\n+            if (b > 2.0) {\n+                if (b < 10.0) {\n+                    double prod = 1.0;\n+                    double bred = b;\n+                    while (bred > 2.0) {\n+                        bred -= 1.0;\n+                        prod *= bred / (a + bred);\n+                    }\n+                    return FastMath.log(prod) +\n+                           (Gamma.logGamma(a) +\n+                            (Gamma.logGamma(bred) -\n+                             logGammaSum(a, bred)));\n+                } else {\n+                    return Gamma.logGamma(a) +\n+                           logGammaMinusLogGammaSum(a, b);\n+                }\n+            } else {\n+                return Gamma.logGamma(a) +\n+                       Gamma.logGamma(b) -\n+                       logGammaSum(a, b);\n+            }\n+        } else {\n+            if (b >= 10.0) {\n+                return Gamma.logGamma(a) +\n+                       logGammaMinusLogGammaSum(a, b);\n+            } else {\n+                // The following command is the original NSWC implementation.\n+                // return Gamma.logGamma(a) +\n+                // (Gamma.logGamma(b) - Gamma.logGamma(a + b));\n+                // The following command turns out to be more accurate.\n+                return FastMath.log(Gamma.gamma(a) * Gamma.gamma(b) /\n+                                    Gamma.gamma(a + b));\n+            }\n+        }\n     }\n }\n--- a/src/test/java/org/apache/commons/math3/special/BetaTest.java\n+++ b/src/test/java/org/apache/commons/math3/special/BetaTest.java\n  */\n package org.apache.commons.math3.special;\n \n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n import org.apache.commons.math3.TestUtils;\n+import org.apache.commons.math3.exception.MathIllegalArgumentException;\n+import org.apache.commons.math3.exception.NumberIsTooSmallException;\n+import org.apache.commons.math3.exception.OutOfRangeException;\n+import org.apache.commons.math3.util.FastMath;\n+import org.junit.Assert;\n import org.junit.Test;\n \n /**\n  * @version $Id$\n  */\n public class BetaTest {\n+\n+    /*\n+     * Use reflection to test private methods.\n+     */\n+    private static final Method LOG_GAMMA_SUM_METHOD;\n+\n+    private static final Method LOG_GAMMA_MINUS_LOG_GAMMA_SUM_METHOD;\n+\n+    private static final Method SUM_DELTA_MINUS_DELTA_SUM_METHOD;\n+\n+    static {\n+        final Class<Beta> b;\n+        final Class<Double> d = Double.TYPE;\n+        b = Beta.class;\n+        Method m = null;\n+        try {\n+            m = b.getDeclaredMethod(\"logGammaSum\", d, d);\n+        } catch (NoSuchMethodException e) {\n+            Assert.fail(e.getMessage());\n+        }\n+        LOG_GAMMA_SUM_METHOD = m;\n+        LOG_GAMMA_SUM_METHOD.setAccessible(true);\n+\n+        m = null;\n+        try {\n+            m = b.getDeclaredMethod(\"logGammaMinusLogGammaSum\",d, d);\n+        } catch (NoSuchMethodException e) {\n+            Assert.fail(e.getMessage());\n+        }\n+        LOG_GAMMA_MINUS_LOG_GAMMA_SUM_METHOD = m;\n+        LOG_GAMMA_MINUS_LOG_GAMMA_SUM_METHOD.setAccessible(true);\n+\n+        m = null;\n+        try {\n+            m = b.getDeclaredMethod(\"sumDeltaMinusDeltaSum\",d, d);\n+        } catch (NoSuchMethodException e) {\n+            Assert.fail(e.getMessage());\n+        }\n+        SUM_DELTA_MINUS_DELTA_SUM_METHOD = m;\n+        SUM_DELTA_MINUS_DELTA_SUM_METHOD.setAccessible(true);\n+    }\n+\n     private void testRegularizedBeta(double expected, double x,\n                                      double a, double b) {\n         double actual = Beta.regularizedBeta(x, a, b);\n     public void testLogBetaPositivePositive() {\n         testLogBeta(-0.693147180559945, 1.0, 2.0);\n     }\n-}\n+\n+    /**\n+     * Reference data for the {@link Gamma#logGammaSum(double, double)}\n+     * function. This data was generated with the following\n+     * <a href=\"http://maxima.sourceforge.net/\">Maxima</a> script.\n+     *\n+     * <pre>\n+     * kill(all);\n+     *\n+     * fpprec : 64;\n+     * gsumln(a, b) := log(gamma(a + b));\n+     *\n+     * x : [1.0b0, 1.125b0, 1.25b0, 1.375b0, 1.5b0, 1.625b0, 1.75b0, 1.875b0, 2.0b0];\n+     *\n+     * for i : 1 while i <= length(x) do\n+     *   for j : 1 while j <= length(x) do block(\n+     *     a : x[i],\n+     *     b : x[j],\n+     *     print(\"{\", float(a), \",\", float(b), \",\", float(gsumln(a, b)), \"},\")\n+     *   );\n+     * </pre>\n+     */\n+    private static final double[][] LOG_GAMMA_SUM_REF = {\n+        { 1.0 , 1.0 , 0.0 },\n+        { 1.0 , 1.125 , .05775985153034387 },\n+        { 1.0 , 1.25 , .1248717148923966 },\n+        { 1.0 , 1.375 , .2006984603774558 },\n+        { 1.0 , 1.5 , .2846828704729192 },\n+        { 1.0 , 1.625 , .3763336820249054 },\n+        { 1.0 , 1.75 , .4752146669149371 },\n+        { 1.0 , 1.875 , .5809359740231859 },\n+        { 1.0 , 2.0 , .6931471805599453 },\n+        { 1.125 , 1.0 , .05775985153034387 },\n+        { 1.125 , 1.125 , .1248717148923966 },\n+        { 1.125 , 1.25 , .2006984603774558 },\n+        { 1.125 , 1.375 , .2846828704729192 },\n+        { 1.125 , 1.5 , .3763336820249054 },\n+        { 1.125 , 1.625 , .4752146669149371 },\n+        { 1.125 , 1.75 , .5809359740231859 },\n+        { 1.125 , 1.875 , .6931471805599453 },\n+        { 1.125 , 2.0 , 0.811531653906724 },\n+        { 1.25 , 1.0 , .1248717148923966 },\n+        { 1.25 , 1.125 , .2006984603774558 },\n+        { 1.25 , 1.25 , .2846828704729192 },\n+        { 1.25 , 1.375 , .3763336820249054 },\n+        { 1.25 , 1.5 , .4752146669149371 },\n+        { 1.25 , 1.625 , .5809359740231859 },\n+        { 1.25 , 1.75 , .6931471805599453 },\n+        { 1.25 , 1.875 , 0.811531653906724 },\n+        { 1.25 , 2.0 , .9358019311087253 },\n+        { 1.375 , 1.0 , .2006984603774558 },\n+        { 1.375 , 1.125 , .2846828704729192 },\n+        { 1.375 , 1.25 , .3763336820249054 },\n+        { 1.375 , 1.375 , .4752146669149371 },\n+        { 1.375 , 1.5 , .5809359740231859 },\n+        { 1.375 , 1.625 , .6931471805599453 },\n+        { 1.375 , 1.75 , 0.811531653906724 },\n+        { 1.375 , 1.875 , .9358019311087253 },\n+        { 1.375 , 2.0 , 1.06569589786406 },\n+        { 1.5 , 1.0 , .2846828704729192 },\n+        { 1.5 , 1.125 , .3763336820249054 },\n+        { 1.5 , 1.25 , .4752146669149371 },\n+        { 1.5 , 1.375 , .5809359740231859 },\n+        { 1.5 , 1.5 , .6931471805599453 },\n+        { 1.5 , 1.625 , 0.811531653906724 },\n+        { 1.5 , 1.75 , .9358019311087253 },\n+        { 1.5 , 1.875 , 1.06569589786406 },\n+        { 1.5 , 2.0 , 1.200973602347074 },\n+        { 1.625 , 1.0 , .3763336820249054 },\n+        { 1.625 , 1.125 , .4752146669149371 },\n+        { 1.625 , 1.25 , .5809359740231859 },\n+        { 1.625 , 1.375 , .6931471805599453 },\n+        { 1.625 , 1.5 , 0.811531653906724 },\n+        { 1.625 , 1.625 , .9358019311087253 },\n+        { 1.625 , 1.75 , 1.06569589786406 },\n+        { 1.625 , 1.875 , 1.200973602347074 },\n+        { 1.625 , 2.0 , 1.341414578068493 },\n+        { 1.75 , 1.0 , .4752146669149371 },\n+        { 1.75 , 1.125 , .5809359740231859 },\n+        { 1.75 , 1.25 , .6931471805599453 },\n+        { 1.75 , 1.375 , 0.811531653906724 },\n+        { 1.75 , 1.5 , .9358019311087253 },\n+        { 1.75 , 1.625 , 1.06569589786406 },\n+        { 1.75 , 1.75 , 1.200973602347074 },\n+        { 1.75 , 1.875 , 1.341414578068493 },\n+        { 1.75 , 2.0 , 1.486815578593417 },\n+        { 1.875 , 1.0 , .5809359740231859 },\n+        { 1.875 , 1.125 , .6931471805599453 },\n+        { 1.875 , 1.25 , 0.811531653906724 },\n+        { 1.875 , 1.375 , .9358019311087253 },\n+        { 1.875 , 1.5 , 1.06569589786406 },\n+        { 1.875 , 1.625 , 1.200973602347074 },\n+        { 1.875 , 1.75 , 1.341414578068493 },\n+        { 1.875 , 1.875 , 1.486815578593417 },\n+        { 1.875 , 2.0 , 1.6369886482725 },\n+        { 2.0 , 1.0 , .6931471805599453 },\n+        { 2.0 , 1.125 , 0.811531653906724 },\n+        { 2.0 , 1.25 , .9358019311087253 },\n+        { 2.0 , 1.375 , 1.06569589786406 },\n+        { 2.0 , 1.5 , 1.200973602347074 },\n+        { 2.0 , 1.625 , 1.341414578068493 },\n+        { 2.0 , 1.75 , 1.486815578593417 },\n+        { 2.0 , 1.875 , 1.6369886482725 },\n+        { 2.0 , 2.0 , 1.791759469228055 },\n+    };\n+\n+    private static double logGammaSum(final double a, final double b) {\n+\n+        /*\n+         * Use reflection to access private method.\n+         */\n+        try {\n+            return ((Double) LOG_GAMMA_SUM_METHOD.invoke(null, a, b)).doubleValue();\n+        } catch (final IllegalAccessException e) {\n+            Assert.fail(e.getMessage());\n+        } catch (final IllegalArgumentException e) {\n+            Assert.fail(e.getMessage());\n+        } catch (final InvocationTargetException e) {\n+            final Throwable te = e.getTargetException();\n+            if (te instanceof MathIllegalArgumentException) {\n+                throw (MathIllegalArgumentException) te;\n+            }\n+            Assert.fail(e.getMessage());\n+        }\n+        return Double.NaN;\n+    }\n+\n+    @Test\n+    public void testLogGammaSum() {\n+        final int ulps = 2;\n+        for (int i = 0; i < LOG_GAMMA_SUM_REF.length; i++) {\n+            final double[] ref = LOG_GAMMA_SUM_REF[i];\n+            final double a = ref[0];\n+            final double b = ref[1];\n+            final double expected = ref[2];\n+            final double actual = logGammaSum(a, b);\n+            final double tol = ulps * FastMath.ulp(expected);\n+            final StringBuilder builder = new StringBuilder();\n+            builder.append(a).append(\", \").append(b);\n+            Assert.assertEquals(builder.toString(), expected, actual, tol);\n+        }\n+    }\n+\n+    @Test(expected = OutOfRangeException.class)\n+    public void testLogGammaSumPrecondition1() {\n+\n+        logGammaSum(0.0, 1.0);\n+    }\n+\n+    @Test(expected = OutOfRangeException.class)\n+    public void testLogGammaSumPrecondition2() {\n+\n+        logGammaSum(3.0, 1.0);\n+    }\n+\n+    @Test(expected = OutOfRangeException.class)\n+    public void testLogGammaSumPrecondition3() {\n+\n+        logGammaSum(1.0, 0.0);\n+    }\n+\n+    @Test(expected = OutOfRangeException.class)\n+    public void testLogGammaSumPrecondition4() {\n+\n+        logGammaSum(1.0, 3.0);\n+    }\n+\n+    private static final double[][] LOG_GAMMA_MINUS_LOG_GAMMA_SUM_REF = {\n+//        { 0.0 , 8.0 , 0.0 },\n+//        { 0.0 , 9.0 , 0.0 },\n+        { 0.0 , 10.0 , 0.0 },\n+        { 0.0 , 11.0 , 0.0 },\n+        { 0.0 , 12.0 , 0.0 },\n+        { 0.0 , 13.0 , 0.0 },\n+        { 0.0 , 14.0 , 0.0 },\n+        { 0.0 , 15.0 , 0.0 },\n+        { 0.0 , 16.0 , 0.0 },\n+        { 0.0 , 17.0 , 0.0 },\n+        { 0.0 , 18.0 , 0.0 },\n+//        { 1.0 , 8.0 , - 2.079441541679836 },\n+//        { 1.0 , 9.0 , - 2.19722457733622 },\n+        { 1.0 , 10.0 , - 2.302585092994046 },\n+        { 1.0 , 11.0 , - 2.397895272798371 },\n+        { 1.0 , 12.0 , - 2.484906649788 },\n+        { 1.0 , 13.0 , - 2.564949357461537 },\n+        { 1.0 , 14.0 , - 2.639057329615258 },\n+        { 1.0 , 15.0 , - 2.70805020110221 },\n+        { 1.0 , 16.0 , - 2.772588722239781 },\n+        { 1.0 , 17.0 , - 2.833213344056216 },\n+        { 1.0 , 18.0 , - 2.890371757896165 },\n+//        { 2.0 , 8.0 , - 4.276666119016055 },\n+//        { 2.0 , 9.0 , - 4.499809670330265 },\n+        { 2.0 , 10.0 , - 4.700480365792417 },\n+        { 2.0 , 11.0 , - 4.882801922586371 },\n+        { 2.0 , 12.0 , - 5.049856007249537 },\n+        { 2.0 , 13.0 , - 5.204006687076795 },\n+        { 2.0 , 14.0 , - 5.347107530717468 },\n+        { 2.0 , 15.0 , - 5.480638923341991 },\n+        { 2.0 , 16.0 , - 5.605802066295998 },\n+        { 2.0 , 17.0 , - 5.723585101952381 },\n+        { 2.0 , 18.0 , - 5.834810737062605 },\n+//        { 3.0 , 8.0 , - 6.579251212010101 },\n+//        { 3.0 , 9.0 , - 6.897704943128636 },\n+        { 3.0 , 10.0 , - 7.185387015580416 },\n+        { 3.0 , 11.0 , - 7.447751280047908 },\n+        { 3.0 , 12.0 , - 7.688913336864796 },\n+        { 3.0 , 13.0 , - 7.912056888179006 },\n+        { 3.0 , 14.0 , - 8.11969625295725 },\n+        { 3.0 , 15.0 , - 8.313852267398207 },\n+        { 3.0 , 16.0 , - 8.496173824192162 },\n+        { 3.0 , 17.0 , - 8.668024081118821 },\n+        { 3.0 , 18.0 , - 8.830543010616596 },\n+//        { 4.0 , 8.0 , - 8.977146484808472 },\n+//        { 4.0 , 9.0 , - 9.382611592916636 },\n+        { 4.0 , 10.0 , - 9.750336373041954 },\n+        { 4.0 , 11.0 , - 10.08680860966317 },\n+        { 4.0 , 12.0 , - 10.39696353796701 },\n+        { 4.0 , 13.0 , - 10.68464561041879 },\n+        { 4.0 , 14.0 , - 10.95290959701347 },\n+        { 4.0 , 15.0 , - 11.20422402529437 },\n+        { 4.0 , 16.0 , - 11.4406128033586 },\n+        { 4.0 , 17.0 , - 11.66375635467281 },\n+        { 4.0 , 18.0 , - 11.87506544834002 },\n+//        { 5.0 , 8.0 , - 11.46205313459647 },\n+//        { 5.0 , 9.0 , - 11.94756095037817 },\n+        { 5.0 , 10.0 , - 12.38939370265721 },\n+        { 5.0 , 11.0 , - 12.79485881076538 },\n+        { 5.0 , 12.0 , - 13.16955226020679 },\n+        { 5.0 , 13.0 , - 13.517858954475 },\n+        { 5.0 , 14.0 , - 13.84328135490963 },\n+        { 5.0 , 15.0 , - 14.14866300446081 },\n+        { 5.0 , 16.0 , - 14.43634507691259 },\n+        { 5.0 , 17.0 , - 14.70827879239624 },\n+        { 5.0 , 18.0 , - 14.96610790169833 },\n+//        { 6.0 , 8.0 , - 14.02700249205801 },\n+//        { 6.0 , 9.0 , - 14.58661827999343 },\n+        { 6.0 , 10.0 , - 15.09744390375942 },\n+        { 6.0 , 11.0 , - 15.56744753300516 },\n+        { 6.0 , 12.0 , - 16.002765604263 },\n+        { 6.0 , 13.0 , - 16.40823071237117 },\n+        { 6.0 , 14.0 , - 16.78772033407607 },\n+        { 6.0 , 15.0 , - 17.14439527801481 },\n+        { 6.0 , 16.0 , - 17.48086751463602 },\n+        { 6.0 , 17.0 , - 17.79932124575455 },\n+        { 6.0 , 18.0 , - 18.10160211762749 },\n+//        { 7.0 , 8.0 , - 16.66605982167327 },\n+//        { 7.0 , 9.0 , - 17.29466848109564 },\n+        { 7.0 , 10.0 , - 17.8700326259992 },\n+        { 7.0 , 11.0 , - 18.40066087706137 },\n+        { 7.0 , 12.0 , - 18.89313736215917 },\n+        { 7.0 , 13.0 , - 19.35266969153761 },\n+        { 7.0 , 14.0 , - 19.78345260763006 },\n+        { 7.0 , 15.0 , - 20.18891771573823 },\n+        { 7.0 , 16.0 , - 20.57190996799433 },\n+        { 7.0 , 17.0 , - 20.9348154616837 },\n+        { 7.0 , 18.0 , - 21.27965594797543 },\n+//        { 8.0 , 8.0 , - 19.37411002277548 },\n+//        { 8.0 , 9.0 , - 20.06725720333542 },\n+        { 8.0 , 10.0 , - 20.70324597005542 },\n+        { 8.0 , 11.0 , - 21.29103263495754 },\n+        { 8.0 , 12.0 , - 21.83757634132561 },\n+        { 8.0 , 13.0 , - 22.3484019650916 },\n+        { 8.0 , 14.0 , - 22.82797504535349 },\n+        { 8.0 , 15.0 , - 23.27996016909654 },\n+        { 8.0 , 16.0 , - 23.70740418392348 },\n+        { 8.0 , 17.0 , - 24.11286929203165 },\n+        { 8.0 , 18.0 , - 24.49853177284363 },\n+//        { 9.0 , 8.0 , - 22.14669874501526 },\n+//        { 9.0 , 9.0 , - 22.90047054739164 },\n+        { 9.0 , 10.0 , - 23.59361772795159 },\n+        { 9.0 , 11.0 , - 24.23547161412398 },\n+        { 9.0 , 12.0 , - 24.8333086148796 },\n+        { 9.0 , 13.0 , - 25.39292440281502 },\n+        { 9.0 , 14.0 , - 25.9190174987118 },\n+        { 9.0 , 15.0 , - 26.41545438502569 },\n+        { 9.0 , 16.0 , - 26.88545801427143 },\n+        { 9.0 , 17.0 , - 27.33174511689985 },\n+        { 9.0 , 18.0 , - 27.75662831086511 },\n+//        { 10.0 , 8.0 , - 24.97991208907148 },\n+//        { 10.0 , 9.0 , - 25.7908423052878 },\n+        { 10.0 , 10.0 , - 26.53805670711802 },\n+        { 10.0 , 11.0 , - 27.23120388767797 },\n+        { 10.0 , 12.0 , - 27.87783105260302 },\n+        { 10.0 , 13.0 , - 28.48396685617334 },\n+        { 10.0 , 14.0 , - 29.05451171464095 },\n+        { 10.0 , 15.0 , - 29.59350821537364 },\n+        { 10.0 , 16.0 , - 30.10433383913963 },\n+        { 10.0 , 17.0 , - 30.58984165492133 },\n+        { 10.0 , 18.0 , - 31.05246517686944 },\n+    };\n+\n+    private static double logGammaMinusLogGammaSum(final double a, final double b) {\n+\n+        /*\n+         * Use reflection to access private method.\n+         */\n+        try {\n+            final Method m = LOG_GAMMA_MINUS_LOG_GAMMA_SUM_METHOD;\n+            return ((Double) m.invoke(null, a, b)).doubleValue();\n+        } catch (final IllegalAccessException e) {\n+            Assert.fail(e.getMessage());\n+        } catch (final IllegalArgumentException e) {\n+            Assert.fail(e.getMessage());\n+        } catch (final InvocationTargetException e) {\n+            final Throwable te = e.getTargetException();\n+            if (te instanceof MathIllegalArgumentException) {\n+                throw (MathIllegalArgumentException) te;\n+            }\n+            Assert.fail(e.getMessage());\n+        }\n+        return Double.NaN;\n+    }\n+\n+    @Test\n+    public void testLogGammaMinusLogGammaSum() {\n+        final int ulps = 4;\n+        for (int i = 0; i < LOG_GAMMA_MINUS_LOG_GAMMA_SUM_REF.length; i++) {\n+            final double[] ref = LOG_GAMMA_MINUS_LOG_GAMMA_SUM_REF[i];\n+            final double a = ref[0];\n+            final double b = ref[1];\n+            final double expected = ref[2];\n+            final double actual = logGammaMinusLogGammaSum(a, b);\n+            final double tol = ulps * FastMath.ulp(expected);\n+            final StringBuilder builder = new StringBuilder();\n+            builder.append(a).append(\", \").append(b);\n+            Assert.assertEquals(builder.toString(), expected, actual, tol);\n+        }\n+    }\n+\n+    @Test(expected = NumberIsTooSmallException.class)\n+    public void testLogGammaMinusLogGammaSumPrecondition1() {\n+        logGammaMinusLogGammaSum(-1.0, 8.0);\n+    }\n+\n+    @Test(expected = NumberIsTooSmallException.class)\n+    public void testLogGammaMinusLogGammaSumPrecondition2() {\n+        logGammaMinusLogGammaSum(1.0, 7.0);\n+    }\n+\n+    private static final double[][] SUM_DELTA_MINUS_DELTA_SUM_REF = {\n+        { 10.0 , 10.0 , .01249480717472882 },\n+        { 10.0 , 11.0 , .01193628470267385 },\n+        { 10.0 , 12.0 , .01148578547212797 },\n+        { 10.0 , 13.0 , .01111659739668398 },\n+        { 10.0 , 14.0 , .01080991216314295 },\n+        { 10.0 , 15.0 , .01055214134859758 },\n+        { 10.0 , 16.0 , .01033324912491747 },\n+        { 10.0 , 17.0 , .01014568069918883 },\n+        { 10.0 , 18.0 , .009983653199146491 },\n+        { 10.0 , 19.0 , .009842674320242729 },\n+        { 10.0 , 20.0 , 0.0097192081956071 },\n+        { 11.0 , 10.0 , .01193628470267385 },\n+        { 11.0 , 11.0 , .01135973290745925 },\n+        { 11.0 , 12.0 , .01089355537047828 },\n+        { 11.0 , 13.0 , .01051064829297728 },\n+        { 11.0 , 14.0 , 0.0101918899639826 },\n+        { 11.0 , 15.0 , .009923438811859604 },\n+        { 11.0 , 16.0 , .009695052724952705 },\n+        { 11.0 , 17.0 , 0.00949900745283617 },\n+        { 11.0 , 18.0 , .009329379874933402 },\n+        { 11.0 , 19.0 , 0.00918156080743147 },\n+        { 11.0 , 20.0 , 0.00905191635141762 },\n+        { 12.0 , 10.0 , .01148578547212797 },\n+        { 12.0 , 11.0 , .01089355537047828 },\n+        { 12.0 , 12.0 , .01041365883144029 },\n+        { 12.0 , 13.0 , .01001867865848564 },\n+        { 12.0 , 14.0 , 0.00968923999191334 },\n+        { 12.0 , 15.0 , .009411294976563555 },\n+        { 12.0 , 16.0 , .009174432043268762 },\n+        { 12.0 , 17.0 , .008970786693291802 },\n+        { 12.0 , 18.0 , .008794318926790865 },\n+        { 12.0 , 19.0 , .008640321527910711 },\n+        { 12.0 , 20.0 , .008505077879954796 },\n+        { 13.0 , 10.0 , .01111659739668398 },\n+        { 13.0 , 11.0 , .01051064829297728 },\n+        { 13.0 , 12.0 , .01001867865848564 },\n+        { 13.0 , 13.0 , .009613018147953376 },\n+        { 13.0 , 14.0 , .009274085618154277 },\n+        { 13.0 , 15.0 , 0.0089876637564166 },\n+        { 13.0 , 16.0 , .008743200745261382 },\n+        { 13.0 , 17.0 , .008532715206686251 },\n+        { 13.0 , 18.0 , .008350069108807093 },\n+        { 13.0 , 19.0 , .008190472517984874 },\n+        { 13.0 , 20.0 , .008050138630244345 },\n+        { 14.0 , 10.0 , .01080991216314295 },\n+        { 14.0 , 11.0 , 0.0101918899639826 },\n+        { 14.0 , 12.0 , 0.00968923999191334 },\n+        { 14.0 , 13.0 , .009274085618154277 },\n+        { 14.0 , 14.0 , .008926676241967286 },\n+        { 14.0 , 15.0 , .008632654302369184 },\n+        { 14.0 , 16.0 , .008381351102615795 },\n+        { 14.0 , 17.0 , .008164687232662443 },\n+        { 14.0 , 18.0 , .007976441942841219 },\n+        { 14.0 , 19.0 , .007811755112234388 },\n+        { 14.0 , 20.0 , .007666780069317652 },\n+        { 15.0 , 10.0 , .01055214134859758 },\n+        { 15.0 , 11.0 , .009923438811859604 },\n+        { 15.0 , 12.0 , .009411294976563555 },\n+        { 15.0 , 13.0 , 0.0089876637564166 },\n+        { 15.0 , 14.0 , .008632654302369184 },\n+        { 15.0 , 15.0 , 0.00833179217417291 },\n+        { 15.0 , 16.0 , .008074310643041299 },\n+        { 15.0 , 17.0 , .007852047581145882 },\n+        { 15.0 , 18.0 , .007658712051540045 },\n+        { 15.0 , 19.0 , .007489384065757007 },\n+        { 15.0 , 20.0 , .007340165635725612 },\n+        { 16.0 , 10.0 , .01033324912491747 },\n+        { 16.0 , 11.0 , .009695052724952705 },\n+        { 16.0 , 12.0 , .009174432043268762 },\n+        { 16.0 , 13.0 , .008743200745261382 },\n+        { 16.0 , 14.0 , .008381351102615795 },\n+        { 16.0 , 15.0 , .008074310643041299 },\n+        { 16.0 , 16.0 , .007811229919967624 },\n+        { 16.0 , 17.0 , .007583876618287594 },\n+        { 16.0 , 18.0 , .007385899933505551 },\n+        { 16.0 , 19.0 , .007212328560607852 },\n+        { 16.0 , 20.0 , .007059220321091879 },\n+        { 17.0 , 10.0 , .01014568069918883 },\n+        { 17.0 , 11.0 , 0.00949900745283617 },\n+        { 17.0 , 12.0 , .008970786693291802 },\n+        { 17.0 , 13.0 , .008532715206686251 },\n+        { 17.0 , 14.0 , .008164687232662443 },\n+        { 17.0 , 15.0 , .007852047581145882 },\n+        { 17.0 , 16.0 , .007583876618287594 },\n+        { 17.0 , 17.0 , .007351882161431358 },\n+        { 17.0 , 18.0 , .007149662089534654 },\n+        { 17.0 , 19.0 , .006972200907152378 },\n+        { 17.0 , 20.0 , .006815518216094137 },\n+        { 18.0 , 10.0 , .009983653199146491 },\n+        { 18.0 , 11.0 , .009329379874933402 },\n+        { 18.0 , 12.0 , .008794318926790865 },\n+        { 18.0 , 13.0 , .008350069108807093 },\n+        { 18.0 , 14.0 , .007976441942841219 },\n+        { 18.0 , 15.0 , .007658712051540045 },\n+        { 18.0 , 16.0 , .007385899933505551 },\n+        { 18.0 , 17.0 , .007149662089534654 },\n+        { 18.0 , 18.0 , .006943552208153373 },\n+        { 18.0 , 19.0 , .006762516574228829 },\n+        { 18.0 , 20.0 , .006602541598043117 },\n+        { 19.0 , 10.0 , .009842674320242729 },\n+        { 19.0 , 11.0 , 0.00918156080743147 },\n+        { 19.0 , 12.0 , .008640321527910711 },\n+        { 19.0 , 13.0 , .008190472517984874 },\n+        { 19.0 , 14.0 , .007811755112234388 },\n+        { 19.0 , 15.0 , .007489384065757007 },\n+        { 19.0 , 16.0 , .007212328560607852 },\n+        { 19.0 , 17.0 , .006972200907152378 },\n+        { 19.0 , 18.0 , .006762516574228829 },\n+        { 19.0 , 19.0 , .006578188655176814 },\n+        { 19.0 , 20.0 , .006415174623476747 },\n+        { 20.0 , 10.0 , 0.0097192081956071 },\n+        { 20.0 , 11.0 , 0.00905191635141762 },\n+        { 20.0 , 12.0 , .008505077879954796 },\n+        { 20.0 , 13.0 , .008050138630244345 },\n+        { 20.0 , 14.0 , .007666780069317652 },\n+        { 20.0 , 15.0 , .007340165635725612 },\n+        { 20.0 , 16.0 , .007059220321091879 },\n+        { 20.0 , 17.0 , .006815518216094137 },\n+        { 20.0 , 18.0 , .006602541598043117 },\n+        { 20.0 , 19.0 , .006415174623476747 },\n+        { 20.0 , 20.0 , .006249349445691423 },\n+    };\n+\n+    private static double sumDeltaMinusDeltaSum(final double a,\n+                                                final double b) {\n+\n+        /*\n+         * Use reflection to access private method.\n+         */\n+        try {\n+            final Method m = SUM_DELTA_MINUS_DELTA_SUM_METHOD;\n+            return ((Double) m.invoke(null, a, b)).doubleValue();\n+        } catch (final IllegalAccessException e) {\n+            Assert.fail(e.getMessage());\n+        } catch (final IllegalArgumentException e) {\n+            Assert.fail(e.getMessage());\n+        } catch (final InvocationTargetException e) {\n+            final Throwable te = e.getTargetException();\n+            if (te instanceof MathIllegalArgumentException) {\n+                throw (MathIllegalArgumentException) te;\n+            }\n+            Assert.fail(e.getMessage());\n+        }\n+        return Double.NaN;\n+    }\n+\n+    @Test\n+    public void testSumDeltaMinusDeltaSum() {\n+\n+        final int ulps = 3;\n+        for (int i = 0; i < SUM_DELTA_MINUS_DELTA_SUM_REF.length; i++) {\n+            final double[] ref = SUM_DELTA_MINUS_DELTA_SUM_REF[i];\n+            final double a = ref[0];\n+            final double b = ref[1];\n+            final double expected = ref[2];\n+            final double actual = sumDeltaMinusDeltaSum(a, b);\n+            final double tol = ulps * FastMath.ulp(expected);\n+            final StringBuilder builder = new StringBuilder();\n+            builder.append(a).append(\", \").append(b);\n+            Assert.assertEquals(builder.toString(), expected, actual, tol);\n+        }\n+    }\n+\n+    @Test(expected = NumberIsTooSmallException.class)\n+    public void testSumDeltaMinusDeltaSumPrecondition1() {\n+\n+        sumDeltaMinusDeltaSum(9.0, 10.0);\n+    }\n+\n+    @Test(expected = NumberIsTooSmallException.class)\n+    public void testSumDeltaMinusDeltaSumPrecondition2() {\n+\n+        sumDeltaMinusDeltaSum(10.0, 9.0);\n+    }\n+\n+    private static final double[][] LOG_BETA_REF = {\n+        { 0.125 , 0.125 , 2.750814190409515 },\n+        { 0.125 , 0.25 , 2.444366899981226 },\n+        { 0.125 , 0.5 , 2.230953804989556 },\n+        { 0.125 , 1.0 , 2.079441541679836 },\n+        { 0.125 , 2.0 , 1.961658506023452 },\n+        { 0.125 , 3.0 , 1.901033884207018 },\n+        { 0.125 , 4.0 , 1.860211889686763 },\n+        { 0.125 , 5.0 , 1.829440231020009 },\n+        { 0.125 , 6.0 , 1.804747618429637 },\n+        { 0.125 , 7.0 , 1.784128331226902 },\n+        { 0.125 , 8.0 , 1.766428754127501 },\n+        { 0.125 , 9.0 , 1.750924567591535 },\n+        { 0.125 , 10.0 , 1.7371312454592 },\n+        { 0.125 , 1000.0 , 1.156003642015969 },\n+        { 0.125 , 1001.0 , 1.155878649827818 },\n+        { 0.125 , 10000.0 , .8681312798751318 },\n+        { 0.25 , 0.125 , 2.444366899981226 },\n+        { 0.25 , 0.25 , 2.003680106471455 },\n+        { 0.25 , 0.5 , 1.657106516191482 },\n+        { 0.25 , 1.0 , 1.386294361119891 },\n+        { 0.25 , 2.0 , 1.163150809805681 },\n+        { 0.25 , 3.0 , 1.045367774149297 },\n+        { 0.25 , 4.0 , 0.965325066475761 },\n+        { 0.25 , 5.0 , .9047004446593261 },\n+        { 0.25 , 6.0 , .8559102804898941 },\n+        { 0.25 , 7.0 , 0.815088285969639 },\n+        { 0.25 , 8.0 , .7799969661583689 },\n+        { 0.25 , 9.0 , .7492253074916152 },\n+        { 0.25 , 10.0 , .7218263333035008 },\n+        { 0.25 , 1000.0 , - .4388225372378877 },\n+        { 0.25 , 1001.0 , - .4390725059930951 },\n+        { 0.25 , 10000.0 , - 1.014553193217846 },\n+        { 0.5 , 0.125 , 2.230953804989556 },\n+        { 0.5 , 0.25 , 1.657106516191482 },\n+        { 0.5 , 0.5 , 1.1447298858494 },\n+        { 0.5 , 1.0 , .6931471805599453 },\n+        { 0.5 , 2.0 , .2876820724517809 },\n+        { 0.5 , 3.0 , .06453852113757118 },\n+//        { 0.5 , 4.0 , - .08961215868968714 },\n+        { 0.5 , 5.0 , - .2073951943460706 },\n+        { 0.5 , 6.0 , - .3027053741503954 },\n+        { 0.5 , 7.0 , - .3827480818239319 },\n+        { 0.5 , 8.0 , - .4517409533108833 },\n+        { 0.5 , 9.0 , - .5123655751273182 },\n+        { 0.5 , 10.0 , - .5664327963975939 },\n+        { 0.5 , 1000.0 , - 2.881387696571577 },\n+        { 0.5 , 1001.0 , - 2.881887571613228 },\n+        { 0.5 , 10000.0 , - 4.032792743063396 },\n+        { 1.0 , 0.125 , 2.079441541679836 },\n+        { 1.0 , 0.25 , 1.386294361119891 },\n+        { 1.0 , 0.5 , .6931471805599453 },\n+        { 1.0 , 1.0 , 0.0 },\n+        { 1.0 , 2.0 , - .6931471805599453 },\n+        { 1.0 , 3.0 , - 1.09861228866811 },\n+        { 1.0 , 4.0 , - 1.386294361119891 },\n+        { 1.0 , 5.0 , - 1.6094379124341 },\n+        { 1.0 , 6.0 , - 1.791759469228055 },\n+        { 1.0 , 7.0 , - 1.945910149055313 },\n+        { 1.0 , 8.0 , - 2.079441541679836 },\n+        { 1.0 , 9.0 , - 2.19722457733622 },\n+        { 1.0 , 10.0 , - 2.302585092994046 },\n+        { 1.0 , 1000.0 , - 6.907755278982137 },\n+        { 1.0 , 1001.0 , - 6.90875477931522 },\n+        { 1.0 , 10000.0 , - 9.210340371976184 },\n+        { 2.0 , 0.125 , 1.961658506023452 },\n+        { 2.0 , 0.25 , 1.163150809805681 },\n+        { 2.0 , 0.5 , .2876820724517809 },\n+        { 2.0 , 1.0 , - .6931471805599453 },\n+        { 2.0 , 2.0 , - 1.791759469228055 },\n+        { 2.0 , 3.0 , - 2.484906649788 },\n+        { 2.0 , 4.0 , - 2.995732273553991 },\n+        { 2.0 , 5.0 , - 3.401197381662155 },\n+        { 2.0 , 6.0 , - 3.737669618283368 },\n+        { 2.0 , 7.0 , - 4.02535169073515 },\n+        { 2.0 , 8.0 , - 4.276666119016055 },\n+        { 2.0 , 9.0 , - 4.499809670330265 },\n+        { 2.0 , 10.0 , - 4.700480365792417 },\n+        { 2.0 , 1000.0 , - 13.81651005829736 },\n+        { 2.0 , 1001.0 , - 13.81850806096003 },\n+        { 2.0 , 10000.0 , - 18.4207807389527 },\n+        { 3.0 , 0.125 , 1.901033884207018 },\n+        { 3.0 , 0.25 , 1.045367774149297 },\n+        { 3.0 , 0.5 , .06453852113757118 },\n+        { 3.0 , 1.0 , - 1.09861228866811 },\n+        { 3.0 , 2.0 , - 2.484906649788 },\n+        { 3.0 , 3.0 , - 3.401197381662155 },\n+        { 3.0 , 4.0 , - 4.0943445622221 },\n+        { 3.0 , 5.0 , - 4.653960350157523 },\n+        { 3.0 , 6.0 , - 5.123963979403259 },\n+        { 3.0 , 7.0 , - 5.529429087511423 },\n+        { 3.0 , 8.0 , - 5.886104031450156 },\n+        { 3.0 , 9.0 , - 6.20455776256869 },\n+        { 3.0 , 10.0 , - 6.492239835020471 },\n+        { 3.0 , 1000.0 , - 20.03311615938222 },\n+        { 3.0 , 1001.0 , - 20.03611166836202 },\n+        { 3.0 , 10000.0 , - 26.9381739103716 },\n+        { 4.0 , 0.125 , 1.860211889686763 },\n+        { 4.0 , 0.25 , 0.965325066475761 },\n+//        { 4.0 , 0.5 , - .08961215868968714 },\n+        { 4.0 , 1.0 , - 1.386294361119891 },\n+        { 4.0 , 2.0 , - 2.995732273553991 },\n+        { 4.0 , 3.0 , - 4.0943445622221 },\n+        { 4.0 , 4.0 , - 4.941642422609304 },\n+        { 4.0 , 5.0 , - 5.634789603169249 },\n+        { 4.0 , 6.0 , - 6.222576268071369 },\n+        { 4.0 , 7.0 , - 6.733401891837359 },\n+        { 4.0 , 8.0 , - 7.185387015580416 },\n+        { 4.0 , 9.0 , - 7.590852123688581 },\n+        { 4.0 , 10.0 , - 7.958576903813898 },\n+        { 4.0 , 1000.0 , - 25.84525465867605 },\n+        { 4.0 , 1001.0 , - 25.84924667994559 },\n+        { 4.0 , 10000.0 , - 35.05020194868867 },\n+        { 5.0 , 0.125 , 1.829440231020009 },\n+        { 5.0 , 0.25 , .9047004446593261 },\n+        { 5.0 , 0.5 , - .2073951943460706 },\n+        { 5.0 , 1.0 , - 1.6094379124341 },\n+        { 5.0 , 2.0 , - 3.401197381662155 },\n+        { 5.0 , 3.0 , - 4.653960350157523 },\n+        { 5.0 , 4.0 , - 5.634789603169249 },\n+        { 5.0 , 5.0 , - 6.445719819385578 },\n+        { 5.0 , 6.0 , - 7.138866999945524 },\n+        { 5.0 , 7.0 , - 7.745002803515839 },\n+        { 5.0 , 8.0 , - 8.283999304248526 },\n+        { 5.0 , 9.0 , - 8.769507120030227 },\n+        { 5.0 , 10.0 , - 9.211339872309265 },\n+        { 5.0 , 1000.0 , - 31.37070759780783 },\n+        { 5.0 , 1001.0 , - 31.37569513931887 },\n+        { 5.0 , 10000.0 , - 42.87464787956629 },\n+        { 6.0 , 0.125 , 1.804747618429637 },\n+        { 6.0 , 0.25 , .8559102804898941 },\n+        { 6.0 , 0.5 , - .3027053741503954 },\n+        { 6.0 , 1.0 , - 1.791759469228055 },\n+        { 6.0 , 2.0 , - 3.737669618283368 },\n+        { 6.0 , 3.0 , - 5.123963979403259 },\n+        { 6.0 , 4.0 , - 6.222576268071369 },\n+        { 6.0 , 5.0 , - 7.138866999945524 },\n+        { 6.0 , 6.0 , - 7.927324360309794 },\n+        { 6.0 , 7.0 , - 8.620471540869739 },\n+        { 6.0 , 8.0 , - 9.239510749275963 },\n+        { 6.0 , 9.0 , - 9.799126537211386 },\n+        { 6.0 , 10.0 , - 10.30995216097738 },\n+        { 6.0 , 1000.0 , - 36.67401250586691 },\n+        { 6.0 , 1001.0 , - 36.67999457754446 },\n+        { 6.0 , 10000.0 , - 50.47605021415003 },\n+        { 7.0 , 0.125 , 1.784128331226902 },\n+        { 7.0 , 0.25 , 0.815088285969639 },\n+        { 7.0 , 0.5 , - .3827480818239319 },\n+        { 7.0 , 1.0 , - 1.945910149055313 },\n+        { 7.0 , 2.0 , - 4.02535169073515 },\n+        { 7.0 , 3.0 , - 5.529429087511423 },\n+        { 7.0 , 4.0 , - 6.733401891837359 },\n+        { 7.0 , 5.0 , - 7.745002803515839 },\n+        { 7.0 , 6.0 , - 8.620471540869739 },\n+        { 7.0 , 7.0 , - 9.39366142910322 },\n+        { 7.0 , 8.0 , - 10.08680860966317 },\n+        { 7.0 , 9.0 , - 10.71541726908554 },\n+        { 7.0 , 10.0 , - 11.2907814139891 },\n+        { 7.0 , 1000.0 , - 41.79599038729854 },\n+        { 7.0 , 1001.0 , - 41.80296600103496 },\n+        { 7.0 , 10000.0 , - 57.89523093697012 },\n+        { 8.0 , 0.125 , 1.766428754127501 },\n+        { 8.0 , 0.25 , .7799969661583689 },\n+        { 8.0 , 0.5 , - .4517409533108833 },\n+        { 8.0 , 1.0 , - 2.079441541679836 },\n+        { 8.0 , 2.0 , - 4.276666119016055 },\n+        { 8.0 , 3.0 , - 5.886104031450156 },\n+        { 8.0 , 4.0 , - 7.185387015580416 },\n+        { 8.0 , 5.0 , - 8.283999304248526 },\n+        { 8.0 , 6.0 , - 9.239510749275963 },\n+        { 8.0 , 7.0 , - 10.08680860966317 },\n+        { 8.0 , 8.0 , - 10.84894866171006 },\n+        { 8.0 , 9.0 , - 11.54209584227001 },\n+        { 8.0 , 10.0 , - 12.17808460899001 },\n+        { 8.0 , 1000.0 , - 46.76481113096179 },\n+        { 8.0 , 1001.0 , - 46.77277930061096 },\n+        { 8.0 , 10000.0 , - 65.16036091500527 },\n+        { 9.0 , 0.125 , 1.750924567591535 },\n+        { 9.0 , 0.25 , .7492253074916152 },\n+        { 9.0 , 0.5 , - .5123655751273182 },\n+        { 9.0 , 1.0 , - 2.19722457733622 },\n+        { 9.0 , 2.0 , - 4.499809670330265 },\n+        { 9.0 , 3.0 , - 6.20455776256869 },\n+        { 9.0 , 4.0 , - 7.590852123688581 },\n+        { 9.0 , 5.0 , - 8.769507120030227 },\n+        { 9.0 , 6.0 , - 9.799126537211386 },\n+        { 9.0 , 7.0 , - 10.71541726908554 },\n+        { 9.0 , 8.0 , - 11.54209584227001 },\n+        { 9.0 , 9.0 , - 12.29586764464639 },\n+        { 9.0 , 10.0 , - 12.98901482520633 },\n+        { 9.0 , 1000.0 , - 51.60109303791327 },\n+        { 9.0 , 1001.0 , - 51.61005277928474 },\n+        { 9.0 , 10000.0 , - 72.29205942547217 },\n+        { 10.0 , 0.125 , 1.7371312454592 },\n+        { 10.0 , 0.25 , .7218263333035008 },\n+        { 10.0 , 0.5 , - .5664327963975939 },\n+        { 10.0 , 1.0 , - 2.302585092994046 },\n+        { 10.0 , 2.0 , - 4.700480365792417 },\n+        { 10.0 , 3.0 , - 6.492239835020471 },\n+        { 10.0 , 4.0 , - 7.958576903813898 },\n+        { 10.0 , 5.0 , - 9.211339872309265 },\n+        { 10.0 , 6.0 , - 10.30995216097738 },\n+        { 10.0 , 7.0 , - 11.2907814139891 },\n+        { 10.0 , 8.0 , - 12.17808460899001 },\n+        { 10.0 , 9.0 , - 12.98901482520633 },\n+        { 10.0 , 10.0 , - 13.73622922703655 },\n+        { 10.0 , 1000.0 , - 56.32058348093065 },\n+        { 10.0 , 1001.0 , - 56.33053381178382 },\n+        { 10.0 , 10000.0 , - 79.30607481535498 },\n+        { 1000.0 , 0.125 , 1.156003642015969 },\n+        { 1000.0 , 0.25 , - .4388225372378877 },\n+        { 1000.0 , 0.5 , - 2.881387696571577 },\n+        { 1000.0 , 1.0 , - 6.907755278982137 },\n+        { 1000.0 , 2.0 , - 13.81651005829736 },\n+        { 1000.0 , 3.0 , - 20.03311615938222 },\n+        { 1000.0 , 4.0 , - 25.84525465867605 },\n+        { 1000.0 , 5.0 , - 31.37070759780783 },\n+        { 1000.0 , 6.0 , - 36.67401250586691 },\n+        { 1000.0 , 7.0 , - 41.79599038729854 },\n+        { 1000.0 , 8.0 , - 46.76481113096179 },\n+        { 1000.0 , 9.0 , - 51.60109303791327 },\n+        { 1000.0 , 10.0 , - 56.32058348093065 },\n+        { 1000.0 , 1000.0 , - 1388.482601635902 },\n+        { 1000.0 , 1001.0 , - 1389.175748816462 },\n+        { 1000.0 , 10000.0 , - 3353.484270767097 },\n+        { 1001.0 , 0.125 , 1.155878649827818 },\n+        { 1001.0 , 0.25 , - .4390725059930951 },\n+        { 1001.0 , 0.5 , - 2.881887571613228 },\n+        { 1001.0 , 1.0 , - 6.90875477931522 },\n+        { 1001.0 , 2.0 , - 13.81850806096003 },\n+        { 1001.0 , 3.0 , - 20.03611166836202 },\n+        { 1001.0 , 4.0 , - 25.84924667994559 },\n+        { 1001.0 , 5.0 , - 31.37569513931887 },\n+        { 1001.0 , 6.0 , - 36.67999457754446 },\n+        { 1001.0 , 7.0 , - 41.80296600103496 },\n+        { 1001.0 , 8.0 , - 46.77277930061096 },\n+        { 1001.0 , 9.0 , - 51.61005277928474 },\n+        { 1001.0 , 10.0 , - 56.33053381178382 },\n+        { 1001.0 , 1000.0 , - 1389.175748816462 },\n+        { 1001.0 , 1001.0 , - 1389.869395872064 },\n+        { 1001.0 , 10000.0 , - 3355.882166039895 },\n+        { 10000.0 , 0.125 , .8681312798751318 },\n+        { 10000.0 , 0.25 , - 1.014553193217846 },\n+        { 10000.0 , 0.5 , - 4.032792743063396 },\n+        { 10000.0 , 1.0 , - 9.210340371976184 },\n+        { 10000.0 , 2.0 , - 18.4207807389527 },\n+        { 10000.0 , 3.0 , - 26.9381739103716 },\n+        { 10000.0 , 4.0 , - 35.05020194868867 },\n+        { 10000.0 , 5.0 , - 42.87464787956629 },\n+        { 10000.0 , 6.0 , - 50.47605021415003 },\n+        { 10000.0 , 7.0 , - 57.89523093697012 },\n+        { 10000.0 , 8.0 , - 65.16036091500527 },\n+        { 10000.0 , 9.0 , - 72.29205942547217 },\n+        { 10000.0 , 10.0 , - 79.30607481535498 },\n+        { 10000.0 , 1000.0 , - 3353.484270767097 },\n+        { 10000.0 , 1001.0 , - 3355.882166039895 },\n+        { 10000.0 , 10000.0 , - 13866.28325676141 },\n+    };\n+\n+    @Test\n+    public void testLogBeta() {\n+        final int ulps = 3;\n+        for (int i = 0; i < LOG_BETA_REF.length; i++) {\n+            final double[] ref = LOG_BETA_REF[i];\n+            final double a = ref[0];\n+            final double b = ref[1];\n+            final double expected = ref[2];\n+            final double actual = Beta.logBeta(a, b);\n+            final double tol = ulps * FastMath.ulp(expected);\n+            final StringBuilder builder = new StringBuilder();\n+            builder.append(a).append(\", \").append(b);\n+            Assert.assertEquals(builder.toString(), expected, actual, tol);\n+        }\n+    }}", "timestamp": 1354309343, "metainfo": ""}