{"sha": "4a298725e4d07477c01f84eddb699c9480554599", "log": "Added evaluate method taking mean as a parameter. Changed implementation to wrap, rather than extend Variance.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;\n+\n /**\n  * Computes the sample standard deviation.  The standard deviation\n  * is the positive square root of the variance.  See {@link Variance} for\n- * more information.\n+ * more information.  This implementation wraps a {@link Variance}\n+ * instance.\n  * <p>\n  * <strong>Note that this implementation is not synchronized.</strong> If \n  * multiple threads access an instance of this class concurrently, and at least\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.19 $ $Date: 2004/07/04 09:02:36 $\n+ * @version $Revision: 1.20 $ $Date: 2004/07/04 22:10:02 $\n  */\n-public class StandardDeviation extends Variance implements Serializable {\n+public class StandardDeviation extends AbstractStorelessUnivariateStatistic\n+    implements Serializable {\n \n     /** Serializable version identifier */\n-    static final long serialVersionUID = 5728716329662425188L;    \n+    static final long serialVersionUID = 5728716329662425188L;  \n+    \n+    /** Wrapped Variance instance */\n+    protected Variance variance = null;\n \n     /**\n      * Constructs a StandardDeviation\n      */\n     public StandardDeviation() {\n-        super();\n+        variance = new Variance();\n     }\n \n     /**\n      * @param m2 the external moment\n      */\n     public StandardDeviation(final SecondMoment m2) {\n-        super(m2);\n+        variance = new Variance(m2);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n      */\n     public void increment(final double d) {\n-        super.increment(d);\n+        variance.increment(d);\n+    }\n+    \n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getN()\n+     */\n+    public double getN() {\n+        return variance.getN();\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()\n      */\n     public double getResult() {\n-        return Math.sqrt(super.getResult());\n+        return Math.sqrt(variance.getResult());\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()\n      */\n     public void clear() {\n-        super.clear();\n+        variance.clear();\n     }\n \n+    /**\n+     * Returns the Standard Deviation of the entries in the input array, or \n+     * <code>Double.NaN</code> if the array is empty.\n+     * <p>\n+     * Returns 0 for a single-value (i.e. length = 1) sample.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * <p>\n+     * Does not change the internal state of the statistic.\n+     * \n+     * @param values the input array\n+     * @return the standard deviation of the values or Double.NaN if length = 0\n+     * @throws IllegalArgumentException if the array is null\n+     */  \n+    public double evaluate(final double[] values)  {\n+        return Math.sqrt(variance.evaluate(values));\n+    }\n+    \n+    \n     /**\n      * Returns the Standard Deviation of the entries in the specified portion of\n      * the input array, or <code>Double.NaN</code> if the designated subarray\n      * is empty.\n      * <p>\n      * Returns 0 for a single-value (i.e. length = 1) sample.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * <p>\n+     * Does not change the internal state of the statistic.\n      * \n      * @param values the input array\n      * @param begin index of the first array element to include\n      *  parameters are not valid\n      */\n     public double evaluate(final double[] values, final int begin, final int length)  {\n-       return Math.sqrt(super.evaluate(values, begin, length));\n+       return Math.sqrt(variance.evaluate(values, begin, length));\n     }\n-\n+    \n+    /**\n+     * Returns the Standard Deviation of the entries in the specified portion of\n+     * the input array, using the precomputed mean value.  Returns\n+     * <code>Double.NaN</code> if the designated subarray is empty.\n+     * <p>\n+     * Returns 0 for a single-value (i.e. length = 1) sample.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * <p>\n+     * Does not change the internal state of the statistic.\n+     * \n+     * @param values the input array\n+     * @param mean the precomputed mean value\n+     * @param begin index of the first array element to include\n+     * @param length the number of elements to include\n+     * @return the standard deviation of the values or Double.NaN if length = 0\n+     * @throws IllegalArgumentException if the array is null or the array index\n+     *  parameters are not valid\n+     */\n+    public double evaluate(final double[] values, final double mean,\n+            final int begin, final int length)  {\n+        return Math.sqrt(variance.evaluate(values, mean, begin, length));\n+    }\n }", "timestamp": 1088979002, "metainfo": ""}