{"sha": "99b42215d5e4f6fe1f44fc3fdf7b8f5d105e9ca3", "log": "added constructors with function value accuracy  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n                                final double absoluteAccuracy,\n                                final Method method) {\n         super(relativeAccuracy, absoluteAccuracy);\n+        this.allowed = AllowedSolutions.ANY_SIDE;\n+        this.method = method;\n+    }\n+\n+    /**\n+     * Construct a solver.\n+     *\n+     * @param relativeAccuracy Maximum relative error.\n+     * @param absoluteAccuracy Maximum absolute error.\n+     * @param functionValueAccuracy Maximum function value error.\n+     * @param method <em>Secant</em>-based root-finding method to use\n+     */\n+    protected BaseSecantSolver(final double relativeAccuracy,\n+                               final double absoluteAccuracy,\n+                               final double functionValueAccuracy,\n+                               final Method method) {\n+        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);\n         this.allowed = AllowedSolutions.ANY_SIDE;\n         this.method = method;\n     }\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java\n  */\n \n package org.apache.commons.math.analysis.solvers;\n+\n \n /**\n  * Implements the <em>Illinois</em> method for root-finding (approximating\n                           final double absoluteAccuracy) {\n         super(relativeAccuracy, absoluteAccuracy, Method.ILLINOIS);\n     }\n+\n+    /**\n+     * Construct a solver.\n+     *\n+     * @param relativeAccuracy relative accuracy\n+     * @param absoluteAccuracy absolute accuracy\n+     * @param functionValueAccuracy Maximum function value error.\n+     */\n+    public IllinoisSolver(final double relativeAccuracy,\n+                          final double absoluteAccuracy,\n+                          final double functionValueAccuracy) {\n+        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy, Method.PEGASUS);\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java\n                          final double absoluteAccuracy) {\n         super(relativeAccuracy, absoluteAccuracy, Method.PEGASUS);\n     }\n+\n+    /**\n+     * Construct a solver.\n+     *\n+     * @param relativeAccuracy relative accuracy\n+     * @param absoluteAccuracy absolute accuracy\n+     * @param functionValueAccuracy Maximum function value error.\n+     */\n+    public PegasusSolver(final double relativeAccuracy,\n+                         final double absoluteAccuracy,\n+                         final double functionValueAccuracy) {\n+        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy, Method.PEGASUS);\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java\n  */\n \n package org.apache.commons.math.analysis.solvers;\n+\n \n /**\n  * Implements the <em>Regula Falsi</em> or <em>False position</em> method for\n                              final double absoluteAccuracy) {\n         super(relativeAccuracy, absoluteAccuracy, Method.REGULA_FALSI);\n     }\n+\n+    /**\n+     * Construct a solver.\n+     *\n+     * @param relativeAccuracy relative accuracy\n+     * @param absoluteAccuracy absolute accuracy\n+     * @param functionValueAccuracy Maximum function value error.\n+     */\n+    public RegulaFalsiSolver(final double relativeAccuracy,\n+                             final double absoluteAccuracy,\n+                             final double functionValueAccuracy) {\n+        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy, Method.PEGASUS);\n+    }\n+\n }\n--- a/src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java\n                 return Double.NaN;\n             }\n             PegasusSolver bracketing =\n-                    new PegasusSolver(solver.getRelativeAccuracy(), solver.getAbsoluteAccuracy());\n+                    new PegasusSolver(solver.getRelativeAccuracy(), solver.getAbsoluteAccuracy(),\n+                                      solver.getFunctionValueAccuracy());\n             return UnivariateRealSolverUtils.forceSide(maxEval - solver.getEvaluations(),\n                                                        f, bracketing, baseRoot, left, right,\n                                                        allowedSolutions);", "timestamp": 1310305716, "metainfo": ""}