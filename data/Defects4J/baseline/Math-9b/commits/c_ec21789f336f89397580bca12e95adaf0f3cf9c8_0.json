{"sha": "ec21789f336f89397580bca12e95adaf0f3cf9c8", "log": "UnivariateStatistic classes should be Serializable since they are used as fields of the Serializable DescriptiveStatistics class  ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/descriptive/UnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/UnivariateStatistic.java\n  */\n package org.apache.commons.math.stat.descriptive;\n \n+import java.io.Serializable;\n+\n /**\n  * Base evaluation interface implemented by all statistics.\n  * <p>\n  * \n  * @version $Revision$ $Date$\n  */\n-public interface UnivariateStatistic {\n+public interface UnivariateStatistic extends Serializable {\n \n     /**\n      * Returns the result of evaluating the statistic over the input array.\n--- a/src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java\n     /**\n      * A new way to compute the mean \n      */\n-    class deepMean implements UnivariateStatistic {\n+    static class deepMean implements UnivariateStatistic {\n+        private static final long serialVersionUID = 9108665370122541953L;\n+\n         public double evaluate(double[] values, int begin, int length) {\n             return 42;\n         }\n     /**\n      * Test percentile implementation - wraps a Percentile\n      */\n-    class goodPercentile implements UnivariateStatistic {\n-        Percentile percentile = new Percentile();\n+    static class goodPercentile implements UnivariateStatistic {\n+        private static final long serialVersionUID = 801005145532790795L;\n+        private Percentile percentile = new Percentile();\n         public void setQuantile(double quantile) {\n             percentile.setQuantile(quantile);\n         }\n             return percentile.evaluate(values, begin, length);\n         }\n         public double evaluate(double[] values) {\n-            return evaluate(values);\n+            return percentile.evaluate(values);\n         }  \n     }\n     \n      * Test percentile subclass - another \"new math\" impl\n      * Always returns currently set quantile\n      */\n-    class subPercentile extends Percentile {\n+    static class subPercentile extends Percentile {\n         public double evaluate(double[] values, int begin, int length) {\n             return getQuantile();\n         }\n     /**\n      * \"Bad\" test percentile implementation - no setQuantile\n      */\n-    class badPercentile implements UnivariateStatistic {\n-        Percentile percentile = new Percentile();\n+    static class badPercentile implements UnivariateStatistic {\n+        private static final long serialVersionUID = -707437653388052183L;\n+        private Percentile percentile = new Percentile();\n         public double evaluate(double[] values, int begin, int length) {\n             return percentile.evaluate(values, begin, length);\n         }\n         public double evaluate(double[] values) {\n-            return evaluate(values);\n+            return percentile.evaluate(values);\n         }  \n     }\n }\n--- a/src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java\n         super(name);\n         transformers = new TransformerMap();\n \n-        transformers.putTransformer(Foo.class, new NumberTransformer() {\n-            public double transform(Object o) {\n-                return Double.parseDouble(((Foo) o).heresFoo());\n-            }\n-        });\n-\n-        transformers.putTransformer(Bar.class, new NumberTransformer() {\n-            public double transform(Object o) {\n-                return Double.parseDouble(((Bar) o).heresBar());\n-            }\n-\n-        });\n+        transformers.putTransformer(Foo.class, new FooTransformer());\n+\n+        transformers.putTransformer(Bar.class, new BarTransformer());\n \n     }\n \n         }\n     }\n \n+    public static final class FooTransformer implements NumberTransformer {\n+        private static final long serialVersionUID = -4252248129291326127L;\n+        public double transform(Object o) {\n+            return Double.parseDouble(((Foo) o).heresFoo());\n+        }\n+    }\n+\n     public static final class Bar {\n         public String heresBar() {\n             return \"12.0\";\n         }\n     }\n+\n+    public static final class BarTransformer implements NumberTransformer {\n+        private static final long serialVersionUID = -1768345377764262043L;\n+        public double transform(Object o) {\n+            return Double.parseDouble(((Bar) o).heresBar());\n+        }\n+    }\n+\n }\n--- a/src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java\n      * Bogus mean implementation to test setter injection.\n      * Returns the sum instead of the mean.\n      */\n-    class sumMean implements StorelessUnivariateStatistic {   \n+    static class sumMean implements StorelessUnivariateStatistic {   \n+        private static final long serialVersionUID = 6492471391340853423L;\n         private double sum = 0;\n         private long n = 0;\n         public double evaluate(double[] values, int begin, int length) {", "timestamp": 1200173710, "metainfo": ""}