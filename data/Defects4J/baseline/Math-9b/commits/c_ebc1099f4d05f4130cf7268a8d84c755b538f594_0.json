{"sha": "ebc1099f4d05f4130cf7268a8d84c755b538f594", "log": "Added more random tests for SchurTransformer.  ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java\n \n package org.apache.commons.math3.linear;\n \n+import java.util.Random;\n+\n+import org.apache.commons.math3.distribution.NormalDistribution;\n import org.junit.Test;\n import org.junit.Assert;\n \n         checkAEqualPTPt(MatrixUtils.createRealMatrix(testRandom));\n    }\n \n-    private void checkAEqualPTPt(RealMatrix matrix) {\n-        SchurTransformer transformer = new SchurTransformer(matrix);\n-        RealMatrix p  = transformer.getP();\n-        RealMatrix t  = transformer.getT();\n-        RealMatrix pT = transformer.getPT();\n-        \n-        RealMatrix result = p.multiply(t).multiply(pT);\n-\n-        double norm = result.subtract(matrix).getNorm();\n-        Assert.assertEquals(0, norm, 4.0e-14);\n-    }\n-\n     @Test\n     public void testPOrthogonal() {\n         checkOrthogonal(new SchurTransformer(MatrixUtils.createRealMatrix(testSquare5)).getP());\n         checkOrthogonal(new SchurTransformer(MatrixUtils.createRealMatrix(testRandom)).getPT());\n     }\n \n-    private void checkOrthogonal(RealMatrix m) {\n-        RealMatrix mTm = m.transpose().multiply(m);\n-        RealMatrix id  = MatrixUtils.createRealIdentityMatrix(mTm.getRowDimension());\n-        Assert.assertEquals(0, mTm.subtract(id).getNorm(), 1.0e-14);\n-    }\n-\n     @Test\n     public void testSchurForm() {\n         checkSchurForm(new SchurTransformer(MatrixUtils.createRealMatrix(testSquare5)).getT());\n         checkSchurForm(new SchurTransformer(MatrixUtils.createRealMatrix(testSquare3)).getT());\n         checkSchurForm(new SchurTransformer(MatrixUtils.createRealMatrix(testRandom)).getT());\n+    }\n+\n+    @Test\n+    public void testRandomData() {\n+        for (int run = 0; run < 100; run++) {\n+            Random r = new Random(System.currentTimeMillis());\n+\n+            // matrix size\n+            int size = r.nextInt(20) + 4;\n+\n+            double[][] data = new double[size][size];\n+            for (int i = 0; i < size; i++) {\n+                for (int j = 0; j < size; j++) {\n+                    data[i][j] = r.nextInt(100);\n+                }\n+            }\n+\n+            RealMatrix m = MatrixUtils.createRealMatrix(data);\n+            RealMatrix s = checkAEqualPTPt(m);\n+            checkSchurForm(s);\n+        }\n+    }\n+\n+    @Test\n+    public void testRandomDataNormalDistribution() {\n+        for (int run = 0; run < 100; run++) {\n+            Random r = new Random(System.currentTimeMillis());\n+            NormalDistribution dist = new NormalDistribution(0.0, r.nextDouble() * 5);\n+\n+            // matrix size\n+            int size = r.nextInt(20) + 4;\n+\n+            double[][] data = new double[size][size];\n+            for (int i = 0; i < size; i++) {\n+                for (int j = 0; j < size; j++) {\n+                    data[i][j] = dist.sample();\n+                }\n+            }\n+\n+            RealMatrix m = MatrixUtils.createRealMatrix(data);\n+            RealMatrix s = checkAEqualPTPt(m);\n+            checkSchurForm(s);\n+        }\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////\n+    // Test helpers\n+    ///////////////////////////////////////////////////////////////////////////\n+\n+    private RealMatrix checkAEqualPTPt(RealMatrix matrix) {\n+        SchurTransformer transformer = new SchurTransformer(matrix);\n+        RealMatrix p  = transformer.getP();\n+        RealMatrix t  = transformer.getT();\n+        RealMatrix pT = transformer.getPT();\n+        \n+        RealMatrix result = p.multiply(t).multiply(pT);\n+\n+        double norm = result.subtract(matrix).getNorm();\n+        Assert.assertEquals(0, norm, 1.0e-10);\n+        \n+        return t;\n+    }\n+\n+    private void checkOrthogonal(RealMatrix m) {\n+        RealMatrix mTm = m.transpose().multiply(m);\n+        RealMatrix id  = MatrixUtils.createRealIdentityMatrix(mTm.getRowDimension());\n+        Assert.assertEquals(0, mTm.subtract(id).getNorm(), 1.0e-14);\n     }\n \n     private void checkSchurForm(final RealMatrix m) {", "timestamp": 1342559434, "metainfo": ""}