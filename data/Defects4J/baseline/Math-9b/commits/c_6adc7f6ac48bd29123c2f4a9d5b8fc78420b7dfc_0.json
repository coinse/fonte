{"sha": "6adc7f6ac48bd29123c2f4a9d5b8fc78420b7dfc", "log": "Added Taylor expansion for DSCompiler.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n         }\n     }\n \n-    /** Evaluate Taylor expansion a derivative structure.\n+    /** Evaluate Taylor expansion of a derivative structure.\n      * @param ds array holding the derivative structure \n      * @param dsOffset offset of the derivative structure in its array\n-     * @param offsets parameters offsets (dx, dy, ...)\n-     * @return value of the Taylor expansion at x+dx, y.dy, ...\n-     */\n-    public double taylor(final double[] ds, final int dsOffset, final double ... offsets) {\n-        // TODO\n-        return Double.NaN;\n+     * @param delta parameters offsets (&Delta;x, &Delta;y, ...)\n+     * @return value of the Taylor expansion at x + &Delta;x, y + &Delta;y, ...\n+     */\n+    public double taylor(final double[] ds, final int dsOffset, final double ... delta) {\n+        double value = 0;\n+        for (int i = getSize() - 1; i >= 0; --i) {\n+            final int[] orders = getPartialDerivativeOrders(i);\n+            double term = ds[dsOffset + i];\n+            for (int k = 0; k < orders.length; ++k) {\n+                if (orders[k] > 0) {\n+                    term *= FastMath.pow(delta[k], orders[k]) / ArithmeticUtils.factorial(orders[k]);\n+                }\n+            }\n+            value += term;\n+        }\n+        return value;\n     }\n \n     /** Check rules set compatibility.\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java\n     }\n \n     /** Evaluate Taylor expansion a derivative structure.\n-     * @param offsets parameters offsets (dx, dy, ...)\n-     * @return value of the Taylor expansion at x+dx, y.dy, ...\n-     */\n-    public double taylor(final double ... offsets) {\n-        return compiler.taylor(data, 0, offsets);\n+     * @param delta parameters offsets (&Delta;x, &Delta;y, ...)\n+     * @return value of the Taylor expansion at x + &Delta;x, y + &Delta;y, ...\n+     */\n+    public double taylor(final double ... delta) {\n+        return compiler.taylor(data, 0, delta);\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java\n     }\n \n     @Test\n+    public void testTaylorPolynomial() {\n+        for (double x = 0; x < 1.2; x += 0.1) {\n+            DerivativeStructure dsX = new DerivativeStructure(3, 4, 0, x);\n+            for (double y = 0; y < 1.2; y += 0.2) {\n+                DerivativeStructure dsY = new DerivativeStructure(3, 4, 1, y);\n+                for (double z = 0; z < 1.2; z += 0.2) {\n+                    DerivativeStructure dsZ = new DerivativeStructure(3, 4, 2, z);\n+                    DerivativeStructure f = dsX.multiply(dsY).add(dsZ).multiply(dsX).multiply(dsY);\n+                    for (double dx = -0.2; dx < 0.2; dx += 0.2) {\n+                        for (double dy = -0.2; dy < 0.2; dy += 0.1) {\n+                            for (double dz = -0.2; dz < 0.2; dz += 0.1) {\n+                                double ref = (x + dx) * (y + dy) * ((x + dx) * (y + dy) + (z + dz));\n+                                Assert.assertEquals(ref, f.taylor(dx, dy, dz), 2.0e-15);\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testTaylorAtan2() {\n+        double[] expected = new double[] { 0.214, 0.0241, 0.00422, 6.48e-4, 8.04e-5 };\n+        double x0 =  0.1;\n+        double y0 = -0.3;\n+        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n+            DerivativeStructure dsX   = new DerivativeStructure(2, maxOrder, 0, x0);\n+            DerivativeStructure dsY   = new DerivativeStructure(2, maxOrder, 1, y0);\n+            DerivativeStructure atan2 = DerivativeStructure.atan2(dsY, dsX);\n+            double maxError = 0;\n+            for (double dx = -0.05; dx < 0.05; dx += 0.001) {\n+                for (double dy = -0.05; dy < 0.05; dy += 0.001) {\n+                    double ref = FastMath.atan2(y0 + dy, x0 + dx);\n+                    maxError = FastMath.max(maxError, FastMath.abs(ref - atan2.taylor(dx, dy)));\n+                }\n+            }\n+            Assert.assertEquals(0.0, expected[maxOrder] - maxError, 0.01 * expected[maxOrder]);\n+        }\n+    }\n+\n+    @Test\n     public void testField() {\n         for (int maxOrder = 1; maxOrder < 5; ++maxOrder) {\n             DerivativeStructure x = new DerivativeStructure(3, maxOrder, 0, 1.0);", "timestamp": 1344867257, "metainfo": ""}