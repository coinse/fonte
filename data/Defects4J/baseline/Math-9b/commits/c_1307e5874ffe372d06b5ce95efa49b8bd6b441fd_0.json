{"sha": "1307e5874ffe372d06b5ce95efa49b8bd6b441fd", "log": "Added javadoc comments replete with Mathworld references.   ", "commit": "\n--- a/src/java/org/apache/commons/math/complex/ComplexMath.java\n+++ b/src/java/org/apache/commons/math/complex/ComplexMath.java\n import org.apache.commons.math.util.MathUtils;\n \n /**\n+ * Implementations of various transcendental functions for\n+ * {@link org.apache.commons.math.complex.Complex} arguments.\n+ * \n  * Reference:\n- *   http://myweb.lmu.edu/dmsmith/ZMLIB.pdf\n- * \n- * @version $Revision: 1.7 $ $Date: 2004/02/21 21:35:14 $\n+ * <ul>\n+ * <li><a href=\"http://myweb.lmu.edu/dmsmith/ZMLIB.pdf\">\n+ * Multiple Precision Complex Arithmetic and Functions</a></li>\n+ * </ul>\n+ * \n+ * @version $Revision: 1.8 $ $Date: 2004/04/23 18:51:03 $\n  */\n public class ComplexMath {\n     \n     /**\n-     * \n+     * Default constructor.\n      */\n     private ComplexMath() {\n         super();\n     }\n     \n     /**\n-     * \n+     * Compute the <a href=\"http://mathworld.wolfram.com/InverseCosine.html\">\n+     * inverse cosine</a> for the given complex argument.\n+     * @param z the value whose inverse cosine is to be returned.\n+     * @return the inverse cosine of <code>z</code>.\n      */\n     public static Complex acos(Complex z) {\n         if (z.isNaN()) {\n     }\n     \n     /**\n-     * \n+     * Compute the <a href=\"http://mathworld.wolfram.com/InverseSine.html\">\n+     * inverse sine</a> for the given complex argument.\n+     * @param z the value whose inverse sine is to be returned.\n+     * @return the inverse sine of <code>z</code>.\n      */\n     public static Complex asin(Complex z) {\n         if (z.isNaN()) {\n     }\n     \n     /**\n-     * \n+     * Compute the <a href=\"http://mathworld.wolfram.com/InverseTangent.html\">\n+     * inverse tangent</a> for the given complex argument.\n+     * @param z the value whose inverse tangent is to be returned.\n+     * @return the inverse tangent of <code>z</code>.\n      */\n     public static Complex atan(Complex z) {\n         if (z.isNaN()) {\n     }\n     \n     /**\n-     * \n+     * Compute the <a href=\"http://mathworld.wolfram.com/Cosine.html\">cosine</a>\n+     * for the given complex argument.\n+     * @param z the value whose cosine is to be returned.\n+     * @return the cosine of <code>z</code>.\n      */\n     public static Complex cos(Complex z) {\n         if (z.isNaN()) {\n     }\n     \n     /**\n-     * \n+     * Compute the <a href=\"http://mathworld.wolfram.com/HyperbolicCosine.html\">\n+     * hyperbolic cosine</a> for the given complex argument.\n+     * @param z the value whose hyperbolic cosine is to be returned.\n+     * @return the hyperbolic cosine of <code>z</code>.\n      */\n     public static Complex cosh(Complex z) {\n         if (z.isNaN()) {\n     }\n     \n     /**\n-     * \n+     * Compute the\n+     * <a href=\"http://mathworld.wolfram.com/ExponentialFunction.html\">\n+     * exponential function</a> for the given complex argument.\n+     * @param z the value.\n+     * @return <i>e</i><sup><code>z</code></sup>.\n      */\n     public static Complex exp(Complex z) {\n         if (z.isNaN()) {\n     }\n     \n     /**\n-     * \n+     * Compute the <a href=\"http://mathworld.wolfram.com/NaturalLogarithm.html\">\n+     * natural logarithm</a> for the given complex argument.\n+     * @param z the value.\n+     * @return ln <code>z</code>.\n      */\n     public static Complex log(Complex z) {\n         if (z.isNaN()) {\n             Math.atan2(z.getImaginary(), z.getReal()));        \n     }\n     \n-    /**\n-     * \n+    \n+    /**\n+     * Returns of value of <code>y</code> raised to the power of <code>x</code>.\n+     * @param y the base.\n+     * @param x the exponent.\n+     * @return <code>y</code><sup><code>z</code></sup>.\n      */\n     public static Complex pow(Complex y, Complex x) {\n         return exp(x.multiply(log(y)));\n     }\n     \n     /**\n-     * \n+     * Compute the <a href=\"http://mathworld.wolfram.com/Sine.html\">sine</a>\n+     * for the given complex argument.\n+     * @param z the value whose sine is to be returned.\n+     * @return the sine of <code>z</code>.\n      */\n     public static Complex sin(Complex z) {\n         if (z.isNaN()) {\n     }\n     \n     /**\n-     * \n+     * Compute the <a href=\"http://mathworld.wolfram.com/HyperbolicSine.html\">\n+     * hyperbolic sine</a> for the given complex argument.\n+     * @param z the value whose hyperbolic sine is to be returned.\n+     * @return the hyperbolic sine of <code>z</code>.\n      */\n     public static Complex sinh(Complex z) {\n         if (z.isNaN()) {\n     }\n     \n     /**\n-     * \n+     * Compute the <a href=\"http://mathworld.wolfram.com/SquareRoot.html\">squre\n+     * root</a> for the given complex argument.\n+     * @param z the value whose square root is to be returned.\n+     * @return the square root of <code>z</code>.\n      */\n     public static Complex sqrt(Complex z) {\n         if (z.isNaN()) {\n     }\n     \n     /**\n-     * Returns the square root of 1 - z^2.\n-     * @return the square root of 1 - z^2.\n+     * Compute the <a href=\"http://mathworld.wolfram.com/SquareRoot.html\">squre\n+     * root of 1 - <code>z</code><sup>2</sup> for the given complex argument.\n+     * @param z the value.\n+     * @return the square root of 1 - <code>z</code><sup>2</sup>.\n      */\n     public static Complex sqrt1z(Complex z) {\n         return sqrt(Complex.ONE.subtract(z.multiply(z)));\n     }\n     \n     /**\n-     * \n+     * Compute the <a href=\"http://mathworld.wolfram.com/Tangent.html\">\n+     * tangent</a> for the given complex argument.\n+     * @param z the value whose tangent is to be returned.\n+     * @return the tangent of <code>z</code>.\n      */\n     public static Complex tan(Complex z) {\n         if (z.isNaN()) {\n     }\n     \n     /**\n-     * \n+     * Compute the\n+     * <a href=\"http://mathworld.wolfram.com/HyperbolicTangent.html\">\n+     * hyperbolic tangent</a> for the given complex argument.\n+     * @param z the value whose hyperbolic tangent is to be returned.\n+     * @return the hyperbolic tangent of <code>z</code>.\n      */\n     public static Complex tanh(Complex z) {\n         if (z.isNaN()) {", "timestamp": 1082746263, "metainfo": ""}