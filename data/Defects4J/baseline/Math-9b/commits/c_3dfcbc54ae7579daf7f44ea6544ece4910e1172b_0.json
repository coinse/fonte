{"sha": "3dfcbc54ae7579daf7f44ea6544ece4910e1172b", "log": "added a test ensuring the part of the symmetric matrix below the diagonal is never used  ", "commit": "\n--- a/src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java\n+++ b/src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java\n  */\n \n package org.apache.commons.math.linear;\n+\n+import java.util.Arrays;\n \n import junit.framework.Test;\n import junit.framework.TestCase;\n         RealMatrix qT = transformer.getQT();\n         RealMatrix t  = transformer.getT();\n         double norm = q.multiply(t).multiply(qT).subtract(matrix).getNorm();\n+        assertEquals(0, norm, 4.0e-15);\n+    }\n+\n+    public void testNoAccessBelowDiagonal() {\n+        checkNoAccessBelowDiagonal(testSquare5);\n+        checkNoAccessBelowDiagonal(testSquare3);\n+    }\n+\n+    private void checkNoAccessBelowDiagonal(double[][] data) {\n+        double[][] modifiedData = new double[data.length][];\n+        for (int i = 0; i < data.length; ++i) {\n+            modifiedData[i] = data[i].clone();\n+            Arrays.fill(modifiedData[i], 0, i, Double.NaN);\n+        }\n+        RealMatrix matrix = new RealMatrixImpl(modifiedData, false);\n+        TriDiagonalTransformer transformer = new TriDiagonalTransformer(matrix);\n+        RealMatrix q  = transformer.getQ();\n+        RealMatrix qT = transformer.getQT();\n+        RealMatrix t  = transformer.getT();\n+        double norm = q.multiply(t).multiply(qT).subtract(new RealMatrixImpl(data, false)).getNorm();\n         assertEquals(0, norm, 4.0e-15);\n     }\n ", "timestamp": 1223221022, "metainfo": ""}