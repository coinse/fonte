{"sha": "11b686c1ab48fd917e45732722deb8378bd56c6d", "log": "allow either specific or generic formats to be null  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/exception/util/MessageFactory.java\n+++ b/src/main/java/org/apache/commons/math/exception/util/MessageFactory.java\n      * an argument list.\n      *\n      * @param locale Locale in which the message should be translated.\n-     * @param specific Format specifier.\n-     * @param general Format specifier.\n+     * @param specific Format specifier (may be null).\n+     * @param general Format specifier (may be null).\n      * @param arguments Format arguments. They will be substituted first in\n      * the {@code specific} format specifier, then the remaining arguments\n      * will be substituted in the {@code general} format specifier.\n                                       Object ... arguments) {\n \n         final StringBuilder sb = new StringBuilder();\n-        final MessageFormat generalFmt  = new MessageFormat(general.getLocalizedString(locale), locale);\n         Object[] generalArgs = arguments;\n \n         if (specific != null) {\n \n             // build the message\n             sb.append(specificFmt.format(specificArgs));\n-            sb.append(\": \");\n \n         }\n \n-        sb.append(generalFmt.format(generalArgs));\n+        if (general != null) {\n+            if (specific != null) {\n+                sb.append(\": \");\n+            }\n+            final MessageFormat generalFmt  = new MessageFormat(general.getLocalizedString(locale), locale);\n+            sb.append(generalFmt.format(generalArgs));\n+        }\n \n         return sb.toString();\n     }\n--- a/src/test/java/org/apache/commons/math/exception/util/MessageFactoryTest.java\n+++ b/src/test/java/org/apache/commons/math/exception/util/MessageFactoryTest.java\n public class MessageFactoryTest {\n \n     @Test\n-    public void testSpecificGeneric() {\n+    public void testSpecificGeneral() {\n         Localizable specific = new DummyLocalizable(\"specific {0} - {1} - {2}\");\n         Localizable general  = new DummyLocalizable(\"general  {0} / {1}\");\n         String message = MessageFactory.buildMessage(Locale.FRENCH, specific, general,\n         Assert.assertEquals(\"specific 0 - 1 - 2: general  a / b\", message);\n     }\n \n+    @Test\n+    public void testNullSpecific() {\n+        Localizable general  = new DummyLocalizable(\"general  {0} / {1}\");\n+        String message = MessageFactory.buildMessage(Locale.FRENCH, null, general,\n+                                                     'a', 'b');\n+        Assert.assertEquals(\"general  a / b\", message);\n+    }\n+\n+    @Test\n+    public void testNullGeneral() {\n+        Localizable specific = new DummyLocalizable(\"specific {0} - {1} - {2}\");\n+        String message = MessageFactory.buildMessage(Locale.FRENCH, specific, null,\n+                                                     0, 1, 2);\n+        Assert.assertEquals(\"specific 0 - 1 - 2\", message);\n+    }\n+\n+\n+    @Test\n+    public void testNull() {\n+        String message = MessageFactory.buildMessage(Locale.FRENCH, null, null, \"nothing\");\n+        Assert.assertEquals(\"\", message);\n+    }\n+\n }", "timestamp": 1289748768, "metainfo": ""}