{"sha": "527922a3865e9f07cbf3f102b9201987f505c554", "log": "MATH-887 Changed \"computeWeightedJacobian\" to return exactly that, instead of the weighted Jacobian matrix multiplied by -1. Changed subclasses accordingly.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n      */\n     @Deprecated\n     protected void updateJacobian() {\n-        computeWeightedJacobian(point);\n+        final RealMatrix weightedJacobian = computeWeightedJacobian(point);\n+        weightedResidualJacobian = weightedJacobian.scalarMultiply(-1).getData();\n     }\n \n     /**\n             }\n         }\n \n-        // XXX What is the purpose of the multiplication by -1?\n-        final RealMatrix weightedJacobian\n-            = weightMatrixSqrt.multiply(MatrixUtils.createRealMatrix(jacobianData)).scalarMultiply(-1);\n-\n-        // XXX For backwards-compatibility (field \"weightedResidualJacobian\"\n-        // must be removed in 4.0).\n-        weightedResidualJacobian = weightedJacobian.getData();\n-\n-        return weightedJacobian;\n+        return weightMatrixSqrt.multiply(MatrixUtils.createRealMatrix(jacobianData));\n     }\n \n     /**\n      * @throws org.apache.commons.math3.exception.TooManyEvaluationsException\n      * if the maximal number of evaluations is exceeded.\n      * @deprecated As of 3.1. Please use {@link #computeResiduals(double[])},\n-     * {@link #computeObjectiveValue(double[])} and {@link #computeCost(double[])}\n-     * instead.\n+     * {@link #computeObjectiveValue(double[])}, {@link #computeCost(double[])}\n+     * and {@link #setCost(double)} instead.\n      */\n     @Deprecated\n     protected void updateResidualsAndCost() {\n         // Compute cost.\n         cost = computeCost(res);\n \n-        // Compute weighted residuals. XXX To be moved to \"LevenbergMarquardtOptimizer\".\n+        // Compute weighted residuals.\n         final ArrayRealVector residuals = new ArrayRealVector(res);\n         weightedResiduals = weightMatrixSqrt.operate(residuals).toArray();\n     }\n--- a/src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java\n \n                 final double[] grad   = weightedJacobian.getRow(i);\n                 final double weight   = residualsWeights[i];\n-                // XXX Minus sign could be left out if \"weightedJacobian\"\n-                // would be defined differently.\n-                final double residual = -currentResiduals[i];\n+                final double residual = currentResiduals[i];\n \n                 // compute the normal equation\n                 final double wr = weight * residual;\n--- a/src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java\n      * pivoting. The diagonal elements of the R matrix are therefore also in\n      * non-increasing absolute values order.</p>\n      *\n-     * @param jacobian Weighte Jacobian matrix at the current point.\n+     * @param jacobian Weighted Jacobian matrix at the current point.\n      * @exception ConvergenceException if the decomposition cannot be performed\n      */\n     private void qrDecomposition(RealMatrix jacobian) throws ConvergenceException {\n-        weightedJacobian = jacobian.getData();\n+        // Code in this class assumes that the weighted Jacobian is -(W^(1/2) J),\n+        // hence the multiplication by -1.\n+        weightedJacobian = jacobian.scalarMultiply(-1).getData();\n+\n         final int nR = weightedJacobian.length;\n         final int nC = weightedJacobian[0].length;\n ", "timestamp": 1352720200, "metainfo": ""}