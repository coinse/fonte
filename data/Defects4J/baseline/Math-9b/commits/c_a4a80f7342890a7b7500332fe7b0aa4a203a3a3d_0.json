{"sha": "a4a80f7342890a7b7500332fe7b0aa4a203a3a3d", "log": "Javadoc, formatting.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n /**\n  * Implements Chi-Square test statistics defined in the {@link ChiSquareTest} interface.\n  *\n- * @version $Revision: 1.6 $ $Date: 2004/06/14 23:26:53 $\n+ * @version $Revision: 1.7 $ $Date: 2004/06/20 02:54:05 $\n  */\n public class ChiSquareTestImpl implements ChiSquareTest {\n     \n     /** Cached DistributionFactory used to create ChiSquaredDistribution instances */\n     private DistributionFactory distributionFactory = null;\n   \n+    /**\n+     * Construct a ChiSquareTestImpl \n+     */\n     public ChiSquareTestImpl() {\n         super();\n     }\n         double sumSq = 0.0d;\n         double dev = 0.0d;\n         if ((expected.length < 2) || (expected.length != observed.length)) {\n-            throw new IllegalArgumentException(\"observed, expected array lengths incorrect\");\n+            throw new IllegalArgumentException(\n+                    \"observed, expected array lengths incorrect\");\n         }\n         if (!isPositive(expected) || !isNonNegative(observed)) {\n             throw new IllegalArgumentException(\n     public double chiSquareTest(double[] expected, long[] observed)\n         throws IllegalArgumentException, MathException {\n         ChiSquaredDistribution chiSquaredDistribution =\n-            getDistributionFactory().createChiSquareDistribution((double) expected.length - 1);\n-        return 1 - chiSquaredDistribution.cumulativeProbability(chiSquare(expected, observed));\n+            getDistributionFactory().createChiSquareDistribution(\n+                    (double) expected.length - 1);\n+        return 1 - chiSquaredDistribution.cumulativeProbability(\n+                chiSquare(expected, observed));\n     }\n \n     /**\n      * @throws IllegalArgumentException if preconditions are not met\n      * @throws MathException if an error occurs performing the test\n      */\n-    public boolean chiSquareTest(double[] expected, long[] observed, double alpha)\n-        throws IllegalArgumentException, MathException {\n+    public boolean chiSquareTest(double[] expected, long[] observed, \n+            double alpha) throws IllegalArgumentException, MathException {\n         if ((alpha <= 0) || (alpha > 0.5)) {\n-            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n+            throw new IllegalArgumentException(\n+                    \"bad significance level: \" + alpha);\n         }\n         return (chiSquareTest(expected, observed) < alpha);\n     }\n         for (int row = 0; row < nRows; row++) {\n             for (int col = 0; col < nCols; col++) {\n                 expected = (rowSum[row] * colSum[col]) / total;\n-                sumSq += (((double) counts[row][col] - expected) * ((double) counts[row][col] - expected))\n-                    / expected; \n+                sumSq += (((double) counts[row][col] - expected) * \n+                        ((double) counts[row][col] - expected)) / expected; \n             }\n         } \n         return sumSq;\n      * throwing IllegalArgumentException if any of these checks fail.\n      * \n      * @param in input 2-way table to check\n-     * @throws IllegalArgumentException\n+     * @throws IllegalArgumentException if the array is not valid\n      */\n     private void checkArray(long[][] in) throws IllegalArgumentException {\n         \n     //---------------------  Protected methods ---------------------------------\n     /**\n      * Gets a DistributionFactory to use in creating ChiSquaredDistribution instances.\n+     * \n+     * @return a DistributionFactory\n      */\n     protected DistributionFactory getDistributionFactory() {\n         if (distributionFactory == null) {", "timestamp": 1087700045, "metainfo": ""}