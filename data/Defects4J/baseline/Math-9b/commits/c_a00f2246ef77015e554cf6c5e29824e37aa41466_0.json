{"sha": "a00f2246ef77015e554cf6c5e29824e37aa41466", "log": "Fixed naming inconsistencies between Interval and IntervalsSet classes.  JIRA: MATH-890  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/Interval.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/Interval.java\n \n     /** Get the lower bound of the interval.\n      * @return lower bound of the interval\n+     * @since 3.1\n      */\n+    public double getInf() {\n+        return lower;\n+    }\n+\n+    /** Get the lower bound of the interval.\n+     * @return lower bound of the interval\n+     * @deprecated as of 3.1, replaced by {@link #getInf()}\n+     */\n+    @Deprecated\n     public double getLower() {\n-        return lower;\n+        return getInf();\n     }\n \n     /** Get the upper bound of the interval.\n      * @return upper bound of the interval\n+     * @since 3.1\n      */\n+    public double getSup() {\n+        return upper;\n+    }\n+\n+    /** Get the upper bound of the interval.\n+     * @return upper bound of the interval\n+     * @deprecated as of 3.1, replaced by {@link #getSup()}\n+     */\n+    @Deprecated\n     public double getUpper() {\n-        return upper;\n+        return getSup();\n+    }\n+\n+    /** Get the size of the interval.\n+     * @return size of the interval\n+     * @since 3.1\n+     */\n+    public double getSize() {\n+        return upper - lower;\n     }\n \n     /** Get the length of the interval.\n      * @return length of the interval\n+     * @deprecated as of 3.1, replaced by {@link #getSize()}\n      */\n+    @Deprecated\n     public double getLength() {\n-        return upper - lower;\n+        return getSize();\n+    }\n+\n+    /** Get the barycenter of the interval.\n+     * @return barycenter of the interval\n+     * @since 3.1\n+     */\n+    public double getBarycenter() {\n+        return 0.5 * (lower + upper);\n     }\n \n     /** Get the midpoint of the interval.\n      * @return midpoint of the interval\n+     * @deprecated as of 3.1, replaced by {@link #getBarycenter()}\n      */\n+    @Deprecated\n     public double getMidPoint() {\n-        return 0.5 * (lower + upper);\n+        return getBarycenter();\n     }\n \n     /** Check a point with respect to the interval.\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet.java\n             double size = 0.0;\n             double sum = 0.0;\n             for (final Interval interval : asList()) {\n-                size += interval.getLength();\n-                sum  += interval.getLength() * interval.getMidPoint();\n+                size += interval.getSize();\n+                sum  += interval.getSize() * interval.getBarycenter();\n             }\n             setSize(size);\n             if (Double.isInfinite(size)) {\n             if ((checkPoint(low,  loc) == Location.INSIDE) &&\n                 (checkPoint(high, loc) == Location.INSIDE)) {\n                 // merge the last interval added and the first one of the high sub-tree\n-                x = list.remove(list.size() - 1).getLower();\n+                x = list.remove(list.size() - 1).getInf();\n             }\n             recurseList(high, list, x, upper);\n \n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java\n         final List<Segment> segments = new ArrayList<Segment>();\n \n         for (final Interval interval : list) {\n-            final Vector3D start = line.toSpace(new Vector1D(interval.getLower()));\n-            final Vector3D end   = line.toSpace(new Vector1D(interval.getUpper()));\n+            final Vector3D start = line.toSpace(new Vector1D(interval.getInf()));\n+            final Vector3D end   = line.toSpace(new Vector1D(interval.getSup()));\n             segments.add(new Segment(start, end, line));\n         }\n \n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\n             final Line line      = (Line) sub.getHyperplane();\n             final List<Interval> intervals = ((IntervalsSet) absSub.getRemainingRegion()).asList();\n             for (final Interval i : intervals) {\n-                final Vector2D start = Double.isInfinite(i.getLower()) ?\n-                                      null : (Vector2D) line.toSpace(new Vector1D(i.getLower()));\n-                final Vector2D end   = Double.isInfinite(i.getUpper()) ?\n-                                      null : (Vector2D) line.toSpace(new Vector1D(i.getUpper()));\n+                final Vector2D start = Double.isInfinite(i.getInf()) ?\n+                                      null : (Vector2D) line.toSpace(new Vector1D(i.getInf()));\n+                final Vector2D end   = Double.isInfinite(i.getSup()) ?\n+                                      null : (Vector2D) line.toSpace(new Vector1D(i.getSup()));\n                 if (reversed) {\n                     sorted.insert(new ComparableSegment(end, start, line.getReverse()));\n                 } else {\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java\n         final List<Segment> segments = new ArrayList<Segment>();\n \n         for (final Interval interval : list) {\n-            final Vector2D start = line.toSpace(new Vector1D(interval.getLower()));\n-            final Vector2D end   = line.toSpace(new Vector1D(interval.getUpper()));\n+            final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));\n+            final Vector2D end   = line.toSpace(new Vector1D(interval.getSup()));\n             segments.add(new Segment(start, end, line));\n         }\n \n--- a/src/test/java/org/apache/commons/math3/geometry/euclidean/oned/IntervalTest.java\n+++ b/src/test/java/org/apache/commons/math3/geometry/euclidean/oned/IntervalTest.java\n     @Test\n     public void testInterval() {\n         Interval interval = new Interval(2.3, 5.7);\n-        Assert.assertEquals(3.4, interval.getLength(), 1.0e-10);\n-        Assert.assertEquals(4.0, interval.getMidPoint(), 1.0e-10);\n+        Assert.assertEquals(3.4, interval.getSize(), 1.0e-10);\n+        Assert.assertEquals(4.0, interval.getBarycenter(), 1.0e-10);\n         Assert.assertEquals(Region.Location.BOUNDARY, interval.checkPoint(2.3, 1.0e-10));\n         Assert.assertEquals(Region.Location.BOUNDARY, interval.checkPoint(5.7, 1.0e-10));\n         Assert.assertEquals(Region.Location.OUTSIDE,  interval.checkPoint(1.2, 1.0e-10));\n         Assert.assertEquals(Region.Location.OUTSIDE,  interval.checkPoint(8.7, 1.0e-10));\n         Assert.assertEquals(Region.Location.INSIDE,   interval.checkPoint(3.0, 1.0e-10));\n-        Assert.assertEquals(2.3, interval.getLower(), 1.0e-10);\n-        Assert.assertEquals(5.7, interval.getUpper(), 1.0e-10);\n+        Assert.assertEquals(2.3, interval.getInf(), 1.0e-10);\n+        Assert.assertEquals(5.7, interval.getSup(), 1.0e-10);\n     }\n \n     @Test\n             Assert.assertEquals(Region.Location.INSIDE,\n                                 interval.checkPoint(FastMath.pow(10.0, e), 1.0e-10));\n         }\n-        Assert.assertTrue(Double.isInfinite(interval.getLength()));\n-        Assert.assertEquals(9.0, interval.getLower(), 1.0e-10);\n-        Assert.assertTrue(Double.isInfinite(interval.getUpper()));\n+        Assert.assertTrue(Double.isInfinite(interval.getSize()));\n+        Assert.assertEquals(9.0, interval.getInf(), 1.0e-10);\n+        Assert.assertTrue(Double.isInfinite(interval.getSup()));\n \n     }\n \n     @Test\n     public void testSinglePoint() {\n         Interval interval = new Interval(1.0, 1.0);\n-        Assert.assertEquals(0.0, interval.getLength(), Precision.SAFE_MIN);\n-        Assert.assertEquals(1.0, interval.getMidPoint(), Precision.EPSILON);\n+        Assert.assertEquals(0.0, interval.getSize(), Precision.SAFE_MIN);\n+        Assert.assertEquals(1.0, interval.getBarycenter(), Precision.EPSILON);\n     }\n \n }\n--- a/src/test/java/org/apache/commons/math3/geometry/euclidean/oned/IntervalsSetTest.java\n+++ b/src/test/java/org/apache/commons/math3/geometry/euclidean/oned/IntervalsSetTest.java\n \n         List<Interval> list = set.asList();\n         Assert.assertEquals(3, list.size());\n-        Assert.assertEquals( 1.0, list.get(0).getLower(), 1.0e-10);\n-        Assert.assertEquals( 3.0, list.get(0).getUpper(), 1.0e-10);\n-        Assert.assertEquals( 5.0, list.get(1).getLower(), 1.0e-10);\n-        Assert.assertEquals( 6.0, list.get(1).getUpper(), 1.0e-10);\n-        Assert.assertEquals( 9.0, list.get(2).getLower(), 1.0e-10);\n-        Assert.assertEquals(11.0, list.get(2).getUpper(), 1.0e-10);\n+        Assert.assertEquals( 1.0, list.get(0).getInf(), 1.0e-10);\n+        Assert.assertEquals( 3.0, list.get(0).getSup(), 1.0e-10);\n+        Assert.assertEquals( 5.0, list.get(1).getInf(), 1.0e-10);\n+        Assert.assertEquals( 6.0, list.get(1).getSup(), 1.0e-10);\n+        Assert.assertEquals( 9.0, list.get(2).getInf(), 1.0e-10);\n+        Assert.assertEquals(11.0, list.get(2).getSup(), 1.0e-10);\n \n     }\n \n--- a/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java\n+++ b/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java\n         List<Interval> i1 = ((IntervalsSet) s1.getRemainingRegion()).asList();\n         Assert.assertEquals(2, i1.size());\n         Interval v10 = i1.get(0);\n-        Vector2D p10Lower = l1.toSpace(new Vector1D(v10.getLower()));\n+        Vector2D p10Lower = l1.toSpace(new Vector1D(v10.getInf()));\n         Assert.assertEquals(0.0, p10Lower.getX(), 1.0e-10);\n         Assert.assertEquals(1.5, p10Lower.getY(), 1.0e-10);\n-        Vector2D p10Upper = l1.toSpace(new Vector1D(v10.getUpper()));\n+        Vector2D p10Upper = l1.toSpace(new Vector1D(v10.getSup()));\n         Assert.assertEquals(0.5, p10Upper.getX(), 1.0e-10);\n         Assert.assertEquals(2.0, p10Upper.getY(), 1.0e-10);\n         Interval v11 = i1.get(1);\n-        Vector2D p11Lower = l1.toSpace(new Vector1D(v11.getLower()));\n+        Vector2D p11Lower = l1.toSpace(new Vector1D(v11.getInf()));\n         Assert.assertEquals(1.0, p11Lower.getX(), 1.0e-10);\n         Assert.assertEquals(2.5, p11Lower.getY(), 1.0e-10);\n-        Vector2D p11Upper = l1.toSpace(new Vector1D(v11.getUpper()));\n+        Vector2D p11Upper = l1.toSpace(new Vector1D(v11.getSup()));\n         Assert.assertEquals(1.5, p11Upper.getX(), 1.0e-10);\n         Assert.assertEquals(3.0, p11Upper.getY(), 1.0e-10);\n \n         List<Interval> i2 = ((IntervalsSet) s2.getRemainingRegion()).asList();\n         Assert.assertEquals(1, i2.size());\n         Interval v20 = i2.get(0);\n-        Vector2D p20Lower = l2.toSpace(new Vector1D(v20.getLower()));\n+        Vector2D p20Lower = l2.toSpace(new Vector1D(v20.getInf()));\n         Assert.assertEquals(1.0, p20Lower.getX(), 1.0e-10);\n         Assert.assertEquals(2.0, p20Lower.getY(), 1.0e-10);\n-        Vector2D p20Upper = l2.toSpace(new Vector1D(v20.getUpper()));\n+        Vector2D p20Upper = l2.toSpace(new Vector1D(v20.getSup()));\n         Assert.assertEquals(3.0, p20Upper.getX(), 1.0e-10);\n         Assert.assertEquals(2.0, p20Upper.getY(), 1.0e-10);\n ", "timestamp": 1352105018, "metainfo": ""}