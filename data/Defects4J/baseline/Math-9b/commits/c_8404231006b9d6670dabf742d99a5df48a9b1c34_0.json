{"sha": "8404231006b9d6670dabf742d99a5df48a9b1c34", "log": "fixed a few remaining unnecessary copy added more constructors  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\n      * @param v1 first vector (will be put in front of the new vector)\n      * @param v2 second vector (will be put at back of the new vector)\n      */\n-    public ArrayRealVector(ArrayRealVector v1, double[] v2) {\n-        data = new double[v1.data.length + v2.length];\n-        System.arraycopy(v1.data, 0, data, 0, v1.data.length);\n-        System.arraycopy(v2, 0, data, v1.data.length, v2.length);\n+    public ArrayRealVector(ArrayRealVector v1, RealVector v2) {\n+        final int l1 = v1.data.length;\n+        final int l2 = v2.getDimension();\n+        data = new double[l1 + l2];\n+        System.arraycopy(v1.data, 0, data, 0, l1);\n+        for (int i = 0; i < l2; ++i) {\n+            data[l1 + i] = v2.getEntry(i);\n+        }\n     }\n \n     /**\n      * @param v1 first vector (will be put in front of the new vector)\n      * @param v2 second vector (will be put at back of the new vector)\n      */\n-    public ArrayRealVector(double[] v1, ArrayRealVector v2) {\n-        data = new double[v1.length + v2.data.length];\n-        System.arraycopy(v1, 0, data, 0, v1.length);\n-        System.arraycopy(v2.data, 0, data, v1.length, v2.data.length);\n+    public ArrayRealVector(RealVector v1, ArrayRealVector v2) {\n+        final int l1 = v1.getDimension();\n+        final int l2 = v2.data.length;\n+        data = new double[l1 + l2];\n+        for (int i = 0; i < l1; ++i) {\n+            data[i] = v1.getEntry(i);\n+        }\n+        System.arraycopy(v2.data, 0, data, l1, l2);\n     }\n \n     /**\n      * @param v1 first vector (will be put in front of the new vector)\n      * @param v2 second vector (will be put at back of the new vector)\n      */\n+    public ArrayRealVector(ArrayRealVector v1, double[] v2) {\n+        final int l1 = v1.getDimension();\n+        final int l2 = v2.length;\n+        data = new double[l1 + l2];\n+        System.arraycopy(v1.data, 0, data, 0, l1);\n+        System.arraycopy(v2, 0, data, l1, l2);\n+    }\n+\n+    /**\n+     * Construct a vector by appending one vector to another vector.\n+     * @param v1 first vector (will be put in front of the new vector)\n+     * @param v2 second vector (will be put at back of the new vector)\n+     */\n+    public ArrayRealVector(double[] v1, ArrayRealVector v2) {\n+        final int l1 = v1.length;\n+        final int l2 = v2.getDimension();\n+        data = new double[l1 + l2];\n+        System.arraycopy(v1, 0, data, 0, l1);\n+        System.arraycopy(v2.data, 0, data, l1, l2);\n+    }\n+\n+    /**\n+     * Construct a vector by appending one vector to another vector.\n+     * @param v1 first vector (will be put in front of the new vector)\n+     * @param v2 second vector (will be put at back of the new vector)\n+     */\n     public ArrayRealVector(double[] v1, double[] v2) {\n-        data = new double[v1.length + v2.length];\n-        System.arraycopy(v1, 0, data, 0, v1.length);\n-        System.arraycopy(v2, 0, data, v1.length, v2.length);\n+        final int l1 = v1.length;\n+        final int l2 = v2.length;\n+        data = new double[l1 + l2];\n+        System.arraycopy(v1, 0, data, 0, l1);\n+        System.arraycopy(v2, 0, data, l1, l2);\n     }\n \n     /** {@inheritDoc} */\n \n     /** {@inheritDoc} */\n     public RealVector add(RealVector v)\n-    throws IllegalArgumentException {\n-        if(v instanceof ArrayRealVector) {\n+        throws IllegalArgumentException {\n+        if (v instanceof ArrayRealVector) {\n             return add((ArrayRealVector) v);\n         } else {\n             checkVectorDimensions(v);\n             double[] out = data.clone();\n             Iterator<Entry> it = v.sparseIterator();\n             Entry e;\n-            while(it.hasNext() && (e = it.next()) != null) {\n+            while (it.hasNext() && (e = it.next()) != null) {\n                 out[e.getIndex()] += e.getValue();\n             }\n-            return new ArrayRealVector(out);\n+            return new ArrayRealVector(out, false);\n         }\n     }\n \n     /** {@inheritDoc} */\n     public RealVector add(double[] v)\n-    throws IllegalArgumentException {\n+        throws IllegalArgumentException {\n         checkVectorDimensions(v.length);\n         double[] out = data.clone();\n         for (int i = 0; i < data.length; i++) {\n             out[i] += v[i];\n         }\n-        return new ArrayRealVector(out);\n+        return new ArrayRealVector(out, false);\n     }\n \n     /**\n \n     /** {@inheritDoc} */\n     public RealVector subtract(RealVector v)\n-    throws IllegalArgumentException {\n-        if(v instanceof ArrayRealVector) {\n+        throws IllegalArgumentException {\n+        if (v instanceof ArrayRealVector) {\n             return subtract((ArrayRealVector) v);\n         } else {\n             checkVectorDimensions(v);\n             while(it.hasNext() && (e = it.next()) != null) {\n                 out[e.getIndex()] -= e.getValue();\n             }\n-            return new ArrayRealVector(out);\n+            return new ArrayRealVector(out, false);\n         }\n     }\n \n     /** {@inheritDoc} */\n     public RealVector subtract(double[] v)\n-    throws IllegalArgumentException {\n+        throws IllegalArgumentException {\n         checkVectorDimensions(v.length);\n         double[] out = data.clone();\n         for (int i = 0; i < data.length; i++) {\n             out[i] -= v[i];\n         }\n-        return new ArrayRealVector(out);\n+        return new ArrayRealVector(out, false);\n     }\n \n     /**\n     /** {@inheritDoc} */\n     public RealVector ebeMultiply(RealVector v)\n         throws IllegalArgumentException {\n-        if(v instanceof ArrayRealVector) {\n+        if (v instanceof ArrayRealVector) {\n             return ebeMultiply((ArrayRealVector) v);\n         } else {\n             checkVectorDimensions(v);\n     /** {@inheritDoc} */\n     public RealVector ebeDivide(RealVector v)\n         throws IllegalArgumentException {\n-        if(v instanceof ArrayRealVector) {\n+        if (v instanceof ArrayRealVector) {\n             return ebeDivide((ArrayRealVector) v);\n         } else {\n             checkVectorDimensions(v);\n     /** {@inheritDoc} */\n     public double dotProduct(RealVector v)\n         throws IllegalArgumentException {\n-        if(v instanceof ArrayRealVector) {\n+        if (v instanceof ArrayRealVector) {\n             return dotProduct((ArrayRealVector) v);\n         } else {\n             checkVectorDimensions(v);\n     /** {@inheritDoc} */\n     public double getDistance(RealVector v)\n         throws IllegalArgumentException {\n-        if(v instanceof ArrayRealVector) {\n+        if (v instanceof ArrayRealVector) {\n             return getDistance((ArrayRealVector) v);\n         } else {\n             checkVectorDimensions(v);\n     /** {@inheritDoc} */\n     public double getL1Distance(RealVector v)\n         throws IllegalArgumentException {\n-        if(v instanceof ArrayRealVector) {\n+        if (v instanceof ArrayRealVector) {\n             return getL1Distance((ArrayRealVector) v);\n         } else {\n             checkVectorDimensions(v);\n     /** {@inheritDoc} */\n     public double getLInfDistance(RealVector v)\n         throws IllegalArgumentException {\n-        if(v instanceof ArrayRealVector) {\n+        if (v instanceof ArrayRealVector) {\n             return getLInfDistance((ArrayRealVector) v);\n         } else {\n             checkVectorDimensions(v);\n     /** {@inheritDoc} */\n     public RealMatrix outerProduct(RealVector v)\n         throws IllegalArgumentException {\n-        if(v instanceof ArrayRealVector) {\n+        if (v instanceof ArrayRealVector) {\n             return outerProduct((ArrayRealVector) v);\n         } else {\n             checkVectorDimensions(v);\n     /** {@inheritDoc} */\n     public RealVector append(RealVector v) {\n         try {\n-            return append((ArrayRealVector) v);\n+            return new ArrayRealVector(this, (ArrayRealVector) v);\n         } catch (ClassCastException cce) {\n-            return new ArrayRealVector(this,new ArrayRealVector(v));\n+            return new ArrayRealVector(this, v);\n         }\n     }\n \n         final double[] out = new double[data.length + 1];\n         System.arraycopy(data, 0, out, 0, data.length);\n         out[data.length] = in;\n-        return new ArrayRealVector(out);\n+        return new ArrayRealVector(out, false);\n     }\n \n     /** {@inheritDoc} */", "timestamp": 1262013660, "metainfo": ""}