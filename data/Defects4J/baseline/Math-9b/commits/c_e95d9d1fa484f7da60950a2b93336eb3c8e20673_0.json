{"sha": "e95d9d1fa484f7da60950a2b93336eb3c8e20673", "log": "reverted some changes introduced yesterday, as they lead to unexpected test failures  ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java\n  */\n package org.apache.commons.math.stat.regression;\n \n-import org.apache.commons.math.linear.MatrixUtils;\n import org.apache.commons.math.linear.RealMatrix;\n-import org.apache.commons.math.linear.RealVector;\n-import org.apache.commons.math.linear.RealVectorImpl;\n+import org.apache.commons.math.linear.RealMatrixImpl;\n \n /**\n  * Abstract base class for implementations of MultipleLinearRegression.\n     protected RealMatrix X;\n \n     /** Y sample data. */\n-    protected RealVector Y;\n+    protected RealMatrix Y;\n \n     /**\n      * Loads model x and y sample data from a flat array of data, overriding any previous sample.\n                 x[i][j] = data[pointer++];\n             }\n         }\n-        this.X = MatrixUtils.createRealMatrix(x);\n-        this.Y = new RealVectorImpl(y);\n+        this.X = new RealMatrixImpl(x);\n+        this.Y = new RealMatrixImpl(y);\n     }\n     \n     /**\n      * @param y the [n,1] array representing the y sample\n      */\n     protected void newYSampleData(double[] y) {\n-        this.Y = new RealVectorImpl(y);\n+        this.Y = new RealMatrixImpl(y);\n     }\n \n     /**\n      * @param x the [n,k] array representing the x sample\n      */\n     protected void newXSampleData(double[][] x) {\n-        this.X = MatrixUtils.createRealMatrix(x);\n+        this.X = new RealMatrixImpl(x);\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     public double[] estimateRegressionParameters() {\n-        return calculateBeta().getData();\n+        RealMatrix b = calculateBeta();\n+        return b.getColumn(0);\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     public double[] estimateResiduals() {\n-        return Y.subtract(X.operate(calculateBeta())).getData();\n+        RealMatrix b = calculateBeta();\n+        RealMatrix e = Y.subtract(X.multiply(b));\n+        return e.getColumn(0);\n     }\n \n     /**\n      * \n      * @return beta\n      */\n-    protected abstract RealVector calculateBeta();\n+    protected abstract RealMatrix calculateBeta();\n \n     /**\n      * Calculates the beta variance of multiple linear regression in matrix\n      * \n      * @return The residuals [n,1] matrix\n      */\n-    protected RealVector calculateResiduals() {\n-        return Y.subtract(X.operate(calculateBeta()));\n+    protected RealMatrix calculateResiduals() {\n+        RealMatrix b = calculateBeta();\n+        return Y.subtract(X.multiply(b));\n     }\n \n }\n--- a/src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java\n \n import org.apache.commons.math.linear.LUDecompositionImpl;\n import org.apache.commons.math.linear.LUSolver;\n-import org.apache.commons.math.linear.MatrixUtils;\n import org.apache.commons.math.linear.RealMatrix;\n-import org.apache.commons.math.linear.RealVector;\n+import org.apache.commons.math.linear.RealMatrixImpl;\n \n \n /**\n      * @param omega the [n,n] array representing the covariance\n      */\n     protected void newCovarianceData(double[][] omega){\n-        this.Omega = MatrixUtils.createRealMatrix(omega);\n+        this.Omega = new RealMatrixImpl(omega);\n         this.OmegaInverse = null;\n     }\n \n      * </pre>\n      * @return beta\n      */\n-    protected RealVector calculateBeta() {\n+    protected RealMatrix calculateBeta() {\n         RealMatrix OI = getOmegaInverse();\n         RealMatrix XT = X.transpose();\n         RealMatrix XTOIX = XT.multiply(OI).multiply(X);\n         RealMatrix inverse = new LUSolver(new LUDecompositionImpl(XTOIX)).getInverse();\n-        return inverse.multiply(XT).multiply(OI).operate(Y);\n+        return inverse.multiply(XT).multiply(OI).multiply(Y);\n     }\n \n     /**\n      * @return The Y variance\n      */\n     protected double calculateYVariance() {\n-        final RealVector u = calculateResiduals();\n-        final double sse =  u.dotProduct(getOmegaInverse().operate(u));\n-        return sse / (X.getRowDimension() - X.getColumnDimension());\n+        RealMatrix u = calculateResiduals();\n+        RealMatrix sse =  u.transpose().multiply(getOmegaInverse()).multiply(u);\n+        return sse.getTrace()/(X.getRowDimension()-X.getColumnDimension());\n     }\n     \n }\n--- a/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java\n  */\n package org.apache.commons.math.stat.regression;\n \n-import org.apache.commons.math.linear.DenseRealMatrix;\n import org.apache.commons.math.linear.LUDecompositionImpl;\n import org.apache.commons.math.linear.LUSolver;\n import org.apache.commons.math.linear.QRDecomposition;\n import org.apache.commons.math.linear.QRDecompositionImpl;\n import org.apache.commons.math.linear.RealMatrix;\n-import org.apache.commons.math.linear.RealVector;\n-import org.apache.commons.math.linear.RealVectorImpl;\n+import org.apache.commons.math.linear.RealMatrixImpl;\n \n /**\n  * <p>Implements ordinary least squares (OLS) to estimate the parameters of a \n      * @param x the [n,k] array representing the x sample\n      */\n     protected void newXSampleData(double[][] x) {\n-        this.X = new DenseRealMatrix(x);\n+        this.X = new RealMatrixImpl(x);\n         qr = new QRDecompositionImpl(X);\n     }\n     \n      * \n      * @return beta\n      */\n-    protected RealVector calculateBeta() {\n-        return solveUpperTriangular(qr.getR(), qr.getQ().transpose().operate(Y));\n+    protected RealMatrix calculateBeta() {\n+        return solveUpperTriangular(qr.getR(), qr.getQ().transpose().multiply(Y));\n     }\n \n     /**\n      * @return The Y variance\n      */\n     protected double calculateYVariance() {\n-        final RealVector u = calculateResiduals();\n-        final double sse = u.dotProduct(u);\n-        return sse / (X.getRowDimension() - X.getColumnDimension());\n+        RealMatrix u = calculateResiduals();\n+        RealMatrix sse = u.transpose().multiply(u);\n+        return sse.getTrace()/(X.getRowDimension()-X.getColumnDimension());\n     }\n     \n     /** TODO:  Find a home for the following methods in the linear package */   \n      * \n      * @param coefficients upper-triangular coefficients matrix\n      * @param constants column RHS constants matrix\n-     * @return solution matrix as a vector\n+     * @return solution matrix as a column matrix\n      * \n      */\n-    private static RealVector solveUpperTriangular(RealMatrix coefficients, RealVector constants) {\n+    private static RealMatrix solveUpperTriangular(RealMatrix coefficients,\n+            RealMatrix constants) {\n         if (!isUpperTriangular(coefficients, 1E-12)) {\n             throw new IllegalArgumentException(\n                    \"Coefficients is not upper-triangular\");\n+        }\n+        if (constants.getColumnDimension() != 1) {\n+            throw new IllegalArgumentException(\n+                    \"Constants not a column matrix.\");\n         }\n         int length = coefficients.getColumnDimension();\n         double x[] = new double[length];\n             for (int j = index + 1; j < length; j++) {\n                 sum += coefficients.getEntry(index, j) * x[j];\n             }\n-            x[index] = (constants.getEntry(index) - sum) / coefficients.getEntry(index, index);\n+            x[index] = (constants.getEntry(index, 0) - sum) / coefficients.getEntry(index, index);\n         } \n-        return new RealVectorImpl(x);\n+        return new RealMatrixImpl(x);\n     }\n     \n     /**\n--- a/src/test/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java\n+++ b/src/test/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java\n         createRegression().newSampleData(y, x, null);\n     }\n     \n-    @Test(expected=ArrayIndexOutOfBoundsException.class)\n+    @Test(expected=IllegalArgumentException.class)\n     public void cannotAddNullCovarianceData() {\n         createRegression().newSampleData(new double[]{}, new double[][]{}, null);\n     }", "timestamp": 1229893487, "metainfo": ""}