{"sha": "f8b6d3163f2e20aac6829156204c0301f2741ae1", "log": "Missing @Deprecated  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\n       * @deprecated As of 3.1, to be removed in 4.0. Please use the\n       * {@link #random} instance variable instead.\n       */\n+    @Deprecated\n     protected final RandomDataImpl randomData = new RandomDataImpl();\n     /** RNG instance used to generate samples from the distribution. */\n     protected final RandomGenerator random;\n--- a/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java\n       * @deprecated As of 3.1, to be removed in 4.0. Please use the\n       * {@link #random} instance variable instead.\n       */\n+    @Deprecated\n     protected final RandomDataImpl randomData = new RandomDataImpl();\n     /** RNG instance used to generate samples from the distribution. */\n     protected final RandomGenerator random;\n--- a/src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java\n      * @deprecated as of version 3.1, {@link #getShape()} should be preferred.\n      * This method will be removed in version 4.0.\n      */\n+    @Deprecated\n     public double getAlpha() {\n         return shape;\n     }\n      * @deprecated as of version 3.1, {@link #getScale()} should be preferred.\n      * This method will be removed in version 4.0.\n      */\n+    @Deprecated\n     public double getBeta() {\n         return scale;\n     }\n--- a/src/main/java/org/apache/commons/math3/optimization/AbstractConvergenceChecker.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/AbstractConvergenceChecker.java\n      * @deprecated in 3.1 (to be removed in 4.0) because this value is too small\n      * to be useful as a default (cf. MATH-798).\n      */\n+    @Deprecated\n     private static final double DEFAULT_RELATIVE_THRESHOLD = 100 * Precision.EPSILON;\n     /**\n      * Default absolute threshold.\n      * @deprecated in 3.1 (to be removed in 4.0) because this value is too small\n      * to be useful as a default (cf. MATH-798).\n      */\n+    @Deprecated\n     private static final double DEFAULT_ABSOLUTE_THRESHOLD = 100 * Precision.SAFE_MIN;\n     /**\n      * Relative tolerance threshold.\n--- a/src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java\n     /** Polynomial degree.\n      * @deprecated\n      */\n+    @Deprecated\n     private final int degree;\n \n     /**\n      * @deprecated Since 3.1 (to be removed in 4.0). Please use\n      * {@link #PolynomialFitter(DifferentiableMultivariateVectorOptimizer)} instead.\n      */\n+    @Deprecated\n     public PolynomialFitter(int degree, final DifferentiableMultivariateVectorOptimizer optimizer) {\n         super(optimizer);\n         this.degree = degree;\n      * if the algorithm failed to converge.\n      * @deprecated Since 3.1 (to be removed in 4.0). Please use {@link #fit(double[])} instead.\n      */\n+    @Deprecated\n     public double[] fit() {\n         return fit(new PolynomialFunction.Parametric(), new double[degree + 1]);\n     }", "timestamp": 1344343139, "metainfo": ""}