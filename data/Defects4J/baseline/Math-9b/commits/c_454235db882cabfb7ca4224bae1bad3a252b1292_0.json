{"sha": "454235db882cabfb7ca4224bae1bad3a252b1292", "log": "Put serialization back for PointValuePair and PointVectorValuePair.  JIRA: MATH-787  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/optimization/PointValuePair.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/PointValuePair.java\n \n package org.apache.commons.math3.optimization;\n \n+import java.io.Serializable;\n+\n import org.apache.commons.math3.util.Pair;\n \n /**\n  * @version $Id$\n  * @since 3.0\n  */\n-public class PointValuePair extends Pair<double[], Double> {\n+public class PointValuePair extends Pair<double[], Double> implements Serializable {\n+\n+    /** Serializable UID. */\n+    private static final long serialVersionUID = 20120513L;\n+\n     /**\n      * Builds a point/objective function value pair.\n      *\n     public double[] getPointRef() {\n         return getKey();\n     }\n+\n+    /**\n+     * Replace the instance with a data transfer object for serialization.\n+     * @return data transfer object that will be serialized\n+     */\n+    private Object writeReplace() {\n+        return new DataTransferObject(getKey(), getValue());\n+    }\n+\n+    /** Internal class used only for serialization. */\n+    private static class DataTransferObject implements Serializable {\n+\n+        /** Serializable UID. */\n+        private static final long serialVersionUID = 20120513L;\n+\n+        /** Point coordinates.\n+         * @Serial\n+         */\n+        final double[] point;\n+\n+        /** Value of the objective function at the point.\n+         * @Serial\n+         */\n+        final double value;\n+\n+        /** Simple constructor.\n+         * @param point Point coordinates.\n+         * @param value Value of the objective function at the point.\n+         */\n+        public DataTransferObject(final double[] point, final double value) {\n+            this.point = point.clone();\n+            this.value = value;\n+        }\n+\n+        /** Replace the deserialized data transfer object with a {@link PointValuePair}.\n+         * @return replacement {@link PointValuePair}\n+         */\n+        private Object readResolve() {\n+            return new PointValuePair(point, value, false);\n+        }\n+\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java\n \n package org.apache.commons.math3.optimization;\n \n+import java.io.Serializable;\n+\n import org.apache.commons.math3.util.Pair;\n \n /**\n  * @version $Id$\n  * @since 3.0\n  */\n-public class PointVectorValuePair extends Pair<double[], double[]> {\n+public class PointVectorValuePair extends Pair<double[], double[]> implements Serializable {\n+\n+    /** Serializable UID. */\n+    private static final long serialVersionUID = 20120513L;\n+\n     /**\n      * Builds a point/objective function value pair.\n      *\n     public double[] getValueRef() {\n         return super.getValue();\n     }\n+\n+    /**\n+     * Replace the instance with a data transfer object for serialization.\n+     * @return data transfer object that will be serialized\n+     */\n+    private Object writeReplace() {\n+        return new DataTransferObject(getKey(), getValue());\n+    }\n+\n+    /** Internal class used only for serialization. */\n+    private static class DataTransferObject implements Serializable {\n+\n+        /** Serializable UID. */\n+        private static final long serialVersionUID = 20120513L;\n+\n+        /** Point coordinates.\n+         * @Serial\n+         */\n+        final double[] point;\n+\n+        /** Value of the objective function at the point.\n+         * @Serial\n+         */\n+        final double[] value;\n+\n+        /** Simple constructor.\n+         * @param point Point coordinates.\n+         * @param value Value of the objective function at the point.\n+         */\n+        public DataTransferObject(final double[] point, final double[] value) {\n+            this.point = point.clone();\n+            this.value = value.clone();\n+        }\n+\n+        /** Replace the deserialized data transfer object with a {@link PointValuePair}.\n+         * @return replacement {@link PointValuePair}\n+         */\n+        private Object readResolve() {\n+            return new PointVectorValuePair(point, value, false);\n+        }\n+\n+    }\n+\n }\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math3.optimization;\n+\n+\n+import org.apache.commons.math3.TestUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class PointValuePairTest {\n+\n+    @Test\n+    public void testSerial() {\n+        PointValuePair pv1 = new PointValuePair(new double[] { 1.0, 2.0, 3.0 }, 4.0);\n+        PointValuePair pv2 = (PointValuePair) TestUtils.serializeAndRecover(pv1);\n+        Assert.assertEquals(pv1.getKey().length, pv2.getKey().length);\n+        for (int i = 0; i < pv1.getKey().length; ++i) {\n+            Assert.assertEquals(pv1.getKey()[i], pv2.getKey()[i], 1.0e-15);\n+        }\n+        Assert.assertEquals(pv1.getValue(), pv2.getValue(), 1.0e-15);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math3.optimization;\n+\n+\n+import org.apache.commons.math3.TestUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class PointVectorValuePairTest {\n+\n+    @Test\n+    public void testSerial() {\n+        PointVectorValuePair pv1 = new PointVectorValuePair(new double[] { 1.0, 2.0, 3.0 },\n+                                                            new double[] { 4.0, 5.0 });\n+        PointVectorValuePair pv2 = (PointVectorValuePair) TestUtils.serializeAndRecover(pv1);\n+        Assert.assertEquals(pv1.getKey().length, pv2.getKey().length);\n+        for (int i = 0; i < pv1.getKey().length; ++i) {\n+            Assert.assertEquals(pv1.getKey()[i], pv2.getKey()[i], 1.0e-15);\n+        }\n+        Assert.assertEquals(pv1.getValue().length, pv2.getValue().length);\n+        for (int i = 0; i < pv1.getValue().length; ++i) {\n+            Assert.assertEquals(pv1.getValue()[i], pv2.getValue()[i], 1.0e-15);\n+        }\n+    }\n+\n+}", "timestamp": 1336907805, "metainfo": ""}