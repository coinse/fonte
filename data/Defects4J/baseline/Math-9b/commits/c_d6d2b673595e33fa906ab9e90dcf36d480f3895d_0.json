{"sha": "d6d2b673595e33fa906ab9e90dcf36d480f3895d", "log": "Optimized isNaN, isInfinite.  Jira: MATH-2276.  Contributed by Mark Anderson.  ", "commit": "\n--- a/src/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/java/org/apache/commons/math/complex/Complex.java\n     private final double real;\n     \n     /**\n+     * Record whether this complex number is equal to NaN\n+     */\n+    private final boolean isNaN;\n+    \n+    /**\n+     * Record whether this complex number is infinite\n+     */\n+    private final boolean isInfinite;\n+    \n+    /**\n      * Create a complex number given the real and imaginary parts.\n      *\n      * @param real the real part\n         super();\n         this.real = real;\n         this.imaginary = imaginary;\n+        \n+        isNaN = Double.isNaN(real) || Double.isNaN(imaginary);\n+        isInfinite = !isNaN &&\n+        (Double.isInfinite(real) || Double.isInfinite(imaginary));\n     }\n \n     /**\n      * false otherwise\n      */\n     public boolean isNaN() {\n-        return Double.isNaN(real) || Double.isNaN(imaginary);        \n+        return isNaN;        \n     }\n     \n     /**\n      * and neither part is <code>NaN</code>\n      */\n     public boolean isInfinite() {\n-        return !isNaN() && \n-        (Double.isInfinite(real) || Double.isInfinite(imaginary));        \n+        return isInfinite;        \n     }\n     \n     /**", "timestamp": 1245236440, "metainfo": ""}