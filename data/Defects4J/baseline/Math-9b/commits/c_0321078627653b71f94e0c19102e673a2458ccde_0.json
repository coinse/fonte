{"sha": "0321078627653b71f94e0c19102e673a2458ccde", "log": "fixed typos  ", "commit": "\n--- a/src/java/org/apache/commons/math/estimation/WeightedMeasurement.java\n+++ b/src/java/org/apache/commons/math/estimation/WeightedMeasurement.java\n  * parameters can be retrieved through the {@link\n  * EstimationProblem#getAllParameters\n  * EstimationProblem.getAllParameters} method if the measurements are\n- * independant of the problem, or directly if they are implemented as\n+ * independent of the problem, or directly if they are implemented as\n  * inner classes of the problem.</p>\n  *\n  * <p>The instances for which the <code>ignored</code> flag is set\n--- a/src/java/org/apache/commons/math/ode/ContinuousOutputModel.java\n+++ b/src/java/org/apache/commons/math/ode/ContinuousOutputModel.java\n  * variables are set only once the last step has been handled.</p>\n \n  * <p>This is useful for example if the main loop of the user\n- * application should remain independant from the integration process\n+ * application should remain independent from the integration process\n  * or if one needs to mimic the behaviour of an analytical model\n  * despite a numerical model is used (i.e. one needs the ability to\n  * get the model value at any time or to navigate through the\n--- a/src/java/org/apache/commons/math/ode/FirstOrderDifferentialEquations.java\n+++ b/src/java/org/apache/commons/math/ode/FirstOrderDifferentialEquations.java\n     public int getDimension();\n     \n     /** Get the current time derivative of the state vector.\n-     * @param t current value of the independant <I>time</I> variable\n+     * @param t current value of the independent <I>time</I> variable\n      * @param y array containing the current value of the state vector\n      * @param yDot placeholder array where to put the time derivative of the state vector\n      * @throws DerivativeException this exception is propagated to the caller if the\n--- a/src/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java\n+++ b/src/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java\n   public int getDimension();\n     \n   /** Get the current time derivative of the state vector.\n-   * @param t current value of the independant <I>time</I> variable\n+   * @param t current value of the independent <I>time</I> variable\n    * @param y array containing the current value of the state vector\n    * @param yDot array containing the current value of the first derivative\n    * of the state vector\n--- a/src/java/org/apache/commons/math/ode/SwitchState.java\n+++ b/src/java/org/apache/commons/math/ode/SwitchState.java\n   }\n \n   /** Reinitialize the beginning of the step.\n-   * @param t0 value of the independant <i>time</i> variable at the\n+   * @param t0 value of the independent <i>time</i> variable at the\n    * beginning of the step\n    * @param y0 array containing the current value of the state vector\n    * at the beginning of the step\n   }\n \n   /** Acknowledge the fact the step has been accepted by the integrator.\n-   * @param t value of the independant <i>time</i> variable at the\n+   * @param t value of the independent <i>time</i> variable at the\n    * end of the step\n    * @param y array containing the current value of the state vector\n    * at the end of the step\n   }\n \n   /** Let the switching function reset the state if it wants.\n-   * @param t value of the independant <i>time</i> variable at the\n+   * @param t value of the independent <i>time</i> variable at the\n    * beginning of the next step\n    * @param y array were to put the desired state vector at the beginning\n    * of the next step\n--- a/src/java/org/apache/commons/math/ode/SwitchingFunction.java\n+++ b/src/java/org/apache/commons/math/ode/SwitchingFunction.java\n  * the name <em>switching functions</em>.</p>\n  *\n  * <p>Since events are only problem-dependent and are triggered by the\n- * independant <i>time</i> variable and the state vector, they can\n+ * independent <i>time</i> variable and the state vector, they can\n  * occur at virtually any time, unknown in advance. The integrators will\n  * take care to avoid sign changes inside the steps, they will reduce\n  * the step size when such an event is detected in order to put this\n    * function must be continuous (at least in its roots neighborhood),\n    * as the integrator will need to find its roots to locate the events.</p>\n \n-   * @param t current value of the independant <i>time</i> variable\n+   * @param t current value of the independent <i>time</i> variable\n    * @param y array containing the current value of the state vector\n    * @return value of the g function\n    */\n    *   will continue.</li>\n    * </ul>\n \n-   * @param t current value of the independant <i>time</i> variable\n+   * @param t current value of the independent <i>time</i> variable\n    * @param y array containing the current value of the state vector\n    * @return indication of what the integrator should do next, this\n    * value must be one of {@link #STOP}, {@link #RESET_STATE},\n    * #RESET_STATE} indicator, this function will never be called, and it is\n    * safe to leave its body empty.</p>\n \n-   * @param t current value of the independant <i>time</i> variable\n+   * @param t current value of the independent <i>time</i> variable\n    * @param y array containing the current value of the state vector\n    * the new state should be put in the same array\n    */\n--- a/src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java\n+++ b/src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java\n \n   /** Inform the switching functions that the step has been accepted\n    * by the integrator.\n-   * @param t value of the independant <i>time</i> variable at the\n+   * @param t value of the independent <i>time</i> variable at the\n    * end of the step\n    * @param y array containing the current value of the state vector\n    * at the end of the step\n   }\n \n   /** Let the switching functions reset the state if they want.\n-   * @param t value of the independant <i>time</i> variable at the\n+   * @param t value of the independent <i>time</i> variable at the\n    * beginning of the next step\n    * @param y array were to put the desired state vector at the beginning\n    * of the next step\n--- a/src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java\n+++ b/src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java\n  * GaussianRandomGenerator} or {@link UniformRandomGenerator}.</p>\n  * <p>Sometimes, the covariance matrix for a given simulation is not\n  * strictly positive definite. This means that the correlations are\n- * not all independant from each other. In this case, however, the non\n+ * not all independent from each other. In this case, however, the non\n  * strictly positive elements found during the Cholesky decomposition\n  * of the covariance matrix should not be negative either, they\n  * should be null. Another non-conventional extension handling this case\n     }\n \n     /** Get the rank of the covariance matrix.\n-     * The rank is the number of independant rows in the covariance\n+     * The rank is the number of independent rows in the covariance\n      * matrix, it is also the number of columns of the rectangular\n      * matrix of the decomposition.\n      * @return rank of the square matrix.", "timestamp": 1191171465, "metainfo": ""}