{"sha": "3fa5658ae6ac6020ce511ec0edea476cd202502a", "log": "removed unused variables  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java\n         public double[] gradient(double x, double ... param) {\n             validateParameters(param);\n \n-            final double lo = param[0];\n-            final double hi = param[1];\n             final double invExp1 = 1 / (1 + FastMath.exp(-x));\n \n             return new double[] { 1 - invExp1, invExp1 };\n--- a/src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java\n import org.apache.commons.math.analysis.DifferentiableMultivariateRealFunction;\n import org.apache.commons.math.analysis.MultivariateRealFunction;\n import org.apache.commons.math.analysis.MultivariateVectorialFunction;\n-import org.apache.commons.math.analysis.solvers.BrentSolver;\n import org.apache.commons.math.optimization.general.ConjugateGradientFormula;\n import org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizer;\n import org.apache.commons.math.random.GaussianRandomGenerator;\n         MultiStartDifferentiableMultivariateRealOptimizer optimizer =\n             new MultiStartDifferentiableMultivariateRealOptimizer(underlying, 10, generator);\n         optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-10, 1.0e-10));\n-        BrentSolver solver = new BrentSolver();\n         RealPointValuePair optimum =\n             optimizer.optimize(200, circle, GoalType.MINIMIZE, new double[] { 98.680, 47.345 });\n         Assert.assertEquals(200, optimizer.getMaxEvaluations());\n--- a/src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java\n         HarmonicFitter fitter =\n             new HarmonicFitter(new LevenbergMarquardtOptimizer());\n \n-        final double[] fitted = fitter.fit();\n+        fitter.fit();\n     }\n \n     // This test fails (throwing \"ConvergenceException\" instead).\n             fitter.addObservedPoint(1, x, 1e-7 * randomizer.nextGaussian());\n         }\n \n-        final double[] fitted = fitter.fit();\n+        fitter.fit();\n         // This test serves to cover the part of the code of \"guessAOmega\"\n         // when the algorithm using integrals fails.\n     }", "timestamp": 1300889510, "metainfo": ""}