{"sha": "06117fcdf9c186896a42205ca4e10ec8ad2843e9", "log": "PR: 34230 Fixed bug in PolynomialSplineFunction to allow evaluation of the function at the last knot point.  ", "commit": "\n--- a/src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java\n  * centered on the knot points to compute the spline function values.  See below.\n  * <p>\n  * The domain of the polynomial spline function is \n- * <code>[smallest knot, largest knot)</code>.  Attempts to evaluate the\n+ * <code>[smallest knot, largest knot]</code>.  Attempts to evaluate the\n  * function at values outside of this range generate IllegalArgumentExceptions.\n  * <p>\n  * The value of the polynomial spline function for an argument <code>x</code>\n  * <ol>\n  * <li>The knot array is searched to find the segment to which <code>x</code>\n  * belongs.  If <code>x</code> is less than the smallest knot point or greater\n- * than or equal to the largest one, an <code>IllegalArgumentException</code>\n+ * than the largest one, an <code>IllegalArgumentException</code>\n  * is thrown.</li>\n  * <li> Let <code>j</code> be the index of the largest knot point that is less\n  * than or equal to <code>x</code>.  The value returned is <br>\n      * Compute the value for the function.\n      * <p>\n      * Throws FunctionEvaluationException if v is outside of the domain of the\n-     * function.  The domain is [smallest knot, largest knot).\n+     * function.  The domain is [smallest knot, largest knot].\n      * <p>\n      * See {@link PolynomialSplineFunction} for details on the algorithm for\n      * computing the value of the function.\n      * @return the value\n      * @throws FunctionEvaluationException if v is outside of the domain of\n      * of the spline function (less than the smallest knot point or greater\n-     * than or equal to the largest knot point)\n+     * than the largest knot point)\n      */\n     public double value(double v) throws FunctionEvaluationException {\n-        if (v < knots[0] || v >= knots[n]) {\n+        if (v < knots[0] || v > knots[n]) {\n             throw new FunctionEvaluationException(v,\"Argument outside domain\");\n         }\n         int i = Arrays.binarySearch(knots, v);\n         if (i < 0) {\n             i = -i - 2;\n+        }\n+        //This will handle the case where v is the last knot value\n+        //There are only n-1 polynomials, so if v is the last knot\n+        //then we will use the last polynomial to calculate the value.\n+        if ( i >= polynomials.length ) {\n+            i--;\n         }\n         return polynomials[i].value(v - knots[i]);\n     }\n--- a/src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java\n         TestUtils.assertEquals(polynomials[1].getCoefficients(), target, coefficientTolerance);\n         \n         // Check interpolation\n-        assertEquals(0.4,f.value(0.4), interpolationTolerance);    \n+        assertEquals(0.0,f.value(0.0), interpolationTolerance);\n+        assertEquals(0.4,f.value(0.4), interpolationTolerance);\n+        assertEquals(1.0,f.value(1.0), interpolationTolerance);\n     }\n \n     public void testInterpolateLinearDegenerateThreeSegment()\n         TestUtils.assertEquals(polynomials[2].getCoefficients(), target, coefficientTolerance);\n         \n         // Check interpolation\n-        assertEquals(1.4,f.value(1.4), interpolationTolerance);    \n+        assertEquals(0,f.value(0), interpolationTolerance);\n+        assertEquals(1.4,f.value(1.4), interpolationTolerance);\n+        assertEquals(1.5,f.value(1.5), interpolationTolerance);\n     }\n \n     public void testInterpolateLinear() throws Exception {\n     }\n     \n     /**\n-     * verifies that f(x[i]) = y[i] for i = 0..n -1 where n is common length -- skips last point.\n+     * verifies that f(x[i]) = y[i] for i = 0..n-1 where n is common length.\n      */\n     protected void verifyInterpolation(UnivariateRealFunction f, double x[], double y[])  \n     \tthrows Exception{\n-        for (int i = 0; i < x.length - 1; i++) {\n+        for (int i = 0; i < x.length; i++) {\n             assertEquals(f.value(x[i]), y[i], knotTolerance);\n         }     \n     }", "timestamp": 1112388321, "metainfo": ""}