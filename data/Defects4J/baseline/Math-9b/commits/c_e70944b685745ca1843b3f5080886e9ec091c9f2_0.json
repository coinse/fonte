{"sha": "e70944b685745ca1843b3f5080886e9ec091c9f2", "log": "Use asserNotNull(var) instead of if (var != null) and avoid subsequent NPE warnings  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java\n  */\n package org.apache.commons.math.stat.regression;\n \n+import junit.framework.Assert;\n+\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.stat.correlation.PearsonsCorrelation;\n import org.apache.commons.math.TestUtils;\n         instance.addObservations(x, y);\n         try {\n             RegressionResults result = instance.regress();\n-            if (result == null) {\n-                fail(\"The test case is a prototype.\");\n-            }\n+            Assert.assertNotNull(\"The test case is a prototype.\", result);\n             TestUtils.assertEquals(\n                     new double[]{9.5169, 0.8827, 0.4540, -1.6275},\n                     result.getParameterEstimates(), 1e-4);\n         instance.addObservations(x, y);\n         try {\n             RegressionResults result = instance.regress();\n-            if (result == null) {\n-                fail(\"The test case is a prototype.\");\n-            }\n+            Assert.assertNotNull(\"The test case is a prototype.\", result);\n             TestUtils.assertEquals(\n                     new double[]{9.5169, 0.8827, 0.4540, -1.6275},\n                     result.getParameterEstimates(), 1e-4);\n \n         instance.addObservations(x, y);\n         RegressionResults result = instance.regress();\n-        if (result == null) {\n-            fail(\"Could not estimate initial regression\");\n-        }\n+        Assert.assertNotNull(\"Could not estimate initial regression\", result);\n \n         instance2.addObservations(x2, y);\n         RegressionResults resultRedundant = instance2.regress();\n-        if (resultRedundant == null) {\n-            fail(\"Could not estimate redundant regression\");\n-        }\n+        Assert.assertNotNull(\"Could not estimate redundant regression\", resultRedundant);\n         double[] beta = result.getParameterEstimates();\n         double[] betar = resultRedundant.getParameterEstimates();\n         double[] se = result.getStdErrorOfEstimates();\n \n         instance.addObservations(x, y);\n         RegressionResults result = instance.regress();\n-        if (result == null) {\n-            fail(\"Could not estimate initial regression\");\n-        }\n+        Assert.assertNotNull(\"Could not estimate initial regression\", result);\n \n         instance2.addObservations(x2, y);\n         RegressionResults resultRedundant = instance2.regress();\n-        if (resultRedundant == null) {\n-            fail(\"Could not estimate redundant regression\");\n-        }\n+        Assert.assertNotNull(\"Could not estimate redundant regression\", resultRedundant);\n         double[] beta = result.getParameterEstimates();\n         double[] betar = resultRedundant.getParameterEstimates();\n         double[] se = result.getStdErrorOfEstimates();", "timestamp": 1320937667, "metainfo": ""}