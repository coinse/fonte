{"sha": "b16a088623fd1929e1b978c4305c3366f65c7543", "log": "fixed javadoc  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java\n      * the same number of points closest to xval[i], ignoring zero weights.\n      *\n      * @param xval arguments array\n-     * @param xval weights array\n+     * @param weights weights array\n      * @param i the index around which the new interval should be computed\n      * @param bandwidthInterval a two-element array {left, right} such that: <p/>\n      * <tt>(left==0 or xval[i] - xval[left-1] > xval[right] - xval[i])</tt>\n      * Returns the smallest index j such that j > i && (j==weights.length || weights[j] != 0)\n      * @param weights weights array\n      * @param i the index from which to start search; must be < weights.length\n-     * @return the smallest index j such that j > i && (j==weights.length || weights[j] != 0) \n+     * @return the smallest index j such that j > i && (j==weights.length || weights[j] != 0)\n      */\n     private static int nextNonzero(final double[] weights, final int i) {\n         int j = i + 1;", "timestamp": 1267385895, "metainfo": ""}