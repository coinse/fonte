{"sha": "56d4f26b5589494541f155c3962fc3e8de8db692", "log": "Typo.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math/util/FastMath.java\n     private static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;\n \n     // Enclose large data table in nested static class so it's only loaded on first access\n-  private static class ExpInitTable {\n+  private static class ExpIntTable {\n \n     /** Exponential evaluated at integer values,\n      * exp(x) =  expIntTableA[x + EXP_INT_TABLE_MAX_INDEX] + expIntTableB[x+EXP_INT_TABLE_MAX_INDEX].\n         // Populate expIntTable\n         for (i = 0; i < EXP_INT_TABLE_MAX_INDEX; i++) {\n             expint(i, tmp);\n-            ExpInitTable.EXP_INT_TABLE_A[i+EXP_INT_TABLE_MAX_INDEX] = tmp[0];\n-            ExpInitTable.EXP_INT_TABLE_B[i+EXP_INT_TABLE_MAX_INDEX] = tmp[1];\n+            ExpIntTable.EXP_INT_TABLE_A[i+EXP_INT_TABLE_MAX_INDEX] = tmp[0];\n+            ExpIntTable.EXP_INT_TABLE_B[i+EXP_INT_TABLE_MAX_INDEX] = tmp[1];\n \n             if (i != 0) {\n                 // Negative integer powers\n                 splitReciprocal(tmp, recip);\n-                ExpInitTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-i] = recip[0];\n-                ExpInitTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-i] = recip[1];\n+                ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-i] = recip[0];\n+                ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-i] = recip[1];\n             }\n         }\n \n \n     public static void main(String[] a){\n         printarray(\"FACT\", FACT_LEN, FACT);\n-        printarray(\"EXP_INT_TABLE_A\", EXP_INT_TABLE_LEN, ExpInitTable.EXP_INT_TABLE_A);\n-        printarray(\"EXP_INT_TABLE_B\", EXP_INT_TABLE_LEN, ExpInitTable.EXP_INT_TABLE_B);\n+        printarray(\"EXP_INT_TABLE_A\", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);\n+        printarray(\"EXP_INT_TABLE_B\", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);\n         printarray(\"EXP_FRAC_TABLE_A\", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);\n         printarray(\"EXP_FRAC_TABLE_B\", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);\n         printarray(\"LN_MANT\",LN_MANT_LEN, lnMant.LN_MANT);\n \n             intVal++;\n \n-            intPartA = ExpInitTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];\n-            intPartB = ExpInitTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];\n+            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];\n+            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];\n \n             intVal = -intVal;\n         } else {\n                 return Double.POSITIVE_INFINITY;\n             }\n \n-            intPartA = ExpInitTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];\n-            intPartB = ExpInitTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];\n+            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];\n+            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];\n         }\n \n         /* Get the fractional part of x, find the greatest multiple of 2^-10 less than", "timestamp": 1315692814, "metainfo": ""}