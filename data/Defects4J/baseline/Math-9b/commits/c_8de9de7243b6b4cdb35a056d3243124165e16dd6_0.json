{"sha": "8de9de7243b6b4cdb35a056d3243124165e16dd6", "log": "fixed various checkstyle and findbugs errors  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java\n \n     /**\n      * Get the elements type from an array.\n+     * @param <T> the type of the field elements\n      * @param d data array\n      * @return field to which array elements belong\n      * @exception IllegalArgumentException if array is empty\n \n     /**\n      * Get the elements type from an array.\n+     * @param <T> the type of the field elements\n      * @param d data array\n      * @return field to which array elements belong\n      * @exception IllegalArgumentException if array is empty\n      * <p>\n      * Complete arrays are filled with field.getZero()\n      * </p>\n+     * @param <T> the type of the field elements\n+     * @param field field to which array elements belong\n      * @param rows number of rows\n      * @param columns number of columns (may be negative to build partial\n      * arrays in the same way <code>new Field[rows][]</code> works)\n      * <p>\n      * Arrays are filled with field.getZero()\n      * </p>\n+     * @param <T> the type of the field elements\n+     * @param field field to which array elements belong\n      * @param length of the array\n      * @return a new array\n      */\n--- a/src/java/org/apache/commons/math/linear/DenseFieldMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/DenseFieldMatrix.java\n  * arrays is negligible for small matrices (about 1%). The gain from cache efficiency leads\n  * to up to 3-fold improvements for matrices of moderate to large size.\n  * </p>\n+ * @param <T> the type of the field elements\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n      * @see #DenseFieldMatrix(T[][])\n      */\n     public DenseFieldMatrix(final int rows, final int columns,\n-                           final T[][] blockData, final boolean copyArray)\n+                            final T[][] blockData, final boolean copyArray)\n         throws IllegalArgumentException {\n \n         super(extractField(blockData), rows, columns);\n      * It can be used to provide the array argument of the {@link\n      * DenseFieldMatrix#DenseFieldMatrix(int, int, T[][], boolean)} constructor.\n      * </p>\n+     * @param <T> the type of the field elements\n      * @param rawData data array in raw layout\n      * @return a new data array containing the same entries but in blocks layout\n      * @exception IllegalArgumentException if <code>rawData</code> is not rectangular\n      * This method can be used to create the array argument of the {@link\n      * DenseFieldMatrix#DenseFieldMatrix(int, int, T[][], boolean)} constructor.\n      * </p>\n+     * @param <T> the type of the field elements\n+     * @param field field to which the elements belong\n      * @param rows  the number of rows in the new matrix\n      * @param columns  the number of columns in the new matrix\n      * @return a new data array in blocks layout\n--- a/src/java/org/apache/commons/math/linear/MatrixUtils.java\n+++ b/src/java/org/apache/commons/math/linear/MatrixUtils.java\n     /**\n      * Returns a {@link FieldMatrix} with specified dimensions.\n      * <p>The matrix elements are all set to field.getZero().</p>\n+     * @param <T> the type of the field elements\n      * @param field field to which the matrix elements belong\n      * @param rows number of rows of the matrix\n      * @param columns number of columns of the matrix\n      * <p>\n      * The input array is copied, not referenced.\n      * </p>\n+     * @param <T> the type of the field elements\n      * @param data input array\n      * @return  RealMatrix containing the values of the array\n      * @throws IllegalArgumentException if <code>data</code> is not rectangular\n     /**\n      * Returns <code>dimension x dimension</code> identity matrix.\n      *\n+     * @param <T> the type of the field elements\n+     * @param field field to which the elements belong\n      * @param dimension dimension of identity matrix to generate\n      * @return identity matrix\n      * @throws IllegalArgumentException if dimension is not positive\n     /**\n      * Returns a diagonal matrix with specified elements.\n      *\n+     * @param <T> the type of the field elements\n      * @param diagonal diagonal elements of the matrix (the array elements\n      * will be copied)\n      * @return diagonal matrix\n     /**\n      * Creates a {@link FieldVector} using the data from the input array. \n      * \n+     * @param <T> the type of the field elements\n      * @param data the input data\n      * @return a data.length FieldVector\n      * @throws IllegalArgumentException if <code>data</code> is empty\n      * Creates a row {@link FieldMatrix} using the data from the input\n      * array. \n      * \n+     * @param <T> the type of the field elements\n      * @param rowData the input row data\n      * @return a 1 x rowData.length FieldMatrix\n      * @throws IllegalArgumentException if <code>rowData</code> is empty\n      * Creates a column {@link FieldMatrix} using the data from the input\n      * array.\n      * \n+     * @param <T> the type of the field elements\n      * @param columnData  the input column data\n      * @return a columnData x 1 FieldMatrix\n      * @throws IllegalArgumentException if <code>columnData</code> is empty\n--- a/src/java/org/apache/commons/math/stat/clustering/Cluster.java\n+++ b/src/java/org/apache/commons/math/stat/clustering/Cluster.java\n public class Cluster<T extends Clusterable<T>> implements Serializable {\n \n     /** Serializable version identifier. */\n-    private static final long serialVersionUID = -1741417096265465690L;\n+    private static final long serialVersionUID = -3442297081515880464L;\n \n     /** The points contained in this cluster. */\n-    final List<T> points;\n+    private final List<T> points;\n \n     /** Center of the cluster. */\n-    final T center;\n+    private final T center;\n \n     /**\n      * Build a cluster centered at a specified point.\n--- a/src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java\n+++ b/src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java\n     private final int[] point;\n \n     /**\n+     * Build an instance wrapping an integer array.\n+     * <p>The wrapped array is referenced, it is <em>not</em> copied.</p>\n      * @param point the n-dimensional point in integer space\n      */\n     public EuclideanIntegerPoint(final int[] point) {\n     }\n \n     /**\n-     * Returns the n-dimensional point in integer space\n+     * Get the n-dimensional point in integer space.\n+     * @return a reference (not a copy!) to the wrapped array\n      */\n     public int[] getPoint() {\n         return point;\n--- a/src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n+++ b/src/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n \n /**\n  * Clustering algorithm based on David Arthur and Sergei Vassilvitski k-means++ algorithm.\n+ * @param <T> type of the points to cluster\n  * @see <a href=\"http://en.wikipedia.org/wiki/K-means%2B%2B\">K-means++ (wikipedia)</a>\n  * @version $Revision$ $Date$\n  * @since 2.0\n     /**\n      * Adds the given points to the closest {@link Cluster}.\n      * \n+     * @param <T> type of the points to cluster\n      * @param clusters the {@link Cluster}s to add the points to\n      * @param points the points to add to the given {@link Cluster}s\n      */\n     /**\n      * Use K-means++ to choose the initial centers.\n      * \n+     * @param <T> type of the points to cluster\n      * @param points the points to choose the initial centers from\n      * @param k the number of centers to choose\n      * @param random random generator to use\n     /**\n      * Returns the nearest {@link Cluster} to the given point\n      * \n+     * @param <T> type of the points to cluster\n      * @param clusters the {@link Cluster}s to search\n      * @param point the point to find the nearest {@link Cluster} for\n      * @return the nearest {@link Cluster} to the given point\n--- a/src/java/org/apache/commons/math/util/BigReal.java\n+++ b/src/java/org/apache/commons/math/util/BigReal.java\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n+    public boolean equals(Object other) {\n+        try {\n+            if (other == null) {\n+                return false;\n+            }\n+            return d.equals(((BigReal) other).d);\n+        } catch (ClassCastException cce) {\n+            return false;\n+        }\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public int hashCode() {\n+        return d.hashCode();\n+    }\n+\n+    /** {@inheritDoc} */\n     public Field<BigReal> getField() {\n         return BigRealField.getInstance();\n     }\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n     /** 2 &pi;. */\n     private static final double TWO_PI = 2 * Math.PI;\n \n+    /** Gap between NaN and regular numbers. */\n     private static final int NAN_GAP = 4 * 1024 * 1024;\n+\n+    /** Offset to order signed double numbers lexicographically. */\n     private static final long SGN_MASK = 0x8000000000000000L;\n \n     /**\n--- a/src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java\n+++ b/src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java\n  * {@link #iterator()} are fail-fast: they throw a\n  * <code>ConcurrentModificationException</code> when they detect the map has been\n  * modified during iteration.</p>\n+ * @param <T> the type of the field elements\n  * @version $Revision: 746578 $ $Date: 2009-02-21 12:01:14 -0800 (Sat, 21 Feb 2009) $\n  * @since 2.0\n  */\n public class OpenIntToFieldHashMap<T extends FieldElement<T>> implements Serializable {\n     \n     /** Serializable version identifier. */\n-    private static final long serialVersionUID = 1L;\n+    private static final long serialVersionUID = -9179080286849120720L;\n \n     /** Load factor for the map. */\n     private static final float LOAD_FACTOR = 0.5f;", "timestamp": 1241368128, "metainfo": ""}