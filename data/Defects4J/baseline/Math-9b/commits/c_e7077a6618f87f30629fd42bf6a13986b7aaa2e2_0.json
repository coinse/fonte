{"sha": "e7077a6618f87f30629fd42bf6a13986b7aaa2e2", "log": "Made Sum instance local to evaluate. Improved javadoc.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Mean.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Mean.java\n \n import java.io.Serializable;\n \n-import org\n-    .apache\n-    .commons\n-    .math\n-    .stat\n-    .univariate\n-    .AbstractStorelessUnivariateStatistic;\n+import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math.stat.univariate.summary.Sum;\n \n /**\n- * Returns the <a href=\"http://www.xycoon.com/arithmetic_mean.htm\">\n- * arithmetic mean </a> of the available values.\n- * @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:15 $\n+ * Returns the arithmetic mean of the available values. Uses the definitional \n+ * formula:\n+ * <p>\n+ * mean = sum(x_i) / n\n+ * <p>\n+ * where <code>n</code> is the number of observations.\n+ * <p>\n+ * The value of the statistic is computed using the following recursive\n+ * updating algorithm:\n+ * <p>\n+ * <ol>\n+ * <li>Initialize <code>m = </code> the first value</li>\n+ * <li>For each additional value, update using <br>\n+ *   <code>m = m + (new value - m) / (number of observations)</code></li>\n+ * </ol>\n+ * <p>\n+ *  Returns <code>Double.NaN</code> if the dataset is empty.\n+ * <p>\n+ * <strong>Note that this implementation is not synchronized.</strong> If \n+ * multiple threads access an instance of this class concurrently, and at least\n+ * one of the threads invokes the <code>increment()</code>, or \n+ * <code>clear()</code> method,  it must be synchronized externally.\n+ * \n+ * @version $Revision: 1.19 $ $Date: 2004/07/02 13:59:49 $\n  */\n-public class Mean extends AbstractStorelessUnivariateStatistic implements Serializable{\n+public class Mean extends AbstractStorelessUnivariateStatistic \n+    implements Serializable {\n \n     /** Serializable version identifier */\n     static final long serialVersionUID = -1296043746617791564L;    \n     \n-    /** first moment of values that have been added */\n+    /** First moment on which this statistic is based. */\n     protected FirstMoment moment = null;\n \n-    /** */\n+    /** \n+     * Determines whether or not this statistic can be incremented or cleared.\n+     * <p>\n+     * Statistics based on (constructed from) external moments cannot\n+     * be incremented or cleared.\n+     */\n     protected boolean incMoment = true;\n \n-    /** */\n+    /** Constructs a Mean. */\n     public Mean() {\n         moment = new FirstMoment();\n     }\n \n     /**\n      * Constructs a Mean with an External Moment.\n+     * \n      * @param m1 the moment\n      */\n     public Mean(final FirstMoment m1) {\n     public double getN() {\n         return moment.getN();\n     }\n-    \n-    /*UnvariateStatistic Approach */\n-\n-    /** */\n-    protected Sum sum = new Sum();\n \n     /**\n-     * Returns the <a href=\"http://www.xycoon.com/arithmetic_mean.htm\">\n-     * arithmetic mean </a> of a double[] of the available values.\n+     * Returns the arithmetic mean of the values in the input array, or\n+     * <code>Double.NaN</code> if the array is empty.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * <p>\n+     * See {@link Mean} for details on the computing algorithm.\n+     * \n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n      * @param length the number of elements to include\n      * @return the mean of the values or Double.NaN if the array is empty\n+     * @throws IllegalArgumentException if the array is null\n      * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n      */\n-    public double evaluate(\n-        final double[] values,\n-        final int begin,\n-        final int length) {\n+    public double evaluate(final double[] values,final int begin, final int length) {\n         if (test(values, begin, length)) {\n+            Sum sum = new Sum();\n             return sum.evaluate(values, begin, length) / ((double) length);\n         }\n         return Double.NaN;", "timestamp": 1088776789, "metainfo": ""}