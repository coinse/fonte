{"sha": "73f74addad22ac10ccc2d1581993fdf4ca1564b1", "log": "Replaced deprecated MaximumIterationsExceededException by MaxCountExceededException.  JIRA: MATH-438.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java\n \n import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.MaxIterationsExceededException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.exception.MaxCountExceededException;\n import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.FastMath;\n \n         }\n \n-        throw new MaxIterationsExceededException(maximalIterationCount);\n+        throw new MaxCountExceededException(maximalIterationCount);\n \n     }\n \n--- a/src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java\n \n import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.MaxIterationsExceededException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.exception.MaxCountExceededException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.FastMath;\n \n     /** {@inheritDoc} */\n     @Deprecated\n     public double integrate(final double min, final double max)\n-        throws MaxIterationsExceededException, MathUserException, IllegalArgumentException {\n+        throws MaxCountExceededException, MathUserException, IllegalArgumentException {\n         return integrate(f, min, max);\n     }\n \n     /** {@inheritDoc} */\n     public double integrate(final UnivariateRealFunction f, final double min, final double max)\n-        throws MaxIterationsExceededException, MathUserException, IllegalArgumentException {\n+        throws MaxCountExceededException, MathUserException, IllegalArgumentException {\n \n         final int m = maximalIterationCount + 1;\n         double previousRow[] = new double[m];\n             }\n             olds = s;\n         }\n-        throw new MaxIterationsExceededException(maximalIterationCount);\n+        throw new MaxCountExceededException(maximalIterationCount);\n     }\n \n     /** {@inheritDoc} */\n--- a/src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java\n \n import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.MaxIterationsExceededException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.exception.MaxCountExceededException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.FastMath;\n \n     /** {@inheritDoc} */\n     @Deprecated\n     public double integrate(final double min, final double max)\n-        throws MaxIterationsExceededException, MathUserException, IllegalArgumentException {\n+        throws MaxCountExceededException, MathUserException, IllegalArgumentException {\n         return integrate(f, min, max);\n     }\n \n     /** {@inheritDoc} */\n     public double integrate(final UnivariateRealFunction f, final double min, final double max)\n-        throws MaxIterationsExceededException, MathUserException, IllegalArgumentException {\n+        throws MaxCountExceededException, MathUserException, IllegalArgumentException {\n \n         clearResult();\n         verifyInterval(min, max);\n             olds = s;\n             oldt = t;\n         }\n-        throw new MaxIterationsExceededException(maximalIterationCount);\n+        throw new MaxCountExceededException(maximalIterationCount);\n     }\n \n     /** {@inheritDoc} */\n--- a/src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java\n \n import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.MaxIterationsExceededException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.exception.MaxCountExceededException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.FastMath;\n \n     /** {@inheritDoc} */\n     @Deprecated\n     public double integrate(final double min, final double max)\n-        throws MaxIterationsExceededException, MathUserException, IllegalArgumentException {\n+        throws MaxCountExceededException, MathUserException, IllegalArgumentException {\n         return integrate(f, min, max);\n     }\n \n     /** {@inheritDoc} */\n     public double integrate(final UnivariateRealFunction f, final double min, final double max)\n-        throws MaxIterationsExceededException, MathUserException, IllegalArgumentException {\n+        throws MaxCountExceededException, MathUserException, IllegalArgumentException {\n \n         clearResult();\n         verifyInterval(min, max);\n             }\n             oldt = t;\n         }\n-        throw new MaxIterationsExceededException(maximalIterationCount);\n+        throw new MaxCountExceededException(maximalIterationCount);\n     }\n \n     /** {@inheritDoc} */\n--- a/src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java\n \n import java.util.Collection;\n \n-import org.apache.commons.math.MaxIterationsExceededException;\n+import org.apache.commons.math.exception.MaxCountExceededException;\n import org.apache.commons.math.optimization.GoalType;\n import org.apache.commons.math.optimization.OptimizationException;\n import org.apache.commons.math.optimization.RealPointValuePair;\n     protected void incrementIterationsCounter()\n         throws OptimizationException {\n         if (++iterations > maxIterations) {\n-            throw new OptimizationException(new MaxIterationsExceededException(maxIterations));\n+            throw new OptimizationException(new MaxCountExceededException(maxIterations));\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/main/java/org/apache/commons/math/special/Gamma.java\n package org.apache.commons.math.special;\n \n import org.apache.commons.math.MathException;\n-import org.apache.commons.math.MaxIterationsExceededException;\n+import org.apache.commons.math.exception.MaxCountExceededException;\n import org.apache.commons.math.util.ContinuedFraction;\n import org.apache.commons.math.util.FastMath;\n \n                 sum = sum + an;\n             }\n             if (n >= maxIterations) {\n-                throw new MaxIterationsExceededException(maxIterations);\n+                throw new MaxCountExceededException(maxIterations);\n             } else if (Double.isInfinite(sum)) {\n                 ret = 1.0;\n             } else {\n--- a/src/main/java/org/apache/commons/math/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math/util/ContinuedFraction.java\n \n import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.MathException;\n-import org.apache.commons.math.MaxIterationsExceededException;\n+import org.apache.commons.math.exception.MaxCountExceededException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n         }\n \n         if (n >= maxIterations) {\n-            throw new MaxIterationsExceededException(maxIterations,\n-                LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n-                x);\n+            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n+                    maxIterations, x);\n         }\n \n         return c;", "timestamp": 1291175000, "metainfo": ""}