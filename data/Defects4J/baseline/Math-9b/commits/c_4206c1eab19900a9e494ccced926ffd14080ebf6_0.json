{"sha": "4206c1eab19900a9e494ccced926ffd14080ebf6", "log": "Added methods for computing variance using precomputed mean, javadoc.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/StatUtils.java\n+++ b/src/java/org/apache/commons/math/stat/StatUtils.java\n import org.apache.commons.math.stat.univariate.summary.SumOfSquares;\n \n /**\n- * StatUtils provides static implementations of common double[] based\n- * statistical methods. These return a single result value or in some cases, as\n- * identified in the javadoc for each method, <code>Double.NaN.</code>\n- * @version $Revision: 1.29 $ $Date: 2004/06/23 16:26:17 $\n+ * StatUtils provides static methods for computing statistics based on data\n+ * stored in double[] arrays. \n+ * \n+ * @version $Revision: 1.30 $ $Date: 2004/07/11 18:41:19 $\n  */\n public final class StatUtils {\n \n     private static UnivariateStatistic mean = new Mean();\n \n     /** variance */\n-    private static UnivariateStatistic variance = new Variance();\n+    private static Variance variance = new Variance();\n \n     /** variance */\n     private static Percentile percentile = new Percentile();\n     }\n \n     /**\n-     * The sum of the values that have been added to Univariate.\n-     * @param values Is a double[] containing the values\n-     * @return the sum of the values or <code>Double.NaN</code> if the array is empty\n+     * Returns the sum of the values in the input array, or\n+     * <code>Double.NaN</code> if the array is empty.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the input array\n+     * is null.\n+     * \n+     * @param values  array of values to sum\n+     * @return the sum of the values or <code>Double.NaN</code> if the array\n+     * is empty\n+     * @throws IllegalArgumentException if the array is null\n      */\n     public static double sum(final double[] values) {\n         return sum.evaluate(values);\n     }\n \n     /**\n-     * The sum of the values that have been added to Univariate.\n-     * @param values Is a double[] containing the values\n-     * @param begin processing at this point in the array\n-     * @param length the number of elements to include\n-     * @return the sum of the values or <code>Double.NaN</code> if the array is empty\n-     */\n-    public static double sum(\n-        final double[] values,\n-        final int begin,\n-        final int length) {\n+     * Returns the sum of the entries in the specified portion of\n+     * the input array, or <code>Double.NaN</code> if the designated subarray\n+     * is empty.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * \n+     * @param values the input array\n+     * @param begin index of the first array element to include\n+     * @param length the number of elements to include\n+     * @return the sum of the values or Double.NaN if length = 0\n+     * @throws IllegalArgumentException if the array is null or the array index\n+     *  parameters are not valid\n+     */\n+    public static double sum(final double[] values, final int begin, \n+            final int length) {\n         return sum.evaluate(values, begin, length);\n     }\n \n     /**\n-     * Returns the sum of the squares of the available values.\n-     * @param values Is a double[] containing the values\n-     * @return the sum of the squared values or <code>Double.NaN</code> if the array is empty\n+     * Returns the sum of the squares of the entries in the input array, or \n+     * <code>Double.NaN</code> if the array is empty.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * \n+     * @param values  input array\n+     * @return the sum of the squared values or <code>Double.NaN</code> if the\n+     * array is empty\n+     * @throws IllegalArgumentException if the array is null\n      */\n     public static double sumSq(final double[] values) {\n         return sumSq.evaluate(values);\n     }\n \n     /**\n-     * Returns the sum of the squares of the available values.\n-     * @param values Is a double[] containing the values\n-     * @param begin processing at this point in the array\n-     * @param length the number of elements to include\n-     * @return the sum of the squared values or <code>Double.NaN</code> if the array is empty\n-     */\n-    public static double sumSq(\n-        final double[] values,\n-        final int begin,\n-        final int length) {\n+     * Returns the sum of the squares of the entries in the specified portion of\n+     * the input array, or <code>Double.NaN</code> if the designated subarray\n+     * is empty.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * \n+     * @param values the input array\n+     * @param begin index of the first array element to include\n+     * @param length the number of elements to include\n+     * @return the sum of the squares of the values or Double.NaN if length = 0\n+     * @throws IllegalArgumentException if the array is null or the array index\n+     * parameters are not valid\n+     */\n+    public static double sumSq(final double[] values, final int begin,\n+            final int length) {\n         return sumSq.evaluate(values, begin, length);\n     }\n \n     /**\n-     * Returns the product for this collection of values\n-     * @param values Is a double[] containing the values\n-     * @return the product values or <code>Double.NaN</code> if the array is empty\n+     * Returns the product of the entries in the input array, or \n+     * <code>Double.NaN</code> if the array is empty.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * \n+     * @param values the input array\n+     * @return the product of the values or Double.NaN if the array is empty\n+     * @throws IllegalArgumentException if the array is null\n      */\n     public static double product(final double[] values) {\n         return prod.evaluate(values);\n     }\n \n     /**\n-     * Returns the product for this collection of values\n-     * @param values Is a double[] containing the values\n-     * @param begin processing at this point in the array\n-     * @param length the number of elements to include\n-     * @return the product values or <code>Double.NaN</code> if the array is empty\n-     */\n-    public static double product(\n-        final double[] values,\n-        final int begin,\n-        final int length) {\n+     * Returns the product of the entries in the specified portion of\n+     * the input array, or <code>Double.NaN</code> if the designated subarray\n+     * is empty.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * \n+     * @param values the input array\n+     * @param begin index of the first array element to include\n+     * @param length the number of elements to include\n+     * @return the product of the values or Double.NaN if length = 0\n+     * @throws IllegalArgumentException if the array is null or the array index\n+     * parameters are not valid\n+     */\n+    public static double product(final double[] values, final int begin,\n+            final int length) {\n         return prod.evaluate(values, begin, length);\n     }\n \n     /**\n-     * Returns the sum of the natural logs for this collection of values\n-     * @param values Is a double[] containing the values\n-     * @return the sumLog value or <code>Double.NaN</code> if the array is empty\n+     * Returns the sum of the natural logs of the entries in the input array, or \n+     * <code>Double.NaN</code> if the array is empty.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * <p>\n+     * See {@link org.apache.commons.math.stat.univariate.summary.SumOfLogs}.\n+     * \n+     * @param values the input array\n+     * @return the sum of the natural logs of the values or Double.NaN if \n+     * the array is empty\n+     * @throws IllegalArgumentException if the array is null\n      */\n     public static double sumLog(final double[] values) {\n         return sumLog.evaluate(values);\n     }\n \n     /**\n-     * Returns the sum of the natural logs for this collection of values\n-     * @param values Is a double[] containing the values\n-     * @param begin processing at this point in the array\n-     * @param length the number of elements to include\n-     * @return the sumLog value or <code>Double.NaN</code> if the array is empty\n-     */\n-    public static double sumLog(\n-        final double[] values,\n-        final int begin,\n-        final int length) {\n+     * Returns the sum of the natural logs of the entries in the specified portion of\n+     * the input array, or <code>Double.NaN</code> if the designated subarray\n+     * is empty.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * <p>\n+      * See {@link org.apache.commons.math.stat.univariate.summary.SumOfLogs}.\n+     * \n+     * @param values the input array\n+     * @param begin index of the first array element to include\n+     * @param length the number of elements to include\n+     * @return the sum of the natural logs of the values or Double.NaN if \n+     * length = 0\n+     * @throws IllegalArgumentException if the array is null or the array index\n+     * parameters are not valid\n+     */\n+    public static double sumLog(final double[] values, final int begin,\n+            final int length) {\n         return sumLog.evaluate(values, begin, length);\n     }\n \n     /**\n-     * Returns the <a href=\"http://www.xycoon.com/arithmetic_mean.htm\">\n-     * arithmetic mean </a> of the available values\n-     * @param values Is a double[] containing the values\n-     * @return the mean of the values or <code>Double.NaN</code> if the array is empty\n+     * Returns the arithmetic mean of the entries in the input array, or \n+     * <code>Double.NaN</code> if the array is empty.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * <p>\n+     * See {@link org.apache.commons.math.stat.univariate.moment.Mean} for\n+     * details on the computing algorithm.\n+     * \n+     * @param values the input array\n+     * @return the mean of the values or Double.NaN if the array is empty\n+     * @throws IllegalArgumentException if the array is null\n      */\n     public static double mean(final double[] values) {\n         return mean.evaluate(values);\n     }\n \n     /**\n-      * Returns the <a href=\"http://www.xycoon.com/arithmetic_mean.htm\">\n-      * arithmetic mean </a> of the available values\n-     * @param values Is a double[] containing the values\n-     * @param begin processing at this point in the array\n-     * @param length the number of elements to include\n-      * @return the mean of the values or <code>Double.NaN</code> if the array is empty\n-      */\n-    public static double mean(\n-        final double[] values,\n-        final int begin,\n-        final int length) {\n+     * Returns the arithmetic mean of the entries in the specified portion of\n+     * the input array, or <code>Double.NaN</code> if the designated subarray\n+     * is empty.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * <p>\n+     * See {@link org.apache.commons.math.stat.univariate.moment.Mean} for\n+     * details on the computing algorithm.\n+     * \n+     * @param values the input array\n+     * @param begin index of the first array element to include\n+     * @param length the number of elements to include\n+     * @return the mean of the values or Double.NaN if length = 0\n+     * @throws IllegalArgumentException if the array is null or the array index\n+     * parameters are not valid\n+     */\n+    public static double mean(final double[] values, final int begin,\n+            final int length) {\n         return mean.evaluate(values, begin, length);\n     }\n \n     /**\n-     * Returns the variance of the available values. This uses a corrected\n-     * two pass algorithm as described in:\n-     * <p>\n-     * \"Algorithms for Computing the Sample Variance: Analysis and\n-     * Recommendations\", Chan, T.F., Golub, G.H., and LeVeque, R.J.\n-     * 1983, American Statistician, vol. 37, pp. 242-247.\n-     *\n-     * @param values Is a double[] containing the values\n-     * @return the result, <code>Double.NaN</code> for an empty array\n-     * or 0.0 for a single value set.\n+     * Returns the variance of the entries in the input array, or \n+     * <code>Double.NaN</code> if the array is empty.\n+     * <p>\n+     * See {@link org.apache.commons.math.stat.univariate.moment.Variance} for\n+     * details on the computing algorithm.\n+     * <p>\n+     * Returns 0 for a single-value (i.e. length = 1) sample.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * \n+     * @param values the input array\n+     * @return the variance of the values or Double.NaN if the array is empty\n+     * @throws IllegalArgumentException if the array is null\n      */\n     public static double variance(final double[] values) {\n         return variance.evaluate(values);\n     }\n \n     /**\n-     * Returns the variance of the available values. This uses a corrected\n-     * two pass algorithm as described in:\n-     * <p>\n-     * \"Algorithms for Computing the Sample Variance: Analysis and\n-     * Recommendations\", Chan, T.F., Golub, G.H., and LeVeque, R.J.\n-     * 1983, American Statistician, vol. 37, pp. 242-247.\n-     *\n-     * @param values Is a double[] containing the values\n-     * @param begin processing at this point in the array\n-     * @param length the number of elements to include\n-     * @return the result, <code>Double.NaN</code> for an empty array\n-     * or 0.0 for a single value set.\n-     */\n-    public static double variance(\n-        final double[] values,\n-        final int begin,\n-        final int length) {\n+     * Returns the variance of the entries in the specified portion of\n+     * the input array, or <code>Double.NaN</code> if the designated subarray\n+     * is empty.\n+     * <p>\n+     * See {@link org.apache.commons.math.stat.univariate.moment.Variance} for\n+     * details on the computing algorithm.\n+     * <p>\n+     * Returns 0 for a single-value (i.e. length = 1) sample.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null or the\n+     * array index parameters are not valid.\n+     * \n+     * @param values the input array\n+     * @param begin index of the first array element to include\n+     * @param length the number of elements to include\n+     * @return the variance of the values or Double.NaN if length = 0\n+     * @throws IllegalArgumentException if the array is null or the array index\n+     *  parameters are not valid\n+     */\n+    public static double variance(final double[] values, final int begin,\n+            final int length) {\n         return variance.evaluate(values, begin, length);\n     }\n-\n-    /**\n-     * Returns the maximum of the available values\n-     * @param values Is a double[] containing the values\n-     * @return the maximum of the values or <code>Double.NaN</code> if the array is empty\n+    \n+    /**\n+     * Returns the variance of the entries in the specified portion of\n+     * the input array, using the precomputed mean value.  Returns \n+     * <code>Double.NaN</code> if the designated subarray is empty.\n+     * <p>\n+     * See {@link org.apache.commons.math.stat.univariate.moment.Variance} for\n+     * details on the computing algorithm.\n+     * <p>\n+     * Returns 0 for a single-value (i.e. length = 1) sample.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null or the\n+     * array index parameters are not valid.\n+     * \n+     * @param values the input array\n+     * @param mean the precomputed mean value\n+     * @param begin index of the first array element to include\n+     * @param length the number of elements to include\n+     * @return the variance of the values or Double.NaN if length = 0\n+     * @throws IllegalArgumentException if the array is null or the array index\n+     *  parameters are not valid\n+     */\n+    public static double variance(final double[] values, final double mean, \n+            final int begin, final int length) {\n+        return variance.evaluate(values, mean, begin, length);    \n+    }\n+    \n+    /**\n+     * Returns the variance of the entries in the input array, using the\n+     * precomputed mean value.  Returns <code>Double.NaN</code> if the array\n+     * is empty.\n+     * <p>\n+     * See {@link org.apache.commons.math.stat.univariate.moment.Variance} for\n+     * details on the computing algorithm.\n+     * <p>\n+     * Returns 0 for a single-value (i.e. length = 1) sample.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * \n+     * @param values the input array\n+     * @param mean the precomputed mean value\n+     * @return the variance of the values or Double.NaN if the array is empty\n+     * @throws IllegalArgumentException if the array is null\n+     */\n+    public static double variance(final double[] values, final double mean) {\n+        return variance.evaluate(values, mean);    \n+    }\n+\n+    /**\n+     * Returns the maximum of the entries in the input array, or \n+     * <code>Double.NaN</code> if the array is empty.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * <p>\n+     * <ul>\n+     * <li>The result is <code>NaN</code> iff all values are <code>NaN</code> \n+     * (i.e. <code>NaN</code> values have no impact on the value of the statistic).</li>\n+     * <li>If any of the values equals <code>Double.POSITIVE_INFINITY</code>, \n+     * the result is <code>Double.POSITIVE_INFINITY.</code></li>\n+     * </ul>\n+     * \n+     * @param values the input array\n+     * @return the maximum of the values or Double.NaN if the array is empty\n+     * @throws IllegalArgumentException if the array is null\n      */\n     public static double max(final double[] values) {\n         return max.evaluate(values);\n     }\n \n     /**\n-     * Returns the maximum of the available values\n-     * @param values Is a double[] containing the values\n-     * @param begin processing at this point in the array\n-     * @param length the number of elements to include\n-     * @return the maximum of the values or <code>Double.NaN</code> if the array is empty\n-     */\n-    public static double max(\n-        final double[] values,\n-        final int begin,\n-        final int length) {\n+     * Returns the maximum of the entries in the specified portion of\n+     * the input array, or <code>Double.NaN</code> if the designated subarray\n+     * is empty.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null or\n+     * the array index parameters are not valid.\n+     * <p>\n+     * <ul>\n+     * <li>The result is <code>NaN</code> iff all values are <code>NaN</code> \n+     * (i.e. <code>NaN</code> values have no impact on the value of the statistic).</li>\n+     * <li>If any of the values equals <code>Double.POSITIVE_INFINITY</code>, \n+     * the result is <code>Double.POSITIVE_INFINITY.</code></li>\n+     * </ul>\n+     * \n+     * @param values the input array\n+     * @param begin index of the first array element to include\n+     * @param length the number of elements to include\n+     * @return the maximum of the values or Double.NaN if length = 0\n+     * @throws IllegalArgumentException if the array is null or the array index\n+     * parameters are not valid\n+     */\n+    public static double max(final double[] values, final int begin,\n+            final int length) {\n         return max.evaluate(values, begin, length);\n     }\n \n-    /**\n-     * Returns the minimum of the available values\n-     * @param values Is a double[] containing the values\n-     * @return the minimum of the values or <code>Double.NaN</code> if the array is empty\n+     /**\n+     * Returns the minimum of the entries in the input array, or \n+     * <code>Double.NaN</code> if the array is empty.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * <p>\n+     * <ul>\n+     * <li>The result is <code>NaN</code> iff all values are <code>NaN</code> \n+     * (i.e. <code>NaN</code> values have no impact on the value of the statistic).</li>\n+     * <li>If any of the values equals <code>Double.NEGATIVE_INFINITY</code>, \n+     * the result is <code>Double.NEGATIVE_INFINITY.</code></li>\n+     * </ul> \n+     * \n+     * @param values the input array\n+     * @return the minimum of the values or Double.NaN if the array is empty\n+     * @throws IllegalArgumentException if the array is null\n      */\n     public static double min(final double[] values) {\n         return min.evaluate(values);\n     }\n \n-    /**\n-     * Returns the minimum of the available values\n-     * @param values Is a double[] containing the values\n-     * @param begin processing at this point in the array\n-     * @param length the number of elements to include\n-     * @return the minimum of the values or <code>Double.NaN</code> if the array is empty\n-     */\n-    public static double min(\n-        final double[] values,\n-        final int begin,\n-        final int length) {\n+     /**\n+     * Returns the minimum of the entries in the specified portion of\n+     * the input array, or <code>Double.NaN</code> if the designated subarray\n+     * is empty.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null or\n+     * the array index parameters are not valid.\n+     * <p>\n+     * <ul>\n+     * <li>The result is <code>NaN</code> iff all values are <code>NaN</code> \n+     * (i.e. <code>NaN</code> values have no impact on the value of the statistic).</li>\n+     * <li>If any of the values equals <code>Double.NEGATIVE_INFINITY</code>, \n+     * the result is <code>Double.NEGATIVE_INFINITY.</code></li>\n+     * </ul> \n+     * \n+     * @param values the input array\n+     * @param begin index of the first array element to include\n+     * @param length the number of elements to include\n+     * @return the minimum of the values or Double.NaN if length = 0\n+     * @throws IllegalArgumentException if the array is null or the array index\n+     * parameters are not valid\n+     */\n+    public static double min(final double[] values, final int begin,\n+            final int length) {\n         return min.evaluate(values, begin, length);\n     }\n     \n     /**\n-     * Returns an estimate for the pth percentile of the stored values. \n-     * <p>\n-     * The implementation provided here follows the first estimation procedure presented\n-     * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section2/prc252.htm\">here.</a>\n-     * <p>\n-     * <strong>Preconditions</strong>:<ul>\n-     * <li><code>0 &lt; p &lt; 100</code> (otherwise an \n-     * <code>IllegalArgumentException</code> is thrown)</li>\n-     * <li>at least one value must be stored (returns <code>Double.NaN\n-     *     </code> otherwise)</li>\n+     * Returns an estimate of the <code>p</code>th percentile of the values\n+     * in the <code>values</code> array.\n+     * <p>\n+     * <ul>\n+     * <li>Returns <code>Double.NaN</code> if <code>values</code> has length \n+     * <code>0</code></li>\n+     * <li>Returns (for any value of <code>p</code>) <code>values[0]</code>\n+     *  if <code>values</code> has length <code>1</code></li>\n+     * <li>Throws <code>IllegalArgumentException</code> if <code>values</code>\n+     * is null  or p is not a valid quantile value (p must be greater than 0\n+     * and less than or equal to 100)</li>\n      * </ul>\n-     * \n-     * @param values Is a double[] containing the values\n-     * @param p the requested percentile (scaled from 0 - 100)\n-     * @return An estimate for the pth percentile of the data values\n+     * <p>\n+     * See {@link org.apache.commons.math.stat.univariate.rank.Percentile} for\n+     * a description of the percentile estimation algorithm used.\n+     * \n+     * @param values input array of values\n+     * @param p the percentile value to compute\n+     * @return the percentile value or Double.NaN if the array is empty\n+     * @throws IllegalArgumentException if <code>values</code> is null \n+     * or p is invalid\n      */\n     public static double percentile(final double[] values, final double p) {\n             return percentile.evaluate(values,p);\n     }\n \n-    /**\n-     * Returns an estimate for the pth percentile of the stored values. \n-     *<p>\n-    * The implementation provided here follows the first estimation procedure presented\n-     * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section2/prc252.htm\">here.</a>\n-     * <p>\n-     * <strong>Preconditions</strong>:<ul>\n-     * <li><code>0 &lt; p &lt; 100</code> (otherwise an \n-     * <code>IllegalArgumentException</code> is thrown)</li>\n-     * <li>at least one value must be stored (returns <code>Double.NaN\n-     *     </code> otherwise)</li>\n+     /**\n+     * Returns an estimate of the <code>p</code>th percentile of the values\n+     * in the <code>values</code> array, starting with the element in (0-based)\n+     * position <code>begin</code> in the array and including <code>length</code>\n+     * values.\n+     * <p>\n+     * <ul>\n+     * <li>Returns <code>Double.NaN</code> if <code>length = 0</code></li>\n+     * <li>Returns (for any value of <code>p</code>) <code>values[begin]</code>\n+     *  if <code>length = 1 </code></li>\n+     * <li>Throws <code>IllegalArgumentException</code> if <code>values</code>\n+     *  is null , <code>begin</code> or <code>length</code> is invalid, or \n+     * <code>p</code> is not a valid quantile value (p must be greater than 0\n+     * and less than or equal to 100)</li>\n      * </ul>\n-     * \n-     * @param values Is a double[] containing the values\n-     * @param begin processing at this point in the array\n-     * @param length the number of elements to include\n-     * @param p the requested percentile (scaled from 0 - 100)\n-     * @return An estimate for the pth percentile of the data values\n-     */\n-    public static double percentile(\n-            final double[] values,\n-            final int begin,\n-            final int length, \n-            final double p) {\n-            return percentile.evaluate(values, begin, length, p);\n+     * <p>\n+      * See {@link org.apache.commons.math.stat.univariate.rank.Percentile} for\n+      * a description of the percentile estimation algorithm used.\n+     * \n+     * @param values array of input values\n+     * @param p  the percentile to compute\n+     * @param begin  the first (0-based) element to include in the computation\n+     * @param length  the number of array elements to include\n+     * @return  the percentile value\n+     * @throws IllegalArgumentException if the parameters are not valid or the\n+     * input array is null\n+     */\n+    public static double percentile(final double[] values, final int begin, \n+            final int length, final double p) {\n+        return percentile.evaluate(values, begin, length, p);\n     }   \n     \n     /**", "timestamp": 1089571279, "metainfo": ""}