{"sha": "30a40fa69d15367196d134823032514f6cddbaf6", "log": "replaced deprecated protected real/imaginary fields by private final fields  ", "commit": "\n--- a/src/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/java/org/apache/commons/math/complex/Complex.java\n     \n     /** \n      * The imaginary part \n-     * @deprecated to be made final and private in 2.0\n-     */\n-    protected double imaginary;\n+     */\n+    private final double imaginary;\n     \n     /** \n      * The real part \n-     * @deprecated to be made final and private in 2.0\n-     */\n-    protected double real;\n+     */\n+    private final double real;\n     \n     /**\n      * Create a complex number given the real and imaginary parts.\n--- a/src/test/org/apache/commons/math/complex/ComplexTest.java\n+++ b/src/test/org/apache/commons/math/complex/ComplexTest.java\n         assertTrue(z.isNaN());\n         z = new Complex(1, nan);\n         Complex w = x.add(z);\n-        assertEquals(w.real, 4.0, 0);\n-        assertTrue(Double.isNaN(w.imaginary));\n+        assertEquals(w.getReal(), 4.0, 0);\n+        assertTrue(Double.isNaN(w.getImaginary()));\n     }\n     \n     public void testAddInfinite() {\n         Complex x = new Complex(1, 1);\n         Complex z = new Complex(inf, 0);\n         Complex w = x.add(z);\n-        assertEquals(w.imaginary, 1, 0);\n-        assertEquals(inf, w.real, 0);\n+        assertEquals(w.getImaginary(), 1, 0);\n+        assertEquals(inf, w.getReal(), 0);\n         \n         x = new Complex(neginf, 0);\n-        assertTrue(Double.isNaN(x.add(z).real));\n+        assertTrue(Double.isNaN(x.add(z).getReal()));\n     }\n     \n     public void testConjugate() {\n     \n     public void testConjugateInfiinite() {\n         Complex z = new Complex(0, inf);\n-        assertEquals(neginf, z.conjugate().imaginary, 0);\n+        assertEquals(neginf, z.conjugate().getImaginary(), 0);\n         z = new Complex(0, neginf);\n-        assertEquals(inf, z.conjugate().imaginary, 0);\n+        assertEquals(inf, z.conjugate().getImaginary(), 0);\n     }\n     \n     public void testDivide() {\n         assertTrue(x.divide(w).equals(Complex.ZERO));\n         \n         Complex z = w.divide(x);\n-        assertTrue(Double.isNaN(z.real));\n-        assertEquals(inf, z.imaginary, 0);\n+        assertTrue(Double.isNaN(z.getReal()));\n+        assertEquals(inf, z.getImaginary(), 0);\n         \n         w = new Complex(inf, inf);\n         z = w.divide(x);\n-        assertTrue(Double.isNaN(z.imaginary));\n-        assertEquals(inf, z.real, 0);\n+        assertTrue(Double.isNaN(z.getImaginary()));\n+        assertEquals(inf, z.getReal(), 0);\n         \n         w = new Complex(1, inf);\n         z = w.divide(w);\n-        assertTrue(Double.isNaN(z.real));\n-        assertTrue(Double.isNaN(z.imaginary));\n+        assertTrue(Double.isNaN(z.getReal()));\n+        assertTrue(Double.isNaN(z.getImaginary()));\n     }\n     \n     public void testDivideNaN() {\n     \n     public void testDivideNaNInf() {  \n        Complex z = oneInf.divide(Complex.ONE);\n-       assertTrue(Double.isNaN(z.real));\n-       assertEquals(inf, z.imaginary, 0);\n+       assertTrue(Double.isNaN(z.getReal()));\n+       assertEquals(inf, z.getImaginary(), 0);\n        \n        z = negInfNegInf.divide(oneNaN);\n-       assertTrue(Double.isNaN(z.real));\n-       assertTrue(Double.isNaN(z.imaginary));\n+       assertTrue(Double.isNaN(z.getReal()));\n+       assertTrue(Double.isNaN(z.getImaginary()));\n        \n        z = negInfInf.divide(Complex.ONE);\n-       assertTrue(Double.isNaN(z.real));\n-       assertTrue(Double.isNaN(z.imaginary));\n+       assertTrue(Double.isNaN(z.getReal()));\n+       assertTrue(Double.isNaN(z.getImaginary()));\n     }\n     \n     public void testMultiply() {\n     public void testMultiplyNaNInf() {\n         Complex z = new Complex(1,1);\n         Complex w = z.multiply(infOne);\n-        assertEquals(w.real, inf, 0);\n-        assertEquals(w.imaginary, inf, 0);\n+        assertEquals(w.getReal(), inf, 0);\n+        assertEquals(w.getImaginary(), inf, 0);\n \n         // [MATH-164]\n         assertTrue(new Complex( 1,0).multiply(infInf).equals(Complex.INF));\n         assertTrue(new Complex( 1,0).multiply(negInfZero).equals(Complex.INF));\n         \n         w = oneInf.multiply(oneNegInf);\n-        assertEquals(w.real, inf, 0);\n-        assertEquals(w.imaginary, inf, 0);\n+        assertEquals(w.getReal(), inf, 0);\n+        assertEquals(w.getImaginary(), inf, 0);\n         \n         w = negInfNegInf.multiply(oneNaN);\n-        assertTrue(Double.isNaN(w.real));\n-        assertTrue(Double.isNaN(w.imaginary));  \n+        assertTrue(Double.isNaN(w.getReal()));\n+        assertTrue(Double.isNaN(w.getImaginary()));  \n     }\n     \n     public void testNegate() {", "timestamp": 1209038519, "metainfo": ""}