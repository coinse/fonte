{"sha": "8f8b6e08e4b09ec685ffe843922d789294cbc9d9", "log": "MATH-849: unit tests for double Gamma.invGamma1pm1(double).   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/special/GammaTest.java\n+++ b/src/test/java/org/apache/commons/math3/special/GammaTest.java\n package org.apache.commons.math3.special;\n \n import org.apache.commons.math3.TestUtils;\n+import org.apache.commons.math3.exception.NumberIsTooLargeException;\n+import org.apache.commons.math3.exception.NumberIsTooSmallException;\n import org.apache.commons.math3.util.FastMath;\n \n import org.junit.Test;\n         }\n     }\n \n+    /**\n+     * <p>\n+     * Reference values for the {@link GammaNSWC#invGamma1pm1(double)} method.\n+     * These values were generated with the following <a\n+     * href=\"http://maxima.sourceforge.net/\">Maxima</a> script\n+     * </p>\n+     *\n+     * <pre>\n+     * kill(all);\n+     *\n+     * fpprec : 64;\n+     * gam1(x) := 1 / gamma(1 + x) - 1;\n+     * x : makelist(bfloat(i / 8), i, -4, 12);\n+     *\n+     * for i : 1 while i <= length(x) do print(\"{\",\n+     *                                         float(x[i]),\n+     *                                         \",\",\n+     *                                         float(gam1(x[i])),\n+     *                                         \"},\");\n+     * </pre>\n+     */\n+    // @formatter:off\n+    private static final double[][] INV_GAMMA1P_M1_REF = {\n+        { -0.5 , -.4358104164522437 },\n+        { -0.375 , -.3029021533379859 },\n+        { -0.25 , -0.183951060901737 },\n+        { -0.125 , -.08227611018520711 },\n+        { 0.0 , 0.0 },\n+        { 0.125 , .06186116458306091 },\n+        { 0.25 , .1032626513208373 },\n+        { 0.375 , .1249687649039041 },\n+        { 0.5 , .1283791670955126 },\n+        { 0.625 , .1153565546592225 },\n+        { 0.75 , 0.0880652521310173 },\n+        { 0.875 , .04882730264547758 },\n+        { 1.0 , 0.0 },\n+        { 1.125 , -.05612340925950141 },\n+        { 1.25 , -.1173898789433302 },\n+        { 1.375 , -.1818408982517061 },\n+        { 1.5 , -0.247747221936325 },\n+    };\n+    // @formatter:on\n+\n+    @Test\n+    public void testInvGamma1pm1() {\n+\n+        final int ulps = 3;\n+        for (int i = 0; i < INV_GAMMA1P_M1_REF.length; i++) {\n+            final double[] ref = INV_GAMMA1P_M1_REF[i];\n+            final double x = ref[0];\n+            final double expected = ref[1];\n+            final double actual = Gamma.invGamma1pm1(x);\n+            final double tol = ulps * FastMath.ulp(expected);\n+            Assert.assertEquals(Double.toString(x), expected, actual, tol);\n+        }\n+    }\n+\n+    @Test(expected = NumberIsTooSmallException.class)\n+    public void testInvGamma1pm1Precondition1() {\n+\n+        Gamma.invGamma1pm1(-0.51);\n+    }\n+\n+    @Test(expected = NumberIsTooLargeException.class)\n+    public void testInvGamma1pm1Precondition2() {\n+\n+        Gamma.invGamma1pm1(1.51);\n+    }\n+\n     private void checkRelativeError(String msg, double expected, double actual, double tolerance) {\n         Assert.assertEquals(msg, expected, actual, FastMath.abs(tolerance * actual));\n     }", "timestamp": 1346378270, "metainfo": ""}