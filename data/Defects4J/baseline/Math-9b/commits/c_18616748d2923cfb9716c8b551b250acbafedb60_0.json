{"sha": "18616748d2923cfb9716c8b551b250acbafedb60", "log": "Units tests of RealMatrix implementations: replaced reference to DecompositionSolver.solve(double[]) by DecompositionSolver.solve(RealVector) (see MATH-653)  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java\n         Array2DRowRealMatrix mInv = new Array2DRowRealMatrix(testDataInv);\n         Array2DRowRealMatrix mPlusInv = new Array2DRowRealMatrix(testDataPlusInv);\n         Array2DRowRealMatrix identity = new Array2DRowRealMatrix(id);\n-        \n+\n         TestUtils.assertEquals(\"m^0\", m.power(0),\n-            identity, entryTolerance);        \n+            identity, entryTolerance);\n         TestUtils.assertEquals(\"mInv^0\", mInv.power(0),\n-                identity, entryTolerance);        \n+                identity, entryTolerance);\n         TestUtils.assertEquals(\"mPlusInv^0\", mPlusInv.power(0),\n                 identity, entryTolerance);\n-        \n+\n         TestUtils.assertEquals(\"m^1\", m.power(1),\n-                m, entryTolerance);        \n+                m, entryTolerance);\n         TestUtils.assertEquals(\"mInv^1\", mInv.power(1),\n-                mInv, entryTolerance);        \n+                mInv, entryTolerance);\n         TestUtils.assertEquals(\"mPlusInv^1\", mPlusInv.power(1),\n-                mPlusInv, entryTolerance); \n-        \n+                mPlusInv, entryTolerance);\n+\n         RealMatrix C1 = m.copy();\n         RealMatrix C2 = mInv.copy();\n         RealMatrix C3 = mPlusInv.copy();\n-        \n+\n         for (int i = 2; i <= 10; ++i) {\n             C1 = C1.multiply(m);\n             C2 = C2.multiply(mInv);\n             C3 = C3.multiply(mPlusInv);\n-            \n+\n             TestUtils.assertEquals(\"m^\" + i, m.power(i),\n-                    C1, entryTolerance);        \n+                    C1, entryTolerance);\n             TestUtils.assertEquals(\"mInv^\" + i, mInv.power(i),\n-                    C2, entryTolerance);        \n+                    C2, entryTolerance);\n             TestUtils.assertEquals(\"mPlusInv^\" + i, mPlusInv.power(i),\n-                    C3, entryTolerance);            \n-        }\n-        \n+                    C3, entryTolerance);\n+        }\n+\n         try {\n             Array2DRowRealMatrix mNotSquare = new Array2DRowRealMatrix(testData2T);\n             mNotSquare.power(2);\n         } catch (NonSquareMatrixException ex) {\n             // ignored\n         }\n-        \n+\n         try {\n             m.power(-1);\n             Assert.fail(\"Expecting IllegalArgumentException\");\n             // ignored\n         }\n     }\n-    \n+\n     /** test trace */\n     @Test\n     public void testTrace() {\n         // Solve example\n         double[][] coefficientsData = {{2, 3, -2}, {-1, 7, 6}, {4, -3, -5}};\n         RealMatrix coefficients = new Array2DRowRealMatrix(coefficientsData);\n-        double[] constants = {1, -2, 1};\n-        double[] solution = new LUDecompositionImpl(coefficients).getSolver().solve(constants);\n-        Assert.assertEquals(2 * solution[0] + 3 * solution[1] -2 * solution[2], constants[0], 1E-12);\n-        Assert.assertEquals(-1 * solution[0] + 7 * solution[1] + 6 * solution[2], constants[1], 1E-12);\n-        Assert.assertEquals(4 * solution[0] - 3 * solution[1] -5 * solution[2], constants[2], 1E-12);\n-\n+        RealVector constants = new ArrayRealVector(new double[]{1, -2, 1}, false);\n+        RealVector solution = new LUDecompositionImpl(coefficients).getSolver().solve(constants);\n+        final double cst0 = constants.getEntry(0);\n+        final double cst1 = constants.getEntry(1);\n+        final double cst2 = constants.getEntry(2);\n+        final double sol0 = solution.getEntry(0);\n+        final double sol1 = solution.getEntry(1);\n+        final double sol2 = solution.getEntry(2);\n+        Assert.assertEquals(2 * sol0 + 3 * sol1 -2 * sol2, cst0, 1E-12);\n+        Assert.assertEquals(-1 * sol0 + 7 * sol1 + 6 * sol2, cst1, 1E-12);\n+        Assert.assertEquals(4 * sol0 - 3 * sol1 -5 * sol2, cst2, 1E-12);\n     }\n \n     // test submatrix accessors\n--- a/src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java\n         // Solve example\n         double[][] coefficientsData = {{2, 3, -2}, {-1, 7, 6}, {4, -3, -5}};\n         RealMatrix coefficients = new BlockRealMatrix(coefficientsData);\n-        double[] constants = {1, -2, 1};\n-        double[] solution = new LUDecompositionImpl(coefficients).getSolver().solve(constants);\n-        Assert.assertEquals(2 * solution[0] + 3 * solution[1] -2 * solution[2], constants[0], 1E-12);\n-        Assert.assertEquals(-1 * solution[0] + 7 * solution[1] + 6 * solution[2], constants[1], 1E-12);\n-        Assert.assertEquals(4 * solution[0] - 3 * solution[1] -5 * solution[2], constants[2], 1E-12);\n-\n+        RealVector constants = new ArrayRealVector(new double[]{1, -2, 1}, false);\n+        RealVector solution = new LUDecompositionImpl(coefficients).getSolver().solve(constants);\n+        final double cst0 = constants.getEntry(0);\n+        final double cst1 = constants.getEntry(1);\n+        final double cst2 = constants.getEntry(2);\n+        final double sol0 = solution.getEntry(0);\n+        final double sol1 = solution.getEntry(1);\n+        final double sol2 = solution.getEntry(2);\n+        Assert.assertEquals(2 * sol0 + 3 * sol1 -2 * sol2, cst0, 1E-12);\n+        Assert.assertEquals(-1 * sol0 + 7 * sol1 + 6 * sol2, cst1, 1E-12);\n+        Assert.assertEquals(4 * sol0 - 3 * sol1 -5 * sol2, cst2, 1E-12);\n     }\n \n     // test submatrix accessors\n--- a/src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java\n         double[][] coefficientsData = { { 2, 3, -2 }, { -1, 7, 6 },\n                 { 4, -3, -5 } };\n         RealMatrix coefficients = createSparseMatrix(coefficientsData);\n-        double[] constants = { 1, -2, 1 };\n-        double[] solution = new LUDecompositionImpl(coefficients).getSolver().solve(constants);\n-        Assert.assertEquals(2 * solution[0] + 3 * solution[1] - 2 * solution[2],\n-                constants[0], 1E-12);\n-        Assert.assertEquals(-1 * solution[0] + 7 * solution[1] + 6 * solution[2],\n-                constants[1], 1E-12);\n-        Assert.assertEquals(4 * solution[0] - 3 * solution[1] - 5 * solution[2],\n-                constants[2], 1E-12);\n+        RealVector constants = new ArrayRealVector(new double[]{ 1, -2, 1 }, false);\n+        RealVector solution = new LUDecompositionImpl(coefficients).getSolver().solve(constants);\n+        final double cst0 = constants.getEntry(0);\n+        final double cst1 = constants.getEntry(1);\n+        final double cst2 = constants.getEntry(2);\n+        final double sol0 = solution.getEntry(0);\n+        final double sol1 = solution.getEntry(1);\n+        final double sol2 = solution.getEntry(2);\n+        Assert.assertEquals(2 * sol0 + 3 * sol1 - 2 * sol2, cst0, 1E-12);\n+        Assert.assertEquals(-1 * sol0 + 7 * sol1 + 6 * sol2, cst1, 1E-12);\n+        Assert.assertEquals(4 * sol0 - 3 * sol1 - 5 * sol2, cst2, 1E-12);\n \n     }\n ", "timestamp": 1314981618, "metainfo": ""}