{"sha": "351f0eabe385899e1c15651d24fe914c603a6160", "log": "change http://nagoya.apache.org/bugzilla to http://issues.apache.org/bugzilla  ", "commit": "\n--- a/src/test/org/apache/commons/math/distribution/TDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/TDistributionTest.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * Test cases for TDistribution.\n  * Extends ContinuousDistributionAbstractTest.  See class javadoc for\n  * ContinuousDistributionAbstractTest for details.\n- * \n- * @version $Revision: 1.15 $ $Date: 2004/07/24 21:41:37 $\n+ *\n+ * @version $Revision: 1.15 $ $Date$\n  */\n public class TDistributionTest extends ContinuousDistributionAbstractTest {\n \n     }\n \n //-------------- Implementations for abstract methods -----------------------\n-    \n+\n     /** Creates the default continuous distribution instance to use in tests. */\n     public ContinuousDistribution makeDistribution() {\n         return DistributionFactory.newInstance().createTDistribution(5.0);\n-    }   \n-    \n+    }\n+\n     /** Creates the default cumulative probability distribution test input values */\n     public double[] makeCumulativeTestPoints() {\n         // quantiles computed using R version 1.8.1 (linux version)\n             -1.475884, 5.89343, 3.36493, 2.570582,\n             2.015048, 1.475884};\n     }\n-    \n+\n     /** Creates the default cumulative probability density test expected values */\n     public double[] makeCumulativeTestValues() {\n         return new double[] {0.001d, 0.01d, 0.025d, 0.05d, 0.1d, 0.999d,\n-                0.990d, 0.975d, 0.950d, 0.900d}; \n+                0.990d, 0.975d, 0.950d, 0.900d};\n     }\n-    \n+\n     // --------------------- Override tolerance  --------------\n     protected void setup() throws Exception {\n         super.setUp();\n \n     //---------------------------- Additional test cases -------------------------\n     /**\n-     * @see <a href=\"http://nagoya.apache.org/bugzilla/show_bug.cgi?id=27243\">\n+     * @see <a href=\"http://issues.apache.org/bugzilla/show_bug.cgi?id=27243\">\n      *      Bug report that prompted this unit test.</a>\n      */\n     public void testCumulativeProbabilityAgaintStackOverflow() throws Exception {\n     \test = td.cumulativeProbability(.1);\n     \test = td.cumulativeProbability(.01);\n     }\n-    \n+\n     public void testSmallDf() throws Exception {\n         setDistribution(DistributionFactory.newInstance().createTDistribution(1d));\n         setTolerance(1E-4);\n         verifyCumulativeProbabilities();\n         verifyInverseCumulativeProbabilities();\n     }\n-    \n+\n     public void testInverseCumulativeProbabilityExtremes() throws Exception {\n         setInverseCumulativeTestPoints(new double[] {0, 1});\n         setInverseCumulativeTestValues(\n                 new double[] {Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY});\n         verifyInverseCumulativeProbabilities();\n     }\n-    \n+\n     public void testDfAccessors() {\n         TDistribution distribution = (TDistribution) getDistribution();\n         assertEquals(5d, distribution.getDegreesOfFreedom(), Double.MIN_VALUE);\n         } catch (IllegalArgumentException ex) {\n             // expected\n         }\n-    } \n-    \n+    }\n+\n }", "timestamp": 1107205382, "metainfo": ""}