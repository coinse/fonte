{"sha": "46ffc570c1ed01b3ccce8e7710ff9c80cb1e7c07", "log": "MATH-795:   - some methods are not implemented by RealVector, so they should not be tested: added @Ignore annotations in RealVectorTest.   - in RealVectorAbstractTest, extracted     + testAppendVector()     + testAppendScalar() from testDataInOut().   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n     protected double entryTolerance = 10E-16;\n     protected double normTolerance = 10E-14;\n \n+    private void doTestAppendVector(final String message, final RealVector v1,\n+        final RealVector v2, final double delta) {\n+\n+        final int n1 = v1.getDimension();\n+        final int n2 = v2.getDimension();\n+        final RealVector v = v1.append(v2);\n+        Assert.assertEquals(message, n1 + n2, v.getDimension());\n+        for (int i = 0; i < n1; i++) {\n+            final String msg = message + \", entry #\" + i;\n+            Assert.assertEquals(msg, v1.getEntry(i), v.getEntry(i), delta);\n+        }\n+        for (int i = 0; i < n2; i++) {\n+            final String msg = message + \", entry #\" + (n1 + i);\n+            Assert.assertEquals(msg, v2.getEntry(i), v.getEntry(n1 + i), delta);\n+        }\n+    }\n+\n+    @Test\n+    public void testAppendVector() {\n+        final double x = getPreferredEntryValue();\n+        final double[] data1 = new double[] {x, 1d, 2d, x, x};\n+        final double[] data2 = new double[] {x, x, 3d, x, 4d, x};\n+\n+        doTestAppendVector(\"same type\", create(data1), create(data2), 0d);\n+        doTestAppendVector(\"mixed types\", create(data1), createAlien(data2), 0d);\n+    }\n+\n+    private void doTestAppendScalar(final String message, final RealVector v,\n+        final double d, final double delta) {\n+\n+        final int n = v.getDimension();\n+        final RealVector w = v.append(d);\n+        Assert.assertEquals(message, n + 1, w.getDimension());\n+        for (int i = 0; i < n; i++) {\n+            final String msg = message + \", entry #\" + i;\n+            Assert.assertEquals(msg, v.getEntry(i), w.getEntry(i), delta);\n+        }\n+        final String msg = message + \", entry #\" + n;\n+        Assert.assertEquals(msg, d, w.getEntry(n), delta);\n+    }\n+\n+    @Test\n+    public void testAppendScalar() {\n+        final double x = getPreferredEntryValue();\n+        final double[] data = new double[] {x, 1d, 2d, x, x};\n+\n+        doTestAppendScalar(\"same type\", create(data), 1d, 0d);\n+        doTestAppendScalar(\"mixed types\", create(data), x, 0d);\n+    }\n+\n     @Test\n     public void testDataInOut() {\n         final RealVector v1 = create(vec1);\n         final RealVector v2 = create(vec2);\n         final RealVector v4 = create(vec4);\n         final RealVector v2_t = createAlien(vec2);\n-\n-        final RealVector v_append_1 = v1.append(v2);\n-        Assert.assertEquals(\"testData len\", 6, v_append_1.getDimension());\n-        Assert.assertEquals(\"testData is 4.0 \", 4.0, v_append_1.getEntry(3), 0);\n-\n-        final RealVector v_append_2 = v1.append(2.0);\n-        Assert.assertEquals(\"testData len\", 4, v_append_2.getDimension());\n-        Assert.assertEquals(\"testData is 2.0 \", 2.0, v_append_2.getEntry(3), 0);\n-\n-        final RealVector v_append_4 = v1.append(v2_t);\n-        Assert.assertEquals(\"testData len\", 6, v_append_4.getDimension());\n-        Assert.assertEquals(\"testData is 4.0 \", 4.0, v_append_4.getEntry(3), 0);\n-\n-        final RealVector v_append_5 = v1.append(v2);\n-        Assert.assertEquals(\"testData len\", 6, v_append_5.getDimension());\n-        Assert.assertEquals(\"testData is 4.0 \", 4.0, v_append_5.getEntry(3), 0);\n \n         final RealVector vout5 = v4.getSubVector(3, 3);\n         Assert.assertEquals(\"testData len\", 3, vout5.getDimension());\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n \n package org.apache.commons.math3.linear;\n \n+import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.Assert;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n         return new TestVectorImpl(data);\n     }\n \n+    @Test\n+    @Ignore(\"Abstract class RealVector does not implement append(RealVector).\")\n+    @Override\n+    public void testAppendVector() {\n+        // Do nothing\n+    }\n+\n+    @Test\n+    @Ignore(\"Abstract class RealVector does not implement append(double)\")\n+    @Override\n+    public void testAppendScalar() {\n+        // Do nothing\n+    }\n+\n+    @Test\n+    @Ignore\n     @Override\n     public void testBasicFunctions() {\n         /*\n         }\n     }\n \n+    @Override\n     @Test\n     public void testAddToEntry() {\n         final double[] v = new double[] { 1, 2, 3 };\n         }\n     }\n \n+    @Test\n+    @Ignore\n     @Override\n     public void testDataInOut() {\n         /*\n          */\n     }\n \n+    @Test\n+    @Ignore\n     @Override\n     public void testPredicates() {\n         /*\n          */\n     }\n \n+    @Test\n+    @Ignore(\"Abstract class RealVector is not serializable.\")\n     @Override\n     public void testSerial() {\n-        /*\n-         * Abstract class RealVector is not serializable, so this test is skipped\n-         * (@Test annotation ommitted).\n-         */\n+        // Do nothing\n     }\n }", "timestamp": 1338960078, "metainfo": ""}