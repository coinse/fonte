{"sha": "4107cb54fd39d551e0074424b746137aff040faa", "log": "Added support for Spearman's rank correlation. JIRA: MATH-136 Thanks to John Gant   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.stat.correlation;\n+\n+import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.linear.DenseRealMatrix;\n+import org.apache.commons.math.linear.RealMatrix;\n+import org.apache.commons.math.stat.ranking.NaturalRanking;\n+import org.apache.commons.math.stat.ranking.RankingAlgorithm;\n+\n+/**\n+ * <p>Spearman's rank correlation. This implementation performs a rank\n+ * transformation on the input data and then computes {@link PearsonsCorrelation}\n+ * on the ranked data.</p>\n+ * \n+ * <p>By default, ranks are computed using {@link NaturalRanking} with default\n+ * strategies for handling NaNs and ties in the data (NaNs maximal, ties averaged).\n+ * The ranking algorithm can be set using a constructor argument.</p>\n+ * \n+ * @since 2.0\n+ * @version $Revision:$ $Date:$\n+ */\n+\n+public class SpearmansCorrelation {   \n+   \n+    /** Input data */\n+    private final RealMatrix data;\n+    \n+    /** Ranking algorithm  */\n+    private final RankingAlgorithm rankingAlgorithm;\n+    \n+    /** Rank correlation */\n+    private final PearsonsCorrelation rankCorrelation;\n+    \n+    /**\n+     * Create a SpearmansCorrelation with the given input data matrix\n+     * and ranking algorithm.\n+     * \n+     * @param dataMatrix matrix of data with columns representing\n+     * variables to correlate\n+     * @param rankingAlgorithm ranking algorithm\n+     */    \n+    public SpearmansCorrelation(final RealMatrix dataMatrix, final RankingAlgorithm rankingAlgorithm) {\n+        this.data = dataMatrix.copy(); \n+        this.rankingAlgorithm = rankingAlgorithm;\n+        rankTransform(data);\n+        rankCorrelation = new PearsonsCorrelation(data);\n+    }\n+    \n+    /**\n+     * Create a SpearmansCorrelation from the given data matrix.\n+     * \n+     * @param dataMatrix matrix of data with columns representing\n+     * variables to correlate\n+     */\n+    public SpearmansCorrelation(final RealMatrix dataMatrix) {\n+        this(dataMatrix, new NaturalRanking());\n+    }\n+    \n+    /**\n+     * Create a SpearmansCorrelation without data.\n+     */\n+    public SpearmansCorrelation() {\n+        data = null; \n+        this.rankingAlgorithm = new NaturalRanking();\n+        rankCorrelation = null;\n+    }\n+    \n+    /**\n+     * Calculate the Spearman Rank Correlation Matrix. \n+     * \n+     * @return Spearman Rank Correlation Matrix\n+     */\n+    public RealMatrix getCorrelationMatrix() {\n+        return rankCorrelation.getCorrelationMatrix();\n+    }\n+    \n+    /**\n+     * Returns a {@link PearsonsCorrelation} instance constructed from the\n+     * ranked input data. That is,\n+     * <code>new SpearmansCorrelation(matrix).getRankCorrelation()</code>\n+     * is equivalent to \n+     * <code>new PearsonsCorrelation(rankTransform(matrix))</code> where\n+     * <code>rankTransform(matrix)</code> is the result of applying the\n+     * configured <code>RankingAlgorithm</code> to each of the columns of\n+     * <code>matrix.</code>\n+     * \n+     * @return PearsonsCorrelation among ranked column data\n+     */\n+    public PearsonsCorrelation getRankCorrelation() {\n+        return rankCorrelation;\n+    }\n+    \n+    /**\n+     * Computes the Spearman's rank correlation matrix for the columns of the\n+     * input matrix.\n+     * \n+     * @param matrix matrix with columns representing variables to correlate\n+     * @return correlation matrix\n+     */\n+    public RealMatrix computeCorrelationMatrix(RealMatrix matrix) {\n+        RealMatrix matrixCopy = matrix.copy();\n+        rankTransform(matrixCopy);\n+        return new PearsonsCorrelation().computeCorrelationMatrix(matrixCopy);\n+    }\n+    \n+    /**\n+     * Computes the Spearman's rank correlation matrix for the columns of the\n+     * input rectangular array.  The columns of the array represent values\n+     * of variables to be correlated.\n+     * \n+     * @param data matrix with columns representing variables to correlate\n+     * @return correlation matrix\n+     */\n+    public RealMatrix computeCorrelationMatrix(double[][] data) {\n+       return computeCorrelationMatrix(new DenseRealMatrix(data));\n+    }\n+    \n+    /**\n+     * Computes the Spearman's rank correlation coefficient between the two arrays.\n+     * \n+     * </p>Throws IllegalArgumentException if the arrays do not have the same length\n+     * or their common length is less than 2</p>\n+     *\n+     * @param xArray first data array\n+     * @param yArray second data array\n+     * @return Returns Spearman's rank correlation coefficient for the two arrays \n+     * @throws  IllegalArgumentException if the arrays lengths do not match or\n+     * there is insufficient data\n+     */\n+    public double correlation(final double[] xArray, final double[] yArray)\n+    throws IllegalArgumentException {\n+        if (xArray.length == yArray.length && xArray.length > 1) {\n+            return new PearsonsCorrelation().correlation(rankingAlgorithm.rank(xArray),\n+                    rankingAlgorithm.rank(yArray));\n+        }\n+        else {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                    \"invalid array dimensions. xArray has size {0}; yArray has {1} elements\",\n+                    xArray.length, yArray.length);\n+        }\n+    }\n+    \n+    /**\n+     * Applies rank transform to each of the columns of <code>matrix</code>\n+     * using the current <code>rankingAlgorithm</code>\n+     * \n+     * @param matrix matrix to transform\n+     */\n+    private void rankTransform(RealMatrix matrix) {\n+        for (int i = 0; i < matrix.getColumnDimension(); i++) {\n+            matrix.setColumn(i, rankingAlgorithm.rank(matrix.getColumn(i)));\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.correlation;\n+\n+import org.apache.commons.math.TestUtils;\n+import org.apache.commons.math.linear.DenseRealMatrix;\n+import org.apache.commons.math.linear.RealMatrix;\n+\n+/**\n+ * Test cases for Spearman's rank correlation\n+ * \n+ * @since 2.0\n+ * @version $Revision:$ $Date:$\n+ */\n+public class SpearmansRankCorrelationTest extends PearsonsCorrelationTest {\n+\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+    \n+    /**\n+     * Test Longley dataset against R.\n+     */\n+    public void testLongly() throws Exception {  \n+        RealMatrix matrix = createRealMatrix(longleyData, 16, 7);\n+        SpearmansCorrelation corrInstance = new SpearmansCorrelation(matrix); \n+        RealMatrix correlationMatrix = corrInstance.getCorrelationMatrix();\n+        double[] rData = new double[] {\n+                1, 0.982352941176471, 0.985294117647059, 0.564705882352941, 0.2264705882352941, 0.976470588235294,\n+                0.976470588235294, 0.982352941176471, 1, 0.997058823529412, 0.664705882352941, 0.2205882352941176,\n+                0.997058823529412, 0.997058823529412, 0.985294117647059, 0.997058823529412, 1, 0.638235294117647,\n+                0.2235294117647059, 0.9941176470588236, 0.9941176470588236, 0.564705882352941, 0.664705882352941,\n+                0.638235294117647, 1, -0.3411764705882353, 0.685294117647059, 0.685294117647059, 0.2264705882352941,\n+                0.2205882352941176, 0.2235294117647059, -0.3411764705882353, 1, 0.2264705882352941, 0.2264705882352941,\n+                0.976470588235294, 0.997058823529412, 0.9941176470588236, 0.685294117647059, 0.2264705882352941, 1, 1,\n+                0.976470588235294, 0.997058823529412, 0.9941176470588236, 0.685294117647059, 0.2264705882352941, 1, 1\n+        }; \n+        TestUtils.assertEquals(\"Spearman's correlation matrix\", createRealMatrix(rData, 7, 7), correlationMatrix, 10E-15);\n+    }\n+    \n+    /**\n+     * Test R swiss fertility dataset.\n+     */\n+    public void testSwiss() throws Exception {  \n+        RealMatrix matrix = createRealMatrix(swissData, 47, 5);\n+        SpearmansCorrelation corrInstance = new SpearmansCorrelation(matrix); \n+        RealMatrix correlationMatrix = corrInstance.getCorrelationMatrix();\n+        double[] rData = new double[] {\n+                1, 0.2426642769364176, -0.660902996352354, -0.443257690360988, 0.4136455623012432,\n+                0.2426642769364176, 1, -0.598859938748963, -0.650463814145816, 0.2886878090882852,\n+               -0.660902996352354, -0.598859938748963, 1, 0.674603831406147, -0.4750575257171745,\n+               -0.443257690360988, -0.650463814145816, 0.674603831406147, 1, -0.1444163088302244,\n+                0.4136455623012432, 0.2886878090882852, -0.4750575257171745, -0.1444163088302244, 1\n+        }; \n+        TestUtils.assertEquals(\"Spearman's correlation matrix\", createRealMatrix(rData, 5, 5), correlationMatrix, 10E-15);\n+    }\n+    \n+    /**\n+     * Constant column\n+     */\n+    public void testConstant() {\n+        double[] noVariance = new double[] {1, 1, 1, 1};\n+        double[] values = new double[] {1, 2, 3, 4};\n+        assertTrue(Double.isNaN(new SpearmansCorrelation().correlation(noVariance, values)));\n+    }\n+    \n+    /**\n+     * Insufficient data\n+     */ \n+    public void testInsufficientData() {\n+        double[] one = new double[] {1};\n+        double[] two = new double[] {2};\n+        try {\n+            new SpearmansCorrelation().correlation(one, two);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // Expected\n+        }\n+        RealMatrix matrix = new DenseRealMatrix(new double[][] {{0},{1}});\n+        try {\n+            new SpearmansCorrelation(matrix);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // Expected\n+        }\n+    }\n+    \n+    public void testConsistency() {\n+        RealMatrix matrix = createRealMatrix(longleyData, 16, 7);\n+        SpearmansCorrelation corrInstance = new SpearmansCorrelation(matrix); \n+        double[][] data = matrix.getData();\n+        double[] x = matrix.getColumn(0);\n+        double[] y = matrix.getColumn(1);\n+        assertEquals(new SpearmansCorrelation().correlation(x, y), \n+                corrInstance.getCorrelationMatrix().getEntry(0, 1), Double.MIN_VALUE);\n+        TestUtils.assertEquals(\"Correlation matrix\", corrInstance.getCorrelationMatrix(),\n+                new SpearmansCorrelation().computeCorrelationMatrix(data), Double.MIN_VALUE);\n+    }\n+    \n+    // Not relevant here\n+    public void testStdErrorConsistency() throws Exception {}\n+    public void testCovarianceConsistency() throws Exception {}\n+     \n+}", "timestamp": 1243141461, "metainfo": ""}