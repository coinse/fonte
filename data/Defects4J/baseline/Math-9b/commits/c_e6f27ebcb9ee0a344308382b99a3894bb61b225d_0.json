{"sha": "e6f27ebcb9ee0a344308382b99a3894bb61b225d", "log": "MATH-657 Reverting to previous behaviour, as requested by P. Steitz.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n         }\n \n         if (divisor.isZero) {\n-            return isZero ? NaN : INF;\n+            // return isZero ? NaN : INF; // See MATH-657\n+            return NaN;\n         }\n \n         if (divisor.isInfinite() && !isInfinite()) {\n             return NaN;\n         }\n         if (divisor == 0d) {\n-            return isZero ? NaN : INF;\n+            // return isZero ? NaN : INF; // See MATH-657\n+            return NaN;\n         }\n         if (Double.isInfinite(divisor)) {\n             return !isInfinite() ? ZERO : NaN;\n--- a/src/test/java/org/apache/commons/math/complex/ComplexTest.java\n+++ b/src/test/java/org/apache/commons/math/complex/ComplexTest.java\n     public void testDivideZero() {\n         Complex x = new Complex(3.0, 4.0);\n         Complex z = x.divide(Complex.ZERO);\n-        Assert.assertEquals(z, Complex.INF);\n+        // Assert.assertEquals(z, Complex.INF); // See MATH-657\n+        Assert.assertEquals(z, Complex.NaN);\n     }\n \n     @Test\n \n     @Test\n     public void testAtanI() {\n-        for (int i = -10; i < 10; i++) {\n-            System.out.println(new Complex(0, 1 - 0.1 * i).atan());\n-        }\n-        Assert.assertTrue(Complex.I.atan().isInfinite());\n+        Assert.assertTrue(Complex.I.atan().isNaN());\n     }\n \n     @Test", "timestamp": 1315077762, "metainfo": ""}