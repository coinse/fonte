{"sha": "6399a6d8dffc1b85ac2b4477781e55bc6a468bc6", "log": "remove logging   Reviewed by:\tMark Diggory   ", "commit": "\n--- a/src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n  */\n package org.apache.commons.math.distribution;\n \n-import org.apache.commons.logging.LogFactory;\n import org.apache.commons.math.MathException;\n import org.apache.commons.math.special.Beta;\n import org.apache.commons.math.util.MathUtils;\n /**\n  * The default implementation of {@link BinomialDistribution}.\n  * \n- * @version $Revision: 1.6 $ $Date: 2003/11/15 16:01:35 $\n+ * @version $Revision: 1.7 $ $Date: 2003/11/15 18:59:10 $\n  */\n public class BinomialDistributionImpl extends AbstractDiscreteDistribution\n     implements BinomialDistribution {\n                 ret = 1.0 - Beta.regularizedBeta(getProbabilityOfSuccess(),\n                     x + 1.0, getNumberOfTrials() - x);\n             } catch (MathException ex) {\n-                LogFactory.getLog(getClass()).error(\n-                    \"Failed to compute cummulative probability, returning NaN.\",\n-                    ex);\n                 ret = Double.NaN;\n             }\n         }\n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n  */\n package org.apache.commons.math.distribution;\n \n-import org.apache.commons.logging.LogFactory;\n import org.apache.commons.math.MathException;\n import org.apache.commons.math.special.Beta;\n \n /**\n  * Default implementation of\n- * {@link org.apache.commons.math.stat.distribution.FDistribution}.\n+ * {@link org.apache.commons.math.distribution.FDistribution}.\n  * \n- * @version $Revision: 1.9 $ $Date: 2003/11/15 16:01:36 $\n+ * @version $Revision: 1.10 $ $Date: 2003/11/15 18:59:10 $\n  */\n public class FDistributionImpl\n     extends AbstractContinuousDistribution\n                     0.5 * n,\n                     0.5 * m);\n             } catch (MathException ex) {\n-                LogFactory.getLog(getClass()).error(\n-                    \"Failed to compute cummulative probability, returning NaN.\",\n-                    ex);\n                 ret = Double.NaN;\n             }\n         }\n--- a/src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n  */\n package org.apache.commons.math.distribution;\n \n-import org.apache.commons.logging.LogFactory;\n import org.apache.commons.math.MathException;\n import org.apache.commons.math.special.Gamma;\n \n /**\n  * The default implementation of {@link GammaDistribution}\n  * \n- * @version $Revision: 1.12 $ $Date: 2003/11/15 16:01:36 $\n+ * @version $Revision: 1.13 $ $Date: 2003/11/15 18:59:10 $\n  */\n public class GammaDistributionImpl extends AbstractContinuousDistribution\n     implements GammaDistribution {\n             try {\n                 ret = Gamma.regularizedGammaP(getAlpha(), x / getBeta());\n             } catch(MathException ex){\n-                LogFactory.getLog(getClass()).error(\n-                    \"Failed to compute cummulative probability, returning NaN.\",\n-                    ex);\n                 ret = Double.NaN;\n             }\n         }\n--- a/src/java/org/apache/commons/math/distribution/TDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/TDistributionImpl.java\n  */\n package org.apache.commons.math.distribution;\n \n-import org.apache.commons.logging.LogFactory;\n import org.apache.commons.math.MathException;\n import org.apache.commons.math.special.Beta;\n \n /**\n  * Default implementation of\n- * {@link org.apache.commons.math.stat.distribution.TDistribution}.\n+ * {@link org.apache.commons.math.distribution.TDistribution}.\n  * \n- * @version $Revision: 1.9 $ $Date: 2003/11/15 16:01:36 $\n+ * @version $Revision: 1.10 $ $Date: 2003/11/15 18:59:10 $\n  */\n public class TDistributionImpl\n     extends AbstractContinuousDistribution\n                     ret = 1.0 - 0.5 * t;\n                 }\n             } catch (MathException ex) {\n-                LogFactory.getLog(getClass()).error(\n-                    \"Failed to compute cummulative probability, returning NaN.\",\n-                    ex);\n                 ret = Double.NaN;\n             }\n         }", "timestamp": 1068922750, "metainfo": ""}