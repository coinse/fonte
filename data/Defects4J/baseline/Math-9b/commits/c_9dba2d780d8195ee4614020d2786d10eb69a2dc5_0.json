{"sha": "9dba2d780d8195ee4614020d2786d10eb69a2dc5", "log": "Added factory for TTest, ChiSquareTest and TestUtils class with static methods to create instances and execute tests. PR #32663    ", "commit": "\n--- a/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n+++ b/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n             DiscoverClass dc = new DiscoverClass();\n             factory = (DistributionFactory) dc.newInstance(\n                 DistributionFactory.class,\n-                \"org.apache.commons.math.distribution.DistributionFactoryImpl\");\n+                \"org.apache.commons.math.distribution.TestFactoryImpl\");\n         } catch(Throwable t) {\n             return new DistributionFactoryImpl();\n         }\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/inference/TestFactory.java\n+/*\n+ * Copyright 2005 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.inference;\n+import org.apache.commons.discovery.tools.DiscoverClass;\n+\n+/**\n+ * Abstract factory to create inference test instances.\n+ *\n+ * @version $Revision$ $Date$ \n+ */\n+public abstract class TestFactory {\n+    /**\n+     * Default constructor.\n+     */\n+    protected TestFactory() {\n+        super();\n+    }\n+    \n+    /**\n+     * Create an instance of a <code>TestFactory</code>\n+     * \n+     * @return a new factory. \n+     */\n+    public static TestFactory newInstance() {\n+        TestFactory factory = null;\n+        try {\n+            DiscoverClass dc = new DiscoverClass();\n+            factory = (TestFactory) dc.newInstance(\n+                    TestFactory.class,\n+            \"org.apache.commons.math.stat.inference.TestFactoryImpl\");\n+        } catch(Throwable t) {\n+            return new TestFactoryImpl();\n+        }\n+        return factory;\n+    }\n+    \n+    /**\n+     * Create a TTest instance.\n+     * \n+     * @return a new TTest instance\n+     */\n+    public abstract TTest createTTest();\n+    \n+    /**\n+     * Create a ChiSquareTest instance.\n+     * \n+     * @return a new ChiSquareTest instance\n+     */\n+    public abstract ChiSquareTest createChiSquareTest();  \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java\n+/*\n+ * Copyright 2005 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.inference;\n+\n+/**\n+ * A concrete inference test factory.  This is the default factory used by\n+ * Commons-Math.\n+ *  \n+ * @version $Revision$ $Date$\n+ */\n+public class TestFactoryImpl extends TestFactory {\n+\n+    /**\n+     * Default constructor. \n+     */\n+    public TestFactoryImpl() {\n+        super();\n+    }\n+    \n+     /**\n+     * Create a TTest instance.\n+     * \n+     * @return a new TTest instance\n+     */\n+    public TTest createTTest() {       \n+        return new TTestImpl();\n+    }\n+    \n+    /**\n+     * Create a ChiSquareTest instance.\n+     * \n+     * @return a new ChiSquareTest instance\n+     */\n+    public ChiSquareTest createChiSquareTest() {\n+        return new ChiSquareTestImpl();\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/inference/TestUtils.java\n+/*\n+ * Copyright 2005 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.inference;\n+\n+import org.apache.commons.math.MathException;\n+import org.apache.commons.math.stat.descriptive.StatisticalSummary;\n+\n+/**\n+ * A collection of static methods to create inference test instances or to\n+ * perform inference tests.\n+ *\n+ * @version $Revision$ $Date$ \n+ */\n+public class TestUtils  {\n+    /**\n+     * Prevent instantiation.\n+     */\n+    protected TestUtils() {\n+        super();\n+    }\n+    \n+    /** Singleton TTest instance initialized using configured factory */\n+    private static TTest tTest = TestFactory.newInstance().createTTest();\n+   \n+    /** Singleton ChiSquareTest instance initialized using configured factory */\n+    private static ChiSquareTest chiSquareTest = \n+        TestFactory.newInstance().createChiSquareTest();\n+    \n+    /**\n+     * Return a (singleton) TTest instance.  Does not create a new instance.\n+     * \n+     * @return a TTest instance\n+     */\n+    public static TTest getTTest() {\n+        return tTest;\n+    }\n+    \n+    /**\n+     * Return a (singleton) ChiSquareTest instance.  Does not create a new instance.\n+     * \n+     * @return a ChiSquareTest instance\n+     */\n+    public static ChiSquareTest getChiSquareTest() {\n+        return chiSquareTest;\n+    }\n+    \n+    /**\n+     * @see org.apache.commons.math.stat.inference.TTest#homoscedasticT(double[], double[])\n+     */\n+    public static double homoscedasticT(double[] sample1, double[] sample2)\n+        throws IllegalArgumentException {\n+        return tTest.homoscedasticT(sample1, sample2);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.inference.TTest#homoscedasticT(org.apache.commons.math.stat.descriptive.StatisticalSummary, org.apache.commons.math.stat.descriptive.StatisticalSummary)\n+     */\n+    public static double homoscedasticT(StatisticalSummary sampleStats1,\n+        StatisticalSummary sampleStats2)\n+        throws IllegalArgumentException {\n+        return tTest.homoscedasticT(sampleStats1, sampleStats2);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.inference.TTest#homoscedasticTTest(double[], double[], double)\n+     */\n+    public static boolean homoscedasticTTest(double[] sample1, double[] sample2,\n+            double alpha)\n+        throws IllegalArgumentException, MathException {\n+        return tTest. homoscedasticTTest(sample1, sample2, alpha);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.inference.TTest#homoscedasticTTest(double[], double[])\n+     */\n+    public static double homoscedasticTTest(double[] sample1, double[] sample2)\n+        throws IllegalArgumentException, MathException {\n+        return tTest.homoscedasticTTest(sample1, sample2);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.inference.TTest#homoscedasticTTest(org.apache.commons.math.stat.descriptive.StatisticalSummary, org.apache.commons.math.stat.descriptive.StatisticalSummary)\n+     */\n+    public static double homoscedasticTTest(StatisticalSummary sampleStats1,\n+        StatisticalSummary sampleStats2)\n+        throws IllegalArgumentException, MathException {\n+        return tTest.homoscedasticTTest(sampleStats1, sampleStats2);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.inference.TTest#pairedT(double[], double[])\n+     */\n+    public static double pairedT(double[] sample1, double[] sample2)\n+        throws IllegalArgumentException, MathException {\n+        return tTest.pairedT(sample1, sample2);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.inference.TTest#pairedTTest(double[], double[], double)\n+     */\n+    public static boolean pairedTTest(double[] sample1, double[] sample2,\n+        double alpha)\n+        throws IllegalArgumentException, MathException {\n+        return tTest.pairedTTest(sample1, sample2, alpha);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.inference.TTest#pairedTTest(double[], double[])\n+     */\n+    public static double pairedTTest(double[] sample1, double[] sample2)\n+        throws IllegalArgumentException, MathException {\n+        return tTest.pairedTTest(sample1, sample2);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.inference.TTest#t(double, double[])\n+     */\n+    public static double t(double mu, double[] observed)\n+        throws IllegalArgumentException {\n+        return tTest.t(mu, observed);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.inference.TTest#t(double, org.apache.commons.math.stat.descriptive.StatisticalSummary)\n+     */\n+    public static double t(double mu, StatisticalSummary sampleStats)\n+        throws IllegalArgumentException {\n+        return tTest.t(mu, sampleStats);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.inference.TTest#t(double[], double[])\n+     */\n+    public static double t(double[] sample1, double[] sample2)\n+        throws IllegalArgumentException {\n+        return tTest.t(sample1, sample2);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.inference.TTest#t(org.apache.commons.math.stat.descriptive.StatisticalSummary, org.apache.commons.math.stat.descriptive.StatisticalSummary)\n+     */\n+    public static double t(StatisticalSummary sampleStats1,\n+            StatisticalSummary sampleStats2)\n+        throws IllegalArgumentException {\n+        return tTest.t(sampleStats1, sampleStats2);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.inference.TTest#tTest(double, double[], double)\n+     */\n+    public static boolean tTest(double mu, double[] sample, double alpha)\n+        throws IllegalArgumentException, MathException {\n+        return tTest.tTest(mu, sample, alpha);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.inference.TTest#tTest(double, double[])\n+     */\n+    public static double tTest(double mu, double[] sample)\n+        throws IllegalArgumentException, MathException {\n+        return tTest.tTest(mu, sample);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.inference.TTest#tTest(double, org.apache.commons.math.stat.descriptive.StatisticalSummary, double)\n+     */\n+    public static boolean tTest(double mu, StatisticalSummary sampleStats,\n+        double alpha)\n+        throws IllegalArgumentException, MathException {\n+        return tTest. tTest(mu, sampleStats, alpha);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.inference.TTest#tTest(double, org.apache.commons.math.stat.descriptive.StatisticalSummary)\n+     */\n+    public static double tTest(double mu, StatisticalSummary sampleStats)\n+        throws IllegalArgumentException, MathException {\n+        return tTest.tTest(mu, sampleStats);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.inference.TTest#tTest(double[], double[], double)\n+     */\n+    public static boolean tTest(double[] sample1, double[] sample2, double alpha)\n+        throws IllegalArgumentException, MathException {\n+        return tTest.tTest(sample1, sample2, alpha);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.inference.TTest#tTest(double[], double[])\n+     */\n+    public static double tTest(double[] sample1, double[] sample2)\n+        throws IllegalArgumentException, MathException {\n+        return tTest.tTest(sample1, sample2);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.inference.TTest#tTest(org.apache.commons.math.stat.descriptive.StatisticalSummary, org.apache.commons.math.stat.descriptive.StatisticalSummary, double)\n+     */\n+    public static boolean tTest(StatisticalSummary sampleStats1,\n+        StatisticalSummary sampleStats2, double alpha)\n+        throws IllegalArgumentException, MathException {\n+        return tTest. tTest(sampleStats1, sampleStats2, alpha);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.inference.TTest#tTest(org.apache.commons.math.stat.descriptive.StatisticalSummary, org.apache.commons.math.stat.descriptive.StatisticalSummary)\n+     */\n+    public static double tTest(StatisticalSummary sampleStats1,\n+        StatisticalSummary sampleStats2)\n+        throws IllegalArgumentException, MathException {\n+        return tTest.tTest(sampleStats1, sampleStats2);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.inference.ChiSquareTest#chiSquare(double[], long[])\n+     */\n+    public static double chiSquare(double[] expected, long[] observed)\n+        throws IllegalArgumentException {\n+        return chiSquareTest.chiSquare(expected, observed);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.inference.ChiSquareTest#chiSquare(long[][])\n+     */\n+    public static double chiSquare(long[][] counts) \n+        throws IllegalArgumentException {\n+        return chiSquareTest.chiSquare(counts);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.inference.ChiSquareTest#chiSquareTest(double[], long[], double)\n+     */\n+    public static boolean chiSquareTest(double[] expected, long[] observed,\n+        double alpha)\n+        throws IllegalArgumentException, MathException {\n+        return chiSquareTest.chiSquareTest(expected, observed, alpha);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.inference.ChiSquareTest#chiSquareTest(double[], long[])\n+     */\n+    public static double chiSquareTest(double[] expected, long[] observed)\n+        throws IllegalArgumentException, MathException {\n+        return chiSquareTest.chiSquareTest(expected, observed);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.inference.ChiSquareTest#chiSquareTest(long[][], double)\n+     */\n+    public static boolean chiSquareTest(long[][] counts, double alpha)\n+        throws IllegalArgumentException, MathException {\n+        return chiSquareTest. chiSquareTest(counts, alpha);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.inference.ChiSquareTest#chiSquareTest(long[][])\n+     */\n+    public static double chiSquareTest(long[][] counts)\n+        throws IllegalArgumentException, MathException {\n+        return chiSquareTest. chiSquareTest(counts);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/inference/ChiSquareFactoryTest.java\n+/*\n+ * Copyright 2005 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.inference;\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test cases for the ChiSquareTestFactory.\n+ *\n+ * @version $Revision$ $Date$\n+ */\n+\n+public class ChiSquareFactoryTest extends ChiSquareTestTest {\n+\n+    public ChiSquareFactoryTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() {\n+        testStatistic = TestUtils.getChiSquareTest();\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(ChiSquareFactoryTest.class);\n+        suite.setName(\"ChiSquareTestFactory Tests\");\n+        return suite;\n+    }\n+}\n--- a/src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java\n+++ b/src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java\n  * @version $Revision$ $Date$\n  */\n \n-public final class ChiSquareTestTest extends TestCase {\n+public class ChiSquareTestTest extends TestCase {\n \n-    private ChiSquareTestImpl testStatistic = new ChiSquareTestImpl();\n+    protected ChiSquareTest testStatistic = new ChiSquareTestImpl();\n \n     public ChiSquareTestTest(String name) {\n         super(name);\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/inference/TTestFactoryTest.java\n+/*\n+ * Copyright 2005 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.inference;\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test cases for the TTestTestFactory.\n+ *\n+ * @version $Revision$ $Date$\n+ */\n+\n+public class TTestFactoryTest extends TTestTest {\n+\n+    public TTestFactoryTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() {\n+        testStatistic = TestUtils.getTTest();\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(TTestFactoryTest.class);\n+        suite.setName(\"TTestFactory Tests\");\n+        return suite;\n+    }\n+}\n--- a/src/test/org/apache/commons/math/stat/inference/TTestTest.java\n+++ b/src/test/org/apache/commons/math/stat/inference/TTestTest.java\n  * @version $Revision$ $Date$\n  */\n \n-public final class TTestTest extends TestCase {\n-\n-    private TTestImpl testStatistic = new TTestImpl();\n+public class TTestTest extends TestCase {\n+\n+    protected TTest testStatistic = new TTestImpl();\n     \n     private double[] tooShortObs = { 1.0 };\n     private double[] nullObserved = null;\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java\n+/*\n+ * Copyright 2005 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.inference;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import org.apache.commons.math.stat.descriptive.SummaryStatistics;\n+/**\n+ * Test cases for the TestUtils class.\n+ *\n+ * @version $Revision$ $Date$\n+ */\n+\n+public class TestUtilsTest extends TestCase {\n+\n+    public TestUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp() {\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(TestUtilsTest.class);\n+        suite.setName(\"TestUtils Tests\");\n+        return suite;\n+    }\n+\n+    public void testChiSquare() throws Exception {\n+        \n+        // Target values computed using R version 1.8.1 \n+        // Some assembly required ;-)  \n+        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n+        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n+        \n+        long[] observed = {10, 9, 11};\n+        double[] expected = {10, 10, 10};\n+        assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);\n+        assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);\n+        \n+        long[] observed1 = { 500, 623, 72, 70, 31 };\n+        double[] expected1 = { 485, 541, 82, 61, 37 };\n+        assertEquals( \"chi-square test statistic\", 16.4131070362, TestUtils.chiSquare(expected1, observed1), 1E-10);\n+        assertEquals(\"chi-square p-value\", 0.002512096, TestUtils.chiSquareTest(expected1, observed1), 1E-9);\n+        assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.003));\n+        assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.002));\n+\n+        try {\n+            TestUtils.chiSquareTest(expected1, observed1, 95);\n+            fail(\"alpha out of range, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+        \n+        long[] tooShortObs = { 0 };\n+        double[] tooShortEx = { 1 };\n+        try {\n+            TestUtils.chiSquare(tooShortEx, tooShortObs);\n+            fail(\"arguments too short, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+\n+        // unmatched arrays\n+        long[] unMatchedObs = { 0, 1, 2, 3 };\n+        double[] unMatchedEx = { 1, 1, 2 };\n+        try {\n+            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n+            fail(\"arrays have different lengths, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        \n+        // 0 expected count\n+        expected[0] = 0;\n+        try {\n+            TestUtils.chiSquareTest(expected, observed, .01);\n+            fail(\"bad expected count, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        } \n+        \n+        // negative observed count\n+        expected[0] = 1;\n+        observed[0] = -1;\n+        try {\n+            TestUtils.chiSquareTest(expected, observed, .01);\n+            fail(\"bad expected count, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        } \n+        \n+    }\n+\n+    public void testChiSquareIndependence() throws Exception {\n+        \n+        // Target values computed using R version 1.8.1 \n+        \n+        long[][] counts = { {40, 22, 43}, {91, 21, 28}, {60, 10, 22}};\n+        assertEquals( \"chi-square test statistic\", 22.709027688, TestUtils.chiSquare(counts), 1E-9);\n+        assertEquals(\"chi-square p-value\", 0.000144751460134, TestUtils.chiSquareTest(counts), 1E-9);\n+        assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(counts, 0.0002));\n+        assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(counts, 0.0001));    \n+        \n+        long[][] counts2 = {{10, 15}, {30, 40}, {60, 90} };\n+        assertEquals( \"chi-square test statistic\", 0.168965517241, TestUtils.chiSquare(counts2), 1E-9);\n+        assertEquals(\"chi-square p-value\",0.918987499852, TestUtils.chiSquareTest(counts2), 1E-9);\n+        assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(counts2, 0.1)); \n+        \n+        // ragged input array\n+        long[][] counts3 = { {40, 22, 43}, {91, 21, 28}, {60, 10}};\n+        try {\n+            TestUtils.chiSquare(counts3);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        \n+        // insufficient data\n+        long[][] counts4 = {{40, 22, 43}};\n+        try {\n+            TestUtils.chiSquare(counts4);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        } \n+        long[][] counts5 = {{40}, {40}, {30}, {10}};\n+        try {\n+            TestUtils.chiSquare(counts5);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        } \n+        \n+        // negative counts\n+        long[][] counts6 = {{10, -2}, {30, 40}, {60, 90} };\n+        try {\n+            TestUtils.chiSquare(counts6);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        } \n+        \n+        // bad alpha\n+        try {\n+            TestUtils.chiSquareTest(counts, 0);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        } \n+    }\n+    \n+    public void testChiSquareLargeTestStatistic() throws Exception {\n+        double[] exp = new double[] {\n+                3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, \n+                232921.0, 437665.75\n+        };\n+\n+        long[] obs = new long[] {\n+                2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899\n+        };\n+        org.apache.commons.math.stat.inference.ChiSquareTestImpl csti =\n+            new org.apache.commons.math.stat.inference.ChiSquareTestImpl(); \n+        double cst = csti.chiSquareTest(exp, obs); \n+        assertEquals(\"chi-square p-value\", 0.0, cst, 1E-3);\n+        assertEquals( \"chi-square test statistic\", \n+                3624883.342907764, TestUtils.chiSquare(exp, obs), 1E-9);\n+    }\n+    \n+    /** Contingency table containing zeros - PR # 32531 */\n+    public void testChiSquareZeroCount() throws Exception {\n+        // Target values computed using R version 1.8.1 \n+        long[][] counts = { {40, 0, 4}, {91, 1, 2}, {60, 2, 0}};\n+        assertEquals( \"chi-square test statistic\", 9.67444662263,\n+                TestUtils.chiSquare(counts), 1E-9);\n+        assertEquals(\"chi-square p-value\", 0.0462835770603,\n+                TestUtils.chiSquareTest(counts), 1E-9);       \n+    }\n+    \n+    private double[] tooShortObs = { 1.0 };\n+    private double[] nullObserved = null;\n+    private double[] emptyObs = {};\n+    private SummaryStatistics emptyStats = SummaryStatistics.newInstance();  \n+    private SummaryStatistics nullStats = null;   \n+    SummaryStatistics tooShortStats = null;  \n+\n+    public void testOneSampleT() throws Exception {\n+        double[] observed =\n+            {93.0, 103.0, 95.0, 101.0, 91.0, 105.0, 96.0, 94.0, 101.0,  88.0, 98.0, 94.0, 101.0, 92.0, 95.0 };\n+        double mu = 100.0;\n+        SummaryStatistics sampleStats = null;\n+        sampleStats = SummaryStatistics.newInstance();\n+        for (int i = 0; i < observed.length; i++) {\n+            sampleStats.addValue(observed[i]);\n+        }\n+\n+        // Target comparison values computed using R version 1.8.1 (Linux version)\n+        assertEquals(\"t statistic\",  -2.81976445346,\n+                TestUtils.t(mu, observed), 10E-10);\n+        assertEquals(\"t statistic\",  -2.81976445346,\n+                TestUtils.t(mu, sampleStats), 10E-10);\n+        assertEquals(\"p value\", 0.0136390585873,\n+                TestUtils.tTest(mu, observed), 10E-10);\n+        assertEquals(\"p value\", 0.0136390585873,\n+                TestUtils.tTest(mu, sampleStats), 10E-10);\n+\n+        try {\n+            TestUtils.t(mu, nullObserved);\n+            fail(\"arguments too short, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+\n+        try {\n+            TestUtils.t(mu, nullStats);\n+            fail(\"arguments too short, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+\n+        try {\n+            TestUtils.t(mu, emptyObs);\n+            fail(\"arguments too short, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        \n+        try {\n+            TestUtils.t(mu, emptyStats);\n+            fail(\"arguments too short, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+\n+        try {\n+            TestUtils.t(mu, tooShortObs);\n+            fail(\"insufficient data to compute t statistic, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // exptected\n+        }\n+        try {\n+            TestUtils.tTest(mu, tooShortObs);\n+            fail(\"insufficient data to perform t test, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+\n+        try {\n+            TestUtils.t(mu, tooShortStats);\n+            fail(\"insufficient data to compute t statistic, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // exptected\n+        }\n+        try {\n+            TestUtils.tTest(mu, tooShortStats);\n+            fail(\"insufficient data to perform t test, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // exptected\n+        }  \n+    }\n+    \n+    public void testOneSampleTTest() throws Exception {\n+        double[] oneSidedP =\n+            {2d, 0d, 6d, 6d, 3d, 3d, 2d, 3d, -6d, 6d, 6d, 6d, 3d, 0d, 1d, 1d, 0d, 2d, 3d, 3d };\n+        SummaryStatistics oneSidedPStats = SummaryStatistics.newInstance();    \n+        for (int i = 0; i < oneSidedP.length; i++) {\n+            oneSidedPStats.addValue(oneSidedP[i]);\n+        }\n+        // Target comparison values computed using R version 1.8.1 (Linux version)\n+        assertEquals(\"one sample t stat\", 3.86485535541, \n+                TestUtils.t(0d, oneSidedP), 10E-10);\n+        assertEquals(\"one sample t stat\", 3.86485535541, \n+                TestUtils.t(0d, oneSidedPStats),1E-10);\n+        assertEquals(\"one sample p value\", 0.000521637019637,\n+                TestUtils.tTest(0d, oneSidedP) / 2d, 10E-10);\n+        assertEquals(\"one sample p value\", 0.000521637019637,\n+                TestUtils.tTest(0d, oneSidedPStats) / 2d, 10E-5);\n+        assertTrue(\"one sample t-test reject\", TestUtils.tTest(0d, oneSidedP, 0.01));\n+        assertTrue(\"one sample t-test reject\", TestUtils.tTest(0d, oneSidedPStats, 0.01));\n+        assertTrue(\"one sample t-test accept\", !TestUtils.tTest(0d, oneSidedP, 0.0001));\n+        assertTrue(\"one sample t-test accept\", !TestUtils.tTest(0d, oneSidedPStats, 0.0001));\n+        \n+        try {\n+            TestUtils.tTest(0d, oneSidedP, 95);\n+            fail(\"alpha out of range, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // exptected\n+        }  \n+        \n+        try {\n+            TestUtils.tTest(0d, oneSidedPStats, 95);\n+            fail(\"alpha out of range, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+        \n+    }\n+    \n+    public void testTwoSampleTHeterscedastic() throws Exception {\n+        double[] sample1 = { 7d, -4d, 18d, 17d, -3d, -5d, 1d, 10d, 11d, -2d };\n+        double[] sample2 = { -1d, 12d, -1d, -3d, 3d, -5d, 5d, 2d, -11d, -1d, -3d };\n+        SummaryStatistics sampleStats1 = SummaryStatistics.newInstance();  \n+        for (int i = 0; i < sample1.length; i++) {\n+            sampleStats1.addValue(sample1[i]);\n+        }\n+        SummaryStatistics sampleStats2 = SummaryStatistics.newInstance();    \n+        for (int i = 0; i < sample2.length; i++) {\n+            sampleStats2.addValue(sample2[i]);\n+        }\n+        \n+        // Target comparison values computed using R version 1.8.1 (Linux version)\n+        assertEquals(\"two sample heteroscedastic t stat\", 1.60371728768, \n+                TestUtils.t(sample1, sample2), 1E-10);\n+        assertEquals(\"two sample heteroscedastic t stat\", 1.60371728768, \n+                TestUtils.t(sampleStats1, sampleStats2), 1E-10);\n+        assertEquals(\"two sample heteroscedastic p value\", 0.128839369622, \n+                TestUtils.tTest(sample1, sample2), 1E-10);\n+        assertEquals(\"two sample heteroscedastic p value\", 0.128839369622, \n+                TestUtils.tTest(sampleStats1, sampleStats2), 1E-10);     \n+        assertTrue(\"two sample heteroscedastic t-test reject\", \n+                TestUtils.tTest(sample1, sample2, 0.2));\n+        assertTrue(\"two sample heteroscedastic t-test reject\", \n+                TestUtils.tTest(sampleStats1, sampleStats2, 0.2));\n+        assertTrue(\"two sample heteroscedastic t-test accept\", \n+                !TestUtils.tTest(sample1, sample2, 0.1));\n+        assertTrue(\"two sample heteroscedastic t-test accept\", \n+                !TestUtils.tTest(sampleStats1, sampleStats2, 0.1));\n+        \n+        try {\n+            TestUtils.tTest(sample1, sample2, .95);\n+            fail(\"alpha out of range, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        } \n+        \n+        try {\n+            TestUtils.tTest(sampleStats1, sampleStats2, .95);\n+            fail(\"alpha out of range, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected \n+        }  \n+        \n+        try {\n+            TestUtils.tTest(sample1, tooShortObs, .01);\n+            fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+        \n+        try {\n+            TestUtils.tTest(sampleStats1, tooShortStats, .01);\n+            fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+        \n+        try {\n+            TestUtils.tTest(sample1, tooShortObs);\n+            fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+        \n+        try {\n+            TestUtils.tTest(sampleStats1, tooShortStats);\n+            fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+        \n+        try {\n+            TestUtils.t(sample1, tooShortObs);\n+            fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        \n+        try {\n+            TestUtils.t(sampleStats1, tooShortStats);\n+            fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+    public void testTwoSampleTHomoscedastic() throws Exception {\n+        double[] sample1 ={2, 4, 6, 8, 10, 97};\n+        double[] sample2 = {4, 6, 8, 10, 16};\n+        SummaryStatistics sampleStats1 = SummaryStatistics.newInstance();  \n+        for (int i = 0; i < sample1.length; i++) {\n+            sampleStats1.addValue(sample1[i]);\n+        }\n+        SummaryStatistics sampleStats2 = SummaryStatistics.newInstance();    \n+        for (int i = 0; i < sample2.length; i++) {\n+            sampleStats2.addValue(sample2[i]);\n+        }\n+        \n+        // Target comparison values computed using R version 1.8.1 (Linux version)\n+        assertEquals(\"two sample homoscedastic t stat\", 0.73096310086, \n+                TestUtils.homoscedasticT(sample1, sample2), 10E-11);\n+        assertEquals(\"two sample homoscedastic p value\", 0.4833963785, \n+                TestUtils.homoscedasticTTest(sampleStats1, sampleStats2), 1E-10);     \n+        assertTrue(\"two sample homoscedastic t-test reject\", \n+                TestUtils.homoscedasticTTest(sample1, sample2, 0.49));\n+        assertTrue(\"two sample homoscedastic t-test accept\", \n+                !TestUtils.homoscedasticTTest(sample1, sample2, 0.48));\n+    }\n+    \n+    public void testSmallSamples() throws Exception {\n+        double[] sample1 = {1d, 3d};\n+        double[] sample2 = {4d, 5d};        \n+        \n+        // Target values computed using R, version 1.8.1 (linux version)\n+        assertEquals(-2.2360679775, TestUtils.t(sample1, sample2),\n+                1E-10);\n+        assertEquals(0.198727388935, TestUtils.tTest(sample1, sample2),\n+                1E-10);\n+    }\n+    \n+    public void testPaired() throws Exception {\n+        double[] sample1 = {1d, 3d, 5d, 7d};\n+        double[] sample2 = {0d, 6d, 11d, 2d};\n+        double[] sample3 = {5d, 7d, 8d, 10d};\n+        double[] sample4 = {0d, 2d};\n+        \n+        // Target values computed using R, version 1.8.1 (linux version)\n+        assertEquals(-0.3133, TestUtils.pairedT(sample1, sample2), 1E-4);\n+        assertEquals(0.774544295819, TestUtils.pairedTTest(sample1, sample2), 1E-10);\n+        assertEquals(0.001208, TestUtils.pairedTTest(sample1, sample3), 1E-6);\n+        assertFalse(TestUtils.pairedTTest(sample1, sample3, .001));\n+        assertTrue(TestUtils.pairedTTest(sample1, sample3, .002));    \n+    }\n+}", "timestamp": 1117943894, "metainfo": ""}