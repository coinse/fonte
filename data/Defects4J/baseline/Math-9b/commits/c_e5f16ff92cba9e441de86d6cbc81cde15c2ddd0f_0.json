{"sha": "e5f16ff92cba9e441de86d6cbc81cde15c2ddd0f", "log": "prevent zero-length steps from generating NaN  ", "commit": "\n--- a/src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java\n           final double yDot4 = yDotK[4][i];\n           final double yDot5 = yDotK[5][i];\n           final double yDot6 = yDotK[6][i];\n-          v1[i] = h * (a70 * yDot0 + a72 * yDot2 + a73 * yDot3 + a74 * yDot4 + a75 * yDot5);\n-          v2[i] = h * yDot0 - v1[i];\n-          v3[i] = v1[i] - v2[i] - h * yDot6;\n-          v4[i] = h * (d0 * yDot0 + d2 * yDot2 + d3 * yDot3 + d4 * yDot4 + d5 * yDot5 + d6 * yDot6);\n+          v1[i] = a70 * yDot0 + a72 * yDot2 + a73 * yDot3 + a74 * yDot4 + a75 * yDot5;\n+          v2[i] = yDot0 - v1[i];\n+          v3[i] = v1[i] - v2[i] - yDot6;\n+          v4[i] = d0 * yDot0 + d2 * yDot2 + d3 * yDot3 + d4 * yDot4 + d5 * yDot5 + d6 * yDot6;\n       }\n \n       vectorsInitialized = true;\n     }\n \n     // interpolate\n-    final double eta = oneMinusThetaH / h;\n+    final double eta = 1 - theta;\n     final double twoTheta = 2 * theta;\n     final double dot2 = 1 - twoTheta;\n     final double dot3 = theta * (2 - 3 * theta);\n     final double dot4 = twoTheta * (1 + theta * (twoTheta - 3));\n     for (int i = 0; i < interpolatedState.length; ++i) {\n       interpolatedState[i] =\n-          currentState[i] - eta * (v1[i] - theta * (v2[i] + theta * (v3[i] + eta * v4[i])));\n-      interpolatedDerivatives[i] = \n-          (v1[i] + dot2 * v2[i] + dot3 * v3[i] + dot4 * v4[i]) / h;\n-      }\n+          currentState[i] - oneMinusThetaH * (v1[i] - theta * (v2[i] + theta * (v3[i] + eta * v4[i])));\n+      interpolatedDerivatives[i] = v1[i] + dot2 * v2[i] + dot3 * v3[i] + dot4 * v4[i];\n+    }\n \n   }\n \n--- a/src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\n           final double yDot14 = yDotKLast[0][i];\n           final double yDot15 = yDotKLast[1][i];\n           final double yDot16 = yDotKLast[2][i];\n-          v[0][i] = h * (b_01 * yDot1  + b_06 * yDot6 + b_07 * yDot7 +\n-                         b_08 * yDot8  + b_09 * yDot9 + b_10 * yDot10 +\n-                         b_11 * yDot11 + b_12 * yDot12);\n-          v[1][i] = h * yDot1 - v[0][i];\n-          v[2][i] = v[0][i] - v[1][i] - h * yDotK[12][i];\n+          v[0][i] = b_01 * yDot1  + b_06 * yDot6 + b_07 * yDot7 +\n+                    b_08 * yDot8  + b_09 * yDot9 + b_10 * yDot10 +\n+                    b_11 * yDot11 + b_12 * yDot12;\n+          v[1][i] = yDot1 - v[0][i];\n+          v[2][i] = v[0][i] - v[1][i] - yDotK[12][i];\n           for (int k = 0; k < d.length; ++k) {\n-              v[k+3][i] = h * (d[k][0] * yDot1  + d[k][1]  * yDot6  + d[k][2]  * yDot7  +\n-                               d[k][3] * yDot8  + d[k][4]  * yDot9  + d[k][5]  * yDot10 +\n-                               d[k][6] * yDot11 + d[k][7]  * yDot12 + d[k][8]  * yDot13 +\n-                               d[k][9] * yDot14 + d[k][10] * yDot15 + d[k][11] * yDot16);\n+              v[k+3][i] = d[k][0] * yDot1  + d[k][1]  * yDot6  + d[k][2]  * yDot7  +\n+                          d[k][3] * yDot8  + d[k][4]  * yDot9  + d[k][5]  * yDot10 +\n+                          d[k][6] * yDot11 + d[k][7]  * yDot12 + d[k][8]  * yDot13 +\n+                          d[k][9] * yDot14 + d[k][10] * yDot15 + d[k][11] * yDot16;\n           }\n       }\n \n \n     }\n \n-    final double eta      = oneMinusThetaH / h;\n+    final double eta      = 1 - theta;\n     final double twoTheta = 2 * theta;\n     final double theta2   = theta * theta;\n     final double dot1 = 1 - twoTheta;\n     final double dot6 = theta2 * theta * (4 + theta * (-15 + theta * (18 - 7 * theta)));\n \n     for (int i = 0; i < interpolatedState.length; ++i) {\n-      interpolatedState[i] =\n-          currentState[i] - eta * (v[0][i] - theta * (v[1][i] +\n-                  theta * (v[2][i] + eta * (v[3][i] + theta * (v[4][i] +\n-                          eta * (v[5][i] + theta * (v[6][i])))))));\n-      interpolatedDerivatives[i] = \n-          (v[0][i] + dot1 * v[1][i] + dot2 * v[2][i] + dot3 * v[3][i] +\n-                     dot4 * v[4][i] + dot5 * v[5][i] + dot6 * v[6][i]) / h;\n+      interpolatedState[i] = currentState[i] -\n+                             oneMinusThetaH * (v[0][i] -\n+                                               theta * (v[1][i] +\n+                                                        theta * (v[2][i] +\n+                                                                 eta * (v[3][i] +\n+                                                                        theta * (v[4][i] +\n+                                                                                 eta * (v[5][i] +\n+                                                                                        theta * (v[6][i])))))));\n+      interpolatedDerivatives[i] =  v[0][i] + dot1 * v[1][i] + dot2 * v[2][i] +\n+                                    dot3 * v[3][i] + dot4 * v[4][i] +\n+                                    dot5 * v[5][i] + dot6 * v[6][i];\n     }\n \n   }\n--- a/src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java\n \n \n   /** Compute the interpolation coefficients for dense output.\n-   * @param mu degree of the interpolation polynom\n+   * @param mu degree of the interpolation polynomial\n    * @param h current step\n    */\n   public void computeCoefficients(final int mu, final double h) {\n \n     }\n \n+    if (h == 0) {\n+        // in this degenerated case, the previous computation leads to NaN for derivatives\n+        // we fix this by using the derivatives at midpoint\n+        System.arraycopy(yMidDots[1], 0, interpolatedDerivatives, 0, dimension);\n+    }\n+\n   }\n     \n   /** {@inheritDoc} */", "timestamp": 1215698777, "metainfo": ""}