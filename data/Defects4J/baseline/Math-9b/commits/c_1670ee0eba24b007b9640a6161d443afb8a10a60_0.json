{"sha": "1670ee0eba24b007b9640a6161d443afb8a10a60", "log": "PR: http://nagoya.apache.org/bugzilla/show_bug.cgi?id=21003 Submitted by:\tphil@steitz.com   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/TestStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/TestStatistic.java\n  * <http://www.apache.org/>.\n  */\n package org.apache.commons.math.stat;\n-\n /**\n- * Interfaces for the following test statistics <ul>\n- * <li><a href =\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda35f.htm\">\n- *     Chi-Square</a></li>\n- * <li><a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda352.htm\">\n- *     One Sample t-test</a></li>\n- * </ul>\n+ * A collection of commonly used test statistics and statistical tests.\n  * \n  * @author Phil Steitz\n- * @version $Revision: 1.1 $ $Date: 2003/06/21 23:00:39 $\n+ * @version $Revision: 1.2 $ $Date: 2003/06/25 01:35:46 $\n  * \n  */\n public interface TestStatistic {\n     \n     /**\n-     * <strong>Description</strong>:\n-     * Computes Chi-Square statistic given observed and expected freqeuncy counts <br>\n-     * This statistic can be used to perform Chi-Square tests for goodness\n-     * of fit.<br>\n-     * <strong>Definition</strong>: \n-     * http://www.itl.nist.gov/div898/handbook/eda/section3/eda35f.htm <br>\n-     * <strong>Preconditions</strong>: <ul>\n-     * <li>Expected counts should all be positive. If any expected\n-     * counts are 0, the test will return INFINITY.  Negative expected or observed counts \n-     * make the statistic meaningless.</li>\n-     * <li>The observed and expected arrays <i>must</i> have the same length and\n-     * their common length must be at least 2 </li>\n-     * </ul>\n+     * Computes the <a href=\"http://www.itl.nist.gov/div898/handbook/eda\n+     * /section3/eda35f.htm\">Chi-Square statistic</a> comparing \n+     * <code>observed</code> and <code>expected</code> freqeuncy counts. \n+     * <p>\n+     * This statistic can be used to perform Chi-Square tests.\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>Expected counts must all be positive.  \n+     * </li>\n+     * <li>Observed counds must all be >= 0.   \n+     * </li>\n+     * <li>The observed and expected arrays must have the same length and\n+     * their common length must be at least 2.  \n+     * </li></ul><p>\n+     * If any of the preconditions are not met, an \n+     * <code>IllegalArgumentException</code> is thrown.\n+     *\n      * @param observed array of observed frequency counts\n      * @param expected array of exptected frequency counts\n-     * @throws IllegalArgumentException if input arrays have different lengths\n-     * or length is less than 2\n-     */\n-    public double chiSquare(double[] expected, double[] observed);\n-    \n-    /**\n-     * <strong>Description</strong>:\n-     * Computes one sample, t-test statistic given observed values <br/>\n-     * This statistic can be used to perform one sample tests for means.<br/>\n-     * <strong>Definition</strong>: \n-     * http://www.itl.nist.gov/div898/handbook/eda/section3/eda352.htm<br/>\n-     * <strong>Preconditions</strong>: <ul>\n-     * <li>The observed array length <i>must</i> be at least 2.</li>\n-     * </ul>\n-     * @param mu hypothesized mean value.\n-     * @param observed array of observed values\n+     * @return chiSquare statistic\n+     * @throws IllegalArgumentException if preconditions are not met\n+     */\n+    double chiSquare(double[] expected, double[] observed) \n+        throws IllegalArgumentException;\n+    \n+    /**\n+     * Returns the <i>observed significance level</i>, or <a href=\n+     * \"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n+     * p-value</a>, associated with a <a href=\"http://www.itl.nist.gov/div898/\n+     * handbook/eda/section3/eda35f.htm\">Chi-square goodness of fit test</a>\n+     * comparing the <code>observed</code> frequency counts to those in the \n+     * <code>expected</code> array.\n+     * <p>\n+     * The number returned is the smallest significance level\n+     * at which one can reject the null hypothesis that the observed counts\n+     * conform to the frequency distribution described by the expected counts. \n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>Expected counts must all be positive.  \n+     * </li>\n+     * <li>Observed counds must all be >= 0.   \n+     * </li>\n+     * <li>The observed and expected arrays must have the same length and\n+     * their common length must be at least 2.  \n+     * </li></ul><p>\n+     * If any of the preconditions are not met, an \n+     * <code>IllegalArgumentException</code> is thrown.\n+     *\n+     * @param observed array of observed frequency counts\n+     * @param expected array of exptected frequency counts\n+     * @return p-value\n+     * @throws IllegalArgumentException if preconditions are not met\n+     */\n+    double chiSquareTest(double[] expected, double[] observed) \n+        throws IllegalArgumentException;\n+    \n+    /**\n+     * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/eda/\n+     * section3/eda35f.htm\">Chi-square goodness of fit test</a> evaluating the \n+     * null hypothesis that the observed counts conform to the frequency \n+     * distribution described by the expected counts, with significance level \n+     * <code>alpha</code>.\n+     * <p>\n+     * <strong>Example:</strong><br>\n+     * To test the hypothesis that <code>observed</code> follows \n+     * <code>expected</code> at the 99% level, use <p>\n+     * <code>chiSquareTest(expected, observed, 0.01) </code>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>Expected counts must all be positive.  \n+     * </li>\n+     * <li>Observed counds must all be >= 0.   \n+     * </li>\n+     * <li>The observed and expected arrays must have the same length and\n+     * their common length must be at least 2.  \n+     * <li> <code> 0 < alpha < 0.5 </code>\n+     * </li></ul><p>\n+     * If any of the preconditions are not met, an \n+     * <code>IllegalArgumentException</code> is thrown.\n+     *\n+     * @param observed array of observed frequency counts\n+     * @param expected array of exptected frequency counts\n+     * @param alpha significance level of the test\n+     * @return true iff null hypothesis can be rejected with confidence\n+     * 1 - alpha\n+     * @throws IllegalArgumentException if preconditions are not met\n+     */\n+    boolean chiSquareTest(double[] expected, double[] observed, double alpha) \n+        throws IllegalArgumentException;\n+    \n+    /**\n+     * Computes a <a href=\"http://www.itl.nist.gov/div898/handbook/prc/\n+     * section2/prc22.htm#formula\"> t statistic </a> given observed values and \n+     * a comparison constant.\n+     * <p>\n+     * This statistic can be used to perform a one sample t-test for the mean.\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The observed array length must be at least 2.\n+     * </li></ul>\n+     *\n+     * @param mu comparison constant\n+     * @param observed array of values\n+     * @return t statistic\n      * @throws IllegalArgumentException if input array length is less than 2\n      */\n-    public double t(double mu, double[] observed);\n+    double t(double mu, double[] observed) \n+        throws IllegalArgumentException;\n+    \n+    /**\n+     * Computes a <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3\n+     * /prc31.htm\">2-sample t statistic </a>, without the assumption of equal\n+     * sample variances.\n+     * <p>\n+     * This statistic can be used to perform a two-sample t-test to compare\n+     * sample means.\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The observed array lengths must both be at least 5.\n+     * </li></ul>\n+     *\n+     * @param sample1 array of sample data values\n+     * @param sample2 array of sample data values\n+     * @return t statistic\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    double t(double[] sample1, double[] sample2) \n+        throws IllegalArgumentException;\n+    \n+    /**\n+     * Returns the <i>observed significance level</i>, or <a href=\n+     * \"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n+     * p-value</a>, associated with a two-sample, two-tailed t-test \n+     * comparing the means of the input arrays.\n+     * <p>\n+     * The number returned is the smallest significance level\n+     * at which one can reject the null hypothesis that the two means are\n+     * equal in favor of the two-sided alternative that they are different. \n+     * For a one-sided test, divide the returned value by 2.\n+     * <p>\n+     * The test does not assume that the underlying popuation variances are\n+     * equal and it uses approximated degrees of freedom computed from the \n+     * sample data as described <a href=\"http://www.itl.nist.gov/div898/\n+     * handbook/prc/section3/prc31.htm\">here</a>\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the p-value depends on the assumptions of the parametric\n+     * t-test procedure, as discussed <a href=\"http://www.basic.nwu.edu/\n+     * statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The observed array lengths must both be at least 5.\n+     * </li></ul>\n+     *\n+     * @param sample1 array of sample data values\n+     * @param sample2 array of sample data values\n+     * @return p-value for t-test\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    double tTest(double[] sample1, double[] sample2)\n+        throws IllegalArgumentException;\n+    \n+    /**\n+     * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/eda/\n+     * section3/eda353.htm\">two-sided t-test</a> evaluating the null \n+     * hypothesis that <code>sample1</code> and <code>sample2</code> are drawn \n+     * from populations with the same mean, with significance level \n+     * <code>alpha</code>.\n+     * <p>\n+     * Returns <code>true</code> iff the null hypothesis that the means are\n+     * equal can be rejected with confidence <code>1 - alpha</code>.  To \n+     * perform a 1-sided test, use <code>alpha / 2</code>\n+     * <p>\n+     * <strong>Examples:</strong><br><ol>\n+     * <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at\n+     * the 95% level, use <br><code>tTest(sample1, sample2, 0.05) </code>\n+     * </li>\n+     * <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2 </code>\n+     * at the 99% level, first verify that the measured mean of \n+     * <code>sample 1</code> is less than the mean of <code>sample 2</code>\n+     * and then use <br><code>tTest(sample1, sample2, 0.005) </code>\n+     * </li></ol>\n+     * <p>\n+     * The test does not assume that the underlying popuation variances are\n+     * equal and it uses approximated degrees of freedom computed from the \n+     * sample data as described <a href=\"http://www.itl.nist.gov/div898/\n+     * handbook/prc/section3/prc31.htm\">here</a>\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the test depends on the assumptions of the parametric\n+     * t-test procedure, as discussed <a href=\"http://www.basic.nwu.edu/\n+     * statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The observed array lengths must both be at least 5.\n+     * </li>\n+     * <li> <code> 0 < alpha < 0.5 </code>\n+     * </li></ul>\n+     *\n+     * @param sample1 array of sample data values\n+     * @param sample2 array of sample data values\n+     * @param alpha significance level of the test\n+     * @return true if the null hypothesis can be rejected with \n+     * confidence 1 - alpha\n+     * @throws IllegalArgumentException if the preconditions are not met\n+     */\n+    boolean tTest(double[] sample1, double[] sample2, double alpha)\n+        throws IllegalArgumentException;\n+    \n+    /**\n+     * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/eda/\n+     * section3/eda353.htm\">two-sided t-test</a> evaluating the null \n+     * hypothesis that the mean of the population from which \n+     * <code>sample</code> is drawn equals <code>mu</code>.\n+     * <p>\n+     * Returns <code>true</code> iff the null hypothesis can be \n+     * rejected with confidence <code>1 - alpha</code>.  To \n+     * perform a 1-sided test, use <code>alpha / 2</code>\n+     * <p>\n+     * <strong>Examples:</strong><br><ol>\n+     * <li>To test the (2-sided) hypothesis <code>sample mean = mu </code> at\n+     * the 95% level, use <br><code>tTest(mu, sample, 0.05) </code>\n+     * </li>\n+     * <li>To test the (one-sided) hypothesis <code> sample mean < mu </code>\n+     * at the 99% level, first verify that the measured sample mean is less \n+     * than <code>mu</code> and then use \n+     * <br><code>tTest(mu, sample, 0.005) </code>\n+     * </li></ol>\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the test depends on the assumptions of the one-sample \n+     * parametric t-test procedure, as discussed \n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/\n+     * sg_glos.html#one-sample\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The observed array length must be at least 5.\n+     * </li></ul>\n+     *\n+     * @param mu constant value to compare sample mean against\n+     * @param sample array of sample data values\n+     * @param alpha significance level of the test\n+     * @return p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    boolean tTest(double mu, double[] sample, double alpha)\n+        throws IllegalArgumentException;\n+    \n+    /**\n+     * Returns the <i>observed significance level</i>, or <a href=\n+     * \"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n+     * p-value</a>, associated with a one-sample, two-tailed t-test \n+     * comparing the mean of the input array with the constant <code>mu</code>.\n+     * <p>\n+     * The number returned is the smallest significance level\n+     * at which one can reject the null hypothesis that the mean equals \n+     * <code>mu</code> in favor of the two-sided alternative that the mean\n+     * is different from <code>mu</code>. For a one-sided test, divide the \n+     * returned value by 2.\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the test depends on the assumptions of the parametric\n+     * t-test procedure, as discussed <a href=\"http://www.basic.nwu.edu/\n+     * statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The observed array length must be at least 5.\n+     * </li></ul>\n+     *\n+     * @param mu constant value to compare sample mean against\n+     * @param sample array of sample data values\n+     * @return p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    double tTest(double mu, double[] sample)\n+        throws IllegalArgumentException;\n+    \n+    /**\n+     * Computes a <a href=\"http://www.itl.nist.gov/div898/handbook/prc/\n+     * section2/prc22.htm#formula\"> t statistic </a> to use in comparing \n+     * the dataset described by <code>sampleStats</code> to <code>mu</code>.\n+     * <p>\n+     * This statistic can be used to perform a one sample t-test for the mean.\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li><code>observed.getN() > = 2</code>.\n+     * </li></ul>\n+     *\n+     * @param mu comparison constant\n+     * @param sampleStats Univariate holding sample summary statitstics\n+     * @return t statistic\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    double t(double mu, Univariate sampleStats) \n+        throws IllegalArgumentException;\n+    \n+    /**\n+     * Computes a <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3\n+     * /prc31.htm\">2-sample t statistic </a>, comparing the datasets described\n+     * by two Univariates without the assumption of equal sample variances.\n+     * <p>\n+     * This statistic can be used to perform a two-sample t-test to compare\n+     * sample means.\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The datasets described by the two Univariates must each contain\n+     * at least 5 observations.\n+     * </li></ul>\n+     *\n+     * @param sampleStats1 Univariate describing data from the first sample\n+     * @param sampleStats2 Univariate describing data from the second sample\n+     * @return t statistic\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    double t(Univariate sampleStats1, Univariate sampleStats2) \n+        throws IllegalArgumentException;\n+    \n+    /**\n+     * Returns the <i>observed significance level</i>, or <a href=\n+     * \"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n+     * p-value</a>, associated with a two-sample, two-tailed t-test \n+     * comparing the means of the datasets described by two Univariates.\n+     * <p>\n+     * The number returned is the smallest significance level\n+     * at which one can reject the null hypothesis that the two means are\n+     * equal in favor of the two-sided alternative that they are different. \n+     * For a one-sided test, divide the returned value by 2.\n+     * <p>\n+     * The test does not assume that the underlying popuation variances are\n+     * equal and it uses approximated degrees of freedom computed from the \n+     * sample data as described <a href=\"http://www.itl.nist.gov/div898/\n+     * handbook/prc/section3/prc31.htm\">here</a>\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the p-value depends on the assumptions of the parametric\n+     * t-test procedure, as discussed <a href=\"http://www.basic.nwu.edu/\n+     * statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The datasets described by the two Univariates must each contain\n+     * at least 5 observations.\n+     * </li></ul>\n+     *\n+     * @param sampleStats1 Univariate describing data from the first sample\n+     * @param sampleStats2 Univariate describing data from the second sample\n+     * @return p-value for t-test\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    double tTest(Univariate sampleStats1, Univariate sampleStats2)\n+        throws IllegalArgumentException;\n+    \n+    /**\n+     * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/eda/\n+     * section3/eda353.htm\">two-sided t-test</a> evaluating the null \n+     * hypothesis that <code>sampleStats1</code> and <code>sampleStats2</code> \n+     * describe datasets drawn from populations with the same mean, with \n+     * significance level <code>alpha</code>.\n+     * <p>\n+     * Returns <code>true</code> iff the null hypothesis that the means are\n+     * equal can be rejected with confidence <code>1 - alpha</code>.  To \n+     * perform a 1-sided test, use <code>alpha / 2</code>\n+     * <p>\n+     * <strong>Examples:</strong><br><ol>\n+     * <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at\n+     * the 95% level, use \n+     * <br><code>tTest(sampleStats1, sampleStats2, 0.05) </code>\n+     * </li>\n+     * <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2 </code>\n+     * at the 99% level, first verify that the measured mean of \n+     * <code>sample 1</code> is less than the mean of <code>sample 2</code>\n+     * and then use <br><code>tTest(sampleStats1, sampleStats2, 0.005) </code>\n+     * </li></ol>\n+     * <p>\n+     * The test does not assume that the underlying popuation variances are\n+     * equal and it uses approximated degrees of freedom computed from the \n+     * sample data as described <a href=\"http://www.itl.nist.gov/div898/\n+     * handbook/prc/section3/prc31.htm\">here</a>\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the test depends on the assumptions of the parametric\n+     * t-test procedure, as discussed <a href=\"http://www.basic.nwu.edu/\n+     * statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The datasets described by the two Univariates must each contain\n+     * at least 5 observations.\n+     * </li>\n+     * <li> <code> 0 < alpha < 0.5 </code>\n+     * </li></ul>\n+     *\n+     * @param sampleStats1 Univariate describing sample data values\n+     * @param sampleStats2 Univariate describing sample data values\n+     * @param alpha significance level of the test\n+     * @return true if the null hypothesis can be rejected with \n+     * confidence 1 - alpha\n+     * @throws IllegalArgumentException if the preconditions are not met\n+     */\n+    boolean tTest(Univariate sampleStats1, Univariate sampleStats2, \n+        double alpha)\n+        throws IllegalArgumentException;\n+    \n+    /**\n+     * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/eda/\n+     * section3/eda353.htm\">two-sided t-test</a> evaluating the null \n+     * hypothesis that the mean of the population from which the dataset  \n+     * described by <code>stats</code> is drawn equals <code>mu</code>.\n+     * <p>\n+     * Returns <code>true</code> iff the null hypothesis can be \n+     * rejected with confidence <code>1 - alpha</code>.  To \n+     * perform a 1-sided test, use <code>alpha / 2</code>\n+     * <p>\n+     * <strong>Examples:</strong><br><ol>\n+     * <li>To test the (2-sided) hypothesis <code>sample mean = mu </code> at\n+     * the 95% level, use <br><code>tTest(mu, sampleStats, 0.05) </code>\n+     * </li>\n+     * <li>To test the (one-sided) hypothesis <code> sample mean < mu </code>\n+     * at the 99% level, first verify that the measured sample mean is less \n+     * than <code>mu</code> and then use \n+     * <br><code>tTest(mu, sampleStats, 0.005) </code>\n+     * </li></ol>\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the test depends on the assumptions of the one-sample \n+     * parametric t-test procedure, as discussed \n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/\n+     * sg_glos.html#one-sample\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The sample must include at least 5 observations.\n+     * </li></ul>\n+     *\n+     * @param mu constant value to compare sample mean against\n+     * @param sampleStats Univariate describing sample data values\n+     * @param alpha significance level of the test\n+     * @return p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    boolean tTest(double mu, Univariate sampleStats, double alpha)\n+        throws IllegalArgumentException;\n+    \n+    /**\n+     * Returns the <i>observed significance level</i>, or <a href=\n+     * \"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n+     * p-value</a>, associated with a one-sample, two-tailed t-test \n+     * comparing the mean of the dataset described by <code>sampleStats</code>\n+     * with the constant <code>mu</code>.\n+     * <p>\n+     * The number returned is the smallest significance level\n+     * at which one can reject the null hypothesis that the mean equals \n+     * <code>mu</code> in favor of the two-sided alternative that the mean\n+     * is different from <code>mu</code>. For a one-sided test, divide the \n+     * returned value by 2.\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the test depends on the assumptions of the parametric\n+     * t-test procedure, as discussed <a href=\"http://www.basic.nwu.edu/\n+     * statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The sample must contain at least 5 observations.\n+     * </li></ul>\n+     *\n+     * @param mu constant value to compare sample mean against\n+     * @param sampleStats Univariate describing sample data\n+     * @return p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    double tTest(double mu, Univariate sampleStats)\n+        throws IllegalArgumentException;\n }\n \n--- a/src/java/org/apache/commons/math/stat/TestStatisticImpl.java\n+++ b/src/java/org/apache/commons/math/stat/TestStatisticImpl.java\n \n package org.apache.commons.math.stat;\n \n+import org.apache.commons.math.stat.distribution.DistributionFactory;\n+import org.apache.commons.math.stat.distribution.TDistribution;\n+import org.apache.commons.math.stat.distribution.ChiSquaredDistribution;\n \n /**\n- * Implements the following test statistics <ul>\n- * <li>\n- *   <a href =\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda35f.htm\">\n- *   Chi-Square</a>\n- * </li>\n- * <li>\n- *   <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda352.htm\">\n- *     One Sample t-test</a>\n- * </li>\n- * </ul>\n+ * Implements test statistics defined in the TestStatistic interface.\n+ *\n  * @author Phil Steitz\n- * @version $Revision: 1.1 $ $Date: 2003/06/21 23:00:39 $\n+ * @version $Revision: 1.2 $ $Date: 2003/06/25 01:35:46 $\n  * \n  */\n public class TestStatisticImpl implements TestStatistic {\n     \n     /**\n-     * Default constructor.\n+     * Default constructor\n      */\n     public TestStatisticImpl() {\n     }\n     \n     /**\n-     * Computes Chi-Square statistic given observed and expected counts <br>\n-     * <strong>Algorithm</strong>: \n-     * http://www.itl.nist.gov/div898/handbook/eda/section3/eda35f.htm <br>\n-     * <strong>Numerical considerations</strong>: none <br>\n      * @param observed array of observed frequency counts\n      * @param expected array of expected frequency counts\n-     * @throws IllegalArgumentException if input arrays have different lengths\n+     * @return chi-square test statistic\n+     * @throws IllegalArgumentException if preconditions are not met\n      * or length is less than 2\n      */\n-    public double chiSquare(double[] expected, double[] observed) {\n+    public double chiSquare(double[] expected, double[] observed)\n+        throws IllegalArgumentException {\n         double sumSq = 0.0d;\n         double dev = 0.0d;\n         if ((expected.length < 2) || (expected.length != observed.length)) {\n             throw new IllegalArgumentException\n                 (\"observed, expected array lengths incorrect\");\n         }\n+        if ((StatUtils.min(expected) <= 0) || (StatUtils.min(observed) < 0)) {\n+            throw new IllegalArgumentException\n+                (\"observed counts must be non-negative,\" + \n+                    \" expected counts must be postive\");\n+        }\n         for (int i = 0; i < observed.length; i++) {\n             dev = (observed[i] - expected[i]);\n             sumSq += dev * dev / expected[i];\n         }\n         \n         return sumSq;\n-    }           \n+    }\n+    \n+    /**\n+     * @param observed array of observed frequency counts\n+     * @param expected array of exptected frequency counts\n+     * @return p-value\n+     * @throws IllegalArgumentException if preconditions are not met\n+     */\n+    public double chiSquareTest(double[] expected, double[] observed) \n+        throws IllegalArgumentException {\n+        ChiSquaredDistribution chiSquaredDistribution = \n+            DistributionFactory.newInstance().createChiSquareDistribution\n+                ((double) expected.length - 1);\n+        return 1 - chiSquaredDistribution.cummulativeProbability(\n+            chiSquare(expected, observed));     \n+    }\n+    \n+    /**\n+     * @param observed array of observed frequency counts\n+     * @param expected array of exptected frequency counts\n+     * @param alpha significance level of the test\n+     * @return true iff null hypothesis can be rejected with confidence\n+     * 1 - alpha\n+     * @throws IllegalArgumentException if preconditions are not met\n+     */\n+    public boolean chiSquareTest(double[] expected, double[] observed, \n+        double alpha) \n+        throws IllegalArgumentException {\n+        if ((alpha <= 0) || (alpha > 0.5)) {\n+           throw new IllegalArgumentException\n+                (\"bad significance level: \" + alpha);\n+        }\n+        return (chiSquareTest(expected, observed) < alpha);\n+    }\n \n     /**\n-     * Computes t statistic given observed values<br/>\n-     * <strong>Algorithm</strong>: \n-     * http://www.itl.nist.gov/div898/handbook/eda/section3/eda352.htm<br/>\n-     * <strong>Numerical considerations</strong>: none <br>\n-     * @param mu hypothesized mean value.\n-     * @param observed array of observed values\n-     * @return t-test statistic for the hypothesized mean and observed values.\n-     * @throws IllegalArgumentException if input array length is less than 2\n-     */\n-\tpublic double t(double mu, double[] observed) {\n-        if((observed == null) || (observed.length < 2)) {\n-            throw new IllegalArgumentException\n-                (\"observed array length incorrect\");\n-        }\n-        \n-        // leverage Univariate to compute statistics\n-        Univariate univariate = new UnivariateImpl();\n-        for (int i = 0; i < observed.length; i++) {\n-\t\t\tunivariate.addValue(observed[i]);\n-\t\t}\n-        double n = univariate.getN();\n-        double xbar = univariate.getMean();\n-        double std = univariate.getStandardDeviation();\n-\n-        return (xbar - mu) / (std / Math.sqrt(n));\n-\t}\n+     * @param mu comparison constant\n+     * @param observed array of values\n+     * @return t statistic\n+     * @throws IllegalArgumentException if input array length is less than 5\n+     */\n+    public double t(double mu, double[] observed) \n+    throws IllegalArgumentException {\n+        if ((observed == null) || (observed.length < 5)) {\n+            throw new IllegalArgumentException\n+                (\"insufficient data for t statistic\");\n+        }\n+        return t(StatUtils.mean(observed), mu, StatUtils.variance(observed), \n+            observed.length);\n+    }\n+    \n+    /**\n+     * @param mu constant value to compare sample mean against\n+     * @param sample array of sample data values\n+     * @param alpha significance level of the test\n+     * @return p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    public boolean tTest(double mu, double[] sample, double alpha)\n+        throws IllegalArgumentException {\n+        if ((alpha <= 0) || (alpha > 0.5)) {\n+           throw new IllegalArgumentException\n+                (\"bad significance level: \" + alpha);\n+        }   \n+        return (tTest(mu, sample) < alpha);\n+    }\n+                       \n+    /**\n+     * @param sample1 array of sample data values\n+     * @param sample2 array of sample data values\n+     * @return t-statistic\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    public double t(double[] sample1, double[] sample2) \n+        throws IllegalArgumentException {\n+        if ((sample1 == null) || (sample2 == null || \n+            Math.min(sample1.length, sample2.length) < 5)) {\n+            throw new IllegalArgumentException\n+                (\"insufficient data for t statistic\");\n+        }\n+        return t(StatUtils.mean(sample1), StatUtils.mean(sample2), \n+            StatUtils.variance(sample1), StatUtils.variance(sample2), \n+            (double) sample1.length, (double) sample2.length);\n+    }\n+    \n+    /**\n+     *\n+     * @param sample1 array of sample data values\n+     * @param sample2 array of sample data values\n+     * @return tTest p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    public double tTest(double[] sample1, double[] sample2)\n+        throws IllegalArgumentException  {\n+        if ((sample1 == null) || (sample2 == null ||\n+        Math.min(sample1.length, sample2.length) < 5)) {\n+            throw new IllegalArgumentException\n+            (\"insufficient data\");\n+        }\n+        return tTest(StatUtils.mean(sample1), StatUtils.mean(sample2), \n+            StatUtils.variance(sample1), StatUtils.variance(sample2), \n+            (double) sample1.length, (double) sample2.length);      \n+    }\n+    \n+    /**\n+     * @param sample1 array of sample data values\n+     * @param sample2 array of sample data values\n+     * @param alpha significance level\n+     * @return true if the null hypothesis can be rejected with \n+     * confidence 1 - alpha\n+     * @throws IllegalArgumentException if the preconditions are not met\n+     */\n+    public boolean tTest(double[] sample1, double[] sample2, double alpha)\n+        throws IllegalArgumentException {\n+       if ((alpha <= 0) || (alpha > 0.5)) {\n+           throw new IllegalArgumentException\n+                (\"bad significance level: \" + alpha);\n+       }\n+       return (tTest(sample1, sample2) < alpha);\n+    }\n+    \n+    /**\n+     * @param mu constant value to compare sample mean against\n+     * @param sample array of sample data values\n+     * @return p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    public double tTest(double mu, double[] sample) \n+        throws IllegalArgumentException {\n+        if ((sample == null) || (sample.length < 5)) {\n+            throw new IllegalArgumentException\n+                (\"insufficient data for t statistic\");\n+        }\n+        return tTest(StatUtils.mean(sample), mu, StatUtils.variance(sample),\n+            sample.length);\n+    }\n+    \n+    /**\n+     * @param mu comparison constant\n+     * @param sampleStats Univariate holding sample summary statitstics\n+     * @return t statistic\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    public double t(double mu, Univariate sampleStats) \n+        throws IllegalArgumentException {\n+        if ((sampleStats == null) || (sampleStats.getN() < 5)) {\n+            throw new IllegalArgumentException\n+                (\"insufficient data for t statistic\");\n+        }\n+        return t(sampleStats.getMean(), mu, sampleStats.getVariance(), \n+            sampleStats.getN());\n+    }\n+    \n+    /**\n+     * @param sampleStats1 Univariate describing data from the first sample\n+     * @param sampleStats2 Univariate describing data from the second sample\n+     * @return t statistic\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    public double t(Univariate sampleStats1, Univariate sampleStats2) \n+        throws IllegalArgumentException {\n+        if ((sampleStats1 == null) || (sampleStats2 == null || \n+            Math.min(sampleStats1.getN(), sampleStats2.getN()) < 5)) {\n+            throw new IllegalArgumentException\n+                (\"insufficient data for t statistic\");\n+        }\n+        return t(sampleStats1.getMean(), sampleStats2.getMean(), \n+            sampleStats1.getVariance(), sampleStats2.getVariance(), \n+            (double) sampleStats1.getN(), (double) sampleStats2.getN());\n+    }\n+    \n+    /**\n+     * @param sampleStats1 Univariate describing data from the first sample\n+     * @param sampleStats2 Univariate describing data from the second sample\n+     * @return p-value for t-test\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    public double tTest(Univariate sampleStats1, Univariate sampleStats2)\n+        throws IllegalArgumentException {\n+        if ((sampleStats1 == null) || (sampleStats2 == null || \n+            Math.min(sampleStats1.getN(), sampleStats2.getN()) < 5)) {\n+            throw new IllegalArgumentException\n+                (\"insufficient data for t statistic\");\n+        }\n+         return tTest(sampleStats1.getMean(), sampleStats2.getMean(), \n+            sampleStats1.getVariance(), sampleStats2.getVariance(), \n+            (double) sampleStats1.getN(), (double) sampleStats2.getN());\n+    }\n+    \n+    /**\n+     * @param sampleStats1 Univariate describing sample data values\n+     * @param sampleStats2 Univariate describing sample data values\n+     * @param alpha significance level of the test\n+     * @return true if the null hypothesis can be rejected with \n+     * confidence 1 - alpha\n+     * @throws IllegalArgumentException if the preconditions are not met\n+     */\n+    public boolean tTest(Univariate sampleStats1, Univariate sampleStats2, \n+    double alpha) throws IllegalArgumentException {\n+        if ((alpha <= 0) || (alpha > 0.5)) {\n+            throw new IllegalArgumentException\n+                (\"bad significance level: \" + alpha);\n+        }\n+        return (tTest(sampleStats1, sampleStats2) < alpha);\n+    }\n+    \n+    /**\n+     * @param mu constant value to compare sample mean against\n+     * @param sampleStats Univariate describing sample data values\n+     * @param alpha significance level of the test\n+     * @return p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    public boolean tTest(double mu, Univariate sampleStats, double alpha)\n+        throws IllegalArgumentException {\n+        if ((alpha <= 0) || (alpha > 0.5)) {\n+           throw new IllegalArgumentException\n+                (\"bad significance level: \" + alpha);\n+        }   \n+        return (tTest(mu, sampleStats) < alpha);\n+    }\n+    \n+    /**\n+     * @param mu constant value to compare sample mean against\n+     * @param sampleStats Univariate describing sample data\n+     * @return p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    public double tTest(double mu, Univariate sampleStats)\n+        throws IllegalArgumentException {\n+        if ((sampleStats == null) || (sampleStats.getN() < 5)) {\n+            throw new IllegalArgumentException\n+                (\"insufficient data for t statistic\");\n+        }\n+        return tTest(sampleStats.getMean(), mu, sampleStats.getVariance(),\n+            sampleStats.getN());\n+    }\n+    \n+    //----------------------------------------------- Private methods \n+    \n+    /**\n+     * Computes approximate degrees of freedom for 2-sample t-test.\n+     * \n+     * @param v1 first sample variance\n+     * @param v2 second sample variance\n+     * @param n1 first sample n\n+     * @param n2 second sample n\n+     * @return approximate degrees of freedom\n+     */\n+    private double df(double v1, double v2, double n1, double n2) {\n+        return (((v1 / n1) + (v2 / n2)) * ((v1 / n1) + (v2 / n2))) /\n+            ((v1 * v1) / (n1 * n1 * (n1 - 1d)) + \n+                (v2 * v2) / (n2 * n2 * (n2 - 1d)));       \n+    }\n+    \n+     /**\n+     * Computes t test statistic for 2-sample t-test.\n+     * \n+     * @param m1 first sample mean\n+     * @param m2 second sample mean\n+     * @param v1 first sample variance\n+     * @param v2 second sample variance\n+     * @param n1 first sample n\n+     * @param n2 second sample n\n+     * @return t test statistic\n+     */\n+    private double t(double m1, double m2, double v1, double v2, double n1, \n+        double n2) {\n+        return (m1 - m2) / Math.sqrt((v1 / n1) + (v2 / n2));\n+    }\n+    \n+    /**\n+     * Computes t test statistic for 1-sample t-test.\n+     * \n+     * @param m sample mean\n+     * @param mu constant to test against\n+     * @param v sample variance\n+     * @param n sample n\n+     * @return t test statistic\n+     */\n+    private double t(double m, double mu, double v, double n) {\n+        return (m - mu) / Math.sqrt(v / n);\n+    }\n+    \n+    /**\n+     * Computes p-value for 2-sided, 2-sample t-test.\n+     * \n+     * @param m1 first sample mean\n+     * @param m2 second sample mean\n+     * @param v1 first sample variance\n+     * @param v2 second sample variance\n+     * @param n1 first sample n\n+     * @param n2 second sample n\n+     * @return p-value\n+     */\n+    private double tTest(double m1, double m2, double v1, double v2, double n1, \n+        double n2) {\n+        double t = Math.abs(t(m1, m2, v1, v2, n1, n2));\n+        TDistribution tDistribution = \n+            DistributionFactory.newInstance().createTDistribution\n+                (df(v1, v2, n1, n2));\n+        return 1.0 - tDistribution.cummulativeProbability(-t, t); \n+    }\n+    \n+    /**\n+     * Computes p-value for 2-sided, 1-sample t-test.\n+     * \n+     * @param m sample mean\n+     * @param mu constant to test against\n+     * @param v sample variance\n+     * @param n sample n\n+     * @return p-value\n+     */\n+    private double tTest(double m, double mu, double v, double n) {\n+    double t = Math.abs(t(m, mu, v, n)); \n+        TDistribution tDistribution = \n+            DistributionFactory.newInstance().createTDistribution\n+                (n - 1);\n+        return 1.0 - tDistribution.cummulativeProbability(-t, t);\n+    }          \n }\n--- a/src/test/org/apache/commons/math/stat/TestStatisticTest.java\n+++ b/src/test/org/apache/commons/math/stat/TestStatisticTest.java\n  * Test cases for the TestStatistic class.\n  *\n  * @author Phil Steitz\n- * @version $Revision: 1.1 $ $Date: 2003/06/21 23:00:39 $\n+ * @version $Revision: 1.2 $ $Date: 2003/06/25 01:35:46 $\n  */\n \n public final class TestStatisticTest extends TestCase {\n            ;\n        }\n        \n+       try {\n+           testStatistic.chiSquareTest(tooShortObs,tooShortEx);\n+           fail(\"arguments too short, IllegalArgumentException expected\");\n+       } catch (IllegalArgumentException ex) {\n+           ;\n+       }\n+       \n        double[] unMatchedObs = {0,1,2,3};\n        double[] unMatchedEx = {1,1,2};\n        try {\n            testStatistic.chiSquare(unMatchedEx,unMatchedObs);\n-           fail(\"arrays have different lengths, IllegalArgumentException expected\");\n+           fail(\"arrays have different lengths,\" + \n+                \" IllegalArgumentException expected\");\n+       } catch (IllegalArgumentException ex) {\n+           ;\n+       }       \n+       expected[0] = 0;\n+       try {\n+           testStatistic.chiSquareTest(expected, observed, .01);\n+           fail(\"bad expected count, IllegalArgumentException expected\");\n+       } catch (IllegalArgumentException ex) {\n+           ;\n+       }     \n+       /** from http://www.vsenvirginia.org/stat/classpractice/Voter_Preferences_CP.pdf */\n+       double[] observed1 = {504, 523, 72, 70, 31};\n+       double[] expected1 = {480, 540, 84, 60, 36};\n+       assertEquals(\"chi-square test statistic\", 5.81,\n+            testStatistic.chiSquare(expected1,observed1),10E-2);\n+       assertEquals(\"chi-square p-value\", 0.21, \n+        testStatistic.chiSquareTest(expected1, observed1),10E-2); \n+       assertTrue(\"chi-square test reject\", \n+        testStatistic.chiSquareTest(expected1, observed1, 0.3));\n+       assertTrue(\"chi-square test accept\", \n+        !testStatistic.chiSquareTest(expected1, observed1, 0.1));  \n+       try {\n+           testStatistic.chiSquareTest(expected1, observed1, 95);\n+           fail(\"alpha out of range, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }\n-       \n-       expected[0] = 0;\n-       assertEquals(\"chi-square statistic\", Double.POSITIVE_INFINITY,\n-            testStatistic.chiSquare(expected,observed),Double.MIN_VALUE);\n     }\n        \n     public void testT(){\n-\t\tdouble[] observed = {93.0, 103.0, 95.0, 101.0, 91.0, 105.0, 96.0,\n+\tdouble[] observed = {93.0, 103.0, 95.0, 101.0, 91.0, 105.0, 96.0,\n             94.0, 101.0, 88.0, 98.0, 94.0, 101.0, 92.0, 95.0};\n         double mu = 100.0;\n+        Univariate sampleStats = new UnivariateImpl();\n+        for (int i = 0; i < observed.length; i++) {\n+            sampleStats.addValue(observed[i]);\n+        }\n+        \n         assertEquals(\"t statistic\", -2.82, testStatistic.t(mu, observed),\n             10E-3);\n+        assertEquals(\"t statistic\", -2.82, testStatistic.t(mu, sampleStats),\n+            10E-3);\n         \n         double[] nullObserved = null;\n         try {\n             ;\n         }\n         \n+        UnivariateImpl nullStats = null;\n+        try {\n+            testStatistic.t(mu, nullStats);\n+            fail(\"arguments too short, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        \n         double[] emptyObs = {};\n         try {\n             testStatistic.t(mu, emptyObs);\n             ;\n         }\n         \n+        Univariate emptyStats = new UnivariateImpl();\n+        try {\n+            testStatistic.t(mu, emptyStats);\n+            fail(\"arguments too short, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        \n         double[] tooShortObs = {1.0};\n         try {\n             testStatistic.t(mu, tooShortObs);\n         } catch (IllegalArgumentException ex) {\n             ;\n         }\n+        try {\n+            testStatistic.tTest(mu, tooShortObs);\n+            fail(\"arguments too short, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        \n+        Univariate tooShortStats = new UnivariateImpl();\n+        tooShortStats.addValue(0d);\n+        tooShortStats.addValue(2d);\n+        try {\n+            testStatistic.t(mu, tooShortStats);\n+            fail(\"arguments too short, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            testStatistic.tTest(mu, tooShortStats);\n+            fail(\"arguments too short, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+            \n+        /** Moore and McCabe Example 8.3, p 516 */\n+        double[] oneSidedP = {2d, 0d, 6d, 6d, 3d, 3d, 2d, 3d, -6d, 6d, 6d, \n+            6d, 3d, 0d, 1d, 1d, 0d, 2d, 3d, 3d};\n+        Univariate oneSidedPStats = new UnivariateImpl();\n+        for (int i = 0; i < oneSidedP.length; i++) {\n+            oneSidedPStats.addValue(oneSidedP[i]);\n+        }\n+        assertEquals(\"one sample t stat\",3.86,\n+            testStatistic.t(0d,oneSidedP),0.01);\n+        assertEquals(\"one sample t stat\",3.86,\n+            testStatistic.t(0d,oneSidedPStats),0.01);\n+        assertEquals(\"one sample p value\",0.00052,\n+            testStatistic.tTest(0d,oneSidedP)/2d,10E-5);\n+        assertEquals(\"one sample p value\",0.00052,\n+            testStatistic.tTest(0d,oneSidedPStats)/2d,10E-5);\n+        assertTrue(\"one sample t-test reject\",\n+            testStatistic.tTest(0d,oneSidedP,0.01));\n+        assertTrue(\"one sample t-test reject\",\n+            testStatistic.tTest(0d,oneSidedPStats,0.01));\n+        assertTrue(\"one sample t-test accept\",\n+            !testStatistic.tTest(0d,oneSidedP,0.0001));\n+        assertTrue(\"one sample t-test accept\",\n+            !testStatistic.tTest(0d,oneSidedPStats,0.0001));\n+        try {\n+           testStatistic.tTest(0d,oneSidedP, 95);\n+           fail(\"alpha out of range, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+           ;\n+        }\n+        try {\n+           testStatistic.tTest(0d,oneSidedPStats, 95);\n+           fail(\"alpha out of range, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+           ;\n+        }   \n+        \n+        /** Moore and McCabe Example 8.12, p 552 */\n+        double[] sample1 = {7d, -4d, 18d, 17d, -3d, -5d, 1d, 10d, 11d, -2d};\n+        double[] sample2 = {-1d, 12d, -1d, -3d, 3d, -5d, 5d, 2d, -11d, -1d, -3d};\n+        Univariate sampleStats1 = new UnivariateImpl();\n+        for (int i = 0; i < sample1.length; i++) {\n+            sampleStats1.addValue(sample1[i]);\n+        }\n+        Univariate sampleStats2 = new UnivariateImpl();\n+        for (int i = 0; i < sample2.length; i++) {\n+            sampleStats2.addValue(sample2[i]);\n+        }\n+        //FIXME: textbook example reported t stat uses pooled variance\n+        // should replace with R-verified example\n+        assertEquals(\"two sample t stat\",1.634,\n+            testStatistic.t(sample1, sample2), 0.1); \n+        assertEquals(\"two sample t stat\",1.634,\n+            testStatistic.t(sampleStats1, sampleStats2), 0.1); \n+        // This test is OK, since book reports non-pooled exact p-value\n+        assertEquals(\"two sample p value\",0.059, \n+            testStatistic.tTest(sample1, sample2)/2d, 10E-3);\n+        assertEquals(\"two sample p value\",0.059, \n+            testStatistic.tTest(sampleStats1, sampleStats2)/2d, 10E-3);\n+        assertTrue(\"two sample t-test reject\",\n+            testStatistic.tTest(sample1, sample2, 0.2));\n+        assertTrue(\"two sample t-test reject\",\n+            testStatistic.tTest(sampleStats1, sampleStats2, 0.2));\n+        assertTrue(\"two sample t-test accept\",\n+            !testStatistic.tTest(sample1, sample2,0.1));  \n+        assertTrue(\"two sample t-test accept\",\n+            !testStatistic.tTest(sampleStats1, sampleStats2,0.1));  \n+        try {\n+           testStatistic.tTest(sample1, sample2, 95);\n+           fail(\"alpha out of range, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+           ;\n+        }\n+        try {\n+           testStatistic.tTest(sampleStats1, sampleStats2, 95);\n+           fail(\"alpha out of range, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+           ;\n+        }\n+        try {\n+           testStatistic.tTest(sample1, tooShortObs, .01);\n+           fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+           ;\n+        }\n+        try {\n+           testStatistic.tTest(sampleStats1, tooShortStats, .01);\n+           fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+           ;\n+        }\n+        try {\n+           testStatistic.tTest(sample1, tooShortObs);\n+           fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+           ;\n+        }\n+        try {\n+           testStatistic.tTest(sampleStats1, tooShortStats);\n+           fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+           ;\n+        }\n+        try {\n+           testStatistic.t(sample1, tooShortObs);\n+           fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+           ;\n+        }\n+        try {\n+           testStatistic.t(sampleStats1, tooShortStats);\n+           fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+           ;\n+        }\n     }\n }\n ", "timestamp": 1056504946, "metainfo": ""}