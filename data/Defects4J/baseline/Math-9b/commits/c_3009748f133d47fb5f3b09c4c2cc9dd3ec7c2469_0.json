{"sha": "3009748f133d47fb5f3b09c4c2cc9dd3ec7c2469", "log": "Formatting only. Eliminated tabs.  ", "commit": "\n--- a/src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java\n+++ b/src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java\n    * @param alpha3 angle of the third elementary rotation\n    */\n   public static Rotation computeRotation(RotationOrder order,\n-\t\t                                 double alpha1,\n-\t\t                                 double alpha2,\n-\t\t                                 double alpha3) {\n+                                         double alpha1,\n+                                         double alpha2,\n+                                         double alpha3) {\n     if (order == RotationOrder.XYZ) {\n       return compose(new Rotation(Vector3D.plusI, alpha1),\n                      new Rotation(Vector3D.plusJ, alpha2),\n--- a/src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java\n+++ b/src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java\n    * @exception ArithmeticException if the norm of the instance is null\n    */\n   public static Vector3D normalize(Vector3D v) {\n-\tdouble norm = v.getNorm();\n-\tif (norm == 0) {\n+    double norm = v.getNorm();\n+    if (norm == 0) {\n       throw new ArithmeticException(\"null norm\");\n-\t}\n-\tdouble inv = 1.0 / norm;\n-\treturn new Vector3D(inv * v.x, inv * v.y, inv * v.z);\n+    }\n+    double inv = 1.0 / norm;\n+    return new Vector3D(inv * v.x, inv * v.y, inv * v.z);\n   }\n \n   /** Add two vectors.\n--- a/src/test/org/apache/commons/math/fraction/FractionFormatTest.java\n+++ b/src/test/org/apache/commons/math/fraction/FractionFormatTest.java\n     }\n     \n     public void testParseInteger() {\n-\t\tString source = \"10\";\n-    \ttry {\n+        String source = \"10\";\n+        try {\n             Fraction c = properFormat.parse(source);\n             assertNotNull(c);\n             assertEquals(10, c.getNumerator());\n         } catch (ParseException ex) {\n             fail(ex.getMessage());\n         }\n-    \ttry {\n+        try {\n             Fraction c = improperFormat.parse(source);\n             assertNotNull(c);\n             assertEquals(10, c.getNumerator());\n     }\n     \n     public void testParseInvalid() {\n-\t\tString source = \"a\";\n+        String source = \"a\";\n         String msg = \"should not be able to parse '10 / a'.\";\n-    \ttry {\n+        try {\n             properFormat.parse(source);\n-\t\t\tfail(msg);\n-        } catch (ParseException ex) {\n-        \t// success\n-        }\n-    \ttry {\n-            improperFormat.parse(source);\n-\t\t\tfail(msg);\n-        } catch (ParseException ex) {\n-        \t// success\n+            fail(msg);\n+        } catch (ParseException ex) {\n+            // success\n+        }\n+        try {\n+            improperFormat.parse(source);\n+            fail(msg);\n+        } catch (ParseException ex) {\n+            // success\n         }\n     }\n     \n     public void testParseInvalidDenominator() {\n-\t\tString source = \"10 / a\";\n+        String source = \"10 / a\";\n         String msg = \"should not be able to parse '10 / a'.\";\n-    \ttry {\n+        try {\n             properFormat.parse(source);\n-\t\t\tfail(msg);\n-        } catch (ParseException ex) {\n-        \t// success\n-        }\n-    \ttry {\n-            improperFormat.parse(source);\n-\t\t\tfail(msg);\n-        } catch (ParseException ex) {\n-        \t// success\n+            fail(msg);\n+        } catch (ParseException ex) {\n+            // success\n+        }\n+        try {\n+            improperFormat.parse(source);\n+            fail(msg);\n+        } catch (ParseException ex) {\n+            // success\n         }\n     }\n     \n     }\n     \n     public void testNumeratorFormat() {\n-    \tNumberFormat old = properFormat.getNumeratorFormat();\n+        NumberFormat old = properFormat.getNumeratorFormat();\n         NumberFormat nf = NumberFormat.getInstance();\n         nf.setParseIntegerOnly(true);\n-    \tproperFormat.setNumeratorFormat(nf);\n-    \tassertEquals(nf, properFormat.getNumeratorFormat());\n-    \tproperFormat.setNumeratorFormat(old);\n-\n-    \told = improperFormat.getNumeratorFormat();\n+        properFormat.setNumeratorFormat(nf);\n+        assertEquals(nf, properFormat.getNumeratorFormat());\n+        properFormat.setNumeratorFormat(old);\n+\n+        old = improperFormat.getNumeratorFormat();\n         nf = NumberFormat.getInstance();\n         nf.setParseIntegerOnly(true);\n-    \timproperFormat.setNumeratorFormat(nf);\n-    \tassertEquals(nf, improperFormat.getNumeratorFormat());\n-    \timproperFormat.setNumeratorFormat(old);\n+        improperFormat.setNumeratorFormat(nf);\n+        assertEquals(nf, improperFormat.getNumeratorFormat());\n+        improperFormat.setNumeratorFormat(old);\n     }\n     \n     public void testDenominatorFormat() {\n-    \tNumberFormat old = properFormat.getDenominatorFormat();\n+        NumberFormat old = properFormat.getDenominatorFormat();\n         NumberFormat nf = NumberFormat.getInstance();\n         nf.setParseIntegerOnly(true);\n-    \tproperFormat.setDenominatorFormat(nf);\n-    \tassertEquals(nf, properFormat.getDenominatorFormat());\n-    \tproperFormat.setDenominatorFormat(old);\n-\n-    \told = improperFormat.getDenominatorFormat();\n+        properFormat.setDenominatorFormat(nf);\n+        assertEquals(nf, properFormat.getDenominatorFormat());\n+        properFormat.setDenominatorFormat(old);\n+\n+        old = improperFormat.getDenominatorFormat();\n         nf = NumberFormat.getInstance();\n         nf.setParseIntegerOnly(true);\n-    \timproperFormat.setDenominatorFormat(nf);\n-    \tassertEquals(nf, improperFormat.getDenominatorFormat());\n-    \timproperFormat.setDenominatorFormat(old);\n+        improperFormat.setDenominatorFormat(nf);\n+        assertEquals(nf, improperFormat.getDenominatorFormat());\n+        improperFormat.setDenominatorFormat(old);\n     }\n     \n     public void testWholeFormat() {\n-    \tProperFractionFormat format = (ProperFractionFormat)properFormat;\n-    \t\n-    \tNumberFormat old = format.getWholeFormat();\n+        ProperFractionFormat format = (ProperFractionFormat)properFormat;\n+        \n+        NumberFormat old = format.getWholeFormat();\n         NumberFormat nf = NumberFormat.getInstance();\n         nf.setParseIntegerOnly(true);\n-    \tformat.setWholeFormat(nf);\n-    \tassertEquals(nf, format.getWholeFormat());\n-    \tformat.setWholeFormat(old);\n+        format.setWholeFormat(nf);\n+        assertEquals(nf, format.getWholeFormat());\n+        format.setWholeFormat(old);\n     }\n }", "timestamp": 1164473016, "metainfo": ""}