{"sha": "03a43587a64873693855606fff17ad8ad3e99699", "log": "fix for wrong results and stack overflow error from BivariateRegression PR: http://nagoya.apache.org/bugzilla/show_bug.cgi?id=24747 Obtained from: Submitted by:\tSergei Skarupo, Brent Worden  Reviewed by:\tMark Diggory   ", "commit": "\n--- a/src/java/org/apache/commons/math/special/Beta.java\n+++ b/src/java/org/apache/commons/math/special/Beta.java\n  * This is a utility class that provides computation methods related to the\n  * Beta family of functions.\n  * \n- * @version $Revision: 1.12 $ $Date: 2003/11/14 22:22:17 $\n+ * @version $Revision: 1.13 $ $Date: 2003/11/18 15:07:12 $\n  */\n public class Beta {\n     /** Maximum allowed numerical error. */\n         double ret;\n \n         if (Double.isNaN(x) || Double.isNaN(a) || Double.isNaN(b) || (x < 0) ||\n-            (x > 1) || (a <= 0.0) || (b <= 0.0)) {\n+            (x > 1) || (a <= 0.0) || (b <= 0.0))\n+        {\n             ret = Double.NaN;\n+        } else if (x > (a + 1.0) / (a + b + 1.0)) {\n+            ret = 1.0 - regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);\n         } else {\n             ContinuedFraction fraction = new ContinuedFraction() {\n                 protected double getB(int n, double x) {\n--- a/src/java/org/apache/commons/math/stat/BivariateRegression.java\n+++ b/src/java/org/apache/commons/math/stat/BivariateRegression.java\n  * the necessary computations to return the requested statistic.</li>\n  * </ul>\n  *\n- * @version $Revision: 1.9 $ $Date: 2003/11/15 16:01:38 $\n+ * @version $Revision: 1.10 $ $Date: 2003/11/18 15:07:12 $\n  */\n public class BivariateRegression {\n     \n             xbar = x;\n             ybar = y;\n         } else {\n-            sumXX += ((double) n / (double) (n + 1)) * (x - xbar) * (x - xbar);\n-            sumYY += ((double) n / (double) (n + 1)) * (y - ybar) * (y - ybar);\n-            sumXY += ((double) n / (double) (n + 1)) * (x - xbar) * (y - ybar);\n-            xbar += (1d / (double) (n + 1)) * (x - xbar);\n-            ybar += (1d / (double) (n + 1)) * (y - ybar);\n+            double dx = x - xbar;\n+            double dy = y - ybar;\n+            sumXX += dx * dx * (double) n / (double) (n + 1.0);\n+            sumYY += dy * dy * (double) n / (double) (n + 1.0);\n+            sumXY += dx * dy * (double) n / (double) (n + 1.0);\n+            xbar += dx / (double) (n + 1.0);\n+            ybar += dy / (double) (n + 1.0);\n         }\n         sumX += x;\n         sumY += y;\n--- a/src/test/org/apache/commons/math/stat/BivariateRegressionTest.java\n+++ b/src/test/org/apache/commons/math/stat/BivariateRegressionTest.java\n  */\n package org.apache.commons.math.stat;\n \n+import java.util.Random;\n+\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n /**\n  * Test cases for the TestStatistic class.\n  *\n- * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:18 $\n+ * @version $Revision: 1.9 $ $Date: 2003/11/18 15:07:12 $\n  */\n \n public final class BivariateRegressionTest extends TestCase {\n            ;\n        }\n        \n-    }                                        \n+    }\n+    \n+    public void testPerfect() {\n+        BivariateRegression regression = new BivariateRegression();\n+        int n = 100;\n+        for (int i = 0; i < n; i++) {\n+            regression.addData(((double) i) / (n - 1), i);\n+        }\n+        assertEquals(0.0, regression.getSignificance(), 1.0e-5);\n+        assertTrue(regression.getSlope() > 0.0);\n+    }\n+    \n+    public void testPerfectNegative() {\n+        BivariateRegression regression = new BivariateRegression();\n+        int n = 100;\n+        for (int i = 0; i < n; i++) {\n+            regression.addData(-((double) i) / (n - 1), i);\n+        }\n+        assertEquals(0.0, regression.getSignificance(), 1.0e-5);\n+        assertTrue(regression.getSlope() < 0.0);\n+    }\n+    \n+    public void testRandom() {\n+        BivariateRegression regression = new BivariateRegression();\n+        Random random = new Random(1);\n+        int n = 100;\n+        for (int i = 0; i < n; i++) {\n+            regression.addData(((double) i) / (n - 1), random.nextDouble());\n+        }\n+        assertTrue(0.0 < regression.getSignificance() && regression.getSignificance() < 1.0);\n+    }\n }\n-", "timestamp": 1069168032, "metainfo": ""}