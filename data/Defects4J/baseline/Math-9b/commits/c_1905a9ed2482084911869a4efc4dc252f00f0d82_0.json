{"sha": "1905a9ed2482084911869a4efc4dc252f00f0d82", "log": "MATH-511 Implement \"DifferentiableUnivariateRealFunction\".   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\n package org.apache.commons.math.analysis.function;\n \n import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n import org.apache.commons.math.util.FastMath;\n \n  * @version $Revision$ $Date$\n  * @since 3.0\n  */\n-public class Gaussian implements UnivariateRealFunction {\n+public class Gaussian implements DifferentiableUnivariateRealFunction {\n     /** Mean. */\n     private final double mean;\n     /** Inverse of twice the square of the standard deviation. */\n         final double diff = x - mean;\n         return norm * FastMath.exp(-diff * diff * i2s2);\n     }\n+\n+    /** {@inheritDoc} */\n+    public UnivariateRealFunction derivative() {\n+        return new UnivariateRealFunction() {\n+            /** {@inheritDoc} */\n+            public double value(double x) {\n+                final double diff = x - mean;\n+                final double g = Gaussian.this.value(x);\n+\n+                if (g == 0) {\n+                    // Avoid returning NaN in case of overflow.\n+                    return 0;\n+                } else {\n+                    return -2 * diff * i2s2 * g;\n+                }\n+            }\n+        };\n+    }\n }\n--- a/src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java\n     public void testSomeValues() {\n         final UnivariateRealFunction f = new Gaussian();\n \n+        Assert.assertEquals(1 / FastMath.sqrt(2 * Math.PI), f.value(0), EPS);\n+    }\n+\n+    @Test\n+    public void testLargeArguments() {\n+        final UnivariateRealFunction f = new Gaussian();\n+\n         Assert.assertEquals(0, f.value(Double.NEGATIVE_INFINITY), 0);\n-        Assert.assertEquals(1 / FastMath.sqrt(2 * Math.PI), f.value(0), EPS);\n+        Assert.assertEquals(0, f.value(-Double.MAX_VALUE), 0);\n+        Assert.assertEquals(0, f.value(-1e2), 0);\n+        Assert.assertEquals(0, f.value(1e2), 0);\n+        Assert.assertEquals(0, f.value(Double.MAX_VALUE), 0);\n         Assert.assertEquals(0, f.value(Double.POSITIVE_INFINITY), 0);\n     }\n+\n+    @Test\n+    public void testDerivative() {\n+        final Gaussian f = new Gaussian();\n+        final UnivariateRealFunction dfdx = f.derivative();\n+\n+        Assert.assertEquals(0, dfdx.value(0), 0);\n+    }\n+\n+    @Test\n+    public void testDerivativeLargeArguments() {\n+        final Gaussian f = new Gaussian(0, 1e-50);\n+        final UnivariateRealFunction dfdx = f.derivative();\n+\n+        Assert.assertEquals(0, dfdx.value(Double.NEGATIVE_INFINITY), 0);\n+        Assert.assertEquals(0, dfdx.value(-Double.MAX_VALUE), 0);\n+        Assert.assertEquals(0, f.value(-1e50), 0);\n+        Assert.assertEquals(0, f.value(-1e2), 0);\n+        Assert.assertEquals(0, f.value(1e2), 0);\n+        Assert.assertEquals(0, f.value(1e50), 0);\n+        Assert.assertEquals(0, dfdx.value(Double.MAX_VALUE), 0);\n+        Assert.assertEquals(0, dfdx.value(Double.POSITIVE_INFINITY), 0);        \n+    }\n+\n+    @Test\n+    public void testDerivativeNaN() {\n+        final Gaussian f = new Gaussian(0, 1e-50);\n+        final UnivariateRealFunction dfdx = f.derivative();\n+\n+        Assert.assertTrue(Double.isNaN(dfdx.value(Double.NaN)));\n+    }\n }", "timestamp": 1297727650, "metainfo": ""}