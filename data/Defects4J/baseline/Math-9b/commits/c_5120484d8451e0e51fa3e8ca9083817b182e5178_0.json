{"sha": "5120484d8451e0e51fa3e8ca9083817b182e5178", "log": "Restored specificity in exception error messages.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n import org.apache.commons.math.exception.NotPositiveException;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n import org.apache.commons.math.exception.NullArgumentException;\n-import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MathIllegalArgumentException;\n      */\n     private void checkArray(long[][] in) {\n         if (in.length < 2) {\n-            throw new NumberIsTooSmallException(in.length, 2, true);\n+            throw new MathIllegalArgumentException(\n+                    LocalizedFormats.INSUFFICIENT_DIMENSION, in.length, 2);\n         }\n \n         if (in[0].length < 2) {\n-            throw new NumberIsTooSmallException(in[0].length, 2, true);\n+            throw new MathIllegalArgumentException(\n+                    LocalizedFormats.INSUFFICIENT_DIMENSION, in[0].length, 2);\n         }\n \n         checkRectangular(in);\n     }\n \n     /**\n-     * Check all entries of the input array are strictly postive.\n+     * Check all entries of the input array are strictly positive.\n      *\n      * @param in Array to be tested.\n      * @exception NotStrictlyPositiveException if one entry is not positive.\n     private void checkPositive(double[] in) {\n         for (int i = 0; i < in.length; i++) {\n             if (in[i] <= 0) {\n-                throw new NotStrictlyPositiveException(in[i]);\n+                throw new MathIllegalArgumentException(\n+                        LocalizedFormats.NOT_POSITIVE_ELEMENT_AT_INDEX,\n+                        i, in[i]);\n             }\n         }\n     }\n     private void checkNonNegative(long[] in) {\n         for (int i = 0; i < in.length; i++) {\n             if (in[i] < 0) {\n-                throw new NotPositiveException(in[i]);\n+                throw new MathIllegalArgumentException(\n+                        LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,\n+                        i, in[i]);\n             }\n         }\n     }\n         for (int i = 0; i < in.length; i ++) {\n             for (int j = 0; j < in[i].length; j++) {\n                 if (in[i][j] < 0) {\n-                    throw new NotPositiveException(in[i][j]);\n+                    throw new MathIllegalArgumentException(\n+                            LocalizedFormats.NEGATIVE_ELEMENT_AT_2D_INDEX,\n+                            i, j, in[i][j]);\n                 }\n             }\n         }", "timestamp": 1307894252, "metainfo": ""}