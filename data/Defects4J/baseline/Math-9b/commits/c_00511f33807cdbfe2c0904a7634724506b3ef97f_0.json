{"sha": "00511f33807cdbfe2c0904a7634724506b3ef97f", "log": "Formatting only. Eliminated tabs.   ", "commit": "\n--- a/src/java/org/apache/commons/math/util/DefaultTransformer.java\n+++ b/src/java/org/apache/commons/math/util/DefaultTransformer.java\n  * into a primitive double or to turn a String representation of a Number into \n  * a double.\n  * \n- * @version $Revision: 1.14 $ $Date: 2004/06/01 21:35:13 $\n+ * @version $Revision: 1.15 $ $Date: 2004/06/18 04:59:06 $\n  */\n public class DefaultTransformer implements NumberTransformer, Serializable {\n     \n      */\n     public double transform(Object o) throws MathException{\n \n-\t\tif (o == null) {\n-\t\t\tthrow new MathException(\"Conversion Exception in Transformation, Object is null\");\n-\t\t}\n+        if (o == null) {\n+            throw new MathException(\"Conversion Exception in Transformation, Object is null\");\n+        }\n \n-\t\tif (o instanceof Number) {\n-\t\t\treturn ((Number)o).doubleValue();\n-\t\t}\n+        if (o instanceof Number) {\n+            return ((Number)o).doubleValue();\n+        }\n             \n-\t\ttry {\n-\t\t\treturn new Double(o.toString()).doubleValue();\n-\t\t} catch (Exception e) {\n-\t\t\tthrow new MathException(\"Conversion Exception in Transformation: \" + e.getMessage(), e);\n-\t\t}\n+        try {\n+            return new Double(o.toString()).doubleValue();\n+        } catch (Exception e) {\n+            throw new MathException(\"Conversion Exception in Transformation: \" + e.getMessage(), e);\n+        }\n     }\n }\n--- a/src/java/org/apache/commons/math/util/TransformerMap.java\n+++ b/src/java/org/apache/commons/math/util/TransformerMap.java\n  * It provides a means to set NumberTransformers that will be selected \n  * based on the Class of the object handed to the Maps\n  * <code>double transform(Object o)</code> method.\n- * @version $Revision: 1.13 $ $Date: 2004/06/01 21:35:13 $\n+ * @version $Revision: 1.14 $ $Date: 2004/06/18 04:59:06 $\n  */\n public class TransformerMap implements NumberTransformer, Serializable {\n \n     /** Serializable version identifier */\n     static final long serialVersionUID = -942772950698439883L;\n     \n-\t/**\n-\t * A default Number Transformer for Numbers and numeric Strings.\n-\t */\n-\tprivate NumberTransformer defaultTransformer = null;\n+    /**\n+     * A default Number Transformer for Numbers and numeric Strings.\n+     */\n+    private NumberTransformer defaultTransformer = null;\n \n-\t/**\n-\t * The internal Map.\n-\t */\n-\tprivate Map map = null;\n+    /**\n+     * The internal Map.\n+     */\n+    private Map map = null;\n \n-\t/**\n-\t * \n-\t */\n-\tpublic TransformerMap() {\n-\t\tmap = new HashMap();\n-\t\tdefaultTransformer = new DefaultTransformer();\n-\t}\n+    /**\n+     * \n+     */\n+    public TransformerMap() {\n+        map = new HashMap();\n+        defaultTransformer = new DefaultTransformer();\n+    }\n \n-\t/**\n-\t * Tests if a Class is present in the TransformerMap.\n-\t * @param key Class to check\n-\t * @return true|false\n-\t */\n-\tpublic boolean containsClass(Class key) {\n-\t\treturn map.containsKey(key);\n-\t}\n+    /**\n+     * Tests if a Class is present in the TransformerMap.\n+     * @param key Class to check\n+     * @return true|false\n+     */\n+    public boolean containsClass(Class key) {\n+        return map.containsKey(key);\n+    }\n \n-\t/**\n-\t * Tests if a NumberTransformer is present in the TransformerMap.\n-\t * @param value NumberTransformer to check\n-\t * @return true|false\n-\t */\n-\tpublic boolean containsTransformer(NumberTransformer value) {\n-\t\treturn map.containsValue(value);\n-\t}\n+    /**\n+     * Tests if a NumberTransformer is present in the TransformerMap.\n+     * @param value NumberTransformer to check\n+     * @return true|false\n+     */\n+    public boolean containsTransformer(NumberTransformer value) {\n+        return map.containsValue(value);\n+    }\n \n-\t/**\n-\t * Returns the Transformer that is mapped to a class\n-\t * if mapping is not present, this returns null.\n-\t * @param key The Class of the object\n-\t * @return the mapped NumberTransformer or null.\n-\t */\n-\tpublic NumberTransformer getTransformer(Class key) {\n-\t\treturn (NumberTransformer) map.get(key);\n-\t}\n+    /**\n+     * Returns the Transformer that is mapped to a class\n+     * if mapping is not present, this returns null.\n+     * @param key The Class of the object\n+     * @return the mapped NumberTransformer or null.\n+     */\n+    public NumberTransformer getTransformer(Class key) {\n+        return (NumberTransformer) map.get(key);\n+    }\n \n-\t/**\n-\t * Sets a Class to Transformer Mapping in the Map. If\n-\t * the Class is already present, this overwrites that\n-\t * mapping.\n-\t * @param key The Class\n-\t * @param transformer The NumberTransformer\n-\t * @return the replaced transformer if one is present\n-\t */\n-\tpublic Object putTransformer(Class key, NumberTransformer transformer) {\n-\t\treturn map.put(key, transformer);\n-\t}\n+    /**\n+     * Sets a Class to Transformer Mapping in the Map. If\n+     * the Class is already present, this overwrites that\n+     * mapping.\n+     * @param key The Class\n+     * @param transformer The NumberTransformer\n+     * @return the replaced transformer if one is present\n+     */\n+    public Object putTransformer(Class key, NumberTransformer transformer) {\n+        return map.put(key, transformer);\n+    }\n \n-\t/**\n-\t * Removes a Class to Transformer Mapping in the Map.\n-\t * @param key The Class\n-\t * @return the removed transformer if one is present or\n-\t * null if none was present.\n-\t */\n-\tpublic Object removeTransformer(Class key) {\n-\t\treturn map.remove(key);\n-\t}\n+    /**\n+     * Removes a Class to Transformer Mapping in the Map.\n+     * @param key The Class\n+     * @return the removed transformer if one is present or\n+     * null if none was present.\n+     */\n+    public Object removeTransformer(Class key) {\n+        return map.remove(key);\n+    }\n \n-\t/**\n-\t * Clears all the Class to Transformer mappings.\n-\t */\n-\tpublic void clear() {\n-\t\tmap.clear();\n-\t}\n+    /**\n+     * Clears all the Class to Transformer mappings.\n+     */\n+    public void clear() {\n+        map.clear();\n+    }\n \n-\t/**\n-\t * Returns the Set of Classes used as keys in the map.\n-\t * @return Set of Classes\n-\t */\n-\tpublic Set classes() {\n-\t\treturn map.keySet();\n-\t}\n+    /**\n+     * Returns the Set of Classes used as keys in the map.\n+     * @return Set of Classes\n+     */\n+    public Set classes() {\n+        return map.keySet();\n+    }\n \n-\t/**\n-\t * Returns the Set of NumberTransformers used as values \n-\t * in the map.\n-\t * @return Set of NumberTransformers\n-\t */\n-\tpublic Collection transformers() {\n-\t\treturn map.values();\n-\t}\n+    /**\n+     * Returns the Set of NumberTransformers used as values \n+     * in the map.\n+     * @return Set of NumberTransformers\n+     */\n+    public Collection transformers() {\n+        return map.values();\n+    }\n \n-\t/**\n-\t * Attempts to transform the Object against the map of\n-\t * NumberTransformers. Otherwise it returns Double.NaN.\n-\t * \n-\t * @see org.apache.commons.math.util.NumberTransformer#transform(java.lang.Object)\n-\t */\n-\tpublic double transform(Object o) throws MathException {\n-\t\tdouble value = Double.NaN;\n+    /**\n+     * Attempts to transform the Object against the map of\n+     * NumberTransformers. Otherwise it returns Double.NaN.\n+     * \n+     * @see org.apache.commons.math.util.NumberTransformer#transform(java.lang.Object)\n+     */\n+    public double transform(Object o) throws MathException {\n+        double value = Double.NaN;\n \n-\t\tif (o instanceof Number || o instanceof String) {\n-\t\t\tvalue = defaultTransformer.transform(o);\n-\t\t} else {\n-\t\t\tNumberTransformer trans = getTransformer(o.getClass());\n-\t\t\tif (trans != null) {\n-\t\t\t\tvalue = trans.transform(o);\n-\t\t\t}\n-\t\t}\n+        if (o instanceof Number || o instanceof String) {\n+            value = defaultTransformer.transform(o);\n+        } else {\n+            NumberTransformer trans = getTransformer(o.getClass());\n+            if (trans != null) {\n+                value = trans.transform(o);\n+            }\n+        }\n \n-\t\treturn value;\n-\t}\n+        return value;\n+    }\n \n }", "timestamp": 1087534746, "metainfo": ""}