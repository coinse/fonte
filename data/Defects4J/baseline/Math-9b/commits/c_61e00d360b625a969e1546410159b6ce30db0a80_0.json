{"sha": "61e00d360b625a969e1546410159b6ce30db0a80", "log": "Changed parameters name for consistency with getters and DSCompiler.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java\n     }\n \n     /** Build an instance with all values and derivatives set to 0.\n-     * @param variables number of variables\n+     * @param parameters number of free parameters\n      * @param order derivation order\n      */\n-    public DerivativeStructure(final int variables, final int order) {\n-        this(DSCompiler.getCompiler(variables, order));\n+    public DerivativeStructure(final int parameters, final int order) {\n+        this(DSCompiler.getCompiler(parameters, order));\n     }\n \n     /** Build an instance representing a constant value.\n-     * @param variables number of variables\n+     * @param parameters number of free parameters\n+     * @param parameters number of variables\n      * @param order derivation order\n      * @param value value of the constant\n      * @see #DerivativeStructure(int, int, int, double)\n      */\n-    public DerivativeStructure(final int variables, final int order, final double value) {\n-        this(variables, order);\n+    public DerivativeStructure(final int parameters, final int order, final double value) {\n+        this(parameters, order);\n         this.data[0] = value;\n     }\n \n      * to be the free variables with respect to which differentials\n      * are computed. As such, their differential with respect to\n      * themselves is +1.</p>\n-     * @param variables number of variables\n+     * @param parameters number of free parameters\n      * @param order derivation order\n      * @param index index of the variable (from 0 to {@code variables - 1})\n      * @param value value of the variable\n      * @exception NumberIsTooLargeException if index is equal to variables or larger\n      * @see #DerivativeStructure(int, int, double)\n      */\n-    public DerivativeStructure(final int variables, final int order,\n+    public DerivativeStructure(final int parameters, final int order,\n                                final int index, final double value)\n         throws NumberIsTooLargeException {\n-        this(variables, order, value);\n-\n-        if (index >= variables) {\n-            throw new NumberIsTooLargeException(index, variables, false);\n+        this(parameters, order, value);\n+\n+        if (index >= parameters) {\n+            throw new NumberIsTooLargeException(index, parameters, false);\n         }\n \n         if (order > 0) {", "timestamp": 1345187705, "metainfo": ""}