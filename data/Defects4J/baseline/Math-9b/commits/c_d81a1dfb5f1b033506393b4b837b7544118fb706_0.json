{"sha": "d81a1dfb5f1b033506393b4b837b7544118fb706", "log": "replaced forgotten calls to deprecated exception constructors  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.MaxIterationsExceededException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.util.LocalizedFormats;\n \n /**\n  * Implements the <a href=\"http://mathworld.wolfram.com/Legendre-GaussQuadrature.html\">\n             break;\n         default :\n             throw MathRuntimeException.createIllegalArgumentException(\n-                    \"{0} points Legendre-Gauss integrator not supported, \" +\n-                    \"number of points must be in the {1}-{2} range\",\n+                    LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED,\n                     n, 2, 5);\n         }\n \n--- a/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java\n         IllegalArgumentException {\n         if (lower >= upper) {\n             throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n+                    LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,\n                     lower, upper);\n         }\n     }\n--- a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java\n+++ b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java\n                 // This happens only when two abscissas are identical.\n                 for (int k = 0; k < n; ++k) {\n                     if ((i != k) && (x[i] == x[k])) {\n-                        throw MathRuntimeException.createArithmeticException(\"identical abscissas x[{0}] == x[{1}] == {2} cause division by zero\",\n-                                                                             i, k, x[i]);\n+                        throw MathRuntimeException.createArithmeticException(\n+                              LocalizedFormats.IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO,\n+                              i, k, x[i]);\n                     }\n                 }\n             }\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n             throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n+                    LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,\n                     lower, upper);\n         }\n     }\n--- a/src/main/java/org/apache/commons/math/complex/ComplexFormat.java\n+++ b/src/main/java/org/apache/commons/math/complex/ComplexFormat.java\n         if (parsePosition.getIndex() == 0) {\n             throw MathRuntimeException.createParseException(\n                     parsePosition.getErrorIndex(),\n-                    \"unparseable complex number: \\\"{0}\\\"\", source);\n+                    LocalizedFormats.UNPARSEABLE_COMPLEX_NUMBER, source);\n         }\n         return result;\n     }\n--- a/src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.special.Gamma;\n import org.apache.commons.math.special.Beta;\n+import org.apache.commons.math.util.LocalizedFormats;\n \n /**\n  * Implements the Beta distribution.\n         } else if (x == 0) {\n             if (alpha < 1) {\n                 throw MathRuntimeException.createIllegalArgumentException(\n-                        \"Cannot compute beta density at 0 when alpha = {0,number}\", alpha);\n+                        LocalizedFormats.CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA, alpha);\n             }\n             return 0;\n         } else if (x == 1) {\n             if (beta < 1) {\n                 throw MathRuntimeException.createIllegalArgumentException(\n-                        \"Cannot compute beta density at 1 when beta = %.3g\", beta);\n+                        LocalizedFormats.CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA, beta);\n             }\n             return 0;\n         } else {\n--- a/src/main/java/org/apache/commons/math/fraction/BigFractionFormat.java\n+++ b/src/main/java/org/apache/commons/math/fraction/BigFractionFormat.java\n         if (parsePosition.getIndex() == 0) {\n             throw MathRuntimeException.createParseException(\n                     parsePosition.getErrorIndex(),\n-                    \"unparseable fraction number: \\\"{0}\\\"\", source);\n+                    LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER, source);\n         }\n         return result;\n     }\n--- a/src/main/java/org/apache/commons/math/fraction/FractionFormat.java\n+++ b/src/main/java/org/apache/commons/math/fraction/FractionFormat.java\n         if (parsePosition.getIndex() == 0) {\n             throw MathRuntimeException.createParseException(\n                     parsePosition.getErrorIndex(),\n-                    \"unparseable fraction number: \\\"{0}\\\"\", source);\n+                    LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER, source);\n         }\n         return result;\n     }\n--- a/src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java\n+++ b/src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java\n import java.util.List;\n \n import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.util.LocalizedFormats;\n \n /**\n  * Mutation operator for {@link RandomKey}s. Changes a randomly chosen element\n     public Chromosome mutate(Chromosome original) {\n         if (!(original instanceof RandomKey<?>)) {\n             throw MathRuntimeException.createIllegalArgumentException(\n-                    \"RandomKeyMutation works only with RandomKeys, got \" +\n+                    LocalizedFormats.RANDOMKEY_MUTATION_WRONG_CLASS,\n                     original.getClass().getSimpleName());\n         }\n \n--- a/src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java\n         if (parsePosition.getIndex() == 0) {\n             throw MathRuntimeException.createParseException(\n                     parsePosition.getErrorIndex(),\n-                    \"unparseable 3D vector: \\\"{0}\\\"\", source);\n+                    LocalizedFormats.UNPARSEABLE_3D_VECTOR, source);\n         }\n         return result;\n     }\n--- a/src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java\n             for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {\n                 if (blockData[index].length != iHeight * blockWidth(jBlock)) {\n                     throw MathRuntimeException.createIllegalArgumentException(\n-                            \"wrong array shape (block length = {0}, expected {1})\",\n+                            LocalizedFormats.WRONG_BLOCK_LENGTH,\n                             blockData[index].length, iHeight * blockWidth(jBlock));\n                 }\n                 if (copyArray) {\n--- a/src/main/java/org/apache/commons/math/linear/RealVectorFormat.java\n+++ b/src/main/java/org/apache/commons/math/linear/RealVectorFormat.java\n         if (parsePosition.getIndex() == 0) {\n             throw MathRuntimeException.createParseException(\n                     parsePosition.getErrorIndex(),\n-                    \"unparseable real vector: \\\"{0}\\\"\", source);\n+                    LocalizedFormats.UNPARSEABLE_REAL_VECTOR, source);\n         }\n         return result;\n     }\n--- a/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n                 return new ArrayDataAdapter(inputArray);\n             } else {\n                 throw MathRuntimeException.createIllegalArgumentException(\n-                      \"input data comes from unsupported datasource: {0}, \" +\n-                      \"supported sources: {1}, {2}\",\n+                      LocalizedFormats.INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE,\n                       in.getClass().getName(),\n                       BufferedReader.class.getName(), double[].class.getName());\n             }\n--- a/src/main/java/org/apache/commons/math/random/ValueServer.java\n+++ b/src/main/java/org/apache/commons/math/random/ValueServer.java\n             case GAUSSIAN_MODE: return getNextGaussian();\n             case CONSTANT_MODE: return mu;\n             default: throw MathRuntimeException.createIllegalStateException(\n-                    \"unknown mode {0}, known modes: \" +\n-                    \"{1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})\",\n+                    LocalizedFormats.UNKNOWN_MODE,\n                     mode,\n                     \"DIGEST_MODE\",   DIGEST_MODE,   \"REPLAY_MODE\",      REPLAY_MODE,\n                     \"UNIFORM_MODE\",  UNIFORM_MODE,  \"EXPONENTIAL_MODE\", EXPONENTIAL_MODE,\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java\n         final int length) {\n \n         if (weights == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"input weights array is null\");\n+            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NULL_INPUT_ARRAY);\n         }\n \n         if (weights.length !=  values.length) {\n             throw MathRuntimeException.createIllegalArgumentException(\n-                  \"Different number of weights and values\");\n+                  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, weights.length, values.length);\n         }\n \n         boolean containsPositiveWeight = false;\n         for (int i = begin; i < begin + length; i++) {\n             if (Double.isNaN(weights[i])) {\n                 throw MathRuntimeException.createIllegalArgumentException(\n-                        \"NaN weight at index {0}\", i);\n+                        LocalizedFormats.NAN_ELEMENT_AT_INDEX, i);\n             }\n             if (Double.isInfinite(weights[i])) {\n                 throw MathRuntimeException.createIllegalArgumentException(\n-                        \"Infinite weight at index {0}\", i);\n+                        LocalizedFormats.INFINITE_ARRAY_ELEMENT, weights[i], i);\n             }\n             if (weights[i] < 0) {\n                 throw MathRuntimeException.createIllegalArgumentException(\n-                      \"negative weight {0} at index {1} \", weights[i], i);\n+                      LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX, i, weights[i]);\n             }\n             if (!containsPositiveWeight && weights[i] > 0.0) {\n                 containsPositiveWeight = true;\n \n         if (!containsPositiveWeight) {\n             throw MathRuntimeException.createIllegalArgumentException(\n-                    \"weight array must contain at least one non-zero value\");\n+                    LocalizedFormats.WEIGHT_AT_LEAST_ONE_NON_ZERO);\n         }\n \n         return test(values, begin, length);\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n                             new Object[] {Double.valueOf(50.0d)});\n         } catch (NoSuchMethodException e1) {\n             throw MathRuntimeException.createIllegalArgumentException(\n-                  \"percentile implementation {0} does not support setQuantile\",\n-                  percentileImpl.getClass().getName());\n+                  LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD,\n+                  percentileImpl.getClass().getName(), SET_QUANTILE_METHOD_NAME);\n         } catch (IllegalAccessException e2) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                   LocalizedFormats.PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD,\n--- a/src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java\n     /** Serializable version identifier. */\n     static final long serialVersionUID = 5138259215438106000L;\n \n-    /** Message for out of range root index. */\n-    private static final String OUT_OF_RANGE_ROOT_INDEX_MESSAGE =\n-        \"out of range root of unity index {0} (must be in [{1};{2}])\";\n-\n     /** roots of unity */\n     private RootsOfUnity roots = new RootsOfUnity();\n \n \n         if (lower >= upper) {\n             throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n+                    LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,\n                     lower, upper);\n         }\n     }\n         }\n         if ((k < 0) || (k >= omegaCount)) {\n             throw MathRuntimeException.createIllegalArgumentException(\n-                    OUT_OF_RANGE_ROOT_INDEX_MESSAGE, k, 0, omegaCount - 1);\n+                    LocalizedFormats.OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, k, 0, omegaCount - 1);\n         }\n \n         return omegaReal[k];\n         }\n         if ((k < 0) || (k >= omegaCount)) {\n           throw MathRuntimeException.createIllegalArgumentException(\n-                  OUT_OF_RANGE_ROOT_INDEX_MESSAGE, k, 0, omegaCount - 1);\n+                  LocalizedFormats.OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, k, 0, omegaCount - 1);\n         }\n \n         return isForward ? omegaImaginaryForward[k] : omegaImaginaryInverse[k];\n--- a/src/main/java/org/apache/commons/math/util/LocalizedFormats.java\n+++ b/src/main/java/org/apache/commons/math/util/LocalizedFormats.java\n \n     ARGUMENT_OUTSIDE_DOMAIN(\"Argument {0} outside domain [{1} ; {2}]\"),\n     ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(\"array sizes should have difference 1 ({0} != {1} + 1)\"),\n+    ARRAY_SUMS_TO_ZERO(\"array sums to zero\"),\n     ASSYMETRIC_EIGEN_NOT_SUPPORTED(\"eigen decomposition of assymetric matrices not supported yet\"),\n     AT_LEAST_ONE_COLUMN(\"matrix must have at least one column\"),\n     AT_LEAST_ONE_ROW(\"matrix must have at least one row\"),\n     BINOMIAL_NEGATIVE_PARAMETER(\"must have n >= 0 for binomial coefficient (n,k), got n = {0}\"),\n     CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(\"statistics constructed from external moments cannot be cleared\"),\n     CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(\"cannot compute 0-th root of unity, indefinite result\"),\n+    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(\"cannot compute beta density at 0 when alpha = {0,number}\"),\n+    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(\"cannot compute beta density at 1 when beta = %.3g\"),\n     CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(\"cannot compute nth root for null or negative n: {0}\"),\n     CANNOT_CONVERT_OBJECT_TO_FRACTION(\"cannot convert given object to a fraction number: {0}\"),\n     CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(\"cannot discard a negative number of elements ({0})\"),\n     MAX_ITERATIONS_EXCEEDED(\"maximal number of iterations ({0}) exceeded\"),\n     MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(\"minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}\"),\n     MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(\"Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae\"),\n+    NAN_ELEMENT_AT_INDEX(\"element {0} is NaN\"),\n     NAN_VALUE_CONVERSION(\"cannot convert NaN value\"),\n     NEGATIVE_BRIGHTNESS_EXPONENT(\"brightness exponent should be positive or null, but got {0}\"),\n     NEGATIVE_COMPLEX_MODULE(\"negative complex module {0}\"),\n     NULL_FRACTION(\"null fraction\"),\n     NULL_FUNCTION(\"function is null\"),\n     NULL_IMAGINARY_FORMAT(\"null imaginary format\"),\n-    NULL_INPUT_ARRAY(\"input values array is null\"),\n+    NULL_INPUT_ARRAY(\"input array is null\"),\n     NULL_NUMERATOR(\"numerator is null\"),\n     NULL_NUMERATOR_FORMAT(\"numerator format can not be null\"),\n     NULL_OBJECT_TRANSFORMATION(\"Conversion Exception in Transformation, Object is null\"),\n     POSITION_SIZE_MISMATCH_INPUT_ARRAY(\"position {0} and size {1} don't fit to the size of the input array {2}\"),\n     POWER_NEGATIVE_PARAMETERS(\"cannot raise an integral value to a negative power ({0}^{1})\"),\n     PROPAGATION_DIRECTION_MISMATCH(\"propagation direction mismatch\"),\n+    RANDOMKEY_MUTATION_WRONG_CLASS(\"RandomKeyMutation works only with RandomKeys, not {0}\"),\n     ROOTS_OF_UNITY_NOT_COMPUTED_YET(\"roots of unity have not been computed yet\"),\n     ROTATION_MATRIX_DIMENSIONS(\"a {0}x{1} matrix cannot be a rotation matrix\"),\n     ROW_INDEX_OUT_OF_RANGE(\"row index {0} out of allowed range [{1}, {2}]\"),\n     VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(\"{0} values have been added before statistic is configured\"),\n     VECTOR_LENGTH_MISMATCH(\"vector length mismatch: got {0} but expected {1}\"),\n     VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(\"vector must have at least one element\"),\n+    WEIGHT_AT_LEAST_ONE_NON_ZERO(\"weigth array must contain at least one non-zero value\"),\n     WRONG_BLOCK_LENGTH(\"wrong array shape (block length = {0}, expected {1})\"),\n     WRONG_NUMBER_OF_POINTS(\"{0} points are required, got only {1}\"),\n     ZERO_DENOMINATOR(\"denominator must be different from 0\"),\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n              }\n          }\n          if (sum == 0) {\n-             throw MathRuntimeException.createArithmeticException(\n-                     \"Array sums to zero\");\n+             throw MathRuntimeException.createArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n             break;\n         default :\n             throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}),\" +\n-                  \" {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})\",\n+                  LocalizedFormats.INVALID_ROUNDING_METHOD,\n                   roundingMethod,\n                   \"ROUND_CEILING\",     BigDecimal.ROUND_CEILING,\n                   \"ROUND_DOWN\",        BigDecimal.ROUND_DOWN,\n--- a/src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java\n+++ b/src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java\n \n         if (contraction < expansion) {\n             throw MathRuntimeException.createIllegalArgumentException(\n-                    \"contraction criteria ({0}) smaller than the expansion factor ({1}).  This would \" +\n-                    \"lead to a never ending loop of expansion and contraction as a newly expanded \" +\n-                    \"internal storage array would immediately satisfy the criteria for contraction\",\n+                    LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR,\n                     contraction, expansion);\n         }\n \n         if (contraction <= 1.0) {\n             throw MathRuntimeException.createIllegalArgumentException(\n-                    \"contraction criteria smaller than one ({0}).  This would lead to a never ending \" +\n-                    \"loop of expansion and contraction as an internal storage array length equal \" +\n-                    \"to the number of elements would satisfy the contraction criteria.\",\n+                    LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_ONE,\n                     contraction);\n         }\n ", "timestamp": 1276801675, "metainfo": ""}