{"sha": "d112c9a6903fdfe23cff1721607a0a1d6232fbd0", "log": "Variable visibility: \"protected\" -> \"private\". Added \"protected\" getter methods.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/stat/regression/AbstractMultipleLinearRegression.java\n+++ b/src/main/java/org/apache/commons/math3/stat/regression/AbstractMultipleLinearRegression.java\n         MultipleLinearRegression {\n \n     /** X sample data. */\n-    protected RealMatrix X;\n+    private RealMatrix xMatrix;\n \n     /** Y sample data. */\n-    protected RealVector Y;\n+    private RealVector yVector;\n \n     /** Whether or not the regression model includes an intercept.  True means no intercept. */\n     private boolean noIntercept = false;\n+\n+    /**\n+     * @return the X sample data.\n+     */\n+    protected RealMatrix getX() {\n+        return xMatrix;\n+    }\n+\n+    /**\n+     * @return the Y sample data.\n+     */\n+    protected RealVector getY() {\n+        return yVector;\n+    }\n \n     /**\n      * @return true if the model has no intercept term; false otherwise\n                 x[i][j] = data[pointer++];\n             }\n         }\n-        this.X = new Array2DRowRealMatrix(x);\n-        this.Y = new ArrayRealVector(y);\n+        this.xMatrix = new Array2DRowRealMatrix(x);\n+        this.yVector = new ArrayRealVector(y);\n     }\n \n     /**\n         if (y.length == 0) {\n             throw new NoDataException();\n         }\n-        this.Y = new ArrayRealVector(y);\n+        this.yVector = new ArrayRealVector(y);\n     }\n \n     /**\n             throw new NoDataException();\n         }\n         if (noIntercept) {\n-            this.X = new Array2DRowRealMatrix(x, true);\n+            this.xMatrix = new Array2DRowRealMatrix(x, true);\n         } else { // Augment design matrix with initial unitary column\n             final int nVars = x[0].length;\n             final double[][] xAug = new double[x.length][nVars + 1];\n                 xAug[i][0] = 1.0d;\n                 System.arraycopy(x[i], 0, xAug[i], 1, nVars);\n             }\n-            this.X = new Array2DRowRealMatrix(xAug, false);\n+            this.xMatrix = new Array2DRowRealMatrix(xAug, false);\n         }\n     }\n \n      */\n     public double[] estimateResiduals() {\n         RealVector b = calculateBeta();\n-        RealVector e = Y.subtract(X.operate(b));\n+        RealVector e = yVector.subtract(xMatrix.operate(b));\n         return e.toArray();\n     }\n \n      * @return Y variance\n      */\n     protected double calculateYVariance() {\n-        return new Variance().evaluate(Y.toArray());\n+        return new Variance().evaluate(yVector.toArray());\n     }\n \n     /**\n     protected double calculateErrorVariance() {\n         RealVector residuals = calculateResiduals();\n         return residuals.dotProduct(residuals) /\n-               (X.getRowDimension() - X.getColumnDimension());\n+               (xMatrix.getRowDimension() - xMatrix.getColumnDimension());\n     }\n \n     /**\n      */\n     protected RealVector calculateResiduals() {\n         RealVector b = calculateBeta();\n-        return Y.subtract(X.operate(b));\n+        return yVector.subtract(xMatrix.operate(b));\n     }\n \n }\n--- a/src/main/java/org/apache/commons/math3/stat/regression/GLSMultipleLinearRegression.java\n+++ b/src/main/java/org/apache/commons/math3/stat/regression/GLSMultipleLinearRegression.java\n     @Override\n     protected RealVector calculateBeta() {\n         RealMatrix OI = getOmegaInverse();\n-        RealMatrix XT = X.transpose();\n-        RealMatrix XTOIX = XT.multiply(OI).multiply(X);\n+        RealMatrix XT = getX().transpose();\n+        RealMatrix XTOIX = XT.multiply(OI).multiply(getX());\n         RealMatrix inverse = new LUDecomposition(XTOIX).getSolver().getInverse();\n-        return inverse.multiply(XT).multiply(OI).operate(Y);\n+        return inverse.multiply(XT).multiply(OI).operate(getY());\n     }\n \n     /**\n     @Override\n     protected RealMatrix calculateBetaVariance() {\n         RealMatrix OI = getOmegaInverse();\n-        RealMatrix XTOIX = X.transpose().multiply(OI).multiply(X);\n+        RealMatrix XTOIX = getX().transpose().multiply(OI).multiply(getX());\n         return new LUDecomposition(XTOIX).getSolver().getInverse();\n     }\n \n     protected double calculateErrorVariance() {\n         RealVector residuals = calculateResiduals();\n         double t = residuals.dotProduct(getOmegaInverse().operate(residuals));\n-        return t / (X.getRowDimension() - X.getColumnDimension());\n+        return t / (getX().getRowDimension() - getX().getColumnDimension());\n \n     }\n \n--- a/src/main/java/org/apache/commons/math3/stat/regression/OLSMultipleLinearRegression.java\n+++ b/src/main/java/org/apache/commons/math3/stat/regression/OLSMultipleLinearRegression.java\n     @Override\n     public void newSampleData(double[] data, int nobs, int nvars) {\n         super.newSampleData(data, nobs, nvars);\n-        qr = new QRDecomposition(X);\n+        qr = new QRDecomposition(getX());\n     }\n \n     /**\n      */\n     public double calculateTotalSumOfSquares() {\n         if (isNoIntercept()) {\n-            return StatUtils.sumSq(Y.toArray());\n+            return StatUtils.sumSq(getY().toArray());\n         } else {\n-            return new SecondMoment().evaluate(Y.toArray());\n+            return new SecondMoment().evaluate(getY().toArray());\n         }\n     }\n \n      * @since 2.2\n      */\n     public double calculateAdjustedRSquared() {\n-        final double n = X.getRowDimension();\n+        final double n = getX().getRowDimension();\n         if (isNoIntercept()) {\n-            return 1 - (1 - calculateRSquared()) * (n / (n - X.getColumnDimension()));\n+            return 1 - (1 - calculateRSquared()) * (n / (n - getX().getColumnDimension()));\n         } else {\n             return 1 - (calculateResidualSumOfSquares() * (n - 1)) /\n-                (calculateTotalSumOfSquares() * (n - X.getColumnDimension()));\n+                (calculateTotalSumOfSquares() * (n - getX().getColumnDimension()));\n         }\n     }\n \n     @Override\n     protected void newXSampleData(double[][] x) {\n         super.newXSampleData(x);\n-        qr = new QRDecomposition(X);\n+        qr = new QRDecomposition(getX());\n     }\n \n     /**\n      */\n     @Override\n     protected RealVector calculateBeta() {\n-        return qr.getSolver().solve(Y);\n+        return qr.getSolver().solve(getY());\n     }\n \n     /**\n      */\n     @Override\n     protected RealMatrix calculateBetaVariance() {\n-        int p = X.getColumnDimension();\n+        int p = getX().getColumnDimension();\n         RealMatrix Raug = qr.getR().getSubMatrix(0, p - 1 , 0, p - 1);\n         RealMatrix Rinv = new LUDecomposition(Raug).getSolver().getInverse();\n         return Rinv.multiply(Rinv.transpose());\n--- a/src/test/java/org/apache/commons/math3/stat/regression/GLSMultipleLinearRegressionTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/regression/GLSMultipleLinearRegressionTest.java\n         double[][] covariance = MatrixUtils.createRealIdentityMatrix(4).scalarMultiply(2).getData();\n         GLSMultipleLinearRegression regression = new GLSMultipleLinearRegression();\n         regression.newSampleData(y, x, covariance);\n-        RealMatrix combinedX = regression.X.copy();\n-        RealVector combinedY = regression.Y.copy();\n+        RealMatrix combinedX = regression.getX().copy();\n+        RealVector combinedY = regression.getY().copy();\n         RealMatrix combinedCovInv = regression.getOmegaInverse();\n         regression.newXSampleData(x);\n         regression.newYSampleData(y);\n-        Assert.assertEquals(combinedX, regression.X);\n-        Assert.assertEquals(combinedY, regression.Y);\n+        Assert.assertEquals(combinedX, regression.getX());\n+        Assert.assertEquals(combinedY, regression.getY());\n         Assert.assertEquals(combinedCovInv, regression.getOmegaInverse());\n     }\n     \n         OLSMultipleLinearRegression ols = new OLSMultipleLinearRegression();\n         ols.newSampleData(longley, nObs, 6);\n         final RealVector b = ols.calculateBeta().copy();\n-        final RealMatrix x = ols.X.copy();\n+        final RealMatrix x = ols.getX().copy();\n         \n         // Create a GLS model to reuse\n         GLSMultipleLinearRegression gls = new GLSMultipleLinearRegression();\n--- a/src/test/java/org/apache/commons/math3/stat/regression/MultipleLinearRegressionAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/regression/MultipleLinearRegressionAbstractTest.java\n         };\n         AbstractMultipleLinearRegression regression = createRegression();\n         regression.newSampleData(design, 4, 3);\n-        RealMatrix flatX = regression.X.copy();\n-        RealVector flatY = regression.Y.copy();\n+        RealMatrix flatX = regression.getX().copy();\n+        RealVector flatY = regression.getY().copy();\n         regression.newXSampleData(x);\n         regression.newYSampleData(y);\n-        Assert.assertEquals(flatX, regression.X);\n-        Assert.assertEquals(flatY, regression.Y);\n+        Assert.assertEquals(flatX, regression.getX());\n+        Assert.assertEquals(flatY, regression.getY());\n         \n         // No intercept\n         regression.setNoIntercept(true);\n         regression.newSampleData(design, 4, 3);\n-        flatX = regression.X.copy();\n-        flatY = regression.Y.copy();\n+        flatX = regression.getX().copy();\n+        flatY = regression.getY().copy();\n         regression.newXSampleData(x);\n         regression.newYSampleData(y);\n-        Assert.assertEquals(flatX, regression.X);\n-        Assert.assertEquals(flatY, regression.Y);\n+        Assert.assertEquals(flatX, regression.getX());\n+        Assert.assertEquals(flatY, regression.getY());\n     }\n     \n     @Test(expected=IllegalArgumentException.class)\n--- a/src/test/java/org/apache/commons/math3/stat/regression/OLSMultipleLinearRegressionTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/regression/OLSMultipleLinearRegressionTest.java\n          */\n         double[] residuals = model.estimateResiduals();\n         RealMatrix I = MatrixUtils.createRealIdentityMatrix(10);\n-        double[] hatResiduals = I.subtract(hat).operate(model.Y).toArray();\n+        double[] hatResiduals = I.subtract(hat).operate(model.getY()).toArray();\n         TestUtils.assertEquals(residuals, hatResiduals, 10e-12);\n     }\n \n      */\n     protected void checkVarianceConsistency(OLSMultipleLinearRegression model) throws Exception {\n         // Check Y variance consistency\n-        TestUtils.assertEquals(StatUtils.variance(model.Y.toArray()), model.calculateYVariance(), 0);\n+        TestUtils.assertEquals(StatUtils.variance(model.getY().toArray()), model.calculateYVariance(), 0);\n         \n         // Check residual variance consistency\n         double[] residuals = model.calculateResiduals().toArray();\n-        RealMatrix X = model.X;\n+        RealMatrix X = model.getX();\n         TestUtils.assertEquals(\n                 StatUtils.variance(model.calculateResiduals().toArray()) * (residuals.length - 1),\n                 model.calculateErrorVariance() * (X.getRowDimension() - X.getColumnDimension()), 1E-20);\n         };\n         OLSMultipleLinearRegression regression = new OLSMultipleLinearRegression();\n         regression.newSampleData(y, x);\n-        RealMatrix combinedX = regression.X.copy();\n-        RealVector combinedY = regression.Y.copy();\n+        RealMatrix combinedX = regression.getX().copy();\n+        RealVector combinedY = regression.getY().copy();\n         regression.newXSampleData(x);\n         regression.newYSampleData(y);\n-        Assert.assertEquals(combinedX, regression.X);\n-        Assert.assertEquals(combinedY, regression.Y);\n+        Assert.assertEquals(combinedX, regression.getX());\n+        Assert.assertEquals(combinedY, regression.getY());\n         \n         // No intercept\n         regression.setNoIntercept(true);\n         regression.newSampleData(y, x);\n-        combinedX = regression.X.copy();\n-        combinedY = regression.Y.copy();\n+        combinedX = regression.getX().copy();\n+        combinedY = regression.getY().copy();\n         regression.newXSampleData(x);\n         regression.newYSampleData(y);\n-        Assert.assertEquals(combinedX, regression.X);\n-        Assert.assertEquals(combinedY, regression.Y);\n+        Assert.assertEquals(combinedX, regression.getX());\n+        Assert.assertEquals(combinedY, regression.getY());\n     }\n     \n     @Test(expected=IllegalArgumentException.class)", "timestamp": 1330745720, "metainfo": ""}