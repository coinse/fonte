{"sha": "e9bac4ca1bf8c6b61474b9d305e03dde1441fddd", "log": "added multiple trials runs to K-means++ clustering algorithm.  JIRA: MATH-548  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n+++ b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n     public KMeansPlusPlusClusterer(final Random random, final EmptyClusterStrategy emptyStrategy) {\n         this.random        = random;\n         this.emptyStrategy = emptyStrategy;\n+    }\n+\n+    /**\n+     * Runs the K-means++ clustering algorithm.\n+     *\n+     * @param points the points to cluster\n+     * @param k the number of clusters to split the data into\n+     * @param maxIterations the maximum number of iterations to run the algorithm\n+     *     for.  If negative, no maximum will be used\n+     * @return a list of clusters containing the points\n+     * @throws MathIllegalArgumentException if the data points are null or the number\n+     *     of clusters is larger than the number of data points\n+     */\n+    public List<Cluster<T>> cluster(final Collection<T> points, final int k,\n+                                    int numTrials, int maxIterationsPerTrial)\n+        throws MathIllegalArgumentException {\n+\n+        // at first, we have not found any clusters list yet\n+        List<Cluster<T>> best = null;\n+        double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\n+        // do several clustering trials\n+        for (int i = 0; i < numTrials; ++i) {\n+\n+            // compute a clusters list\n+            List<Cluster<T>> clusters = cluster(points, k, maxIterationsPerTrial);\n+\n+            // compute the variance of the current list\n+            double varianceSum = 0.0;\n+            for (final Cluster<T> cluster : clusters) {\n+                if (!cluster.getPoints().isEmpty()) {\n+\n+                    // compute the distance variance of the current cluster\n+                    final T center = cluster.getCenter();\n+                    final Variance stat = new Variance();\n+                    for (final T point : cluster.getPoints()) {\n+                        stat.increment(point.distanceFrom(center));\n+                    }\n+                    varianceSum += stat.getResult();\n+\n+                }\n+            }\n+\n+            if (varianceSum <= bestVarianceSum) {\n+                // this one is the best we have found so far, remember it\n+                best            = clusters;\n+                bestVarianceSum = varianceSum;\n+            }\n+\n+        }\n+\n+        // return the best clusters list found\n+        return best;\n+\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java\n \n         };\n         List<Cluster<EuclideanIntegerPoint>> clusters =\n-            transformer.cluster(Arrays.asList(points), 3, 10);\n+            transformer.cluster(Arrays.asList(points), 3, 5, 10);\n \n         Assert.assertEquals(3, clusters.size());\n         boolean cluster1Found = false;", "timestamp": 1308599324, "metainfo": ""}