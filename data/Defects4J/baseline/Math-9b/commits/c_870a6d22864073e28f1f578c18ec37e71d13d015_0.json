{"sha": "870a6d22864073e28f1f578c18ec37e71d13d015", "log": "[MATH-160] introduced a new UnknownDistributionChisSquareTest interface to hold the new methods without creating binary incompatibilities with commons-math 1.1 The factories have been deprecated and do not handle this new interface  ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTest.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTest.java\n \n /**\n  * An interface for Chi-Square tests.\n- *\n+ * <p>This interface handles only known distributions. If the distribution is\n+ * unknown and should be provided by a sample, then the {@link UnknownDistributionChiSquareTest\n+ * UnknownDistributionChiSquareTest} extended interface should be used instead.</p>\n  * @version $Revision$ $Date$ \n  */\n public interface ChiSquareTest {\n      /**\n      * Computes the <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda35f.htm\">\n      * Chi-Square statistic</a> comparing <code>observed</code> and <code>expected</code> \n-     * freqeuncy counts. \n+     * frequency counts. \n      * <p>\n      * This statistic can be used to perform a Chi-Square test evaluating the null hypothesis that\n      *  the observed counts follow the expected distribution.\n     boolean chiSquareTest(long[][] counts, double alpha) \n     throws IllegalArgumentException, MathException;\n \n-    /**\n-     * <p>Computes a \n-     * <a href=\"http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/chi2samp.htm\">\n-     * Chi-Square two sample test statistic</a> comparing bin frequency counts\n-     * in <code>observed1</code> and <code>observed2</code>.  The\n-     * sums of frequency counts in the two samples are not required to be the\n-     * same.  The formula used to compute the test statistic is</p>\n-     * <code>\n-     * &sum;[(K * observed1[i] - observed2[i]/K)<sup>2</sup> / (observed1[i] + observed2[i])]\n-     * </code> where \n-     * <br/><code>K = &sqrt;[&sum(observed2 / &sum;(observed1)]</code>\n-     * </p>\n-     * <p>This statistic can be used to perform a Chi-Square test evaluating the null hypothesis that\n-     * both observed counts follow the same distribution.\n-     * <p>\n-     * <strong>Preconditions</strong>: <ul>\n-     * <li>Observed counts must be non-negative.\n-     * </li>\n-     * <li>Observed counts for a specific bin must not both be zero.\n-     * </li>\n-     * <li>Observed counts for a specific sample must not all be 0.\n-     * </li>\n-     * <li>The arrays <code>observed1</code> and <code>observed2</code> must have the same length and\n-     * their common length must be at least 2.\n-     * </li></ul><p>\n-     * If any of the preconditions are not met, an\n-     * <code>IllegalArgumentException</code> is thrown.\n-     *\n-     * @param observed1 array of observed frequency counts of the first data set\n-     * @param observed2 array of observed frequency counts of the second data set\n-     * @return chiSquare statistic\n-     * @throws IllegalArgumentException if preconditions are not met\n-     */\n-    double chiSquareDataSetsComparison(long[] observed1, long[] observed2)\n-    \tthrows IllegalArgumentException;\n-\n-    /**\n-     * <p>Returns the <i>observed significance level</i>, or <a href=\n-     * \"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n-     * p-value</a>, associated with a Chi-Square two sample test comparing\n-     * bin frequency counts in <code>observed1</code> and \n-     * <code>observed2</code>.\n-     * </p>\n-     * <p>The number returned is the smallest significance level at which one\n-     * can reject the null hypothesis that the observed counts conform to the\n-     * same distribution.\n-     * </p>\n-     * <p>See {@link #chiSquareDataSetsComparison(long[], long[])} for details\n-     * on the formula used to compute the test statistic. The degrees of\n-     * of freedom used to perform the test is one less than the common length\n-     * of the input observed count arrays.\n-     * </p>\n-     * <strong>Preconditions</strong>: <ul>\n-     * <li>Observed counts must be non-negative.\n-     * </li>\n-     * <li>Observed counts for a specific bin must not both be zero.\n-     * </li>\n-     * <li>Observed counts for a specific sample must not all be 0.\n-     * </li>\n-     * <li>The arrays <code>observed1</code> and <code>observed2</code> must\n-     * have the same length and\n-     * their common length must be at least 2.\n-     * </li></ul><p>\n-     * If any of the preconditions are not met, an\n-     * <code>IllegalArgumentException</code> is thrown.\n-     *\n-     * @param observed1 array of observed frequency counts of the first data set\n-     * @param observed2 array of observed frequency counts of the second data set\n-     * @return p-value\n-     * @throws IllegalArgumentException if preconditions are not met\n-     * @throws MathException if an error occurs computing the p-value\n-     */\n-    double chiSquareTestDataSetsComparison(long[] observed1, long[] observed2)\n-    \tthrows IllegalArgumentException, MathException;\n-\n-    /**\n-     * <p>Performs a Chi-Square two sample test comparing two binned data\n-     * sets. The test evaluates the null hypothesis that the two lists of\n-     * observed counts conform to the same frequency distribution, with\n-     * significance level <code>alpha</code>.  Returns true iff the null\n-     * hypothesis can be rejected with 100 * (1 - alpha) percent confidence.\n-     * </p>\n-     * <p>See {@link #chiSquareDataSetsComparison(long[], long[])} for \n-     * details on the formula used to compute the Chisquare statistic used\n-     * in the test. The degrees of of freedom used to perform the test is\n-     * one less than the common length of the input observed count arrays.\n-     * </p>\n-     * <strong>Preconditions</strong>: <ul>\n-     * <li>Observed counts must be non-negative.\n-     * </li>\n-     * <li>Observed counts for a specific bin must not both be zero.\n-     * </li>\n-     * <li>Observed counts for a specific sample must not all be 0.\n-     * </li>\n-     * <li>The arrays <code>observed1</code> and <code>observed2</code> must\n-     * have the same length and their common length must be at least 2.\n-     * </li>\n-     * <li> <code> 0 < alpha < 0.5 </code>\n-     * </li></ul><p>\n-     * If any of the preconditions are not met, an\n-     * <code>IllegalArgumentException</code> is thrown.\n-     *\n-     * @param observed1 array of observed frequency counts of the first data set\n-     * @param observed2 array of observed frequency counts of the second data set\n-     * @param alpha significance level of the test\n-     * @return true iff null hypothesis can be rejected with confidence\n-     * 1 - alpha\n-     * @throws IllegalArgumentException if preconditions are not met\n-     * @throws MathException if an error occurs performing the test\n-     */\n-    boolean chiSquareTestDataSetsComparison(long[] observed1, long[] observed2, double alpha)\n-    \tthrows IllegalArgumentException, MathException;\n-\n }\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n import org.apache.commons.math.distribution.DistributionFactory;\n \n /**\n- * Implements Chi-Square test statistics defined in the {@link ChiSquareTest} interface.\n+ * Implements Chi-Square test statistics defined in the\n+ * {@link UnknownDistributionChiSquareTest} interface.\n  *\n  * @version $Revision$ $Date$\n  */\n-public class ChiSquareTestImpl implements ChiSquareTest {\n+public class ChiSquareTestImpl implements UnknownDistributionChiSquareTest {\n \n     /** Distribution used to compute inference statistics. */\n     private ChiSquaredDistribution distribution;\n--- a/src/java/org/apache/commons/math/stat/inference/TestFactory.java\n+++ b/src/java/org/apache/commons/math/stat/inference/TestFactory.java\n  *\n  * @since 1.1\n  * @version $Revision$ $Date$ \n+ * @deprecated as of 1.2, pluggability of test instances is now provided through\n+ *             constructors and setters.\n  */\n public abstract class TestFactory {\n     /**\n     public abstract TTest createTTest();\n     \n     /**\n-     * Create a ChiSquareTest instance.\n+     * Create an UnknownDistributionChiSquareTest instance.\n      * \n-     * @return a new ChiSquareTest instance\n+     * @return a new UnknownDistributionChiSquareTest instance\n      */\n     public abstract ChiSquareTest createChiSquareTest();  \n }\n--- a/src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/TestFactoryImpl.java\n  * A concrete inference test factory.  This is the default factory used by\n  * Commons-Math.\n  *  \n+ * @deprecated as of 1.2, pluggability of test instances is now provided through\n+ *             constructors and setters.\n  * @since 1.1\n  * @version $Revision$ $Date$\n  */\n     }\n     \n     /**\n-     * Create a ChiSquareTest instance.\n+     * Create an UnknownDistributionChiSquareTest instance.\n      * \n-     * @return a new ChiSquareTest instance\n+     * @return a new UnknownDistributionChiSquareTest instance\n      */\n-    public ChiSquareTest createChiSquareTest() {\n+    public ChiSquareTest createChiSquareTest() { \n         return new ChiSquareTestImpl();\n     }\n     \n--- a/src/java/org/apache/commons/math/stat/inference/TestUtils.java\n+++ b/src/java/org/apache/commons/math/stat/inference/TestUtils.java\n         super();\n     }\n     \n-    /** Singleton TTest instance initialized using configured factory */\n-    private static TTest tTest = TestFactory.newInstance().createTTest();\n+    /** Singleton TTest instance using default implementation. */\n+    private static TTest tTest = new TTestImpl();\n    \n-    /** Singleton ChiSquareTest instance initialized using configured factory */\n+    /** Singleton ChiSquareTest instance using default implementation. */\n     private static ChiSquareTest chiSquareTest = \n-        TestFactory.newInstance().createChiSquareTest();\n+        new ChiSquareTestImpl();\n+    \n+    /** Singleton ChiSquareTest instance using default implementation. */\n+    private static UnknownDistributionChiSquareTest unknownDistributionChiSquareTest = \n+        new ChiSquareTestImpl();\n+    \n+    /**\n+     * Set the (singleton) TTest instance.\n+     * \n+     * @param tTest the new instance to use\n+     * @since 1.2\n+     */\n+    public static void setChiSquareTest(TTest tTest) {\n+        TestUtils.tTest = tTest;\n+    }\n     \n     /**\n      * Return a (singleton) TTest instance.  Does not create a new instance.\n     }\n     \n     /**\n+     * Set the (singleton) ChiSquareTest instance.\n+     * \n+     * @param chiSquareTest the new instance to use\n+     * @since 1.2\n+     */\n+    public static void setChiSquareTest(ChiSquareTest chiSquareTest) {\n+        TestUtils.chiSquareTest = chiSquareTest;\n+    }\n+    \n+    /**\n      * Return a (singleton) ChiSquareTest instance.  Does not create a new instance.\n      * \n      * @return a ChiSquareTest instance\n     }\n     \n     /**\n+     * Set the (singleton) UnknownDistributionChiSquareTest instance.\n+     * \n+     * @param unknownDistributionChiSquareTest the new instance to use\n+     * @since 1.2\n+     */\n+    public static void setUnknownDistributionChiSquareTest(UnknownDistributionChiSquareTest unknownDistributionChiSquareTest) {\n+        TestUtils.unknownDistributionChiSquareTest = unknownDistributionChiSquareTest;\n+    }\n+    \n+    /**\n+     * Return a (singleton) UnknownDistributionChiSquareTest instance.  Does not create a new instance.\n+     * \n+     * @return a UnknownDistributionChiSquareTest instance\n+     */\n+    public static UnknownDistributionChiSquareTest getUnknownDistributionChiSquareTest() {\n+        return unknownDistributionChiSquareTest;\n+    }\n+    \n+    /**\n      * @see org.apache.commons.math.stat.inference.TTest#homoscedasticT(double[], double[])\n      */\n     public static double homoscedasticT(double[] sample1, double[] sample2)\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.inference.ChiSquareTest#chiSquareDataSetsComparison(long[], long[])\n+     * @see org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest#chiSquareDataSetsComparison(long[], long[])\n      */\n     public static double chiSquareDataSetsComparison(long[] observed1, long[] observed2)\n         throws IllegalArgumentException {\n-        return chiSquareTest.chiSquareDataSetsComparison(observed1, observed2);\n-    }\n-\n-    /**\n-     * @see org.apache.commons.math.stat.inference.ChiSquareTest#chiSquareTestDataSetsComparison(long[], long[])\n+        return unknownDistributionChiSquareTest.chiSquareDataSetsComparison(observed1, observed2);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest#chiSquareTestDataSetsComparison(long[], long[])\n      */\n     public static double chiSquareTestDataSetsComparison(long[] observed1, long[] observed2)\n         throws IllegalArgumentException, MathException {\n-        return chiSquareTest.chiSquareTestDataSetsComparison(observed1, observed2);\n-    }\n-\n-\n-    /**\n-     * @see org.apache.commons.math.stat.inference.ChiSquareTest#chiSquareTestDataSetsComparison(long[], long[], double)\n+        return unknownDistributionChiSquareTest.chiSquareTestDataSetsComparison(observed1, observed2);\n+    }\n+\n+\n+    /**\n+     * @see org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest#chiSquareTestDataSetsComparison(long[], long[], double)\n      */\n     public static boolean chiSquareTestDataSetsComparison(long[] observed1, long[] observed2,\n         double alpha)\n         throws IllegalArgumentException, MathException {\n-        return chiSquareTest.chiSquareTestDataSetsComparison(observed1, observed2, alpha);\n+        return unknownDistributionChiSquareTest.chiSquareTestDataSetsComparison(observed1, observed2, alpha);\n     }\n \n \n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/inference/UnknownDistributionChiSquareTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.inference;\n+\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ * An interface for Chi-Square tests for unknown distributions.\n+ * <p>Two samples tests are used when the distribution is unknown <i>a priori</i>\n+ * but provided by one sample. We compare the second sample against the first.</p>\n+ *\n+ * @version $Revision: 553603 $ $Date: 2007-07-05 20:34:45 +0200 (jeu, 05 jui 2007) $ \n+ */\n+public interface UnknownDistributionChiSquareTest extends ChiSquareTest {\n+     \n+    /**\n+     * <p>Computes a \n+     * <a href=\"http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/chi2samp.htm\">\n+     * Chi-Square two sample test statistic</a> comparing bin frequency counts\n+     * in <code>observed1</code> and <code>observed2</code>.  The\n+     * sums of frequency counts in the two samples are not required to be the\n+     * same.  The formula used to compute the test statistic is</p>\n+     * <code>\n+     * &sum;[(K * observed1[i] - observed2[i]/K)<sup>2</sup> / (observed1[i] + observed2[i])]\n+     * </code> where \n+     * <br/><code>K = &sqrt;[&sum(observed2 / &sum;(observed1)]</code>\n+     * </p>\n+     * <p>This statistic can be used to perform a Chi-Square test evaluating the null hypothesis that\n+     * both observed counts follow the same distribution.\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>Observed counts must be non-negative.\n+     * </li>\n+     * <li>Observed counts for a specific bin must not both be zero.\n+     * </li>\n+     * <li>Observed counts for a specific sample must not all be 0.\n+     * </li>\n+     * <li>The arrays <code>observed1</code> and <code>observed2</code> must have the same length and\n+     * their common length must be at least 2.\n+     * </li></ul><p>\n+     * If any of the preconditions are not met, an\n+     * <code>IllegalArgumentException</code> is thrown.\n+     *\n+     * @param observed1 array of observed frequency counts of the first data set\n+     * @param observed2 array of observed frequency counts of the second data set\n+     * @return chiSquare statistic\n+     * @throws IllegalArgumentException if preconditions are not met\n+     */\n+    double chiSquareDataSetsComparison(long[] observed1, long[] observed2)\n+    \tthrows IllegalArgumentException;\n+\n+    /**\n+     * <p>Returns the <i>observed significance level</i>, or <a href=\n+     * \"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n+     * p-value</a>, associated with a Chi-Square two sample test comparing\n+     * bin frequency counts in <code>observed1</code> and \n+     * <code>observed2</code>.\n+     * </p>\n+     * <p>The number returned is the smallest significance level at which one\n+     * can reject the null hypothesis that the observed counts conform to the\n+     * same distribution.\n+     * </p>\n+     * <p>See {@link #chiSquareDataSetsComparison(long[], long[])} for details\n+     * on the formula used to compute the test statistic. The degrees of\n+     * of freedom used to perform the test is one less than the common length\n+     * of the input observed count arrays.\n+     * </p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>Observed counts must be non-negative.\n+     * </li>\n+     * <li>Observed counts for a specific bin must not both be zero.\n+     * </li>\n+     * <li>Observed counts for a specific sample must not all be 0.\n+     * </li>\n+     * <li>The arrays <code>observed1</code> and <code>observed2</code> must\n+     * have the same length and\n+     * their common length must be at least 2.\n+     * </li></ul><p>\n+     * If any of the preconditions are not met, an\n+     * <code>IllegalArgumentException</code> is thrown.\n+     *\n+     * @param observed1 array of observed frequency counts of the first data set\n+     * @param observed2 array of observed frequency counts of the second data set\n+     * @return p-value\n+     * @throws IllegalArgumentException if preconditions are not met\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    double chiSquareTestDataSetsComparison(long[] observed1, long[] observed2)\n+    \tthrows IllegalArgumentException, MathException;\n+\n+    /**\n+     * <p>Performs a Chi-Square two sample test comparing two binned data\n+     * sets. The test evaluates the null hypothesis that the two lists of\n+     * observed counts conform to the same frequency distribution, with\n+     * significance level <code>alpha</code>.  Returns true iff the null\n+     * hypothesis can be rejected with 100 * (1 - alpha) percent confidence.\n+     * </p>\n+     * <p>See {@link #chiSquareDataSetsComparison(long[], long[])} for \n+     * details on the formula used to compute the Chisquare statistic used\n+     * in the test. The degrees of of freedom used to perform the test is\n+     * one less than the common length of the input observed count arrays.\n+     * </p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>Observed counts must be non-negative.\n+     * </li>\n+     * <li>Observed counts for a specific bin must not both be zero.\n+     * </li>\n+     * <li>Observed counts for a specific sample must not all be 0.\n+     * </li>\n+     * <li>The arrays <code>observed1</code> and <code>observed2</code> must\n+     * have the same length and their common length must be at least 2.\n+     * </li>\n+     * <li> <code> 0 < alpha < 0.5 </code>\n+     * </li></ul><p>\n+     * If any of the preconditions are not met, an\n+     * <code>IllegalArgumentException</code> is thrown.\n+     *\n+     * @param observed1 array of observed frequency counts of the first data set\n+     * @param observed2 array of observed frequency counts of the second data set\n+     * @param alpha significance level of the test\n+     * @return true iff null hypothesis can be rejected with confidence\n+     * 1 - alpha\n+     * @throws IllegalArgumentException if preconditions are not met\n+     * @throws MathException if an error occurs performing the test\n+     */\n+    boolean chiSquareTestDataSetsComparison(long[] observed1, long[] observed2, double alpha)\n+    \tthrows IllegalArgumentException, MathException;\n+\n+}\n--- a/src/test/org/apache/commons/math/stat/inference/ChiSquareFactoryTest.java\n+++ b/src/test/org/apache/commons/math/stat/inference/ChiSquareFactoryTest.java\n     \n     public void setUp() {\n     \tsuper.setUp();\n-        testStatistic = TestUtils.getChiSquareTest();\n+        testStatistic = TestUtils.getUnknownDistributionChiSquareTest();\n     }\n \n     public static Test suite() {\n--- a/src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java\n+++ b/src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java\n \n public class ChiSquareTestTest extends TestCase {\n \n-    protected ChiSquareTest testStatistic = new ChiSquareTestImpl();\n+    protected UnknownDistributionChiSquareTest testStatistic = new ChiSquareTestImpl();\n \n     public ChiSquareTestTest(String name) {\n         super(name);", "timestamp": 1189363598, "metainfo": ""}