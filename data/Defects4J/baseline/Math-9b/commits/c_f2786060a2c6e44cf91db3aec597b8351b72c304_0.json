{"sha": "f2786060a2c6e44cf91db3aec597b8351b72c304", "log": "Added a getCovariance method to singular value decomposition  ", "commit": "\n--- a/src/java/org/apache/commons/math/MessagesResources_fr.java\n+++ b/src/java/org/apache/commons/math/MessagesResources_fr.java\n     // org.apache.commons.math.linear.decomposition.SingularMatrixException\n     { \"matrix is singular\",\n       \"matrice singuli\\u00e8re\" },\n+\n+    // org.apache.commons.math.linear.decomposition.SingularValueDecompositionImpl\n+    { \"cutoff singular value is {0}, should be at most {1}\",\n+      \"la valeur singuli\\u00e8re de coupure vaut {0}, elle ne devrait pas d\\u00e9passer {1}\" },\n \n     // org.apache.commons.math.linear.decomposition.CholeskyDecompositionImpl\n     // org.apache.commons.math.linear.decomposition.EigenDecompositionImpl\n--- a/src/java/org/apache/commons/math/linear/SingularValueDecomposition.java\n+++ b/src/java/org/apache/commons/math/linear/SingularValueDecomposition.java\n  *   getRank},</li>\n  *   <li>a {@link #getUT() getUT} method has been added,</li>\n  *   <li>a {@link #getVT() getVT} method has been added,</li>\n- *   <li>a {@link #getSolver() getSolver} method has been added.</li>\n+ *   <li>a {@link #getSolver() getSolver} method has been added,</li>\n+ *   <li>a {@link #getCovariance(double) getCovariance} method has been added.</li>\n  * </ul>\n  * @see <a href=\"http://mathworld.wolfram.com/SingularValueDecomposition.html\">MathWorld</a>\n  * @see <a href=\"http://en.wikipedia.org/wiki/Singular_value_decomposition\">Wikipedia</a>\n     RealMatrix getVT();\n \n     /**\n+     * Returns the n &times; n covariance matrix.\n+     * <p>The covariance matrix is V &times; J &times; V<sup>T</sup>\n+     * where J is the diagonal matrix of the inverse of the squares of\n+     * the singular values.</p>\n+     * @param minSingularValue value below which singular values are ignored\n+     * (a 0 or negative value implies all singular value will be used)\n+     * @return covariance matrix\n+     * @exception IllegalArgumentException if minSingularValue is larger than\n+     * the largest singular value, meaning all singular values are ignored\n+     */\n+    RealMatrix getCovariance(double minSingularValue) throws IllegalArgumentException;\n+\n+    /**\n      * Returns the L<sub>2</sub> norm of the matrix.\n      * <p>The L<sub>2</sub> norm is max(|A &times; u|<sub>2</sub> /\n      * |u|<sub>2</sub>), where |.|<sub>2</sub> denotes the vectorial 2-norm\n--- a/src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java\n+++ b/src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java\n     }\n \n     /** {@inheritDoc} */\n+    public RealMatrix getCovariance(final double minSingularValue) {\n+\n+        // get the number of singular values to consider\n+        int dimension = 0;\n+        while ((dimension < n) && (singularValues[dimension] >= minSingularValue)) {\n+            ++dimension;\n+        }\n+\n+        if (dimension == 0) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"cutoff singular value is {0}, should be at most {1}\",\n+                  minSingularValue, singularValues[0]);\n+        }\n+\n+        final double[][] data = new double[dimension][n];\n+        getVT().walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {\n+            /** {@inheritDoc} */\n+            @Override\n+            public void visit(final int row, final int column, final double value) {\n+                data[row][column] = value / singularValues[row];\n+            }\n+        }, 0, dimension - 1, 0, n - 1);\n+\n+        RealMatrix jv = new Array2DRowRealMatrix(data, false);\n+        return jv.transpose().multiply(jv);\n+\n+    }\n+\n+    /** {@inheritDoc} */\n     public double getNorm()\n         throws InvalidMatrixException {\n         return singularValues[0];\n--- a/src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java\n \n     }\n \n+    /** Test based on a dimension 4 Hadamard matrix. */\n+    public void testHadamard() {\n+        RealMatrix matrix = new Array2DRowRealMatrix(new double[][] {\n+                {15.0 / 2.0,  5.0 / 2.0,  9.0 / 2.0,  3.0 / 2.0 },\n+                { 5.0 / 2.0, 15.0 / 2.0,  3.0 / 2.0,  9.0 / 2.0 },\n+                { 9.0 / 2.0,  3.0 / 2.0, 15.0 / 2.0,  5.0 / 2.0 },\n+                { 3.0 / 2.0,  9.0 / 2.0,  5.0 / 2.0, 15.0 / 2.0 }\n+        }, false);\n+        SingularValueDecomposition svd = new SingularValueDecompositionImpl(matrix);\n+        assertEquals(16.0, svd.getSingularValues()[0], 1.0e-14);\n+        assertEquals( 8.0, svd.getSingularValues()[1], 1.0e-14);\n+        assertEquals( 4.0, svd.getSingularValues()[2], 1.0e-14);\n+        assertEquals( 2.0, svd.getSingularValues()[3], 1.0e-14);\n+\n+        RealMatrix fullCovariance = new Array2DRowRealMatrix(new double[][] {\n+                {  85.0 / 1024, -51.0 / 1024, -75.0 / 1024,  45.0 / 1024 },\n+                { -51.0 / 1024,  85.0 / 1024,  45.0 / 1024, -75.0 / 1024 },\n+                { -75.0 / 1024,  45.0 / 1024,  85.0 / 1024, -51.0 / 1024 },\n+                {  45.0 / 1024, -75.0 / 1024, -51.0 / 1024,  85.0 / 1024 }\n+        }, false);\n+        assertEquals(0.0,\n+                     fullCovariance.subtract(svd.getCovariance(0.0)).getNorm(),\n+                     1.0e-14);\n+\n+        RealMatrix halfCovariance = new Array2DRowRealMatrix(new double[][] {\n+                {   5.0 / 1024,  -3.0 / 1024,   5.0 / 1024,  -3.0 / 1024 },\n+                {  -3.0 / 1024,   5.0 / 1024,  -3.0 / 1024,   5.0 / 1024 },\n+                {   5.0 / 1024,  -3.0 / 1024,   5.0 / 1024,  -3.0 / 1024 },\n+                {  -3.0 / 1024,   5.0 / 1024,  -3.0 / 1024,   5.0 / 1024 }\n+        }, false);\n+        assertEquals(0.0,\n+                     halfCovariance.subtract(svd.getCovariance(6.0)).getNorm(),\n+                     1.0e-14);\n+\n+    }\n+\n     /** test A = USVt */\n     public void testAEqualUSVt() {\n         checkAEqualUSVt(MatrixUtils.createRealMatrix(testSquare));", "timestamp": 1246040877, "metainfo": ""}