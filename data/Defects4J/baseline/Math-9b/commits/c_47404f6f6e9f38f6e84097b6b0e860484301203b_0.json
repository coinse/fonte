{"sha": "47404f6f6e9f38f6e84097b6b0e860484301203b", "log": "Made RandomDataImpl consistently use a Well generator as the default random generator. This completes the fix for JIRA: MATH-701.  The inconsistency was reported by Dennis Hendricks in JIRA: MATH-720.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/random/RandomDataImpl.java\n+++ b/src/main/java/org/apache/commons/math/random/RandomDataImpl.java\n     }\n \n     /**\n-     * Construct a RandomDataImpl.\n+     * Construct a RandomDataImpl, using a default random generator as the source\n+     * of randomness.\n+     *\n+     * <p>The default generator is a {@link Well19937c} seeded\n+     * with {@code System.currentTimeMillis() + System.identityHashCode(this))}.\n+     * The generator is initialized and seeded on first use.</p>\n      */\n     public RandomDataImpl() {\n     }\n      * the source of (non-secure) random data.\n      *\n      * @param rand the source of (non-secure) random data\n-     * (may be null, resulting in default JDK-supplied generator)\n+     * (may be null, resulting in the default generator)\n      * @since 1.1\n      */\n     public RandomDataImpl(RandomGenerator rand) {\n      */\n     private RandomGenerator getRan() {\n         if (rand == null) {\n-            rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));\n+            initRan();\n         }\n         return rand;\n+    }\n+\n+    /**\n+     * Sets the default generator to a {@link Well19937c} generator seeded with\n+     * {@code System.currentTimeMillis() + System.identityHashCode(this))}.\n+     */\n+    private void initRan() {\n+        rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));\n     }\n \n     /**\n      */\n     public void reSeed(long seed) {\n         if (rand == null) {\n-            rand = new JDKRandomGenerator();\n+            initRan();\n         }\n         rand.setSeed(seed);\n     }\n     }\n \n     /**\n-     * Reseeds the random number generator with the current time in\n-     * milliseconds.\n+     * Reseeds the random number generator with\n+     * {@code System.currentTimeMillis() + System.identityHashCode(this))}.\n      */\n     public void reSeed() {\n         if (rand == null) {\n-            rand = new JDKRandomGenerator();\n-        }\n-        rand.setSeed(System.currentTimeMillis());\n+            initRan();\n+        }\n+        rand.setSeed(System.currentTimeMillis() + System.identityHashCode(this));\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/math/random/RandomDataTest.java\n+++ b/src/test/java/org/apache/commons/math/random/RandomDataTest.java\n         }\n         TestUtils.assertChiSquareAccept(densityPoints, expectedCounts, observedCounts, .001);\n     }\n+    \n+    @Test\n+    /**\n+     * MATH-720\n+     */\n+    public void testReseed() {\n+        PoissonDistribution x = new PoissonDistribution(3.0);\n+        x.reseedRandomGenerator(0);\n+        final double u = x.sample();\n+        PoissonDistribution y = new PoissonDistribution(3.0);\n+        y.reseedRandomGenerator(0);\n+        Assert.assertEquals(u, y.sample(), 0);\n+    }\n \n }", "timestamp": 1323653474, "metainfo": ""}