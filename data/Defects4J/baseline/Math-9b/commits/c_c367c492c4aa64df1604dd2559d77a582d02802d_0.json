{"sha": "c367c492c4aa64df1604dd2559d77a582d02802d", "log": "No point catching and then calling fail - just let JUnit do the work  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java\n     public void testParseSimpleNoDecimals() {\n         String source = \"{1; 1; 1}\";\n         ArrayRealVector expected = new ArrayRealVector(new double[] {1, 1, 1});\n-        try {\n-            ArrayRealVector actual = realVectorFormat.parse(source);\n-            Assert.assertEquals(expected, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        ArrayRealVector actual = realVectorFormat.parse(source);\n+        Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n             \"43; 1\" + getDecimalCharacter() +\n             \"63}\";\n         ArrayRealVector expected = new ArrayRealVector(new double[] {1.23, 1.43, 1.63});\n-        try {\n-            ArrayRealVector actual = realVectorFormat.parse(source);\n-            Assert.assertEquals(expected, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        ArrayRealVector actual = realVectorFormat.parse(source);\n+        Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n             \"4343; 1\" + getDecimalCharacter() +\n             \"6333}\";\n         ArrayRealVector expected = new ArrayRealVector(new double[] {1.2323, 1.4343, 1.6333});\n-        try {\n-            ArrayRealVector actual = realVectorFormat.parse(source);\n-            Assert.assertEquals(expected, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        ArrayRealVector actual = realVectorFormat.parse(source);\n+        Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n             \"4343; 1\" + getDecimalCharacter() +\n             \"6333}\";\n         ArrayRealVector expected = new ArrayRealVector(new double[] {-1.2323, 1.4343, 1.6333});\n-        try {\n-            ArrayRealVector actual = realVectorFormat.parse(source);\n-            Assert.assertEquals(expected, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        ArrayRealVector actual = realVectorFormat.parse(source);\n+        Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n             \"4343; 1\" + getDecimalCharacter() +\n             \"6333}\";\n         ArrayRealVector expected = new ArrayRealVector(new double[] {1.2323, -1.4343, 1.6333});\n-        try {\n-            ArrayRealVector actual = realVectorFormat.parse(source);\n-            Assert.assertEquals(expected, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        ArrayRealVector actual = realVectorFormat.parse(source);\n+        Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n             \"4343; -1\" + getDecimalCharacter() +\n             \"6333}\";\n         ArrayRealVector expected = new ArrayRealVector(new double[] {1.2323, 1.4343, -1.6333});\n-        try {\n-            ArrayRealVector actual = realVectorFormat.parse(source);\n-            Assert.assertEquals(expected, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        ArrayRealVector actual = realVectorFormat.parse(source);\n+        Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n             \"4343; -1\" + getDecimalCharacter() +\n             \"6333}\";\n         ArrayRealVector expected = new ArrayRealVector(new double[] {-1.2323, -1.4343, -1.6333});\n-        try {\n-            ArrayRealVector actual = realVectorFormat.parse(source);\n-            Assert.assertEquals(expected, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        ArrayRealVector actual = realVectorFormat.parse(source);\n+        Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n             \"4343; 1\" + getDecimalCharacter() +\n             \"6333}\";\n         ArrayRealVector expected = new ArrayRealVector(new double[] {0.0, -1.4343, 1.6333});\n-        try {\n-            ArrayRealVector actual = realVectorFormat.parse(source);\n-            Assert.assertEquals(expected, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        ArrayRealVector actual = realVectorFormat.parse(source);\n+        Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n             \"4343 : 1\" + getDecimalCharacter() +\n             \"6333]\";\n         ArrayRealVector expected = new ArrayRealVector(new double[] {1.2323, 1.4343, 1.6333});\n-        try {\n-            ArrayRealVector actual = realVectorFormatSquare.parse(source);\n-            Assert.assertEquals(expected, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        ArrayRealVector actual = realVectorFormatSquare.parse(source);\n+        Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n     public void testParseNan() {\n         String source = \"{(NaN); (NaN); (NaN)}\";\n-        try {\n-            ArrayRealVector actual = realVectorFormat.parse(source);\n-            Assert.assertEquals(new ArrayRealVector(new double[] {Double.NaN, Double.NaN, Double.NaN}), actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        ArrayRealVector actual = realVectorFormat.parse(source);\n+        Assert.assertEquals(new ArrayRealVector(new double[] {Double.NaN, Double.NaN, Double.NaN}), actual);\n     }\n \n     @Test\n     public void testParsePositiveInfinity() {\n         String source = \"{(Infinity); (Infinity); (Infinity)}\";\n-        try {\n-            ArrayRealVector actual = realVectorFormat.parse(source);\n-            Assert.assertEquals(new ArrayRealVector(new double[] {\n-                    Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY\n-            }), actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        ArrayRealVector actual = realVectorFormat.parse(source);\n+        Assert.assertEquals(new ArrayRealVector(new double[] {\n+                Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY\n+        }), actual);\n     }\n \n     @Test\n     public void testParseNegativeInfinity() {\n         String source = \"{(-Infinity); (-Infinity); (-Infinity)}\";\n-        try {\n-            ArrayRealVector actual = realVectorFormat.parse(source);\n-            Assert.assertEquals(new ArrayRealVector(new double[] {\n-                    Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY\n-            }), actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        ArrayRealVector actual = realVectorFormat.parse(source);\n+        Assert.assertEquals(new ArrayRealVector(new double[] {\n+                Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY\n+        }), actual);\n     }\n \n     @Test", "timestamp": 1296610669, "metainfo": ""}