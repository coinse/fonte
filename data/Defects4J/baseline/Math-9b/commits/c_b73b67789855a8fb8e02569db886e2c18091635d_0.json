{"sha": "b73b67789855a8fb8e02569db886e2c18091635d", "log": "Javadoc.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/StatUtils.java\n+++ b/src/java/org/apache/commons/math/stat/StatUtils.java\n  * StatUtils provides easy static implementations of common double[] based\n  * statistical methods. These return a single result value or in some cases, as\n  * identified in the javadoc for each method, Double.NaN.\n- * @version $Revision: 1.24 $ $Date: 2004/02/21 21:35:15 $\n+ * @version $Revision: 1.25 $ $Date: 2004/03/04 04:25:09 $\n  */\n public final class StatUtils {\n \n      * The sum of the values that have been added to Univariate.\n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n-     * @param length processing at this point in the array\n+     * @param length the number of elements to include\n      * @return the sum of the values or Double.NaN if the array is empty\n      */\n     public static double sum(\n      * Returns the sum of the squares of the available values.\n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n-     * @param length processing at this point in the array\n+     * @param length the number of elements to include\n      * @return the sum of the squared values or Double.NaN if the array is empty\n      */\n     public static double sumSq(\n      * Returns the product for this collection of values\n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n-     * @param length processing at this point in the array\n+     * @param length the number of elements to include\n      * @return the product values or Double.NaN if the array is empty\n      */\n     public static double product(\n      * Returns the sum of the natural logs for this collection of values\n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n-     * @param length processing at this point in the array\n+     * @param length the number of elements to include\n      * @return the sumLog value or Double.NaN if the array is empty\n      */\n     public static double sumLog(\n       * arithmetic mean </a> of the available values\n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n-     * @param length processing at this point in the array\n+     * @param length the number of elements to include\n       * @return the mean of the values or Double.NaN if the array is empty\n       */\n     public static double mean(\n      *\n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n-     * @param length processing at this point in the array\n+     * @param length the number of elements to include\n      * @return the result, Double.NaN if no values for an empty array\n      * or 0.0 for a single value set.\n      */\n      * Returns the maximum of the available values\n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n-     * @param length processing at this point in the array\n+     * @param length the number of elements to include\n      * @return the maximum of the values or Double.NaN if the array is empty\n      */\n     public static double max(\n      * Returns the minimum of the available values\n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n-     * @param length processing at this point in the array\n+     * @param length the number of elements to include\n      * @return the minimum of the values or Double.NaN if the array is empty\n      */\n     public static double min(\n      * \n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n-     * @param length processing at this point in the array\n+     * @param length the number of elements to include\n      * @param p the requested percentile (scaled from 0 - 100)\n      * @return An estimate for the pth percentile of the data values\n      */\n--- a/src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java\n  * Abstract Implementation for UnivariateStatistics.\n  * Provides the ability to extend polymophically so that\n  * indiviual statistics do not need to implement these methods.\n- * @version $Revision: 1.12 $ $Date: 2004/02/21 21:35:15 $\n+ * @version $Revision: 1.13 $ $Date: 2004/03/04 04:25:09 $\n  */\n public abstract class AbstractUnivariateStatistic\n     implements UnivariateStatistic {\n      *  should continue, or return <code>Double.NaN</code> </p>\n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n-     * @param length processing at this point in the array\n+     * @param length the number of elements to include\n      * @return true if the array has postive length\n      * @throws IllegalArgumentException if the indices are invalid or the array is null\n      */\n--- a/src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java\n  * double[] based content using an implemented statistical approach.\n  * The interface provides two \"stateless\" simple methods to calculate\n  * a statistic from a double[] based parameter.\n- * @version $Revision: 1.12 $ $Date: 2004/02/21 21:35:15 $\n+ * @version $Revision: 1.13 $ $Date: 2004/03/04 04:25:09 $\n  */\n public interface UnivariateStatistic {\n \n      * of the evaluation.\n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n-     * @param length processing at this point in the array\n+     * @param length the number of elements to include\n      * @return the result of the evaluation or Double.NaN\n      * if the array is empty\n      */\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java\n /**\n  * Returns the <a href=\"http://www.xycoon.com/geometric_mean.htm\">\n  * geometric mean </a> of the available values\n- * @version $Revision: 1.16 $ $Date: 2004/02/21 21:35:15 $\n+ * @version $Revision: 1.17 $ $Date: 2004/03/04 04:25:09 $\n  */\n public class GeometricMean extends SumOfLogs implements Serializable{\n \n      * Returns the geometric mean for this collection of values\n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n-     * @param length processing at this point in the array\n+     * @param length the number of elements to include\n      * @return the geometric mean or Double.NaN if the array is empty or\n      * any of the values are &lt;= 0.\n      * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java\n     .AbstractStorelessUnivariateStatistic;\n \n /**\n- * @version $Revision: 1.16 $ $Date: 2004/02/21 21:35:15 $\n+ * @version $Revision: 1.17 $ $Date: 2004/03/04 04:25:09 $\n  */\n public class Kurtosis extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n      * </p>\n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n-     * @param length processing at this point in the array\n+     * @param length the number of elements to include\n      * @return the kurtosis of the values or Double.NaN if the array is empty\n      */\n     public double evaluate(\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Mean.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Mean.java\n /**\n  * Returns the <a href=\"http://www.xycoon.com/arithmetic_mean.htm\">\n  * arithmetic mean </a> of the available values.\n- * @version $Revision: 1.15 $ $Date: 2004/02/21 21:35:15 $\n+ * @version $Revision: 1.16 $ $Date: 2004/03/04 04:25:09 $\n  */\n public class Mean extends AbstractStorelessUnivariateStatistic implements Serializable{\n \n      * arithmetic mean </a> of a double[] of the available values.\n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n-     * @param length processing at this point in the array\n+     * @param length the number of elements to include\n      * @return the mean of the values or Double.NaN if the array is empty\n      * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n      */\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java\n import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;\n \n /**\n- * @version $Revision: 1.16 $ $Date: 2004/02/21 21:35:15 $\n+ * @version $Revision: 1.17 $ $Date: 2004/03/04 04:25:09 $\n  */\n public class Skewness extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n      * </p>\n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n-     * @param length processing at this point in the array\n+     * @param length the number of elements to include\n      * @return the skewness of the values or Double.NaN if the array is empty\n      * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n      */\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java\n \n /**\n  *\n- * @version $Revision: 1.14 $ $Date: 2004/02/21 21:35:15 $\n+ * @version $Revision: 1.15 $ $Date: 2004/03/04 04:25:09 $\n  */\n public class StandardDeviation extends Variance implements Serializable {\n \n      * Returns the Standard Deviation on an array of values.\n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n-     * @param length processing at this point in the array\n+     * @param length the number of elements to include\n      * @return the result, Double.NaN if no values for an empty array\n      * or 0.0 for a single value set.\n      * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Variance.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Variance.java\n  * J. G. Lewis 1979, <i>Communications of the ACM</i>,\n  * vol. 22 no. 9, pp. 526-531.</a>.\n  * \n- * @version $Revision: 1.17 $ $Date: 2004/02/21 21:35:15 $\n+ * @version $Revision: 1.18 $ $Date: 2004/03/04 04:25:09 $\n  */\n public class Variance extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n      * </p>\n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n-     * @param length processing at this point in the array\n+     * @param length the number of elements to include\n      * @return the result, Double.NaN if no values for an empty array\n      * or 0.0 for a single value set.\n      * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java\n import org.apache.commons.math.stat.univariate.AbstractUnivariateStatistic;\n \n /**\n- * @version $Revision: 1.13 $ $Date: 2004/02/21 21:35:16 $\n+ * @version $Revision: 1.14 $ $Date: 2004/03/04 04:25:09 $\n  */\n public class Percentile extends AbstractUnivariateStatistic implements Serializable {\n \n      * statistic.\n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n-     * @param length processing at this point in the array\n+     * @param length the number of elements to include\n      * @param p Is the percentile to evaluate to.*\n      * @return the result of the evaluation or Double.NaN\n      * if the array is empty\n--- a/src/java/org/apache/commons/math/stat/univariate/summary/Product.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/Product.java\n     .AbstractStorelessUnivariateStatistic;\n \n /**\n- * @version $Revision: 1.14 $ $Date: 2004/02/21 21:35:16 $\n+ * @version $Revision: 1.15 $ $Date: 2004/03/04 04:25:09 $\n  */\n public class Product extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n      * Returns the product for this collection of values\n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n-     * @param length processing at this point in the array\n+     * @param length the number of elements to include\n      * @return the product values or Double.NaN if the array is empty\n      * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n      */\n--- a/src/java/org/apache/commons/math/stat/univariate/summary/Sum.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/Sum.java\n import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;\n \n /**\n- * @version $Revision: 1.16 $ $Date: 2004/02/21 21:35:16 $\n+ * @version $Revision: 1.17 $ $Date: 2004/03/04 04:25:09 $\n  */\n public class Sum extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n      * The sum of the values that have been added to Univariate.\n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n-     * @param length processing at this point in the array\n+     * @param length the number of elements to include\n      * @return the sum of the values or Double.NaN if the array is empty\n      * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n      */\n--- a/src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java\n     .AbstractStorelessUnivariateStatistic;\n \n /**\n- * @version $Revision: 1.14 $ $Date: 2004/02/21 21:35:16 $\n+ * @version $Revision: 1.15 $ $Date: 2004/03/04 04:25:09 $\n  */\n public class SumOfLogs extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n      * Returns the sum of the natural logs for this collection of values\n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n-     * @param length processing at this point in the array\n+     * @param length the number of elements to include\n      * @return the sumLog value or Double.NaN if the array is empty\n      * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n      */\n--- a/src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java\n     .AbstractStorelessUnivariateStatistic;\n \n /**\n- * @version $Revision: 1.14 $ $Date: 2004/02/21 21:35:16 $\n+ * @version $Revision: 1.15 $ $Date: 2004/03/04 04:25:09 $\n  */\n public class SumOfSquares extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n      * Returns the sum of the squares of the available values.\n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n-     * @param length processing at this point in the array\n+     * @param length the number of elements to include\n      * @return the sum of the squared values or Double.NaN if the array is empty\n      * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n      */", "timestamp": 1078374309, "metainfo": ""}