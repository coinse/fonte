{"sha": "28c785435a37f540663a67ad082a9674ab0816f2", "log": "PR: http://nagoya.apache.org/bugzilla/show_bug.cgi?id=21295 Submitted by:\tbrent@worden.org   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n  */\n package org.apache.commons.math.stat;\n \n-import java.util.Hashtable;\n-import java.util.Enumeration;\n+import java.util.Iterator;\n+\n+import org.apache.commons.collections.Bag;\n+import org.apache.commons.collections.HashBag;\n \n /** \n  * Maintains a frequency distribution. <br>\n  *\n  * @author Phil Steitz\n  */\n-\n public class Frequency {\n-\n+    /** name for this frequency distribution. */\n     private String name;\n \n-    private Hashtable freqTable;\n+    /** underlying collection */\n+    private Bag freqTable = new HashBag();\n \n-    /** instance initializer */\n-    {\n-        freqTable = new Hashtable();\n+    /**\n+     * Default constructor.\n+     */\n+    public Frequency() {\n+        this(null);\n     }\n \n-    public Frequency() {\n-    }\n-\n+    /**\n+     * Construct a frequency distribution with the given name.\n+     * @param name the name for the new distribution.\n+     */\n     public Frequency(String name) {\n+        super();\n         this.name = name;\n     }\n \n+    /**\n+     * Return a string representation of describing this frequency\n+     * distribution.\n+     * @return a string representation.\n+     */\n     public String toString() {\n         StringBuffer outBuffer = new StringBuffer();\n         outBuffer.append(\"Value \\t Frequency \\n\");\n-        Enumeration e = freqTable.keys();\n-        Long count = null;\n-        String value = null;\n-        while (e.hasMoreElements()) {\n-            value = (String)e.nextElement();\n-            count = (Long)freqTable.get(value);\n+        Iterator iter = freqTable.uniqueSet().iterator();\n+        while (iter.hasNext()) {\n+            Object value = iter.next();\n             outBuffer.append(value);\n-            outBuffer.append(\"\\t\");\n-            outBuffer.append(count.toString());\n-            outBuffer.append(\"\\n\");\n+            outBuffer.append('\\t');\n+            outBuffer.append(freqTable.getCount(value));\n+            outBuffer.append('\\n');\n         }\n         return outBuffer.toString();\n     }\n \n-    public String toXML() {\n-        throw new UnsupportedOperationException(\"not implemented yet\");\n+    /**\n+     * Adds 1 to the frequency count for v\n+     * @param v the value to add.\n+     */\n+    public void addValue(String v) {\n+        freqTable.add(v);\n     }\n \n-    /** Adds 1 to the frequency count for v */\n-    public void addValue(java.lang.String v) {\n-        insertValue(v);\n+    /**\n+     * Adds 1 to the frequency count for v\n+     * @param v the value to add.\n+     */\n+    public void addValue(int v) {\n+        addValue((new Integer(v)).toString());\n     }\n \n-    /** Adds 1 to the frequency count for v */\n-    public void addValue(int v) {\n-        insertValue((new Integer(v)).toString());\n+    /**\n+     * Adds 1 to the frequency count for v.\n+     * @param v the value to add.\n+     */\n+    public void addValue(long v) {\n+        addValue((new Long(v)).toString());\n     }\n \n-    /** Adds 1 to the frequency count for v */\n-    public void addValue(long v) {\n-        insertValue((new Long(v)).toString());\n+    /**\n+     * Returns the number of values = v\n+     * @param v the value to lookup.\n+     * @return the absolute frequency of v.\n+     */\n+    public long getCount(String v) {\n+        return freqTable.getCount(v);\n     }\n-    \n-    /** Returns the number of values = v */\n-    public long getCount(String v) {\n-        Long ct = (Long)freqTable.get(v);\n-        if (ct == null) {\n-            return 0;\n-        } else {\n-            return ct.longValue();\n-        }\n+\n+    /**\n+     * Returns the sum of all frequencies\n+     * @return the aggregate frequency.\n+     */\n+    public long getSumFreq() {\n+        return freqTable.size();\n     }\n-    \n-    /** Returns the sum of all frequencies */\n-    public long getSumFreq() {\n-        Enumeration e = freqTable.keys();\n-        long count = 0;\n-        String value = null;\n-        while (e.hasMoreElements()) {\n-            value = (String)e.nextElement();\n-            count += ((Long)freqTable.get(value)).longValue();\n-        }\n-        return count;\n+\n+    /**\n+     * Returns the percentage of values = v.\n+     * @param v the value to lookup.\n+     * @return the relative frequency of v.\n+     */\n+    public double getPct(String v) {\n+        return (double) getCount(v) / (double) getSumFreq();        \n     }\n-    \n-    /** Returns the percentage of values = v */\n-    public double getPct(String v) {\n-        return (new Double(getCount(v))).doubleValue()\n-                   /(new Double(getSumFreq())).doubleValue();\n-    }\n-    \n+\n     /** Clears the frequency table */\n     public void clear() {\n         freqTable.clear();\n-    }\n-        \n-    /** Adds 1 to the frequency count for v */\n-    private void insertValue(String v) {\n-        Long ct = (Long)freqTable.get(v);\n-        if (ct == null) {\n-            Long val = new Long(1);\n-            freqTable.put(v,val);\n-        } else {\n-            freqTable.put(v,(new Long(ct.longValue()+1)));\n-        }\n     }\n \n     /** Getter for property name.\n      * @return Value of property name.\n      */\n-    public java.lang.String getName() {\n+    public String getName() {\n         return name;\n-    }    \n+    }\n \n     /** Setter for property name.\n      * @param name New value of property name.\n     public void setName(java.lang.String name) {\n         this.name = name;\n     }\n-    \n+\n }", "timestamp": 1057427897, "metainfo": ""}