{"sha": "4ce05bcd51ec956d789d20b59c743603d24a8ab7", "log": "Modified NormalDistributionImpl.cumulativeProbablity to catch MaxIterationsExceededException and return 0 or 1, resp. if the argument is more than 20 standard deviations from the mean.  JIRA: MATH-167   ", "commit": "\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n import java.io.Serializable;\n \n import org.apache.commons.math.MathException;\n+import org.apache.commons.math.MaxIterationsExceededException;\n import org.apache.commons.math.special.Erf;\n \n /**\n      * For this disbution, X, this method returns P(X &lt; <code>x</code>).\n      * @param x the value at which the CDF is evaluated.\n      * @return CDF evaluted at <code>x</code>. \n-     * @throws MathException if the algorithm fails to converge.\n+     * @throws MathException if the algorithm fails to converge; unless\n+     * x is more than 20 standard deviations from the mean, in which case the\n+     * convergence exception is caught and 0 or 1 is returned.\n      */\n     public double cumulativeProbability(double x) throws MathException {\n-        return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                (standardDeviation * Math.sqrt(2.0))));\n+        try {\n+            return 0.5 * (1.0 + Erf.erf((x - mean) /\n+                    (standardDeviation * Math.sqrt(2.0))));\n+        } catch (MaxIterationsExceededException ex) {\n+            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n+                return 0.0d;\n+            } else if (x > (mean + 20 * standardDeviation)) {\n+                return 1.0d;\n+            } else {\n+                throw ex;\n+            }\n+        }\n     }\n     \n     /**\n--- a/src/test/org/apache/commons/math/distribution/NormalDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/NormalDistributionTest.java\n             // Expected\n         }\n     }\n+    \n+    /**\n+     * Check to make sure top-coding of extreme values works correctly.\n+     * Verifies fix for JIRA MATH-167\n+     */\n+    public void testExtremeValues() throws Exception {\n+        NormalDistribution distribution = (NormalDistribution) getDistribution();\n+        distribution.setMean(0);\n+        distribution.setStandardDeviation(1);\n+        for (int i = 0; i < 100; i+=5) { // make sure no convergence exception\n+            double lowerTail = distribution.cumulativeProbability((double)-i);\n+            double upperTail = distribution.cumulativeProbability((double) i);\n+            if (i < 10) { // make sure not top-coded\n+                assertTrue(lowerTail > 0.0d);\n+                assertTrue(upperTail < 1.0d);\n+            }\n+            else { // make sure top coding not reversed\n+                assertTrue(lowerTail < 0.00001);\n+                assertTrue(upperTail > 0.99999);\n+            }\n+        } \n+   }\n }", "timestamp": 1185071588, "metainfo": ""}