{"sha": "c18e59702f96f5cbe879e6375ba9f50726c20bb5", "log": "* Fixed all checkstyle errors and eliminated redundant NaN checks.  Now have 100% test path coverage.  * Used distribution framework TDistribution to implement getSlopeConfidenceInterval and getSignificance methods.  PR: Issue #20657 Obtained from: Bugzilla Submitted by: Phil Steitz Reviewed by: Tim O'Brien   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/BivariateRegression.java\n+++ b/src/java/org/apache/commons/math/stat/BivariateRegression.java\n  * individuals on behalf of the Apache Software Foundation.  For more\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n- *\n  */\n \n package org.apache.commons.math.stat;\n+import org.apache.commons.math.stat.distribution.DistributionFactory;\n+import org.apache.commons.math.stat.distribution.TDistribution;\n \n /**\n  * Estimates an ordinary least squares regression model\n- * with one independent variable: <p>\n- *\n- * y = intercept + slope * x  </code><p>\n- *\n+ * with one independent variable.\n+ * <p>\n+ * <code> y = intercept + slope * x  </code>\n+ * <p>\n  * Standard errors for <code>intercept</code> and <code>slope</code> are \n- * available as well as ANOVA, r-square and Pearson's r statistics.<p>\n- *\n+ * available as well as ANOVA, r-square and Pearson's r statistics.\n+ * <p>\n  * Observations (x,y pairs) can be added to the model one at a time or they \n  * can be provided in a 2-dimensional array.  The observations are not stored\n  * in memory, so there is no limit to the number of observations that can be\n- * added to the model. <p>\n- *\n+ * added to the model. \n+ * <p>\n  * <strong>Usage Notes</strong>: <ul>\n  * <li> When there are fewer than two observations in the model, or when\n  * there is no variation in the x values (i.e. all x values are the same) \n  * all statistics return <code>NaN</code>. At least two observations with\n- * different x coordinates are requred to estimate a bivariate regression model.</li>\n+ * different x coordinates are requred to estimate a bivariate regression \n+ * model.\n+ * </li>\n  * <li> getters for the statistics always compute values based on the current\n  * set of observations -- i.e., you can get statistics, then add more data\n  * and get updated statistics without using a new instance.  There is no \n  * </ul>\n  *\n  * @author  Phil Steitz\n- * @version $Revision: 1.1 $ $Date: 2003/05/29 20:35:45 $\n+ * @version $Revision: 1.2 $ $Date: 2003/06/11 03:33:05 $\n  */\n public class BivariateRegression {\n     \n      */\n     public void addData(double x, double y) {\n         sumX += x;\n-        sumSqX += x*x;\n+        sumSqX += x * x;\n         sumY += y;\n-        sumSqY += y*y;\n-        sumXY += x*y;\n+        sumSqY += y * y;\n+        sumXY += x * y;\n         n++;\n     } \n     \n     /**\n-     * Adds the observations represented by the elements in <code>data.</code><p>\n+     * Adds the observations represented by the elements in \n+     * <code>data</code>.\n+     * <p>\n      * <code>(data[0][0],data[0][1])</code> will be the first observation, then\n      * <code>(data[1][0],data[1][1])</code>, etc. <p> \n      * \n      * This method does not replace data that has already been added.  \n-     * To replace all data, use <code>clear()</code> before adding the new data.\n+     * To replace all data, use <code>clear()</code> before adding the new \n+     * data.\n      * \n      * @param data array of observations to be added\n      */\n     public void addData(double[][] data) {\n        for (int i = 0; i < data.length; i++) {\n-            addData(data[i][0],data[i][1]);\n+            addData(data[i][0], data[i][1]);\n        }\n     }\n     \n-    /*\n-     * Clears all data from the model\n+    /**\n+     * Clears all data from the model.\n      */\n     public void clear() {\n         sumX = 0d;\n     }\n           \n     /**\n-     * Returns the number of observations that have been added to the model\n+     * Returns the number of observations that have been added to the model.\n      *\n-     * @return n\n+     * @return n number of observations that have been added.\n      */\n     public long getN() {\n         return n;\n     \n     /**\n      * Returns the \"predicted\" <code>y</code> value associated with the \n-     * supplied <code>x</code> value. Specifically, <p>\n-     *\n-     * <code> predict(x) = intercept + slope * x </code> <p>\n-     *\n-     * At least two observations (with at least two different x values)\n+     * supplied <code>x</code> value.\n+     * <p>\n+     * <code> predict(x) = intercept + slope * x </code>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>At least two observations (with at least two different x values)\n      * must have been added before invoking this method. If this method is \n      * invoked before a model can be estimated, <code>Double,NaN</code> is\n      * returned.\n+     * </li></ul>\n      *\n      * @param x input <code>x</code> value\n      * @return predicted <code>y</code> value\n      */\n     public double predict(double x) {\n         double b1 = getSlope();\n-        if (b1 == Double.NaN) {\n-            return b1;\n-        }\n-        return getIntercept(b1) + b1*x;\n+        return getIntercept(b1) + b1 * x;\n     }\n     \n     /**\n      * Returns the intercept of the estimated regression line.\n-     * The least squares estimate of the intercept is computed using the normal\n-     * equations, as described \n-     * <a href=http://www.xycoon.com/estimation4.htm>here</a>.\n-     * The intercept is sometimes denoted b0. <p>\n-     *\n-     * At least two distinct data pairs (with at least two different x values)\n+     * <p>\n+     * The least squares estimate of the intercept is computed using the \n+     * <a href=\"http://www.xycoon.com/estimation4.htm\">normal equations</a>.\n+     * The intercept is sometimes denoted b0. \n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>At least two observations (with at least two different x values)\n      * must have been added before invoking this method. If this method is \n      * invoked before a model can be estimated, <code>Double,NaN</code> is\n      * returned.\n+     * </li></ul>\n      *\n      * @return the intercept of the regression line\n      */\n      \n      /**\n      * Returns the slope of the estimated regression line.  \n-     * The least squares estimate of the slope is computed using the normal\n-     * equations, as described \n-     * <a href=http://www.xycoon.com/estimation4.htm>here</a>.\n-     * The slope is sometimes denoted b1. <p>\n-     *\n-     * At least two observations (with at least two different x values)\n+     * <p>\n+     * The least squares estimate of the slope is computed using the \n+     * <a href=\"http://www.xycoon.com/estimation4.htm\">normal equations</a>.\n+     * The slope is sometimes denoted b1. \n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>At least two observations (with at least two different x values)\n      * must have been added before invoking this method. If this method is \n      * invoked before a model can be estimated, <code>Double,NaN</code> is\n      * returned.\n+     * </li></ul>\n      *\n      * @return the slope of the regression line\n      */\n              return Double.NaN;  //not enough data \n          }\n          double dn = (double) n;\n-         double denom = sumSqX - (sumX*sumX/dn);\n-         if (Math.abs(denom)< 10*Double.MIN_VALUE) { \n+         double denom = sumSqX - (sumX * sumX / dn);\n+         if (Math.abs(denom) < 10 * Double.MIN_VALUE) { \n              return Double.NaN; //not enough variation in x\n          }\n-         return (sumXY - (sumX*sumY/dn))/denom;\n-     }\n-     \n-     /**\n-      * Returns the sum of squared errors</a> associated with the regression \n-      * model. This is defined as SSE \n-      * <a href=http://www.xycoon.com/SumOfSquares.htm>here</a>. <p>\n-      *\n-      * At least two distinct data pairs (with at least two different x values)\n+         return (sumXY - (sumX * sumY / dn)) / denom;\n+     }\n+     \n+     /**\n+      * Returns the <a href=\"http://www.xycoon.com/SumOfSquares.htm\">\n+      * sum of squared errors</a> (SSE) associated with the regression \n+      * model.\n+      * <p>\n+      * <strong>Preconditions</strong>: <ul>\n+      * <li>At least two observations (with at least two different x values)\n       * must have been added before invoking this method. If this method is \n       * invoked before a model can be estimated, <code>Double,NaN</code> is\n       * returned.\n+      * </li></ul>\n       *\n       * @return sum of squared errors associated with the regression model\n       */\n      \n      /**\n       * Returns the sum of squared deviations of the y values about their mean.\n+      * <p>\n       * This is defined as SSTO \n-      * <a href=http://www.xycoon.com/SumOfSquares.htm>here</a>.\n-      * <p>\n-      * If n < 2, this returns NaN.\n+      * <a href=\"http://www.xycoon.com/SumOfSquares.htm\">here</a>.\n+      * <p>\n+      * If <code>n < 2</code>, this returns <code>Double.NaN</code>.\n       *\n       * @return sum of squared deviations of y values\n       */\n          if (n < 2) {\n              return Double.NaN;\n          }\n-         return sumSqY - sumY*sumY/(double) n;\n+         return sumSqY - sumY * sumY / (double) n;\n      }\n          \n      /**\n       * Returns the sum of squared deviations of the predicted y values about \n       * their mean (which equals the mean of y).\n+      * <p>\n       * This is usually abbreviated SSR or SSM.  It is defined as SSM \n-      * <a href=http://www.xycoon.com/SumOfSquares.htm>here</a><p>\n-      *\n-      * At least two distinct data pairs (with at least two different x values)\n+      * <a href=\"http://www.xycoon.com/SumOfSquares.htm\">here</a>\n+      * <p>\n+      * <strong>Preconditions</strong>: <ul>\n+      * <li>At least two observations (with at least two different x values)\n       * must have been added before invoking this method. If this method is \n       * invoked before a model can be estimated, <code>Double,NaN</code> is\n       * returned.\n+      * </li></ul>\n       *\n       * @return sum of squared deviations of y values\n       */\n      public double getRegressionSumSquares() {\n          double b1 = getSlope();\n-         if (b1 == Double.NaN) {\n-             return b1;\n-         }\n-         return b1*(sumXY - sumX*sumY/(double) n);\n-     }\n-     \n-     /**\n-      * Returns the sum of squared errors divided by the degrees of freedom.\n-      * This is usually abbreviated MSE. <p>\n-      *\n+         return b1 * (sumXY - sumX * sumY / (double) n);\n+     }\n+     \n+     /**\n+      * Returns the sum of squared errors divided by the degrees of freedom,\n+      * usually abbreviated MSE. \n+      * <p>\n       * If there are fewer than <strong>three</strong> data pairs in the model,\n-      * or if there is no variation in x, this returns <code>NaN</code>.\n+      * or if there is no variation in <code>x</code>, this returns \n+      * <code>Double.NaN</code>.\n       *\n       * @return sum of squared deviations of y values\n       */\n              return Double.NaN;\n          }\n          double sse = getSumSquaredErrors();\n-         if (sse == Double.NaN) {\n-             return sse;\n-         }\n-         return sse/(double) (n - 2);\n-     }\n-     \n-     /**\n-      * Returns <a href=http://www.stt.msu.edu/~xiaoyimi/STT200/Lecture5.pdf>\n-      * Pearson's product moment correlation coefficient</a>.\n-      * This is usually denoted r. <p>\n-      *\n-      * At least two observations (with at least two different x values)\n+         return sse / (double) (n - 2);\n+     }\n+     \n+     /**\n+      * Returns <a href=\"http://www.stt.msu.edu/~xiaoyimi/STT200/Lecture5.pdf\">\n+      * Pearson's product moment correlation coefficient</a>,\n+      * usually denoted r. \n+      * <p>\n+      * <strong>Preconditions</strong>: <ul>\n+      * <li>At least two observations (with at least two different x values)\n       * must have been added before invoking this method. If this method is \n       * invoked before a model can be estimated, <code>Double,NaN</code> is\n       * returned.\n+      * </li></ul>\n       *\n       * @return Pearson's r\n       */\n      public double getR() {\n          double b1 = getSlope();\n-         if (b1 == Double.NaN) {\n-             return b1;\n-         }\n          double result = Math.sqrt(getRSquare(b1));\n          if (b1 < 0) {\n              result = -result;\n      }\n              \n      /** \n-      * Returns the <a href=http://www.xycoon.com/coefficient1.htm> coefficient\n-      * of determination</a>.\n-      * This is usually denoted r-square. <p>\n-      *\n-      * At least two observaions (with at least two different x values)\n+      * Returns the <a href=\"http://www.xycoon.com/coefficient1.htm\"> \n+      * coefficient of determination</a>,\n+      * usually denoted r-square. \n+      * <p>\n+      * <strong>Preconditions</strong>: <ul>\n+      * <li>At least two observations (with at least two different x values)\n       * must have been added before invoking this method. If this method is \n       * invoked before a model can be estimated, <code>Double,NaN</code> is\n       * returned.\n+      * </li></ul>\n       *\n       * @return r-square\n       */\n      \n          \n      /**\n-      * Returns the <a href=http://www.xycoon.com/standarderrorb0.htm>standard\n-      * error of the intercept estimate</a>.\n-      * This is usually denoted s(b0). <p>\n-      *\n-      * If there are fewer that <strong>three</strong> observations in the model,\n-      * or if there is no variation in x, this returns <code>NaN</code>.\n+      * Returns the <a href=\"http://www.xycoon.com/standarderrorb0.htm\">\n+      * standard error of the intercept estimate</a>, \n+      * usually denoted s(b0). \n+      * <p>\n+      * If there are fewer that <strong>three</strong> observations in the \n+      * model, or if there is no variation in x, this returns \n+      * <code>Double.NaN</code>.\n       *\n       * @return standard error associated with intercept estimate\n       */\n      public double getInterceptStdErr() {\n          double ssx = getSumSquaresX();\n-         if (ssx == Double.NaN) {\n-             return ssx;\n-         }\n-         return Math.sqrt(getMeanSquareError()*sumSqX/(((double) n)*ssx));\n+         return Math.sqrt(getMeanSquareError() * sumSqX / (((double) n) * ssx));\n      }\n              \n      /**\n-      * Returns the <a http://www.xycoon.com/standerrorb(1).htm>standard\n-      * error of the slope estimate</a>.\n-      * This is usually denoted s(b1). <p>\n-      *\n+      * Returns the <a href=\"http://www.xycoon.com/standerrorb(1).htm\">standard\n+      * error of the slope estimate</a>,\n+      * usually denoted s(b1). \n+      * <p>\n       * If there are fewer that <strong>three</strong> data pairs in the model,\n-      * or if there is no variation in x, this returns <code>NaN</code>.\n+      * or if there is no variation in x, this returns <code>Double.NaN</code>.\n       *\n       * @return standard error associated with slope estimate\n       */\n      public double getSlopeStdErr() {\n          double ssx = getSumSquaresX();\n-         if (ssx == Double.NaN) {\n-             return ssx;\n-         }\n-         return Math.sqrt(getMeanSquareError()/ssx);\n+         return Math.sqrt(getMeanSquareError() / ssx);\n+     }\n+     \n+     /**\n+      * Returns the half-width of a 95% confidence interval for the slope\n+      * estimate.\n+      * <p>\n+      * The 95% confidence interval is \n+      * <p>\n+      * <code>(getSlope() - getSlopeConfidenceInterval(), \n+      * getSlope() + getSlopeConfidenceInterval())</code>\n+      * <p>\n+      * If there are fewer that <strong>three</strong> observations in the \n+      * model, or if there is no variation in x, this returns \n+      * <code>Double.NaN</code>.\n+      * <p>\n+      * <strong>Usage Note</strong>:<br>\n+      * The validity of this statistic depends on the assumption that the \n+      * observations included in the model are drawn from a\n+      * <a href=\"http://mathworld.wolfram.com/\n+      * BivariateNormalDistribution.html\">Bivariate Normal Distribution</a>.\n+      *\n+      * @return half-width of 95% confidence interval for the slope estimate\n+      */\n+     public double getSlopeConfidenceInterval() {   \n+        return getSlopeConfidenceInterval(0.05d); \n+     }\n+     \n+     /**\n+      * Returns the half-width of a (100-100*alpha)% confidence interval for \n+      * the slope estimate.\n+      * <p>\n+      * The (100-100*alpha)% confidence interval is \n+      * <p>\n+      * <code>(getSlope() - getSlopeConfidenceInterval(), \n+      * getSlope() + getSlopeConfidenceInterval())</code>\n+      * <p>\n+      * To request, for example, a 99% confidence interval, use \n+      * <code>alpha = .01</code>\n+      * <p>\n+      * <strong>Usage Note</strong>:<br>\n+      * The validity of this statistic depends on the assumption that the \n+      * observations included in the model are drawn from a\n+      * <a href=\"http://mathworld.wolfram.com/\n+      * BivariateNormalDistribution.html\">Bivariate Normal Distribution</a>.\n+      * <p>\n+      * <strong> Preconditions:</strong><ul>\n+      * <li>If there are fewer that <strong>three</strong> observations in the \n+      * model, or if there is no variation in x, this returns \n+      * <code>Double.NaN</code>. \n+      * </li>\n+      * <li><code>(0 < alpha < 1)</code>; otherwise an \n+      * <code>IllegalArgumentException</code> is thrown.\n+      * </li></ul>    \n+      *\n+      * @param alpha the desired significance level \n+      * @return half-width of 95% confidence interval for the slope estimate\n+      */\n+     public double getSlopeConfidenceInterval(double alpha) { \n+         if (alpha >= 1 || alpha <= 0) {\n+             throw new IllegalArgumentException();\n+         }\n+         return getSlopeStdErr() * \n+            getTDistribution().inverseCummulativeProbability(1d - alpha / 2d); \n+     }\n+     \n+     /**\n+      * Returns the significance level of the slope (equiv) correlation. \n+      * <p>\n+      * Specifically, the returned value is the smallest <code>alpha</code>\n+      * such that the slope confidence interval with significance level\n+      * equal to <code>alpha</code> does not include <code>0</code>.\n+      * On regression output, this is often denoted <code>Prob(|t| > 0)</code>\n+      * <p>\n+      * <strong>Usage Note</strong>:<br>\n+      * The validity of this statistic depends on the assumption that the \n+      * observations included in the model are drawn from a\n+      * <a href=\"http://mathworld.wolfram.com/\n+      * BivariateNormalDistribution.html\">Bivariate Normal Distribution</a>.\n+      * <p>\n+      * If there are fewer that <strong>three</strong> observations in the \n+      * model, or if there is no variation in x, this returns \n+      * <code>Double.NaN</code>.\n+      *\n+      * @return significance level for slope/correlation\n+      */\n+     public double getSignificance() {\n+         return (1d - getTDistribution().cummulativeProbability(\n+                Math.abs(getSlope()) / getSlopeStdErr()));\n      }\n      \n      // ---------------------Private methods-----------------------------------\n      \n      /**\n      * Returns the intercept of the estimated regression line, given the slope.\n+     * <p>\n      * Will return <code>NaN</code> if slope is <code>NaN</code>.\n      *\n      * @param slope current slope\n      * @return the intercept of the regression line\n      */\n      private double getIntercept(double slope) {\n-         if (slope == Double.NaN) {\n-             return slope;\n-         }\n-         return (sumY - slope*sumX)/((double) n);\n+         return (sumY - slope * sumX) / ((double) n);\n      }\n        \n      /**\n-      * Returns the sum of squared errors</a> associated with the regression \n-      * model, using the slope of the regression line.  Returns NaN if the slope\n-      * is NaN.\n-      *\n+      * Returns the sum of squared errors associated with the regression \n+      * model, using the slope of the regression line. \n+      * <p> \n+      * Returns NaN if the slope is NaN.\n+      * \n+      * @param b1 current slope\n       * @return sum of squared errors associated with the regression model\n       */\n      private double getSumSquaredErrors(double b1) {\n-         if (b1 == Double.NaN) {\n-             return b1;\n-         }\n          double b0 = getIntercept(b1);\n-         return sumSqY - b0*sumY - b1*sumXY;\n+         return sumSqY - b0 * sumY - b1 * sumXY;\n      } \n      \n      /**\n          if (n < 2) {\n              return Double.NaN;\n          }\n-         return sumSqX - sumX*sumX/(double) n;\n+         return sumSqX - sumX * sumX / (double) n;\n      }\n      \n      /** \n       * Computes r-square from the slope.\n-      * will return NaN if slope is Nan\n-      *\n+      * <p>\n+      * will return NaN if slope is Nan.\n+      *\n+      * @param b1 current slope\n       * @return r-square\n       */\n      private double getRSquare(double b1) {\n-         if (b1 == Double.NaN) {\n-             return b1;\n-         }\n          double ssto = getTotalSumSquares();\n-         if (ssto == Double.NaN) {\n-             return ssto;\n-         }\n-         return (ssto - getSumSquaredErrors(b1))/ssto;\n+         return (ssto - getSumSquaredErrors(b1)) / ssto;\n+     }\n+     \n+     /**\n+      * Uses distribution framework to get a t distribution instance \n+      * with df = n - 2\n+      *\n+      * @return t distribution with df = n - 2\n+      */\n+     private TDistribution getTDistribution() {\n+         return DistributionFactory.newInstance().createTDistribution(n - 2);\n      }\n }\n \n--- a/src/test/org/apache/commons/math/stat/BivariateRegressionTest.java\n+++ b/src/test/org/apache/commons/math/stat/BivariateRegressionTest.java\n  * Test cases for the TestStatistic class.\n  *\n  * @author Phil Steitz\n- * @version $Revision: 1.1 $ $Date: 2003/05/29 20:35:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/06/11 03:33:05 $\n  */\n \n public final class BivariateRegressionTest extends TestCase {\n         {90.6,111.6},{86.5,122.2},{89.7,117.6},{90.6,121.1},{82.8,136.0},\n         {70.1,154.2},{65.4,153.6},{61.3,158.5},{62.5,140.6},{63.6,136.2},\n         {52.6,168.0},{59.7,154.3},{59.5,149.0},{61.3,165.5}};\n+        \n+    /*\n+     * From Moore and Mcabe, \"Introduction to the Practice of Statistics\"\n+     * Example 10.3 \n+     */\n+    private double[][] infData = {{15.6,5.2},{26.8,6.1},{37.8,8.7},{36.4,8.5},\n+    {35.5,8.8},{18.6,4.9},{15.3,4.5},{7.9,2.5},{0.0,1.1}};\n+    \n+    /*\n+     * From http://www.xycoon.com/simple_linear_regression.htm\n+     */\n+    private double[][] infData2 = {{1,3},{2,5},{3,7},{4,14},{5,11}};\n     \n     public BivariateRegressionTest(String name) {\n         super(name);\n        regression.addData(data);\n        assertEquals(\"number of observations\",53,regression.getN());\n     }\n-                    \n+    \n+    public void testInference() {\n+       BivariateRegression regression = new BivariateRegression();\n+       regression.addData(infData);\n+       assertEquals(\"slope confidence interval\", 0.0271,\n+            regression.getSlopeConfidenceInterval(),0.0001);\n+       assertEquals(\"slope std err\",0.01146,\n+            regression.getSlopeStdErr(),0.0001);\n+       \n+       regression = new BivariateRegression();\n+       regression.addData(infData2);\n+       assertEquals(\"significance\", 0.023331,\n+            regression.getSignificance(),0.0001);\n+       \n+       //FIXME: get a real example to test against with alpha = .01\n+       assertTrue(\"tighter means wider\",\n+            regression.getSlopeConfidenceInterval() < \n+            regression.getSlopeConfidenceInterval(0.01));\n+       \n+       try {\n+           double x = regression.getSlopeConfidenceInterval(1);\n+           fail(\"expecting IllegalArgumentException for alpha = 1\");\n+       } catch (IllegalArgumentException ex) {\n+           ;\n+       }\n+       \n+    }                                        \n }\n ", "timestamp": 1055302385, "metainfo": ""}