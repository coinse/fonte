{"sha": "d69852bd95647bd188ff6058b2007e7109e92796", "log": "Clarified javadoc for nextPermutation (to match interface).  ", "commit": "\n--- a/src/java/org/apache/commons/math/random/RandomDataImpl.java\n+++ b/src/java/org/apache/commons/math/random/RandomDataImpl.java\n     }\n \n     /**\n-     * Uses a 2-cycle permutation shuffle to generate a random permutation.\n-     * The shuffling process is described\n+     * Generates an integer array of length <code>k</code> whose entries\n+     * are selected randomly, without repetition, from the integers\n+     * <code>0 through n-1</code> (inclusive).\n+     * <p>\n+     * Generated arrays represent permutations\n+     * of <code>n</code> taken <code>k</code> at a time.</p>\n+     * <p>\n+     * <strong>Preconditions:</strong><ul>\n+     * <li> <code>k <= n</code></li>\n+     * <li> <code>n > 0</code> </li>\n+     * </ul>\n+     * If the preconditions are not met, an IllegalArgumentException is\n+     * thrown.</p>\n+     * <p>\n+     * Uses a 2-cycle permutation shuffle. The shuffling process is described\n      * <a href=\"http://www.maths.abdn.ac.uk/~igc/tch/mx4002/notes/node83.html\">\n-     * here</a>.\n-     * @param n the population size.\n-     * @param k the number to choose.\n-     * @return the random permutation.\n+     * here</a>.</p>\n+     * \n+     * @param n domain of the permutation (must be positive)\n+     * @param k size of the permutation (must satisfy 0 < k <= n).\n+     * @return the random permutation as an int array\n      */\n     public int[] nextPermutation(int n, int k) {\n         if (k > n) {", "timestamp": 1227450429, "metainfo": ""}