{"sha": "cb6378b922641f920e5f3edc2d8a3a2b1ad0f65f", "log": "Changed matrix indexing to be 0-based.   ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/BigMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/BigMatrix.java\n /**\n  * Interface defining a real-valued matrix with basic algebraic operations, using\n  * BigDecimal representations for the entries.\n+ * <p>\n+ * Matrix element indexing is 0-based -- e.g., <code>getEntry(0, 0)</code>\n+ * returns the element in the first row, first column of the matrix.\n  *\n- * @version $Revision: 1.6 $ $Date: 2004/09/01 21:26:11 $\n+ * @version $Revision: 1.7 $ $Date: 2004/09/05 01:19:23 $\n  */\n public interface BigMatrix {\n \n     /**\n      * Returns the entries in row number <code>row</code> as an array.\n      * <p>\n-     * Row indices start at 1.  A <code>MatrixIndexException</code> is thrown\n-     * unless <code>0 < row <= rowDimension.</code>\n+     * Row indices start at 0.  A <code>MatrixIndexException</code> is thrown\n+     * unless <code>0 <= row < rowDimension.</code>\n      *\n      * @param row the row to be fetched\n      * @return array of entries in the row\n      * Returns the entries in row number <code>row</code> as an array\n      * of double values.\n      * <p>\n-     * Row indices start at 1.  A <code>MatrixIndexException</code> is thrown\n-     * unless <code>0 < row <= rowDimension.</code>\n+     * Row indices start at 0.  A <code>MatrixIndexException</code> is thrown\n+     * unless <code>0 <= row < rowDimension.</code>\n      *\n      * @param row the row to be fetched\n      * @return array of entries in the row\n     /**\n      * Returns the entries in column number <code>col</code> as an array.\n      * <p>\n-     * Column indices start at 1.  A <code>MatrixIndexException</code> is thrown\n-     * unless <code>0 < column <= columnDimension.</code>\n+     * Column indices start at 0.  A <code>MatrixIndexException</code> is thrown\n+     * unless <code>0 <= column < columnDimension.</code>\n      *\n      * @param col the column to be fetched\n      * @return array of entries in the column\n      * Returns the entries in column number <code>col</code> as an array\n      * of double values.\n      * <p>\n-     * Column indices start at 1.  A <code>MatrixIndexException</code> is thrown\n-     * unless <code>0 < column <= columnDimension.</code>\n+     * Column indices start at 0.  A <code>MatrixIndexException</code> is thrown\n+     * unless <code>0 <= column < columnDimension.</code>\n      *\n      * @param col the column to be fetched\n      * @return array of entries in the column\n     /**\n      * Returns the entry in the specified row and column.\n      * <p>\n-     * Row and column indices start at 1 and must satisfy \n-     * <ul>\n-     * <li><code>0 < row <= rowDimension</code></li>\n-     * <li><code> 0 < column <= columnDimension</code></li>\n+     * Row and column indices start at 0 and must satisfy \n+     * <ul>\n+     * <li><code>0 <= row < rowDimension</code></li>\n+     * <li><code> 0 <= column < columnDimension</code></li>\n      * </ul>\n      * otherwise a <code>MatrixIndexException</code> is thrown.\n      *\n     /**\n      * Returns the entry in the specified row and column as a double.\n      * <p>\n-     * Row and column indices start at 1 and must satisfy \n-     * <ul>\n-     * <li><code>0 < row <= rowDimension</code></li>\n-     * <li><code> 0 < column <= columnDimension</code></li>\n+     * Row and column indices start at 0 and must satisfy \n+     * <ul>\n+     * <li><code>0 <= row < rowDimension</code></li>\n+     * <li><code> 0 <= column < columnDimension</code></li>\n      * </ul>\n      * otherwise a <code>MatrixIndexException</code> is thrown.\n      *\n     /**\n      * Sets the entry in the specified row and column to the specified value.\n      * <p>\n-     * Row and column indices start at 1 and must satisfy \n-     * <ul>\n-     * <li><code>0 < row <= rowDimension</code></li>\n-     * <li><code> 0 < column <= columnDimension</code></li>\n+     * Row and column indices start at 0 and must satisfy \n+     * <ul>\n+     * <li><code>0 <= row < rowDimension</code></li>\n+     * <li><code> 0 <= column < columnDimension</code></li>\n      * </ul>\n      * otherwise a <code>MatrixIndexException</code> is thrown.\n      * \n     /**\n      * Sets the entry in the specified row and column to the specified value.\n      * <p>\n-     * Row and column indices start at 1 and must satisfy \n-     * <ul>\n-     * <li><code>0 < row <= rowDimension</code></li>\n-     * <li><code> 0 < column <= columnDimension</code></li>\n+     * Row and column indices start at 0 and must satisfy \n+     * <ul>\n+     * <li><code>0 <= row < rowDimension</code></li>\n+     * <li><code> 0 <= column < columnDimension</code></li>\n      * </ul>\n      * otherwise a <code>MatrixIndexException</code> is thrown.\n      * \n      * Sets the entry in the specified row and column to the \n      * <code>BigDecimal</code> value represented by the input string.\n      * <p>\n-     * Row and column indices start at 1 and must satisfy \n-     * <ul>\n-     * <li><code>0 < row <= rowDimension</code></li>\n-     * <li><code> 0 < column <= columnDimension</code></li>\n+     * Row and column indices start at 0 and must satisfy \n+     * <ul>\n+     * <li><code>0 <= row < rowDimension</code></li>\n+     * <li><code> 0 <= column < columnDimension</code></li>\n      * </ul>\n      * otherwise a <code>MatrixIndexException</code> is thrown.\n      * \n--- a/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n  * <li>getDeterminant</li>\n  * <li>inverse</li> </ul>\n  * <p>\n- * <strong>Usage note</strong>:<br>\n+* <strong>Usage notes</strong>:<br>\n+ * <ul><li>\n  * The LU decomposition is stored and reused on subsequent calls.  If matrix\n- * data are modified using any of the public setXxx methods, the saved \n+ * data are modified using any of the public setXxx methods, the saved\n  * decomposition is discarded.  If data are modified via references to the\n  * underlying array obtained using <code>getDataRef()</code>, then the stored\n- * LU decomposition will not be discarded.  In this case, you need to \n+ * LU decomposition will not be discarded.  In this case, you need to\n  * explicitly invoke <code>LUDecompose()</code> to recompute the decomposition\n- * before using any of the methods above.\n- *\n- * @version $Revision: 1.5 $ $Date: 2004/09/01 21:26:11 $\n+ * before using any of the methods above.</li>\n+ * <li>\n+ * As specified in the {@link BigMatrix} interface, matrix element indexing\n+ * is 0-based -- e.g., <code>getEntry(0, 0)</code>\n+ * returns the element in the first row, first column of the matrix.</li></ul>\n+ * @version $Revision: 1.6 $ $Date: 2004/09/05 01:19:23 $\n  */\n public class BigMatrixImpl implements BigMatrix, Serializable {\n     \n     /**\n      * Returns the entries in row number <code>row</code> as an array.\n      * <p>\n-     * Row indices start at 1.  A <code>MatrixIndexException</code> is thrown\n-     * unless <code>0 < row <= rowDimension.</code>\n+     * Row indices start at 0.  A <code>MatrixIndexException</code> is thrown\n+     * unless <code>0 <= row < rowDimension.</code>\n      *\n      * @param row the row to be fetched\n      * @return array of entries in the row\n      * @throws MatrixIndexException if the specified row index is not valid\n      */\n     public BigDecimal[] getRow(int row) throws MatrixIndexException {\n-        if ( !isValidCoordinate( row, 1 ) ) {\n+        if ( !isValidCoordinate( row, 0 ) ) {\n             throw new MatrixIndexException(\"illegal row argument\");\n         }\n         int ncols = this.getColumnDimension();\n         BigDecimal[] out = new BigDecimal[ncols];\n-        System.arraycopy(data[row - 1], 0, out, 0, ncols);\n+        System.arraycopy(data[row], 0, out, 0, ncols);\n         return out;\n     }\n     \n      * Returns the entries in row number <code>row</code> as an array\n      * of double values.\n      * <p>\n-     * Row indices start at 1.  A <code>MatrixIndexException</code> is thrown\n-     * unless <code>0 < row <= rowDimension.</code>\n+     * Row indices start at 0.  A <code>MatrixIndexException</code> is thrown\n+     * unless <code>0 <= row < rowDimension.</code>\n      *\n      * @param row the row to be fetched\n      * @return array of entries in the row\n      * @throws MatrixIndexException if the specified row index is not valid\n      */\n     public double[] getRowAsDoubleArray(int row) throws MatrixIndexException {\n-        if ( !isValidCoordinate( row, 1 ) ) {\n+        if ( !isValidCoordinate( row, 0 ) ) {\n             throw new MatrixIndexException(\"illegal row argument\");\n         }\n         int ncols = this.getColumnDimension();\n         double[] out = new double[ncols];\n         for (int i=0;i<ncols;i++) {\n-            out[i] = data[row-1][i].doubleValue();\n+            out[i] = data[row][i].doubleValue();\n         }\n         return out;\n     }\n      /**\n      * Returns the entries in column number <code>col</code> as an array.\n      * <p>\n-     * Column indices start at 1.  A <code>MatrixIndexException</code> is thrown\n-     * unless <code>0 < column <= columnDimension.</code>\n+     * Column indices start at 0.  A <code>MatrixIndexException</code> is thrown\n+     * unless <code>0 <= column < columnDimension.</code>\n      *\n      * @param col the column to be fetched\n      * @return array of entries in the column\n      * @throws MatrixIndexException if the specified column index is not valid\n      */\n     public BigDecimal[] getColumn(int col) throws MatrixIndexException {\n-        if ( !isValidCoordinate(1, col) ) {\n+        if ( !isValidCoordinate(0, col) ) {\n             throw new MatrixIndexException(\"illegal column argument\");\n         }\n         int nRows = this.getRowDimension();\n         BigDecimal[] out = new BigDecimal[nRows];\n         for (int i = 0; i < nRows; i++) {\n-            out[i] = data[i][col - 1];\n+            out[i] = data[i][col];\n         }\n         return out;\n     }\n      * Returns the entries in column number <code>col</code> as an array\n      * of double values.\n      * <p>\n-     * Column indices start at 1.  A <code>MatrixIndexException</code> is thrown\n-     * unless <code>0 < column <= columnDimension.</code>\n+     * Column indices start at 0.  A <code>MatrixIndexException</code> is thrown\n+     * unless <code>0 <= column < columnDimension.</code>\n      *\n      * @param col the column to be fetched\n      * @return array of entries in the column\n      * @throws MatrixIndexException if the specified column index is not valid\n      */\n     public double[] getColumnAsDoubleArray(int col) throws MatrixIndexException {\n-        if ( !isValidCoordinate( 1, col ) ) {\n+        if ( !isValidCoordinate( 0, col ) ) {\n             throw new MatrixIndexException(\"illegal column argument\");\n         }\n         int nrows = this.getRowDimension();\n         double[] out = new double[nrows];\n         for (int i=0;i<nrows;i++) {\n-            out[i] = data[i][col-1].doubleValue();\n+            out[i] = data[i][col].doubleValue();\n         }\n         return out;\n     }\n      /**\n      * Returns the entry in the specified row and column.\n      * <p>\n-     * Row and column indices start at 1 and must satisfy \n+     * Row and column indices start at 0 and must satisfy \n      * <ul>\n-     * <li><code>0 < row <= rowDimension</code></li>\n-     * <li><code> 0 < column <= columnDimension</code></li>\n+     * <li><code>0 <= row < rowDimension</code></li>\n+     * <li><code> 0 <= column < columnDimension</code></li>\n      * </ul>\n      * otherwise a <code>MatrixIndexException</code> is thrown.\n      *\n         if (!isValidCoordinate(row,column)) {\n             throw new MatrixIndexException(\"matrix entry does not exist\");\n         }\n-        return data[row - 1][column - 1];\n+        return data[row][column];\n     }\n     \n     /**\n      * Returns the entry in the specified row and column as a double.\n      * <p>\n-     * Row and column indices start at 1 and must satisfy \n+     * Row and column indices start at 0 and must satisfy \n      * <ul>\n-     * <li><code>0 < row <= rowDimension</code></li>\n-     * <li><code> 0 < column <= columnDimension</code></li>\n+     * <li><code>0 <= row < rowDimension</code></li>\n+     * <li><code> 0 <= column < columnDimension</code></li>\n      * </ul>\n      * otherwise a <code>MatrixIndexException</code> is thrown.\n      *\n     /**\n      * Sets the entry in the specified row and column to the specified value.\n      * <p>\n-     * Row and column indices start at 1 and must satisfy \n+     * Row and column indices start at 0 and must satisfy \n      * <ul>\n-     * <li><code>0 < row <= rowDimension</code></li>\n-     * <li><code> 0 < column <= columnDimension</code></li>\n+     * <li><code>0 <= row < rowDimension</code></li>\n+     * <li><code> 0 <= column < columnDimension</code></li>\n      * </ul>\n      * otherwise a <code>MatrixIndexException</code> is thrown.\n      * \n         if (!isValidCoordinate(row,column)) {\n             throw new MatrixIndexException(\"matrix entry does not exist\");\n         }\n-        data[row - 1][column - 1] = value;\n+        data[row][column] = value;\n         lu = null;\n     }\n     \n     /**\n      * Sets the entry in the specified row and column to the specified value.\n      * <p>\n-     * Row and column indices start at 1 and must satisfy \n+     * Row and column indices start at 0 and must satisfy \n      * <ul>\n-     * <li><code>0 < row <= rowDimension</code></li>\n-     * <li><code> 0 < column <= columnDimension</code></li>\n+     * <li><code>0 <= row < rowDimension</code></li>\n+     * <li><code> 0 <= column < columnDimension</code></li>\n      * </ul>\n      * otherwise a <code>MatrixIndexException</code> is thrown.\n      * \n      * Sets the entry in the specified row and column to the \n      * <code>BigDecimal</code> value represented by the input string.\n      * <p>\n-     * Row and column indices start at 1 and must satisfy \n+     * Row and column indices start at 0 and must satisfy \n      * <ul>\n-     * <li><code>0 < row <= rowDimension</code></li>\n-     * <li><code> 0 < column <= columnDimension</code></li>\n+     * <li><code>0 <= row < rowDimension</code></li>\n+     * <li><code> 0 <= column < columnDimension</code></li>\n      * </ul>\n      * otherwise a <code>MatrixIndexException</code> is thrown.\n      * \n         int nRows = this.getRowDimension();\n         int nCols = this.getColumnDimension();\n         \n-        return !(row < 1 || row > nRows || col < 1 || col > nCols);\n+        return !(row < 0 || row >= nRows || col < 0 || col >= nCols);\n     }\n     \n }\n--- a/src/java/org/apache/commons/math/linear/RealMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrix.java\n package org.apache.commons.math.linear;\n \n /**\n- * Interface defining a real-valued matrix with basic algebraic operations\n- * @version $Revision: 1.21 $ $Date: 2004/09/01 21:26:11 $\n+ * Interface defining a real-valued matrix with basic algebraic operations.\n+ * <p>\n+ * Matrix element indexing is 0-based -- e.g., <code>getEntry(0, 0)</code>\n+ * returns the element in the first row, first column of the matrix.\n+ * \n+ * @version $Revision: 1.22 $ $Date: 2004/09/05 01:19:23 $\n  */\n public interface RealMatrix {\n \n     /**\n      * Returns the entries in row number <code>row</code> as an array.\n      * <p>\n-     * Row indices start at 1.  A <code>MatrixIndexException</code> is thrown\n-     * unless <code>0 < row <= rowDimension.</code>\n+     * Row indices start at 0.  A <code>MatrixIndexException</code> is thrown\n+     * unless <code>0 <= row < rowDimension.</code>\n      *\n      * @param row the row to be fetched\n      * @return array of entries in the row\n     /**\n      * Returns the entries in column number <code>col</code> as an array.\n      * <p>\n-     * Column indices start at 1.  A <code>MatrixIndexException</code> is thrown\n-     * unless <code>0 < column <= columnDimension.</code>\n+     * Column indices start at 0.  A <code>MatrixIndexException</code> is thrown\n+     * unless <code>0 <= column < columnDimension.</code>\n      *\n      * @param col the column to be fetched\n      * @return array of entries in the column\n     /**\n      * Returns the entry in the specified row and column.\n      * <p>\n-     * Row and column indices start at 1 and must satisfy \n+     * Row and column indices start at 0 and must satisfy \n      * <ul>\n-     * <li><code>0 < row <= rowDimension</code></li>\n-     * <li><code> 0 < column <= columnDimension</code></li>\n+     * <li><code>0 <= row < rowDimension</code></li>\n+     * <li><code> 0 <= column < columnDimension</code></li>\n      * </ul>\n      * otherwise a <code>MatrixIndexException</code> is thrown.\n      * \n     /**\n      * Sets the entry in the specified row and column to the specified value.\n      * <p>\n-     * Row and column indices start at 1 and must satisfy \n+     * Row and column indices start at 0 and must satisfy \n      * <ul>\n-     * <li><code>0 < row <= rowDimension</code></li>\n-     * <li><code> 0 < column <= columnDimension</code></li>\n+     * <li><code>0 <= row < rowDimension</code></li>\n+     * <li><code> 0 <= column < columnDimension</code></li>\n      * </ul>\n      * otherwise a <code>MatrixIndexException</code> is thrown.\n      * \n--- a/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n  * <li>getDeterminant</li>\n  * <li>inverse</li> </ul>\n  * <p>\n- * <strong>Usage note</strong>:<br>\n+ * <strong>Usage notes</strong>:<br>\n+ * <ul><li>\n  * The LU decomposition is stored and reused on subsequent calls.  If matrix\n  * data are modified using any of the public setXxx methods, the saved\n  * decomposition is discarded.  If data are modified via references to the\n  * underlying array obtained using <code>getDataRef()</code>, then the stored\n  * LU decomposition will not be discarded.  In this case, you need to\n  * explicitly invoke <code>LUDecompose()</code> to recompute the decomposition\n- * before using any of the methods above.\n+ * before using any of the methods above.</li>\n+ * <li>\n+ * As specified in the {@link RealMatrix} interface, matrix element indexing\n+ * is 0-based -- e.g., <code>getEntry(0, 0)</code>\n+ * returns the element in the first row, first column of the matrix.</li></ul>\n  *\n- * @version $Revision: 1.27 $ $Date: 2004/09/01 21:26:11 $\n+ * @version $Revision: 1.28 $ $Date: 2004/09/05 01:19:23 $\n  */\n public class RealMatrixImpl implements RealMatrix, Serializable {\n \n      /**\n      * Returns the entries in row number <code>row</code> as an array.\n      * <p>\n-     * Row indices start at 1.  A <code>MatrixIndexException</code> is thrown\n-     * unless <code>0 < row <= rowDimension.</code>\n+     * Row indices start at 0.  A <code>MatrixIndexException</code> is thrown\n+     * unless <code>0 <= row < rowDimension.</code>\n      *\n      * @param row the row to be fetched\n      * @return array of entries in the row\n      * @throws MatrixIndexException if the specified row index is not valid\n      */\n     public double[] getRow(int row) throws MatrixIndexException {\n-        if ( !isValidCoordinate( row, 1 ) ) {\n+        if ( !isValidCoordinate( row, 0 ) ) {\n             throw new MatrixIndexException(\"illegal row argument\");\n         }\n         int ncols = this.getColumnDimension();\n         double[] out = new double[ncols];\n-        System.arraycopy(data[row - 1], 0, out, 0, ncols);\n+        System.arraycopy(data[row], 0, out, 0, ncols);\n         return out;\n     }\n \n     /**\n      * Returns the entries in column number <code>col</code> as an array.\n      * <p>\n-     * Column indices start at 1.  A <code>MatrixIndexException</code> is thrown\n-     * unless <code>0 < column <= columnDimension.</code>\n+     * Column indices start at 0.  A <code>MatrixIndexException</code> is thrown\n+     * unless <code>0 <= column < columnDimension.</code>\n      *\n      * @param col the column to be fetched\n      * @return array of entries in the column\n      * @throws MatrixIndexException if the specified column index is not valid\n      */\n     public double[] getColumn(int col) throws MatrixIndexException {\n-        if ( !isValidCoordinate(1, col) ) {\n+        if ( !isValidCoordinate(0, col) ) {\n             throw new MatrixIndexException(\"illegal column argument\");\n         }\n         int nRows = this.getRowDimension();\n         double[] out = new double[nRows];\n         for (int row = 0; row < nRows; row++) {\n-            out[row] = data[row][col - 1];\n+            out[row] = data[row][col];\n         }\n         return out;\n     }\n     /**\n      * Returns the entry in the specified row and column.\n      * <p>\n-     * Row and column indices start at 1 and must satisfy \n+     * Row and column indices start at 0 and must satisfy \n      * <ul>\n-     * <li><code>0 < row <= rowDimension</code></li>\n-     * <li><code> 0 < column <= columnDimension</code></li>\n+     * <li><code>0 <= row < rowDimension</code></li>\n+     * <li><code> 0 <= column < columnDimension</code></li>\n      * </ul>\n      * otherwise a <code>MatrixIndexException</code> is thrown.\n      * \n         if (!isValidCoordinate(row,column)) {\n             throw new MatrixIndexException(\"matrix entry does not exist\");\n         }\n-        return data[row - 1][column - 1];\n+        return data[row][column];\n     }\n \n     /**\n      * Sets the entry in the specified row and column to the specified value.\n      * <p>\n-     * Row and column indices start at 1 and must satisfy \n+     * Row and column indices start at 0 and must satisfy \n      * <ul>\n-     * <li><code>0 < row <= rowDimension</code></li>\n-     * <li><code> 0 < column <= columnDimension</code></li>\n+     * <li><code>0 <= row < rowDimension</code></li>\n+     * <li><code> 0 <= column < columnDimension</code></li>\n      * </ul>\n      * otherwise a <code>MatrixIndexException</code> is thrown.\n      * \n         if (!isValidCoordinate(row,column)) {\n             throw new MatrixIndexException(\"matrix entry does not exist\");\n         }\n-        data[row - 1][column - 1] = value;\n+        data[row][column] = value;\n         lu = null;\n     }\n \n         int nRows = this.getRowDimension();\n         int nCols = this.getColumnDimension();\n \n-        return !(row < 1 || row > nRows || col < 1 || col > nCols);\n+        return !(row < 0 || row > nRows - 1 || col < 0 || col > nCols -1);\n     }\n \n }\n--- a/src/test/org/apache/commons/math/linear/BigMatrixImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/BigMatrixImplTest.java\n /**\n  * Test cases for the {@link BigMatrixImpl} class.\n  *\n- * @version $Revision: 1.2 $ $Date: 2004/07/11 04:49:24 $\n+ * @version $Revision: 1.3 $ $Date: 2004/09/05 01:19:23 $\n  */\n \n public final class BigMatrixImplTest extends TestCase {\n     \n     public void testGetVectors() {\n         BigMatrix m = new BigMatrixImpl(testData);\n-        assertClose(\"get row\",m.getRowAsDoubleArray(1),testDataRow1,entryTolerance);\n-        assertClose(\"get col\",m.getColumnAsDoubleArray(3),testDataCol3,entryTolerance);\n+        assertClose(\"get row\",m.getRowAsDoubleArray(0),testDataRow1,entryTolerance);\n+        assertClose(\"get col\",m.getColumnAsDoubleArray(2),testDataCol3,entryTolerance);\n         try {\n             double[] x = m.getRowAsDoubleArray(10);\n             fail(\"expecting MatrixIndexException\");\n     \n     public void testEntryMutators() {\n         BigMatrix m = new BigMatrixImpl(testData);\n-        assertEquals(\"get entry\",m.getEntry(1,2).doubleValue(),2d,entryTolerance);\n-        m.setEntry(1,2,100d);\n-        assertEquals(\"get entry\",m.getEntry(1,2).doubleValue(),100d,entryTolerance);\n-        try {\n-            double x = m.getEntry(0,2).doubleValue();\n+        assertEquals(\"get entry\",m.getEntry(0,1).doubleValue(),2d,entryTolerance);\n+        m.setEntry(0,1,100d);\n+        assertEquals(\"get entry\",m.getEntry(0,1).doubleValue(),100d,entryTolerance);\n+        try {\n+            double x = m.getEntry(-1,2).doubleValue();\n             fail(\"expecting MatrixIndexException\");\n         } catch (MatrixIndexException ex) {\n             ;\n         }\n         try {\n-            m.setEntry(1,4,200d);\n+            m.setEntry(1,3,200d);\n             fail(\"expecting MatrixIndexException\");\n         } catch (MatrixIndexException ex) {\n             ;\n             throw new InvalidMatrixException(\"incorrect dimensions\");\n         }    \n         int n = lu.getRowDimension();\n-        for (int i = 1; i <= n; i++) {\n-            for (int j = 1; j <= n; j++) {\n+        for (int i = 0; i < n; i++) {\n+            for (int j = 0; j < n; j++) {\n                 if (j < i) {\n                     lower.setEntry(i, j, lu.getEntry(i, j));\n                     upper.setEntry(i, j, 0d);\n         }\n         int n = matrix.getRowDimension();\n         BigMatrix out = new BigMatrixImpl(n, n);\n-        for (int i =1; i <= n; i++) {\n-            for (int j = 1; j <= n; j++) {\n-                out.setEntry(i, j, matrix.getEntry(permutation[i -1] + 1, j));\n+        for (int i = 0; i < n; i++) {\n+            for (int j = 0; j < n; j++) {\n+                out.setEntry(i, j, matrix.getEntry(permutation[i], j));\n             }\n         }\n         return out;\n           for (int i = 0; i < m.getRowDimension(); i++) {\n               String os = \"\";\n               for (int j = 0; j < m.getColumnDimension(); j++) {\n-                  os += m.getEntry(i+1, j+1) + \" \";\n+                  os += m.getEntry(i, j) + \" \";\n               }\n               System.out.println(os);\n           }\n--- a/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n /**\n  * Test cases for the {@link RealMatrixImpl} class.\n  *\n- * @version $Revision: 1.14 $ $Date: 2004/05/18 04:08:38 $\n+ * @version $Revision: 1.15 $ $Date: 2004/09/05 01:19:23 $\n  */\n \n public final class RealMatrixImplTest extends TestCase {\n     \n     public void testGetVectors() {\n         RealMatrix m = new RealMatrixImpl(testData);\n-        assertClose(\"get row\",m.getRow(1),testDataRow1,entryTolerance);\n-        assertClose(\"get col\",m.getColumn(3),testDataCol3,entryTolerance);\n+        assertClose(\"get row\",m.getRow(0),testDataRow1,entryTolerance);\n+        assertClose(\"get col\",m.getColumn(2),testDataCol3,entryTolerance);\n         try {\n             double[] x = m.getRow(10);\n             fail(\"expecting MatrixIndexException\");\n     \n     public void testEntryMutators() {\n         RealMatrix m = new RealMatrixImpl(testData);\n-        assertEquals(\"get entry\",m.getEntry(1,2),2d,entryTolerance);\n+        assertEquals(\"get entry\",m.getEntry(0,1),2d,entryTolerance);\n         m.setEntry(1,2,100d);\n         assertEquals(\"get entry\",m.getEntry(1,2),100d,entryTolerance);\n         try {\n-            double x = m.getEntry(0,2);\n+            double x = m.getEntry(-1,2);\n             fail(\"expecting MatrixIndexException\");\n         } catch (MatrixIndexException ex) {\n             ;\n             throw new InvalidMatrixException(\"incorrect dimensions\");\n         }    \n         int n = lu.getRowDimension();\n-        for (int i = 1; i <= n; i++) {\n-            for (int j = 1; j <= n; j++) {\n+        for (int i = 0; i < n; i++) {\n+            for (int j = 0; j < n; j++) {\n                 if (j < i) {\n                     lower.setEntry(i, j, lu.getEntry(i, j));\n                     upper.setEntry(i, j, 0d);\n         }\n         int n = matrix.getRowDimension();\n         RealMatrix out = new RealMatrixImpl(n, n);\n-        for (int i =1; i <= n; i++) {\n-            for (int j = 1; j <= n; j++) {\n-                out.setEntry(i, j, matrix.getEntry(permutation[i -1] + 1, j));\n+        for (int i = 0; i < n; i++) {\n+            for (int j = 0; j < n; j++) {\n+                out.setEntry(i, j, matrix.getEntry(permutation[i], j));\n             }\n         }\n         return out;\n           for (int i = 0; i < m.getRowDimension(); i++) {\n               String os = \"\";\n               for (int j = 0; j < m.getColumnDimension(); j++) {\n-                  os += m.getEntry(i+1, j+1) + \" \";\n+                  os += m.getEntry(i, j) + \" \";\n               }\n               System.out.println(os);\n           }", "timestamp": 1094347163, "metainfo": ""}