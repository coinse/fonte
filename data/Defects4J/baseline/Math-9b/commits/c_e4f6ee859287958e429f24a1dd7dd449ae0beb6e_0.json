{"sha": "e4f6ee859287958e429f24a1dd7dd449ae0beb6e", "log": "Prevent step normalizer to output twice the last point in MULTIPLES mode.  JIRA: MATH-603  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java\n+++ b/src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * This class wraps an object implementing {@link FixedStepHandler}\n             }\n         }\n \n+        // Calculate next normalized step time.\n         double nextTime = (mode == StepNormalizerMode.INCREMENT) ?\n                           lastTime + h :\n                           (FastMath.floor(lastTime / h) + 1) * h;\n+        if (mode == StepNormalizerMode.MULTIPLES &&\n+            MathUtils.equals(nextTime, lastTime, 1)) {\n+            nextTime += h;\n+        }\n         boolean nextInStep = isNextInStep(nextTime, interpolator);\n         while (nextInStep) {\n             // Output the stored previous step.", "timestamp": 1310316662, "metainfo": ""}