{"sha": "d086678c5fab5b04d67355a20889e6e0bc274026", "log": "Removed dependency on DistributionFactory.  ", "commit": "\n--- a/src/java/org/apache/commons/math/distribution/BinomialDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/BinomialDistribution.java\n \n /**\n  * The Binomial Distribution.\n- *\n- * Instances of BinomialDistribution objects should be created using\n- * {@link DistributionFactory#createBinomialDistribution(int, double)}.\n  *\n  * <p>\n  * References:\n--- a/src/java/org/apache/commons/math/distribution/CauchyDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/CauchyDistribution.java\n \n /**\n  * Cauchy Distribution.\n- * Instances of CauchyDistribution objects should be created using\n- * {@link DistributionFactory#createCauchyDistribution(double, double)}.<p>\n  *\n  * <p>\n  * References:<p>\n--- a/src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java\n \n /**\n  * The Chi-Squared Distribution.\n- *\n- * Instances of ChiSquaredDistribution objects should be created using\n- * {@link DistributionFactory#createChiSquareDistribution(double)}.\n  *\n  * <p>\n  * References:\n--- a/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n+++ b/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n  */\n \n package org.apache.commons.math.distribution;\n-\n-import org.apache.commons.discovery.tools.DiscoverClass;\n \n /**\n  * This factory provids the means to create common statistical distributions.\n  * </pre>\n  *\n  * @version $Revision$ $Date$\n+ * @deprecated pluggability of distribution instances is now provided through\n+ *             constructors and setters.\n  */\n public abstract class DistributionFactory {\n     /**\n      * @return a new factory. \n      */\n     public static DistributionFactory newInstance() {\n-        DistributionFactory factory = null;\n-        try {\n-            DiscoverClass dc = new DiscoverClass();\n-            factory = (DistributionFactory) dc.newInstance(\n-                DistributionFactory.class,\n-                \"org.apache.commons.math.distribution.DistributionFactoryImpl\");\n-        } catch(Throwable t) {\n-            return new DistributionFactoryImpl();\n-        }\n-        return factory;\n+        return new DistributionFactoryImpl();\n     }\n \n     /**\n--- a/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java\n  * Commons-Math.\n  *  \n  * @version $Revision$ $Date$\n+ * @deprecated pluggability of distribution instances is now provided through\n+ *             constructors and setters.\n  */\n public class DistributionFactoryImpl extends DistributionFactory {\n \n--- a/src/java/org/apache/commons/math/distribution/ExponentialDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/ExponentialDistribution.java\n \n /**\n  * The Exponential Distribution.\n- *\n- * Instances of ExponentialDistribution objects should be created using\n- * {@link DistributionFactory#createExponentialDistribution(double)}.\n  *\n  * <p>\n  * References:\n--- a/src/java/org/apache/commons/math/distribution/FDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistribution.java\n \n /**\n  * F-Distribution.\n- *\n- * Instances of FDistribution objects should be created using\n- * {@link DistributionFactory#createFDistribution(double,double)}.\n  *\n  * <p>\n  * References:\n--- a/src/java/org/apache/commons/math/distribution/GammaDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/GammaDistribution.java\n \n /**\n  * The Gamma Distribution.\n- *\n- * Instances of GammaDistribution objects should be created using\n- * {@link DistributionFactory#createGammaDistribution(double,double)}.\n  *\n  * <p>\n  * References:\n--- a/src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java\n \n /**\n  * The Hypergeometric Distribution.\n- *\n- * Instances of HypergeometricDistribution objects should be created using\n- * {@link DistributionFactory#createHypergeometricDistribution(int, int, int)}.\n  *\n  * <p>\n  * References:\n--- a/src/java/org/apache/commons/math/distribution/NormalDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistribution.java\n \n /**\n  * Normal (Gauss) Distribution.\n- * Instances of NormalDistribution objects should be created using\n- * {@link DistributionFactory#createNormalDistribution(double, double)}.<p>\n  *\n  * <p>\n  * References:<p>\n--- a/src/java/org/apache/commons/math/distribution/PascalDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/PascalDistribution.java\n  * functions for the Pascal distribution.  The convention employed by the\n  * library is to express these functions in terms of the number of failures in\n  * a Bernoulli experiment [2].\n- *\n- * Instances of PascalDistribution objects should be created using\n- * {@link DistributionFactory#createPascalDistribution(int, double)}.\n  *\n  * <p>\n  * References:\n--- a/src/java/org/apache/commons/math/distribution/TDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/TDistribution.java\n \n /**\n  * Student's t-Distribution.\n- *\n- * Instances of TDistribution objects should be created using\n- * {@link DistributionFactory#createTDistribution(double)}\n  *\n  * <p>\n  * References:\n--- a/src/java/org/apache/commons/math/distribution/WeibullDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/WeibullDistribution.java\n  * distribution as defined by\n  * <a href=\"http://mathworld.wolfram.com/WeibullDistribution.html\">\n  * Weibull Distribution</a>, equations (1) and (2).\n- *\n- * Instances of WeibullDistribution objects should be created using\n- * {@link DistributionFactory#createWeibullDistribution(double, double)}\n  *\n  * <p>\n  * References:\n--- a/src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java\n     \n     /** Creates the default discrete distribution instance to use in tests. */\n     public IntegerDistribution makeDistribution() {\n-        return DistributionFactory.newInstance().createBinomialDistribution(10,0.70);\n+        return new BinomialDistributionImpl(10,0.70);\n     }\n     \n     /** Creates the default probability density test input values */\n    \n     /** Test degenerate case p = 0   */\n     public void testDegenerate0() throws Exception {\n-        setDistribution(DistributionFactory.newInstance().createBinomialDistribution(5,0.0d));\n+        setDistribution(new BinomialDistributionImpl(5,0.0d));\n         setCumulativeTestPoints(new int[] {-1, 0, 1, 5, 10 });\n         setCumulativeTestValues(new double[] {0d, 1d, 1d, 1d, 1d});\n         setDensityTestPoints(new int[] {-1, 0, 1, 10, 11});\n     \n     /** Test degenerate case p = 1   */\n     public void testDegenerate1() throws Exception {\n-        setDistribution(DistributionFactory.newInstance().createBinomialDistribution(5,1.0d));\n+        setDistribution(new BinomialDistributionImpl(5,1.0d));\n         setCumulativeTestPoints(new int[] {-1, 0, 1, 2, 5, 10 });\n         setCumulativeTestValues(new double[] {0d, 0d, 0d, 0d, 1d, 1d});\n         setDensityTestPoints(new int[] {-1, 0, 1, 2, 5, 10});\n--- a/src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java\n     \n     /** Creates the default continuous distribution instance to use in tests. */\n     public ContinuousDistribution makeDistribution() {\n-        return DistributionFactory.newInstance().createCauchyDistribution(1.2, 2.1);\n+        return new CauchyDistributionImpl(1.2, 2.1);\n     }   \n     \n     /** Creates the default cumulative probability distribution test input values */\n--- a/src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java\n     \n     /** Creates the default continuous distribution instance to use in tests. */\n     public ContinuousDistribution makeDistribution() {\n-        return DistributionFactory.newInstance().createChiSquareDistribution(5.0);\n+        return new ChiSquaredDistributionImpl(5.0);\n     }   \n     \n     /** Creates the default cumulative probability distribution test input values */\n  //---------------------------- Additional test cases -------------------------\n     \n     public void testSmallDf() throws Exception {\n-        setDistribution(DistributionFactory.newInstance().createChiSquareDistribution(0.1d));\n+        setDistribution(new ChiSquaredDistributionImpl(0.1d));\n         setTolerance(1E-4);\n         // quantiles computed using R version 1.8.1 (linux version)\n         setCumulativeTestPoints(new double[] {1.168926E-60, 1.168926E-40, 1.063132E-32, \n--- a/src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java\n+++ b/src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java\n package org.apache.commons.math.distribution;\n \n import junit.framework.TestCase;\n+\n import org.apache.commons.math.TestUtils;\n \n /**\n--- a/src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java\n     \n     /** Creates the default continuous distribution instance to use in tests. */\n     public ContinuousDistribution makeDistribution() {\n-        return DistributionFactory.newInstance().createExponentialDistribution(5.0);\n+        return new ExponentialDistributionImpl(5.0);\n     }   \n     \n     /** Creates the default cumulative probability distribution test input values */\n--- a/src/test/org/apache/commons/math/distribution/FDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/FDistributionTest.java\n     \n     /** Creates the default continuous distribution instance to use in tests. */\n     public ContinuousDistribution makeDistribution() {\n-        return DistributionFactory.newInstance().createFDistribution(5.0, 6.0);\n+        return new FDistributionImpl(5.0, 6.0);\n     }   \n     \n     /** Creates the default cumulative probability distribution test input values */\n--- a/src/test/org/apache/commons/math/distribution/GammaDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/GammaDistributionTest.java\n     \n     /** Creates the default continuous distribution instance to use in tests. */\n     public ContinuousDistribution makeDistribution() {\n-        return DistributionFactory.newInstance().createGammaDistribution(4d, 2d);\n+        return new GammaDistributionImpl(4d, 2d);\n     }   \n     \n     /** Creates the default cumulative probability distribution test input values */\n     }\n \n     private void testProbability(double x, double a, double b, double expected) throws Exception {\n-        DistributionFactory factory = DistributionFactory.newInstance();\n-        GammaDistribution distribution = factory.createGammaDistribution( a, b );\n+        GammaDistribution distribution = new GammaDistributionImpl( a, b );\n         double actual = distribution.cumulativeProbability(x);\n         assertEquals(\"probability for \" + x, expected, actual, 10e-4);\n     }\n \n     private void testValue(double expected, double a, double b, double p) throws Exception {\n-        DistributionFactory factory = DistributionFactory.newInstance();\n-        GammaDistribution distribution = factory.createGammaDistribution( a, b );\n+        GammaDistribution distribution = new GammaDistributionImpl( a, b );\n         double actual = distribution.inverseCumulativeProbability(p);\n         assertEquals(\"critical value for \" + p, expected, actual, 10e-4);\n     }\n--- a/src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java\n     \n     /** Creates the default discrete distribution instance to use in tests. */\n     public IntegerDistribution makeDistribution() {\n-        return DistributionFactory.newInstance().createHypergeometricDistribution(10,5, 5);\n+        return new HypergeometricDistributionImpl(10,5, 5);\n     }\n     \n     /** Creates the default probability density test input values */\n     \n     /** Verify that if there are no failures, mass is concentrated on sampleSize */\n     public void testDegenerateNoFailures() throws Exception {\n-        setDistribution(DistributionFactory.newInstance().createHypergeometricDistribution(5,5,3));\n+        setDistribution(new HypergeometricDistributionImpl(5,5,3));\n         setCumulativeTestPoints(new int[] {-1, 0, 1, 3, 10 });\n         setCumulativeTestValues(new double[] {0d, 0d, 0d, 1d, 1d});\n         setDensityTestPoints(new int[] {-1, 0, 1, 3, 10});\n     \n     /** Verify that if there are no successes, mass is concentrated on 0 */\n     public void testDegenerateNoSuccesses() throws Exception {\n-        setDistribution(DistributionFactory.newInstance().createHypergeometricDistribution(5,0,3));\n+        setDistribution(new HypergeometricDistributionImpl(5,0,3));\n         setCumulativeTestPoints(new int[] {-1, 0, 1, 3, 10 });\n         setCumulativeTestValues(new double[] {0d, 1d, 1d, 1d, 1d});\n         setDensityTestPoints(new int[] {-1, 0, 1, 3, 10});\n     \n     /** Verify that if sampleSize = populationSize, mass is concentrated on numberOfSuccesses */\n     public void testDegenerateFullSample() throws Exception {\n-        setDistribution(DistributionFactory.newInstance().createHypergeometricDistribution(5,3,5));\n+        setDistribution(new HypergeometricDistributionImpl(5,3,5));\n         setCumulativeTestPoints(new int[] {-1, 0, 1, 3, 10 });\n         setCumulativeTestValues(new double[] {0d, 0d, 0d, 1d, 1d});\n         setDensityTestPoints(new int[] {-1, 0, 1, 3, 10});\n     }\n \n     public void testPopulationSize() {\n-        HypergeometricDistribution dist = DistributionFactory.newInstance().createHypergeometricDistribution(5,3,5);\n+        HypergeometricDistribution dist = new HypergeometricDistributionImpl(5,3,5);\n         try {\n             dist.setPopulationSize(-1);\n             fail(\"negative population size.  IllegalArgumentException expected\");\n--- a/src/test/org/apache/commons/math/distribution/NormalDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/NormalDistributionTest.java\n     \n     /** Creates the default continuous distribution instance to use in tests. */\n     public ContinuousDistribution makeDistribution() {\n-        return DistributionFactory.newInstance().createNormalDistribution(2.1, 1.4);\n+        return new NormalDistributionImpl(2.1, 1.4);\n     }   \n     \n     /** Creates the default cumulative probability distribution test input values */\n     \n     public void testQuantiles() throws Exception {\n         verifyQuantiles();\n-        setDistribution(DistributionFactory.newInstance().createNormalDistribution(0, 1));\n+        setDistribution(new NormalDistributionImpl(0, 1));\n         verifyQuantiles();\n-        setDistribution(DistributionFactory.newInstance().createNormalDistribution(0, 0.1));\n+        setDistribution(new NormalDistributionImpl(0, 0.1));\n         verifyQuantiles();\n     }\n     \n--- a/src/test/org/apache/commons/math/distribution/PascalDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/PascalDistributionTest.java\n     \n     /** Creates the default discrete distribution instance to use in tests. */\n     public IntegerDistribution makeDistribution() {\n-        return DistributionFactory.newInstance().createPascalDistribution(10,0.70);\n+        return new PascalDistributionImpl(10,0.70);\n     }\n     \n     /** Creates the default probability density test input values */\n    \n     /** Test degenerate case p = 0   */\n     public void testDegenerate0() throws Exception {\n-        setDistribution(DistributionFactory.newInstance().createPascalDistribution(5,0.0d));\n+        setDistribution(new PascalDistributionImpl(5,0.0d));\n         setCumulativeTestPoints(new int[] {-1, 0, 1, 5, 10 });\n         setCumulativeTestValues(new double[] {0d, 0d, 0d, 0d, 0d});\n         setDensityTestPoints(new int[] {-1, 0, 1, 10, 11});\n     \n     /** Test degenerate case p = 1   */\n     public void testDegenerate1() throws Exception {\n-        setDistribution(DistributionFactory.newInstance().createPascalDistribution(5,1.0d));\n+        setDistribution(new PascalDistributionImpl(5,1.0d));\n         setCumulativeTestPoints(new int[] {-1, 0, 1, 2, 5, 10 });\n         setCumulativeTestValues(new double[] {0d, 1d, 1d, 1d, 1d, 1d});\n         setDensityTestPoints(new int[] {-1, 0, 1, 2, 5, 10});\n--- a/src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java\n      * Creates the default discrete distribution instance to use in tests. \n      */\n     public IntegerDistribution makeDistribution() {\n-        return DistributionFactory.newInstance().createPoissonDistribution\n-            (DEFAULT_TEST_POISSON_PARAMETER);  \n+        return new PoissonDistributionImpl(DEFAULT_TEST_POISSON_PARAMETER);  \n     }\n \n     /** \n      * P(9900 &le; X &le; 10200) for X  = Po(10000)\n      */\n     public void testNormalApproximateProbability() throws Exception {\n-        PoissonDistribution dist = DistributionFactory.newInstance().createPoissonDistribution(100);\n+        PoissonDistribution dist = new PoissonDistributionImpl(100);\n         double result = dist.normalApproximateProbability(110)\n                 - dist.normalApproximateProbability(89);\n         assertEquals(0.706281887248, result, 1E-10);\n      * @throws Exception\n      */\n     public void testDegenerateInverseCumulativeProbability() throws Exception {\n-        PoissonDistribution dist = DistributionFactory.newInstance().createPoissonDistribution(DEFAULT_TEST_POISSON_PARAMETER);\n+        PoissonDistribution dist = new PoissonDistributionImpl(DEFAULT_TEST_POISSON_PARAMETER);\n         assertEquals(Integer.MAX_VALUE, dist.inverseCumulativeProbability(1.0d));\n         assertEquals(-1, dist.inverseCumulativeProbability(0d));\n     }\n     \n     public void testMean() {\n-        PoissonDistribution dist = DistributionFactory.newInstance().createPoissonDistribution(DEFAULT_TEST_POISSON_PARAMETER);\n+        PoissonDistribution dist = new PoissonDistributionImpl(DEFAULT_TEST_POISSON_PARAMETER);\n         try {\n             dist.setMean(-1);\n             fail(\"negative mean.  IllegalArgumentException expected\");\n     }\n     \n     public void testLargeMeanCumulativeProbability() {\n-        PoissonDistribution dist = DistributionFactory.newInstance().createPoissonDistribution(1.0);\n+        PoissonDistribution dist = new PoissonDistributionImpl(1.0);\n         double mean = 1.0;\n         while (mean <= 10000000.0) {\n             dist.setMean(mean);\n     }\n     \n     public void testLargeMeanInverseCumulativeProbability() {\n-        PoissonDistribution dist = DistributionFactory.newInstance().createPoissonDistribution(1.0);\n+        PoissonDistribution dist = new PoissonDistributionImpl(1.0);\n         double mean = 1.0;\n         while (mean <= 10000000.0) {\n             dist.setMean(mean);\n--- a/src/test/org/apache/commons/math/distribution/TDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/TDistributionTest.java\n \n     /** Creates the default continuous distribution instance to use in tests. */\n     public ContinuousDistribution makeDistribution() {\n-        return DistributionFactory.newInstance().createTDistribution(5.0);\n+        return new TDistributionImpl(5.0);\n     }\n \n     /** Creates the default cumulative probability distribution test input values */\n      */\n     public void testCumulativeProbabilityAgaintStackOverflow() throws Exception {\n         TDistributionImpl td = new TDistributionImpl(5.);\n-        double est;\n-        est = td.cumulativeProbability(.1);\n-        est = td.cumulativeProbability(.01);\n+        td.cumulativeProbability(.1);\n+        td.cumulativeProbability(.01);\n     }\n \n     public void testSmallDf() throws Exception {\n-        setDistribution(DistributionFactory.newInstance().createTDistribution(1d));\n+        setDistribution(new TDistributionImpl(1d));\n         setTolerance(1E-4);\n         // quantiles computed using R version 1.8.1 (linux version)\n         setCumulativeTestPoints(new double[] {-318.3088, -31.82052, -12.70620, -6.313752,\n--- a/src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java\n     \n     /** Creates the default continuous distribution instance to use in tests. */\n     public ContinuousDistribution makeDistribution() {\n-        return DistributionFactory.newInstance().createWeibullDistribution(1.2, 2.1);\n+        return new WeibullDistributionImpl(1.2, 2.1);\n     }   \n     \n     /** Creates the default cumulative probability distribution test input values */", "timestamp": 1181226904, "metainfo": ""}