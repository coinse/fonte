{"sha": "a129a596ba936f79175c2f23ebf4767728fcc9d6", "log": "set subversion properties on new files.  ", "commit": "\n--- a/src/java/org/apache/commons/math/genetics/ChromosomePair.java\n+++ b/src/java/org/apache/commons/math/genetics/ChromosomePair.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.commons.math.genetics;\n-\n-/**\n- * A pair of {@link Chromosome} objects.\n- */\n-public class ChromosomePair {\n-    /** the first chromosome in the pair. */\n-    private Chromosome first;\n-\n-    /** the second chromosome in the pair. */\n-    private Chromosome second;\n-\n-    /**\n-     * Create a chromosome pair.\n-     * \n-     * @param c1 the first chromosome.\n-     * @param c2 the second chromosome.\n-     */\n-    public ChromosomePair(Chromosome c1, Chromosome c2) {\n-        super();\n-        first = c1;\n-        second = c2;\n-    }\n-\n-    /**\n-     * Access the first chromosome.\n-     * \n-     * @return the first chromosome.\n-     */\n-    public Chromosome getFirst() {\n-        return first;\n-    }\n-\n-    /**\n-     * Access the second chromosome.\n-     * \n-     * @return the second chromosome.\n-     */\n-    public Chromosome getSecond() {\n-        return second;\n-    }\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.genetics;\n+\n+/**\n+ * A pair of {@link Chromosome} objects.\n+ */\n+public class ChromosomePair {\n+    /** the first chromosome in the pair. */\n+    private Chromosome first;\n+\n+    /** the second chromosome in the pair. */\n+    private Chromosome second;\n+\n+    /**\n+     * Create a chromosome pair.\n+     * \n+     * @param c1 the first chromosome.\n+     * @param c2 the second chromosome.\n+     */\n+    public ChromosomePair(Chromosome c1, Chromosome c2) {\n+        super();\n+        first = c1;\n+        second = c2;\n+    }\n+\n+    /**\n+     * Access the first chromosome.\n+     * \n+     * @return the first chromosome.\n+     */\n+    public Chromosome getFirst() {\n+        return first;\n+    }\n+\n+    /**\n+     * Access the second chromosome.\n+     * \n+     * @return the second chromosome.\n+     */\n+    public Chromosome getSecond() {\n+        return second;\n+    }\n+}\n--- a/src/java/org/apache/commons/math/genetics/CrossoverPolicy.java\n+++ b/src/java/org/apache/commons/math/genetics/CrossoverPolicy.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.commons.math.genetics;\n-\n-/**\n- * Policy used to create a pair of new chromosomes by performing a crossover\n- * operation on a source pair of chromosomes.\n- */\n-public interface CrossoverPolicy {\n-    /**\n-     * Perform a crossover operation on the given chromosomes.\n-     * \n-     * @param first the first chromosome.\n-     * @param second the second chromosome.\n-     * @return the pair of new chromosomes that resulted from the crossover.\n-     */\n-    ChromosomePair crossover(Chromosome first, Chromosome second);\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.genetics;\n+\n+/**\n+ * Policy used to create a pair of new chromosomes by performing a crossover\n+ * operation on a source pair of chromosomes.\n+ */\n+public interface CrossoverPolicy {\n+    /**\n+     * Perform a crossover operation on the given chromosomes.\n+     * \n+     * @param first the first chromosome.\n+     * @param second the second chromosome.\n+     * @return the pair of new chromosomes that resulted from the crossover.\n+     */\n+    ChromosomePair crossover(Chromosome first, Chromosome second);\n+}\n--- a/src/java/org/apache/commons/math/genetics/Fitness.java\n+++ b/src/java/org/apache/commons/math/genetics/Fitness.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.commons.math.genetics;\n-\n-public interface Fitness extends Comparable {\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.genetics;\n+\n+public interface Fitness extends Comparable {\n+}\n--- a/src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java\n+++ b/src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.commons.math.genetics;\n-\n-/**\n- * Implementation of a genetic algorithm. All factors that govern the operation\n- * of the algorithm can be configured for a specific problem.\n- */\n-public class GeneticAlgorithm {\n-    /** the crossover policy used by the algorithm. */\n-    private CrossoverPolicy crossoverPolicy;\n-\n-    /** the rate of crossover for the algorithm. */\n-    private double crossoverRate;\n-\n-    /** the mutation policy used by the algorithm. */\n-    private MutationPolicy mutationPolicy;\n-\n-    /** the rate of mutation for the algorithm. */\n-    private double mutationRate;\n-\n-    /** the selection policy used by the algorithm. */\n-    private SelectionPolicy selectionPolicy;\n-\n-    /**\n-     * Evolve the given population. Evolution stops when the stopping condition\n-     * is satisfied.\n-     * \n-     * @param initial the initial, seed population.\n-     * @param condition the stopping condition used to stop evolution.\n-     * @return the population that satisfies the stopping condition.\n-     */\n-    public Population evolve(Population initial, StoppingCondition condition) {\n-        Population current = initial;\n-        while (!condition.isSatisfied(current)) {\n-            current = nextGeneration(current);\n-        }\n-        return current;\n-    }\n-\n-    /**\n-     * Access the crossover policy.\n-     * \n-     * @return the crossover policy.\n-     */\n-    private CrossoverPolicy getCrossoverPolicy() {\n-        return crossoverPolicy;\n-    }\n-\n-    /**\n-     * Access the crossover rate.\n-     * \n-     * @return the crossover rate.\n-     */\n-    private double getCrossoverRate() {\n-        return crossoverRate;\n-    }\n-\n-    /**\n-     * Access the mutation policy.\n-     * \n-     * @return the mutation policy.\n-     */\n-    private MutationPolicy getMutationPolicy() {\n-        return mutationPolicy;\n-    }\n-\n-    /**\n-     * Access the mutation rate.\n-     * \n-     * @return the mutation rate.\n-     */\n-    private double getMutationRate() {\n-        return mutationRate;\n-    }\n-\n-    /**\n-     * Access the selection policy.\n-     * \n-     * @return the selection policy.\n-     */\n-    private SelectionPolicy getSelectionPolicy() {\n-        return selectionPolicy;\n-    }\n-\n-    /**\n-     * Evolve the given population into the next generation.\n-     * \n-     * @param current the current population.\n-     * @return the population for the next generation.\n-     */\n-    private Population nextGeneration(Population current) {\n-        Population nextGeneration = current.nextGeneration();\n-\n-        while (nextGeneration.getPopulationSize() < nextGeneration\n-                .getPopulationLimit()) {\n-            // select parent chromosomes\n-            ChromosomePair pair = getSelectionPolicy().select(current);\n-\n-            // apply crossover policy to create two offspring\n-            if (Math.random() < getCrossoverRate()) {\n-                pair = getCrossoverPolicy().crossover(pair.getFirst(),\n-                        pair.getSecond());\n-            }\n-\n-            // apply mutation policy to first offspring\n-            if (Math.random() < getMutationRate()) {\n-                nextGeneration.addChromosome(getMutationPolicy().mutate(\n-                        pair.getFirst()));\n-\n-                if (nextGeneration.getPopulationSize() < nextGeneration\n-                        .getPopulationLimit()) {\n-                    // apply mutation policy to second offspring\n-                    nextGeneration.addChromosome(getMutationPolicy().mutate(\n-                            pair.getSecond()));\n-                }\n-            }\n-        }\n-\n-        return nextGeneration;\n-    }\n-\n-    /**\n-     * Modify the crossover policy.\n-     * \n-     * @param value the new crossover policy.\n-     */\n-    public void setCrossoverPolicy(CrossoverPolicy value) {\n-        this.crossoverPolicy = value;\n-    }\n-\n-    /**\n-     * Modify the crossover rate.\n-     * \n-     * @param value the new crossover rate.\n-     */\n-    public void setCrossoverRate(double value) {\n-        this.crossoverRate = value;\n-    }\n-\n-    /**\n-     * Modify the mutation policy.\n-     * \n-     * @param value the new mutation policy.\n-     */\n-    public void setMutationPolicy(MutationPolicy value) {\n-        this.mutationPolicy = value;\n-    }\n-\n-    /**\n-     * Modify the mutation rate.\n-     * \n-     * @param value the new mutation rate.\n-     */\n-    public void setMutationRate(double value) {\n-        this.mutationRate = value;\n-    }\n-\n-    /**\n-     * Modify the selection policy.\n-     * \n-     * @param value the new selection policy.\n-     */\n-    public void setSelectionPolicy(SelectionPolicy value) {\n-        this.selectionPolicy = value;\n-    }\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.genetics;\n+\n+/**\n+ * Implementation of a genetic algorithm. All factors that govern the operation\n+ * of the algorithm can be configured for a specific problem.\n+ */\n+public class GeneticAlgorithm {\n+    /** the crossover policy used by the algorithm. */\n+    private CrossoverPolicy crossoverPolicy;\n+\n+    /** the rate of crossover for the algorithm. */\n+    private double crossoverRate;\n+\n+    /** the mutation policy used by the algorithm. */\n+    private MutationPolicy mutationPolicy;\n+\n+    /** the rate of mutation for the algorithm. */\n+    private double mutationRate;\n+\n+    /** the selection policy used by the algorithm. */\n+    private SelectionPolicy selectionPolicy;\n+\n+    /**\n+     * Evolve the given population. Evolution stops when the stopping condition\n+     * is satisfied.\n+     * \n+     * @param initial the initial, seed population.\n+     * @param condition the stopping condition used to stop evolution.\n+     * @return the population that satisfies the stopping condition.\n+     */\n+    public Population evolve(Population initial, StoppingCondition condition) {\n+        Population current = initial;\n+        while (!condition.isSatisfied(current)) {\n+            current = nextGeneration(current);\n+        }\n+        return current;\n+    }\n+\n+    /**\n+     * Access the crossover policy.\n+     * \n+     * @return the crossover policy.\n+     */\n+    private CrossoverPolicy getCrossoverPolicy() {\n+        return crossoverPolicy;\n+    }\n+\n+    /**\n+     * Access the crossover rate.\n+     * \n+     * @return the crossover rate.\n+     */\n+    private double getCrossoverRate() {\n+        return crossoverRate;\n+    }\n+\n+    /**\n+     * Access the mutation policy.\n+     * \n+     * @return the mutation policy.\n+     */\n+    private MutationPolicy getMutationPolicy() {\n+        return mutationPolicy;\n+    }\n+\n+    /**\n+     * Access the mutation rate.\n+     * \n+     * @return the mutation rate.\n+     */\n+    private double getMutationRate() {\n+        return mutationRate;\n+    }\n+\n+    /**\n+     * Access the selection policy.\n+     * \n+     * @return the selection policy.\n+     */\n+    private SelectionPolicy getSelectionPolicy() {\n+        return selectionPolicy;\n+    }\n+\n+    /**\n+     * Evolve the given population into the next generation.\n+     * \n+     * @param current the current population.\n+     * @return the population for the next generation.\n+     */\n+    private Population nextGeneration(Population current) {\n+        Population nextGeneration = current.nextGeneration();\n+\n+        while (nextGeneration.getPopulationSize() < nextGeneration\n+                .getPopulationLimit()) {\n+            // select parent chromosomes\n+            ChromosomePair pair = getSelectionPolicy().select(current);\n+\n+            // apply crossover policy to create two offspring\n+            if (Math.random() < getCrossoverRate()) {\n+                pair = getCrossoverPolicy().crossover(pair.getFirst(),\n+                        pair.getSecond());\n+            }\n+\n+            // apply mutation policy to first offspring\n+            if (Math.random() < getMutationRate()) {\n+                nextGeneration.addChromosome(getMutationPolicy().mutate(\n+                        pair.getFirst()));\n+\n+                if (nextGeneration.getPopulationSize() < nextGeneration\n+                        .getPopulationLimit()) {\n+                    // apply mutation policy to second offspring\n+                    nextGeneration.addChromosome(getMutationPolicy().mutate(\n+                            pair.getSecond()));\n+                }\n+            }\n+        }\n+\n+        return nextGeneration;\n+    }\n+\n+    /**\n+     * Modify the crossover policy.\n+     * \n+     * @param value the new crossover policy.\n+     */\n+    public void setCrossoverPolicy(CrossoverPolicy value) {\n+        this.crossoverPolicy = value;\n+    }\n+\n+    /**\n+     * Modify the crossover rate.\n+     * \n+     * @param value the new crossover rate.\n+     */\n+    public void setCrossoverRate(double value) {\n+        this.crossoverRate = value;\n+    }\n+\n+    /**\n+     * Modify the mutation policy.\n+     * \n+     * @param value the new mutation policy.\n+     */\n+    public void setMutationPolicy(MutationPolicy value) {\n+        this.mutationPolicy = value;\n+    }\n+\n+    /**\n+     * Modify the mutation rate.\n+     * \n+     * @param value the new mutation rate.\n+     */\n+    public void setMutationRate(double value) {\n+        this.mutationRate = value;\n+    }\n+\n+    /**\n+     * Modify the selection policy.\n+     * \n+     * @param value the new selection policy.\n+     */\n+    public void setSelectionPolicy(SelectionPolicy value) {\n+        this.selectionPolicy = value;\n+    }\n+}\n--- a/src/java/org/apache/commons/math/genetics/MutationPolicy.java\n+++ b/src/java/org/apache/commons/math/genetics/MutationPolicy.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.commons.math.genetics;\n-\n-/**\n- * Algorithm used to mutate a chrommosome.\n- */\n-public interface MutationPolicy {\n-\n-    /**\n-     * Mutate the given chromosome.\n-     * @param original the original chromosome.\n-     * @return the mutated chromomsome.\n-     */\n-    Chromosome mutate(Chromosome original);\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.genetics;\n+\n+/**\n+ * Algorithm used to mutate a chrommosome.\n+ */\n+public interface MutationPolicy {\n+\n+    /**\n+     * Mutate the given chromosome.\n+     * @param original the original chromosome.\n+     * @return the mutated chromomsome.\n+     */\n+    Chromosome mutate(Chromosome original);\n+}\n--- a/src/java/org/apache/commons/math/genetics/Population.java\n+++ b/src/java/org/apache/commons/math/genetics/Population.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.commons.math.genetics;\n-\n-/**\n- * A collection of chromosomes that facilitates generational evolution.\n- */\n-public interface Population {\n-    /**\n-     * Access the current population size.\n-     * @return the current population size.\n-     */\n-    int getPopulationSize();\n-\n-    /**\n-     * Access the maximum population size.\n-     * @return the maximum population size.\n-     */\n-    int getPopulationLimit();\n-\n-    /**\n-     * Start the population for the next generation.\n-     * @return the beginnings of the next generation.\n-     */\n-    Population nextGeneration();\n-\n-    /**\n-     * Add the given chromosome to the population.\n-     * @param chromosome the chromosome to add.\n-     */\n-    void addChromosome(Chromosome chromosome);\n-\n-    /**\n-     * Access the fittest chromosome in this population.\n-     * @return the fittest chromosome.\n-     */\n-    Chromosome getFittestChromosome();\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.genetics;\n+\n+/**\n+ * A collection of chromosomes that facilitates generational evolution.\n+ */\n+public interface Population {\n+    /**\n+     * Access the current population size.\n+     * @return the current population size.\n+     */\n+    int getPopulationSize();\n+\n+    /**\n+     * Access the maximum population size.\n+     * @return the maximum population size.\n+     */\n+    int getPopulationLimit();\n+\n+    /**\n+     * Start the population for the next generation.\n+     * @return the beginnings of the next generation.\n+     */\n+    Population nextGeneration();\n+\n+    /**\n+     * Add the given chromosome to the population.\n+     * @param chromosome the chromosome to add.\n+     */\n+    void addChromosome(Chromosome chromosome);\n+\n+    /**\n+     * Access the fittest chromosome in this population.\n+     * @return the fittest chromosome.\n+     */\n+    Chromosome getFittestChromosome();\n+}\n--- a/src/java/org/apache/commons/math/genetics/SelectionPolicy.java\n+++ b/src/java/org/apache/commons/math/genetics/SelectionPolicy.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.commons.math.genetics;\n-\n-/**\n- * Algorithm used to select a chromosome pair from a population.\n- */\n-public interface SelectionPolicy {\n-    /**\n-     * Select two chromosomes from the population.\n-     * @param population the population from which the chromosomes are choosen.\n-     * @return the selected chromosomes.\n-     */\n-    ChromosomePair select(Population population);\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.genetics;\n+\n+/**\n+ * Algorithm used to select a chromosome pair from a population.\n+ */\n+public interface SelectionPolicy {\n+    /**\n+     * Select two chromosomes from the population.\n+     * @param population the population from which the chromosomes are choosen.\n+     * @return the selected chromosomes.\n+     */\n+    ChromosomePair select(Population population);\n+}", "timestamp": 1206977957, "metainfo": ""}