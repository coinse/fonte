{"sha": "14c51c348f87b8ed3bac36e24a65430761f469bb", "log": "Fail early on wrong derivation order.  If the user asks for a derivation order that is too large for the number of points in the finite differences algorithm, we now detect it before the first call to the underlying function.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiator.java\n \n /** Univariate functions differentiator using finite differences.\n  * <p>\n- * This class creates some wrapper objetcs around regular\n+ * This class creates some wrapper objects around regular\n  * {@link UnivariateFunction univariate functions} (or {@link\n  * UnivariateVectorFunction univariate vector functions} or {@link\n  * UnivariateMatrixFunction univariate matrix functions}). These\n     private DerivativeStructure evaluate(final DerivativeStructure t, final double[] y)\n         throws NumberIsTooLargeException {\n \n-        // check we can achieve the requested derivation order with the sample\n-        final int order = t.getOrder();\n-        if (order >= nbPoints) {\n-            throw new NumberIsTooLargeException(order, nbPoints, false);\n-        }\n-\n         // create divided differences diagonal arrays\n         final double[] top    = new double[nbPoints];\n         final double[] bottom = new double[nbPoints];\n         }\n \n         // evaluate interpolation polynomial (represented by top diagonal) at t\n+        final int order      = t.getOrder();\n         final int parameters = t.getFreeParameters();\n         final double[] derivatives = t.getAllDerivatives();\n         DerivativeStructure interpolation = new DerivativeStructure(parameters, order, 0.0);\n             public DerivativeStructure value(final DerivativeStructure t)\n                 throws MathIllegalArgumentException {\n \n+                // check we can achieve the requested derivation order with the sample\n+                if (t.getOrder() >= nbPoints) {\n+                    throw new NumberIsTooLargeException(t.getOrder(), nbPoints, false);\n+                }\n+\n                 // get sample points centered around t value\n                 final double t0 = t.getValue();\n                 final double[] y = new double[nbPoints];\n             /** {@inheritDoc} */\n             public DerivativeStructure[] value(final DerivativeStructure t)\n                 throws MathIllegalArgumentException {\n+\n+                // check we can achieve the requested derivation order with the sample\n+                if (t.getOrder() >= nbPoints) {\n+                    throw new NumberIsTooLargeException(t.getOrder(), nbPoints, false);\n+                }\n \n                 // get sample points centered around t value\n                 final double t0 = t.getValue();\n             public DerivativeStructure[][]  value(final DerivativeStructure t)\n                 throws MathIllegalArgumentException {\n \n+                // check we can achieve the requested derivation order with the sample\n+                if (t.getOrder() >= nbPoints) {\n+                    throw new NumberIsTooLargeException(t.getOrder(), nbPoints, false);\n+                }\n+\n                 // get sample points centered around t value\n                 final double t0 = t.getValue();\n                 double[][][] y = null;\n--- a/src/test/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiatorTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiatorTest.java\n import org.apache.commons.math3.analysis.UnivariateVectorFunction;\n import org.apache.commons.math3.analysis.function.Gaussian;\n import org.apache.commons.math3.analysis.function.Sin;\n+import org.apache.commons.math3.exception.MathInternalError;\n import org.apache.commons.math3.exception.NotPositiveException;\n+import org.apache.commons.math3.exception.NumberIsTooLargeException;\n import org.apache.commons.math3.exception.NumberIsTooSmallException;\n import org.apache.commons.math3.util.FastMath;\n import org.junit.Assert;\n             Assert.assertEquals(expectedBad[i],  maxErrorBad[i],  0.01 * expectedBad[i]);\n         }\n \n+    }\n+\n+    @Test(expected=NumberIsTooLargeException.class)\n+    public void testWrongOrder() {\n+        UnivariateDifferentiableFunction f =\n+                new FiniteDifferencesDifferentiator(3, 0.01).differentiate(new UnivariateFunction() {\n+                    public double value(double x) {\n+                        // this exception should not be thrown because wrong order\n+                        // should be detected before function call\n+                        throw new MathInternalError();\n+                    }\n+                });\n+        f.value(new DerivativeStructure(1, 3, 0, 1.0));\n+    }\n+\n+    @Test(expected=NumberIsTooLargeException.class)\n+    public void testWrongOrderVector() {\n+        UnivariateDifferentiableVectorFunction f =\n+                new FiniteDifferencesDifferentiator(3, 0.01).differentiate(new UnivariateVectorFunction() {\n+                    public double[] value(double x) {\n+                        // this exception should not be thrown because wrong order\n+                        // should be detected before function call\n+                        throw new MathInternalError();\n+                    }\n+                });\n+        f.value(new DerivativeStructure(1, 3, 0, 1.0));\n+    }\n+\n+    @Test(expected=NumberIsTooLargeException.class)\n+    public void testWrongOrderMatrix() {\n+        UnivariateDifferentiableMatrixFunction f =\n+                new FiniteDifferencesDifferentiator(3, 0.01).differentiate(new UnivariateMatrixFunction() {\n+                    public double[][] value(double x) {\n+                        // this exception should not be thrown because wrong order\n+                        // should be detected before function call\n+                        throw new MathInternalError();\n+                    }\n+                });\n+        f.value(new DerivativeStructure(1, 3, 0, 1.0));\n     }\n \n     @Test", "timestamp": 1347959274, "metainfo": ""}