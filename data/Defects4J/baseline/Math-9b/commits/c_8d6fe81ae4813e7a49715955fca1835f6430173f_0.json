{"sha": "8d6fe81ae4813e7a49715955fca1835f6430173f", "log": "fixed checkstyle warnings  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/dfp/DfpMath.java\n+++ b/src/main/java/org/apache/commons/math/dfp/DfpMath.java\n         int p2 = 0;\n \n         // Check the arguments somewhat here\n-        if (a.equals(a.getZero()) || a.lessThan(a.getZero()) || (a.equals(a) == false)) {\n+        if (a.equals(a.getZero()) || a.lessThan(a.getZero()) || a.isNaN()) {\n             // negative, zero or NaN\n             a.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);\n             return a.dotrap(DfpField.FLAG_INVALID, \"ln\", a, a.newInstance((byte)1, (byte) Dfp.QNAN));\n         }\n \n         if (y.equals(one)) {\n-            if (!x.equals(x)) {\n+            if (x.isNaN()) {\n                 // Test for NaNs\n                 x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                 return x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, x);\n             return x;\n         }\n \n-        if (!x.equals(x) || !y.equals(y)) {\n+        if (x.isNaN() || y.isNaN()) {\n             // Test for NaNs\n             x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);\n             return x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, x.newInstance((byte)1, (byte) Dfp.QNAN));", "timestamp": 1283715768, "metainfo": ""}