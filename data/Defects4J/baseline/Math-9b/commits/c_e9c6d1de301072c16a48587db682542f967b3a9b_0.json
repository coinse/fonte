{"sha": "e9c6d1de301072c16a48587db682542f967b3a9b", "log": "Replaced NullPointerException by NullArgumentException  JIRA: MATH-403  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java\n \n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.exception.NoDataException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.analysis.ParametricUnivariateRealFunction;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Immutable representation of a real polynomial function with real coefficients.\n      * the coefficients property.</p>\n      *\n      * @param c Polynomial coefficients.\n-     * @throws NullPointerException if {@code c} is {@code null}.\n+     * @throws NullArgumentException if {@code c} is {@code null}.\n      * @throws NoDataException if {@code c} is empty.\n      */\n-    public PolynomialFunction(double c[]) {\n+    public PolynomialFunction(double c[])\n+        throws NullArgumentException, NoDataException {\n         super();\n+        MathUtils.checkNotNull(c);\n         int n = c.length;\n         if (n == 0) {\n             throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);\n      * @param argument Input value.\n      * @return the value of the polynomial.\n      * @throws NoDataException if {@code coefficients} is empty.\n-     * @throws NullPointerException if {@code coefficients} is {@code null}.\n-     */\n-    protected static double evaluate(double[] coefficients, double argument) {\n+     * @throws NullArgumentException if {@code coefficients} is {@code null}.\n+     */\n+    protected static double evaluate(double[] coefficients, double argument)\n+        throws NullArgumentException, NoDataException {\n+        MathUtils.checkNotNull(coefficients);\n         int n = coefficients.length;\n         if (n == 0) {\n             throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);\n      * @param coefficients Coefficients of the polynomial to differentiate.\n      * @return the coefficients of the derivative or {@code null} if coefficients has length 1.\n      * @throws NoDataException if {@code coefficients} is empty.\n-     * @throws NullPointerException if {@code coefficients} is {@code null}.\n-     */\n-    protected static double[] differentiate(double[] coefficients) {\n+     * @throws NullArgumentException if {@code coefficients} is {@code null}.\n+     */\n+    protected static double[] differentiate(double[] coefficients)\n+        throws NullArgumentException, NoDataException {\n+        MathUtils.checkNotNull(coefficients);\n         int n = coefficients.length;\n         if (n == 0) {\n             throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n \n import org.apache.commons.math.FieldElement;\n import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.MathUtils;\n import org.apache.commons.math.util.FastMath;\n      *\n      * @param rhs the other complex number\n      * @return the complex number sum\n-     * @throws NullPointerException if <code>rhs</code> is null\n-     */\n-    public Complex add(Complex rhs) {\n+     * @throws NullArgumentException if <code>rhs</code> is null\n+     */\n+    public Complex add(Complex rhs)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(rhs);\n         return createComplex(real + rhs.getReal(),\n             imaginary + rhs.getImaginary());\n     }\n      *\n      * @param rhs the other complex number\n      * @return the complex number quotient\n-     * @throws NullPointerException if <code>rhs</code> is null\n-     */\n-    public Complex divide(Complex rhs) {\n+     * @throws NullArgumentException if <code>rhs</code> is null\n+     */\n+    public Complex divide(Complex rhs)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(rhs);\n         if (isNaN() || rhs.isNaN()) {\n             return NaN;\n         }\n      *\n      * @param rhs the other complex number\n      * @return the complex number product\n-     * @throws NullPointerException if <code>rhs</code> is null\n-     */\n-    public Complex multiply(Complex rhs) {\n+     * @throws NullArgumentException if <code>rhs</code> is null\n+     */\n+    public Complex multiply(Complex rhs)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(rhs);\n         if (isNaN() || rhs.isNaN()) {\n             return NaN;\n         }\n      *\n      * @param rhs the other complex number\n      * @return the complex number difference\n-     * @throws NullPointerException if <code>rhs</code> is null\n-     */\n-    public Complex subtract(Complex rhs) {\n+     * @throws NullArgumentException if <code>rhs</code> is null\n+     */\n+    public Complex subtract(Complex rhs)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(rhs);\n         if (isNaN() || rhs.isNaN()) {\n             return NaN;\n         }\n      *\n      * @param x the exponent.\n      * @return <code>this</code><sup><code>x</code></sup>\n-     * @throws NullPointerException if x is null\n-     * @since 1.2\n-     */\n-    public Complex pow(Complex x) {\n-        if (x == null) {\n-            throw new NullPointerException();\n-        }\n+     * @throws NullArgumentException if x is null\n+     * @since 1.2\n+     */\n+    public Complex pow(Complex x)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(x);\n         return this.log().multiply(x).exp();\n     }\n \n--- a/src/main/java/org/apache/commons/math/exception/NullArgumentException.java\n+++ b/src/main/java/org/apache/commons/math/exception/NullArgumentException.java\n  * this exception.\n  * This class is meant to signal a precondition violation (\"null is an illegal\n  * argument\") and so does not extend the standard {@code NullPointerException}.\n- * Proagation of {@code NullPointerException} from within Commons-Math is\n+ * Propagation of {@code NullPointerException} from within Commons-Math is\n  * construed to be a bug.\n  *\n  * @since 2.2\n--- a/src/main/java/org/apache/commons/math/fraction/BigFraction.java\n+++ b/src/main/java/org/apache/commons/math/fraction/BigFraction.java\n      * @param bg\n      *            the {@link BigInteger} to add, must'nt be <code>null</code>.\n      * @return a <code>BigFraction</code> instance with the resulting values.\n-     * @throws NullPointerException\n+     * @throws NullArgumentException\n      *             if the {@link BigInteger} is <code>null</code>.\n      */\n-    public BigFraction add(final BigInteger bg) {\n+    public BigFraction add(final BigInteger bg) throws NullArgumentException {\n+        MathUtils.checkNotNull(bg);\n         return new BigFraction(numerator.add(denominator.multiply(bg)), denominator);\n     }\n \n--- a/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java\n import org.apache.commons.math.exception.NoDataException;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.MathUtils;\n import org.apache.commons.math.util.FastMath;\n     }\n \n     /** {@inheritDoc} */\n-    public void setSubMatrix(final double[][] subMatrix, final int row, final int column) {\n+    public void setSubMatrix(final double[][] subMatrix, final int row, final int column)\n+        throws NoDataException, DimensionMismatchException, NullArgumentException {\n+        MathUtils.checkNotNull(subMatrix);\n         final int nRows = subMatrix.length;\n         if (nRows == 0) {\n             throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n--- a/src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java\n import org.apache.commons.math.exception.NoDataException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MathIllegalStateException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Implementation of FieldMatrix<T> using a {@link FieldElement}[][] array to store entries.\n      * @param copyArray Whether to copy or reference the input array.\n      * @throws DimensionMismatchException if {@code d} is not rectangular.\n      * @throws NoDataException if there are not at least one row and one column.\n-     * @throws org.apache.commons.math.exception.NullArgumentException\n-     * if {@code d} is {@code null}.\n+     * @throws NullArgumentException if {@code d} is {@code null}.\n      * @see #Array2DRowFieldMatrix(FieldElement[][])\n      */\n-    public Array2DRowFieldMatrix(final Field<T> field, final T[][] d, final boolean copyArray) {\n+    public Array2DRowFieldMatrix(final Field<T> field, final T[][] d, final boolean copyArray)\n+        throws DimensionMismatchException, NoDataException, NullArgumentException {\n         super(field);\n         if (copyArray) {\n             copyIn(d);\n         } else {\n-            if (d == null) {\n-                throw new NullPointerException();\n-            }\n+            MathUtils.checkNotNull(d);\n             final int nRows = d.length;\n             if (nRows == 0) {\n                 throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n--- a/src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java\n import org.apache.commons.math.exception.NoDataException;\n import org.apache.commons.math.exception.MathIllegalStateException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Implementation of RealMatrix using a double[][] array to store entries and\n      * @param d Data for the new matrix.\n      * @throws DimensionMismatchException if {@code d} is not rectangular.\n      * @throws NoDataException if {@code d} row or colum dimension is zero.\n-     * @throws NullPointerException if {@code d} is {@code null}.\n+     * @throws NullArgumentException if {@code d} is {@code null}.\n      * @see #Array2DRowRealMatrix(double[][], boolean)\n      */\n-    public Array2DRowRealMatrix(final double[][] d) {\n+    public Array2DRowRealMatrix(final double[][] d)\n+        throws DimensionMismatchException, NoDataException, NullArgumentException {\n         copyIn(d);\n     }\n \n             if (column > 0) {\n                 throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);\n             }\n+            MathUtils.checkNotNull(subMatrix);\n             final int nRows = subMatrix.length;\n             if (nRows == 0) {\n                 throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n      * @param in Data to copy.\n      * @throws NoDataException if the input array is empty.\n      * @throws DimensionMismatchException if the input array is not rectangular.\n-     * @throws org.apache.commons.math.exception.NullArgumentException if\n+     * @throws NullArgumentException if\n      * the input array is {@code null}.\n      */\n-    private void copyIn(final double[][] in) {\n+    private void copyIn(final double[][] in)\n+        throws DimensionMismatchException, NoDataException, NullArgumentException {\n         setSubMatrix(in, 0, 0);\n     }\n }\n--- a/src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Cache-friendly implementation of FieldMatrix using a flat arrays to store\n     @Override\n     public void setSubMatrix(final T[][] subMatrix, final int row, final int column) {\n         // safety checks\n+        MathUtils.checkNotNull(subMatrix);\n         final int refLength = subMatrix[0].length;\n         if (refLength == 0) {\n             throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n--- a/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java\n \n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.NoDataException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Cache-friendly implementation of RealMatrix using a flat arrays to store\n \n     /** {@inheritDoc} */\n     @Override\n-    public void setSubMatrix(final double[][] subMatrix, final int row, final int column) {\n+    public void setSubMatrix(final double[][] subMatrix, final int row, final int column)\n+        throws NoDataException, NullArgumentException {\n         // safety checks\n+        MathUtils.checkNotNull(subMatrix);\n         final int refLength = subMatrix[0].length;\n         if (refLength == 0) {\n             throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n--- a/src/main/java/org/apache/commons/math/linear/RealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/RealMatrix.java\n \n package org.apache.commons.math.linear;\n \n+import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.exception.OutOfRangeException;\n+import org.apache.commons.math.exception.ZeroException;\n+\n /**\n  * Interface defining a real-valued matrix with basic algebraic operations.\n  * <p>\n     * @param subMatrix  array containing the submatrix replacement data\n     * @param row  row coordinate of the top, left element to be replaced\n     * @param column  column coordinate of the top, left element to be replaced\n-    * @throws org.apache.commons.math.exception.ZeroException if\n-    * {@code subMatrix} does not contain at least one column.\n-    * @throws org.apache.commons.math.exception.OutOfRangeException if\n-    * {@code subMatrix} does not fit into this matrix from element in\n-    * {@code (row, column)}.\n-    * @throws org.apache.commons.math.exception.DimensionMismatchException\n-    * if {@code subMatrix} is not rectangular.\n+    * @throws ZeroException if {@code subMatrix} does not contain at least one column.\n+    * @throws OutOfRangeException if {@code subMatrix} does not fit into\n+    * this matrix from element in {@code (row, column)}.\n+    * @throws DimensionMismatchException if {@code subMatrix} is not rectangular.\n     * (not all rows have the same length) or empty.\n-    * @throws org.apache.commons.math.exception.NullArgumentException if\n-    * {@code subMatrix} is {@code null}.\n+    * @throws NullArgumentException if {@code subMatrix} is {@code null}.\n     * @since 2.0\n     */\n-    void setSubMatrix(double[][] subMatrix, int row, int column);\n+    void setSubMatrix(double[][] subMatrix, int row, int column)\n+        throws ZeroException, OutOfRangeException, DimensionMismatchException, NullArgumentException;\n \n    /**\n     * Geet the entries at the given row index\n--- a/src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java\n+++ b/src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java\n import java.net.URL;\n import java.util.List;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.StatisticalSummary;\n import org.apache.commons.math.stat.descriptive.SummaryStatistics;\n \n      *\n      * @param file the input file\n      * @throws IOException if an IO error occurs\n+     * @throws NullArgumentException if file is null\n      */\n     void load(File file) throws IOException;\n \n      *\n      * @param url url of the input file\n      * @throws IOException if an IO error occurs\n+     * @throws NullArgumentException if url is null\n      */\n-    void load(URL url) throws IOException;\n+    void load(URL url) throws IOException, NullArgumentException;\n \n     /**\n      * Generates a random value from this distribution.\n--- a/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n import java.util.List;\n \n import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.StatisticalSummary;\n import org.apache.commons.math.stat.descriptive.SummaryStatistics;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Implements <code>EmpiricalDistribution</code> interface.  This implementation\n      * array of numbers.\n      *\n      * @param in the input data array\n-     */\n-    public void load(double[] in) {\n+     * @exception NullArgumentException if in is null\n+     */\n+    public void load(double[] in) throws NullArgumentException {\n         DataAdapter da = new ArrayDataAdapter(in);\n         try {\n             da.computeStats();\n      * @param url  url of the input file\n      *\n      * @throws IOException if an IO error occurs\n-     */\n-    public void load(URL url) throws IOException {\n+     * @throws NullArgumentException if url is null\n+     */\n+    public void load(URL url) throws IOException, NullArgumentException {\n+        MathUtils.checkNotNull(url);\n         BufferedReader in =\n             new BufferedReader(new InputStreamReader(url.openStream()));\n         try {\n      *\n      * @param file the input file\n      * @throws IOException if an IO error occurs\n-     */\n-    public void load(File file) throws IOException {\n+     * @throws NullArgumentException if file is null\n+     */\n+    public void load(File file) throws IOException, NullArgumentException {\n+        MathUtils.checkNotNull(file);\n         BufferedReader in = new BufferedReader(new FileReader(file));\n         try {\n             DataAdapter da = new StreamDataAdapter(in);\n          * Construct an ArrayDataAdapter from a double[] array\n          *\n          * @param in double[] array holding the data\n+         * @throws NullArgumentException if in is null\n          */\n-        public ArrayDataAdapter(double[] in){\n+        public ArrayDataAdapter(double[] in) throws NullArgumentException {\n             super();\n+            MathUtils.checkNotNull(in);\n             inputArray = in;\n         }\n \n--- a/src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n import java.util.Arrays;\n \n import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.moment.GeometricMean;\n import org.apache.commons.math.stat.descriptive.moment.Kurtosis;\n import org.apache.commons.math.stat.descriptive.rank.Percentile;\n import org.apache.commons.math.stat.descriptive.summary.Sum;\n import org.apache.commons.math.stat.descriptive.summary.SumOfSquares;\n+import org.apache.commons.math.util.MathUtils;\n import org.apache.commons.math.util.ResizableDoubleArray;\n import org.apache.commons.math.util.FastMath;\n \n      *\n      * @param source DescriptiveStatistics to copy\n      * @param dest DescriptiveStatistics to copy to\n-     * @throws NullPointerException if either source or dest is null\n-     */\n-    public static void copy(DescriptiveStatistics source, DescriptiveStatistics dest) {\n+     * @throws NullArgumentException if either source or dest is null\n+     */\n+    public static void copy(DescriptiveStatistics source, DescriptiveStatistics dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         // Copy data and window size\n         dest.eDA = source.eDA.copy();\n         dest.windowSize = source.windowSize;\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n import java.io.Serializable;\n \n import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.moment.GeometricMean;\n import org.apache.commons.math.stat.descriptive.moment.Mean;\n      *\n      * @param source SummaryStatistics to copy\n      * @param dest SummaryStatistics to copy to\n-     * @throws NullPointerException if either source or dest is null\n-     */\n-    public static void copy(SummaryStatistics source, SummaryStatistics dest) {\n+     * @throws NullArgumentException if either source or dest is null\n+     */\n+    public static void copy(SummaryStatistics source, SummaryStatistics dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.maxImpl = source.maxImpl.copy();\n         dest.meanImpl = source.meanImpl.copy();\n         dest.minImpl = source.minImpl.copy();\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatistics.java\n  * limitations under the License.\n  */\n package org.apache.commons.math.stat.descriptive;\n+\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Implementation of\n      *\n      * @param source SynchronizedDescriptiveStatistics to copy\n      * @param dest SynchronizedDescriptiveStatistics to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n     public static void copy(SynchronizedDescriptiveStatistics source,\n-            SynchronizedDescriptiveStatistics dest) {\n+                            SynchronizedDescriptiveStatistics dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         synchronized (source) {\n             synchronized (dest) {\n                 DescriptiveStatistics.copy(source, dest);\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java\n  */\n package org.apache.commons.math.stat.descriptive;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.util.MathUtils;\n+\n /**\n  * Implementation of\n  * {@link org.apache.commons.math.stat.descriptive.SummaryStatistics} that\n      *\n      * @param source SynchronizedSummaryStatistics to copy\n      * @param dest SynchronizedSummaryStatistics to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n     public static void copy(SynchronizedSummaryStatistics source,\n-            SynchronizedSummaryStatistics dest) {\n+                            SynchronizedSummaryStatistics dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         synchronized (source) {\n             synchronized (dest) {\n                 SummaryStatistics.copy(source, dest);\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java\n package org.apache.commons.math.stat.descriptive.moment;\n \n import java.io.Serializable;\n+\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Computes the first moment (arithmetic mean).  Uses the definitional formula:\n      *\n      * @param source FirstMoment to copy\n      * @param dest FirstMoment to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(FirstMoment source, FirstMoment dest) {\n+    public static void copy(FirstMoment source, FirstMoment dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.n = source.n;\n         dest.m1 = source.m1;\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java\n package org.apache.commons.math.stat.descriptive.moment;\n \n import java.io.Serializable;\n+\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Computes a statistic related to the Fourth Central Moment.  Specifically,\n      *\n      * @param source FourthMoment to copy\n      * @param dest FourthMoment to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(FourthMoment source, FourthMoment dest) {\n+    public static void copy(FourthMoment source, FourthMoment dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         ThirdMoment.copy(source, dest);\n         dest.m4 = source.m4;\n     }\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java\n import java.io.Serializable;\n \n import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic;\n import org.apache.commons.math.stat.descriptive.summary.SumOfLogs;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Returns the <a href=\"http://www.xycoon.com/geometric_mean.htm\">\n      *\n      * @param source GeometricMean to copy\n      * @param dest GeometricMean to copy to\n-     * @throws NullPointerException if either source or dest is null\n-     */\n-    public static void copy(GeometricMean source, GeometricMean dest) {\n+     * @throws NullArgumentException if either source or dest is null\n+     */\n+    public static void copy(GeometricMean source, GeometricMean dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.sumOfLogs = source.sumOfLogs.copy();\n     }\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java\n import java.io.Serializable;\n \n import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n \n /**\n      *\n      * @param source Kurtosis to copy\n      * @param dest Kurtosis to copy to\n-     * @throws NullPointerException if either source or dest is null\n-     */\n-    public static void copy(Kurtosis source, Kurtosis dest) {\n+     * @throws NullArgumentException if either source or dest is null\n+     */\n+    public static void copy(Kurtosis source, Kurtosis dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.moment = source.moment.copy();\n         dest.incMoment = source.incMoment;\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math.stat.descriptive.WeightedEvaluation;\n import org.apache.commons.math.stat.descriptive.summary.Sum;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * <p>Computes the arithmetic mean of a set of values. Uses the definitional\n      *\n      * @param source Mean to copy\n      * @param dest Mean to copy to\n-     * @throws NullPointerException if either source or dest is null\n-     */\n-    public static void copy(Mean source, Mean dest) {\n+     * @throws NullArgumentException if either source or dest is null\n+     */\n+    public static void copy(Mean source, Mean dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.incMoment = source.incMoment;\n         dest.moment = source.moment.copy();\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java\n package org.apache.commons.math.stat.descriptive.moment;\n \n import java.io.Serializable;\n+\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Computes a statistic related to the Second Central Moment.  Specifically,\n      *\n      * @param source SecondMoment to copy\n      * @param dest SecondMoment to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(SecondMoment source, SecondMoment dest) {\n+    public static void copy(SecondMoment source, SecondMoment dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         FirstMoment.copy(source, dest);\n         dest.m2 = source.m2;\n     }\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java\n import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * <p>Computes the semivariance of a set of values with respect to a given cutoff value.\n      *\n      * @param source SemiVariance to copy\n      * @param dest SemiVariance to copy to\n-     * @throws NullPointerException if either source or dest is null\n-     */\n-    public static void copy(final SemiVariance source, SemiVariance dest) {\n+     * @throws NullArgumentException if either source or dest is null\n+     */\n+    public static void copy(final SemiVariance source, SemiVariance dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.biasCorrected = source.biasCorrected;\n         dest.varianceDirection = source.varianceDirection;\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Computes the skewness of the available values.\n      *\n      * @param source Skewness to copy\n      * @param dest Skewness to copy to\n-     * @throws NullPointerException if either source or dest is null\n-     */\n-    public static void copy(Skewness source, Skewness dest) {\n+     * @throws NullArgumentException if either source or dest is null\n+     */\n+    public static void copy(Skewness source, Skewness dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.moment = new ThirdMoment(source.moment.copy());\n         dest.incMoment = source.incMoment;\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Computes the sample standard deviation.  The standard deviation\n      *\n      * @param source StandardDeviation to copy\n      * @param dest StandardDeviation to copy to\n-     * @throws NullPointerException if either source or dest is null\n-     */\n-    public static void copy(StandardDeviation source, StandardDeviation dest) {\n+     * @throws NullArgumentException if either source or dest is null\n+     */\n+    public static void copy(StandardDeviation source, StandardDeviation dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.variance = source.variance.copy();\n     }\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java\n package org.apache.commons.math.stat.descriptive.moment;\n \n import java.io.Serializable;\n+\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.util.MathUtils;\n \n \n /**\n      *\n      * @param source ThirdMoment to copy\n      * @param dest ThirdMoment to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(ThirdMoment source, ThirdMoment dest) {\n+    public static void copy(ThirdMoment source, ThirdMoment dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         SecondMoment.copy(source, dest);\n         dest.m3 = source.m3;\n         dest.nDevSq = source.nDevSq;\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.WeightedEvaluation;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Computes the variance of the available values.  By default, the unbiased\n      *\n      * @param source Variance to copy\n      * @param dest Variance to copy to\n-     * @throws NullPointerException if either source or dest is null\n-     */\n-    public static void copy(Variance source, Variance dest) {\n-        if (source == null ||\n-            dest == null) {\n-            throw new NullArgumentException();\n-        }\n+     * @throws NullArgumentException if either source or dest is null\n+     */\n+    public static void copy(Variance source, Variance dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.moment = source.moment.copy();\n         dest.isBiasCorrected = source.isBiasCorrected;\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Returns the maximum of the available values.\n      *\n      * @param source Max to copy\n      * @param dest Max to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(Max source, Max dest) {\n+    public static void copy(Max source, Max dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.n = source.n;\n         dest.value = source.value;\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Returns the minimum of the available values.\n      *\n      * @param source Min to copy\n      * @param dest Min to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(Min source, Min dest) {\n+    public static void copy(Min source, Min dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.n = source.n;\n         dest.value = source.value;\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java\n import java.io.Serializable;\n import java.util.Arrays;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Provides percentile computation.\n      *\n      * @param source Percentile to copy\n      * @param dest Percentile to copy to\n-     * @throws NullPointerException if either source or dest is null\n-     */\n-    public static void copy(Percentile source, Percentile dest) {\n+     * @throws NullArgumentException if either source or dest is null\n+     */\n+    public static void copy(Percentile source, Percentile dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         if (source.cachedPivots != null) {\n             System.arraycopy(source.cachedPivots, 0, dest.cachedPivots, 0, source.cachedPivots.length);\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math.stat.descriptive.WeightedEvaluation;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Returns the product of the available values.\n      *\n      * @param source Product to copy\n      * @param dest Product to copy to\n-     * @throws NullPointerException if either source or dest is null\n-     */\n-    public static void copy(Product source, Product dest) {\n+     * @throws NullArgumentException if either source or dest is null\n+     */\n+    public static void copy(Product source, Product dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.n = source.n;\n         dest.value = source.value;\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n+import org.apache.commons.math.util.MathUtils;\n \n \n /**\n      *\n      * @param source Sum to copy\n      * @param dest Sum to copy to\n-     * @throws NullPointerException if either source or dest is null\n-     */\n-    public static void copy(Sum source, Sum dest) {\n+     * @throws NullArgumentException if either source or dest is null\n+     */\n+    public static void copy(Sum source, Sum dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.n = source.n;\n         dest.value = source.value;\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Returns the sum of the natural logs for this collection of values.\n      *\n      * @param source SumOfLogs to copy\n      * @param dest SumOfLogs to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(SumOfLogs source, SumOfLogs dest) {\n+    public static void copy(SumOfLogs source, SumOfLogs dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.n = source.n;\n         dest.value = source.value;\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Returns the sum of the squares of the available values.\n      *\n      * @param source SumOfSquares to copy\n      * @param dest SumOfSquares to copy to\n-     * @throws NullPointerException if either source or dest is null\n+     * @throws NullArgumentException if either source or dest is null\n      */\n-    public static void copy(SumOfSquares source, SumOfSquares dest) {\n+    public static void copy(SumOfSquares source, SumOfSquares dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n         dest.setData(source.getDataRef());\n         dest.n = source.n;\n         dest.value = source.value;\n--- a/src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n import org.apache.commons.math.MathException;\n import org.apache.commons.math.exception.NotPositiveException;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.distribution.ChiSquaredDistributionImpl;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Implements Chi-Square test statistics defined in the\n      * Throws MathIllegalArgumentException if the input array is not rectangular.\n      *\n      * @param in array to be tested\n-     * @throws NullPointerException if input array is null\n+     * @throws NullArgumentException if input array is null\n      * @throws MathIllegalArgumentException if input array is not rectangular\n      */\n-    private void checkRectangular(long[][] in) {\n+    private void checkRectangular(long[][] in)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(in);\n         for (int i = 1; i < in.length; i++) {\n             if (in[i].length != in[0].length) {\n                 throw new DimensionMismatchException(LocalizedFormats.DIFFERENT_ROWS_LENGTHS,\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n      * @param o Object to be checked.\n      * @throws NullArgumentException if {@code o} is {@code null}.\n      */\n-    public static void checkNotNull(Object o) {\n+    public static void checkNotNull(Object o)\n+        throws NullArgumentException {\n         if (o == null) {\n             throw new NullArgumentException();\n         }\n--- a/src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java\n+++ b/src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java\n import java.util.Arrays;\n \n import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n     /**\n      * Copy constructor.  Creates a new ResizableDoubleArray that is a deep,\n      * fresh copy of the original. Needs to acquire synchronization lock\n-     * on original.  Original may not be null; otherwise a NullPointerException\n+     * on original.  Original may not be null; otherwise a {@link NullArgumentException}\n      * is thrown.\n      *\n      * @param original array to copy\n+     * @exception NullArgumentException if original is null\n      * @since 2.0\n      */\n-    public ResizableDoubleArray(ResizableDoubleArray original) {\n+    public ResizableDoubleArray(ResizableDoubleArray original)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(original);\n         copy(original, this);\n     }\n \n      * <p>Obtains synchronization locks on both source and dest\n      * (in that order) before performing the copy.</p>\n      *\n-     * <p>Neither source nor dest may be null; otherwise a NullPointerException\n+     * <p>Neither source nor dest may be null; otherwise a {@link NullArgumentException}\n      * is thrown</p>\n      *\n      * @param source ResizableDoubleArray to copy\n      * @param dest ResizableArray to replace with a copy of the source array\n+     * @exception NullArgumentException if either source or dest is null\n      * @since 2.0\n      *\n      */\n-    public static void copy(ResizableDoubleArray source, ResizableDoubleArray dest) {\n-       synchronized(source) {\n+    public static void copy(ResizableDoubleArray source, ResizableDoubleArray dest)\n+        throws NullArgumentException {\n+        MathUtils.checkNotNull(source);\n+        MathUtils.checkNotNull(dest);\n+        synchronized(source) {\n            synchronized(dest) {\n                dest.initialCapacity = source.initialCapacity;\n                dest.contractionCriteria = source.contractionCriteria;\n--- a/src/test/java/org/apache/commons/math/complex/ComplexTest.java\n+++ b/src/test/java/org/apache/commons/math/complex/ComplexTest.java\n package org.apache.commons.math.complex;\n \n import org.apache.commons.math.TestUtils;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.util.FastMath;\n import org.junit.Assert;\n import org.junit.Test;\n                new Complex(-1, 3).pow(Complex.ZERO), 10e-12);\n    }\n \n-    @Test\n+    @Test(expected=NullArgumentException.class)\n     public void testpowNull() {\n-        try {\n-            Complex.ONE.pow(null);\n-            Assert.fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {\n-            // expected\n-        }\n+        Complex.ONE.pow(null);\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java\n import org.apache.commons.math.util.FastMath;\n import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.NoDataException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n         // null\n         try {\n             m.setSubMatrix(null,1,1);\n-            Assert.fail(\"expecting NullPointerException\");\n-        } catch (NullPointerException e) {\n+            Assert.fail(\"expecting NullArgumentException\");\n+        } catch (NullArgumentException e) {\n             // expected\n         }\n         Array2DRowRealMatrix m2 = new Array2DRowRealMatrix();\n--- a/src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java\n import org.apache.commons.math.fraction.Fraction;\n import org.apache.commons.math.fraction.FractionField;\n import org.apache.commons.math.exception.NoDataException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n         // null\n         try {\n             m.setSubMatrix(null,1,1);\n-            Assert.fail(\"expecting NullPointerException\");\n-        } catch (NullPointerException e) {\n+            Assert.fail(\"expecting NullArgumentException\");\n+        } catch (NullArgumentException e) {\n             // expected\n         }\n \n--- a/src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java\n import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.NoDataException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n         // null\n         try {\n             m.setSubMatrix(null,1,1);\n-            Assert.fail(\"expecting NullPointerException\");\n-        } catch (NullPointerException e) {\n+            Assert.fail(\"expecting NullArgumentException\");\n+        } catch (NullArgumentException e) {\n             // expected\n         }\n \n--- a/src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java\n import org.junit.Assert;\n \n import org.apache.commons.math.TestUtils;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.NoDataException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n         // null\n         try {\n             m.setSubMatrix(null, 1, 1);\n-            Assert.fail(\"expecting NullPointerException\");\n-        } catch (NullPointerException e) {\n+            Assert.fail(\"expecting NullArgumentException\");\n+        } catch (NullArgumentException e) {\n             // expected\n         }\n         try {\n--- a/src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java\n \n import org.apache.commons.math.RetryRunner;\n import org.apache.commons.math.TestUtils;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.descriptive.SummaryStatistics;\n import org.junit.Assert;\n import org.junit.Before;\n         verifySame(empiricalDistribution2, dist2);\n     }\n \n-    @Test\n+    @Test(expected=NullArgumentException.class)\n     public void testLoadNullDoubleArray() {\n-        EmpiricalDistribution dist = new EmpiricalDistributionImpl();\n-        try {\n-            dist.load((double[]) null);\n-            Assert.fail(\"load((double[]) null) expected NullPointerException\");\n-        } catch (NullPointerException e) {\n-            // expected\n-        }\n-    }\n-\n-    @Test\n+       new EmpiricalDistributionImpl().load((double[]) null);\n+    }\n+\n+    @Test(expected=NullArgumentException.class)\n     public void testLoadNullURL() throws Exception {\n-        EmpiricalDistribution dist = new EmpiricalDistributionImpl();\n-        try {\n-            dist.load((URL) null);\n-            Assert.fail(\"load((URL) null) expected NullPointerException\");\n-        } catch (NullPointerException e) {\n-            // expected\n-        }\n-    }\n-\n-    @Test\n+        new EmpiricalDistributionImpl().load((URL) null);\n+    }\n+\n+    @Test(expected=NullArgumentException.class)\n     public void testLoadNullFile() throws Exception {\n-        EmpiricalDistribution dist = new EmpiricalDistributionImpl();\n-        try {\n-            dist.load((File) null);\n-            Assert.fail(\"load((File) null) expected NullPointerException\");\n-        } catch (NullPointerException e) {\n-            // expected\n-        }\n+        new EmpiricalDistributionImpl().load((File) null);\n     }\n \n     /**", "timestamp": 1307285969, "metainfo": ""}