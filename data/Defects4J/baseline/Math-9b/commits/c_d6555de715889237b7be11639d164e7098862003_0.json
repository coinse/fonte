{"sha": "d6555de715889237b7be11639d164e7098862003", "log": "fixed a wrong implementation of the Linf vector norm JIRA: MATH-326  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n     }\n \n     /** {@inheritDoc} */\n+    public double getNorm() {\n+        double sum = 0;\n+        Iterator<Entry> it = sparseIterator();\n+        Entry e;\n+        while (it.hasNext() && (e = it.next()) != null) {\n+            final double value = e.getValue();\n+            sum += value * value;\n+        }\n+        return Math.sqrt(sum);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double getL1Norm() {\n+        double norm = 0;\n+        Iterator<Entry> it = sparseIterator();\n+        Entry e;\n+        while (it.hasNext() && (e = it.next()) != null) {\n+            norm += Math.abs(e.getValue());\n+        }\n+        return norm;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double getLInfNorm() {\n+        double norm = 0;\n+        Iterator<Entry> it = sparseIterator();\n+        Entry e;\n+        while (it.hasNext() && (e = it.next()) != null) {\n+            norm = Math.max(norm, Math.abs(e.getValue()));\n+        }\n+        return norm;\n+    }\n+\n+    /** {@inheritDoc} */\n     public double getDistance(double[] v) throws IllegalArgumentException {\n         return getDistance(new ArrayRealVector(v,false));\n     }\n--- a/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public double getNorm() {\n         double sum = 0;\n         for (double a : data) {\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public double getL1Norm() {\n         double sum = 0;\n         for (double a : data) {\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public double getLInfNorm() {\n         double max = 0;\n         for (double a : data) {\n-            max += Math.max(max, Math.abs(a));\n+            max = Math.max(max, Math.abs(a));\n         }\n         return max;\n     }\n--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n         return max;\n     }\n \n-    /** {@inheritDoc} */\n-    public double getL1Norm() {\n-        double res = 0;\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            res += Math.abs(iter.value());\n-        }\n-        return res;\n-    }\n-\n     /**\n      * Optimized method to compute LInfDistance.\n      * @param v The vector to compute from\n             }\n         }\n         return max;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public double getLInfNorm() {\n-        double max = 0;\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            max += iter.value();\n-        }\n-        return max;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public double getNorm() {\n-        double res = 0;\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            res += iter.value() * iter.value();\n-        }\n-        return Math.sqrt(res);\n     }\n \n     /** {@inheritDoc} */\n--- a/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java\n     protected double[] vec2 = {4d, 5d, 6d};\n     protected double[] vec3 = {7d, 8d, 9d};\n     protected double[] vec4 = {1d, 2d, 3d, 4d, 5d, 6d, 7d, 8d, 9d};\n+    protected double[] vec5 = { -4d, 0d, 3d, 1d, -6d, 3d};\n     protected double[] vec_null = {0d, 0d, 0d};\n     protected Double[] dvec1 = {1d, 2d, 3d, 4d, 5d, 6d, 7d, 8d, 9d};\n     protected double[][] mat1 = {{1d, 2d, 3d}, {4d, 5d, 6d},{ 7d, 8d, 9d}};\n     public void testBasicFunctions() {\n         ArrayRealVector v1 = new ArrayRealVector(vec1);\n         ArrayRealVector v2 = new ArrayRealVector(vec2);\n+        ArrayRealVector v5 = new ArrayRealVector(vec5);\n         ArrayRealVector v_null = new ArrayRealVector(vec_null);\n \n         RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n \n-        //octave =  sqrt(sumsq(v1))\n-        double d_getNorm = v1.getNorm();\n-        assertEquals(\"compare values  \", 3.7416573867739413,d_getNorm);\n-\n-        double d_getL1Norm = v1.getL1Norm();\n-        assertEquals(\"compare values  \",6.0, d_getL1Norm);\n-\n-        double d_getLInfNorm = v1.getLInfNorm();\n-        assertEquals(\"compare values  \",6.0, d_getLInfNorm);\n+        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n+        double d_getNorm = v5.getNorm();\n+        assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);\n+\n+        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n+        double d_getL1Norm = v5.getL1Norm();\n+        assertEquals(\"compare values  \", 17.0, d_getL1Norm);\n+\n+        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n+        double d_getLInfNorm = v5.getLInfNorm();\n+        assertEquals(\"compare values  \", 6.0, d_getLInfNorm);\n+\n \n         //octave =  sqrt(sumsq(v1-v2))\n         double dist = v1.getDistance(v2);\n--- a/src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java\n     protected double[] vec2 = {4d, 5d, 6d};\n     protected double[] vec3 = {7d, 8d, 9d};\n     protected double[] vec4 = {1d, 2d, 3d, 4d, 5d, 6d, 7d, 8d, 9d};\n+    protected double[] vec5 = { -4d, 0d, 3d, 1d, -6d, 3d};\n     protected double[] vec_null = {0d, 0d, 0d};\n     protected Double[] dvec1 = {1d, 2d, 3d, 4d, 5d, 6d, 7d, 8d, 9d};\n     protected double[][] mat1 = {{1d, 2d, 3d}, {4d, 5d, 6d},{ 7d, 8d, 9d}};\n     public void testBasicFunctions() {\n         OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n         OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n+        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n         OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n \n         SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n \n-        //octave =  sqrt(sumsq(v1))\n-        double d_getNorm = v1.getNorm();\n-        assertEquals(\"compare values  \", 3.7416573867739413,d_getNorm);\n-\n-        double d_getL1Norm = v1.getL1Norm();\n-        assertEquals(\"compare values  \",6.0, d_getL1Norm);\n-\n-        double d_getLInfNorm = v1.getLInfNorm();\n-        assertEquals(\"compare values  \",6.0, d_getLInfNorm);\n+        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n+        double d_getNorm = v5.getNorm();\n+        assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);\n+\n+        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n+        double d_getL1Norm = v5.getL1Norm();\n+        assertEquals(\"compare values  \", 17.0, d_getL1Norm);\n+\n+        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n+        double d_getLInfNorm = v5.getLInfNorm();\n+        assertEquals(\"compare values  \", 6.0, d_getLInfNorm);\n \n         //octave =  sqrt(sumsq(v1-v2))\n         double dist = v1.getDistance(v2);", "timestamp": 1262089498, "metainfo": ""}