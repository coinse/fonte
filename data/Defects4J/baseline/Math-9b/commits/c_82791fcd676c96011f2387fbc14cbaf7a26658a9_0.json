{"sha": "82791fcd676c96011f2387fbc14cbaf7a26658a9", "log": "PR: http://nagoya.apache.org/bugzilla/show_bug.cgi?id=20633 Submitted by:\tbrent@worden.org   ", "commit": "\n--- a/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n+++ b/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n         double degreesOfFreedom);\n     \n     /**\n+     * Create a new exponential distribution with the given degrees of freedom.\n+     * @param mean mean.\n+     * @return a new exponential distribution.  \n+     */\n+    public abstract ExponentialDistribution createExponentialDistribution(\n+        double mean);\n+    \n+    /**\n      * Create a new F-distribution with the given degrees of freedom.\n      * @param numeratorDegreesOfFreedom numerator degrees of freedom.\n      * @param denominatorDegreesOfFreedom denominator degrees of freedom.\n--- a/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java\n     public TDistribution createTDistribution(double degreesOfFreedom) {\n         return new TDistributionImpl(degreesOfFreedom);\n     }\n-    \n+\n     /**\n      * Create a new F-distribution with the given degrees of freedom.\n      * @param numeratorDegreesOfFreedom numerator degrees of freedom.\n      * @param denominatorDegreesOfFreedom denominator degrees of freedom.\n      * @return a new F-distribution.  \n      */\n-\tpublic FDistribution createFDistribution(\n-\t\tdouble numeratorDegreesOfFreedom,\n-\t\tdouble denominatorDegreesOfFreedom) {\n-\t\treturn new FDistributionImpl(numeratorDegreesOfFreedom,\n+    public FDistribution createFDistribution(\n+        double numeratorDegreesOfFreedom,\n+        double denominatorDegreesOfFreedom) {\n+        return new FDistributionImpl(numeratorDegreesOfFreedom,\n             denominatorDegreesOfFreedom);\n-\t}\n+    }\n+\n+    /**\n+     * Create a new exponential distribution with the given degrees of freedom.\n+     * @param mean mean.\n+     * @return a new exponential distribution.  \n+     */\n+    public ExponentialDistribution createExponentialDistribution(double mean) {\n+        return new ExponentialDistributionImpl(mean);\n+    }    \n \n }\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/ExponentialDistribution.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+/**\n+ * <p>\n+ * The Exponential Distribution\n+ * </p>\n+ * \n+ * <p>\n+ * Instances of ExponentialDistribution objects should be created using\n+ * {@link DistributionFactory#createExponentialDistribution(double)}\n+ * </p>\n+ * \n+ * <p>\n+ * References:\n+ * <ul>\n+ * <li><a href=\"http://mathworld.wolfram.com/ExponentialDistribution.html\">\n+ * Exponential Distribution</a></li>\n+ * </p>\n+ * \n+ * @author Brent Worden\n+ */\n+public interface ExponentialDistribution extends ContinuousDistribution {\n+    /**\n+     * Modify the mean.\n+     * @param mean the new mean.\n+     */\n+    void setMean(double mean);\n+    \n+    /**\n+     * Access the mean.\n+     * @return the mean.\n+     */\n+    double getMean();\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n+package org.apache.commons.math.stat.distribution;\n+\n+/**\n+ * The default implementation of {@link ExponentialDistribution}\n+ * \n+ * @author Brent Worden\n+ */\n+public class ExponentialDistributionImpl\n+\textends AbstractContinuousDistribution\n+\timplements ExponentialDistribution {\n+\n+    /** The mean of this distribution. */\n+    private double mean;\n+    \n+    /**\n+     * Create a exponential distribution with the given mean.\n+     * @param degreesOfFreedom degrees of freedom.\n+     */\n+\tpublic ExponentialDistributionImpl(double mean) {\n+\t\tsuper();\n+        setMean(mean);\n+\t}\n+\n+        \n+    /**\n+     * Access the domain value lower bound, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value lower bound, i.e.\n+     *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n+     */\n+    protected double getDomainLowerBound(double p){\n+        return 0.0;\n+    }\n+\n+    /**\n+     * Access the domain value upper bound, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value upper bound, i.e.\n+     *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n+     */\n+    protected double getDomainUpperBound(double p){\n+        return Double.MAX_VALUE;\n+    }\n+\n+    /**\n+     * Access the initial domain value, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return initial domain value\n+     */\n+    protected double getInitialDomain(double p){\n+        return getMean();\n+    }\n+\n+    /**\n+     * Modify the mean.\n+     * @param mean the new mean.\n+     */\n+\tpublic void setMean(double mean) {\n+        if(mean <= 0.0){\n+            throw new IllegalArgumentException(\"mean must be positive.\");\n+        }\n+        this.mean = mean;\n+\t}\n+\n+    /**\n+     * Access the mean.\n+     * @return the mean.\n+     */\n+\tpublic double getMean() {\n+\t\treturn mean;\n+\t}\n+\n+    /**\n+     * <p>\n+     * For this disbution, X, this method returns P(X &lt; x).\n+     * </p>\n+     * \n+     * <p>\n+     * The implementation of this method is based on:\n+     * <ul>\n+     * <li>\n+     * <a href=\"http://mathworld.wolfram.com/ExponentialDistribution.html\">\n+     * Exponential Distribution</a>, equation (1).</li>\n+     * </ul>\n+     * </p>\n+     * \n+     * @param x the value at which the CDF is evaluated.\n+     * @return CDF for this distribution.\n+     */\n+\tpublic double cummulativeProbability(double x) {\n+        double ret;\n+\t\tif(x < 0.0){\n+            ret = 0.0;\n+\t\t} else {\n+            ret = 1.0 - Math.exp(-x / getMean());\n+\t\t}\n+        return ret;\n+\t}\n+    \n+    /**\n+     * For this distribution, X, this method returns the critical point x, such\n+     * that P(X &lt; x) = <code>p</code>.\n+     *\n+     * @param p the desired probability\n+     * @return x, such that P(X &lt; x) = <code>p</code>\n+     */\n+    public double inverseCummulativeProbability(double p){\n+        if(p < 0.0 || p > 1.0){\n+            throw new IllegalArgumentException(\n+                \"p must be between 0.0 and 1.0, inclusive.\");\n+        }\n+        return -getMean() * Math.log(1.0 - p);\n+    }\n+}\n--- a/src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java\n+++ b/src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java\n         }\n     }\n     \n+    public void testCreateExponentialDistributionNegative(){\n+        try {\n+            factory.createExponentialDistribution(-1.0);\n+            fail(\"negative mean.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateExponentialDistributionZero(){\n+        try {\n+            factory.createExponentialDistribution(0.0);\n+            fail(\"zero mean.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateExponentialDistributionPositive(){\n+        try {\n+            factory.createExponentialDistribution(1.0);\n+        } catch (IllegalArgumentException ex) {\n+            fail(\"positive mean.  IllegalArgumentException is not expected\");\n+        }\n+    }\n+    \n     public void testCreateGammaDistributionNegativePositive(){\n         try {\n             factory.createGammaDistribution(-1.0, 1.0);\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @author Brent Worden\n+ */\n+public class ExponentialDistributionTest extends TestCase {\n+    private ExponentialDistribution exp;\n+    \n+    /**\n+     * Constructor for ChiSquareDistributionTest.\n+     * @param name\n+     */\n+    public ExponentialDistributionTest(String name) {\n+        super(name);\n+    }\n+\n+    /*\n+     * @see TestCase#setUp()\n+     */\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        exp = DistributionFactory.newInstance().createExponentialDistribution(5.0);\n+    }\n+\n+    /*\n+     * @see TestCase#tearDown()\n+     */\n+    protected void tearDown() throws Exception {\n+        exp = null;\n+        super.tearDown();\n+    }\n+\n+    public void testLowerTailProbability(){\n+        testProbability(0.005003, .001);\n+        testProbability(0.050252, .010);\n+        testProbability(0.126589, .025);\n+        testProbability(0.256566, .050);\n+        testProbability(0.526803, .100);\n+    }\n+\n+    public void testUpperTailProbability(){\n+        testProbability(34.5388, .999);\n+        testProbability(23.0259, .990);\n+        testProbability(18.4444, .975);\n+        testProbability(14.9787, .950);\n+        testProbability(11.5129, .900);\n+    }\n+    \n+    public void testLowerTailValues(){\n+        testValue(0.005003, .001);\n+        testValue(0.050252, .010);\n+        testValue(0.126589, .025);\n+        testValue(0.256566, .050);\n+        testValue(0.526803, .100);\n+    }\n+    \n+    public void testUpperTailValues(){\n+        testValue(34.5388, .999);\n+        testValue(23.0259, .990);\n+        testValue(18.4444, .975);\n+        testValue(14.9787, .950);\n+        testValue(11.5129, .900);\n+    }\n+    \n+    private void testProbability(double x, double expected){\n+        double actual = exp.cummulativeProbability(x);\n+        assertEquals(\"probability for \" + x, expected, actual, 10e-4);\n+    }\n+    \n+    private void testValue(double expected, double p){\n+        double actual = exp.inverseCummulativeProbability(p);\n+        assertEquals(\"value for \" + p, expected, actual, 10e-4);\n+    }\n+}", "timestamp": 1055510561, "metainfo": ""}