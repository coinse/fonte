{"sha": "b5489880cd0a834ed9f2f4958504a99cf158217e", "log": "Added FunctionEvaluationException and test class.   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/FunctionEvaluationException.java\n+/*\n+ * Copyright 2004 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math;\n+\n+/**\n+ * Exeption thrown when an error occurs evaluating a function.\n+ * <p>\n+ * Maintains an <code>argument</code> property holding the input value that\n+ * caused the function evaluation to fail.\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2004/07/17 19:41:05 $\n+ */\n+public class FunctionEvaluationException extends MathException  {\n+    \n+    /** Serializable version identifier */\n+    static final long serialVersionUID = -317289374378977972L;\n+    \n+    /** Argument causing function evaluation failure */\n+    private double argument = Double.NaN;\n+    \n+    /**\n+     * Construct an exception indicating the argument value\n+     * that caused the function evaluation to fail.  Generates an exception\n+     * message of the form \"Evaluation failed for argument = \" + argument.\n+     * \n+     * @param argument  the failing function argument \n+     */\n+    public FunctionEvaluationException(double argument) {\n+        this(argument, \"Evaluation failed for argument = \" + argument);\n+    }\n+    \n+    /**\n+     * Construct an exception using the given argument and message\n+     * text.  The message text of the exception will start with \n+     * <code>message</code> and be followed by \n+     * \" Evaluation failed for argument = \" + argument.\n+     * \n+     * @param argument  the failing function argument \n+     * @param message  the exception message text\n+     */\n+    public FunctionEvaluationException(double argument, String message) {\n+        this(argument, message, null);\n+    }\n+\n+    /**\n+     * Construct an exception with the given argument, message and root cause.\n+     * The message text of the exception will start with  <code>message</code>\n+     * and be followed by \" Evaluation failed for argument = \" + argument.\n+     * \n+     * @param message descriptive error message.\n+     * @param cause root cause.\n+     */\n+    public FunctionEvaluationException(double argument, String message, \n+            Throwable cause) {\n+        super(message + \" Evaluation failed for argument=\" + argument, cause);\n+        this.argument = argument;\n+    }\n+    \n+    /**\n+     * Returns the function argument that caused this exception.\n+     * \n+     * @return  argument that caused function evaluation to fail\n+     */\n+    public double getArgument() {\n+        return this.argument;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java\n+/*\n+ * Copyright 2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2004/07/17 19:41:05 $\n+ */\n+public class FunctionEvaluationExceptionTest extends TestCase {\n+    \n+    public void testConstructor(){\n+        FunctionEvaluationException ex = new FunctionEvaluationException(0.0);\n+        assertNull(ex.getCause());\n+        assertNotNull(ex.getMessage());\n+        assertEquals(0.0, ex.getArgument(), 0);\n+    }\n+    \n+    public void testConstructorMessage(){\n+        String msg = \"message\";\n+        FunctionEvaluationException  ex = new FunctionEvaluationException(0.0, msg);\n+        assertNull(ex.getCause());\n+        assertTrue(ex.getMessage().startsWith(msg));\n+        assertTrue(ex.getMessage().indexOf(\"0\") > 0);\n+        assertEquals(0.0, ex.getArgument(), 0);\n+    }\n+    \n+    public void testConstructorMessageCause(){\n+        String outMsg = \"outer message\";\n+        String inMsg = \"inner message\";\n+        Exception cause = new Exception(inMsg);\n+        FunctionEvaluationException ex = new FunctionEvaluationException(0, outMsg, cause);\n+        assertTrue(ex.getMessage().startsWith(outMsg));\n+        assertTrue(ex.getMessage().indexOf(\"0\") > 0);\n+        assertEquals(cause, ex.getCause());\n+        assertEquals(0.0, ex.getArgument(), 0);\n+    }\n+}", "timestamp": 1090093265, "metainfo": ""}