{"sha": "02e0ba1acbb8fe971253bdabe452d35fb6934bf4", "log": "Document why we are not using the simpler Hex constants  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/util/Precision.java\n+++ b/src/main/java/org/apache/commons/math3/util/Precision.java\n      * In IEEE 754 arithmetic, this is 2<sup>-53</sup>: {@value}.\n      */\n     public static final double EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);\n+    //This was previously expressed as = 0x1.0p-53;\n+    // However, OpenJDK (Sparc Solaris) cannot handle such small constants: MATH-721\n+\n     /**\n      * Safe minimum, such that {@code 1 / SAFE_MIN} does not overflow.\n      * In IEEE 754 arithmetic, this is also the smallest normalized\n      * number 2<sup>-1022</sup>: {@value}.\n      */\n     public static final double SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);\n+    // This was previously expressed as = 0x1.0p-1022;\n+    // However, OpenJDK (Sparc Solaris) cannot handle such small constants: MATH-721\n \n     /** Offset to order signed double numbers lexicographically. */\n     private static final long SGN_MASK = 0x8000000000000000L;", "timestamp": 1334956121, "metainfo": ""}