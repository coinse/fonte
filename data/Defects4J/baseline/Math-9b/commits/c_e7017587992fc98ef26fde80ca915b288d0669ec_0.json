{"sha": "e7017587992fc98ef26fde80ca915b288d0669ec", "log": "Removed setSubmatrix methods from RealMatrix, BigMatrix interfaces to preserve binary compatibility to 1.0 release.  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/BigMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/BigMatrix.java\n     throws MatrixIndexException;\n     \n     /**\n-     * Replace the submatrix starting at <code>row, column</code> using data in\n-     * the input <code>subMatrix</code> array. Indexes are 0-based.\n-     * <p> \n-     * Example:<br>\n-     * Starting with <pre>\n-     * 1  2  3  4\n-     * 5  6  7  8\n-     * 9  0  1  2\n-     * </pre>\n-     * and <code>subMatrix = {{3, 4} {5,6}}</code>, invoking \n-     * <code>setSubMatrix(subMatrix,1,1))</code> will result in <pre>\n-     * 1  2  3  4\n-     * 5  3  4  8\n-     * 9  5  6  2\n-     * </pre>\n-     * \n-     * @param subMatrix  array containing the submatrix replacement data\n-     * @param row  row coordinate of the top, left element to be replaced\n-     * @param column  column coordinate of the top, left element to be replaced\n-     * @throws MatrixIndexException  if subMatrix does not fit into this \n-     *    matrix from element in (row, column) \n-     * @throws IllegalArgumentException if <code>subMatrix</code> is not rectangular\n-     *  (not all rows have the same length) or empty\n-     * @throws NullPointerException if <code>subMatrix</code> is null\n-     */\n-    public void setSubMatrix(BigDecimal subMatrix[][], int row, int column) throws MatrixIndexException;\n-    \n-    /**\n      * Returns the entries in row number <code>row</code>\n      * as a row matrix.  Row indices start at 0.\n      *\n--- a/src/java/org/apache/commons/math/linear/RealMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrix.java\n     */\n    RealMatrix getSubMatrix(int[] selectedRows, int[] selectedColumns)\n    throws MatrixIndexException;\n-   \n-    /**\n-     * Replace the submatrix starting at <code>row, column</code> using data in\n-     * the input <code>subMatrix</code> array. Indexes are 0-based.\n-     * <p> \n-     * Example:<br>\n-     * Starting with <pre>\n-     * 1  2  3  4\n-     * 5  6  7  8\n-     * 9  0  1  2\n-     * </pre>\n-     * and <code>subMatrix = {{3, 4} {5,6}}</code>, invoking \n-     * <code>setSubMatrix(subMatrix,1,1))</code> will result in <pre>\n-     * 1  2  3  4\n-     * 5  3  4  8\n-     * 9  5  6  2\n-     * </pre>\n-     * \n-     * @param subMatrix  array containing the submatrix replacement data\n-     * @param row  row coordinate of the top, left element to be replaced\n-     * @param column  column coordinate of the top, left element to be replaced\n-     * @throws MatrixIndexException  if subMatrix does not fit into this \n-     *    matrix from element in (row, column) \n-     * @throws IllegalArgumentException if <code>subMatrix</code> is not rectangular\n-     *  (not all rows have the same length) or empty\n-     * @throws NullPointerException if <code>subMatrix</code> is null\n-     */\n-    public void setSubMatrix(double subMatrix[][], int row, int column) throws MatrixIndexException;\n-   \n    \n    /**\n     * Returns the entries in row number <code>row</code>\n--- a/src/test/org/apache/commons/math/linear/BigMatrixImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/BigMatrixImplTest.java\n         assertEquals(\"testData2 row dimension\",m2.getRowDimension(),2);\n         assertEquals(\"testData2 column dimension\",m2.getColumnDimension(),3);\n         assertTrue(\"testData2 is not square\",!m2.isSquare());\n-    } \n+    }  \n     \n     /** test copy functions */\n     public void testCopyFunctions() {\n         assertEquals(expected, m);   \n         \n         // javadoc example\n-        BigMatrix matrix = MatrixUtils.createBigMatrix\n+        BigMatrixImpl matrix = (BigMatrixImpl) MatrixUtils.createBigMatrix\n             (new double[][] {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 0, 1 , 2}});\n         matrix.setSubMatrix(new BigDecimal[][] {{new BigDecimal(3),\n             new BigDecimal(4)}, {new BigDecimal(5), new BigDecimal(6)}}, 1, 1);\n--- a/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n         assertEquals(expected, m);   \n         \n         // javadoc example\n-        RealMatrix matrix = MatrixUtils.createRealMatrix\n+        RealMatrixImpl matrix = (RealMatrixImpl) MatrixUtils.createRealMatrix\n             (new double[][] {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 0, 1 , 2}});\n         matrix.setSubMatrix(new double[][] {{3, 4}, {5, 6}}, 1, 1);\n         expected = MatrixUtils.createRealMatrix", "timestamp": 1120343880, "metainfo": ""}