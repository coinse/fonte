{"sha": "2cec1fffced9df9c5659aa16a9150f1b2a20f7f8", "log": "Removed references to deprecated MathRuntimeException (MATH-677).   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/transform/FastSineTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastSineTransformer.java\n  */\n package org.apache.commons.math.transform;\n \n-import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.UnivariateFunction;\n import org.apache.commons.math.complex.Complex;\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.exception.NonMonotonicSequenceException;\n+import org.apache.commons.math.exception.NotStrictlyPositiveException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.FastMath;\n \n      * {@inheritDoc}\n      *\n      * The first element of the specified data set is required to be {@code 0}.\n-     */\n-    public double[] transform(double[] f) throws IllegalArgumentException {\n+     *\n+     * @throws MathIllegalArgumentException if the length of the data array is\n+     * not a power of two, or the first element of the data array is not zero\n+     */\n+    public double[] transform(double[] f) throws MathIllegalArgumentException {\n         if (orthogonal) {\n             final double s = FastMath.sqrt(2.0 / f.length);\n             return FastFourierTransformer.scaleArray(fst(f), s);\n      * {@inheritDoc}\n      *\n      * This implementation enforces {@code f(x) = 0.0} at {@code x = 0.0}.\n+     *\n+     * @throws NonMonotonicSequenceException if the lower bound is greater\n+     * than, or equal to the upper bound\n+     * @throws NotStrictlyPositiveException if the number of sample points is\n+     * negative\n+     * @throws MathIllegalArgumentException if the number of sample points is\n+     * not a power of two\n      */\n     public double[] transform(UnivariateFunction f,\n-        double min, double max, int n) throws IllegalArgumentException {\n+        double min, double max, int n) throws\n+        NonMonotonicSequenceException,\n+        NotStrictlyPositiveException,\n+        MathIllegalArgumentException {\n \n         final double[] data = FastFourierTransformer.sample(f, min, max, n);\n         data[0] = 0.0;\n      * {@inheritDoc}\n      *\n      * The first element of the specified data set is required to be {@code 0}.\n+     *\n+     * @throws MathIllegalArgumentException if the length of the data array is\n+     * not a power of two, or the first element of the data array is not zero\n      */\n     public double[] inverseTransform(double[] f)\n         throws IllegalArgumentException {\n      * {@inheritDoc}\n      *\n      * This implementation enforces {@code f(x) = 0.0} at {@code x = 0.0}.\n+     *\n+     * @throws NonMonotonicSequenceException if the lower bound is greater\n+     * than, or equal to the upper bound\n+     * @throws NotStrictlyPositiveException if the number of sample points is\n+     * negative\n+     * @throws MathIllegalArgumentException if the number of sample points is\n+     * not a power of two\n      */\n     public double[] inverseTransform(UnivariateFunction f,\n-        double min, double max, int n)\n-        throws IllegalArgumentException {\n+        double min, double max, int n) throws\n+        NonMonotonicSequenceException,\n+        NotStrictlyPositiveException,\n+        MathIllegalArgumentException {\n \n         if (orthogonal) {\n             return transform(f, min, max, n);\n      *\n      * @param f the real data array to be transformed\n      * @return the real transformed array\n-     * @throws IllegalArgumentException if any parameters are invalid\n-     */\n-    protected double[] fst(double[] f) throws IllegalArgumentException {\n+     * @throws MathIllegalArgumentException if the length of the data array is\n+     * not a power of two, or the first element of the data array is not zero\n+     */\n+    protected double[] fst(double[] f) throws MathIllegalArgumentException {\n \n         final double[] transformed = new double[f.length];\n \n         FastFourierTransformer.verifyDataSet(f);\n         if (f[0] != 0.0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n+            throw new MathIllegalArgumentException(\n                     LocalizedFormats.FIRST_ELEMENT_NOT_ZERO,\n-                    f[0]);\n+                    Double.valueOf(f[0]));\n         }\n         final int n = f.length;\n         if (n == 1) {       // trivial case", "timestamp": 1325572157, "metainfo": ""}