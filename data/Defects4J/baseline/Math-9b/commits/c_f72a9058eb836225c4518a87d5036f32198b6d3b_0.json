{"sha": "f72a9058eb836225c4518a87d5036f32198b6d3b", "log": "Changed FractionFormat to extend NumberFormat.  JIRA: MATH-189  ", "commit": "\n--- a/src/java/org/apache/commons/math/fraction/FractionFormat.java\n+++ b/src/java/org/apache/commons/math/fraction/FractionFormat.java\n \n import java.io.Serializable;\n import java.text.FieldPosition;\n-import java.text.Format;\n import java.text.NumberFormat;\n import java.text.ParseException;\n import java.text.ParsePosition;\n  * @since 1.1\n  * @version $Revision$ $Date$\n  */\n-public class FractionFormat extends Format implements Serializable {\n+public class FractionFormat extends NumberFormat implements Serializable {\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6337346779577272306L;\n     }\n     \n     /**\n-     * Formats a object to produce a string.  <code>obj</code> must be either a \n+     * Formats an object and appends the result to a StringBuffer. <code>obj</code> must be either a \n      * {@link Fraction} object or a {@link Number} object.  Any other type of\n      * object will result in an {@link IllegalArgumentException} being thrown.\n      *\n \n         return new Fraction(num.intValue(), den.intValue());\n     }\n-\n-    /**\n-     * Parses a string to produce a object.\n-     * @param source the string to parse\n-     * @param pos input/ouput parsing parameter.\n-     * @return the parsed object.\n-     * @see java.text.Format#parseObject(java.lang.String, java.text.ParsePosition)\n-     */\n-    public Object parseObject(String source, ParsePosition pos) {\n-        return parse(source, pos);\n-    }\n     \n     /**\n      * Modify the denominator format.\n          \n          return ret;\n     }\n+\n+    /**\n+     * Formats a double value as a fraction and appends the result to a StringBuffer. \n+     *\n+     * @param value the double value to format\n+     * @param buffer StringBuffer to append to\n+     * @param position On input: an alignment field, if desired. On output: the\n+     *            offsets of the alignment field\n+     * @return a reference to the appended buffer\n+     * @see {@link #format(Object, StringBuffer, FieldPosition)}\n+     */\n+    public StringBuffer format(double value, StringBuffer buffer,\n+            FieldPosition position) {\n+        return format(Double.valueOf(value), buffer, position);\n+    }\n+\n+    \n+    /**\n+     * Formats a long value as a fraction and appends the result to a StringBuffer. \n+     *\n+     * @param value the long value to format\n+     * @param buffer StringBuffer to append to\n+     * @param position On input: an alignment field, if desired. On output: the\n+     *            offsets of the alignment field\n+     * @return a reference to the appended buffer\n+     * @see {@link #format(Object, StringBuffer, FieldPosition)}\n+     */\n+    public StringBuffer format(long value, StringBuffer buffer, FieldPosition position) {\n+        return format(Long.valueOf(value), buffer, position);\n+    }\n }\n--- a/src/test/org/apache/commons/math/fraction/FractionFormatTest.java\n+++ b/src/test/org/apache/commons/math/fraction/FractionFormatTest.java\n         assertEquals(nf, format.getWholeFormat());\n         format.setWholeFormat(old);\n     }\n+    \n+    public void testLongFormat() {\n+        assertEquals(\"10 / 1\", improperFormat.format(10l));\n+    }\n+    \n+    public void testDoubleFormat() {\n+        assertEquals(\"355 / 113\", improperFormat.format(Math.PI));\n+    }\n }", "timestamp": 1232911701, "metainfo": ""}