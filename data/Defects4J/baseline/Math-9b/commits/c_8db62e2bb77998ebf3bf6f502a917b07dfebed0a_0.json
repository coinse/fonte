{"sha": "8db62e2bb77998ebf3bf6f502a917b07dfebed0a", "log": "removed the constraint on low degree polynomials when building Chebyshev, Hermite, Laguerre or Legendre polynomials  ", "commit": "\n--- a/src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java\n \n import java.util.ArrayList;\n \n-import org.apache.commons.math.fraction.Fraction;\n+import org.apache.commons.math.fraction.BigFraction;\n \n /**\n  * A collection of static methods that operate on or return polynomials.\n public class PolynomialsUtils {\n \n     /** Coefficients for Chebyshev polynomials. */\n-    private static final ArrayList<Fraction> CHEBYSHEV_COEFFICIENTS;\n+    private static final ArrayList<BigFraction> CHEBYSHEV_COEFFICIENTS;\n \n     /** Coefficients for Hermite polynomials. */\n-    private static final ArrayList<Fraction> HERMITE_COEFFICIENTS;\n+    private static final ArrayList<BigFraction> HERMITE_COEFFICIENTS;\n \n     /** Coefficients for Laguerre polynomials. */\n-    private static final ArrayList<Fraction> LAGUERRE_COEFFICIENTS;\n+    private static final ArrayList<BigFraction> LAGUERRE_COEFFICIENTS;\n \n     /** Coefficients for Legendre polynomials. */\n-    private static final ArrayList<Fraction> LEGENDRE_COEFFICIENTS;\n+    private static final ArrayList<BigFraction> LEGENDRE_COEFFICIENTS;\n \n     static {\n \n         // initialize recurrence for Chebyshev polynomials\n         // T0(X) = 1, T1(X) = 0 + 1 * X\n-        CHEBYSHEV_COEFFICIENTS = new ArrayList<Fraction>();\n-        CHEBYSHEV_COEFFICIENTS.add(Fraction.ONE);\n-        CHEBYSHEV_COEFFICIENTS.add(Fraction.ZERO);\n-        CHEBYSHEV_COEFFICIENTS.add(Fraction.ONE);\n+        CHEBYSHEV_COEFFICIENTS = new ArrayList<BigFraction>();\n+        CHEBYSHEV_COEFFICIENTS.add(BigFraction.ONE);\n+        CHEBYSHEV_COEFFICIENTS.add(BigFraction.ZERO);\n+        CHEBYSHEV_COEFFICIENTS.add(BigFraction.ONE);\n \n         // initialize recurrence for Hermite polynomials\n         // H0(X) = 1, H1(X) = 0 + 2 * X\n-        HERMITE_COEFFICIENTS = new ArrayList<Fraction>();\n-        HERMITE_COEFFICIENTS.add(Fraction.ONE);\n-        HERMITE_COEFFICIENTS.add(Fraction.ZERO);\n-        HERMITE_COEFFICIENTS.add(Fraction.TWO);\n+        HERMITE_COEFFICIENTS = new ArrayList<BigFraction>();\n+        HERMITE_COEFFICIENTS.add(BigFraction.ONE);\n+        HERMITE_COEFFICIENTS.add(BigFraction.ZERO);\n+        HERMITE_COEFFICIENTS.add(BigFraction.TWO);\n \n         // initialize recurrence for Laguerre polynomials\n         // L0(X) = 1, L1(X) = 1 - 1 * X\n-        LAGUERRE_COEFFICIENTS = new ArrayList<Fraction>();\n-        LAGUERRE_COEFFICIENTS.add(Fraction.ONE);\n-        LAGUERRE_COEFFICIENTS.add(Fraction.ONE);\n-        LAGUERRE_COEFFICIENTS.add(Fraction.MINUS_ONE);\n+        LAGUERRE_COEFFICIENTS = new ArrayList<BigFraction>();\n+        LAGUERRE_COEFFICIENTS.add(BigFraction.ONE);\n+        LAGUERRE_COEFFICIENTS.add(BigFraction.ONE);\n+        LAGUERRE_COEFFICIENTS.add(BigFraction.MINUS_ONE);\n \n         // initialize recurrence for Legendre polynomials\n         // P0(X) = 1, P1(X) = 0 + 1 * X\n-        LEGENDRE_COEFFICIENTS = new ArrayList<Fraction>();\n-        LEGENDRE_COEFFICIENTS.add(Fraction.ONE);\n-        LEGENDRE_COEFFICIENTS.add(Fraction.ZERO);\n-        LEGENDRE_COEFFICIENTS.add(Fraction.ONE);\n+        LEGENDRE_COEFFICIENTS = new ArrayList<BigFraction>();\n+        LEGENDRE_COEFFICIENTS.add(BigFraction.ONE);\n+        LEGENDRE_COEFFICIENTS.add(BigFraction.ZERO);\n+        LEGENDRE_COEFFICIENTS.add(BigFraction.ONE);\n \n     }\n \n     public static PolynomialFunction createChebyshevPolynomial(final int degree) {\n         return buildPolynomial(degree, CHEBYSHEV_COEFFICIENTS,\n                 new RecurrenceCoefficientsGenerator() {\n-            private final Fraction[] coeffs = { Fraction.ZERO, Fraction.TWO, Fraction.ONE};\n-            /** {@inheritDoc} */\n-            public Fraction[] generate(int k) {\n+            private final BigFraction[] coeffs = { BigFraction.ZERO, BigFraction.TWO, BigFraction.ONE };\n+            /** {@inheritDoc} */\n+            public BigFraction[] generate(int k) {\n                 return coeffs;\n             }\n         });\n         return buildPolynomial(degree, HERMITE_COEFFICIENTS,\n                 new RecurrenceCoefficientsGenerator() {\n             /** {@inheritDoc} */\n-            public Fraction[] generate(int k) {\n-                return new Fraction[] {\n-                        Fraction.ZERO,\n-                        Fraction.TWO,\n-                        new Fraction(2 * k, 1)};\n+            public BigFraction[] generate(int k) {\n+                return new BigFraction[] {\n+                        BigFraction.ZERO,\n+                        BigFraction.TWO,\n+                        new BigFraction(2 * k)};\n             }\n         });\n     }\n         return buildPolynomial(degree, LAGUERRE_COEFFICIENTS,\n                 new RecurrenceCoefficientsGenerator() {\n             /** {@inheritDoc} */\n-            public Fraction[] generate(int k) {\n+            public BigFraction[] generate(int k) {\n                 final int kP1 = k + 1;\n-                return new Fraction[] {\n-                        new Fraction(2 * k + 1, kP1),\n-                        new Fraction(-1, kP1),\n-                        new Fraction(k, kP1)};\n+                return new BigFraction[] {\n+                        new BigFraction(2 * k + 1, kP1),\n+                        new BigFraction(-1, kP1),\n+                        new BigFraction(k, kP1)};\n             }\n         });\n     }\n         return buildPolynomial(degree, LEGENDRE_COEFFICIENTS,\n                                new RecurrenceCoefficientsGenerator() {\n             /** {@inheritDoc} */\n-            public Fraction[] generate(int k) {\n+            public BigFraction[] generate(int k) {\n                 final int kP1 = k + 1;\n-                return new Fraction[] {\n-                        Fraction.ZERO,\n-                        new Fraction(k + kP1, kP1),\n-                        new Fraction(k, kP1)};\n+                return new BigFraction[] {\n+                        BigFraction.ZERO,\n+                        new BigFraction(k + kP1, kP1),\n+                        new BigFraction(k, kP1)};\n             }\n         });\n     }\n      * @return coefficients array\n      */\n     private static PolynomialFunction buildPolynomial(final int degree,\n-                                                      final ArrayList<Fraction> coefficients,\n+                                                      final ArrayList<BigFraction> coefficients,\n                                                       final RecurrenceCoefficientsGenerator generator) {\n \n         final int maxDegree = (int) Math.floor(Math.sqrt(2 * coefficients.size())) - 1;\n      */\n     private static void computeUpToDegree(final int degree, final int maxDegree,\n                                           final RecurrenceCoefficientsGenerator generator,\n-                                          final ArrayList<Fraction> coefficients) {\n+                                          final ArrayList<BigFraction> coefficients) {\n \n         int startK = (maxDegree - 1) * maxDegree / 2;\n         for (int k = maxDegree; k < degree; ++k) {\n             startK += k;\n \n             // Pk+1(X) = (a[0] + a[1] X) Pk(X) - a[2] Pk-1(X)\n-            Fraction[] ai = generator.generate(k);\n-\n-            Fraction ck     = coefficients.get(startK);\n-            Fraction ckm1   = coefficients.get(startKm1);\n+            BigFraction[] ai = generator.generate(k);\n+\n+            BigFraction ck     = coefficients.get(startK);\n+            BigFraction ckm1   = coefficients.get(startKm1);\n \n             // degree 0 coefficient\n             coefficients.add(ck.multiply(ai[0]).subtract(ckm1.multiply(ai[2])));\n \n             // degree 1 to degree k-1 coefficients\n             for (int i = 1; i < k; ++i) {\n-                final Fraction ckPrev = ck;\n+                final BigFraction ckPrev = ck;\n                 ck     = coefficients.get(startK + i);\n                 ckm1   = coefficients.get(startKm1 + i);\n                 coefficients.add(ck.multiply(ai[0]).add(ckPrev.multiply(ai[1])).subtract(ckm1.multiply(ai[2])));\n             }\n \n             // degree k coefficient\n-            final Fraction ckPrev = ck;\n+            final BigFraction ckPrev = ck;\n             ck = coefficients.get(startK + k);\n             coefficients.add(ck.multiply(ai[0]).add(ckPrev.multiply(ai[1])));\n \n          * @return an array of three coefficients such that\n          * P<sub>k+1</sub>(X) = (a[0] + a[1] X) P<sub>k</sub>(X) - a[2] P<sub>k-1</sub>(X)\n          */\n-        Fraction[] generate(int k);\n+        BigFraction[] generate(int k);\n     }\n \n }\n--- a/src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java\n+++ b/src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java\n     }\n \n     public void testHighDegreeLegendre() {\n-        try {\n-            PolynomialsUtils.createLegendrePolynomial(40);\n-            fail(\"an exception should have been thrown\");\n-        } catch (ArithmeticException ae) {\n-            // expected\n-        }\n-//        checkPolynomial(PolynomialsUtils.createLegendrePolynomial(40), 274877906944l,\n-//                        \"34461632205.0\"\n-//                      + \" - 28258538408100.0 x^2\"\n-//                      + \" + 3847870979902950.0 x^4\"\n-//                      + \" - 207785032914759300.0 x^6\"\n-//                      + \" + 5929294332103310025.0 x^8\"\n-//                      + \" - 103301483474866556880.0 x^10\"\n-//                      + \" + 1197358103913226000200.0 x^12\"\n-//                      + \" - 9763073770369381232400.0 x^14\"\n-//                      + \" + 58171647881784229843050.0 x^16\"\n-//                      + \" - 260061484647976556945400.0 x^18\"\n-//                      + \" + 888315281771246239250340.0 x^20\"\n-//                      + \" - 2345767627188139419665400.0 x^22\"\n-//                      + \" + 4819022625419112503443050.0 x^24\"\n-//                      + \" - 7710436200670580005508880.0 x^26\"\n-//                      + \" + 9566652323054238154983240.0 x^28\"\n-//                      + \" - 9104813935044723209570256.0 x^30\"\n-//                      + \" + 6516550296251767619752905.0 x^32\"\n-//                      + \" - 3391858621221953912598660.0 x^34\"\n-//                      + \" + 1211378079007840683070950.0 x^36\"\n-//                      + \" - 265365894974690562152100.0 x^38\"\n-//                      + \" + 26876802183334044115405.0 x^40\");\n+        PolynomialsUtils.createLegendrePolynomial(40);\n+        double[] l40 = PolynomialsUtils.createLegendrePolynomial(40).getCoefficients();\n+        double denominator = 274877906944.0;\n+        double[] numerators = new double[] {\n+                          +34461632205.0,            -28258538408100.0,          +3847870979902950.0,        -207785032914759300.0,\n+                  +5929294332103310025.0,     -103301483474866556880.0,    +1197358103913226000200.0,    -9763073770369381232400.0,\n+              +58171647881784229843050.0,  -260061484647976556945400.0,  +888315281771246239250340.0, -2345767627188139419665400.0,\n+            +4819022625419112503443050.0, -7710436200670580005508880.0, +9566652323054238154983240.0, -9104813935044723209570256.0,\n+            +6516550296251767619752905.0, -3391858621221953912598660.0, +1211378079007840683070950.0,  -265365894974690562152100.0,\n+              +26876802183334044115405.0\n+        };\n+        for (int i = 0; i < l40.length; ++i) {\n+            if (i % 2 == 0) {\n+                double ci = numerators[i / 2] / denominator;\n+                assertEquals(ci, l40[i], ci * 1.0e-15);\n+            } else {\n+                assertEquals(0.0, l40[i], 0.0);\n+            }\n+        }\n     }\n \n     private void checkPolynomial(PolynomialFunction p, long denominator, String reference) {", "timestamp": 1238596158, "metainfo": ""}