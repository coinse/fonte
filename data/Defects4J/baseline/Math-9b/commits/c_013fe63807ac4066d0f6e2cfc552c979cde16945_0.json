{"sha": "013fe63807ac4066d0f6e2cfc552c979cde16945", "log": "Added populationVariance method. JIRA: MATH-693.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/stat/StatUtils.java\n+++ b/src/main/java/org/apache/commons/math/stat/StatUtils.java\n      */\n     public static double variance(final double[] values, final double mean) {\n         return VARIANCE.evaluate(values, mean);\n+    }\n+\n+    /**\n+     * Returns the <a href=\"http://en.wikibooks.org/wiki/Statistics/Summary/Variance\">\n+     * population variance</a> of the entries in the input array, or\n+     * <code>Double.NaN</code> if the array is empty.\n+     * <p>\n+     * See {@link org.apache.commons.math.stat.descriptive.moment.Variance} for\n+     * details on the formula and computing algorithm.</p>\n+     * <p>\n+     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n+     *\n+     * @param values the input array\n+     * @return the population variance of the values or Double.NaN if the array is empty\n+     * @throws IllegalArgumentException if the array is null\n+     */\n+    public static double populationVariance(final double[] values) {\n+        return new Variance(false).evaluate(values);\n+    }\n+\n+    /**\n+     * Returns the <a href=\"http://en.wikibooks.org/wiki/Statistics/Summary/Variance\">\n+     * population variance</a> of the entries in the specified portion of\n+     * the input array, or <code>Double.NaN</code> if the designated subarray\n+     * is empty.\n+     * <p>\n+     * See {@link org.apache.commons.math.stat.descriptive.moment.Variance} for\n+     * details on the computing algorithm.</p>\n+     * <p>\n+     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null or the\n+     * array index parameters are not valid.</p>\n+     *\n+     * @param values the input array\n+     * @param begin index of the first array element to include\n+     * @param length the number of elements to include\n+     * @return the population variance of the values or Double.NaN if length = 0\n+     * @throws IllegalArgumentException if the array is null or the array index\n+     *  parameters are not valid\n+     */\n+    public static double populationVariance(final double[] values, final int begin,\n+            final int length) {\n+        return new Variance(false).evaluate(values, begin, length);\n+    }\n+\n+    /**\n+     * Returns the <a href=\"http://en.wikibooks.org/wiki/Statistics/Summary/Variance\">\n+     * population variance</a> of the entries in the specified portion of\n+     * the input array, using the precomputed mean value.  Returns\n+     * <code>Double.NaN</code> if the designated subarray is empty.\n+     * <p>\n+     * See {@link org.apache.commons.math.stat.descriptive.moment.Variance} for\n+     * details on the computing algorithm.</p>\n+     * <p>\n+     * The formula used assumes that the supplied mean value is the arithmetic\n+     * mean of the sample data, not a known population parameter.  This method\n+     * is supplied only to save computation when the mean has already been\n+     * computed.</p>\n+     * <p>\n+     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null or the\n+     * array index parameters are not valid.</p>\n+     *\n+     * @param values the input array\n+     * @param mean the precomputed mean value\n+     * @param begin index of the first array element to include\n+     * @param length the number of elements to include\n+     * @return the population variance of the values or Double.NaN if length = 0\n+     * @throws IllegalArgumentException if the array is null or the array index\n+     *  parameters are not valid\n+     */\n+    public static double populationVariance(final double[] values, final double mean,\n+            final int begin, final int length) {\n+        return new Variance(false).evaluate(values, mean, begin, length);\n+    }\n+\n+    /**\n+     * Returns the <a href=\"http://en.wikibooks.org/wiki/Statistics/Summary/Variance\">\n+     * population variance</a> of the entries in the input array, using the\n+     * precomputed mean value.  Returns <code>Double.NaN</code> if the array\n+     * is empty.\n+     * <p>\n+     * See {@link org.apache.commons.math.stat.descriptive.moment.Variance} for\n+     * details on the computing algorithm.</p>\n+     * <p>\n+     * The formula used assumes that the supplied mean value is the arithmetic\n+     * mean of the sample data, not a known population parameter.  This method\n+     * is supplied only to save computation when the mean has already been\n+     * computed.</p>\n+     * <p>\n+     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n+     *\n+     * @param values the input array\n+     * @param mean the precomputed mean value\n+     * @return the population variance of the values or Double.NaN if the array is empty\n+     * @throws IllegalArgumentException if the array is null\n+     */\n+    public static double populationVariance(final double[] values, final double mean) {\n+        return new Variance(false).evaluate(values, mean);\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/math/stat/StatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/StatUtilsTest.java\n         x = new double[] {one, two, two, three};\n         TestUtils.assertEquals(0.5, StatUtils.variance(x,2.5, 2, 2), tolerance);\n     }\n+    \n+    @Test\n+    public void testPopulationVariance() {\n+        double[] x = null;\n+\n+        try {\n+            StatUtils.variance(x, 0, 4);\n+            Assert.fail(\"null is not a valid data array.\");\n+        } catch (MathIllegalArgumentException ex) {\n+            // success\n+        }\n+\n+        // test empty\n+        x = new double[] {};\n+        TestUtils.assertEquals(Double.NaN, StatUtils.populationVariance(x, 0, 0), tolerance);\n+\n+        // test one\n+        x = new double[] {two};\n+        TestUtils.assertEquals(0.0, StatUtils.populationVariance(x, 0, 1), tolerance);\n+\n+        // test many\n+        x = new double[] {one, two, two, three};\n+        TestUtils.assertEquals(0.25, StatUtils.populationVariance(x, 0, 2), tolerance);\n+\n+        // test precomputed mean\n+        x = new double[] {one, two, two, three};\n+        TestUtils.assertEquals(0.25, StatUtils.populationVariance(x, 2.5, 2, 2), tolerance);\n+    }\n+\n \n     @Test\n     public void testMax() {", "timestamp": 1322324234, "metainfo": ""}