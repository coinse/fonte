{"sha": "4e340f734d9c397119e68cc156051701976131ca", "log": "MATH-697 Added missing constructors.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractSimpleBoundsScalarOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractSimpleBoundsScalarOptimizer.java\n import org.apache.commons.math.optimization.BaseSimpleBoundsMultivariateRealOptimizer;\n import org.apache.commons.math.optimization.GoalType;\n import org.apache.commons.math.optimization.RealPointValuePair;\n+import org.apache.commons.math.optimization.ConvergenceChecker;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.exception.NumberIsTooLargeException;\n     private double[] lowerBound;\n     /** Upper bounds. */\n     private double[] upperBound;\n+\n+    /**\n+     * Simple constructor with default settings.\n+     * The convergence check is set to a {@link SimpleScalarValueChecker} and\n+     * the allowed number of evaluations is set to {@link Integer#MAX_VALUE}.\n+     *\n+     * {@see BaseAbstractScalarOptimizer#BaseAbstractScalarOptimizer()}.\n+     */\n+    protected BaseAbstractSimpleBoundsScalarOptimizer() {}\n+\n+    /**\n+     * @param checker Convergence checker.\n+     */\n+    protected BaseAbstractSimpleBoundsScalarOptimizer(ConvergenceChecker<RealPointValuePair> checker) {\n+        super(checker);\n+    }\n \n     /**\n      * @return the lower bounds.", "timestamp": 1321364145, "metainfo": ""}