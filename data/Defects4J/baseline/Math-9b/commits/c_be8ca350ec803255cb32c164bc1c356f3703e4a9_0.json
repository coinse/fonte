{"sha": "be8ca350ec803255cb32c164bc1c356f3703e4a9", "log": "Improved javadoc, simplified implementation.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Variance.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Variance.java\n import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;\n \n /**\n- * Updating forumulas use West's algorithm as described in\n- * <a href=\"http://doi.acm.org/10.1145/359146.359152\">Chan, T. F. and\n- * J. G. Lewis 1979, <i>Communications of the ACM</i>,\n+ * Computes the (unbiased) sample variance.  Uses the definitional formula: \n+ * <p>\n+ * variance = sum((x_i - mean)^2) / (n - 1)\n+ * <p>\n+ * where mean is the {@link Mean} and <code>n</code> is the number\n+ * of sample observations.  \n+ * <p>\n+ * The definitional formula does not have good numerical properties, so\n+ * this implementation uses updating formulas based on West's algorithm\n+ *  as described in <a href=\"http://doi.acm.org/10.1145/359146.359152\">\n+ * Chan, T. F. andJ. G. Lewis 1979, <i>Communications of the ACM</i>,\n  * vol. 22 no. 9, pp. 526-531.</a>.\n  *\n- * @version $Revision: 1.20 $ $Date: 2004/06/23 16:26:15 $\n+ * @version $Revision: 1.21 $ $Date: 2004/06/26 23:33:27 $\n  */\n public class Variance extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     protected boolean incMoment = true;\n \n     /**\n-     * This property maintains the latest calculated\n-     * variance for efficiency when getResult() is called\n-     * many times between increments.\n-     */\n-    protected double variance = Double.NaN;\n-\n-    /**\n-     * Maintains the current count of inrementations that have occured.\n-     * If the external SecondMoment is used, the this is updated from\n-     * that moments counter\n-     */\n-    protected long n = 0;\n-\n-    /**\n      * Constructs a Variance.\n      */\n     public Variance() {\n     }\n \n     /**\n-     * Constructs a Variance based on an externalized second moment.\n+     * Constructs a Variance based on an external second moment.\n      * @param m2 the SecondMoment (Thrid or Fourth moments work\n      * here as well.)\n      */\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()\n      */\n     public double getResult() {\n-        if (n < moment.n) {\n-            if (moment.n <= 0) {\n-                variance = Double.NaN;\n-            } else if (moment.n <= 1) {\n-                variance = 0.0;\n+            if (moment.n == 0) {\n+                return Double.NaN;\n+            } else if (moment.n == 1) {\n+                return 0d;\n             } else {\n-                variance = moment.m2 / (moment.n0 - 1);\n+                return moment.m2 / (moment.n0 - 1);\n             }\n-            n = moment.n;\n-        }\n-\n-        return variance;\n     }\n \n     /**\n         if (incMoment) {\n             moment.clear();\n         }\n-        variance = Double.NaN;\n-        n = 0;\n     }\n-\n-    /** Mean to be used in UnvariateStatistic evaluation approach. */\n-    protected Mean mean = new Mean();\n \n     /**\n      * Returns the variance of the available values. This uses a corrected\n      * or 0.0 for a single value set.\n      * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n      */\n-    public double evaluate(\n-        final double[] values,\n-        final int begin,\n-        final int length) {\n+    public double evaluate(final double[] values, final int begin, final int length) {\n \n+        Mean mean = new Mean();\n         double var = Double.NaN;\n \n         if (test(values, begin, length)) {", "timestamp": 1088292807, "metainfo": ""}