{"sha": "aff023117f79b3e2d2520b0754804a9999231702", "log": "MATH-795: factored out   - testCombineToSelfPreconditionSameType()   - testCombineToSelfSameType()   - testCombineToSelfPreconditionMixeType()   - testCombineToSelfMixedTypes()   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n         Assert.assertEquals(0, new ArrayRealVector(new double[0], false).getDimension());\n     }\n \n-    @Test(expected=DimensionMismatchException.class)\n-    public void testCombineToSelfPreconditionSameType() {\n-        final double a = 1d;\n-        final double b = 2d;\n-        double[] aux = new double[] { 3d, 4d, 5d };\n-        final RealVector x = new ArrayRealVector(aux, false);\n-        aux = new double[] { 6d, 7d };\n-        final RealVector y = new ArrayRealVector(aux, false);\n-        x.combineToSelf(a, b, y);\n-    }\n-\n-    @Test\n-    public void testCombineToSelfSameType() {\n-        final Random random = new Random(20110726);\n-        final int dim = 10;\n-        final double a = (2 * random.nextDouble() - 1);\n-        final double b = (2 * random.nextDouble() - 1);\n-        final RealVector x = new ArrayRealVector(dim);\n-        final RealVector y = new ArrayRealVector(dim);\n-        final double[] expected = new double[dim];\n-        for (int i = 0; i < dim; i++) {\n-            final double xi = 2 * random.nextDouble() - 1;\n-            final double yi = 2 * random.nextDouble() - 1;\n-            x.setEntry(i, xi);\n-            y.setEntry(i, yi);\n-            expected[i] = a * xi + b * yi;\n-        }\n-        Assert.assertSame(x, x.combineToSelf(a, b, y));\n-        final double[] actual = x.toArray();\n-        for (int i = 0; i < dim; i++) {\n-            final double delta;\n-            if (expected[i] == 0d) {\n-                delta = Math.ulp(1d);\n-            } else {\n-                delta = Math.ulp(expected[i]);\n-            }\n-            Assert.assertEquals(\"elements [\" + i + \"] differ\",\n-                                expected[i],\n-                                actual[i],\n-                                delta);\n-        }\n-    }\n-\n-    @Test(expected=DimensionMismatchException.class)\n-    public void testCombineToSelfPreconditionMixedType() {\n-        final double a = 1d;\n-        final double b = 2d;\n-        double[] aux = new double[] { 3d, 4d, 5d };\n-        final RealVector x = new ArrayRealVector(aux, false);\n-        aux = new double[] { 6d, 7d };\n-        final RealVector y = new OpenMapRealVector(aux);\n-        x.combineToSelf(a, b, y);\n-    }\n-\n-    @Test\n-    public void testCombineToSelfMixedTypes() {\n-        final Random random = new Random(20110726);\n-        final int dim = 10;\n-        final double a = (2 * random.nextDouble() - 1);\n-        final double b = (2 * random.nextDouble() - 1);\n-        final RealVector x = new ArrayRealVector(dim);\n-        final RealVector y = new OpenMapRealVector(dim, 0d);\n-        final double[] expected = new double[dim];\n-        for (int i = 0; i < dim; i++) {\n-            final double xi = 2 * random.nextDouble() - 1;\n-            final double yi = 2 * random.nextDouble() - 1;\n-            x.setEntry(i, xi);\n-            y.setEntry(i, yi);\n-            expected[i] = a * xi + b * yi;\n-        }\n-        Assert.assertSame(x, x.combineToSelf(a, b, y));\n-        final double[] actual = x.toArray();\n-        for (int i = 0; i < dim; i++) {\n-            final double delta;\n-            if (expected[i] == 0d) {\n-                delta = Math.ulp(1d);\n-            } else {\n-                delta = Math.ulp(expected[i]);\n-            }\n-            Assert.assertEquals(\"elements [\" + i + \"] differ\",\n-                                expected[i],\n-                                actual[i],\n-                                delta);\n-        }\n-    }\n-\n     @Override\n     public RealVector create(final double[] data) {\n         return new ArrayRealVector(data, true);\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n         }\n     }\n \n+    @Test(expected=DimensionMismatchException.class)\n+    public void testCombineToSelfPreconditionSameType() {\n+        final double a = 1d;\n+        final double b = 2d;\n+        double[] aux = new double[] { 3d, 4d, 5d };\n+        final RealVector x = create(aux);\n+        aux = new double[] { 6d, 7d };\n+        final RealVector y = create(aux);\n+        x.combineToSelf(a, b, y);\n+    }\n+\n+    @Test\n+    public void testCombineToSelfSameType() {\n+        final Random random = new Random(20110726);\n+        final int dim = 10;\n+        final double a = (2 * random.nextDouble() - 1);\n+        final double b = (2 * random.nextDouble() - 1);\n+        final double[] dataX = new double[dim];\n+        final double[] dataY = new double[dim];\n+        final double[] expected = new double[dim];\n+        for (int i = 0; i < dim; i++) {\n+            dataX[i] = 2 * random.nextDouble() - 1;\n+            dataY[i] = 2 * random.nextDouble() - 1;\n+            expected[i] = a * dataX[i] + b * dataY[i];\n+        }\n+        final RealVector x = create(dataX);\n+        final RealVector y = create(dataY);\n+        Assert.assertSame(x, x.combineToSelf(a, b, y));\n+        final double[] actual = x.toArray();\n+        for (int i = 0; i < dim; i++) {\n+            final double delta;\n+            if (expected[i] == 0d) {\n+                delta = Math.ulp(1d);\n+            } else {\n+                delta = Math.ulp(expected[i]);\n+            }\n+            Assert.assertEquals(\"elements [\" + i + \"] differ\",\n+                                expected[i],\n+                                actual[i],\n+                                delta);\n+        }\n+    }\n+\n+    @Test(expected=DimensionMismatchException.class)\n+    public void testCombineToSelfPreconditionMixedType() {\n+        final double a = 1d;\n+        final double b = 2d;\n+        double[] aux = new double[] { 3d, 4d, 5d };\n+        final RealVector x = create(aux);\n+        aux = new double[] { 6d, 7d };\n+        final RealVector y = createAlien(aux);\n+        x.combineToSelf(a, b, y);\n+    }\n+\n+    @Test\n+    public void testCombineToSelfMixedTypes() {\n+        final Random random = new Random(20110726);\n+        final int dim = 10;\n+        final double a = (2 * random.nextDouble() - 1);\n+        final double b = (2 * random.nextDouble() - 1);\n+        final double[] dataX = new double[dim];\n+        final double[] dataY = new double[dim];\n+        final double[] expected = new double[dim];\n+        for (int i = 0; i < dim; i++) {\n+            dataX[i] = 2 * random.nextDouble() - 1;\n+            dataY[i] = 2 * random.nextDouble() - 1;\n+            expected[i] = a * dataX[i] + b * dataY[i];\n+        }\n+        final RealVector x = create(dataX);\n+        final RealVector y = create(dataY);\n+        Assert.assertSame(x, x.combineToSelf(a, b, y));\n+        final double[] actual = x.toArray();\n+        for (int i = 0; i < dim; i++) {\n+            final double delta;\n+            if (expected[i] == 0d) {\n+                delta = Math.ulp(1d);\n+            } else {\n+                delta = Math.ulp(expected[i]);\n+            }\n+            Assert.assertEquals(\"elements [\" + i + \"] differ\",\n+                                expected[i],\n+                                actual[i],\n+                                delta);\n+        }\n+    }\n+\n     /*\n      * TESTS OF THE VISITOR PATTERN\n      */", "timestamp": 1338952758, "metainfo": ""}