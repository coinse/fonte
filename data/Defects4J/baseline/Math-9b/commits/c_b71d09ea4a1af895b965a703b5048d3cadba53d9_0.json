{"sha": "b71d09ea4a1af895b965a703b5048d3cadba53d9", "log": "Changed binomial coeffient computations to allow n = k = 0, returning 1 in this case.  This is standard and also required for degenerate hypergeometric distribution computations.   ", "commit": "\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n /**\n  * Some useful additions to the built-in functions in {@link Math}.\n  *\n- * @version $Revision: 1.15 $ $Date: 2004/04/27 04:37:59 $\n+ * @version $Revision: 1.16 $ $Date: 2004/05/09 04:36:08 $\n  */\n public final class MathUtils {\n     \n      * an <code>n</code>-element set.\n      * <p>\n      * <Strong>Preconditions</strong>:<ul>\n-     * <li> <code>0 < k <= n </code> (otherwise\n+     * <li> <code>0 <= k <= n </code> (otherwise\n      *      <code>IllegalArgumentException</code> is thrown)</li>\n      * <li> The result is small enough to fit into a <code>long</code>.  The\n      *      largest value of <code>n</code> for which all coefficients are\n             throw new IllegalArgumentException(\n             \"must have n >= k for binomial coefficient (n,k)\");\n         }\n-        if (n <= 0) {\n+        if (n < 0) {\n             throw new IllegalArgumentException(\n-            \"must have n > 0 for binomial coefficient (n,k)\");\n+            \"must have n >= 0 for binomial coefficient (n,k)\");\n         }\n         if ((n == k) || (k == 0)) {\n             return 1;\n      * an <code>n</code>-element set.\n      * <p>\n      * <Strong>Preconditions</strong>:<ul>\n-     * <li> <code>0 < k <= n </code> (otherwise\n+     * <li> <code>0 <= k <= n </code> (otherwise\n      *      <code>IllegalArgumentException</code> is thrown)</li>\n      * <li> The result is small enough to fit into a <code>double</code>.\n      *      The largest value of <code>n</code> for which all coefficients are\n      * an <code>n</code>-element set.\n      * <p>\n      * <Strong>Preconditions</strong>:<ul>\n-     * <li> <code>0 < k <= n </code> (otherwise\n+     * <li> <code>0 <= k <= n </code> (otherwise\n      *      <code>IllegalArgumentException</code> is thrown)</li>\n      * </ul>\n      *\n             throw new IllegalArgumentException(\n             \"must have n >= k for binomial coefficient (n,k)\");\n         }\n-        if (n <= 0) {\n+        if (n < 0) {\n             throw new IllegalArgumentException(\n-            \"must have n > 0 for binomial coefficient (n,k)\");\n+            \"must have n >= 0 for binomial coefficient (n,k)\");\n         }\n         if ((n == k) || (k == 0)) {\n             return 0;\n--- a/src/test/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/org/apache/commons/math/util/MathUtilsTest.java\n  */\n package org.apache.commons.math.util;\n \n-import org.apache.commons.math.TestUtils;\n-\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n /**\n  * Test cases for the MathUtils class.\n  *\n- * @version $Revision: 1.12 $ $Date: 2004/04/12 04:22:09 $\n+ * @version $Revision: 1.13 $ $Date: 2004/05/09 04:36:09 $\n  */\n \n public final class MathUtilsTest extends TestCase {\n        */\n     }\n     \n+    /** Verify that b(0,0) = 1 */\n+    public void test0Choose0() {\n+        assertEquals(MathUtils.binomialCoefficientDouble(0, 0), 1d, 0);\n+        assertEquals(MathUtils.binomialCoefficientLog(0, 0), 0d, 0);\n+        assertEquals(MathUtils.binomialCoefficient(0, 0), 1);\n+    }\n+    \n     public void testBinomialCoefficientFail() {\n         try {\n-            long x = MathUtils.binomialCoefficient(0,0);\n-            fail (\"expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            ;\n-        }\n-        try {\n             long x = MathUtils.binomialCoefficient(4,5);\n             fail (\"expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         }\n-        try {\n-            double x = MathUtils.binomialCoefficientDouble(0,0);\n-            fail (\"expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            ;\n-        }\n+        \n         try {\n             double x = MathUtils.binomialCoefficientDouble(4,5);\n             fail (\"expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         }\n-        try {\n-            double x = MathUtils.binomialCoefficientLog(0,0);\n-            fail (\"expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            ;\n-        }\n+        \n         try {\n             double x = MathUtils.binomialCoefficientLog(4,5);\n             fail (\"expecting IllegalArgumentException\");", "timestamp": 1084077369, "metainfo": ""}