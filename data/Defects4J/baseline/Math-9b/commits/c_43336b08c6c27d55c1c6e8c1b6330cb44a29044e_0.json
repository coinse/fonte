{"sha": "43336b08c6c27d55c1c6e8c1b6330cb44a29044e", "log": "Make HashMap final as it is only set in the ctors Document behaviour of getCount(Object v) if v is not comparable Save value of getSumFreq() from DIV/0 check so we don't calculate it twice  ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n     private static final long serialVersionUID = -3845586908418844111L;\n \n     /** underlying collection */\n-    private TreeMap freqTable = null;\n+    private final TreeMap freqTable;\n \n     /**\n      * Default constructor.\n \n     /**\n      * Returns the number of values = v.\n+     * Returns 0 if the value is not comparable.\n      * \n      * @param v the value to lookup.\n      * @return the frequency of v.\n      * @return the proportion of values equal to v\n      */\n     public double getPct(Object v) {\n-        if (getSumFreq() == 0) {\n+        final long sumFreq = getSumFreq();\n+        if (sumFreq == 0) {\n             return Double.NaN;\n         }\n-        return (double) getCount(v) / (double) getSumFreq();        \n+        return (double) getCount(v) / (double) sumFreq;        \n     }\n     \n     /**\n      * @return the proportion of values less than or equal to v\n      */\n     public double getCumPct(Object v) {\n-        if (getSumFreq() == 0) {\n+        final long sumFreq = getSumFreq();\n+        if (sumFreq == 0) {\n             return Double.NaN;\n         }\n-        return (double) getCumFreq(v) / (double) getSumFreq();        \n+        return (double) getCumFreq(v) / (double) sumFreq;        \n     }\n     \n     /**", "timestamp": 1239973646, "metainfo": ""}