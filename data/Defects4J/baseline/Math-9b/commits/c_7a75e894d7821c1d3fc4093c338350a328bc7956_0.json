{"sha": "7a75e894d7821c1d3fc4093c338350a328bc7956", "log": "Changed covariance matrix computation to use QR decomp.  ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java\n      * </p>\n      * <p>Var(b) = (X<sup>T</sup>X)<sup>-1</sup>\n      * </p>\n+     * <p>Uses QR decomposition to reduce (X<sup>T</sup>X)<sup>-1</sup>\n+     * to (R<sup>T</sup>R)<sup>-1</sup>, with only the top p rows of\n+     * R included, where p = the length of the beta vector.</p> \n      * \n      * @return The beta variance\n      */\n     protected RealMatrix calculateBetaVariance() {\n-        //TODO:  find a way to use QR decomp to avoid inverting XX' here\n-        RealMatrix XTX = X.transpose().multiply(X);\n-        return new LUDecompositionImpl(XTX).getSolver().getInverse();\n+        int p = X.getColumnDimension();\n+        RealMatrix Raug = qr.getR().getSubMatrix(0, p - 1 , 0, p - 1);\n+        RealMatrix Rinv = new LUDecompositionImpl(Raug).getSolver().getInverse();\n+        return Rinv.multiply(Rinv.transpose());\n     }\n     \n \n--- a/src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java\n+++ b/src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java\n                        0.488399681651699,\n                        0.214274163161675,\n                        0.226073200069370,\n-                       455.478499142212}, errors, 1E-2); // Ugh..\n-        // Bad accuracy is in intercept std error estimate.  Could be due to\n-        // Current impl inverting XX' to get standard errors.\n-        \n+                       455.478499142212}, errors, 1E-6); \n     }\n     \n     /**", "timestamp": 1231117276, "metainfo": ""}