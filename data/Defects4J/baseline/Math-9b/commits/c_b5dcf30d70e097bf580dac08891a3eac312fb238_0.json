{"sha": "b5dcf30d70e097bf580dac08891a3eac312fb238", "log": "Added interface and reporting class for updating regression.  JIRA: MATH-607.  Contributed by Greg Sterijevski.  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/stat/regression/RegressionResults.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.regression;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import org.apache.commons.math.util.FastMath;\n+\n+/**\n+ * Results of a Multiple Linear Regression model fit.\n+ *\n+ * @version $Id$\n+ * @since 3.0\n+ */\n+public class RegressionResults implements Serializable {\n+\n+    private static final int SSE_IDX = 0;\n+    private static final int SST_IDX = 1;\n+    private static final int RSQ_IDX = 2;\n+    private static final int MSE_IDX = 3;\n+    private static final int ADJRSQ_IDX = 4;\n+    private static final long serialVersionUID = 1l;\n+    private final double[] parameters;\n+    private final double[][] varCovData;\n+    private final boolean isSymmetricVCD;\n+    private final int rank;\n+    private final long nobs;\n+    private final boolean containsConstant;\n+    private final double[] globalFitInfo;\n+\n+    /**\n+     *  Set the default constructor to private access\n+     *  to prevent inadvertent instantiation\n+     */\n+    @SuppressWarnings(\"unused\")\n+    private RegressionResults() {\n+        this.parameters = null;\n+        this.varCovData = null;\n+        this.rank = -1;\n+        this.nobs = -1;\n+        this.containsConstant = false;\n+        this.isSymmetricVCD = false;\n+        this.globalFitInfo = null;\n+    }\n+\n+    public RegressionResults(\n+            final double[] parameters, final double[][] varcov,\n+            final boolean isSymmetricCompressed,\n+            final long nobs, final int rank,\n+            final double sumy, final double sumysq, final double sse,\n+            final boolean containsConstant,\n+            final boolean copyData) {\n+        if (copyData) {\n+            this.parameters = Arrays.copyOf(parameters, parameters.length);\n+            this.varCovData = new double[varcov.length][];\n+            for (int i = 0; i < varcov.length; i++) {\n+                this.varCovData[i] = Arrays.copyOf(varcov[i], varcov[i].length);\n+            }\n+        } else {\n+            this.parameters = parameters;\n+            this.varCovData = varcov;\n+        }\n+        this.isSymmetricVCD = isSymmetricCompressed;\n+        this.nobs = nobs;\n+        this.rank = rank;\n+        this.containsConstant = containsConstant;\n+        this.globalFitInfo = new double[5];\n+        Arrays.fill(this.globalFitInfo, Double.NaN);\n+\n+        if (rank > 2) {\n+            this.globalFitInfo[SST_IDX] = containsConstant ?\n+                    (sumysq - sumy * sumy / ((double) nobs)) : sumysq;\n+        }\n+        this.globalFitInfo[SSE_IDX] = sse;\n+        this.globalFitInfo[MSE_IDX] = this.globalFitInfo[SSE_IDX] /\n+                ((double) (nobs - rank));\n+        this.globalFitInfo[RSQ_IDX] = 1.0 -\n+                this.globalFitInfo[SSE_IDX] /\n+                this.globalFitInfo[SST_IDX];\n+\n+        if (!containsConstant) {\n+            this.globalFitInfo[ADJRSQ_IDX] = 1.0 - (1.0 - this.globalFitInfo[RSQ_IDX]) *\n+                    (nobs / (nobs - rank));\n+        } else {\n+            this.globalFitInfo[ADJRSQ_IDX] = 1.0 - (sse * (nobs - 1.0)) /\n+                    (globalFitInfo[SST_IDX] * (nobs - rank));\n+        }\n+    }\n+\n+    /**\n+     * <p>Returns the parameter estimate for the regressor at the given index.</p>\n+     *\n+     * <p>A redundant regressor will have its redundancy flag set, as well as\n+     *  a parameters estimated equal to {@code Double.NaN}</p>\n+     *\n+     * @param index an integer index which must be in the range [0, numberOfParameters-1]\n+     * @return parameters estimated for regressor at index\n+     * @throws IndexOutOfBoundsException thrown if the index >= numberOfParameters\n+     */\n+    public double getParameterEstimate(int index) throws IndexOutOfBoundsException {\n+        if (parameters == null) {\n+            return Double.NaN;\n+        }\n+        if (index < 0 || index >= this.parameters.length) {\n+            throw new IndexOutOfBoundsException(\"Index is outside of the 0 to number of variables - 1 range\");\n+        }\n+        return this.parameters[index];\n+    }\n+\n+    /**\n+     * <p>Returns a copy of the regression parameters estimates.</p>\n+     *\n+     * <p>The parameter estimates are returned in the natural order of the data.</p>\n+     *\n+     * <p>A redundant regressor will have its redundancy flag set, as will\n+     *  a parameter estimate equal to {@code Double.NaN}.</p>\n+     *\n+     * @return array of parameter estimates, null if no estimation occurred\n+     */\n+    public double[] getParameterEstimates() {\n+        if (this.parameters == null) {\n+            return null;\n+        }\n+        return Arrays.copyOf(parameters, parameters.length);\n+    }\n+\n+    /**\n+     * Returns the <a href=\"http://www.xycoon.com/standerrorb(1).htm\">standard\n+     * error of the parameter estimate at index</a>,\n+     * usually denoted s(b<sub>index</sub>).\n+     *\n+     * @param index an integer index which must be in the range [0, numberOfParameters-1]\n+     * @return standard errors associated with parameters estimated at index\n+     * @throws IndexOutOfBoundsException thrown if the index >= numberOfParameters\n+     */\n+    public double getStdErrorOfEstimate(int index) throws IndexOutOfBoundsException {\n+        if (parameters == null) {\n+            return Double.NaN;\n+        }\n+        if (index < 0 || index >= this.parameters.length) {\n+            throw new IndexOutOfBoundsException(\"Index is outside of the 0 to number of variables - 1 range\");\n+        }\n+        double var = this.getVcvElement(index, index);\n+        if (!Double.isNaN(var) && var > Double.MIN_VALUE) {\n+            return FastMath.sqrt(rank);\n+        }\n+        return Double.NaN;\n+    }\n+\n+    /**\n+     * <p>Returns the <a href=\"http://www.xycoon.com/standerrorb(1).htm\">standard\n+     * error of the parameter estimates</a>,\n+     * usually denoted s(b<sub>i</sub>).</p>\n+     *\n+     * <p>If there are problems with an ill conditioned design matrix then the regressor\n+     * which is redundant will be assigned <code>Double.NaN</code>. </p>\n+     *\n+     * @return an array standard errors associated with parameters estimates,\n+     *  null if no estimation occurred\n+     */\n+    public double[] getStdErrorOfEstimates() {\n+        if (parameters == null) {\n+            return null;\n+        }\n+        double[] se = new double[this.parameters.length];\n+        for (int i = 0; i < this.parameters.length; i++) {\n+            double var = this.getVcvElement(i, i);\n+            if (!Double.isNaN(var) && var > Double.MIN_VALUE) {\n+                se[i] = FastMath.sqrt(rank);\n+                continue;\n+            }\n+            se[i] = Double.NaN;\n+        }\n+        return se;\n+    }\n+\n+    /**\n+     * <p>Returns the covariance between regression parameters i and j.</p>\n+     *\n+     * <p>If there are problems with an ill conditioned design matrix then the covariance\n+     * which involves redundant columns will be assigned {@code Double.NaN}. </p>\n+     *\n+     * @param i - the ith regression parameter\n+     * @param j - the jth regression parameter\n+     * @return the covariance of the parameter estimates\n+     */\n+    public double getCovarianceOfParameters(int i, int j) throws IndexOutOfBoundsException {\n+        if (parameters == null) {\n+            return Double.NaN;\n+        }\n+        if (i < 0 || i >= this.parameters.length) {\n+            throw new IndexOutOfBoundsException(\" Row index is outside of the 0 \" +\n+                    \"to number of variables - 1 range\");\n+        }\n+        if (j < 0 || j >= this.parameters.length) {\n+            throw new IndexOutOfBoundsException(\" Column index is outside of the 0\" +\n+                    \" to number of variables - 1 range\");\n+        }\n+        return this.getVcvElement(i, j);\n+    }\n+\n+    /**\n+     * <p>Returns the number of parameters estimated in the model.</p>\n+     *\n+     * <p>This is the maximum number of regressors, some techniques may drop\n+     * redundant parameters</p>\n+     *\n+     * @return number of regressors, -1 if not estimated\n+     */\n+    public int getNumberOfParameters() {\n+        if (this.parameters == null) {\n+            return -1;\n+        }\n+        return this.parameters.length;\n+    }\n+\n+    /**\n+     * Returns the number of observations added to the regression model.\n+     *\n+     * @return Number of observations, -1 if an error condition prevents estimation\n+     */\n+    public long getN() {\n+        return this.nobs;\n+    }\n+\n+    /**\n+     * <p>Returns the sum of squared deviations of the y values about their mean.</p>\n+     *\n+     * <p>This is defined as SSTO\n+     * <a href=\"http://www.xycoon.com/SumOfSquares.htm\">here</a>.</p>\n+     *\n+     * <p>If {@code n < 2}, this returns {@code Double.NaN}.</p>\n+     *\n+     * @return sum of squared deviations of y values\n+     */\n+    public double getTotalSumSquares() {\n+        return this.globalFitInfo[SST_IDX];\n+    }\n+\n+    /**\n+     * <p>Returns the sum of squared deviations of the predicted y values about\n+     * their mean (which equals the mean of y).</p>\n+     *\n+     * <p>This is usually abbreviated SSR or SSM.  It is defined as SSM\n+     * <a href=\"http://www.xycoon.com/SumOfSquares.htm\">here</a></p>\n+     *\n+     * <p><strong>Preconditions</strong>: <ul>\n+     * <li>At least two observations (with at least two different x values)\n+     * must have been added before invoking this method. If this method is\n+     * invoked before a model can be estimated, <code>Double.NaN</code> is\n+     * returned.\n+     * </li></ul></p>\n+     *\n+     * @return sum of squared deviations of predicted y values\n+     */\n+    public double getRegressionSumSquares() {\n+        return this.globalFitInfo[SST_IDX] - this.globalFitInfo[SSE_IDX];\n+    }\n+\n+    /**\n+     * <p>Returns the <a href=\"http://www.xycoon.com/SumOfSquares.htm\">\n+     * sum of squared errors</a> (SSE) associated with the regression\n+     * model.</p>\n+     *\n+     * <p>The return value is constrained to be non-negative - i.e., if due to\n+     * rounding errors the computational formula returns a negative result,\n+     * 0 is returned.</p>\n+     *\n+     * <p><strong>Preconditions</strong>: <ul>\n+     * <li>numberOfParameters data pairs\n+     * must have been added before invoking this method. If this method is\n+     * invoked before a model can be estimated, <code>Double,NaN</code> is\n+     * returned.\n+     * </li></ul></p>\n+     *\n+     * @return sum of squared errors associated with the regression model\n+     */\n+    public double getErrorSumSquares() {\n+        return this.globalFitInfo[ SSE_IDX];\n+    }\n+\n+    /**\n+     * <p>Returns the sum of squared errors divided by the degrees of freedom,\n+     * usually abbreviated MSE.</p>\n+     *\n+     * <p>If there are fewer than <strong>numberOfParameters + 1</strong> data pairs in the model,\n+     * or if there is no variation in <code>x</code>, this returns\n+     * <code>Double.NaN</code>.</p>\n+     *\n+     * @return sum of squared deviations of y values\n+     */\n+    public double getMeanSquareError() {\n+        return this.globalFitInfo[ MSE_IDX];\n+    }\n+\n+    /**\n+     * <p>Returns the <a href=\"http://www.xycoon.com/coefficient1.htm\">\n+     * coefficient of multiple determination</a>,\n+     * usually denoted r-square.</p>\n+     *\n+     * <p><strong>Preconditions</strong>: <ul>\n+     * <li>At least numberOfParameters observations (with at least numberOfParameters different x values)\n+     * must have been added before invoking this method. If this method is\n+     * invoked before a model can be estimated, {@code Double,NaN} is\n+     * returned.\n+     * </li></ul></p>\n+     *\n+     * @return r-square, a double in the interval [0, 1]\n+     */\n+    public double getRSquared() {\n+        return this.globalFitInfo[ RSQ_IDX];\n+    }\n+\n+    /**\n+     * <p>Returns the adjusted R-squared statistic, defined by the formula <pre>\n+     * R<sup>2</sup><sub>adj</sub> = 1 - [SSR (n - 1)] / [SSTO (n - p)]\n+     * </pre>\n+     * where SSR is the sum of squared residuals},\n+     * SSTO is the total sum of squares}, n is the number\n+     * of observations and p is the number of parameters estimated (including the intercept).</p>\n+     *\n+     * <p>If the regression is estimated without an intercept term, what is returned is <pre>\n+     * <code> 1 - (1 - {@link #getRSquared()} ) * (n / (n - p)) </code>\n+     * </pre></p>\n+     *\n+     * @return adjusted R-Squared statistic\n+     */\n+    public double getAdjustedRSquared() {\n+        return this.globalFitInfo[ ADJRSQ_IDX];\n+    }\n+\n+    /**\n+     * Returns true if the regression model has been computed including an intercept.\n+     * In this case, the coefficient of the intercept is the first element of the\n+     * {@link #getParameterEstimates() parameter estimates}.\n+     * @return true if the model has an intercept term\n+     */\n+    public boolean hasIntercept() {\n+        return this.containsConstant;\n+    }\n+\n+    /**\n+     * Gets the i-jth element of the variance-covariance matrix.\n+     *\n+     * @param i first variable index\n+     * @param j second variable index\n+     * @return the requested variance-covariance matrix entry\n+     */\n+    private double getVcvElement(int i, int j) {\n+        if (this.isSymmetricVCD) {\n+            if (this.varCovData.length > 1) {\n+                //could be stored in upper or lower triangular\n+                if (i == j) {\n+                    return varCovData[i][i];\n+                } else if (i >= varCovData[j].length) {\n+                    return varCovData[i][j];\n+                } else {\n+                    return varCovData[j][i];\n+                }\n+            } else {//could be in single array\n+                if (i > j) {\n+                    return varCovData[0][(i + 1) * i / 2 + j];\n+                } else {\n+                    return varCovData[0][(j + 1) * j / 2 + i];\n+                }\n+            }\n+        } else {\n+            return this.varCovData[i][j];\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/stat/regression/UpdatingMultipleLinearRegression.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.regression;\n+\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ * An interface for regression models allowing for dynamic updating of the data.\n+ * That is, the entire data set need not be loaded into memory. As observations\n+ * become available, they can be added to the regression  model and an updated\n+ * estimate regression statistics can be calculated.\n+ *\n+ * @version $Id$\n+ * @since 3.0\n+ */\n+public interface UpdatingMultipleLinearRegression {\n+\n+    /**\n+     * Returns true if a constant has been included false otherwise.\n+     *\n+     * @return true if constant exists, false otherwise\n+     */\n+    boolean hasIntercept();\n+\n+    /**\n+     * Returns the number of observations added to the regression model.\n+     *\n+     * @return Number of observations\n+     */\n+    long getN();\n+\n+    /**\n+     * Adds one observation to the regression model.\n+     *\n+     * @param x the independent variables which form the design matrix\n+     * @param y the dependent or response variable\n+     */\n+    void addObservation(double[] x, double y);\n+\n+    /**\n+     * Adds a series of observations to the regression model. The lengths of\n+     * x and y must be the same and x must be rectangular.\n+     *\n+     * @param x a series of observations on the independent variables\n+     * @param y a series of observations on the dependent variable\n+     * The length of x and y must be the same\n+     */\n+    void addObservations(double[][] x, double[] y);\n+\n+    /**\n+     * Clears internal buffers and resets the regression model. This means all\n+     * data and derived values are initialized\n+     */\n+    void clear();\n+\n+\n+    /**\n+     * Performs a regression on data present in buffers and outputs a RegressionResults object\n+     * @return RegressionResults acts as a container of regression output\n+     * @throws MathException a wide variety of exception cases are possible, check message\n+     */\n+    RegressionResults regress() throws MathException;\n+\n+    /**\n+     * Performs a regression on data present in buffers including only regressors\n+     * indexed in variablesToInclude and outputs a RegressionResults object\n+     * @param variablesToInclude an array of indices of regressors to include\n+     * @return RegressionResults acts as a container of regression output\n+     * @throws MathException a wide variety of exception cases are possible, check message\n+     */\n+    RegressionResults regress(int[] variablesToInclude) throws MathException;\n+}", "timestamp": 1310341543, "metainfo": ""}