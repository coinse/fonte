{"sha": "8a69aabccd025484703f6b25f0bd780b2033563e", "log": "Formatting (MATH-677).  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/transform/FastSineTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastSineTransformer.java\n      * @return the real transformed array\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    public double[] transform(double f[])\n+    public double[] transform(double[] f)\n         throws IllegalArgumentException {\n         return fst(f);\n     }\n                               double min, double max, int n)\n         throws IllegalArgumentException {\n \n-        double data[] = FastFourierTransformer.sample(f, min, max, n);\n+        double[] data = FastFourierTransformer.sample(f, min, max, n);\n         data[0] = 0.0;\n         return fst(data);\n     }\n      * @return the real transformed array\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    public double[] transform2(double f[]) throws IllegalArgumentException {\n-\n-        double scaling_coefficient = FastMath.sqrt(2.0 / f.length);\n-        return FastFourierTransformer.scaleArray(fst(f), scaling_coefficient);\n+    public double[] transform2(double[] f) throws IllegalArgumentException {\n+\n+        double scalingCoefficient = FastMath.sqrt(2.0 / f.length);\n+        return FastFourierTransformer.scaleArray(fst(f), scalingCoefficient);\n     }\n \n     /**\n         UnivariateFunction f, double min, double max, int n)\n         throws IllegalArgumentException {\n \n-        double data[] = FastFourierTransformer.sample(f, min, max, n);\n+        double[] data = FastFourierTransformer.sample(f, min, max, n);\n         data[0] = 0.0;\n-        double scaling_coefficient = FastMath.sqrt(2.0 / n);\n-        return FastFourierTransformer.scaleArray(fst(data), scaling_coefficient);\n+        double scalingCoefficient = FastMath.sqrt(2.0 / n);\n+        return FastFourierTransformer.scaleArray(fst(data), scalingCoefficient);\n     }\n \n     /**\n      * @return the real inversely transformed array\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    public double[] inverseTransform(double f[]) throws IllegalArgumentException {\n-\n-        double scaling_coefficient = 2.0 / f.length;\n-        return FastFourierTransformer.scaleArray(fst(f), scaling_coefficient);\n+    public double[] inverseTransform(double[] f) throws IllegalArgumentException {\n+\n+        double scalingCoefficient = 2.0 / f.length;\n+        return FastFourierTransformer.scaleArray(fst(f), scalingCoefficient);\n     }\n \n     /**\n     public double[] inverseTransform(UnivariateFunction f, double min, double max, int n)\n         throws IllegalArgumentException {\n \n-        double data[] = FastFourierTransformer.sample(f, min, max, n);\n+        double[] data = FastFourierTransformer.sample(f, min, max, n);\n         data[0] = 0.0;\n-        double scaling_coefficient = 2.0 / n;\n-        return FastFourierTransformer.scaleArray(fst(data), scaling_coefficient);\n+        double scalingCoefficient = 2.0 / n;\n+        return FastFourierTransformer.scaleArray(fst(data), scalingCoefficient);\n     }\n \n     /**\n      * @return the real inversely transformed array\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    public double[] inverseTransform2(double f[]) throws IllegalArgumentException {\n+    public double[] inverseTransform2(double[] f) throws IllegalArgumentException {\n \n         return transform2(f);\n     }\n      * @return the real transformed array\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    protected double[] fst(double f[]) throws IllegalArgumentException {\n-\n-        final double transformed[] = new double[f.length];\n+    protected double[] fst(double[] f) throws IllegalArgumentException {\n+\n+        final double[] transformed = new double[f.length];\n \n         FastFourierTransformer.verifyDataSet(f);\n         if (f[0] != 0.0) {\n         x[0] = 0.0;\n         x[n >> 1] = 2.0 * f[n >> 1];\n         for (int i = 1; i < (n >> 1); i++) {\n-            final double a = FastMath.sin(i * FastMath.PI / n) * (f[i] + f[n-i]);\n-            final double b = 0.5 * (f[i] - f[n-i]);\n+            final double a = FastMath.sin(i * FastMath.PI / n) * (f[i] + f[n - i]);\n+            final double b = 0.5 * (f[i] - f[n - i]);\n             x[i]     = a + b;\n             x[n - i] = a - b;\n         }\n         FastFourierTransformer transformer = new FastFourierTransformer();\n-        Complex y[] = transformer.transform(x);\n+        Complex[] y = transformer.transform(x);\n \n         // reconstruct the FST result for the original array\n         transformed[0] = 0.0;", "timestamp": 1322711073, "metainfo": ""}