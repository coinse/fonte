{"sha": "ba38039720af183ce5fa4283f5ce2e0232e265f9", "log": "MATH-854: fill the \"throws\" clause of FieldVector.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/FieldVector.java\n+++ b/src/main/java/org/apache/commons/math3/linear/FieldVector.java\n \n import org.apache.commons.math3.Field;\n import org.apache.commons.math3.FieldElement;\n+import org.apache.commons.math3.exception.DimensionMismatchException;\n+import org.apache.commons.math3.exception.NotPositiveException;\n+import org.apache.commons.math3.exception.OutOfRangeException;\n \n /**\n  * Interface defining a field-valued vector with basic algebraic operations.\n     FieldVector<T> copy();\n \n     /**\n-     * Compute the sum of this and v.\n+     * Compute the sum of {@code this} and {@code v}.\n      * @param v vector to be added\n-     * @return this + v\n-     * @throws IllegalArgumentException if v is not the same size as this\n-     */\n-    FieldVector<T> add(FieldVector<T> v)\n-        throws IllegalArgumentException;\n-\n-    /**\n-     * Compute this minus v.\n+     * @return {@code this + v}\n+     * @throws DimensionMismatchException if {@code v} is not the same size as\n+     * {@code this}\n+     */\n+    FieldVector<T> add(FieldVector<T> v) throws DimensionMismatchException;\n+\n+    /**\n+     * Compute {@code this} minus {@code v}.\n      * @param v vector to be subtracted\n-     * @return this + v\n-     * @throws IllegalArgumentException if v is not the same size as this\n-     */\n-    FieldVector<T> subtract(FieldVector<T> v)\n-        throws IllegalArgumentException;\n+     * @return {@code this + v}\n+     * @throws DimensionMismatchException if {@code v} is not the same size as\n+     * {@code this}\n+     */\n+    FieldVector<T> subtract(FieldVector<T> v) throws DimensionMismatchException;\n \n     /**\n      * Map an addition operation to each entry.\n      * @param d value to be added to each entry\n-     * @return this + d\n+     * @return {@code this + d}\n      */\n     FieldVector<T> mapAdd(T d);\n \n      * Map an addition operation to each entry.\n      * <p>The instance <strong>is</strong> changed by this method.</p>\n      * @param d value to be added to each entry\n-     * @return for convenience, return this\n+     * @return for convenience, return {@code this}\n      */\n     FieldVector<T> mapAddToSelf(T d);\n \n     /**\n      * Map a subtraction operation to each entry.\n      * @param d value to be subtracted to each entry\n-     * @return this - d\n+     * @return {@code this - d}\n      */\n     FieldVector<T> mapSubtract(T d);\n \n      * Map a subtraction operation to each entry.\n      * <p>The instance <strong>is</strong> changed by this method.</p>\n      * @param d value to be subtracted to each entry\n-     * @return for convenience, return this\n+     * @return for convenience, return {@code this}\n      */\n     FieldVector<T> mapSubtractToSelf(T d);\n \n     /**\n      * Map a multiplication operation to each entry.\n      * @param d value to multiply all entries by\n-     * @return this * d\n+     * @return {@code this * d}\n      */\n     FieldVector<T> mapMultiply(T d);\n \n      * Map a multiplication operation to each entry.\n      * <p>The instance <strong>is</strong> changed by this method.</p>\n      * @param d value to multiply all entries by\n-     * @return for convenience, return this\n+     * @return for convenience, return {@code this}\n      */\n     FieldVector<T> mapMultiplyToSelf(T d);\n \n     /**\n      * Map a division operation to each entry.\n      * @param d value to divide all entries by\n-     * @return this / d\n+     * @return {@code this / d}\n      */\n     FieldVector<T> mapDivide(T d);\n \n      * Map a division operation to each entry.\n      * <p>The instance <strong>is</strong> changed by this method.</p>\n      * @param d value to divide all entries by\n-     * @return for convenience, return this\n+     * @return for convenience, return {@code this}\n      */\n     FieldVector<T> mapDivideToSelf(T d);\n \n     /**\n      * Map the 1/x function to each entry.\n      * <p>The instance <strong>is</strong> changed by this method.</p>\n-     * @return for convenience, return this\n+     * @return for convenience, return {@code this}\n      */\n     FieldVector<T> mapInvToSelf();\n \n     /**\n      * Element-by-element multiplication.\n      * @param v vector by which instance elements must be multiplied\n-     * @return a vector containing this[i] * v[i] for all i\n-     * @throws IllegalArgumentException if v is not the same size as this\n-     */\n-    FieldVector<T> ebeMultiply(FieldVector<T> v) throws IllegalArgumentException;\n+     * @return a vector containing {@code this[i] * v[i]} for all {@code i}\n+     * @throws DimensionMismatchException if {@code v} is not the same size as\n+     * {@code this}\n+     */\n+    FieldVector<T> ebeMultiply(FieldVector<T> v)\n+            throws DimensionMismatchException;\n \n     /**\n      * Element-by-element division.\n      * @param v vector by which instance elements must be divided\n-     * @return a vector containing this[i] / v[i] for all i\n-     * @throws IllegalArgumentException if v is not the same size as this\n-     */\n-    FieldVector<T> ebeDivide(FieldVector<T> v) throws IllegalArgumentException;\n+     * @return a vector containing {@code this[i] / v[i]} for all {@code i}\n+     * @throws DimensionMismatchException if {@code v} is not the same size as\n+     * {@code this}\n+     */\n+    FieldVector<T> ebeDivide(FieldVector<T> v)\n+            throws DimensionMismatchException;\n \n     /**\n      * Returns vector entries as a T array.\n     /**\n      * Compute the dot product.\n      * @param v vector with which dot product should be computed\n-     * @return the scalar dot product between instance and v\n-     * @exception IllegalArgumentException if v is not the same size as this\n-     */\n-    T dotProduct(FieldVector<T> v)\n-        throws IllegalArgumentException;\n+     * @return the scalar dot product of {@code this} and {@code v}\n+     * @throws DimensionMismatchException if {@code v} is not the same size as\n+     * {@code this}\n+     */\n+    T dotProduct(FieldVector<T> v) throws DimensionMismatchException;\n \n     /** Find the orthogonal projection of this vector onto another vector.\n-     * @param v vector onto which instance must be projected\n-     * @return projection of the instance onto v\n-     * @throws IllegalArgumentException if v is not the same size as this\n-     */\n-    FieldVector<T> projection(FieldVector<T> v)\n-        throws IllegalArgumentException;\n+     * @param v vector onto which {@code this} must be projected\n+     * @return projection of {@code this} onto {@code v}\n+     * @throws DimensionMismatchException if {@code v} is not the same size as\n+     * {@code this}\n+     */\n+    FieldVector<T> projection(FieldVector<T> v) throws DimensionMismatchException;\n \n     /**\n      * Compute the outer product.\n      *\n      * @param index Index location of entry to be fetched.\n      * @return the vector entry at {@code index}.\n-     * @throws org.apache.commons.math3.exception.OutOfRangeException if the\n-     * index is not valid.\n+     * @throws OutOfRangeException if the index is not valid.\n      * @see #setEntry(int, FieldElement)\n      */\n-    T getEntry(int index);\n+    T getEntry(int index) throws OutOfRangeException;\n \n     /**\n      * Set a single element.\n      * @param index element index.\n      * @param value new value for the element.\n-     * @throws org.apache.commons.math3.exception.OutOfRangeException\n-     * if the index is inconsistent with vector size.\n+     * @throws OutOfRangeException if the index is not valid.\n      * @see #getEntry(int)\n      */\n-    void setEntry(int index, T value);\n+    void setEntry(int index, T value) throws OutOfRangeException;\n \n     /**\n      * Returns the size of the vector.\n      * @param index index of first element.\n      * @param n number of elements to be retrieved.\n      * @return a vector containing n elements.\n-     * @throws org.apache.commons.math3.exception.OutOfRangeException\n-     * if the index is inconsistent with vector size.\n-     */\n-    FieldVector<T> getSubVector(int index, int n);\n+     * @throws OutOfRangeException if the index is not valid.\n+     * @throws NotPositiveException if the number of elements if not positive.\n+     */\n+    FieldVector<T> getSubVector(int index, int n)\n+            throws OutOfRangeException, NotPositiveException;\n \n     /**\n      * Set a set of consecutive elements.\n      * @param index index of first element to be set.\n      * @param v vector containing the values to set.\n-     * @throws org.apache.commons.math3.exception.OutOfRangeException\n-     * if the index is inconsistent with vector size.\n-     */\n-    void setSubVector(int index, FieldVector<T> v);\n+     * @throws OutOfRangeException if the index is not valid.\n+     */\n+    void setSubVector(int index, FieldVector<T> v) throws OutOfRangeException;\n \n     /**\n      * Set all elements to a single value.", "timestamp": 1347298311, "metainfo": ""}