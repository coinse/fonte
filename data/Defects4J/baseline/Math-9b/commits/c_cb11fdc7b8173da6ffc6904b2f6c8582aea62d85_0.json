{"sha": "cb11fdc7b8173da6ffc6904b2f6c8582aea62d85", "log": "- Replaced LinearOperator with Operator in exception names in order to make them shorter (as discussed on the ML). - Created IllConditionedOperatorException. - Created SingularOperatorException (as discussed on the ML).  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n+++ b/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n     GCD_OVERFLOW_64_BITS(\"overflow: gcd({0}, {1}) is 2^63\"),\n     HOLE_BETWEEN_MODELS_TIME_RANGES(\"{0} wide hole between models time ranges\"),\n     IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(\"identical abscissas x[{0}] == x[{1}] == {2} cause division by zero\"),\n+    ILL_CONDITIONED_OPERATOR(\"condition number {1} is too high \"),\n     INDEX_LARGER_THAN_MAX(\"the index specified: {0} is larger than the current maximal index {1}\"),\n     INDEX_NOT_POSITIVE(\"index ({0}) is not positive\"),\n     INDEX_OUT_OF_RANGE(\"index {0} out of allowed range [{1}, {2}]\"),\n     NOT_POSITIVE_COLUMNDIMENSION(\"invalid column dimension: {0} (must be positive)\"),\n     NOT_POSITIVE_DEFINITE_MATRIX(\"not positive definite matrix\"), /* keep */\n     NON_POSITIVE_DEFINITE_MATRIX(\"not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})\"),\n-    NON_POSITIVE_DEFINITE_LINEAR_OPERATOR(\"non positive definite linear operator\"), /* keep */\n-    NON_SELF_ADJOINT_LINEAR_OPERATOR(\"non self-adjoint linear operator\"), /* keep */\n-    NON_SQUARE_LINEAR_OPERATOR(\"non square ({0}x{1}) linear operator\"), /* keep */\n+    NON_POSITIVE_DEFINITE_OPERATOR(\"non positive definite linear operator\"), /* keep */\n+    NON_SELF_ADJOINT_OPERATOR(\"non self-adjoint linear operator\"), /* keep */\n+    NON_SQUARE_OPERATOR(\"non square ({0}x{1}) linear operator\"), /* keep */\n     DEGREES_OF_FREEDOM(\"degrees of freedom ({0})\"), /* keep */\n     NOT_POSITIVE_DEGREES_OF_FREEDOM(\"degrees of freedom must be positive ({0})\"),\n     NOT_POSITIVE_ELEMENT_AT_INDEX(\"element {0} is not positive: {1}\"),\n     SIMPLEX_NEED_ONE_POINT(\"simplex must contain at least one point\"),\n     SIMPLE_MESSAGE(\"{0}\"),\n     SINGULAR_MATRIX(\"matrix is singular\"), /* keep */\n+    SINGULAR_OPERATOR(\"operator is singular\"),\n     SUBARRAY_ENDS_AFTER_ARRAY_END(\"subarray ends after array end\"),\n     TOO_LARGE_CUTOFF_SINGULAR_VALUE(\"cutoff singular value is {0}, should be at most {1}\"),\n     TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(\"cannot discard {0} elements from a {1} elements array\"),\n--- a/src/main/java/org/apache/commons/math/linear/ConjugateGradient.java\n+++ b/src/main/java/org/apache/commons/math/linear/ConjugateGradient.java\n  * <h3><a id=\"context\">Exception context</a></h3>\n  * <p>\n  * Besides standard {@link DimensionMismatchException}, this class might throw\n- * {@link NonPositiveDefiniteLinearOperatorException} if the linear operator or\n+ * {@link NonPositiveDefiniteOperatorException} if the linear operator or\n  * the preconditioner are not positive definite. In this case, the\n  * {@link ExceptionContext} provides some more information\n  * <ul>\n     public RealVector solveInPlace(final RealLinearOperator a,\n                                    final InvertibleRealLinearOperator m,\n                                    final RealVector b, final RealVector x0)\n-        throws NullArgumentException, NonSquareLinearOperatorException,\n+        throws NullArgumentException, NonSquareOperatorException,\n         DimensionMismatchException, MaxCountExceededException {\n         checkParameters(a, m, b, x0);\n         final IterationManager manager = getIterationManager();\n             }\n             final double rhoNext = r.dotProduct(z);\n             if (check && (rhoNext <= 0.)) {\n-                final NonPositiveDefiniteLinearOperatorException e;\n-                e = new NonPositiveDefiniteLinearOperatorException();\n+                final NonPositiveDefiniteOperatorException e;\n+                e = new NonPositiveDefiniteOperatorException();\n                 final ExceptionContext context = e.getContext();\n                 context.setValue(OPERATOR, m);\n                 context.setValue(VECTOR, r);\n             manager.incrementIterationCount();\n             final double pq = p.dotProduct(q);\n             if (check && (pq <= 0.)) {\n-                final NonPositiveDefiniteLinearOperatorException e;\n-                e = new NonPositiveDefiniteLinearOperatorException();\n+                final NonPositiveDefiniteOperatorException e;\n+                e = new NonPositiveDefiniteOperatorException();\n                 final ExceptionContext context = e.getContext();\n                 context.setValue(OPERATOR, a);\n                 context.setValue(VECTOR, p);\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/linear/IllConditionedOperatorException.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.linear;\n+\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n+\n+/**\n+ * An exception to be thrown when the condition number of a\n+ * {@link RealLinearOperator} is too high.\n+ *\n+ * @version $Id$\n+ * @since 3.0\n+ */\n+public class IllConditionedOperatorException\n+    extends MathIllegalArgumentException {\n+    /** Serializable version Id. */\n+    private static final long serialVersionUID = -7883263944530490135L;\n+\n+    /**\n+     * Creates a new instance of this class.\n+     *\n+     * @param cond An estimate of the condition number of the offending linear\n+     * operator.\n+     */\n+    public IllConditionedOperatorException(final double cond) {\n+        super(LocalizedFormats.ILL_CONDITIONED_OPERATOR, cond);\n+    }\n+}\n--- a/src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java\n+++ b/src/main/java/org/apache/commons/math/linear/IterativeLinearSolver.java\n      * @param b Right-hand side vector.\n      * @param x0 Initial guess of the solution.\n      * @throws NullArgumentException if one of the parameters is {@code null}.\n-     * @throws NonSquareLinearOperatorException if {@code a} is not square.\n+     * @throws NonSquareOperatorException if {@code a} is not square.\n      * @throws DimensionMismatchException if {@code b} or {@code x0} have\n      * dimensions inconsistent with {@code a}.\n      */\n     protected static void checkParameters(final RealLinearOperator a,\n                                           final RealVector b,\n                                           final RealVector x0)\n-        throws NullArgumentException, NonSquareLinearOperatorException,\n+        throws NullArgumentException, NonSquareOperatorException,\n         DimensionMismatchException {\n         MathUtils.checkNotNull(a);\n         MathUtils.checkNotNull(b);\n         MathUtils.checkNotNull(x0);\n         if (a.getRowDimension() != a.getColumnDimension()) {\n-            throw new NonSquareLinearOperatorException(a.getRowDimension(),\n+            throw new NonSquareOperatorException(a.getRowDimension(),\n                                                        a.getColumnDimension());\n         }\n         if (b.getDimension() != a.getRowDimension()) {\n      * @param b Right-hand side vector.\n      * @return A new vector containing the solution.\n      * @throws NullArgumentException if one of the parameters is {@code null}.\n-     * @throws NonSquareLinearOperatorException if {@code a} is not square.\n+     * @throws NonSquareOperatorException if {@code a} is not square.\n      * @throws DimensionMismatchException if {@code b} has dimensions\n      * inconsistent with {@code a}.\n      * @throws MaxCountExceededException at exhaustion of the iteration count,\n      * construction.\n      */\n     public RealVector solve(RealLinearOperator a, RealVector b)\n-        throws NullArgumentException, NonSquareLinearOperatorException,\n+        throws NullArgumentException, NonSquareOperatorException,\n         DimensionMismatchException, MaxCountExceededException {\n         MathUtils.checkNotNull(a);\n         final RealVector x = new ArrayRealVector(a.getColumnDimension());\n      * @param x0 Initial guess of the solution.\n      * @return A new vector containing the solution.\n      * @throws NullArgumentException if one of the parameters is {@code null}.\n-     * @throws NonSquareLinearOperatorException if {@code a} is not square.\n+     * @throws NonSquareOperatorException if {@code a} is not square.\n      * @throws DimensionMismatchException if {@code b} or {@code x0} have\n      * dimensions inconsistent with {@code a}.\n      * @throws MaxCountExceededException at exhaustion of the iteration count,\n      * construction.\n      */\n     public RealVector solve(RealLinearOperator a, RealVector b, RealVector x0)\n-        throws NullArgumentException, NonSquareLinearOperatorException,\n+        throws NullArgumentException, NonSquareOperatorException,\n         DimensionMismatchException, MaxCountExceededException {\n         MathUtils.checkNotNull(x0);\n         return solveInPlace(a, b, x0.copy());\n      * @return A reference to {@code x0} (shallow copy) updated with the\n      * solution.\n      * @throws NullArgumentException if one of the parameters is {@code null}.\n-     * @throws NonSquareLinearOperatorException if {@code a} is not square.\n+     * @throws NonSquareOperatorException if {@code a} is not square.\n      * @throws DimensionMismatchException if {@code b} or {@code x0} have\n      * dimensions inconsistent with {@code a}.\n      * @throws MaxCountExceededException at exhaustion of the iteration count,\n      */\n     public abstract RealVector solveInPlace(RealLinearOperator a, RealVector b,\n                                             RealVector x0)\n-        throws NullArgumentException, NonSquareLinearOperatorException,\n+        throws NullArgumentException, NonSquareOperatorException,\n         DimensionMismatchException, MaxCountExceededException;\n }\n--- a/src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java\n+++ b/src/main/java/org/apache/commons/math/linear/JacobiPreconditioner.java\n      * @param a Linear operator for which the preconditioner should be built.\n      * @return Preconditioner made of the diagonal coefficients of the specified\n      *         linear operator.\n-     * @throws NonSquareLinearOperatorException if {@code a} is not square.\n+     * @throws NonSquareOperatorException if {@code a} is not square.\n      */\n     public static JacobiPreconditioner create(final RealLinearOperator a)\n-        throws NonSquareLinearOperatorException {\n+        throws NonSquareOperatorException {\n         final int n = a.getColumnDimension();\n         if (a.getRowDimension() != n) {\n-            throw new NonSquareLinearOperatorException(a.getRowDimension(), n);\n+            throw new NonSquareOperatorException(a.getRowDimension(), n);\n         }\n         final double[] diag = new double[n];\n         if (a instanceof AbstractRealMatrix) {\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/linear/NonPositiveDefiniteOperatorException.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.linear;\n+\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n+\n+/**\n+ * Exception to be thrown when a symmetric, definite positive\n+ * {@link RealLinearOperator} is expected.\n+ * Since the coefficients of the matrix are not accessible, the most\n+ * general definition is used to check that {@code A} is not positive\n+ * definite, i.e.  there exists {@code x} such that {@code x' A x <= 0}.\n+ * In the terminology of this exception, {@code A} is the \"offending\"\n+ * linear operator and {@code x} the \"offending\" vector.\n+ *\n+ * @version $Id$\n+ * @since 3.0\n+ */\n+public class NonPositiveDefiniteOperatorException\n+    extends MathIllegalArgumentException {\n+    /** Serializable version Id. */\n+    private static final long serialVersionUID = 917034489420549847L;\n+\n+    /** Creates a new instance of this class. */\n+    public NonPositiveDefiniteOperatorException() {\n+        super(LocalizedFormats.NON_POSITIVE_DEFINITE_OPERATOR);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/linear/NonSelfAdjointOperatorException.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.linear;\n+\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n+\n+/**\n+ * Exception to be thrown when a self-adjoint {@link RealLinearOperator}\n+ * is expected.\n+ * Since the coefficients of the matrix are not accessible, the most\n+ * general definition is used to check that A is not self-adjoint, i.e.\n+ * there exist x and y such as {@code | x' A y - y' A x | >= eps},\n+ * where {@code eps} is a user-specified tolerance, and {@code x'}\n+ * denotes the transpose of {@code x}.\n+ * In the terminology of this exception, {@code A} is the \"offending\"\n+ * linear operator, {@code x} and {@code y} are the first and second\n+ * \"offending\" vectors, respectively.\n+ *\n+ * @version $Id$\n+ * @since 3.0\n+ */\n+public class NonSelfAdjointOperatorException\n+    extends MathIllegalArgumentException {\n+    /** Serializable version Id. */\n+    private static final long serialVersionUID = 1784999305030258247L;\n+\n+    /** Creates a new instance of this class. */\n+    public NonSelfAdjointOperatorException() {\n+        super(LocalizedFormats.NON_SELF_ADJOINT_OPERATOR);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/linear/NonSquareOperatorException.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.linear;\n+\n+import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n+\n+/**\n+ * Exception to be thrown when a square linear operator is expected.\n+ *\n+ * @since 3.0\n+ * @version $Id$\n+ */\n+public class NonSquareOperatorException extends DimensionMismatchException {\n+    /** Serializable version Id. */\n+    private static final long serialVersionUID = -4145007524150846242L;\n+\n+    /**\n+     * Construct an exception from the mismatched dimensions.\n+     *\n+     * @param wrong Row dimension.\n+     * @param expected Column dimension.\n+     */\n+    public NonSquareOperatorException(int wrong, int expected) {\n+        super(LocalizedFormats.NON_SQUARE_OPERATOR, wrong, expected);\n+    }\n+}\n--- a/src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java\n+++ b/src/main/java/org/apache/commons/math/linear/PreconditionedIterativeLinearSolver.java\n      * @param x0 Initial guess of the solution.\n      * @return A new vector containing the solution.\n      * @throws NullArgumentException if one of the parameters is {@code null}.\n-     * @throws NonSquareLinearOperatorException if {@code a} or {@code m} is not\n+     * @throws NonSquareOperatorException if {@code a} or {@code m} is not\n      * square.\n      * @throws DimensionMismatchException if {@code m}, {@code b} or {@code x0}\n      * have dimensions inconsistent with {@code a}.\n     public RealVector solve(final RealLinearOperator a,\n                             final InvertibleRealLinearOperator m,\n                             final RealVector b, final RealVector x0)\n-        throws NullArgumentException, NonSquareLinearOperatorException,\n+        throws NullArgumentException, NonSquareOperatorException,\n         DimensionMismatchException, MaxCountExceededException {\n         MathUtils.checkNotNull(x0);\n         return solveInPlace(a, m, b, x0.copy());\n     /** {@inheritDoc} */\n     @Override\n     public RealVector solve(final RealLinearOperator a, final RealVector b)\n-        throws NullArgumentException, NonSquareLinearOperatorException,\n+        throws NullArgumentException, NonSquareOperatorException,\n         DimensionMismatchException, MaxCountExceededException {\n         MathUtils.checkNotNull(a);\n         final RealVector x = new ArrayRealVector(a.getColumnDimension());\n     @Override\n     public RealVector solve(final RealLinearOperator a, final RealVector b,\n                             final RealVector x0)\n-        throws NullArgumentException, NonSquareLinearOperatorException,\n+        throws NullArgumentException, NonSquareOperatorException,\n         DimensionMismatchException, MaxCountExceededException {\n         MathUtils.checkNotNull(x0);\n         return solveInPlace(a, null, b, x0.copy());\n      * @param b Right-hand side vector.\n      * @param x0 Initial guess of the solution.\n      * @throws NullArgumentException if one of the parameters is {@code null}.\n-     * @throws NonSquareLinearOperatorException if {@code a} or {@code m} is not\n+     * @throws NonSquareOperatorException if {@code a} or {@code m} is not\n      * square.\n      * @throws DimensionMismatchException if {@code m}, {@code b} or {@code x0}\n      * have dimensions inconsistent with {@code a}.\n                                           final InvertibleRealLinearOperator m,\n                                           final RealVector b,\n                                           final RealVector x0)\n-        throws NullArgumentException, NonSquareLinearOperatorException,\n+        throws NullArgumentException, NonSquareOperatorException,\n         DimensionMismatchException {\n         checkParameters(a, b, x0);\n         if (m != null) {\n             if (m.getColumnDimension() != m.getRowDimension()) {\n-                throw new NonSquareLinearOperatorException(m.getColumnDimension(),\n+                throw new NonSquareOperatorException(m.getColumnDimension(),\n                                                            m.getRowDimension());\n             }\n             if (m.getRowDimension() != a.getRowDimension()) {\n      * @param b Right-hand side vector.\n      * @return A new vector containing the solution.\n      * @throws NullArgumentException if one of the parameters is {@code null}.\n-     * @throws NonSquareLinearOperatorException if {@code a} or {@code m} is not\n+     * @throws NonSquareOperatorException if {@code a} or {@code m} is not\n      * square.\n      * @throws DimensionMismatchException if {@code m} or {@code b} have\n      * dimensions inconsistent with {@code a}.\n      */\n     public RealVector solve(RealLinearOperator a,\n                             InvertibleRealLinearOperator m, RealVector b)\n-        throws NullArgumentException, NonSquareLinearOperatorException,\n+        throws NullArgumentException, NonSquareOperatorException,\n         DimensionMismatchException, MaxCountExceededException {\n         MathUtils.checkNotNull(a);\n         final RealVector x = new ArrayRealVector(a.getColumnDimension());\n      * @return A reference to {@code x0} (shallow copy) updated with the\n      * solution.\n      * @throws NullArgumentException if one of the parameters is {@code null}.\n-     * @throws NonSquareLinearOperatorException if {@code a} or {@code m} is not\n+     * @throws NonSquareOperatorException if {@code a} or {@code m} is not\n      * square.\n      * @throws DimensionMismatchException if {@code m}, {@code b} or {@code x0}\n      * have dimensions inconsistent with {@code a}.\n     public abstract RealVector solveInPlace(RealLinearOperator a,\n                                             InvertibleRealLinearOperator m,\n                                             RealVector b, RealVector x0)\n-        throws NullArgumentException, NonSquareLinearOperatorException,\n+        throws NullArgumentException, NonSquareOperatorException,\n         DimensionMismatchException, MaxCountExceededException;\n \n     /** {@inheritDoc} */\n     @Override\n     public RealVector solveInPlace(final RealLinearOperator a,\n                                    final RealVector b, final RealVector x0)\n-        throws NullArgumentException, NonSquareLinearOperatorException,\n+        throws NullArgumentException, NonSquareOperatorException,\n         DimensionMismatchException, MaxCountExceededException {\n         return solveInPlace(a, null, b, x0);\n     }\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/linear/SingularOperatorException.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.linear;\n+\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n+\n+/**\n+ * Exception to be thrown when trying to invert a singular operator.\n+ *\n+ * @version $Id$\n+ * @since 3.0\n+ */\n+public class SingularOperatorException\n+    extends MathIllegalArgumentException {\n+    /** Serializable version Id. */\n+    private static final long serialVersionUID = -476049978595245033L;\n+\n+    /**\n+     * Creates a new instance of this class.\n+     */\n+    public SingularOperatorException() {\n+        super(LocalizedFormats.SINGULAR_OPERATOR);\n+    }\n+}\n--- a/src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/ConjugateGradientTest.java\n \n public class ConjugateGradientTest {\n \n-    @Test(expected = NonSquareLinearOperatorException.class)\n+    @Test(expected = NonSquareOperatorException.class)\n     public void testNonSquareOperator() {\n         final Array2DRowRealMatrix a = new Array2DRowRealMatrix(2, 3);\n         final IterativeLinearSolver solver;\n         solver.solve(a, b, x);\n     }\n \n-    @Test(expected = NonPositiveDefiniteLinearOperatorException.class)\n+    @Test(expected = NonPositiveDefiniteOperatorException.class)\n     public void testNonPositiveDefiniteLinearOperator() {\n         final Array2DRowRealMatrix a = new Array2DRowRealMatrix(2, 2);\n         a.setEntry(0, 0, -1.);\n         }\n     }\n \n-    @Test(expected = NonSquareLinearOperatorException.class)\n+    @Test(expected = NonSquareOperatorException.class)\n     public void testNonSquarePreconditioner() {\n         final Array2DRowRealMatrix a = new Array2DRowRealMatrix(2, 2);\n         final InvertibleRealLinearOperator m;\n         solver.solve(a, m, b);\n     }\n \n-    @Test(expected = NonPositiveDefiniteLinearOperatorException.class)\n+    @Test(expected = NonPositiveDefiniteOperatorException.class)\n     public void testNonPositiveDefinitePreconditioner() {\n         final Array2DRowRealMatrix a = new Array2DRowRealMatrix(2, 2);\n         a.setEntry(0, 0, 1d);", "timestamp": 1317623601, "metainfo": ""}