{"sha": "a3005935cf33909c1d2ca50461f276df2308e0ff", "log": "replaced matrix by vector where possible  ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java\n \n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.linear.RealMatrixImpl;\n+import org.apache.commons.math.linear.RealVector;\n import org.apache.commons.math.linear.decomposition.LUDecompositionImpl;\n \n \n      * @return beta\n      */\n     @Override\n-    protected RealMatrix calculateBeta() {\n+    protected RealVector calculateBeta() {\n         RealMatrix OI = getOmegaInverse();\n         RealMatrix XT = X.transpose();\n         RealMatrix XTOIX = XT.multiply(OI).multiply(X);\n         RealMatrix inverse = new LUDecompositionImpl(XTOIX).getSolver().getInverse();\n-        return inverse.multiply(XT).multiply(OI).multiply(Y);\n+        return inverse.multiply(XT).multiply(OI).operate(Y);\n     }\n \n     /**\n      */\n     @Override\n     protected double calculateYVariance() {\n-        RealMatrix u = calculateResiduals();\n-        RealMatrix sse =  u.transpose().multiply(getOmegaInverse()).multiply(u);\n-        return sse.getTrace()/(X.getRowDimension()-X.getColumnDimension());\n+        RealVector residuals = calculateResiduals();\n+        double t = residuals.dotProduct(getOmegaInverse().operate(residuals));\n+        return t / (X.getRowDimension() - X.getColumnDimension());\n     }\n     \n }\n--- a/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java\n \n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.linear.RealMatrixImpl;\n+import org.apache.commons.math.linear.RealVector;\n+import org.apache.commons.math.linear.RealVectorImpl;\n import org.apache.commons.math.linear.decomposition.LUDecompositionImpl;\n import org.apache.commons.math.linear.decomposition.QRDecomposition;\n import org.apache.commons.math.linear.decomposition.QRDecompositionImpl;\n      * @return beta\n      */\n     @Override\n-    protected RealMatrix calculateBeta() {\n-        return solveUpperTriangular(qr.getR(), qr.getQ().transpose().multiply(Y));\n+    protected RealVector calculateBeta() {\n+        return solveUpperTriangular(qr.getR(), qr.getQ().transpose().operate(Y));\n     }\n \n     /**\n      */\n     @Override\n     protected double calculateYVariance() {\n-        RealMatrix u = calculateResiduals();\n-        RealMatrix sse = u.transpose().multiply(u);\n-        return sse.getTrace()/(X.getRowDimension()-X.getColumnDimension());\n+        RealVector residuals = calculateResiduals();\n+        return residuals.dotProduct(residuals) /\n+               (X.getRowDimension() - X.getColumnDimension());\n     }\n     \n     /** TODO:  Find a home for the following methods in the linear package */   \n      * Similarly, extra (zero) rows in coefficients are ignored</p>\n      * \n      * @param coefficients upper-triangular coefficients matrix\n-     * @param constants column RHS constants matrix\n-     * @return solution matrix as a column matrix\n-     * \n-     */\n-    private static RealMatrix solveUpperTriangular(RealMatrix coefficients,\n-            RealMatrix constants) {\n+     * @param constants column RHS constants vector\n+     * @return solution matrix as a column vector\n+     * \n+     */\n+    private static RealVector solveUpperTriangular(RealMatrix coefficients,\n+                                                   RealVector constants) {\n         if (!isUpperTriangular(coefficients, 1E-12)) {\n             throw new IllegalArgumentException(\n                    \"Coefficients is not upper-triangular\");\n-        }\n-        if (constants.getColumnDimension() != 1) {\n-            throw new IllegalArgumentException(\n-                    \"Constants not a column matrix.\");\n         }\n         int length = coefficients.getColumnDimension();\n         double x[] = new double[length];\n             for (int j = index + 1; j < length; j++) {\n                 sum += coefficients.getEntry(index, j) * x[j];\n             }\n-            x[index] = (constants.getEntry(index, 0) - sum) / coefficients.getEntry(index, index);\n+            x[index] = (constants.getEntry(index) - sum) / coefficients.getEntry(index, index);\n         } \n-        return new RealMatrixImpl(x);\n+        return new RealVectorImpl(x);\n     }\n     \n     /**\n--- a/src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java\n+++ b/src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java\n           new double[]{-3482258.63459582, 15.0618722713733,\n                 -0.358191792925910E-01,-2.02022980381683,\n                 -1.03322686717359,-0.511041056535807E-01,\n-                 1829.15146461355}, 1E-8); // \n+                 1829.15146461355}, 2E-8); // \n         \n         // Check expected residuals from R\n         double[] residuals = model.estimateResiduals();\n          */\n         double[] residuals = model.estimateResiduals();\n         RealMatrix I = MatrixUtils.createRealIdentityMatrix(10);\n-        double[] hatResiduals = I.subtract(hat).multiply(model.Y).getColumn(0);\n+        double[] hatResiduals = I.subtract(hat).operate(model.Y).getData();\n         TestUtils.assertEquals(residuals, hatResiduals, 10e-12);    \n     }\n }", "timestamp": 1241602813, "metainfo": ""}