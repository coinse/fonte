{"sha": "8eb9048c694b2d602a8a78e6ffb76b2a362c0f64", "log": "MATH-795: factored out testDataInOut().   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.MathArithmeticException;\n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n-import org.apache.commons.math3.exception.OutOfRangeException;\n import org.apache.commons.math3.util.FastMath;\n import org.junit.Assert;\n import org.junit.Test;\n  * @version $Id$\n  */\n public class ArrayRealVectorTest extends RealVectorAbstractTest {\n-\n-    //\n-    protected double[][] ma1 = {{1d, 2d, 3d}, {4d, 5d, 6d}, {7d, 8d, 9d}};\n-    protected double[] vec1 = {1d, 2d, 3d};\n-    protected double[] vec2 = {4d, 5d, 6d};\n-    protected double[] vec3 = {7d, 8d, 9d};\n-    protected double[] vec4 = {1d, 2d, 3d, 4d, 5d, 6d, 7d, 8d, 9d};\n-    protected double[] vec5 = { -4d, 0d, 3d, 1d, -6d, 3d};\n-    protected double[] vec_null = {0d, 0d, 0d};\n-    protected Double[] dvec1 = {1d, 2d, 3d, 4d, 5d, 6d, 7d, 8d, 9d};\n-    protected double[][] mat1 = {{1d, 2d, 3d}, {4d, 5d, 6d},{ 7d, 8d, 9d}};\n-\n     // tolerances\n     protected double entryTolerance = 10E-16;\n     protected double normTolerance = 10E-14;\n \n     }\n \n+    @Override\n     @Test\n     public void testDataInOut() {\n+        super.testDataInOut();\n \n         ArrayRealVector v1 = new ArrayRealVector(vec1);\n-        ArrayRealVector v2 = new ArrayRealVector(vec2);\n-        ArrayRealVector v4 = new ArrayRealVector(vec4);\n-        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n-\n-        RealVector v_append_1 = v1.append(v2);\n-        Assert.assertEquals(\"testData len\", 6, v_append_1.getDimension());\n-        Assert.assertEquals(\"testData is 4.0 \", 4.0, v_append_1.getEntry(3), 0);\n-\n-        RealVector v_append_2 = v1.append(2.0);\n-        Assert.assertEquals(\"testData len\", 4, v_append_2.getDimension());\n-        Assert.assertEquals(\"testData is 2.0 \", 2.0, v_append_2.getEntry(3), 0);\n-\n-        RealVector v_append_4 = v1.append(v2_t);\n-        Assert.assertEquals(\"testData len\", 6, v_append_4.getDimension());\n-        Assert.assertEquals(\"testData is 4.0 \", 4.0, v_append_4.getEntry(3), 0);\n-\n-        RealVector v_append_5 = v1.append((RealVector) v2);\n-        Assert.assertEquals(\"testData len\", 6, v_append_5.getDimension());\n-        Assert.assertEquals(\"testData is 4.0 \", 4.0, v_append_5.getEntry(3), 0);\n \n         RealVector v_copy = v1.copy();\n         Assert.assertEquals(\"testData len\", 3, v_copy.getDimension());\n         double[] a_double = v1.toArray();\n         Assert.assertEquals(\"testData len\", 3, a_double.length);\n         Assert.assertNotSame(\"testData not same object \", v1.getDataRef(), a_double);\n-\n-\n-//      ArrayRealVector vout4 = (ArrayRealVector) v1.clone();\n-//      Assert.assertEquals(\"testData len\", 3, vout4.getDimension());\n-//      Assert.assertEquals(\"testData not same object \", v1.getDataRef(), vout4.getDataRef());\n-\n-\n-        RealVector vout5 = v4.getSubVector(3, 3);\n-        Assert.assertEquals(\"testData len\", 3, vout5.getDimension());\n-        Assert.assertEquals(\"testData is 4.0 \", 5.0, vout5.getEntry(1), 0);\n-        try {\n-            v4.getSubVector(3, 7);\n-            Assert.fail(\"OutOfRangeException expected\");\n-        } catch (OutOfRangeException ex) {\n-            // expected behavior\n-        }\n-\n-        ArrayRealVector v_set1 = v1.copy();\n-        v_set1.setEntry(1, 11.0);\n-        Assert.assertEquals(\"testData is 11.0 \", 11.0, v_set1.getEntry(1), 0);\n-        try {\n-            v_set1.setEntry(3, 11.0);\n-            Assert.fail(\"OutOfRangeException expected\");\n-        } catch (OutOfRangeException ex) {\n-            // expected behavior\n-        }\n-\n-        ArrayRealVector v_set3 = v1.copy();\n-        v_set3.set(13.0);\n-        Assert.assertEquals(\"testData is 13.0 \", 13.0, v_set3.getEntry(2), 0);\n-\n-        try {\n-            v_set3.getEntry(23);\n-            Assert.fail(\"ArrayIndexOutOfBoundsException expected\");\n-        } catch (ArrayIndexOutOfBoundsException ex) {\n-            // expected behavior\n-        }\n-\n-        ArrayRealVector v_set4 = v4.copy();\n-        v_set4.setSubVector(3, v2_t);\n-        Assert.assertEquals(\"testData is 1.0 \", 4.0, v_set4.getEntry(3), 0);\n-        Assert.assertEquals(\"testData is 7.0 \", 7.0, v_set4.getEntry(6), 0);\n-        try {\n-            v_set4.setSubVector(7, v2_t);\n-            Assert.fail(\"OutOfRangeException expected\");\n-        } catch (OutOfRangeException ex) {\n-            // expected behavior\n-        }\n-\n-\n-        ArrayRealVector vout10 = v1.copy();\n-        ArrayRealVector vout10_2 = v1.copy();\n-        Assert.assertEquals(vout10, vout10_2);\n-        vout10_2.setEntry(0, 1.1);\n-        Assert.assertNotSame(vout10, vout10_2);\n-\n     }\n \n     @Test\n     public RealVector create(final double[] data) {\n         return new ArrayRealVector(data, true);\n     }\n+\n+    @Override\n+    public RealVector createAlien(double[] data) {\n+        return new RealVectorTestImpl(data);\n+    }\n }\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n \n \n public abstract class RealVectorAbstractTest {\n-\n+    /**\n+     * Creates a new instance of {@link RealVector}, with specified entries.\n+     * The returned vector must be of the type currently tested.\n+     *\n+     * @param data the entries of the vector to be created\n+     * @return a new {@link RealVector} of the type to be tested\n+     */\n     public abstract RealVector create(double[] data);\n+\n+    /**\n+     * Creates a new instance of {@link RealVector}, with specified entries.\n+     * The type of the returned vector must be different from the type currently\n+     * tested.\n+     *\n+     * @param data the entries of the vector to be created\n+     * @return a new {@link RealVector} of an alien type\n+     */\n+    public abstract RealVector createAlien(double[] data);\n+\n+    protected double[][] ma1 = {{1d, 2d, 3d}, {4d, 5d, 6d}, {7d, 8d, 9d}};\n+    protected double[] vec1 = {1d, 2d, 3d};\n+    protected double[] vec2 = {4d, 5d, 6d};\n+    protected double[] vec3 = {7d, 8d, 9d};\n+    protected double[] vec4 = {1d, 2d, 3d, 4d, 5d, 6d, 7d, 8d, 9d};\n+    protected double[] vec5 = { -4d, 0d, 3d, 1d, -6d, 3d};\n+    protected double[] vec_null = {0d, 0d, 0d};\n+    protected Double[] dvec1 = {1d, 2d, 3d, 4d, 5d, 6d, 7d, 8d, 9d};\n+    protected double[][] mat1 = {{1d, 2d, 3d}, {4d, 5d, 6d},{ 7d, 8d, 9d}};\n+\n+    @Test\n+    public void testDataInOut() {\n+        final RealVector v1 = create(vec1);\n+        final RealVector v2 = create(vec2);\n+        final RealVector v4 = create(vec4);\n+        final RealVector v2_t = createAlien(vec2);\n+\n+        final RealVector v_append_1 = v1.append(v2);\n+        Assert.assertEquals(\"testData len\", 6, v_append_1.getDimension());\n+        Assert.assertEquals(\"testData is 4.0 \", 4.0, v_append_1.getEntry(3), 0);\n+\n+        final RealVector v_append_2 = v1.append(2.0);\n+        Assert.assertEquals(\"testData len\", 4, v_append_2.getDimension());\n+        Assert.assertEquals(\"testData is 2.0 \", 2.0, v_append_2.getEntry(3), 0);\n+\n+        final RealVector v_append_4 = v1.append(v2_t);\n+        Assert.assertEquals(\"testData len\", 6, v_append_4.getDimension());\n+        Assert.assertEquals(\"testData is 4.0 \", 4.0, v_append_4.getEntry(3), 0);\n+\n+        final RealVector v_append_5 = v1.append(v2);\n+        Assert.assertEquals(\"testData len\", 6, v_append_5.getDimension());\n+        Assert.assertEquals(\"testData is 4.0 \", 4.0, v_append_5.getEntry(3), 0);\n+\n+        final RealVector vout5 = v4.getSubVector(3, 3);\n+        Assert.assertEquals(\"testData len\", 3, vout5.getDimension());\n+        Assert.assertEquals(\"testData is 4.0 \", 5.0, vout5.getEntry(1), 0);\n+        try {\n+            v4.getSubVector(3, 7);\n+            Assert.fail(\"OutOfRangeException expected\");\n+        } catch (OutOfRangeException ex) {\n+            // expected behavior\n+        }\n+\n+        final RealVector v_set1 = v1.copy();\n+        v_set1.setEntry(1, 11.0);\n+        Assert.assertEquals(\"testData is 11.0 \", 11.0, v_set1.getEntry(1), 0);\n+        try {\n+            v_set1.setEntry(3, 11.0);\n+            Assert.fail(\"OutOfRangeException expected\");\n+        } catch (OutOfRangeException ex) {\n+            // expected behavior\n+        }\n+\n+        final RealVector v_set2 = v4.copy();\n+        v_set2.setSubVector(3, v1);\n+        Assert.assertEquals(\"testData is 1.0 \", 1.0, v_set2.getEntry(3), 0);\n+        Assert.assertEquals(\"testData is 7.0 \", 7.0, v_set2.getEntry(6), 0);\n+        try {\n+            v_set2.setSubVector(7, v1);\n+            Assert.fail(\"OutOfRangeException expected\");\n+        } catch (OutOfRangeException ex) {\n+            // expected behavior\n+        }\n+\n+        final RealVector v_set3 = v1.copy();\n+        v_set3.set(13.0);\n+        Assert.assertEquals(\"testData is 13.0 \", 13.0, v_set3.getEntry(2), 0);\n+\n+        try {\n+            v_set3.getEntry(23);\n+            Assert.fail(\"OutOfRangeException expected\");\n+        } catch (OutOfRangeException ex) {\n+            // expected behavior\n+        }\n+\n+        final RealVector v_set4 = v4.copy();\n+        v_set4.setSubVector(3, v2_t);\n+        Assert.assertEquals(\"testData is 1.0 \", 4.0, v_set4.getEntry(3), 0);\n+        Assert.assertEquals(\"testData is 7.0 \", 7.0, v_set4.getEntry(6), 0);\n+        try {\n+            v_set4.setSubVector(7, v2_t);\n+            Assert.fail(\"OutOfRangeException expected\");\n+        } catch (OutOfRangeException ex) {\n+            // expected behavior\n+        }\n+\n+        final RealVector vout10 = v1.copy();\n+        final RealVector vout10_2 = v1.copy();\n+        Assert.assertEquals(vout10, vout10_2);\n+        vout10_2.setEntry(0, 1.1);\n+        Assert.assertNotSame(vout10, vout10_2);\n+    }\n+\n+    /*\n+     * TESTS OF THE VISITOR PATTERN\n+     */\n \n     /** The whole vector is visited. */\n     @Test\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n     public RealVector create(final double[] data) {\n         return new OpenMapRealVector(data);\n     }\n+\n+    @Override\n+    public RealVector createAlien(double[] data) {\n+        return new TestVectorImpl(data);\n+    }\n }\n--- a/src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java\n import org.apache.commons.math3.util.FastMath;\n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n import org.apache.commons.math3.exception.MathArithmeticException;\n-import org.apache.commons.math3.exception.OutOfRangeException;\n import org.apache.commons.math3.analysis.function.Abs;\n import org.apache.commons.math3.analysis.function.Acos;\n import org.apache.commons.math3.analysis.function.Asin;\n  */\n public class SparseRealVectorTest extends RealVectorAbstractTest {\n \n-    //\n-    protected double[][] ma1 = {{1d, 2d, 3d}, {4d, 5d, 6d}, {7d, 8d, 9d}};\n-    protected double[] vec1 = {1d, 2d, 3d};\n-    protected double[] vec2 = {4d, 5d, 6d};\n-    protected double[] vec3 = {7d, 8d, 9d};\n-    protected double[] vec4 = {1d, 2d, 3d, 4d, 5d, 6d, 7d, 8d, 9d};\n-    protected double[] vec5 = { -4d, 0d, 3d, 1d, -6d, 3d};\n-    protected double[] vec_null = {0d, 0d, 0d};\n-    protected Double[] dvec1 = {1d, 2d, 3d, 4d, 5d, 6d, 7d, 8d, 9d};\n-    protected double[][] mat1 = {{1d, 2d, 3d}, {4d, 5d, 6d},{ 7d, 8d, 9d}};\n-\n     // tolerances\n     protected double entryTolerance = 10E-16;\n     protected double normTolerance = 10E-14;\n     }\n \n     @Test\n-    public void testDataInOut() {\n-\n-        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n-        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n-        OpenMapRealVector v4 = new OpenMapRealVector(vec4);\n-        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n-\n-        RealVector v_append_1 = v1.append(v2);\n-        Assert.assertEquals(\"testData len\", 6, v_append_1.getDimension());\n-        Assert.assertEquals(\"testData is 4.0 \", 4.0, v_append_1.getEntry(3), 0);\n-\n-        RealVector v_append_2 = v1.append(2.0);\n-        Assert.assertEquals(\"testData len\", 4, v_append_2.getDimension());\n-        Assert.assertEquals(\"testData is 2.0 \", 2.0, v_append_2.getEntry(3), 0);\n-\n-        RealVector v_append_4 = v1.append(v2_t);\n-        Assert.assertEquals(\"testData len\", 6, v_append_4.getDimension());\n-        Assert.assertEquals(\"testData is 4.0 \", 4.0, v_append_4.getEntry(3), 0);\n-\n-        RealVector vout5 = v4.getSubVector(3, 3);\n-        Assert.assertEquals(\"testData len\", 3, vout5.getDimension());\n-        Assert.assertEquals(\"testData is 4.0 \", 5.0, vout5.getEntry(1), 0);\n-        try {\n-            v4.getSubVector(3, 7);\n-            Assert.fail(\"OutOfRangeException expected\");\n-        } catch (OutOfRangeException ex) {\n-            // expected behavior\n-        }\n-\n-        OpenMapRealVector v_set1 = v1.copy();\n-        v_set1.setEntry(1, 11.0);\n-        Assert.assertEquals(\"testData is 11.0 \", 11.0, v_set1.getEntry(1), 0);\n-        try {\n-            v_set1.setEntry(3, 11.0);\n-            Assert.fail(\"OutOfRangeException expected\");\n-        } catch (OutOfRangeException ex) {\n-            // expected behavior\n-        }\n-\n-        OpenMapRealVector v_set2 = v4.copy();\n-        v_set2.setSubVector(3, v1);\n-        Assert.assertEquals(\"testData is 1.0 \", 1.0, v_set2.getEntry(3), 0);\n-        Assert.assertEquals(\"testData is 7.0 \", 7.0, v_set2.getEntry(6), 0);\n-        try {\n-            v_set2.setSubVector(7, v1);\n-            Assert.fail(\"OutOfRangeException expected\");\n-        } catch (OutOfRangeException ex) {\n-            // expected behavior\n-        }\n-\n-        OpenMapRealVector v_set3 = v1.copy();\n-        v_set3.set(13.0);\n-        Assert.assertEquals(\"testData is 13.0 \", 13.0, v_set3.getEntry(2), 0);\n-\n-        try {\n-            v_set3.getEntry(23);\n-            Assert.fail(\"OutOfRangeException expected\");\n-        } catch (OutOfRangeException ex) {\n-            // expected behavior\n-        }\n-\n-        OpenMapRealVector v_set4 = v4.copy();\n-        v_set4.setSubVector(3, v2_t);\n-        Assert.assertEquals(\"testData is 1.0 \", 4.0, v_set4.getEntry(3), 0);\n-        Assert.assertEquals(\"testData is 7.0 \", 7.0, v_set4.getEntry(6), 0);\n-        try {\n-            v_set4.setSubVector(7, v2_t);\n-            Assert.fail(\"OutOfRangeException expected\");\n-        } catch (OutOfRangeException ex) {\n-            // expected behavior\n-        }\n-\n-\n-    }\n-\n-    @Test\n     public void testMapFunctions() {\n         OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n \n     public RealVector create(double[] data) {\n         return new OpenMapRealVector(data);\n     }\n+\n+    @Override\n+    public RealVector createAlien(double[] data) {\n+        return new SparseRealVectorTestImpl(data);\n+    }\n }", "timestamp": 1338443476, "metainfo": ""}