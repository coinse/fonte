{"sha": "d2c3198c09ff2167abaccf3110f1e9d3f84aa3c6", "log": "Merged RectangularCholeskyDecomposition and RectangularCholeskyDecompositionImpl (see MATH-662).  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java\n+++ b/src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java\n \n package org.apache.commons.math.linear;\n \n+import org.apache.commons.math.util.FastMath;\n \n /**\n- * An interface to classes that implement an algorithm to calculate a\n- * rectangular variation of Cholesky decomposition of a real symmetric\n- * positive semidefinite matrix.\n+ * Calculates the rectangular Cholesky decomposition of a matrix.\n  * <p>The rectangular Cholesky decomposition of a real symmetric positive\n  * semidefinite matrix A consists of a rectangular matrix B with the same\n  * number of rows such that: A is almost equal to BB<sup>T</sup>, depending\n  * linear systems, so it does not provide any {@link DecompositionSolver\n  * decomposition solver}.</p>\n  *\n- * @see CholeskyDecomposition\n- * @see org.apache.commons.math.random.CorrelatedRandomVectorGenerator\n+ * @see <a href=\"http://mathworld.wolfram.com/CholeskyDecomposition.html\">MathWorld</a>\n+ * @see <a href=\"http://en.wikipedia.org/wiki/Cholesky_decomposition\">Wikipedia</a>\n  * @version $Id$\n- * @since 3.0\n+ * @since 2.0 (changed to concrete class in 3.0)\n  */\n-public interface RectangularCholeskyDecomposition {\n+public class RectangularCholeskyDecomposition {\n+\n+    /** Permutated Cholesky root of the symmetric positive semidefinite matrix. */\n+    private final RealMatrix root;\n+\n+    /** Rank of the symmetric positive semidefinite matrix. */\n+    private int rank;\n+\n+    /**\n+     * Decompose a symmetric positive semidefinite matrix.\n+     *\n+     * @param matrix Symmetric positive semidefinite matrix.\n+     * @param small Diagonal elements threshold under which  column are\n+     * considered to be dependent on previous ones and are discarded.\n+     * @exception NonPositiveDefiniteMatrixException if the matrix is not\n+     * positive semidefinite.\n+     */\n+    public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n+        throws NonPositiveDefiniteMatrixException {\n+\n+        int order = matrix.getRowDimension();\n+        double[][] c = matrix.getData();\n+        double[][] b = new double[order][order];\n+\n+        int[] swap  = new int[order];\n+        int[] index = new int[order];\n+        for (int i = 0; i < order; ++i) {\n+            index[i] = i;\n+        }\n+\n+        int r = 0;\n+        for (boolean loop = true; loop;) {\n+\n+            // find maximal diagonal element\n+            swap[r] = r;\n+            for (int i = r + 1; i < order; ++i) {\n+                int ii  = index[i];\n+                int isi = index[swap[i]];\n+                if (c[ii][ii] > c[isi][isi]) {\n+                    swap[r] = i;\n+                }\n+            }\n+\n+\n+            // swap elements\n+            if (swap[r] != r) {\n+                int tmp = index[r];\n+                index[r] = index[swap[r]];\n+                index[swap[r]] = tmp;\n+            }\n+\n+            // check diagonal element\n+            int ir = index[r];\n+            if (c[ir][ir] < small) {\n+\n+                if (r == 0) {\n+                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);\n+                }\n+\n+                // check remaining diagonal elements\n+                for (int i = r; i < order; ++i) {\n+                    if (c[index[i]][index[i]] < -small) {\n+                        // there is at least one sufficiently negative diagonal element,\n+                        // the symmetric positive semidefinite matrix is wrong\n+                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);\n+                    }\n+                }\n+\n+                // all remaining diagonal elements are close to zero, we consider we have\n+                // found the rank of the symmetric positive semidefinite matrix\n+                ++r;\n+                loop = false;\n+\n+            } else {\n+\n+                // transform the matrix\n+                double sqrt = FastMath.sqrt(c[ir][ir]);\n+                b[r][r] = sqrt;\n+                double inverse = 1 / sqrt;\n+                for (int i = r + 1; i < order; ++i) {\n+                    int ii = index[i];\n+                    double e = inverse * c[ii][ir];\n+                    b[i][r] = e;\n+                    c[ii][ii] -= e * e;\n+                    for (int j = r + 1; j < i; ++j) {\n+                        int ij = index[j];\n+                        double f = c[ii][ij] - e * b[j][r];\n+                        c[ii][ij] = f;\n+                        c[ij][ii] = f;\n+                    }\n+                }\n+\n+                // prepare next iteration\n+                loop = ++r < order;\n+            }\n+        }\n+\n+        // build the root matrix\n+        rank = r;\n+        root = MatrixUtils.createRealMatrix(order, r);\n+        for (int i = 0; i < order; ++i) {\n+            for (int j = 0; j < r; ++j) {\n+                root.setEntry(index[i], j, b[i][j]);\n+            }\n+        }\n+\n+    }\n \n     /** Get the root of the covariance matrix.\n      * The root is the rectangular matrix <code>B</code> such that\n      * @return root of the square matrix\n      * @see #getRank()\n      */\n-    RealMatrix getRootMatrix();\n+    public RealMatrix getRootMatrix() {\n+        return root;\n+    }\n \n     /** Get the rank of the symmetric positive semidefinite matrix.\n      * The r is the number of independent rows in the symmetric positive semidefinite\n      * @return r of the square matrix.\n      * @see #getRootMatrix()\n      */\n-    int getRank();\n+    public int getRank() {\n+        return rank;\n+    }\n \n }\n--- a/src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java\n+++ b/src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.linear.RectangularCholeskyDecomposition;\n-import org.apache.commons.math.linear.RectangularCholeskyDecompositionImpl;\n \n /**\n  * A {@link RandomVectorGenerator} that generates vectors with with\n         this.mean = mean.clone();\n \n         final RectangularCholeskyDecomposition decomposition =\n-            new RectangularCholeskyDecompositionImpl(covariance, small);\n+            new RectangularCholeskyDecomposition(covariance, small);\n         root = decomposition.getRootMatrix();\n \n         this.generator = generator;\n         }\n \n         final RectangularCholeskyDecomposition decomposition =\n-            new RectangularCholeskyDecompositionImpl(covariance, small);\n+            new RectangularCholeskyDecomposition(covariance, small);\n         root = decomposition.getRootMatrix();\n \n         this.generator = generator;", "timestamp": 1316840068, "metainfo": ""}