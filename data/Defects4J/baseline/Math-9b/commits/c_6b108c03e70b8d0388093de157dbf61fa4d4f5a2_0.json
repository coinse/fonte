{"sha": "6b108c03e70b8d0388093de157dbf61fa4d4f5a2", "log": "Clarified javadoc, added tests. JIRA: MATH-258  ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n  * i.e. <code>addValue(Long.valueOf(2)), addValue(2), addValue(2l)</code> all have\n  * the same effect (similarly for arguments to <code>getCount,</code> etc.).</p>\n  * <p>\n+ * char values are converted by <code>addValue</code> to Character instances.\n+ * As such, these values are not comparable to integral values, so attempts\n+ * to combine integral types with chars in a frequency distribution will fail.\n+ * </p>\n+ * <p>\n  * The values are ordered using the default (natural order), unless a  \n  * <code>Comparator</code> is supplied in the constructor.</p>\n  *\n \n     /**\n      * Adds 1 to the frequency count for v.\n+     * <p>\n+     * If other objects have already been added to this Frequency, v must\n+     * be comparable to those that have already been added.\n+     * </p>\n      * \n      * @param v the value to add.\n      * @throws IllegalArgumentException if <code>v</code> is not comparable.\n--- a/src/test/org/apache/commons/math/stat/FrequencyTest.java\n+++ b/src/test/org/apache/commons/math/stat/FrequencyTest.java\n         } catch (IllegalArgumentException ex) {\n             // expected\n         }\n+        try {\n+            f.addValue(2);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n         assertEquals(\"a pct\",0.5,f.getPct(aChar),tolerance);\n         assertEquals(\"b cum pct\",1.0,f.getCumPct(bChar),tolerance);\n         assertEquals(\"a string pct\",0.0,f.getPct(aString),tolerance);\n         assertEquals(\"a string cum pct\",0.0,f.getCumPct(aString),tolerance);\n+        \n+        f = new Frequency();\n+        f.addValue(\"One\");\n+        try {\n+            f.addValue(new Integer(\"One\")); \n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n     }\n     \n     /** test empty table */", "timestamp": 1239564791, "metainfo": ""}