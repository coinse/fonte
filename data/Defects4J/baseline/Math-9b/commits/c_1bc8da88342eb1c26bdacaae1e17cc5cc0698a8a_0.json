{"sha": "1bc8da88342eb1c26bdacaae1e17cc5cc0698a8a", "log": "Changed Poisson consistency test to use a fixed seed.  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/random/RandomDataTest.java\n+++ b/src/test/java/org/apache/commons/math/random/RandomDataTest.java\n \n     /**\n      * Make sure that empirical distribution of random Poisson(4)'s has P(X <=\n-     * 5) close to actual cumulative Poisson probablity and that nextPoisson\n+     * 5) close to actual cumulative Poisson probability and that nextPoisson\n      * fails when mean is non-positive TODO: replace with statistical test,\n      * adding test stat to TestStatistic\n      */\n      * to the corresponding expected distribution computed using PoissonDistributionImpl.\n      * Uses ChiSquare test of goodness of fit to evaluate the null hypothesis that the\n      * distributions are the same. If the null hypothesis can be rejected with confidence\n-     * 1 - alpha, the check fails.  This check will fail randomly with probability alpha.\n+     * 1 - alpha, the check fails.\n      */\n     public void checkNextPoissonConsistency(double mean) throws Exception {\n         // Generate sample values\n-        int sampleSize = 1000;        // Number of deviates to generate\n-        int minExpectedCount = 7;     // Minimum size of expected bin count\n+        final int sampleSize = 1000;        // Number of deviates to generate\n+        final int minExpectedCount = 7;     // Minimum size of expected bin count\n         long maxObservedValue = 0;\n-        double alpha = 0.001;         // Probability of false failure\n+        final double alpha = 0.001;         // Probability of false failure\n+        randomData.reSeed(1000);            // Reseed randomGenerator to get fixed sequence\n         Frequency frequency = new Frequency();\n         for (int i = 0; i < sampleSize; i++) {\n             long value = randomData.nextPoisson(mean);", "timestamp": 1275257251, "metainfo": ""}