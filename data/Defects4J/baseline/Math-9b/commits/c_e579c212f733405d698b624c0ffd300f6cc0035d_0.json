{"sha": "e579c212f733405d698b624c0ffd300f6cc0035d", "log": "Added the initi method also to FixedStepHandler.  Jira: MATH-714  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java\n+++ b/src/main/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java\n \n public interface FixedStepHandler  {\n \n+  /** Initialize step handler at the start of an ODE integration.\n+   * <p>\n+   * This method is called once at the start of the integration. It\n+   * may be used by the step handler to initialize some internal data\n+   * if needed.\n+   * </p>\n+   * @param t0 start value of the independent <i>time</i> variable\n+   * @param y0 array containing the start value of the state vector\n+   * @param t target time for the integration\n+   */\n+  void init(double t0, double[] y0, double t);\n+\n   /**\n    * Handle the last accepted step\n    * @param t time of the current step\n--- a/src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java\n+++ b/src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java\n \n     /** {@inheritDoc} */\n     public void init(double t0, double[] y0, double t) {\n+\n         firstTime       = Double.NaN;\n         lastTime        = Double.NaN;\n         lastState       = null;\n         lastDerivatives = null;\n         forward         = true;\n+\n+        // initialize the underlying handler\n+        handler.init(t0, y0, t);\n+\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java\n+++ b/src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java\n \n /** Base class for step normalizer output tests. */\n public abstract class StepNormalizerOutputTestBase\n-    implements FirstOrderDifferentialEquations, FixedStepHandler\n-{\n+    implements FirstOrderDifferentialEquations, FixedStepHandler {\n+\n     /** The normalized output time values. */\n     private List<Double> output;\n \n     }\n \n     /** {@inheritDoc} */\n+    public void init(double t0, double[] y0, double t) {\n+    }\n+\n+    /** {@inheritDoc} */\n     public void handleStep(double t, double[] y, double[] yDot, boolean isLast) {\n         output.add(t);\n     }\n+\n }\n--- a/src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java\n     setLastSeen(false);\n     integ.addStepHandler(new StepNormalizer(range / 10.0,\n                                        new FixedStepHandler() {\n-                                        private boolean firstCall = true;\n+                                         private boolean firstCall = true;\n+                                         public void init(double t0, double[] y0, double t) {\n+                                         }\n                                          public void handleStep(double t,\n                                                                 double[] y,\n                                                                 double[] yDot,\n     setLastSeen(false);\n     integ.addStepHandler(new StepNormalizer(range / 10.5,\n                                        new FixedStepHandler() {\n-                                        public void handleStep(double t,\n+                                         public void init(double t0, double[] y0, double t) {\n+                                         }\n+                                         public void handleStep(double t,\n                                                                 double[] y,\n                                                                 double[] yDot,\n                                                                 boolean isLast) {", "timestamp": 1322477790, "metainfo": ""}