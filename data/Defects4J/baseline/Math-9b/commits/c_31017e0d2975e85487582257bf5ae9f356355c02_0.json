{"sha": "31017e0d2975e85487582257bf5ae9f356355c02", "log": "Javadoc fixes.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java\n  * Legendre-Gauss</a> quadrature formula.\n  * <p>\n  * Legendre-Gauss integrators are efficient integrators that can\n- * accurately integrate functions with few functions evaluations. A\n+ * accurately integrate functions with few function evaluations. A\n  * Legendre-Gauss integrator using an n-points quadrature formula can\n- * integrate exactly 2n-1 degree polynomialss.\n+ * integrate 2n-1 degree polynomials exactly.\n  * </p>\n  * <p>\n  * These integrators evaluate the function on n carefully chosen\n- * abscissas in each step interval (mapped to the canonical [-1  1] interval).\n+ * abscissas in each step interval (mapped to the canonical [-1,1] interval).\n  * The evaluation abscissas are not evenly spaced and none of them are\n  * at the interval endpoints. This implies the function integrated can be\n  * undefined at integration interval endpoints.\n      * Compute the n-th stage integral.\n      * @param n number of steps\n      * @return the value of n-th stage integral\n-     * @throws TooManyEvaluationsException if the maximal number of evaluations\n+     * @throws TooManyEvaluationsException if the maximum number of evaluations\n      * is exceeded.\n      */\n     private double stage(final int n)\n--- a/src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java\n import org.apache.commons.math.util.FastMath;\n \n /**\n- * Implements the <a href=\"http://mathworld.wolfram.com/SimpsonsRule.html\">\n+ * Implements <a href=\"http://mathworld.wolfram.com/SimpsonsRule.html\">\n  * Simpson's Rule</a> for integration of real univariate functions. For\n  * reference, see <b>Introduction to Numerical Analysis</b>, ISBN 038795452X,\n  * chapter 3.\n  * <p>\n- * This implementation employs basic trapezoid rule as building blocks to\n- * calculate the Simpson's rule of alternating 2/3 and 4/3.</p>\n+ * This implementation employs the basic trapezoid rule to calculate Simpson's\n+ * rule.</p>\n  *\n  * @version $Id$\n  * @since 1.2\n--- a/src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java\n \n /**\n  * Implements the <a href=\"http://mathworld.wolfram.com/TrapezoidalRule.html\">\n- * Trapezoidal Rule</a> for integration of real univariate functions. For\n+ * Trapezoid Rule</a> for integration of real univariate functions. For\n  * reference, see <b>Introduction to Numerical Analysis</b>, ISBN 038795452X,\n  * chapter 3.\n  * <p>\n  */\n public class TrapezoidIntegrator extends UnivariateRealIntegratorImpl {\n \n-    /** Maximal number of iterations for trapezoid. */\n+    /** Maximum number of iterations for trapezoid. */\n     public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;\n \n     /** Intermediate result. */\n      * <p>\n      * The interval is divided equally into 2^n sections rather than an\n      * arbitrary m sections because this configuration can best utilize the\n-     * alrealy computed values.</p>\n+     * already computed values.</p>\n      *\n      * @param baseIntegrator integrator holding integration parameters\n      * @param n the stage of 1/2 refinement, n = 0 is no refinement\n--- a/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java\n      * @param min the min bound for the interval\n      * @param max the upper bound for the interval\n      * @return the value of integral\n-     * @throws TooManyEvaluationsException if the maximal number of evaluations\n-     * is exceeded.\n+     * @throws TooManyEvaluationsException if the maximum number of function\n+     * evaluations is exceeded.\n      * @throws MaxCountExceededException if the maximum iteration count is exceeded\n      * or the integrator detects convergence problems otherwise\n      * @throws MathIllegalArgumentException if min > max or the endpoints do not\n--- a/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java\n      *\n      * @param point Point at which the objective function must be evaluated.\n      * @return the objective function value at specified point.\n-     * @throws TooManyEvaluationsException if the maximal number of evaluations\n-     * is exceeded.\n+     * @throws TooManyEvaluationsException if the maximal number of function\n+     * evaluations is exceeded.\n      */\n     protected double computeObjectiveValue(final double point)\n         throws TooManyEvaluationsException {", "timestamp": 1317957485, "metainfo": ""}