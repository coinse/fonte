{"sha": "1e8de82657aba6bbe9129b94d78832c93e4072a4", "log": "added a test with a singular matrix updated class to Junit4  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/linear/BiDiagonalTransformerTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/BiDiagonalTransformerTest.java\n import org.apache.commons.math.linear.BiDiagonalTransformer;\n import org.apache.commons.math.linear.MatrixUtils;\n import org.apache.commons.math.linear.RealMatrix;\n-\n-import junit.framework.Test;\n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n-\n-public class BiDiagonalTransformerTest extends TestCase {\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class BiDiagonalTransformerTest {\n \n     private double[][] testSquare = {\n             { 24.0 / 25.0, 43.0 / 25.0 },\n         {  -360.0 / 625.0,  192.0 / 625.0, 1756.0 / 625.0 },\n     };\n \n-    public BiDiagonalTransformerTest(String name) {\n-        super(name);\n-    }\n-\n+    @Test\n     public void testDimensions() {\n         checkdimensions(MatrixUtils.createRealMatrix(testSquare));\n         checkdimensions(MatrixUtils.createRealMatrix(testNonSquare));\n         final int m = matrix.getRowDimension();\n         final int n = matrix.getColumnDimension();\n         BiDiagonalTransformer transformer = new BiDiagonalTransformer(matrix);\n-        assertEquals(m, transformer.getU().getRowDimension());\n-        assertEquals(m, transformer.getU().getColumnDimension());\n-        assertEquals(m, transformer.getB().getRowDimension());\n-        assertEquals(n, transformer.getB().getColumnDimension());\n-        assertEquals(n, transformer.getV().getRowDimension());\n-        assertEquals(n, transformer.getV().getColumnDimension());\n-\n-    }\n-\n+        Assert.assertEquals(m, transformer.getU().getRowDimension());\n+        Assert.assertEquals(m, transformer.getU().getColumnDimension());\n+        Assert.assertEquals(m, transformer.getB().getRowDimension());\n+        Assert.assertEquals(n, transformer.getB().getColumnDimension());\n+        Assert.assertEquals(n, transformer.getV().getRowDimension());\n+        Assert.assertEquals(n, transformer.getV().getColumnDimension());\n+\n+    }\n+\n+    @Test\n     public void testAEqualUSVt() {\n         checkAEqualUSVt(MatrixUtils.createRealMatrix(testSquare));\n         checkAEqualUSVt(MatrixUtils.createRealMatrix(testNonSquare));\n         RealMatrix b = transformer.getB();\n         RealMatrix v = transformer.getV();\n         double norm = u.multiply(b).multiply(v.transpose()).subtract(matrix).getNorm();\n-        assertEquals(0, norm, 1.0e-14);\n-    }\n-\n+        Assert.assertEquals(0, norm, 1.0e-14);\n+    }\n+\n+    @Test\n     public void testUOrthogonal() {\n         checkOrthogonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare)).getU());\n         checkOrthogonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare)).getU());\n         checkOrthogonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare).transpose()).getU());\n     }\n \n+    @Test\n     public void testVOrthogonal() {\n         checkOrthogonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare)).getV());\n         checkOrthogonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare)).getV());\n     private void checkOrthogonal(RealMatrix m) {\n         RealMatrix mTm = m.transpose().multiply(m);\n         RealMatrix id  = MatrixUtils.createRealIdentityMatrix(mTm.getRowDimension());\n-        assertEquals(0, mTm.subtract(id).getNorm(), 1.0e-14);\n-    }\n-\n+        Assert.assertEquals(0, mTm.subtract(id).getNorm(), 1.0e-14);\n+    }\n+\n+    @Test\n     public void testBBiDiagonal() {\n         checkBiDiagonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare)).getB());\n         checkBiDiagonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare)).getB());\n             for (int j = 0; j < cols; ++j) {\n                 if (rows < cols) {\n                     if ((i < j) || (i > j + 1)) {\n-                        assertEquals(0, m.getEntry(i, j), 1.0e-16);\n+                        Assert.assertEquals(0, m.getEntry(i, j), 1.0e-16);\n                     }\n                 } else {\n                     if ((i < j - 1) || (i > j)) {\n-                        assertEquals(0, m.getEntry(i, j), 1.0e-16);\n+                        Assert.assertEquals(0, m.getEntry(i, j), 1.0e-16);\n                     }\n                 }\n             }\n         }\n     }\n \n+    @Test\n+    public void testSingularMatrix() {\n+       BiDiagonalTransformer transformer =\n+            new BiDiagonalTransformer(MatrixUtils.createRealMatrix(new double[][] {\n+                { 1.0, 2.0, 3.0 },\n+                { 2.0, 3.0, 4.0 },\n+                { 3.0, 5.0, 7.0 }\n+            }));\n+       final double s3  = Math.sqrt(3.0);\n+       final double s14 = Math.sqrt(14.0);\n+       final double s42 = Math.sqrt(42.0);\n+       final double s1553 = Math.sqrt(1553.0);\n+       RealMatrix uRef = MatrixUtils.createRealMatrix(new double[][] {\n+           {  -1.0 / s14,  5.0 / s42,  1.0 / s3 },\n+           {  -2.0 / s14, -4.0 / s42,  1.0 / s3 },\n+           {  -3.0 / s14,  1.0 / s42, -1.0 / s3 }\n+       });\n+       RealMatrix bRef = MatrixUtils.createRealMatrix(new double[][] {\n+           { -s14, s1553 / s14,   0.0 },\n+           {  0.0, -87 * s3 / (s14 * s1553), -s3 * s14 / s1553 },\n+           {  0.0, 0.0, 0.0 }\n+       });\n+       RealMatrix vRef = MatrixUtils.createRealMatrix(new double[][] {\n+           { 1.0,   0.0,         0.0        },\n+           { 0.0,  -23 / s1553,  32 / s1553 },\n+           { 0.0,  -32 / s1553, -23 / s1553 }\n+       });\n+\n+       // check values against known references\n+       RealMatrix u = transformer.getU();\n+       Assert.assertEquals(0, u.subtract(uRef).getNorm(), 1.0e-14);\n+       RealMatrix b = transformer.getB();\n+       Assert.assertEquals(0, b.subtract(bRef).getNorm(), 1.0e-14);\n+       RealMatrix v = transformer.getV();\n+       Assert.assertEquals(0, v.subtract(vRef).getNorm(), 1.0e-14);\n+\n+       // check the same cached instance is returned the second time\n+       Assert.assertTrue(u == transformer.getU());\n+       Assert.assertTrue(b == transformer.getB());\n+       Assert.assertTrue(v == transformer.getV());\n+\n+    }\n+\n+    @Test\n     public void testMatricesValues() {\n        BiDiagonalTransformer transformer =\n             new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare));\n \n         // check values against known references\n         RealMatrix u = transformer.getU();\n-        assertEquals(0, u.subtract(uRef).getNorm(), 1.0e-14);\n+        Assert.assertEquals(0, u.subtract(uRef).getNorm(), 1.0e-14);\n         RealMatrix b = transformer.getB();\n-        assertEquals(0, b.subtract(bRef).getNorm(), 1.0e-14);\n+        Assert.assertEquals(0, b.subtract(bRef).getNorm(), 1.0e-14);\n         RealMatrix v = transformer.getV();\n-        assertEquals(0, v.subtract(vRef).getNorm(), 1.0e-14);\n+        Assert.assertEquals(0, v.subtract(vRef).getNorm(), 1.0e-14);\n \n         // check the same cached instance is returned the second time\n-        assertTrue(u == transformer.getU());\n-        assertTrue(b == transformer.getB());\n-        assertTrue(v == transformer.getV());\n-\n-    }\n-\n+        Assert.assertTrue(u == transformer.getU());\n+        Assert.assertTrue(b == transformer.getB());\n+        Assert.assertTrue(v == transformer.getV());\n+\n+    }\n+\n+    @Test\n     public void testUpperOrLower() {\n-        assertTrue(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare)).isUpperBiDiagonal());\n-        assertTrue(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare)).isUpperBiDiagonal());\n-        assertFalse(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare).transpose()).isUpperBiDiagonal());\n-    }\n-\n-    public static Test suite() {\n-        return new TestSuite(BiDiagonalTransformerTest.class);\n+        Assert.assertTrue(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare)).isUpperBiDiagonal());\n+        Assert.assertTrue(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare)).isUpperBiDiagonal());\n+        Assert.assertFalse(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare).transpose()).isUpperBiDiagonal());\n     }\n \n }", "timestamp": 1259364252, "metainfo": ""}