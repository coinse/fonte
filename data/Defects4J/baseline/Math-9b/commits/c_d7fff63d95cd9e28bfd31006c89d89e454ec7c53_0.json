{"sha": "d7fff63d95cd9e28bfd31006c89d89e454ec7c53", "log": "Added classes for binominal distribution and some infrastructure for other discrete distributions. Contributed by Brent Worden (brent@worden.org)   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+\n+/**\n+ * Base class for various discrete distributions.  It provides default\n+ * implementations for some of the methods that do not vary from distribution\n+ * to distribution.\n+ *  \n+ * @version $Revision: 1.1 $ $Date: 2003/08/16 17:06:15 $\n+ */\n+public abstract class AbstractDiscreteDistribution\n+    implements DiscreteDistribution {\n+        \n+    /**\n+     * Default constructor.\n+     */\n+    protected AbstractDiscreteDistribution() {\n+        super();\n+    }\n+    \n+    /**\n+     * For this disbution, X, this method returns P(x0 &le; X &le; x1).\n+     * @param x0 the inclusive, lower bound\n+     * @param x1 the inclusive, upper bound\n+     * @return the cummulative probability. \n+     */\n+    public double cummulativeProbability(int x0, int x1) {\n+        return cummulativeProbability(x1) - \n+            cummulativeProbability(x0 - 1);\n+    }\n+    \n+    /**\n+     * For this distribution, X, this method returns the critical point x, such\n+     * that P(X &le; x) &le; <code>p</code>.\n+     *\n+     * @param p the desired probability\n+     * @return x, such that P(X &lt; x) = <code>p</code>\n+     */\n+    public int inverseCummulativeProbability(final double p) {\n+        if (p < 0.0 || p > 1.0) {\n+            throw new IllegalArgumentException(\n+                \"p must be between 0.0 and 1.0, inclusive.\");\n+        }\n+        \n+        // by default, do simple bisection.\n+        // subclasses can override if there is a better method.\n+        int x0 = getDomainLowerBound(p);\n+        int x1 = getDomainUpperBound(p);\n+        double pm;\n+        while (x0 < x1) {\n+            int xm = x0 + (x1 - x0) / 2;\n+            pm = cummulativeProbability(xm);\n+            if (pm > p) {\n+                // update x1\n+                if (xm == x1) {\n+                    // this can happen with integer division\n+                    // simply decrement x1\n+                    --x1;\n+                } else {\n+                    // update x1 normally\n+                    x1 = xm;\n+                }\n+            } else {\n+                // update x0\n+                if (xm == x0) {\n+                    // this can happen with integer division\n+                    // simply increment x0\n+                    ++x0;\n+                } else {\n+                    // update x0 normally\n+                    x0 = xm;\n+                }\n+            }\n+        }\n+        \n+        // insure x0 is the correct critical point\n+        pm = cummulativeProbability(x0);\n+        while (pm > p) {\n+            --x0;\n+            pm = cummulativeProbability(x0);\n+        }\n+        \n+        return x0;        \n+    }\n+    \n+    /**\n+     * Access the domain value lower bound, based on <code>p</code>, used to\n+     * bracket a PDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(int)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value lower bound, i.e.\n+     *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n+     */\n+    protected abstract int getDomainLowerBound(double p);\n+    \n+    /**\n+     * Access the domain value upper bound, based on <code>p</code>, used to\n+     * bracket a PDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(int)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value upper bound, i.e.\n+     *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n+     */\n+    protected abstract int getDomainUpperBound(double p);\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/BinomialDistribution.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+/**\n+ * The Binomial Distribution.\n+ * \n+ * Instances of BinomialDistribution objects should be created using\n+ * {@link DistributionFactory#createBinomailDistribution(int, double)}.\n+ * \n+ * References:\n+ * <ul>\n+ * <li><a href=\"http://mathworld.wolfram.com/BinomialDistribution.html\">\n+ * Binomial Distribution</a></li>\n+ * </ul>\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2003/08/16 17:06:15 $\n+ */\n+public interface BinomialDistribution extends DiscreteDistribution {\n+    /**\n+     * Access the number of trials for this distribution.\n+     * @return the number of trials.\n+     */\n+    int getNumberOfTrials();\n+    \n+    /**\n+     * Access the probability of success for this distribution.\n+     * @return the probability of success.\n+     */\n+    double getProbabilityOfSuccess();\n+    \n+    /**\n+     * Change the number of trials for this distribution.\n+     * @param trials the new number of trials.\n+     */\n+    void setNumberOfTrials(int trials);\n+    \n+    /**\n+     * Change the probability of success for this distribution.\n+     * @param p the new probability of success.\n+     */\n+    void setProbabilityOfSuccess(double p);\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+import org.apache.commons.math.special.Beta;\n+import org.apache.commons.math.util.MathUtils;\n+\n+/**\n+ * The default implementation of {@link BinomialDistribution}.\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2003/08/16 17:06:15 $\n+ */\n+public class BinomialDistributionImpl extends AbstractDiscreteDistribution\n+    implements BinomialDistribution {\n+\n+    /** The number of trials. */\n+    private int numberOfTrials;\n+    \n+    /** The probability of success. */\n+    private double probabilityOfSuccess;\n+    \n+    /**\n+     * Create a binomial distribution with the given number of trials and\n+     * probability of success.\n+     * @param trials the number of trials.\n+     * @param p the probability of success.\n+     */\n+    public BinomialDistributionImpl(int trials, double p) {\n+        super();\n+        setNumberOfTrials(trials);\n+        setProbabilityOfSuccess(p);\n+    }\n+    \n+    /**\n+     * Access the number of trials for this distribution.\n+     * @return the number of trials.\n+     */\n+    public int getNumberOfTrials() {\n+        return numberOfTrials;\n+    }\n+\n+    /**\n+     * Access the probability of success for this distribution.\n+     * @return the probability of success.\n+     */\n+    public double getProbabilityOfSuccess() {\n+        return probabilityOfSuccess;\n+    }\n+\n+    /**\n+     * Change the number of trials for this distribution.\n+     * @param trials the new number of trials.\n+     */\n+    public void setNumberOfTrials(int trials) {\n+        if (trials < 0) {\n+            throw new IllegalArgumentException(\n+                \"number of trials must be non-negative.\");\n+        }\n+        numberOfTrials = trials;\n+    }\n+\n+    /**\n+     * Change the probability of success for this distribution.\n+     * @param p the new probability of success.\n+     */\n+    public void setProbabilityOfSuccess(double p) {\n+        if (p < 0.0 || p > 1.0) {\n+            throw new IllegalArgumentException(\n+                \"probability of success must be between 0.0 and 1.0, inclusive.\");\n+        }\n+        probabilityOfSuccess = p;\n+    }\n+    \n+    /**\n+     * Access the domain value lower bound, based on <code>p</code>, used to\n+     * bracket a PDF root.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value lower bound, i.e.\n+     *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n+     */\n+    protected int getDomainLowerBound(double p) {\n+        return -1;\n+    }\n+\n+    /**\n+     * Access the domain value upper bound, based on <code>p</code>, used to\n+     * bracket a PDF root.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value upper bound, i.e.\n+     *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n+     */\n+    protected int getDomainUpperBound(double p) {\n+        return getNumberOfTrials();\n+    }\n+\n+    /**\n+     * For this disbution, X, this method returns P(X &le; x).\n+     * @param x the value at which the PDF is evaluated.\n+     * @return PDF for this distribution. \n+     */\n+    public double cummulativeProbability(int x) {\n+        double ret;\n+        if (x < 0) {\n+            ret = 0.0;\n+        } else if (x >= getNumberOfTrials()) {\n+            ret = 1.0;\n+        } else {\n+            ret = 1.0 - Beta.regularizedBeta(getProbabilityOfSuccess(),\n+                x + 1.0, getNumberOfTrials() - x);\n+        }\n+        return ret;\n+    }\n+\n+    /**\n+     * For this disbution, X, this method returns P(X = x).\n+     * @param x the value at which the PMF is evaluated.\n+     * @return PMF for this distribution. \n+     */\n+    public double probability(int x) {\n+        double ret;\n+        if (x < 0 || x > getNumberOfTrials()) {\n+            ret = 0.0;\n+        } else {\n+            ret = MathUtils.binomialCoefficientDouble(getNumberOfTrials(), x) *\n+                Math.pow(getProbabilityOfSuccess(), x) *\n+                Math.pow(1.0 - getProbabilityOfSuccess(),\n+                    getNumberOfTrials() - x);\n+        }\n+        return ret;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/DiscreteDistribution.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+/**\n+ * Base interface for various discrete distributions.\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2003/08/16 17:06:15 $\n+ */\n+public interface DiscreteDistribution {\n+    /**\n+     * For this disbution, X, this method returns P(X = x).\n+     * @param x the value at which the PMF is evaluated.\n+     * @return PMF for this distribution. \n+     */\n+    double probability(int x);\n+    \n+    /**\n+     * For this disbution, X, this method returns P(X &le; x).\n+     * @param x the value at which the PDF is evaluated.\n+     * @return PDF for this distribution. \n+     */\n+    double cummulativeProbability(int x);\n+\n+    /**\n+     * For this disbution, X, this method returns P(x0 &le; X &le; x1).\n+     * @param x0 the inclusive, lower bound\n+     * @param x1 the inclusive, upper bound\n+     * @return the cummulative probability. \n+     */\n+    double cummulativeProbability(int x0, int x1);\n+    \n+    /**\n+     * For this disbution, X, this method returns x such that P(X &le; x) <= p.\n+     * @param p the cummulative probability.\n+     * @return x. \n+     */\n+    int inverseCummulativeProbability(double p);\n+}\n--- a/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n+++ b/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n  * This factory provids the means to create common statistical distributions.\n  * The following distributions are supported:\n  * <ul>\n+ * <li>Binomial</li>\n  * <li>Chi-Squared</li>\n+ * <li>Exponential</li>\n  * <li>F</li>\n  * <li>Gamma</li>\n  * <li>Student's t</li>\n  * ChiSquaredDistribution chi = factory.createChiSquareDistribution(5.0);\n  * </pre>\n  * \n- * @version $Revision: 1.9 $ $Date: 2003/07/30 21:58:11 $\n+ * @version $Revision: 1.10 $ $Date: 2003/08/16 17:06:15 $\n  */\n public abstract class DistributionFactory {\n     /**\n     public static DistributionFactory newInstance() {\n         return new DistributionFactoryImpl();\n     }\n-    \n+\n+    /**\n+     * Create a binomial distribution with the given number of trials and\n+     * probability of success.\n+     * @param numberOfTrials the number of trials.\n+     * @param probabilityOfSuccess the probability of success.\n+     * @return a new binomial distribution.\n+     */\n+    public abstract BinomialDistribution createBinomailDistribution(\n+        int numberOfTrials, double probabilityOfSuccess);\n+        \n     /**\n      * Create a new chi-square distribution with the given degrees of freedom.\n      * @param degreesOfFreedom degrees of freedom.\n--- a/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java\n  * A concrete distribution factory.  This is the default factory used by\n  * Commons-Math.\n  *  \n- * @version $Revision: 1.7 $ $Date: 2003/07/09 20:03:23 $\n+ * @version $Revision: 1.8 $ $Date: 2003/08/16 17:06:15 $\n  */\n public class DistributionFactoryImpl extends DistributionFactory {\n     /**\n         return new ExponentialDistributionImpl(mean);\n     }    \n \n+    /**\n+     * Create a binomial distribution with the given number of trials and\n+     * probability of success.\n+     * @param numberOfTrials the number of trials.\n+     * @param probabilityOfSuccess the probability of success.\n+     * @return a new binomial distribution.\n+     */\n+    public BinomialDistribution createBinomailDistribution(\n+        int numberOfTrials, double probabilityOfSuccess) {\n+        return new BinomialDistributionImpl(numberOfTrials,\n+            probabilityOfSuccess);\n+    }\n+\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @author Brent Worden\n+ */\n+public class BinomialDistributionTest extends TestCase {\n+    private BinomialDistribution b;\n+    \n+    /**\n+     * Constructor for ChiSquareDistributionTest.\n+     * @param name\n+     */\n+    public BinomialDistributionTest(String name) {\n+        super(name);\n+    }\n+\n+    /*\n+     * @see TestCase#setUp()\n+     */\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        b = DistributionFactory.newInstance().createBinomailDistribution(10, 0.70);\n+    }\n+\n+    /*\n+     * @see TestCase#tearDown()\n+     */\n+    protected void tearDown() throws Exception {\n+        b = null;\n+        super.tearDown();\n+    }\n+\n+    public void testInverseCummulativeProbability001() {\n+        testValue(1, .001);\n+    }\n+    \n+    public void testInverseCumulativeProbability010() {\n+        testValue(2, .010);\n+    }\n+    \n+    public void testInverseCumulativeProbability025() {\n+        testValue(3, .025);\n+    }\n+\n+    public void testInverseCumulativeProbability050() {\n+        testValue(4, .050);\n+    }\n+    \n+    public void testInverseCumulativeProbability100() {\n+        testValue(4, .100);\n+    }\n+\n+    public void testInverseCummulativeProbability999() {\n+        testValue(9, .999);\n+    }\n+    \n+    public void testInverseCumulativeProbability990() {\n+        testValue(9, .990);\n+    }\n+    \n+    public void testInverseCumulativeProbability975() {\n+        testValue(9, .975);\n+    }\n+\n+    public void testInverseCumulativeProbability950() {\n+        testValue(8, .950);\n+    }\n+    \n+    public void testInverseCumulativeProbability900() {\n+        testValue(8, .900);\n+    }\n+\n+    public void testCummulativeProbability1() {\n+        testProbability(1, .00014);\n+    }\n+    \n+    public void testCumulativeProbability2() {\n+        testProbability(2, .00159);\n+    }\n+    \n+    public void testCumulativeProbability3() {\n+        testProbability(3, .01059);\n+    }\n+\n+    public void testCumulativeProbability4() {\n+        testProbability(4, .04735);\n+    }\n+    \n+    public void testCumulativeProbability9() {\n+        testProbability(9, .97175);\n+    }\n+\n+    public void testCummulativeProbability8() {\n+        testProbability(8, .85069);\n+    }\n+    \n+    private void testProbability(int x, double expected){\n+        double actual = b.cummulativeProbability(x);\n+        assertEquals(expected, actual, 10e-4);\n+    }\n+    \n+    private void testValue(int expected, double p){\n+        int actual = b.inverseCummulativeProbability(p);\n+        assertEquals(expected, actual);\n+        assertTrue(b.cummulativeProbability(actual) <= p);\n+        assertTrue(b.cummulativeProbability(actual + 1) >= p);\n+    }\n+}\n--- a/src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java\n+++ b/src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java\n             fail(\"positive degrees of freedom.  IllegalArgumentException is not expected\");\n         }\n     }\n+    \n+    public void testBinomialDistributionNegativePositive(){\n+        try {\n+            factory.createBinomailDistribution(-1, 0.5);\n+            fail(\"negative number of trials.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex ) {\n+        }\n+    }\n+    \n+    public void testBinomialDistributionZeroPositive(){\n+        try {\n+            factory.createBinomailDistribution(0, 0.5);\n+        } catch (IllegalArgumentException ex ) {\n+            fail(\"zero number of trials.  IllegalArgumentException is not expected\");\n+        }\n+    }\n+    \n+    public void testBinomialDistributionPositivePositive(){\n+        try {\n+            factory.createBinomailDistribution(10, 0.5);\n+        } catch (IllegalArgumentException ex ) {\n+            fail(\"positive number of trials.  IllegalArgumentException is not expected\");\n+        }\n+    }\n+    \n+    public void testBinomialDistributionPositiveNegative(){\n+        try {\n+            factory.createBinomailDistribution(10, -0.5);\n+            fail(\"negative probability of success.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex ) {\n+        }\n+    }\n+    \n+    public void testBinomialDistributionPositiveZero(){\n+        try {\n+            factory.createBinomailDistribution(10, 0.0);\n+        } catch (IllegalArgumentException ex ) {\n+            fail(\"zero probability of success.  IllegalArgumentException is not expected\");\n+        }\n+    }\n+    \n+    public void testBinomialDistributionPositiveOne(){\n+        try {\n+            factory.createBinomailDistribution(10, 1.0);\n+        } catch (IllegalArgumentException ex ) {\n+            fail(\"valid probability of success.  IllegalArgumentException is not expected\");\n+        }\n+    }\n+    \n+    public void testBinomialDistributionPositiveTwo(){\n+        try {\n+            factory.createBinomailDistribution(10, 2.0);\n+            fail(\"high probability of success.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex ) {\n+        }\n+    }\n }", "timestamp": 1061053575, "metainfo": ""}