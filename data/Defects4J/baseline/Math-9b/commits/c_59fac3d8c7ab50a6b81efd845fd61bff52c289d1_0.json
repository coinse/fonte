{"sha": "59fac3d8c7ab50a6b81efd845fd61bff52c289d1", "log": "NonPositiveDefiniteMatrixException\": Changed base class, and modified message so that it is (a little) less misleading (it is closer to the actual check which can only report that it detects non-definite-positiveness at some point of the transformation). Changed test in \"CholeskyDecompositionImpl\" to allow \"O\" for the threshold while keeping the requirement that the element must be strictly positive.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n+++ b/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n     ALPHA(\"alpha\"), /* keep */\n     BETA(\"beta\"), /* keep */\n     NOT_POSITIVE_COLUMNDIMENSION(\"invalid column dimension: {0} (must be positive)\"),\n-    NOT_POSITIVE_DEFINITE_MATRIX(\"not positive definite matrix\"),\n-    NON_POSITIVE_DEFINITE_MATRIX(\"not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})\"), /* keep */\n+    NOT_POSITIVE_DEFINITE_MATRIX(\"not positive definite matrix\"), /* keep */\n+    NON_POSITIVE_DEFINITE_MATRIX(\"not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})\"),\n     NON_POSITIVE_DEFINITE_LINEAR_OPERATOR(\"non positive definite linear operator\"), /* keep */\n     NON_SELF_ADJOINT_LINEAR_OPERATOR(\"non self-adjoint linear operator\"), /* keep */\n     NON_SQUARE_LINEAR_OPERATOR(\"non square ({0}x{1}) linear operator\"), /* keep */\n--- a/src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n             final double[] ltI = lTData[i];\n \n             // check diagonal element\n-            if (ltI[i] < absolutePositivityThreshold) {\n+            if (ltI[i] <= absolutePositivityThreshold) {\n                 throw new NonPositiveDefiniteMatrixException(ltI[i], i, absolutePositivityThreshold);\n             }\n \n--- a/src/main/java/org/apache/commons/math/linear/NonPositiveDefiniteMatrixException.java\n+++ b/src/main/java/org/apache/commons/math/linear/NonPositiveDefiniteMatrixException.java\n  */\n package org.apache.commons.math.linear;\n \n-import org.apache.commons.math.exception.MathIllegalNumberException;\n+import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n+import org.apache.commons.math.exception.util.ExceptionContext;\n \n /**\n  * Exception to be thrown when a positive definite matrix is expected.\n  * @since 3.0\n  * @version $Id$\n  */\n-public class NonPositiveDefiniteMatrixException extends MathIllegalNumberException {\n+public class NonPositiveDefiniteMatrixException extends NumberIsTooSmallException {\n     /** Serializable version Id. */\n     private static final long serialVersionUID = 1641613838113738061L;\n     /** Index (diagonal element). */\n     public NonPositiveDefiniteMatrixException(double wrong,\n                                               int index,\n                                               double threshold) {\n-        super(LocalizedFormats.NON_POSITIVE_DEFINITE_MATRIX, wrong, index, threshold);\n+        super(wrong, threshold, false);\n         this.index = index;\n         this.threshold = threshold;\n+\n+        final ExceptionContext context = getContext();\n+        context.addMessage(LocalizedFormats.NOT_POSITIVE_DEFINITE_MATRIX);\n+        context.addMessage(LocalizedFormats.ARRAY_ELEMENT, wrong, index);\n     }\n \n     /**", "timestamp": 1315583097, "metainfo": ""}