{"sha": "f6393a23de71838b4cefff78eaee102d013e0d94", "log": "MATH-503 Added derivative and parametric version of the function.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java\n package org.apache.commons.math.analysis.function;\n \n import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;\n+import org.apache.commons.math.analysis.ParametricUnivariateRealFunction;\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.util.FastMath;\n \n /**\n  * <a href=\"http://en.wikipedia.org/wiki/Sigmoid_function\">\n- *  Sigmoid</a> function.\n+ *  sigmoid</a> function.\n+ * It is the inverse of the {@link Logit logit} function.\n  * A more flexible version, the generalised logistic, is implemented\n  * by the {@link Logistic} class.\n  *\n  * @version $Revision$ $Date$\n  * @since 3.0\n  */\n-public class Sigmoid implements UnivariateRealFunction {\n+public class Sigmoid implements DifferentiableUnivariateRealFunction {\n+    /** Lower asymptote. */\n+    private final double lo;\n+    /** Higher asymptote. */\n+    private final double hi;\n+\n+    /**\n+     * Usual sigmoid function, where the lower asymptote is 0 and the higher\n+     * asymptote is 1.\n+     */\n+    public Sigmoid() {\n+        this(0, 1);\n+    }\n+\n+    /**\n+     * Sigmoid function.\n+     *\n+     * @param lo Lower asymptote.\n+     * @param hi Higher asymptote.\n+     */\n+    public Sigmoid(double lo,\n+                   double hi) {\n+        this.lo = lo;\n+        this.hi = hi;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public UnivariateRealFunction derivative() {\n+        return new UnivariateRealFunction() {\n+            /** {@inheritDoc} */\n+            public double value(double x) {\n+                final double exp = FastMath.exp(-x);\n+                if (Double.isInfinite(exp)) {\n+                    // Avoid returning NaN in case of overflow.\n+                    return 0;\n+                }\n+                final double exp1 = 1 + exp;\n+                return (hi - lo) * exp / (exp1 * exp1);\n+            }\n+        };\n+    }\n+\n     /** {@inheritDoc} */\n     public double value(double x) {\n-        return 1 / (1 + FastMath.exp(-x));\n+        return value(x, lo, hi);\n+    }\n+\n+    /**\n+     * Parametric function where the input array contains the parameters of\n+     * the logit function, ordered as follows:\n+     * <ul>\n+     *  <li>Lower asymptote</li>\n+     *  <li>Higher asymptote</li>\n+     * </ul>\n+     */\n+    public static class Parametric implements ParametricUnivariateRealFunction {\n+        /**\n+         * Computes the value of the sigmoid at {@code x}.\n+         *\n+         * @param x Value for which the function must be computed.\n+         * @param param Values of lower asymptote and higher asymptote.\n+         * @return the value of the function.\n+         * @throws NullArgumentException if {@code param} is {@code null}.\n+         * @throws DimensionMismatchException if the size of {@code param} is\n+         * not 2.\n+         */\n+        public double value(double x,\n+                            double[] param) {\n+            validateParameters(param);\n+            return Sigmoid.value(x, param[0], param[1]);\n+        }\n+\n+        /**\n+         * Computes the value of the gradient at {@code x}.\n+         * The components of the gradient vector are the partial\n+         * derivatives of the function with respect to each of the\n+         * <em>parameters</em> (lower asymptote and higher asymptote).\n+         *\n+         * @param x Value at which the gradient must be computed.\n+         * @param param Values for lower asymptote and higher asymptote.\n+         * @return the gradient vector at {@code x}.\n+         * @throws NullArgumentException if {@code param} is {@code null}.\n+         * @throws DimensionMismatchException if the size of {@code param} is\n+         * not 2.\n+         */\n+        public double[] gradient(double x, double[] param) {\n+            validateParameters(param);\n+\n+            final double lo = param[0];\n+            final double hi = param[1];\n+            final double invExp1 = 1 / (1 + FastMath.exp(-x));\n+\n+            return new double[] { 1 - invExp1, invExp1 };\n+        }\n+\n+        /**\n+         * Validates parameters to ensure they are appropriate for the evaluation of\n+         * the {@link #value(double,double[])} and {@link #gradient(double,double[])}\n+         * methods.\n+         *\n+         * @param param Values for lower and higher asymptotes.\n+         * @throws NullArgumentException if {@code param} is {@code null}.\n+         * @throws DimensionMismatchException if the size of {@code param} is\n+         * not 2.\n+         */\n+        private void validateParameters(double[] param) {\n+            if (param == null) {\n+                throw new NullArgumentException();\n+            }\n+            if (param.length != 2) {\n+                throw new DimensionMismatchException(param.length, 2);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * @param x Value at which to compute the sigmoid.\n+     * @param lo Lower asymptote.\n+     * @param hi Higher asymptote.\n+     * @return the value of the sigmoid function at {@code x}.\n+     */\n+    private static double value(double x,\n+                                double lo,\n+                                double hi) {\n+        return lo + (hi - lo) / (1 + FastMath.exp(-x));\n     }\n }\n--- a/src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java\n package org.apache.commons.math.analysis.function;\n \n import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.exception.DimensionMismatchException;\n \n import org.junit.Assert;\n import org.junit.Test;\n     public void testSomeValues() {\n         final UnivariateRealFunction f = new Sigmoid();\n \n-        double x;\n-        x = 0;\n-        Assert.assertEquals(\"x=\" + x, 0.5, f.value(x), EPS);\n+        Assert.assertEquals(0.5, f.value(0), EPS);\n+        Assert.assertEquals(0, f.value(Double.NEGATIVE_INFINITY), EPS);\n+        Assert.assertEquals(1, f.value(Double.POSITIVE_INFINITY), EPS);\n+    }\n \n-        x = Double.NEGATIVE_INFINITY;\n-        Assert.assertEquals(\"x=\" + x, 0, f.value(x), EPS);\n+    @Test\n+    public void testDerivative() {\n+        final Sigmoid f = new Sigmoid();\n+        final UnivariateRealFunction dfdx = f.derivative();\n \n-        x = Double.POSITIVE_INFINITY;\n-        Assert.assertEquals(\"x=\" + x, 1, f.value(x), EPS);\n+        Assert.assertEquals(0.25, dfdx.value(0), 0);\n+    }\n+\n+    @Test\n+    public void testDerivativeLargeArguments() {\n+        final Sigmoid f = new Sigmoid(1, 2);\n+        final UnivariateRealFunction dfdx = f.derivative();\n+\n+        Assert.assertEquals(0, dfdx.value(Double.NEGATIVE_INFINITY), 0);\n+        Assert.assertEquals(0, dfdx.value(-Double.MAX_VALUE), 0);\n+        Assert.assertEquals(0, dfdx.value(-1e50), 0);\n+        Assert.assertEquals(0, dfdx.value(-1e3), 0);\n+        Assert.assertEquals(0, dfdx.value(1e3), 0);\n+        Assert.assertEquals(0, dfdx.value(1e50), 0);\n+        Assert.assertEquals(0, dfdx.value(Double.MAX_VALUE), 0);\n+        Assert.assertEquals(0, dfdx.value(Double.POSITIVE_INFINITY), 0);        \n+    }\n+\n+    @Test(expected=NullArgumentException.class)\n+    public void testParametricUsage1() {\n+        final Sigmoid.Parametric g = new Sigmoid.Parametric();\n+        g.value(0, null);\n+    }\n+\n+    @Test(expected=DimensionMismatchException.class)\n+    public void testParametricUsage2() {\n+        final Sigmoid.Parametric g = new Sigmoid.Parametric();\n+        g.value(0, new double[] {0});\n+    }\n+\n+    @Test(expected=NullArgumentException.class)\n+    public void testParametricUsage3() {\n+        final Sigmoid.Parametric g = new Sigmoid.Parametric();\n+        g.gradient(0, null);\n+    }\n+\n+    @Test(expected=DimensionMismatchException.class)\n+    public void testParametricUsage4() {\n+        final Sigmoid.Parametric g = new Sigmoid.Parametric();\n+        g.gradient(0, new double[] {0});\n+    }\n+\n+    @Test\n+    public void testParametricValue() {\n+        final double lo = 2;\n+        final double hi = 3;\n+        final Sigmoid f = new Sigmoid(lo, hi);\n+\n+        final Sigmoid.Parametric g = new Sigmoid.Parametric();\n+        Assert.assertEquals(f.value(-1), g.value(-1, new double[] {lo, hi}), 0);\n+        Assert.assertEquals(f.value(0), g.value(0, new double[] {lo, hi}), 0);\n+        Assert.assertEquals(f.value(2), g.value(2, new double[] {lo, hi}), 0);\n     }\n }", "timestamp": 1298761139, "metainfo": ""}