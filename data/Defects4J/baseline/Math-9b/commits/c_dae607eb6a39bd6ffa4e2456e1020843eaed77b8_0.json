{"sha": "dae607eb6a39bd6ffa4e2456e1020843eaed77b8", "log": "Merged BinomialDistribution and BinomialDistributionImpl (MATH-711).  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java\n  */\n package org.apache.commons.math.distribution;\n \n+import java.io.Serializable;\n+\n+import org.apache.commons.math.exception.OutOfRangeException;\n+import org.apache.commons.math.exception.NotPositiveException;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n+import org.apache.commons.math.special.Beta;\n+import org.apache.commons.math.util.FastMath;\n+\n /**\n- * The Binomial Distribution.\n+ * Implementation of the binomial distribution.\n  *\n- * <p>\n- * References:\n- * <ul>\n- * <li><a href=\"http://mathworld.wolfram.com/BinomialDistribution.html\">\n- * Binomial Distribution</a></li>\n- * </ul>\n- * </p>\n- *\n+ * @see <a href=\"http://en.wikipedia.org/wiki/Binomial_distribution\">Binomial distribution (Wikipedia)</a>\n+ * @see <a href=\"http://mathworld.wolfram.com/BinomialDistribution.html\">Binomial Distribution (MathWorld)</a>\n  * @version $Id$\n  */\n-public interface BinomialDistribution extends IntegerDistribution {\n+public class BinomialDistribution extends AbstractIntegerDistribution\n+        implements Serializable {\n+    /** Serializable version identifier. */\n+    private static final long serialVersionUID = 6751309484392813623L;\n+    /** The number of trials. */\n+    private final int numberOfTrials;\n+    /** The probability of success. */\n+    private final double probabilityOfSuccess;\n+\n+    /**\n+     * Create a binomial distribution with the given number of trials and\n+     * probability of success.\n+     *\n+     * @param trials Number of trials.\n+     * @param p Probability of success.\n+     * @throws NotPositiveException if {@code trials < 0}.\n+     * @throws OutOfRangeException if {@code p < 0} or {@code p > 1}.\n+     */\n+    public BinomialDistribution(int trials, double p) {\n+        if (trials < 0) {\n+            throw new NotPositiveException(LocalizedFormats.NUMBER_OF_TRIALS,\n+                                           trials);\n+        }\n+        if (p < 0 || p > 1) {\n+            throw new OutOfRangeException(p, 0, 1);\n+        }\n+\n+        probabilityOfSuccess = p;\n+        numberOfTrials = trials;\n+    }\n+\n     /**\n      * Access the number of trials for this distribution.\n      *\n      * @return the number of trials.\n      */\n-    int getNumberOfTrials();\n+    public int getNumberOfTrials() {\n+        return numberOfTrials;\n+    }\n \n     /**\n      * Access the probability of success for this distribution.\n      *\n      * @return the probability of success.\n      */\n-    double getProbabilityOfSuccess();\n+    public double getProbabilityOfSuccess() {\n+        return probabilityOfSuccess;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    protected int getDomainLowerBound(double p) {\n+        return -1;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    protected int getDomainUpperBound(double p) {\n+        return numberOfTrials;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public double cumulativeProbability(int x) {\n+        double ret;\n+        if (x < 0) {\n+            ret = 0.0;\n+        } else if (x >= numberOfTrials) {\n+            ret = 1.0;\n+        } else {\n+            ret = 1.0 - Beta.regularizedBeta(getProbabilityOfSuccess(),\n+                    x + 1.0, numberOfTrials - x);\n+        }\n+        return ret;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double probability(int x) {\n+        double ret;\n+        if (x < 0 || x > numberOfTrials) {\n+            ret = 0.0;\n+        } else {\n+            ret = FastMath.exp(SaddlePointExpansion.logBinomialProbability(x,\n+                    numberOfTrials, probabilityOfSuccess,\n+                    1.0 - probabilityOfSuccess));\n+        }\n+        return ret;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * This implementation return -1 when {@code p == 0} and\n+     * {@code Integer.MAX_VALUE} when {@code p == 1}.\n+     */\n+    @Override\n+    public int inverseCumulativeProbability(final double p) {\n+        // handle extreme values explicitly\n+        if (p == 0) {\n+            return -1;\n+        }\n+        if (p == 1) {\n+            return Integer.MAX_VALUE;\n+        }\n+\n+        // use default bisection impl\n+        return super.inverseCumulativeProbability(p);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * The lower bound of the support is always 0 no matter the number of trials\n+     * and probability parameter.\n+     *\n+     * @return lower bound of the support (always 0)\n+     */\n+    @Override\n+    public int getSupportLowerBound() {\n+        return 0;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * The upper bound of the support is the number of trials.\n+     *\n+     * @return upper bound of the support (equal to number of trials)\n+     */\n+    @Override\n+    public int getSupportUpperBound() {\n+        return getNumberOfTrials();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * For {@code n} trials and probability parameter {@code p}, the mean is\n+     * {@code n * p}.\n+     */\n+    @Override\n+    protected double calculateNumericalMean() {\n+        return getNumberOfTrials() * getProbabilityOfSuccess();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * For {@code n} trials and probability parameter {@code p}, the variance is\n+     * {@code n * p * (1 - p)}.\n+     */\n+    @Override\n+    protected double calculateNumericalVariance() {\n+        final double p = getProbabilityOfSuccess();\n+        return getNumberOfTrials() * p * (1 - p);\n+    }\n }\n--- a/src/main/java/org/apache/commons/math/random/RandomDataImpl.java\n+++ b/src/main/java/org/apache/commons/math/random/RandomDataImpl.java\n import java.util.Collection;\n \n import org.apache.commons.math.distribution.BetaDistribution;\n-import org.apache.commons.math.distribution.BinomialDistributionImpl;\n+import org.apache.commons.math.distribution.BinomialDistribution;\n import org.apache.commons.math.distribution.CauchyDistributionImpl;\n import org.apache.commons.math.distribution.ChiSquaredDistributionImpl;\n import org.apache.commons.math.distribution.ContinuousDistribution;\n     }\n \n     /**\n-     * Generates a random value from the {@link BinomialDistributionImpl Binomial Distribution}.\n+     * Generates a random value from the {@link BinomialDistribution Binomial Distribution}.\n      * This implementation uses {@link #nextInversionDeviate(ContinuousDistribution) inversion}\n      * to generate random values.\n      *\n      * @since 2.2\n      */\n     public int nextBinomial(int numberOfTrials, double probabilityOfSuccess) {\n-        return nextInversionDeviate(new BinomialDistributionImpl(numberOfTrials, probabilityOfSuccess));\n+        return nextInversionDeviate(new BinomialDistribution(numberOfTrials, probabilityOfSuccess));\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java\n     /** Creates the default discrete distribution instance to use in tests. */\n     @Override\n     public IntegerDistribution makeDistribution() {\n-        return new BinomialDistributionImpl(10, 0.70);\n+        return new BinomialDistribution(10, 0.70);\n     }\n \n     /** Creates the default probability density test input values */\n     /** Test degenerate case p = 0 */\n     @Test\n     public void testDegenerate0() throws Exception {\n-        setDistribution(new BinomialDistributionImpl(5, 0.0d));\n+        setDistribution(new BinomialDistribution(5, 0.0d));\n         setCumulativeTestPoints(new int[] { -1, 0, 1, 5, 10 });\n         setCumulativeTestValues(new double[] { 0d, 1d, 1d, 1d, 1d });\n         setDensityTestPoints(new int[] { -1, 0, 1, 10, 11 });\n     /** Test degenerate case p = 1 */\n     @Test\n     public void testDegenerate1() throws Exception {\n-        setDistribution(new BinomialDistributionImpl(5, 1.0d));\n+        setDistribution(new BinomialDistribution(5, 1.0d));\n         setCumulativeTestPoints(new int[] { -1, 0, 1, 2, 5, 10 });\n         setCumulativeTestValues(new double[] { 0d, 0d, 0d, 0d, 1d, 1d });\n         setDensityTestPoints(new int[] { -1, 0, 1, 2, 5, 10 });\n     public void testMoments() {\n         final double tol = 1e-9;\n         BinomialDistribution dist;\n-        \n-        dist = new BinomialDistributionImpl(10, 0.5);\n+\n+        dist = new BinomialDistribution(10, 0.5);\n         Assert.assertEquals(dist.getNumericalMean(), 10d * 0.5d, tol);\n-        Assert.assertEquals(dist.getNumericalVariance(), 10d * 0.5d * 0.5d, tol); \n-        \n-        dist = new BinomialDistributionImpl(30, 0.3);\n+        Assert.assertEquals(dist.getNumericalVariance(), 10d * 0.5d * 0.5d, tol);\n+\n+        dist = new BinomialDistribution(30, 0.3);\n         Assert.assertEquals(dist.getNumericalMean(), 30d * 0.3d, tol);\n         Assert.assertEquals(dist.getNumericalVariance(), 30d * 0.3d * (1d - 0.3d), tol);\n     }\n--- a/src/test/java/org/apache/commons/math/random/RandomDataTest.java\n+++ b/src/test/java/org/apache/commons/math/random/RandomDataTest.java\n import org.apache.commons.math.RetryRunner;\n import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.distribution.BetaDistribution;\n-import org.apache.commons.math.distribution.BinomialDistributionImpl;\n+import org.apache.commons.math.distribution.BinomialDistribution;\n import org.apache.commons.math.distribution.BinomialDistributionTest;\n import org.apache.commons.math.distribution.CauchyDistributionImpl;\n import org.apache.commons.math.distribution.ChiSquaredDistributionImpl;\n         double[] densityValues = testInstance.makeDensityTestValues();\n         int sampleSize = 1000;\n         int length = TestUtils.eliminateZeroMassPoints(densityPoints, densityValues);\n-        BinomialDistributionImpl distribution = (BinomialDistributionImpl) testInstance.makeDistribution();\n+        BinomialDistribution distribution = (BinomialDistribution) testInstance.makeDistribution();\n         double[] expectedCounts = new double[length];\n         long[] observedCounts = new long[length];\n         for (int i = 0; i < length; i++) {", "timestamp": 1322163454, "metainfo": ""}