{"sha": "7ed446aecd4b106a53af8bb236c576b896411c6e", "log": "Fixed javadoc errors introduced in r1003512 (post 2.2 release).  JIRA: MATH-587  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java\n \n     /**\n      * For a random variable {@code X} whose values are distributed according\n-     * to this distribution, this method returns {@code P(X < x)}.  In other\n+     * to this distribution, this method returns {@code P(X <= x)}.  In other\n      * words, this method represents the (cumulative) distribution function,\n      * or CDF, for this distribution.\n      * If {@code x} does not represent an integer value, the CDF is\n     /**\n      * For a random variable {@code X} whose values are distributed\n      * according to this distribution, this method returns\n-     * {@code P(x0 < X < x1)}.\n+     * {@code P(x0 <= X <= x1)}.\n      *\n      * @param x0 Inclusive lower bound.\n      * @param x1 Inclusive upper bound.\n \n     /**\n      * For a random variable {@code X} whose values are distributed according\n-     * to this distribution, this method returns {@code P(X < x)}. In other\n+     * to this distribution, this method returns {@code P(X <= x)}. In other\n      * words, this method represents the probability distribution function,\n      * or PDF, for this distribution.\n      *\n--- a/src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n     }\n \n     /**\n-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.\n+     * For this distribution, {@code X}, this method returns {@code P(X <= x)}.\n      *\n      * @param x Value at which the PDF is evaluated.\n      * @return PDF for this distribution.\n--- a/src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java\n     }\n \n     /**\n-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.\n+     * For this distribution, {@code X}, this method returns {@code P(X <= x)}.\n      *\n      * @param x Value at which the PDF is evaluated.\n      * @return PDF for this distribution.\n--- a/src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java\n \n     /**\n      * For a random variable {@code X} whose values are distributed according\n-     * to this distribution, this method returns {@code P(X < x)}.  In other\n+     * to this distribution, this method returns {@code P(X <= x)}.  In other\n      * words, this method represents the probability distribution function, or\n      * PDF for the distribution.\n      *\n \n     /**\n      * For this distribution, {@code X}, this method returns\n-     * {@code P(x0 < X < x1)}.\n+     * {@code P(x0 <= X <= x1)}.\n      *\n      * @param x0 the inclusive, lower bound\n      * @param x1 the inclusive, upper bound\n \n     /**\n      * For this distribution, {@code X}, this method returns the largest\n-     * {@code x} such that {@code P(X < x) <= p}.\n+     * {@code x} such that {@code P(X <= x) <= p}.\n      * <br/>\n      * Note that this definition implies:\n      * <ul>\n      *   no such value {@code m},  {@code Integer.MIN_VALUE} is returned.\n      *  </li>\n      *  <li> If there is a maximum value, {@code M}, such that\n-     *   {@code P(X < M) = 1}, then {@code M} is returned by\n+     *   {@code P(X <= M) = 1}, then {@code M} is returned by\n      *   {@code inverseCumulativeProbability(1)}.\n      *   If there is no such value, {@code M}, {@code Integer.MAX_VALUE} is\n      *   returned.\n--- a/src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java\n     }\n \n     /**\n-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.\n+     * For this distribution, {@code X}, this method returns {@code P(X <= x)}.\n      *\n      * @param x Value at which the PDF is evaluated.\n      * @return PDF for this distribution.\n \n     /**\n      * For this distribution, {@code X}, this method returns the largest\n-     * {@code x}, such that {@code P(X < x) p}.\n+     * {@code x}, such that {@code P(X <= x) <= p}.\n      * It will return -1 when p = 0 and {@code Integer.MAX_VALUE} when p = 1.\n      *\n      * @param p Desired probability.\n-     * @return the largest {@code x} such that {@code P(X < x) <= p}.\n+     * @return the largest {@code x} such that {@code P(X <= x) <= p}.\n      * @throws MathException if the inverse cumulative probability can not be\n      * computed due to convergence or other numerical errors.\n      * @throws OutOfRangeException if {@code p < 0} or {@code p > 1}.", "timestamp": 1307899189, "metainfo": ""}