{"sha": "bb06e31d27ea3a58ac4a82c28eda6aff55d6bda8", "log": "Added a test.   ", "commit": "\n--- a/src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java\n package org.apache.commons.math.linear;\n \n import java.util.Random;\n+import org.apache.commons.math.linear.SingularMatrixException;\n \n import org.junit.Assert;\n import org.junit.Test;\n \n \n public class QRDecompositionTest {\n-    double[][] testData3x3NonSingular = {\n+    private double[][] testData3x3NonSingular = {\n             { 12, -51, 4 },\n             { 6, 167, -68 },\n             { -4, 24, -41 }, };\n \n-    double[][] testData3x3Singular = {\n+    private double[][] testData3x3Singular = {\n             { 1, 4, 7, },\n             { 2, 5, 8, },\n             { 3, 6, 9, }, };\n \n-    double[][] testData3x4 = {\n+    private double[][] testData3x4 = {\n             { 12, -51, 4, 1 },\n             { 6, 167, -68, 2 },\n             { -4, 24, -41, 3 }, };\n \n-    double[][] testData4x3 = {\n+    private double[][] testData4x3 = {\n             { 12, -51, 4, },\n             { 6, 167, -68, },\n             { -4, 24, -41, },\n \n     }\n \n+    @Test(expected=SingularMatrixException.class)\n+    public void testNonInvertible() {\n+        QRDecomposition qr =\n+            new QRDecomposition(MatrixUtils.createRealMatrix(testData3x3Singular));\n+\n+        final RealMatrix inv = qr.getSolver().getInverse();\n+    }\n+\n     private RealMatrix createTestMatrix(final Random r, final int rows, final int columns) {\n         RealMatrix m = MatrixUtils.createRealMatrix(rows, columns);\n         m.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor(){", "timestamp": 1326468814, "metainfo": ""}