{"sha": "f85bf2e3b786f7f724ef09f5863470142b3bfca6", "log": "pulled some solve-related methods higher in the classes hierarchy (isNonSinglular(), getInverse())  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/DecompositionSolver.java\n+++ b/src/java/org/apache/commons/math/linear/DecompositionSolver.java\n      * for {@link LUDecomposition})\n      */\n     void decompose(RealMatrix matrix)\n-      throws InvalidMatrixException;\n+        throws InvalidMatrixException;\n \n     /** Solve the linear equation A &times; X = B.\n      * <p>The A matrix is implicit here. It <strong>must</strong> have\n      * @exception InvalidMatrixException if decomposed matrix is singular\n      */\n     double[] solve(double[] b)\n-      throws IllegalStateException, IllegalArgumentException, InvalidMatrixException;\n+        throws IllegalStateException, IllegalArgumentException, InvalidMatrixException;\n \n     /** Solve the linear equation A &times; X = B.\n      * <p>The A matrix is implicit here. It <strong>must</strong> have\n      * @exception InvalidMatrixException if decomposed matrix is singular\n      */\n     RealVector solve(RealVector b)\n-      throws IllegalStateException, IllegalArgumentException, InvalidMatrixException;\n+        throws IllegalStateException, IllegalArgumentException, InvalidMatrixException;\n \n     /** Solve the linear equation A &times; X = B.\n      * <p>The A matrix is implicit here. It <strong>must</strong> have\n      * @exception InvalidMatrixException if decomposed matrix is singular\n      */\n     RealMatrix solve(RealMatrix b)\n-      throws IllegalStateException, IllegalArgumentException, InvalidMatrixException;\n+        throws IllegalStateException, IllegalArgumentException, InvalidMatrixException;\n+\n+    /**\n+     * Check if the decomposed matrix is non-singular.\n+     * @return true if the decomposed matrix is non-singular\n+     * @exception IllegalStateException if {@link\n+     * DecompositionSolver#decompose(RealMatrix) decompose} has not been called\n+     */\n+    boolean isNonSingular() throws IllegalStateException;\n+\n+    /** Get the inverse of the decomposed matrix.\n+     * @return inverse matrix\n+     * @exception IllegalStateException if {@link #decompose(RealMatrix) decompose}\n+     * has not been called\n+     * @throws InvalidMatrixException if decomposed matrix is singular\n+     */\n+    RealMatrix getInverse()\n+        throws IllegalStateException, InvalidMatrixException;\n \n }\n--- a/src/java/org/apache/commons/math/linear/LUDecomposition.java\n+++ b/src/java/org/apache/commons/math/linear/LUDecomposition.java\n     int[] getPivot() throws IllegalStateException;\n \n     /**\n-     * Check if the decomposed matrix is non-singular.\n-     * @return true if the decomposed matrix is non-singular\n-     * @exception IllegalStateException if {@link\n-     * DecompositionSolver#decompose(RealMatrix) decompose} has not been called\n-     * @see #getDeterminant()\n-     */\n-    boolean isNonSingular() throws IllegalStateException;\n-\n-    /**\n      * Return the determinant of the matrix\n      * @return determinant of the matrix\n      * @exception IllegalStateException if {@link\n--- a/src/java/org/apache/commons/math/linear/LUDecompositionImpl.java\n+++ b/src/java/org/apache/commons/math/linear/LUDecompositionImpl.java\n public class LUDecompositionImpl implements LUDecomposition {\n \n     /** Serializable version identifier. */\n-    private static final long serialVersionUID = -9052751605297201067L;\n+    private static final long serialVersionUID = 3446121671437672843L;\n \n     /** Entries of LU decomposition. */\n     private double lu[][];\n     public void decompose(RealMatrix matrix, double singularityThreshold)\n         throws InvalidMatrixException {\n         if (!matrix.isSquare()) {\n-            throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n+            throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square\");\n         }\n         final int m = matrix.getColumnDimension();\n         lu = matrix.getData();\n \n     }\n \n+    /** {@inheritDoc} */\n+    public RealMatrix getInverse()\n+        throws IllegalStateException, InvalidMatrixException {\n+        checkDecomposed();\n+        return solve(MatrixUtils.createRealIdentityMatrix(pivot.length));\n+    }\n+\n     /**\n      * Check if either {@link #decompose(RealMatrix)} or {@link\n      * #decompose(RealMatrix, double) has been called.\n--- a/src/java/org/apache/commons/math/linear/QRDecomposition.java\n+++ b/src/java/org/apache/commons/math/linear/QRDecomposition.java\n  * <a href=\"http://math.nist.gov/javanumerics/jama/\">JAMA</a> library, with the\n  * following changes:</p>\n  * <ul>\n- *   <li>several signatures have been added for the <code>solve</code> methods (in the superinterface),</code>\n- *   <li>a <code>decompose</code> method has been added (in the superinterface),</code>\n+ *   <li>several signatures have been added for the <code>solve</code> methods\n+ *   (in the superinterface),</li>\n+ *   <li>a {@link DecompositionSolver#decompose(RealMatrix) decompose} method\n+ *   has been added (in the superinterface),</li>\n+ *   <li>the <code>isFullRank</code> method has been replaced by the {@link\n+ *   DecompositionSolver#isNonSingular() isNonSingular} method in the superinterface.</li>\n  * </ul>\n  *   \n  * @see <a href=\"http://mathworld.wolfram.com/QRDecomposition.html\">MathWorld</a>\n      */\n     RealMatrix getH() throws IllegalStateException;\n \n-    /**\n-     * Check if the decomposed matrix is full rank.\n-     * @return true if the decomposed matrix is full rank\n-     * @exception IllegalStateException if {@link\n-     * DecompositionSolver#decompose(RealMatrix) decompose} has not been called\n-     */\n-    boolean isFullRank() throws IllegalStateException;\n-\n }\n--- a/src/java/org/apache/commons/math/linear/QRDecompositionImpl.java\n+++ b/src/java/org/apache/commons/math/linear/QRDecompositionImpl.java\n public class QRDecompositionImpl implements QRDecomposition {\n \n     /** Serializable version identifier. */\n-    private static final long serialVersionUID = 7560093145655650408L;\n+    private static final long serialVersionUID = -5179446891802932307L;\n \n     /**\n      * A packed TRANSPOSED representation of the QR decomposition.\n     }\n \n     /** {@inheritDoc} */\n-    public boolean isFullRank()\n+    public boolean isNonSingular()\n         throws IllegalStateException {\n \n         checkDecomposed();\n         if (b.length != m) {\n             throw new IllegalArgumentException(\"Incorrect row dimension\");\n         }\n-        if (!isFullRank()) {\n+        if (!isNonSingular()) {\n             throw new InvalidMatrixException(\"Matrix is rank-deficient\");\n         }\n \n         if (b.getRowDimension() != m) {\n             throw new IllegalArgumentException(\"Incorrect row dimension\");\n         }\n-        if (!isFullRank()) {\n+        if (!isNonSingular()) {\n             throw new InvalidMatrixException(\"Matrix is rank-deficient\");\n         }\n \n \n         return new RealMatrixImpl(xData, false);\n \n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealMatrix getInverse()\n+        throws IllegalStateException, InvalidMatrixException {\n+        checkDecomposed();\n+        return solve(MatrixUtils.createRealIdentityMatrix(rDiag.length));\n     }\n \n     /**\n--- a/src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java\n     public void testRank() {\n         QRDecomposition qr =\n             new QRDecompositionImpl(new RealMatrixImpl(testData3x3NonSingular, false));\n-        assertTrue(qr.isFullRank());\n+        assertTrue(qr.isNonSingular());\n \n         qr = new QRDecompositionImpl(new RealMatrixImpl(testData3x3Singular, false));\n-        assertFalse(qr.isFullRank());\n+        assertFalse(qr.isNonSingular());\n \n         qr = new QRDecompositionImpl(new RealMatrixImpl(testData3x4, false));\n-        assertFalse(qr.isFullRank());\n+        assertFalse(qr.isNonSingular());\n \n         qr = new QRDecompositionImpl(new RealMatrixImpl(testData4x3, false));\n-        assertTrue(qr.isFullRank());\n+        assertTrue(qr.isNonSingular());\n \n     }\n \n     /** test no call to decompose */\n     public void testNoDecompose() {\n         try {\n-            new QRDecompositionImpl().isFullRank();\n+            new QRDecompositionImpl().isNonSingular();\n             fail(\"an exception should have been caught\");\n         } catch (IllegalStateException ise) {\n             // expected behavior", "timestamp": 1222617107, "metainfo": ""}