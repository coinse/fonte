{"sha": "5b07ef0c551e36a188c92c050963735dd0ccbf7d", "log": "Removed illegal @Override.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n      *\n      * @return 0\n      */\n-    @Override\n     public final double probability(double x) {\n         return 0.0;\n     }\n     /**\n      * {@inheritDoc}\n      */\n-    @Override\n     public double inverseCumulativeProbability(final double p) throws OutOfRangeException {\n \n         if (p < 0.0 || p > 1.0) {\n         // subclasses can override if there is a better method.\n         UnivariateRealFunction rootFindingFunction =\n             new UnivariateRealFunction() {\n-            @Override\n             public double value(double x) {\n                 return cumulativeProbability(x) - p;\n             }\n      * @param seed New seed.\n      * @since 2.2\n      */\n-    @Override\n     public void reseedRandomGenerator(long seed) {\n         randomData.reSeed(seed);\n     }\n      * @return a random value.\n      * @since 2.2\n      */\n-    @Override\n     public double sample() {\n         return randomData.nextInversionDeviate(this);\n     }\n      * @throws NotStrictlyPositiveException if {@code sampleSize} is not positive.\n      * @since 2.2\n      */\n-    @Override\n     public double[] sample(int sampleSize) {\n         if (sampleSize <= 0) {\n             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n--- a/src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java\n      * The default implementation uses the identity\n      * <p>{@code P(x0 < X <= x1) = P(X <= x1) - P(X <= x0)}</p>\n      */\n-    @Override\n     public double cumulativeProbability(double x0, double x1) throws NumberIsTooLargeException {\n         if (x0 > x1) {\n             throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,\n      *\n      * @return the mean or Double.NaN if it's not defined\n      */\n-    @Override\n     public double getNumericalMean() {\n         if (!numericalMeanIsCalculated) {\n             numericalMean = calculateNumericalMean();\n      * for certain cases in {@link TDistributionImpl}) or\n      * Double.NaN if it's not defined\n      */\n-    @Override\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n      *\n      * @return whether the lower bound of the support is inclusive or not\n      */\n-    @Override\n     public abstract boolean isSupportLowerBoundInclusive();\n \n     /**\n      *\n      * @return whether the upper bound of the support is inclusive or not\n      */\n-    @Override\n     public abstract boolean isSupportUpperBoundInclusive();\n \n     /**\n      *\n      * @return whether the support limits given by subclassed methods are connected or not\n      */\n-    @Override\n     public boolean isSupportConnected() {\n         return true;\n     }\n--- a/src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java\n     /**\n      * {@inheritDoc}\n      */\n-    @Override\n     public double density(double x) {\n         recomputeZ();\n         if (x < 0 || x > 1) {\n--- a/src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java\n     /**\n      * {@inheritDoc}\n      */\n-    @Override\n     public double cumulativeProbability(double x) {\n         return 0.5 + (FastMath.atan((x - median) / scale) / FastMath.PI);\n     }\n     /**\n      * {@inheritDoc}\n      */\n-    @Override\n     public double getMedian() {\n         return median;\n     }\n     /**\n      * {@inheritDoc}\n      */\n-    @Override\n     public double getScale() {\n         return scale;\n     }\n     /**\n      * {@inheritDoc}\n      */\n-    @Override\n     public double density(double x) {\n         final double dev = x - median;\n         return (1 / FastMath.PI) * (scale / (dev * dev + scale * scale));\n--- a/src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n     /**\n      * {@inheritDoc}\n      */\n-    @Override\n     public double getDegreesOfFreedom() {\n         return gamma.getAlpha() * 2.0;\n     }\n     /**\n      * {@inheritDoc}\n      */\n-    @Override\n     public double density(double x) {\n         return gamma.density(x);\n     }\n     /**\n      * {@inheritDoc}\n      */\n-    @Override\n     public double cumulativeProbability(double x)  {\n         return gamma.cumulativeProbability(x);\n     }\n--- a/src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n     /**\n      * {@inheritDoc}\n      */\n-    @Override\n     public double getMean() {\n         return mean;\n     }\n     /**\n      * {@inheritDoc}\n      */\n-    @Override\n     public double density(double x) {\n         if (x < 0) {\n             return 0;\n      * Exponential Distribution</a>, equation (1).</li>\n      * </ul>\n      */\n-    @Override\n     public double cumulativeProbability(double x)  {\n         double ret;\n         if (x <= 0.0) {\n--- a/src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java\n      *\n      * @since 2.1\n      */\n-    @Override\n     public double density(double x) {\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n         final double mhalf = denominatorDegreesOfFreedom / 2;\n      *  </li>\n      * </ul>\n      */\n-    @Override\n     public double cumulativeProbability(double x)  {\n         double ret;\n         if (x <= 0) {\n     /**\n      * {@inheritDoc}\n      */\n-    @Override\n     public double getNumeratorDegreesOfFreedom() {\n         return numeratorDegreesOfFreedom;\n     }\n     /**\n      * {@inheritDoc}\n      */\n-    @Override\n     public double getDenominatorDegreesOfFreedom() {\n         return denominatorDegreesOfFreedom;\n     }\n--- a/src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n      *  </li>\n      * </ul>\n      */\n-    @Override\n     public double cumulativeProbability(double x) {\n         double ret;\n \n     /**\n      * {@inheritDoc}\n      */\n-    @Override\n     public double getAlpha() {\n         return alpha;\n     }\n     /**\n      * {@inheritDoc}\n      */\n-    @Override\n     public double getBeta() {\n         return beta;\n     }\n     /**\n      * {@inheritDoc}\n      */\n-    @Override\n     public double density(double x) {\n         if (x < 0) {\n             return 0;\n--- a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n     /**\n      * {@inheritDoc}\n      */\n-    @Override\n     public double getMean() {\n         return mean;\n     }\n     /**\n      * {@inheritDoc}\n      */\n-    @Override\n     public double getStandardDeviation() {\n         return standardDeviation;\n     }\n     /**\n      * {@inheritDoc}\n      */\n-    @Override\n     public double density(double x) {\n         final double x0 = x - mean;\n         final double x1 = x0 / standardDeviation;\n      * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,\n      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.\n      */\n-    @Override\n     public double cumulativeProbability(double x)  {\n         final double dev = x - mean;\n         if (FastMath.abs(dev) > 40 * standardDeviation) {\n--- a/src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java\n      *\n      * @return the degrees of freedom.\n      */\n-    @Override\n     public double getDegreesOfFreedom() {\n         return degreesOfFreedom;\n     }\n     /**\n      * {@inheritDoc}\n      */\n-    @Override\n     public double density(double x) {\n         final double n = degreesOfFreedom;\n         final double nPlus1Over2 = (n + 1) / 2;\n     /**\n      * {@inheritDoc}\n      */\n-    @Override\n     public double cumulativeProbability(double x) {\n         double ret;\n         if (x == 0) {\n--- a/src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java\n     /**\n      * {@inheritDoc}\n      */\n-    @Override\n     public double cumulativeProbability(double x) {\n         double ret;\n         if (x <= 0.0) {\n     /**\n      * {@inheritDoc}\n      */\n-    @Override\n     public double getShape() {\n         return shape;\n     }\n     /**\n      * {@inheritDoc}\n      */\n-    @Override\n     public double getScale() {\n         return scale;\n     }\n     /**\n      * {@inheritDoc}\n      */\n-    @Override\n     public double density(double x) {\n         if (x < 0) {\n             return 0;", "timestamp": 1320934266, "metainfo": ""}