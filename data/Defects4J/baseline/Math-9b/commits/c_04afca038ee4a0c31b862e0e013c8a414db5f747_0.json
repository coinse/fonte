{"sha": "04afca038ee4a0c31b862e0e013c8a414db5f747", "log": "removed spurious exception in optimization  ", "commit": "\n--- a/src/test/org/apache/commons/math/ArgumentOutsideDomainExceptionTest.java\n+++ b/src/test/org/apache/commons/math/ArgumentOutsideDomainExceptionTest.java\n         assertNull(ex.getCause());\n         assertNotNull(ex.getMessage());\n         assertTrue(ex.getMessage().indexOf(\"3.14\") > 0);\n-        assertEquals(Math.PI, ex.getArgument(), 0);\n+        assertEquals(Math.PI, ex.getArgument()[0], 0);\n         assertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));\n     }\n     \n--- a/src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java\n+++ b/src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java\n         assertNull(ex.getCause());\n         assertNotNull(ex.getMessage());\n         assertTrue(ex.getMessage().indexOf(\"0\") > 0);\n-        assertEquals(0.0, ex.getArgument(), 0);\n+        assertEquals(0.0, ex.getArgument()[0], 0);\n+    }\n+    \n+    public void testConstructorArray(){\n+        FunctionEvaluationException ex =\n+            new FunctionEvaluationException(new double[] { 0, 1, 2 });\n+        assertNull(ex.getCause());\n+        assertNotNull(ex.getMessage());\n+        assertTrue(ex.getMessage().indexOf(\"0\") > 0);\n+        assertEquals(0.0, ex.getArgument()[0], 0);\n+        assertEquals(1.0, ex.getArgument()[1], 0);\n+        assertEquals(2.0, ex.getArgument()[2], 0);\n     }\n     \n     public void testConstructorPatternArguments(){\n-        String pattern = \"Evaluation failed for argument = {0}\";\n+        String pattern = \"evaluation failed for argument = {0}\";\n         Object[] arguments = { Double.valueOf(0.0) };\n         FunctionEvaluationException ex = new FunctionEvaluationException(0.0, pattern, arguments);\n         assertNull(ex.getCause());\n         assertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));\n     }\n \n+    public void testConstructorArrayPatternArguments(){\n+        String pattern = \"evaluation failed for argument = {0}\";\n+        Object[] arguments = { Double.valueOf(0.0) };\n+        FunctionEvaluationException ex =\n+            new FunctionEvaluationException(new double[] { 0, 1, 2 }, pattern, arguments);\n+        assertNull(ex.getCause());\n+        assertEquals(pattern, ex.getPattern());\n+        assertEquals(arguments.length, ex.getArguments().length);\n+        for (int i = 0; i < arguments.length; ++i) {\n+            assertEquals(arguments[i], ex.getArguments()[i]);\n+        }\n+        assertFalse(pattern.equals(ex.getMessage()));\n+        assertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));\n+        assertEquals(0.0, ex.getArgument()[0], 0);\n+        assertEquals(1.0, ex.getArgument()[1], 0);\n+        assertEquals(2.0, ex.getArgument()[2], 0);\n+    }\n+\n     public void testConstructorPatternArgumentsCause(){\n-        String pattern = \"Evaluation failed for argument = {0}\";\n+        String pattern = \"evaluation failed for argument = {0}\";\n         Object[] arguments = { Double.valueOf(0.0) };\n         String inMsg = \"inner message\";\n         Exception cause = new Exception(inMsg);\n         assertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));\n     }\n \n+    public void testConstructorArrayPatternArgumentsCause(){\n+        String pattern = \"evaluation failed for argument = {0}\";\n+        Object[] arguments = { Double.valueOf(0.0) };\n+        String inMsg = \"inner message\";\n+        Exception cause = new Exception(inMsg);\n+        FunctionEvaluationException ex =\n+            new FunctionEvaluationException(cause, new double[] { 0, 1, 2 }, pattern, arguments);\n+        assertEquals(cause, ex.getCause());\n+        assertEquals(pattern, ex.getPattern());\n+        assertEquals(arguments.length, ex.getArguments().length);\n+        for (int i = 0; i < arguments.length; ++i) {\n+            assertEquals(arguments[i], ex.getArguments()[i]);\n+        }\n+        assertFalse(pattern.equals(ex.getMessage()));\n+        assertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));\n+        assertEquals(0.0, ex.getArgument()[0], 0);\n+        assertEquals(1.0, ex.getArgument()[1], 0);\n+        assertEquals(2.0, ex.getArgument()[2], 0);\n+    }\n+\n     public void testConstructorArgumentCause(){\n         String inMsg = \"inner message\";\n         Exception cause = new Exception(inMsg);\n         assertTrue(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));\n     }\n \n+    public void testConstructorArrayArgumentCause(){\n+        String inMsg = \"inner message\";\n+        Exception cause = new Exception(inMsg);\n+        FunctionEvaluationException ex =\n+            new FunctionEvaluationException(cause, new double[] { 0, 1, 2 });\n+        assertEquals(cause, ex.getCause());\n+        assertTrue(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));\n+        assertEquals(0.0, ex.getArgument()[0], 0);\n+        assertEquals(1.0, ex.getArgument()[1], 0);\n+        assertEquals(2.0, ex.getArgument()[2], 0);\n+    }\n+\n }", "timestamp": 1237932616, "metainfo": ""}