{"sha": "377990836d633f7ec9837b5c6b75efbce549ca68", "log": "- Corrected expressions for mean and variance in distribution.PascalDistribution (MATH-715). - Made javadoc more explicit - Restored SVN properties to various files in package distribution.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java\n     /** Serializable version identifier */\n     private static final long serialVersionUID = -38038050983108802L;\n \n+    /** RandomData instance used to generate samples from the distribution. */\n+    protected final RandomDataImpl randomData = new RandomDataImpl();\n+\n     /** Solver absolute accuracy for inverse cumulative computation */\n     private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;\n-\n-    /** RandomData instance used to generate samples from the distribution. */\n-    protected final RandomDataImpl randomData = new RandomDataImpl();\n \n     /** Default constructor. */\n     protected AbstractRealDistribution() { }\n--- a/src/main/java/org/apache/commons/math/distribution/PascalDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/PascalDistribution.java\n  * </p>\n  * <p>\n  * There are various ways to express the probability mass and distribution\n- * functions for the Pascal distribution.  The convention employed by the\n- * library is to express these functions in terms of the number of failures in\n- * a Bernoulli experiment\n- * (see <a href=\"http://en.wikipedia.org/wiki/Negative_binomial_distribution#Waiting_time_in_a_Bernoulli_process\">Waiting Time in a Bernoulli Process</a>).\n+ * functions for the Pascal distribution. The present implementation represents\n+ * the distribution of the number of failures before {@code r} successes occur.\n+ * This is the convention adopted in e.g.\n+ * <a href=\"http://mathworld.wolfram.com/NegativeBinomialDistribution.html\">MathWorld</a>,\n+ * but <em>not</em> in\n+ * <a href=\"http://en.wikipedia.org/wiki/Negative_binomial_distribution\">Wikipedia</a>.\n+ * </p>\n+ * <p>\n+ * For a random variable {@code X} whose values are distributed according to this\n+ * distribution, the probability mass function is given by<br/>\n+ * {@code P(X = k) = C(k + r - 1, r - 1) * p^r * (1 - p)^k,}<br/>\n+ * where {@code r} is the number of successes, {@code p} is the probability of\n+ * success, and {@code X} is the total number of failures. {@code C(n, k)} is\n+ * the binomial coefficient ({@code n} choose {@code k}). The mean and variance\n+ * of {@code X} are<br/>\n+ * {@code E(X) = (1 - p) * r / p, var(X) = (1 - p) * r / p^2.}<br/>\n+ * Finally, the cumulative distribution function is given by<br/>\n+ * {@code P(X <= k) = I(p, r, k + 1)},\n+ * where I is the regularized incomplete Beta function.\n  * </p>\n  *\n  * @see <a href=\"http://en.wikipedia.org/wiki/Negative_binomial_distribution\">\n      * {@inheritDoc}\n      *\n      * For number of successes {@code r} and probability of success {@code p},\n-     * the mean is {@code (r * p) / (1 - p)}.\n+     * the mean is {@code r * (1 - p) / p}.\n      */\n     public double getNumericalMean() {\n         final double p = getProbabilityOfSuccess();\n         final double r = getNumberOfSuccesses();\n-        return (r * p) / (1 - p);\n+        return (r * (1 - p)) / p;\n     }\n \n     /**\n      * {@inheritDoc}\n      *\n      * For number of successes {@code r} and probability of success {@code p},\n-     * the variance is {@code (r * p) / (1 - p)^2}.\n+     * the variance is {@code r * (1 - p) / p^2}.\n      */\n     public double getNumericalVariance() {\n         final double p = getProbabilityOfSuccess();\n         final double r = getNumberOfSuccesses();\n-        final double pInv = 1 - p;\n-        return (r * p) / (pInv * pInv);\n+        return r * (1 - p) / (p * p);\n     }\n \n     /**", "timestamp": 1323072938, "metainfo": ""}