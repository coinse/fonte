{"sha": "83ba9853e51e7f93cb741d56609faefc8600caaa", "log": "Replaced deprecated exceptions.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/complex/ComplexUtils.java\n+++ b/src/main/java/org/apache/commons/math/complex/ComplexUtils.java\n \n package org.apache.commons.math.complex;\n \n-import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.FastMath;\n \n      * @param r the modulus of the complex number to create\n      * @param theta  the argument of the complex number to create\n      * @return <code>r&middot;e<sup>i&middot;theta</sup></code>\n-     * @throws IllegalArgumentException  if r is negative\n+     * @throws MathIllegalArgumentException  if r is negative\n      * @since 1.1\n      */\n     public static Complex polar2Complex(double r, double theta) {\n         if (r < 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n+            throw new MathIllegalArgumentException(\n                   LocalizedFormats.NEGATIVE_COMPLEX_MODULE, r);\n         }\n         return new Complex(r * FastMath.cos(theta), r * FastMath.sin(theta));\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/CardanEulerSingularityException.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/CardanEulerSingularityException.java\n \n package org.apache.commons.math.geometry.euclidean.threed;\n \n-import org.apache.commons.math.MathException;\n+import org.apache.commons.math.exception.MathIllegalStateException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /** This class represents exceptions thrown while extractiong Cardan\n  * @since 1.2\n  */\n public class CardanEulerSingularityException\n-  extends MathException {\n+  extends MathIllegalStateException {\n \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -1360952845582206770L;\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/NotARotationMatrixException.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/NotARotationMatrixException.java\n \n package org.apache.commons.math.geometry.euclidean.threed;\n \n-import org.apache.commons.math.MathException;\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.apache.commons.math.exception.util.Localizable;\n \n /**\n  */\n \n public class NotARotationMatrixException\n-  extends MathException {\n+  extends MathIllegalArgumentException {\n \n     /** Serializable version identifier */\n     private static final long serialVersionUID = 5647178478658937642L;\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n \n import java.io.Serializable;\n \n-import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.FastMath;\n \n    * attitude community or in the graphics community.</p>\n    * @param axis axis around which to rotate\n    * @param angle rotation angle.\n-   * @exception ArithmeticException if the axis norm is zero\n+   * @exception MathIllegalArgumentException if the axis norm is zero\n    */\n   public Rotation(Vector3D axis, double angle) {\n \n     double norm = axis.getNorm();\n     if (norm == 0) {\n-      throw MathRuntimeException.createArithmeticException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_AXIS);\n+      throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_AXIS);\n     }\n \n     double halfAngle = -0.5 * angle;\n    * @param u2 second vector of the origin pair\n    * @param v1 desired image of u1 by the rotation\n    * @param v2 desired image of u2 by the rotation\n-   * @exception IllegalArgumentException if the norm of one of the vectors is zero\n+   * @exception MathIllegalArgumentException if the norm of one of the vectors is zero\n    */\n   public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n \n   double v1v1 = v1.getNormSq();\n   double v2v2 = v2.getNormSq();\n   if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n-    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n+    throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n   }\n \n   // normalize v1 in order to have (v1'|v1') = (u1|u1)\n \n    * @param u origin vector\n    * @param v desired image of u by the rotation\n-   * @exception IllegalArgumentException if the norm of one of the vectors is zero\n+   * @exception MathIllegalArgumentException if the norm of one of the vectors is zero\n    */\n   public Rotation(Vector3D u, Vector3D v) {\n \n     double normProduct = u.getNorm() * v.getNorm();\n     if (normProduct == 0) {\n-        throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n+        throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n     }\n \n     double dot = u.dotProduct(v);\n--- a/src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java\n+++ b/src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java\n \n package org.apache.commons.math.geometry.euclidean.threed;\n \n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.apache.commons.math.util.FastMath;\n import org.apache.commons.math.util.MathUtils;\n import org.junit.Assert;\n     try {\n       new Rotation(new Vector3D(0, 0, 0), 2 * FastMath.PI / 3);\n       Assert.fail(\"an exception should have been thrown\");\n-    } catch (ArithmeticException e) {\n+    } catch (MathIllegalArgumentException e) {\n     }\n \n     r = new Rotation(Vector3D.PLUS_K, 1.5 * FastMath.PI);", "timestamp": 1317499282, "metainfo": ""}