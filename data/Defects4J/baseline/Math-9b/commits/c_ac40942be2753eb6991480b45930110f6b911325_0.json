{"sha": "ac40942be2753eb6991480b45930110f6b911325", "log": "No point catching and then calling fail - just let JUnit do the work  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java\n+++ b/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java\n         assertEquals(expectedDenominator, actual.getDenominatorAsLong());\n     }\n \n-    public void testConstructor() {\n+    public void testConstructor() throws Exception {\n         assertFraction(0, 1, new BigFraction(0, 1));\n         assertFraction(0, 1, new BigFraction(0l, 2l));\n         assertFraction(0, 1, new BigFraction(0, -1));\n         assertFraction(11, 1, new BigFraction(11l));\n         assertFraction(11, 1, new BigFraction(new BigInteger(\"11\")));\n \n-        try {\n-            assertFraction(0, 1, new BigFraction(0.00000000000001, 1.0e-5, 100));\n-            assertFraction(2, 5, new BigFraction(0.40000000000001, 1.0e-5, 100));\n-            assertFraction(15, 1, new BigFraction(15.0000000000001, 1.0e-5, 100));\n-        } catch (ConvergenceException ex) {\n-            fail(ex.getMessage());\n-        }\n+        assertFraction(0, 1, new BigFraction(0.00000000000001, 1.0e-5, 100));\n+        assertFraction(2, 5, new BigFraction(0.40000000000001, 1.0e-5, 100));\n+        assertFraction(15, 1, new BigFraction(15.0000000000001, 1.0e-5, 100));\n+\n         assertEquals(0.00000000000001, new BigFraction(0.00000000000001).doubleValue(), 0.0);\n         assertEquals(0.40000000000001, new BigFraction(0.40000000000001).doubleValue(), 0.0);\n         assertEquals(15.0000000000001, new BigFraction(15.0000000000001).doubleValue(), 0.0);\n--- a/src/test/java/org/apache/commons/math/fraction/FractionTest.java\n+++ b/src/test/java/org/apache/commons/math/fraction/FractionTest.java\n         assertEquals(expectedDenominator, actual.getDenominator());\n     }\n \n-    public void testConstructor() {\n+    public void testConstructor() throws Exception {\n         assertFraction(0, 1, new Fraction(0, 1));\n         assertFraction(0, 1, new Fraction(0, 2));\n         assertFraction(0, 1, new Fraction(0, -1));\n         } catch (MathArithmeticException ex) {\n             // success\n         }\n-        try {\n-            assertFraction(0, 1, new Fraction(0.00000000000001));\n-            assertFraction(2, 5, new Fraction(0.40000000000001));\n-            assertFraction(15, 1, new Fraction(15.0000000000001));\n-\n-        } catch (ConvergenceException ex) {\n-            fail(ex.getMessage());\n-        }\n+        assertFraction(0, 1, new Fraction(0.00000000000001));\n+        assertFraction(2, 5, new Fraction(0.40000000000001));\n+        assertFraction(15, 1, new Fraction(15.0000000000001));\n     }\n \n     public void testGoldenRatio() {\n         assertEquals(1L, second.longValue());\n     }\n \n-    public void testConstructorDouble() {\n-        try {\n-            assertFraction(1, 2, new Fraction(0.5));\n-            assertFraction(1, 3, new Fraction(1.0 / 3.0));\n-            assertFraction(17, 100, new Fraction(17.0 / 100.0));\n-            assertFraction(317, 100, new Fraction(317.0 / 100.0));\n-            assertFraction(-1, 2, new Fraction(-0.5));\n-            assertFraction(-1, 3, new Fraction(-1.0 / 3.0));\n-            assertFraction(-17, 100, new Fraction(17.0 / -100.0));\n-            assertFraction(-317, 100, new Fraction(-317.0 / 100.0));\n-        } catch (ConvergenceException ex) {\n-            fail(ex.getMessage());\n-        }\n+    public void testConstructorDouble() throws Exception {\n+        assertFraction(1, 2, new Fraction(0.5));\n+        assertFraction(1, 3, new Fraction(1.0 / 3.0));\n+        assertFraction(17, 100, new Fraction(17.0 / 100.0));\n+        assertFraction(317, 100, new Fraction(317.0 / 100.0));\n+        assertFraction(-1, 2, new Fraction(-0.5));\n+        assertFraction(-1, 3, new Fraction(-1.0 / 3.0));\n+        assertFraction(-17, 100, new Fraction(17.0 / -100.0));\n+        assertFraction(-317, 100, new Fraction(-317.0 / 100.0));\n     }\n \n     public void testAbs() {\n--- a/src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java\n     public void testParseSimpleNoDecimals() {\n         String source = \"{1; 1; 1}\";\n         Vector3D expected = new Vector3D(1, 1, 1);\n-        try {\n-            Vector3D actual = vector3DFormat.parse(source);\n-            Assert.assertEquals(expected, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        Vector3D actual = vector3DFormat.parse(source);\n+        Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n             \"43; 1\" + getDecimalCharacter() +\n             \"63}\";\n         Vector3D expected = new Vector3D(1.23, 1.43, 1.63);\n-        try {\n-            Vector3D actual = vector3DFormat.parse(source);\n-            Assert.assertEquals(expected, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        Vector3D actual = vector3DFormat.parse(source);\n+        Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n             \"4343; 1\" + getDecimalCharacter() +\n             \"6333}\";\n         Vector3D expected = new Vector3D(1.2323, 1.4343, 1.6333);\n-        try {\n-            Vector3D actual = vector3DFormat.parse(source);\n-            Assert.assertEquals(expected, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        Vector3D actual = vector3DFormat.parse(source);\n+        Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n             \"4343; 1\" + getDecimalCharacter() +\n             \"6333}\";\n         Vector3D expected = new Vector3D(-1.2323, 1.4343, 1.6333);\n-        try {\n-            Vector3D actual = vector3DFormat.parse(source);\n-            Assert.assertEquals(expected, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        Vector3D actual = vector3DFormat.parse(source);\n+        Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n             \"4343; 1\" + getDecimalCharacter() +\n             \"6333}\";\n         Vector3D expected = new Vector3D(1.2323, -1.4343, 1.6333);\n-        try {\n-            Vector3D actual = vector3DFormat.parse(source);\n-            Assert.assertEquals(expected, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        Vector3D actual = vector3DFormat.parse(source);\n+        Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n             \"4343; -1\" + getDecimalCharacter() +\n             \"6333}\";\n         Vector3D expected = new Vector3D(1.2323, 1.4343, -1.6333);\n-        try {\n-            Vector3D actual = vector3DFormat.parse(source);\n-            Assert.assertEquals(expected, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        Vector3D actual = vector3DFormat.parse(source);\n+        Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n             \"4343; -1\" + getDecimalCharacter() +\n             \"6333}\";\n         Vector3D expected = new Vector3D(-1.2323, -1.4343, -1.6333);\n-        try {\n-            Vector3D actual = vector3DFormat.parse(source);\n-            Assert.assertEquals(expected, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        Vector3D actual = vector3DFormat.parse(source);\n+        Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n             \"4343; 1\" + getDecimalCharacter() +\n             \"6333}\";\n         Vector3D expected = new Vector3D(0.0, -1.4343, 1.6333);\n-        try {\n-            Vector3D actual = vector3DFormat.parse(source);\n-            Assert.assertEquals(expected, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        Vector3D actual = vector3DFormat.parse(source);\n+        Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n             \"4343 : 1\" + getDecimalCharacter() +\n             \"6333]\";\n         Vector3D expected = new Vector3D(1.2323, 1.4343, 1.6333);\n-        try {\n-            Vector3D actual = vector3DFormatSquare.parse(source);\n-            Assert.assertEquals(expected, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        Vector3D actual = vector3DFormatSquare.parse(source);\n+        Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n     public void testParseNan() {\n         String source = \"{(NaN); (NaN); (NaN)}\";\n-        try {\n-            Vector3D actual = vector3DFormat.parse(source);\n-            Assert.assertEquals(Vector3D.NaN, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        Vector3D actual = vector3DFormat.parse(source);\n+        Assert.assertEquals(Vector3D.NaN, actual);\n     }\n \n     @Test\n     public void testParsePositiveInfinity() {\n         String source = \"{(Infinity); (Infinity); (Infinity)}\";\n-        try {\n-            Vector3D actual = vector3DFormat.parse(source);\n-            Assert.assertEquals(Vector3D.POSITIVE_INFINITY, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        Vector3D actual = vector3DFormat.parse(source);\n+        Assert.assertEquals(Vector3D.POSITIVE_INFINITY, actual);\n     }\n \n     @Test\n     public void testParseNegativeInfinity() {\n         String source = \"{(-Infinity); (-Infinity); (-Infinity)}\";\n-        try {\n-            Vector3D actual = vector3DFormat.parse(source);\n-            Assert.assertEquals(Vector3D.NEGATIVE_INFINITY, actual);\n-        } catch (MathParseException ex) {\n-            Assert.fail(ex.getMessage());\n-        }\n+        Vector3D actual = vector3DFormat.parse(source);\n+        Assert.assertEquals(Vector3D.NEGATIVE_INFINITY, actual);\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/math/stat/FrequencyTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/FrequencyTest.java\n     /**\n      * Tests toString()\n      */\n-    public void testToString(){\n+    public void testToString() throws Exception {\n         f.addValue(oneL);\n         f.addValue(twoL);\n         f.addValue(oneI);\n         //System.out.println(s);\n         assertNotNull(s);\n         BufferedReader reader = new BufferedReader(new StringReader(s));\n-        try {\n-            String line = reader.readLine(); // header line\n-            assertNotNull(line);\n-\n-            line = reader.readLine(); // one's or two's line\n-            assertNotNull(line);\n-\n-            line = reader.readLine(); // one's or two's line\n-            assertNotNull(line);\n-\n-            line = reader.readLine(); // no more elements\n-            assertNull(line);\n-        } catch(IOException ex){\n-            fail(ex.getMessage());\n-        }\n+        String line = reader.readLine(); // header line\n+        assertNotNull(line);\n+\n+        line = reader.readLine(); // one's or two's line\n+        assertNotNull(line);\n+\n+        line = reader.readLine(); // one's or two's line\n+        assertNotNull(line);\n+\n+        line = reader.readLine(); // no more elements\n+        assertNull(line);\n     }\n \n     public void testIntegerValues() {\n--- a/src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java\n+++ b/src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java\n         super(name);\n     }\n \n-    public void testGoldenRatio(){\n+    public void testGoldenRatio() throws Exception {\n         ContinuedFraction cf = new ContinuedFraction() {\n \n             @Override\n             }\n         };\n \n-        try {\n-            double gr = cf.evaluate(0.0, 10e-9);\n-            assertEquals(1.61803399, gr, 10e-9);\n-        } catch (MathException e) {\n-            fail(e.getMessage());\n-        }\n+        double gr = cf.evaluate(0.0, 10e-9);\n+        assertEquals(1.61803399, gr, 10e-9);\n     }\n }", "timestamp": 1296611832, "metainfo": ""}