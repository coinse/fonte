{"sha": "1e33436524b3d617f36ae6bb37e5768ae5cff1a8", "log": "MATH-902 Allow stopping condition based on the number of iterations (for \"univariate\" optimizers).   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java\n package org.apache.commons.math3.optimization.univariate;\n \n import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n import org.apache.commons.math3.optimization.AbstractConvergenceChecker;\n \n /**\n  * difference between the objective function values is smaller than a\n  * threshold or if either the absolute difference between the objective\n  * function values is smaller than another threshold.\n+ * <br/>\n+ * The {@link #converged(int,UnivariatePointValuePair,UnivariatePointValuePair)\n+ * converged} method will also return {@code true} if the number of iterations\n+ * has been set (see {@link #SimpleUnivariateValueChecker(double,double,int)\n+ * this constructor}).\n  *\n  * @version $Id$\n  * @since 3.1\n public class SimpleUnivariateValueChecker\n     extends AbstractConvergenceChecker<UnivariatePointValuePair> {\n     /**\n+     * If {@link #maxIterationCount} is set to this value, the number of\n+     * iterations will never cause\n+     * {@link #converged(int,UnivariatePointValuePair,UnivariatePointValuePair)}\n+     * to return {@code true}.\n+     */\n+    private static final int ITERATION_CHECK_DISABLED = -1;\n+    /**\n+     * Number of iterations after which the\n+     * {@link #converged(int,UnivariatePointValuePair,UnivariatePointValuePair)}\n+     * method will return true (unless the check is disabled).\n+     */\n+    private final int maxIterationCount;\n+\n+    /**\n      * Build an instance with default thresholds.\n      * @deprecated See {@link AbstractConvergenceChecker#AbstractConvergenceChecker()}\n      */\n     @Deprecated\n-    public SimpleUnivariateValueChecker() {}\n+    public SimpleUnivariateValueChecker() {\n+        maxIterationCount = ITERATION_CHECK_DISABLED;\n+    }\n \n     /** Build an instance with specified thresholds.\n      *\n     public SimpleUnivariateValueChecker(final double relativeThreshold,\n                                         final double absoluteThreshold) {\n         super(relativeThreshold, absoluteThreshold);\n+        maxIterationCount = ITERATION_CHECK_DISABLED;\n+    }\n+\n+    /**\n+     * Builds an instance with specified thresholds.\n+     *\n+     * In order to perform only relative checks, the absolute tolerance\n+     * must be set to a negative value. In order to perform only absolute\n+     * checks, the relative tolerance must be set to a negative value.\n+     *\n+     * @param relativeThreshold relative tolerance threshold\n+     * @param absoluteThreshold absolute tolerance threshold\n+     * @param maxIter Maximum iteration count.\n+     * @throws NotStrictlyPositiveException if {@code maxIter <= 0}.\n+     *\n+     * @since 3.1\n+     */\n+    public SimpleUnivariateValueChecker(final double relativeThreshold,\n+                                        final double absoluteThreshold,\n+                                        final int maxIter) {\n+        super(relativeThreshold, absoluteThreshold);\n+\n+        if (maxIter <= 0) {\n+            throw new NotStrictlyPositiveException(maxIter);\n+        }\n+        maxIterationCount = maxIter;\n     }\n \n     /**\n     public boolean converged(final int iteration,\n                              final UnivariatePointValuePair previous,\n                              final UnivariatePointValuePair current) {\n+        if (maxIterationCount != ITERATION_CHECK_DISABLED) {\n+            if (iteration >= maxIterationCount) {\n+                return true;\n+            }\n+        }\n+\n         final double p = previous.getValue();\n         final double c = current.getValue();\n         final double difference = FastMath.abs(p - c);\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueCheckerTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.optimization.univariate;\n+\n+import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n+import org.junit.Test;\n+import org.junit.Assert;\n+\n+public class SimpleUnivariateValueCheckerTest {\n+    @Test(expected=NotStrictlyPositiveException.class)\n+    public void testIterationCheckPrecondition() {\n+        new SimpleUnivariateValueChecker(1e-1, 1e-2, 0);\n+    }\n+\n+    @Test\n+    public void testIterationCheck() {\n+        final int max = 10;\n+        final SimpleUnivariateValueChecker checker = new SimpleUnivariateValueChecker(1e-1, 1e-2, max);\n+        Assert.assertTrue(checker.converged(max, null, null)); \n+        Assert.assertTrue(checker.converged(max + 1, null, null));\n+    }\n+\n+    @Test\n+    public void testIterationCheckDisabled() {\n+        final SimpleUnivariateValueChecker checker = new SimpleUnivariateValueChecker(1e-8, 1e-8);\n+\n+        final UnivariatePointValuePair a = new UnivariatePointValuePair(1d, 1d);\n+        final UnivariatePointValuePair b = new UnivariatePointValuePair(10d, 10d);\n+\n+        Assert.assertFalse(checker.converged(-1, a, b));\n+        Assert.assertFalse(checker.converged(0, a, b));\n+        Assert.assertFalse(checker.converged(1000000, a, b));\n+\n+        Assert.assertTrue(checker.converged(-1, a, a));\n+        Assert.assertTrue(checker.converged(-1, b, b));\n+    }\n+\n+}", "timestamp": 1353755470, "metainfo": ""}