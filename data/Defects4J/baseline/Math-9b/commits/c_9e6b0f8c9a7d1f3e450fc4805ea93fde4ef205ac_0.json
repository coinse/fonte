{"sha": "9e6b0f8c9a7d1f3e450fc4805ea93fde4ef205ac", "log": "Replaced checked ConvergenceException with an unchecked version.  JIRA: MATH-487  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/fraction/FractionConversionException.java\n+++ b/src/main/java/org/apache/commons/math/fraction/FractionConversionException.java\n \n package org.apache.commons.math.fraction;\n \n-import org.apache.commons.math.ConvergenceException;\n+import org.apache.commons.math.exception.ConvergenceException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n--- a/src/main/java/org/apache/commons/math/fraction/FractionFormat.java\n+++ b/src/main/java/org/apache/commons/math/fraction/FractionFormat.java\n import java.text.ParsePosition;\n import java.util.Locale;\n \n-import org.apache.commons.math.ConvergenceException;\n+import org.apache.commons.math.exception.ConvergenceException;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n \n--- a/src/main/java/org/apache/commons/math/optimization/OptimizationException.java\n+++ b/src/main/java/org/apache/commons/math/optimization/OptimizationException.java\n \n package org.apache.commons.math.optimization;\n \n-import org.apache.commons.math.ConvergenceException;\n+import org.apache.commons.math.exception.ConvergenceException;\n import org.apache.commons.math.exception.util.Localizable;\n \n /**\n         super(specifier, parts);\n     }\n \n-    /**\n-     * Create an exception with a given root cause.\n-     * @param cause  the exception or error that caused this exception to be thrown\n-     */\n-    public OptimizationException(Throwable cause) {\n-        super(cause);\n-    }\n-\n }\n--- a/src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java\n     }\n \n     /** Increment the iterations counter by 1.\n-     * @exception OptimizationException if the maximal number\n+     * @exception MaxCountExceededException if the maximal number\n      * of iterations is exceeded\n      */\n     protected void incrementIterationsCounter()\n-        throws OptimizationException {\n+        throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new OptimizationException(new MaxCountExceededException(maxIterations));\n+            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java\n \n import java.util.Random;\n \n-import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.MathException;\n import org.apache.commons.math.analysis.QuinticFunction;\n import org.apache.commons.math.analysis.SinFunction;\n     }\n \n     @Test\n-    public void testExactIntegration()\n-        throws ConvergenceException {\n+    public void testExactIntegration() {\n         Random random = new Random(86343623467878363l);\n         for (int n = 2; n < 6; ++n) {\n             LegendreGaussIntegrator integrator =\n     }\n \n     @Test\n-    public void testIssue464() throws ConvergenceException {\n+    public void testIssue464() {\n         final double value = 0.2;\n         UnivariateRealFunction f = new UnivariateRealFunction() {\n             public double value(double x) {\n--- a/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java\n+++ b/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java\n import java.math.BigDecimal;\n import java.math.BigInteger;\n \n-import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.TestUtils;\n+import org.apache.commons.math.exception.ConvergenceException;\n import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.util.FastMath;\n import org.junit.Assert;\n--- a/src/test/java/org/apache/commons/math/fraction/FractionTest.java\n+++ b/src/test/java/org/apache/commons/math/fraction/FractionTest.java\n  */\n package org.apache.commons.math.fraction;\n \n-import org.apache.commons.math.ConvergenceException;\n+import org.apache.commons.math.exception.ConvergenceException;\n import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.apache.commons.math.exception.MathArithmeticException;\n import org.apache.commons.math.TestUtils;\n         assertFraction(15, 1, new Fraction(15.0000000000001));\n     }\n \n-    @Test\n+    @Test(expected=ConvergenceException.class)\n     public void testGoldenRatio() {\n-        try {\n-            // the golden ratio is notoriously a difficult number for continuous fraction\n-            new Fraction((1 + FastMath.sqrt(5)) / 2, 1.0e-12, 25);\n-            Assert.fail(\"an exception should have been thrown\");\n-        } catch (ConvergenceException ce) {\n-            // expected behavior\n-        }\n+        // the golden ratio is notoriously a difficult number for continuous fraction\n+        new Fraction((1 + FastMath.sqrt(5)) / 2, 1.0e-12, 25);\n     }\n \n     // MATH-179", "timestamp": 1317478610, "metainfo": ""}