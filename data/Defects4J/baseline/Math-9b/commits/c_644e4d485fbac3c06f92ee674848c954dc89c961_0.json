{"sha": "644e4d485fbac3c06f92ee674848c954dc89c961", "log": "Code formatting.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java\n+++ b/src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java\n                 // Perform one qr step.\n                 case 3: {\n                     // Calculate the shift.\n-                    final double scale = FastMath.max(FastMath.max(FastMath.max(FastMath.max(\n-                            FastMath.abs(singularValues[p - 1]), FastMath.abs(singularValues[p - 2])), FastMath.abs(e[p - 2])),\n-                            FastMath.abs(singularValues[k])), FastMath.abs(e[k]));\n+                    final double maxPm1Pm2 = FastMath.max(FastMath.abs(singularValues[p - 1]),\n+                                                          FastMath.abs(singularValues[p - 2]));\n+                    final double scale = FastMath.max(FastMath.max(FastMath.max(maxPm1Pm2,\n+                                                                                FastMath.abs(e[p - 2])),\n+                                                                   FastMath.abs(singularValues[k])),\n+                                                      FastMath.abs(e[k]));\n                     final double sp = singularValues[p - 1] / scale;\n                     final double spm1 = singularValues[p - 2] / scale;\n                     final double epm1 = e[p - 2] / scale;", "timestamp": 1319709574, "metainfo": ""}