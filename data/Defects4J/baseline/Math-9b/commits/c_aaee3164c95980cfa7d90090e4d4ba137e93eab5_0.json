{"sha": "aaee3164c95980cfa7d90090e4d4ba137e93eab5", "log": "MATH-438 Removed deprecated methods.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n     }\n \n     /** {@inheritDoc} */\n-    public RealVector mapPow(double d) {\n-        return copy().mapPowToSelf(d);\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapPowToSelf(double d){\n-        return mapToSelf(new Power(d));\n-    }\n-\n-    /** {@inheritDoc} */\n     public RealMatrix outerProduct(RealVector v) {\n         RealMatrix product;\n         if (v instanceof SparseRealVector || this instanceof SparseRealVector) {\n--- a/src/main/java/org/apache/commons/math/linear/RealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/RealVector.java\n     RealVector mapDivideToSelf(double d);\n \n     /**\n-     * Map a power operation to each entry.\n-     *\n-     * @param d Operator value.\n-     * @return a mapped copy of the vector.\n-     * @deprecated in 2.2 (to be removed in 3.0). Please use\n-     * {@link #map(UnivariateRealFunction)} directly with\n-     * the function classes in package\n-     * {@link org.apache.commons.math.analysis.function}.\n-     */\n-    @Deprecated\n-    RealVector mapPow(double d);\n-\n-    /**\n-     * Map a power operation to each entry.\n-     * The instance is changed in-place.\n-     *\n-     * @param d Operator value.\n-     * @return the mapped vector.\n-     * @deprecated in 2.2 (to be removed in 3.0). Please use\n-     * {@link #mapToSelf(UnivariateRealFunction)} directly with\n-     * the function classes in package\n-     * {@link org.apache.commons.math.analysis.function}.\n-     */\n-    @Deprecated\n-    RealVector mapPowToSelf(double d);\n-\n-    /**\n      * Element-by-element multiplication.\n      * @param v vector by which instance elements must be multiplied\n      * @return a vector containing this[i] * v[i] for all i\n--- a/src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java\n             }\n             return this;\n         }\n-\n-        @Override\n-        public RealVector mapPowToSelf(double d) {\n-            for(int i=0; i<values.length; i++) {\n-                values[i] = FastMath.pow(values[i], d);\n-            }\n-            return this;\n-        }\n-\n \n         public RealVector ebeMultiply(RealVector v) {\n             throw unsupported();\n--- a/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java\n import org.apache.commons.math.analysis.function.Rint;\n import org.apache.commons.math.analysis.function.Signum;\n import org.apache.commons.math.analysis.function.Ulp;\n+import org.apache.commons.math.analysis.function.Power;\n \n /**\n  * Test cases for the {@link ArrayRealVector} class.\n             throw unsupported();\n         }\n \n-        public RealVector mapPow(double d) {\n-            throw unsupported();\n-        }\n-\n-        public RealVector mapPowToSelf(double d) {\n-            throw unsupported();\n-        }\n-\n         public RealVector ebeMultiply(RealVector v) {\n             throw unsupported();\n         }\n         assertClose(\"compare vectors\" ,result_mapDivideToSelf,v_mapDivideToSelf.getData(),normTolerance);\n \n         //octave =  v1 .^ 2.0\n-        RealVector v_mapPow = v1.mapPow(2.0d);\n+        RealVector v_mapPow = v1.map(new Power(2));\n         double[] result_mapPow = {1d, 4d, 9d};\n         assertClose(\"compare vectors\" ,result_mapPow,v_mapPow.getData(),normTolerance);\n \n         //octave =  v1 .^ 2.0\n         RealVector v_mapPowToSelf = v1.copy();\n-        v_mapPowToSelf.mapPowToSelf(2.0d);\n+        v_mapPowToSelf.mapToSelf(new Power(2));\n         double[] result_mapPowToSelf = {1d, 4d, 9d};\n         assertClose(\"compare vectors\" ,result_mapPowToSelf,v_mapPowToSelf.getData(),normTolerance);\n \n--- a/src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java\n import org.apache.commons.math.analysis.function.Rint;\n import org.apache.commons.math.analysis.function.Signum;\n import org.apache.commons.math.analysis.function.Ulp;\n+import org.apache.commons.math.analysis.function.Power;\n \n /**\n  * Test cases for the {@link OpenMapRealVector} class.\n             throw unsupported();\n         }\n \n-        @Override\n-        public RealVector mapPow(double d) {\n-            throw unsupported();\n-        }\n-\n-        @Override\n-        public RealVector mapPowToSelf(double d) {\n-            throw unsupported();\n-        }\n-\n         public RealVector ebeMultiply(RealVector v) {\n             throw unsupported();\n         }\n         assertClose(\"compare vectors\" ,result_mapDivideToSelf,v_mapDivideToSelf.getData(),normTolerance);\n \n         //octave =  v1 .^ 2.0\n-        RealVector v_mapPow = v1.mapPow(2.0d);\n+        RealVector v_mapPow = v1.map(new Power(2));\n         double[] result_mapPow = {1d, 4d, 9d};\n         assertClose(\"compare vectors\" ,result_mapPow,v_mapPow.getData(),normTolerance);\n \n         //octave =  v1 .^ 2.0\n         RealVector v_mapPowToSelf = v1.copy();\n-        v_mapPowToSelf.mapPowToSelf(2.0d);\n+        v_mapPowToSelf.mapToSelf(new Power(2));\n         double[] result_mapPowToSelf = {1d, 4d, 9d};\n         assertClose(\"compare vectors\" ,result_mapPowToSelf,v_mapPowToSelf.getData(),normTolerance);\n ", "timestamp": 1291733888, "metainfo": ""}