{"sha": "1755c3c0d07205b064e4d17353be0e1960fe3095", "log": "Added arbitrary order derivative for polynomials in Newton form.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java\n  */\n package org.apache.commons.math3.analysis.polynomials;\n \n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.NoDataException;\n-import org.apache.commons.math3.exception.DimensionMismatchException;\n-import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n \n /**\n  * @version $Id$\n  * @since 1.2\n  */\n-public class PolynomialFunctionNewtonForm implements UnivariateFunction {\n+public class PolynomialFunctionNewtonForm implements UnivariateDifferentiable {\n \n     /**\n      * The coefficients of the polynomial, ordered by degree -- i.e.\n      */\n     public double value(double z) {\n        return evaluate(a, c, z);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public DerivativeStructure value(final DerivativeStructure t) {\n+        verifyInputArray(a, c);\n+\n+        final int n = c.length;\n+        DerivativeStructure value = new DerivativeStructure(t.getFreeParameters(), t.getOrder(), a[n]);\n+        for (int i = n - 1; i >= 0; i--) {\n+            value = t.subtract(c[i]).multiply(value).add(a[i]);\n+        }\n+\n+        return value;\n+\n     }\n \n     /**\n                                                  a.length, c.length);\n         }\n     }\n+\n }\n--- a/src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java\n  */\n package org.apache.commons.math3.analysis.polynomials;\n \n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n import org.junit.Assert;\n import org.junit.Test;\n     }\n \n     /**\n+     * Test for derivatives.\n+     */\n+    @Test\n+    public void testDerivative() {\n+\n+        // x^3 = 0 * [1] + 1 * [x] + 3 * [x(x-1)] + 1 * [x(x-1)(x-2)]\n+        PolynomialFunctionNewtonForm p =\n+                new PolynomialFunctionNewtonForm(new double[] { 0, 1, 3, 1 },\n+                                                 new double[] { 0, 1, 2 });\n+\n+        double eps = 2.0e-14;\n+        for (double t = 0.0; t < 10.0; t += 0.1) {\n+            DerivativeStructure x = new DerivativeStructure(1, 4, 0, t);\n+            DerivativeStructure y = p.value(x);\n+            Assert.assertEquals(t * t * t,   y.getValue(),              eps * t * t * t);\n+            Assert.assertEquals(3.0 * t * t, y.getPartialDerivative(1), eps * 3.0 * t * t);\n+            Assert.assertEquals(6.0 * t,     y.getPartialDerivative(2), eps * 6.0 * t);\n+            Assert.assertEquals(6.0,         y.getPartialDerivative(3), eps * 6.0);\n+            Assert.assertEquals(0.0,         y.getPartialDerivative(4), eps);\n+        }\n+\n+    }\n+\n+    /**\n      * Test of parameters for the polynomial.\n      */\n     @Test", "timestamp": 1347374564, "metainfo": ""}