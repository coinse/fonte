{"sha": "a0c14c5f8962d5cd71f496eb033f67e9c777bab8", "log": "Corrected to camelCase some method names (MATH-677).  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java\n  */\n public class FastCosineTransformer implements RealTransformer {\n \n-    /**\n-     * Construct a default transformer.\n-     */\n+    /** Construct a default transformer. */\n     public FastCosineTransformer() {\n         super();\n     }\n      * @return the real inversely transformed array\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    public double[] inversetransform(double f[]) throws IllegalArgumentException {\n+    public double[] inverseTransform(double f[]) throws IllegalArgumentException {\n \n         double scaling_coefficient = 2.0 / (f.length - 1);\n         return FastFourierTransformer.scaleArray(fct(f), scaling_coefficient);\n      * @return the real inversely transformed array\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    public double[] inversetransform(UnivariateFunction f,\n+    public double[] inverseTransform(UnivariateFunction f,\n                                      double min, double max, int n)\n         throws IllegalArgumentException {\n \n      * @return the real inversely transformed array\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    public double[] inversetransform2(double f[]) throws IllegalArgumentException {\n+    public double[] inverseTransform2(double f[]) throws IllegalArgumentException {\n         return transform2(f);\n     }\n \n      * @return the real inversely transformed array\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    public double[] inversetransform2(UnivariateFunction f,\n+    public double[] inverseTransform2(UnivariateFunction f,\n                                       double min, double max, int n)\n         throws IllegalArgumentException {\n \n--- a/src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java\n      * @return the complex inversely transformed array\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    public Complex[] inversetransform(double f[])\n+    public Complex[] inverseTransform(double f[])\n         throws IllegalArgumentException {\n \n         double scaling_coefficient = 1.0 / f.length;\n      * @return the complex inversely transformed array\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    public Complex[] inversetransform(UnivariateFunction f,\n+    public Complex[] inverseTransform(UnivariateFunction f,\n                                       double min, double max, int n)\n         throws IllegalArgumentException {\n \n      * @return the complex inversely transformed array\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    public Complex[] inversetransform(Complex f[])\n+    public Complex[] inverseTransform(Complex f[])\n         throws IllegalArgumentException {\n \n         roots.computeOmega(-f.length);    // pass negative argument\n      * @return the complex inversely transformed array\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    public Complex[] inversetransform2(double f[])\n+    public Complex[] inverseTransform2(double f[])\n         throws IllegalArgumentException {\n \n         double scaling_coefficient = 1.0 / FastMath.sqrt(f.length);\n      * @return the complex inversely transformed array\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    public Complex[] inversetransform2(UnivariateFunction f,\n+    public Complex[] inverseTransform2(UnivariateFunction f,\n                                        double min, double max, int n)\n         throws IllegalArgumentException {\n \n      * @return the complex inversely transformed array\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    public Complex[] inversetransform2(Complex f[])\n+    public Complex[] inverseTransform2(Complex f[])\n         throws IllegalArgumentException {\n \n         roots.computeOmega(-f.length);    // pass negative argument\n \n     /**\n      * Performs a multi-dimensional Fourier transform on a given array.\n-     * Use {@link #inversetransform2(Complex[])} and\n+     * Use {@link #inverseTransform2(Complex[])} and\n      * {@link #transform2(Complex[])} in a row-column implementation\n      * in any number of dimensions with O(N&times;log(N)) complexity with\n      * N=n<sub>1</sub>&times;n<sub>2</sub>&times;n<sub>3</sub>&times;...&times;n<sub>d</sub>,\n             if (forward) {\n                 temp = transform2(temp);\n             } else {\n-                temp = inversetransform2(temp);\n+                temp = inverseTransform2(temp);\n             }\n \n             for (int i = 0; i < dimensionSize[d]; i++) {\n--- a/src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java\n     }\n \n     /** {@inheritDoc} */\n-    public double[] inversetransform(double f[])\n+    public double[] inverseTransform(double f[])\n     throws IllegalArgumentException {\n         return FastFourierTransformer.scaleArray(fht(f), 1.0 / f.length);\n    }\n \n     /** {@inheritDoc} */\n-    public double[] inversetransform(UnivariateFunction f,\n+    public double[] inverseTransform(UnivariateFunction f,\n                                      double min, double max, int n)\n         throws IllegalArgumentException {\n         final double[] unscaled =\n--- a/src/main/java/org/apache/commons/math/transform/FastSineTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastSineTransformer.java\n  */\n public class FastSineTransformer implements RealTransformer {\n \n-    /**\n-     * Construct a default transformer.\n-     */\n+    /** Construct a default transformer. */\n     public FastSineTransformer() {\n         super();\n     }\n      * @return the real inversely transformed array\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    public double[] inversetransform(double f[]) throws IllegalArgumentException {\n+    public double[] inverseTransform(double f[]) throws IllegalArgumentException {\n \n         double scaling_coefficient = 2.0 / f.length;\n         return FastFourierTransformer.scaleArray(fst(f), scaling_coefficient);\n      * @return the real inversely transformed array\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    public double[] inversetransform(UnivariateFunction f, double min, double max, int n)\n+    public double[] inverseTransform(UnivariateFunction f, double min, double max, int n)\n         throws IllegalArgumentException {\n \n         double data[] = FastFourierTransformer.sample(f, min, max, n);\n      * @return the real inversely transformed array\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    public double[] inversetransform2(double f[]) throws IllegalArgumentException {\n+    public double[] inverseTransform2(double f[]) throws IllegalArgumentException {\n \n         return transform2(f);\n     }\n      * @return the real inversely transformed array\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    public double[] inversetransform2(UnivariateFunction f, double min, double max, int n)\n+    public double[] inverseTransform2(UnivariateFunction f, double min, double max, int n)\n         throws IllegalArgumentException {\n \n         return transform2(f, min, max, n);\n--- a/src/main/java/org/apache/commons/math/transform/RealTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/RealTransformer.java\n      * @return the real inversely transformed array (signal)\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    double[] inversetransform(double f[])\n+    double[] inverseTransform(double f[])\n         throws IllegalArgumentException;\n \n     /**\n      * @return the real inversely transformed array\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    double[] inversetransform(UnivariateFunction f, double min, double max, int n)\n+    double[] inverseTransform(UnivariateFunction f, double min, double max, int n)\n         throws IllegalArgumentException;\n \n }\n--- a/src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java\n+++ b/src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java\n             Assert.assertEquals(y[i], result[i], tolerance);\n         }\n \n-        result = transformer.inversetransform(y);\n+        result = transformer.inverseTransform(y);\n         for (int i = 0; i < result.length; i++) {\n             Assert.assertEquals(x[i], result[i], tolerance);\n         }\n             Assert.assertEquals(x[i], result[i], tolerance);\n         }\n \n-        result = transformer.inversetransform2(x);\n+        result = transformer.inverseTransform2(x);\n         for (int i = 0; i < result.length; i++) {\n             Assert.assertEquals(y[i], result[i], tolerance);\n         }\n--- a/src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java\n+++ b/src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java\n             Assert.assertEquals(y[i].getImaginary(), result[i].getImaginary(), tolerance);\n         }\n \n-        result = transformer.inversetransform(y);\n+        result = transformer.inverseTransform(y);\n         for (int i = 0; i < result.length; i++) {\n             Assert.assertEquals(x[i], result[i].getReal(), tolerance);\n             Assert.assertEquals(0.0, result[i].getImaginary(), tolerance);\n             Assert.assertEquals(0.0, result[i].getImaginary(), tolerance);\n         }\n \n-        result = transformer.inversetransform2(x2);\n+        result = transformer.inverseTransform2(x2);\n         for (int i = 0; i < result.length; i++) {\n             Assert.assertEquals(y2[i].getReal(), result[i].getReal(), tolerance);\n             Assert.assertEquals(y2[i].getImaginary(), result[i].getImaginary(), tolerance);\n         }\n \n         min = -FastMath.PI; max = FastMath.PI;\n-        result = transformer.inversetransform(f, min, max, N);\n+        result = transformer.inverseTransform(f, min, max, N);\n         Assert.assertEquals(0.0, result[1].getReal(), tolerance);\n         Assert.assertEquals(-0.5, result[1].getImaginary(), tolerance);\n         Assert.assertEquals(0.0, result[N-1].getReal(), tolerance);\n--- a/src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java\n+++ b/src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java\n     @Test\n     public void testNoIntInverse() {\n         FastHadamardTransformer transformer = new FastHadamardTransformer();\n-        double[] x = transformer.inversetransform(new double[] { 0, 1, 0, 1});\n+        double[] x = transformer.inverseTransform(new double[] { 0, 1, 0, 1});\n         Assert.assertEquals( 0.5, x[0], 0);\n         Assert.assertEquals(-0.5, x[1], 0);\n         Assert.assertEquals( 0.0, x[2], 0);\n         for (int i = 0; i < dY.length; ++i) {\n             dY[i] = y[i];\n         }\n-        double dResult[] = transformer.inversetransform(dY);\n+        double dResult[] = transformer.inverseTransform(dY);\n         for (int i = 0; i < dResult.length; i++) {\n             // compare computed results to precomputed results\n             Assert.assertTrue(Precision.equals(x[i], dResult[i], 1));\n--- a/src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java\n+++ b/src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java\n             Assert.assertEquals(y[i], result[i], tolerance);\n         }\n \n-        result = transformer.inversetransform(y);\n+        result = transformer.inverseTransform(y);\n         for (int i = 0; i < result.length; i++) {\n             Assert.assertEquals(x[i], result[i], tolerance);\n         }\n             Assert.assertEquals(x[i], result[i], tolerance);\n         }\n \n-        result = transformer.inversetransform2(x);\n+        result = transformer.inverseTransform2(x);\n         for (int i = 0; i < result.length; i++) {\n             Assert.assertEquals(y[i], result[i], tolerance);\n         }", "timestamp": 1322634837, "metainfo": ""}