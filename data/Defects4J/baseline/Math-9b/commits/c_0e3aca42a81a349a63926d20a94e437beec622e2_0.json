{"sha": "0e3aca42a81a349a63926d20a94e437beec622e2", "log": "checked serialization of EuclideanIntegerPoint and added a tests suite for the class  ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java\n+++ b/src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java\n  * @since 2.0\n  */\n public class EuclideanIntegerPoint implements Clusterable<EuclideanIntegerPoint>, Serializable {\n-    // TODO: Add Serializable documentation\n-    // TODO: Check Serializable implementation\n \n     /** Serializable version identifier. */\n     private static final long serialVersionUID = 3946024775784901369L;\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.stat.clustering;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.commons.math.TestUtils;\n+import org.junit.Test;\n+\n+public class EuclideanIntegerPointTest {\n+\n+    @Test\n+    public void testArrayIsReference() {\n+        int[] array = { -3, -2, -1, 0, 1 };\n+        assertTrue(array == new EuclideanIntegerPoint(array).getPoint());\n+    }\n+    \n+    @Test\n+    public void testDistance() {\n+        EuclideanIntegerPoint e1 = new EuclideanIntegerPoint(new int[] { -3, -2, -1, 0, 1 });\n+        EuclideanIntegerPoint e2 = new EuclideanIntegerPoint(new int[] {  1,  0, -1, 1, 1 });\n+        assertEquals(Math.sqrt(21.0), e1.distanceFrom(e2), 1.0e-15);\n+        assertEquals(0.0, e1.distanceFrom(e1), 1.0e-15);\n+        assertEquals(0.0, e2.distanceFrom(e2), 1.0e-15);\n+    }\n+    \n+    @Test\n+    public void testCentroid() {\n+        List<EuclideanIntegerPoint> list = new ArrayList<EuclideanIntegerPoint>();\n+        list.add(new EuclideanIntegerPoint(new int[] {  1,  3 }));\n+        list.add(new EuclideanIntegerPoint(new int[] {  2,  2 }));\n+        list.add(new EuclideanIntegerPoint(new int[] {  3,  3 }));\n+        list.add(new EuclideanIntegerPoint(new int[] {  2,  4 }));\n+        EuclideanIntegerPoint c = list.get(0).centroidOf(list);\n+        assertEquals(2, c.getPoint()[0]);\n+        assertEquals(3, c.getPoint()[1]);\n+    }\n+    \n+    @Test\n+    public void testSerial() {\n+        EuclideanIntegerPoint p = new EuclideanIntegerPoint(new int[] { -3, -2, -1, 0, 1 });\n+        assertEquals(p, TestUtils.serializeAndRecover(p));\n+    }\n+    \n+}", "timestamp": 1248120804, "metainfo": ""}