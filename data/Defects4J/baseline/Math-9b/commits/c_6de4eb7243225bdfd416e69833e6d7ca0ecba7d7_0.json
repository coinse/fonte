{"sha": "6de4eb7243225bdfd416e69833e6d7ca0ecba7d7", "log": "Adding equals and hashCode  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/SparseFieldVector.java\n+++ b/src/java/org/apache/commons/math/linear/SparseFieldVector.java\n         entries = new OpenIntToFieldHashMap<T> (field,expectedSize);\n     }\n \n-    \n     /**\n      * Create from a Field array.\n      * Only non-zero entries will be stored\n     }\n \n \n+    /** {@inheritDoc} */\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + ((field == null) ? 0 : field.hashCode());\n+        result = prime * result + virtualSize;\n+        OpenIntToFieldHashMap<T>.Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            int temp = iter.value().hashCode();\n+            result = prime * result + temp;\n+        }\n+        return result;\n+    }\n+\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (!(obj instanceof SparseFieldVector))\n+            return false;\n+        SparseFieldVector<T> other = (SparseFieldVector<T>) obj;\n+        if (field == null) {\n+            if (other.field != null)\n+                return false;\n+        } else if (!field.equals(other.field))\n+            return false;\n+        if (virtualSize != other.virtualSize)\n+            return false;\n+        OpenIntToFieldHashMap<T>.Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            T test = other.getEntry(iter.key());\n+            if (!test.equals(iter.value())) {\n+                return false;\n+            }\n+        }\n+        iter = other.getEntries().iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            T test = iter.value();\n+            if (!test.equals(getEntry(iter.key()))) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+\n     \n }\n--- a/src/java/org/apache/commons/math/linear/SparseRealVector.java\n+++ b/src/java/org/apache/commons/math/linear/SparseRealVector.java\n         while (iter.hasNext()) {\n             iter.advance();\n             double test = iter.value();\n-            if (Double.doubleToLongBits(test) != Double.doubleToLongBits(iter.value())) {\n+            if (Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry(iter.key()))) {\n                 return false;\n             }\n         }", "timestamp": 1241405721, "metainfo": ""}