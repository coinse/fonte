{"sha": "37680e23b8bddb80ac4ed0dfc6eb12d25a234adf", "log": "In all unit-tests of DecompositionSolver implementations: removed calls to DecompositionSolver.solve(double[]) (MATH-653)  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java\n             // expected behavior\n         }\n         try {\n-            solver.solve(b.getColumn(0));\n+            solver.solve(b.getColumnVector(0));\n             Assert.fail(\"an exception should have been thrown\");\n         } catch (MathIllegalArgumentException iae) {\n             // expected behavior\n         // using double[][]\n         Assert.assertEquals(0, MatrixUtils.createRealMatrix(solver.solve(b.getData())).subtract(xRef).getNorm(), 1.0e-13);\n \n-        // using double[]\n-        for (int i = 0; i < b.getColumnDimension(); ++i) {\n-            Assert.assertEquals(0,\n-                         new ArrayRealVector(solver.solve(b.getColumn(i))).subtract(xRef.getColumnVector(i)).getNorm(),\n-                         1.0e-13);\n-        }\n-\n         // using ArrayRealVector\n         for (int i = 0; i < b.getColumnDimension(); ++i) {\n             Assert.assertEquals(0,\n--- a/src/test/java/org/apache/commons/math/linear/EigenSolverTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/EigenSolverTest.java\n             // expected behavior\n         }\n         try {\n-            es.solve(b.getColumn(0));\n+            es.solve(b.getColumnVector(0));\n             Assert.fail(\"an exception should have been thrown\");\n         } catch (MathIllegalArgumentException iae) {\n             // expected behavior\n         solution = MatrixUtils.createRealMatrix(es.solve(b.getData()));\n         Assert.assertEquals(0, solution.subtract(xRef).getNorm(), 2.5e-12);\n \n-        // using double[]\n-        for (int i = 0; i < b.getColumnDimension(); ++i) {\n-            Assert.assertEquals(0,\n-                         new ArrayRealVector(es.solve(b.getColumn(i))).subtract(xRef.getColumnVector(i)).getNorm(),\n-                         2.0e-11);\n-        }\n-\n-        // using Array2DRowRealMatrix\n+        // using RealVector\n         for (int i = 0; i < b.getColumnDimension(); ++i) {\n             Assert.assertEquals(0,\n                          es.solve(b.getColumnVector(i)).subtract(xRef.getColumnVector(i)).getNorm(),\n                          2.0e-11);\n         }\n \n-        // using RealMatrix with an alternate implementation\n+        // using RealVector with an alternate implementation\n         for (int i = 0; i < b.getColumnDimension(); ++i) {\n             ArrayRealVectorTest.RealVectorTestImpl v =\n                 new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(i));\n--- a/src/test/java/org/apache/commons/math/linear/LUSolverTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/LUSolverTest.java\n             // expected behavior\n         }\n         try {\n-            solver.solve(b.getColumn(0));\n+            solver.solve(b.getColumnVector(0));\n             Assert.fail(\"an exception should have been thrown\");\n         } catch (MathIllegalArgumentException iae) {\n             // expected behavior\n         RealMatrix b = MatrixUtils.createRealMatrix(new double[2][2]);\n         try {\n             solver.solve(b);\n-            Assert.fail(\"an exception should have been thrown\");\n-        } catch (SingularMatrixException ime) {\n-            // expected behavior\n-        }\n-        try {\n-            solver.solve(b.getColumn(0));\n             Assert.fail(\"an exception should have been thrown\");\n         } catch (SingularMatrixException ime) {\n             // expected behavior\n         // using double[][]\n         Assert.assertEquals(0, MatrixUtils.createRealMatrix(solver.solve(b.getData())).subtract(xRef).getNorm(), 1.0e-13);\n \n-        // using double[]\n-        for (int i = 0; i < b.getColumnDimension(); ++i) {\n-            Assert.assertEquals(0,\n-                         new ArrayRealVector(solver.solve(b.getColumn(i))).subtract(xRef.getColumnVector(i)).getNorm(),\n-                         1.0e-13);\n-        }\n-\n         // using ArrayRealVector\n         for (int i = 0; i < b.getColumnDimension(); ++i) {\n             Assert.assertEquals(0,\n--- a/src/test/java/org/apache/commons/math/linear/QRSolverTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/QRSolverTest.java\n             // expected behavior\n         }\n         try {\n-            solver.solve(b.getColumn(0));\n-            Assert.fail(\"an exception should have been thrown\");\n-        } catch (MathIllegalArgumentException iae) {\n-            // expected behavior\n-        }\n-        try {\n             solver.solve(b.getColumnVector(0));\n             Assert.fail(\"an exception should have been thrown\");\n         } catch (MathIllegalArgumentException iae) {\n         RealMatrix b = MatrixUtils.createRealMatrix(new double[3][2]);\n         try {\n             solver.solve(b);\n-            Assert.fail(\"an exception should have been thrown\");\n-        } catch (SingularMatrixException iae) {\n-            // expected behavior\n-        }\n-        try {\n-            solver.solve(b.getColumn(0));\n             Assert.fail(\"an exception should have been thrown\");\n         } catch (SingularMatrixException iae) {\n             // expected behavior\n         // using double[][]\n         Assert.assertEquals(0, MatrixUtils.createRealMatrix(solver.solve(b.getData())).subtract(xRef).getNorm(), 2.0e-16 * xRef.getNorm());\n \n-        // using double[]\n-        for (int i = 0; i < b.getColumnDimension(); ++i) {\n-            final double[] x = solver.solve(b.getColumn(i));\n-            final double error = new ArrayRealVector(x).subtract(xRef.getColumnVector(i)).getNorm();\n-            Assert.assertEquals(0, error, 3.0e-16 * xRef.getColumnVector(i).getNorm());\n-        }\n-\n         // using ArrayRealVector\n         for (int i = 0; i < b.getColumnDimension(); ++i) {\n             final RealVector x = solver.solve(b.getColumnVector(i));\n--- a/src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java\n             // expected behavior\n         }\n         try {\n-            solver.solve(b.getColumn(0));\n+            solver.solve(b.getColumnVector(0));\n             Assert.fail(\"an exception should have been thrown\");\n         } catch (MathIllegalArgumentException iae) {\n             // expected behavior\n         Assert.assertEquals(12, xMatrix.getEntry(0, 1), 1.0e-15);\n         Assert.assertEquals(0, xMatrix.getEntry(1, 0), 1.0e-15);\n         Assert.assertEquals(0, xMatrix.getEntry(1, 1), 1.0e-15);\n-        double[] xCol = solver.solve(b.getColumn(0));\n-        Assert.assertEquals(11, xCol[0], 1.0e-15);\n-        Assert.assertEquals(0, xCol[1], 1.0e-15);\n         RealVector xColVec = solver.solve(b.getColumnVector(0));\n         Assert.assertEquals(11, xColVec.getEntry(0), 1.0e-15);\n         Assert.assertEquals(0, xColVec.getEntry(1), 1.0e-15);\n         // using double[][]\n         Assert.assertEquals(0, MatrixUtils.createRealMatrix(solver.solve(b.getData())).subtract(xRef).getNorm(), normTolerance);\n \n-        // using double[]\n-        for (int i = 0; i < b.getColumnDimension(); ++i) {\n-            Assert.assertEquals(0,\n-                         new ArrayRealVector(solver.solve(b.getColumn(i))).subtract(xRef.getColumnVector(i)).getNorm(),\n-                         1.0e-13);\n-        }\n-\n-        // using Array2DRowRealMatrix\n+        // using ArrayRealVector\n         for (int i = 0; i < b.getColumnDimension(); ++i) {\n             Assert.assertEquals(0,\n                          solver.solve(b.getColumnVector(i)).subtract(xRef.getColumnVector(i)).getNorm(),\n                          1.0e-13);\n         }\n \n-        // using RealMatrix with an alternate implementation\n+        // using RealVector with an alternate implementation\n         for (int i = 0; i < b.getColumnDimension(); ++i) {\n             ArrayRealVectorTest.RealVectorTestImpl v =\n                 new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(i));", "timestamp": 1314981980, "metainfo": ""}