{"sha": "7e65c5d2b07b2706be148fa5463ba3d2b89a2f93", "log": "Added @since tags.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java\n     /** Default value of the number of robustness iterations. */\n     public static final int DEFAULT_ROBUSTNESS_ITERS = 2;\n \n-    /** \n+    /**\n      * Default value for accuracy.\n      * @since 2.1\n      */\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n  */\n public class BrentSolver extends UnivariateRealSolverImpl {\n \n-    /** Default absolute accuracy */\n+    /**\n+     * Default absolute accuracy\n+     * @since 2.1\n+     */\n     public static final double DEFAULT_ABSOLUTE_ACCURACY = 1E-6;\n \n-    /** Default maximum number of iterations */\n+    /** Default maximum number of iterations\n+     * @since 2.1\n+     */\n     public static final int DEFAULT_MAXIMUM_ITERATIONS = 100;\n \n     /** Error message for non-bracketing interval. */\n      * Construct a solver with the given absolute accuracy.\n      *\n      * @param absoluteAccuracy lower bound for absolute accuracy of solutions returned by the solver\n+     * @since 2.1\n      */\n     public BrentSolver(double absoluteAccuracy) {\n         super(DEFAULT_MAXIMUM_ITERATIONS, absoluteAccuracy);\n      *\n      * @param maximumIterations maximum number of iterations\n      * @param absoluteAccuracy lower bound for absolute accuracy of solutions returned by the solver\n+     * @since 2.1\n      */\n     public BrentSolver(int maximumIterations, double absoluteAccuracy) {\n         super(maximumIterations, absoluteAccuracy);\n--- a/src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n     /** Serializable version identifier */\n     private static final long serialVersionUID = -38038050983108802L;\n \n-    /** Solver absolute accuracy for inverse cum computation */\n+    /**\n+     * Solver absolute accuracy for inverse cum computation\n+     * @since 2.1\n+     */\n     private double solverAbsoluteAccuracy = BrentSolver.DEFAULT_ABSOLUTE_ACCURACY;\n \n     /**\n      * @param x  The point at which the density should be computed.\n      * @return  The pdf at point x.\n      * @throws MathRuntimeException if the specialized class hasn't implemented this function\n+     * @since 2.1\n      */\n     public double density(double x) throws MathRuntimeException {\n         throw new MathRuntimeException(new UnsupportedOperationException(),\n      * Returns the solver absolute accuracy for inverse cum computation.\n      *\n      * @return the maximum absolute error in inverse cumulative probability estimates\n+     * @since 2.1\n      */\n     protected double getSolverAbsoluteAccuracy() {\n         return solverAbsoluteAccuracy;\n--- a/src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java\n      *\n      * @param x The point at which the density should be computed.\n      * @return The pdf at point x.\n+     * @since 2.1\n      */\n     public double density(double x) {\n         recomputeZ();\n--- a/src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java\n      *\n      * @param x The point at which the density should be computed.\n      * @return The pdf at point x.\n+     * @since 2.1\n      */\n     @Override\n     public double density(double x) {\n--- a/src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n     extends AbstractContinuousDistribution\n     implements ChiSquaredDistribution, Serializable  {\n \n-    /** Default inverse cumulative probability accuracy */\n+    /**\n+     * Default inverse cumulative probability accuracy\n+     * @since 2.1\n+     */\n     public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;\n \n     /** Serializable version identifier */\n      * @param df degrees of freedom.\n      * @param inverseCumAccuracy the maximum absolute error in inverse cumulative probability estimates\n      * (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY})\n+     * @since 2.1\n      */\n     public ChiSquaredDistributionImpl(double df, double inverseCumAccuracy) {\n         super();\n      *\n      * @param x The point at which the density should be computed.\n      * @return The pdf at point x.\n+     * @since 2.1\n      */\n     @Override\n     public double density(double x) {\n      * inverse cumulative probabilities.\n      *\n      * @return the solver absolute accuracy\n+     * @since 2.1\n      */\n     @Override\n     protected double getSolverAbsoluteAccuracy() {\n--- a/src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n      *\n      * @param x The point at which the density should be computed.\n      * @return The pdf at point x.\n+     * @since 2.1\n      */\n     @Override\n     public double density(double x) {\n--- a/src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java\n     extends AbstractContinuousDistribution\n     implements FDistribution, Serializable  {\n \n-    /** Default inverse cumulative probability accuracy */\n+    /**\n+     * Default inverse cumulative probability accurac\n+     * @since 2.1\n+     */\n     public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;\n \n     /** Message for non positive degrees of freddom. */\n      * @param denominatorDegreesOfFreedom the denominator degrees of freedom.\n      * @param inverseCumAccuracy the maximum absolute error in inverse cumulative probability estimates\n      * (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY})\n+     * @since 2.1\n      */\n     public FDistributionImpl(double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom,\n             double inverseCumAccuracy) {\n      *\n      * @param x The point at which the density should be computed.\n      * @return The pdf at point x.\n+     * @since 2.1\n      */\n     @Override\n     public double density(double x) {\n      * inverse cumulative probabilities.\n      *\n      * @return the solver absolute accuracy\n+     * @since 2.1\n      */\n     @Override\n     protected double getSolverAbsoluteAccuracy() {\n--- a/src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n public class GammaDistributionImpl extends AbstractContinuousDistribution\n     implements GammaDistribution, Serializable  {\n \n-    /** Default inverse cumulative probability accuracy */\n+    /**\n+     * Default inverse cumulative probability accuracy\n+     * @since 2.1\n+     */\n     public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;\n \n     /** Serializable version identifier */\n      * @param beta the scale parameter.\n      * @param inverseCumAccuracy the maximum absolute error in inverse cumulative probability estimates\n      * (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY})\n+     * @since 2.1\n      */\n     public GammaDistributionImpl(double alpha, double beta, double inverseCumAccuracy) {\n         super();\n      * inverse cumulative probabilities.\n      *\n      * @return the solver absolute accuracy\n+     * @since 2.1\n      */\n     @Override\n     protected double getSolverAbsoluteAccuracy() {\n--- a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n public class NormalDistributionImpl extends AbstractContinuousDistribution\n         implements NormalDistribution, Serializable {\n \n-    /** Default inverse cumulative probability accuracy */\n+    /**\n+     * Default inverse cumulative probability accuracy\n+     * @since 2.1\n+     */\n     public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;\n \n     /** Serializable version identifier */\n      * @param mean mean for this distribution\n      * @param sd standard deviation for this distribution\n      * @param inverseCumAccuracy inverse cumulative probability accuracy\n+     * @since 2.1\n      */\n     public NormalDistributionImpl(double mean, double sd, double inverseCumAccuracy) {\n         super();\n      *\n      * @param x The point at which the density should be computed.\n      * @return The pdf at point x.\n+     * @since 2.1\n      */\n     public double density(double x) {\n         double x0 = x - mean;\n      * inverse cumulative probabilities.\n      *\n      * @return the solver absolute accuracy\n+     * @since 2.1\n      */\n     @Override\n     protected double getSolverAbsoluteAccuracy() {\n--- a/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\n \n     /**\n      * Default maximum number of iterations for cumulative probability calculations.\n+     * @since 2.1\n      */\n     public static final int DEFAULT_MAX_ITERATIONS = 10000000;\n \n     /**\n-     * Default convergence criterion\n+     * Default convergence criterion.\n+     * @since 2.1\n      */\n     public static final double DEFAULT_EPSILON = 1E-12;\n \n      * @param p the Poisson mean\n      * @param epsilon the convergence criteria for cumulative probabilites\n      * @param maxIterations the maximum number of iterations for cumulative probabilites\n+     * @since 2.1\n      */\n     public PoissonDistributionImpl(double p, double epsilon, int maxIterations) {\n         setMean(p);\n      *\n      * @param p the Poisson mean\n      * @param epsilon the convergence criteria for cumulative probabilites\n+     * @since 2.1\n      */\n     public PoissonDistributionImpl(double p, double epsilon) {\n         setMean(p);\n      *\n      * @param p the Poisson mean\n      * @param maxIterations the maximum number of iterations for cumulative probabilites\n+     * @since 2.1\n      */\n     public PoissonDistributionImpl(double p, int maxIterations) {\n         setMean(p);\n--- a/src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java\n     extends AbstractContinuousDistribution\n     implements TDistribution, Serializable  {\n \n-    /** Default inverse cumulative probability accuracy */\n+    /**\n+     * Default inverse cumulative probability accuracy\n+     * @since 2.1\n+    */\n     public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;\n \n     /** Serializable version identifier */\n      * @param degreesOfFreedom the degrees of freedom.\n      * @param inverseCumAccuracy the maximum absolute error in inverse cumulative probability estimates\n      * (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY})\n+     * @since 2.1\n      */\n     public TDistributionImpl(double degreesOfFreedom, double inverseCumAccuracy) {\n         super();\n      *\n      * @param x The point at which the density should be computed.\n      * @return The pdf at point x.\n+     * @since 2.1\n      */\n     @Override\n     public double density(double x) {\n      * inverse cumulative probabilities.\n      *\n      * @return the solver absolute accuracy\n+     * @since 2.1\n      */\n     @Override\n     protected double getSolverAbsoluteAccuracy() {\n--- a/src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java\n public class WeibullDistributionImpl extends AbstractContinuousDistribution\n         implements WeibullDistribution, Serializable {\n \n-    /** Default inverse cumulative probability accuracy */\n+    /**\n+     * Default inverse cumulative probability accuracy\n+     * @since 2.1\n+     */\n     public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;\n \n     /** Serializable version identifier */\n      * @param beta the scale parameter.\n      * @param inverseCumAccuracy the maximum absolute error in inverse cumulative probability estimates\n      * (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY})\n+     * @since 2.1\n      */\n     public WeibullDistributionImpl(double alpha, double beta, double inverseCumAccuracy){\n         super();\n      *\n      * @param x The point at which the density should be computed.\n      * @return The pdf at point x.\n+     * @since 2.1\n      */\n     @Override\n     public double density(double x) {\n      * inverse cumulative probabilities.\n      *\n      * @return the solver absolute accuracy\n+     * @since 2.1\n      */\n     @Override\n     protected double getSolverAbsoluteAccuracy() {\n--- a/src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java\n+++ b/src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java\n      * reach {@link StoppingCondition} in the last run.\n      *\n      * @return number of generations evolved\n+     * @since 2.1\n      */\n     public int getGenerationsEvolved() {\n         return generationsEvolved;\n--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n      * Determine if this value is within epsilon of zero.\n      * @param value The value to test\n      * @return <code>true</code> if this value is within epsilon to zero, <code>false</code> otherwise\n+     * @since 2.1\n      */\n     protected boolean isDefaultValue(double value) {\n         return Math.abs(value) < epsilon;\n         return res;\n     }\n \n-    /** {@inheritDoc} */\n+    /**\n+     * {@inheritDoc}\n+     * @since 2.1\n+     */\n     @Override\n     public OpenMapRealVector copy() {\n         return new OpenMapRealVector(this);\n--- a/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java\n     /** Number of rows of the jacobian matrix. */\n     protected int rows;\n \n-    /** Target value for the objective functions at optimum. */\n+    /**\n+     * Target value for the objective functions at optimum.\n+     * @since 2.1\n+     */\n     protected double[] targetValues;\n \n-    /** Weight for the least squares cost computation. */\n+    /**\n+     * Weight for the least squares cost computation.\n+     * @since 2.1\n+     */\n     protected double[] residualsWeights;\n \n     /** Current point. */\n--- a/src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java\n     /** Convergence checker. */\n     protected RealConvergenceChecker checker;\n \n-    /** Type of optimization. */\n+    /**\n+     * Type of optimization.\n+     * @since 2.1\n+     */\n     protected GoalType goal;\n \n     /** Current point set. */\n--- a/src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java\n     /** Default maximal number of iterations allowed. */\n     public static final int DEFAULT_MAX_ITERATIONS = 100;\n \n-    /** Linear objective function. */\n+    /**\n+     * Linear objective function.\n+     * @since 2.1\n+     */\n     protected LinearObjectiveFunction function;\n \n-    /** Linear constraints. */\n+    /**\n+     * Linear constraints.\n+     * @since 2.1\n+     */\n     protected Collection<LinearConstraint> linearConstraints;\n \n-    /** Type of optimization goal: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}. */\n+    /**\n+     * Type of optimization goal: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}.\n+     * @since 2.1\n+     */\n     protected GoalType goal;\n \n-    /** Whether to restrict the variables to non-negative values. */\n+    /**\n+     * Whether to restrict the variables to non-negative values.\n+     * @since 2.1\n+     */\n     protected boolean nonNegative;\n \n     /** Maximal number of iterations allowed. */\n--- a/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n      * bounds now returned by {@link #getGeneratorUpperBounds()}.</p>\n      *\n      * @return array of bin upper bounds\n+     * @since 2.1\n      */\n     public double[] getUpperBounds() {\n         double[] binUpperBounds = new double[binCount];\n--- a/src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java\n+++ b/src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java\n /**\n  * Generate random vectors isotropically located on the surface of a sphere.\n  *\n+ * @since 2.1\n  * @version $Revision$ $Date$\n  */\n \n--- a/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java\n+++ b/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java\n         return hashCode;\n     }\n \n-    /** {@inheritDoc} */\n+    /**\n+     * {@inheritDoc}\n+     * @since 2.1\n+     */\n     @Override\n     public String toString() {\n         final StringBuffer buff = new StringBuffer(\"(\");\n--- a/src/main/java/org/apache/commons/math/util/BigReal.java\n+++ b/src/main/java/org/apache/commons/math/util/BigReal.java\n      * Gets the rounding mode for division operations\n      * The default is {@code RoundingMode.HALF_UP}\n      * @return the rounding mode.\n+     * @since 2.1\n      */\n     public RoundingMode getRoundingMode() {\n         return roundingMode;\n     /***\n      * Sets the rounding mode for decimal divisions.\n      * @param roundingMode rounding mode for decimal divisions\n+     * @since 2.1\n      */\n     public void setRoundingMode(RoundingMode roundingMode) {\n         this.roundingMode = roundingMode;\n      * Sets the scale for division operations.\n      * The default is 64\n      * @return the scale\n+     * @since 2.1\n      */\n     public int getScale() {\n         return scale;\n     /***\n      * Sets the scale for division operations.\n      * @param scale scale for division operations\n+     * @since 2.1\n      */\n     public void setScale(int scale) {\n         this.scale = scale;\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n      */\n     public static final double SAFE_MIN = 0x1.0p-1022;\n \n-    /** 2 &pi;. */\n+    /**\n+     * 2 &pi;.\n+     * @since 2.1\n+     */\n     public static final double TWO_PI = 2 * Math.PI;\n \n     /** -1.0 cast as a byte. */\n       * @return normalized array\n       * @throws ArithmeticException if the input array contains infinite elements or sums to zero\n       * @throws IllegalArgumentException if the target sum is infinite or NaN\n+      * @since 2.1\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n        throws ArithmeticException, IllegalArgumentException {", "timestamp": 1269186571, "metainfo": ""}