{"sha": "9185822c2f1c7c34d66f7b6109b29612e8d41ae1", "log": "fixed serialization of step interpolators to allow processing them before the associated integrator update their internal state (i.e. when currentState is still null)  ", "commit": "\n--- a/src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\n     } catch (DerivativeException e) {\n       throw MathRuntimeException.createIOException(e);\n     }\n-    out.writeInt(currentState.length);\n-    for (int i = 0; i < currentState.length; ++i) {\n+    final int dimension = (currentState == null) ? -1 : currentState.length;\n+    out.writeInt(dimension);\n+    for (int i = 0; i < dimension; ++i) {\n       out.writeDouble(yDotKLast[0][i]);\n       out.writeDouble(yDotKLast[1][i]);\n       out.writeDouble(yDotKLast[2][i]);\n     // read the local attributes\n     yDotKLast = new double[3][];\n     final int dimension = in.readInt();\n-    yDotKLast[0] = new double[dimension];\n-    yDotKLast[1] = new double[dimension];\n-    yDotKLast[2] = new double[dimension];\n+    yDotKLast[0] = (dimension < 0) ? null : new double[dimension];\n+    yDotKLast[1] = (dimension < 0) ? null : new double[dimension];\n+    yDotKLast[2] = (dimension < 0) ? null : new double[dimension];\n \n     for (int i = 0; i < dimension; ++i) {\n       yDotKLast[0][i] = in.readDouble();\n--- a/src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java\n   public void writeExternal(final ObjectOutput out)\n     throws IOException {\n \n-    final int dimension = currentState.length;\n+    final int dimension = (currentState == null) ? -1 : currentState.length;\n \n     // save the state of the base class\n     writeBaseExternal(out);\n \n     // read the base class \n     final double t = readBaseExternal(in);\n-    final int dimension = currentState.length;\n+    final int dimension = (currentState == null) ? -1 : currentState.length;\n \n     // read the local attributes\n     final int degree = in.readInt();\n--- a/src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java\n     writeBaseExternal(out);\n \n     // save the local attributes\n-    out.writeInt(yDotK.length);\n-    for (int k = 0; k < yDotK.length; ++k) {\n-      for (int i = 0; i < currentState.length; ++i) {\n+    final int n = (currentState == null) ? -1 : currentState.length;\n+    final int kMax = (yDotK == null) ? -1 : yDotK.length;\n+    out.writeInt(kMax);\n+    for (int k = 0; k < kMax; ++k) {\n+      for (int i = 0; i < n; ++i) {\n         out.writeDouble(yDotK[k][i]);\n       }\n     }\n     final double t = readBaseExternal(in);\n \n     // read the local attributes\n+    final int n = (currentState == null) ? -1 : currentState.length;\n     final int kMax = in.readInt();\n-    yDotK = new double[kMax][];\n+    yDotK = (kMax < 0) ? null : new double[kMax][];\n     for (int k = 0; k < kMax; ++k) {\n-      yDotK[k] = new double[currentState.length];\n-      for (int i = 0; i < currentState.length; ++i) {\n+      yDotK[k] = (n < 0) ? null : new double[n];\n+      for (int i = 0; i < n; ++i) {\n         yDotK[k][i] = in.readDouble();\n       }\n     }\n \n     equations = null;\n \n-    try {\n-      // we can now set the interpolated time and state\n-      setInterpolatedTime(t);\n-    } catch (DerivativeException e) {\n-      throw MathRuntimeException.createIOException(e);\n+    if (currentState != null) {\n+        try {\n+            // we can now set the interpolated time and state\n+            setInterpolatedTime(t);\n+        } catch (DerivativeException e) {\n+            throw MathRuntimeException.createIOException(e);\n+        }\n+    } else {\n+        interpolatedTime = t;\n     }\n \n   }\n--- a/src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java\n   protected void writeBaseExternal(final ObjectOutput out)\n     throws IOException {\n \n-    out.writeInt(currentState.length);\n+    if (currentState == null) {\n+        out.writeInt(-1);\n+    } else {\n+        out.writeInt(currentState.length);\n+    }\n     out.writeDouble(previousTime);\n     out.writeDouble(currentTime);\n     out.writeDouble(h);\n     out.writeBoolean(forward);\n \n-    for (int i = 0; i < currentState.length; ++i) {\n-      out.writeDouble(currentState[i]);\n+    if (currentState != null) {\n+        for (int i = 0; i < currentState.length; ++i) {\n+            out.writeDouble(currentState[i]);\n+        }\n     }\n \n     out.writeDouble(interpolatedTime);\n     h             = in.readDouble();\n     forward       = in.readBoolean();\n \n-    currentState  = new double[dimension];\n-    for (int i = 0; i < currentState.length; ++i) {\n-      currentState[i] = in.readDouble();\n+    if (dimension < 0) {\n+        currentState = null;\n+    } else {\n+        currentState  = new double[dimension];\n+        for (int i = 0; i < currentState.length; ++i) {\n+            currentState[i] = in.readDouble();\n+        }\n     }\n \n     // we do NOT handle the interpolated time and state here\n     interpolatedTime        = Double.NaN;\n-    interpolatedState       = new double[dimension];\n-    interpolatedDerivatives = new double[dimension];\n+    interpolatedState       = (dimension < 0) ? null : new double[dimension];\n+    interpolatedDerivatives = (dimension < 0) ? null : new double[dimension];\n \n     finalized = true;\n ", "timestamp": 1243806960, "metainfo": ""}