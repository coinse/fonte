{"sha": "c1de4ed29d80cd657d4e3c46a934b9fc91b24545", "log": "Replaced factory using Object with type-safe version.  Only two types of adapters were used: double array and stream, in a private internal factory. This has been suppressed so each adapter is bioth type safe and returns only the exceptions it can trigger.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.commons.math3.exception.MathIllegalArgumentException;\n import org.apache.commons.math3.exception.MathIllegalStateException;\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.exception.ZeroException;\n      *\n      * @param in the input data array\n      * @exception NullArgumentException if in is null\n-     */\n-    public void load(double[] in) throws NullArgumentException {\n+     * @throws MathIllegalStateException if an IOException occurs\n+     */\n+    public void load(double[] in) throws NullArgumentException, MathIllegalStateException {\n         DataAdapter da = new ArrayDataAdapter(in);\n         try {\n             da.computeStats();\n-            fillBinStats(in);\n+            // new adapter for the second pass\n+            fillBinStats(new ArrayDataAdapter(in));\n         } catch (IOException e) {\n             throw new MathIllegalStateException(e, LocalizedFormats.SIMPLE_MESSAGE, e.getLocalizedMessage());\n         }\n      *\n      * @throws IOException if an IO error occurs\n      * @throws NullArgumentException if url is null\n-     */\n-    public void load(URL url) throws IOException, NullArgumentException {\n+     * @throws ZeroException if URL contains no data\n+     */\n+    public void load(URL url) throws IOException, NullArgumentException, ZeroException {\n         MathUtils.checkNotNull(url);\n         BufferedReader in =\n             new BufferedReader(new InputStreamReader(url.openStream()));\n             if (sampleStats.getN() == 0) {\n                 throw new ZeroException(LocalizedFormats.URL_CONTAINS_NO_DATA, url);\n             }\n+            // new adapter for the second pass\n             in = new BufferedReader(new InputStreamReader(url.openStream()));\n-            fillBinStats(in);\n+            fillBinStats(new StreamDataAdapter(in));\n             loaded = true;\n         } finally {\n            try {\n         try {\n             DataAdapter da = new StreamDataAdapter(in);\n             da.computeStats();\n+            // new adapter for second pass\n             in = new BufferedReader(new FileReader(file));\n-            fillBinStats(in);\n+            fillBinStats(new StreamDataAdapter(in));\n             loaded = true;\n         } finally {\n             try {\n \n     }\n \n-    /**\n-     * Factory of <code>DataAdapter</code> objects. For every supported source\n-     * of data (array of doubles, file, etc.) an instance of the proper object\n-     * is returned.\n-     */\n-    private class DataAdapterFactory{\n-        /**\n-         * Creates a DataAdapter from a data object\n-         *\n-         * @param in object providing access to the data\n-         * @return DataAdapter instance\n-         */\n-        public DataAdapter getAdapter(Object in) {\n-            if (in instanceof BufferedReader) {\n-                BufferedReader inputStream = (BufferedReader) in;\n-                return new StreamDataAdapter(inputStream);\n-            } else if (in instanceof double[]) {\n-                double[] inputArray = (double[]) in;\n-                return new ArrayDataAdapter(inputArray);\n-            } else {\n-                throw new MathIllegalArgumentException(\n-                      LocalizedFormats.INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE,\n-                      in.getClass().getName(),\n-                      BufferedReader.class.getName(), double[].class.getName());\n-            }\n-        }\n-    }\n     /**\n      * <code>DataAdapter</code> for data provided through some input stream\n      */\n      * @param in object providing access to the data\n      * @throws IOException  if an IO error occurs\n      */\n-    private void fillBinStats(Object in) throws IOException {\n+    private void fillBinStats(final DataAdapter da)\n+        throws IOException {\n         // Set up grid\n         min = sampleStats.getMin();\n         max = sampleStats.getMax();\n         }\n \n         // Filling data in binStats Array\n-        DataAdapterFactory aFactory = new DataAdapterFactory();\n-        DataAdapter da = aFactory.getAdapter(in);\n         da.computeBinStats();\n \n         // Assign upperBounds based on bin counts\n         }\n \n         // Start with a uniformly distributed random number in (0,1)\n-        double x = randomData.nextUniform(0,1);\n+        final double x = randomData.nextUniform(0,1);\n \n         // Use this to select the bin and generate a Gaussian within the bin\n         for (int i = 0; i < binCount; i++) {\n                SummaryStatistics stats = binStats.get(i);\n                if (stats.getN() > 0) {\n                    if (stats.getStandardDeviation() > 0) {  // more than one obs\n-                        return randomData.nextGaussian\n-                            (stats.getMean(),stats.getStandardDeviation());\n+                       return randomData.nextGaussian(stats.getMean(),\n+                                                      stats.getStandardDeviation());\n                    } else {\n                        return stats.getMean(); // only one obs in bin\n                    }", "timestamp": 1347288439, "metainfo": ""}