{"sha": "ab871bcafec8254952044e7ff720b82e42a16a7f", "log": "MATH-875: deprecated sparseIterator() in the RealVector hierarchy, and replaced its use with iterator().  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java\n+++ b/src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java\n         } else {\n             checkVectorDimensions(v);\n             double[] out = data.clone();\n-            Iterator<Entry> it = v.sparseIterator();\n+            Iterator<Entry> it = v.iterator();\n             while (it.hasNext()) {\n                 final Entry e = it.next();\n                 out[e.getIndex()] += e.getValue();\n         } else {\n             checkVectorDimensions(v);\n             double[] out = data.clone();\n-            Iterator<Entry> it = v.sparseIterator();\n+            Iterator<Entry> it = v.iterator();\n             while (it.hasNext()) {\n                 final Entry e = it.next();\n                 out[e.getIndex()] -= e.getValue();\n--- a/src/main/java/org/apache/commons/math3/linear/RealVector.java\n+++ b/src/main/java/org/apache/commons/math3/linear/RealVector.java\n     public RealVector add(RealVector v) throws DimensionMismatchException {\n         checkVectorDimensions(v);\n         RealVector result = v.copy();\n-        Iterator<Entry> it = sparseIterator();\n+        Iterator<Entry> it = iterator();\n         while (it.hasNext()) {\n             final Entry e = it.next();\n             final int index = e.getIndex();\n     public RealVector subtract(RealVector v) throws DimensionMismatchException {\n         checkVectorDimensions(v);\n         RealVector result = v.mapMultiply(-1d);\n-        Iterator<Entry> it = sparseIterator();\n+        Iterator<Entry> it = iterator();\n         while (it.hasNext()) {\n             final Entry e = it.next();\n             final int index = e.getIndex();\n      */\n     public double getNorm() {\n         double sum = 0;\n-        Iterator<Entry> it = sparseIterator();\n+        Iterator<Entry> it = iterator();\n         while (it.hasNext()) {\n             final Entry e = it.next();\n             final double value = e.getValue();\n      */\n     public double getL1Norm() {\n         double norm = 0;\n-        Iterator<Entry> it = sparseIterator();\n+        Iterator<Entry> it = iterator();\n         while (it.hasNext()) {\n             final Entry e = it.next();\n             norm += FastMath.abs(e.getValue());\n      */\n     public double getLInfNorm() {\n         double norm = 0;\n-        Iterator<Entry> it = sparseIterator();\n+        Iterator<Entry> it = iterator();\n         while (it.hasNext()) {\n             final Entry e = it.next();\n             norm = FastMath.max(norm, FastMath.abs(e.getValue()));\n      * returns {@code true}.</p>\n      *\n      * @return a sparse iterator.\n-     */\n+     * @deprecated As of 3.1, this method is deprecated, because its interface\n+     * is too confusing (see\n+     * <a href=\"https://issues.apache.org/jira/browse/MATH-875\">JIRA MATH-875</a>).\n+     * This method will be completely removed in 4.0.\n+     */\n+    @Deprecated\n     public Iterator<Entry> sparseIterator() {\n         return new SparseEntryIterator();\n     }\n      * @return a reference to this vector.\n      */\n     public RealVector mapToSelf(UnivariateFunction function) {\n-        Iterator<Entry> it = (function.value(0) == 0) ? sparseIterator() : iterator();\n+        Iterator<Entry> it = iterator();\n         while (it.hasNext()) {\n             final Entry e = it.next();\n             e.setValue(function.value(e.getValue()));\n      * operations which preserve the default value are to be done on the entries,\n      * and the fraction of non-default values is small (i.e. someone took a\n      * SparseVector, and passed it into the copy-constructor of ArrayRealVector)\n-     */\n+     *\n+     * @deprecated As of 3.1, this class is deprecated, see\n+     * <a href=\"https://issues.apache.org/jira/browse/MATH-875\">JIRA MATH-875</a>.\n+     * This class will be completely removed in 4.0.\n+\n+     */\n+    @Deprecated\n     protected class SparseEntryIterator implements Iterator<Entry> {\n         /** Dimension of the vector. */\n         private final int dim;", "timestamp": 1349675661, "metainfo": ""}