{"sha": "fb1517672dafee6d80b1ade6b39d75e06df399e5", "log": "MATH-895 Replaced deprecated method with alternative from \"MathArrays\".   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java\n+++ b/src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java\n package org.apache.commons.math3.linear;\n \n import org.apache.commons.math3.analysis.function.Sqrt;\n+import org.apache.commons.math3.util.MathArrays;\n \n /**\n  * This class implements the standard Jacobi (diagonal) preconditioner. For a\n     @Override\n     public RealVector operate(final RealVector x) {\n         // Dimension check is carried out by ebeDivide\n-        return x.ebeDivide(diag);\n+        return new ArrayRealVector(MathArrays.ebeDivide(x.toArray(),\n+                                                        diag.toArray()),\n+                                   false);\n     }\n \n     /**\n      *\n      * @return the square root of {@code this} preconditioner\n      */\n-    public RealLinearOperator sqrt(){\n+    public RealLinearOperator sqrt() {\n         final RealVector sqrtDiag = diag.map(new Sqrt());\n         return new RealLinearOperator() {\n             /** {@inheritDoc} */\n             @Override\n             public RealVector operate(final RealVector x) {\n-                return x.ebeDivide(sqrtDiag);\n+                return new ArrayRealVector(MathArrays.ebeDivide(x.toArray(),\n+                                                                sqrtDiag.toArray()),\n+                                           false);\n             }\n \n             /** {@inheritDoc} */", "timestamp": 1354055237, "metainfo": ""}