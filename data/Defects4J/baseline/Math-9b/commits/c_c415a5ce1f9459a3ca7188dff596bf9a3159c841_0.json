{"sha": "c415a5ce1f9459a3ca7188dff596bf9a3159c841", "log": "Added unit tests.   ", "commit": "\n--- a/src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java\n+++ b/src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java\n /**\n  * This class contains test cases for the ExpandableDoubleArray.\n  * \n- * @version $Revision: 1.8 $ $Date: 2004/02/21 21:35:18 $\n+ * @version $Revision: 1.9 $ $Date: 2004/05/04 13:15:47 $\n  */\n public class ContractableDoubleArrayTest extends ExpandableDoubleArrayTest {\n \n \t\tra = new ContractableDoubleArray();\n \t}\n \n+    protected ExpandableDoubleArray newInstance(int initialCapacity) {\n+        return new ContractableDoubleArray(initialCapacity);\n+    }\n+\n+    protected ExpandableDoubleArray newInstance() {\n+        return new ContractableDoubleArray();\n+    }\n+    \n+    protected ExpandableDoubleArray newInstance(int initialCapacity, float expansionFactor) {\n+        if (expansionFactor < 2.5f) {\n+            return new ContractableDoubleArray(initialCapacity, expansionFactor);\n+        } else {\n+            return newInstance(initialCapacity, expansionFactor, expansionFactor + 1.0f);\n+        }\n+    }\n+\n+    protected ExpandableDoubleArray newInstance(int initialCapacity, float expansionFactor, float contractionFactor) {\n+        return new ContractableDoubleArray(initialCapacity, expansionFactor, contractionFactor);\n+    }\n }\n--- a/src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java\n+++ b/src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java\n /**\n  * This class contains test cases for the ExpandableDoubleArray.\n  * \n- * @version $Revision: 1.9 $ $Date: 2004/02/21 21:35:18 $\n+ * @version $Revision: 1.10 $ $Date: 2004/05/04 13:15:47 $\n  */\n public class ExpandableDoubleArrayTest extends DoubleArrayAbstractTest {\n \n \t * @see junit.framework.TestCase#setUp()\n \t */\n \tprotected void setUp() throws Exception {\n-\t\tda = new ExpandableDoubleArray();\n-\t\tra = new ExpandableDoubleArray();\n+\t\tda = newInstance();\n+\t\tra = newInstance();\n \t}\n \n \t/* (non-Javadoc)\n \n \tpublic void testWithInitialCapacity() {\n \n-\t\tExpandableDoubleArray eDA2 = new ExpandableDoubleArray(2);\n+\t\tExpandableDoubleArray eDA2 = newInstance(2);\n \t\tassertEquals(\"Initial number of elements should be 0\", 0, eDA2.getNumElements());\n \n \t\tint iterations = (int) Math.pow(2.0, 15.0);\n \n \tpublic void testWithInitialCapacityAndExpansionFactor() {\n \n-\t\tExpandableDoubleArray eDA3 = new ExpandableDoubleArray(3, 3.0f);\n+\t\tExpandableDoubleArray eDA3 = newInstance(3, 3.0f);\n \t\tassertEquals(\"Initial number of elements should be 0\", 0, eDA3.getNumElements() );\n \n \t\tint iterations = (int) Math.pow(3.0, 7.0);\n \n \tpublic void testIllegalInitialCapacity() {\n \t\ttry {\n-\t\t\tExpandableDoubleArray eDA = new ExpandableDoubleArray(-3, 2.0f);\n+\t\t\tExpandableDoubleArray eDA = newInstance(-3, 2.0f);\n \t\t\tfail( \"That constructor should have thrown an IllegalArgumentException because \" +\n \t\t\t\t\"the initialCapacity was negative, if it didn't then\" +\n \t\t\t\t\" the range checking of initialCapacity is not working properly\" );\n \t\t} catch( IllegalArgumentException iae ) {\n \t\t}\n \t\ttry {\n-\t\t\tExpandableDoubleArray eDA = new ExpandableDoubleArray(0, 2.0f);\n+\t\t\tExpandableDoubleArray eDA = newInstance(0, 2.0f);\n \t\t\tfail( \"That constructor should have thrown an IllegalArgumentException because \" +\n \t\t\t\t\"the initialCapacity was ZERO if it didn't then\" +\n \t\t\t\t\" the range checking of initialCapacity is not working properly\" );\n \t\n \tpublic void testIllegalExpansionFactor() {\n \t\ttry {\n-\t\t\tExpandableDoubleArray eDA = new ExpandableDoubleArray(3, 0.66f);\n+\t\t\tExpandableDoubleArray eDA = newInstance(3, 0.66f);\n \t\t\tfail( \"That constructor should have thrown an IllegalArgumentException because \" +\n \t\t\t\t\"the expansionFactor for 0.66 which would shrink the array instead of expand the array\");\n \t\t} catch( IllegalArgumentException iae ) {\n \t\t}\n \t\ttry {\n-\t\t\tExpandableDoubleArray eDA = new ExpandableDoubleArray(3, 0.0f);\n+\t\t\tExpandableDoubleArray eDA = newInstance(3, 0.0f);\n \t\t\tfail( \"That constructor should have thrown an IllegalArgumentException because \" +\n \t\t\t\t\"the expansionFactor for 0.0\");\n \t\t} catch( IllegalArgumentException iae) {\n \t\t}\n \t\t\n \t\ttry {\n-\t\t\tExpandableDoubleArray eDA = new ExpandableDoubleArray(3, -4.35f);\n+\t\t\tExpandableDoubleArray eDA = newInstance(3, -4.35f);\n \t\t\tfail( \"That constructor should have thrown an IllegalArgumentException because \" +\n \t\t\t\t\"the expansionFactor for -4.35\");\n \t\t} catch( IllegalArgumentException iae) {\n \t\t} catch( Exception e ){\n \t\t}\n \t}\n-\t\n+\n+    protected ExpandableDoubleArray newInstance(int initialCapacity) {\n+        return new ExpandableDoubleArray(initialCapacity);\n+    }\n+\n+    protected ExpandableDoubleArray newInstance() {\n+        return new ExpandableDoubleArray();\n+    }\n+    \n+    protected ExpandableDoubleArray newInstance(int initialCapacity, float expansionFactor) {\n+        return new ExpandableDoubleArray(initialCapacity, expansionFactor);\n+    }\n }", "timestamp": 1083676547, "metainfo": ""}