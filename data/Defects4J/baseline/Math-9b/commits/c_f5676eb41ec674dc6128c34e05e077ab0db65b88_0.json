{"sha": "f5676eb41ec674dc6128c34e05e077ab0db65b88", "log": "Fixed javadoc  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java\n+++ b/src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java\n     private List<SecondaryComponent> components;\n \n     /** Build an expandable set from its primary ODE set.\n-     * @param ode the primary set of differential equations to be integrated.\n+     * @param primary the primary set of differential equations to be integrated.\n      */\n     public ExpandableStatefulODE(final FirstOrderDifferentialEquations primary) {\n         final int n          = primary.getDimension();\n--- a/src/main/java/org/apache/commons/math/ode/events/EventHandler.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventHandler.java\n    * or continue integration, possibly with a reset state or derivatives.</p>\n \n    * <ul>\n-   *   <li>if {@link #STOP} is returned, the step handler will be called\n+   *   <li>if {@link Action#STOP} is returned, the step handler will be called\n    *   with the <code>isLast</code> flag of the {@link\n    *   org.apache.commons.math.ode.sampling.StepHandler#handleStep handleStep}\n    *   method set to true and the integration will be stopped,</li>\n-   *   <li>if {@link #RESET_STATE} is returned, the {@link #resetState\n+   *   <li>if {@link Action#RESET_STATE} is returned, the {@link #resetState\n    *   resetState} method will be called once the step handler has\n    *   finished its task, and the integrator will also recompute the\n    *   derivatives,</li>\n-   *   <li>if {@link #RESET_DERIVATIVES} is returned, the integrator\n+   *   <li>if {@link Action#RESET_DERIVATIVES} is returned, the integrator\n    *   will recompute the derivatives,\n-   *   <li>if {@link #CONTINUE} is returned, no specific action will\n+   *   <li>if {@link Action#CONTINUE} is returned, no specific action will\n    *   be taken (apart from having called this method) and integration\n    *   will continue.</li>\n    * </ul>\n    * <code>handleStep</code> afterwards. This scheduling allows the integrator to\n    * pass <code>true</code> as the <code>isLast</code> parameter to the step\n    * handler to make it aware the step will be the last one if this method\n-   * returns {@link #STOP}. As the interpolator may be used to navigate back\n+   * returns {@link Action#STOP}. As the interpolator may be used to navigate back\n    * throughout the last step (as {@link\n    * org.apache.commons.math.ode.sampling.StepNormalizer StepNormalizer}\n    * does for example), user code called by this method and user\n    * when times increases around event (note that increase is measured with respect\n    * to physical time, not with respect to integration which may go backward in time)\n    * @return indication of what the integrator should do next, this\n-   * value must be one of {@link #STOP}, {@link #RESET_STATE},\n-   * {@link #RESET_DERIVATIVES} or {@link #CONTINUE}\n+   * value must be one of {@link Action#STOP}, {@link Action#RESET_STATE},\n+   * {@link Action#RESET_DERIVATIVES} or {@link Action#CONTINUE}\n    */\n   Action eventOccurred(double t, double[] y, boolean increasing);\n \n \n    * <p>This method is called after the step handler has returned and\n    * before the next step is started, but only when {@link\n-   * #eventOccurred} has itself returned the {@link #RESET_STATE}\n+   * #eventOccurred} has itself returned the {@link Action#RESET_STATE}\n    * indicator. It allows the user to reset the state vector for the\n    * next step, without perturbing the step handler of the finishing\n    * step. If the {@link #eventOccurred} never returns the {@link\n-   * #RESET_STATE} indicator, this function will never be called, and it is\n+   * Action#RESET_STATE} indicator, this function will never be called, and it is\n    * safe to leave its body empty.</p>\n \n    * @param t current value of the independent <i>time</i> variable\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\n  * <p>\n  * If the Ordinary Differential Equations is an {@link ExpandableStatefulODE\n  * extended ODE} rather than a {@link FirstOrderDifferentialEquations basic ODE}, then\n- * <em>only</em> the {@link ExpandableStatefulODE#getMainSet() main part}\n+ * <em>only</em> the {@link ExpandableStatefulODE#getPrimaryState() primary part}\n  * of the state vector is used for stepsize control, not the complete state vector.\n  * </p>\n  *\n--- a/src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java\n    * @return interpolated secondary state at the current interpolation date\n    * @see #getInterpolatedState()\n    * @see #getInterpolatedDerivatives()\n-   * @see #getInterpolatedSecondaryDerivatives(String)\n+   * @see #getInterpolatedSecondaryDerivatives(int)\n    * @see #setInterpolatedTime(double)\n    * @since 3.0\n    */\n    * @return interpolated secondary derivatives at the current interpolation date\n    * @see #getInterpolatedState()\n    * @see #getInterpolatedDerivatives()\n-   * @see #getInterpolatedSecondaryState(String)\n+   * @see #getInterpolatedSecondaryState(int)\n    * @see #setInterpolatedTime(double)\n    * @since 3.0\n    */", "timestamp": 1317498094, "metainfo": ""}