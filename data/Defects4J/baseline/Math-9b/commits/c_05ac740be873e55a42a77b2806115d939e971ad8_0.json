{"sha": "05ac740be873e55a42a77b2806115d939e971ad8", "log": "MATH-792: implementation of the visitor pattern for ArrayRealVector (overrides default implementation in RealVector).   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java\n+++ b/src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java\n         }\n         return this;\n     }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public double walkInDefaultOrder(final RealVectorPreservingVisitor visitor) {\n+        visitor.start(data.length, 0, data.length - 1);\n+        for (int i = 0; i < data.length; i++) {\n+            visitor.visit(i, data[i]);\n+        }\n+        return visitor.end();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public double walkInDefaultOrder(final RealVectorPreservingVisitor visitor,\n+        final int start, final int end) {\n+        checkIndices(start, end);\n+        visitor.start(data.length, start, end);\n+        for (int i = start; i <= end; i++) {\n+            visitor.visit(i, data[i]);\n+        }\n+        return visitor.end();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * In this implementation, the optimized order is the default order.\n+     */\n+    @Override\n+    public double walkInOptimizedOrder(final RealVectorPreservingVisitor visitor) {\n+        return walkInDefaultOrder(visitor);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * In this implementation, the optimized order is the default order.\n+     */\n+    @Override\n+    public double walkInOptimizedOrder(final RealVectorPreservingVisitor visitor,\n+        final int start, final int end) {\n+        return walkInDefaultOrder(visitor, start, end);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public double walkInDefaultOrder(final RealVectorChangingVisitor visitor) {\n+        visitor.start(data.length, 0, data.length - 1);\n+        for (int i = 0; i < data.length; i++) {\n+            data[i] = visitor.visit(i, data[i]);\n+        }\n+        return visitor.end();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public double walkInDefaultOrder(final RealVectorChangingVisitor visitor,\n+        final int start, final int end) {\n+        checkIndices(start, end);\n+        visitor.start(data.length, start, end);\n+        for (int i = start; i <= end; i++) {\n+            data[i] = visitor.visit(i, data[i]);\n+        }\n+        return visitor.end();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * In this implementation, the optimized order is the default order.\n+     */\n+    @Override\n+    public double walkInOptimizedOrder(final RealVectorChangingVisitor visitor) {\n+        return walkInDefaultOrder(visitor);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * In this implementation, the optimized order is the default order.\n+     */\n+    @Override\n+    public double walkInOptimizedOrder(final RealVectorChangingVisitor visitor,\n+        final int start, final int end) {\n+        return walkInDefaultOrder(visitor, start, end);\n+    }\n }", "timestamp": 1338269779, "metainfo": ""}