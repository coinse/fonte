{"sha": "43af48f935a6e277b50beb1566ba8786dd17cb54", "log": "delay message build until really needed this allows not wasting time dealing with resources, strings and formatting when the exception is discarded and its message not used thanks to Gilles for the suggestion  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/MathException.java\n+++ b/src/main/java/org/apache/commons/math/MathException.java\n      * detail message.\n      */\n     public MathException() {\n-        super();\n         this.pattern   = null;\n         this.arguments = new Object[0];\n     }\n      * @param arguments format arguments\n      */\n     public MathException(String pattern, Object ... arguments) {\n-      super(buildMessage(Locale.US, pattern, arguments));\n       this.pattern   = pattern;\n       this.arguments = (arguments == null) ? new Object[0] : arguments.clone();\n     }\n      * @since 1.2\n      */\n     public MathException(Throwable rootCause, String pattern, Object ... arguments) {\n-      super(buildMessage(Locale.US, pattern, arguments), rootCause);\n+      super(rootCause);\n       this.pattern   = pattern;\n       this.arguments = (arguments == null) ? new Object[0] : arguments.clone();\n     }\n \n     }\n \n-    /**\n-     * Builds a message string by from a pattern and its arguments.\n-     * @param locale Locale in which the message should be translated\n-     * @param pattern format specifier\n-     * @param arguments format arguments\n-     * @return a message string\n-     */\n-    private static String buildMessage(Locale locale, String pattern, Object ... arguments) {\n-        return (pattern == null) ? \"\" : new MessageFormat(translate(pattern, locale), locale).format(arguments);\n-    }\n-\n     /** Gets the pattern used to build the message of this throwable.\n      *\n      * @return the pattern used to build the message of this throwable\n      * @return localized message\n      * @since 1.2\n      */\n-    public String getMessage(Locale locale) {\n-        return buildMessage(locale, pattern, arguments);\n+    public String getMessage(final Locale locale) {\n+        return (pattern == null) ? \"\" : new MessageFormat(translate(pattern, locale), locale).format(arguments);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public String getMessage() {\n+        return getMessage(Locale.US);\n     }\n \n     /** {@inheritDoc} */\n--- a/src/main/java/org/apache/commons/math/MathRuntimeException.java\n+++ b/src/main/java/org/apache/commons/math/MathRuntimeException.java\n      * @param arguments format arguments\n      */\n     public MathRuntimeException(final String pattern, final Object ... arguments) {\n-      super(buildMessage(Locale.US, pattern, arguments));\n-      this.pattern   = pattern;\n-      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();\n+        this.pattern   = pattern;\n+        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();\n     }\n \n     /**\n      */\n     public MathRuntimeException(final Throwable rootCause,\n                                 final String pattern, final Object ... arguments) {\n-      super(buildMessage(Locale.US, pattern, arguments), rootCause);\n-      this.pattern   = pattern;\n-      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();\n+        super(rootCause);\n+        this.pattern   = pattern;\n+        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();\n     }\n \n     /**\n      */\n     public String getMessage(final Locale locale) {\n         return buildMessage(locale, pattern, arguments);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public String getMessage() {\n+        return getMessage(Locale.US);\n     }\n \n     /** {@inheritDoc} */\n      */\n     public static ArithmeticException createArithmeticException(final String pattern,\n                                                                 final Object ... arguments) {\n-        return new ArithmeticException(buildMessage(Locale.US, pattern, arguments)) {\n+        return new ArithmeticException() {\n \n             /** Serializable version identifier. */\n             private static final long serialVersionUID = 7705628723242533939L;\n+\n+            /** {@inheritDoc} */\n+            @Override\n+            public String getMessage() {\n+                return buildMessage(Locale.US, pattern, arguments);\n+            }\n \n             /** {@inheritDoc} */\n             @Override\n      */\n     public static ArrayIndexOutOfBoundsException createArrayIndexOutOfBoundsException(final String pattern,\n                                                                                       final Object ... arguments) {\n-        return new ArrayIndexOutOfBoundsException(buildMessage(Locale.US, pattern, arguments)) {\n+        return new ArrayIndexOutOfBoundsException() {\n \n             /** Serializable version identifier. */\n             private static final long serialVersionUID = -3394748305449283486L;\n+\n+            /** {@inheritDoc} */\n+            @Override\n+            public String getMessage() {\n+                return buildMessage(Locale.US, pattern, arguments);\n+            }\n \n             /** {@inheritDoc} */\n             @Override\n      */\n     public static EOFException createEOFException(final String pattern,\n                                                   final Object ... arguments) {\n-        return new EOFException(buildMessage(Locale.US, pattern, arguments)) {\n+        return new EOFException() {\n \n             /** Serializable version identifier. */\n             private static final long serialVersionUID = 279461544586092584L;\n+\n+            /** {@inheritDoc} */\n+            @Override\n+            public String getMessage() {\n+                return buildMessage(Locale.US, pattern, arguments);\n+            }\n \n             /** {@inheritDoc} */\n             @Override\n      */\n     public static IllegalArgumentException createIllegalArgumentException(final String pattern,\n                                                                           final Object ... arguments) {\n-        return new IllegalArgumentException(buildMessage(Locale.US, pattern, arguments)) {\n+        return new IllegalArgumentException() {\n \n             /** Serializable version identifier. */\n             private static final long serialVersionUID = -6555453980658317913L;\n+\n+            /** {@inheritDoc} */\n+            @Override\n+            public String getMessage() {\n+                return buildMessage(Locale.US, pattern, arguments);\n+            }\n \n             /** {@inheritDoc} */\n             @Override\n      */\n     public static IllegalStateException createIllegalStateException(final String pattern,\n                                                                     final Object ... arguments) {\n-        return new IllegalStateException(buildMessage(Locale.US, pattern, arguments)) {\n+        return new IllegalStateException() {\n \n             /** Serializable version identifier. */\n             private static final long serialVersionUID = -95247648156277208L;\n+\n+            /** {@inheritDoc} */\n+            @Override\n+            public String getMessage() {\n+                return buildMessage(Locale.US, pattern, arguments);\n+            }\n \n             /** {@inheritDoc} */\n             @Override\n      */\n     public static ConcurrentModificationException createConcurrentModificationException(final String pattern,\n                                                                                         final Object ... arguments) {\n-        return new ConcurrentModificationException(buildMessage(Locale.US, pattern, arguments)) {\n+        return new ConcurrentModificationException() {\n \n             /** Serializable version identifier. */\n             private static final long serialVersionUID = 6134247282754009421L;\n+\n+            /** {@inheritDoc} */\n+            @Override\n+            public String getMessage() {\n+                return buildMessage(Locale.US, pattern, arguments);\n+            }\n \n             /** {@inheritDoc} */\n             @Override\n      */\n     public static NoSuchElementException createNoSuchElementException(final String pattern,\n                                                                       final Object ... arguments) {\n-        return new NoSuchElementException(buildMessage(Locale.US, pattern, arguments)) {\n+        return new NoSuchElementException() {\n \n             /** Serializable version identifier. */\n             private static final long serialVersionUID = 7304273322489425799L;\n+\n+            /** {@inheritDoc} */\n+            @Override\n+            public String getMessage() {\n+                return buildMessage(Locale.US, pattern, arguments);\n+            }\n \n             /** {@inheritDoc} */\n             @Override\n      */\n     public static NullPointerException createNullPointerException(final String pattern,\n                                                                   final Object ... arguments) {\n-        return new NullPointerException(buildMessage(Locale.US, pattern, arguments)) {\n+        return new NullPointerException() {\n \n             /** Serializable version identifier. */\n             private static final long serialVersionUID = -3075660477939965216L;\n+\n+            /** {@inheritDoc} */\n+            @Override\n+            public String getMessage() {\n+                return buildMessage(Locale.US, pattern, arguments);\n+            }\n \n             /** {@inheritDoc} */\n             @Override\n     public static ParseException createParseException(final int offset,\n                                                       final String pattern,\n                                                       final Object ... arguments) {\n-        return new ParseException(buildMessage(Locale.US, pattern, arguments), offset) {\n+        return new ParseException(null, offset) {\n \n             /** Serializable version identifier. */\n             private static final long serialVersionUID = -1103502177342465975L;\n+\n+            /** {@inheritDoc} */\n+            @Override\n+            public String getMessage() {\n+                return buildMessage(Locale.US, pattern, arguments);\n+            }\n \n             /** {@inheritDoc} */\n             @Override\n         final String pattern  = \"internal error, please fill a bug report at {0}\";\n         final String argument = \"https://issues.apache.org/jira/browse/MATH\";\n \n-        return new RuntimeException(buildMessage(Locale.US, pattern, argument)) {\n+        return new RuntimeException() {\n \n             /** Serializable version identifier. */\n             private static final long serialVersionUID = -201865440834027016L;\n \n             /** {@inheritDoc} */\n             @Override\n+            public String getMessage() {\n+                return buildMessage(Locale.US, pattern, argument);\n+            }\n+\n+            /** {@inheritDoc} */\n+            @Override\n             public String getLocalizedMessage() {\n                 return buildMessage(Locale.getDefault(), pattern, argument);\n             }\n--- a/src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java\n+++ b/src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java\n     public void testConstructor(){\n         MathConfigurationException ex = new MathConfigurationException();\n         assertNull(ex.getCause());\n-        assertNull(ex.getMessage());\n-        assertEquals(0, ex.getMessage(Locale.FRENCH).length());\n+        assertEquals(\"\", ex.getMessage());\n+        assertEquals(\"\", ex.getMessage(Locale.FRENCH));\n     }\n \n     public void testConstructorPatternArguments(){\n--- a/src/test/java/org/apache/commons/math/MathExceptionTest.java\n+++ b/src/test/java/org/apache/commons/math/MathExceptionTest.java\n     public void testConstructor(){\n         MathException ex = new MathException();\n         assertNull(ex.getCause());\n-        assertNull(ex.getMessage());\n-        assertEquals(0, ex.getMessage(Locale.FRENCH).length());\n+        assertEquals(\"\", ex.getMessage());\n+        assertEquals(\"\", ex.getMessage(Locale.FRENCH));\n     }\n \n     public void testConstructorPatternArguments(){", "timestamp": 1254941802, "metainfo": ""}