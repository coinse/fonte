{"sha": "49780d33c5eede2ef35df16928d1612950e06638", "log": "Remove unnecessary throws clauses from testxxx methods  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java\n      * f(x, y) = &Sigma;<sub>i</sub>&Sigma;<sub>j</sub> (i+1) (j+2) x<sup>i</sup> y<sup>j</sup>\n      */\n     @Test\n-    public void testSplinePartialDerivatives() throws MathException {\n+    public void testSplinePartialDerivatives() {\n         final int N = 4;\n         final double[] coeff = new double[16];\n \n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java\n  */\n package org.apache.commons.math.analysis.interpolation;\n \n-import org.apache.commons.math.MathException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.util.FastMath;\n import org.apache.commons.math.analysis.TrivariateRealFunction;\n      * </p>\n      */\n     @Test\n-    public void testPlane() throws MathException {\n+    public void testPlane() {\n         double[] xval = new double[] {3, 4, 5, 6.5};\n         double[] yval = new double[] {-4, -3, -1, 2, 2.5};\n         double[] zval = new double[] {-12, -8, -5.5, -3, 0, 2.5};\n      * with A = 0.2, &omega; = 0.5, k<sub>x</sub> = 2, k<sub>y</sub> = 1.\n      */\n     @Test\n-    public void testWave() throws MathException {\n+    public void testWave() {\n         double[] xval = new double[] {3, 4, 5, 6.5};\n         double[] yval = new double[] {-4, -3, -1, 2, 2.5};\n         double[] zval = new double[] {-12, -8, -5.5, -3, 0, 4};\n--- a/src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java\n  */\n package org.apache.commons.math.analysis.polynomials;\n \n-import org.apache.commons.math.MathException;\n import junit.framework.TestCase;\n \n /**\n     /**\n      * Test of polynomial for the linear function.\n      */\n-    public void testLinearFunction() throws MathException {\n+    public void testLinearFunction() {\n         PolynomialFunctionLagrangeForm p;\n         double c[], z, expected, result, tolerance = 1E-12;\n \n     /**\n      * Test of polynomial for the quadratic function.\n      */\n-    public void testQuadraticFunction() throws MathException {\n+    public void testQuadraticFunction() {\n         PolynomialFunctionLagrangeForm p;\n         double c[], z, expected, result, tolerance = 1E-12;\n \n     /**\n      * Test of polynomial for the quintic function.\n      */\n-    public void testQuinticFunction() throws MathException {\n+    public void testQuinticFunction() {\n         PolynomialFunctionLagrangeForm p;\n         double c[], z, expected, result, tolerance = 1E-12;\n \n--- a/src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java\n  */\n package org.apache.commons.math.analysis.polynomials;\n \n-import org.apache.commons.math.MathException;\n import junit.framework.TestCase;\n \n /**\n     /**\n      * Test of polynomial for the linear function.\n      */\n-    public void testLinearFunction() throws MathException {\n+    public void testLinearFunction() {\n         PolynomialFunctionNewtonForm p;\n         double coefficients[], z, expected, result, tolerance = 1E-12;\n \n     /**\n      * Test of polynomial for the quadratic function.\n      */\n-    public void testQuadraticFunction() throws MathException {\n+    public void testQuadraticFunction() {\n         PolynomialFunctionNewtonForm p;\n         double coefficients[], z, expected, result, tolerance = 1E-12;\n \n     /**\n      * Test of polynomial for the quintic function.\n      */\n-    public void testQuinticFunction() throws MathException {\n+    public void testQuinticFunction() {\n         PolynomialFunctionNewtonForm p;\n         double coefficients[], z, expected, result, tolerance = 1E-12;\n \n--- a/src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java\n  */\n package org.apache.commons.math.analysis.polynomials;\n \n-// commons-math\n-import org.apache.commons.math.MathException;\n import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.util.FastMath;\n // junit\n      *\n      * <p>value of this is 2.5 everywhere.</p>\n      */\n-    public void testConstants() throws MathException {\n+    public void testConstants() {\n         double[] c = { 2.5 };\n         PolynomialFunction f = new PolynomialFunction( c );\n \n      *      f(0.5) = 0.0, f(1.5) = 3.0</tt> and <tt>f(3.0) = 7.5</tt>\n      * </p>\n      */\n-    public void testLinear() throws MathException {\n+    public void testLinear() {\n         double[] c = { -1.5, 3.0 };\n         PolynomialFunction f = new PolynomialFunction( c );\n \n      * <tt>f(x) = x^3 - 2x^2 + 6x + 3, g(x) = 3x^2 - 4x + 6</tt>\n      * and <tt>h(x) = 6x - 4</tt>\n      */\n-    public void testfirstDerivativeComparison() throws MathException {\n+    public void testfirstDerivativeComparison() {\n         double[] f_coeff = { 3.0, 6.0, -2.0, 1.0 };\n         double[] g_coeff = { 6.0, -4.0, 3.0 };\n         double[] h_coeff = { -4.0, 6.0 };\n      * <tt>f(x) = x^3 - 2x^2 + 6x + 3, g(x) = 3x^2 - 4x + 6</tt>\n      * and <tt>h(x) = 6x - 4</tt>\n      */\n-    public void testMath341() throws MathException {\n+    public void testMath341() {\n         double[] f_coeff = { 3.0, 6.0, -2.0, 1.0 };\n         double[] g_coeff = { 6.0, -4.0, 3.0 };\n         double[] h_coeff = { -4.0, 6.0 };\n--- a/src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n \n-import org.apache.commons.math.MathException;\n import org.apache.commons.math.exception.NonSquareMatrixException;\n import org.apache.commons.math.exception.NonPositiveDefiniteMatrixException;\n import org.apache.commons.math.exception.NonSymmetricMatrixException;\n \n     /** test dimensions */\n     @Test\n-    public void testDimensions() throws MathException {\n+    public void testDimensions() {\n         CholeskyDecomposition llt =\n             new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(testData));\n         assertEquals(testData.length, llt.getL().getRowDimension());\n \n     /** test non-square matrix */\n     @Test(expected = NonSquareMatrixException.class)\n-    public void testNonSquare() throws MathException {\n+    public void testNonSquare() {\n         new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(new double[3][2]));\n     }\n \n     /** test non-symmetric matrix */\n     @Test(expected = NonSymmetricMatrixException.class)\n-    public void testNotSymmetricMatrixException() throws MathException {\n+    public void testNotSymmetricMatrixException() {\n         double[][] changed = testData.clone();\n         changed[0][changed[0].length - 1] += 1.0e-5;\n         new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(changed));\n \n     /** test non positive definite matrix */\n     @Test(expected = NonPositiveDefiniteMatrixException.class)\n-    public void testNotPositiveDefinite() throws MathException {\n+    public void testNotPositiveDefinite() {\n         new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(new double[][] {\n                 { 14, 11, 13, 15, 24 },\n                 { 11, 34, 13, 8,  25 },\n     }\n \n     @Test(expected = NonPositiveDefiniteMatrixException.class)\n-    public void testMath274() throws MathException {\n+    public void testMath274() {\n         new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(new double[][] {\n                 { 0.40434286, -0.09376327, 0.30328980, 0.04909388 },\n                 {-0.09376327,  0.10400408, 0.07137959, 0.04762857 },\n \n     /** test A = LLT */\n     @Test\n-    public void testAEqualLLT() throws MathException {\n+    public void testAEqualLLT() {\n         RealMatrix matrix = MatrixUtils.createRealMatrix(testData);\n         CholeskyDecomposition llt = new CholeskyDecompositionImpl(matrix);\n         RealMatrix l  = llt.getL();\n \n     /** test that L is lower triangular */\n     @Test\n-    public void testLLowerTriangular() throws MathException {\n+    public void testLLowerTriangular() {\n         RealMatrix matrix = MatrixUtils.createRealMatrix(testData);\n         RealMatrix l = new CholeskyDecompositionImpl(matrix).getL();\n         for (int i = 0; i < l.getRowDimension(); i++) {\n \n     /** test that LT is transpose of L */\n     @Test\n-    public void testLTTransposed() throws MathException {\n+    public void testLTTransposed() {\n         RealMatrix matrix = MatrixUtils.createRealMatrix(testData);\n         CholeskyDecomposition llt = new CholeskyDecompositionImpl(matrix);\n         RealMatrix l  = llt.getL();\n \n     /** test matrices values */\n     @Test\n-    public void testMatricesValues() throws MathException {\n+    public void testMatricesValues() {\n         RealMatrix lRef = MatrixUtils.createRealMatrix(new double[][] {\n                 {  1,  0,  0,  0,  0 },\n                 {  2,  3,  0,  0,  0 },\n--- a/src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java\n \n import junit.framework.TestCase;\n \n-import org.apache.commons.math.MathException;\n-\n public class CholeskySolverTest extends TestCase {\n \n     private double[][] testData = new double[][] {\n     }\n \n     /** test solve dimension errors */\n-    public void testSolveDimensionErrors() throws MathException {\n+    public void testSolveDimensionErrors() {\n         DecompositionSolver solver =\n             new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(testData)).getSolver();\n         RealMatrix b = MatrixUtils.createRealMatrix(new double[2][2]);\n     }\n \n     /** test solve */\n-    public void testSolve() throws MathException {\n+    public void testSolve() {\n         DecompositionSolver solver =\n             new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(testData)).getSolver();\n         RealMatrix b = MatrixUtils.createRealMatrix(new double[][] {\n     }\n \n     /** test determinant */\n-    public void testDeterminant() throws MathException {\n+    public void testDeterminant() {\n         assertEquals(7290000.0, getDeterminant(MatrixUtils.createRealMatrix(testData)), 1.0e-15);\n     }\n \n-    private double getDeterminant(RealMatrix m) throws MathException {\n+    private double getDeterminant(RealMatrix m) {\n         return new CholeskyDecompositionImpl(m).getDeterminant();\n     }\n \n--- a/src/test/java/org/apache/commons/math/optimization/direct/PowellOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/direct/PowellOptimizerTest.java\n  */\n package org.apache.commons.math.optimization.direct;\n \n-import org.apache.commons.math.MathException;\n import org.apache.commons.math.analysis.MultivariateRealFunction;\n import org.apache.commons.math.analysis.SumSincFunction;\n import org.apache.commons.math.optimization.GoalType;\n public class PowellOptimizerTest {\n \n     @Test\n-    public void testSumSinc() throws MathException {\n+    public void testSumSinc() {\n         final MultivariateRealFunction func = new SumSincFunction(-1);\n \n         int dim = 2;\n     }\n \n     @Test\n-    public void testQuadratic() throws MathException {\n+    public void testQuadratic() {\n         final MultivariateRealFunction func = new MultivariateRealFunction() {\n                 public double value(double[] x) {\n                     final double a = x[0] - 1;\n     }\n \n     @Test\n-    public void testMaximizeQuadratic() throws MathException {\n+    public void testMaximizeQuadratic() {\n         final MultivariateRealFunction func = new MultivariateRealFunction() {\n                 public double value(double[] x) {\n                     final double a = x[0] - 1;\n                         double[] init,\n                         GoalType goal,\n                         double fTol,\n-                        double pointTol)\n-        throws MathException {\n+                        double pointTol) {\n         final MultivariateRealOptimizer optim = new PowellOptimizer(fTol, Math.ulp(1d));\n         optim.setMaxEvaluations(1000);\n \n--- a/src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java\n  */\n package org.apache.commons.math.optimization.univariate;\n \n-import org.apache.commons.math.MathException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.optimization.GoalType;\n \n public class BracketFinderTest {\n \n     @Test\n-    public void testCubicMin() throws MathException {\n+    public void testCubicMin() {\n         final BracketFinder bFind = new BracketFinder();\n         final UnivariateRealFunction func = new UnivariateRealFunction() {\n                 public double value(double x) {\n     }\n \n     @Test\n-    public void testCubicMax() throws MathException {\n+    public void testCubicMax() {\n         final BracketFinder bFind = new BracketFinder();\n         final UnivariateRealFunction func = new UnivariateRealFunction() {\n                 public double value(double x) {\n     }\n \n     @Test\n-    public void testMinimumIsOnIntervalBoundary() throws MathException {\n+    public void testMinimumIsOnIntervalBoundary() {\n         final UnivariateRealFunction func = new UnivariateRealFunction() {\n                 public double value(double x) {\n                     return x * x;\n     }\n \n     @Test\n-    public void testIntervalBoundsOrdering() throws MathException {\n+    public void testIntervalBoundsOrdering() {\n         final UnivariateRealFunction func = new UnivariateRealFunction() {\n                 public double value(double x) {\n                     return x * x;\n--- a/src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n-import org.apache.commons.math.MathException;\n import org.apache.commons.math.exception.TooManyEvaluationsException;\n import org.apache.commons.math.analysis.QuinticFunction;\n import org.apache.commons.math.analysis.SinFunction;\n public final class BrentOptimizerTest {\n \n     @Test\n-    public void testSinMin() throws MathException {\n+    public void testSinMin() {\n         UnivariateRealFunction f = new SinFunction();\n         UnivariateRealOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);\n         optimizer.setMaxEvaluations(200);\n     }\n \n     @Test\n-    public void testQuinticMin() throws MathException {\n+    public void testQuinticMin() {\n         // The function has local minima at -0.27195613 and 0.82221643.\n         UnivariateRealFunction f = new QuinticFunction();\n         UnivariateRealOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);\n     }\n \n     @Test\n-    public void testQuinticMinStatistics() throws MathException {\n+    public void testQuinticMinStatistics() {\n         // The function has local minima at -0.27195613 and 0.82221643.\n         UnivariateRealFunction f = new QuinticFunction();\n         UnivariateRealOptimizer optimizer = new BrentOptimizer(1e-11, 1e-14);\n     }\n \n     @Test(expected = TooManyEvaluationsException.class)\n-    public void testQuinticMax() throws MathException {\n+    public void testQuinticMax() {\n         // The quintic function has zeros at 0, +-0.5 and +-1.\n         // The function has a local maximum at 0.27195613.\n         UnivariateRealFunction f = new QuinticFunction();\n--- a/src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java\n+++ b/src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java\n \n import org.apache.commons.math.analysis.*;\n import org.apache.commons.math.util.FastMath;\n-import org.apache.commons.math.MathException;\n import junit.framework.TestCase;\n \n /**\n     /**\n      * Test of transformer for the sine function.\n      */\n-    public void testSinFunction() throws MathException {\n+    public void testSinFunction() {\n         UnivariateRealFunction f = new SinFunction();\n         FastCosineTransformer transformer = new FastCosineTransformer();\n         double min, max, result[], tolerance = 1E-12; int N = 9;\n--- a/src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java\n+++ b/src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java\n import org.apache.commons.math.analysis.*;\n import org.apache.commons.math.complex.*;\n import org.apache.commons.math.util.FastMath;\n-import org.apache.commons.math.MathException;\n import junit.framework.TestCase;\n \n /**\n     /**\n      * Test of transformer for the sine function.\n      */\n-    public void testSinFunction() throws MathException {\n+    public void testSinFunction() {\n         UnivariateRealFunction f = new SinFunction();\n         FastFourierTransformer transformer = new FastFourierTransformer();\n         Complex result[]; int N = 1 << 8;\n--- a/src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java\n+++ b/src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java\n \n import org.apache.commons.math.analysis.*;\n import org.apache.commons.math.util.FastMath;\n-import org.apache.commons.math.MathException;\n import junit.framework.TestCase;\n \n /**\n     /**\n      * Test of transformer for the sine function.\n      */\n-    public void testSinFunction() throws MathException {\n+    public void testSinFunction() {\n         UnivariateRealFunction f = new SinFunction();\n         FastSineTransformer transformer = new FastSineTransformer();\n         double min, max, result[], tolerance = 1E-12; int N = 1 << 8;", "timestamp": 1291577875, "metainfo": ""}