{"sha": "559bc9e51d490cb51fa1aa3f2364e9ff07c9524d", "log": "don't compute the expensive Q matrix until really needed  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n     /** Squared secondary diagonal of the tridiagonal matrix. */\n     private double[] squaredSecondary;\n \n-    /** Orthogonal matrix of tridiagonal transformation. */\n-    private RealMatrix orthoTridiag;\n+    /** Transformer to tridiagonal (may be null if matrix is already tridiagonal). */\n+    private TriDiagonalTransformer transformer;\n \n     /** Lower bound of spectra. */\n     private double lowerSpectra;\n \n         this.main      = main;\n         this.secondary = secondary;\n-        orthoTridiag   = null;\n+        transformer    = null;\n \n         // pre-compute some elements\n         squaredSecondary = new double[secondary.length];\n     private void transformToTridiagonal(final RealMatrix matrix) {\n \n         // transform the matrix to tridiagonal\n-        TriDiagonalTransformer transformer = new TriDiagonalTransformer(matrix);\n+        transformer = new TriDiagonalTransformer(matrix);\n         main      = transformer.getMainDiagonalRef();\n         secondary = transformer.getSecondaryDiagonalRef();\n \n             final double s = secondary[i];\n             squaredSecondary[i] = s * s;\n         }\n-\n-        orthoTridiag = transformer.getQ();\n \n     }\n \n             eigenvector[i] *= inv;\n         }\n \n-        return (orthoTridiag == null) ?\n+        return (transformer == null) ?\n                new RealVectorImpl(eigenvector, false) :\n-               new RealVectorImpl(orthoTridiag.operate(eigenvector), false);\n+               new RealVectorImpl(transformer.getQ().operate(eigenvector), false);\n \n     }\n ", "timestamp": 1228228907, "metainfo": ""}