{"sha": "3a0754d7a9a54a1e2719ef2d7ccd69764a7e9dbf", "log": "MATH-581 Framework for iterative linear solvers.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n+++ b/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n     NOT_POSITIVE_COLUMNDIMENSION(\"invalid column dimension: {0} (must be positive)\"),\n     NOT_POSITIVE_DEFINITE_MATRIX(\"not positive definite matrix\"),\n     NON_POSITIVE_DEFINITE_MATRIX(\"not positive definite matrix: diagonal element at ({0},{0}) is larger than {2}\"), /* keep */\n+    NON_POSITIVE_DEFINITE_LINEAR_OPERATOR(\"non positive definite linear operator: x' A x <= 0 when x is {0}\"),\n+    NON_SELF_ADJOINT_LINEAR_OPERATOR(\"non self-adjoint linear operator: |x' A y - y' A x| > {0} when x is {1} and y is {2}\"),\n     DEGREES_OF_FREEDOM(\"degrees of freedom ({0})\"), /* keep */\n     NOT_POSITIVE_DEGREES_OF_FREEDOM(\"degrees of freedom must be positive ({0})\"),\n     NOT_POSITIVE_ELEMENT_AT_INDEX(\"element {0} is not positive: {1}\"),\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/linear/NonPositiveDefiniteLinearOperatorException.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.linear;\n+\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n+\n+/**\n+ * Exception to be thrown when a symmetric, definite positive\n+ * {@link RealLinearOperator} is expected.\n+ * Since the coefficients of the matrix are not accessible, the most\n+ * general definition is used to check that {@code A} is not positive\n+ * definite, i.e.  there exists {@code x} such that {@code x' A x <= 0}.\n+ * In the terminology of this exception, {@code A} is the \"offending\"\n+ * linear operator and {@code x} the \"offending\" vector.\n+ *\n+ * @version $Id$\n+ */\n+public class NonPositiveDefiniteLinearOperatorException\n+    extends MathIllegalArgumentException {\n+    /** The offending linear operator.*/\n+    private final RealLinearOperator a;\n+    /** A reference to the offending vector. */\n+    private final RealVector x;\n+\n+    /**\n+     * Creates a new instance of this class.\n+     *\n+     * @param a Offending linear operator.\n+     * @param x Offending vector.\n+     */\n+    public NonPositiveDefiniteLinearOperatorException(final RealLinearOperator a,\n+                                                      final double[] x) {\n+        this(a, new ArrayRealVector(x, false));\n+    }\n+\n+    /**\n+     * Creates a new instance of this class.\n+     *\n+     * @param a Offending linear operator.\n+     * @param x Offending vector.\n+     */\n+    public NonPositiveDefiniteLinearOperatorException(final RealLinearOperator a,\n+                                                      final RealVector x) {\n+        super(LocalizedFormats.NON_POSITIVE_DEFINITE_LINEAR_OPERATOR, x);\n+        this.a = a;\n+        this.x = x;\n+    }\n+\n+    /**\n+     * Returns a reference to the offending vector.\n+     * If the exception was raised by a call to\n+     * {@link #NonPositiveDefiniteLinearOperatorException(RealLinearOperator,\n+     * double[])}, then a new {@link ArrayRealVector} holding a reference to\n+     * the actual {@code double[]} is returned.\n+     *\n+     * @return the offending vector.\n+     */\n+    public RealVector copyOffendingVector() {\n+        return x;\n+    }\n+\n+    /**\n+     * Returns a reference to the offending linear operator.\n+     *\n+     * @return the offending linear operator.\n+     */\n+    public RealLinearOperator getOffendingLinearOperator() {\n+        return a;\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/linear/NonSelfAdjointLinearOperatorException.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.linear;\n+\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n+\n+/**\n+ * Exception to be thrown when a self-adjoint {@link RealLinearOperator}\n+ * is expected.\n+ * Since the coefficients of the matrix are not accessible, the most\n+ * general definition is used to check that A is not self-adjoint, i.e.\n+ * there exist x and y such as {@code | x' A y - y' A x | >= eps},\n+ * where {@code eps} is a user-specified tolerance, and {@code x'}\n+ * denotes the transpose of {@code x}.\n+ * In the terminology of this exception, {@code A} is the \"offending\"\n+ * linear operator, {@code x} and {@code y} are the first and second\n+ * \"offending\" vectors, respectively.\n+ *\n+ * @version $Id$\n+ */\n+public class NonSelfAdjointLinearOperatorException\n+    extends MathIllegalArgumentException {\n+    /** The offending linear operator, A. */\n+    private final RealLinearOperator a;\n+    /** The threshold. */\n+    private final double threshold;\n+    /** A reference to the first offending vector*/\n+    private final RealVector x;\n+    /** A reference to the second offending vector*/\n+    private final RealVector y;\n+\n+    /**\n+     * Creates a new instance of this class.\n+     *\n+     * @param a Offending linear operator.\n+     * @param x First offending vector.\n+     * @param y Second offending vector.\n+     * @param threshold Threshold.\n+     */\n+    public NonSelfAdjointLinearOperatorException(final RealLinearOperator a,\n+                                                 final double[] x,\n+                                                 final double[] y,\n+                                                 final double threshold) {\n+        this(a,\n+             new ArrayRealVector(x, false),\n+             new ArrayRealVector(y, false),\n+             threshold);\n+    }\n+\n+    /**\n+     * Creates a new instance of this class.\n+     *\n+     * @param a Offending linear operator.\n+     * @param x First offending vector.\n+     * @param y Second offending vector.\n+     * @param threshold Threshold.\n+     */\n+    public NonSelfAdjointLinearOperatorException(final RealLinearOperator a,\n+                                                 final RealVector x,\n+                                                 final RealVector y,\n+                                                 final double threshold) {\n+        super(LocalizedFormats.NON_SELF_ADJOINT_LINEAR_OPERATOR, threshold, x, y);\n+        this.a = a;\n+        this.x = x;\n+        this.y = y;\n+        this.threshold = threshold;\n+    }\n+\n+    /**\n+     * Returns a reference to the first offending vector.\n+     * If the exception was raised by a call to\n+     * {@link #NonSelfAdjointLinearOperatorException(RealLinearOperator,\n+     * double[], double[], double)}, then a new {@link ArrayRealVector}\n+     * holding a reference to the actual {@code double[]} is returned.\n+     *\n+     * @return the first offending vector.\n+     */\n+    public RealVector getFirstOffendingVector() {\n+        return x;\n+    }\n+\n+    /**\n+     * Returns a reference to the offending linear operator.\n+     *\n+     * @return the offending linear operator.\n+     */\n+    public RealLinearOperator getOffendingLinearOperator() {\n+        return a;\n+    }\n+\n+    /**\n+     * Returns a copy of the second offending vector.\n+     * If the exception was raised by a call to\n+     * {@link #NonSelfAdjointLinearOperatorException(RealLinearOperator,\n+     * double[], double[], double)}, then a new {@link ArrayRealVector}\n+     * holding a reference to the actual {@code double[]} is returned.\n+     *\n+     * @return the second offending vector.\n+     */\n+    public RealVector getSecondOffendingVector() {\n+        return y;\n+    }\n+\n+    /**\n+     * Returns the threshold.\n+     *\n+     * @return the threshold.\n+     */\n+    public double getThreshold() {\n+        return threshold;\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/linear/RealLinearOperator.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.linear;\n+\n+import org.apache.commons.math.exception.DimensionMismatchException;\n+\n+/**\n+ * This class defines a linear operator operating on real ({@code double})\n+ * vector spaces.\n+ * No direct access to the coefficients of the underlying matrix is provided.\n+ *\n+ * The motivation for such an interface is well stated by\n+ * <a href=\"#BARR1994\">Barrett et al. (1994)</a>:\n+ * <blockquote>\n+ *  We restrict ourselves to iterative methods, which work by repeatedly\n+ *  improving an approximate solution until it is accurate enough. These\n+ *  methods access the coefficient matrix {@code A} of the linear system\n+ *  only via the matrix-vector product {@code y = A x} (and perhaps\n+ *  {@code z} = {@code A}<sup>T</sup> {@code x}). Thus the user need only\n+ *  supply a subroutine for computing {@code y} (and perhaps {@code z})\n+ *  given {@code x}, which permits full exploitation of the sparsity or\n+ *  other special structure of A.\n+ * </blockquote>\n+ * <br/>\n+ *\n+ * <dl>\n+ *  <dt><a name=\"BARR1994\">Barret et al. (1994)</a></dt>\n+ *  <dd>\n+ *   R. Barrett, M. Berry, T. F. Chan, J. Demmel, J. M. Donato, J. Dongarra, V.\n+ *   Eijkhout, R. Pozo, C. Romine and H. Van der Vorst,\n+ *   <em>Templates for the Solution of Linear Systems: Building Blocks for\n+ *   Iterative Methods</em>, SIAM</dd>\n+ * </dl>\n+ *\n+ * @version $Id$\n+ */\n+public abstract class RealLinearOperator {\n+    /** The dimension of the codomain. */\n+    private final int rowDimension;\n+    /** The dimension of the domain. */\n+    private final int columnDimension;\n+\n+    /**\n+     * Creates a new instance of this class, with specified dimensions\n+     * of the domain and codomain.\n+     *\n+     * @param rowDimension Dimension of the codomain (number of rows).\n+     * @param columnDimension Dimension of the domain (number of columns).\n+     */\n+    public RealLinearOperator(final int rowDimension, final int columnDimension) {\n+        this.columnDimension = columnDimension;\n+        this.rowDimension = rowDimension;\n+    }\n+\n+    /**\n+     * Returns the dimension of the codomain of this operator.\n+     *\n+     * @return the number of rows of the underlying matrix.\n+     */\n+    public final int getRowDimension() {\n+        return rowDimension;\n+    }\n+\n+    /**\n+     * Returns the dimension of the domain of this operator.\n+     *\n+     * @return the number of columns of the underlying matrix.\n+     */\n+    public final int getColumnDimension() {\n+        return columnDimension;\n+    }\n+\n+    /**\n+     * Returns the result of multiplying {@code this} by the vector {@code x}.\n+     *\n+     * @param x Vector to operate on.\n+     * @return the product of {@code this} instance with {@code x}.\n+     */\n+    public double[] operate(final double[] x) {\n+        if (x.length != getColumnDimension()) {\n+            throw new DimensionMismatchException(x.length, getColumnDimension());\n+        }\n+        final RealVector y = operate(new ArrayRealVector(x, false));\n+        if (y instanceof ArrayRealVector) {\n+            return ((ArrayRealVector) y).getDataRef();\n+        } else {\n+            return y.getData();\n+        }\n+    }\n+\n+    /**\n+     * Returns the result of multiplying {@code this} by the vector {@code x}.\n+     *\n+     * @param x Vector to operate on.\n+     * @return the product of {@code this} instance with {@code x}.\n+     */\n+    public abstract RealVector operate(final RealVector x);\n+}", "timestamp": 1310471726, "metainfo": ""}