{"sha": "695d2dc08b6baa4c08ea8d10633319f0e95874cf", "log": "MATH-707 Renamed \"UnivariateRealOptimizer\" -> \"UnivariateOptimizer\".   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/optimization/BaseOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/BaseOptimizer.java\n  *  <li>{@link org.apache.commons.math3.optimization.MultivariateOptimizer}</li>\n  *  <li>{@link org.apache.commons.math3.optimization.DifferentiableMultivariateOptimizer}</li>\n  *  <li>{@link org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer}</li>\n- *  <li>{@link org.apache.commons.math3.optimization.univariate.UnivariateRealOptimizer}</li>\n+ *  <li>{@link org.apache.commons.math3.optimization.univariate.UnivariateOptimizer}</li>\n  * </ul>\n  *\n  * @param <PAIR> Type of the point/objective pair.\n--- a/src/main/java/org/apache/commons/math3/optimization/package-info.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/package-info.java\n  * interfaces defining the common behavior of optimizers, one for each supported type of objective\n  * function:\n  * <ul>\n- *  <li>{@link org.apache.commons.math3.optimization.univariate.UnivariateRealOptimizer\n- *      UnivariateRealOptimizer} for {@link org.apache.commons.math3.analysis.UnivariateFunction\n+ *  <li>{@link org.apache.commons.math3.optimization.univariate.UnivariateOptimizer\n+ *      UnivariateOptimizer} for {@link org.apache.commons.math3.analysis.UnivariateFunction\n  *      univariate real functions}</li>\n  *  <li>{@link org.apache.commons.math3.optimization.MultivariateOptimizer\n  *      MultivariateOptimizer} for {@link org.apache.commons.math3.analysis.MultivariateFunction\n--- a/src/main/java/org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer.java\n  * @since 2.0\n  */\n public abstract class BaseAbstractUnivariateOptimizer\n-    implements UnivariateRealOptimizer {\n+    implements UnivariateOptimizer {\n     /** Convergence checker. */\n     private final ConvergenceChecker<UnivariatePointValuePair> checker;\n     /** Evaluations counter. */\n--- a/src/main/java/org/apache/commons/math3/optimization/univariate/BaseUnivariateOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/univariate/BaseUnivariateOptimizer.java\n  * Commons-Math. Users of the API are advised to base their code on\n  * the following interfaces:\n  * <ul>\n- *  <li>{@link org.apache.commons.math3.optimization.univariate.UnivariateRealOptimizer}</li>\n+ *  <li>{@link org.apache.commons.math3.optimization.univariate.UnivariateOptimizer}</li>\n  * </ul>\n  *\n  * @param <FUNC> Type of the objective function to be optimized.\n--- a/src/main/java/org/apache/commons/math3/optimization/univariate/UnivariateMultiStartOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/univariate/UnivariateMultiStartOptimizer.java\n import org.apache.commons.math3.optimization.ConvergenceChecker;\n \n /**\n- * Special implementation of the {@link UnivariateRealOptimizer} interface\n+ * Special implementation of the {@link UnivariateOptimizer} interface\n  * adding multi-start features to an existing optimizer.\n  *\n  * This class wraps a classical optimizer to use it several times in\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math3/optimization/univariate/UnivariateOptimizer.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.optimization.univariate;\n+\n+import org.apache.commons.math3.analysis.UnivariateFunction;\n+\n+/**\n+ * Interface for univariate optimization algorithms.\n+ *\n+ * @version $Id$\n+ * @since 3.0\n+ */\n+public interface UnivariateOptimizer\n+    extends BaseUnivariateOptimizer<UnivariateFunction> {}\n--- a/src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java\n     @Test\n     public void testSinMin() {\n         UnivariateFunction f = new SinFunction();\n-        UnivariateRealOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);\n+        UnivariateOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);\n         Assert.assertEquals(3 * Math.PI / 2, optimizer.optimize(200, f, GoalType.MINIMIZE, 4, 5).getPoint(),1e-8);\n         Assert.assertTrue(optimizer.getEvaluations() <= 50);\n         Assert.assertEquals(200, optimizer.getMaxEvaluations());\n     public void testQuinticMin() {\n         // The function has local minima at -0.27195613 and 0.82221643.\n         UnivariateFunction f = new QuinticFunction();\n-        UnivariateRealOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);\n+        UnivariateOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);\n         Assert.assertEquals(-0.27195613, optimizer.optimize(200, f, GoalType.MINIMIZE, -0.3, -0.2).getPoint(), 1.0e-8);\n         Assert.assertEquals( 0.82221643, optimizer.optimize(200, f, GoalType.MINIMIZE,  0.3,  0.9).getPoint(), 1.0e-8);\n         Assert.assertTrue(optimizer.getEvaluations() <= 50);\n     public void testQuinticMinStatistics() {\n         // The function has local minima at -0.27195613 and 0.82221643.\n         UnivariateFunction f = new QuinticFunction();\n-        UnivariateRealOptimizer optimizer = new BrentOptimizer(1e-11, 1e-14);\n+        UnivariateOptimizer optimizer = new BrentOptimizer(1e-11, 1e-14);\n \n         final DescriptiveStatistics[] stat = new DescriptiveStatistics[2];\n         for (int i = 0; i < stat.length; i++) {\n         // The quintic function has zeros at 0, +-0.5 and +-1.\n         // The function has a local maximum at 0.27195613.\n         UnivariateFunction f = new QuinticFunction();\n-        UnivariateRealOptimizer optimizer = new BrentOptimizer(1e-12, 1e-14);\n+        UnivariateOptimizer optimizer = new BrentOptimizer(1e-12, 1e-14);\n         Assert.assertEquals(0.27195613, optimizer.optimize(100, f, GoalType.MAXIMIZE, 0.2, 0.3).getPoint(), 1e-8);\n         try {\n             optimizer.optimize(5, f, GoalType.MAXIMIZE, 0.2, 0.3);\n     @Test\n     public void testMinEndpoints() {\n         UnivariateFunction f = new SinFunction();\n-        UnivariateRealOptimizer optimizer = new BrentOptimizer(1e-8, 1e-14);\n+        UnivariateOptimizer optimizer = new BrentOptimizer(1e-8, 1e-14);\n \n         // endpoint is minimum\n         double result = optimizer.optimize(50, f, GoalType.MINIMIZE, 3 * Math.PI / 2, 5).getPoint();\n--- a/src/test/java/org/apache/commons/math3/optimization/univariate/UnivariateMultiStartOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math3/optimization/univariate/UnivariateMultiStartOptimizerTest.java\n     @Test\n     public void testSinMin() {\n         UnivariateFunction f = new SinFunction();\n-        UnivariateRealOptimizer underlying = new BrentOptimizer(1e-10, 1e-14);\n+        UnivariateOptimizer underlying = new BrentOptimizer(1e-10, 1e-14);\n         JDKRandomGenerator g = new JDKRandomGenerator();\n         g.setSeed(44428400075l);\n         UnivariateMultiStartOptimizer<UnivariateFunction> optimizer =\n         // The quintic function has zeros at 0, +-0.5 and +-1.\n         // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n         UnivariateFunction f = new QuinticFunction();\n-        UnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);\n+        UnivariateOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);\n         JDKRandomGenerator g = new JDKRandomGenerator();\n         g.setSeed(4312000053L);\n         UnivariateMultiStartOptimizer<UnivariateFunction> optimizer =\n                     return 0;\n                 }\n             };\n-        UnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);\n+        UnivariateOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);\n         JDKRandomGenerator g = new JDKRandomGenerator();\n         g.setSeed(4312000053L);\n         UnivariateMultiStartOptimizer<UnivariateFunction> optimizer =", "timestamp": 1329348273, "metainfo": ""}