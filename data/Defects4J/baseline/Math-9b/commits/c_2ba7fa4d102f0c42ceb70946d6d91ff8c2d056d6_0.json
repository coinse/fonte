{"sha": "2ba7fa4d102f0c42ceb70946d6d91ff8c2d056d6", "log": "Initial commit.   ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/distribution/DiscreteDistributionAbstractTest.java\n+/*\n+ * Copyright 2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.distribution;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Abstract base class for {@link DiscreteDistribution} tests.\n+ * <p>\n+ * To create a concrete test class for a discrete distribution implementation,\n+ *  implement makeDistribution() to return a distribution instance to use in \n+ *  tests and each of the test data generation methods below.  In each case, the\n+ *  test points and test values arrays returned represent parallel arrays of \n+ *  inputs and expected values for the distribution returned by makeDistribution().\n+ *  <p>\n+ *  makeDensityTestPoints() -- arguments used to test probability density calculation\n+ *  makeDensityTestValues() -- expected probability densities\n+ *  makeCumulativeTestPoints() -- arguments used to test cumulative probabilities\n+ *  makeCumulativeTestValues() -- expected cumulative probabilites\n+ *  makeInverseCumulativeTestPoints() -- arguments used to test inverse cdf evaluation\n+ *  makeInverseCumulativeTestValues() -- expected inverse cdf values\n+ * <p>\n+ *  To implement additional test cases with different distribution instances and test data,\n+ *  use the setXxx methods for the instance data in test cases and call the verifyXxx methods\n+ *  to verify results. \n+ * \n+ * @version $Revision: 1.1 $ $Date: 2004/05/11 02:09:14 $\n+ */\n+public abstract class DiscreteDistributionAbstractTest extends TestCase {\n+    \n+//-------------------- Private test instance data -------------------------\n+    /** Discrete distribution instance used to perform tests */\n+    private DiscreteDistribution distribution;\n+    \n+    /** Tolerance used in comparing expected and returned values */\n+    private double tolerance = 1E-4;\n+    \n+    /** Arguments used to test probability density calculations */\n+    private int[] densityTestPoints;\n+    \n+    /** Values used to test probability density calculations */\n+    private double[] densityTestValues;\n+    \n+    /** Arguments used to test cumulative probability density calculations */\n+    private int[] cumulativeTestPoints;\n+    \n+    /** Values used to test cumulative probability density calculations */\n+    private double[] cumulativeTestValues;\n+    \n+    /** Arguments used to test inverse cumulative probability density calculations */\n+    private double[] inverseCumulativeTestPoints;\n+    \n+    /** Values used to test inverse cumulative probability density calculations */\n+    private int[] inverseCumulativeTestValues;\n+    \n+    //-------------------------------------------------------------------------\n+    \n+    /**\n+     * Constructor for DiscreteDistributionAbstractTest.\n+     * @param name\n+     */\n+    public DiscreteDistributionAbstractTest(String name) {\n+        super(name);\n+    }\n+    \n+    //-------------------- Abstract methods -----------------------------------\n+    \n+    /** Creates the default discrete distribution instance to use in tests. */\n+    public abstract DiscreteDistribution makeDistribution();\n+    \n+    /** Creates the default probability density test input values */\n+    public abstract int[] makeDensityTestPoints();\n+    \n+    /** Creates the default probability density test expected values */\n+    public abstract double[] makeDensityTestValues();\n+    \n+    /** Creates the default cumulative probability density test input values */\n+    public abstract int[] makeCumulativeTestPoints();\n+    \n+    /** Creates the default cumulative probability density test expected values */\n+    public abstract double[] makeCumulativeTestValues();\n+    \n+    /** Creates the default inverse cumulative probability test input values */\n+    public abstract double[] makeInverseCumulativeTestPoints();\n+    \n+    /** Creates the default inverse cumulative probability density test expected values */\n+    public abstract int[] makeInverseCumulativeTestValues();\n+    \n+    //-------------------- Setup / tear down ----------------------------------\n+     \n+    /**\n+     * Setup sets all test instance data to default values \n+     */\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        distribution = makeDistribution();\n+        densityTestPoints = makeDensityTestPoints();\n+        densityTestValues = makeDensityTestValues();\n+        cumulativeTestPoints = makeCumulativeTestPoints();\n+        cumulativeTestValues = makeCumulativeTestValues();\n+        inverseCumulativeTestPoints = makeInverseCumulativeTestPoints();\n+        inverseCumulativeTestValues = makeInverseCumulativeTestValues();   \n+    }\n+    \n+    /**\n+     * Cleans up test instance data\n+     */\n+    protected void tearDown() throws Exception {      \n+        super.tearDown();\n+        distribution = null;\n+        densityTestPoints = null;\n+        densityTestValues = null;\n+        cumulativeTestPoints = null;\n+        cumulativeTestValues = null;\n+        inverseCumulativeTestPoints = null;\n+        inverseCumulativeTestValues = null;   \n+    }\n+    \n+    //-------------------- Verification methods -------------------------------\n+    \n+    /**\n+     * Verifies that probability density calculations match exptected values\n+     * using current test instance data\n+     */\n+    protected void verifyDensities() throws Exception {\n+        for (int i = 0; i < densityTestPoints.length; i++) {\n+            assertEquals(\"Incorrect density value returned for \" + densityTestPoints[i],\n+                    densityTestValues[i], \n+                    distribution.probability(densityTestPoints[i]), tolerance);\n+        }     \n+    }\n+    \n+    /**\n+     * Verifies that cumulative probability density calculations match exptected values\n+     * using current test instance data\n+     */   \n+    protected void verifyCumulativeProbabilities() throws Exception {\n+        for (int i = 0; i < cumulativeTestPoints.length; i++) {\n+            assertEquals(\"Incorrect cumulative probability value returned for \" + cumulativeTestPoints[i],\n+                    cumulativeTestValues[i], \n+                    distribution.cumulativeProbability(cumulativeTestPoints[i]), tolerance);\n+        }           \n+    }\n+    \n+    /**\n+     * Verifies that inverse cumulative probability density calculations match exptected values\n+     * using current test instance data\n+     */\n+    protected void verifyInverseCumulativeProbabilities() throws Exception {\n+        for (int i = 0; i < inverseCumulativeTestPoints.length; i++) {\n+            assertEquals(\"Incorrect inverse cumulative probability value returned for \" \n+                    + inverseCumulativeTestPoints[i], inverseCumulativeTestValues[i], \n+                    distribution.inverseCumulativeProbability(inverseCumulativeTestPoints[i]));\n+        }           \n+    }\n+    \n+    //------------------------ Default test cases -----------------------------\n+\n+    /**\n+     * Verifies that probability density calculations match exptected values\n+     * using default test instance data\n+     */\n+    public void testDensities() throws Exception {\n+        verifyDensities();     \n+    }\n+    \n+    /**\n+     * Verifies that cumulative probability density calculations match exptected values\n+     * using default test instance data\n+     */\n+    public void testCumulativeProbabilities() throws Exception {\n+        verifyCumulativeProbabilities();      \n+    }\n+    \n+    /**\n+     * Verifies that inverse cumulative probability density calculations match exptected values\n+     * using default test instance data\n+     */\n+    public void testInverseCumulativeProbabilities() throws Exception {\n+        verifyInverseCumulativeProbabilities();       \n+    }\n+    \n+    /**\n+     * Verifies that illegal arguments are correctly handled\n+     */\n+    public void testIllegalArguments() throws Exception {\n+        try {\n+            distribution.cumulativeProbability(1, 0);\n+            fail(\"Expecting IllegalArgumentException for bad cumulativeProbability interval\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        try {\n+            distribution.inverseCumulativeProbability(-1);\n+            fail(\"Expecting IllegalArgumentException for p = -1\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        try {\n+            distribution.inverseCumulativeProbability(1);\n+            fail(\"Expecting IllegalArgumentException for p = 1\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        try {\n+            distribution.inverseCumulativeProbability(2);\n+            fail(\"Expecting IllegalArgumentException for p = 2\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }       \n+    }\n+    \n+    //------------------ Getters / Setters for test instance data -----------\n+    /**\n+     * @return Returns the cumulativeTestPoints.\n+     */\n+    protected int[] getCumulativeTestPoints() {\n+        return cumulativeTestPoints;\n+    }\n+\n+    /**\n+     * @param cumulativeTestPoints The cumulativeTestPoints to set.\n+     */\n+    protected void setCumulativeTestPoints(int[] cumulativeTestPoints) {\n+        this.cumulativeTestPoints = cumulativeTestPoints;\n+    }\n+\n+    /**\n+     * @return Returns the cumulativeTestValues.\n+     */\n+    protected double[] getCumulativeTestValues() {\n+        return cumulativeTestValues;\n+    }\n+\n+    /**\n+     * @param cumulativeTestValues The cumulativeTestValues to set.\n+     */\n+    protected void setCumulativeTestValues(double[] cumulativeTestValues) {\n+        this.cumulativeTestValues = cumulativeTestValues;\n+    }\n+\n+    /**\n+     * @return Returns the densityTestPoints.\n+     */\n+    protected int[] getDensityTestPoints() {\n+        return densityTestPoints;\n+    }\n+\n+    /**\n+     * @param densityTestPoints The densityTestPoints to set.\n+     */\n+    protected void setDensityTestPoints(int[] densityTestPoints) {\n+        this.densityTestPoints = densityTestPoints;\n+    }\n+\n+    /**\n+     * @return Returns the densityTestValues.\n+     */\n+    protected double[] getDensityTestValues() {\n+        return densityTestValues;\n+    }\n+\n+    /**\n+     * @param densityTestValues The densityTestValues to set.\n+     */\n+    protected void setDensityTestValues(double[] densityTestValues) {\n+        this.densityTestValues = densityTestValues;\n+    }\n+\n+    /**\n+     * @return Returns the distribution.\n+     */\n+    protected DiscreteDistribution getDistribution() {\n+        return distribution;\n+    }\n+\n+    /**\n+     * @param distribution The distribution to set.\n+     */\n+    protected void setDistribution(DiscreteDistribution distribution) {\n+        this.distribution = distribution;\n+    }\n+\n+    /**\n+     * @return Returns the inverseCumulativeTestPoints.\n+     */\n+    protected double[] getInverseCumulativeTestPoints() {\n+        return inverseCumulativeTestPoints;\n+    }\n+\n+    /**\n+     * @param inverseCumulativeTestPoints The inverseCumulativeTestPoints to set.\n+     */\n+    protected void setInverseCumulativeTestPoints(double[] inverseCumulativeTestPoints) {\n+        this.inverseCumulativeTestPoints = inverseCumulativeTestPoints;\n+    }\n+\n+    /**\n+     * @return Returns the inverseCumulativeTestValues.\n+     */\n+    protected int[] getInverseCumulativeTestValues() {\n+        return inverseCumulativeTestValues;\n+    }\n+\n+    /**\n+     * @param inverseCumulativeTestValues The inverseCumulativeTestValues to set.\n+     */\n+    protected void setInverseCumulativeTestValues(int[] inverseCumulativeTestValues) {\n+        this.inverseCumulativeTestValues = inverseCumulativeTestValues;\n+    }\n+\n+    /**\n+     * @return Returns the tolerance.\n+     */\n+    protected double getTolerance() {\n+        return tolerance;\n+    }\n+\n+    /**\n+     * @param tolerance The tolerance to set.\n+     */\n+    protected void setTolerance(double tolerance) {\n+        this.tolerance = tolerance;\n+    }\n+\n+}", "timestamp": 1084241354, "metainfo": ""}