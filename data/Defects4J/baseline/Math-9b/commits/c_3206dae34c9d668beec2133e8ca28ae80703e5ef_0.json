{"sha": "3206dae34c9d668beec2133e8ca28ae80703e5ef", "log": "PR: http://nagoya.apache.org/bugzilla/show_bug.cgi?id=20627 Submitted by:\tbrent@worden.org   ", "commit": "\n--- a/src/java/org/apache/commons/math/ContinuedFraction.java\n+++ b/src/java/org/apache/commons/math/ContinuedFraction.java\n     /** Maximum allowed numerical error. */\n     private static final double DEFAULT_EPSILON = 10e-9;\n     \n-\t/**\n-\t * Default constructor.\n-\t */\n-\tprotected ContinuedFraction() {\n-\t\tsuper();\n-\t}\n+    /**\n+     * Default constructor.\n+     */\n+    protected ContinuedFraction() {\n+        super();\n+    }\n     \n     /**\n      * Access the n-th a coefficient of the continued fraction.  Since a can be\n      * @param x the evaluation point.\n      * @return the value of the continued fraction evaluated at x. \n      */\n-    public double evaluate(double x){\n+    public double evaluate(double x) {\n         return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);\n     }    \n     \n      * @param epsilon maximum error allowed.\n      * @return the value of the continued fraction evaluated at x. \n      */\n-    public double evaluate(double x, double epsilon){\n+    public double evaluate(double x, double epsilon) {\n         return evaluate(x, epsilon, Integer.MAX_VALUE);\n     }    \n     \n      * @param maxIterations maximum number of convergents\n      * @return the value of the continued fraction evaluated at x. \n      */\n-    public double evaluate(double x, int maxIterations){\n+    public double evaluate(double x, int maxIterations) {\n         return evaluate(x, DEFAULT_EPSILON, maxIterations);\n     }    \n     \n     }\n     \n     /**\n-     * Evaluates the n-th convergent, fn = pn / qn, for this continued fraction at the value x.\n+     * Evaluates the n-th convergent, fn = pn / qn, for this continued fraction\n+     * at the value x.\n      * @param n the convergent to compute.\n      * @param x the evaluation point.\n      * @param a (n-1)-th convergent matrix.  (Input)\n      * @param f the n-th convergent matrix. (Output)\n      * @param epsilon maximum error allowed.\n      * @param maxIterations maximum number of convergents\n-     * @return the value of the the n-th convergent for this continued fraction evaluated at x. \n-     */\n-    private double evaluate(int n, double x, double[][] a, double[][] an, double[][] f, double epsilon, int maxIterations) {\n+     * @return the value of the the n-th convergent for this continued fraction\n+     *         evaluated at x. \n+     */\n+    private double evaluate(int n, double x, double[][] a, double[][] an,\n+            double[][] f, double epsilon, int maxIterations) {\n         double ret;\n         \n         // create next matrix\n         f[1][1] = (a[1][0] * an[0][1]) + (a[1][1] * an[1][1]);\n         \n         // determine if we're close enough\n-        if(Math.abs((f[0][0] * f[1][1]) - (f[1][0] * f[0][1])) < Math.abs(epsilon * f[1][0] * f[1][1])){\n+        if(Math.abs((f[0][0] * f[1][1]) - (f[1][0] * f[0][1])) <\n+                Math.abs(epsilon * f[1][0] * f[1][1])){\n             ret = f[0][0] / f[1][0];\n         } else {\n             if(n >= maxIterations){\n-                throw new ConvergenceException(\"Continued fraction convergents failed to converge.\");\n+                throw new ConvergenceException(\n+                    \"Continued fraction convergents failed to converge.\");\n             }\n             // compute next\n-            ret = evaluate(n + 1, x, f /* new a */, an /* reuse an */, a /* new f */, epsilon, maxIterations);\n+            ret = evaluate(n + 1, x, f /* new a */, an /* reuse an */,\n+                            a /* new f */, epsilon, maxIterations);\n         }\n         \n         return ret;\n--- a/src/java/org/apache/commons/math/ConvergenceException.java\n+++ b/src/java/org/apache/commons/math/ConvergenceException.java\n  * @author Brent Worden\n  */\n public class ConvergenceException extends RuntimeException {\n+    /**\n+     * Construct an exception with the given message.\n+     * @param message descriptive error message. \n+     */\n+    public ConvergenceException(String message) {\n+        super(message);\n+    }\n \n-\t/**\n-\t * \n-\t */\n-\tpublic ConvergenceException(String message) {\n-\t\tsuper(message);\n-\t}\n-\n-\t/**\n-\t * \n-\t */\n-\tpublic ConvergenceException(String message, Throwable cause) {\n-\t\tsuper(message, cause);\n-\t}\n+    /**\n+     * Construct an exception with the given message and root cause.\n+     * @param message descriptive error message.\n+     * @param cause root cause.\n+     */\n+    public ConvergenceException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n \n }\n--- a/src/java/org/apache/commons/math/RootFinding.java\n+++ b/src/java/org/apache/commons/math/RootFinding.java\n     /**\n      * Default constructor. Prohibit construction.\n      */\n-    private RootFinding(){\n+    private RootFinding() {\n         super();\n     }\n \n     public static double[] bracket(UnivariateFunction function,\n                                    double initial,\n                                    double lowerBound,\n-                                   double upperBound){\n+                                   double upperBound) {\n         return bracket( function, initial, lowerBound, upperBound, Integer.MAX_VALUE ) ;\n     }\n \n                                    double initial,\n                                    double lowerBound,\n                                    double upperBound,\n-                                   int maximumIterations){\n+                                   int maximumIterations) {\n         double a = initial;\n         double b = initial;\n         double fa;\n      */\n     public static double bisection(UnivariateFunction function,\n                                    double a,\n-                                   double b){\n+                                   double b) {\n         double m;\n         double fm;\n         double fa;\n \n-        if ( b < a )\n-        {\n+        if ( b < a ) {\n             double xtemp = a ;\n             a = b ;\n             b = xtemp ;\n \n         fa = function.evaluate(a);\n \n-        while(Math.abs(a - b) > EPSILON){\n+        while(Math.abs(a - b) > EPSILON) {\n             m = (a + b) * 0.5;  // midpoint\n             fm = function.evaluate(m);\n \n-            if(fm * fa > 0.0){\n+            if(fm * fa > 0.0) {\n                 // b and m bracket the root.\n                 a = m;\n                 fa = fm;\n--- a/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n      * @param p the desired probability\n      * @return x, such that P(X &lt; x) = <code>p</code>\n      */\n-    public double inverseCummulativeProbability(final double p){\n-        if(p < 0.0 || p > 1.0){\n+    public double inverseCummulativeProbability(final double p) {\n+        if (p < 0.0 || p > 1.0){\n             throw new IllegalArgumentException(\n                 \"p must be between 0.0 and 1.0, inclusive.\");\n         }\n--- a/src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n package org.apache.commons.math.stat.distribution;\n \n /**\n      * Create a Chi-Squared distribution with the given degrees of freedom.\n      * @param degreesOfFreedom degrees of freedom.\n      */\n-    public ChiSquaredDistributionImpl(double degreesOfFreedom){\n+    public ChiSquaredDistributionImpl(double degreesOfFreedom) {\n         super();\n         setGamma(DistributionFactory.newInstance().createGammaDistribution(\n             degreesOfFreedom / 2.0, 2.0));\n      * @return domain value lower bound, i.e.\n      *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n      */\n-    protected double getDomainLowerBound(double p){\n+    protected double getDomainLowerBound(double p) {\n         return Double.MIN_VALUE * getGamma().getBeta();\n     }\n \n      * @return domain value upper bound, i.e.\n      *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n      */\n-    protected double getDomainUpperBound(double p){\n+    protected double getDomainUpperBound(double p) {\n         // NOTE: chi squared is skewed to the left\n         // NOTE: therefore, P(X < &mu;) > .5\n \n         double ret;\n \n-        if(p < .5){\n+        if (p < .5) {\n             // use mean\n             ret = getDegreesOfFreedom();\n         } else {\n      * @param p the desired probability for the critical value\n      * @return initial domain value\n      */\n-    protected double getInitialDomain(double p){\n+    protected double getInitialDomain(double p) {\n         // NOTE: chi squared is skewed to the left\n         // NOTE: therefore, P(X < &mu;) > .5\n         \n         double ret;\n \n-        if(p < .5){\n+        if (p < .5) {\n             // use 1/2 mean\n             ret = getDegreesOfFreedom() * .5;\n         } else {\n--- a/src/java/org/apache/commons/math/distribution/FDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistribution.java\n  * \n  * <p>\n  * Instances of FDistribution objects should be created using\n- * {@link DistributionFactory#createFDistribution(double)}\n+ * {@link DistributionFactory#createFDistribution(double,double)}\n  * </p>\n  * \n  * <p>\n--- a/src/java/org/apache/commons/math/distribution/GammaDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/GammaDistribution.java\n  * \n  * <p>\n  * Instances of GammaDistribution objects should be created using\n- * {@link DistributionFactory#createGammaDistribution(double)}\n+ * {@link DistributionFactory#createGammaDistribution(double,double)}\n  * </p>\n  * \n  * <p>", "timestamp": 1055330081, "metainfo": ""}