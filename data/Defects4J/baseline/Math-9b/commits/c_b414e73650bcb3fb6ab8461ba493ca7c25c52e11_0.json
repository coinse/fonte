{"sha": "b414e73650bcb3fb6ab8461ba493ca7c25c52e11", "log": "Added standard errors.  ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java\n     public double[][] estimateRegressionParametersVariance() {\n         return calculateBetaVariance().getData();\n     }\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n+    public double[] estimateRegressionParametersStandardErrors() {\n+        double[][] betaVariance = estimateRegressionParametersVariance();\n+        double sigma = calculateYVariance();\n+        int length = betaVariance[0].length;\n+        double[] result = new double[length];\n+        for (int i = 0; i < length; i++) {\n+            result[i] = Math.sqrt(sigma * betaVariance[i][i]);\n+        }\n+        return result;\n+    }\n \n     /**\n      * {@inheritDoc}\n--- a/src/java/org/apache/commons/math/stat/regression/MultipleLinearRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/MultipleLinearRegression.java\n      * @return The double representing the variance of y\n      */\n     double estimateRegressandVariance();\n+    \n+    /**\n+     * Returns the standard errors of the regression parameters.\n+     * \n+     * @return standard errors of estimated regression parameters\n+     */\n+     double[] estimateRegressionParametersStandardErrors();\n \n }\n--- a/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java\n      * @return The beta variance\n      */\n     protected RealMatrix calculateBetaVariance() {\n+        //TODO:  find a way to use QR decomp to avoid inverting XX' here\n         RealMatrix XTX = X.transpose().multiply(X);\n         return new LUDecompositionImpl(XTX).getSolver().getInverse();\n     }\n--- a/src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java\n+++ b/src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java\n                       1E-8);\n         \n         // Check standard errors from NIST\n-        double[][] errors = model.estimateRegressionParametersVariance();\n-        //TODO:  translate this into std error vector and check  \n+        double[] errors = model.estimateRegressionParametersStandardErrors();\n+        TestUtils.assertEquals(new double[] {890420.383607373,\n+                       84.9149257747669,\n+                       0.334910077722432E-01,\n+                       0.488399681651699,\n+                       0.214274163161675,\n+                       0.226073200069370,\n+                       455.478499142212}, errors, 1E-2); // Ugh..\n+        // Bad accuracy is in intercept std error estimate.  Could be due to\n+        // Current impl inverting XX' to get standard errors.\n+        \n     }\n     \n     /**\n                 5.4326230830188482,-7.2375578629692230,2.1671550814448222,\n                 15.0147574652763112,4.8625103516321015,-7.1597256413907706,\n                 -0.4515205619767598,-10.2916870903837587,-15.7812984571900063},\n-                1E-12);  \n+                1E-12); \n+        \n+        // Check standard errors from R\n+        double[] errors = model.estimateRegressionParametersStandardErrors();\n+        TestUtils.assertEquals(new double[] {6.94881329475087,\n+                0.07360008972340,\n+                0.27410957467466,\n+                0.19454551679325,\n+                0.03726654773803}, errors, 1E-10); \n     }\n     \n     /**", "timestamp": 1231101585, "metainfo": ""}