{"sha": "e247b95014c9de0d82e2bf3d893d46333e2f1c3d", "log": "Genereal classes for managing iterations and handling events in iterative algorithms.  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/util/IterationEvent.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.util;\n+\n+import java.util.EventObject;\n+\n+/**\n+ * The root class from which all events occurring while running an\n+ * {@link IterationManager} should be derived.\n+ *\n+ * @version $Id$\n+ */\n+public class IterationEvent extends EventObject {\n+    /** */\n+    private static final long serialVersionUID = -1405936936084001482L;\n+\n+    /**\n+     * Creates a new instance of this class.\n+     *\n+     * @param source The iterative algorithm on which the event initially\n+     * occurred.\n+     */\n+    public IterationEvent(final Object source) {\n+        super(source);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/util/IterationListener.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.util;\n+\n+import java.util.EventListener;\n+\n+/**\n+ * The listener interface for receiving events occurring in an iterative\n+ * algorithm.\n+ *\n+ * @version $Id$\n+ */\n+public interface IterationListener extends EventListener {\n+    /**\n+     * Invoked after completion of the initial phase of the iterative algorithm\n+     * (prior to the main iteration loop).\n+     *\n+     * @param e The {@link IterationEvent} object.\n+     */\n+    void initializationPerformed(IterationEvent e);\n+\n+    /**\n+     * Invoked each time an iteration is completed (in the main iteration loop).\n+     *\n+     * @param e The {@link IterationEvent} object.\n+     */\n+    void iterationPerformed(IterationEvent e);\n+\n+    /**\n+     * Invoked each time a new iteration is completed (in the main iteration\n+     * loop).\n+     *\n+     * @param e The {@link IterationEvent} object.\n+     */\n+    void iterationStarted(IterationEvent e);\n+\n+    /**\n+     * Invoked after completion of the operations which occur after breaking out\n+     * of the main iteration loop.\n+     *\n+     * @param e The {@link IterationEvent} object.\n+     */\n+    void terminationPerformed(IterationEvent e);\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/util/IterationManager.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.util;\n+\n+import java.util.Collection;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * This abstract class provides a general framework for managing iterative\n+ * algorithms. The maximum number of iterations can be set, and methods are\n+ * provided to monitor the current iteration count. A lightweight event\n+ * framework is also provided.\n+ *\n+ * @version $Id$\n+ */\n+public class IterationManager {\n+    /** Keeps a count of the number of iterations. */\n+    private final Incrementor iterations;\n+\n+    /** The collection of all listeners attached to this iterative algorithm. */\n+    private final Collection<IterationListener> listeners;\n+\n+    /**\n+     * Creates a new instance of this class.\n+     *\n+     * @param maxIterations Maximum number of iterations.\n+     */\n+    public IterationManager(final int maxIterations) {\n+        this.iterations = new Incrementor();\n+        this.iterations.setMaximalCount(maxIterations);\n+        this.listeners = new CopyOnWriteArrayList<IterationListener>();\n+    }\n+\n+    /**\n+     * Attaches a listener to this manager.\n+     *\n+     * @param listener A {@code IterationListener} object.\n+     */\n+    public void addIterationListener(final IterationListener listener) {\n+        listeners.add(listener);\n+    }\n+\n+    /**\n+     * Informs all registered listeners that the initial phase (prior to the\n+     * main iteration loop) has been completed.\n+     *\n+     * @param e The {@link IterationEvent} object.\n+     */\n+    public void fireInitializationEvent(final IterationEvent e) {\n+        for (IterationListener l : listeners) {\n+            l.initializationPerformed(e);\n+        }\n+    }\n+\n+    /**\n+     * Informs all registered listeners that a new iteration (in the main\n+     * iteration loop) has been performed.\n+     *\n+     * @param e The {@link IterationEvent} object.\n+     */\n+    public void fireIterationPerformedEvent(final IterationEvent e) {\n+        for (IterationListener l : listeners) {\n+            l.iterationPerformed(e);\n+        }\n+    }\n+\n+    /**\n+     * Informs all registered listeners that a new iteration (in the main\n+     * iteration loop) has been started.\n+     *\n+     * @param e The {@link IterationEvent} object.\n+     */\n+    public void fireIterationStartedEvent(final IterationEvent e) {\n+        for (IterationListener l : listeners) {\n+            l.iterationStarted(e);\n+        }\n+    }\n+\n+    /**\n+     * Informs all registered listeners that the final phase (post-iterations)\n+     * has been completed.\n+     *\n+     * @param e The {@link IterationEvent} object.\n+     */\n+    public void fireTerminationEvent(final IterationEvent e) {\n+        for (IterationListener l : listeners) {\n+            l.terminationPerformed(e);\n+        }\n+    }\n+\n+    /**\n+     * Returns the number of iterations of this solver, 0 if no iterations has\n+     * been performed yet.\n+     *\n+     * @return the number of iterations.\n+     */\n+    public int getIterations() {\n+        return iterations.getCount();\n+    }\n+\n+    /**\n+     * Returns the maximum number of iterations.\n+     *\n+     * @return the maximum number of iterations.\n+     */\n+    public int getMaxIterations() {\n+        return iterations.getMaximalCount();\n+    }\n+\n+    /**\n+     * Increments the iteration count by one, and throws an exception if the\n+     * maximum number of iterations is reached. This method should be called at\n+     * the beginning of a new iteration.\n+     *\n+     * @throws MaxCountExceededException if the maximum number of iterations\n+     * is reached.\n+     */\n+    public void incrementIterationCount() {\n+        iterations.incrementCount();\n+    }\n+\n+    /**\n+     * Removes the specified iteration listener from the list of listeners\n+     * currently attached to {@code this} object. Attempting to remove a\n+     * listener which was <em>not</em> previously registered does not cause any\n+     * error.\n+     *\n+     * @param listener The {@link IterationListener} to be removed.\n+     */\n+    public void removeIterationListener(final IterationListener listener) {\n+        listeners.remove(listener);\n+    }\n+\n+    /**\n+     * Sets the iteration count to 0. This method must be called during the\n+     * initial phase.\n+     */\n+    public void resetIterationCount() {\n+        iterations.resetCount();\n+    }\n+}", "timestamp": 1315986048, "metainfo": ""}