{"sha": "5f7a481cd95aac0080e937913df4e79bef582baa", "log": "MATH-910 Element-by-element basic operations on arrays.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/util/MathArrays.java\n+++ b/src/main/java/org/apache/commons/math3/util/MathArrays.java\n         double evaluate(double[] array,\n                         int startIndex,\n                         int numElements);\n+    }\n+\n+    /**\n+     * Creates an array whose contents will be the element-by-element\n+     * addition of the arguments.\n+     *\n+     * @param a First term of the addition.\n+     * @param b Second term of the addition.\n+     * @return a new array {@code r} where {@code r[i] = a[i] + b[i]}.\n+     * @throws DimensionMismatchException if the array lengths differ.\n+     */\n+    public static double[] ebeAdd(double[] a,\n+                                  double[] b) {\n+        if (a.length != b.length) {\n+            throw new DimensionMismatchException(a.length, b.length);\n+        }\n+\n+        final double[] result = a.clone();\n+        for (int i = 0; i < a.length; i++) {\n+            result[i] += b[i];\n+        }\n+        return result;\n+    }\n+    /**\n+     * Creates an array whose contents will be the element-by-element\n+     * subtraction of the second argument from the first.\n+     *\n+     * @param a First term.\n+     * @param b Element to be subtracted.\n+     * @return a new array {@code r} where {@code r[i] = a[i] - b[i]}.\n+     * @throws DimensionMismatchException if the array lengths differ.\n+     */\n+    public static double[] ebeSubtract(double[] a,\n+                                       double[] b) {\n+        if (a.length != b.length) {\n+            throw new DimensionMismatchException(a.length, b.length);\n+        }\n+\n+        final double[] result = a.clone();\n+        for (int i = 0; i < a.length; i++) {\n+            result[i] -= b[i];\n+        }\n+        return result;\n+    }\n+    /**\n+     * Creates an array whose contents will be the element-by-element\n+     * multiplication of the arguments.\n+     *\n+     * @param a First factor of the multiplication.\n+     * @param b Second factor of the multiplication.\n+     * @return a new array {@code r} where {@code r[i] = a[i] * b[i]}.\n+     * @throws DimensionMismatchException if the array lengths differ.\n+     */\n+    public static double[] ebeMultiply(double[] a,\n+                                       double[] b) {\n+        if (a.length != b.length) {\n+            throw new DimensionMismatchException(a.length, b.length);\n+        }\n+\n+        final double[] result = a.clone();\n+        for (int i = 0; i < a.length; i++) {\n+            result[i] *= b[i];\n+        }\n+        return result;\n+    }\n+    /**\n+     * Creates an array whose contents will be the element-by-element\n+     * division of the first argument by the second.\n+     *\n+     * @param a Numerator of the division.\n+     * @param b Denominator of the division.\n+     * @return a new array {@code r} where {@code r[i] = a[i] / b[i]}.\n+     * @throws DimensionMismatchException if the array lengths differ.\n+     */\n+    public static double[] ebeDivide(double[] a,\n+                                     double[] b) {\n+        if (a.length != b.length) {\n+            throw new DimensionMismatchException(a.length, b.length);\n+        }\n+\n+        final double[] result = a.clone();\n+        for (int i = 0; i < a.length; i++) {\n+            result[i] /= b[i];\n+        }\n+        return result;\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/math3/util/MathArraysTest.java\n+++ b/src/test/java/org/apache/commons/math3/util/MathArraysTest.java\n  * @version $Id$\n  */\n public class MathArraysTest {\n+    @Test(expected=DimensionMismatchException.class)\n+    public void testEbeAddPrecondition() {\n+        MathArrays.ebeAdd(new double[3], new double[4]);\n+    }\n+    @Test(expected=DimensionMismatchException.class)\n+    public void testEbeSubtractPrecondition() {\n+        MathArrays.ebeSubtract(new double[3], new double[4]);\n+    }\n+    @Test(expected=DimensionMismatchException.class)\n+    public void testEbeMultiplyPrecondition() {\n+        MathArrays.ebeMultiply(new double[3], new double[4]);\n+    }\n+    @Test(expected=DimensionMismatchException.class)\n+    public void testEbeDividePrecondition() {\n+        MathArrays.ebeDivide(new double[3], new double[4]);\n+    }\n+\n+    @Test\n+    public void testEbeAdd() {\n+        final double[] a = { 0, 1, 2 };\n+        final double[] b = { 3, 5, 7 };\n+        final double[] r = MathArrays.ebeAdd(a, b);\n+\n+        for (int i = 0; i < a.length; i++) {\n+            Assert.assertEquals(a[i] + b[i], r[i], 0);\n+        }\n+    }\n+    @Test\n+    public void testEbeSubtract() {\n+        final double[] a = { 0, 1, 2 };\n+        final double[] b = { 3, 5, 7 };\n+        final double[] r = MathArrays.ebeSubtract(a, b);\n+\n+        for (int i = 0; i < a.length; i++) {\n+            Assert.assertEquals(a[i] - b[i], r[i], 0);\n+        }\n+    }\n+    @Test\n+    public void testEbeMultiply() {\n+        final double[] a = { 0, 1, 2 };\n+        final double[] b = { 3, 5, 7 };\n+        final double[] r = MathArrays.ebeMultiply(a, b);\n+\n+        for (int i = 0; i < a.length; i++) {\n+            Assert.assertEquals(a[i] * b[i], r[i], 0);\n+        }\n+    }\n+    @Test\n+    public void testEbeDivide() {\n+        final double[] a = { 0, 1, 2 };\n+        final double[] b = { 3, 5, 7 };\n+        final double[] r = MathArrays.ebeDivide(a, b);\n+\n+        for (int i = 0; i < a.length; i++) {\n+            Assert.assertEquals(a[i] / b[i], r[i], 0);\n+        }\n+    }\n+\n     @Test\n     public void testL1DistanceDouble() {\n         double[] p1 = { 2.5,  0.0 };", "timestamp": 1354054776, "metainfo": ""}