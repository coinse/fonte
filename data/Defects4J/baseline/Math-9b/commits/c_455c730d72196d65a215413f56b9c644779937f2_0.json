{"sha": "455c730d72196d65a215413f56b9c644779937f2", "log": "Alternate solution: remove shadowing by removing copies (since class is not static)  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\n         checkParameters();\n          // -------------------- Initialization --------------------------------\n         isMinimize = getGoalType().equals(GoalType.MINIMIZE);\n-        final FitnessFunction fitfun = new FitnessFunction(boundaries,\n-                isMinimize);\n+        final FitnessFunction fitfun = new FitnessFunction();\n         final double[] guess = fitfun.encode(getStartPoint());\n         // number of objective variables/problem dimension\n         dimension = guess.length;\n      */\n     private class FitnessFunction {\n \n-        /** Optional bounds for the objective variables */\n-        private final double[][] _boundaries;\n         /** Determines the penalty for boundary violations */\n         private double valueRange = 1.0;\n         /**\n          * bounds if defined\n          */\n         private boolean isRepairMode = true;\n-        /** Flag indicating the optimization goal. */\n-        private final boolean _isMinimize;\n-\n-        /**\n-         * @param boundaries\n-         *            Bounds for the objective variables.\n-         * @param isMinimize\n-         *            Flag indicating the optimization goal.\n-         */\n-        private FitnessFunction(final double[][] boundaries,\n-                final boolean isMinimize) {\n-            this._boundaries = boundaries;\n-            this._isMinimize = isMinimize;\n-        }\n \n         /**\n          * @param x\n          * @return Normalized objective variables.\n          */\n         private double[] encode(final double[] x) {\n-            if (_boundaries == null)\n+            if (boundaries == null)\n                 return x;\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n-                double diff = _boundaries[1][i] - _boundaries[0][i];\n-                res[i] = (x[i] - _boundaries[0][i]) / diff;\n+                double diff = boundaries[1][i] - boundaries[0][i];\n+                res[i] = (x[i] - boundaries[0][i]) / diff;\n             }\n             return res;\n         }\n          * @return Original objective variables.\n          */\n         private double[] decode(final double[] x) {\n-            if (_boundaries == null)\n+            if (boundaries == null)\n                 return x;\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n-                double diff = _boundaries[1][i] - _boundaries[0][i];\n-                res[i] = diff * x[i] + _boundaries[0][i];\n+                double diff = boundaries[1][i] - boundaries[0][i];\n+                res[i] = diff * x[i] + boundaries[0][i];\n             }\n             return res;\n         }\n          */\n         private double value(final double[] point) {\n             double value;\n-            if (_boundaries != null && isRepairMode) {\n+            if (boundaries != null && isRepairMode) {\n                 double[] repaired = repair(point);\n                 value = CMAESOptimizer.this\n                         .computeObjectiveValue(decode(repaired)) +\n             } else\n                 value = CMAESOptimizer.this\n                         .computeObjectiveValue(decode(point));\n-            return _isMinimize ? value : -value;\n+            return isMinimize ? value : -value;\n         }\n \n         /**\n          * @return True if in bounds\n          */\n         private boolean isFeasible(final double[] x) {\n-            if (_boundaries == null)\n+            if (boundaries == null)\n                 return true;\n             for (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                 double diff = Math.abs(x[i] - repaired[i]);\n                 penalty += diff * valueRange;\n             }\n-            return _isMinimize ? penalty : -penalty;\n+            return isMinimize ? penalty : -penalty;\n         }\n     }\n ", "timestamp": 1299417883, "metainfo": ""}