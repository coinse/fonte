{"sha": "c27926664780f59834f3f0a77d01b27bd20d600f", "log": "Adding more tests (from NIST website) to StudentT tests  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/distribution/TDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/TDistributionTest.java\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n import org.junit.Assert;\n import org.junit.Test;\n-\n+import org.apache.commons.math.MathException;\n+import org.apache.commons.math.TestUtils;\n /**\n  * Test cases for TDistribution.\n  * Extends ContinuousDistributionAbstractTest.  See class javadoc for\n         Assert.assertEquals(dist.getNumericalMean(), 0, tol);\n         Assert.assertEquals(dist.getNumericalVariance(), 5d / (5d - 2d), tol);        \n     }\n+\n+    /*\n+     * Adding this test to benchmark against tables published by NIST\n+     * http://itl.nist.gov/div898/handbook/eda/section3/eda3672.htm\n+     * Have chosen tabulated results for degrees of freedom 2,10,30,100\n+     * Have chosen problevels from 0.10 to 0.001\n+     */\n+    @Test\n+    public void nistData() throws MathException{\n+        double[] prob = new double[]{ 0.10,0.05,0.025,0.01,0.005,0.001};\n+        double[] args2 = new double[]{1.886,2.920,4.303,6.965,9.925,22.327};\n+        double[] args10 = new double[]{1.372,1.812,2.228,2.764,3.169,4.143};\n+        double[] args30 = new double[]{1.310,1.697,2.042,2.457,2.750,3.385};\n+        double[] args100= new double[]{1.290,1.660,1.984,2.364,2.626,3.174};\n+        TestUtils.assertEquals(prob, makeNistResults(args2, 2), 1.0e-4);\n+        TestUtils.assertEquals(prob, makeNistResults(args10, 10), 1.0e-4);\n+        TestUtils.assertEquals(prob, makeNistResults(args30, 30), 1.0e-4);\n+        TestUtils.assertEquals(prob, makeNistResults(args100, 100), 1.0e-4);\n+        return;\n+    }\n+    private double[] makeNistResults(double[] args, int df) throws MathException{\n+        TDistribution td =  new TDistributionImpl(df);\n+        double[] res  = new double[ args.length ];\n+        for( int i = 0 ; i < res.length ; i++){\n+            res[i] = 1.0 - td.cumulativeProbability(args[i]);\n+        }\n+        return res;\n+    }\n }", "timestamp": 1314773840, "metainfo": ""}