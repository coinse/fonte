{"sha": "23bf64e8a46595ea57fb2bc5ee0b922cb4ec987c", "log": "added a way to compute either sample or population vectorial covariance  ", "commit": "\n--- a/src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java\n+++ b/src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java\n \n             // compute the statistical properties of the simplex points\n             VectorialMean meanStat = new VectorialMean(vertices[0].length);\n-            VectorialCovariance covStat = new VectorialCovariance(vertices[0].length);\n+            VectorialCovariance covStat = new VectorialCovariance(vertices[0].length, true);\n             for (int i = 0; i < vertices.length; ++i) {\n                 meanStat.increment(vertices[i]);\n                 covStat.increment(vertices[i]);\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java\n package org.apache.commons.math.stat.descriptive.moment;\n \n import java.io.Serializable;\n+import java.util.Arrays;\n \n import org.apache.commons.math.DimensionMismatchException;\n import org.apache.commons.math.linear.RealMatrix;\n     /** Sums of products for each component. */\n     private double[] productsSums;\n \n+    /** Indicator for bias correction. */\n+    private boolean isBiasCorrected;\n+\n     /** Number of vectors in the sample. */\n     private long n;\n \n     /** Constructs a VectorialMean.\n      * @param dimension vectors dimension\n+     * @param isBiasCorrected if true, computed the unbiased sample covariance,\n+     * otherwise computes the biased population covariance\n      */\n-    public VectorialCovariance(int dimension) {\n+    public VectorialCovariance(int dimension, boolean isBiasCorrected) {\n         sums         = new double[dimension];\n         productsSums = new double[dimension * (dimension + 1) / 2];\n         n            = 0;\n+        this.isBiasCorrected = isBiasCorrected;\n     }\n \n     /**\n \n         if (n > 1) {\n             double[][] resultData = result.getDataRef();\n-            double c = 1.0 / (n * (n - 1));\n+            double c = 1.0 / (n * (isBiasCorrected ? (n - 1) : n));\n             int k = 0;\n             for (int i = 0; i < dimension; ++i) {\n                 for (int j = 0; j <= i; ++j) {\n         return n;\n     }\n \n+    /**\n+     * Clears the internal state of the Statistic\n+     */\n+    public void clear() {\n+        n = 0;\n+        Arrays.fill(sums, 0.0);\n+        Arrays.fill(productsSums, 0.0);\n+    }\n+\n }\n--- a/src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java\n+++ b/src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java\n     public void testMeanAndCovariance() throws DimensionMismatchException {\n \n         VectorialMean meanStat = new VectorialMean(mean.length);\n-        VectorialCovariance covStat = new VectorialCovariance(mean.length);\n+        VectorialCovariance covStat = new VectorialCovariance(mean.length, true);\n         for (int i = 0; i < 5000; ++i) {\n             double[] v = generator.nextVector();\n             meanStat.increment(v);\n--- a/src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java\n+++ b/src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java\n     public void testMeanAndCorrelation() throws DimensionMismatchException {\n \n         VectorialMean meanStat = new VectorialMean(mean.length);\n-        VectorialCovariance covStat = new VectorialCovariance(mean.length);\n+        VectorialCovariance covStat = new VectorialCovariance(mean.length, true);\n         for (int i = 0; i < 10000; ++i) {\n             double[] v = generator.nextVector();\n             meanStat.increment(v);\n--- a/src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java\n \n     public void testMismatch() {\n         try {\n-            new VectorialCovariance(8).increment(new double[5]);\n+            new VectorialCovariance(8, true).increment(new double[5]);\n             fail(\"an exception should have been thrown\");\n         } catch (DimensionMismatchException dme) {\n             assertEquals(5, dme.getDimension1());\n     }\n \n     public void testSimplistic() throws DimensionMismatchException {\n-        VectorialCovariance stat = new VectorialCovariance(2);\n+        VectorialCovariance stat = new VectorialCovariance(2, true);\n         stat.increment(new double[] {-1.0,  1.0});\n         stat.increment(new double[] { 1.0, -1.0});\n         RealMatrix c = stat.getResult();\n \n     public void testBasicStats() throws DimensionMismatchException {\n \n-        VectorialCovariance stat = new VectorialCovariance(points[0].length);\n+        VectorialCovariance stat = new VectorialCovariance(points[0].length, true);\n         for (int i = 0; i < points.length; ++i) {\n             stat.increment(points[i]);\n         }", "timestamp": 1202486853, "metainfo": ""}