{"sha": "54f94ab0430efa16a91ce938cf40ee0cfe8f895c", "log": "javadoc   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java\n import java.io.Serializable;\n \n /**\n- * Abstract Implementation for UnivariateStatistics.\n- * Provides the ability to extend polymophically so that\n- * indiviual statistics do not need to implement these methods.\n- * @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:16 $\n+ * Abstract base class for all implementations of the \n+ * {@link UnivariateStatistic} interface.\n+ * <p>\n+ * Provides a default implementation of <code>evaluate(double[]),</code> \n+ * delegating to <code>evaluate(double[], int, int)</code> in the natural way.\n+ * <p>\n+ * Also includes a <code>test</code> method that performs generic parameter\n+ * validation for the <code>evaluate</code> methods.\n+ * <p>\n+ * \n+ * @version $Revision: 1.19 $ $Date: 2004/07/04 09:02:36 $\n  */\n public abstract class AbstractUnivariateStatistic\n     implements UnivariateStatistic, Serializable {\n     /**\n      * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n      */\n-    public abstract double evaluate(\n-        final double[] values,\n-        final int begin,\n-        final int length);\n+    public abstract double evaluate(final double[] values, final int begin, final int length);\n \n     /**\n-     * This method is used by all evaluation methods to verify that the content\n-     * of the array and indices are correct.\n+     * This method is used by <code>evaluate(double[], int, int)</code> methods\n+     * to verify that the input parameters designate a subarray of positive length.\n      * <p>\n-     *  It is used by an individual statistic to determine if calculation\n-     *  should continue, or return <code>Double.NaN</code> </p>\n-     * @param values Is a double[] containing the values\n-     * @param begin processing at this point in the array\n+     * <ul>\n+     * <li>returns <code>true</code> iff the parameters designate a subarray of \n+     * positive length</li>\n+     * <li>throws <code>IllegalArgumentException</code> if the array is null or\n+     * or the indices are invalid</li>\n+     * <li>returns <code>false</li> if the array is non-null, but \n+     * <code>length</code> is 0.\n+     * </ul>\n+     *\n+     * @param values the input array\n+     * @param begin index of the first array element to include\n      * @param length the number of elements to include\n      * @return true if the parameters are valid and designate a subarray of positive length\n      * @throws IllegalArgumentException if the indices are invalid or the array is null\n--- a/src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java\n package org.apache.commons.math.stat.univariate;\n \n /**\n- * UnivariateStatistic interface provides methods to evaluate\n- * double[] based content using an implemented statistical approach.\n- * The interface provides two \"stateless\" simple methods to calculate\n- * a statistic from a double[] based parameter.\n- * @version $Revision: 1.14 $ $Date: 2004/06/23 16:26:16 $\n+ * Base evaluation interface implemented by all statistics.\n+ * <p>\n+ * Includes \"stateless\" <code>evaluate</code> methods that take\n+ * <code>double[]</code> arrays as input and return the value of the statistic\n+ * applied to the input values.\n+ * \n+ * @version $Revision: 1.15 $ $Date: 2004/07/04 09:02:36 $\n  */\n public interface UnivariateStatistic {\n \n     /**\n-     * Evaluates the double[] returning the result of the evaluation.\n-     * @param values Is a double[] containing the values\n-     * @return the result of the evaluation or Double.NaN\n-     * if the array is empty\n+     * Returns the result of evaluating the statistic over the input array.\n+     * \n+     * @param values input array\n+     * @return the value of the statistic applied to the input array\n      */\n     double evaluate(double[] values);\n \n     /**\n-     * Evaluates part of a double[] returning the result\n-     * of the evaluation.\n-     * @param values Is a double[] containing the values\n-     * @param begin processing at this point in the array\n+     * Returns the result of evaluating the statistic over the specified entries\n+     * in the input array.\n+     * \n+     * @param values the input array\n+     * @param begin the index of the first element to include\n      * @param length the number of elements to include\n-     * @return the result of the evaluation or Double.NaN\n-     * if the array is empty\n+     * @return the value of the statistic applied to the included array entries\n      */\n     double evaluate(double[] values, int begin, int length);\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java\n  * </ol>\n  * <p>\n  *  Returns <code>Double.NaN</code> if the dataset is empty.\n+ * <p>\n+ * <strong>Note that this implementation is not synchronized.</strong> If \n+ * multiple threads access an instance of this class concurrently, and at least\n+ * one of the threads invokes the <code>increment()</code> or \n+ * <code>clear()</code> method, it must be synchronized externally.\n  *\n- * @version $Revision: 1.17 $ $Date: 2004/06/29 02:14:17 $\n+ * @version $Revision: 1.18 $ $Date: 2004/07/04 09:02:36 $\n  */\n-public class FirstMoment extends AbstractStorelessUnivariateStatistic implements Serializable{\n+public class FirstMoment extends AbstractStorelessUnivariateStatistic \n+    implements Serializable {\n \n     /** Serializable version identifier */\n     static final long serialVersionUID = -803343206421984070L; \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java\n  * <p>\n  * Returns <code>Double.NaN</code> if no data values have been added and\n  * returns <code>0</code> if there is just one value in the data set.\n+ * <p>\n+ * <strong>Note that this implementation is not synchronized.</strong> If \n+ * multiple threads access an instance of this class concurrently, and at least\n+ * one of the threads invokes the <code>increment()</code> or \n+ * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.19 $ $Date: 2004/06/29 02:14:17 $\n+ * @version $Revision: 1.20 $ $Date: 2004/07/04 09:02:36 $\n  */\n public class FourthMoment extends ThirdMoment implements Serializable{\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java\n  * <code>Double.NEGATIVE_INFINITY</code> are among the values, the result is\n  * <code>NaN.</code></li>\n  * </ul>\n+ * <p>\n+ * <strong>Note that this implementation is not synchronized.</strong> If \n+ * multiple threads access an instance of this class concurrently, and at least\n+ * one of the threads invokes the <code>increment()</code> or \n+ * <code>clear()</code> method, it must be synchronized externally.\n+ * \n  *\n- *\n- * @version $Revision: 1.20 $ $Date: 2004/06/23 16:26:15 $\n+ * @version $Revision: 1.21 $ $Date: 2004/07/04 09:02:36 $\n  */\n public class GeometricMean extends SumOfLogs implements Serializable{\n \n     }\n \n     /**\n-     * Returns the geometric mean for this collection of values\n-     * @param values Is a double[] containing the values\n-     * @param begin processing at this point in the array\n+     * Returns the geometric mean of the entries in the specified portion\n+     * of the input array.\n+     * <p>\n+     * See {@link GeometricMean} for details on the computing algorithm.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * \n+     * @param values input array containing the values\n+     * @param begin first array element to include\n      * @param length the number of elements to include\n-     * @return the geometric mean or Double.NaN if the array is empty or\n+     * @return the geometric mean or Double.NaN if length = 0 or\n      * any of the values are &lt;= 0.\n-     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n+     * @throws IllegalArgumentException if the input array is null or the array\n+     * index parameters are not valid\n      */\n     public double evaluate(\n         final double[] values,\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java\n  * <p>\n  *  Note that this statistic is undefined for n < 4.  <code>Double.Nan</code> is returned when\n  *  there is not sufficient data to compute the statistic.\n- *\n- * @version $Revision: 1.24 $ $Date: 2004/07/02 05:29:14 $\n+ * <p>\n+ * <strong>Note that this implementation is not synchronized.</strong> If \n+ * multiple threads access an instance of this class concurrently, and at least\n+ * one of the threads invokes the <code>increment()</code> or \n+ * <code>clear()</code> method, it must be synchronized externally.\n+ * \n+ * @version $Revision: 1.25 $ $Date: 2004/07/04 09:02:36 $\n  */\n public class Kurtosis extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     /* UnvariateStatistic Approach  */\n \n     /**\n-     * Returns the kurtosis for this collection of values.  \n+     * Returns the kurtosis of the entries in the specified portion of the\n+     * input array.  \n      * <p>\n-     * See {@link Kurtosis} for the definition used in the computation.\n+     * See {@link Kurtosis} for details on the computing algorithm.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.\n      * \n-     * @param values Is a double[] containing the values\n-     * @param begin processing at this point in the array\n+     * @param values the input array\n+     * @param begin index of the first array element to include\n      * @param length the number of elements to include\n-     * @return the kurtosis of the values or Double.NaN if the array is empty or has fewer than\n-     *  four elements\n+     * @return the kurtosis of the values or Double.NaN if length is less than\n+     * 4\n+     * @throws IllegalArgumentException if the input array is null or the array\n+     * index parameters are not valid\n      */\n     public double evaluate(final double[] values,final int begin, final int length) {\n         // Initialize the kurtosis  \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Mean.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Mean.java\n  * <p>\n  * <strong>Note that this implementation is not synchronized.</strong> If \n  * multiple threads access an instance of this class concurrently, and at least\n- * one of the threads invokes the <code>increment()</code>, or \n- * <code>clear()</code> method,  it must be synchronized externally.\n+ * one of the threads invokes the <code>increment()</code> or \n+ * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.19 $ $Date: 2004/07/02 13:59:49 $\n+ * @version $Revision: 1.20 $ $Date: 2004/07/04 09:02:36 $\n  */\n public class Mean extends AbstractStorelessUnivariateStatistic \n     implements Serializable {\n     }\n \n     /**\n-     * Returns the arithmetic mean of the values in the input array, or\n-     * <code>Double.NaN</code> if the array is empty.\n+     * Returns the arithmetic mean of the entries in the specified portion of\n+     * the input array, or <code>Double.NaN</code> if the designated subarray\n+     * is empty.\n      * <p>\n      * Throws <code>IllegalArgumentException</code> if the array is null.\n      * <p>\n      * See {@link Mean} for details on the computing algorithm.\n      * \n-     * @param values Is a double[] containing the values\n-     * @param begin processing at this point in the array\n+     * @param values the input array\n+     * @param begin index of the first array element to include\n      * @param length the number of elements to include\n-     * @return the mean of the values or Double.NaN if the array is empty\n-     * @throws IllegalArgumentException if the array is null\n-     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n+     * @return the mean of the values or Double.NaN if length = 0\n+     * @throws IllegalArgumentException if the array is null or the array index\n+     *  parameters are not valid\n      */\n     public double evaluate(final double[] values,final int begin, final int length) {\n         if (test(values, begin, length)) {\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java\n  * <p>\n  * Returns <code>Double.NaN</code> if no data values have been added and\n  * returns <code>0</code> if there is just one value in the data set.\n+ * <p>\n+ * <strong>Note that this implementation is not synchronized.</strong> If \n+ * multiple threads access an instance of this class concurrently, and at least\n+ * one of the threads invokes the <code>increment()</code> or \n+ * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.18 $ $Date: 2004/06/29 02:14:17 $\n+ * @version $Revision: 1.19 $ $Date: 2004/07/04 09:02:36 $\n  */\n public class SecondMoment extends FirstMoment implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java\n  * Computes the skewness of the available values.\n  * <p>\n  * We use the following (unbiased) formula to define skewness:\n- *  <p>\n- *  skewness = [n / (n -1) (n - 2)] sum[(x_i - mean)^3] / std^3\n- *  <p>\n- *  where n is the number of values, mean is the {@link Mean} and std is the \n+ * <p>\n+ * skewness = [n / (n -1) (n - 2)] sum[(x_i - mean)^3] / std^3\n+ * <p>\n+ * where n is the number of values, mean is the {@link Mean} and std is the \n  * {@link StandardDeviation}\n- *\n- * @version $Revision: 1.23 $ $Date: 2004/07/02 05:29:14 $\n+ * <p>\n+ * <strong>Note that this implementation is not synchronized.</strong> If \n+ * multiple threads access an instance of this class concurrently, and at least\n+ * one of the threads invokes the <code>increment()</code> or \n+ * <code>clear()</code> method, it must be synchronized externally.\n+ * \n+ * @version $Revision: 1.24 $ $Date: 2004/07/04 09:02:36 $\n  */\n public class Skewness extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     }\n \n     /**\n-     * Returns the Skewness of the values array.\n+     * Returns the Skewness of the entries in the specifed portion of the\n+     * input array.\n      * <p>\n      * See {@link Skewness} for the definition used in the computation.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.\n      * \n-     * @param values Is a double[] containing the values\n-     * @param begin processing at this point in the array\n+     * @param values the input array\n+     * @param begin the index of the first array element to include\n      * @param length the number of elements to include\n-     * @return the skewness of the values or Double.NaN if the array is empty\n-     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n+     * @return the skewness of the values or Double.NaN if length is less than\n+     * 3\n+     * @throws IllegalArgumentException if the array is null or the array index\n+     *  parameters are not valid\n      */\n-    public double evaluate(\n-        final double[] values,\n-        final int begin,\n-        final int length) {\n+    public double evaluate(final double[] values,final int begin, \n+            final int length) {\n \n         // Initialize the skewness\n         double skew = Double.NaN;\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java\n  * Computes the sample standard deviation.  The standard deviation\n  * is the positive square root of the variance.  See {@link Variance} for\n  * more information.\n- *\n- * @version $Revision: 1.18 $ $Date: 2004/06/26 22:41:27 $\n+ * <p>\n+ * <strong>Note that this implementation is not synchronized.</strong> If \n+ * multiple threads access an instance of this class concurrently, and at least\n+ * one of the threads invokes the <code>increment()</code> or \n+ * <code>clear()</code> method, it must be synchronized externally.\n+ * \n+ * @version $Revision: 1.19 $ $Date: 2004/07/04 09:02:36 $\n  */\n public class StandardDeviation extends Variance implements Serializable {\n \n     }\n \n     /**\n-     * Returns the Standard Deviation on an array of values.\n+     * Returns the Standard Deviation of the entries in the specified portion of\n+     * the input array, or <code>Double.NaN</code> if the designated subarray\n+     * is empty.\n+     * <p>\n+     * Returns 0 for a single-value (i.e. length = 1) sample.\n      * \n-     * @param values Is a double[] containing the values\n-     * @param begin processing at this point in the array\n+     * @param values the input array\n+     * @param begin index of the first array element to include\n      * @param length the number of elements to include\n-     * @return the result, Double.NaN if no values for an empty array\n-     * or 0.0 for a single value set.\n-     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n+     * @return the standard deviation of the values or Double.NaN if length = 0\n+     * @throws IllegalArgumentException if the array is null or the array index\n+     *  parameters are not valid\n      */\n     public double evaluate(final double[] values, final int begin, final int length)  {\n        return Math.sqrt(super.evaluate(values, begin, length));\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java\n  * <p>\n  * Returns <code>Double.NaN</code> if no data values have been added and\n  * returns <code>0</code> if there is just one value in the data set.\n+ * <p>\n+ * <strong>Note that this implementation is not synchronized.</strong> If \n+ * multiple threads access an instance of this class concurrently, and at least\n+ * one of the threads invokes the <code>increment()</code> or \n+ * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.18 $ $Date: 2004/06/29 02:14:17 $\n+ * @version $Revision: 1.19 $ $Date: 2004/07/04 09:02:36 $\n  */\n public class ThirdMoment extends SecondMoment implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Variance.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Variance.java\n  * <p>\n  * The definitional formula does not have good numerical properties, so\n  * this implementation uses updating formulas based on West's algorithm\n- *  as described in <a href=\"http://doi.acm.org/10.1145/359146.359152\">\n+ * as described in <a href=\"http://doi.acm.org/10.1145/359146.359152\">\n  * Chan, T. F. andJ. G. Lewis 1979, <i>Communications of the ACM</i>,\n  * vol. 22 no. 9, pp. 526-531.</a>.\n- *\n- * @version $Revision: 1.22 $ $Date: 2004/06/27 19:37:51 $\n+* <p>\n+ * <strong>Note that this implementation is not synchronized.</strong> If \n+ * multiple threads access an instance of this class concurrently, and at least\n+ * one of the threads invokes the <code>increment()</code> or \n+ * <code>clear()</code> method, it must be synchronized externally.\n+ * \n+ * @version $Revision: 1.23 $ $Date: 2004/07/04 09:02:36 $\n  */\n public class Variance extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     }\n \n     /**\n-     * Returns the variance of the available values. This uses a corrected\n-     * two pass algorithm of the following\n-     * <a href=\"http://lib-www.lanl.gov/numerical/bookcpdf/c14-1.pdf\">\n-     * corrected two pass formula (14.1.8)</a>, and also referenced in:\n+     * Returns the variance of the entries in the specified portion of\n+     * the input array, or <code>Double.NaN</code> if the designated subarray\n+     * is empty.\n      * <p>\n-     * \"Algorithms for Computing the Sample Variance: Analysis and\n-     * Recommendations\", Chan, T.F., Golub, G.H., and LeVeque, R.J.\n-     * 1983, American Statistician, vol. 37, pp. 242?247.\n-     * </p>\n-     * @param values Is a double[] containing the values\n-     * @param begin processing at this point in the array\n+     * See {@link Variance} for details on the computing algorithm.\n+     * <p>\n+     * Returns 0 for a single-value (i.e. length = 1) sample.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * \n+     * @param values the input array\n+     * @param begin index of the first array element to include\n      * @param length the number of elements to include\n-     * @return the result, Double.NaN if no values for an empty array\n-     * or 0.0 for a single value set.\n-     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n+     * @return the variance of the values or Double.NaN if length = 0\n+     * @throws IllegalArgumentException if the array is null or the array index\n+     *  parameters are not valid\n      */\n     public double evaluate(final double[] values, final int begin, final int length) {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Max.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Max.java\n  * <li>If any of the values equals <code>Double.POSITIVE_INFINITY</code>, \n  * the result is <code>Double.POSITIVE_INFINITY.</code></li>\n  * </ul>\n- *\n- * @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:17 $\n+* <p>\n+ * <strong>Note that this implementation is not synchronized.</strong> If \n+ * multiple threads access an instance of this class concurrently, and at least\n+ * one of the threads invokes the <code>increment()</code> or \n+ * <code>clear()</code> method, it must be synchronized externally.\n+ * \n+ * @version $Revision: 1.19 $ $Date: 2004/07/04 09:02:36 $\n  */\n public class Max extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     }\n     \n     /**\n-     * Returns the maximum of the available values.\n+     * Returns the maximum of the entries in the specified portion of\n+     * the input array, or <code>Double.NaN</code> if the designated subarray\n+     * is empty.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null or\n+     * the array index parameters are not valid.\n+     * <p>\n+     * <ul>\n+     * <li>The result is <code>NaN</code> iff all values are <code>NaN</code> \n+     * (i.e. <code>NaN</code> values have no impact on the value of the statistic).</li>\n+     * <li>If any of the values equals <code>Double.POSITIVE_INFINITY</code>, \n+     * the result is <code>Double.POSITIVE_INFINITY.</code></li>\n+     * </ul>\n      * \n-     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n+     * @param values the input array\n+     * @param begin index of the first array element to include\n+     * @param length the number of elements to include\n+     * @return the mean of the values or Double.NaN if length = 0\n+     * @throws IllegalArgumentException if the array is null or the array index\n+     *  parameters are not valid\n      */\n     public double evaluate(final double[] values, final int begin, final int length) {\n         double max = Double.NaN;\n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Median.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Median.java\n /**\n  * Returns the median of the available values.  This is the same as the 50th percentile.\n  * See {@link Percentile} for a description of the algorithm used.\n- *\n- * @version $Revision: 1.15 $ $Date: 2004/06/29 05:42:51 $\n+ * <p>\n+ * <strong>Note that this implementation is not synchronized.</strong> If \n+ * multiple threads access an instance of this class concurrently, and at least\n+ * one of the threads invokes the <code>increment()</code> or \n+ * <code>clear()</code> method, it must be synchronized externally.\n+ * \n+ * @version $Revision: 1.16 $ $Date: 2004/07/04 09:02:36 $\n  */\n public class Median extends Percentile implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Min.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Min.java\n  * <li>If any of the values equals <code>Double.NEGATIVE_INFINITY</code>, \n  * the result is <code>Double.NEGATIVE_INFINITY.</code></li>\n  * </ul> \n- *\n- * @version $Revision: 1.19 $ $Date: 2004/06/23 16:26:17 $\n+ * <p>\n+ * <strong>Note that this implementation is not synchronized.</strong> If \n+ * multiple threads access an instance of this class concurrently, and at least\n+ * one of the threads invokes the <code>increment()</code> or \n+ * <code>clear()</code> method, it must be synchronized externally.\n+ * \n+ * @version $Revision: 1.20 $ $Date: 2004/07/04 09:02:36 $\n  */\n public class Min extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     }\n     \n     /**\n-     * Returns the minimum of the available values.\n+     * Returns the minimum of the entries in the specified portion of\n+     * the input array, or <code>Double.NaN</code> if the designated subarray\n+     * is empty.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null or\n+     * the array index parameters are not valid.\n+     * <p>\n+     * <ul>\n+     * <li>The result is <code>NaN</code> iff all values are <code>NaN</code> \n+     * (i.e. <code>NaN</code> values have no impact on the value of the statistic).</li>\n+     * <li>If any of the values equals <code>Double.NEGATIVE_INFINITY</code>, \n+     * the result is <code>Double.NEGATIVE_INFINITY.</code></li>\n+     * </ul> \n      * \n-     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n+     * @param values the input array\n+     * @param begin index of the first array element to include\n+     * @param length the number of elements to include\n+     * @return the mean of the values or Double.NaN if length = 0\n+     * @throws IllegalArgumentException if the array is null or the array index\n+     *  parameters are not valid\n      */\n     public double evaluate(final double[] values,final int begin, final int length) {\n         double min = Double.NaN;\n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java\n  * </li>\n  * </ol>\n  * <p>\n- *\n  * To compute percentiles, the data must be (totally) ordered.  Input arrays\n  * are copied and then sorted using  {@link java.util.Arrays#sort(double[])}.\n  * The ordering used by <code>Arrays.sort(double[]</code> is the one determined\n  * Since percentile estimation usually involves interpolation between array \n  * elements, arrays containing  <code>NaN</code> or infinite values will often\n  * result in <code>NaN<code> or infinite values returned.\n- *\n- * @version $Revision: 1.21 $ $Date: 2004/06/23 16:26:17 $\n+ * <p>\n+ * <strong>Note that this implementation is not synchronized.</strong> If \n+ * multiple threads access an instance of this class concurrently, and at least\n+ * one of the threads invokes the <code>increment()</code> or \n+ * <code>clear()</code> method, it must be synchronized externally.\n+ * \n+ * @version $Revision: 1.22 $ $Date: 2004/07/04 09:02:36 $\n  */\n public class Percentile extends AbstractUnivariateStatistic implements Serializable {\n \n      * </ul>\n      * <p>\n      * See {@link Percentile} for a description of the percentile estimation\n-     *  algorithm used.\n-     * \n-     * @param values Is a double[] containing the values\n-     * @param p Is the quantile to evaluate to.\n+     * algorithm used.\n+     * \n+     * @param values input array of values\n+     * @param p the percentile value to compute\n      * @return the result of the evaluation or Double.NaN if the array is empty\n      * @throws IllegalArgumentException if <code>values</code> is null\n      */\n \n     /**\n      * Returns an estimate of the <code>quantile</code>th percentile of the\n-     * values in the <code>values</code> array.  The quantile estimated is\n-     * determined by the <code>quantile</code> property.\n+     * designated values in the <code>values</code> array.  The quantile\n+     * estimated is determined by the <code>quantile</code> property.\n      * <p>\n      * <ul>\n      * <li>Returns <code>Double.NaN</code> if <code>length = 0</code></li>\n      * See {@link Percentile} for a description of the percentile estimation\n      * algorithm used.\n      * \n-     * @param values  array of input values\n-     * @param start  the first (0-based) element to include in the computation\n-     * @param length  the number of array elements to include\n+     * @param values the input array\n+     * @param start index of the first array element to include\n+     * @param length the number of elements to include\n      * @return the percentile value\n      * @throws IllegalArgumentException if the parameters are not valid\n      * \n      * @param begin  the first (0-based) element to include in the computation\n      * @param length  the number of array elements to include\n      * @return  the percentile value\n-     * @throws IllegalArgumentException if the parameters are not valid\n+     * @throws IllegalArgumentException if the parameters are not valid or the\n+     * input array is null\n      */\n     public double evaluate(final double[] values, final int begin, \n             final int length, final double p) {\n--- a/src/java/org/apache/commons/math/stat/univariate/summary/Product.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/Product.java\n  * <p>\n  * If there are no values in the dataset, or any of the values are \n  * <code>NaN</code>, then <code>NaN</code> is returned.  \n+* <p>\n+ * <strong>Note that this implementation is not synchronized.</strong> If \n+ * multiple threads access an instance of this class concurrently, and at least\n+ * one of the threads invokes the <code>increment()</code> or \n+ * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.19 $ $Date: 2004/06/29 06:06:13 $\n+ * @version $Revision: 1.20 $ $Date: 2004/07/04 09:02:36 $\n  */\n public class Product extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     }\n \n     /**\n-     * Returns the product for this collection of values\n+     * Returns the product of the entries in the specified portion of\n+     * the input array, or <code>Double.NaN</code> if the designated subarray\n+     * is empty.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.\n      * \n-     * @param values Is a double[] containing the values\n-     * @param begin processing at this point in the array\n+     * @param values the input array\n+     * @param begin index of the first array element to include\n      * @param length the number of elements to include\n-     * @return the product values or Double.NaN if the array is empty\n-     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n+     * @return the product of the values or Double.NaN if length = 0\n+     * @throws IllegalArgumentException if the array is null or the array index\n+     *  parameters are not valid\n      */\n     public double evaluate(final double[] values, final int begin, final int length) {\n         double product = Double.NaN;\n--- a/src/java/org/apache/commons/math/stat/univariate/summary/Sum.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/Sum.java\n  * <p>\n  * If there are no values in the dataset, or any of the values are \n  * <code>NaN</code>, then <code>NaN</code> is returned.  \n+ * <p>\n+ * <strong>Note that this implementation is not synchronized.</strong> If \n+ * multiple threads access an instance of this class concurrently, and at least\n+ * one of the threads invokes the <code>increment()</code> or \n+ * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.22 $ $Date: 2004/06/29 15:39:15 $\n+ * @version $Revision: 1.23 $ $Date: 2004/07/04 09:02:36 $\n  */\n public class Sum extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     }\n \n     /**\n-     * The sum of the values that have been added.\n+     * The sum of the entries in the specified portion of\n+     * the input array, or <code>Double.NaN</code> if the designated subarray\n+     * is empty.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.\n      * \n-     * @param values Is a double[] containing the values\n-     * @param begin processing at this point in the array\n+     * @param values the input array\n+     * @param begin index of the first array element to include\n      * @param length the number of elements to include\n-     * @return the sum of the values or Double.NaN if the array is empty\n-     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n+     * @return the sum of the values or Double.NaN if length = 0\n+     * @throws IllegalArgumentException if the array is null or the array index\n+     *  parameters are not valid\n      */\n     public double evaluate(final double[] values, final int begin, final int length) {\n         double sum = Double.NaN;\n--- a/src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java\n  * <code>Double.NEGATIVE_INFINITY</code> are among the values, the result is\n  * <code>NaN.</code></li>\n  * </ul>\n- *\n- * @version $Revision: 1.19 $ $Date: 2004/06/23 16:26:16 $\n+ * <p>\n+ * <strong>Note that this implementation is not synchronized.</strong> If \n+ * multiple threads access an instance of this class concurrently, and at least\n+ * one of the threads invokes the <code>increment()</code> or \n+ * <code>clear()</code> method, it must be synchronized externally.\n+ * \n+ * @version $Revision: 1.20 $ $Date: 2004/07/04 09:02:36 $\n  */\n public class SumOfLogs extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     }\n \n     /**\n-     * Returns the sum of the natural logs for this collection of values.\n+     * Returns the sum of the natural logs of the entries in the specified portion of\n+     * the input array, or <code>Double.NaN</code> if the designated subarray\n+     * is empty.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.\n      * <p>\n      * See {@link SumOfLogs}.\n      * \n-     * @param values Is a double[] containing the values\n-     * @param begin processing at this point in the array\n+     * @param values the input array\n+     * @param begin index of the first array element to include\n      * @param length the number of elements to include\n-     * @return the sumLog value or Double.NaN if the array is empty\n-     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n+     * @return the sum of the natural logs of the values or Double.NaN if \n+     * length = 0\n+     * @throws IllegalArgumentException if the array is null or the array index\n+     *  parameters are not valid\n      */\n     public double evaluate(final double[] values, final int begin, final int length) {\n         double sumLog = Double.NaN;\n--- a/src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java\n  * <p>\n  * If there are no values in the dataset, or any of the values are \n  * <code>NaN</code>, then <code>NaN</code> is returned.  \n+ * <p>\n+ * <strong>Note that this implementation is not synchronized.</strong> If \n+ * multiple threads access an instance of this class concurrently, and at least\n+ * one of the threads invokes the <code>increment()</code> or \n+ * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.19 $ $Date: 2004/06/29 15:39:15 $\n+ * @version $Revision: 1.20 $ $Date: 2004/07/04 09:02:36 $\n  */\n public class SumOfSquares extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     }\n \n     /**\n-     * Returns the sum of the squares of the available values.\n+     * Returns the sum of the squares of the entries in the specified portion of\n+     * the input array, or <code>Double.NaN</code> if the designated subarray\n+     * is empty.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.\n      * \n-     * @param values Is a double[] containing the values\n-     * @param begin processing at this point in the array\n+     * @param values the input array\n+     * @param begin index of the first array element to include\n      * @param length the number of elements to include\n-     * @return the sum of the squared values or Double.NaN if the array is empty\n-     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n+     * @return the sum of the squares of the values or Double.NaN if length = 0\n+     * @throws IllegalArgumentException if the array is null or the array index\n+     *  parameters are not valid\n      */\n     public double evaluate(final double[] values,final int begin, final int length) {\n         double sumSq = Double.NaN;", "timestamp": 1088931756, "metainfo": ""}