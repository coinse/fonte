{"sha": "4451a1d802ce3f0cfbe621c0f6df4a5f283edb2b", "log": "MATH-800 Updated userguide and added unit test.   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java\n+++ b/src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java\n import org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer;\n import org.apache.commons.math3.optimization.SimpleVectorValueChecker;\n import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.random.RandomDataImpl;\n+import org.apache.commons.math3.TestUtils;\n \n import org.junit.Test;\n import org.junit.Assert;\n  * polynomial.\n  */\n public class PolynomialFitterTest {\n+    @Test\n+    public void testFit() {\n+        final RandomDataImpl rng = new RandomDataImpl();\n+        rng.reSeed(64925784252L);\n+\n+        final LevenbergMarquardtOptimizer optim = new LevenbergMarquardtOptimizer();\n+        final CurveFitter fitter = new CurveFitter(optim);\n+        final double[] coeff = { 12.9, -3.4, 2.1 }; // 12.9 - 3.4 x + 2.1 x^2\n+        final PolynomialFunction f = new PolynomialFunction(coeff);\n+\n+        // Collect data from a known polynomial.\n+        for (int i = 0; i < 100; i++) {\n+            final double x = rng.nextUniform(-100, 100);\n+            fitter.addObservedPoint(x, f.value(x));\n+        }\n+\n+        // Start fit from initial guesses that are far from the optimal values.\n+        final double[] best = fitter.fit(new PolynomialFunction.Parametric(),\n+                                         new double[] { -1e-20, 3e15, -5e25 });\n+\n+        TestUtils.assertEquals(\"best != coeff\", coeff, best, 1e-12);\n+    }\n \n     @Test\n     public void testNoError() {", "timestamp": 1339026529, "metainfo": ""}