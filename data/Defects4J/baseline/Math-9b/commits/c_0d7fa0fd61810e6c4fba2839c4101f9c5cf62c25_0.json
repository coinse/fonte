{"sha": "0d7fa0fd61810e6c4fba2839c4101f9c5cf62c25", "log": "fixed checkstyle warnings  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n     protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;\n \n     /** The kinds of solutions that the algorithm may accept. */\n-    private AllowedSolutions allowedSolutions;\n+    private AllowedSolutions allowed;\n \n     /** The <em>Secant</em>-based root-finding method to use. */\n     private final Method method;\n      */\n     protected BaseSecantSolver(final double absoluteAccuracy, final Method method) {\n         super(absoluteAccuracy);\n-        this.allowedSolutions = AllowedSolutions.ANY_SIDE;\n+        this.allowed = AllowedSolutions.ANY_SIDE;\n         this.method = method;\n     }\n \n                                final double absoluteAccuracy,\n                                final Method method) {\n         super(relativeAccuracy, absoluteAccuracy);\n-        this.allowedSolutions = AllowedSolutions.ANY_SIDE;\n+        this.allowed = AllowedSolutions.ANY_SIDE;\n         this.method = method;\n     }\n \n     public double solve(final int maxEval, final UnivariateRealFunction f,\n                         final double min, final double max, final double startValue,\n                         final AllowedSolutions allowedSolutions) {\n-        this.allowedSolutions = allowedSolutions;\n+        this.allowed = allowedSolutions;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n \n             // given the function value accuracy, then we can't get closer to\n             // the root than we already are.\n             if (FastMath.abs(f1) <= ftol) {\n-                switch (allowedSolutions) {\n+                switch (allowed) {\n                 case ANY_SIDE:\n                     return x1;\n                 case LEFT_SIDE:\n             // are satisfied with the current approximation.\n             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                      atol)) {\n-                switch (allowedSolutions) {\n+                switch (allowed) {\n                 case ANY_SIDE:\n                     return x1;\n                 case LEFT_SIDE:\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java\n  * <p>For backwards compatibility, all root-finding algorithms must have\n  * {@link AllowedSolutions#ANY_SIDE ANY_SIDE} as default for the allowed\n  * solutions.</p>\n+ * @param <FUNC> Type of function to solve.\n  *\n  * @see AllowedSolutions\n  * @since 3.0\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n      * @param max maximal bound of the search interval\n      * @param allowedSolutions the kind of solutions that the root-finding algorithm may\n      * accept as solutions.\n+     * @return a root approximation, on the specified side of the exact root\n      */\n     public static double forceSide(final int maxEval, final UnivariateRealFunction f,\n                                    final BracketedUnivariateRealSolver<UnivariateRealFunction> bracketing,", "timestamp": 1310297311, "metainfo": ""}