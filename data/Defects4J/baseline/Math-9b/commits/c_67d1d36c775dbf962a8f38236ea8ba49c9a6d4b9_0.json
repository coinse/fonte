{"sha": "67d1d36c775dbf962a8f38236ea8ba49c9a6d4b9", "log": "added SynchronizedSummaryStatistics class (and tests)  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.descriptive;\n+\n+/**\n+ * Implementation of\n+ * {@link org.apache.commons.math.stat.descriptive.SummaryStatistics} that\n+ * is safe to use in a multithreaded environment.  Multiple threads can safely\n+ * operate on a single instance without causing runtime exceptions due to race\n+ * conditions.  In effect, this implementation makes modification and access\n+ * methods atomic operations for a single instance.  That is to say, as one\n+ * thread is computing a statistic from the instance, no other thread can modify\n+ * the instance nor compute another statistic. \n+ *\n+ * @since 1.2\n+ * @version $Revision: 602304 $ $Date: 2007-12-08 03:48:39 +0100 (sam., 08 d\u00e9c. 2007) $\n+ */\n+public class SynchronizedSummaryStatistics extends SummaryStatistics {\n+\n+    /** Serialization UID */\n+    private static final long serialVersionUID = 1909861009042253704L;\n+\n+    /**\n+     * Construct a SynchronizedSummaryStatistics instance\n+     */\n+    public SynchronizedSummaryStatistics() {\n+        super();\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getSummary()\n+     */\n+    public synchronized StatisticalSummary getSummary() {\n+        return super.getSummary();\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#addValue(double)\n+     */\n+    public synchronized void addValue(double value) {\n+        super.addValue(value);\n+    }\n+\n+    /** \n+     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getN()\n+     */\n+    public synchronized long getN() {\n+        return super.getN();\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getSum()\n+     */\n+    public synchronized double getSum() {\n+        return super.getSum();\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getSumsq()\n+     */\n+    public synchronized double getSumsq() {\n+        return super.getSumsq();\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getMean()\n+     */\n+    public synchronized double getMean() {\n+        return super.getMean();\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getStandardDeviation()\n+     */\n+    public synchronized double getStandardDeviation() {\n+        return super.getStandardDeviation();\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getVariance()\n+     */\n+    public synchronized double getVariance() {\n+        return super.getVariance();\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getMax()\n+     */\n+    public synchronized double getMax() {\n+        return super.getMax();\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getMin()\n+     */\n+    public synchronized double getMin() {\n+        return super.getMin();\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getGeometricMean()\n+     */\n+    public synchronized double getGeometricMean() {\n+        return super.getGeometricMean();\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#toString()\n+     */\n+    public synchronized String toString() {\n+        return super.toString();\n+    }\n+\n+    /** \n+     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#clear()\n+     */\n+    public synchronized void clear() {\n+        super.clear();\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#equals(Object)\n+     */\n+    public synchronized boolean equals(Object object) {\n+        return super.equals(object);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.descriptive.SummaryStatistics#hashCode()\n+     */\n+    public synchronized int hashCode() {\n+        return super.hashCode();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.descriptive;\n+\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.math.TestUtils;\n+/**\n+ * Test cases for the {@link SummaryStatisticsImpl} class.\n+ *\n+ * @version $Revision: 602305 $ $Date: 2007-12-08 03:51:23 +0100 (sam., 08 d\u00e9c. 2007) $\n+ * @deprecated should be moved down into SummaryStatisticsTest\n+ *   when SummaryStatisticsImpl is removed in 2.0\n+ */\n+\n+public abstract class SummaryStatisticsAbstractTest extends TestCase {\n+    private double one = 1;\n+    private float twoF = 2;\n+    private long twoL = 2;\n+    private int three = 3;\n+    private double mean = 2;\n+    private double sumSq = 18;\n+    private double sum = 8;\n+    private double var = 0.666666666666666666667;\n+    private double std = Math.sqrt(var);\n+    private double n = 4;\n+    private double min = 1;\n+    private double max = 3;\n+    private double tolerance = 10E-15;\n+\n+    protected SummaryStatistics u = null;\n+\n+    public SummaryStatisticsAbstractTest(String name) {\n+        super(name);\n+    }\n+\n+    protected abstract SummaryStatistics createSummaryStatistics();\n+\n+    public void setUp() {\n+        u = createSummaryStatistics();\n+    }\n+\n+    /** test stats */\n+    public void testStats() {\n+        assertEquals(\"total count\",0,u.getN(),tolerance);\n+        u.addValue(one);\n+        u.addValue(twoF);\n+        u.addValue(twoL);\n+        u.addValue(three);\n+        assertEquals(\"N\",n,u.getN(),tolerance);\n+        assertEquals(\"sum\",sum,u.getSum(),tolerance);\n+        assertEquals(\"sumsq\",sumSq,u.getSumsq(),tolerance);\n+        assertEquals(\"var\",var,u.getVariance(),tolerance);\n+        assertEquals(\"std\",std,u.getStandardDeviation(),tolerance);\n+        assertEquals(\"mean\",mean,u.getMean(),tolerance);\n+        assertEquals(\"min\",min,u.getMin(),tolerance);\n+        assertEquals(\"max\",max,u.getMax(),tolerance);\n+        u.clear();\n+        assertEquals(\"total count\",0,u.getN(),tolerance);    \n+    }     \n+\n+    public void testN0andN1Conditions() throws Exception {\n+        assertTrue(\"Mean of n = 0 set should be NaN\", \n+                Double.isNaN( u.getMean() ) );\n+        assertTrue(\"Standard Deviation of n = 0 set should be NaN\", \n+                Double.isNaN( u.getStandardDeviation() ) );\n+        assertTrue(\"Variance of n = 0 set should be NaN\", \n+                Double.isNaN(u.getVariance() ) );\n+\n+        /* n=1 */\n+        u.addValue(one);\n+        assertTrue(\"mean should be one (n = 1)\", \n+                u.getMean() == one);\n+        assertTrue(\"geometric should be one (n = 1) instead it is \" + u.getGeometricMean(), \n+                u.getGeometricMean() == one);\n+        assertTrue(\"Std should be zero (n = 1)\", \n+                u.getStandardDeviation() == 0.0);\n+        assertTrue(\"variance should be zero (n = 1)\", \n+                u.getVariance() == 0.0);\n+\n+        /* n=2 */               \n+        u.addValue(twoF);\n+        assertTrue(\"Std should not be zero (n = 2)\", \n+                u.getStandardDeviation() != 0.0);\n+        assertTrue(\"variance should not be zero (n = 2)\", \n+                u.getVariance() != 0.0);\n+\n+    }\n+\n+    public void testProductAndGeometricMean() throws Exception {            \n+        u.addValue( 1.0 );\n+        u.addValue( 2.0 );\n+        u.addValue( 3.0 );\n+        u.addValue( 4.0 );\n+\n+        assertEquals( \"Geometric mean not expected\", 2.213364, \n+                u.getGeometricMean(), 0.00001 );\n+    }\n+\n+    public void testNaNContracts() {\n+        assertTrue(\"mean not NaN\",Double.isNaN(u.getMean())); \n+        assertTrue(\"min not NaN\",Double.isNaN(u.getMin())); \n+        assertTrue(\"std dev not NaN\",Double.isNaN(u.getStandardDeviation())); \n+        assertTrue(\"var not NaN\",Double.isNaN(u.getVariance())); \n+        assertTrue(\"geom mean not NaN\",Double.isNaN(u.getGeometricMean()));\n+\n+        u.addValue(1.0);\n+\n+        assertEquals( \"mean not expected\", 1.0, \n+                u.getMean(), Double.MIN_VALUE);\n+        assertEquals( \"variance not expected\", 0.0, \n+                u.getVariance(), Double.MIN_VALUE);\n+        assertEquals( \"geometric mean not expected\", 1.0, \n+                u.getGeometricMean(), Double.MIN_VALUE);\n+\n+        u.addValue(-1.0);\n+\n+        assertTrue(\"geom mean not NaN\",Double.isNaN(u.getGeometricMean()));\n+\n+        u.addValue(0.0);\n+\n+        assertTrue(\"geom mean not NaN\",Double.isNaN(u.getGeometricMean()));\n+\n+        //FiXME: test all other NaN contract specs\n+    }\n+\n+    public void testGetSummary() {  \n+        StatisticalSummary summary = u.getSummary();\n+        verifySummary(summary);\n+        u.addValue(1d);\n+        summary = u.getSummary();\n+        verifySummary(summary);\n+        u.addValue(2d);\n+        summary = u.getSummary();\n+        verifySummary(summary);\n+        u.addValue(2d);\n+        summary = u.getSummary();\n+        verifySummary(summary);     \n+    }\n+\n+    public void testSerialization() {\n+        // Empty test\n+        TestUtils.checkSerializedEquality(u);\n+        SummaryStatistics s = (SummaryStatistics) TestUtils.serializeAndRecover(u);\n+        StatisticalSummary summary = s.getSummary();\n+        verifySummary(summary);\n+\n+        // Add some data\n+        u.addValue(2d);\n+        u.addValue(1d);\n+        u.addValue(3d);\n+        u.addValue(4d);\n+        u.addValue(5d);\n+\n+        // Test again\n+        TestUtils.checkSerializedEquality(u);\n+        s = (SummaryStatistics) TestUtils.serializeAndRecover(u);\n+        summary = s.getSummary();\n+        verifySummary(summary);\n+\n+    }\n+\n+    public void testEqualsAndHashCode() {\n+        SummaryStatistics t = null;\n+        int emptyHash = u.hashCode();\n+        assertTrue(\"reflexive\", u.equals(u));\n+        assertFalse(\"non-null compared to null\", u.equals(t));\n+        assertFalse(\"wrong type\", u.equals(new Double(0)));\n+        t = createSummaryStatistics();\n+        assertTrue(\"empty instances should be equal\", t.equals(u));\n+        assertTrue(\"empty instances should be equal\", u.equals(t));\n+        assertEquals(\"empty hash code\", emptyHash, t.hashCode());\n+\n+        // Add some data to u\n+        u.addValue(2d);\n+        u.addValue(1d);\n+        u.addValue(3d);\n+        u.addValue(4d);\n+        assertFalse(\"different n's should make instances not equal\", t.equals(u));\n+        assertFalse(\"different n's should make instances not equal\", u.equals(t));\n+        assertTrue(\"different n's should make hashcodes different\", \n+                u.hashCode() != t.hashCode());\n+\n+        //Add data in different order to t, should not affect identity or hashcode\n+        t.addValue(4d);\n+        t.addValue(2d);\n+        t.addValue(3d);\n+        t.addValue(1d);\n+        assertTrue(\"summaries based on same data should be equal\", t.equals(u));\n+        assertTrue(\"summaries based on same data should be equal\", u.equals(t));\n+        assertEquals(\"summaries based on same data should have same hashcodes\", \n+                u.hashCode(), t.hashCode());   \n+\n+        // Clear and make sure summaries are indistinguishable from empty summary\n+        u.clear();\n+        t.clear();\n+        assertTrue(\"empty instances should be equal\", t.equals(u));\n+        assertTrue(\"empty instances should be equal\", u.equals(t));\n+        assertEquals(\"empty hash code\", emptyHash, t.hashCode());\n+        assertEquals(\"empty hash code\", emptyHash, u.hashCode());\n+    }\n+\n+    private void verifySummary(StatisticalSummary s) {\n+        assertEquals(\"N\",s.getN(),u.getN());\n+        TestUtils.assertEquals(\"sum\",s.getSum(),u.getSum(),tolerance);\n+        TestUtils.assertEquals(\"var\",s.getVariance(),u.getVariance(),tolerance);\n+        TestUtils.assertEquals(\"std\",s.getStandardDeviation(),u.getStandardDeviation(),tolerance);\n+        TestUtils.assertEquals(\"mean\",s.getMean(),u.getMean(),tolerance);\n+        TestUtils.assertEquals(\"min\",s.getMin(),u.getMin(),tolerance);\n+        TestUtils.assertEquals(\"max\",s.getMax(),u.getMax(),tolerance);   \n+    }\n+}\n--- a/src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java\n \n \n import junit.framework.Test;\n-import junit.framework.TestCase;\n import junit.framework.TestSuite;\n-\n-import org.apache.commons.math.TestUtils;\n /**\n  * Test cases for the {@link SummaryStatisticsImpl} class.\n- *\n+ * @deprecated - to be removed in 2.0 with SummaryStatisticsImpl\n  * @version $Revision$ $Date$\n  */\n \n-public final class SummaryStatisticsImplTest extends TestCase {\n-    private double one = 1;\n-    private float twoF = 2;\n-    private long twoL = 2;\n-    private int three = 3;\n-    private double mean = 2;\n-    private double sumSq = 18;\n-    private double sum = 8;\n-    private double var = 0.666666666666666666667;\n-    private double std = Math.sqrt(var);\n-    private double n = 4;\n-    private double min = 1;\n-    private double max = 3;\n-    private double tolerance = 10E-15;\n-    \n-    protected SummaryStatistics u = null;\n-    \n+public final class SummaryStatisticsImplTest extends SummaryStatisticsAbstractTest {\n+\n     public SummaryStatisticsImplTest(String name) {\n         super(name);\n     }\n-    \n-    public void setUp() {  \n-        u = SummaryStatistics.newInstance();\n-    }\n-    \n+\n     public static Test suite() {\n         TestSuite suite = new TestSuite(SummaryStatisticsImplTest.class);\n-        suite.setName(\"Frequency Tests\");\n+        suite.setName(\"SummaryStatisticsImpl Tests\");\n         return suite;\n     }\n-    \n-    /** test stats */\n-    public void testStats() {\n-        assertEquals(\"total count\",0,u.getN(),tolerance);\n-        u.addValue(one);\n-        u.addValue(twoF);\n-        u.addValue(twoL);\n-        u.addValue(three);\n-        assertEquals(\"N\",n,u.getN(),tolerance);\n-        assertEquals(\"sum\",sum,u.getSum(),tolerance);\n-        assertEquals(\"sumsq\",sumSq,u.getSumsq(),tolerance);\n-        assertEquals(\"var\",var,u.getVariance(),tolerance);\n-        assertEquals(\"std\",std,u.getStandardDeviation(),tolerance);\n-        assertEquals(\"mean\",mean,u.getMean(),tolerance);\n-        assertEquals(\"min\",min,u.getMin(),tolerance);\n-        assertEquals(\"max\",max,u.getMax(),tolerance);\n-        u.clear();\n-        assertEquals(\"total count\",0,u.getN(),tolerance);    \n-    }     \n-    \n-    public void testN0andN1Conditions() throws Exception {\n-        assertTrue(\"Mean of n = 0 set should be NaN\", \n-            Double.isNaN( u.getMean() ) );\n-        assertTrue(\"Standard Deviation of n = 0 set should be NaN\", \n-            Double.isNaN( u.getStandardDeviation() ) );\n-        assertTrue(\"Variance of n = 0 set should be NaN\", \n-            Double.isNaN(u.getVariance() ) );\n-        \n-        /* n=1 */\n-        u.addValue(one);\n-        assertTrue(\"mean should be one (n = 1)\", \n-            u.getMean() == one);\n-        assertTrue(\"geometric should be one (n = 1) instead it is \" + u.getGeometricMean(), \n-            u.getGeometricMean() == one);\n-        assertTrue(\"Std should be zero (n = 1)\", \n-            u.getStandardDeviation() == 0.0);\n-        assertTrue(\"variance should be zero (n = 1)\", \n-            u.getVariance() == 0.0);\n-                    \n-        /* n=2 */               \n-        u.addValue(twoF);\n-        assertTrue(\"Std should not be zero (n = 2)\", \n-            u.getStandardDeviation() != 0.0);\n-        assertTrue(\"variance should not be zero (n = 2)\", \n-            u.getVariance() != 0.0);\n-            \n-    }\n \n-    public void testProductAndGeometricMean() throws Exception {            \n-        u.addValue( 1.0 );\n-        u.addValue( 2.0 );\n-        u.addValue( 3.0 );\n-        u.addValue( 4.0 );\n-\n-        assertEquals( \"Geometric mean not expected\", 2.213364, \n-            u.getGeometricMean(), 0.00001 );\n-    }\n-    \n-    public void testNaNContracts() {\n-        assertTrue(\"mean not NaN\",Double.isNaN(u.getMean())); \n-        assertTrue(\"min not NaN\",Double.isNaN(u.getMin())); \n-        assertTrue(\"std dev not NaN\",Double.isNaN(u.getStandardDeviation())); \n-        assertTrue(\"var not NaN\",Double.isNaN(u.getVariance())); \n-        assertTrue(\"geom mean not NaN\",Double.isNaN(u.getGeometricMean()));\n-        \n-        u.addValue(1.0);\n-        \n-        assertEquals( \"mean not expected\", 1.0, \n-            u.getMean(), Double.MIN_VALUE);\n-        assertEquals( \"variance not expected\", 0.0, \n-            u.getVariance(), Double.MIN_VALUE);\n-        assertEquals( \"geometric mean not expected\", 1.0, \n-            u.getGeometricMean(), Double.MIN_VALUE);\n-        \n-        u.addValue(-1.0);\n-        \n-        assertTrue(\"geom mean not NaN\",Double.isNaN(u.getGeometricMean()));\n-        \n-        u.addValue(0.0);\n-        \n-        assertTrue(\"geom mean not NaN\",Double.isNaN(u.getGeometricMean()));\n-        \n-        //FiXME: test all other NaN contract specs\n-    }\n-    \n-    public void testGetSummary() {  \n-        StatisticalSummary summary = u.getSummary();\n-        verifySummary(summary);\n-        u.addValue(1d);\n-        summary = u.getSummary();\n-        verifySummary(summary);\n-        u.addValue(2d);\n-        summary = u.getSummary();\n-        verifySummary(summary);\n-        u.addValue(2d);\n-        summary = u.getSummary();\n-        verifySummary(summary);     \n-    }\n-    \n-    public void testSerialization() {\n-        // Empty test\n-        TestUtils.checkSerializedEquality(u);\n-        SummaryStatistics s = (SummaryStatistics) TestUtils.serializeAndRecover(u);\n-        StatisticalSummary summary = s.getSummary();\n-        verifySummary(summary);\n-        \n-        // Add some data\n-        u.addValue(2d);\n-        u.addValue(1d);\n-        u.addValue(3d);\n-        u.addValue(4d);\n-        u.addValue(5d);\n-        \n-        // Test again\n-        TestUtils.checkSerializedEquality(u);\n-        s = (SummaryStatistics) TestUtils.serializeAndRecover(u);\n-        summary = s.getSummary();\n-        verifySummary(summary);\n-        \n-    }\n-    \n-    public void testEqualsAndHashCode() {\n-        SummaryStatistics t = null;\n-        int emptyHash = u.hashCode();\n-        assertTrue(\"reflexive\", u.equals(u));\n-        assertFalse(\"non-null compared to null\", u.equals(t));\n-        assertFalse(\"wrong type\", u.equals(new Double(0)));\n-        t = SummaryStatistics.newInstance();\n-        assertTrue(\"empty instances should be equal\", t.equals(u));\n-        assertTrue(\"empty instances should be equal\", u.equals(t));\n-        assertEquals(\"empty hash code\", emptyHash, t.hashCode());\n-        \n-        // Add some data to u\n-        u.addValue(2d);\n-        u.addValue(1d);\n-        u.addValue(3d);\n-        u.addValue(4d);\n-        assertFalse(\"different n's should make instances not equal\", t.equals(u));\n-        assertFalse(\"different n's should make instances not equal\", u.equals(t));\n-        assertTrue(\"different n's should make hashcodes different\", \n-                u.hashCode() != t.hashCode());\n-        \n-        //Add data in different order to t, should not affect identity or hashcode\n-        t.addValue(4d);\n-        t.addValue(2d);\n-        t.addValue(3d);\n-        t.addValue(1d);\n-        assertTrue(\"summaries based on same data should be equal\", t.equals(u));\n-        assertTrue(\"summaries based on same data should be equal\", u.equals(t));\n-        assertEquals(\"summaries based on same data should have same hashcodes\", \n-                u.hashCode(), t.hashCode());   \n-        \n-        // Clear and make sure summaries are indistinguishable from empty summary\n-        u.clear();\n-        t.clear();\n-        assertTrue(\"empty instances should be equal\", t.equals(u));\n-        assertTrue(\"empty instances should be equal\", u.equals(t));\n-        assertEquals(\"empty hash code\", emptyHash, t.hashCode());\n-        assertEquals(\"empty hash code\", emptyHash, u.hashCode());\n-    }\n-    \n-    private void verifySummary(StatisticalSummary s) {\n-        assertEquals(\"N\",s.getN(),u.getN());\n-        TestUtils.assertEquals(\"sum\",s.getSum(),u.getSum(),tolerance);\n-        TestUtils.assertEquals(\"var\",s.getVariance(),u.getVariance(),tolerance);\n-        TestUtils.assertEquals(\"std\",s.getStandardDeviation(),u.getStandardDeviation(),tolerance);\n-        TestUtils.assertEquals(\"mean\",s.getMean(),u.getMean(),tolerance);\n-        TestUtils.assertEquals(\"min\",s.getMin(),u.getMin(),tolerance);\n-        TestUtils.assertEquals(\"max\",s.getMax(),u.getMax(),tolerance);   \n+    protected SummaryStatistics createSummaryStatistics() {\n+        return new SummaryStatisticsImpl();\n     }\n }\n--- a/src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.stat.descriptive.moment.Mean;\n /**\n  * Test cases for the {@link SummaryStatistics} class.\n  * @version $Revision: 566833 $ $Date: 2007-08-16 13:36:33 -0700 (Thu, 16 Aug 2007) $\n  */\n \n-public final class SummaryStatisticsTest extends TestCase {\n-    \n-    protected SummaryStatistics u = null;\n-    \n+public final class SummaryStatisticsTest extends SummaryStatisticsAbstractTest {\n+\n     public SummaryStatisticsTest(String name) {\n         super(name);\n-    }\n-    \n-    public void setUp() {  \n-        u = new SummaryStatistics();\n     }\n     \n     public static Test suite() {\n         TestSuite suite = new TestSuite(SummaryStatisticsTest.class);\n         suite.setName(\"SummaryStatistics tests\");\n         return suite;\n+    }\n+\n+    protected SummaryStatistics createSummaryStatistics() {\n+        return new SummaryStatistics();\n     }\n     \n     public void testSetterInjection() throws Exception {\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law\n+ * or agreed to in writing, software distributed under the License is\n+ * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the specific language\n+ * governing permissions and limitations under the License.\n+ */\n+package org.apache.commons.math.stat.descriptive;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test cases for the {@link SynchronizedSummaryStatisticsTest} class.\n+ * @version $Revision: 592121 $ $Date: 2007-08-16 15:36:33 -0500 (Thu, 16 Aug\n+ *          2007) $\n+ */\n+public final class SynchronizedSummaryStatisticsTest extends SummaryStatisticsAbstractTest {\n+\n+    public SynchronizedSummaryStatisticsTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(SynchronizedSummaryStatisticsTest.class);\n+        suite.setName(\"SynchronizedSummaryStatistics Tests\");\n+        return suite;\n+    }\n+\n+    protected SummaryStatistics createSummaryStatistics() {\n+        return new SynchronizedSummaryStatistics();\n+    }\n+}", "timestamp": 1199454554, "metainfo": ""}