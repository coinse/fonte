{"sha": "e37e28a55d8a65a49213afbb0886468cc5eb5a7d", "log": "improved error messages  ", "commit": "\n--- a/src/java/org/apache/commons/math/MessagesResources_fr.java\n+++ b/src/java/org/apache/commons/math/MessagesResources_fr.java\n     // org.apache.commons.math.linear.EigenDecompositionImpl\n     { \"cannot solve degree {0} equation\",\n       \"impossible de r\\u00e9soudre une \\u00e9quation de degr\\u00e9 {0}\" },\n-    { \"negative element on decomposed tridiagonal of {0}x{1} matrix\",\n-      \"\\u00e9l\\u00e9ment n\\u00e9gatif dans la d\\u00e9composition tri-diagonale d''une matrice {0}x{1}\" },\n \n     // org.apache.commons.math.linear.NonSquareMatrixException\n     { \"a {0}x{1} matrix was provided instead of a square matrix\",\n       \"tableau des indices de lignes s\\u00e9lectionn\\u00e9es vide\" },\n     { \"empty selected column index array\",\n       \"tableau des indices de colonnes s\\u00e9lectionn\\u00e9es vide\" },\n+    { \"{0}x{1} and {2}x{3} matrices are not multiplication compatible\",\n+      \"les dimensions {0}x{1} et {2}x{3} sont incompatibles pour la multiplication matricielle\" },\n+    { \"{0}x{1} and {2}x{3} matrices are not addition compatible\",\n+      \"les dimensions {0}x{1} et {2}x{3} sont incompatibles pour l'addition matricielle\" },\n+    { \"{0}x{1} and {2}x{3} matrices are not subtraction compatible\",\n+      \"les dimensions {0}x{1} et {2}x{3} sont incompatibles pour la soustraction matricielle\" },\n \n    // org.apache.commons.math.random.EmpiricalDistributionImpl\n    // org.apache.commons.math.random.ValueServer\n--- a/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n             final int rowCount    = getRowDimension();\n             final int columnCount = getColumnDimension();\n             if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension()) {\n-                throw new IllegalArgumentException(\"matrix dimension mismatch\");\n+                throw MathRuntimeException.createIllegalArgumentException(\"{0}x{1} and {2}x{3} matrices are not\" +\n+                                                                          \" addition compatible\",\n+                                                                          new Object[] {\n+                                                                              getRowDimension(), getColumnDimension(),\n+                                                                              m.getRowDimension(), m.getColumnDimension()\n+                                                                          });\n             }\n             final double[][] outData = new double[rowCount][columnCount];\n             for (int row = 0; row < rowCount; row++) {\n         final int rowCount    = getRowDimension();\n         final int columnCount = getColumnDimension();\n         if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension()) {\n-            throw new IllegalArgumentException(\"matrix dimension mismatch\");\n+            throw MathRuntimeException.createIllegalArgumentException(\"{0}x{1} and {2}x{3} matrices are not\" +\n+                                                                      \" addition compatible\",\n+                                                                      new Object[] {\n+                                                                          getRowDimension(), getColumnDimension(),\n+                                                                          m.getRowDimension(), m.getColumnDimension()\n+                                                                      });\n         }\n         final double[][] outData = new double[rowCount][columnCount];\n         for (int row = 0; row < rowCount; row++) {\n             final int rowCount    = getRowDimension();\n             final int columnCount = getColumnDimension();\n             if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension()) {\n-                throw new IllegalArgumentException(\"matrix dimension mismatch\");\n+                throw MathRuntimeException.createIllegalArgumentException(\"{0}x{1} and {2}x{3} matrices are not\" +\n+                                                                          \" subtraction compatible\",\n+                                                                          new Object[] {\n+                                                                              getRowDimension(), getColumnDimension(),\n+                                                                              m.getRowDimension(), m.getColumnDimension()\n+                                                                          });\n             }\n             final double[][] outData = new double[rowCount][columnCount];\n             for (int row = 0; row < rowCount; row++) {\n         final int rowCount    = getRowDimension();\n         final int columnCount = getColumnDimension();\n         if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension()) {\n-            throw new IllegalArgumentException(\"matrix dimension mismatch\");\n+            throw MathRuntimeException.createIllegalArgumentException(\"{0}x{1} and {2}x{3} matrices are not\" +\n+                                                                      \" subtraction compatible\",\n+                                                                      new Object[] {\n+                                                                          getRowDimension(), getColumnDimension(),\n+                                                                          m.getRowDimension(), m.getColumnDimension()\n+                                                                      });\n         }\n         final double[][] outData = new double[rowCount][columnCount];\n         for (int row = 0; row < rowCount; row++) {\n             return multiply((RealMatrixImpl) m);\n         } catch (ClassCastException cce) {\n             if (this.getColumnDimension() != m.getRowDimension()) {\n-                throw new IllegalArgumentException(\"Matrices are not multiplication compatible.\");\n+                throw MathRuntimeException.createIllegalArgumentException(\"{0}x{1} and {2}x{3} matrices are not\" +\n+                                                                          \" multiplication compatible\",\n+                                                                          new Object[] {\n+                                                                              getRowDimension(), getColumnDimension(),\n+                                                                              m.getRowDimension(), m.getColumnDimension()\n+                                                                          });\n             }\n             final int nRows = this.getRowDimension();\n             final int nCols = m.getColumnDimension();\n      */\n     public RealMatrixImpl multiply(RealMatrixImpl m) throws IllegalArgumentException {\n         if (this.getColumnDimension() != m.getRowDimension()) {\n-            throw new IllegalArgumentException(\"Matrices are not multiplication compatible.\");\n+            throw MathRuntimeException.createIllegalArgumentException(\"{0}x{1} and {2}x{3} matrices are not\" +\n+                                                                      \" multiplication compatible\",\n+                                                                      new Object[] {\n+                                                                          getRowDimension(), getColumnDimension(),\n+                                                                          m.getRowDimension(), m.getColumnDimension()\n+                                                                      });\n         }\n         final int nRows = this.getRowDimension();\n         final int nCols = m.getColumnDimension();", "timestamp": 1228405317, "metainfo": ""}