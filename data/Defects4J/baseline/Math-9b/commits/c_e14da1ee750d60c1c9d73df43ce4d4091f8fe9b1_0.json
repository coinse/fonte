{"sha": "e14da1ee750d60c1c9d73df43ce4d4091f8fe9b1", "log": "added getNorm1, getNormInf, distance1 and distanceInf to the Vector3D class  ", "commit": "\n--- a/src/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/java/org/apache/commons/math/geometry/Vector3D.java\n     return z;\n   }\n \n-  /** Get the norm for the vector.\n+  /** Get the L<sub>1</sub> norm for the vector.\n+   * @return L<sub>1</sub> norm for the vector\n+   */\n+  public double getNorm1() {\n+    return Math.abs(x) + Math.abs(y) + Math.abs(z);\n+  }\n+\n+  /** Get the L<sub>2</sub> norm for the vector.\n    * @return euclidian norm for the vector\n    */\n   public double getNorm() {\n    */\n   public double getNormSq() {\n     return x * x + y * y + z * z;\n+  }\n+\n+  /** Get the L<sub>&infin;</sub> norm for the vector.\n+   * @return L<sub>&infin;</sub> norm for the vector\n+   */\n+  public double getNormInf() {\n+    return Math.max(Math.max(Math.abs(x), Math.abs(y)), Math.abs(z));\n   }\n \n   /** Get the azimuth of the vector.\n   /** Compute the angular separation between two vectors.\n    * <p>This method computes the angular separation between two\n    * vectors using the dot product for well separated vectors and the\n-   * cross product for almost aligned vectors. This allow to have a\n+   * cross product for almost aligned vectors. This allows to have a\n    * good accuracy in all cases, even for vectors very close to each\n    * other.</p>\n    * @param v1 first vector\n                         v1.x * v2.y - v1.y * v2.x);\n   }\n \n-  /** Compute the distance between two vectors.\n+  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n+   * <p>Calling this method is equivalent to calling:\n+   * <code>v1.subtract(v2).getNorm1()</code> except that no intermediate\n+   * vector is built</p>\n+   * @param v1 first vector\n+   * @param v2 second vector\n+   * @return the distance between v1 and v2 according to the L<sub>1</sub> norm\n+   */\n+  public static double distance1(Vector3D v1, Vector3D v2) {\n+    final double dx = Math.abs(v2.x - v1.x);\n+    final double dy = Math.abs(v2.y - v1.y);\n+    final double dz = Math.abs(v2.z - v1.z);\n+    return dx + dy + dz;\n+  }\n+\n+  /** Compute the distance between two vectors according to the L<sub>2</sub> norm.\n    * <p>Calling this method is equivalent to calling:\n    * <code>v1.subtract(v2).getNorm()</code> except that no intermediate\n    * vector is built</p>\n    * @param v1 first vector\n    * @param v2 second vector\n-   * @return the distance between v1 and v2\n+   * @return the distance between v1 and v2 according to the L<sub>2</sub> norm\n    */\n   public static double distance(Vector3D v1, Vector3D v2) {\n     final double dx = v2.x - v1.x;\n     return Math.sqrt(dx * dx + dy * dy + dz * dz);\n   }\n \n+  /** Compute the distance between two vectors according to the L<sub>&infin;</sub> norm.\n+   * <p>Calling this method is equivalent to calling:\n+   * <code>v1.subtract(v2).getNormInf()</code> except that no intermediate\n+   * vector is built</p>\n+   * @param v1 first vector\n+   * @param v2 second vector\n+   * @return the distance between v1 and v2 according to the L<sub>&infin;</sub> norm\n+   */\n+  public static double distanceInf(Vector3D v1, Vector3D v2) {\n+    final double dx = Math.abs(v2.x - v1.x);\n+    final double dy = Math.abs(v2.y - v1.y);\n+    final double dz = Math.abs(v2.z - v1.z);\n+    return Math.max(Math.max(dx, dy), dz);\n+  }\n+\n   /** Compute the square of the distance between two vectors.\n    * <p>Calling this method is equivalent to calling:\n    * <code>v1.subtract(v2).getNormSq()</code> except that no intermediate\n--- a/src/test/org/apache/commons/math/geometry/Vector3DTest.java\n+++ b/src/test/org/apache/commons/math/geometry/Vector3DTest.java\n     assertTrue(Math.abs(v.getZ() - 3) < 1.0e-12);\n   }\n   \n+  public void testNorm1() {\n+    assertEquals(0.0, Vector3D.ZERO.getNorm1());\n+    assertEquals(6.0, new Vector3D(1, -2, 3).getNorm1(), 0);\n+  }\n+\n   public void testNorm() {\n-    assertTrue(Math.abs(Vector3D.ZERO.getNorm()) < 1.0e-12);\n-    assertTrue(Math.abs(new Vector3D(1, 2, 3).getNorm() - Math.sqrt(14))\n-               < 1.0e-12);\n+      assertEquals(0.0, Vector3D.ZERO.getNorm());\n+      assertEquals(Math.sqrt(14), new Vector3D(1, 2, 3).getNorm(), 1.0e-12);\n+    }\n+\n+  public void testNormInf() {\n+      assertEquals(0.0, Vector3D.ZERO.getNormInf());\n+      assertEquals(3.0, new Vector3D(1, -2, 3).getNormInf(), 0);\n+    }\n+\n+  public void testDistance1() {\n+      Vector3D v1 = new Vector3D(1, -2, 3);\n+      Vector3D v2 = new Vector3D(-4, 2, 0);\n+      assertEquals(0.0, Vector3D.distance1(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);\n+      assertEquals(12.0, Vector3D.distance1(v1, v2), 1.0e-12);\n+      assertEquals(v1.subtract(v2).getNorm1(), Vector3D.distance1(v1, v2), 1.0e-12);\n+  }\n+\n+  public void testDistance() {\n+      Vector3D v1 = new Vector3D(1, -2, 3);\n+      Vector3D v2 = new Vector3D(-4, 2, 0);\n+      assertEquals(0.0, Vector3D.distance(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);\n+      assertEquals(Math.sqrt(50), Vector3D.distance(v1, v2), 1.0e-12);\n+      assertEquals(v1.subtract(v2).getNorm(), Vector3D.distance(v1, v2), 1.0e-12);\n+  }\n+\n+  public void testDistanceSq() {\n+      Vector3D v1 = new Vector3D(1, -2, 3);\n+      Vector3D v2 = new Vector3D(-4, 2, 0);\n+      assertEquals(0.0, Vector3D.distanceSq(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);\n+      assertEquals(50.0, Vector3D.distanceSq(v1, v2), 1.0e-12);\n+      assertEquals(Vector3D.distance(v1, v2) * Vector3D.distance(v1, v2),\n+                   Vector3D.distanceSq(v1, v2), 1.0e-12);\n+  }\n+\n+  public void testDistanceInf() {\n+      Vector3D v1 = new Vector3D(1, -2, 3);\n+      Vector3D v2 = new Vector3D(-4, 2, 0);\n+      assertEquals(0.0, Vector3D.distanceInf(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);\n+      assertEquals(5.0, Vector3D.distanceInf(v1, v2), 1.0e-12);\n+      assertEquals(v1.subtract(v2).getNormInf(), Vector3D.distanceInf(v1, v2), 1.0e-12);\n   }\n \n   public void testSubtract() {", "timestamp": 1241032201, "metainfo": ""}