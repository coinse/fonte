{"sha": "b16e7475445879a703a34e8af515e00b6ffd8995", "log": "Added tests for getSummary() added to SummaryStatistics.   ", "commit": "\n--- a/src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java\n+++ b/src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.apache.commons.math.TestUtils;\n /**\n  * Test cases for the {@link DescriptiveStatistics} class.\n  *\n- * @version $Revision: 1.4 $ $Date: 2004/04/12 02:27:50 $\n+ * @version $Revision: 1.5 $ $Date: 2004/05/18 04:21:28 $\n  */\n \n public final class UnivariateImplTest extends TestCase {\n     private double max = 3;\n     private double tolerance = 10E-15;\n     \n+    protected SummaryStatistics u = null;\n+    \n     public UnivariateImplTest(String name) {\n         super(name);\n     }\n     \n     public void setUp() {  \n+        u = SummaryStatistics.newInstance();\n     }\n     \n     public static Test suite() {\n     \n     /** test stats */\n     public void testStats() {\n-        SummaryStatistics u = SummaryStatistics.newInstance();\n         assertEquals(\"total count\",0,u.getN(),tolerance);\n         u.addValue(one);\n         u.addValue(twoF);\n     }     \n     \n     public void testN0andN1Conditions() throws Exception {\n-    \tSummaryStatistics u = SummaryStatistics.newInstance();\n         assertTrue(\"Mean of n = 0 set should be NaN\", \n             Double.isNaN( u.getMean() ) );\n \t\tassertTrue(\"Standard Deviation of n = 0 set should be NaN\", \n             \n     }\n \n-    public void testProductAndGeometricMean() throws Exception {\n-    \tSummaryStatistics u = SummaryStatistics.newInstance();\n-    \t    \t\n+    public void testProductAndGeometricMean() throws Exception {  \t    \t\n         u.addValue( 1.0 );\n         u.addValue( 2.0 );\n         u.addValue( 3.0 );\n     }\n     \n     public void testNaNContracts() {\n-    \tSummaryStatistics u = SummaryStatistics.newInstance();\n         double nan = Double.NaN;\n         assertTrue(\"mean not NaN\",Double.isNaN(u.getMean())); \n         assertTrue(\"min not NaN\",Double.isNaN(u.getMin())); \n         \n         //FiXME: test all other NaN contract specs\n     }\n+    \n+    public void testGetSummary() {  \n+        StatisticalSummary summary = u.getSummary();\n+        verifySummary(summary);\n+        u.addValue(1d);\n+        summary = u.getSummary();\n+        verifySummary(summary);\n+        u.addValue(2d);\n+        summary = u.getSummary();\n+        verifySummary(summary);\n+        u.addValue(2d);\n+        summary = u.getSummary();\n+        verifySummary(summary);     \n+    }\n+    \n+    private void verifySummary(StatisticalSummary s) {\n+        assertEquals(\"N\",s.getN(),u.getN());\n+        TestUtils.assertEquals(\"sum\",s.getSum(),u.getSum(),tolerance);\n+        TestUtils.assertEquals(\"var\",s.getVariance(),u.getVariance(),tolerance);\n+        TestUtils.assertEquals(\"std\",s.getStandardDeviation(),u.getStandardDeviation(),tolerance);\n+        TestUtils.assertEquals(\"mean\",s.getMean(),u.getMean(),tolerance);\n+        TestUtils.assertEquals(\"min\",s.getMin(),u.getMin(),tolerance);\n+        TestUtils.assertEquals(\"max\",s.getMax(),u.getMax(),tolerance);   \n+    }\n }", "timestamp": 1084854088, "metainfo": ""}