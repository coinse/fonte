{"sha": "3933151a2e3d3dd146fd9e14c5e8cb8a6adbb96b", "log": "Unit tests for previous commit - from Brent Worden's submission in Bugzilla Issue 20279   ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @author Brent Worden\n+ */\n+public class ChiSquareDistributionTest extends TestCase {\n+    private ChiSquaredDistribution chiSquare;\n+    \n+\t/**\n+\t * Constructor for ChiSquareDistributionTest.\n+\t * @param name\n+\t */\n+\tpublic ChiSquareDistributionTest(String name) {\n+\t\tsuper(name);\n+\t}\n+\n+\t/*\n+\t * @see TestCase#setUp()\n+\t */\n+\tprotected void setUp() throws Exception {\n+\t\tsuper.setUp();\n+        chiSquare = DistributionFactory.newInstance().createChiSquareDistribution(5.0);\n+\t}\n+\n+\t/*\n+\t * @see TestCase#tearDown()\n+\t */\n+\tprotected void tearDown() throws Exception {\n+        chiSquare = null;\n+\t\tsuper.tearDown();\n+\t}\n+\n+    public void testLowerTailProbability(){\n+        testProbability( .210, .001);\n+        testProbability( .554, .010);\n+        testProbability( .831, .025);\n+        testProbability(1.145, .050);\n+        testProbability(1.610, .100);\n+    }\n+\n+    public void testUpperTailProbability(){\n+        testProbability(20.515, .999);\n+        testProbability(15.086, .990);\n+        testProbability(12.833, .975);\n+        testProbability(11.070, .950);\n+        testProbability( 9.236, .900);\n+    }\n+    \n+    public void testLowerTailValues(){\n+        testValue(.001,  .210);\n+        testValue(.010,  .554);\n+        testValue(.025,  .831);\n+        testValue(.050, 1.145);\n+        testValue(.100, 1.610);\n+    }\n+    \n+    public void testUpperTailValues(){\n+        testValue(.999, 20.515);\n+        testValue(.990, 15.086);\n+        testValue(.975, 12.833);\n+        testValue(.950, 11.070);\n+        testValue(.900,  9.236);\n+    }\n+    \n+    private void testProbability(double x, double expected){\n+        double actual = chiSquare.cummulativeProbability(x);\n+        assertEquals(\"probability for \" + x, expected, actual, 10e-4);\n+    }\n+    \n+    private void testValue(double p, double expected){\n+        double actual = chiSquare.inverseCummulativeProbability(p);\n+        assertEquals(\"value for \" + p, expected, actual, 10e-4);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @author Brent Worden\n+ */\n+public class DistributionFactoryImplTest extends TestCase {\n+    /** */\n+    private DistributionFactory factory;\n+    \n+\t/**\n+\t * Constructor for DistributionFactoryImplTest.\n+\t * @param name\n+\t */\n+\tpublic DistributionFactoryImplTest(String name) {\n+\t\tsuper(name);\n+\t}\n+\t/**\n+\t * @throws java.lang.Exception\n+\t */\n+\tprotected void setUp() throws Exception {\n+\t\tsuper.setUp();\n+        factory = new DistributionFactoryImpl();\n+\t}\n+\n+\t/**\n+\t * @throws java.lang.Exception\n+\t */\n+\tprotected void tearDown() throws Exception {\n+        factory = null;\n+\t\tsuper.tearDown();\n+\t}\n+    \n+    public void testCreateChiSquareDistributionNegative(){\n+        try {\n+            factory.createChiSquareDistribution(-1.0);\n+            fail(\"negative degrees of freedom.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateChiSquareDistributionZero(){\n+        try {\n+            factory.createChiSquareDistribution(0.0);\n+            fail(\"zero degrees of freedom.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateChiSquareDistributionPositive(){\n+        try {\n+            factory.createChiSquareDistribution(1.0);\n+        } catch (IllegalArgumentException ex) {\n+            fail(\"positive degrees of freedom.  IllegalArgumentException is not expected\");\n+        }\n+    }\n+    \n+    public void testCreateGammaDistributionNegativePositive(){\n+        try {\n+            factory.createGammaDistribution(-1.0, 1.0);\n+            fail(\"negative alpha.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateGammaDistributionZeroPositive(){\n+        try {\n+            factory.createGammaDistribution(0.0, 1.0);\n+            fail(\"zero alpha.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateGammaDistributionPositiveNegative(){\n+        try {\n+            factory.createGammaDistribution(1.0, -1.0);\n+            fail(\"negative beta.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateGammaDistributionPositiveZero(){\n+        try {\n+            factory.createGammaDistribution(1.0, 0.0);\n+            fail(\"zero beta.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateGammaDistributionPositivePositive(){\n+        try {\n+            factory.createGammaDistribution(1.0, 1.0);\n+        } catch (IllegalArgumentException ex) {\n+            fail(\"positive alpah and beta.  IllegalArgumentException is not expected\");\n+        }\n+    }\n+//    \n+//    public void testCreateTDistributionNegative(){\n+//        try {\n+//            factory.createTDistribution(-1.0);\n+//            fail(\"negative degrees of freedom.  IllegalArgumentException expected\");\n+//        } catch (IllegalArgumentException ex) {\n+//            ;\n+//        }\n+//    }\n+//    \n+//    public void testCreateTDistributionZero(){\n+//        try {\n+//            factory.createTDistribution(0.0);\n+//            fail(\"zero degrees of freedom.  IllegalArgumentException expected\");\n+//        } catch (IllegalArgumentException ex) {\n+//            ;\n+//        }\n+//    }\n+//    \n+//    public void testCreateTDistributionPositive(){\n+//        try {\n+//            factory.createTDistribution(1.0);\n+//        } catch (IllegalArgumentException ex) {\n+//            fail(\"positive degrees of freedom.  IllegalArgumentException is not expected\");\n+//        }\n+//    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/distribution/GammaDistributionTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @author Brent Worden\n+ */\n+public class GammaDistributionTest extends TestCase {\n+\t/**\n+\t * Constructor for ChiSquareDistributionTest.\n+\t * @param name\n+\t */\n+\tpublic GammaDistributionTest(String name) {\n+\t\tsuper(name);\n+\t}\n+\n+    public void testProbabilities(){\n+        testProbability(15.5, 4.0, 2.0, .9499);\n+        testProbability( 0.5, 4.0, 1.0, .0018);\n+        testProbability(10.0, 1.0, 2.0, .9933);\n+        testProbability( 5.0, 2.0, 2.0, .7127);\n+    }\n+    \n+    private void testProbability(double x, double a, double b, double expected){\n+        double actual = DistributionFactory.newInstance().createGammaDistribution(a, b).cummulativeProbability(x);\n+        assertEquals(\"probability for \" + x, expected, actual, 10e-4);\n+    }\n+}", "timestamp": 1054236956, "metainfo": ""}