{"sha": "2b57d6595c2c9095dc09bd42ba40fe1c69df0735", "log": "PR: http://nagoya.apache.org/bugzilla/show_bug.cgi?id=20979 Submitted by:\tphil@steitz.com   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/BivariateRegression.java\n+++ b/src/java/org/apache/commons/math/stat/BivariateRegression.java\n  * </ul>\n  *\n  * @author  Phil Steitz\n- * @version $Revision: 1.2 $ $Date: 2003/06/11 03:33:05 $\n+ * @version $Revision: 1.3 $ $Date: 2003/06/21 02:13:41 $\n  */\n public class BivariateRegression {\n     \n     /** sum of x values */\n     private double sumX = 0d;\n     \n-    /** sum of squared x values */\n-    private double sumSqX = 0d;\n+    /** total variation in x (sum of squared deviations from xbar) */\n+    private double sumXX = 0d;\n     \n     /** sum of y values */\n     private double sumY = 0d;\n     \n-    /** sum of squared y values */\n-    private double sumSqY = 0d;\n+    /** total variation in y (sum of squared deviations from ybar) */\n+    private double sumYY = 0d;\n     \n     /** sum of products */\n     private double sumXY = 0d;\n     /** number of observations */\n     private long n = 0;\n     \n+    /** mean of accumulated x values, used in updating formulas */\n+    private double xbar = 0;\n+    \n+    /** mean of accumulated y values, used in updating formulas */\n+    private double ybar = 0;\n+    \n+    \n     // ---------------------Public methods--------------------------------------\n     \n     /**\n-     * Adds the observation (x,y) to the regression data set\n+     * Adds the observation (x,y) to the regression data set.\n+     * <p>\n+     * Uses updating formulas for means and sums of squares defined in \n+     * \"Algorithms for Computing the Sample Variance: Analysis and\n+     * Recommendations\", Chan, T.F., Golub, G.H., and LeVeque, R.J. \n+     * 1983, American Statistician, vol. 37, pp. 242-247, referenced in\n+     * Weisberg, S. \"Applied Linear Regression\". 2nd Ed. 1985\n+     *\n      *\n      * @param x independent variable value\n      * @param y dependent variable value\n      */\n     public void addData(double x, double y) {\n+        if (n == 0) {\n+            xbar = x;\n+            ybar = y;\n+        } else {\n+            sumXX += ((double) n / (double) (n + 1)) * (x - xbar) * (x - xbar);\n+            sumYY += ((double) n / (double) (n + 1)) * (y - ybar) * (y - ybar);\n+            sumXY += ((double) n / (double) (n + 1)) * (x - xbar) * (y - ybar);\n+            xbar += (1d / (double) (n + 1)) * (x - xbar);\n+            ybar += (1d / (double) (n + 1)) * (y - ybar);\n+        }\n         sumX += x;\n-        sumSqX += x * x;\n         sumY += y;\n-        sumSqY += y * y;\n-        sumXY += x * y;\n         n++;\n     } \n     \n      */\n     public void clear() {\n         sumX = 0d;\n-        sumSqX = 0d;\n+        sumXX = 0d;\n         sumY = 0d;\n-        sumSqY = 0d;\n+        sumYY = 0d;\n         sumXY = 0d;\n         n = 0;\n     }\n      * <strong>Preconditions</strong>: <ul>\n      * <li>At least two observations (with at least two different x values)\n      * must have been added before invoking this method. If this method is \n-     * invoked before a model can be estimated, <code>Double,NaN</code> is\n+     * invoked before a model can be estimated, <code>Double.NaN</code> is\n      * returned.\n      * </li></ul>\n      *\n          if (n < 2) {\n              return Double.NaN;  //not enough data \n          }\n-         double dn = (double) n;\n-         double denom = sumSqX - (sumX * sumX / dn);\n-         if (Math.abs(denom) < 10 * Double.MIN_VALUE) { \n+         if (Math.abs(sumXX) < 10 * Double.MIN_VALUE) { \n              return Double.NaN; //not enough variation in x\n          }\n-         return (sumXY - (sumX * sumY / dn)) / denom;\n+         return sumXY / sumXX;\n      }\n      \n      /**\n          if (n < 2) {\n              return Double.NaN;\n          }\n-         return sumSqY - sumY * sumY / (double) n;\n+         return sumYY;\n      }\n          \n      /**\n       * returned.\n       * </li></ul>\n       *\n-      * @return sum of squared deviations of y values\n+      * @return sum of squared deviations of predicted y values\n       */\n      public double getRegressionSumSquares() {\n-         double b1 = getSlope();\n-         return b1 * (sumXY - sumX * sumY / (double) n);\n+         return getRegressionSumSquares(getSlope());\n      }\n      \n      /**\n          if (n < 3) {\n              return Double.NaN;\n          }\n-         double sse = getSumSquaredErrors();\n-         return sse / (double) (n - 2);\n+         return getSumSquaredErrors() / (double) (n - 2);\n      }\n      \n      /**\n       * @return standard error associated with intercept estimate\n       */\n      public double getInterceptStdErr() {\n-         double ssx = getSumSquaresX();\n-         return Math.sqrt(getMeanSquareError() * sumSqX / (((double) n) * ssx));\n+         return Math.sqrt(getMeanSquareError() * ((1d / (double) n) +\n+            (xbar * xbar) / sumXX));\n      }\n              \n      /**\n       * @return standard error associated with slope estimate\n       */\n      public double getSlopeStdErr() {\n-         double ssx = getSumSquaresX();\n-         return Math.sqrt(getMeanSquareError() / ssx);\n+         return Math.sqrt(getMeanSquareError() / sumXX);\n      }\n      \n      /**\n       * @return sum of squared errors associated with the regression model\n       */\n      private double getSumSquaredErrors(double b1) {\n-         double b0 = getIntercept(b1);\n-         return sumSqY - b0 * sumY - b1 * sumXY;\n+         return sumYY - sumXY * sumXY / sumXX;\n      } \n-     \n-     /**\n-      * Returns the sum of squared deviations of the x values about their mean.\n-      * <p>\n-      * If n < 2, this returns NaN.\n-      *\n-      * @return sum of squared deviations of x values\n-      */\n-     private double getSumSquaresX() {\n-         if (n < 2) {\n-             return Double.NaN;\n-         }\n-         return sumSqX - sumX * sumX / (double) n;\n-     }\n      \n      /** \n       * Computes r-square from the slope.\n      }\n      \n      /**\n+      * Computes SSR from b1.\n+      * \n+      * @param slope regression slope estimate\n+      * @return sum of squared deviations of predicted y values\n+      */\n+     private double getRegressionSumSquares(double slope) {\n+         return slope * slope * sumXX;\n+     }\n+     \n+     /**\n       * Uses distribution framework to get a t distribution instance \n       * with df = n - 2\n       *\n--- a/src/test/org/apache/commons/math/stat/BivariateRegressionTest.java\n+++ b/src/test/org/apache/commons/math/stat/BivariateRegressionTest.java\n  * Test cases for the TestStatistic class.\n  *\n  * @author Phil Steitz\n- * @version $Revision: 1.2 $ $Date: 2003/06/11 03:33:05 $\n+ * @version $Revision: 1.3 $ $Date: 2003/06/21 02:13:41 $\n  */\n \n public final class BivariateRegressionTest extends TestCase {\n        assertEquals(\"r-square\",0.999993745883712,\n             regression.getRSquare(),10E-12);\n        assertEquals(\"SSR\",4255954.13232369, \n-            regression.getRegressionSumSquares(),10E-8);\n+            regression.getRegressionSumSquares(),10E-9);\n        assertEquals(\"MSE\",0.782864662630069, \n-            regression.getMeanSquareError(),10E-8);\n+            regression.getMeanSquareError(),10E-10);\n        assertEquals(\"SSE\",26.6173985294224, \n-            regression.getSumSquaredErrors(),10E-8);\n+            regression.getSumSquaredErrors(),10E-9);\n        assertEquals(\"predict(0)\",-0.262323073774029,\n             regression.predict(0),10E-12);\n        assertEquals(\"predict(1)\",1.00211681802045-0.262323073774029,\n-            regression.predict(1),10E-11);\n+            regression.predict(1),10E-12);\n     }\n     \n     public void testCorr() {", "timestamp": 1056161621, "metainfo": ""}