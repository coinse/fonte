{"sha": "381176fdafa492b89b9d628f36d1fb61d62dac5b", "log": "MATH-447 New \"MathRuntimeException\" base class. \"MathUserException\" shares the same functionality (and thus is made a subclass of the former).   ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.exception;\n+\n+import java.util.Locale;\n+\n+import org.apache.commons.math.exception.util.ArgUtils;\n+import org.apache.commons.math.exception.util.Localizable;\n+import org.apache.commons.math.exception.util.MessageFactory;\n+\n+/**\n+ * This class is intended as a base class for exceptions that must wrap\n+ * low-level exceptions in order to propagate an exception that better\n+ * corresponds to the high-level action that triggered the problem.\n+ *\n+ * @since 3.0\n+ * @version $Revision$ $Date$\n+ */\n+public class MathRuntimeException extends RuntimeException\n+    implements MathThrowable {\n+    /** Serializable version Id. */\n+    private static final long serialVersionUID = -6024911025449780478L;\n+    /**\n+     * Pattern used to build the specific part of the message (problem description).\n+     */\n+    private final Localizable specific;\n+    /**\n+     * Pattern used to build the general part of the message (problem description).\n+     */\n+    private final Localizable general;\n+    /**\n+     * Arguments used to build the message.\n+     */\n+    private final Object[] arguments;\n+\n+    /**\n+     * Builds an exception from two patterns (specific and general) and\n+     * an argument list.\n+     *\n+     * @param cause Cause of the error (may be null).\n+     * @param specific Format specifier for the specific part (may be null).\n+     * @param general Format specifier for the general part (may be null).\n+     * @param arguments Format arguments. They will be substituted in\n+     * <em>both</em> the {@code general} and {@code specific} format specifiers.\n+     */\n+    protected MathRuntimeException(final Throwable cause,\n+                                   final Localizable specific,\n+                                   final Localizable general,\n+                                   final Object ... arguments) {\n+        super(cause);\n+        this.specific = specific;\n+        this.general = general;\n+        this.arguments = ArgUtils.flatten(arguments);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public Localizable getSpecificPattern() {\n+        return specific;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public Localizable getGeneralPattern() {\n+        return general;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public Object[] getArguments() {\n+        return arguments.clone();\n+    }\n+\n+    /**\n+     * Get the message in a specified locale.\n+     *\n+     * @param locale Locale in which the message should be translated.\n+     * @return the localized message.\n+     */\n+    public String getMessage(final Locale locale) {\n+        return MessageFactory.buildMessage(locale, specific, general, arguments);\n+    }\n+\n+   /** {@inheritDoc} */\n+    @Override\n+    public String getMessage() {\n+        return getMessage(Locale.US);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public String getLocalizedMessage() {\n+        return getMessage(Locale.getDefault());\n+    }\n+}\n--- a/src/main/java/org/apache/commons/math/exception/MathUserException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathUserException.java\n \n import java.util.Locale;\n \n-import org.apache.commons.math.exception.util.ArgUtils;\n import org.apache.commons.math.exception.util.Localizable;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n-import org.apache.commons.math.exception.util.MessageFactory;\n \n /**\n  * This class is intended as a sort of communication channel between\n  * @since 2.2\n  * @version $Revision$ $Date$\n  */\n-public class MathUserException extends RuntimeException implements MathThrowable {\n+public class MathUserException extends MathRuntimeException {\n     /** Serializable version Id. */\n     private static final long serialVersionUID = -6024911025449780478L;\n-    /**\n-     * Pattern used to build the specific part of the message (problem description).\n-     */\n-    private final Localizable specific;\n-    /**\n-     * Pattern used to build the general part of the message (problem description).\n-     */\n-    private final Localizable general;\n-    /**\n-     * Arguments used to build the message.\n-     */\n-    private final Object[] arguments;\n \n     /**\n      * Build an exception with a default message.\n     public MathUserException(final Throwable cause,\n                              final Localizable specific, final Localizable general,\n                              final Object ... arguments) {\n-        super(cause);\n-        this.specific  = specific;\n-        this.general   = general;\n-        this.arguments = ArgUtils.flatten(arguments);\n-    }\n-\n-    /** {@inheritDoc} */\n-    public Localizable getSpecificPattern() {\n-        return specific;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public Localizable getGeneralPattern() {\n-        return general;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public Object[] getArguments() {\n-        return arguments.clone();\n-    }\n-\n-    /**\n-     * Get the message in a specified locale.\n-     *\n-     * @param locale Locale in which the message should be translated.\n-     * @return the localized message.\n-     */\n-    public String getMessage(final Locale locale) {\n-        return MessageFactory.buildMessage(locale, specific, general, arguments);\n-    }\n-\n-   /** {@inheritDoc} */\n-    @Override\n-    public String getMessage() {\n-        return getMessage(Locale.US);\n-    }\n-\n-    /** {@inheritDoc} */\n-    @Override\n-    public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        super(cause, specific, general, arguments);\n     }\n }", "timestamp": 1291157834, "metainfo": ""}