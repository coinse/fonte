{"sha": "4456d90840a829fbe09fe506ab5e78288dc2f591", "log": "Application of \"apply(Functor x)\" strategy (thank you Al Chou) for evaluating UnivariateStatistics against the internal storage collection without exposing the collection or its bounds.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java\n+++ b/src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java\n \n /**\n  * Provides univariate measures for an array of doubles. \n- * @version $Revision: 1.9 $ $Date: 2003/07/09 21:45:23 $\n+ * @version $Revision: 1.10 $ $Date: 2003/07/15 03:45:10 $\n  */\n public abstract class AbstractStoreUnivariate\n     extends AbstractUnivariate\n      */\n     public double getPercentile(double p) {\n         percentile.setPercentile(p);\n-        return percentile.evaluate(this.getValues(), this.start(), this.size());\n+        return apply(percentile);\n     }\n     \n     /**\n--- a/src/java/org/apache/commons/math/stat/AbstractUnivariate.java\n+++ b/src/java/org/apache/commons/math/stat/AbstractUnivariate.java\n  */\n package org.apache.commons.math.stat;\n \n+import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n import org.apache.commons.math.stat.univariate.moment.FourthMoment;\n import org.apache.commons.math.stat.univariate.moment.GeometricMean;\n import org.apache.commons.math.stat.univariate.moment.Kurtosis;\n \n /**\n  * Provides univariate measures for an array of doubles.\n- * @version $Revision: 1.1 $ $Date: 2003/07/09 21:45:23 $  \n+ * @version $Revision: 1.2 $ $Date: 2003/07/15 03:45:10 $  \n  */\n public abstract class AbstractUnivariate implements Univariate {\n \n         setWindowSize(window);\n     }\n \n-    /**\n-     * Returns the internalValues array.\n-     * @return the array\n-     */\n-    protected abstract double[] internalValues();\n-\n-    /**\n-     * Returns the start index of the array\n-     * @return start index\n-     */\n-    protected abstract int start();\n-\n-    /**\n-     * Returns the size of the array appropriate for doing calculations.\n-     * @return Usually this is just numElements.\n-     */\n-    protected abstract int size();\n+    public abstract double apply(UnivariateStatistic stat);\n+    \n \n     /**\n      * If windowSize is set to Infinite, \n      * @see org.apache.commons.math.stat.Univariate#getSum()\n      */\n     public double getSum() {\n-        double[] v = internalValues();\n-        if (v != null) {\n-            return sum.evaluate(v, this.start(), this.size());\n-        }\n-\n-        return sum.getResult();\n+        return apply(sum);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.Univariate#getSumsq()\n      */\n     public double getSumsq() {\n-        double[] v = internalValues();\n-        if (v != null) {\n-            return sumsq.evaluate(v, this.start(), this.size());\n-        }\n-\n-        return sumsq.getResult();\n+        return apply(sumsq);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.Univariate#getMean()\n      */\n     public double getMean() {\n-        double[] v = internalValues();\n-        if (v != null) {\n-            return mean.evaluate(v, this.start(), this.size());\n-        }\n-\n-        return mean.getResult();\n+        return apply(mean);\n     }\n \n     /**\n      *         a &lt;= 1 value set.\n      */\n     public double getVariance() {\n-        double[] v = internalValues();\n-        if (v != null) {\n-            return variance.evaluate(v, this.start(), this.size());\n-        }\n-\n-        return variance.getResult();\n+        return apply(variance);\n     }\n \n     /**\n      *         &lt;= 2 value set.\n      */\n     public double getSkewness() {\n-        double[] v = internalValues();\n-        if (v != null) {\n-            return skewness.evaluate(v, this.start(), this.size());\n-        }\n-\n-        return skewness.getResult();\n+        return apply(skewness);\n     }\n \n     /**\n      *         value set.\n      */\n     public double getKurtosis() {\n-        double[] v = internalValues();\n-        if (v != null) {\n-            return kurtosis.evaluate(v, this.start(), this.size());\n-        }\n-\n-        return kurtosis.getResult();\n+        return apply(kurtosis);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.Univariate#getMax()\n      */\n     public double getMax() {\n-        double[] v = internalValues();\n-        if (v != null) {\n-            return max.evaluate(v, this.start(), this.size());\n-        }\n-\n-        return max.getResult();\n+        return apply(max);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.Univariate#getMin()\n      */\n     public double getMin() {\n-        double[] v = internalValues();\n-        if (v != null) {\n-            return min.evaluate(v, this.start(), this.size());\n-        }\n-\n-        return min.getResult();\n+        return apply(min);\n     }\n \n     /**\n     * @see org.apache.commons.math.stat.Univariate#getGeometricMean()\n     */\n     public double getGeometricMean() {\n-        double[] v = internalValues();\n-        if (v != null) {\n-            return geoMean.evaluate(v, this.start(), this.size());\n-        }\n-\n-        return geoMean.getResult();\n-    }\n-\n+        return apply(geoMean);\n+    }\n+    \n     /**\n      * Generates a text report displaying\n      * univariate statistics from values that\n--- a/src/java/org/apache/commons/math/stat/ListUnivariateImpl.java\n+++ b/src/java/org/apache/commons/math/stat/ListUnivariateImpl.java\n package org.apache.commons.math.stat;\n \n import java.util.List;\n+\n+import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n import org.apache.commons.math.util.DefaultTransformer;\n import org.apache.commons.math.util.NumberTransformer;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2003/07/09 21:45:23 $\n+ * @version $Revision: 1.4 $ $Date: 2003/07/15 03:45:10 $\n  */\n public class ListUnivariateImpl\n     extends AbstractStoreUnivariate\n         super.clear();\n         list.clear();\n     }\n-\n-    /**\n-     * @see org.apache.commons.math.stat.AbstractUnivariate#internalValues()\n-     */\n-    protected double[] internalValues() {\n-        return getValues();\n-    }\n-\n-    /**\n-     * @see org.apache.commons.math.stat.AbstractUnivariate#start()\n-     */\n-    protected int start() {\n-        return 0;\n-    }\n-\n-    /**\n-     * @see org.apache.commons.math.stat.AbstractUnivariate#size()\n-     */\n-    protected int size() {\n-        return getN();\n-    }\n+    \n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.AbstractUnivariate#apply(org.apache.commons.math.stat.univariate.UnivariateStatistic)\n+     */\n+    public double apply(UnivariateStatistic stat) {\n+        double[] v = this.getValues();\n+\n+        if (v != null) {\n+            return stat.evaluate(v, 0, v.length);\n+        }\n+        return Double.NaN;\n+    }\n+    \n     /**\n      * @return\n      */\n--- a/src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java\n+++ b/src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java\n  */\n package org.apache.commons.math.stat;\n \n+import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n import org.apache.commons.math.util.ContractableDoubleArray;\n \n /**\n- * @version $Revision: 1.4 $ $Date: 2003/07/09 21:45:23 $\n+ * @version $Revision: 1.5 $ $Date: 2003/07/15 03:45:10 $\n  */\n public class StoreUnivariateImpl extends AbstractStoreUnivariate {\n \n         }\n     }\n \n-    /**\n-     * @see org.apache.commons.math.stat.AbstractUnivariate#internalValues()\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.AbstractUnivariate#apply(org.apache.commons.math.stat.univariate.UnivariateStatistic)\n      */\n-    protected double[] internalValues() {\n-        return eDA.getValues();\n-    }\n-\n-    /**\n-     * @see org.apache.commons.math.stat.AbstractUnivariate#start()\n-     */\n-    protected int start() {\n-        return eDA.start();\n-    }\n-\n-    /**\n-     * @see org.apache.commons.math.stat.AbstractUnivariate#size()\n-     */\n-    protected int size() {\n-        return eDA.getNumElements();\n+    public double apply(UnivariateStatistic stat) {\n+        if (eDA != null) {\n+            return stat.evaluate(eDA.getValues(), eDA.start(), eDA.getNumElements());\n+        }\n+        return Double.NaN;\n     }\n }\n--- a/src/java/org/apache/commons/math/stat/UnivariateImpl.java\n+++ b/src/java/org/apache/commons/math/stat/UnivariateImpl.java\n package org.apache.commons.math.stat;\n \n import java.io.Serializable;\n+\n+import org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic;\n+import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n import org.apache.commons.math.util.FixedDoubleArray;\n \n /**\n  * Integers, floats and longs can be added, but they will be converted\n  * to doubles by addValue().\n  *\n- * @version $Revision: 1.18 $ $Date: 2003/07/09 21:45:23 $\n+ * @version $Revision: 1.19 $ $Date: 2003/07/15 03:45:10 $\n */\n public class UnivariateImpl\n     extends AbstractUnivariate\n             sumsq.increment(value);\n             sumLog.increment(value);\n             geoMean.increment(value);\n-            \n+\n             moment.increment(value);\n             //mean.increment(value);\n             //variance.increment(value);\n         }\n     }\n \n-    /**\n-     * @see org.apache.commons.math.stat.AbstractUnivariate#internalValues()\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.AbstractUnivariate#apply(org.apache.commons.math.stat.univariate.UnivariateStatistic)\n      */\n-    protected double[] internalValues() {\n-        return storage == null ? null : storage.getValues();\n-    }\n+    public double apply(UnivariateStatistic stat) {\n+        \n+        if (storage != null) {\n+            return stat.evaluate(storage.getValues(), storage.start(), storage.getNumElements());\n+        } else if (stat instanceof StorelessUnivariateStatistic) {\n+            return ((StorelessUnivariateStatistic) stat).getResult();\n+        }\n \n-    /**\n-     * @see org.apache.commons.math.stat.AbstractUnivariate#start()\n-     */\n-    protected int start() {\n-        return storage.start();\n-    }\n-\n-    /**\n-     * @see org.apache.commons.math.stat.AbstractUnivariate#size()\n-     */\n-    protected int size() {\n-        return storage.getNumElements();\n+        return Double.NaN;\n     }\n \n }", "timestamp": 1058240710, "metainfo": ""}