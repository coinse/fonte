{"sha": "58a688f6ea638ce6ee49e62635d454c51473e3b0", "log": "Fixed inconsistent access to multidimensional array in FastFourierTransformer  ", "commit": "\n--- a/src/java/org/apache/commons/math/transform/FastFourierTransformer.java\n+++ b/src/java/org/apache/commons/math/transform/FastFourierTransformer.java\n         private static final long serialVersionUID =  0x564FCD47EBA8169BL;\n \n         /** Size in all dimensions. */\n-        protected int[] dimensionSize = new int[1];\n+        protected int[] dimensionSize;\n \n         /** Storage array. */\n         protected Object multiDimensionalComplexArray;\n         /** Simple constructor.\n          * @param multiDimensionalComplexArray array containing the matrix elements\n          */\n-        public MultiDimensionalComplexMatrix(Object\n-                                             multiDimensionalComplexArray) {\n+        public MultiDimensionalComplexMatrix(Object multiDimensionalComplexArray) {\n+\n             this.multiDimensionalComplexArray = multiDimensionalComplexArray;\n+\n+            // count dimensions\n             int numOfDimensions = 0;\n-            \n-            Object lastDimension = multiDimensionalComplexArray;\n-            while(lastDimension instanceof Object[]) {\n+            for (Object lastDimension = multiDimensionalComplexArray;\n+                 lastDimension instanceof Object[];) {\n+                final Object[] array = (Object[]) lastDimension;\n                 numOfDimensions++;\n-                //manually implement variable size int[]\n-                if (dimensionSize.length < numOfDimensions) {\n-                    int[] newDimensionSize = new int[(int) Math.ceil(\n-                            dimensionSize.length*1.6)];\n-                    System.arraycopy(dimensionSize, 0, newDimensionSize, 0,\n-                                     dimensionSize.length);\n-                    dimensionSize = newDimensionSize;\n-                }\n-                dimensionSize[numOfDimensions - 1] = ((Object[])\n-                                                      lastDimension).length;\n-                lastDimension = ((Object[]) lastDimension)[0];\n-            }\n-            if (dimensionSize.length > numOfDimensions) {\n-                int[] newDimensionSize = new int[numOfDimensions];\n-                System.arraycopy(dimensionSize, 0, newDimensionSize, 0,\n-                                 numOfDimensions);\n-                dimensionSize = newDimensionSize;\n-            }\n+                lastDimension = array[0];\n+            }\n+\n+            // allocate array with exact count\n+            dimensionSize = new int[numOfDimensions];\n+\n+            // fill array\n+            numOfDimensions = 0;\n+            for (Object lastDimension = multiDimensionalComplexArray;\n+                 lastDimension instanceof Object[];) {\n+                final Object[] array = (Object[]) lastDimension;\n+                dimensionSize[numOfDimensions++] = array.length;\n+                lastDimension = array[0];\n+            }\n+\n         }\n \n         /**\n          */\n         public Complex get(int... vector)\n             throws IllegalArgumentException {\n-            if (vector == null && dimensionSize.length > 1) {\n-                throw MathRuntimeException.createIllegalArgumentException(\n-                        \"some dimensions don't match: {0} != {1}\",\n-                        0, dimensionSize.length);\n-            }\n-            if (vector != null && vector.length != dimensionSize.length) {\n+            if (vector == null) {\n+                if (dimensionSize.length > 0) {\n+                    throw MathRuntimeException.createIllegalArgumentException(\n+                            \"some dimensions don't match: {0} != {1}\",\n+                            0, dimensionSize.length);\n+                }\n+                return null;\n+            }\n+            if (vector.length != dimensionSize.length) {\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"some dimensions don't match: {0} != {1}\",\n                         vector.length, dimensionSize.length);\n         public Complex set(Complex magnitude, int... vector)\n             throws IllegalArgumentException {\n             if (vector == null) {\n-                if (dimensionSize.length > 1) {\n+                if (dimensionSize.length > 0) {\n                     throw MathRuntimeException.createIllegalArgumentException(\n                             \"some dimensions don't match: {0} != {1}\",\n                             0, dimensionSize.length);", "timestamp": 1238956712, "metainfo": ""}