{"sha": "1e42e6b3f535d945eae79689e90f6e9d656b0837", "log": "Remove Serializable from some tranient analitics classes.  Let me know if I've nuked ur favorite one, and I can put it back   ", "commit": "\n--- a/src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java\n+++ b/src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java\n \n package org.apache.commons.math;\n \n-import java.io.Serializable;\n \n /**\n  * Provide a default implementation for several functions useful to generic\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public abstract class ConvergingAlgorithmImpl implements ConvergingAlgorithm, Serializable {\n-\n-    /**\n-     *  Serialization UID.\n-     */\n-    private static final long serialVersionUID = 1L;\n+public abstract class ConvergingAlgorithmImpl implements ConvergingAlgorithm{\n \n     /** Maximum absolute error. */\n     protected double absoluteAccuracy;\n--- a/src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java\n+++ b/src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java\n \n public class LegendreGaussIntegrator extends UnivariateRealIntegratorImpl {\n \n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = -331962723352824098L;\n-\n     /** Abscissas for the 2 points method. */\n     private static final double[] ABSCISSAS_2 = {\n         -1.0 / Math.sqrt(3.0),\n--- a/src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java\n+++ b/src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java\n  * @since 1.2\n  */\n public class RombergIntegrator extends UnivariateRealIntegratorImpl {\n-\n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = 4616482344304576900L;\n \n     /**\n      * Construct an integrator for the given function.\n--- a/src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java\n+++ b/src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java\n  * @since 1.2\n  */\n public class SimpsonIntegrator extends UnivariateRealIntegratorImpl {\n-\n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = 2535890386567281329L;\n \n     /**\n      * Construct an integrator for the given function.\n--- a/src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java\n+++ b/src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java\n  * @since 1.2\n  */\n public class TrapezoidIntegrator extends UnivariateRealIntegratorImpl {\n-\n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = 6963842845860399200L;\n \n     /** Intermediate result. */\n     private double s;\n--- a/src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java\n  */\n package org.apache.commons.math.analysis.polynomials;\n \n-import java.io.Serializable;\n-\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class PolynomialFunction implements DifferentiableUnivariateRealFunction, Serializable {\n-\n-    /** Serializable version identifier */\n-    private static final long serialVersionUID = -7726511984200295583L;\n+public class PolynomialFunction implements DifferentiableUnivariateRealFunction {\n \n     /**\n      * The coefficients of the polynomial, ordered by degree -- i.e.,  \n--- a/src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java\n+++ b/src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java\n  */\n package org.apache.commons.math.analysis.polynomials;\n \n-import java.io.Serializable;\n-\n import org.apache.commons.math.DuplicateSampleAbscissaException;\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.MathRuntimeException;\n  * @version $Revision$ $Date$\n  * @since 1.2\n  */\n-public class PolynomialFunctionLagrangeForm implements UnivariateRealFunction,\n-    Serializable {\n-\n-    /** serializable version identifier */\n-    static final long serialVersionUID = -3965199246151093920L;\n+public class PolynomialFunctionLagrangeForm implements UnivariateRealFunction {\n \n     /**\n      * The coefficients of the polynomial, ordered by degree -- i.e.\n--- a/src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java\n+++ b/src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java\n  */\n package org.apache.commons.math.analysis.polynomials;\n \n-import java.io.Serializable;\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n  * @version $Revision$ $Date$\n  * @since 1.2\n  */\n-public class PolynomialFunctionNewtonForm implements UnivariateRealFunction,\n-    Serializable {\n-\n-    /** serializable version identifier */\n-    static final long serialVersionUID = -3353896576191389897L;\n+public class PolynomialFunctionNewtonForm implements UnivariateRealFunction {\n \n     /**\n      * The coefficients of the polynomial, ordered by degree -- i.e.\n--- a/src/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java\n  */\n package org.apache.commons.math.analysis.polynomials;\n \n-import java.io.Serializable;\n import java.util.Arrays;\n \n import org.apache.commons.math.ArgumentOutsideDomainException;\n  * @version $Revision$ $Date$\n  */\n public class PolynomialSplineFunction \n-    implements DifferentiableUnivariateRealFunction, Serializable {\n-\n-    /** Serializable version identifier */\n-    private static final long serialVersionUID = 1619940313389547244L;\n+    implements DifferentiableUnivariateRealFunction {\n \n     /** Spline segment interval delimiters (knots).   Size is n+1 for n segments. */\n     private double knots[];\n--- a/src/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n  */\n package org.apache.commons.math.analysis.solvers;\n \n-import java.io.Serializable;\n-\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.MaxIterationsExceededException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n  * \n  * @version $Revision$ $Date$\n  */\n-public class BisectionSolver extends UnivariateRealSolverImpl implements Serializable {\n+public class BisectionSolver extends UnivariateRealSolverImpl {\n     \n-    /** Serializable version identifier */\n-    private static final long serialVersionUID = 5227509383222989438L;\n-\n     /**\n      * Construct a solver for the given function.\n      * \n--- a/src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java\n  */\n package org.apache.commons.math.analysis.solvers;\n \n-import java.io.Serializable;\n-\n import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.MathRuntimeException;\n  * @version $Revision$ $Date$\n  * @since 1.2\n  */\n-public class LaguerreSolver extends UnivariateRealSolverImpl implements Serializable {\n-\n-    /** serializable version identifier */\n-    private static final long serialVersionUID = -3775334783473775723L;\n-\n+public class LaguerreSolver extends UnivariateRealSolverImpl {\n     /** polynomial function to solve.\n      * @deprecated as of 2.0 the function is not stored anymore in the instance\n      */\n--- a/src/java/org/apache/commons/math/analysis/solvers/MullerSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/MullerSolver.java\n  */\n package org.apache.commons.math.analysis.solvers;\n \n-import java.io.Serializable;\n-\n import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.MaxIterationsExceededException;\n  * @version $Revision$ $Date$\n  * @since 1.2\n  */\n-public class MullerSolver extends UnivariateRealSolverImpl implements Serializable {\n-\n-    /** serializable version identifier */\n-    private static final long serialVersionUID = 7768903775784754323L;\n+public class MullerSolver extends UnivariateRealSolverImpl {\n \n     /**\n      * Construct a solver for the given function.\n--- a/src/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java\n \n package org.apache.commons.math.analysis.solvers;\n \n-import java.io.Serializable;\n-\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.MaxIterationsExceededException;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class NewtonSolver extends UnivariateRealSolverImpl implements Serializable {\n+public class NewtonSolver extends UnivariateRealSolverImpl {\n     \n-    /** Serializable version identifier */\n-    private static final long serialVersionUID = 7579593514004764309L;\n-\n     /**\n      * Construct a solver for the given function.\n      * @param f function to solve.\n--- a/src/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java\n  * limitations under the License.\n  */\n package org.apache.commons.math.analysis.solvers;\n-\n-import java.io.Serializable;\n \n import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.FunctionEvaluationException;\n  * @version $Revision$ $Date$\n  * @since 1.2\n  */\n-public class RiddersSolver extends UnivariateRealSolverImpl implements Serializable {\n-\n-    /** serializable version identifier */\n-    private static final long serialVersionUID = -1556464494585337088L;\n+public class RiddersSolver extends UnivariateRealSolverImpl {\n \n     /**\n      * Construct a solver for the given function.\n--- a/src/java/org/apache/commons/math/analysis/solvers/SecantSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/SecantSolver.java\n  * limitations under the License.\n  */\n package org.apache.commons.math.analysis.solvers;\n-\n-import java.io.Serializable;\n \n import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.FunctionEvaluationException;\n  *  \n  * @version $Revision$ $Date$\n  */\n-public class SecantSolver extends UnivariateRealSolverImpl implements Serializable {\n+public class SecantSolver extends UnivariateRealSolverImpl {\n     \n-    /** Serializable version identifier */\n-    private static final long serialVersionUID = 2477470651270304246L;\n-\n     /**\n      * Construct a solver for the given function.\n      * @param f function to solve.\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\n public abstract class UnivariateRealSolverImpl\n     extends ConvergingAlgorithmImpl implements UnivariateRealSolver {\n \n-    /** Serializable version ID. */\n-    private static final long serialVersionUID = 1L;\n-\n     /** Maximum error of function. */\n     protected double functionValueAccuracy;\n \n--- a/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n         // subclasses can overide if there is a better method.\n         UnivariateRealFunction rootFindingFunction =\n             new UnivariateRealFunction() {\n-            private static final long serialVersionUID = 1043729002768873023L;\n             public double value(double x) throws FunctionEvaluationException {\n                 try {\n                     return cumulativeProbability(x) - p;\n--- a/src/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java\n+++ b/src/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java\n  */\n \n package org.apache.commons.math.ode;\n-\n-import java.io.Serializable;\n \n /** This interface represents a second order differential equations set.\n \n  * @since 1.2\n  */\n \n-public interface SecondOrderDifferentialEquations extends Serializable {\n+public interface SecondOrderDifferentialEquations {\n \n   /** Get the dimension of the problem.\n    * @return dimension of the problem\n--- a/src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java\n+++ b/src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java\n  */\n \n package org.apache.commons.math.optimization.general;\n-\n-import java.io.Serializable;\n \n import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.FunctionEvaluationException;\n \n public class NonLinearConjugateGradientOptimizer\n     extends AbstractScalarDifferentiableOptimizer\n-    implements DifferentiableMultivariateRealOptimizer, Serializable {\n-\n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = -6545223926568155458L;\n+    implements DifferentiableMultivariateRealOptimizer {\n \n     /** Update formula for the beta parameter. */\n     private final ConjugateGradientFormula updateFormula;\n     }\n \n     /** Default identity preconditioner. */\n-    private static class IdentityPreconditioner implements Preconditioner, Serializable {\n-\n-        /** Serializable version identifier. */\n-        private static final long serialVersionUID = 1868235977809734023L;\n+    private static class IdentityPreconditioner implements Preconditioner {\n \n         /** {@inheritDoc} */\n         public double[] precondition(double[] variables, double[] r) {\n      * extremum along the search direction.\n      * </p>\n      */\n-    private class LineSearchFunction implements UnivariateRealFunction, Serializable {\n-        // TODO: Add Serializable documentation\n-        // TODO: Check Serializable implementation\n-\n-        /** Serializable version identifier. */\n-        private static final long serialVersionUID = 8184683950487801424L;\n-\n+    private class LineSearchFunction implements UnivariateRealFunction {\n         /** Search direction. */\n         private final double[] searchDirection;\n \n--- a/src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java\n+++ b/src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java\n  */\n public abstract class AbstractUnivariateRealOptimizer\n     extends ConvergingAlgorithmImpl implements UnivariateRealOptimizer {\n-\n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = 4543031162377070699L;\n \n     /** Indicates where a root has been computed. */\n     protected boolean resultComputed;\n--- a/src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java\n+++ b/src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java\n  */\n public class BrentOptimizer extends AbstractUnivariateRealOptimizer {\n     \n-    /** Serializable version identifier */\n-    private static final long serialVersionUID = 7185472920191999565L;\n-\n     /**\n      * Golden section.\n      */\n--- a/src/test/org/apache/commons/math/analysis/Expm1Function.java\n+++ b/src/test/org/apache/commons/math/analysis/Expm1Function.java\n  */\n package org.apache.commons.math.analysis;\n \n-import java.io.Serializable;\n-\n import org.apache.commons.math.FunctionEvaluationException;\n \n /**\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Expm1Function implements DifferentiableUnivariateRealFunction, Serializable {\n-\n-    private static final long serialVersionUID = 1410052725961159179L;\n+public class Expm1Function implements DifferentiableUnivariateRealFunction {\n \n     public double value(double x) throws FunctionEvaluationException {\n         // Math.expm1() is available in jdk 1.5 but not in jdk 1.4.2.\n \n     public UnivariateRealFunction derivative() {\n         return new UnivariateRealFunction() {\n-            private static final long serialVersionUID = 5621329502844531460L;\n             public double value(double x) throws FunctionEvaluationException {\n                 return Math.exp(x);\n             }\n--- a/src/test/org/apache/commons/math/analysis/MonitoredFunction.java\n+++ b/src/test/org/apache/commons/math/analysis/MonitoredFunction.java\n  */\n package org.apache.commons.math.analysis;\n \n-import java.io.Serializable;\n-\n import org.apache.commons.math.FunctionEvaluationException;\n \n /**\n  *\n  * @version $Revision$ $Date$ \n  */\n-public class MonitoredFunction implements UnivariateRealFunction, Serializable {\n-\n-    private static final long serialVersionUID = -8403645545888892674L;\n+public class MonitoredFunction implements UnivariateRealFunction {\n \n     public MonitoredFunction(UnivariateRealFunction f) {\n         callsCount = 0;\n--- a/src/test/org/apache/commons/math/analysis/QuinticFunction.java\n+++ b/src/test/org/apache/commons/math/analysis/QuinticFunction.java\n  */\n package org.apache.commons.math.analysis;\n \n-import java.io.Serializable;\n-\n import org.apache.commons.math.FunctionEvaluationException;\n \n /**\n  *\n  * @version $Revision$ $Date$ \n  */\n-public class QuinticFunction implements DifferentiableUnivariateRealFunction, Serializable {\n-\n-    private static final long serialVersionUID = -8866263034920607152L;\n+public class QuinticFunction implements DifferentiableUnivariateRealFunction {\n \n     /* Evaluate quintic.\n      * @see org.apache.commons.math.UnivariateRealFunction#value(double)\n \n     public UnivariateRealFunction derivative() {\n         return new UnivariateRealFunction() {\n-            private static final long serialVersionUID = 5265867813333370L;\n             public double value(double x) throws FunctionEvaluationException {\n                 return (5*x*x-3.75)*x*x+0.25;\n             }\n--- a/src/test/org/apache/commons/math/analysis/SinFunction.java\n+++ b/src/test/org/apache/commons/math/analysis/SinFunction.java\n  * \n  * @version $Revision$ $Date$\n  */\n-public class SinFunction implements DifferentiableUnivariateRealFunction, Serializable {\n-\n-    private static final long serialVersionUID = 6422911699694536977L;\n+public class SinFunction implements DifferentiableUnivariateRealFunction {\n \n     /* Evaluate sinus fuction.\n      * @see org.apache.commons.math.UnivariateRealFunction#value(double)\n      */\n     public UnivariateRealFunction derivative() {\n         return new UnivariateRealFunction() {\n-            private static final long serialVersionUID = -309931502404170015L;\n             public double value(double x) throws FunctionEvaluationException {\n                 return Math.cos(x);\n             }\n--- a/src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java\n+++ b/src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java\n package org.apache.commons.math.analysis.solvers;\n \n import org.apache.commons.math.MathException;\n-import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.analysis.QuinticFunction;\n import org.apache.commons.math.analysis.SinFunction;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n         assertEquals(oldValue, solver.getRelativeAccuracy(), 1.0e-2);\n     }        \n     \n-    /**\n-     * Test Serialization and Recovery\n-     */\n-   public void testSerialization() throws MathException {\n-       UnivariateRealFunction f = (UnivariateRealFunction)TestUtils.serializeAndRecover(new QuinticFunction());\n-       double result;\n-       \n-       BisectionSolver solver = new BisectionSolver();\n-       UnivariateRealSolver solver2 = (UnivariateRealSolver)TestUtils.serializeAndRecover(solver);\n-       \n-       result = solver.solve(f, -0.2, 0.2);\n-       assertEquals(result, 0, solver.getAbsoluteAccuracy());\n-       assertEquals(solver2.solve(f, -0.2, 0.2), result, solver2.getAbsoluteAccuracy());\n-       \n-       result = solver.solve(f, -0.1, 0.3);\n-       assertEquals(result, 0, solver.getAbsoluteAccuracy());\n-       assertEquals(solver2.solve(f, -0.1, 0.3), result, solver2.getAbsoluteAccuracy());\n-       \n-       result = solver.solve(f, -0.3, 0.45);\n-       assertEquals(result, 0, solver.getAbsoluteAccuracy());\n-       assertEquals(solver2.solve(f, -0.3, 0.45), result, solver2.getAbsoluteAccuracy());\n-       \n-       result = solver.solve(f, 0.3, 0.7);\n-       assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n-       assertEquals(solver2.solve(f, 0.3, 0.7), result, solver2.getAbsoluteAccuracy());\n-       \n-       result = solver.solve(f, 0.2, 0.6);\n-       assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n-       assertEquals(solver2.solve(f, 0.2, 0.6), result, solver2.getAbsoluteAccuracy());\n-       \n-       result = solver.solve(f, 0.05, 0.95);\n-       assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n-       assertEquals(solver2.solve(f, 0.05, 0.95), result, solver2.getAbsoluteAccuracy());\n-       \n-       result = solver.solve(f, 0.85, 1.25);\n-       assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n-       assertEquals(solver2.solve(f, 0.85, 1.25), result, solver2.getAbsoluteAccuracy());\n-       \n-       result = solver.solve(f, 0.8, 1.2);\n-       assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n-       assertEquals(solver2.solve(f, 0.8, 1.2), result, solver2.getAbsoluteAccuracy());\n-       \n-       result = solver.solve(f, 0.85, 1.75);\n-       assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n-       assertEquals(solver2.solve(f, 0.85, 1.75), result, solver2.getAbsoluteAccuracy());\n-       \n-       result = solver.solve(f, 0.55, 1.45);\n-       assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n-       assertEquals(solver2.solve(f, 0.55, 1.45), result, solver2.getAbsoluteAccuracy());\n-       \n-       result = solver.solve(f, 0.85, 5);\n-       assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n-       assertEquals(solver2.solve(f, 0.85, 5), result, solver2.getAbsoluteAccuracy());\n-       \n-       /* Test Reset */\n-       double newValue = 1.0e-2;\n-       f = (UnivariateRealFunction)TestUtils.serializeAndRecover(new QuinticFunction());\n-       solver = new BisectionSolver();\n-       \n-       double oldValue = solver.getRelativeAccuracy();\n-       solver.setRelativeAccuracy(newValue);\n-       solver.resetRelativeAccuracy();\n-       assertEquals(oldValue, solver.getRelativeAccuracy(), 1.0e-2);\n-       \n-       solver2 = (UnivariateRealSolver)TestUtils.serializeAndRecover(solver); \n-       \n-       assertEquals(oldValue, solver2.getRelativeAccuracy(), 1.0e-2);\n-       \n-       solver2.setRelativeAccuracy(newValue);\n-       solver2.resetRelativeAccuracy();\n-       \n-       assertEquals(oldValue, solver2.getRelativeAccuracy(), 1.0e-2);\n-       \n-   }\n    \n }\n--- a/src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java\n+++ b/src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java\n package org.apache.commons.math.analysis.solvers;\n \n import org.apache.commons.math.MathException;\n-import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;\n import org.apache.commons.math.analysis.QuinticFunction;\n import org.apache.commons.math.analysis.SinFunction;\n         assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n     }\n     \n-    /**\n-     * Test Serialization and Recovery\n-     */\n-    public void testSerialization() throws MathException {\n-        DifferentiableUnivariateRealFunction f = new QuinticFunction();\n-        double result;\n-        \n-        NewtonSolver solver = new NewtonSolver();\n-        NewtonSolver solver2 = (NewtonSolver)TestUtils.serializeAndRecover(solver);\n-        \n-        result = solver.solve(f, -0.2, 0.2);\n-        assertEquals(result, 0, solver.getAbsoluteAccuracy());\n-        assertEquals(solver2.solve(f, -0.2, 0.2), result, solver2.getAbsoluteAccuracy());\n-        \n-        result = solver.solve(f, -0.1, 0.3);\n-        assertEquals(result, 0, solver.getAbsoluteAccuracy());\n-        assertEquals(solver2.solve(f, -0.1, 0.3), result, solver2.getAbsoluteAccuracy());\n-        \n-        result = solver.solve(f, -0.3, 0.45);\n-        assertEquals(result, 0, solver.getAbsoluteAccuracy());\n-        assertEquals(solver2.solve(f, -0.3, 0.45), result, solver2.getAbsoluteAccuracy());\n-        \n-        result = solver.solve(f, 0.3, 0.7);\n-        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n-        assertEquals(solver2.solve(f, 0.3, 0.7), result, solver2.getAbsoluteAccuracy());\n-        \n-        result = solver.solve(f, 0.2, 0.6);\n-        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n-        assertEquals(solver2.solve(f, 0.2, 0.6), result, solver2.getAbsoluteAccuracy());\n-        \n-        result = solver.solve(f, 0.05, 0.95);\n-        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n-        assertEquals(solver2.solve(f, 0.05, 0.95), result, solver2.getAbsoluteAccuracy());\n-        \n-        result = solver.solve(f, 0.85, 1.25);\n-        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n-        assertEquals(solver2.solve(f, 0.85, 1.25), result, solver2.getAbsoluteAccuracy());\n-        \n-        result = solver.solve(f, 0.8, 1.2);\n-        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n-        assertEquals(solver2.solve(f, 0.8, 1.2), result, solver2.getAbsoluteAccuracy());\n-        \n-        result = solver.solve(f, 0.85, 1.75);\n-        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n-        assertEquals(solver2.solve(f, 0.85, 1.75), result, solver2.getAbsoluteAccuracy());\n-        \n-        result = solver.solve(f, 0.55, 1.45);\n-        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n-        assertEquals(solver2.solve(f, 0.55, 1.45), result, solver2.getAbsoluteAccuracy());\n-        \n-        result = solver.solve(f, 0.85, 5);\n-        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n-        assertEquals(solver2.solve(f, 0.85, 5), result, solver2.getAbsoluteAccuracy());\n-        \n-        /* Test Reset */\n-        double newValue = 1.0e-2;\n-        f = new QuinticFunction();\n-        solver = new NewtonSolver();\n-        \n-        double oldValue = solver.getRelativeAccuracy();\n-        solver.setRelativeAccuracy(newValue);\n-        solver.resetRelativeAccuracy();\n-        assertEquals(oldValue, solver.getRelativeAccuracy(), 1.0e-2);\n-        \n-        solver2 = (NewtonSolver)TestUtils.serializeAndRecover(solver); \n-        \n-        assertEquals(oldValue, solver2.getRelativeAccuracy(), 1.0e-2);\n-        \n-        solver2.setRelativeAccuracy(newValue);\n-        solver2.resetRelativeAccuracy();\n-        \n-        assertEquals(oldValue, solver2.getRelativeAccuracy(), 1.0e-2);\n-        \n-    }\n }\n--- a/src/test/org/apache/commons/math/ode/FirstOrderConverterTest.java\n+++ b/src/test/org/apache/commons/math/ode/FirstOrderConverterTest.java\n   private static class Equations\n     implements SecondOrderDifferentialEquations {\n       \n-    private static final long serialVersionUID = -7926271579508637558L;\n-\n-    private int n;\n+     private int n;\n \n       private double omega2;\n       ", "timestamp": 1245541067, "metainfo": ""}