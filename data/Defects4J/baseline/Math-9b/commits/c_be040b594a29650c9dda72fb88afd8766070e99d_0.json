{"sha": "be040b594a29650c9dda72fb88afd8766070e99d", "log": "Fix typo and avoid computing an unused element.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java\n     /** Azimuthal angle in the x-y plane &theta;. */\n     private final double theta;\n \n-    /** Polar angle (co-latitude) &phi;. */\n+    /** Polar angle (co-latitude) &Phi;. */\n     private final double phi;\n \n-    /** Jacobian of (r, &theta; &phi). */\n+    /** Jacobian of (r, &theta; &Phi). */\n     private double[][] jacobian;\n \n     /** Hessian of radius. */\n \n     /** Build a spherical coordinates transformer from spherical coordinates.\n      * @param r radius\n-     * @param theta azimuthal angle in x-y place\n+     * @param theta azimuthal angle in x-y plane\n      * @param phi polar (co-latitude) angle\n      */\n     public SphericalCoordinates(final double r, final double theta, final double phi) {\n      * @param sGradient gradient with respect to spherical coordinates\n      * {df/dr, df/d&theta;, df/d&Phi;}\n      * @return Hessian with respect to Cartesian coordinates\n-     * {{d<sup>2</sup>f/dx<sup>2</sup>, d<sup>2</sup>f/rGradient.getY(), d<sup>2</sup>f/dxdz},\n+     * {{d<sup>2</sup>f/dx<sup>2</sup>, d<sup>2</sup>f/dxdy, d<sup>2</sup>f/dxdz},\n      *  {d<sup>2</sup>f/dxdy, d<sup>2</sup>f/dy<sup>2</sup>, d<sup>2</sup>f/dydz},\n      *  {d<sup>2</sup>f/dxdz, d<sup>2</sup>f/dydz, d<sup>2</sup>f/dz<sup>2</sup>}}\n      */\n         hj[0][2] = sHessian[0][0] * jacobian[0][2]                                   + sHessian[2][0] * jacobian[2][2];\n         hj[1][0] = sHessian[1][0] * jacobian[0][0] + sHessian[1][1] * jacobian[1][0] + sHessian[2][1] * jacobian[2][0];\n         hj[1][1] = sHessian[1][0] * jacobian[0][1] + sHessian[1][1] * jacobian[1][1] + sHessian[2][1] * jacobian[2][1];\n-        hj[1][2] = sHessian[1][0] * jacobian[0][2]                                   + sHessian[2][1] * jacobian[2][2];\n+        // don't compute hj[1][2] as it is not used below\n         hj[2][0] = sHessian[2][0] * jacobian[0][0] + sHessian[2][1] * jacobian[1][0] + sHessian[2][2] * jacobian[2][0];\n         hj[2][1] = sHessian[2][0] * jacobian[0][1] + sHessian[2][1] * jacobian[1][1] + sHessian[2][2] * jacobian[2][1];\n         hj[2][2] = sHessian[2][0] * jacobian[0][2]                                   + sHessian[2][2] * jacobian[2][2];", "timestamp": 1360229284, "metainfo": ""}