{"sha": "8992fc6a4ac6923cd1b4432eee8d00489a53018f", "log": "Removing BeanListUnivariate example from test cases. Improving ListUnivariate Serialization Example.   ", "commit": "\n--- /dev/null\n+++ b/src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java\n+/*\n+ * Copyright 2003-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.univariate;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.commons.beanutils.PropertyUtils;\n+import org.apache.commons.beanutils.DynaBean;\n+import org.apache.commons.beanutils.BasicDynaClass;\n+import org.apache.commons.beanutils.DynaProperty;\n+import org.apache.commons.math.MathException;\n+import org.apache.commons.math.util.NumberTransformer;\n+\n+/**\n+ * This implementation of DescriptiveStatistics uses commons-beanutils to gather\n+ * univariate statistics for a List of Java Beans by property.  This \n+ * implementation uses beanutils' PropertyUtils to get a simple, nested,\n+ * indexed, mapped, or combined property from an element of a List.\n+ * @version $Revision: 1.1 $ $Date: 2004/06/01 21:28:06 $\n+ */\n+public class BeanListUnivariateImpl extends ListUnivariateImpl implements Serializable {\n+\n+    /** Serializable version identifier */\n+    static final long serialVersionUID = -6428201899045406285L;\n+    \n+\t/**\n+\t * propertyName of the property to get from the bean\n+\t */\n+\tprivate String propertyName;\n+\n+\t/**\n+\t * No argument Constructor\n+\t */\n+\tpublic BeanListUnivariateImpl(){\n+\t    this(new ArrayList());\n+\t}\n+\t\n+\t/**\n+\t * Construct a BeanListUnivariate with specified\n+\t * backing list\n+\t * @param list Backing List\n+\t */\n+\tpublic BeanListUnivariateImpl(List list) {\n+\t\tthis(list, null);\n+\t}\n+\n+\t/**\n+\t * Construct a BeanListUnivariate with specified\n+\t * backing list and propertyName\n+\t * @param list Backing List\n+\t * @param propertyName Bean propertyName\n+\t */\n+\tpublic BeanListUnivariateImpl(List list, String propertyName) {\n+\t\tsuper(list);\n+\t\tsetPropertyName(propertyName);\n+\t}\n+\n+\t/**\n+\t * @return propertyName\n+\t */\n+\tpublic String getPropertyName() {\n+\t\treturn propertyName;\n+\t}\n+\n+\t/**\n+\t * @param propertyName Name of Property\n+\t */\n+\tpublic void setPropertyName(String propertyName) {\n+\t\tthis.propertyName = propertyName;\n+\t\tthis.transformer = new NumberTransformer() {\n+\n+\t\t\t/**\n+\t\t\t * @see org.apache.commons.math.util.NumberTransformer#transform(java.lang.Object)\n+\t\t\t */\n+\t\t\tpublic double transform(final Object o) throws MathException {\n+\t\t\t\ttry {\n+\t\t\t\t\treturn (\n+\t\t\t\t\t\t(Number) PropertyUtils.getProperty(\n+\t\t\t\t\t\t\to,\n+\t\t\t\t\t\t\tgetPropertyName()))\n+\t\t\t\t\t\t.doubleValue();\n+\t\t\t\t} catch (IllegalAccessException e) {\n+\t\t\t\t\tthrow new MathException(\n+\t\t\t\t\t\t\"IllegalAccessException in Transformation: \"\n+\t\t\t\t\t\t\t+ e.getMessage(),\n+\t\t\t\t\t\te);\n+\t\t\t\t} catch (InvocationTargetException e) {\n+\t\t\t\t\tthrow new MathException(\n+\t\t\t\t\t\t\"InvocationTargetException in Transformation: \"\n+\t\t\t\t\t\t\t+ e.getMessage(),\n+\t\t\t\t\t\te);\n+\t\t\t\t} catch (NoSuchMethodException e) {\n+\t\t\t\t\tthrow new MathException(\n+\t\t\t\t\t\t\"oSuchMethodException in Transformation: \"\n+\t\t\t\t\t\t\t+ e.getMessage(),\n+\t\t\t\t\t\te);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t};\n+\t}\n+\n+\t/**\n+\t  *  Creates a {@link org.apache.commons.beanutils.DynaBean} with a \n+\t  *  {@link org.apache.commons.beanutils.DynaProperty} named \n+\t  *  <code>propertyName,</code> sets the value of the property to <code>v</code>\n+\t  *  and adds the DynaBean to the underlying list.\n+\t  *\n+\t  */\n+\tpublic void addValue(double v)  {\n+\t    DynaProperty[] props = new DynaProperty[] {\n+\t            new DynaProperty(propertyName, Double.class)\n+\t    };\n+\t    BasicDynaClass dynaClass = new BasicDynaClass(null, null, props);\n+\t    DynaBean dynaBean = null;\n+\t    try {\n+\t        dynaBean = dynaClass.newInstance();\n+\t    } catch (Exception ex) {              // InstantiationException, IllegalAccessException\n+\t        throw new RuntimeException(ex);   // should never happen\n+\t    }\n+\t\tdynaBean.set(propertyName, new Double(v));\n+\t\taddObject(dynaBean);\n+\t}\n+\n+\t/**\n+\t * Adds a bean to this list. \n+\t *\n+\t * @param bean Bean to add to the list\n+\t */\n+\tpublic void addObject(Object bean) {\n+\t\tlist.add(bean);\n+\t}\n+}\n--- /dev/null\n+++ b/src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java\n+/*\n+ * Copyright 2003-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.univariate;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.math.TestUtils;\n+import org.apache.commons.math.stat.StatUtils;\n+\n+/**\n+ * Test cases for the {@link BeanListUnivariateImpl} class.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2004/06/01 21:28:06 $\n+ */\n+\n+public final class BeanListUnivariateImplTest extends TestCase {\n+    \n+    private double one = 1;\n+    private float two = 2;\n+    private int three = 3;\n+    private double mean = 2;\n+    private double sumSq = 18;\n+    private double sum = 8;\n+    private double var = 0.666666666666666666667;\n+    private double std = Math.sqrt(var);\n+    private double n = 4;\n+    private double min = 1;\n+    private double max = 3;\n+    private double skewness = 0;\n+    private double kurtosis = 0.5;\n+    private double tolerance = 10E-15;\n+    \n+    \n+    private List patientList = null;\n+    \n+    public BeanListUnivariateImplTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() {  \n+        patientList = new ArrayList();\n+\n+        // Create and add patient bean 1\n+        VitalStats vs1 = new VitalStats( new Double(120.0), \n+                                         new Double(96.4) );\n+        Patient p1 = new Patient( vs1, new Integer( 35 ) );\n+        patientList.add( p1 );\n+\n+        // Create and add patient bean 2\n+        VitalStats vs2 = new VitalStats( new Double(70.0), \n+                                         new Double(97.4) );\n+        Patient p2 = new Patient( vs2, new Integer( 23 ) );\n+        patientList.add( p2 );\n+\n+        // Create and add patient bean 3\n+        VitalStats vs3 = new VitalStats( new Double(90.0), \n+                                         new Double(98.6) );\n+        Patient p3 = new Patient( vs3, new Integer( 42 ) );\n+        patientList.add( p3 );\n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(BeanListUnivariateImplTest.class);\n+        suite.setName(\"Frequency Tests\");\n+        return suite;\n+    }\n+    \n+    /** test stats */\n+    public void testStats() {\t\n+        DescriptiveStatistics u = new BeanListUnivariateImpl( patientList, \"age\" ); \n+        double[] values = {35d, 23d, 42d};\n+        assertEquals(\"total count\",3,u.getN(),tolerance);\n+        assertEquals(\"mean\", StatUtils.mean(values), u.getMean(), tolerance);\n+        assertEquals(\"min\", StatUtils.min(values), u.getMin(), tolerance);\n+        assertEquals(\"max\", StatUtils.max(values), u.getMax(), tolerance);\n+        assertEquals(\"var\", StatUtils.variance(values), u.getVariance(), tolerance);       \n+        u.clear();\n+        assertEquals(\"total count\",0,u.getN(),tolerance);    \n+    }   \n+    \n+    public void testPropStats() {\n+\n+        DescriptiveStatistics heartU = new BeanListUnivariateImpl( patientList,\n+                                          \"vitalStats.heartRate\" );       \n+\n+        assertEquals( \"Mean heart rate unexpected\", 93.333, \n+                      heartU.getMean(), 0.001 );\n+        assertEquals( \"Max heart rate unexpected\", 120.0, \n+                      heartU.getMax(), 0.001 );\n+\n+        DescriptiveStatistics ageU = new BeanListUnivariateImpl( patientList,\n+                                                           \"age\" );\n+\n+        assertEquals( \"Mean age unexpected\", 33.333,\n+                      ageU.getMean(), 0.001 );\n+        assertEquals( \"Max age unexpected\", 42.0,\n+                      ageU.getMax(), 0.001 );\n+\n+    }\n+    \n+    public void testSetPropertyName(){\n+        BeanListUnivariateImpl u = new BeanListUnivariateImpl(null);\n+        String expected = \"property\";\n+        u.setPropertyName(expected);\n+        assertEquals(expected, u.getPropertyName());\n+    }\n+    \n+    public void testAddValue() {\n+        DescriptiveStatistics u = new BeanListUnivariateImpl( patientList, \"age\" ); \n+        u.addValue(10);\n+        double[] values = {35d, 23d, 42d, 10d};\n+        assertEquals(\"total count\",4,u.getN(),tolerance);\n+        assertEquals(\"mean\", StatUtils.mean(values), u.getMean(), tolerance);\n+        assertEquals(\"min\", StatUtils.min(values), u.getMin(), tolerance);\n+        assertEquals(\"max\", StatUtils.max(values), u.getMax(), tolerance);\n+        assertEquals(\"var\", StatUtils.variance(values), u.getVariance(), tolerance);       \n+        u.clear();\n+        assertEquals(\"total count\",0,u.getN(),tolerance);      \n+    }\n+    \n+    /** test stats */\n+    public void testSerialization() {\n+        \n+        double[] values = {35d, 23d, 42d};\n+        \n+        DescriptiveStatistics u = new BeanListUnivariateImpl( patientList, \"age\" ); \n+        assertEquals(\"total count\",3,u.getN(),tolerance);\n+        assertEquals(\"mean\", StatUtils.mean(values), u.getMean(), tolerance);\n+        assertEquals(\"min\", StatUtils.min(values), u.getMin(), tolerance);\n+        assertEquals(\"max\", StatUtils.max(values), u.getMax(), tolerance);\n+        assertEquals(\"var\", StatUtils.variance(values), u.getVariance(), tolerance);   \n+        \n+        \n+        DescriptiveStatistics u2 = (DescriptiveStatistics)TestUtils.serializeAndRecover(u); \n+        assertEquals(\"total count\",3,u2.getN(),tolerance);\n+        assertEquals(\"mean\", StatUtils.mean(values), u2.getMean(), tolerance);\n+        assertEquals(\"min\", StatUtils.min(values), u2.getMin(), tolerance);\n+        assertEquals(\"max\", StatUtils.max(values), u2.getMax(), tolerance);\n+        assertEquals(\"var\", StatUtils.variance(values), u2.getVariance(), tolerance);   \n+\n+        u.clear();\n+        assertEquals(\"total count\",0,u.getN(),tolerance);    \n+        \n+        u2.clear();\n+        assertEquals(\"total count\",0,u2.getN(),tolerance);\n+            \n+    }    \n+    \n+    public class VitalStats {\n+\n+        private Double heartrate;\n+        private Double temperature;\n+\n+        public VitalStats() {\n+        }\n+\n+        public VitalStats(Double heartrate, Double temperature) {\n+            setHeartRate( heartrate );\n+            setTemperature( temperature );\n+        }\n+\n+        public Double getHeartRate() {\n+            return heartrate;\n+        }\n+\n+        public void setHeartRate(Double heartrate) {\n+            this.heartrate = heartrate;\n+        }\n+\n+        public Double getTemperature() {\n+            return temperature;\n+        }\n+\n+        public void setTemperature(Double temperature) {\n+            this.temperature = temperature;\n+        }\n+    }\n+    \n+    public class Patient {\n+\n+        private VitalStats vitalStats;\n+        private Integer age;\n+\n+        public Patient() {\n+        }\n+\n+        public Patient(VitalStats vitalStats, Integer age) {\n+            setVitalStats( vitalStats );\n+            setAge( age );\n+        }\n+\n+        public VitalStats getVitalStats() {\n+            return( vitalStats );\n+        }\n+\n+        public void setVitalStats(VitalStats vitalStats) {\n+            this.vitalStats = vitalStats;\n+        }\n+\n+        public Integer getAge() {\n+            return age;\n+        }\n+\n+        public void setAge(Integer age) {\n+            this.age = age;\n+        }\n+    }\n+}\n+\n--- a/src/test/org/apache/commons/math/stat/univariate/ListUnivariateImpl.java\n+++ b/src/test/org/apache/commons/math/stat/univariate/ListUnivariateImpl.java\n  */\n package org.apache.commons.math.stat.univariate;\n \n+import java.io.Serializable;\n+import java.util.ArrayList;\n import java.util.List;\n \n import org.apache.commons.math.MathException;\n import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n-import org.apache.commons.math.stat.univariate.AbstractDescriptiveStatistics;\n+import org.apache.commons.math.stat.univariate.DescriptiveStatistics;\n import org.apache.commons.math.util.DefaultTransformer;\n import org.apache.commons.math.util.NumberTransformer;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2004/05/23 00:33:41 $\n+ * @version $Revision: 1.4 $ $Date: 2004/06/01 21:28:06 $\n  */\n-public class ListUnivariateImpl extends AbstractDescriptiveStatistics {\n-\n+public class ListUnivariateImpl extends DescriptiveStatistics implements Serializable {\n+\n+    /** Serializable version identifier */\n+    static final long serialVersionUID = -8837442489133392138L;\n+    \n     /**\n      * Holds a reference to a list - GENERICs are going to make\n      * out lives easier here as we could only accept List<Number>\n     /** hold the window size **/\n     protected int windowSize = DescriptiveStatistics.INFINITE_WINDOW;\n \n+\t/**\n+\t * No argument Constructor\n+\t */\n+\tpublic ListUnivariateImpl(){\n+\t    this(new ArrayList());\n+\t}\n+\t\n     /**\n      * Construct a ListUnivariate with a specific List.\n      * @param list The list that will back this DescriptiveStatistics\n     \t}\n     }\n     \t\n-    \tpublic int getWindowSize() {\n-    \t\treturn windowSize;\n-    \t}\n+    public int getWindowSize() {\n+    \treturn windowSize;\n+    }\n \n }\n--- a/src/test/org/apache/commons/math/stat/univariate/ListUnivariateImplTest.java\n+++ b/src/test/org/apache/commons/math/stat/univariate/ListUnivariateImplTest.java\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.apache.commons.math.TestUtils;\n+\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n /**\n  * Test cases for the {@link Univariate} class.\n  *\n- * @version $Revision: 1.2 $ $Date: 2004/05/23 00:56:15 $\n+ * @version $Revision: 1.3 $ $Date: 2004/06/01 21:28:06 $\n  */\n \n public final class ListUnivariateImplTest extends TestCase {\n+    \n     private double one = 1;\n     private float two = 2;\n     private int three = 3;\n \n \n     }\n+    \n+    /** test stats */\n+    public void testSerialization() {\n+        \n+        DescriptiveStatistics u = null;\n+        \n+        try {\n+            u = DescriptiveStatistics.newInstance(ListUnivariateImpl.class);\n+        } catch (InstantiationException e) {\n+            fail(e.getMessage());\n+        } catch (IllegalAccessException e) {\n+            fail(e.getMessage());\n+        }\n+        \n+        assertEquals(\"total count\",0,u.getN(),tolerance);\n+        u.addValue(one);\n+        u.addValue(two);\n+        \n+        DescriptiveStatistics u2 = (DescriptiveStatistics)TestUtils.serializeAndRecover(u); \n+ \n+        u2.addValue(two);\n+        u2.addValue(three);\n+        \n+        assertEquals(\"N\",n,u2.getN(),tolerance);\n+        assertEquals(\"sum\",sum,u2.getSum(),tolerance);\n+        assertEquals(\"sumsq\",sumSq,u2.getSumsq(),tolerance);\n+        assertEquals(\"var\",var,u2.getVariance(),tolerance);\n+        assertEquals(\"std\",std,u2.getStandardDeviation(),tolerance);\n+        assertEquals(\"mean\",mean,u2.getMean(),tolerance);\n+        assertEquals(\"min\",min,u2.getMin(),tolerance);\n+        assertEquals(\"max\",max,u2.getMax(),tolerance);\n \n+        u2.clear();\n+        assertEquals(\"total count\",0,u2.getN(),tolerance);    \n+    }       \n }\n ", "timestamp": 1086125286, "metainfo": ""}