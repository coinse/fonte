{"sha": "4fa80e8c09fd5f5fec226c4c576c70b59981d894", "log": "improved test coverage  ", "commit": "\n--- a/src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java\n+++ b/src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java\n import org.apache.commons.math.MaxEvaluationsExceededException;\n import org.apache.commons.math.MaxIterationsExceededException;\n import org.apache.commons.math.analysis.MultivariateRealFunction;\n+import org.apache.commons.math.analysis.MultivariateVectorialFunction;\n+import org.apache.commons.math.linear.Array2DRowRealMatrix;\n+import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.optimization.GoalType;\n+import org.apache.commons.math.optimization.LeastSquaresConverter;\n import org.apache.commons.math.optimization.OptimizationException;\n import org.apache.commons.math.optimization.RealPointValuePair;\n import org.apache.commons.math.optimization.SimpleRealPointChecker;\n \n   }\n \n+  @Test\n+  public void testLeastSquares1()\n+  throws FunctionEvaluationException, ConvergenceException {\n+\n+      final RealMatrix factors =\n+          new Array2DRowRealMatrix(new double[][] {\n+              { 1.0, 0.0 },\n+              { 0.0, 1.0 }\n+          }, false);\n+      LeastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorialFunction() {\n+          public double[] value(double[] variables) {\n+              return factors.operate(variables);\n+          }\n+      }, new double[] { 2.0, -3.0 });\n+      NelderMead optimizer = new NelderMead();\n+      optimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1.0, 1.0e-6));\n+      optimizer.setMaxIterations(200);\n+      RealPointValuePair optimum =\n+          optimizer.optimize(ls, GoalType.MINIMIZE, new double[] { 10.0, 10.0 });\n+      assertEquals( 2.0, optimum.getPointRef()[0], 3.0e-5);\n+      assertEquals(-3.0, optimum.getPointRef()[1], 4.0e-4);\n+      assertTrue(optimizer.getEvaluations() > 60);\n+      assertTrue(optimizer.getEvaluations() < 80);\n+      assertTrue(optimum.getValue() < 1.0e-6);\n+  }\n+\n+  @Test\n+  public void testLeastSquares2()\n+  throws FunctionEvaluationException, ConvergenceException {\n+\n+      final RealMatrix factors =\n+          new Array2DRowRealMatrix(new double[][] {\n+              { 1.0, 0.0 },\n+              { 0.0, 1.0 }\n+          }, false);\n+      LeastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorialFunction() {\n+          public double[] value(double[] variables) {\n+              return factors.operate(variables);\n+          }\n+      }, new double[] { 2.0, -3.0 }, new double[] { 10.0, 0.1 });\n+      NelderMead optimizer = new NelderMead();\n+      optimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1.0, 1.0e-6));\n+      optimizer.setMaxIterations(200);\n+      RealPointValuePair optimum =\n+          optimizer.optimize(ls, GoalType.MINIMIZE, new double[] { 10.0, 10.0 });\n+      assertEquals( 2.0, optimum.getPointRef()[0], 5.0e-5);\n+      assertEquals(-3.0, optimum.getPointRef()[1], 8.0e-4);\n+      assertTrue(optimizer.getEvaluations() > 60);\n+      assertTrue(optimizer.getEvaluations() < 80);\n+      assertTrue(optimum.getValue() < 1.0e-6);\n+  }\n+\n+  @Test\n+  public void testLeastSquares3()\n+  throws FunctionEvaluationException, ConvergenceException {\n+\n+      final RealMatrix factors =\n+          new Array2DRowRealMatrix(new double[][] {\n+              { 1.0, 0.0 },\n+              { 0.0, 1.0 }\n+          }, false);\n+      LeastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorialFunction() {\n+          public double[] value(double[] variables) {\n+              return factors.operate(variables);\n+          }\n+      }, new double[] { 2.0, -3.0 }, new Array2DRowRealMatrix(new double [][] {\n+          { 1.0, 1.2 }, { 1.2, 2.0 }\n+      }));\n+      NelderMead optimizer = new NelderMead();\n+      optimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1.0, 1.0e-6));\n+      optimizer.setMaxIterations(200);\n+      RealPointValuePair optimum =\n+          optimizer.optimize(ls, GoalType.MINIMIZE, new double[] { 10.0, 10.0 });\n+      assertEquals( 2.0, optimum.getPointRef()[0], 2.0e-3);\n+      assertEquals(-3.0, optimum.getPointRef()[1], 8.0e-4);\n+      assertTrue(optimizer.getEvaluations() > 60);\n+      assertTrue(optimizer.getEvaluations() < 80);\n+      assertTrue(optimum.getValue() < 1.0e-6);\n+  }\n+\n   @Test(expected = MaxIterationsExceededException.class)\n   public void testMaxIterations() throws MathException {\n       try {", "timestamp": 1248127290, "metainfo": ""}