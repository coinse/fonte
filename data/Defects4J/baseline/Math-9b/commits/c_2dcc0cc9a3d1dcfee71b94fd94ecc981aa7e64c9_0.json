{"sha": "2dcc0cc9a3d1dcfee71b94fd94ecc981aa7e64c9", "log": "event handlers in ODE now also provide the switching function variation (increasing/decreasing) when an event occurs  ", "commit": "\n--- a/src/java/org/apache/commons/math/ode/AbstractIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/AbstractIntegrator.java\n     private static class EndTimeChecker implements EventHandler {\n \n         /** Serializable version identifier. */\n-        private static final long serialVersionUID = -5211782540446301964L;\n-\n-        /** DEsiredt end time. */\n+        private static final long serialVersionUID = -7029115498939113263L;\n+\n+        /** Desired end time. */\n         private final double endTime;\n \n         /** Build an instance.\n         }\n \n         /** {@inheritDoc} */\n-        public int eventOccurred(double t, double[] y) {\n+        public int eventOccurred(double t, double[] y, boolean increasing) {\n             return STOP;\n         }\n \n--- a/src/java/org/apache/commons/math/ode/MultistepIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/MultistepIntegrator.java\n     private class ResetCheckingWrapper implements EventHandler {\n \n         /** Serializable version identifier. */\n-        private static final long serialVersionUID = 4922660285376467937L;\n+        private static final long serialVersionUID = -3138614051962269485L;\n \n         /** Wrapped event handler. */\n         private final EventHandler handler;\n         }\n \n         /** {@inheritDoc} */\n-        public int eventOccurred(double t, double[] y) throws EventException {\n-            final int action = handler.eventOccurred(t, y);\n+        public int eventOccurred(double t, double[] y, boolean increasing)\n+            throws EventException {\n+            final int action = handler.eventOccurred(t, y, increasing);\n             if ((action == RESET_DERIVATIVES) || (action == RESET_STATE)) {\n                 // a singularity has been encountered\n                 // we need to restart the start phase\n--- a/src/java/org/apache/commons/math/ode/events/EventHandler.java\n+++ b/src/java/org/apache/commons/math/ode/events/EventHandler.java\n \n    * @param t current value of the independent <i>time</i> variable\n    * @param y array containing the current value of the state vector\n+   * @param increasing if true, the value of the switching function increases\n+   * when times increases around event (note that increase is measured with respect\n+   * to physical time, not with respect to propagation which may go backward in time)\n    * @return indication of what the integrator should do next, this\n    * value must be one of {@link #STOP}, {@link #RESET_STATE},\n    * {@link #RESET_DERIVATIVES} or {@link #CONTINUE}\n    * @exception EventException if the event occurrence triggers an error\n    */\n-  public int eventOccurred(double t, double[] y) throws EventException;\n+  public int eventOccurred(double t, double[] y, boolean increasing) throws EventException;\n   \n   /** Reset the state prior to continue the integration.\n \n--- a/src/java/org/apache/commons/math/ode/events/EventState.java\n+++ b/src/java/org/apache/commons/math/ode/events/EventState.java\n     /** Occurrence time of the previous event. */\n     private double previousEventTime;\n \n+    /** Integration direction. */\n+    private boolean forward;\n+\n     /** Variation direction around pending event.\n      *  (this is considered with respect to the integration direction)\n      */\n \n         try {\n \n+            forward = interpolator.isForward();\n             final double t1 = interpolator.getCurrentTime();\n             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n             final double h  = (t1 - t0) / n;\n             // force the sign to its value \"just after the event\"\n             previousEventTime = t;\n             g0Positive        = increasing;\n-            nextAction        = handler.eventOccurred(t, y);\n+            nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));\n         } else {\n             g0Positive = (g0 >= 0);\n             nextAction = EventHandler.CONTINUE;\n--- a/src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java\n       integ.addStepHandler(handler);\n \n       integ.addEventHandler(new EventHandler() {\n-        public int eventOccurred(double t, double[] y) {\n+        public int eventOccurred(double t, double[] y, boolean increasing) {\n           return EventHandler.CONTINUE;\n         }\n         public double g(double t, double[] y) throws EventException {\n     integ.addStepHandler(handler);\n \n     integ.addEventHandler(new EventHandler() {\n-      public int eventOccurred(double t, double[] y) {\n+      public int eventOccurred(double t, double[] y, boolean increasing) {\n         return EventHandler.CONTINUE;\n       }\n       public double g(double t, double[] y) {\n--- a/src/test/org/apache/commons/math/ode/nonstiff/StepProblem.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/StepProblem.java\n     this.rate = rate;\n   }\n \n-  public int eventOccurred(double t, double[] y) {\n+  public int eventOccurred(double t, double[] y, boolean increasing) {\n     setRate(rateAfter);\n     return RESET_DERIVATIVES;\n   }\n--- a/src/test/org/apache/commons/math/ode/nonstiff/TestProblem4.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/TestProblem4.java\n       return sign * y[0];\n     }\n \n-    public int eventOccurred(double t, double[] y) {\n+    public int eventOccurred(double t, double[] y, boolean increasing) {\n       // this sign change is needed because the state will be reset soon\n       sign = -sign;\n       return EventHandler.RESET_STATE;\n       return t - 12.0;\n     }\n \n-    public int eventOccurred(double t, double[] y) {\n+    public int eventOccurred(double t, double[] y, boolean increasing) {\n       return EventHandler.STOP;\n     }\n   ", "timestamp": 1240848243, "metainfo": ""}