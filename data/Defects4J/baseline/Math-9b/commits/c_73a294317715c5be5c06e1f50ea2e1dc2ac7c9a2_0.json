{"sha": "73a294317715c5be5c06e1f50ea2e1dc2ac7c9a2", "log": "[Previous commit was a mistake.] Created a \"SerializablePair\" for use in \"MathRuntimeException\". Uncommented the test in \"DummyStepInterpolatorTest\".   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\n \n import org.apache.commons.math.exception.util.ArgUtils;\n import org.apache.commons.math.exception.util.Localizable;\n-import org.apache.commons.math.util.Pair;\n+import org.apache.commons.math.util.SerializablePair;\n \n /**\n  * This class is the base class for all exceptions.\n     /**\n      * Various informations that enrich the informative message.\n      */\n-    private final List<Pair<Localizable, Object[]>> messages\n-        = new ArrayList<Pair<Localizable, Object[]>>();\n+    private final List<SerializablePair<Localizable, Object[]>> messages\n+        = new ArrayList<SerializablePair<Localizable, Object[]>>();\n     /**\n      * Arbitrary context information.\n      */\n     /** {@inheritDoc} */\n     public void addMessage(Localizable pattern,\n                            Object ... arguments) {\n-        messages.add(new Pair<Localizable, Object[]>(pattern, ArgUtils.flatten(arguments)));\n+        messages.add(new SerializablePair<Localizable, Object[]>(pattern,\n+                                                                 ArgUtils.flatten(arguments)));\n     }\n \n     /** {@inheritDoc} */\n         final StringBuilder sb = new StringBuilder();\n         int count = 0;\n         final int len = messages.size();\n-        for (Pair<Localizable, Object[]> pair : messages) {\n-            final MessageFormat fmt = new MessageFormat(pair.getKey().getLocalizedString(locale), locale);\n+        for (SerializablePair<Localizable, Object[]> pair : messages) {\n+            final MessageFormat fmt = new MessageFormat(pair.getKey().getLocalizedString(locale),\n+                                                        locale);\n             sb.append(fmt.format(pair.getValue()));\n             if (++count < len) {\n                 // Add a separator if there are other messages.\n--- a/src/main/java/org/apache/commons/math/util/Pair.java\n+++ b/src/main/java/org/apache/commons/math/util/Pair.java\n      *\n      * @param entry Entry to copy.\n      */\n-    Pair(Pair<? extends K, ? extends V> entry) {\n+    public Pair(Pair<? extends K, ? extends V> entry) {\n         key = entry.getKey();\n         value = entry.getValue();\n     }\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/util/SerializablePair.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.util;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Generic pair.\n+ * Immutable class.\n+ *\n+ * @param <K> Key type.\n+ * @param <V> Value type.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class SerializablePair<K extends Serializable, V extends Serializable>\n+    extends Pair<K, V>\n+    implements Serializable {\n+    /**\n+     * Create an entry representing a mapping from the specified key to the\n+     * specified value.\n+     *\n+     * @param k Key.\n+     * @param v Value.\n+     */\n+    public SerializablePair(K k, V v) {    \n+        super(k, v);\n+    }\n+\n+    /**\n+     * Create an entry representing the same mapping as the specified entry.\n+     *\n+     * @param entry Entry to copy.\n+     */\n+    public SerializablePair(SerializablePair<? extends K, ? extends V> entry) {\n+        super(entry);\n+    }\n+}\n--- a/src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java\n         fail(\"an exception should have been thrown\");\n     } catch (IOException ioe) {\n         // expected behavior\n-        // XXX Why was the message supposed to be empty?\n-        // With the current code it is \"org.apache.commons.math.util.Pair\".\n-        // assertEquals(0, ioe.getMessage().length());\n+        assertEquals(0, ioe.getMessage().length());\n     }\n-\n   }\n \n   private static class BadStepInterpolator extends DummyStepInterpolator {\n       }\n       @Override\n       protected void doFinalize() throws MathUserException {\n-          throw new MathUserException();\n+          throw new MathUserException(LocalizedFormats.SIMPLE_MESSAGE, \"\");\n       }\n   }\n }", "timestamp": 1299618588, "metainfo": ""}