{"sha": "2074ef14d8894656d1acb881e2367a5c8e5a20ba", "log": "[MATH-906] Use NaNStrategy.FAILED as default in NaturalRanking.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java\n+++ b/src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java\n  * <p>NaNs are treated according to the configured {@link NaNStrategy} and ties\n  * are handled using the selected {@link TiesStrategy}.\n  * Configuration settings are supplied in optional constructor arguments.\n- * Defaults are {@link NaNStrategy#MAXIMAL} and {@link TiesStrategy#AVERAGE},\n+ * Defaults are {@link NaNStrategy#FAILED} and {@link TiesStrategy#AVERAGE},\n  * respectively. When using {@link TiesStrategy#RANDOM}, a\n  * {@link RandomGenerator} may be supplied as a constructor argument.</p>\n  * <p>Examples:\n public class NaturalRanking implements RankingAlgorithm {\n \n     /** default NaN strategy */\n-    public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.MAXIMAL;\n+    public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;\n \n     /** default ties strategy */\n     public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;\n--- a/src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java\n  */\n package org.apache.commons.math3.stat.ranking;\n \n+import junit.framework.Assert;\n+\n import org.apache.commons.math3.TestUtils;\n import org.apache.commons.math3.exception.NotANumberException;\n import org.apache.commons.math3.random.JDKRandomGenerator;\n     private final double[] allSame = { 0, 0, 0, 0 };\n \n     @Test\n-    public void testDefault() { // Ties averaged, NaNs maximal\n+    public void testDefault() { // Ties averaged, NaNs failed\n         NaturalRanking ranking = new NaturalRanking();\n-        double[] ranks = ranking.rank(exampleData);\n-        double[] correctRanks = { 5, 3, 6, 7, 3, 8, 9, 1, 3 };\n-        TestUtils.assertEquals(correctRanks, ranks, 0d);\n-        ranks = ranking.rank(tiesFirst);\n-        correctRanks = new double[] { 1.5, 1.5, 4, 3, 5 };\n+        double[] ranks;\n+        \n+        try {\n+            ranks = ranking.rank(exampleData);\n+            Assert.fail(\"expected NotANumberException due to NaNStrategy.FAILED\");\n+        } catch (NotANumberException e) {\n+            // expected\n+        }\n+        \n+        ranks = ranking.rank(tiesFirst);\n+        double[] correctRanks = new double[] { 1.5, 1.5, 4, 3, 5 };\n         TestUtils.assertEquals(correctRanks, ranks, 0d);\n         ranks = ranking.rank(tiesLast);\n         correctRanks = new double[] { 3.5, 3.5, 2, 1 };\n         TestUtils.assertEquals(correctRanks, ranks, 0d);\n-        ranks = ranking.rank(multipleNaNs);\n-        correctRanks = new double[] { 1, 2, 3.5, 3.5 };\n-        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        \n+        try {\n+            ranks = ranking.rank(multipleNaNs);\n+            Assert.fail(\"expected NotANumberException due to NaNStrategy.FAILED\");\n+        } catch (NotANumberException e) {\n+            // expected\n+        }\n+        \n         ranks = ranking.rank(multipleTies);\n         correctRanks = new double[] { 3, 2, 4.5, 4.5, 6.5, 6.5, 1 };\n         TestUtils.assertEquals(correctRanks, ranks, 0d);\n \n     @Test\n     public void testNaNsMaximalTiesMinimum() {\n-        NaturalRanking ranking = new NaturalRanking(TiesStrategy.MINIMUM);\n+        NaturalRanking ranking = new NaturalRanking(NaNStrategy.MAXIMAL, TiesStrategy.MINIMUM);\n         double[] ranks = ranking.rank(exampleData);\n         double[] correctRanks = { 5, 2, 6, 7, 2, 8, 9, 1, 2 };\n         TestUtils.assertEquals(correctRanks, ranks, 0d);", "timestamp": 1353446034, "metainfo": ""}