{"sha": "3ff5ce690b387030c783dfa7eae34cbe7a5969aa", "log": "MATH-689 Moved array utilities from \"MathUtils\" to \"MathArrays\".   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java\n import org.apache.commons.math.stat.descriptive.summary.SumOfLogs;\n import org.apache.commons.math.stat.descriptive.summary.SumOfSquares;\n import org.apache.commons.math.util.MathUtils;\n+import org.apache.commons.math.util.MathArrays;\n import org.apache.commons.math.util.Precision;\n import org.apache.commons.math.util.FastMath;\n \n             return false;\n         }\n         MultivariateSummaryStatistics stat = (MultivariateSummaryStatistics) object;\n-        return MathUtils.equalsIncludingNaN(stat.getGeometricMean(), getGeometricMean()) &&\n-               MathUtils.equalsIncludingNaN(stat.getMax(),           getMax())           &&\n-               MathUtils.equalsIncludingNaN(stat.getMean(),          getMean())          &&\n-               MathUtils.equalsIncludingNaN(stat.getMin(),           getMin())           &&\n+        return MathArrays.equalsIncludingNaN(stat.getGeometricMean(), getGeometricMean()) &&\n+               MathArrays.equalsIncludingNaN(stat.getMax(),           getMax())           &&\n+               MathArrays.equalsIncludingNaN(stat.getMean(),          getMean())          &&\n+               MathArrays.equalsIncludingNaN(stat.getMin(),           getMin())           &&\n                Precision.equalsIncludingNaN(stat.getN(),             getN())             &&\n-               MathUtils.equalsIncludingNaN(stat.getSum(),           getSum())           &&\n-               MathUtils.equalsIncludingNaN(stat.getSumSq(),         getSumSq())         &&\n-               MathUtils.equalsIncludingNaN(stat.getSumLog(),        getSumLog())        &&\n+               MathArrays.equalsIncludingNaN(stat.getSum(),           getSum())           &&\n+               MathArrays.equalsIncludingNaN(stat.getSumSq(),         getSumSq())         &&\n+               MathArrays.equalsIncludingNaN(stat.getSumLog(),        getSumLog())        &&\n                stat.getCovariance().equals( getCovariance());\n     }\n \n--- a/src/main/java/org/apache/commons/math/util/MathArrays.java\n+++ b/src/main/java/org/apache/commons/math/util/MathArrays.java\n \n         return result;\n     }\n+\n+    /**\n+     * Returns true iff both arguments are null or have same dimensions and all\n+     * their elements are equal as defined by\n+     * {@link Precision#equals(float,float)}.\n+     *\n+     * @param x first array\n+     * @param y second array\n+     * @return true if the values are both null or have same dimension\n+     * and equal elements.\n+     */\n+    public static boolean equals(float[] x, float[] y) {\n+        if ((x == null) || (y == null)) {\n+            return !((x == null) ^ (y == null));\n+        }\n+        if (x.length != y.length) {\n+            return false;\n+        }\n+        for (int i = 0; i < x.length; ++i) {\n+            if (!Precision.equals(x[i], y[i])) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Returns true iff both arguments are null or have same dimensions and all\n+     * their elements are equal as defined by\n+     * {@link Precision#equalsIncludingNaN(double,double) this method}.\n+     *\n+     * @param x first array\n+     * @param y second array\n+     * @return true if the values are both null or have same dimension and\n+     * equal elements\n+     * @since 2.2\n+     */\n+    public static boolean equalsIncludingNaN(float[] x, float[] y) {\n+        if ((x == null) || (y == null)) {\n+            return !((x == null) ^ (y == null));\n+        }\n+        if (x.length != y.length) {\n+            return false;\n+        }\n+        for (int i = 0; i < x.length; ++i) {\n+            if (!Precision.equalsIncludingNaN(x[i], y[i])) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Returns {@code true} iff both arguments are {@code null} or have same\n+     * dimensions and all their elements are equal as defined by\n+     * {@link Precision#equals(double,double)}.\n+     *\n+     * @param x First array.\n+     * @param y Second array.\n+     * @return {@code true} if the values are both {@code null} or have same\n+     * dimension and equal elements.\n+     */\n+    public static boolean equals(double[] x, double[] y) {\n+        if ((x == null) || (y == null)) {\n+            return !((x == null) ^ (y == null));\n+        }\n+        if (x.length != y.length) {\n+            return false;\n+        }\n+        for (int i = 0; i < x.length; ++i) {\n+            if (!Precision.equals(x[i], y[i])) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Returns {@code true} iff both arguments are {@code null} or have same\n+     * dimensions and all their elements are equal as defined by\n+     * {@link Precision#equalsIncludingNaN(double,double) this method}.\n+     *\n+     * @param x First array.\n+     * @param y Second array.\n+     * @return {@code true} if the values are both {@code null} or have same\n+     * dimension and equal elements.\n+     * @since 2.2\n+     */\n+    public static boolean equalsIncludingNaN(double[] x, double[] y) {\n+        if ((x == null) || (y == null)) {\n+            return !((x == null) ^ (y == null));\n+        }\n+        if (x.length != y.length) {\n+            return false;\n+        }\n+        for (int i = 0; i < x.length; ++i) {\n+            if (!Precision.equalsIncludingNaN(x[i], y[i])) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n }\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n      */\n     public static double cosh(double x) {\n         return (FastMath.exp(x) + FastMath.exp(-x)) / 2.0;\n-    }\n-\n-    /**\n-     * Returns true iff both arguments are null or have same dimensions and all\n-     * their elements are equal as defined by\n-     * {@link Precision#equals(float,float)}.\n-     *\n-     * @param x first array\n-     * @param y second array\n-     * @return true if the values are both null or have same dimension\n-     * and equal elements.\n-     */\n-    public static boolean equals(float[] x, float[] y) {\n-        if ((x == null) || (y == null)) {\n-            return !((x == null) ^ (y == null));\n-        }\n-        if (x.length != y.length) {\n-            return false;\n-        }\n-        for (int i = 0; i < x.length; ++i) {\n-            if (!Precision.equals(x[i], y[i])) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-\n-    /**\n-     * Returns true iff both arguments are null or have same dimensions and all\n-     * their elements are equal as defined by\n-     * {@link Precision#equalsIncludingNaN(double,double) this method}.\n-     *\n-     * @param x first array\n-     * @param y second array\n-     * @return true if the values are both null or have same dimension and\n-     * equal elements\n-     * @since 2.2\n-     */\n-    public static boolean equalsIncludingNaN(float[] x, float[] y) {\n-        if ((x == null) || (y == null)) {\n-            return !((x == null) ^ (y == null));\n-        }\n-        if (x.length != y.length) {\n-            return false;\n-        }\n-        for (int i = 0; i < x.length; ++i) {\n-            if (!Precision.equalsIncludingNaN(x[i], y[i])) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-\n-    /**\n-     * Returns {@code true} iff both arguments are {@code null} or have same\n-     * dimensions and all their elements are equal as defined by\n-     * {@link Precision#equals(double,double)}.\n-     *\n-     * @param x First array.\n-     * @param y Second array.\n-     * @return {@code true} if the values are both {@code null} or have same\n-     * dimension and equal elements.\n-     */\n-    public static boolean equals(double[] x, double[] y) {\n-        if ((x == null) || (y == null)) {\n-            return !((x == null) ^ (y == null));\n-        }\n-        if (x.length != y.length) {\n-            return false;\n-        }\n-        for (int i = 0; i < x.length; ++i) {\n-            if (!Precision.equals(x[i], y[i])) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-\n-    /**\n-     * Returns {@code true} iff both arguments are {@code null} or have same\n-     * dimensions and all their elements are equal as defined by\n-     * {@link Precision#equalsIncludingNaN(double,double) this method}.\n-     *\n-     * @param x First array.\n-     * @param y Second array.\n-     * @return {@code true} if the values are both {@code null} or have same\n-     * dimension and equal elements.\n-     * @since 2.2\n-     */\n-    public static boolean equalsIncludingNaN(double[] x, double[] y) {\n-        if ((x == null) || (y == null)) {\n-            return !((x == null) ^ (y == null));\n-        }\n-        if (x.length != y.length) {\n-            return false;\n-        }\n-        for (int i = 0; i < x.length; ++i) {\n-            if (!Precision.equalsIncludingNaN(x[i], y[i])) {\n-                return false;\n-            }\n-        }\n-        return true;\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/math/util/MathArraysTest.java\n+++ b/src/test/java/org/apache/commons/math/util/MathArraysTest.java\n                                                                     a[7][3], b[7][3])));\n         Assert.assertTrue(Double.isNaN(MathArrays.linearCombination(a[7], b[7])));\n     }\n+\n+    @Test\n+    public void testArrayEquals() {\n+        Assert.assertFalse(MathArrays.equals(new double[] { 1d }, null));\n+        Assert.assertFalse(MathArrays.equals(null, new double[] { 1d }));\n+        Assert.assertTrue(MathArrays.equals((double[]) null, (double[]) null));\n+\n+        Assert.assertFalse(MathArrays.equals(new double[] { 1d }, new double[0]));\n+        Assert.assertTrue(MathArrays.equals(new double[] { 1d }, new double[] { 1d }));\n+        Assert.assertTrue(MathArrays.equals(new double[] { Double.POSITIVE_INFINITY,\n+                                                           Double.NEGATIVE_INFINITY, 1d, 0d },\n+                                            new double[] { Double.POSITIVE_INFINITY,\n+                                                           Double.NEGATIVE_INFINITY, 1d, 0d }));\n+        Assert.assertFalse(MathArrays.equals(new double[] { Double.NaN },\n+                                             new double[] { Double.NaN }));\n+        Assert.assertFalse(MathArrays.equals(new double[] { Double.POSITIVE_INFINITY },\n+                                             new double[] { Double.NEGATIVE_INFINITY }));\n+        Assert.assertFalse(MathArrays.equals(new double[] { 1d },\n+                                             new double[] { FastMath.nextAfter(FastMath.nextAfter(1d, 2d), 2d) }));\n+\n+    }\n+\n+    @Test\n+    public void testArrayEqualsIncludingNaN() {\n+        Assert.assertFalse(MathArrays.equalsIncludingNaN(new double[] { 1d }, null));\n+        Assert.assertFalse(MathArrays.equalsIncludingNaN(null, new double[] { 1d }));\n+        Assert.assertTrue(MathArrays.equalsIncludingNaN((double[]) null, (double[]) null));\n+\n+        Assert.assertFalse(MathArrays.equalsIncludingNaN(new double[] { 1d }, new double[0]));\n+        Assert.assertTrue(MathArrays.equalsIncludingNaN(new double[] { 1d }, new double[] { 1d }));\n+        Assert.assertTrue(MathArrays.equalsIncludingNaN(new double[] { Double.NaN, Double.POSITIVE_INFINITY,\n+                                                                       Double.NEGATIVE_INFINITY, 1d, 0d },\n+                                                        new double[] { Double.NaN, Double.POSITIVE_INFINITY,\n+                                                                       Double.NEGATIVE_INFINITY, 1d, 0d }));\n+        Assert.assertFalse(MathArrays.equalsIncludingNaN(new double[] { Double.POSITIVE_INFINITY },\n+                                                         new double[] { Double.NEGATIVE_INFINITY }));\n+        Assert.assertFalse(MathArrays.equalsIncludingNaN(new double[] { 1d },\n+                                                         new double[] { FastMath.nextAfter(FastMath.nextAfter(1d, 2d), 2d) }));\n+    }\n }\n--- a/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n     }\n \n     @Test\n-    public void testArrayEquals() {\n-        Assert.assertFalse(MathUtils.equals(new double[] { 1d }, null));\n-        Assert.assertFalse(MathUtils.equals(null, new double[] { 1d }));\n-        Assert.assertTrue(MathUtils.equals((double[]) null, (double[]) null));\n-\n-        Assert.assertFalse(MathUtils.equals(new double[] { 1d }, new double[0]));\n-        Assert.assertTrue(MathUtils.equals(new double[] { 1d }, new double[] { 1d }));\n-        Assert.assertTrue(MathUtils.equals(new double[] {\n-                                      Double.POSITIVE_INFINITY,\n-                                      Double.NEGATIVE_INFINITY, 1d, 0d\n-                                    }, new double[] {\n-                                      Double.POSITIVE_INFINITY,\n-                                      Double.NEGATIVE_INFINITY, 1d, 0d\n-                                    }));\n-        Assert.assertFalse(MathUtils.equals(new double[] { Double.NaN },\n-                                     new double[] { Double.NaN }));\n-        Assert.assertFalse(MathUtils.equals(new double[] { Double.POSITIVE_INFINITY },\n-                                     new double[] { Double.NEGATIVE_INFINITY }));\n-        Assert.assertFalse(MathUtils.equals(new double[] { 1d },\n-                                     new double[] { FastMath.nextAfter(FastMath.nextAfter(1d, 2d), 2d) }));\n-\n-    }\n-\n-    @Test\n-    public void testArrayEqualsIncludingNaN() {\n-        Assert.assertFalse(MathUtils.equalsIncludingNaN(new double[] { 1d }, null));\n-        Assert.assertFalse(MathUtils.equalsIncludingNaN(null, new double[] { 1d }));\n-        Assert.assertTrue(MathUtils.equalsIncludingNaN((double[]) null, (double[]) null));\n-\n-        Assert.assertFalse(MathUtils.equalsIncludingNaN(new double[] { 1d }, new double[0]));\n-        Assert.assertTrue(MathUtils.equalsIncludingNaN(new double[] { 1d }, new double[] { 1d }));\n-        Assert.assertTrue(MathUtils.equalsIncludingNaN(new double[] {\n-                    Double.NaN, Double.POSITIVE_INFINITY,\n-                    Double.NEGATIVE_INFINITY, 1d, 0d\n-                }, new double[] {\n-                    Double.NaN, Double.POSITIVE_INFINITY,\n-                    Double.NEGATIVE_INFINITY, 1d, 0d\n-                }));\n-        Assert.assertFalse(MathUtils.equalsIncludingNaN(new double[] { Double.POSITIVE_INFINITY },\n-                                                 new double[] { Double.NEGATIVE_INFINITY }));\n-        Assert.assertFalse(MathUtils.equalsIncludingNaN(new double[] { 1d },\n-                                                 new double[] { FastMath.nextAfter(FastMath.nextAfter(1d, 2d), 2d) }));\n-    }\n-\n-    @Test\n     public void testFactorial() {\n         for (int i = 1; i < 21; i++) {\n             Assert.assertEquals(i + \"! \", factorial(i), MathUtils.factorial(i));", "timestamp": 1318374646, "metainfo": ""}