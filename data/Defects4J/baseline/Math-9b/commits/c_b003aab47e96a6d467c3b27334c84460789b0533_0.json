{"sha": "b003aab47e96a6d467c3b27334c84460789b0533", "log": "Reverted incompatible changes made in r1420006. Fixed javadoc error in EmpiricalDistribution class javadoc. Deprecated constructors taking RandomDataImpl instances in EmpiricalDistribution, ValueServer.  These constructors predate RandomGenerator, which should be used directly as the source of random data for these classes.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java\n import java.util.List;\n \n import org.apache.commons.math3.distribution.AbstractRealDistribution;\n+import org.apache.commons.math3.distribution.NormalDistribution;\n import org.apache.commons.math3.distribution.RealDistribution;\n-import org.apache.commons.math3.distribution.NormalDistribution;\n import org.apache.commons.math3.exception.MathIllegalStateException;\n import org.apache.commons.math3.exception.MathInternalError;\n import org.apache.commons.math3.exception.NullArgumentException;\n     /** upper bounds of subintervals in (0,1) \"belonging\" to the bins */\n     private double[] upperBounds = null;\n \n-    /** Data generator. */\n-    private final RandomDataGenerator randomDataGen;\n-    /**\n-     * XXX Enable backward-compatibility (to be removed in 4.0).\n-     */\n-    private final boolean useRandomDataImpl;\n+    /** RandomDataImpl instance to use in repeated calls to getNext() */\n+    private final RandomDataImpl randomData;\n \n     /**\n      * Creates a new EmpiricalDistribution with the default bin count.\n      */\n     public EmpiricalDistribution() {\n-        this(DEFAULT_BIN_COUNT);\n+        this(DEFAULT_BIN_COUNT, new RandomDataImpl());\n     }\n \n     /**\n      * @param binCount number of bins\n      */\n     public EmpiricalDistribution(int binCount) {\n-        this(binCount, (RandomGenerator) null);\n+        this(binCount, new RandomDataImpl());\n     }\n \n     /**\n      * provided {@link RandomGenerator} as the source of random data.\n      *\n      * @param binCount number of bins\n-     * @param randomData random data generator (may be null, resulting in a default generator)\n-     * @deprecated As of 3.1. To be removed in 4.0. Please use\n-     * {@link #EmpiricalDistribution(int,RandomDataGenerator)} instead.\n-     */\n-    @Deprecated\n+     * @param generator random data generator (may be null, resulting in default JDK generator)\n+     * @since 3.0\n+     */\n+    public EmpiricalDistribution(int binCount, RandomGenerator generator) {\n+        this.binCount = binCount;\n+        randomData = new RandomDataImpl(generator);\n+        binStats = new ArrayList<SummaryStatistics>();\n+    }\n+\n+    /**\n+     * Creates a new EmpiricalDistribution with default bin count using the\n+     * provided {@link RandomGenerator} as the source of random data.\n+     *\n+     * @param generator random data generator (may be null, resulting in default JDK generator)\n+     * @since 3.0\n+     */\n+    public EmpiricalDistribution(RandomGenerator generator) {\n+        this(DEFAULT_BIN_COUNT, generator);\n+    }\n+\n+    /**\n+     * Creates a new EmpiricalDistribution with the specified bin count using the\n+     * provided {@link RandomDataImpl} instance as the source of random data.\n+     *\n+     * @param binCount number of bins\n+     * @param randomData random data generator (may be null, resulting in default JDK generator)\n+     * @since 3.0\n+     */\n     public EmpiricalDistribution(int binCount, RandomDataImpl randomData) {\n         this.binCount = binCount;\n-        this.randomData = randomData == null ?\n-            new RandomDataImpl() :\n-            randomData;\n+        this.randomData = randomData;\n         binStats = new ArrayList<SummaryStatistics>();\n-        useRandomDataImpl = true;\n-        randomDataGen = null;\n-    }\n-    /**\n-     * Creates a new EmpiricalDistribution with the specified bin count using the\n-     * provided {@link RandomGenerator} as the source of random data.\n-     *\n-     * @param randomData random data generator (may be null, resulting in a default generator)\n-     * @deprecated As of 3.1. To be removed in 4.0. Please use\n-     * {@link #EmpiricalDistribution(RandomDataGenerator)} instead.\n-     */\n-    @Deprecated\n+    }\n+\n+    /**\n+     * Creates a new EmpiricalDistribution with default bin count using the\n+     * provided {@link RandomDataImpl} as the source of random data.\n+     *\n+     * @param randomData random data generator (may be null, resulting in default JDK generator)\n+     * @since 3.0\n+     */\n     public EmpiricalDistribution(RandomDataImpl randomData) {\n         this(DEFAULT_BIN_COUNT, randomData);\n     }\n \n-    /**\n-     * Creates a new EmpiricalDistribution with the specified bin count using the\n-     * provided {@link RandomGenerator} as the source of random data.\n-     *\n-     * @param binCount number of bins\n-     * @param randomData random data generator (may be null, resulting in a default generator)\n-     */\n-    public EmpiricalDistribution(int binCount, RandomDataGenerator randomData) {\n-        this.binCount = binCount;\n-        this.randomDataGen = randomData == null ?\n-            new RandomDataGenerator() :\n-            randomData;\n-        binStats = new ArrayList<SummaryStatistics>();\n-        useRandomDataImpl = false; // XXX Remove in 4.0\n-    }\n-    /**\n-     * Creates a new EmpiricalDistribution with the specified bin count using the\n-     * provided {@link RandomGenerator} as the source of random data.\n-     *\n-     * @param randomData random data generator (may be null, resulting in a default generator)\n-     */\n-    public EmpiricalDistribution(RandomDataGenerator randomData) {\n-        this(DEFAULT_BIN_COUNT, randomData);\n-    }\n-\n-    /**\n-     * Creates a new EmpiricalDistribution with the specified bin count using the\n-     * provided {@link RandomGenerator} as the source of random data.\n-     *\n-     * @param binCount number of bins\n-     * @param generator random data generator (may be null, resulting in a default generator)\n-     * @since 3.0\n-     */\n-    public EmpiricalDistribution(int binCount, RandomGenerator generator) {\n-        this(binCount, new RandomDataGenerator(generator));\n-    }\n-\n-    /**\n-     * Creates a new EmpiricalDistribution with default bin count using the\n-     * provided {@link RandomGenerator} as the source of random data.\n-     *\n-     * @param generator random data generator (may be null, resulting in default generator)\n-     * @since 3.0\n-     */\n-    public EmpiricalDistribution(RandomGenerator generator) {\n-        this(DEFAULT_BIN_COUNT, generator);\n-    }\n-\n-    /**\n+     /**\n      * Computes the empirical distribution from the provided\n      * array of numbers.\n      *\n         } finally {\n            try {\n                in.close();\n-           } catch (IOException ex) { // NOPMD\n+           } catch (IOException ex) {\n                // ignore\n            }\n         }\n         } finally {\n             try {\n                 in.close();\n-            } catch (IOException ex) { // NOPMD\n+            } catch (IOException ex) {\n                 // ignore\n             }\n         }\n             throw new MathIllegalStateException(LocalizedFormats.DISTRIBUTION_NOT_LOADED);\n         }\n \n-        if (useRandomDataImpl) {\n-            // XXX backward compatibility.\n-            // Start with a uniformly distributed random number in (0, 1)\n-            final double x = randomData.nextUniform(0,1);\n-            // Use this to select the bin and generate a Gaussian within the bin\n-            for (int i = 0; i < binCount; i++) {\n-                if (x <= upperBounds[i]) {\n-                    SummaryStatistics stats = binStats.get(i);\n-                    if (stats.getN() > 0) {\n-                        if (stats.getStandardDeviation() > 0) {  // more than one obs\n-                            return randomData.nextGaussian(stats.getMean(),\n-                                                           stats.getStandardDeviation());\n-                        } else {\n-                            return stats.getMean(); // only one obs in bin\n-                        }\n-                    }\n-                }\n-            }\n-        } else {\n-            // Start with a uniformly distributed random number in (0, 1)\n-            final double x = randomDataGen.nextUniform(0, 1);\n-            // Use this to select the bin and generate a Gaussian within the bin\n-            for (int i = 0; i < binCount; i++) {\n-                if (x <= upperBounds[i]) {\n-                    SummaryStatistics stats = binStats.get(i);\n-                    if (stats.getN() > 0) {\n-                        if (stats.getStandardDeviation() > 0) {  // more than one obs\n-                            return randomDataGen.nextGaussian(stats.getMean(),\n-                                                              stats.getStandardDeviation());\n-                        } else {\n-                            return stats.getMean(); // only one obs in bin\n-                        }\n-                    }\n-                }\n-            }\n+        // Start with a uniformly distributed random number in (0,1)\n+        final double x = randomData.nextUniform(0,1);\n+\n+        // Use this to select the bin and generate a Gaussian within the bin\n+        for (int i = 0; i < binCount; i++) {\n+           if (x <= upperBounds[i]) {\n+               SummaryStatistics stats = binStats.get(i);\n+               if (stats.getN() > 0) {\n+                   if (stats.getStandardDeviation() > 0) {  // more than one obs\n+                       return randomData.nextGaussian(stats.getMean(),\n+                                                      stats.getStandardDeviation());\n+                   } else {\n+                       return stats.getMean(); // only one obs in bin\n+                   }\n+               }\n+           }\n         }\n         throw new MathIllegalStateException(LocalizedFormats.NO_BIN_SELECTED);\n     }\n      * @since 3.0\n      */\n     public void reSeed(long seed) {\n-        if (useRandomDataImpl) {\n-            // XXX backward compatibility.\n-            randomData.reSeed(seed);\n-        } else {\n-            randomDataGen.reSeed(seed);\n-        }\n+        randomData.reSeed(seed);\n     }\n \n     // Distribution methods ---------------------------\n      */\n     @Override\n     public void reseedRandomGenerator(long seed) {\n-        reSeed(seed);\n+        randomData.reSeed(seed);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/math3/random/ValueServer.java\n+++ b/src/main/java/org/apache/commons/math3/random/ValueServer.java\n     private BufferedReader filePointer = null;\n \n     /** RandomDataImpl to use for random data generation. */\n-    private final RandomDataGenerator randomData;\n+    private final RandomDataImpl randomData;\n \n     // Data generation modes ======================================\n \n     /** Creates new ValueServer */\n     public ValueServer() {\n-        randomData = new RandomDataGenerator();\n-    }\n-\n-    /**\n-     * Construct a ValueServer instance using a RandomDataGenerator as its source\n-     * of random data.\n-     *\n-     * @param randomData random data source\n-     * @since 3.0\n-     */\n-    public ValueServer(RandomDataGenerator randomData) {\n-        this.randomData = randomData;\n-    }\n+        randomData = new RandomDataImpl();\n+    }\n+\n     /**\n      * Construct a ValueServer instance using a RandomDataImpl as its source\n      * of random data.\n      *\n-     * @param randomData random data source\n-     * @deprecated As of 3.1. Use {@link #ValueServer(RandomDataGenerator)} instead.\n-     */\n-    @Deprecated\n+     * @param randomData the RandomDataImpl instance used to source random data\n+     * @since 3.0\n+     * @deprecated use {@link #ValueServer(RandomGenerator)}\n+     */\n     public ValueServer(RandomDataImpl randomData) {\n-        this(randomData.getDelegate());\n+        this.randomData = randomData;\n+    }\n+\n+    /**\n+     * Construct a ValueServer instance using a RandomGenerator as its source\n+     * of random data.\n+     *\n+     * @since 3.1\n+     * @param generator source of random data\n+     */\n+    public ValueServer(RandomGenerator generator) {\n+        this.randomData = new RandomDataImpl(generator);\n     }\n \n     /**\n             try {\n                 filePointer.close();\n                 filePointer = null;\n-            } catch (IOException ex) { // NOPMD\n+            } catch (IOException ex) {\n                 // ignore\n             }\n         }", "timestamp": 1355502503, "metainfo": ""}