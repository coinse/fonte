{"sha": "ae563a4e9b98a353ce9f5adf5e3a6377dea858d1", "log": "Added checks for validity of arrays supplied to constructors.   ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n  * As specified in the {@link BigMatrix} interface, matrix element indexing\n  * is 0-based -- e.g., <code>getEntry(0, 0)</code>\n  * returns the element in the first row, first column of the matrix.</li></ul>\n- * @version $Revision: 1.8 $ $Date: 2004/10/25 03:12:28 $\n+ * @version $Revision: 1.9 $ $Date: 2004/10/25 05:33:24 $\n  */\n public class BigMatrixImpl implements BigMatrix, Serializable {\n     \n      * The input array is copied, not referenced.\n      *\n      * @param d data for new matrix\n+     * @throws IllegalArgumentException if <code>d</code> is not rectangular\n+     *  (not all rows have the same length) or empty\n+     * @throws NullPointerException if <code>d</code> is null\n      */\n     public BigMatrixImpl(BigDecimal[][] d) {\n+        int nRows = d.length;\n+        if (nRows == 0) {\n+            throw new IllegalArgumentException(\n+            \"Matrix must have at least one row.\"); \n+        }\n+        int nCols = d[0].length;\n+        if (nCols == 0) {\n+            throw new IllegalArgumentException(\n+            \"Matrix must have at least one column.\"); \n+        }\n+        for (int row = 1; row < nRows; row++) {\n+            if (d[row].length != nCols) {\n+                throw new IllegalArgumentException(\n+                \"All input rows must have the same length.\");\n+            }\n+        }\n         this.copyIn(d);\n         lu = null;\n     }\n      * The input array is copied, not referenced.\n      *\n      * @param d data for new matrix\n+     * @throws IllegalArgumentException if <code>d</code> is not rectangular\n+     *  (not all rows have the same length) or empty\n+     * @throws NullPointerException if <code>d</code> is null\n      */\n     public BigMatrixImpl(double[][] d) {\n+        int nRows = d.length;\n+        if (nRows == 0) {\n+            throw new IllegalArgumentException(\n+            \"Matrix must have at least one row.\"); \n+        }\n+        int nCols = d[0].length;\n+        if (nCols == 0) {\n+            throw new IllegalArgumentException(\n+            \"Matrix must have at least one column.\"); \n+        }\n+        for (int row = 1; row < nRows; row++) {\n+            if (d[row].length != nCols) {\n+                throw new IllegalArgumentException(\n+                \"All input rows must have the same length.\");\n+            }\n+        }\n         this.copyIn(d);\n         lu = null;\n     }\n      * <code>data</code> as the underlying data array.\n      *\n      * @param d data for new matrix\n+     * @throws IllegalArgumentException if <code>d</code> is not rectangular\n+     *  (not all rows have the same length) or empty\n+     * @throws NullPointerException if <code>d</code> is null\n      */\n     public BigMatrixImpl(String[][] d) {\n+        int nRows = d.length;\n+        if (nRows == 0) {\n+            throw new IllegalArgumentException(\n+            \"Matrix must have at least one row.\"); \n+        }\n+        int nCols = d[0].length;\n+        if (nCols == 0) {\n+            throw new IllegalArgumentException(\n+            \"Matrix must have at least one column.\"); \n+        }\n+        for (int row = 1; row < nRows; row++) {\n+            if (d[row].length != nCols) {\n+                throw new IllegalArgumentException(\n+                \"All input rows must have the same length.\");\n+            }\n+        }\n         this.copyIn(d);\n         lu = null;\n     }", "timestamp": 1098682404, "metainfo": ""}