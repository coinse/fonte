{"sha": "7d903ca533833e5db8d2fe150f1e31b54ddda700", "log": "fixed an ArrayIndexOutOfBoundsException Kudos to Dimitri who debugged this mess of fortran/java array indices translation JIRA: MATH-308  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n         }\n \n         final double dCurrent = main[m - 1];\n-        work[lowerStart + m - 1] = dCurrent - eCurrent;\n-        work[upperStart + m - 1] = dCurrent + eCurrent;\n+        final double lower = dCurrent - eCurrent;\n+        work[lowerStart + m - 1] = lower;\n+        lowerSpectra = Math.min(lowerSpectra, lower);\n+        final double upper = dCurrent + eCurrent;\n+        work[upperStart + m - 1] = upper;\n+        upperSpectra = Math.max(upperSpectra, upper);\n         minPivot = MathUtils.SAFE_MIN * Math.max(1.0, eMax * eMax);\n \n     }\n \n                 tau = (range[1] - range[0]) * MathUtils.EPSILON * n + 2 * minPivot;\n \n-                // decompose T&lambda;I as LDL<sup>T</sup>\n+                // decompose T-&lambda;I as LDL<sup>T</sup>\n                 ldlTDecomposition(lambda, begin, n);\n \n                 // apply general dqd/dqds method\n                     diagMax    = work[4 * i0];\n                     offDiagMin = work[4 * i0 + 2];\n                     double previousEMin = work[4 * i0 + 3];\n-                    for (int i = 4 * i0; i < 4 * n0 - 11; i += 4) {\n-                        if ((work[i + 3] <= TOLERANCE_2 * work[i]) &&\n+                    for (int i = 4 * i0; i < 4 * n0 - 16; i += 4) {\n+                        if ((work[i + 3] <= TOLERANCE_2 * work[i]) ||\n                             (work[i + 2] <= TOLERANCE_2 * sigma)) {\n                             // insert a split\n                             work[i + 2]  = -sigma;\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                 // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n+                if (end - start > 3) {\n                     b2 = work[nn - 13] / work[nn - 15];\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n--- a/src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java\n         assertEquals(0.1, ed.getRealEigenvalue(3), 1.0e-15);\n     }\n \n+    // the following test triggered an ArrayIndexOutOfBoundsException in commons-math 2.0\n+    public void testMath308() {\n+\n+        double[] mainTridiagonal = {\n+            22.330154644539597, 46.65485522478641, 17.393672330044705, 54.46687435351116, 80.17800767709437\n+        };\n+        double[] secondaryTridiagonal = {\n+            13.04450406501361, -5.977590941539671, 2.9040909856707517, 7.1570352792841225\n+        };\n+\n+        // the reference values have been computed using routine DSTEMR\n+        // from the fortran library LAPACK version 3.2.1\n+        double[] refEigenValues = {\n+            82.044413207204002, 53.456697699894512, 52.536278520113882, 18.847969733754262, 14.138204224043099\n+        };\n+        RealVector[] refEigenVectors = {\n+            new ArrayRealVector(new double[] { -0.000462690386766, -0.002118073109055,  0.011530080757413,  0.252322434584915,  0.967572088232592 }),\n+            new ArrayRealVector(new double[] {  0.314647769490148,  0.750806415553905, -0.167700312025760, -0.537092972407375,  0.143854968127780 }),\n+            new ArrayRealVector(new double[] {  0.222368839324646,  0.514921891363332, -0.021377019336614,  0.801196801016305, -0.207446991247740 }),\n+            new ArrayRealVector(new double[] {  0.713933751051495, -0.190582113553930,  0.671410443368332, -0.056056055955050,  0.006541576993581 }),\n+            new ArrayRealVector(new double[] {  0.584677060845929, -0.367177264979103, -0.721453187784497,  0.052971054621812, -0.005740715188257 })\n+        };\n+\n+        EigenDecomposition decomposition =\n+            new EigenDecompositionImpl(mainTridiagonal, secondaryTridiagonal, MathUtils.SAFE_MIN);\n+\n+        double[] eigenValues = decomposition.getRealEigenvalues();\n+        for (int i = 0; i < refEigenValues.length; ++i) {\n+            assertEquals(refEigenValues[i], eigenValues[i], 1.0e-5);\n+            assertEquals(0, refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(), 2.0e-7);\n+        }\n+\n+    }\n+\n     /** test a matrix already in tridiagonal form. */\n     public void testTridiagonal() {\n         Random r = new Random(4366663527842l);", "timestamp": 1257285848, "metainfo": ""}