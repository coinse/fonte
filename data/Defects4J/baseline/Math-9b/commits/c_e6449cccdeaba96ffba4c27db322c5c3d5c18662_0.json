{"sha": "e6449cccdeaba96ffba4c27db322c5c3d5c18662", "log": "Changed the Complex.equals() method so that it considers +0 and -0 are equal, as required by IEEE-754 standard. JIRA: MATH-221  ", "commit": "\n--- a/src/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/java/org/apache/commons/math/complex/Complex.java\n                 if (rhs.isNaN()) {\n                     ret = this.isNaN();\n                 } else {\n-                ret = (Double.doubleToRawLongBits(real) ==\n-                        Double.doubleToRawLongBits(rhs.getReal())) &&\n-                    (Double.doubleToRawLongBits(imaginary) ==\n-                        Double.doubleToRawLongBits(rhs.getImaginary())); \n+                    ret = (real == rhs.real) && (imaginary == rhs.imaginary); \n                 }\n             } catch (ClassCastException ex) {\n                 // ignore exception\n--- a/src/test/org/apache/commons/math/complex/ComplexTest.java\n+++ b/src/test/org/apache/commons/math/complex/ComplexTest.java\n     public void testTanhCritical() {\n         TestUtils.assertSame(nanInf, new Complex(0, pi/2).tanh());\n     }\n+\n+    /** test issue MATH-221 */\n+    public void testMath221() {\n+        assertEquals(new Complex(0,-1), new Complex(0,1).multiply(new Complex(-1,0)));\n+    }\n+\n }", "timestamp": 1220024782, "metainfo": ""}