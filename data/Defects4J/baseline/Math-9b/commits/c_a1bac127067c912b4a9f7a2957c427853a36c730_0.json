{"sha": "a1bac127067c912b4a9f7a2957c427853a36c730", "log": "Added check and rescaling of expected counts to sum to sum of expected counts if necessary in ChiSquare test. JIRA: MATH-175 Reported and patched by Carl Anderson.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n         setDistribution(x);\n     }\n      /**\n+     * {@inheritDoc}\n+     * <p><strong>Note: </strong>This implementation rescales the \n+     * <code>expected</code> array if necessary to ensure that the sum of the\n+     * expected and observed counts are equal.</p>\n+     * \n      * @param observed array of observed frequency counts\n      * @param expected array of expected frequency counts\n      * @return chi-square test statistic\n      */\n     public double chiSquare(double[] expected, long[] observed)\n         throws IllegalArgumentException {\n+        if ((expected.length < 2) || (expected.length != observed.length)) {\n+            throw new IllegalArgumentException(\n+                    \"observed, expected array lengths incorrect\");\n+        }\n+        if (!isPositive(expected) || !isNonNegative(observed)) {\n+            throw new IllegalArgumentException(\n+                \"observed counts must be non-negative and expected counts must be postive\");\n+        }\n+        double sumExpected = 0d;\n+        double sumObserved = 0d;\n+        for (int i = 0; i < observed.length; i++) {\n+            sumExpected += expected[i];\n+            sumObserved += observed[i];\n+        }\n+        double ratio = 1.0d;\n+        boolean rescale = false;\n+        if (Math.abs(sumExpected - sumObserved) > 10E-6) {\n+            ratio = sumObserved / sumExpected;\n+            rescale = true;\n+        }\n         double sumSq = 0.0d;\n         double dev = 0.0d;\n-        if ((expected.length < 2) || (expected.length != observed.length)) {\n-            throw new IllegalArgumentException(\n-                    \"observed, expected array lengths incorrect\");\n-        }\n-        if (!isPositive(expected) || !isNonNegative(observed)) {\n-            throw new IllegalArgumentException(\n-                \"observed counts must be non-negative and expected counts must be postive\");\n-        }\n         for (int i = 0; i < observed.length; i++) {\n-            dev = ((double) observed[i] - expected[i]);\n-            sumSq += dev * dev / expected[i];\n+            if (rescale) {\n+                dev = ((double) observed[i] - ratio * expected[i]);\n+                sumSq += dev * dev / (ratio * expected[i]);\n+            } else {\n+                dev = ((double) observed[i] - expected[i]);\n+                sumSq += dev * dev / expected[i];\n+            }\n         }\n         return sumSq;\n     }\n \n     /**\n+     * {@inheritDoc}\n+     * <p><strong>Note: </strong>This implementation rescales the \n+     * <code>expected</code> array if necessary to ensure that the sum of the\n+     * expected and observed counts are equal.</p>\n+     * \n      * @param observed array of observed frequency counts\n      * @param expected array of exptected frequency counts\n      * @return p-value\n     }\n \n     /**\n+     * {@inheritDoc}\n+     * <p><strong>Note: </strong>This implementation rescales the \n+     * <code>expected</code> array if necessary to ensure that the sum of the\n+     * expected and observed counts are equal.</p>\n+     * \n      * @param observed array of observed frequency counts\n      * @param expected array of exptected frequency counts\n      * @param alpha significance level of the test\n--- a/src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java\n+++ b/src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java\n         \n         long[] observed1 = { 500, 623, 72, 70, 31 };\n         double[] expected1 = { 485, 541, 82, 61, 37 };\n-        assertEquals( \"chi-square test statistic\", 16.4131070362, testStatistic.chiSquare(expected1, observed1), 1E-10);\n-        assertEquals(\"chi-square p-value\", 0.002512096, testStatistic.chiSquareTest(expected1, observed1), 1E-9);\n-        assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.003));\n-        assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.002));\n+        assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);\n+        assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);\n+        assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));\n+        assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));\n \n         try {\n             testStatistic.chiSquareTest(expected1, observed1, 95);\n         double cst = csti.chiSquareTest(exp, obs); \n         assertEquals(\"chi-square p-value\", 0.0, cst, 1E-3);\n         assertEquals( \"chi-square test statistic\", \n-                3624883.342907764, testStatistic.chiSquare(exp, obs), 1E-9);\n+                114875.90421929007, testStatistic.chiSquare(exp, obs), 1E-9);\n     }\n     \n     /** Contingency table containing zeros - PR # 32531 */\n--- a/src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java\n+++ b/src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java\n         \n         long[] observed1 = { 500, 623, 72, 70, 31 };\n         double[] expected1 = { 485, 541, 82, 61, 37 };\n-        assertEquals( \"chi-square test statistic\", 16.4131070362, TestUtils.chiSquare(expected1, observed1), 1E-10);\n-        assertEquals(\"chi-square p-value\", 0.002512096, TestUtils.chiSquareTest(expected1, observed1), 1E-9);\n-        assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.003));\n-        assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.002));\n+        assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);\n+        assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);\n+        assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));\n+        assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));\n \n         try {\n             TestUtils.chiSquareTest(expected1, observed1, 95);\n         double cst = csti.chiSquareTest(exp, obs); \n         assertEquals(\"chi-square p-value\", 0.0, cst, 1E-3);\n         assertEquals( \"chi-square test statistic\", \n-                3624883.342907764, TestUtils.chiSquare(exp, obs), 1E-9);\n+                114875.90421929007, TestUtils.chiSquare(exp, obs), 1E-9);\n     }\n     \n     /** Contingency table containing zeros - PR # 32531 */", "timestamp": 1199855760, "metainfo": ""}