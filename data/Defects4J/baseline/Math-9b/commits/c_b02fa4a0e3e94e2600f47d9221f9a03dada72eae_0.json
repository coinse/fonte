{"sha": "b02fa4a0e3e94e2600f47d9221f9a03dada72eae", "log": "Added differentiator interfaces for vector and matrix functions.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java\n  * Recursive Multivariate Automatic Differentiation</a>, Mathematics Magazine, vol. 75,\n  * no. 3, June 2002.</p>. Rall's numbers are an extension to the real numbers used\n  * throughout mathematical expressions; they hold the derivative together with the\n- * value of a function. Dan Kalman's derivative structures holds all partial derivatives\n- * up to any specified order, with respect to any number of free variables. Rall's\n- * number therefore can be seen as derivative structures for order one derivative and\n- * one free variable, and real numbers can be seen as derivative structures with zero\n- * order derivative and no free variables.</p>\n+ * value of a function. Dan Kalman's derivative structures hold all partial derivatives\n+ * up to any specified order, with respect to any number of free parameters. Rall's\n+ * numbers therefore can be seen as derivative structures for order one derivative and\n+ * one free parameter, and real numbers can be seen as derivative structures with zero\n+ * order derivative and no free parameters.</p>\n  * <p>{@link DerivativeStructure} instances can be used directly thanks to\n  * the arithmetic operators to the mathematical functions provided as static\n  * methods by this class (+, -, *, /, %, sin, cos ...).</p>\n  * <p>Implementing complex expressions by hand using these classes is\n- * however a complex and error-prone task, so the classical use is\n- * simply to develop computation code using standard primitive double\n- * values and to use {@link UnivariateDifferentiator differentiators} to create\n- * the {@link DerivativeStructure}-based instances.</p>\n+ * a tedious and error-prone task but has the advantage of having no limitation\n+ * on the derivation order despite no requiring users to compute the derivatives by\n+ * themselves. Implementing complex expression can also be done by developing computation\n+ * code using standard primitive double values and to use {@link\n+ * UnivariateFunctionDifferentiator differentiators} to create the {@link\n+ * DerivativeStructure}-based instances. This method is simpler but may be limited in\n+ * the accuracy and derivation orders and may be computationally intensive (this is\n+ * typically the case for {@link FiniteDifferencesDifferentiator finite differences\n+ * differentiator).</p>\n  * <p>Instances of this class are guaranteed to be immutable.</p>\n  * @see DSCompiler\n  * @version $Id$\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiableFunction.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiableFunction.java\n  * both the value and the first derivative of a mathematical function.\n  * The derivative is computed with respect to the input variable.</p>\n  * @see UnivariateDifferentiableFunction\n- * @see UnivariateDifferentiator\n+ * @see UnivariateFunctionDifferentiator\n  * @since 3.1\n  * @version $Id$\n  */\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateFunctionDifferentiator.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.analysis.differentiation;\n+\n+import org.apache.commons.math3.analysis.UnivariateFunction;\n+\n+/** Interface defining the function differentiation operation.\n+ * @version $Id$\n+ * @since 3.1\n+ */\n+public interface UnivariateFunctionDifferentiator {\n+\n+    /** Create an implementation of a {@link UnivariateDifferentiableFunction\n+     * differential} from a regular {@link UnivariateFunction function}.\n+     * @param function function to differentiate\n+     * @return differential function\n+     */\n+    UnivariateDifferentiableFunction differentiate(UnivariateFunction function);\n+\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateMatrixFunctionDifferentiator.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.analysis.differentiation;\n+\n+import org.apache.commons.math3.analysis.UnivariateMatrixFunction;\n+\n+/** Interface defining the function differentiation operation.\n+ * @version $Id$\n+ * @since 3.1\n+ */\n+public interface UnivariateMatrixFunctionDifferentiator {\n+\n+    /** Create an implementation of a {@link UnivariateDifferentiableMatrixFunction\n+     * differential} from a regular {@link UnivariateMatrixFunction matrix function}.\n+     * @param function function to differentiate\n+     * @return differential function\n+     */\n+    UnivariateDifferentiableMatrixFunction differentiate(UnivariateMatrixFunction function);\n+\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateVectorFunctionDifferentiator.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.analysis.differentiation;\n+\n+import org.apache.commons.math3.analysis.UnivariateVectorFunction;\n+\n+/** Interface defining the function differentiation operation.\n+ * @version $Id$\n+ * @since 3.1\n+ */\n+public interface UnivariateVectorFunctionDifferentiator {\n+\n+    /** Create an implementation of a {@link UnivariateDifferentiableVectorFunction\n+     * differential} from a regular {@link UnivariateVectorFunction vector function}.\n+     * @param function function to differentiate\n+     * @return differential function\n+     */\n+    UnivariateDifferentiableVectorFunction differentiate(UnivariateVectorFunction function);\n+\n+}\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java\n  *   interface. Any differentiable function should implement this interface.\n  * </p>\n  * <p>\n+ *   The {@link UnivariateFunctionDifferentiator} interface defines a way to differentiation\n+ *   a simple {@link org.apache.commons.math3.analysis.UnivariateFunction\n+ *   univariate function} and get a {@link differential function}.\n+ * </p>\n+ * <p>\n  *   Similar interfaces also exist for multivariate functions and for vector or\n  *   matrix valued functions.\n- * </p>\n- * <p>\n- *   The {@link UnivariateDifferentiator} interface defines a way to differentiation\n- *   a simple {@link org.apache.commons.math3.analysis.UnivariateFunction\n- *   univariate function} and get a {@link differential function}.\n  * </p>\n  *\n  */", "timestamp": 1347903714, "metainfo": ""}