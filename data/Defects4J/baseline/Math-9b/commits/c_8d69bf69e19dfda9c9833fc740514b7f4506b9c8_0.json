{"sha": "8d69bf69e19dfda9c9833fc740514b7f4506b9c8", "log": "Changed to persist and expose the number of observations in the source dataset.  ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/correlation/Covariance.java\n+++ b/src/java/org/apache/commons/math/stat/correlation/Covariance.java\n  * Computes covariances for pairs of arrays or columns of a matrix.\n  * \n  * <p>The constructors that take <code>RealMatrix</code> or \n- * <code>double[][]</code> arguments generate correlation matrices.  The\n+ * <code>double[][]</code> arguments generate covariance matrices.  The\n  * columns of the input matrices are assumed to represent variable values.</p>\n  * \n  * <p>The constructor argument <code>biasCorrected</code> determines whether or\n  * \n  * <p>Unbiased covariances are given by the formula</p>\n  * <code>cov(X, Y) = &Sigma;[(x<sub>i</sub> - E(X))(y<sub>i</sub> - E(Y))] / (n - 1)</code>\n- * where <code>E(x)</code> is the mean of <code>X</code> and <code>E(Y)</code>\n+ * where <code>E(X)</code> is the mean of <code>X</code> and <code>E(Y)</code>\n  * is the mean of the <code>Y</code> values.\n  * \n  * <p>Non-bias-corrected estimates use <code>n</code> in place of <code>n - 1</code>\n     /**\n      * Create an empty covariance matrix.\n      */\n+    /** Number of observations (length of covariate vectors) */\n+    private final int n;\n+    \n+    /** \n+     * Create a Covariance with no data\n+     */\n     public Covariance() {\n         super();\n         covarianceMatrix = null;\n+        n = 0;\n     }\n     \n     /**\n      */\n     public Covariance(RealMatrix matrix, boolean biasCorrected) {\n        checkSufficientData(matrix);\n+       n = matrix.getRowDimension();\n        covarianceMatrix = computeCovariance(matrix, biasCorrected);\n     }\n     \n      */\n     public RealMatrix getCovarianceMatrix() {\n         return covarianceMatrix;\n+    }\n+    \n+    /**\n+     * Returns the number of observations (length of covariate vectors)\n+     * \n+     * @return number of observations\n+     */\n+    \n+    public int getN() {\n+        return n;\n     }\n     \n     /**", "timestamp": 1234760697, "metainfo": ""}