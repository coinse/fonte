{"sha": "d621bd129bb6bb184ffaf3000f207eaab0598948", "log": "Renamed internal field, added algorithm documentation.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java\n import org.apache.commons.math.stat.univariate.AbstractUnivariateStatistic;\n \n /**\n- * @version $Revision: 1.14 $ $Date: 2004/03/04 04:25:09 $\n+ * Provides percentile computation.\n+ * <p>\n+ * There are several commonly used methods for estimating percentiles (a.k.a. quantiles) based\n+ * on sample data.  For large samples, the different methods agree closely, but when sample sizes\n+ * are small, different methods will give significantly different results.  The implementation provided here\n+ * follows the first estimation procedure presented\n+ * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section2/prc252.htm\">here.</a>\n+ * \n+ * @version $Revision: 1.15 $ $Date: 2004/03/13 20:02:28 $\n  */\n public class Percentile extends AbstractUnivariateStatistic implements Serializable {\n \n     static final long serialVersionUID = -8091216485095130416L; \n        \n-    /** */\n-    private double percentile = 0.0;\n+    /** Determines what percentile is computed when evaluate() is activated with no quantile argument */\n+    private double quantile = 0.0;\n \n     /**\n-     * Constructs a Percentile with a default percentile\n+     * Constructs a Percentile with a default quantile\n      * value of 50.0.\n      */\n     public Percentile() {\n         super();\n-        percentile = 50.0;\n+        quantile = 50.0;\n     }\n \n     /**\n-     * Constructs a Percentile with the specific percentile value.\n-     * @param p the percentile\n+     * Constructs a Percentile with the specific quantile value.\n+     * @param p the quantile\n      */\n     public Percentile(final double p) {\n-        this.percentile = p;\n+        this.quantile = p;\n     }\n \n     /**\n-     * Evaluates the double[] top the specified percentile.\n-     * This does not alter the interal percentile state of the\n-     * statistic.\n+     * Returns an estimate of the <code>p</code>th percentile of the values\n+     * in the <code>values</code> array.\n+     * <p>\n+     * Calls to this method do not modify the internal <code>quantile</code>\n+     * state of this statistic.\n+     * <p>\n+     * See {@link Percentile} for a description of the percentile estimation algorithm used.\n+     * \n      * @param values Is a double[] containing the values\n-     * @param p Is the percentile to evaluate to.\n+     * @param p Is the quantile to evaluate to.\n      * @return the result of the evaluation or Double.NaN\n      * if the array is empty\n      */\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n+     * Returns an estimate of the <code>quantile</code>th percentile of the values\n+     * in the <code>values</code> array.  The quantile estimated is determined by\n+     * the <code>quantile</code> property.\n+     * <p>\n+     * See {@link Percentile} for a description of the percentile estimation algorithm used.\n+     * \n+     * @param values  array of input values\n+     * @param start  the first (0-based) element to include in the computation\n+     * @param length  the number of array elements to include\n+     * @return the result of the evaluation or Double.NaN\n+     * if the array is empty\n+     * \n      */\n     public double evaluate(\n         final double[] values,\n         final int start,\n         final int length) {\n \n-        return evaluate(values, start, length, percentile);\n+        return evaluate(values, start, length, quantile);\n     }\n \n-    /**\n-     * Evaluates the double[] top the specified percentile.\n-     * This does not alter the interal percentile state of the\n-     * statistic.\n+     /**\n+     * Returns an estimate of the <code>p</code>th percentile of the values\n+     * in the <code>values</code> array, starting with the element in (0-based)\n+     * position <code>begin</code> in the array and including <code>length</code>\n+     * values.\n+     * <p>\n+     * Calls to this method do not modify the internal <code>quantile</code>\n+     * state of this statistic.\n+     * <p>\n+      * See {@link Percentile} for a description of the percentile estimation algorithm used.\n+     * \n      * @param values Is a double[] containing the values\n-     * @param begin processing at this point in the array\n-     * @param length the number of elements to include\n-     * @param p Is the percentile to evaluate to.*\n+     * @param p Is the quantile to evaluate to.\n+     * @param start  the first (0-based) element to include in the computation\n+     * @param length  the number of array elements to include\n      * @return the result of the evaluation or Double.NaN\n      * if the array is empty\n      */\n         test(values, begin, length);\n \n         if ((p > 100) || (p <= 0)) {\n-            throw new IllegalArgumentException(\"invalid percentile value\");\n+            throw new IllegalArgumentException(\"invalid quantile value\");\n         }\n         double n = (double) length;\n         if (n == 0) {\n     }\n \n     /**\n-     * The default internal state of this percentile can be set.\n-     * This will return that value.\n-     * @return percentile\n+     * Returns the value of the quantile field (determines what percentile is computed when evaluate()\n+     * is called with no quantile argument)\n+     * \n+     * @return quantile\n      */\n-    public double getPercentile() {\n-        return percentile;\n+    public double getQuantile() {\n+        return quantile;\n     }\n \n     /**\n-     * The default internal state of this percentile can be set.\n-     * This will setthat value.\n-     * @param p a value between 0 <= p <= 100\n+     * Sets the value of the quantile field (determines what percentile is computed when evaluate()\n+     * is called with no quantile argument)\n+     * \n+     * @param p a value between 0 <= p <= 100 \n      */\n-    public void setPercentile(final double p) {\n-        percentile = p;\n+    public void setQuantile(final double p) {\n+        quantile = p;\n     }\n \n }", "timestamp": 1079208148, "metainfo": ""}