{"sha": "7ae55ea5d33adf3cda9860e9bd8eacaa0105711c", "log": "Initial commit of code split off from TestStatistic. Changed observed vectors to be long[] arrays and added support for independence tests using 2-way tables.   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTest.java\n+/*\n+ * Copyright 2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.inference;\n+\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ * An interface for Chi-Square tests.\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2004/05/03 03:02:25 $ \n+ */\n+public interface ChiSquareTest {\n+     \n+     /**\n+     * Computes the <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda35f.htm\">\n+     * Chi-Square statistic</a> comparing <code>observed</code> and <code>expected</code> \n+     * freqeuncy counts. \n+     * <p>\n+     * This statistic can be used to perform a Chi-Square test evaluating the null hypothesis that\n+     *  the observed counts follow the expected distribution.\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>Expected counts must all be positive.  \n+     * </li>\n+     * <li>Observed counts must all be >= 0.   \n+     * </li>\n+     * <li>The observed and expected arrays must have the same length and\n+     * their common length must be at least 2.  \n+     * </li></ul><p>\n+     * If any of the preconditions are not met, an \n+     * <code>IllegalArgumentException</code> is thrown.\n+     *\n+     * @param observed array of observed frequency counts\n+     * @param expected array of expected frequency counts\n+     * @return chiSquare statistic\n+     * @throws IllegalArgumentException if preconditions are not met\n+     */\n+    double chiSquare(double[] expected, long[] observed) \n+        throws IllegalArgumentException;\n+    \n+    /**\n+     * Returns the <i>observed significance level</i>, or <a href=\n+     * \"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n+     * p-value</a>, associated with a \n+     * <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda35f.htm\">\n+     * Chi-square goodness of fit test</a> comparing the <code>observed</code> \n+     * frequency counts to those in the <code>expected</code> array.\n+     * <p>\n+     * The number returned is the smallest significance level at which one can reject \n+     * the null hypothesis that the observed counts conform to the frequency distribution \n+     * described by the expected counts. \n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>Expected counts must all be positive.  \n+     * </li>\n+     * <li>Observed counts must all be >= 0.   \n+     * </li>\n+     * <li>The observed and expected arrays must have the same length and\n+     * their common length must be at least 2.  \n+     * </li></ul><p>\n+     * If any of the preconditions are not met, an \n+     * <code>IllegalArgumentException</code> is thrown.\n+     *\n+     * @param observed array of observed frequency counts\n+     * @param expected array of expected frequency counts\n+     * @return p-value\n+     * @throws IllegalArgumentException if preconditions are not met\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    double chiSquareTest(double[] expected, long[] observed) \n+        throws IllegalArgumentException, MathException;\n+    \n+    /**\n+     * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda35f.htm\">\n+     * Chi-square goodness of fit test</a> evaluating the null hypothesis that the observed counts \n+     * conform to the frequency distribution described by the expected counts, with \n+     * significance level <code>alpha</code>.  Returns true iff the null hypothesis can be rejected\n+     * with 100 * (1 - alpha) percent confidence.\n+     * <p>\n+     * <strong>Example:</strong><br>\n+     * To test the hypothesis that <code>observed</code> follows \n+     * <code>expected</code> at the 99% level, use <p>\n+     * <code>chiSquareTest(expected, observed, 0.01) </code>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>Expected counts must all be positive.  \n+     * </li>\n+     * <li>Observed counts must all be >= 0.   \n+     * </li>\n+     * <li>The observed and expected arrays must have the same length and\n+     * their common length must be at least 2.  \n+     * <li> <code> 0 < alpha < 0.5 </code>\n+     * </li></ul><p>\n+     * If any of the preconditions are not met, an \n+     * <code>IllegalArgumentException</code> is thrown.\n+     *\n+     * @param observed array of observed frequency counts\n+     * @param expected array of expected frequency counts\n+     * @param alpha significance level of the test\n+     * @return true iff null hypothesis can be rejected with confidence\n+     * 1 - alpha\n+     * @throws IllegalArgumentException if preconditions are not met\n+     * @throws MathException if an error occurs performing the test\n+     */\n+    boolean chiSquareTest(double[] expected, long[] observed, double alpha) \n+        throws IllegalArgumentException, MathException;\n+    \n+    /**\n+     *  Computes the Chi-Square statistic associated with a \n+     * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section4/prc45.htm\">\n+     *  chi-square test of independence</a> based on the input <code>counts</code>\n+     *  array, viewed as a two-way table.  \n+     * <p>\n+     * The rows of the 2-way table are <code>count[0], ... , count[count.length - 1] </code>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>All counts must be >= 0.  \n+     * </li>\n+     * <li>The count array must be rectangular (i.e. all count[i] subarrays must have the same length). \n+     * </li>\n+     * <li>The 2-way table represented by <code>counts</code> must have at least 2 columns and\n+     *        at least 2 rows.\n+     * </li>\n+     * </li></ul><p>\n+     * If any of the preconditions are not met, an \n+     * <code>IllegalArgumentException</code> is thrown.\n+     *\n+     * @param counts array representation of 2-way table\n+     * @return chiSquare statistic\n+     * @throws IllegalArgumentException if preconditions are not met\n+     */\n+    double chiSquare(long[][] counts) \n+    throws IllegalArgumentException;\n+    \n+    /**\n+     * Returns the <i>observed significance level</i>, or <a href=\n+     * \"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n+     * p-value</a>, associated with a \n+     * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section4/prc45.htm\">\n+     * chi-square test of independence</a> based on the input <code>counts</code>\n+     * array, viewed as a two-way table.  \n+     * <p>\n+     * The rows of the 2-way table are <code>count[0], ... , count[count.length - 1] </code>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>All counts must be >= 0.  \n+     * </li>\n+     * <li>The count array must be rectangular (i.e. all count[i] subarrays must have the same length). \n+     * </li>\n+     * <li>The 2-way table represented by <code>counts</code> must have at least 2 columns and\n+     *        at least 2 rows.\n+     * </li>\n+     * </li></ul><p>\n+     * If any of the preconditions are not met, an \n+     * <code>IllegalArgumentException</code> is thrown.\n+     *\n+     * @param counts array representation of 2-way table\n+     * @return p-value\n+     * @throws IllegalArgumentException if preconditions are not met\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    double chiSquareTest(long[][] counts) \n+    throws IllegalArgumentException, MathException;\n+    \n+    /**\n+     * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section4/prc45.htm\">\n+     * chi-square test of independence</a> evaluating the null hypothesis that the classifications \n+     * represented by the counts in the columns of the input 2-way table are independent of the rows,\n+     * with significance level <code>alpha</code>.  Returns true iff the null hypothesis can be rejected\n+     * with 100 * (1 - alpha) percent confidence.\n+     * <p>\n+     * The rows of the 2-way table are <code>count[0], ... , count[count.length - 1] </code>\n+     * <p>\n+     * <strong>Example:</strong><br>\n+     * To test the null hypothesis that the counts in <code>count[0], ... , count[count.length - 1] </code>\n+     *  all correspond to the same underlying probability distribution at the 99% level, use <p>\n+     * <code>chiSquareTest(counts, 0.01) </code>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>All counts must be >= 0.  \n+     * </li>\n+     * <li>The count array must be rectangular (i.e. all count[i] subarrays must have the same length). \n+     * </li>\n+     * <li>The 2-way table represented by <code>counts</code> must have at least 2 columns and\n+     *        at least 2 rows.\n+     * </li>\n+     * </li></ul><p>\n+     * If any of the preconditions are not met, an \n+     * <code>IllegalArgumentException</code> is thrown.\n+     *\n+     * @param observed array of observed frequency counts\n+     * @param expected array of exptected frequency counts\n+     * @param alpha significance level of the test\n+     * @return true iff null hypothesis can be rejected with confidence\n+     * 1 - alpha\n+     * @throws IllegalArgumentException if preconditions are not met\n+     * @throws MathException if an error occurs performing the test\n+     */\n+    boolean chiSquareTest(long[][] counts, double alpha) \n+    throws IllegalArgumentException, MathException;\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+/*\n+ * Copyright 2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.inference;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.math.MathException;\n+import org.apache.commons.math.distribution.DistributionFactory;\n+import org.apache.commons.math.distribution.ChiSquaredDistribution;\n+\n+/**\n+ * Implements Chi-Square test statistics defined in the {@link ChiSquareTest} interface.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2004/05/03 03:02:25 $\n+ */\n+public class ChiSquareTestImpl implements ChiSquareTest, Serializable {\n+\n+    /** Serializable version identifier */\n+   static final long serialVersionUID = 8125110460369960493L;\n+    \n+    public ChiSquareTestImpl() {\n+        super();\n+    }\n+\n+     /**\n+     * @param observed array of observed frequency counts\n+     * @param expected array of expected frequency counts\n+     * @return chi-square test statistic\n+     * @throws IllegalArgumentException if preconditions are not met\n+     * or length is less than 2\n+     */\n+    public double chiSquare(double[] expected, long[] observed)\n+        throws IllegalArgumentException {\n+        double sumSq = 0.0d;\n+        double dev = 0.0d;\n+        if ((expected.length < 2) || (expected.length != observed.length)) {\n+            throw new IllegalArgumentException(\"observed, expected array lengths incorrect\");\n+        }\n+        if (!isPositive(expected) || !isNonNegative(observed)) {\n+            throw new IllegalArgumentException(\n+                \"observed counts must be non-negative and expected counts must be postive\");\n+        }\n+        for (int i = 0; i < observed.length; i++) {\n+            dev = ((double) observed[i] - expected[i]);\n+            sumSq += dev * dev / expected[i];\n+        }\n+        return sumSq;\n+    }\n+\n+    /**\n+     * @param observed array of observed frequency counts\n+     * @param expected array of exptected frequency counts\n+     * @return p-value\n+     * @throws IllegalArgumentException if preconditions are not met\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    public double chiSquareTest(double[] expected, long[] observed)\n+        throws IllegalArgumentException, MathException {\n+        ChiSquaredDistribution chiSquaredDistribution =\n+            DistributionFactory.newInstance().createChiSquareDistribution((double) expected.length - 1);\n+        return 1 - chiSquaredDistribution.cumulativeProbability(chiSquare(expected, observed));\n+    }\n+\n+    /**\n+     * @param observed array of observed frequency counts\n+     * @param expected array of exptected frequency counts\n+     * @param alpha significance level of the test\n+     * @return true iff null hypothesis can be rejected with confidence\n+     * 1 - alpha\n+     * @throws IllegalArgumentException if preconditions are not met\n+     * @throws MathException if an error occurs performing the test\n+     */\n+    public boolean chiSquareTest(double[] expected, long[] observed, double alpha)\n+        throws IllegalArgumentException, MathException {\n+        if ((alpha <= 0) || (alpha > 0.5)) {\n+            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n+        }\n+        return (chiSquareTest(expected, observed) < alpha);\n+    }\n+    \n+    /**\n+     * @param observed array of observed frequency counts\n+     * @param expected array of expected frequency counts\n+     * @return chi-square test statistic\n+     * @throws IllegalArgumentException if preconditions are not met\n+     */\n+    public double chiSquare(long[][] counts)\n+    throws IllegalArgumentException {\n+        \n+        checkArray(counts);\n+        int nRows = counts.length;\n+        int nCols = counts[0].length;\n+        \n+        // compute row, column and total sums\n+        double[] rowSum = new double[nRows];\n+        double[] colSum = new double[nCols];\n+        double total = 0.0d;\n+        for (int row = 0; row < nRows; row++) {\n+            for (int col = 0; col < nCols; col++) {\n+                rowSum[row] += (double) counts[row][col];\n+                colSum[col] += (double) counts[row][col];\n+                total += (double) counts[row][col];\n+            }\n+        }\n+        \n+        // compute expected counts and chi-square\n+        double sumSq = 0.0d;\n+        double expected = 0.0d;\n+        for (int row = 0; row < nRows; row++) {\n+            for (int col = 0; col < nCols; col++) {\n+                expected = (rowSum[row] * colSum[col]) / total;\n+                sumSq += (((double) counts[row][col] - expected) * ((double) counts[row][col] - expected))\n+                \t/ expected; \n+            }\n+        } \n+        return sumSq;\n+    }\n+\n+    /**\n+     * @param observed array of observed frequency counts\n+     * @param expected array of exptected frequency counts\n+     * @return p-value\n+     * @throws IllegalArgumentException if preconditions are not met\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    public double chiSquareTest(long[][] counts)\n+    throws IllegalArgumentException, MathException {\n+        checkArray(counts);\n+        double df = ((double) counts.length -1) * ((double) counts[0].length - 1);\n+        ChiSquaredDistribution chiSquaredDistribution =\n+            DistributionFactory.newInstance().createChiSquareDistribution(df);\n+        return 1 - chiSquaredDistribution.cumulativeProbability(chiSquare(counts));\n+    }\n+\n+    /**\n+     * @param observed array of observed frequency counts\n+     * @param expected array of exptected frequency counts\n+     * @param alpha significance level of the test\n+     * @return true iff null hypothesis can be rejected with confidence\n+     * 1 - alpha\n+     * @throws IllegalArgumentException if preconditions are not met\n+     * @throws MathException if an error occurs performing the test\n+     */\n+    public boolean chiSquareTest(long[][] counts, double alpha)\n+    throws IllegalArgumentException, MathException {\n+        if ((alpha <= 0) || (alpha > 0.5)) {\n+            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n+        }\n+        return (chiSquareTest(counts) < alpha);\n+    }\n+    \n+    /**\n+     * Checks to make sure that the input long[][] array is rectangular,\n+     * has at least 2 rows and 2 columns, and has all non-negative entries,\n+     * throwing IllegalArgumentException if any of these checks fail.\n+     * \n+     * @param in input 2-way table to check\n+     * @throws IllegalArgumentException\n+     */\n+    private void checkArray(long[][] in) throws IllegalArgumentException {\n+        \n+        if (in.length < 2) {\n+            throw new IllegalArgumentException(\"Input table must have at least two rows\");\n+        }\n+        \n+        if (in[0].length < 2) {\n+            throw new IllegalArgumentException(\"Input table must have at least two columns\");\n+        }    \n+        \n+        if (!isRectangular(in)) {\n+            throw new IllegalArgumentException(\"Input table must be rectangular\");\n+        }\n+        \n+        if (!isNonNegative(in)) {\n+            throw new IllegalArgumentException(\"All entries in input 2-way table must be non-negative\");\n+        }\n+        \n+    }\n+    \n+    //---------------------  Private array methods -- should find a utility home for these\n+    \n+    /**\n+     * Returns true iff input array is rectangular.\n+     * Throws NullPointerException if input array is null\n+     * Throws ArrayIndexOutOfBoundsException if input array is empty\n+     * \n+     * @param in array to be tested\n+     * @return true if the array is rectangular\n+     */\n+    private boolean isRectangular(long[][] in) {\n+        for (int i = 1; i < in.length; i++) {\n+            if (in[i].length != in[0].length) {\n+                return false;\n+            }\n+        }  \n+        return true;\n+    }\n+    \n+    /**\n+     * Returns true iff all entries of the input array are > 0.\n+     * Throws NullPointerException if input array is null.\n+     * Returns true if the array is non-null, but empty\n+     * \n+     * @param in array to be tested\n+     * @return true if all entries of the array are positive\n+     */\n+    private boolean isPositive(double[] in) {\n+        for (int i = 0; i < in.length; i ++) {\n+            if (in[i] <= 0) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+    \n+    /**\n+     * Returns true iff all entries of the input array are >= 0.\n+     * Throws NullPointerException if input array is null.\n+     * Returns true if the array is non-null, but empty\n+     * \n+     * @param in array to be tested\n+     * @return true if all entries of the array are non-negative\n+     */\n+    private boolean isNonNegative(double[] in) {\n+        for (int i = 0; i < in.length; i ++) {\n+            if (in[i] < 0) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+    \n+    /**\n+     * Returns true iff all entries of the input array are > 0.\n+     * Throws NullPointerException if input array is null.\n+     * Returns true if the array is non-null, but empty\n+     * \n+     * @param in array to be tested\n+     * @return true if all entries of the array are positive\n+     */\n+    private boolean isPositive(long[] in) {\n+        for (int i = 0; i < in.length; i ++) {\n+            if (in[i] <= 0) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+    \n+    /**\n+     * Returns true iff all entries of the input array are >= 0.\n+     * Throws NullPointerException if input array is null.\n+     * Returns true if the array is non-null, but empty\n+     * \n+     * @param in array to be tested\n+     * @return true if all entries of the array are non-negative\n+     */\n+    private boolean isNonNegative(long[] in) {\n+        for (int i = 0; i < in.length; i ++) {\n+            if (in[i] < 0) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+    \n+    /**\n+     * Returns true iff all entries of (all subarrays of) the input array are > 0.\n+     * Throws NullPointerException if input array is null.\n+     * Returns true if the array is non-null, but empty\n+     * \n+     * @param in array to be tested\n+     * @return true if all entries of the array are positive\n+     */\n+    private boolean isPositive(long[][] in) {\n+        for (int i = 0; i < in.length; i ++) {\n+            for (int j = 0; j < in[i].length; j++) {\n+                if (in[i][j] <= 0) {\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+    \n+    /**\n+     * Returns true iff all entries of (all subarrays of) the input array are >= 0.\n+     * Throws NullPointerException if input array is null.\n+     * Returns true if the array is non-null, but empty\n+     * \n+     * @param in array to be tested\n+     * @return true if all entries of the array are non-negative\n+     */\n+    private boolean isNonNegative(long[][] in) {\n+        for (int i = 0; i < in.length; i ++) {\n+            for (int j = 0; j < in[i].length; j++) {\n+                if (in[i][j] <= 0) {\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+    \n+}", "timestamp": 1083553345, "metainfo": ""}