{"sha": "dc269aecaf0bfa78c4332c5e7835ce64edd221f6", "log": "converted buildArray to static, so it can be used from other static methods  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java\n \n import java.io.Serializable;\n import java.lang.reflect.Array;\n+import java.util.Arrays;\n \n import org.apache.commons.math.Field;\n import org.apache.commons.math.FieldElement;\n     /** Field to which the elements belong. */\n     private final Field<T> field;\n \n+    /**\n+     * Get the elements type from an array.\n+     * @param d data array\n+     * @return field to which array elements belong\n+     * @exception IllegalArgumentException if array is empty\n+     */\n+    protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d)\n+        throws IllegalArgumentException {\n+        if (d.length == 0) {\n+            throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one row\"); \n+        }\n+        if (d[0].length == 0) {\n+            throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one column\"); \n+        }\n+        return d[0][0].getField();\n+    }\n+\n+    /**\n+     * Get the elements type from an array.\n+     * @param d data array\n+     * @return field to which array elements belong\n+     * @exception IllegalArgumentException if array is empty\n+     */\n+    protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d)\n+        throws IllegalArgumentException {\n+        if (d.length == 0) {\n+            throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one row\"); \n+        }\n+        return d[0].getField();\n+    }\n+\n     /** Build an array of elements.\n+     * <p>\n+     * Complete arrays are filled with field.getZero()\n+     * </p>\n      * @param rows number of rows\n-     * @param columns number of columns\n+     * @param columns number of columns (may be negative to build partial\n+     * arrays in the same way <code>new Field[rows][]</code> works)\n      * @return a new array\n      */\n     @SuppressWarnings(\"unchecked\")\n-    protected T[][] buildArray(final int rows, final int columns) {\n-        return (T[][]) Array.newInstance(field.getZero().getClass(), new int[] { rows, columns });\n+    protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field,\n+                                                                  final int rows,\n+                                                                  final int columns) {\n+        if (columns < 0) {\n+            T[] dummyRow = (T[]) Array.newInstance(field.getZero().getClass(), 0); \n+            return (T[][]) Array.newInstance(dummyRow.getClass(), rows);            \n+        }\n+        T[][] array =\n+            (T[][]) Array.newInstance(field.getZero().getClass(), rows, columns);\n+        for (int i = 0; i < array.length; ++i) {\n+            Arrays.fill(array[i], field.getZero());\n+        }\n+        return array;\n     }\n \n     /** Build an array of elements.\n+     * <p>\n+     * Arrays are filled with field.getZero()\n+     * </p>\n      * @param length of the array\n      * @return a new array\n      */\n     @SuppressWarnings(\"unchecked\")\n-    protected T[] buildArray(final int length) {\n-        return (T[]) Array.newInstance(field.getZero().getClass(), length);\n+    protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field,\n+                                                                final int length) {\n+        T[] array = (T[]) Array.newInstance(field.getZero().getClass(), length);\n+        Arrays.fill(array, field.getZero());\n+        return array;\n     }\n \n     /**\n     /** {@inheritDoc} */\n     public T[][] getData() {\n \n-        final T[][] data = buildArray(getRowDimension(), getColumnDimension());\n+        final T[][] data = buildArray(field, getRowDimension(), getColumnDimension());\n \n         for (int i = 0; i < data.length; ++i) {\n             final T[] dataI = data[i];\n \n         checkRowIndex(row);\n         final int nCols = getColumnDimension();\n-        final T[] out = buildArray(nCols);\n+        final T[] out = buildArray(field, nCols);\n         for (int i = 0; i < nCols; ++i) {\n             out[i] = getEntry(row, i);\n         }\n \n         checkColumnIndex(column);\n         final int nRows = getRowDimension();\n-        final T[] out = buildArray(nRows);\n+        final T[] out = buildArray(field, nRows);\n         for (int i = 0; i < nRows; ++i) {\n             out[i] = getEntry(i, column);\n         }\n                     v.length, nCols);\n         }\n \n-        final T[] out = buildArray(nRows);\n+        final T[] out = buildArray(field, nRows);\n         for (int row = 0; row < nRows; ++row) {\n             T sum = field.getZero();\n             for (int i = 0; i < nCols; ++i) {\n                         v.getDimension(), nCols);\n             }\n \n-            final T[] out = buildArray(nRows);\n+            final T[] out = buildArray(field, nRows);\n             for (int row = 0; row < nRows; ++row) {\n                 T sum = field.getZero();\n                 for (int i = 0; i < nCols; ++i) {\n                     v.length, nRows);\n         }\n \n-        final T[] out = buildArray(nCols);\n+        final T[] out = buildArray(field, nCols);\n         for (int col = 0; col < nCols; ++col) {\n             T sum = field.getZero();\n             for (int i = 0; i < nRows; ++i) {\n                         v.getDimension(), nRows);\n             }\n \n-            final T[] out = buildArray(nCols);\n+            final T[] out = buildArray(field, nCols);\n             for (int col = 0; col < nCols; ++col) {\n                 T sum = field.getZero();\n                 for (int i = 0; i < nRows; ++i) {", "timestamp": 1240258539, "metainfo": ""}