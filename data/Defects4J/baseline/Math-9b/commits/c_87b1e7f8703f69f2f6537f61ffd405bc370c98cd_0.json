{"sha": "87b1e7f8703f69f2f6537f61ffd405bc370c98cd", "log": "New constructor that enables one to customize the behaviour at counter exhaustion (namely, select which exception to throw).   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/util/Incrementor.java\n+++ b/src/main/java/org/apache/commons/math/util/Incrementor.java\n import org.apache.commons.math.exception.MaxCountExceededException;\n \n /**\n- * Utility that increments a counter until a maximum is reached, at which\n- * point it will throw an exception.\n+ * Utility that increments a counter until a maximum is reached, at\n+ * which point, the instance will by default throw a\n+ * {@link MaxCountExceededException}.\n+ * However, the user is able to override this behaviour by defining a\n+ * custom {@link MaxCountExceededCallback callback}, in order to e.g.\n+ * select which exception must be thrown.\n  *\n  * @version $Id$\n  * @since 3.0\n     /**\n      * Current count.\n      */\n-    private int count;\n+    private int count = 0;\n+    /**\n+     * Function called at counter exhaustion.\n+     */\n+    private final MaxCountExceededCallback maxCountCallback;\n \n     /**\n      * Default constructor.\n      * @param max Maximal count.\n      */\n     public Incrementor(int max) {\n-        maximalCount = max;\n-        count = 0;\n+        this(max,\n+             new MaxCountExceededCallback() {\n+                 /** {@inheritDoc} */\n+                 public void trigger(int max) {\n+                     throw new MaxCountExceededException(max);\n+                 }\n+             });\n     }\n \n     /**\n-     * Set the upper limit for the counter.\n+     * Defines a maximal count and a callback method to be triggered at\n+     * counter exhaustion.\n+     *\n+     * @param max Maximal count.\n+     * @param cb Function to be called when the maximal count has been reached.\n+     */\n+    public Incrementor(int max,\n+                       MaxCountExceededCallback cb) {\n+        maximalCount = max;\n+        maxCountCallback = cb;\n+    }\n+\n+    /**\n+     * Sets the upper limit for the counter.\n      * This does not automatically reset the current count to zero (see\n      * {@link #resetCount()}).\n      *\n     }\n \n     /**\n-     * Get the upper limit of the counter.\n+     * Gets the upper limit of the counter.\n      *\n      * @return the counter upper limit.\n      */\n     }\n \n     /**\n-     * Get the current count.\n+     * Gets the current count.\n      *\n      * @return the current count.\n      */\n     }\n \n     /**\n-     * Check whether a single increment is allowed.\n+     * Checks whether a single increment is allowed.\n      *\n      * @return {@code false} if the next call to {@link #incrementCount(int)\n      * incrementCount} will trigger a {@code MaxCountExceededException},\n     }\n \n     /**\n-     * Perform multiple increments.\n+     * Performs multiple increments.\n      * See the other {@link #incrementCount() incrementCount} method).\n      *\n      * @param value Number of increments.\n     }\n \n     /**\n-     * Add one to the current iteration count.\n+     * Adds one to the current iteration count.\n+     * At counter exhaustion, this method will call the\n+     * {@link MaxCountExceededCallback#trigger(int) trigger} method of the\n+     * callback object passed to the\n+     * {@link #Incrementor(int,MaxCountExceededCallback) constructor}.\n+     * If not explictly set, a default callback is used that will throw\n+     * a {@code MaxCountExceededException}.\n      *\n-     * @throws MaxCountExceededException at counter exhaustion.\n+     * @throws MaxCountExceededException at counter exhaustion, unless a\n+     * custom {@link MaxCountExceededCallback callback} has been set at\n+     * construction.\n      */\n     public void incrementCount() {\n         if (++count > maximalCount) {\n-            throw new MaxCountExceededException(maximalCount);\n+            maxCountCallback.trigger(maximalCount);\n         }\n     }\n \n     /**\n-     * Reset the counter to 0.\n+     * Resets the counter to 0.\n      */\n     public void resetCount() {\n         count = 0;\n     }\n+\n+    /**\n+     * Defines a method to be called at counter exhaustion.\n+     * The {@link #trigger(int) trigger} method should usually throw an exception.\n+     */\n+    public interface MaxCountExceededCallback {\n+        /**\n+         * Function called when the maximal count has been reached.\n+         *\n+         * @param maximalCount Maximal count.\n+         */\n+        void trigger(int maximalCount);\n+    }\n }\n--- a/src/test/java/org/apache/commons/math/util/IncrementorTest.java\n+++ b/src/test/java/org/apache/commons/math/util/IncrementorTest.java\n package org.apache.commons.math.util;\n \n import org.apache.commons.math.exception.MaxCountExceededException;\n+import org.apache.commons.math.exception.TooManyEvaluationsException;\n import org.junit.Assert;\n import org.junit.Test;\n \n         i.incrementCount();\n     }\n \n+    @Test(expected=TooManyEvaluationsException.class)\n+    public void testAlternateException() {\n+        final Incrementor.MaxCountExceededCallback cb\n+            = new Incrementor.MaxCountExceededCallback() {\n+                    /** {@inheritDoc} */\n+                    public void trigger(int max) {\n+                        throw new TooManyEvaluationsException(max);\n+                    }\n+                };\n+\n+        final Incrementor i = new Incrementor(0, cb);\n+        i.incrementCount();\n+    }\n+\n     @Test\n     public void testReset() {\n         final Incrementor i = new Incrementor();", "timestamp": 1315609319, "metainfo": ""}