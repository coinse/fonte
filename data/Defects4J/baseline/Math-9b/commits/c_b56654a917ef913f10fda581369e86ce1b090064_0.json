{"sha": "b56654a917ef913f10fda581369e86ce1b090064", "log": "Additional tooling for simple JUnit testing of serialization.   ", "commit": "\n--- a/src/test/org/apache/commons/math/TestUtils.java\n+++ b/src/test/org/apache/commons/math/TestUtils.java\n \n package org.apache.commons.math;\n \n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n import org.apache.commons.math.complex.Complex;\n \n import junit.framework.Assert;\n \n /**\n- * @version $Revision: 1.7 $ $Date: 2003/11/15 18:52:31 $\n+ * @version $Revision: 1.8 $ $Date: 2003/11/19 13:26:42 $\n  */\n public class TestUtils {\n     /**\n         assertEquals(expected.getReal(), actual.getReal(), delta);\n         assertEquals(expected.getImaginary(), actual.getImaginary(), delta);\n     }\n+    \n+    public static Object serializeAndRecover(Object o){\n+        \n+        Object result = null;\n+        \n+        File tmp = null;\n+        \n+        try {\n+            \n+            // serialize the Object\n+            tmp = File.createTempFile(\"test\",\".ser\");\n+            FileOutputStream fo = new FileOutputStream(tmp);\n+            ObjectOutputStream so = new ObjectOutputStream(fo);\n+            so.writeObject(o);\n+            so.flush();\n+\n+            // deserialize the Book\n+            FileInputStream fi = new FileInputStream(tmp);\n+            ObjectInputStream si = new ObjectInputStream(fi);  \n+            result = si.readObject();\n+            \n+        }catch (Exception e) {\n+            e.printStackTrace();\n+        }finally{\n+            if(tmp != null) tmp.delete();\n+        }\n+        \n+        return result;\n+    }\n }\n--- a/src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java\n+++ b/src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.random.RandomData;\n import org.apache.commons.math.random.RandomDataImpl;\n \n /**\n  * Test cases for the {@link Univariate} class.\n  *\n- * @version $Revision: 1.1 $ $Date: 2003/11/15 16:01:41 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/19 13:26:42 $\n  */\n \n public final class DescriptiveStatisticsTest extends TestCase {\n         assertTrue(\"empty value set should return NaN\",\n             Double.isNaN(u.getPercentile(50)));\n     }\n-                                     \n+                      \n+    /** test stats */\n+    public void testSerialization() {\n+        DescriptiveStatistics u = DescriptiveStatistics.newInstance(); \n+        assertEquals(\"total count\",0,u.getN(),tolerance);\n+        u.addValue(one);\n+        u.addValue(two);\n+        \n+        DescriptiveStatistics u2 = (DescriptiveStatistics)TestUtils.serializeAndRecover(u); \n+ \n+        u2.addValue(two);\n+        u2.addValue(three);\n+        \n+        assertEquals(\"N\",n,u2.getN(),tolerance);\n+        assertEquals(\"sum\",sum,u2.getSum(),tolerance);\n+        assertEquals(\"sumsq\",sumSq,u2.getSumsq(),tolerance);\n+        assertEquals(\"var\",var,u2.getVariance(),tolerance);\n+        assertEquals(\"std\",std,u2.getStandardDeviation(),tolerance);\n+        assertEquals(\"mean\",mean,u2.getMean(),tolerance);\n+        assertEquals(\"min\",min,u2.getMin(),tolerance);\n+        assertEquals(\"max\",max,u2.getMax(),tolerance);\n+\n+        u2.clear();\n+        assertEquals(\"total count\",0,u2.getN(),tolerance);    \n+    }       \n+                                   \n }\n ", "timestamp": 1069248402, "metainfo": ""}