{"sha": "876d133334e8dde309cc11f884c0dd4cc9ce530e", "log": "fixed crashes in AbstractEstimator when some parameters are bound. getCovariances() and guessParametersErrors() now only give result about unbound parameters JIRA: MATH-200  ", "commit": "\n--- a/src/java/org/apache/commons/math/estimation/AbstractEstimator.java\n+++ b/src/java/org/apache/commons/math/estimation/AbstractEstimator.java\n     }\n \n     /**\n-     * Get the covariance matrix of estimated parameters.\n+     * Get the covariance matrix of unbound estimated parameters.\n      * @param problem estimation problem\n      * @return covariance matrix\n      * @exception EstimationException if the covariance matrix\n \n         // compute transpose(J).J, avoiding building big intermediate matrices\n         final int rows = problem.getMeasurements().length;\n-        final int cols = problem.getAllParameters().length;\n+        final int cols = problem.getUnboundParameters().length;\n         final int max  = cols * rows;\n         double[][] jTj = new double[cols][cols];\n         for (int i = 0; i < cols; ++i) {\n     }\n \n     /**\n-     * Guess the errors in estimated parameters.\n+     * Guess the errors in unbound estimated parameters.\n      * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>\n      * @param problem estimation problem\n      * @return errors in estimated parameters\n     public double[] guessParametersErrors(EstimationProblem problem)\n       throws EstimationException {\n         int m = problem.getMeasurements().length;\n-        int p = problem.getAllParameters().length;\n+        int p = problem.getUnboundParameters().length;\n         if (m <= p) {\n             throw new EstimationException(\"no degrees of freedom ({0} measurements, {1} parameters)\",\n                                           new Object[] { new Integer(m), new Integer(p)});\n         }\n-        double[] errors = new double[problem.getAllParameters().length];\n+        double[] errors = new double[problem.getUnboundParameters().length];\n         final double c = Math.sqrt(getChiSquare(problem) / (m - p));\n         double[][] covar = getCovariances(problem);\n         for (int i = 0; i < errors.length; ++i) {\n--- a/src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java\n+++ b/src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java\n \n   }\n \n+  public void testBoundParameters() throws EstimationException {\n+      EstimatedParameter[] p = {\n+        new EstimatedParameter(\"unbound0\", 2, false),\n+        new EstimatedParameter(\"unbound1\", 2, false),\n+        new EstimatedParameter(\"bound\",    2, true)\n+      };\n+      LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n+        new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\n+                              new EstimatedParameter[] { p[0], p[1], p[2] },\n+                              3.0),\n+        new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n+                              new EstimatedParameter[] { p[0], p[1], p[2] },\n+                              1.0),\n+        new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },\n+                              new EstimatedParameter[] { p[0], p[1], p[2] },\n+                              7.0)\n+      });\n+\n+      GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n+      estimator.estimate(problem);\n+      assertTrue(estimator.getRMS(problem) < 1.0e-10);\n+      double[][] covariances = estimator.getCovariances(problem);\n+      int i0 = 0, i1 = 1;\n+      if (problem.getUnboundParameters()[0].getName().endsWith(\"1\")) {\n+          i0 = 1;\n+          i1 = 0;\n+      }\n+      assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);\n+      assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);\n+      assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);\n+      assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);\n+\n+      double[] errors = estimator.guessParametersErrors(problem);\n+      assertEquals(0, errors[i0], 1.0e-10);\n+      assertEquals(0, errors[i1], 1.0e-10);\n+\n+  }\n+\n   public void testMaxIterations() {\n       Circle circle = new Circle(98.680, 47.345);\n       circle.addPoint( 30.0,  68.0);", "timestamp": 1206734814, "metainfo": ""}