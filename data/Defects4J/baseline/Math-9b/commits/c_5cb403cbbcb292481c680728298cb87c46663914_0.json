{"sha": "5cb403cbbcb292481c680728298cb87c46663914", "log": "javadoc.   ", "commit": "\n--- a/src/java/org/apache/commons/math/analysis/PolynomialFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/PolynomialFunction.java\n \n import java.io.Serializable;\n \n-import java.util.Arrays;\n-\n-import org.apache.commons.math.MathException;\n-\n /**\n  * Represents a polynomial function with real coefficients.\n  * \n- * @version $Revision: 1.6 $ $Date: 2004/02/20 06:17:54 $\n+ * @version $Revision: 1.7 $ $Date: 2004/02/22 22:01:29 $\n  */\n public class PolynomialFunction implements UnivariateRealFunction, Serializable {\n \n--- a/src/java/org/apache/commons/math/analysis/SecantSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/SecantSolver.java\n import org.apache.commons.math.MathException;\n \n /**\n- * Provide the secant algorithm for solving for zeros of real univariate\n- * functions. Because of forced bracketing, convergence is slower than\n- * the unrestricted secant algorithm. However, slow convergence of the\n- * Regula Falsi can be avoided.\n- * It will only search for one zero in the given interval.\n+ * Implements a modified version of the \n+ * <a href=\"http://mathworld.wolfram.com/SecantMethod.html\">secant method</a>\n+ * for approximating a zero of a real univariate function.  \n+ * <p>\n+ * The algorithm is modified to maintain bracketing of a root by subsequent approximations. \n+ * Because of forced bracketing, convergence may be slower than the unrestricted secant algorithm. \n+ * However, this implementation  should in general outperform the \n+ * <a href=\"http://mathworld.wolfram.com/MethodofFalsePosition.html\">regula falsi method.</a>\n+ * <p>\n  * The function is supposed to be continuous but not necessarily smooth.\n  *  \n- * @version $Revision: 1.12 $ $Date: 2004/02/18 03:24:19 $\n+ * @version $Revision: 1.13 $ $Date: 2004/02/22 22:01:29 $\n  */\n public class SecantSolver extends UnivariateRealSolverImpl implements Serializable {\n     /**\n     }\n \n     /**\n-     * Solve for a zero in the given interval.\n+     * Find a zero in the given interval.\n      * @param min the lower bound for the interval.\n      * @param max the upper bound for the interval.\n      * @param initial the start value to use (ignored).\n     }\n     \n     /**\n-     * Solve for a zero root in the given interval.\n+     * Find a zero in the given interval.\n      * @param min the lower bound for the interval.\n      * @param max the upper bound for the interval.\n      * @return the value where the function is zero\n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java\n import org.apache.commons.discovery.tools.DiscoverClass;\n \n /**\n- * A factory to easily get a default solver and some convenience\n- * functions.\n- * Because solvers are easily reusable, the factory does not\n- * store configuration data and creates preconfigured solvers\n- * (this may be controversial, because the configuration data\n- * may also be used for the default solver used by the static\n- * solve() method). \n- * @version $Revision: 1.12 $ $Date: 2004/02/21 21:35:14 $\n+ * Abstract factory class used to create {@link UnivariateRealSolver} instances.\n+ * <p>\n+ * Solvers implementing the following algorithms are supported:\n+ * <ul>\n+ * <li>Bisection</li>\n+ * <li>Brent's method</li>\n+ * <li>Secant method</li>\n+ * </ul>\n+ * Concrete factories extending this class also specify a default solver, instances of which\n+ * are returned by <code>newDefaultSolver()</code>.\n+ * <p>\n+ * Common usage:<pre>\n+ * SolverFactory factory = UnivariateRealSolverFactory.newInstance();\n+ * \n+ * // create a Brent solver to use with a UnivariateRealFunction f\n+ * BrentSolver solver = factory.newBrentSolver(f);\n+ * </pre>\n+ * \n+ * <a href=\"http://jakarta.apache.org/commons/discovery/\">Jakarta Commons Discovery</a>\n+ * is used to determine the concrete factory returned by \n+ * <code>UnivariateRealSolverFactory.newInstance().</code>  The default is\n+ * {@link UnivariateRealSolverFactoryImpl}.\n+ * \n+ * @version $Revision: 1.13 $ $Date: 2004/02/22 22:01:29 $\n  */\n public abstract class UnivariateRealSolverFactory {\n     /**\n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java\n \n \n /**\n- * A factory to easily get a default solver and some convenience\n- * functions.\n- * Because solvers are easily reusable, the factory does not\n- * store configuration data and creates preconfigured solvers\n- * (this may be controversial, because the configuration data\n- * may also be used for the default solver used by the static\n- * solve() method). \n- * @version $Revision: 1.9 $ $Date: 2004/02/21 21:35:14 $\n+ * A concrete {@link  UnivariateRealSolverFactory}.  This is the default solver factory\n+ * used by commons-math.\n+ * <p>\n+ * The default solver returned by this factory is a {@link BrentSolver}.\n+ * \n+ * @version $Revision: 1.10 $ $Date: 2004/02/22 22:01:29 $\n  */\n public class UnivariateRealSolverFactoryImpl\n     extends UnivariateRealSolverFactory implements Serializable {\n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n  * The values are ordered using the default (natural order), unless a  <code>Comparator</code>\n  *  is supplied in the constructor.\n  * \n- * @version $Revision: 1.15 $ $Date: 2004/02/21 21:35:15 $\n+ * @version $Revision: 1.16 $ $Date: 2004/02/22 22:01:29 $\n  */\n public class Frequency implements Serializable {\n     \n     //-------------------------------------------------------------\n \n     /**\n-     * Returns the percentage of values = v (as a proportion -- i.e. between 0 and 1).\n+      * Returns the cumulative percentatge of values less than or equal to v\n+     * (as a proportion between 0 and 1).\n      * @param v the value to lookup.\n      * @return the proportion of values equal to v\n      */\n     }\n     \n     /**\n-     * Returns the percentage of values = v (as a proportion -- i.e. between 0 and 1).\n+      * Returns the cumulative percentatge of values less than or equal to v\n+     * (as a proportion between 0 and 1).\n      * @param v the value to lookup.\n      * @return the proportion of values equal to v\n      */\n     }\n     \n     /**\n-     * Returns the percentage of values = v (as a proportion -- i.e. between 0 and 1).\n+      * Returns the cumulative percentatge of values less than or equal to v\n+     * (as a proportion between 0 and 1).\n      * @param v the value to lookup.\n      * @return the proportion of values equal to v\n      */\n     }\n     \n     /**\n-     * Returns the percentage of values = v (as a proportion -- i.e. between 0 and 1).\n+     * Returns the cumulative percentatge of values less than or equal to v\n+     * (as a proportion between 0 and 1).\n      * @param v the value to lookup.\n      * @return the proportion of values equal to v\n      */", "timestamp": 1077487289, "metainfo": ""}