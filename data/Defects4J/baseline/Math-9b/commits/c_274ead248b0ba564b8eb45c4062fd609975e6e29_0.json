{"sha": "274ead248b0ba564b8eb45c4062fd609975e6e29", "log": "improved test coverage  ", "commit": "\n--- a/src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java\n         assertEquals(0.1, ed.getEigenvalue(3), 1.0e-15);\n     }\n \n+    public void testAbsoluteSplit() {\n+        RealMatrix matrix =\n+            new RealMatrixImpl(new double[][] {\n+                                   {      0.784,     -0.288,       0.000,  0.000 },\n+                                   { Double.NaN,      0.616,       0.000,  0.000 },\n+                                   { Double.NaN, Double.NaN,       0.164, -0.048 },\n+                                   { Double.NaN, Double.NaN,  Double.NaN,  0.136 }\n+                               }, false);\n+        EigenDecompositionImpl ed = new EigenDecompositionImpl();\n+        ed.setAbsoluteSplitTolerance(1.0e-13);\n+        ed.decompose(matrix);\n+        assertEquals(1.0, ed.getEigenvalue(0), 1.0e-15);\n+        assertEquals(0.4, ed.getEigenvalue(1), 1.0e-15);\n+        assertEquals(0.2, ed.getEigenvalue(2), 1.0e-15);\n+        assertEquals(0.1, ed.getEigenvalue(3), 1.0e-15);\n+    }\n+\n     public void testDimension4WithoutSplit() {\n         RealMatrix matrix =\n             new RealMatrixImpl(new double[][] {\n         RealMatrix vTv = v.transpose().multiply(v);\n         RealMatrix id  = MatrixUtils.createRealIdentityMatrix(vTv.getRowDimension());\n         assertEquals(0, vTv.subtract(id).getNorm(), 2.0e-13);\n+    }\n+\n+    /** test non invertible matrix */\n+    public void testNonInvertible() {\n+        Random r = new Random(9994100315209l);\n+        EigenDecomposition ed =\n+            new EigenDecompositionImpl(createTestMatrix(r, new double[] { 1.0, 0.0, -1.0, -2.0, -3.0 }));\n+        assertFalse(ed.isNonSingular());\n+        try {\n+            ed.getInverse();\n+            fail(\"an exception should have been thrown\");\n+        } catch (InvalidMatrixException ime) {\n+            // expected behavior\n+        } catch (Exception e) {\n+            fail(\"wrong exception caught\");\n+        }\n+    }\n+\n+    /** test invertible matrix */\n+    public void testInvertible() {\n+        Random r = new Random(9994100315209l);\n+        RealMatrix m =\n+            createTestMatrix(r, new double[] { 1.0, 0.5, -1.0, -2.0, -3.0 });\n+        EigenDecomposition ed = new EigenDecompositionImpl(m);\n+        assertTrue(ed.isNonSingular());\n+        RealMatrix inverse = ed.getInverse();\n+        RealMatrix error =\n+            m.multiply(inverse).subtract(MatrixUtils.createRealIdentityMatrix(m.getRowDimension()));\n+        assertEquals(0, error.getNorm(), 4.0e-15);\n+    }\n+\n+    /** test diagonal matrix */\n+    public void testDiagonal() {\n+        double[] diagonal = new double[] { -3.0, -2.0, 2.0, 5.0 };\n+        EigenDecomposition ed =\n+            new EigenDecompositionImpl(createDiagonalMatrix(diagonal, diagonal.length, diagonal.length));\n+        assertEquals(diagonal[0], ed.getEigenvalue(3), 2.0e-15);\n+        assertEquals(diagonal[1], ed.getEigenvalue(2), 2.0e-15);\n+        assertEquals(diagonal[2], ed.getEigenvalue(1), 2.0e-15);\n+        assertEquals(diagonal[3], ed.getEigenvalue(0), 2.0e-15);\n     }\n \n     /** test solve dimension errors */", "timestamp": 1228228500, "metainfo": ""}