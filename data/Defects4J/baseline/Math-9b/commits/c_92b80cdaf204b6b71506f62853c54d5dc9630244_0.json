{"sha": "92b80cdaf204b6b71506f62853c54d5dc9630244", "log": "Implemented equals and hashCode.   ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n  */\n \n package org.apache.commons.math.linear;\n+\n import java.io.Serializable;\n+import org.apache.commons.math.util.MathUtils;\n+\n \n /**\n  * Implementation for RealMatrix using a double[][] array to store entries\n  * is 0-based -- e.g., <code>getEntry(0, 0)</code>\n  * returns the element in the first row, first column of the matrix.</li></ul>\n  *\n- * @version $Revision: 1.30 $ $Date: 2004/10/09 22:39:22 $\n+ * @version $Revision: 1.31 $ $Date: 2004/10/10 05:23:16 $\n  */\n public class RealMatrixImpl implements RealMatrix, Serializable {\n-\n+    \n     /** Serializable version identifier */\n     static final long serialVersionUID = 4237564493130426188L;\n \n      * The input array is copied, not referenced.\n      *\n      * @param d data for new matrix\n+     * @throws IllegalArgumentException if data is not rectangular (not all\n+     *  rows have the same length) or data is empty\n+     * @throws NullPointerException if data is null\n      */\n     public RealMatrixImpl(double[][] d) {\n+        int nRows = d.length;\n+        if (nRows == 0) {\n+            throw new IllegalArgumentException(\n+                    \"Matrix must have at least one row.\"); \n+        }\n+        int nCols = d[0].length;\n+        if (nCols == 0) {\n+            throw new IllegalArgumentException(\n+            \"Matrix must have at least one column.\"); \n+        }\n+        for (int row = 1; row < nRows; row++) {\n+            if (d[row].length != nCols) {\n+                throw new IllegalArgumentException(\n+                    \"All input rows must have the same length.\");\n+            }\n+        }\n         this.copyIn(d);\n         lu = null;\n     }\n         res.append(\"}\");\n         return res.toString();\n     } //toString\n+    \n+    /**\n+     * Returns true iff <code>object</code> is a \n+     * <code>RealMatrixImpl</code> instance with the same dimensions as this\n+     *  and all corresponding matrix entries are equal.\n+     * \n+     * @param object the object to test equality against.\n+     * @return true if object equals this\n+     */\n+    public boolean equals(Object object) {\n+        if (object == this ) {\n+            return true;\n+        }\n+        if (object instanceof RealMatrixImpl == false) {\n+            return false;\n+        }\n+        RealMatrix m = (RealMatrix) object;\n+        int nRows = getRowDimension();\n+        int nCols = getColumnDimension();\n+        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {\n+            return false;\n+        }\n+        for (int row = 0; row < nRows; row++) {\n+            for (int col = 0; col < nCols; col++) {\n+                if (data[row][col] != m.getEntry(row, col)) {\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+    \n+    /**\n+     * Computes a hashcode for the matrix.\n+     * \n+     * @return hashcode for matrix\n+     */\n+    public int hashCode() {\n+        int ret = 7;\n+        int nRows = getRowDimension();\n+        int nCols = getColumnDimension();\n+        ret = ret * 31 + nRows;\n+        ret = ret * 31 + nCols;\n+        for (int row = 0; row < nRows; row++) {\n+           for (int col = 0; col < nCols; col++) {\n+               ret = ret * 31 + (11 * row + 17 * col) * \n+                   MathUtils.hash(data[row][col]);\n+           }\n+        }   \n+        return ret;\n+    }\n \n     //------------------------ Protected methods\n \n--- a/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n /**\n  * Test cases for the {@link RealMatrixImpl} class.\n  *\n- * @version $Revision: 1.17 $ $Date: 2004/10/09 22:39:22 $\n+ * @version $Revision: 1.18 $ $Date: 2004/10/10 05:23:16 $\n  */\n \n public final class RealMatrixImplTest extends TestCase {\n         RealMatrix mRows03Cols123 = new RealMatrixImpl(subRows03Cols123);\n         RealMatrix mRows20Cols123 = new RealMatrixImpl(subRows20Cols123);\n         RealMatrix mRows31Cols31 = new RealMatrixImpl(subRows31Cols31);\n-        assertClose(\"Rows23Cols00\", mRows23Cols00, \n-                m.getSubMatrix(2 , 3 , 0, 0), normTolerance );\n-        assertClose(\"Rows00Cols33\", mRows00Cols33, \n-                m.getSubMatrix(0 , 0 , 3, 3), normTolerance );\n-        assertClose(\"Rows01Cols23\", mRows01Cols23,\n-                m.getSubMatrix(0 , 1 , 2, 3), normTolerance );   \n-        assertClose(\"Rows02Cols13\", mRows02Cols13,\n-                m.getSubMatrix(new int[] {0,2}, new int[] {1,3}), normTolerance);  \n-        assertClose(\"Rows03Cols12\", mRows03Cols12,\n-                m.getSubMatrix(new int[] {0,3}, new int[] {1,2}), normTolerance);  \n-        assertClose(\"Rows03Cols123\", mRows03Cols123,\n-                m.getSubMatrix(new int[] {0,3}, new int[] {1,2,3}), normTolerance); \n-        assertClose(\"Rows20Cols123\", mRows20Cols123,\n-                m.getSubMatrix(new int[] {2,0}, new int[] {1,2,3}), normTolerance); \n-        assertClose(\"Rows31Cols31\", mRows31Cols31,\n-                m.getSubMatrix(new int[] {3,1}, new int[] {3,1}), normTolerance); \n+        assertEquals(\"Rows23Cols00\", mRows23Cols00, \n+                m.getSubMatrix(2 , 3 , 0, 0));\n+        assertEquals(\"Rows00Cols33\", mRows00Cols33, \n+                m.getSubMatrix(0 , 0 , 3, 3));\n+        assertEquals(\"Rows01Cols23\", mRows01Cols23,\n+                m.getSubMatrix(0 , 1 , 2, 3));   \n+        assertEquals(\"Rows02Cols13\", mRows02Cols13,\n+                m.getSubMatrix(new int[] {0,2}, new int[] {1,3}));  \n+        assertEquals(\"Rows03Cols12\", mRows03Cols12,\n+                m.getSubMatrix(new int[] {0,3}, new int[] {1,2}));  \n+        assertEquals(\"Rows03Cols123\", mRows03Cols123,\n+                m.getSubMatrix(new int[] {0,3}, new int[] {1,2,3})); \n+        assertEquals(\"Rows20Cols123\", mRows20Cols123,\n+                m.getSubMatrix(new int[] {2,0}, new int[] {1,2,3})); \n+        assertEquals(\"Rows31Cols31\", mRows31Cols31,\n+                m.getSubMatrix(new int[] {3,1}, new int[] {3,1})); \n+        assertEquals(\"Rows31Cols31\", mRows31Cols31,\n+                m.getSubMatrix(new int[] {3,1}, new int[] {3,1})); \n+        \n         try {\n             m.getSubMatrix(1,0,2,4);\n             fail(\"Expecting MatrixIndexException\");\n         RealMatrix m = new RealMatrixImpl(subTestData);\n         RealMatrix mRow0 = new RealMatrixImpl(subRow0);\n         RealMatrix mRow3 = new RealMatrixImpl(subRow3);\n-        assertClose(\"Row0\", mRow0, \n-                m.getRowMatrix(0), normTolerance );\n-        assertClose(\"Row3\", mRow3, \n-                m.getRowMatrix(3), normTolerance );\n+        assertEquals(\"Row0\", mRow0, \n+                m.getRowMatrix(0));\n+        assertEquals(\"Row3\", mRow3, \n+                m.getRowMatrix(3));\n         try {\n             m.getRowMatrix(-1);\n             fail(\"Expecting MatrixIndexException\");\n         RealMatrix m = new RealMatrixImpl(subTestData);\n         RealMatrix mColumn1 = new RealMatrixImpl(subColumn1);\n         RealMatrix mColumn3 = new RealMatrixImpl(subColumn3);\n-        assertClose(\"Column1\", mColumn1, \n-                m.getColumnMatrix(1), normTolerance );\n-        assertClose(\"Column3\", mColumn3, \n-                m.getColumnMatrix(3), normTolerance );\n+        assertEquals(\"Column1\", mColumn1, \n+                m.getColumnMatrix(1));\n+        assertEquals(\"Column3\", mColumn3, \n+                m.getColumnMatrix(3));\n         try {\n             m.getColumnMatrix(-1);\n             fail(\"Expecting MatrixIndexException\");\n         } catch (MatrixIndexException ex) {\n             // expected\n         }\n+    }\n+    \n+    public void testEqualsAndHashCode() {\n+        RealMatrixImpl m = new RealMatrixImpl(testData);\n+        RealMatrixImpl m1 = (RealMatrixImpl) m.copy();\n+        RealMatrixImpl mt = (RealMatrixImpl) m.transpose();\n+        assertTrue(m.hashCode() != mt.hashCode());\n+        assertEquals(m.hashCode(), m1.hashCode());\n+        assertEquals(m, m);\n+        assertEquals(m, m1);\n+        assertFalse(m.equals(null));\n+        assertFalse(m.equals(mt));\n     }\n     \n     //--------------- -----------------Protected methods", "timestamp": 1097385796, "metainfo": ""}