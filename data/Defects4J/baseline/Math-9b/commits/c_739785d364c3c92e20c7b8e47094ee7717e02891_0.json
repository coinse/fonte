{"sha": "739785d364c3c92e20c7b8e47094ee7717e02891", "log": "Removed usage of deprecated classes.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java\n \n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.NoDataException;\n+import org.apache.commons.math3.exception.NotPositiveException;\n import org.apache.commons.math3.util.MathArrays;\n-import org.apache.commons.math3.optimization.general.GaussNewtonOptimizer;\n-import org.apache.commons.math3.optimization.fitting.PolynomialFitter;\n+import org.apache.commons.math3.util.Precision;\n+import org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer;\n+import org.apache.commons.math3.fitting.PolynomialFitter;\n import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;\n+import org.apache.commons.math3.optim.SimpleVectorValueChecker;\n \n /**\n  * Generates a bicubic interpolation function.\n     extends BicubicSplineInterpolator {\n     /** Fitter for x. */\n     private final PolynomialFitter xFitter;\n+    /** Degree of the fitting polynomial. */\n+    private final int xDegree;\n     /** Fitter for y. */\n     private final PolynomialFitter yFitter;\n+    /** Degree of the fitting polynomial. */\n+    private final int yDegree;\n \n     /**\n      * Default constructor. The degree of the fitting polynomials is set to 3.\n      */\n     public SmoothingPolynomialBicubicSplineInterpolator(int xDegree,\n                                                         int yDegree) {\n-        xFitter = new PolynomialFitter(xDegree, new GaussNewtonOptimizer(false));\n-        yFitter = new PolynomialFitter(yDegree, new GaussNewtonOptimizer(false));\n+        if (xDegree < 0) {\n+            throw new NotPositiveException(xDegree);\n+        }\n+        if (yDegree < 0) {\n+            throw new NotPositiveException(yDegree);\n+        }\n+        this.xDegree = xDegree;\n+        this.yDegree = yDegree;\n+\n+        final double safeFactor = 1e2;\n+        final SimpleVectorValueChecker checker\n+            = new SimpleVectorValueChecker(safeFactor * Precision.EPSILON,\n+                                           safeFactor * Precision.SAFE_MIN);\n+        xFitter = new PolynomialFitter(new GaussNewtonOptimizer(false, checker));\n+        yFitter = new PolynomialFitter(new GaussNewtonOptimizer(false, checker));\n     }\n \n     /**\n                 xFitter.addObservedPoint(1, xval[i], fval[i][j]);\n             }\n \n-            yPolyX[j] = new PolynomialFunction(xFitter.fit());\n+            // Initial guess for the fit is zero for each coefficients (of which\n+            // there are \"xDegree\" + 1).\n+            yPolyX[j] = new PolynomialFunction(xFitter.fit(new double[xDegree + 1]));\n         }\n \n         // For every knot (xval[i], yval[j]) of the grid, calculate corrected\n                 yFitter.addObservedPoint(1, yval[j], fval_1[i][j]);\n             }\n \n-            xPolyY[i] = new PolynomialFunction(yFitter.fit());\n+            // Initial guess for the fit is zero for each coefficients (of which\n+            // there are \"yDegree\" + 1).\n+            xPolyY[i] = new PolynomialFunction(yFitter.fit(new double[yDegree + 1]));\n         }\n \n         // For every knot (xval[i], yval[j]) of the grid, calculate corrected", "timestamp": 1355854065, "metainfo": ""}