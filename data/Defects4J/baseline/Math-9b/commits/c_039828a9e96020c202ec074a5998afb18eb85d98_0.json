{"sha": "039828a9e96020c202ec074a5998afb18eb85d98", "log": "MATH-854 Populate \"throws\" clause.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java\n      */\n     public Gaussian(double norm,\n                     double mean,\n-                    double sigma) {\n+                    double sigma)\n+        throws NotStrictlyPositiveException {\n         if (sigma <= 0) {\n             throw new NotStrictlyPositiveException(sigma);\n         }\n      * @throws NotStrictlyPositiveException if {@code sigma <= 0}.\n      */\n     public Gaussian(double mean,\n-                    double sigma) {\n+                    double sigma)\n+        throws NotStrictlyPositiveException {\n         this(1 / (sigma * FastMath.sqrt(2 * Math.PI)), mean, sigma);\n     }\n \n          * not 3.\n          * @throws NotStrictlyPositiveException if {@code param[2]} is negative.\n          */\n-        public double value(double x, double ... param) {\n+        public double value(double x, double ... param)\n+            throws NullArgumentException,\n+                   DimensionMismatchException,\n+                   NotStrictlyPositiveException {\n             validateParameters(param);\n \n             final double diff = x - param[1];\n          * not 3.\n          * @throws NotStrictlyPositiveException if {@code param[2]} is negative.\n          */\n-        public double[] gradient(double x, double ... param) {\n+        public double[] gradient(double x, double ... param)\n+            throws NullArgumentException,\n+                   DimensionMismatchException,\n+                   NotStrictlyPositiveException {\n             validateParameters(param);\n \n             final double norm = param[0];\n          * not 3.\n          * @throws NotStrictlyPositiveException if {@code param[2]} is negative.\n          */\n-        private void validateParameters(double[] param) {\n+        private void validateParameters(double[] param)\n+            throws NullArgumentException,\n+                   DimensionMismatchException,\n+                   NotStrictlyPositiveException {\n             if (param == null) {\n                 throw new NullArgumentException();\n             }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java\n          * @throws DimensionMismatchException if the size of {@code param} is\n          * not 3.\n          */\n-        public double value(double x, double ... param) {\n+        public double value(double x, double ... param)\n+            throws NullArgumentException,\n+                   DimensionMismatchException {\n             validateParameters(param);\n             return HarmonicOscillator.value(x * param[1] + param[2], param[0]);\n         }\n          * @throws DimensionMismatchException if the size of {@code param} is\n          * not 3.\n          */\n-        public double[] gradient(double x, double ... param) {\n+        public double[] gradient(double x, double ... param)\n+            throws NullArgumentException,\n+                   DimensionMismatchException {\n             validateParameters(param);\n \n             final double amplitude = param[0];\n          * @throws DimensionMismatchException if the size of {@code param} is\n          * not 3.\n          */\n-        private void validateParameters(double[] param) {\n+        private void validateParameters(double[] param)\n+            throws NullArgumentException,\n+                   DimensionMismatchException {\n             if (param == null) {\n                 throw new NullArgumentException();\n             }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Logistic.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Logistic.java\n                     double b,\n                     double q,\n                     double a,\n-                    double n) {\n+                    double n)\n+        throws NotStrictlyPositiveException {\n         if (n <= 0) {\n             throw new NotStrictlyPositiveException(n);\n         }\n          * @throws DimensionMismatchException if the size of {@code param} is\n          * not 6.\n          */\n-        public double value(double x, double ... param) {\n+        public double value(double x, double ... param)\n+            throws NullArgumentException,\n+                   DimensionMismatchException,\n+                   NotStrictlyPositiveException {\n             validateParameters(param);\n             return Logistic.value(param[1] - x, param[0],\n                                   param[2], param[3],\n          * @throws DimensionMismatchException if the size of {@code param} is\n          * not 6.\n          */\n-        public double[] gradient(double x, double ... param) {\n+        public double[] gradient(double x, double ... param)\n+            throws NullArgumentException,\n+                   DimensionMismatchException,\n+                   NotStrictlyPositiveException {\n             validateParameters(param);\n \n             final double b = param[2];\n          * methods.\n          *\n          * @param param Values for {@code k}, {@code m}, {@code b}, {@code q},\n-         * {@code a} and  {@code n}.\n+         * {@code a} and {@code n}.\n          * @throws NullArgumentException if {@code param} is {@code null}.\n          * @throws DimensionMismatchException if the size of {@code param} is\n          * not 6.\n          */\n-        private void validateParameters(double[] param) {\n+        private void validateParameters(double[] param)\n+            throws NullArgumentException,\n+                   DimensionMismatchException,\n+                   NotStrictlyPositiveException {\n             if (param == null) {\n                 throw new NullArgumentException();\n             }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Logit.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Logit.java\n     }\n \n     /** {@inheritDoc} */\n-    public double value(double x) {\n+    public double value(double x)\n+        throws OutOfRangeException {\n         return value(x, lo, hi);\n     }\n \n          * @throws DimensionMismatchException if the size of {@code param} is\n          * not 2.\n          */\n-        public double value(double x, double ... param) {\n+        public double value(double x, double ... param)\n+            throws NullArgumentException,\n+                   DimensionMismatchException {\n             validateParameters(param);\n             return Logit.value(x, param[0], param[1]);\n         }\n          * @throws DimensionMismatchException if the size of {@code param} is\n          * not 2.\n          */\n-        public double[] gradient(double x, double ... param) {\n+        public double[] gradient(double x, double ... param)\n+            throws NullArgumentException,\n+                   DimensionMismatchException {\n             validateParameters(param);\n \n             final double lo = param[0];\n          * @throws DimensionMismatchException if the size of {@code param} is\n          * not 2.\n          */\n-        private void validateParameters(double[] param) {\n+        private void validateParameters(double[] param)\n+            throws NullArgumentException,\n+                   DimensionMismatchException {\n             if (param == null) {\n                 throw new NullArgumentException();\n             }\n      */\n     private static double value(double x,\n                                 double lo,\n-                                double hi) {\n+                                double hi)\n+        throws OutOfRangeException {\n         if (x < lo || x > hi) {\n             throw new OutOfRangeException(x, lo, hi);\n         }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java\n          * @throws DimensionMismatchException if the size of {@code param} is\n          * not 2.\n          */\n-        public double value(double x, double ... param) {\n+        public double value(double x, double ... param)\n+            throws NullArgumentException,\n+                   DimensionMismatchException {\n             validateParameters(param);\n             return Sigmoid.value(x, param[0], param[1]);\n         }\n          * @throws DimensionMismatchException if the size of {@code param} is\n          * not 2.\n          */\n-        public double[] gradient(double x, double ... param) {\n+        public double[] gradient(double x, double ... param)\n+            throws NullArgumentException,\n+                   DimensionMismatchException {\n             validateParameters(param);\n \n             final double invExp1 = 1 / (1 + FastMath.exp(-x));\n          * @throws DimensionMismatchException if the size of {@code param} is\n          * not 2.\n          */\n-        private void validateParameters(double[] param) {\n+        private void validateParameters(double[] param)\n+            throws NullArgumentException,\n+                   DimensionMismatchException {\n             if (param == null) {\n                 throw new NullArgumentException();\n             }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/StepFunction.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/StepFunction.java\n      * have the same length.\n      */\n     public StepFunction(double[] x,\n-                        double[] y) {\n+                        double[] y)\n+        throws NullArgumentException,\n+               NoDataException,\n+               DimensionMismatchException {\n         if (x == null ||\n             y == null) {\n             throw new NullArgumentException();", "timestamp": 1346368737, "metainfo": ""}