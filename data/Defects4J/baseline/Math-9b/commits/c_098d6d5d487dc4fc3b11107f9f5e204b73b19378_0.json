{"sha": "098d6d5d487dc4fc3b11107f9f5e204b73b19378", "log": "fixed a spurious exception in EigenDecompositionImpl when a 3x3 block had two identical eigenvalues  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n \n         // solve cubic equation\n         final double b2       = b * b;\n+        final double beta     = b / 3;\n         final double q        = (3 * c - b2) / 9;\n         final double r        = ((9 * c - 2 * b2) * b - 27 * d) / 54;\n         final double delta    = q * q * q + r * r;\n-        if (delta >= 0) {\n-            // in fact, there are solutions to the equation, but in the context\n-            // of symmetric realEigenvalues problem, there should be three distinct\n-            // real roots, so we throw an error if this condition is not met\n+        double z0;\n+        double z1;\n+        double z2;\n+        if (delta > 0) {\n+            // there are two complex solutions, we cannot handle this\n             throw new InvalidMatrixException(\"cannot solve degree {0} equation\", 3);\n-        }\n-        final double sqrtMq = Math.sqrt(-q);\n-        final double theta  = Math.acos(r / (-q * sqrtMq));\n-        final double alpha  = 2 * sqrtMq;\n-        final double beta   = b / 3;\n-\n-        double z0 = alpha * Math.cos(theta / 3) - beta;\n-        double z1 = alpha * Math.cos((theta + 2 * Math.PI) / 3) - beta;\n-        double z2 = alpha * Math.cos((theta + 4 * Math.PI) / 3) - beta;\n+        } else if (delta < 0) {\n+            // three different real roots\n+            final double sqrtMq = Math.sqrt(-q);\n+            final double theta  = Math.acos(r / (-q * sqrtMq));\n+            final double alpha  = 2 * sqrtMq;\n+            z0 = alpha * Math.cos(theta / 3) - beta;\n+            z1 = alpha * Math.cos((theta + 2 * Math.PI) / 3) - beta;\n+            z2 = alpha * Math.cos((theta + 4 * Math.PI) / 3) - beta;\n+        } else {\n+            // three real roots, two of which are equal\n+            final double cbrtR = Math.cbrt(r);\n+            z0 = 2 * cbrtR - beta;\n+            z1 = -cbrtR - beta;\n+            z2 = z1;\n+        }\n+\n+        // sort the eigenvalues\n         if (z0 < z1) {\n             final double t = z0;\n             z0 = z1;\n             z0 = z1;\n             z1 = t;\n         }\n+\n         realEigenvalues[index]     = z0;\n         realEigenvalues[index + 1] = z1;\n         realEigenvalues[index + 2] = z2;\n--- a/src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java\n         assertEquals(50000.0, ed.getRealEigenvalue(0), 3.0e-11);\n         assertEquals(12500.0, ed.getRealEigenvalue(1), 3.0e-11);\n         assertEquals( 3125.0, ed.getRealEigenvalue(2), 3.0e-11);\n+    }\n+\n+    public void testDimension3MultipleRoot() {\n+        RealMatrix matrix =\n+            MatrixUtils.createRealMatrix(new double[][] {\n+                    {  5,   10,   15 },\n+                    { 10,   20,   30 },\n+                    { 15,   30,   45 }\n+            });\n+        EigenDecomposition ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);\n+        assertEquals(70.0, ed.getRealEigenvalue(0), 3.0e-11);\n+        assertEquals(0.0,  ed.getRealEigenvalue(1), 3.0e-11);\n+        assertEquals(0.0,  ed.getRealEigenvalue(2), 3.0e-11);\n     }\n \n     public void testDimension4WithSplit() {", "timestamp": 1264784908, "metainfo": ""}