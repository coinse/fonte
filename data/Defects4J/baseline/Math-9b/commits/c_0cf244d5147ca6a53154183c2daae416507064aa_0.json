{"sha": "0cf244d5147ca6a53154183c2daae416507064aa", "log": "Added one-way ANOVA implementation. JIRA: MATH-173 Contributed by Bob MacCallum.   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/inference/OneWayAnova.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.inference;\n+\n+import org.apache.commons.math.MathException;\n+import java.util.Collection;\n+\n+/**\n+ * An interface for one-way ANOVA (analysis of variance). \n+ *\n+ * <p> Tests for differences between two or more categories of univariate data\n+ * (for example, the body mass index of accountants, lawyers, doctors and\n+ * computer programmers).  When two categories are given, this is equivalent to\n+ * the {@link org.apache.commons.math.stat.inference.TTest}.\n+ * </p>\n+ *\n+ * @since 1.2\n+ * @version $Revision$ $Date$ \n+ */\n+public interface OneWayAnova {\n+    /**\n+     * Computes the ANOVA F-value for a collection of <code>double[]</code>\n+     * arrays.\n+     * \n+     * <p><strong>Preconditions</strong>: <ul>\n+     * <li>The categoryData <code>Collection</code> must contain\n+     * <code>double[]</code> arrays.</li>\n+     * <li> There must be at least two <code>double[]</code> arrays in the\n+     * <code>categoryData</code> collection and each of these arrays must\n+     * contain at least two values.</li></ul></p>\n+     *\n+     * @param categoryData <code>Collection</code> of <code>double[]</code>\n+     * arrays each containing data for one category\n+     * @return Fvalue\n+     * @throws IllegalArgumentException if the preconditions are not met\n+     * @throws MathException if the statistic can not be computed do to a\n+     *         convergence or other numerical error.\n+     */\n+    public double anovaFValue(Collection categoryData)\n+        throws IllegalArgumentException, MathException;\n+\n+    /**\n+     * Computes the ANOVA P-value for a collection of <code>double[]</code>\n+     * arrays.\n+     *\n+     * <p><strong>Preconditions</strong>: <ul>\n+     * <li>The categoryData <code>Collection</code> must contain\n+     * <code>double[]</code> arrays.</li>\n+     * <li> There must be at least two <code>double[]</code> arrays in the\n+     * <code>categoryData</code> collection and each of these arrays must\n+     * contain at least two values.</li></ul></p>\n+     *\n+     * @param categoryData <code>Collection</code> of <code>double[]</code>\n+     * arrays each containing data for one category\n+     * @return Pvalue\n+     * @throws IllegalArgumentException if the preconditions are not met\n+     * @throws MathException if the statistic can not be computed do to a\n+     *         convergence or other numerical error.\n+     */\n+    public double anovaPValue(Collection categoryData)\n+        throws IllegalArgumentException, MathException;\n+\n+    /**\n+     * Performs an ANOVA test, evaluating the null hypothesis that there\n+     * is no difference among the means of the data categories.\n+     * \n+     * <p><strong>Preconditions</strong>: <ul>\n+     * <li>The categoryData <code>Collection</code> must contain\n+     * <code>double[]</code> arrays.</li>\n+     * <li> There must be at least two <code>double[]</code> arrays in the\n+     * <code>categoryData</code> collection and each of these arrays must\n+     * contain at least two values.</li>\n+     * <li>alpha must be strictly greater than 0 and less than or equal to 0.5.\n+     * </li></ul></p>\n+     *\n+     * @param categoryData <code>Collection</code> of <code>double[]</code>\n+     * arrays each containing data for one category\n+     * @param alpha significance level of the test\n+     * @return true if the null hypothesis can be rejected with \n+     * confidence 1 - alpha\n+     * @throws IllegalArgumentException if the preconditions are not met\n+     * @throws MathException if the statistic can not be computed do to a\n+     *         convergence or other numerical error.\n+    */\n+    public boolean anovaTest(Collection categoryData, double alpha)\n+        throws IllegalArgumentException, MathException;\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.inference;\n+\n+import org.apache.commons.math.MathException;\n+import org.apache.commons.math.stat.descriptive.summary.Sum;\n+import org.apache.commons.math.stat.descriptive.summary.SumOfSquares;\n+\n+import org.apache.commons.math.distribution.FDistribution;\n+import org.apache.commons.math.distribution.FDistributionImpl;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+\n+/**\n+ * Implements one-way ANOVA statistics defined in the {@link OneWayAnovaImpl}\n+ * interface.\n+ * \n+ * <p>Uses the \n+ * {@link org.apache.commons.math.distribution.FDistribution\n+ *  commons-math F Distribution implementation} to estimate exact p-values.</p>\n+ *\n+ * <p>This implementation is based on a description at \n+ * http://faculty.vassar.edu/lowry/ch13pt1.html</p>\n+ * <pre>\n+ * Abbreviations: bg = between groups,\n+ *                wg = within groups,\n+ *                ss = sum squared deviations\n+ * </pre>\n+ *\n+ * @since 1.2\n+ * @version $Revision$ $Date$\n+ */\n+public class OneWayAnovaImpl implements OneWayAnova  {\n+\n+    /**\n+     * Default constructor.\n+     */\n+    public OneWayAnovaImpl() {\n+    }\n+    \n+    /**\n+     * {@inheritDoc}<p>\n+     * This implementation computes the F statistic using the definitional \n+     * formula<pre>\n+     *   F = msbg/mswg</pre>\n+     * where<pre>\n+     *  msbg = between group mean square\n+     *  mswg = within group mean square</pre>\n+     * are as defined <a href=\"http://faculty.vassar.edu/lowry/ch13pt1.html\">\n+     * here</a></p>\n+     */\n+    public double anovaFValue(Collection categoryData)\n+        throws IllegalArgumentException, MathException {\n+        AnovaStats a = anovaStats(categoryData);\n+        return a.F;\n+    }\n+\n+    /**\n+     * {@inheritDoc}<p>\n+     * This implementation uses the\n+     * {@link org.apache.commons.math.distribution.FDistribution\n+     * commons-math F Distribution implementation} to estimate the exact\n+     * p-value, using the formula<pre>\n+     *   p = 1 - cumulativeProbability(F)</pre>\n+     * where <code>F</code> is the F value and <code>cumulativeProbability</code>\n+     * is the commons-math implementation of the F distribution.</p>\n+     */\n+    public double anovaPValue(Collection categoryData)\n+        throws IllegalArgumentException, MathException {\n+        AnovaStats a = anovaStats(categoryData);\n+        FDistribution fdist = new FDistributionImpl(a.dfbg, a.dfwg);\n+        return 1.0 - fdist.cumulativeProbability(a.F);\n+    }\n+\n+    /**\n+     * {@inheritDoc}<p>\n+     * This implementation uses the\n+     * {@link org.apache.commons.math.distribution.FDistribution\n+     * commons-math F Distribution implementation} to estimate the exact\n+     * p-value, using the formula<pre>\n+     *   p = 1 - cumulativeProbability(F)</pre>\n+     * where <code>F</code> is the F value and <code>cumulativeProbability</code>\n+     * is the commons-math implementation of the F distribution.</p>\n+     * <p>True is returned iff the estimated p-value is less than alpha.</p>\n+     */\n+    public boolean anovaTest(Collection categoryData, double alpha)\n+        throws IllegalArgumentException, MathException {\n+        if ((alpha <= 0) || (alpha > 0.5)) {\n+            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n+        }\n+        return (anovaPValue(categoryData) < alpha);\n+    }\n+\n+\n+    /**\n+     * This method actually does the calculations (except P-value).\n+     * \n+     * @param categoryData <code>Collection</code> of <code>double[]</code>\n+     * arrays each containing data for one category\n+     * @return computed AnovaStats\n+     * @throws IllegalArgumentException if categoryData does not meet\n+     * preconditions specified in the interface definition\n+     * @throws MathException if an error occurs computing the Anova stats\n+     */\n+    private AnovaStats anovaStats(Collection categoryData)\n+        throws IllegalArgumentException, MathException {\n+\n+        // check if we have enough categories\n+        if (categoryData.size() < 2) {\n+            throw new IllegalArgumentException(\n+                    \"ANOVA: two or more categories required\");\n+        }\n+        \n+        // check if each category has enough data and all is double[]\n+        for (Iterator iterator = categoryData.iterator(); iterator.hasNext();) {\n+            double[] array;\n+            try {\n+                array = (double[])iterator.next();\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\n+                        \"ANOVA: categoryData contains non-double[] elements.\", ex);\n+            }\n+            if (array.length <= 1) {\n+                throw new IllegalArgumentException(\n+                        \"ANOVA: one element of categoryData has fewer than 2 values.\");\n+            }\n+        }\n+\n+        int dfwg = 0;\n+        double sswg = 0;\n+        Sum totsum = new Sum();\n+        SumOfSquares totsumsq = new SumOfSquares();\n+        int totnum = 0;\n+        \n+        for (Iterator iterator = categoryData.iterator(); iterator.hasNext();) {\n+            double[] data = (double[])iterator.next();\n+\n+            Sum sum = new Sum();\n+            SumOfSquares sumsq = new SumOfSquares();\n+            int num = 0;\n+\n+            for (int i = 0; i < data.length; i++) {\n+                double val = data[i];\n+\n+                // within category\n+                num++;\n+                sum.increment(val);\n+                sumsq.increment(val);\n+\n+                // for all categories\n+                totnum++;\n+                totsum.increment(val);\n+                totsumsq.increment(val);\n+            }\n+            dfwg += num - 1;\n+            double ss = sumsq.getResult() - sum.getResult() * sum.getResult() / num;\n+            sswg += ss;\n+        }\n+        double sst = totsumsq.getResult() - totsum.getResult() * \n+            totsum.getResult()/totnum;\n+        double ssbg = sst - sswg;\n+        int dfbg = categoryData.size() - 1;\n+        double msbg = ssbg/dfbg;\n+        double mswg = sswg/dfwg;\n+        double F = msbg/mswg;\n+\n+        return new AnovaStats(dfbg, dfwg, F);\n+    }\n+\n+    /** \n+        Convenience class to pass dfbg,dfwg,F values around within AnovaImpl.\n+        No get/set methods provided.\n+    */\n+    private static class AnovaStats {\n+        private int dfbg;\n+        private int dfwg;\n+        private double F;\n+\n+        /**\n+         * Constructor\n+         * @param dfbg degrees of freedom in numerator (between groups)\n+         * @param dfwg degrees of freedom in denominator (within groups)\n+         * @param F statistic\n+         */\n+        AnovaStats(int dfbg, int dfwg, double F) {\n+            this.dfbg = dfbg;\n+            this.dfwg = dfwg;\n+            this.F = F;\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.inference;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Test cases for the OneWayAnovaImpl class.\n+ *\n+ * @version $Revision$ $Date$\n+ */\n+\n+public class OneWayAnovaTest extends TestCase {\n+\n+    protected OneWayAnova testStatistic = new OneWayAnovaImpl();\n+    \n+    private char[] wrongArray = { 'a', 'b', 'c' };\n+    private double[] emptyArray = {};\n+\n+    private double[] classA =\n+            {93.0, 103.0, 95.0, 101.0, 91.0, 105.0, 96.0, 94.0, 101.0 };\n+    private double[] classB =\n+            {99.0, 92.0, 102.0, 100.0, 102.0, 89.0 };\n+    private double[] classC =\n+            {110.0, 115.0, 111.0, 117.0, 128.0, 117.0 };\n+\n+    public OneWayAnovaTest(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp() {\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(OneWayAnovaTest.class);\n+        suite.setName(\"TestStatistic Tests\");\n+        return suite;\n+    }\n+\n+    public void testAnovaFValue() throws Exception {\n+        // Target comparison values computed using R version 2.6.0 (Linux version)\n+        List threeClasses = new ArrayList();\n+        threeClasses.add(classA);\n+        threeClasses.add(classB);\n+        threeClasses.add(classC);\n+\n+        assertEquals(\"ANOVA F-value\",  24.67361709460624,\n+                 testStatistic.anovaFValue(threeClasses), 1E-12);\n+\n+        List twoClasses = new ArrayList();\n+        twoClasses.add(classA);\n+        twoClasses.add(classB);\n+        \n+        assertEquals(\"ANOVA F-value\",  0.0150579150579,\n+                 testStatistic.anovaFValue(twoClasses), 1E-12);\n+\n+        // now try some input hashes which should fail\n+        List wrongContents = new ArrayList();\n+        wrongContents.add(classC);\n+        wrongContents.add(wrongArray);\n+        try {\n+            double bad = testStatistic.anovaFValue(wrongContents);\n+            fail(\"non double[] hash value for key classX, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+\n+        List emptyContents = new ArrayList();\n+        emptyContents.add(emptyArray);\n+        emptyContents.add(classC);\n+        try {\n+            double bad = testStatistic.anovaFValue(emptyContents);\n+            fail(\"empty array for key classX, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+\n+        List tooFew = new ArrayList();\n+        tooFew.add(classA);\n+        try {\n+            double bad = testStatistic.anovaFValue(tooFew);\n+            fail(\"less than two classes, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+    }\n+    \n+\n+    public void testAnovaPValue() throws Exception {\n+        // Target comparison values computed using R version 2.6.0 (Linux version)\n+        List threeClasses = new ArrayList();\n+        threeClasses.add(classA);\n+        threeClasses.add(classB);\n+        threeClasses.add(classC);\n+\n+        assertEquals(\"ANOVA P-value\", 6.959446E-06,\n+                 testStatistic.anovaPValue(threeClasses), 1E-12);\n+\n+        List twoClasses = new ArrayList();\n+        twoClasses.add(classA);\n+        twoClasses.add(classB);\n+        \n+        assertEquals(\"ANOVA P-value\",  0.904212960464,\n+                 testStatistic.anovaPValue(twoClasses), 1E-12);\n+\n+    }\n+\n+    public void testAnovaTest() throws Exception {\n+        // Target comparison values computed using R version 2.3.1 (Linux version)\n+        List threeClasses = new ArrayList();\n+        threeClasses.add(classA);\n+        threeClasses.add(classB);\n+        threeClasses.add(classC);\n+\n+        assertTrue(\"ANOVA Test P<0.01\", testStatistic.anovaTest(threeClasses, 0.01));\n+\n+        List twoClasses = new ArrayList();\n+        twoClasses.add(classA);\n+        twoClasses.add(classB);\n+        \n+        assertFalse(\"ANOVA Test P>0.01\", testStatistic.anovaTest(twoClasses, 0.01));\n+    }\n+\n+}", "timestamp": 1201387363, "metainfo": ""}