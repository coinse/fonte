{"sha": "ad1bad0f616f789b9c994f36a65a7a386f9d031b", "log": "Fixed misuse of \"Double.MIN_VALUE\".   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/genetics/Chromosome.java\n+++ b/src/main/java/org/apache/commons/math3/genetics/Chromosome.java\n  * @version $Id$\n  */\n public abstract class Chromosome implements Comparable<Chromosome>,Fitness {\n+    /** Value assigned when no fitness has been computed yet. */\n+    private static final double NO_FITNESS = Double.NEGATIVE_INFINITY;\n \n     /** Cached value of the fitness of this chromosome. */\n-    private double fitness = Double.MIN_VALUE;\n+    private double fitness = NO_FITNESS;\n \n     /**\n      * Access the fitness of this chromosome. The bigger the fitness, the better\n      * @return the fitness.\n      */\n     public double getFitness() {\n-        if (this.fitness == Double.MIN_VALUE) {\n+        if (this.fitness == NO_FITNESS) {\n             // no cache - compute the fitness\n             this.fitness = fitness();\n         }", "timestamp": 1330612383, "metainfo": ""}