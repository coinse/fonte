{"sha": "31811262d7bffbc68503029ee243b23d2ee2c059", "log": "improved documentation of ODE package, including the new jacobians part  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java\n+++ b/src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java\n  * stepsize control provided by integrators that monitor the local\n  * error (this event handling feature is available for all integrators,\n  * including fixed step ones).</p>\n+ *\n+ * <p>Note that is is possible to register a {@link\n+ * org.apache.commons.math.ode.events.EventHandler classical event handler}\n+ * in the low level integrator used to build a {@link FirstOrderIntegratorWithJacobians}\n+ * rather than implementing this class. The event handlers registered at low level\n+ * will see the big compound state whether the event handlers defined by this interface\n+ * see the original state, and its jacobians in separate arrays.</p>\n+ *\n+ * <p>The compound state is guaranteed to contain the original state in the first\n+ * elements, followed by the jacobian with respect to initial state (in row order),\n+ * followed by the jacobian with respect to parameters (in row order). If for example\n+ * the original state dimension is 6 and there are 3 parameters, the compound state will\n+ * be a 60 elements array. The first 6 elements will be the original state, the next 36\n+ * elements will be the jacobian with respect to initial state, and the remaining 18 elements\n+ * will be the jacobian with respect to parameters.</p>\n+ *\n+ * <p>Dealing with low level event handlers is cumbersome if one really needs the jacobians\n+ * in these methods, but it also prevents many data being copied back and forth between\n+ * state and jacobians on one side and compound state on the other side. So for performance\n+ * reasons, it is recommended to use this interface <em>only</em> if jacobians are really\n+ * needed and to use lower level handlers if only state is needed.</p>\n  *\n  * @version $Revision$ $Date$\n  * @since 2.1\n--- a/src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java\n+++ b/src/main/java/org/apache/commons/math/ode/jacobians/StepHandlerWithJacobians.java\n  * typically either ignore the intermediate steps and wait for the\n  * last one, store the points in an ephemeris, or forward them to\n  * specialized processing or output methods.</p>\n+ *\n+ * <p>Note that is is possible to register a {@link\n+ * org.apache.commons.math.ode.sampling.StepHandler classical step handler}\n+ * in the low level integrator used to build a {@link FirstOrderIntegratorWithJacobians}\n+ * rather than implementing this class. The step handlers registered at low level\n+ * will see the big compound state whether the step handlers defined by this interface\n+ * see the original state, and its jacobians in separate arrays.</p>\n+ *\n+ * <p>The compound state is guaranteed to contain the original state in the first\n+ * elements, followed by the jacobian with respect to initial state (in row order),\n+ * followed by the jacobian with respect to parameters (in row order). If for example\n+ * the original state dimension is 6 and there are 3 parameters, the compound state will\n+ * be a 60 elements array. The first 6 elements will be the original state, the next 36\n+ * elements will be the jacobian with respect to initial state, and the remaining 18 elements\n+ * will be the jacobian with respect to parameters.</p>\n+ *\n+ * <p>Dealing with low level step handlers is cumbersome if one really needs the jacobians\n+ * in these methods, but it also prevents many data being copied back and forth between\n+ * state and jacobians on one side and compound state on the other side. So for performance\n+ * reasons, it is recommended to use this interface <em>only</em> if jacobians are really\n+ * needed and to use lower level handlers if only state is needed.</p>\n  *\n  * @see FirstOrderIntegratorWithJacobians\n  * @see StepInterpolatorWithJacobians", "timestamp": 1268000358, "metainfo": ""}