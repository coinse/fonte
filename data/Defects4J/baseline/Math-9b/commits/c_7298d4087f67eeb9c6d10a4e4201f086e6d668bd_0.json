{"sha": "7298d4087f67eeb9c6d10a4e4201f086e6d668bd", "log": "Formatting (MATH-677).  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java\n      * @return the real transformed array\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    public double[] transform(double f[]) throws IllegalArgumentException {\n+    public double[] transform(double[] f) throws IllegalArgumentException {\n         return fct(f);\n     }\n \n     public double[] transform(UnivariateFunction f,\n                               double min, double max, int n)\n         throws IllegalArgumentException {\n-        double data[] = FastFourierTransformer.sample(f, min, max, n);\n+        double[] data = FastFourierTransformer.sample(f, min, max, n);\n         return fct(data);\n     }\n \n      * @return the real transformed array\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    public double[] transform2(double f[]) throws IllegalArgumentException {\n+    public double[] transform2(double[] f) throws IllegalArgumentException {\n \n         double scalingCoefficient = FastMath.sqrt(2.0 / (f.length - 1));\n         return FastFourierTransformer.scaleArray(fct(f), scalingCoefficient);\n                                double min, double max, int n)\n         throws IllegalArgumentException {\n \n-        double data[] = FastFourierTransformer.sample(f, min, max, n);\n+        double[] data = FastFourierTransformer.sample(f, min, max, n);\n         double scalingCoefficient = FastMath.sqrt(2.0 / (n - 1));\n         return FastFourierTransformer.scaleArray(fct(data), scalingCoefficient);\n     }\n      * @return the real inversely transformed array\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    public double[] inverseTransform(double f[])\n+    public double[] inverseTransform(double[] f)\n     throws IllegalArgumentException {\n \n         double scalingCoefficient = 2.0 / (f.length - 1);\n                                      double min, double max, int n)\n         throws IllegalArgumentException {\n \n-        double data[] = FastFourierTransformer.sample(f, min, max, n);\n+        double[] data = FastFourierTransformer.sample(f, min, max, n);\n         double scalingCoefficient = 2.0 / (n - 1);\n         return FastFourierTransformer.scaleArray(fct(data), scalingCoefficient);\n     }\n      * @return the real inversely transformed array\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    public double[] inverseTransform2(double f[])\n+    public double[] inverseTransform2(double[] f)\n         throws IllegalArgumentException {\n         return transform2(f);\n     }\n      * @return the real transformed array\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    protected double[] fct(double f[])\n-        throws IllegalArgumentException {\n-\n-        final double transformed[] = new double[f.length];\n+    protected double[] fct(double[] f)\n+        throws IllegalArgumentException {\n+\n+        final double[] transformed = new double[f.length];\n \n         final int n = f.length - 1;\n         if (!FastFourierTransformer.isPowerOf2(n)) {\n         // temporary variable for transformed[1]\n         double t1 = 0.5 * (f[0] - f[n]);\n         for (int i = 1; i < (n >> 1); i++) {\n-            final double a = 0.5 * (f[i] + f[n-i]);\n-            final double b = FastMath.sin(i * FastMath.PI / n) * (f[i] - f[n-i]);\n-            final double c = FastMath.cos(i * FastMath.PI / n) * (f[i] - f[n-i]);\n+            final double a = 0.5 * (f[i] + f[n - i]);\n+            final double b = FastMath.sin(i * FastMath.PI / n) * (f[i] - f[n - i]);\n+            final double c = FastMath.cos(i * FastMath.PI / n) * (f[i] - f[n - i]);\n             x[i] = a - b;\n-            x[n-i] = a + b;\n+            x[n - i] = a + b;\n             t1 += c;\n         }\n         FastFourierTransformer transformer = new FastFourierTransformer();\n-        Complex y[] = transformer.transform(x);\n+        Complex[] y = transformer.transform(x);\n \n         // reconstruct the FCT result for the original array\n         transformed[0] = y[0].getReal();", "timestamp": 1322710622, "metainfo": ""}