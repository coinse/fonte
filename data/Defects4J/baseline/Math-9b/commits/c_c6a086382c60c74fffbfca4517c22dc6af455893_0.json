{"sha": "c6a086382c60c74fffbfca4517c22dc6af455893", "log": "completed internationalization of all error messages  ", "commit": "\n--- a/src/java/org/apache/commons/math/MessagesResources_fr.java\n+++ b/src/java/org/apache/commons/math/MessagesResources_fr.java\n     // org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer\n     // org.apache.commons.math.ode.ContinuousOutputModel\n     // org.apache.commons.math.random.UncorrelatedRandomVectorGenerator\n+    // org.apache.commons.math.stat.regression.AbstractMultipleLinearRegression\n+    // org.apache.commons.math.stat.inference.ChiSquareTestImpl\n     { \"dimension mismatch {0} != {1}\",\n       \"dimensions incompatibles {0} != {1}\" },\n \n       \"non sym\\u00e9triques n''est pas encore disponible\" },\n \n     // org.apache.commons.math.linear.decomposition.NonSquareMatrixException\n+    // org.apache.commons.math.stat.regression.AbstractMultipleLinearRegression\n     { \"a {0}x{1} matrix was provided instead of a square matrix\",\n       \"une matrice {0}x{1} a \\u00e9t\\u00e9 fournie \\u00e0 la place d''une matrice carr\\u00e9e\" },\n \n       \"une matrice doit comporter au moins une ligne\" },\n     { \"matrix must have at least one column\",\n       \"une matrice doit comporter au moins une colonne\" },\n+\n+    // org.apache.commons.math.linear.AbstractRealMatrix\n+    // org.apache.commons.math.linear.AbstractFieldMatrix\n+    // org.apache.commons.math.stat.inference.ChiSquareTestImpl      \n     { \"some rows have length {0} while others have length {1}\",\n       \"certaines lignes ont une longueur de {0} alors que d''autres ont une longueur de {1}\" },\n \n      \"les statistiques bas\\u00e9es sur des moments externes \" +\n      \"ne peuvent pas \\u00eatre remises \\u00e0 z\\u00e9ro\" },\n \n+   // org.apache.commons.math.stat.inference.ChiSquareTestImpl\n+   { \"expected array length = {0}, must be at least 2\",\n+     \"le tableau des valeurs attendues a une longueur de {0}, elle devrait \\u00eatre au moins de 2\" },\n+   { \"observed array length = {0}, must be at least 2\",\n+     \"le tableau des valeurs observ\\u00e9es a une longueur de {0}, elle devrait \\u00eatre au moins de 2\" },\n+   { \"observed counts are all 0 in first observed array\",\n+     \"aucune occurrence dans le premier tableau des observations\" },\n+   { \"observed counts are all 0 in second observed array\",\n+     \"aucune occurrence dans le second tableau des observations\" },\n+   { \"observed counts are both zero for entry {0}\",\n+     \"les occurrences observ\\u00e9es sont toutes deux nulles pour l'entr\\u00e9e {0}\" },\n+   { \"invalid row dimension: {0} (must be at least 2)\",\n+     \"nombre de lignes invalide : {0} (doit \\u00eatre au moins de 2)\" },\n+   { \"invalid column dimension: {0} (must be at least 2)\",\n+     \"nombre de colonnes invalide : {0} (doit \\u00eatre au moins de 2)\" },\n+   { \"element {0} is not positive: {1}\",\n+     \"l''\\u00e9l\\u00e9ment {0} n''est pas positif : {1}\" },\n+   { \"element {0} is negative: {1}\",\n+     \"l''\\u00e9l\\u00e9ment {0} est n\\u00e9gatif : {1}\" },\n+   { \"element ({0}, {1}) is negative: {2}\",\n+     \"l''\\u00e9l\\u00e9ment ({0}, {1}) est n\\u00e9gatif : {2}\" },\n+\n+   // org.apache.commons.math.stat.inference.OneWayAnovaImpl\n+   { \"two or more categories required, got {0}\",\n+     \"deux cat\\u00e9gories ou plus sont n\\u00e9cessaires, il y en a {0}\" },\n+   { \"two or more values required in each category, one has {0}\",\n+     \"deux valeurs ou plus sont n\\u00e9cessaires pour chaque cat\\u00e9gorie, une cat\\u00e9gorie en a {0}\" },\n+\n+   // org.apache.commons.math.stat.inference.TTestImpl\n+   { \"insufficient data for t statistic, needs at least 2, got {0}\",\n+     \"deux valeurs ou plus sont n\\u00e9cessaires pour la statistique t, il y en a {0}\" },\n+\n+   // org.apache.commons.math.stat.inference.ChiSquareTestImpl\n+   // org.apache.commons.math.stat.inference.TTestImpl\n+   // org.apache.commons.math.stat.inference.OneWayAnovaImpl\n    // org.apache.commons.math.stat.Regression\n-   { \"out of bounds significance level {0}, must be in (0, 1)\",\n-     \"niveau de signification {0} hors domaine, doit \\u00eatre dans l''intervalle ]0, 1[\" },\n+   { \"out of bounds significance level {0}, must be between {1} and {2}\",\n+     \"niveau de signification {0} hors domaine, doit \\u00eatre entre {1} et {2}\" },\n+\n+   // org.apache.commons.math.stat.regression.OLSMultipleLinearRegression\n+   { \"matrix is not upper-triangular, entry ({0}, {1}) = {2} is too large\",\n+     \"matrice non triangulaire sup\\u00e9rieure, l''\\u00e9l\\u00e9ment ({0}, {1}) = {2} est trop grand\" },\n \n    // org.apache.commons.math.distribution.AbstractContinuousDistribution\n    // org.apache.commons.math.distribution.AbstractIntegerDistribution\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n package org.apache.commons.math.stat.inference;\n \n import org.apache.commons.math.MathException;\n+import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.distribution.ChiSquaredDistribution;\n import org.apache.commons.math.distribution.ChiSquaredDistributionImpl;\n \n      */\n     public double chiSquare(double[] expected, long[] observed)\n         throws IllegalArgumentException {\n-        if ((expected.length < 2) || (expected.length != observed.length)) {\n-            throw new IllegalArgumentException(\n-                    \"observed, expected array lengths incorrect\");\n-        }\n-        if (!isPositive(expected) || !isNonNegative(observed)) {\n-            throw new IllegalArgumentException(\n-                \"observed counts must be non-negative and expected counts must be postive\");\n-        }\n+        if (expected.length < 2) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"expected array length = {0}, must be at least 2\",\n+                  expected.length);\n+        }\n+        if (expected.length != observed.length) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"dimension mismatch {0} != {1}\", expected.length, observed.length);\n+        }\n+        checkPositive(expected);\n+        checkNonNegative(observed);\n         double sumExpected = 0d;\n         double sumObserved = 0d;\n         for (int i = 0; i < observed.length; i++) {\n     public boolean chiSquareTest(double[] expected, long[] observed, \n             double alpha) throws IllegalArgumentException, MathException {\n         if ((alpha <= 0) || (alpha > 0.5)) {\n-            throw new IllegalArgumentException(\n-                    \"bad significance level: \" + alpha);\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"out of bounds significance level {0}, must be between {1} and {2}\",\n+                  alpha, 0, 0.5);\n         }\n         return (chiSquareTest(expected, observed) < alpha);\n     }\n     public boolean chiSquareTest(long[][] counts, double alpha)\n     throws IllegalArgumentException, MathException {\n         if ((alpha <= 0) || (alpha > 0.5)) {\n-            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"out of bounds significance level {0}, must be between {1} and {2}\",\n+                  alpha, 0.0, 0.5);\n         }\n         return (chiSquareTest(counts) < alpha);\n     }\n         throws IllegalArgumentException {\n         \n         // Make sure lengths are same\n-        if ((observed1.length < 2) || (observed1.length != observed2.length)) {\n-            throw new IllegalArgumentException(\n-                    \"oberved1, observed2 array lengths incorrect\");\n-        }\n+        if (observed1.length < 2) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"observed array length = {0}, must be at least 2\",\n+                  observed1.length);\n+        }\n+        if (observed1.length != observed2.length) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"dimension mismatch {0} != {1}\",\n+                  observed1.length, observed2.length);\n+        }\n+\n         // Ensure non-negative counts\n-        if (!isNonNegative(observed1) || !isNonNegative(observed2)) {\n-            throw new IllegalArgumentException(\n-                \"observed counts must be non-negative\");\n-        }\n+        checkNonNegative(observed1);\n+        checkNonNegative(observed2);\n+\n         // Compute and compare count sums\n         long countSum1 = 0;\n         long countSum2 = 0;\n             countSum2 += observed2[i];   \n         }\n         // Ensure neither sample is uniformly 0\n-        if (countSum1 * countSum2 == 0) {\n-            throw new IllegalArgumentException(\n-             \"observed counts cannot all be 0\"); \n+        if (countSum1 == 0) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"observed counts are all 0 in first observed array\"); \n+        }\n+        if (countSum2 == 0) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"observed counts are all 0 in second observed array\"); \n         }\n         // Compare and compute weight only if different\n         unequalCounts = (countSum1 != countSum2);\n         double obs2 = 0.0d;\n         for (int i = 0; i < observed1.length; i++) {\n             if (observed1[i] == 0 && observed2[i] == 0) {\n-                throw new IllegalArgumentException(\n-                        \"observed counts must not both be zero\");\n+                throw MathRuntimeException.createIllegalArgumentException(\n+                      \"observed counts are both zero for entry {0}\", i);\n             } else {\n                 obs1 = observed1[i];\n                 obs2 = observed2[i];\n     public boolean chiSquareTestDataSetsComparison(long[] observed1, long[] observed2,\n             double alpha) throws IllegalArgumentException, MathException {\n         if ((alpha <= 0) || (alpha > 0.5)) {\n-            throw new IllegalArgumentException(\n-                    \"bad significance level: \" + alpha);\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"out of bounds significance level {0}, must be between {1} and {2}\",\n+                  alpha, 0.0, 0.5);\n         }\n         return (chiSquareTestDataSetsComparison(observed1, observed2) < alpha);\n     }\n     private void checkArray(long[][] in) throws IllegalArgumentException {\n         \n         if (in.length < 2) {\n-            throw new IllegalArgumentException(\"Input table must have at least two rows\");\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"invalid row dimension: {0} (must be at least 2)\",\n+                  in.length);\n         }\n         \n         if (in[0].length < 2) {\n-            throw new IllegalArgumentException(\"Input table must have at least two columns\");\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"invalid column dimension: {0} (must be at least 2)\",\n+                  in[0].length);\n         }    \n         \n-        if (!isRectangular(in)) {\n-            throw new IllegalArgumentException(\"Input table must be rectangular\");\n-        }\n-        \n-        if (!isNonNegative(in)) {\n-            throw new IllegalArgumentException(\"All entries in input 2-way table must be non-negative\");\n-        }\n+        checkRectangular(in);\n+        checkNonNegative(in);\n         \n     }\n     \n      * @throws NullPointerException if input array is null\n      * @throws ArrayIndexOutOfBoundsException if input array is empty\n      */\n-    private boolean isRectangular(long[][] in) {\n+    private void checkRectangular(long[][] in) {\n         for (int i = 1; i < in.length; i++) {\n             if (in[i].length != in[0].length) {\n-                return false;\n+                throw MathRuntimeException.createIllegalArgumentException(\n+                      \"some rows have length {0} while others have length {1}\",\n+                      in[i].length, in[0].length);\n             }\n         }  \n-        return true;\n-    }\n-    \n-    /**\n-     * Returns true iff all entries of the input array are > 0.\n-     * Returns true if the array is non-null, but empty\n+    }\n+    \n+    /**\n+     * Check all entries of the input array are > 0.\n      * \n      * @param in array to be tested\n-     * @return true if all entries of the array are positive\n-     * @throws NullPointerException if input array is null\n-     */\n-    private boolean isPositive(double[] in) {\n-        for (int i = 0; i < in.length; i ++) {\n+     * @exception IllegalArgumentException if one entry is not positive\n+     */\n+    private void checkPositive(double[] in) throws IllegalArgumentException {\n+        for (int i = 0; i < in.length; i++) {\n             if (in[i] <= 0) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-    \n-    /**\n-     * Returns true iff all entries of the input array are >= 0.\n-     * Returns true if the array is non-null, but empty\n+                throw MathRuntimeException.createIllegalArgumentException(\n+                      \"element {0} is not positive: {1}\",\n+                      i, in[i]);\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Check all entries of the input array are >= 0.\n      * \n      * @param in array to be tested\n-     * @return true if all entries of the array are non-negative\n-     * @throws NullPointerException if input array is null\n-     */\n-    private boolean isNonNegative(long[] in) {\n-        for (int i = 0; i < in.length; i ++) {\n+     * @exception IllegalArgumentException if one entry is negative\n+     */\n+    private void checkNonNegative(long[] in) throws IllegalArgumentException {\n+        for (int i = 0; i < in.length; i++) {\n             if (in[i] < 0) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-    \n-    /**\n-     * Returns true iff all entries of (all subarrays of) the input array are >= 0.\n-     * Returns true if the array is non-null, but empty\n+                throw MathRuntimeException.createIllegalArgumentException(\n+                      \"element {0} is negative: {1}\",\n+                      i, in[i]);\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Check all entries of the input array are >= 0.\n      * \n      * @param in array to be tested\n-     * @return true if all entries of the array are non-negative\n-     * @throws NullPointerException if input array is null\n-     */\n-    private boolean isNonNegative(long[][] in) {\n+     * @exception IllegalArgumentException if one entry is negative\n+     */\n+    private void checkNonNegative(long[][] in) throws IllegalArgumentException {\n         for (int i = 0; i < in.length; i ++) {\n             for (int j = 0; j < in[i].length; j++) {\n                 if (in[i][j] < 0) {\n-                    return false;\n+                    throw MathRuntimeException.createIllegalArgumentException(\n+                          \"element ({0}, {1}) is negative: {2}\",\n+                          i, j, in[i][j]);\n                 }\n             }\n         }\n-        return true;\n     }\n  \n     /**\n--- a/src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java\n import java.util.Collection;\n \n import org.apache.commons.math.MathException;\n+import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.distribution.FDistribution;\n import org.apache.commons.math.distribution.FDistributionImpl;\n import org.apache.commons.math.stat.descriptive.summary.Sum;\n     public boolean anovaTest(Collection<double[]> categoryData, double alpha)\n         throws IllegalArgumentException, MathException {\n         if ((alpha <= 0) || (alpha > 0.5)) {\n-            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"out of bounds significance level {0}, must be between {1} and {2}\",\n+                  alpha, 0, 0.5);\n         }\n         return (anovaPValue(categoryData) < alpha);\n     }\n \n         // check if we have enough categories\n         if (categoryData.size() < 2) {\n-            throw new IllegalArgumentException(\n-                    \"ANOVA: two or more categories required\");\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"two or more categories required, got {0}\",\n+                  categoryData.size());\n         }\n         \n         // check if each category has enough data and all is double[]\n         for (double[] array : categoryData) {\n             if (array.length <= 1) {\n-                throw new IllegalArgumentException(\n-                        \"ANOVA: one element of categoryData has fewer than 2 values.\");\n+                throw MathRuntimeException.createIllegalArgumentException(\n+                      \"two or more values required in each category, one has {0}\",\n+                      array.length);\n             }\n         }\n \n--- a/src/java/org/apache/commons/math/stat/inference/TTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/TTestImpl.java\n package org.apache.commons.math.stat.inference;\n \n import org.apache.commons.math.MathException;\n+import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.distribution.TDistribution;\n import org.apache.commons.math.distribution.TDistributionImpl;\n import org.apache.commons.math.stat.StatUtils;\n      */\n     public double pairedT(double[] sample1, double[] sample2)\n         throws IllegalArgumentException, MathException {\n-        if ((sample1 == null) || (sample2 == null ||\n-                Math.min(sample1.length, sample2.length) < 2)) {\n-            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n-        }\n+        checkSampleData(sample1);\n+        checkSampleData(sample2);\n         double meanDifference = StatUtils.meanDifference(sample1, sample2);\n         return t(meanDifference, 0,  \n                 StatUtils.varianceDifference(sample1, sample2, meanDifference),\n      */\n     public boolean pairedTTest(double[] sample1, double[] sample2, double alpha)\n         throws IllegalArgumentException, MathException {\n-        if ((alpha <= 0) || (alpha > 0.5)) {\n-            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n-        }\n+        checkSignificanceLevel(alpha);\n         return (pairedTTest(sample1, sample2) < alpha);\n     }\n \n      */\n     public double t(double mu, double[] observed)\n     throws IllegalArgumentException {\n-        if ((observed == null) || (observed.length < 2)) {\n-            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n-        }\n+        checkSampleData(observed);\n         return t(StatUtils.mean(observed), mu, StatUtils.variance(observed),\n                 observed.length);\n     }\n      */\n     public double t(double mu, StatisticalSummary sampleStats)\n     throws IllegalArgumentException {\n-        if ((sampleStats == null) || (sampleStats.getN() < 2)) {\n-            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n-        }\n+        checkSampleData(sampleStats);\n         return t(sampleStats.getMean(), mu, sampleStats.getVariance(),\n                 sampleStats.getN());\n     }\n      */\n     public double homoscedasticT(double[] sample1, double[] sample2)\n     throws IllegalArgumentException {\n-        if ((sample1 == null) || (sample2 == null ||\n-                Math.min(sample1.length, sample2.length) < 2)) {\n-            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n-        }\n+        checkSampleData(sample1);\n+        checkSampleData(sample2);\n         return homoscedasticT(StatUtils.mean(sample1), StatUtils.mean(sample2),\n                 StatUtils.variance(sample1), StatUtils.variance(sample2),\n                 sample1.length, sample2.length);\n      */\n     public double t(double[] sample1, double[] sample2)\n     throws IllegalArgumentException {\n-        if ((sample1 == null) || (sample2 == null ||\n-                Math.min(sample1.length, sample2.length) < 2)) {\n-            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n-        }\n+        checkSampleData(sample1);\n+        checkSampleData(sample2);\n         return t(StatUtils.mean(sample1), StatUtils.mean(sample2),\n                 StatUtils.variance(sample1), StatUtils.variance(sample2),\n                 sample1.length, sample2.length);\n      * @throws IllegalArgumentException if the precondition is not met\n      */\n     public double t(StatisticalSummary sampleStats1, \n-            StatisticalSummary sampleStats2)\n+                    StatisticalSummary sampleStats2)\n     throws IllegalArgumentException {\n-        if ((sampleStats1 == null) ||\n-                (sampleStats2 == null ||\n-                        Math.min(sampleStats1.getN(), sampleStats2.getN()) < 2)) {\n-            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n-        }\n+        checkSampleData(sampleStats1);\n+        checkSampleData(sampleStats2);\n         return t(sampleStats1.getMean(), sampleStats2.getMean(), \n                 sampleStats1.getVariance(), sampleStats2.getVariance(),\n                 sampleStats1.getN(), sampleStats2.getN());\n     public double homoscedasticT(StatisticalSummary sampleStats1, \n             StatisticalSummary sampleStats2)\n     throws IllegalArgumentException {\n-        if ((sampleStats1 == null) ||\n-                (sampleStats2 == null ||\n-                        Math.min(sampleStats1.getN(), sampleStats2.getN()) < 2)) {\n-            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n-        }\n+        checkSampleData(sampleStats1);\n+        checkSampleData(sampleStats2);\n         return homoscedasticT(sampleStats1.getMean(), sampleStats2.getMean(), \n                 sampleStats1.getVariance(), sampleStats2.getVariance(), \n                 sampleStats1.getN(), sampleStats2.getN());\n      */\n     public double tTest(double mu, double[] sample)\n     throws IllegalArgumentException, MathException {\n-        if ((sample == null) || (sample.length < 2)) {\n-            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n-        }\n+        checkSampleData(sample);\n         return tTest( StatUtils.mean(sample), mu, StatUtils.variance(sample),\n                 sample.length);\n     }\n      */\n     public boolean tTest(double mu, double[] sample, double alpha)\n     throws IllegalArgumentException, MathException {\n-        if ((alpha <= 0) || (alpha > 0.5)) {\n-            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n-        }\n+        checkSignificanceLevel(alpha);\n         return (tTest(mu, sample) < alpha);\n     }\n \n      */\n     public double tTest(double mu, StatisticalSummary sampleStats)\n     throws IllegalArgumentException, MathException {\n-        if ((sampleStats == null) || (sampleStats.getN() < 2)) {\n-            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n-        }\n+        checkSampleData(sampleStats);\n         return tTest(sampleStats.getMean(), mu, sampleStats.getVariance(),\n                 sampleStats.getN());\n     }\n     public boolean tTest( double mu, StatisticalSummary sampleStats,\n             double alpha)\n     throws IllegalArgumentException, MathException {\n-        if ((alpha <= 0) || (alpha > 0.5)) {\n-            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n-        }\n+        checkSignificanceLevel(alpha);\n         return (tTest(mu, sampleStats) < alpha);\n     }\n \n      */\n     public double tTest(double[] sample1, double[] sample2)\n     throws IllegalArgumentException, MathException {\n-        if ((sample1 == null) || (sample2 == null ||\n-                Math.min(sample1.length, sample2.length) < 2)) {\n-            throw new IllegalArgumentException(\"insufficient data\");\n-        }\n+        checkSampleData(sample1);\n+        checkSampleData(sample2);\n         return tTest(StatUtils.mean(sample1), StatUtils.mean(sample2),\n                 StatUtils.variance(sample1), StatUtils.variance(sample2),\n                 sample1.length, sample2.length);\n      */\n     public double homoscedasticTTest(double[] sample1, double[] sample2)\n     throws IllegalArgumentException, MathException {\n-        if ((sample1 == null) || (sample2 == null ||\n-                Math.min(sample1.length, sample2.length) < 2)) {\n-            throw new IllegalArgumentException(\"insufficient data\");\n-        }\n+        checkSampleData(sample1);\n+        checkSampleData(sample2);\n         return homoscedasticTTest(StatUtils.mean(sample1), \n                 StatUtils.mean(sample2), StatUtils.variance(sample1),\n                 StatUtils.variance(sample2), sample1.length, \n     public boolean tTest(double[] sample1, double[] sample2,\n             double alpha)\n     throws IllegalArgumentException, MathException {\n-        if ((alpha <= 0) || (alpha > 0.5)) {\n-            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n-        }\n+        checkSignificanceLevel(alpha);\n         return (tTest(sample1, sample2) < alpha);\n     }\n     \n     public boolean homoscedasticTTest(double[] sample1, double[] sample2,\n             double alpha)\n     throws IllegalArgumentException, MathException {\n-        if ((alpha <= 0) || (alpha > 0.5)) {\n-            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n-        }\n+        checkSignificanceLevel(alpha);\n         return (homoscedasticTTest(sample1, sample2) < alpha);\n     }\n \n      */\n     public double tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2)\n     throws IllegalArgumentException, MathException {\n-        if ((sampleStats1 == null) || (sampleStats2 == null ||\n-                Math.min(sampleStats1.getN(), sampleStats2.getN()) < 2)) {\n-            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n-        }\n+        checkSampleData(sampleStats1);\n+        checkSampleData(sampleStats2);\n         return tTest(sampleStats1.getMean(), sampleStats2.getMean(), sampleStats1.getVariance(),\n                 sampleStats2.getVariance(), sampleStats1.getN(), \n                 sampleStats2.getN());\n      * @throws MathException if an error occurs computing the p-value\n      */\n     public double homoscedasticTTest(StatisticalSummary sampleStats1, \n-            StatisticalSummary sampleStats2)\n+                                     StatisticalSummary sampleStats2)\n     throws IllegalArgumentException, MathException {\n-        if ((sampleStats1 == null) || (sampleStats2 == null ||\n-                Math.min(sampleStats1.getN(), sampleStats2.getN()) < 2)) {\n-            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n-        }\n+        checkSampleData(sampleStats1);\n+        checkSampleData(sampleStats2);\n         return homoscedasticTTest(sampleStats1.getMean(),\n                 sampleStats2.getMean(), sampleStats1.getVariance(),\n                 sampleStats2.getVariance(), sampleStats1.getN(), \n     public boolean tTest(StatisticalSummary sampleStats1,\n             StatisticalSummary sampleStats2, double alpha)\n     throws IllegalArgumentException, MathException {\n-        if ((alpha <= 0) || (alpha > 0.5)) {\n-            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n-        }\n+        checkSignificanceLevel(alpha);\n         return (tTest(sampleStats1, sampleStats2) < alpha);\n     }\n     \n     public void setDistribution(TDistribution value) {\n         distribution = value;\n     }\n+\n+    /** Check significance level.\n+     * @param alpha significance level\n+     * @exception IllegalArgumentException if significance level is out of bounds\n+     */\n+    private void checkSignificanceLevel(final double alpha)\n+        throws IllegalArgumentException {\n+        if ((alpha <= 0) || (alpha > 0.5)) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"out of bounds significance level {0}, must be between {1} and {2}\",\n+                  alpha, 0.0, 0.5);\n+        }\n+    }\n+\n+    /** Check sample data.\n+     * @param data sample data\n+     * @exception IllegalArgumentException if there is not enough sample data\n+     */\n+    private void checkSampleData(final double[] data)\n+        throws IllegalArgumentException {\n+        if ((data == null) || (data.length < 2)) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"insufficient data for t statistic, needs at least 2, got {0}\",\n+                  (data == null) ? 0 : data.length);\n+        }\n+    }\n+\n+    /** Check sample data.\n+     * @param stat statistical summary\n+     * @exception IllegalArgumentException if there is not enough sample data\n+     */\n+    private void checkSampleData(final StatisticalSummary stat)\n+        throws IllegalArgumentException {\n+        if ((stat == null) || (stat.getN() < 2)) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"insufficient data for t statistic, needs at least 2, got {0}\",\n+                  (stat == null) ? 0 : stat.getN());\n+        }\n+    }\n+\n }\n--- a/src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java\n  */\n package org.apache.commons.math.stat.regression;\n \n+import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.linear.RealMatrixImpl;\n import org.apache.commons.math.linear.RealVector;\n      *             compatible for the regression\n      */\n     protected void validateSampleData(double[][] x, double[] y) {\n-        if (x == null) {\n-            throw new IllegalArgumentException(\"The regressors matrix x cannot be null.\");\n-        }\n-        if (y == null) {\n-            throw new IllegalArgumentException(\"The regressand vector y cannot be null.\");\n-        }\n-        if (x.length != y.length) {\n-            throw new IllegalArgumentException(\n-                    \"The regressors matrix x columns must have the same length of the regressand vector y\");\n+        if ((x == null) || (y == null) || (x.length != y.length)) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"dimension mismatch {0} != {1}\",\n+                  (x == null) ? 0 : x.length,\n+                  (y == null) ? 0 : y.length);\n         }\n     }\n \n      *             matrix are not compatible for the regression\n      */\n     protected void validateCovarianceData(double[][] x, double[][] covariance) {\n-        if (covariance == null) {\n-            throw new IllegalArgumentException(\"Covariance matrix cannot be null.\");\n-        }\n         if (x.length != covariance.length) {\n-            throw new IllegalArgumentException(\n-                    \"The regressors matrix x columns must have the same length of the covariance matrix columns\");\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                 \"dimension mismatch {0} != {1}\", x.length, covariance.length);\n         }\n         if (covariance.length > 0 && covariance.length != covariance[0].length) {\n-            throw new IllegalArgumentException(\"The covariance matrix must be square\");\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"a {0}x{1} matrix was provided instead of a square matrix\",\n+                  covariance.length, covariance[0].length);\n         }\n     }\n \n--- a/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java\n  */\n package org.apache.commons.math.stat.regression;\n \n+import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.linear.RealMatrixImpl;\n import org.apache.commons.math.linear.RealVector;\n      */\n     private static RealVector solveUpperTriangular(RealMatrix coefficients,\n                                                    RealVector constants) {\n-        if (!isUpperTriangular(coefficients, 1E-12)) {\n-            throw new IllegalArgumentException(\n-                   \"Coefficients is not upper-triangular\");\n-        }\n+        checkUpperTriangular(coefficients, 1E-12);\n         int length = coefficients.getColumnDimension();\n         double x[] = new double[length];\n         for (int i = 0; i < length; i++) {\n     }\n     \n     /**\n-     * <p>Returns true iff m is an upper-triangular matrix.</p>\n+     * <p>Check if a matrix is upper-triangular.</p>\n      * \n      * <p>Makes sure all below-diagonal elements are within epsilon of 0.</p>\n      * \n      * @param epsilon maximum allowable absolute value for elements below\n      * the main diagonal\n      * \n-     * @return true if m is upper-triangular; false otherwise\n-     * @throws NullPointerException if m is null\n-     */\n-    private static boolean isUpperTriangular(RealMatrix m, double epsilon) {\n+     * @throws IllegalArgumentException if m is not upper-triangular\n+     */\n+    private static void checkUpperTriangular(RealMatrix m, double epsilon) {\n         int nCols = m.getColumnDimension();\n         int nRows = m.getRowDimension();\n         for (int r = 0; r < nRows; r++) {\n             int bound = Math.min(r, nCols);\n             for (int c = 0; c < bound; c++) {\n                 if (Math.abs(m.getEntry(r, c)) > epsilon) {\n-                    return false;\n+                    throw MathRuntimeException.createIllegalArgumentException(\n+                          \"matrix is not upper-triangular, entry ({0}, {1}) = {2} is too large\",\n+                          r, c, m.getEntry(r, c));\n                 }\n             }\n         }\n-        return true;\n     }\n }\n--- a/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n         throws MathException {\n         if (alpha >= 1 || alpha <= 0) {\n             throw MathRuntimeException.createIllegalArgumentException(\n-                  \"out of bounds significance level {0}, must be in (0, 1)\",\n-                  alpha);\n+                  \"out of bounds significance level {0}, must be between {1} and {2}\",\n+                  alpha, 0.0, 1.0);\n         }\n         return getSlopeStdErr() *\n             distribution.inverseCumulativeProbability(1d - alpha / 2d);", "timestamp": 1241863024, "metainfo": ""}