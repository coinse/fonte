{"sha": "fcc8b114bc8b18040eb89d95c93d76a996979661", "log": "Added a few shortcut methods and predicates to Dfp (abs, isZero, negativeOrNull, strictlyNegative, positiveOrNull, strictlyPositive).   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math/dfp/Dfp.java\n         return compare(this, x) > 0;\n     }\n \n+    /** Check if instance is less than or equal to 0.\n+     * @return true if instance is not NaN and less than or equal to 0, false otherwise\n+     */\n+    public boolean negativeOrNull() {\n+\n+        if (isNaN()) {\n+            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n+            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n+            return false;\n+        }\n+\n+        return (sign < 0) || ((mant[mant.length - 1] == 0) && !isInfinite());\n+\n+    }\n+\n+    /** Check if instance is strictly less than 0.\n+     * @return true if instance is not NaN and less than or equal to 0, false otherwise\n+     */\n+    public boolean strictlyNegative() {\n+\n+        if (isNaN()) {\n+            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n+            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n+            return false;\n+        }\n+\n+        return (sign < 0) && ((mant[mant.length - 1] != 0) || isInfinite());\n+\n+    }\n+\n+    /** Check if instance is greater than or equal to 0.\n+     * @return true if instance is not NaN and greater than or equal to 0, false otherwise\n+     */\n+    public boolean positiveOrNull() {\n+\n+        if (isNaN()) {\n+            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n+            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n+            return false;\n+        }\n+\n+        return (sign > 0) || ((mant[mant.length - 1] == 0) && !isInfinite());\n+\n+    }\n+\n+    /** Check if instance is strictly greater than 0.\n+     * @return true if instance is not NaN and greater than or equal to 0, false otherwise\n+     */\n+    public boolean strictlyPositive() {\n+\n+        if (isNaN()) {\n+            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n+            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n+            return false;\n+        }\n+\n+        return (sign > 0) && ((mant[mant.length - 1] != 0) || isInfinite());\n+\n+    }\n+\n+    /** Get the absolute value of instance.\n+     * @return absolute value of instance\n+     */\n+    public Dfp abs() {\n+        Dfp result = newInstance(this);\n+        result.sign = 1;\n+        return result;\n+    }\n+\n     /** Check if instance is infinite.\n      * @return true if instance is infinite\n      */\n      */\n     public boolean isNaN() {\n         return (nans == QNAN) || (nans == SNAN);\n+    }\n+\n+    /** Check if instance is equal to zero.\n+     * @return true if instance is equal to zero\n+     */\n+    public boolean isZero() {\n+\n+        if (isNaN()) {\n+            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n+            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n+            return false;\n+        }\n+\n+        return (mant[mant.length - 1] == 0) && !isInfinite();\n+\n     }\n \n     /** Check if instance is equal to x.\n--- a/src/test/java/org/apache/commons/math/dfp/DfpTest.java\n+++ b/src/test/java/org/apache/commons/math/dfp/DfpTest.java\n         Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), MathUtils.EPSILON);\n     }\n \n+    @Test\n+    public void testIsZero() {\n+        Assert.assertTrue(field.getZero().isZero());\n+        Assert.assertTrue(field.getZero().negate().isZero());\n+        Assert.assertTrue(field.newDfp(+0.0).isZero());\n+        Assert.assertTrue(field.newDfp(-0.0).isZero());\n+        Assert.assertFalse(field.newDfp(1.0e-90).isZero());\n+        Assert.assertFalse(nan.isZero());\n+        Assert.assertFalse(nan.negate().isZero());\n+        Assert.assertFalse(pinf.isZero());\n+        Assert.assertFalse(pinf.negate().isZero());\n+        Assert.assertFalse(ninf.isZero());\n+        Assert.assertFalse(ninf.negate().isZero());\n+    }\n+\n+    @Test\n+    public void testSignPredicates() {\n+\n+        Assert.assertTrue(field.getZero().negativeOrNull());\n+        Assert.assertTrue(field.getZero().positiveOrNull());\n+        Assert.assertFalse(field.getZero().strictlyNegative());\n+        Assert.assertFalse(field.getZero().strictlyPositive());\n+\n+        Assert.assertTrue(field.getZero().negate().negativeOrNull());\n+        Assert.assertTrue(field.getZero().negate().positiveOrNull());\n+        Assert.assertFalse(field.getZero().negate().strictlyNegative());\n+        Assert.assertFalse(field.getZero().negate().strictlyPositive());\n+\n+        Assert.assertFalse(field.getOne().negativeOrNull());\n+        Assert.assertTrue(field.getOne().positiveOrNull());\n+        Assert.assertFalse(field.getOne().strictlyNegative());\n+        Assert.assertTrue(field.getOne().strictlyPositive());\n+\n+        Assert.assertTrue(field.getOne().negate().negativeOrNull());\n+        Assert.assertFalse(field.getOne().negate().positiveOrNull());\n+        Assert.assertTrue(field.getOne().negate().strictlyNegative());\n+        Assert.assertFalse(field.getOne().negate().strictlyPositive());\n+\n+        Assert.assertFalse(nan.negativeOrNull());\n+        Assert.assertFalse(nan.positiveOrNull());\n+        Assert.assertFalse(nan.strictlyNegative());\n+        Assert.assertFalse(nan.strictlyPositive());\n+\n+        Assert.assertFalse(nan.negate().negativeOrNull());\n+        Assert.assertFalse(nan.negate().positiveOrNull());\n+        Assert.assertFalse(nan.negate().strictlyNegative());\n+        Assert.assertFalse(nan.negate().strictlyPositive());\n+\n+        Assert.assertFalse(pinf.negativeOrNull());\n+        Assert.assertTrue(pinf.positiveOrNull());\n+        Assert.assertFalse(pinf.strictlyNegative());\n+        Assert.assertTrue(pinf.strictlyPositive());\n+\n+        Assert.assertTrue(pinf.negate().negativeOrNull());\n+        Assert.assertFalse(pinf.negate().positiveOrNull());\n+        Assert.assertTrue(pinf.negate().strictlyNegative());\n+        Assert.assertFalse(pinf.negate().strictlyPositive());\n+\n+        Assert.assertTrue(ninf.negativeOrNull());\n+        Assert.assertFalse(ninf.positiveOrNull());\n+        Assert.assertTrue(ninf.strictlyNegative());\n+        Assert.assertFalse(ninf.strictlyPositive());\n+\n+        Assert.assertFalse(ninf.negate().negativeOrNull());\n+        Assert.assertTrue(ninf.negate().positiveOrNull());\n+        Assert.assertFalse(ninf.negate().strictlyNegative());\n+        Assert.assertTrue(ninf.negate().strictlyPositive());\n+\n+    }\n+\n }", "timestamp": 1311953650, "metainfo": ""}