{"sha": "4ce4db7bdfc7ef81c9af96acedf987ef90600031", "log": "An implementation of ordinary least squares regression with one independent variable. The implementation uses running sums and does not require the data to be stored in memory.  Since I could not conceive of any significantly different implementation strategies that did not amount to just improving efficiency or numerical accuracy of what I am submitting, I did not abstract the interface.  The test cases validate the computations against NIST reference data and verified computations. The slope, intercept, their standard errors and r-square estimates are accurate to within 10E-12 against the reference data set.  MSE and other ANOVA stats are good at least to within 10E-8. -- Phil S.  PR: Issue #20224 Obtained from: Bugzilla Submitted by: Phil Steitz Reviewed by: Tim O'Brien   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/BivariateRegression.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.math;\n+\n+/**\n+ * Estimates an ordinary least squares regression model\n+ * with one independent variable: <p>\n+ *\n+ * y = intercept + slope * x  </code><p>\n+ *\n+ * Standard errors for <code>intercept</code> and <code>slope</code> are \n+ * available as well as ANOVA, r-square and Pearson's r statistics.<p>\n+ *\n+ * Observations (x,y pairs) can be added to the model one at a time or they \n+ * can be provided in a 2-dimensional array.  The observations are not stored\n+ * in memory, so there is no limit to the number of observations that can be\n+ * added to the model. <p>\n+ *\n+ * <strong>Usage Notes</strong>: <ul>\n+ * <li> When there are fewer than two observations in the model, or when\n+ * there is no variation in the x values (i.e. all x values are the same) \n+ * all statistics return <code>NaN</code>. At least two observations with\n+ * different x coordinates are requred to estimate a bivariate regression model.</li>\n+ * <li> getters for the statistics always compute values based on the current\n+ * set of observations -- i.e., you can get statistics, then add more data\n+ * and get updated statistics without using a new instance.  There is no \n+ * \"compute\" method that updates all statistics.  Each of the getters performs\n+ * the necessary computations to return the requested statistic.</li>\n+ * </ul>\n+ *\n+ * @author  Phil Steitz\n+ * @version $Revision: 1.1 $ $Date: 2003/05/26 02:11:50 $\n+ */\n+public class BivariateRegression {\n+    \n+    /** sum of x values */\n+    private double sumX = 0d;\n+    \n+    /** sum of squared x values */\n+    private double sumSqX = 0d;\n+    \n+    /** sum of y values */\n+    private double sumY = 0d;\n+    \n+    /** sum of squared y values */\n+    private double sumSqY = 0d;\n+    \n+    /** sum of products */\n+    private double sumXY = 0d;\n+    \n+    /** number of observations */\n+    private long n = 0;\n+    \n+    // ---------------------Public methods--------------------------------------\n+    \n+    /**\n+     * Adds the observation (x,y) to the regression data set\n+     *\n+     * @param x independent variable value\n+     * @param y dependent variable value\n+     */\n+    public void addData(double x, double y) {\n+        sumX += x;\n+        sumSqX += x*x;\n+        sumY += y;\n+        sumSqY += y*y;\n+        sumXY += x*y;\n+        n++;\n+    } \n+    \n+    /**\n+     * Adds the observations represented by the elements in <code>data.</code><p>\n+     * <code>(data[0][0],data[0][1])</code> will be the first observation, then\n+     * <code>(data[1][0],data[1][1])</code>, etc. <p> \n+     * \n+     * This method does not replace data that has already been added.  \n+     * To replace all data, use <code>clear()</code> before adding the new data.\n+     * \n+     * @param data array of observations to be added\n+     */\n+    public void addData(double[][] data) {\n+       for (int i = 0; i < data.length; i++) {\n+            addData(data[i][0],data[i][1]);\n+       }\n+    }\n+    \n+    /*\n+     * Clears all data from the model\n+     */\n+    public void clear() {\n+        sumX = 0d;\n+        sumSqX = 0d;\n+        sumY = 0d;\n+        sumSqY = 0d;\n+        sumXY = 0d;\n+        n = 0;\n+    }\n+          \n+    /**\n+     * Returns the number of observations that have been added to the model\n+     *\n+     * @return n\n+     */\n+    public long getN() {\n+        return n;\n+    }\n+    \n+    /**\n+     * Returns the \"predicted\" <code>y</code> value associated with the \n+     * supplied <code>x</code> value. Specifically, <p>\n+     *\n+     * <code> predict(x) = intercept + slope * x </code> <p>\n+     *\n+     * At least two observations (with at least two different x values)\n+     * must have been added before invoking this method. If this method is \n+     * invoked before a model can be estimated, <code>Double,NaN</code> is\n+     * returned.\n+     *\n+     * @param x input <code>x</code> value\n+     * @return predicted <code>y</code> value\n+     */\n+    public double predict(double x) {\n+        double b1 = getSlope();\n+        if (b1 == Double.NaN) {\n+            return b1;\n+        }\n+        return getIntercept(b1) + b1*x;\n+    }\n+    \n+    /**\n+     * Returns the intercept of the estimated regression line.\n+     * The least squares estimate of the intercept is computed using the normal\n+     * equations, as described \n+     * <a href=http://www.xycoon.com/estimation4.htm>here</a>.\n+     * The intercept is sometimes denoted b0. <p>\n+     *\n+     * At least two distinct data pairs (with at least two different x values)\n+     * must have been added before invoking this method. If this method is \n+     * invoked before a model can be estimated, <code>Double,NaN</code> is\n+     * returned.\n+     *\n+     * @return the intercept of the regression line\n+     */\n+     public double getIntercept() {\n+         return getIntercept(getSlope());\n+     }\n+     \n+     /**\n+     * Returns the slope of the estimated regression line.  \n+     * The least squares estimate of the slope is computed using the normal\n+     * equations, as described \n+     * <a href=http://www.xycoon.com/estimation4.htm>here</a>.\n+     * The slope is sometimes denoted b1. <p>\n+     *\n+     * At least two observations (with at least two different x values)\n+     * must have been added before invoking this method. If this method is \n+     * invoked before a model can be estimated, <code>Double,NaN</code> is\n+     * returned.\n+     *\n+     * @return the slope of the regression line\n+     */\n+     public double getSlope() {\n+         if (n < 2) {\n+             return Double.NaN;  //not enough data \n+         }\n+         double dn = (double) n;\n+         double denom = sumSqX - (sumX*sumX/dn);\n+         if (Math.abs(denom)< 10*Double.MIN_VALUE) { \n+             return Double.NaN; //not enough variation in x\n+         }\n+         return (sumXY - (sumX*sumY/dn))/denom;\n+     }\n+     \n+     /**\n+      * Returns the sum of squared errors</a> associated with the regression \n+      * model. This is defined as SSE \n+      * <a href=http://www.xycoon.com/SumOfSquares.htm>here</a>. <p>\n+      *\n+      * At least two distinct data pairs (with at least two different x values)\n+      * must have been added before invoking this method. If this method is \n+      * invoked before a model can be estimated, <code>Double,NaN</code> is\n+      * returned.\n+      *\n+      * @return sum of squared errors associated with the regression model\n+      */\n+     public double getSumSquaredErrors() {\n+         return getSumSquaredErrors(getSlope());\n+     }\n+     \n+     /**\n+      * Returns the sum of squared deviations of the y values about their mean.\n+      * This is defined as SSTO \n+      * <a href=http://www.xycoon.com/SumOfSquares.htm>here</a>.\n+      * <p>\n+      * If n < 2, this returns NaN.\n+      *\n+      * @return sum of squared deviations of y values\n+      */\n+     public double getTotalSumSquares() {\n+         if (n < 2) {\n+             return Double.NaN;\n+         }\n+         return sumSqY - sumY*sumY/(double) n;\n+     }\n+         \n+     /**\n+      * Returns the sum of squared deviations of the predicted y values about \n+      * their mean (which equals the mean of y).\n+      * This is usually abbreviated SSR or SSM.  It is defined as SSM \n+      * <a href=http://www.xycoon.com/SumOfSquares.htm>here</a><p>\n+      *\n+      * At least two distinct data pairs (with at least two different x values)\n+      * must have been added before invoking this method. If this method is \n+      * invoked before a model can be estimated, <code>Double,NaN</code> is\n+      * returned.\n+      *\n+      * @return sum of squared deviations of y values\n+      */\n+     public double getRegressionSumSquares() {\n+         double b1 = getSlope();\n+         if (b1 == Double.NaN) {\n+             return b1;\n+         }\n+         return b1*(sumXY - sumX*sumY/(double) n);\n+     }\n+     \n+     /**\n+      * Returns the sum of squared errors divided by the degrees of freedom.\n+      * This is usually abbreviated MSE. <p>\n+      *\n+      * If there are fewer than <strong>three</strong> data pairs in the model,\n+      * or if there is no variation in x, this returns <code>NaN</code>.\n+      *\n+      * @return sum of squared deviations of y values\n+      */\n+     public double getMeanSquareError() {\n+         if (n < 3) {\n+             return Double.NaN;\n+         }\n+         double sse = getSumSquaredErrors();\n+         if (sse == Double.NaN) {\n+             return sse;\n+         }\n+         return sse/(double) (n - 2);\n+     }\n+     \n+     /**\n+      * Returns <a href=http://www.stt.msu.edu/~xiaoyimi/STT200/Lecture5.pdf>\n+      * Pearson's product moment correlation coefficient</a>.\n+      * This is usually denoted r. <p>\n+      *\n+      * At least two observations (with at least two different x values)\n+      * must have been added before invoking this method. If this method is \n+      * invoked before a model can be estimated, <code>Double,NaN</code> is\n+      * returned.\n+      *\n+      * @return Pearson's r\n+      */\n+     public double getR() {\n+         double b1 = getSlope();\n+         if (b1 == Double.NaN) {\n+             return b1;\n+         }\n+         double result = Math.sqrt(getRSquare(b1));\n+         if (b1 < 0) {\n+             result = -result;\n+         }\n+         return result;\n+     }\n+             \n+     /** \n+      * Returns the <a href=http://www.xycoon.com/coefficient1.htm> coefficient\n+      * of determination</a>.\n+      * This is usually denoted r-square. <p>\n+      *\n+      * At least two observaions (with at least two different x values)\n+      * must have been added before invoking this method. If this method is \n+      * invoked before a model can be estimated, <code>Double,NaN</code> is\n+      * returned.\n+      *\n+      * @return r-square\n+      */\n+     public double getRSquare() {\n+         return getRSquare(getSlope());\n+     }\n+     \n+         \n+     /**\n+      * Returns the <a href=http://www.xycoon.com/standarderrorb0.htm>standard\n+      * error of the intercept estimate</a>.\n+      * This is usually denoted s(b0). <p>\n+      *\n+      * If there are fewer that <strong>three</strong> observations in the model,\n+      * or if there is no variation in x, this returns <code>NaN</code>.\n+      *\n+      * @return standard error associated with intercept estimate\n+      */\n+     public double getInterceptStdErr() {\n+         double ssx = getSumSquaresX();\n+         if (ssx == Double.NaN) {\n+             return ssx;\n+         }\n+         return Math.sqrt(getMeanSquareError()*sumSqX/(((double) n)*ssx));\n+     }\n+             \n+     /**\n+      * Returns the <a http://www.xycoon.com/standerrorb(1).htm>standard\n+      * error of the slope estimate</a>.\n+      * This is usually denoted s(b1). <p>\n+      *\n+      * If there are fewer that <strong>three</strong> data pairs in the model,\n+      * or if there is no variation in x, this returns <code>NaN</code>.\n+      *\n+      * @return standard error associated with slope estimate\n+      */\n+     public double getSlopeStdErr() {\n+         double ssx = getSumSquaresX();\n+         if (ssx == Double.NaN) {\n+             return ssx;\n+         }\n+         return Math.sqrt(getMeanSquareError()/ssx);\n+     }\n+     \n+     // ---------------------Private methods-----------------------------------\n+     \n+     /**\n+     * Returns the intercept of the estimated regression line, given the slope.\n+     * Will return <code>NaN</code> if slope is <code>NaN</code>.\n+     *\n+     * @param slope current slope\n+     * @return the intercept of the regression line\n+     */\n+     private double getIntercept(double slope) {\n+         if (slope == Double.NaN) {\n+             return slope;\n+         }\n+         return (sumY - slope*sumX)/((double) n);\n+     }\n+       \n+     /**\n+      * Returns the sum of squared errors</a> associated with the regression \n+      * model, using the slope of the regression line.  Returns NaN if the slope\n+      * is NaN.\n+      *\n+      * @return sum of squared errors associated with the regression model\n+      */\n+     private double getSumSquaredErrors(double b1) {\n+         if (b1 == Double.NaN) {\n+             return b1;\n+         }\n+         double b0 = getIntercept(b1);\n+         return sumSqY - b0*sumY - b1*sumXY;\n+     } \n+     \n+     /**\n+      * Returns the sum of squared deviations of the x values about their mean.\n+      * <p>\n+      * If n < 2, this returns NaN.\n+      *\n+      * @return sum of squared deviations of x values\n+      */\n+     private double getSumSquaresX() {\n+         if (n < 2) {\n+             return Double.NaN;\n+         }\n+         return sumSqX - sumX*sumX/(double) n;\n+     }\n+     \n+     /** \n+      * Computes r-square from the slope.\n+      * will return NaN if slope is Nan\n+      *\n+      * @return r-square\n+      */\n+     private double getRSquare(double b1) {\n+         if (b1 == Double.NaN) {\n+             return b1;\n+         }\n+         double ssto = getTotalSumSquares();\n+         if (ssto == Double.NaN) {\n+             return ssto;\n+         }\n+         return (ssto - getSumSquaredErrors(b1))/ssto;\n+     }\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/BivariateRegressionTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+/**\n+ * Test cases for the TestStatistic class.\n+ *\n+ * @author Phil Steitz\n+ * @version $Revision: 1.1 $ $Date: 2003/05/26 02:11:50 $\n+ */\n+\n+public final class BivariateRegressionTest extends TestCase {\n+\n+    /* \n+     * NIST \"Norris\" refernce data set from \n+     * http://www.itl.nist.gov/div898/strd/lls/data/LINKS/DATA/Norris.dat\n+     * Strangely, order is {y,x}\n+     */\n+    private double[][] data = {{0.1,0.2},{338.8,337.4},{118.1,118.2},\n+        {888.0,884.6},{9.2,10.1},{228.1,226.5},{668.5,666.3},{998.5,996.3},\n+        {449.1,448.6},{778.9,777.0},{559.2,558.2},{0.3,0.4},{0.1,0.6},\n+        {778.1,775.5},{668.8,666.9},{339.3,338.0},{448.9,447.5},{10.8,11.6},\n+        {557.7,556.0},{228.3,228.1},{998.0,995.8},{888.8,887.6},{119.6,120.2},\n+        {0.3,0.3},{0.6,0.3},{557.6,556.8},{339.3,339.1},{888.0,887.2},\n+        {998.5,999.0},{778.9,779.0},{10.2,11.1},{117.6,118.3},{228.9,229.2},\n+        {668.4,669.1},{449.2,448.9},{0.2,0.5}}; \n+        \n+    /* \n+     * Correlation example from \n+     * http://www.xycoon.com/correlation.htm\n+     */\n+    private double[][] corrData = {{101.0,99.2},{100.1,99.0},{100.0,100.0},\n+        {90.6,111.6},{86.5,122.2},{89.7,117.6},{90.6,121.1},{82.8,136.0},\n+        {70.1,154.2},{65.4,153.6},{61.3,158.5},{62.5,140.6},{63.6,136.2},\n+        {52.6,168.0},{59.7,154.3},{59.5,149.0},{61.3,165.5}};\n+    \n+    public BivariateRegressionTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() { \n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(BivariateRegressionTest.class);\n+        suite.setName(\"BivariateRegression Tests\");\n+        return suite;\n+    }\n+    \n+    public void testNorris() {\n+       BivariateRegression regression = new BivariateRegression();\n+       for (int i = 0; i < data.length; i++) {\n+           regression.addData(data[i][1],data[i][0]);\n+       }\n+       assertEquals(\"slope\",1.00211681802045, \n+            regression.getSlope(),10E-12);\n+       assertEquals(\"slope std err\",0.429796848199937E-03, \n+            regression.getSlopeStdErr(),10E-12);\n+       assertEquals(\"number of observations\",36,regression.getN());\n+       assertEquals(\"intercept\", -0.262323073774029,\n+            regression.getIntercept(),10E-12);\n+       assertEquals(\"std err intercept\", 0.232818234301152, \n+            regression.getInterceptStdErr(),10E-12);\n+       assertEquals(\"r-square\",0.999993745883712,\n+            regression.getRSquare(),10E-12);\n+       assertEquals(\"SSR\",4255954.13232369, \n+            regression.getRegressionSumSquares(),10E-8);\n+       assertEquals(\"MSE\",0.782864662630069, \n+            regression.getMeanSquareError(),10E-8);\n+       assertEquals(\"SSE\",26.6173985294224, \n+            regression.getSumSquaredErrors(),10E-8);\n+       assertEquals(\"predict(0)\",-0.262323073774029,\n+            regression.predict(0),10E-12);\n+       assertEquals(\"predict(1)\",1.00211681802045-0.262323073774029,\n+            regression.predict(1),10E-11);\n+    }\n+    \n+    public void testCorr() {\n+       BivariateRegression regression = new BivariateRegression();\n+       regression.addData(corrData);\n+       assertEquals(\"number of observations\",17,regression.getN());\n+       assertEquals(\"r-square\",.896123,\n+            regression.getRSquare(),10E-6);\n+       assertEquals(\"r\",-.946638, \n+            regression.getR(),10E-6);\n+    }  \n+    \n+    public void testNaNs() {\n+        \n+        BivariateRegression regression = new BivariateRegression();\n+        \n+        assertTrue(\"intercept not NaN\",Double.isNaN(regression.getIntercept()));\n+        assertTrue(\"slope not NaN\",Double.isNaN(regression.getSlope()));\n+        assertTrue(\"slope std err not NaN\",\n+            Double.isNaN(regression.getSlopeStdErr()));\n+        assertTrue(\"intercept std err not NaN\",\n+            Double.isNaN(regression.getInterceptStdErr()));\n+        assertTrue(\"MSE not NaN\",Double.isNaN(regression.getMeanSquareError()));\n+        assertTrue(\"e not NaN\",Double.isNaN(regression.getR()));\n+        assertTrue(\"r-square not NaN\",Double.isNaN(regression.getRSquare()));\n+        assertTrue(\"RSS not NaN\",\n+            Double.isNaN(regression.getRegressionSumSquares()));\n+        assertTrue(\"SSE not NaN\",Double.isNaN(regression.getSumSquaredErrors()));\n+        assertTrue(\"SSTO not NaN\",Double.isNaN(regression.getTotalSumSquares()));\n+        assertTrue(\"predict not NaN\",Double.isNaN(regression.predict(0)));\n+        \n+        regression.addData(1,2);\n+        regression.addData(1,3);\n+        \n+        // No x variation, so these should still blow...\n+        assertTrue(\"intercept not NaN\",Double.isNaN(regression.getIntercept()));\n+        assertTrue(\"slope not NaN\",Double.isNaN(regression.getSlope()));\n+        assertTrue(\"slope std err not NaN\",\n+            Double.isNaN(regression.getSlopeStdErr()));\n+        assertTrue(\"intercept std err not NaN\",\n+            Double.isNaN(regression.getInterceptStdErr()));\n+        assertTrue(\"MSE not NaN\",Double.isNaN(regression.getMeanSquareError()));\n+        assertTrue(\"e not NaN\",Double.isNaN(regression.getR()));\n+        assertTrue(\"r-square not NaN\",Double.isNaN(regression.getRSquare()));\n+        assertTrue(\"RSS not NaN\",\n+            Double.isNaN(regression.getRegressionSumSquares()));\n+        assertTrue(\"SSE not NaN\",Double.isNaN(regression.getSumSquaredErrors()));\n+        assertTrue(\"predict not NaN\",Double.isNaN(regression.predict(0)));\n+        \n+        // but SSTO should be OK\n+         assertTrue(\"SSTO NaN\",!Double.isNaN(regression.getTotalSumSquares()));\n+        \n+        regression = new BivariateRegression();\n+        \n+        regression.addData(1,2);\n+        regression.addData(3,3);\n+        \n+        // All should be OK except MSE, s(b0), s(b1) which need one more df \n+        assertTrue(\"interceptNaN\",!Double.isNaN(regression.getIntercept()));\n+        assertTrue(\"slope NaN\",!Double.isNaN(regression.getSlope()));\n+        assertTrue(\"slope std err not NaN\",\n+            Double.isNaN(regression.getSlopeStdErr()));\n+        assertTrue(\"intercept std err not NaN\",\n+            Double.isNaN(regression.getInterceptStdErr()));\n+        assertTrue(\"MSE not NaN\",Double.isNaN(regression.getMeanSquareError()));\n+        assertTrue(\"r NaN\",!Double.isNaN(regression.getR()));\n+        assertTrue(\"r-square NaN\",!Double.isNaN(regression.getRSquare()));\n+        assertTrue(\"RSS NaN\",\n+            !Double.isNaN(regression.getRegressionSumSquares()));\n+        assertTrue(\"SSE NaN\",!Double.isNaN(regression.getSumSquaredErrors()));\n+        assertTrue(\"SSTO NaN\",!Double.isNaN(regression.getTotalSumSquares()));\n+        assertTrue(\"predict NaN\",!Double.isNaN(regression.predict(0)));\n+        \n+        regression.addData(1,4);\n+        \n+        // MSE, MSE, s(b0), s(b1) should all be OK now\n+        assertTrue(\"MSE NaN\",!Double.isNaN(regression.getMeanSquareError()));\n+        assertTrue(\"slope std err NaN\",\n+            !Double.isNaN(regression.getSlopeStdErr()));\n+        assertTrue(\"intercept std err NaN\",\n+            !Double.isNaN(regression.getInterceptStdErr()));\n+    }\n+    \n+    public void testClear() {\n+       BivariateRegression regression = new BivariateRegression();\n+       regression.addData(corrData);\n+       assertEquals(\"number of observations\",17,regression.getN());\n+       regression.clear();\n+       assertEquals(\"number of observations\",0,regression.getN());\n+       regression.addData(corrData);\n+       assertEquals(\"r-square\",.896123,regression.getRSquare(),10E-6);\n+       regression.addData(data);\n+       assertEquals(\"number of observations\",53,regression.getN());\n+    }\n+                    \n+}\n+", "timestamp": 1053915110, "metainfo": ""}