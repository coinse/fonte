{"sha": "be48cdb1e44684934167770bafacd7e1ea0569d0", "log": "In class Gamma, implementation of (a, b) -> log(Gamma(a + b)). See MATH-738.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/special/Gamma.java\n+++ b/src/main/java/org/apache/commons/math3/special/Gamma.java\n import org.apache.commons.math3.exception.MaxCountExceededException;\n import org.apache.commons.math3.exception.NumberIsTooLargeException;\n import org.apache.commons.math3.exception.NumberIsTooSmallException;\n+import org.apache.commons.math3.exception.OutOfRangeException;\n import org.apache.commons.math3.util.ContinuedFraction;\n import org.apache.commons.math3.util.FastMath;\n \n         }\n         return ret;\n     }\n+\n+    /**\n+     * Returns the value of log \u0393(a + b) for 1 \u2264 a, b \u2264 2.\n+     *\n+     * @param a First argument.\n+     * @param b Second argument.\n+     * @return the value of {@code log(Gamma(a + b))}.\n+     * @throws OutOfRangeException if {@code a} or {@code b} is lower than\n+     * {@code 1.0} or greater than {@code 2.0}.\n+     */\n+    public static double logGammaSum(final double a, final double b)\n+        throws OutOfRangeException {\n+\n+        if ((a < 1.0) || (a > 2.0)) {\n+            throw new OutOfRangeException(a, 1.0, 2.0);\n+        }\n+        if ((b < 1.0) || (b > 2.0)) {\n+            throw new OutOfRangeException(b, 1.0, 2.0);\n+        }\n+\n+        final double x = a + b - 2.0;\n+        if (x <= 0.25) {\n+            return Gamma.logGamma1p(1.0 + x);\n+        } else if (x <= 1.25) {\n+            return Gamma.logGamma1p(x) + FastMath.log1p(x);\n+        } else {\n+            return Gamma.logGamma1p(x - 1.0) + FastMath.log(x * (1.0 + x));\n+        }\n+    }\n }\n--- a/src/test/java/org/apache/commons/math3/special/GammaTest.java\n+++ b/src/test/java/org/apache/commons/math3/special/GammaTest.java\n      *     print(\"{\", float(x[i]), \",\", float(gamma(x[i])), \"},\");\n      * </pre>\n      */\n-    private final static double[][] GAMMA_REF = {\n+    private static final double[][] GAMMA_REF = {\n         { - 19.875 , 4.920331854832504e-18 },\n         { - 19.75 , 3.879938752480031e-18 },\n         { - 19.625 , 4.323498423815027e-18 },\n         }\n     }\n \n+    /**\n+     * Reference data for the {@link Gamma#logGammaSum(double, double)}\n+     * function. This data was generated with the following\n+     * <a href=\"http://maxima.sourceforge.net/\">Maxima</a> script.\n+     *\n+     * <pre>\n+     * kill(all);\n+     *\n+     * fpprec : 64;\n+     * gsumln(a, b) := log(gamma(a + b));\n+     *\n+     * x : [1.0b0, 1.125b0, 1.25b0, 1.375b0, 1.5b0, 1.625b0, 1.75b0, 1.875b0, 2.0b0];\n+     *\n+     * for i : 1 while i <= length(x) do\n+     *   for j : 1 while j <= length(x) do block(\n+     *     a : x[i],\n+     *     b : x[j],\n+     *     print(\"{\", float(a), \",\", float(b), \",\", float(gsumln(a, b)), \"},\")\n+     *   );\n+     * </pre>\n+     */\n+    private static final double[][] LOG_GAMMA_SUM_REF = {\n+        { 1.0 , 1.0 , 0.0 },\n+        { 1.0 , 1.125 , .05775985153034387 },\n+        { 1.0 , 1.25 , .1248717148923966 },\n+        { 1.0 , 1.375 , .2006984603774558 },\n+        { 1.0 , 1.5 , .2846828704729192 },\n+        { 1.0 , 1.625 , .3763336820249054 },\n+        { 1.0 , 1.75 , .4752146669149371 },\n+        { 1.0 , 1.875 , .5809359740231859 },\n+        { 1.0 , 2.0 , .6931471805599453 },\n+        { 1.125 , 1.0 , .05775985153034387 },\n+        { 1.125 , 1.125 , .1248717148923966 },\n+        { 1.125 , 1.25 , .2006984603774558 },\n+        { 1.125 , 1.375 , .2846828704729192 },\n+        { 1.125 , 1.5 , .3763336820249054 },\n+        { 1.125 , 1.625 , .4752146669149371 },\n+        { 1.125 , 1.75 , .5809359740231859 },\n+        { 1.125 , 1.875 , .6931471805599453 },\n+        { 1.125 , 2.0 , 0.811531653906724 },\n+        { 1.25 , 1.0 , .1248717148923966 },\n+        { 1.25 , 1.125 , .2006984603774558 },\n+        { 1.25 , 1.25 , .2846828704729192 },\n+        { 1.25 , 1.375 , .3763336820249054 },\n+        { 1.25 , 1.5 , .4752146669149371 },\n+        { 1.25 , 1.625 , .5809359740231859 },\n+        { 1.25 , 1.75 , .6931471805599453 },\n+        { 1.25 , 1.875 , 0.811531653906724 },\n+        { 1.25 , 2.0 , .9358019311087253 },\n+        { 1.375 , 1.0 , .2006984603774558 },\n+        { 1.375 , 1.125 , .2846828704729192 },\n+        { 1.375 , 1.25 , .3763336820249054 },\n+        { 1.375 , 1.375 , .4752146669149371 },\n+        { 1.375 , 1.5 , .5809359740231859 },\n+        { 1.375 , 1.625 , .6931471805599453 },\n+        { 1.375 , 1.75 , 0.811531653906724 },\n+        { 1.375 , 1.875 , .9358019311087253 },\n+        { 1.375 , 2.0 , 1.06569589786406 },\n+        { 1.5 , 1.0 , .2846828704729192 },\n+        { 1.5 , 1.125 , .3763336820249054 },\n+        { 1.5 , 1.25 , .4752146669149371 },\n+        { 1.5 , 1.375 , .5809359740231859 },\n+        { 1.5 , 1.5 , .6931471805599453 },\n+        { 1.5 , 1.625 , 0.811531653906724 },\n+        { 1.5 , 1.75 , .9358019311087253 },\n+        { 1.5 , 1.875 , 1.06569589786406 },\n+        { 1.5 , 2.0 , 1.200973602347074 },\n+        { 1.625 , 1.0 , .3763336820249054 },\n+        { 1.625 , 1.125 , .4752146669149371 },\n+        { 1.625 , 1.25 , .5809359740231859 },\n+        { 1.625 , 1.375 , .6931471805599453 },\n+        { 1.625 , 1.5 , 0.811531653906724 },\n+        { 1.625 , 1.625 , .9358019311087253 },\n+        { 1.625 , 1.75 , 1.06569589786406 },\n+        { 1.625 , 1.875 , 1.200973602347074 },\n+        { 1.625 , 2.0 , 1.341414578068493 },\n+        { 1.75 , 1.0 , .4752146669149371 },\n+        { 1.75 , 1.125 , .5809359740231859 },\n+        { 1.75 , 1.25 , .6931471805599453 },\n+        { 1.75 , 1.375 , 0.811531653906724 },\n+        { 1.75 , 1.5 , .9358019311087253 },\n+        { 1.75 , 1.625 , 1.06569589786406 },\n+        { 1.75 , 1.75 , 1.200973602347074 },\n+        { 1.75 , 1.875 , 1.341414578068493 },\n+        { 1.75 , 2.0 , 1.486815578593417 },\n+        { 1.875 , 1.0 , .5809359740231859 },\n+        { 1.875 , 1.125 , .6931471805599453 },\n+        { 1.875 , 1.25 , 0.811531653906724 },\n+        { 1.875 , 1.375 , .9358019311087253 },\n+        { 1.875 , 1.5 , 1.06569589786406 },\n+        { 1.875 , 1.625 , 1.200973602347074 },\n+        { 1.875 , 1.75 , 1.341414578068493 },\n+        { 1.875 , 1.875 , 1.486815578593417 },\n+        { 1.875 , 2.0 , 1.6369886482725 },\n+        { 2.0 , 1.0 , .6931471805599453 },\n+        { 2.0 , 1.125 , 0.811531653906724 },\n+        { 2.0 , 1.25 , .9358019311087253 },\n+        { 2.0 , 1.375 , 1.06569589786406 },\n+        { 2.0 , 1.5 , 1.200973602347074 },\n+        { 2.0 , 1.625 , 1.341414578068493 },\n+        { 2.0 , 1.75 , 1.486815578593417 },\n+        { 2.0 , 1.875 , 1.6369886482725 },\n+        { 2.0 , 2.0 , 1.791759469228055 },\n+    };\n+\n+    @Test\n+    public void testLogGammaSum() {\n+        final int ulps = 5;\n+        for (int i = 0; i < LOG_GAMMA_SUM_REF.length; i++) {\n+            final double[] ref = LOG_GAMMA_SUM_REF[i];\n+            final double a = ref[0];\n+            final double b = ref[1];\n+            final double expected = ref[2];\n+            final double actual = Gamma.logGammaSum(a, b);\n+            final double tol = ulps * FastMath.ulp(expected);\n+            final StringBuilder builder = new StringBuilder();\n+            builder.append(a).append(\", \").append(b);\n+            Assert.assertEquals(builder.toString(), expected, actual, tol);\n+        }\n+    }\n+\n     private void checkRelativeError(String msg, double expected, double actual, double tolerance) {\n         Assert.assertEquals(msg, expected, actual, FastMath.abs(tolerance * actual));\n     }", "timestamp": 1353355645, "metainfo": ""}