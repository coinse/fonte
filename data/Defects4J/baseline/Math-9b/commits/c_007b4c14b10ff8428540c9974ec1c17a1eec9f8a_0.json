{"sha": "007b4c14b10ff8428540c9974ec1c17a1eec9f8a", "log": "MATH-931 Efficiency improvement and unit test (thanks to Sean Owen).   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/random/UnitSphereRandomVectorGenerator.java\n+++ b/src/main/java/org/apache/commons/math3/random/UnitSphereRandomVectorGenerator.java\n \n     /** {@inheritDoc} */\n     public double[] nextVector() {\n-\n         final double[] v = new double[dimension];\n \n-        double normSq;\n-        do {\n-            normSq = 0;\n-            for (int i = 0; i < dimension; i++) {\n-                final double comp = 2 * rand.nextDouble() - 1;\n-                v[i] = comp;\n-                normSq += comp * comp;\n-            }\n-        } while (normSq > 1);\n+        // See http://mathworld.wolfram.com/SpherePointPicking.html for example.\n+        // Pick a point by choosing a standard Gaussian for each element, and then \n+        // normalizing to unit length.\n+        double normSq = 0;\n+        for (int i = 0; i < dimension; i++) {\n+            final double comp = rand.nextGaussian();\n+            v[i] = comp;\n+            normSq += comp * comp;\n+        }\n \n         final double f = 1 / FastMath.sqrt(normSq);\n         for (int i = 0; i < dimension; i++) {\n         }\n \n         return v;\n-\n     }\n-\n }\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math3/random/UnitSphereRandomVectorGeneratorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.random;\n+\n+import org.apache.commons.math3.util.FastMath;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class UnitSphereRandomVectorGeneratorTest {\n+    /**\n+     * Test the distribution of points from {@link UnitSphereRandomVectorGenerator#nextVector()}\n+     * in two dimensions.\n+     */\n+    @Test\n+    public void test2DDistribution() {\n+      \n+        RandomGenerator rg = new JDKRandomGenerator();\n+        rg.setSeed(17399225432l);\n+        UnitSphereRandomVectorGenerator generator = new UnitSphereRandomVectorGenerator(2, rg);\n+\n+        // In 2D, angles with a given vector should be uniformly distributed\n+        int[] angleBuckets = new int[100];\n+        int steps = 1000000;\n+        for (int i = 0; i < steps; ++i) {\n+            final double[] v = generator.nextVector();\n+            Assert.assertEquals(2, v.length);\n+            Assert.assertEquals(1, length(v), 1e-10);\n+            // Compute angle formed with vector (1,0)\n+            // Cosine of angle is their dot product, because both are unit length\n+            // Dot product here is just the first element of the vector by construction\n+            final double angle = FastMath.acos(v[0]);\n+            final int bucket = (int) (angleBuckets.length * (angle / FastMath.PI));\n+            ++angleBuckets[bucket];\n+        }\n+\n+        // Simplistic test for roughly even distribution\n+        final int expectedBucketSize = steps / angleBuckets.length;\n+        for (int bucket : angleBuckets) {\n+            Assert.assertTrue(\"Bucket count \" + bucket + \" vs expected \" + expectedBucketSize,\n+                              FastMath.abs(expectedBucketSize - bucket) < 350);\n+        }\n+    }\n+\n+    /**\n+     * @return length (L2 norm) of given vector\n+     */\n+    private static double length(double[] vector) {\n+        double total = 0;\n+        for (double d : vector) {\n+            total += d * d;\n+        }\n+        return FastMath.sqrt(total);\n+    }\n+}", "timestamp": 1359588461, "metainfo": ""}