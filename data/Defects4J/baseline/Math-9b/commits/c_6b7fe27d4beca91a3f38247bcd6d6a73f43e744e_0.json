{"sha": "6b7fe27d4beca91a3f38247bcd6d6a73f43e744e", "log": "added a static method createBlocksLayout to prepare array before constructing the matrix  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/DenseRealMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/DenseRealMatrix.java\n         blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\n \n         // allocate storage blocks, taking care of smaller ones at right and bottom\n-        blocks = new double[blockRows * blockColumns][];\n-        int blockIndex = 0;\n-        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {\n-            final int iHeight = blockHeight(iBlock);\n-            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {\n-                blocks[blockIndex++] = new double[iHeight * blockWidth(jBlock)];\n-            }\n-        }\n+        blocks = createBlocksLayout(rows, columns);\n \n     }\n \n      *\n      * @exception IllegalArgumentException if <code>blockData</code> shape is\n      * inconsistent with block layout\n+     * @see #createBlocksLayout(int, int)\n      * @see #toBlocksLayout(double[][])\n      * @see #DenseRealMatrix(double[][])\n      */\n      * @return a new data array containing the same entries but in blocks layout\n      * @exception IllegalArgumentException if <code>rawData</code> is not rectangular\n      *  (not all rows have the same length)\n+     * @see #createBlocksLayout(int, int)\n      * @see #DenseRealMatrix(int, int, double[][], boolean)\n      */\n     public static double[][] toBlocksLayout(final double[][] rawData)\n                     System.arraycopy(rawData[p], qStart, block, index, jWidth);\n                 }\n \n+            }\n+        }\n+\n+        return blocks;\n+\n+    }\n+\n+    /**\n+     * Create a data array in blocks layout.\n+     * <p>\n+     * This method can be used to create the array argument of the {@link\n+     * DenseRealMatrix#DenseRealMatrix(int, int, double[][], boolean)} constructor.\n+     * </p>\n+     * @param rows  the number of rows in the new matrix\n+     * @param columns  the number of columns in the new matrix\n+     * @return a new data array in blocks layout\n+     * @see #toBlocksLayout(double[][])\n+     * @see #DenseRealMatrix(int, int, double[][], boolean)\n+     */\n+    public static double[][] createBlocksLayout(final int rows, final int columns)\n+        throws IllegalArgumentException {\n+\n+        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;\n+        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\n+\n+        final double[][] blocks = new double[blockRows * blockColumns][];\n+        for (int iBlock = 0, blockIndex = 0; iBlock < blockRows; ++iBlock) {\n+            final int pStart  = iBlock * BLOCK_SIZE;\n+            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);\n+            final int iHeight = pEnd - pStart;\n+            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++blockIndex) {\n+                final int qStart = jBlock * BLOCK_SIZE;\n+                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);\n+                final int jWidth = qEnd - qStart;\n+                blocks[blockIndex] = new double[iHeight * jWidth];\n             }\n         }\n ", "timestamp": 1230927669, "metainfo": ""}