{"sha": "76495c3c72416296f1c8f0a02e697a936d888036", "log": "MATH-475 Updated the Javadoc to make clear that 2 adjacent floating point numbers are considered equal whatever the allowed tolerance.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n     }\n \n     /**\n-     * Returns true if both arguments are equal or within the range of allowed\n+     * Returns {@code true} if there is no double value strictly between the\n+     * arguments or the difference between them is within the range of allowed\n      * error (inclusive).\n      *\n-     * @param x first value\n-     * @param y second value\n-     * @param eps the amount of absolute error to allow.\n-     * @return {@code true} if the values are equal or within range of each other.\n+     * @param x First value.\n+     * @param y Second value.\n+     * @param eps Amount of allowed absolute error.\n+     * @return {@code true} if the values are two adjacent floating point\n+     * numbers or they are within range of each other.\n      */\n     public static boolean equals(double x, double y, double eps) {\n         return equals(x, y, 1) || FastMath.abs(y - x) <= eps;\n--- a/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n         assertTrue(MathUtils.equals(153.0000, 153.0000, .0625));\n         assertTrue(MathUtils.equals(153.0000, 153.0625, .0625));\n         assertTrue(MathUtils.equals(152.9375, 153.0000, .0625));\n+        assertFalse(MathUtils.equals(153.0000, 153.0625, .0624));\n+        assertFalse(MathUtils.equals(152.9374, 153.0000, .0625));\n         assertFalse(MathUtils.equals(Double.NaN, Double.NaN, 1.0));\n         assertTrue(MathUtils.equals(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));\n         assertTrue(MathUtils.equals(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1.0));\n         assertFalse(MathUtils.equals(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));\n-        assertFalse(MathUtils.equals(153.0000, 153.0625, .0624));\n-        assertFalse(MathUtils.equals(152.9374, 153.0000, .0625));\n+    }\n+\n+    public void testMath475() {\n+        final double a = 1.7976931348623182E16;\n+        final double b = FastMath.nextUp(a);\n+\n+        double diff = FastMath.abs(a - b);\n+        // Because they are adjacent floating point numbers, \"a\" and \"b\" are\n+        // considered equal even though the allowed error is smaller than\n+        // their difference.\n+        assertTrue(MathUtils.equals(a, b, 0.5 * diff));\n+\n+        final double c = FastMath.nextUp(b);\n+        diff = FastMath.abs(a - c);\n+        // Because \"a\" and \"c\" are not adjacent, the tolerance is taken into\n+        // account for assessing equality.\n+        assertTrue(MathUtils.equals(a, c, diff));\n+        assertFalse(MathUtils.equals(a, c, (1 - 1e-16) * diff));\n     }\n \n     public void testEqualsIncludingNaNWithAllowedDelta() {", "timestamp": 1295269573, "metainfo": ""}