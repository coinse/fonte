{"sha": "3b68757304196242071b8b0af824e43ac1b410d9", "log": "Added a way for user to define tune convergence checking in CMA-ES.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\n import org.apache.commons.math.linear.EigenDecomposition;\n import org.apache.commons.math.linear.MatrixUtils;\n import org.apache.commons.math.linear.RealMatrix;\n+import org.apache.commons.math.optimization.ConvergenceChecker;\n import org.apache.commons.math.optimization.GoalType;\n import org.apache.commons.math.optimization.MultivariateRealOptimizer;\n import org.apache.commons.math.optimization.RealPointValuePair;\n+import org.apache.commons.math.optimization.SimpleScalarValueChecker;\n import org.apache.commons.math.random.MersenneTwister;\n import org.apache.commons.math.random.RandomGenerator;\n import org.apache.commons.math.util.MathArrays;\n                           double[][] boundaries, int maxIterations, double stopFitness,\n                           boolean isActiveCMA, int diagonalOnly, int checkFeasableCount,\n                           RandomGenerator random, boolean generateStatistics) {\n+        this(lambda, inputSigma, boundaries, maxIterations, stopFitness, isActiveCMA,\n+             diagonalOnly, checkFeasableCount, random, generateStatistics,\n+             new SimpleScalarValueChecker());\n+    }\n+\n+    /**\n+     * @param lambda Population size.\n+     * @param inputSigma Initial search volume; sigma of offspring objective variables.\n+     * @param boundaries Boundaries for objective variables.\n+     * @param maxIterations Maximal number of iterations.\n+     * @param stopFitness Whether to stop if objective function value is smaller than\n+     * {@code stopFitness}.\n+     * @param isActiveCMA Chooses the covariance matrix update method.\n+     * @param diagonalOnly Number of initial iterations, where the covariance matrix\n+     * remains diagonal.\n+     * @param checkFeasableCount Determines how often new random objective variables are\n+     * generated in case they are out of bounds.\n+     * @param random Random generator.\n+     * @param generateStatistics Whether statistic data is collected.\n+     * @param checker Convergence checker.\n+     */\n+    public CMAESOptimizer(int lambda, double[] inputSigma,\n+                          double[][] boundaries, int maxIterations, double stopFitness,\n+                          boolean isActiveCMA, int diagonalOnly, int checkFeasableCount,\n+                          RandomGenerator random, boolean generateStatistics,\n+                          ConvergenceChecker<RealPointValuePair> checker) {\n+        super(checker);\n         this.lambda = lambda;\n         this.inputSigma = inputSigma == null ? null : (double[]) inputSigma.clone();\n         if (boundaries == null) {", "timestamp": 1320688063, "metainfo": ""}