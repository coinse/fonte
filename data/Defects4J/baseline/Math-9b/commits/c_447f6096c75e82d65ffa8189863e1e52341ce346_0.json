{"sha": "447f6096c75e82d65ffa8189863e1e52341ce346", "log": "MATH-795: cleanup of RealVectorAbstractTest. Removed unused class variables and imports.   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n \n     @Test\n     public void testConstructors() {\n+        final double[] vec1 = {1d, 2d, 3d};\n+        final double[] vec3 = {7d, 8d, 9d};\n+        final double[] vec4 = {1d, 2d, 3d, 4d, 5d, 6d, 7d, 8d, 9d};\n+        final Double[] dvec1 = {1d, 2d, 3d, 4d, 5d, 6d, 7d, 8d, 9d};\n \n         ArrayRealVector v0 = new ArrayRealVector();\n         Assert.assertEquals(\"testData len\", 0, v0.getDimension());\n \n     @Test\n     public void testDataInOut() {\n+        final double[] vec1 = {1d, 2d, 3d};\n+        final double[] vec3 = {7d, 8d, 9d};\n \n         ArrayRealVector v1 = new ArrayRealVector(vec1);\n \n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n import org.apache.commons.math3.analysis.function.Ulp;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.MathArithmeticException;\n-import org.apache.commons.math3.exception.MathIllegalArgumentException;\n import org.apache.commons.math3.exception.NotPositiveException;\n import org.apache.commons.math3.exception.NumberIsTooSmallException;\n import org.apache.commons.math3.exception.OutOfRangeException;\n         }\n     }\n \n-    protected double[][] ma1 = {{1d, 2d, 3d}, {4d, 5d, 6d}, {7d, 8d, 9d}};\n-    protected double[] vec1 = {1d, 2d, 3d};\n-    protected double[] vec2 = {4d, 5d, 6d};\n-    protected double[] vec3 = {7d, 8d, 9d};\n-    protected double[] vec4 = {1d, 2d, 3d, 4d, 5d, 6d, 7d, 8d, 9d};\n-    protected double[] vec5 = { -4d, 0d, 3d, 1d, -6d, 3d};\n-    protected double[] vec_null = {0d, 0d, 0d};\n-    protected Double[] dvec1 = {1d, 2d, 3d, 4d, 5d, 6d, 7d, 8d, 9d};\n-    protected double[][] mat1 = {{1d, 2d, 3d}, {4d, 5d, 6d},{ 7d, 8d, 9d}};\n-\n-    /**\n-     * Data which can be used to create a specific vector. The array is\n-     * interspersed with the value returned by\n-     * {@link #getPreferredEntryValue()}.\n-     */\n-    private final double[] data1;\n-\n-\n-    /**\n-     * Data which can be used to create a specific vector. The array is\n-     * interspersed with the value returned by\n-     * {@link #getPreferredEntryValue()}.\n-     */\n-    private final double[] data2;\n-\n     public RealVectorAbstractTest() {\n-        final double x = getPreferredEntryValue();\n-        data1 = new double[] {x, 1d, 2d, x, x};\n-        data2 = new double[] {x, x, 3d, x, 4d, x};\n         /*\n          * Make sure that x, y, z are three different values. Also, x is the\n          * preferred value (e.g. the value which is not stored in sparse\n          * implementations).\n          */\n+        final double x = getPreferredEntryValue();\n         final double y = x + 1d;\n         final double z = y + 1d;\n \n \n     @Test\n     public void testGetDimension() {\n+        final double x = getPreferredEntryValue();\n+        final double[] data1 = {x, x, x, x};\n         Assert.assertEquals(data1.length, create(data1).getDimension());\n+        final double y = x + 1;\n+        final double[] data2 = {y, y, y, y};\n+        Assert.assertEquals(data2.length, create(data2).getDimension());\n     }\n \n     @Test\n     public void testGetEntry() {\n-        final RealVector v = create(data1);\n-        for (int i = 0; i < data1.length; i++) {\n-            Assert.assertEquals(\"entry \" + i, data1[i], v.getEntry(i), 0d);\n+        final double x = getPreferredEntryValue();\n+        final double[] data = {x, 1d, 2d, x, x};\n+        final RealVector v = create(data);\n+        for (int i = 0; i < data.length; i++) {\n+            Assert.assertEquals(\"entry \" + i, data[i], v.getEntry(i), 0d);\n         }\n     }\n \n     @Test(expected=OutOfRangeException.class)\n     public void testGetEntryInvalidIndex1() {\n-        create(data1).getEntry(-1);\n+        create(new double[4]).getEntry(-1);\n     }\n \n     @Test(expected=OutOfRangeException.class)\n     public void testGetEntryInvalidIndex2() {\n-        create(data1).getEntry(data1.length);\n+        create(new double[4]).getEntry(4);\n     }\n \n     @Test\n     public void testSetEntry() {\n-        final double[] expected = MathArrays.copyOf(data1);\n-        final RealVector actual = create(data1);\n+        final double x = getPreferredEntryValue();\n+        final double[] data = {x, 1d, 2d, x, x};\n+        final double[] expected = MathArrays.copyOf(data);\n+        final RealVector actual = create(data);\n \n         /*\n          * Try setting to any value.\n          */\n-        for (int i = 0; i < data1.length; i++) {\n-            final double oldValue = data1[i];\n+        for (int i = 0; i < data.length; i++) {\n+            final double oldValue = data[i];\n             final double newValue = oldValue + 1d;\n             expected[i] = newValue;\n             actual.setEntry(i, newValue);\n         /*\n          * Try setting to the preferred value.\n          */\n-        final double x = getPreferredEntryValue();\n-        for (int i = 0; i < data1.length; i++) {\n-            final double oldValue = data1[i];\n+        for (int i = 0; i < data.length; i++) {\n+            final double oldValue = data[i];\n             final double newValue = x;\n             expected[i] = newValue;\n             actual.setEntry(i, newValue);\n \n     @Test(expected=OutOfRangeException.class)\n     public void testSetEntryInvalidIndex1() {\n-        create(data1).setEntry(-1, getPreferredEntryValue());\n+        create(new double[4]).setEntry(-1, getPreferredEntryValue());\n     }\n \n     @Test(expected=OutOfRangeException.class)\n     public void testSetEntryInvalidIndex2() {\n-        create(data1).setEntry(data1.length, getPreferredEntryValue());\n+        create(new double[4]).setEntry(4, getPreferredEntryValue());\n     }\n \n     @Test\n     public void testAddToEntry() {\n+        final double x = getPreferredEntryValue();\n+        final double[] data1 = {x, 1d, 2d, x, x};\n+        final double[] data2 = {x, x, 3d, x, 4d, x};\n+\n         final double[] expected = MathArrays.copyOf(data1);\n         final RealVector actual = create(data1);\n \n         /*\n          * Try incrementing so that result is equal to preferred value.\n          */\n-        final double x = getPreferredEntryValue();\n         for (int i = 0; i < data1.length; i++) {\n             final double oldValue = data1[i];\n             increment = x - oldValue;\n \n     @Test(expected=OutOfRangeException.class)\n     public void testAddToEntryInvalidIndex1() {\n-        create(data1).addToEntry(-1, getPreferredEntryValue());\n+        create(new double[3]).addToEntry(-1, getPreferredEntryValue());\n     }\n \n     @Test(expected=OutOfRangeException.class)\n     public void testAddToEntryInvalidIndex2() {\n-        create(data1).addToEntry(data1.length, getPreferredEntryValue());\n+        create(new double[3]).addToEntry(4, getPreferredEntryValue());\n     }\n \n     private void doTestAppendVector(final String message, final RealVector v1,\n \n     @Test\n     public void testAppendVector() {\n+        final double x = getPreferredEntryValue();\n+        final double[] data1 =  {x, 1d, 2d, x, x};\n+        final double[] data2 =  {x, x, 3d, x, 4d, x};\n+\n         doTestAppendVector(\"same type\", create(data1), create(data2), 0d);\n         doTestAppendVector(\"mixed types\", create(data1), createAlien(data2), 0d);\n     }\n \n     @Test\n     public void testAppendScalar() {\n-\n-        doTestAppendScalar(\"\", create(data1), 1d, 0d);\n-        doTestAppendScalar(\"\", create(data1), getPreferredEntryValue(), 0d);\n+        final double x = getPreferredEntryValue();\n+        final double[] data = new double[] {x, 1d, 2d, x, x};\n+\n+        doTestAppendScalar(\"\", create(data), 1d, 0d);\n+        doTestAppendScalar(\"\", create(data), x, 0d);\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java\n \n     @Test\n     public void testConstructors() {\n+        final double[] vec1 = {1d, 2d, 3d};\n+        final Double[] dvec1 = {1d, 2d, 3d, 4d, 5d, 6d, 7d, 8d, 9d};\n \n         OpenMapRealVector v0 = new OpenMapRealVector();\n         Assert.assertEquals(\"testData len\", 0, v0.getDimension());", "timestamp": 1341555783, "metainfo": ""}