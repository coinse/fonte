{"sha": "bc84c00b75adae089cba788aaec9bbbd8d9efcdb", "log": "added missing javadoc  ", "commit": "\n--- a/src/java/org/apache/commons/math/ArgumentOutsideDomainException.java\n+++ b/src/java/org/apache/commons/math/ArgumentOutsideDomainException.java\n \n package org.apache.commons.math;\n \n+/**\n+ * Error thrown when a method is called with an out of bounds argument.\n+ *\n+ * @version $Revision$ $Date$\n+ */\n public class ArgumentOutsideDomainException extends FunctionEvaluationException {\n \n     /** Serializable version identifier. */\n--- a/src/java/org/apache/commons/math/MathException.java\n+++ b/src/java/org/apache/commons/math/MathException.java\n         JDK_SUPPORTS_NESTED = flag;\n     }\n \n+    /** Cache for resources bundle. */\n     private static ResourceBundle cachedResources = null;\n  \n     /**\n--- a/src/java/org/apache/commons/math/MaxIterationsExceededException.java\n+++ b/src/java/org/apache/commons/math/MaxIterationsExceededException.java\n \n import org.apache.commons.math.ConvergenceException;\n \n+/**\n+ * Error thrown when a numerical computation exceeds its allowed\n+ * number of iterations.\n+ *\n+ * @version $Revision$ $Date$\n+ */\n public class MaxIterationsExceededException extends ConvergenceException {\n \n     /** Serializable version identifier. */\n--- a/src/java/org/apache/commons/math/MessagesResources_fr.java\n+++ b/src/java/org/apache/commons/math/MessagesResources_fr.java\n   public MessagesResources_fr() {\n   }\n \n+  /** Get the non-translated/translated messages arrays from this resource bundle.\n+   * @return non-translated/translated messages arrays\n+   */\n   public Object[][] getContents() {\n     return (Object[][]) contents.clone();\n   }\n \n+  /** Non-translated/translated messages arrays. */\n   static final Object[][] contents = {\n \n     // org.apache.commons.math.FunctionEvaluationException\n--- a/src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\n \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -3349935121172596109L;\n-    \n+\n+    /** Distribution used to compute normal approximation. */\n     private NormalDistribution normal;\n     \n     /**\n--- a/src/java/org/apache/commons/math/estimation/AbstractEstimator.java\n+++ b/src/java/org/apache/commons/math/estimation/AbstractEstimator.java\n import org.apache.commons.math.linear.InvalidMatrixException;\n import org.apache.commons.math.linear.RealMatrixImpl;\n \n+/**\n+ * Base class for implementing estimators.\n+ * <p>This base class handles the boilerplates methods associated to thresholds\n+ * settings, jacobian and error estimation.</p>\n+ * @version $Revision$ $Date$\n+ *\n+ */\n public abstract class AbstractEstimator implements Estimator {\n \n     /**\n \n     }\n \n+    /** \n+     * Solve an estimation problem.\n+     *\n+     * <p>The method should set the parameters of the problem to several\n+     * trial values until it reaches convergence. If this method returns\n+     * normally (i.e. without throwing an exception), then the best\n+     * estimate of the parameters can be retrieved from the problem\n+     * itself, through the {@link EstimationProblem#getAllParameters\n+     * EstimationProblem.getAllParameters} method.</p>\n+     *\n+     * @param problem estimation problem to solve\n+     * @exception EstimationException if the problem cannot be solved\n+     *\n+     */\n     public abstract void estimate(EstimationProblem problem)\n     throws EstimationException;\n \n--- a/src/java/org/apache/commons/math/estimation/EstimatedParameter.java\n+++ b/src/java/org/apache/commons/math/estimation/EstimatedParameter.java\n    */\n   private   boolean bound;\n \n+  /** Serializable version identifier */\n   private static final long serialVersionUID = -555440800213416949L;\n \n }\n--- a/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java\n+++ b/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java\n \n     }\n \n+    /** Threshold for cost steady state detection. */\n     private double steadyStateThreshold;\n+\n+    /** Threshold for cost convergence. */\n     private double convergence;\n \n-    private static final long serialVersionUID = 5485001826076289109L;\n+    /** Serializable version identifier */\n+     private static final long serialVersionUID = 5485001826076289109L;\n \n }\n--- a/src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java\n+++ b/src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java\n    * and the columns of the jacobian. */\n   private double orthoTolerance;\n \n+  /** Serializable version identifier */\n   private static final long serialVersionUID = -5705952631533171019L;\n \n }\n--- a/src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java\n+++ b/src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java\n         measurements = new ArrayList();\n     }\n \n+    /** \n+     * Get all the parameters of the problem.\n+     * @return parameters\n+     */\n     public EstimatedParameter[] getAllParameters() {\n         return (EstimatedParameter[]) parameters.toArray(new EstimatedParameter[parameters.size()]);\n     }\n \n+    /** \n+     * Get the unbound parameters of the problem.\n+     * @return unbound parameters\n+     */\n     public EstimatedParameter[] getUnboundParameters() {\n \n         // filter the unbound parameters\n         \n     }\n \n+    /** \n+     * Get the measurements of an estimation problem.\n+     * @return measurements\n+     */\n     public WeightedMeasurement[] getMeasurements() {\n         return (WeightedMeasurement[]) measurements.toArray(new WeightedMeasurement[measurements.size()]);\n     }\n \n+    /** Add a parameter to the problem.\n+     * @param p parameter to add\n+     */\n     protected void addParameter(EstimatedParameter p) {\n         parameters.add(p);\n     }\n--- a/src/java/org/apache/commons/math/estimation/WeightedMeasurement.java\n+++ b/src/java/org/apache/commons/math/estimation/WeightedMeasurement.java\n     return ignored;\n   }\n \n+  /** Measurement weight. */\n   private final double  weight;\n+\n+  /** Value of the measurements. */\n   private final double  measuredValue;\n+\n+  /** Ignore measurement indicator. */\n   private       boolean ignored;\n \n }\n--- a/src/java/org/apache/commons/math/fraction/FractionConversionException.java\n+++ b/src/java/org/apache/commons/math/fraction/FractionConversionException.java\n \n import org.apache.commons.math.MaxIterationsExceededException;\n \n+/**\n+ * Error thrown when a double value cannot be converted to a fraction\n+ * in the allowed number of iterations.\n+ *\n+ * @version $Revision$ $Date$\n+ */\n public class FractionConversionException extends MaxIterationsExceededException {\n \n     /** Serializable version identifier. */\n--- a/src/java/org/apache/commons/math/geometry/CardanEulerSingularityException.java\n+++ b/src/java/org/apache/commons/math/geometry/CardanEulerSingularityException.java\n  * @version $Revision$ $Date$\n \n  */\n-\n public class CardanEulerSingularityException\n   extends MathException {\n \n     super(isCardan ? \"Cardan angles singularity\" : \"Euler angles singularity\", new Object[0]);\n   }\n \n+  /** Serializable version identifier */\n   private static final long serialVersionUID = -1360952845582206770L;\n \n }\n--- a/src/java/org/apache/commons/math/geometry/NotARotationMatrixException.java\n+++ b/src/java/org/apache/commons/math/geometry/NotARotationMatrixException.java\n     super(specifier, parts);\n   }\n \n+  /** Serializable version identifier */\n   private static final long serialVersionUID = 5647178478658937642L;\n \n }\n--- a/src/java/org/apache/commons/math/geometry/Rotation.java\n+++ b/src/java/org/apache/commons/math/geometry/Rotation.java\n   /** Third coordinate of the vectorial part of the quaternion. */\n   private final double q3;\n \n+  /** Serializable version identifier */\n   private static final long serialVersionUID = 5127795878493115119L;\n \n }\n--- a/src/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/java/org/apache/commons/math/geometry/Vector3D.java\n   /** Height. */\n   private final double z;\n \n+  /** Serializable version identifier */\n   private static final long serialVersionUID = 7318440192750283659L;\n \n }\n--- a/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n     }\n     \n     /**\n-     * \n-     * @see Object#toString()\n+     * Get a string representation for this matrix.\n+     * @return a string representation for this matrix\n      */\n     public String toString() {\n         StringBuffer res = new StringBuffer();\n--- a/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n     }\n \n     /**\n-     *\n-     * @see java.lang.Object#toString()\n+     * Get a string representation for this matrix.\n+     * @return a string representation for this matrix\n      */\n     public String toString() {\n         StringBuffer res = new StringBuffer();\n--- a/src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java\n     throws DerivativeException {\n   }\n \n+  /** Write the instance to an output channel.\n+   * @param out output channel\n+   * @exception IOException if the instance cannot be written\n+   */\n   public abstract void writeExternal(ObjectOutput out)\n     throws IOException;\n \n+  /** Read the instance from an input channel.\n+   * @param in input channel\n+   * @exception IOException if the instance cannot be read\n+   */\n   public abstract void readExternal(ObjectInput in)\n     throws IOException;\n \n--- a/src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java\n \n   }\n \n+  /** Integrate the differential equations up to the given time.\n+   * <p>This method solves an Initial Value Problem (IVP).</p>\n+   * <p>Since this method stores some internal state variables made\n+   * available in its public interface during integration ({@link\n+   * #getCurrentSignedStepsize()}), it is <em>not</em> thread-safe.</p>\n+   * @param equations differential equations to integrate\n+   * @param t0 initial time\n+   * @param y0 initial value of the state vector at t0\n+   * @param t target time for the integration\n+   * (can be set to a value smaller than <code>t0</code> for backward integration)\n+   * @param y placeholder where to put the state vector at each successful\n+   *  step (and hence at the end of integration), can be the same object as y0\n+   * @throws IntegratorException if the integrator cannot perform integration\n+   * @throws DerivativeException this exception is propagated to the caller if\n+   * the underlying user function triggers one\n+   */\n   public abstract void integrate (FirstOrderDifferentialEquations equations,\n                                   double t0, double[] y0,\n                                   double t, double[] y)\n     throws DerivativeException, IntegratorException;\n \n+  /** Get the current value of the step start time t<sub>i</sub>.\n+   * <p>This method can be called during integration (typically by\n+   * the object implementing the {@link FirstOrderDifferentialEquations\n+   * differential equations} problem) if the value of the current step that\n+   * is attempted is needed.</p>\n+   * <p>The result is undefined if the method is called outside of\n+   * calls to {@link #integrate}</p>\n+   * @return current value of the step start time t<sub>i</sub>\n+   */\n   public double getCurrentStepStart() {\n     return stepStart;\n   }\n \n+  /** Get the current signed value of the integration stepsize.\n+   * <p>This method can be called during integration (typically by\n+   * the object implementing the {@link FirstOrderDifferentialEquations\n+   * differential equations} problem) if the signed value of the current stepsize\n+   * that is tried is needed.</p>\n+   * <p>The result is undefined if the method is called outside of\n+   * calls to {@link #integrate}</p>\n+   * @return current signed value of the stepsize\n+   */\n   public double getCurrentSignedStepsize() {\n     return stepSize;\n   }\n--- a/src/java/org/apache/commons/math/ode/ClassicalRungeKuttaIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/ClassicalRungeKuttaIntegrator.java\n public class ClassicalRungeKuttaIntegrator\n   extends RungeKuttaIntegrator {\n \n+  /** Integrator method name. */\n   private static final String methodName = \"classical Runge-Kutta\";\n \n+  /** Time steps Butcher array. */\n   private static final double[] c = {\n     1.0 / 2.0, 1.0 / 2.0, 1.0\n   };\n \n+  /** Internal weights Butcher array. */\n   private static final double[][] a = {\n     { 1.0 / 2.0 },\n     { 0.0, 1.0 / 2.0 },\n     { 0.0, 0.0, 1.0 }\n   };\n \n+  /** Propagation weights Butcher array. */\n   private static final double[] b = {\n     1.0 / 6.0, 1.0 / 3.0, 1.0 / 3.0, 1.0 / 6.0\n   };\n--- a/src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java\n \n   }\n \n+  /** Serializable version identifier */\n   private static final long serialVersionUID = -6576285612589783992L;\n \n }\n--- a/src/java/org/apache/commons/math/ode/ContinuousOutputModel.java\n+++ b/src/java/org/apache/commons/math/ode/ContinuousOutputModel.java\n   /** Steps table. */\n   private ArrayList steps;\n \n+  /** Serializable version identifier */\n   private static final long serialVersionUID = 2259286184268533249L;\n \n }\n--- a/src/java/org/apache/commons/math/ode/DerivativeException.java\n+++ b/src/java/org/apache/commons/math/ode/DerivativeException.java\n     super(cause);\n   }\n \n+  /** Serializable version identifier */\n   private static final long serialVersionUID = -4100440615830558122L;\n \n }\n--- a/src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java\n+++ b/src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java\n public class DormandPrince54Integrator\n   extends EmbeddedRungeKuttaIntegrator {\n \n+  /** Integrator method name. */\n   private static final String methodName = \"Dormand-Prince 5(4)\";\n \n+  /** Time steps Butcher array. */\n   private static final double[] staticC = {\n     1.0/5.0, 3.0/10.0, 4.0/5.0, 8.0/9.0, 1.0, 1.0\n   };\n \n+  /** Internal weights Butcher array. */\n   private static final double[][] staticA = {\n     {1.0/5.0},\n     {3.0/40.0, 9.0/40.0},\n     {35.0/384.0, 0.0, 500.0/1113.0, 125.0/192.0, -2187.0/6784.0, 11.0/84.0}\n   };\n \n+  /** Propagation weights Butcher array. */\n   private static final double[] staticB = {\n     35.0/384.0, 0.0, 500.0/1113.0, 125.0/192.0, -2187.0/6784.0, 11.0/84.0, 0.0\n   };\n \n+  /** Error array, element 1. */\n   private static final double e1 =     71.0 / 57600.0;\n+\n+  // element 2 is zero, so it is neither stored nor used\n+\n+  /** Error array, element 3. */\n   private static final double e3 =    -71.0 / 16695.0;\n+\n+  /** Error array, element 4. */\n   private static final double e4 =     71.0 / 1920.0;\n+\n+  /** Error array, element 5. */\n   private static final double e5 = -17253.0 / 339200.0;\n+\n+  /** Error array, element 6. */\n   private static final double e6 =     22.0 / 525.0;\n+\n+  /** Error array, element 7. */\n   private static final double e7 =     -1.0 / 40.0;\n \n   /** Simple constructor.\n--- a/src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java\n   /** Initialization indicator for the interpolation vectors. */\n   private boolean vectorsInitialized;\n \n-  // last row of the Butcher-array internal weights, note that a71 is null\n+  /** Last row of the Butcher-array internal weights, element 0. */\n   private static final double a70 =    35.0 /  384.0;\n+\n+  // element 1 is zero, so it is neither stored nor used\n+\n+  /** Last row of the Butcher-array internal weights, element 2. */\n   private static final double a72 =   500.0 / 1113.0;\n+\n+  /** Last row of the Butcher-array internal weights, element 3. */\n   private static final double a73 =   125.0 /  192.0;\n+\n+  /** Last row of the Butcher-array internal weights, element 4. */\n   private static final double a74 = -2187.0 / 6784.0;\n+\n+  /** Last row of the Butcher-array internal weights, element 5. */\n   private static final double a75 =    11.0 /   84.0;\n \n-  // dense output of Shampine (1986), note that d1 is null\n+  /** Shampine (1986) Dense output, element 0. */\n   private static final double d0 =  -12715105075.0 /  11282082432.0;\n+\n+  // element 1 is zero, so it is neither stored nor used\n+\n+  /** Shampine (1986) Dense output, element 2. */\n   private static final double d2 =   87487479700.0 /  32700410799.0;\n+\n+  /** Shampine (1986) Dense output, element 3. */\n   private static final double d3 =  -10690763975.0 /   1880347072.0;\n+\n+  /** Shampine (1986) Dense output, element 4. */\n   private static final double d4 =  701980252875.0 / 199316789632.0;\n+\n+  /** Shampine (1986) Dense output, element 5. */\n   private static final double d5 =   -1453857185.0 /    822651844.0;\n+\n+  /** Shampine (1986) Dense output, element 6. */\n   private static final double d6 =      69997945.0 /     29380423.0;\n \n+  /** Serializable version identifier */\n   private static final long serialVersionUID = 4104157279605906956L;\n+\n }\n--- a/src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java\n+++ b/src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java\n public class DormandPrince853Integrator\n   extends EmbeddedRungeKuttaIntegrator {\n \n+  /** Integrator method name. */\n   private static final String methodName = \"Dormand-Prince 8 (5, 3)\";\n \n-  private static final double sqrt6 = Math.sqrt(6.0);\n-\n+  /** Time steps Butcher array. */\n   private static final double[] staticC = {\n-    (12.0 - 2.0 * sqrt6) / 135.0, (6.0 - sqrt6) / 45.0, (6.0 - sqrt6) / 30.0,\n-    (6.0 + sqrt6) / 30.0, 1.0/3.0, 1.0/4.0, 4.0/13.0, 127.0/195.0, 3.0/5.0,\n+    (12.0 - 2.0 * Math.sqrt(6.0)) / 135.0, (6.0 - Math.sqrt(6.0)) / 45.0, (6.0 - Math.sqrt(6.0)) / 30.0,\n+    (6.0 + Math.sqrt(6.0)) / 30.0, 1.0/3.0, 1.0/4.0, 4.0/13.0, 127.0/195.0, 3.0/5.0,\n     6.0/7.0, 1.0, 1.0\n   };\n \n+  /** Internal weights Butcher array. */\n   private static final double[][] staticA = {\n \n     // k2\n-    {(12.0 - 2.0 * sqrt6) / 135.0},\n+    {(12.0 - 2.0 * Math.sqrt(6.0)) / 135.0},\n \n     // k3\n-    {(6.0 - sqrt6) / 180.0, (6.0 - sqrt6) / 60.0},\n+    {(6.0 - Math.sqrt(6.0)) / 180.0, (6.0 - Math.sqrt(6.0)) / 60.0},\n \n     // k4\n-    {(6.0 - sqrt6) / 120.0, 0.0, (6.0 - sqrt6) / 40.0},\n+    {(6.0 - Math.sqrt(6.0)) / 120.0, 0.0, (6.0 - Math.sqrt(6.0)) / 40.0},\n \n     // k5\n-    {(462.0 + 107.0 * sqrt6) / 3000.0, 0.0,\n-     (-402.0 - 197.0 * sqrt6) / 1000.0, (168.0 + 73.0 * sqrt6) / 375.0},\n+    {(462.0 + 107.0 * Math.sqrt(6.0)) / 3000.0, 0.0,\n+     (-402.0 - 197.0 * Math.sqrt(6.0)) / 1000.0, (168.0 + 73.0 * Math.sqrt(6.0)) / 375.0},\n \n     // k6\n-    {1.0 / 27.0, 0.0, 0.0, (16.0 + sqrt6) / 108.0, (16.0 - sqrt6) / 108.0},\n+    {1.0 / 27.0, 0.0, 0.0, (16.0 + Math.sqrt(6.0)) / 108.0, (16.0 - Math.sqrt(6.0)) / 108.0},\n \n     // k7\n-    {19.0 / 512.0, 0.0, 0.0, (118.0 + 23.0 * sqrt6) / 1024.0,\n-     (118.0 - 23.0 * sqrt6) / 1024.0, -9.0 / 512.0},\n+    {19.0 / 512.0, 0.0, 0.0, (118.0 + 23.0 * Math.sqrt(6.0)) / 1024.0,\n+     (118.0 - 23.0 * Math.sqrt(6.0)) / 1024.0, -9.0 / 512.0},\n \n     // k8\n-    {13772.0 / 371293.0, 0.0, 0.0, (51544.0 + 4784.0 * sqrt6) / 371293.0,\n-     (51544.0 - 4784.0 * sqrt6) / 371293.0, -5688.0 / 371293.0, 3072.0 / 371293.0},\n+    {13772.0 / 371293.0, 0.0, 0.0, (51544.0 + 4784.0 * Math.sqrt(6.0)) / 371293.0,\n+     (51544.0 - 4784.0 * Math.sqrt(6.0)) / 371293.0, -5688.0 / 371293.0, 3072.0 / 371293.0},\n \n     // k9\n     {58656157643.0 / 93983540625.0, 0.0, 0.0,\n-     (-1324889724104.0 - 318801444819.0 * sqrt6) / 626556937500.0,\n-     (-1324889724104.0 + 318801444819.0 * sqrt6) / 626556937500.0,\n+     (-1324889724104.0 - 318801444819.0 * Math.sqrt(6.0)) / 626556937500.0,\n+     (-1324889724104.0 + 318801444819.0 * Math.sqrt(6.0)) / 626556937500.0,\n      96044563816.0 / 3480871875.0, 5682451879168.0 / 281950621875.0,\n      -165125654.0 / 3796875.0},\n \n     // k10\n     {8909899.0 / 18653125.0, 0.0, 0.0,\n-     (-4521408.0 - 1137963.0 * sqrt6) / 2937500.0,\n-     (-4521408.0 + 1137963.0 * sqrt6) / 2937500.0,\n+     (-4521408.0 - 1137963.0 * Math.sqrt(6.0)) / 2937500.0,\n+     (-4521408.0 + 1137963.0 * Math.sqrt(6.0)) / 2937500.0,\n      96663078.0 / 4553125.0, 2107245056.0 / 137915625.0,\n      -4913652016.0 / 147609375.0, -78894270.0 / 3880452869.0},\n \n     // k11\n     {-20401265806.0 / 21769653311.0, 0.0, 0.0,\n-     (354216.0 + 94326.0 * sqrt6) / 112847.0,\n-     (354216.0 - 94326.0 * sqrt6) / 112847.0,\n+     (354216.0 + 94326.0 * Math.sqrt(6.0)) / 112847.0,\n+     (354216.0 - 94326.0 * Math.sqrt(6.0)) / 112847.0,\n      -43306765128.0 / 5313852383.0, -20866708358144.0 / 1126708119789.0,\n      14886003438020.0 / 654632330667.0, 35290686222309375.0 / 14152473387134411.0,\n      -1477884375.0 / 485066827.0},\n \n     // k12\n     {39815761.0 / 17514443.0, 0.0, 0.0,\n-     (-3457480.0 - 960905.0 * sqrt6) / 551636.0,\n-     (-3457480.0 + 960905.0 * sqrt6) / 551636.0,\n+     (-3457480.0 - 960905.0 * Math.sqrt(6.0)) / 551636.0,\n+     (-3457480.0 + 960905.0 * Math.sqrt(6.0)) / 551636.0,\n      -844554132.0 / 47026969.0, 8444996352.0 / 302158619.0,\n      -2509602342.0 / 877790785.0, -28388795297996250.0 / 3199510091356783.0,\n      226716250.0 / 18341897.0, 1371316744.0 / 2131383595.0},\n \n   };\n \n+  /** Propagation weights Butcher array. */\n   private static final double[] staticB = {\n       104257.0/1920240.0,\n       0.0,\n       0.0\n   };\n \n+  /** First error weights array, element 1. */\n   private static final double e1_01 =         116092271.0 / 8848465920.0;\n+\n+  // elements 2 to 5 are zero, so they are neither stored nor used\n+\n+  /** First error weights array, element 6. */\n   private static final double e1_06 =          -1871647.0 / 1527680.0;\n+\n+  /** First error weights array, element 7. */\n   private static final double e1_07 =         -69799717.0 / 140793660.0;\n+\n+  /** First error weights array, element 8. */\n   private static final double e1_08 =     1230164450203.0 / 739113984000.0;\n+\n+  /** First error weights array, element 9. */\n   private static final double e1_09 = -1980813971228885.0 / 5654156025964544.0;\n+\n+  /** First error weights array, element 10. */\n   private static final double e1_10 =         464500805.0 / 1389975552.0;\n+\n+  /** First error weights array, element 11. */\n   private static final double e1_11 =     1606764981773.0 / 19613062656000.0;\n+\n+  /** First error weights array, element 12. */\n   private static final double e1_12 =           -137909.0 / 6168960.0;\n \n+\n+  /** Second error weights array, element 1. */\n   private static final double e2_01 =           -364463.0 / 1920240.0;\n+\n+  // elements 2 to 5 are zero, so they are neither stored nor used\n+\n+  /** Second error weights array, element 6. */\n   private static final double e2_06 =           3399327.0 / 763840.0;\n+\n+  /** Second error weights array, element 7. */\n   private static final double e2_07 =          66578432.0 / 35198415.0;\n+\n+  /** Second error weights array, element 8. */\n   private static final double e2_08 =       -1674902723.0 / 288716400.0;\n+\n+  /** Second error weights array, element 9. */\n   private static final double e2_09 =   -74684743568175.0 / 176692375811392.0;\n+\n+  /** Second error weights array, element 10. */\n   private static final double e2_10 =           -734375.0 / 4826304.0;\n+\n+  /** Second error weights array, element 11. */\n   private static final double e2_11 =         171414593.0 / 851261400.0;\n+\n+  /** Second error weights array, element 12. */\n   private static final double e2_12 =             69869.0 / 3084480.0;\n \n   /** Simple constructor.\n--- a/src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java\n   /** Initialization indicator for the interpolation vectors. */\n   private boolean vectorsInitialized;\n \n-  // external weights of the integrator,\n-  // note that b_02 through b_05 are null\n-  private static double b_01 =         104257.0 / 1920240.0;\n-  private static double b_06 =        3399327.0 / 763840.0;\n-  private static double b_07 =       66578432.0 / 35198415.0;\n-  private static double b_08 =    -1674902723.0 / 288716400.0;\n-  private static double b_09 = 54980371265625.0 / 176692375811392.0;\n-  private static double b_10 =        -734375.0 / 4826304.0;\n-  private static double b_11 =      171414593.0 / 851261400.0;\n-  private static double b_12 =         137909.0 / 3084480.0;\n-\n-  // k14 for interpolation only\n-  private static double c14    = 1.0 / 10.0;\n-\n-  private static double k14_01 =       13481885573.0 / 240030000000.0      - b_01;\n-  private static double k14_06 =                 0.0                       - b_06;\n-  private static double k14_07 =      139418837528.0 / 549975234375.0      - b_07;\n-  private static double k14_08 =   -11108320068443.0 / 45111937500000.0    - b_08;\n-  private static double k14_09 = -1769651421925959.0 / 14249385146080000.0 - b_09;\n-  private static double k14_10 =          57799439.0 / 377055000.0         - b_10;\n-  private static double k14_11 =      793322643029.0 / 96734250000000.0    - b_11;\n-  private static double k14_12 =        1458939311.0 / 192780000000.0      - b_12;\n-  private static double k14_13 =             -4149.0 / 500000.0;\n-\n-  // k15 for interpolation only\n-  private static double c15    = 1.0 / 5.0;\n-\n-  private static double k15_01 =     1595561272731.0 / 50120273500000.0    - b_01;\n-  private static double k15_06 =      975183916491.0 / 34457688031250.0    - b_06;\n-  private static double k15_07 =    38492013932672.0 / 718912673015625.0   - b_07;\n-  private static double k15_08 = -1114881286517557.0 / 20298710767500000.0 - b_08;\n-  private static double k15_09 =                 0.0                       - b_09;\n-  private static double k15_10 =                 0.0                       - b_10;\n-  private static double k15_11 =    -2538710946863.0 / 23431227861250000.0 - b_11;\n-  private static double k15_12 =        8824659001.0 / 23066716781250.0    - b_12;\n-  private static double k15_13 =      -11518334563.0 / 33831184612500.0;\n-  private static double k15_14 =        1912306948.0 / 13532473845.0;\n-\n-  // k16 for interpolation only\n-  private static double c16    = 7.0 / 9.0;\n-\n-  private static double k16_01 =      -13613986967.0 / 31741908048.0       - b_01;\n-  private static double k16_06 =       -4755612631.0 / 1012344804.0        - b_06;\n-  private static double k16_07 =    42939257944576.0 / 5588559685701.0     - b_07;\n-  private static double k16_08 =    77881972900277.0 / 19140370552944.0    - b_08;\n-  private static double k16_09 =    22719829234375.0 / 63689648654052.0    - b_09;\n-  private static double k16_10 =                 0.0                       - b_10;\n-  private static double k16_11 =                 0.0                       - b_11;\n-  private static double k16_12 =                 0.0                       - b_12;\n-  private static double k16_13 =       -1199007803.0 / 857031517296.0;\n-  private static double k16_14 =      157882067000.0 / 53564469831.0;\n-  private static double k16_15 =     -290468882375.0 / 31741908048.0;\n-\n-  // interpolation weights\n-  // (beware that only the non-null values are in the table)\n-  private static double[][] d = {\n+  /** Propagation weights, element 1. */\n+  private static final double b_01 =         104257.0 / 1920240.0;\n+\n+  // elements 2 to 5 are zero, so they are neither stored nor used\n+\n+  /** Propagation weights, element 6. */\n+  private static final double b_06 =        3399327.0 / 763840.0;\n+\n+  /** Propagation weights, element 7. */\n+  private static final double b_07 =       66578432.0 / 35198415.0;\n+\n+  /** Propagation weights, element 8. */\n+  private static final double b_08 =    -1674902723.0 / 288716400.0;\n+\n+  /** Propagation weights, element 9. */\n+  private static final double b_09 = 54980371265625.0 / 176692375811392.0;\n+\n+  /** Propagation weights, element 10. */\n+  private static final double b_10 =        -734375.0 / 4826304.0;\n+\n+  /** Propagation weights, element 11. */\n+  private static final double b_11 =      171414593.0 / 851261400.0;\n+\n+  /** Propagation weights, element 12. */\n+  private static final double b_12 =         137909.0 / 3084480.0;\n+\n+  /** Time step for stage 14 (interpolation only). */\n+  private static final double c14    = 1.0 / 10.0;\n+\n+  /** Internal weights for stage 14, element 1. */\n+  private static final double k14_01 =       13481885573.0 / 240030000000.0      - b_01;\n+\n+  // elements 2 to 5 are zero, so they are neither stored nor used\n+\n+  /** Internal weights for stage 14, element 6. */\n+  private static final double k14_06 =                 0.0                       - b_06;\n+\n+  /** Internal weights for stage 14, element 7. */\n+  private static final double k14_07 =      139418837528.0 / 549975234375.0      - b_07;\n+\n+  /** Internal weights for stage 14, element 8. */\n+  private static final double k14_08 =   -11108320068443.0 / 45111937500000.0    - b_08;\n+\n+  /** Internal weights for stage 14, element 9. */\n+  private static final double k14_09 = -1769651421925959.0 / 14249385146080000.0 - b_09;\n+\n+  /** Internal weights for stage 14, element 10. */\n+  private static final double k14_10 =          57799439.0 / 377055000.0         - b_10;\n+\n+  /** Internal weights for stage 14, element 11. */\n+  private static final double k14_11 =      793322643029.0 / 96734250000000.0    - b_11;\n+\n+  /** Internal weights for stage 14, element 12. */\n+  private static final double k14_12 =        1458939311.0 / 192780000000.0      - b_12;\n+\n+  /** Internal weights for stage 14, element 13. */\n+  private static final double k14_13 =             -4149.0 / 500000.0;\n+\n+  /** Time step for stage 15 (interpolation only). */\n+  private static final double c15    = 1.0 / 5.0;\n+\n+\n+  /** Internal weights for stage 15, element 1. */\n+  private static final double k15_01 =     1595561272731.0 / 50120273500000.0    - b_01;\n+\n+  // elements 2 to 5 are zero, so they are neither stored nor used\n+\n+  /** Internal weights for stage 15, element 6. */\n+  private static final double k15_06 =      975183916491.0 / 34457688031250.0    - b_06;\n+\n+  /** Internal weights for stage 15, element 7. */\n+  private static final double k15_07 =    38492013932672.0 / 718912673015625.0   - b_07;\n+\n+  /** Internal weights for stage 15, element 8. */\n+  private static final double k15_08 = -1114881286517557.0 / 20298710767500000.0 - b_08;\n+\n+  /** Internal weights for stage 15, element 9. */\n+  private static final double k15_09 =                 0.0                       - b_09;\n+\n+  /** Internal weights for stage 15, element 10. */\n+  private static final double k15_10 =                 0.0                       - b_10;\n+\n+  /** Internal weights for stage 15, element 11. */\n+  private static final double k15_11 =    -2538710946863.0 / 23431227861250000.0 - b_11;\n+\n+  /** Internal weights for stage 15, element 12. */\n+  private static final double k15_12 =        8824659001.0 / 23066716781250.0    - b_12;\n+\n+  /** Internal weights for stage 15, element 13. */\n+  private static final double k15_13 =      -11518334563.0 / 33831184612500.0;\n+\n+  /** Internal weights for stage 15, element 14. */\n+  private static final double k15_14 =        1912306948.0 / 13532473845.0;\n+\n+  /** Time step for stage 16 (interpolation only). */\n+  private static final double c16    = 7.0 / 9.0;\n+\n+\n+  /** Internal weights for stage 16, element 1. */\n+  private static final double k16_01 =      -13613986967.0 / 31741908048.0       - b_01;\n+\n+  // elements 2 to 5 are zero, so they are neither stored nor used\n+\n+  /** Internal weights for stage 16, element 6. */\n+  private static final double k16_06 =       -4755612631.0 / 1012344804.0        - b_06;\n+\n+  /** Internal weights for stage 16, element 7. */\n+  private static final double k16_07 =    42939257944576.0 / 5588559685701.0     - b_07;\n+\n+  /** Internal weights for stage 16, element 8. */\n+  private static final double k16_08 =    77881972900277.0 / 19140370552944.0    - b_08;\n+\n+  /** Internal weights for stage 16, element 9. */\n+  private static final double k16_09 =    22719829234375.0 / 63689648654052.0    - b_09;\n+\n+  /** Internal weights for stage 16, element 10. */\n+  private static final double k16_10 =                 0.0                       - b_10;\n+\n+  /** Internal weights for stage 16, element 11. */\n+  private static final double k16_11 =                 0.0                       - b_11;\n+\n+  /** Internal weights for stage 16, element 12. */\n+  private static final double k16_12 =                 0.0                       - b_12;\n+\n+  /** Internal weights for stage 16, element 13. */\n+  private static final double k16_13 =       -1199007803.0 / 857031517296.0;\n+\n+  /** Internal weights for stage 16, element 14. */\n+  private static final double k16_14 =      157882067000.0 / 53564469831.0;\n+\n+  /** Internal weights for stage 16, element 15. */\n+  private static final double k16_15 =     -290468882375.0 / 31741908048.0;\n+\n+  /** Interpolation weights.\n+   * (beware that only the non-null values are in the table)\n+   */\n+  private static final double[][] d = {\n \n     {        -17751989329.0 / 2106076560.0,               4272954039.0 / 7539864640.0,\n             -118476319744.0 / 38604839385.0,            755123450731.0 / 316657731600.0,\n \n   };\n \n+  /** Serializable version identifier */\n   private static final long serialVersionUID = 7152276390558450974L;\n \n }\n--- a/src/java/org/apache/commons/math/ode/DummyStepHandler.java\n+++ b/src/java/org/apache/commons/math/ode/DummyStepHandler.java\n   /** The only instance. */\n   private static DummyStepHandler instance = new DummyStepHandler();\n \n+  /** Serializable version identifier */\n   private static final long serialVersionUID = 2731635121223090252L;\n \n }\n--- a/src/java/org/apache/commons/math/ode/DummyStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/DummyStepInterpolator.java\n       System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);\n   }\n     \n+  /** Write the instance to an output channel.\n+   * @param out output channel\n+   * @exception IOException if the instance cannot be written\n+   */\n   public void writeExternal(ObjectOutput out)\n     throws IOException {\n     // save the state of the base class\n     writeBaseExternal(out);\n   }\n \n+  /** Read the instance from an input channel.\n+   * @param in input channel\n+   * @exception IOException if the instance cannot be read\n+   */\n   public void readExternal(ObjectInput in)\n     throws IOException {\n \n \n   }\n \n+  /** Serializable version identifier */\n   private static final long serialVersionUID = 1708010296707839488L;\n \n }\n--- a/src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java\n    * @param fsal indicate that the method is an <i>fsal</i>\n    * @param c time steps from Butcher array (without the first zero)\n    * @param a internal weights from Butcher array (without the first empty row)\n-   * @param b external weights for the high order method from Butcher array\n+   * @param b propagation weights for the high order method from Butcher array\n    * @param prototype prototype of the step interpolator to use\n    * @param minStep minimal step (must be positive even for backward\n    * integration), the last step can be smaller than this\n    * @param fsal indicate that the method is an <i>fsal</i>\n    * @param c time steps from Butcher array (without the first zero)\n    * @param a internal weights from Butcher array (without the first empty row)\n-   * @param b external weights for the high order method from Butcher array\n+   * @param b propagation weights for the high order method from Butcher array\n    * @param prototype prototype of the step interpolator to use\n    * @param minStep minimal step (must be positive even for backward\n    * integration), the last step can be smaller than this\n     this.safety = safety;\n   }\n \n+  /** Integrate the differential equations up to the given time.\n+   * <p>This method solves an Initial Value Problem (IVP).</p>\n+   * <p>Since this method stores some internal state variables made\n+   * available in its public interface during integration ({@link\n+   * #getCurrentSignedStepsize()}), it is <em>not</em> thread-safe.</p>\n+   * @param equations differential equations to integrate\n+   * @param t0 initial time\n+   * @param y0 initial value of the state vector at t0\n+   * @param t target time for the integration\n+   * (can be set to a value smaller than <code>t0</code> for backward integration)\n+   * @param y placeholder where to put the state vector at each successful\n+   *  step (and hence at the end of integration), can be the same object as y0\n+   * @throws IntegratorException if the integrator cannot perform integration\n+   * @throws DerivativeException this exception is propagated to the caller if\n+   * the underlying user function triggers one\n+   */\n   public void integrate(FirstOrderDifferentialEquations equations,\n                         double t0, double[] y0,\n                         double t, double[] y)\n--- a/src/java/org/apache/commons/math/ode/EulerIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/EulerIntegrator.java\n public class EulerIntegrator\n   extends RungeKuttaIntegrator {\n \n+  /** Integrator method name. */\n   private static final String methodName = \"Euler\";\n \n+  /** Time steps Butcher array. */\n   private static final double[] c = {\n   };\n \n+  /** Internal weights Butcher array. */\n   private static final double[][] a = {\n   };\n \n+  /** Propagation weights Butcher array. */\n   private static final double[] b = {\n     1.0\n   };\n--- a/src/java/org/apache/commons/math/ode/EulerStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/EulerStepInterpolator.java\n \n   }\n \n+  /** Serializable version identifier */\n   private static final long serialVersionUID = -7179861704951334960L;\n \n }\n--- a/src/java/org/apache/commons/math/ode/FirstOrderConverter.java\n+++ b/src/java/org/apache/commons/math/ode/FirstOrderConverter.java\n       zDDot          = new double[dimension];\n   }\n \n+  /** Get the dimension of the problem.\n+   * <p>The dimension of the first order problem is twice the\n+   * dimension of the underlying second order problem.</p>\n+   * @return dimension of the problem\n+   */\n   public int getDimension() {\n     return 2 * dimension;\n   }\n \n+  /** Get the current time derivative of the state vector.\n+   * @param t current value of the independent <I>time</I> variable\n+   * @param y array containing the current value of the state vector\n+   * @param yDot placeholder array where to put the time derivative of the state vector\n+   * @throws DerivativeException this exception is propagated to the caller if the\n+   * underlying user function triggers one\n+   */\n   public void computeDerivatives(double t, double[] y, double[] yDot)\n   throws DerivativeException {\n \n--- a/src/java/org/apache/commons/math/ode/GillIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/GillIntegrator.java\n public class GillIntegrator\n   extends RungeKuttaIntegrator {\n \n+  /** Integrator method name. */\n   private static final String methodName = \"Gill\";\n \n-  private static final double sqrt2 = Math.sqrt(2.0);\n-\n+  /** Time steps Butcher array. */\n   private static final double[] c = {\n     1.0 / 2.0, 1.0 / 2.0, 1.0\n   };\n \n+  /** Internal weights Butcher array. */\n   private static final double[][] a = {\n     { 1.0 / 2.0 },\n-    { (sqrt2 - 1.0) / 2.0, (2.0 - sqrt2) / 2.0 },\n-    { 0.0, -sqrt2 / 2.0, (2.0 + sqrt2) / 2.0 }\n+    { (Math.sqrt(2.0) - 1.0) / 2.0, (2.0 - Math.sqrt(2.0)) / 2.0 },\n+    { 0.0, -Math.sqrt(2.0) / 2.0, (2.0 + Math.sqrt(2.0)) / 2.0 }\n   };\n \n+  /** Propagation weights Butcher array. */\n   private static final double[] b = {\n-    1.0 / 6.0, (2.0 - sqrt2) / 6.0, (2.0 + sqrt2) / 6.0, 1.0 / 6.0\n+    1.0 / 6.0, (2.0 - Math.sqrt(2.0)) / 6.0, (2.0 + Math.sqrt(2.0)) / 6.0, 1.0 / 6.0\n   };\n \n   /** Simple constructor.\n--- a/src/java/org/apache/commons/math/ode/GillStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/GillStepInterpolator.java\n   /** Second Gill coefficient. */\n   private static final double tPq = 2 + Math.sqrt(2.0);\n \n+  /** Serializable version identifier */\n   private static final long serialVersionUID = -107804074496313322L;\n \n }\n--- a/src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java\n public class GraggBulirschStoerIntegrator\n   extends AdaptiveStepsizeIntegrator {\n \n+  /** Integrator method name. */\n   private static final String methodName = \"Gragg-Bulirsch-Stoer\";\n \n   /** Simple constructor.\n     }\n   }\n \n+  /** Integrate the differential equations up to the given time.\n+   * <p>This method solves an Initial Value Problem (IVP).</p>\n+   * <p>Since this method stores some internal state variables made\n+   * available in its public interface during integration ({@link\n+   * #getCurrentSignedStepsize()}), it is <em>not</em> thread-safe.</p>\n+   * @param equations differential equations to integrate\n+   * @param t0 initial time\n+   * @param y0 initial value of the state vector at t0\n+   * @param t target time for the integration\n+   * (can be set to a value smaller than <code>t0</code> for backward integration)\n+   * @param y placeholder where to put the state vector at each successful\n+   *  step (and hence at the end of integration), can be the same object as y0\n+   * @throws IntegratorException if the integrator cannot perform integration\n+   * @throws DerivativeException this exception is propagated to the caller if\n+   * the underlying user function triggers one\n+   */\n   public void integrate(FirstOrderDifferentialEquations equations,\n                         double t0, double[] y0, double t, double[] y)\n   throws DerivativeException, IntegratorException {\n--- a/src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java\n \n   }\n \n+  /** Serializable version identifier */\n   private static final long serialVersionUID = 7320613236731409847L;\n \n }\n--- a/src/java/org/apache/commons/math/ode/HighamHall54Integrator.java\n+++ b/src/java/org/apache/commons/math/ode/HighamHall54Integrator.java\n public class HighamHall54Integrator\n   extends EmbeddedRungeKuttaIntegrator {\n \n+  /** Integrator method name. */\n   private static final String methodName = \"Higham-Hall 5(4)\";\n \n+  /** Time steps Butcher array. */\n   private static final double[] staticC = {\n     2.0/9.0, 1.0/3.0, 1.0/2.0, 3.0/5.0, 1.0, 1.0\n   };\n \n+  /** Internal weights Butcher array. */\n   private static final double[][] staticA = {\n     {2.0/9.0},\n     {1.0/12.0, 1.0/4.0},\n     {1.0/12.0, 0.0, 27.0/32.0, -4.0/3.0, 125.0/96.0, 5.0/48.0}\n   };\n \n+  /** Propagation weights Butcher array. */\n   private static final double[] staticB = {\n     1.0/12.0, 0.0, 27.0/32.0, -4.0/3.0, 125.0/96.0, 5.0/48.0, 0.0\n   };\n \n+  /** Error weights Butcher array. */\n   private static final double[] staticE = {\n     -1.0/20.0, 0.0, 81.0/160.0, -6.0/5.0, 25.0/32.0, 1.0/16.0, -1.0/10.0\n   };\n--- a/src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java\n \n   }\n \n+  /** Serializable version identifier */\n   private static final long serialVersionUID = -3583240427587318654L;\n \n }\n--- a/src/java/org/apache/commons/math/ode/IntegratorException.java\n+++ b/src/java/org/apache/commons/math/ode/IntegratorException.java\n     super(cause);\n   }\n \n+  /** Serializable version identifier */\n   private static final long serialVersionUID = -1215318282266670558L;\n \n }\n--- a/src/java/org/apache/commons/math/ode/MidpointIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/MidpointIntegrator.java\n public class MidpointIntegrator\n   extends RungeKuttaIntegrator {\n \n+  /** Integrator method name. */\n   private static final String methodName = \"midpoint\";\n \n+  /** Time steps Butcher array. */\n   private static final double[] c = {\n     1.0 / 2.0\n   };\n \n+  /** Internal weights Butcher array. */\n   private static final double[][] a = {\n     { 1.0 / 2.0 }\n   };\n \n+  /** Propagation weights Butcher array. */\n   private static final double[] b = {\n     0.0, 1.0\n   };\n--- a/src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java\n \n   }\n \n+  /** Serializable version identifier */\n   private static final long serialVersionUID = -865524111506042509L;\n \n }\n--- a/src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java\n    * step. The default step handler does nothing.\n    * @param c time steps from Butcher array (without the first zero)\n    * @param a internal weights from Butcher array (without the first empty row)\n-   * @param b external weights for the high order method from Butcher array\n+   * @param b propagation weights for the high order method from Butcher array\n    * @param prototype prototype of the step interpolator to use\n    * @param step integration step\n    */\n     }      \n   }\n \n+  /** Integrate the differential equations up to the given time.\n+   * <p>This method solves an Initial Value Problem (IVP).</p>\n+   * <p>Since this method stores some internal state variables made\n+   * available in its public interface during integration ({@link\n+   * #getCurrentSignedStepsize()}), it is <em>not</em> thread-safe.</p>\n+   * @param equations differential equations to integrate\n+   * @param t0 initial time\n+   * @param y0 initial value of the state vector at t0\n+   * @param t target time for the integration\n+   * (can be set to a value smaller than <code>t0</code> for backward integration)\n+   * @param y placeholder where to put the state vector at each successful\n+   *  step (and hence at the end of integration), can be the same object as y0\n+   * @throws IntegratorException if the integrator cannot perform integration\n+   * @throws DerivativeException this exception is propagated to the caller if\n+   * the underlying user function triggers one\n+   */\n   public void integrate(FirstOrderDifferentialEquations equations,\n                         double t0, double[] y0,\n                         double t, double[] y)\n \n   }\n \n+  /** Get the current value of the step start time t<sub>i</sub>.\n+   * <p>This method can be called during integration (typically by\n+   * the object implementing the {@link FirstOrderDifferentialEquations\n+   * differential equations} problem) if the value of the current step that\n+   * is attempted is needed.</p>\n+   * <p>The result is undefined if the method is called outside of\n+   * calls to {@link #integrate}</p>\n+   * @return current value of the step start time t<sub>i</sub>\n+   */\n   public double getCurrentStepStart() {\n     return stepStart;\n   }\n \n+  /** Get the current signed value of the integration stepsize.\n+   * <p>This method can be called during integration (typically by\n+   * the object implementing the {@link FirstOrderDifferentialEquations\n+   * differential equations} problem) if the signed value of the current stepsize\n+   * that is tried is needed.</p>\n+   * <p>The result is undefined if the method is called outside of\n+   * calls to {@link #integrate}</p>\n+   * @return current signed value of the stepsize\n+   */\n   public double getCurrentSignedStepsize() {\n     return stepSize;\n   }\n--- a/src/java/org/apache/commons/math/ode/ThreeEighthesIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/ThreeEighthesIntegrator.java\n public class ThreeEighthesIntegrator\n   extends RungeKuttaIntegrator {\n \n+  /** Integrator method name. */\n   private static final String methodName = \"3/8\";\n \n+  /** Time steps Butcher array. */\n   private static final double[] c = {\n     1.0 / 3.0, 2.0 / 3.0, 1.0\n   };\n \n+  /** Internal weights Butcher array. */\n   private static final double[][] a = {\n     {  1.0 / 3.0 },\n     { -1.0 / 3.0, 1.0 },\n     {  1.0, -1.0, 1.0 }\n   };\n \n+  /** Propagation weights Butcher array. */\n   private static final double[] b = {\n     1.0 / 8.0, 3.0 / 8.0, 3.0 / 8.0, 1.0 / 8.0\n   };\n--- a/src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java\n \n   }\n \n+  /** Serializable version identifier */\n   private static final long serialVersionUID = -3345024435978721931L;\n \n }\n--- a/src/java/org/apache/commons/math/random/UniformRandomGenerator.java\n+++ b/src/java/org/apache/commons/math/random/UniformRandomGenerator.java\n  * deviation equal to 1. Generated values fall in the range\n  * [-&#x0221A;3, +&#x0221A;3].</p>\n  * \n- * @version $Revision:$ $Date$\n+ * @version $Revision$ $Date$\n  */\n \n public class UniformRandomGenerator implements NormalizedRandomGenerator {\n     /** Underlying generator. */\n     private RandomGenerator generator;\n \n+    /** Square root of three. */\n     private static final double SQRT3 = Math.sqrt(3.0);\n \n }\n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n      * natural order.  Copied from Commons Collections ComparableComparator.\n      */\n     private class NaturalComparator implements Comparator, Serializable {\n+\n+        /** Serializable version identifier */\n         private static final long serialVersionUID = -3852193713161395148L;\n \n         /**\n--- a/src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n      */\n     protected ResizableDoubleArray eDA = new ResizableDoubleArray();\n   \n-    // UnivariateStatistic stats implementations - can be reset by setters\n+    /** Mean statistic implementation - can be reset by setter. */\n     private UnivariateStatistic meanImpl = new Mean();\n+    \n+    /** Geometric mean statistic implementation - can be reset by setter. */\n     private UnivariateStatistic geometricMeanImpl = new GeometricMean();\n+    \n+    /** Kurtosis statistic implementation - can be reset by setter. */\n     private UnivariateStatistic kurtosisImpl = new Kurtosis();\n+    \n+    /** Maximum statistic implementation - can be reset by setter. */\n     private UnivariateStatistic maxImpl = new Max();\n+    \n+    /** Minimum statistic implementation - can be reset by setter. */\n     private UnivariateStatistic minImpl = new Min();\n+    \n+    /** Percentile statistic implementation - can be reset by setter. */\n     private UnivariateStatistic percentileImpl = new Percentile();\n+    \n+    /** Skewness statistic implementation - can be reset by setter. */\n     private UnivariateStatistic skewnessImpl = new Skewness();\n+    \n+    /** Variance statistic implementation - can be reset by setter. */\n     private UnivariateStatistic varianceImpl = new Variance();\n+    \n+    /** Sum of squares statistic implementation - can be reset by setter. */\n     private UnivariateStatistic sumsqImpl = new SumOfSquares();\n+    \n+    /** Sum statistic implementation - can be reset by setter. */\n     private UnivariateStatistic sumImpl = new Sum();\n     \n     /**\n--- a/src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n     /** variance of values that have been added */\n     protected Variance variance = new Variance();\n     \n-    //  Statistics implementations - can be reset by setters \n+    /** Sum statistic implementation - can be reset by setter. */\n     private StorelessUnivariateStatistic sumImpl = sum;\n+    \n+    /** Sum of squares statistic implementation - can be reset by setter. */\n     private StorelessUnivariateStatistic sumsqImpl = sumsq;\n+    \n+    /** Minimum statistic implementation - can be reset by setter. */\n     private StorelessUnivariateStatistic minImpl = min;\n+    \n+    /** Maximum statistic implementation - can be reset by setter. */\n     private StorelessUnivariateStatistic maxImpl = max;\n+    \n+    /** Sum of log statistic implementation - can be reset by setter. */\n     private StorelessUnivariateStatistic sumLogImpl = sumLog;\n+    \n+    /** Geometric mean statistic implementation - can be reset by setter. */\n     private StorelessUnivariateStatistic geoMeanImpl = geoMean;\n+    \n+    /** Mean statistic implementation - can be reset by setter. */\n     private StorelessUnivariateStatistic meanImpl = mean;\n+    \n+    /** Variance statistic implementation - can be reset by setter. */\n     private StorelessUnivariateStatistic varianceImpl = variance;\n \n     /**\n--- a/src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java\n     public SummaryStatisticsImpl() {\n         super();\n     }\n-    \n+\n+    /** Resets all statistics and storage. */\n     public void clear() {\n         super.clear();\n     }\n--- a/src/java/org/apache/commons/math/util/TransformerMap.java\n+++ b/src/java/org/apache/commons/math/util/TransformerMap.java\n      * Attempts to transform the Object against the map of\n      * NumberTransformers. Otherwise it returns Double.NaN.\n      * \n+     * @param o the Object to be transformed.\n+     * @return the double value of the Object.\n+     * @throws MathException if the Object can not be transformed into a Double. \n      * @see org.apache.commons.math.util.NumberTransformer#transform(java.lang.Object)\n      */\n     public double transform(Object o) throws MathException {", "timestamp": 1200863315, "metainfo": ""}