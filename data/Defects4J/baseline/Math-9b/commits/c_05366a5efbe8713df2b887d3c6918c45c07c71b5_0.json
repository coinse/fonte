{"sha": "05366a5efbe8713df2b887d3c6918c45c07c71b5", "log": "MATH-815 Added method that was missing in the original commit: \"getDimensions()\", renamed to \"getDimension()\".   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java\n     /** RNG instance used to generate samples from the distribution. */\n     protected final RandomGenerator random;\n     /** The number of dimensions or columns in the multivariate distribution. */\n-    private final int numDimensions;\n+    private final int dimension;\n \n     /**\n      * @param rng Random number generator.\n     protected AbstractMultivariateRealDistribution(RandomGenerator rng,\n                                                    int n) {\n         random = rng;\n-        numDimensions = n;\n+        dimension = n;\n     }\n \n     /** {@inheritDoc} */\n         random.setSeed(seed);\n     }\n \n-    /**\n-     * Gets the number of dimensions (i.e. the number of random variables) of\n-     * the distribution.\n-     *\n-     * @return the number of dimensions.\n-     */\n-    public int getDimensions() {\n-        return numDimensions;\n+    /** {@inheritDoc} */\n+    public int getDimension() {\n+        return dimension;\n     }\n \n     /** {@inheritDoc} */\n             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                                                    sampleSize);\n         }\n-        final double[][] out = new double[sampleSize][numDimensions];\n+        final double[][] out = new double[sampleSize][dimension];\n         for (int i = 0; i < sampleSize; i++) {\n             out[i] = sample();\n         }\n--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n \n     /** {@inheritDoc} */\n     public double density(final double[] vals) throws DimensionMismatchException {\n-        final int dim = getDimensions();\n+        final int dim = getDimension();\n         if (vals.length != dim) {\n             throw new DimensionMismatchException(vals.length, dim);\n         }\n      * @return the standard deviations.\n      */\n     public double[] getStandardDeviations() {\n-        final int dim = getDimensions();\n+        final int dim = getDimension();\n         final double[] std = new double[dim];\n         final double[][] s = covarianceMatrix.getData();\n         for (int i = 0; i < dim; i++) {\n \n     /** {@inheritDoc} */\n     public double[] sample() {\n-        final int dim = getDimensions();\n+        final int dim = getDimension();\n         final double[] normalVals = new double[dim];\n \n         for (int i = 0; i < dim; i++) {\n--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java\n     void reseedRandomGenerator(long seed);\n \n     /**\n+     * Gets the number of random variables of the distribution.\n+     * It is the size of the array returned by the {@link #sample() sample}\n+     * method.\n+     *\n+     * @return the number of variables.\n+     */\n+    int getDimension();\n+\n+    /**\n      * Generates a random value vector sampled from this distribution.\n      *\n      * @return a random value vector.\n      * @return an array representing the random samples.\n      * @throws org.apache.commons.math3.exception.NotStrictlyPositiveException\n      * if {@code sampleSize} is not positive.\n+     *\n+     * @see #sample()\n      */\n     double[][] sample(int sampleSize) throws NotStrictlyPositiveException;\n }\n--- a/src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java\n         final MultivariateNormalDistribution d = new MultivariateNormalDistribution(mu, sigma);\n \n         final RealMatrix s = d.getCovariances();\n-        final int dim = d.getDimensions();\n+        final int dim = d.getDimension();\n         for (int i = 0; i < dim; i++) {\n             for (int j = 0; j < dim; j++) {\n                 Assert.assertEquals(sigma[i][j], s.getEntry(i, j), 0);\n         final int n = 500000;\n \n         final double[][] samples = d.sample(n);\n-        final int dim = d.getDimensions();\n+        final int dim = d.getDimension();\n         final double[] sampleMeans = new double[dim];\n \n         for (int i = 0; i < samples.length; i++) {", "timestamp": 1350640501, "metainfo": ""}