{"sha": "25df981ebe5d14c9db922996ef8c3c31e14e0511", "log": "Cleaned up some errors / omissions from r598133 * Regenerated serialization version IDs * Eliminated unecessary import * Eliminated lazy initialization * Changed getPercentile() to use configured implementation * Added tests for percentile impl injection    ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n public class DescriptiveStatistics implements StatisticalSummary, Serializable {\n     \n     /** Serialization UID */\n-    private static final long serialVersionUID = 5188298269533339922L;\n+    private static final long serialVersionUID = -2734185686570407433L;\n     \n     /** hold the window size **/\n     protected int windowSize = INFINITE_WINDOW;\n      *  Stored data values\n      */\n     protected ResizableDoubleArray eDA = new ResizableDoubleArray();\n-    \n-    // Cached implementation instances \n-    // Can be reset by setters\n-    private UnivariateStatistic meanImpl = null;\n-    private UnivariateStatistic geometricMeanImpl = null;\n-    private UnivariateStatistic kurtosisImpl = null;\n-    private UnivariateStatistic maxImpl = null;\n-    private UnivariateStatistic minImpl = null;\n-    private UnivariateStatistic percentileImpl = null;\n-    private UnivariateStatistic skewnessImpl = null;\n-    private UnivariateStatistic varianceImpl = null;\n-    private UnivariateStatistic sumsqImpl = null;\n-    private UnivariateStatistic sumImpl = null;\n+  \n+    // UnivariateStatistic stats implementations - can be reset by setters\n+    private UnivariateStatistic meanImpl = new Mean();\n+    private UnivariateStatistic geometricMeanImpl = new GeometricMean();\n+    private UnivariateStatistic kurtosisImpl = new Kurtosis();\n+    private UnivariateStatistic maxImpl = new Max();\n+    private UnivariateStatistic minImpl = new Min();\n+    private UnivariateStatistic percentileImpl = new Percentile();\n+    private UnivariateStatistic skewnessImpl = new Skewness();\n+    private UnivariateStatistic varianceImpl = new Variance();\n+    private UnivariateStatistic sumsqImpl = new SumOfSquares();\n+    private UnivariateStatistic sumImpl = new Sum();\n     \n     /**\n      * Construct a DescriptiveStatistics instance with an infinite window\n     }\n     \n     /**\n-     * This constant signals that a Univariate implementation\n-     * takes into account the contributions of an infinite number of\n-     * elements.  In other words, if getWindow returns this\n-     * constant, there is, in effect, no \"window\".\n+     * Represents an infinite window size.  When the {@link #getWindowSize()}\n+     * returns this value, there is no limit to the number of data values\n+     * that can be stored in the dataset.\n      */\n     public static final int INFINITE_WINDOW = -1;\n \n      * @return The mean or Double.NaN if no values have been added.\n      */\n     public double getMean() {\n-        return apply(getMeanImpl());\n+        return apply(meanImpl);\n     }\n \n     /** \n      * or if the productof the available values is less than or equal to 0.\n      */\n     public double getGeometricMean() {\n-        return apply(getGeometricMeanImpl());\n+        return apply(geometricMeanImpl);\n     }\n \n     /** \n      * or 0.0 for a single value set.  \n      */\n     public double getVariance() {\n-        return apply(getVarianceImpl());\n+        return apply(varianceImpl);\n     }\n \n     /** \n      * or 0.0 for a value set &lt;=2. \n      */\n     public double getSkewness() {\n-        return apply(getSkewnessImpl());\n+        return apply(skewnessImpl);\n     }\n \n     /**\n      * for a value set &lt;=3. \n      */\n     public double getKurtosis() {\n-        return apply(getKurtosisImpl());\n+        return apply(kurtosisImpl);\n     }\n \n     /** \n      * @return The max or Double.NaN if no values have been added.\n      */\n     public double getMax() {\n-        return apply(getMaxImpl());\n+        return apply(maxImpl);\n     }\n \n     /** \n     * @return The min or Double.NaN if no values have been added.\n     */\n     public double getMin() {\n-        return apply(getMinImpl());\n+        return apply(minImpl);\n     }\n \n     /** \n      * @return The sum or Double.NaN if no values have been added\n      */\n     public double getSum() {\n-        return apply(getSumImpl());\n+        return apply(sumImpl);\n     }\n \n     /**\n      * values have been added.\n      */\n     public double getSumsq() {\n-        return apply(getSumsqImpl());\n+        return apply(sumsqImpl);\n     }\n \n     /** \n      * \n      * @param p the requested percentile (scaled from 0 - 100)\n      * @return An estimate for the pth percentile of the stored data \n+     * @throws IllegalStateException if percentile implementation has been\n+     *  overridden and the supplied implementation does not support setQuantile\n      * values\n      */\n     public double getPercentile(double p) {\n-        return apply(new Percentile(p));\n+        if (percentileImpl instanceof Percentile) {\n+            ((Percentile) percentileImpl).setQuantile(p);\n+        } else {\n+            try {\n+                percentileImpl.getClass().getMethod(\"setQuantile\", \n+                        new Class[] {Double.TYPE}).invoke(percentileImpl,\n+                                new Object[] {new Double(p)});\n+            } catch (Exception ex) { // Should never happen, guarded by setter\n+                throw new IllegalStateException(\n+                \"Percentile implementation does not support setQuantile\");\n+            }\n+        }\n+        return apply(percentileImpl);\n     }\n     \n     /**\n     /**\n      * @return the meanImpl\n      */\n-    public UnivariateStatistic getMeanImpl() {\n-        if (meanImpl == null) {\n-            meanImpl = new Mean();\n-        }\n+    public synchronized UnivariateStatistic getMeanImpl() {\n         return meanImpl;\n     }\n \n     /**\n      * @param meanImpl the meanImpl to set\n      */\n-    public void setMeanImpl(UnivariateStatistic meanImpl) {\n+    public synchronized void setMeanImpl(UnivariateStatistic meanImpl) {\n         this.meanImpl = meanImpl;\n     }\n \n     /**\n      * @return the geometricMeanImpl\n      */\n-    public UnivariateStatistic getGeometricMeanImpl() {\n-        if (geometricMeanImpl == null) {\n-            geometricMeanImpl = new GeometricMean();\n-        }\n+    public synchronized UnivariateStatistic getGeometricMeanImpl() {\n         return geometricMeanImpl;\n     }\n \n     /**\n      * @param geometricMeanImpl the geometricMeanImpl to set\n      */\n-    public void setGeometricMeanImpl(UnivariateStatistic geometricMeanImpl) {\n+    public synchronized void setGeometricMeanImpl(\n+            UnivariateStatistic geometricMeanImpl) {\n         this.geometricMeanImpl = geometricMeanImpl;\n     }\n \n     /**\n      * @return the kurtosisImpl\n      */\n-    public UnivariateStatistic getKurtosisImpl() {\n-        if (kurtosisImpl == null) {\n-            kurtosisImpl = new Kurtosis();\n-        }\n+    public synchronized UnivariateStatistic getKurtosisImpl() {\n         return kurtosisImpl;\n     }\n \n     /**\n      * @param kurtosisImpl the kurtosisImpl to set\n      */\n-    public void setKurtosisImpl(UnivariateStatistic kurtosisImpl) {\n+    public synchronized void setKurtosisImpl(UnivariateStatistic kurtosisImpl) {\n         this.kurtosisImpl = kurtosisImpl;\n     }\n \n     /**\n      * @return the maxImpl\n      */\n-    public UnivariateStatistic getMaxImpl() {\n-        if (maxImpl == null) {\n-            maxImpl = new Max();\n-        }\n+    public synchronized UnivariateStatistic getMaxImpl() {\n         return maxImpl;\n     }\n \n     /**\n      * @param maxImpl the maxImpl to set\n      */\n-    public void setMaxImpl(UnivariateStatistic maxImpl) {\n+    public synchronized void setMaxImpl(UnivariateStatistic maxImpl) {\n         this.maxImpl = maxImpl;\n     }\n \n     /**\n      * @return the minImpl\n      */\n-    public UnivariateStatistic getMinImpl() {\n-        if (minImpl == null) {\n-            minImpl =  new Min();\n-        }\n+    public synchronized UnivariateStatistic getMinImpl() {\n         return minImpl;\n     }\n \n     /**\n      * @param minImpl the minImpl to set\n      */\n-    public void setMinImpl(UnivariateStatistic minImpl) {\n+    public synchronized void setMinImpl(UnivariateStatistic minImpl) {\n         this.minImpl = minImpl;\n     }\n \n     /**\n      * @return the percentileImpl\n      */\n-    public UnivariateStatistic getPercentileImpl() {\n-        if (percentileImpl == null) {\n-            percentileImpl = new Percentile();\n-        }\n+    public synchronized UnivariateStatistic getPercentileImpl() {\n         return percentileImpl;\n     }\n \n     /**\n+     * Sets the implementation to be used by {@link #getPercentile(double)}.\n+     * The supplied <code>UnivariateStatistic</code> must provide a\n+     * <code>setQuantile(double)</code> method; otherwise \n+     * <code>IllegalArgumentException</code> is thrown.\n+     * \n      * @param percentileImpl the percentileImpl to set\n-     */\n-    public void setPercentileImpl(UnivariateStatistic percentileImpl) {\n+     * @throws IllegalArgumentException if the supplied implementation does not\n+     *  provide a <code>setQuantile</code> method\n+     */\n+    public synchronized void setPercentileImpl(\n+            UnivariateStatistic percentileImpl) {\n+        try {\n+            percentileImpl.getClass().getMethod(\"setQuantile\", \n+                    new Class[] {Double.TYPE}).invoke(percentileImpl,\n+                            new Object[] {new Double(50.0d)});\n+        } catch (Exception ex) { \n+            throw new IllegalArgumentException(\n+                    \"Percentile implementation does not support setQuantile\");\n+        }\n         this.percentileImpl = percentileImpl;\n     }\n \n     /**\n      * @return the skewnessImpl\n      */\n-    public UnivariateStatistic getSkewnessImpl() {\n-        if (skewnessImpl == null) {\n-            skewnessImpl = new Skewness();\n-        }\n+    public synchronized UnivariateStatistic getSkewnessImpl() {\n         return skewnessImpl;\n     }\n \n     /**\n      * @param skewnessImpl the skewnessImpl to set\n      */\n-    public void setSkewnessImpl(UnivariateStatistic skewnessImpl) {\n+    public synchronized void setSkewnessImpl(\n+            UnivariateStatistic skewnessImpl) {\n         this.skewnessImpl = skewnessImpl;\n     }\n \n     /**\n      * @return the varianceImpl\n      */\n-    public UnivariateStatistic getVarianceImpl() {\n-        if (varianceImpl == null) {\n-            varianceImpl =  new Variance();\n-        }\n+    public synchronized UnivariateStatistic getVarianceImpl() {\n         return varianceImpl;\n     }\n \n     /**\n      * @param varianceImpl the varianceImpl to set\n      */\n-    public void setVarianceImpl(UnivariateStatistic varianceImpl) {\n+    public synchronized void setVarianceImpl(\n+            UnivariateStatistic varianceImpl) {\n         this.varianceImpl = varianceImpl;\n     }\n \n     /**\n      * @return the sumsqImpl\n      */\n-    public UnivariateStatistic getSumsqImpl() {\n-        if (sumsqImpl == null) {\n-            sumsqImpl = new SumOfSquares();\n-        }\n+    public synchronized UnivariateStatistic getSumsqImpl() {\n         return sumsqImpl;\n     }\n \n     /**\n      * @param sumsqImpl the sumsqImpl to set\n      */\n-    public void setSumsqImpl(UnivariateStatistic sumsqImpl) {\n+    public synchronized void setSumsqImpl(UnivariateStatistic sumsqImpl) {\n         this.sumsqImpl = sumsqImpl;\n     }\n \n     /**\n      * @return the sumImpl\n      */\n-    public UnivariateStatistic getSumImpl() {\n-        if (sumImpl == null) {\n-            sumImpl = new Sum();\n-        }\n+    public synchronized UnivariateStatistic getSumImpl() {\n         return sumImpl;\n     }\n \n     /**\n      * @param sumImpl the sumImpl to set\n      */\n-    public void setSumImpl(UnivariateStatistic sumImpl) {\n+    public synchronized void setSumImpl(UnivariateStatistic sumImpl) {\n         this.sumImpl = sumImpl;\n-    }\n-    \n+    }   \n }\n--- a/src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java\n \n import java.io.Serializable;\n \n-import org.apache.commons.math.util.ResizableDoubleArray;\n-\n /**\n  * Default implementation of\n  * {@link org.apache.commons.math.stat.descriptive.DescriptiveStatistics}.\n+ * \n+ * @deprectated to be removed in commons-math 2.0.  \n+ * Use {@link DescriptiveStatisitics}\n  *\n  * @version $Revision$ $Date$\n  */\n public class DescriptiveStatisticsImpl extends DescriptiveStatistics implements Serializable {\n \n     /** Serializable version identifier */\n-    private static final long serialVersionUID = -1868088725461221010L;\n+    private static final long serialVersionUID = -6467796944112488424L;\n \n     /**\n      * Construct a DescriptiveStatisticsImpl with infinite window\n--- a/src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n+\n+import org.apache.commons.math.stat.descriptive.rank.Percentile;\n \n /**\n  * Test cases for the DescriptiveStatistics class.\n         assertEquals(42, stats.getMean(), 1E-10);\n     }\n     \n+    public void testPercentileSetter() throws Exception {\n+        DescriptiveStatistics stats = new DescriptiveStatistics();\n+        stats.addValue(1);\n+        stats.addValue(2);\n+        stats.addValue(3);\n+        assertEquals(2, stats.getPercentile(50.0), 1E-10);\n+        \n+        // Inject wrapped Percentile impl\n+        stats.setPercentileImpl(new goodPercentile());\n+        assertEquals(2, stats.getPercentile(50.0), 1E-10);\n+        \n+        // Try \"new math\" impl\n+        stats.setPercentileImpl(new subPercentile());\n+        assertEquals(10.0, stats.getPercentile(10.0), 1E-10);\n+        \n+        // Try to set bad impl\n+        try {\n+            stats.setPercentileImpl(new badPercentile()); \n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+    \n+    // Test UnivariateStatistics impls for setter injection tests\n+    \n     /**\n      * A new way to compute the mean \n      */\n \n         public double evaluate(double[] values) {\n             return 42;\n+        }  \n+    }\n+    \n+    /**\n+     * Test percentile implementation - wraps a Percentile\n+     */\n+    class goodPercentile implements UnivariateStatistic {\n+        Percentile percentile = new Percentile();\n+        public void setQuantile(double quantile) {\n+            percentile.setQuantile(quantile);\n         }\n-        \n+        public double evaluate(double[] values, int begin, int length) {\n+            return percentile.evaluate(values, begin, length);\n+        }\n+        public double evaluate(double[] values) {\n+            return evaluate(values);\n+        }  \n+    }\n+    \n+    /**\n+     * Test percentile subclass - another \"new math\" impl\n+     * Always returns currently set quantile\n+     */\n+    class subPercentile extends Percentile {\n+        public double evaluate(double[] values, int begin, int length) {\n+            return getQuantile();\n+        }\n+        public double evaluate(double[] values) {\n+            return getQuantile();\n+        }  \n+    }\n+    \n+    /**\n+     * \"Bad\" test percentile implementation - no setQuantile\n+     */\n+    class badPercentile implements UnivariateStatistic {\n+        Percentile percentile = new Percentile();\n+        public double evaluate(double[] values, int begin, int length) {\n+            return percentile.evaluate(values, begin, length);\n+        }\n+        public double evaluate(double[] values) {\n+            return evaluate(values);\n+        }  \n     }\n }", "timestamp": 1196543953, "metainfo": ""}