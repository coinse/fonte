{"sha": "0ba6101319d95ebf6aa9d0651393c95d2bde2b29", "log": "Added log10 to DerivativeStructure and DSCompiler.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n \n     }\n \n-    /** Computes of a derivative structure.\n-     * @param operand array holding the operand\n-     * @param operandOffset offset of the operand in its array\n-     * @param result array where result must be stored (for\n-     * logarithm the result array <em>cannot</em> be the input\n+    /** Computes shifted logarithm of a derivative structure.\n+     * @param operand array holding the operand\n+     * @param operandOffset offset of the operand in its array\n+     * @param result array where result must be stored (for\n+     * shifted logarithm the result array <em>cannot</em> be the input\n      * array)\n      */\n     public void log1p(final double[] operand, final int operandOffset,\n         if (order > 0) {\n             double inv = 1.0 / (1.0 + operand[operandOffset]);\n             double xk  = inv;\n+            for (int i = 1; i <= order; ++i) {\n+                function[i] = xk;\n+                xk *= -i * inv;\n+            }\n+        }\n+\n+        // apply function composition\n+        compose(operand, operandOffset, function, result, resultOffset);\n+\n+    }\n+\n+    /** Computes base 10 logarithm of a derivative structure.\n+     * @param operand array holding the operand\n+     * @param operandOffset offset of the operand in its array\n+     * @param result array where result must be stored (for\n+     * base 10 logarithm the result array <em>cannot</em> be the input\n+     * array)\n+     */\n+    public void log10(final double[] operand, final int operandOffset,\n+                      final double[] result, final int resultOffset) {\n+        \n+\n+        // create the function value and derivatives\n+        double[] function = new double[1 + order];\n+        function[0] = FastMath.log10(operand[operandOffset]);\n+        if (order > 0) {\n+            double inv = 1.0 / operand[operandOffset];\n+            double xk  = inv / FastMath.log(10.0);\n             for (int i = 1; i <= order; ++i) {\n                 function[i] = xk;\n                 xk *= -i * inv;\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java\n         return result;\n     }\n \n+    /** Base 10 logarithm.\n+     * @return base 10 logarithm of the instance\n+     */\n+    public DerivativeStructure log10() {\n+        final DerivativeStructure result = new DerivativeStructure(compiler);\n+        compiler.log10(data, 0, result.data, 0);\n+        return result;\n+    }\n+\n     /** Cosine operation.\n      * @return cos(this)\n      */\n--- a/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java\n     }\n \n     @Test\n+    public void testLog10Definition() {\n+        double[] epsilon = new double[] { 3.0e-16, 3.0e-16, 8.0e-15, 3.0e-13, 8.0e-12 };\n+        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n+            for (double x = 0.1; x < 1.2; x += 0.001) {\n+                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n+                DerivativeStructure log101 = dsX.log10();\n+                DerivativeStructure log102 = dsX.log().divide(FastMath.log(10.0));\n+                DerivativeStructure zero = log101.subtract(log102);\n+                for (int n = 0; n <= maxOrder; ++n) {\n+                    Assert.assertEquals(0, zero.getPartialDerivative(n), epsilon[n]);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n     public void testLogExp() {\n         double[] epsilon = new double[] { 2.0e-16, 2.0e-16, 3.0e-16, 2.0e-15, 6.0e-15 };\n         for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n                 DerivativeStructure zero = rebuiltX.subtract(dsX);\n                 for (int n = 0; n <= maxOrder; ++n) {\n                     Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon[n]);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testLog10Power() {\n+        double[] epsilon = new double[] { 3.0e-16, 3.0e-16, 9.0e-16, 6.0e-15, 6.0e-14 };\n+        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n+            for (double x = 0.1; x < 1.2; x += 0.001) {\n+                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n+                DerivativeStructure rebuiltX = new DerivativeStructure(1, maxOrder, 10.0).pow(dsX).log10();\n+                DerivativeStructure zero = rebuiltX.subtract(dsX);\n+                for (int n = 0; n <= maxOrder; ++n) {\n+                    Assert.assertEquals(0, zero.getPartialDerivative(n), epsilon[n]);\n                 }\n             }\n         }", "timestamp": 1345187728, "metainfo": ""}