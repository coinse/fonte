{"sha": "0c6eb89e235611b296c5050a0fc098814b207cc7", "log": "MATH-849: unit tests for double Gamma.logGamma1p(double).   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/special/GammaTest.java\n+++ b/src/test/java/org/apache/commons/math3/special/GammaTest.java\n         Gamma.invGamma1pm1(1.51);\n     }\n \n+    private static final double[][] LOG_GAMMA1P_REF = {\n+        { - 0.5 , .5723649429247001 },\n+        { - 0.375 , .3608294954889402 },\n+        { - 0.25 , .2032809514312954 },\n+        { - 0.125 , .08585870722533433 },\n+        { 0.0 , 0.0 },\n+        { 0.125 , - .06002318412603958 },\n+        { 0.25 , - .09827183642181316 },\n+        { 0.375 , - .1177552707410788 },\n+        { 0.5 , - .1207822376352452 },\n+        { 0.625 , - .1091741337567954 },\n+        { 0.75 , - .08440112102048555 },\n+        { 0.875 , - 0.0476726853991883 },\n+        { 1.0 , 0.0 },\n+        { 1.125 , .05775985153034387 },\n+        { 1.25 , .1248717148923966 },\n+        { 1.375 , .2006984603774558 },\n+        { 1.5 , .2846828704729192 },\n+    };\n+\n+    @Test\n+    public void testLogGamma1p() {\n+\n+        final int ulps = 3;\n+        for (int i = 0; i < LOG_GAMMA1P_REF.length; i++) {\n+            final double[] ref = LOG_GAMMA1P_REF[i];\n+            final double x = ref[0];\n+            final double expected = ref[1];\n+            final double actual = Gamma.logGamma1p(x);\n+            final double tol = ulps * FastMath.ulp(expected);\n+            Assert.assertEquals(Double.toString(x), expected, actual, tol);\n+        }\n+    }\n+\n+    @Test(expected = NumberIsTooSmallException.class)\n+    public void testLogGamma1pPrecondition1() {\n+\n+        Gamma.logGamma1p(-0.51);\n+    }\n+\n+    @Test(expected = NumberIsTooLargeException.class)\n+    public void testLogGamma1pPrecondition2() {\n+\n+        Gamma.logGamma1p(1.51);\n+    }\n+\n     private void checkRelativeError(String msg, double expected, double actual, double tolerance) {\n         Assert.assertEquals(msg, expected, actual, FastMath.abs(tolerance * actual));\n     }", "timestamp": 1346378471, "metainfo": ""}