{"sha": "4877e676807b1c0920787c315e508a20823e56b3", "log": "Added the generic Field/FieldElement interfaces on top of existing Complex, Fraction and BigFraction Added a new BigReal class wrapping a BidDecimal and implementing FieldElement  ", "commit": "\n--- a/src/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/java/org/apache/commons/math/complex/Complex.java\n \n package org.apache.commons.math.complex;\n \n-import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.apache.commons.math.FieldElement;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.util.MathUtils;\n \n  *\n  * @version $Revision$ $Date$\n  */\n-public class Complex implements Serializable  {\n+public class Complex implements FieldElement<Complex>  {\n \n     /** Serializable version identifier */\n-    private static final long serialVersionUID = -6530173849413811929L;\n-    \n+    private static final long serialVersionUID = -6195664516687396620L;\n+\n     /** The square root of -1. A number representing \"0.0 + 1.0i\" */    \n     public static final Complex I = new Complex(0.0, 1.0);\n     \n     protected Complex createComplex(double real, double imaginary) {\n         return new Complex(real, imaginary);\n     }\n+\n+    /** {@inheritDoc} */\n+    public ComplexField getField() {\n+        return ComplexField.getInstance();\n+    }\n+\n }\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/complex/ComplexField.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.complex;\n+\n+import org.apache.commons.math.Field;\n+\n+/**\n+ * Representation of the complex numbers field.\n+ * <p>\n+ * This class is a singleton.\n+ * </p>\n+ * @see Complex\n+ * @version $Revision$ $Date$\n+ * @since 2.0\n+ */\n+public class ComplexField implements Field<Complex>  {\n+\n+    /** Serializable version identifier. */\n+    private static final long serialVersionUID = -6130362688700788798L;\n+\n+    /** Private constructor for the singleton.\n+     */\n+    private ComplexField() {\n+    }\n+\n+    /** Get the unique instance.\n+     * @return the unique instance\n+     */\n+    public static ComplexField getInstance() {\n+        return LazyHolder.INSTANCE;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public Complex getOne() {\n+        return Complex.ONE;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public Complex getZero() {\n+        return Complex.ZERO;\n+    }\n+\n+    /** Holder for the instance.\n+     * <p>We use here the Initialization On Demand Holder Idiom.</p>\n+     */\n+    private static class LazyHolder {\n+        /** Cached field instance. */\n+        private static final ComplexField INSTANCE = new ComplexField();\n+    }\n+\n+}\n--- a/src/java/org/apache/commons/math/fraction/BigFraction.java\n+++ b/src/java/org/apache/commons/math/fraction/BigFraction.java\n import java.math.BigDecimal;\n import java.math.BigInteger;\n \n+import org.apache.commons.math.FieldElement;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.util.MathUtils;\n \n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public class BigFraction extends Number implements Comparable<BigFraction> {\n+public class BigFraction extends Number implements FieldElement<BigFraction>, Comparable<BigFraction> {\n \n     /** A fraction representing \"2 / 1\". */\n     public static final BigFraction TWO = new BigFraction(2);\n     public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);\n \n     /** Serializable version identifier. */\n-    private static final long serialVersionUID = -130662482360701382L;\n+    private static final long serialVersionUID = -5630213147331578515L;\n \n     /** <code>BigInteger</code> representation of 100. */\n     private static final BigInteger ONE_HUNDRED_DOUBLE = BigInteger.valueOf(100);\n         }\n         return str;\n     }\n+\n+    /** {@inheritDoc} */\n+    public BigFractionField getField() {\n+        return BigFractionField.getInstance();\n+    }\n+\n }\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/fraction/BigFractionField.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.fraction;\n+\n+import org.apache.commons.math.Field;\n+\n+/**\n+ * Representation of the fractional numbers  without any overflow field.\n+ * <p>\n+ * This class is a singleton.\n+ * </p>\n+ * @see Fraction\n+ * @version $Revision$ $Date$\n+ * @since 2.0\n+ */\n+public class BigFractionField implements Field<BigFraction>  {\n+\n+    /** Serializable version identifier */\n+    private static final long serialVersionUID = -1699294557189741703L;\n+\n+    /** Private constructor for the singleton.\n+     */\n+    private BigFractionField() {\n+    }\n+\n+    /** Get the unique instance.\n+     * @return the unique instance\n+     */\n+    public static BigFractionField getInstance() {\n+        return LazyHolder.INSTANCE;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public BigFraction getOne() {\n+        return BigFraction.ONE;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public BigFraction getZero() {\n+        return BigFraction.ZERO;\n+    }\n+\n+    /** Holder for the instance.\n+     * <p>We use here the Initialization On Demand Holder Idiom.</p>\n+     */\n+    private static class LazyHolder {\n+        /** Cached field instance. */\n+        private static final BigFractionField INSTANCE = new BigFractionField();\n+    }\n+\n+}\n--- a/src/java/org/apache/commons/math/fraction/Fraction.java\n+++ b/src/java/org/apache/commons/math/fraction/Fraction.java\n \n import java.math.BigInteger;\n \n+import org.apache.commons.math.FieldElement;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.util.MathUtils;\n \n  * @since 1.1\n  * @version $Revision$ $Date$\n  */\n-public class Fraction extends Number implements Comparable<Fraction> {\n+public class Fraction extends Number implements FieldElement<Fraction>, Comparable<Fraction> {\n \n     /** A fraction representing \"2 / 1\". */\n     public static final Fraction TWO = new Fraction(2, 1);\n     public static final Fraction MINUS_ONE = new Fraction(-1, 1);\n \n     /** Serializable version identifier */\n-    private static final long serialVersionUID = 3071409609509774764L;\n+    private static final long serialVersionUID = 3698073679419233275L;\n \n     /** The denominator. */\n     private final int denominator;\n         return str;\n     }\n \n+    /** {@inheritDoc} */\n+    public FractionField getField() {\n+        return FractionField.getInstance();\n+    }\n+\n }\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/fraction/FractionField.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.fraction;\n+\n+import org.apache.commons.math.Field;\n+\n+/**\n+ * Representation of the fractional numbers field.\n+ * <p>\n+ * This class is a singleton.\n+ * </p>\n+ * @see Fraction\n+ * @version $Revision$ $Date$\n+ * @since 2.0\n+ */\n+public class FractionField implements Field<Fraction>  {\n+\n+    /** Serializable version identifier */\n+    private static final long serialVersionUID = -1257768487499119313L;\n+\n+    /** Private constructor for the singleton.\n+     */\n+    private FractionField() {\n+    }\n+\n+    /** Get the unique instance.\n+     * @return the unique instance\n+     */\n+    public static FractionField getInstance() {\n+        return LazyHolder.INSTANCE;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public Fraction getOne() {\n+        return Fraction.ONE;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public Fraction getZero() {\n+        return Fraction.ZERO;\n+    }\n+\n+    /** Holder for the instance.\n+     * <p>We use here the Initialization On Demand Holder Idiom.</p>\n+     */\n+    private static class LazyHolder {\n+        /** Cached field instance. */\n+        private static final FractionField INSTANCE = new FractionField();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/util/BigReal.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.util;\n+\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.math.MathContext;\n+\n+import org.apache.commons.math.Field;\n+import org.apache.commons.math.FieldElement;\n+\n+/**\n+ * Arbitrary precision decimal number.\n+ * <p>\n+ * This class is a simple wrapper around the standard <code>BigDecimal</code>\n+ * in order to implement the {@link FieldElement} interface.\n+ * </p>\n+ * @since 2.0\n+ * @version $Revision$ $Date$\n+ */\n+public class BigReal implements FieldElement<BigReal>, Comparable<BigReal> {\n+\n+    /** Serializable version identifier. */\n+    private static final long serialVersionUID = 7887631840434052850L;\n+\n+    /** A big real representing 0. */\n+    public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);\n+\n+    /** A big real representing 1. */\n+    public static final BigReal ONE = new BigReal(BigDecimal.ONE);\n+\n+    /** Underlying BigDecimal. */\n+    private final BigDecimal d;\n+\n+    /** Build an instance from a BigDecimal.\n+     * @param val value of the instance\n+     */\n+    public BigReal(BigDecimal val) {\n+        d =  val;\n+    }\n+\n+    /** Build an instance from a BigInteger.\n+     * @param val value of the instance\n+     */\n+    public BigReal(BigInteger val) {\n+        d = new BigDecimal(val);\n+    }\n+\n+    /** Build an instance from an unscaled BigInteger.\n+     * @param unscaledVal unscaled value\n+     * @param scale scale to use\n+     */\n+    public BigReal(BigInteger unscaledVal, int scale) {\n+        d = new BigDecimal(unscaledVal, scale);\n+    }\n+\n+    /** Build an instance from an unscaled BigInteger.\n+     * @param unscaledVal unscaled value\n+     * @param scale scale to use\n+     * @param mc to used\n+     */\n+    public BigReal(BigInteger unscaledVal, int scale, MathContext mc) {\n+        d = new BigDecimal(unscaledVal, scale, mc);\n+    }\n+\n+    /** Build an instance from a BigInteger.\n+     * @param val value of the instance\n+     * @param mc context to use\n+     */\n+    public BigReal(BigInteger val, MathContext mc) {\n+        d = new BigDecimal(val, mc);\n+    }\n+\n+    /** Build an instance from a characters representation.\n+     * @param in character representation of the value\n+     */\n+    public BigReal(char[] in) {\n+        d = new BigDecimal(in);\n+    }\n+\n+    /** Build an instance from a characters representation.\n+     * @param in character representation of the value\n+     * @param offset offset of the first character to analyze\n+     * @param len length of the array slice to analyze\n+     */\n+    public BigReal(char[] in, int offset, int len) {\n+        d = new BigDecimal(in, offset, len);\n+    }\n+\n+    /** Build an instance from a characters representation.\n+     * @param in character representation of the value\n+     * @param offset offset of the first character to analyze\n+     * @param len length of the array slice to analyze\n+     * @param mc context to use\n+     */\n+    public BigReal(char[] in, int offset, int len, MathContext mc) {\n+        d = new BigDecimal(in, offset, len, mc);\n+    }\n+\n+    /** Build an instance from a characters representation.\n+     * @param in character representation of the value\n+     * @param mc context to use\n+     */\n+    public BigReal(char[] in, MathContext mc) {\n+        d = new BigDecimal(in, mc);\n+    }\n+\n+    /** Build an instance from a double.\n+     * @param val value of the instance\n+     */\n+    public BigReal(double val) {\n+        d = new BigDecimal(val);\n+    }\n+\n+    /** Build an instance from a double.\n+     * @param val value of the instance\n+     * @param mc context to use\n+     */\n+    public BigReal(double val, MathContext mc) {\n+        d = new BigDecimal(val, mc);\n+    }\n+\n+    /** Build an instance from an int.\n+     * @param val value of the instance\n+     */\n+    public BigReal(int val) {\n+        d = new BigDecimal(val);\n+    }\n+\n+    /** Build an instance from an int.\n+     * @param val value of the instance\n+     * @param mc context to use\n+     */\n+    public BigReal(int val, MathContext mc) {\n+        d = new BigDecimal(val, mc);\n+    }\n+\n+    /** Build an instance from a long.\n+     * @param val value of the instance\n+     */\n+    public BigReal(long val) {\n+        d = new BigDecimal(val);\n+    }\n+\n+    /** Build an instance from a long.\n+     * @param val value of the instance\n+     * @param mc context to use\n+     */\n+    public BigReal(long val, MathContext mc) {\n+        d = new BigDecimal(val, mc);\n+    }\n+\n+    /** Build an instance from a String representation.\n+     * @param val character representation of the value\n+     */\n+    public BigReal(String val) {\n+        d = new BigDecimal(val);\n+    }\n+\n+    /** Build an instance from a String representation.\n+     * @param val character representation of the value\n+     * @param mc context to use\n+     */\n+    public BigReal(String val, MathContext mc)  {\n+        d = new BigDecimal(val, mc);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public BigReal add(BigReal a) {\n+        return new BigReal(d.add(a.d));\n+    }\n+\n+    /** {@inheritDoc} */\n+    public BigReal subtract(BigReal a) {\n+        return new BigReal(d.subtract(a.d));\n+    }\n+\n+    /** {@inheritDoc} */\n+    public BigReal divide(BigReal a) throws ArithmeticException {\n+        return new BigReal(d.divide(a.d));\n+    }\n+\n+    /** {@inheritDoc} */\n+    public BigReal multiply(BigReal a) {\n+        return new BigReal(d.multiply(a.d));\n+    }\n+\n+    /** {@inheritDoc} */\n+    public int compareTo(BigReal a) {\n+        return d.compareTo(a.d);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public Field<BigReal> getField() {\n+        return BigRealField.getInstance();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/util/BigRealField.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.util;\n+\n+import org.apache.commons.math.Field;\n+\n+/**\n+ * Representation of real numbers with arbitrary precision field.\n+ * <p>\n+ * This class is a singleton.\n+ * </p>\n+ * @see BigReal\n+ * @version $Revision$ $Date$\n+ * @since 2.0\n+ */\n+public class BigRealField implements Field<BigReal>  {\n+\n+    /** Serializable version identifier */\n+    private static final long serialVersionUID = 4756431066541037559L;\n+\n+    /** Private constructor for the singleton.\n+     */\n+    private BigRealField() {\n+    }\n+\n+    /** Get the unique instance.\n+     * @return the unique instance\n+     */\n+    public static BigRealField getInstance() {\n+        return LazyHolder.INSTANCE;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public BigReal getOne() {\n+        return BigReal.ONE;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public BigReal getZero() {\n+        return BigReal.ZERO;\n+    }\n+\n+    /** Holder for the instance.\n+     * <p>We use here the Initialization On Demand Holder Idiom.</p>\n+     */\n+    private static class LazyHolder {\n+        /** Cached field instance. */\n+        private static final BigRealField INSTANCE = new BigRealField();\n+    }\n+\n+}", "timestamp": 1240158877, "metainfo": ""}