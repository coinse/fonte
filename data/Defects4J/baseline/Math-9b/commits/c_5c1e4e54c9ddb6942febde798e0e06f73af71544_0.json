{"sha": "5c1e4e54c9ddb6942febde798e0e06f73af71544", "log": "Change the Complex isNaN and isInfinite fields to be transient  ", "commit": "\n--- a/src/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/java/org/apache/commons/math/complex/Complex.java\n \n package org.apache.commons.math.complex;\n \n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n  * @version $Revision$ $Date$\n  */\n public class Complex implements FieldElement<Complex>, Serializable  {\n-    // TODO: Add Serializable documentation\n-    // TODO: Check Serializable implementation\n-\n+    \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6195664516687396620L;\n \n     /**\n      * Record whether this complex number is equal to NaN\n      */\n-    private final boolean isNaN;\n+    private final transient boolean isNaN;\n     \n     /**\n      * Record whether this complex number is infinite\n      */\n-    private final boolean isInfinite;\n+    private final transient boolean isInfinite;\n     \n     /**\n      * Create a complex number given the real and imaginary parts.\n         return new Complex(real, imaginary);\n     }\n \n+    /**\n+     * Deserialize a Complex Object.\n+     * @param ois The stream to deserialize from.\n+     * @throws IOException If there is an error reading the stream.\n+     * @throws ClassNotFoundException If this class cannot be found.\n+     */\n+     private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {\n+        ois.defaultReadObject();\n+\n+        try {\n+            final java.lang.reflect.Field fNaN = getClass().getDeclaredField(\"isNaN\");\n+            fNaN.setAccessible(true);\n+            fNaN.set(this, Double.isNaN(real) || Double.isNaN(imaginary));\n+            final java.lang.reflect.Field fInf = getClass().getDeclaredField(\"isInfinite\");\n+            fInf.setAccessible(true);\n+            fInf.set(this, !isNaN && (Double.isInfinite(real) || Double.isInfinite(imaginary)));\n+        } catch (IllegalAccessException iae) {\n+            IOException ioe = new IOException();\n+            ioe.initCause(iae);\n+            throw ioe;\n+        } catch (NoSuchFieldException nsfe) {\n+            IOException ioe = new IOException();\n+            ioe.initCause(nsfe);\n+            throw ioe;\n+        }\n+\n+    }\n+\n     /** {@inheritDoc} */\n     public ComplexField getField() {\n         return ComplexField.getInstance();\n--- a/src/test/org/apache/commons/math/complex/ComplexTest.java\n+++ b/src/test/org/apache/commons/math/complex/ComplexTest.java\n         assertEquals(nan, zeroNaN.getArgument());\n         assertEquals(nan, Complex.NaN.getArgument());  \n     }\n+    \n+    public void testSerial() {\n+        Complex z = new Complex(3.0, 4.0);\n+        assertEquals(z, TestUtils.serializeAndRecover(z));\n+        Complex ncmplx = (Complex)TestUtils.serializeAndRecover(oneNaN);\n+        assertEquals(nanZero, ncmplx);\n+        assertTrue(ncmplx.isNaN());\n+        Complex infcmplx = (Complex)TestUtils.serializeAndRecover(infInf);\n+        assertEquals(infInf, infcmplx);\n+        assertTrue(infcmplx.isInfinite());\n+    }\n \n }", "timestamp": 1245381988, "metainfo": ""}