{"sha": "0393d333f91e294bb0253f363792155bdd99a1b1", "log": "More detailed message for \"NonPositiveDefiniteMatrixException\".   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n+++ b/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n     BETA(\"beta\"), /* keep */\n     NOT_POSITIVE_COLUMNDIMENSION(\"invalid column dimension: {0} (must be positive)\"),\n     NOT_POSITIVE_DEFINITE_MATRIX(\"not positive definite matrix\"),\n-    NON_POSITIVE_DEFINITE_MATRIX(\"not positive definite matrix: diagonal element at ({0},{0}) is smaller than {1}\"), /* keep */\n+    NON_POSITIVE_DEFINITE_MATRIX(\"not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})\"), /* keep */\n     NON_POSITIVE_DEFINITE_LINEAR_OPERATOR(\"non positive definite linear operator\"), /* keep */\n     NON_SELF_ADJOINT_LINEAR_OPERATOR(\"non self-adjoint linear operator\"), /* keep */\n     NON_SQUARE_LINEAR_OPERATOR(\"non square ({0}x{1}) linear operator\"), /* keep */\n--- a/src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n \n             // check diagonal element\n             if (ltI[i] < absolutePositivityThreshold) {\n-                throw new NonPositiveDefiniteMatrixException(i, absolutePositivityThreshold);\n+                throw new NonPositiveDefiniteMatrixException(ltI[i], i, absolutePositivityThreshold);\n             }\n \n             ltI[i] = FastMath.sqrt(ltI[i]);\n--- a/src/main/java/org/apache/commons/math/linear/NonPositiveDefiniteMatrixException.java\n+++ b/src/main/java/org/apache/commons/math/linear/NonPositiveDefiniteMatrixException.java\n  */\n package org.apache.commons.math.linear;\n \n-import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.exception.MathIllegalNumberException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class NonPositiveDefiniteMatrixException extends MathIllegalArgumentException {\n+public class NonPositiveDefiniteMatrixException extends MathIllegalNumberException {\n     /** Serializable version Id. */\n     private static final long serialVersionUID = 1641613838113738061L;\n     /** Index (diagonal element). */\n     /**\n      * Construct an exception.\n      *\n+     * @param wrong Value that fails the positivity check.\n      * @param index Row (and column) index.\n      * @param threshold Absolute positivity threshold.\n      */\n-    public NonPositiveDefiniteMatrixException(int index,\n+    public NonPositiveDefiniteMatrixException(double wrong,\n+                                              int index,\n                                               double threshold) {\n-        super(LocalizedFormats.NON_POSITIVE_DEFINITE_MATRIX, index, threshold);\n+        super(LocalizedFormats.NON_POSITIVE_DEFINITE_MATRIX, wrong, index, threshold);\n         this.index = index;\n         this.threshold = threshold;\n     }\n--- a/src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java\n             if (c[ir][ir] < small) {\n \n                 if (r == 0) {\n-                    throw new NonPositiveDefiniteMatrixException(ir, small);\n+                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);\n                 }\n \n                 // check remaining diagonal elements\n                     if (c[index[i]][index[i]] < -small) {\n                         // there is at least one sufficiently negative diagonal element,\n                         // the symmetric positive semidefinite matrix is wrong\n-                        throw new NonPositiveDefiniteMatrixException(i, small);\n+                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);\n                     }\n                 }\n ", "timestamp": 1315487596, "metainfo": ""}