{"sha": "eb60d3d8b5ac846eeaa4c6588fb820223465db13", "log": "MATH-488 Removed occurrences of \"MathException\" in multidimensional interpolator. Replaced \"DimensionMismatchException\" by its unchecked equivalent (MATH-491). [I forgot to make those changes as part of MATH-458.] Fixed Javadoc.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/MultivariateRealFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/MultivariateRealFunction.java\n \n package org.apache.commons.math.analysis;\n \n-import org.apache.commons.math.exception.MathUserException;\n-\n /**\n  * An interface representing a multivariate real function.\n+ *\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n \n     /**\n      * Compute the value for the function at the given point.\n-     * @param point point at which the function must be evaluated\n-     * @return function value for the given point\n-     * @exception MathUserException if the function evaluation fails\n-     * @exception IllegalArgumentException if points dimension is wrong\n+     *\n+     * @param point Point at which the function must be evaluated.\n+     * @return the function value for the given point.\n+     * @throws org.apache.commons.math.exception.MathUserException if\n+     * the function evaluation fails.\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if the parameter's dimension is wrong for the function being evaluated.\n+     * @throws  org.apache.commons.math.exception.MathIllegalArgumentException\n+     * when the activated method itself can ascertain that preconditions,\n+     * specified in the API expressed at the level of the activated method,\n+     * have been violated.  In the vast majority of cases where Commons Math\n+     * throws this exception, it is the result of argument checking of actual\n+     * parameters immediately passed to a method.\n      */\n-    double value(double[] point)\n-        throws MathUserException, IllegalArgumentException;\n-\n+    double value(double[] point);\n }\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java\n import java.util.List;\n import java.util.Map;\n \n-import org.apache.commons.math.DimensionMismatchException;\n import org.apache.commons.math.analysis.MultivariateRealFunction;\n+import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.NoDataException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.linear.ArrayRealVector;\n import org.apache.commons.math.linear.RealVector;\n import org.apache.commons.math.random.UnitSphereRandomVectorGenerator;\n      * microsphere projection.\n      */\n     private static class MicrosphereSurfaceElement {\n-\n         /** Normal vector characterizing a surface element. */\n         private final RealVector normal;\n-\n         /** Illumination received from the brightest sample. */\n         private double brightestIllumination;\n-\n         /** Brightest sample. */\n         private Map.Entry<RealVector, Double> brightestSample;\n \n      * {@code xval} (equal to {@code n}, the number of interpolation points)\n      * do not match, or the the arrays {@code xval[0]} ... {@code xval[n]},\n      * have lengths different from {@code dimension}.\n-     * @throws NoDataException if there are no data (xval null or zero length)\n+     * @throws NoDataException if there an array has zero-length.\n+     * @throws NullArgumentException if an argument is {@code null}.\n      */\n     public MicrosphereInterpolatingFunction(double[][] xval,\n                                             double[] yval,\n                                             int brightnessExponent,\n                                             int microsphereElements,\n-                                            UnitSphereRandomVectorGenerator rand)\n-        throws DimensionMismatchException, NoDataException {\n-        if (xval.length == 0 || xval[0] == null) {\n+                                            UnitSphereRandomVectorGenerator rand) {\n+        if (xval == null ||\n+            yval == null) {\n+            throw new NullArgumentException();\n+        }\n+        if (xval.length == 0) {\n             throw new NoDataException();\n         }\n-\n         if (xval.length != yval.length) {\n             throw new DimensionMismatchException(xval.length, yval.length);\n         }\n-\n+        if (xval[0] == null) {\n+            throw new NullArgumentException();\n+        }\n+        \n         dimension = xval[0].length;\n         this.brightnessExponent = brightnessExponent;\n \n         samples = new HashMap<RealVector, Double>(yval.length);\n         for (int i = 0; i < xval.length; ++i) {\n             final double[] xvalI = xval[i];\n-            if ( xvalI.length != dimension) {\n+            if (xvalI == null) {\n+                throw new NullArgumentException();\n+            }\n+            if (xvalI.length != dimension) {\n                 throw new DimensionMismatchException(xvalI.length, dimension);\n             }\n \n         for (int i = 0; i < microsphereElements; i++) {\n             microsphere.add(new MicrosphereSurfaceElement(rand.nextVector()));\n         }\n-\n     }\n \n     /**\n      * @return the interpolated value.\n      */\n     public double value(double[] point) {\n-\n         final RealVector p = new ArrayRealVector(point);\n \n         // Reset.\n         }\n \n         return value / totalWeight;\n-\n     }\n \n     /**\n      *\n      * @param v Vector.\n      * @param w Vector.\n-     * @return cosine of the angle\n+     * @return the cosine of the angle between {@code v} and {@code w}.\n      */\n     private double cosAngle(final RealVector v, final RealVector w) {\n         return v.dotProduct(w) / (v.getNorm() * w.getNorm());\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java\n  */\n package org.apache.commons.math.analysis.interpolation;\n \n-import org.apache.commons.math.MathException;\n import org.apache.commons.math.analysis.MultivariateRealFunction;\n import org.apache.commons.math.exception.NotPositiveException;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n      * {@inheritDoc}\n      */\n     public MultivariateRealFunction interpolate(final double[][] xval,\n-                                                final double[] yval)\n-        throws MathException, IllegalArgumentException {\n+                                                final double[] yval) {\n         final UnitSphereRandomVectorGenerator rand\n             = new UnitSphereRandomVectorGenerator(xval[0].length);\n         return new MicrosphereInterpolatingFunction(xval, yval,\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java\n  */\n package org.apache.commons.math.analysis.interpolation;\n \n-import org.apache.commons.math.MathException;\n import org.apache.commons.math.analysis.MultivariateRealFunction;\n \n /**\n      * point (where {@code d} is thus the dimension of the space).\n      * @param yval the values for the interpolation points\n      * @return a function which interpolates the data set\n-     * @throws MathException if arguments violate assumptions made by the\n-     *         interpolation algorithm or some dimension mismatch occurs\n-     * @throws IllegalArgumentException if there are no data (xval null or zero length)\n+     * @throws org.apache.commons.math.exception.MathIllegalArgumentException\n+     * if the arguments violate assumptions made by the interpolation\n+     * algorithm.\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * when the array dimensions are not consistent.\n+     * @throws org.apache.commons.math.exception.NoDataException if an\n+     * array has zero-length.\n+     * @throws org.apache.commons.math.exception.NullArgumentException if\n+     * the arguments are {@code null}.\n      */\n-    MultivariateRealFunction interpolate(double[][] xval, double[] yval)\n-        throws MathException, IllegalArgumentException;\n+    MultivariateRealFunction interpolate(double[][] xval, double[] yval);\n }", "timestamp": 1295614263, "metainfo": ""}