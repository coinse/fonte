{"sha": "d4f113c5573262a1995e05d65a3b0a0da4d434af", "log": "Fixed handling of Infinite and NaN coefficients in linearCombination  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n \n         // final rounding, s12 may have suffered many cancellations, we try\n         // to recover some bits from the extra words we have saved up to now\n-        return s12High + (prod1Low + prod2Low + s12Low);\n+        double result = s12High + (prod1Low + prod2Low + s12Low);\n+\n+        if (Double.isNaN(result)) {\n+            // either we have split infinite numbers or some coefficients were NaNs,\n+            // just rely on the naive implementation and let IEEE754 handle this\n+            result = a1 * b1 + a2 * b2;\n+        }\n+\n+        return result;\n \n     }\n \n \n         // final rounding, s123 may have suffered many cancellations, we try\n         // to recover some bits from the extra words we have saved up to now\n-        return s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);\n+        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);\n+\n+        if (Double.isNaN(result)) {\n+            // either we have split infinite numbers or some coefficients were NaNs,\n+            // just rely on the naive implementation and let IEEE754 handle this\n+            result = a1 * b1 + a2 * b2 + a3 * b3;\n+        }\n+\n+        return result;\n \n     }\n \n \n         // final rounding, s1234 may have suffered many cancellations, we try\n         // to recover some bits from the extra words we have saved up to now\n-        return s1234High + (prod1Low + prod2Low + prod3Low + prod4Low + s12Low + s123Low + s1234Low);\n+        double result = s1234High + (prod1Low + prod2Low + prod3Low + prod4Low + s12Low + s123Low + s1234Low);\n+\n+        if (Double.isNaN(result)) {\n+            // either we have split infinite numbers or some coefficients were NaNs,\n+            // just rely on the naive implementation and let IEEE754 handle this\n+            result = a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4;\n+        }\n+\n+        return result;\n \n     }\n \n             sHighPrev = sHighCur;\n         }\n \n-        return sHighPrev + (prodLowSum + sLowSum);\n-    }\n+        double result = sHighPrev + (prodLowSum + sLowSum);\n+\n+        if (Double.isNaN(result)) {\n+            // either we have split infinite numbers or some coefficients were NaNs,\n+            // just rely on the naive implementation and let IEEE754 handle this\n+            result = 0;\n+            for (int i = 0; i < len; ++i) {\n+                result += a[i] * b[i];\n+            }\n+        }\n+\n+        return result;\n+\n+    }\n+\n }\n--- a/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n             Assert.assertEquals(sInline, sArray, 0);\n         }\n     }\n+\n+    @Test\n+    public void testLinearCombinationInfinite() {\n+        final double[][] a = new double[][] {\n+            { 1, 2, 3, 4},\n+            { 1, Double.POSITIVE_INFINITY, 3, 4},\n+            { 1, 2, Double.POSITIVE_INFINITY, 4},\n+            { 1, Double.POSITIVE_INFINITY, 3, Double.NEGATIVE_INFINITY},\n+            { 1, 2, 3, 4},\n+            { 1, 2, 3, 4},\n+            { 1, 2, 3, 4},\n+            { 1, 2, 3, 4}\n+        };\n+        final double[][] b = new double[][] {\n+            { 1, -2, 3, 4},\n+            { 1, -2, 3, 4},\n+            { 1, -2, 3, 4},\n+            { 1, -2, 3, 4},\n+            { 1, Double.POSITIVE_INFINITY, 3, 4},\n+            { 1, -2, Double.POSITIVE_INFINITY, 4},\n+            { 1, Double.POSITIVE_INFINITY, 3, Double.NEGATIVE_INFINITY},\n+            { Double.NaN, -2, 3, 4}\n+        };\n+\n+        Assert.assertEquals(-3,\n+                            MathUtils.linearCombination(a[0][0], b[0][0],\n+                                                        a[0][1], b[0][1]),\n+                            1.0e-10);\n+        Assert.assertEquals(6,\n+                            MathUtils.linearCombination(a[0][0], b[0][0],\n+                                                        a[0][1], b[0][1],\n+                                                        a[0][2], b[0][2]),\n+                            1.0e-10);\n+        Assert.assertEquals(22,\n+                            MathUtils.linearCombination(a[0][0], b[0][0],\n+                                                        a[0][1], b[0][1],\n+                                                        a[0][2], b[0][2],\n+                                                        a[0][3], b[0][3]),\n+                            1.0e-10);\n+        Assert.assertEquals(22, MathUtils.linearCombination(a[0], b[0]), 1.0e-10);\n+\n+        Assert.assertEquals(Double.NEGATIVE_INFINITY,\n+                            MathUtils.linearCombination(a[1][0], b[1][0],\n+                                                        a[1][1], b[1][1]),\n+                            1.0e-10);\n+        Assert.assertEquals(Double.NEGATIVE_INFINITY,\n+                            MathUtils.linearCombination(a[1][0], b[1][0],\n+                                                        a[1][1], b[1][1],\n+                                                        a[1][2], b[1][2]),\n+                            1.0e-10);\n+        Assert.assertEquals(Double.NEGATIVE_INFINITY,\n+                            MathUtils.linearCombination(a[1][0], b[1][0],\n+                                                        a[1][1], b[1][1],\n+                                                        a[1][2], b[1][2],\n+                                                        a[1][3], b[1][3]),\n+                            1.0e-10);\n+        Assert.assertEquals(Double.NEGATIVE_INFINITY, MathUtils.linearCombination(a[1], b[1]), 1.0e-10);\n+\n+        Assert.assertEquals(-3,\n+                            MathUtils.linearCombination(a[2][0], b[2][0],\n+                                                        a[2][1], b[2][1]),\n+                            1.0e-10);\n+        Assert.assertEquals(Double.POSITIVE_INFINITY,\n+                            MathUtils.linearCombination(a[2][0], b[2][0],\n+                                                        a[2][1], b[2][1],\n+                                                        a[2][2], b[2][2]),\n+                            1.0e-10);\n+        Assert.assertEquals(Double.POSITIVE_INFINITY,\n+                            MathUtils.linearCombination(a[2][0], b[2][0],\n+                                                        a[2][1], b[2][1],\n+                                                        a[2][2], b[2][2],\n+                                                        a[2][3], b[2][3]),\n+                            1.0e-10);\n+        Assert.assertEquals(Double.POSITIVE_INFINITY, MathUtils.linearCombination(a[2], b[2]), 1.0e-10);\n+\n+        Assert.assertEquals(Double.NEGATIVE_INFINITY,\n+                            MathUtils.linearCombination(a[3][0], b[3][0],\n+                                                        a[3][1], b[3][1]),\n+                            1.0e-10);\n+        Assert.assertEquals(Double.NEGATIVE_INFINITY,\n+                            MathUtils.linearCombination(a[3][0], b[3][0],\n+                                                        a[3][1], b[3][1],\n+                                                        a[3][2], b[3][2]),\n+                            1.0e-10);\n+        Assert.assertEquals(Double.NEGATIVE_INFINITY,\n+                            MathUtils.linearCombination(a[3][0], b[3][0],\n+                                                        a[3][1], b[3][1],\n+                                                        a[3][2], b[3][2],\n+                                                        a[3][3], b[3][3]),\n+                            1.0e-10);\n+        Assert.assertEquals(Double.NEGATIVE_INFINITY, MathUtils.linearCombination(a[3], b[3]), 1.0e-10);\n+\n+        Assert.assertEquals(Double.POSITIVE_INFINITY,\n+                            MathUtils.linearCombination(a[4][0], b[4][0],\n+                                                        a[4][1], b[4][1]),\n+                            1.0e-10);\n+        Assert.assertEquals(Double.POSITIVE_INFINITY,\n+                            MathUtils.linearCombination(a[4][0], b[4][0],\n+                                                        a[4][1], b[4][1],\n+                                                        a[4][2], b[4][2]),\n+                            1.0e-10);\n+        Assert.assertEquals(Double.POSITIVE_INFINITY,\n+                            MathUtils.linearCombination(a[4][0], b[4][0],\n+                                                        a[4][1], b[4][1],\n+                                                        a[4][2], b[4][2],\n+                                                        a[4][3], b[4][3]),\n+                            1.0e-10);\n+        Assert.assertEquals(Double.POSITIVE_INFINITY, MathUtils.linearCombination(a[4], b[4]), 1.0e-10);\n+\n+        Assert.assertEquals(-3,\n+                            MathUtils.linearCombination(a[5][0], b[5][0],\n+                                                        a[5][1], b[5][1]),\n+                            1.0e-10);\n+        Assert.assertEquals(Double.POSITIVE_INFINITY,\n+                            MathUtils.linearCombination(a[5][0], b[5][0],\n+                                                        a[5][1], b[5][1],\n+                                                        a[5][2], b[5][2]),\n+                            1.0e-10);\n+        Assert.assertEquals(Double.POSITIVE_INFINITY,\n+                            MathUtils.linearCombination(a[5][0], b[5][0],\n+                                                        a[5][1], b[5][1],\n+                                                        a[5][2], b[5][2],\n+                                                        a[5][3], b[5][3]),\n+                            1.0e-10);\n+        Assert.assertEquals(Double.POSITIVE_INFINITY, MathUtils.linearCombination(a[5], b[5]), 1.0e-10);\n+\n+        Assert.assertEquals(Double.POSITIVE_INFINITY,\n+                            MathUtils.linearCombination(a[6][0], b[6][0],\n+                                                        a[6][1], b[6][1]),\n+                            1.0e-10);\n+        Assert.assertEquals(Double.POSITIVE_INFINITY,\n+                            MathUtils.linearCombination(a[6][0], b[6][0],\n+                                                        a[6][1], b[6][1],\n+                                                        a[6][2], b[6][2]),\n+                            1.0e-10);\n+        Assert.assertTrue(Double.isNaN(MathUtils.linearCombination(a[6][0], b[6][0],\n+                                                                   a[6][1], b[6][1],\n+                                                                   a[6][2], b[6][2],\n+                                                                   a[6][3], b[6][3])));\n+        Assert.assertTrue(Double.isNaN(MathUtils.linearCombination(a[6], b[6])));\n+\n+        Assert.assertTrue(Double.isNaN(MathUtils.linearCombination(a[7][0], b[7][0],\n+                                                        a[7][1], b[7][1])));\n+        Assert.assertTrue(Double.isNaN(MathUtils.linearCombination(a[7][0], b[7][0],\n+                                                        a[7][1], b[7][1],\n+                                                        a[7][2], b[7][2])));\n+        Assert.assertTrue(Double.isNaN(MathUtils.linearCombination(a[7][0], b[7][0],\n+                                                                   a[7][1], b[7][1],\n+                                                                   a[7][2], b[7][2],\n+                                                                   a[7][3], b[7][3])));\n+        Assert.assertTrue(Double.isNaN(MathUtils.linearCombination(a[7], b[7])));\n+\n+    }\n+\n }", "timestamp": 1313440309, "metainfo": ""}