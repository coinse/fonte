{"sha": "73d5ab1ec6d0dcffa7b4169282e656930660a9a3", "log": "Ok, so laking add/subtract tests now.  I'll try to add later, but checking in the existing tests so that [math] will at least build.   ", "commit": "\n--- a/src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java\n+++ b/src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java\n import org.apache.commons.math.linear.decomposition.NonSquareMatrixException;\n \n /**\n- * Test cases for the {@link SparseRealMatrix} class.\n+ * Test cases for the {@link OpenMapRealMatrix} class.\n  * \n  * @version $Revision$ $Date: 2008-11-07 06:48:13 -0800 (Fri, 07 Nov\n  *          2008) $\n \n     /** test dimensions */\n     public void testDimensions() {\n-        SparseRealMatrix m = createSparseMatrix(testData);\n-        SparseRealMatrix m2 = createSparseMatrix(testData2);\n+        OpenMapRealMatrix m = createSparseMatrix(testData);\n+        OpenMapRealMatrix m2 = createSparseMatrix(testData2);\n         assertEquals(\"testData row dimension\", 3, m.getRowDimension());\n         assertEquals(\"testData column dimension\", 3, m.getColumnDimension());\n         assertTrue(\"testData is square\", m.isSquare());\n \n     /** test copy functions */\n     public void testCopyFunctions() {\n-        SparseRealMatrix m1 = createSparseMatrix(testData);\n+        OpenMapRealMatrix m1 = createSparseMatrix(testData);\n         RealMatrix m2 = m1.copy();\n-        assertTrue(m2 instanceof SparseRealMatrix);\n+        assertTrue(m2 instanceof OpenMapRealMatrix);\n         assertEquals((m2), m1);\n-        SparseRealMatrix m3 = createSparseMatrix(testData);\n+        OpenMapRealMatrix m3 = createSparseMatrix(testData);\n         RealMatrix m4 = m3.copy();\n-        assertTrue(m4 instanceof SparseRealMatrix);\n+        assertTrue(m4 instanceof OpenMapRealMatrix);\n         assertEquals((m4), m3);\n     }\n \n     /** test add */\n     public void testAdd() {\n-        SparseRealMatrix m = createSparseMatrix(testData);\n-        SparseRealMatrix mInv = createSparseMatrix(testDataInv);\n-        SparseRealMatrix mDataPlusInv = createSparseMatrix(testDataPlusInv);\n+        OpenMapRealMatrix m = createSparseMatrix(testData);\n+        OpenMapRealMatrix mInv = createSparseMatrix(testDataInv);\n+        OpenMapRealMatrix mDataPlusInv = createSparseMatrix(testDataPlusInv);\n         RealMatrix mPlusMInv = m.add(mInv);\n         for (int row = 0; row < m.getRowDimension(); row++) {\n             for (int col = 0; col < m.getColumnDimension(); col++) {\n \n     /** test add failure */\n     public void testAddFail() {\n-        SparseRealMatrix m = createSparseMatrix(testData);\n-        SparseRealMatrix m2 = createSparseMatrix(testData2);\n+        OpenMapRealMatrix m = createSparseMatrix(testData);\n+        OpenMapRealMatrix m2 = createSparseMatrix(testData2);\n         try {\n             m.add(m2);\n             fail(\"IllegalArgumentException expected\");\n \n     /** test norm */\n     public void testNorm() {\n-        SparseRealMatrix m = createSparseMatrix(testData);\n-        SparseRealMatrix m2 = createSparseMatrix(testData2);\n+        OpenMapRealMatrix m = createSparseMatrix(testData);\n+        OpenMapRealMatrix m2 = createSparseMatrix(testData2);\n         assertEquals(\"testData norm\", 14d, m.getNorm(), entryTolerance);\n         assertEquals(\"testData2 norm\", 7d, m2.getNorm(), entryTolerance);\n     }\n \n     /** test m-n = m + -n */\n     public void testPlusMinus() {\n-        SparseRealMatrix m = createSparseMatrix(testData);\n-        SparseRealMatrix n = createSparseMatrix(testDataInv);\n+        OpenMapRealMatrix m = createSparseMatrix(testData);\n+        OpenMapRealMatrix n = createSparseMatrix(testDataInv);\n         assertClose(\"m-n = m + -n\", m.subtract(n),\n             n.scalarMultiply(-1d).add(m), entryTolerance);\n         try {\n \n     /** test multiply */\n     public void testMultiply() {\n-        SparseRealMatrix m = createSparseMatrix(testData);\n-        SparseRealMatrix mInv = createSparseMatrix(testDataInv);\n-        SparseRealMatrix identity = createSparseMatrix(id);\n-        SparseRealMatrix m2 = createSparseMatrix(testData2);\n+        OpenMapRealMatrix m = createSparseMatrix(testData);\n+        OpenMapRealMatrix mInv = createSparseMatrix(testDataInv);\n+        OpenMapRealMatrix identity = createSparseMatrix(id);\n+        OpenMapRealMatrix m2 = createSparseMatrix(testData2);\n         assertClose(\"inverse multiply\", m.multiply(mInv), identity,\n                 entryTolerance);\n         assertClose(\"inverse multiply\", m.multiply(new DenseRealMatrix(testDataInv)), identity,\n         RealMatrix m5 = createSparseMatrix(d5);\n         assertClose(\"m3*m4=m5\", m4.preMultiply(m3), m5, entryTolerance);\n \n-        SparseRealMatrix m = createSparseMatrix(testData);\n-        SparseRealMatrix mInv = createSparseMatrix(testDataInv);\n-        SparseRealMatrix identity = createSparseMatrix(id);\n+        OpenMapRealMatrix m = createSparseMatrix(testData);\n+        OpenMapRealMatrix mInv = createSparseMatrix(testDataInv);\n+        OpenMapRealMatrix identity = createSparseMatrix(id);\n         assertClose(\"inverse multiply\", m.preMultiply(mInv), identity,\n                 entryTolerance);\n         assertClose(\"inverse multiply\", mInv.preMultiply(m), identity,\n     }\n \n     public void testEqualsAndHashCode() {\n-        SparseRealMatrix m = createSparseMatrix(testData);\n-        SparseRealMatrix m1 = (SparseRealMatrix) m.copy();\n-        SparseRealMatrix mt = (SparseRealMatrix) m.transpose();\n+        OpenMapRealMatrix m = createSparseMatrix(testData);\n+        OpenMapRealMatrix m1 = (OpenMapRealMatrix) m.copy();\n+        OpenMapRealMatrix mt = (OpenMapRealMatrix) m.transpose();\n         assertTrue(m.hashCode() != mt.hashCode());\n         assertEquals(m.hashCode(), m1.hashCode());\n         assertEquals(m, m);\n     }\n \n     public void testToString() {\n-        SparseRealMatrix m = createSparseMatrix(testData);\n-        assertEquals(\"SparseRealMatrix{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}\", \n+        OpenMapRealMatrix m = createSparseMatrix(testData);\n+        assertEquals(\"OpenMapRealMatrix{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}\", \n             m.toString());\n-        m = new SparseRealMatrix(1, 1);\n-        assertEquals(\"SparseRealMatrix{{0.0}}\", m.toString());\n+        m = new OpenMapRealMatrix(1, 1);\n+        assertEquals(\"OpenMapRealMatrix{{0.0}}\", m.toString());\n     }\n \n     public void testSetSubMatrix() throws Exception {\n-        SparseRealMatrix m = createSparseMatrix(testData);\n+        OpenMapRealMatrix m = createSparseMatrix(testData);\n         m.setSubMatrix(detData2, 1, 1);\n         RealMatrix expected = createSparseMatrix(new double[][] {\n                 { 1.0, 2.0, 3.0 }, { 2.0, 1.0, 3.0 }, { 1.0, 2.0, 4.0 } });\n         assertEquals(expected, m);\n \n         // javadoc example\n-        SparseRealMatrix matrix = \n+        OpenMapRealMatrix matrix = \n             createSparseMatrix(new double[][] { \n         { 1, 2, 3, 4 }, { 5, 6, 7, 8 }, { 9, 0, 1, 2 } });\n         matrix.setSubMatrix(new double[][] { { 3, 4 }, { 5, 6 } }, 1, 1);\n             // expected\n         }\n         try {\n-            new SparseRealMatrix(0, 0);\n+            new OpenMapRealMatrix(0, 0);\n             fail(\"expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException e) {\n             // expected\n         }\n     }\n     \n-    private SparseRealMatrix createSparseMatrix(double[][] data) {\n-        SparseRealMatrix matrix = new SparseRealMatrix(data.length, data[0].length);\n+    private OpenMapRealMatrix createSparseMatrix(double[][] data) {\n+        OpenMapRealMatrix matrix = new OpenMapRealMatrix(data.length, data[0].length);\n         for (int row = 0; row < data.length; row++) {\n             for (int col = 0; col < data[row].length; col++) {\n                 matrix.setEntry(row, col, data[row][col]);\n--- a/src/test/org/apache/commons/math/linear/SparseRealVectorTest.java\n+++ b/src/test/org/apache/commons/math/linear/SparseRealVectorTest.java\n import junit.framework.TestSuite;\n \n /**\n- * Test cases for the {@link SparseRealVector} class.\n+ * Test cases for the {@link OpenMapRealVector} class.\n  *\n  * @version $Revision: 728186 $ $Date$\n  */\n             for (int i = 0; i < data.length; i++) {\n                 out[i] = data[i] * d;\n             }\n-            return new SparseRealVector(out);\n+            return new OpenMapRealVector(out);\n         }\n \n         public RealVector mapMultiplyToSelf(double d) {\n \n     public void testConstructors() {\n \n-        SparseRealVector v0 = new SparseRealVector();\n+        OpenMapRealVector v0 = new OpenMapRealVector();\n         assertEquals(\"testData len\", 0, v0.getDimension());\n \n-        SparseRealVector v1 = new SparseRealVector(7);\n+        OpenMapRealVector v1 = new OpenMapRealVector(7);\n         assertEquals(\"testData len\", 7, v1.getDimension());\n         assertEquals(\"testData is 0.0 \", 0.0, v1.getEntry(6));\n \n-        SparseRealVector v3 = new SparseRealVector(vec1);\n+        OpenMapRealVector v3 = new OpenMapRealVector(vec1);\n         assertEquals(\"testData len\", 3, v3.getDimension());\n         assertEquals(\"testData is 2.0 \", 2.0, v3.getEntry(1));\n \n         //    fail(\"wrong exception caught\");\n         //}\n \n-        RealVector v5_i = new SparseRealVector(dvec1);\n+        RealVector v5_i = new OpenMapRealVector(dvec1);\n         assertEquals(\"testData len\", 9, v5_i.getDimension());\n         assertEquals(\"testData is 9.0 \", 9.0, v5_i.getEntry(8));\n \n-        SparseRealVector v5 = new SparseRealVector(dvec1);\n+        OpenMapRealVector v5 = new OpenMapRealVector(dvec1);\n         assertEquals(\"testData len\", 9, v5.getDimension());\n         assertEquals(\"testData is 9.0 \", 9.0, v5.getEntry(8));\n \n-        SparseRealVector v7 = new SparseRealVector(v1);\n+        OpenMapRealVector v7 = new OpenMapRealVector(v1);\n         assertEquals(\"testData len\", 7, v7.getDimension());\n         assertEquals(\"testData is 0.0 \", 0.0, v7.getEntry(6));\n \n         SparseRealVectorTestImpl v7_i = new SparseRealVectorTestImpl(vec1);\n \n-        SparseRealVector v7_2 = new SparseRealVector(v7_i);\n+        OpenMapRealVector v7_2 = new OpenMapRealVector(v7_i);\n         assertEquals(\"testData len\", 3, v7_2.getDimension());\n         assertEquals(\"testData is 0.0 \", 2.0d, v7_2.getEntry(1));\n \n-        SparseRealVector v8 = new SparseRealVector(v1);\n+        OpenMapRealVector v8 = new OpenMapRealVector(v1);\n         assertEquals(\"testData len\", 7, v8.getDimension());\n         assertEquals(\"testData is 0.0 \", 0.0, v8.getEntry(6));\n \n \n     public void testDataInOut() {\n \n-        SparseRealVector v1 = new SparseRealVector(vec1);\n-        SparseRealVector v2 = new SparseRealVector(vec2);\n-        SparseRealVector v4 = new SparseRealVector(vec4);\n+        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n+        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n+        OpenMapRealVector v4 = new OpenMapRealVector(vec4);\n         SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2); \n \n         RealVector v_append_1 = v1.append(v2);\n             fail(\"wrong exception caught\");\n         }\n \n-        SparseRealVector v_set1 = (SparseRealVector) v1.copy();\n+        OpenMapRealVector v_set1 = (OpenMapRealVector) v1.copy();\n         v_set1.setEntry(1, 11.0);\n         assertEquals(\"testData is 11.0 \", 11.0, v_set1.getEntry(1));\n         try {\n             fail(\"wrong exception caught\");\n         }\n \n-        SparseRealVector v_set2 = (SparseRealVector) v4.copy();\n+        OpenMapRealVector v_set2 = (OpenMapRealVector) v4.copy();\n         v_set2.setSubVector(3, v1);\n         assertEquals(\"testData is 1.0 \", 1.0, v_set2.getEntry(3));\n         assertEquals(\"testData is 7.0 \", 7.0, v_set2.getEntry(6));\n             fail(\"wrong exception caught\");\n         }\n \n-        SparseRealVector v_set3 = (SparseRealVector) v1.copy();\n+        OpenMapRealVector v_set3 = (OpenMapRealVector) v1.copy();\n         v_set3.set(13.0);\n         assertEquals(\"testData is 13.0 \", 13.0, v_set3.getEntry(2));\n \n             fail(\"wrong exception caught\");\n         }\n \n-        SparseRealVector v_set4 = (SparseRealVector) v4.copy();\n+        OpenMapRealVector v_set4 = (OpenMapRealVector) v4.copy();\n         v_set4.setSubVector(3, v2_t);\n         assertEquals(\"testData is 1.0 \", 4.0, v_set4.getEntry(3));\n         assertEquals(\"testData is 7.0 \", 7.0, v_set4.getEntry(6));\n     }\n \n     public void testMapFunctions() { \n-        SparseRealVector v1 = new SparseRealVector(vec1);\n+        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n \n         //octave =  v1 .+ 2.0\n         RealVector v_mapAdd = v1.mapAdd(2.0d);\n         assertClose(\"compare vectors\" ,result_mapTanToSelf,v_mapTanToSelf.getData(),normTolerance);\n \n         double[] vat_a = {0d, 0.5d, 1.0d};\n-        SparseRealVector vat = new SparseRealVector(vat_a);\n+        OpenMapRealVector vat = new OpenMapRealVector(vat_a);\n \n         //octave =  acos(vat)\n         RealVector v_mapAcos = vat.mapAcos();\n         assertClose(\"compare vectors\" ,result_mapInvToSelf,v_mapInvToSelf.getData(),normTolerance);\n \n         double[] abs_a = {-1.0d, 0.0d, 1.0d};\n-        SparseRealVector abs_v = new SparseRealVector(abs_a);\n+        OpenMapRealVector abs_v = new OpenMapRealVector(abs_a);\n \n         //octave =  abs(abs_v)\n         RealVector v_mapAbs = abs_v.mapAbs();\n         assertClose(\"compare vectors\" ,result_mapSqrtToSelf,v_mapSqrtToSelf.getData(),normTolerance);\n \n         double[] cbrt_a = {-2.0d, 0.0d, 2.0d};\n-        SparseRealVector cbrt_v = new SparseRealVector(cbrt_a);\n+        OpenMapRealVector cbrt_v = new OpenMapRealVector(cbrt_a);\n \n         //octave =  ???\n         RealVector v_mapCbrt = cbrt_v.mapCbrt();\n         assertClose(\"compare vectors\" ,result_mapCbrtToSelf,v_mapCbrtToSelf.getData(),normTolerance);\n \n         double[] ceil_a = {-1.1d, 0.9d, 1.1d};\n-        SparseRealVector ceil_v = new SparseRealVector(ceil_a);\n+        OpenMapRealVector ceil_v = new OpenMapRealVector(ceil_a);\n \n         //octave =  ceil(ceil_v)\n         RealVector v_mapCeil = ceil_v.mapCeil();\n     }\n \n     public void testBasicFunctions() { \n-        SparseRealVector v1 = new SparseRealVector(vec1);\n-        SparseRealVector v2 = new SparseRealVector(vec2);\n-        SparseRealVector v_null = new SparseRealVector(vec_null);\n+        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n+        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n+        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n \n         SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2); \n \n         assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );\n \n         //octave =  v1 + v2\n-        SparseRealVector v_add = v1.add(v2);\n+        OpenMapRealVector v_add = v1.add(v2);\n         double[] result_add = {5d, 7d, 9d};\n         assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);\n \n         assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);\n \n         //octave =  v1 - v2\n-        SparseRealVector v_subtract = v1.subtract(v2);\n+        OpenMapRealVector v_subtract = v1.subtract(v2);\n         double[] result_subtract = {-3d, -3d, -3d};\n         assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);\n \n             fail(\"wrong exception caught\");\n         }\n \n-        SparseRealVector v_unitize = (SparseRealVector)v1.copy();\n+        OpenMapRealVector v_unitize = (OpenMapRealVector)v1.copy();\n         v_unitize.unitize();\n         assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);\n         try {\n     }  \n \n     public void testMisc() { \n-        SparseRealVector v1 = new SparseRealVector(vec1);\n+        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n \n         String out1 = v1.toString();\n         assertTrue(\"some output \",  out1.length()!=0);\n \n     public void testPredicates() {\n \n-        SparseRealVector v = new SparseRealVector(new double[] { 0, 1, 2 });\n+        OpenMapRealVector v = new OpenMapRealVector(new double[] { 0, 1, 2 });\n \n         assertFalse(v.isNaN());\n         v.setEntry(1, Double.NaN);\n         assertTrue(v.isInfinite());\n \n         v.setEntry(0, 0);\n-        assertEquals(v, new SparseRealVector(new double[] { 0, 1, 2 }));\n-        assertNotSame(v, new SparseRealVector(new double[] { 0, 1, 2 + Math.ulp(2)}));\n-        assertNotSame(v, new SparseRealVector(new double[] { 0, 1, 2, 3 }));\n+        assertEquals(v, new OpenMapRealVector(new double[] { 0, 1, 2 }));\n+        assertNotSame(v, new OpenMapRealVector(new double[] { 0, 1, 2 + Math.ulp(2)}));\n+        assertNotSame(v, new OpenMapRealVector(new double[] { 0, 1, 2, 3 }));\n \n     }\n ", "timestamp": 1242608739, "metainfo": ""}