{"sha": "dd45e40550aeb34d2ce3eb4098b9cc540e6b0ea3", "log": "Initial commit.   ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java\n+/*\n+ * Copyright 2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.distribution;\n+\n+import junit.framework.TestCase;\n+import org.apache.commons.math.TestUtils;\n+\n+/**\n+ * Abstract base class for {@link ContinuousDistribution} tests.\n+ * <p>\n+ * To create a concrete test class for a continuous distribution implementation,\n+ *  implement makeDistribution() to return a distribution instance to use in \n+ *  tests and each of the test data generation methods below.  In each case, the\n+ *  test points and test values arrays returned represent parallel arrays of \n+ *  inputs and expected values for the distribution returned by makeDistribution().\n+ *  <p>\n+ *  makeCumulativeTestPoints() -- arguments used to test cumulative probabilities\n+ *  makeCumulativeTestValues() -- expected cumulative probabilites\n+ *  makeInverseCumulativeTestPoints() -- arguments used to test inverse cdf evaluation\n+ *  makeInverseCumulativeTestValues() -- expected inverse cdf values\n+ * <p>\n+ *  To implement additional test cases with different distribution instances and test data,\n+ *  use the setXxx methods for the instance data in test cases and call the verifyXxx methods\n+ *  to verify results. \n+ * <p>\n+ *  Error tolerance can be overriden by implementing getTolerance().\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2004/05/29 22:51:32 $\n+ */\n+public abstract class ContinuousDistributionAbstractTest extends TestCase {\n+    \n+//-------------------- Private test instance data -------------------------\n+    /** Discrete distribution instance used to perform tests */\n+    private ContinuousDistribution distribution;\n+    \n+    /** Tolerance used in comparing expected and returned values */\n+    private double tolerance = 1E-4;\n+    \n+    /** Arguments used to test cumulative probability density calculations */\n+    private double[] cumulativeTestPoints;\n+    \n+    /** Values used to test cumulative probability density calculations */\n+    private double[] cumulativeTestValues;\n+    \n+    /** Arguments used to test inverse cumulative probability density calculations */\n+    private double[] inverseCumulativeTestPoints;\n+    \n+    /** Values used to test inverse cumulative probability density calculations */\n+    private double[] inverseCumulativeTestValues;\n+    \n+    //-------------------------------------------------------------------------\n+    \n+    /**\n+     * Constructor for DiscreteDistributionAbstractTest.\n+     * @param name\n+     */\n+    public ContinuousDistributionAbstractTest(String name) {\n+        super(name);\n+    }\n+    \n+    //-------------------- Abstract methods -----------------------------------\n+    \n+    /** Creates the default continuous distribution instance to use in tests. */\n+    public abstract ContinuousDistribution makeDistribution();\n+    \n+    /** Creates the default cumulative probability density test input values */\n+    public abstract double[] makeCumulativeTestPoints();\n+    \n+    /** Creates the default cumulative probability density test expected values */\n+    public abstract double[] makeCumulativeTestValues();\n+    \n+    //---- Default implementations of inverse test data generation methods ----\n+    \n+    /** Creates the default inverse cumulative probability test input values */\n+    public double[] makeInverseCumulativeTestPoints() {\n+        return makeCumulativeTestValues();\n+    }\n+    \n+    /** Creates the default inverse cumulative probability density test expected values */\n+    public double[] makeInverseCumulativeTestValues() {\n+        return makeCumulativeTestPoints();\n+    }\n+    \n+    //-------------------- Setup / tear down ----------------------------------\n+     \n+    /**\n+     * Setup sets all test instance data to default values \n+     */\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        distribution = makeDistribution();\n+        cumulativeTestPoints = makeCumulativeTestPoints();\n+        cumulativeTestValues = makeCumulativeTestValues();\n+        inverseCumulativeTestPoints = makeInverseCumulativeTestPoints();\n+        inverseCumulativeTestValues = makeInverseCumulativeTestValues();   \n+    }\n+    \n+    /**\n+     * Cleans up test instance data\n+     */\n+    protected void tearDown() throws Exception {      \n+        super.tearDown();\n+        distribution = null;\n+        cumulativeTestPoints = null;\n+        cumulativeTestValues = null;\n+        inverseCumulativeTestPoints = null;\n+        inverseCumulativeTestValues = null;   \n+    }\n+    \n+    //-------------------- Verification methods -------------------------------\n+    \n+    /**\n+     * Verifies that cumulative probability density calculations match expected values\n+     * using current test instance data\n+     */   \n+    protected void verifyCumulativeProbabilities() throws Exception {\n+        for (int i = 0; i < cumulativeTestPoints.length; i++) {\n+            TestUtils.assertEquals(\"Incorrect cumulative probability value returned for \" \n+                + cumulativeTestPoints[i], cumulativeTestValues[i], \n+                distribution.cumulativeProbability(cumulativeTestPoints[i]), \n+                getTolerance());\n+        }           \n+    }\n+    \n+    /**\n+     * Verifies that inverse cumulative probability density calculations match exptected values\n+     * using current test instance data\n+     */\n+    protected void verifyInverseCumulativeProbabilities() throws Exception {\n+        for (int i = 0; i < inverseCumulativeTestPoints.length; i++) {\n+            TestUtils.assertEquals(\"Incorrect inverse cumulative probability value returned for \" \n+                + inverseCumulativeTestPoints[i], inverseCumulativeTestValues[i], \n+                 distribution.inverseCumulativeProbability(inverseCumulativeTestPoints[i]), \n+                 getTolerance());\n+        }           \n+    }\n+    \n+    //------------------------ Default test cases -----------------------------\n+    \n+    /**\n+     * Verifies that cumulative probability density calculations match exptected values\n+     * using default test instance data\n+     */\n+    public void testCumulativeProbabilities() throws Exception {\n+        verifyCumulativeProbabilities();      \n+    }\n+    \n+    /**\n+     * Verifies that inverse cumulative probability density calculations match exptected values\n+     * using default test instance data\n+     */\n+    public void testInverseCumulativeProbabilities() throws Exception {\n+        verifyInverseCumulativeProbabilities();       \n+    }\n+    \n+    /**\n+     * Verifies that probability computations are consistent\n+     */\n+    public void testConsistency() throws Exception {\n+        for (int i=1; i < cumulativeTestPoints.length; i++) {\n+            \n+            // check that cdf(x, x) = 0\n+            TestUtils.assertEquals(0d, \n+               distribution.cumulativeProbability\n+                 (cumulativeTestPoints[i], cumulativeTestPoints[i]), tolerance);\n+            \n+            // check that P(a < X < b) = P(X < b) - P(X < a)\n+            double upper = Math.max(cumulativeTestPoints[i], cumulativeTestPoints[i -1]);\n+            double lower = Math.min(cumulativeTestPoints[i], cumulativeTestPoints[i -1]);\n+            double diff = distribution.cumulativeProbability(upper) - \n+            \tdistribution.cumulativeProbability(lower);\n+            double direct = distribution.cumulativeProbability(lower, upper);\n+            TestUtils.assertEquals(\"Inconsistent cumulative probabilities for (\" \n+                    + lower + \",\" + upper + \")\", diff, direct, tolerance);\n+        }\n+    }\n+    \n+    /**\n+     * Verifies that illegal arguments are correctly handled\n+     */\n+    public void testIllegalArguments() throws Exception {\n+        try {\n+            distribution.cumulativeProbability(1, 0);\n+            fail(\"Expecting IllegalArgumentException for bad cumulativeProbability interval\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        try {\n+            distribution.inverseCumulativeProbability(-1);\n+            fail(\"Expecting IllegalArgumentException for p = -1\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        try {\n+            distribution.inverseCumulativeProbability(2);\n+            fail(\"Expecting IllegalArgumentException for p = 2\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }       \n+    }\n+    \n+    //------------------ Getters / Setters for test instance data -----------\n+    /**\n+     * @return Returns the cumulativeTestPoints.\n+     */\n+    protected double[] getCumulativeTestPoints() {\n+        return cumulativeTestPoints;\n+    }\n+\n+    /**\n+     * @param cumulativeTestPoints The cumulativeTestPoints to set.\n+     */\n+    protected void setCumulativeTestPoints(double[] cumulativeTestPoints) {\n+        this.cumulativeTestPoints = cumulativeTestPoints;\n+    }\n+\n+    /**\n+     * @return Returns the cumulativeTestValues.\n+     */\n+    protected double[] getCumulativeTestValues() {\n+        return cumulativeTestValues;\n+    }\n+\n+    /**\n+     * @param cumulativeTestValues The cumulativeTestValues to set.\n+     */\n+    protected void setCumulativeTestValues(double[] cumulativeTestValues) {\n+        this.cumulativeTestValues = cumulativeTestValues;\n+    }\n+\n+    /**\n+     * @return Returns the distribution.\n+     */\n+    protected ContinuousDistribution getDistribution() {\n+        return distribution;\n+    }\n+\n+    /**\n+     * @param distribution The distribution to set.\n+     */\n+    protected void setDistribution(ContinuousDistribution distribution) {\n+        this.distribution = distribution;\n+    }\n+\n+    /**\n+     * @return Returns the inverseCumulativeTestPoints.\n+     */\n+    protected double[] getInverseCumulativeTestPoints() {\n+        return inverseCumulativeTestPoints;\n+    }\n+\n+    /**\n+     * @param inverseCumulativeTestPoints The inverseCumulativeTestPoints to set.\n+     */\n+    protected void setInverseCumulativeTestPoints(double[] inverseCumulativeTestPoints) {\n+        this.inverseCumulativeTestPoints = inverseCumulativeTestPoints;\n+    }\n+\n+    /**\n+     * @return Returns the inverseCumulativeTestValues.\n+     */\n+    protected double[] getInverseCumulativeTestValues() {\n+        return inverseCumulativeTestValues;\n+    }\n+\n+    /**\n+     * @param inverseCumulativeTestValues The inverseCumulativeTestValues to set.\n+     */\n+    protected void setInverseCumulativeTestValues(double[] inverseCumulativeTestValues) {\n+        this.inverseCumulativeTestValues = inverseCumulativeTestValues;\n+    }\n+\n+    /**\n+     * @return Returns the tolerance.\n+     */\n+    protected double getTolerance() {\n+        return tolerance;\n+    }\n+\n+    /**\n+     * @param tolerance The tolerance to set.\n+     */\n+    protected void setTolerance(double tolerance) {\n+        this.tolerance = tolerance;\n+    }\n+\n+}", "timestamp": 1085871092, "metainfo": ""}