{"sha": "03d29023a9024017531faf876570f1eac9834104", "log": "improved error messages  ", "commit": "\n--- a/src/java/org/apache/commons/math/MessagesResources_fr.java\n+++ b/src/java/org/apache/commons/math/MessagesResources_fr.java\n     // org.apache.commons.math.linear.EigenDecompositionImpl\n     { \"negative element on decomposed tridiagonal of {0}x{1} matrix\",\n       \"\\u00e9l\\u00e9ment n\\u00e9gatif dans la d\\u00e9composition tri-diagonale d''une matrice {0}x{1}\" },\n+    { \"internal error: please file a bug report at https://issues.apache.org/jira/browse/MATH\",\n+      \"erreur interne : veuillez enregistrer un rapport de bogue sur https://issues.apache.org/jira/browse/MATH\" },\n \n     // org.apache.commons.math.linear.NonSquareMatrixException\n     { \"a {0}x{1} matrix was provided instead of a square matrix\",\n      \"norme nulle pour un axe de rotation\" },\n \n    // org.apache.commons.math.geometry.Vector3D\n-    // org.apache.commons.math.linear.RealVectorImpl\n+   // org.apache.commons.math.linear.RealVectorImpl\n    { \"cannot normalize a zero norm vector\",\n      \"impossible de normer un vecteur de norme nulle\" },\n    { \"zero norm\",\n-     \"norme nulle\" }\n+     \"norme nulle\" },\n+\n+   // org.apache.commons.math.analysis.UnivariateRealIntegratorImpl\n+   // org.apache.commons.math.analysis.UnivariateRealSolverImpl\n+   { \"no result available\",\n+     \"aucun r\\u00e9sultat n''est disponible\" },\n+\n+   // org.apache.commons.math.linear.BigMatrixImpl\n+   { \"first {0} rows are not initialized yet\",\n+     \"les {0} premi\\u00e8res lignes ne sont pas encore initialis\\u00e9es\" },\n+   { \"first {0} columns are not initialized yet\",\n+     \"les {0} premi\\u00e8res colonnes ne sont pas encore initialis\\u00e9es\" },\n+\n+   // org.apache.commons.math.linear.EigenDecompositionImpl\n+   // org.apache.commons.math.linear.LUDecompositionImpl\n+   // org.apache.commons.math.linear.QRDecompositionImpl\n+   // org.apache.commons.math.linear.SingularValueDecompositionImpl\n+   { \"no matrix have been decomposed yet\",\n+     \"aucune matrice n''a encore \\u00e9t\\u00e9 d\\u00e9compos\\u00e9e\" },\n+\n+   // org.apache.commons.math.random.EmpiricalDistributionImpl\n+   { \"distribution not loaded\",\n+     \"aucune distribution n''a \\u00e9t\\u00e9 charg\\u00e9e\" },\n+\n+   // org.apache.commons.math.random.ValueServer\n+   { \"unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})\",\n+     \"mode {0} inconnu, modes connus : {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) et {11} ({12})\" },\n+   { \"digest not initialized\",\n+     \"mod\\u00e8le empirique non initialis\\u00e9\" },\n+\n+   // org.apache.commons.math.stat.descriptive.moment.GeometricMean\n+   // org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics\n+   // org.apache.commons.math.stat.descriptive.SummaryStatistics\n+   { \"{0} values have been added before statistic is configured\",\n+     \"{0} valeurs ont \\u00e9t\\u00e9 ajout\\u00e9es avant que la statistique ne soit configur\\u00e9e\" },\n+\n+   // org.apache.commons.math.stat.descriptive.moment.Kurtosis\n+   { \"statistics constructed from external moments cannot be incremented\",\n+     \"les statistiques bas\\u00e9es sur des moments externes ne peuvent pas \\u00eatre incr\\u00e9ment\\u00e9es\" },\n+   { \"statistics constructed from external moments cannot be cleared\",\n+     \"les statistiques bas\\u00e9es sur des moments externes ne peuvent pas \\u00eatre remises \\u00e0 z\\u00e9ro\" }\n \n   };\n \n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealIntegratorImpl.java\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.MathRuntimeException;\n+\n /**\n  * Provide a default implementation for several generic functions.\n  *  \n         if (resultComputed) {\n             return result;\n         } else {\n-            throw new IllegalStateException(\"No result available.\");\n+            throw MathRuntimeException.createIllegalStateException(\"no result available\", null);\n         }\n     }\n \n         if (resultComputed) {\n             return iterationCount;\n         } else {\n-            throw new IllegalStateException(\"No result available.\");\n+            throw MathRuntimeException.createIllegalStateException(\"no result available\", null);\n         }\n     }\n \n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java\n import java.io.Serializable;\n \n import org.apache.commons.math.FunctionEvaluationException;\n+import org.apache.commons.math.MathRuntimeException;\n \n /**\n  * Provide a default implementation for several functions useful to generic\n         if (resultComputed) {\n             return result;\n         } else {\n-            throw new IllegalStateException(\"No result available\");\n+            throw MathRuntimeException.createIllegalStateException(\"no result available\", null);\n         }\n     }\n \n         if (resultComputed) {\n             return iterationCount;\n         } else {\n-            throw new IllegalStateException(\"No result available\");\n+            throw MathRuntimeException.createIllegalStateException(\"no result available\", null);\n         }\n     }\n \n--- a/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n package org.apache.commons.math.linear;\n import java.io.Serializable;\n import java.math.BigDecimal;\n+\n+import org.apache.commons.math.MathRuntimeException;\n \n /**\n  * Implementation of {@link BigMatrix} using a BigDecimal[][] array to store entries\n         }\n \n         if (data == null) {\n-            if ((row > 0) || (column > 0)) {\n-                throw new IllegalStateException(\"matrix must be initialized to perform this method\");\n+            if (row > 0) {\n+                throw MathRuntimeException.createIllegalStateException(\"first {0} rows are not initialized yet\",\n+                                                                       new Object[] { row });\n+            }\n+            if (column > 0) {\n+                throw MathRuntimeException.createIllegalStateException(\"first {0} columns are not initialized yet\",\n+                                                                       new Object[] { column });\n             }\n             data = new BigDecimal[nRows][nCols];\n             System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);          \n--- a/src/java/org/apache/commons/math/linear/LUDecompositionImpl.java\n+++ b/src/java/org/apache/commons/math/linear/LUDecompositionImpl.java\n \n package org.apache.commons.math.linear;\n \n+import org.apache.commons.math.MathRuntimeException;\n+\n /**\n  * Calculates the LUP-decomposition of a square matrix.\n  * <p>The LUP-decomposition of a matrix A consists of three matrices\n     private void checkDecomposed()\n         throws IllegalStateException {\n         if (lu == null) {\n-            throw new IllegalStateException(\"no matrix have been decomposed yet\");\n+            throw MathRuntimeException.createIllegalStateException(\"no matrix have been decomposed yet\", null);\n         }\n     }\n \n--- a/src/java/org/apache/commons/math/linear/QRDecompositionImpl.java\n+++ b/src/java/org/apache/commons/math/linear/QRDecompositionImpl.java\n  */\n \n package org.apache.commons.math.linear;\n+\n+import org.apache.commons.math.MathRuntimeException;\n \n /**\n  * Calculates the QR-decomposition of a matrix.\n     private void checkDecomposed()\n         throws IllegalStateException {\n         if (qrt == null) {\n-            throw new IllegalStateException(\"no matrix have been decomposed yet\");\n+            throw MathRuntimeException.createIllegalStateException(\"no matrix have been decomposed yet\", null);\n         }\n     }\n \n--- a/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n package org.apache.commons.math.linear;\n \n import java.io.Serializable;\n+\n+import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.util.MathUtils;\n \n \n         }\n \n         if (data == null) {\n-            if ((row > 0) || (column > 0)) {\n-                throw new IllegalStateException(\"matrix must be initialized to perform this method\");\n+            if (row > 0) {\n+                throw MathRuntimeException.createIllegalStateException(\"first {0} rows are not initialized yet\",\n+                                                                       new Object[] { row });\n+            }\n+            if (column > 0) {\n+                throw MathRuntimeException.createIllegalStateException(\"first {0} columns are not initialized yet\",\n+                                                                       new Object[] { column });\n             }\n             data = new double[nRows][nCols];\n             System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);          \n--- a/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n     public double getNextValue() throws IllegalStateException {\n \n         if (!loaded) {\n-            throw new IllegalStateException(\"distribution not loaded\");\n+            throw MathRuntimeException.createIllegalStateException(\"distribution not loaded\",\n+                                                                   null);\n         }\n \n         // Start with a uniformly distributed random number in (0,1)\n--- a/src/java/org/apache/commons/math/random/ValueServer.java\n+++ b/src/java/org/apache/commons/math/random/ValueServer.java\n             case EXPONENTIAL_MODE: return getNextExponential();\n             case GAUSSIAN_MODE: return getNextGaussian();\n             case CONSTANT_MODE: return mu;\n-            default: throw new IllegalStateException\n-                       (\"Bad mode: \" + mode);\n+            default: throw MathRuntimeException.createIllegalStateException(\"unknown mode {0}, known modes: \" +\n+                                                                            \"{1} ({2}), {3} ({4}), {5} ({6}), \" +\n+                                                                            \"{7} ({8}), {9} ({10}) and {11} ({12})\",\n+                                                                            new Object[] {\n+                                                                                mode,\n+                                                                                \"DIGEST_MODE\",      DIGEST_MODE,\n+                                                                                \"REPLAY_MODE\",      REPLAY_MODE,\n+                                                                                \"UNIFORM_MODE\",     UNIFORM_MODE,\n+                                                                                \"EXPONENTIAL_MODE\", EXPONENTIAL_MODE,\n+                                                                                \"GAUSSIAN_MODE\",    GAUSSIAN_MODE,\n+                                                                                \"CONSTANT_MODE\",    CONSTANT_MODE\n+                                                                            });\n         }\n     }\n \n     private double getNextDigest() {\n         if ((empiricalDistribution == null) ||\n             (empiricalDistribution.getBinStats().size() == 0)) {\n-            throw new IllegalStateException(\"Digest not initialized\");\n+            throw MathRuntimeException.createIllegalStateException(\"digest not initialized\", null);\n         }\n         return empiricalDistribution.getNextValue();\n     }\n--- a/src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java\n import java.util.Arrays;\n \n import org.apache.commons.math.DimensionMismatchException;\n+import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.stat.descriptive.moment.GeometricMean;\n import org.apache.commons.math.stat.descriptive.moment.Mean;\n      */\n     private void checkEmpty() {\n         if (n > 0) {\n-            throw new IllegalStateException(\n-                \"Implementations must be configured before values are added.\");\n+            throw MathRuntimeException.createIllegalStateException(\"{0} values have been added before statistic is configured\",\n+                                                                   new Object[] { n });\n         }\n     }\n \n--- a/src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n \n import java.io.Serializable;\n \n+import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.stat.descriptive.moment.GeometricMean;\n import org.apache.commons.math.stat.descriptive.moment.Mean;\n import org.apache.commons.math.stat.descriptive.moment.SecondMoment;\n      */\n     private void checkEmpty() {\n         if (n > 0) {\n-            throw new IllegalStateException(\"Implementations must be configured before values are added.\");\n+            throw MathRuntimeException.createIllegalStateException(\"{0} values have been added before statistic is configured\",\n+                                                                   new Object[] { n });\n         }\n     }\n \n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java\n  */\n package org.apache.commons.math.stat.descriptive.moment;\n \n+import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic;\n import org.apache.commons.math.stat.descriptive.summary.SumOfLogs;\n      */\n     private void checkEmpty() {\n         if (getN() > 0) {\n-            throw new IllegalStateException(\n-                \"Implementation must be configured before values are added.\");\n+            throw MathRuntimeException.createIllegalStateException(\"{0} values have been added before statistic is configured\",\n+                                                                   new Object[] { getN() });\n         }\n     }\n \n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java\n  */\n package org.apache.commons.math.stat.descriptive.moment;\n \n+import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n \n /**\n         if (incMoment) {\n             moment.increment(d);\n         }  else  {\n-            throw new IllegalStateException\n-            (\"Statistics constructed from external moments cannot be incremented\");\n+            throw MathRuntimeException.createIllegalStateException(\"statistics constructed from external \" +\n+                                                                   \"moments cannot be incremented\",\n+                                                                   null);\n         }\n     }\n \n         if (incMoment) {\n             moment.clear();\n         } else  {\n-            throw new IllegalStateException\n-                (\"Statistics constructed from external moments cannot be cleared\");\n+            throw MathRuntimeException.createIllegalStateException(\"statistics constructed from external \" +\n+                                                                   \"moments cannot be cleared\",\n+                                                                   null);\n         }\n     }\n ", "timestamp": 1226176975, "metainfo": ""}