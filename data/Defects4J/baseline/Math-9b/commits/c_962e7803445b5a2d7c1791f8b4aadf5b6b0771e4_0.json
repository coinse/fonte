{"sha": "962e7803445b5a2d7c1791f8b4aadf5b6b0771e4", "log": "Javadoc only. Clarified how increment works with an external second moment.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n     protected SecondMoment moment = null;\n \n     /**\n-     * Boolean test to determine if this Variance should also increment\n-     * the second moment, this evaluates to false when this Variance is\n-     * constructed with an external SecondMoment as a parameter.\n+     * Whether or not {@link #increment(double)} should increment\n+     * the internal second moment. When a Variance is constructed with an\n+     * external SecondMoment as a constructor parameter, this property is\n+     * set to false and increments must be applied to the second moment\n+     * directly.\n      */\n     protected boolean incMoment = true;\n \n     /**\n-     * Determines whether or not bias correction is applied when computing the\n-     * value of the statisic.  True means that bias is corrected.  See\n+     * Whether or not bias correction is applied when computing the\n+     * value of the statistic. True means that bias is corrected.  See\n      * {@link Variance} for details on the formula.\n      */\n     private boolean isBiasCorrected = true;\n \n     /**\n      * Constructs a Variance based on an external second moment.\n+     * When this constructor is used, the statistic may only be\n+     * incremented via the moment, i.e., {@link #increment(double)}\n+     * does nothing; whereas {@code m2.increment(value)} increments\n+     * both {@code m2} and the Variance instance constructed from it.\n      *\n      * @param m2 the SecondMoment (Third or Fourth moments work\n      * here as well.)\n      * <code>evaluate</code> leverages the fact that is has the full\n      * list of values together to execute a two-pass algorithm.\n      * See {@link Variance}.</p>\n+     * \n+     * <p>Note also that when {@link #Variance(SecondMoment)} is used to\n+     * create a Variance, this method does nothing. In that case, the\n+     * SecondMoment should be incremented directly.</p>\n      */\n     @Override\n     public void increment(final double d) {", "timestamp": 1322323860, "metainfo": ""}