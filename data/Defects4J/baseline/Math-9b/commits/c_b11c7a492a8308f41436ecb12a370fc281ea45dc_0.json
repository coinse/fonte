{"sha": "b11c7a492a8308f41436ecb12a370fc281ea45dc", "log": "Fixed logic in bean transformer tests to match API.   ", "commit": "\n--- a/src/test/org/apache/commons/math/util/BeanTransformer.java\n+++ b/src/test/org/apache/commons/math/util/BeanTransformer.java\n \n import java.lang.reflect.InvocationTargetException;\n import org.apache.commons.math.MathException;\n+import org.apache.commons.beanutils.PropertyUtils;\n \n /**\n  * Uses PropertyUtils to map a Bean getter to a double value.\n- * @version $Revision: 1.2 $ $Date: 2004/01/29 00:48:59 $\n+ * @version $Revision: 1.3 $ $Date: 2004/02/16 07:04:03 $\n  */\n public class BeanTransformer implements NumberTransformer {\n \n      */\n     public double transform(final Object o) throws MathException {\n         try {\n-\t\t\treturn ((Number) org.apache.commons.beanutils.PropertyUtils.getProperty(o, getPropertyName())).doubleValue();\n+\t\t\treturn ((Number) PropertyUtils.getProperty(o, getPropertyName())).doubleValue();\n         } catch (IllegalAccessException e) {\n \t\t\tthrow new MathException(\"IllegalAccessException in Transformation: \" + e.getMessage(), e);\n         } catch (InvocationTargetException e) {\n--- a/src/test/org/apache/commons/math/util/BeanTransformerTest.java\n+++ b/src/test/org/apache/commons/math/util/BeanTransformerTest.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.7 $ $Date: 2004/01/29 00:48:59 $\n+ * @version $Revision: 1.8 $ $Date: 2004/02/16 07:04:04 $\n  */\n public class BeanTransformerTest extends TestCase {\n     \n     public void testTransformNoSuchMethod(){\n         BeanTransformer b = new BeanTransformer(\"z\");\n         TestBean target = new TestBean();\n-        double value = Double.NaN;\n \t\ttry {\n-\t\t\tvalue = b.transform(target);\n+\t\t    b.transform(target);\n+\t\t\tfail(\"Expecting MathException\");\n \t\t} catch (MathException e) {\n-\t\t\t// TODO Auto-generated catch block\n-\t\t\te.printStackTrace();\n+\t\t\t// expected\n \t\t}\n-\t\tTestUtils.assertEquals(Double.NaN, value, 1.0e-2);\n     }\n     \n     /**\n      * \n      */\n-    public void testTransform(){\n+    public void testTransform() {\n         BeanTransformer b = new BeanTransformer(\"x\");\n         TestBean target = new TestBean();\n \t\tdouble value = Double.NaN;\n     /**\n      * \n      */\n-    public void testTransformInvocationError(){\n-        BeanTransformer b = new BeanTransformer(\"z\");\n-        TestBean target = new TestBean();\n-\t\tdouble value = Double.NaN;\n-\t\ttry {\n-\t\t\tvalue = b.transform(target);\n-\t\t} catch (MathException e) {\n-\t\t\t// TODO Auto-generated catch block\n-\t\t\te.printStackTrace();\n-\t\t}\n-\t\tTestUtils.assertEquals(Double.NaN, value, 1.0e-2);\n-    }\n-    \n-    /**\n-     * \n-     */\n     public void testTransformInvalidType(){\n         BeanTransformer b = new BeanTransformer(\"y\");\n         TestBean target = new TestBean();\n \t\t\t\t// TODO Auto-generated catch block\n \t\t\t\te.printStackTrace();\n \t\t\t}\n-            fail();\n+            fail(\"Expecting ClassCastException\");\n         } catch(ClassCastException ex){\n             // success\n         }\n--- a/src/test/org/apache/commons/math/util/DefaultTransformerTest.java\n+++ b/src/test/org/apache/commons/math/util/DefaultTransformerTest.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.7 $ $Date: 2004/01/29 00:48:59 $\n+ * @version $Revision: 1.8 $ $Date: 2004/02/16 07:04:04 $\n  */\n public class DefaultTransformerTest extends TestCase {\n     /**\n      * \n      */\n     public void testTransformNull(){\n-        double expected = Double.NaN;\n         DefaultTransformer t = new DefaultTransformer();\n         try {\n-\t\t\tTestUtils.assertEquals(expected, t.transform(null), 1.0e-4);\n+\t\t\tt.transform(null);\n+\t\t\tfail(\"Expection MathException\");\n \t\t} catch (MathException e) {\n-\t\t\t// TODO Auto-generated catch block\n-\t\t\te.printStackTrace();\n+\t\t\t// expected\n \t\t}\n     }\n     \n      * \n      */\n     public void testTransformObject(){\n-        double expected = Double.NaN;\n         Boolean input = Boolean.TRUE;\n         DefaultTransformer t = new DefaultTransformer();\n         try {\n-\t\t\tTestUtils.assertEquals(expected, t.transform(input), 1.0e-4);\n+\t\t\tt.transform(input);\n+\t\t\tfail(\"Expecting MathException\");\n \t\t} catch (MathException e) {\n-\t\t\t// TODO Auto-generated catch block\n-\t\t\te.printStackTrace();\n+\t\t    // expected\n \t\t}\n     }\n }", "timestamp": 1076915044, "metainfo": ""}