{"sha": "2551b5af24477d20e19582188bf87d1df3b569be", "log": "Javadoc, formatting.  ", "commit": "\n--- a/src/java/org/apache/commons/math/random/AbstractRandomGenerator.java\n+++ b/src/java/org/apache/commons/math/random/AbstractRandomGenerator.java\n  * {@link #setSeed(long)} are provided. \n  * <p>\n  * All data generation methods are based on <code>nextDouble().</code>\n- * Concrete implementations <strong>must</strong> overrride\n+ * Concrete implementations <strong>must</strong> override\n  * this method and <strong>should</strong> provide better / more\n  * performant implementations of the other methods if the underlying PRNG\n  * supplies them.\n     }\n     \n     /**\n-     * Clears the cache used by the default implementation of {@link #nextGaussian}.\n-     * Implemementations that do not override the default\n-     * implementation of <code>nextGaussian</code> should call this method\n-     * in the implementation of {@link #setSeed(long)}\n+     * Clears the cache used by the default implementation of \n+     * {@link #nextGaussian}. Implemementations that do not override the\n+     * default implementation of <code>nextGaussian</code> should call this\n+     * method in the implementation of {@link #setSeed(long)}\n      */\n     public void clear() {\n         cachedNormalDeviate = Double.NaN;\n      * byte array.  The number of random bytes produced is equal to \n      * the length of the byte array.\n      * <p>\n-     * The default implementation provided here fills the array with bytes\n-     * extracted from random integers generated using {@link #nextInt}.\n+     * The default implementation fills the array with bytes extracted from\n+     * random integers generated using {@link #nextInt}.\n      * \n      * @param bytes the non-null byte array in which to put the \n      * random bytes\n      * between 0 (inclusive) and the specified value (exclusive), drawn from\n      * this random number generator's sequence. \n      * <p>  \n-     * The default implementation provided here returns \n+     * The default implementation returns \n      * <pre>\n      * <code>(int) (nextDouble() * n</code>\n      * </pre>\n      * 2<font size=\"-1\"><sup>64</sup></font> possible <tt>long</tt> values \n      * should be produced with (approximately) equal probability. \n      * <p>  \n-     * The default implementation provided here returns \n+     * The default implementation returns \n      * <pre>\n      * <code>(long) (nextDouble() * Long.MAX_VALUE)</code>\n      * </pre>\n      * <code>boolean</code> value from this random number generator's\n      * sequence.  \n      * <p>  \n-     * The default implementation provided here returns \n+     * The default implementation returns \n      * <pre>\n      * <code>nextDouble() <= 0.5</code>\n      * </pre>\n      * value between <code>0.0</code> and <code>1.0</code> from this random\n      * number generator's sequence.  \n      * <p>  \n-     * The default implementation provided here returns \n+     * The default implementation returns \n      * <pre>\n      * <code>(float) nextDouble() </code>\n      * </pre>\n      * <code>double</code> value with mean <code>0.0</code> and standard\n      * deviation <code>1.0</code> from this random number generator's sequence.\n      * <p>\n-     * The default implementation provided here uses the <em>Polar Method</em>\n+     * The default implementation uses the <em>Polar Method</em>\n      * due to G.E.P. Box, M.E. Muller and G. Marsaglia, as described in \n      * D. Knuth, <u>The Art of Computer Programming</u>, 3.4.1C.\n      * <p>\n             cachedNormalDeviate = Double.NaN;\n             return dev;\n         }\n-        double v1 =0;\n+        double v1 = 0;\n         double v2 = 0;\n         double s = 1;\n         while (s >=1 ) { \n             s = v1 * v1 + v2 * v2;\n         }\n         if (s != 0) {\n-            s = Math.sqrt(-2 * Math.log(s)/s);   \n+            s = Math.sqrt(-2 * Math.log(s) / s);   \n         }\n         cachedNormalDeviate = v2 * s;\n         return v1 * s;      ", "timestamp": 1117861883, "metainfo": ""}