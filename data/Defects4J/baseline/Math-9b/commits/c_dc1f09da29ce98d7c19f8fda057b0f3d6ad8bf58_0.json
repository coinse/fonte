{"sha": "dc1f09da29ce98d7c19f8fda057b0f3d6ad8bf58", "log": "Improved k-means++ clustering performances and initial cluster center choice.  JIRA: MATH-584  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n+++ b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n \n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Random;\n \n     private static <T extends Clusterable<T>> List<Cluster<T>>\n         chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n \n-        final List<T> pointSet = new ArrayList<T>(points);\n+        // Convert to list for indexed access. Make it unmodifiable, since removal of items\n+        // would screw up the logic of this method.\n+        final List<T> pointList = Collections.unmodifiableList(new ArrayList<T> (points));\n+\n+        // The number of points in the list.\n+        final int numPoints = pointList.size();\n+\n+        // Set the corresponding element in this array to indicate when\n+        // elements of pointList are no longer available.\n+        final boolean[] taken = new boolean[numPoints];\n+\n+        // The resulting list of initial centers.\n         final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n \n         // Choose one center uniformly at random from among the data points.\n-        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n+        final int firstPointIndex = random.nextInt(numPoints);\n+\n+        final T firstPoint = pointList.get(firstPointIndex);\n+\n         resultSet.add(new Cluster<T>(firstPoint));\n \n-        final double[] dx2 = new double[pointSet.size()];\n+        // Must mark it as taken\n+        taken[firstPointIndex] = true;\n+\n+        // To keep track of the minimum distance squared of elements of\n+        // pointList to elements of resultSet.\n+        final double[] minDistSquared = new double[numPoints];\n+\n+        // Initialize the elements.  Since the only point in resultSet is firstPoint,\n+        // this is very easy.\n+        for (int i = 0; i < numPoints; i++) {\n+            if (i != firstPointIndex) { // That point isn't considered\n+                double d = firstPoint.distanceFrom(pointList.get(i));\n+                minDistSquared[i] = d*d;\n+            }\n+        }\n+\n         while (resultSet.size() < k) {\n-            // For each data point x, compute D(x), the distance between x and\n-            // the nearest center that has already been chosen.\n-            double sum = 0;\n-            for (int i = 0; i < pointSet.size(); i++) {\n-                final T p = pointSet.get(i);\n-                int nearestClusterIndex = getNearestCluster(resultSet, p);\n-                final Cluster<T> nearest = resultSet.get(nearestClusterIndex);\n-                final double d = p.distanceFrom(nearest.getCenter());\n-                sum += d * d;\n-                dx2[i] = sum;\n+\n+            // Sum up the squared distances for the points in pointList not\n+            // already taken.\n+            double distSqSum = 0.0;\n+\n+            for (int i = 0; i < numPoints; i++) {\n+                if (!taken[i]) {\n+                    distSqSum += minDistSquared[i];\n+                }\n             }\n \n             // Add one new data point as a center. Each point x is chosen with\n             // probability proportional to D(x)2\n-            final double r = random.nextDouble() * sum;\n-            for (int i = 0 ; i < dx2.length; i++) {\n-                if (dx2[i] >= r) {\n-                    final T p = pointSet.remove(i);\n-                    resultSet.add(new Cluster<T>(p));\n-                    break;\n-                }\n+            final double r = random.nextDouble() * distSqSum;\n+\n+            // The index of the next point to be added to the resultSet.\n+            int nextPointIndex = -1;\n+\n+            // Sum through the squared min distances again, stopping when\n+            // sum >= r.\n+            double sum = 0.0;\n+            for (int i = 0; i < numPoints; i++) {\n+                if (!taken[i]) {\n+                    sum += minDistSquared[i];\n+                    if (sum >= r) {\n+                        nextPointIndex = i;\n+                        break;\n+                    }\n+                }\n+            }\n+\n+            // If it's not set to >= 0, the point wasn't found in the previous\n+            // for loop, probably because distances are extremely small.  Just pick\n+            // the last available point.\n+            if (nextPointIndex == -1) {\n+                for (int i = numPoints - 1; i >= 0; i--) {\n+                    if (!taken[i]) {\n+                        nextPointIndex = i;\n+                        break;\n+                    }\n+                }\n+            }\n+\n+            // We found one.\n+            if (nextPointIndex >= 0) {\n+\n+                final T p = pointList.get(nextPointIndex);\n+\n+                resultSet.add(new Cluster<T> (p));\n+\n+                // Mark it as taken.\n+                taken[nextPointIndex] = true;\n+\n+                if (resultSet.size() < k) {\n+                    // Now update elements of minDistSquared.  We only have to compute\n+                    // the distance to the new center to do this.\n+                    for (int j = 0; j < numPoints; j++) {\n+                        // Only have to worry about the points still not taken.\n+                        if (!taken[j]) {\n+                            double d = p.distanceFrom(pointList.get(j));\n+                            double d2 = d * d;\n+                            if (d2 < minDistSquared[j]) {\n+                                minDistSquared[j] = d2;\n+                            }\n+                        }\n+                    }\n+                }\n+\n+            } else {\n+                // None found --\n+                // Break from the while loop to prevent\n+                // an infinite loop.\n+                break;\n             }\n         }\n \n         return resultSet;\n-\n     }\n \n     /**", "timestamp": 1307291273, "metainfo": ""}