{"sha": "e4ed959be81916b9a1aa6cf68d80fdccf71bd7c8", "log": "Added missing throws declarations. JIRA: MATH-854.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/stat/descriptive/rank/Max.java\n+++ b/src/main/java/org/apache/commons/math3/stat/descriptive/rank/Max.java\n \n import java.io.Serializable;\n \n+import org.apache.commons.math3.exception.MathIllegalArgumentException;\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math3.util.MathUtils;\n      * to the {@code original}\n      *\n      * @param original the {@code Max} instance to copy\n+     * @throws NullArgumentException if original is null\n      */\n-    public Max(Max original) {\n+    public Max(Max original) throws NullArgumentException {\n         copy(original, this);\n     }\n \n      * the input array, or <code>Double.NaN</code> if the designated subarray\n      * is empty.\n      * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null or\n+     * Throws <code>MathIllegalArgumentException</code> if the array is null or\n      * the array index parameters are not valid.</p>\n      * <p>\n      * <ul>\n      * @param begin index of the first array element to include\n      * @param length the number of elements to include\n      * @return the maximum of the values or Double.NaN if length = 0\n-     * @throws IllegalArgumentException if the array is null or the array index\n+     * @throws MathIllegalArgumentException if the array is null or the array index\n      *  parameters are not valid\n      */\n     @Override\n-    public double evaluate(final double[] values, final int begin, final int length) {\n+    public double evaluate(final double[] values, final int begin, final int length)\n+    throws MathIllegalArgumentException {\n         double max = Double.NaN;\n         if (test(values, begin, length)) {\n             max = values[begin];\n     @Override\n     public Max copy() {\n         Max result = new Max();\n+        // No try-catch or advertised exception because args are non-null\n         copy(this, result);\n         return result;\n     }\n--- a/src/main/java/org/apache/commons/math3/stat/descriptive/rank/Median.java\n+++ b/src/main/java/org/apache/commons/math3/stat/descriptive/rank/Median.java\n package org.apache.commons.math3.stat.descriptive.rank;\n \n import java.io.Serializable;\n+\n+import org.apache.commons.math3.exception.NullArgumentException;\n \n \n /**\n      * Default constructor.\n      */\n     public Median() {\n+        // No try-catch or advertised exception - arg is valid\n         super(50.0);\n     }\n \n      * to the {@code original}\n      *\n      * @param original the {@code Median} instance to copy\n+     * @throws NullArgumentException if original is null \n      */\n-    public Median(Median original) {\n+    public Median(Median original) throws NullArgumentException {\n         super(original);\n     }\n \n--- a/src/main/java/org/apache/commons/math3/stat/descriptive/rank/Min.java\n+++ b/src/main/java/org/apache/commons/math3/stat/descriptive/rank/Min.java\n \n import java.io.Serializable;\n \n+import org.apache.commons.math3.exception.MathIllegalArgumentException;\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math3.util.MathUtils;\n      * to the {@code original}\n      *\n      * @param original the {@code Min} instance to copy\n+     * @throws NullArgumentException if original is null\n      */\n-    public Min(Min original) {\n+    public Min(Min original) throws NullArgumentException {\n         copy(original, this);\n     }\n \n      * the input array, or <code>Double.NaN</code> if the designated subarray\n      * is empty.\n      * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null or\n+     * Throws <code>MathIllegalArgumentException</code> if the array is null or\n      * the array index parameters are not valid.</p>\n      * <p>\n      * <ul>\n      * @param begin index of the first array element to include\n      * @param length the number of elements to include\n      * @return the minimum of the values or Double.NaN if length = 0\n-     * @throws IllegalArgumentException if the array is null or the array index\n+     * @throws MathIllegalArgumentException if the array is null or the array index\n      *  parameters are not valid\n      */\n     @Override\n-    public double evaluate(final double[] values,final int begin, final int length) {\n+    public double evaluate(final double[] values,final int begin, final int length)\n+    throws MathIllegalArgumentException {\n         double min = Double.NaN;\n         if (test(values, begin, length)) {\n             min = values[begin];\n     @Override\n     public Min copy() {\n         Min result = new Min();\n+        // No try-catch or advertised exception - args are non-null\n         copy(this, result);\n         return result;\n     }\n--- a/src/main/java/org/apache/commons/math3/stat/descriptive/rank/Percentile.java\n+++ b/src/main/java/org/apache/commons/math3/stat/descriptive/rank/Percentile.java\n import java.io.Serializable;\n import java.util.Arrays;\n \n+import org.apache.commons.math3.exception.MathIllegalArgumentException;\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.exception.OutOfRangeException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n      * value of 50.0.\n      */\n     public Percentile() {\n+        // No try-catch or advertised exception here - arg is valid\n         this(50.0);\n     }\n \n     /**\n      * Constructs a Percentile with the specific quantile value.\n      * @param p the quantile\n-     * @throws IllegalArgumentException  if p is not greater than 0 and less\n+     * @throws MathIllegalArgumentException  if p is not greater than 0 and less\n      * than or equal to 100\n      */\n-    public Percentile(final double p) {\n+    public Percentile(final double p) throws MathIllegalArgumentException {\n         setQuantile(p);\n         cachedPivots = null;\n     }\n      * to the {@code original}\n      *\n      * @param original the {@code Percentile} instance to copy\n-     */\n-    public Percentile(Percentile original) {\n+     * @throws NullArgumentException if original is null\n+     */\n+    public Percentile(Percentile original) throws NullArgumentException {\n         copy(original, this);\n     }\n \n \n     /** {@inheritDoc} */\n     @Override\n-    public void setData(final double[] values, final int begin, final int length) {\n+    public void setData(final double[] values, final int begin, final int length)\n+    throws MathIllegalArgumentException {\n         if (values == null) {\n             cachedPivots = null;\n         } else {\n      * Returns the result of evaluating the statistic over the stored data.\n      * <p>\n      * The stored array is the one which was set by previous calls to\n+     * {@link #setData(double[])}\n      * </p>\n      * @param p the percentile value to compute\n      * @return the value of the statistic applied to the stored data\n-     */\n-    public double evaluate(final double p) {\n+     * @throws MathIllegalArgumentException if p is not a valid quantile value\n+     * (p must be greater than 0 and less than or equal to 100)\n+     */\n+    public double evaluate(final double p) throws MathIllegalArgumentException {\n         return evaluate(getDataRef(), p);\n     }\n \n      * <code>0</code></li>\n      * <li>Returns (for any value of <code>p</code>) <code>values[0]</code>\n      *  if <code>values</code> has length <code>1</code></li>\n-     * <li>Throws <code>IllegalArgumentException</code> if <code>values</code>\n+     * <li>Throws <code>MathIllegalArgumentException</code> if <code>values</code>\n      * is null or p is not a valid quantile value (p must be greater than 0\n      * and less than or equal to 100) </li>\n      * </ul></p>\n      * @param values input array of values\n      * @param p the percentile value to compute\n      * @return the percentile value or Double.NaN if the array is empty\n-     * @throws IllegalArgumentException if <code>values</code> is null\n+     * @throws MathIllegalArgumentException if <code>values</code> is null\n      *     or p is invalid\n      */\n-    public double evaluate(final double[] values, final double p) {\n+    public double evaluate(final double[] values, final double p)\n+    throws MathIllegalArgumentException {\n         test(values, 0, 0);\n         return evaluate(values, 0, values.length, p);\n     }\n      * <li>Returns <code>Double.NaN</code> if <code>length = 0</code></li>\n      * <li>Returns (for any value of <code>quantile</code>)\n      * <code>values[begin]</code> if <code>length = 1 </code></li>\n-     * <li>Throws <code>IllegalArgumentException</code> if <code>values</code>\n-     * is null,  or <code>start</code> or <code>length</code>\n-     * is invalid</li>\n+     * <li>Throws <code>MathIllegalArgumentException</code> if <code>values</code>\n+     * is null, or <code>start</code> or <code>length</code> is invalid</li>\n      * </ul></p>\n      * <p>\n      * See {@link Percentile} for a description of the percentile estimation\n      * @param start index of the first array element to include\n      * @param length the number of elements to include\n      * @return the percentile value\n-     * @throws IllegalArgumentException if the parameters are not valid\n+     * @throws MathIllegalArgumentException if the parameters are not valid\n      *\n      */\n     @Override\n-    public double evaluate( final double[] values, final int start, final int length) {\n+    public double evaluate(final double[] values, final int start, final int length)\n+    throws MathIllegalArgumentException {\n         return evaluate(values, start, length, quantile);\n     }\n \n      * <li>Returns <code>Double.NaN</code> if <code>length = 0</code></li>\n      * <li>Returns (for any value of <code>p</code>) <code>values[begin]</code>\n      *  if <code>length = 1 </code></li>\n-     * <li>Throws <code>IllegalArgumentException</code> if <code>values</code>\n+     * <li>Throws <code>MathIllegalArgumentException</code> if <code>values</code>\n      *  is null , <code>begin</code> or <code>length</code> is invalid, or\n      * <code>p</code> is not a valid quantile value (p must be greater than 0\n      * and less than or equal to 100)</li>\n      * @param begin  the first (0-based) element to include in the computation\n      * @param length  the number of array elements to include\n      * @return  the percentile value\n-     * @throws IllegalArgumentException if the parameters are not valid or the\n+     * @throws MathIllegalArgumentException if the parameters are not valid or the\n      * input array is null\n      */\n     public double evaluate(final double[] values, final int begin,\n-            final int length, final double p) {\n+            final int length, final double p) throws MathIllegalArgumentException {\n \n         test(values, begin, length);\n \n         if ((p > 100) || (p <= 0)) {\n-            throw new OutOfRangeException(LocalizedFormats.OUT_OF_BOUNDS_QUANTILE_VALUE, p, 0, 100);\n+            throw new OutOfRangeException(\n+                    LocalizedFormats.OUT_OF_BOUNDS_QUANTILE_VALUE, p, 0, 100);\n         }\n         if (length == 0) {\n             return Double.NaN;\n      * computed when evaluate() is called with no quantile argument).\n      *\n      * @param p a value between 0 < p <= 100\n-     * @throws IllegalArgumentException  if p is not greater than 0 and less\n+     * @throws MathIllegalArgumentException  if p is not greater than 0 and less\n      * than or equal to 100\n      */\n-    public void setQuantile(final double p) {\n+    public void setQuantile(final double p) throws MathIllegalArgumentException {\n         if (p <= 0 || p > 100) {\n-            throw new OutOfRangeException(LocalizedFormats.OUT_OF_BOUNDS_QUANTILE_VALUE, p, 0, 100);\n+            throw new OutOfRangeException(\n+                    LocalizedFormats.OUT_OF_BOUNDS_QUANTILE_VALUE, p, 0, 100);\n         }\n         quantile = p;\n     }\n     @Override\n     public Percentile copy() {\n         Percentile result = new Percentile();\n+        //No try-catch or advertised exception because args are guaranteed non-null\n         copy(this, result);\n         return result;\n     }", "timestamp": 1347209007, "metainfo": ""}