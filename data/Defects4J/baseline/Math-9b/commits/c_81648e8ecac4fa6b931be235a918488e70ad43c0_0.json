{"sha": "81648e8ecac4fa6b931be235a918488e70ad43c0", "log": "MATH-515 \"copyOf\" methods (for \"int\" and \"double\" arrays).   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n      * @return the copied array.\n      */\n      public static int[] copyOf(int[] source) {\n-         final int len = source.length;\n+         return copyOf(source, source.length);\n+     }\n+\n+    /**\n+     * Creates a copy of the {@code source} array.\n+     *\n+     * @param source Array to be copied.\n+     * @return the copied array.\n+     */\n+     public static double[] copyOf(double[] source) {\n+         return copyOf(source, source.length);\n+     }\n+\n+    /**\n+     * Creates a copy of the {@code source} array.\n+     *\n+     * @param source Array to be copied.\n+     * @param len Number of entries to copy. If smaller then the source\n+     * length, the copy will be truncated, if larger it will padded with\n+     * zeroes.\n+     * @return the copied array.\n+     */\n+    public static int[] copyOf(int[] source, int len) {\n          final int[] output = new int[len];\n-         System.arraycopy(source, 0, output, 0, len);\n+         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));\n          return output;\n      }\n \n      * Creates a copy of the {@code source} array.\n      *\n      * @param source Array to be copied.\n+     * @param len Number of entries to copy. If smaller then the source\n+     * length, the copy will be truncated, if larger it will padded with\n+     * zeroes.\n      * @return the copied array.\n      */\n-     public static double[] copyOf(double[] source) {\n-         final int len = source.length;\n+    public static double[] copyOf(double[] source, int len) {\n          final double[] output = new double[len];\n-         System.arraycopy(source, 0, output, 0, len);\n+         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));\n          return output;\n      }\n }\n--- a/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n         }\n     }\n \n+    public void testCopyOfInt2() {\n+        final int[] source = { Integer.MIN_VALUE,\n+                               -1, 0, 1, 3, 113, 4769,\n+                               Integer.MAX_VALUE };\n+        final int offset = 3;\n+        final int[] dest = MathUtils.copyOf(source, source.length - offset);\n+\n+        assertEquals(dest.length, source.length - offset);\n+        for (int i = 0; i < source.length - offset; i++) {\n+            assertEquals(source[i], dest[i]);\n+        }\n+    }\n+\n+    public void testCopyOfInt3() {\n+        final int[] source = { Integer.MIN_VALUE,\n+                               -1, 0, 1, 3, 113, 4769,\n+                               Integer.MAX_VALUE };\n+        final int offset = 3;\n+        final int[] dest = MathUtils.copyOf(source, source.length + offset);\n+\n+        assertEquals(dest.length, source.length + offset);\n+        for (int i = 0; i < source.length; i++) {\n+            assertEquals(source[i], dest[i]);\n+        }\n+        for (int i = source.length; i < source.length + offset; i++) {\n+            assertEquals(0, dest[i], 0);\n+        }\n+    }\n+\n     public void testCopyOfDouble() {\n         final double[] source = { Double.NEGATIVE_INFINITY,\n                                   -Double.MAX_VALUE,\n             assertEquals(source[i], dest[i], 0);\n         }\n     }\n+\n+    public void testCopyOfDouble2() {\n+        final double[] source = { Double.NEGATIVE_INFINITY,\n+                                  -Double.MAX_VALUE,\n+                                  -1, 0,\n+                                  Double.MIN_VALUE,\n+                                  Math.ulp(1d),\n+                                  1, 3, 113, 4769,\n+                                  Double.MAX_VALUE,\n+                                  Double.POSITIVE_INFINITY };\n+        final int offset = 3;\n+        final double[] dest = MathUtils.copyOf(source, source.length - offset);\n+\n+        assertEquals(dest.length, source.length - offset);\n+        for (int i = 0; i < source.length - offset; i++) {\n+            assertEquals(source[i], dest[i], 0);\n+        }\n+    }\n+\n+    public void testCopyOfDouble3() {\n+        final double[] source = { Double.NEGATIVE_INFINITY,\n+                                  -Double.MAX_VALUE,\n+                                  -1, 0,\n+                                  Double.MIN_VALUE,\n+                                  Math.ulp(1d),\n+                                  1, 3, 113, 4769,\n+                                  Double.MAX_VALUE,\n+                                  Double.POSITIVE_INFINITY };\n+        final int offset = 3;\n+        final double[] dest = MathUtils.copyOf(source, source.length + offset);\n+\n+        assertEquals(dest.length, source.length + offset);\n+        for (int i = 0; i < source.length; i++) {\n+            assertEquals(source[i], dest[i], 0);\n+        }\n+        for (int i = source.length; i < source.length + offset; i++) {\n+            assertEquals(0, dest[i], 0);\n+        }\n+    }\n }", "timestamp": 1297946633, "metainfo": ""}