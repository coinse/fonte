{"sha": "07611165b6176b6e3e6d5ac6ca052a102f10e3c4", "log": "MATH-868 MATH-879 \"lambda\" and \"inputSigma\" should be passed to \"optimize\" as arguments of type \"OptimizationData\". Deprecated constructors. Updated unit tests.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n import org.apache.commons.math3.analysis.MultivariateFunction;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.NotPositiveException;\n+import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n import org.apache.commons.math3.exception.OutOfRangeException;\n import org.apache.commons.math3.exception.TooManyEvaluationsException;\n import org.apache.commons.math3.linear.Array2DRowRealMatrix;\n \n     /**\n      * Default constructor, uses default parameters\n+     *\n+     * @deprecated As of version 3.1: Parameter {@code lambda} must be\n+     * passed with the call to {@link #optimize(int,MultivariateFunction,GoalType,OptimizationData[])\n+     * optimize} (whereas in the current code it is set to an undocumented value).\n      */\n     public CMAESOptimizer() {\n         this(0);\n \n     /**\n      * @param lambda Population size.\n+     * @deprecated As of version 3.1: Parameter {@code lambda} must be\n+     * passed with the call to {@link #optimize(int,MultivariateFunction,GoalType,OptimizationData[])\n+     * optimize} (whereas in the current code it is set to an undocumented value)..\n      */\n     public CMAESOptimizer(int lambda) {\n-        this(lambda, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,\n+        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,\n              DEFAULT_ISACTIVECMA, DEFAULT_DIAGONALONLY,\n              DEFAULT_CHECKFEASABLECOUNT, DEFAULT_RANDOMGENERATOR,\n              false, null);\n      * @param lambda Population size.\n      * @param inputSigma Initial standard deviations to sample new points\n      * around the initial guess.\n-     * @deprecated As of version 3.1: Parameter {@code inputSigma} must be\n+     * @deprecated As of version 3.1: Parameters {@code lambda} and {@code inputSigma} must be\n      * passed with the call to {@link #optimize(int,MultivariateFunction,GoalType,OptimizationData[])\n      * optimize}.\n      */\n      * @param random Random generator.\n      * @param generateStatistics Whether statistic data is collected.\n      * @param checker Convergence checker.\n-     * @deprecated As of version 3.1: Parameter {@code inputSigma} must be\n+     * @deprecated As of version 3.1: Parameters {@code lambda} and {@code inputSigma} must be\n      * passed with the call to {@link #optimize(int,MultivariateFunction,GoalType,OptimizationData[])\n      * optimize}.\n      */\n     }\n \n     /**\n-     * @param lambda Population size.\n      * @param maxIterations Maximal number of iterations.\n      * @param stopFitness Whether to stop if objective function value is smaller than\n      * {@code stopFitness}.\n      * @param random Random generator.\n      * @param generateStatistics Whether statistic data is collected.\n      * @param checker Convergence checker.\n-     */\n-    public CMAESOptimizer(int lambda,\n-                          int maxIterations,\n+     *\n+     * @since 3.1\n+     */\n+    public CMAESOptimizer(int maxIterations,\n                           double stopFitness,\n                           boolean isActiveCMA,\n                           int diagonalOnly,\n                           boolean generateStatistics,\n                           ConvergenceChecker<PointValuePair> checker) {\n         super(checker);\n-        this.lambda = lambda;\n         this.maxIterations = maxIterations;\n         this.stopFitness = stopFitness;\n         this.isActiveCMA = isActiveCMA;\n \n         /**\n          * @param s Sigma values.\n+         * @throws NotPositiveException if any of the array entries is smaller\n+         * than zero.\n          */\n-        public Sigma(double[] s) {\n+        public Sigma(double[] s)\n+            throws NotPositiveException {\n+            for (int i = 0; i < s.length; i++) {\n+                if (s[i] < 0) {\n+                    throw new NotPositiveException(s[i]);\n+                }\n+            }\n+\n             sigma = s.clone();\n         }\n \n          */\n         public double[] getSigma() {\n             return sigma.clone();\n+        }\n+    }\n+\n+    /**\n+     * Population size.\n+     * The number of offspring is the primary strategy parameter.\n+     * In the absence of better clues, a good default could be an\n+     * integer close to {@code 4 + 3 ln(n)}, where {@code n} is the\n+     * number of optimized parameters.\n+     * Increasing the population size improves global search properties\n+     * at the expense of speed (which in general decreases at most\n+     * linearly with increasing population size).\n+     */\n+    public static class PopulationSize implements OptimizationData {\n+        /** Population size. */\n+        private final int lambda;\n+\n+        /**\n+         * @param size Population size.\n+         * @throws NotStrictlyPositiveException if {@code size <= 0}.\n+         */\n+        public PopulationSize(int size)\n+            throws NotStrictlyPositiveException {\n+            if (size <= 0) {\n+                throw new NotStrictlyPositiveException(size);\n+            }\n+            lambda = size;\n+        }\n+\n+        /**\n+         * @return the population size.\n+         */\n+        public int getPopulationSize() {\n+            return lambda;\n         }\n     }\n \n      * <ul>\n      *  <li>{@link org.apache.commons.math3.optimization.InitialGuess InitialGuess}</li>\n      *  <li>{@link Sigma}</li>\n+     *  <li>{@link PopulationSize}</li>\n      * </ul>\n      * @return the point/value pair giving the optimal value for objective\n      * function.\n      * @param optData Optimization data. The following data will be looked for:\n      * <ul>\n      *  <li>{@link Sigma}</li>\n+     *  <li>{@link PopulationSize}</li>\n      * </ul>\n      */\n     private void parseOptimizationData(OptimizationData... optData) {\n                 inputSigma = ((Sigma) data).getSigma();\n                 continue;\n             }\n+            if (data instanceof PopulationSize) {\n+                lambda = ((PopulationSize) data).getPopulationSize();\n+                continue;\n+            }\n         }\n     }\n \n             }\n             for (int i = 0; i < init.length; i++) {\n                 if (inputSigma[i] < 0) {\n+                    // XXX Remove this block in 4.0 (check performed in \"Sigma\" class).\n                     throw new NotPositiveException(inputSigma[i]);\n                 }\n                 if (inputSigma[i] > uB[i] - lB[i]) {\n      */\n     private void initializeCMA(double[] guess) {\n         if (lambda <= 0) {\n+            // XXX Line below to replace the current one in 4.0 (MATH-879).\n+            // throw new NotStrictlyPositiveException(lambda);\n             lambda = 4 + (int) (3 * Math.log(dimension));\n         }\n         // initialize sigma\n         final double[][] sigmaArray = new double[guess.length][1];\n         for (int i = 0; i < guess.length; i++) {\n+            // XXX Line below to replace the current one in 4.0 (MATH-868).\n+            // sigmaArray[i][0] = inputSigma[i];\n             sigmaArray[i][0] = inputSigma == null ? 0.3 : inputSigma[i];\n         }\n         final RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);\n--- a/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java\n     @Test(expected = NumberIsTooLargeException.class)\n     public void testInitOutofbounds1() {\n         double[] startPoint = point(DIM,3);\n-        double[] insigma = null;\n+        double[] insigma = point(DIM, 0.3);\n         double[][] boundaries = boundaries(DIM,-1,2);\n         PointValuePair expected =\n             new PointValuePair(point(DIM,1.0),0.0);\n     @Test(expected = NumberIsTooSmallException.class)\n     public void testInitOutofbounds2() {\n         double[] startPoint = point(DIM, -2);\n-        double[] insigma = null;\n+        double[] insigma = point(DIM, 0.3);\n         double[][] boundaries = boundaries(DIM,-1,2);\n         PointValuePair expected =\n             new PointValuePair(point(DIM,1.0),0.0);\n     @Test(expected = DimensionMismatchException.class)\n     public void testBoundariesDimensionMismatch() {\n         double[] startPoint = point(DIM,0.5);\n-        double[] insigma = null;\n+        double[] insigma = point(DIM, 0.3);\n         double[][] boundaries = boundaries(DIM+1,-1,2);\n         PointValuePair expected =\n             new PointValuePair(point(DIM,1.0),0.0);\n     @Test(expected = DimensionMismatchException.class)\n     public void testInputSigmaDimensionMismatch() {\n         double[] startPoint = point(DIM,0.5);\n-        double[] insigma = point(DIM+1,-0.5);\n+        double[] insigma = point(DIM + 1, 0.5);\n         double[][] boundaries = null;\n         PointValuePair expected =\n             new PointValuePair(point(DIM,1.0),0.0);\n             PointValuePair expected) {\n         int dim = startPoint.length;\n         // test diagonalOnly = 0 - slow but normally fewer feval#\n-        CMAESOptimizer optim = new CMAESOptimizer(lambda, inSigma, 30000,\n-                                                  stopValue, isActive, diagonalOnly,\n-                                                  0, new MersenneTwister(), false);\n+        CMAESOptimizer optim = new CMAESOptimizer(30000, stopValue, isActive, diagonalOnly,\n+                                                  0, new MersenneTwister(), false, null);\n         final double[] lB = boundaries == null ? null : boundaries[0];\n         final double[] uB = boundaries == null ? null : boundaries[1];\n         PointValuePair result = boundaries == null ?\n             optim.optimize(maxEvaluations, func, goal,\n-                           new InitialGuess(startPoint)) :\n+                           new InitialGuess(startPoint),\n+                           new CMAESOptimizer.Sigma(inSigma),\n+                           new CMAESOptimizer.PopulationSize(lambda)) :\n             optim.optimize(maxEvaluations, func, goal,\n                            new InitialGuess(startPoint),\n-                           new SimpleBounds(lB, uB));\n+                           new SimpleBounds(lB, uB),\n+                           new CMAESOptimizer.Sigma(inSigma),\n+                           new CMAESOptimizer.PopulationSize(lambda));\n         // System.out.println(\"sol=\" + Arrays.toString(result.getPoint()));\n         Assert.assertEquals(expected.getValue(), result.getValue(), fTol);\n         for (int i = 0; i < dim; i++) {", "timestamp": 1350656416, "metainfo": ""}