{"sha": "cf19ba4eb0dc15c25952ec10e0d1dc0ed076453a", "log": "Added preMultiply(Matrix) tests and modified preMultiply(double[]) tests to match new interface. Added R-verified determinant tests. Added R-verified lu decompostion tests and tests verifying that lu decompositions satisfy the lu matrix equation.   ", "commit": "\n--- a/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n /**\n  * Test cases for the {@link RealMatrixImpl} class.\n  *\n- * @version $Revision: 1.12 $ $Date: 2004/04/03 22:19:24 $\n+ * @version $Revision: 1.13 $ $Date: 2004/04/08 07:08:22 $\n  */\n \n public final class RealMatrixImplTest extends TestCase {\n     \n     private double[][] testData = { {1d,2d,3d}, {2d,5d,3d}, {1d,0d,8d} };\n+    private double[][] testDataLU = {{2d, 5d, 3d}, {.5d, -2.5d, 6.5d}, {0.5d, 0.2d, .2d}};\n     private double[][] testDataPlus2 = { {3d,4d,5d}, {4d,7d,5d}, {3d,2d,10d} };\n     private double[][] testDataMinus = { {-1d,-2d,-3d}, {-2d,-5d,-3d}, \n        {-1d,0d,-8d} };\n     private double[] testDataCol3 = {3d,3d,8d};\n     private double[][] testDataInv = \n         { {-40d,16d,9d}, {13d,-5d,-3d}, {5d,-2d,-1d} };\n-    private double[][] preMultTest = {{8,12,33}};\n+    private double[] preMultTest = {8,12,33};\n     private double[][] testData2 ={ {1d,2d,3d}, {2d,5d,3d}};\n     private double[][] testData2T = { {1d,2d}, {2d,5d}, {3d,3d}};\n     private double[][] testDataPlusInv = \n         { {-39d,18d,12d}, {15d,0d,0d}, {6d,-2d,7d} };\n     private double[][] id = { {1d,0d,0d}, {0d,1d,0d}, {0d,0d,1d} };\n     private double[][] luData = { {2d,3d,3d}, {0d,5d,7d}, {6d,9d,8d} };\n+    private double[][] luDataLUDecomposition = { {6d,9d,8d}, {0d,5d,7d}, {0.33333333333333,0d,0.33333333333333} };\n     private double[][] singular = { {2d,3d}, {2d,3d} };\n     private double[][] bigSingular = {{1d,2d,3d,4d}, {2d,5d,3d,4d},\n         {7d,3d,256d,1930d}, {3d,7d,6d,8d}}; // 4th row = 1st + 2nd\n     private double[][] detData = { {1d,2d,3d}, {4d,5d,6d}, {7d,8d,10d} };\n+    private double[][] detData2 = { {1d, 3d}, {2d, 4d}};\n     private double[] testVector = {1,2,3};\n     private double[] testVector2 = {1,2,3,4};\n     private double entryTolerance = 10E-16;\n             ;\n         } \n         try {\n-            (new RealMatrixImpl(testData2)).LUDecompose();\n+            (new RealMatrixImpl(testData2)).luDecompose();\n             fail(\"Expecting InvalidMatrixException\");\n         } catch (InvalidMatrixException ex) {\n             ;\n         assertEquals(\"singular determinant\",0,m.getDeterminant(),0);\n         m = new RealMatrixImpl(detData);\n         assertEquals(\"nonsingular test\",-3d,m.getDeterminant(),normTolerance);\n+        \n+        // Examples verified against R (version 1.8.1, Red Hat Linux 9)\n+        m = new RealMatrixImpl(detData2);\n+        assertEquals(\"nonsingular R test 1\",-2d,m.getDeterminant(),normTolerance);\n+        m = new RealMatrixImpl(testData);\n+        assertEquals(\"nonsingular  R test 2\",-1d,m.getDeterminant(),normTolerance);\n+\n         try {\n             double a = new RealMatrixImpl(testData2).getDeterminant();\n             fail(\"Expecting InvalidMatrixException\");\n         assertClose(\"transpose\",mt,m.transpose(),normTolerance);\n     }\n     \n-    /** test preMultiply */\n+    /** test preMultiply by vector */\n+    public void testPremultiplyVector() {\n+        RealMatrix m = new RealMatrixImpl(testData);\n+        assertClose(\"premultiply\",m.preMultiply(testVector),preMultTest,normTolerance);\n+        m = new RealMatrixImpl(bigSingular);\n+        try {\n+            m.preMultiply(testVector);\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n     public void testPremultiply() {\n-        RealMatrix m = new RealMatrixImpl(testData);\n-        RealMatrix mp = new RealMatrixImpl(preMultTest);\n-        assertClose(\"premultiply\",m.preMultiply(testVector),mp,normTolerance);\n-        m = new RealMatrixImpl(bigSingular);\n-        try {\n-            RealMatrix x = m.preMultiply(testVector);\n-            fail(\"expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            ;\n-        }\n+        RealMatrix m3 = new RealMatrixImpl(d3);   \n+        RealMatrix m4 = new RealMatrixImpl(d4);\n+        RealMatrix m5 = new RealMatrixImpl(d5);\n+        assertClose(\"m3*m4=m5\", m4.preMultiply(m3), m5, entryTolerance);\n+        \n+        RealMatrixImpl m = new RealMatrixImpl(testData);\n+        RealMatrixImpl mInv = new RealMatrixImpl(testDataInv);\n+        RealMatrixImpl identity = new RealMatrixImpl(id);\n+        RealMatrixImpl m2 = new RealMatrixImpl(testData2);\n+        assertClose(\"inverse multiply\",m.preMultiply(mInv),\n+                identity,entryTolerance);\n+        assertClose(\"inverse multiply\",mInv.preMultiply(m),\n+                identity,entryTolerance);\n+        assertClose(\"identity multiply\",m.preMultiply(identity),\n+                m,entryTolerance);\n+        assertClose(\"identity multiply\",identity.preMultiply(mInv),\n+                mInv,entryTolerance);\n+        try {\n+            RealMatrix a = m.preMultiply(new RealMatrixImpl(bigSingular));\n+            fail(\"Expecting illegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }      \n     }\n     \n     public void testGetVectors() {\n         }\n     }\n         \n-    \n-    //--------------- -----------------Private methods\n+    public void testLUDecomposition() throws Exception {\n+        RealMatrixImpl m = new RealMatrixImpl(testData);\n+        RealMatrix lu = m.getLUMatrix();\n+        assertClose(\"LU decomposition\", lu, (RealMatrix) new RealMatrixImpl(testDataLU), normTolerance);\n+        verifyDecomposition(m, lu);\n+        m = new RealMatrixImpl(luData);\n+        lu = m.getLUMatrix();\n+        assertClose(\"LU decomposition\", lu, (RealMatrix) new RealMatrixImpl(luDataLUDecomposition), normTolerance);\n+        verifyDecomposition(m, lu);\n+        m = new RealMatrixImpl(testDataMinus);\n+        lu = m.getLUMatrix();\n+        verifyDecomposition(m, lu);\n+        m = new RealMatrixImpl(id);\n+        lu = m.getLUMatrix();\n+        verifyDecomposition(m, lu);\n+        try {\n+            m = new RealMatrixImpl(bigSingular); // singular\n+            lu = m.getLUMatrix();\n+            fail(\"Expecting InvalidMatrixException\");\n+        } catch (InvalidMatrixException ex) {\n+            // expected\n+        }\n+        try {\n+            m = new RealMatrixImpl(testData2);  // not square\n+            lu = m.getLUMatrix();\n+            fail(\"Expecting InvalidMatrixException\");\n+        } catch (InvalidMatrixException ex) {\n+            // expected\n+        }\n+    }\n+    \n+    //--------------- -----------------Protected methods\n         \n     /** verifies that two matrices are close (1-norm) */              \n-    private void assertClose(String msg, RealMatrix m, RealMatrix n,\n+    protected void assertClose(String msg, RealMatrix m, RealMatrix n,\n         double tolerance) {\n         assertTrue(msg,m.subtract(n).getNorm() < tolerance);\n     }\n     \n     /** verifies that two vectors are close (sup norm) */\n-    private void assertClose(String msg, double[] m, double[] n,\n+    protected void assertClose(String msg, double[] m, double[] n,\n         double tolerance) {\n         if (m.length != n.length) {\n             fail(\"vectors not same length\");\n                 m[i],n[i],tolerance);\n         }\n     }\n+    \n+    /** extracts the l  and u matrices from compact lu representation */\n+    protected void splitLU(RealMatrix lu, RealMatrix lower, RealMatrix upper) throws InvalidMatrixException {\n+        if (!lu.isSquare() || !lower.isSquare() || !upper.isSquare() ||\n+                lower.getRowDimension() != upper.getRowDimension() \n+                || lower.getRowDimension() != lu.getRowDimension()) {\n+            throw new InvalidMatrixException(\"incorrect dimensions\");\n+        }    \n+        int n = lu.getRowDimension();\n+        for (int i = 1; i <= n; i++) {\n+            for (int j = 1; j <= n; j++) {\n+                if (j < i) {\n+                    lower.setEntry(i, j, lu.getEntry(i, j));\n+                    upper.setEntry(i, j, 0d);\n+                } else if (i == j) {\n+                    lower.setEntry(i, j, 1d);\n+                    upper.setEntry(i, j, lu.getEntry(i, j));\n+                } else {\n+                    lower.setEntry(i, j, 0d);\n+                    upper.setEntry(i, j, lu.getEntry(i, j));\n+                }   \n+            }\n+        }\n+    }\n+    \n+    /** Returns the result of applying the given row permutation to the matrix */\n+    protected RealMatrix permuteRows(RealMatrix matrix, int[] permutation) {\n+        if (!matrix.isSquare() || matrix.getRowDimension() != permutation.length) {\n+            throw new IllegalArgumentException(\"dimension mismatch\");\n+        }\n+        int n = matrix.getRowDimension();\n+        RealMatrix out = new RealMatrixImpl(n, n);\n+        for (int i =1; i <= n; i++) {\n+            for (int j = 1; j <= n; j++) {\n+                out.setEntry(i, j, matrix.getEntry(permutation[i -1] + 1, j));\n+            }\n+        }\n+        return out;\n+    }\n+    \n+    /** Extracts l and u matrices from lu and verifies that matrix = l times u modulo permutation */\n+    protected void verifyDecomposition(RealMatrix matrix, RealMatrix lu) throws Exception{\n+        int n = matrix.getRowDimension();\n+        RealMatrix lower = new RealMatrixImpl(n, n);\n+        RealMatrix upper = new RealMatrixImpl(n, n);\n+        splitLU(lu, lower, upper);\n+        int[] permutation = ((RealMatrixImpl) matrix).getPermutation();\n+        RealMatrix permuted = permuteRows(matrix, permutation);\n+        assertClose(\"lu decomposition does not work\", permuted, lower.multiply(upper), normTolerance);\n+    }\n+      \n     \n     /** Useful for debugging */\n     private void dumpMatrix(RealMatrix m) {", "timestamp": 1081408102, "metainfo": ""}