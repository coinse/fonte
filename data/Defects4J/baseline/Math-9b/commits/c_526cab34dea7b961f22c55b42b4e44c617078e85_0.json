{"sha": "526cab34dea7b961f22c55b42b4e44c617078e85", "log": "MATH-376   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java\n  * configuration from a unit hypercube. Each call to {@link\n  * #optimize(MultivariateRealFunction, GoalType, double[]) optimize} will reuse\n  * the current start configuration and move it such that its first vertex\n- * is at the provided start point of the optimization. If the same optimizer\n- * is used to solve different problems and the number of parameters change,\n- * the start configuration <em>must</em> be reset or a dimension mismatch\n- * will occur.</p>\n+ * is at the provided start point of the optimization. If the {@code optimize}\n+ * method is called to solve a different problem and the number of parameters\n+ * change, the start configuration will be reset to a default one with the\n+ * appropriate dimensions.</p>\n  *\n  * <p>If {@link #setConvergenceChecker(RealConvergenceChecker)} is not called,\n  * a default {@link SimpleScalarValueChecker} is used.</p>\n         throws FunctionEvaluationException, OptimizationException,\n         IllegalArgumentException {\n \n-        if (startConfiguration == null) {\n+        if (startConfiguration == null\n+            || startConfiguration.length != startPoint.length) {\n             // no initial configuration has been set up for simplex\n             // build a default one from a unit hypercube\n             final double[] unit = new double[startPoint.length];", "timestamp": 1276696398, "metainfo": ""}