{"sha": "e6e7b06e255366ce5d9b2dd1bb7d6fe60360053a", "log": "Refactored statistical aggregates to separate stored, storeless implementations. Changed internal sample size counters to longs.   ", "commit": "\n--- a/src/java/org/apache/commons/math/random/EmpiricalDistribution.java\n+++ b/src/java/org/apache/commons/math/random/EmpiricalDistribution.java\n import java.net.URL;\n import java.util.ArrayList;\n \n-import org.apache.commons.math.stat.DescriptiveStatistics;\n+import org.apache.commons.math.stat.SummaryStatistics;\n \n /**\n  * Represents an <a href=\"http://random.mat.sbg.ac.at/~ste/dipl/node11.html\">\n  * build grouped frequnecy histograms representing the input data or to\n  * generate random values \"like\" those in the input file -- i.e., the values\n  * generated will follow the distribution of the values in the file.\n- * @version $Revision: 1.12 $ $Date: 2004/01/15 05:22:08 $\n+ * @version $Revision: 1.13 $ $Date: 2004/01/25 21:30:41 $\n  */\n public interface EmpiricalDistribution {\n     \n      * @return the sample statistics\n      * @throws IllegalStateException if the distribution has not been loaded\n      */\n-    DescriptiveStatistics getSampleStats() throws IllegalStateException;\n+    SummaryStatistics getSampleStats() throws IllegalStateException;\n     \n     /** \n      * Loads a saved distribution from a file.\n--- a/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n import java.net.URL;\n \n import org.apache.commons.math.stat.DescriptiveStatistics;\n-import org.apache.commons.math.stat.StorelessDescriptiveStatisticsImpl;\n+import org.apache.commons.math.stat.SummaryStatistics;\n \n /**\n  * Implements <code>EmpiricalDistribution</code> interface.  This implementation\n  *    entry per line.</li>\n  * </ol></p>\n  *\n- * @version $Revision: 1.13 $ $Date: 2004/01/15 05:22:08 $\n+ * @version $Revision: 1.14 $ $Date: 2004/01/25 21:30:41 $\n  */\n public class EmpiricalDistributionImpl implements Serializable, EmpiricalDistribution {\n \n     private ArrayList binStats = null;\n     \n     /** Sample statistics */\n-    DescriptiveStatistics sampleStats = null;\n+    SummaryStatistics sampleStats = null;\n     \n     /** number of bins */\n     private int binCount = 1000;\n     private void computeStats(BufferedReader in) throws IOException {\n         String str = null;\n         double val = 0.0;\n-        sampleStats = new StorelessDescriptiveStatisticsImpl();\n+        sampleStats = SummaryStatistics.newInstance();\n         while ((str = in.readLine()) != null) {\n             val = new Double(str).doubleValue();\n             sampleStats.addValue(val);\n             binStats.clear();\n         }\n         for (int i = 0; i < binCount; i++) {\n-            DescriptiveStatistics stats = new StorelessDescriptiveStatisticsImpl();\n+            SummaryStatistics stats = SummaryStatistics.newInstance();\n             binStats.add(i,stats);\n         }\n         \n                 }\n                 if (val <= binUpperBounds[i]) {\n                     found = true;\n-                    DescriptiveStatistics stats = (DescriptiveStatistics)binStats.get(i);\n+                    SummaryStatistics stats = (SummaryStatistics)binStats.get(i);\n                     stats.addValue(val);\n                 }\n                 i++;\n         // Assign upperBounds based on bin counts\n         upperBounds = new double[binCount];\n         upperBounds[0] =\n-        ((double)((DescriptiveStatistics)binStats.get(0)).getN())/\n+        ((double)((SummaryStatistics)binStats.get(0)).getN())/\n         (double)sampleStats.getN();\n         for (int i = 1; i < binCount-1; i++) {\n             upperBounds[i] = upperBounds[i-1] +\n-            ((double)((DescriptiveStatistics)binStats.get(i)).getN())/\n+            ((double)((SummaryStatistics)binStats.get(i)).getN())/\n             (double)sampleStats.getN();\n         }\n         upperBounds[binCount-1] = 1.0d;\n         // Use this to select the bin and generate a Gaussian within the bin\n         for (int i = 0; i < binCount; i++) {\n            if (x <= upperBounds[i]) {\n-               DescriptiveStatistics stats = (DescriptiveStatistics)binStats.get(i);\n+               SummaryStatistics stats = (SummaryStatistics)binStats.get(i);\n                if (stats.getN() > 0) { \n                    if (stats.getStandardDeviation() > 0) {  // more than one obs \n                         return randomData.nextGaussian\n        throw new UnsupportedOperationException(\"Not Implemented yet :-(\");\n     }\n         \n-    public DescriptiveStatistics getSampleStats() {\n+    public SummaryStatistics getSampleStats() {\n         return sampleStats;\n     }\n     \n--- a/src/java/org/apache/commons/math/random/ValueServer.java\n+++ b/src/java/org/apache/commons/math/random/ValueServer.java\n  *                       standard deviation = <code>sigma</code></li>\n  * <li> CONSTANT_MODE -- returns <code>mu</code> every time.</li></ul> \n  *\n- * @version $Revision: 1.10 $ $Date: 2004/01/15 05:22:08 $\n+ * @version $Revision: 1.11 $ $Date: 2004/01/25 21:30:41 $\n  *\n  */\n public class ValueServer implements Serializable {\n      * Sets the <code>valuesFileURL</code> using a string URL representation\n      * @param url String representation for new valuesFileURL.\n      * @throws MalformedURLException if url is not well formed\n-     * @deprecated use {@link #setValuesFileURL(URL)} to be removed before 0.1 release\n      */\n     public void setValuesFileURL(String url) throws MalformedURLException {\n         this.valuesFileURL = new URL(url);\n--- a/src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java\n \n import java.util.Arrays;\n \n+import org.apache.commons.math.stat.univariate.moment.GeometricMean;\n+import org.apache.commons.math.stat.univariate.moment.Kurtosis;\n+import org.apache.commons.math.stat.univariate.moment.Mean;\n+import org.apache.commons.math.stat.univariate.moment.Skewness;\n+import org.apache.commons.math.stat.univariate.moment.Variance;\n+import org.apache.commons.math.stat.univariate.rank.Max;\n+import org.apache.commons.math.stat.univariate.rank.Min;\n import org.apache.commons.math.stat.univariate.rank.Percentile;\n+import org.apache.commons.math.stat.univariate.summary.Sum;\n+import org.apache.commons.math.stat.univariate.summary.SumOfSquares;\n+import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n \n /**\n- * Extends {@link AbstractStorelessDescriptiveStatistics} to include univariate statistics\n- * that may require access to the full set of sample values. \n- * @version $Revision: 1.2 $ $Date: 2004/01/18 03:45:02 $\n+ * Abstract superclass for DescriptiveStatistics implementations. \n+ * \n+ * @version $Revision: 1.3 $ $Date: 2004/01/25 21:30:41 $\n  */\n public abstract class AbstractDescriptiveStatistics\n-    extends AbstractStorelessDescriptiveStatistics {\n-\n-    /** Percentile */\n-    protected Percentile percentile = new Percentile(50);\n+    extends DescriptiveStatistics {\n         \n     /**\n      * Create an AbstractDescriptiveStatistics\n      */\n     public AbstractDescriptiveStatistics() {\n-        super();\n     }\n \n     /**\n      * Create an AbstractDescriptiveStatistics with a specific Window\n      * @param window WindowSIze for stat calculation\n      */\n-    public AbstractDescriptiveStatistics(int window) {\n-        super(window);\n-    }\n-\n-    /**\n-     * @see org.apache.commons.math.stat.DescriptiveStatistics#getPercentile(double)\n+    public AbstractDescriptiveStatistics(int window)  {\n+    \tsetWindowSize(window);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.DescriptiveStatistics#getSum()\n+     */\n+    public double getSum() {\n+    \treturn apply(new Sum());\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.DescriptiveStatistics#getSumsq()\n+     */\n+    public double getSumsq() {\n+    \treturn apply(new SumOfSquares());\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.DescriptiveStatistics#getMean()\n+     */\n+    public double getMean() {\n+    \treturn apply(new Mean());\n+    }\n+\n+    /**\n+    * @see org.apache.commons.math.stat.DescriptiveStatistics#getStandardDeviation()\n+     */\n+    public double getStandardDeviation() {\n+    \tdouble stdDev = Double.NaN;\n+    \tif (getN() > 0) {\n+    \t\tif (getN() > 1) {\n+    \t\t\tstdDev = Math.sqrt(getVariance());\n+    \t\t} else {\n+    \t\t\tstdDev = 0.0;\n+    \t\t}\n+    \t}\n+    \treturn (stdDev);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.DescriptiveStatistics#getVariance()\n+     */\n+    public double getVariance() {\n+    \treturn apply(new Variance());\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.DescriptiveStatistics#getSkewness()\n+     */\n+    public double getSkewness() {\n+    \treturn apply(new Skewness());\n+    }\n+\n+    /**\n+      * @see org.apache.commons.math.stat.DescriptiveStatistics#getKurtosis()\n+     */\n+    public double getKurtosis() {\n+    \treturn apply(new Kurtosis());\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.DescriptiveStatistics#getKurtosisClass()\n+     */\n+    public int getKurtosisClass() {\n+    \tint kClass = MESOKURTIC;\n+\n+    \tdouble kurtosis = getKurtosis();\n+    \tif (kurtosis > 0) {\n+    \t\tkClass = LEPTOKURTIC;\n+    \t} else if (kurtosis < 0) {\n+    \t\tkClass = PLATYKURTIC;\n+    \t}\n+    \treturn (kClass);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.DescriptiveStatistics#getMax()\n+     */\n+    public double getMax() {\n+    \treturn apply(new Max());\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.DescriptiveStatistics#getMin()\n+     */\n+    public double getMin() {\n+    \treturn apply(new Min());\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.DescriptiveStatistics#getGeometricMean()\n+     */\n+    public double getGeometricMean() {\n+    \treturn apply(new GeometricMean());\n+    }\n+    \n+    /**\n+     * @see org.apache.commons.math.stat.DescriptiveStatistics#getPercentile()\n      */\n     public double getPercentile(double p) {\n-        percentile.setPercentile(p);\n-        return apply(percentile);\n+    \treturn apply(new Percentile(p));\n+    }\n+    \n+    /**\n+     * Generates a text report displaying\n+     * univariate statistics from values that\n+     * have been added.\n+     * @return String with line feeds displaying statistics\n+     */\n+    public String toString() {\n+    \tStringBuffer outBuffer = new StringBuffer();\n+    \toutBuffer.append(\"UnivariateImpl:\\n\");\n+    \toutBuffer.append(\"n: \" + getN() + \"\\n\");\n+    \toutBuffer.append(\"min: \" + getMin() + \"\\n\");\n+    \toutBuffer.append(\"max: \" + getMax() + \"\\n\");\n+    \toutBuffer.append(\"mean: \" + getMean() + \"\\n\");\n+    \toutBuffer.append(\"std dev: \" + getStandardDeviation() + \"\\n\");\n+    \toutBuffer.append(\"skewness: \" + getSkewness() + \"\\n\");\n+    \toutBuffer.append(\"kurtosis: \" + getKurtosis() + \"\\n\");\n+    \treturn outBuffer.toString();\n     }\n     \n     /**\n     }\n     \n     /**\n-     * @see org.apache.commons.math.stat.Univariate#addValue(double)\n+     * @see org.apache.commons.math.stat.DescriptiveStatistics#addValue(double)\n      */\n     public abstract void addValue(double value);\n \n      */\n     public abstract double[] getValues();\n \n-\n     /**\n      * @see org.apache.commons.math.stat.DescriptiveStatistics#getElement(int)\n      */\n     public abstract double getElement(int index);\n-\n-\n-\n+    \n+    /**\n+      * @see org.apache.commons.math.stat.DescriptiveStatistics#apply(UnivariateStatistic)\n+     */\n+    public abstract double apply(UnivariateStatistic stat);\n+    \n }\n--- a/src/java/org/apache/commons/math/stat/DescriptiveStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/DescriptiveStatistics.java\n \n import org.apache.commons.discovery.tools.DiscoverClass;\n \n+import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n+\n /**\n  * Abstract factory class for univariate statistical summaries.\n  * \n- * @version $Revision: 1.3 $ $Date: 2004/01/18 03:45:02 $\n+ * @version $Revision: 1.4 $ $Date: 2004/01/25 21:30:41 $\n  */\n-public abstract class DescriptiveStatistics implements Serializable{\n+public abstract class DescriptiveStatistics implements Serializable, StatisticalSummary {\n \n \t/**\n \t * Create an instance of a <code>DescriptiveStatistics</code>\n \t * Returns the number of available values\n \t * @return The number of available values\n \t */\n-\tpublic abstract int getN();\n+\tpublic abstract long getN();\n \n \t/**\n \t * Returns the sum of the values that have been added to Univariate.\n      * values\n      */\n \tpublic abstract double getPercentile(double p);\n+\t\n+\t/**\n+\t * Apply the given statistic to the data associated with this set of statistics.\n+\t * @param stat the statistic to apply\n+\t * @return the computed value of the statistic.\n+\t */\n+\tpublic abstract double apply(UnivariateStatistic stat);\n \n }\n--- a/src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java\n+++ b/src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2003-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n \n import java.io.Serializable;\n \n-import org.apache.commons.math.stat.univariate.*;\n+import java.util.Arrays;\n+\n+import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n import org.apache.commons.math.util.ContractableDoubleArray;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/11/19 03:28:23 $\n+ * @version $Revision: 1.3 $ $Date: 2004/01/25 21:30:41 $\n  */\n public class DescriptiveStatisticsImpl extends AbstractDescriptiveStatistics implements Serializable {\n \n-    /** A contractable double array is used.  memory is reclaimed when \n-     * the storage of the array becomes too empty.\n+\t/** hold the window size **/\n+\tprotected int windowSize = INFINITE_WINDOW;\n+    \n+    /** \n+     *  Stored data values\n      */\n     protected ContractableDoubleArray eDA;\n \n     /**\n-     * Construct a DescriptiveStatisticsImpl\n+     * Construct a DescriptiveStatisticsImpl with infinite window\n      */\n     public DescriptiveStatisticsImpl() {\n+    \tsuper();\n         eDA = new ContractableDoubleArray();\n     }\n+    \n+    /**\n+     * Construct a DescriptiveStatisticsImpl with finite window\n+     */\n+    public DescriptiveStatisticsImpl(int window) {\n+    \tsuper(window);\n+    \teDA = new ContractableDoubleArray();\n+    }\n \n+    public int getWindowSize() {\n+    \treturn windowSize;\n+    }\n+    \n     /**\n      * @see org.apache.commons.math.stat.DescriptiveStatistics#getValues()\n      */\n             eDA.getNumElements());\n         return copiedArray;\n     }\n+    \n+    /**\n+     * @see org.apache.commons.math.stat.DescriptiveStatistics#getSortedValues()\n+     */\n+    public double[] getSortedValues() {\n+    \tdouble[] sort = getValues();\n+    \tArrays.sort(sort);\n+    \treturn sort;\n+    }\n \n     /**\n      * @see org.apache.commons.math.stat.DescriptiveStatistics#getElement(int)\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.Univariate#getN()\n+     * @see org.apache.commons.math.stat.DescriptiveStatistics#getN()\n      */\n-    public int getN() {\n+    public long getN() {\n         return eDA.getNumElements();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.Univariate#addValue(double)\n+     * @see org.apache.commons.math.stat.DescriptiveStatistics#addValue(double)\n      */\n     public synchronized void addValue(double v) {\n         if (windowSize != INFINITE_WINDOW) {\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.Univariate#clear()\n+     * @see org.apache.commons.math.stat.DescriptiveStatistics#clear()\n      */\n     public synchronized void clear() {\n-        super.clear();\n         eDA.clear();\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.Univariate#setWindowSize(int)\n+     * @see org.apache.commons.math.stat.DescriptiveStatistics#setWindowSize(int)\n      */\n     public synchronized void setWindowSize(int windowSize) {\n         this.windowSize = windowSize;\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/StatisticalSummary.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2004 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+/**\n+ *  Reporting interface for basic univariate statistics.\n+ * \n+  * @version $Revision: 1.1 $ $Date: 2004/01/25 21:30:41 $\n+ */\n+public interface StatisticalSummary {\n+\t/** \n+\t * Returns the <a href=\"http://www.xycoon.com/arithmetic_mean.htm\">\n+\t * arithmetic mean </a> of the available values \n+\t * @return The mean or Double.NaN if no values have been added.\n+\t */\n+\tpublic abstract double getMean();\n+\t/** \n+\t * Returns the variance of the available values.\n+\t * @return The variance, Double.NaN if no values have been added \n+\t * or 0.0 for a single value set.  \n+\t */\n+\tpublic abstract double getVariance();\n+\t/** \n+\t * Returns the standard deviation of the available values.\n+\t * @return The standard deviation, Double.NaN if no values have been added \n+\t * or 0.0 for a single value set. \n+\t */\n+\tpublic abstract double getStandardDeviation();\n+\t/** \n+\t * Returns the maximum of the available values\n+\t * @return The max or Double.NaN if no values have been added.\n+\t */\n+\tpublic abstract double getMax();\n+\t/** \n+\t* Returns the minimum of the available values\n+\t* @return The min or Double.NaN if no values have been added.\n+\t*/\n+\tpublic abstract double getMin();\n+\t/** \n+\t * Returns the number of available values\n+\t * @return The number of available values\n+\t */\n+\tpublic abstract long getN();\n+\t/**\n+\t * Returns the sum of the values that have been added to Univariate.\n+\t * @return The sum or Double.NaN if no values have been added\n+\t */\n+\tpublic abstract double getSum();\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/SummaryStatistics.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2004 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.discovery.tools.DiscoverClass;\n+\n+/**\n+ * Abstract factory class for univariate statistical summaries.\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2004/01/25 21:30:41 $\n+ */\n+public abstract class SummaryStatistics implements Serializable, StatisticalSummary{\n+\n+\t/**\n+\t * Create an instance of a <code>SummaryStatistics</code>\n+\t * @return a new factory. \n+\t */\n+\tpublic static SummaryStatistics newInstance(String cls) throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n+\t\treturn newInstance(Class.forName(cls));\n+\t}\n+\t/**\n+\t * Create an instance of a <code>DescriptiveStatistics</code>\n+\t * @return a new factory. \n+\t */\n+\tpublic static SummaryStatistics newInstance(Class cls) throws InstantiationException, IllegalAccessException {\n+\t\treturn (SummaryStatistics)cls.newInstance();\n+\t}\n+\t\n+\t\t/**\n+\t * Create an instance of a <code>DescriptiveStatistics</code>\n+\t * @return a new factory. \n+\t */\n+\tpublic static SummaryStatistics newInstance() {\n+\t\tSummaryStatistics factory = null;\n+\t\ttry {\n+\t\t\tDiscoverClass dc = new DiscoverClass();\n+\t\t\tfactory = (SummaryStatistics) dc.newInstance(\n+\t\t\t\tSummaryStatistics.class,\n+\t\t\t\t\"org.apache.commons.math.stat.SummaryStatisticsImpl\");\n+\t\t} catch(Exception ex) {\n+\t\t\t// ignore as default implementation will be used.\n+\t\t}\n+\t\treturn factory;\n+\t}\n+\t\n+\t/**\n+\t * Adds the value to the data to be summarized\n+\t * @param v the value to be added \n+\t */\n+\tpublic abstract void addValue(double v);\n+\n+\t/** \n+\t * Returns the <a href=\"http://www.xycoon.com/arithmetic_mean.htm\">\n+\t * arithmetic mean </a> of the available values \n+\t * @return The mean or Double.NaN if no values have been added.\n+\t */\n+\tpublic abstract double getMean();\n+\n+\t/** \n+\t * Returns the <a href=\"http://www.xycoon.com/geometric_mean.htm\">\n+\t * geometric mean </a> of the available values\n+\t * @return The geometricMean, Double.NaN if no values have been added, \n+\t * or if the productof the available values is less than or equal to 0.\n+\t */\n+\tpublic abstract double getGeometricMean();\n+\n+\t/** \n+\t * Returns the variance of the available values.\n+\t * @return The variance, Double.NaN if no values have been added \n+\t * or 0.0 for a single value set.  \n+\t */\n+\tpublic abstract double getVariance();\n+\n+\t/** \n+\t * Returns the standard deviation of the available values.\n+\t * @return The standard deviation, Double.NaN if no values have been added \n+\t * or 0.0 for a single value set. \n+\t */\n+\tpublic abstract double getStandardDeviation();\n+    \n+\t/** \n+\t * Returns the maximum of the available values\n+\t * @return The max or Double.NaN if no values have been added.\n+\t */\n+\tpublic abstract double getMax();\n+\n+\t/** \n+\t* Returns the minimum of the available values\n+\t* @return The min or Double.NaN if no values have been added.\n+\t*/\n+\tpublic abstract double getMin();\n+\n+\t/** \n+\t * Returns the number of available values\n+\t * @return The number of available values\n+\t */\n+\tpublic abstract long getN();\n+\n+\t/**\n+\t * Returns the sum of the values that have been added to Univariate.\n+\t * @return The sum or Double.NaN if no values have been added\n+\t */\n+\tpublic abstract double getSum();\n+\n+\t/**\n+\t * Returns the sum of the squares of the available values.\n+\t * @return The sum of the squares or Double.NaN if no \n+\t * values have been added.\n+\t */\n+\tpublic abstract double getSumsq();\n+\n+\t/** \n+\t * Resets all statistics\n+\t */\n+\tpublic abstract void clear();\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2004 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import org.apache.commons.math.stat.univariate.moment.SecondMoment;\n+import org.apache.commons.math.stat.univariate.moment.FirstMoment;\n+import org.apache.commons.math.stat.univariate.moment.GeometricMean;\n+import org.apache.commons.math.stat.univariate.moment.Mean;\n+import org.apache.commons.math.stat.univariate.moment.Variance;\n+import org.apache.commons.math.stat.univariate.rank.Max;\n+import org.apache.commons.math.stat.univariate.rank.Min;\n+import org.apache.commons.math.stat.univariate.summary.Sum;\n+import org.apache.commons.math.stat.univariate.summary.SumOfLogs;\n+import org.apache.commons.math.stat.univariate.summary.SumOfSquares;\n+\n+/**\n+ * Provides a default {@link SummaryStatistics} implementation.\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2004/01/25 21:30:41 $  \n+ */\n+public class SummaryStatisticsImpl extends SummaryStatistics {\n+\n+    /** count of values that have been added */\n+    protected long n = 0;\n+\n+    /** FirstMoment is used to compute the mean */\n+    protected FirstMoment firstMoment = null;\n+    \n+    /** SecondMoment is used to compute the variance */\n+    protected SecondMoment secondMoment = null;\n+    \n+    /** sum of values that have been added */\n+    protected Sum sum = null;\n+\n+    /** sum of the square of each value that has been added */\n+    protected SumOfSquares sumsq = null;\n+\n+    /** min of values that have been added */\n+    protected Min min = null;\n+\n+    /** max of values that have been added */\n+    protected Max max = null;\n+\n+    /** sumLog of values that have been added */\n+    protected SumOfLogs sumLog = null;\n+\n+    /** geoMean of values that have been added */\n+    protected GeometricMean geoMean = null;\n+\n+    /** mean of values that have been added */\n+    protected Mean mean = null;\n+\n+    /** variance of values that have been added */\n+    protected Variance variance = null;\n+\n+    /**\n+     * Construct a SummaryStatistics\n+     */\n+    public SummaryStatisticsImpl() {\n+        sum = new Sum();\n+        sumsq = new SumOfSquares();\n+        min = new Min();\n+        max = new Max();\n+        sumLog = new SumOfLogs();\n+        geoMean = new GeometricMean();\n+        secondMoment = new SecondMoment();\n+        firstMoment = new FirstMoment();\n+    }\n+\n+    /**\n+     * Add a value to the data\n+     * \n+     * @param value  the value to add\n+     */\n+    public void addValue(double value) {\n+    \tsum.increment(value);\n+    \tsumsq.increment(value);\n+    \tmin.increment(value);\n+    \tmax.increment(value);\n+    \tsumLog.increment(value);\n+    \tgeoMean.increment(value);\n+    \tfirstMoment.increment(value);\n+    \tsecondMoment.increment(value);\n+    \tn++;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#getN()\n+     */\n+    public long getN() {\n+        return n;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#getSum()\n+     */\n+    public double getSum() {\n+        return sum.getResult();\n+    }\n+\n+    /**\n+     * Returns the sum of the squares of the values that have been added.\n+     * <p>\n+     *  Double.NaN is returned if no values have been added.</p>\n+     * \n+     * @return The sum of squares\n+     */\n+    public double getSumsq() {\n+        return sumsq.getResult();\n+    }\n+\n+    /**\n+     * Returns the mean of the values that have been added.\n+     * <p>\n+     *  Double.NaN is returned if no values have been added.</p>\n+     * \n+     * @return the mean\n+     */\n+    public double getMean() {\n+      return new Mean(firstMoment).getResult();\n+    }\n+\n+    /**\n+     * Returns the standard deviation of the values that have been added.\n+     * <p>\n+     *  Double.NaN is returned if no values have been added.</p>\n+     * \n+     * @return the standard deviation\n+     */\n+    public double getStandardDeviation() {\n+        double stdDev = Double.NaN;\n+        if (getN() > 0) {\n+            if (getN() > 1) {\n+                stdDev = Math.sqrt(getVariance());\n+            } else {\n+                stdDev = 0.0;\n+            }\n+        }\n+        return (stdDev);\n+    }\n+\n+    /**\n+     * Returns the variance of the values that have been added.\n+     * <p>\n+     *  Double.NaN is returned if no values have been added.</p>\n+     *\n+     * @return the variance \n+     */\n+    public double getVariance() {\n+        return new Variance(secondMoment).getResult();\n+    }\n+\n+    /**\n+     * Returns the maximum of the values that have been added.\n+     * <p>\n+     *  Double.NaN is returned if no values have been added.</p>\n+     *\n+     * @return the maximum  \n+     */\n+    public double getMax() {\n+        return max.getResult();\n+    }\n+\n+    /**\n+     * Returns the minimum of the values that have been added.\n+     * <p>\n+     *  Double.NaN is returned if no values have been added.</p>\n+     *\n+     * @return the minimum  \n+     */\n+    public double getMin() {\n+        return min.getResult();\n+    }\n+\n+    /**\n+     * Returns the geometric mean of the values that have been added.\n+     * <p>\n+     *  Double.NaN is returned if no values have been added.</p>\n+     *\n+     * @return the geometric mean  \n+     */\n+    public double getGeometricMean() {\n+        return geoMean.getResult();\n+    }\n+    \n+    /**\n+     * Generates a text report displaying\n+     * summary statistics from values that\n+     * have been added.\n+     * @return String with line feeds displaying statistics\n+     */\n+    public String toString() {\n+        StringBuffer outBuffer = new StringBuffer();\n+        outBuffer.append(\"SummaryStatistics:\\n\");\n+        outBuffer.append(\"n: \" + n + \"\\n\");\n+        outBuffer.append(\"min: \" + min + \"\\n\");\n+        outBuffer.append(\"max: \" + max + \"\\n\");\n+        outBuffer.append(\"mean: \" + getMean() + \"\\n\");\n+        outBuffer.append(\"std dev: \" + getStandardDeviation() + \"\\n\");\n+        return outBuffer.toString();\n+    }\n+\n+    /** \n+\t * Resets all statistics and storage\n+\t */\n+    public void clear() {\n+        this.n = 0;\n+        min.clear();\n+        max.clear();\n+        sum.clear();\n+        sumLog.clear();\n+        sumsq.clear();\n+        geoMean.clear();\n+        firstMoment.clear();\n+        secondMoment.clear();\n+    }\n+\n+}\n--- a/src/java/org/apache/commons/math/stat/TestStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/TestStatistic.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2003-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n /**\n  * A collection of commonly used test statistics and statistical tests.\n  * \n- * @version $Revision: 1.10 $ $Date: 2003/11/19 03:22:54 $ \n+ * @version $Revision: 1.11 $ $Date: 2004/01/25 21:30:41 $ \n  */\n public interface TestStatistic {\n     \n      * @return t statistic\n      * @throws IllegalArgumentException if the precondition is not met\n      */\n-    double t(double mu, DescriptiveStatistics sampleStats) \n+    double t(double mu, StatisticalSummary sampleStats) \n         throws IllegalArgumentException, MathException;\n     \n     /**\n      * @return t statistic\n      * @throws IllegalArgumentException if the precondition is not met\n      */\n-    double t(DescriptiveStatistics sampleStats1, DescriptiveStatistics sampleStats2) \n+    double t(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2) \n         throws IllegalArgumentException, MathException;\n     \n     /**\n      * at least 5 observations.\n      * </li></ul>\n      *\n-     * @param sampleStats1 DescriptiveStatistics describing data from the first sample\n-     * @param sampleStats2 DescriptiveStatistics describing data from the second sample\n+     * @param sampleStats1 StatisticalSummary describing data from the first sample\n+     * @param sampleStats2 StatisticalSummary describing data from the second sample\n      * @return p-value for t-test\n      * @throws IllegalArgumentException if the precondition is not met\n      */\n-    double tTest(DescriptiveStatistics sampleStats1, DescriptiveStatistics sampleStats2)\n+    double tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2)\n         throws IllegalArgumentException, MathException;\n     \n     /**\n      * <li> <code> 0 < alpha < 0.5 </code>\n      * </li></ul>\n      *\n-     * @param sampleStats1 DescriptiveStatistics describing sample data values\n-     * @param sampleStats2 DescriptiveStatistics describing sample data values\n+     * @param sampleStats1 StatisticalSummary describing sample data values\n+     * @param sampleStats2 StatisticalSummary describing sample data values\n      * @param alpha significance level of the test\n      * @return true if the null hypothesis can be rejected with \n      * confidence 1 - alpha\n      * @throws IllegalArgumentException if the preconditions are not met\n      */\n-    boolean tTest(DescriptiveStatistics sampleStats1, DescriptiveStatistics sampleStats2, \n+    boolean tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2, \n         double alpha)\n         throws IllegalArgumentException, MathException;\n     \n      * </li></ul>\n      *\n      * @param mu constant value to compare sample mean against\n-     * @param sampleStats DescriptiveStatistics describing sample data values\n+     * @param sampleStats StatisticalSummary describing sample data values\n      * @param alpha significance level of the test\n      * @return p-value\n      * @throws IllegalArgumentException if the precondition is not met\n      */\n-    boolean tTest(double mu, DescriptiveStatistics sampleStats, double alpha)\n+    boolean tTest(double mu, StatisticalSummary sampleStats, double alpha)\n         throws IllegalArgumentException, MathException;\n     \n     /**\n      * </li></ul>\n      *\n      * @param mu constant value to compare sample mean against\n-     * @param sampleStats DescriptiveStatistics describing sample data\n+     * @param sampleStats StatisticalSummary describing sample data\n      * @return p-value\n      * @throws IllegalArgumentException if the precondition is not met\n      */\n-    double tTest(double mu, DescriptiveStatistics sampleStats)\n+    double tTest(double mu, StatisticalSummary sampleStats)\n         throws IllegalArgumentException, MathException;\n }\n \n--- a/src/java/org/apache/commons/math/stat/TestStatisticImpl.java\n+++ b/src/java/org/apache/commons/math/stat/TestStatisticImpl.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2003-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n /**\n  * Implements test statistics defined in the TestStatistic interface.\n  *\n- * @version $Revision: 1.10 $ $Date: 2003/11/19 03:22:54 $\n+ * @version $Revision: 1.11 $ $Date: 2004/01/25 21:30:41 $\n  */\n public class TestStatisticImpl implements TestStatistic, Serializable {\n \n \n     /**\n      * @param mu comparison constant\n-     * @param sampleStats DescriptiveStatistics holding sample summary statitstics\n+     * @param sampleStats StatisticalSummary holding sample summary statitstics\n      * @return t statistic\n      * @throws IllegalArgumentException if the precondition is not met\n      */\n-    public double t(double mu, DescriptiveStatistics sampleStats)\n+    public double t(double mu, StatisticalSummary sampleStats)\n         throws IllegalArgumentException {\n         if ((sampleStats == null) || (sampleStats.getN() < 5)) {\n             throw new IllegalArgumentException(\"insufficient data for t statistic\");\n     }\n \n     /**\n-     * @param sampleStats1 DescriptiveStatistics describing data from the first sample\n-     * @param sampleStats2 DescriptiveStatistics describing data from the second sample\n+     * @param sampleStats1 StatisticalSummary describing data from the first sample\n+     * @param sampleStats2 StatisticalSummary describing data from the second sample\n      * @return t statistic\n      * @throws IllegalArgumentException if the precondition is not met\n      */\n     public double t(\n-        DescriptiveStatistics sampleStats1,\n-        DescriptiveStatistics sampleStats2)\n+        StatisticalSummary sampleStats1,\n+        StatisticalSummary sampleStats2)\n         throws IllegalArgumentException {\n         if ((sampleStats1 == null)\n             || (sampleStats2 == null\n     }\n \n     /**\n-     * @param sampleStats1 DescriptiveStatistics describing data from the first sample\n-     * @param sampleStats2 DescriptiveStatistics describing data from the second sample\n+     * @param sampleStats1 StatisticalSummary describing data from the first sample\n+     * @param sampleStats2 StatisticalSummary describing data from the second sample\n      * @return p-value for t-test\n      * @throws IllegalArgumentException if the precondition is not met\n      */\n     public double tTest(\n-        DescriptiveStatistics sampleStats1,\n-        DescriptiveStatistics sampleStats2)\n+        StatisticalSummary sampleStats1,\n+        StatisticalSummary sampleStats2)\n         throws IllegalArgumentException, MathException {\n         if ((sampleStats1 == null)\n             || (sampleStats2 == null\n     }\n \n     /**\n-     * @param sampleStats1 DescriptiveStatistics describing sample data values\n-     * @param sampleStats2 DescriptiveStatistics describing sample data values\n+     * @param sampleStats1 StatisticalSummary describing sample data values\n+     * @param sampleStats2 StatisticalSummary describing sample data values\n      * @param alpha significance level of the test\n      * @return true if the null hypothesis can be rejected with \n      * confidence 1 - alpha\n      * @throws IllegalArgumentException if the preconditions are not met\n      */\n     public boolean tTest(\n-        DescriptiveStatistics sampleStats1,\n-        DescriptiveStatistics sampleStats2,\n+        StatisticalSummary sampleStats1,\n+        StatisticalSummary sampleStats2,\n         double alpha)\n         throws IllegalArgumentException, MathException {\n         if ((alpha <= 0) || (alpha > 0.5)) {\n \n     /**\n      * @param mu constant value to compare sample mean against\n-     * @param sampleStats DescriptiveStatistics describing sample data values\n+     * @param sampleStats StatisticalSummary describing sample data values\n      * @param alpha significance level of the test\n      * @return p-value\n      * @throws IllegalArgumentException if the precondition is not met\n      */\n     public boolean tTest(\n         double mu,\n-        DescriptiveStatistics sampleStats,\n+        StatisticalSummary sampleStats,\n         double alpha)\n         throws IllegalArgumentException, MathException {\n         if ((alpha <= 0) || (alpha > 0.5)) {\n \n     /**\n      * @param mu constant value to compare sample mean against\n-     * @param sampleStats DescriptiveStatistics describing sample data\n-     * @return p-value\n-     * @throws IllegalArgumentException if the precondition is not met\n-     */\n-    public double tTest(double mu, DescriptiveStatistics sampleStats)\n+     * @param sampleStats StatisticalSummary describing sample data\n+     * @return p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    public double tTest(double mu, StatisticalSummary sampleStats)\n         throws IllegalArgumentException, MathException {\n         if ((sampleStats == null) || (sampleStats.getN() < 5)) {\n             throw new IllegalArgumentException(\"insufficient data for t statistic\");\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2003-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * <a href=\"http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf\">\n  * recursive strategy\n  * </a>. Both incremental and evaluation strategies currently use this approach.\n- * @version $Revision: 1.11 $ $Date: 2003/11/19 03:28:24 $\n+ * @version $Revision: 1.12 $ $Date: 2004/01/25 21:30:41 $\n  */\n public class FirstMoment extends AbstractStorelessUnivariateStatistic implements Serializable{\n \n-    static final long serialVersionUID = -803343206421984070L;    \n+    static final long serialVersionUID = -803343206421984070L; \n     \n     /** count of values that have been added */\n-    protected int n = 0;\n+    protected long n = 0;\n \n     /** first moment of values that have been added */\n     protected double m1 = Double.NaN;\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2003-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n /**\n  * Returns the <a href=\"http://www.xycoon.com/geometric_mean.htm\">\n  * geometric mean </a> of the available values\n- * @version $Revision: 1.14 $ $Date: 2003/11/19 03:28:24 $\n+ * @version $Revision: 1.15 $ $Date: 2004/01/25 21:30:41 $\n  */\n public class GeometricMean extends SumOfLogs implements Serializable{\n \n     static final long serialVersionUID = -8178734905303459453L;  \n       \n     /** */\n-    protected int n = 0;\n+    protected long n = 0;\n \n     /** */\n     private double geoMean = Double.NaN;\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2003-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n     .AbstractStorelessUnivariateStatistic;\n \n /**\n- * @version $Revision: 1.14 $ $Date: 2003/11/19 03:28:24 $\n+ * @version $Revision: 1.15 $ $Date: 2004/01/25 21:30:41 $\n  */\n public class Kurtosis extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     private double kurtosis = Double.NaN;\n \n     /** */\n-    private int n = 0;\n+    private long n = 0;\n \n     /**\n      * Construct a Kurtosis\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2003-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;\n \n /**\n- * @version $Revision: 1.14 $ $Date: 2003/11/19 03:28:24 $\n+ * @version $Revision: 1.15 $ $Date: 2004/01/25 21:30:41 $\n  */\n public class Skewness extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     protected double skewness = Double.NaN;\n \n     /** */\n-    private int n = 0;\n+    private long n = 0;\n \n     /**\n      * Constructs a Skewness\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Variance.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Variance.java\n import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;\n \n /**\n- *\n- * @version $Revision: 1.14 $ $Date: 2003/11/19 03:28:24 $\n+ * Updating forumulas use West's algorithm as described in\n+ * <a href=\"http://doi.acm.org/10.1145/359146.359152\">Chan, T. F. and\n+ * J. G. Lewis 1979, <i>Communications of the ACM</i>,\n+ * vol. 22 no. 9, pp. 526-531.</a>.\n+ * \n+ * @version $Revision: 1.15 $ $Date: 2004/01/25 21:30:41 $\n  */\n public class Variance extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n      * If the external SecondMoment is used, the this is updated from\n      * that moments counter\n      */\n-    protected int n = 0;\n+    protected long n = 0;\n \n     /**\n      * Constructs a Variance.\n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Max.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Max.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2003-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n     .AbstractStorelessUnivariateStatistic;\n \n /**\n- * @version $Revision: 1.12 $ $Date: 2003/11/19 03:28:24 $\n+ * @version $Revision: 1.13 $ $Date: 2004/01/25 21:30:41 $\n  */\n public class Max extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     static final long serialVersionUID = -5593383832225844641L;    \n     \n     /** */\n-    private int n = 0;\n+    private long n = 0;\n         \n     /** */\n     private double value = Double.NaN;\n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Min.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Min.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2003-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n     .AbstractStorelessUnivariateStatistic;\n \n /**\n- * @version $Revision: 1.12 $ $Date: 2003/11/19 03:28:24 $\n+ * @version $Revision: 1.13 $ $Date: 2004/01/25 21:30:41 $\n  */\n public class Min extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     static final long serialVersionUID = -2941995784909003131L;  \n       \n     /** */\n-    private int n = 0;\n+    private long n = 0;\n     \n     /** */\n     private double value = Double.NaN;\n--- a/src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java\n+++ b/src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java\n import java.net.URL;\n import java.net.URLDecoder;\n \n-import org.apache.commons.math.stat.DescriptiveStatistics;\n-import org.apache.commons.math.stat.StorelessDescriptiveStatisticsImpl;\n+import org.apache.commons.math.stat.SummaryStatistics;\n \n /**\n  * Test cases for the EmpiricalDistribution class\n  *\n- * @version $Revision: 1.10 $ $Date: 2004/01/15 05:22:08 $\n+ * @version $Revision: 1.11 $ $Date: 2004/01/25 21:30:41 $\n  */\n \n public final class EmpiricalDistributionTest extends TestCase {\n     \n     private void tstGen(double tolerance)throws Exception {\n         empiricalDistribution.load(file);   \n-        DescriptiveStatistics stats = new StorelessDescriptiveStatisticsImpl();\n+        SummaryStatistics stats = SummaryStatistics.newInstance();\n         for (int i = 1; i < 1000; i++) {\n             stats.addValue(empiricalDistribution.getNextValue());\n         }\n--- a/src/test/org/apache/commons/math/random/RandomDataTest.java\n+++ b/src/test/org/apache/commons/math/random/RandomDataTest.java\n import java.util.HashSet;\n \n import org.apache.commons.math.stat.Frequency;\n-import org.apache.commons.math.stat.StorelessDescriptiveStatisticsImpl;\n+import org.apache.commons.math.stat.SummaryStatistics;\n import org.apache.commons.math.stat.TestStatisticImpl;\n-import org.apache.commons.math.stat.DescriptiveStatistics;\n \n /**\n  * Test cases for the RandomData class.\n  *\n- * @version $Revision: 1.8 $ $Date: 2003/11/15 16:01:40 $\n+ * @version $Revision: 1.9 $ $Date: 2004/01/25 21:30:41 $\n  */\n \n public final class RandomDataTest extends TestCase {\n         } catch (IllegalArgumentException ex) {\n             ;\n         }\n-        DescriptiveStatistics u = new StorelessDescriptiveStatisticsImpl();\n+        SummaryStatistics u = SummaryStatistics.newInstance();\n         for (int i = 0; i<largeSampleSize; i++) {\n             u.addValue(randomData.nextGaussian(0,1));\n         }\n--- a/src/test/org/apache/commons/math/random/ValueServerTest.java\n+++ b/src/test/org/apache/commons/math/random/ValueServerTest.java\n import junit.framework.TestSuite;\n import java.net.URL;\n \n-import org.apache.commons.math.stat.DescriptiveStatistics;\n-import org.apache.commons.math.stat.StorelessDescriptiveStatisticsImpl;\n+import org.apache.commons.math.stat.SummaryStatistics;\n  \n /**\n  * Test cases for the ValueServer class.\n  *\n- * @version $Revision: 1.11 $ $Date: 2004/01/15 07:31:44 $\n+ * @version $Revision: 1.12 $ $Date: 2004/01/25 21:30:41 $\n  */\n \n public final class ValueServerTest extends TestCase {\n         vs.computeDistribution();\n         assertTrue(\"empirical distribution property\", \n             vs.getEmpiricalDistribution() != null);\n-        DescriptiveStatistics stats = new StorelessDescriptiveStatisticsImpl();\n+        SummaryStatistics stats = SummaryStatistics.newInstance();\n         for (int i = 1; i < 1000; i++) {\n             next = vs.getNext();\n             stats.addValue(next);\n             tolerance);\n         \n         vs.computeDistribution(500);\n-        stats = new StorelessDescriptiveStatisticsImpl();\n+        stats = SummaryStatistics.newInstance();\n         for (int i = 1; i < 1000; i++) {\n             next = vs.getNext();\n             stats.addValue(next);\n--- a/src/test/org/apache/commons/math/stat/CertifiedDataTest.java\n+++ b/src/test/org/apache/commons/math/stat/CertifiedDataTest.java\n import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.InputStreamReader;\n-import org.apache.commons.logging.*;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.commons.logging.Log;\n /**\n  * Test cases for the {@link DescriptiveStatistics} class.\n- * @version $Revision: 1.12 $ $Date: 2003/11/15 16:01:40 $\n+ * @version $Revision: 1.13 $ $Date: 2004/01/25 21:30:41 $\n  */\n-public class CertifiedDataTest extends TestCase {\n-\n-\tprotected DescriptiveStatistics u = null;\n+public class CertifiedDataTest extends TestCase  {\n \n \tprotected double mean = Double.NaN;\n \n \t * Test StorelessDescriptiveStatistics\n \t*/\n \tpublic void testUnivariateImpl() {\n-\n+\t\tSummaryStatistics u = null;\n \t\ttry {\n-\t\t\tu = DescriptiveStatistics.newInstance(StorelessDescriptiveStatisticsImpl.class);\n+\t\t\tu = SummaryStatistics.newInstance(SummaryStatisticsImpl.class);\n \t\t} catch (InstantiationException e) {\n \t\t\t// TODO Auto-generated catch block\n \t\t\te.printStackTrace();\n \t\t\te.printStackTrace();\n \t\t}\n \n-\t\tloadStats(\"data/Lew.txt\");\n+\t\tloadStats(\"data/Lew.txt\", u);\n \t\tassertEquals(\"Lew: std\", std, u.getStandardDeviation(), .000000000001);\n \t\tassertEquals(\"Lew: mean\", mean, u.getMean(), .000000000001);\n \t\t\n-\t\tloadStats(\"data/Lottery.txt\");\n+\t\tloadStats(\"data/Lottery.txt\", u);\n \t\tassertEquals(\"Lottery: std\", std, u.getStandardDeviation(), .000000000001);\n \t\tassertEquals(\"Lottery: mean\", mean, u.getMean(), .000000000001);\t\n \t\t\n-\t\tloadStats(\"data/PiDigits.txt\");\n+\t\tloadStats(\"data/PiDigits.txt\", u);\n \t\tassertEquals(\"PiDigits: std\", std, u.getStandardDeviation(), .0000000000001);\n \t\tassertEquals(\"PiDigits: mean\", mean, u.getMean(), .0000000000001);\t\n \n-\t\tloadStats(\"data/Mavro.txt\");\n+\t\tloadStats(\"data/Mavro.txt\", u);\n \t\tassertEquals(\"Mavro: std\", std, u.getStandardDeviation(), .00000000000001);\n \t\tassertEquals(\"Mavro: mean\", mean, u.getMean(), .00000000000001);\n \t\t\n \t\t//assertEquals(\"Michelso: std\", std, u.getStandardDeviation(), .00000000000001);\n \t\t//assertEquals(\"Michelso: mean\", mean, u.getMean(), .00000000000001);\t\n \t\t\t\t\t\t\t\t\t\t\n-\t\tloadStats(\"data/NumAcc1.txt\");\n+\t\tloadStats(\"data/NumAcc1.txt\", u);\n \t\tassertEquals(\"NumAcc1: std\", std, u.getStandardDeviation(), .00000000000001);\n \t\tassertEquals(\"NumAcc1: mean\", mean, u.getMean(), .00000000000001);\n \t\t\n \t */\n \tpublic void testStoredUnivariateImpl() {\n \n-\t\tu = DescriptiveStatistics.newInstance();\n-\t\t\n-\t\tloadStats(\"data/Lew.txt\");\n+\t\tDescriptiveStatistics u = DescriptiveStatistics.newInstance();\n+\t\t\n+\t\tloadStats(\"data/Lew.txt\", u);\n \t\tassertEquals(\"Lew: std\", std, u.getStandardDeviation(), .000000000001);\n \t\tassertEquals(\"Lew: mean\", mean, u.getMean(), .000000000001);\n \t\t\n-\t\tloadStats(\"data/Lottery.txt\");\n+\t\tloadStats(\"data/Lottery.txt\", u);\n \t\tassertEquals(\"Lottery: std\", std, u.getStandardDeviation(), .000000000001);\n \t\tassertEquals(\"Lottery: mean\", mean, u.getMean(), .000000000001);\t\t\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \n-\t\tloadStats(\"data/PiDigits.txt\");\n+\t\tloadStats(\"data/PiDigits.txt\", u);\n \t\tassertEquals(\"PiDigits: std\", std, u.getStandardDeviation(), .0000000000001);\n \t\tassertEquals(\"PiDigits: mean\", mean, u.getMean(), .0000000000001);\n \t\t\n-\t\tloadStats(\"data/Mavro.txt\");\n+\t\tloadStats(\"data/Mavro.txt\", u);\n \t\tassertEquals(\"Mavro: std\", std, u.getStandardDeviation(), .00000000000001);\n \t\tassertEquals(\"Mavro: mean\", mean, u.getMean(), .00000000000001);\t\t\n \t\t\n \t\t//assertEquals(\"Michelso: std\", std, u.getStandardDeviation(), .00000000000001);\n \t\t//assertEquals(\"Michelso: mean\", mean, u.getMean(), .00000000000001);\t\n \n-\t\tloadStats(\"data/NumAcc1.txt\");\n+\t\tloadStats(\"data/NumAcc1.txt\", u);\n \t\tassertEquals(\"NumAcc1: std\", std, u.getStandardDeviation(), .00000000000001);\n \t\tassertEquals(\"NumAcc1: mean\", mean, u.getMean(), .00000000000001);\n \t\t\n \t/**\n \t * loads a DescriptiveStatistics off of a test file\n \t * @param file\n-\t */\n-\tprivate void loadStats(String resource) {\n-\n+\t * @param statistical summary\n+\t */\n+\tprivate void loadStats(String resource, Object u) {\n+\t\t\n+\t\tDescriptiveStatistics d = null;\n+\t\tSummaryStatistics s = null;\n+\t\tif (u instanceof DescriptiveStatistics) {\n+\t\t\td = (DescriptiveStatistics) u;\n+\t\t} else {\n+\t\t\ts = (SummaryStatistics) u;\n+\t\t}\n \t\ttry {\n-\n-\t\t\tu.clear();\n+\t\t\tu.getClass().getDeclaredMethod(\"clear\", null).invoke(u, null);\n \t\t\tmean = Double.NaN;\n \t\t\tstd = Double.NaN;\n \n \t\t\tline = in.readLine();\n \n \t\t\twhile (line != null) {\n-\n-\t\t\t\tu.addValue(Double.parseDouble(line.trim()));\n+\t\t\t\tif (d != null) {\n+\t\t\t\t\td.addValue(Double.parseDouble(line.trim()));\n+\t\t\t\t}  else {\n+\t\t\t\t\ts.addValue(Double.parseDouble(line.trim()));\n+\t\t\t\t}\n \t\t\t\tline = in.readLine();\n \t\t\t}\n \n \t\t\tlog.error(fnfe.getMessage(), fnfe);\n \t\t} catch (IOException ioe) {\n \t\t\tlog.error(ioe.getMessage(), ioe);\n+\t\t} catch (Exception ioe) {\n+\t\t\tlog.error(ioe.getMessage(), ioe);\n \t\t}\n \t}\n }\n--- a/src/test/org/apache/commons/math/stat/ListUnivariateImpl.java\n+++ b/src/test/org/apache/commons/math/stat/ListUnivariateImpl.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2003-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n import org.apache.commons.math.util.NumberTransformer;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2003/11/15 16:01:41 $\n+ * @version $Revision: 1.2 $ $Date: 2004/01/25 21:30:41 $\n  */\n public class ListUnivariateImpl extends AbstractDescriptiveStatistics {\n \n \n     /** Number Transformer maps Objects to Number for us. */\n     protected NumberTransformer transformer;\n+    \n+    /** hold the window size **/\n+    protected int windowSize = DescriptiveStatistics.INFINITE_WINDOW;\n \n     /**\n      * Construct a ListUnivariate with a specific List.\n     /**\n      * @see org.apache.commons.math.stat.DescriptiveStatistics#getN()\n      */\n-    public int getN() {\n+    public long getN() {\n         int n = 0;\n \n         if (windowSize != DescriptiveStatistics.INFINITE_WINDOW) {\n      * @see org.apache.commons.math.stat.DescriptiveStatistics#clear()\n      */\n     public void clear() {\n-        super.clear();\n         list.clear();\n     }\n     \n     public void setTransformer(NumberTransformer transformer) {\n         this.transformer = transformer;\n     }\n+    \n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#setWindowSize(int)\n+     */\n+    public synchronized void setWindowSize(int windowSize) {\n+    \tthis.windowSize = windowSize;\n+    \t//Discard elements from the front of the list if the windowSize is less than \n+    \t// the size of the list.\n+    \tint extra = list.size() - windowSize;\n+    \tfor (int i = 0; i < extra; i++) {\n+    \t\tlist.remove(0);\n+    \t}\n+    }\n+    \t\n+    \tpublic int getWindowSize() {\n+    \t\treturn windowSize;\n+    \t}\n \n }\n--- a/src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java\n+++ b/src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2003-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n /**\n  * Test cases for the {@link Univariate} class.\n  *\n- * @version $Revision: 1.10 $ $Date: 2003/11/15 16:01:41 $\n+ * @version $Revision: 1.11 $ $Date: 2004/01/25 21:30:41 $\n  */\n \n public final class ListUnivariateImplTest extends TestCase {\n--- a/src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java\n+++ b/src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2003-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n /**\n  * Test cases for the {@link Univariate} class.\n  *\n- * @version $Revision: 1.10 $ $Date: 2003/11/15 16:01:41 $\n+ * @version $Revision: 1.11 $ $Date: 2004/01/25 21:30:41 $\n  */\n \n public final class StoreUnivariateImplTest extends TestCase {\n--- a/src/test/org/apache/commons/math/stat/TestStatisticTest.java\n+++ b/src/test/org/apache/commons/math/stat/TestStatisticTest.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2003-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n /**\n  * Test cases for the TestStatistic class.\n  *\n- * @version $Revision: 1.9 $ $Date: 2003/11/19 03:22:54 $\n+ * @version $Revision: 1.10 $ $Date: 2004/01/25 21:30:41 $\n  */\n \n public final class TestStatisticTest extends TestCase {\n                 92.0,\n                 95.0 };\n         double mu = 100.0;\n-        DescriptiveStatistics sampleStats = null;\n+        SummaryStatistics sampleStats = null;\n         try {\n             sampleStats =\n-                DescriptiveStatistics.newInstance(\n-                    StorelessDescriptiveStatisticsImpl.class);\n+                SummaryStatistics.newInstance(\n+                    SummaryStatisticsImpl.class);\n         } catch (InstantiationException e5) {\n             // TODO Auto-generated catch block\n             e5.printStackTrace();\n             ;\n         }\n \n-        DescriptiveStatistics nullStats = null;\n-        try {\n-            nullStats =\n-                DescriptiveStatistics.newInstance(\n-                    StorelessDescriptiveStatisticsImpl.class);\n-        } catch (InstantiationException e6) {\n-            // TODO Auto-generated catch block\n-            e6.printStackTrace();\n-        } catch (IllegalAccessException e6) {\n-            // TODO Auto-generated catch block\n-            e6.printStackTrace();\n-        }\n+        SummaryStatistics nullStats = SummaryStatistics.newInstance();\n+         \n         try {\n             testStatistic.t(mu, nullStats);\n             fail(\"arguments too short, IllegalArgumentException expected\");\n             ;\n         }\n \n-        DescriptiveStatistics emptyStats = null;\n-        try {\n-            emptyStats =\n-                DescriptiveStatistics.newInstance(\n-                    StorelessDescriptiveStatisticsImpl.class);\n-        } catch (InstantiationException e4) {\n-            // TODO Auto-generated catch block\n-            e4.printStackTrace();\n-        } catch (IllegalAccessException e4) {\n-            // TODO Auto-generated catch block\n-            e4.printStackTrace();\n-        }\n+        SummaryStatistics emptyStats =SummaryStatistics.newInstance();\n+        \n         try {\n             testStatistic.t(mu, emptyStats);\n             fail(\"arguments too short, IllegalArgumentException expected\");\n             e.printStackTrace();\n         }\n \n-        DescriptiveStatistics tooShortStats = null;\n-        try {\n-            tooShortStats =\n-                DescriptiveStatistics.newInstance(\n-                    StorelessDescriptiveStatisticsImpl.class);\n-        } catch (InstantiationException e3) {\n-            // TODO Auto-generated catch block\n-            e3.printStackTrace();\n-        } catch (IllegalAccessException e3) {\n-            // TODO Auto-generated catch block\n-            e3.printStackTrace();\n-        }\n+        SummaryStatistics tooShortStats = SummaryStatistics.newInstance();\n+        \n         tooShortStats.addValue(0d);\n         tooShortStats.addValue(2d);\n         try {\n                 3d,\n                 3d };\n \n-        DescriptiveStatistics oneSidedPStats = null;\n-        try {\n-            oneSidedPStats =\n-                DescriptiveStatistics.newInstance(\n-                    StorelessDescriptiveStatisticsImpl.class);\n-        } catch (InstantiationException e2) {\n-            // TODO Auto-generated catch block\n-            e2.printStackTrace();\n-        } catch (IllegalAccessException e2) {\n-            // TODO Auto-generated catch block\n-            e2.printStackTrace();\n-        }\n+        SummaryStatistics oneSidedPStats = SummaryStatistics.newInstance();;\n+        \n         for (int i = 0; i < oneSidedP.length; i++) {\n             oneSidedPStats.addValue(oneSidedP[i]);\n         }\n         double[] sample2 =\n             { -1d, 12d, -1d, -3d, 3d, -5d, 5d, 2d, -11d, -1d, -3d };\n \n-        DescriptiveStatistics sampleStats1 = null;\n-        try {\n-            sampleStats1 =\n-                DescriptiveStatistics.newInstance(\n-                    StorelessDescriptiveStatisticsImpl.class);\n-        } catch (InstantiationException e1) {\n-            // TODO Auto-generated catch block\n-            e1.printStackTrace();\n-        } catch (IllegalAccessException e1) {\n-            // TODO Auto-generated catch block\n-            e1.printStackTrace();\n-        }\n+        SummaryStatistics sampleStats1 = SummaryStatistics.newInstance();\n+        \n         for (int i = 0; i < sample1.length; i++) {\n             sampleStats1.addValue(sample1[i]);\n         }\n \n-        DescriptiveStatistics sampleStats2 = null;\n-        try {\n-            sampleStats2 =\n-                DescriptiveStatistics.newInstance(\n-                    StorelessDescriptiveStatisticsImpl.class);\n-        } catch (InstantiationException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        } catch (IllegalAccessException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n+        SummaryStatistics sampleStats2 = SummaryStatistics.newInstance();\n+        \n         for (int i = 0; i < sample2.length; i++) {\n             sampleStats2.addValue(sample2[i]);\n         }\n--- a/src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java\n+++ b/src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2003-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n \n /**\n  * Test cases for the {@link UnivariateStatistic} class.\n- * @version $Revision: 1.9 $ $Date: 2003/11/19 13:35:10 $\n+ * @version $Revision: 1.10 $ $Date: 2004/01/25 21:30:41 $\n  */\n public abstract class StorelessUnivariateStatisticAbstractTest\n     extends UnivariateStatisticAbstractTest {\n--- a/src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java\n+++ b/src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2003-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  */\n package org.apache.commons.math.stat.univariate;\n \n-import org.apache.commons.math.stat.DescriptiveStatistics;\n-import org.apache.commons.math.stat.StorelessDescriptiveStatisticsImpl;\n+import org.apache.commons.math.stat.SummaryStatistics;\n \n import junit.framework.Test;\n import junit.framework.TestCase;\n /**\n  * Test cases for the {@link DescriptiveStatistics} class.\n  *\n- * @version $Revision: 1.1 $ $Date: 2003/11/15 16:01:41 $\n+ * @version $Revision: 1.2 $ $Date: 2004/01/25 21:30:41 $\n  */\n \n public final class UnivariateImplTest extends TestCase {\n     \n     /** test stats */\n     public void testStats() {\n-        StorelessDescriptiveStatisticsImpl u = new StorelessDescriptiveStatisticsImpl(); \n+        SummaryStatistics u = SummaryStatistics.newInstance();\n         assertEquals(\"total count\",0,u.getN(),tolerance);\n         u.addValue(one);\n         u.addValue(twoF);\n     }     \n     \n     public void testN0andN1Conditions() throws Exception {\n-    \tStorelessDescriptiveStatisticsImpl u = new StorelessDescriptiveStatisticsImpl();\n+    \tSummaryStatistics u = SummaryStatistics.newInstance();\n         assertTrue(\"Mean of n = 0 set should be NaN\", \n             Double.isNaN( u.getMean() ) );\n \t\tassertTrue(\"Standard Deviation of n = 0 set should be NaN\", \n             Double.isNaN( u.getStandardDeviation() ) );\n \t\tassertTrue(\"Variance of n = 0 set should be NaN\", \n             Double.isNaN(u.getVariance() ) );\n-\t\tassertTrue(\"skew of n = 0 set should be NaN\",\n-\t\t\tDouble.isNaN(u.getSkewness() ) );\t\n-\t\tassertTrue(\"kurtosis of n = 0 set should be NaN\", \n-\t\t\tDouble.isNaN(u.getKurtosis() ) );\t\t\n \t\t\n-\t\n \t\t/* n=1 */\n \t\tu.addValue(one);\n \t\tassertTrue(\"mean should be one (n = 1)\", \n \t\t\tu.getStandardDeviation() == 0.0);\n \t\tassertTrue(\"variance should be zero (n = 1)\", \n \t\t\tu.getVariance() == 0.0);\n-\t\tassertTrue(\"skew should be zero (n = 1)\", \n-\t\t\tu.getSkewness() == 0.0);\n-\t\tassertTrue(\"kurtosis should be zero (n = 1)\", \n-\t\t\tu.getKurtosis() == 0.0);\t\t\n \t\t\t\t\t\n \t\t/* n=2 */\t\t\t\t\n \t\tu.addValue(twoF);\n \t\t\tu.getStandardDeviation() != 0.0);\n \t\tassertTrue(\"variance should not be zero (n = 2)\", \n \t\t\tu.getVariance() != 0.0);\n-\t\tassertTrue(\"skew should not be zero (n = 2)\", \n-\t\t\tu.getSkewness() == 0.0);\n-\t\tassertTrue(\"kurtosis should be zero (n = 2)\", \n-\t\t\tu.getKurtosis() == 0.0);\n-\n-\t\t/* n=3 */\n-\t\tu.addValue(twoL);\n-\t\tassertTrue(\"skew should not be zero (n = 3)\", \n-\t\t\tu.getSkewness() != 0.0);\n-\t\tassertTrue(\"kurtosis should be zero (n = 3)\", \n-\t\t\tu.getKurtosis() == 0.0);\n-        \n-\t\t/* n=4 */\n-\t\tu.addValue(three);\n-\t\tassertTrue(\"kurtosis should not be zero (n = 4)\", \n-\t\t\tu.getKurtosis() != 0.0);        \n             \n     }\n \n     public void testProductAndGeometricMean() throws Exception {\n-    \tStorelessDescriptiveStatisticsImpl u = new StorelessDescriptiveStatisticsImpl(10);\n+    \tSummaryStatistics u = SummaryStatistics.newInstance();\n     \t    \t\n         u.addValue( 1.0 );\n         u.addValue( 2.0 );\n \n         assertEquals( \"Geometric mean not expected\", 2.213364, \n             u.getGeometricMean(), 0.00001 );\n-\n-        // Now test rolling - StorelessDescriptiveStatistics should discount the contribution\n-        // of a discarded element\n-        for( int i = 0; i < 10; i++ ) {\n-            u.addValue( i + 2 );\n-        }\n-        // Values should be (2,3,4,5,6,7,8,9,10,11)\n-        \n-        assertEquals( \"Geometric mean not expected\", 5.755931, \n-            u.getGeometricMean(), 0.00001 );\n-    }\n-    \n-    public void testRollingMinMax() {\n-        StorelessDescriptiveStatisticsImpl u = new StorelessDescriptiveStatisticsImpl(3);\n-        u.addValue( 1.0 );\n-        u.addValue( 5.0 );\n-        u.addValue( 3.0 );\n-        u.addValue( 4.0 ); // discarding min\n-        assertEquals( \"min not expected\", 3.0, \n-            u.getMin(), Double.MIN_VALUE);\n-        u.addValue(1.0);  // discarding max\n-        assertEquals( \"max not expected\", 4.0, \n-            u.getMax(), Double.MIN_VALUE);\n     }\n     \n     public void testNaNContracts() {\n-        StorelessDescriptiveStatisticsImpl u = new StorelessDescriptiveStatisticsImpl();\n+    \tSummaryStatistics u = SummaryStatistics.newInstance();\n         double nan = Double.NaN;\n         assertTrue(\"mean not NaN\",Double.isNaN(u.getMean())); \n         assertTrue(\"min not NaN\",Double.isNaN(u.getMin())); \n         \n         //FiXME: test all other NaN contract specs\n     }\n-\n-    public void testSkewAndKurtosis() {\n-        DescriptiveStatistics u = new StorelessDescriptiveStatisticsImpl();\n-        \n-        double[] testArray = \n-        { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,\n-          9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };\n-        for( int i = 0; i < testArray.length; i++) {\n-            u.addValue( testArray[i]);\n-        }\n-        \n-        assertEquals(\"mean\", 12.40455, u.getMean(), 0.0001);\n-        assertEquals(\"variance\", 10.00236, u.getVariance(), 0.0001);\n-        assertEquals(\"skewness\", 1.437424, u.getSkewness(), 0.0001);\n-        assertEquals(\"kurtosis\", 2.37719, u.getKurtosis(), 0.0001);\n-    }\n }\n--- a/src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java\n+++ b/src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2003-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n \n /**\n  * Test cases for the {@link UnivariateStatistic} class.\n- * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:23 $\n+ * @version $Revision: 1.9 $ $Date: 2004/01/25 21:30:41 $\n  */\n public abstract class UnivariateStatisticAbstractTest extends TestCase {\n ", "timestamp": 1075066241, "metainfo": ""}