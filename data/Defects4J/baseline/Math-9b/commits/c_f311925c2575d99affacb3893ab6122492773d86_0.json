{"sha": "f311925c2575d99affacb3893ab6122492773d86", "log": "MATH-795: factored out testOuterProduct() and testMisc().   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n \n import org.apache.commons.math3.TestUtils;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n-import org.apache.commons.math3.analysis.function.Abs;\n-import org.apache.commons.math3.analysis.function.Acos;\n-import org.apache.commons.math3.analysis.function.Asin;\n-import org.apache.commons.math3.analysis.function.Atan;\n-import org.apache.commons.math3.analysis.function.Cbrt;\n-import org.apache.commons.math3.analysis.function.Ceil;\n-import org.apache.commons.math3.analysis.function.Cos;\n-import org.apache.commons.math3.analysis.function.Cosh;\n-import org.apache.commons.math3.analysis.function.Exp;\n-import org.apache.commons.math3.analysis.function.Expm1;\n-import org.apache.commons.math3.analysis.function.Floor;\n-import org.apache.commons.math3.analysis.function.Inverse;\n-import org.apache.commons.math3.analysis.function.Log;\n-import org.apache.commons.math3.analysis.function.Log10;\n-import org.apache.commons.math3.analysis.function.Log1p;\n-import org.apache.commons.math3.analysis.function.Power;\n-import org.apache.commons.math3.analysis.function.Rint;\n-import org.apache.commons.math3.analysis.function.Signum;\n-import org.apache.commons.math3.analysis.function.Sin;\n-import org.apache.commons.math3.analysis.function.Sinh;\n-import org.apache.commons.math3.analysis.function.Sqrt;\n-import org.apache.commons.math3.analysis.function.Tan;\n-import org.apache.commons.math3.analysis.function.Tanh;\n-import org.apache.commons.math3.analysis.function.Ulp;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.MathArithmeticException;\n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n     }\n \n     @Test\n-    public void testBasicFunctions() {\n-        super.testBasicFunctions();\n-        ArrayRealVector v1 = new ArrayRealVector(vec1);\n-        ArrayRealVector v2 = new ArrayRealVector(vec2);\n-        ArrayRealVector v5 = new ArrayRealVector(vec5);\n-        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n-\n-        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n-\n-    }\n-\n-    @Test\n-    public void testMisc() {\n-        ArrayRealVector v1 = new ArrayRealVector(vec1);\n-        ArrayRealVector v4 = new ArrayRealVector(vec4);\n-        RealVector v4_2 = new ArrayRealVector(vec4);\n-\n-        String out1 = v1.toString();\n-        Assert.assertTrue(\"some output \",  out1.length()!=0);\n-        /*\n-         double[] dout1 = v1.copyOut();\n-        Assert.assertEquals(\"testData len\", 3, dout1.length);\n-        Assert.assertNotSame(\"testData not same object \", v1.getDataRef(), dout1);\n-         */\n-        try {\n-            v1.checkVectorDimensions(2);\n-            Assert.fail(\"MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n-            // expected behavior\n-        }\n-\n-       try {\n-            v1.checkVectorDimensions(v4);\n-            Assert.fail(\"MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n-            // expected behavior\n-        }\n-\n-        try {\n-            v1.checkVectorDimensions(v4_2);\n-            Assert.fail(\"MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n-            // expected behavior\n-        }\n-\n-    }\n-\n-    @Test\n     public void testPredicates() {\n \n         ArrayRealVector v = new ArrayRealVector(new double[] { 0, 1, 2 });\n         v.cosine(w);\n     }\n \n-    @Test\n-    public void testOuterProduct() {\n-        final ArrayRealVector u = new ArrayRealVector(new double[] {1, 2, -3});\n-        final ArrayRealVector v = new ArrayRealVector(new double[] {4, -2});\n-\n-        final RealMatrix uv = u.outerProduct(v);\n-\n-        final double tol = Math.ulp(1d);\n-        Assert.assertEquals(4, uv.getEntry(0, 0), tol);\n-        Assert.assertEquals(-2, uv.getEntry(0, 1), tol);\n-        Assert.assertEquals(8, uv.getEntry(1, 0), tol);\n-        Assert.assertEquals(-4, uv.getEntry(1, 1), tol);\n-        Assert.assertEquals(-12, uv.getEntry(2, 0), tol);\n-        Assert.assertEquals(6, uv.getEntry(2, 1), tol);\n-    }\n-\n     @Test(expected=DimensionMismatchException.class)\n     public void testCombinePreconditionSameType() {\n         final double a = 1d;\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n import org.apache.commons.math3.analysis.function.Tanh;\n import org.apache.commons.math3.analysis.function.Ulp;\n import org.apache.commons.math3.exception.MathArithmeticException;\n+import org.apache.commons.math3.exception.MathIllegalArgumentException;\n import org.apache.commons.math3.exception.NumberIsTooSmallException;\n import org.apache.commons.math3.exception.OutOfRangeException;\n-import org.apache.commons.math3.linear.ArrayRealVectorTest.RealVectorTestImpl;\n import org.junit.Test;\n \n \n         assertClose(\"compare vect\", v_projection_2.toArray(), result_projection_2, normTolerance);\n     }\n \n+    @Test\n+    public void testOuterProduct() {\n+        final RealVector u = create(new double[] {1, 2, -3});\n+        final RealVector v = create(new double[] {4, -2});\n+\n+        final RealMatrix uv = u.outerProduct(v);\n+\n+        final double tol = Math.ulp(1d);\n+        Assert.assertEquals(4, uv.getEntry(0, 0), tol);\n+        Assert.assertEquals(-2, uv.getEntry(0, 1), tol);\n+        Assert.assertEquals(8, uv.getEntry(1, 0), tol);\n+        Assert.assertEquals(-4, uv.getEntry(1, 1), tol);\n+        Assert.assertEquals(-12, uv.getEntry(2, 0), tol);\n+        Assert.assertEquals(6, uv.getEntry(2, 1), tol);\n+    }\n+\n+    @Test\n+    public void testMisc() {\n+        RealVector v1 = create(vec1);\n+        RealVector v4 = create(vec4);\n+        RealVector v4_2 = create(vec4);\n+\n+        String out1 = v1.toString();\n+        Assert.assertTrue(\"some output \",  out1.length()!=0);\n+        try {\n+            v1.checkVectorDimensions(2);\n+            Assert.fail(\"MathIllegalArgumentException expected\");\n+        } catch (MathIllegalArgumentException ex) {\n+            // expected behavior\n+        }\n+\n+       try {\n+            v1.checkVectorDimensions(v4);\n+            Assert.fail(\"MathIllegalArgumentException expected\");\n+        } catch (MathIllegalArgumentException ex) {\n+            // expected behavior\n+        }\n+\n+        try {\n+            v1.checkVectorDimensions(v4_2);\n+            Assert.fail(\"MathIllegalArgumentException expected\");\n+        } catch (MathIllegalArgumentException ex) {\n+            // expected behavior\n+        }\n+    }\n+\n     /*\n      * TESTS OF THE VISITOR PATTERN\n      */\n--- a/src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.util.FastMath;\n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n-import org.apache.commons.math3.exception.MathArithmeticException;\n-import org.apache.commons.math3.analysis.function.Abs;\n-import org.apache.commons.math3.analysis.function.Acos;\n-import org.apache.commons.math3.analysis.function.Asin;\n-import org.apache.commons.math3.analysis.function.Atan;\n-import org.apache.commons.math3.analysis.function.Cbrt;\n-import org.apache.commons.math3.analysis.function.Cosh;\n-import org.apache.commons.math3.analysis.function.Cos;\n-import org.apache.commons.math3.analysis.function.Exp;\n-import org.apache.commons.math3.analysis.function.Expm1;\n-import org.apache.commons.math3.analysis.function.Inverse;\n-import org.apache.commons.math3.analysis.function.Log10;\n-import org.apache.commons.math3.analysis.function.Log1p;\n-import org.apache.commons.math3.analysis.function.Log;\n-import org.apache.commons.math3.analysis.function.Sinh;\n-import org.apache.commons.math3.analysis.function.Sin;\n-import org.apache.commons.math3.analysis.function.Sqrt;\n-import org.apache.commons.math3.analysis.function.Tanh;\n-import org.apache.commons.math3.analysis.function.Tan;\n-import org.apache.commons.math3.analysis.function.Floor;\n-import org.apache.commons.math3.analysis.function.Ceil;\n-import org.apache.commons.math3.analysis.function.Rint;\n-import org.apache.commons.math3.analysis.function.Signum;\n-import org.apache.commons.math3.analysis.function.Ulp;\n-import org.apache.commons.math3.analysis.function.Power;\n \n /**\n  * Test cases for the {@link OpenMapRealVector} class.\n     }\n \n     @Test\n-    public void testOuterProduct() {\n-        final OpenMapRealVector u = new OpenMapRealVector(new double[] {1, 2, -3});\n-        final OpenMapRealVector v = new OpenMapRealVector(new double[] {4, -2});\n-\n-        final RealMatrix uv = u.outerProduct(v);\n-\n-        final double tol = Math.ulp(1d);\n-        Assert.assertEquals(4, uv.getEntry(0, 0), tol);\n-        Assert.assertEquals(-2, uv.getEntry(0, 1), tol);\n-        Assert.assertEquals(8, uv.getEntry(1, 0), tol);\n-        Assert.assertEquals(-4, uv.getEntry(1, 1), tol);\n-        Assert.assertEquals(-12, uv.getEntry(2, 0), tol);\n-        Assert.assertEquals(6, uv.getEntry(2, 1), tol);\n-    }\n-\n-    @Test\n-    public void testMisc() {\n-        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n-\n-        String out1 = v1.toString();\n-        Assert.assertTrue(\"some output \",  out1.length()!=0);\n-        try {\n-            v1.checkVectorDimensions(2);\n-            Assert.fail(\"MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n-            // expected behavior\n-        }\n-\n-\n-    }\n-\n-    @Test\n     public void testPredicates() {\n \n         OpenMapRealVector v = new OpenMapRealVector(new double[] { 0, 1, 2 });", "timestamp": 1338788433, "metainfo": ""}