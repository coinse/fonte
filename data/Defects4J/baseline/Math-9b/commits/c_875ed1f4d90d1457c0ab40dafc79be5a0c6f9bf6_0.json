{"sha": "875ed1f4d90d1457c0ab40dafc79be5a0c6f9bf6", "log": "MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard \"Math\" class.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math3/util/FastMath.java\n  * @since 2.2\n  */\n public class FastMath {\n+    /** StrictMath.log(Double.MAX_VALUE): {@value} */\n+    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);\n \n     /** Archimede's constant PI, ratio of circle circumference to diameter. */\n     public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;\n       // for numbers with magnitude 20 or so,\n       // exp(-z) can be ignored in comparison with exp(z)\n \n-      if (x > 20.0) {\n-          return exp(x)/2.0;\n+      if (x > 20) {\n+          if (x >= LOG_MAX_VALUE) {\n+              // Avoid overflow (MATH-905).\n+              final double t = exp(0.5 * x);\n+              return (0.5 * t) * t;\n+          } else {\n+              return 0.5 * exp(x);\n+          }\n+      } else if (x < -20) {\n+          if (x <= -LOG_MAX_VALUE) {\n+              // Avoid overflow (MATH-905).\n+              final double t = exp(-0.5 * x);\n+              return (0.5 * t) * t;\n+          } else {\n+              return 0.5 * exp(-x);\n+          }\n       }\n \n-      if (x < -20) {\n-          return exp(-x)/2.0;\n-      }\n-\n-      double hiPrec[] = new double[2];\n+      final double hiPrec[] = new double[2];\n       if (x < 0.0) {\n           x = -x;\n       }\n       // for values of z larger than about 20,\n       // exp(-z) can be ignored in comparison with exp(z)\n \n-      if (x > 20.0) {\n-          return exp(x)/2.0;\n-      }\n-\n-      if (x < -20) {\n-          return -exp(-x)/2.0;\n+      if (x > 20) {\n+          if (x >= LOG_MAX_VALUE) {\n+              // Avoid overflow (MATH-905).\n+              final double t = exp(0.5 * x);\n+              return (0.5 * t) * t;\n+          } else {\n+              return 0.5 * exp(x);\n+          }\n+      } else if (x < -20) {\n+          if (x <= -LOG_MAX_VALUE) {\n+              // Avoid overflow (MATH-905).\n+              final double t = exp(-0.5 * x);\n+              return (-0.5 * t) * t;\n+          } else {\n+              return -0.5 * exp(-x);\n+          }\n       }\n \n       if (x == 0) {\n--- a/src/test/java/org/apache/commons/math3/util/FastMathTest.java\n+++ b/src/test/java/org/apache/commons/math3/util/FastMathTest.java\n     }\n \n     @Test\n+    public void testMath905LargePositive() {\n+        final double start = StrictMath.log(Double.MAX_VALUE);\n+        final double endT = StrictMath.sqrt(2) * StrictMath.sqrt(Double.MAX_VALUE);\n+        final double end = 2 * StrictMath.log(endT);\n+\n+        double maxErr = 0;\n+        for (double x = start; x < end; x += 1e-3) {\n+            final double tst = FastMath.cosh(x);\n+            final double ref = Math.cosh(x);\n+            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            \n+        }\n+        Assert.assertEquals(0, maxErr, 3);\n+\n+        for (double x = start; x < end; x += 1e-3) {\n+            final double tst = FastMath.sinh(x);\n+            final double ref = Math.sinh(x);\n+            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            \n+        }\n+        Assert.assertEquals(0, maxErr, 3);\n+    }\n+\n+    @Test\n+    public void testMath905LargeNegative() {\n+        final double start = -StrictMath.log(Double.MAX_VALUE);\n+        final double endT = StrictMath.sqrt(2) * StrictMath.sqrt(Double.MAX_VALUE);\n+        final double end = -2 * StrictMath.log(endT);\n+\n+        double maxErr = 0;\n+        for (double x = start; x > end; x -= 1e-3) {\n+            final double tst = FastMath.cosh(x);\n+            final double ref = Math.cosh(x);\n+            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            \n+        }\n+        Assert.assertEquals(0, maxErr, 3);\n+\n+        for (double x = start; x > end; x -= 1e-3) {\n+            final double tst = FastMath.sinh(x);\n+            final double ref = Math.sinh(x);\n+            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            \n+        }\n+        Assert.assertEquals(0, maxErr, 3);\n+    }\n+\n+    @Test\n     public void testHyperbolicInverses() {\n         double maxErr = 0;\n         for (double x = -30; x < 30; x += 0.01) {", "timestamp": 1353936327, "metainfo": ""}