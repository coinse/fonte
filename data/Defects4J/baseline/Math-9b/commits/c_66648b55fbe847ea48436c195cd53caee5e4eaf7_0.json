{"sha": "66648b55fbe847ea48436c195cd53caee5e4eaf7", "log": "new tests  ", "commit": "\n--- a/src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java\n+++ b/src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java\n     }\n     \n     // test submatrix accessors\n-    public void testSubMatrix() {\n-        RealMatrix m = new DenseRealMatrix(subTestData);\n-        RealMatrix mRows23Cols00 = new DenseRealMatrix(subRows23Cols00);\n-        RealMatrix mRows00Cols33 = new DenseRealMatrix(subRows00Cols33);\n-        RealMatrix mRows01Cols23 = new DenseRealMatrix(subRows01Cols23);\n-        RealMatrix mRows02Cols13 = new DenseRealMatrix(subRows02Cols13);\n-        RealMatrix mRows03Cols12 = new DenseRealMatrix(subRows03Cols12);\n-        RealMatrix mRows03Cols123 = new DenseRealMatrix(subRows03Cols123);\n-        RealMatrix mRows20Cols123 = new DenseRealMatrix(subRows20Cols123);\n-        RealMatrix mRows31Cols31 = new DenseRealMatrix(subRows31Cols31);\n-        assertEquals(mRows23Cols00, m.getSubMatrix(2 , 3 , 0, 0));\n-        assertEquals(mRows00Cols33, m.getSubMatrix(0 , 0 , 3, 3));\n-        assertEquals(mRows01Cols23, m.getSubMatrix(0 , 1 , 2, 3));   \n-        assertEquals(mRows02Cols13, m.getSubMatrix(new int[] {0,2}, new int[] {1,3}));  \n-        assertEquals(mRows03Cols12, m.getSubMatrix(new int[] {0,3}, new int[] {1,2}));  \n-        assertEquals(mRows03Cols123, m.getSubMatrix(new int[] {0,3}, new int[] {1,2,3})); \n-        assertEquals(mRows20Cols123, m.getSubMatrix(new int[] {2,0}, new int[] {1,2,3})); \n-        assertEquals(mRows31Cols31, m.getSubMatrix(new int[] {3,1}, new int[] {3,1})); \n-        assertEquals(mRows31Cols31, m.getSubMatrix(new int[] {3,1}, new int[] {3,1})); \n-        \n-        try {\n-            m.getSubMatrix(1,0,2,4);\n-            fail(\"Expecting MatrixIndexException\");\n-        } catch (MatrixIndexException ex) {\n-            // expected\n-        }\n-        try {\n-            m.getSubMatrix(-1,1,2,2);\n-            fail(\"Expecting MatrixIndexException\");\n-        } catch (MatrixIndexException ex) {\n-            // expected\n-        }\n-        try {\n-            m.getSubMatrix(1,0,2,2);\n-            fail(\"Expecting MatrixIndexException\");\n-        } catch (MatrixIndexException ex) {\n-            // expected\n-        }\n-        try {\n-            m.getSubMatrix(1,0,2,4);\n-            fail(\"Expecting MatrixIndexException\");\n-        } catch (MatrixIndexException ex) {\n-            // expected\n-        }\n-        try {\n-            m.getSubMatrix(new int[] {}, new int[] {0});\n-            fail(\"Expecting MatrixIndexException\");\n-        } catch (MatrixIndexException ex) {\n-            // expected\n-        }\n-        try {\n-            m.getSubMatrix(new int[] {0}, new int[] {4});\n-            fail(\"Expecting MatrixIndexException\");\n-        } catch (MatrixIndexException ex) {\n-            // expected\n-        }\n-    }\n-    \n+    public void testGetSubMatrix() {\n+        RealMatrix m = new RealMatrixImpl(subTestData);\n+        checkGetSubMatrix(m, subRows23Cols00,  2 , 3 , 0, 0, false);\n+        checkGetSubMatrix(m, subRows00Cols33,  0 , 0 , 3, 3, false);\n+        checkGetSubMatrix(m, subRows01Cols23,  0 , 1 , 2, 3, false);   \n+        checkGetSubMatrix(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);  \n+        checkGetSubMatrix(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);  \n+        checkGetSubMatrix(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false); \n+        checkGetSubMatrix(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false); \n+        checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false); \n+        checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false); \n+        checkGetSubMatrix(m, null,  1, 0, 2, 4, true);\n+        checkGetSubMatrix(m, null, -1, 1, 2, 2, true);\n+        checkGetSubMatrix(m, null,  1, 0, 2, 2, true);\n+        checkGetSubMatrix(m, null,  1, 0, 2, 4, true);\n+        checkGetSubMatrix(m, null, new int[] {},    new int[] { 0 }, true);\n+        checkGetSubMatrix(m, null, new int[] { 0 }, new int[] { 4 }, true);\n+    }\n+\n+    private void checkGetSubMatrix(RealMatrix m, double[][] reference,\n+                                   int startRow, int endRow, int startColumn, int endColumn,\n+                                   boolean mustFail) {\n+        try {\n+            RealMatrix sub = m.getSubMatrix(startRow, endRow, startColumn, endColumn);\n+            assertEquals(new RealMatrixImpl(reference), sub);\n+            if (mustFail) {\n+                fail(\"Expecting MatrixIndexException\");\n+            }\n+        } catch (MatrixIndexException e) {\n+            if (!mustFail) {\n+                throw e;\n+            }\n+        }\n+    }\n+    \n+    private void checkGetSubMatrix(RealMatrix m, double[][] reference,\n+                                   int[] selectedRows, int[] selectedColumns,\n+                                   boolean mustFail) {\n+        try {\n+            RealMatrix sub = m.getSubMatrix(selectedRows, selectedColumns);\n+            assertEquals(new RealMatrixImpl(reference), sub);\n+            if (mustFail) {\n+                fail(\"Expecting MatrixIndexException\");\n+            }\n+        } catch (MatrixIndexException e) {\n+            if (!mustFail) {\n+                throw e;\n+            }\n+        }\n+    }\n+\n     public void testGetSetMatrixLarge() {\n         int n = 3 * DenseRealMatrix.BLOCK_SIZE;\n         RealMatrix m = new DenseRealMatrix(n, n);\n         assertEquals(sub, m.getSubMatrix(2, n - 3, 2, n - 3));\n \n     }\n-    \n+\n+    public void testCopySubMatrix() {\n+        RealMatrix m = new RealMatrixImpl(subTestData);\n+        checkCopy(m, subRows23Cols00,  2 , 3 , 0, 0, false);\n+        checkCopy(m, subRows00Cols33,  0 , 0 , 3, 3, false);\n+        checkCopy(m, subRows01Cols23,  0 , 1 , 2, 3, false);   \n+        checkCopy(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);  \n+        checkCopy(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);  \n+        checkCopy(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false); \n+        checkCopy(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false); \n+        checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false); \n+        checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false); \n+        \n+        checkCopy(m, null,  1, 0, 2, 4, true);\n+        checkCopy(m, null, -1, 1, 2, 2, true);\n+        checkCopy(m, null,  1, 0, 2, 2, true);\n+        checkCopy(m, null,  1, 0, 2, 4, true);\n+        checkCopy(m, null, new int[] {},    new int[] { 0 }, true);\n+        checkCopy(m, null, new int[] { 0 }, new int[] { 4 }, true);\n+    }\n+\n+    private void checkCopy(RealMatrix m, double[][] reference,\n+                           int startRow, int endRow, int startColumn, int endColumn,\n+                           boolean mustFail) {\n+        try {\n+            double[][] sub = (reference == null) ?\n+                             new double[1][1] :\n+                             new double[reference.length][reference[0].length];\n+            m.copySubMatrix(startRow, endRow, startColumn, endColumn, sub);\n+            assertEquals(new RealMatrixImpl(reference), new RealMatrixImpl(sub));\n+            if (mustFail) {\n+                fail(\"Expecting MatrixIndexException\");\n+            }\n+        } catch (MatrixIndexException e) {\n+            if (!mustFail) {\n+                throw e;\n+            }\n+        }\n+    }\n+    \n+    private void checkCopy(RealMatrix m, double[][] reference,\n+                           int[] selectedRows, int[] selectedColumns,\n+                           boolean mustFail) {\n+        try {\n+            double[][] sub = (reference == null) ?\n+                    new double[1][1] :\n+                    new double[reference.length][reference[0].length];\n+            m.copySubMatrix(selectedRows, selectedColumns, sub);\n+            assertEquals(new RealMatrixImpl(reference), new RealMatrixImpl(sub));\n+            if (mustFail) {\n+                fail(\"Expecting MatrixIndexException\");\n+            }\n+        } catch (MatrixIndexException e) {\n+            if (!mustFail) {\n+                throw e;\n+            }\n+        }\n+    }\n+\n     public void testGetRowMatrix() {\n         RealMatrix m     = new DenseRealMatrix(subTestData);\n         RealMatrix mRow0 = new DenseRealMatrix(subRow0);\n \n     }\n     \n-    private static class SetVisitor implements RealMatrixChangingVisitor {\n-        private static final long serialVersionUID = -5724808764099124932L;\n-        public void start(int rows, int columns, int startRow, int endRow,\n-                int startColumn, int endColumn) {\n-        }\n+    private static class SetVisitor extends DefaultRealMatrixChangingVisitor {\n+        private static final long serialVersionUID = 1773444180892369386L;\n         public double visit(int i, int j, double value) {\n             return i + j / 1024.0;\n         }\n-        public double end() {\n-            return 0;\n-        }\n-    }\n-\n-    private static class GetVisitor implements RealMatrixPreservingVisitor {\n-        private static final long serialVersionUID = 1299771253908695242L;\n-        int count = 0;\n-        public void start(int rows, int columns, int startRow, int endRow,\n-                int startColumn, int endColumn) {\n-        }\n+    }\n+\n+    private static class GetVisitor extends DefaultRealMatrixPreservingVisitor {\n+        private static final long serialVersionUID = -7745543227178932689L;\n+        private int count = 0;\n         public void visit(int i, int j, double value) {\n             ++count;\n             assertEquals(i + j / 1024.0, value, 0.0);\n         }\n         public int getCount() {\n             return count;\n-        }\n-        public double end() {\n-            return 0;\n         }\n     };\n \n--- a/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n     }\n     \n     // test submatrix accessors\n-    public void testSubMatrix() {\n-        RealMatrix m = new RealMatrixImpl(subTestData);\n-        RealMatrix mRows23Cols00 = new RealMatrixImpl(subRows23Cols00);\n-        RealMatrix mRows00Cols33 = new RealMatrixImpl(subRows00Cols33);\n-        RealMatrix mRows01Cols23 = new RealMatrixImpl(subRows01Cols23);\n-        RealMatrix mRows02Cols13 = new RealMatrixImpl(subRows02Cols13);\n-        RealMatrix mRows03Cols12 = new RealMatrixImpl(subRows03Cols12);\n-        RealMatrix mRows03Cols123 = new RealMatrixImpl(subRows03Cols123);\n-        RealMatrix mRows20Cols123 = new RealMatrixImpl(subRows20Cols123);\n-        RealMatrix mRows31Cols31 = new RealMatrixImpl(subRows31Cols31);\n-        assertEquals(\"Rows23Cols00\", mRows23Cols00, \n-                m.getSubMatrix(2 , 3 , 0, 0));\n-        assertEquals(\"Rows00Cols33\", mRows00Cols33, \n-                m.getSubMatrix(0 , 0 , 3, 3));\n-        assertEquals(\"Rows01Cols23\", mRows01Cols23,\n-                m.getSubMatrix(0 , 1 , 2, 3));   \n-        assertEquals(\"Rows02Cols13\", mRows02Cols13,\n-                m.getSubMatrix(new int[] {0,2}, new int[] {1,3}));  \n-        assertEquals(\"Rows03Cols12\", mRows03Cols12,\n-                m.getSubMatrix(new int[] {0,3}, new int[] {1,2}));  \n-        assertEquals(\"Rows03Cols123\", mRows03Cols123,\n-                m.getSubMatrix(new int[] {0,3}, new int[] {1,2,3})); \n-        assertEquals(\"Rows20Cols123\", mRows20Cols123,\n-                m.getSubMatrix(new int[] {2,0}, new int[] {1,2,3})); \n-        assertEquals(\"Rows31Cols31\", mRows31Cols31,\n-                m.getSubMatrix(new int[] {3,1}, new int[] {3,1})); \n-        assertEquals(\"Rows31Cols31\", mRows31Cols31,\n-                m.getSubMatrix(new int[] {3,1}, new int[] {3,1})); \n-        \n-        try {\n-            m.getSubMatrix(1,0,2,4);\n-            fail(\"Expecting MatrixIndexException\");\n-        } catch (MatrixIndexException ex) {\n-            // expected\n-        }\n-        try {\n-            m.getSubMatrix(-1,1,2,2);\n-            fail(\"Expecting MatrixIndexException\");\n-        } catch (MatrixIndexException ex) {\n-            // expected\n-        }\n-        try {\n-            m.getSubMatrix(1,0,2,2);\n-            fail(\"Expecting MatrixIndexException\");\n-        } catch (MatrixIndexException ex) {\n-            // expected\n-        }\n-        try {\n-            m.getSubMatrix(1,0,2,4);\n-            fail(\"Expecting MatrixIndexException\");\n-        } catch (MatrixIndexException ex) {\n-            // expected\n-        }\n-        try {\n-            m.getSubMatrix(new int[] {}, new int[] {0});\n-            fail(\"Expecting MatrixIndexException\");\n-        } catch (MatrixIndexException ex) {\n-            // expected\n-        }\n-        try {\n-            m.getSubMatrix(new int[] {0}, new int[] {4});\n-            fail(\"Expecting MatrixIndexException\");\n-        } catch (MatrixIndexException ex) {\n-            // expected\n-        }\n-    }\n-    \n+    public void testGetSubMatrix() {\n+        RealMatrix m = new RealMatrixImpl(subTestData);\n+        checkGetSubMatrix(m, subRows23Cols00,  2 , 3 , 0, 0, false);\n+        checkGetSubMatrix(m, subRows00Cols33,  0 , 0 , 3, 3, false);\n+        checkGetSubMatrix(m, subRows01Cols23,  0 , 1 , 2, 3, false);   \n+        checkGetSubMatrix(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);  \n+        checkGetSubMatrix(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);  \n+        checkGetSubMatrix(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false); \n+        checkGetSubMatrix(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false); \n+        checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false); \n+        checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false); \n+        checkGetSubMatrix(m, null,  1, 0, 2, 4, true);\n+        checkGetSubMatrix(m, null, -1, 1, 2, 2, true);\n+        checkGetSubMatrix(m, null,  1, 0, 2, 2, true);\n+        checkGetSubMatrix(m, null,  1, 0, 2, 4, true);\n+        checkGetSubMatrix(m, null, new int[] {},    new int[] { 0 }, true);\n+        checkGetSubMatrix(m, null, new int[] { 0 }, new int[] { 4 }, true);\n+    }\n+\n+    private void checkGetSubMatrix(RealMatrix m, double[][] reference,\n+                                   int startRow, int endRow, int startColumn, int endColumn,\n+                                   boolean mustFail) {\n+        try {\n+            RealMatrix sub = m.getSubMatrix(startRow, endRow, startColumn, endColumn);\n+            assertEquals(new RealMatrixImpl(reference), sub);\n+            if (mustFail) {\n+                fail(\"Expecting MatrixIndexException\");\n+            }\n+        } catch (MatrixIndexException e) {\n+            if (!mustFail) {\n+                throw e;\n+            }\n+        }\n+    }\n+    \n+    private void checkGetSubMatrix(RealMatrix m, double[][] reference,\n+                                   int[] selectedRows, int[] selectedColumns,\n+                                   boolean mustFail) {\n+        try {\n+            RealMatrix sub = m.getSubMatrix(selectedRows, selectedColumns);\n+            assertEquals(new RealMatrixImpl(reference), sub);\n+            if (mustFail) {\n+                fail(\"Expecting MatrixIndexException\");\n+            }\n+        } catch (MatrixIndexException e) {\n+            if (!mustFail) {\n+                throw e;\n+            }\n+        }\n+    }\n+\n+    public void testCopySubMatrix() {\n+        RealMatrix m = new RealMatrixImpl(subTestData);\n+        checkCopy(m, subRows23Cols00,  2 , 3 , 0, 0, false);\n+        checkCopy(m, subRows00Cols33,  0 , 0 , 3, 3, false);\n+        checkCopy(m, subRows01Cols23,  0 , 1 , 2, 3, false);   \n+        checkCopy(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);  \n+        checkCopy(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);  \n+        checkCopy(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false); \n+        checkCopy(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false); \n+        checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false); \n+        checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false); \n+        \n+        checkCopy(m, null,  1, 0, 2, 4, true);\n+        checkCopy(m, null, -1, 1, 2, 2, true);\n+        checkCopy(m, null,  1, 0, 2, 2, true);\n+        checkCopy(m, null,  1, 0, 2, 4, true);\n+        checkCopy(m, null, new int[] {},    new int[] { 0 }, true);\n+        checkCopy(m, null, new int[] { 0 }, new int[] { 4 }, true);\n+    }\n+\n+    private void checkCopy(RealMatrix m, double[][] reference,\n+                           int startRow, int endRow, int startColumn, int endColumn,\n+                           boolean mustFail) {\n+        try {\n+            double[][] sub = (reference == null) ?\n+                             new double[1][1] :\n+                             new double[reference.length][reference[0].length];\n+            m.copySubMatrix(startRow, endRow, startColumn, endColumn, sub);\n+            assertEquals(new RealMatrixImpl(reference), new RealMatrixImpl(sub));\n+            if (mustFail) {\n+                fail(\"Expecting MatrixIndexException\");\n+            }\n+        } catch (MatrixIndexException e) {\n+            if (!mustFail) {\n+                throw e;\n+            }\n+        }\n+    }\n+    \n+    private void checkCopy(RealMatrix m, double[][] reference,\n+                           int[] selectedRows, int[] selectedColumns,\n+                           boolean mustFail) {\n+        try {\n+            double[][] sub = (reference == null) ?\n+                    new double[1][1] :\n+                    new double[reference.length][reference[0].length];\n+            m.copySubMatrix(selectedRows, selectedColumns, sub);\n+            assertEquals(new RealMatrixImpl(reference), new RealMatrixImpl(sub));\n+            if (mustFail) {\n+                fail(\"Expecting MatrixIndexException\");\n+            }\n+        } catch (MatrixIndexException e) {\n+            if (!mustFail) {\n+                throw e;\n+            }\n+        }\n+    }\n+\n     public void testGetRowMatrix() {\n         RealMatrix m = new RealMatrixImpl(subTestData);\n         RealMatrix mRow0 = new RealMatrixImpl(subRow0);\n \n     }\n     \n-    private static class SetVisitor implements RealMatrixChangingVisitor {\n-        private static final long serialVersionUID = -5724808764099124932L;\n-        public void start(int rows, int columns, int startRow, int endRow,\n-                int startColumn, int endColumn) {\n-        }\n+    private static class SetVisitor extends DefaultRealMatrixChangingVisitor {\n+        private static final long serialVersionUID = -5082825244208703349L;\n         public double visit(int i, int j, double value) {\n             return i + j / 1024.0;\n         }\n-        public double end() {\n-            return 0;\n-        }\n-    }\n-\n-    private static class GetVisitor implements RealMatrixPreservingVisitor {\n-        private static final long serialVersionUID = 1299771253908695242L;\n-        int count = 0;\n-        public void start(int rows, int columns, int startRow, int endRow,\n-                int startColumn, int endColumn) {\n-        }\n+    }\n+\n+    private static class GetVisitor extends DefaultRealMatrixPreservingVisitor {\n+        private static final long serialVersionUID = 849639072339030818L;\n+        private int count = 0;\n         public void visit(int i, int j, double value) {\n             ++count;\n             assertEquals(i + j / 1024.0, value, 0.0);\n         }\n         public int getCount() {\n             return count;\n-        }\n-        public double end() {\n-            return 0;\n         }\n     };\n ", "timestamp": 1231072597, "metainfo": ""}