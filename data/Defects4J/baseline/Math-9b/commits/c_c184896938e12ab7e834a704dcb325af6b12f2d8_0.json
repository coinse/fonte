{"sha": "c184896938e12ab7e834a704dcb325af6b12f2d8", "log": "Edited javadoc.  ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java\n import org.apache.commons.math.util.MathUtils;\n \n /**\n- * <p>Computes summary statistics for a stream of data values added using the \n- * {@link #addValue(double[]) addValue} method. The data values are not stored in\n- * memory, so this class can be used to compute statistics for very large\n- * data streams.</p>\n+ * <p>Computes summary statistics for a stream of n-tuples added using the \n+ * {@link #addValue(double[]) addValue} method. The data values are not stored\n+ * in memory, so this class can be used to compute statistics for very large\n+ * n-tuple streams.</p>\n  * \n- * <p>The {@link StorelessUnivariateStatistic} array instances used to maintain\n+ * <p>The {@link StorelessUnivariateStatistic} instances used to maintain\n  * summary state and compute statistics are configurable via setters.\n  * For example, the default implementation for the mean can be overridden by\n  * calling {@link #setMeanImpl(StorelessUnivariateStatistic[])}. Actual\n  * {@link StorelessUnivariateStatistic} interface and configuration must be\n  * completed before <code>addValue</code> is called. No configuration is\n  * necessary to use the default, commons-math provided implementations.</p>\n+ * \n+ * <p>To compute statistics for a stream of n-tuples, construct a\n+ * MultivariateStatistics instance with dimension n and then use \n+ * {{@link #addValue(double[])} to add n-tuples. The <code>getXxx</code>\n+ * methods where Xxx is a statistic return an array of <code>double</code>\n+ * values, where for <code>i = 0,...,n-1</code> the ith array element is the\n+ * value of the given statistic for data range consisting of the ith element of\n+ * each of the input n-tuples.  For example, if <code>addValue</code> is called\n+ * with actual parameters {0, 1, 2}, then {3, 4, 5} and finally {6, 7, 8},\n+ * <code>getSum</code> will return a three-element array with values\n+ * {0+3+6, 1+4+7, 2+5+8}</p>\n  * \n  * <p>Note: This class is not thread-safe. Use \n  * {@link SynchronizedMultivariateSummaryStatistics} if concurrent access from multiple\n      */\n     public StatisticalMultivariateSummary getSummary() {\n         return new StatisticalMultivariateSummaryValues(getDimension(), getMean(),\n-                                                        getCovariance(), getStandardDeviation(),\n-                                                        getN(), getMax(), getMin(),\n-                                                        getSum(), getSumSq(), getSumLog());\n-    }\n-    \n-    /**\n-     * Add a value to the data\n-     * \n-     * @param value  the value to add\n-     * @throws DimensionMismatchException if the value dimension\n+                    getCovariance(), getStandardDeviation(),\n+                    getN(), getMax(), getMin(),\n+                    getSum(), getSumSq(), getSumLog());\n+    }\n+    \n+    /**\n+     * Add an n-tuple to the data\n+     * \n+     * @param value  the n-tuple to add\n+     * @throws DimensionMismatchException if the length of the array\n      * does not match the one used at construction\n      */\n     public void addValue(double[] value)\n     }\n \n     /**\n-     * Returns the sum of the values that have been added\n-     * @return The sum or <code>Double.NaN</code> if no values have been added\n+     * Returns an array whose ith entry is the sum of the\n+     * ith entries of the arrays that have been added using \n+     * {@link #addValue(double[])}\n+     * \n+     * @return the array of component sums\n      */\n     public double[] getSum() {\n         return getResults(sumImpl);\n     }\n \n     /**\n-     * Returns the sum of the squares of the values that have been added.\n-     * <p>\n-     *  Double.NaN is returned if no values have been added.</p>\n-     * \n-     * @return The sum of squares\n+     * Returns an array whose ith entry is the sum of squares of the\n+     * ith entries of the arrays that have been added using \n+     * {@link #addValue(double[])}\n+     * \n+     * @return the array of component sums of squares\n      */\n     public double[] getSumSq() {\n         return getResults(sumSqImpl);\n     }\n \n     /**\n-     * Returns the sum of the logarithms of the values that have been added.\n-     * <p>\n-     *  Double.NaN is returned if no values have been added.</p>\n-     * \n-     * @return The sum of logarithms\n+     * Returns an array whose ith entry is the sum of logs of the\n+     * ith entries of the arrays that have been added using \n+     * {@link #addValue(double[])}\n+     * \n+     * @return the array of component log sums\n      */\n     public double[] getSumLog() {\n         return getResults(sumLogImpl);\n     }\n \n     /**\n-     * Returns the mean of the values that have been added.\n-     * <p>\n-     *  Double.NaN is returned if no values have been added.</p>\n-     * \n-     * @return the mean\n+     * Returns an array whose ith entry is the mean of the\n+     * ith entries of the arrays that have been added using \n+     * {@link #addValue(double[])}\n+     * \n+     * @return the array of component means\n      */\n     public double[] getMean() {\n         return getResults(meanImpl);\n     }\n \n     /**\n-     * Returns the standard deviation of the values that have been added.\n-     * <p>\n-     *  Double.NaN is returned if no values have been added.</p>\n-     * \n-     * @return the standard deviation\n+     * Returns an array whose ith entry is the standard deviation of the\n+     * ith entries of the arrays that have been added using \n+     * {@link #addValue(double[])}\n+     * \n+     * @return the array of component standard deviations\n      */\n     public double[] getStandardDeviation() {\n         double[] stdDev = new double[k];\n     }\n \n     /**\n-     * Returns the covariance of the values that have been added.\n-     * <p>\n-     *  Double.NaN is returned if no values have been added.</p>\n+     * Returns the covariance matrix of the values that have been added.\n      *\n      * @return the variance \n      */\n     }\n \n     /**\n-     * Returns the maximum of the values that have been added.\n-     * <p>\n-     *  Double.NaN is returned if no values have been added.</p>\n-     *\n-     * @return the maximum  \n+     * Returns an array whose ith entry is the maximum of the\n+     * ith entries of the arrays that have been added using \n+     * {@link #addValue(double[])}\n+     * \n+     * @return the array of component maxima\n      */\n     public double[] getMax() {\n         return getResults(maxImpl);\n     }\n \n     /**\n-     * Returns the minimum of the values that have been added.\n-     * <p>\n-     *  Double.NaN is returned if no values have been added.</p>\n-     *\n-     * @return the minimum  \n+     * Returns an array whose ith entry is the minimum of the\n+     * ith entries of the arrays that have been added using \n+     * {@link #addValue(double[])}\n+     * \n+     * @return the array of component minima\n      */\n     public double[] getMin() {\n         return getResults(minImpl);\n     }\n \n     /**\n-     * Returns the geometric mean of the values that have been added.\n-     * <p>\n-     *  Double.NaN is returned if no values have been added.</p>\n-     *\n-     * @return the geometric mean  \n+     * Returns an array whose ith entry is the geometric mean of the\n+     * ith entries of the arrays that have been added using \n+     * {@link #addValue(double[])}\n+     * \n+     * @return the array of component geometric means\n      */\n     public double[] getGeometricMean() {\n         return getResults(geoMeanImpl);", "timestamp": 1202603649, "metainfo": ""}