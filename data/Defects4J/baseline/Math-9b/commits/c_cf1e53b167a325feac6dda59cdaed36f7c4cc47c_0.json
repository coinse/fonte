{"sha": "cf1e53b167a325feac6dda59cdaed36f7c4cc47c", "log": "Trailing spaces  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math/util/FastMath.java\n      * Equivalent to 2^30.\n      */\n     private static final long HEX_40000000 = 0x40000000L; // 1073741824L\n-    \n+\n     /** Mask used to clear low order 30 bits */\n     private static final long MASK_30BITS = -1L - (HEX_40000000 -1); // 0xFFFFFFFFC0000000L;\n \n     }\n \n     // Generic helper methods\n-    \n+\n     /**\n      * Get the high order bits from the mantissa.\n      * Equivalent to adding and subtracting HEX_40000 but also works for very large numbers\n-     * \n+     *\n      * @param d the value to split\n      * @return the high order part of the mantissa\n      */\n     public static double IEEEremainder(double dividend, double divisor) {\n         return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation\n     }\n-    \n+\n     /**\n      * Returns the first argument with the sign of the second argument.\n      * A NaN {@code sign} argument is treated as positive.\n-     * \n+     *\n      * @param magnitude the value to return\n      * @param sign the sign for the returned value\n      * @return the magnitude with the same sign as the {@code sign} argument\n     /**\n      * Returns the first argument with the sign of the second argument.\n      * A NaN {@code sign} argument is treated as positive.\n-     * \n+     *\n      * @param magnitude the value to return\n      * @param sign the sign for the returned value\n      * @return the magnitude with the same sign as the {@code sign} argument", "timestamp": 1295908475, "metainfo": ""}