{"sha": "127b03135e6a0775eac27dd1e29d06ec4e7a55a0", "log": "removed MathUserException from transform package  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java\n  */\n package org.apache.commons.math.transform;\n \n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.complex.Complex;\n      * @param max the upper bound for the interval\n      * @param n the number of sample points\n      * @return the real transformed array\n-     * @throws MathUserException if function cannot be evaluated\n-     * at some point\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n     public double[] transform(UnivariateRealFunction f,\n                               double min, double max, int n)\n-        throws MathUserException, IllegalArgumentException {\n+        throws IllegalArgumentException {\n         double data[] = FastFourierTransformer.sample(f, min, max, n);\n         return fct(data);\n     }\n      * @param max the upper bound for the interval\n      * @param n the number of sample points\n      * @return the real transformed array\n-     * @throws MathUserException if function cannot be evaluated\n-     * at some point\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n     public double[] transform2(UnivariateRealFunction f,\n                                double min, double max, int n)\n-        throws MathUserException, IllegalArgumentException {\n+        throws IllegalArgumentException {\n \n         double data[] = FastFourierTransformer.sample(f, min, max, n);\n         double scaling_coefficient = FastMath.sqrt(2.0 / (n-1));\n      * @param max the upper bound for the interval\n      * @param n the number of sample points\n      * @return the real inversely transformed array\n-     * @throws MathUserException if function cannot be evaluated at some point\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n     public double[] inversetransform(UnivariateRealFunction f,\n                                      double min, double max, int n)\n-        throws MathUserException, IllegalArgumentException {\n+        throws IllegalArgumentException {\n \n         double data[] = FastFourierTransformer.sample(f, min, max, n);\n         double scaling_coefficient = 2.0 / (n - 1);\n      * @param max the upper bound for the interval\n      * @param n the number of sample points\n      * @return the real inversely transformed array\n-     * @throws MathUserException if function cannot be evaluated at some point\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n     public double[] inversetransform2(UnivariateRealFunction f,\n                                       double min, double max, int n)\n-        throws MathUserException, IllegalArgumentException {\n+        throws IllegalArgumentException {\n \n         return transform2(f, min, max, n);\n     }\n--- a/src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java\n import java.io.Serializable;\n import java.lang.reflect.Array;\n \n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.complex.Complex;\n      * @param max the upper bound for the interval\n      * @param n the number of sample points\n      * @return the complex transformed array\n-     * @throws MathUserException if function cannot be evaluated\n-     * at some point\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n     public Complex[] transform(UnivariateRealFunction f,\n                                double min, double max, int n)\n-        throws MathUserException, IllegalArgumentException {\n+        throws IllegalArgumentException {\n         double data[] = sample(f, min, max, n);\n         return fft(data, false);\n     }\n      * @param max the upper bound for the interval\n      * @param n the number of sample points\n      * @return the complex transformed array\n-     * @throws MathUserException if function cannot be evaluated\n-     * at some point\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n     public Complex[] transform2(UnivariateRealFunction f,\n                                 double min, double max, int n)\n-        throws MathUserException, IllegalArgumentException {\n+        throws IllegalArgumentException {\n \n         double data[] = sample(f, min, max, n);\n         double scaling_coefficient = 1.0 / FastMath.sqrt(n);\n      * @param max the upper bound for the interval\n      * @param n the number of sample points\n      * @return the complex inversely transformed array\n-     * @throws MathUserException if function cannot be evaluated\n-     * at some point\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n     public Complex[] inversetransform(UnivariateRealFunction f,\n                                       double min, double max, int n)\n-        throws MathUserException, IllegalArgumentException {\n+        throws IllegalArgumentException {\n \n         double data[] = sample(f, min, max, n);\n         double scaling_coefficient = 1.0 / n;\n      * @param max the upper bound for the interval\n      * @param n the number of sample points\n      * @return the complex inversely transformed array\n-     * @throws MathUserException if function cannot be evaluated\n-     * at some point\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n     public Complex[] inversetransform2(UnivariateRealFunction f,\n                                        double min, double max, int n)\n-        throws MathUserException, IllegalArgumentException {\n+        throws IllegalArgumentException {\n \n         double data[] = sample(f, min, max, n);\n         double scaling_coefficient = 1.0 / FastMath.sqrt(n);\n      * @param max the upper bound for the interval\n      * @param n the number of sample points\n      * @return the samples array\n-     * @throws MathUserException if function cannot be evaluated at some point\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n     public static double[] sample(UnivariateRealFunction f, double min, double max, int n)\n-        throws MathUserException, IllegalArgumentException {\n+        throws IllegalArgumentException {\n \n         if (n <= 0) {\n             throw MathRuntimeException.createIllegalArgumentException(\n--- a/src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java\n  */\n package org.apache.commons.math.transform;\n \n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n     /** {@inheritDoc} */\n     public double[] transform(UnivariateRealFunction f,\n                               double min, double max, int n)\n-        throws MathUserException, IllegalArgumentException {\n+        throws IllegalArgumentException {\n         return fht(FastFourierTransformer.sample(f, min, max, n));\n     }\n \n     /** {@inheritDoc} */\n     public double[] inversetransform(UnivariateRealFunction f,\n                                      double min, double max, int n)\n-        throws MathUserException, IllegalArgumentException {\n+        throws IllegalArgumentException {\n         final double[] unscaled =\n             fht(FastFourierTransformer.sample(f, min, max, n));\n         return FastFourierTransformer.scaleArray(unscaled, 1.0 / n);\n--- a/src/main/java/org/apache/commons/math/transform/FastSineTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastSineTransformer.java\n  */\n package org.apache.commons.math.transform;\n \n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.complex.Complex;\n      * @param max the upper bound for the interval\n      * @param n the number of sample points\n      * @return the real transformed array\n-     * @throws MathUserException if function cannot be evaluated\n-     * at some point\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n     public double[] transform(UnivariateRealFunction f,\n                               double min, double max, int n)\n-        throws MathUserException, IllegalArgumentException {\n+        throws IllegalArgumentException {\n \n         double data[] = FastFourierTransformer.sample(f, min, max, n);\n         data[0] = 0.0;\n      * @param max the upper bound for the interval\n      * @param n the number of sample points\n      * @return the real transformed array\n-     * @throws MathUserException if function cannot be evaluated\n-     * at some point\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n     public double[] transform2(\n         UnivariateRealFunction f, double min, double max, int n)\n-        throws MathUserException, IllegalArgumentException {\n+        throws IllegalArgumentException {\n \n         double data[] = FastFourierTransformer.sample(f, min, max, n);\n         data[0] = 0.0;\n      * @param max the upper bound for the interval\n      * @param n the number of sample points\n      * @return the real inversely transformed array\n-     * @throws MathUserException if function cannot be evaluated at some point\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n     public double[] inversetransform(UnivariateRealFunction f, double min, double max, int n)\n-        throws MathUserException, IllegalArgumentException {\n+        throws IllegalArgumentException {\n \n         double data[] = FastFourierTransformer.sample(f, min, max, n);\n         data[0] = 0.0;\n      * @param max the upper bound for the interval\n      * @param n the number of sample points\n      * @return the real inversely transformed array\n-     * @throws MathUserException if function cannot be evaluated at some point\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n     public double[] inversetransform2(UnivariateRealFunction f, double min, double max, int n)\n-        throws MathUserException, IllegalArgumentException {\n+        throws IllegalArgumentException {\n \n         return transform2(f, min, max, n);\n     }\n--- a/src/main/java/org/apache/commons/math/transform/RealTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/RealTransformer.java\n  */\n package org.apache.commons.math.transform;\n \n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n \n /**\n      * @param max the upper bound for the interval\n      * @param n the number of sample points\n      * @return the real transformed array\n-     * @throws MathUserException if function cannot be evaluated at some point\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n     double[] transform(UnivariateRealFunction f, double min, double max, int n)\n-        throws MathUserException, IllegalArgumentException;\n+        throws IllegalArgumentException;\n \n     /**\n      * Inversely transform the given real data set.\n      * @param max the upper bound for the interval\n      * @param n the number of sample points\n      * @return the real inversely transformed array\n-     * @throws MathUserException if function cannot be evaluated at some point\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n     double[] inversetransform(UnivariateRealFunction f, double min, double max, int n)\n-        throws MathUserException, IllegalArgumentException;\n+        throws IllegalArgumentException;\n \n }", "timestamp": 1315339187, "metainfo": ""}