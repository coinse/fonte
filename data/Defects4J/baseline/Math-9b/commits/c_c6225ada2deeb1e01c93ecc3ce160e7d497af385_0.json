{"sha": "c6225ada2deeb1e01c93ecc3ce160e7d497af385", "log": "Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/PreconditionedIterativeLinearSolver.java\n+++ b/src/main/java/org/apache/commons/math3/linear/PreconditionedIterativeLinearSolver.java\n  * <p>\n  * This abstract class defines preconditioned iterative solvers. When A is\n  * ill-conditioned, instead of solving system A &middot; x = b directly, it is\n- * preferable to solve M<sup>-1</sup> &middot; A &middot; x = M<sup>-1</sup>\n- * &middot; b, where M approximates in some way A, while remaining comparatively\n- * easier to invert. M (not M<sup>-1</sup>!) is called the\n+ * preferable to solve either\n+ * <center>\n+ * (M &middot; A) &middot; x = M &middot; b\n+ * </center>\n+ * (left preconditioning), or\n+ * <center>\n+ * (A &middot; M) &middot; y = b, &nbsp;&nbsp;&nbsp;&nbsp;followed by\n+ * M &middot; y = x\n+ * </center>\n+ * (right preconditioning), where M approximates in some way A<sup>-1</sup>,\n+ * while matrix-vector products of the type M &middot; y remain comparatively\n+ * easy to compute. In this library, M (not M<sup>-1</sup>!) is called the\n  * <em>preconditionner</em>.\n  * </p>\n  * <p>\n- * Concrete implementations of this abstract class must be provided with\n- * M<sup>-1</sup>, the inverse of the preconditioner, as a\n- * {@link RealLinearOperator}.\n+ * Concrete implementations of this abstract class must be provided with the\n+ * preconditioner M, as a {@link RealLinearOperator}.\n  * </p>\n  *\n  * @version $Id$\n      * b.\n      *\n      * @param a the linear operator A of the system\n-     * @param minv the inverse of the preconditioner, M<sup>-1</sup>\n-     * (can be {@code null})\n+     * @param m the preconditioner, M (can be {@code null})\n      * @param b the right-hand side vector\n      * @param x0 the initial guess of the solution\n      * @return a new vector containing the solution\n      * @throws NullArgumentException if one of the parameters is {@code null}\n-     * @throws NonSquareOperatorException if {@code a} or {@code minv} is not\n-     * square\n-     * @throws DimensionMismatchException if {@code minv}, {@code b} or\n+     * @throws NonSquareOperatorException if {@code a} or {@code m} is not\n+     * square\n+     * @throws DimensionMismatchException if {@code m}, {@code b} or\n      * {@code x0} have dimensions inconsistent with {@code a}\n      * @throws MaxCountExceededException at exhaustion of the iteration count,\n      * unless a custom\n      * has been set at construction\n      */\n     public RealVector solve(final RealLinearOperator a,\n-        final RealLinearOperator minv, final RealVector b, final RealVector x0)\n+        final RealLinearOperator m, final RealVector b, final RealVector x0)\n         throws NullArgumentException, NonSquareOperatorException,\n         DimensionMismatchException, MaxCountExceededException {\n         MathUtils.checkNotNull(x0);\n-        return solveInPlace(a, minv, b, x0.copy());\n+        return solveInPlace(a, m, b, x0.copy());\n     }\n \n     /** {@inheritDoc} */\n      * and throws an exception if one of the checks fails.\n      *\n      * @param a the linear operator A of the system\n-     * @param minv the inverse of the preconditioner, M<sup>-1</sup>\n-     * (can be {@code null})\n+     * @param m the preconditioner, M (can be {@code null})\n      * @param b the right-hand side vector\n      * @param x0 the initial guess of the solution\n      * @throws NullArgumentException if one of the parameters is {@code null}\n-     * @throws NonSquareOperatorException if {@code a} or {@code minv} is not\n-     * square\n-     * @throws DimensionMismatchException if {@code minv}, {@code b} or\n+     * @throws NonSquareOperatorException if {@code a} or {@code m} is not\n+     * square\n+     * @throws DimensionMismatchException if {@code m}, {@code b} or\n      * {@code x0} have dimensions inconsistent with {@code a}\n      */\n     protected static void checkParameters(final RealLinearOperator a,\n-        final RealLinearOperator minv, final RealVector b, final RealVector x0)\n+        final RealLinearOperator m, final RealVector b, final RealVector x0)\n         throws NullArgumentException, NonSquareOperatorException,\n         DimensionMismatchException {\n         checkParameters(a, b, x0);\n-        if (minv != null) {\n-            if (minv.getColumnDimension() != minv.getRowDimension()) {\n-                throw new NonSquareOperatorException(minv.getColumnDimension(),\n-                                                     minv.getRowDimension());\n+        if (m != null) {\n+            if (m.getColumnDimension() != m.getRowDimension()) {\n+                throw new NonSquareOperatorException(m.getColumnDimension(),\n+                                                     m.getRowDimension());\n             }\n-            if (minv.getRowDimension() != a.getRowDimension()) {\n-                throw new DimensionMismatchException(minv.getRowDimension(),\n+            if (m.getRowDimension() != a.getRowDimension()) {\n+                throw new DimensionMismatchException(m.getRowDimension(),\n                                                      a.getRowDimension());\n             }\n         }\n      * b.\n      *\n      * @param a the linear operator A of the system\n-     * @param minv the inverse of the preconditioner, M<sup>-1</sup>\n-     * (can be {@code null})\n+     * @param m the preconditioner, M (can be {@code null})\n      * @param b the right-hand side vector\n      * @return a new vector containing the solution\n      * @throws NullArgumentException if one of the parameters is {@code null}\n-     * @throws NonSquareOperatorException if {@code a} or {@code minv} is not\n-     * square\n-     * @throws DimensionMismatchException if {@code minv} or {@code b} have\n+     * @throws NonSquareOperatorException if {@code a} or {@code m} is not\n+     * square\n+     * @throws DimensionMismatchException if {@code m} or {@code b} have\n      * dimensions inconsistent with {@code a}\n      * @throws MaxCountExceededException at exhaustion of the iteration count,\n      * unless a custom\n      * {@link org.apache.commons.math3.util.Incrementor.MaxCountExceededCallback callback}\n      * has been set at construction\n      */\n-    public RealVector solve(RealLinearOperator a, RealLinearOperator minv,\n+    public RealVector solve(RealLinearOperator a, RealLinearOperator m,\n         RealVector b) throws NullArgumentException, NonSquareOperatorException,\n         DimensionMismatchException, MaxCountExceededException {\n         MathUtils.checkNotNull(a);\n         final RealVector x = new ArrayRealVector(a.getColumnDimension());\n-        return solveInPlace(a, minv, b, x);\n+        return solveInPlace(a, m, b, x);\n     }\n \n     /**\n      * b. The solution is computed in-place (initial guess is modified).\n      *\n      * @param a the linear operator A of the system\n-     * @param minv the inverse of the preconditioner, M<sup>-1</sup>\n-     * (can be {@code null})\n+     * @param m the preconditioner, M (can be {@code null})\n      * @param b the right-hand side vector\n      * @param x0 the initial guess of the solution\n      * @return a reference to {@code x0} (shallow copy) updated with the\n      * solution\n      * @throws NullArgumentException if one of the parameters is {@code null}\n-     * @throws NonSquareOperatorException if {@code a} or {@code minv} is not\n-     * square\n-     * @throws DimensionMismatchException if {@code minv}, {@code b} or\n+     * @throws NonSquareOperatorException if {@code a} or {@code m} is not\n+     * square\n+     * @throws DimensionMismatchException if {@code m}, {@code b} or\n      * {@code x0} have dimensions inconsistent with {@code a}\n      * @throws MaxCountExceededException at exhaustion of the iteration count,\n      * unless a custom\n      * has been set at construction.\n      */\n     public abstract RealVector solveInPlace(RealLinearOperator a,\n-        RealLinearOperator minv, RealVector b, RealVector x0) throws\n+        RealLinearOperator m, RealVector b, RealVector x0) throws\n         NullArgumentException, NonSquareOperatorException,\n         DimensionMismatchException, MaxCountExceededException;\n ", "timestamp": 1332828135, "metainfo": ""}