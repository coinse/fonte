{"sha": "425bd834af7f0bb78d9588ced0d3ef438af216a4", "log": "fixed call to deprecated method  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java\n         //octave =  v1 .+ 2.0\n         FieldVector<Fraction> v_mapAdd = v1.mapAdd(new Fraction(2));\n         Fraction[] result_mapAdd = {new Fraction(3), new Fraction(4), new Fraction(5)};\n-        Assert.assertEquals(\"compare vectors\" ,result_mapAdd,v_mapAdd.getData());\n+        Assert.assertArrayEquals(\"compare vectors\" ,result_mapAdd,v_mapAdd.getData());\n \n         //octave =  v1 .+ 2.0\n         FieldVector<Fraction> v_mapAddToSelf = v1.copy();\n         v_mapAddToSelf.mapAddToSelf(new Fraction(2));\n         Fraction[] result_mapAddToSelf = {new Fraction(3), new Fraction(4), new Fraction(5)};\n-        Assert.assertEquals(\"compare vectors\" ,result_mapAddToSelf,v_mapAddToSelf.getData());\n+        Assert.assertArrayEquals(\"compare vectors\" ,result_mapAddToSelf,v_mapAddToSelf.getData());\n \n         //octave =  v1 .- 2.0\n         FieldVector<Fraction> v_mapSubtract = v1.mapSubtract(new Fraction(2));\n         Fraction[] result_mapSubtract = {new Fraction(-1), new Fraction(0), new Fraction(1)};\n-        Assert.assertEquals(\"compare vectors\" ,result_mapSubtract,v_mapSubtract.getData());\n+        Assert.assertArrayEquals(\"compare vectors\" ,result_mapSubtract,v_mapSubtract.getData());\n \n         //octave =  v1 .- 2.0\n         FieldVector<Fraction> v_mapSubtractToSelf = v1.copy();\n         v_mapSubtractToSelf.mapSubtractToSelf(new Fraction(2));\n         Fraction[] result_mapSubtractToSelf = {new Fraction(-1), new Fraction(0), new Fraction(1)};\n-        Assert.assertEquals(\"compare vectors\" ,result_mapSubtractToSelf,v_mapSubtractToSelf.getData());\n+        Assert.assertArrayEquals(\"compare vectors\" ,result_mapSubtractToSelf,v_mapSubtractToSelf.getData());\n \n         //octave =  v1 .* 2.0\n         FieldVector<Fraction> v_mapMultiply = v1.mapMultiply(new Fraction(2));\n         Fraction[] result_mapMultiply = {new Fraction(2), new Fraction(4), new Fraction(6)};\n-        Assert.assertEquals(\"compare vectors\" ,result_mapMultiply,v_mapMultiply.getData());\n+        Assert.assertArrayEquals(\"compare vectors\" ,result_mapMultiply,v_mapMultiply.getData());\n \n         //octave =  v1 .* 2.0\n         FieldVector<Fraction> v_mapMultiplyToSelf = v1.copy();\n         v_mapMultiplyToSelf.mapMultiplyToSelf(new Fraction(2));\n         Fraction[] result_mapMultiplyToSelf = {new Fraction(2), new Fraction(4), new Fraction(6)};\n-        Assert.assertEquals(\"compare vectors\" ,result_mapMultiplyToSelf,v_mapMultiplyToSelf.getData());\n+        Assert.assertArrayEquals(\"compare vectors\" ,result_mapMultiplyToSelf,v_mapMultiplyToSelf.getData());\n \n         //octave =  v1 ./ 2.0\n         FieldVector<Fraction> v_mapDivide = v1.mapDivide(new Fraction(2));\n         Fraction[] result_mapDivide = {new Fraction(.5d), new Fraction(1), new Fraction(1.5d)};\n-        Assert.assertEquals(\"compare vectors\" ,result_mapDivide,v_mapDivide.getData());\n+        Assert.assertArrayEquals(\"compare vectors\" ,result_mapDivide,v_mapDivide.getData());\n \n         //octave =  v1 ./ 2.0\n         FieldVector<Fraction> v_mapDivideToSelf = v1.copy();\n         v_mapDivideToSelf.mapDivideToSelf(new Fraction(2));\n         Fraction[] result_mapDivideToSelf = {new Fraction(.5d), new Fraction(1), new Fraction(1.5d)};\n-        Assert.assertEquals(\"compare vectors\" ,result_mapDivideToSelf,v_mapDivideToSelf.getData());\n+        Assert.assertArrayEquals(\"compare vectors\" ,result_mapDivideToSelf,v_mapDivideToSelf.getData());\n \n         //octave =  v1 .^-1\n         FieldVector<Fraction> v_mapInv = v1.mapInv();\n         Fraction[] result_mapInv = {new Fraction(1),new Fraction(0.5d),new Fraction(3.333333333333333e-01d)};\n-        Assert.assertEquals(\"compare vectors\" ,result_mapInv,v_mapInv.getData());\n+        Assert.assertArrayEquals(\"compare vectors\" ,result_mapInv,v_mapInv.getData());\n \n         //octave =  v1 .^-1\n         FieldVector<Fraction> v_mapInvToSelf = v1.copy();\n         v_mapInvToSelf.mapInvToSelf();\n         Fraction[] result_mapInvToSelf = {new Fraction(1),new Fraction(0.5d),new Fraction(3.333333333333333e-01d)};\n-        Assert.assertEquals(\"compare vectors\" ,result_mapInvToSelf,v_mapInvToSelf.getData());\n+        Assert.assertArrayEquals(\"compare vectors\" ,result_mapInvToSelf,v_mapInvToSelf.getData());\n \n \n     }\n         //octave =  v1 + v2\n         FieldVector<Fraction> v_add = v1.add(v2);\n         Fraction[] result_add = {new Fraction(5), new Fraction(7), new Fraction(9)};\n-        Assert.assertEquals(\"compare vect\" ,v_add.getData(),result_add);\n+        Assert.assertArrayEquals(\"compare vect\" ,v_add.getData(),result_add);\n \n         SparseFieldVector<Fraction> vt2 = new SparseFieldVector<Fraction>(field,vec2);\n         FieldVector<Fraction> v_add_i = v1.add(vt2);\n         Fraction[] result_add_i = {new Fraction(5), new Fraction(7), new Fraction(9)};\n-        Assert.assertEquals(\"compare vect\" ,v_add_i.getData(),result_add_i);\n+        Assert.assertArrayEquals(\"compare vect\" ,v_add_i.getData(),result_add_i);\n \n         //octave =  v1 - v2\n         SparseFieldVector<Fraction> v_subtract = v1.subtract(v2);", "timestamp": 1300890054, "metainfo": ""}