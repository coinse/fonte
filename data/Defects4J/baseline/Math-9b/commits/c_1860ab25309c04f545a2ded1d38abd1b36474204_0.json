{"sha": "1860ab25309c04f545a2ded1d38abd1b36474204", "log": "Using Junit4 annotation instead of explicit try/catch.   ", "commit": "\n--- a/src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java\n         Assert.assertEquals( 1.0 - epsilon, optimum.getPoint()[5], 1.0e-10);\n     }\n \n-    @Test\n+    @Test(expected=SingularMatrixException.class)\n     public void testNonInvertible() {\n-\n         LinearProblem problem = new LinearProblem(new double[][] {\n                 {  1, 2, -3 },\n                 {  2, 1,  3 },\n         }, new double[] { 1, 1, 1 });\n \n         LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n-        optimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 0, 0, 0 });\n+        VectorialPointValuePair optimum\n+            = optimizer.optimize(100, problem, problem.target,\n+                                 new double[] { 1, 1, 1 },\n+                                 new double[] { 0, 0, 0 });\n         Assert.assertTrue(FastMath.sqrt(problem.target.length) * optimizer.getRMS() > 0.6);\n-        try {\n-            optimizer.getCovariances();\n-            Assert.fail(\"an exception should have been thrown\");\n-        } catch (SingularMatrixException ee) {\n-            // expected behavior\n-        }\n+\n+        final double[][] m = optimizer.getCovariances();\n     }\n \n     @Test", "timestamp": 1315578900, "metainfo": ""}