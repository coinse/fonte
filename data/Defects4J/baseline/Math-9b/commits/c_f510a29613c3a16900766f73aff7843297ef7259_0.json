{"sha": "f510a29613c3a16900766f73aff7843297ef7259", "log": "Formatting (MATH-677).  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java\n      */\n     public double[] transform2(double f[]) throws IllegalArgumentException {\n \n-        double scaling_coefficient = FastMath.sqrt(2.0 / (f.length-1));\n-        return FastFourierTransformer.scaleArray(fct(f), scaling_coefficient);\n+        double scalingCoefficient = FastMath.sqrt(2.0 / (f.length - 1));\n+        return FastFourierTransformer.scaleArray(fct(f), scalingCoefficient);\n     }\n \n     /**\n         throws IllegalArgumentException {\n \n         double data[] = FastFourierTransformer.sample(f, min, max, n);\n-        double scaling_coefficient = FastMath.sqrt(2.0 / (n-1));\n-        return FastFourierTransformer.scaleArray(fct(data), scaling_coefficient);\n+        double scalingCoefficient = FastMath.sqrt(2.0 / (n - 1));\n+        return FastFourierTransformer.scaleArray(fct(data), scalingCoefficient);\n     }\n \n     /**\n      * @return the real inversely transformed array\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    public double[] inverseTransform(double f[]) throws IllegalArgumentException {\n-\n-        double scaling_coefficient = 2.0 / (f.length - 1);\n-        return FastFourierTransformer.scaleArray(fct(f), scaling_coefficient);\n-    }\n-\n-    /**\n-     * Inversely transform the given real function, sampled on the given interval.\n+    public double[] inverseTransform(double f[])\n+    throws IllegalArgumentException {\n+\n+        double scalingCoefficient = 2.0 / (f.length - 1);\n+        return FastFourierTransformer.scaleArray(fct(f), scalingCoefficient);\n+    }\n+\n+    /**\n+     * Inversely transform the given real function, sampled on the given\n+     * interval.\n      * <p>\n      * The formula is f<sub>k</sub> = (1/N) [F<sub>0</sub> + (-1)<sup>k</sup> F<sub>N</sub>] +\n      *                        (2/N) &sum;<sub>n=1</sub><sup>N-1</sup> F<sub>n</sub> cos(&pi; nk/N)\n         throws IllegalArgumentException {\n \n         double data[] = FastFourierTransformer.sample(f, min, max, n);\n-        double scaling_coefficient = 2.0 / (n - 1);\n-        return FastFourierTransformer.scaleArray(fct(data), scaling_coefficient);\n+        double scalingCoefficient = 2.0 / (n - 1);\n+        return FastFourierTransformer.scaleArray(fct(data), scalingCoefficient);\n     }\n \n     /**\n      * @return the real inversely transformed array\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    public double[] inverseTransform2(double f[]) throws IllegalArgumentException {\n+    public double[] inverseTransform2(double f[])\n+        throws IllegalArgumentException {\n         return transform2(f);\n     }\n \n     /**\n-     * Inversely transform the given real function, sampled on the given interval.\n+     * Inversely transform the given real function, sampled on the given\n+     * interval.\n      * <p>\n      * The formula is f<sub>k</sub> = &radic;(1/2N) [F<sub>0</sub> + (-1)<sup>k</sup> F<sub>N</sub>] +\n      *                        &radic;(2/N) &sum;<sub>n=1</sub><sup>N-1</sup> F<sub>n</sub> cos(&pi; nk/N)\n         final double[] x = new double[n];\n         x[0] = 0.5 * (f[0] + f[n]);\n         x[n >> 1] = f[n >> 1];\n-        double t1 = 0.5 * (f[0] - f[n]);   // temporary variable for transformed[1]\n+        // temporary variable for transformed[1]\n+        double t1 = 0.5 * (f[0] - f[n]);\n         for (int i = 1; i < (n >> 1); i++) {\n             final double a = 0.5 * (f[i] + f[n-i]);\n             final double b = FastMath.sin(i * FastMath.PI / n) * (f[i] - f[n-i]);", "timestamp": 1322635430, "metainfo": ""}