{"sha": "d962ba0d9c92943dff986e2016bd840241af2e86", "log": "Fix for possible zero divide on an indefinite matrix  Fix for: MATH-297   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n         // perform an initial non-shifted LDLt decomposition\n         final double[] d = new double[m];\n         final double[] l = new double[m - 1];\n-        double di = main[0];\n+        // avoid zero divide on indefinite matrix\n+        final double mu = realEigenvalues[m-1] <= 0 && realEigenvalues[0] > 0 ? 0.5-realEigenvalues[m-1] : 0;\n+        double di = main[0]+mu;\n         d[0] = di;\n         for (int i = 1; i < m; ++i) {\n             final double eiM1  = secondary[i - 1];\n             final double ratio = eiM1 / di;\n-            di       = main[i] - eiM1 * ratio;\n+            di       = main[i] - eiM1 * ratio + mu;\n             l[i - 1] = ratio;\n             d[i]     = di;\n         }\n \n         // compute eigenvectors\n         for (int i = 0; i < m; ++i) {\n-            eigenvectors[i] = findEigenvector(realEigenvalues[i], d, l);\n+            eigenvectors[i] = findEigenvector(realEigenvalues[i]+mu, d, l);\n         }\n \n     }\n--- a/src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java\n     }\n \n     /**\n+     * Verifies operation on indefinite matrix\n+     */\n+    public void testZeroDivide() {\n+        RealMatrix indefinite = MatrixUtils.createRealMatrix(new double [][] {\n+                { 0.0, 1.0, -1.0 }, \n+                { 1.0, 1.0, 0.0 }, \n+                { -1.0,0.0, 1.0 }        \n+        });\n+        EigenDecomposition ed = new EigenDecompositionImpl(indefinite, MathUtils.SAFE_MIN);\n+        checkEigenValues((new double[] {2, 1, -1}), ed, 1E-12);\n+        double isqrt3 = 1/Math.sqrt(3.0);\n+        checkEigenVector((new double[] {isqrt3,isqrt3,-isqrt3}), ed, 1E-12);\n+        double isqrt2 = 1/Math.sqrt(2.0);\n+        checkEigenVector((new double[] {0.0,-isqrt2,-isqrt2}), ed, 1E-12);\n+        double isqrt6 = 1/Math.sqrt(6.0);\n+        checkEigenVector((new double[] {2*isqrt6,-isqrt6,isqrt6}), ed, 1E-12);\n+    }\n+    /**\n      * Verifies that the given EigenDecomposition has eigenvalues equivalent to\n      * the targetValues, ignoring the order of the values and allowing\n      * values to differ by tolerance.\n         }\n     }\n \n+    \n     /**\n      * Returns true iff there is an entry within tolerance of value in\n      * searchArray.", "timestamp": 1255908577, "metainfo": ""}