{"sha": "54b1ea1c3e9b6a4df8d258086d280abc04b67bd5", "log": "Implementation of uniform distributions (real + integer). See MATH-730. Patch contributed by Dennis Hendriks.  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.distribution;\n+\n+import org.apache.commons.math.exception.NumberIsTooLargeException;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n+\n+/**\n+ * Implementation of the uniform integer distribution.\n+ *\n+ * @see <a href=\"http://en.wikipedia.org/wiki/Uniform_distribution_(discrete)\"\n+ * >Uniform distribution (discrete), at Wikipedia</a>\n+ *\n+ * @version $Id$\n+ * @since 3.0\n+ */\n+public class UniformIntegerDistribution extends AbstractIntegerDistribution {\n+    /** Serializable version identifier. */\n+    private static final long serialVersionUID = 20120109L;\n+\n+    /** Lower bound (inclusive) of this distribution. */\n+    private final int lower;\n+\n+    /** Upper bound (inclusive) of this distribution. */\n+    private final int upper;\n+\n+    /**\n+     * Creates a new uniform integer distribution using the given lower and\n+     * upper bounds (both inclusive).\n+     *\n+     * @param lower Lower bound (inclusive) of this distribution.\n+     * @param upper Upper bound (inclusive) of this distribution.\n+     * @throws NumberIsTooLargeException if {@code lower >= upper}.\n+     */\n+    public UniformIntegerDistribution(int lower, int upper) throws NumberIsTooLargeException {\n+        if (lower >= upper) {\n+            throw new NumberIsTooLargeException(\n+                            LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,\n+                            lower, upper, false);\n+        }\n+        this.lower = lower;\n+        this.upper = upper;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double probability(int x) {\n+        if (x < lower || x > upper) {\n+            return 0;\n+        }\n+        return 1.0 / (upper - lower + 1);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double cumulativeProbability(int x) {\n+        if (x < lower) {\n+            return 0;\n+        }\n+        if (x > upper) {\n+            return 1;\n+        }\n+        return (x - lower + 1.0) / (upper - lower + 1.0);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * For lower bound {@code lower} and upper bound {@code upper}, the mean is\n+     * {@code 0.5 * (lower + upper)}.\n+     */\n+    public double getNumericalMean() {\n+        return 0.5 * (lower + upper);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * For lower bound {@code lower} and upper bound {@code upper}, and\n+     * {@code n = upper - lower + 1}, the variance is {@code (n^2 - 1) / 12}.\n+     */\n+    public double getNumericalVariance() {\n+        double n = upper - lower + 1;\n+        return (n * n - 1) / 12.0;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * The lower bound of the support is equal to the lower bound parameter\n+     * of the distribution.\n+     *\n+     * @return lower bound of the support\n+     */\n+    public int getSupportLowerBound() {\n+        return lower;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * The upper bound of the support is equal to the upper bound parameter\n+     * of the distribution.\n+     *\n+     * @return upper bound of the support\n+     */\n+    public int getSupportUpperBound() {\n+        return upper;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * The support of this distribution is connected.\n+     *\n+     * @return {@code true}\n+     */\n+    public boolean isSupportConnected() {\n+        return true;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public int sample() {\n+        return randomData.nextInt(lower, upper);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.distribution;\n+\n+import org.apache.commons.math.exception.NumberIsTooLargeException;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n+\n+/**\n+ * Implementation of the uniform real distribution.\n+ *\n+ * @see <a href=\"http://en.wikipedia.org/wiki/Uniform_distribution_(continuous)\"\n+ * >Uniform distribution (continuous), at Wikipedia</a>\n+ *\n+ * @version $Id$\n+ * @since 3.0\n+ */\n+public class UniformRealDistribution extends AbstractRealDistribution {\n+    /** Default inverse cumulative probability accuracy. */\n+    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;\n+\n+    /** Serializable version identifier. */\n+    private static final long serialVersionUID = 20120109L;\n+\n+    /** Lower bound of this distribution (inclusive). */\n+    private final double lower;\n+\n+    /** Upper bound of this distribution (exclusive). */\n+    private final double upper;\n+\n+    /** Inverse cumulative probability accuracy. */\n+    private final double solverAbsoluteAccuracy;\n+\n+    /**\n+     * Create a uniform real distribution using the given lower and upper\n+     * bounds.\n+     *\n+     * @param lower Lower bound of this distribution (inclusive).\n+     * @param upper Upper bound of this distribution (exclusive).\n+     * @throws NumberIsTooLargeException if {@code lower >= upper}.\n+     */\n+    public UniformRealDistribution(double lower, double upper)\n+        throws NumberIsTooLargeException {\n+        this(lower, upper, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);\n+    }\n+\n+    /**\n+     * Create a normal distribution using the given mean, standard deviation and\n+     * inverse cumulative distribution accuracy.\n+     *\n+     * @param lower Lower bound of this distribution (inclusive).\n+     * @param upper Upper bound of this distribution (exclusive).\n+     * @param inverseCumAccuracy Inverse cumulative probability accuracy.\n+     * @throws NumberIsTooLargeException if {@code lower >= upper}.\n+     */\n+    public UniformRealDistribution(double lower, double upper, double inverseCumAccuracy)\n+        throws NumberIsTooLargeException {\n+        if (lower >= upper) {\n+            throw new NumberIsTooLargeException(\n+                            LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,\n+                            lower, upper, false);\n+        }\n+\n+        this.lower = lower;\n+        this.upper = upper;\n+        solverAbsoluteAccuracy = inverseCumAccuracy;\n+    }\n+\n+    /**\n+     * Create a standard uniform real distribution with lower bound (inclusive)\n+     * equal to zero and upper bound (exclusive) equal to one.\n+     */\n+    public UniformRealDistribution() {\n+        this(0, 1);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * For this distribution {@code P(X = x)} always evaluates to 0.\n+     *\n+     * @return 0\n+     */\n+    public double probability(double x) {\n+        return 0.0;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double density(double x) {\n+        if (x < lower || x > upper) {\n+            return 0.0;\n+        }\n+        return 1 / (upper - lower);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double cumulativeProbability(double x)  {\n+        if (x <= lower) {\n+            return 0;\n+        }\n+        if (x >= upper) {\n+            return 1;\n+        }\n+        return (x - lower) / (upper - lower);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    protected double getSolverAbsoluteAccuracy() {\n+        return solverAbsoluteAccuracy;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * For lower bound {@code lower} and upper bound {@code upper}, the mean is\n+     * {@code 0.5 * (lower + upper)}.\n+     */\n+    public double getNumericalMean() {\n+        return 0.5 * (lower + upper);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * For lower bound {@code lower} and upper bound {@code upper}, the\n+     * variance is {@code (upper - lower)^2 / 12}.\n+     */\n+    public double getNumericalVariance() {\n+        double ul = upper - lower;\n+        return ul * ul / 12;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * The lower bound of the support is equal to the lower bound parameter\n+     * of the distribution.\n+     *\n+     * @return lower bound of the support\n+     */\n+    public double getSupportLowerBound() {\n+        return lower;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * The upper bound of the support is equal to the upper bound parameter\n+     * of the distribution.\n+     *\n+     * @return upper bound of the support\n+     */\n+    public double getSupportUpperBound() {\n+        return upper;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public boolean isSupportLowerBoundInclusive() {\n+        return true;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public boolean isSupportUpperBoundInclusive() {\n+        return false;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * The support of this distribution is connected.\n+     *\n+     * @return {@code true}\n+     */\n+    public boolean isSupportConnected() {\n+        return true;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public double sample()  {\n+        return randomData.nextUniform(lower, upper, true);\n+    }\n+}\n--- a/src/main/java/org/apache/commons/math/random/RandomData.java\n+++ b/src/main/java/org/apache/commons/math/random/RandomData.java\n \n     /**\n      * Generates a uniformly distributed random value from the open interval\n-     * (<code>lower</code>,<code>upper</code>) (i.e., endpoints excluded).\n+     * {@code (lower, upper)} (i.e., endpoints excluded).\n      * <p>\n      * <strong>Definition</strong>:\n      * <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda3662.htm\">\n      * <code>upper - lower</code> are the\n      * <a href = \"http://www.itl.nist.gov/div898/handbook/eda/section3/eda364.htm\">\n      * location and scale parameters</a>, respectively.</p>\n-     * <p>\n-     * <strong>Preconditions</strong>:<ul>\n-     * <li><code>lower < upper</code> (otherwise an IllegalArgumentException\n-     *     is thrown.)</li>\n-     * </ul></p>\n      *\n      * @param lower lower endpoint of the interval of support\n      * @param upper upper endpoint of the interval of support\n      * and upper (exclusive)\n      */\n     double nextUniform(double lower, double upper);\n+\n+    /**\n+     * Generates a uniformly distributed random value from the interval\n+     * {@code (lower, upper)} or the interval {@code [lower, upper)}. The lower\n+     * bound is thus optionally included, while the upper bound is always\n+     * excluded.\n+     * <p>\n+     * <strong>Definition</strong>:\n+     * <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda3662.htm\">\n+     * Uniform Distribution</a> <code>lower</code> and\n+     * <code>upper - lower</code> are the\n+     * <a href = \"http://www.itl.nist.gov/div898/handbook/eda/section3/eda364.htm\">\n+     * location and scale parameters</a>, respectively.</p>\n+     *\n+     * @param lower lower endpoint of the interval of support\n+     * @param upper upper endpoint of the interval of support\n+     * @param lowerInclusive {@code true} if the lower bound is included in the\n+     * interval\n+     * @return uniformly distributed random value in the {@code (lower, upper)}\n+     * interval, if {@code lowerInclusive} is {@code false}, or in the\n+     * {@code [lower, upper)} interval, if {@code lowerInclusive} is {@code true}\n+     */\n+    double nextUniform(double lower, double upper, boolean lowerInclusive);\n \n     /**\n      * Generates an integer array of length <code>k</code> whose entries\n--- a/src/main/java/org/apache/commons/math/random/RandomDataImpl.java\n+++ b/src/main/java/org/apache/commons/math/random/RandomDataImpl.java\n      * or either bound is infinite or NaN\n      */\n     public double nextUniform(double lower, double upper) {\n+        return nextUniform(lower, upper, false);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     * <p>\n+     * <strong>Algorithm Description</strong>: if the lower bound is excluded,\n+     * scales the output of Random.nextDouble(), but rejects 0 values (i.e.,\n+     * will generate another random double if Random.nextDouble() returns 0).\n+     * This is necessary to provide a symmetric output interval (both\n+     * endpoints excluded).\n+     * </p>\n+     *\n+     * @param lower\n+     *            the lower bound.\n+     * @param upper\n+     *            the upper bound.\n+     * @param lowerInclusive\n+     *            whether the lower bound is included in the interval\n+     * @return a uniformly distributed random value from the interval (lower,\n+     *         upper)\n+     * @throws NumberIsTooLargeException if {@code lower >= upper}.\n+     * @since 3.0\n+     */\n+    public double nextUniform(double lower, double upper, boolean lowerInclusive) {\n         if (lower >= upper) {\n-            throw new MathIllegalArgumentException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,\n-                                                lower, upper);\n+            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,\n+                                                lower, upper, false);\n         }\n \n         if (Double.isInfinite(lower) || Double.isInfinite(upper)) {\n \n         // ensure nextDouble() isn't 0.0\n         double u = generator.nextDouble();\n-        while (u <= 0.0) {\n+        while (!lowerInclusive && u <= 0.0) {\n             u = generator.nextDouble();\n         }\n \n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.distribution;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test cases for UniformIntegerDistribution. See class javadoc for\n+ * {@link IntegerDistributionAbstractTest} for further details.\n+ */\n+public class UniformIntegerDistributionTest extends IntegerDistributionAbstractTest {\n+\n+    // --- Override tolerance -------------------------------------------------\n+\n+    @Override\n+    public void setUp() {\n+        super.setUp();\n+        setTolerance(1e-9);\n+    }\n+\n+    //--- Implementations for abstract methods --------------------------------\n+\n+    /** Creates the default discrete distribution instance to use in tests. */\n+    @Override\n+    public IntegerDistribution makeDistribution() {\n+        return new UniformIntegerDistribution(-3, 5);\n+    }\n+\n+    /** Creates the default probability density test input values. */\n+    @Override\n+    public int[] makeDensityTestPoints() {\n+        return new int[] {-4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6};\n+    }\n+\n+    /** Creates the default probability density test expected values. */\n+    @Override\n+    public double[] makeDensityTestValues() {\n+        double d = 1.0 / (5 - -3 + 1);\n+        return new double[] {0, d, d, d, d, d, d, d, d, d, 0};\n+    }\n+\n+    /** Creates the default cumulative probability density test input values. */\n+    @Override\n+    public int[] makeCumulativeTestPoints() {\n+        return makeDensityTestPoints();\n+    }\n+\n+    /** Creates the default cumulative probability density test expected values. */\n+    @Override\n+    public double[] makeCumulativeTestValues() {\n+        return new double[] {0, 1 / 9.0, 2 / 9.0, 3 / 9.0, 4 / 9.0, 5 / 9.0,\n+                             6 / 9.0, 7 / 9.0, 8 / 9.0, 1, 1};\n+    }\n+\n+    /** Creates the default inverse cumulative probability test input values */\n+    @Override\n+    public double[] makeInverseCumulativeTestPoints() {\n+        return new double[] {0, 0.001, 0.010, 0.025, 0.050, 0.100, 0.200,\n+                             0.5, 0.999, 0.990, 0.975, 0.950, 0.900, 1};\n+    }\n+\n+    /** Creates the default inverse cumulative probability density test expected values */\n+    @Override\n+    public int[] makeInverseCumulativeTestValues() {\n+        return new int[] {-3, -3, -3, -3, -3, -3, -2, 1, 5, 5, 5, 5, 5, 5};\n+    }\n+\n+    //--- Additional test cases -----------------------------------------------\n+\n+    /** Test mean/variance. */\n+    @Test\n+    public void testMoments() {\n+        UniformIntegerDistribution dist;\n+\n+        dist = new UniformIntegerDistribution(0, 5);\n+        Assert.assertEquals(dist.getNumericalMean(), 2.5, 0);\n+        Assert.assertEquals(dist.getNumericalVariance(), 35 / 12.0, 0);\n+\n+        dist = new UniformIntegerDistribution(0, 1);\n+        Assert.assertEquals(dist.getNumericalMean(), 0.5, 0);\n+        Assert.assertEquals(dist.getNumericalVariance(), 3 / 12.0, 0);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.distribution;\n+\n+import org.apache.commons.math.exception.NumberIsTooLargeException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test cases for UniformRealDistribution. See class javadoc for\n+ * {@link RealDistributionAbstractTest} for further details.\n+ */\n+public class UniformRealDistributionTest extends RealDistributionAbstractTest {\n+\n+    // --- Override tolerance -------------------------------------------------\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        setTolerance(1e-4);\n+    }\n+\n+    //--- Implementations for abstract methods --------------------------------\n+\n+    /** Creates the default uniform real distribution instance to use in tests. */\n+    @Override\n+    public UniformRealDistribution makeDistribution() {\n+        return new UniformRealDistribution(-0.5, 1.25);\n+    }\n+\n+    /** Creates the default cumulative probability distribution test input values */\n+    @Override\n+    public double[] makeCumulativeTestPoints() {\n+        return new double[] {-0.5001, -0.5, -0.4999, -0.25, -0.0001, 0.0,\n+                             0.0001, 0.25, 1.0, 1.2499, 1.25, 1.2501};\n+    }\n+\n+    /** Creates the default cumulative probability density test expected values */\n+    @Override\n+    public double[] makeCumulativeTestValues() {\n+        return new double[] {0.0, 0.0, 0.0001, 0.25/1.75, 0.4999/1.75,\n+                             0.5/1.75, 0.5001/1.75, 0.75/1.75, 1.5/1.75,\n+                             1.7499/1.75, 1.0, 1.0};\n+    }\n+\n+    /** Creates the default probability density test expected values */\n+    @Override\n+    public double[] makeDensityTestValues() {\n+        double d = 1 / 1.75;\n+        return new double[] {0, d, d, d, d, d, d, d, d, d, d, 0};\n+    }\n+\n+    //--- Additional test cases -----------------------------------------------\n+\n+    /** Test lower bound getter. */\n+    @Test\n+    public void testGetLowerBound() {\n+        UniformRealDistribution distribution = makeDistribution();\n+        Assert.assertEquals(-0.5, distribution.getSupportLowerBound(), 0);\n+    }\n+\n+    /** Test upper bound getter. */\n+    @Test\n+    public void testGetUpperBound() {\n+        UniformRealDistribution distribution = makeDistribution();\n+        Assert.assertEquals(1.25, distribution.getSupportUpperBound(), 0);\n+    }\n+\n+    /** Test pre-condition for equal lower/upper bound. */\n+    @Test(expected=NumberIsTooLargeException.class)\n+    public void testPreconditions1() {\n+        new UniformRealDistribution(0, 0);\n+    }\n+\n+    /** Test pre-condition for lower bound larger than upper bound. */\n+    @Test(expected=NumberIsTooLargeException.class)\n+    public void testPreconditions2() {\n+        new UniformRealDistribution(1, 0);\n+    }\n+\n+    /** Test mean/variance. */\n+    @Test\n+    public void testMeanVariance() {\n+        UniformRealDistribution dist;\n+\n+        dist = new UniformRealDistribution(0, 1);\n+        Assert.assertEquals(dist.getNumericalMean(), 0.5, 0);\n+        Assert.assertEquals(dist.getNumericalVariance(), 1/12.0, 0);\n+\n+        dist = new UniformRealDistribution(-1.5, 0.6);\n+        Assert.assertEquals(dist.getNumericalMean(), -0.45, 0);\n+        Assert.assertEquals(dist.getNumericalVariance(), 0.3675, 0);\n+\n+        dist = new UniformRealDistribution(-0.5, 1.25);\n+        Assert.assertEquals(dist.getNumericalMean(), 0.375, 0);\n+        Assert.assertEquals(dist.getNumericalVariance(), 0.2552083333333333, 0);\n+    }\n+}", "timestamp": 1326092528, "metainfo": ""}