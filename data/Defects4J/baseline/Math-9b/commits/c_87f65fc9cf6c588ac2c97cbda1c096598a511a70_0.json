{"sha": "87f65fc9cf6c588ac2c97cbda1c096598a511a70", "log": "MATH-521 Changed initial guess default values. Added test.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java\n             double c2 = sxy * sxz - sx2 * syz;\n             double c3 = sx2 * sy2 - sxy * sxy;\n             if ((c1 / c2 < 0) || (c2 / c3 < 0)) {\n-                a = 0;\n-\n+                final int last = observations.length - 1;\n                 // Range of the observations, assuming that the\n                 // observations are sorted.\n-                final double range = observations[observations.length - 1].getX() -\n-                    observations[0].getX();\n-\n-                if (range == 0) {\n+                final double xRange = observations[last].getX() - observations[0].getX();\n+                if (xRange == 0) {\n                     throw new ZeroException();\n                 }\n-                omega = 2 * Math.PI / range;\n+                omega = 2 * Math.PI / xRange;\n+\n+                double yMin = Double.POSITIVE_INFINITY;\n+                double yMax = Double.NEGATIVE_INFINITY;\n+                for (int i = 1; i < observations.length; ++i) {\n+                    final double y = observations[i].getY();\n+                    if (y < yMin) {\n+                        yMin = y;\n+                    }\n+                    if (y > yMax) {\n+                        yMax = y;\n+                    }\n+                }\n+                a = 0.5 * (yMax - yMin);\n             } else {\n                 a = FastMath.sqrt(c1 / c2);\n                 omega = FastMath.sqrt(c2 / c3);\n--- a/src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java\n \n package org.apache.commons.math.optimization.fitting;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n-\n import java.util.Random;\n \n import org.apache.commons.math.analysis.function.HarmonicOscillator;\n import org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer;\n+import org.apache.commons.math.exception.NumberIsTooSmallException;\n+import org.apache.commons.math.exception.ZeroException;\n import org.apache.commons.math.util.FastMath;\n import org.apache.commons.math.util.MathUtils;\n+\n import org.junit.Test;\n+import org.junit.Assert;\n \n public class HarmonicFitterTest {\n+    @Test(expected=NumberIsTooSmallException.class)\n+    public void testPreconditions1() {\n+        HarmonicFitter fitter =\n+            new HarmonicFitter(new LevenbergMarquardtOptimizer());\n+\n+        final double[] fitted = fitter.fit();\n+    }\n+\n+    // This test fails (throwing \"ConvergenceException\" instead).\n+//     @Test(expected=ZeroException.class)\n+//     public void testPreconditions2() {\n+//         HarmonicFitter fitter =\n+//             new HarmonicFitter(new LevenbergMarquardtOptimizer());\n+\n+//         final double x = 1.2;\n+//         fitter.addObservedPoint(1, x, 1);\n+//         fitter.addObservedPoint(1, x, -1);\n+//         fitter.addObservedPoint(1, x, 0.5);\n+//         fitter.addObservedPoint(1, x, 0);\n+\n+//         final double[] fitted = fitter.fit();\n+//     }\n \n     @Test\n     public void testNoError() {\n         }\n \n         final double[] fitted = fitter.fit();\n-        assertEquals(a, fitted[0], 1.0e-13);\n-        assertEquals(w, fitted[1], 1.0e-13);\n-        assertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1e-13);\n+        Assert.assertEquals(a, fitted[0], 1.0e-13);\n+        Assert.assertEquals(w, fitted[1], 1.0e-13);\n+        Assert.assertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1e-13);\n \n         HarmonicOscillator ff = new HarmonicOscillator(fitted[0], fitted[1], fitted[2]);\n \n         for (double x = -1.0; x < 1.0; x += 0.01) {\n-            assertTrue(FastMath.abs(f.value(x) - ff.value(x)) < 1e-13);\n+            Assert.assertTrue(FastMath.abs(f.value(x) - ff.value(x)) < 1e-13);\n         }\n     }\n \n             new HarmonicFitter(new LevenbergMarquardtOptimizer());\n         for (double x = 0.0; x < 10.0; x += 0.1) {\n             fitter.addObservedPoint(1, x,\n-                                   f.value(x) + 0.01 * randomizer.nextGaussian());\n+                                    f.value(x) + 0.01 * randomizer.nextGaussian());\n         }\n \n         final double[] fitted = fitter.fit();\n-        assertEquals(a, fitted[0], 7.6e-4);\n-        assertEquals(w, fitted[1], 2.7e-3);\n-        assertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1.3e-2);\n+        Assert.assertEquals(a, fitted[0], 7.6e-4);\n+        Assert.assertEquals(w, fitted[1], 2.7e-3);\n+        Assert.assertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1.3e-2);\n+    }\n \n+    @Test\n+    public void testTinyVariationsData() {\n+        Random randomizer = new Random(64925784252l);\n+\n+        HarmonicFitter fitter =\n+            new HarmonicFitter(new LevenbergMarquardtOptimizer());\n+        for (double x = 0.0; x < 10.0; x += 0.1) {\n+            fitter.addObservedPoint(1, x, 1e-7 * randomizer.nextGaussian());\n+        }\n+\n+        final double[] fitted = fitter.fit();\n+        // This test serves to cover the part of the code of \"guessAOmega\"\n+        // when the algorithm using integrals fails.\n     }\n \n     @Test\n             new HarmonicFitter(new LevenbergMarquardtOptimizer());\n         for (double x = 0.0; x < 10.0; x += 0.1) {\n             fitter.addObservedPoint(1, x,\n-                                   f.value(x) + 0.01 * randomizer.nextGaussian());\n+                                    f.value(x) + 0.01 * randomizer.nextGaussian());\n         }\n \n         final double[] fitted = fitter.fit(new double[] { 0.15, 3.6, 4.5 });\n-        assertEquals(a, fitted[0], 1.2e-3);\n-        assertEquals(w, fitted[1], 3.3e-3);\n-        assertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1.7e-2);\n+        Assert.assertEquals(a, fitted[0], 1.2e-3);\n+        Assert.assertEquals(w, fitted[1], 3.3e-3);\n+        Assert.assertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1.7e-2);\n     }\n \n     @Test\n         }\n \n         final double[] fitted = fitter.fit();\n-        assertEquals(a, fitted[0], 7.6e-4);\n-        assertEquals(w, fitted[1], 3.5e-3);\n-        assertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1.5e-2);\n+        Assert.assertEquals(a, fitted[0], 7.6e-4);\n+        Assert.assertEquals(w, fitted[1], 3.5e-3);\n+        Assert.assertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1.5e-2);\n     }\n }", "timestamp": 1298476358, "metainfo": ""}