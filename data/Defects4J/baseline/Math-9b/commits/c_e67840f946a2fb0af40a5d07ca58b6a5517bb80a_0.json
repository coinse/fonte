{"sha": "e67840f946a2fb0af40a5d07ca58b6a5517bb80a", "log": "Exception handling in WilcoxonSignedRankTest made consistent with CM. JIRA: MATH-488  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java\n  */\n package org.apache.commons.math.stat.inference;\n \n-import org.apache.commons.math.MathException;\n+import org.apache.commons.math.exception.ConvergenceException;\n+import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.MaxCountExceededException;\n+import org.apache.commons.math.exception.NoDataException;\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.exception.NumberIsTooLargeException;\n \n /**\n  * An interface for Wilcoxon signed-rank test.\n      * </ul>\n      * </p>\n      *\n-     * @param x\n-     *            the first sample\n-     * @param y\n-     *            the second sample\n-     * @return wilcoxonSignedRank statistic\n-     * @throws IllegalArgumentException\n-     *             if preconditions are not met\n+     * @param x the first sample\n+     * @param y the second sample\n+     * @return wilcoxonSignedRank statistic (the larger of W+ and W-)\n+     * @throws NullArgumentException if {@code x} or {@code y} are {@code null}.\n+     * @throws NoDataException if {@code x} or {@code y} are zero-length.\n+     * @throws DimensionMismatchException if {@code x} and {@code y} do not\n+     * have the same length.\n      */\n     double wilcoxonSignedRank(final double[] x, final double[] y)\n-            throws IllegalArgumentException;\n+        throws NullArgumentException, NoDataException, DimensionMismatchException;\n \n     /**\n      * Returns the <i>observed significance level</i>, or <a href=\n      * </ul>\n      * </p>\n      *\n-     * @param x\n-     *            the first sample\n-     * @param y\n-     *            the second sample\n+     * @param x the first sample\n+     * @param y the second sample\n      * @param exactPValue\n      *            if the exact p-value is wanted (only works for x.length <= 30,\n      *            if true and x.length > 30, this is ignored because\n      *            calculations may take too long)\n      * @return p-value\n-     * @throws IllegalArgumentException\n-     *             if preconditions are not met\n-     * @throws MathException\n-     *             if an error occurs computing the p-value\n+     * @throws NullArgumentException if {@code x} or {@code y} are {@code null}.\n+     * @throws NoDataException if {@code x} or {@code y} are zero-length.\n+     * @throws DimensionMismatchException if {@code x} and {@code y} do not\n+     * have the same length.\n+     * @throws NumberIsTooLargeException if {@code exactPValue} is {@code true} and\n+     * {@code x.length} > 30\n+     * @throws ConvergenceException if the p-value can not be computed due to a convergence error\n+     * @throws MaxCountExceededException if the maximum number of iterations is exceeded\n      */\n-    double wilcoxonSignedRankTest(final double[] x, final double[] y,\n-            boolean exactPValue) throws IllegalArgumentException,\n-            MathException;\n+    double wilcoxonSignedRankTest(final double[] x, final double[] y, boolean exactPValue)\n+        throws NullArgumentException, NoDataException, DimensionMismatchException,\n+        NumberIsTooLargeException, ConvergenceException, MaxCountExceededException;\n }\n--- a/src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java\n  */\n package org.apache.commons.math.stat.inference;\n \n-import org.apache.commons.math.MathException;\n import org.apache.commons.math.distribution.NormalDistribution;\n+import org.apache.commons.math.exception.ConvergenceException;\n+import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.MaxCountExceededException;\n+import org.apache.commons.math.exception.NoDataException;\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.exception.NumberIsTooLargeException;\n import org.apache.commons.math.stat.ranking.NaNStrategy;\n import org.apache.commons.math.stat.ranking.NaturalRanking;\n import org.apache.commons.math.stat.ranking.TiesStrategy;\n      *            specifies the strategy that should be used for ties\n      */\n     public WilcoxonSignedRankTestImpl(NaNStrategy nanStrategy,\n-            TiesStrategy tiesStrategy) {\n+                                      TiesStrategy tiesStrategy) {\n         naturalRanking = new NaturalRanking(nanStrategy, tiesStrategy);\n     }\n \n      *\n      * @param x first sample\n      * @param y second sample\n-     * @throws IllegalArgumentException\n-     *             if assumptions are not met\n+     * @throws NullArgumentException if {@code x} or {@code y} are {@code null}.\n+     * @throws NoDataException if {@code x} or {@code y} are zero-length.\n+     * @throws DimensionMismatchException if {@code x} and {@code y} do not\n+     * have the same length.\n      */\n     private void ensureDataConformance(final double[] x, final double[] y)\n-            throws IllegalArgumentException {\n-        if (x == null) {\n-            throw new IllegalArgumentException(\"x must not be null\");\n-        }\n-\n-        if (y == null) {\n-            throw new IllegalArgumentException(\"y must not be null\");\n-        }\n-\n-        if (x.length != y.length) {\n-            throw new IllegalArgumentException(\n-                    \"x and y must contain the same number of elements\");\n-        }\n-\n-        if (x.length == 0) {\n-            throw new IllegalArgumentException(\n-                    \"x and y must contain at least one element\");\n+        throws NullArgumentException, NoDataException, DimensionMismatchException {\n+\n+        if (x == null ||\n+            y == null) {\n+                throw new NullArgumentException();\n+        }\n+        if (x.length == 0 ||\n+            y.length == 0) {\n+            throw new NoDataException();\n+        }\n+        if (y.length != x.length) {\n+            throw new DimensionMismatchException(y.length, x.length);\n         }\n     }\n \n      *\n      * @param z sample\n      * @return |z|\n-     * @throws IllegalArgumentException\n-     *             if assumptions are not met\n+     * @throws NullArgumentException if {@code z} is {@code null}\n+     * @throws NoDataException if {@code z} is zero-length.\n      */\n     private double[] calculateAbsoluteDifferences(final double[] z)\n-            throws IllegalArgumentException {\n+        throws NullArgumentException, NoDataException {\n+\n         if (z == null) {\n-            throw new IllegalArgumentException(\"z must not be null\");\n+            throw new NullArgumentException();\n         }\n \n         if (z.length == 0) {\n-            throw new IllegalArgumentException(\n-                    \"z must contain at least one element\");\n+            throw new NoDataException();\n         }\n \n         final double[] zAbs = new double[z.length];\n         return zAbs;\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     *\n-     * @param x\n-     *            the first sample\n-     * @param y\n-     *            the second sample\n-     * @return wilcoxonSignedRank statistic (the larger of W+ and W-)\n-     * @throws IllegalArgumentException\n-     *             if preconditions are not met\n-     */\n+    /** {@inheritDoc} */\n     public double wilcoxonSignedRank(final double[] x, final double[] y)\n-            throws IllegalArgumentException {\n+        throws NullArgumentException, NoDataException, DimensionMismatchException {\n \n         ensureDataConformance(x, y);\n \n      * @param Wmin smallest Wilcoxon signed rank value\n      * @param N number of subjects (corresponding to x.length)\n      * @return two-sided asymptotic p-value\n-     * @throws MathException if an error occurs computing the p-value\n-     */\n-    private double calculateAsymptoticPValue(final double Wmin, final int N) throws MathException {\n+     */\n+    private double calculateAsymptoticPValue(final double Wmin, final int N) {\n \n         final double ES = (double) (N * (N + 1)) / 4.0;\n \n         return 2*standardNormal.cumulativeProbability(z);\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     *\n-     * @param x\n-     *            the first sample\n-     * @param y\n-     *            the second sample\n-     * @param exactPValue\n-     *            if the exact p-value is wanted (only for x.length <= 30)\n-     * @return p-value\n-     * @throws IllegalArgumentException\n-     *             if preconditions are not met or exact p-value is wanted for\n-     *             when x.length > 30\n-     * @throws MathException\n-     *             if an error occurs computing the p-value\n-     */\n+    /** {@inheritDoc} */\n     public double wilcoxonSignedRankTest(final double[] x, final double[] y,\n-            boolean exactPValue) throws IllegalArgumentException,\n-            MathException {\n+                                         boolean exactPValue)\n+        throws NullArgumentException, NoDataException, DimensionMismatchException,\n+        NumberIsTooLargeException, ConvergenceException, MaxCountExceededException {\n \n         ensureDataConformance(x, y);\n \n         final double Wmax = wilcoxonSignedRank(x, y);\n \n         if (exactPValue && N > 30) {\n-            throw new IllegalArgumentException(\"Exact test can only be made for N <= 30.\");\n+            throw new NumberIsTooLargeException(N, 30, true);\n         }\n \n         if (exactPValue) {\n--- a/src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.junit.Assert;\n import org.junit.Test;\n \n         emptyContents.add(classC);\n         try {\n             testStatistic.anovaFValue(emptyContents);\n-            Assert.fail(\"empty array for key classX, IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n+            Assert.fail(\"empty array for key classX, MathIllegalArgumentException expected\");\n+        } catch (MathIllegalArgumentException ex) {\n             // expected\n         }\n \n         tooFew.add(classA);\n         try {\n             testStatistic.anovaFValue(tooFew);\n-            Assert.fail(\"less than two classes, IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n+            Assert.fail(\"less than two classes, MathIllegalArgumentException expected\");\n+        } catch (MathIllegalArgumentException ex) {\n             // expected\n         }\n     }\n--- a/src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java\n  */\n package org.apache.commons.math.stat.inference;\n \n+import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.NoDataException;\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.exception.NumberIsTooLargeException;\n import org.junit.Assert;\n import org.junit.Test;\n \n         \n         try {\n             testStatistic.wilcoxonSignedRankTest(x2, y2, true);\n-            Assert.fail(\"More than 30 samples and exact chosen, IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n+            Assert.fail(\"More than 30 samples and exact chosen, NumberIsTooLargeException expected\");\n+        } catch (NumberIsTooLargeException ex) {\n             // expected\n         }\n         \n          */\n         try {\n             testStatistic.wilcoxonSignedRankTest(new double[] { }, new double[] { 1.0 }, true);\n-            Assert.fail(\"x does not contain samples (exact), IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n+            Assert.fail(\"x does not contain samples (exact), NoDataException expected\");\n+        } catch (NoDataException ex) {\n             // expected\n         }\n \n         try {\n             testStatistic.wilcoxonSignedRankTest(new double[] { }, new double[] { 1.0 }, false);\n-            Assert.fail(\"x does not contain samples (asymptotic), IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n+            Assert.fail(\"x does not contain samples (asymptotic), NoDataException expected\");\n+        } catch (NoDataException ex) {\n             // expected\n         }\n \n         try {\n             testStatistic.wilcoxonSignedRankTest(new double[] { 1.0 }, new double[] { }, true);\n-            Assert.fail(\"y does not contain samples (exact), IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n+            Assert.fail(\"y does not contain samples (exact), NoDataException expected\");\n+        } catch (NoDataException ex) {\n             // expected\n         }\n \n         try {\n             testStatistic.wilcoxonSignedRankTest(new double[] { 1.0 }, new double[] { }, false);\n-            Assert.fail(\"y does not contain samples (asymptotic), IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n+            Assert.fail(\"y does not contain samples (asymptotic), NoDataException expected\");\n+        } catch (NoDataException ex) {\n             // expected\n         }\n \n          */\n         try {\n             testStatistic.wilcoxonSignedRankTest(new double[] { 1.0, 2.0 }, new double[] { 3.0 }, true);\n-            Assert.fail(\"x and y not same size (exact), IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n+            Assert.fail(\"x and y not same size (exact), DimensionMismatchException expected\");\n+        } catch (DimensionMismatchException ex) {\n             // expected\n         }\n \n         try {\n             testStatistic.wilcoxonSignedRankTest(new double[] { 1.0, 2.0 }, new double[] { 3.0 }, false);\n-            Assert.fail(\"x and y not same size (asymptotic), IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n+            Assert.fail(\"x and y not same size (asymptotic), DimensionMismatchException expected\");\n+        } catch (DimensionMismatchException ex) {\n             // expected\n         }\n         \n          */\n         try {\n             testStatistic.wilcoxonSignedRankTest(null, null, true);\n-            Assert.fail(\"x and y is null (exact), IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n+            Assert.fail(\"x and y is null (exact), NullArgumentException expected\");\n+        } catch (NullArgumentException ex) {\n             // expected\n         }\n         \n         try {\n             testStatistic.wilcoxonSignedRankTest(null, null, false);\n-            Assert.fail(\"x and y is null (asymptotic), IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n+            Assert.fail(\"x and y is null (asymptotic), NullArgumentException expected\");\n+        } catch (NullArgumentException ex) {\n             // expected\n         }\n         \n          */\n         try {\n             testStatistic.wilcoxonSignedRankTest(null, new double[] { 1.0 }, true);\n-            Assert.fail(\"x is null (exact), IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n+            Assert.fail(\"x is null (exact), NullArgumentException expected\");\n+        } catch (NullArgumentException ex) {\n             // expected\n         }\n         \n         try {\n             testStatistic.wilcoxonSignedRankTest(null, new double[] { 1.0 }, false);\n-            Assert.fail(\"x is null (asymptotic), IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n+            Assert.fail(\"x is null (asymptotic), NullArgumentException expected\");\n+        } catch (NullArgumentException ex) {\n             // expected\n         }\n         \n         try {\n             testStatistic.wilcoxonSignedRankTest(new double[] { 1.0 }, null, true);\n-            Assert.fail(\"y is null (exact), IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n+            Assert.fail(\"y is null (exact), NullArgumentException expected\");\n+        } catch (NullArgumentException ex) {\n             // expected\n         }\n         \n         try {\n             testStatistic.wilcoxonSignedRankTest(new double[] { 1.0 }, null, false);\n-            Assert.fail(\"y is null (asymptotic), IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n+            Assert.fail(\"y is null (asymptotic), NullArgumentException expected\");\n+        } catch (NullArgumentException ex) {\n             // expected\n         }\n     }", "timestamp": 1328652231, "metainfo": ""}