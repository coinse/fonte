{"sha": "3ef8840567a01c76b3c8536a8e21b367e83aa652", "log": "Added normalizeArray method to MathUtils.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n      public static double normalizeAngle(double a, double center) {\n          return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);\n      }\n+     \n+     /**\n+      * <p>Normalizes an array to make it sum to a specified value.  \n+      * Returns the result of the transformation <pre>\n+      *    x |-> x * normalizedSum / sum\n+      * </pre>\n+      * applied to each non-NaN element x of the input array, where sum is the\n+      * sum of the non-NaN entries in the input array.</p>\n+      * \n+      * <p>Throws IllegalArgumentException if <code>normalizedSum</code> is infinite\n+      * or NaN and ArithmeticException if the input array contains any infinite elements\n+      * or sums to 0</p>\n+      * \n+      * <p>Ignores (i.e., copies unchanged to the output array) NaNs in the input array.</p>\n+      * \n+      * @param values input array to be normalized\n+      * @param normalizedSum target sum for the normalized array\n+      * @return normalized array\n+      * @throws ArithmeticException if the input array contains infinite elements or sums to zero\n+      * @throws IllegalArgumentException if the target sum is infinite or NaN\n+      */\n+     public static double[] normalizeArray(double[] values, double normalizedSum)\n+       throws ArithmeticException, IllegalArgumentException {\n+         if (Double.isInfinite(normalizedSum)) {\n+             throw MathRuntimeException.createIllegalArgumentException(\n+                     \"Cannot normalize to an infinite value\");\n+         }\n+         if (Double.isNaN(normalizedSum)) {\n+             throw MathRuntimeException.createIllegalArgumentException(\n+                     \"Cannot normalize to NaN\");\n+         }\n+         double sum = 0d;\n+         final int len = values.length;\n+         double[] out = new double[len];\n+         for (int i = 0; i < len; i++) {\n+             if (Double.isInfinite(values[i])) {\n+                 throw MathRuntimeException.createArithmeticException(\n+                         \"Array contains an infinite element\", values[i], i);\n+             }\n+             if (!Double.isNaN(values[i])) {\n+                 sum += values[i];\n+             }\n+         }\n+         if (sum == 0) {\n+             throw MathRuntimeException.createArithmeticException(\n+                     \"Array sums to zero\"); \n+         }\n+         for (int i = 0; i < len; i++) {\n+             if (Double.isNaN(values[i])) {\n+                 out[i] = Double.NaN;\n+             } else {\n+                 out[i] = values[i] * normalizedSum / sum;\n+             }\n+         }\n+         return out;  \n+     }\n \n     /**\n      * Round the given value to the specified number of decimal places. The\n--- a/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n             }\n         }\n     }\n+    \n+    public void testNormalizeArray() {\n+        double[] testValues1 = new double[] {1, 1, 2};\n+        TestUtils.assertEquals(\n+                new double[] {.25, .25, .5},\n+                MathUtils.normalizeArray(testValues1, 1),\n+                Double.MIN_VALUE);\n+     \n+        double[] testValues2 = new double[] {-1, -1, 1};\n+        TestUtils.assertEquals(\n+                new double[] {1, 1, -1},\n+                MathUtils.normalizeArray(testValues2, 1),\n+                Double.MIN_VALUE);\n+        \n+        // Ignore NaNs\n+        double[] testValues3 = new double[] {-1, -1, Double.NaN, 1, Double.NaN};\n+        TestUtils.assertEquals(\n+                new double[] {1, 1,Double.NaN, -1, Double.NaN},\n+                MathUtils.normalizeArray(testValues3, 1),\n+                Double.MIN_VALUE);\n+        \n+        // Zero sum -> ArithmeticException\n+        double[] zeroSum = new double[] {-1, 1};\n+        try {\n+            MathUtils.normalizeArray(zeroSum, 1);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+        \n+        // Infinite elements -> ArithmeticException\n+        double[] hasInf = new double[] {1, 2, 1, Double.NEGATIVE_INFINITY};\n+        try {\n+            MathUtils.normalizeArray(hasInf, 1);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+        \n+        // Infinite target -> IllegalArgumentException\n+        try {\n+            MathUtils.normalizeArray(testValues1, Double.POSITIVE_INFINITY);\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        // NaN target -> IllegalArgumentException\n+        try {\n+            MathUtils.normalizeArray(testValues1, Double.NaN);\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {}  \n+        \n+    }\n \n     public void testRoundDouble() {\n         double x = 1.234567890;", "timestamp": 1251655816, "metainfo": ""}