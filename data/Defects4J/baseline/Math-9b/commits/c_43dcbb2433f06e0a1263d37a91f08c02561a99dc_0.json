{"sha": "43dcbb2433f06e0a1263d37a91f08c02561a99dc", "log": "Javadoc only.   ", "commit": "\n--- a/src/java/org/apache/commons/math/util/DoubleArray.java\n+++ b/src/java/org/apache/commons/math/util/DoubleArray.java\n  * Collections API by allowing a user to select from a number of \n  * array implementations with support for various storage mechanisms\n  * such as automatic expansion, contraction, and array \"rolling\".\n- * @version $Revision: 1.10 $ $Date: 2004/05/19 14:16:32 $\n+ * \n+ * @version $Revision: 1.11 $ $Date: 2004/06/08 14:19:40 $\n  */\n public interface DoubleArray {\n \n     double getElement(int index);\n \n     /**\n-     * Sets the element at the specified index.  This method will expand the \n+     * Sets the element at the specified index.  This method may expand the \n      * internal storage array to accomodate the insertion of a value at an \n      * index beyond the current capacity.\n+     * \n      * @param index index to store a value in\n      * @param value value to store at the specified index\n      * @throws ArrayIndexOutOfBoundsException if <code>index</code> is less than\n-     *         zero or is greater than <code>getNumElements() - 1</code>.\n+     *         zero.\n      */\n     void setElement(int index, double value);\n \n \n     /**\n      * Adds an element and moves the window of elements up one.  This\n-     * has the effect of a FIFO.  when you \"roll\" the array an element is \n-     * removed from the array.  The return value of this function is the \n-     * discarded double.\n+     * has the effect of a FIFO.  when you \"roll\" the array an element may be \n+     * removed from the array.  In this case, the return value of this function is the \n+     * discarded double.  In some implementations, removal will only occur when\n+     * the array has reached a capacity threshold.  \n+     * <p>\n+     * When removal does occur, the effect is to add an element to the end of the\n+     * array and to discard the element at the beginning of the array.\n      * \n      * @param value the value to be added to the array\n      * @return the value which has been discarded or \"pushed\" out of the array\n-     *         by this rolling insert.\n+     *         by this rolling insert or null if no value has been discarded\n      */\n     double addElementRolling(double value);\n ", "timestamp": 1086704380, "metainfo": ""}