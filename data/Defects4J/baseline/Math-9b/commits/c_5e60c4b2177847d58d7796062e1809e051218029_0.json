{"sha": "5e60c4b2177847d58d7796062e1809e051218029", "log": "In class Gamma, removed auxiliary functions logGammaSum and logGammaMinusLogGammaSum, as they are not ready to be included in version 3.1 of Commons-Math.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/special/Gamma.java\n+++ b/src/main/java/org/apache/commons/math3/special/Gamma.java\n import org.apache.commons.math3.exception.MaxCountExceededException;\n import org.apache.commons.math3.exception.NumberIsTooLargeException;\n import org.apache.commons.math3.exception.NumberIsTooSmallException;\n-import org.apache.commons.math3.exception.OutOfRangeException;\n import org.apache.commons.math3.util.ContinuedFraction;\n import org.apache.commons.math3.util.FastMath;\n \n  * &Gamma; (Gamma) family of functions.\n  * </p>\n  * <p>\n- * Implementation of {@link #invGamma1pm1(double)},\n- * {@link #logGamma1p(double)} and {@link #logGammaSum(double, double)} is\n- * based on the algorithms described in\n+ * Implementation of {@link #invGamma1pm1(double)} and\n+ * {@link #logGamma1p(double)} is based on the algorithms described in\n  * <ul>\n  * <li><a href=\"http://dx.doi.org/10.1145/22721.23109\">Didonato and Morris\n  * (1986)</a>, <em>Computation of the Incomplete Gamma Function Ratios and\n \n     /** The constant {@code C13} defined in {@code DGAM1}. */\n     private static final double INV_GAMMA1P_M1_C13 = -.205633841697760710345015413002057E-06;\n-\n-    /**\n-     * <p>\n-     * The d<sub>0</sub> coefficient of the minimax approximation of the \u0394\n-     * function. This function is defined as follows\n-     * </p>\n-     * <center>\u0394(x) = log \u0393(x) - (x - 0.5) log a + a - 0.5 log 2\u03c0,</center>\n-     * <p>\n-     * The minimax approximation is defined by the following sum\n-     * </p>\n-     * <pre>\n-     *             5\n-     *            ====\n-     *            \\         - 2 n - 1\n-     *     \u0394(x) =  >    d  x\n-     *            /      n\n-     *            ====\n-     *            n = 0\n-     * <pre>\n-     * <p>\n-     * see equations (23) and (25) in Didonato and Morris (1992).\n-     * </p>\n-     */\n-    private static final double D0 = .833333333333333E-01;\n-\n-    /**\n-     * The d<sub>1</sub> coefficent of the minimax approximation of the \u0394\n-     * function (see {@link #D0}).\n-     */\n-    private static final double D1 = -.277777777760991E-02;\n-\n-    /**\n-     * The d<sub>2</sub> coefficent of the minimax approximation of the \u0394\n-     * function (see {@link #D0}).\n-     */\n-    private static final double D2 = .793650666825390E-03;\n-\n-    /**\n-     * The d<sub>3</sub> coefficent of the minimax approximation of the \u0394\n-     * function (see {@link #D0}).\n-     */\n-    private static final double D3 = -.595202931351870E-03;\n-\n-    /**\n-     * The d<sub>4</sub> coefficent of the minimax approximation of the \u0394\n-     * function (see {@link #D0}).\n-     */\n-    private static final double D4 = .837308034031215E-03;\n-\n-    /**\n-     * The d<sub>5</sub> coefficent of the minimax approximation of the \u0394\n-     * function (see {@link #D0}).\n-     */\n-    private static final double D5 = -.165322962780713E-02;\n-    /*\n-     * NOTA: the value of d0 published in Didonato and Morris (1992), eq. (25)\n-     * and the value implemented in the NSWC library are NOT EQUAL\n-     *   - in Didonato and Morris (1992) D5 = -.125322962780713E-02,\n-     *   - while in the NSWC library     D5 = -.165322962780713E-02.\n-     * Checking the value of algdiv(1.0, 8.0)}, it seems that the second value\n-     * leads to the smallest error. This is the one which is implemented here.\n-     */\n \n     /**\n      * Default constructor.  Prohibit instantiation.\n         }\n         return ret;\n     }\n-\n-    /**\n-     * Returns the value of log \u0393(a + b) for 1 \u2264 a, b \u2264 2. The present\n-     * implementation is based on the double precision implementation in the\n-     * <em>NSWC Library of Mathematics Subroutines</em>, {@code GSUMLN}.\n-     *\n-     * @param a First argument.\n-     * @param b Second argument.\n-     * @return the value of {@code log(Gamma(a + b))}.\n-     * @throws OutOfRangeException if {@code a} or {@code b} is lower than\n-     * {@code 1.0} or greater than {@code 2.0}.\n-     */\n-     static double logGammaSum(final double a, final double b)\n-        throws OutOfRangeException {\n-\n-        if ((a < 1.0) || (a > 2.0)) {\n-            throw new OutOfRangeException(a, 1.0, 2.0);\n-        }\n-        if ((b < 1.0) || (b > 2.0)) {\n-            throw new OutOfRangeException(b, 1.0, 2.0);\n-        }\n-\n-        final double x = a + b - 2.0;\n-        if (x <= 0.25) {\n-            return Gamma.logGamma1p(1.0 + x);\n-        } else if (x <= 1.25) {\n-            return Gamma.logGamma1p(x) + FastMath.log1p(x);\n-        } else {\n-            return Gamma.logGamma1p(x - 1.0) + FastMath.log(x * (1.0 + x));\n-        }\n-    }\n-\n-    /**\n-     * Returns the value of log[\u0393(b) / \u0393(a + b)] for a \u2265 0 and b \u2265 8. The\n-     * present implementation is based on the double precision implementation in\n-     * the <em>NSWC Library of Mathematics Subroutines</em>, {@code ALGDIV}.\n-     *\n-     * @param a First argument.\n-     * @param b Second argument.\n-     * @return the value of {@code log(Gamma(b) / Gamma(a + b))}.\n-     * @throws NumberIsTooSmallException if {@code a < 0.0} or {@code b < 8.0}.\n-     */\n-    static final double logGammaMinusLogGammaSum(final double a,\n-                                                 final double b)\n-        throws NumberIsTooSmallException {\n-\n-        if (a < 0.0) {\n-            throw new NumberIsTooSmallException(a, 0.0, true);\n-        }\n-        if (b < 8.0) {\n-            throw new NumberIsTooSmallException(b, 8.0, true);\n-        }\n-\n-        /*\n-         * p = a / (a + b), q = b / (a + b), d = a + b - 0.5\n-         */\n-        final double p;\n-        final double q;\n-        final double d;\n-        if (a <= b) {\n-            final double h = a / b;\n-            p = h / (1.0 + h);\n-            q = 1.0 / (1.0 + h);\n-            d = b + (a - 0.5);\n-        } else {\n-            final double h = b / a;\n-            p = 1.0 / (1.0 + h);\n-            q = h / (1.0 + h);\n-            d = a + (b - 0.5);\n-        }\n-        /*\n-         * s_n = 1 + q + ... + q^(n - 1)\n-         */\n-        final double q2 = q * q;\n-        final double s3 = 1.0 + (q + q2);\n-        final double s5 = 1.0 + (q + q2 * s3);\n-        final double s7 = 1.0 + (q + q2 * s5);\n-        final double s9 = 1.0 + (q + q2 * s7);\n-        final double s11 = 1.0 + (q + q2 * s9);\n-        /*\n-         * w = \u0394(b) - \u0394(a + b)\n-         */\n-        final double tmp = 1.0 / b;\n-        final double t = tmp * tmp;\n-        double w = D5 * s11;\n-        w = D4 * s9 + t * w;\n-        w = D3 * s7 + t * w;\n-        w = D2 * s5 + t * w;\n-        w = D1 * s3 + t * w;\n-        w = D0 + t * w;\n-        w *= p / b;\n-\n-        final double u = d * FastMath.log1p(a / b);\n-        final double v = a * (FastMath.log(b) - 1.0);\n-\n-        return u <= v ? (w - u) - v : (w - v) - u;\n-    }\n }\n--- a/src/test/java/org/apache/commons/math3/special/GammaTest.java\n+++ b/src/test/java/org/apache/commons/math3/special/GammaTest.java\n             Assert.assertTrue(Integer.toString(i), Double.isNaN(Gamma.gamma(i)));\n         }\n     }\n-\n-    /**\n-     * Reference data for the {@link Gamma#logGammaSum(double, double)}\n-     * function. This data was generated with the following\n-     * <a href=\"http://maxima.sourceforge.net/\">Maxima</a> script.\n-     *\n-     * <pre>\n-     * kill(all);\n-     *\n-     * fpprec : 64;\n-     * gsumln(a, b) := log(gamma(a + b));\n-     *\n-     * x : [1.0b0, 1.125b0, 1.25b0, 1.375b0, 1.5b0, 1.625b0, 1.75b0, 1.875b0, 2.0b0];\n-     *\n-     * for i : 1 while i <= length(x) do\n-     *   for j : 1 while j <= length(x) do block(\n-     *     a : x[i],\n-     *     b : x[j],\n-     *     print(\"{\", float(a), \",\", float(b), \",\", float(gsumln(a, b)), \"},\")\n-     *   );\n-     * </pre>\n-     */\n-    private static final double[][] LOG_GAMMA_SUM_REF = {\n-        { 1.0 , 1.0 , 0.0 },\n-        { 1.0 , 1.125 , .05775985153034387 },\n-        { 1.0 , 1.25 , .1248717148923966 },\n-        { 1.0 , 1.375 , .2006984603774558 },\n-        { 1.0 , 1.5 , .2846828704729192 },\n-        { 1.0 , 1.625 , .3763336820249054 },\n-        { 1.0 , 1.75 , .4752146669149371 },\n-        { 1.0 , 1.875 , .5809359740231859 },\n-        { 1.0 , 2.0 , .6931471805599453 },\n-        { 1.125 , 1.0 , .05775985153034387 },\n-        { 1.125 , 1.125 , .1248717148923966 },\n-        { 1.125 , 1.25 , .2006984603774558 },\n-        { 1.125 , 1.375 , .2846828704729192 },\n-        { 1.125 , 1.5 , .3763336820249054 },\n-        { 1.125 , 1.625 , .4752146669149371 },\n-        { 1.125 , 1.75 , .5809359740231859 },\n-        { 1.125 , 1.875 , .6931471805599453 },\n-        { 1.125 , 2.0 , 0.811531653906724 },\n-        { 1.25 , 1.0 , .1248717148923966 },\n-        { 1.25 , 1.125 , .2006984603774558 },\n-        { 1.25 , 1.25 , .2846828704729192 },\n-        { 1.25 , 1.375 , .3763336820249054 },\n-        { 1.25 , 1.5 , .4752146669149371 },\n-        { 1.25 , 1.625 , .5809359740231859 },\n-        { 1.25 , 1.75 , .6931471805599453 },\n-        { 1.25 , 1.875 , 0.811531653906724 },\n-        { 1.25 , 2.0 , .9358019311087253 },\n-        { 1.375 , 1.0 , .2006984603774558 },\n-        { 1.375 , 1.125 , .2846828704729192 },\n-        { 1.375 , 1.25 , .3763336820249054 },\n-        { 1.375 , 1.375 , .4752146669149371 },\n-        { 1.375 , 1.5 , .5809359740231859 },\n-        { 1.375 , 1.625 , .6931471805599453 },\n-        { 1.375 , 1.75 , 0.811531653906724 },\n-        { 1.375 , 1.875 , .9358019311087253 },\n-        { 1.375 , 2.0 , 1.06569589786406 },\n-        { 1.5 , 1.0 , .2846828704729192 },\n-        { 1.5 , 1.125 , .3763336820249054 },\n-        { 1.5 , 1.25 , .4752146669149371 },\n-        { 1.5 , 1.375 , .5809359740231859 },\n-        { 1.5 , 1.5 , .6931471805599453 },\n-        { 1.5 , 1.625 , 0.811531653906724 },\n-        { 1.5 , 1.75 , .9358019311087253 },\n-        { 1.5 , 1.875 , 1.06569589786406 },\n-        { 1.5 , 2.0 , 1.200973602347074 },\n-        { 1.625 , 1.0 , .3763336820249054 },\n-        { 1.625 , 1.125 , .4752146669149371 },\n-        { 1.625 , 1.25 , .5809359740231859 },\n-        { 1.625 , 1.375 , .6931471805599453 },\n-        { 1.625 , 1.5 , 0.811531653906724 },\n-        { 1.625 , 1.625 , .9358019311087253 },\n-        { 1.625 , 1.75 , 1.06569589786406 },\n-        { 1.625 , 1.875 , 1.200973602347074 },\n-        { 1.625 , 2.0 , 1.341414578068493 },\n-        { 1.75 , 1.0 , .4752146669149371 },\n-        { 1.75 , 1.125 , .5809359740231859 },\n-        { 1.75 , 1.25 , .6931471805599453 },\n-        { 1.75 , 1.375 , 0.811531653906724 },\n-        { 1.75 , 1.5 , .9358019311087253 },\n-        { 1.75 , 1.625 , 1.06569589786406 },\n-        { 1.75 , 1.75 , 1.200973602347074 },\n-        { 1.75 , 1.875 , 1.341414578068493 },\n-        { 1.75 , 2.0 , 1.486815578593417 },\n-        { 1.875 , 1.0 , .5809359740231859 },\n-        { 1.875 , 1.125 , .6931471805599453 },\n-        { 1.875 , 1.25 , 0.811531653906724 },\n-        { 1.875 , 1.375 , .9358019311087253 },\n-        { 1.875 , 1.5 , 1.06569589786406 },\n-        { 1.875 , 1.625 , 1.200973602347074 },\n-        { 1.875 , 1.75 , 1.341414578068493 },\n-        { 1.875 , 1.875 , 1.486815578593417 },\n-        { 1.875 , 2.0 , 1.6369886482725 },\n-        { 2.0 , 1.0 , .6931471805599453 },\n-        { 2.0 , 1.125 , 0.811531653906724 },\n-        { 2.0 , 1.25 , .9358019311087253 },\n-        { 2.0 , 1.375 , 1.06569589786406 },\n-        { 2.0 , 1.5 , 1.200973602347074 },\n-        { 2.0 , 1.625 , 1.341414578068493 },\n-        { 2.0 , 1.75 , 1.486815578593417 },\n-        { 2.0 , 1.875 , 1.6369886482725 },\n-        { 2.0 , 2.0 , 1.791759469228055 },\n-    };\n-\n-    @Test\n-    public void testLogGammaSum() {\n-        final int ulps = 5;\n-        for (int i = 0; i < LOG_GAMMA_SUM_REF.length; i++) {\n-            final double[] ref = LOG_GAMMA_SUM_REF[i];\n-            final double a = ref[0];\n-            final double b = ref[1];\n-            final double expected = ref[2];\n-            final double actual = Gamma.logGammaSum(a, b);\n-            final double tol = ulps * FastMath.ulp(expected);\n-            final StringBuilder builder = new StringBuilder();\n-            builder.append(a).append(\", \").append(b);\n-            Assert.assertEquals(builder.toString(), expected, actual, tol);\n-        }\n-    }\n-\n-    @Test(expected = OutOfRangeException.class)\n-    public void testLogGammaSumPrecondition1() {\n-\n-        Gamma.logGammaSum(0.0, 1.0);\n-    }\n-\n-    @Test(expected = OutOfRangeException.class)\n-    public void testLogGammaSumPrecondition2() {\n-\n-        Gamma.logGammaSum(3.0, 1.0);\n-    }\n-\n-    @Test(expected = OutOfRangeException.class)\n-    public void testLogGammaSumPrecondition3() {\n-\n-        Gamma.logGammaSum(1.0, 0.0);\n-    }\n-\n-    @Test(expected = OutOfRangeException.class)\n-    public void testLogGammaSumPrecondition4() {\n-\n-        Gamma.logGammaSum(1.0, 3.0);\n-    }\n-\n-    private static final double[][] LOG_GAMMA_MINUS_LOG_GAMMA_SUM_REF = {\n-        { 0.0 , 8.0 , 0.0 },\n-        { 0.0 , 9.0 , 0.0 },\n-        { 0.0 , 10.0 , 0.0 },\n-        { 0.0 , 11.0 , 0.0 },\n-        { 0.0 , 12.0 , 0.0 },\n-        { 0.0 , 13.0 , 0.0 },\n-        { 0.0 , 14.0 , 0.0 },\n-        { 0.0 , 15.0 , 0.0 },\n-        { 0.0 , 16.0 , 0.0 },\n-        { 0.0 , 17.0 , 0.0 },\n-        { 0.0 , 18.0 , 0.0 },\n-        { 1.0 , 8.0 , - 2.079441541679836 },\n-        { 1.0 , 9.0 , - 2.19722457733622 },\n-        { 1.0 , 10.0 , - 2.302585092994046 },\n-        { 1.0 , 11.0 , - 2.397895272798371 },\n-        { 1.0 , 12.0 , - 2.484906649788 },\n-        { 1.0 , 13.0 , - 2.564949357461537 },\n-        { 1.0 , 14.0 , - 2.639057329615258 },\n-        { 1.0 , 15.0 , - 2.70805020110221 },\n-        { 1.0 , 16.0 , - 2.772588722239781 },\n-        { 1.0 , 17.0 , - 2.833213344056216 },\n-        { 1.0 , 18.0 , - 2.890371757896165 },\n-        { 2.0 , 8.0 , - 4.276666119016055 },\n-        { 2.0 , 9.0 , - 4.499809670330265 },\n-        { 2.0 , 10.0 , - 4.700480365792417 },\n-        { 2.0 , 11.0 , - 4.882801922586371 },\n-        { 2.0 , 12.0 , - 5.049856007249537 },\n-        { 2.0 , 13.0 , - 5.204006687076795 },\n-        { 2.0 , 14.0 , - 5.347107530717468 },\n-        { 2.0 , 15.0 , - 5.480638923341991 },\n-        { 2.0 , 16.0 , - 5.605802066295998 },\n-        { 2.0 , 17.0 , - 5.723585101952381 },\n-        { 2.0 , 18.0 , - 5.834810737062605 },\n-        { 3.0 , 8.0 , - 6.579251212010101 },\n-        { 3.0 , 9.0 , - 6.897704943128636 },\n-        { 3.0 , 10.0 , - 7.185387015580416 },\n-        { 3.0 , 11.0 , - 7.447751280047908 },\n-        { 3.0 , 12.0 , - 7.688913336864796 },\n-        { 3.0 , 13.0 , - 7.912056888179006 },\n-        { 3.0 , 14.0 , - 8.11969625295725 },\n-        { 3.0 , 15.0 , - 8.313852267398207 },\n-        { 3.0 , 16.0 , - 8.496173824192162 },\n-        { 3.0 , 17.0 , - 8.668024081118821 },\n-        { 3.0 , 18.0 , - 8.830543010616596 },\n-        { 4.0 , 8.0 , - 8.977146484808472 },\n-        { 4.0 , 9.0 , - 9.382611592916636 },\n-        { 4.0 , 10.0 , - 9.750336373041954 },\n-        { 4.0 , 11.0 , - 10.08680860966317 },\n-        { 4.0 , 12.0 , - 10.39696353796701 },\n-        { 4.0 , 13.0 , - 10.68464561041879 },\n-        { 4.0 , 14.0 , - 10.95290959701347 },\n-        { 4.0 , 15.0 , - 11.20422402529437 },\n-        { 4.0 , 16.0 , - 11.4406128033586 },\n-        { 4.0 , 17.0 , - 11.66375635467281 },\n-        { 4.0 , 18.0 , - 11.87506544834002 },\n-        { 5.0 , 8.0 , - 11.46205313459647 },\n-        { 5.0 , 9.0 , - 11.94756095037817 },\n-        { 5.0 , 10.0 , - 12.38939370265721 },\n-        { 5.0 , 11.0 , - 12.79485881076538 },\n-        { 5.0 , 12.0 , - 13.16955226020679 },\n-        { 5.0 , 13.0 , - 13.517858954475 },\n-        { 5.0 , 14.0 , - 13.84328135490963 },\n-        { 5.0 , 15.0 , - 14.14866300446081 },\n-        { 5.0 , 16.0 , - 14.43634507691259 },\n-        { 5.0 , 17.0 , - 14.70827879239624 },\n-        { 5.0 , 18.0 , - 14.96610790169833 },\n-        { 6.0 , 8.0 , - 14.02700249205801 },\n-        { 6.0 , 9.0 , - 14.58661827999343 },\n-        { 6.0 , 10.0 , - 15.09744390375942 },\n-        { 6.0 , 11.0 , - 15.56744753300516 },\n-        { 6.0 , 12.0 , - 16.002765604263 },\n-        { 6.0 , 13.0 , - 16.40823071237117 },\n-        { 6.0 , 14.0 , - 16.78772033407607 },\n-        { 6.0 , 15.0 , - 17.14439527801481 },\n-        { 6.0 , 16.0 , - 17.48086751463602 },\n-        { 6.0 , 17.0 , - 17.79932124575455 },\n-        { 6.0 , 18.0 , - 18.10160211762749 },\n-        { 7.0 , 8.0 , - 16.66605982167327 },\n-        { 7.0 , 9.0 , - 17.29466848109564 },\n-        { 7.0 , 10.0 , - 17.8700326259992 },\n-        { 7.0 , 11.0 , - 18.40066087706137 },\n-        { 7.0 , 12.0 , - 18.89313736215917 },\n-        { 7.0 , 13.0 , - 19.35266969153761 },\n-        { 7.0 , 14.0 , - 19.78345260763006 },\n-        { 7.0 , 15.0 , - 20.18891771573823 },\n-        { 7.0 , 16.0 , - 20.57190996799433 },\n-        { 7.0 , 17.0 , - 20.9348154616837 },\n-        { 7.0 , 18.0 , - 21.27965594797543 },\n-        { 8.0 , 8.0 , - 19.37411002277548 },\n-        { 8.0 , 9.0 , - 20.06725720333542 },\n-        { 8.0 , 10.0 , - 20.70324597005542 },\n-        { 8.0 , 11.0 , - 21.29103263495754 },\n-        { 8.0 , 12.0 , - 21.83757634132561 },\n-        { 8.0 , 13.0 , - 22.3484019650916 },\n-        { 8.0 , 14.0 , - 22.82797504535349 },\n-        { 8.0 , 15.0 , - 23.27996016909654 },\n-        { 8.0 , 16.0 , - 23.70740418392348 },\n-        { 8.0 , 17.0 , - 24.11286929203165 },\n-        { 8.0 , 18.0 , - 24.49853177284363 },\n-        { 9.0 , 8.0 , - 22.14669874501526 },\n-        { 9.0 , 9.0 , - 22.90047054739164 },\n-        { 9.0 , 10.0 , - 23.59361772795159 },\n-        { 9.0 , 11.0 , - 24.23547161412398 },\n-        { 9.0 , 12.0 , - 24.8333086148796 },\n-        { 9.0 , 13.0 , - 25.39292440281502 },\n-        { 9.0 , 14.0 , - 25.9190174987118 },\n-        { 9.0 , 15.0 , - 26.41545438502569 },\n-        { 9.0 , 16.0 , - 26.88545801427143 },\n-        { 9.0 , 17.0 , - 27.33174511689985 },\n-        { 9.0 , 18.0 , - 27.75662831086511 },\n-        { 10.0 , 8.0 , - 24.97991208907148 },\n-        { 10.0 , 9.0 , - 25.7908423052878 },\n-        { 10.0 , 10.0 , - 26.53805670711802 },\n-        { 10.0 , 11.0 , - 27.23120388767797 },\n-        { 10.0 , 12.0 , - 27.87783105260302 },\n-        { 10.0 , 13.0 , - 28.48396685617334 },\n-        { 10.0 , 14.0 , - 29.05451171464095 },\n-        { 10.0 , 15.0 , - 29.59350821537364 },\n-        { 10.0 , 16.0 , - 30.10433383913963 },\n-        { 10.0 , 17.0 , - 30.58984165492133 },\n-        { 10.0 , 18.0 , - 31.05246517686944 },\n-    };\n-\n-    @Test\n-    public void testLogGammaMinusLogGammaSum() {\n-        final int ulps = 4;\n-        for (int i = 0; i < LOG_GAMMA_MINUS_LOG_GAMMA_SUM_REF.length; i++) {\n-            final double[] ref = LOG_GAMMA_MINUS_LOG_GAMMA_SUM_REF[i];\n-            final double a = ref[0];\n-            final double b = ref[1];\n-            final double expected = ref[2];\n-            final double actual = Gamma.logGammaMinusLogGammaSum(a, b);\n-            final double tol = ulps * FastMath.ulp(expected);\n-            final StringBuilder builder = new StringBuilder();\n-            builder.append(a).append(\", \").append(b);\n-            Assert.assertEquals(builder.toString(), expected, actual, tol);\n-        }\n-    }\n-\n-    @Test(expected = NumberIsTooSmallException.class)\n-    public void testLogGammaMinusLogGammaSumPrecondition1() {\n-        Gamma.logGammaMinusLogGammaSum(-1.0, 8.0);\n-    }\n-\n-    @Test(expected = NumberIsTooSmallException.class)\n-    public void testLogGammaMinusLogGammaSumPrecondition2() {\n-        Gamma.logGammaMinusLogGammaSum(1.0, 7.0);\n-    }\n-\n-    private void checkRelativeError(String msg, double expected, double actual, double tolerance) {\n-        Assert.assertEquals(msg, expected, actual, FastMath.abs(tolerance * actual));\n-    }\n }", "timestamp": 1354080447, "metainfo": ""}