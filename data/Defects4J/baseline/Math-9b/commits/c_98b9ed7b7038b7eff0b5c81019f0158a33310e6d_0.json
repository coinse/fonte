{"sha": "98b9ed7b7038b7eff0b5c81019f0158a33310e6d", "log": "Fixed error in javadoc describing the behavior of the Percentile algorithm for small percentiles in small datasets. JIRA: MATH-582 Reported by Andre Herbst Patched by Christopher Nix  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java\n  * <li>Compute the estimated percentile position\n  * <code> pos = p * (n + 1) / 100</code> and the difference, <code>d</code>\n  * between <code>pos</code> and <code>floor(pos)</code> (i.e. the fractional\n- * part of <code>pos</code>).  If <code>pos >= n</code> return the largest\n- * element in the array; otherwise</li>\n- * <li>Let <code>lower</code> be the element in position\n+ * part of <code>pos</code>).</li>\n+ * <li> If <code>pos < 1</code> return the smallest element in the array.</li>\n+ * <li> Else if <code>pos >= n</code> return the largest element in the array.</li>\n+ * <li> Else let <code>lower</code> be the element in position\n  * <code>floor(pos)</code> in the array and let <code>upper</code> be the\n  * next element in the array.  Return <code>lower + d * (upper - lower)</code>\n  * </li>\n--- a/src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java\n         double[] d = new double[]{1, 2, 3};\n         Percentile p = new Percentile(75);\n         Assert.assertEquals(3.0, p.evaluate(d), 1.0e-5);\n+    }\n+    \n+    @Test\n+    public void testLowPercentile() {\n+        double[] d = new double[] {0, 1};\n+        Percentile p = new Percentile(25);\n+        Assert.assertEquals(0d, p.evaluate(d), Double.MIN_VALUE);\n     }\n \n     @Test", "timestamp": 1307831332, "metainfo": ""}