{"sha": "37594a450a5b3435893b86d5802581e8b34b2e05", "log": "Starting point for fixing MATH-431. Still some validation tests and documentation are missing.  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.inference;\n+\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ * An interface for Mann-Whitney U test (also called Wilcoxon rank-sum test).\n+ * \n+ * @version $Revision: $ $Date: $\n+ */\n+public interface MannWhitneyUTest {\n+\n+    /**\n+     * Computes the <a\n+     * href=\"http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U\"> Mann-Whitney\n+     * U statistic</a> comparing mean for two independent samples possibly of\n+     * different length.\n+     * <p>\n+     * This statistic can be used to perform a Mann-Whitney U test evaluating\n+     * the null hypothesis that the two independent samples has equal mean.\n+     * </p>\n+     * <p>\n+     * Let X<sub>i</sub> denote the i'th individual of the first sample and\n+     * Y<sub>j</sub> the j'th individual in the second sample. Note that the\n+     * samples would often have different length.\n+     * </p>\n+     * <p>\n+     * <strong>Preconditions</strong>:\n+     * <ul>\n+     * <li>All observations in the two samples are independent.</li>\n+     * <li>The observations are at least ordinal (continuous are also ordinal).</li>\n+     * </ul>\n+     * </p>\n+     * \n+     * @param x\n+     *            the first sample\n+     * @param y\n+     *            the second sample\n+     * @return mannWhitneyU statistic\n+     * @throws IllegalArgumentException\n+     *             if preconditions are not met\n+     */\n+    double mannWhitneyU(final double[] x, final double[] y)\n+            throws IllegalArgumentException;\n+\n+    /**\n+     * Returns the asymptotic <i>observed significance level</i>, or <a href=\n+     * \"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n+     * p-value</a>, associated with a <a\n+     * href=\"http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U\"> Mann-Whitney\n+     * U statistic</a> comparing mean for two independent samples.\n+     * <p>\n+     * Let X<sub>i</sub> denote the i'th individual of the first sample and\n+     * Y<sub>j</sub> the j'th individual in the second sample. Note that the\n+     * samples would often have different length.\n+     * </p>\n+     * <p>\n+     * <strong>Preconditions</strong>:\n+     * <ul>\n+     * <li>All observations in the two samples are independent.</li>\n+     * <li>The observations are at least ordinal (continuous are also ordinal).</li>\n+     * </ul>\n+     * </p>\n+     * \n+     * @param x\n+     *            the first sample\n+     * @param y\n+     *            the second sample\n+     * @param exactPValue\n+     *            if the exact p-value is wanted (only works for x.length <= 30,\n+     *            if true and x.length > 30, this is ignored because\n+     *            calculations may take too long)\n+     * @return asymptotic p-value\n+     * @throws IllegalArgumentException\n+     *             if preconditions are not met\n+     * @throws MathException\n+     *             if an error occurs computing the p-value\n+     */\n+    double mannWhitneyUTest(final double[] x, final double[] y)\n+            throws IllegalArgumentException, MathException;\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.inference;\n+\n+import org.apache.commons.math.MathException;\n+import org.apache.commons.math.distribution.NormalDistributionImpl;\n+import org.apache.commons.math.stat.ranking.NaNStrategy;\n+import org.apache.commons.math.stat.ranking.NaturalRanking;\n+import org.apache.commons.math.stat.ranking.TiesStrategy;\n+import org.apache.commons.math.util.FastMath;\n+\n+/**\n+ * An implementation of the Mann-Whitney U test (also called Wilcoxon rank-sum\n+ * test).\n+ * \n+ * @version $Revision: $ $Date: $\n+ */\n+public class MannWhitneyUTestImpl implements MannWhitneyUTest {\n+    private NaturalRanking naturalRanking;\n+\n+    /**\n+     * Create a test instance using where NaN's are left in place and ties get\n+     * the average of applicable ranks. Use this unless you are very sure of\n+     * what you are doing.\n+     */\n+    public MannWhitneyUTestImpl() {\n+        naturalRanking = new NaturalRanking(NaNStrategy.FIXED,\n+                TiesStrategy.AVERAGE);\n+    }\n+\n+    /**\n+     * Create a test instance using the given strategies for NaN's and ties.\n+     * Only use this if you are sure of what you are doing.\n+     * \n+     * @param nanStrategy\n+     *            specifies the strategy that should be used for Double.NaN's\n+     * @param tiesStrategy\n+     *            specifies the strategy that should be used for ties\n+     */\n+    public MannWhitneyUTestImpl(NaNStrategy nanStrategy,\n+            TiesStrategy tiesStrategy) {\n+        naturalRanking = new NaturalRanking(nanStrategy, tiesStrategy);\n+    }\n+\n+    /**\n+     * Ensures that the provided arrays fulfills the assumptions.\n+     * \n+     * @param x\n+     * @param y\n+     * @throws IllegalArgumentException\n+     *             if assumptions are not met\n+     */\n+    private void ensureDataConformance(final double[] x, final double[] y)\n+            throws IllegalArgumentException {\n+        if (x == null) {\n+            throw new IllegalArgumentException(\"x must not be null\");\n+        }\n+\n+        if (y == null) {\n+            throw new IllegalArgumentException(\"y must not be null\");\n+        }\n+\n+        if (x.length == 0) {\n+            throw new IllegalArgumentException(\n+                    \"x must contain at least one element\");\n+        }\n+\n+        if (y.length == 0) {\n+            throw new IllegalArgumentException(\n+                    \"y must contain at least one element\");\n+        }\n+    }\n+\n+    private double[] concatinateSamples(final double[] x, final double[] y) {\n+        final double[] z = new double[x.length + y.length];\n+\n+        System.arraycopy(x, 0, z, 0, x.length);\n+        System.arraycopy(y, 0, z, x.length, y.length);\n+\n+        return z;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     * \n+     * @param x\n+     *            the first sample\n+     * @param y\n+     *            the second sample\n+     * @return mannWhitneyU statistic U (maximum of U<sup>x</sup> and U<sup>y</sup>)\n+     * @throws IllegalArgumentException\n+     *             if preconditions are not met\n+     */\n+    public double mannWhitneyU(final double[] x, final double[] y)\n+            throws IllegalArgumentException {\n+\n+        ensureDataConformance(x, y);\n+\n+        final double[] z = concatinateSamples(x, y);\n+        final double[] ranks = naturalRanking.rank(z);\n+\n+        double sumRankX = 0;\n+\n+        /*\n+         * The ranks for x is in the first x.length entries in ranks because x\n+         * is in the first x.length entries in z\n+         */\n+        for (int i = 0; i < x.length; ++i) {\n+            sumRankX += ranks[i];\n+        }\n+\n+        /*\n+         * U1 = R1 - (n1 * (n1 + 1)) / 2 where R1 is sum of ranks for sample 1,\n+         * e.g. x, n1 is the number of observations in sample 1.\n+         */\n+        final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;\n+\n+        /*\n+         * It can be shown that U1 + U2 = n1 * n2\n+         */\n+        final double U2 = x.length * y.length - U1;\n+\n+        return FastMath.max(U1, U2);\n+    }\n+\n+    /**\n+     * @param Umin\n+     *            smallest Mann-Whitney U value\n+     * @param N\n+     *            number of subjects (corresponding to x.length)\n+     * @return two-sided asymptotic p-value\n+     * @throws MathException\n+     *             if an error occurs computing the p-value\n+     */\n+    private double calculateAsymptoticPValue(final double Umin, final int n1,\n+            final int n2) throws MathException {\n+        \n+        final int n1n2prod = n1 * n2;\n+\n+        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n+        final double EU = (double) n1n2prod / 2.0;\n+        final double VarU = (double) (n1n2prod * (n1 + n2 + 1)) / 12.0;\n+\n+        final double z = (Umin - EU) / FastMath.sqrt(VarU);\n+\n+        final NormalDistributionImpl standardNormal = new NormalDistributionImpl(\n+                0, 1);\n+\n+        return 2 * standardNormal.cumulativeProbability(z);\n+    }\n+\n+    /**\n+     * Ties give rise to biased variance at the moment. See e.g. <a\n+     * href=\"http://mlsc.lboro.ac.uk/resources/statistics/Mannwhitney.pdf\"\n+     * >http://mlsc.lboro.ac.uk/resources/statistics/Mannwhitney.pdf</a>.\n+     * \n+     * {@inheritDoc}\n+     * \n+     * @param x\n+     *            the first sample\n+     * @param y\n+     *            the second sample\n+     * @param exactPValue\n+     *            if the exact p-value is wanted (only for x.length <= 50)\n+     * @return asymptotic p-value (biased for samples with ties)\n+     * @throws IllegalArgumentException\n+     *             if preconditions are not met\n+     * @throws MathException\n+     *             if an error occurs computing the p-value\n+     */\n+    public double mannWhitneyUTest(final double[] x, final double[] y)\n+            throws IllegalArgumentException, MathException {\n+\n+        ensureDataConformance(x, y);\n+        \n+        final double Umax = mannWhitneyU(x, y);\n+        \n+        /*\n+         * It can be shown that U1 + U2 = n1 * n2\n+         */\n+        final double Umin = x.length * y.length - Umax; \n+\n+        return calculateAsymptoticPValue(Umin, x.length, y.length);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.inference;\n+\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ * An interface for Wilcoxon signed-rank test.\n+ * \n+ * @version $Revision: $ $Date: $\n+ */\n+public interface WilcoxonSignedRankTest {\n+\n+    /**\n+     * Computes the <a\n+     * href=\"http://en.wikipedia.org/wiki/Wilcoxon_signed-rank_test\">\n+     * Wilcoxon signed ranked statistic</a> comparing mean for two related\n+     * samples or repeated measurements on a single sample.\n+     * <p>\n+     * This statistic can be used to perform a Wilcoxon signed ranked test\n+     * evaluating the null hypothesis that the two related samples or repeated\n+     * measurements on a single sample has equal mean.\n+     * </p>\n+     * <p>\n+     * Let X<sub>i</sub> denote the i'th individual of the first sample and\n+     * Y<sub>i</sub> the related i'th individual in the second sample. Let\n+     * Z<sub>i</sub> = Y<sub>i</sub> - X<sub>i</sub>.\n+     * </p>\n+     * <p>\n+     * <strong>Preconditions</strong>:\n+     * <ul>\n+     * <li>The differences Z<sub>i</sub> must be independent.</li>\n+     * <li>Each Z<sub>i</sub> comes from a continuous population (they must be\n+     * identical) and is symmetric about a common median.</li>\n+     * <li>The values that X<sub>i</sub> and Y<sub>i</sub> represent are\n+     * ordered, so the comparisons greater than, less than, and equal to are\n+     * meaningful.</li>\n+     * </ul>\n+     * </p>\n+     * \n+     * @param x\n+     *            the first sample\n+     * @param y\n+     *            the second sample\n+     * @return wilcoxonSignedRank statistic\n+     * @throws IllegalArgumentException\n+     *             if preconditions are not met\n+     */\n+    double wilcoxonSignedRank(final double[] x, final double[] y)\n+            throws IllegalArgumentException;\n+\n+    /**\n+     * Returns the <i>observed significance level</i>, or <a href=\n+     * \"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n+     * p-value</a>, associated with a <a\n+     * href=\"http://en.wikipedia.org/wiki/Wilcoxon_signed-rank_test\">\n+     * Wilcoxon signed ranked statistic</a> comparing mean for two related\n+     * samples or repeated measurements on a single sample.\n+     * <p>\n+     * Let X<sub>i</sub> denote the i'th individual of the first sample and\n+     * Y<sub>i</sub> the related i'th individual in the second sample. Let\n+     * Z<sub>i</sub> = Y<sub>i</sub> - X<sub>i</sub>.\n+     * </p>\n+     * <p>\n+     * <strong>Preconditions</strong>:\n+     * <ul>\n+     * <li>The differences Z<sub>i</sub> must be independent.</li>\n+     * <li>Each Z<sub>i</sub> comes from a continuous population (they must be\n+     * identical) and is symmetric about a common median.</li>\n+     * <li>The values that X<sub>i</sub> and Y<sub>i</sub> represent are\n+     * ordered, so the comparisons greater than, less than, and equal to are\n+     * meaningful.</li>\n+     * </ul>\n+     * </p>\n+     * \n+     * @param x\n+     *            the first sample\n+     * @param y\n+     *            the second sample\n+     * @param exactPValue\n+     *            if the exact p-value is wanted (only works for x.length <= 30,\n+     *            if true and x.length > 30, this is ignored because\n+     *            calculations may take too long)\n+     * @return p-value\n+     * @throws IllegalArgumentException\n+     *             if preconditions are not met\n+     * @throws MathException\n+     *             if an error occurs computing the p-value\n+     */\n+    double wilcoxonSignedRankTest(final double[] x, final double[] y,\n+            boolean exactPValue) throws IllegalArgumentException,\n+            MathException;\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.inference;\n+\n+import org.apache.commons.math.MathException;\n+import org.apache.commons.math.distribution.NormalDistributionImpl;\n+import org.apache.commons.math.stat.ranking.NaNStrategy;\n+import org.apache.commons.math.stat.ranking.NaturalRanking;\n+import org.apache.commons.math.stat.ranking.TiesStrategy;\n+import org.apache.commons.math.util.FastMath;\n+\n+/**\n+ * An implementation of the Wilcoxon signed-rank test.\n+ * \n+ * @version $Revision: $ $Date: $\n+ */\n+public class WilcoxonSignedRankTestImpl implements WilcoxonSignedRankTest {\n+    private NaturalRanking naturalRanking;\n+\n+    /**\n+     * Create a test instance where NaN's are left in place and ties get\n+     * the average of applicable ranks. Use this unless you are very sure\n+     * of what you are doing.\n+     */\n+    public WilcoxonSignedRankTestImpl() {\n+        naturalRanking = new NaturalRanking(NaNStrategy.FIXED,\n+                TiesStrategy.AVERAGE);\n+    }\n+\n+    /**\n+     * Create a test instance using the given strategies for NaN's and ties.\n+     * Only use this if you are sure of what you are doing.\n+     * \n+     * @param nanStrategy\n+     *            specifies the strategy that should be used for Double.NaN's\n+     * @param tiesStrategy\n+     *            specifies the strategy that should be used for ties\n+     */\n+    public WilcoxonSignedRankTestImpl(NaNStrategy nanStrategy,\n+            TiesStrategy tiesStrategy) {\n+        naturalRanking = new NaturalRanking(nanStrategy, tiesStrategy);\n+    }\n+\n+    /**\n+     * Ensures that the provided arrays fulfills the assumptions.\n+     * \n+     * @param x\n+     * @param y\n+     * @throws IllegalArgumentException\n+     *             if assumptions are not met\n+     */\n+    private void ensureDataConformance(final double[] x, final double[] y)\n+            throws IllegalArgumentException {\n+        if (x == null) {\n+            throw new IllegalArgumentException(\"x must not be null\");\n+        }\n+\n+        if (y == null) {\n+            throw new IllegalArgumentException(\"y must not be null\");\n+        }\n+\n+        if (x.length != y.length) {\n+            throw new IllegalArgumentException(\n+                    \"x and y must contain the same number of elements\");\n+        }\n+\n+        if (x.length == 0) {\n+            throw new IllegalArgumentException(\n+                    \"x and y must contain at least one element\");\n+        }\n+    }\n+\n+    /**\n+     * Calculates y[i] - x[i] for all i\n+     * \n+     * @param x\n+     * @param y\n+     * @throws IllegalArgumentException\n+     *             if assumptions are not met\n+     */\n+    private double[] calculateDifferences(final double[] x, final double[] y)\n+            throws IllegalArgumentException {\n+\n+        final double[] z = new double[x.length];\n+\n+        for (int i = 0; i < x.length; ++i) {\n+            z[i] = y[i] - x[i];\n+        }\n+\n+        return z;\n+    }\n+\n+    /**\n+     * Calculates |z[i]| for all i\n+     * \n+     * @param z\n+     * @throws IllegalArgumentException\n+     *             if assumptions are not met\n+     */\n+    private double[] calculateAbsoluteDifferences(final double[] z)\n+            throws IllegalArgumentException {\n+        if (z == null) {\n+            throw new IllegalArgumentException(\"z must not be null\");\n+        }\n+\n+        if (z.length == 0) {\n+            throw new IllegalArgumentException(\n+                    \"z must contain at least one element\");\n+        }\n+\n+        final double[] zAbs = new double[z.length];\n+\n+        for (int i = 0; i < z.length; ++i) {\n+            zAbs[i] = FastMath.abs(z[i]);\n+        }\n+\n+        return zAbs;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     * \n+     * @param x\n+     *            the first sample\n+     * @param y\n+     *            the second sample\n+     * @return wilcoxonSignedRank statistic (the larger of W+ and W-)\n+     * @throws IllegalArgumentException\n+     *             if preconditions are not met\n+     */\n+    public double wilcoxonSignedRank(final double[] x, final double[] y)\n+            throws IllegalArgumentException {\n+        \n+        ensureDataConformance(x, y);\n+\n+        // throws IllegalArgumentException if x and y are not correctly\n+        // specified\n+        final double[] z = calculateDifferences(x, y);\n+        final double[] zAbs = calculateAbsoluteDifferences(z);\n+\n+        final double[] ranks = naturalRanking.rank(zAbs);\n+\n+        double Wplus = 0;\n+\n+        for (int i = 0; i < z.length; ++i) {\n+            if (z[i] > 0) {\n+                Wplus += ranks[i];\n+            }\n+        }\n+\n+        final int N = x.length;\n+        final double Wminus = (((double) (N * (N + 1))) / 2.0) - Wplus;\n+\n+        return FastMath.max(Wplus, Wminus);\n+    }\n+\n+    /**\n+     * Algorithm inspired by\n+     * http://www.fon.hum.uva.nl/Service/Statistics/Signed_Rank_Algorihms.html#C\n+     * by Rob van Son, Institute of Phonetic Sciences & IFOTT, \n+     * University of Amsterdam\n+     * \n+     * @param Wmax largest Wilcoxon signed rank value\n+     * @param N number of subjects (corresponding to x.length)\n+     * @return two-sided exact p-value \n+     */\n+    private double calculateExactPValue(final double Wmax, final int N) {\n+\n+        // Total number of outcomes (equal to 2^N but a lot faster)\n+        final int m = 1 << N;\n+\n+        int largerRankSums = 0;\n+\n+        for (int i = 0; i < m; ++i) {\n+            int rankSum = 0;\n+\n+            // Generate all possible rank sums\n+            for (int j = 0; j < N; ++j) {\n+\n+                // (i >> j) & 1 extract i's j-th bit from the right\n+                if (((i >> j) & 1) == 1) {\n+                    rankSum += j + 1;\n+                }\n+            }\n+\n+            if (rankSum >= Wmax) {\n+                ++largerRankSums;\n+            }\n+        }\n+\n+        /*\n+         * largerRankSums / m gives the one-sided p-value, so it's multiplied\n+         * with 2 to get the two-sided p-value\n+         */\n+        return 2 * ((double) largerRankSums) / ((double) m);\n+    }\n+    \n+    /**\n+     * @param Wmin smallest Wilcoxon signed rank value\n+     * @param N number of subjects (corresponding to x.length)\n+     * @return two-sided asymptotic p-value \n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    private double calculateAsymptoticPValue(final double Wmin, final int N) throws MathException {\n+        \n+        final double ES = (double) (N * (N + 1)) / 4.0;\n+        \n+        /* Same as (but saves computations): \n+         * final double VarW = ((double) (N * (N + 1) * (2*N + 1))) / 24;\n+         */\n+        final double VarS = ES * ((double) (2 * N + 1) / 6.0);\n+        \n+        // - 0.5 is a continuity correction\n+        final double z = (Wmin - ES - 0.5) / FastMath.sqrt(VarS);\n+\n+        final NormalDistributionImpl standardNormal = new NormalDistributionImpl(0, 1);\n+\n+        return 2*standardNormal.cumulativeProbability(z);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     * \n+     * @param x\n+     *            the first sample\n+     * @param y\n+     *            the second sample\n+     * @param exactPValue\n+     *            if the exact p-value is wanted (only for x.length <= 30)\n+     * @return p-value\n+     * @throws IllegalArgumentException\n+     *             if preconditions are not met or exact p-value is wanted for\n+     *             when x.length > 30\n+     * @throws MathException\n+     *             if an error occurs computing the p-value\n+     */\n+    public double wilcoxonSignedRankTest(final double[] x, final double[] y,\n+            boolean exactPValue) throws IllegalArgumentException,\n+            MathException {\n+        \n+        ensureDataConformance(x, y);\n+\n+        final int N = x.length;\n+        final double Wmax = wilcoxonSignedRank(x, y);\n+        \n+        if (exactPValue && N > 30) {\n+            throw new IllegalArgumentException(\"Exact test can only be made for N <= 30.\");\n+        }\n+        \n+        if (exactPValue) {\n+            return calculateExactPValue(Wmax, N);\n+        } else {\n+            final double Wmin = ( (double)(N*(N+1)) / 2.0 ) - Wmax;\n+            return calculateAsymptoticPValue(Wmin, N);\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.inference;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test cases for the ChiSquareTestImpl class.\n+ *\n+ * @version $Revision: $ $Date: $\n+ */\n+\n+public class MannWhitneyUTestTest extends TestCase {\n+\n+    protected MannWhitneyUTest testStatistic = new MannWhitneyUTestImpl();\n+\n+    public MannWhitneyUTestTest(String name) {\n+        super(name);\n+    }\n+\n+    public void testMannWhitneyUSimple() throws Exception {\n+        /* Target values computed using R version 2.11.1\n+         * x <- c(19, 22, 16, 29, 24)\n+         * y <- c(20, 11, 17, 12)\n+         * wilcox.test(x, y, alternative = \"two.sided\", mu = 0, paired = FALSE, exact = FALSE, correct = FALSE)\n+         * W = 17, p-value = 0.08641 \n+         */\n+        final double x[] = {19, 22, 16, 29, 24};\n+        final double y[] = {20, 11, 17, 12};\n+        \n+        assertEquals(17, testStatistic.mannWhitneyU(x, y), 1e-10);\n+        assertEquals(0.08641, testStatistic.mannWhitneyUTest(x, y), 1e-5);\n+    }\n+\n+\n+    public void testMannWhitneyUInputValidation() throws Exception {\n+        /* Samples must be present, i.e. length > 0\n+         */\n+        try {\n+            testStatistic.mannWhitneyUTest(new double[] { }, new double[] { 1.0 });\n+            fail(\"x does not contain samples (exact), IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+\n+        try {\n+            testStatistic.mannWhitneyUTest(new double[] { 1.0 }, new double[] { });\n+            fail(\"y does not contain samples (exact), IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+\n+        /*\n+         * x and y is null\n+         */\n+        try {\n+            testStatistic.mannWhitneyUTest(null, null);\n+            fail(\"x and y is null (exact), IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        \n+        try {\n+            testStatistic.mannWhitneyUTest(null, null);\n+            fail(\"x and y is null (asymptotic), IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        \n+        /*\n+         * x or y is null\n+         */\n+        try {\n+            testStatistic.mannWhitneyUTest(null, new double[] { 1.0 });\n+            fail(\"x is null (exact), IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        \n+        try {\n+            testStatistic.mannWhitneyUTest(new double[] { 1.0 }, null);\n+            fail(\"y is null (exact), IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.inference;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test cases for the ChiSquareTestImpl class.\n+ *\n+ * @version $Revision: $ $Date: $\n+ */\n+\n+public class WilcoxonSignedRankTestTest extends TestCase {\n+\n+    protected WilcoxonSignedRankTest testStatistic = new WilcoxonSignedRankTestImpl();\n+\n+    public WilcoxonSignedRankTestTest(String name) {\n+        super(name);\n+    }\n+\n+    public void testWilcoxonSignedRankSimple() throws Exception {\n+        /* Target values computed using R version 2.11.1\n+         * x <- c(1.83, 0.50, 1.62, 2.48, 1.68, 1.88, 1.55, 3.06, 1.30)\n+         * y <- c(0.878, 0.647, 0.598, 2.05, 1.06, 1.29, 1.06, 3.14, 1.29)\n+         */\n+        final double x[] = {1.83, 0.50, 1.62, 2.48, 1.68, 1.88, 1.55, 3.06, 1.30};\n+        final double y[] = {0.878, 0.647, 0.598, 2.05, 1.06, 1.29, 1.06, 3.14, 1.29};\n+        \n+        /* EXACT:\n+         * wilcox.test(x, y, alternative = \"two.sided\", mu = 0, paired = TRUE, exact = TRUE, correct = FALSE)\n+         * V = 40, p-value = 0.03906\n+         * \n+         * Corresponds to the value obtained in R.\n+         */\n+        assertEquals(40, testStatistic.wilcoxonSignedRank(x, y), 1e-10);\n+        assertEquals(0.03906, testStatistic.wilcoxonSignedRankTest(x, y, true), 1e-5);        \n+        \n+        /* ASYMPTOTIC:\n+         * wilcox.test(x, y, alternative = \"two.sided\", mu = 0, paired = TRUE, exact = FALSE, correct = FALSE)\n+         * V = 40, p-value = 0.03815\n+         * \n+         * This is not entirely the same due to different corrects, \n+         * e.g. http://mlsc.lboro.ac.uk/resources/statistics/wsrt.pdf\n+         * and src/library/stats/R/wilcox.test.R in the R source\n+         */\n+        assertEquals(40, testStatistic.wilcoxonSignedRank(x, y), 1e-10);\n+        assertEquals(0.0329693812, testStatistic.wilcoxonSignedRankTest(x, y, false), 1e-10);\n+    }\n+    \n+    public void testWilcoxonSignedRankInputValidation() throws Exception {\n+        /*\n+         * Exact only for sample size <= 30\n+         */\n+        final double[] x1 = new double[30];\n+        final double[] x2 = new double[31];\n+        final double[] y1 = new double[30];\n+        final double[] y2 = new double[31];\n+        for (int i = 0; i < 30; ++i) {\n+            x1[i] = x2[i] = y1[i] = y2[i] = i;            \n+        }\n+        \n+        // Exactly 30 is okay\n+        testStatistic.wilcoxonSignedRankTest(x1, y1, true);            \n+        \n+        try {\n+            testStatistic.wilcoxonSignedRankTest(x2, y2, true);\n+            fail(\"More than 30 samples and exact chosen, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        \n+        /* Samples must be present, i.e. length > 0\n+         */\n+        try {\n+            testStatistic.wilcoxonSignedRankTest(new double[] { }, new double[] { 1.0 }, true);\n+            fail(\"x does not contain samples (exact), IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+\n+        try {\n+            testStatistic.wilcoxonSignedRankTest(new double[] { }, new double[] { 1.0 }, false);\n+            fail(\"x does not contain samples (asymptotic), IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+\n+        try {\n+            testStatistic.wilcoxonSignedRankTest(new double[] { 1.0 }, new double[] { }, true);\n+            fail(\"y does not contain samples (exact), IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+\n+        try {\n+            testStatistic.wilcoxonSignedRankTest(new double[] { 1.0 }, new double[] { }, false);\n+            fail(\"y does not contain samples (asymptotic), IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+\n+        /* Samples not same size, i.e. cannot be pairred\n+         */\n+        try {\n+            testStatistic.wilcoxonSignedRankTest(new double[] { 1.0, 2.0 }, new double[] { 3.0 }, true);\n+            fail(\"x and y not same size (exact), IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+\n+        try {\n+            testStatistic.wilcoxonSignedRankTest(new double[] { 1.0, 2.0 }, new double[] { 3.0 }, false);\n+            fail(\"x and y not same size (asymptotic), IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        \n+        /*\n+         * x and y is null\n+         */\n+        try {\n+            testStatistic.wilcoxonSignedRankTest(null, null, true);\n+            fail(\"x and y is null (exact), IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        \n+        try {\n+            testStatistic.wilcoxonSignedRankTest(null, null, false);\n+            fail(\"x and y is null (asymptotic), IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        \n+        /*\n+         * x or y is null\n+         */\n+        try {\n+            testStatistic.wilcoxonSignedRankTest(null, new double[] { 1.0 }, true);\n+            fail(\"x is null (exact), IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        \n+        try {\n+            testStatistic.wilcoxonSignedRankTest(null, new double[] { 1.0 }, false);\n+            fail(\"x is null (asymptotic), IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        \n+        try {\n+            testStatistic.wilcoxonSignedRankTest(new double[] { 1.0 }, null, true);\n+            fail(\"y is null (exact), IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        \n+        try {\n+            testStatistic.wilcoxonSignedRankTest(new double[] { 1.0 }, null, false);\n+            fail(\"y is null (asymptotic), IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+}", "timestamp": 1293702720, "metainfo": ""}