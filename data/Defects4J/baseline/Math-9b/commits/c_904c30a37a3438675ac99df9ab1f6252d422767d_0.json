{"sha": "904c30a37a3438675ac99df9ab1f6252d422767d", "log": "Added a way to create DerivativeStructure from all derivatives.  In some cases, users may already have all the derivatives available at once. It was impossible to use this knowledge and create the object, so users had to user dirty tricks like adding together variables holding value and zero derivative with variables holding derivatives and zero value.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n     /** Get the index of a partial derivative in the array.\n      * <p>\n      * If all orders are set to 0, then the 0<sup>th</sup> order derivative\n-     * is returned, which is the value of the function. The index for this\n-     * 0<sup>th</sup> order derivative is always 0. the indices of higher\n-     * order derivatives is between 1 and {@link #getSize() - 1)}.\n+     * is returned, which is the value of the function.\n      * </p>\n+     * <p>The indices of derivatives are between 0 and {@link #getSize() getSize()} - 1.\n+     * Their specific order is fixed for a given compiler, but otherwise not\n+     * publicly specified. There are however some simple cases which have guaranteed\n+     * indices:\n+     * </p>\n+     * <ul>\n+     *   <li>the index of 0<sup>th</sup> order derivative is always 0</li>\n+     *   <li>if there is only 1 {@link #getFreeParameters() free parameter}, then the\n+     *   derivatives are sorted in increasing derivation order (i.e. f at index 0, df/dp\n+     *   at index 1, d<sup>2</sup>f/dp<sup>2</sup> at index 2 ...\n+     *   d<sup>k</sup>f/dp<sup>k</sup> at index k),</li> \n+     *   <li>if the {@link #getOrder() derivation order} is 1, then the derivatives\n+     *   are sorted in incresing free parameter order (i.e. f at index 0, df/dx<sub>1</sub>\n+     *   at index 1, df/dx<sub>2</sub> at index 2 ... df/dx<sub>k</sub> at index k),</li>\n+     *   <li>all other cases are not publicly specified</li>\n+     * </ul>\n      * <p>\n      * This method is the inverse of method {@link #getPartialDerivativeOrders(int)}\n      * </p>\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java\n                                    data, 0);\n     }\n \n+    /** Build an instance from all its derivatives.\n+     * @param parameters number of free parameters\n+     * @param order derivation order\n+     * @param derivatives derivatives sorted according to\n+     * {@link DSCompiler#getPartialDerivativeIndex(int...)}\n+     * @exception DimensionMismatchException if derivatives array does not match the\n+     * {@link DSCompiler#getSize() size} expected by the compiler\n+     * @see #getAllDerivatives()\n+     */\n+    public DerivativeStructure(final int parameters, final int order, final double ... derivatives)\n+        throws DimensionMismatchException {\n+        this(parameters, order);\n+        if (derivatives.length != data.length) {\n+            throw new DimensionMismatchException(derivatives.length, data.length);\n+        }\n+        System.arraycopy(derivatives, 0, data, 0, data.length);\n+    }\n+\n     /** Copy constructor.\n      * @param ds instance to copy\n      */\n     public double getPartialDerivative(final int ... orders)\n         throws DimensionMismatchException, NumberIsTooLargeException {\n         return data[compiler.getPartialDerivativeIndex(orders)];\n+    }\n+\n+    /** Get all partial derivatives.\n+     * @return a fresh copy of partial derivatives, in an array sorted according to\n+     * {@link DSCompiler#getPartialDerivativeIndex(int...)}\n+     */\n+    public double[] getAllDerivatives() {\n+        return data.clone();\n     }\n \n     /** '+' operator.\n--- a/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java\n import java.util.Arrays;\n import java.util.List;\n \n+import org.apache.commons.math3.TestUtils;\n import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.NumberIsTooLargeException;\n         }\n     }\n \n+    @Test\n+    public void testOneParameterConstructor() {\n+        double x = 1.2;\n+        double cos = FastMath.cos(x);\n+        double sin = FastMath.sin(x);\n+        DerivativeStructure yRef = new DerivativeStructure(1, 4, 0, x).cos();\n+        try {\n+            new DerivativeStructure(1, 4, 0.0, 0.0);\n+            Assert.fail(\"an exception should have been thrown\");\n+        } catch (DimensionMismatchException dme) {\n+            // expected\n+        } catch (Exception e) {\n+            Assert.fail(\"wrong exceptionc caught \" + e.getClass().getName());\n+        }\n+        double[] derivatives = new double[] { cos, -sin, -cos, sin, cos };\n+        DerivativeStructure y = new DerivativeStructure(1,  4, derivatives);\n+        checkEquals(yRef, y, 1.0e-15);\n+        TestUtils.assertEquals(derivatives, y.getAllDerivatives(), 1.0e-15);\n+    }\n+\n+    @Test\n+    public void testOneOrderConstructor() {\n+        double x =  1.2;\n+        double y =  2.4;\n+        double z = 12.5;\n+        DerivativeStructure xRef = new DerivativeStructure(3, 1, 0, x);\n+        DerivativeStructure yRef = new DerivativeStructure(3, 1, 1, y);\n+        DerivativeStructure zRef = new DerivativeStructure(3, 1, 2, z);\n+        try {\n+            new DerivativeStructure(3, 1, x + y - z, 1.0, 1.0);\n+            Assert.fail(\"an exception should have been thrown\");\n+        } catch (DimensionMismatchException dme) {\n+            // expected\n+        } catch (Exception e) {\n+            Assert.fail(\"wrong exceptionc caught \" + e.getClass().getName());\n+        }\n+        double[] derivatives = new double[] { x + y - z, 1.0, 1.0, -1.0 };\n+        DerivativeStructure t = new DerivativeStructure(3, 1, derivatives);\n+        checkEquals(xRef.add(yRef.subtract(zRef)), t, 1.0e-15);\n+        TestUtils.assertEquals(derivatives, xRef.add(yRef.subtract(zRef)).getAllDerivatives(), 1.0e-15);\n+    }\n+\n     private void checkF0F1(DerivativeStructure ds, double value, double...derivatives) {\n \n         // check dimension", "timestamp": 1347903739, "metainfo": ""}