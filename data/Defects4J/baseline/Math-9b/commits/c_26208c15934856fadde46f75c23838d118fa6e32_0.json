{"sha": "26208c15934856fadde46f75c23838d118fa6e32", "log": "MATH-483 FastMath does not handle all special cases correctly  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math/util/FastMath.java\n      * @return log(x)\n      */\n     private static double log(final double x, final double[] hiPrec) {\n+        if (x==0) { // Handle special case of +0/-0\n+            return Double.NEGATIVE_INFINITY;\n+        }\n         long bits = Double.doubleToLongBits(x);\n \n         /* Handle special cases of negative input, and NaN */\n         if (x>1e-6 || x<-1e-6) {\n             double hiPrec[] = new double[2];\n \n-            log(xpa, hiPrec);\n+            final double lores = log(xpa, hiPrec);\n+            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN\n+                return lores;\n+            }\n \n             /* Do a taylor series expansion around xpa */\n             /* f(x+y) = f(x) + f'(x)*y + f''(x)/2 y^2 */\n     public static double log10(final double x) {\n         final double hiPrec[] = new double[2];\n \n-        log(x, hiPrec);\n+        final double lores = log(x, hiPrec);\n+        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN\n+            return lores;\n+        }\n \n         final double tmp = hiPrec[0] * 1073741824.0;\n         final double lna = hiPrec[0] + tmp - tmp;\n         }\n \n         /* Compute ln(x) */\n-        log(x, lns);\n+        final double lores = log(x, lns);\n+        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN\n+            return lores;\n+        }\n+\n         double lna = lns[0];\n         double lnb = lns[1];\n \n         boolean negate = false;\n         int idx;\n \n+        if (xa == 0.0) { // Matches +/- 0.0; return correct sign\n+            return xa;\n+        }\n+\n         if (xa < 0) {\n             // negative\n             xa = -xa;\n           return -Math.PI/2.0;\n       }\n \n+      if (x == 0.0) { // Matches +/- 0.0; return correct sign\n+          return x;\n+      }\n+\n       /* Compute asin(x) = atan(x/sqrt(1-x*x)) */\n \n       /* Split x */\n      */\n     public static double toRadians(double x)\n     {\n+        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n+            return x;\n+        }\n+\n         final double facta = 0.01745329052209854;\n         final double factb = 1.997844754509471E-9;\n \n      */\n     public static double toDegrees(double x)\n     {\n+        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n+            return x;\n+        }\n+\n         final double facta = 57.2957763671875;\n         final double factb = 3.145894820876798E-6;\n \n      * @return abs(x)\n      */\n     public static float abs(final float x) {\n-        return (x < 0.0f) ? -x : x;\n+        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0\n     }\n \n     /**\n      * @return abs(x)\n      */\n     public static double abs(double x) {\n-        return (x < 0.0) ? -x : x;\n+        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n     }\n \n     /**\n         double d = x - y;\n \n         if (d > 0.5) {\n+            if (y == -1.0) {\n+                return -0.0; // Preserve sign of operand\n+            }\n             return y+1.0;\n         }\n         if (d < 0.5) {", "timestamp": 1295466550, "metainfo": ""}