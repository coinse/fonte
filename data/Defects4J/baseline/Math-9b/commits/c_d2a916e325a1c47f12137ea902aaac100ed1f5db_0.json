{"sha": "d2a916e325a1c47f12137ea902aaac100ed1f5db", "log": "Added tests.  ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java\n+++ b/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java\n \n package org.apache.commons.math3.geometry.euclidean.threed;\n \n+import java.text.DecimalFormat;\n+import java.text.DecimalFormatSymbols;\n+import java.text.NumberFormat;\n+import java.util.Locale;\n+\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.MathArithmeticException;\n import org.apache.commons.math3.random.Well1024a;\n import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.util.Precision;\n import org.junit.Assert;\n import org.junit.Test;\n \n                     2, 0, 3);\n         checkVector(new Vector3D(new double[] { 2,  5,  -3 }),\n                     2, 5, -3);\n+    }\n+\n+    @Test\n+    public void testEquals() {\n+        Vector3D u1 = new Vector3D(1, 2, 3);\n+        Vector3D u2 = new Vector3D(1, 2, 3);\n+        Vector3D v  = new Vector3D(1, 2, 3 + 10 * Precision.EPSILON);\n+        Assert.assertTrue(u1.equals(u1));\n+        Assert.assertTrue(u1.equals(u2));\n+        Assert.assertFalse(u1.equals(v));\n+        Assert.assertTrue(new Vector3D(0, Double.NaN, 0).equals(new Vector3D(0, 0, Double.NaN)));\n+    }\n+\n+    @Test\n+    public void testHash() {\n+        Assert.assertEquals(new Vector3D(0, Double.NaN, 0).hashCode(), new Vector3D(0, 0, Double.NaN).hashCode());\n+        Vector3D u = new Vector3D(1, 2, 3);\n+        Vector3D v = new Vector3D(1, 2, 3 + 10 * Precision.EPSILON);\n+        Assert.assertTrue(u.hashCode() != v.hashCode());\n+    }\n+\n+    @Test\n+    public void testInfinite() {\n+        Assert.assertTrue(new Vector3D(1, 1, Double.NEGATIVE_INFINITY).isInfinite());\n+        Assert.assertTrue(new Vector3D(1, Double.NEGATIVE_INFINITY, 1).isInfinite());\n+        Assert.assertTrue(new Vector3D(Double.NEGATIVE_INFINITY, 1, 1).isInfinite());\n+        Assert.assertFalse(new Vector3D(1, 1, 2).isInfinite());\n+        Assert.assertFalse(new Vector3D(1, Double.NaN, Double.NEGATIVE_INFINITY).isInfinite());\n+    }\n+\n+    @Test\n+    public void testToString() {\n+        Assert.assertEquals(\"{3; 2; 1}\", new Vector3D(3, 2, 1).toString());\n+        NumberFormat format = new DecimalFormat(\"0.000\", new DecimalFormatSymbols(Locale.US));\n+        Assert.assertEquals(\"{3.000; 2.000; 1.000}\", new Vector3D(3, 2, 1).toString(format));\n     }\n \n     @Test(expected=DimensionMismatchException.class)", "timestamp": 1360856335, "metainfo": ""}