{"sha": "8a8434921c835f5fd8c24d17f5843adbb48d2945", "log": "MATH-795:  refactored unit tests for double RealVector.cosine(RealVector).   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/RealVector.java\n+++ b/src/main/java/org/apache/commons/math3/linear/RealVector.java\n      *\n      * @param v Vector.\n      * @return the cosine of the angle between this vector and {@code v}.\n+     * @throws MathArithmeticException if {@code this} or {@code v} is the null\n+     * vector\n+     * @throws DimensionMismatchException if the dimensions of {@code this} and\n+     * {@code v} do not match\n      */\n     public double cosine(RealVector v) {\n         final double norm = getNorm();\n--- a/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n \n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n+import org.apache.commons.math3.util.FastMath;\n import org.junit.Assert;\n import org.junit.Test;\n \n \n         @Override\n         public double getNorm() {\n-            throw unsupported();\n+            double sqrNorm = 0.0;\n+            for (int i = 0; i < data.length; i++) {\n+                sqrNorm += data[i] * data[i];\n+            }\n+            return FastMath.sqrt(sqrNorm);\n         }\n \n         @Override\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n         doTestDotProductDimensionMismatch(true);\n     }\n \n+    private void doTestCosine(final boolean mixed) {\n+        final double x = getPreferredEntryValue();\n+        final double[] data1 = {\n+            x, 1d, x, x, 2d, x, x, x, 3d, x, x, x, x\n+        };\n+        final double[] data2 = {\n+            5d, -6d, 7d, x, x, -8d, -9d, 10d, 11d, x, 12d, 13d, -15d\n+        };\n+        double norm1 = 0d;\n+        double norm2 = 0d;\n+        double dotProduct = 0d;\n+        for (int i = 0; i < data1.length; i++){\n+            norm1 += data1[i] * data1[i];\n+            norm2 += data2[i] * data2[i];\n+            dotProduct += data1[i] * data2[i];\n+        }\n+        norm1 = FastMath.sqrt(norm1);\n+        norm2 = FastMath.sqrt(norm2);\n+        final double expected = dotProduct / (norm1 * norm2);\n+        final RealVector v1 = create(data1);\n+        final RealVector v2;\n+        if (mixed) {\n+            v2 = createAlien(data2);\n+        } else {\n+            v2 = create(data2);\n+        }\n+        final double actual = v1.cosine(v2);\n+        Assert.assertEquals(\"\", expected, actual, 0d);\n+\n+    }\n+\n+    @Test\n+    public void testCosineSameType() {\n+        doTestCosine(false);\n+    }\n+\n+    @Test\n+    public void testCosineMixedTypes() {\n+        doTestCosine(true);\n+    }\n+\n+    @Test(expected=MathArithmeticException.class)\n+    public void testCosineLeftNullVector() {\n+        final RealVector v = create(new double[] {0, 0, 0});\n+        final RealVector w = create(new double[] {1, 0, 0});\n+        v.cosine(w);\n+    }\n+\n+    @Test(expected=MathArithmeticException.class)\n+    public void testCosineRightNullVector() {\n+        final RealVector v = create(new double[] {0, 0, 0});\n+        final RealVector w = create(new double[] {1, 0, 0});\n+        w.cosine(v);\n+    }\n+\n+    @Test(expected=DimensionMismatchException.class)\n+    public void testCosineDimensionMismatch() {\n+        final RealVector v = create(new double[] {1, 2, 3});\n+        final RealVector w = create(new double[] {1, 2, 3, 4});\n+        v.cosine(w);\n+    }\n+\n     @Test\n     public void testBasicFunctions() {\n         final RealVector v1 = create(vec1);\n         Assert.assertTrue(Double.isNaN(v4.getMaxValue()));\n     }\n \n-    @Test\n-    public void testCosine() {\n-        final RealVector v = create(new double[] {1, 0, 0});\n-\n-        double[] wData = new double[] {1, 1, 0};\n-        RealVector w = create(wData);\n-        Assert.assertEquals(FastMath.sqrt(2) / 2, v.cosine(w), normTolerance);\n-\n-        wData = new double[] {1, 0, 0};\n-        w = create(wData);\n-        Assert.assertEquals(1, v.cosine(w), normTolerance);\n-\n-        wData = new double[] {0, 1, 0};\n-        w = create(wData);\n-        Assert.assertEquals(0, v.cosine(w), 0);\n-\n-        wData = new double[] {-1, 0, 0};\n-        w = create(wData);\n-        Assert.assertEquals(-1, v.cosine(w), normTolerance);\n-    }\n-\n-    @Test(expected=MathArithmeticException.class)\n-    public void testCosinePrecondition1() {\n-        final RealVector v = create(new double[] {0, 0, 0});\n-        final RealVector w = create(new double[] {1, 0, 0});\n-        v.cosine(w);\n-    }\n-\n-    @Test(expected=MathArithmeticException.class)\n-    public void testCosinePrecondition2() {\n-        final RealVector v = create(new double[] {0, 0, 0});\n-        final RealVector w = create(new double[] {1, 0, 0});\n-        w.cosine(v);\n-    }\n-\n-    @Test(expected=DimensionMismatchException.class)\n-    public void testCosinePrecondition3() {\n-        final RealVector v = create(new double[] {1, 2, 3});\n-        final RealVector w = create(new double[] {1, 2, 3, 4});\n-        v.cosine(w);\n-    }\n-\n     /*\n      * TESTS OF THE VISITOR PATTERN\n      */\n--- a/src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java\n import java.util.Iterator;\n \n import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.util.FastMath;\n import org.junit.Assert;\n import org.junit.Test;\n \n \n         @Override\n         public double getNorm() {\n-            throw unsupported();\n+            double sqrNorm = 0.0;\n+            for (int i = 0; i < data.length; i++) {\n+                sqrNorm += data[i] * data[i];\n+            }\n+            return FastMath.sqrt(sqrNorm);\n         }\n \n         @Override", "timestamp": 1341546484, "metainfo": ""}