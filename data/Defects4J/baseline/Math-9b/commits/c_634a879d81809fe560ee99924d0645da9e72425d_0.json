{"sha": "634a879d81809fe560ee99924d0645da9e72425d", "log": "Added tests based on NIST certified data (\"Wampler\").  JIRA: MATH-616 Contributed by Greg Sterijevski  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java\n     public void testNewSampleDataXNull() {\n         createRegression().newSampleData(new double[] {}, null);\n     }\n+    \n+     /*\n+     * This is a test based on the Wampler1 data set\n+     * http://www.itl.nist.gov/div898/strd/lls/data/Wampler1.shtml\n+     */\n+    @Test\n+    public void testWampler1() throws Exception {\n+        double[] data = new double[]{\n+            1, 0,\n+            6, 1,\n+            63, 2,\n+            364, 3,\n+            1365, 4,\n+            3906, 5,\n+            9331, 6,\n+            19608, 7,\n+            37449, 8,\n+            66430, 9,\n+            111111, 10,\n+            177156, 11,\n+            271453, 12,\n+            402234, 13,\n+            579195, 14,\n+            813616, 15,\n+            1118481, 16,\n+            1508598, 17,\n+            2000719, 18,\n+            2613660, 19,\n+            3368421, 20};\n+        OLSMultipleLinearRegression model = new OLSMultipleLinearRegression();\n+\n+\n+        final int nvars = 5;\n+        final int nobs = 21;\n+        double[] tmp = new double[(nvars + 1) * nobs];\n+        int off = 0;\n+        int off2 = 0;\n+        for (int i = 0; i < nobs; i++) {\n+            tmp[off2] = data[off];\n+            tmp[off2 + 1] = data[off + 1];\n+            tmp[off2 + 2] = tmp[off2 + 1] * tmp[off2 + 1];\n+            tmp[off2 + 3] = tmp[off2 + 1] * tmp[off2 + 2];\n+            tmp[off2 + 4] = tmp[off2 + 1] * tmp[off2 + 3];\n+            tmp[off2 + 5] = tmp[off2 + 1] * tmp[off2 + 4];\n+            off2 += (nvars + 1);\n+            off += 2;\n+        }\n+        model.newSampleData(tmp, nobs, nvars);\n+        double[] betaHat = model.estimateRegressionParameters();\n+        TestUtils.assertEquals(betaHat,\n+                new double[]{1.0,\n+                    1.0, 1.0,\n+                    1.0, 1.0,\n+                    1.0}, 1E-8);\n+\n+        double[] se = model.estimateRegressionParametersStandardErrors();\n+        TestUtils.assertEquals(se,\n+                new double[]{0.0,\n+                    0.0, 0.0,\n+                    0.0, 0.0,\n+                    0.0}, 1E-8); \n+\n+        TestUtils.assertEquals(1.0, model.calculateRSquared(), 1.0e-10);\n+        TestUtils.assertEquals(0, model.estimateErrorVariance(), 1.0e-7);\n+        TestUtils.assertEquals(0.00, model.calculateResidualSumOfSquares(), 1.0e-6);\n+\n+        return;\n+    }\n+    \n+    /*\n+     * This is a test based on the Wampler2 data set\n+     * http://www.itl.nist.gov/div898/strd/lls/data/Wampler2.shtml\n+     */\n+    @Test\n+    public void testWampler2() throws Exception {\n+        double[] data = new double[]{\n+            1.00000, 0,\n+            1.11111, 1,\n+            1.24992, 2,\n+            1.42753, 3,\n+            1.65984, 4,\n+            1.96875, 5,\n+            2.38336, 6,\n+            2.94117, 7,\n+            3.68928, 8,\n+            4.68559, 9,\n+            6.00000, 10,\n+            7.71561, 11,\n+            9.92992, 12,\n+            12.75603, 13,\n+            16.32384, 14,\n+            20.78125, 15,\n+            26.29536, 16,\n+            33.05367, 17,\n+            41.26528, 18,\n+            51.16209, 19,\n+            63.00000, 20};\n+        OLSMultipleLinearRegression model = new OLSMultipleLinearRegression();\n+\n+\n+        final int nvars = 5;\n+        final int nobs = 21;\n+        double[] tmp = new double[(nvars + 1) * nobs];\n+        int off = 0;\n+        int off2 = 0;\n+        for (int i = 0; i < nobs; i++) {\n+            tmp[off2] = data[off];\n+            tmp[off2 + 1] = data[off + 1];\n+            tmp[off2 + 2] = tmp[off2 + 1] * tmp[off2 + 1];\n+            tmp[off2 + 3] = tmp[off2 + 1] * tmp[off2 + 2];\n+            tmp[off2 + 4] = tmp[off2 + 1] * tmp[off2 + 3];\n+            tmp[off2 + 5] = tmp[off2 + 1] * tmp[off2 + 4];\n+            off2 += (nvars + 1);\n+            off += 2;\n+        }\n+        model.newSampleData(tmp, nobs, nvars);\n+        double[] betaHat = model.estimateRegressionParameters();\n+        TestUtils.assertEquals(betaHat,\n+                new double[]{\n+                    1.0,\n+                    1.0e-1,\n+                    1.0e-2,\n+                    1.0e-3, 1.0e-4,\n+                    1.0e-5}, 1E-8);\n+\n+        double[] se = model.estimateRegressionParametersStandardErrors();\n+        TestUtils.assertEquals(se,\n+                new double[]{0.0,\n+                    0.0, 0.0,\n+                    0.0, 0.0,\n+                    0.0}, 1E-8); \n+        TestUtils.assertEquals(1.0, model.calculateRSquared(), 1.0e-10);\n+        TestUtils.assertEquals(0, model.estimateErrorVariance(), 1.0e-7);\n+        TestUtils.assertEquals(0.00, model.calculateResidualSumOfSquares(), 1.0e-6);\n+        return;\n+    }\n+    \n+    /*\n+     * This is a test based on the Wampler3 data set\n+     * http://www.itl.nist.gov/div898/strd/lls/data/Wampler3.shtml\n+     */\n+    @Test\n+    public void testWampler3() throws Exception {\n+        double[] data = new double[]{\n+            760, 0,\n+            -2042, 1,\n+            2111, 2,\n+            -1684, 3,\n+            3888, 4,\n+            1858, 5,\n+            11379, 6,\n+            17560, 7,\n+            39287, 8,\n+            64382, 9,\n+            113159, 10,\n+            175108, 11,\n+            273291, 12,\n+            400186, 13,\n+            581243, 14,\n+            811568, 15,\n+            1121004, 16,\n+            1506550, 17,\n+            2002767, 18,\n+            2611612, 19,\n+            3369180, 20};\n+\n+        OLSMultipleLinearRegression model = new OLSMultipleLinearRegression();\n+        final int nvars = 5;\n+        final int nobs = 21;\n+        double[] tmp = new double[(nvars + 1) * nobs];\n+        int off = 0;\n+        int off2 = 0;\n+        for (int i = 0; i < nobs; i++) {\n+            tmp[off2] = data[off];\n+            tmp[off2 + 1] = data[off + 1];\n+            tmp[off2 + 2] = tmp[off2 + 1] * tmp[off2 + 1];\n+            tmp[off2 + 3] = tmp[off2 + 1] * tmp[off2 + 2];\n+            tmp[off2 + 4] = tmp[off2 + 1] * tmp[off2 + 3];\n+            tmp[off2 + 5] = tmp[off2 + 1] * tmp[off2 + 4];\n+            off2 += (nvars + 1);\n+            off += 2;\n+        }\n+        model.newSampleData(tmp, nobs, nvars);\n+        double[] betaHat = model.estimateRegressionParameters();\n+        TestUtils.assertEquals(betaHat,\n+                new double[]{\n+                    1.0,\n+                    1.0,\n+                    1.0,\n+                    1.0,\n+                    1.0,\n+                    1.0}, 1E-8); \n+\n+        double[] se = model.estimateRegressionParametersStandardErrors();\n+        TestUtils.assertEquals(se,\n+                new double[]{2152.32624678170,\n+                    2363.55173469681, 779.343524331583,\n+                    101.475507550350, 5.64566512170752,\n+                    0.112324854679312}, 1E-8); //\n+\n+        TestUtils.assertEquals(.999995559025820, model.calculateRSquared(), 1.0e-10);\n+        TestUtils.assertEquals(5570284.53333333, model.estimateErrorVariance(), 1.0e-6);\n+        TestUtils.assertEquals(83554268.0000000, model.calculateResidualSumOfSquares(), 1.0e-5);\n+        return;\n+    }\n+\n+    /*\n+     * This is a test based on the Wampler4 data set\n+     * http://www.itl.nist.gov/div898/strd/lls/data/Wampler4.shtml\n+     */\n+    @Test\n+    public void testWampler4() throws Exception {\n+        double[] data = new double[]{\n+            75901, 0,\n+            -204794, 1,\n+            204863, 2,\n+            -204436, 3,\n+            253665, 4,\n+            -200894, 5,\n+            214131, 6,\n+            -185192, 7,\n+            221249, 8,\n+            -138370, 9,\n+            315911, 10,\n+            -27644, 11,\n+            455253, 12,\n+            197434, 13,\n+            783995, 14,\n+            608816, 15,\n+            1370781, 16,\n+            1303798, 17,\n+            2205519, 18,\n+            2408860, 19,\n+            3444321, 20};\n+\n+        OLSMultipleLinearRegression model = new OLSMultipleLinearRegression();\n+        final int nvars = 5;\n+        final int nobs = 21;\n+        double[] tmp = new double[(nvars + 1) * nobs];\n+        int off = 0;\n+        int off2 = 0;\n+        for (int i = 0; i < nobs; i++) {\n+            tmp[off2] = data[off];\n+            tmp[off2 + 1] = data[off + 1];\n+            tmp[off2 + 2] = tmp[off2 + 1] * tmp[off2 + 1];\n+            tmp[off2 + 3] = tmp[off2 + 1] * tmp[off2 + 2];\n+            tmp[off2 + 4] = tmp[off2 + 1] * tmp[off2 + 3];\n+            tmp[off2 + 5] = tmp[off2 + 1] * tmp[off2 + 4];\n+            off2 += (nvars + 1);\n+            off += 2;\n+        }\n+        model.newSampleData(tmp, nobs, nvars);\n+        double[] betaHat = model.estimateRegressionParameters();\n+        TestUtils.assertEquals(betaHat,\n+                new double[]{\n+                    1.0,\n+                    1.0,\n+                    1.0,\n+                    1.0,\n+                    1.0,\n+                    1.0}, 1E-6); \n+\n+        double[] se = model.estimateRegressionParametersStandardErrors();\n+        TestUtils.assertEquals(se,\n+                new double[]{215232.624678170,\n+                    236355.173469681, 77934.3524331583,\n+                    10147.5507550350, 564.566512170752,\n+                    11.2324854679312}, 1E-8); \n+\n+        TestUtils.assertEquals(.957478440825662, model.calculateRSquared(), 1.0e-10);\n+        TestUtils.assertEquals(55702845333.3333, model.estimateErrorVariance(), 1.0e-4);\n+        TestUtils.assertEquals(835542680000.000, model.calculateResidualSumOfSquares(), 1.0e-3);\n+        return;\n+    }\n }", "timestamp": 1310578061, "metainfo": ""}