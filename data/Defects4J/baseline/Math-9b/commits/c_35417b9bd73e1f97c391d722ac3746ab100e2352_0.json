{"sha": "35417b9bd73e1f97c391d722ac3746ab100e2352", "log": "Eliminated tabs.  ", "commit": "\n--- a/src/test/org/apache/commons/math/TestUtils.java\n+++ b/src/test/org/apache/commons/math/TestUtils.java\n     }\n \n     public static void assertEquals(double expected, double actual, double delta) {\n-    \tassertEquals(null, expected, actual, delta);\n+        assertEquals(null, expected, actual, delta);\n     }\n \n     public static void assertEquals(String msg, double expected, double actual, double delta) {\n-    \t// check for NaN\n-    \tif(Double.isNaN(expected)){\n-    \t\tAssert.assertTrue(\"\" + actual + \" is not NaN.\",\n-    \t\t    Double.isNaN(actual));\n-    \t} else {\n-    \t\tAssert.assertEquals(msg, expected, actual, delta);\n-    \t}\n+        // check for NaN\n+        if(Double.isNaN(expected)){\n+            Assert.assertTrue(\"\" + actual + \" is not NaN.\",\n+                Double.isNaN(actual));\n+        } else {\n+            Assert.assertEquals(msg, expected, actual, delta);\n+        }\n     }\n     \n     /**\n--- a/src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java\n      * verifies that f(x[i]) = y[i] for i = 0..n-1 where n is common length.\n      */\n     protected void verifyInterpolation(UnivariateRealFunction f, double x[], double y[])  \n-    \tthrows Exception{\n+        throws Exception{\n         for (int i = 0; i < x.length; i++) {\n             assertEquals(f.value(x[i]), y[i], knotTolerance);\n         }     \n      *    adjacent polynomials must agree through two derivatives at knot points\n      */\n     protected void verifyConsistency(PolynomialSplineFunction f, double x[]) \n-    \tthrows Exception {\n+        throws Exception {\n         PolynomialFunction polynomials[] = f.getPolynomials();\n         for (int i = 1; i < x.length - 2; i++) {\n             // evaluate polynomials and derivatives at x[i + 1]  \n--- a/src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java\n+++ b/src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java\n \n public abstract class ComplexFormatAbstractTest extends TestCase {\n  \n-\tComplexFormat complexFormat = null;\n-\tComplexFormat complexFormatJ = null;\n+    ComplexFormat complexFormat = null;\n+    ComplexFormat complexFormatJ = null;\n \n     protected abstract Locale getLocale();\n \n     protected abstract char getDecimalCharacter();\n     \n-\tprotected void setUp() throws Exception {\n-\t\tcomplexFormat = ComplexFormat.getInstance(getLocale());\n-\t\tcomplexFormatJ = ComplexFormat.getInstance(getLocale());\n+    protected void setUp() throws Exception {\n+        complexFormat = ComplexFormat.getInstance(getLocale());\n+        complexFormatJ = ComplexFormat.getInstance(getLocale());\n         complexFormatJ.setImaginaryCharacter(\"j\");\n-\t}\n+    }\n    \n     public void testSimpleNoDecimals() {\n         Complex c = new Complex(1, 1);\n         assertEquals(expected, actual);\n     }\n \n-\tpublic void testSimpleWithDecimals() {\n-\t\tComplex c = new Complex(1.23, 1.43);\n+    public void testSimpleWithDecimals() {\n+        Complex c = new Complex(1.23, 1.43);\n         String expected = \"1\" + getDecimalCharacter() + \"23 + 1\" + getDecimalCharacter() + \"43i\";\n         String actual = complexFormat.format(c); \n         assertEquals(expected, actual);\n-\t}\n-\n-\tpublic void testSimpleWithDecimalsTrunc() {\n-\t\tComplex c = new Complex(1.2323, 1.4343);\n+    }\n+\n+    public void testSimpleWithDecimalsTrunc() {\n+        Complex c = new Complex(1.2323, 1.4343);\n         String expected = \"1\" + getDecimalCharacter() + \"23 + 1\" + getDecimalCharacter() + \"43i\";\n         String actual = complexFormat.format(c); \n         assertEquals(expected, actual);\n-\t}\n-\n-\tpublic void testNegativeReal() {\n-\t\tComplex c = new Complex(-1.2323, 1.4343);\n+    }\n+\n+    public void testNegativeReal() {\n+        Complex c = new Complex(-1.2323, 1.4343);\n         String expected = \"-1\" + getDecimalCharacter() + \"23 + 1\" + getDecimalCharacter() + \"43i\";\n         String actual = complexFormat.format(c); \n         assertEquals(expected, actual);\n-\t}\n-\n-\tpublic void testNegativeImaginary() {\n-\t\tComplex c = new Complex(1.2323, -1.4343);\n+    }\n+\n+    public void testNegativeImaginary() {\n+        Complex c = new Complex(1.2323, -1.4343);\n         String expected = \"1\" + getDecimalCharacter() + \"23 - 1\" + getDecimalCharacter() + \"43i\";\n         String actual = complexFormat.format(c); \n         assertEquals(expected, actual);\n-\t}\n-\n-\tpublic void testNegativeBoth() {\n-\t\tComplex c = new Complex(-1.2323, -1.4343);\n+    }\n+\n+    public void testNegativeBoth() {\n+        Complex c = new Complex(-1.2323, -1.4343);\n         String expected = \"-1\" + getDecimalCharacter() + \"23 - 1\" + getDecimalCharacter() + \"43i\";\n         String actual = complexFormat.format(c); \n         assertEquals(expected, actual);\n-\t}\n-\n-\tpublic void testZeroReal() {\n-\t\tComplex c = new Complex(0.0, -1.4343);\n+    }\n+\n+    public void testZeroReal() {\n+        Complex c = new Complex(0.0, -1.4343);\n         String expected = \"0 - 1\" + getDecimalCharacter() + \"43i\";\n         String actual = complexFormat.format(c); \n         assertEquals(expected, actual);\n-\t}\n-\n-\tpublic void testZeroImaginary() {\n-\t\tComplex c = new Complex(30.233, 0);\n+    }\n+\n+    public void testZeroImaginary() {\n+        Complex c = new Complex(30.233, 0);\n         String expected = \"30\" + getDecimalCharacter() + \"23\";\n         String actual = complexFormat.format(c); \n         assertEquals(expected, actual);\n-\t}\n-\n-\tpublic void testDifferentImaginaryChar() {\n-\t\tComplex c = new Complex(1, 1);\n+    }\n+\n+    public void testDifferentImaginaryChar() {\n+        Complex c = new Complex(1, 1);\n         String expected = \"1 + 1j\";\n         String actual = complexFormatJ.format(c); \n         assertEquals(expected, actual);\n-\t}\n-\t\n-\tpublic void testStaticFormatComplex() {\n+    }\n+    \n+    public void testStaticFormatComplex() {\n         Locale defaultLocal = Locale.getDefault();\n         Locale.setDefault(getLocale());\n         \n-\t\tComplex c = new Complex(232.222, -342.33);\n+        Complex c = new Complex(232.222, -342.33);\n         String expected = \"232\" + getDecimalCharacter() + \"22 - 342\" + getDecimalCharacter() + \"33i\";\n         String actual = ComplexFormat.formatComplex(c); \n         assertEquals(expected, actual);\n         \n         Locale.setDefault(defaultLocal);\n-\t}\n-\n-\tpublic void testNan() {\n-\t\tComplex c = new Complex(Double.NaN, Double.NaN);\n+    }\n+\n+    public void testNan() {\n+        Complex c = new Complex(Double.NaN, Double.NaN);\n         String expected = \"(NaN) + (NaN)i\";\n         String actual = complexFormat.format(c); \n         assertEquals(expected, actual);\n-\t}\n-\n-\tpublic void testPositiveInfinity() {\n-\t\tComplex c = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n+    }\n+\n+    public void testPositiveInfinity() {\n+        Complex c = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n         String expected = \"(Infinity) + (Infinity)i\";\n         String actual = complexFormat.format(c); \n         assertEquals(expected, actual);\n-\t}\n-\n-\tpublic void testNegativeInfinity() {\n-\t\tComplex c = new Complex(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);\n+    }\n+\n+    public void testNegativeInfinity() {\n+        Complex c = new Complex(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);\n         String expected = \"(-Infinity) - (Infinity)i\";\n         String actual = complexFormat.format(c); \n         assertEquals(expected, actual);\n-\t}\n+    }\n     \n     public void testParseSimpleNoDecimals() {\n         String source = \"1 + 1i\";\n--- a/src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java\n+++ b/src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java\n             double upper = Math.max(cumulativeTestPoints[i], cumulativeTestPoints[i -1]);\n             double lower = Math.min(cumulativeTestPoints[i], cumulativeTestPoints[i -1]);\n             double diff = distribution.cumulativeProbability(upper) - \n-            \tdistribution.cumulativeProbability(lower);\n+                distribution.cumulativeProbability(lower);\n             double direct = distribution.cumulativeProbability(lower, upper);\n             TestUtils.assertEquals(\"Inconsistent cumulative probabilities for (\" \n                     + lower + \",\" + upper + \")\", diff, direct, tolerance);\n--- a/src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java\n+++ b/src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java\n     /** */\n     private DistributionFactory factory;\n     \n-\t/**\n-\t * Constructor for DistributionFactoryImplTest.\n-\t * @param name\n-\t */\n-\tpublic DistributionFactoryImplTest(String name) {\n-\t\tsuper(name);\n-\t}\n-\t/**\n-\t * @throws java.lang.Exception\n-\t */\n-\tprotected void setUp() throws Exception {\n-\t\tsuper.setUp();\n+    /**\n+     * Constructor for DistributionFactoryImplTest.\n+     * @param name\n+     */\n+    public DistributionFactoryImplTest(String name) {\n+        super(name);\n+    }\n+    /**\n+     * @throws java.lang.Exception\n+     */\n+    protected void setUp() throws Exception {\n+        super.setUp();\n         factory = new DistributionFactoryImpl();\n-\t}\n+    }\n \n-\t/**\n-\t * @throws java.lang.Exception\n-\t */\n-\tprotected void tearDown() throws Exception {\n+    /**\n+     * @throws java.lang.Exception\n+     */\n+    protected void tearDown() throws Exception {\n         factory = null;\n-\t\tsuper.tearDown();\n-\t}\n+        super.tearDown();\n+    }\n     \n     public void testCreateChiSquareDistributionNegative(){\n         try {\n--- a/src/test/org/apache/commons/math/distribution/GammaDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/GammaDistributionTest.java\n \n     private void testProbability(double x, double a, double b, double expected) throws Exception {\n         DistributionFactory factory = DistributionFactory.newInstance();\n-\t\tGammaDistribution distribution = factory.createGammaDistribution( a, b );\n+        GammaDistribution distribution = factory.createGammaDistribution( a, b );\n         double actual = distribution.cumulativeProbability(x);\n         assertEquals(\"probability for \" + x, expected, actual, 10e-4);\n     }\n \n     private void testValue(double expected, double a, double b, double p) throws Exception {\n-\t\tDistributionFactory factory = DistributionFactory.newInstance();\n-\t\tGammaDistribution distribution = factory.createGammaDistribution( a, b );\n+        DistributionFactory factory = DistributionFactory.newInstance();\n+        GammaDistribution distribution = factory.createGammaDistribution( a, b );\n         double actual = distribution.inverseCumulativeProbability(p);\n         assertEquals(\"critical value for \" + p, expected, actual, 10e-4);\n     }\n--- a/src/test/org/apache/commons/math/distribution/TDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/TDistributionTest.java\n      *      Bug report that prompted this unit test.</a>\n      */\n     public void testCumulativeProbabilityAgaintStackOverflow() throws Exception {\n-    \tTDistributionImpl td = new TDistributionImpl(5.);\n-    \tdouble est;\n-    \test = td.cumulativeProbability(.1);\n-    \test = td.cumulativeProbability(.01);\n+        TDistributionImpl td = new TDistributionImpl(5.);\n+        double est;\n+        est = td.cumulativeProbability(.1);\n+        est = td.cumulativeProbability(.01);\n     }\n \n     public void testSmallDf() throws Exception {\n--- a/src/test/org/apache/commons/math/fraction/FractionFormatTest.java\n+++ b/src/test/org/apache/commons/math/fraction/FractionFormatTest.java\n \n public class FractionFormatTest extends TestCase {\n  \n-\tFractionFormat properFormat = null;\n-\tFractionFormat improperFormat = null;\n+    FractionFormat properFormat = null;\n+    FractionFormat improperFormat = null;\n \n     protected Locale getLocale() {\n         return Locale.getDefault();\n     }\n \n-\tprotected void setUp() throws Exception {\n-\t\tproperFormat = FractionFormat.getProperInstance(getLocale());\n-\t\timproperFormat = FractionFormat.getImproperInstance(getLocale());\n-\t}\n+    protected void setUp() throws Exception {\n+        properFormat = FractionFormat.getProperInstance(getLocale());\n+        improperFormat = FractionFormat.getImproperInstance(getLocale());\n+    }\n    \n     public void testFormat() {\n         Fraction c = new Fraction(1, 2);\n         assertEquals(expected, actual);\n     }\n \n-\tpublic void testFormatNegative() {\n+    public void testFormatNegative() {\n         Fraction c = new Fraction(-1, 2);\n         String expected = \"-1 / 2\";\n \n \n         actual = improperFormat.format(c); \n         assertEquals(expected, actual);\n-\t}\n+    }\n \n-\tpublic void testFormatZero() {\n+    public void testFormatZero() {\n         Fraction c = new Fraction(0, 1);\n         String expected = \"0 / 1\";\n \n \n         actual = improperFormat.format(c); \n         assertEquals(expected, actual);\n-\t}\n+    }\n     \n     public void testFormatImproper() {\n         Fraction c = new Fraction(5, 3);\n--- a/src/test/org/apache/commons/math/stat/CertifiedDataTest.java\n+++ b/src/test/org/apache/commons/math/stat/CertifiedDataTest.java\n  */\n public class CertifiedDataTest extends TestCase  {\n \n-\tprotected double mean = Double.NaN;\n+    protected double mean = Double.NaN;\n \n-\tprotected double std = Double.NaN;\n+    protected double std = Double.NaN;\n \n-\t/**\n-\t * Certified Data Test Constructor\n-\t * @param name\n-\t */\n-\tpublic CertifiedDataTest(String name) {\n-\t\tsuper(name);\n-\t}\n+    /**\n+     * Certified Data Test Constructor\n+     * @param name\n+     */\n+    public CertifiedDataTest(String name) {\n+        super(name);\n+    }\n \n-\t/* (non-Javadoc)\n-\t * @see junit.framework.TestCase#setUp()\n-\t */\n-\tpublic void setUp() {\n-\t}\n+    /* (non-Javadoc)\n+     * @see junit.framework.TestCase#setUp()\n+     */\n+    public void setUp() {\n+    }\n \n-\t/**\n-\t * @return The test suite\n-\t */\n-\tpublic static Test suite() {\n-\t\tTestSuite suite = new TestSuite(CertifiedDataTest.class);\n-\t\tsuite.setName(\"Certified Tests\");\n-\t\treturn suite;\n-\t}\n+    /**\n+     * @return The test suite\n+     */\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(CertifiedDataTest.class);\n+        suite.setName(\"Certified Tests\");\n+        return suite;\n+    }\n \n-\t/**\n-\t * Test StorelessDescriptiveStatistics\n-\t*/\n-\tpublic void testUnivariateImpl() throws Exception {\n-\t\tSummaryStatistics u = SummaryStatistics.newInstance(SummaryStatisticsImpl.class);\n-\t\tloadStats(\"data/PiDigits.txt\", u);\n-\t\tassertEquals(\"PiDigits: std\", std, u.getStandardDeviation(), .0000000000001);\n-\t\tassertEquals(\"PiDigits: mean\", mean, u.getMean(), .0000000000001);\t\n+    /**\n+     * Test StorelessDescriptiveStatistics\n+    */\n+    public void testUnivariateImpl() throws Exception {\n+        SummaryStatistics u = SummaryStatistics.newInstance(SummaryStatisticsImpl.class);\n+        loadStats(\"data/PiDigits.txt\", u);\n+        assertEquals(\"PiDigits: std\", std, u.getStandardDeviation(), .0000000000001);\n+        assertEquals(\"PiDigits: mean\", mean, u.getMean(), .0000000000001);  \n \n-\t\tloadStats(\"data/Mavro.txt\", u);\n-\t\tassertEquals(\"Mavro: std\", std, u.getStandardDeviation(), .00000000000001);\n-\t\tassertEquals(\"Mavro: mean\", mean, u.getMean(), .00000000000001);\n-\t\t\n-\t\t//loadStats(\"data/Michelso.txt\");\n-\t\t//assertEquals(\"Michelso: std\", std, u.getStandardDeviation(), .00000000000001);\n-\t\t//assertEquals(\"Michelso: mean\", mean, u.getMean(), .00000000000001);\t\n-\t\t\t\t\t\t\t\t\t\t\n-\t\tloadStats(\"data/NumAcc1.txt\", u);\n-\t\tassertEquals(\"NumAcc1: std\", std, u.getStandardDeviation(), .00000000000001);\n-\t\tassertEquals(\"NumAcc1: mean\", mean, u.getMean(), .00000000000001);\n-\t\t\n-\t\t//loadStats(\"data/NumAcc2.txt\");\n-\t\t//assertEquals(\"NumAcc2: std\", std, u.getStandardDeviation(), .000000001);\n-\t\t//assertEquals(\"NumAcc2: mean\", mean, u.getMean(), .00000000000001);\n-\t}\n+        loadStats(\"data/Mavro.txt\", u);\n+        assertEquals(\"Mavro: std\", std, u.getStandardDeviation(), .00000000000001);\n+        assertEquals(\"Mavro: mean\", mean, u.getMean(), .00000000000001);\n+        \n+        //loadStats(\"data/Michelso.txt\");\n+        //assertEquals(\"Michelso: std\", std, u.getStandardDeviation(), .00000000000001);\n+        //assertEquals(\"Michelso: mean\", mean, u.getMean(), .00000000000001);   \n+                                        \n+        loadStats(\"data/NumAcc1.txt\", u);\n+        assertEquals(\"NumAcc1: std\", std, u.getStandardDeviation(), .00000000000001);\n+        assertEquals(\"NumAcc1: mean\", mean, u.getMean(), .00000000000001);\n+        \n+        //loadStats(\"data/NumAcc2.txt\");\n+        //assertEquals(\"NumAcc2: std\", std, u.getStandardDeviation(), .000000001);\n+        //assertEquals(\"NumAcc2: mean\", mean, u.getMean(), .00000000000001);\n+    }\n \n-\t/**\n-\t * Test StorelessDescriptiveStatistics\n-\t */\n-\tpublic void testStoredUnivariateImpl() throws Exception {\n+    /**\n+     * Test StorelessDescriptiveStatistics\n+     */\n+    public void testStoredUnivariateImpl() throws Exception {\n \n-\t\tDescriptiveStatistics u = DescriptiveStatistics.newInstance();\n-\t\t\n-\t\tloadStats(\"data/PiDigits.txt\", u);\n-\t\tassertEquals(\"PiDigits: std\", std, u.getStandardDeviation(), .0000000000001);\n-\t\tassertEquals(\"PiDigits: mean\", mean, u.getMean(), .0000000000001);\n-\t\t\n-\t\tloadStats(\"data/Mavro.txt\", u);\n-\t\tassertEquals(\"Mavro: std\", std, u.getStandardDeviation(), .00000000000001);\n-\t\tassertEquals(\"Mavro: mean\", mean, u.getMean(), .00000000000001);\t\t\n-\t\t\n-\t\t//loadStats(\"data/Michelso.txt\");\n-\t\t//assertEquals(\"Michelso: std\", std, u.getStandardDeviation(), .00000000000001);\n-\t\t//assertEquals(\"Michelso: mean\", mean, u.getMean(), .00000000000001);\t\n+        DescriptiveStatistics u = DescriptiveStatistics.newInstance();\n+        \n+        loadStats(\"data/PiDigits.txt\", u);\n+        assertEquals(\"PiDigits: std\", std, u.getStandardDeviation(), .0000000000001);\n+        assertEquals(\"PiDigits: mean\", mean, u.getMean(), .0000000000001);\n+        \n+        loadStats(\"data/Mavro.txt\", u);\n+        assertEquals(\"Mavro: std\", std, u.getStandardDeviation(), .00000000000001);\n+        assertEquals(\"Mavro: mean\", mean, u.getMean(), .00000000000001);        \n+        \n+        //loadStats(\"data/Michelso.txt\");\n+        //assertEquals(\"Michelso: std\", std, u.getStandardDeviation(), .00000000000001);\n+        //assertEquals(\"Michelso: mean\", mean, u.getMean(), .00000000000001);   \n \n-\t\tloadStats(\"data/NumAcc1.txt\", u);\n-\t\tassertEquals(\"NumAcc1: std\", std, u.getStandardDeviation(), .00000000000001);\n-\t\tassertEquals(\"NumAcc1: mean\", mean, u.getMean(), .00000000000001);\n-\t\t\n-\t\t//loadStats(\"data/NumAcc2.txt\");\n-\t\t//assertEquals(\"NumAcc2: std\", std, u.getStandardDeviation(), .000000001);\n-\t\t//assertEquals(\"NumAcc2: mean\", mean, u.getMean(), .00000000000001);\n-\t}\n+        loadStats(\"data/NumAcc1.txt\", u);\n+        assertEquals(\"NumAcc1: std\", std, u.getStandardDeviation(), .00000000000001);\n+        assertEquals(\"NumAcc1: mean\", mean, u.getMean(), .00000000000001);\n+        \n+        //loadStats(\"data/NumAcc2.txt\");\n+        //assertEquals(\"NumAcc2: std\", std, u.getStandardDeviation(), .000000001);\n+        //assertEquals(\"NumAcc2: mean\", mean, u.getMean(), .00000000000001);\n+    }\n \n-\t/**\n-\t * loads a DescriptiveStatistics off of a test file\n-\t * @param file\n-\t * @param statistical summary\n-\t */\n-\tprivate void loadStats(String resource, Object u) throws Exception {\n-\t    \n-\t    DescriptiveStatistics d = null;\n-\t    SummaryStatistics s = null;\n-\t    if (u instanceof DescriptiveStatistics) {\n-\t        d = (DescriptiveStatistics) u;\n-\t    } else {\n-\t        s = (SummaryStatistics) u;\n-\t    }\n-\t    \n-\t    u.getClass().getDeclaredMethod(\"clear\", null).invoke(u, null);\n-\t    mean = Double.NaN;\n-\t    std = Double.NaN;\n-\t    \n-\t    BufferedReader in =\n-\t        new BufferedReader(\n-\t                new InputStreamReader(\n-\t                        getClass().getResourceAsStream(resource)));\n-\t    \n-\t    String line = null;\n-\t    \n-\t    for (int j = 0; j < 60; j++) {\n-\t        line = in.readLine();\n-\t        if (j == 40) {\n-\t            mean =\n-\t                Double.parseDouble(\n-\t                        line.substring(line.lastIndexOf(\":\") + 1).trim());\n-\t        }\n-\t        if (j == 41) {\n-\t            std =\n-\t                Double.parseDouble(\n-\t                        line.substring(line.lastIndexOf(\":\") + 1).trim());\n-\t        }\n-\t    }\n-\t    \n-\t    line = in.readLine();\n-\t    \n-\t    while (line != null) {\n-\t        if (d != null) {\n-\t            d.addValue(Double.parseDouble(line.trim()));\n-\t        }  else {\n-\t            s.addValue(Double.parseDouble(line.trim()));\n-\t        }\n-\t        line = in.readLine();\n-\t    }\n-\t    \n-\t    in.close();\n-\t}\n+    /**\n+     * loads a DescriptiveStatistics off of a test file\n+     * @param file\n+     * @param statistical summary\n+     */\n+    private void loadStats(String resource, Object u) throws Exception {\n+        \n+        DescriptiveStatistics d = null;\n+        SummaryStatistics s = null;\n+        if (u instanceof DescriptiveStatistics) {\n+            d = (DescriptiveStatistics) u;\n+        } else {\n+            s = (SummaryStatistics) u;\n+        }\n+        \n+        u.getClass().getDeclaredMethod(\"clear\", null).invoke(u, null);\n+        mean = Double.NaN;\n+        std = Double.NaN;\n+        \n+        BufferedReader in =\n+            new BufferedReader(\n+                    new InputStreamReader(\n+                            getClass().getResourceAsStream(resource)));\n+        \n+        String line = null;\n+        \n+        for (int j = 0; j < 60; j++) {\n+            line = in.readLine();\n+            if (j == 40) {\n+                mean =\n+                    Double.parseDouble(\n+                            line.substring(line.lastIndexOf(\":\") + 1).trim());\n+            }\n+            if (j == 41) {\n+                std =\n+                    Double.parseDouble(\n+                            line.substring(line.lastIndexOf(\":\") + 1).trim());\n+            }\n+        }\n+        \n+        line = in.readLine();\n+        \n+        while (line != null) {\n+            if (d != null) {\n+                d.addValue(Double.parseDouble(line.trim()));\n+            }  else {\n+                s.addValue(Double.parseDouble(line.trim()));\n+            }\n+            line = in.readLine();\n+        }\n+        \n+        in.close();\n+    }\n }\n--- a/src/test/org/apache/commons/math/stat/FrequencyTest.java\n+++ b/src/test/org/apache/commons/math/stat/FrequencyTest.java\n     }\n     \n     public void setUp() {  \n-    \tf = new Frequency();\n+        f = new Frequency();\n     }\n     \n     public static Test suite() {\n     \n     /** test adding incomparable values */\n     public void testAdd() {\n-    \tchar aChar = 'a';\n-    \tchar bChar = 'b';\n-    \tString aString = \"a\";\n-    \tf.addValue(aChar);\n-    \tf.addValue(bChar);\n-    \ttry {\n-    \t\tf.addValue(aString); \t\n-    \t\tfail(\"Expecting IllegalArgumentException\");\n-    \t} catch (IllegalArgumentException ex) {\n-    \t\t// expected\n-    \t}\n-    \tassertEquals(\"a pct\",0.5,f.getPct(aChar),tolerance);\n-    \tassertEquals(\"b cum pct\",1.0,f.getCumPct(bChar),tolerance);\n-    \tassertEquals(\"a string pct\",0.0,f.getPct(aString),tolerance);\n-    \tassertEquals(\"a string cum pct\",0.0,f.getCumPct(aString),tolerance);\n+        char aChar = 'a';\n+        char bChar = 'b';\n+        String aString = \"a\";\n+        f.addValue(aChar);\n+        f.addValue(bChar);\n+        try {\n+            f.addValue(aString);    \n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        assertEquals(\"a pct\",0.5,f.getPct(aChar),tolerance);\n+        assertEquals(\"b cum pct\",1.0,f.getCumPct(bChar),tolerance);\n+        assertEquals(\"a string pct\",0.0,f.getPct(aString),tolerance);\n+        assertEquals(\"a string cum pct\",0.0,f.getCumPct(aString),tolerance);\n     }\n     \n     /** test empty table */\n--- a/src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java\n+++ b/src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java\n  * @version $Revision$ $Date$\n  */\n public abstract class CertifiedDataAbstractTest extends TestCase {\n-\t\n-\tprivate DescriptiveStatistics descriptives;\n-\t\n-\tprivate SummaryStatistics summaries;\n-\t\n-\tprivate Map certifiedValues;\n-\t\n-\tprotected void setUp() throws Exception {\n-\t\tdescriptives = DescriptiveStatistics.newInstance();\n-\t\tsummaries = SummaryStatistics.newInstance();\n-\t\tcertifiedValues = new HashMap();\n-\t\t\n-\t\tloadData();\n-\t}\n+    \n+    private DescriptiveStatistics descriptives;\n+    \n+    private SummaryStatistics summaries;\n+    \n+    private Map certifiedValues;\n+    \n+    protected void setUp() throws Exception {\n+        descriptives = DescriptiveStatistics.newInstance();\n+        summaries = SummaryStatistics.newInstance();\n+        certifiedValues = new HashMap();\n+        \n+        loadData();\n+    }\n \n-\tprivate void loadData() throws IOException {\n-\t\tBufferedReader in = null;\n+    private void loadData() throws IOException {\n+        BufferedReader in = null;\n \n-\t\ttry {\n-\t\t\tURL resourceURL = getClass().getClassLoader().getResource(getResourceName());\n-\t\t\tin = new BufferedReader(new InputStreamReader(resourceURL.openStream()));\n-\t\t\t\n-\t\t\tString line = in.readLine();\n-\t\t\twhile (line != null) {\n-\t\t\t    \n-\t\t\t    /* this call to StringUtils did little for the \n-\t\t\t     * following conditional structure \n-\t\t\t     */\n-\t\t\t    line = line.trim();\n+        try {\n+            URL resourceURL = getClass().getClassLoader().getResource(getResourceName());\n+            in = new BufferedReader(new InputStreamReader(resourceURL.openStream()));\n+            \n+            String line = in.readLine();\n+            while (line != null) {\n+                \n+                /* this call to StringUtils did little for the \n+                 * following conditional structure \n+                 */\n+                line = line.trim();\n \n-\t\t\t\t// not empty line or comment\n-\t\t\t\tif (!(\"\".equals(line) || line.startsWith(\"#\"))) {\n-\t\t\t\t\tint n = line.indexOf('=');\n-\t\t\t\t\tif (n == -1) {\n-\t\t\t\t\t\t// data value\n-\t\t\t\t\t\tdouble value = Double.parseDouble(line);\n-\t\t\t\t\t\tdescriptives.addValue(value);\n-\t\t\t\t\t\tsummaries.addValue(value);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\t// certified value\n-\t\t\t\t\t\tString name = line.substring(0, n).trim();\n-\t\t\t\t\t\tString valueString = line.substring(n + 1).trim();\n-\t\t\t\t\t\tDouble value = new Double(valueString);\n-\t\t\t\t\t\tcertifiedValues.put(name, value);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tline = in.readLine();\n-\t\t\t}\n-\t\t} finally {\n-\t\t\tif (in != null) {\n-\t\t\t\tin.close();\n-\t\t\t}\n-\t\t}\n-\t}\n+                // not empty line or comment\n+                if (!(\"\".equals(line) || line.startsWith(\"#\"))) {\n+                    int n = line.indexOf('=');\n+                    if (n == -1) {\n+                        // data value\n+                        double value = Double.parseDouble(line);\n+                        descriptives.addValue(value);\n+                        summaries.addValue(value);\n+                    } else {\n+                        // certified value\n+                        String name = line.substring(0, n).trim();\n+                        String valueString = line.substring(n + 1).trim();\n+                        Double value = new Double(valueString);\n+                        certifiedValues.put(name, value);\n+                    }\n+                }\n+                line = in.readLine();\n+            }\n+        } finally {\n+            if (in != null) {\n+                in.close();\n+            }\n+        }\n+    }\n \n-\t/**\n-\t * @return\n-\t */\n-\tprotected abstract String getResourceName();\n+    /**\n+     * @return\n+     */\n+    protected abstract String getResourceName();\n \n-\tprotected double getMaximumAbsoluteError() {\n-\t\treturn 1.0e-5;\n-\t}\n-\t\n-\tprotected void tearDown() throws Exception {\n-\t\tdescriptives.clear();\n-\t\tdescriptives = null;\n-\t\t\n-\t\tsummaries.clear();\n-\t\tsummaries = null;\n-\t\t\n-\t\tcertifiedValues.clear();\n-\t\tcertifiedValues = null;\n-\t}\n-\t\n-\tpublic void testCertifiedValues() throws Exception {\n-\t\tIterator iter = certifiedValues.keySet().iterator();\n-\t\twhile (iter.hasNext()) {\n-\t\t\tString name = iter.next().toString();\n-\t\t\tDouble expectedValue = (Double)certifiedValues.get(name);\n-\t\t\ttry {\n-\t\t\t\tDouble summariesValue = (Double)this.getProperty(summaries, name);\n-\t\t\t\tTestUtils.assertEquals(\"summary value for \" + name + \" is incorrect.\",\n-\t\t\t\t\t\tsummariesValue.doubleValue(), expectedValue.doubleValue(), getMaximumAbsoluteError());\n-\t\t\t} catch (Exception ex) {\n-\t\t\t}\n-\t\t\t\n-\t\t\ttry {\n-\t\t\t\tDouble descriptivesValue = (Double)this.getProperty(descriptives, name);\n-\t\t\t\tTestUtils.assertEquals(\"descriptive value for \" + name + \" is incorrect.\",\n-\t\t\t\t\t\tdescriptivesValue.doubleValue(), expectedValue.doubleValue(), getMaximumAbsoluteError());\n-\t\t\t} catch (Exception ex) {\n-\t\t\t}\n-\t\t}\n- \t}\n-\t\n-\t\n-\tprotected Object getProperty(Object bean, String name) throws Exception{\n-\t    // Get the value of prop\n-\t    String prop = \"get\" + name.substring(0,1).toUpperCase() + name.substring(1); \n+    protected double getMaximumAbsoluteError() {\n+        return 1.0e-5;\n+    }\n+    \n+    protected void tearDown() throws Exception {\n+        descriptives.clear();\n+        descriptives = null;\n+        \n+        summaries.clear();\n+        summaries = null;\n+        \n+        certifiedValues.clear();\n+        certifiedValues = null;\n+    }\n+    \n+    public void testCertifiedValues() throws Exception {\n+        Iterator iter = certifiedValues.keySet().iterator();\n+        while (iter.hasNext()) {\n+            String name = iter.next().toString();\n+            Double expectedValue = (Double)certifiedValues.get(name);\n+            try {\n+                Double summariesValue = (Double)this.getProperty(summaries, name);\n+                TestUtils.assertEquals(\"summary value for \" + name + \" is incorrect.\",\n+                        summariesValue.doubleValue(), expectedValue.doubleValue(), getMaximumAbsoluteError());\n+            } catch (Exception ex) {\n+            }\n+            \n+            try {\n+                Double descriptivesValue = (Double)this.getProperty(descriptives, name);\n+                TestUtils.assertEquals(\"descriptive value for \" + name + \" is incorrect.\",\n+                        descriptivesValue.doubleValue(), expectedValue.doubleValue(), getMaximumAbsoluteError());\n+            } catch (Exception ex) {\n+            }\n+        }\n+    }\n+    \n+    \n+    protected Object getProperty(Object bean, String name) throws Exception{\n+        // Get the value of prop\n+        String prop = \"get\" + name.substring(0,1).toUpperCase() + name.substring(1); \n         Method meth = bean.getClass().getMethod(prop, new Class[0]);\n         return meth.invoke(bean, new Object[0]);\n-\t}\n+    }\n }\n--- a/src/test/org/apache/commons/math/stat/data/LewTest.java\n+++ b/src/test/org/apache/commons/math/stat/data/LewTest.java\n  */\n public class LewTest extends CertifiedDataAbstractTest {\n \n-\tprotected String getResourceName() {\n-\t\treturn \"org/apache/commons/math/stat/data/Lew.txt\";\n-\t}\n+    protected String getResourceName() {\n+        return \"org/apache/commons/math/stat/data/Lew.txt\";\n+    }\n }\n--- a/src/test/org/apache/commons/math/stat/data/LotteryTest.java\n+++ b/src/test/org/apache/commons/math/stat/data/LotteryTest.java\n  */\n public class LotteryTest extends CertifiedDataAbstractTest {\n \n-\tprotected String getResourceName() {\n-\t\treturn \"org/apache/commons/math/stat/data/Lottery.txt\";\n-\t}\n+    protected String getResourceName() {\n+        return \"org/apache/commons/math/stat/data/Lottery.txt\";\n+    }\n }\n--- a/src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java\n     }     \n     \n     public void testN0andN1Conditions() throws Exception {\n-    \tDescriptiveStatistics u = DescriptiveStatistics.newInstance(); \n-    \t    \t\n+        DescriptiveStatistics u = DescriptiveStatistics.newInstance(); \n+                \n             assertTrue(\"Mean of n = 0 set should be NaN\", \n                 Double.isNaN( u.getMean() ) );\n             assertTrue(\"Standard Deviation of n = 0 set should be NaN\", \n             assertTrue( \"StdDev of n = 1 set should be zero, instead it is: \" \n                 + u.getStandardDeviation(), u.getStandardDeviation() == 0);\n             assertTrue( \"Variance of n = 1 set should be zero\", \n-                u.getVariance() == 0);\t\n+                u.getVariance() == 0);  \n     }\n     \n     public void testSkewAndKurtosis() {\n-    \tDescriptiveStatistics u = DescriptiveStatistics.newInstance(); \n-    \t\n-    \tdouble[] testArray = \n+        DescriptiveStatistics u = DescriptiveStatistics.newInstance(); \n+        \n+        double[] testArray = \n         { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,\n           9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };\n-  \t  \tfor( int i = 0; i < testArray.length; i++) {\n-  \t  \t\tu.addValue( testArray[i]);\n-  \t  \t}\n-  \t  \t\n-\t\tassertEquals(\"mean\", 12.40455, u.getMean(), 0.0001);\n-\t\tassertEquals(\"variance\", 10.00236, u.getVariance(), 0.0001);\n-\t\tassertEquals(\"skewness\", 1.437424, u.getSkewness(), 0.0001);\n-  \t  \tassertEquals(\"kurtosis\", 2.37719, u.getKurtosis(), 0.0001);\n+        for( int i = 0; i < testArray.length; i++) {\n+            u.addValue( testArray[i]);\n+        }\n+        \n+        assertEquals(\"mean\", 12.40455, u.getMean(), 0.0001);\n+        assertEquals(\"variance\", 10.00236, u.getVariance(), 0.0001);\n+        assertEquals(\"skewness\", 1.437424, u.getSkewness(), 0.0001);\n+        assertEquals(\"kurtosis\", 2.37719, u.getKurtosis(), 0.0001);\n     }\n \n     public void testProductAndGeometricMean() throws Exception {\n-    \tDescriptiveStatistics u = DescriptiveStatistics.newInstance(); \n+        DescriptiveStatistics u = DescriptiveStatistics.newInstance(); \n         u.setWindowSize(10);\n-    \t    \t\n+                \n         u.addValue( 1.0 );\n         u.addValue( 2.0 );\n         u.addValue( 3.0 );\n--- a/src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java\n     }     \n     \n     public void testN0andN1Conditions() throws Exception {\n-    \tDescriptiveStatistics u = DescriptiveStatistics.newInstance();\n-    \t    \t\n+        DescriptiveStatistics u = DescriptiveStatistics.newInstance();\n+                \n             assertTrue(\"Mean of n = 0 set should be NaN\", \n                 Double.isNaN( u.getMean() ) );\n             assertTrue(\"Standard Deviation of n = 0 set should be NaN\", \n             assertTrue( \"StdDev of n = 1 set should be zero, instead it is: \" \n                 + u.getStandardDeviation(), u.getStandardDeviation() == 0);\n             assertTrue( \"Variance of n = 1 set should be zero\", \n-                u.getVariance() == 0);\t\n+                u.getVariance() == 0);  \n     }\n     \n     public void testSkewAndKurtosis() {\n-    \tDescriptiveStatistics u = DescriptiveStatistics.newInstance();\n-    \t\n-    \tdouble[] testArray = \n+        DescriptiveStatistics u = DescriptiveStatistics.newInstance();\n+        \n+        double[] testArray = \n         { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,\n           9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };\n-  \t  \tfor( int i = 0; i < testArray.length; i++) {\n-  \t  \t\tu.addValue( testArray[i]);\n-  \t  \t}\n-  \t  \t\n-\t\tassertEquals(\"mean\", 12.40455, u.getMean(), 0.0001);\n-\t\tassertEquals(\"variance\", 10.00236, u.getVariance(), 0.0001);\n-\t\tassertEquals(\"skewness\", 1.437424, u.getSkewness(), 0.0001);\n-  \t  \tassertEquals(\"kurtosis\", 2.37719, u.getKurtosis(), 0.0001);\n+        for( int i = 0; i < testArray.length; i++) {\n+            u.addValue( testArray[i]);\n+        }\n+        \n+        assertEquals(\"mean\", 12.40455, u.getMean(), 0.0001);\n+        assertEquals(\"variance\", 10.00236, u.getVariance(), 0.0001);\n+        assertEquals(\"skewness\", 1.437424, u.getSkewness(), 0.0001);\n+        assertEquals(\"kurtosis\", 2.37719, u.getKurtosis(), 0.0001);\n     }\n \n     public void testProductAndGeometricMean() throws Exception {\n-    \tDescriptiveStatistics u = DescriptiveStatistics.newInstance();\n+        DescriptiveStatistics u = DescriptiveStatistics.newInstance();\n         u.setWindowSize(10);\n-    \t    \t\n+                \n         u.addValue( 1.0 );\n         u.addValue( 2.0 );\n         u.addValue( 3.0 );\n             u.getGeometricMean(), 0.00001 );\n     }\n     \n-\tpublic void testAddValue() {\n-\t\tdouble[] test1 = {5,4,3,2,1,0};\n-\t\tdouble[] test2 = {5,2,1,0,4,3};\n-\n-\t\tDescriptiveStatistics stats = DescriptiveStatistics.newInstance();\n-\t\tstats.setWindowSize(12);\n-\t\t\n-\t\tfor(int i = 0; i < test1.length; i++){\n-\t\t\tstats.addValue(test1[i]);\n-\t\t}     \n-\t\t\n-\t\tdouble[] test3 = stats.getValues();\n-\t\t\n-\t\tfor(int i = 0; i < 6; i++){\n-\t\t\tassertEquals( \"Added value [\"+i+\"] not equal\", \n-\t\t\ttest3[i], test1[i],0.0);\n-\t\t\t//System.out.println(test3[i] + \" \"+test1[i]);\n-\t\t}     \n-\t\t\t\t\n-\t\tfor(int i = 0; i < test2.length; i++){\n-\t\t\tstats.addValue(test2[i]);\n-\t\t}     \n+    public void testAddValue() {\n+        double[] test1 = {5,4,3,2,1,0};\n+        double[] test2 = {5,2,1,0,4,3};\n+\n+        DescriptiveStatistics stats = DescriptiveStatistics.newInstance();\n+        stats.setWindowSize(12);\n+        \n+        for(int i = 0; i < test1.length; i++){\n+            stats.addValue(test1[i]);\n+        }     \n+        \n+        double[] test3 = stats.getValues();\n+        \n+        for(int i = 0; i < 6; i++){\n+            assertEquals( \"Added value [\"+i+\"] not equal\", \n+            test3[i], test1[i],0.0);\n+            //System.out.println(test3[i] + \" \"+test1[i]);\n+        }     \n+                \n+        for(int i = 0; i < test2.length; i++){\n+            stats.addValue(test2[i]);\n+        }     \n  \n-\t\ttest3 = stats.getValues();  \n-\t\t\n-\t\tfor(int i = 6; i < 12; i++){\n-\t\t\tassertEquals( \"Added value [\"+i+\"] not equal\", \n-\t\t\ttest3[i], test2[i-6],0.0);\n-\t\t\t//System.out.println(test3[i] + \" \"+test2[i-6]);\n-\t\t}    \n-\t\t\n-\t\tfor(int i = 0; i < test2.length; i++){\n-\t\t\tstats.addValue(test2[i]);\n-\t\t}     \n+        test3 = stats.getValues();  \n+        \n+        for(int i = 6; i < 12; i++){\n+            assertEquals( \"Added value [\"+i+\"] not equal\", \n+            test3[i], test2[i-6],0.0);\n+            //System.out.println(test3[i] + \" \"+test2[i-6]);\n+        }    \n+        \n+        for(int i = 0; i < test2.length; i++){\n+            stats.addValue(test2[i]);\n+        }     \n  \n-\t\ttest3 = stats.getValues();  \n-\t\t\n-\t\tfor(int i = 0; i < 6; i++){\n-\t\t\tassertEquals( \"Added value [\"+i+\"] not equal\", \n-\t\t\ttest3[i], test2[i],0.0);\n-\t\t\t//System.out.println(test3[i] + \" \"+test2[i]);\n-\t\t}  \n-\t\t\n-\t\tfor(int i = 6; i < 12; i++){\n-\t\t\tassertEquals( \"Added value [\"+i+\"] not equal\", \n-\t\t\ttest3[i], test2[i-6],0.0);\n-\t\t\t//System.out.println(test3[i] + \" \"+test2[i-6]);\n-\t\t}  \n-\t\t \n-\t}\n-\t\n+        test3 = stats.getValues();  \n+        \n+        for(int i = 0; i < 6; i++){\n+            assertEquals( \"Added value [\"+i+\"] not equal\", \n+            test3[i], test2[i],0.0);\n+            //System.out.println(test3[i] + \" \"+test2[i]);\n+        }  \n+        \n+        for(int i = 6; i < 12; i++){\n+            assertEquals( \"Added value [\"+i+\"] not equal\", \n+            test3[i], test2[i-6],0.0);\n+            //System.out.println(test3[i] + \" \"+test2[i-6]);\n+        }  \n+         \n+    }\n+    \n     public void testGetSortedValues() {\n         double[] test1 = {5,4,3,2,1};\n         double[] test2 = {5,2,1,3,4,0};\n--- a/src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java\n     /** hold the window size **/\n     protected int windowSize = DescriptiveStatistics.INFINITE_WINDOW;\n \n-\t/**\n-\t * No argument Constructor\n-\t */\n-\tpublic ListUnivariateImpl(){\n-\t    this(new ArrayList());\n-\t}\n-\t\n+    /**\n+     * No argument Constructor\n+     */\n+    public ListUnivariateImpl(){\n+        this(new ArrayList());\n+    }\n+    \n     /**\n      * Construct a ListUnivariate with a specific List.\n      * @param list The list that will back this DescriptiveStatistics\n \n         \n         try {\n-\t\t\tvalue = transformer.transform(list.get(calcIndex));\n-\t\t} catch (MathException e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n+            value = transformer.transform(list.get(calcIndex));\n+        } catch (MathException e) {\n+            e.printStackTrace();\n+        }\n         \n         return value;\n     }\n      * @see org.apache.commons.math.stat.descriptive.DescriptiveStatistics#setWindowSize(int)\n      */\n     public synchronized void setWindowSize(int windowSize) {\n-    \tthis.windowSize = windowSize;\n-    \t//Discard elements from the front of the list if the windowSize is less than \n-    \t// the size of the list.\n-    \tint extra = list.size() - windowSize;\n-    \tfor (int i = 0; i < extra; i++) {\n-    \t\tlist.remove(0);\n-    \t}\n+        this.windowSize = windowSize;\n+        //Discard elements from the front of the list if the windowSize is less than \n+        // the size of the list.\n+        int extra = list.size() - windowSize;\n+        for (int i = 0; i < extra; i++) {\n+            list.remove(0);\n+        }\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.descriptive.DescriptiveStatistics#getWindowSize\n      */\n     public int getWindowSize() {\n-    \treturn windowSize;\n+        return windowSize;\n     }\n \n }\n--- a/src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java\n     \n     /** test stats */\n     public void testStats() {\n-    \tList externalList = new ArrayList();\n-    \t\n+        List externalList = new ArrayList();\n+        \n         DescriptiveStatistics u = new ListUnivariateImpl( externalList ); \n \n         assertEquals(\"total count\",0,u.getN(),tolerance);\n     }     \n     \n     public void testN0andN1Conditions() throws Exception {\n-    \tList list = new ArrayList();\n-    \t\n-    \tDescriptiveStatistics u = new ListUnivariateImpl( list );\n-    \t    \t\n-\t\tassertTrue(\"Mean of n = 0 set should be NaN\", Double.isNaN( u.getMean() ) );\n-\t\tassertTrue(\"Standard Deviation of n = 0 set should be NaN\", Double.isNaN( u.getStandardDeviation() ) );\n-\t\tassertTrue(\"Variance of n = 0 set should be NaN\", Double.isNaN(u.getVariance() ) );\n+        List list = new ArrayList();\n+        \n+        DescriptiveStatistics u = new ListUnivariateImpl( list );\n+                \n+        assertTrue(\"Mean of n = 0 set should be NaN\", Double.isNaN( u.getMean() ) );\n+        assertTrue(\"Standard Deviation of n = 0 set should be NaN\", Double.isNaN( u.getStandardDeviation() ) );\n+        assertTrue(\"Variance of n = 0 set should be NaN\", Double.isNaN(u.getVariance() ) );\n \n-\t\tlist.add( new Double(one));\n+        list.add( new Double(one));\n \n-\t\tassertTrue( \"Mean of n = 1 set should be value of single item n1\", u.getMean() == one);\n-\t\tassertTrue( \"StdDev of n = 1 set should be zero, instead it is: \" + u.getStandardDeviation(), u.getStandardDeviation() == 0);\n-\t\tassertTrue( \"Variance of n = 1 set should be zero\", u.getVariance() == 0);\t\n+        assertTrue( \"Mean of n = 1 set should be value of single item n1\", u.getMean() == one);\n+        assertTrue( \"StdDev of n = 1 set should be zero, instead it is: \" + u.getStandardDeviation(), u.getStandardDeviation() == 0);\n+        assertTrue( \"Variance of n = 1 set should be zero\", u.getVariance() == 0);  \n     }\n     \n     public void testSkewAndKurtosis() {\n-    \tDescriptiveStatistics u = DescriptiveStatistics.newInstance();\n-    \t\n-    \tdouble[] testArray = { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,\n-  \t  \t\t\t\t\t\t\t\t\t\t 9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };\n-  \t  \tfor( int i = 0; i < testArray.length; i++) {\n-  \t  \t\tu.addValue( testArray[i]);\n-  \t  \t}\n-  \t  \t\n-\t\tassertEquals(\"mean\", 12.40455, u.getMean(), 0.0001);\n-\t\tassertEquals(\"variance\", 10.00236, u.getVariance(), 0.0001);\n-\t\tassertEquals(\"skewness\", 1.437424, u.getSkewness(), 0.0001);\n-  \t  \tassertEquals(\"kurtosis\", 2.37719, u.getKurtosis(), 0.0001);\n+        DescriptiveStatistics u = DescriptiveStatistics.newInstance();\n+        \n+        double[] testArray = { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,\n+                                             9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };\n+        for( int i = 0; i < testArray.length; i++) {\n+            u.addValue( testArray[i]);\n+        }\n+        \n+        assertEquals(\"mean\", 12.40455, u.getMean(), 0.0001);\n+        assertEquals(\"variance\", 10.00236, u.getVariance(), 0.0001);\n+        assertEquals(\"skewness\", 1.437424, u.getSkewness(), 0.0001);\n+        assertEquals(\"kurtosis\", 2.37719, u.getKurtosis(), 0.0001);\n     }\n \n     public void testProductAndGeometricMean() throws Exception {\n-    \tListUnivariateImpl u = new ListUnivariateImpl(new ArrayList());\n+        ListUnivariateImpl u = new ListUnivariateImpl(new ArrayList());\n         u.setWindowSize(10);\n-    \t    \t\n+                \n         u.addValue( 1.0 );\n         u.addValue( 2.0 );\n         u.addValue( 3.0 );\n--- a/src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java\n     public void testN0andN1Conditions() throws Exception {\n         assertTrue(\"Mean of n = 0 set should be NaN\", \n             Double.isNaN( u.getMean() ) );\n-\t\tassertTrue(\"Standard Deviation of n = 0 set should be NaN\", \n+        assertTrue(\"Standard Deviation of n = 0 set should be NaN\", \n             Double.isNaN( u.getStandardDeviation() ) );\n-\t\tassertTrue(\"Variance of n = 0 set should be NaN\", \n+        assertTrue(\"Variance of n = 0 set should be NaN\", \n             Double.isNaN(u.getVariance() ) );\n-\t\t\n-\t\t/* n=1 */\n-\t\tu.addValue(one);\n-\t\tassertTrue(\"mean should be one (n = 1)\", \n-\t\t\tu.getMean() == one);\n-\t\tassertTrue(\"geometric should be one (n = 1) instead it is \" + u.getGeometricMean(), \n-\t\t\tu.getGeometricMean() == one);\n-\t\tassertTrue(\"Std should be zero (n = 1)\", \n-\t\t\tu.getStandardDeviation() == 0.0);\n-\t\tassertTrue(\"variance should be zero (n = 1)\", \n-\t\t\tu.getVariance() == 0.0);\n-\t\t\t\t\t\n-\t\t/* n=2 */\t\t\t\t\n-\t\tu.addValue(twoF);\n-\t\tassertTrue(\"Std should not be zero (n = 2)\", \n-\t\t\tu.getStandardDeviation() != 0.0);\n-\t\tassertTrue(\"variance should not be zero (n = 2)\", \n-\t\t\tu.getVariance() != 0.0);\n+        \n+        /* n=1 */\n+        u.addValue(one);\n+        assertTrue(\"mean should be one (n = 1)\", \n+            u.getMean() == one);\n+        assertTrue(\"geometric should be one (n = 1) instead it is \" + u.getGeometricMean(), \n+            u.getGeometricMean() == one);\n+        assertTrue(\"Std should be zero (n = 1)\", \n+            u.getStandardDeviation() == 0.0);\n+        assertTrue(\"variance should be zero (n = 1)\", \n+            u.getVariance() == 0.0);\n+                    \n+        /* n=2 */               \n+        u.addValue(twoF);\n+        assertTrue(\"Std should not be zero (n = 2)\", \n+            u.getStandardDeviation() != 0.0);\n+        assertTrue(\"variance should not be zero (n = 2)\", \n+            u.getVariance() != 0.0);\n             \n     }\n \n-    public void testProductAndGeometricMean() throws Exception {  \t    \t\n+    public void testProductAndGeometricMean() throws Exception {            \n         u.addValue( 1.0 );\n         u.addValue( 2.0 );\n         u.addValue( 3.0 );\n--- a/src/test/org/apache/commons/math/util/ContinuedFractionTest.java\n+++ b/src/test/org/apache/commons/math/util/ContinuedFractionTest.java\n  * @version $Revision$ $Date$\n  */\n public class ContinuedFractionTest extends TestCase {\n-\t/**\n-\t * Constructor for ContinuedFractionTest.\n-\t * @param name\n-\t */\n-\tpublic ContinuedFractionTest(String name) {\n-\t\tsuper(name);\n-\t}\n+    /**\n+     * Constructor for ContinuedFractionTest.\n+     * @param name\n+     */\n+    public ContinuedFractionTest(String name) {\n+        super(name);\n+    }\n \n-\tpublic void testGoldenRation(){\n+    public void testGoldenRation(){\n         ContinuedFraction cf = new ContinuedFraction() {\n-\t\t\tpublic double getA(int n, double x) {\n-\t\t\t\treturn 1.0;\n-\t\t\t}\n+            public double getA(int n, double x) {\n+                return 1.0;\n+            }\n \n-\t\t\tpublic double getB(int n, double x) {\n-\t\t\t\treturn 1.0;\n-\t\t\t}\n-\t\t};\n+            public double getB(int n, double x) {\n+                return 1.0;\n+            }\n+        };\n         \n         try {\n             double gr = cf.evaluate(0.0, 10e-9);\n         } catch (MathException e) {\n             fail(e.getMessage());\n         }\n-\t}\n+    }\n }\n--- a/src/test/org/apache/commons/math/util/DefaultTransformerTest.java\n+++ b/src/test/org/apache/commons/math/util/DefaultTransformerTest.java\n         double expected = 1.0;\n         Double input = new Double(expected);\n         DefaultTransformer t = new DefaultTransformer();\n-\t\tassertEquals(expected, t.transform(input), 1.0e-4);\n+        assertEquals(expected, t.transform(input), 1.0e-4);\n     }\n     \n     /**\n     public void testTransformNull(){\n         DefaultTransformer t = new DefaultTransformer();\n         try {\n-\t\t\tt.transform(null);\n-\t\t\tfail(\"Expection MathException\");\n-\t\t} catch (MathException e) {\n-\t\t\t// expected\n-\t\t}\n+            t.transform(null);\n+            fail(\"Expection MathException\");\n+        } catch (MathException e) {\n+            // expected\n+        }\n     }\n     \n     /**\n         double expected = 1.0;\n         Integer input = new Integer(1);\n         DefaultTransformer t = new DefaultTransformer();\n-\t\tassertEquals(expected, t.transform(input), 1.0e-4);\n+        assertEquals(expected, t.transform(input), 1.0e-4);\n     }        \n     \n     /**\n         double expected = 1.0;\n         BigDecimal input = new BigDecimal(\"1.0\");\n         DefaultTransformer t = new DefaultTransformer();\n-\t\tassertEquals(expected, t.transform(input), 1.0e-4);\n+        assertEquals(expected, t.transform(input), 1.0e-4);\n     }        \n     \n     /**\n         double expected = 1.0;\n         String input = \"1.0\";\n         DefaultTransformer t = new DefaultTransformer();\n-\t\tassertEquals(expected, t.transform(input), 1.0e-4);\n+        assertEquals(expected, t.transform(input), 1.0e-4);\n     }\n     \n     /**\n         Boolean input = Boolean.TRUE;\n         DefaultTransformer t = new DefaultTransformer();\n         try {\n-\t\t\tt.transform(input);\n-\t\t\tfail(\"Expecting MathException\");\n-\t\t} catch (MathException e) {\n-\t\t    // expected\n-\t\t}\n+            t.transform(input);\n+            fail(\"Expecting MathException\");\n+        } catch (MathException e) {\n+            // expected\n+        }\n     }\n }\n--- a/src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java\n+++ b/src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java\n  */\n public abstract class DoubleArrayAbstractTest extends TestCase {\n \n-\tprotected DoubleArray da = null;\n+    protected DoubleArray da = null;\n \n-\t// Array used to test rolling\n-\tprotected DoubleArray ra = null;\n+    // Array used to test rolling\n+    protected DoubleArray ra = null;\n \n-\tpublic DoubleArrayAbstractTest(String name) {\n-\t\tsuper(name);\n-\t}\n+    public DoubleArrayAbstractTest(String name) {\n+        super(name);\n+    }\n \n-\tpublic void testAdd1000() {\n+    public void testAdd1000() {\n \n-\t\tfor (int i = 0; i < 1000; i++) {\n-\t\t\tda.addElement(i);\n-\t\t}\n+        for (int i = 0; i < 1000; i++) {\n+            da.addElement(i);\n+        }\n \n-\t\tassertEquals(\n-\t\t\t\"Number of elements should be equal to 1000 after adding 1000 values\",\n-\t\t\t1000,\n-\t\t\tda.getNumElements());\n+        assertEquals(\n+            \"Number of elements should be equal to 1000 after adding 1000 values\",\n+            1000,\n+            da.getNumElements());\n \n-\t\tassertEquals(\n-\t\t\t\"The element at the 56th index should be 56\",\n-\t\t\t56.0,\n-\t\t\tda.getElement(56),\n-\t\t\tDouble.MIN_VALUE);\n+        assertEquals(\n+            \"The element at the 56th index should be 56\",\n+            56.0,\n+            da.getElement(56),\n+            Double.MIN_VALUE);\n \n-\t}\n+    }\n \n-\tpublic void testGetValues() {\n-\t\tdouble[] controlArray = { 2.0, 4.0, 6.0 };\n+    public void testGetValues() {\n+        double[] controlArray = { 2.0, 4.0, 6.0 };\n \n-\t\tda.addElement(2.0);\n-\t\tda.addElement(4.0);\n-\t\tda.addElement(6.0);\n-\t\tdouble[] testArray = da.getElements();\n+        da.addElement(2.0);\n+        da.addElement(4.0);\n+        da.addElement(6.0);\n+        double[] testArray = da.getElements();\n \n-\t\tfor (int i = 0; i < da.getNumElements(); i++) {\n-\t\t\tassertEquals(\n-\t\t\t\t\"The testArray values should equal the controlArray values, index i: \"\n-\t\t\t\t\t+ i\n-\t\t\t\t\t+ \" does not match\",\n-\t\t\t\ttestArray[i],\n-\t\t\t\tcontrolArray[i],\n-\t\t\t\tDouble.MIN_VALUE);\n-\t\t}\n+        for (int i = 0; i < da.getNumElements(); i++) {\n+            assertEquals(\n+                \"The testArray values should equal the controlArray values, index i: \"\n+                    + i\n+                    + \" does not match\",\n+                testArray[i],\n+                controlArray[i],\n+                Double.MIN_VALUE);\n+        }\n \n-\t}\n+    }\n \n-\tpublic void testAddElementRolling() {\n-\t\tra.addElement(0.5);\n-\t\tra.addElement(1.0);\n-\t\tra.addElement(1.0);\n-\t\tra.addElement(1.0);\n-\t\tra.addElement(1.0);\n-\t\tra.addElement(1.0);\n-\t\tra.addElementRolling(2.0);\n+    public void testAddElementRolling() {\n+        ra.addElement(0.5);\n+        ra.addElement(1.0);\n+        ra.addElement(1.0);\n+        ra.addElement(1.0);\n+        ra.addElement(1.0);\n+        ra.addElement(1.0);\n+        ra.addElementRolling(2.0);\n \n-\t\tassertEquals(\n-\t\t\t\"There should be 6 elements in the eda\",\n-\t\t\t6,\n-\t\t\tra.getNumElements());\n-\t\tassertEquals(\n-\t\t\t\"The max element should be 2.0\",\n-\t\t\t2.0,\n+        assertEquals(\n+            \"There should be 6 elements in the eda\",\n+            6,\n+            ra.getNumElements());\n+        assertEquals(\n+            \"The max element should be 2.0\",\n+            2.0,\n             StatUtils.max(ra.getElements()),\n-\t\t\tDouble.MIN_VALUE);\n-\t\tassertEquals(\n-\t\t\t\"The min element should be 1.0\",\n-\t\t\t1.0,\n+            Double.MIN_VALUE);\n+        assertEquals(\n+            \"The min element should be 1.0\",\n+            1.0,\n             StatUtils.min(ra.getElements()),\n-\t\t\tDouble.MIN_VALUE);\n+            Double.MIN_VALUE);\n \n-\t\tfor (int i = 0; i < 1024; i++) {\n-\t\t\tra.addElementRolling(i);\n-\t\t}\n+        for (int i = 0; i < 1024; i++) {\n+            ra.addElementRolling(i);\n+        }\n \n-\t\tassertEquals(\n-\t\t\t\"We just inserted 1024 rolling elements, num elements should still be 6\",\n-\t\t\t6,\n-\t\t\tra.getNumElements());\n-\t}\n+        assertEquals(\n+            \"We just inserted 1024 rolling elements, num elements should still be 6\",\n+            6,\n+            ra.getNumElements());\n+    }\n \n-\tpublic void testMinMax() {\n-\t\tda.addElement(2.0);\n-\t\tda.addElement(22.0);\n-\t\tda.addElement(-2.0);\n-\t\tda.addElement(21.0);\n-\t\tda.addElement(22.0);\n-\t\tda.addElement(42.0);\n-\t\tda.addElement(62.0);\n-\t\tda.addElement(22.0);\n-\t\tda.addElement(122.0);\n-\t\tda.addElement(1212.0);\n+    public void testMinMax() {\n+        da.addElement(2.0);\n+        da.addElement(22.0);\n+        da.addElement(-2.0);\n+        da.addElement(21.0);\n+        da.addElement(22.0);\n+        da.addElement(42.0);\n+        da.addElement(62.0);\n+        da.addElement(22.0);\n+        da.addElement(122.0);\n+        da.addElement(1212.0);\n \n-\t\tassertEquals(\"Min should be -2.0\", -2.0, StatUtils.min(da.getElements()), Double.MIN_VALUE);\n-\t\tassertEquals(\n-\t\t\t\"Max should be 1212.0\",\n-\t\t\t1212.0,\n+        assertEquals(\"Min should be -2.0\", -2.0, StatUtils.min(da.getElements()), Double.MIN_VALUE);\n+        assertEquals(\n+            \"Max should be 1212.0\",\n+            1212.0,\n             StatUtils.max(da.getElements()),\n-\t\t\tDouble.MIN_VALUE);\n-\t}\n+            Double.MIN_VALUE);\n+    }\n \n }", "timestamp": 1119824741, "metainfo": ""}