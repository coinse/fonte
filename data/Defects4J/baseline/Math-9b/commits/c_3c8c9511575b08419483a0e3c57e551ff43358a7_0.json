{"sha": "3c8c9511575b08419483a0e3c57e551ff43358a7", "log": "StringBuffer => StringBuilder for local variables  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java\n     @Override\n      public String toString() {\n \n-       StringBuffer s = new StringBuffer();\n+       StringBuilder s = new StringBuilder();\n        if (coefficients[0] == 0.0) {\n          if (coefficients.length == 1) {\n            return \"0\";\n--- a/src/main/java/org/apache/commons/math/dfp/DfpMath.java\n+++ b/src/main/java/org/apache/commons/math/dfp/DfpMath.java\n         // X is now in the range of 2/3 < x < 4/3\n         Dfp[] spz = logInternal(spx);\n \n-        spx[0] = a.newInstance(new StringBuffer().append(p2+4*lr).toString());\n+        spx[0] = a.newInstance(new StringBuilder().append(p2+4*lr).toString());\n         spx[1] = a.getZero();\n         spy = splitMult(a.getField().getLn2Split(), spx);\n \n         spz[0] = spz[0].add(spy[0]);\n         spz[1] = spz[1].add(spy[1]);\n \n-        spx[0] = a.newInstance(new StringBuffer().append(4*lr).toString());\n+        spx[0] = a.newInstance(new StringBuilder().append(4*lr).toString());\n         spx[1] = a.getZero();\n         spy = splitMult(a.getField().getLn5Split(), spx);\n \n--- a/src/main/java/org/apache/commons/math/random/RandomDataImpl.java\n+++ b/src/main/java/org/apache/commons/math/random/RandomDataImpl.java\n         RandomGenerator ran = getRan();\n \n         // Initialize output buffer\n-        StringBuffer outBuffer = new StringBuffer();\n+        StringBuilder outBuffer = new StringBuilder();\n \n         // Get int(len/2)+1 random bytes\n         byte[] randomBytes = new byte[(len / 2) + 1];\n         // Compute number of iterations required (40 bytes each)\n         int numIter = (len / 40) + 1;\n \n-        StringBuffer outBuffer = new StringBuffer();\n+        StringBuilder outBuffer = new StringBuilder();\n         for (int iter = 1; iter < numIter + 1; iter++) {\n             byte[] randomBytes = new byte[40];\n             secRan.nextBytes(randomBytes);\n--- a/src/main/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/main/java/org/apache/commons/math/stat/Frequency.java\n     @Override\n     public String toString() {\n         NumberFormat nf = NumberFormat.getPercentInstance();\n-        StringBuffer outBuffer = new StringBuffer();\n+        StringBuilder outBuffer = new StringBuilder();\n         outBuffer.append(\"Value \\t Freq. \\t Pct. \\t Cum Pct. \\n\");\n         Iterator<Comparable<?>> iter = freqTable.keySet().iterator();\n         while (iter.hasNext()) {\n--- a/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java\n+++ b/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java\n      */\n     @Override\n     public String toString() {\n-        final StringBuffer buff = new StringBuffer(\"(\");\n+        final StringBuilder buff = new StringBuilder(\"(\");\n         final int[] coordinates = getPoint();\n         for (int i = 0; i < coordinates.length; i++) {\n             buff.append(coordinates[i]);\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n      */\n     @Override\n     public String toString() {\n-        StringBuffer outBuffer = new StringBuffer();\n+        StringBuilder outBuffer = new StringBuilder();\n         String endl = \"\\n\";\n         outBuffer.append(\"DescriptiveStatistics:\").append(endl);\n         outBuffer.append(\"n: \").append(getN()).append(endl);\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java\n     public String toString() {\n         final String separator = \", \";\n         final String suffix = System.getProperty(\"line.separator\");\n-        StringBuffer outBuffer = new StringBuffer();\n+        StringBuilder outBuffer = new StringBuilder();\n         outBuffer.append(\"MultivariateSummaryStatistics:\" + suffix);\n         outBuffer.append(\"n: \" + getN() + suffix);\n         append(outBuffer, getMin(), \"min: \", separator, suffix);\n      * @param separator elements separator\n      * @param suffix text suffix\n      */\n-    private void append(StringBuffer buffer, double[] data,\n+    private void append(StringBuilder buffer, double[] data,\n                         String prefix, String separator, String suffix) {\n         buffer.append(prefix);\n         for (int i = 0; i < data.length; ++i) {\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n      */\n     @Override\n     public String toString() {\n-        StringBuffer outBuffer = new StringBuffer();\n+        StringBuilder outBuffer = new StringBuilder();\n         String endl = \"\\n\";\n         outBuffer.append(\"SummaryStatistics:\").append(endl);\n         outBuffer.append(\"n: \").append(getN()).append(endl);\n--- a/src/main/java/org/apache/commons/math/util/CompositeFormat.java\n+++ b/src/main/java/org/apache/commons/math/util/CompositeFormat.java\n                                final ParsePosition pos) {\n         Number ret = null;\n \n-        StringBuffer sb = new StringBuffer();\n+        StringBuilder sb = new StringBuilder();\n         sb.append('(');\n         sb.append(value);\n         sb.append(')');\n--- a/src/test/java/org/apache/commons/math/TestUtils.java\n+++ b/src/test/java/org/apache/commons/math/TestUtils.java\n \n         if (expected.getColumnDimension() != observed.getColumnDimension() ||\n                 expected.getRowDimension() != observed.getRowDimension()) {\n-            StringBuffer messageBuffer = new StringBuffer(msg);\n+            StringBuilder messageBuffer = new StringBuilder(msg);\n             messageBuffer.append(\"\\nObserved has incorrect dimensions.\");\n             messageBuffer.append(\"\\nobserved is \" + observed.getRowDimension() +\n                     \" x \" + observed.getColumnDimension());\n \n         RealMatrix delta = expected.subtract(observed);\n         if (delta.getNorm() >= tolerance) {\n-            StringBuffer messageBuffer = new StringBuffer(msg);\n+            StringBuilder messageBuffer = new StringBuilder(msg);\n             messageBuffer.append(\"\\nExpected: \" + expected);\n             messageBuffer.append(\"\\nObserved: \" + observed);\n             messageBuffer.append(\"\\nexpected - observed: \" + delta);\n \n         if (expected.getColumnDimension() != observed.getColumnDimension() ||\n                 expected.getRowDimension() != observed.getRowDimension()) {\n-            StringBuffer messageBuffer = new StringBuffer();\n+            StringBuilder messageBuffer = new StringBuilder();\n             messageBuffer.append(\"Observed has incorrect dimensions.\");\n             messageBuffer.append(\"\\nobserved is \" + observed.getRowDimension() +\n                     \" x \" + observed.getColumnDimension());\n     /** verifies that two arrays are close (sup norm) */\n     public static void assertEquals(String msg, double[] expected, double[] observed,\n         double tolerance) {\n-        StringBuffer out = new StringBuffer(msg);\n+        StringBuilder out = new StringBuilder(msg);\n         if (expected.length != observed.length) {\n             out.append(\"\\n Arrays not same length. \\n\");\n             out.append(\"expected has length \");\n             // Fail if we can reject null hypothesis that distributions are the same\n             Assert.assertFalse(chiSquareTest.chiSquareTest(expected, observed, alpha));\n         } catch (AssertionFailedError ex) {\n-            StringBuffer msgBuffer = new StringBuffer();\n+            StringBuilder msgBuffer = new StringBuilder();\n             DecimalFormat df = new DecimalFormat(\"#.##\");\n             msgBuffer.append(\"Chisquare test failed\");\n             msgBuffer.append(\" p-value = \");\n--- a/src/test/java/org/apache/commons/math/random/RandomDataTest.java\n+++ b/src/test/java/org/apache/commons/math/random/RandomDataTest.java\n             // Fail if we can reject null hypothesis that distributions are the same\n             assertFalse(chiSquareTest.chiSquareTest(expected, observed, alpha));\n         } catch (AssertionFailedError ex) {\n-            StringBuffer msgBuffer = new StringBuffer();\n+            StringBuilder msgBuffer = new StringBuilder();\n             DecimalFormat df = new DecimalFormat(\"#.##\");\n             msgBuffer.append(\"Chisquare test failed for mean = \");\n             msgBuffer.append(mean);", "timestamp": 1291577121, "metainfo": ""}