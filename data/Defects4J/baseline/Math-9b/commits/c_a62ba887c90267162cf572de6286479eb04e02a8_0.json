{"sha": "a62ba887c90267162cf572de6286479eb04e02a8", "log": "Fixed too large memory consumption in DSCompiler.  Prior to this correction, when at one point in a program a user needed a derivative with 1 parameter and order 5, and at another point needed a derivative with 30 parameters and order 1, all DSCompilers from 1x1 to 30x5 were created. As the compilation rules for 30 parameters and 5 order are huge, this failed with memory heap errors after several gigabytes were consumed.  The fix is to simply build the necessary compilers, and let the array contain null references for the compilers never used (these null references will be populated later if the user ask for some intermediate value that need them, of course).  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n         // get the cached compilers\n         final DSCompiler[][] cache = compilers.get();\n         if (cache != null && cache.length > parameters && cache[parameters].length > order) {\n-            // the compiler has already been created\n-            return cache[parameters][order];\n+            if (cache[parameters][order] != null) {\n+                // the compiler has already been created\n+                return cache[parameters][order];\n+            }\n         }\n \n         // we need to create more compilers\n         }\n \n         // create the array in increasing diagonal order\n-        for (int diag = 0; diag <= maxParameters + maxOrder; ++diag) {\n-            for (int o = FastMath.max(0, diag - maxParameters); o <= FastMath.min(maxOrder, diag); ++o) {\n+        for (int diag = 0; diag <= parameters + order; ++diag) {\n+            for (int o = FastMath.max(0, diag - parameters); o <= FastMath.min(order, diag); ++o) {\n                 final int p = diag - o;\n                 if (newCache[p][o] == null) {\n                     final DSCompiler valueCompiler      = (p == 0) ? null : newCache[p - 1][o];", "timestamp": 1347653765, "metainfo": ""}