{"sha": "d82fba3c2951ac67b0dd2b4da8e8273047543fdb", "log": "be more restrictive on ignored exceptions for the test added a long to double conversion to also test the getN() methods  ", "commit": "\n--- a/src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java\n+++ b/src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java\n import java.io.BufferedReader;\n import java.io.IOException;\n import java.io.InputStreamReader;\n+import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.net.URL;\n import java.util.HashMap;\n     \n     public void testCertifiedValues() {\n         Iterator iter = certifiedValues.keySet().iterator();\n+\n         while (iter.hasNext()) {\n             String name = iter.next().toString();\n             Double expectedValue = (Double)certifiedValues.get(name);\n-            try {\n-                Double summariesValue = (Double)this.getProperty(summaries, name);\n+\n+            Double summariesValue = getProperty(summaries, name);\n+            if (summariesValue != null) {\n                 TestUtils.assertEquals(\"summary value for \" + name + \" is incorrect.\",\n-                        summariesValue.doubleValue(), expectedValue.doubleValue(), getMaximumAbsoluteError());\n-            } catch (Exception ex) {\n+                                       summariesValue.doubleValue(), expectedValue.doubleValue(),\n+                                       getMaximumAbsoluteError());\n             }\n-            \n-            try {\n-                Double descriptivesValue = (Double)this.getProperty(descriptives, name);\n+\n+            Double descriptivesValue = getProperty(descriptives, name);\n+            if (descriptivesValue != null) {\n                 TestUtils.assertEquals(\"descriptive value for \" + name + \" is incorrect.\",\n-                        descriptivesValue.doubleValue(), expectedValue.doubleValue(), getMaximumAbsoluteError());\n-            } catch (Exception ex) {\n+                                       descriptivesValue.doubleValue(), expectedValue.doubleValue(),\n+                                       getMaximumAbsoluteError());\n             }\n         }\n     }\n     \n     \n-    protected Object getProperty(Object bean, String name) throws Exception{\n-        // Get the value of prop\n-        String prop = \"get\" + name.substring(0,1).toUpperCase() + name.substring(1); \n-        Method meth = bean.getClass().getMethod(prop, new Class[0]);\n-        return meth.invoke(bean, new Object[0]);\n+    protected Double getProperty(Object bean, String name) {\n+        try {\n+            // Get the value of prop\n+            String prop = \"get\" + name.substring(0,1).toUpperCase() + name.substring(1); \n+            Method meth = bean.getClass().getMethod(prop, new Class[0]);\n+            Object property = meth.invoke(bean, new Object[0]);\n+            if (meth.getReturnType().equals(Double.TYPE)) {\n+                return (Double) property;\n+            } else if (meth.getReturnType().equals(Long.TYPE)) {\n+                return new Double(((Long) property).doubleValue());\n+            } else {\n+                fail(\"wrong type: \" + meth.getReturnType().getName());\n+            }\n+        } catch (NoSuchMethodException nsme) {\n+            // ignored\n+        } catch (InvocationTargetException ite) {\n+            fail(ite.getMessage());\n+        } catch (IllegalAccessException iae) {\n+            fail(iae.getMessage());\n+        }\n+        return null;\n     }\n }", "timestamp": 1200254579, "metainfo": ""}