{"sha": "dbb408e860279d92b7502474328bb5385c2d9243", "log": "MATH-854: document all exceptions in ArrayFieldVector.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java\n+++ b/src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java\n      * @see #ArrayFieldVector(Field, FieldElement[])\n      */\n     public ArrayFieldVector(T[] d)\n-            throws NullArgumentException, ZeroException {\n+        throws NullArgumentException, ZeroException {\n         if (d == null) {\n             throw new NullArgumentException();\n         }\n      * @see #ArrayFieldVector(FieldElement[])\n      */\n     public ArrayFieldVector(Field<T> field, T[] d)\n-            throws NullArgumentException {\n+        throws NullArgumentException {\n         if (d == null) {\n             throw new NullArgumentException();\n         }\n      * @see #ArrayFieldVector(Field, FieldElement[], boolean)\n      */\n     public ArrayFieldVector(T[] d, boolean copyArray)\n-            throws NullArgumentException, ZeroException {\n+        throws NullArgumentException, ZeroException {\n         if (d == null) {\n             throw new NullArgumentException();\n         }\n      * @see #ArrayFieldVector(FieldElement[], boolean)\n      */\n     public ArrayFieldVector(Field<T> field, T[] d, boolean copyArray)\n-            throws NullArgumentException {\n+        throws NullArgumentException {\n         if (d == null) {\n             throw new NullArgumentException();\n         }\n      * than {@code pos + size}.\n      */\n     public ArrayFieldVector(T[] d, int pos, int size)\n-            throws NullArgumentException, NumberIsTooLargeException {\n+        throws NullArgumentException, NumberIsTooLargeException {\n         if (d == null) {\n             throw new NullArgumentException();\n         }\n      * than {@code pos + size}.\n      */\n     public ArrayFieldVector(Field<T> field, T[] d, int pos, int size)\n-            throws NullArgumentException, NumberIsTooLargeException {\n+        throws NullArgumentException, NumberIsTooLargeException {\n         if (d == null) {\n             throw new NullArgumentException();\n         }\n      * @throws NullArgumentException if {@code v} is {@code null}.\n      */\n     public ArrayFieldVector(FieldVector<T> v)\n-            throws NullArgumentException {\n+        throws NullArgumentException {\n         if (v == null) {\n             throw new NullArgumentException();\n         }\n      * @throws NullArgumentException if {@code v} is {@code null}.\n      */\n     public ArrayFieldVector(ArrayFieldVector<T> v)\n-            throws NullArgumentException {\n+        throws NullArgumentException {\n         if (v == null) {\n             throw new NullArgumentException();\n         }\n      * @throws NullArgumentException if {@code v} is {@code null}.\n      */\n     public ArrayFieldVector(ArrayFieldVector<T> v, boolean deep)\n-            throws NullArgumentException {\n+        throws NullArgumentException {\n         if (v == null) {\n             throw new NullArgumentException();\n         }\n      * {@code null}.\n      */\n     public ArrayFieldVector(ArrayFieldVector<T> v1, ArrayFieldVector<T> v2)\n-            throws NullArgumentException {\n+        throws NullArgumentException {\n         if (v1 == null || v2 == null) {\n             throw new NullArgumentException();\n         }\n      * {@code null}.\n      */\n     public ArrayFieldVector(ArrayFieldVector<T> v1, T[] v2)\n-            throws NullArgumentException {\n+        throws NullArgumentException {\n         if (v1 == null || v2 == null) {\n             throw new NullArgumentException();\n         }\n      * {@code null}.\n      */\n     public ArrayFieldVector(T[] v1, ArrayFieldVector<T> v2)\n-            throws NullArgumentException {\n+        throws NullArgumentException {\n         if (v1 == null || v2 == null) {\n             throw new NullArgumentException();\n         }\n      * @see #ArrayFieldVector(Field, FieldElement[], FieldElement[])\n      */\n     public ArrayFieldVector(T[] v1, T[] v2)\n-            throws NullArgumentException, ZeroException {\n+        throws NullArgumentException, ZeroException {\n         if (v1 == null || v2 == null) {\n             throw new NullArgumentException();\n         }\n      * @see #ArrayFieldVector(FieldElement[], FieldElement[])\n      */\n     public ArrayFieldVector(Field<T> field, T[] v1, T[] v2)\n-            throws NullArgumentException, ZeroException {\n+        throws NullArgumentException, ZeroException {\n         if (v1 == null || v2 == null) {\n             throw new NullArgumentException();\n         }\n         return new ArrayFieldVector<T>(this, true);\n     }\n \n-    /** {@inheritDoc} */\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @throws DimensionMismatchException if {@code v} is not the same size as\n+     * {@code this}.\n+     */\n     public FieldVector<T> add(FieldVector<T> v)\n         throws DimensionMismatchException {\n         try {\n         return new ArrayFieldVector<T>(field, out, false);\n     }\n \n-    /** {@inheritDoc} */\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @throws DimensionMismatchException if {@code v} is not the same size as\n+     * {@code this}.\n+     */\n     public FieldVector<T> subtract(FieldVector<T> v)\n         throws DimensionMismatchException {\n         try {\n         return new ArrayFieldVector<T>(field, out, false);\n     }\n \n-    /** {@inheritDoc} */\n-    public FieldVector<T> mapAdd(T d) {\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @throws NullArgumentException if {@code d} is {@code null}.\n+     */\n+    public FieldVector<T> mapAdd(T d) throws NullArgumentException {\n         T[] out = buildArray(data.length);\n         for (int i = 0; i < data.length; i++) {\n             out[i] = data[i].add(d);\n         return new ArrayFieldVector<T>(field, out, false);\n     }\n \n-    /** {@inheritDoc} */\n-    public FieldVector<T> mapAddToSelf(T d) {\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @throws NullArgumentException if {@code d} is {@code null}.\n+     */\n+    public FieldVector<T> mapAddToSelf(T d) throws NullArgumentException {\n         for (int i = 0; i < data.length; i++) {\n             data[i] = data[i].add(d);\n         }\n         return this;\n     }\n \n-    /** {@inheritDoc} */\n-    public FieldVector<T> mapSubtract(T d) {\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @throws NullArgumentException if {@code d} is {@code null}.\n+     */\n+    public FieldVector<T> mapSubtract(T d) throws NullArgumentException {\n         T[] out = buildArray(data.length);\n         for (int i = 0; i < data.length; i++) {\n             out[i] = data[i].subtract(d);\n         return new ArrayFieldVector<T>(field, out, false);\n     }\n \n-    /** {@inheritDoc} */\n-    public FieldVector<T> mapSubtractToSelf(T d) {\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @throws NullArgumentException if {@code d} is {@code null}.\n+     */\n+    public FieldVector<T> mapSubtractToSelf(T d) throws NullArgumentException {\n         for (int i = 0; i < data.length; i++) {\n             data[i] = data[i].subtract(d);\n         }\n         return this;\n     }\n \n-    /** {@inheritDoc} */\n-    public FieldVector<T> mapMultiply(T d) {\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @throws NullArgumentException if {@code d} is {@code null}.\n+     */\n+    public FieldVector<T> mapMultiply(T d) throws NullArgumentException {\n         T[] out = buildArray(data.length);\n         for (int i = 0; i < data.length; i++) {\n             out[i] = data[i].multiply(d);\n         return new ArrayFieldVector<T>(field, out, false);\n     }\n \n-    /** {@inheritDoc} */\n-    public FieldVector<T> mapMultiplyToSelf(T d) {\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @throws NullArgumentException if {@code d} is {@code null}.\n+     */\n+    public FieldVector<T> mapMultiplyToSelf(T d) throws NullArgumentException {\n         for (int i = 0; i < data.length; i++) {\n             data[i] = data[i].multiply(d);\n         }\n         return this;\n     }\n \n-    /** {@inheritDoc} */\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @throws NullArgumentException if {@code d} is {@code null}.\n+     * @throws MathArithmeticException if {@code d} is zero.\n+     */\n     public FieldVector<T> mapDivide(T d)\n         throws NullArgumentException, MathArithmeticException {\n         if (d == null) {\n         return new ArrayFieldVector<T>(field, out, false);\n     }\n \n-    /** {@inheritDoc} */\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @throws NullArgumentException if {@code d} is {@code null}.\n+     * @throws MathArithmeticException if {@code d} is zero.\n+     */\n     public FieldVector<T> mapDivideToSelf(T d)\n         throws NullArgumentException, MathArithmeticException {\n         if (d == null) {\n         return this;\n     }\n \n-    /** {@inheritDoc} */\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @throws MathArithmeticException if {@code d} is zero.\n+     */\n     public FieldVector<T> mapInv() throws MathArithmeticException {\n         T[] out = buildArray(data.length);\n         final T one = field.getOne();\n         return new ArrayFieldVector<T>(field, out, false);\n     }\n \n-    /** {@inheritDoc} */\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @throws MathArithmeticException if {@code d} is zero.\n+     */\n     public FieldVector<T> mapInvToSelf() throws MathArithmeticException {\n         final T one = field.getOne();\n         for (int i = 0; i < data.length; i++) {\n         return this;\n     }\n \n-    /** {@inheritDoc} */\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @throws DimensionMismatchException if {@code v} is not the same size as\n+     * {@code this}.\n+     */\n     public FieldVector<T> ebeMultiply(FieldVector<T> v)\n         throws DimensionMismatchException {\n         try {\n         return new ArrayFieldVector<T>(field, out, false);\n     }\n \n-    /** {@inheritDoc} */\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @throws DimensionMismatchException if {@code v} is not the same size as\n+     * {@code this}.\n+     * @throws MathArithmeticException if one entry of {@code v} is zero.\n+     */\n     public FieldVector<T> ebeDivide(FieldVector<T> v)\n         throws DimensionMismatchException, MathArithmeticException {\n         try {\n         return data;\n     }\n \n-    /** {@inheritDoc} */\n-    public T dotProduct(FieldVector<T> v)\n-        throws DimensionMismatchException {\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @throws DimensionMismatchException if {@code v} is not the same size as\n+     * {@code this}.\n+     */\n+    public T dotProduct(FieldVector<T> v) throws DimensionMismatchException {\n         try {\n             return dotProduct((ArrayFieldVector<T>) v);\n         } catch (ClassCastException cce) {\n         return dot;\n     }\n \n-    /** {@inheritDoc} */\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @throws DimensionMismatchException if {@code v} is not the same size as\n+     * {@code this}.\n+     * @throws MathArithmeticException if {@code v} is the null vector.\n+     */\n     public FieldVector<T> projection(FieldVector<T> v)\n         throws DimensionMismatchException, MathArithmeticException {\n         return v.mapMultiply(dotProduct(v).divide(v.dotProduct(v)));\n         return new ArrayFieldVector<T>(field, out, false);\n     }\n \n-    /** {@inheritDoc} */\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @throws OutOfRangeException if the index is not valid.\n+     * @throws NotPositiveException if the number of elements is not positive.\n+     */\n     public FieldVector<T> getSubVector(int index, int n)\n         throws OutOfRangeException, NotPositiveException {\n         if (n < 0) {\n         }\n     }\n \n-    /** {@inheritDoc} */\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @throws OutOfRangeException if the index is not valid.\n+     */\n     public void setSubVector(int index, FieldVector<T> v) throws OutOfRangeException {\n         try {\n             try {", "timestamp": 1347516665, "metainfo": ""}