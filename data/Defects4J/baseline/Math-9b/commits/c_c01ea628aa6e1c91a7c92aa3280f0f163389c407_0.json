{"sha": "c01ea628aa6e1c91a7c92aa3280f0f163389c407", "log": "added tests for recent changes improved coverage  ", "commit": "\n--- a/src/test/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java\n+++ b/src/test/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import org.apache.commons.math.MathException;\n+import org.apache.commons.math.analysis.QuinticFunction;\n import org.apache.commons.math.analysis.SinFunction;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.optimization.univariate.BrentOptimizer;\n             new MultiStartUnivariateRealOptimizer(underlying, 10, g);\n         minimizer.optimize(f, GoalType.MINIMIZE, -100.0, 100.0);\n         double[] optima = minimizer.getOptima();\n+        double[] optimaValues = minimizer.getOptimaValues();\n         for (int i = 1; i < optima.length; ++i) {\n             double d = (optima[i] - optima[i-1]) / (2 * Math.PI);\n             assertTrue (Math.abs(d - Math.rint(d)) < 1.0e-8);\n             assertEquals(-1.0, f.value(optima[i]), 1.0e-10);\n+            assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);\n         }\n         assertTrue(minimizer.getEvaluations() > 2900);\n         assertTrue(minimizer.getEvaluations() < 3100);\n+    }\n+\n+    @Test\n+    public void testQuinticMin() throws MathException {\n+        // The quintic function has zeros at 0, +-0.5 and +-1.\n+        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n+        UnivariateRealFunction f = new QuinticFunction();\n+        UnivariateRealOptimizer underlying = new BrentOptimizer();\n+        JDKRandomGenerator g = new JDKRandomGenerator();\n+        g.setSeed(4312000053l);\n+        MultiStartUnivariateRealOptimizer minimizer =\n+            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n+        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n+        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n+\n+        try {\n+            minimizer.getOptima();\n+            fail(\"an exception should have been thrown\");\n+        } catch (IllegalStateException ise) {\n+            // expected\n+        } catch (Exception e) {\n+            fail(\"wrong exception caught\");\n+        }\n+        try {\n+            minimizer.getOptimaValues();\n+            fail(\"an exception should have been thrown\");\n+        } catch (IllegalStateException ise) {\n+            // expected\n+        } catch (Exception e) {\n+            fail(\"wrong exception caught\");\n+        }\n+\n+        assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);\n+        assertEquals(-0.27194301946870, minimizer.getResult(), 1.0e-13);\n+        assertEquals(-0.04433426940878, minimizer.getFunctionValue(), 1.0e-13);\n+\n+        double[] optima = minimizer.getOptima();\n+        double[] optimaValues = minimizer.getOptimaValues();\n+        for (int i = 0; i < optima.length; ++i) {\n+            assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);\n+        }\n+\n+        assertTrue(minimizer.getEvaluations()    >= 510);\n+        assertTrue(minimizer.getEvaluations()    <= 530);\n+        assertTrue(minimizer.getIterationCount() >= 150);\n+        assertTrue(minimizer.getIterationCount() <= 170);\n \n     }\n ", "timestamp": 1248538482, "metainfo": ""}