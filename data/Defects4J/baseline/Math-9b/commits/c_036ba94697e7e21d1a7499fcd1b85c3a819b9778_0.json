{"sha": "036ba94697e7e21d1a7499fcd1b85c3a819b9778", "log": "Code comment.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java\n             weights[idx] = tmp2;\n         }\n         // If \"numberOfPoints\" is odd, 0 is a root.\n+        // Note: as written, the test for oddness will work for negative\n+        // integers too (although it is not necessary here), preventing\n+        // a FindBugs warning.\n         if (numberOfPoints % 2 != 0) {\n             BigDecimal pmc = BigDecimal.ONE;\n             for (int j = 1; j < numberOfPoints; j += 2) {\n--- a/src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java\n             weights[idx] = w;\n         }\n         // If \"numberOfPoints\" is odd, 0 is a root.\n+        // Note: as written, the test for oddness will work for negative\n+        // integers too (although it is not necessary here), preventing\n+        // a FindBugs warning.\n         if (numberOfPoints % 2 != 0) {\n             double pmc = 1;\n             for (int j = 1; j < numberOfPoints; j += 2) {", "timestamp": 1345197054, "metainfo": ""}