{"sha": "d06e7b7c8e646ff489a5dfba47dfcb283a194e9b", "log": "Fixed automatic step initialization in embedded Runge-Kutta integrators. The relative tolerance setting was never used, only the absolute tolerance was used. JIRA: MATH-338   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n  */\n \n package org.apache.commons.math.ode.nonstiff;\n-\n-import java.util.Arrays;\n \n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n         }\n \n         if (firstTime) {\n-          final double[] scale;\n-          if (vecAbsoluteTolerance != null) {\n-            scale = vecAbsoluteTolerance;\n-          } else {\n-            scale = new double[y0.length];\n-            Arrays.fill(scale, scalAbsoluteTolerance);\n-          }\n+          final double[] scale = new double[y0.length];\n+          if (vecAbsoluteTolerance == null) {\n+              for (int i = 0; i < scale.length; ++i) {\n+                scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * Math.abs(y[i]);\n+              }\n+            } else {\n+              for (int i = 0; i < scale.length; ++i) {\n+                scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * Math.abs(y[i]);\n+              }\n+            }\n           hNew = initializeStep(equations, forward, getOrder(), scale,\n                                 stepStart, y, yDotK[0], yTmp, yDotK[1]);\n           firstTime = false;\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java\n             integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n                             pb.getFinalTime(), new double[pb.getDimension()]);\n             if (nSteps < 4) {\n-                assertTrue(integ.getEvaluations() > 150);\n+                assertTrue(integ.getEvaluations() > 140);\n             } else {\n-                assertTrue(integ.getEvaluations() < 100);\n+                assertTrue(integ.getEvaluations() < 90);\n             }\n         }\n \n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java\n       integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n                       pb.getFinalTime(), new double[pb.getDimension()]);\n \n-      assertTrue(handler.getLastError() < 8.0e-8);\n-      assertTrue(handler.getMaximalValueError() < 2.0e-7);\n+      assertTrue(handler.getLastError() < 8.1e-8);\n+      assertTrue(handler.getMaximalValueError() < 1.1e-7);\n       assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);\n       assertEquals(\"Dormand-Prince 8 (5, 3)\", integ.getName());\n   }\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java\n         maxError = error;\n       }\n       if (isLast) {\n-        assertTrue(maxError < 4e-11);\n+        assertTrue(maxError < 4.2e-11);\n         assertTrue(nbSteps < 670);\n       }\n     }\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java\n     HighamHall54Integrator integ = new HighamHall54Integrator(minStep, maxStep,\n                                                               scalAbsoluteTolerance,\n                                                               scalRelativeTolerance);\n-    StepInterpolatorTestUtils.checkDerivativesConsistency(integ, pb, 1.0e-10);\n+    StepInterpolatorTestUtils.checkDerivativesConsistency(integ, pb, 1.1e-10);\n   }\n \n   @Test", "timestamp": 1264690915, "metainfo": ""}