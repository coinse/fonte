{"sha": "799abe1b83ccf6e75c654540120a55e84223ca46", "log": "added a test for the detection of non-invertible transforms use Junit 4 style for tests  ", "commit": "\n--- a/src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java\n+++ b/src/test/org/apache/commons/math/ode/NordsieckTransformerTest.java\n \n package org.apache.commons.math.ode;\n \n+import static org.junit.Assert.assertEquals;\n+\n import java.util.Random;\n-\n-import junit.framework.Test;\n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n \n import org.apache.commons.math.analysis.polynomials.PolynomialFunction;\n import org.apache.commons.math.fraction.BigFraction;\n import org.apache.commons.math.linear.FieldMatrix;\n+import org.apache.commons.math.linear.InvalidMatrixException;\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.linear.RealMatrixImpl;\n-\n-public class NordsieckTransformerTest\n-extends TestCase {\n-\n-    public NordsieckTransformerTest(String name) {\n-        super(name);\n-    }\n-\n-    public void testDimension2() {\n+import org.junit.Test;\n+\n+public class NordsieckTransformerTest {\n+\n+    @Test(expected=InvalidMatrixException.class)\n+    public void nonInvertible() {\n+        new NordsieckTransformer(1, 1, 0, 1);\n+    }\n+\n+    @Test\n+    public void dimension2() {\n         NordsieckTransformer transformer = new NordsieckTransformer(0, 2, 0, 0);\n         double[] nordsieckHistory = new double[] { 1.0,  2.0 };\n         double[] multistepHistory = new double[] { 1.0, -1.0 };\n         checkVector(multistepHistory, transformer.nordsieckToMultistep(nordsieckHistory));\n     }\n \n-    public void testDimension2Der() {\n+    @Test\n+    public void dimension2Der() {\n         NordsieckTransformer transformer = new NordsieckTransformer(0, 1, 0, 1);\n         double[] nordsieckHistory = new double[] { 1.0,  2.0 };\n         double[] multistepHistory = new double[] { 1.0,  2.0 };\n         checkVector(multistepHistory, transformer.nordsieckToMultistep(nordsieckHistory));\n     }\n \n-    public void testDimension3() {\n+    @Test\n+    public void dimension3() {\n         NordsieckTransformer transformer = new NordsieckTransformer(0, 3, 0, 0);\n         double[] nordsieckHistory = new double[] { 1.0,  4.0, 18.0 };\n         double[] multistepHistory = new double[] { 1.0, 15.0, 65.0 };\n         checkVector(multistepHistory, transformer.nordsieckToMultistep(nordsieckHistory));\n     }\n \n-    public void testDimension3Der() {\n+    @Test\n+    public void dimension3Der() {\n         NordsieckTransformer transformer = new NordsieckTransformer(0, 2, 0, 1);\n         double[] nordsieckHistory = new double[] { 1.0,  4.0, 18.0 };\n         double[] multistepHistory = new double[] { 1.0, 15.0,  4.0 };\n         checkVector(multistepHistory, transformer.nordsieckToMultistep(nordsieckHistory));\n     }\n \n-    public void testDimension7() {\n+    @Test\n+    public void dimension7() {\n         NordsieckTransformer transformer = new NordsieckTransformer(0, 7, 0, 0);\n         RealMatrix nordsieckHistory =\n             new RealMatrixImpl(new double[][] {\n \n     }\n \n-    public void testDimension7Der() {\n+    @Test\n+    public void dimension7Der() {\n         NordsieckTransformer transformer = new NordsieckTransformer(0, 6, 0, 1);\n         RealMatrix nordsieckHistory =\n             new RealMatrixImpl(new double[][] {\n \n     }\n \n-    public void testMatrices1() {\n+    @Test\n+    public void matrices1() {\n         checkMatrix(1, new int[][] { { 1 } },\n                     NordsieckTransformer.buildNordsieckToMultistep(0, 1, 0, 0));\n     }\n \n-    public void testMatrices2() {\n+    @Test\n+    public void matrices2() {\n         checkMatrix(1, new int[][] { { 1, 0 }, { 1, -1 } },\n                     NordsieckTransformer.buildNordsieckToMultistep(0, 2, 0, 0));\n     }\n \n-    public void testMatrices3() {\n+    @Test\n+    public void matrices3() {\n         checkMatrix(1, new int[][] { { 1, 0, 0 }, { 1, -1, 1 }, { 1, -2, 4 } },\n                     NordsieckTransformer.buildNordsieckToMultistep(0, 3, 0, 0));\n     }\n \n-    public void testMatrices4() {\n-        checkMatrix(1, new int[][] { { 1, 0, 0, 0 }, { 1, -1, 1, -1 }, { 1, -2, 4, -8 }, { 1, -3, 9, -27 } },\n-                    NordsieckTransformer.buildNordsieckToMultistep(0, 4, 0, 0));\n-    }\n-\n-    public void testPolynomial() {\n+    @Test\n+    public void matrices4() {\n+        checkMatrix(1,\n+                    new int[][] {\n+                         { 1, 0, 0, 0 },\n+                         { 1, -1, 1, -1 },\n+                         { 1, -2, 4, -8 },\n+                         { 1, -3, 9, -27 }\n+                    }, NordsieckTransformer.buildNordsieckToMultistep(0, 4, 0, 0));\n+    }\n+\n+    @Test\n+    public void adamsBashforth2() {\n+        checkMatrix(1,\n+                    new int[][] {\n+                        { 1, 0,  0 },\n+                        { 0, 1,  0 },\n+                        { 0, 1, -2 }\n+                    }, NordsieckTransformer.buildNordsieckToMultistep(0, 1, 0, 2));\n+    }\n+\n+    @Test\n+    public void adamsBashforth3() {\n+        checkMatrix(1,\n+                    new int[][] {\n+                        { 1, 0,  0,  0 },\n+                        { 0, 1,  0,  0 },\n+                        { 0, 1, -2,  3 },\n+                        { 0, 1, -4, 12 }\n+                    }, NordsieckTransformer.buildNordsieckToMultistep(0, 1, 0, 3));\n+    }\n+\n+    @Test\n+    public void adamsBashforth4() {\n+        checkMatrix(1,\n+                    new int[][] {\n+                        { 1, 0,  0,  0,    0 },\n+                        { 0, 1,  0,  0,    0 },\n+                        { 0, 1, -2,  3,   -4 },\n+                        { 0, 1, -4, 12,  -32 },\n+                        { 0, 1, -6, 27, -108 }\n+                    }, NordsieckTransformer.buildNordsieckToMultistep(0, 1, 0, 4));\n+    }\n+\n+    @Test\n+    public void adamsBashforth5() {\n+        checkMatrix(1,\n+                    new int[][] {\n+                        { 1, 0,  0,  0,    0,    0 },\n+                        { 0, 1,  0,  0,    0,    0 },\n+                        { 0, 1, -2,  3,   -4,    5 },\n+                        { 0, 1, -4, 12,  -32,   80 },\n+                        { 0, 1, -6, 27, -108,  405 },\n+                        { 0, 1, -8, 48, -256, 1280 }\n+                    }, NordsieckTransformer.buildNordsieckToMultistep(0, 1, 0, 5));\n+    }\n+\n+    @Test\n+    public void polynomial() {\n         Random random = new Random(1847222905841997856l);\n         for (int n = 2; n < 10; ++n) {\n             for (int m = 0; m < 10; ++m) {\n         }\n     }\n \n-    public static Test suite() {\n-        return new TestSuite(NordsieckTransformerTest.class);\n-      }\n-\n }", "timestamp": 1242940927, "metainfo": ""}