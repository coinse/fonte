{"sha": "76e8b58ecb1892f609ade05fc53a0eed03f21c24", "log": "Make immutable private fields final  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java\n     private final String trimmedSeparator;\n \n     /** The format used for components. */\n-    private NumberFormat format;\n+    private final NumberFormat format;\n \n     /**\n      * Create an instance with default settings.\n--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n     private final int virtualSize;\n \n     /** Tolerance for having a value considered zero. */\n-    private double epsilon;\n+    private final double epsilon;\n \n     /**\n      * Build a 0-length vector.\n--- a/src/main/java/org/apache/commons/math/linear/RealVectorFormat.java\n+++ b/src/main/java/org/apache/commons/math/linear/RealVectorFormat.java\n     private final String trimmedSeparator;\n \n     /** The format used for components. */\n-    private NumberFormat format;\n+    private final NumberFormat format;\n \n     /**\n      * Create an instance with default settings.\n--- a/src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java\n     /**\n      * Relative threshold.\n      */\n-    private double relativeThreshold;\n+    private final double relativeThreshold;\n     /**\n      * Absolute threshold.\n      */\n-    private double absoluteThreshold;\n+    private final double absoluteThreshold;\n     /**\n      * Line search.\n      */\n-    private LineSearch line;\n+    private final LineSearch line;\n \n     /**\n      * The arguments control the behaviour of the default convergence\n--- a/src/main/java/org/apache/commons/math/optimization/linear/Relationship.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/Relationship.java\n     GEQ(\">=\");\n \n     /** Display string for the relationship. */\n-    private String stringValue;\n+    private final String stringValue;\n \n     /** Simple constructor.\n      * @param stringValue display string for the relationship\n--- a/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n     private static final long serialVersionUID = 5729073523949762654L;\n \n     /** List of SummaryStatistics objects characterizing the bins */\n-    private List<SummaryStatistics> binStats = null;\n+    private final List<SummaryStatistics> binStats;\n \n     /** Sample statistics */\n     private SummaryStatistics sampleStats = null;\n     private double delta = 0d;\n \n     /** number of bins */\n-    private int binCount = 1000;\n+    private final int binCount;\n \n     /** is the distribution loaded? */\n     private boolean loaded = false;\n     private double[] upperBounds = null;\n \n     /** RandomData instance to use in repeated calls to getNext() */\n-    private RandomData randomData = new RandomDataImpl();\n+    private final RandomData randomData = new RandomDataImpl();\n \n     /**\n      * Creates a new EmpiricalDistribution with the default bin count.\n      */\n     public EmpiricalDistributionImpl() {\n+        binCount = 1000;\n         binStats = new ArrayList<SummaryStatistics>();\n     }\n \n--- a/src/main/java/org/apache/commons/math/random/RandomAdaptor.java\n+++ b/src/main/java/org/apache/commons/math/random/RandomAdaptor.java\n     private static final long serialVersionUID = 2306581345647615033L;\n \n     /** Wrapped randomGenerator instance */\n-    private RandomGenerator randomGenerator = null;\n+    private final RandomGenerator randomGenerator;\n \n     /**\n      * Prevent instantiation without a generator argument\n      */\n     @SuppressWarnings(\"unused\")\n-    private RandomAdaptor() { }\n+    private RandomAdaptor() { randomGenerator = null; }\n \n     /**\n      * Construct a RandomAdaptor wrapping the supplied RandomGenerator.\n--- a/src/main/java/org/apache/commons/math/random/ValueServer.java\n+++ b/src/main/java/org/apache/commons/math/random/ValueServer.java\n     private BufferedReader filePointer = null;\n \n     /** RandomDataImpl to use for random data generation. */\n-    private RandomData randomData = new RandomDataImpl();\n+    private final RandomData randomData;\n \n     // Data generation modes ======================================\n \n     /** Creates new ValueServer */\n     public ValueServer() {\n+        randomData = new RandomDataImpl();\n     }\n \n     /**", "timestamp": 1285896436, "metainfo": ""}