{"sha": "1c538d830b141fa44dc29f69e4343f6bfcf74099", "log": "improved test coverage  ", "commit": "\n--- a/src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java\n+++ b/src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java\n  */\n package org.apache.commons.math.optimization.univariate;\n \n-import junit.framework.Test;\n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import org.apache.commons.math.MathException;\n import org.apache.commons.math.analysis.QuinticFunction;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.optimization.GoalType;\n import org.apache.commons.math.optimization.UnivariateRealOptimizer;\n+import org.junit.Test;\n \n /**\n  * @version $Revision$ $Date$ \n  */\n-public final class BrentMinimizerTest extends TestCase {\n+public final class BrentMinimizerTest {\n \n-    public BrentMinimizerTest(String name) {\n-        super(name);\n-    }\n-\n-    public static Test suite() {\n-        TestSuite suite = new TestSuite(BrentMinimizerTest.class);\n-        suite.setName(\"BrentOptimizer Tests\");\n-        return suite;\n-    }\n-\n+    @Test\n     public void testSinMin() throws MathException {\n         UnivariateRealFunction f = new SinFunction();\n         UnivariateRealOptimizer minimizer = new BrentOptimizer();\n+        try {\n+            minimizer.getResult();\n+            fail(\"an exception should have been thrown\");\n+        } catch (IllegalStateException ise) {\n+            // expected\n+        } catch (Exception e) {\n+            fail(\"wrong exception caught\");\n+        }\n         assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 70 * minimizer.getAbsoluteAccuracy());\n         assertTrue(minimizer.getIterationCount() <= 50);\n         assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 70 * minimizer.getAbsoluteAccuracy());\n         assertTrue(minimizer.getIterationCount() <= 50);\n     }\n \n-   public void testQuinticMin() throws MathException {\n+    @Test\n+    public void testQuinticMin() throws MathException {\n         // The quintic function has zeros at 0, +-0.5 and +-1.\n         // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n         UnivariateRealFunction f = new QuinticFunction();\n         assertEquals(-0.27195613, minimizer.optimize(f, GoalType.MINIMIZE, -1.0, 0.2), 1.0e-8);\n         assertTrue(minimizer.getIterationCount() <= 50);\n \n-   }\n-    \n+    }\n+\n+    @Test\n     public void testMinEndpoints() throws Exception {\n         UnivariateRealFunction f = new SinFunction();\n         UnivariateRealOptimizer solver = new BrentOptimizer();\n-        \n+\n         // endpoint is minimum\n         double result = solver.optimize(f, GoalType.MINIMIZE, 3 * Math.PI / 2, 5);\n         assertEquals(3 * Math.PI / 2, result, 70 * solver.getAbsoluteAccuracy());\n         assertEquals(3 * Math.PI / 2, result, 70 * solver.getAbsoluteAccuracy());\n \n     }\n-    \n+\n }", "timestamp": 1248538912, "metainfo": ""}