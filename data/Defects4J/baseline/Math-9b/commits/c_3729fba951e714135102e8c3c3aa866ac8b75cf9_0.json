{"sha": "3729fba951e714135102e8c3c3aa866ac8b75cf9", "log": "MATH-337 Equals methods rely on catching ClassCastException rather than using instanceof check  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n      */\n     @Override\n     public boolean equals(Object other) {\n-        boolean ret;\n-\n         if (this == other) {\n-            ret = true;\n-        } else if (other == null) {\n-            ret = false;\n-        } else  {\n-            try {\n-                Complex rhs = (Complex)other;\n-                if (rhs.isNaN()) {\n-                    ret = this.isNaN();\n-                } else {\n-                    ret = (real == rhs.real) && (imaginary == rhs.imaginary);\n-                }\n-            } catch (ClassCastException ex) {\n-                // ignore exception\n-                ret = false;\n+            return true;\n+        }\n+        if (other instanceof Complex){\n+            Complex rhs = (Complex)other;\n+            if (rhs.isNaN()) {\n+                return this.isNaN();\n+            } else {\n+                return (real == rhs.real) && (imaginary == rhs.imaginary);\n             }\n         }\n-\n-        return ret;\n+        return false;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/math/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math/fraction/Fraction.java\n      */\n     @Override\n     public boolean equals(Object other) {\n-        boolean ret;\n-\n         if (this == other) {\n-            ret = true;\n-        } else if (other == null) {\n-            ret = false;\n-        } else {\n-            try {\n-                // since fractions are always in lowest terms, numerators and\n-                // denominators can be compared directly for equality.\n-                Fraction rhs = (Fraction)other;\n-                ret = (numerator == rhs.numerator) &&\n-                    (denominator == rhs.denominator);\n-            } catch (ClassCastException ex) {\n-                // ignore exception\n-                ret = false;\n-            }\n-        }\n-\n-        return ret;\n+            return true;\n+        }\n+        if (other instanceof Fraction) {\n+            // since fractions are always in lowest terms, numerators and\n+            // denominators can be compared directly for equality.\n+            Fraction rhs = (Fraction)other;\n+            return (numerator == rhs.numerator) &&\n+                (denominator == rhs.denominator);\n+        }\n+        return false;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n       return true;\n     }\n \n-    if (other == null) {\n-      return false;\n-    }\n-\n-    try {\n-\n+    if (other instanceof Vector3D) {\n       final Vector3D rhs = (Vector3D)other;\n       if (rhs.isNaN()) {\n           return this.isNaN();\n       }\n \n       return (x == rhs.x) && (y == rhs.y) && (z == rhs.z);\n-\n-    } catch (ClassCastException ex) {\n-        // ignore exception\n-        return false;\n-    }\n-\n+    }\n+    return false;\n   }\n \n   /**\n--- a/src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java\n         return true;\n       }\n \n-      if (other == null) {\n-        return false;\n-      }\n-\n-      try {\n-\n+      if (other instanceof LinearConstraint) {\n           LinearConstraint rhs = (LinearConstraint) other;\n           return (relationship == rhs.relationship) &&\n                  (value        == rhs.value) &&\n                  coefficients.equals(rhs.coefficients);\n-\n-      } catch (ClassCastException ex) {\n-          // ignore exception\n-          return false;\n       }\n-\n+      return false;\n     }\n \n     /** {@inheritDoc} */\n--- a/src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java\n         return true;\n       }\n \n-      if (other == null) {\n-        return false;\n+      if (other instanceof LinearObjectiveFunction) {\n+          LinearObjectiveFunction rhs = (LinearObjectiveFunction) other;\n+          return (constantTerm == rhs.constantTerm) && coefficients.equals(rhs.coefficients);\n       }\n \n-      try {\n-\n-          LinearObjectiveFunction rhs = (LinearObjectiveFunction) other;\n-          return (constantTerm == rhs.constantTerm) && coefficients.equals(rhs.coefficients);\n-\n-      } catch (ClassCastException ex) {\n-          // ignore exception\n-          return false;\n-      }\n-\n+      return false;\n     }\n \n     /** {@inheritDoc} */\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n         return true;\n       }\n \n-      if (other == null) {\n-        return false;\n-      }\n-\n-      try {\n-\n+      if (other instanceof SimplexTableau) {\n           SimplexTableau rhs = (SimplexTableau) other;\n           return (restrictToNonNegative  == rhs.restrictToNonNegative) &&\n                  (numDecisionVariables   == rhs.numDecisionVariables) &&\n                  f.equals(rhs.f) &&\n                  constraints.equals(rhs.constraints) &&\n                  tableau.equals(rhs.tableau);\n-\n-      } catch (ClassCastException ex) {\n-          // ignore exception\n-          return false;\n-      }\n-\n+      }\n+      return false;\n     }\n \n     /** {@inheritDoc} */\n--- a/src/main/java/org/apache/commons/math/util/BigReal.java\n+++ b/src/main/java/org/apache/commons/math/util/BigReal.java\n     /** {@inheritDoc} */\n     @Override\n     public boolean equals(Object other) {\n-        try {\n-            if (other == null) {\n-                return false;\n-            }\n-            return d.equals(((BigReal) other).d);\n-        } catch (ClassCastException cce) {\n-            return false;\n+        if (this == other){\n+            return true;\n         }\n+ \n+        if (other instanceof BigReal){\n+            return d.equals(((BigReal) other).d);            \n+        }\n+        return false;\n     }\n \n     /** {@inheritDoc} */\n--- a/src/main/java/org/apache/commons/math/util/TransformerMap.java\n+++ b/src/main/java/org/apache/commons/math/util/TransformerMap.java\n         if (this == other) {\n             return true;\n         }\n-        if (other == null) {\n-            return false;\n-        }\n-        try {\n+        if (other instanceof TransformerMap) {\n             TransformerMap rhs = (TransformerMap) other;\n             if (! defaultTransformer.equals(rhs.defaultTransformer)) {\n                 return false;\n                 }\n             }\n             return true;\n-        } catch (ClassCastException cce) {\n-            return false;\n         }\n+        return false;\n     }\n \n     /** {@inheritDoc} */", "timestamp": 1268529973, "metainfo": ""}