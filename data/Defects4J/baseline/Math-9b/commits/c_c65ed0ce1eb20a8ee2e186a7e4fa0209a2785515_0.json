{"sha": "c65ed0ce1eb20a8ee2e186a7e4fa0209a2785515", "log": "MATH-829 Removed unnecessary (and uninformative) \"throws Exception\" clauses in method signature.   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/distribution/AbstractIntegerDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math3/distribution/AbstractIntegerDistributionTest.java\n     protected final double p = diceDistribution.probability(1);\n \n     @Test\n-    public void testCumulativeProbabilitiesSingleArguments() throws Exception {\n+    public void testCumulativeProbabilitiesSingleArguments() {\n         for (int i = 1; i < 7; i++) {\n             Assert.assertEquals(p * i,\n                     diceDistribution.cumulativeProbability(i), Double.MIN_VALUE);\n     }\n \n     @Test\n-    public void testCumulativeProbabilitiesRangeArguments() throws Exception {\n+    public void testCumulativeProbabilitiesRangeArguments() {\n         int lower = 0;\n         int upper = 6;\n         for (int i = 0; i < 2; i++) {\n--- a/src/test/java/org/apache/commons/math3/distribution/BinomialDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math3/distribution/BinomialDistributionTest.java\n \n     /** Test degenerate case p = 0 */\n     @Test\n-    public void testDegenerate0() throws Exception {\n+    public void testDegenerate0() {\n         BinomialDistribution dist = new BinomialDistribution(5, 0.0d);\n         setDistribution(dist);\n         setCumulativeTestPoints(new int[] { -1, 0, 1, 5, 10 });\n \n     /** Test degenerate case p = 1 */\n     @Test\n-    public void testDegenerate1() throws Exception {\n+    public void testDegenerate1() {\n         BinomialDistribution dist = new BinomialDistribution(5, 1.0d);\n         setDistribution(dist);\n         setCumulativeTestPoints(new int[] { -1, 0, 1, 2, 5, 10 });\n--- a/src/test/java/org/apache/commons/math3/distribution/CauchyDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math3/distribution/CauchyDistributionTest.java\n     // --------------------- Override tolerance  --------------\n     protected double defaultTolerance = NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;\n     @Override\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         super.setUp();\n         setTolerance(defaultTolerance);\n     }\n     //---------------------------- Additional test cases -------------------------\n \n     @Test\n-    public void testInverseCumulativeProbabilityExtremes() throws Exception {\n+    public void testInverseCumulativeProbabilityExtremes() {\n         setInverseCumulativeTestPoints(new double[] {0.0, 1.0});\n         setInverseCumulativeTestValues(\n                 new double[] {Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY});\n--- a/src/test/java/org/apache/commons/math3/distribution/ChiSquaredDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math3/distribution/ChiSquaredDistributionTest.java\n \n  // --------------------- Override tolerance  --------------\n     @Override\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         super.setUp();\n         setTolerance(1e-9);\n     }\n  //---------------------------- Additional test cases -------------------------\n \n     @Test\n-    public void testSmallDf() throws Exception {\n+    public void testSmallDf() {\n         setDistribution(new ChiSquaredDistribution(0.1d));\n         setTolerance(1E-4);\n         // quantiles computed using R version 1.8.1 (linux version)\n--- a/src/test/java/org/apache/commons/math3/distribution/ExponentialDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math3/distribution/ExponentialDistributionTest.java\n \n     // --------------------- Override tolerance  --------------\n     @Override\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         super.setUp();\n         setTolerance(1E-9);\n     }\n     //------------ Additional tests -------------------------------------------\n \n     @Test\n-    public void testCumulativeProbabilityExtremes() throws Exception {\n+    public void testCumulativeProbabilityExtremes() {\n         setCumulativeTestPoints(new double[] {-2, 0});\n         setCumulativeTestValues(new double[] {0, 0});\n         verifyCumulativeProbabilities();\n     }\n \n     @Test\n-    public void testInverseCumulativeProbabilityExtremes() throws Exception {\n+    public void testInverseCumulativeProbabilityExtremes() {\n          setInverseCumulativeTestPoints(new double[] {0, 1});\n          setInverseCumulativeTestValues(new double[] {0, Double.POSITIVE_INFINITY});\n          verifyInverseCumulativeProbabilities();\n     }\n \n     @Test\n-    public void testCumulativeProbability2() throws Exception {\n+    public void testCumulativeProbability2() {\n         double actual = getDistribution().cumulativeProbability(0.25, 0.75);\n         Assert.assertEquals(0.0905214, actual, 10e-4);\n     }\n--- a/src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java\n \n     // --------------------- Override tolerance  --------------\n     @Override\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         super.setUp();\n         setTolerance(1e-9);\n     }\n     //---------------------------- Additional test cases -------------------------\n \n     @Test\n-    public void testCumulativeProbabilityExtremes() throws Exception {\n+    public void testCumulativeProbabilityExtremes() {\n         setCumulativeTestPoints(new double[] {-2, 0});\n         setCumulativeTestValues(new double[] {0, 0});\n         verifyCumulativeProbabilities();\n     }\n \n     @Test\n-    public void testInverseCumulativeProbabilityExtremes() throws Exception {\n+    public void testInverseCumulativeProbabilityExtremes() {\n         setInverseCumulativeTestPoints(new double[] {0, 1});\n         setInverseCumulativeTestValues(new double[] {0, Double.POSITIVE_INFINITY});\n         verifyInverseCumulativeProbabilities();\n     }\n \n     @Test\n-    public void testLargeDegreesOfFreedom() throws Exception {\n+    public void testLargeDegreesOfFreedom() {\n         FDistribution fd = new FDistribution(100000, 100000);\n         double p = fd.cumulativeProbability(.999);\n         double x = fd.inverseCumulativeProbability(p);\n     }\n \n     @Test\n-    public void testSmallDegreesOfFreedom() throws Exception {\n+    public void testSmallDegreesOfFreedom() {\n         FDistribution fd = new FDistribution(1, 1);\n         double p = fd.cumulativeProbability(0.975);\n         double x = fd.inverseCumulativeProbability(p);\n--- a/src/test/java/org/apache/commons/math3/distribution/GammaDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math3/distribution/GammaDistributionTest.java\n \n     // --------------------- Override tolerance  --------------\n     @Override\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         super.setUp();\n         setTolerance(1e-9);\n     }\n     }\n \n     @Test\n-    public void testProbabilities() throws Exception {\n+    public void testProbabilities() {\n         testProbability(-1.000, 4.0, 2.0, .0000);\n         testProbability(15.501, 4.0, 2.0, .9499);\n         testProbability(0.504, 4.0, 1.0, .0018);\n     }\n \n     @Test\n-    public void testValues() throws Exception {\n+    public void testValues() {\n         testValue(15.501, 4.0, 2.0, .9499);\n         testValue(0.504, 4.0, 1.0, .0018);\n         testValue(10.011, 1.0, 2.0, .9933);\n         testValue(5.000, 2.0, 2.0, .7127);\n     }\n \n-    private void testProbability(double x, double a, double b, double expected) throws Exception {\n+    private void testProbability(double x, double a, double b, double expected) {\n         GammaDistribution distribution = new GammaDistribution( a, b );\n         double actual = distribution.cumulativeProbability(x);\n         Assert.assertEquals(\"probability for \" + x, expected, actual, 10e-4);\n     }\n \n-    private void testValue(double expected, double a, double b, double p) throws Exception {\n+    private void testValue(double expected, double a, double b, double p) {\n         GammaDistribution distribution = new GammaDistribution( a, b );\n         double actual = distribution.inverseCumulativeProbability(p);\n         Assert.assertEquals(\"critical value for \" + p, expected, actual, 10e-4);\n     }\n \n     @Test\n-    public void testInverseCumulativeProbabilityExtremes() throws Exception {\n+    public void testInverseCumulativeProbabilityExtremes() {\n         setInverseCumulativeTestPoints(new double[] {0, 1});\n         setInverseCumulativeTestValues(new double[] {0, Double.POSITIVE_INFINITY});\n         verifyInverseCumulativeProbabilities();\n--- a/src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java\n \n     /** Verify that if there are no failures, mass is concentrated on sampleSize */\n     @Test\n-    public void testDegenerateNoFailures() throws Exception {\n+    public void testDegenerateNoFailures() {\n         HypergeometricDistribution dist = new HypergeometricDistribution(5,5,3);\n         setDistribution(dist);\n         setCumulativeTestPoints(new int[] {-1, 0, 1, 3, 10 });\n \n     /** Verify that if there are no successes, mass is concentrated on 0 */\n     @Test\n-    public void testDegenerateNoSuccesses() throws Exception {\n+    public void testDegenerateNoSuccesses() {\n         HypergeometricDistribution dist = new HypergeometricDistribution(5,0,3);\n         setDistribution(dist);\n         setCumulativeTestPoints(new int[] {-1, 0, 1, 3, 10 });\n \n     /** Verify that if sampleSize = populationSize, mass is concentrated on numberOfSuccesses */\n     @Test\n-    public void testDegenerateFullSample() throws Exception {\n+    public void testDegenerateFullSample() {\n         HypergeometricDistribution dist = new HypergeometricDistribution(5,3,5);\n         setDistribution(dist);\n         setCumulativeTestPoints(new int[] {-1, 0, 1, 3, 10 });\n--- a/src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java\n      * Verifies that probability density calculations match expected values\n      * using current test instance data\n      */\n-    protected void verifyDensities() throws Exception {\n+    protected void verifyDensities() {\n         for (int i = 0; i < densityTestPoints.length; i++) {\n             Assert.assertEquals(\"Incorrect density value returned for \" + densityTestPoints[i],\n                     densityTestValues[i],\n      * Verifies that cumulative probability density calculations match expected values\n      * using current test instance data\n      */\n-    protected void verifyCumulativeProbabilities() throws Exception {\n+    protected void verifyCumulativeProbabilities() {\n         for (int i = 0; i < cumulativeTestPoints.length; i++) {\n             Assert.assertEquals(\"Incorrect cumulative probability value returned for \" + cumulativeTestPoints[i],\n                     cumulativeTestValues[i],\n      * Verifies that inverse cumulative probability density calculations match expected values\n      * using current test instance data\n      */\n-    protected void verifyInverseCumulativeProbabilities() throws Exception {\n+    protected void verifyInverseCumulativeProbabilities() {\n         for (int i = 0; i < inverseCumulativeTestPoints.length; i++) {\n             Assert.assertEquals(\"Incorrect inverse cumulative probability value returned for \"\n                     + inverseCumulativeTestPoints[i], inverseCumulativeTestValues[i],\n      * using default test instance data\n      */\n     @Test\n-    public void testDensities() throws Exception {\n+    public void testDensities() {\n         verifyDensities();\n     }\n \n      * using default test instance data\n      */\n     @Test\n-    public void testCumulativeProbabilities() throws Exception {\n+    public void testCumulativeProbabilities() {\n         verifyCumulativeProbabilities();\n     }\n \n      * using default test instance data\n      */\n     @Test\n-    public void testInverseCumulativeProbabilities() throws Exception {\n+    public void testInverseCumulativeProbabilities() {\n         verifyInverseCumulativeProbabilities();\n     }\n \n      * Verifies that illegal arguments are correctly handled\n      */\n     @Test\n-    public void testIllegalArguments() throws Exception {\n+    public void testIllegalArguments() {\n         try {\n             distribution.cumulativeProbability(1, 0);\n             Assert.fail(\"Expecting MathIllegalArgumentException for bad cumulativeProbability interval\");\n      * Test sampling\n      */\n     @Test\n-    public void testSampling() throws Exception {\n+    public void testSampling() {\n         int[] densityPoints = makeDensityTestPoints();\n         double[] densityValues = makeDensityTestValues();\n         int sampleSize = 1000;\n--- a/src/test/java/org/apache/commons/math3/distribution/KolmogorovSmirnovDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math3/distribution/KolmogorovSmirnovDistributionTest.java\n     private static final double TOLERANCE = 10e-10;\n \n     @Test\n-    public void testCumulativeDensityFunction() throws Exception {\n+    public void testCumulativeDensityFunction() {\n         \n         KolmogorovSmirnovDistribution dist;\n         \n--- a/src/test/java/org/apache/commons/math3/distribution/LogNormalDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math3/distribution/LogNormalDistributionTest.java\n \n     // --------------------- Override tolerance  --------------\n     @Override\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         super.setUp();\n         setTolerance(LogNormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);\n     }\n \n     //---------------------------- Additional test cases -------------------------\n \n-    private void verifyQuantiles() throws Exception {\n+    private void verifyQuantiles() {\n         LogNormalDistribution distribution = (LogNormalDistribution)getDistribution();\n         double mu = distribution.getScale();\n         double sigma = distribution.getShape();\n     }\n \n     @Test\n-    public void testQuantiles() throws Exception {\n+    public void testQuantiles() {\n         setCumulativeTestValues(new double[] {0, 0.0396495152787,\n                                               0.16601209243, 0.272533253269,\n                                               0.357618409638, 0.426488363093,\n     }\n \n     @Test\n-    public void testInverseCumulativeProbabilityExtremes() throws Exception {\n+    public void testInverseCumulativeProbabilityExtremes() {\n         setInverseCumulativeTestPoints(new double[] {0, 1});\n         setInverseCumulativeTestValues(\n                 new double[] {0, Double.POSITIVE_INFINITY});\n      * Verifies fixes for JIRA MATH-167, MATH-414\n      */\n     @Test\n-    public void testExtremeValues() throws Exception {\n+    public void testExtremeValues() {\n         LogNormalDistribution d = new LogNormalDistribution(0, 1);\n         for (int i = 0; i < 1e5; i++) { // make sure no convergence exception\n             double upperTail = d.cumulativeProbability(i);\n--- a/src/test/java/org/apache/commons/math3/distribution/NormalDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math3/distribution/NormalDistributionTest.java\n     // --------------------- Override tolerance  --------------\n     protected double defaultTolerance = NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;\n     @Override\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         super.setUp();\n         setTolerance(defaultTolerance);\n     }\n \n     //---------------------------- Additional test cases -------------------------\n \n-    private void verifyQuantiles() throws Exception {\n+    private void verifyQuantiles() {\n         NormalDistribution distribution = (NormalDistribution) getDistribution();\n         double mu = distribution.getMean();\n         double sigma = distribution.getStandardDeviation();\n     }\n \n     @Test\n-    public void testQuantiles() throws Exception {\n+    public void testQuantiles() {\n         setDensityTestValues(new double[] {0.0385649760808, 0.172836231799, 0.284958771715, 0.172836231799, 0.0385649760808,\n                 0.00316560600853, 9.55930184035e-05, 1.06194251052e-06});\n         verifyQuantiles();\n     }\n \n     @Test\n-    public void testInverseCumulativeProbabilityExtremes() throws Exception {\n+    public void testInverseCumulativeProbabilityExtremes() {\n         setInverseCumulativeTestPoints(new double[] {0, 1});\n         setInverseCumulativeTestValues(\n                 new double[] {Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY});\n      * Verifies fixes for JIRA MATH-167, MATH-414\n      */\n     @Test\n-    public void testExtremeValues() throws Exception {\n+    public void testExtremeValues() {\n         NormalDistribution distribution = new NormalDistribution(0, 1);\n         for (int i = 0; i < 100; i++) { // make sure no convergence exception\n             double lowerTail = distribution.cumulativeProbability(-i);\n--- a/src/test/java/org/apache/commons/math3/distribution/PascalDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math3/distribution/PascalDistributionTest.java\n \n     /** Test degenerate case p = 0   */\n     @Test\n-    public void testDegenerate0() throws Exception {\n+    public void testDegenerate0() {\n         setDistribution(new PascalDistribution(5, 0.0d));\n         setCumulativeTestPoints(new int[] {-1, 0, 1, 5, 10 });\n         setCumulativeTestValues(new double[] {0d, 0d, 0d, 0d, 0d});\n \n     /** Test degenerate case p = 1   */\n     @Test\n-    public void testDegenerate1() throws Exception {\n+    public void testDegenerate1() {\n         setDistribution(new PascalDistribution(5, 1.0d));\n         setCumulativeTestPoints(new int[] {-1, 0, 1, 2, 5, 10 });\n         setCumulativeTestValues(new double[] {0d, 1d, 1d, 1d, 1d, 1d});\n--- a/src/test/java/org/apache/commons/math3/distribution/PoissonDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math3/distribution/PoissonDistributionTest.java\n      * P(9900 &le; X &le; 10200) for X  = Po(10000)\n      */\n     @Test\n-    public void testNormalApproximateProbability() throws Exception {\n+    public void testNormalApproximateProbability() {\n         PoissonDistribution dist = new PoissonDistribution(100);\n         double result = dist.normalApproximateProbability(110)\n                 - dist.normalApproximateProbability(89);\n      * @throws Exception\n      */\n     @Test\n-    public void testDegenerateInverseCumulativeProbability() throws Exception {\n+    public void testDegenerateInverseCumulativeProbability() {\n         PoissonDistribution dist = new PoissonDistribution(DEFAULT_TEST_POISSON_PARAMETER);\n         Assert.assertEquals(Integer.MAX_VALUE, dist.inverseCumulativeProbability(1.0d));\n         Assert.assertEquals(0, dist.inverseCumulativeProbability(0d));\n      * JIRA: MATH-282\n      */\n     @Test\n-    public void testCumulativeProbabilitySpecial() throws Exception {\n+    public void testCumulativeProbabilitySpecial() {\n         PoissonDistribution dist;\n         dist = new PoissonDistribution(9120);\n         checkProbability(dist, 9075);\n         checkProbability(dist, 6950);\n     }\n \n-    private void checkProbability(PoissonDistribution dist, int x) throws Exception {\n+    private void checkProbability(PoissonDistribution dist, int x) {\n         double p = dist.cumulativeProbability(x);\n         Assert.assertFalse(\"NaN cumulative probability returned for mean = \" +\n                 dist.getMean() + \" x = \" + x, Double.isNaN(p));\n     }\n \n     @Test\n-    public void testLargeMeanInverseCumulativeProbability() throws Exception {\n+    public void testLargeMeanInverseCumulativeProbability() {\n         double mean = 1.0;\n         while (mean <= 100000.0) { // Extended test value: 1E7.  Reduced to limit run time.\n             PoissonDistribution dist = new PoissonDistribution(mean);\n--- a/src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java\n      * Setup sets all test instance data to default values\n      */\n     @Before\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         distribution = makeDistribution();\n         cumulativeTestPoints = makeCumulativeTestPoints();\n         cumulativeTestValues = makeCumulativeTestValues();\n      * Cleans up test instance data\n      */\n     @After\n-    public void tearDown() throws Exception {\n+    public void tearDown() {\n         distribution = null;\n         cumulativeTestPoints = null;\n         cumulativeTestValues = null;\n      * Verifies that cumulative probability density calculations match expected values\n      * using current test instance data\n      */\n-    protected void verifyCumulativeProbabilities() throws Exception {\n+    protected void verifyCumulativeProbabilities() {\n         // verify cumulativeProbability(double)\n         for (int i = 0; i < cumulativeTestPoints.length; i++) {\n             TestUtils.assertEquals(\"Incorrect cumulative probability value returned for \"\n      * Verifies that inverse cumulative probability density calculations match expected values\n      * using current test instance data\n      */\n-    protected void verifyInverseCumulativeProbabilities() throws Exception {\n+    protected void verifyInverseCumulativeProbabilities() {\n         for (int i = 0; i < inverseCumulativeTestPoints.length; i++) {\n             TestUtils.assertEquals(\"Incorrect inverse cumulative probability value returned for \"\n                 + inverseCumulativeTestPoints[i], inverseCumulativeTestValues[i],\n     /**\n      * Verifies that density calculations match expected values\n      */\n-    protected void verifyDensities() throws Exception {\n+    protected void verifyDensities() {\n         for (int i = 0; i < cumulativeTestPoints.length; i++) {\n             TestUtils.assertEquals(\"Incorrect probability density value returned for \"\n                 + cumulativeTestPoints[i], densityTestValues[i],\n      * using default test instance data\n      */\n     @Test\n-    public void testCumulativeProbabilities() throws Exception {\n+    public void testCumulativeProbabilities() {\n         verifyCumulativeProbabilities();\n     }\n \n      * using default test instance data\n      */\n     @Test\n-    public void testInverseCumulativeProbabilities() throws Exception {\n+    public void testInverseCumulativeProbabilities() {\n         verifyInverseCumulativeProbabilities();\n     }\n \n      * for default test instance data\n      */\n     @Test\n-    public void testDensities() throws Exception {\n+    public void testDensities() {\n         verifyDensities();\n     }\n \n      * Verifies that probability computations are consistent\n      */\n     @Test\n-    public void testConsistency() throws Exception {\n+    public void testConsistency() {\n         for (int i=1; i < cumulativeTestPoints.length; i++) {\n \n             // check that cdf(x, x) = 0\n      * Verifies that illegal arguments are correctly handled\n      */\n     @Test\n-    public void testIllegalArguments() throws Exception {\n+    public void testIllegalArguments() {\n         try {\n             distribution.cumulativeProbability(1, 0);\n             Assert.fail(\"Expecting MathIllegalArgumentException for bad cumulativeProbability interval\");\n      * Test sampling\n      */\n     @Test\n-    public void testSampling() throws Exception {\n+    public void testSampling() {\n         final int sampleSize = 1000;\n         distribution.reseedRandomGenerator(1000); // Use fixed seed\n         double[] sample = distribution.sample(sampleSize);\n--- a/src/test/java/org/apache/commons/math3/distribution/TDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math3/distribution/TDistributionTest.java\n \n     // --------------------- Override tolerance  --------------\n     @Override\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         super.setUp();\n         setTolerance(1E-9);\n     }\n      *      Bug report that prompted this unit test.</a>\n      */\n     @Test\n-    public void testCumulativeProbabilityAgainstStackOverflow() throws Exception {\n+    public void testCumulativeProbabilityAgainstStackOverflow() {\n         TDistribution td = new TDistribution(5.);\n         td.cumulativeProbability(.1);\n         td.cumulativeProbability(.01);\n     }\n \n     @Test\n-    public void testSmallDf() throws Exception {\n+    public void testSmallDf() {\n         setDistribution(new TDistribution(1d));\n         // quantiles computed using R version 2.9.2\n         setCumulativeTestPoints(new double[] {-318.308838986, -31.8205159538, -12.7062047362,\n     }\n \n     @Test\n-    public void testInverseCumulativeProbabilityExtremes() throws Exception {\n+    public void testInverseCumulativeProbabilityExtremes() {\n         setInverseCumulativeTestPoints(new double[] {0, 1});\n         setInverseCumulativeTestValues(\n                 new double[] {Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY});\n--- a/src/test/java/org/apache/commons/math3/distribution/TriangularDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math3/distribution/TriangularDistributionTest.java\n     // --- Override tolerance -------------------------------------------------\n \n     @Override\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         super.setUp();\n         setTolerance(1e-4);\n     }\n--- a/src/test/java/org/apache/commons/math3/distribution/UniformRealDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math3/distribution/UniformRealDistributionTest.java\n     // --- Override tolerance -------------------------------------------------\n \n     @Override\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         super.setUp();\n         setTolerance(1e-4);\n     }\n--- a/src/test/java/org/apache/commons/math3/distribution/WeibullDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math3/distribution/WeibullDistributionTest.java\n     //---------------------------- Additional test cases -------------------------\n \n     @Test\n-    public void testInverseCumulativeProbabilityExtremes() throws Exception {\n+    public void testInverseCumulativeProbabilityExtremes() {\n         setInverseCumulativeTestPoints(new double[] {0.0, 1.0});\n         setInverseCumulativeTestValues(\n                 new double[] {0.0, Double.POSITIVE_INFINITY});\n--- a/src/test/java/org/apache/commons/math3/random/RandomDataTest.java\n+++ b/src/test/java/org/apache/commons/math3/random/RandomDataTest.java\n     }\n     \n     @Test\n-    public void testNextIntIAE() throws Exception {\n+    public void testNextIntIAE() {\n         try {\n             randomData.nextInt(4, 3);\n             Assert.fail(\"MathIllegalArgumentException expected\");\n     }\n     \n     @Test\n-    public void testNextIntNegativeToPositiveRange() throws Exception {\n+    public void testNextIntNegativeToPositiveRange() {\n         for (int i = 0; i < 5; i++) {\n             checkNextIntUniform(-3, 5);\n             checkNextIntUniform(-3, 6);\n     }\n     \n     @Test \n-    public void testNextIntNegativeRange() throws Exception {\n+    public void testNextIntNegativeRange() {\n         for (int i = 0; i < 5; i++) {\n             checkNextIntUniform(-7, -4);\n             checkNextIntUniform(-15, -2);\n     }\n     \n     @Test \n-    public void testNextIntPositiveRange() throws Exception {\n+    public void testNextIntPositiveRange() {\n         for (int i = 0; i < 5; i++) {\n             checkNextIntUniform(0, 3);\n             checkNextIntUniform(2, 12);\n     }\n     \n     \n-    private void checkNextIntUniform(int min, int max) throws Exception {\n+    private void checkNextIntUniform(int min, int max) {\n         final Frequency freq = new Frequency();\n         for (int i = 0; i < smallSampleSize; i++) {\n             final int value = randomData.nextInt(min, max);\n     }\n     \n     @Test\n-    public void testNextLongNegativeToPositiveRange() throws Exception {\n+    public void testNextLongNegativeToPositiveRange() {\n         for (int i = 0; i < 5; i++) {\n             checkNextLongUniform(-3, 5);\n             checkNextLongUniform(-3, 6);\n     }\n     \n     @Test \n-    public void testNextLongNegativeRange() throws Exception {\n+    public void testNextLongNegativeRange() {\n         for (int i = 0; i < 5; i++) {\n             checkNextLongUniform(-7, -4);\n             checkNextLongUniform(-15, -2);\n     }\n     \n     @Test \n-    public void testNextLongPositiveRange() throws Exception {\n+    public void testNextLongPositiveRange() {\n         for (int i = 0; i < 5; i++) {\n             checkNextLongUniform(0, 3);\n             checkNextLongUniform(2, 12);\n         }\n     }\n     \n-    private void checkNextLongUniform(int min, int max) throws Exception {\n+    private void checkNextLongUniform(int min, int max) {\n         final Frequency freq = new Frequency();\n         for (int i = 0; i < smallSampleSize; i++) {\n             final long value = randomData.nextLong(min, max);\n     \n     @Test\n     @Retry(3)\n-    public void testNextSecureLongNegativeToPositiveRange() throws Exception {\n+    public void testNextSecureLongNegativeToPositiveRange() {\n         for (int i = 0; i < 5; i++) {\n             checkNextSecureLongUniform(-3, 5);\n             checkNextSecureLongUniform(-3, 6);\n     \n     @Test\n     @Retry(3)\n-    public void testNextSecureLongNegativeRange() throws Exception {\n+    public void testNextSecureLongNegativeRange() {\n         for (int i = 0; i < 5; i++) {\n             checkNextSecureLongUniform(-7, -4);\n             checkNextSecureLongUniform(-15, -2);\n     \n     @Test\n     @Retry(3)\n-    public void testNextSecureLongPositiveRange() throws Exception {\n+    public void testNextSecureLongPositiveRange() {\n         for (int i = 0; i < 5; i++) {\n             checkNextSecureLongUniform(0, 3);\n             checkNextSecureLongUniform(2, 12);\n         }\n     }\n     \n-    private void checkNextSecureLongUniform(int min, int max) throws Exception {\n+    private void checkNextSecureLongUniform(int min, int max) {\n         final Frequency freq = new Frequency();\n         for (int i = 0; i < smallSampleSize; i++) {\n             final long value = randomData.nextSecureLong(min, max);\n     \n     @Test\n     @Retry(3)\n-    public void testNextSecureIntNegativeToPositiveRange() throws Exception {\n+    public void testNextSecureIntNegativeToPositiveRange() {\n         for (int i = 0; i < 5; i++) {\n             checkNextSecureIntUniform(-3, 5);\n             checkNextSecureIntUniform(-3, 6);\n     \n     @Test\n     @Retry(3)\n-    public void testNextSecureIntNegativeRange() throws Exception {\n+    public void testNextSecureIntNegativeRange() {\n         for (int i = 0; i < 5; i++) {\n             checkNextSecureIntUniform(-7, -4);\n             checkNextSecureIntUniform(-15, -2);\n     \n     @Test \n     @Retry(3)\n-    public void testNextSecureIntPositiveRange() throws Exception {\n+    public void testNextSecureIntPositiveRange() {\n         for (int i = 0; i < 5; i++) {\n             checkNextSecureIntUniform(0, 3);\n             checkNextSecureIntUniform(2, 12);\n         }\n     }\n      \n-    private void checkNextSecureIntUniform(int min, int max) throws Exception {\n+    private void checkNextSecureIntUniform(int min, int max) {\n         final Frequency freq = new Frequency();\n         for (int i = 0; i < smallSampleSize; i++) {\n             final int value = randomData.nextSecureInt(min, max);\n     }\n \n     @Test\n-    public void testNextPoissonConsistency() throws Exception {\n+    public void testNextPoissonConsistency() {\n \n         // Small integral means\n         for (int i = 1; i < 100; i++) {\n      * distributions are the same. If the null hypothesis can be rejected with confidence\n      * 1 - alpha, the check fails.\n      */\n-    public void checkNextPoissonConsistency(double mean) throws Exception {\n+    public void checkNextPoissonConsistency(double mean) {\n         // Generate sample values\n         final int sampleSize = 1000;        // Number of deviates to generate\n         final int minExpectedCount = 7;     // Minimum size of expected bin count\n \n     /** test dispersion and failure modes for nextHex() */\n     @Test\n-    public void testNextHex() throws Exception {\n+    public void testNextHex() {\n         try {\n             randomData.nextHexString(-1);\n             Assert.fail(\"negative length supplied -- MathIllegalArgumentException expected\");\n     /** test dispersion and failure modes for nextHex() */\n     @Test\n     @Retry(3)\n-    public void testNextSecureHex() throws Exception {\n+    public void testNextSecureHex() {\n         try {\n             randomData.nextSecureHexString(-1);\n             Assert.fail(\"negative length -- MathIllegalArgumentException expected\");\n     }\n     \n     @Test\n-    public void testNextUniformUniformPositiveBounds() throws Exception {\n+    public void testNextUniformUniformPositiveBounds() {\n         for (int i = 0; i < 5; i++) {\n             checkNextUniformUniform(0, 10);\n         }\n     }\n     \n     @Test\n-    public void testNextUniformUniformNegativeToPositiveBounds() throws Exception {\n+    public void testNextUniformUniformNegativeToPositiveBounds() {\n         for (int i = 0; i < 5; i++) {\n             checkNextUniformUniform(-3, 5);\n         }\n     }\n     \n     @Test\n-    public void testNextUniformUniformNegaiveBounds() throws Exception {\n+    public void testNextUniformUniformNegaiveBounds() {\n         for (int i = 0; i < 5; i++) {\n             checkNextUniformUniform(-7, -3);\n         }\n     }\n     \n     @Test\n-    public void testNextUniformUniformMaximalInterval() throws Exception {\n+    public void testNextUniformUniformMaximalInterval() {\n         for (int i = 0; i < 5; i++) {\n             checkNextUniformUniform(-Double.MAX_VALUE, Double.MAX_VALUE);\n         }\n     }\n     \n-    private void checkNextUniformUniform(double min, double max) throws Exception {\n+    private void checkNextUniformUniform(double min, double max) {\n         // Set up bin bounds - min, binBound[0], ..., binBound[binCount-2], max\n         final int binCount = 5;\n         final double binSize = max / binCount - min/binCount; // Prevent overflow in extreme value case\n \n     /** test failure modes and distribution of nextExponential() */\n     @Test\n-    public void testNextExponential() throws Exception {\n+    public void testNextExponential() {\n         try {\n             randomData.nextExponential(-1);\n             Assert.fail(\"negative mean -- expecting MathIllegalArgumentException\");\n \n     /** tests for nextPermutation */\n     @Test\n-    public void testNextPermutation() throws Exception {\n+    public void testNextPermutation() {\n         int[][] p = { { 0, 1, 2 }, { 0, 2, 1 }, { 1, 0, 2 }, { 1, 2, 0 },\n                 { 2, 0, 1 }, { 2, 1, 0 } };\n         long[] observed = { 0, 0, 0, 0, 0, 0 };\n     }\n \n     @Test\n-    public void testNextInversionDeviate() throws Exception {\n+    public void testNextInversionDeviate() {\n         // Set the seed for the default random generator\n         randomData.reSeed(100);\n         double[] quantiles = new double[10];\n     }\n \n     @Test\n-    public void testNextBeta() throws Exception {\n+    public void testNextBeta() {\n         double[] quartiles = TestUtils.getDistributionQuartiles(new BetaDistribution(2,5));\n         long[] counts = new long[4];\n         randomData.reSeed(1000);\n     }\n \n     @Test\n-    public void testNextCauchy() throws Exception {\n+    public void testNextCauchy() {\n         double[] quartiles = TestUtils.getDistributionQuartiles(new CauchyDistribution(1.2, 2.1));\n         long[] counts = new long[4];\n         randomData.reSeed(1000);\n     }\n \n     @Test\n-    public void testNextChiSquare() throws Exception {\n+    public void testNextChiSquare() {\n         double[] quartiles = TestUtils.getDistributionQuartiles(new ChiSquaredDistribution(12));\n         long[] counts = new long[4];\n         randomData.reSeed(1000);\n     }\n \n     @Test\n-    public void testNextF() throws Exception {\n+    public void testNextF() {\n         double[] quartiles = TestUtils.getDistributionQuartiles(new FDistribution(12, 5));\n         long[] counts = new long[4];\n         randomData.reSeed(1000);\n     }\n \n     @Test\n-    public void testNextGamma() throws Exception {\n+    public void testNextGamma() {\n         double[] quartiles;\n         long[] counts;\n \n     }\n \n     @Test\n-    public void testNextT() throws Exception {\n+    public void testNextT() {\n         double[] quartiles = TestUtils.getDistributionQuartiles(new TDistribution(10));\n         long[] counts = new long[4];\n         randomData.reSeed(1000);\n     }\n \n     @Test\n-    public void testNextWeibull() throws Exception {\n+    public void testNextWeibull() {\n         double[] quartiles = TestUtils.getDistributionQuartiles(new WeibullDistribution(1.2, 2.1));\n         long[] counts = new long[4];\n         randomData.reSeed(1000);\n     }\n \n     @Test\n-    public void testNextBinomial() throws Exception {\n+    public void testNextBinomial() {\n         BinomialDistributionTest testInstance = new BinomialDistributionTest();\n         int[] densityPoints = testInstance.makeDensityTestPoints();\n         double[] densityValues = testInstance.makeDensityTestValues();\n     }\n \n     @Test\n-    public void testNextHypergeometric() throws Exception {\n+    public void testNextHypergeometric() {\n         HypergeometricDistributionTest testInstance = new HypergeometricDistributionTest();\n         int[] densityPoints = testInstance.makeDensityTestPoints();\n         double[] densityValues = testInstance.makeDensityTestValues();\n     }\n \n     @Test\n-    public void testNextPascal() throws Exception {\n+    public void testNextPascal() {\n         PascalDistributionTest testInstance = new PascalDistributionTest();\n         int[] densityPoints = testInstance.makeDensityTestPoints();\n         double[] densityValues = testInstance.makeDensityTestValues();\n     }\n \n     @Test\n-    public void testNextZipf() throws Exception {\n+    public void testNextZipf() {\n         ZipfDistributionTest testInstance = new ZipfDistributionTest();\n         int[] densityPoints = testInstance.makeDensityTestPoints();\n         double[] densityValues = testInstance.makeDensityTestValues();\n--- a/src/test/java/org/apache/commons/math3/random/RandomGeneratorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/random/RandomGeneratorAbstractTest.java\n      * other tests and the generator is not reseeded, so this is a fixed seed\n      * test.\n      */\n-    public void testNextIntDirect() throws Exception {\n+    public void testNextIntDirect() {\n         // Set up test values - end of the array filled randomly\n         int[] testValues = new int[] {4, 10, 12, 32, 100, 10000, 0, 0, 0, 0};\n         for (int i = 6; i < 10; i++) {\n     }\n \n     @Test\n-    public void testNexBytes() throws Exception {\n+    public void testNexBytes() {\n         long[] count = new long[256];\n         byte[] bytes = new byte[10];\n         double[] expected = new double[256];\n     }\n \n     @Test\n-    public void testSeeding() throws Exception {\n+    public void testSeeding() {\n         // makeGenerator initializes with fixed seed\n         RandomGenerator gen = makeGenerator();\n         RandomGenerator gen1 = makeGenerator();\n         checkSameSequence(gen, gen1);\n     }\n \n-    private void checkSameSequence(RandomGenerator gen1, RandomGenerator gen2) throws Exception {\n+    private void checkSameSequence(RandomGenerator gen1, RandomGenerator gen2) {\n         final int len = 11;  // Needs to be an odd number to check MATH-723\n         final double[][] values = new double[2][len];\n         for (int i = 0; i < len; i++) {", "timestamp": 1342831369, "metainfo": ""}