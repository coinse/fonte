{"sha": "efcf91bce70116ab1f628dee5c9ed1c2f18d2db9", "log": "In classes o.a.c.m3.special.Gamma and o.a.c.m3.special.Beta, made some auxiliary functions package private. It is very unlikely that these functions should be used outside this package, and if necessary, it will always be possible to increase their visibility (while the reverse would break compatibility).   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/special/Beta.java\n+++ b/src/main/java/org/apache/commons/math3/special/Beta.java\n      * @return the value of {@code Delta(p) + Delta(q) - Delta(p + q)}.\n      * @throws NumberIsTooSmallException if {@code p < 10.0} or {@code q < 10.0}.\n      */\n-    public static final double bcorr(final double p, final double q) {\n+    static final double bcorr(final double p, final double q) {\n \n         if (p < 10.0) {\n             throw new NumberIsTooSmallException(p, 10.0, true);\n--- a/src/main/java/org/apache/commons/math3/special/Gamma.java\n+++ b/src/main/java/org/apache/commons/math3/special/Gamma.java\n      * @throws OutOfRangeException if {@code a} or {@code b} is lower than\n      * {@code 1.0} or greater than {@code 2.0}.\n      */\n-    public static double logGammaSum(final double a, final double b)\n+     static double logGammaSum(final double a, final double b)\n         throws OutOfRangeException {\n \n         if ((a < 1.0) || (a > 2.0)) {\n      * @return the value of {@code log(Gamma(b) / Gamma(a + b))}.\n      * @throws NumberIsTooSmallException if {@code a < 0.0} or {@code b < 8.0}.\n      */\n-    public static final double logGammaMinusLogGammaSum(final double a,\n-                                                        final double b)\n+    static final double logGammaMinusLogGammaSum(final double a,\n+                                                 final double b)\n         throws NumberIsTooSmallException {\n \n         if (a < 0.0) {", "timestamp": 1353959707, "metainfo": ""}