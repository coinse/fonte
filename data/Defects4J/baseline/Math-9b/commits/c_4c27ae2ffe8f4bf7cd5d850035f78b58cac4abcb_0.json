{"sha": "4c27ae2ffe8f4bf7cd5d850035f78b58cac4abcb", "log": "MATH-707 Class name change:   \"BaseAbstractScalarOptimizer\" -> \"BaseAbstractMultivariateOptimizer\"   ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.optimization.direct;\n+\n+import org.apache.commons.math.util.Incrementor;\n+import org.apache.commons.math.exception.MaxCountExceededException;\n+import org.apache.commons.math.exception.TooManyEvaluationsException;\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.analysis.MultivariateFunction;\n+import org.apache.commons.math.optimization.BaseMultivariateRealOptimizer;\n+import org.apache.commons.math.optimization.GoalType;\n+import org.apache.commons.math.optimization.ConvergenceChecker;\n+import org.apache.commons.math.optimization.RealPointValuePair;\n+import org.apache.commons.math.optimization.SimpleScalarValueChecker;\n+\n+/**\n+ * Base class for implementing optimizers for multivariate scalar functions.\n+ * This base class handles the boiler-plate methods associated to thresholds\n+ * settings, iterations and evaluations counting.\n+ *\n+ * @param <FUNC> Type of the objective function to be optimized.\n+ *\n+ * @version $Id$\n+ * @since 2.2\n+ */\n+public abstract class BaseAbstractMultivariateOptimizer<FUNC extends MultivariateFunction>\n+    implements BaseMultivariateRealOptimizer<FUNC> {\n+    /** Evaluations counter. */\n+    protected final Incrementor evaluations = new Incrementor();\n+    /** Convergence checker. */\n+    private ConvergenceChecker<RealPointValuePair> checker;\n+    /** Type of optimization. */\n+    private GoalType goal;\n+    /** Initial guess. */\n+    private double[] start;\n+    /** Objective function. */\n+    private MultivariateFunction function;\n+\n+    /**\n+     * Simple constructor with default settings.\n+     * The convergence check is set to a {@link SimpleScalarValueChecker} and\n+     * the allowed number of evaluations is set to {@link Integer#MAX_VALUE}.\n+     */\n+    protected BaseAbstractMultivariateOptimizer() {\n+        this(new SimpleScalarValueChecker());\n+    }\n+    /**\n+     * @param checker Convergence checker.\n+     */\n+    protected BaseAbstractMultivariateOptimizer(ConvergenceChecker<RealPointValuePair> checker) {\n+        this.checker = checker;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public int getMaxEvaluations() {\n+        return evaluations.getMaximalCount();\n+    }\n+\n+    /** {@inheritDoc} */\n+    public int getEvaluations() {\n+        return evaluations.getCount();\n+    }\n+\n+    /** {@inheritDoc} */\n+    public ConvergenceChecker<RealPointValuePair> getConvergenceChecker() {\n+        return checker;\n+    }\n+\n+    /**\n+     * Compute the objective function value.\n+     *\n+     * @param point Point at which the objective function must be evaluated.\n+     * @return the objective function value at the specified point.\n+     * @throws TooManyEvaluationsException if the maximal number of\n+     * evaluations is exceeded.\n+     */\n+    protected double computeObjectiveValue(double[] point) {\n+        try {\n+            evaluations.incrementCount();\n+        } catch (MaxCountExceededException e) {\n+            throw new TooManyEvaluationsException(e.getMax());\n+        }\n+        return function.value(point);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealPointValuePair optimize(int maxEval, FUNC f, GoalType goalType,\n+                                       double[] startPoint) {\n+        // Checks.\n+        if (f == null) {\n+            throw new NullArgumentException();\n+        }\n+        if (goalType == null) {\n+            throw new NullArgumentException();\n+        }\n+        if (startPoint == null) {\n+            throw new NullArgumentException();\n+        }\n+\n+        // Reset.\n+        evaluations.setMaximalCount(maxEval);\n+        evaluations.resetCount();\n+\n+        // Store optimization problem characteristics.\n+        function = f;\n+        goal = goalType;\n+        start = startPoint.clone();\n+\n+        // Perform computation.\n+        return doOptimize();\n+    }\n+\n+    /**\n+     * @return the optimization type.\n+     */\n+    public GoalType getGoalType() {\n+        return goal;\n+    }\n+\n+    /**\n+     * @return the initial guess.\n+     */\n+    public double[] getStartPoint() {\n+        return start.clone();\n+    }\n+\n+    /**\n+     * Perform the bulk of the optimization algorithm.\n+     *\n+     * @return the point/value pair giving the optimal value for the\n+     * objective function.\n+     */\n+    protected abstract RealPointValuePair doOptimize();\n+}\n--- a/src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractSimpleBoundsScalarOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractSimpleBoundsScalarOptimizer.java\n  * @since 3.0\n  */\n public abstract class BaseAbstractSimpleBoundsScalarOptimizer<FUNC extends MultivariateFunction>\n-    extends BaseAbstractScalarOptimizer<FUNC>\n+    extends BaseAbstractMultivariateOptimizer<FUNC>\n     implements BaseMultivariateRealOptimizer<FUNC>,\n                BaseSimpleBoundsMultivariateRealOptimizer<FUNC> {\n     /** Lower bounds. */\n      * {@link org.apache.commons.math.optimization.SimpleScalarValueChecker} and\n      * the allowed number of evaluations is set to {@link Integer#MAX_VALUE}.\n      *\n-     * @see BaseAbstractScalarOptimizer#BaseAbstractScalarOptimizer()\n+     * @see BaseAbstractMultivariateOptimizer#BaseAbstractMultivariateOptimizer()\n      */\n     protected BaseAbstractSimpleBoundsScalarOptimizer() {}\n \n--- a/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\n  */\n \n public class CMAESOptimizer\n-    extends BaseAbstractScalarOptimizer<MultivariateFunction>\n+    extends BaseAbstractMultivariateOptimizer<MultivariateFunction>\n     implements MultivariateRealOptimizer {\n     /** Default value for {@link #checkFeasableCount}: {@value}. */\n     public static final int DEFAULT_CHECKFEASABLECOUNT = 0;\n--- a/src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java\n  * @since 2.2\n  */\n public class PowellOptimizer\n-    extends BaseAbstractScalarOptimizer<MultivariateFunction>\n+    extends BaseAbstractMultivariateOptimizer<MultivariateFunction>\n     implements MultivariateRealOptimizer {\n     /**\n      * Minimum relative tolerance.\n--- a/src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java\n  * @since 3.0\n  */\n public class SimplexOptimizer\n-    extends BaseAbstractScalarOptimizer<MultivariateFunction>\n+    extends BaseAbstractMultivariateOptimizer<MultivariateFunction>\n     implements MultivariateRealOptimizer {\n     /** Simplex. */\n     private AbstractSimplex simplex;\n--- a/src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java\n import org.apache.commons.math.optimization.GoalType;\n import org.apache.commons.math.optimization.ConvergenceChecker;\n import org.apache.commons.math.optimization.RealPointValuePair;\n-import org.apache.commons.math.optimization.direct.BaseAbstractScalarOptimizer;\n+import org.apache.commons.math.optimization.direct.BaseAbstractMultivariateOptimizer;\n \n /**\n  * Base class for implementing optimizers for multivariate scalar\n  * @since 2.0\n  */\n public abstract class AbstractScalarDifferentiableOptimizer\n-    extends BaseAbstractScalarOptimizer<DifferentiableMultivariateFunction>\n+    extends BaseAbstractMultivariateOptimizer<DifferentiableMultivariateFunction>\n     implements DifferentiableMultivariateRealOptimizer {\n     /**\n      * Objective function gradient.", "timestamp": 1323429246, "metainfo": ""}