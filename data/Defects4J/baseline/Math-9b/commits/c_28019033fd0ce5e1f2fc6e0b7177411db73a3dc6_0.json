{"sha": "28019033fd0ce5e1f2fc6e0b7177411db73a3dc6", "log": "MATH-674 Moved part of the Javadoc for the \"value\" method over to the interface section.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java\n \n /**\n  * An interface representing a univariate real function.\n+ * <br/>\n+ * When a <em>user-defined</em> function encounters an error during\n+ * evaluation, the {@link #value(double) value} method should throw a\n+ * <em>user-defined</em> unchecked exception.\n+ * <br/>\n+ * The following code excerpt shows the recommended way to do that using\n+ * a root solver as an example, but the same construct is applicable to\n+ * ODE integrators or optimizers.\n+ *\n+ * <pre>\n+ * private static class LocalException extends RuntimeException {\n+ *     // The x value that caused the problem.\n+ *     private final double x;\n+ *\n+ *     public LocalException(double x) {\n+ *         this.x = x;\n+ *     }\n+ *\n+ *     public double getX() {\n+ *         return x;\n+ *     }\n+ * }\n+ *\n+ * private static class MyFunction implements UnivariateRealFunction {\n+ *     public double value(double x) {\n+ *         double y = hugeFormula(x);\n+ *         if (somethingBadHappens) {\n+ *           throw new LocalException(x);\n+ *         }\n+ *         return y;\n+ *     }\n+ * }\n+ *\n+ * public void compute() {\n+ *     try {\n+ *         solver.solve(maxEval, new MyFunction(a, b, c), min, max);\n+ *     } catch (LocalException le) {\n+ *         // Retrieve the x value.\n+ *     }\n+ * }\n+ * </pre>\n+ *\n+ * As shown, the exception is local to the user's code and it is guaranteed\n+ * that Apache Commons Math will not catch it.\n  *\n  * @version $Id$\n  */\n     /**\n      * Compute the value of the function.\n      *\n-     * <p>\n-     * For user-defined functions, when the method encounters an error\n-     * during evaluation, users must use their <em>own</em> unchecked exceptions.\n-     * The following example shows the recommended way to do that, using root\n-     * solving as the example (the same construct should be used for ODE\n-     * integrators or for optimizations).\n-     * </p>\n-     * <pre>\n-     * private static class LocalException extends RuntimeException {\n-     *\n-     *   // the x value that caused the problem\n-     *   private final double x;\n-     *\n-     *   public LocalException(double x) {\n-     *     this.x = x;\n-     *   }\n-     *\n-     *   public double getX() {\n-     *     return x;\n-     *   }\n-     *\n-     * }\n-     *\n-     * private static class MyFunction implements UnivariateRealFunction {\n-     *   public double value(double x) {\n-     *     double y = hugeFormula(x);\n-     *     if (somethingBadHappens) {\n-     *       throw new LocalException(x);\n-     *     }\n-     *     return y;\n-     *   }\n-     * }\n-     *\n-     * public void compute() {\n-     *   try {\n-     *     solver.solve(maxEval, new MyFunction(a, b, c), min, max);\n-     *   } catch (LocalException le) {\n-     *     // retrieve the x value\n-     *   }\n-     * }\n-     * </pre>\n-     *\n-     * <p>\n-     * As shown in this example the exception is really something local to user code\n-     * and there is a guarantee Apache Commons Math will not mess with it. The user is safe.\n-     * </p>\n      * @param x Point at which the function value should be computed.\n-     * @return the value.\n+     * @return the value of the function.\n      * @throws IllegalArgumentException when the activated method itself can\n-     * ascertain that preconditions, specified in the API expressed at the\n-     * level of the activated method, have been violated.  In the vast\n-     * majority of cases where Commons-Math throws IllegalArgumentException,\n-     * it is the result of argument checking of actual parameters immediately\n-     * passed to a method.\n+     * ascertain that a precondition, specified in the API expressed at the\n+     * level of the activated method, has been violated.\n+     * When Commons Math throws an {@code IllegalArgumentException}, it is\n+     * usually the consequence of checking the actual parameters passed to\n+     * the method.\n      */\n     double value(double x);\n }", "timestamp": 1316987053, "metainfo": ""}