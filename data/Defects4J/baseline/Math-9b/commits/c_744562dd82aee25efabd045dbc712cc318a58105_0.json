{"sha": "744562dd82aee25efabd045dbc712cc318a58105", "log": "removed serialVersionUID for non-serializable classes.  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java\n       // theoretical solution: y[0] = cos(t), y[1] = sin(t)\n       FirstOrderDifferentialEquations problem =\n           new FirstOrderDifferentialEquations() {\n-              private static final long serialVersionUID = 2472449657345878299L;\n               public void computeDerivatives(double t, double[] y, double[] dot)\n                   throws MathUserException {\n                   dot[0] = -y[1];\n--- a/src/test/java/org/apache/commons/math/ode/TestProblem1.java\n+++ b/src/test/java/org/apache/commons/math/ode/TestProblem1.java\n  */\n public class TestProblem1\n   extends TestProblemAbstract {\n-\n-  /** Serializable version identifier. */\n-  private static final long serialVersionUID = 1977870815289373164L;\n \n   /** theoretical state */\n   private double[] y;\n--- a/src/test/java/org/apache/commons/math/ode/TestProblem2.java\n+++ b/src/test/java/org/apache/commons/math/ode/TestProblem2.java\n  */\n public class TestProblem2\n   extends TestProblemAbstract {\n-\n-  /** Serializable version identifier. */\n-  private static final long serialVersionUID = 8330741783213512366L;\n \n   /** theoretical state */\n   private double[] y;\n--- a/src/test/java/org/apache/commons/math/ode/TestProblem3.java\n+++ b/src/test/java/org/apache/commons/math/ode/TestProblem3.java\n  */\n public class TestProblem3\n   extends TestProblemAbstract {\n-\n-  /** Serializable version identifier. */\n-  private static final long serialVersionUID = 8567328542728919999L;\n \n   /** Eccentricity */\n   double e;\n--- a/src/test/java/org/apache/commons/math/ode/TestProblem4.java\n+++ b/src/test/java/org/apache/commons/math/ode/TestProblem4.java\n  */\n public class TestProblem4\n   extends TestProblemAbstract {\n-\n-  /** Serializable version identifier. */\n-  private static final long serialVersionUID = -5910438521889015745L;\n \n   /** Time offset. */\n   private double a;\n \n   private static class Bounce implements EventHandler {\n \n-    private static final long serialVersionUID = 1356097180027801200L;\n     private int sign;\n \n     public Bounce() {\n \n   private static class Stop implements EventHandler {\n \n-    private static final long serialVersionUID = 6975050568227951931L;\n-\n     public Stop() {\n     }\n \n--- a/src/test/java/org/apache/commons/math/ode/TestProblem5.java\n+++ b/src/test/java/org/apache/commons/math/ode/TestProblem5.java\n public class TestProblem5\n   extends TestProblem1 {\n \n-  /** Serializable version identifier. */\n-  private static final long serialVersionUID = 7579233102411804237L;\n-\n   /**\n    * Simple constructor.\n    */\n--- a/src/test/java/org/apache/commons/math/ode/TestProblem6.java\n+++ b/src/test/java/org/apache/commons/math/ode/TestProblem6.java\n  */\n public class TestProblem6\n   extends TestProblemAbstract {\n-\n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = 1353409119804352378L;\n \n     /** theoretical state */\n     private double[] y;\n--- a/src/test/java/org/apache/commons/math/ode/TestProblemAbstract.java\n+++ b/src/test/java/org/apache/commons/math/ode/TestProblemAbstract.java\n  */\n public abstract class TestProblemAbstract\n   implements FirstOrderDifferentialEquations {\n-\n-  /** Serializable version identifier. */\n-  private static final long serialVersionUID = -8521928974502839379L;\n \n   /** Dimension of the problem. */\n   protected int n;\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java\n           }\n       });\n       integ.integrate(new FirstOrderDifferentialEquations() {\n-          private static final long serialVersionUID = 0L;\n           public void computeDerivatives(double t, double[] y, double[] dot) {\n               dot[0] = 1.0;\n           }\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java\n         }\n       });\n       integ.integrate(new FirstOrderDifferentialEquations() {\n-                          private static final long serialVersionUID = 0L;\n                           public void computeDerivatives(double t, double[] y, double[] dot) {\n                               dot[0] = 1.0;\n                           }\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java\n           }\n       });\n       integ.integrate(new FirstOrderDifferentialEquations() {\n-          private static final long serialVersionUID = 0L;\n           public void computeDerivatives(double t, double[] y, double[] dot) {\n               dot[0] = 1.0;\n           }\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java\n           new HighamHall54Integrator(0.0, 1.0, 1.0e-10, 1.0e-10);\n       FirstOrderDifferentialEquations equations =\n           new FirstOrderDifferentialEquations() {\n-            private static final long serialVersionUID = -1157081786301178032L;\n             public void computeDerivatives(double t, double[] y, double[] dot)\n             throws MathUserException {\n             if (t < -0.5) {\n         }\n         public void resetState(double t, double[] y) {\n         }\n-        private static final long serialVersionUID = 935652725339916361L;\n       }, Double.POSITIVE_INFINITY, 1.0e-8 * maxStep, 1000);\n \n       try {\n       }\n       public void resetState(double t, double[] y) {\n       }\n-      private static final long serialVersionUID = 935652725339916361L;\n     }, Double.POSITIVE_INFINITY, 1.0e-8 * maxStep, 3);\n \n     try {\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java\n           }\n       });\n       integ.integrate(new FirstOrderDifferentialEquations() {\n-          private static final long serialVersionUID = 0L;\n           public void computeDerivatives(double t, double[] y, double[] dot) {\n               dot[0] = 1.0;\n           }\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/StepProblem.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/StepProblem.java\n   private double rateAfter;\n   private double switchTime;\n \n-  private static final long serialVersionUID = 7590601995477504318L;\n-\n }\n--- a/src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java\n     setLastSeen(false);\n     integ.addStepHandler(new StepNormalizer(range / 10.0,\n                                        new FixedStepHandler() {\n-                                        private static final long serialVersionUID = 1650337364641626444L;\n                                         private boolean firstCall = true;\n                                          public void handleStep(double t,\n                                                                 double[] y,\n     setLastSeen(false);\n     integ.addStepHandler(new StepNormalizer(range / 10.5,\n                                        new FixedStepHandler() {\n-                                        private static final long serialVersionUID = 2228457391561277298L;\n                                         public void handleStep(double t,\n                                                                 double[] y,\n                                                                 double[] yDot,\n--- a/src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java\n package org.apache.commons.math.optimization;\n \n \n-import java.io.Serializable;\n-\n-import org.apache.commons.math.exception.MathUserException;\n-import org.apache.commons.math.exception.MathIllegalStateException;\n import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;\n import org.apache.commons.math.analysis.MultivariateMatrixFunction;\n+import org.apache.commons.math.exception.MathIllegalStateException;\n+import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.linear.BlockRealMatrix;\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.optimization.general.GaussNewtonOptimizer;\n             }, new double[] { 2 }, new double[] { 1 }, new double[] { 0 });\n     }\n \n-    private static class LinearProblem implements DifferentiableMultivariateVectorialFunction, Serializable {\n+    private static class LinearProblem implements DifferentiableMultivariateVectorialFunction {\n \n-        private static final long serialVersionUID = -8804268799379350190L;\n         final RealMatrix factors;\n         final double[] target;\n         public LinearProblem(double[][] factors, double[] target) {\n \n         public MultivariateMatrixFunction jacobian() {\n             return new MultivariateMatrixFunction() {\n-                private static final long serialVersionUID = -8387467946663627585L;\n                 public double[][] value(double[] point) {\n                     return factors.getData();\n                 }\n--- a/src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java\n         final double valueXpYm = -0.7290400707055187115322; // global minimum\n         final double valueXpYp = -valueXpYm;                // global maximum\n         MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {\n-                private static final long serialVersionUID = -7039124064449091152L;\n                 public double value(double[] variables) {\n                     final double x = variables[0];\n                     final double y = variables[1];\n     public void testRosenbrock() {\n         MultivariateRealFunction rosenbrock =\n             new MultivariateRealFunction() {\n-                private static final long serialVersionUID = -9044950469615237490L;\n                 public double value(double[] x) {\n                     ++count;\n                     double a = x[1] - x[0] * x[0];\n     public void testPowell() {\n         MultivariateRealFunction powell =\n             new MultivariateRealFunction() {\n-                private static final long serialVersionUID = -832162886102041840L;\n                 public double value(double[] x) {\n                     ++count;\n                     double a = x[0] + 10 * x[1];\n--- a/src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java\n         final double valueXpYm = -0.7290400707055187115322; // global minimum\n         final double valueXpYp = -valueXpYm;                // global maximum\n         MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {\n-                private static final long serialVersionUID = -7039124064449091152L;\n                 public double value(double[] variables) {\n                     final double x = variables[0];\n                     final double y = variables[1];\n--- a/src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java\n+++ b/src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java\n \n     public MultivariateVectorialFunction gradient() {\n         return new MultivariateVectorialFunction() {\n-            private static final long serialVersionUID = 3174909643301201710L;\n             public double[] value(double[] point) {\n                 return gradient(point);\n             }\n \n     public MultivariateRealFunction partialDerivative(final int k) {\n         return new MultivariateRealFunction() {\n-            private static final long serialVersionUID = 3073956364104833888L;\n             public double value(double[] point) {\n                 return gradient(point)[k];\n             }\n--- a/src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java\n+++ b/src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java\n \n     public MultivariateMatrixFunction jacobian() {\n         return new MultivariateMatrixFunction() {\n-            private static final long serialVersionUID = -4340046230875165095L;\n             public double[][] value(double[] point) {\n                 return jacobian(point);\n             }\n--- a/src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java\n \n         public MultivariateMatrixFunction jacobian() {\n             return new MultivariateMatrixFunction() {\n-                private static final long serialVersionUID = -8387467946663627585L;\n                 public double[][] value(double[] point) {\n                     return factors.getData();\n                 }\n--- a/src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java\n \n         public MultivariateMatrixFunction jacobian() {\n             return new MultivariateMatrixFunction() {\n-                private static final long serialVersionUID = 556396458721526234L;\n                 public double[][] value(double[] point) {\n                     return factors.getData();\n                 }\n \n         public MultivariateMatrixFunction jacobian() {\n             return new MultivariateMatrixFunction() {\n-                private static final long serialVersionUID = -8673650298627399464L;\n                 public double[][] value(double[] point) {\n                     return jacobian(point);\n                 }\n--- a/src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java\n \n       public MultivariateMatrixFunction jacobian() {\n           return new MultivariateMatrixFunction() {\n-            private static final long serialVersionUID = -2435076097232923678L;\n             public double[][] value(double[] point) {\n                   return jacobian(point);\n               }\n--- a/src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java\n \n         public MultivariateVectorialFunction gradient() {\n             return new MultivariateVectorialFunction() {\n-                private static final long serialVersionUID = 2621997811350805819L;\n                 public double[] value(double[] point) {\n                     return gradient(point);\n                 }\n \n         public MultivariateRealFunction partialDerivative(final int k) {\n             return new MultivariateRealFunction() {\n-                private static final long serialVersionUID = -6186178619133562011L;\n                 public double value(double[] point) {\n                     return gradient(point)[k];\n                 }", "timestamp": 1309512835, "metainfo": ""}