{"sha": "c0e9a7806e6080ed33c03ea833b81d69f6bd817d", "log": "MATH-849: new unit test showing the relative accuracy of Gamma.logGamma(double).   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/special/GammaTest.java\n+++ b/src/test/java/org/apache/commons/math3/special/GammaTest.java\n         }\n     }\n \n+    /**\n+     * Reference data for the {@link Gamma#logGamma(double)} function. This data\n+     * was generated with the following <a\n+     * href=\"http://maxima.sourceforge.net/\">Maxima</a> script.\n+     *\n+     * <pre>\n+     * kill(all);\n+     *\n+     * fpprec : 64;\n+     * gamln(x) := log(gamma(x));\n+     * x : append(makelist(bfloat(i / 8), i, 1, 80),\n+     *     [0.8b0, 1b2, 1b3, 1b4, 1b5, 1b6, 1b7, 1b8, 1b9, 1b10]);\n+     *\n+     * for i : 1 while i <= length(x) do\n+     *     print(\"{\", float(x[i]), \",\", float(gamln(x[i])), \"},\");\n+     * </pre>\n+     */\n+    private static final double[][] LOG_GAMMA_REF = {\n+        { 0.125 , 2.019418357553796 },\n+        { 0.25 , 1.288022524698077 },\n+        { 0.375 , .8630739822706475 },\n+        { 0.5 , .5723649429247001 },\n+        { 0.625 , .3608294954889402 },\n+        { 0.75 , .2032809514312954 },\n+        { 0.875 , .08585870722533433 },\n+        { 1.0 , 0.0 },\n+        { 1.125 , - .06002318412603958 },\n+        { 1.25 , - .09827183642181316 },\n+        { 1.375 , - .1177552707410788 },\n+        { 1.5 , - .1207822376352452 },\n+        { 1.625 , - .1091741337567954 },\n+        { 1.75 , - .08440112102048555 },\n+        { 1.875 , - 0.0476726853991883 },\n+        { 2.0 , 0.0 },\n+        { 2.125 , .05775985153034387 },\n+        { 2.25 , .1248717148923966 },\n+        { 2.375 , .2006984603774558 },\n+        { 2.5 , .2846828704729192 },\n+        { 2.625 , .3763336820249054 },\n+        { 2.75 , .4752146669149371 },\n+        { 2.875 , .5809359740231859 },\n+        { 3.0 , .6931471805599453 },\n+        { 3.125 , 0.811531653906724 },\n+        { 3.25 , .9358019311087253 },\n+        { 3.375 , 1.06569589786406 },\n+        { 3.5 , 1.200973602347074 },\n+        { 3.625 , 1.341414578068493 },\n+        { 3.75 , 1.486815578593417 },\n+        { 3.875 , 1.6369886482725 },\n+        { 4.0 , 1.791759469228055 },\n+        { 4.125 , 1.950965937095089 },\n+        { 4.25 , 2.114456927450371 },\n+        { 4.375 , 2.282091222188554 },\n+        { 4.5 , 2.453736570842442 },\n+        { 4.625 , 2.62926886637513 },\n+        { 4.75 , 2.808571418575736 },\n+        { 4.875 , 2.99153431107781 },\n+        { 5.0 , 3.178053830347946 },\n+        { 5.125 , 3.368031956881733 },\n+        { 5.25 , 3.561375910386697 },\n+        { 5.375 , 3.757997741998131 },\n+        { 5.5 , 3.957813967618717 },\n+        { 5.625 , 4.160745237339519 },\n+        { 5.75 , 4.366716036622286 },\n+        { 5.875 , 4.57565441552762 },\n+        { 6.0 , 4.787491742782046 },\n+        { 6.125 , 5.002162481906205 },\n+        { 6.25 , 5.219603986990229 },\n+        { 6.375 , 5.439756316011858 },\n+        { 6.5 , 5.662562059857142 },\n+        { 6.625 , 5.887966185430003 },\n+        { 6.75 , 6.115915891431546 },\n+        { 6.875 , 6.346360475557843 },\n+        { 7.0 , 6.579251212010101 },\n+        { 7.125 , 6.814541238336996 },\n+        { 7.25 , 7.05218545073854 },\n+        { 7.375 , 7.292140407056348 },\n+        { 7.5 , 7.534364236758733 },\n+        { 7.625 , 7.778816557302289 },\n+        { 7.75 , 8.025458396315983 },\n+        { 7.875 , 8.274252119110479 },\n+        { 8.0 , 8.525161361065415 },\n+        { 8.125 , 8.77815096449171 },\n+        { 8.25 , 9.033186919605123 },\n+        { 8.375 , 9.290236309282232 },\n+        { 8.5 , 9.549267257300997 },\n+        { 8.625 , 9.810248879795765 },\n+        { 8.75 , 10.07315123968124 },\n+        { 8.875 , 10.33794530382217 },\n+        { 9.0 , 10.60460290274525 },\n+        { 9.125 , 10.87309669270751 },\n+        { 9.25 , 11.14340011995171 },\n+        { 9.375 , 11.41548738699336 },\n+        { 9.5 , 11.68933342079727 },\n+        { 9.625 , 11.96491384271319 },\n+        { 9.75 , 12.24220494005076 },\n+        { 9.875 , 12.52118363918365 },\n+        { 10.0 , 12.80182748008147 },\n+        { 0.8 , .1520596783998376 },\n+        { 100.0 , 359.1342053695754 },\n+        { 1000.0 , 5905.220423209181 },\n+        { 10000.0 , 82099.71749644238 },\n+        { 100000.0 , 1051287.708973657 },\n+        { 1000000.0 , 1.2815504569147612e+7 },\n+        { 10000000.0 , 1.511809493694739e+8 },\n+        { 1.e+8 , 1.7420680661038346e+9 },\n+        { 1.e+9 , 1.972326582750371e+10 },\n+        { 1.e+10 , 2.202585092888106e+11 },\n+    };\n+\n+    @Test\n+    public void testLogGamma() {\n+        final int ulps = 130;\n+        for (int i = 0; i < LOG_GAMMA_REF.length; i++) {\n+            final double[] data = LOG_GAMMA_REF[i];\n+            final double x = data[0];\n+            final double expected = data[1];\n+            final double actual = Gamma.logGamma(x);\n+            final double tol;\n+            if (expected == 0.0) {\n+                tol = 1E-15;\n+            } else {\n+                tol = ulps * FastMath.ulp(expected);\n+            }\n+            Assert.assertEquals(Double.toString(x), expected, actual, tol);\n+        }\n+    }\n+\n     private void checkRelativeError(String msg, double expected, double actual, double tolerance) {\n         Assert.assertEquals(msg, expected, actual, FastMath.abs(tolerance * actual));\n     }", "timestamp": 1345434058, "metainfo": ""}