{"sha": "a3022f3b4abd2ce339fb74d9f07b2706aa887244", "log": "improved javadoc  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java\n+++ b/src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java\n import java.util.Arrays;\n \n /**\n- * Class transforming a symmetrical matrix to tri-diagonal shape.\n+ * Class transforming a symmetrical matrix to tridiagonal shape.\n  * <p>A symmetrical m &times; m matrix A can be written as the product of three matrices:\n  * A = Q &times; T &times; Q<sup>T</sup> with Q an orthogonal matrix and T a symmetrical\n- * tri-diagonal matrix. Both Q and T are m &times; m matrices.</p>\n- * <p>Transformation to tri-diagonal shape is often not a goal by itself, but it is\n+ * tridiagonal matrix. Both Q and T are m &times; m matrices.</p>\n+ * <p>This implementation only uses the upper part of the matrix, the part below the\n+ * diagonal is not accessed at all.</p>\n+ * <p>Transformation to tridiagonal shape is often not a goal by itself, but it is\n  * an intermediate step in more general decomposition algorithms like {@link\n- * EigenValuesDecomposition Eigen Values Decomposition}. This class is therefore\n- * intended for internal use by the library and is not public. As a consequence of\n- * this explicitly limited scope, many methods directly returns references to\n- * internal arrays, not copies.</p>\n+ * EigenDecomposition eigen decomposition}. This class is therefore intended for internal\n+ * use by the library and is not public. As a consequence of this explicitly limited scope,\n+ * many methods directly returns references to internal arrays, not copies.</p>\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n     private RealMatrix cachedT;\n \n     /**\n-     * Build the transformation to tri-diagonal shape of a symmetrical matrix.\n+     * Build the transformation to tridiagonal shape of a symmetrical matrix.\n      * <p>The specified matrix is assumed to be symmetrical without any check.\n      * Only the upper triangular part of the matrix is used.</p>\n      * @param matrix the symmetrical matrix to transform.\n     public TriDiagonalTransformer(RealMatrix matrix)\n         throws InvalidMatrixException {\n         if (!matrix.isSquare()) {\n-            throw new InvalidMatrixException(\"transformation to tri-diagonal requires that the matrix be square\");\n+            throw new InvalidMatrixException(\"transformation to tridiagonal requires that the matrix be square\");\n         }\n \n         final int m = matrix.getRowDimension();\n     }\n \n     /**\n-     * Returns the tri-diagonal matrix T of the transform. \n+     * Returns the tridiagonal matrix T of the transform. \n      * @return the T matrix\n      */\n     public RealMatrix getT() {\n     }\n \n     /**\n-     * Transform original matrix to tri-diagonal form.\n+     * Transform original matrix to tridiagonal form.\n      * <p>Transformation is done using Householder transforms.</p>\n      */\n     private void transform() {", "timestamp": 1223220980, "metainfo": ""}