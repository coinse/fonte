{"sha": "765a55635703ee2c41cd2a0ac6f75d3446fcff4a", "log": "Tidy throws clauses  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java\n \n import java.util.Random;\n \n-import org.apache.commons.math.MathException;\n import org.apache.commons.math.analysis.QuinticFunction;\n import org.apache.commons.math.analysis.SinFunction;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n public class LegendreGaussIntegratorTest {\n \n     @Test\n-    public void testSinFunction() throws MathException {\n+    public void testSinFunction() {\n         UnivariateRealFunction f = new SinFunction();\n         UnivariateRealIntegratorImpl integrator = new LegendreGaussIntegrator(5, 1.0e-14, 1.0e-10, 2, 15);\n         double min, max, expected, result, tolerance;\n     }\n \n     @Test\n-    public void testQuinticFunction() throws MathException {\n+    public void testQuinticFunction() {\n         UnivariateRealFunction f = new QuinticFunction();\n         UnivariateRealIntegrator integrator =\n                 new LegendreGaussIntegrator(3,\n--- a/src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java\n  */\n package org.apache.commons.math.analysis.integration;\n \n-import org.apache.commons.math.MathException;\n import org.apache.commons.math.analysis.QuinticFunction;\n import org.apache.commons.math.analysis.SinFunction;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n      * Test of integrator for the sine function.\n      */\n     @Test\n-    public void testSinFunction() throws MathException {\n+    public void testSinFunction() {\n         UnivariateRealFunction f = new SinFunction();\n         UnivariateRealIntegrator integrator = new RombergIntegrator();\n         double min, max, expected, result, tolerance;\n      * Test of integrator for the quintic function.\n      */\n     @Test\n-    public void testQuinticFunction() throws MathException {\n+    public void testQuinticFunction() {\n         UnivariateRealFunction f = new QuinticFunction();\n         UnivariateRealIntegrator integrator = new RombergIntegrator();\n         double min, max, expected, result, tolerance;\n--- a/src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java\n  */\n package org.apache.commons.math.analysis.integration;\n \n-import org.apache.commons.math.MathException;\n import org.apache.commons.math.analysis.QuinticFunction;\n import org.apache.commons.math.analysis.SinFunction;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n      * Test of integrator for the sine function.\n      */\n     @Test\n-    public void testSinFunction() throws MathException {\n+    public void testSinFunction() {\n         UnivariateRealFunction f = new SinFunction();\n         UnivariateRealIntegrator integrator = new SimpsonIntegrator();\n         double min, max, expected, result, tolerance;\n      * Test of integrator for the quintic function.\n      */\n     @Test\n-    public void testQuinticFunction() throws MathException {\n+    public void testQuinticFunction() {\n         UnivariateRealFunction f = new QuinticFunction();\n         UnivariateRealIntegrator integrator = new SimpsonIntegrator();\n         double min, max, expected, result, tolerance;\n--- a/src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java\n  */\n package org.apache.commons.math.analysis.integration;\n \n-import org.apache.commons.math.MathException;\n import org.apache.commons.math.analysis.QuinticFunction;\n import org.apache.commons.math.analysis.SinFunction;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n      * Test of integrator for the sine function.\n      */\n     @Test\n-    public void testSinFunction() throws MathException {\n+    public void testSinFunction() {\n         UnivariateRealFunction f = new SinFunction();\n         UnivariateRealIntegrator integrator = new TrapezoidIntegrator();\n         double min, max, expected, result, tolerance;\n      * Test of integrator for the quintic function.\n      */\n     @Test\n-    public void testQuinticFunction() throws MathException {\n+    public void testQuinticFunction() {\n         UnivariateRealFunction f = new QuinticFunction();\n         UnivariateRealIntegrator integrator = new TrapezoidIntegrator();\n         double min, max, expected, result, tolerance;\n--- a/src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java\n  */\n package org.apache.commons.math.distribution;\n \n-import org.apache.commons.math.MathException;\n import org.junit.Assert;\n import org.junit.Test;\n \n public class BetaDistributionTest {\n     @Test\n-    public void testCumulative() throws MathException {\n+    public void testCumulative() {\n         double[] x = new double[]{-0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1};\n         // all test data computed using R 2.5\n         checkCumulative(0.1, 0.1,\n \n     }\n \n-    private void checkCumulative(double alpha, double beta, double[] x, double[] cumes) throws MathException {\n+    private void checkCumulative(double alpha, double beta, double[] x, double[] cumes) {\n         BetaDistribution d = new BetaDistributionImpl(alpha, beta);\n         for (int i = 0; i < x.length; i++) {\n             Assert.assertEquals(cumes[i], d.cumulativeProbability(x[i]), 1e-8);\n--- a/src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java\n \n package org.apache.commons.math.distribution;\n \n-import org.apache.commons.math.MathException;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n import org.junit.Assert;\n import org.junit.Test;\n    }\n \n     @Test\n-    public void testMath280() throws MathException {\n+    public void testMath280() {\n         NormalDistribution normal = new NormalDistributionImpl(0,1);\n         double result = normal.inverseCumulativeProbability(0.9986501019683698);\n         Assert.assertEquals(3.0, result, defaultTolerance);\n--- a/src/test/java/org/apache/commons/math/distribution/TDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/TDistributionTest.java\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n import org.junit.Assert;\n import org.junit.Test;\n-import org.apache.commons.math.MathException;\n import org.apache.commons.math.TestUtils;\n /**\n  * Test cases for TDistribution.\n      * Have chosen problevels from 0.10 to 0.001\n      */\n     @Test\n-    public void nistData() throws MathException{\n+    public void nistData(){\n         double[] prob = new double[]{ 0.10,0.05,0.025,0.01,0.005,0.001};\n         double[] args2 = new double[]{1.886,2.920,4.303,6.965,9.925,22.327};\n         double[] args10 = new double[]{1.372,1.812,2.228,2.764,3.169,4.143};\n         TestUtils.assertEquals(prob, makeNistResults(args100, 100), 1.0e-4);\n         return;\n     }\n-    private double[] makeNistResults(double[] args, int df) throws MathException{\n+    private double[] makeNistResults(double[] args, int df){\n         TDistribution td =  new TDistributionImpl(df);\n         double[] res  = new double[ args.length ];\n         for( int i = 0 ; i < res.length ; i++){\n--- a/src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java\n+++ b/src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java\n import java.math.BigDecimal;\n import java.math.BigInteger;\n import java.text.NumberFormat;\n-import java.text.ParseException;\n import java.util.Locale;\n \n import org.apache.commons.math.exception.MathParseException;\n     }\n \n     @Test\n-    public void testParseBig() throws ParseException {\n+    public void testParseBig() {\n         BigFraction f1 =\n             improperFormat.parse(\"167213075789791382630275400487886041651764456874403\" +\n                                  \" / \" +\n--- a/src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java\n \n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.stat.correlation.PearsonsCorrelation;\n-import org.apache.commons.math.MathException;\n import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.util.FastMath;\n import org.junit.Test;\n     }\n \n     @Test\n-    public void testFilippelli() throws MathException {\n+    public void testFilippelli() {\n         double[] data = new double[]{\n             0.8116, -6.860120914,\n             0.9072, -4.324130045,\n     }\n \n     @Test\n-    public void testWampler1() throws MathException {\n+    public void testWampler1() {\n         double[] data = new double[]{\n             1, 0,\n             6, 1,\n     }\n \n     @Test\n-    public void testWampler2() throws MathException {\n+    public void testWampler2() {\n         double[] data = new double[]{\n             1.00000, 0,\n             1.11111, 1,\n     }\n \n     @Test\n-    public void testWampler3() throws MathException {\n+    public void testWampler3() {\n         double[] data = new double[]{\n             760, 0,\n             -2042, 1,\n     }\n \n     //@Test\n-    public void testWampler4() throws MathException {\n+    public void testWampler4() {\n         double[] data = new double[]{\n             75901, 0,\n             -204794, 1,\n //    }\n \n     @Test\n-    public void testOneRedundantColumn() throws MathException {\n+    public void testOneRedundantColumn() {\n         MillerUpdatingRegression instance = new MillerUpdatingRegression(4, false);\n         MillerUpdatingRegression instance2 = new MillerUpdatingRegression(5, false);\n         double[][] x = new double[airdata[0].length][];\n     }\n \n     @Test\n-    public void testThreeRedundantColumn() throws MathException {\n+    public void testThreeRedundantColumn() {\n \n         MillerUpdatingRegression instance = new MillerUpdatingRegression(4, false);\n         MillerUpdatingRegression instance2 = new MillerUpdatingRegression(7, false);\n     \n     \n     @Test\n-    public void testSubsetRegression() throws MathException {\n+    public void testSubsetRegression() {\n         \n         MillerUpdatingRegression instance = new MillerUpdatingRegression(3, true);\n         MillerUpdatingRegression redRegression = new MillerUpdatingRegression(2, true);", "timestamp": 1320401595, "metainfo": ""}