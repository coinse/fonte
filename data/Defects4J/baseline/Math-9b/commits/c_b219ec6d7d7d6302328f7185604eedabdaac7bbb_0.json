{"sha": "b219ec6d7d7d6302328f7185604eedabdaac7bbb", "log": "removed spurious exception in optimization  ", "commit": "\n--- a/src/java/org/apache/commons/math/FunctionEvaluationException.java\n+++ b/src/java/org/apache/commons/math/FunctionEvaluationException.java\n  */\n package org.apache.commons.math;\n \n+import org.apache.commons.math.linear.RealVectorImpl;\n+\n /**\n  * Exception thrown when an error occurs evaluating a function.\n  * <p>\n public class FunctionEvaluationException extends MathException  {\n     \n     /** Serializable version identifier. */\n-    private static final long serialVersionUID = -7267500407292949362L;\n+    private static final long serialVersionUID = -4305020489115478365L;\n \n     /** Argument causing function evaluation failure */\n-    private double argument = Double.NaN;\n+    private double[] argument;\n     \n     /**\n      * Construct an exception indicating the argument value\n      * @param argument  the failing function argument \n      */\n     public FunctionEvaluationException(double argument) {\n-        super(\"Evaluation failed for argument = {0}\", Double.valueOf(argument));\n-        this.argument = argument;\n+        super(\"evaluation failed for argument = {0}\", argument);\n+        this.argument = new double[] { argument };\n+    }\n+    \n+    /**\n+     * Construct an exception indicating the argument value\n+     * that caused the function evaluation to fail.\n+     * \n+     * @param argument  the failing function argument \n+     * @since 2.0\n+     */\n+    public FunctionEvaluationException(double[] argument) {\n+        super(\"evaluation failed for argument = {0}\", new RealVectorImpl(argument));\n+        this.argument = argument.clone();\n     }\n     \n     /**\n     public FunctionEvaluationException(double argument,\n                                        String pattern, Object ... arguments) {\n         super(pattern, arguments);\n-        this.argument = argument;\n+        this.argument = new double[] { argument };\n+    }\n+\n+    /**\n+     * Constructs an exception with specified formatted detail message.\n+     * Message formatting is delegated to {@link java.text.MessageFormat}.\n+     * @param argument  the failing function argument \n+     * @param pattern format specifier\n+     * @param arguments format arguments\n+     * @since 2.0\n+     */\n+    public FunctionEvaluationException(double[] argument,\n+                                       String pattern, Object ... arguments) {\n+        super(pattern, arguments);\n+        this.argument = argument.clone();\n     }\n \n     /**\n      */\n     public FunctionEvaluationException(Throwable cause, double argument) {\n         super(cause);\n-        this.argument = argument;\n+        this.argument = new double[] { argument };\n+    }\n+\n+    /**\n+     * Constructs an exception with specified root cause.\n+     * Message formatting is delegated to {@link java.text.MessageFormat}.\n+     * @param cause  the exception or error that caused this exception to be thrown\n+     * @param argument  the failing function argument \n+     * @since 2.0\n+     */\n+    public FunctionEvaluationException(Throwable cause, double[] argument) {\n+        super(cause);\n+        this.argument = argument.clone();\n     }\n \n     /**\n                                        double argument, String pattern,\n                                        Object ... arguments) {\n         super(cause, pattern, arguments);\n-        this.argument = argument;\n+        this.argument = new double[] { argument };\n+    }\n+\n+    /**\n+     * Constructs an exception with specified formatted detail message and root cause.\n+     * Message formatting is delegated to {@link java.text.MessageFormat}.\n+     * @param cause  the exception or error that caused this exception to be thrown\n+     * @param argument  the failing function argument \n+     * @param pattern format specifier\n+     * @param arguments format arguments\n+     * @since 2.0\n+     */\n+    public FunctionEvaluationException(Throwable cause,\n+                                       double[] argument, String pattern,\n+                                       Object ... arguments) {\n+        super(cause, pattern, arguments);\n+        this.argument = argument.clone();\n     }\n \n     /**\n      * \n      * @return  argument that caused function evaluation to fail\n      */\n-    public double getArgument() {\n-        return this.argument;\n+    public double[] getArgument() {\n+        return argument.clone();\n     }\n \n }\n--- a/src/java/org/apache/commons/math/MessagesResources_fr.java\n+++ b/src/java/org/apache/commons/math/MessagesResources_fr.java\n       \"d\\u00e9passement de capacit\\u00e9 : le PGCD de {0} et {1} vaut 2^31\" },\n         \n     // org.apache.commons.math.FunctionEvaluationException\n-    { \"Evaluation failed for argument = {0}\",\n-      \"Erreur d''\\u00e9valuation pour l''argument {0}\" },\n+    { \"evaluation failed for argument = {0}\",\n+      \"erreur d''\\u00e9valuation pour l''argument {0}\" },\n \n     // org.apache.commons.math.DuplicateSampleAbscissaException\n     { \"Abscissa {0} is duplicated at both indices {1} and {2}\",\n       \"trop petite tol\\u00e9rance sur l''orthogonalit\\u00e9 ({0}), la solution est orthogonale \\u00e0 la jacobienne\" },\n     { \"unable to perform Q.R decomposition on the {0}x{1} jacobian matrix\",\n       \"impossible de calculer la factorisation Q.R de la matrice jacobienne {0}x{1}\" },\n+\n+    // org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizer\n+    { \"unable to bracket optimum in line search\",\n+      \"impossible d''encadrer l''optimum lors de la recherche lin\\u00e9aire\" },\n \n     // org.apache.commons.math.geometry.CardanEulerSingularityException\n     { \"Cardan angles singularity\",", "timestamp": 1237932399, "metainfo": ""}