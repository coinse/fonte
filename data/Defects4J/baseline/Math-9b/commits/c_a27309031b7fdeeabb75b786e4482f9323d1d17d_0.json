{"sha": "a27309031b7fdeeabb75b786e4482f9323d1d17d", "log": "MATH-925 Added \"final\" keyword. Removed degenerate case (matrix with no data). Used constructor chaining.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java\n+++ b/src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java\n     /** Serializable version identifier. */\n     private static final long serialVersionUID = 20121229L;\n     /** Entries of the diagonal. */\n-    private double[] data;\n-\n-    /**\n-     * Creates a matrix with no data.\n-     */\n-    public DiagonalMatrix() {}\n+    private final double[] data;\n \n     /**\n      * Creates a matrix with the supplied dimension.\n      * @param d Data for the new matrix.\n      */\n     public DiagonalMatrix(final double[] d) {\n-        data = d.clone();\n+        this(d, true);\n     }\n \n     /**\n      * Creates a matrix using the input array as the underlying data.\n      * <br/>\n-     * If an array is built specially in order to be embedded in a\n-     * RealMatrix and not used directly, the {@code copyArray} may be\n-     * set to {@code false}. This will prevent the copying and improve\n-     * performance as no new array will be built and no data will be copied.\n+     * If an array is created specially in order to be embedded in a\n+     * this instance and not used directly, the {@code copyArray} may be\n+     * set to {@code false}.\n+     * This will prevent the copying and improve performance as no new\n+     * array will be built and no data will be copied.\n      *\n      * @param d Data for new matrix.\n      * @param copyArray if {@code true}, the input array will be copied,", "timestamp": 1357004469, "metainfo": ""}