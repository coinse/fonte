{"sha": "a752a37be5ee9c24b46bbaad3d4d7cc7f9ef28e3", "log": "MATH-894 Removed \"initialCapacity\" field.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java\n+++ b/src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java\n     private ExpansionMode expansionMode = ExpansionMode.MULTIPLICATIVE;\n \n     /**\n-     * The initial capacity of the array.  Initial capacity is not exposed as a\n-     * property as it is only meaningful when passed to a constructor.\n-     */\n-    private int initialCapacity = 16;\n-\n-    /**\n      * The internal storage array.\n      */\n     private double[] internalArray;\n         this.expansionFactor = expansionFactor;\n         this.contractionCriteria = contractionCriteria;\n         this.expansionMode = expansionMode;\n-        this.initialCapacity = initialCapacity;\n         internalArray = new double[initialCapacity];\n         numElements = 0;\n         startIndex = 0;\n      * @param initialCapacity of the array\n      * @throws MathIllegalArgumentException if <code>initialCapacity</code> is not\n      * positive.\n-     */\n+     * @deprecated As of 3.1, this is a no-op.\n+     */\n+    @Deprecated\n     protected void setInitialCapacity(int initialCapacity)\n         throws MathIllegalArgumentException {\n-        if (initialCapacity > 0) {\n-            synchronized(this) {\n-                this.initialCapacity = initialCapacity;\n-            }\n-        } else {\n-            throw new MathIllegalArgumentException(LocalizedFormats.INITIAL_CAPACITY_NOT_POSITIVE,\n-                                                   initialCapacity);\n-        }\n+        // Body removed in 3.1.\n     }\n \n     /**\n         MathUtils.checkNotNull(dest);\n         synchronized(source) {\n            synchronized(dest) {\n-               dest.initialCapacity = source.initialCapacity;\n                dest.contractionCriteria = source.contractionCriteria;\n                dest.expansionFactor = source.expansionFactor;\n                dest.expansionMode = source.expansionMode;\n             synchronized(object) {\n                 boolean result = true;\n                 final ResizableDoubleArray other = (ResizableDoubleArray) object;\n-                result = result && (other.initialCapacity == initialCapacity);\n                 result = result && (other.contractionCriteria == contractionCriteria);\n                 result = result && (other.expansionFactor == expansionFactor);\n                 result = result && (other.expansionMode == expansionMode);\n      */\n     @Override\n     public synchronized int hashCode() {\n-        final int[] hashData = new int[7];\n+        final int[] hashData = new int[6];\n         hashData[0] = new Float(expansionFactor).hashCode();\n         hashData[1] = new Float(contractionCriteria).hashCode();\n         hashData[2] = expansionMode.hashCode();\n         hashData[3] = Arrays.hashCode(internalArray);\n-        hashData[4] = initialCapacity;\n-        hashData[5] = numElements;\n-        hashData[6] = startIndex;\n+        hashData[4] = numElements;\n+        hashData[5] = startIndex;\n         return Arrays.hashCode(hashData);\n     }\n ", "timestamp": 1353022556, "metainfo": ""}