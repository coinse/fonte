{"sha": "0ed28b00a5df43c52741d417a74d648817c5abb1", "log": "[MATH-775] Cleanup ListPopulation class after suggestion from Reid Hochstedler, added more sanity checks/exceptions in ctor and setters, unit tests, hide and protect internal representation.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java\n+++ b/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java\n     public Population nextGeneration() {\n         // initialize a new generation with the same parameters\n         ElitisticListPopulation nextGeneration =\n-                new ElitisticListPopulation(this.getPopulationLimit(), this.getElitismRate());\n+                new ElitisticListPopulation(getPopulationLimit(), getElitismRate());\n \n-        List<Chromosome> oldChromosomes = this.getChromosomes();\n+        final List<Chromosome> oldChromosomes = getChromosomeList();\n         Collections.sort(oldChromosomes);\n \n         // index of the last \"not good enough\" chromosome\n-        int boundIndex = (int) FastMath.ceil((1.0 - this.getElitismRate()) * oldChromosomes.size());\n-        for (int i=boundIndex; i<oldChromosomes.size(); i++) {\n+        int boundIndex = (int) FastMath.ceil((1.0 - getElitismRate()) * oldChromosomes.size());\n+        for (int i = boundIndex; i < oldChromosomes.size(); i++) {\n             nextGeneration.addChromosome(oldChromosomes.get(i));\n         }\n         return nextGeneration;\n--- a/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java\n+++ b/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java\n package org.apache.commons.math3.genetics;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n \n import org.apache.commons.math3.exception.util.LocalizedFormats;\n import org.apache.commons.math3.exception.NotPositiveException;\n+import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.exception.NumberIsTooLargeException;\n+import org.apache.commons.math3.exception.NumberIsTooSmallException;\n \n /**\n  * Population of chromosomes represented by a {@link List}.\n     /** maximal size of the population */\n     private int populationLimit;\n \n-\n-    /**\n-     * Creates a new ListPopulation instance.\n-     *\n-     * @param chromosomes list of chromosomes in the population\n-     * @param populationLimit maximal size of the population\n-     * @throws NumberIsTooLargeException if the list of chromosomes exceeds the population limit\n-     * @throws NotPositiveException if the population limit is not a positive number (&lt; 1)\n-     */\n-    public ListPopulation(final List<Chromosome> chromosomes, final int populationLimit) {\n-        if (chromosomes.size() > populationLimit) {\n-            throw new NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,\n-                                                chromosomes.size(), populationLimit, false);\n-        }\n-        if (populationLimit <= 0) {\n-            throw new NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE, populationLimit);\n-        }\n-\n-        this.chromosomes = chromosomes;\n-        this.populationLimit = populationLimit;\n-    }\n-\n     /**\n      * Creates a new ListPopulation instance and initializes its inner chromosome list.\n      *\n      * @throws NotPositiveException if the population limit is not a positive number (&lt; 1)\n      */\n     public ListPopulation(final int populationLimit) {\n+        this(Collections.<Chromosome> emptyList(), populationLimit);\n+    }\n+\n+    /**\n+     * Creates a new ListPopulation instance.\n+     * <p>Note: the chromosomes of the specified list are added to the population.</p>\n+     * @param chromosomes list of chromosomes to be added to the population\n+     * @param populationLimit maximal size of the population\n+     * @throws NullArgumentException if the list of chromosomes is {@code null}\n+     * @throws NotPositiveException if the population limit is not a positive number (&lt; 1)\n+     * @throws NumberIsTooLargeException if the list of chromosomes exceeds the population limit\n+     */\n+    public ListPopulation(final List<Chromosome> chromosomes, final int populationLimit) {\n+        if (chromosomes == null) {\n+            throw new NullArgumentException();\n+        }\n         if (populationLimit <= 0) {\n             throw new NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE, populationLimit);\n         }\n+        if (chromosomes.size() > populationLimit) {\n+            throw new NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,\n+                                                chromosomes.size(), populationLimit, false);\n+        }\n         this.populationLimit = populationLimit;\n         this.chromosomes = new ArrayList<Chromosome>(populationLimit);\n+        this.chromosomes.addAll(chromosomes);\n     }\n \n     /**\n      * Sets the list of chromosomes.\n+     * <p>Note: this method removed all existing chromosomes in the population and adds all chromosomes\n+     * of the specified list to the population.</p>\n      * @param chromosomes the list of chromosomes\n+     * @throws NullArgumentException if the list of chromosomes is {@code null}\n+     * @throws NumberIsTooLargeException if the list of chromosomes exceeds the population limit\n+     * @deprecated use {@link #addChromosomes(Collection)} instead\n      */\n     public void setChromosomes(final List<Chromosome> chromosomes) {\n-        this.chromosomes = chromosomes;\n+        if (chromosomes == null) {\n+            throw new NullArgumentException();\n+        }\n+        if (chromosomes.size() > populationLimit) {\n+            throw new NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,\n+                                                chromosomes.size(), populationLimit, false);\n+        }\n+        this.chromosomes.clear();\n+        this.chromosomes.addAll(chromosomes);\n+    }\n+\n+    /**\n+     * Add a {@link Collection} of chromosomes to this {@link Population}.\n+     * @param chromosomeColl a {@link Collection} of chromosomes\n+     * @throws NumberIsTooLargeException if the population would exceed the population limit when\n+     * adding this chromosome\n+     */\n+    public void addChromosomes(final Collection<Chromosome> chromosomeColl) {\n+        if (chromosomes.size() + chromosomeColl.size() > populationLimit) {\n+            throw new NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,\n+                                                chromosomes.size(), populationLimit, false);\n+        }\n+        this.chromosomes.addAll(chromosomeColl);\n+    }\n+\n+    /**\n+     * Returns an unmodifiable list of the chromosomes in this population.\n+     * @return the list of chromosomes\n+     */\n+    public List<Chromosome> getChromosomes() {\n+        return Collections.unmodifiableList(chromosomes);\n     }\n \n     /**\n      * Access the list of chromosomes.\n      * @return the list of chromosomes\n      */\n-    public List<Chromosome> getChromosomes() {\n+    protected List<Chromosome> getChromosomeList() {\n         return chromosomes;\n     }\n \n     /**\n      * Add the given chromosome to the population.\n      * @param chromosome the chromosome to add.\n+     * @throws NumberIsTooLargeException if the population would exceed the {@code populationLimit} after\n+     * adding this chromosome\n      */\n     public void addChromosome(final Chromosome chromosome) {\n+        if (chromosomes.size() >= populationLimit) {\n+            throw new NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,\n+                                                chromosomes.size(), populationLimit, false);\n+        }\n         this.chromosomes.add(chromosome);\n     }\n \n     /**\n      * Sets the maximal population size.\n      * @param populationLimit maximal population size.\n+     * @throws NotPositiveException if the population limit is not a positive number (&lt; 1)\n+     * @throws NumberIsTooSmallException if the new population size is smaller than the current number\n+     * of chromosomes in the population\n      */\n     public void setPopulationLimit(final int populationLimit) {\n+        if (populationLimit <= 0) {\n+            throw new NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE, populationLimit);\n+        }\n+        if (populationLimit < chromosomes.size()) {\n+            throw new NumberIsTooSmallException(populationLimit, chromosomes.size(), true);\n+        }\n         this.populationLimit = populationLimit;\n     }\n \n--- a/src/main/java/org/apache/commons/math3/genetics/Population.java\n+++ b/src/main/java/org/apache/commons/math3/genetics/Population.java\n  * limitations under the License.\n  */\n package org.apache.commons.math3.genetics;\n+\n \n /**\n  * A collection of chromosomes that facilitates generational evolution.\n     /**\n      * Add the given chromosome to the population.\n      * @param chromosome the chromosome to add.\n+     * @throws org.apache.commons.math3.exception.NumberIsTooLargeException if the population would exceed\n+     * the population limit when adding this chromosome\n      */\n     void addChromosome(Chromosome chromosome);\n \n--- a/src/main/java/org/apache/commons/math3/genetics/TournamentSelection.java\n+++ b/src/main/java/org/apache/commons/math3/genetics/TournamentSelection.java\n      * drawing {@link #arity} random chromosomes without replacement from the\n      * population, and then selecting the fittest chromosome among them.\n      *\n-     * @param population the population from which the chromosomes are choosen.\n+     * @param population the population from which the chromosomes are chosen.\n      * @return the selected chromosomes.\n      */\n     public ChromosomePair select(final Population population) {\n         return new ChromosomePair(tournament((ListPopulation) population),\n-                                  tournament((ListPopulation)population));\n+                                  tournament((ListPopulation) population));\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java\n+++ b/src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java\n \n import java.util.ArrayList;\n \n+import org.apache.commons.math3.exception.NotPositiveException;\n+import org.apache.commons.math3.exception.NumberIsTooLargeException;\n+import org.apache.commons.math3.exception.NumberIsTooSmallException;\n import org.junit.Assert;\n import org.junit.Test;\n \n         chromosomes.add(c2);\n         chromosomes.add(c3);\n \n-        ListPopulation population = new ListPopulation(chromosomes,10) {\n-\n+        ListPopulation population = new ListPopulation(chromosomes, 10) {\n             public Population nextGeneration() {\n                 // not important\n                 return null;\n \n         Assert.assertEquals(c3, population.getFittestChromosome());\n     }\n+    \n+    @Test\n+    public void testChromosomes() {\n+        final ArrayList<Chromosome> chromosomes = new ArrayList<Chromosome> ();\n+        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n+        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n+        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));        \n \n+        final ListPopulation population = new ListPopulation(10) {\n+            public Population nextGeneration() {\n+                // not important\n+                return null;\n+            }\n+        };\n+        \n+        population.addChromosomes(chromosomes);\n+\n+        Assert.assertEquals(chromosomes, population.getChromosomes());\n+        Assert.assertEquals(chromosomes.toString(), population.toString());\n+        \n+        population.setPopulationLimit(50);\n+        Assert.assertEquals(50, population.getPopulationLimit());\n+    }\n+    \n+    @Test(expected = NotPositiveException.class)\n+    public void testSetPopulationLimit() {\n+        final ListPopulation population = new ListPopulation(10) {\n+            public Population nextGeneration() {\n+                // not important\n+                return null;\n+            }\n+        };\n+        \n+        population.setPopulationLimit(-50);\n+    }\n+\n+    @Test(expected = NotPositiveException.class)\n+    public void testConstructorPopulationLimitNotPositive() {\n+        new ListPopulation(-10) {\n+            public Population nextGeneration() {\n+                // not important\n+                return null;\n+            }\n+        };\n+    }\n+\n+    @Test(expected = NotPositiveException.class)\n+    public void testChromosomeListConstructorPopulationLimitNotPositive() {\n+        final ArrayList<Chromosome> chromosomes = new ArrayList<Chromosome> ();\n+        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n+        new ListPopulation(chromosomes, -10) {\n+            public Population nextGeneration() {\n+                // not important\n+                return null;\n+            }\n+        };\n+    }\n+\n+    @Test(expected = NumberIsTooLargeException.class)\n+    public void testConstructorListOfChromosomesBiggerThanPopulationSize() {\n+        final ArrayList<Chromosome> chromosomes = new ArrayList<Chromosome> ();\n+        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n+        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n+        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));        \n+        new ListPopulation(chromosomes, 1) {\n+            public Population nextGeneration() {\n+                // not important\n+                return null;\n+            }\n+        };\n+    }\n+    \n+    @Test(expected=NumberIsTooLargeException.class)\n+    public void testAddTooManyChromosomes() {\n+        final ArrayList<Chromosome> chromosomes = new ArrayList<Chromosome> ();\n+        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n+        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n+        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n+\n+        final ListPopulation population = new ListPopulation(2) {\n+            public Population nextGeneration() {\n+                // not important\n+                return null;\n+            }\n+        };\n+        \n+        population.addChromosomes(chromosomes);\n+    }\n+    \n+    @Test(expected=NumberIsTooLargeException.class)\n+    public void testAddTooManyChromosomesSingleCall() {\n+\n+        final ListPopulation population = new ListPopulation(2) {\n+            public Population nextGeneration() {\n+                // not important\n+                return null;\n+            }\n+        };\n+\n+        for (int i = 0; i <= population.getPopulationLimit(); i++) {\n+            population.addChromosome(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n+        }\n+    }\n+    \n+    @Test(expected=NumberIsTooSmallException.class)\n+    public void testSetPopulationLimitTooSmall() {\n+        final ArrayList<Chromosome> chromosomes = new ArrayList<Chromosome> ();\n+        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n+        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n+        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n+\n+        final ListPopulation population = new ListPopulation(chromosomes, 3) {\n+            public Population nextGeneration() {\n+                // not important\n+                return null;\n+            }\n+        };\n+\n+        population.setPopulationLimit(2);\n+    }\n+    \n }", "timestamp": 1333663725, "metainfo": ""}