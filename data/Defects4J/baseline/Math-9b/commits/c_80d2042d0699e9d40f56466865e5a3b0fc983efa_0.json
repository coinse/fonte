{"sha": "80d2042d0699e9d40f56466865e5a3b0fc983efa", "log": "MATH-574 Allow outer product of vectors of different sizes.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java\n         try {\n             return outerProduct((ArrayFieldVector<T>) v);\n         } catch (ClassCastException cce) {\n-            checkVectorDimensions(v);\n             final int m = data.length;\n-            final FieldMatrix<T> out = new Array2DRowFieldMatrix<T>(field, m, m);\n-            for (int i = 0; i < data.length; i++) {\n-                for (int j = 0; j < data.length; j++) {\n+            final int n = v.getDimension();\n+            final FieldMatrix<T> out = new Array2DRowFieldMatrix<T>(field, m, n);\n+            for (int i = 0; i < m; i++) {\n+                for (int j = 0; j < n; j++) {\n                     out.setEntry(i, j, data[i].multiply(v.getEntry(j)));\n                 }\n             }\n \n     /** {@inheritDoc} */\n     public FieldMatrix<T> outerProduct(T[] v) {\n-        checkVectorDimensions(v.length);\n         final int m = data.length;\n-        final FieldMatrix<T> out = new Array2DRowFieldMatrix<T>(field, m, m);\n-        for (int i = 0; i < data.length; i++) {\n-            for (int j = 0; j < data.length; j++) {\n+        final int n = v.length;\n+        final FieldMatrix<T> out = new Array2DRowFieldMatrix<T>(field, m, n);\n+        for (int i = 0; i < m; i++) {\n+            for (int j = 0; j < n; j++) {\n                 out.setEntry(i, j, data[i].multiply(v[j]));\n             }\n         }\n--- a/src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java\n \n     }\n \n+    @Test\n+    public void testOuterProduct() {\n+        final ArrayFieldVector<Fraction> u\n+            = new ArrayFieldVector<Fraction>(FractionField.getInstance(),\n+                                             new Fraction[] {new Fraction(1),\n+                                                             new Fraction(2),\n+                                                             new Fraction(-3)});\n+        final ArrayFieldVector<Fraction> v\n+            = new ArrayFieldVector<Fraction>(FractionField.getInstance(),\n+                                             new Fraction[] {new Fraction(4),\n+                                                             new Fraction(-2)});\n+\n+        final FieldMatrix<Fraction> uv = u.outerProduct(v);\n+\n+        final double tol = Math.ulp(1d);\n+        Assert.assertEquals(new Fraction(4).doubleValue(), uv.getEntry(0, 0).doubleValue(), tol);\n+        Assert.assertEquals(new Fraction(-2).doubleValue(), uv.getEntry(0, 1).doubleValue(), tol);\n+        Assert.assertEquals(new Fraction(8).doubleValue(), uv.getEntry(1, 0).doubleValue(), tol);\n+        Assert.assertEquals(new Fraction(-4).doubleValue(), uv.getEntry(1, 1).doubleValue(), tol);\n+        Assert.assertEquals(new Fraction(-12).doubleValue(), uv.getEntry(2, 0).doubleValue(), tol);\n+        Assert.assertEquals(new Fraction(6).doubleValue(), uv.getEntry(2, 1).doubleValue(), tol);\n+    }\n+\n     /** verifies that two vectors are equals */\n     protected void checkArray(String msg, Fraction[] m, Fraction[] n) {\n         if (m.length != n.length) {", "timestamp": 1305291810, "metainfo": ""}