{"sha": "e1eb19deae36ae2020486d9ab133e626da7c4fd0", "log": "MATH-712 In prevision of the 3.0 release: Removed \"throw\" clauses and \"print\" statements used for debugging.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n                             gradientAtTrustRegionCenter.setEntry(i, gradientAtTrustRegionCenter.getEntry(i) + temp * interpolationPoints.getEntry(k, i));\n                         }\n                     }\n-                    throw new PathIsExploredException(); // XXX\n+                    // throw new PathIsExploredException(); // XXX\n                 }\n             }\n \n                         if (bdtest < bdtol) {\n                             state = 650; break;\n                         }\n-                        throw new PathIsExploredException(); // XXX\n+                        // throw new PathIsExploredException(); // XXX\n                     }\n                 }\n                 state = 680; break;\n                     stepa = initialTrustRegionRadius;\n                     if (upperDifference.getEntry(nfmm) == ZERO) {\n                         stepa = -stepa;\n-                        throw new PathIsExploredException(); // XXX\n+                        // throw new PathIsExploredException(); // XXX\n                     }\n                     interpolationPoints.setEntry(nfm, nfmm, stepa);\n                 } else if (nfm > n) {\n                     stepb = -initialTrustRegionRadius;\n                     if (lowerDifference.getEntry(nfxm) == ZERO) {\n                         stepb = Math.min(TWO * initialTrustRegionRadius, upperDifference.getEntry(nfxm));\n-                        throw new PathIsExploredException(); // XXX\n+                        // throw new PathIsExploredException(); // XXX\n                     }\n                     if (upperDifference.getEntry(nfxm) == ZERO) {\n                         stepb = Math.max(-TWO * initialTrustRegionRadius, lowerDifference.getEntry(nfxm));\n-                        throw new PathIsExploredException(); // XXX\n+                        // throw new PathIsExploredException(); // XXX\n                     }\n                     interpolationPoints.setEntry(nfm, nfxm, stepb);\n                 }\n                         bMatrix.setEntry(0, nfmm, -oneOverStepA);\n                         bMatrix.setEntry(nfm, nfmm, oneOverStepA);\n                         bMatrix.setEntry(npt + nfmm, nfmm, -HALF * rhosq);\n-                        throw new PathIsExploredException(); // XXX\n+                        // throw new PathIsExploredException(); // XXX\n                     }\n                 } else if (numEval >= n + 2) {\n                     final int ih = nfx * (nfx + 1) / 2 - 1;\n--- a/src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java\n                         PointValuePair expected,\n                         String assertMsg) {\n \n-        System.out.println(func.getClass().getName() + \" BEGIN\"); // XXX\n+//         System.out.println(func.getClass().getName() + \" BEGIN\"); // XXX\n \n         int dim = startPoint.length;\n //        MultivariateOptimizer optim =\n                                 result.getPoint()[i], pointTol);\n         }\n \n-        System.out.println(func.getClass().getName() + \" END\"); // XXX\n+//         System.out.println(func.getClass().getName() + \" END\"); // XXX\n     }\n \n     private static double[] point(int n, double value) {", "timestamp": 1329399883, "metainfo": ""}