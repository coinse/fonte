{"sha": "1a4f6e3aed7c80bfeb312119914a917e5169115f", "log": "Fixed code and javadoc to advertise the right exceptions, cleaned up formatting.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/TestStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/TestStatistic.java\n /**\n  * A collection of commonly used test statistics and statistical tests.\n  * \n- * @version $Revision: 1.12 $ $Date: 2004/02/21 21:35:15 $ \n+ * @version $Revision: 1.13 $ $Date: 2004/03/08 04:22:12 $ \n  */\n public interface TestStatistic {\n     \n      * @throws IllegalArgumentException if preconditions are not met\n      */\n     double chiSquare(double[] expected, double[] observed) \n-        throws IllegalArgumentException, MathException;\n+        throws IllegalArgumentException;\n     \n     /**\n      * Returns the <i>observed significance level</i>, or <a href=\n      * @param expected array of exptected frequency counts\n      * @return p-value\n      * @throws IllegalArgumentException if preconditions are not met\n+     * @throws MathException if an error occurs computing the p-value\n      */\n     double chiSquareTest(double[] expected, double[] observed) \n         throws IllegalArgumentException, MathException;\n      * @return true iff null hypothesis can be rejected with confidence\n      * 1 - alpha\n      * @throws IllegalArgumentException if preconditions are not met\n+     * @throws MathException if an error occurs performing the test\n      */\n     boolean chiSquareTest(double[] expected, double[] observed, double alpha) \n         throws IllegalArgumentException, MathException;\n      * @throws IllegalArgumentException if input array length is less than 2\n      */\n     double t(double mu, double[] observed) \n-        throws IllegalArgumentException, MathException;\n+        throws IllegalArgumentException;\n     \n     /**\n      * Computes a <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3\n      * @param sample2 array of sample data values\n      * @return p-value for t-test\n      * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error occurs computing the p-value\n      */\n     double tTest(double[] sample1, double[] sample2)\n         throws IllegalArgumentException, MathException;\n      * @return true if the null hypothesis can be rejected with \n      * confidence 1 - alpha\n      * @throws IllegalArgumentException if the preconditions are not met\n+     * @throws MathException if an error occurs performing the test\n      */\n     boolean tTest(double[] sample1, double[] sample2, double alpha)\n         throws IllegalArgumentException, MathException;\n      * @param alpha significance level of the test\n      * @return p-value\n      * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error computing the p-value\n      */\n     boolean tTest(double mu, double[] sample, double alpha)\n         throws IllegalArgumentException, MathException;\n      * @param sample array of sample data values\n      * @return p-value\n      * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error occurs computing the p-value\n      */\n     double tTest(double mu, double[] sample)\n         throws IllegalArgumentException, MathException;\n      * @throws IllegalArgumentException if the precondition is not met\n      */\n     double t(double mu, StatisticalSummary sampleStats) \n-        throws IllegalArgumentException, MathException;\n+        throws IllegalArgumentException;\n     \n     /**\n      * Computes a <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3\n      * @throws IllegalArgumentException if the precondition is not met\n      */\n     double t(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2) \n-        throws IllegalArgumentException, MathException;\n+        throws IllegalArgumentException;\n     \n     /**\n      * Returns the <i>observed significance level</i>, or <a href=\n      * @param sampleStats2 StatisticalSummary describing data from the second sample\n      * @return p-value for t-test\n      * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error occurs computing the p-value\n      */\n     double tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2)\n         throws IllegalArgumentException, MathException;\n      * @return true if the null hypothesis can be rejected with \n      * confidence 1 - alpha\n      * @throws IllegalArgumentException if the preconditions are not met\n+     * @throws MathException if an error occurs performing the test\n      */\n     boolean tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2, \n         double alpha)\n      * @param alpha significance level of the test\n      * @return p-value\n      * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error occurs computing the p-value\n      */\n     boolean tTest(double mu, StatisticalSummary sampleStats, double alpha)\n         throws IllegalArgumentException, MathException;\n      * @param sampleStats StatisticalSummary describing sample data\n      * @return p-value\n      * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error occurs computing the p-value\n      */\n     double tTest(double mu, StatisticalSummary sampleStats)\n         throws IllegalArgumentException, MathException;\n--- a/src/java/org/apache/commons/math/stat/TestStatisticImpl.java\n+++ b/src/java/org/apache/commons/math/stat/TestStatisticImpl.java\n /**\n  * Implements test statistics defined in the TestStatistic interface.\n  *\n- * @version $Revision: 1.13 $ $Date: 2004/02/21 21:35:15 $\n+ * @version $Revision: 1.14 $ $Date: 2004/03/08 04:22:12 $\n  */\n public class TestStatisticImpl implements TestStatistic, Serializable {\n \n             throw new IllegalArgumentException(\"observed, expected array lengths incorrect\");\n         }\n         if ((StatUtils.min(expected) <= 0) || (StatUtils.min(observed) < 0)) {\n-            throw new IllegalArgumentException(\n-                \"observed counts must be non-negative,\"\n+            throw new IllegalArgumentException( \"observed counts must be non-negative,\"\n                     + \" expected counts must be postive\");\n         }\n         for (int i = 0; i < observed.length; i++) {\n             dev = (observed[i] - expected[i]);\n             sumSq += dev * dev / expected[i];\n         }\n-\n         return sumSq;\n     }\n \n      * @param expected array of exptected frequency counts\n      * @return p-value\n      * @throws IllegalArgumentException if preconditions are not met\n+     * @throws MathException if an error occurs computing the p-value\n      */\n     public double chiSquareTest(double[] expected, double[] observed)\n         throws IllegalArgumentException, MathException {\n         ChiSquaredDistribution chiSquaredDistribution =\n-            DistributionFactory.newInstance().createChiSquareDistribution(\n-                (double) expected.length - 1);\n-        return 1\n-            - chiSquaredDistribution.cumulativeProbability(\n-                chiSquare(expected, observed));\n+            DistributionFactory.newInstance().createChiSquareDistribution((double) expected.length - 1);\n+        return 1 - chiSquaredDistribution.cumulativeProbability(chiSquare(expected, observed));\n     }\n \n     /**\n      * @return true iff null hypothesis can be rejected with confidence\n      * 1 - alpha\n      * @throws IllegalArgumentException if preconditions are not met\n-     */\n-    public boolean chiSquareTest(\n-        double[] expected,\n-        double[] observed,\n-        double alpha)\n-        throws IllegalArgumentException, MathException {\n-        if ((alpha <= 0) || (alpha > 0.5)) {\n-            throw new IllegalArgumentException(\n-                \"bad significance level: \" + alpha);\n+     * @throws MathException if an error occurs performing the test\n+     */\n+    public boolean chiSquareTest(double[] expected, double[] observed, double alpha)\n+        throws IllegalArgumentException, MathException {\n+        if ((alpha <= 0) || (alpha > 0.5)) {\n+            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n         }\n         return (chiSquareTest(expected, observed) < alpha);\n     }\n         if ((observed == null) || (observed.length < 5)) {\n             throw new IllegalArgumentException(\"insufficient data for t statistic\");\n         }\n-        return t(\n-            StatUtils.mean(observed),\n-            mu,\n-            StatUtils.variance(observed),\n-            observed.length);\n+        return t(StatUtils.mean(observed), mu, StatUtils.variance(observed), observed.length);\n     }\n \n     /**\n      * @param alpha significance level of the test\n      * @return p-value\n      * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error occurs computing the p-value\n      */\n     public boolean tTest(double mu, double[] sample, double alpha)\n         throws IllegalArgumentException, MathException {\n         if ((alpha <= 0) || (alpha > 0.5)) {\n-            throw new IllegalArgumentException(\n-                \"bad significance level: \" + alpha);\n+            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n         }\n         return (tTest(mu, sample) < alpha);\n     }\n      */\n     public double t(double[] sample1, double[] sample2)\n         throws IllegalArgumentException {\n-        if ((sample1 == null)\n-            || (sample2 == null\n+        if ((sample1 == null) || (sample2 == null\n                 || Math.min(sample1.length, sample2.length) < 5)) {\n             throw new IllegalArgumentException(\"insufficient data for t statistic\");\n         }\n-        return t(\n-            StatUtils.mean(sample1),\n-            StatUtils.mean(sample2),\n-            StatUtils.variance(sample1),\n-            StatUtils.variance(sample2),\n-            (double) sample1.length,\n-            (double) sample2.length);\n+        return t(StatUtils.mean(sample1), StatUtils.mean(sample2), StatUtils.variance(sample1),\n+            StatUtils.variance(sample2),  (double) sample1.length, (double) sample2.length);\n     }\n \n     /**\n      * @param sample2 array of sample data values\n      * @return tTest p-value\n      * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error occurs computing the p-value\n      */\n     public double tTest(double[] sample1, double[] sample2)\n         throws IllegalArgumentException, MathException {\n-        if ((sample1 == null)\n-            || (sample2 == null\n+        if ((sample1 == null) || (sample2 == null\n                 || Math.min(sample1.length, sample2.length) < 5)) {\n             throw new IllegalArgumentException(\"insufficient data\");\n         }\n-        return tTest(\n-            StatUtils.mean(sample1),\n-            StatUtils.mean(sample2),\n-            StatUtils.variance(sample1),\n-            StatUtils.variance(sample2),\n-            (double) sample1.length,\n-            (double) sample2.length);\n+        return tTest(StatUtils.mean(sample1), StatUtils.mean(sample2), StatUtils.variance(sample1),\n+            StatUtils.variance(sample2), (double) sample1.length, (double) sample2.length);\n     }\n \n     /**\n      * @param sample2 array of sample data values\n      * @param alpha significance level\n      * @return true if the null hypothesis can be rejected with \n-     * confidence 1 - alpha\n+     *     confidence 1 - alpha\n      * @throws IllegalArgumentException if the preconditions are not met\n+     * @throws MathException if an error occurs performing the test\n      */\n     public boolean tTest(double[] sample1, double[] sample2, double alpha)\n         throws IllegalArgumentException, MathException {\n         if ((alpha <= 0) || (alpha > 0.5)) {\n-            throw new IllegalArgumentException(\n-                \"bad significance level: \" + alpha);\n+            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n         }\n         return (tTest(sample1, sample2) < alpha);\n     }\n      * @param sample array of sample data values\n      * @return p-value\n      * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error occurs computing the p-value\n      */\n     public double tTest(double mu, double[] sample)\n         throws IllegalArgumentException, MathException {\n         if ((sample == null) || (sample.length < 5)) {\n             throw new IllegalArgumentException(\"insufficient data for t statistic\");\n         }\n-        return tTest(\n-            StatUtils.mean(sample),\n-            mu,\n-            StatUtils.variance(sample),\n-            sample.length);\n+        return tTest( StatUtils.mean(sample), mu, StatUtils.variance(sample), sample.length);\n     }\n \n     /**\n         if ((sampleStats == null) || (sampleStats.getN() < 5)) {\n             throw new IllegalArgumentException(\"insufficient data for t statistic\");\n         }\n-        return t(\n-            sampleStats.getMean(),\n-            mu,\n-            sampleStats.getVariance(),\n-            sampleStats.getN());\n+        return t(sampleStats.getMean(), mu, sampleStats.getVariance(), sampleStats.getN());\n     }\n \n     /**\n      * @return t statistic\n      * @throws IllegalArgumentException if the precondition is not met\n      */\n-    public double t(\n-        StatisticalSummary sampleStats1,\n-        StatisticalSummary sampleStats2)\n+    public double t(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2)\n         throws IllegalArgumentException {\n         if ((sampleStats1 == null)\n             || (sampleStats2 == null\n                 || Math.min(sampleStats1.getN(), sampleStats2.getN()) < 5)) {\n             throw new IllegalArgumentException(\"insufficient data for t statistic\");\n         }\n-        return t(\n-            sampleStats1.getMean(),\n-            sampleStats2.getMean(),\n-            sampleStats1.getVariance(),\n-            sampleStats2.getVariance(),\n-            (double) sampleStats1.getN(),\n-            (double) sampleStats2.getN());\n+        return t(sampleStats1.getMean(), sampleStats2.getMean(), sampleStats1.getVariance(),\n+            sampleStats2.getVariance(), (double) sampleStats1.getN(), (double) sampleStats2.getN());\n     }\n \n     /**\n      * @param sampleStats2 StatisticalSummary describing data from the second sample\n      * @return p-value for t-test\n      * @throws IllegalArgumentException if the precondition is not met\n-     */\n-    public double tTest(\n-        StatisticalSummary sampleStats1,\n-        StatisticalSummary sampleStats2)\n-        throws IllegalArgumentException, MathException {\n-        if ((sampleStats1 == null)\n-            || (sampleStats2 == null\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    public double tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2)\n+        throws IllegalArgumentException, MathException {\n+        if ((sampleStats1 == null) || (sampleStats2 == null\n                 || Math.min(sampleStats1.getN(), sampleStats2.getN()) < 5)) {\n             throw new IllegalArgumentException(\"insufficient data for t statistic\");\n         }\n-        return tTest(\n-            sampleStats1.getMean(),\n-            sampleStats2.getMean(),\n-            sampleStats1.getVariance(),\n-            sampleStats2.getVariance(),\n-            (double) sampleStats1.getN(),\n-            (double) sampleStats2.getN());\n+        return tTest(sampleStats1.getMean(), sampleStats2.getMean(), sampleStats1.getVariance(),\n+            sampleStats2.getVariance(), (double) sampleStats1.getN(), (double) sampleStats2.getN());\n     }\n \n     /**\n      * @param sampleStats2 StatisticalSummary describing sample data values\n      * @param alpha significance level of the test\n      * @return true if the null hypothesis can be rejected with \n-     * confidence 1 - alpha\n+     *     confidence 1 - alpha\n      * @throws IllegalArgumentException if the preconditions are not met\n-     */\n-    public boolean tTest(\n-        StatisticalSummary sampleStats1,\n-        StatisticalSummary sampleStats2,\n+     * @throws MathException if an error occurs performing the test\n+     */\n+    public boolean tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2,\n         double alpha)\n         throws IllegalArgumentException, MathException {\n         if ((alpha <= 0) || (alpha > 0.5)) {\n-            throw new IllegalArgumentException(\n-                \"bad significance level: \" + alpha);\n+            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n         }\n         return (tTest(sampleStats1, sampleStats2) < alpha);\n     }\n      * @param alpha significance level of the test\n      * @return p-value\n      * @throws IllegalArgumentException if the precondition is not met\n-     */\n-    public boolean tTest(\n-        double mu,\n-        StatisticalSummary sampleStats,\n-        double alpha)\n-        throws IllegalArgumentException, MathException {\n-        if ((alpha <= 0) || (alpha > 0.5)) {\n-            throw new IllegalArgumentException(\n-                \"bad significance level: \" + alpha);\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    public boolean tTest( double mu, StatisticalSummary sampleStats,double alpha)\n+        throws IllegalArgumentException, MathException {\n+        if ((alpha <= 0) || (alpha > 0.5)) {\n+            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n         }\n         return (tTest(mu, sampleStats) < alpha);\n     }\n      * @param sampleStats StatisticalSummary describing sample data\n      * @return p-value\n      * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error occurs computing the p-value\n      */\n     public double tTest(double mu, StatisticalSummary sampleStats)\n         throws IllegalArgumentException, MathException {\n         if ((sampleStats == null) || (sampleStats.getN() < 5)) {\n             throw new IllegalArgumentException(\"insufficient data for t statistic\");\n         }\n-        return tTest(\n-            sampleStats.getMean(),\n-            mu,\n-            sampleStats.getVariance(),\n-            sampleStats.getN());\n+        return tTest(sampleStats.getMean(), mu, sampleStats.getVariance(), sampleStats.getN());\n     }\n \n     //----------------------------------------------- Private methods \n     * @param n2 second sample n\n     * @return t test statistic\n     */\n-    private double t(\n-        double m1,\n-        double m2,\n-        double v1,\n-        double v2,\n-        double n1,\n-        double n2) {\n+    private double t(double m1, double m2,  double v1, double v2, double n1,double n2)  {\n         return (m1 - m2) / Math.sqrt((v1 / n1) + (v2 / n2));\n     }\n \n      * @param n2 second sample n\n      * @return p-value\n      */\n-    private double tTest(\n-        double m1,\n-        double m2,\n-        double v1,\n-        double v2,\n-        double n1,\n-        double n2)\n+    private double tTest(double m1, double m2, double v1, double v2, double n1, double n2)\n         throws MathException {\n         double t = Math.abs(t(m1, m2, v1, v2, n1, n2));\n         TDistribution tDistribution =\n-            DistributionFactory.newInstance().createTDistribution(\n-                df(v1, v2, n1, n2));\n+            DistributionFactory.newInstance().createTDistribution(df(v1, v2, n1, n2));\n         return 1.0 - tDistribution.cumulativeProbability(-t, t);\n     }\n ", "timestamp": 1078719732, "metainfo": ""}