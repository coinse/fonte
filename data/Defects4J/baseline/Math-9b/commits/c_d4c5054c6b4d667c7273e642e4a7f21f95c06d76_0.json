{"sha": "d4c5054c6b4d667c7273e642e4a7f21f95c06d76", "log": "Removed quasi-duplicate code.   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java\n     @Test\n     public void testDiagonal() {\n         double[] diagonal = new double[] { -3.0, -2.0, 2.0, 5.0 };\n-        RealMatrix m = createDiagonalMatrix(diagonal, diagonal.length, diagonal.length);\n+        RealMatrix m = MatrixUtils.createRealDiagonalMatrix(diagonal);\n         EigenDecomposition ed;\n         ed = new EigenDecomposition(m);\n         Assert.assertEquals(diagonal[0], ed.getRealEigenvalue(3), 2.0e-15);\n     static RealMatrix createTestMatrix(final Random r, final double[] eigenValues) {\n         final int n = eigenValues.length;\n         final RealMatrix v = createOrthogonalMatrix(r, n);\n-        final RealMatrix d = createDiagonalMatrix(eigenValues, n, n);\n+        final RealMatrix d = MatrixUtils.createRealDiagonalMatrix(eigenValues);\n         return v.multiply(d).multiply(v.transpose());\n     }\n \n         return MatrixUtils.createRealMatrix(data);\n \n     }\n-\n-    public static RealMatrix createDiagonalMatrix(final double[] diagonal,\n-                                                  final int rows, final int columns) {\n-        final double[][] dData = new double[rows][columns];\n-        for (int i = 0; i < FastMath.min(rows, columns); ++i) {\n-            dData[i][i] = diagonal[i];\n-        }\n-        return MatrixUtils.createRealMatrix(dData);\n-    }\n-\n }\n--- a/src/test/java/org/apache/commons/math3/linear/SingularValueDecompositionTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/SingularValueDecompositionTest.java\n \n     private RealMatrix createTestMatrix(final Random r, final int rows, final int columns,\n                                         final double[] singularValues) {\n-        final RealMatrix u =\n-            EigenDecompositionTest.createOrthogonalMatrix(r, rows);\n-        final RealMatrix d =\n-            EigenDecompositionTest.createDiagonalMatrix(singularValues, rows, columns);\n-        final RealMatrix v =\n-            EigenDecompositionTest.createOrthogonalMatrix(r, columns);\n+        final RealMatrix u = EigenDecompositionTest.createOrthogonalMatrix(r, rows);\n+        final RealMatrix d = new Array2DRowRealMatrix(rows, columns);\n+        d.setSubMatrix(MatrixUtils.createRealDiagonalMatrix(singularValues).getData(), 0, 0);\n+        final RealMatrix v = EigenDecompositionTest.createOrthogonalMatrix(r, columns);\n         return u.multiply(d).multiply(v);\n     }\n ", "timestamp": 1351294652, "metainfo": ""}