{"sha": "9ab84d20b2ad3045cfc1c572d357d07374b7613e", "log": "Output timing info as a ratio with respect to StrictMath benchmark result.   ", "commit": "\n--- a/src/test/java/org/apache/commons/math/util/FastMathTestPerformance.java\n+++ b/src/test/java/org/apache/commons/math/util/FastMathTestPerformance.java\n  */\n public class FastMathTestPerformance {\n     private static final int RUNS = 10000000;\n-    private static final double SCALE = 1000d / RUNS;\n-\n-    @Ignore\n-    public void testPerformance() {\n-        final int numberOfRuns = 10000000;\n-        for (int j = 0; j < 10; j++) {\n-            double x = 0;\n-            long time = System.currentTimeMillis();\n-            for (int i = 0; i < numberOfRuns; i++)\n-                x += StrictMath.log(Math.PI + i/* 1.0 + i/1e9 */);\n-            time = System.currentTimeMillis() - time;\n-            System.out.print(\"StrictMath.log \" + time + \"\\t\" + x + \"\\t\");\n-\n-            x = 0;\n-            time = System.currentTimeMillis();\n-            for (int i = 0; i < numberOfRuns; i++)\n-                x += FastMath.log(Math.PI + i/* 1.0 + i/1e9 */);\n-            time = System.currentTimeMillis() - time;\n-            System.out.println(\"FastMath.log \" + time + \"\\t\" + x);\n-\n-            x = 0;\n-            time = System.currentTimeMillis();\n-            for (int i = 0; i < numberOfRuns; i++)\n-                x += StrictMath.pow(Math.PI + i / 1e6, i / 1e6);\n-            time = System.currentTimeMillis() - time;\n-            System.out.print(\"StrictMath.pow \" + time + \"\\t\" + x + \"\\t\");\n-\n-            x = 0;\n-            time = System.currentTimeMillis();\n-            for (int i = 0; i < numberOfRuns; i++)\n-                x += FastMath.pow(Math.PI + i / 1e6, i / 1e6);\n-            time = System.currentTimeMillis() - time;\n-            System.out.println(\"FastMath.pow \" + time + \"\\t\" + x);\n-\n-            x = 0;\n-            time = System.currentTimeMillis();\n-            for (int i = 0; i < numberOfRuns; i++)\n-                x += StrictMath.exp(i / 1000000.0);\n-            time = System.currentTimeMillis() - time;\n-            System.out.print(\"StrictMath.exp \" + time + \"\\t\" + x + \"\\t\");\n-\n-            x = 0;\n-            time = System.currentTimeMillis();\n-            for (int i = 0; i < numberOfRuns; i++)\n-                x += FastMath.exp(i / 1000000.0);\n-            time = System.currentTimeMillis() - time;\n-            System.out.println(\"FastMath.exp \" + time + \"\\t\" + x);\n-\n-            x = 0;\n-            time = System.currentTimeMillis();\n-            for (int i = 0; i < numberOfRuns; i++)\n-                x += StrictMath.sin(i / 1000000.0);\n-            time = System.currentTimeMillis() - time;\n-            System.out.print(\"StrictMath.sin \" + time + \"\\t\" + x + \"\\t\");\n-\n-            x = 0;\n-            time = System.currentTimeMillis();\n-            for (int i = 0; i < numberOfRuns; i++)\n-                x += FastMath.sin(i / 1000000.0);\n-            time = System.currentTimeMillis() - time;\n-            System.out.println(\"FastMath.sin \" + time + \"\\t\" + x);\n-\n-            x = 0;\n-            time = System.currentTimeMillis();\n-            for (int i = 0; i < numberOfRuns; i++)\n-                x += StrictMath.asin(i / 10000000.0);\n-            time = System.currentTimeMillis() - time;\n-            System.out.print(\"StrictMath.asin \" + time + \"\\t\" + x + \"\\t\");\n-\n-            x = 0;\n-            time = System.currentTimeMillis();\n-            for (int i = 0; i < numberOfRuns; i++)\n-                x += FastMath.asin(i / 10000000.0);\n-            time = System.currentTimeMillis() - time;\n-            System.out.println(\"FastMath.asin \" + time + \"\\t\" + x);\n-\n-            x = 0;\n-            time = System.currentTimeMillis();\n-            for (int i = 0; i < numberOfRuns; i++)\n-                x += StrictMath.cos(i / 1000000.0);\n-            time = System.currentTimeMillis() - time;\n-            System.out.print(\"StrictMath.cos \" + time + \"\\t\" + x + \"\\t\");\n-\n-            x = 0;\n-            time = System.currentTimeMillis();\n-            for (int i = 0; i < numberOfRuns; i++)\n-                x += FastMath.cos(i / 1000000.0);\n-            time = System.currentTimeMillis() - time;\n-            System.out.println(\"FastMath.cos \" + time + \"\\t\" + x);\n-\n-            x = 0;\n-            time = System.currentTimeMillis();\n-            for (int i = 0; i < numberOfRuns; i++)\n-                x += StrictMath.acos(i / 10000000.0);\n-            time = System.currentTimeMillis() - time;\n-            System.out.print(\"StrictMath.acos \" + time + \"\\t\" + x + \"\\t\");\n-\n-            x = 0;\n-            time = System.currentTimeMillis();\n-            for (int i = 0; i < numberOfRuns; i++)\n-                x += FastMath.acos(i / 10000000.0);\n-            time = System.currentTimeMillis() - time;\n-            System.out.println(\"FastMath.acos \" + time + \"\\t\" + x);\n-\n-            x = 0;\n-            time = System.currentTimeMillis();\n-            for (int i = 0; i < numberOfRuns; i++)\n-                x += StrictMath.tan(i / 1000000.0);\n-            time = System.currentTimeMillis() - time;\n-            System.out.print(\"StrictMath.tan \" + time + \"\\t\" + x + \"\\t\");\n-\n-            x = 0;\n-            time = System.currentTimeMillis();\n-            for (int i = 0; i < numberOfRuns; i++)\n-                x += FastMath.tan(i / 1000000.0);\n-            time = System.currentTimeMillis() - time;\n-            System.out.println(\"FastMath.tan \" + time + \"\\t\" + x);\n-\n-            x = 0;\n-            time = System.currentTimeMillis();\n-            for (int i = 0; i < numberOfRuns; i++)\n-                x += StrictMath.atan(i / 1000000.0);\n-            time = System.currentTimeMillis() - time;\n-            System.out.print(\"StrictMath.atan \" + time + \"\\t\" + x + \"\\t\");\n-\n-            x = 0;\n-            time = System.currentTimeMillis();\n-            for (int i = 0; i < numberOfRuns; i++)\n-                x += FastMath.atan(i / 1000000.0);\n-            time = System.currentTimeMillis() - time;\n-            System.out.println(\"FastMath.atan \" + time + \"\\t\" + x);\n-\n-            x = 0;\n-            time = System.currentTimeMillis();\n-            for (int i = 0; i < numberOfRuns; i++)\n-                x += StrictMath.cbrt(i / 1000000.0);\n-            time = System.currentTimeMillis() - time;\n-            System.out.print(\"StrictMath.cbrt \" + time + \"\\t\" + x + \"\\t\");\n-\n-            x = 0;\n-            time = System.currentTimeMillis();\n-            for (int i = 0; i < numberOfRuns; i++)\n-                x += FastMath.cbrt(i / 1000000.0);\n-            time = System.currentTimeMillis() - time;\n-            System.out.println(\"FastMath.cbrt \" + time + \"\\t\" + x);\n-\n-            x = 0;\n-            time = System.currentTimeMillis();\n-            for (int i = 0; i < numberOfRuns; i++)\n-                x += StrictMath.cosh(i / 1000000.0);\n-            time = System.currentTimeMillis() - time;\n-            System.out.print(\"StrictMath.cosh \" + time + \"\\t\" + x + \"\\t\");\n-\n-            x = 0;\n-            time = System.currentTimeMillis();\n-            for (int i = 0; i < numberOfRuns; i++)\n-                x += FastMath.cosh(i / 1000000.0);\n-            time = System.currentTimeMillis() - time;\n-            System.out.println(\"FastMath.cosh \" + time + \"\\t\" + x);\n-\n-            x = 0;\n-            time = System.currentTimeMillis();\n-            for (int i = 0; i < numberOfRuns; i++)\n-                x += StrictMath.sinh(i / 1000000.0);\n-            time = System.currentTimeMillis() - time;\n-            System.out.print(\"StrictMath.sinh \" + time + \"\\t\" + x + \"\\t\");\n-\n-            x = 0;\n-            time = System.currentTimeMillis();\n-            for (int i = 0; i < numberOfRuns; i++)\n-                x += FastMath.sinh(i / 1000000.0);\n-            time = System.currentTimeMillis() - time;\n-            System.out.println(\"FastMath.sinh \" + time + \"\\t\" + x);\n-\n-            x = 0;\n-            time = System.currentTimeMillis();\n-            for (int i = 0; i < numberOfRuns; i++)\n-                x += StrictMath.tanh(i / 1000000.0);\n-            time = System.currentTimeMillis() - time;\n-            System.out.print(\"StrictMath.tanh \" + time + \"\\t\" + x + \"\\t\");\n-\n-            x = 0;\n-            time = System.currentTimeMillis();\n-            for (int i = 0; i < numberOfRuns; i++)\n-                x += FastMath.tanh(i / 1000000.0);\n-            time = System.currentTimeMillis() - time;\n-            System.out.println(\"FastMath.tanh \" + time + \"\\t\" + x);\n-\n-            x = 0;\n-            time = System.currentTimeMillis();\n-            for (int i = 0; i < numberOfRuns; i++)\n-                x += StrictMath.expm1(-i / 100000.0);\n-            time = System.currentTimeMillis() - time;\n-            System.out.print(\"StrictMath.expm1 \" + time + \"\\t\" + x + \"\\t\");\n-\n-            x = 0;\n-            time = System.currentTimeMillis();\n-            for (int i = 0; i < numberOfRuns; i++)\n-                x += FastMath.expm1(-i / 100000.0);\n-            time = System.currentTimeMillis() - time;\n-            System.out.println(\"FastMath.expm1 \" + time + \"\\t\" + x);\n-\n-            x = 0;\n-            time = System.currentTimeMillis();\n-            for (int i = 0; i < numberOfRuns; i++)\n-                x += FastMath.expm1(-i / 100000.0);\n-            time = System.currentTimeMillis() - time;\n-            System.out.println(\"FastMath.expm1 \" + time + \"\\t\" + x);\n-\n-        }\n+\n+    private void print(String funcName) {\n+        System.out.print(funcName + \" \");\n+    }\n+    private void print(long time, long unitTime) {\n+        final double ratio = time / (double) unitTime;\n+        System.out.print(time + \" \" + ratio + \" \");\n+    }\n+    private void println(long time, long unitTime) {\n+        print(time, unitTime);\n+        System.out.println();\n     }\n \n     @Test\n     public void testLog() {\n-        System.out.print(\"log \");\n+        print(\"log\");\n         double x = 0;\n         long time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += StrictMath.log(Math.PI + i/* 1.0 + i/1e9 */);\n         time = System.currentTimeMillis() - time;\n-        System.out.print(time * SCALE + \" \");\n+        long unitTime = time;\n+        print(time, unitTime);\n \n         x = 0;\n         time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += FastMath.log(Math.PI + i/* 1.0 + i/1e9 */);\n         time = System.currentTimeMillis() - time;\n-        System.out.print(time * SCALE + \" \");\n+        print(time, unitTime);\n \n         x = 0;\n         time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += Math.log(Math.PI + i/* 1.0 + i/1e9 */);\n         time = System.currentTimeMillis() - time;\n-        System.out.println(time * SCALE);\n+        println(time, unitTime);\n     }\n \n     @Test\n     public void testPow() {\n-        System.out.print(\"pow \");\n+        print(\"pow\");\n         double x = 0;\n         long time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += StrictMath.pow(Math.PI + i / 1e6, i / 1e6);\n         time = System.currentTimeMillis() - time;\n-        System.out.print(time * SCALE + \" \");\n+        long unitTime = time;\n+        print(time, unitTime);\n \n         x = 0;\n         time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += FastMath.pow(Math.PI + i / 1e6, i / 1e6);\n         time = System.currentTimeMillis() - time;\n-        System.out.print(time * SCALE + \" \");\n+        print(time, unitTime);\n \n         x = 0;\n         time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += Math.pow(Math.PI + i / 1e6, i / 1e6);\n         time = System.currentTimeMillis() - time;\n-        System.out.println(time * SCALE);\n+        println(time, unitTime);\n     }\n \n     @Test\n     public void testExp() {\n-        System.out.print(\"exp \");\n+        print(\"exp\");\n         double x = 0;\n         long time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += StrictMath.exp(i / 1000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.print(time * SCALE + \" \");\n+        long unitTime = time;\n+        print(time, unitTime);\n \n         x = 0;\n         time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += FastMath.exp(i / 1000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.print(time * SCALE + \" \");\n+        print(time, unitTime);\n \n         x = 0;\n         time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += Math.exp(i / 1000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.println(time * SCALE);\n+        println(time, unitTime);\n     }\n \n     @Test\n     public void testSin() {\n-        System.out.print(\"sin \");\n+        print(\"sin\");\n         double x = 0;\n         long time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += StrictMath.sin(i / 1000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.print(time * SCALE + \" \");\n+        long unitTime = time;\n+        print(time, unitTime);\n \n         x = 0;\n         time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += FastMath.sin(i / 1000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.print(time * SCALE + \" \");\n+        print(time, unitTime);\n \n         x = 0;\n         time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += Math.sin(i / 1000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.println(time * SCALE);\n+        println(time, unitTime);\n     }\n \n     @Test\n     public void testAsin() {\n-        System.out.print(\"asin \");\n+        print(\"asin\");\n         double x = 0;\n         long time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += StrictMath.asin(i / 10000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.print(time * SCALE + \" \");\n+        long unitTime = time;\n+        print(time, unitTime);\n \n         x = 0;\n         time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += FastMath.asin(i / 10000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.print(time * SCALE + \" \");\n+        print(time, unitTime);\n \n         x = 0;\n         time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += Math.asin(i / 10000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.println(time * SCALE);\n+        println(time, unitTime);\n     }\n \n     @Test\n     public void testCos() {\n-        System.out.print(\"cos \");\n+        print(\"cos\");\n         double x = 0;\n         long time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += StrictMath.cos(i / 1000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.print(time * SCALE + \" \");\n+        long unitTime = time;\n+        print(time, unitTime);\n \n         x = 0;\n         time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += FastMath.cos(i / 1000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.print(time * SCALE + \" \");\n+        print(time, unitTime);\n \n         x = 0;\n         time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += Math.cos(i / 1000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.println(time * SCALE);\n+        println(time, unitTime);\n     }\n             \n     @Test\n     public void testAcos() {\n-        System.out.print(\"acos \");\n+        print(\"acos\");\n         double x = 0;\n         long time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += StrictMath.acos(i / 10000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.print(time * SCALE + \" \");\n+        long unitTime = time;\n+        print(time, unitTime);\n \n         x = 0;\n         time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += FastMath.acos(i / 10000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.print(time * SCALE + \" \");\n+        print(time, unitTime);\n \n         x = 0;\n         time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += Math.acos(i / 10000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.println(time * SCALE);\n+        println(time, unitTime);\n     }\n \n     @Test\n     public void testTan() {\n-        System.out.print(\"tan \");\n+        print(\"tan\");\n         double x = 0;\n         long time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += StrictMath.tan(i / 1000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.print(time * SCALE + \" \");\n+        long unitTime = time;\n+        print(time, unitTime);\n \n         x = 0;\n         time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += FastMath.tan(i / 1000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.print(time * SCALE + \" \");\n+        print(time, unitTime);\n \n         x = 0;\n         time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += Math.tan(i / 1000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.println(time * SCALE);\n+        println(time, unitTime);\n     }\n \n     @Test\n     public void testAtan() {\n-        System.out.print(\"atan \");\n+        print(\"atan\");\n         double x = 0;\n         long time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += StrictMath.atan(i / 1000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.print(time * SCALE + \" \");\n+        long unitTime = time;\n+        print(time, unitTime);\n \n         x = 0;\n         time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += FastMath.atan(i / 1000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.print(time * SCALE + \" \");\n+        print(time, unitTime);\n \n         x = 0;\n         time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += Math.atan(i / 1000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.println(time * SCALE);\n+        println(time, unitTime);\n     }\n      \n     @Test\n     public void testCbrt() {\n-        System.out.print(\"cbrt \");\n+        print(\"cbrt\");\n         double x = 0;\n         long time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += StrictMath.cbrt(i / 1000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.print(time * SCALE + \" \");\n+        long unitTime = time;\n+        print(time, unitTime);\n \n         x = 0;\n         time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += FastMath.cbrt(i / 1000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.print(time * SCALE + \" \");\n+        print(time, unitTime);\n \n         x = 0;\n         time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += Math.cbrt(i / 1000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.println(time * SCALE);\n+        println(time, unitTime);\n     }\n \n     @Test\n     public void testCosh() {\n-        System.out.print(\"cosh \");        \n+        print(\"cosh\");        \n         double x = 0;\n         long time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += StrictMath.cosh(i / 1000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.print(time * SCALE + \" \");\n+        long unitTime = time;\n+        print(time, unitTime);\n \n         x = 0;\n         time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += FastMath.cosh(i / 1000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.print(time * SCALE + \" \");\n+        print(time, unitTime);\n \n         x = 0;\n         time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += Math.cosh(i / 1000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.println(time * SCALE);\n+        println(time, unitTime);\n     }\n \n     @Test\n     public void testSinh() {\n-        System.out.print(\"sinh \");\n+        print(\"sinh\");\n         double x = 0;\n         long time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += StrictMath.sinh(i / 1000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.print(time * SCALE + \" \");\n+        long unitTime = time;\n+        print(time, unitTime);\n \n         x = 0;\n         time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += FastMath.sinh(i / 1000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.print(time * SCALE + \" \");\n+        print(time, unitTime);\n \n         x = 0;\n         time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += Math.sinh(i / 1000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.println(time * SCALE);\n+        println(time, unitTime);\n     }\n \n     @Test\n     public void testTanh() {\n-        System.out.print(\"tanh \");\n+        print(\"tanh\");\n         double x = 0;\n         long time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += StrictMath.tanh(i / 1000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.print(time * SCALE + \" \");\n+        long unitTime = time;\n+        print(time, unitTime);\n \n         x = 0;\n         time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += FastMath.tanh(i / 1000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.print(time * SCALE + \" \");\n+        print(time, unitTime);\n \n         x = 0;\n         time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += Math.tanh(i / 1000000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.println(time * SCALE);\n+        println(time, unitTime);\n     }\n      \n     @Test\n     public void testExpm1() {\n-        System.out.print(\"expm1 \");\n+        print(\"expm1\");\n         double x = 0;\n         long time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += StrictMath.expm1(-i / 100000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.print(time * SCALE + \" \");\n+        long unitTime = time;\n+        print(time, unitTime);\n \n         x = 0;\n         time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += FastMath.expm1(-i / 100000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.print(time * SCALE + \" \");\n+        print(time, unitTime);\n \n         x = 0;\n         time = System.currentTimeMillis();\n         for (int i = 0; i < RUNS; i++)\n             x += Math.expm1(-i / 100000.0);\n         time = System.currentTimeMillis() - time;\n-        System.out.println(time * SCALE);\n+        println(time, unitTime);\n     }\n }", "timestamp": 1295907344, "metainfo": ""}