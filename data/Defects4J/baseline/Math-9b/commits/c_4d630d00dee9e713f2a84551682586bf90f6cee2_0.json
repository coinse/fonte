{"sha": "4d630d00dee9e713f2a84551682586bf90f6cee2", "log": "Added degree() method, degree checking in derivative computations, made constructor copy coefficient array, cleaned up javadoc.   ", "commit": "\n--- a/src/java/org/apache/commons/math/analysis/PolynomialFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/PolynomialFunction.java\n  */\n package org.apache.commons.math.analysis;\n \n+import java.io.Serializable;\n \n-\n-import java.io.Serializable;\n+import java.util.Arrays;\n \n import org.apache.commons.math.MathException;\n \n /**\n- * Represents a Polynomial function.\n- * Spline functions map a certain interval of real numbers to real numbers.\n- * A cubic spline consists of segments of cubic functions. For this class,\n- * polynominal coefficents are used.\n- * Arguments outside of the domain cause an IllegalArgumentException.\n+ * Represents a polynomial function with real coefficients.\n  * \n- * @version $Revision: 1.5 $ $Date: 2004/02/18 03:24:19 $\n+ * @version $Revision: 1.6 $ $Date: 2004/02/20 06:17:54 $\n  */\n public class PolynomialFunction implements UnivariateRealFunction, Serializable {\n \n     /**\n-     * The polynominal coefficients.\n-     * The index represents the coefficients of the polynomail, with\n-     * index 0 being the absolute coefficient and index N the coefficient\n-     * for the Nth power.\n+     * The coefficients of the polynomial, ordered by degree -- i.e.,  c[0] is the constant term\n+     * and c[n] is the coefficient of x^n where n is the degree of the polynomial.\n      */\n     private double c[];\n \n     /**\n-     * Construct a function with the given segment delimiters and polynomial\n-     * coefficients.\n+     * Construct a polynomial with the given coefficients\n+     * \n      * @param c polynominal coefficients\n      */\n     public PolynomialFunction(double c[]) {\n         super();\n-        // TODO: should copy the arguments here, for safety. This could be a major overhead.\n-        this.c = c;\n+        this.c = new double[c.length];\n+        System.arraycopy(c, 0, this.c, 0, c.length);\n     }\n \n     /**\n-     * Compute the value for the function.\n+     * Compute the value of the function for the given argument.\n      *\n      * <p>This can be explicitly determined by \n      *   <tt>c_n * x^n + ... + c_1 * x  + c_0</tt>\n      * </p>\n      *\n-     * @param x the point for which the function value should be computed\n+     * @param x the argument for which the function value should be computed\n      * @return the value\n      * @throws MathException if the function couldn't be computed due to\n      *  missing additional data or other environmental problems.\n      * @see UnivariateRealFunction#value(double)\n      */\n-    public double value(double x) throws MathException {\n+    public double value(double x)  {\n \n         double value = c[0];\n \n     }\n \n \n-\n     /**\n      * Compute the value for the first derivative of the function.\n      *\n      *\n      * @param x the point for which the first derivative should be computed\n      * @return the value\n-     * @throws MathException if the derivative couldn't be computed.\n      */\n-    public double firstDerivative(double x) throws MathException {\n+    public double firstDerivative(double x)  {\n \n+        if (this.degree() == 0) {\n+            return 0;\n+        }\n         double value = c[1];\n \n         if ( c.length > 1 ) {\n      * \n      * @param x the point for which the first derivative should be computed\n      * @return the value\n-     * @throws MathException if the second derivative couldn't be computed.\n      */\n-    public double secondDerivative(double x) throws MathException {\n+    public double secondDerivative(double x)  {\n \n+        if (this.degree() < 2) {\n+            return 0;\n+        }\n         double value = 2.0 * c[2];\n \n         if ( c.length > 2 ) {\n         return value;\n     }\n \n-\n-    /** \n-     * local power function using integer powers.\n-     * <p>The Math.pow() function always returns absolute value,\n-     *   and is a bit 'heavier' since it can handle double values\n-     *   for the exponential value.</p>\n-     * @param x any double value\n-     * @param n must be 0 or greater \n-     * @return x^n (or 0 if n < 0 ).\n-     * @throws MathException if n < 0.\n+    /**\n+     *  Returns the degree of the polynomial\n+     * \n+     * @return the degree of the polynomial\n      */\n-//     private double pow( double x, int n ) throws MathException {\n-//         double value = x;\n-//         if ( n < 0 ) {\n-//             throw new MathException( \"power n must be 0 or greater\" );\n-//         } else if ( n == 0 ) {\n-//             // x^0 = 1 always.\n-//             value = 1.0;\n-//         } else {\n-//             // only multiply for powers > 1.\n-//             for (int i=1; i < n; i++) {\n-//                 value *= x;\n-//             }\n-//         }\n-\n-//         System.out.println(\"pow:\"+x+\"^\"+n+\"=\"+value);\n-//         return value;\n-//     }\n-\n+    public int degree() {\n+        return c.length - 1;\n+    }\n }\n--- a/src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java\n+++ b/src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java\n /**\n  * Tests the PolynomialFunction implementation of a UnivariateRealFunction.\n  *\n- * @version $Revision: 1.4 $\n+ * @version $Revision: 1.5 $\n  * @author Matt Cliff <matt@mattcliff.com>\n  */\n public final class PolynomialFunctionTest extends TestCase {\n      */\n     public void testConstants() throws MathException {\n         double[] c = { 2.5 };\n-        UnivariateRealFunction f = new PolynomialFunction( c );\n+        PolynomialFunction f = new PolynomialFunction( c );\n \n         // verify that we are equal to c[0] at several (nonsymmetric) places\n         assertEquals( f.value( 0.0), c[0], error );\n         assertEquals( f.value( -123.5), c[0], error );\n         assertEquals( f.value( 3.0), c[0], error );\n         assertEquals( f.value( 456.89), c[0], error );\n+        \n+        assertEquals(f.degree(), 0);\n+        assertEquals(f.firstDerivative(0), 0, error);\n+        \n+        assertEquals(f.secondDerivative(0), 0, error);\n     }\n-\n-\n \n     /**\n      * tests the value of a linear polynomial.\n      */\n     public void testLinear() throws MathException {\n         double[] c = { -1.5, 3.0 };\n-        UnivariateRealFunction f = new PolynomialFunction( c );\n+        PolynomialFunction f = new PolynomialFunction( c );\n \n         // verify that we are equal to c[0] when x=0\n         assertEquals( f.value( 0.0), c[0], error );\n         assertEquals( 0.0, f.value( 0.5), error );\n         assertEquals( 3.0, f.value( 1.5), error );\n         assertEquals( 7.5, f.value( 3.0), error );\n+        \n+        assertEquals(f.degree(), 1);\n+        \n+        assertEquals(f.secondDerivative(0), 0, error);\n     \n     }\n \n      */\n     public void testQuadratic() throws MathException {\n         double[] c = { -2.0, -3.0, 2.0 };\n-        UnivariateRealFunction f = new PolynomialFunction( c );\n+        PolynomialFunction f = new PolynomialFunction( c );\n \n         // verify that we are equal to c[0] when x=0\n         assertEquals( f.value( 0.0), c[0], error );\n      */\n     public void testQuintic() throws MathException {\n         double[] c = { 0.0, 0.0, 15.0, -13.0, -3.0, 1.0 };\n-        UnivariateRealFunction f = new PolynomialFunction( c );\n+        PolynomialFunction f = new PolynomialFunction( c );\n \n         // verify that we are equal to c[0] when x=0\n         assertEquals( f.value( 0.0), c[0], error );\n         assertEquals( 0.0, f.value( -3.0), error );\n         assertEquals( 54.84375, f.value( -1.5), error );\n         assertEquals( -8.06637, f.value( 1.3), error );\n+        \n+        assertEquals(f.degree(), 5);\n     \n     }    \n \n \n     /**\n-     * tests the derivative function by comparision\n+     * tests the firstDerivative function by comparision\n      *\n      * <p>This will test the functions \n      * <tt>f(x) = x^3 - 2x^2 + 6x + 3, g(x) = 3x^2 - 4x + 6</tt>\n      * and <tt>h(x) = 6x - 4</tt>\n      */\n-    public void testDerivativeComparision() throws MathException {\n+    public void testfirstDerivativeComparision() throws MathException {\n         double[] f_coeff = { 3.0, 6.0, -2.0, 1.0 };\n         double[] g_coeff = { 6.0, -4.0, 3.0 };\n         double[] h_coeff = { -4.0, 6.0 };\n         // compare f'' = h\n     }\n \n-\n-\n-\n-\n }", "timestamp": 1077257874, "metainfo": ""}