{"sha": "bab8c17720d83dee4e79bc591483fdaf1d29fc95", "log": "In distribution.AbstractRealDistribution.inverseCumulativeProbability(double), boundary cases (p == 0 and p == 1) are now handled correctly: concrete instances no longer need to override this method, which is removed (MATH-699).  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/distribution/BetaDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/BetaDistribution.java\n     }\n \n     /** {@inheritDoc} */\n-    @Override\n-    public double inverseCumulativeProbability(double p)  {\n-        if (p == 0) {\n-            return 0;\n-        } else if (p == 1) {\n-            return 1;\n-        } else {\n-            return super.inverseCumulativeProbability(p);\n-        }\n-    }\n-\n-    /** {@inheritDoc} */\n     public double cumulativeProbability(double x)  {\n         if (x <= 0) {\n             return 0;\n--- a/src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java\n         return gamma.cumulativeProbability(x);\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     *\n-     * Returns {@code 0} when {@code p == 0} and\n-     * {@code Double.POSITIVE_INFINITY} when {@code p == 1}.\n-     */\n-    @Override\n-    public double inverseCumulativeProbability(final double p) {\n-        if (p == 0) {\n-            return 0d;\n-        }\n-        if (p == 1) {\n-            return Double.POSITIVE_INFINITY;\n-        }\n-        return super.inverseCumulativeProbability(p);\n-    }\n-\n     /** {@inheritDoc} */\n     @Override\n     protected double getSolverAbsoluteAccuracy() {\n--- a/src/main/java/org/apache/commons/math/distribution/FDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/FDistribution.java\n package org.apache.commons.math.distribution;\n \n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n-import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.special.Beta;\n import org.apache.commons.math.util.FastMath;\n     }\n \n     /**\n-     * {@inheritDoc}\n-     *\n-     * Returns {@code 0} when {@code p == 0} and\n-     * {@code Double.POSITIVE_INFINITY} when {@code p == 1}.\n-     */\n-    @Override\n-    public double inverseCumulativeProbability(final double p) throws OutOfRangeException {\n-        if (p == 0) {\n-            return 0;\n-        }\n-        if (p == 1) {\n-            return Double.POSITIVE_INFINITY;\n-        }\n-        return super.inverseCumulativeProbability(p);\n-    }\n-\n-    /**\n      * Access the numerator degrees of freedom.\n      *\n      * @return the numerator degrees of freedom.\n--- a/src/main/java/org/apache/commons/math/distribution/GammaDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/GammaDistribution.java\n         return ret;\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     *\n-     * Returns {@code 0} when {@code p == 0} and\n-     * {@code Double.POSITIVE_INFINITY} when {@code p == 1}.\n-     */\n-    @Override\n-    public double inverseCumulativeProbability(final double p) {\n-        if (p == 0) {\n-            return 0;\n-        }\n-        if (p == 1) {\n-            return Double.POSITIVE_INFINITY;\n-        }\n-        return super.inverseCumulativeProbability(p);\n-    }\n-\n     /** {@inheritDoc} */\n     @Override\n     protected double getSolverAbsoluteAccuracy() {\n--- a/src/main/java/org/apache/commons/math/distribution/NormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistribution.java\n         return 0.5 * Erf.erf(v0, v1);\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     *\n-     * Returns {@code Double.NEGATIVE_INFINITY} when {@code p == 0}\n-     * and {@code Double.POSITIVE_INFINITY} for {@code p == 1}.\n-     */\n-    @Override\n-    public double inverseCumulativeProbability(final double p) {\n-        if (p == 0) {\n-            return Double.NEGATIVE_INFINITY;\n-        }\n-        if (p == 1) {\n-            return Double.POSITIVE_INFINITY;\n-        }\n-        return super.inverseCumulativeProbability(p);\n-    }\n-\n     /** {@inheritDoc} */\n     @Override\n     protected double getSolverAbsoluteAccuracy() {\n--- a/src/main/java/org/apache/commons/math/distribution/TDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/TDistribution.java\n         return ret;\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     *\n-     * Returns {@code Double.NEGATIVE_INFINITY} when {@code p = 0}\n-     * and {@code Double.POSITIVE_INFINITY} when {@code p = 1}.\n-     */\n-    @Override\n-    public double inverseCumulativeProbability(final double p) {\n-        if (p == 0) {\n-            return Double.NEGATIVE_INFINITY;\n-        }\n-        if (p == 1) {\n-            return Double.POSITIVE_INFINITY;\n-        }\n-        return super.inverseCumulativeProbability(p);\n-    }\n-\n     /** {@inheritDoc} */\n     @Override\n     protected double getSolverAbsoluteAccuracy() {", "timestamp": 1323140266, "metainfo": ""}