{"sha": "834ced11579b22d7088900a2245d86d7fabf0e74", "log": "Unnecessary casts  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java\n         String source = \"1 + 1i\";\n         Complex expected = new Complex(1, 1);\n         try {\n-            Complex actual = (Complex)complexFormat.parse(source);\n+            Complex actual = complexFormat.parse(source);\n             Assert.assertEquals(expected, actual);\n         } catch (MathParseException ex) {\n             Assert.fail(ex.getMessage());\n         String source = \"1\" + getDecimalCharacter() + \"23 + 1\" + getDecimalCharacter() + \"43i\";\n         Complex expected = new Complex(1.23, 1.43);\n         try {\n-            Complex actual = (Complex)complexFormat.parse(source);\n+            Complex actual = complexFormat.parse(source);\n             Assert.assertEquals(expected, actual);\n         } catch (MathParseException ex) {\n             Assert.fail(ex.getMessage());\n         String source = \"1\" + getDecimalCharacter() + \"2323 + 1\" + getDecimalCharacter() + \"4343i\";\n         Complex expected = new Complex(1.2323, 1.4343);\n         try {\n-            Complex actual = (Complex)complexFormat.parse(source);\n+            Complex actual = complexFormat.parse(source);\n             Assert.assertEquals(expected, actual);\n         } catch (MathParseException ex) {\n             Assert.fail(ex.getMessage());\n         String source = \"-1\" + getDecimalCharacter() + \"2323 + 1\" + getDecimalCharacter() + \"4343i\";\n         Complex expected = new Complex(-1.2323, 1.4343);\n         try {\n-            Complex actual = (Complex)complexFormat.parse(source);\n+            Complex actual = complexFormat.parse(source);\n             Assert.assertEquals(expected, actual);\n         } catch (MathParseException ex) {\n             Assert.fail(ex.getMessage());\n         String source = \"1\" + getDecimalCharacter() + \"2323 - 1\" + getDecimalCharacter() + \"4343i\";\n         Complex expected = new Complex(1.2323, -1.4343);\n         try {\n-            Complex actual = (Complex)complexFormat.parse(source);\n+            Complex actual = complexFormat.parse(source);\n             Assert.assertEquals(expected, actual);\n         } catch (MathParseException ex) {\n             Assert.fail(ex.getMessage());\n         String source = \"-1\" + getDecimalCharacter() + \"2323 - 1\" + getDecimalCharacter() + \"4343i\";\n         Complex expected = new Complex(-1.2323, -1.4343);\n         try {\n-            Complex actual = (Complex)complexFormat.parse(source);\n+            Complex actual = complexFormat.parse(source);\n             Assert.assertEquals(expected, actual);\n         } catch (MathParseException ex) {\n             Assert.fail(ex.getMessage());\n         String source = \"0\" + getDecimalCharacter() + \"0 - 1\" + getDecimalCharacter() + \"4343i\";\n         Complex expected = new Complex(0.0, -1.4343);\n         try {\n-            Complex actual = (Complex)complexFormat.parse(source);\n+            Complex actual = complexFormat.parse(source);\n             Assert.assertEquals(expected, actual);\n         } catch (MathParseException ex) {\n             Assert.fail(ex.getMessage());\n         String source = \"-1\" + getDecimalCharacter() + \"2323\";\n         Complex expected = new Complex(-1.2323, 0);\n         try {\n-            Complex actual = (Complex)complexFormat.parse(source);\n+            Complex actual = complexFormat.parse(source);\n             Assert.assertEquals(expected, actual);\n         } catch (MathParseException ex) {\n             Assert.fail(ex.getMessage());\n         String source = \"-1\" + getDecimalCharacter() + \"2323 - 1\" + getDecimalCharacter() + \"4343j\";\n         Complex expected = new Complex(-1.2323, -1.4343);\n         try {\n-            Complex actual = (Complex)complexFormatJ.parse(source);\n+            Complex actual = complexFormatJ.parse(source);\n             Assert.assertEquals(expected, actual);\n         } catch (MathParseException ex) {\n             Assert.fail(ex.getMessage());\n         String source = \"(NaN) + (NaN)i\";\n         Complex expected = new Complex(Double.NaN, Double.NaN);\n         try {\n-            Complex actual = (Complex)complexFormat.parse(source);\n+            Complex actual = complexFormat.parse(source);\n             Assert.assertEquals(expected, actual);\n         } catch (MathParseException ex) {\n             Assert.fail(ex.getMessage());\n         String source = \"(Infinity) + (Infinity)i\";\n         Complex expected = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n         try {\n-            Complex actual = (Complex)complexFormat.parse(source);\n+            Complex actual = complexFormat.parse(source);\n             Assert.assertEquals(expected, actual);\n         } catch (MathParseException ex) {\n             Assert.fail(ex.getMessage());\n         String source = \"(-Infinity) - (Infinity)i\";\n         Complex expected = new Complex(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);\n         try {\n-            Complex actual = (Complex)complexFormat.parse(source);\n+            Complex actual = complexFormat.parse(source);\n             Assert.assertEquals(expected, actual);\n         } catch (MathParseException ex) {\n             Assert.fail(ex.getMessage());\n--- a/src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java\n         String source = \"{1; 1; 1}\";\n         Vector3D expected = new Vector3D(1, 1, 1);\n         try {\n-            Vector3D actual = (Vector3D) vector3DFormat.parse(source);\n+            Vector3D actual = vector3DFormat.parse(source);\n             Assert.assertEquals(expected, actual);\n         } catch (MathParseException ex) {\n             Assert.fail(ex.getMessage());\n             \"63}\";\n         Vector3D expected = new Vector3D(1.23, 1.43, 1.63);\n         try {\n-            Vector3D actual = (Vector3D) vector3DFormat.parse(source);\n+            Vector3D actual = vector3DFormat.parse(source);\n             Assert.assertEquals(expected, actual);\n         } catch (MathParseException ex) {\n             Assert.fail(ex.getMessage());\n             \"6333}\";\n         Vector3D expected = new Vector3D(1.2323, 1.4343, 1.6333);\n         try {\n-            Vector3D actual = (Vector3D) vector3DFormat.parse(source);\n+            Vector3D actual = vector3DFormat.parse(source);\n             Assert.assertEquals(expected, actual);\n         } catch (MathParseException ex) {\n             Assert.fail(ex.getMessage());\n             \"6333}\";\n         Vector3D expected = new Vector3D(-1.2323, 1.4343, 1.6333);\n         try {\n-            Vector3D actual = (Vector3D) vector3DFormat.parse(source);\n+            Vector3D actual = vector3DFormat.parse(source);\n             Assert.assertEquals(expected, actual);\n         } catch (MathParseException ex) {\n             Assert.fail(ex.getMessage());\n             \"6333}\";\n         Vector3D expected = new Vector3D(1.2323, -1.4343, 1.6333);\n         try {\n-            Vector3D actual = (Vector3D) vector3DFormat.parse(source);\n+            Vector3D actual = vector3DFormat.parse(source);\n             Assert.assertEquals(expected, actual);\n         } catch (MathParseException ex) {\n             Assert.fail(ex.getMessage());\n             \"6333}\";\n         Vector3D expected = new Vector3D(1.2323, 1.4343, -1.6333);\n         try {\n-            Vector3D actual = (Vector3D) vector3DFormat.parse(source);\n+            Vector3D actual = vector3DFormat.parse(source);\n             Assert.assertEquals(expected, actual);\n         } catch (MathParseException ex) {\n             Assert.fail(ex.getMessage());\n             \"6333}\";\n         Vector3D expected = new Vector3D(-1.2323, -1.4343, -1.6333);\n         try {\n-            Vector3D actual = (Vector3D) vector3DFormat.parse(source);\n+            Vector3D actual = vector3DFormat.parse(source);\n             Assert.assertEquals(expected, actual);\n         } catch (MathParseException ex) {\n             Assert.fail(ex.getMessage());\n             \"6333}\";\n         Vector3D expected = new Vector3D(0.0, -1.4343, 1.6333);\n         try {\n-            Vector3D actual = (Vector3D) vector3DFormat.parse(source);\n+            Vector3D actual = vector3DFormat.parse(source);\n             Assert.assertEquals(expected, actual);\n         } catch (MathParseException ex) {\n             Assert.fail(ex.getMessage());\n             \"6333]\";\n         Vector3D expected = new Vector3D(1.2323, 1.4343, 1.6333);\n         try {\n-            Vector3D actual = (Vector3D) vector3DFormatSquare.parse(source);\n+            Vector3D actual = vector3DFormatSquare.parse(source);\n             Assert.assertEquals(expected, actual);\n         } catch (MathParseException ex) {\n             Assert.fail(ex.getMessage());\n     public void testParseNan() {\n         String source = \"{(NaN); (NaN); (NaN)}\";\n         try {\n-            Vector3D actual = (Vector3D) vector3DFormat.parse(source);\n+            Vector3D actual = vector3DFormat.parse(source);\n             Assert.assertEquals(Vector3D.NaN, actual);\n         } catch (MathParseException ex) {\n             Assert.fail(ex.getMessage());\n     public void testParsePositiveInfinity() {\n         String source = \"{(Infinity); (Infinity); (Infinity)}\";\n         try {\n-            Vector3D actual = (Vector3D)vector3DFormat.parse(source);\n+            Vector3D actual = vector3DFormat.parse(source);\n             Assert.assertEquals(Vector3D.POSITIVE_INFINITY, actual);\n         } catch (MathParseException ex) {\n             Assert.fail(ex.getMessage());\n     public void testParseNegativeInfinity() {\n         String source = \"{(-Infinity); (-Infinity); (-Infinity)}\";\n         try {\n-            Vector3D actual = (Vector3D)vector3DFormat.parse(source);\n+            Vector3D actual = vector3DFormat.parse(source);\n             Assert.assertEquals(Vector3D.NEGATIVE_INFINITY, actual);\n         } catch (MathParseException ex) {\n             Assert.fail(ex.getMessage());", "timestamp": 1294323092, "metainfo": ""}