{"sha": "165783a737a69801fd245ff8555f909fc960f673", "log": "Modified to extend ContinuousDistributionAbstractTest.   ", "commit": "\n--- a/src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java\n  */\n package org.apache.commons.math.distribution;\n \n-import org.apache.commons.math.TestUtils;\n-\n-import junit.framework.TestCase;\n-\n /**\n- * @version $Revision: 1.14 $ $Date: 2004/05/23 21:34:19 $\n+ * Test cases for ExponentialDistribution.\n+ * Extends ContinuousDistributionAbstractTest.  See class javadoc for\n+ * ContinuousDistributionAbstractTest for details.\n+ * \n+ * @version $Revision: 1.15 $ $Date: 2004/06/06 16:39:06 $\n  */\n-public class ExponentialDistributionTest extends TestCase {\n-    private ExponentialDistribution exp;\n+public class ExponentialDistributionTest extends ContinuousDistributionAbstractTest {\n \n     /**\n      * Constructor for ChiSquareDistributionTest.\n         super(name);\n     }\n \n-    /*\n-     * @see TestCase#setUp()\n-     */\n-    protected void setUp() throws Exception {\n-        super.setUp();\n-        exp =\n-            DistributionFactory.newInstance().createExponentialDistribution(\n-                5.0);\n+    //-------------- Implementations for abstract methods -----------------------\n+    \n+    /** Creates the default continuous distribution instance to use in tests. */\n+    public ContinuousDistribution makeDistribution() {\n+        return DistributionFactory.newInstance().createExponentialDistribution(5.0);\n+    }   \n+    \n+    /** Creates the default cumulative probability distribution test input values */\n+    public double[] makeCumulativeTestPoints() {\n+        // quantiles computed using R version 1.8.1 (linux version)\n+        return new double[] {0.005002502d, 0.05025168d, 0.1265890d, 0.2564665d, 0.5268026d, \n+                34.53878d, 23.02585d, 18.44440d, 14.97866d, 11.51293d};\n+    }\n+    \n+    /** Creates the default cumulative probability density test expected values */\n+    public double[] makeCumulativeTestValues() {\n+        return new double[] {0.001d, 0.01d, 0.025d, 0.05d, 0.1d, 0.999d,\n+                0.990d, 0.975d, 0.950d, 0.900d}; \n+    }\n+    \n+    //------------ Additional tests -------------------------------------------\n+ \n+    public void testCumulativeProbabilityExtremes() throws Exception {\n+        setCumulativeTestPoints(new double[] {-2, 0});\n+        setCumulativeTestValues(new double[] {0, 0});\n+        verifyCumulativeProbabilities();\n     }\n \n-    /*\n-     * @see TestCase#tearDown()\n-     */\n-    protected void tearDown() throws Exception {\n-        exp = null;\n-        super.tearDown();\n-    }\n-\n-    public void testInverseCumulativeProbability001() throws Exception {\n-        testValue(.005003, .001);\n-    }\n-\n-    public void testInverseCumulativeProbability010() throws Exception {\n-        testValue(0.050252, .010);\n-    }\n-\n-    public void testInverseCumulativeProbability025() throws Exception {\n-        testValue(0.126589, .025);\n-    }\n-\n-    public void testInverseCumulativeProbability050() throws Exception {\n-        testValue(0.256566, .050);\n-    }\n-\n-    public void testInverseCumulativeProbability100() throws Exception {\n-        testValue(0.526803, .100);\n-    }\n-\n-    public void testInverseCumulativeProbability999() throws Exception {\n-        testValue(34.5388, .999);\n-    }\n-\n-    public void testInverseCumulativeProbability990() throws Exception {\n-        testValue(23.0259, .990);\n-    }\n-\n-    public void testInverseCumulativeProbability975() throws Exception {\n-        testValue(18.4444, .975);\n-    }\n-\n-    public void testInverseCumulativeProbability950() throws Exception {\n-        testValue(14.9787, .950);\n-    }\n-\n-    public void testInverseCumulativeProbability900() throws Exception {\n-        testValue(11.5129, .900);\n-    }\n-\n-    public void testCumulativeProbability001() throws Exception {\n-        testProbability(0.005003, .001);\n-    }\n-\n-    public void testCumulativeProbability010() throws Exception {\n-        testProbability(0.050252, .010);\n-    }\n-\n-    public void testCumulativeProbability025() throws Exception {\n-        testProbability(0.126589, .025);\n-    }\n-\n-    public void testCumulativeProbability050() throws Exception {\n-        testProbability(0.256566, .050);\n-    }\n-\n-    public void testCumulativeProbability100() throws Exception {\n-        testProbability(0.526803, .100);\n-    }\n-\n-    public void testCumulativeProbability999() throws Exception {\n-        testProbability(34.5388, .999);\n-    }\n-\n-    public void testCumulativeProbability990() throws Exception {\n-        testProbability(23.0259, .990);\n-    }\n-\n-    public void testCumulativeProbability975() throws Exception {\n-        testProbability(18.4444, .975);\n-    }\n-\n-    public void testCumulativeProbability950() throws Exception {\n-        testProbability(14.9787, .950);\n-    }\n-\n-    public void testCumulativeProbability900() throws Exception {\n-        testProbability(11.5129, .900);\n-    }\n-\n-    public void testCumulativeProbabilityNegative() throws Exception {\n-        testProbability(-1.0, 0.0);\n-    }\n-\n-    public void testCumulativeProbabilityZero() throws Exception {\n-        testProbability(0.0, 0.0);\n-    }\n-\n-    public void testInverseCumulativeProbabilityNegative() throws Exception {\n-        testValue(Double.NaN, -1.0);\n-    }\n-\n-    public void testInverseCumulativeProbabilityZero() throws Exception {\n-        testValue(0.0, 0.0);\n-    }\n-\n-    public void testInverseCumulativeProbabilityOne() throws Exception {\n-        testValue(Double.POSITIVE_INFINITY, 1.0);\n-    }\n-\n-    public void testInverseCumulativeProbabilityPositive() throws Exception {\n-        testValue(Double.NaN, 2.0);\n+    public void testInverseCumulativeProbabilityExtremes() throws Exception {\n+         setInverseCumulativeTestPoints(new double[] {0, 1});\n+         setInverseCumulativeTestValues(new double[] {0, Double.POSITIVE_INFINITY});\n+         verifyInverseCumulativeProbabilities();\n     }\n \n     public void testCumulativeProbability2() throws Exception {\n-        double actual = exp.cumulativeProbability(0.25, 0.75);\n+        double actual = getDistribution().cumulativeProbability(0.25, 0.75);\n         assertEquals(0.0905214, actual, 10e-4);\n     }\n-\n-    private void testProbability(double x, double expected) throws Exception {\n-        double actual = exp.cumulativeProbability(x);\n-        TestUtils.assertEquals(expected, actual, 10e-4);\n+    \n+    public void testMeanAccessors() {\n+        ExponentialDistribution distribution = (ExponentialDistribution) getDistribution();\n+        assertEquals(5d, distribution.getMean(), Double.MIN_VALUE);\n+        distribution.setMean(2d);\n+        assertEquals(2d, distribution.getMean(), Double.MIN_VALUE);\n+        try {\n+            distribution.setMean(0);\n+            fail(\"Expecting IllegalArgumentException for 0 mean\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n     }\n-\n-    private void testValue(double expected, double p) throws Exception {\n-        double actual = exp.inverseCumulativeProbability(p);\n-        TestUtils.assertEquals(expected, actual, 10e-4);\n-    }\n+   \n }", "timestamp": 1086539946, "metainfo": ""}