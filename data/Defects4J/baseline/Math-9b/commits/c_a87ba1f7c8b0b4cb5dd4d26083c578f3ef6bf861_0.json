{"sha": "a87ba1f7c8b0b4cb5dd4d26083c578f3ef6bf861", "log": "Added support for x^y in DerivativeStructure and DSCompiler.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n \n     }\n \n+    /** Compute power of a derivative structure.\n+     * @param x array holding the base\n+     * @param xOffset offset of the base in its array\n+     * @param y array holding the exponent\n+     * @param yOffset offset of the exponent in its array\n+     * @param result array where result must be stored (for\n+     * power the result array <em>cannot</em> be the input\n+     * array)\n+     * @param resultOffset offset of the result in its array\n+     */\n+    public void pow(final double[] x, final int xOffset,\n+                    final double[] y, final int yOffset,\n+                    final double[] result, final int resultOffset) {\n+        final double[] logX = new double[getSize()];\n+        log(x, xOffset, logX, 0);\n+        final double[] yLogX = new double[getSize()];\n+        multiply(logX, 0, y, yOffset, yLogX, 0);\n+        exp(yLogX, 0, result, resultOffset);\n+    }\n+\n     /** Compute n<sup>th</sup> root of a derivative structure.\n      * @param operand array holding the operand\n      * @param operandOffset offset of the operand in its array\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java\n         return result;\n     }\n \n+    /** Power operation.\n+     * @param e exponent\n+     * @return this<sup>e</sup>\n+     * @exception DimensionMismatchException if number of free parameters or orders are inconsistent\n+     */\n+    public DerivativeStructure pow(final DerivativeStructure e)\n+        throws DimensionMismatchException {\n+        compiler.checkCompatibility(e.compiler);\n+        final DerivativeStructure result = new DerivativeStructure(compiler);\n+        compiler.pow(data, 0, e.data, 0, result.data, 0);\n+        return result;\n+    }\n+\n     /** Exponential.\n      * @return exponential of the instance\n      */\n--- a/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java\n     }\n \n     @Test\n+    public void testPowReciprocalPow() {\n+        double[] epsilon = new double[] { 2.0e-15, 2.0e-14, 3.0e-13, 8.0e-12, 3.0e-10 };\n+        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n+            for (double x = 0.1; x < 1.2; x += 0.01) {\n+                DerivativeStructure dsX = new DerivativeStructure(2, maxOrder, 0, x);\n+                for (double y = 0.1; y < 1.2; y += 0.01) {\n+                    DerivativeStructure dsY = new DerivativeStructure(2, maxOrder, 1, y);\n+                    DerivativeStructure rebuiltX = dsX.pow(dsY).pow(dsY.reciprocal());\n+                    DerivativeStructure zero = rebuiltX.subtract(dsX);\n+                    for (int n = 0; n <= maxOrder; ++n) {\n+                        for (int m = 0; m <= maxOrder; ++m) {\n+                            if (n + m <= maxOrder) {\n+                                Assert.assertEquals(0.0, zero.getPartialDerivative(n, m), epsilon[n + m]);\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n     public void testExp() {\n         double[] epsilon = new double[] { 1.0e-16, 1.0e-16, 1.0e-16, 1.0e-16, 1.0e-16 };\n         for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {", "timestamp": 1344625138, "metainfo": ""}