{"sha": "dc9c694e3669522ec6dc71523e4530d7208a38c4", "log": "Removed unnecessary \"try/catch\" statements.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n \n import org.apache.commons.math.exception.MathUnsupportedOperationException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.analysis.BinaryFunction;\n import org.apache.commons.math.analysis.ComposableFunction;\n \n     /** {@inheritDoc} */\n     public RealVector mapAbsToSelf() {\n-        try {\n-            return mapToSelf(ComposableFunction.ABS);\n-        } catch (MathUserException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n+        return mapToSelf(ComposableFunction.ABS);\n     }\n \n     /** {@inheritDoc} */\n \n     /** {@inheritDoc} */\n     public RealVector mapAcosToSelf() {\n-        try {\n-            return mapToSelf(ComposableFunction.ACOS);\n-        } catch (MathUserException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n+        return mapToSelf(ComposableFunction.ACOS);\n     }\n \n     /** {@inheritDoc} */\n \n     /** {@inheritDoc} */\n     public RealVector mapAsinToSelf() {\n-        try {\n-            return mapToSelf(ComposableFunction.ASIN);\n-        } catch (MathUserException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n+        return mapToSelf(ComposableFunction.ASIN);\n     }\n \n     /** {@inheritDoc} */\n \n     /** {@inheritDoc} */\n     public RealVector mapAtanToSelf() {\n-        try {\n-            return mapToSelf(ComposableFunction.ATAN);\n-        } catch (MathUserException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n+        return mapToSelf(ComposableFunction.ATAN);\n     }\n \n     /** {@inheritDoc} */\n \n     /** {@inheritDoc} */\n     public RealVector mapCbrtToSelf() {\n-        try {\n-            return mapToSelf(ComposableFunction.CBRT);\n-        } catch (MathUserException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n+        return mapToSelf(ComposableFunction.CBRT);\n     }\n \n     /** {@inheritDoc} */\n \n     /** {@inheritDoc} */\n     public RealVector mapCeilToSelf() {\n-        try {\n-            return mapToSelf(ComposableFunction.CEIL);\n-        } catch (MathUserException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n+        return mapToSelf(ComposableFunction.CEIL);\n     }\n \n     /** {@inheritDoc} */\n \n     /** {@inheritDoc} */\n     public RealVector mapCosToSelf() {\n-        try {\n-            return mapToSelf(ComposableFunction.COS);\n-        } catch (MathUserException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n+        return mapToSelf(ComposableFunction.COS);\n     }\n \n     /** {@inheritDoc} */\n \n     /** {@inheritDoc} */\n     public RealVector mapCoshToSelf() {\n-        try {\n-            return mapToSelf(ComposableFunction.COSH);\n-        } catch (MathUserException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n+        return mapToSelf(ComposableFunction.COSH);\n     }\n \n     /** {@inheritDoc} */\n \n     /** {@inheritDoc} */\n     public RealVector mapDivideToSelf(double d){\n-        try {\n-            return mapToSelf(BinaryFunction.DIVIDE.fix2ndArgument(d));\n-        } catch (MathUserException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n+        return mapToSelf(BinaryFunction.DIVIDE.fix2ndArgument(d));\n     }\n \n     /** {@inheritDoc} */\n \n     /** {@inheritDoc} */\n     public RealVector mapExpToSelf() {\n-        try {\n-            return mapToSelf(ComposableFunction.EXP);\n-        } catch (MathUserException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n+        return mapToSelf(ComposableFunction.EXP);\n     }\n \n     /** {@inheritDoc} */\n \n     /** {@inheritDoc} */\n     public RealVector mapExpm1ToSelf() {\n-        try {\n-            return mapToSelf(ComposableFunction.EXPM1);\n-        } catch (MathUserException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n+        return mapToSelf(ComposableFunction.EXPM1);\n     }\n \n     /** {@inheritDoc} */\n \n     /** {@inheritDoc} */\n     public RealVector mapFloorToSelf() {\n-        try {\n-            return mapToSelf(ComposableFunction.FLOOR);\n-        } catch (MathUserException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n+        return mapToSelf(ComposableFunction.FLOOR);\n     }\n \n     /** {@inheritDoc} */\n \n     /** {@inheritDoc} */\n     public RealVector mapInvToSelf() {\n-        try {\n-            return mapToSelf(ComposableFunction.INVERT);\n-        } catch (MathUserException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n+        return mapToSelf(ComposableFunction.INVERT);\n     }\n \n     /** {@inheritDoc} */\n \n     /** {@inheritDoc} */\n     public RealVector mapLogToSelf() {\n-        try {\n-            return mapToSelf(ComposableFunction.LOG);\n-        } catch (MathUserException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n+        return mapToSelf(ComposableFunction.LOG);\n     }\n \n     /** {@inheritDoc} */\n \n     /** {@inheritDoc} */\n     public RealVector mapLog10ToSelf() {\n-        try {\n-            return mapToSelf(ComposableFunction.LOG10);\n-        } catch (MathUserException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n+        return mapToSelf(ComposableFunction.LOG10);\n     }\n \n     /** {@inheritDoc} */\n \n     /** {@inheritDoc} */\n     public RealVector mapLog1pToSelf() {\n-        try {\n-            return mapToSelf(ComposableFunction.LOG1P);\n-        } catch (MathUserException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n+        return mapToSelf(ComposableFunction.LOG1P);\n     }\n \n     /** {@inheritDoc} */\n \n     /** {@inheritDoc} */\n     public RealVector mapMultiplyToSelf(double d){\n-        try {\n-            return mapToSelf(BinaryFunction.MULTIPLY.fix1stArgument(d));\n-        } catch (MathUserException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n+        return mapToSelf(BinaryFunction.MULTIPLY.fix1stArgument(d));\n     }\n \n     /** {@inheritDoc} */\n \n     /** {@inheritDoc} */\n     public RealVector mapPowToSelf(double d){\n-        try {\n-            return mapToSelf(BinaryFunction.POW.fix2ndArgument(d));\n-        } catch (MathUserException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n+        return mapToSelf(BinaryFunction.POW.fix2ndArgument(d));\n     }\n \n     /** {@inheritDoc} */\n \n     /** {@inheritDoc} */\n     public RealVector mapRintToSelf() {\n-        try {\n-            return mapToSelf(ComposableFunction.RINT);\n-        } catch (MathUserException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n+        return mapToSelf(ComposableFunction.RINT);\n     }\n \n     /** {@inheritDoc} */\n \n     /** {@inheritDoc} */\n     public RealVector mapSignumToSelf() {\n-        try {\n-            return mapToSelf(ComposableFunction.SIGNUM);\n-        } catch (MathUserException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n+        return mapToSelf(ComposableFunction.SIGNUM);\n     }\n \n     /** {@inheritDoc} */\n \n     /** {@inheritDoc} */\n     public RealVector mapSinToSelf() {\n-        try {\n-            return mapToSelf(ComposableFunction.SIN);\n-        } catch (MathUserException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n+        return mapToSelf(ComposableFunction.SIN);\n     }\n \n     /** {@inheritDoc} */\n \n     /** {@inheritDoc} */\n     public RealVector mapSinhToSelf() {\n-        try {\n-            return mapToSelf(ComposableFunction.SINH);\n-        } catch (MathUserException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n+        return mapToSelf(ComposableFunction.SINH);\n     }\n \n     /** {@inheritDoc} */\n \n     /** {@inheritDoc} */\n     public RealVector mapSqrtToSelf() {\n-        try {\n-            return mapToSelf(ComposableFunction.SQRT);\n-        } catch (MathUserException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n+        return mapToSelf(ComposableFunction.SQRT);\n     }\n \n     /** {@inheritDoc} */\n \n     /** {@inheritDoc} */\n     public RealVector mapTanToSelf() {\n-        try {\n-            return mapToSelf(ComposableFunction.TAN);\n-        } catch (MathUserException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n+        return mapToSelf(ComposableFunction.TAN);\n     }\n \n     /** {@inheritDoc} */\n \n     /** {@inheritDoc} */\n     public RealVector mapTanhToSelf() {\n-        try {\n-            return mapToSelf(ComposableFunction.TANH);\n-        } catch (MathUserException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n+        return mapToSelf(ComposableFunction.TANH);\n     }\n \n     /** {@inheritDoc} */\n \n     /** {@inheritDoc} */\n     public RealVector mapUlpToSelf() {\n-        try {\n-            return mapToSelf(ComposableFunction.ULP);\n-        } catch (MathUserException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n+        return mapToSelf(ComposableFunction.ULP);\n     }\n \n     /** {@inheritDoc} */\n     }\n \n     /** {@inheritDoc} */\n-    public RealVector map(UnivariateRealFunction function) throws MathUserException {\n+    public RealVector map(UnivariateRealFunction function) {\n         return copy().mapToSelf(function);\n     }\n \n     /** {@inheritDoc} */\n-    public RealVector mapToSelf(UnivariateRealFunction function) throws MathUserException {\n+    public RealVector mapToSelf(UnivariateRealFunction function) {\n         Iterator<Entry> it = (function.value(0) == 0) ? sparseIterator() : iterator();\n         Entry e;\n         while (it.hasNext() && (e = it.next()) != null) {", "timestamp": 1290349224, "metainfo": ""}