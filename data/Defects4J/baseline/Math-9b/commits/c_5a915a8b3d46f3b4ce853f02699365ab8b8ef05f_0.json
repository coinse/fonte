{"sha": "5a915a8b3d46f3b4ce853f02699365ab8b8ef05f", "log": "PR: http://nagoya.apache.org/bugzilla/show_bug.cgi?id=20543 Submitted by:\tphil@steitz.com   ", "commit": "\n--- a/src/java/org/apache/commons/math/ValueServer.java\n+++ b/src/java/org/apache/commons/math/ValueServer.java\n import java.net.MalformedURLException;\n \n /**\n- * Generates values for use in simulation applications.<br>\n+ * Generates values for use in simulation applications.\n+ * <p>\n  * How values are generated is determined by the <code>mode</code>\n- * property. <p> \n+ * property. \n+ * <p> \n  * Supported <code>mode</code> values are: <ul>\n  * <li> DIGEST_MODE -- uses an empirical distribution </li>\n  * <li> REPLAY_MODE -- replays data from <code>valuesFile</code></li> \n  * <li> CONSTANT_MODE -- returns <code>mu</code> every time.</li></ul> \n  *\n  * @author  Phil Steitz\n- * @version $Revision: 1.1 $\n+ * @version $Revision: 1.2 $\n  *\n  */\n public class ValueServer {\n     /** Replay data from valuesFilePath */\n     public static final int REPLAY_MODE = 1;      \n     \n-    /** Uniform random variates with mean = mu */\n+    /** Uniform random deviates with mean = mu */\n     public static final int UNIFORM_MODE = 2;    \n     \n-    /** Exponential random variates with mean = mu */\n+    /** Exponential random deviates with mean = mu */\n     public static final int EXPONENTIAL_MODE = 3;  \n     \n-    /** Gaussian random variates with mean = mu, std dev = sigma */\n+    /** Gaussian random deviates with mean = mu, std dev = sigma */\n     public static final int GAUSSIAN_MODE = 4;  \n     \n     /** Always return mu */\n \n     /** \n      * Returns the next generated value, generated according\n-     * to the mode value (see MODE constants) \n+     * to the mode value (see MODE constants). \n      *\n      * @return generated value \n-     * @throws IOException in REPLAY_MODE if file I/O error occurs\n+     * @throws IOException in REPLAY_MODE if a file I/O error occurs\n      */\n     public double getNext() throws IOException {\n         switch (mode) {\n         }\n     }\n     \n-    /** \n-     * Computes the empirical distribution using values from file\n+    /**\n+     * Fills the input array with values generated using getNext() repeatedly.\n+     *\n+     * @param values array to be filled\n+     * @throws IOException in REPLAY_MODE if a file I/O error occurs\n+     */\n+    public void fill(double[] values) throws IOException {\n+        for (int i = 0; i < values.length; i++) {\n+            values[i] = getNext();\n+        }\n+    }\n+    \n+    /**\n+     * Returns an array of length <code>length</code> with values generated \n+     * using getNext() repeatedly.\n+     *\n+     * @param length length of output array\n+     * @return array of generated values\n+     * @throws IOException in REPLAY_MODE if a file I/O error occurs\n+     */\n+    public double[] fill(int length) throws IOException {\n+        double[] out = new double[length];\n+        for (int i = 0; i < length; i++) {\n+            out[i] = getNext();\n+        }\n+        return out;\n+    }       \n+    \n+    /** \n+     * Computes the empirical distribution using values from the file\n      * in <code>valuesFilePath</code>, using the default number of bins.\n      * <p>\n      * <code>valuesFileURL</code> must exist and be\n      * This method must be called before using <code>getNext()</code>\n      * with <code>mode = DISGEST_MODE</code>\n      *\n+     * @param binCount the number of bins used in computing the empirical\n+     * distribution\n      * @throws IOException if an error occurs reading the input file\n      */\n     public void computeDistribution(int binCount) \n-            throws IOException{\n+            throws IOException {\n         empiricalDistribution = new EmpiricalDistributionImpl(binCount);\n         empiricalDistribution.load(valuesFileURL.getFile());\n         mu = empiricalDistribution.getSampleStats().getMean();\n         sigma = empiricalDistribution.getSampleStats().getStandardDeviation();\n     }\n     \n+    /** Getter for property mode.\n+     * @return Value of property mode.\n+     */\n+    public int getMode() {\n+        return mode;\n+    }\n+    \n+    /** Setter for property mode.\n+     * @param mode New value of property mode.\n+     */\n+    public void setMode(int mode) {\n+        this.mode = mode;\n+    }\n+    \n+    /** Getter for property valuesFilePath.\n+     * @return Value of property valuesFilePath.\n+     */\n+    public String getValuesFileURL() {\n+        return valuesFileURL.toString();\n+    }\n+    \n+    /** Setter for property valuesFilePath.\n+     * @param url New value of property valuesFilePath.\n+     * @throws MalformedURLException if url is not well formed\n+     */\n+    public void setValuesFileURL(String url) throws MalformedURLException {\n+        this.valuesFileURL = new URL(url);\n+    }\n+    \n+    /** Getter for property empiricalDistribution.\n+     * @return Value of property empiricalDistribution.\n+     */\n+    public EmpiricalDistribution getEmpiricalDistribution() {\n+        return empiricalDistribution;\n+    }    \n+    \n+    /**  \n+     * Opens <code>valuesFilePath</code> to use in REPLAY_MODE.\n+     *\n+     * @throws IOException if an error occurs opening the file\n+     */\n+    public void openReplayFile() throws IOException {\n+        filePointer = new BufferedReader(new FileReader\n+                            (new File(valuesFileURL.getFile())));\n+    }\n+    \n+    /** \n+     * Closes <code>valuesFilePath</code> after use in REPLAY_MODE.\n+     *\n+     * @throws IOException if an error occurs closing the file\n+     */\n+    public void closeReplayFile() throws IOException {\n+        if (filePointer != null) {\n+            filePointer.close();\n+            filePointer = null;\n+        }     \n+    }\n+    \n+    /** Getter for property mu.\n+     * @return Value of property mu.\n+     */\n+    public double getMu() {\n+        return mu;\n+    }\n+    \n+    /** Setter for property mu.\n+     * @param mu New value of property mu.\n+     */\n+    public void setMu(double mu) {\n+        this.mu = mu;\n+    }\n+    \n+    /** Getter for property sigma.\n+     * @return Value of property sigma.\n+     */\n+    public double getSigma() {\n+        return sigma;\n+    }\n+    \n+    /** Setter for property sigma.\n+     * @param sigma New value of property sigma.\n+     */\n+    public void setSigma(double sigma) {\n+        this.sigma = sigma;\n+    }\n+    \n+    //------------- private methods ---------------------------------\n+    \n     /** \n      * Gets a random value in DIGEST_MODE.\n      * <p>\n      * must have completed successfully; otherwise an \n      * <code>IllegalStateException</code> will be thrown</li></ul>\n      *\n-     * @return next random value form the empirical distribution digest \n+     * @return next random value from the empirical distribution digest \n      */\n     private double getNextDigest() {\n         if ((empiricalDistribution == null) ||\n      * @return next value from the replay file\n      * @throws IOException if there is a problem reading from the file\n      */\n-    private double getNextReplay() throws IOException{\n+    private double getNextReplay() throws IOException {\n         String str = null;\n         if (filePointer == null) {\n             throw new IllegalStateException(\"replay file not open\");\n     }\n     \n     /** \n-     * Gets a uniformly distributed random value with mean = mu \n+     * Gets a uniformly distributed random value with mean = mu. \n      *\n      * @return random uniform value\n      */\n     private double getNextUniform() {\n-        return 2.0*mu*Math.random();\n-    }\n-    \n-    /** \n-     * Gets an exponentially distributed random value with mean = mu \n+        return randomData.nextUniform(0, 2 * mu);\n+    }\n+    \n+    /** \n+     * Gets an exponentially distributed random value with mean = mu. \n      *\n      * @return random exponential value\n      */\n     \n     /** \n      * Gets a Gaussian distributed random value with mean = mu\n-     * and standard deviation = sigma\n+     * and standard deviation = sigma.\n      *\n      * @return random Gaussian value\n      */\n     private double getNextGaussian() {\n-        return randomData.nextGaussian(mu,sigma);\n-    }\n-    \n-    /** Getter for property mode.\n-     * @return Value of property mode.\n-     */\n-    public int getMode() {\n-        return mode;\n-    }\n-    \n-    /** Setter for property mode.\n-     * @param mode New value of property mode.\n-     */\n-    public void setMode(int mode) {\n-        this.mode = mode;\n-    }\n-    \n-    /** Getter for property valuesFilePath.\n-     * @return Value of property valuesFilePath.\n-     */\n-    public String getValuesFileURL() {\n-        return valuesFileURL.toString();\n-    }\n-    \n-    /** Setter for property valuesFilePath.\n-     * @param valuesFilePath New value of property valuesFilePath.\n-     */\n-    public void setValuesFileURL(String URL) throws MalformedURLException {\n-        this.valuesFileURL = new URL(URL);\n-    }\n-    \n-    /** Getter for property empiricalDistribution.\n-     * @return Value of property empiricalDistribution.\n-     */\n-    public EmpiricalDistribution getEmpiricalDistribution() {\n-        return empiricalDistribution;\n-    }    \n-    \n-    /**  \n-     * Opens <code>valuesFilePath</code> to use in REPLAY_MODE\n-     *\n-     * @throws IOException if an error occurs opening the file\n-     */\n-    public void openReplayFile() throws IOException {\n-        filePointer = new BufferedReader(new FileReader\n-                            (new File(valuesFileURL.getFile())));\n-    }\n-    \n-    /** \n-     * Closes <code>valuesFilePath</code> after use in REPLAY_MODE\n-     *\n-     * @throws IOException if an error occurs closing the file\n-     */\n-    public void closeReplayFile() throws IOException {\n-        if (filePointer != null) {\n-            filePointer.close();\n-        }     \n+        return randomData.nextGaussian(mu, sigma);\n     }\n     \n }\n--- a/src/test/org/apache/commons/math/ValueServerTest.java\n+++ b/src/test/org/apache/commons/math/ValueServerTest.java\n  * Test cases for the ValueServer class.\n  *\n  * @author  Phil Steitz\n- * @version $Revision: 1.3 $\n+ * @version $Revision: 1.4 $\n  */\n \n public final class ValueServerTest extends TestCase {\n         double next = 0.0;\n         double tolerance = 0.1;\n         vs.computeDistribution();\n+        assertTrue(\"empirical distribution property\", \n+            vs.getEmpiricalDistribution() != null);\n         Univariate stats = new UnivariateImpl();\n         for (int i = 1; i < 1000; i++) {\n             next = vs.getNext();\n         }    \n         assertEquals(\"mean\", 5.069831575018909, stats.getMean(), tolerance);\n         assertEquals\n-         (\"std dev\", 1.0173699343977738, stats.getStandardDeviation(), tolerance);\n+         (\"std dev\", 1.0173699343977738, stats.getStandardDeviation(), \n+            tolerance);\n+        \n+        vs.computeDistribution(500);\n+        stats = new UnivariateImpl();\n+        for (int i = 1; i < 1000; i++) {\n+            next = vs.getNext();\n+            stats.addValue(next);\n+        }    \n+        assertEquals(\"mean\", 5.069831575018909, stats.getMean(), tolerance);\n+        assertEquals\n+         (\"std dev\", 1.0173699343977738, stats.getStandardDeviation(), \n+            tolerance);\n+        \n     }\n     \n     /**\n         assertEquals(compareValue,firstDataValue,tolerance);\n         compareValue = vs.getNext();\n         assertEquals(compareValue,secondDataValue,tolerance);\n-    }\n+        vs.closeReplayFile();\n+        // make sure no NPE\n+        vs.closeReplayFile();\n+    }\n+    \n+    /** \n+     * Test other ValueServer modes\n+     */\n+    public void testModes() throws Exception {\n+        vs.setMode(ValueServer.CONSTANT_MODE);\n+        vs.setMu(0);\n+        assertEquals(\"constant mode test\",vs.getMu(),vs.getNext(),Double.MIN_VALUE);\n+        vs.setMode(ValueServer.UNIFORM_MODE);\n+        vs.setMu(2);\n+        double val = vs.getNext();\n+        assertTrue(val > 0 && val < 4);\n+        vs.setSigma(1);\n+        vs.setMode(ValueServer.GAUSSIAN_MODE);\n+        val = vs.getNext();\n+        assertTrue(\"gaussian value close enough to mean\",\n+            val < vs.getMu() + 100*vs.getSigma());\n+        vs.setMode(ValueServer.EXPONENTIAL_MODE);\n+        val = vs.getNext();\n+        assertTrue(val > 0);\n+        try {\n+            vs.setMode(1000);\n+            vs.getNext();\n+            fail(\"bad mode, expecting IllegalStateException\");\n+        } catch (IllegalStateException ex) {\n+            ;\n+        }\n+    }\n+    \n+    /**\n+     * Test fill\n+     */\n+    public void testFill() throws Exception {\n+        vs.setMode(ValueServer.CONSTANT_MODE);\n+        vs.setMu(2);\n+        double[] val = new double[5];\n+        vs.fill(val);\n+        for (int i = 0; i < 5; i++) {\n+            assertEquals(\"fill test in place\",2,val[i],Double.MIN_VALUE);\n+        }\n+        double v2[] = vs.fill(3);\n+        for (int i = 0; i < 3; i++) {\n+            assertEquals(\"fill test in place\",2,v2[i],Double.MIN_VALUE);\n+        }\n+    }\n+    \n+    /**\n+     * Test getters to make Clover happy\n+     */\n+    public void testProperties() throws Exception {\n+        vs.setMode(ValueServer.CONSTANT_MODE);\n+        assertEquals(\"mode test\",ValueServer.CONSTANT_MODE,vs.getMode());\n+        vs.setValuesFileURL(\"http://www.apache.org\");\n+        String s = vs.getValuesFileURL();\n+        assertEquals(\"valuesFileURL test\",\"http://www.apache.org\",s);\n+    }\n+        \n+        \n+        \n+        \n+        \n+        \n }", "timestamp": 1054949817, "metainfo": ""}