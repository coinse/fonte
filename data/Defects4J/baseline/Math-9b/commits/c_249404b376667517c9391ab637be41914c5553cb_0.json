{"sha": "249404b376667517c9391ab637be41914c5553cb", "log": "MATH-697 Added consistency check on array sizes.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java\n import org.apache.commons.math.exception.MaxCountExceededException;\n import org.apache.commons.math.exception.TooManyEvaluationsException;\n import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.analysis.MultivariateRealFunction;\n import org.apache.commons.math.optimization.BaseMultivariateRealOptimizer;\n import org.apache.commons.math.optimization.GoalType;\n         if (startPoint == null) {\n             throw new NullArgumentException();\n         }\n+        final int dim = startPoint.length;\n+        if (lower != null &&\n+            lower.length != dim) {\n+            throw new DimensionMismatchException(lower.length, dim);\n+        }\n+        if (upper != null &&\n+            upper.length != dim) {\n+            throw new DimensionMismatchException(upper.length, dim);\n+        }\n \n         // Reset.\n         evaluations.setMaximalCount(maxEval);\n         function = f;\n         goal = goalType;\n         start = startPoint.clone();\n-        final int dim = startPoint.length;\n+\n         if (lower == null) {\n             lowerBound = new double[dim];\n             for (int i = 0; i < dim; i++) {", "timestamp": 1319843578, "metainfo": ""}