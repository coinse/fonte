{"sha": "cc82d38aaf6ec24758a0a6df9535b8204e22ef12", "log": "MATH-927 Made \"BitsStreamGenerator\" class \"Serializable\" to allow cloning of subclasses. Added cloning test for all \"RealDistribution\" classes. Thanks to Dennis Hendriks.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java\n+++ b/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java\n  */\n package org.apache.commons.math3.random;\n \n+import java.io.Serializable;\n+\n import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n import org.apache.commons.math3.util.FastMath;\n \n /** Base class for random number generators that generates bits streams.\n-\n+ *\n  * @version $Id$\n  * @since 2.0\n-\n  */\n-public abstract class BitsStreamGenerator implements RandomGenerator {\n-\n+public abstract class BitsStreamGenerator\n+    implements RandomGenerator,\n+               Serializable {\n+    /** Serializable version identifier */\n+    private static final long serialVersionUID = 20130104L;\n     /** Next gaussian. */\n     private double nextGaussian;\n \n-    /** Creates a new random number generator.\n+    /**\n+     * Creates a new random number generator.\n      */\n     public BitsStreamGenerator() {\n         nextGaussian = Double.NaN;\n--- a/src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java\n \n import java.util.ArrayList;\n import java.util.Collections;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n \n import org.apache.commons.math3.TestUtils;\n import org.apache.commons.math3.util.FastMath;\n          \n     }\n \n+    @Test\n+    public void testDistributionClone()\n+        throws IOException,\n+               ClassNotFoundException {\n+        // Construct a distribution and initialize its internal random\n+        // generator, using a fixed seed for deterministic results.\n+        distribution.reseedRandomGenerator(123);\n+        distribution.sample();\n+\n+        // Clone the distribution.\n+        final RealDistribution cloned = deepClone();\n+\n+        // Make sure they still produce the same samples.\n+        final double s1 = distribution.sample();\n+        final double s2 = cloned.sample();\n+        Assert.assertEquals(s1, s2, 0d);\n+    }\n+\n     //------------------ Getters / Setters for test instance data -----------\n     /**\n      * @return Returns the cumulativeTestPoints.\n         this.tolerance = tolerance;\n     }\n \n+    /**\n+     * Serialization and deserialization loop of the {@link #distribution}.\n+     */\n+    private RealDistribution deepClone()\n+        throws IOException,\n+               ClassNotFoundException {\n+        // Serialize to byte array.\n+        final ByteArrayOutputStream bOut = new ByteArrayOutputStream();\n+        final ObjectOutputStream oOut = new ObjectOutputStream(bOut);\n+        oOut.writeObject(distribution);\n+        final byte[] data = bOut.toByteArray();\n+\n+        // Deserialize from byte array.\n+        final ByteArrayInputStream bIn = new ByteArrayInputStream(data);\n+        final ObjectInputStream oIn = new ObjectInputStream(bIn);\n+        final Object clone = oIn.readObject();\n+        oIn.close();\n+\n+        return (RealDistribution) clone;\n+    }\n }", "timestamp": 1357302524, "metainfo": ""}