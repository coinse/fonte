{"sha": "cdd8d43765055fbb3f0010a81fc9f3d4e5d137cb", "log": "Javadoc fix.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java\n+++ b/src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java\n \n /**\n  * Implements Chi-Square test statistics.\n- * <p>This implementation handles both, known and unknown distributions.</p>\n- * <p>Two samples tests are used when the distribution is unknown <i>a priori</i>\n- * but provided by one sample. We compare the second sample against the first.</p>\n+ *\n+ * <p>This implementation handles both known and unknown distributions.</p>\n+ *\n+ * <p>Two samples tests can be used when the distribution is unknown <i>a priori</i>\n+ * but provided by one sample, or when the hypothesis under test is that the two\n+ * samples come from the same underlying distribution.</p>\n  *\n  * @version $Id$\n  */\n--- a/src/main/java/org/apache/commons/math3/stat/inference/TestUtils.java\n+++ b/src/main/java/org/apache/commons/math3/stat/inference/TestUtils.java\n     /** Singleton OneWayAnova instance. */\n     private static final OneWayAnova ONE_WAY_ANANOVA = new OneWayAnova();\n \n+    /** Singleton G-Test instance. */\n+    private static final GTest G_TEST = new GTest();\n+\n     /**\n      * Prevent instantiation.\n      */\n         return ONE_WAY_ANANOVA.anovaTest(categoryData, alpha);\n     }\n \n+     /**\n+     * @see org.apache.commons.math3.stat.inference.GTest#gValueGoodnessOfFit(double[], long[])\n+     */\n+    public static double gValue(final double[] expected, final long[] observed)\n+        throws NotPositiveException, NotStrictlyPositiveException,\n+        DimensionMismatchException {\n+        return G_TEST.gValueGoodnessOfFit(expected, observed);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math3.stat.inference.GTest#gTestGoodnessOfFitPValue( double[],  long[] )\n+     */\n+    public static double gTest_pValue(final double[] expected, final long[] observed)\n+        throws NotPositiveException, NotStrictlyPositiveException,\n+        DimensionMismatchException, MaxCountExceededException {\n+        return G_TEST.gTestGoodnessOfFitPValue(expected, observed);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math3.stat.inference.GTest#gTestGoodnessOfFitIntrinsicPValue(double[], long[] )\n+     */\n+    public static double gTestIntrinsic_pValue(final double[] expected, final long[] observed)\n+        throws NotPositiveException, NotStrictlyPositiveException,\n+        DimensionMismatchException, MaxCountExceededException {\n+        return G_TEST.gTestGoodnessOfFitIntrinsicPValue(expected, observed);\n+    }\n+\n+     /**\n+     * @see org.apache.commons.math3.stat.inference.GTest#gTestGoodnessOfFit( double[],long[],double)\n+     */\n+    public static boolean gTest(final double[] expected, final long[] observed,\n+                                final double alpha)\n+        throws NotPositiveException, NotStrictlyPositiveException,\n+        DimensionMismatchException, OutOfRangeException, MaxCountExceededException {\n+        return G_TEST.gTestGoodnessOfFit(expected, observed, alpha);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math3.stat.inference.GTest#gValueDataSetsComparison(long[], long[])\n+     */\n+    public static double gValueDataSetsComparison(final long[] observed1,\n+                                                  final long[] observed2)\n+        throws DimensionMismatchException, NotPositiveException, ZeroException {\n+        return G_TEST.gValueDataSetsComparison(observed1, observed2);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math3.stat.inference.GTest#rootLogLikelihoodRatio(long, long, long, long)\n+     */\n+    public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22)\n+        throws DimensionMismatchException, NotPositiveException, ZeroException {\n+        return G_TEST.rootLogLikelihoodRatio(k11, k12, k21, k22);\n+    }\n+\n+\n+    /**\n+     * @see org.apache.commons.math3.stat.inference.ChiSquareTest#gTestDataSetsComparisonPValue(long[], long[])\n+     *\n+     */\n+    public static double gTestDataSetsComparison_pValue(final long[] observed1,\n+                                                        final long[] observed2)\n+        throws DimensionMismatchException, NotPositiveException, ZeroException,\n+        MaxCountExceededException {\n+        return G_TEST.gTestDataSetsComparisonPValue(observed1, observed2);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math3.stat.inference.ChiSquareTest#gTestDataSetsComparison(double[],long[],double)\n+     */\n+    public static boolean gTestDataSetsComparison(final long[] observed1,\n+                                                  final long[] observed2,\n+                                                  final double alpha)\n+        throws DimensionMismatchException, NotPositiveException,\n+        ZeroException, OutOfRangeException, MaxCountExceededException {\n+        return G_TEST.gTestDataSetsComparison(observed1, observed2, alpha);\n+    }\n+\n     // CHECKSTYLE: resume JavadocMethodCheck\n \n }", "timestamp": 1352062281, "metainfo": ""}