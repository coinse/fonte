{"sha": "2731fdc342f687772b694fb141452ef99d8301c5", "log": "MATH-170.  added SynchronizedDescriptiveStatistics class.  ", "commit": "\n--- a/src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java\n /*\n  * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- * \n- *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law\n+ * or agreed to in writing, software distributed under the License is\n+ * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the specific language\n+ * governing permissions and limitations under the License.\n  */\n package org.apache.commons.math.stat.descriptive;\n \n import junit.framework.Test;\n-import junit.framework.TestCase;\n import junit.framework.TestSuite;\n-\n-import org.apache.commons.math.random.RandomData;\n-import org.apache.commons.math.random.RandomDataImpl;\n \n /**\n  * Test cases for the {@link Univariate} class.\n- *\n- * @version $Revision$ $Date$\n+ * @version $Revision$ $Date: 2007-08-16 15:36:33 -0500 (Thu, 16 Aug\n+ *          2007) $\n  */\n-\n-public final class DescriptiveStatisticsImplTest extends TestCase {\n-    private double one = 1;\n-    private float two = 2;\n-    private int three = 3;\n-    private double mean = 2;\n-    private double sumSq = 18;\n-    private double sum = 8;\n-    private double var = 0.666666666666666666667;\n-    private double std = Math.sqrt(var);\n-    private double n = 4;\n-    private double min = 1;\n-    private double max = 3;\n-    private double tolerance = 10E-15;\n+public final class DescriptiveStatisticsImplTest extends DescriptiveStatisticsTest {\n \n     public DescriptiveStatisticsImplTest(String name) {\n         super(name);\n     }\n-    \n-    public void setUp() {  \n-    }\n-    \n+\n     public static Test suite() {\n         TestSuite suite = new TestSuite(DescriptiveStatisticsImplTest.class);\n-        suite.setName(\"DescriptiveStatistics Tests\");\n+        suite.setName(\"DescriptiveStatisticsImpl Tests\");\n         return suite;\n     }\n-    \n-    /** test stats */\n-    public void testStats() {\n-        DescriptiveStatistics u = DescriptiveStatistics.newInstance(); \n-        assertEquals(\"total count\",0,u.getN(),tolerance);\n-        u.addValue(one);\n-        u.addValue(two);\n-        u.addValue(two);\n-        u.addValue(three);\n-        assertEquals(\"N\",n,u.getN(),tolerance);\n-        assertEquals(\"sum\",sum,u.getSum(),tolerance);\n-        assertEquals(\"sumsq\",sumSq,u.getSumsq(),tolerance);\n-        assertEquals(\"var\",var,u.getVariance(),tolerance);\n-        assertEquals(\"std\",std,u.getStandardDeviation(),tolerance);\n-        assertEquals(\"mean\",mean,u.getMean(),tolerance);\n-        assertEquals(\"min\",min,u.getMin(),tolerance);\n-        assertEquals(\"max\",max,u.getMax(),tolerance);\n-        u.clear();\n-        assertEquals(\"total count\",0,u.getN(),tolerance);    \n-    }     \n-    \n-    public void testN0andN1Conditions() throws Exception {\n-        DescriptiveStatistics u = DescriptiveStatistics.newInstance(); \n-                \n-            assertTrue(\"Mean of n = 0 set should be NaN\", \n-                Double.isNaN( u.getMean() ) );\n-            assertTrue(\"Standard Deviation of n = 0 set should be NaN\", \n-                Double.isNaN( u.getStandardDeviation() ) );\n-            assertTrue(\"Variance of n = 0 set should be NaN\",\n-                Double.isNaN(u.getVariance() ) );\n \n-            u.addValue(one);\n-\n-            assertTrue( \"Mean of n = 1 set should be value of single item n1\",\n-                u.getMean() == one);\n-            assertTrue( \"StdDev of n = 1 set should be zero, instead it is: \" \n-                + u.getStandardDeviation(), u.getStandardDeviation() == 0);\n-            assertTrue( \"Variance of n = 1 set should be zero\", \n-                u.getVariance() == 0);  \n+    protected DescriptiveStatistics createDescriptiveStatistics() {\n+        return new DescriptiveStatisticsImpl();\n     }\n-    \n-    public void testSkewAndKurtosis() {\n-        DescriptiveStatistics u = DescriptiveStatistics.newInstance(); \n-        \n-        double[] testArray = \n-        { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,\n-          9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };\n-        for( int i = 0; i < testArray.length; i++) {\n-            u.addValue( testArray[i]);\n-        }\n-        \n-        assertEquals(\"mean\", 12.40455, u.getMean(), 0.0001);\n-        assertEquals(\"variance\", 10.00236, u.getVariance(), 0.0001);\n-        assertEquals(\"skewness\", 1.437424, u.getSkewness(), 0.0001);\n-        assertEquals(\"kurtosis\", 2.37719, u.getKurtosis(), 0.0001);\n-    }\n-\n-    public void testProductAndGeometricMean() throws Exception {\n-        DescriptiveStatistics u = DescriptiveStatistics.newInstance(); \n-        u.setWindowSize(10);\n-                \n-        u.addValue( 1.0 );\n-        u.addValue( 2.0 );\n-        u.addValue( 3.0 );\n-        u.addValue( 4.0 );\n-\n-        //assertEquals( \"Product not expected\", \n-        //    24.0, u.getProduct(), Double.MIN_VALUE );\n-        assertEquals( \"Geometric mean not expected\", \n-            2.213364, u.getGeometricMean(), 0.00001 );\n-\n-        // Now test rolling - StorelessDescriptiveStatistics should discount the contribution\n-        // of a discarded element\n-        for( int i = 0; i < 10; i++ ) {\n-            u.addValue( i + 2 );\n-        }\n-        // Values should be (2,3,4,5,6,7,8,9,10,11)\n-        \n-        //assertEquals( \"Product not expected\", 39916800.0, \n-        //    u.getProduct(), 0.00001 );\n-        assertEquals( \"Geometric mean not expected\", 5.755931, \n-            u.getGeometricMean(), 0.00001 );\n-    }\n-    \n-    public void testGetSortedValues() {\n-        double[] test1 = {5,4,3,2,1};\n-        double[] test2 = {5,2,1,3,4,0};\n-        double[] test3 = {1};\n-        int[] testi = null;\n-        double[] test4 = null;\n-        RandomData rd = new RandomDataImpl();\n-        tstGetSortedValues(test1);\n-        tstGetSortedValues(test2);\n-        tstGetSortedValues(test3);\n-        for (int i = 0; i < 10; i++) {\n-            testi = rd.nextPermutation(10,6);\n-            test4 = new double[6];\n-            for (int j = 0; j < testi.length; j++) {\n-                test4[j] = (double) testi[j];\n-            }\n-            tstGetSortedValues(test4);\n-        }\n-        for (int i = 0; i < 10; i++) {\n-            testi = rd.nextPermutation(10,5);\n-            test4 = new double[5];\n-            for (int j = 0; j < testi.length; j++) {\n-                test4[j] = (double) testi[j];\n-            }\n-            tstGetSortedValues(test4);\n-        }        \n-    }\n-    \n-        \n-    private void tstGetSortedValues(double[] test) {\n-        DescriptiveStatistics u = DescriptiveStatistics.newInstance(); \n-        for (int i = 0; i < test.length; i++) {\n-            u.addValue(test[i]);\n-        }\n-        double[] sorted = u.getSortedValues();\n-        if (sorted.length != test.length) {\n-            fail(\"wrong length for sorted values array\");\n-        }\n-        for (int i = 0; i < sorted.length-1; i++) {\n-            if (sorted[i] > sorted[i+1]) {\n-                fail(\"sorted values out of sequence\");\n-            }\n-        }\n-    }\n-    \n-    public void testPercentiles() {\n-        double[] test = {5,4,3,2,1};\n-        DescriptiveStatistics u = DescriptiveStatistics.newInstance(); \n-        for (int i = 0; i < test.length; i++) {\n-            u.addValue(test[i]);\n-        }\n-        assertEquals(\"expecting min\",1,u.getPercentile(5),10E-12);\n-        assertEquals(\"expecting max\",5,u.getPercentile(99),10E-12);\n-        assertEquals(\"expecting middle\",3,u.getPercentile(50),10E-12);\n-        try {\n-            u.getPercentile(0);\n-            fail(\"expecting IllegalArgumentException for getPercentile(0)\");\n-        } catch (IllegalArgumentException ex) {\n-            ;\n-        }\n-        try {\n-            u.getPercentile(120);\n-            fail(\"expecting IllegalArgumentException for getPercentile(120)\");\n-        } catch (IllegalArgumentException ex) {\n-            ;\n-        }\n-        \n-        u.clear();\n-        double[] test2 = {1,2,3,4};\n-        for (int i = 0; i < test2.length; i++) {\n-            u.addValue(test2[i]);\n-        }\n-        assertEquals(\"Q1\",1.25,u.getPercentile(25),10E-12);\n-        assertEquals(\"Q3\",3.75,u.getPercentile(75),10E-12);\n-        assertEquals(\"Q2\",2.5,u.getPercentile(50),10E-12);\n-        \n-        u.clear();\n-        double[] test3 = {1};\n-        for (int i = 0; i < test3.length; i++) {\n-            u.addValue(test3[i]);\n-        }\n-        assertEquals(\"Q1\",1,u.getPercentile(25),10E-12);\n-        assertEquals(\"Q3\",1,u.getPercentile(75),10E-12);\n-        assertEquals(\"Q2\",1,u.getPercentile(50),10E-12);\n-        \n-        u.clear();\n-        RandomData rd = new RandomDataImpl();\n-        int[] testi = rd.nextPermutation(100,100); // will contain 0-99\n-        for (int j = 0; j < testi.length; j++) {\n-            u.addValue((double) testi[j]);  //OK, laugh at me for the cast\n-        }\n-        for (int i = 1; i < 100; i++) {\n-            assertEquals(\"percentile \" + i,\n-                (double) i-1 + (double) i*(.01), u.getPercentile(i),10E-12);\n-        }\n-        \n-        u.clear();\n-        double[] test4 = {1,2,3,4,100};\n-        for (int i = 0; i < test4.length; i++) {\n-            u.addValue(test4[i]);\n-        }\n-        assertEquals(\"80th\",80.8,u.getPercentile(80),10E-12);\n-        \n-        u.clear();\n-        assertTrue(\"empty value set should return NaN\",\n-            Double.isNaN(u.getPercentile(50)));\n-    }\n-                                     \n }\n-\n--- a/src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java\n  *\n  * @version $Revision$ $Date$\n  */\n-\n-public final class DescriptiveStatisticsTest extends TestCase {\n+public abstract class DescriptiveStatisticsTest extends TestCase {\n+    private double var = 0.666666666666666666667;\n+    private double max = 3;\n+    private double mean = 2;\n+    private double min = 1;\n+    private double n = 4;\n     private double one = 1;\n+    private double std = Math.sqrt(var);\n+    private double sum = 8;\n+    private double sumSq = 18;\n+    private int three = 3;\n+    private double tolerance = 10E-15;\n     private float two = 2;\n-    private int three = 3;\n-    private double mean = 2;\n-    private double sumSq = 18;\n-    private double sum = 8;\n-    private double var = 0.666666666666666666667;\n-    private double std = Math.sqrt(var);\n-    private double n = 4;\n-    private double min = 1;\n-    private double max = 3;\n-    private double tolerance = 10E-15;\n     \n     public DescriptiveStatisticsTest(String name) {\n         super(name);\n-    }\n-    \n-    public void setUp() {  \n     }\n     \n     public static Test suite() {\n         return suite;\n     }\n     \n-    /** test stats */\n-    public void testStats() {\n-        DescriptiveStatistics u = DescriptiveStatistics.newInstance(); \n-        assertEquals(\"total count\",0,u.getN(),tolerance);\n-        u.addValue(one);\n-        u.addValue(two);\n-        u.addValue(two);\n-        u.addValue(three);\n-        assertEquals(\"N\",n,u.getN(),tolerance);\n-        assertEquals(\"sum\",sum,u.getSum(),tolerance);\n-        assertEquals(\"sumsq\",sumSq,u.getSumsq(),tolerance);\n-        assertEquals(\"var\",var,u.getVariance(),tolerance);\n-        assertEquals(\"std\",std,u.getStandardDeviation(),tolerance);\n-        assertEquals(\"mean\",mean,u.getMean(),tolerance);\n-        assertEquals(\"min\",min,u.getMin(),tolerance);\n-        assertEquals(\"max\",max,u.getMax(),tolerance);\n-        u.clear();\n-        assertEquals(\"total count\",0,u.getN(),tolerance);    \n-    }     \n-    \n-    public void testN0andN1Conditions() throws Exception {\n-        DescriptiveStatistics u = DescriptiveStatistics.newInstance();\n-                \n-            assertTrue(\"Mean of n = 0 set should be NaN\", \n-                Double.isNaN( u.getMean() ) );\n-            assertTrue(\"Standard Deviation of n = 0 set should be NaN\", \n-                Double.isNaN( u.getStandardDeviation() ) );\n-            assertTrue(\"Variance of n = 0 set should be NaN\",\n-                Double.isNaN(u.getVariance() ) );\n-\n-            u.addValue(one);\n-\n-            assertTrue( \"Mean of n = 1 set should be value of single item n1\",\n-                u.getMean() == one);\n-            assertTrue( \"StdDev of n = 1 set should be zero, instead it is: \" \n-                + u.getStandardDeviation(), u.getStandardDeviation() == 0);\n-            assertTrue( \"Variance of n = 1 set should be zero\", \n-                u.getVariance() == 0);  \n-    }\n-    \n-    public void testSkewAndKurtosis() {\n-        DescriptiveStatistics u = DescriptiveStatistics.newInstance();\n-        \n-        double[] testArray = \n-        { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,\n-          9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };\n-        for( int i = 0; i < testArray.length; i++) {\n-            u.addValue( testArray[i]);\n-        }\n-        \n-        assertEquals(\"mean\", 12.40455, u.getMean(), 0.0001);\n-        assertEquals(\"variance\", 10.00236, u.getVariance(), 0.0001);\n-        assertEquals(\"skewness\", 1.437424, u.getSkewness(), 0.0001);\n-        assertEquals(\"kurtosis\", 2.37719, u.getKurtosis(), 0.0001);\n-    }\n-\n-    public void testProductAndGeometricMean() throws Exception {\n-        DescriptiveStatistics u = DescriptiveStatistics.newInstance();\n-        u.setWindowSize(10);\n-                \n-        u.addValue( 1.0 );\n-        u.addValue( 2.0 );\n-        u.addValue( 3.0 );\n-        u.addValue( 4.0 );\n-\n-        //assertEquals( \"Product not expected\", \n-        //    24.0, u.getProduct(), Double.MIN_VALUE );\n-        assertEquals( \"Geometric mean not expected\", \n-            2.213364, u.getGeometricMean(), 0.00001 );\n-\n-        // Now test rolling - StorelessDescriptiveStatistics should discount the contribution\n-        // of a discarded element\n-        for( int i = 0; i < 10; i++ ) {\n-            u.addValue( i + 2 );\n-        }\n-        // Values should be (2,3,4,5,6,7,8,9,10,11)\n-        \n-        //assertEquals( \"Product not expected\", 39916800.0, \n-        //    u.getProduct(), 0.00001 );\n-        assertEquals( \"Geometric mean not expected\", 5.755931, \n-            u.getGeometricMean(), 0.00001 );\n-    }\n-    \n+    protected abstract DescriptiveStatistics createDescriptiveStatistics();\n+    \n+    public void setUp() {  \n+    }\n+\n     public void testAddValue() {\n         double[] test1 = {5,4,3,2,1,0};\n         double[] test2 = {5,2,1,0,4,3};\n \n-        DescriptiveStatistics stats = DescriptiveStatistics.newInstance();\n+        DescriptiveStatistics stats = createDescriptiveStatistics();\n         stats.setWindowSize(12);\n         \n         for(int i = 0; i < test1.length; i++){\n             //System.out.println(test3[i] + \" \"+test2[i-6]);\n         }  \n          \n-    }\n+    }     \n     \n     public void testGetSortedValues() {\n         double[] test1 = {5,4,3,2,1};\n         }        \n     }\n     \n-        \n-        \n-    private void tstGetSortedValues(double[] test) {\n-        DescriptiveStatistics u = DescriptiveStatistics.newInstance();\n-        u.setWindowSize(test.length);\n-        for (int i = 0; i < test.length; i++) {\n-            u.addValue(test[i]);\n-        }\n-        double[] sorted = u.getSortedValues();\n-        if (sorted.length != test.length) {\n-            fail(\"wrong length for sorted values array\");\n-        }\n-        for (int i = 0; i < sorted.length-1; i++) {\n-            if (sorted[i] > sorted[i+1]) {\n-                fail(\"sorted values out of sequence\");\n-            }\n-        }\n-    }\n-    \n-    public void testPercentiles() {\n-        double[] test = {5,4,3,2,1};\n-        DescriptiveStatistics u = DescriptiveStatistics.newInstance();\n-        u.setWindowSize(110);\n-        for (int i = 0; i < test.length; i++) {\n-            u.addValue(test[i]);\n-        }\n-        assertEquals(\"expecting min\",1,u.getPercentile(5),10E-12);\n-        assertEquals(\"expecting max\",5,u.getPercentile(99),10E-12);\n-        assertEquals(\"expecting middle\",3,u.getPercentile(50),10E-12);\n-        try {\n-            u.getPercentile(0);\n-            fail(\"expecting IllegalArgumentException for getPercentile(0)\");\n-        } catch (IllegalArgumentException ex) {\n-            ;\n-        }\n-        try {\n-            u.getPercentile(120);\n-            fail(\"expecting IllegalArgumentException for getPercentile(120)\");\n-        } catch (IllegalArgumentException ex) {\n-            ;\n-        }\n-        \n-        u.clear();\n-        double[] test2 = {1,2,3,4};\n-        for (int i = 0; i < test2.length; i++) {\n-            u.addValue(test2[i]);\n-        }\n-        assertEquals(\"Q1\",1.25,u.getPercentile(25),10E-12);\n-        assertEquals(\"Q3\",3.75,u.getPercentile(75),10E-12);\n-        assertEquals(\"Q2\",2.5,u.getPercentile(50),10E-12);\n-        \n-        u.clear();\n-        double[] test3 = {1};\n-        for (int i = 0; i < test3.length; i++) {\n-            u.addValue(test3[i]);\n-        }\n-        assertEquals(\"Q1\",1,u.getPercentile(25),10E-12);\n-        assertEquals(\"Q3\",1,u.getPercentile(75),10E-12);\n-        assertEquals(\"Q2\",1,u.getPercentile(50),10E-12);\n-        \n-        u.clear();\n-        RandomData rd = new RandomDataImpl();\n-        int[] testi = rd.nextPermutation(100,100); // will contain 0-99\n-        for (int j = 0; j < testi.length; j++) {\n-            u.addValue((double) testi[j]);  //OK, laugh at me for the cast\n-        }\n-        for (int i = 1; i < 100; i++) {\n-            assertEquals(\"percentile \" + i,\n-                (double) i-1 + (double) i*(.01), u.getPercentile(i),10E-12);\n-        }\n-        \n-        u.clear();\n-        double[] test4 = {1,2,3,4,100};\n-        for (int i = 0; i < test4.length; i++) {\n-            u.addValue(test4[i]);\n-        }\n-        assertEquals(\"80th\",80.8,u.getPercentile(80),10E-12);\n-        \n-        u.clear();\n-        assertTrue(\"empty value set should return NaN\",\n-            Double.isNaN(u.getPercentile(50)));\n-    }\n-                      \n-    /** test stats */\n-    public void testSerialization() {\n-        DescriptiveStatistics u = DescriptiveStatistics.newInstance(); \n-        assertEquals(\"total count\",0,u.getN(),tolerance);\n-        u.addValue(one);\n-        u.addValue(two);\n-        \n-        DescriptiveStatistics u2 = (DescriptiveStatistics)TestUtils.serializeAndRecover(u); \n- \n-        u2.addValue(two);\n-        u2.addValue(three);\n-        \n-        assertEquals(\"N\",n,u2.getN(),tolerance);\n-        assertEquals(\"sum\",sum,u2.getSum(),tolerance);\n-        assertEquals(\"sumsq\",sumSq,u2.getSumsq(),tolerance);\n-        assertEquals(\"var\",var,u2.getVariance(),tolerance);\n-        assertEquals(\"std\",std,u2.getStandardDeviation(),tolerance);\n-        assertEquals(\"mean\",mean,u2.getMean(),tolerance);\n-        assertEquals(\"min\",min,u2.getMin(),tolerance);\n-        assertEquals(\"max\",max,u2.getMax(),tolerance);\n-\n-        u2.clear();\n-        assertEquals(\"total count\",0,u2.getN(),tolerance);    \n-    }       \n+    public void testN0andN1Conditions() throws Exception {\n+        DescriptiveStatistics u = createDescriptiveStatistics();\n+                \n+            assertTrue(\"Mean of n = 0 set should be NaN\", \n+                Double.isNaN( u.getMean() ) );\n+            assertTrue(\"Standard Deviation of n = 0 set should be NaN\", \n+                Double.isNaN( u.getStandardDeviation() ) );\n+            assertTrue(\"Variance of n = 0 set should be NaN\",\n+                Double.isNaN(u.getVariance() ) );\n+\n+            u.addValue(one);\n+\n+            assertTrue( \"Mean of n = 1 set should be value of single item n1\",\n+                u.getMean() == one);\n+            assertTrue( \"StdDev of n = 1 set should be zero, instead it is: \" \n+                + u.getStandardDeviation(), u.getStandardDeviation() == 0);\n+            assertTrue( \"Variance of n = 1 set should be zero\", \n+                u.getVariance() == 0);  \n+    }\n \n     public void testNewInstanceClassNull() {\n         try {\n         }\n     }\n     \n-    public void testWindowSize() {\n-        DescriptiveStatistics u = DescriptiveStatistics.newInstance();\n-        u.setWindowSize(1234);\n-        assertEquals(1234, u.getWindowSize());\n-        \n-        u.addValue(1.0);\n-        u.addValue(2.0);\n-        u.addValue(3.0);\n-        u.addValue(4.0);\n-        u.addValue(5.0);\n-        assertEquals(5, u.getN());\n-        \n-        u.setWindowSize(DescriptiveStatistics.INFINITE_WINDOW);\n-        assertEquals(5, u.getN());\n-    }\n-    \n-    public void testWindowing() {\n-        DescriptiveStatistics u = DescriptiveStatistics.newInstance();\n-        u.setWindowSize(2);\n-        \n-        u.addValue(1.0);\n-        assertEquals(1.0, u.getMean(), tolerance);\n-        \n-        u.addValue(2.0);\n-        assertEquals(1.5, u.getMean(), tolerance);\n-        \n-        u.addValue(3.0);\n-        assertEquals(2.5, u.getMean(), tolerance);\n-        \n-        u.setWindowSize(1);\n-        assertEquals(3.0, u.getMean(), tolerance);\n+    public void testPercentiles() {\n+        double[] test = {5,4,3,2,1};\n+        DescriptiveStatistics u = createDescriptiveStatistics();\n+        u.setWindowSize(110);\n+        for (int i = 0; i < test.length; i++) {\n+            u.addValue(test[i]);\n+        }\n+        assertEquals(\"expecting min\",1,u.getPercentile(5),10E-12);\n+        assertEquals(\"expecting max\",5,u.getPercentile(99),10E-12);\n+        assertEquals(\"expecting middle\",3,u.getPercentile(50),10E-12);\n+        try {\n+            u.getPercentile(0);\n+            fail(\"expecting IllegalArgumentException for getPercentile(0)\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            u.getPercentile(120);\n+            fail(\"expecting IllegalArgumentException for getPercentile(120)\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        \n+        u.clear();\n+        double[] test2 = {1,2,3,4};\n+        for (int i = 0; i < test2.length; i++) {\n+            u.addValue(test2[i]);\n+        }\n+        assertEquals(\"Q1\",1.25,u.getPercentile(25),10E-12);\n+        assertEquals(\"Q3\",3.75,u.getPercentile(75),10E-12);\n+        assertEquals(\"Q2\",2.5,u.getPercentile(50),10E-12);\n+        \n+        u.clear();\n+        double[] test3 = {1};\n+        for (int i = 0; i < test3.length; i++) {\n+            u.addValue(test3[i]);\n+        }\n+        assertEquals(\"Q1\",1,u.getPercentile(25),10E-12);\n+        assertEquals(\"Q3\",1,u.getPercentile(75),10E-12);\n+        assertEquals(\"Q2\",1,u.getPercentile(50),10E-12);\n+        \n+        u.clear();\n+        RandomData rd = new RandomDataImpl();\n+        int[] testi = rd.nextPermutation(100,100); // will contain 0-99\n+        for (int j = 0; j < testi.length; j++) {\n+            u.addValue((double) testi[j]);  //OK, laugh at me for the cast\n+        }\n+        for (int i = 1; i < 100; i++) {\n+            assertEquals(\"percentile \" + i,\n+                (double) i-1 + (double) i*(.01), u.getPercentile(i),10E-12);\n+        }\n+        \n+        u.clear();\n+        double[] test4 = {1,2,3,4,100};\n+        for (int i = 0; i < test4.length; i++) {\n+            u.addValue(test4[i]);\n+        }\n+        assertEquals(\"80th\",80.8,u.getPercentile(80),10E-12);\n+        \n+        u.clear();\n+        assertTrue(\"empty value set should return NaN\",\n+            Double.isNaN(u.getPercentile(50)));\n+    }\n+    \n+        \n+        \n+    public void testProductAndGeometricMean() throws Exception {\n+        DescriptiveStatistics u = createDescriptiveStatistics();\n+        u.setWindowSize(10);\n+                \n+        u.addValue( 1.0 );\n+        u.addValue( 2.0 );\n+        u.addValue( 3.0 );\n+        u.addValue( 4.0 );\n+\n+        //assertEquals( \"Product not expected\", \n+        //    24.0, u.getProduct(), Double.MIN_VALUE );\n+        assertEquals( \"Geometric mean not expected\", \n+            2.213364, u.getGeometricMean(), 0.00001 );\n+\n+        // Now test rolling - StorelessDescriptiveStatistics should discount the contribution\n+        // of a discarded element\n+        for( int i = 0; i < 10; i++ ) {\n+            u.addValue( i + 2 );\n+        }\n+        // Values should be (2,3,4,5,6,7,8,9,10,11)\n+        \n+        //assertEquals( \"Product not expected\", 39916800.0, \n+        //    u.getProduct(), 0.00001 );\n+        assertEquals( \"Geometric mean not expected\", 5.755931, \n+            u.getGeometricMean(), 0.00001 );\n+    }\n+    \n+    /** test stats */\n+    public void testSerialization() {\n+        DescriptiveStatistics u = createDescriptiveStatistics(); \n+        assertEquals(\"total count\",0,u.getN(),tolerance);\n+        u.addValue(one);\n+        u.addValue(two);\n+        \n+        DescriptiveStatistics u2 = (DescriptiveStatistics)TestUtils.serializeAndRecover(u); \n+ \n+        u2.addValue(two);\n+        u2.addValue(three);\n+        \n+        assertEquals(\"N\",n,u2.getN(),tolerance);\n+        assertEquals(\"sum\",sum,u2.getSum(),tolerance);\n+        assertEquals(\"sumsq\",sumSq,u2.getSumsq(),tolerance);\n+        assertEquals(\"var\",var,u2.getVariance(),tolerance);\n+        assertEquals(\"std\",std,u2.getStandardDeviation(),tolerance);\n+        assertEquals(\"mean\",mean,u2.getMean(),tolerance);\n+        assertEquals(\"min\",min,u2.getMin(),tolerance);\n+        assertEquals(\"max\",max,u2.getMax(),tolerance);\n+\n+        u2.clear();\n+        assertEquals(\"total count\",0,u2.getN(),tolerance);    \n+    }\n+                      \n+    public void testSkewAndKurtosis() {\n+        DescriptiveStatistics u = createDescriptiveStatistics();\n+        \n+        double[] testArray = \n+        { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,\n+          9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };\n+        for( int i = 0; i < testArray.length; i++) {\n+            u.addValue( testArray[i]);\n+        }\n+        \n+        assertEquals(\"mean\", 12.40455, u.getMean(), 0.0001);\n+        assertEquals(\"variance\", 10.00236, u.getVariance(), 0.0001);\n+        assertEquals(\"skewness\", 1.437424, u.getSkewness(), 0.0001);\n+        assertEquals(\"kurtosis\", 2.37719, u.getKurtosis(), 0.0001);\n+    }       \n+\n+    /** test stats */\n+    public void testStats() {\n+        DescriptiveStatistics u = createDescriptiveStatistics(); \n+        assertEquals(\"total count\",0,u.getN(),tolerance);\n+        u.addValue(one);\n+        u.addValue(two);\n+        u.addValue(two);\n+        u.addValue(three);\n+        assertEquals(\"N\",n,u.getN(),tolerance);\n+        assertEquals(\"sum\",sum,u.getSum(),tolerance);\n+        assertEquals(\"sumsq\",sumSq,u.getSumsq(),tolerance);\n+        assertEquals(\"var\",var,u.getVariance(),tolerance);\n+        assertEquals(\"std\",std,u.getStandardDeviation(),tolerance);\n+        assertEquals(\"mean\",mean,u.getMean(),tolerance);\n+        assertEquals(\"min\",min,u.getMin(),tolerance);\n+        assertEquals(\"max\",max,u.getMax(),tolerance);\n+        u.clear();\n+        assertEquals(\"total count\",0,u.getN(),tolerance);    \n     }\n     \n     public void testToString() {\n-        DescriptiveStatistics u = DescriptiveStatistics.newInstance();\n+        DescriptiveStatistics u = createDescriptiveStatistics();\n         assertTrue(u.toString().indexOf(\"NaN\") > 0);  \n         assertTrue(u.toString().startsWith(\"DescriptiveStatistics\"));\n         double[] testArray = \n         assertTrue(u.toString().startsWith(\"DescriptiveStatistics\"));\n     }\n     \n+    public void testWindowing() {\n+        DescriptiveStatistics u = createDescriptiveStatistics();\n+        u.setWindowSize(2);\n+        \n+        u.addValue(1.0);\n+        assertEquals(1.0, u.getMean(), tolerance);\n+        \n+        u.addValue(2.0);\n+        assertEquals(1.5, u.getMean(), tolerance);\n+        \n+        u.addValue(3.0);\n+        assertEquals(2.5, u.getMean(), tolerance);\n+        \n+        u.setWindowSize(1);\n+        assertEquals(3.0, u.getMean(), tolerance);\n+    }\n+    \n+    public void testWindowSize() {\n+        DescriptiveStatistics u = createDescriptiveStatistics();\n+        u.setWindowSize(1234);\n+        assertEquals(1234, u.getWindowSize());\n+        \n+        u.addValue(1.0);\n+        u.addValue(2.0);\n+        u.addValue(3.0);\n+        u.addValue(4.0);\n+        u.addValue(5.0);\n+        assertEquals(5, u.getN());\n+        \n+        u.setWindowSize(DescriptiveStatistics.INFINITE_WINDOW);\n+        assertEquals(5, u.getN());\n+    }\n+    \n+    private void tstGetSortedValues(double[] test) {\n+        DescriptiveStatistics u = createDescriptiveStatistics();\n+        u.setWindowSize(test.length);\n+        for (int i = 0; i < test.length; i++) {\n+            u.addValue(test[i]);\n+        }\n+        double[] sorted = u.getSortedValues();\n+        if (sorted.length != test.length) {\n+            fail(\"wrong length for sorted values array\");\n+        }\n+        for (int i = 0; i < sorted.length-1; i++) {\n+            if (sorted[i] > sorted[i+1]) {\n+                fail(\"sorted values out of sequence\");\n+            }\n+        }\n+    }\n+    \n }\n ", "timestamp": 1193809138, "metainfo": ""}