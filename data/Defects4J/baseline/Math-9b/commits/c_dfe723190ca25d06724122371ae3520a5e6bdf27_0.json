{"sha": "dfe723190ca25d06724122371ae3520a5e6bdf27", "log": "Added support for population standard deviation.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java\n \n /**\n  * Computes the sample standard deviation.  The standard deviation\n- * is the positive square root of the variance.  See {@link Variance} for\n- * more information.  This implementation wraps a {@link Variance}\n- * instance.\n+ * is the positive square root of the variance.  This implementation wraps a\n+ * {@link Variance} instance.  The <code>isBiasCorrected</code> property of the\n+ * wrapped Variance instance is exposed, so that this class can be used to\n+ * compute both the \"sample standard deviation\" (the square root of the \n+ * bias-corrected \"sample variance\") or the \"population standard deviation\"\n+ * (the square root of the non-bias-corrected \"population variance\"). See \n+ * {@link Variance} for more information.  \n  * <p>\n  * <strong>Note that this implementation is not synchronized.</strong> If \n  * multiple threads access an instance of this class concurrently, and at least\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $\n+ * @version $Revision: 1.2 $ $Date: 2004/10/11 06:54:05 $\n  */\n public class StandardDeviation extends AbstractStorelessUnivariateStatistic\n     implements Serializable {\n     private Variance variance = null;\n \n     /**\n-     * Constructs a StandardDeviation\n+     * Constructs a StandardDeviation.  Sets the underlying {@link Variance}\n+     * instance's <code>isBiasCorrected</code> property to true.\n      */\n     public StandardDeviation() {\n         variance = new Variance();\n      */\n     public StandardDeviation(final SecondMoment m2) {\n         variance = new Variance(m2);\n+    }\n+    \n+    /**\n+     * Contructs a StandardDeviation with the specified value for the\n+     * <code>isBiasCorrected</code> property.  If this property is set to \n+     * <code>true</code>, the {@link Variance} used in computing results will\n+     * use the bias-corrected, or \"sample\" formula.  See {@link Variance} for\n+     * details.\n+     * \n+     * @param isBiasCorrected  whether or not the variance computation will use\n+     * the bias-corrected formula\n+     */\n+    public StandardDeviation(boolean isBiasCorrected) {\n+        variance = new Variance(isBiasCorrected);\n+    }\n+    \n+    /**\n+     * Contructs a StandardDeviation with the specified value for the\n+     * <code>isBiasCorrected</code> property and the supplied external moment.\n+     * If <code>isBiasCorrected</code> is set to <code>true</code>, the\n+     * {@link Variance} used in computing results will use the bias-corrected,\n+     * or \"sample\" formula.  See {@link Variance} for details.\n+     * \n+     * @param isBiasCorrected  whether or not the variance computation will use\n+     * the bias-corrected formula\n+      * @param m2 the external moment\n+     */\n+    public StandardDeviation(boolean isBiasCorrected, SecondMoment m2) {\n+        variance = new Variance(isBiasCorrected, m2);\n     }\n \n     /**\n         return Math.sqrt(variance.evaluate(values));\n     }\n     \n-    \n     /**\n      * Returns the Standard Deviation of the entries in the specified portion of\n      * the input array, or <code>Double.NaN</code> if the designated subarray\n     public double evaluate(final double[] values, final double mean)  {\n         return Math.sqrt(variance.evaluate(values, mean));\n     }\n+    \n+    /**\n+     * @return Returns the isBiasCorrected.\n+     */\n+    public boolean isBiasCorrected() {\n+        return variance.isBiasCorrected();\n+    }\n+\n+    /**\n+     * @param isBiasCorrected The isBiasCorrected to set.\n+     */\n+    public void setBiasCorrected(boolean isBiasCorrected) {\n+        variance.setBiasCorrected(isBiasCorrected);\n+    }\n }\n--- a/src/test/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java\n /**\n  * Test cases for the {@link UnivariateStatistic} class.\n  * \n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $\n+ * @version $Revision: 1.2 $ $Date: 2004/10/11 06:54:05 $\n  */\n public class StandardDeviationTest extends StorelessUnivariateStatisticAbstractTest{\n \n         std.increment(1d);\n         assertEquals(0d, std.getResult(), 0);\n     }\n+    \n+    /**\n+     * Test population version of variance\n+     */ \n+    public void testPopulation() {\n+        double[] values = {-1.0d, 3.1d, 4.0d, -2.1d, 22d, 11.7d, 3d, 14d};\n+        double sigma = populationStandardDeviation(values);\n+        SecondMoment m = new SecondMoment();\n+        m.evaluate(values);  // side effect is to add values\n+        StandardDeviation s1 = new StandardDeviation();\n+        s1.setBiasCorrected(false);\n+        assertEquals(sigma, s1.evaluate(values), 1E-14);\n+        s1.incrementAll(values);\n+        assertEquals(sigma, s1.getResult(), 1E-14);\n+        s1 = new StandardDeviation(false, m);\n+        assertEquals(sigma, s1.getResult(), 1E-14);     \n+        s1 = new StandardDeviation(false);\n+        assertEquals(sigma, s1.evaluate(values), 1E-14);\n+        s1.incrementAll(values);\n+        assertEquals(sigma, s1.getResult(), 1E-14);     \n+    }\n+    \n+    /**\n+     * Definitional formula for population standard deviation\n+     */\n+    protected double populationStandardDeviation(double[] v) {\n+        double mean = new Mean().evaluate(v);\n+        double sum = 0;\n+        for (int i = 0; i < v.length; i++) {\n+            sum += (v[i] - mean) * (v[i] - mean); \n+        }\n+        return Math.sqrt(sum / (double) v.length);\n+    }\n \n }", "timestamp": 1097477645, "metainfo": ""}