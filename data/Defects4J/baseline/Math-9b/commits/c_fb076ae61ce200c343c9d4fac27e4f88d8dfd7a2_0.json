{"sha": "fb076ae61ce200c343c9d4fac27e4f88d8dfd7a2", "log": "MATH-441 Removed uses of \"FunctionEvaluationException\" and \"MathRuntimeException\".   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java\n+++ b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java\n  */\n package org.apache.commons.math.analysis.polynomials;\n \n-import org.apache.commons.math.exception.FunctionEvaluationException;\n-import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.exception.NoDataException;\n+import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n \n      * <p>\n      * The constructor makes copy of the input arrays and assigns them.</p>\n      *\n-     * @param a the coefficients in Newton form formula\n-     * @param c the centers\n-     * @throws IllegalArgumentException if input arrays are not valid\n-     */\n-    public PolynomialFunctionNewtonForm(double a[], double c[])\n-        throws IllegalArgumentException {\n+     * @param a Coefficients in Newton form formula.\n+     * @param c Centers.\n+     * @throws NullArgumentException if any argument is {@code null}.\n+     * @throws NoDataException if any array has zero length.\n+     * @throws DimensionMismatchException if the size difference between\n+     * {@code a} and {@code c} is not equal to 1.\n+     */\n+    public PolynomialFunctionNewtonForm(double a[], double c[]) {\n \n         verifyInputArray(a, c);\n         this.a = new double[a.length];\n     /**\n      * Calculate the function value at the given point.\n      *\n-     * @param z the point at which the function value is to be computed\n-     * @return the function value\n-     * @throws FunctionEvaluationException if a runtime error occurs\n-     * @see UnivariateRealFunction#value(double)\n-     */\n-    public double value(double z) throws FunctionEvaluationException {\n+     * @param z Point at which the function value is to be computed.\n+     * @return the function value.\n+     */\n+    public double value(double z) {\n        return evaluate(a, c, z);\n     }\n \n      * <p>\n      * Changes made to the returned copy will not affect the polynomial.</p>\n      *\n-     * @return a fresh copy of the centers array\n+     * @return a fresh copy of the centers array.\n      */\n     public double[] getCenters() {\n         double[] out = new double[c.length];\n      * <p>\n      * Changes made to the returned copy will not affect the polynomial.</p>\n      *\n-     * @return a fresh copy of the coefficients array\n+     * @return a fresh copy of the coefficients array.\n      */\n     public double[] getCoefficients() {\n         if (!coefficientsComputed) {\n      * also called <a href=\"http://mathworld.wolfram.com/HornersRule.html\">\n      * Horner's Rule</a> and takes O(N) time.\n      *\n-     * @param a the coefficients in Newton form formula\n-     * @param c the centers\n-     * @param z the point at which the function value is to be computed\n-     * @return the function value\n-     * @throws FunctionEvaluationException if a runtime error occurs\n-     * @throws IllegalArgumentException if inputs are not valid\n-     */\n-    public static double evaluate(double a[], double c[], double z) throws\n-        FunctionEvaluationException, IllegalArgumentException {\n-\n+     * @param a Coefficients in Newton form formula.\n+     * @param c Centers.\n+     * @param z Point at which the function value is to be computed.\n+     * @return the function value.\n+     * @throws NullArgumentException if any argument is {@code null}.\n+     * @throws NoDataException if any array has zero length.\n+     * @throws DimensionMismatchException if the size difference between\n+     * {@code a} and {@code c} is not equal to 1.\n+     */\n+    public static double evaluate(double a[], double c[], double z) {\n         verifyInputArray(a, c);\n \n-        int n = c.length;\n+        final int n = c.length;\n         double value = a[n];\n-        for (int i = n-1; i >= 0; i--) {\n+        for (int i = n - 1; i >= 0; i--) {\n             value = a[i] + (z - c[i]) * value;\n         }\n \n      *\n      * @param a the coefficients in Newton form formula\n      * @param c the centers\n-     * @throws IllegalArgumentException if not valid\n+     * @throws NullArgumentException if any argument is {@code null}.\n+     * @throws NoDataException if any array has zero length.\n+     * @throws DimensionMismatchException if the size difference between\n+     * {@code a} and {@code c} is not equal to 1.\n      * @see org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolator#computeDividedDifference(double[],\n      * double[])\n      */\n-    protected static void verifyInputArray(double a[], double c[]) throws\n-        IllegalArgumentException {\n-\n-        if (a.length < 1 || c.length < 1) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);\n+    protected static void verifyInputArray(double a[], double c[]) {\n+        if (a.length == 0 ||\n+            c.length == 0) {\n+            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);\n         }\n         if (a.length != c.length + 1) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  LocalizedFormats.ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1,\n-                  a.length, c.length);\n+            throw new DimensionMismatchException(LocalizedFormats.ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1,\n+                                                 a.length, c.length);\n         }\n     }\n }", "timestamp": 1289681900, "metainfo": ""}