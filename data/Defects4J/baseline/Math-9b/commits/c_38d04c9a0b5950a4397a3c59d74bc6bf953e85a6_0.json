{"sha": "38d04c9a0b5950a4397a3c59d74bc6bf953e85a6", "log": "improved SOC between AbstractEstimator and its derived classes (changed fields from protected to private, changed methods to final, added counter incrementation final method)  ", "commit": "\n--- a/src/java/org/apache/commons/math/estimation/AbstractEstimator.java\n+++ b/src/java/org/apache/commons/math/estimation/AbstractEstimator.java\n      * @param maxCostEval maximal number of cost evaluations allowed\n      * @see #estimate\n      */\n-    public void setMaxCostEval(int maxCostEval) {\n+    public final void setMaxCostEval(int maxCostEval) {\n         this.maxCostEval = maxCostEval;\n     }\n \n      * \n      * @return number of cost evaluations\n      * */\n-    public int getCostEvaluations() {\n+    public final int getCostEvaluations() {\n         return costEvaluations;\n     }\n \n      * \n      * @return number of jacobian evaluations\n      * */\n-    public int getJacobianEvaluations() {\n+    public final int getJacobianEvaluations() {\n         return jacobianEvaluations;\n     }\n \n      * Update the jacobian matrix.\n      */\n     protected void updateJacobian() {\n-        ++jacobianEvaluations;\n+        incrementJacobianEvaluationsCounter();\n         Arrays.fill(jacobian, 0);\n         for (int i = 0, index = 0; i < rows; i++) {\n             WeightedMeasurement wm = measurements[i];\n                 jacobian[index++] = factor * wm.getPartial(parameters[j]);\n             }\n         }\n+    }\n+\n+    /**\n+     * Increment the jacobian evaluations counter.\n+     */\n+    protected final void incrementJacobianEvaluationsCounter() {\n+      ++jacobianEvaluations;\n     }\n \n     /** \n     protected double cost;\n \n     /** Maximal allowed number of cost evaluations. */\n-    protected int maxCostEval;\n+    private int maxCostEval;\n \n     /** Number of cost evaluations. */\n-    protected int costEvaluations;\n+    private int costEvaluations;\n \n     /** Number of jacobian evaluations. */\n-    protected int jacobianEvaluations;\n+    private int jacobianEvaluations;\n \n }\n--- a/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java\n+++ b/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java\n         do {\n \n             // build the linear problem\n-            ++jacobianEvaluations;\n+            incrementJacobianEvaluationsCounter();\n             RealMatrix b = new RealMatrixImpl(parameters.length, 1);\n             RealMatrix a = new RealMatrixImpl(parameters.length, parameters.length);\n             for (int i = 0; i < measurements.length; ++i) {", "timestamp": 1203069686, "metainfo": ""}