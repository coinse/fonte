{"sha": "8314db7b32c336a254cb7147868587fa5c3e5845", "log": "In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.  See MATH-784.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n      * @throws NumberIsTooSmallException if the number of degrees of freedom is not\n      * positive, i.e. the number of measurements is less or equal to the number of\n      * parameters.\n+     * @deprecated as of version 3.1, {@link #getSigma()} should be used\n+     * instead. It should be emphasized that {@link #guessParametersErrors()} and\n+     * {@link #getSigma()} are <em>not</em> strictly equivalent.\n      */\n     public double[] guessParametersErrors() {\n         if (rows <= cols) {\n             errors[i] = FastMath.sqrt(covar[i][i]) * c;\n         }\n         return errors;\n+    }\n+\n+    /**\n+     * <p>\n+     * Returns an estimate of the standard deviation of the parameters. The\n+     * returned values are the square root of the diagonal coefficients of the\n+     * covariance matrix, {@code sd(a[i]) ~= sqrt(C[i][i])}, where {@code a[i]}\n+     * is the optimized value of the {@code i}-th parameter, and {@code C} is\n+     * the covariance matrix.\n+     * </p>\n+     *\n+     * @return an estimate of the standard deviation of the optimized parameters\n+     * @throws org.apache.commons.math3.linear.SingularMatrixException\n+     * if the covariance matrix cannot be computed.\n+     */\n+    public double[] getSigma() {\n+        double[] sig = new double[cols];\n+        double[][] cov = getCovariances();\n+        for (int i = 0; i < sig.length; ++i) {\n+            sig[i] = FastMath.sqrt(cov[i][i]);\n+        }\n+        return sig;\n     }\n \n     /** {@inheritDoc} */\n--- a/src/main/java/org/apache/commons/math3/special/Gamma.java\n+++ b/src/main/java/org/apache/commons/math3/special/Gamma.java\n \n         return trigamma(x + 1) + 1 / (x * x);\n     }\n+\n+    public static double lanczos(final double x){\n+        double sum = 0.0;\n+        for (int i = LANCZOS.length - 1; i > 0; --i) {\n+            sum = sum + (LANCZOS[i] / (x + i));\n+        }\n+        return sum + LANCZOS[0];\n+    }\n }\n--- a/src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java\n     }\n \n     @Test\n-    public void testGuessParametersErrors() throws IOException {\n+    public void testGetSigma() throws IOException {\n         final StatisticalReferenceDataset dataset;\n         dataset = StatisticalReferenceDatasetFactory.createKirby2();\n         final AbstractLeastSquaresOptimizer optimizer;\n         final double[] w = new double[y.length];\n         Arrays.fill(w, 1.0);\n \n+        final int dof = y.length-a.length;\n         optimizer.optimize(1, dataset.getLeastSquaresProblem(), y, w, a);\n-        final double[] actual = optimizer.guessParametersErrors();\n+        final double[] sig = optimizer.getSigma();\n         final double[] expected = dataset.getParametersStandardDeviations();\n-        for (int i = 0; i < actual.length; i++) {\n+        for (int i = 0; i < sig.length; i++) {\n+            final double actual = FastMath.sqrt(optimizer.getChiSquare()/dof)*sig[i];\n             Assert.assertEquals(dataset.getName() + \", parameter #\" + i,\n-                                actual[i], expected[i], 1E-8 * expected[i]);\n+                                actual, expected[i], 1E-8 * expected[i]);\n         }\n     }\n }", "timestamp": 1336194622, "metainfo": ""}