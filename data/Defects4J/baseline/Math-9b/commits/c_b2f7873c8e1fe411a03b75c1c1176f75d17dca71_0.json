{"sha": "b2f7873c8e1fe411a03b75c1c1176f75d17dca71", "log": "MATH-874 New \"optimize\" method.   ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math3/optimization/InitialGuess.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math3.optimization;\n+\n+/**\n+ * Starting point (first guess) of the optimization procedure.\n+ * <br/>\n+ * Immutable class.\n+ *\n+ * @version $Id$\n+ * @since 3.1\n+ */\n+public class InitialGuess implements OptimizationData {\n+    /** Initial guess. */\n+    private final double[] init;\n+\n+    /**\n+     * @param startPoint Initial guess.\n+     */\n+    public InitialGuess(double[] startPoint) {\n+        init = startPoint.clone();\n+    }\n+\n+    /**\n+     * Gets the initial guess.\n+     *\n+     * @return the initial guess.\n+     */\n+    public double[] getInitialGuess() {\n+        return init.clone();\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math3/optimization/OptimizationData.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.optimization;\n+\n+/**\n+ * Marker interface.\n+ * Implementations will provide functionality (optional or required) needed\n+ * by the optimizers, and those will need to check the actual type of the\n+ * arguments and perform the appropriate cast in order to access the data\n+ * they need.\n+ *\n+ * @version $Id$\n+ * @since 3.1\n+ */\n+public interface OptimizationData {}\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java\n import org.apache.commons.math3.util.Incrementor;\n import org.apache.commons.math3.exception.MaxCountExceededException;\n import org.apache.commons.math3.exception.TooManyEvaluationsException;\n-import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.analysis.MultivariateFunction;\n import org.apache.commons.math3.optimization.BaseMultivariateOptimizer;\n+import org.apache.commons.math3.optimization.OptimizationData;\n import org.apache.commons.math3.optimization.GoalType;\n+import org.apache.commons.math3.optimization.InitialGuess;\n import org.apache.commons.math3.optimization.ConvergenceChecker;\n import org.apache.commons.math3.optimization.PointValuePair;\n import org.apache.commons.math3.optimization.SimpleValueChecker;\n         return function.value(point);\n     }\n \n-    /** {@inheritDoc} */\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @deprecated As of 3.1. Please use\n+     * {@link #optimize(int,MultivariateFunction,GoalType,OptimizationData[])}\n+     * instead.\n+     */\n     public PointValuePair optimize(int maxEval, FUNC f, GoalType goalType,\n-                                       double[] startPoint) {\n+                                   double[] startPoint) {\n         return optimizeInternal(maxEval, f, goalType, startPoint);\n+    }\n+\n+    /**\n+     * Optimize an objective function.\n+     *\n+     * @param maxEval Allowed number of evaluations of the objective function.\n+     * @param f Objective function.\n+     * @param goalType Optimization type.\n+     * @param optData Optimization data. The following data will be looked for:\n+     * <ul>\n+     *  <li>{@link InitialGuess}</li>\n+     * </ul>\n+     * @return the point/value pair giving the optimal value of the objective\n+     * function.\n+     */\n+    public PointValuePair optimize(int maxEval,\n+                                   FUNC f,\n+                                   GoalType goalType,\n+                                   OptimizationData... optData) {\n+        return optimizeInternal(maxEval, f, goalType, optData);\n     }\n \n     /**\n      * if the maximal number of evaluations is exceeded.\n      * @throws org.apache.commons.math3.exception.NullArgumentException if\n      * any argument is {@code null}.\n-     */\n+     * @deprecated As of 3.1. Please use\n+     * {@link #optimize(int,MultivariateFunction,GoalType,OptimizationData[])}\n+     * instead.\n+     */\n+    @Deprecated\n     protected PointValuePair optimizeInternal(int maxEval, MultivariateFunction f, GoalType goalType,\n                                               double[] startPoint) {\n-        // Checks.\n-        if (f == null) {\n-            throw new NullArgumentException();\n-        }\n-        if (goalType == null) {\n-            throw new NullArgumentException();\n-        }\n-        if (startPoint == null) {\n-            throw new NullArgumentException();\n-        }\n-\n-        // Reset.\n+        return optimizeInternal(maxEval, f, goalType, new InitialGuess(startPoint));\n+    }\n+\n+    /**\n+     * Optimize an objective function.\n+     *\n+     * @param maxEval Allowed number of evaluations of the objective function.\n+     * @param f Objective function.\n+     * @param goalType Optimization type.\n+     * @param optData Optimization data. The following data will be looked for:\n+     * <ul>\n+     *  <li>{@link InitialGuess}</li>\n+     * </ul>\n+     * @return the point/value pair giving the optimal value of the objective\n+     * function.\n+     * @throws TooManyEvaluationsException if the maximal number of\n+     * evaluations is exceeded.\n+     */\n+    protected PointValuePair optimizeInternal(int maxEval,\n+                                              MultivariateFunction f,\n+                                              GoalType goalType,\n+                                              OptimizationData... optData)\n+        throws TooManyEvaluationsException {\n         evaluations.setMaximalCount(maxEval);\n         evaluations.resetCount();\n-\n-        // Store optimization problem characteristics.\n         function = f;\n         goal = goalType;\n-        start = startPoint.clone();\n+        parseOptimizationData(optData);\n \n         // Perform computation.\n         return doOptimize();\n     }\n \n     /**\n+     * Scans the list of (required and optional) optimization data that\n+     * characterize the problem.\n+     *\n+     * @param optData Optimization data. The following data will be looked for:\n+     * <ul>\n+     *  <li>{@link InitialGuess}</li>\n+     * </ul>\n+     */\n+    private void parseOptimizationData(OptimizationData... optData) {\n+        // The existing values (as set by the previous call) are reused if\n+        // not provided in the argument list.\n+        for (OptimizationData data : optData) {\n+            if (data instanceof InitialGuess) {\n+                start = ((InitialGuess) data).getInitialGuess();\n+                continue;\n+            }\n+        }\n+    }\n+\n+    /**\n      * @return the optimization type.\n      */\n     public GoalType getGoalType() {\n     /**\n      * Perform the bulk of the optimization algorithm.\n      *\n-     * @return the point/value pair giving the optimal value for the\n+     * @return the point/value pair giving the optimal value of the\n      * objective function.\n      */\n     protected abstract PointValuePair doOptimize();", "timestamp": 1350090542, "metainfo": ""}