{"sha": "57ef0f3b701ebc8150972dd2d8ad912af7e507dd", "log": "Removed JDK 1.4 dependent code. PR# 32538.   ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/InvalidMatrixException.java\n+++ b/src/java/org/apache/commons/math/linear/InvalidMatrixException.java\n  * Thrown when a system attempts an operation on a matrix, and\n  * that matrix does not satisfy the preconditions for the\n  * aforementioned operation.\n- * @version $Revision: 1.7 $ $Date: 2004/07/11 18:43:44 $\n+ * @version $Revision: 1.8 $ $Date: 2004/12/06 05:49:44 $\n  */\n public class InvalidMatrixException extends RuntimeException {\n \n      * Default constructor.\n      */\n     public InvalidMatrixException() {\n-        this(null, null);\n+        this(null);\n     }\n \n     /**\n      * @param message descriptive error message.\n      */\n     public InvalidMatrixException(String message) {\n-        this(message, null);\n+        super(message);\n     }\n \n-    /**\n-     * Construct an exception with the given message and root cause.\n-     * @param message descriptive error message.\n-     * @param cause root cause.\n-     */\n-    public InvalidMatrixException(String message, Throwable cause) {\n-        super(message, cause);\n-    }\n-\n-    /**\n-     * Create an exception with a given root cause.\n-     * @param throwable caught exception causing this problem\n-     */\n-    public InvalidMatrixException(Throwable throwable) {\n-        this(null, throwable);\n-    }\n }\n--- a/src/java/org/apache/commons/math/linear/MatrixIndexException.java\n+++ b/src/java/org/apache/commons/math/linear/MatrixIndexException.java\n /**\n  * Thrown when an operation addresses a matrix coordinate (row,col)\n  * which is outside of the dimensions of a matrix.\n- * @version $Revision: 1.7 $ $Date: 2004/07/11 18:43:44 $\n+ * @version $Revision: 1.8 $ $Date: 2004/12/06 05:49:44 $\n  */\n public class MatrixIndexException extends RuntimeException {\n \n      * Default constructor.\n      */\n     public MatrixIndexException() {\n-        this(null, null);\n-    }\n-\n-    /**\n-     * Construct an exception with the given message.\n-     * @param message descriptive error message.\n-     */\n-    public MatrixIndexException(String message) {\n-        this(message, null);\n+        this(null);\n     }\n \n     /**\n      * Construct an exception with the given message and root cause.\n      * @param message descriptive error message.\n-     * @param cause root cause.\n      */\n-    public MatrixIndexException(String message, Throwable cause) {\n-        super(message, cause);\n+    public MatrixIndexException(String message) {\n+        super(message);\n     }\n \n-    /**\n-     * Create an exception with a given root cause.\n-     * @param throwable caught exception causing this problem\n-     */\n-    public MatrixIndexException(Throwable throwable) {\n-        this(null, throwable);\n-    }\n }\n--- a/src/test/org/apache/commons/math/linear/InvalidMatrixExceptionTest.java\n+++ b/src/test/org/apache/commons/math/linear/InvalidMatrixExceptionTest.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2004/04/27 16:51:52 $\n+ * @version $Revision: 1.2 $ $Date: 2004/12/06 05:49:44 $\n  */\n public class InvalidMatrixExceptionTest extends TestCase {\n     /**\n      */\n     public void testConstructor(){\n         InvalidMatrixException ex = new InvalidMatrixException();\n-        assertNull(ex.getCause());\n         assertNull(ex.getMessage());\n     }\n     \n     public void testConstructorMessage(){\n         String msg = \"message\";\n         InvalidMatrixException ex = new InvalidMatrixException(msg);\n-        assertNull(ex.getCause());\n         assertEquals(msg, ex.getMessage());\n     }\n-    \n-    /**\n-     * \n-     */\n-    public void testConstructorMessageCause(){\n-        String outMsg = \"outer message\";\n-        String inMsg = \"inner message\";\n-        Exception cause = new Exception(inMsg);\n-        InvalidMatrixException ex = new InvalidMatrixException(outMsg, cause);\n-        assertEquals(outMsg, ex.getMessage());\n-        assertEquals(cause, ex.getCause());\n-    }\n-    \n-    /**\n-     * \n-     */\n-    public void testConstructorCause(){\n-        String inMsg = \"inner message\";\n-        Exception cause = new Exception(inMsg);\n-        InvalidMatrixException ex = new InvalidMatrixException(cause);\n-        assertEquals(cause, ex.getCause());\n-    }\n }\n--- a/src/test/org/apache/commons/math/linear/MatrixIndexExceptionTest.java\n+++ b/src/test/org/apache/commons/math/linear/MatrixIndexExceptionTest.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2004/04/27 16:51:52 $\n+ * @version $Revision: 1.2 $ $Date: 2004/12/06 05:49:44 $\n  */\n public class MatrixIndexExceptionTest extends TestCase {\n     /**\n      */\n     public void testConstructor(){\n         MatrixIndexException ex = new MatrixIndexException();\n-        assertNull(ex.getCause());\n         assertNull(ex.getMessage());\n     }\n     \n     public void testConstructorMessage(){\n         String msg = \"message\";\n         MatrixIndexException ex = new MatrixIndexException(msg);\n-        assertNull(ex.getCause());\n         assertEquals(msg, ex.getMessage());\n     }\n-    \n-    /**\n-     * \n-     */\n-    public void testConstructorMessageCause(){\n-        String outMsg = \"outer message\";\n-        String inMsg = \"inner message\";\n-        Exception cause = new Exception(inMsg);\n-        MatrixIndexException ex = new MatrixIndexException(outMsg, cause);\n-        assertEquals(outMsg, ex.getMessage());\n-        assertEquals(cause, ex.getCause());\n-    }\n-    \n-    /**\n-     * \n-     */\n-    public void testConstructorCause(){\n-        String inMsg = \"inner message\";\n-        Exception cause = new Exception(inMsg);\n-        MatrixIndexException ex = new MatrixIndexException(cause);\n-        assertEquals(cause, ex.getCause());\n-    }\n }\n--- a/src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java\n+++ b/src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java\n \n package org.apache.commons.math.stat.data;\n \n-import java.beans.Expression;\n import java.io.BufferedReader;\n import java.io.IOException;\n import java.io.InputStreamReader;\n+import java.lang.reflect.Method;\n import java.net.URL;\n import java.util.HashMap;\n import java.util.Iterator;\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.7 $ $Date: 2004/10/08 05:08:19 $\n+ * @version $Revision: 1.8 $ $Date: 2004/12/06 05:49:44 $\n  */\n public abstract class CertifiedDataAbstractTest extends TestCase {\n \t\n \t\n \tprotected Object getProperty(Object bean, String name) throws Exception{\n \t    // Get the value of prop\n-\t    String prop = \"get\" + name.substring(0,1).toUpperCase() + name.substring(1);\n-        Expression expr = new Expression(bean, prop, new Object[0]);\n-        expr.execute();\n-        return expr.getValue();\n+\t    String prop = \"get\" + name.substring(0,1).toUpperCase() + name.substring(1); \n+        Method meth = bean.getClass().getMethod(prop, new Class[0]);\n+        return meth.invoke(bean, new Object[0]);\n \t}\n }", "timestamp": 1102312184, "metainfo": ""}