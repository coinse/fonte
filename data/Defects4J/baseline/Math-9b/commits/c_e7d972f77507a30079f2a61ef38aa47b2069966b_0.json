{"sha": "e7d972f77507a30079f2a61ef38aa47b2069966b", "log": "improved test coverage  ", "commit": "\n--- a/src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java\n       double scalAbsoluteTolerance = Math.pow(10.0, i);\n       double scalRelativeTolerance = 0.01 * scalAbsoluteTolerance;\n \n-      FirstOrderIntegrator integ = new DormandPrince54Integrator(minStep, maxStep,\n-                                                                 scalAbsoluteTolerance,\n-                                                                 scalRelativeTolerance);\n+      RungeKuttaFehlbergIntegrator integ =\n+          new DormandPrince54Integrator(minStep, maxStep,\n+                                        scalAbsoluteTolerance, scalRelativeTolerance);\n       TestProblemHandler handler = new TestProblemHandler(pb);\n+      integ.setSafety(0.8);\n+      integ.setMaxGrowth(5.0);\n+      integ.setMinReduction(0.3);\n       integ.setStepHandler(handler);\n       integ.integrate(pb,\n                       pb.getInitialTime(), pb.getInitialState(),\n                       pb.getFinalTime(), new double[pb.getDimension()]);\n+      assertEquals(0.8, integ.getSafety(), 1.0e-12);\n+      assertEquals(5.0, integ.getMaxGrowth(), 1.0e-12);\n+      assertEquals(0.3, integ.getMinReduction(), 1.0e-12);\n \n       // the 0.7 factor is only valid for this test\n       // and has been obtained from trial and error\n--- a/src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java\n     throws DerivativeException, IntegratorException {\n \n     try {\n-      TestProblem1 pb  = new TestProblem1();\n-      double minStep   = 0.1 * (pb.getFinalTime() - pb.getInitialTime());\n-      double maxStep   = pb.getFinalTime() - pb.getInitialTime();\n+      TestProblem5 pb  = new TestProblem5();\n+      double minStep   = 0.1 * Math.abs(pb.getFinalTime() - pb.getInitialTime());\n+      double maxStep   = Math.abs(pb.getFinalTime() - pb.getInitialTime());\n       double[] vecAbsoluteTolerance = { 1.0e-20, 1.0e-21 };\n       double[] vecRelativeTolerance = { 1.0e-20, 1.0e-21 };\n \n \n     }\n \n+  }\n+\n+  public void testIntegratorControls()\n+  throws DerivativeException, IntegratorException {\n+\n+    TestProblem3 pb = new TestProblem3(0.999);\n+    GraggBulirschStoerIntegrator integ =\n+        new GraggBulirschStoerIntegrator(0, pb.getFinalTime() - pb.getInitialTime(),\n+                1.0e-8, 1.0e-10);\n+\n+    double errorWithDefaultSettings = getMaxError(integ, pb);\n+\n+    // stability control\n+    integ.setStabilityCheck(true, 2, 1, 0.99);\n+    assertTrue(errorWithDefaultSettings < getMaxError(integ, pb));\n+    integ.setStabilityCheck(true, -1, -1, -1);\n+\n+    integ.setStepsizeControl(0.5, 0.99, 0.1, 2.5);\n+    assertTrue(errorWithDefaultSettings < getMaxError(integ, pb));\n+    integ.setStepsizeControl(-1, -1, -1, -1);\n+\n+    integ.setOrderControl(10, 0.7, 0.95);\n+    assertTrue(errorWithDefaultSettings < getMaxError(integ, pb));\n+    integ.setOrderControl(-1, -1, -1);\n+\n+    integ.setInterpolationControl(true, 3);\n+    assertTrue(errorWithDefaultSettings < getMaxError(integ, pb));\n+    integ.setInterpolationControl(true, -1);\n+\n+  }\n+\n+  private double getMaxError(FirstOrderIntegrator integrator, TestProblemAbstract pb)\n+    throws DerivativeException, IntegratorException {\n+      TestProblemHandler handler = new TestProblemHandler(pb);\n+      integrator.setStepHandler(handler);\n+      integrator.integrate(pb,\n+                           pb.getInitialTime(), pb.getInitialState(),\n+                           pb.getFinalTime(), new double[pb.getDimension()]);\n+      return handler.getMaximalError();\n   }\n \n   public void testSwitchingFunctions()", "timestamp": 1193849688, "metainfo": ""}