{"sha": "c6515c77999e63defaf2e31008502e696b72f4a5", "log": "Formatting only. Removed tabs.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/StatUtils.java\n+++ b/src/java/org/apache/commons/math/stat/StatUtils.java\n  * StatUtils provides static implementations of common double[] based\n  * statistical methods. These return a single result value or in some cases, as\n  * identified in the javadoc for each method, <code>Double.NaN.</code>\n- * @version $Revision: 1.27 $ $Date: 2004/05/24 05:30:33 $\n+ * @version $Revision: 1.28 $ $Date: 2004/06/14 23:26:53 $\n  */\n public final class StatUtils {\n \n      * (positive) length\n      */\n     public static double sumDifference(final double[] sample1, final double[] sample2)\n-    \tthrows IllegalArgumentException {\n+        throws IllegalArgumentException {\n         int n = sample1.length;\n         if (n  != sample2.length || n < 1) {\n             throw new IllegalArgumentException \n-            \t(\"Input arrays must have the same (positive) length.\");\n+                (\"Input arrays must have the same (positive) length.\");\n         }\n         double result = 0;\n         for (int i = 0; i < n; i++) {\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n /**\n  * Implements Chi-Square test statistics defined in the {@link ChiSquareTest} interface.\n  *\n- * @version $Revision: 1.5 $ $Date: 2004/06/06 23:14:09 $\n+ * @version $Revision: 1.6 $ $Date: 2004/06/14 23:26:53 $\n  */\n public class ChiSquareTestImpl implements ChiSquareTest {\n     \n             for (int col = 0; col < nCols; col++) {\n                 expected = (rowSum[row] * colSum[col]) / total;\n                 sumSq += (((double) counts[row][col] - expected) * ((double) counts[row][col] - expected))\n-                \t/ expected; \n+                    / expected; \n             }\n         } \n         return sumSq;\n--- a/src/java/org/apache/commons/math/stat/inference/TTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/TTestImpl.java\n /**\n  * Implements t-test statistics defined in the {@link TTest} interface.\n  *\n- * @version $Revision: 1.6 $ $Date: 2004/06/06 22:28:25 $\n+ * @version $Revision: 1.7 $ $Date: 2004/06/14 23:26:53 $\n  */\n public class TTestImpl implements TTest  {\n \n            double pooledVariance = ((n1  - 1) * v1 + (n2 -1) * v2 ) / (n1 + n2 - 2); \n            return (m1 - m2) / Math.sqrt(pooledVariance * (1d / n1 + 1d / n2));\n         } else {\n-        \treturn (m1 - m2) / Math.sqrt((v1 / n1) + (v2 / n2));\n+            return (m1 - m2) / Math.sqrt((v1 / n1) + (v2 / n2));\n         }\n     }\n     \n         if (equalVariances) {\n             degreesOfFreedom = (double) (n1 + n2 - 2);\n         } else {\n-        \tdegreesOfFreedom= df(v1, v2, n1, n2);\n+            degreesOfFreedom= df(v1, v2, n1, n2);\n         }\n         TDistribution tDistribution =\n             getDistributionFactory().createTDistribution(degreesOfFreedom);\n--- a/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatistics.java\n /**\n  * Abstract factory class for univariate statistical summaries.\n  * \n- * @version $Revision: 1.6 $ $Date: 2004/06/01 21:34:35 $\n+ * @version $Revision: 1.7 $ $Date: 2004/06/14 23:26:53 $\n  */\n public abstract class DescriptiveStatistics implements StatisticalSummary, Serializable {\n     \n     /** Serialization UID */\n     static final long serialVersionUID = 5188298269533339922L;\n     \n-\t/**\n-\t * Create an instance of a <code>DescriptiveStatistics</code>\n+    /**\n+     * Create an instance of a <code>DescriptiveStatistics</code>\n      * @param cls the type of <code>DescriptiveStatistics</code> object to\n      *        create. \n-\t * @return a new factory. \n+     * @return a new factory. \n      * @throws InstantiationException is thrown if the object can not be\n      *            created.\n      * @throws IllegalAccessException is thrown if the type's default\n      *            constructor is not accessible.\n      * @throws ClassNotFoundException if the named\n      *            <code>DescriptiveStatistics</code> type can not be found.\n-\t */\n-\tpublic static DescriptiveStatistics newInstance(String cls) throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n-\t\treturn newInstance(Class.forName(cls));\n-\t}\n-    \n-\t/**\n-\t * Create an instance of a <code>DescriptiveStatistics</code>\n+     */\n+    public static DescriptiveStatistics newInstance(String cls) throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n+        return newInstance(Class.forName(cls));\n+    }\n+    \n+    /**\n+     * Create an instance of a <code>DescriptiveStatistics</code>\n      * @param cls the type of <code>DescriptiveStatistics</code> object to\n      *        create. \n-\t * @return a new factory. \n+     * @return a new factory. \n      * @throws InstantiationException is thrown if the object can not be\n      *            created.\n      * @throws IllegalAccessException is thrown if the type's default\n      *            constructor is not accessible.\n-\t */\n-\tpublic static DescriptiveStatistics newInstance(Class cls) throws InstantiationException, IllegalAccessException {\n-\t\treturn (DescriptiveStatistics)cls.newInstance();\n-\t}\n-\t\n-\t/**\n-\t * Create an instance of a <code>DescriptiveStatistics</code>\n-\t * @return a new factory. \n-\t */\n-\tpublic static DescriptiveStatistics newInstance() {\n-\t\tDescriptiveStatistics factory = null;\n-\t\ttry {\n-\t\t\tDiscoverClass dc = new DiscoverClass();\n-\t\t\tfactory = (DescriptiveStatistics) dc.newInstance(\n-\t\t\t\tDescriptiveStatistics.class,\n-\t\t\t\t\"org.apache.commons.math.stat.univariate.DescriptiveStatisticsImpl\");\n-\t\t} catch(Exception ex) {\n+     */\n+    public static DescriptiveStatistics newInstance(Class cls) throws InstantiationException, IllegalAccessException {\n+        return (DescriptiveStatistics)cls.newInstance();\n+    }\n+    \n+    /**\n+     * Create an instance of a <code>DescriptiveStatistics</code>\n+     * @return a new factory. \n+     */\n+    public static DescriptiveStatistics newInstance() {\n+        DescriptiveStatistics factory = null;\n+        try {\n+            DiscoverClass dc = new DiscoverClass();\n+            factory = (DescriptiveStatistics) dc.newInstance(\n+                DescriptiveStatistics.class,\n+                \"org.apache.commons.math.stat.univariate.DescriptiveStatisticsImpl\");\n+        } catch(Exception ex) {\n             ex.printStackTrace();\n-\t\t\t// ignore as default implementation will be used.\n-\t\t}\n-\t\treturn factory;\n-\t}\n-\t\n-\t/**\n-\t * This constant signals that a Univariate implementation\n-\t * takes into account the contributions of an infinite number of\n-\t * elements.  In other words, if getWindow returns this\n-\t * constant, there is, in effect, no \"window\".\n-\t */\n-\tpublic static final int INFINITE_WINDOW = -1;\n-\n-\t/**\n-\t * Adds the value to the set of numbers\n-\t * @param v the value to be added \n-\t */\n-\tpublic abstract void addValue(double v);\n-\n-\t/** \n-\t * Returns the <a href=\"http://www.xycoon.com/arithmetic_mean.htm\">\n-\t * arithmetic mean </a> of the available values \n-\t * @return The mean or Double.NaN if no values have been added.\n-\t */\n+            // ignore as default implementation will be used.\n+        }\n+        return factory;\n+    }\n+    \n+    /**\n+     * This constant signals that a Univariate implementation\n+     * takes into account the contributions of an infinite number of\n+     * elements.  In other words, if getWindow returns this\n+     * constant, there is, in effect, no \"window\".\n+     */\n+    public static final int INFINITE_WINDOW = -1;\n+\n+    /**\n+     * Adds the value to the set of numbers\n+     * @param v the value to be added \n+     */\n+    public abstract void addValue(double v);\n+\n+    /** \n+     * Returns the <a href=\"http://www.xycoon.com/arithmetic_mean.htm\">\n+     * arithmetic mean </a> of the available values \n+     * @return The mean or Double.NaN if no values have been added.\n+     */\n     public double getMean() {\n-    \treturn apply(new Mean());\n-    }\n-\n-\t/** \n-\t * Returns the <a href=\"http://www.xycoon.com/geometric_mean.htm\">\n-\t * geometric mean </a> of the available values\n-\t * @return The geometricMean, Double.NaN if no values have been added, \n-\t * or if the productof the available values is less than or equal to 0.\n-\t */\n+        return apply(new Mean());\n+    }\n+\n+    /** \n+     * Returns the <a href=\"http://www.xycoon.com/geometric_mean.htm\">\n+     * geometric mean </a> of the available values\n+     * @return The geometricMean, Double.NaN if no values have been added, \n+     * or if the productof the available values is less than or equal to 0.\n+     */\n     public double getGeometricMean() {\n-    \treturn apply(new GeometricMean());\n-    }\n-\n-\t/** \n-\t * Returns the variance of the available values.\n-\t * @return The variance, Double.NaN if no values have been added \n-\t * or 0.0 for a single value set.  \n-\t */\n+        return apply(new GeometricMean());\n+    }\n+\n+    /** \n+     * Returns the variance of the available values.\n+     * @return The variance, Double.NaN if no values have been added \n+     * or 0.0 for a single value set.  \n+     */\n     public double getVariance() {\n-    \treturn apply(new Variance());\n-    }\n-\n-\t/** \n-\t * Returns the standard deviation of the available values.\n-\t * @return The standard deviation, Double.NaN if no values have been added \n-\t * or 0.0 for a single value set. \n-\t */\n+        return apply(new Variance());\n+    }\n+\n+    /** \n+     * Returns the standard deviation of the available values.\n+     * @return The standard deviation, Double.NaN if no values have been added \n+     * or 0.0 for a single value set. \n+     */\n     public double getStandardDeviation() {\n-    \tdouble stdDev = Double.NaN;\n-    \tif (getN() > 0) {\n-    \t\tif (getN() > 1) {\n-    \t\t\tstdDev = Math.sqrt(getVariance());\n-    \t\t} else {\n-    \t\t\tstdDev = 0.0;\n-    \t\t}\n-    \t}\n-    \treturn (stdDev);\n-    }\n-\n-\t/**\n-\t * Returns the skewness of the available values. Skewness is a \n-\t * measure of the assymetry of a given distribution.\n-\t * @return The skewness, Double.NaN if no values have been added \n-\t * or 0.0 for a value set &lt;=2. \n-\t */\n+        double stdDev = Double.NaN;\n+        if (getN() > 0) {\n+            if (getN() > 1) {\n+                stdDev = Math.sqrt(getVariance());\n+            } else {\n+                stdDev = 0.0;\n+            }\n+        }\n+        return (stdDev);\n+    }\n+\n+    /**\n+     * Returns the skewness of the available values. Skewness is a \n+     * measure of the assymetry of a given distribution.\n+     * @return The skewness, Double.NaN if no values have been added \n+     * or 0.0 for a value set &lt;=2. \n+     */\n     public double getSkewness() {\n-    \treturn apply(new Skewness());\n-    }\n-\n-\t/**\n-\t * Returns the Kurtosis of the available values. Kurtosis is a \n-\t * measure of the \"peakedness\" of a distribution\n-\t * @return The kurtosis, Double.NaN if no values have been added, or 0.0 \n-\t * for a value set &lt;=3. \n-\t */\n+        return apply(new Skewness());\n+    }\n+\n+    /**\n+     * Returns the Kurtosis of the available values. Kurtosis is a \n+     * measure of the \"peakedness\" of a distribution\n+     * @return The kurtosis, Double.NaN if no values have been added, or 0.0 \n+     * for a value set &lt;=3. \n+     */\n     public double getKurtosis() {\n-    \treturn apply(new Kurtosis());\n-    }\n-\n-\t/** \n-\t * Returns the maximum of the available values\n-\t * @return The max or Double.NaN if no values have been added.\n-\t */\n+        return apply(new Kurtosis());\n+    }\n+\n+    /** \n+     * Returns the maximum of the available values\n+     * @return The max or Double.NaN if no values have been added.\n+     */\n     public double getMax() {\n-    \treturn apply(new Max());\n-    }\n-\n-\t/** \n-\t* Returns the minimum of the available values\n-\t* @return The min or Double.NaN if no values have been added.\n-\t*/\n+        return apply(new Max());\n+    }\n+\n+    /** \n+    * Returns the minimum of the available values\n+    * @return The min or Double.NaN if no values have been added.\n+    */\n     public double getMin() {\n-    \treturn apply(new Min());\n-    }\n-\n-\t/** \n-\t * Returns the number of available values\n-\t * @return The number of available values\n-\t */\n-\tpublic abstract long getN();\n-\n-\t/**\n-\t * Returns the sum of the values that have been added to Univariate.\n-\t * @return The sum or Double.NaN if no values have been added\n-\t */\n+        return apply(new Min());\n+    }\n+\n+    /** \n+     * Returns the number of available values\n+     * @return The number of available values\n+     */\n+    public abstract long getN();\n+\n+    /**\n+     * Returns the sum of the values that have been added to Univariate.\n+     * @return The sum or Double.NaN if no values have been added\n+     */\n     public double getSum() {\n-    \treturn apply(new Sum());\n-    }\n-\n-\t/**\n-\t * Returns the sum of the squares of the available values.\n-\t * @return The sum of the squares or Double.NaN if no \n-\t * values have been added.\n-\t */\n+        return apply(new Sum());\n+    }\n+\n+    /**\n+     * Returns the sum of the squares of the available values.\n+     * @return The sum of the squares or Double.NaN if no \n+     * values have been added.\n+     */\n     public double getSumsq() {\n-    \treturn apply(new SumOfSquares());\n-    }\n-\n-\t/** \n-\t * Resets all statistics and storage\n-\t */\n-\tpublic abstract void clear();\n-\n-\t/**\n-\t * Univariate has the ability to return only measures for the\n-\t * last N elements added to the set of values.\n-\t * @return The current window size or -1 if its Infinite.\n-\t */\n-\n-\tpublic abstract int getWindowSize();\n-\n-\t/**\n-\t * WindowSize controls the number of values which contribute \n-\t * to the values returned by Univariate.  For example, if \n-\t * windowSize is set to 3 and the values {1,2,3,4,5} \n-\t * have been added <strong> in that order</strong> \n-\t * then the <i>available values</i> are {3,4,5} and all\n-\t * reported statistics will be based on these values\n-\t * @param windowSize sets the size of the window.\n-\t */\n-\tpublic abstract void setWindowSize(int windowSize);\n-\t\n+        return apply(new SumOfSquares());\n+    }\n+\n+    /** \n+     * Resets all statistics and storage\n+     */\n+    public abstract void clear();\n+\n+    /**\n+     * Univariate has the ability to return only measures for the\n+     * last N elements added to the set of values.\n+     * @return The current window size or -1 if its Infinite.\n+     */\n+\n+    public abstract int getWindowSize();\n+\n+    /**\n+     * WindowSize controls the number of values which contribute \n+     * to the values returned by Univariate.  For example, if \n+     * windowSize is set to 3 and the values {1,2,3,4,5} \n+     * have been added <strong> in that order</strong> \n+     * then the <i>available values</i> are {3,4,5} and all\n+     * reported statistics will be based on these values\n+     * @param windowSize sets the size of the window.\n+     */\n+    public abstract void setWindowSize(int windowSize);\n+    \n     /**\n      * Returns the current set of values in an array of double primitives.  \n      * The order of addition is preserved.  The returned array is a fresh\n      * @return returns the current set of numbers in the order in which they \n      *         were added to this set\n      */\n-\tpublic abstract double[] getValues();\n+    public abstract double[] getValues();\n \n     /**\n      * Returns the current set of values in an array of double primitives,  \n      * @param index The Index of the element\n      * @return return the element at the specified index\n      */\n-\tpublic abstract double getElement(int index);\n+    public abstract double getElement(int index);\n \n     /**\n      * Returns an estimate for the pth percentile of the stored values. \n      * values\n      */\n     public double getPercentile(double p) {\n-    \treturn apply(new Percentile(p));\n-    }\n-\t\n+        return apply(new Percentile(p));\n+    }\n+    \n     /**\n      * Generates a text report displaying\n      * univariate statistics from values that\n      * @return String with line feeds displaying statistics\n      */\n     public String toString() {\n-    \tStringBuffer outBuffer = new StringBuffer();\n-    \toutBuffer.append(\"UnivariateImpl:\\n\");\n-    \toutBuffer.append(\"n: \" + getN() + \"\\n\");\n-    \toutBuffer.append(\"min: \" + getMin() + \"\\n\");\n-    \toutBuffer.append(\"max: \" + getMax() + \"\\n\");\n-    \toutBuffer.append(\"mean: \" + getMean() + \"\\n\");\n-    \toutBuffer.append(\"std dev: \" + getStandardDeviation() + \"\\n\");\n-    \toutBuffer.append(\"skewness: \" + getSkewness() + \"\\n\");\n-    \toutBuffer.append(\"kurtosis: \" + getKurtosis() + \"\\n\");\n-    \treturn outBuffer.toString();\n-    }\n-    \n-\t/**\n-\t * Apply the given statistic to the data associated with this set of statistics.\n-\t * @param stat the statistic to apply\n-\t * @return the computed value of the statistic.\n-\t */\n-\tpublic abstract double apply(UnivariateStatistic stat);\n+        StringBuffer outBuffer = new StringBuffer();\n+        outBuffer.append(\"UnivariateImpl:\\n\");\n+        outBuffer.append(\"n: \" + getN() + \"\\n\");\n+        outBuffer.append(\"min: \" + getMin() + \"\\n\");\n+        outBuffer.append(\"max: \" + getMax() + \"\\n\");\n+        outBuffer.append(\"mean: \" + getMean() + \"\\n\");\n+        outBuffer.append(\"std dev: \" + getStandardDeviation() + \"\\n\");\n+        outBuffer.append(\"skewness: \" + getSkewness() + \"\\n\");\n+        outBuffer.append(\"kurtosis: \" + getKurtosis() + \"\\n\");\n+        return outBuffer.toString();\n+    }\n+    \n+    /**\n+     * Apply the given statistic to the data associated with this set of statistics.\n+     * @param stat the statistic to apply\n+     * @return the computed value of the statistic.\n+     */\n+    public abstract double apply(UnivariateStatistic stat);\n \n }\n--- a/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java\n  * Default implementation of\n  * {@link org.apache.commons.math.stat.univariate.DescriptiveStatistics}.\n  * \n- * @version $Revision: 1.7 $ $Date: 2004/06/14 21:41:33 $\n+ * @version $Revision: 1.8 $ $Date: 2004/06/14 23:26:53 $\n  */\n public class DescriptiveStatisticsImpl extends DescriptiveStatistics implements Serializable {\n \n     /** Serializable version identifier */\n     static final long serialVersionUID = -1868088725461221010L;\n     \n-\t/** hold the window size **/\n-\tprotected int windowSize;\n+    /** hold the window size **/\n+    protected int windowSize;\n     \n     /** \n      *  Stored data values\n      * Construct a DescriptiveStatisticsImpl with infinite window\n      */\n     public DescriptiveStatisticsImpl() {\n-    \tthis(INFINITE_WINDOW);\n+        this(INFINITE_WINDOW);\n     }\n     \n     /**\n      * @param window the finite window size.\n      */\n     public DescriptiveStatisticsImpl(int window) {\n-    \tsuper();\n-    \teDA = new ResizableDoubleArray();\n+        super();\n+        eDA = new ResizableDoubleArray();\n         setWindowSize(window);\n     }\n \n      * @return the current window size.\n      */\n     public int getWindowSize() {\n-    \treturn windowSize;\n+        return windowSize;\n     }\n     \n     /**\n--- a/src/java/org/apache/commons/math/stat/univariate/StatisticalSummary.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/StatisticalSummary.java\n /**\n  *  Reporting interface for basic univariate statistics.\n  * \n-  * @version $Revision: 1.2 $ $Date: 2004/04/27 04:37:59 $\n+  * @version $Revision: 1.3 $ $Date: 2004/06/14 23:26:53 $\n  */\n public interface StatisticalSummary {\n-\t/** \n-\t * Returns the <a href=\"http://www.xycoon.com/arithmetic_mean.htm\">\n-\t * arithmetic mean </a> of the available values \n-\t * @return The mean or Double.NaN if no values have been added.\n-\t */\n-\tpublic abstract double getMean();\n-\t/** \n-\t * Returns the variance of the available values.\n-\t * @return The variance, Double.NaN if no values have been added \n-\t * or 0.0 for a single value set.  \n-\t */\n-\tpublic abstract double getVariance();\n-\t/** \n-\t * Returns the standard deviation of the available values.\n-\t * @return The standard deviation, Double.NaN if no values have been added \n-\t * or 0.0 for a single value set. \n-\t */\n-\tpublic abstract double getStandardDeviation();\n-\t/** \n-\t * Returns the maximum of the available values\n-\t * @return The max or Double.NaN if no values have been added.\n-\t */\n-\tpublic abstract double getMax();\n-\t/** \n-\t* Returns the minimum of the available values\n-\t* @return The min or Double.NaN if no values have been added.\n-\t*/\n-\tpublic abstract double getMin();\n-\t/** \n-\t * Returns the number of available values\n-\t * @return The number of available values\n-\t */\n-\tpublic abstract long getN();\n-\t/**\n-\t * Returns the sum of the values that have been added to Univariate.\n-\t * @return The sum or Double.NaN if no values have been added\n-\t */\n-\tpublic abstract double getSum();\n+    /** \n+     * Returns the <a href=\"http://www.xycoon.com/arithmetic_mean.htm\">\n+     * arithmetic mean </a> of the available values \n+     * @return The mean or Double.NaN if no values have been added.\n+     */\n+    public abstract double getMean();\n+    /** \n+     * Returns the variance of the available values.\n+     * @return The variance, Double.NaN if no values have been added \n+     * or 0.0 for a single value set.  \n+     */\n+    public abstract double getVariance();\n+    /** \n+     * Returns the standard deviation of the available values.\n+     * @return The standard deviation, Double.NaN if no values have been added \n+     * or 0.0 for a single value set. \n+     */\n+    public abstract double getStandardDeviation();\n+    /** \n+     * Returns the maximum of the available values\n+     * @return The max or Double.NaN if no values have been added.\n+     */\n+    public abstract double getMax();\n+    /** \n+    * Returns the minimum of the available values\n+    * @return The min or Double.NaN if no values have been added.\n+    */\n+    public abstract double getMin();\n+    /** \n+     * Returns the number of available values\n+     * @return The number of available values\n+     */\n+    public abstract long getN();\n+    /**\n+     * Returns the sum of the values that have been added to Univariate.\n+     * @return The sum or Double.NaN if no values have been added\n+     */\n+    public abstract double getSum();\n }\n--- a/src/java/org/apache/commons/math/stat/univariate/SummaryStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/SummaryStatistics.java\n /**\n  * Abstract factory class for univariate statistical summaries.\n  * \n- * @version $Revision: 1.6 $ $Date: 2004/06/01 21:34:35 $\n+ * @version $Revision: 1.7 $ $Date: 2004/06/14 23:26:53 $\n  */\n public abstract class SummaryStatistics implements StatisticalSummary, Serializable {\n \n     /** Serialization UID */\n     static final long serialVersionUID = -6400596334135654825L;\n     \n-\t/**\n-\t * Create an instance of a <code>SummaryStatistics</code>\n+    /**\n+     * Create an instance of a <code>SummaryStatistics</code>\n      * @param cls the type of <code>SummaryStatistics</code> object to\n      *        create. \n      * @return a new factory. \n      *            constructor is not accessible.\n      * @throws ClassNotFoundException if the named\n      *            <code>SummaryStatistics</code> type can not be found.\n-\t */\n-\tpublic static SummaryStatistics newInstance(String cls) throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n-\t\treturn newInstance(Class.forName(cls));\n-\t}\n+     */\n+    public static SummaryStatistics newInstance(String cls) throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n+        return newInstance(Class.forName(cls));\n+    }\n      \n-\t/**\n-\t * Create an instance of a <code>DescriptiveStatistics</code>\n+    /**\n+     * Create an instance of a <code>DescriptiveStatistics</code>\n      * @param cls the type of <code>SummaryStatistics</code> object to\n      *        create. \n      * @return a new factory. \n      *            created.\n      * @throws IllegalAccessException is thrown if the type's default\n      *            constructor is not accessible.\n-\t */\n-\tpublic static SummaryStatistics newInstance(Class cls) throws InstantiationException, IllegalAccessException {\n-\t\treturn (SummaryStatistics)cls.newInstance();\n-\t}\n-\t\n-\t/**\n-\t * Create an instance of a <code>DescriptiveStatistics</code>\n-\t * @return a new factory. \n-\t */\n-\tpublic static SummaryStatistics newInstance() {\n-\t\tSummaryStatistics factory = null;\n-\t\ttry {\n-\t\t\tDiscoverClass dc = new DiscoverClass();\n-\t\t\tfactory = (SummaryStatistics) dc.newInstance(\n-\t\t\t\tSummaryStatistics.class,\n-\t\t\t\t\"org.apache.commons.math.stat.univariate.SummaryStatisticsImpl\");\n-\t\t} catch(Exception ex) {\n-\t\t\t// ignore as default implementation will be used.\n-\t\t}\n-\t\treturn factory;\n-\t}\n-\t\n+     */\n+    public static SummaryStatistics newInstance(Class cls) throws InstantiationException, IllegalAccessException {\n+        return (SummaryStatistics)cls.newInstance();\n+    }\n+    \n+    /**\n+     * Create an instance of a <code>DescriptiveStatistics</code>\n+     * @return a new factory. \n+     */\n+    public static SummaryStatistics newInstance() {\n+        SummaryStatistics factory = null;\n+        try {\n+            DiscoverClass dc = new DiscoverClass();\n+            factory = (SummaryStatistics) dc.newInstance(\n+                SummaryStatistics.class,\n+                \"org.apache.commons.math.stat.univariate.SummaryStatisticsImpl\");\n+        } catch(Exception ex) {\n+            // ignore as default implementation will be used.\n+        }\n+        return factory;\n+    }\n+    \n \n-\t/**\n-\t * Return a StatisticalSummaryValues instance reporting current statistics.\n-\t * \n-\t * @return Current values of statistics \n-\t */\n-\tpublic StatisticalSummary getSummary() {\n-\t    return new StatisticalSummaryValues(getMean(), getVariance(), getN(),\n-\t            getMax(), getMin(), getSum());\n-\t}\n-\t\n-\t/**\n-\t * Adds the value to the data to be summarized\n-\t * @param v the value to be added \n-\t */\n-\tpublic abstract void addValue(double v);\n+    /**\n+     * Return a StatisticalSummaryValues instance reporting current statistics.\n+     * \n+     * @return Current values of statistics \n+     */\n+    public StatisticalSummary getSummary() {\n+        return new StatisticalSummaryValues(getMean(), getVariance(), getN(),\n+                getMax(), getMin(), getSum());\n+    }\n+    \n+    /**\n+     * Adds the value to the data to be summarized\n+     * @param v the value to be added \n+     */\n+    public abstract void addValue(double v);\n \n-\t/** \n-\t * Returns the <a href=\"http://www.xycoon.com/arithmetic_mean.htm\">\n-\t * arithmetic mean </a> of the available values \n-\t * @return The mean or Double.NaN if no values have been added.\n-\t */\n-\tpublic abstract double getMean();\n+    /** \n+     * Returns the <a href=\"http://www.xycoon.com/arithmetic_mean.htm\">\n+     * arithmetic mean </a> of the available values \n+     * @return The mean or Double.NaN if no values have been added.\n+     */\n+    public abstract double getMean();\n \n-\t/** \n-\t * Returns the <a href=\"http://www.xycoon.com/geometric_mean.htm\">\n-\t * geometric mean </a> of the available values\n-\t * @return The geometricMean, Double.NaN if no values have been added, \n-\t * or if the productof the available values is less than or equal to 0.\n-\t */\n-\tpublic abstract double getGeometricMean();\n+    /** \n+     * Returns the <a href=\"http://www.xycoon.com/geometric_mean.htm\">\n+     * geometric mean </a> of the available values\n+     * @return The geometricMean, Double.NaN if no values have been added, \n+     * or if the productof the available values is less than or equal to 0.\n+     */\n+    public abstract double getGeometricMean();\n \n-\t/** \n-\t * Returns the variance of the available values.\n-\t * @return The variance, Double.NaN if no values have been added \n-\t * or 0.0 for a single value set.  \n-\t */\n-\tpublic abstract double getVariance();\n+    /** \n+     * Returns the variance of the available values.\n+     * @return The variance, Double.NaN if no values have been added \n+     * or 0.0 for a single value set.  \n+     */\n+    public abstract double getVariance();\n \n-\t/** \n-\t * Returns the standard deviation of the available values.\n-\t * @return The standard deviation, Double.NaN if no values have been added \n-\t * or 0.0 for a single value set. \n-\t */\n-\tpublic abstract double getStandardDeviation();\n+    /** \n+     * Returns the standard deviation of the available values.\n+     * @return The standard deviation, Double.NaN if no values have been added \n+     * or 0.0 for a single value set. \n+     */\n+    public abstract double getStandardDeviation();\n     \n-\t/** \n-\t * Returns the maximum of the available values\n-\t * @return The max or Double.NaN if no values have been added.\n-\t */\n-\tpublic abstract double getMax();\n+    /** \n+     * Returns the maximum of the available values\n+     * @return The max or Double.NaN if no values have been added.\n+     */\n+    public abstract double getMax();\n \n-\t/** \n-\t* Returns the minimum of the available values\n-\t* @return The min or Double.NaN if no values have been added.\n-\t*/\n-\tpublic abstract double getMin();\n+    /** \n+    * Returns the minimum of the available values\n+    * @return The min or Double.NaN if no values have been added.\n+    */\n+    public abstract double getMin();\n \n-\t/** \n-\t * Returns the number of available values\n-\t * @return The number of available values\n-\t */\n-\tpublic abstract long getN();\n+    /** \n+     * Returns the number of available values\n+     * @return The number of available values\n+     */\n+    public abstract long getN();\n \n-\t/**\n-\t * Returns the sum of the values that have been added to Univariate.\n-\t * @return The sum or Double.NaN if no values have been added\n-\t */\n-\tpublic abstract double getSum();\n+    /**\n+     * Returns the sum of the values that have been added to Univariate.\n+     * @return The sum or Double.NaN if no values have been added\n+     */\n+    public abstract double getSum();\n \n-\t/**\n-\t * Returns the sum of the squares of the available values.\n-\t * @return The sum of the squares or Double.NaN if no \n-\t * values have been added.\n-\t */\n-\tpublic abstract double getSumsq();\n+    /**\n+     * Returns the sum of the squares of the available values.\n+     * @return The sum of the squares or Double.NaN if no \n+     * values have been added.\n+     */\n+    public abstract double getSumsq();\n \n-\t/** \n-\t * Resets all statistics\n-\t */\n-\tpublic abstract void clear();\n+    /** \n+     * Resets all statistics\n+     */\n+    public abstract void clear();\n \n }\n--- a/src/java/org/apache/commons/math/stat/univariate/SummaryStatisticsImpl.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/SummaryStatisticsImpl.java\n /**\n  * Provides a default {@link SummaryStatistics} implementation.\n  * \n- * @version $Revision: 1.3 $ $Date: 2004/06/01 21:34:35 $  \n+ * @version $Revision: 1.4 $ $Date: 2004/06/14 23:26:53 $  \n  */\n public class SummaryStatisticsImpl extends SummaryStatistics implements Serializable {\n \n      * @param value  the value to add\n      */\n     public void addValue(double value) {\n-    \tsum.increment(value);\n-    \tsumsq.increment(value);\n-    \tmin.increment(value);\n-    \tmax.increment(value);\n-    \tsumLog.increment(value);\n-    \tgeoMean.increment(value);\n-    \tsecondMoment.increment(value);\n-    \tn++;\n+        sum.increment(value);\n+        sumsq.increment(value);\n+        min.increment(value);\n+        max.increment(value);\n+        sumLog.increment(value);\n+        geoMean.increment(value);\n+        secondMoment.increment(value);\n+        n++;\n     }\n \n     /** \n     }\n \n     /** \n-\t * Resets all statistics and storage\n-\t */\n+     * Resets all statistics and storage\n+     */\n     public void clear() {\n         this.n = 0;\n         min.clear();", "timestamp": 1087255614, "metainfo": ""}