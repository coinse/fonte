{"sha": "e8d1ff6df5314468f2616c249582a8bcd239b402", "log": "Added methods to solve upper and lower triangular systems.  JIRA: MATH-624.  Contributed by Greg Sterijevski.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/MatrixUtils.java\n+++ b/src/main/java/org/apache/commons/math/linear/MatrixUtils.java\n \n import org.apache.commons.math.Field;\n import org.apache.commons.math.FieldElement;\n+import org.apache.commons.math.exception.MathArithmeticException;\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.NoDataException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.fraction.BigFraction;\n import org.apache.commons.math.fraction.Fraction;\n+import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * A collection of static methods that operate on or return matrices.\n             throw ioe;\n         }\n     }\n+\n+    /**Solve  a  system of composed of a Lower Triangular Matrix\n+     * {@link RealMatrix}.\n+     * <p>\n+     * This method is called to solve systems of equations which are\n+     * of the lower triangular form. The matrix {@link RealMatrix}\n+     * is assumed, though not checked, to be in lower triangular form.\n+     * The vector {@link RealVector} is overwritten with the solution.\n+     * The matrix is checked that it is square and its dimensions match\n+     * the length of the vector.\n+     * </p>\n+     * @param rm RealMatrix which is lower triangular\n+     * @param b  RealVector this is overwritten\n+     * @exception IllegalArgumentException if the matrix and vector are not conformable\n+     * @exception ArithmeticException there is a zero or near zero on the diagonal of rm\n+     */\n+    public static void solveLowerTriangularSystem( RealMatrix rm, RealVector b){\n+        if ((rm == null) || (b == null) || ( rm.getRowDimension() != b.getDimension())) {\n+            throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,\n+                    (rm == null) ? 0 : rm.getRowDimension(),\n+                    (b == null) ? 0 : b.getDimension());\n+        }\n+        if( rm.getColumnDimension() != rm.getRowDimension() ){\n+            throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_2x2,\n+                    rm.getRowDimension(),rm.getRowDimension(),\n+                    rm.getRowDimension(),rm.getColumnDimension());\n+        }\n+        int rows = rm.getRowDimension();\n+        for( int i = 0 ; i < rows ; i++ ){\n+            double diag = rm.getEntry(i, i);\n+            if( FastMath.abs(diag) < MathUtils.SAFE_MIN ){\n+                throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);\n+            }\n+            double bi = b.getEntry(i)/diag;\n+            b.setEntry(i,  bi );\n+            for( int j = i+1; j< rows; j++ ){\n+                b.setEntry(j, b.getEntry(j)-bi*rm.getEntry(j,i)  );\n+            }\n+        }\n+    }\n+\n+    /** Solver a  system composed  of an Upper Triangular Matrix\n+     * {@link RealMatrix}.\n+     * <p>\n+     * This method is called to solve systems of equations which are\n+     * of the lower triangular form. The matrix {@link RealMatrix}\n+     * is assumed, though not checked, to be in upper triangular form.\n+     * The vector {@link RealVector} is overwritten with the solution.\n+     * The matrix is checked that it is square and its dimensions match\n+     * the length of the vector.\n+     * </p>\n+     * @param rm RealMatrix which is upper triangular\n+     * @param b  RealVector this is overwritten\n+     * @exception IllegalArgumentException if the matrix and vector are not conformable\n+     * @exception ArithmeticException there is a zero or near zero on the diagonal of rm\n+     */\n+    public static void solveUpperTriangularSystem( RealMatrix rm, RealVector b){\n+        if ((rm == null) || (b == null) || ( rm.getRowDimension() != b.getDimension())) {\n+            throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,\n+                    (rm == null) ? 0 : rm.getRowDimension(),\n+                    (b == null) ? 0 : b.getDimension());\n+        }\n+        if( rm.getColumnDimension() != rm.getRowDimension() ){\n+            throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_2x2,\n+                    rm.getRowDimension(),rm.getRowDimension(),\n+                    rm.getRowDimension(),rm.getColumnDimension());\n+        }\n+        int rows = rm.getRowDimension();\n+        for( int i = rows-1 ; i >-1 ; i-- ){\n+            double diag = rm.getEntry(i, i);\n+            if( FastMath.abs(diag) < MathUtils.SAFE_MIN ){\n+                throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);\n+            }\n+            double bi = b.getEntry(i)/diag;\n+            b.setEntry(i,  bi );\n+            for( int j = i-1; j>-1; j-- ){\n+                b.setEntry(j, b.getEntry(j)-bi*rm.getEntry(j,i)  );\n+            }\n+        }\n+    }\n }\n--- a/src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java\n package org.apache.commons.math.linear;\n \n import java.math.BigDecimal;\n-\n-\n+import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.fraction.BigFraction;\n import org.apache.commons.math.fraction.Fraction;\n import org.apache.commons.math.fraction.FractionConversionException;\n         }\n         return d;\n     }\n+  \n+    @Test \n+    public void testSolveLowerTriangularSystem(){\n+        RealMatrix rm = new Array2DRowRealMatrix(\n+                new double[][] { {2,0,0,0 }, { 1,1,0,0 }, { 3,3,3,0 }, { 3,3,3,4 } },\n+                       false);\n+        RealVector b = new ArrayRealVector(new double[] { 2,3,4,8 }, false);\n+        MatrixUtils.solveLowerTriangularSystem(rm, b);\n+        TestUtils.assertEquals( new double[]{1,2,-1.66666666666667, 1.0}  , b.getData() , 1.0e-12);\n+    }\n+    \n+     \n+    /*\n+     * Taken from R manual http://stat.ethz.ch/R-manual/R-patched/library/base/html/backsolve.html\n+     */\n+    @Test\n+    public void testSolveUpperTriangularSystem(){\n+        RealMatrix rm = new Array2DRowRealMatrix(\n+                new double[][] { {1,2,3 }, { 0,1,1 }, { 0,0,2 } },\n+                       false);\n+        RealVector b = new ArrayRealVector(new double[] { 8,4,2 }, false);\n+        MatrixUtils.solveUpperTriangularSystem(rm, b);\n+        TestUtils.assertEquals( new double[]{-1,3,1}  , b.getData() , 1.0e-12);\n+    }\n }\n ", "timestamp": 1313127595, "metainfo": ""}