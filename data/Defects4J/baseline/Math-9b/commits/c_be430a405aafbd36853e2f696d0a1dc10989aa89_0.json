{"sha": "be430a405aafbd36853e2f696d0a1dc10989aa89", "log": "fixed numerous warnings in test code (unused fields/results, fields only set to null)  ", "commit": "\n--- a/src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java\n+++ b/src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java\n         try {\n             // bad function\n             UnivariateRealFunction f2 = new SinFunction();\n-            UnivariateRealSolver solver2 = new LaguerreSolver(f2);\n+            new LaguerreSolver(f2);\n             fail(\"Expecting IllegalArgumentException - bad function\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n--- a/src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java\n+++ b/src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java\n      * Test of parameters for the polynomial.\n      */\n     public void testParameters() throws Exception {\n-        PolynomialFunctionLagrangeForm p;\n \n         try {\n             // bad input array length\n             double x[] = { 1.0 };\n             double y[] = { 2.0 };\n-            p = new PolynomialFunctionLagrangeForm(x, y);\n+            new PolynomialFunctionLagrangeForm(x, y);\n             fail(\"Expecting IllegalArgumentException - bad input array length\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n             // mismatch input arrays\n             double x[] = { 1.0, 2.0, 3.0, 4.0 };\n             double y[] = { 0.0, -4.0, -24.0 };\n-            p = new PolynomialFunctionLagrangeForm(x, y);\n+            new PolynomialFunctionLagrangeForm(x, y);\n             fail(\"Expecting IllegalArgumentException - mismatch input arrays\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n--- a/src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java\n+++ b/src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java\n      * Test of parameters for the polynomial.\n      */\n     public void testParameters() throws Exception {\n-        PolynomialFunctionNewtonForm p;\n \n         try {\n             // bad input array length\n             double a[] = { 1.0 };\n             double c[] = { 2.0 };\n-            p = new PolynomialFunctionNewtonForm(a, c);\n+            new PolynomialFunctionNewtonForm(a, c);\n             fail(\"Expecting IllegalArgumentException - bad input array length\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n             // mismatch input arrays\n             double a[] = { 1.0, 2.0, 3.0, 4.0 };\n             double c[] = { 4.0, 3.0, 2.0, 1.0 };\n-            p = new PolynomialFunctionNewtonForm(a, c);\n+            new PolynomialFunctionNewtonForm(a, c);\n             fail(\"Expecting IllegalArgumentException - mismatch input arrays\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n--- a/src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java\n+++ b/src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java\n \n \n     /**\n-     * tests the firstDerivative function by comparision\n+     * tests the firstDerivative function by comparison\n      *\n      * <p>This will test the functions \n      * <tt>f(x) = x^3 - 2x^2 + 6x + 3, g(x) = 3x^2 - 4x + 6</tt>\n      * and <tt>h(x) = 6x - 4</tt>\n      */\n-    public void testfirstDerivativeComparision() throws MathException {\n+    public void testfirstDerivativeComparison() throws MathException {\n         double[] f_coeff = { 3.0, 6.0, -2.0, 1.0 };\n         double[] g_coeff = { 6.0, -4.0, 3.0 };\n         double[] h_coeff = { -4.0, 6.0 };\n         assertEquals( f.derivative().value(-3.25), g.value(-3.25), tolerance );\n \n         // compare g' = h\n+        assertEquals( g.derivative().value(Math.PI), h.value(Math.PI), tolerance );\n+        assertEquals( g.derivative().value(Math.E),  h.value(Math.E),  tolerance );\n \n-\n-        // compare f'' = h\n     }\n \n }\n--- a/src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java\n+++ b/src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java\n         assertEquals(3, spline.getN());\n         \n         try { // too few knots\n-            spline = \n-                new PolynomialSplineFunction(new double[] {0}, polynomials);\n+            new PolynomialSplineFunction(new double[] {0}, polynomials);\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n         }\n         \n         try { // too many knots\n-            spline = \n-                new PolynomialSplineFunction(new double[] {0,1,2,3,4}, polynomials);\n+            new PolynomialSplineFunction(new double[] {0,1,2,3,4}, polynomials);\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n         }\n         \n         try { // knots not increasing\n-            spline = \n-                new PolynomialSplineFunction(new double[] {0,1, 3, 2}, polynomials);\n+            new PolynomialSplineFunction(new double[] {0,1, 3, 2}, polynomials);\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n--- a/src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java\n+++ b/src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java\n \n     public void testNewBisectionSolverNull() {\n         try {\n-            UnivariateRealSolver solver = factory.newBisectionSolver(null);\n+            factory.newBisectionSolver(null);\n             fail();\n         } catch(IllegalArgumentException ex) {\n             // success\n \n     public void testNewNewtonSolverNull() {\n         try {\n-            UnivariateRealSolver solver = factory.newNewtonSolver(null);\n+            factory.newNewtonSolver(null);\n             fail();\n         } catch(IllegalArgumentException ex) {\n             // success\n \n     public void testNewBrentSolverNull() {\n         try {\n-            UnivariateRealSolver solver = factory.newBrentSolver(null);\n+            factory.newBrentSolver(null);\n             fail();\n         } catch(IllegalArgumentException ex) {\n             // success\n \n     public void testNewSecantSolverNull() {\n         try {\n-            UnivariateRealSolver solver = factory.newSecantSolver(null);\n+            factory.newSecantSolver(null);\n             fail();\n         } catch(IllegalArgumentException ex) {\n             // success\n--- a/src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java\n+++ b/src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java\n     \n     public void testSolveBadParameters() throws MathException {\n         try { // bad endpoints\n-            double x = UnivariateRealSolverUtils.solve(sin,0.0, 4.0, 4.0); \n+            UnivariateRealSolverUtils.solve(sin,0.0, 4.0, 4.0); \n         } catch (IllegalArgumentException ex) {\n             // expected\n         }    \n         try { // bad accuracy\n-            double x = UnivariateRealSolverUtils.solve(sin, 0.0, 4.0, 0.0); \n+            UnivariateRealSolverUtils.solve(sin, 0.0, 4.0, 0.0); \n         } catch (IllegalArgumentException ex) {\n             // expected\n         }        \n     }\n     \n     public void testSolveSin() throws MathException {     \n-        double x = UnivariateRealSolverUtils.solve(sin, 1.0,\n-                4.0);\n+        double x = UnivariateRealSolverUtils.solve(sin, 1.0, 4.0);\n         assertEquals(Math.PI, x, 1.0e-4);\n     }\n     \n     \n     public void testSolveNoRoot() throws MathException {\n         try {\n-            double x = UnivariateRealSolverUtils.solve(sin, 1.0,\n-                    1.5);  \n+            UnivariateRealSolverUtils.solve(sin, 1.0, 1.5);  \n             fail(\"Expecting IllegalArgumentException \");  \n         } catch (IllegalArgumentException ex) {\n             // expected\n     \n     public void testBracketCornerSolution() throws MathException {\n         try {\n-            double[] result = UnivariateRealSolverUtils.bracket(sin, \n-                    1.5, 0, 2.0); \n+            UnivariateRealSolverUtils.bracket(sin, 1.5, 0, 2.0); \n             fail(\"Expecting ConvergenceException\");\n         } catch (ConvergenceException ex) {\n             // expected\n     \n     public void testBadParameters() throws MathException {\n         try { // null function\n-            double[] result = UnivariateRealSolverUtils.bracket(null, 1.5, 0, 2.0);\n+            UnivariateRealSolverUtils.bracket(null, 1.5, 0, 2.0);\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n         }\n         try { // initial not between endpoints\n-            double[] result = UnivariateRealSolverUtils.bracket(sin, 2.5, 0, 2.0);\n+            UnivariateRealSolverUtils.bracket(sin, 2.5, 0, 2.0);\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n         }\n         try { // endpoints not valid\n-            double[] result = UnivariateRealSolverUtils.bracket(sin, 1.5, 2.0, 1.0);\n+            UnivariateRealSolverUtils.bracket(sin, 1.5, 2.0, 1.0);\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n         }\n         try { // bad maximum iterations\n-            double[] result = UnivariateRealSolverUtils.bracket(sin, 1.5, 0, 2.0, 0);\n+            UnivariateRealSolverUtils.bracket(sin, 1.5, 0, 2.0, 0);\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n--- a/src/test/org/apache/commons/math/complex/ComplexUtilsTest.java\n+++ b/src/test/org/apache/commons/math/complex/ComplexUtilsTest.java\n     private Complex infNegInf = new Complex(inf, negInf);\n     private Complex infInf = new Complex(inf, inf);\n     private Complex negInfNegInf = new Complex(negInf, negInf);\n-    private Complex oneNaN = new Complex(1, nan);\n     private Complex infNaN = new Complex(inf, nan);\n     private Complex negInfNaN = new Complex(negInf, nan);\n     private Complex nanInf = new Complex(nan, inf);\n     private Complex nanZero = new Complex(nan, 0);\n     private Complex infZero = new Complex(inf, 0);\n     private Complex zeroInf = new Complex(0, inf);\n-    private Complex zeroNegInf = new Complex(0, negInf);\n     private Complex negInfZero = new Complex(negInf, 0);\n-    \n-    private ComplexFormat fmt = new ComplexFormat();\n     \n     public void testAcos() {\n         Complex z = new Complex(3, 4);\n     \n     public void testAcosNull() {\n         try {\n-            Complex z = ComplexUtils.acos(null); \n+            ComplexUtils.acos(null); \n             fail(\"Expecting NullPointerException\");\n         } catch (NullPointerException ex) {\n             // expected\n     \n     public void testAsinNull() {\n         try {\n-            Complex z = ComplexUtils.asin(null); \n+            ComplexUtils.asin(null); \n             fail(\"Expecting NullPointerException\");\n         } catch (NullPointerException ex) {\n             // expected\n     \n     public void testAtanNull() {\n         try {\n-            Complex z = ComplexUtils.atan(null); \n+            ComplexUtils.atan(null); \n             fail(\"Expecting NullPointerException\");\n         } catch (NullPointerException ex) {\n             // expected\n     \n     public void testCosNull() {\n         try {\n-            Complex z = ComplexUtils.cos(null); \n+            ComplexUtils.cos(null); \n             fail(\"Expecting NullPointerException\");\n         } catch (NullPointerException ex) {\n             // expected\n     \n     public void testCoshNull() {\n         try {\n-            Complex z = ComplexUtils.cosh(null); \n+            ComplexUtils.cosh(null); \n             fail(\"Expecting NullPointerException\");\n         } catch (NullPointerException ex) {\n             // expected\n     \n     public void testExpNull() {\n         try {\n-            Complex z = ComplexUtils.exp(null); \n+            ComplexUtils.exp(null); \n             fail(\"Expecting NullPointerException\");\n         } catch (NullPointerException ex) {\n             // expected\n     \n     public void testlogNull() {\n         try {\n-            Complex z = ComplexUtils.log(null); \n+            ComplexUtils.log(null); \n             fail(\"Expecting NullPointerException\");\n         } catch (NullPointerException ex) {\n             // expected\n     \n     public void testPolar2ComplexIllegalModulus() {\n         try {\n-            Complex z = ComplexUtils.polar2Complex(-1, 0);\n+            ComplexUtils.polar2Complex(-1, 0);\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n     \n     public void testpowNull() {\n         try {\n-            Complex z = ComplexUtils.pow(null, Complex.ONE); \n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {\n-            // expected\n-        }\n-        try {\n-            Complex z = ComplexUtils.pow(Complex.ONE, null); \n+            ComplexUtils.pow(null, Complex.ONE); \n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+            // expected\n+        }\n+        try {\n+            ComplexUtils.pow(Complex.ONE, null); \n             fail(\"Expecting NullPointerException\");\n         } catch (NullPointerException ex) {\n             // expected\n     \n     public void testSinNull() {\n         try {\n-            Complex z = ComplexUtils.sin(null); \n+            ComplexUtils.sin(null); \n             fail(\"Expecting NullPointerException\");\n         } catch (NullPointerException ex) {\n             // expected\n     \n     public void testsinhNull() {\n         try {\n-            Complex z = ComplexUtils.sinh(null); \n+            ComplexUtils.sinh(null); \n             fail(\"Expecting NullPointerException\");\n         } catch (NullPointerException ex) {\n             // expected\n     \n     public void testSqrtNull() {\n         try {\n-            Complex z = ComplexUtils.sqrt(null); \n+            ComplexUtils.sqrt(null); \n             fail(\"Expecting NullPointerException\");\n         } catch (NullPointerException ex) {\n             // expected\n     \n     public void testSqrt1zNull() {\n         try {\n-            Complex z = ComplexUtils.sqrt1z(null); \n+            ComplexUtils.sqrt1z(null); \n             fail(\"Expecting NullPointerException\");\n         } catch (NullPointerException ex) {\n             // expected\n     \n     public void testTanNull() {\n         try {\n-            Complex z = ComplexUtils.tan(null); \n+            ComplexUtils.tan(null); \n             fail(\"Expecting NullPointerException\");\n         } catch (NullPointerException ex) {\n             // expected\n     \n     public void testTanhNull() {\n         try {\n-            Complex z = ComplexUtils.tanh(null); \n+            ComplexUtils.tanh(null); \n             fail(\"Expecting NullPointerException\");\n         } catch (NullPointerException ex) {\n             // expected\n--- a/src/test/org/apache/commons/math/fraction/FractionFormatTest.java\n+++ b/src/test/org/apache/commons/math/fraction/FractionFormatTest.java\n     public void testParseProperInvalidMinus() {\n         String source = \"2 -2 / 3\";\n         try {\n-            Fraction c = properFormat.parse(source);\n+            properFormat.parse(source);\n             fail(\"invalid minus in improper fraction.\");\n         } catch (ParseException ex) {\n             // expected\n         }\n         source = \"2 2 / -3\";\n         try {\n-            Fraction c = properFormat.parse(source);\n+            properFormat.parse(source);\n             fail(\"invalid minus in improper fraction.\");\n         } catch (ParseException ex) {\n             // expected\n--- a/src/test/org/apache/commons/math/fraction/FractionTest.java\n+++ b/src/test/org/apache/commons/math/fraction/FractionTest.java\n         Fraction f1 = new Fraction(3, 5);\n         Fraction f2 = Fraction.ZERO;\n         try {\n-            Fraction f = f1.divide(f2);\n+            f1.divide(f2);\n             fail(\"expecting ArithmeticException\");\n         } catch (ArithmeticException ex) {}\n         \n     public void testEqualsAndHashCode() {\n         Fraction zero  = new Fraction(0,1);\n         Fraction nullFraction = null;\n-        int zeroHash = zero.hashCode();\n         assertTrue( zero.equals(zero));\n         assertFalse(zero.equals(nullFraction));\n         assertFalse(zero.equals(new Double(0)));\n         assertTrue(threeFourths.equals(Fraction.getReducedFraction(6, 8)));\n         assertTrue(Fraction.ZERO.equals(Fraction.getReducedFraction(0, -1)));\n         try {\n-            Fraction f = Fraction.getReducedFraction(1, 0);\n+            Fraction.getReducedFraction(1, 0);\n             fail(\"expecting ArithmeticException\");\n         } catch (ArithmeticException ex) {\n             // expected\n--- a/src/test/org/apache/commons/math/linear/BigMatrixImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/BigMatrixImplTest.java\n         assertClose(\"double, BigDecimal\", m1, m3, Double.MIN_VALUE);\n         assertClose(\"string, BigDecimal\", m2, m3, Double.MIN_VALUE);\n         try {\n-            BigMatrix m4 = new BigMatrixImpl(new String[][] {{\"0\", \"hello\", \"1\"}});\n+            new BigMatrixImpl(new String[][] {{\"0\", \"hello\", \"1\"}});\n             fail(\"Expecting NumberFormatException\");\n         } catch (NumberFormatException ex) {\n             // expected\n         }\n         try {\n-            BigMatrix m4 = new BigMatrixImpl(new String[][] {});\n+            new BigMatrixImpl(new String[][] {});\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n         }\n         try {\n-            BigMatrix m4 = new BigMatrixImpl(new String[][] {{},{}});\n+            new BigMatrixImpl(new String[][] {{},{}});\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n         }\n         try {\n-            BigMatrix m4 = new BigMatrixImpl(new String[][] {{\"a\", \"b\"},{\"c\"}});\n+            new BigMatrixImpl(new String[][] {{\"a\", \"b\"},{\"c\"}});\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n         }\n \n         try {\n-            BigMatrix m4 = new BigMatrixImpl(0, 1);\n+            new BigMatrixImpl(0, 1);\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n         }\n         try {\n-            BigMatrix m4 = new BigMatrixImpl(1, 0);\n+            new BigMatrixImpl(1, 0);\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n         BigMatrixImpl m = new BigMatrixImpl(testData);\n         BigMatrixImpl m2 = new BigMatrixImpl(testData2);\n         try {\n-            BigMatrixImpl mPlusMInv = (BigMatrixImpl)m.add(m2);\n+            m.add(m2);\n             fail(\"IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         assertClose(\"m-n = m + -n\",m.subtract(m2),\n             m2.scalarMultiply(new BigDecimal(-1d)).add(m),entryTolerance);\n         try {\n-            BigMatrix a = m.subtract(new BigMatrixImpl(testData2));\n+            m.subtract(new BigMatrixImpl(testData2));\n             fail(\"Expecting illegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         assertClose(\"identity multiply\",m2.multiply(identity),\n             m2,entryTolerance); \n         try {\n-            BigMatrix a = m.multiply(new BigMatrixImpl(bigSingular));\n+            m.multiply(new BigMatrixImpl(bigSingular));\n             fail(\"Expecting illegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             ;\n                     asDouble(m.solve(asBigDecimal(testVector))),\n                     normTolerance);\n         try {\n-            double[] x = asDouble(m.solve(asBigDecimal(testVector2)));\n+            asDouble(m.solve(asBigDecimal(testVector2)));\n             fail(\"expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         }       \n         BigMatrix bs = new BigMatrixImpl(bigSingular);\n         try {\n-            BigMatrix a = bs.solve(bs);\n+            bs.solve(bs);\n             fail(\"Expecting InvalidMatrixException\");\n         } catch (InvalidMatrixException ex) {\n             ;\n         }\n         try {\n-            BigMatrix a = m.solve(bs);\n+            m.solve(bs);\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         }\n         try {\n-            BigMatrix a = (new BigMatrixImpl(testData2)).solve(bs);\n+            new BigMatrixImpl(testData2).solve(bs);\n             fail(\"Expecting illegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         assertEquals(\"nonsingular  R test 2\",-1d,m.getDeterminant().doubleValue(),normTolerance);\n \n         try {\n-            double a = new BigMatrixImpl(testData2).getDeterminant().doubleValue();\n+            new BigMatrixImpl(testData2).getDeterminant().doubleValue();\n             fail(\"Expecting InvalidMatrixException\");\n         } catch (InvalidMatrixException ex) {\n             ;\n         assertEquals(\"identity trace\",3d,m.getTrace().doubleValue(),entryTolerance);\n         m = new BigMatrixImpl(testData2);\n         try {\n-            double x = m.getTrace().doubleValue();\n+            m.getTrace().doubleValue();\n             fail(\"Expecting illegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         assertClose(\"identity operate\",testVector,x,entryTolerance);\n         m = new BigMatrixImpl(bigSingular);\n         try {\n-            x = asDouble(m.operate(asBigDecimal(testVector)));\n+            asDouble(m.operate(asBigDecimal(testVector)));\n             fail(\"Expecting illegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         BigMatrixImpl m = new BigMatrixImpl(testData);\n         BigMatrixImpl mInv = new BigMatrixImpl(testDataInv);\n         BigMatrixImpl identity = new BigMatrixImpl(id);\n-        BigMatrixImpl m2 = new BigMatrixImpl(testData2);\n+        new BigMatrixImpl(testData2);\n         assertClose(\"inverse multiply\",m.preMultiply(mInv),\n                 identity,entryTolerance);\n         assertClose(\"inverse multiply\",mInv.preMultiply(m),\n         assertClose(\"identity multiply\",identity.preMultiply(mInv),\n                 mInv,entryTolerance);\n         try {\n-            BigMatrix a = m.preMultiply(new BigMatrixImpl(bigSingular));\n+            m.preMultiply(new BigMatrixImpl(bigSingular));\n             fail(\"Expecting illegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         assertClose(\"get row\",m.getRowAsDoubleArray(0),testDataRow1,entryTolerance);\n         assertClose(\"get col\",m.getColumnAsDoubleArray(2),testDataCol3,entryTolerance);\n         try {\n-            double[] x = m.getRowAsDoubleArray(10);\n+            m.getRowAsDoubleArray(10);\n             fail(\"expecting MatrixIndexException\");\n         } catch (MatrixIndexException ex) {\n             ;\n         }\n         try {\n-            double[] x = m.getColumnAsDoubleArray(-1);\n+            m.getColumnAsDoubleArray(-1);\n             fail(\"expecting MatrixIndexException\");\n         } catch (MatrixIndexException ex) {\n             ;\n--- a/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n         RealMatrixImpl m = new RealMatrixImpl(testData);\n         RealMatrixImpl m2 = new RealMatrixImpl(testData2);\n         try {\n-            RealMatrixImpl mPlusMInv = (RealMatrixImpl)m.add(m2);\n+            m.add(m2);\n             fail(\"IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         assertClose(\"m-n = m + -n\",m.subtract(m2),\n             m2.scalarMultiply(-1d).add(m),entryTolerance);        \n         try {\n-            RealMatrix a = m.subtract(new RealMatrixImpl(testData2));\n+            m.subtract(new RealMatrixImpl(testData2));\n             fail(\"Expecting illegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         assertClose(\"identity multiply\",m2.multiply(identity),\n             m2,entryTolerance); \n         try {\n-            RealMatrix a = m.multiply(new RealMatrixImpl(bigSingular));\n+            m.multiply(new RealMatrixImpl(bigSingular));\n             fail(\"Expecting illegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         assertClose(\"inverse-operate\",mInv.operate(testVector),\n             m.solve(testVector),normTolerance);\n         try {\n-            double[] x = m.solve(testVector2);\n+            m.solve(testVector2);\n             fail(\"expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         }       \n         RealMatrix bs = new RealMatrixImpl(bigSingular);\n         try {\n-            RealMatrix a = bs.solve(bs);\n+            bs.solve(bs);\n             fail(\"Expecting InvalidMatrixException\");\n         } catch (InvalidMatrixException ex) {\n             ;\n         }\n         try {\n-            RealMatrix a = m.solve(bs);\n+            m.solve(bs);\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         }\n         try {\n-            RealMatrix a = (new RealMatrixImpl(testData2)).solve(bs);\n+            new RealMatrixImpl(testData2).solve(bs);\n             fail(\"Expecting illegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         assertEquals(\"nonsingular  R test 2\",-1d,m.getDeterminant(),normTolerance);\n \n         try {\n-            double a = new RealMatrixImpl(testData2).getDeterminant();\n+            new RealMatrixImpl(testData2).getDeterminant();\n             fail(\"Expecting InvalidMatrixException\");\n         } catch (InvalidMatrixException ex) {\n             ;\n         assertEquals(\"identity trace\",3d,m.getTrace(),entryTolerance);\n         m = new RealMatrixImpl(testData2);\n         try {\n-            double x = m.getTrace();\n+            m.getTrace();\n             fail(\"Expecting illegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         assertClose(\"identity operate\",testVector,x,entryTolerance);\n         m = new RealMatrixImpl(bigSingular);\n         try {\n-            x = m.operate(testVector);\n+            m.operate(testVector);\n             fail(\"Expecting illegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         RealMatrixImpl m = new RealMatrixImpl(testData);\n         RealMatrixImpl mInv = new RealMatrixImpl(testDataInv);\n         RealMatrixImpl identity = new RealMatrixImpl(id);\n-        RealMatrixImpl m2 = new RealMatrixImpl(testData2);\n         assertClose(\"inverse multiply\",m.preMultiply(mInv),\n                 identity,entryTolerance);\n         assertClose(\"inverse multiply\",mInv.preMultiply(m),\n         assertClose(\"identity multiply\",identity.preMultiply(mInv),\n                 mInv,entryTolerance);\n         try {\n-            RealMatrix a = m.preMultiply(new RealMatrixImpl(bigSingular));\n+            m.preMultiply(new RealMatrixImpl(bigSingular));\n             fail(\"Expecting illegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         assertClose(\"get row\",m.getRow(0),testDataRow1,entryTolerance);\n         assertClose(\"get col\",m.getColumn(2),testDataCol3,entryTolerance);\n         try {\n-            double[] x = m.getRow(10);\n+            m.getRow(10);\n             fail(\"expecting MatrixIndexException\");\n         } catch (MatrixIndexException ex) {\n             ;\n         }\n         try {\n-            double[] x = m.getColumn(-1);\n+            m.getColumn(-1);\n             fail(\"expecting MatrixIndexException\");\n         } catch (MatrixIndexException ex) {\n             ;\n--- a/src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java\n+++ b/src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java\n     \n     public void testNextInt() {\n         try {\n-            int x = testGenerator.nextInt(-1);\n+            testGenerator.nextInt(-1);\n             fail(\"IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n             ;\n--- a/src/test/org/apache/commons/math/random/RandomDataTest.java\n+++ b/src/test/org/apache/commons/math/random/RandomDataTest.java\n     protected long smallSampleSize = 1000;\n     protected double[] expected = {250,250,250,250};\n     protected int largeSampleSize = 10000;\n-    private int tolerance = 50;\n     private String[] hex = \n         {\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"}; \n     protected RandomDataImpl randomData = null; \n     /** test dispersion and failure modes for nextInt() */\n     public void testNextInt() {\n         try {\n-            int x = randomData.nextInt(4,3);\n+            randomData.nextInt(4,3);\n             fail(\"IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n             ;\n     /** test dispersion and failure modes for nextLong() */\n     public void testNextLong() {\n        try {\n-            long x = randomData.nextLong(4,3);\n+            randomData.nextLong(4,3);\n             fail(\"IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n             ;\n     /** test dispersion and failure modes for nextSecureLong() */\n     public void testNextSecureLong() {\n         try {\n-            long x = randomData.nextSecureLong(4,3);\n+            randomData.nextSecureLong(4,3);\n             fail(\"IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n             ;\n     /** test dispersion and failure modes for nextSecureInt() */\n     public void testNextSecureInt() {\n         try {\n-            long x = randomData.nextSecureInt(4,3);\n+            randomData.nextSecureInt(4,3);\n             fail(\"IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n             ;\n      */\n     public void testNextPoisson() {\n         try {\n-            long x = randomData.nextPoisson(0);\n+            randomData.nextPoisson(0);\n             fail(\"zero mean -- expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         }\n         Frequency f = new Frequency();\n-        long v = 0;\n         for (int i = 0; i<largeSampleSize; i++) {\n             try {\n                 f.addValue(randomData.nextPoisson(4.0d));\n             new Double(cumFreq).doubleValue()/new Double(sumFreq).doubleValue();\n         assertEquals(\"cum Poisson(4)\",cumPct,0.7851,0.2);\n         try {\n-            long x = randomData.nextPoisson(-1);\n+            randomData.nextPoisson(-1);\n             fail(\"negative mean supplied -- IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         }\n         try {\n-            long x = randomData.nextPoisson(0);\n+            randomData.nextPoisson(0);\n             fail(\"0 mean supplied -- IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n             ;\n     /** test dispersion and failute modes for nextHex() */\n     public void testNextHex() {\n         try {\n-            String x = randomData.nextHexString(-1);\n+            randomData.nextHexString(-1);\n             fail(\"negative length supplied -- IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         }\n         try {\n-            String x = randomData.nextHexString(0);\n+            randomData.nextHexString(0);\n             fail(\"zero length supplied -- IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n             ;\n     /** test dispersion and failute modes for nextHex() */\n     public void testNextSecureHex() {\n         try {\n-            String x = randomData.nextSecureHexString(-1);\n+            randomData.nextSecureHexString(-1);\n             fail(\"negative length -- IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         }\n         try {\n-            String x = randomData.nextSecureHexString(0);\n+            randomData.nextSecureHexString(0);\n             fail(\"zero length -- IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n             ;\n     /** test failure modes and dispersion of nextUniform() */  \n     public void testNextUniform() {    \n         try {\n-            double x = randomData.nextUniform(4,3);\n+            randomData.nextUniform(4,3);\n             fail(\"IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         }\n         try {\n-            double x = randomData.nextUniform(3,3);\n+            randomData.nextUniform(3,3);\n             fail(\"IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n             ;\n     /** test failure modes and distribution of nextGaussian() */  \n     public void testNextGaussian() { \n         try {\n-            double x = randomData.nextGaussian(0,0);\n+            randomData.nextGaussian(0,0);\n             fail(\"zero sigma -- IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n             ;\n     /** test failure modes and distribution of nextExponential() */  \n     public void testNextExponential() {\n         try {\n-            double x = randomData.nextExponential(-1);\n+            randomData.nextExponential(-1);\n             fail(\"negative mean -- expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         // test reseeding without first using the generators\n         RandomDataImpl rd = new RandomDataImpl();\n         rd.reSeed(100);\n-        double ret = rd.nextLong(1,2);\n+        rd.nextLong(1,2);\n         RandomDataImpl rd2 = new RandomDataImpl();\n         rd2.reSeedSecure(2000);\n-        ret = rd2.nextSecureLong(1,2);\n+        rd2.nextSecureLong(1,2);\n         rd = new RandomDataImpl();\n         rd.reSeed();\n-        ret = rd.nextLong(1,2);\n+        rd.nextLong(1,2);\n         rd2 = new RandomDataImpl();\n         rd2.reSeedSecure();\n-        ret = rd2.nextSecureLong(1,2);\n+        rd2.nextSecureLong(1,2);\n     }\n     \n     /** tests for nextSample() sampling from Collection */\n     }\n     \n     private int findSample(Object[] u, Object[] samp) {\n-        int result = -1;\n         for (int i = 0; i < u.length; i++) {\n             HashSet set = (HashSet) u[i];\n             HashSet sampSet = new HashSet();\n     }\n     \n     private int findPerm(int[][] p, int[] samp) {\n-        int result = -1;\n         for (int i = 0; i < p.length; i++) {\n             boolean good = true;\n             for (int j = 0; j < samp.length; j++) {\n--- a/src/test/org/apache/commons/math/stat/FrequencyTest.java\n+++ b/src/test/org/apache/commons/math/stat/FrequencyTest.java\n     private int oneI = 1;\n     private int twoI = 2;\n     private int threeI=3;\n-    private String oneS = \"1\";\n-    private String twoS = \"2\";\n     private double tolerance = 10E-15;\n     private Frequency f = null;\n     \n--- a/src/test/org/apache/commons/math/stat/StatUtilsTest.java\n+++ b/src/test/org/apache/commons/math/stat/StatUtilsTest.java\n     private double sumSq = 18;\n     private double sum = 8;\n     private double var = 0.666666666666666666667;\n-    private double std = Math.sqrt(var);\n-    private double n = 4;\n     private double min = 1;\n     private double max = 3;\n-    private double skewness = 0;\n-    private double kurtosis = 0.5;\n     private double tolerance = 10E-15;\n     private double nan = Double.NaN;\n \n     public void testGeometricMean() throws Exception {\n         double[] test = null;\n         try {\n-            double x = StatUtils.geometricMean(test);\n+            StatUtils.geometricMean(test);\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n--- a/src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java\n     private double n = 4;\n     private double min = 1;\n     private double max = 3;\n-    private double skewness = 0;\n-    private double kurtosis = 0.5;\n     private double tolerance = 10E-15;\n-    \n+\n     public DescriptiveStatisticsImplTest(String name) {\n         super(name);\n     }\n         assertEquals(\"expecting max\",5,u.getPercentile(99),10E-12);\n         assertEquals(\"expecting middle\",3,u.getPercentile(50),10E-12);\n         try {\n-            double x = u.getPercentile(0);\n+            u.getPercentile(0);\n             fail(\"expecting IllegalArgumentException for getPercentile(0)\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         }\n         try {\n-            double x = u.getPercentile(120);\n+            u.getPercentile(120);\n             fail(\"expecting IllegalArgumentException for getPercentile(120)\");\n         } catch (IllegalArgumentException ex) {\n             ;\n--- a/src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java\n     private double n = 4;\n     private double min = 1;\n     private double max = 3;\n-    private double skewness = 0;\n-    private double kurtosis = 0.5;\n     private double tolerance = 10E-15;\n     \n     public DescriptiveStatisticsTest(String name) {\n         assertEquals(\"expecting max\",5,u.getPercentile(99),10E-12);\n         assertEquals(\"expecting middle\",3,u.getPercentile(50),10E-12);\n         try {\n-            double x = u.getPercentile(0);\n+            u.getPercentile(0);\n             fail(\"expecting IllegalArgumentException for getPercentile(0)\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         }\n         try {\n-            double x = u.getPercentile(120);\n+            u.getPercentile(120);\n             fail(\"expecting IllegalArgumentException for getPercentile(120)\");\n         } catch (IllegalArgumentException ex) {\n             ;\n \n     public void testNewInstanceClassNull() {\n         try {\n-            DescriptiveStatistics u = DescriptiveStatistics.newInstance((Class)null);\n+            DescriptiveStatistics.newInstance((Class)null);\n             fail(\"null is not a valid descriptive statistics class\");\n         } catch (NullPointerException ex) {\n             // success\n                 DescriptiveStatisticsImpl.class);\n             assertNotNull(u);\n             assertTrue(u instanceof DescriptiveStatisticsImpl);\n-        } catch (Exception ex) {\n+        } catch (InstantiationException ex) {\n+            fail();\n+        } catch (IllegalAccessException ex) {\n             fail();\n         }\n     }\n--- a/src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java\n     private double n = 4;\n     private double min = 1;\n     private double max = 3;\n-    private double skewness = 0;\n-    private double kurtosis = 0.5;\n     private double tolerance = 10E-15;\n     \n     public ListUnivariateImplTest(String name) {\n--- a/src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java\n     private double n = 4;\n     private double min = 1;\n     private double max = 3;\n-    private double skewness = 0;\n-    private double kurtosis = 0.5;\n     private double tolerance = 10E-15;\n \n     private TransformerMap transformers = new TransformerMap();\n     }\n \n     public void testN0andN1Conditions() throws Exception {\n-        List list = new ArrayList();\n-\n         DescriptiveStatistics u = new ListUnivariateImpl(new ArrayList(),transformers);\n \n         assertTrue(\n--- a/src/test/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java\n     public void testEqualsAndHashCode() {\n         StatisticalSummaryValues u  = new StatisticalSummaryValues(1, 2, 3, 4, 5, 6);\n         StatisticalSummaryValues t = null;\n-        int emptyHash = u.hashCode();\n         assertTrue(\"reflexive\", u.equals(u));\n         assertFalse(\"non-null compared to null\", u.equals(t));\n         assertFalse(\"wrong type\", u.equals(new Double(0)));\n--- a/src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java\n     }\n     \n     public void testNaNContracts() {\n-        double nan = Double.NaN;\n         assertTrue(\"mean not NaN\",Double.isNaN(u.getMean())); \n         assertTrue(\"min not NaN\",Double.isNaN(u.getMin())); \n         assertTrue(\"std dev not NaN\",Double.isNaN(u.getStandardDeviation())); \n--- a/src/test/org/apache/commons/math/stat/inference/TTestTest.java\n+++ b/src/test/org/apache/commons/math/stat/inference/TTestTest.java\n     protected TTest testStatistic = new TTestImpl();\n     \n     private double[] tooShortObs = { 1.0 };\n-    private double[] nullObserved = null;\n     private double[] emptyObs = {};\n     private SummaryStatistics emptyStats = SummaryStatistics.newInstance();  \n-    private SummaryStatistics nullStats = null;   \n-    SummaryStatistics tooShortStats = null;  \n+   SummaryStatistics tooShortStats = null;  \n \n     public TTestTest(String name) {\n         super(name);\n                 testStatistic.tTest(mu, sampleStats), 10E-10);\n \n         try {\n-            testStatistic.t(mu, nullObserved);\n-            fail(\"arguments too short, IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n-            // expected\n-        }\n-\n-        try {\n-            testStatistic.t(mu, nullStats);\n+            testStatistic.t(mu, (double[]) null);\n+            fail(\"arguments too short, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+\n+        try {\n+            testStatistic.t(mu, (SummaryStatistics) null);\n             fail(\"arguments too short, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n         double[] sample1 = {1d, 3d, 5d, 7d};\n         double[] sample2 = {0d, 6d, 11d, 2d};\n         double[] sample3 = {5d, 7d, 8d, 10d};\n-        double[] sample4 = {0d, 2d};\n-        \n+\n         // Target values computed using R, version 1.8.1 (linux version)\n         assertEquals(-0.3133, testStatistic.pairedT(sample1, sample2), 1E-4);\n         assertEquals(0.774544295819, testStatistic.pairedTTest(sample1, sample2), 1E-10);\n--- a/src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java\n+++ b/src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java\n     }\n     \n     private double[] tooShortObs = { 1.0 };\n-    private double[] nullObserved = null;\n     private double[] emptyObs = {};\n     private SummaryStatistics emptyStats = SummaryStatistics.newInstance();  \n-    private SummaryStatistics nullStats = null;   \n-    SummaryStatistics tooShortStats = null;  \n \n     public void testOneSampleT() throws Exception {\n         double[] observed =\n                 TestUtils.tTest(mu, sampleStats), 10E-10);\n \n         try {\n-            TestUtils.t(mu, nullObserved);\n+            TestUtils.t(mu, (double[]) null);\n             fail(\"arguments too short, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n         }\n \n         try {\n-            TestUtils.t(mu, nullStats);\n+            TestUtils.t(mu, (SummaryStatistics) null);\n             fail(\"arguments too short, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n         }  \n \n         try {\n-            TestUtils.t(mu, tooShortStats);\n+            TestUtils.t(mu, (SummaryStatistics) null);\n             fail(\"insufficient data to compute t statistic, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n             // exptected\n         }\n         try {\n-            TestUtils.tTest(mu, tooShortStats);\n+            TestUtils.tTest(mu, (SummaryStatistics) null);\n             fail(\"insufficient data to perform t test, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n             // exptected\n         }  \n         \n         try {\n-            TestUtils.tTest(sampleStats1, tooShortStats, .01);\n+            TestUtils.tTest(sampleStats1, (SummaryStatistics) null, .01);\n             fail(\"insufficient data, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n         }  \n         \n         try {\n-            TestUtils.tTest(sampleStats1, tooShortStats);\n+            TestUtils.tTest(sampleStats1, (SummaryStatistics) null);\n             fail(\"insufficient data, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n         }\n         \n         try {\n-            TestUtils.t(sampleStats1, tooShortStats);\n+            TestUtils.t(sampleStats1, (SummaryStatistics) null);\n             fail(\"insufficient data, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n         double[] sample1 = {1d, 3d, 5d, 7d};\n         double[] sample2 = {0d, 6d, 11d, 2d};\n         double[] sample3 = {5d, 7d, 8d, 10d};\n-        double[] sample4 = {0d, 2d};\n-        \n+\n         // Target values computed using R, version 1.8.1 (linux version)\n         assertEquals(-0.3133, TestUtils.pairedT(sample1, sample2), 1E-4);\n         assertEquals(0.774544295819, TestUtils.pairedTTest(sample1, sample2), 1E-10);\n--- a/src/test/org/apache/commons/math/stat/regression/SimpleRegressionTest.java\n+++ b/src/test/org/apache/commons/math/stat/regression/SimpleRegressionTest.java\n                 regression.getSlopeConfidenceInterval() < regression.getSlopeConfidenceInterval(0.01));\n      \n         try {\n-            double x = regression.getSlopeConfidenceInterval(1);\n+            regression.getSlopeConfidenceInterval(1);\n             fail(\"expecting IllegalArgumentException for alpha = 1\");\n         } catch (IllegalArgumentException ex) {\n             ;\n--- a/src/test/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/org/apache/commons/math/util/MathUtilsTest.java\n         int bigNeg = Integer.MIN_VALUE;\n         assertEquals(big, MathUtils.addAndCheck(big, 0));\n         try {\n-            int res = MathUtils.addAndCheck(big, 1);\n+            MathUtils.addAndCheck(big, 1);\n             fail(\"Expecting ArithmeticException\");\n         } catch (ArithmeticException ex) {}\n         try {\n-            int res = MathUtils.addAndCheck(bigNeg, -1);\n+            MathUtils.addAndCheck(bigNeg, -1);\n             fail(\"Expecting ArithmeticException\");\n         } catch (ArithmeticException ex) {}\n     }\n         int bigNeg = Integer.MIN_VALUE;\n         assertEquals(big, MathUtils.mulAndCheck(big, 1));\n         try {\n-            int res = MathUtils.mulAndCheck(big, 2);\n+            MathUtils.mulAndCheck(big, 2);\n             fail(\"Expecting ArithmeticException\");\n         } catch (ArithmeticException ex) {}\n         try {\n-            int res = MathUtils.mulAndCheck(bigNeg, 2);\n+            MathUtils.mulAndCheck(bigNeg, 2);\n             fail(\"Expecting ArithmeticException\");\n         } catch (ArithmeticException ex) {}\n     }\n         int bigNeg = Integer.MIN_VALUE;\n         assertEquals(big, MathUtils.subAndCheck(big, 0));\n         try {\n-            int res = MathUtils.subAndCheck(big, -1);\n+            MathUtils.subAndCheck(big, -1);\n             fail(\"Expecting ArithmeticException\");\n         } catch (ArithmeticException ex) {}\n         try {\n-            int res = MathUtils.subAndCheck(bigNeg, 1);\n+            MathUtils.subAndCheck(bigNeg, 1);\n             fail(\"Expecting ArithmeticException\");\n         } catch (ArithmeticException ex) {}\n     }\n     \n     public void testSubAndCheckErrorMessage() {\n         int big = Integer.MAX_VALUE;\n-        int bigNeg = Integer.MIN_VALUE;\n-        try {\n-            int res = MathUtils.subAndCheck(big, -1);\n+        try {\n+            MathUtils.subAndCheck(big, -1);\n             fail(\"Expecting ArithmeticException\");\n         } catch (ArithmeticException ex) {\n             assertEquals(\"overflow: subtract\", ex.getMessage());\n     \n     public void testBinomialCoefficientFail() {\n         try {\n-            long x = MathUtils.binomialCoefficient(4,5);\n+            MathUtils.binomialCoefficient(4,5);\n             fail (\"expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         }\n         \n         try {\n-            double x = MathUtils.binomialCoefficientDouble(4,5);\n+            MathUtils.binomialCoefficientDouble(4,5);\n             fail (\"expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         }\n         \n         try {\n-            double x = MathUtils.binomialCoefficientLog(4,5);\n+            MathUtils.binomialCoefficientLog(4,5);\n             fail (\"expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         }\n         try {\n-            long x = MathUtils.binomialCoefficient(67,34);\n+            MathUtils.binomialCoefficient(67,34);\n             fail (\"expecting ArithmeticException\");\n         } catch (ArithmeticException ex) {\n             ;\n \n     public void testFactorialFail() {\n         try {\n-            long x = MathUtils.factorial(-1);\n+            MathUtils.factorial(-1);\n             fail (\"expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         }\n         try {\n-            double x = MathUtils.factorialDouble(-1);\n+            MathUtils.factorialDouble(-1);\n             fail (\"expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         }\n         try {\n-            double x = MathUtils.factorialLog(-1);\n+            MathUtils.factorialLog(-1);\n             fail (\"expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         }\n         try {\n-            double x = MathUtils.factorial(21);\n+            MathUtils.factorial(21);\n             fail (\"expecting ArithmeticException\");\n         } catch (ArithmeticException ex) {\n             ;\n         int test = 10;\n         while (!foundLimit) {\n             try {\n-                double x = MathUtils.binomialCoefficient(test, test / 2);\n+                MathUtils.binomialCoefficient(test, test / 2);\n             } catch (ArithmeticException ex) {\n                 foundLimit = true;\n                 System.out.println\n         int test = 10;\n         while (!foundLimit) {\n             try {\n-                double x = MathUtils.factorial(test);\n+                MathUtils.factorial(test);\n             } catch (ArithmeticException ex) {\n                 foundLimit = true;\n                 System.out.println\n--- a/src/test/org/apache/commons/math/util/TestBean.java\n+++ b/src/test/org/apache/commons/math/util/TestBean.java\n  */\n public class TestBean {\n     private Double x = new Double(1.0);\n-    \n+\n     private String y = \"1.0\";\n-    \n-    private Double z = new Double(2.0);\n-    \n+\n     /**\n      * \n      */\n      * \n      */\n     public void setZ(Double double1) {\n-        z = double1;\n     }\n \n }", "timestamp": 1187296593, "metainfo": ""}