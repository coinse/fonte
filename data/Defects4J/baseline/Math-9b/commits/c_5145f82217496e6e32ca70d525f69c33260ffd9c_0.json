{"sha": "5145f82217496e6e32ca70d525f69c33260ffd9c", "log": "Eliminated main method.  ", "commit": "\n--- a/src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java\n+++ b/src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java\n /**\n  * Abstract base class for {@link ContinuousDistribution} tests.\n  * <p>\n- * To create a concrete test class for a continuous distribution implementation,\n- * implement makeDistribution() to return a distribution instance to use in \n- * tests and each of the test data generation methods below.  In each case, the\n- * test points and test values arrays returned represent parallel arrays of \n- * inputs and expected values for the distribution returned by makeDistribution().\n- *  <p>\n+ * To create a concrete test class for a continuous distribution\n+ * implementation, first implement makeDistribution() to return a distribution\n+ * instance to use in tests. Then implement each of the test data generation\n+ * methods below.  In each case, the test points and test values arrays\n+ * returned represent parallel arrays of inputs and expected values for the\n+ * distribution returned by makeDistribution().  Default implementations\n+ * are provided for the makeInverseXxx methods that just invert the mapping\n+ * defined by the arrays returned by the makeCumulativeXxx methods.\n+ * <p>\n  * makeCumulativeTestPoints() -- arguments used to test cumulative probabilities\n  * makeCumulativeTestValues() -- expected cumulative probabilites\n- * makeInverseCumulativeTestPoints() -- arguments used to test inverse cdf evaluation\n+ * makeInverseCumulativeTestPoints() -- arguments used to test inverse cdf\n  * makeInverseCumulativeTestValues() -- expected inverse cdf values\n  * <p>\n- * To implement additional test cases with different distribution instances and test data,\n- * use the setXxx methods for the instance data in test cases and call the verifyXxx methods\n- * to verify results. \n+ * To implement additional test cases with different distribution instances and\n+ * test data, use the setXxx methods for the instance data in test cases and\n+ * call the verifyXxx methods to verify results. \n  * <p>\n  * Error tolerance can be overriden by implementing getTolerance().\n+ * <p>\n+ * Test data should be validated against reference tables or other packages\n+ * where possible, and the source of the reference data and/or validation\n+ * should be documented in the test cases.  A framework for validating\n+ * distribution data against R is included in the /src/R source tree.\n+ * <p>\n+ * See {@link NormalDistributionTest} and {@link ChiSquareDistributionTest}\n+ * for examples.\n  * \n  * @version $Revision$ $Date$\n  */\n--- a/src/test/org/apache/commons/math/distribution/NormalDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/NormalDistributionTest.java\n      */\n     public NormalDistributionTest(String arg0) {\n         super(arg0);\n-    }\n-    \n-    public static void main(String[] args) {\n-        junit.swingui.TestRunner.run(NormalDistributionTest.class);\n     }\n     \n     //-------------- Implementations for abstract methods -----------------------", "timestamp": 1141615754, "metainfo": ""}