{"sha": "e23e91a39fd27a5fad1244ff25382bdd31352a74", "log": "Added FixedElapsedTime stopping condition. JIRA: MATH-773 contributed by Reid Hochstedler  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math3/genetics/FixedElapsedTime.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.genetics;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.commons.math3.exception.NumberIsTooSmallException;\n+\n+/**\n+ * Stops after a fixed amount of time has elapsed.\n+ *\n+ * <p>\n+ * The first time {@link #isSatisfied(Population)} is invoked, the end time of\n+ * the evolution is determined based on the provided <code>maxTime</code> value.\n+ * Once the elapsed time reaches the configured <code>maxTime</code> value,\n+ * {@link #isSatisfied(Population)} returns true.\n+ * </p>\n+ *\n+ * @version $Id$\n+ * @since 3.1\n+ */\n+public class FixedElapsedTime implements StoppingCondition {\n+    /** Maximum allowed time period (in nanoseconds). */\n+    private final long maxTimePeriod;\n+\n+    /** The predetermined termination time (stopping condition). */\n+    private long endTime = -1;\n+\n+    /**\n+     * Create a new {@link FixedElapsedTime} instance.\n+     *\n+     * @param maxTime maximum number of seconds generations are allowed to evolve\n+     * @throws NumberIsTooSmallException if the provided time is &lt; 0\n+     */\n+    public FixedElapsedTime(final long maxTime) {\n+        this(maxTime, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Create a new {@link FixedElapsedTime} instance.\n+     *\n+     * @param maxTime maximum time generations are allowed to evolve\n+     * @param unit {@link TimeUnit} of the maxTime argument\n+     * @throws NumberIsTooSmallException if the provided time is &lt; 0\n+     */\n+    public FixedElapsedTime(final long maxTime, final TimeUnit unit) {\n+        if (maxTime < 0) {\n+            throw new NumberIsTooSmallException(maxTime, 0, true);\n+        }\n+        maxTimePeriod = unit.toNanos(maxTime);\n+    }\n+\n+    /**\n+     * Determine whether or not the maximum allowed time has passed.\n+     * The termination time is determined after the first generation.\n+     *\n+     * @param population ignored (no impact on result)\n+     * @return <code>true</code> IFF the maximum allowed time period has elapsed\n+     */\n+    public boolean isSatisfied(final Population population) {\n+        if (endTime < 0) {\n+            endTime = System.nanoTime() + maxTimePeriod;\n+        }\n+\n+        return System.nanoTime() >= endTime;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math3/genetics/FixedElapsedTimeTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.genetics;\n+\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.commons.math3.util.FastMath;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class FixedElapsedTimeTest {\n+\n+    @Test\n+    public void testIsSatisfied() {\n+        final Population pop = new Population() {\n+            public void addChromosome(final Chromosome chromosome) {\n+                // unimportant\n+            }\n+            public Chromosome getFittestChromosome() {\n+                // unimportant\n+                return null;\n+            }\n+            public int getPopulationLimit() {\n+                // unimportant\n+                return 0;\n+            }\n+            public int getPopulationSize() {\n+                // unimportant\n+                return 0;\n+            }\n+            public Population nextGeneration() {\n+                // unimportant\n+                return null;\n+            }\n+            public Iterator<Chromosome> iterator() {\n+                // unimportant\n+                return null;\n+            }\n+        };\n+\n+        final long start = System.nanoTime();\n+        final long duration = 3;\n+        final FixedElapsedTime tec = new FixedElapsedTime(duration, TimeUnit.SECONDS);\n+\n+        while (!tec.isSatisfied(pop)) {\n+            try {\n+                Thread.sleep(500);\n+            } catch (InterruptedException e) {\n+                // ignore\n+            }\n+        }\n+\n+        final long end = System.nanoTime();\n+        final long elapsedTime = end - start;\n+        final long diff = FastMath.abs(elapsedTime - TimeUnit.SECONDS.toNanos(duration));\n+\n+        Assert.assertTrue(diff < TimeUnit.MILLISECONDS.toNanos(100));\n+    }\n+}", "timestamp": 1333298761, "metainfo": ""}