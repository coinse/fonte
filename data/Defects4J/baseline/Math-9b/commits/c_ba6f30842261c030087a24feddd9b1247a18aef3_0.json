{"sha": "ba6f30842261c030087a24feddd9b1247a18aef3", "log": "Added init methods to StepHandler and EventHandler interfaces.  The reset method in StepHandler interface has been renamed init and is provided more information on the integration by the calling integrator. A similar init method has been added to the EventHandler interface.  Jira: MATH-714  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java\n         statesInitialized = false;\n         evaluations = new Incrementor();\n         setMaxEvaluations(-1);\n-        resetEvaluations();\n+        evaluations.resetCount();\n     }\n \n     /** Build an instance with a null name.\n         return evaluations.getCount();\n     }\n \n-    /** Reset the number of evaluations to zero.\n-     */\n-    protected void resetEvaluations() {\n+    /** Prepare the start of an integration.\n+     * @param t0 start value of the independent <i>time</i> variable\n+     * @param y0 array containing the start value of the state vector\n+     * @param t target time for the integration\n+     */\n+    protected void initIntegration(final double t0, final double[] y0, final double t) {\n+\n         evaluations.resetCount();\n+\n+        for (final EventState state : eventsStates) {\n+            state.getEventHandler().init(t0, y0, t);\n+        }\n+\n+        for (StepHandler handler : stepHandlers) {\n+            handler.init(t0, y0, t);\n+        }\n+\n+        setStateInitialized(false);\n+\n     }\n \n     /** Set the equations.\n--- a/src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java\n+++ b/src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java\n    */\n   public ContinuousOutputModel() {\n     steps = new ArrayList<StepInterpolator>();\n-    reset();\n+    initialTime = Double.NaN;\n+    finalTime   = Double.NaN;\n+    forward     = true;\n+    index       = 0;\n   }\n \n   /** Append another model at the end of the instance.\n \n   }\n \n-  /** Reset the step handler.\n-   * Initialize the internal data as required before the first step is\n-   * handled.\n-   */\n-  public void reset() {\n+  /** {@inheritDoc} */\n+  public void init(double t0, double[] y0, double t) {\n     initialTime = Double.NaN;\n     finalTime   = Double.NaN;\n     forward     = true;\n     index       = 0;\n     steps.clear();\n-   }\n+  }\n \n   /** Handle the last accepted step.\n    * A copy of the information provided by the last step is stored in\n--- a/src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java\n         }\n \n         /** {@inheritDoc} */\n-        public void reset() {\n+        public void init(double t0, double[] y0, double t) {\n             // nothing to do\n         }\n \n--- a/src/main/java/org/apache/commons/math/ode/events/EventHandler.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventHandler.java\n         CONTINUE;\n \n     }\n+\n+    /** Initialize event handler at the start of an ODE integration.\n+     * <p>\n+     * This method is called once at the start of the integration. It\n+     * may be used by the event handler to initialize some internal data\n+     * if needed.\n+     * </p>\n+     * @param t0 start value of the independent <i>time</i> variable\n+     * @param y0 array containing the start value of the state vector\n+     * @param t target time for the integration\n+     */\n+    void init(double t0, double[] y0, double t);\n \n   /** Compute the value of the switching function.\n \n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java\n import org.apache.commons.math.linear.Array2DRowRealMatrix;\n import org.apache.commons.math.ode.ExpandableStatefulODE;\n import org.apache.commons.math.ode.sampling.NordsieckStepInterpolator;\n-import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.util.FastMath;\n \n \n \n         sanityChecks(equations, t);\n         setEquations(equations);\n-        resetEvaluations();\n         final boolean forward = t > equations.getTime();\n \n         // initialize working arrays\n                                   equations.getPrimaryMapper(), equations.getSecondaryMappers());\n \n         // set up integration control objects\n-        for (StepHandler handler : stepHandlers) {\n-            handler.reset();\n-        }\n-        setStateInitialized(false);\n+        initIntegration(equations.getTime(), y0, t);\n \n         // compute the initial Nordsieck vector using the configured starter integrator\n         start(equations.getTime(), y, t);\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java\n import org.apache.commons.math.linear.RealMatrixPreservingVisitor;\n import org.apache.commons.math.ode.ExpandableStatefulODE;\n import org.apache.commons.math.ode.sampling.NordsieckStepInterpolator;\n-import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.util.FastMath;\n \n \n \n         sanityChecks(equations, t);\n         setEquations(equations);\n-        resetEvaluations();\n         final boolean forward = t > equations.getTime();\n \n         // initialize working arrays\n                                   equations.getPrimaryMapper(), equations.getSecondaryMappers());\n \n         // set up integration control objects\n-        for (StepHandler handler : stepHandlers) {\n-            handler.reset();\n-        }\n-        setStateInitialized(false);\n+        initIntegration(equations.getTime(), y0, t);\n \n         // compute the initial Nordsieck vector using the configured starter integrator\n         start(equations.getTime(), y, t);\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.apache.commons.math.exception.MathIllegalStateException;\n import org.apache.commons.math.ode.ExpandableStatefulODE;\n-import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.util.FastMath;\n \n /**\n \n     sanityChecks(equations, t);\n     setEquations(equations);\n-    resetEvaluations();\n     final boolean forward = t > equations.getTime();\n \n     // create some internal working arrays\n     stepStart         = equations.getTime();\n     double  hNew      = 0;\n     boolean firstTime = true;\n-    for (StepHandler handler : stepHandlers) {\n-        handler.reset();\n-    }\n-    setStateInitialized(false);\n+    initIntegration(equations.getTime(), y0, t);\n \n     // main integration loop\n     isLastStep = false;\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n \n     sanityChecks(equations, t);\n     setEquations(equations);\n-    resetEvaluations();\n     final boolean forward = t > equations.getTime();\n \n     // create some internal working arrays\n     boolean firstTime        = true;\n     boolean newStep          = true;\n     boolean firstStepAlreadyComputed = false;\n-    for (StepHandler handler : stepHandlers) {\n-        handler.reset();\n-    }\n-    setStateInitialized(false);\n+    initIntegration(equations.getTime(), y0, t);\n     costPerTimeUnit[0] = 0;\n     isLastStep = false;\n     do {\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java\n import org.apache.commons.math.exception.MathIllegalStateException;\n import org.apache.commons.math.ode.AbstractIntegrator;\n import org.apache.commons.math.ode.ExpandableStatefulODE;\n-import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.util.FastMath;\n \n /**\n \n     sanityChecks(equations, t);\n     setEquations(equations);\n-    resetEvaluations();\n     final boolean forward = t > equations.getTime();\n \n     // create some internal working arrays\n     // set up integration control objects\n     stepStart = equations.getTime();\n     stepSize  = forward ? step : -step;\n-    for (StepHandler handler : stepHandlers) {\n-        handler.reset();\n-    }\n-    setStateInitialized(false);\n+    initIntegration(equations.getTime(), y0, t);\n \n     // main integration loop\n     isLastStep = false;\n--- a/src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java\n+++ b/src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java\n         return LazyHolder.INSTANCE;\n     }\n \n-    /** Reset the step handler.\n-     * Initialize the internal data as required before the first step is\n-     * handled.\n-     */\n-    public void reset() {\n+    /** {@inheritDoc} */\n+    public void init(double t0, double[] y0, double t) {\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java\n+++ b/src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java\n \n public interface StepHandler {\n \n-  /** Reset the step handler.\n-   * Initialize the internal data as required before the first step is\n-   * handled.\n-   */\n-  void reset();\n+    /** Initialize step handler at the start of an ODE integration.\n+     * <p>\n+     * This method is called once at the start of the integration. It\n+     * may be used by the step handler to initialize some internal data\n+     * if needed.\n+     * </p>\n+     * @param t0 start value of the independent <i>time</i> variable\n+     * @param y0 array containing the start value of the state vector\n+     * @param t target time for the integration\n+     */\n+    void init(double t0, double[] y0, double t);\n \n-  /**\n-   * Handle the last accepted step\n-   * @param interpolator interpolator for the last accepted step. For\n-   * efficiency purposes, the various integrators reuse the same\n-   * object on each call, so if the instance wants to keep it across\n-   * all calls (for example to provide at the end of the integration a\n-   * continuous model valid throughout the integration range, as the\n-   * {@link org.apache.commons.math.ode.ContinuousOutputModel\n-   * ContinuousOutputModel} class does), it should build a local copy\n-   * using the clone method of the interpolator and store this copy.\n-   * Keeping only a reference to the interpolator and reusing it will\n-   * result in unpredictable behavior (potentially crashing the application).\n-   * @param isLast true if the step is the last one\n-   */\n-  void handleStep(StepInterpolator interpolator, boolean isLast);\n+    /**\n+     * Handle the last accepted step\n+     * @param interpolator interpolator for the last accepted step. For\n+     * efficiency purposes, the various integrators reuse the same\n+     * object on each call, so if the instance wants to keep it across\n+     * all calls (for example to provide at the end of the integration a\n+     * continuous model valid throughout the integration range, as the\n+     * {@link org.apache.commons.math.ode.ContinuousOutputModel\n+     * ContinuousOutputModel} class does), it should build a local copy\n+     * using the clone method of the interpolator and store this copy.\n+     * Keeping only a reference to the interpolator and reusing it will\n+     * result in unpredictable behavior (potentially crashing the application).\n+     * @param isLast true if the step is the last one\n+     */\n+    void handleStep(StepInterpolator interpolator, boolean isLast);\n \n }\n--- a/src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java\n+++ b/src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java\n     public StepNormalizer(final double h, final FixedStepHandler handler,\n                           final StepNormalizerMode mode,\n                           final StepNormalizerBounds bounds) {\n-        this.h       = FastMath.abs(h);\n-        this.handler = handler;\n-        this.mode    = mode;\n-        this.bounds  = bounds;\n-        reset();\n-    }\n-\n-    /** Reset the step handler.\n-     * Initialize the internal data as required before the first step is\n-     * handled.\n-     */\n-    public void reset() {\n+        this.h          = FastMath.abs(h);\n+        this.handler    = handler;\n+        this.mode       = mode;\n+        this.bounds     = bounds;\n+        firstTime       = Double.NaN;\n+        lastTime        = Double.NaN;\n+        lastState       = null;\n+        lastDerivatives = null;\n+        forward         = true;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public void init(double t0, double[] y0, double t) {\n         firstTime       = Double.NaN;\n         lastTime        = Double.NaN;\n         lastState       = null;\n--- a/src/test/java/org/apache/commons/math/ode/TestProblem4.java\n+++ b/src/test/java/org/apache/commons/math/ode/TestProblem4.java\n       sign = +1;\n     }\n \n+    public void init(double t0, double[] y0, double t) {\n+    }\n+\n     public double g(double t, double[] y) {\n       return sign * y[0];\n     }\n     public Stop() {\n     }\n \n+    public void init(double t0, double[] y0, double t) {\n+    }\n+\n     public double g(double t, double[] y) {\n       return t - 12.0;\n     }\n--- a/src/test/java/org/apache/commons/math/ode/TestProblemHandler.java\n+++ b/src/test/java/org/apache/commons/math/ode/TestProblemHandler.java\n   public TestProblemHandler(TestProblemAbstract problem, ODEIntegrator integrator) {\n     this.problem = problem;\n     this.integrator = integrator;\n-    reset();\n+    maxValueError = 0;\n+    maxTimeError  = 0;\n+    lastError     = 0;\n+    expectedStepStart = Double.NaN;\n   }\n \n-  public void reset() {\n+  public void init(double t0, double[] y0, double t) {\n     maxValueError = 0;\n     maxTimeError  = 0;\n     lastError     = 0;\n--- a/src/test/java/org/apache/commons/math/ode/events/EventStateTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/events/EventStateTest.java\n         final double r2  = 135.0;\n         final double gap = r2 - r1;\n         EventHandler closeEventsGenerator = new EventHandler() {\n+            public void init(double t0, double[] y0, double t) {\n+            }\n             public void resetState(double t, double[] y) {\n             }\n             public double g(double t, double[] y) {\n             this.tEvent = tEvent;\n         }\n \n+        public void init(double t0, double[] y0, double t) {\n+        }\n+\n         public double g(double t, double[] y) {\n             // the bug corresponding to issue 695 causes the g function\n             // to be called at obsolete times t despite an event\n--- a/src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java\n         }\n \n         /** {@inheritDoc} */\n+        public void init(double t0, double[] y0, double t) {\n+        }\n+\n+        /** {@inheritDoc} */\n         public double g(double t, double[] y) {\n             return (eventType == 0) ? y[idx] >= 1.0 ? 1.0 : -1.0\n                                     : y[idx] - 1.0;\n--- a/src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java\n \n     /** State events for this unit test. */\n     protected static class Event implements EventHandler {\n+\n+        public void init(double t0, double[] y0, double t) {\n+        }\n+\n         public double g(double t, double[] y) {\n             return y[6] - 15.0;\n         }\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java\n \n       integrator.addEventHandler(new EventHandler() {\n \n+          public void init(double t0, double[] y0, double t) {\n+          }\n+\n           public void resetState(double t, double[] y) {\n           }\n \n   private static class KeplerHandler implements StepHandler {\n     public KeplerHandler(TestProblem3 pb) {\n       this.pb = pb;\n-      reset();\n-    }\n-    public void reset() {\n+      maxError = 0;\n+    }\n+    public void init(double t0, double[] y0, double t) {\n       maxError = 0;\n     }\n     public void handleStep(StepInterpolator interpolator, boolean isLast) {\n                                1.0e-12);\n               }\n           }\n-          public void reset() {\n+          public void init(double t0, double[] y0, double t) {\n           }\n       });\n       integ.integrate(new FirstOrderDifferentialEquations() {\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java\n       this.minStep = minStep;\n     }\n \n-    public void reset() {\n+    public void init(double t0, double[] y0, double t) {\n     }\n \n     public void handleStep(StepInterpolator interpolator, boolean isLast) {\n   private static class KeplerHandler implements StepHandler {\n     public KeplerHandler(TestProblem3 pb) {\n       this.pb = pb;\n-      reset();\n-    }\n-    public void reset() {\n+    }\n+    public void init(double t0, double[] y0, double t) {\n       nbSteps = 0;\n       maxError = 0;\n     }\n       minStep = 0;\n       maxStep = 0;\n     }\n-    public void reset() {\n+    public void init(double t0, double[] y0, double t) {\n       firstTime = true;\n       minStep = 0;\n       maxStep = 0;\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java\n                                                                       scalAbsoluteTolerance,\n                                                                       scalRelativeTolerance);\n       integ.addStepHandler(new StepHandler() {\n-        public void handleStep(StepInterpolator interpolator, boolean isLast) {\n+          public void handleStep(StepInterpolator interpolator, boolean isLast) {\n               StepInterpolator cloned = interpolator.copy();\n               double tA = cloned.getPreviousTime();\n               double tB = cloned.getCurrentTime();\n                   }\n               }\n           }\n-          public void reset() {\n+          public void init(double t0, double[] y0, double t) {\n           }\n       });\n       integ.integrate(pb,\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java\n       integrator.setInitialStepSize(60.0);\n       integrator.addEventHandler(new EventHandler() {\n \n+          public void init(double t0, double[] y0, double t) {\n+          }\n+\n           public void resetState(double t, double[] y) {\n           }\n \n   private static class KeplerHandler implements StepHandler {\n     public KeplerHandler(TestProblem3 pb) {\n       this.pb = pb;\n-      reset();\n-    }\n-    public void reset() {\n+    }\n+    public void init(double t0, double[] y0, double t) {\n       nbSteps = 0;\n       maxError = 0;\n     }\n \n   private static class VariableHandler implements StepHandler {\n     public VariableHandler() {\n-      reset();\n-    }\n-    public void reset() {\n+        firstTime = true;\n+        minStep = 0;\n+        maxStep = 0;\n+    }\n+    public void init(double t0, double[] y0, double t) {\n       firstTime = true;\n       minStep = 0;\n       maxStep = 0;\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java\n                 }\n             }\n         }\n-        public void reset() {\n+        public void init(double t0, double[] y0, double t) {\n         }\n     });\n     integ.integrate(pb,\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java\n                              1.0e-12);\n             }\n         }\n-        public void reset() {\n+        public void init(double t0, double[] y0, double t) {\n         }\n       });\n       integ.integrate(new FirstOrderDifferentialEquations() {\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java\n   private static class KeplerStepHandler implements StepHandler {\n     public KeplerStepHandler(TestProblem3 pb) {\n       this.pb = pb;\n-      reset();\n-    }\n-    public void reset() {\n+    }\n+    public void init(double t0, double[] y0, double t) {\n       maxError = 0;\n     }\n     public void handleStep(StepInterpolator interpolator, boolean isLast) {\n                                1.0e-12);\n               }\n           }\n-          public void reset() {\n+          public void init(double t0, double[] y0, double t) {\n           }\n       });\n       integ.integrate(new FirstOrderDifferentialEquations() {\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java\n     FirstOrderIntegrator integ = new GraggBulirschStoerIntegrator(1e-10, 100.0, 1e-7, 1e-7);\n       integ.addStepHandler(new StepHandler() {\n \n-          public void reset() {}\n+          public void init(double t0, double[] y0, double t) {\n+          }\n \n           public void handleStep(StepInterpolator interpolator, boolean isLast) {\n               double t = interpolator.getCurrentTime();\n   private static class KeplerStepHandler implements StepHandler {\n     public KeplerStepHandler(TestProblem3 pb) {\n       this.pb = pb;\n-      reset();\n-    }\n-    public void reset() {\n+    }\n+    public void init(double t0, double[] y0, double t) {\n       nbSteps = 0;\n       maxError = 0;\n     }\n \n   public static class VariableStepHandler implements StepHandler {\n     public VariableStepHandler() {\n-      reset();\n-    }\n-    public void reset() {\n+        firstTime = true;\n+        minStep = 0;\n+        maxStep = 0;\n+    }\n+    public void init(double t0, double[] y0, double t) {\n       firstTime = true;\n       minStep = 0;\n       maxStep = 0;\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java\n                 }\n             }\n         }\n-        public void reset() {\n+        public void init(double t0, double[] y0, double t) {\n         }\n     });\n     integ.integrate(pb,\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java\n       integ.addStepHandler(handler);\n \n       integ.addEventHandler(new EventHandler() {\n+        public void init(double t0, double[] y0, double t) {\n+        }\n         public Action eventOccurred(double t, double[] y, boolean increasing) {\n           return Action.CONTINUE;\n         }\n     integ.addStepHandler(handler);\n \n     integ.addEventHandler(new EventHandler() {\n+      public void init(double t0, double[] y0, double t) {\n+      }\n       public Action eventOccurred(double t, double[] y, boolean increasing) {\n         return Action.CONTINUE;\n       }\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java\n                 }\n             }\n         }\n-        public void reset() {\n+        public void init(double t0, double[] y0, double t) {\n         }\n     });\n     integ.integrate(pb,\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java\n                                1.0e-12);\n               }\n           }\n-          public void reset() {\n+          public void init(double t0, double[] y0, double t) {\n           }\n       });\n       integ.integrate(new FirstOrderDifferentialEquations() {\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/StepProblem.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/StepProblem.java\n     this.rate = rate;\n   }\n \n+  public void init(double t0, double[] y0, double t) {\n+  }\n+\n   public Action eventOccurred(double t, double[] y, boolean increasing) {\n     setRate(rateAfter);\n     return Action.RESET_DERIVATIVES;\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java\n       maxError = 0;\n     }\n \n-    public void reset() {\n+    public void init(double t0, double[] y0, double t) {\n       maxError = 0;\n     }\n \n                                1.0e-12);\n               }\n           }\n-          public void reset() {\n+          public void init(double t0, double[] y0, double t) {\n           }\n       });\n       integ.integrate(new FirstOrderDifferentialEquations() {\n--- a/src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java\n+++ b/src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java\n \n             }\n \n-            public void reset() {\n+            public void init(double t0, double[] y0, double t) {\n             }\n \n         });", "timestamp": 1322475651, "metainfo": ""}