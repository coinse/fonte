{"sha": "d4df0e5382524acc79f5c392ad2c51a843b43f65", "log": "In LogNormalDistribution and LogNormalDistributionTest   - \"mean\" (of the underlying normal distribution) is now called \"scale\"   - \"standard deviation\" (of the underlying normal distribution) is now called \"shape\"   - in the javadoc, removed html links that point to internal anchors.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java\n  * Implementation of the log-normal (gaussian) distribution.\n  *\n  * <p>\n- * <a id=\"parameters\"><strong>Parameters:</strong></a>\n+ * <strong>Parameters:</strong>\n  * {@code X} is log-normally distributed if its natural logarithm {@code log(X)}\n  * is normally distributed. The probability distribution function of {@code X}\n  * is given by (for {@code x > 0})\n     /** &radic;(2) */\n     private static final double SQRT2 = FastMath.sqrt(2.0);\n \n-    /** The <a href=\"#parameters\">scale</a> parameter of this distribution. */\n+    /** The scale parameter of this distribution. */\n     private final double scale;\n \n-    /** The <a href=\"#parameters\">shape</a> parameter of this distribution. */\n+    /** The shape parameter of this distribution. */\n     private final double shape;\n \n     /** Inverse cumulative probability accuracy. */\n     private final double solverAbsoluteAccuracy;\n \n     /**\n-     * Create a log-normal distribution using the specified\n-     * <a href=\"#parameters\">scale</a> and\n-     * <a href=\"#parameters\">shape</a>.\n+     * Create a log-normal distribution using the specified scale and shape.\n      *\n      * @param scale the scale parameter of this distribution\n      * @param shape the shape parameter of this distribution\n     }\n \n     /**\n-     * Create a log-normal distribution using the specified\n-     * <a href=\"#parameters\">scale</a>, <a href=\"#parameters\">shape</a> and\n+     * Create a log-normal distribution using the specified scale, shape and\n      * inverse cumulative distribution accuracy.\n      *\n      * @param scale the scale parameter of this distribution\n     public LogNormalDistribution(double scale, double shape,\n         double inverseCumAccuracy) throws NotStrictlyPositiveException {\n         if (shape <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, shape);\n+            throw new NotStrictlyPositiveException(LocalizedFormats.SHAPE, shape);\n         }\n \n         this.scale = scale;\n     }\n \n     /**\n-     * Returns the <a href=\"#parameters\">scale</a> parameter of this distribution.\n+     * Returns the scale parameter of this distribution.\n      *\n      * @return the scale parameter\n      */\n     }\n \n     /**\n-     * Returns the <a href=\"#parameters\">shape</a> parameter of this\n-     * distribution.\n+     * Returns the shape parameter of this distribution.\n      *\n      * @return the shape parameter\n      */\n--- a/src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java\n     }\n \n     @Test\n-    public void testGetMean() {\n+    public void testGetScale() {\n         LogNormalDistribution distribution = (LogNormalDistribution)getDistribution();\n         Assert.assertEquals(2.1, distribution.getScale(), 0);\n     }\n \n     @Test\n-    public void testGetStandardDeviation() {\n+    public void testGetShape() {\n         LogNormalDistribution distribution = (LogNormalDistribution)getDistribution();\n         Assert.assertEquals(1.4, distribution.getShape(), 0);\n     }\n                                                0.1836267118});\n     }\n \n-    private void checkDensity(double mean, double sd, double[] x, double[] expected) {\n-        LogNormalDistribution d = new LogNormalDistribution(mean, sd);\n+    private void checkDensity(double scale, double shape, double[] x,\n+        double[] expected) {\n+        LogNormalDistribution d = new LogNormalDistribution(scale, shape);\n         for (int i = 0; i < x.length; i++) {\n             Assert.assertEquals(expected[i], d.density(x[i]), 1e-9);\n         }", "timestamp": 1326867425, "metainfo": ""}