{"sha": "ee76cb3292d63a7171f5d33b7f1d5a98cc6015bc", "log": "MATH-261 - start adding some generics to Frequency  ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n     private static final long serialVersionUID = -3845586908418844111L;\n \n     /** underlying collection */\n-    private final TreeMap freqTable;\n+    private final TreeMap<Comparable<?>, Long> freqTable;\n \n     /**\n      * Default constructor.\n      */\n     public Frequency() {\n-        freqTable = new TreeMap();\n+        freqTable = new TreeMap<Comparable<?>, Long>();\n     }\n     \n     /**\n      * @param comparator Comparator used to order values\n      */\n     public Frequency(Comparator comparator) {\n-        freqTable = new TreeMap(comparator);\n+        freqTable = new TreeMap<Comparable<?>, Long>(comparator);\n     }\n \n     /**\n         NumberFormat nf = NumberFormat.getPercentInstance();\n         StringBuffer outBuffer = new StringBuffer();\n         outBuffer.append(\"Value \\t Freq. \\t Pct. \\t Cum Pct. \\n\");\n-        Iterator iter = freqTable.keySet().iterator();\n+        Iterator<?> iter = freqTable.keySet().iterator();\n         while (iter.hasNext()) {\n             Object value = iter.next();\n             outBuffer.append(value);\n      * @param v the value to add.\n      * @throws IllegalArgumentException if <code>v</code> is not comparable with previous entries\n      */\n-    public void addValue(Comparable<?>v){\n-        Object obj = v;\n+    public void addValue(Comparable<?> v){\n+        Comparable<?> obj = v;\n         if (v instanceof Integer) {\n            obj = Long.valueOf(((Integer) v).longValue());\n         }\n         try {\n-            Long count = (Long) freqTable.get(obj);\n+            Long count = freqTable.get(obj);\n             if (count == null) {\n                 freqTable.put(obj, Long.valueOf(1));\n             } else {\n      * \n      * @return values Iterator\n      */\n-    public Iterator valuesIterator() {\n+    public Iterator<Comparable<?>> valuesIterator() {\n         return freqTable.keySet().iterator();\n     }\n     \n      */\n     public long getSumFreq() {\n         long result = 0;\n-        Iterator iterator = freqTable.values().iterator();\n+        Iterator<?> iterator = freqTable.values().iterator();\n         while (iterator.hasNext())  {\n             result += ((Long) iterator.next()).longValue();\n         }\n         }\n         long result = 0;\n         try { \n-            Long count =  (Long) freqTable.get(v);\n+            Long count =  freqTable.get(v);\n             if (count != null) {\n                 result = count.longValue();\n             }\n         long result = 0;\n         \n         try {\n-            Long value = (Long) freqTable.get(v);\n+            Long value = freqTable.get(v);\n             if (value != null) {\n                 result = value.longValue();\n             }\n             return getSumFreq();    // v is comparable, but greater than the last value\n         }\n         \n-        Iterator values = valuesIterator();\n+        Iterator<?> values = valuesIterator();\n         while (values.hasNext()) {\n             Object nextValue = values.next();\n             if (c.compare(v, nextValue) > 0) {\n          * @throws ClassCastException when <i>o1</i> is not a {@link Comparable Comparable}, \n          *         or when <code>((Comparable)o1).compareTo(o2)</code> does\n          */\n+        @SuppressWarnings(\"unchecked\") // See Javadoc, ClassCast is expected\n         public int compare(Object o1, Object o2) {\n-            return ((Comparable)o1).compareTo(o2);\n+            return ((Comparable<Object>)o1).compareTo(o2);\n         }\n     }\n }", "timestamp": 1240527130, "metainfo": ""}