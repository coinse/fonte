{"sha": "365eb32fb0c3a2b86b8248e90d7dcf7eb0d4d7c0", "log": "Removed boolean equalVariances flag from t-test API.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/inference/TTest.java\n+++ b/src/java/org/apache/commons/math/stat/inference/TTest.java\n \n /**\n  * An interface for Student's t-tests.\n+ * <p>\n+ * Tests can be:<ul>\n+ * <li>One-sample or two-sample</li>\n+ * <li>One-sided or two-sided</li>\n+ * <li>Paired or unpaired (for two-sample tests)</li>\n+ * <li>Homoscedastic (equal variance assumption) or heteroscedastic\n+ * (for two sample tests)</li>\n+ * <li>Fixed significance level (boolean-valued) or returning p-values.\n+ * </li></ul>\n+ * <p>\n+ * Test statistics are available for all tests.  Methods including \"Test\" in\n+ * in their names perform tests, all other methods return t-statistics.  Among\n+ * the \"Test\" methods, <code>double-</code>valued methods return p-values;\n+ * <code>boolean-</code>valued methods perform fixed significance level tests.\n+ * Significance levels are always specified as numbers between 0 and 0.5\n+ * (e.g. tests at the 95% level  use <code>alpha=0.05</code>).\n+ * <p>\n+ * Input to tests can be either <code>double[]</code> arrays or \n+ * {@link StatisticalSummary} instances.\n+ * \n  *\n- * @version $Revision: 1.6 $ $Date: 2004/06/23 16:26:14 $ \n+ * @version $Revision: 1.7 $ $Date: 2004/08/02 04:20:08 $ \n  */\n public interface TTest {\n-    \n-    \n     /**\n      * Computes a paired, 2-sample t-statistic based on the data in the input \n      * arrays.  The t-statistic returned is equivalent to what would be returned by\n      * @throws MathException if the statistic can not be computed do to a\n      *         convergence or other numerical error.\n      */\n-    double pairedT(double[] sample1, double[] sample2) \n-    throws IllegalArgumentException, MathException;\n-    \n+    public abstract double pairedT(double[] sample1, double[] sample2)\n+        throws IllegalArgumentException, MathException;\n     /**\n      * Returns the <i>observed significance level</i>, or \n-     * <a href=\"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n-     * p-value</a>, associated with a paired, two-sample, two-tailed t-test \n+     * <i> p-value</i>, associated with a paired, two-sample, two-tailed t-test \n      * based on the data in the input arrays.\n      * <p>\n      * The number returned is the smallest significance level\n      * @throws IllegalArgumentException if the precondition is not met\n      * @throws MathException if an error occurs computing the p-value\n      */\n-    double pairedTTest(double[] sample1, double[] sample2)\n-    throws IllegalArgumentException, MathException;\n-    \n-    /**\n-     * Performs a paired t-test</a> evaluating the null hypothesis that the \n+    public abstract double pairedTTest(double[] sample1, double[] sample2)\n+        throws IllegalArgumentException, MathException;\n+    /**\n+     * Performs a paired t-test evaluating the null hypothesis that the \n      * mean of the paired differences between <code>sample1</code> and\n      * <code>sample2</code> is 0 in favor of the two-sided alternative that the \n      * mean paired difference is not equal to 0, with significance level \n      * @throws IllegalArgumentException if the preconditions are not met\n      * @throws MathException if an error occurs performing the test\n      */\n-    boolean pairedTTest(double[] sample1, double[] sample2, double alpha)\n-    throws IllegalArgumentException, MathException;\n-    \n+    public abstract boolean pairedTTest(\n+        double[] sample1,\n+        double[] sample2,\n+        double alpha)\n+        throws IllegalArgumentException, MathException;\n     /**\n      * Computes a <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section2/prc22.htm#formula\"> \n      * t statistic </a> given observed values and a comparison constant.\n      * @return t statistic\n      * @throws IllegalArgumentException if input array length is less than 2\n      */\n-    double t(double mu, double[] observed) \n-    throws IllegalArgumentException;\n-    \n+    public abstract double t(double mu, double[] observed)\n+        throws IllegalArgumentException;\n     /**\n      * Computes a <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section2/prc22.htm#formula\">\n      * t statistic </a> to use in comparing the mean of the dataset described by \n      * @return t statistic\n      * @throws IllegalArgumentException if the precondition is not met\n      */\n-    double t(double mu, StatisticalSummary sampleStats) \n-    throws IllegalArgumentException;\n-    \n-    /**\n-     * Computes a <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n-     * 2-sample t statistic. </a>\n-     * <p>\n-     * This statistic can be used to perform a two-sample t-test to compare\n-     * sample means.\n-     * <p>\n-     * If <code>equalVariances</code> is <code>true</code>,  the t-statisitc is\n-     * <p>\n-     * (1) &nbsp;&nbsp;<code>  t = (m1 - m2) / (sqrt(1/n1 +1/n2) sqrt(var))</code>\n+    public abstract double t(double mu, StatisticalSummary sampleStats)\n+        throws IllegalArgumentException;\n+    /**\n+     * Computes a 2-sample t statistic,  under the hypothesis of equal \n+     * subpopulation variances.  To compute a t-statistic without the\n+     * equal variances hypothesis, use {@link #t(double[], double[])}.\n+     * <p>\n+     * This statistic can be used to perform a (homoscedastic) two-sample\n+     * t-test to compare sample means.   \n+     * <p>\n+     * The t-statisitc is\n+     * <p>\n+     * &nbsp;&nbsp;<code>  t = (m1 - m2) / (sqrt(1/n1 +1/n2) sqrt(var))</code>\n      * <p>\n      * where <strong><code>n1</code></strong> is the size of first sample; \n      * <strong><code> n2</code></strong> is the size of second sample; \n      * with <strong><code>var1<code></strong> the variance of the first sample and\n      * <strong><code>var2</code></strong> the variance of the second sample.\n      * <p>\n-     * If <code>equalVariances</code> is <code>false</code>,  the t-statisitc is\n-     * <p>\n-     * (2) &nbsp;&nbsp; <code>  t = (m1 - m2) / sqrt(var1/n1 + var2/n2)</code>\n-     * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The observed array lengths must both be at least 2.\n      * </li></ul>\n      *\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n-     * @param equalVariances are the sample variances assumed equal?\n      * @return t statistic\n      * @throws IllegalArgumentException if the precondition is not met\n-     * @throws MathException if the statistic can not be computed do to a\n-     *         convergence or other numerical error.\n-     */\n-    double t(double[] sample1, double[] sample2, boolean equalVariances) \n-    throws IllegalArgumentException, MathException;\n-    \n-    /**\n-     * Computes a <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n-     * 2-sample t statistic </a>, comparing the means of the datasets described\n-     * by two {@link StatisticalSummary} instances.\n+     */\n+    public abstract double homoscedasticT(double[] sample1, double[] sample2)\n+        throws IllegalArgumentException;\n+    /**\n+     * Computes a 2-sample t statistic, without the hypothesis of equal\n+     * subpopulation variances.  To compute a t-statistic assuming equal\n+     * variances, use {@link #homoscedasticT(double[], double[])}.\n      * <p>\n      * This statistic can be used to perform a two-sample t-test to compare\n      * sample means.\n      * <p>\n-      * If <code>equalVariances</code> is <code>true</code>,  the t-statisitc is\n-     * <p>\n-     * (1) &nbsp;&nbsp;<code>  t = (m1 - m2) / (sqrt(1/n1 +1/n2) sqrt(var))</code>\n+     * The t-statisitc is\n+     * <p>\n+     * &nbsp;&nbsp; <code>  t = (m1 - m2) / sqrt(var1/n1 + var2/n2)</code>\n+     * <p>\n+     *  where <strong><code>n1</code></strong> is the size of the first sample\n+     * <strong><code> n2</code></strong> is the size of the second sample; \n+     * <strong><code> m1</code></strong> is the mean of the first sample;  \n+     * <strong><code> m2</code></strong> is the mean of the second sample;\n+     * <strong><code> var1</code></strong> is the variance of the first sample;\n+     * <strong><code> var2</code></strong> is the variance of the second sample;  \n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The observed array lengths must both be at least 2.\n+     * </li></ul>\n+     *\n+     * @param sample1 array of sample data values\n+     * @param sample2 array of sample data values\n+     * @return t statistic\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    public abstract double t(double[] sample1, double[] sample2)\n+        throws IllegalArgumentException;\n+    /**\n+     * Computes a 2-sample t statistic </a>, comparing the means of the datasets\n+     * described by two {@link StatisticalSummary} instances, without the\n+     * assumption of equal subpopulation variances.  Use \n+     * {@link #homoscedasticT(StatisticalSummary, StatisticalSummary)} to\n+     * compute a t-statistic under the equal variances assumption.\n+     * <p>\n+     * This statistic can be used to perform a two-sample t-test to compare\n+     * sample means.\n+     * <p>\n+      * The returned  t-statisitc is\n+     * <p>\n+     * &nbsp;&nbsp; <code>  t = (m1 - m2) / sqrt(var1/n1 + var2/n2)</code>\n+     * <p>\n+     * where <strong><code>n1</code></strong> is the size of the first sample; \n+     * <strong><code> n2</code></strong> is the size of the second sample; \n+     * <strong><code> m1</code></strong> is the mean of the first sample;  \n+     * <strong><code> m2</code></strong> is the mean of the second sample\n+     * <strong><code> var1</code></strong> is the variance of the first sample;  \n+     * <strong><code> var2</code></strong> is the variance of the second sample\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The datasets described by the two Univariates must each contain\n+     * at least 2 observations.\n+     * </li></ul>\n+     *\n+     * @param sampleStats1 StatisticalSummary describing data from the first sample\n+     * @param sampleStats2 StatisticalSummary describing data from the second sample\n+     * @return t statistic\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    public abstract double t(\n+        StatisticalSummary sampleStats1,\n+        StatisticalSummary sampleStats2)\n+        throws IllegalArgumentException;\n+    /**\n+     * Computes a 2-sample t statistic, comparing the means of the datasets\n+     * described by two {@link StatisticalSummary} instances, under the\n+     * assumption of equal subpopulation variances.  To compute a t-statistic\n+     * without the equal variances assumption, use \n+     * {@link #t(StatisticalSummary, StatisticalSummary)}.\n+     * <p>\n+     * This statistic can be used to perform a (homoscedastic) two-sample\n+     * t-test to compare sample means.\n+     * <p>\n+     * The t-statisitc returned is\n+     * <p>\n+     * &nbsp;&nbsp;<code>  t = (m1 - m2) / (sqrt(1/n1 +1/n2) sqrt(var))</code>\n      * <p>\n      * where <strong><code>n1</code></strong> is the size of first sample; \n      * <strong><code> n2</code></strong> is the size of second sample; \n      * <strong><code> m1</code></strong> is the mean of first sample;  \n-     * <strong><code> m2</code></strong> is the mean of second sample</li>\n-     * </ul>\n+     * <strong><code> m2</code></strong> is the mean of second sample\n      * and <strong><code>var</code></strong> is the pooled variance estimate:\n      * <p>\n      * <code>var = sqrt(((n1 - 1)var1 + (n2 - 1)var2) / ((n1-1) + (n2-1)))</code>\n      * with <strong><code>var1<code></strong> the variance of the first sample and\n      * <strong><code>var2</code></strong> the variance of the second sample.\n      * <p>\n-     * If <code>equalVariances</code> is <code>false</code>,  the t-statisitc is\n-     * <p>\n-     * (2) &nbsp;&nbsp; <code>  t = (m1 - m2) / sqrt(var1/n1 + var2/n2)</code>\n-     * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The datasets described by the two Univariates must each contain\n      * at least 2 observations.\n      *\n      * @param sampleStats1 StatisticalSummary describing data from the first sample\n      * @param sampleStats2 StatisticalSummary describing data from the second sample\n-     * @param equalVariances are the sample variances assumed equal?\n      * @return t statistic\n      * @throws IllegalArgumentException if the precondition is not met\n      */\n-    double t(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2,\n-            boolean equalVariances) \n-    throws IllegalArgumentException;\n-    \n+    public abstract double homoscedasticT(\n+        StatisticalSummary sampleStats1,\n+        StatisticalSummary sampleStats2)\n+        throws IllegalArgumentException;\n     /**\n      * Returns the <i>observed significance level</i>, or \n-     * <a href=\"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n-     * p-value</a>, associated with a one-sample, two-tailed t-test \n+     * <i>p-value</i>, associated with a one-sample, two-tailed t-test \n      * comparing the mean of the input array with the constant <code>mu</code>.\n      * <p>\n      * The number returned is the smallest significance level\n      * @throws IllegalArgumentException if the precondition is not met\n      * @throws MathException if an error occurs computing the p-value\n      */\n-    double tTest(double mu, double[] sample)\n-    throws IllegalArgumentException, MathException;\n-    \n+    public abstract double tTest(double mu, double[] sample)\n+        throws IllegalArgumentException, MathException;\n     /**\n      * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm\">\n      * two-sided t-test</a> evaluating the null hypothesis that the mean of the population from\n-     *  which <code>sample</code> is drawn equals <code>mu</code>.\n+     * which <code>sample</code> is drawn equals <code>mu</code>.\n      * <p>\n      * Returns <code>true</code> iff the null hypothesis can be \n      * rejected with confidence <code>1 - alpha</code>.  To \n      * @throws IllegalArgumentException if the precondition is not met\n      * @throws MathException if an error computing the p-value\n      */\n-    boolean tTest(double mu, double[] sample, double alpha)\n-    throws IllegalArgumentException, MathException;\n-    \n+    public abstract boolean tTest(double mu, double[] sample, double alpha)\n+        throws IllegalArgumentException, MathException;\n     /**\n      * Returns the <i>observed significance level</i>, or \n-     * <a href=\"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n-     * p-value</a>, associated with a one-sample, two-tailed t-test \n+     * <i>p-value</i>, associated with a one-sample, two-tailed t-test \n      * comparing the mean of the dataset described by <code>sampleStats</code>\n      * with the constant <code>mu</code>.\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the test depends on the assumptions of the parametric\n      * t-test procedure, as discussed \n-     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n+     * here</a>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The sample must contain at least 2 observations.\n      * @throws IllegalArgumentException if the precondition is not met\n      * @throws MathException if an error occurs computing the p-value\n      */\n-    double tTest(double mu, StatisticalSummary sampleStats)\n-    throws IllegalArgumentException, MathException;\n-    \n+    public abstract double tTest(double mu, StatisticalSummary sampleStats)\n+        throws IllegalArgumentException, MathException;\n     /**\n      * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm\">\n-     * two-sided t-test</a> evaluating the null hypothesis that the mean of the population from\n-     * which the dataset described by <code>stats</code> is drawn equals <code>mu</code>.\n-     * <p>\n-     * Returns <code>true</code> iff the null hypothesis can be \n-     * rejected with confidence <code>1 - alpha</code>.  To \n-     * perform a 1-sided test, use <code>alpha / 2</code>\n+     * two-sided t-test</a> evaluating the null hypothesis that the mean of the\n+     * population from which the dataset described by <code>stats</code> is\n+     * drawn equals <code>mu</code>.\n+     * <p>\n+     * Returns <code>true</code> iff the null hypothesis can be rejected with\n+     * confidence <code>1 - alpha</code>.  To  perform a 1-sided test, use\n+     * <code>alpha / 2.</code>\n      * <p>\n      * <strong>Examples:</strong><br><ol>\n      * <li>To test the (2-sided) hypothesis <code>sample mean = mu </code> at\n      * @throws IllegalArgumentException if the precondition is not met\n      * @throws MathException if an error occurs computing the p-value\n      */\n-    boolean tTest(double mu, StatisticalSummary sampleStats, double alpha)\n-    throws IllegalArgumentException, MathException;\n-    \n+    public abstract boolean tTest(\n+        double mu,\n+        StatisticalSummary sampleStats,\n+        double alpha)\n+        throws IllegalArgumentException, MathException;\n     /**\n      * Returns the <i>observed significance level</i>, or \n-     * <a href=\"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n-     * p-value</a>, associated with a two-sample, two-tailed t-test \n+     * <i>p-value</i>, associated with a two-sample, two-tailed t-test \n      * comparing the means of the input arrays.\n      * <p>\n      * The number returned is the smallest significance level\n      * equal in favor of the two-sided alternative that they are different. \n      * For a one-sided test, divide the returned value by 2.\n      * <p>\n-     * If the <code>equalVariances</code> parameter is <code>false,</code>\n-     * the test does not assume that the underlying popuation variances are\n+     * The test does not assume that the underlying popuation variances are\n      * equal  and it uses approximated degrees of freedom computed from the \n-     * sample data to compute the p-value.  In this case, formula (1) for the\n-     * {@link #t(double[], double[], boolean)} statistic is used\n-     * and the Welch-Satterthwaite approximation to the degrees of freedom is used, \n+     * sample data to compute the p-value.  The t-statistic used is as defined in\n+     * {@link #t(double[], double[])} and the Welch-Satterthwaite approximation\n+     * to the degrees of freedom is used, \n      * as described \n      * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n-     * here.</a>\n-     * <p>\n-     * If <code>equalVariances</code> is <code>true</code>, a pooled variance\n-     * estimate is used to compute the t-statistic (formula (2)) and the sum of the \n-     * sample sizes minus 2 is used as the degrees of freedom.\n+     * here.</a>  To perform the test under the assumption of equal subpopulation\n+     * variances, use {@link #homoscedasticTTest(double[], double[])}. \n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the p-value depends on the assumptions of the parametric\n      *\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n-     * @param equalVariances are sample variances assumed to be equal?\n      * @return p-value for t-test\n      * @throws IllegalArgumentException if the precondition is not met\n      * @throws MathException if an error occurs computing the p-value\n      */\n-    double tTest(double[] sample1, double[] sample2, boolean equalVariances)\n-    throws IllegalArgumentException, MathException;\n-    \n-    /**\n-     * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm\">\n+    public abstract double tTest(double[] sample1, double[] sample2)\n+        throws IllegalArgumentException, MathException;\n+    /**\n+     * Returns the <i>observed significance level</i>, or \n+     * <i>p-value</i>, associated with a two-sample, two-tailed t-test \n+     * comparing the means of the input arrays, under the assumption that\n+     * the two samples are drawn from subpopulations with equal variances.\n+     * To perform the test without the equal variances assumption, use\n+     * {@link #tTest(double[], double[])}.\n+     * <p>\n+     * The number returned is the smallest significance level\n+     * at which one can reject the null hypothesis that the two means are\n+     * equal in favor of the two-sided alternative that they are different. \n+     * For a one-sided test, divide the returned value by 2.\n+     * <p>\n+     * A pooled variance estimate is used to compute the t-statistic.  See\n+     * {@link #homoscedasticT(double[], double[])}. The sum of the sample sizes\n+     * minus 2 is used as the degrees of freedom.\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the p-value depends on the assumptions of the parametric\n+     * t-test procedure, as discussed \n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n+     * here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The observed array lengths must both be at least 2.\n+     * </li></ul>\n+     *\n+     * @param sample1 array of sample data values\n+     * @param sample2 array of sample data values\n+     * @return p-value for t-test\n+     * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    public abstract double homoscedasticTTest(\n+        double[] sample1,\n+        double[] sample2)\n+        throws IllegalArgumentException, MathException;\n+    /**\n+     * Performs a \n+     * <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm\">\n      * two-sided t-test</a> evaluating the null hypothesis that <code>sample1</code> \n      * and <code>sample2</code> are drawn from populations with the same mean, \n-     * with significance level <code>alpha</code>.\n+     * with significance level <code>alpha</code>.  This test does not assume\n+     * that the subpopulation variances are equal.  To perform the test assuming\n+     * equal variances, use \n+     * {@link #homoscedasticTTest(double[], double[], double)}.\n      * <p>\n      * Returns <code>true</code> iff the null hypothesis that the means are\n      * equal can be rejected with confidence <code>1 - alpha</code>.  To \n      * perform a 1-sided test, use <code>alpha / 2</code>\n      * <p>\n-     * If the <code>equalVariances</code> parameter is <code>false,</code>\n-     * the test does not assume that the underlying popuation variances are\n-     * equal  and it uses approximated degrees of freedom computed from the \n-     * sample data to compute the p-value.  In this case, formula (1) for the\n-     * {@link #t(double[], double[], boolean)} statistic is used\n-     * and the Welch-Satterthwaite approximation to the degrees of freedom is used, \n-     * as described \n+     * See {@link #t(double[], double[])} for the formula used to compute the\n+     * t-statistic.  Degrees of freedom are approximated using the\n      * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n-     * here.</a>\n-     * <p>\n-     * If <code>equalVariances</code> is <code>true</code>, a pooled variance\n-     * estimate is used to compute the t-statistic (formula (2)) and the sum of the \n-     * sample sizes minus 2 is used as the degrees of freedom.\n+     * Welch-Satterthwaite approximation.</a>\n+    \n      * <p>\n      * <strong>Examples:</strong><br><ol>\n      * <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at\n-     * the 95% level, under the assumption of equal subpopulation variances, \n-     * use <br><code>tTest(sample1, sample2, 0.05, true) </code>\n-     * </li>\n-     * <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2 </code>\n-     * at the 99% level without assuming equal variances, first verify that the measured \n-     * mean of <code>sample 1</code> is less than the mean of <code>sample 2</code>\n-     * and then use <br><code>tTest(sample1, sample2, 0.005, false) </code>\n+     * the 95% level,  use \n+     * <br><code>tTest(sample1, sample2, 0.05). </code>\n+     * </li>\n+     * <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2 </code>,\n+     * first verify that the measured  mean of <code>sample 1</code> is less\n+     * than the mean of <code>sample 2</code> and then use \n+     * <br><code>tTest(sample1, sample2, 0.005) </code>\n      * </li></ol>\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n      * @param alpha significance level of the test\n-     * @param equalVariances are sample variances assumed to be equal?\n      * @return true if the null hypothesis can be rejected with \n      * confidence 1 - alpha\n      * @throws IllegalArgumentException if the preconditions are not met\n      * @throws MathException if an error occurs performing the test\n      */\n-    boolean tTest(double[] sample1, double[] sample2, double alpha, \n-            boolean equalVariances)\n-    throws IllegalArgumentException, MathException;\n-    \n+    public abstract boolean tTest(\n+        double[] sample1,\n+        double[] sample2,\n+        double alpha)\n+        throws IllegalArgumentException, MathException;\n+    /**\n+     * Performs a \n+     * <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm\">\n+     * two-sided t-test</a> evaluating the null hypothesis that <code>sample1</code> \n+     * and <code>sample2</code> are drawn from populations with the same mean, \n+     * with significance level <code>alpha</code>,  assuming that the\n+     * subpopulation variances are equal.  Use \n+     * {@link #tTest(double[], double[], double)} to perform the test without\n+     * the assumption of equal variances.\n+     * <p>\n+     * Returns <code>true</code> iff the null hypothesis that the means are\n+     * equal can be rejected with confidence <code>1 - alpha</code>.  To \n+     * perform a 1-sided test, use <code>alpha / 2.</code>  To perform the test\n+     * without the assumption of equal subpopulation variances, use \n+     * {@link #tTest(double[], double[], double)}.\n+     * <p>\n+     * A pooled variance estimate is used to compute the t-statistic. See\n+     * {@link #t(double[], double[])} for the formula. The sum of the sample\n+     * sizes minus 2 is used as the degrees of freedom.\n+     * <p>\n+     * <strong>Examples:</strong><br><ol>\n+     * <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at\n+     * the 95% level, use <br><code>tTest(sample1, sample2, 0.05). </code>\n+     * </li>\n+     * <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2, </code>\n+     * at the 99% level, first verify that the measured mean of \n+     * <code>sample 1</code> is less than the mean of <code>sample 2</code>\n+     * and then use\n+     * <br><code>tTest(sample1, sample2, 0.005) </code>\n+     * </li></ol>\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the test depends on the assumptions of the parametric\n+     * t-test procedure, as discussed \n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n+     * here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The observed array lengths must both be at least 2.\n+     * </li>\n+     * <li> <code> 0 < alpha < 0.5 </code>\n+     * </li></ul>\n+     *\n+     * @param sample1 array of sample data values\n+     * @param sample2 array of sample data values\n+     * @param alpha significance level of the test\n+     * @return true if the null hypothesis can be rejected with \n+     * confidence 1 - alpha\n+     * @throws IllegalArgumentException if the preconditions are not met\n+     * @throws MathException if an error occurs performing the test\n+     */\n+    public abstract boolean homoscedasticTTest(\n+        double[] sample1,\n+        double[] sample2,\n+        double alpha)\n+        throws IllegalArgumentException, MathException;\n     /**\n      * Returns the <i>observed significance level</i>, or \n-     * <a href=\"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n-     * p-value</a>, associated with a two-sample, two-tailed t-test \n-     * comparing the means of the datasets described by two Univariates.\n+     * <i>p-value</i>, associated with a two-sample, two-tailed t-test \n+     * comparing the means of the datasets described by two StatisticalSummary\n+     * instances.\n      * <p>\n      * The number returned is the smallest significance level\n      * at which one can reject the null hypothesis that the two means are\n      * equal in favor of the two-sided alternative that they are different. \n      * For a one-sided test, divide the returned value by 2.\n      * <p>\n-     * If the <code>equalVariances</code> parameter is <code>false,</code>\n-     * the test does not assume that the underlying popuation variances are\n+     * The test does not assume that the underlying popuation variances are\n      * equal  and it uses approximated degrees of freedom computed from the \n-     * sample data to compute the p-value.  In this case, formula (1) for the\n-     * {@link #t(double[], double[], boolean)} statistic is used\n-     * and the Welch-Satterthwaite approximation to the degrees of freedom is used, \n-     * as described \n-     * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n-     * here.</a>\n-     * <p>\n-     * If <code>equalVariances</code> is <code>true</code>, a pooled variance\n-     * estimate is used to compute the t-statistic (formula (2)) and the sum of the \n-     * sample sizes minus 2 is used as the degrees of freedom.\n+     * sample data to compute the p-value.   To perform the test assuming\n+     * equal variances, use \n+     * {@link #homoscedasticTTest(StatisticalSummary, StatisticalSummary)}.\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the p-value depends on the assumptions of the parametric\n      * t-test procedure, as discussed \n-     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n+     * here</a>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The datasets described by the two Univariates must each contain\n      *\n      * @param sampleStats1  StatisticalSummary describing data from the first sample\n      * @param sampleStats2  StatisticalSummary describing data from the second sample\n-     * @param equalVariances  are sample variances assumed to be equal?\n      * @return p-value for t-test\n      * @throws IllegalArgumentException if the precondition is not met\n      * @throws MathException if an error occurs computing the p-value\n      */\n-    double tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2, \n-            boolean equalVariances)\n-    throws IllegalArgumentException, MathException;\n-    \n-    /**\n-     * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm\">\n-     * two-sided t-test</a> evaluating the null hypothesis that <code>sampleStats1</code>\n-     * and <code>sampleStats2</code> describe datasets drawn from populations with the \n-     * same mean, with significance level <code>alpha</code>.\n+    public abstract double tTest(\n+        StatisticalSummary sampleStats1,\n+        StatisticalSummary sampleStats2)\n+        throws IllegalArgumentException, MathException;\n+    /**\n+     * Returns the <i>observed significance level</i>, or \n+     * <i>p-value</i>, associated with a two-sample, two-tailed t-test \n+     * comparing the means of the datasets described by two StatisticalSummary\n+     * instances, under the hypothesis of equal subpopulation variances. To\n+     * perform a test without the equal variances assumption, use\n+     * {@link #tTest(StatisticalSummary, StatisticalSummary)}.\n+     * <p>\n+     * The number returned is the smallest significance level\n+     * at which one can reject the null hypothesis that the two means are\n+     * equal in favor of the two-sided alternative that they are different. \n+     * For a one-sided test, divide the returned value by 2.\n+     * <p>\n+     * See {@link #homoscedasticT(double[], double[])} for the formula used to\n+     * compute the t-statistic. The sum of the  sample sizes minus 2 is used as\n+     * the degrees of freedom.\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the p-value depends on the assumptions of the parametric\n+     * t-test procedure, as discussed \n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The datasets described by the two Univariates must each contain\n+     * at least 2 observations.\n+     * </li></ul>\n+     *\n+     * @param sampleStats1  StatisticalSummary describing data from the first sample\n+     * @param sampleStats2  StatisticalSummary describing data from the second sample\n+     * @return p-value for t-test\n+     * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    public abstract double homoscedasticTTest(\n+        StatisticalSummary sampleStats1,\n+        StatisticalSummary sampleStats2)\n+        throws IllegalArgumentException, MathException;\n+    /**\n+     * Performs a \n+     * <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm\">\n+     * two-sided t-test</a> evaluating the null hypothesis that \n+     * <code>sampleStats1</code> and <code>sampleStats2</code> describe\n+     * datasets drawn from populations with the same mean, with significance\n+     * level <code>alpha</code>.   This test does not assume that the\n+     * subpopulation variances are equal.  To perform the test under the equal\n+     * variances assumption, use\n+     * {@link #homoscedasticTTest(StatisticalSummary, StatisticalSummary)}.\n      * <p>\n      * Returns <code>true</code> iff the null hypothesis that the means are\n      * equal can be rejected with confidence <code>1 - alpha</code>.  To \n      * perform a 1-sided test, use <code>alpha / 2</code>\n      * <p>\n-     * If the <code>equalVariances</code> parameter is <code>false,</code>\n-     * the test does not assume that the underlying popuation variances are\n-     * equal  and it uses approximated degrees of freedom computed from the \n-     * sample data to compute the p-value.  In this case, formula (1) for the\n-     * {@link #t(double[], double[], boolean)} statistic is used\n-     * and the Welch-Satterthwaite approximation to the degrees of freedom is used, \n-     * as described \n+     * See {@link #t(double[], double[])} for the formula used to compute the\n+     * t-statistic.  Degrees of freedom are approximated using the\n      * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n-     * here.</a>\n-     * <p>\n-     * If <code>equalVariances</code> is <code>true</code>, a pooled variance\n-     * estimate is used to compute the t-statistic (formula (2)) and the sum of the \n-     * sample sizes minus 2 is used as the degrees of freedom.\n+     * Welch-Satterthwaite approximation.</a>\n      * <p>\n      * <strong>Examples:</strong><br><ol>\n      * <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at\n-     * the 95% level under the assumption of equal subpopulation variances, use \n-     * <br><code>tTest(sampleStats1, sampleStats2, 0.05, true) </code>\n+     * the 95%, use \n+     * <br><code>tTest(sampleStats1, sampleStats2, 0.05) </code>\n      * </li>\n      * <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2 </code>\n-     * at the 99% level without assuming that subpopulation variances are equal, \n-     * first verify that the measured mean of  <code>sample 1</code> is less than \n-     * the mean of <code>sample 2</code> and then use \n-     * <br><code>tTest(sampleStats1, sampleStats2, 0.005, false) </code>\n+     * at the 99% level,  first verify that the measured mean of  \n+     * <code>sample 1</code> is less than  the mean of <code>sample 2</code>\n+     * and then use \n+     * <br><code>tTest(sampleStats1, sampleStats2, 0.005) </code>\n      * </li></ol>\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * @param sampleStats1 StatisticalSummary describing sample data values\n      * @param sampleStats2 StatisticalSummary describing sample data values\n      * @param alpha significance level of the test\n-     * @param equalVariances  are sample variances assumed to be equal?\n      * @return true if the null hypothesis can be rejected with \n      * confidence 1 - alpha\n      * @throws IllegalArgumentException if the preconditions are not met\n      * @throws MathException if an error occurs performing the test\n      */\n-    boolean tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2, \n-            double alpha, boolean equalVariances)\n-    throws IllegalArgumentException, MathException;\n-}\n+    public abstract boolean tTest(\n+        StatisticalSummary sampleStats1,\n+        StatisticalSummary sampleStats2,\n+        double alpha)\n+        throws IllegalArgumentException, MathException;\n+}\n--- a/src/java/org/apache/commons/math/stat/inference/TTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/TTestImpl.java\n \n /**\n  * Implements t-test statistics defined in the {@link TTest} interface.\n+ * <p>\n+ * Uses commons-math {@link org.apache.commons.math.distribution.TDistribution}\n+ * implementation to estimate exact p-values.\n  *\n- * @version $Revision: 1.8 $ $Date: 2004/06/23 16:26:14 $\n+ * @version $Revision: 1.9 $ $Date: 2004/08/02 04:20:08 $\n  */\n public class TTestImpl implements TTest  {\n \n \n      /**\n      * Returns the <i>observed significance level</i>, or \n-     * <a href=\"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n-     * p-value</a>, associated with a paired, two-sample, two-tailed t-test \n+     * <i> p-value</i>, associated with a paired, two-sample, two-tailed t-test \n      * based on the data in the input arrays.\n      * <p>\n      * The number returned is the smallest significance level\n     }\n \n      /**\n-     * Performs a paired t-test</a> evaluating the null hypothesis that the \n+     * Performs a paired t-test evaluating the null hypothesis that the \n      * mean of the paired differences between <code>sample1</code> and\n      * <code>sample2</code> is 0 in favor of the two-sided alternative that the \n      * mean paired difference is not equal to 0, with significance level \n         if ((observed == null) || (observed.length < 2)) {\n             throw new IllegalArgumentException(\"insufficient data for t statistic\");\n         }\n-        return t(StatUtils.mean(observed), mu, StatUtils.variance(observed), observed.length);\n+        return t(StatUtils.mean(observed), mu, StatUtils.variance(observed),\n+                observed.length);\n     }\n \n     /**\n         if ((sampleStats == null) || (sampleStats.getN() < 2)) {\n             throw new IllegalArgumentException(\"insufficient data for t statistic\");\n         }\n-        return t(sampleStats.getMean(), mu, sampleStats.getVariance(), sampleStats.getN());\n-    }\n-\n-    /**\n-     * Computes a <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n-     * 2-sample t statistic. </a>\n-     * <p>\n-     * This statistic can be used to perform a two-sample t-test to compare\n-     * sample means.\n-     * <p>\n-     * If <code>equalVariances</code> is <code>true</code>,  the t-statisitc is\n-     * <p>\n-     * (1) &nbsp;&nbsp;<code>  t = (m1 - m2) / (sqrt(1/n1 +1/n2) sqrt(var))</code>\n+        return t(sampleStats.getMean(), mu, sampleStats.getVariance(),\n+                sampleStats.getN());\n+    }\n+\n+    /**\n+     * Computes a 2-sample t statistic,  under the hypothesis of equal \n+     * subpopulation variances.  To compute a t-statistic without the\n+     * equal variances hypothesis, use {@link #t(double[], double[])}.\n+     * <p>\n+     * This statistic can be used to perform a (homoscedastic) two-sample\n+     * t-test to compare sample means.   \n+     * <p>\n+     * The t-statisitc is\n+     * <p>\n+     * &nbsp;&nbsp;<code>  t = (m1 - m2) / (sqrt(1/n1 +1/n2) sqrt(var))</code>\n      * <p>\n      * where <strong><code>n1</code></strong> is the size of first sample; \n      * <strong><code> n2</code></strong> is the size of second sample; \n      * with <strong><code>var1<code></strong> the variance of the first sample and\n      * <strong><code>var2</code></strong> the variance of the second sample.\n      * <p>\n-     * If <code>equalVariances</code> is <code>false</code>,  the t-statisitc is\n-     * <p>\n-     * (2) &nbsp;&nbsp; <code>  t = (m1 - m2) / sqrt(var1/n1 + var2/n2)</code>\n-     * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The observed array lengths must both be at least 2.\n      * </li></ul>\n      *\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n-     * @param equalVariances are the sample variances assumed equal?\n      * @return t statistic\n      * @throws IllegalArgumentException if the precondition is not met\n      */\n-    public double t(double[] sample1, double[] sample2, boolean equalVariances)\n+    public double homoscedasticT(double[] sample1, double[] sample2)\n     throws IllegalArgumentException {\n         if ((sample1 == null) || (sample2 == null ||\n                 Math.min(sample1.length, sample2.length) < 2)) {\n             throw new IllegalArgumentException(\"insufficient data for t statistic\");\n         }\n-        return t(StatUtils.mean(sample1), StatUtils.mean(sample2), StatUtils.variance(sample1),\n-                StatUtils.variance(sample2),  (double) sample1.length, \n-                (double) sample2.length, equalVariances);\n-    }\n-\n-    /**\n-     * Computes a <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n-     * 2-sample t statistic </a>, comparing the means of the datasets described\n-     * by two {@link StatisticalSummary} instances.\n+        return homoscedasticT(StatUtils.mean(sample1), StatUtils.mean(sample2),\n+                StatUtils.variance(sample1), StatUtils.variance(sample2),\n+                (double) sample1.length, (double) sample2.length);\n+    }\n+    \n+    /**\n+     * Computes a 2-sample t statistic, without the hypothesis of equal\n+     * subpopulation variances.  To compute a t-statistic assuming equal\n+     * variances, use {@link #homoscedasticT(double[], double[])}.\n      * <p>\n      * This statistic can be used to perform a two-sample t-test to compare\n      * sample means.\n      * <p>\n-      * If <code>equalVariances</code> is <code>true</code>,  the t-statisitc is\n-     * <p>\n-     * (1) &nbsp;&nbsp;<code>  t = (m1 - m2) / (sqrt(1/n1 +1/n2) sqrt(var))</code>\n-     * <p>\n-     * where <strong><code>n1</code></strong> is the size of first sample; \n-     * <strong><code> n2</code></strong> is the size of second sample; \n-     * <strong><code> m1</code></strong> is the mean of first sample;  \n-     * <strong><code> m2</code></strong> is the mean of second sample</li>\n-     * </ul>\n-     * and <strong><code>var</code></strong> is the pooled variance estimate:\n-     * <p>\n-     * <code>var = sqrt(((n1 - 1)var1 + (n2 - 1)var2) / ((n1-1) + (n2-1)))</code>\n-     * <p> \n-     * with <strong><code>var1<code></strong> the variance of the first sample and\n-     * <strong><code>var2</code></strong> the variance of the second sample.\n-     * <p>\n-     * If <code>equalVariances</code> is <code>false</code>,  the t-statisitc is\n-     * <p>\n-     * (2) &nbsp;&nbsp; <code>  t = (m1 - m2) / sqrt(var1/n1 + var2/n2)</code>\n+     * The t-statisitc is\n+     * <p>\n+     * &nbsp;&nbsp; <code>  t = (m1 - m2) / sqrt(var1/n1 + var2/n2)</code>\n+     * <p>\n+     *  where <strong><code>n1</code></strong> is the size of the first sample\n+     * <strong><code> n2</code></strong> is the size of the second sample; \n+     * <strong><code> m1</code></strong> is the mean of the first sample;  \n+     * <strong><code> m2</code></strong> is the mean of the second sample;\n+     * <strong><code> var1</code></strong> is the variance of the first sample;\n+     * <strong><code> var2</code></strong> is the variance of the second sample;  \n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The observed array lengths must both be at least 2.\n+     * </li></ul>\n+     *\n+     * @param sample1 array of sample data values\n+     * @param sample2 array of sample data values\n+     * @return t statistic\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    public double t(double[] sample1, double[] sample2)\n+    throws IllegalArgumentException {\n+        if ((sample1 == null) || (sample2 == null ||\n+                Math.min(sample1.length, sample2.length) < 2)) {\n+            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n+        }\n+        return t(StatUtils.mean(sample1), StatUtils.mean(sample2),\n+                StatUtils.variance(sample1), StatUtils.variance(sample2),\n+                (double) sample1.length, (double) sample2.length);\n+    }\n+\n+    /**\n+     * Computes a 2-sample t statistic </a>, comparing the means of the datasets\n+     * described by two {@link StatisticalSummary} instances, without the\n+     * assumption of equal subpopulation variances.  Use \n+     * {@link #homoscedasticT(StatisticalSummary, StatisticalSummary)} to\n+     * compute a t-statistic under the equal variances assumption.\n+     * <p>\n+     * This statistic can be used to perform a two-sample t-test to compare\n+     * sample means.\n+     * <p>\n+      * The returned  t-statisitc is\n+     * <p>\n+     * &nbsp;&nbsp; <code>  t = (m1 - m2) / sqrt(var1/n1 + var2/n2)</code>\n+     * <p>\n+     * where <strong><code>n1</code></strong> is the size of the first sample; \n+     * <strong><code> n2</code></strong> is the size of the second sample; \n+     * <strong><code> m1</code></strong> is the mean of the first sample;  \n+     * <strong><code> m2</code></strong> is the mean of the second sample\n+     * <strong><code> var1</code></strong> is the variance of the first sample;  \n+     * <strong><code> var2</code></strong> is the variance of the second sample\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The datasets described by the two Univariates must each contain\n      *\n      * @param sampleStats1 StatisticalSummary describing data from the first sample\n      * @param sampleStats2 StatisticalSummary describing data from the second sample\n-     * @param equalVariances are the sample variances assumed equal?\n      * @return t statistic\n      * @throws IllegalArgumentException if the precondition is not met\n      */\n-    public double t(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2, \n-            boolean equalVariances)\n+    public double t(StatisticalSummary sampleStats1, \n+            StatisticalSummary sampleStats2)\n     throws IllegalArgumentException {\n         if ((sampleStats1 == null) ||\n                 (sampleStats2 == null ||\n                         Math.min(sampleStats1.getN(), sampleStats2.getN()) < 2)) {\n             throw new IllegalArgumentException(\"insufficient data for t statistic\");\n         }\n-        return t(sampleStats1.getMean(), sampleStats2.getMean(), sampleStats1.getVariance(),\n-                sampleStats2.getVariance(), (double) sampleStats1.getN(), \n-                (double) sampleStats2.getN(), equalVariances);\n+        return t(sampleStats1.getMean(), sampleStats2.getMean(), \n+                sampleStats1.getVariance(), sampleStats2.getVariance(),\n+                (double) sampleStats1.getN(), (double) sampleStats2.getN());\n+    }\n+    \n+    /**\n+     * Computes a 2-sample t statistic, comparing the means of the datasets\n+     * described by two {@link StatisticalSummary} instances, under the\n+     * assumption of equal subpopulation variances.  To compute a t-statistic\n+     * without the equal variances assumption, use \n+     * {@link #t(StatisticalSummary, StatisticalSummary)}.\n+     * <p>\n+     * This statistic can be used to perform a (homoscedastic) two-sample\n+     * t-test to compare sample means.\n+     * <p>\n+     * The t-statisitc returned is\n+     * <p>\n+     * &nbsp;&nbsp;<code>  t = (m1 - m2) / (sqrt(1/n1 +1/n2) sqrt(var))</code>\n+     * <p>\n+     * where <strong><code>n1</code></strong> is the size of first sample; \n+     * <strong><code> n2</code></strong> is the size of second sample; \n+     * <strong><code> m1</code></strong> is the mean of first sample;  \n+     * <strong><code> m2</code></strong> is the mean of second sample\n+     * and <strong><code>var</code></strong> is the pooled variance estimate:\n+     * <p>\n+     * <code>var = sqrt(((n1 - 1)var1 + (n2 - 1)var2) / ((n1-1) + (n2-1)))</code>\n+     * <p> \n+     * with <strong><code>var1<code></strong> the variance of the first sample and\n+     * <strong><code>var2</code></strong> the variance of the second sample.\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The datasets described by the two Univariates must each contain\n+     * at least 2 observations.\n+     * </li></ul>\n+     *\n+     * @param sampleStats1 StatisticalSummary describing data from the first sample\n+     * @param sampleStats2 StatisticalSummary describing data from the second sample\n+     * @return t statistic\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    public double homoscedasticT(StatisticalSummary sampleStats1, \n+            StatisticalSummary sampleStats2)\n+    throws IllegalArgumentException {\n+        if ((sampleStats1 == null) ||\n+                (sampleStats2 == null ||\n+                        Math.min(sampleStats1.getN(), sampleStats2.getN()) < 2)) {\n+            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n+        }\n+        return homoscedasticT(sampleStats1.getMean(), sampleStats2.getMean(), \n+                sampleStats1.getVariance(), sampleStats2.getVariance(), \n+                (double) sampleStats1.getN(), (double) sampleStats2.getN());\n     }\n \n      /**\n      * Returns the <i>observed significance level</i>, or \n-     * <a href=\"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n-     * p-value</a>, associated with a one-sample, two-tailed t-test \n+     * <i>p-value</i>, associated with a one-sample, two-tailed t-test \n      * comparing the mean of the input array with the constant <code>mu</code>.\n      * <p>\n      * The number returned is the smallest significance level\n         if ((sample == null) || (sample.length < 2)) {\n             throw new IllegalArgumentException(\"insufficient data for t statistic\");\n         }\n-        return tTest( StatUtils.mean(sample), mu, StatUtils.variance(sample), sample.length);\n+        return tTest( StatUtils.mean(sample), mu, StatUtils.variance(sample),\n+                sample.length);\n     }\n \n     /**\n      * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm\">\n      * two-sided t-test</a> evaluating the null hypothesis that the mean of the population from\n-     *  which <code>sample</code> is drawn equals <code>mu</code>.\n+     * which <code>sample</code> is drawn equals <code>mu</code>.\n      * <p>\n      * Returns <code>true</code> iff the null hypothesis can be \n      * rejected with confidence <code>1 - alpha</code>.  To \n \n     /**\n      * Returns the <i>observed significance level</i>, or \n-     * <a href=\"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n-     * p-value</a>, associated with a one-sample, two-tailed t-test \n+     * <i>p-value</i>, associated with a one-sample, two-tailed t-test \n      * comparing the mean of the dataset described by <code>sampleStats</code>\n      * with the constant <code>mu</code>.\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the test depends on the assumptions of the parametric\n      * t-test procedure, as discussed \n-     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n+     * here</a>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The sample must contain at least 2 observations.\n         if ((sampleStats == null) || (sampleStats.getN() < 2)) {\n             throw new IllegalArgumentException(\"insufficient data for t statistic\");\n         }\n-        return tTest(sampleStats.getMean(), mu, sampleStats.getVariance(), sampleStats.getN());\n+        return tTest(sampleStats.getMean(), mu, sampleStats.getVariance(),\n+                sampleStats.getN());\n     }\n \n      /**\n      * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm\">\n-     * two-sided t-test</a> evaluating the null hypothesis that the mean of the population from\n-     * which the dataset described by <code>stats</code> is drawn equals <code>mu</code>.\n-     * <p>\n-     * Returns <code>true</code> iff the null hypothesis can be \n-     * rejected with confidence <code>1 - alpha</code>.  To \n-     * perform a 1-sided test, use <code>alpha / 2</code>\n+     * two-sided t-test</a> evaluating the null hypothesis that the mean of the\n+     * population from which the dataset described by <code>stats</code> is\n+     * drawn equals <code>mu</code>.\n+     * <p>\n+     * Returns <code>true</code> iff the null hypothesis can be rejected with\n+     * confidence <code>1 - alpha</code>.  To  perform a 1-sided test, use\n+     * <code>alpha / 2.</code>\n      * <p>\n      * <strong>Examples:</strong><br><ol>\n      * <li>To test the (2-sided) hypothesis <code>sample mean = mu </code> at\n      * @throws IllegalArgumentException if the precondition is not met\n      * @throws MathException if an error occurs computing the p-value\n      */\n-    public boolean tTest( double mu, StatisticalSummary sampleStats, double alpha)\n+    public boolean tTest( double mu, StatisticalSummary sampleStats,\n+            double alpha)\n     throws IllegalArgumentException, MathException {\n         if ((alpha <= 0) || (alpha > 0.5)) {\n             throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n \n     /**\n      * Returns the <i>observed significance level</i>, or \n-     * <a href=\"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n-     * p-value</a>, associated with a two-sample, two-tailed t-test \n+     * <i>p-value</i>, associated with a two-sample, two-tailed t-test \n      * comparing the means of the input arrays.\n      * <p>\n      * The number returned is the smallest significance level\n      * equal in favor of the two-sided alternative that they are different. \n      * For a one-sided test, divide the returned value by 2.\n      * <p>\n-     * If the <code>equalVariances</code> parameter is <code>false,</code>\n-     * the test does not assume that the underlying popuation variances are\n+     * The test does not assume that the underlying popuation variances are\n      * equal  and it uses approximated degrees of freedom computed from the \n-     * sample data to compute the p-value.  In this case, formula (1) for the\n-     * {@link #t(double[], double[], boolean)} statistic is used\n-     * and the Welch-Satterthwaite approximation to the degrees of freedom is used, \n+     * sample data to compute the p-value.  The t-statistic used is as defined in\n+     * {@link #t(double[], double[])} and the Welch-Satterthwaite approximation\n+     * to the degrees of freedom is used, \n      * as described \n      * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n-     * here.</a>\n-     * <p>\n-     * If <code>equalVariances</code> is <code>true</code>, a pooled variance\n-     * estimate is used to compute the t-statistic (formula (2)) and the sum of the \n-     * sample sizes minus 2 is used as the degrees of freedom.\n+     * here.</a>  To perform the test under the assumption of equal subpopulation\n+     * variances, use {@link #homoscedasticTTest(double[], double[])}. \n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the p-value depends on the assumptions of the parametric\n      *\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n-     * @param equalVariances are sample variances assumed to be equal?\n      * @return p-value for t-test\n      * @throws IllegalArgumentException if the precondition is not met\n      * @throws MathException if an error occurs computing the p-value\n      */\n-    public double tTest(double[] sample1, double[] sample2, boolean equalVariances)\n+    public double tTest(double[] sample1, double[] sample2)\n     throws IllegalArgumentException, MathException {\n         if ((sample1 == null) || (sample2 == null ||\n                 Math.min(sample1.length, sample2.length) < 2)) {\n             throw new IllegalArgumentException(\"insufficient data\");\n         }\n-        return tTest(StatUtils.mean(sample1), StatUtils.mean(sample2), StatUtils.variance(sample1),\n+        return tTest(StatUtils.mean(sample1), StatUtils.mean(sample2),\n+                StatUtils.variance(sample1), StatUtils.variance(sample2),\n+                (double) sample1.length, (double) sample2.length);\n+    }\n+    \n+    /**\n+     * Returns the <i>observed significance level</i>, or \n+     * <i>p-value</i>, associated with a two-sample, two-tailed t-test \n+     * comparing the means of the input arrays, under the assumption that\n+     * the two samples are drawn from subpopulations with equal variances.\n+     * To perform the test without the equal variances assumption, use\n+     * {@link #tTest(double[], double[])}.\n+     * <p>\n+     * The number returned is the smallest significance level\n+     * at which one can reject the null hypothesis that the two means are\n+     * equal in favor of the two-sided alternative that they are different. \n+     * For a one-sided test, divide the returned value by 2.\n+     * <p>\n+     * A pooled variance estimate is used to compute the t-statistic.  See\n+     * {@link #homoscedasticT(double[], double[])}. The sum of the sample sizes\n+     * minus 2 is used as the degrees of freedom.\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the p-value depends on the assumptions of the parametric\n+     * t-test procedure, as discussed \n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n+     * here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The observed array lengths must both be at least 2.\n+     * </li></ul>\n+     *\n+     * @param sample1 array of sample data values\n+     * @param sample2 array of sample data values\n+     * @return p-value for t-test\n+     * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    public double homoscedasticTTest(double[] sample1, double[] sample2)\n+    throws IllegalArgumentException, MathException {\n+        if ((sample1 == null) || (sample2 == null ||\n+                Math.min(sample1.length, sample2.length) < 2)) {\n+            throw new IllegalArgumentException(\"insufficient data\");\n+        }\n+        return homoscedasticTTest(StatUtils.mean(sample1), \n+                StatUtils.mean(sample2), StatUtils.variance(sample1),\n                 StatUtils.variance(sample2), (double) sample1.length, \n-                (double) sample2.length, equalVariances);\n-    }\n+                (double) sample2.length);\n+    }\n+    \n \n      /**\n-     * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm\">\n+     * Performs a \n+     * <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm\">\n      * two-sided t-test</a> evaluating the null hypothesis that <code>sample1</code> \n      * and <code>sample2</code> are drawn from populations with the same mean, \n-     * with significance level <code>alpha</code>.\n+     * with significance level <code>alpha</code>.  This test does not assume\n+     * that the subpopulation variances are equal.  To perform the test assuming\n+     * equal variances, use \n+     * {@link #homoscedasticTTest(double[], double[], double)}.\n      * <p>\n      * Returns <code>true</code> iff the null hypothesis that the means are\n      * equal can be rejected with confidence <code>1 - alpha</code>.  To \n      * perform a 1-sided test, use <code>alpha / 2</code>\n      * <p>\n-     * If the <code>equalVariances</code> parameter is <code>false,</code>\n-     * the test does not assume that the underlying popuation variances are\n-     * equal  and it uses approximated degrees of freedom computed from the \n-     * sample data to compute the p-value.  In this case, formula (1) for the\n-     * {@link #t(double[], double[], boolean)} statistic is used\n-     * and the Welch-Satterthwaite approximation to the degrees of freedom is used, \n-     * as described \n+     * See {@link #t(double[], double[])} for the formula used to compute the\n+     * t-statistic.  Degrees of freedom are approximated using the\n      * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n-     * here.</a>\n-     * <p>\n-     * If <code>equalVariances</code> is <code>true</code>, a pooled variance\n-     * estimate is used to compute the t-statistic (formula (2)) and the sum of the \n-     * sample sizes minus 2 is used as the degrees of freedom.\n+     * Welch-Satterthwaite approximation.</a>\n+      \n      * <p>\n      * <strong>Examples:</strong><br><ol>\n      * <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at\n-     * the 95% level, under the assumption of equal subpopulation variances, \n-     * use <br><code>tTest(sample1, sample2, 0.05, true) </code>\n+     * the 95% level,  use \n+     * <br><code>tTest(sample1, sample2, 0.05). </code>\n      * </li>\n-     * <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2 </code>\n-     * at the 99% level without assuming equal variances, first verify that the measured \n-     * mean of <code>sample 1</code> is less than the mean of <code>sample 2</code>\n-     * and then use <br><code>tTest(sample1, sample2, 0.005, false) </code>\n+     * <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2 </code>,\n+     * first verify that the measured  mean of <code>sample 1</code> is less\n+     * than the mean of <code>sample 2</code> and then use \n+     * <br><code>tTest(sample1, sample2, 0.005) </code>\n      * </li></ol>\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n      * @param alpha significance level of the test\n-     * @param equalVariances are sample variances assumed to be equal?\n      * @return true if the null hypothesis can be rejected with \n      * confidence 1 - alpha\n      * @throws IllegalArgumentException if the preconditions are not met\n      * @throws MathException if an error occurs performing the test\n      */\n-    public boolean tTest(double[] sample1, double[] sample2, double alpha, \n-            boolean equalVariances)\n+    public boolean tTest(double[] sample1, double[] sample2,\n+            double alpha)\n     throws IllegalArgumentException, MathException {\n         if ((alpha <= 0) || (alpha > 0.5)) {\n             throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n         }\n-        return (tTest(sample1, sample2, equalVariances) < alpha);\n+        return (tTest(sample1, sample2) < alpha);\n+    }\n+    \n+    /**\n+     * Performs a \n+     * <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm\">\n+     * two-sided t-test</a> evaluating the null hypothesis that <code>sample1</code> \n+     * and <code>sample2</code> are drawn from populations with the same mean, \n+     * with significance level <code>alpha</code>,  assuming that the\n+     * subpopulation variances are equal.  Use \n+     * {@link #tTest(double[], double[], double)} to perform the test without\n+     * the assumption of equal variances.\n+     * <p>\n+     * Returns <code>true</code> iff the null hypothesis that the means are\n+     * equal can be rejected with confidence <code>1 - alpha</code>.  To \n+     * perform a 1-sided test, use <code>alpha / 2.</code>  To perform the test\n+     * without the assumption of equal subpopulation variances, use \n+     * {@link #tTest(double[], double[], double)}.\n+     * <p>\n+     * A pooled variance estimate is used to compute the t-statistic. See\n+     * {@link #t(double[], double[])} for the formula. The sum of the sample\n+     * sizes minus 2 is used as the degrees of freedom.\n+     * <p>\n+     * <strong>Examples:</strong><br><ol>\n+     * <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at\n+     * the 95% level, use <br><code>tTest(sample1, sample2, 0.05). </code>\n+     * </li>\n+     * <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2, </code>\n+     * at the 99% level, first verify that the measured mean of \n+     * <code>sample 1</code> is less than the mean of <code>sample 2</code>\n+     * and then use\n+     * <br><code>tTest(sample1, sample2, 0.005) </code>\n+     * </li></ol>\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the test depends on the assumptions of the parametric\n+     * t-test procedure, as discussed \n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n+     * here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The observed array lengths must both be at least 2.\n+     * </li>\n+     * <li> <code> 0 < alpha < 0.5 </code>\n+     * </li></ul>\n+     *\n+     * @param sample1 array of sample data values\n+     * @param sample2 array of sample data values\n+     * @param alpha significance level of the test\n+     * @return true if the null hypothesis can be rejected with \n+     * confidence 1 - alpha\n+     * @throws IllegalArgumentException if the preconditions are not met\n+     * @throws MathException if an error occurs performing the test\n+     */\n+    public boolean homoscedasticTTest(double[] sample1, double[] sample2,\n+            double alpha)\n+    throws IllegalArgumentException, MathException {\n+        if ((alpha <= 0) || (alpha > 0.5)) {\n+            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n+        }\n+        return (homoscedasticTTest(sample1, sample2) < alpha);\n     }\n \n      /**\n      * Returns the <i>observed significance level</i>, or \n-     * <a href=\"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n-     * p-value</a>, associated with a two-sample, two-tailed t-test \n-     * comparing the means of the datasets described by two Univariates.\n+     * <i>p-value</i>, associated with a two-sample, two-tailed t-test \n+     * comparing the means of the datasets described by two StatisticalSummary\n+     * instances.\n      * <p>\n      * The number returned is the smallest significance level\n      * at which one can reject the null hypothesis that the two means are\n      * equal in favor of the two-sided alternative that they are different. \n      * For a one-sided test, divide the returned value by 2.\n      * <p>\n-     * If the <code>equalVariances</code> parameter is <code>false,</code>\n-     * the test does not assume that the underlying popuation variances are\n+     * The test does not assume that the underlying popuation variances are\n      * equal  and it uses approximated degrees of freedom computed from the \n-     * sample data to compute the p-value.  In this case, formula (1) for the\n-     * {@link #t(double[], double[], boolean)} statistic is used\n-     * and the Welch-Satterthwaite approximation to the degrees of freedom is used, \n-     * as described \n-     * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n-     * here.</a>\n-     * <p>\n-     * If <code>equalVariances</code> is <code>true</code>, a pooled variance\n-     * estimate is used to compute the t-statistic (formula (2)) and the sum of the \n-     * sample sizes minus 2 is used as the degrees of freedom.\n+     * sample data to compute the p-value.   To perform the test assuming\n+     * equal variances, use \n+     * {@link #homoscedasticTTest(StatisticalSummary, StatisticalSummary)}.\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the p-value depends on the assumptions of the parametric\n      * t-test procedure, as discussed \n-     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n+     * here</a>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The datasets described by the two Univariates must each contain\n      *\n      * @param sampleStats1  StatisticalSummary describing data from the first sample\n      * @param sampleStats2  StatisticalSummary describing data from the second sample\n-     * @param equalVariances  are sample variances assumed to be equal?\n      * @return p-value for t-test\n      * @throws IllegalArgumentException if the precondition is not met\n      * @throws MathException if an error occurs computing the p-value\n      */\n-    public double tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2, \n-            boolean equalVariances)\n+    public double tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2)\n     throws IllegalArgumentException, MathException {\n         if ((sampleStats1 == null) || (sampleStats2 == null ||\n                 Math.min(sampleStats1.getN(), sampleStats2.getN()) < 2)) {\n         }\n         return tTest(sampleStats1.getMean(), sampleStats2.getMean(), sampleStats1.getVariance(),\n                 sampleStats2.getVariance(), (double) sampleStats1.getN(), \n-                (double) sampleStats2.getN(), equalVariances);\n-    }\n-\n-    /**\n-     * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm\">\n-     * two-sided t-test</a> evaluating the null hypothesis that <code>sampleStats1</code>\n-     * and <code>sampleStats2</code> describe datasets drawn from populations with the \n-     * same mean, with significance level <code>alpha</code>.\n+                (double) sampleStats2.getN());\n+    }\n+    \n+    /**\n+     * Returns the <i>observed significance level</i>, or \n+     * <i>p-value</i>, associated with a two-sample, two-tailed t-test \n+     * comparing the means of the datasets described by two StatisticalSummary\n+     * instances, under the hypothesis of equal subpopulation variances. To\n+     * perform a test without the equal variances assumption, use\n+     * {@link #tTest(StatisticalSummary, StatisticalSummary)}.\n+     * <p>\n+     * The number returned is the smallest significance level\n+     * at which one can reject the null hypothesis that the two means are\n+     * equal in favor of the two-sided alternative that they are different. \n+     * For a one-sided test, divide the returned value by 2.\n+     * <p>\n+     * See {@link #homoscedasticT(double[], double[])} for the formula used to\n+     * compute the t-statistic. The sum of the  sample sizes minus 2 is used as\n+     * the degrees of freedom.\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the p-value depends on the assumptions of the parametric\n+     * t-test procedure, as discussed \n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The datasets described by the two Univariates must each contain\n+     * at least 2 observations.\n+     * </li></ul>\n+     *\n+     * @param sampleStats1  StatisticalSummary describing data from the first sample\n+     * @param sampleStats2  StatisticalSummary describing data from the second sample\n+     * @return p-value for t-test\n+     * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    public double homoscedasticTTest(StatisticalSummary sampleStats1, \n+            StatisticalSummary sampleStats2)\n+    throws IllegalArgumentException, MathException {\n+        if ((sampleStats1 == null) || (sampleStats2 == null ||\n+                Math.min(sampleStats1.getN(), sampleStats2.getN()) < 2)) {\n+            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n+        }\n+        return homoscedasticTTest(sampleStats1.getMean(),\n+                sampleStats2.getMean(), sampleStats1.getVariance(),\n+                sampleStats2.getVariance(), (double) sampleStats1.getN(), \n+                (double) sampleStats2.getN());\n+    }\n+\n+    /**\n+     * Performs a \n+     * <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm\">\n+     * two-sided t-test</a> evaluating the null hypothesis that \n+     * <code>sampleStats1</code> and <code>sampleStats2</code> describe\n+     * datasets drawn from populations with the same mean, with significance\n+     * level <code>alpha</code>.   This test does not assume that the\n+     * subpopulation variances are equal.  To perform the test under the equal\n+     * variances assumption, use\n+     * {@link #homoscedasticTTest(StatisticalSummary, StatisticalSummary)}.\n      * <p>\n      * Returns <code>true</code> iff the null hypothesis that the means are\n      * equal can be rejected with confidence <code>1 - alpha</code>.  To \n      * perform a 1-sided test, use <code>alpha / 2</code>\n      * <p>\n-     * If the <code>equalVariances</code> parameter is <code>false,</code>\n-     * the test does not assume that the underlying popuation variances are\n-     * equal  and it uses approximated degrees of freedom computed from the \n-     * sample data to compute the p-value.  In this case, formula (1) for the\n-     * {@link #t(double[], double[], boolean)} statistic is used\n-     * and the Welch-Satterthwaite approximation to the degrees of freedom is used, \n-     * as described \n+     * See {@link #t(double[], double[])} for the formula used to compute the\n+     * t-statistic.  Degrees of freedom are approximated using the\n      * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n-     * here.</a>\n-     * <p>\n-     * If <code>equalVariances</code> is <code>true</code>, a pooled variance\n-     * estimate is used to compute the t-statistic (formula (2)) and the sum of the \n-     * sample sizes minus 2 is used as the degrees of freedom.\n+     * Welch-Satterthwaite approximation.</a>\n      * <p>\n      * <strong>Examples:</strong><br><ol>\n      * <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at\n-     * the 95% level under the assumption of equal subpopulation variances, use \n-     * <br><code>tTest(sampleStats1, sampleStats2, 0.05, true) </code>\n+     * the 95%, use \n+     * <br><code>tTest(sampleStats1, sampleStats2, 0.05) </code>\n      * </li>\n      * <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2 </code>\n-     * at the 99% level without assuming that subpopulation variances are equal, \n-     * first verify that the measured mean of  <code>sample 1</code> is less than \n-     * the mean of <code>sample 2</code> and then use \n-     * <br><code>tTest(sampleStats1, sampleStats2, 0.005, false) </code>\n+     * at the 99% level,  first verify that the measured mean of  \n+     * <code>sample 1</code> is less than  the mean of <code>sample 2</code>\n+     * and then use \n+     * <br><code>tTest(sampleStats1, sampleStats2, 0.005) </code>\n      * </li></ol>\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * @param sampleStats1 StatisticalSummary describing sample data values\n      * @param sampleStats2 StatisticalSummary describing sample data values\n      * @param alpha significance level of the test\n-     * @param equalVariances  are sample variances assumed to be equal?\n      * @return true if the null hypothesis can be rejected with \n      * confidence 1 - alpha\n      * @throws IllegalArgumentException if the preconditions are not met\n      * @throws MathException if an error occurs performing the test\n      */\n-    public boolean tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2,\n-            double alpha, boolean equalVariances)\n+    public boolean tTest(StatisticalSummary sampleStats1,\n+            StatisticalSummary sampleStats2, double alpha)\n     throws IllegalArgumentException, MathException {\n         if ((alpha <= 0) || (alpha > 0.5)) {\n             throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n         }\n-        return (tTest(sampleStats1, sampleStats2, equalVariances) < alpha);\n+        return (tTest(sampleStats1, sampleStats2) < alpha);\n     }\n     \n     //----------------------------------------------- Protected methods \n     \n     /**\n      * Computes t test statistic for 2-sample t-test.\n-     * If equalVariance is true,  the pooled variance\n-     * estimate is computed and used.\n+     * <p>\n+     * Does not assume that subpopulation variances are equal.\n      * \n      * @param m1 first sample mean\n      * @param m2 second sample mean\n      * @param v2 second sample variance\n      * @param n1 first sample n\n      * @param n2 second sample n\n-     * @param equalVariances  are variances assumed equal?\n      * @return t test statistic\n      */\n     protected double t(double m1, double m2,  double v1, double v2, double n1,\n-            double n2, boolean equalVariances)  {\n-        if (equalVariances) {\n-           double pooledVariance = ((n1  - 1) * v1 + (n2 -1) * v2 ) / (n1 + n2 - 2); \n-           return (m1 - m2) / Math.sqrt(pooledVariance * (1d / n1 + 1d / n2));\n-        } else {\n+            double n2)  {\n             return (m1 - m2) / Math.sqrt((v1 / n1) + (v2 / n2));\n-        }\n+    }\n+    \n+    /**\n+     * Computes t test statistic for 2-sample t-test under the hypothesis\n+     * of equal subpopulation variances.\n+     * \n+     * @param m1 first sample mean\n+     * @param m2 second sample mean\n+     * @param v1 first sample variance\n+     * @param v2 second sample variance\n+     * @param n1 first sample n\n+     * @param n2 second sample n\n+     * @return t test statistic\n+     */\n+    protected double homoscedasticT(double m1, double m2,  double v1,\n+            double v2, double n1, double n2)  {\n+            double pooledVariance = ((n1  - 1) * v1 + (n2 -1) * v2 ) / (n1 + n2 - 2); \n+            return (m1 - m2) / Math.sqrt(pooledVariance * (1d / n1 + 1d / n2));\n     }\n     \n     /**\n \n     /**\n      * Computes p-value for 2-sided, 2-sample t-test.\n-     * If equalVariances is true, the sum of the sample sizes minus 2\n-     * is used as df; otherwise df is approximated from the data.\n+     * <p>\n+     * Does not assume subpopulation variances are equal. Degrees of freedom\n+     * are estimated from the data.\n      * \n      * @param m1 first sample mean\n      * @param m2 second sample mean\n      * @param v2 second sample variance\n      * @param n1 first sample n\n      * @param n2 second sample n\n-     * @param equalVariances  are variances assumed equal?\n      * @return p-value\n      * @throws MathException if an error occurs computing the p-value\n      */\n     protected double tTest(double m1, double m2, double v1, double v2, \n-            double n1, double n2, boolean equalVariances)\n+            double n1, double n2)\n     throws MathException {\n-        double t = Math.abs(t(m1, m2, v1, v2, n1, n2, equalVariances));\n+        double t = Math.abs(t(m1, m2, v1, v2, n1, n2));\n         double degreesOfFreedom = 0;\n-        if (equalVariances) {\n+        degreesOfFreedom= df(v1, v2, n1, n2);\n+        TDistribution tDistribution =\n+            getDistributionFactory().createTDistribution(degreesOfFreedom);\n+        return 1.0 - tDistribution.cumulativeProbability(-t, t);\n+    }\n+    \n+    /**\n+     * Computes p-value for 2-sided, 2-sample t-test, under the assumption\n+     * of equal subpopulation variances.\n+     * <p>\n+     * The sum of the sample sizes minus 2 is used as degrees of freedom.\n+     * \n+     * @param m1 first sample mean\n+     * @param m2 second sample mean\n+     * @param v1 first sample variance\n+     * @param v2 second sample variance\n+     * @param n1 first sample n\n+     * @param n2 second sample n\n+     * @return p-value\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    protected double homoscedasticTTest(double m1, double m2, double v1,\n+            double v2, double n1, double n2)\n+    throws MathException {\n+        double t = Math.abs(t(m1, m2, v1, v2, n1, n2));\n+        double degreesOfFreedom = 0;\n             degreesOfFreedom = (double) (n1 + n2 - 2);\n-        } else {\n-            degreesOfFreedom= df(v1, v2, n1, n2);\n-        }\n         TDistribution tDistribution =\n             getDistributionFactory().createTDistribution(degreesOfFreedom);\n         return 1.0 - tDistribution.cumulativeProbability(-t, t);\n--- a/src/test/org/apache/commons/math/stat/inference/TTestTest.java\n+++ b/src/test/org/apache/commons/math/stat/inference/TTestTest.java\n /**\n  * Test cases for the TTestImpl class.\n  *\n- * @version $Revision: 1.5 $ $Date: 2004/06/02 13:08:55 $\n+ * @version $Revision: 1.6 $ $Date: 2004/08/02 04:20:09 $\n  */\n \n public final class TTestTest extends TestCase {\n          \n         // Target comparison values computed using R version 1.8.1 (Linux version)\n         assertEquals(\"two sample heteroscedastic t stat\", 1.603717, \n-                testStatistic.t(sample1, sample2, false), 1E-6);\n+                testStatistic.t(sample1, sample2), 1E-6);\n         assertEquals(\"two sample heteroscedastic t stat\", 1.603717, \n-                testStatistic.t(sampleStats1, sampleStats2, false), 1E-6);\n+                testStatistic.t(sampleStats1, sampleStats2), 1E-6);\n         assertEquals(\"two sample heteroscedastic p value\", 0.1288394, \n-                testStatistic.tTest(sample1, sample2, false), 1E-7);\n+                testStatistic.tTest(sample1, sample2), 1E-7);\n         assertEquals(\"two sample heteroscedastic p value\", 0.1288394, \n-                testStatistic.tTest(sampleStats1, sampleStats2, false), 1E-7);     \n+                testStatistic.tTest(sampleStats1, sampleStats2), 1E-7);     \n         assertTrue(\"two sample heteroscedastic t-test reject\", \n-                testStatistic.tTest(sample1, sample2, 0.2, false));\n+                testStatistic.tTest(sample1, sample2, 0.2));\n         assertTrue(\"two sample heteroscedastic t-test reject\", \n-                testStatistic.tTest(sampleStats1, sampleStats2, 0.2, false));\n+                testStatistic.tTest(sampleStats1, sampleStats2, 0.2));\n         assertTrue(\"two sample heteroscedastic t-test accept\", \n-                !testStatistic.tTest(sample1, sample2, 0.1, false));\n+                !testStatistic.tTest(sample1, sample2, 0.1));\n         assertTrue(\"two sample heteroscedastic t-test accept\", \n-                !testStatistic.tTest(sampleStats1, sampleStats2, 0.1, false));\n+                !testStatistic.tTest(sampleStats1, sampleStats2, 0.1));\n      \n         try {\n-            testStatistic.tTest(sample1, sample2, .95, false);\n-            fail(\"alpha out of range, IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n-            // exptected\n+            testStatistic.tTest(sample1, sample2, .95);\n+            fail(\"alpha out of range, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n         } \n         \n         try {\n-            testStatistic.tTest(sampleStats1, sampleStats2, .95, false);\n+            testStatistic.tTest(sampleStats1, sampleStats2, .95);\n             fail(\"alpha out of range, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n             // expected \n         }  \n         \n         try {\n-            testStatistic.tTest(sample1, tooShortObs, .01, false);\n-            fail(\"insufficient data, IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n-            // expected\n-        }  \n-        \n-        try {\n-            testStatistic.tTest(sampleStats1, tooShortStats, .01, false);\n-            fail(\"insufficient data, IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n-            // expected\n-        }  \n-        \n-        try {\n-            testStatistic.tTest(sample1, tooShortObs, false);\n+            testStatistic.tTest(sample1, tooShortObs, .01);\n+            fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+        \n+        try {\n+            testStatistic.tTest(sampleStats1, tooShortStats, .01);\n+            fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+        \n+        try {\n+            testStatistic.tTest(sample1, tooShortObs);\n             fail(\"insufficient data, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n            // expected\n         }  \n         \n         try {\n-            testStatistic.tTest(sampleStats1, tooShortStats, false);\n-            fail(\"insufficient data, IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n-            // expected\n-        }  \n-        \n-        try {\n-            testStatistic.t(sample1, tooShortObs, false);\n-            fail(\"insufficient data, IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n-            // expected\n-        }\n-        \n-        try {\n-            testStatistic.t(sampleStats1, tooShortStats, false);\n+            testStatistic.tTest(sampleStats1, tooShortStats);\n+            fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+        \n+        try {\n+            testStatistic.t(sample1, tooShortObs);\n+            fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        \n+        try {\n+            testStatistic.t(sampleStats1, tooShortStats);\n             fail(\"insufficient data, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n            // expected\n         \n         // Target comparison values computed using R version 1.8.1 (Linux version)\n        assertEquals(\"two sample homoscedastic t stat\", -1.120897, \n-              testStatistic.t(sample1, sample2, true), 10E-6);\n+              testStatistic.homoscedasticT(sample1, sample2), 10E-6);\n         assertEquals(\"two sample homoscedastic p value\", 0.2948490, \n-                testStatistic.tTest(sampleStats1, sampleStats2, true), 1E-6);     \n+                testStatistic.homoscedasticTTest(sampleStats1, sampleStats2), 1E-6);     \n         assertTrue(\"two sample homoscedastic t-test reject\", \n-                testStatistic.tTest(sample1, sample2, 0.3, true));\n+                testStatistic.homoscedasticTTest(sample1, sample2, 0.3));\n         assertTrue(\"two sample homoscedastic t-test accept\", \n-                !testStatistic.tTest(sample1, sample2, 0.2, true));\n+                !testStatistic.homoscedasticTTest(sample1, sample2, 0.2));\n     }\n     \n     public void testSmallSamples() throws Exception {\n         double[] sample2 = {4d, 5d};        \n         \n         // Target values computed using R, version 1.8.1 (linux version)\n-        assertEquals(-2.2361, testStatistic.t(sample1, sample2, false), 1E-4);\n-        assertEquals(0.1987, testStatistic.tTest(sample1, sample2, false), 1E-4);\n+        assertEquals(-2.2361, testStatistic.t(sample1, sample2), 1E-4);\n+        assertEquals(0.1987, testStatistic.tTest(sample1, sample2), 1E-4);\n     }\n     \n     public void testPaired() throws Exception {", "timestamp": 1091420409, "metainfo": ""}