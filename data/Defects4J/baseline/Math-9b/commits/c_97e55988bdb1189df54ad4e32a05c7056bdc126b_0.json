{"sha": "97e55988bdb1189df54ad4e32a05c7056bdc126b", "log": "pushed common code up in the AbstractIntegrator base class  ", "commit": "\n--- a/src/java/org/apache/commons/math/ode/AbstractIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/AbstractIntegrator.java\n         return stepSize;\n     }\n \n+    /** Perform some sanity checks on the integration parameters.\n+     * @param equations differential equations set\n+     * @param t0 start time\n+     * @param y0 state vector at t0\n+     * @param t target time for the integration\n+     * @param y placeholder where to put the state vector\n+     * @exception IntegratorException if some inconsistency is detected\n+     */\n+    protected void sanityChecks(final FirstOrderDifferentialEquations equations,\n+                                final double t0, final double[] y0,\n+                                final double t, final double[] y)\n+        throws IntegratorException {\n+\n+        if (equations.getDimension() != y0.length) {\n+            throw new IntegratorException(\"dimensions mismatch: ODE problem has dimension {0},\" +\n+                                          \" initial state vector has dimension {1}\",\n+                                          new Object[] {\n+                                              Integer.valueOf(equations.getDimension()),\n+                                              Integer.valueOf(y0.length)\n+                                          });\n+        }\n+\n+        if (equations.getDimension() != y.length) {\n+            throw new IntegratorException(\"dimensions mismatch: ODE problem has dimension {0},\" +\n+                                          \" final state vector has dimension {1}\",\n+                                          new Object[] {\n+                                              Integer.valueOf(equations.getDimension()),\n+                                              Integer.valueOf(y.length)\n+                                          });\n+        }\n+\n+        if (Math.abs(t - t0) <= 1.0e-12 * Math.max(Math.abs(t0), Math.abs(t))) {\n+            throw new IntegratorException(\"too small integration interval: length = {0}\",\n+                                          new Object[] {\n+                                              Double.valueOf(Math.abs(t - t0))\n+                                          });\n+        }\n+\n+    }\n+\n }\n--- a/src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\n    * @exception IntegratorException if some inconsistency is detected\n    */\n   protected void sanityChecks(final FirstOrderDifferentialEquations equations,\n-                              final double t0, final double[] y0, final double t, final double[] y)\n+                              final double t0, final double[] y0,\n+                              final double t, final double[] y)\n       throws IntegratorException {\n-      if (equations.getDimension() != y0.length) {\n-          throw new IntegratorException(\"dimensions mismatch: ODE problem has dimension {0},\" +\n-                                        \" initial state vector has dimension {1}\",\n-                                        new Object[] {\n-                                          Integer.valueOf(equations.getDimension()),\n-                                          Integer.valueOf(y0.length)\n-                                        });\n-      }\n-      if (equations.getDimension() != y.length) {\n-          throw new IntegratorException(\"dimensions mismatch: ODE problem has dimension {0},\" +\n-                                        \" final state vector has dimension {1}\",\n-                                        new Object[] {\n-                                          Integer.valueOf(equations.getDimension()),\n-                                          Integer.valueOf(y.length)\n-                                        });\n-      }\n+\n+      super.sanityChecks(equations, t0, y0, t, y);\n+\n       if ((vecAbsoluteTolerance != null) && (vecAbsoluteTolerance.length != y0.length)) {\n           throw new IntegratorException(\"dimensions mismatch: state vector has dimension {0},\" +\n                                         \" absolute tolerance vector has dimension {1}\",\n                                           Integer.valueOf(vecAbsoluteTolerance.length)\n                                         });\n       }\n+\n       if ((vecRelativeTolerance != null) && (vecRelativeTolerance.length != y0.length)) {\n           throw new IntegratorException(\"dimensions mismatch: state vector has dimension {0},\" +\n                                         \" relative tolerance vector has dimension {1}\",\n                                           Integer.valueOf(vecRelativeTolerance.length)\n                                         });\n       }\n-      if (Math.abs(t - t0) <= 1.0e-12 * Math.max(Math.abs(t0), Math.abs(t))) {\n-        throw new IntegratorException(\"too small integration interval: length = {0}\",\n-                                      new Object[] { Double.valueOf(Math.abs(t - t0)) });\n-      }\n-      \n+\n   }\n \n   /** Initialize the integration step.\n--- a/src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java\n     this.step       = step;\n   }\n \n-  /** Perform some sanity checks on the integration parameters.\n-   * @param equations differential equations set\n-   * @param t0 start time\n-   * @param y0 state vector at t0\n-   * @param t target time for the integration\n-   * @param y placeholder where to put the state vector\n-   * @exception IntegratorException if some inconsistency is detected\n-   */\n-  private void sanityChecks(final FirstOrderDifferentialEquations equations,\n-                            final double t0, final double[] y0, final double t, final double[] y)\n-    throws IntegratorException {\n-    if (equations.getDimension() != y0.length) {\n-      throw new IntegratorException(\"dimensions mismatch: ODE problem has dimension {0},\" +\n-                                    \" initial state vector has dimension {1}\",\n-                                    new Object[] {\n-                                      Integer.valueOf(equations.getDimension()),\n-                                      Integer.valueOf(y0.length)\n-                                    });\n-    }\n-    if (equations.getDimension() != y.length) {\n-        throw new IntegratorException(\"dimensions mismatch: ODE problem has dimension {0},\" +\n-                                      \" final state vector has dimension {1}\",\n-                                      new Object[] {\n-                                        Integer.valueOf(equations.getDimension()),\n-                                        Integer.valueOf(y.length)\n-                                      });\n-      }\n-    if (Math.abs(t - t0) <= 1.0e-12 * Math.max(Math.abs(t0), Math.abs(t))) {\n-      throw new IntegratorException(\"too small integration interval: length = {0}\",\n-                                    new Object[] { Double.valueOf(Math.abs(t - t0)) });\n-    }      \n-  }\n-\n   /** {@inheritDoc} */\n   public double integrate(final FirstOrderDifferentialEquations equations,\n                           final double t0, final double[] y0,", "timestamp": 1215110163, "metainfo": ""}