{"sha": "b6f2a44d8201f7e4f166d2ffec1a84fe7b2e5638", "log": "fixed an Adams-Moulton order error, it was one unit too large and inconsistent with the order of the underlying predictor  ", "commit": "\n--- a/src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java\n         super(METHOD_NAME, order + 1, new AdamsMoultonStepInterpolator());\n \n         // compute the integration coefficients\n-        int[][] bdArray      = AdamsBashforthIntegrator.computeBackwardDifferencesArray(order + 1);\n+        int[][] bdArray      = AdamsBashforthIntegrator.computeBackwardDifferencesArray(order);\n \n         Fraction[] gamma     = AdamsBashforthIntegrator.computeGammaArray(order);\n         predictorCoeffs = new double[order];\n         }\n \n         Fraction[] gammaStar = computeGammaStarArray(order);\n-        correctorCoeffs = new double[order + 1];\n-        for (int i = 0; i <= order; ++i) {\n+        correctorCoeffs = new double[order];\n+        for (int i = 0; i < order; ++i) {\n             Fraction fCorrector = Fraction.ZERO;\n-            for (int j = i; j <= order; ++j) {\n+            for (int j = i; j < order; ++j) {\n                 Fraction f = new Fraction(bdArray[j][i], 1);\n                 fCorrector = fCorrector.add(gammaStar[j].multiply(f));\n             }\n      * @param order order of the integration method\n      * @return gamma star coefficients array\n      */\n-    static Fraction[] computeGammaStarArray(final int order) {\n+    public static Fraction[] computeGammaStarArray(final int order) {\n \n         // create the array\n         Fraction[] gammaStarArray = new Fraction[order + 1];\n--- a/src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java\n \n     public void testCorrectorCoefficients() {\n \n-        double[] coeffs1 = new AdamsMoultonIntegrator(1, 0.01).getCorrectorCoeffs();\n+        double[] coeffs1 = new AdamsMoultonIntegrator(2, 0.01).getCorrectorCoeffs();\n         assertEquals(2, coeffs1.length);\n         assertEquals(1.0 / 2.0, coeffs1[0], 1.0e-16);\n         assertEquals(1.0 / 2.0, coeffs1[1], 1.0e-16);\n \n-        double[] coeffs2 = new AdamsMoultonIntegrator(2, 0.01).getCorrectorCoeffs();\n+        double[] coeffs2 = new AdamsMoultonIntegrator(3, 0.01).getCorrectorCoeffs();\n         assertEquals(3, coeffs2.length);\n         assertEquals( 5.0 / 12.0, coeffs2[0], 1.0e-16);\n         assertEquals( 8.0 / 12.0, coeffs2[1], 1.0e-16);\n         assertEquals(-1.0 / 12.0, coeffs2[2], 1.0e-16);\n \n-        double[] coeffs3 = new AdamsMoultonIntegrator(3, 0.01).getCorrectorCoeffs();\n+        double[] coeffs3 = new AdamsMoultonIntegrator(4, 0.01).getCorrectorCoeffs();\n         assertEquals(4, coeffs3.length);\n         assertEquals( 9.0 / 24.0, coeffs3[0], 1.0e-16);\n         assertEquals(19.0 / 24.0, coeffs3[1], 1.0e-16);\n         assertEquals(-5.0 / 24.0, coeffs3[2], 1.0e-16);\n         assertEquals( 1.0 / 24.0, coeffs3[3], 1.0e-16);\n \n-        double[] coeffs4 = new AdamsMoultonIntegrator(4, 0.01).getCorrectorCoeffs();\n+        double[] coeffs4 = new AdamsMoultonIntegrator(5, 0.01).getCorrectorCoeffs();\n         assertEquals(5, coeffs4.length);\n         assertEquals( 251.0 / 720.0, coeffs4[0], 1.0e-16);\n         assertEquals( 646.0 / 720.0, coeffs4[1], 1.0e-16);\n         assertEquals( 106.0 / 720.0, coeffs4[3], 1.0e-16);\n         assertEquals( -19.0 / 720.0, coeffs4[4], 1.0e-16);\n \n-        double[] coeffs5 = new AdamsMoultonIntegrator(5, 0.01).getCorrectorCoeffs();\n+        double[] coeffs5 = new AdamsMoultonIntegrator(6, 0.01).getCorrectorCoeffs();\n         assertEquals(6, coeffs5.length);\n         assertEquals( 475.0 / 1440.0, coeffs5[0], 1.0e-16);\n         assertEquals(1427.0 / 1440.0, coeffs5[1], 1.0e-16);\n         assertEquals(-173.0 / 1440.0, coeffs5[4], 1.0e-16);\n         assertEquals(  27.0 / 1440.0, coeffs5[5], 1.0e-16);\n \n-        double[] coeffs6 = new AdamsMoultonIntegrator(6, 0.01).getCorrectorCoeffs();\n+        double[] coeffs6 = new AdamsMoultonIntegrator(7, 0.01).getCorrectorCoeffs();\n         assertEquals(7, coeffs6.length);\n         assertEquals( 19087.0 / 60480.0, coeffs6[0], 1.0e-16);\n         assertEquals( 65112.0 / 60480.0, coeffs6[1], 1.0e-16);\n         assertEquals(  6312.0 / 60480.0, coeffs6[5], 1.0e-16);\n         assertEquals(  -863.0 / 60480.0, coeffs6[6], 1.0e-16);\n \n-        double[] coeffs7 = new AdamsMoultonIntegrator(7, 0.01).getCorrectorCoeffs();\n+        double[] coeffs7 = new AdamsMoultonIntegrator(8, 0.01).getCorrectorCoeffs();\n         assertEquals(8, coeffs7.length);\n         assertEquals(  36799.0 / 120960.0, coeffs7[0], 1.0e-16);\n         assertEquals( 139849.0 / 120960.0, coeffs7[1], 1.0e-16);\n         assertEquals( -11351.0 / 120960.0, coeffs7[6], 1.0e-16);\n         assertEquals(   1375.0 / 120960.0, coeffs7[7], 1.0e-16);\n \n-        double[] coeffs8 = new AdamsMoultonIntegrator(8, 0.01).getCorrectorCoeffs();\n+        double[] coeffs8 = new AdamsMoultonIntegrator(9, 0.01).getCorrectorCoeffs();\n         assertEquals(9, coeffs8.length);\n         assertEquals( 1070017.0 / 3628800.0, coeffs8[0], 1.0e-16);\n         assertEquals( 4467094.0 / 3628800.0, coeffs8[1], 1.0e-16);\n                 pb.getInitialTime(), pb.getInitialState(),\n                 pb.getFinalTime(), new double[pb.getDimension()]);\n \n-        assertTrue(handler.getLastError() < 7.0e-12);\n-        assertTrue(handler.getMaximalValueError() < 4.0e-11);\n-        assertEquals(0, handler.getMaximalTimeError(), 1.0e-14);\n+        assertTrue(handler.getLastError() < 3.0e-10);\n+        assertTrue(handler.getMaximalValueError() < 2.0e-9);\n+        assertEquals(0, handler.getMaximalTimeError(), 1.0e-15);\n         assertEquals(\"Adams-Moulton\", integ.getName());\n \n     }", "timestamp": 1240678759, "metainfo": ""}