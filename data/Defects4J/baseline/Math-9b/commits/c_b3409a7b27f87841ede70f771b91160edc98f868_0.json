{"sha": "b3409a7b27f87841ede70f771b91160edc98f868", "log": "Fixes MATH-384  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n         setWindowSize(window);\n     }\n \n+    /**\n+     * Construct a DescriptiveStatistics instance with an infinite window\n+     * and the initial data values in double[] initialDoubleArray.\n+     * If initialDoubleArray is null, then this constructor corresponds to \n+     * DescriptiveStatistics()\n+     *\n+     * @param initialDoubleArray the initial double[].\n+     */\n+    public DescriptiveStatistics(double[] initialDoubleArray) {\n+        if (initialDoubleArray != null) {\n+            eDA = new ResizableDoubleArray(initialDoubleArray);\n+    \t}\n+    }\n+    \n     /**\n      * Copy constructor.  Construct a new DescriptiveStatistics instance that\n      * is a copy of original.\n--- a/src/main/java/org/apache/commons/math/util/DoubleArray.java\n+++ b/src/main/java/org/apache/commons/math/util/DoubleArray.java\n     void addElement(double value);\n \n     /**\n+     * Adds elements to the end of this expandable array\n+     *\n+     * @param values to be added to end of array\n+     */\n+    void addElements(double[] values);\n+\n+    /**\n      * <p>\n      * Adds an element to the end of the array and removes the first\n      * element in the array.  Returns the discarded first element.\n--- a/src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java\n+++ b/src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java\n     }\n \n     /**\n+     * Create a ResizableArray from an existing double[] with the \n+     * initial capacity and numElements corresponding to the size of \n+     * the supplied double[] array. If the supplied array is null, a \n+     * new empty array with the default initial capacity will be created. \n+     * Other properties take default values:\n+     * <ul>\n+     * <li><code>initialCapacity = 16</code></li>\n+     * <li><code>expansionMode = MULTIPLICATIVE_MODE</code></li>\n+     * <li><code>expansionFactor = 2.5</code></li>\n+     * <li><code>contractionFactor = 2.0</code></li>\n+     * </ul>\n+     */\n+    public ResizableDoubleArray(double[] initialArray) {\n+        if (initialArray == null) {\n+            internalArray = new double[initialCapacity];\n+        } else {\n+            internalArray = initialArray;\n+            initialCapacity = initialArray.length;\n+            numElements = initialArray.length;\n+        }\n+    }\n+    \n+    /**\n      * <p>\n      * Create a ResizableArray with the specified initial capacity\n      * and expansion factor.  The remaining properties take default\n             contract();\n         }\n     }\n+    \n+    /**\n+     * Adds several element to the end of this expandable array.\n+     *\n+     * @param values to be added to end of array\n+     */\n+    public synchronized void addElements(double[] values) {\n+        final double[] tempArray = new double[numElements + values.length + 1];\n+        System.arraycopy(internalArray, startIndex, tempArray, 0, numElements);\n+        System.arraycopy(values, 0, tempArray, numElements, values.length);\n+        internalArray = tempArray;\n+        startIndex = 0;\n+        numElements += values.length;\n+    }\n \n     /**\n      * <p>\n--- a/src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java\n+++ b/src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java\n         } catch (IllegalArgumentException ex) {\n             // expected\n         }\n+        \n+        testDa = new ResizableDoubleArray((double[]) null);\n+        assertEquals(0, testDa.getNumElements());\n+        \n+        double[] initialArray = new double[] { 0, 1, 2 };        \n+        testDa = new ResizableDoubleArray(initialArray);\n+        assertEquals(3, testDa.getNumElements());\n \n         testDa = new ResizableDoubleArray(2, 2.0f);\n         assertEquals(0, testDa.getNumElements());\n         assertEquals(\"Internal Storage length should be 1024 if we started out with initial capacity of \" +\n                 \"16 and an expansion factor of 2.0\",\n                 1024, ((ResizableDoubleArray) da).getInternalLength());\n+    }\n+    \n+    public void testAddElements() {\n+        ResizableDoubleArray testDa = new ResizableDoubleArray();\n+        \n+        // MULTIPLICATIVE_MODE\n+        testDa.addElements(new double[] {4, 5, 6});\n+        assertEquals(3, testDa.getNumElements(), 0);\n+        assertEquals(4, testDa.getElement(0), 0);\n+        assertEquals(5, testDa.getElement(1), 0);\n+        assertEquals(6, testDa.getElement(2), 0);\n+        \n+        testDa.addElements(new double[] {4, 5, 6});\n+        assertEquals(6, testDa.getNumElements());\n+\n+        // ADDITIVE_MODE  (x's are occupied storage locations, 0's are open)\n+        testDa = new ResizableDoubleArray(2, 2.0f, 2.5f,\n+                ResizableDoubleArray.ADDITIVE_MODE);        \n+        assertEquals(2, testDa.getInternalLength());\n+        testDa.addElements(new double[] { 1d }); // x,0\n+        testDa.addElements(new double[] { 2d }); // x,x\n+        testDa.addElements(new double[] { 3d }); // x,x,x,0 -- expanded\n+        assertEquals(1d, testDa.getElement(0), 0);\n+        assertEquals(2d, testDa.getElement(1), 0);\n+        assertEquals(3d, testDa.getElement(2), 0);\n+        assertEquals(4, testDa.getInternalLength());  // x,x,x,0\n+        assertEquals(3, testDa.getNumElements());\n     }\n \n     @Override", "timestamp": 1293527033, "metainfo": ""}