{"sha": "7dadc2ab019f066a7a287376ad4c63193e8a0a9a", "log": "MATH-405 corrected  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java\n      * @return chi-square value\n      */\n     public double getChiSquare() {\n-        double chiSquare = 0;\n-        for (int i = 0; i < rows; ++i) {\n-            final double residual = residuals[i];\n-            chiSquare += residual * residual * residualsWeights[i];\n-        }\n-        return chiSquare;\n+        return cost*cost;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n         double[] diag    = new double[cols];\n         double[] oldX    = new double[cols];\n         double[] oldRes  = new double[rows];\n+        double[] oldObj  = new double[rows];\n+        double[] qtf     = new double[rows];\n         double[] work1   = new double[cols];\n         double[] work2   = new double[cols];\n         double[] work3   = new double[cols];\n         boolean firstIteration = true;\n         VectorialPointValuePair current = new VectorialPointValuePair(point, objective);\n         while (true) {\n-\n+            for (int i=0;i<rows;i++) {\n+                qtf[i]=residuals[i];\n+            }\n             incrementIterationsCounter();\n \n             // compute the Q.R. decomposition of the jacobian matrix\n             qrDecomposition();\n \n             // compute Qt.res\n-            qTy(residuals);\n-\n+            qTy(qtf);\n             // now we don't need Q anymore,\n             // so let jacobian contain the R matrix with its diagonal elements\n             for (int k = 0; k < solvedCols; ++k) {\n                     if (s != 0) {\n                         double sum = 0;\n                         for (int i = 0; i <= j; ++i) {\n-                            sum += jacobian[i][pj] * residuals[i];\n+                            sum += jacobian[i][pj] * qtf[i];\n                         }\n                         maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));\n                     }\n             }\n             if (maxCosine <= orthoTolerance) {\n                 // convergence has been reached\n+            \tupdateResidualsAndCost();\n+            \tcurrent = new VectorialPointValuePair(point, objective);\n                 return current;\n             }\n \n                 double[] tmpVec = residuals;\n                 residuals = oldRes;\n                 oldRes    = tmpVec;\n+                tmpVec    = objective;\n+                objective = oldObj;\n+                oldObj    = tmpVec;\n \n                 // determine the Levenberg-Marquardt parameter\n-                determineLMParameter(oldRes, delta, diag, work1, work2, work3);\n+                determineLMParameter(qtf, delta, diag, work1, work2, work3);\n \n                 // compute the new point and the norm of the evolution direction\n                 double lmNorm = 0;\n                     lmNorm  += s * s;\n                 }\n                 lmNorm = Math.sqrt(lmNorm);\n-\n                 // on the first iteration, adjust the initial step bound.\n                 if (firstIteration) {\n                     delta = Math.min(delta, lmNorm);\n \n                 // evaluate the function at x + p and calculate its norm\n                 updateResidualsAndCost();\n-                current = new VectorialPointValuePair(point, objective);\n \n                 // compute the scaled actual reduction\n                 double actRed = -1.0;\n                         xNorm    += xK * xK;\n                     }\n                     xNorm = Math.sqrt(xNorm);\n+                    current = new VectorialPointValuePair(point, objective);\n+\n+                    // tests for convergence.\n+                    if (checker != null) {\n+                    // we use the vectorial convergence checker\n+                    \tif (checker.converged(getIterations(), previous, current)) {\n+                    \t\treturn current;\n+                    \t}\n+                    }\n                 } else {\n                     // failed iteration, reset the previous values\n                     cost = previousCost;\n                     tmpVec    = residuals;\n                     residuals = oldRes;\n                     oldRes    = tmpVec;\n-                }\n-\n-                // tests for convergence.\n-                if (checker != null) {\n-                    // we use the vectorial convergence checker\n-                    if (checker.converged(getIterations(), previous, current)) {\n-                        return current;\n-                    }\n-                } else {\n-                    // we use the Levenberg-Marquardt specific convergence parameters\n-                    if (((Math.abs(actRed) <= costRelativeTolerance) &&\n-                         (preRed <= costRelativeTolerance) &&\n-                         (ratio <= 2.0)) ||\n-                        (delta <= parRelativeTolerance * xNorm)) {\n-                        return current;\n-                    }\n-                }\n-\n+                    tmpVec    = objective;\n+                    objective = oldObj;\n+                    oldObj    = tmpVec;\n+                }\n+                if (checker==null) {\n+                \tif (((Math.abs(actRed) <= costRelativeTolerance) &&\n+                        (preRed <= costRelativeTolerance) &&\n+                        (ratio <= 2.0)) ||\n+                       (delta <= parRelativeTolerance * xNorm)) {\n+                       return current;\n+                   }\n+                }\n                 // tests for termination and stringent tolerances\n                 // (2.2204e-16 is the machine epsilon for IEEE754)\n                 if ((Math.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {\n--- a/src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java\n     minpackTest(new FreudensteinRothFunction(new double[] { 5.0, -20.0 },\n                                              12432.833948863, 6.9988751744895,\n                                              new double[] {\n-                                               11.4121122022341,\n-                                               -0.8968550851268697\n+                                                11.41300466147456,\n+                                                -0.896796038685959\n                                              }), false);\n     minpackTest(new FreudensteinRothFunction(new double[] { 50.0, -200.0 },\n                                              11426454.595762, 6.99887517242903,\n                                              new double[] {\n-                                               11.412069435091231,\n-                                               -0.8968582807605691\n+                                                 11.412781785788564,\n+                                                 -0.8968051074920405\n                                              }), false);\n   }\n \n     minpackTest(new JennrichSampsonFunction(10, new double[] { 0.3, 0.4 },\n                                             64.5856498144943, 11.1517793413499,\n                                             new double[] {\n-                                             0.2578330049, 0.257829976764542\n+ //                                            0.2578330049, 0.257829976764542\n+                                               0.2578199266368004, 0.25782997676455244\n                                             }), false);\n   }\n ", "timestamp": 1281534039, "metainfo": ""}