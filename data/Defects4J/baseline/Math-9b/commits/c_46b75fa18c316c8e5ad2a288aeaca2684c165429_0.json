{"sha": "46b75fa18c316c8e5ad2a288aeaca2684c165429", "log": "fixed checkstyle warnings  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n+++ b/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n \n         /**\n          * Build a solver from decomposed matrix.\n-         * @param lData row-oriented storage for L<sup>T</sup> matrix data\n+         * @param lTData row-oriented storage for L<sup>T</sup> matrix data\n          */\n         private Solver(final double[][] lTData) {\n             this.lTData = lTData;\n--- a/src/java/org/apache/commons/math/linear/SparseRealVector.java\n+++ b/src/java/org/apache/commons/math/linear/SparseRealVector.java\n */\n public class SparseRealVector implements RealVector {\n \n+    /** Entries of the vector. */\n     private  OpenIntToDoubleHashMap entries;\n+\n+    /** Dimension of the vector. */\n     private final int virtualSize;\n+\n+    /** Tolerance for having a value considered zero. */\n     private double epsilon = 1.0e-12;\n \n     /**\n--- a/src/java/org/apache/commons/math/stat/correlation/Covariance.java\n+++ b/src/java/org/apache/commons/math/stat/correlation/Covariance.java\n     \n     /** covariance matrix */\n     private final RealMatrix covarianceMatrix;\n-    \n+\n+    /**\n+     * Create an empty covariance matrix.\n+     */\n     public Covariance() {\n         super();\n         covarianceMatrix = null;\n     /**\n      * Create a covariance matrix from a matrix whose columns represent\n      * covariates.\n-     * \n-     * <p>The input matrix must have at least two columns and two rows</p>\n-     * \n-     * <p>The <code>biasCorrected</code> parameter determines whether or not\n-     * covariance estimates are bias-corrected.</p>\n-     * \n+     * @param matrix input matrix (must have at least two columns and two rows)\n+     * @param biasCorrected determines whether or not covariance estimates are bias-corrected\n      * @return covariance matrix\n      */\n     protected RealMatrix computeCovariance(RealMatrix matrix, boolean biasCorrected) {\n     /**\n      * Throws IllegalArgumentException of the matrix does not have at least\n      * two columns and two rows\n+     * @param matrix matrix to check\n      */\n     private void checkSufficientData(final RealMatrix matrix) {\n         int nRows = matrix.getRowDimension();\n--- a/src/java/org/apache/commons/math/transform/FastFourierTransformer.java\n+++ b/src/java/org/apache/commons/math/transform/FastFourierTransformer.java\n      * A cache of already computed values is maintained.\n      */\n     private static class RootsOfUnity {\n-      \n+\n+      /** Number of roots of unity. */\n       private int      omegaCount;\n+\n+      /** Real part of the roots. */\n       private double[] omegaReal;\n+\n+      /** Imaginary part of the roots for forward transform. */\n       private double[] omegaImaginaryForward;\n+\n+      /** Imaginary part of the roots for reverse transform. */\n       private double[] omegaImaginaryInverse;\n+\n+      /** Forward/reverse indicator. */\n       private boolean  isForward;\n-      \n+\n+      /**\n+       * Build an engine for computing then <sup>th</sup> roots of unity\n+       */\n       public RootsOfUnity() {\n         \n         omegaCount = 0;", "timestamp": 1234723129, "metainfo": ""}