{"sha": "b13d9e1bdec7c62388592495ab0d42804ad273c4", "log": "Changed StorelessCovariance according to suggestions from psteitz. JIRA: MATH-449  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java\n+++ b/src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java\n  * Sandia National Laboratories. It computes the covariance for a pair of variables.\n  * Use {@link StorelessCovariance} to estimate an entire covariance matrix.</p>\n  *\n+ * <p>Note: This class is package private as it is only used internally in\n+ * the {@link StorelessCovariance} class.</p>\n+ *\n  * @version $Id$\n  * @since 3.0\n  */\n-public class StorelessBivariateCovariance {\n+class StorelessBivariateCovariance {\n \n     /** the mean of variable x */\n     private double meanX;\n--- a/src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java\n+++ b/src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java\n  * Arbitrary-Order Statistical Moments</a>, 2008, Technical Report SAND2008-6212,\n  * Sandia National Laboratories.</p>\n  *\n+ * <p>Note: the underlying covariance matrix is symmetric, thus only the\n+ * upper triangular part of the matrix is stored and updated each increment.</p>\n+ *\n  * @version $Id$\n  * @since 3.0\n  */\n public class StorelessCovariance extends Covariance {\n \n-    /** the two-dimensional covariance matrix */\n-    private StorelessBivariateCovariance[][] covMatrix;\n-\n-    /** row dimension of the covariance matrix */\n-    private int rowDimension;\n-\n-    /** column dimension of the covariance matrix */\n-    private int colDimension;\n-\n-    /** flag for bias correction */\n-    private boolean biasCorrected;\n-\n-    /**\n-     * Create a bias corrected covariance matrix with a given number of rows and columns.\n-     *\n-     * @param rows number of rows\n-     * @param cols number of columns\n-     */\n-    public StorelessCovariance(final int rows, final int cols) {\n-        this(rows, cols, true);\n+    /** the square covariance matrix (upper triangular part) */\n+    private StorelessBivariateCovariance[] covMatrix;\n+\n+    /** dimension of the square covariance matrix */\n+    private int dimension;\n+\n+    /**\n+     * Create a bias corrected covariance matrix with a given dimension.\n+     *\n+     * @param dim the dimension of the square covariance matrix\n+     */\n+    public StorelessCovariance(final int dim) {\n+        this(dim, true);\n     }\n \n     /**\n      * Create a covariance matrix with a given number of rows and columns and the\n      * indicated bias correction.\n      *\n-     * @param rows number of variables in the rows\n-     * @param cols number of variables in the columns\n-     * @param biasCorrection if <code>true</code> the covariance estimate is corrected\n+     * @param dim the dimension of the covariance matrix\n+     * @param biasCorrected if <code>true</code> the covariance estimate is corrected\n      * for bias, i.e. n-1 in the denominator, otherwise there is no bias correction,\n      * i.e. n in the denominator.\n      */\n-    public StorelessCovariance(final int rows, final int cols,\n-                               final boolean biasCorrection) {\n-        rowDimension = rows;\n-        colDimension = cols;\n-        biasCorrected = biasCorrection;\n-        covMatrix = new StorelessBivariateCovariance[rowDimension][colDimension];\n-        initializeMatrix();\n+    public StorelessCovariance(final int dim, final boolean biasCorrected) {\n+        dimension = dim;\n+        covMatrix = new StorelessBivariateCovariance[dimension * (dimension + 1) / 2];\n+        initializeMatrix(biasCorrected);\n     }\n \n     /**\n      * Initialize the internal two-dimensional array of\n      * {@link StorelessBivariateCovariance} instances.\n-     */\n-    private void initializeMatrix() {\n-        for(int i=0;i<rowDimension;i++){\n-            for(int j=0;j<colDimension;j++){\n-                covMatrix[i][j] = new StorelessBivariateCovariance(biasCorrected);\n+     *\n+     * @param biasCorrected if the covariance estimate shall be corrected for bias\n+     */\n+    private void initializeMatrix(final boolean biasCorrected) {\n+        for(int i = 0; i < dimension; i++){\n+            for(int j = 0; j < dimension; j++){\n+                setElement(i, j, new StorelessBivariateCovariance(biasCorrected));\n             }\n         }\n+    }\n+\n+    /**\n+     * Returns the index (i, j) translated into the one-dimensional\n+     * array used to store the upper triangular part of the symmetric\n+     * covariance matrix.\n+     *\n+     * @param i the row index\n+     * @param j the column index\n+     * @return the corresponding index in the matrix array\n+     */\n+    private int indexOf(final int i, final int j) {\n+        return j < i ? i * (i + 1) / 2 + j : j * (j + 1) / 2 + i;\n+    }\n+\n+    /**\n+     * Gets the element at index (i, j) from the covariance matrix\n+     * @param i the row index\n+     * @param j the column index\n+     * @return the {@link StorelessBivariateCovariance} element at the given index\n+     */\n+    private StorelessBivariateCovariance getElement(final int i, final int j) {\n+        return covMatrix[indexOf(i, j)];\n+    }\n+\n+    /**\n+     * Sets the covariance element at index (i, j) in the covariance matrix\n+     * @param i the row index\n+     * @param j the column index\n+     * @param cov the {@link StorelessBivariateCovariance} element to be set\n+     */\n+    private void setElement(final int i, final int j,\n+                            final StorelessBivariateCovariance cov) {\n+        covMatrix[indexOf(i, j)] = cov;\n     }\n \n     /**\n      * @param xIndex row index in the covariance matrix\n      * @param yIndex column index in the covariance matrix\n      * @return the covariance of the given element\n-     */\n-    public StorelessBivariateCovariance getCovariance(final int xIndex,\n-                                                      final int yIndex) {\n-        return covMatrix[xIndex][yIndex];\n-    }\n-\n-    /**\n-     * Set the covariance for an individual element of the covariance matrix.\n-     *\n-     * @param xIndex row index in the covariance matrix\n-     * @param yIndex column index in the covariance matrix\n-     * @param cov the covariance to be set\n-     */\n-    public void setCovariance(final int xIndex, final int yIndex,\n-                              final StorelessBivariateCovariance cov) {\n-        covMatrix[xIndex][yIndex] = cov;\n-    }\n-\n-    /**\n-     * Increment one individual element of the covariance matrix.\n-     *\n-     * <p>The element is specified by the xIndex and yIndex and incremented with the\n-     * corresponding values of x and y.</p>\n-     *\n-     * @param xIndex row index in the covariance matrix\n-     * @param yIndex column index in the covariance matrix\n-     * @param x value of x\n-     * @param y value of y\n-     */\n-    public void incrementCovariance(final int xIndex, final int yIndex,\n-                                    final double x, final double y) {\n-        covMatrix[xIndex][yIndex].increment(x, y);\n+     * @throws NumberIsTooSmallException if the number of observations\n+     * in the cell is &lt; 2\n+     */\n+    public double getCovariance(final int xIndex,\n+                                final int yIndex)\n+        throws NumberIsTooSmallException {\n+\n+        return getElement(xIndex, yIndex).getResult();\n+\n     }\n \n     /**\n      * Increment the covariance matrix with one row of data.\n      *\n-     * @param rowData array representing one row of data.\n+     * @param data array representing one row of data.\n      * @throws DimensionMismatchException if the length of <code>rowData</code>\n      * does not match with the covariance matrix\n      */\n-    public void incrementRow(final double[] rowData)\n+    public void increment(final double[] data)\n         throws DimensionMismatchException {\n \n-        int length = rowData.length;\n-        if (length != colDimension) {\n-            throw new DimensionMismatchException(length, colDimension);\n-        }\n+        int length = data.length;\n+        if (length != dimension) {\n+            throw new DimensionMismatchException(length, dimension);\n+        }\n+\n+        // only update the upper triangular part of the covariance matrix\n+        // as only these parts are actually stored\n         for (int i = 0; i < length; i++){\n-            for (int j = 0; j < length; j++){\n-                covMatrix[i][j].increment(rowData[i], rowData[j]);\n+            for (int j = i; j < length; j++){\n+                getElement(i, j).increment(data[i], data[j]);\n             }\n         }\n \n      * for a cell is &lt; 2\n      */\n     public double[][] getData() throws NumberIsTooSmallException {\n-        final double[][] data = new double[rowDimension][rowDimension];\n-        for (int i = 0; i < rowDimension; i++) {\n-            for (int j = 0; j < colDimension; j++) {\n-                data[i][j] = covMatrix[i][j].getResult();\n+        final double[][] data = new double[dimension][dimension];\n+        for (int i = 0; i < dimension; i++) {\n+            for (int j = 0; j < dimension; j++) {\n+                data[i][j] = getElement(i, j).getResult();\n             }\n         }\n         return data;\n--- a/src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java\n import org.apache.commons.math3.TestUtils;\n import org.apache.commons.math3.linear.Array2DRowRealMatrix;\n import org.apache.commons.math3.linear.RealMatrix;\n+import org.junit.Assert;\n import org.junit.Test;\n-\n \n public class StorelessCovarianceTest {\n \n          2973.033333333333, 1382.433333333333, 32917.40000000, 22.66666666666667\n         };\n \n-        StorelessCovariance covMatrix = new StorelessCovariance(7, 7);\n+        StorelessCovariance covMatrix = new StorelessCovariance(7);\n         for(int i=0;i<matrix.getRowDimension();i++){\n-            covMatrix.incrementRow(matrix.getRow(i));\n+            covMatrix.increment(matrix.getRow(i));\n         }\n \n         RealMatrix covarianceMatrix = covMatrix.getCovarianceMatrix();\n         TestUtils.assertEquals(\"covariance matrix\", createRealMatrix(rData, 7, 7), covarianceMatrix, 10E-7);\n \n     }\n-\n-\n \n     /**\n      * Test R Swiss fertility dataset against R.\n             241.5632030527289, 379.9043755781684, -190.56061054579092, -61.6988297872340, 1739.2945371877890\n          };\n \n-        StorelessCovariance covMatrix = new StorelessCovariance(5, 5);\n+        StorelessCovariance covMatrix = new StorelessCovariance(5);\n         for(int i=0;i<matrix.getRowDimension();i++){\n-            covMatrix.incrementRow(matrix.getRow(i));\n+            covMatrix.increment(matrix.getRow(i));\n         }\n \n         RealMatrix covarianceMatrix = covMatrix.getCovarianceMatrix();\n     }\n \n     /**\n-     * Test Longley dataset against R.\n-     * Data Source: J. Longley (1967) \"An Appraisal of Least Squares\n-     * Programs for the Electronic Computer from the Point of View of the User\"\n-     * Journal of the American Statistical Association, vol. 62. September,\n-     * pp. 819-841.\n-     *\n-     * Data are from NIST:\n-     * http://www.itl.nist.gov/div898/strd/lls/data/LINKS/DATA/Longley.dat\n+     * Test symmetry of the covariance matrix\n      */\n     @Test\n-    public void testLonglyByEntry() {\n-        RealMatrix matrix = createRealMatrix(longleyData, 16, 7);\n-\n-        double[] rData = new double[] {\n-         12333921.73333333246, 3.679666000000000e+04, 343330206.333333313,\n-         1649102.666666666744, 1117681.066666666651, 23461965.733333334, 16240.93333333333248,\n-         36796.66000000000, 1.164576250000000e+02, 1063604.115416667,\n-         6258.666250000000, 3490.253750000000, 73503.000000000, 50.92333333333334,\n-         343330206.33333331347, 1.063604115416667e+06, 9879353659.329166412,\n-         56124369.854166664183, 30880428.345833335072, 685240944.600000024, 470977.90000000002328,\n-         1649102.66666666674, 6.258666250000000e+03, 56124369.854166664,\n-         873223.429166666698, -115378.762499999997, 4462741.533333333, 2973.03333333333330,\n-         1117681.06666666665, 3.490253750000000e+03, 30880428.345833335,\n-         -115378.762499999997, 484304.095833333326, 1764098.133333333, 1382.43333333333339,\n-         23461965.73333333433, 7.350300000000000e+04, 685240944.600000024,\n-         4462741.533333333209, 1764098.133333333302, 48387348.933333330, 32917.40000000000146,\n-         16240.93333333333, 5.092333333333334e+01, 470977.900000000,\n-         2973.033333333333, 1382.433333333333, 32917.40000000, 22.66666666666667\n-        };\n-\n-        int row = matrix.getRowDimension();\n-        int col = matrix.getColumnDimension();\n-        double x = 0.0;\n-        double y = 0.0;\n-        StorelessCovariance covMatrix = new StorelessCovariance(7, 7);\n-        for(int i=0;i<row;i++){\n-            for(int j=0;j<col;j++){\n-                x = matrix.getEntry(i, j);\n-                for(int k=0;k<col;k++){\n-                    y = matrix.getEntry(i, k);\n-                    covMatrix.incrementCovariance(j, k, x, y);\n-                }\n+    public void testSymmetry() {\n+        RealMatrix matrix = createRealMatrix(swissData, 47, 5);\n+\n+        final int dimension = 5;\n+        StorelessCovariance storelessCov = new StorelessCovariance(dimension);\n+        for(int i=0;i<matrix.getRowDimension();i++){\n+            storelessCov.increment(matrix.getRow(i));\n+        }\n+\n+        double[][] covMatrix = storelessCov.getData();\n+        for (int i = 0; i < dimension; i++) {\n+            for (int j = i; j < dimension; j++) {\n+                Assert.assertEquals(covMatrix[i][j], covMatrix[j][i], 10e-9);\n             }\n         }\n-\n-        RealMatrix covarianceMatrix = covMatrix.getCovarianceMatrix();\n-\n-        TestUtils.assertEquals(\"covariance matrix\", createRealMatrix(rData, 7, 7), covarianceMatrix, 10E-7);\n-\n-    }\n-\n-    /**\n-     * Test R Swiss fertility dataset against R.\n-     * Data Source: R datasets package\n-     */\n-    @Test\n-    public void testSwissFertilityByEntry() {\n-         RealMatrix matrix = createRealMatrix(swissData, 47, 5);\n-\n-         double[] rData = new double[] {\n-           156.0424976873265, 100.1691489361702, -64.36692876965772, -79.7295097132285, 241.5632030527289,\n-           100.169148936170251, 515.7994172062905, -124.39283071230344, -139.6574005550416, 379.9043755781684,\n-           -64.3669287696577, -124.3928307123034, 63.64662349676226, 53.5758556891767, -190.5606105457909,\n-           -79.7295097132285, -139.6574005550416, 53.57585568917669, 92.4560592044403, -61.6988297872340,\n-            241.5632030527289, 379.9043755781684, -190.56061054579092, -61.6988297872340, 1739.2945371877890\n-         };\n-\n-        int row = matrix.getRowDimension();\n-        int col = matrix.getColumnDimension();\n-        double x = 0.0;\n-        double y = 0.0;\n-        StorelessCovariance covMatrix = new StorelessCovariance(5, 5);\n-        for(int i=0;i<row;i++){\n-            for(int j=0;j<col;j++){\n-                x = matrix.getEntry(i, j);\n-                for(int k=0;k<col;k++){\n-                    y = matrix.getEntry(i, k);\n-                    covMatrix.incrementCovariance(j, k, x, y);\n-                }\n-            }\n-        }\n-\n-        RealMatrix covarianceMatrix = covMatrix.getCovarianceMatrix();\n-\n-        TestUtils.assertEquals(\"covariance matrix\", createRealMatrix(rData, 5, 5), covarianceMatrix, 10E-13);\n-    }\n-\n+    }\n+    \n     protected RealMatrix createRealMatrix(double[] data, int nRows, int nCols) {\n         double[][] matrixData = new double[nRows][nCols];\n         int ptr = 0;", "timestamp": 1329421302, "metainfo": ""}