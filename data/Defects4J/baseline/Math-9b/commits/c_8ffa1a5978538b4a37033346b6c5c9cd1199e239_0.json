{"sha": "8ffa1a5978538b4a37033346b6c5c9cd1199e239", "log": "Made inverse cum accuracy configurable for remaining continuous distributions.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java\n public class BetaDistributionImpl\n     extends AbstractContinuousDistribution implements BetaDistribution {\n \n+    /**\n+     * Default inverse cumulative probability accurac\n+     * @since 2.1\n+     */\n+    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;\n+\n     /** Serializable version identifier. */\n     private static final long serialVersionUID = -1221965979403477668L;\n \n      * updated whenever alpha or beta are changed.\n      */\n     private double z;\n+\n+    /** Inverse cumulative probability accuracy */\n+    private final double solverAbsoluteAccuracy;\n \n     /**\n      * Build a new instance.\n      * @param alpha first shape parameter (must be positive)\n      * @param beta second shape parameter (must be positive)\n-     */\n-    public BetaDistributionImpl(double alpha, double beta) {\n+     * @param inverseCumAccuracy the maximum absolute error in inverse cumulative probability estimates\n+     * (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY})\n+     * @since 2.1\n+     */\n+    public BetaDistributionImpl(double alpha, double beta, double inverseCumAccuracy) {\n         this.alpha = alpha;\n         this.beta = beta;\n         z = Double.NaN;\n+        solverAbsoluteAccuracy = inverseCumAccuracy;\n+    }\n+\n+    /**\n+     * Build a new instance.\n+     * @param alpha first shape parameter (must be positive)\n+     * @param beta second shape parameter (must be positive)\n+     */\n+    public BetaDistributionImpl(double alpha, double beta) {\n+        this(alpha, beta, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);\n     }\n \n     /** {@inheritDoc}\n     public double cumulativeProbability(double x0, double x1) throws MathException {\n         return cumulativeProbability(x1) - cumulativeProbability(x0);\n     }\n+\n+    /**\n+     * Return the absolute accuracy setting of the solver used to estimate\n+     * inverse cumulative probabilities.\n+     *\n+     * @return the solver absolute accuracy\n+     * @since 2.1\n+     */\n+    @Override\n+    protected double getSolverAbsoluteAccuracy() {\n+        return solverAbsoluteAccuracy;\n+    }\n }\n--- a/src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java\n public class CauchyDistributionImpl extends AbstractContinuousDistribution\n         implements CauchyDistribution, Serializable {\n \n+    /**\n+     * Default inverse cumulative probability accuracy\n+     * @since 2.1\n+     */\n+    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;\n+\n     /** Serializable version identifier */\n     private static final long serialVersionUID = 8589540077390120676L;\n \n     /** The scale of this distribution. */\n     private double scale = 1;\n \n+    /** Inverse cumulative probability accuracy */\n+    private final double solverAbsoluteAccuracy;\n+\n     /**\n      * Creates cauchy distribution with the medain equal to zero and scale\n      * equal to one.\n      * @param s scale parameter for this distribution\n      */\n     public CauchyDistributionImpl(double median, double s){\n+        this(median, s, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);\n+    }\n+\n+    /**\n+     * Create a cauchy distribution using the given median and scale.\n+     * @param median median for this distribution\n+     * @param s scale parameter for this distribution\n+     * @param inverseCumAccuracy the maximum absolute error in inverse cumulative probability estimates\n+     * (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY})\n+     * @since 2.1\n+     */\n+    public CauchyDistributionImpl(double median, double s, double inverseCumAccuracy) {\n         super();\n         setMedianInternal(median);\n         setScaleInternal(s);\n+        solverAbsoluteAccuracy = inverseCumAccuracy;\n     }\n \n     /**\n \n         return ret;\n     }\n+\n+    /**\n+     * Return the absolute accuracy setting of the solver used to estimate\n+     * inverse cumulative probabilities.\n+     *\n+     * @return the solver absolute accuracy\n+     * @since 2.1\n+     */\n+    @Override\n+    protected double getSolverAbsoluteAccuracy() {\n+        return solverAbsoluteAccuracy;\n+    }\n }\n--- a/src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n public class ExponentialDistributionImpl extends AbstractContinuousDistribution\n     implements ExponentialDistribution, Serializable {\n \n+    /**\n+     * Default inverse cumulative probability accuracy\n+     * @since 2.1\n+     */\n+    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;\n+\n     /** Serializable version identifier */\n     private static final long serialVersionUID = 2401296428283614780L;\n \n     /** The mean of this distribution. */\n     private double mean;\n \n+    /** Inverse cumulative probability accuracy */\n+    private final double solverAbsoluteAccuracy;\n+\n     /**\n      * Create a exponential distribution with the given mean.\n      * @param mean mean of this distribution.\n      */\n     public ExponentialDistributionImpl(double mean) {\n+        this(mean, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);\n+    }\n+\n+    /**\n+     * Create a exponential distribution with the given mean.\n+     * @param mean mean of this distribution.\n+     * @param inverseCumAccuracy the maximum absolute error in inverse cumulative probability estimates\n+     * (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY})\n+     * @since 2.1\n+     */\n+    public ExponentialDistributionImpl(double mean, double inverseCumAccuracy) {\n         super();\n         setMeanInternal(mean);\n+        solverAbsoluteAccuracy = inverseCumAccuracy;\n     }\n \n     /**\n             return mean;\n         }\n     }\n+\n+    /**\n+     * Return the absolute accuracy setting of the solver used to estimate\n+     * inverse cumulative probabilities.\n+     *\n+     * @return the solver absolute accuracy\n+     * @since 2.1\n+     */\n+    @Override\n+    protected double getSolverAbsoluteAccuracy() {\n+        return solverAbsoluteAccuracy;\n+    }\n }", "timestamp": 1269205807, "metainfo": ""}