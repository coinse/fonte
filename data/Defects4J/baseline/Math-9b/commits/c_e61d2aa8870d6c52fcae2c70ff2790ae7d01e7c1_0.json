{"sha": "e61d2aa8870d6c52fcae2c70ff2790ae7d01e7c1", "log": "replaced custom linear solve computation by use of the linear package features  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/MessagesResources_fr.java\n+++ b/src/main/java/org/apache/commons/math/MessagesResources_fr.java\n    { \"out of bounds significance level {0}, must be between {1} and {2}\",\n      \"niveau de signification {0} hors domaine, doit \\u00eatre entre {1} et {2}\" },\n \n-   // org.apache.commons.math.stat.regression.OLSMultipleLinearRegression\n-   { \"matrix is not upper-triangular, entry ({0}, {1}) = {2} is too large\",\n-     \"matrice non triangulaire sup\\u00e9rieure, l''\\u00e9l\\u00e9ment ({0}, {1}) = {2} est trop grand\" },\n-\n    // org.apache.commons.math.stat.regression.AbstractMultipleLinearRegression\n    { \"not enough data ({0} rows) for this many predictors ({1} predictors)\",\n      \"pas assez de donn\\u00e9es ({0} lignes) pour {1} pr\\u00e9dicteurs\" },\n--- a/src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java\n+++ b/src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java\n  */\n package org.apache.commons.math.stat.regression;\n \n-import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.linear.Array2DRowRealMatrix;\n import org.apache.commons.math.linear.LUDecompositionImpl;\n import org.apache.commons.math.linear.QRDecomposition;\n import org.apache.commons.math.linear.QRDecompositionImpl;\n import org.apache.commons.math.linear.RealMatrix;\n-import org.apache.commons.math.linear.Array2DRowRealMatrix;\n import org.apache.commons.math.linear.RealVector;\n-import org.apache.commons.math.linear.ArrayRealVector;\n \n /**\n  * <p>Implements ordinary least squares (OLS) to estimate the parameters of a\n      */\n     @Override\n     protected RealVector calculateBeta() {\n-        return solveUpperTriangular(qr.getR(), qr.getQ().transpose().operate(Y));\n+        return qr.getSolver().solve(Y);\n     }\n \n     /**\n                (X.getRowDimension() - X.getColumnDimension());\n     }\n \n-    /** TODO:  Find a home for the following methods in the linear package */\n-\n-    /**\n-     * <p>Uses back substitution to solve the system</p>\n-     *\n-     * <p>coefficients X = constants</p>\n-     *\n-     * <p>coefficients must upper-triangular and constants must be a column\n-     * matrix.  The solution is returned as a column matrix.</p>\n-     *\n-     * <p>The number of columns in coefficients determines the length\n-     * of the returned solution vector (column matrix).  If constants\n-     * has more rows than coefficients has columns, excess rows are ignored.\n-     * Similarly, extra (zero) rows in coefficients are ignored</p>\n-     *\n-     * @param coefficients upper-triangular coefficients matrix\n-     * @param constants column RHS constants vector\n-     * @return solution matrix as a column vector\n-     *\n-     */\n-    private static RealVector solveUpperTriangular(RealMatrix coefficients,\n-                                                   RealVector constants) {\n-        checkUpperTriangular(coefficients, 1E-12);\n-        int length = coefficients.getColumnDimension();\n-        double x[] = new double[length];\n-        for (int i = 0; i < length; i++) {\n-            int index = length - 1 - i;\n-            double sum = 0;\n-            for (int j = index + 1; j < length; j++) {\n-                sum += coefficients.getEntry(index, j) * x[j];\n-            }\n-            x[index] = (constants.getEntry(index) - sum) / coefficients.getEntry(index, index);\n-        }\n-        return new ArrayRealVector(x);\n-    }\n-\n-    /**\n-     * <p>Check if a matrix is upper-triangular.</p>\n-     *\n-     * <p>Makes sure all below-diagonal elements are within epsilon of 0.</p>\n-     *\n-     * @param m matrix to check\n-     * @param epsilon maximum allowable absolute value for elements below\n-     * the main diagonal\n-     *\n-     * @throws IllegalArgumentException if m is not upper-triangular\n-     */\n-    private static void checkUpperTriangular(RealMatrix m, double epsilon) {\n-        int nCols = m.getColumnDimension();\n-        int nRows = m.getRowDimension();\n-        for (int r = 0; r < nRows; r++) {\n-            int bound = Math.min(r, nCols);\n-            for (int c = 0; c < bound; c++) {\n-                if (Math.abs(m.getEntry(r, c)) > epsilon) {\n-                    throw MathRuntimeException.createIllegalArgumentException(\n-                          \"matrix is not upper-triangular, entry ({0}, {1}) = {2} is too large\",\n-                          r, c, m.getEntry(r, c));\n-                }\n-            }\n-        }\n-    }\n }", "timestamp": 1255705907, "metainfo": ""}