{"sha": "9be69ef558ed1e5f3737c837ea507a864f7e7c64", "log": "replaced RuntimeException by MathRuntimeException  ", "commit": "\n--- a/src/java/org/apache/commons/math/ode/ContinuousOutputModel.java\n+++ b/src/java/org/apache/commons/math/ode/ContinuousOutputModel.java\n import java.util.List;\n import java.io.Serializable;\n \n+import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n       steps.get(index).setInterpolatedTime(time);\n \n     } catch (DerivativeException de) {\n-      throw new RuntimeException(\"unexpected DerivativeException caught: \" +\n-                                 de.getMessage());\n+      throw new MathRuntimeException(\"unexpected exception caught\", new Object[0], de);\n     }\n \n   }\n--- a/src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java\n+++ b/src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java\n \n import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.DimensionMismatchException;\n+import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.random.CorrelatedRandomVectorGenerator;\n import org.apache.commons.math.random.JDKRandomGenerator;\n \n         } catch (DimensionMismatchException dme) {\n             // this should not happen\n-            throw new RuntimeException(\"internal error\");\n+            throw new MathRuntimeException(\"unexpected exception caught\", new Object[0], dme);\n         }\n \n     }\n--- a/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n \n package org.apache.commons.math.random;\n \n+import java.io.BufferedReader;\n import java.io.EOFException;\n-import java.io.Serializable;\n-import java.io.BufferedReader;\n+import java.io.File;\n import java.io.FileReader;\n-import java.io.File;\n import java.io.IOException;\n import java.io.InputStreamReader;\n+import java.io.Serializable;\n import java.net.URL;\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.stat.descriptive.StatisticalSummary;\n import org.apache.commons.math.stat.descriptive.SummaryStatistics;\n-import org.apache.commons.math.stat.descriptive.StatisticalSummary;\n \n /**\n  * Implements <code>EmpiricalDistribution</code> interface.  This implementation\n             da.computeStats();\n             fillBinStats(in);\n         } catch (Exception e) {\n-            throw new RuntimeException(e.getMessage());\n+            throw new MathRuntimeException(e);\n         }\n         loaded = true;\n \n                }\n            }\n         }\n-        throw new RuntimeException(\"No bin selected\");\n+        throw new MathRuntimeException(\"no bin selected\", new Object[0]);\n     }\n \n     /**\n--- a/src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java\n+++ b/src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n+import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.RetryTestCase;\n import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.stat.descriptive.SummaryStatistics;\n             empiricalDistribution.getNextValue();\n             empiricalDistribution2.getNextValue();\n             fail(\"Expecting IllegalStateException\");\n-        } catch (IllegalStateException ex) {;}\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        } catch (Exception e) {\n+            fail(\"wrong exception caught\");\n+        }\n     }\n     \n     /**\n         try {\n             dist.load((double[]) null);\n             fail(\"load((double[]) null) expected RuntimeException\");\n-        }\n-        catch (RuntimeException e) {\n-            // expected\n+        } catch (MathRuntimeException e) {\n+            // expected\n+        } catch (Exception e) {\n+            fail(\"wrong exception caught\");\n         }\n     }\n \n         try {\n             dist.load((URL) null);\n             fail(\"load((URL) null) expected NullPointerException\");\n-        }\n-        catch (NullPointerException e) {\n-            // expected\n+        } catch (NullPointerException e) {\n+            // expected\n+        } catch (Exception e) {\n+            fail(\"wrong exception caught\");\n         }\n     }\n \n         try {\n             dist.load((File) null);\n             fail(\"load((File) null) expected NullPointerException\");\n-        }\n-        catch (NullPointerException e) {\n-            // expected\n+        } catch (NullPointerException e) {\n+            // expected\n+        } catch (Exception e) {\n+            fail(\"wrong exception caught\");\n         }\n     }\n \n--- a/src/test/org/apache/commons/math/util/TestBean.java\n+++ b/src/test/org/apache/commons/math/util/TestBean.java\n  */\n \n package org.apache.commons.math.util;\n+\n+import org.apache.commons.math.MathRuntimeException;\n \n /**\n  * @version $Revision$ $Date$\n      * \n      */\n     public Double getZ() {\n-        throw new RuntimeException();\n+        throw new MathRuntimeException();\n     }\n \n     /**", "timestamp": 1225748191, "metainfo": ""}