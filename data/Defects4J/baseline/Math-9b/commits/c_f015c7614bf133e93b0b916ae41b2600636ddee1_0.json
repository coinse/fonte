{"sha": "f015c7614bf133e93b0b916ae41b2600636ddee1", "log": "[MATH-789] Fixed rank calculation in case of dependant columns, added additional constructor that repaces small parameter.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java\n+++ b/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java\n \n     /**\n      * Decompose a symmetric positive semidefinite matrix.\n+     * <p>\n+     * <b>Note:</b> this constructor follows the linpack method to detect dependent\n+     * columns by proceeding with the Cholesky algorithm until a nonpositive diagonal\n+     * element is encountered.\n+     *\n+     * @see <a href=\"http://eprints.ma.man.ac.uk/1193/01/covered/MIMS_ep2008_56.pdf\">\n+     * Analysis of the Cholesky Decomposition of a Semi-definite Matrix</a>\n      *\n      * @param matrix Symmetric positive semidefinite matrix.\n-     * @param small Diagonal elements threshold under which  column are\n+     * @exception NonPositiveDefiniteMatrixException if the matrix is not\n+     * positive semidefinite.\n+     */\n+    public RectangularCholeskyDecomposition(RealMatrix matrix)\n+        throws NonPositiveDefiniteMatrixException {\n+        this(matrix, 0);\n+    }\n+\n+    /**\n+     * Decompose a symmetric positive semidefinite matrix.\n+     *\n+     * @param matrix Symmetric positive semidefinite matrix.\n+     * @param small Diagonal elements threshold under which columns are\n      * considered to be dependent on previous ones and are discarded.\n      * @exception NonPositiveDefiniteMatrixException if the matrix is not\n      * positive semidefinite.\n \n             // check diagonal element\n             int ir = index[r];\n-            if (c[ir][ir] < small) {\n+            if (c[ir][ir] <= small) {\n \n                 if (r == 0) {\n                     throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);\n \n                 // all remaining diagonal elements are close to zero, we consider we have\n                 // found the rank of the symmetric positive semidefinite matrix\n-                ++r;\n                 loop = false;\n \n             } else {\n--- a/src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java\n             {0.009881156, 0.008196856, 0.019023866, 0.009210099},\n             {0.010499559, 0.010732709, 0.009210099, 0.019107243}\n         });\n-        RealMatrix root1 = new RectangularCholeskyDecomposition(m1, 1.0e-10).getRootMatrix();\n-        RealMatrix rebuiltM1 = root1.multiply(root1.transpose());\n-        Assert.assertEquals(0.0, m1.subtract(rebuiltM1).getNorm(), 1.0e-16);\n+        composeAndTest(m1, 4);\n \n         final RealMatrix m2 = MatrixUtils.createRealMatrix(new double[][]{\n             {0.0, 0.0, 0.0, 0.0, 0.0},\n             {0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099},\n             {0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243}\n         });\n-        RealMatrix root2 = new RectangularCholeskyDecomposition(m2, 1.0e-10).getRootMatrix();\n-        RealMatrix rebuiltM2 = root2.multiply(root2.transpose());\n-        Assert.assertEquals(0.0, m2.subtract(rebuiltM2).getNorm(), 1.0e-16);\n+        composeAndTest(m2, 4);\n \n         final RealMatrix m3 = MatrixUtils.createRealMatrix(new double[][]{\n             {0.013445532, 0.010394690, 0.0, 0.009881156, 0.010499559},\n             {0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099},\n             {0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243}\n         });\n-        RealMatrix root3 = new RectangularCholeskyDecomposition(m3, 1.0e-10).getRootMatrix();\n-        RealMatrix rebuiltM3 = root3.multiply(root3.transpose());\n-        Assert.assertEquals(0.0, m3.subtract(rebuiltM3).getNorm(), 1.0e-16);\n+        composeAndTest(m3, 4);\n \n+    }\n+    \n+    private void composeAndTest(RealMatrix m, int expectedRank) {\n+        RectangularCholeskyDecomposition r = new RectangularCholeskyDecomposition(m);\n+        Assert.assertEquals(expectedRank, r.getRank());\n+        RealMatrix root = r.getRootMatrix();\n+        RealMatrix rebuiltMatrix = root.multiply(root.transpose());\n+        Assert.assertEquals(0.0, m.subtract(rebuiltMatrix).getNorm(), 1.0e-16);\n     }\n \n }\n--- a/src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java\n+++ b/src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java\n \n     @Test\n     public void testRank() {\n-        Assert.assertEquals(3, generator.getRank());\n+        Assert.assertEquals(2, generator.getRank());\n     }\n \n     @Test", "timestamp": 1347659746, "metainfo": ""}