{"sha": "d740b517d5ecd91b1bcdce96977b57a80823c3fb", "log": "Refactored Frequency to support cummulative frequency counts and percentages. Also eliminated the name property.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n \n import java.io.Serializable;\n import java.util.Iterator;\n-\n-import org.apache.commons.collections.Bag;\n-import org.apache.commons.collections.HashBag;\n+import java.util.Comparator;\n+import java.text.NumberFormat;\n+\n+import org.apache.commons.collections.SortedBag;\n+import org.apache.commons.collections.TreeBag;\n \n /** \n- * Maintains a frequency distribution. <br>\n- * Accepts int, long or string values, converting\n- * all to Strings and maintaining frequency counts.\n+ * Maintains a frequency distribution.\n+ * <p>\n+ * Accepts int, long, char or Object values.  New values added must be comparable to \n+ * those that have been added, otherwise the add method will throw an IllegalArgumentException.\n+ * The values are ordered using the default (natural order), unless a  <code>Comparator</code>\n+ *  is supplied in the constructor.\n  * \n- * @version $Revision: 1.11 $ $Date: 2004/01/29 00:49:01 $\n+ * @version $Revision: 1.12 $ $Date: 2004/02/08 19:51:25 $\n  */\n-public class Frequency implements Serializable{\n-    \n-    /** name for this frequency distribution. */\n-    private String name;\n-\n+public class Frequency implements Serializable {\n+    \n     /** underlying collection */\n-    private Bag freqTable = new HashBag();\n+    private SortedBag freqTable = null;\n \n     /**\n      * Default constructor.\n      */\n     public Frequency() {\n-        this(null);\n-    }\n-\n-    /**\n-     * Construct a frequency distribution with the given name.\n-     * @param name the name for the new distribution.\n-     */\n-    public Frequency(String name) {\n-        super();\n-        setName(name);\n-    }\n-\n-    /**\n-     * Return a string representation of describing this frequency\n+        freqTable = new TreeBag();\n+    }\n+    \n+    /**\n+     * Constructor allowing values Comparator to be specified.\n+     * @param comparator Comparator used to order values\n+     */\n+    public Frequency(Comparator comparator) {\n+    \tfreqTable = new TreeBag(comparator);\n+    }\n+\n+    /**\n+     * Return a string representation of this frequency\n      * distribution.\n      * @return a string representation.\n      */\n     public String toString() {\n+    \tNumberFormat nf = NumberFormat.getPercentInstance();\n         StringBuffer outBuffer = new StringBuffer();\n-        outBuffer.append(\"Value \\t Frequency \\n\");\n+        outBuffer.append(\"Value \\t Freq. \\t Pct. \\t Cum Pct. \\n\");\n         Iterator iter = freqTable.uniqueSet().iterator();\n         while (iter.hasNext()) {\n             Object value = iter.next();\n             outBuffer.append(value);\n             outBuffer.append('\\t');\n-            outBuffer.append(freqTable.getCount(value));\n+            outBuffer.append(getCount(value));\n+            outBuffer.append('\\t');\n+            outBuffer.append(nf.format(getPct(value)));\n+            outBuffer.append('\\t');\n+            outBuffer.append(nf.format(getCumPct(value)));\n             outBuffer.append('\\n');\n         }\n         return outBuffer.toString();\n      * Adds 1 to the frequency count for v\n      * @param v the value to add.\n      */\n-    public void addValue(String v) {\n-        freqTable.add(v);\n+    public void addValue(Object v) {\n+    \ttry {\n+    \t\tfreqTable.add(v);\n+    \t} catch (ClassCastException ex) {\t\n+    \t\t//TreeBag will throw ClassCastException if v is not comparable\n+    \t\tthrow new IllegalArgumentException(\"Value not comparable to existing values.\");\n+    \t}\n     }\n \n     /**\n      * @param v the value to add.\n      */\n     public void addValue(int v) {\n-        addValue((new Integer(v)).toString());\n+        addValue(new Long(v));\n     }\n \n     /**\n      * @param v the value to add.\n      */\n     public void addValue(long v) {\n-        addValue((new Long(v)).toString());\n-    }\n-\n-    /**\n-     * Returns the number of values = v\n-     * @param v the value to lookup.\n-     * @return the absolute frequency of v.\n-     */\n-    public long getCount(String v) {\n-        return freqTable.getCount(v);\n-    }\n-\n-    /**\n-     * Returns the sum of all frequencies\n-     * @return the aggregate frequency.\n-     */\n-    public long getSumFreq() {\n-        return freqTable.size();\n-    }\n-\n-    /**\n-     * Returns the percentage of values = v.\n-     * @param v the value to lookup.\n-     * @return the relative frequency of v.\n-     */\n-    public double getPct(String v) {\n-        return (double) getCount(v) / (double) getSumFreq();        \n-    }\n-\n+        addValue(new Long(v));\n+    }\n+    \n+    /**\n+     * Adds 1 to the frequency count for v.\n+     * @param v the value to add.\n+     */\n+    public void addValue(char v) {\n+    \taddValue(new Character(v));\n+    }\n+    \n     /** Clears the frequency table */\n     public void clear() {\n-        freqTable.clear();\n-    }\n-\n-    /** Getter for property name.\n-     * @return Value of property name.\n-     */\n-    public String getName() {\n-        return name;\n-    }\n-\n-    /** Setter for property name.\n-     * @param name New value of property name.\n-     */\n-    public void setName(java.lang.String name) {\n-        this.name = name;\n-    }\n-\n+    \tfreqTable.clear();\n+    }\n+    \n+    /**\n+     * Returns an Iterator over the set of values that have been added\n+     * @return values Iterator\n+     */\n+    public Iterator valuesIterator() {\n+    \treturn freqTable.uniqueSet().iterator();\n+    }\n+    \n+    //-------------------------------------------------------------------------\n+    \n+    /**\n+     * Returns the sum of all frequencies\n+     * @return the total frequency count.\n+     */\n+    public long getSumFreq() {\n+    \treturn freqTable.size();\n+    }\n+\n+    /**\n+     * Returns the number of values = v\n+     * @param v the value to lookup.\n+     * @return the frequency of v.\n+     */\n+    public long getCount(Object v) {\n+    \tlong result = 0;\n+    \ttry { \n+    \t\tresult = freqTable.getCount(v);\n+    \t} catch (Exception ex) {\n+    \t\t// ignore and return 0 -- ClassCastException will be thrown if value is not comparable\n+    \t}\n+    \treturn result;\n+    }\n+\n+    /**\n+     * Returns the number of values = v\n+     * @param v the value to lookup.\n+     * @return the frequency of v.\n+     */\n+    public long getCount(int v) {\n+    \tlong result = 0;\n+    \ttry { \n+    \t\tresult = freqTable.getCount(new Long(v));\n+    \t} catch (Exception ex) {\n+    \t\t// ignore and return 0 -- ClassCastException will be thrown if value is not comparable\n+    \t}\n+    \treturn result;\n+    }\n+    \n+    /**\n+     * Returns the number of values = v\n+     * @param v the value to lookup.\n+     * @return the frequency of v.\n+     */\n+    public long getCount(long v) {\n+    \tlong result = 0;\n+    \ttry { \n+    \t\tresult = freqTable.getCount(new Long(v));\n+    \t} catch (Exception ex) {\n+    \t\t// ignore and return 0 -- ClassCastException will be thrown if value is not comparable\n+    \t}\n+    \treturn result;\n+    }\n+    \n+    /**\n+     * Returns the number of values = v\n+     * @param v the value to lookup.\n+     * @return the frequency of v.\n+     */\n+    public long getCount(char v) {\n+    \tlong result = 0;\n+    \ttry { \n+    \t\tresult = freqTable.getCount(new Character(v));\n+    \t} catch (Exception ex) {\n+    \t\t// ignore and return 0 -- ClassCastException will be thrown if value is not comparable\n+    \t}\n+    \treturn result;\n+    }\n+    \n+    //-------------------------------------------------------------\n+\n+    /**\n+     * Returns the percentage of values = v (as a proportion -- i.e. between 0 and 1).\n+     * @param v the value to lookup.\n+     * @return the proportion of values equal to v\n+     */\n+    public double getPct(Object v) {\n+    \treturn (double) getCount(v) / (double) getSumFreq();        \n+    }\n+    \n+    /**\n+     * Returns the percentage of values = v (as a proportion -- i.e. between 0 and 1).\n+     * @param v the value to lookup.\n+     * @return the proportion of values equal to v\n+     */\n+    public double getPct(int v) {\n+        return getPct(new Long(v));       \n+    }\n+    \n+    /**\n+     * Returns the percentage of values = v (as a proportion -- i.e. between 0 and 1).\n+     * @param v the value to lookup.\n+     * @return the proportion of values equal to v\n+     */\n+    public double getPct(long v) {\n+    \treturn getPct(new Long(v));         \n+    }\n+    \n+    /**\n+     * Returns the percentage of values = v (as a proportion -- i.e. between 0 and 1).\n+     * @param v the value to lookup.\n+     * @return the proportion of values equal to v\n+     */\n+    public double getPct(char v) {\n+    \treturn getPct(new Character(v));         \n+    }\n+    \n+    //-----------------------------------------------------------------------------------------\n+    \n+    /**\n+     * Returns the cummulative frequency of values less than or equal to v.\n+     * <p>\n+     * Returns 0 if v is not comparable to the values set.\n+     * \n+     * @param v the value to lookup.\n+     * @return the proportion of values equal to v\n+     */\n+    public long getCumFreq(Object v) {\n+    \tlong result = 0;\n+    \ttry {\n+    \t\tresult = freqTable.getCount(v);\n+    \t} catch (ClassCastException ex) {\n+    \t\treturn result;   // v is not comparable\n+    \t}\n+    \tComparable c = (Comparable) v;\n+    \tif (c.compareTo(freqTable.first()) < 0) {\n+    \t\treturn 0;\t// v is comparable, but less than the first value\n+    \t}\n+    \tif (c.compareTo(freqTable.last()) > 0) {\n+    \t\treturn getSumFreq();\t// v is comparable, but greater than the last value\n+    \t}\n+    \tIterator values = valuesIterator();\n+    \twhile (values.hasNext()) {\n+    \t\tObject nextValue = values.next();\n+    \t\tif (c.compareTo(nextValue) > 0) {\n+    \t\t\tresult += getCount(nextValue);\n+    \t\t} else {\n+    \t\t\treturn result;\n+    \t\t}\n+    \t}\n+    \treturn result;\n+    }\n+    \n+     /**\n+     * Returns the cummulative frequency of values less than or equal to v.\n+     * <p>\n+     * Returns 0 if v is not comparable to the values set.\n+     * \n+     * @param v the value to lookup.\n+     * @return the proportion of values equal to v\n+     */\n+    public long getCumFreq(int v) {\n+    \treturn getCumFreq(new Long(v));       \n+    }\n+    \n+     /**\n+     * Returns the cummulative frequency of values less than or equal to v.\n+     * <p>\n+     * Returns 0 if v is not comparable to the values set.\n+     * \n+     * @param v the value to lookup.\n+     * @return the proportion of values equal to v\n+     */\n+    public long getCumFreq(long v) {\n+    \treturn getCumFreq(new Long(v));         \n+    }\n+    \n+    /**\n+     * Returns the cummulative frequency of values less than or equal to v.\n+     * <p>\n+     * Returns 0 if v is not comparable to the values set.\n+     * \n+     * @param v the value to lookup.\n+     * @return the proportion of values equal to v\n+     */\n+    public long getCumFreq(char v) {\n+    \treturn getCumFreq(new Character(v));         \n+    }\n+    \n+    //----------------------------------------------------------------------------------------------\n+    \n+     /**\n+     * Returns the cummulative percentatge of values less than or equal to v\n+     * (as a proportion -- i.e. between 0 and 1).\n+     * <p>\n+     * Returns 0 if v is not comparable to the values set.\n+     * \n+     * @param v the value to lookup.\n+     * @return the proportion of values equal to v\n+     */\n+    public double getCumPct(Object v) {\n+    \treturn (double) getCumFreq(v) / (double) getSumFreq();        \n+    }\n+    \n+    /**\n+     * Returns the cummulative percentatge of values less than or equal to v\n+     * (as a proportion -- i.e. between 0 and 1).\n+     * <p>\n+     * Returns 0 if v is not comparable to the values set.\n+     * \n+     * @param v the value to lookup.\n+     * @return the proportion of values equal to v\n+     */\n+    public double getCumPct(int v) {\n+    \treturn getCumPct(new Long(v));       \n+    }\n+    \n+    /**\n+     * Returns the cummulative percentatge of values less than or equal to v\n+     * (as a proportion -- i.e. between 0 and 1).\n+     * <p>\n+     * Returns 0 if v is not comparable to the values set.\n+     * \n+     * @param v the value to lookup.\n+     * @return the proportion of values equal to v\n+     */\n+    public double getCumPct(long v) {\n+    \treturn getCumPct(new Long(v));         \n+    }\n+    \n+    /**\n+     * Returns the cummulative percentatge of values less than or equal to v\n+     * (as a proportion -- i.e. between 0 and 1).\n+     * <p>\n+     * Returns 0 if v is not comparable to the values set.\n+     * \n+     * @param v the value to lookup.\n+     * @return the proportion of values equal to v\n+     */\n+    public double getCumPct(char v) {\n+    \treturn getCumPct(new Character(v));         \n+    }\n }\n--- a/src/test/org/apache/commons/math/random/RandomDataTest.java\n+++ b/src/test/org/apache/commons/math/random/RandomDataTest.java\n /**\n  * Test cases for the RandomData class.\n  *\n- * @version $Revision: 1.10 $ $Date: 2004/01/29 00:49:03 $\n+ * @version $Revision: 1.11 $ $Date: 2004/02/08 19:51:25 $\n  */\n \n public final class RandomDataTest extends TestCase {\n         }\n         double[] observed = new double[4];\n         for (int i=0; i<4; i++) {\n-            String iString = new Integer(i).toString();\n-            observed[i] = freq.getCount(iString);\n+            observed[i] = freq.getCount(i);\n         } \n         \n         /* Use ChiSquare dist with df = 4-1 = 3, alpha = .001\n         }\n         double[] observed = new double[4];\n         for (int i=0; i<4; i++) {\n-            String iString = new Integer(i).toString();\n-            observed[i] = freq.getCount(iString);\n+            observed[i] = freq.getCount(i);\n         } \n         \n         /* Use ChiSquare dist with df = 4-1 = 3, alpha = .001\n         }\n         double[] observed = new double[4];\n         for (int i=0; i<4; i++) {\n-            String iString = new Integer(i).toString();\n-            observed[i] = freq.getCount(iString);\n+            observed[i] = freq.getCount(i);\n         } \n         \n         /* Use ChiSquare dist with df = 4-1 = 3, alpha = .001\n         }\n         double[] observed = new double[4];\n         for (int i=0; i<4; i++) {\n-            String iString = new Integer(i).toString();\n-            observed[i] = freq.getCount(iString);\n+            observed[i] = freq.getCount(i);\n         } \n         \n         /* Use ChiSquare dist with df = 4-1 = 3, alpha = .001\n                 fail(ex.getMessage());\n             }\n         }\n-        long cumFreq = f.getCount(\"0\") + f.getCount(\"1\") + f.getCount(\"2\") + \n-                        f.getCount(\"3\") + f.getCount(\"4\") + f.getCount(\"5\");\n+        long cumFreq = f.getCount(0) + f.getCount(1) + f.getCount(2) + \n+                        f.getCount(3) + f.getCount(4) + f.getCount(5);\n         long sumFreq = f.getSumFreq();\n         double cumPct = \n             new Double(cumFreq).doubleValue()/new Double(sumFreq).doubleValue();\n--- a/src/test/org/apache/commons/math/stat/FrequencyTest.java\n+++ b/src/test/org/apache/commons/math/stat/FrequencyTest.java\n /**\n  * Test cases for the {@link Frequency} class.\n  *\n- * @version $Revision: 1.8 $ $Date: 2004/01/29 00:49:00 $\n+ * @version $Revision: 1.9 $ $Date: 2004/02/08 19:51:25 $\n  */\n \n public final class FrequencyTest extends TestCase {\n     private long oneL = 1;\n     private long twoL = 2;\n+    private long threeL = 3;\n     private int oneI = 1;\n     private int twoI = 2;\n+    private int threeI=3;\n     private String oneS = \"1\";\n     private String twoS = \"2\";\n     private double tolerance = 10E-15;\n+    private Frequency f = null;\n     \n     public FrequencyTest(String name) {\n         super(name);\n     }\n     \n     public void setUp() {  \n+    \tf = new Frequency();\n     }\n     \n     public static Test suite() {\n     \n     /** test freq counts */\n     public void testCounts() {\n-        Frequency f = new Frequency(\"test counts\"); \n         assertEquals(\"total count\",0,f.getSumFreq());\n         f.addValue(oneL);\n         f.addValue(twoL);\n-        f.addValue(oneS);\n+        f.addValue(1);\n         f.addValue(oneI);\n-        assertEquals(\"one frequency count\",3,f.getCount(\"1\"));\n-        assertEquals(\"two frequency count\",1,f.getCount(\"2\"));\n-        assertEquals(\"foo frequency count\",0,f.getCount(\"foo\"));\n+        assertEquals(\"one frequency count\",3,f.getCount(1));\n+        assertEquals(\"two frequency count\",1,f.getCount(2));\n+        assertEquals(\"three frequency count\",0,f.getCount(3));\n         assertEquals(\"total count\",4,f.getSumFreq());\n+        assertEquals(\"zero cummulative frequency\", 0, f.getCumFreq(0));\n+        assertEquals(\"one cummulative frequency\", 3,  f.getCumFreq(1));\n+        assertEquals(\"two cummulative frequency\", 4,  f.getCumFreq(2));\n+        assertEquals(\"two cummulative frequency\", 4,  f.getCumFreq(5));\n+        assertEquals(\"two cummulative frequency\", 0,  f.getCumFreq(\"foo\"));\n         f.clear();\n         assertEquals(\"total count\",0,f.getSumFreq());\n     }     \n     \n     /** test pcts */\n     public void testPcts() {\n-        Frequency f = new Frequency(\"test pcts\"); \n         f.addValue(oneL);\n         f.addValue(twoL);\n         f.addValue(oneI);\n         f.addValue(twoI);\n-        f.addValue(\"foo\");\n-        f.addValue(\"foo\");\n-        f.addValue(\"foo\");\n-        f.addValue(\"foo\");\n-        assertEquals(\"one pct\",0.25,f.getPct(\"1\"),tolerance);\n-        assertEquals(\"two pct\",0.25,f.getPct(\"2\"),tolerance);\n-        assertEquals(\"foo pct\",0.5,f.getPct(\"foo\"),tolerance);\n-        assertEquals(\"bar pct\",0,f.getPct(\"bar\"),tolerance);\n+        f.addValue(threeL);\n+        f.addValue(threeL);\n+        f.addValue(3);\n+        f.addValue(threeI);\n+        assertEquals(\"one pct\",0.25,f.getPct(1),tolerance);\n+        assertEquals(\"two pct\",0.25,f.getPct(new Long(2)),tolerance);\n+        assertEquals(\"three pct\",0.5,f.getPct(threeL),tolerance);\n+        assertEquals(\"five pct\",0,f.getPct(5),tolerance);\n+        assertEquals(\"foo pct\",0,f.getPct(\"foo\"),tolerance);\n+        assertEquals(\"one cum pct\",0.25,f.getCumPct(1),tolerance);\n+        assertEquals(\"two cum pct\",0.50,f.getCumPct(new Long(2)),tolerance);\n+        assertEquals(\"three cum pct\",1.0,f.getCumPct(threeL),tolerance);\n+        assertEquals(\"five cum pct\",1.0,f.getCumPct(5),tolerance);\n+        assertEquals(\"zero cum pct\",0.0,f.getCumPct(0),tolerance);\n+        assertEquals(\"foo cum pct\",0,f.getCumPct(\"foo\"),tolerance);\n+    }\n+    \n+    /** test adding incomparable values */\n+    public void testAdd() {\n+    \tchar aChar = 'a';\n+    \tchar bChar = 'b';\n+    \tString aString = \"a\";\n+    \tf.addValue(aChar);\n+    \tf.addValue(bChar);\n+    \ttry {\n+    \t\tf.addValue(aString); \t\n+    \t\tfail(\"Expecting IllegalArgumentException\");\n+    \t} catch (IllegalArgumentException ex) {\n+    \t\t// expected\n+    \t}\n+    \tassertEquals(\"a pct\",0.5,f.getPct(aChar),tolerance);\n+    \tassertEquals(\"b cum pct\",1.0,f.getCumPct(bChar),tolerance);\n+    \tassertEquals(\"a string pct\",0.0,f.getPct(aString),tolerance);\n+    \tassertEquals(\"a string cum pct\",0.0,f.getCumPct(aString),tolerance);\n     }\n     \n     /**\n-     * \n+     * Tests toString() \n      */\n     public void testToString(){\n-        Frequency f = new Frequency(\"test toString\"); \n         f.addValue(oneL);\n         f.addValue(twoL);\n         f.addValue(oneI);\n         f.addValue(twoI);\n         \n         String s = f.toString();\n+        //System.out.println(s);\n         assertNotNull(s);\n         BufferedReader reader = new BufferedReader(new StringReader(s));\n         try {\n             fail(ex.getMessage());\n         }        \n     }\n-    \n-    /**\n-     * \n-     */\n-    public void testSetName(){\n-        String name = \"name\";\n-        Frequency f = new Frequency();\n-        f.setName(name);\n-        assertEquals(name, f.getName());\n-    }              \n }\n ", "timestamp": 1076269885, "metainfo": ""}