{"sha": "074e86632cb788a54843078ba632f6be25c7fd84", "log": "added a configurable value for missing entries in OpenIntToDoubleHashMap  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/SparseRealMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/SparseRealMatrix.java\n         super(rowDimension, columnDimension);\n         this.rowDimension = rowDimension;\n         this.columnDimension = columnDimension;\n-        this.entries = new OpenIntToDoubleHashMap();\n+        this.entries = new OpenIntToDoubleHashMap(0.0);\n     }\n   \n     /**\n--- a/src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java\n+++ b/src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java\n     /** States table. */\n     private byte[] states;\n \n+    /** Return value for missing entries. */\n+    private final double missingEntries;\n+\n     /** Current size of the map. */\n     private int size;\n \n     private transient int count;\n \n     /**\n-     * Build an empty map with default size.\n+     * Build an empty map with default size and using NaN for missing entries.\n      */\n     public OpenIntToDoubleHashMap() {\n-        this(DEFAULT_EXPECTED_SIZE);\n+        this(DEFAULT_EXPECTED_SIZE, Double.NaN);\n+    }\n+\n+    /**\n+     * Build an empty map with default size\n+     * @param missingEntries value to return when a missing entry is fetched\n+     */\n+    public OpenIntToDoubleHashMap(final double missingEntries) {\n+        this(DEFAULT_EXPECTED_SIZE, missingEntries);\n+    }\n+\n+    /**\n+     * Build an empty map with specified size and using NaN for missing entries.\n+     * @param expectedSize expected number of elements in the map\n+     */\n+    public OpenIntToDoubleHashMap(final int expectedSize) {\n+        this(expectedSize, Double.NaN);\n     }\n \n     /**\n      * Build an empty map with specified size.\n      * @param expectedSize expected number of elements in the map\n-     */\n-    public OpenIntToDoubleHashMap(final int expectedSize) {\n+     * @param missingEntries value to return when a missing entry is fetched\n+     */\n+    public OpenIntToDoubleHashMap(final int expectedSize,\n+                                  final double missingEntries) {\n         final int capacity = computeCapacity(expectedSize);\n         keys   = new int[capacity];\n         values = new double[capacity];\n         states = new byte[capacity];\n+        this.missingEntries = missingEntries;\n         mask   = capacity - 1;\n     }\n \n         System.arraycopy(source.values, 0, values, 0, length);\n         states = new byte[length];\n         System.arraycopy(source.states, 0, states, 0, length);\n+        missingEntries = source.missingEntries;\n         size  = source.size;\n         mask  = source.mask;\n         count = source.count;\n         }\n \n         if (states[index] == FREE) {\n-            return 0.0;\n+            return missingEntries;\n         }\n \n         for (int perturb = perturb(hash), j = index; states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n             }\n         }\n \n-        return 0.0;\n+        return missingEntries;\n \n     }\n \n         }\n \n         if (states[index] == FREE) {\n-            return 0.0;\n+            return missingEntries;\n         }\n \n         for (int perturb = perturb(hash), j = index; states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n             }\n         }\n \n-        return 0.0;\n+        return missingEntries;\n \n     }\n \n         keys[index]   = 0;\n         states[index] = REMOVED;\n         final double previous = values[index];\n-        values[index] = 0;\n+        values[index] = missingEntries;\n         --size;\n         ++count;\n         return previous;\n      */\n     public double put(final int key, final double value) {\n         int index = findInsertionIndex(key);\n-        double previous = 0.0;\n+        double previous = missingEntries;\n         boolean newMapping = true;\n         if (index < 0) {\n             index = changeIndexSign(index);\n--- a/src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java\n+++ b/src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java\n         OpenIntToDoubleHashMap map = createFromJavaMap();\n         \n         for (Map.Entry<Integer, Double> mapEntry : generated.entrySet())\n-            assertEquals(0.0, map.get(mapEntry.getKey()));\n+            assertTrue(Double.isNaN(map.get(mapEntry.getKey())));\n     }\n \n     public void testGetFromEmpty() {\n         OpenIntToDoubleHashMap map = new OpenIntToDoubleHashMap();\n-        assertEquals(0.0, map.get(5));\n-        assertEquals(0.0, map.get(0));\n-        assertEquals(0.0, map.get(50));\n+        assertTrue(Double.isNaN(map.get(5)));\n+        assertTrue(Double.isNaN(map.get(0)));\n+        assertTrue(Double.isNaN(map.get(50)));\n     }\n \n     public void testRemove() {\n         for (Map.Entry<Integer, Double> mapEntry : javaMap.entrySet()) {\n             map.remove(mapEntry.getKey());\n             assertEquals(--mapSize, map.size());\n-            assertEquals(0.0, map.get(mapEntry.getKey()));\n+            assertTrue(Double.isNaN(map.get(mapEntry.getKey())));\n         }\n \n         /* Ensure that put and get still work correctly after removals */\n             keysInMap.remove(mapEntry.getKey());\n             map.remove(mapEntry.getKey());\n             assertEquals(--mapSize, map.size());\n-            assertEquals(0.0, map.get(mapEntry.getKey()));\n+            assertTrue(Double.isNaN(map.get(mapEntry.getKey())));\n             if (count++ > 5)\n                 break;\n         }\n \n     public void testRemoveFromEmpty() {\n         OpenIntToDoubleHashMap map = new OpenIntToDoubleHashMap();\n-        assertEquals(0.0, map.remove(50));\n+        assertTrue(Double.isNaN(map.remove(50)));\n     }\n \n     public void testRemoveAbsent() {\n         for (Map.Entry<Integer, Double> mapEntry : generated.entrySet()) {\n             map.remove(mapEntry.getKey());\n             assertEquals(mapSize, map.size());\n-            assertEquals(0.0, map.get(mapEntry.getKey()));\n+            assertTrue(Double.isNaN(map.get(mapEntry.getKey())));\n         }\n     }\n ", "timestamp": 1230918824, "metainfo": ""}