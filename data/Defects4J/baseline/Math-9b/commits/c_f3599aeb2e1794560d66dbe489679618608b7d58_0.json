{"sha": "f3599aeb2e1794560d66dbe489679618608b7d58", "log": "Populated throws clause of OpenMapRealMatrix (MATH-854).  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java\n         throws OutOfRangeException;\n \n     /** {@inheritDoc} */\n-    public abstract void setEntry(int row, int column, double value);\n+    public abstract void setEntry(int row, int column, double value)\n+        throws OutOfRangeException;\n }\n--- a/src/main/java/org/apache/commons/math3/linear/OpenMapRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math3/linear/OpenMapRealMatrix.java\n \n import java.io.Serializable;\n \n+import org.apache.commons.math3.exception.DimensionMismatchException;\n+import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n import org.apache.commons.math3.exception.NumberIsTooLargeException;\n+import org.apache.commons.math3.exception.OutOfRangeException;\n import org.apache.commons.math3.util.OpenIntToDoubleHashMap;\n \n /**\n      *\n      * @param rowDimension Number of rows of the matrix.\n      * @param columnDimension Number of columns of the matrix.\n-     */\n-    public OpenMapRealMatrix(int rowDimension, int columnDimension) {\n+     * @throws NotStrictlyPositiveException if row or column dimension is not\n+     * positive.\n+     * @throws NumberIsTooLargeException if the total number of entries of the\n+     * matrix is larger than {@code Integer.MAX_VALUE}.\n+     */\n+    public OpenMapRealMatrix(int rowDimension, int columnDimension)\n+        throws NotStrictlyPositiveException, NumberIsTooLargeException {\n         super(rowDimension, columnDimension);\n         long lRow = rowDimension;\n         long lCol = columnDimension;\n         return new OpenMapRealMatrix(this);\n     }\n \n-    /** {@inheritDoc} */\n-    @Override\n-    public OpenMapRealMatrix createMatrix(int rowDimension, int columnDimension) {\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @throws NumberIsTooLargeException if the total number of entries of the\n+     * matrix is larger than {@code Integer.MAX_VALUE}.\n+     */\n+    @Override\n+    public OpenMapRealMatrix createMatrix(int rowDimension, int columnDimension)\n+        throws NotStrictlyPositiveException, NumberIsTooLargeException {\n         return new OpenMapRealMatrix(rowDimension, columnDimension);\n     }\n \n      *\n      * @param m Matrix to be added.\n      * @return {@code this} + {@code m}.\n-     * @throws org.apache.commons.math3.exception.DimensionMismatchException\n-     * if {@code m} is not the same size as this matrix.\n-     */\n-    public OpenMapRealMatrix add(OpenMapRealMatrix m) {\n-\n-        // safety check\n+     * @throws MatrixDimensionMismatchException if {@code m} is not the same\n+     * size as {@code this}.\n+     */\n+    public OpenMapRealMatrix add(OpenMapRealMatrix m)\n+        throws MatrixDimensionMismatchException {\n+\n         MatrixUtils.checkAdditionCompatible(this, m);\n \n         final OpenMapRealMatrix out = new OpenMapRealMatrix(this);\n \n     /** {@inheritDoc} */\n     @Override\n-    public OpenMapRealMatrix subtract(final RealMatrix m) {\n+    public OpenMapRealMatrix subtract(final RealMatrix m)\n+        throws MatrixDimensionMismatchException {\n         try {\n             return subtract((OpenMapRealMatrix) m);\n         } catch (ClassCastException cce) {\n      *\n      * @param m Matrix to be subtracted.\n      * @return {@code this} - {@code m}.\n-     * @throws org.apache.commons.math3.exception.DimensionMismatchException\n-     * if {@code m} is not the same size as this matrix.\n-     */\n-    public OpenMapRealMatrix subtract(OpenMapRealMatrix m) {\n-        // Safety check.\n+     * @throws MatrixDimensionMismatchException if {@code m} is not the same\n+     * size as {@code this}.\n+     */\n+    public OpenMapRealMatrix subtract(OpenMapRealMatrix m)\n+        throws MatrixDimensionMismatchException {\n         MatrixUtils.checkAdditionCompatible(this, m);\n \n         final OpenMapRealMatrix out = new OpenMapRealMatrix(this);\n         return out;\n     }\n \n-    /** {@inheritDoc} */\n-    @Override\n-    public RealMatrix multiply(final RealMatrix m) {\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @throws NumberIsTooLargeException if {@code m} is an\n+     * {@code OpenMapRealMatrix}, and the total number of entries of the product\n+     * is larger than {@code Integer.MAX_VALUE}.\n+     */\n+    @Override\n+    public RealMatrix multiply(final RealMatrix m)\n+        throws DimensionMismatchException, NumberIsTooLargeException {\n         try {\n             return multiply((OpenMapRealMatrix) m);\n         } catch (ClassCastException cce) {\n \n-            // safety check\n             MatrixUtils.checkMultiplicationCompatible(this, m);\n \n             final int outCols = m.getColumnDimension();\n      *\n      * @param m Matrix to postmultiply by.\n      * @return {@code this} * {@code m}.\n-     * @throws MatrixDimensionMismatchException\n-     * if the number of rows of {@code m} differ from the number of columns\n-     * of this matrix.\n-     */\n-    public OpenMapRealMatrix multiply(OpenMapRealMatrix m) {\n+     * @throws DimensionMismatchException if the number of rows of {@code m}\n+     * differ from the number of columns of {@code this} matrix.\n+     * @throws NumberIsTooLargeException if the total number of entries of the\n+     * product is larger than {@code Integer.MAX_VALUE}.\n+     */\n+    public OpenMapRealMatrix multiply(OpenMapRealMatrix m)\n+        throws DimensionMismatchException, NumberIsTooLargeException {\n         // Safety check.\n         MatrixUtils.checkMultiplicationCompatible(this, m);\n \n \n     /** {@inheritDoc} */\n     @Override\n-    public double getEntry(int row, int column) {\n+    public double getEntry(int row, int column) throws OutOfRangeException {\n         MatrixUtils.checkRowIndex(this, row);\n         MatrixUtils.checkColumnIndex(this, column);\n         return entries.get(computeKey(row, column));\n \n     /** {@inheritDoc} */\n     @Override\n-    public void setEntry(int row, int column, double value) {\n+    public void setEntry(int row, int column, double value)\n+        throws OutOfRangeException {\n         MatrixUtils.checkRowIndex(this, row);\n         MatrixUtils.checkColumnIndex(this, column);\n         if (value == 0.0) {\n \n     /** {@inheritDoc} */\n     @Override\n-    public void addToEntry(int row, int column, double increment) {\n+    public void addToEntry(int row, int column, double increment)\n+        throws OutOfRangeException {\n         MatrixUtils.checkRowIndex(this, row);\n         MatrixUtils.checkColumnIndex(this, column);\n         final int key = computeKey(row, column);\n \n     /** {@inheritDoc} */\n     @Override\n-    public void multiplyEntry(int row, int column, double factor) {\n+    public void multiplyEntry(int row, int column, double factor)\n+        throws OutOfRangeException {\n         MatrixUtils.checkRowIndex(this, row);\n         MatrixUtils.checkColumnIndex(this, column);\n         final int key = computeKey(row, column);", "timestamp": 1348722250, "metainfo": ""}