{"sha": "986597f52ce9c6c1ff13fb134b91696de6ec2796", "log": "Moved \"Localizable\", \"DummyLocalizable\" and \"LocalizedFormats\" from package \"exception\" to package \"exception.util\". Modified \"import\" statements in all affected files.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/ConvergenceException.java\n+++ b/src/main/java/org/apache/commons/math/ConvergenceException.java\n  */\n package org.apache.commons.math;\n \n-import org.apache.commons.math.exception.DummyLocalizable;\n-import org.apache.commons.math.exception.Localizable;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.DummyLocalizable;\n+import org.apache.commons.math.exception.util.Localizable;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Error thrown when a numerical computation can not be performed because the\n--- a/src/main/java/org/apache/commons/math/DimensionMismatchException.java\n+++ b/src/main/java/org/apache/commons/math/DimensionMismatchException.java\n  */\n package org.apache.commons.math;\n \n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Error thrown when two dimensions differ.\n--- a/src/main/java/org/apache/commons/math/DuplicateSampleAbscissaException.java\n+++ b/src/main/java/org/apache/commons/math/DuplicateSampleAbscissaException.java\n  */\n package org.apache.commons.math;\n \n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Exception thrown when a sample contains several entries at the same abscissa.\n--- a/src/main/java/org/apache/commons/math/FunctionEvaluationException.java\n+++ b/src/main/java/org/apache/commons/math/FunctionEvaluationException.java\n  */\n package org.apache.commons.math;\n \n-import org.apache.commons.math.exception.DummyLocalizable;\n-import org.apache.commons.math.exception.Localizable;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.DummyLocalizable;\n+import org.apache.commons.math.exception.util.Localizable;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.linear.ArrayRealVector;\n \n /**\n--- a/src/main/java/org/apache/commons/math/MathConfigurationException.java\n+++ b/src/main/java/org/apache/commons/math/MathConfigurationException.java\n \n import java.io.Serializable;\n \n-import org.apache.commons.math.exception.DummyLocalizable;\n-import org.apache.commons.math.exception.Localizable;\n+import org.apache.commons.math.exception.util.DummyLocalizable;\n+import org.apache.commons.math.exception.util.Localizable;\n \n /**\n  * Signals a configuration problem with any of the factory methods.\n--- a/src/main/java/org/apache/commons/math/MathException.java\n+++ b/src/main/java/org/apache/commons/math/MathException.java\n import java.text.MessageFormat;\n import java.util.Locale;\n \n-import org.apache.commons.math.exception.DummyLocalizable;\n-import org.apache.commons.math.exception.Localizable;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.DummyLocalizable;\n+import org.apache.commons.math.exception.util.Localizable;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n \n /**\n--- a/src/main/java/org/apache/commons/math/MathRuntimeException.java\n+++ b/src/main/java/org/apache/commons/math/MathRuntimeException.java\n import java.util.Locale;\n import java.util.NoSuchElementException;\n \n-import org.apache.commons.math.exception.DummyLocalizable;\n-import org.apache.commons.math.exception.Localizable;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.DummyLocalizable;\n+import org.apache.commons.math.exception.util.Localizable;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n * Base class for commons-math unchecked exceptions.\n--- a/src/main/java/org/apache/commons/math/MaxEvaluationsExceededException.java\n+++ b/src/main/java/org/apache/commons/math/MaxEvaluationsExceededException.java\n package org.apache.commons.math;\n \n import org.apache.commons.math.ConvergenceException;\n-import org.apache.commons.math.exception.DummyLocalizable;\n-import org.apache.commons.math.exception.Localizable;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.DummyLocalizable;\n+import org.apache.commons.math.exception.util.Localizable;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Error thrown when a numerical computation exceeds its allowed\n--- a/src/main/java/org/apache/commons/math/MaxIterationsExceededException.java\n+++ b/src/main/java/org/apache/commons/math/MaxIterationsExceededException.java\n package org.apache.commons.math;\n \n import org.apache.commons.math.ConvergenceException;\n-import org.apache.commons.math.exception.DummyLocalizable;\n-import org.apache.commons.math.exception.Localizable;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.DummyLocalizable;\n+import org.apache.commons.math.exception.util.Localizable;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Error thrown when a numerical computation exceeds its allowed\n--- a/src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.MaxIterationsExceededException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Implements the <a href=\"http://mathworld.wolfram.com/Legendre-GaussQuadrature.html\">\n--- a/src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.MaxIterationsExceededException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Implements the <a href=\"http://mathworld.wolfram.com/RombergIntegration.html\">\n--- a/src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.MaxIterationsExceededException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Implements the <a href=\"http://mathworld.wolfram.com/SimpsonsRule.html\">\n--- a/src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.MaxIterationsExceededException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Implements the <a href=\"http://mathworld.wolfram.com/TrapezoidalRule.html\">\n--- a/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java\n import org.apache.commons.math.ConvergingAlgorithmImpl;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.exception.NullArgumentException;\n \n /**\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java\n package org.apache.commons.math.analysis.interpolation;\n \n import org.apache.commons.math.exception.DimensionMismatchException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.analysis.polynomials.PolynomialFunction;\n import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java\n \n import org.apache.commons.math.MathException;\n import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;\n-import org.apache.commons.math.exception.Localizable;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.Localizable;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Implements the <a href=\"http://en.wikipedia.org/wiki/Local_regression\">\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java\n import org.apache.commons.math.util.MathUtils.OrderDirection;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Generates a bicubic interpolation function.\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java\n package org.apache.commons.math.analysis.interpolation;\n \n import org.apache.commons.math.exception.DimensionMismatchException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.analysis.polynomials.PolynomialFunction;\n import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;\n--- a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java\n import java.io.Serializable;\n import java.util.Arrays;\n \n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.exception.NoDataException;\n import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n--- a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java\n+++ b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Implements the representation of a real polynomial function in\n--- a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java\n+++ b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Implements the representation of a real polynomial function in\n--- a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Represents a polynomial spline function.\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.MaxIterationsExceededException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Implements the <a href=\"http://mathworld.wolfram.com/BrentsMethod.html\">\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.analysis.polynomials.PolynomialFunction;\n import org.apache.commons.math.complex.Complex;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Implements the <a href=\"http://mathworld.wolfram.com/LaguerresMethod.html\">\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java\n import org.apache.commons.math.MaxIterationsExceededException;\n import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Implements <a href=\"http://mathworld.wolfram.com/NewtonsMethod.html\">\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.MaxIterationsExceededException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n \n /**\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.exception.NullArgumentException;\n \n /**\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.exception.NullArgumentException;\n \n /**\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n \n import org.apache.commons.math.FieldElement;\n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.MathUtils;\n \n /**\n--- a/src/main/java/org/apache/commons/math/complex/ComplexFormat.java\n+++ b/src/main/java/org/apache/commons/math/complex/ComplexFormat.java\n import java.util.Locale;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.CompositeFormat;\n import org.apache.commons.math.exception.NullArgumentException;\n \n--- a/src/main/java/org/apache/commons/math/complex/ComplexUtils.java\n+++ b/src/main/java/org/apache/commons/math/complex/ComplexUtils.java\n package org.apache.commons.math.complex;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Static implementations of common\n--- a/src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.analysis.solvers.BrentSolver;\n import org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.random.RandomDataImpl;\n \n /**\n--- a/src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java\n \n import org.apache.commons.math.MathException;\n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Base class for probability distributions.\n--- a/src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.MathException;\n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.random.RandomDataImpl;\n \n \n--- a/src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java\n \n import org.apache.commons.math.MathException;\n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.special.Gamma;\n import org.apache.commons.math.special.Beta;\n \n--- a/src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n \n import org.apache.commons.math.MathException;\n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.special.Beta;\n \n /**\n--- a/src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java\n import java.io.Serializable;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Default implementation of\n--- a/src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n \n import org.apache.commons.math.MathException;\n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * The default implementation of {@link ExponentialDistribution}.\n--- a/src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java\n \n import org.apache.commons.math.MathException;\n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.special.Beta;\n \n /**\n--- a/src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n \n import org.apache.commons.math.MathException;\n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.special.Gamma;\n \n /**\n--- a/src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java\n import java.io.Serializable;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.MathUtils;\n \n /**\n--- a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n import org.apache.commons.math.MathException;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.MaxIterationsExceededException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.special.Erf;\n \n /**\n--- a/src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java\n \n import org.apache.commons.math.MathException;\n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.special.Beta;\n import org.apache.commons.math.util.MathUtils;\n \n--- a/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\n \n import org.apache.commons.math.MathException;\n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.special.Gamma;\n import org.apache.commons.math.util.MathUtils;\n \n--- a/src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java\n \n import org.apache.commons.math.MathException;\n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.special.Beta;\n import org.apache.commons.math.special.Gamma;\n \n--- a/src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java\n import java.io.Serializable;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Default implementation of\n--- a/src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java\n import java.io.Serializable;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Implementation for the {@link ZipfDistribution}.\n--- a/src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java\n+++ b/src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java\n \n import java.util.Arrays;\n \n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.linear.InvalidMatrixException;\n import org.apache.commons.math.linear.LUDecompositionImpl;\n import org.apache.commons.math.linear.MatrixUtils;\n--- a/src/main/java/org/apache/commons/math/estimation/EstimationException.java\n+++ b/src/main/java/org/apache/commons/math/estimation/EstimationException.java\n package org.apache.commons.math.estimation;\n \n import org.apache.commons.math.MathException;\n-import org.apache.commons.math.exception.DummyLocalizable;\n-import org.apache.commons.math.exception.Localizable;\n+import org.apache.commons.math.exception.util.DummyLocalizable;\n+import org.apache.commons.math.exception.util.Localizable;\n \n /**\n  * This class represents exceptions thrown by the estimation solvers.\n--- a/src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java\n+++ b/src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java\n \n import java.io.Serializable;\n \n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.linear.InvalidMatrixException;\n import org.apache.commons.math.linear.LUDecompositionImpl;\n import org.apache.commons.math.linear.MatrixUtils;\n--- a/src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java\n+++ b/src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java\n import java.io.Serializable;\n import java.util.Arrays;\n \n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n \n /**\n--- a/src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java\n+++ b/src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java\n  */\n package org.apache.commons.math.exception;\n \n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Exception to be thrown when two dimensions differ.\n--- a/src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java\n \n import org.apache.commons.math.exception.util.ArgUtils;\n import org.apache.commons.math.exception.util.MessageFactory;\n+import org.apache.commons.math.exception.util.Localizable;\n \n /**\n  * Base class for all preconditions violation exceptions.\n--- a/src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java\n  */\n package org.apache.commons.math.exception;\n \n+import org.apache.commons.math.exception.util.Localizable;\n \n /**\n  * Base class for exceptions raised by a wrong number.\n--- a/src/main/java/org/apache/commons/math/exception/MathUnsupportedOperationException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathUnsupportedOperationException.java\n \n import org.apache.commons.math.exception.util.ArgUtils;\n import org.apache.commons.math.exception.util.MessageFactory;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.Localizable;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Base class for all unsupported features.\n--- a/src/main/java/org/apache/commons/math/exception/NoDataException.java\n+++ b/src/main/java/org/apache/commons/math/exception/NoDataException.java\n  */\n package org.apache.commons.math.exception;\n \n+import org.apache.commons.math.exception.util.Localizable;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Exception to be thrown when the required data is missing.\n--- a/src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java\n+++ b/src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java\n package org.apache.commons.math.exception;\n \n import org.apache.commons.math.util.MathUtils;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Exception to be thrown when the a sequence of values is not monotonously\n--- a/src/main/java/org/apache/commons/math/exception/NotPositiveException.java\n+++ b/src/main/java/org/apache/commons/math/exception/NotPositiveException.java\n  */\n package org.apache.commons.math.exception;\n \n+import org.apache.commons.math.exception.util.Localizable;\n \n /**\n  * Exception to be thrown when the argument is negative.\n--- a/src/main/java/org/apache/commons/math/exception/NotStrictlyPositiveException.java\n+++ b/src/main/java/org/apache/commons/math/exception/NotStrictlyPositiveException.java\n  */\n package org.apache.commons.math.exception;\n \n+import org.apache.commons.math.exception.util.Localizable;\n \n /**\n  * Exception to be thrown when the argument is negative.\n--- a/src/main/java/org/apache/commons/math/exception/NullArgumentException.java\n+++ b/src/main/java/org/apache/commons/math/exception/NullArgumentException.java\n  * limitations under the License.\n  */\n package org.apache.commons.math.exception;\n+\n+import org.apache.commons.math.exception.util.Localizable;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * All conditions checks that fail due to a {@code null} argument must throw\n--- a/src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java\n+++ b/src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java\n  */\n package org.apache.commons.math.exception;\n \n+import org.apache.commons.math.exception.util.Localizable;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Exception to be thrown when a number is too large.\n--- a/src/main/java/org/apache/commons/math/exception/NumberIsTooSmallException.java\n+++ b/src/main/java/org/apache/commons/math/exception/NumberIsTooSmallException.java\n  */\n package org.apache.commons.math.exception;\n \n+import org.apache.commons.math.exception.util.Localizable;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Exception to be thrown when a number is too small.\n--- a/src/main/java/org/apache/commons/math/exception/OutOfRangeException.java\n+++ b/src/main/java/org/apache/commons/math/exception/OutOfRangeException.java\n  */\n package org.apache.commons.math.exception;\n \n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Exception to be thrown when some argument is out of range.\n--- a/src/main/java/org/apache/commons/math/exception/ZeroException.java\n+++ b/src/main/java/org/apache/commons/math/exception/ZeroException.java\n  */\n package org.apache.commons.math.exception;\n \n+import org.apache.commons.math.exception.util.Localizable;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Exception to be thrown when zero is provided where it is not allowed.\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/exception/util/DummyLocalizable.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.exception.util;\n+\n+import java.util.Locale;\n+\n+/**\n+ * Dummy implementation of the {@link Localizable} interface, without localization.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 2.2\n+ */\n+public class DummyLocalizable implements Localizable {\n+\n+    /** Serializable version identifier. */\n+    private static final long serialVersionUID = 8843275624471387299L;\n+\n+    /** Source string. */\n+    private final String source;\n+\n+    /** Simple constructor.\n+     * @param source source text\n+     */\n+    public DummyLocalizable(final String source) {\n+        this.source = source;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public String getSourceString() {\n+        return source;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public String getLocalizedString(Locale locale) {\n+        return source;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public String toString() {\n+        return source;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/exception/util/Localizable.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.exception.util;\n+\n+import java.io.Serializable;\n+import java.util.Locale;\n+\n+/**\n+ * Interface for localizable strings.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 2.2\n+ */\n+public interface Localizable extends Serializable {\n+\n+    /**\n+     * Get the source (non-localized) string.\n+     * @return source string\n+     */\n+    String getSourceString();\n+\n+    /**\n+     * Get the localized string.\n+     * @param locale locale into which to get the string\n+     * @return localized string or the source string if no localized version is available\n+     */\n+    String getLocalizedString(Locale locale);\n+\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.exception.util;\n+\n+import java.util.Locale;\n+import java.util.MissingResourceException;\n+import java.util.ResourceBundle;\n+\n+/**\n+ * Enumeration for localized messages formats used in exceptions messages.\n+ * <p>\n+ * The constants in this enumeration represent the available\n+ * formats as localized strings. These formats are intended to be\n+ * localized using simple properties files, using the constant\n+ * name as the key and the property value as the message format.\n+ * The source English format is provided in the constants themselves\n+ * to serve both as a reminder for developers to understand the parameters\n+ * needed by each format, as a basis for translators to create\n+ * localized properties files, and as a default format if some\n+ * translation is missing.\n+ * </p>\n+ * @since 2.1\n+ * @version $Revision$ $Date$\n+ */\n+public enum LocalizedFormats implements Localizable {\n+\n+    // CHECKSTYLE: stop MultipleVariableDeclarations\n+    // CHECKSTYLE: stop JavadocVariable\n+\n+    ARGUMENT_OUTSIDE_DOMAIN(\"Argument {0} outside domain [{1} ; {2}]\"),\n+    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(\"array sizes should have difference 1 ({0} != {1} + 1)\"),\n+    ARRAY_SUMS_TO_ZERO(\"array sums to zero\"),\n+    ASSYMETRIC_EIGEN_NOT_SUPPORTED(\"eigen decomposition of assymetric matrices not supported yet\"),\n+    AT_LEAST_ONE_COLUMN(\"matrix must have at least one column\"),\n+    AT_LEAST_ONE_ROW(\"matrix must have at least one row\"),\n+    BANDWIDTH_OUT_OF_INTERVAL(\"bandwidth must be in the interval [0,1], but got {0}\"),\n+    BINOMIAL_INVALID_PARAMETERS_ORDER(\"must have n >= k for binomial coefficient (n,k), got n = {0}, k = {1}\"),\n+    BINOMIAL_NEGATIVE_PARAMETER(\"must have n >= 0 for binomial coefficient (n,k), got n = {0}\"),\n+    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(\"statistics constructed from external moments cannot be cleared\"),\n+    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(\"cannot compute 0-th root of unity, indefinite result\"),\n+    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(\"cannot compute beta density at 0 when alpha = {0,number}\"),\n+    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(\"cannot compute beta density at 1 when beta = %.3g\"),\n+    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(\"cannot compute nth root for null or negative n: {0}\"),\n+    CANNOT_CONVERT_OBJECT_TO_FRACTION(\"cannot convert given object to a fraction number: {0}\"),\n+    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(\"cannot discard a negative number of elements ({0})\"),\n+    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(\"cannot format a {0} instance as a 3D vector\"),\n+    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(\"cannot format a {0} instance as a complex number\"),\n+    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(\"cannot format a {0} instance as a real vector\"),\n+    CANNOT_FORMAT_OBJECT_TO_FRACTION(\"cannot format given object as a fraction number\"),\n+    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(\"statistics constructed from external moments cannot be incremented\"),\n+    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(\"cannot normalize a zero norm vector\"),\n+    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(\"elements cannot be retrieved from a negative array index {0}\"),\n+    CANNOT_SET_AT_NEGATIVE_INDEX(\"cannot set an element at a negative index {0}\"),\n+    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(\"cannot substitute an element from an empty array\"),\n+    CANNOT_TRANSFORM_TO_DOUBLE(\"Conversion Exception in Transformation: {0}\"),\n+    CARDAN_ANGLES_SINGULARITY(\"Cardan angles singularity\"),\n+    CLASS_DOESNT_IMPLEMENT_COMPARABLE(\"class ({0}) does not implement Comparable\"),\n+    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(\"the closest orthogonal matrix has a negative determinant {0}\"),\n+    COLUMN_INDEX_OUT_OF_RANGE(\"column index {0} out of allowed range [{1}, {2}]\"),\n+    CONTINUED_FRACTION_INFINITY_DIVERGENCE(\"Continued fraction convergents diverged to +/- infinity for value {0}\"),\n+    CONTINUED_FRACTION_NAN_DIVERGENCE(\"Continued fraction diverged to NaN for value {0}\"),\n+    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(\"contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.\"),\n+    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(\"contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.\"),\n+    CONVERGENCE_FAILED(\"convergence failed\"),\n+    CUMULATIVE_PROBABILITY_RETURNED_NAN(\"Cumulative probability function returned NaN for argument {0} p = {1}\"),\n+    DIFFERENT_ROWS_LENGTHS(\"some rows have length {0} while others have length {1}\"),\n+    DIGEST_NOT_INITIALIZED(\"digest not initialized\"),\n+    DIMENSIONS_MISMATCH_2x2(\"dimensions mismatch: got {0}x{1} but expected {2}x{3}\"),\n+    DIMENSIONS_MISMATCH_SIMPLE(\"dimensions mismatch {0} != {1}\"), /* keep */\n+    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(\"Discrete cumulative probability function returned NaN for argument {0}\"),\n+    DISTRIBUTION_NOT_LOADED(\"distribution not loaded\"),\n+    DUPLICATED_ABSCISSA(\"Abscissa {0} is duplicated at both indices {1} and {2}\"),\n+    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(\"empty polynomials coefficients array\"), /* keep */\n+    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(\"empty selected column index array\"),\n+    EMPTY_SELECTED_ROW_INDEX_ARRAY(\"empty selected row index array\"),\n+    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(\"empty string for imaginary character\"),\n+    ENDPOINTS_NOT_AN_INTERVAL(\"endpoints do not specify an interval: [{0}, {1}]\"),\n+    EQUAL_VERTICES_IN_SIMPLEX(\"equal vertices {0} and {1} in simplex configuration\"),\n+    EULER_ANGLES_SINGULARITY(\"Euler angles singularity\"),\n+    EVALUATION_FAILED(\"evaluation failed for argument = {0}\"),\n+    EXPANSION_FACTOR_SMALLER_THAN_ONE(\"expansion factor smaller than one ({0})\"),\n+    FACTORIAL_NEGATIVE_PARAMETER(\"must have n >= 0 for n!, got n = {0}\"),\n+    FAILED_BRACKETING(\"number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}\"),\n+    FAILED_FRACTION_CONVERSION(\"Unable to convert {0} to fraction after {1} iterations\"),\n+    FIRST_COLUMNS_NOT_INITIALIZED_YET(\"first {0} columns are not initialized yet\"),\n+    FIRST_ELEMENT_NOT_ZERO(\"first element is not 0: {0}\"),\n+    FIRST_ROWS_NOT_INITIALIZED_YET(\"first {0} rows are not initialized yet\"),\n+    FRACTION_CONVERSION_OVERFLOW(\"Overflow trying to convert {0} to fraction ({1}/{2})\"),\n+    FUNCTION_NOT_DIFFERENTIABLE(\"function is not differentiable\"),\n+    FUNCTION_NOT_POLYNOMIAL(\"function is not polynomial\"),\n+    GCD_OVERFLOW_32_BITS(\"overflow: gcd({0}, {1}) is 2^31\"),\n+    GCD_OVERFLOW_64_BITS(\"overflow: gcd({0}, {1}) is 2^63\"),\n+    HOLE_BETWEEN_MODELS_TIME_RANGES(\"{0} wide hole between models time ranges\"),\n+    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(\"identical abscissas x[{0}] == x[{1}] == {2} cause division by zero\"),\n+    INDEX_LARGER_THAN_MAX(\"the index specified: {0} is larger than the current maximal index {1}\"),\n+    INDEX_NOT_POSITIVE(\"index ({0}) is not positive\"),\n+    INDEX_OUT_OF_RANGE(\"index {0} out of allowed range [{1}, {2}]\"),\n+    INFINITE_ARRAY_ELEMENT(\"Array contains an infinite element, {0} at index {1}\"),\n+    INFINITE_VALUE_CONVERSION(\"cannot convert infinite value\"),\n+    INITIAL_CAPACITY_NOT_POSITIVE(\"initial capacity ({0}) is not positive\"),\n+    INITIAL_COLUMN_AFTER_FINAL_COLUMN(\"initial column {0} after final column {1}\"),\n+    INITIAL_ROW_AFTER_FINAL_ROW(\"initial row {0} after final row {1}\"),\n+    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(\"input data comes from unsupported datasource: {0}, supported sources: {1}, {2}\"),\n+    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(\"instance of class {0} not comparable to existing values\"),\n+    INSUFFICIENT_DATA_FOR_T_STATISTIC(\"insufficient data for t statistic, needs at least 2, got {0}\"),\n+    INSUFFICIENT_DIMENSION(\"insufficient dimension {0}, must be at least {1}\"),\n+    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(\"sample contains {0} observed points, at least {1} are required\"),\n+    INSUFFICIENT_ROWS_AND_COLUMNS(\"insufficient data: only {0} rows and {1} columns.\"),\n+    INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT(\"{0} method needs at least one previous point\"),\n+    INTERNAL_ERROR(\"internal error, please fill a bug report at {0}\"),\n+    INVALID_BRACKETING_PARAMETERS(\"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\"),\n+    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(\"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\"),\n+    INVALID_ITERATIONS_LIMITS(\"invalid iteration limits: min={0}, max={1}\"),\n+    INVALID_MAX_ITERATIONS(\"bad value for maximum iterations number: {0}\"),\n+    INVALID_ROUNDING_METHOD(\"invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})\"),\n+    ITERATOR_EXHAUSTED(\"iterator exhausted\"),\n+    LCM_OVERFLOW_32_BITS(\"overflow: lcm({0}, {1}) is 2^31\"),\n+    LCM_OVERFLOW_64_BITS(\"overflow: lcm({0}, {1}) is 2^63\"),\n+    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(\"list of chromosomes bigger than maxPopulationSize\"),\n+    LOESS_EXPECTS_AT_LEAST_ONE_POINT(\"Loess expects at least 1 point\"),\n+    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(\"lower bound ({0}) must be strictly less than upper bound ({1})\"), /* keep */\n+    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(\"lower endpoint ({0}) must be less than or equal to upper endpoint ({1})\"),\n+    MAP_MODIFIED_WHILE_ITERATING(\"map has been modified while iterating\"),\n+    MAX_EVALUATIONS_EXCEEDED(\"maximal number of evaluations ({0}) exceeded\"),\n+    MAX_ITERATIONS_EXCEEDED(\"maximal number of iterations ({0}) exceeded\"),\n+    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(\"minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}\"),\n+    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(\"Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae\"),\n+    NAN_ELEMENT_AT_INDEX(\"element {0} is NaN\"),\n+    NAN_VALUE_CONVERSION(\"cannot convert NaN value\"),\n+    NEGATIVE_BRIGHTNESS_EXPONENT(\"brightness exponent should be positive or null, but got {0}\"),\n+    NEGATIVE_COMPLEX_MODULE(\"negative complex module {0}\"),\n+    NEGATIVE_ELEMENT_AT_2D_INDEX(\"element ({0}, {1}) is negative: {2}\"),\n+    NEGATIVE_ELEMENT_AT_INDEX(\"element {0} is negative: {1}\"),\n+    NEGATIVE_NUMBER_OF_SUCCESSES(\"number of successes must be non-negative ({0})\"),\n+    NEGATIVE_NUMBER_OF_TRIALS(\"number of trials must be non-negative ({0})\"),\n+    NEGATIVE_ROBUSTNESS_ITERATIONS(\"the number of robustness iterations must be non-negative, but got {0}\"),\n+    START_POSITION(\"start position ({0})\"), /* keep */\n+    NON_CONVERGENT_CONTINUED_FRACTION(\"Continued fraction convergents failed to converge for value {0}\"),\n+    NON_POSITIVE_MICROSPHERE_ELEMENTS(\"number of microsphere elements must be positive, but got {0}\"),\n+    NON_POSITIVE_POLYNOMIAL_DEGREE(\"polynomial degree must be positive: degree={0}\"),\n+    NON_REAL_FINITE_ABSCISSA(\"all abscissae must be finite real numbers, but {0}-th is {1}\"),\n+    NON_REAL_FINITE_ORDINATE(\"all ordinatae must be finite real numbers, but {0}-th is {1}\"),\n+    NON_REAL_FINITE_WEIGHT(\"all weights must be finite real numbers, but {0}-th is {1}\"),\n+    NON_SQUARE_MATRIX(\"a {0}x{1} matrix was provided instead of a square matrix\"),\n+    NORMALIZE_INFINITE(\"Cannot normalize to an infinite value\"),\n+    NORMALIZE_NAN(\"Cannot normalize to NaN\"),\n+    NOT_ADDITION_COMPATIBLE_MATRICES(\"{0}x{1} and {2}x{3} matrices are not addition compatible\"),\n+    NOT_DECREASING_NUMBER_OF_POINTS(\"points {0} and {1} are not decreasing ({2} < {3})\"),\n+    NOT_DECREASING_SEQUENCE(\"points {3} and {2} are not decreasing ({1} < {0})\"), /* keep */\n+    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(\"not enough data ({0} rows) for this many predictors ({1} predictors)\"),\n+    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(\"spline partition must have at least {0} points, got {1}\"),\n+    NOT_INCREASING_NUMBER_OF_POINTS(\"points {0} and {1} are not increasing ({2} > {3})\"),\n+    NOT_INCREASING_SEQUENCE(\"points {3} and {2} are not increasing ({1} > {0})\"), /* keep */\n+    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(\"{0}x{1} and {2}x{3} matrices are not multiplication compatible\"),\n+    NOT_POSITIVE_ALPHA(\"alpha must be positive ({0})\"),\n+    NOT_POSITIVE_BETA(\"beta must be positive ({0})\"),\n+    NOT_POSITIVE_COLUMNDIMENSION(\"invalid column dimension: {0} (must be positive)\"),\n+    NOT_POSITIVE_DEFINITE_MATRIX(\"not positive definite matrix\"),\n+    NOT_POSITIVE_DEGREES_OF_FREEDOM(\"degrees of freedom must be positive ({0})\"),\n+    NOT_POSITIVE_ELEMENT_AT_INDEX(\"element {0} is not positive: {1}\"),\n+    NOT_POSITIVE_EXPONENT(\"invalid exponent {0} (must be positive)\"),\n+    NOT_POSITIVE_LENGTH(\"length must be positive ({0})\"),\n+    LENGTH(\"length ({0})\"), /* keep */\n+    NOT_POSITIVE_MEAN(\"mean must be positive ({0})\"),\n+    MEAN(\"mean ({0})\"), /* keep */\n+    NOT_POSITIVE_NUMBER_OF_SAMPLES(\"number of sample is not positive: {0}\"),\n+    NUMBER_OF_SAMPLES(\"number of samples ({0})\"), /* keep */\n+    NOT_POSITIVE_PERMUTATION(\"permutation k ({0}) must be positive\"),\n+    PERMUTATION_SIZE(\"permutation size ({0}\"), /* keep */\n+    NOT_POSITIVE_POISSON_MEAN(\"the Poisson mean must be positive ({0})\"),\n+    NOT_POSITIVE_POPULATION_SIZE(\"population size must be positive ({0})\"),\n+    NOT_POSITIVE_ROW_DIMENSION(\"invalid row dimension: {0} (must be positive)\"),\n+    NOT_POSITIVE_SAMPLE_SIZE(\"sample size must be positive ({0})\"),\n+    NOT_POSITIVE_SCALE(\"scale must be positive ({0})\"),\n+    NOT_POSITIVE_SHAPE(\"shape must be positive ({0})\"),\n+    NOT_POSITIVE_STANDARD_DEVIATION(\"standard deviation must be positive ({0})\"),\n+    STANDARD_DEVIATION(\"standard deviation ({0})\"), /* keep */\n+    NOT_POSITIVE_UPPER_BOUND(\"upper bound must be positive ({0})\"),\n+    NOT_POSITIVE_WINDOW_SIZE(\"window size must be positive ({0})\"),\n+    NOT_POWER_OF_TWO(\"{0} is not a power of 2\"),\n+    NOT_POWER_OF_TWO_CONSIDER_PADDING(\"{0} is not a power of 2, consider padding for fix\"),\n+    NOT_POWER_OF_TWO_PLUS_ONE(\"{0} is not a power of 2 plus one\"),\n+    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(\"points {0} and {1} are not strictly decreasing ({2} <= {3})\"),\n+    NOT_STRICTLY_DECREASING_SEQUENCE(\"points {3} and {2} are not strictly decreasing ({1} <= {0})\"), /* keep */\n+    NOT_STRICTLY_INCREASING_KNOT_VALUES(\"knot values must be strictly increasing\"),\n+    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(\"points {0} and {1} are not strictly increasing ({2} >= {3})\"),\n+    NOT_STRICTLY_INCREASING_SEQUENCE(\"points {3} and {2} are not strictly increasing ({1} >= {0})\"), /* keep */\n+    NOT_SUBTRACTION_COMPATIBLE_MATRICES(\"{0}x{1} and {2}x{3} matrices are not subtraction compatible\"),\n+    NOT_SYMMETRIC_MATRIX(\"not symmetric matrix\"),\n+    NO_BIN_SELECTED(\"no bin selected\"),\n+    NO_CONVERGENCE_WITH_ANY_START_POINT(\"none of the {0} start points lead to convergence\"),\n+    NO_DATA(\"no data\"), /* keep */\n+    NO_DEGREES_OF_FREEDOM(\"no degrees of freedom ({0} measurements, {1} parameters)\"),\n+    NO_DENSITY_FOR_THIS_DISTRIBUTION(\"This distribution does not have a density function implemented\"),\n+    NO_FEASIBLE_SOLUTION(\"no feasible solution\"),\n+    NO_OPTIMUM_COMPUTED_YET(\"no optimum computed yet\"),\n+    NO_RESULT_AVAILABLE(\"no result available\"),\n+    NO_SUCH_MATRIX_ENTRY(\"no entry at indices ({0}, {1}) in a {2}x{3} matrix\"),\n+    NULL_NOT_ALLOWED(\"null is not allowed\"), /* keep */\n+    COVARIANCE_MATRIX(\"covariance matrix\"), /* keep */\n+    DENOMINATOR(\"denominator\"), /* keep */\n+    DENOMINATOR_FORMAT(\"denominator format\"), /* keep */\n+    FRACTION(\"fraction\"), /* keep */\n+    FUNCTION(\"function\"), /* keep */\n+    IMAGINARY_FORMAT(\"imaginary format\"), /* keep */\n+    INPUT_ARRAY(\"input array\"), /* keep */\n+    NUMERATOR(\"numerator\"), /* keep */\n+    NUMERATOR_FORMAT(\"numerator format\"), /* keep */\n+    OBJECT_TRANSFORMATION(\"conversion exception in transformation\"), /* keep */\n+    REAL_FORMAT(\"real format\"), /* keep */\n+    WHOLE_FORMAT(\"whole format\"), /* keep */\n+    NUMBER_TOO_LARGE(\"{0} is larger than the maximum ({1})\"), /* keep */\n+    NUMBER_TOO_SMALL(\"{0} is smaller than the minimum ({1})\"), /* keep */\n+    NUMBER_TOO_LARGE_BOUND_EXCLUDED(\"{0} is larger than, or equal to, the maximum ({1})\"), /* keep */\n+    NUMBER_TOO_SMALL_BOUND_EXCLUDED(\"{0} is smaller than, or equal to, the minimum ({1})\"), /* keep */\n+    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(\"number of successes ({0}) must be less than or equal to population size ({1})\"),\n+    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(\"overflow, numerator too large after multiply: {0}\"),\n+    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(\"{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range\"),\n+    OBSERVED_COUNTS_ALL_ZERO(\"observed counts are all 0 in observed array {0}\"),\n+    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(\"observed counts are both zero for entry {0}\"),\n+    OUT_OF_BOUNDS_QUANTILE_VALUE(\"out of bounds quantile value: {0}, must be in (0, 100]\"),\n+    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(\"out of bounds significance level {0}, must be between {1} and {2}\"),\n+    OUT_OF_ORDER_ABSCISSA_ARRAY(\"the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}\"),\n+    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(\"out of range root of unity index {0} (must be in [{1};{2}])\"),\n+    OUT_OF_RANGE_SIMPLE(\"{0} out of [{1}, {2}] range\"), /* keep */\n+    OVERFLOW_IN_FRACTION(\"overflow in fraction {0}/{1}, cannot negate\"),\n+    OVERFLOW_IN_ADDITION(\"overflow in addition: {0} + {1}\"),\n+    OVERFLOW_IN_SUBTRACTION(\"overflow in subtraction: {0} - {1}\"),\n+    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(\"cannot access {0} method in percentile implementation {1}\"),\n+    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(\"percentile implementation {0} does not support {1}\"),\n+    PERMUTATION_EXCEEDS_N(\"permutation size ({0}) exceeds permuation domain ({1})\"), /* keep */\n+    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(\"number of polynomial interpolants must match the number of segments ({0} != {1} - 1)\"),\n+    POPULATION_LIMIT_NOT_POSITIVE(\"population limit has to be positive\"),\n+    POSITION_SIZE_MISMATCH_INPUT_ARRAY(\"position {0} and size {1} don't fit to the size of the input array {2}\"),\n+    POWER_NEGATIVE_PARAMETERS(\"cannot raise an integral value to a negative power ({0}^{1})\"),\n+    PROPAGATION_DIRECTION_MISMATCH(\"propagation direction mismatch\"),\n+    RANDOMKEY_MUTATION_WRONG_CLASS(\"RandomKeyMutation works only with RandomKeys, not {0}\"),\n+    ROOTS_OF_UNITY_NOT_COMPUTED_YET(\"roots of unity have not been computed yet\"),\n+    ROTATION_MATRIX_DIMENSIONS(\"a {0}x{1} matrix cannot be a rotation matrix\"),\n+    ROW_INDEX_OUT_OF_RANGE(\"row index {0} out of allowed range [{1}, {2}]\"),\n+    SAME_SIGN_AT_ENDPOINTS(\"function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]\"),\n+    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(\"sample size ({0}) exceeds collection size ({1})\"), /* keep */\n+    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(\"sample size ({0}) must be less than or equal to population size ({1})\"),\n+    SIMPLEX_NEED_ONE_POINT(\"simplex must contain at least one point\"),\n+    SIMPLE_MESSAGE(\"{0}\"),\n+    SINGULAR_MATRIX(\"matrix is singular\"),\n+    SUBARRAY_ENDS_AFTER_ARRAY_END(\"subarray ends after array end\"),\n+    TOO_LARGE_CUTOFF_SINGULAR_VALUE(\"cutoff singular value is {0}, should be at most {1}\"),\n+    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(\"cannot discard {0} elements from a {1} elements array\"),\n+    TOO_SMALL_BANDWIDTH(\"the bandwidth must be large enough to accomodate at least 2 points. There are {0}  data points, and bandwidth must be at least {1}  but it is only {2}\"),\n+    TOO_SMALL_COST_RELATIVE_TOLERANCE(\"cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible\"),\n+    TOO_SMALL_INTEGRATION_INTERVAL(\"too small integration interval: length = {0}\"),\n+    TOO_SMALL_ORTHOGONALITY_TOLERANCE(\"orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian\"),\n+    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(\"parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible\"),\n+    TWO_OR_MORE_CATEGORIES_REQUIRED(\"two or more categories required, got {0}\"),\n+    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(\"two or more values required in each category, one has {0}\"),\n+    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(\"unable to bracket optimum in line search\"),\n+    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(\"unable to compute covariances: singular problem\"),\n+    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(\"unable to first guess the harmonic coefficients\"),\n+    UNABLE_TO_ORTHOGONOLIZE_MATRIX(\"unable to orthogonalize matrix in {0} iterations\"),\n+    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(\"unable to perform Q.R decomposition on the {0}x{1} jacobian matrix\"),\n+    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(\"unable to solve: singular problem\"),\n+    UNBOUNDED_SOLUTION(\"unbounded solution\"),\n+    UNKNOWN_MODE(\"unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})\"),\n+    UNPARSEABLE_3D_VECTOR(\"unparseable 3D vector: \\\"{0}\\\"\"),\n+    UNPARSEABLE_COMPLEX_NUMBER(\"unparseable complex number: \\\"{0}\\\"\"),\n+    UNPARSEABLE_FRACTION_NUMBER(\"unparseable fraction number: \\\"{0}\\\"\"),\n+    UNPARSEABLE_REAL_VECTOR(\"unparseable real vector: \\\"{0}\\\"\"),\n+    UNSUPPORTED_EXPANSION_MODE(\"unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})\"),\n+    UNSUPPORTED_OPERATION(\"unsupported operation\"), /* keep */\n+    URL_CONTAINS_NO_DATA(\"URL {0} contains no data\"),\n+    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(\"{0} values have been added before statistic is configured\"),\n+    VECTOR_LENGTH_MISMATCH(\"vector length mismatch: got {0} but expected {1}\"),\n+    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(\"vector must have at least one element\"),\n+    WEIGHT_AT_LEAST_ONE_NON_ZERO(\"weigth array must contain at least one non-zero value\"),\n+    WRONG_BLOCK_LENGTH(\"wrong array shape (block length = {0}, expected {1})\"),\n+    WRONG_NUMBER_OF_POINTS(\"{0} points are required, got only {1}\"),\n+    NUMBER_OF_POINTS(\"number of points ({0})\"), /* keep */\n+    ZERO_DENOMINATOR(\"denominator must be different from 0\"),\n+    ZERO_DENOMINATOR_IN_FRACTION(\"zero denominator in fraction {0}/{1}\"),\n+    ZERO_FRACTION_TO_DIVIDE_BY(\"the fraction to divide by must not be zero: {0}/{1}\"),\n+    ZERO_NORM(\"zero norm\"),\n+    ZERO_NORM_FOR_ROTATION_AXIS(\"zero norm for rotation axis\"),\n+    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(\"zero norm for rotation defining vector\"),\n+    ZERO_NOT_ALLOWED(\"zero not allowed here\");\n+\n+    // CHECKSTYLE: resume JavadocVariable\n+    // CHECKSTYLE: resume MultipleVariableDeclarations\n+\n+\n+    /** Source English format. */\n+    private final String sourceFormat;\n+\n+    /** Simple constructor.\n+     * @param sourceFormat source English format to use when no\n+     * localized version is available\n+     */\n+    private LocalizedFormats(final String sourceFormat) {\n+        this.sourceFormat = sourceFormat;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public String getSourceString() {\n+        return sourceFormat;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public String getLocalizedString(final Locale locale) {\n+        try {\n+            ResourceBundle bundle =\n+                    ResourceBundle.getBundle(\"META-INF/localization/LocalizedFormats\", locale);\n+            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n+                // the value of the resource is the translated format\n+                return bundle.getString(toString());\n+            }\n+\n+        } catch (MissingResourceException mre) {\n+            // do nothing here\n+        }\n+\n+        // either the locale is not supported or the resource is unknown\n+        // don't translate and fall back to using the source format\n+        return sourceFormat;\n+\n+    }\n+\n+}\n--- a/src/main/java/org/apache/commons/math/exception/util/MessageFactory.java\n+++ b/src/main/java/org/apache/commons/math/exception/util/MessageFactory.java\n \n import java.text.MessageFormat;\n import java.util.Locale;\n-\n-import org.apache.commons.math.exception.Localizable;\n \n /**\n  * Class for constructing localized messages.\n--- a/src/main/java/org/apache/commons/math/fraction/AbstractFormat.java\n+++ b/src/main/java/org/apache/commons/math/fraction/AbstractFormat.java\n import java.util.Locale;\n \n import org.apache.commons.math.exception.NullArgumentException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Common part shared by both {@link FractionFormat} and {@link BigFractionFormat}.\n--- a/src/main/java/org/apache/commons/math/fraction/BigFraction.java\n+++ b/src/main/java/org/apache/commons/math/fraction/BigFraction.java\n \n import org.apache.commons.math.FieldElement;\n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.util.MathUtils;\n \n--- a/src/main/java/org/apache/commons/math/fraction/BigFractionFormat.java\n+++ b/src/main/java/org/apache/commons/math/fraction/BigFractionFormat.java\n import java.util.Locale;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Formats a BigFraction number in proper format or improper format.\n--- a/src/main/java/org/apache/commons/math/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math/fraction/Fraction.java\n \n import org.apache.commons.math.FieldElement;\n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.util.MathUtils;\n \n--- a/src/main/java/org/apache/commons/math/fraction/FractionConversionException.java\n+++ b/src/main/java/org/apache/commons/math/fraction/FractionConversionException.java\n package org.apache.commons.math.fraction;\n \n import org.apache.commons.math.ConvergenceException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Error thrown when a double value cannot be converted to a fraction\n--- a/src/main/java/org/apache/commons/math/fraction/FractionFormat.java\n+++ b/src/main/java/org/apache/commons/math/fraction/FractionFormat.java\n \n import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Formats a Fraction number in proper format or improper format.  The number\n--- a/src/main/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java\n+++ b/src/main/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java\n import java.text.NumberFormat;\n import java.text.ParsePosition;\n \n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.exception.NullArgumentException;\n \n /**\n--- a/src/main/java/org/apache/commons/math/fraction/ProperFractionFormat.java\n+++ b/src/main/java/org/apache/commons/math/fraction/ProperFractionFormat.java\n import java.text.NumberFormat;\n import java.text.ParsePosition;\n \n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.util.MathUtils;\n \n--- a/src/main/java/org/apache/commons/math/genetics/ListPopulation.java\n+++ b/src/main/java/org/apache/commons/math/genetics/ListPopulation.java\n import java.util.Iterator;\n import java.util.List;\n \n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.exception.NotPositiveException;\n import org.apache.commons.math.exception.NumberIsTooLargeException;\n \n--- a/src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java\n+++ b/src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java\n import java.util.List;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Mutation operator for {@link RandomKey}s. Changes a randomly chosen element\n--- a/src/main/java/org/apache/commons/math/geometry/CardanEulerSingularityException.java\n+++ b/src/main/java/org/apache/commons/math/geometry/CardanEulerSingularityException.java\n package org.apache.commons.math.geometry;\n \n import org.apache.commons.math.MathException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /** This class represents exceptions thrown while extractiong Cardan\n  * or Euler angles from a rotation.\n--- a/src/main/java/org/apache/commons/math/geometry/NotARotationMatrixException.java\n+++ b/src/main/java/org/apache/commons/math/geometry/NotARotationMatrixException.java\n package org.apache.commons.math.geometry;\n \n import org.apache.commons.math.MathException;\n-import org.apache.commons.math.exception.Localizable;\n+import org.apache.commons.math.exception.util.Localizable;\n \n /**\n  * This class represents exceptions thrown while building rotations\n--- a/src/main/java/org/apache/commons/math/geometry/Rotation.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Rotation.java\n import java.io.Serializable;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * This class implements rotations in a three-dimensional space.\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n import java.io.Serializable;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.MathUtils;\n \n /**\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java\n import java.util.Locale;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.CompositeFormat;\n \n /**\n--- a/src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java\n import org.apache.commons.math.Field;\n import org.apache.commons.math.FieldElement;\n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Basic implementation of {@link FieldMatrix} methods regardless of the underlying storage.\n--- a/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java\n package org.apache.commons.math.linear;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.MathUtils;\n \n /**\n--- a/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n import org.apache.commons.math.analysis.BinaryFunction;\n import org.apache.commons.math.analysis.ComposableFunction;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * This class provides default basic implementations for many methods in the\n--- a/src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java\n import org.apache.commons.math.Field;\n import org.apache.commons.math.FieldElement;\n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Implementation of FieldMatrix<T> using a {@link FieldElement}[][] array to store entries.\n--- a/src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java\n import java.io.Serializable;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Implementation of RealMatrix using a double[][] array to store entries and\n--- a/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java\n import org.apache.commons.math.Field;\n import org.apache.commons.math.FieldElement;\n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * This class implements the {@link FieldVector} interface with a {@link FieldElement} array.\n--- a/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\n import java.util.Iterator;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.MathUtils;\n \n /**\n--- a/src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java\n import java.math.BigDecimal;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Implementation of {@link BigMatrix} using a BigDecimal[][] array to store entries\n--- a/src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java\n import org.apache.commons.math.Field;\n import org.apache.commons.math.FieldElement;\n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Cache-friendly implementation of FieldMatrix using a flat arrays to store\n--- a/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java\n import java.util.Arrays;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Cache-friendly implementation of RealMatrix using a flat arrays to store\n--- a/src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n package org.apache.commons.math.linear;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n \n /**\n--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n \n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.MaxIterationsExceededException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.MathUtils;\n \n /**\n--- a/src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java\n import org.apache.commons.math.Field;\n import org.apache.commons.math.FieldElement;\n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Calculates the LUP-decomposition of a square matrix.\n--- a/src/main/java/org/apache/commons/math/linear/InvalidMatrixException.java\n+++ b/src/main/java/org/apache/commons/math/linear/InvalidMatrixException.java\n package org.apache.commons.math.linear;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.DummyLocalizable;\n-import org.apache.commons.math.exception.Localizable;\n+import org.apache.commons.math.exception.util.DummyLocalizable;\n+import org.apache.commons.math.exception.util.Localizable;\n \n /**\n  * Thrown when a system attempts an operation on a matrix, and\n--- a/src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java\n package org.apache.commons.math.linear;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Calculates the LUP-decomposition of a square matrix.\n--- a/src/main/java/org/apache/commons/math/linear/MatrixIndexException.java\n+++ b/src/main/java/org/apache/commons/math/linear/MatrixIndexException.java\n package org.apache.commons.math.linear;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.DummyLocalizable;\n-import org.apache.commons.math.exception.Localizable;\n+import org.apache.commons.math.exception.util.DummyLocalizable;\n+import org.apache.commons.math.exception.util.Localizable;\n \n /**\n  * Thrown when an operation addresses a matrix coordinate (row, col)\n--- a/src/main/java/org/apache/commons/math/linear/MatrixUtils.java\n+++ b/src/main/java/org/apache/commons/math/linear/MatrixUtils.java\n import org.apache.commons.math.Field;\n import org.apache.commons.math.FieldElement;\n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.fraction.BigFraction;\n import org.apache.commons.math.fraction.Fraction;\n \n--- a/src/main/java/org/apache/commons/math/linear/MatrixVisitorException.java\n+++ b/src/main/java/org/apache/commons/math/linear/MatrixVisitorException.java\n package org.apache.commons.math.linear;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.Localizable;\n+import org.apache.commons.math.exception.util.Localizable;\n \n /**\n  * Thrown when a visitor encounters an error while processing a matrix entry.\n--- a/src/main/java/org/apache/commons/math/linear/NonSquareMatrixException.java\n+++ b/src/main/java/org/apache/commons/math/linear/NonSquareMatrixException.java\n \n package org.apache.commons.math.linear;\n \n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n \n /**\n--- a/src/main/java/org/apache/commons/math/linear/NotPositiveDefiniteMatrixException.java\n+++ b/src/main/java/org/apache/commons/math/linear/NotPositiveDefiniteMatrixException.java\n package org.apache.commons.math.linear;\n \n import org.apache.commons.math.MathException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * This class represents exceptions thrown when a matrix expected to\n--- a/src/main/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java\n+++ b/src/main/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java\n package org.apache.commons.math.linear;\n \n import org.apache.commons.math.MathException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * This class represents exceptions thrown when a matrix expected to\n--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n import java.io.Serializable;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.OpenIntToDoubleHashMap;\n import org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator;\n \n--- a/src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java\n import java.util.Arrays;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n \n /**\n--- a/src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java\n import java.io.Serializable;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Implementation of RealMatrix using a double[][] array to store entries and\n--- a/src/main/java/org/apache/commons/math/linear/RealVectorFormat.java\n+++ b/src/main/java/org/apache/commons/math/linear/RealVectorFormat.java\n import java.util.Locale;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.CompositeFormat;\n \n /**\n--- a/src/main/java/org/apache/commons/math/linear/SingularMatrixException.java\n+++ b/src/main/java/org/apache/commons/math/linear/SingularMatrixException.java\n \n package org.apache.commons.math.linear;\n \n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n \n /**\n--- a/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java\n package org.apache.commons.math.linear;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Calculates the compact Singular Value Decomposition of a matrix.\n--- a/src/main/java/org/apache/commons/math/linear/SparseFieldVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/SparseFieldVector.java\n import org.apache.commons.math.Field;\n import org.apache.commons.math.FieldElement;\n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.OpenIntToFieldHashMap;\n \n /**\n--- a/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java\n import java.util.Collections;\n \n import org.apache.commons.math.MaxEvaluationsExceededException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.ode.events.CombinedEventsManager;\n import org.apache.commons.math.ode.events.EventHandler;\n import org.apache.commons.math.ode.events.EventState;\n--- a/src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java\n+++ b/src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java\n import java.io.Serializable;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n \n--- a/src/main/java/org/apache/commons/math/ode/DerivativeException.java\n+++ b/src/main/java/org/apache/commons/math/ode/DerivativeException.java\n package org.apache.commons.math.ode;\n \n import org.apache.commons.math.MathException;\n-import org.apache.commons.math.exception.DummyLocalizable;\n-import org.apache.commons.math.exception.Localizable;\n+import org.apache.commons.math.exception.util.DummyLocalizable;\n+import org.apache.commons.math.exception.util.Localizable;\n \n /**\n  * This exception is made available to users to report\n--- a/src/main/java/org/apache/commons/math/ode/IntegratorException.java\n+++ b/src/main/java/org/apache/commons/math/ode/IntegratorException.java\n package org.apache.commons.math.ode;\n \n import org.apache.commons.math.MathException;\n-import org.apache.commons.math.exception.Localizable;\n+import org.apache.commons.math.exception.util.Localizable;\n \n /**\n  * This exception is made available to users to report\n--- a/src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java\n package org.apache.commons.math.ode;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.linear.Array2DRowRealMatrix;\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator;\n--- a/src/main/java/org/apache/commons/math/ode/events/EventException.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventException.java\n package org.apache.commons.math.ode.events;\n \n import org.apache.commons.math.MathException;\n-import org.apache.commons.math.exception.Localizable;\n+import org.apache.commons.math.exception.util.Localizable;\n \n /**\n  * This exception is made available to users to report\n--- a/src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java\n+++ b/src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java\n \n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.MaxEvaluationsExceededException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.ExtendedFirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.ode.AbstractIntegrator;\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.ExtendedFirstOrderDifferentialEquations;\n--- a/src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.MultivariateRealFunction;\n import org.apache.commons.math.analysis.MultivariateVectorialFunction;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.linear.RealMatrix;\n \n /** This class converts {@link MultivariateVectorialFunction vectorial\n--- a/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.DifferentiableMultivariateRealFunction;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.random.RandomVectorGenerator;\n \n /**\n--- a/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.random.RandomVectorGenerator;\n \n /**\n--- a/src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.MultivariateRealFunction;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.random.RandomVectorGenerator;\n \n /**\n--- a/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.random.RandomGenerator;\n \n /**\n--- a/src/main/java/org/apache/commons/math/optimization/OptimizationException.java\n+++ b/src/main/java/org/apache/commons/math/optimization/OptimizationException.java\n package org.apache.commons.math.optimization;\n \n import org.apache.commons.math.ConvergenceException;\n-import org.apache.commons.math.exception.DummyLocalizable;\n-import org.apache.commons.math.exception.Localizable;\n+import org.apache.commons.math.exception.util.DummyLocalizable;\n+import org.apache.commons.math.exception.util.Localizable;\n \n /**\n  * This class represents exceptions thrown by optimizers.\n--- a/src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java\n import org.apache.commons.math.MaxEvaluationsExceededException;\n import org.apache.commons.math.MaxIterationsExceededException;\n import org.apache.commons.math.analysis.MultivariateRealFunction;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.optimization.GoalType;\n import org.apache.commons.math.optimization.MultivariateRealOptimizer;\n import org.apache.commons.math.optimization.OptimizationException;\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.exception.DimensionMismatchException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.exception.ZeroException;\n import org.apache.commons.math.exception.NullArgumentException;\n \n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFunction.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFunction.java\n import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.exception.DimensionMismatchException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.exception.ZeroException;\n import org.apache.commons.math.exception.NullArgumentException;\n \n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianParametersGuesser.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianParametersGuesser.java\n import java.util.Arrays;\n import java.util.Comparator;\n \n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.ZeroException;\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java\n \n package org.apache.commons.math.optimization.fitting;\n \n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.optimization.OptimizationException;\n \n /** This class guesses harmonic coefficients from a sample.\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java\n \n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer;\n import org.apache.commons.math.optimization.OptimizationException;\n \n--- a/src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java\n \n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.exception.ZeroException;\n import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.optimization.fitting.ParametricRealFunction;\n--- a/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java\n import org.apache.commons.math.MaxIterationsExceededException;\n import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;\n import org.apache.commons.math.analysis.MultivariateMatrixFunction;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.linear.InvalidMatrixException;\n import org.apache.commons.math.linear.LUDecompositionImpl;\n import org.apache.commons.math.linear.MatrixUtils;\n--- a/src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java\n package org.apache.commons.math.optimization.general;\n \n import org.apache.commons.math.FunctionEvaluationException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.linear.BlockRealMatrix;\n import org.apache.commons.math.linear.DecompositionSolver;\n import org.apache.commons.math.linear.InvalidMatrixException;\n--- a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n import java.util.Arrays;\n \n import org.apache.commons.math.FunctionEvaluationException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.optimization.OptimizationException;\n import org.apache.commons.math.optimization.VectorialPointValuePair;\n import org.apache.commons.math.util.MathUtils;\n--- a/src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.analysis.solvers.BrentSolver;\n import org.apache.commons.math.analysis.solvers.UnivariateRealSolver;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.optimization.GoalType;\n import org.apache.commons.math.optimization.OptimizationException;\n import org.apache.commons.math.optimization.RealPointValuePair;\n--- a/src/main/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java\n \n package org.apache.commons.math.optimization.linear;\n \n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.optimization.OptimizationException;\n \n /**\n--- a/src/main/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java\n \n package org.apache.commons.math.optimization.linear;\n \n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.optimization.OptimizationException;\n \n /**\n--- a/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n import java.util.List;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.StatisticalSummary;\n import org.apache.commons.math.stat.descriptive.SummaryStatistics;\n \n--- a/src/main/java/org/apache/commons/math/random/RandomDataImpl.java\n+++ b/src/main/java/org/apache/commons/math/random/RandomDataImpl.java\n \n import org.apache.commons.math.MathException;\n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n import org.apache.commons.math.exception.NumberIsTooLargeException;\n import org.apache.commons.math.distribution.BetaDistributionImpl;\n--- a/src/main/java/org/apache/commons/math/random/ValueServer.java\n+++ b/src/main/java/org/apache/commons/math/random/ValueServer.java\n import java.net.URL;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Generates values for use in simulation applications.\n--- a/src/main/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/main/java/org/apache/commons/math/stat/Frequency.java\n import java.util.TreeMap;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Maintains a frequency distribution.\n--- a/src/main/java/org/apache/commons/math/stat/StatUtils.java\n+++ b/src/main/java/org/apache/commons/math/stat/StatUtils.java\n package org.apache.commons.math.stat;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.UnivariateStatistic;\n import org.apache.commons.math.stat.descriptive.moment.GeometricMean;\n import org.apache.commons.math.stat.descriptive.moment.Mean;\n--- a/src/main/java/org/apache/commons/math/stat/correlation/Covariance.java\n+++ b/src/main/java/org/apache/commons/math/stat/correlation/Covariance.java\n package org.apache.commons.math.stat.correlation;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.linear.BlockRealMatrix;\n import org.apache.commons.math.stat.descriptive.moment.Mean;\n--- a/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\n+++ b/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.distribution.TDistribution;\n import org.apache.commons.math.distribution.TDistributionImpl;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.linear.RealMatrix;\n--- a/src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java\n+++ b/src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java\n package org.apache.commons.math.stat.correlation;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.linear.BlockRealMatrix;\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.stat.ranking.NaturalRanking;\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java\n  */\n package org.apache.commons.math.stat.descriptive;\n \n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.util.MathUtils;\n \n--- a/src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java\n package org.apache.commons.math.stat.descriptive;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.NotPositiveException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n import java.util.Arrays;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.moment.GeometricMean;\n import org.apache.commons.math.stat.descriptive.moment.Kurtosis;\n import org.apache.commons.math.stat.descriptive.moment.Mean;\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java\n \n import org.apache.commons.math.DimensionMismatchException;\n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.stat.descriptive.moment.GeometricMean;\n import org.apache.commons.math.stat.descriptive.moment.Mean;\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n import java.io.Serializable;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.moment.GeometricMean;\n import org.apache.commons.math.stat.descriptive.moment.Mean;\n import org.apache.commons.math.stat.descriptive.moment.SecondMoment;\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java\n import java.io.Serializable;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic;\n import org.apache.commons.math.stat.descriptive.summary.SumOfLogs;\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java\n import java.io.Serializable;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n \n \n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java\n \n import java.io.Serializable;\n import org.apache.commons.math.exception.NullArgumentException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic;\n \n /**\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n import java.io.Serializable;\n \n import org.apache.commons.math.exception.NullArgumentException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.WeightedEvaluation;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n \n--- a/src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java\n import java.util.Arrays;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic;\n \n /**\n--- a/src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.distribution.ChiSquaredDistribution;\n import org.apache.commons.math.distribution.ChiSquaredDistributionImpl;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Implements Chi-Square test statistics defined in the\n--- a/src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.distribution.FDistribution;\n import org.apache.commons.math.distribution.FDistributionImpl;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.summary.Sum;\n import org.apache.commons.math.stat.descriptive.summary.SumOfSquares;\n \n--- a/src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.distribution.TDistribution;\n import org.apache.commons.math.distribution.TDistributionImpl;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.StatUtils;\n import org.apache.commons.math.stat.descriptive.StatisticalSummary;\n \n--- a/src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java\n+++ b/src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java\n package org.apache.commons.math.stat.regression;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.linear.Array2DRowRealMatrix;\n import org.apache.commons.math.linear.RealVector;\n--- a/src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n+++ b/src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.distribution.TDistribution;\n import org.apache.commons.math.distribution.TDistributionImpl;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Estimates an ordinary least squares regression model\n--- a/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.complex.Complex;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Implements the <a href=\"http://documents.wolfram.com/v5/Add-onsLinks/\n--- a/src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.complex.Complex;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Implements the <a href=\"http://mathworld.wolfram.com/FastFourierTransform.html\">\n--- a/src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Implements the <a href=\"http://www.archive.chipcenter.com/dsp/DSP000517F1.html\">Fast Hadamard Transform</a> (FHT).\n--- a/src/main/java/org/apache/commons/math/transform/FastSineTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastSineTransformer.java\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.complex.Complex;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Implements the <a href=\"http://documents.wolfram.com/v5/Add-onsLinks/\n--- a/src/main/java/org/apache/commons/math/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math/util/ContinuedFraction.java\n import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.MathException;\n import org.apache.commons.math.MaxIterationsExceededException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Provides a generic means to evaluate continued fractions.  Subclasses simply\n--- a/src/main/java/org/apache/commons/math/util/DefaultTransformer.java\n+++ b/src/main/java/org/apache/commons/math/util/DefaultTransformer.java\n import java.io.Serializable;\n \n import org.apache.commons.math.MathException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.exception.NullArgumentException;\n \n /**\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n import java.util.Arrays;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.Localizable;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.Localizable;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.exception.NonMonotonousSequenceException;\n \n /**\n--- a/src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java\n+++ b/src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java\n import java.util.NoSuchElementException;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Open addressed map from int to double.\n--- a/src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java\n+++ b/src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java\n import org.apache.commons.math.Field;\n import org.apache.commons.math.FieldElement;\n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * Open addressed map from int to FieldElement.\n--- a/src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java\n+++ b/src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java\n import java.util.Arrays;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * <p>\n--- a/src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java\n+++ b/src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java\n \n import java.util.Locale;\n \n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * @version $Revision$ $Date$\n--- a/src/test/java/org/apache/commons/math/FunctionEvaluationExceptionTest.java\n+++ b/src/test/java/org/apache/commons/math/FunctionEvaluationExceptionTest.java\n \n import java.util.Locale;\n \n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n import junit.framework.TestCase;\n \n--- a/src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java\n+++ b/src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java\n \n import java.util.Locale;\n \n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * @version $Revision$ $Date$\n--- a/src/test/java/org/apache/commons/math/MathExceptionTest.java\n+++ b/src/test/java/org/apache/commons/math/MathExceptionTest.java\n import java.io.PrintWriter;\n import java.util.Locale;\n \n-import org.apache.commons.math.exception.DummyLocalizable;\n-import org.apache.commons.math.exception.Localizable;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.DummyLocalizable;\n+import org.apache.commons.math.exception.util.Localizable;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * @version $Revision$ $Date$\n--- a/src/test/java/org/apache/commons/math/MaxIterationsExceededExceptionTest.java\n+++ b/src/test/java/org/apache/commons/math/MaxIterationsExceededExceptionTest.java\n \n import java.util.Locale;\n \n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n import junit.framework.TestCase;\n \n--- a/src/test/java/org/apache/commons/math/linear/MatrixIndexExceptionTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/MatrixIndexExceptionTest.java\n \n package org.apache.commons.math.linear;\n \n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n import junit.framework.TestCase;\n \n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java\n import junit.framework.TestCase;\n \n import org.apache.commons.math.ConvergenceException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n--- a/src/test/java/org/apache/commons/math/util/TestBean.java\n+++ b/src/test/java/org/apache/commons/math/util/TestBean.java\n package org.apache.commons.math.util;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.LocalizedFormats;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * @version $Revision$ $Date$", "timestamp": 1281437166, "metainfo": ""}