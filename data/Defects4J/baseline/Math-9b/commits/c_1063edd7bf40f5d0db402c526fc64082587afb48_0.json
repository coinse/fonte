{"sha": "1063edd7bf40f5d0db402c526fc64082587afb48", "log": "Removed references to checked exception ConvergenceException in package o.a.c.m.analysis.integration. See JIRA MATH-669.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java\n  */\n package org.apache.commons.math.analysis.integration;\n \n-import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.MaxCountExceededException;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.exception.TooManyEvaluationsException;\n \n     /** {@inheritDoc} */\n     protected double doIntegrate()\n-        throws TooManyEvaluationsException, ConvergenceException {\n+        throws TooManyEvaluationsException, MaxCountExceededException {\n \n         // compute first estimate with a single step\n         double oldt = stage(1);\n--- a/src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java\n  */\n package org.apache.commons.math.analysis.integration;\n \n-import org.apache.commons.math.ConvergenceException;\n+import org.apache.commons.math.exception.MaxCountExceededException;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n import org.apache.commons.math.exception.NumberIsTooLargeException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n \n     /** {@inheritDoc} */\n     protected double doIntegrate()\n-        throws TooManyEvaluationsException, ConvergenceException {\n+        throws TooManyEvaluationsException, MaxCountExceededException {\n \n         final int m = iterations.getMaximalCount() + 1;\n         double previousRow[] = new double[m];\n--- a/src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java\n  */\n package org.apache.commons.math.analysis.integration;\n \n-import org.apache.commons.math.ConvergenceException;\n+import org.apache.commons.math.exception.MaxCountExceededException;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n import org.apache.commons.math.exception.NumberIsTooLargeException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n \n     /** {@inheritDoc} */\n     protected double doIntegrate()\n-        throws TooManyEvaluationsException, ConvergenceException {\n+        throws TooManyEvaluationsException, MaxCountExceededException {\n \n         TrapezoidIntegrator qtrap = new TrapezoidIntegrator();\n         if (minimalIterationCount == 1) {\n--- a/src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java\n  */\n package org.apache.commons.math.analysis.integration;\n \n-import org.apache.commons.math.ConvergenceException;\n+import org.apache.commons.math.exception.MaxCountExceededException;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n import org.apache.commons.math.exception.NumberIsTooLargeException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n      * arbitrary m sections because this configuration can best utilize the\n      * alrealy computed values.</p>\n      *\n-     * @param baseIntegrator integrator holdingintegration parameters\n+     * @param baseIntegrator integrator holding integration parameters\n      * @param n the stage of 1/2 refinement, n = 0 is no refinement\n      * @return the value of n-th stage integral\n      * @throws TooManyEvaluationsException if the maximal number of evaluations\n \n     /** {@inheritDoc} */\n     protected double doIntegrate()\n-        throws TooManyEvaluationsException, ConvergenceException {\n+        throws TooManyEvaluationsException, MaxCountExceededException {\n \n         double oldt = stage(this, 0);\n         iterations.incrementCount();\n--- a/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java\n  */\n package org.apache.commons.math.analysis.integration;\n \n-import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.exception.MaxCountExceededException;\n import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.TooManyEvaluationsException;\n \n      * @return the value of integral\n      * @throws TooManyEvaluationsException if the maximal number of evaluations\n      * is exceeded.\n-     * @throws ConvergenceException if the maximum iteration count is exceeded\n+     * @throws MaxCountExceededException if the maximum iteration count is exceeded\n      * or the integrator detects convergence problems otherwise\n      * @throws MathIllegalArgumentException if min > max or the endpoints do not\n      * satisfy the requirements specified by the integrator\n      * @throws NullArgumentException if {@code f} is {@code null}.\n      */\n-    double integrate(int maxEval, UnivariateRealFunction f, double min, double max)\n-        throws TooManyEvaluationsException, ConvergenceException,\n+    double integrate(int maxEval, UnivariateRealFunction f, double min,\n+                     double max)\n+        throws TooManyEvaluationsException, MaxCountExceededException,\n                MathIllegalArgumentException, NullArgumentException;\n \n     /**\n--- a/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java\n  */\n package org.apache.commons.math.analysis.integration;\n \n-import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils;\n import org.apache.commons.math.exception.MathIllegalArgumentException;\n     /** {@inheritDoc} */\n     public double integrate(final int maxEval, final UnivariateRealFunction f,\n                             final double min, final double max)\n-        throws TooManyEvaluationsException, ConvergenceException,\n+        throws TooManyEvaluationsException, MaxCountExceededException,\n                MathIllegalArgumentException, NullArgumentException {\n \n         // Initialization.\n      * @return the root.\n      * @throws TooManyEvaluationsException if the maximal number of evaluations\n      * is exceeded.\n-     * @throws ConvergenceException if the maximum iteration count is exceeded\n+     * @throws MaxCountExceededException if the maximum iteration count is exceeded\n      * or the integrator detects convergence problems otherwise\n      */\n     protected abstract double doIntegrate()\n-        throws TooManyEvaluationsException, ConvergenceException;\n+        throws TooManyEvaluationsException, MaxCountExceededException;\n \n }", "timestamp": 1316096861, "metainfo": ""}