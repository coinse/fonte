{"sha": "7b22aec5529fb3bad1e8098938271398d13c92ba", "log": "Fixed javadoc, checkstyle, and link warnings.  Made some corrections and additions to the user guide.   ", "commit": "\n--- a/src/java/org/apache/commons/math/ConvergenceException.java\n+++ b/src/java/org/apache/commons/math/ConvergenceException.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n /**\n  * Error thrown when a numerical computation can not be performed because the\n  * numerical result failed to converge to a finite value.\n- * \n- * @version $Revision: 1.13 $ $Date: 2004/06/02 00:05:28 $\n+ *\n+ * @version $Revision: 1.14 $ $Date: 2004/06/23 16:26:16 $\n  */\n public class ConvergenceException extends MathException implements Serializable{\n     \n--- a/src/java/org/apache/commons/math/MathConfigurationException.java\n+++ b/src/java/org/apache/commons/math/MathConfigurationException.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Signals a configuration problem with any of the factory methods.\n- * @version $Revision: 1.17 $ $Date: 2004/06/02 00:05:28 $\n+ * @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:16 $\n  */\n public class MathConfigurationException extends MathException implements Serializable {\n     \n--- a/src/java/org/apache/commons/math/MathException.java\n+++ b/src/java/org/apache/commons/math/MathException.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * A generic exception indicating problems in the math package.\n- * @version $Revision: 1.16 $ $Date: 2004/06/02 00:05:28 $\n+ * @version $Revision: 1.17 $ $Date: 2004/06/23 16:26:16 $\n  */\n public class MathException extends NestableException implements Serializable {\n \n--- a/src/java/org/apache/commons/math/analysis/BisectionSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BisectionSolver.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * Implements the <a href=\"http://mathworld.wolfram.com/Bisection.html\">bisection algorithm</a>\n  *  for finding zeros of univariate real functions.  This algorithm will find only one zero in the given interval.\n  * The function should be continuous but not necessarily smooth.\n- * @version $Revision: 1.16 $ $Date: 2004/06/02 00:11:08 $\n+ * @version $Revision: 1.17 $ $Date: 2004/06/23 16:26:14 $\n  */\n public class BisectionSolver extends UnivariateRealSolverImpl implements Serializable {\n     \n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * functions. This algorithm will find only one zero in the given interval. \n  * The function should be continuous but not necessarily smooth.\n  *  \n- * @version $Revision: 1.15 $ $Date: 2004/06/02 00:11:08 $\n+ * @version $Revision: 1.16 $ $Date: 2004/06/23 16:26:14 $\n  */\n public class BrentSolver extends UnivariateRealSolverImpl implements Serializable {\n     \n--- a/src/java/org/apache/commons/math/analysis/DifferentiableUnivariateRealFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/DifferentiableUnivariateRealFunction.java\n /*\n  * Copyright 2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n /**\n  * Extension of {@link UnivariateRealFunction} representing a differentiable univariate real function.\n  *\n- * @version $Revision: 1.1 $ $Date: 2004/04/02 20:59:52 $\n+ * @version $Revision: 1.2 $ $Date: 2004/06/23 16:26:14 $\n  */\n public interface DifferentiableUnivariateRealFunction\n     extends UnivariateRealFunction {\n--- a/src/java/org/apache/commons/math/analysis/NewtonSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/NewtonSolver.java\n /*\n  * Copyright 2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * algorithm will find only one zero in the given interval.  The function should\n  * be continuous but not necessarily smooth.\n  *\n- * @version $Revision: 1.4 $ $Date: 2004/06/02 00:11:08 $\n+ * @version $Revision: 1.5 $ $Date: 2004/06/23 16:26:14 $\n  */\n public class NewtonSolver extends UnivariateRealSolverImpl implements Serializable {\n     \n--- a/src/java/org/apache/commons/math/analysis/PolynomialFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/PolynomialFunction.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * <p>\n  * <a href=\"http://mathworld.wolfram.com/HornersMethod.html\">Horner's Method</a>\n  *  is used to evaluate the function.   \n- * \n- * @version $Revision: 1.10 $ $Date: 2004/06/02 00:11:08 $\n+ *\n+ * @version $Revision: 1.11 $ $Date: 2004/06/23 16:26:14 $\n  */\n public class PolynomialFunction implements DifferentiableUnivariateRealFunction, Serializable {\n \n--- a/src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  *  <code>IllegalArgumentException</code> is thrown.</li>\n  * <li> Let <code>j</code> be the index of the largest knot point that is less than or equal to <code>x</code>. \n  *  The value returned is <br> <code>polynomials[j](x - knot[j])</code></li></ol>\n- * \n- * @version $Revision: 1.5 $ $Date: 2004/06/02 00:11:08 $\n+ *\n+ * @version $Revision: 1.6 $ $Date: 2004/06/23 16:26:14 $\n  */\n public class PolynomialSplineFunction implements UnivariateRealFunction, Serializable {\n    \n--- a/src/java/org/apache/commons/math/analysis/SecantSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/SecantSolver.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * <p>\n  * The function is supposed to be continuous but not necessarily smooth.\n  *  \n- * @version $Revision: 1.15 $ $Date: 2004/06/02 00:11:08 $\n+ * @version $Revision: 1.16 $ $Date: 2004/06/23 16:26:14 $\n  */\n public class SecantSolver extends UnivariateRealSolverImpl implements Serializable {\n     \n--- a/src/java/org/apache/commons/math/analysis/SplineInterpolator.java\n+++ b/src/java/org/apache/commons/math/analysis/SplineInterpolator.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * The cubic spline interpolation algorithm implemented is as described in R.L. Burden, J.D. Faires, \n  * <u>Numerical Analysis</u>, 4th Ed., 1989, PWS-Kent, ISBN 0-53491-585-X, pp 126-131.\n  *\n- * @version $Revision: 1.18 $ $Date: 2004/06/02 00:10:45 $\n+ * @version $Revision: 1.19 $ $Date: 2004/06/23 16:26:14 $\n  *\n  */\n public class SplineInterpolator implements UnivariateRealInterpolator {\n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n /**\n  * An interface representing a univariate real function.\n  *  \n- * @version $Revision: 1.12 $ $Date: 2004/02/21 21:35:14 $\n+ * @version $Revision: 1.13 $ $Date: 2004/06/23 16:26:14 $\n  */\n public interface UnivariateRealFunction {\n     /**\n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n /**\n  * Interface representing a univariate real interpolating function.\n  *  \n- * @version $Revision: 1.10 $ $Date: 2004/02/21 21:35:14 $\n+ * @version $Revision: 1.11 $ $Date: 2004/06/23 16:26:14 $\n  */\n public interface UnivariateRealInterpolator {\n \n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * <p>\n  * Implementations will search for only one zero in the given interval.\n  *  \n- * @version $Revision: 1.12 $ $Date: 2004/05/21 14:21:42 $\n+ * @version $Revision: 1.13 $ $Date: 2004/06/23 16:26:14 $\n  */\n public interface UnivariateRealSolver {\n \n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * <p>\n  * Common usage:<pre>\n  * SolverFactory factory = UnivariateRealSolverFactory.newInstance();\n- * \n+ *\n  * // create a Brent solver to use with a UnivariateRealFunction f\n  * BrentSolver solver = factory.newBrentSolver(f);\n  * </pre>\n- * \n+ *\n  * <a href=\"http://jakarta.apache.org/commons/discovery/\">Jakarta Commons Discovery</a>\n  * is used to determine the concrete factory returned by \n  * <code>UnivariateRealSolverFactory.newInstance().</code>  The default is\n  * {@link UnivariateRealSolverFactoryImpl}.\n- * \n- * @version $Revision: 1.14 $ $Date: 2004/04/08 21:19:17 $\n+ *\n+ * @version $Revision: 1.15 $ $Date: 2004/06/23 16:26:14 $\n  */\n public abstract class UnivariateRealSolverFactory {\n     /**\n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * used by commons-math.\n  * <p>\n  * The default solver returned by this factory is a {@link BrentSolver}.\n- * \n- * @version $Revision: 1.12 $ $Date: 2004/06/02 00:10:45 $\n+ *\n+ * @version $Revision: 1.13 $ $Date: 2004/06/23 16:26:14 $\n  */\n public class UnivariateRealSolverFactoryImpl extends UnivariateRealSolverFactory {\n         \n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * Provide a default implementation for several functions useful to generic\n  * solvers.\n  *  \n- * @version $Revision: 1.13 $ $Date: 2004/06/02 00:11:08 $\n+ * @version $Revision: 1.14 $ $Date: 2004/06/23 16:26:14 $\n  */\n public abstract class UnivariateRealSolverImpl implements UnivariateRealSolver, Serializable {\n \n+    /** Serializable version identifier */\n     static final long serialVersionUID = 1112491292565386596L;\n     \n     /** Maximum absolute error. */\n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Utility routines for {@link UnivariateRealSolver} objects.\n- * @version $Revision: 1.8 $ $Date: 2004/04/08 21:19:17 $\n+ * @version $Revision: 1.9 $ $Date: 2004/06/23 16:26:14 $\n  */\n public class UnivariateRealSolverUtils {\n     /**\n--- a/src/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/java/org/apache/commons/math/complex/Complex.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n /**\n  * Representation of a Complex number - a number which has both a \n  * real and imaginary part.\n- * \n+ *\n  * @author Apache Software Foundation\n- * @version $Revision: 1.8 $ $Date: 2004/06/02 00:07:01 $\n+ * @version $Revision: 1.9 $ $Date: 2004/06/23 16:26:16 $\n  */\n public class Complex implements Serializable  {\n \n--- a/src/java/org/apache/commons/math/complex/ComplexFormat.java\n+++ b/src/java/org/apache/commons/math/complex/ComplexFormat.java\n /*\n  * Copyright 2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * can be configured.\n  *\n  * @author Apache Software Foundation\n- * @version $Revision: 1.8 $ $Date: 2004/06/02 00:07:01 $\n+ * @version $Revision: 1.9 $ $Date: 2004/06/23 16:26:16 $\n  */\n public class ComplexFormat extends Format implements Serializable {\n     \n--- a/src/java/org/apache/commons/math/complex/ComplexMath.java\n+++ b/src/java/org/apache/commons/math/complex/ComplexMath.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n /**\n  * Implementations of various transcendental functions for\n  * {@link org.apache.commons.math.complex.Complex} arguments.\n- * \n+ *\n  * Reference:\n  * <ul>\n  * <li><a href=\"http://myweb.lmu.edu/dmsmith/ZMLIB.pdf\">\n  * Multiple Precision Complex Arithmetic and Functions</a></li>\n  * </ul>\n- * \n- * @version $Revision: 1.8 $ $Date: 2004/04/23 18:51:03 $\n+ *\n+ * @version $Revision: 1.9 $ $Date: 2004/06/23 16:26:16 $\n  */\n public class ComplexMath {\n     \n--- a/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * implementations for some of the methods that do not vary from distribution\n  * to distribution.\n  *  \n- * @version $Revision: 1.23 $ $Date: 2004/06/02 00:15:16 $\n+ * @version $Revision: 1.24 $ $Date: 2004/06/23 16:26:15 $\n  */\n public abstract class AbstractContinuousDistribution\n     implements ContinuousDistribution, Serializable {\n \n+    /** Serializable version identifier */\n     static final long serialVersionUID = -38038050983108802L;\n     \n     /**\n--- a/src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * implementations for some of the methods that do not vary from distribution\n  * to distribution.\n  *  \n- * @version $Revision: 1.16 $ $Date: 2004/06/02 00:15:16 $\n+ * @version $Revision: 1.17 $ $Date: 2004/06/23 16:26:15 $\n  */\n public abstract class AbstractDiscreteDistribution\n     implements DiscreteDistribution, Serializable {\n         \n+    /** Serializable version identifier */\n     static final long serialVersionUID = -1146319659338487221L;\n     \n     /**\n--- a/src/java/org/apache/commons/math/distribution/BinomialDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/BinomialDistribution.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  *\n  * Instances of BinomialDistribution objects should be created using\n  * {@link DistributionFactory#createBinomialDistribution(int, double)}.\n- * \n+ *\n  * <p>\n  * References:\n  * <ul>\n  * Binomial Distribution</a></li>\n  * </ul>\n  * </p>\n- * \n- * @version $Revision: 1.10 $ $Date: 2004/04/26 19:15:48 $\n+ *\n+ * @version $Revision: 1.11 $ $Date: 2004/06/23 16:26:15 $\n  */\n public interface BinomialDistribution extends DiscreteDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * The default implementation of {@link BinomialDistribution}.\n- * \n- * @version $Revision: 1.15 $ $Date: 2004/06/02 00:15:16 $\n+ *\n+ * @version $Revision: 1.16 $ $Date: 2004/06/23 16:26:15 $\n  */\n public class BinomialDistributionImpl\n     extends AbstractDiscreteDistribution\n--- a/src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * The Chi-Squared Distribution.\n- * \n+ *\n  * Instances of ChiSquaredDistribution objects should be created using\n  * {@link DistributionFactory#createChiSquareDistribution(double)}.\n- * \n+ *\n  * <p>\n  * References:\n  * <ul>\n  * Chi-Squared Distribution</a></li>\n  * </ul>\n  * </p>\n- * \n- * @version $Revision: 1.13 $ $Date: 2004/04/26 19:15:48 $\n+ *\n+ * @version $Revision: 1.14 $ $Date: 2004/06/23 16:26:15 $\n  */\n public interface ChiSquaredDistribution extends ContinuousDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * The default implementation of {@link ChiSquaredDistribution}\n- * \n- * @version $Revision: 1.17 $ $Date: 2004/06/02 00:15:16 $\n+ *\n+ * @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:15 $\n  */\n public class ChiSquaredDistributionImpl\n     extends AbstractContinuousDistribution\n--- a/src/java/org/apache/commons/math/distribution/ContinuousDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/ContinuousDistribution.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Base interface for various continuous distributions.\n- * \n- * @version $Revision: 1.14 $ $Date: 2004/05/19 14:16:31 $\n+ *\n+ * @version $Revision: 1.15 $ $Date: 2004/06/23 16:26:15 $\n  */\n public interface ContinuousDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/DiscreteDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/DiscreteDistribution.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Base interface for various discrete distributions.\n- * \n- * @version $Revision: 1.14 $ $Date: 2004/05/19 14:16:31 $\n+ *\n+ * @version $Revision: 1.15 $ $Date: 2004/06/23 16:26:15 $\n  */\n public interface DiscreteDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n+++ b/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * <li>Normal</li>\n  * <li>Student's t</li>\n  * </ul>\n- * \n+ *\n  * Common usage:<pre>\n  * DistributionFactory factory = DistributionFactory.newInstance();\n- * \n+ *\n  * // create a Chi-Square distribution with 5 degrees of freedom.\n  * ChiSquaredDistribution chi = factory.createChiSquareDistribution(5.0);\n  * </pre>\n- * \n- * @version $Revision: 1.19 $ $Date: 2004/02/21 21:35:14 $\n+ *\n+ * @version $Revision: 1.20 $ $Date: 2004/06/23 16:26:15 $\n  */\n public abstract class DistributionFactory {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * A concrete distribution factory.  This is the default factory used by\n  * Commons-Math.\n  *  \n- * @version $Revision: 1.19 $ $Date: 2004/06/02 00:14:15 $\n+ * @version $Revision: 1.20 $ $Date: 2004/06/23 16:26:15 $\n  */\n public class DistributionFactoryImpl extends DistributionFactory {\n \n--- a/src/java/org/apache/commons/math/distribution/ExponentialDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/ExponentialDistribution.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * The Exponential Distribution.\n- * \n+ *\n  * Instances of ExponentialDistribution objects should be created using\n  * {@link DistributionFactory#createExponentialDistribution(double)}.\n- * \n+ *\n  * <p>\n  * References:\n  * <ul>\n  * Exponential Distribution</a></li>\n  * </ul>\n  * </p>\n- * \n- * @version $Revision: 1.11 $ $Date: 2004/04/26 19:15:48 $\n+ *\n+ * @version $Revision: 1.12 $ $Date: 2004/06/23 16:26:15 $\n  */\n public interface ExponentialDistribution extends ContinuousDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * The default implementation of {@link ExponentialDistribution}\n- * \n- * @version $Revision: 1.17 $ $Date: 2004/06/06 16:38:05 $\n+ *\n+ * @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:15 $\n  */\n public class ExponentialDistributionImpl extends AbstractContinuousDistribution\n     implements ExponentialDistribution, Serializable {\n--- a/src/java/org/apache/commons/math/distribution/FDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistribution.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * F-Distribution.\n- * \n+ *\n  * Instances of FDistribution objects should be created using\n  * {@link DistributionFactory#createFDistribution(double,double)}.\n- * \n+ *\n  * <p>\n  * References:\n  * <ul>\n  * F-Distribution</a></li>\n  * </ul>\n  * </p>\n- * \n- * @version $Revision: 1.12 $ $Date: 2004/04/26 19:15:48 $\n+ *\n+ * @version $Revision: 1.13 $ $Date: 2004/06/23 16:26:15 $\n  */\n public interface FDistribution extends ContinuousDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n /**\n  * Default implementation of\n  * {@link org.apache.commons.math.distribution.FDistribution}.\n- * \n- * @version $Revision: 1.17 $ $Date: 2004/06/02 00:15:16 $\n+ *\n+ * @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:15 $\n  */\n public class FDistributionImpl\n     extends AbstractContinuousDistribution\n--- a/src/java/org/apache/commons/math/distribution/GammaDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/GammaDistribution.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * The Gamma Distribution.\n- * \n+ *\n  * Instances of GammaDistribution objects should be created using\n  * {@link DistributionFactory#createGammaDistribution(double,double)}.\n- * \n+ *\n  * <p>\n  * References:\n  * <ul>\n  * Gamma Distribution</a></li>\n  * </ul>\n  * </p>\n- * \n- * @version $Revision: 1.14 $ $Date: 2004/04/26 19:15:48 $\n+ *\n+ * @version $Revision: 1.15 $ $Date: 2004/06/23 16:26:15 $\n  */\n public interface GammaDistribution extends ContinuousDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * The default implementation of {@link GammaDistribution}\n- * \n- * @version $Revision: 1.20 $ $Date: 2004/06/02 00:15:16 $\n+ *\n+ * @version $Revision: 1.21 $ $Date: 2004/06/23 16:26:15 $\n  */\n public class GammaDistributionImpl extends AbstractContinuousDistribution\n     implements GammaDistribution, Serializable  {\n--- a/src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * The Hypergeometric Distribution.\n- * \n+ *\n  * Instances of HypergeometricDistribution objects should be created using\n  * {@link DistributionFactory#createHypergeometricDistribution(int, int, int)}.\n- * \n+ *\n  * <p>\n  * References:\n  * <ul>\n  * Hypergeometric Distribution</a></li>\n  * </ul>\n  * </p>\n- * \n- * @version $Revision: 1.9 $ $Date: 2004/04/26 19:15:48 $\n+ *\n+ * @version $Revision: 1.10 $ $Date: 2004/06/23 16:26:15 $\n  */\n public interface HypergeometricDistribution extends DiscreteDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * The default implementation of {@link HypergeometricDistribution}.\n- * \n- * @version $Revision: 1.14 $ $Date: 2004/06/02 00:15:16 $\n+ *\n+ * @version $Revision: 1.15 $ $Date: 2004/06/23 16:26:15 $\n  */\n public class HypergeometricDistributionImpl extends AbstractDiscreteDistribution\n     implements HypergeometricDistribution, Serializable \n--- a/src/java/org/apache/commons/math/distribution/NormalDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistribution.java\n /*\n  * Copyright 2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * Normal (Gauss) Distribution.\n  * Instances of NormalDistribution objects should be created using\n  * {@link DistributionFactory#createNormalDistribution(double, double)}.<p>\n- * \n+ *\n  * <p>\n  * References:<p>\n  * <ul>\n  * Normal Distribution</a></li>\n  * </ul>\n  * </p>\n- * \n- * @version $Revision: 1.7 $ $Date: 2004/05/05 19:59:11 $\n+ *\n+ * @version $Revision: 1.8 $ $Date: 2004/06/23 16:26:15 $\n  */\n public interface NormalDistribution extends ContinuousDistribution {\n \t/**\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n /*\n  * Copyright 2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n /**\n  * Default implementation of\n  * {@link org.apache.commons.math.distribution.NormalDistribution}.\n- * \n- * @version $Revision: 1.11 $ $Date: 2004/06/02 00:15:16 $\n+ *\n+ * @version $Revision: 1.12 $ $Date: 2004/06/23 16:26:15 $\n  */\n public class NormalDistributionImpl extends AbstractContinuousDistribution \n \t\timplements NormalDistribution, Serializable {\n--- a/src/java/org/apache/commons/math/distribution/TDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/TDistribution.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Student's t-Distribution.\n- * \n+ *\n  * Instances of TDistribution objects should be created using\n  * {@link DistributionFactory#createTDistribution(double)}\n- * \n+ *\n  * <p>\n  * References:\n  * <ul>\n  * Student's t-Distribution</a></li>\n  * </ul>\n  * </p>\n- * \n- * @version $Revision: 1.11 $ $Date: 2004/04/26 19:15:48 $\n+ *\n+ * @version $Revision: 1.12 $ $Date: 2004/06/23 16:26:15 $\n  */\n public interface TDistribution extends ContinuousDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/TDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/TDistributionImpl.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n /**\n  * Default implementation of\n  * {@link org.apache.commons.math.distribution.TDistribution}.\n- * \n- * @version $Revision: 1.17 $ $Date: 2004/06/02 00:15:16 $\n+ *\n+ * @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:15 $\n  */\n public class TDistributionImpl\n     extends AbstractContinuousDistribution\n--- a/src/java/org/apache/commons/math/linear/BigMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/BigMatrix.java\n-/*\n- * Copyright 2004 The Apache Software Foundation.\n- * \n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- * \n- *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.commons.math.linear;\n-\n-import java.math.BigDecimal;\n-\n-/**\n- * Interface defining a real-valued matrix with basic algebraic operations, using\n- * BigDecimal representations for the entries.\n- * \n- * @version $Revision: 1.2 $ $Date: 2004/06/06 16:08:52 $\n- */\n-public interface BigMatrix {\n-\n-    /**\n-     * Returns a (deep) copy of this.\n-     *\n-     * @return matrix copy\n-     */\n-    BigMatrix copy();\n-    \n-    /**\n-     * Compute the sum of this and m.\n-     *\n-     * @param m    matrix to be added\n-     * @return     this + m\n-     * @exception  IllegalArgumentException if m is not the same size as this\n-     */\n-    BigMatrix add(BigMatrix m) throws IllegalArgumentException;\n-    \n-    /**\n-     * Compute this minus m.\n-     *\n-     * @param m    matrix to be subtracted\n-     * @return     this + m\n-     * @exception  IllegalArgumentException if m is not the same size as this\n-     */\n-    BigMatrix subtract(BigMatrix m) throws IllegalArgumentException;\n-    \n-     /**\n-     * Returns the result of adding d to each entry of this.\n-     *\n-     * @param d    value to be added to each entry\n-     * @return     d + this\n-     */\n-    BigMatrix scalarAdd(BigDecimal d);\n-    \n-    /**\n-     * Returns the result multiplying each entry of this by d.\n-     *\n-     * @param d    value to multiply all entries by\n-     * @return     d * this\n-     */\n-    BigMatrix scalarMultiply(BigDecimal d);\n-    \n-    /**\n-     * Returns the result postmultiplying this by m.\n-     *\n-     * @param m    matrix to postmultiply by\n-     * @return     this * m\n-     * @throws     IllegalArgumentException \n-     *             if columnDimension(this) != rowDimension(m)\n-     */\n-    BigMatrix multiply(BigMatrix m) throws IllegalArgumentException;\n-    \n-    /**\n-     * Returns the result premultiplying this by <code>m</code>.\n-     * @param m    matrix to premultiply by\n-     * @return     m * this\n-     * @throws     IllegalArgumentException\n-     *             if rowDimension(this) != columnDimension(m)\n-     */\n-    public BigMatrix preMultiply(BigMatrix m) throws IllegalArgumentException;\n-    \n-    /**\n-     * Returns matrix entries as a two-dimensional array.\n-     *\n-     * @return    2-dimensional array of entries\n-     */\n-    BigDecimal[][] getData();\n-\n-    /**\n-     * Returns matrix entries as a two-dimensional array.\n-     *\n-     * @return    2-dimensional array of entries\n-     */\n-    double [][] getDataAsDoubleArray();\n-\n-    /**\n-     * Overwrites the underlying data for the matrix with\n-     * a fresh copy of <code>data</code>.\n-     *\n-     * @param  data  2-dimensional array of entries\n-     */\n-    void setData(BigDecimal[][] data);\n-\n-    /**\n-     * Overwrites the underlying data for the matrix with\n-     * a fresh copy of <code>data</code>.\n-     *\n-     * @param  data  2-dimensional array of entries\n-     */\n-    void setData(double[][] data);\n-\n-    /***\n-     * Sets the rounding mode to use when dividing values\n-     * @see java.math.BigDecimal\n-     * @param roundingMode\n-     */\n-    void setRoundingMode(int roundingMode);\n-\n-    /***\n-     * Gets the rounding mode\n-     * @return\n-     */\n-    int getRoundingMode();\n-\n-    /**\n-     * Returns the <a href=\"http://mathworld.wolfram.com/MaximumAbsoluteRowSumNorm.html\">\n-     * maximum absolute row sum norm</a> of the matrix.\n-     *\n-     * @return norm\n-     */\n-    BigDecimal getNorm();\n-    \n-    /**\n-     * Returns the entries in row number <code>row</code> as an array.\n-     *\n-     * @param row the row to be fetched\n-     * @return array of entries in the row\n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified row is greater\n-     *                              than the number of rows in this matrix\n-     */\n-    BigDecimal[] getRow(int row) throws MatrixIndexException;\n-\n-    /**\n-     * Returns the entries in row number <code>row</code> as an array\n-     * of double values.\n-     *\n-     * @param row the row to be fetched\n-     * @return array of entries in the row\n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified row is greater\n-     *                              than the number of rows in this matrix\n-     */\n-    double [] getRowAsDoubleArray(int row) throws MatrixIndexException;\n-\n-    /**\n-     * Returns the entries in column number <code>col</code> as an array.\n-     *\n-     * @param col  column to fetch\n-     * @return array of entries in the column\n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified column is greater\n-     *                              than the number of columns in this matrix\n-     */\n-    BigDecimal[] getColumn(int col) throws MatrixIndexException;\n-\n-    /**\n-     * Returns the entries in column number <code>col</code> as an array\n-     * of double values.\n-     *\n-     * @param col  column to fetch\n-     * @return array of entries in the column\n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified column is greater\n-     *                              than the number of columns in this matrix\n-     */\n-    double [] getColumnAsDoubleArray(int col) throws MatrixIndexException;\n-\n-    /**\n-     * Returns the entry in the specified row and column.\n-     *\n-     * @param row  row location of entry to be fetched  \n-     * @param column  column location of entry to be fetched\n-     * @return matrix entry in row,column\n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside\n-     *                              the dimensions of this matrix\n-     */\n-    BigDecimal getEntry(int row, int column) throws MatrixIndexException;\n-    \n-    /**\n-     * Returns the entry in the specified row and column as a double\n-     *\n-     * @param row  row location of entry to be fetched\n-     * @param column  column location of entry to be fetched\n-     * @return matrix entry in row,column\n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside\n-     *                              the dimensions of this matrix\n-     */\n-    double getEntryAsDouble(int row, int column) throws MatrixIndexException;\n-\n-    /**\n-     * Sets the entry in the specified row and column to the specified value.\n-     *\n-     * @param row    row location of entry to be set \n-     * @param column    column location of entry to be set\n-     * @param value  value to set \n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside\n-     *                              he dimensions of this matrix\n-     */\n-    void setEntry(int row, int column, BigDecimal value)\n-        throws MatrixIndexException;\n-    \n-    /**\n-     * Sets the entry in the specified row and column to the specified value.\n-     *\n-     * @param row    row location of entry to be set\n-     * @param column    column location of entry to be set\n-     * @param value  value to set\n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside\n-     *                              he dimensions of this matrix\n-     */\n-    void setEntry(int row, int column, double value)\n-        throws MatrixIndexException;\n-\n-    /**\n-     * Returns the transpose of this matrix.\n-     *\n-     * @return transpose matrix\n-     */\n-    BigMatrix transpose();\n-    \n-    /**\n-     * Returns the inverse of this matrix.\n-     *\n-     * @return inverse matrix\n-     * @throws org.apache.commons.math.linear.InvalidMatrixException if  this is not invertible\n-     */\n-    BigMatrix inverse() throws InvalidMatrixException;\n-    \n-    /**\n-     * Returns the determinant of this matrix.\n-     *\n-     * @return determinant\n-      *@throws InvalidMatrixException if matrix is not square\n-     */\n-    BigDecimal getDeterminant();\n-    \n-    /**\n-     * Is this a square matrix?\n-     * @return true if the matrix is square (rowDimension = columnDimension)\n-     */\n-    boolean isSquare();\n-    \n-    /**\n-     * Is this a singular matrix?\n-     * @return true if the matrix is singular\n-     */\n-    boolean isSingular();\n-    \n-    /**\n-     * Returns the number of rows in the matrix.\n-     *\n-     * @return rowDimension\n-     */\n-    int getRowDimension();\n-    \n-    /**\n-     * Returns the number of columns in the matrix.\n-     *\n-     * @return columnDimension\n-     */\n-    int getColumnDimension();\n-    \n-    /**\n-     * Returns the <a href=\"http://mathworld.wolfram.com/MatrixTrace.html\">\n-     * trace</a> of the matrix (the sum of the elements on the main diagonal).\n-     *\n-     * @return trace\n-     */\n-    BigDecimal getTrace();\n-    \n-    /**\n-     * Returns the result of multiplying this by the vector <code>v</code>.\n-     *\n-     * @param v the vector to operate on\n-     * @return this*v\n-     * @throws IllegalArgumentException if columnDimension != v.size()\n-     */\n-    BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException;\n-\n-    /**\n-     * Returns the (row) vector result of premultiplying this by the vector <code>v</code>.\n-     *\n-     * @param v the row vector to premultiply by\n-     * @return v*this\n-     * @throws IllegalArgumentException if rowDimension != v.size()\n-     */\n-    BigDecimal[] preMultiply(BigDecimal[] v) throws IllegalArgumentException;\n-    \n-    /**\n-     * Returns the solution vector for a linear system with coefficient\n-     * matrix = this and constant vector = <code>b</code>.\n-     *\n-     * @param b  constant vector\n-     * @return vector of solution values to AX = b, where A is *this\n-     * @throws IllegalArgumentException if this.rowDimension != b.length \n-     * @throws org.apache.commons.math.linear.InvalidMatrixException if this matrix is not square or is singular\n-     */\n-    BigDecimal[] solve(BigDecimal[] b) throws IllegalArgumentException, InvalidMatrixException;\n-\n-    /**\n-     * Returns a matrix of (column) solution vectors for linear systems with\n-     * coefficient matrix = this and constant vectors = columns of\n-     * <code>b</code>. \n-     *\n-     * @param b  matrix of constant vectors forming RHS of linear systems to\n-     * to solve\n-     * @return matrix of solution vectors\n-     * @throws IllegalArgumentException if this.rowDimension != row dimension\n-     * @throws org.apache.commons.math.linear.InvalidMatrixException if this matrix is not square or is singular\n-     */\n-    BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;\n-}\n-\n+/*\n+ * Copyright 2004 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.linear;\n+\n+import java.math.BigDecimal;\n+\n+/**\n+ * Interface defining a real-valued matrix with basic algebraic operations, using\n+ * BigDecimal representations for the entries.\n+ *\n+ * @version $Revision: 1.3 $ $Date: 2004/06/23 16:26:17 $\n+ */\n+public interface BigMatrix {\n+\n+    /**\n+     * Returns a (deep) copy of this.\n+     *\n+     * @return matrix copy\n+     */\n+    BigMatrix copy();\n+    \n+    /**\n+     * Compute the sum of this and m.\n+     *\n+     * @param m    matrix to be added\n+     * @return     this + m\n+     * @exception  IllegalArgumentException if m is not the same size as this\n+     */\n+    BigMatrix add(BigMatrix m) throws IllegalArgumentException;\n+    \n+    /**\n+     * Compute this minus m.\n+     *\n+     * @param m    matrix to be subtracted\n+     * @return     this + m\n+     * @exception  IllegalArgumentException if m is not the same size as this\n+     */\n+    BigMatrix subtract(BigMatrix m) throws IllegalArgumentException;\n+    \n+     /**\n+     * Returns the result of adding d to each entry of this.\n+     *\n+     * @param d    value to be added to each entry\n+     * @return     d + this\n+     */\n+    BigMatrix scalarAdd(BigDecimal d);\n+    \n+    /**\n+     * Returns the result multiplying each entry of this by d.\n+     *\n+     * @param d    value to multiply all entries by\n+     * @return     d * this\n+     */\n+    BigMatrix scalarMultiply(BigDecimal d);\n+    \n+    /**\n+     * Returns the result postmultiplying this by m.\n+     *\n+     * @param m    matrix to postmultiply by\n+     * @return     this * m\n+     * @throws     IllegalArgumentException \n+     *             if columnDimension(this) != rowDimension(m)\n+     */\n+    BigMatrix multiply(BigMatrix m) throws IllegalArgumentException;\n+    \n+    /**\n+     * Returns the result premultiplying this by <code>m</code>.\n+     * @param m    matrix to premultiply by\n+     * @return     m * this\n+     * @throws     IllegalArgumentException\n+     *             if rowDimension(this) != columnDimension(m)\n+     */\n+    public BigMatrix preMultiply(BigMatrix m) throws IllegalArgumentException;\n+    \n+    /**\n+     * Returns matrix entries as a two-dimensional array.\n+     *\n+     * @return    2-dimensional array of entries\n+     */\n+    BigDecimal[][] getData();\n+\n+    /**\n+     * Returns matrix entries as a two-dimensional array.\n+     *\n+     * @return    2-dimensional array of entries\n+     */\n+    double [][] getDataAsDoubleArray();\n+\n+    /**\n+     * Overwrites the underlying data for the matrix with\n+     * a fresh copy of <code>data</code>.\n+     *\n+     * @param  data  2-dimensional array of entries\n+     */\n+    void setData(BigDecimal[][] data);\n+\n+    /**\n+     * Overwrites the underlying data for the matrix with\n+     * a fresh copy of <code>data</code>.\n+     *\n+     * @param  data  2-dimensional array of entries\n+     */\n+    void setData(double[][] data);\n+\n+    /***\n+     * Sets the rounding mode to use when dividing values\n+     * @see java.math.BigDecimal\n+     * @param roundingMode\n+     */\n+    void setRoundingMode(int roundingMode);\n+\n+    /***\n+     * Gets the rounding mode\n+     * @return the rounding mode\n+     */\n+    int getRoundingMode();\n+\n+    /**\n+     * Returns the <a href=\"http://mathworld.wolfram.com/MaximumAbsoluteRowSumNorm.html\">\n+     * maximum absolute row sum norm</a> of the matrix.\n+     *\n+     * @return norm\n+     */\n+    BigDecimal getNorm();\n+    \n+    /**\n+     * Returns the entries in row number <code>row</code> as an array.\n+     *\n+     * @param row the row to be fetched\n+     * @return array of entries in the row\n+     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified row is greater\n+     *                              than the number of rows in this matrix\n+     */\n+    BigDecimal[] getRow(int row) throws MatrixIndexException;\n+\n+    /**\n+     * Returns the entries in row number <code>row</code> as an array\n+     * of double values.\n+     *\n+     * @param row the row to be fetched\n+     * @return array of entries in the row\n+     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified row is greater\n+     *                              than the number of rows in this matrix\n+     */\n+    double [] getRowAsDoubleArray(int row) throws MatrixIndexException;\n+\n+    /**\n+     * Returns the entries in column number <code>col</code> as an array.\n+     *\n+     * @param col  column to fetch\n+     * @return array of entries in the column\n+     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified column is greater\n+     *                              than the number of columns in this matrix\n+     */\n+    BigDecimal[] getColumn(int col) throws MatrixIndexException;\n+\n+    /**\n+     * Returns the entries in column number <code>col</code> as an array\n+     * of double values.\n+     *\n+     * @param col  column to fetch\n+     * @return array of entries in the column\n+     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified column is greater\n+     *                              than the number of columns in this matrix\n+     */\n+    double [] getColumnAsDoubleArray(int col) throws MatrixIndexException;\n+\n+    /**\n+     * Returns the entry in the specified row and column.\n+     *\n+     * @param row  row location of entry to be fetched  \n+     * @param column  column location of entry to be fetched\n+     * @return matrix entry in row,column\n+     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside\n+     *                              the dimensions of this matrix\n+     */\n+    BigDecimal getEntry(int row, int column) throws MatrixIndexException;\n+    \n+    /**\n+     * Returns the entry in the specified row and column as a double\n+     *\n+     * @param row  row location of entry to be fetched\n+     * @param column  column location of entry to be fetched\n+     * @return matrix entry in row,column\n+     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside\n+     *                              the dimensions of this matrix\n+     */\n+    double getEntryAsDouble(int row, int column) throws MatrixIndexException;\n+\n+    /**\n+     * Sets the entry in the specified row and column to the specified value.\n+     *\n+     * @param row    row location of entry to be set \n+     * @param column    column location of entry to be set\n+     * @param value  value to set \n+     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside\n+     *                              he dimensions of this matrix\n+     */\n+    void setEntry(int row, int column, BigDecimal value)\n+        throws MatrixIndexException;\n+    \n+    /**\n+     * Sets the entry in the specified row and column to the specified value.\n+     *\n+     * @param row    row location of entry to be set\n+     * @param column    column location of entry to be set\n+     * @param value  value to set\n+     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside\n+     *                              he dimensions of this matrix\n+     */\n+    void setEntry(int row, int column, double value)\n+        throws MatrixIndexException;\n+\n+    /**\n+     * Returns the transpose of this matrix.\n+     *\n+     * @return transpose matrix\n+     */\n+    BigMatrix transpose();\n+    \n+    /**\n+     * Returns the inverse of this matrix.\n+     *\n+     * @return inverse matrix\n+     * @throws org.apache.commons.math.linear.InvalidMatrixException if  this is not invertible\n+     */\n+    BigMatrix inverse() throws InvalidMatrixException;\n+    \n+    /**\n+     * Returns the determinant of this matrix.\n+     *\n+     * @return determinant\n+      *@throws InvalidMatrixException if matrix is not square\n+     */\n+    BigDecimal getDeterminant();\n+    \n+    /**\n+     * Is this a square matrix?\n+     * @return true if the matrix is square (rowDimension = columnDimension)\n+     */\n+    boolean isSquare();\n+    \n+    /**\n+     * Is this a singular matrix?\n+     * @return true if the matrix is singular\n+     */\n+    boolean isSingular();\n+    \n+    /**\n+     * Returns the number of rows in the matrix.\n+     *\n+     * @return rowDimension\n+     */\n+    int getRowDimension();\n+    \n+    /**\n+     * Returns the number of columns in the matrix.\n+     *\n+     * @return columnDimension\n+     */\n+    int getColumnDimension();\n+    \n+    /**\n+     * Returns the <a href=\"http://mathworld.wolfram.com/MatrixTrace.html\">\n+     * trace</a> of the matrix (the sum of the elements on the main diagonal).\n+     *\n+     * @return trace\n+     */\n+    BigDecimal getTrace();\n+    \n+    /**\n+     * Returns the result of multiplying this by the vector <code>v</code>.\n+     *\n+     * @param v the vector to operate on\n+     * @return this*v\n+     * @throws IllegalArgumentException if columnDimension != v.size()\n+     */\n+    BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException;\n+\n+    /**\n+     * Returns the (row) vector result of premultiplying this by the vector <code>v</code>.\n+     *\n+     * @param v the row vector to premultiply by\n+     * @return v*this\n+     * @throws IllegalArgumentException if rowDimension != v.size()\n+     */\n+    BigDecimal[] preMultiply(BigDecimal[] v) throws IllegalArgumentException;\n+    \n+    /**\n+     * Returns the solution vector for a linear system with coefficient\n+     * matrix = this and constant vector = <code>b</code>.\n+     *\n+     * @param b  constant vector\n+     * @return vector of solution values to AX = b, where A is *this\n+     * @throws IllegalArgumentException if this.rowDimension != b.length \n+     * @throws org.apache.commons.math.linear.InvalidMatrixException if this matrix is not square or is singular\n+     */\n+    BigDecimal[] solve(BigDecimal[] b) throws IllegalArgumentException, InvalidMatrixException;\n+\n+    /**\n+     * Returns a matrix of (column) solution vectors for linear systems with\n+     * coefficient matrix = this and constant vectors = columns of\n+     * <code>b</code>. \n+     *\n+     * @param b  matrix of constant vectors forming RHS of linear systems to\n+     * to solve\n+     * @return matrix of solution vectors\n+     * @throws IllegalArgumentException if this.rowDimension != row dimension\n+     * @throws org.apache.commons.math.linear.InvalidMatrixException if this matrix is not square or is singular\n+     */\n+    BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;\n+}\n+\n--- a/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n-/*\n- * Copyright 2004 The Apache Software Foundation.\n- * \n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- * \n- *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.commons.math.linear;\n-import java.io.Serializable;\n-import java.math.BigDecimal;\n-\n-/**\n- * Implementation for {@link BigMatrix} using a BigDecimal[][] array to store entries\n- * and <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\">\n- * LU decompostion</a> to support linear system \n- * solution and inverse.\n- * <p>\n- * The LU decompostion is performed as needed, to support the following operations: <ul>\n- * <li>solve</li>\n- * <li>isSingular</li>\n- * <li>getDeterminant</li>\n- * <li>inverse</li> </ul>\n- * <p>\n- * <strong>Usage note</strong>:<br>\n- * The LU decomposition is stored and reused on subsequent calls.  If matrix\n- * data are modified using any of the public setXxx methods, the saved \n- * decomposition is discarded.  If data are modified via references to the\n- * underlying array obtained using <code>getDataRef()</code>, then the stored\n- * LU decomposition will not be discarded.  In this case, you need to \n- * explicitly invoke <code>LUDecompose()</code> to recompute the decomposition\n- * before using any of the methods above.\n- *\n- * @version $Revision: 1.1 $ $Date: 2004/06/06 04:20:45 $\n- */\n-public class BigMatrixImpl implements BigMatrix, Serializable {\n-    \n-    /** Serialization id */\n-    static final long serialVersionUID = -1011428905656140431L;\n-    \n-    private static final BigDecimal ZERO = new BigDecimal(0);\n-    private static final BigDecimal ONE = new BigDecimal(1);\n-    \n-    /** Entries of the matrix */\n-    private BigDecimal data[][] = null;\n-    \n-    /** Entries of cached LU decomposition.\n-     *  All updates to data (other than luDecompose()) *must* set this to null\n-     */\n-    private BigDecimal lu[][] = null;\n-    \n-    /** Permutation associated with LU decompostion */\n-    private int[] permutation = null;\n-    \n-    /** Parity of the permutation associated with the LU decomposition */\n-    private int parity = 1;\n-    \n-    /** Rounding mode for divisions **/\n-    private int roundingMode = BigDecimal.ROUND_HALF_UP;\n-    \n-    /*** BigDecimal scale ***/\n-    private int scale = 64;\n-    \n-    /** Bound to determine effective singularity in LU decomposition */\n-    protected static BigDecimal TOO_SMALL = new BigDecimal(10E-12);\n-    \n-    /** \n-     * Creates a matrix with no data\n-     */\n-    public BigMatrixImpl() {\n-    }\n-    \n-    /**\n-     * Create a new BigMatrix with the supplied row and column dimensions.\n-     *\n-     * @param rowDimension      the number of rows in the new matrix\n-     * @param columnDimension   the number of columns in the new matrix\n-     */\n-    public BigMatrixImpl(int rowDimension, int columnDimension) {\n-        data = new BigDecimal[rowDimension][columnDimension];\n-        lu = null;\n-    }\n-    \n-    /**\n-     * Create a new BigMatrix using the <code>data</code> as the underlying\n-     * data array.\n-     * <p>\n-     * The input array is copied, not referenced.\n-     *\n-     * @param d data for new matrix\n-     */\n-    public BigMatrixImpl(BigDecimal[][] d) {\n-        this.copyIn(d);\n-        lu = null;\n-    }\n-    \n-    /**\n-     * Create a new BigMatrix using the <code>data</code> as the underlying\n-     * data array.\n-     * <p>\n-     * The input array is copied, not referenced.\n-     *\n-     * @param d data for new matrix\n-     */\n-    public BigMatrixImpl(double[][] d) {\n-        this.copyIn(d);\n-        lu = null;\n-    }\n-    \n-    /**\n-     * Create a new (column) BigMatrix using <code>v</code> as the\n-     * data for the unique column of the <code>v.length x 1</code> matrix \n-     * created.\n-     * <p>\n-     * The input array is copied, not referenced.\n-     *\n-     * @param v column vector holding data for new matrix\n-     */\n-    public BigMatrixImpl(BigDecimal[] v) {\n-        int nRows = v.length;\n-        data = new BigDecimal[nRows][1];\n-        for (int row = 0; row < nRows; row++) {\n-            data[row][0] = v[row];\n-        }\n-    }\n-    \n-    /**\n-     * Create a new BigMatrix which is a copy of this.\n-     *\n-     * @return  the cloned matrix\n-     */\n-    public BigMatrix copy() {\n-        return new BigMatrixImpl(this.copyOut());\n-    }\n-    \n-    /**\n-     * Compute the sum of this and <code>m</code>.\n-     *\n-     * @param m    matrix to be added\n-     * @return     this + m\n-     * @exception  IllegalArgumentException if m is not the same size as this\n-     */\n-    public BigMatrix add(BigMatrix m) throws IllegalArgumentException {\n-        if (this.getColumnDimension() != m.getColumnDimension() ||\n-                this.getRowDimension() != m.getRowDimension()) {\n-            throw new IllegalArgumentException(\"matrix dimension mismatch\");\n-        }\n-        int rowCount = this.getRowDimension();\n-        int columnCount = this.getColumnDimension();\n-        BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];\n-        BigDecimal[][] mData = m.getData();\n-        for (int row = 0; row < rowCount; row++) {\n-            for (int col = 0; col < columnCount; col++) {\n-                outData[row][col] = data[row][col].add(mData[row][col]);\n-            }\n-        }\n-        return new BigMatrixImpl(outData);\n-    }\n-    \n-    /**\n-     * Compute  this minus <code>m</code>.\n-     *\n-     * @param m    matrix to be subtracted\n-     * @return     this + m\n-     * @exception  IllegalArgumentException if m is not the same size as *this\n-     */\n-    public BigMatrix subtract(BigMatrix m) throws IllegalArgumentException {\n-        if (this.getColumnDimension() != m.getColumnDimension() ||\n-                this.getRowDimension() != m.getRowDimension()) {\n-            throw new IllegalArgumentException(\"matrix dimension mismatch\");\n-        }\n-        int rowCount = this.getRowDimension();\n-        int columnCount = this.getColumnDimension();\n-        BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];\n-        BigDecimal[][] mData = m.getData();\n-        for (int row = 0; row < rowCount; row++) {\n-            for (int col = 0; col < columnCount; col++) {\n-                outData[row][col] = data[row][col].subtract(mData[row][col]);\n-            }\n-        }\n-        return new BigMatrixImpl(outData);\n-    }\n-    \n-    /**\n-     * Returns the result of adding d to each entry of this.\n-     *\n-     * @param d    value to be added to each entry\n-     * @return     d + this\n-     */\n-    public BigMatrix scalarAdd(BigDecimal d) {\n-        int rowCount = this.getRowDimension();\n-        int columnCount = this.getColumnDimension();\n-        BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];\n-        for (int row = 0; row < rowCount; row++) {\n-            for (int col = 0; col < columnCount; col++) {\n-                outData[row][col] = data[row][col].add(d);\n-            }\n-        }\n-        return new BigMatrixImpl(outData);\n-    }\n-    \n-    /**\n-     * Returns the result multiplying each entry of this by <code>d</code>\n-     * @param d  value to multiply all entries by\n-     * @return d * this\n-     */\n-    public BigMatrix scalarMultiply(BigDecimal d) {\n-        int rowCount = this.getRowDimension();\n-        int columnCount = this.getColumnDimension();\n-        BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];\n-        for (int row = 0; row < rowCount; row++) {\n-            for (int col = 0; col < columnCount; col++) {\n-                outData[row][col] = data[row][col].multiply(d);\n-            }\n-        }\n-        return new BigMatrixImpl(outData);\n-    }\n-    \n-    /**\n-     * Returns the result postmultiplying this by <code>m</code>.\n-     * @param m    matrix to postmultiply by\n-     * @return     this*m\n-     * @throws     IllegalArgumentException\n-     *             if columnDimension(this) != rowDimension(m)\n-     */\n-    public BigMatrix multiply(BigMatrix m) throws IllegalArgumentException {\n-        if (this.getColumnDimension() != m.getRowDimension()) {\n-            throw new IllegalArgumentException(\"Matrices are not multiplication compatible.\");\n-        }\n-        int nRows = this.getRowDimension();\n-        int nCols = m.getColumnDimension();\n-        int nSum = this.getColumnDimension();\n-        BigDecimal[][] mData = m.getData();\n-        BigDecimal[][] outData = new BigDecimal[nRows][nCols];\n-        BigDecimal sum = ZERO;\n-        for (int row = 0; row < nRows; row++) {\n-            for (int col = 0; col < nCols; col++) {\n-                sum = ZERO;\n-                for (int i = 0; i < nSum; i++) {\n-                    sum = sum.add(data[row][i].multiply(mData[i][col]));\n-                }\n-                outData[row][col] = sum;\n-            }\n-        }\n-        return new BigMatrixImpl(outData);\n-    }\n-    \n-    /**\n-     * Returns the result premultiplying this by <code>m</code>.\n-     * @param m    matrix to premultiply by\n-     * @return     m * this\n-     * @throws     IllegalArgumentException\n-     *             if rowDimension(this) != columnDimension(m)\n-     */\n-    public BigMatrix preMultiply(BigMatrix m) throws IllegalArgumentException {\n-        return m.multiply(this);\n-    }\n-    \n-    /**\n-     * Returns matrix entries as a two-dimensional array.\n-     * <p>\n-     * Makes a fresh copy of the underlying data.\n-     *\n-     * @return    2-dimensional array of entries\n-     */\n-    public BigDecimal[][] getData() {\n-        return copyOut();\n-    }\n-    \n-    public double[][] getDataAsDoubleArray() {\n-        int nRows = getRowDimension();\n-        int nCols = getColumnDimension();\n-        double d[][] = new double[nRows][nCols];\n-        for (int i = 0; i < nRows; i++) {\n-            for (int j=0; j<nCols;j++) {\n-                d[i][j] = data[i][j].doubleValue();\n-            }\n-        }\n-        return d;\n-    }\n-    \n-    /**\n-     * Overwrites the underlying data for the matrix\n-     * with a fresh copy of <code>inData</code>.\n-     *\n-     * @param  inData 2-dimensional array of entries\n-     */\n-    public void setData(BigDecimal[][] inData) {\n-        copyIn(inData);\n-        lu = null;\n-    }\n-    \n-    public void setData(double[][] inData) {\n-        copyIn(inData);\n-        lu = null;\n-    }\n-    \n-    /**\n-     * Returns a reference to the underlying data array.\n-     * <p>\n-     * Does not make a fresh copy of the underlying data.\n-     *\n-     * @return 2-dimensional array of entries\n-     */\n-    public BigDecimal[][] getDataRef() {\n-        return data;\n-    }\n-    \n-    /**\n-     * Overwrites the underlying data for the matrix\n-     * with a reference to <code>inData</code>.\n-     * <p>\n-     * Does not make a fresh copy of <code>data</code>.\n-     *\n-     * @param  inData 2-dimensional array of entries\n-     */\n-    public void setDataRef(BigDecimal[][] inData) {\n-        this.data = inData;\n-        lu = null;\n-    }\n-    \n-    /***\n-     * Gets the rounding mode for division operations\n-     * The default is {@link BigDecimal.ROUND_HALF_UP}\n-     * @see BigDecimal\n-     * @return\n-     */ \n-    public int getRoundingMode() {\n-        return roundingMode;\n-    }\n-    \n-    /***\n-     * Sets the rounding mode for decimal divisions.\n-     * @see BigDecimal\n-     * @param roundingMode\n-     */\n-    public void setRoundingMode(int roundingMode) {\n-        this.roundingMode = roundingMode;\n-    }\n-    \n-    /***\n-     * Sets the scale for division operations.\n-     * The default is 64\n-     * @see BigDecimal\n-     * @return\n-     */\n-    public int getScale() {\n-        return scale;\n-    }\n-    \n-    /***\n-     * Sets the scale for division operations.\n-     * @see BigDecimal\n-     * @param scale\n-     */\n-    public void setScale(int scale) {\n-        this.scale = scale;\n-    }\n-    \n-    /**\n-     * Returns the <a href=\"http://mathworld.wolfram.com/MaximumAbsoluteRowSumNorm.html\">\n-     * maximum absolute row sum norm</a> of the matrix.\n-     *\n-     * @return norm\n-     */\n-    public BigDecimal getNorm() {\n-        BigDecimal maxColSum = ZERO;\n-        for (int col = 0; col < this.getColumnDimension(); col++) {\n-            BigDecimal sum = ZERO;\n-            for (int row = 0; row < this.getRowDimension(); row++) {\n-                sum = sum.add(data[row][col].abs());\n-            }\n-            maxColSum = maxColSum.max(sum);\n-        }\n-        return maxColSum;\n-    }\n-    \n-    /**\n-     * Returns the entries in row number <code>row</code> as an array.\n-     *\n-     * @param row the row to be fetched\n-     * @return array of entries in the row\n-     * @throws MatrixIndexException if the specified row is greater \n-     *                              than the number of rows in this matrix\n-     */\n-    public BigDecimal[] getRow(int row) throws MatrixIndexException {\n-        if ( !isValidCoordinate( row, 1 ) ) {\n-            throw new MatrixIndexException(\"illegal row argument\");\n-        }\n-        int ncols = this.getColumnDimension();\n-        BigDecimal[] out = new BigDecimal[ncols];\n-        System.arraycopy(data[row - 1], 0, out, 0, ncols);\n-        return out;\n-    }\n-    \n-    /**\n-     * Returns the entries in row number <code>row</code> as an array\n-     * of double values.\n-     *\n-     * @param row the row to be fetched\n-     * @return array of entries in the row\n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified row is greater\n-     *                              than the number of rows in this matrix\n-     */\n-    public double[] getRowAsDoubleArray(int row) throws MatrixIndexException {\n-        if ( !isValidCoordinate( row, 1 ) ) {\n-            throw new MatrixIndexException(\"illegal row argument\");\n-        }\n-        int ncols = this.getColumnDimension();\n-        double[] out = new double[ncols];\n-        for (int i=0;i<ncols;i++) {\n-            out[i] = data[row-1][i].doubleValue();\n-        }\n-        return out;\n-    }\n-    \n-    /**\n-     * Returns the entries in column number <code>col</code> as an array.\n-     *\n-     * @param col  column to fetch\n-     * @return array of entries in the column\n-     * @throws MatrixIndexException if the specified column is greater\n-     *                              than the number of columns in this matrix\n-     */\n-    public BigDecimal[] getColumn(int col) throws MatrixIndexException {\n-        if ( !isValidCoordinate(1, col) ) {\n-            throw new MatrixIndexException(\"illegal column argument\");\n-        }\n-        int nRows = this.getRowDimension();\n-        BigDecimal[] out = new BigDecimal[nRows];\n-        for (int i = 0; i < nRows; i++) {\n-            out[i] = data[i][col - 1];\n-        }\n-        return out;\n-    }\n-    \n-    /**\n-     * Returns the entries in column number <code>col</code> as an array\n-     * of double values.\n-     *\n-     * @param col  column to fetch\n-     * @return array of entries in the column\n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified column is greater\n-     *                              than the number of columns in this matrix\n-     */\n-    public double[] getColumnAsDoubleArray(int col) throws MatrixIndexException {\n-        if ( !isValidCoordinate( 1, col ) ) {\n-            throw new MatrixIndexException(\"illegal column argument\");\n-        }\n-        int nrows = this.getRowDimension();\n-        double[] out = new double[nrows];\n-        for (int i=0;i<nrows;i++) {\n-            out[i] = data[i][col-1].doubleValue();\n-        }\n-        return out;\n-    }\n-    \n-    /**\n-     * Returns the entry in the specified row and column.\n-     *\n-     * @param row  row location of entry to be fetched  \n-     * @param column  column location of entry to be fetched\n-     * @return matrix entry in row,column\n-     * @throws MatrixIndexException if the specified coordinate is outside \n-     *                              the dimensions of this matrix\n-     */\n-    public BigDecimal getEntry(int row, int column)\n-    throws MatrixIndexException {\n-        if (!isValidCoordinate(row,column)) {\n-            throw new MatrixIndexException(\"matrix entry does not exist\");\n-        }\n-        return data[row - 1][column - 1];\n-    }\n-    \n-    /**\n-     * Returns the entry in the specified row and column as a double\n-     *\n-     * @param row  row location of entry to be fetched\n-     * @param column  column location of entry to be fetched\n-     * @return matrix entry in row,column\n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside\n-     *                              the dimensions of this matrix\n-     */\n-    public double getEntryAsDouble(int row, int column) throws MatrixIndexException {\n-        return getEntry(row,column).doubleValue();\n-    }\n-    \n-    /**\n-     * Sets the entry in the specified row and column to the specified value.\n-     *\n-     * @param row    row location of entry to be set \n-     * @param column    column location of entry to be set\n-     * @param value  value to set \n-     * @throws MatrixIndexException if the specified coordinate is outside\n-     *                              he dimensions of this matrix\n-     */\n-    public void setEntry(int row, int column, BigDecimal value)\n-    throws MatrixIndexException {\n-        if (!isValidCoordinate(row,column)) {\n-            throw new MatrixIndexException(\"matrix entry does not exist\");\n-        }\n-        data[row - 1][column - 1] = value;\n-        lu = null;\n-    }\n-    \n-    /**\n-     * Sets the entry in the specified row and column to the specified value.\n-     *\n-     * @param row    row location of entry to be set\n-     * @param column    column location of entry to be set\n-     * @param value  value to set\n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside\n-     *                              he dimensions of this matrix\n-     */\n-    public void setEntry(int row, int column, double value) throws MatrixIndexException {\n-        setEntry(row, column, new BigDecimal(value));\n-    }\n-    \n-    /**\n-     * Returns the transpose matrix.\n-     *\n-     * @return transpose matrix\n-     */\n-    public BigMatrix transpose() {\n-        int nRows = this.getRowDimension();\n-        int nCols = this.getColumnDimension();\n-        BigMatrixImpl out = new BigMatrixImpl(nCols, nRows);\n-        BigDecimal[][] outData = out.getDataRef();\n-        for (int row = 0; row < nRows; row++) {\n-            for (int col = 0; col < nCols; col++) {\n-                outData[col][row] = data[row][col];\n-            }\n-        }\n-        return out;\n-    }\n-    \n-    /**\n-     * Returns the inverse matrix if this matrix is invertible.\n-     * \n-     * @return inverse matrix\n-     * @throws InvalidMatrixException if this is not invertible\n-     */\n-    public BigMatrix inverse() throws InvalidMatrixException {\n-        return solve(getIdentity(this.getRowDimension()));\n-    }\n-    \n-    /**\n-     * Returns the determinant of this matrix.\n-     *\n-     * @return determinant\n-     * @throws InvalidMatrixException if matrix is not square\n-     */\n-    public BigDecimal getDeterminant() throws InvalidMatrixException {\n-        if (!isSquare()) {\n-            throw new InvalidMatrixException(\"matrix is not square\");\n-        }\n-        if (isSingular()) {   // note: this has side effect of attempting LU decomp if lu == null\n-            return ZERO;\n-        } else {\n-            BigDecimal det = (parity == 1) ? ONE : ONE.negate();\n-            for (int i = 0; i < this.getRowDimension(); i++) {\n-                det = det.multiply(lu[i][i]);\n-            }\n-            return det;\n-        }\n-    }\n-    \n-     /**\n-     * Is this a square matrix?\n-     * @return true if the matrix is square (rowDimension = columnDimension)\n-     */\n-    public boolean isSquare() {\n-        return (this.getColumnDimension() == this.getRowDimension());\n-    }\n-    \n-    /**\n-     * Is this a singular matrix?\n-     * @return true if the matrix is singular\n-     */\n-    public boolean isSingular() {\n-        if (lu == null) {\n-            try {\n-                luDecompose();\n-                return false;\n-            } catch (InvalidMatrixException ex) {\n-                return true;\n-            }\n-        } else { // LU decomp must have been successfully performed\n-            return false; // so the matrix is not singular\n-        }\n-    }\n-    \n-    /**\n-     * Returns the number of rows in the matrix.\n-     *\n-     * @return rowDimension\n-     */\n-    public int getRowDimension() {\n-        return data.length;\n-    }\n-    \n-    /**\n-     * Returns the number of columns in the matrix.\n-     *\n-     * @return columnDimension\n-     */\n-    public int getColumnDimension() {\n-        return data[0].length;\n-    }\n-    \n-     /**\n-     * Returns the <a href=\"http://mathworld.wolfram.com/MatrixTrace.html\">\n-     * trace</a> of the matrix (the sum of the elements on the main diagonal).\n-     *\n-     * @return trace\n-     */\n-    public BigDecimal getTrace() throws IllegalArgumentException {\n-        if (!isSquare()) {\n-            throw new IllegalArgumentException(\"matrix is not square\");\n-        }\n-        BigDecimal trace = data[0][0];\n-        for (int i = 1; i < this.getRowDimension(); i++) {\n-            trace = trace.add(data[i][i]);\n-        }\n-        return trace;\n-    }\n-    \n-    /**\n-     * Returns the result of multiplying this by the vector <code>v</code>.\n-     *\n-     * @param v the vector to operate on\n-     * @return this*v\n-     * @throws IllegalArgumentException if columnDimension != v.size()\n-     */\n-    public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException {\n-        if (v.length != this.getColumnDimension()) {\n-            throw new IllegalArgumentException(\"vector has wrong length\");\n-        }\n-        int nRows = this.getRowDimension();\n-        int nCols = this.getColumnDimension();\n-        BigDecimal[] out = new BigDecimal[v.length];\n-        for (int row = 0; row < nRows; row++) {\n-            BigDecimal sum = ZERO;\n-            for (int i = 0; i < nCols; i++) {\n-                sum = sum.add(data[row][i].multiply(v[i]));\n-            }\n-            out[row] = sum;\n-        }\n-        return out;\n-    }\n-    \n-    /**\n-     * Returns the result of multiplying this by the vector <code>v</code>.\n-     *\n-     * @param v the vector to operate on\n-     * @return this*v\n-     * @throws IllegalArgumentException if columnDimension != v.size()\n-     */\n-    public BigDecimal[] operate(double[] v) throws IllegalArgumentException {\n-        BigDecimal bd[] = new BigDecimal[v.length];\n-        for (int i=0;i<bd.length;i++) {\n-            bd[i] = new BigDecimal(v[i]);\n-        }\n-        return operate(bd);\n-    }\n-    \n-    /**\n-     * Returns the (row) vector result of premultiplying this by the vector <code>v</code>.\n-     *\n-     * @param v the row vector to premultiply by\n-     * @return v*this\n-     * @throws IllegalArgumentException if rowDimension != v.size()\n-     */\n-    public BigDecimal[] preMultiply(BigDecimal[] v) throws IllegalArgumentException {\n-        int nRows = this.getRowDimension();\n-        if (v.length != nRows) {\n-            throw new IllegalArgumentException(\"vector has wrong length\");\n-        }\n-        int nCols = this.getColumnDimension();\n-        BigDecimal[] out = new BigDecimal[nCols];\n-        for (int col = 0; col < nCols; col++) {\n-            BigDecimal sum = ZERO;\n-            for (int i = 0; i < nRows; i++) {\n-                sum = sum.add(data[i][col].multiply(v[i]));\n-            }\n-            out[col] = sum;\n-        }\n-        return out;\n-    }\n-    \n-    /**\n-     * Returns a matrix of (column) solution vectors for linear systems with\n-     * coefficient matrix = this and constant vectors = columns of\n-     * <code>b</code>. \n-     *\n-     * @param b  array of constants forming RHS of linear systems to\n-     * to solve\n-     * @return solution array\n-     * @throws IllegalArgumentException if this.rowDimension != row dimension\n-     * @throws InvalidMatrixException if this matrix is not square or is singular\n-     */\n-    public BigDecimal[] solve(BigDecimal[] b) throws IllegalArgumentException, InvalidMatrixException {\n-        int nRows = this.getRowDimension();\n-        if (b.length != nRows) {\n-            throw new IllegalArgumentException(\"constant vector has wrong length\");\n-        }\n-        BigMatrix bMatrix = new BigMatrixImpl(b);\n-        BigDecimal[][] solution = ((BigMatrixImpl) (solve(bMatrix))).getDataRef();\n-        BigDecimal[] out = new BigDecimal[nRows];\n-        for (int row = 0; row < nRows; row++) {\n-            out[row] = solution[row][0];\n-        }\n-        return out;\n-    }\n-    \n-    /**\n-     * Returns a matrix of (column) solution vectors for linear systems with\n-     * coefficient matrix = this and constant vectors = columns of\n-     * <code>b</code>. \n-     *\n-     * @param b  array of constants forming RHS of linear systems to\n-     * to solve\n-     * @return solution array\n-     * @throws IllegalArgumentException if this.rowDimension != row dimension\n-     * @throws InvalidMatrixException if this matrix is not square or is singular\n-     */\n-    public BigDecimal[] solve(double[] b) throws IllegalArgumentException, InvalidMatrixException {\n-        BigDecimal bd[] = new BigDecimal[b.length];\n-        for (int i=0;i<bd.length;i++) {\n-            bd[i] = new BigDecimal(b[i]);\n-        }\n-        return solve(bd);\n-    }\n-    \n-    /**\n-     * Returns a matrix of (column) solution vectors for linear systems with\n-     * coefficient matrix = this and constant vectors = columns of\n-     * <code>b</code>. \n-     *\n-     * @param b  matrix of constant vectors forming RHS of linear systems to\n-     * to solve\n-     * @return matrix of solution vectors\n-     * @throws IllegalArgumentException if this.rowDimension != row dimension\n-     * @throws InvalidMatrixException if this matrix is not square or is singular\n-     */\n-    public BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException  {\n-        if (b.getRowDimension() != this.getRowDimension()) {\n-            throw new IllegalArgumentException(\"Incorrect row dimension\");\n-        }\n-        if (!this.isSquare()) {\n-            throw new InvalidMatrixException(\"coefficient matrix is not square\");\n-        }\n-        if (this.isSingular()) { // side effect: compute LU decomp\n-            throw new InvalidMatrixException(\"Matrix is singular.\");\n-        }\n-        \n-        int nCol = this.getColumnDimension();\n-        int nColB = b.getColumnDimension();\n-        int nRowB = b.getRowDimension();\n-        \n-        // Apply permutations to b\n-        BigDecimal[][] bv = b.getData();\n-        BigDecimal[][] bp = new BigDecimal[nRowB][nColB];\n-        for (int row = 0; row < nRowB; row++) {\n-            for (int col = 0; col < nColB; col++) {\n-                bp[row][col] = bv[permutation[row]][col];\n-            }\n-        }\n-        bv = null;\n-        \n-        // Solve LY = b\n-        for (int col = 0; col < nCol; col++) {\n-            for (int i = col + 1; i < nCol; i++) {\n-                for (int j = 0; j < nColB; j++) {\n-                    bp[i][j] = bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n-                }\n-            }\n-        }\n-        \n-        // Solve UX = Y\n-        for (int col = nCol - 1; col >= 0; col--) {\n-            for (int j = 0; j < nColB; j++) {\n-                bp[col][j] = bp[col][j].divide(lu[col][col], scale, roundingMode);\n-            }\n-            for (int i = 0; i < col; i++) {\n-                for (int j = 0; j < nColB; j++) {\n-                    bp[i][j] = bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n-                }\n-            }\n-        }\n-        \n-        BigMatrixImpl outMat = new BigMatrixImpl(bp);\n-        return outMat;\n-    }\n-    \n-    /**\n-     * Computes a new \n-     * <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\">\n-     * LU decompostion</a> for this matrix, storing the result for use by other methods. \n-     * <p>\n-     * <strong>Implementation Note</strong>:<br>\n-     * Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\">\n-     * Crout's algortithm</a>, with partial pivoting.\n-     * <p>\n-     * <strong>Usage Note</strong>:<br>\n-     * This method should rarely be invoked directly. Its only use is\n-     * to force recomputation of the LU decomposition when changes have been\n-     * made to the underlying data using direct array references. Changes\n-     * made using setXxx methods will trigger recomputation when needed\n-     * automatically.\n-     *\n-     * @throws InvalidMatrixException if the matrix is non-square or singular.\n-     */\n-    public void luDecompose() throws InvalidMatrixException {\n-        \n-        int nRows = this.getRowDimension();\n-        int nCols = this.getColumnDimension();\n-        if (nRows != nCols) {\n-            throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n-        }\n-        lu = this.getData();\n-        \n-        // Initialize permutation array and parity\n-        permutation = new int[nRows];\n-        for (int row = 0; row < nRows; row++) {\n-            permutation[row] = row;\n-        }\n-        parity = 1;\n-        \n-        // Loop over columns\n-        for (int col = 0; col < nCols; col++) {\n-            \n-            BigDecimal sum = ZERO;\n-            \n-            // upper\n-            for (int row = 0; row < col; row++) {\n-                sum = lu[row][col];\n-                for (int i = 0; i < row; i++) {\n-                    sum = sum.subtract(lu[row][i].multiply(lu[i][col]));\n-                }\n-                lu[row][col] = sum;\n-            }\n-            \n-            // lower\n-            int max = col; // permutation row\n-            BigDecimal largest = ZERO;\n-            for (int row = col; row < nRows; row++) {\n-                sum = lu[row][col];\n-                for (int i = 0; i < col; i++) {\n-                    sum = sum.subtract(lu[row][i].multiply(lu[i][col]));\n-                }\n-                lu[row][col] = sum;\n-                \n-                // maintain best permutation choice\n-                if (sum.abs().compareTo(largest) == 1) {\n-                    largest = sum.abs();\n-                    max = row;\n-                }\n-            }\n-            \n-            // Singularity check\n-            if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0) {\n-                lu = null;\n-                throw new InvalidMatrixException(\"matrix is singular\");\n-            }\n-            \n-            // Pivot if necessary\n-            if (max != col) {\n-                BigDecimal tmp = ZERO;\n-                for (int i = 0; i < nCols; i++) {\n-                    tmp = lu[max][i];\n-                    lu[max][i] = lu[col][i];\n-                    lu[col][i] = tmp;\n-                }\n-                int temp = permutation[max];\n-                permutation[max] = permutation[col];\n-                permutation[col] = temp;\n-                parity = -parity;\n-            }\n-            \n-            //Divide the lower elements by the \"winning\" diagonal elt.\n-            for (int row = col + 1; row < nRows; row++) {\n-                lu[row][col] = lu[row][col].divide(lu[col][col], scale, roundingMode);\n-            }\n-            \n-        }\n-        \n-    }\n-    \n-    /**\n-     * \n-     * @see Object#toString()\n-     */\n-    public String toString() {\n-        StringBuffer res = new StringBuffer();\n-        res.append(\"BigMatrixImpl{\");\n-        for (int i = 0; i < data.length; i++) {\n-            if (i > 0)\n-                res.append(\",\");\n-            res.append(\"{\");\n-            for (int j = 0; j < data[0].length; j++) {\n-                if (j > 0)\n-                    res.append(\",\");\n-                res.append(data[i][j]);\n-            } //for\n-            res.append(\"}\");\n-        } //for\n-        res.append(\"}\");\n-        return res.toString();\n-    } //toString\n-    \n-    //------------------------ Protected methods\n-    \n-    /**\n-     * Returns <code>dimension x dimension</code> identity matrix.\n-     *\n-     * @param dimension dimension of identity matrix to generate\n-     * @return identity matrix\n-     */\n-    protected BigMatrix getIdentity(int dimension) {\n-        BigMatrixImpl out = new BigMatrixImpl(dimension, dimension);\n-        BigDecimal[][] d = out.getDataRef();\n-        for (int row = 0; row < dimension; row++) {\n-            for (int col = 0; col < dimension; col++) {\n-                d[row][col] = row == col ? ONE : ZERO;\n-            }\n-        }\n-        return out;\n-    }\n-    \n-    /**\n-     *  Returns the LU decomposition as a BigMatrix.\n-     *  Returns a fresh copy of the cached LU matrix if this has been computed; \n-     *  otherwise the composition is computed and cached for use by other methods.   \n-     *  Since a copy is returned in either case, changes to the returned matrix do not \n-     *  affect the LU decomposition property. \n-     * <p>\n-     * The matrix returned is a compact representation of the LU decomposition. \n-     * Elements below the main diagonal correspond to entries of the \"L\" matrix;   \n-     * elements on and above the main diagonal correspond to entries of the \"U\"\n-     * matrix.\n-     * <p>\n-     * Example: <pre>\n-     * \n-     *     Returned matrix                L                  U\n-     *         2  3  1                   1  0  0            2  3  1          \n-     *         5  4  6                   5  1  0            0  4  6\n-     *         1  7  8                   1  7  1            0  0  8          \n-     * </pre>\n-     * \n-     * The L and U matrices satisfy the matrix equation LU = permuteRows(this), <br>\n-     *  where permuteRows reorders the rows of the matrix to follow the order determined\n-     *  by the <a href=#getPermutation()>permutation</a> property.\n-     * \n-     * @return LU decomposition matrix\n-     * @throws InvalidMatrixException if the matrix is non-square or singular.\n-     */\n-    protected BigMatrix getLUMatrix() throws InvalidMatrixException {\n-        if (lu == null) {\n-            luDecompose();\n-        }\n-        return new BigMatrixImpl(lu);\n-    }\n-    \n-    /**\n-     * Returns the permutation associated with the lu decomposition.\n-     * The entries of the array represent a permutation of the numbers 0, ... , nRows - 1.\n-     * <p>\n-     * Example:\n-     * permutation = [1, 2, 0] means current 2nd row is first, current third row is second\n-     * and current first row is last.\n-     * <p>\n-     * Returns a fresh copy of the array.\n-     * \n-     * @return the permutation\n-     */\n-    protected int[] getPermutation() {\n-        int[] out = new int[permutation.length];\n-        System.arraycopy(permutation, 0, out, 0, permutation.length);\n-        return out;\n-    }\n-    \n-    //------------------------ Private methods\n-    \n-    /**\n-     * Returns a fresh copy of the underlying data array.\n-     *\n-     * @return a copy of the underlying data array.\n-     */\n-    private BigDecimal[][] copyOut() {\n-        int nRows = this.getRowDimension();\n-        BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension()];\n-        // can't copy 2-d array in one shot, otherwise get row references\n-        for (int i = 0; i < nRows; i++) {\n-            System.arraycopy(data[i], 0, out[i], 0, data[i].length);\n-        }\n-        return out;\n-    }\n-    \n-    /**\n-     * Replaces data with a fresh copy of the input array.\n-     *\n-     * @param in data to copy in\n-     */\n-    private void copyIn(BigDecimal[][] in) {\n-        int nRows = in.length;\n-        int nCols = in[0].length;\n-        data = new BigDecimal[nRows][nCols];\n-        System.arraycopy(in, 0, data, 0, in.length);\n-        for (int i = 0; i < nRows; i++) {\n-            System.arraycopy(in[i], 0, data[i], 0, nCols);\n-        }\n-        lu = null;\n-    }\n-    \n-    /**\n-     * Replaces data with a fresh copy of the input array.\n-     *\n-     * @param in data to copy in\n-     */\n-    private void copyIn(double[][] in) {\n-        int nRows = in.length;\n-        int nCols = in[0].length;\n-        data = new BigDecimal[nRows][nCols];\n-        for (int i = 0; i < nRows; i++) {\n-            for (int j=0; j < nCols; j++) {\n-                data[i][j] = new BigDecimal(in[i][j]);\n-            }\n-        }\n-        lu = null;\n-    }\n-    \n-    /**\n-     * Tests a given coordinate as being valid or invalid\n-     *\n-     * @param row the row index.\n-     * @param col the column index.\n-     * @return true if the coordinate is with the current dimensions\n-     */\n-    private boolean isValidCoordinate(int row, int col) {\n-        int nRows = this.getRowDimension();\n-        int nCols = this.getColumnDimension();\n-        \n-        return !(row < 1 || row > nRows || col < 1 || col > nCols);\n-    }\n-    \n-}\n+/*\n+ * Copyright 2004 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.linear;\n+import java.io.Serializable;\n+import java.math.BigDecimal;\n+\n+/**\n+ * Implementation for {@link BigMatrix} using a BigDecimal[][] array to store entries\n+ * and <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\">\n+ * LU decompostion</a> to support linear system \n+ * solution and inverse.\n+ * <p>\n+ * The LU decompostion is performed as needed, to support the following operations: <ul>\n+ * <li>solve</li>\n+ * <li>isSingular</li>\n+ * <li>getDeterminant</li>\n+ * <li>inverse</li> </ul>\n+ * <p>\n+ * <strong>Usage note</strong>:<br>\n+ * The LU decomposition is stored and reused on subsequent calls.  If matrix\n+ * data are modified using any of the public setXxx methods, the saved \n+ * decomposition is discarded.  If data are modified via references to the\n+ * underlying array obtained using <code>getDataRef()</code>, then the stored\n+ * LU decomposition will not be discarded.  In this case, you need to \n+ * explicitly invoke <code>LUDecompose()</code> to recompute the decomposition\n+ * before using any of the methods above.\n+ *\n+ * @version $Revision: 1.2 $ $Date: 2004/06/23 16:26:17 $\n+ */\n+public class BigMatrixImpl implements BigMatrix, Serializable {\n+    \n+    /** Serialization id */\n+    static final long serialVersionUID = -1011428905656140431L;\n+    \n+    /** The number zero. */\n+    private static final BigDecimal ZERO = new BigDecimal(0);\n+    \n+    /** The number one. */\n+    private static final BigDecimal ONE = new BigDecimal(1);\n+    \n+    /** Entries of the matrix */\n+    private BigDecimal data[][] = null;\n+    \n+    /** Entries of cached LU decomposition.\n+     *  All updates to data (other than luDecompose()) *must* set this to null\n+     */\n+    private BigDecimal lu[][] = null;\n+    \n+    /** Permutation associated with LU decompostion */\n+    private int[] permutation = null;\n+    \n+    /** Parity of the permutation associated with the LU decomposition */\n+    private int parity = 1;\n+    \n+    /** Rounding mode for divisions **/\n+    private int roundingMode = BigDecimal.ROUND_HALF_UP;\n+    \n+    /*** BigDecimal scale ***/\n+    private int scale = 64;\n+    \n+    /** Bound to determine effective singularity in LU decomposition */\n+    protected static BigDecimal TOO_SMALL = new BigDecimal(10E-12);\n+    \n+    /** \n+     * Creates a matrix with no data\n+     */\n+    public BigMatrixImpl() {\n+    }\n+    \n+    /**\n+     * Create a new BigMatrix with the supplied row and column dimensions.\n+     *\n+     * @param rowDimension      the number of rows in the new matrix\n+     * @param columnDimension   the number of columns in the new matrix\n+     */\n+    public BigMatrixImpl(int rowDimension, int columnDimension) {\n+        data = new BigDecimal[rowDimension][columnDimension];\n+        lu = null;\n+    }\n+    \n+    /**\n+     * Create a new BigMatrix using the <code>data</code> as the underlying\n+     * data array.\n+     * <p>\n+     * The input array is copied, not referenced.\n+     *\n+     * @param d data for new matrix\n+     */\n+    public BigMatrixImpl(BigDecimal[][] d) {\n+        this.copyIn(d);\n+        lu = null;\n+    }\n+    \n+    /**\n+     * Create a new BigMatrix using the <code>data</code> as the underlying\n+     * data array.\n+     * <p>\n+     * The input array is copied, not referenced.\n+     *\n+     * @param d data for new matrix\n+     */\n+    public BigMatrixImpl(double[][] d) {\n+        this.copyIn(d);\n+        lu = null;\n+    }\n+    \n+    /**\n+     * Create a new (column) BigMatrix using <code>v</code> as the\n+     * data for the unique column of the <code>v.length x 1</code> matrix \n+     * created.\n+     * <p>\n+     * The input array is copied, not referenced.\n+     *\n+     * @param v column vector holding data for new matrix\n+     */\n+    public BigMatrixImpl(BigDecimal[] v) {\n+        int nRows = v.length;\n+        data = new BigDecimal[nRows][1];\n+        for (int row = 0; row < nRows; row++) {\n+            data[row][0] = v[row];\n+        }\n+    }\n+    \n+    /**\n+     * Create a new BigMatrix which is a copy of this.\n+     *\n+     * @return  the cloned matrix\n+     */\n+    public BigMatrix copy() {\n+        return new BigMatrixImpl(this.copyOut());\n+    }\n+    \n+    /**\n+     * Compute the sum of this and <code>m</code>.\n+     *\n+     * @param m    matrix to be added\n+     * @return     this + m\n+     * @exception  IllegalArgumentException if m is not the same size as this\n+     */\n+    public BigMatrix add(BigMatrix m) throws IllegalArgumentException {\n+        if (this.getColumnDimension() != m.getColumnDimension() ||\n+                this.getRowDimension() != m.getRowDimension()) {\n+            throw new IllegalArgumentException(\"matrix dimension mismatch\");\n+        }\n+        int rowCount = this.getRowDimension();\n+        int columnCount = this.getColumnDimension();\n+        BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];\n+        BigDecimal[][] mData = m.getData();\n+        for (int row = 0; row < rowCount; row++) {\n+            for (int col = 0; col < columnCount; col++) {\n+                outData[row][col] = data[row][col].add(mData[row][col]);\n+            }\n+        }\n+        return new BigMatrixImpl(outData);\n+    }\n+    \n+    /**\n+     * Compute  this minus <code>m</code>.\n+     *\n+     * @param m    matrix to be subtracted\n+     * @return     this + m\n+     * @exception  IllegalArgumentException if m is not the same size as *this\n+     */\n+    public BigMatrix subtract(BigMatrix m) throws IllegalArgumentException {\n+        if (this.getColumnDimension() != m.getColumnDimension() ||\n+                this.getRowDimension() != m.getRowDimension()) {\n+            throw new IllegalArgumentException(\"matrix dimension mismatch\");\n+        }\n+        int rowCount = this.getRowDimension();\n+        int columnCount = this.getColumnDimension();\n+        BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];\n+        BigDecimal[][] mData = m.getData();\n+        for (int row = 0; row < rowCount; row++) {\n+            for (int col = 0; col < columnCount; col++) {\n+                outData[row][col] = data[row][col].subtract(mData[row][col]);\n+            }\n+        }\n+        return new BigMatrixImpl(outData);\n+    }\n+    \n+    /**\n+     * Returns the result of adding d to each entry of this.\n+     *\n+     * @param d    value to be added to each entry\n+     * @return     d + this\n+     */\n+    public BigMatrix scalarAdd(BigDecimal d) {\n+        int rowCount = this.getRowDimension();\n+        int columnCount = this.getColumnDimension();\n+        BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];\n+        for (int row = 0; row < rowCount; row++) {\n+            for (int col = 0; col < columnCount; col++) {\n+                outData[row][col] = data[row][col].add(d);\n+            }\n+        }\n+        return new BigMatrixImpl(outData);\n+    }\n+    \n+    /**\n+     * Returns the result multiplying each entry of this by <code>d</code>\n+     * @param d  value to multiply all entries by\n+     * @return d * this\n+     */\n+    public BigMatrix scalarMultiply(BigDecimal d) {\n+        int rowCount = this.getRowDimension();\n+        int columnCount = this.getColumnDimension();\n+        BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];\n+        for (int row = 0; row < rowCount; row++) {\n+            for (int col = 0; col < columnCount; col++) {\n+                outData[row][col] = data[row][col].multiply(d);\n+            }\n+        }\n+        return new BigMatrixImpl(outData);\n+    }\n+    \n+    /**\n+     * Returns the result postmultiplying this by <code>m</code>.\n+     * @param m    matrix to postmultiply by\n+     * @return     this*m\n+     * @throws     IllegalArgumentException\n+     *             if columnDimension(this) != rowDimension(m)\n+     */\n+    public BigMatrix multiply(BigMatrix m) throws IllegalArgumentException {\n+        if (this.getColumnDimension() != m.getRowDimension()) {\n+            throw new IllegalArgumentException(\"Matrices are not multiplication compatible.\");\n+        }\n+        int nRows = this.getRowDimension();\n+        int nCols = m.getColumnDimension();\n+        int nSum = this.getColumnDimension();\n+        BigDecimal[][] mData = m.getData();\n+        BigDecimal[][] outData = new BigDecimal[nRows][nCols];\n+        BigDecimal sum = ZERO;\n+        for (int row = 0; row < nRows; row++) {\n+            for (int col = 0; col < nCols; col++) {\n+                sum = ZERO;\n+                for (int i = 0; i < nSum; i++) {\n+                    sum = sum.add(data[row][i].multiply(mData[i][col]));\n+                }\n+                outData[row][col] = sum;\n+            }\n+        }\n+        return new BigMatrixImpl(outData);\n+    }\n+    \n+    /**\n+     * Returns the result premultiplying this by <code>m</code>.\n+     * @param m    matrix to premultiply by\n+     * @return     m * this\n+     * @throws     IllegalArgumentException\n+     *             if rowDimension(this) != columnDimension(m)\n+     */\n+    public BigMatrix preMultiply(BigMatrix m) throws IllegalArgumentException {\n+        return m.multiply(this);\n+    }\n+    \n+    /**\n+     * Returns matrix entries as a two-dimensional array.\n+     * <p>\n+     * Makes a fresh copy of the underlying data.\n+     *\n+     * @return    2-dimensional array of entries\n+     */\n+    public BigDecimal[][] getData() {\n+        return copyOut();\n+    }\n+    \n+    /**\n+     * Returns matrix entries as a two-dimensional array.\n+     * <p>\n+     * Makes a fresh copy of the underlying data converted to\n+     * <code>double</code> values.\n+     *\n+     * @return    2-dimensional array of entries\n+     */\n+    public double[][] getDataAsDoubleArray() {\n+        int nRows = getRowDimension();\n+        int nCols = getColumnDimension();\n+        double d[][] = new double[nRows][nCols];\n+        for (int i = 0; i < nRows; i++) {\n+            for (int j=0; j<nCols;j++) {\n+                d[i][j] = data[i][j].doubleValue();\n+            }\n+        }\n+        return d;\n+    }\n+    \n+    /**\n+     * Overwrites the underlying data for the matrix\n+     * with a fresh copy of <code>inData</code>.\n+     *\n+     * @param  inData 2-dimensional array of entries\n+     */\n+    public void setData(BigDecimal[][] inData) {\n+        copyIn(inData);\n+        lu = null;\n+    }\n+    \n+    /**\n+     * Overwrites the underlying data for the matrix\n+     * with a fresh copy of <code>inData</code>.\n+     *\n+     * @param  inData 2-dimensional array of entries\n+     */\n+    public void setData(double[][] inData) {\n+        copyIn(inData);\n+        lu = null;\n+    }\n+    \n+    /**\n+     * Returns a reference to the underlying data array.\n+     * <p>\n+     * Does not make a fresh copy of the underlying data.\n+     *\n+     * @return 2-dimensional array of entries\n+     */\n+    public BigDecimal[][] getDataRef() {\n+        return data;\n+    }\n+    \n+    /**\n+     * Overwrites the underlying data for the matrix\n+     * with a reference to <code>inData</code>.\n+     * <p>\n+     * Does not make a fresh copy of <code>data</code>.\n+     *\n+     * @param  inData 2-dimensional array of entries\n+     */\n+    public void setDataRef(BigDecimal[][] inData) {\n+        this.data = inData;\n+        lu = null;\n+    }\n+    \n+    /***\n+     * Gets the rounding mode for division operations\n+     * The default is {@link BigDecimal#ROUND_HALF_UP}\n+     * @see BigDecimal\n+     * @return the rounding mode.\n+     */ \n+    public int getRoundingMode() {\n+        return roundingMode;\n+    }\n+    \n+    /***\n+     * Sets the rounding mode for decimal divisions.\n+     * @see BigDecimal\n+     * @param roundingMode\n+     */\n+    public void setRoundingMode(int roundingMode) {\n+        this.roundingMode = roundingMode;\n+    }\n+    \n+    /***\n+     * Sets the scale for division operations.\n+     * The default is 64\n+     * @see BigDecimal\n+     * @return the scale\n+     */\n+    public int getScale() {\n+        return scale;\n+    }\n+    \n+    /***\n+     * Sets the scale for division operations.\n+     * @see BigDecimal\n+     * @param scale\n+     */\n+    public void setScale(int scale) {\n+        this.scale = scale;\n+    }\n+    \n+    /**\n+     * Returns the <a href=\"http://mathworld.wolfram.com/MaximumAbsoluteRowSumNorm.html\">\n+     * maximum absolute row sum norm</a> of the matrix.\n+     *\n+     * @return norm\n+     */\n+    public BigDecimal getNorm() {\n+        BigDecimal maxColSum = ZERO;\n+        for (int col = 0; col < this.getColumnDimension(); col++) {\n+            BigDecimal sum = ZERO;\n+            for (int row = 0; row < this.getRowDimension(); row++) {\n+                sum = sum.add(data[row][col].abs());\n+            }\n+            maxColSum = maxColSum.max(sum);\n+        }\n+        return maxColSum;\n+    }\n+    \n+    /**\n+     * Returns the entries in row number <code>row</code> as an array.\n+     *\n+     * @param row the row to be fetched\n+     * @return array of entries in the row\n+     * @throws MatrixIndexException if the specified row is greater \n+     *                              than the number of rows in this matrix\n+     */\n+    public BigDecimal[] getRow(int row) throws MatrixIndexException {\n+        if ( !isValidCoordinate( row, 1 ) ) {\n+            throw new MatrixIndexException(\"illegal row argument\");\n+        }\n+        int ncols = this.getColumnDimension();\n+        BigDecimal[] out = new BigDecimal[ncols];\n+        System.arraycopy(data[row - 1], 0, out, 0, ncols);\n+        return out;\n+    }\n+    \n+    /**\n+     * Returns the entries in row number <code>row</code> as an array\n+     * of double values.\n+     *\n+     * @param row the row to be fetched\n+     * @return array of entries in the row\n+     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified row is greater\n+     *                              than the number of rows in this matrix\n+     */\n+    public double[] getRowAsDoubleArray(int row) throws MatrixIndexException {\n+        if ( !isValidCoordinate( row, 1 ) ) {\n+            throw new MatrixIndexException(\"illegal row argument\");\n+        }\n+        int ncols = this.getColumnDimension();\n+        double[] out = new double[ncols];\n+        for (int i=0;i<ncols;i++) {\n+            out[i] = data[row-1][i].doubleValue();\n+        }\n+        return out;\n+    }\n+    \n+    /**\n+     * Returns the entries in column number <code>col</code> as an array.\n+     *\n+     * @param col  column to fetch\n+     * @return array of entries in the column\n+     * @throws MatrixIndexException if the specified column is greater\n+     *                              than the number of columns in this matrix\n+     */\n+    public BigDecimal[] getColumn(int col) throws MatrixIndexException {\n+        if ( !isValidCoordinate(1, col) ) {\n+            throw new MatrixIndexException(\"illegal column argument\");\n+        }\n+        int nRows = this.getRowDimension();\n+        BigDecimal[] out = new BigDecimal[nRows];\n+        for (int i = 0; i < nRows; i++) {\n+            out[i] = data[i][col - 1];\n+        }\n+        return out;\n+    }\n+    \n+    /**\n+     * Returns the entries in column number <code>col</code> as an array\n+     * of double values.\n+     *\n+     * @param col  column to fetch\n+     * @return array of entries in the column\n+     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified column is greater\n+     *                              than the number of columns in this matrix\n+     */\n+    public double[] getColumnAsDoubleArray(int col) throws MatrixIndexException {\n+        if ( !isValidCoordinate( 1, col ) ) {\n+            throw new MatrixIndexException(\"illegal column argument\");\n+        }\n+        int nrows = this.getRowDimension();\n+        double[] out = new double[nrows];\n+        for (int i=0;i<nrows;i++) {\n+            out[i] = data[i][col-1].doubleValue();\n+        }\n+        return out;\n+    }\n+    \n+    /**\n+     * Returns the entry in the specified row and column.\n+     *\n+     * @param row  row location of entry to be fetched  \n+     * @param column  column location of entry to be fetched\n+     * @return matrix entry in row,column\n+     * @throws MatrixIndexException if the specified coordinate is outside \n+     *                              the dimensions of this matrix\n+     */\n+    public BigDecimal getEntry(int row, int column)\n+    throws MatrixIndexException {\n+        if (!isValidCoordinate(row,column)) {\n+            throw new MatrixIndexException(\"matrix entry does not exist\");\n+        }\n+        return data[row - 1][column - 1];\n+    }\n+    \n+    /**\n+     * Returns the entry in the specified row and column as a double\n+     *\n+     * @param row  row location of entry to be fetched\n+     * @param column  column location of entry to be fetched\n+     * @return matrix entry in row,column\n+     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside\n+     *                              the dimensions of this matrix\n+     */\n+    public double getEntryAsDouble(int row, int column) throws MatrixIndexException {\n+        return getEntry(row,column).doubleValue();\n+    }\n+    \n+    /**\n+     * Sets the entry in the specified row and column to the specified value.\n+     *\n+     * @param row    row location of entry to be set \n+     * @param column    column location of entry to be set\n+     * @param value  value to set \n+     * @throws MatrixIndexException if the specified coordinate is outside\n+     *                              he dimensions of this matrix\n+     */\n+    public void setEntry(int row, int column, BigDecimal value)\n+    throws MatrixIndexException {\n+        if (!isValidCoordinate(row,column)) {\n+            throw new MatrixIndexException(\"matrix entry does not exist\");\n+        }\n+        data[row - 1][column - 1] = value;\n+        lu = null;\n+    }\n+    \n+    /**\n+     * Sets the entry in the specified row and column to the specified value.\n+     *\n+     * @param row    row location of entry to be set\n+     * @param column    column location of entry to be set\n+     * @param value  value to set\n+     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside\n+     *                              he dimensions of this matrix\n+     */\n+    public void setEntry(int row, int column, double value) throws MatrixIndexException {\n+        setEntry(row, column, new BigDecimal(value));\n+    }\n+    \n+    /**\n+     * Returns the transpose matrix.\n+     *\n+     * @return transpose matrix\n+     */\n+    public BigMatrix transpose() {\n+        int nRows = this.getRowDimension();\n+        int nCols = this.getColumnDimension();\n+        BigMatrixImpl out = new BigMatrixImpl(nCols, nRows);\n+        BigDecimal[][] outData = out.getDataRef();\n+        for (int row = 0; row < nRows; row++) {\n+            for (int col = 0; col < nCols; col++) {\n+                outData[col][row] = data[row][col];\n+            }\n+        }\n+        return out;\n+    }\n+    \n+    /**\n+     * Returns the inverse matrix if this matrix is invertible.\n+     * \n+     * @return inverse matrix\n+     * @throws InvalidMatrixException if this is not invertible\n+     */\n+    public BigMatrix inverse() throws InvalidMatrixException {\n+        return solve(getIdentity(this.getRowDimension()));\n+    }\n+    \n+    /**\n+     * Returns the determinant of this matrix.\n+     *\n+     * @return determinant\n+     * @throws InvalidMatrixException if matrix is not square\n+     */\n+    public BigDecimal getDeterminant() throws InvalidMatrixException {\n+        if (!isSquare()) {\n+            throw new InvalidMatrixException(\"matrix is not square\");\n+        }\n+        if (isSingular()) {   // note: this has side effect of attempting LU decomp if lu == null\n+            return ZERO;\n+        } else {\n+            BigDecimal det = (parity == 1) ? ONE : ONE.negate();\n+            for (int i = 0; i < this.getRowDimension(); i++) {\n+                det = det.multiply(lu[i][i]);\n+            }\n+            return det;\n+        }\n+    }\n+    \n+     /**\n+     * Is this a square matrix?\n+     * @return true if the matrix is square (rowDimension = columnDimension)\n+     */\n+    public boolean isSquare() {\n+        return (this.getColumnDimension() == this.getRowDimension());\n+    }\n+    \n+    /**\n+     * Is this a singular matrix?\n+     * @return true if the matrix is singular\n+     */\n+    public boolean isSingular() {\n+        if (lu == null) {\n+            try {\n+                luDecompose();\n+                return false;\n+            } catch (InvalidMatrixException ex) {\n+                return true;\n+            }\n+        } else { // LU decomp must have been successfully performed\n+            return false; // so the matrix is not singular\n+        }\n+    }\n+    \n+    /**\n+     * Returns the number of rows in the matrix.\n+     *\n+     * @return rowDimension\n+     */\n+    public int getRowDimension() {\n+        return data.length;\n+    }\n+    \n+    /**\n+     * Returns the number of columns in the matrix.\n+     *\n+     * @return columnDimension\n+     */\n+    public int getColumnDimension() {\n+        return data[0].length;\n+    }\n+    \n+     /**\n+     * Returns the <a href=\"http://mathworld.wolfram.com/MatrixTrace.html\">\n+     * trace</a> of the matrix (the sum of the elements on the main diagonal).\n+     *\n+     * @return trace\n+     * \n+     * @throws IllegalArgumentException if this matrix is not square.\n+     */\n+    public BigDecimal getTrace() throws IllegalArgumentException {\n+        if (!isSquare()) {\n+            throw new IllegalArgumentException(\"matrix is not square\");\n+        }\n+        BigDecimal trace = data[0][0];\n+        for (int i = 1; i < this.getRowDimension(); i++) {\n+            trace = trace.add(data[i][i]);\n+        }\n+        return trace;\n+    }\n+    \n+    /**\n+     * Returns the result of multiplying this by the vector <code>v</code>.\n+     *\n+     * @param v the vector to operate on\n+     * @return this*v\n+     * @throws IllegalArgumentException if columnDimension != v.size()\n+     */\n+    public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException {\n+        if (v.length != this.getColumnDimension()) {\n+            throw new IllegalArgumentException(\"vector has wrong length\");\n+        }\n+        int nRows = this.getRowDimension();\n+        int nCols = this.getColumnDimension();\n+        BigDecimal[] out = new BigDecimal[v.length];\n+        for (int row = 0; row < nRows; row++) {\n+            BigDecimal sum = ZERO;\n+            for (int i = 0; i < nCols; i++) {\n+                sum = sum.add(data[row][i].multiply(v[i]));\n+            }\n+            out[row] = sum;\n+        }\n+        return out;\n+    }\n+    \n+    /**\n+     * Returns the result of multiplying this by the vector <code>v</code>.\n+     *\n+     * @param v the vector to operate on\n+     * @return this*v\n+     * @throws IllegalArgumentException if columnDimension != v.size()\n+     */\n+    public BigDecimal[] operate(double[] v) throws IllegalArgumentException {\n+        BigDecimal bd[] = new BigDecimal[v.length];\n+        for (int i=0;i<bd.length;i++) {\n+            bd[i] = new BigDecimal(v[i]);\n+        }\n+        return operate(bd);\n+    }\n+    \n+    /**\n+     * Returns the (row) vector result of premultiplying this by the vector <code>v</code>.\n+     *\n+     * @param v the row vector to premultiply by\n+     * @return v*this\n+     * @throws IllegalArgumentException if rowDimension != v.size()\n+     */\n+    public BigDecimal[] preMultiply(BigDecimal[] v) throws IllegalArgumentException {\n+        int nRows = this.getRowDimension();\n+        if (v.length != nRows) {\n+            throw new IllegalArgumentException(\"vector has wrong length\");\n+        }\n+        int nCols = this.getColumnDimension();\n+        BigDecimal[] out = new BigDecimal[nCols];\n+        for (int col = 0; col < nCols; col++) {\n+            BigDecimal sum = ZERO;\n+            for (int i = 0; i < nRows; i++) {\n+                sum = sum.add(data[i][col].multiply(v[i]));\n+            }\n+            out[col] = sum;\n+        }\n+        return out;\n+    }\n+    \n+    /**\n+     * Returns a matrix of (column) solution vectors for linear systems with\n+     * coefficient matrix = this and constant vectors = columns of\n+     * <code>b</code>. \n+     *\n+     * @param b  array of constants forming RHS of linear systems to\n+     * to solve\n+     * @return solution array\n+     * @throws IllegalArgumentException if this.rowDimension != row dimension\n+     * @throws InvalidMatrixException if this matrix is not square or is singular\n+     */\n+    public BigDecimal[] solve(BigDecimal[] b) throws IllegalArgumentException, InvalidMatrixException {\n+        int nRows = this.getRowDimension();\n+        if (b.length != nRows) {\n+            throw new IllegalArgumentException(\"constant vector has wrong length\");\n+        }\n+        BigMatrix bMatrix = new BigMatrixImpl(b);\n+        BigDecimal[][] solution = ((BigMatrixImpl) (solve(bMatrix))).getDataRef();\n+        BigDecimal[] out = new BigDecimal[nRows];\n+        for (int row = 0; row < nRows; row++) {\n+            out[row] = solution[row][0];\n+        }\n+        return out;\n+    }\n+    \n+    /**\n+     * Returns a matrix of (column) solution vectors for linear systems with\n+     * coefficient matrix = this and constant vectors = columns of\n+     * <code>b</code>. \n+     *\n+     * @param b  array of constants forming RHS of linear systems to\n+     * to solve\n+     * @return solution array\n+     * @throws IllegalArgumentException if this.rowDimension != row dimension\n+     * @throws InvalidMatrixException if this matrix is not square or is singular\n+     */\n+    public BigDecimal[] solve(double[] b) throws IllegalArgumentException, InvalidMatrixException {\n+        BigDecimal bd[] = new BigDecimal[b.length];\n+        for (int i=0;i<bd.length;i++) {\n+            bd[i] = new BigDecimal(b[i]);\n+        }\n+        return solve(bd);\n+    }\n+    \n+    /**\n+     * Returns a matrix of (column) solution vectors for linear systems with\n+     * coefficient matrix = this and constant vectors = columns of\n+     * <code>b</code>. \n+     *\n+     * @param b  matrix of constant vectors forming RHS of linear systems to\n+     * to solve\n+     * @return matrix of solution vectors\n+     * @throws IllegalArgumentException if this.rowDimension != row dimension\n+     * @throws InvalidMatrixException if this matrix is not square or is singular\n+     */\n+    public BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException  {\n+        if (b.getRowDimension() != this.getRowDimension()) {\n+            throw new IllegalArgumentException(\"Incorrect row dimension\");\n+        }\n+        if (!this.isSquare()) {\n+            throw new InvalidMatrixException(\"coefficient matrix is not square\");\n+        }\n+        if (this.isSingular()) { // side effect: compute LU decomp\n+            throw new InvalidMatrixException(\"Matrix is singular.\");\n+        }\n+        \n+        int nCol = this.getColumnDimension();\n+        int nColB = b.getColumnDimension();\n+        int nRowB = b.getRowDimension();\n+        \n+        // Apply permutations to b\n+        BigDecimal[][] bv = b.getData();\n+        BigDecimal[][] bp = new BigDecimal[nRowB][nColB];\n+        for (int row = 0; row < nRowB; row++) {\n+            for (int col = 0; col < nColB; col++) {\n+                bp[row][col] = bv[permutation[row]][col];\n+            }\n+        }\n+        bv = null;\n+        \n+        // Solve LY = b\n+        for (int col = 0; col < nCol; col++) {\n+            for (int i = col + 1; i < nCol; i++) {\n+                for (int j = 0; j < nColB; j++) {\n+                    bp[i][j] = bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n+                }\n+            }\n+        }\n+        \n+        // Solve UX = Y\n+        for (int col = nCol - 1; col >= 0; col--) {\n+            for (int j = 0; j < nColB; j++) {\n+                bp[col][j] = bp[col][j].divide(lu[col][col], scale, roundingMode);\n+            }\n+            for (int i = 0; i < col; i++) {\n+                for (int j = 0; j < nColB; j++) {\n+                    bp[i][j] = bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));\n+                }\n+            }\n+        }\n+        \n+        BigMatrixImpl outMat = new BigMatrixImpl(bp);\n+        return outMat;\n+    }\n+    \n+    /**\n+     * Computes a new \n+     * <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\">\n+     * LU decompostion</a> for this matrix, storing the result for use by other methods. \n+     * <p>\n+     * <strong>Implementation Note</strong>:<br>\n+     * Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\">\n+     * Crout's algortithm</a>, with partial pivoting.\n+     * <p>\n+     * <strong>Usage Note</strong>:<br>\n+     * This method should rarely be invoked directly. Its only use is\n+     * to force recomputation of the LU decomposition when changes have been\n+     * made to the underlying data using direct array references. Changes\n+     * made using setXxx methods will trigger recomputation when needed\n+     * automatically.\n+     *\n+     * @throws InvalidMatrixException if the matrix is non-square or singular.\n+     */\n+    public void luDecompose() throws InvalidMatrixException {\n+        \n+        int nRows = this.getRowDimension();\n+        int nCols = this.getColumnDimension();\n+        if (nRows != nCols) {\n+            throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n+        }\n+        lu = this.getData();\n+        \n+        // Initialize permutation array and parity\n+        permutation = new int[nRows];\n+        for (int row = 0; row < nRows; row++) {\n+            permutation[row] = row;\n+        }\n+        parity = 1;\n+        \n+        // Loop over columns\n+        for (int col = 0; col < nCols; col++) {\n+            \n+            BigDecimal sum = ZERO;\n+            \n+            // upper\n+            for (int row = 0; row < col; row++) {\n+                sum = lu[row][col];\n+                for (int i = 0; i < row; i++) {\n+                    sum = sum.subtract(lu[row][i].multiply(lu[i][col]));\n+                }\n+                lu[row][col] = sum;\n+            }\n+            \n+            // lower\n+            int max = col; // permutation row\n+            BigDecimal largest = ZERO;\n+            for (int row = col; row < nRows; row++) {\n+                sum = lu[row][col];\n+                for (int i = 0; i < col; i++) {\n+                    sum = sum.subtract(lu[row][i].multiply(lu[i][col]));\n+                }\n+                lu[row][col] = sum;\n+                \n+                // maintain best permutation choice\n+                if (sum.abs().compareTo(largest) == 1) {\n+                    largest = sum.abs();\n+                    max = row;\n+                }\n+            }\n+            \n+            // Singularity check\n+            if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0) {\n+                lu = null;\n+                throw new InvalidMatrixException(\"matrix is singular\");\n+            }\n+            \n+            // Pivot if necessary\n+            if (max != col) {\n+                BigDecimal tmp = ZERO;\n+                for (int i = 0; i < nCols; i++) {\n+                    tmp = lu[max][i];\n+                    lu[max][i] = lu[col][i];\n+                    lu[col][i] = tmp;\n+                }\n+                int temp = permutation[max];\n+                permutation[max] = permutation[col];\n+                permutation[col] = temp;\n+                parity = -parity;\n+            }\n+            \n+            //Divide the lower elements by the \"winning\" diagonal elt.\n+            for (int row = col + 1; row < nRows; row++) {\n+                lu[row][col] = lu[row][col].divide(lu[col][col], scale, roundingMode);\n+            }\n+            \n+        }\n+        \n+    }\n+    \n+    /**\n+     * \n+     * @see Object#toString()\n+     */\n+    public String toString() {\n+        StringBuffer res = new StringBuffer();\n+        res.append(\"BigMatrixImpl{\");\n+        for (int i = 0; i < data.length; i++) {\n+            if (i > 0)\n+                res.append(\",\");\n+            res.append(\"{\");\n+            for (int j = 0; j < data[0].length; j++) {\n+                if (j > 0)\n+                    res.append(\",\");\n+                res.append(data[i][j]);\n+            } //for\n+            res.append(\"}\");\n+        } //for\n+        res.append(\"}\");\n+        return res.toString();\n+    } //toString\n+    \n+    //------------------------ Protected methods\n+    \n+    /**\n+     * Returns <code>dimension x dimension</code> identity matrix.\n+     *\n+     * @param dimension dimension of identity matrix to generate\n+     * @return identity matrix\n+     */\n+    protected BigMatrix getIdentity(int dimension) {\n+        BigMatrixImpl out = new BigMatrixImpl(dimension, dimension);\n+        BigDecimal[][] d = out.getDataRef();\n+        for (int row = 0; row < dimension; row++) {\n+            for (int col = 0; col < dimension; col++) {\n+                d[row][col] = row == col ? ONE : ZERO;\n+            }\n+        }\n+        return out;\n+    }\n+    \n+    /**\n+     *  Returns the LU decomposition as a BigMatrix.\n+     *  Returns a fresh copy of the cached LU matrix if this has been computed; \n+     *  otherwise the composition is computed and cached for use by other methods.   \n+     *  Since a copy is returned in either case, changes to the returned matrix do not \n+     *  affect the LU decomposition property. \n+     * <p>\n+     * The matrix returned is a compact representation of the LU decomposition. \n+     * Elements below the main diagonal correspond to entries of the \"L\" matrix;   \n+     * elements on and above the main diagonal correspond to entries of the \"U\"\n+     * matrix.\n+     * <p>\n+     * Example: <pre>\n+     * \n+     *     Returned matrix                L                  U\n+     *         2  3  1                   1  0  0            2  3  1          \n+     *         5  4  6                   5  1  0            0  4  6\n+     *         1  7  8                   1  7  1            0  0  8          \n+     * </pre>\n+     * \n+     * The L and U matrices satisfy the matrix equation LU = permuteRows(this), <br>\n+     *  where permuteRows reorders the rows of the matrix to follow the order determined\n+     *  by the <a href=#getPermutation()>permutation</a> property.\n+     * \n+     * @return LU decomposition matrix\n+     * @throws InvalidMatrixException if the matrix is non-square or singular.\n+     */\n+    protected BigMatrix getLUMatrix() throws InvalidMatrixException {\n+        if (lu == null) {\n+            luDecompose();\n+        }\n+        return new BigMatrixImpl(lu);\n+    }\n+    \n+    /**\n+     * Returns the permutation associated with the lu decomposition.\n+     * The entries of the array represent a permutation of the numbers 0, ... , nRows - 1.\n+     * <p>\n+     * Example:\n+     * permutation = [1, 2, 0] means current 2nd row is first, current third row is second\n+     * and current first row is last.\n+     * <p>\n+     * Returns a fresh copy of the array.\n+     * \n+     * @return the permutation\n+     */\n+    protected int[] getPermutation() {\n+        int[] out = new int[permutation.length];\n+        System.arraycopy(permutation, 0, out, 0, permutation.length);\n+        return out;\n+    }\n+    \n+    //------------------------ Private methods\n+    \n+    /**\n+     * Returns a fresh copy of the underlying data array.\n+     *\n+     * @return a copy of the underlying data array.\n+     */\n+    private BigDecimal[][] copyOut() {\n+        int nRows = this.getRowDimension();\n+        BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension()];\n+        // can't copy 2-d array in one shot, otherwise get row references\n+        for (int i = 0; i < nRows; i++) {\n+            System.arraycopy(data[i], 0, out[i], 0, data[i].length);\n+        }\n+        return out;\n+    }\n+    \n+    /**\n+     * Replaces data with a fresh copy of the input array.\n+     *\n+     * @param in data to copy in\n+     */\n+    private void copyIn(BigDecimal[][] in) {\n+        int nRows = in.length;\n+        int nCols = in[0].length;\n+        data = new BigDecimal[nRows][nCols];\n+        System.arraycopy(in, 0, data, 0, in.length);\n+        for (int i = 0; i < nRows; i++) {\n+            System.arraycopy(in[i], 0, data[i], 0, nCols);\n+        }\n+        lu = null;\n+    }\n+    \n+    /**\n+     * Replaces data with a fresh copy of the input array.\n+     *\n+     * @param in data to copy in\n+     */\n+    private void copyIn(double[][] in) {\n+        int nRows = in.length;\n+        int nCols = in[0].length;\n+        data = new BigDecimal[nRows][nCols];\n+        for (int i = 0; i < nRows; i++) {\n+            for (int j=0; j < nCols; j++) {\n+                data[i][j] = new BigDecimal(in[i][j]);\n+            }\n+        }\n+        lu = null;\n+    }\n+    \n+    /**\n+     * Tests a given coordinate as being valid or invalid\n+     *\n+     * @param row the row index.\n+     * @param col the column index.\n+     * @return true if the coordinate is with the current dimensions\n+     */\n+    private boolean isValidCoordinate(int row, int col) {\n+        int nRows = this.getRowDimension();\n+        int nCols = this.getColumnDimension();\n+        \n+        return !(row < 1 || row > nRows || col < 1 || col > nCols);\n+    }\n+    \n+}\n--- a/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n  * explicitly invoke <code>LUDecompose()</code> to recompute the decomposition\n  * before using any of the methods above.\n  *\n- * @version $Revision: 1.24 $ $Date: 2004/06/07 03:26:31 $\n+ * @version $Revision: 1.25 $ $Date: 2004/06/23 16:26:17 $\n  */\n public class RealMatrixImpl implements RealMatrix, Serializable {\n \n         if (isSingular()) {   // note: this has side effect of attempting LU decomp if lu == null\n             return 0d;\n         } else {\n-            double det = (double) parity;\n+            double det = parity;\n             for (int i = 0; i < this.getRowDimension(); i++) {\n                 det *= lu[i][i];\n             }\n--- a/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n  *    entry per line.</li>\n  * </ul></p>\n  *\n- * @version $Revision: 1.26 $ $Date: 2004/06/16 03:16:26 $\n+ * @version $Revision: 1.27 $ $Date: 2004/06/23 16:26:17 $\n  */\n public class EmpiricalDistributionImpl implements Serializable, EmpiricalDistribution {\n \n             fillBinStats(in);\n             loaded = true;\n         } finally {\n-           if (in != null) try {in.close();} catch (Exception ex) {};\n+           if (in != null) {\n+               try {\n+                   in.close();\n+               } catch (Exception ex) {\n+                   // ignore\n+               }\n+           }\n         }\n     }\n \n             fillBinStats(in);\n             loaded = true;\n         } finally {\n-            if (in != null)\n+            if (in != null) {\n                 try {\n                     in.close();\n                 } catch (Exception ex) {\n-                };\n+                    // ignore\n+                }\n+            }\n         }\n     }\n \n--- a/src/java/org/apache/commons/math/random/ValueServer.java\n+++ b/src/java/org/apache/commons/math/random/ValueServer.java\n  *                       standard deviation = <code>sigma</code></li>\n  * <li> CONSTANT_MODE -- returns <code>mu</code> every time.</li></ul>\n  *\n- * @version $Revision: 1.13 $ $Date: 2004/06/14 23:15:15 $\n+ * @version $Revision: 1.14 $ $Date: 2004/06/23 16:26:17 $\n  *\n  */\n public class ValueServer implements Serializable {\n             try {\n                 filePointer.close();\n                 filePointer = null;\n-            } catch (IOException ex) {}\n+            } catch (IOException ex) {\n+                // ignore\n+            }\n         }\n         filePointer = new BufferedReader(new InputStreamReader(valuesFileURL.openStream()));\n     }\n--- a/src/java/org/apache/commons/math/special/Beta.java\n+++ b/src/java/org/apache/commons/math/special/Beta.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n /**\n  * This is a utility class that provides computation methods related to the\n  * Beta family of functions.\n- * \n- * @version $Revision: 1.20 $ $Date: 2004/06/10 18:27:47 $\n+ *\n+ * @version $Revision: 1.21 $ $Date: 2004/06/23 16:26:17 $\n  */\n public class Beta implements Serializable {\n     /** Maximum allowed numerical error. */\n--- a/src/java/org/apache/commons/math/special/Erf.java\n+++ b/src/java/org/apache/commons/math/special/Erf.java\n /*\n  * Copyright 2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n /**\n  * This is a utility class that provides computation methods related to the\n  * error functions.\n- * \n- * @version $Revision: 1.1 $ $Date: 2004/05/05 19:54:58 $\n+ *\n+ * @version $Revision: 1.2 $ $Date: 2004/06/23 16:26:17 $\n  */\n public class Erf implements Serializable {\n \n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n /**\n  * This is a utility class that provides computation methods related to the\n  * Gamma family of functions.\n- * \n- * @version $Revision: 1.20 $ $Date: 2004/06/10 18:34:53 $\n+ *\n+ * @version $Revision: 1.21 $ $Date: 2004/06/23 16:26:17 $\n  */\n public class Gamma implements Serializable {\n     \n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * <p>\n  * The values are ordered using the default (natural order), unless a  \n  * <code>Comparator</code>is supplied in the constructor.\n- * \n- * @version $Revision: 1.23 $ $Date: 2004/06/20 16:53:17 $\n+ *\n+ * @version $Revision: 1.24 $ $Date: 2004/06/23 16:26:17 $\n  */\n public class Frequency implements Serializable {\n     \n--- a/src/java/org/apache/commons/math/stat/StatUtils.java\n+++ b/src/java/org/apache/commons/math/stat/StatUtils.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * StatUtils provides static implementations of common double[] based\n  * statistical methods. These return a single result value or in some cases, as\n  * identified in the javadoc for each method, <code>Double.NaN.</code>\n- * @version $Revision: 1.28 $ $Date: 2004/06/14 23:26:53 $\n+ * @version $Revision: 1.29 $ $Date: 2004/06/23 16:26:17 $\n  */\n public final class StatUtils {\n \n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTest.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTest.java\n /*\n  * Copyright 2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * An interface for Chi-Square tests.\n- * \n- * @version $Revision: 1.2 $ $Date: 2004/05/19 15:06:44 $ \n+ *\n+ * @version $Revision: 1.3 $ $Date: 2004/06/23 16:26:14 $ \n  */\n public interface ChiSquareTest {\n      \n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n /*\n  * Copyright 2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n /**\n  * Implements Chi-Square test statistics defined in the {@link ChiSquareTest} interface.\n  *\n- * @version $Revision: 1.7 $ $Date: 2004/06/20 02:54:05 $\n+ * @version $Revision: 1.8 $ $Date: 2004/06/23 16:26:14 $\n  */\n public class ChiSquareTestImpl implements ChiSquareTest {\n     \n--- a/src/java/org/apache/commons/math/stat/inference/TTest.java\n+++ b/src/java/org/apache/commons/math/stat/inference/TTest.java\n /*\n  * Copyright 2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * An interface for Student's t-tests.\n- * \n- * @version $Revision: 1.5 $ $Date: 2004/06/02 13:08:55 $ \n+ *\n+ * @version $Revision: 1.6 $ $Date: 2004/06/23 16:26:14 $ \n  */\n public interface TTest {\n     \n--- a/src/java/org/apache/commons/math/stat/inference/TTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/TTestImpl.java\n /*\n  * Copyright 2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n /**\n  * Implements t-test statistics defined in the {@link TTest} interface.\n  *\n- * @version $Revision: 1.7 $ $Date: 2004/06/14 23:26:53 $\n+ * @version $Revision: 1.8 $ $Date: 2004/06/23 16:26:14 $\n  */\n public class TTestImpl implements TTest  {\n \n     /** Cached DistributionFactory used to create TDistribution instances */\n     private DistributionFactory distributionFactory = null;\n     \n+    /**\n+     * Default constructor.\n+     */\n     public TTestImpl() {\n         super();\n     }\n      * @param equalVariances are the sample variances assumed equal?\n      * @return t statistic\n      * @throws IllegalArgumentException if the precondition is not met\n-     * @throws MathException if the statistic can not be computed do to a\n-     *         convergence or other numerical error.\n      */\n     public double t(double[] sample1, double[] sample2, boolean equalVariances)\n     throws IllegalArgumentException {\n \n     /**\n      * Gets a DistributionFactory to use in creating TDistribution instances.\n+     * @return a distribution factory.\n      */\n     protected DistributionFactory getDistributionFactory() {\n         if (distributionFactory == null) {\n      * @param v2 second sample variance\n      * @param n1 first sample n\n      * @param n2 second sample n\n+     * @param equalVariances  are variances assumed equal?\n      * @return t test statistic\n      */\n     protected double t(double m1, double m2,  double v1, double v2, double n1,\n--- a/src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java\n+++ b/src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * the necessary computations to return the requested statistic.</li>\n  * </ul>\n  *\n- * @version $Revision: 1.3 $ $Date: 2004/05/19 14:16:32 $\n+ * @version $Revision: 1.4 $ $Date: 2004/06/23 16:26:17 $\n  */\n public class BivariateRegression implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * Abstract Implementation for the {@link StorelessUnivariateStatistic} interface.\n  * <p>\n  * Provides a default <code>evaluate()</code> implementation.\n- * \n- * @version $Revision: 1.16 $ $Date: 2004/06/17 22:31:58 $\n+ *\n+ * @version $Revision: 1.17 $ $Date: 2004/06/23 16:26:16 $\n  */\n public abstract class AbstractStorelessUnivariateStatistic\n     extends AbstractUnivariateStatistic\n      * Returns true iff <code>object</code> is an \n      * <code>AbstractStorelessUnivariateStatistic</code> returning the same\n      * values as this for <code>getResult()</code> and <code>getN()</code>\n-     * \n+     * @param object object to test equality against.\n      * @return true if object returns the same value as this\n      */\n     public boolean equals(Object object) {\n--- a/src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * Abstract Implementation for UnivariateStatistics.\n  * Provides the ability to extend polymophically so that\n  * indiviual statistics do not need to implement these methods.\n- * @version $Revision: 1.17 $ $Date: 2004/06/01 21:34:35 $\n+ * @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:16 $\n  */\n public abstract class AbstractUnivariateStatistic\n     implements UnivariateStatistic, Serializable {\n--- a/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatistics.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Abstract factory class for univariate statistical summaries.\n- * \n- * @version $Revision: 1.7 $ $Date: 2004/06/14 23:26:53 $\n+ *\n+ * @version $Revision: 1.8 $ $Date: 2004/06/23 16:26:16 $\n  */\n public abstract class DescriptiveStatistics implements StatisticalSummary, Serializable {\n     \n--- a/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n /**\n  * Default implementation of\n  * {@link org.apache.commons.math.stat.univariate.DescriptiveStatistics}.\n- * \n- * @version $Revision: 1.8 $ $Date: 2004/06/14 23:26:53 $\n+ *\n+ * @version $Revision: 1.9 $ $Date: 2004/06/23 16:26:16 $\n  */\n public class DescriptiveStatisticsImpl extends DescriptiveStatistics implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/StatisticalSummary.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/StatisticalSummary.java\n /*\n  * Copyright 2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  *  Reporting interface for basic univariate statistics.\n- * \n-  * @version $Revision: 1.3 $ $Date: 2004/06/14 23:26:53 $\n+ *\n+  * @version $Revision: 1.4 $ $Date: 2004/06/23 16:26:16 $\n  */\n public interface StatisticalSummary {\n     /** \n--- a/src/java/org/apache/commons/math/stat/univariate/StatisticalSummaryValues.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/StatisticalSummaryValues.java\n /*\n  * Copyright 2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n /**\n  *  Value object representing the results of a univariate statistical summary.\n  *\n- * @version $Revision: 1.2 $ $Date: 2004/06/20 01:50:18 $\n+ * @version $Revision: 1.3 $ $Date: 2004/06/23 16:26:16 $\n  */\n public class StatisticalSummaryValues implements Serializable, \n     StatisticalSummary {\n--- a/src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * <p>\n  * This interface is designed to be used for calculating statistics that can be computed in \n  * one pass through the data without storing the full array of sample values.\n- * \n- * @version $Revision: 1.15 $ $Date: 2004/03/21 21:57:19 $\n+ *\n+ * @version $Revision: 1.16 $ $Date: 2004/06/23 16:26:16 $\n  */\n public interface StorelessUnivariateStatistic extends UnivariateStatistic {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/SummaryStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/SummaryStatistics.java\n /*\n  * Copyright 2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Abstract factory class for univariate statistical summaries.\n- * \n- * @version $Revision: 1.8 $ $Date: 2004/06/17 23:14:55 $\n+ *\n+ * @version $Revision: 1.9 $ $Date: 2004/06/23 16:26:16 $\n  */\n public abstract class SummaryStatistics implements StatisticalSummary, Serializable {\n \n     /**\n      * Returns true iff <code>object</code> is a <code>SummaryStatistics</code>\n      * instance and all statistics have the same values as this.\n-     *\n+     * @param object the object to test equality against.\n      * @return true if object equals this\n      */\n     public boolean equals(Object object) {\n--- a/src/java/org/apache/commons/math/stat/univariate/SummaryStatisticsImpl.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/SummaryStatisticsImpl.java\n /*\n  * Copyright 2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Provides a default {@link SummaryStatistics} implementation.\n- * \n- * @version $Revision: 1.5 $ $Date: 2004/06/17 23:27:52 $  \n+ *\n+ * @version $Revision: 1.6 $ $Date: 2004/06/23 16:26:16 $  \n  */\n public class SummaryStatisticsImpl extends SummaryStatistics implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * double[] based content using an implemented statistical approach.\n  * The interface provides two \"stateless\" simple methods to calculate\n  * a statistic from a double[] based parameter.\n- * @version $Revision: 1.13 $ $Date: 2004/03/04 04:25:09 $\n+ * @version $Revision: 1.14 $ $Date: 2004/06/23 16:26:16 $\n  */\n public interface UnivariateStatistic {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * <a href=\"http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf\">\n  * recursive strategy\n  * </a>. Both incremental and evaluation strategies currently use this approach.\n- * @version $Revision: 1.14 $ $Date: 2004/04/27 16:42:30 $\n+ * @version $Revision: 1.15 $ $Date: 2004/06/23 16:26:15 $\n  */\n public class FirstMoment extends AbstractStorelessUnivariateStatistic implements Serializable{\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * <a href=\"http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf\">\n  * recursive strategy\n  * </a>. Both incremental and evaluation strategies currently use this approach.\n- * @version $Revision: 1.16 $ $Date: 2004/04/27 16:42:30 $\n+ * @version $Revision: 1.17 $ $Date: 2004/06/23 16:26:15 $\n  */\n public class FourthMoment extends ThirdMoment implements Serializable{\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * <code>Double.NEGATIVE_INFINITY</code> are among the values, the result is\n  * <code>NaN.</code></li>\n  * </ul>\n- * \n- * \n- * @version $Revision: 1.19 $ $Date: 2004/06/18 07:03:40 $\n+ *\n+ *\n+ * @version $Revision: 1.20 $ $Date: 2004/06/23 16:26:15 $\n  */\n public class GeometricMean extends SumOfLogs implements Serializable{\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * <p>\n  *  Note that this statistic is undefined for n < 4.  <code>Double.Nan</code> is returned when\n  *  there is not sufficient data to compute the statistic.\n- * \n- * @version $Revision: 1.21 $ $Date: 2004/06/18 04:14:27 $\n+ *\n+ * @version $Revision: 1.22 $ $Date: 2004/06/23 16:26:14 $\n  */\n public class Kurtosis extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Mean.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Mean.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n /**\n  * Returns the <a href=\"http://www.xycoon.com/arithmetic_mean.htm\">\n  * arithmetic mean </a> of the available values.\n- * @version $Revision: 1.17 $ $Date: 2004/04/27 16:42:30 $\n+ * @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:15 $\n  */\n public class Mean extends AbstractStorelessUnivariateStatistic implements Serializable{\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * <a href=\"http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf\">\n  * recursive strategy\n  * </a>. Both incremental and evaluation strategies currently use this approach.\n- * @version $Revision: 1.15 $ $Date: 2004/04/27 16:42:30 $\n+ * @version $Revision: 1.16 $ $Date: 2004/06/23 16:26:15 $\n  */\n public class SecondMoment extends FirstMoment implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  *  skewness = [n / (n -1) (n - 2)] sum[(x_i - mean)^3] / std^3\n  *  <p>\n  *  where n is the number of values, mean is the {@link Mean} and std is the {@link StandardDeviation}\n- * \n- * @version $Revision: 1.20 $ $Date: 2004/04/27 16:42:30 $\n+ *\n+ * @version $Revision: 1.21 $ $Date: 2004/06/23 16:26:14 $\n  */\n public class Skewness extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  *\n- * @version $Revision: 1.16 $ $Date: 2004/04/27 16:42:30 $\n+ * @version $Revision: 1.17 $ $Date: 2004/06/23 16:26:15 $\n  */\n public class StandardDeviation extends Variance implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * <a href=\"http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf\">\n  * recursive strategy\n  * </a>. Both incremental and evaluation strategies currently use this approach.\n- * @version $Revision: 1.15 $ $Date: 2004/04/27 16:42:30 $\n+ * @version $Revision: 1.16 $ $Date: 2004/06/23 16:26:14 $\n  */\n public class ThirdMoment extends SecondMoment implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Variance.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Variance.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * <a href=\"http://doi.acm.org/10.1145/359146.359152\">Chan, T. F. and\n  * J. G. Lewis 1979, <i>Communications of the ACM</i>,\n  * vol. 22 no. 9, pp. 526-531.</a>.\n- * \n- * @version $Revision: 1.19 $ $Date: 2004/04/27 16:42:30 $\n+ *\n+ * @version $Revision: 1.20 $ $Date: 2004/06/23 16:26:15 $\n  */\n public class Variance extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Max.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Max.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * <li>If any of the values equals <code>Double.POSITIVE_INFINITY</code>, \n  * the result is <code>Double.POSITIVE_INFINITY.</code></li>\n  * </ul>\n- * \n- * @version $Revision: 1.17 $ $Date: 2004/06/18 13:24:06 $\n+ *\n+ * @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:17 $\n  */\n public class Max extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Median.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Median.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n /**\n  * Returns the <a href=\"http://www.xycoon.com/median_2.htm\">median</a> of the\n  * available values.\n- * \n- * @version $Revision: 1.13 $ $Date: 2004/04/27 16:42:33 $\n+ *\n+ * @version $Revision: 1.14 $ $Date: 2004/06/23 16:26:17 $\n  */\n public class Median extends Percentile implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Min.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Min.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * <li>If any of the values equals <code>Double.NEGATIVE_INFINITY</code>, \n  * the result is <code>Double.NEGATIVE_INFINITY.</code></li>\n  * </ul> \n- * \n- * @version $Revision: 1.18 $ $Date: 2004/06/18 22:11:33 $\n+ *\n+ * @version $Revision: 1.19 $ $Date: 2004/06/23 16:26:17 $\n  */\n public class Min extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * </li>\n  * </ol>\n  * <p>\n- * \n+ *\n  * To compute percentiles, the data must be (totally) ordered.  Input arrays\n  * are copied and then sorted using  {@link java.util.Arrays#sort(double[])}.\n  * The ordering used by <code>Arrays.sort(double[]</code> is the one determined\n  * Since percentile estimation usually involves interpolation between array \n  * elements, arrays containing  <code>NaN</code> or infinite values will often\n  * result in <code>NaN<code> or infinite values returned.\n- * \n- * @version $Revision: 1.20 $ $Date: 2004/06/19 21:14:54 $\n+ *\n+ * @version $Revision: 1.21 $ $Date: 2004/06/23 16:26:17 $\n  */\n public class Percentile extends AbstractUnivariateStatistic implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/summary/Product.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/Product.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Returns the product for this collection of values.\n- * \n- * @version $Revision: 1.17 $ $Date: 2004/04/27 16:42:32 $\n+ *\n+ * @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:16 $\n  */\n public class Product extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/summary/Sum.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/Sum.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * The sum of the values that have been added to Univariate.\n- * \n- * @version $Revision: 1.19 $ $Date: 2004/04/27 16:42:32 $\n+ *\n+ * @version $Revision: 1.20 $ $Date: 2004/06/23 16:26:16 $\n  */\n public class Sum extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * <code>Double.NEGATIVE_INFINITY</code> are among the values, the result is\n  * <code>NaN.</code></li>\n  * </ul>\n- * \n- * @version $Revision: 1.18 $ $Date: 2004/06/18 06:32:07 $\n+ *\n+ * @version $Revision: 1.19 $ $Date: 2004/06/23 16:26:16 $\n  */\n public class SumOfLogs extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Returns the sum of the squares of the available values.\n- * \n- * @version $Revision: 1.17 $ $Date: 2004/04/27 16:42:32 $\n+ *\n+ * @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:16 $\n  */\n public class SumOfSquares extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n--- a/src/java/org/apache/commons/math/util/ContinuedFraction.java\n+++ b/src/java/org/apache/commons/math/util/ContinuedFraction.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n /**\n  * Provides a generic means to evaluate continued fractions.  Subclasses simply\n  * provided the a and b coefficients to evaluate the continued fraction.\n- * \n+ *\n  * <p>\n  * References:\n  * <ul>\n  * Continued Fraction</a></li>\n  * </ul>\n  * </p>\n- * \n- * @version $Revision: 1.13 $ $Date: 2004/06/02 00:04:11 $\n+ *\n+ * @version $Revision: 1.14 $ $Date: 2004/06/23 16:26:16 $\n  */\n public abstract class ContinuedFraction implements Serializable {\n     \n      * The implementation of this method is based on:\n      * <ul>\n      * <li>O. E-gecio-glu, C . K. Koc, J. Rifa i Coma,\n-     * <a href=\"http://citeseer.nj.nec.com/egecioglu91fast.html\">\n-     * Fast Computation of Continued Fractions</a>, Computers Math. Applic.,\n+     * <a href=\"http://citeseer.ist.psu.edu/egecioglu91fast.html\">\n+     * On Fast Computation of Continued Fractions</a>, Computers Math. Applic.,\n      * 21(2--3), 1991, 167--169.</li>\n      * </ul>\n      * \n--- a/src/java/org/apache/commons/math/util/DefaultTransformer.java\n+++ b/src/java/org/apache/commons/math/util/DefaultTransformer.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * provides some simple conversion capabilities to turn any java/lang.Number \n  * into a primitive double or to turn a String representation of a Number into \n  * a double.\n- * \n- * @version $Revision: 1.15 $ $Date: 2004/06/18 04:59:06 $\n+ *\n+ * @version $Revision: 1.16 $ $Date: 2004/06/23 16:26:15 $\n  */\n public class DefaultTransformer implements NumberTransformer, Serializable {\n     \n--- a/src/java/org/apache/commons/math/util/DoubleArray.java\n+++ b/src/java/org/apache/commons/math/util/DoubleArray.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * Provides a standard interface for double arrays.  Allows different\n  * array implementations to support various storage mechanisms\n  * such as automatic expansion, contraction, and array \"rolling\".\n- * \n- * @version $Revision: 1.12 $ $Date: 2004/06/14 21:41:33 $\n+ *\n+ * @version $Revision: 1.13 $ $Date: 2004/06/23 16:26:16 $\n  */\n public interface DoubleArray {\n \n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n /**\n  * Some useful additions to the built-in functions in {@link Math}.\n  *\n- * @version $Revision: 1.18 $ $Date: 2004/06/17 21:31:00 $\n+ * @version $Revision: 1.19 $ $Date: 2004/06/23 16:26:16 $\n  */\n public final class MathUtils {\n     \n--- a/src/java/org/apache/commons/math/util/NumberTransformer.java\n+++ b/src/java/org/apache/commons/math/util/NumberTransformer.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Subclasses implementing this interface can transform Objects to doubles.\n- * @version $Revision: 1.10 $ $Date: 2004/02/21 21:35:16 $\n+ * @version $Revision: 1.11 $ $Date: 2004/06/23 16:26:15 $\n  */\n public interface NumberTransformer {\n     \n--- a/src/java/org/apache/commons/math/util/ResizableDoubleArray.java\n+++ b/src/java/org/apache/commons/math/util/ResizableDoubleArray.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * is violated.\n  * </p>\n  * <p>\n- * @version $Revision: 1.1 $ $Date: 2004/06/14 21:41:33 $\n+ * @version $Revision: 1.2 $ $Date: 2004/06/23 16:26:16 $\n  */\n public class ResizableDoubleArray implements DoubleArray, Serializable {\n     \n     }\n     \n      /**\n-     * Returns a double[] array containing the elements of this \n+     * Returns a double array containing the elements of this \n      * <code>ResizableArray</code>.  This method returns a copy, not a\n      * reference to the underlying array, so that changes made to the returned\n      *  array have no effect on this <code>ResizableArray.</code>\n+     * @return the double array.\n      */\n     public double[] getElements() {\n         double[] elementArray = new double[numElements];\n      * <li><code>expansionFactor > 1</code></li>\n      * <li><code>contractionFactor >= expansionFactor</code></li>\n      * </ul>\n-     *\n+     * @param expansionFactor the new expansion factor value.\n      * @throws IllegalArgumentException if expansionFactor is <= 1 or greater\n      * than contractionFactor\n      */\n--- a/src/java/org/apache/commons/math/util/TransformerMap.java\n+++ b/src/java/org/apache/commons/math/util/TransformerMap.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * It provides a means to set NumberTransformers that will be selected \n  * based on the Class of the object handed to the Maps\n  * <code>double transform(Object o)</code> method.\n- * @version $Revision: 1.14 $ $Date: 2004/06/18 04:59:06 $\n+ * @version $Revision: 1.15 $ $Date: 2004/06/23 16:26:15 $\n  */\n public class TransformerMap implements NumberTransformer, Serializable {\n \n--- a/src/test/org/apache/commons/math/stat/univariate/ListUnivariateImpl.java\n+++ b/src/test/org/apache/commons/math/stat/univariate/ListUnivariateImpl.java\n import org.apache.commons.math.util.NumberTransformer;\n \n /**\n- * @version $Revision: 1.4 $ $Date: 2004/06/01 21:28:06 $\n+ * @version $Revision: 1.5 $ $Date: 2004/06/23 16:26:18 $\n  */\n public class ListUnivariateImpl extends DescriptiveStatistics implements Serializable {\n \n     }\n     \n     /**\n-     * @see org.apache.commons.math.stat.Univariate#setWindowSize(int)\n+     * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#setWindowSize(int)\n      */\n     public synchronized void setWindowSize(int windowSize) {\n     \tthis.windowSize = windowSize;\n     \t\tlist.remove(0);\n     \t}\n     }\n-    \t\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#getWindowSize\n+     */\n     public int getWindowSize() {\n     \treturn windowSize;\n     }", "timestamp": 1088007978, "metainfo": ""}