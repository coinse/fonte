{"sha": "d325f0f90a7c0620bf7e4d62a97a95b94cd0f111", "log": "Added methods allowing exact values to be set using string representations.   ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/BigMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/BigMatrix.java\n  * Interface defining a real-valued matrix with basic algebraic operations, using\n  * BigDecimal representations for the entries.\n  *\n- * @version $Revision: 1.3 $ $Date: 2004/06/23 16:26:17 $\n+ * @version $Revision: 1.4 $ $Date: 2004/07/11 04:49:24 $\n  */\n public interface BigMatrix {\n \n      * @param  data  2-dimensional array of entries\n      */\n     void setData(double[][] data);\n+    \n+    /**\n+     * Overwrites the underlying data for the matrix with\n+     * <code>BigDecimal</code> entries with values represented by the strings\n+     * in <code>data</code>.\n+     *\n+     * @param  data  2-dimensional array of entries\n+     * @throws NumberFormatException if any of the entries in <code>data</code>\n+     *    are not valid representations of <code>BigDecimal</code> values\n+     */\n+    void setData(String[][] data);\n \n     /***\n      * Sets the rounding mode to use when dividing values\n      */\n     void setEntry(int row, int column, double value)\n         throws MatrixIndexException;\n+    \n+    /**\n+     * Sets the entry in the specified row and column to the \n+     * <code>BigDecimal</code> value represented by the input string.\n+     *\n+     * @param row  row location of entry to be set\n+     * @param column  column location of entry to be set\n+     * @param value  value to set\n+     * @throws org.apache.commons.math.linear.MatrixIndexException if the \n+     *     specified coordinate is outside the dimensions of this matrix\n+     * @throws NumberFormatException if <code>value</code> is not a valid\n+     *     representation of a <code>BigDecimal</code> value\n+     */\n+    void setEntry(int row, int column, String value)\n+    throws MatrixIndexException;\n \n     /**\n      * Returns the transpose of this matrix.\n      * Returns the inverse of this matrix.\n      *\n      * @return inverse matrix\n-     * @throws org.apache.commons.math.linear.InvalidMatrixException if  this is not invertible\n+     * @throws org.apache.commons.math.linear.InvalidMatrixException if \n+     *     this is not invertible\n      */\n     BigMatrix inverse() throws InvalidMatrixException;\n     \n      * Returns the determinant of this matrix.\n      *\n      * @return determinant\n-      *@throws InvalidMatrixException if matrix is not square\n-     */\n-    BigDecimal getDeterminant();\n+      *@throws org.apache.commons.math.linear.InvalidMatrixException if \n+      *    matrix is not square\n+     */\n+    BigDecimal getDeterminant() throws InvalidMatrixException;\n     \n     /**\n      * Is this a square matrix?\n--- a/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n  * explicitly invoke <code>LUDecompose()</code> to recompute the decomposition\n  * before using any of the methods above.\n  *\n- * @version $Revision: 1.2 $ $Date: 2004/06/23 16:26:17 $\n+ * @version $Revision: 1.3 $ $Date: 2004/07/11 04:49:24 $\n  */\n public class BigMatrixImpl implements BigMatrix, Serializable {\n     \n      * @param d data for new matrix\n      */\n     public BigMatrixImpl(double[][] d) {\n+        this.copyIn(d);\n+        lu = null;\n+    }\n+    \n+    /**\n+     * Create a new BigMatrix using the values represented by the strings in \n+     * <code>data</code> as the underlying data array.\n+     *\n+     * @param d data for new matrix\n+     */\n+    public BigMatrixImpl(String[][] d) {\n         this.copyIn(d);\n         lu = null;\n     }\n     }\n     \n     /**\n+     * Overwrites the underlying data for the matrix with\n+     * <code>BigDecimal</code> entries with values represented by the strings\n+     * in <code>data</code>.\n+     *\n+     * @param  data  2-dimensional array of entries\n+     * @throws NumberFormatException if any of the entries in <code>data</code>\n+     *    are not valid representations of <code>BigDecimal</code> values\n+     */\n+    public void setData(String[][] data) {\n+        copyIn(data);\n+        lu = null;\n+    }\n+    \n+    /**\n      * Returns a reference to the underlying data array.\n      * <p>\n      * Does not make a fresh copy of the underlying data.\n     \n     /***\n      * Gets the rounding mode for division operations\n-     * The default is {@link BigDecimal#ROUND_HALF_UP}\n+     * The default is {@link java.math.BigDecimal#ROUND_HALF_UP}\n      * @see BigDecimal\n      * @return the rounding mode.\n      */ \n      *\n      * @param row the row to be fetched\n      * @return array of entries in the row\n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified row is greater\n-     *                              than the number of rows in this matrix\n+     * @throws org.apache.commons.math.linear.MatrixIndexException if the \n+     *    specified row is greater than the number of rows in this matrix\n      */\n     public double[] getRowAsDoubleArray(int row) throws MatrixIndexException {\n         if ( !isValidCoordinate( row, 1 ) ) {\n      *\n      * @param col  column to fetch\n      * @return array of entries in the column\n-     * @throws MatrixIndexException if the specified column is greater\n-     *                              than the number of columns in this matrix\n+     * @throws org.apache.commons.math.linear.MatrixIndexException if the \n+     *     specified column is greater than the number of columns in this matrix\n      */\n     public BigDecimal[] getColumn(int col) throws MatrixIndexException {\n         if ( !isValidCoordinate(1, col) ) {\n      *\n      * @param col  column to fetch\n      * @return array of entries in the column\n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified column is greater\n-     *                              than the number of columns in this matrix\n+     * @throws org.apache.commons.math.linear.MatrixIndexException if the \n+     *   specified column is greater than the number of columns in this matrix\n      */\n     public double[] getColumnAsDoubleArray(int col) throws MatrixIndexException {\n         if ( !isValidCoordinate( 1, col ) ) {\n      * @param row  row location of entry to be fetched\n      * @param column  column location of entry to be fetched\n      * @return matrix entry in row,column\n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside\n-     *                              the dimensions of this matrix\n+     * @throws org.apache.commons.math.linear.MatrixIndexException if the \n+     *     specified coordinate is outside the dimensions of this matrix\n      */\n     public double getEntryAsDouble(int row, int column) throws MatrixIndexException {\n         return getEntry(row,column).doubleValue();\n      * @param row    row location of entry to be set\n      * @param column    column location of entry to be set\n      * @param value  value to set\n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside\n-     *                              he dimensions of this matrix\n+     * @throws org.apache.commons.math.linear.MatrixIndexException if the \n+     *     specified coordinate is outside the dimensions of this matrix\n      */\n     public void setEntry(int row, int column, double value) throws MatrixIndexException {\n+        setEntry(row, column, new BigDecimal(value));\n+    }\n+    \n+    /**\n+     * Sets the entry in the specified row and column to the \n+     * <code>BigDecimal</code> value represented by the input string.\n+     *\n+     * @param row  row location of entry to be set\n+     * @param column  column location of entry to be set\n+     * @param value  value to set\n+     * @throws org.apache.commons.math.linear.MatrixIndexException if the \n+     *     specified coordinate is outside the dimensions of this matrix\n+     * @throws NumberFormatException if <code>value</code> is not a valid\n+     *     representation of a <code>BigDecimal</code> value\n+     */\n+    public void setEntry(int row, int column, String value) throws MatrixIndexException {\n         setEntry(row, column, new BigDecimal(value));\n     }\n     \n     }\n     \n     /**\n+     * Replaces data with BigDecimals represented by the strings in the input\n+     * array.\n+     *\n+     * @param in data to copy in\n+     */\n+    private void copyIn(String[][] in) {\n+        int nRows = in.length;\n+        int nCols = in[0].length;\n+        data = new BigDecimal[nRows][nCols];\n+        for (int i = 0; i < nRows; i++) {\n+            for (int j=0; j < nCols; j++) {\n+                data[i][j] = new BigDecimal(in[i][j]);\n+            }\n+        }\n+        lu = null;\n+    }\n+    \n+    /**\n      * Tests a given coordinate as being valid or invalid\n      *\n      * @param row the row index.\n--- a/src/test/org/apache/commons/math/linear/BigMatrixImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/BigMatrixImplTest.java\n /**\n  * Test cases for the {@link BigMatrixImpl} class.\n  *\n- * @version $Revision: 1.1 $ $Date: 2004/06/06 04:20:45 $\n+ * @version $Revision: 1.2 $ $Date: 2004/07/11 04:49:24 $\n  */\n \n public final class BigMatrixImplTest extends TestCase {\n     \n     private double[][] testData = { {1d,2d,3d}, {2d,5d,3d}, {1d,0d,8d} };\n+    private String[][] testDataString = { {\"1\",\"2\",\"3\"}, {\"2\",\"5\",\"3\"}, {\"1\",\"0\",\"8\"} };\n     private double[][] testDataLU = {{2d, 5d, 3d}, {.5d, -2.5d, 6.5d}, {0.5d, 0.2d, .2d}};\n     private double[][] testDataPlus2 = { {3d,4d,5d}, {4d,7d,5d}, {3d,2d,10d} };\n     private double[][] testDataMinus = { {-1d,-2d,-3d}, {-2d,-5d,-3d}, \n         m3.setDataRef(asBigDecimal(stompMe));\n         assertClose(\"no copy side effect\",m,new BigMatrixImpl(testData),\n             entryTolerance);\n-    }           \n+    }\n+    \n+    /** test constructors */\n+    public void testConstructors() {\n+        BigMatrix m1 = new BigMatrixImpl(testData);\n+        BigMatrix m2 = new BigMatrixImpl(testDataString);\n+        BigMatrix m3 = new BigMatrixImpl(asBigDecimal(testData));\n+        assertClose(\"double, string\", m1, m2, Double.MIN_VALUE);\n+        assertClose(\"double, BigDecimal\", m1, m3, Double.MIN_VALUE);\n+        assertClose(\"string, BigDecimal\", m2, m3, Double.MIN_VALUE);\n+        try {\n+            BigMatrix m4 = new BigMatrixImpl(new String[][] {{\"0\", \"hello\", \"1\"}});\n+            fail(\"Expecting NumberFormatException\");\n+        } catch (NumberFormatException ex) {\n+            // expected\n+        }\n+    }\n     \n     /** test add */\n     public void testAdd() {\n         } catch (MatrixIndexException ex) {\n             ;\n         }\n+        m.setEntry(1, 2, \"0.1\");\n+        m.setEntry(1, 1, 0.1d);\n+        assertFalse(m.getEntry(1, 2).equals(m.getEntry(1, 1)));\n+        assertTrue(m.getEntry(1, 2).equals(new BigDecimal(\"0.1\")));\n+        try {\n+            m.setEntry(1, 2, \"not a number\");\n+            fail(\"Expecting NumberFormatException\");\n+        } catch (NumberFormatException ex) {\n+            ;\n+        }     \n     }\n         \n     public void testLUDecomposition() throws Exception {", "timestamp": 1089521364, "metainfo": ""}