{"sha": "128669ff8aedd0b0c8971ee571d99041847699db", "log": "MATH-676 Faster \"multiply\" method.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java\n         final int nRows = this.getRowDimension();\n         final int nCols = m.getColumnDimension();\n         final int nSum = this.getColumnDimension();\n+\n         final double[][] outData = new double[nRows][nCols];\n-        for (int row = 0; row < nRows; row++) {\n-            final double[] dataRow    = data[row];\n-            final double[] outDataRow = outData[row];\n-            for (int col = 0; col < nCols; col++) {\n+        // Will hold a column of \"m\".\n+        final double[] mCol = new double[nSum];\n+        final double[][] mData = m.data;\n+\n+        // Multiply.\n+        for (int col = 0; col < nCols; col++) {\n+            // Copy all elements of column \"col\" of \"m\" so that\n+            // will be in contiguous memory.\n+            for (int mRow = 0; mRow < nSum; mRow++) {\n+                mCol[mRow] = mData[mRow][col];\n+            }\n+\n+            for (int row = 0; row < nRows; row++) {\n+                final double[] dataRow = data[row];\n                 double sum = 0;\n                 for (int i = 0; i < nSum; i++) {\n-                    sum += dataRow[i] * m.data[i][col];\n+                    sum += dataRow[i] * mCol[i];\n                 }\n-                outDataRow[col] = sum;\n+                outData[row][col] = sum;\n             }\n         }\n \n         return new Array2DRowRealMatrix(outData, false);\n-\n     }\n \n     /** {@inheritDoc} */", "timestamp": 1317560441, "metainfo": ""}