{"sha": "f45eb1fe480cfa8683bbe60b48d273848e851bbb", "log": "MATH-476 FastMath code contains 'magic' numbers Extracted \"splitter\" value as a constant  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math/util/FastMath.java\n                                             1.2599210498948732,\n                                             1.5874010519681994 };\n \n+    /** \n+     * 0x40000000 - used to split a double into two parts, both with the low order bits cleared.\n+     */\n+    private static final double HEX_40000000 = 1073741824.0;\n+\n     // Initialize tables\n     static {\n         int i;\n       double ya = hiPrec[0] + hiPrec[1];\n       double yb = -(ya - hiPrec[0] - hiPrec[1]);\n \n-      double temp = ya * 1073741824.0;\n+      double temp = ya * HEX_40000000;\n       double yaa = ya + temp - temp;\n       double yab = ya - yaa;\n \n       // recip = 1/y\n       double recip = 1.0/ya;\n-      temp = recip * 1073741824.0;\n+      temp = recip * HEX_40000000;\n       double recipa = recip + temp - temp;\n       double recipb = recip - recipa;\n \n           double ya = hiPrec[0] + hiPrec[1];\n           double yb = -(ya - hiPrec[0] - hiPrec[1]);\n \n-          double temp = ya * 1073741824.0;\n+          double temp = ya * HEX_40000000;\n           double yaa = ya + temp - temp;\n           double yab = ya - yaa;\n \n           // recip = 1/y\n           double recip = 1.0/ya;\n-          temp = recip * 1073741824.0;\n+          temp = recip * HEX_40000000;\n           double recipa = recip + temp - temp;\n           double recipb = recip - recipa;\n \n           double denomr = 1.0 / denom;\n           double denomb = -(denom - 1.0 - ya) + yb;\n           double ratio = ya * denomr;\n-          double temp = ratio * 1073741824.0;\n+          double temp = ratio * HEX_40000000;\n           double ra = ratio + temp - temp;\n           double rb = ratio - ra;\n \n-          temp = denom * 1073741824.0;\n+          temp = denom * HEX_40000000;\n           double za = denom + temp - temp;\n           double zb = denom - za;\n \n           db += -(temp - da - yb);\n           da = temp;\n \n-          temp = da * 1073741824.0;\n+          temp = da * HEX_40000000;\n           double daa = da + temp - temp;\n           double dab = da - daa;\n \n           // ratio = na/da\n           double ratio = na/da;\n-          temp = ratio * 1073741824.0;\n+          temp = ratio * HEX_40000000;\n           double ratioa = ratio + temp - temp;\n           double ratiob = ratio - ratioa;\n \n           db += -(temp - da - yb);\n           da = temp;\n \n-          temp = da * 1073741824.0;\n+          temp = da * HEX_40000000;\n           double daa = da + temp - temp;\n           double dab = da - daa;\n \n           // ratio = na/da\n           double ratio = na/da;\n-          temp = ratio * 1073741824.0;\n+          temp = ratio * HEX_40000000;\n           double ratioa = ratio + temp - temp;\n           double ratiob = ratio - ratioa;\n \n             tempB = -(temp - tempA - tempB);\n             tempA = temp;\n \n-            temp = tempA * 1073741824.0;\n+            temp = tempA * HEX_40000000;\n             baseA = tempA + temp - temp;\n             baseB = tempB + (tempA - baseA);\n \n         zb = -(temp - za - zb);\n         za = temp;\n \n-        temp = za * 1073741824.0;\n+        temp = za * HEX_40000000;\n         temp = za + temp - temp;\n         zb += za - temp;\n         za = temp;\n             double denomr = 1.0 / denom;\n             double denomb = -(denom - 1.0 - ya) + yb;\n             double ratio = ya * denomr;\n-            temp = ratio * 1073741824.0;\n+            temp = ratio * HEX_40000000;\n             final double ra = ratio + temp - temp;\n             double rb = ratio - ra;\n \n-            temp = denom * 1073741824.0;\n+            temp = denom * HEX_40000000;\n             za = denom + temp - temp;\n             zb = denom - za;\n \n      */\n     private static void split(final double d, final double split[]) {\n         if (d < 8e298 && d > -8e298) {\n-            final double a = d * 1073741824.0;\n+            final double a = d * HEX_40000000;\n             split[0] = (d + a) - a;\n             split[1] = d - split[0];\n         } else {\n             final double a = d * 9.31322574615478515625E-10;\n-            split[0] = (d + a - d) * 1073741824.0;\n+            split[0] = (d + a - d) * HEX_40000000;\n             split[1] = d - split[0];\n         }\n     }\n         final double d = -(c - a[0] - a[1]);\n \n         if (c < 8e298 && c > -8e298) {\n-            double z = c * 1073741824.0;\n+            double z = c * HEX_40000000;\n             a[0] = (c + z) - z;\n             a[1] = c - a[0] + d;\n         } else {\n             double z = c * 9.31322574615478515625E-10;\n-            a[0] = (c + z - c) * 1073741824.0;\n+            a[0] = (c + z - c) * HEX_40000000;\n             a[1] = c - a[0] + d;\n         }\n     }\n                /* Compute x - 1.0 and split it */\n                 double xa = x - 1.0;\n                 double xb = xa - x + 1.0;\n-                double tmp = xa * 1073741824.0;\n+                double tmp = xa * HEX_40000000;\n                 double aa = xa + tmp - tmp;\n                 double ab = xa - aa;\n                 xa = aa;\n                     aa = ya * xa;\n                     ab = ya * xb + yb * xa + yb * xb;\n                     /* split, so now y = a */\n-                    tmp = aa * 1073741824.0;\n+                    tmp = aa * HEX_40000000;\n                     ya = aa + tmp - tmp;\n                     yb = aa - ya + ab;\n \n                     aa = ya + LN_QUICK_COEF[i][0];\n                     ab = yb + LN_QUICK_COEF[i][1];\n                     /* Split y = a */\n-                    tmp = aa * 1073741824.0;\n+                    tmp = aa * HEX_40000000;\n                     ya = aa + tmp - tmp;\n                     yb = aa - ya + ab;\n                 }\n                 aa = ya * xa;\n                 ab = ya * xb + yb * xa + yb * xb;\n                 /* split, so now y = a */\n-                tmp = aa * 1073741824.0;\n+                tmp = aa * HEX_40000000;\n                 ya = aa + tmp - tmp;\n                 yb = aa - ya + ab;\n \n \n         if (hiPrec != null) {\n             /* split epsilon -> x */\n-            double tmp = epsilon * 1073741824.0;\n+            double tmp = epsilon * HEX_40000000;\n             double aa = epsilon + tmp - tmp;\n             double ab = epsilon - aa;\n             double xa = aa;\n                 aa = ya * xa;\n                 ab = ya * xb + yb * xa + yb * xb;\n                 /* split, so now y = a */\n-                tmp = aa * 1073741824.0;\n+                tmp = aa * HEX_40000000;\n                 ya = aa + tmp - tmp;\n                 yb = aa - ya + ab;\n \n                 aa = ya + LN_HI_PREC_COEF[i][0];\n                 ab = yb + LN_HI_PREC_COEF[i][1];\n                 /* Split y = a */\n-                tmp = aa * 1073741824.0;\n+                tmp = aa * HEX_40000000;\n                 ya = aa + tmp - tmp;\n                 yb = aa - ya + ab;\n             }\n             return lores;\n         }\n \n-        final double tmp = hiPrec[0] * 1073741824.0;\n+        final double tmp = hiPrec[0] * HEX_40000000;\n         final double lna = hiPrec[0] + tmp - tmp;\n         final double lnb = hiPrec[0] - lna + hiPrec[1];\n \n         double ya;\n         double yb;\n         if (y < 8e298 && y > -8e298) {\n-            double tmp1 = y * 1073741824.0;\n+            double tmp1 = y * HEX_40000000;\n             ya = y + tmp1 - tmp1;\n             yb = y - ya;\n         } else {\n             double tmp1 = y * 9.31322574615478515625E-10;\n             double tmp2 = tmp1 * 9.31322574615478515625E-10;\n-            ya = (tmp1 + tmp2 - tmp1) * 1073741824.0 * 1073741824.0;\n+            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;\n             yb = y - ya;\n         }\n \n         double lnb = lns[1];\n \n         /* resplit lns */\n-        double tmp1 = lna * 1073741824.0;\n+        double tmp1 = lna * HEX_40000000;\n         double tmp2 = lna + tmp1 - tmp1;\n         lnb += lna - tmp2;\n         lna = tmp2;\n         final double cosEpsB = polyCosine(epsilon);\n \n         // Split epsilon   xa + xb = x\n-        final double temp = sinEpsA * 1073741824.0;\n+        final double temp = sinEpsA * HEX_40000000;\n         double temp2 = (sinEpsA + temp) - temp;\n         sinEpsB +=  sinEpsA - temp2;\n         sinEpsA = temp2;\n         final double cosEpsB = polyCosine(epsilon);\n \n         // Split epsilon   xa + xb = x\n-        double temp = sinEpsA * 1073741824.0;\n+        double temp = sinEpsA * HEX_40000000;\n         double temp2 = (sinEpsA + temp) - temp;\n         sinEpsB +=  sinEpsA - temp2;\n         sinEpsA = temp2;\n         double est = sina/cosa;\n \n         /* Split the estimate to get more accurate read on division rounding */\n-        temp = est * 1073741824.0;\n+        temp = est * HEX_40000000;\n         double esta = (est + temp) - temp;\n         double estb =  est - esta;\n \n-        temp = cosa * 1073741824.0;\n+        temp = cosa * HEX_40000000;\n         double cosaa = (cosa + temp) - temp;\n         double cosab =  cosa - cosaa;\n \n         epsA = temp;\n \n         /* Compute eps = eps / (1.0 + xa*tangent) */\n-        temp = xa * 1073741824.0;\n+        temp = xa * HEX_40000000;\n         double ya = xa + temp - temp;\n         double yb = xb + xa - ya;\n         xa = ya;\n             zb += xb * TANGENT_TABLE_B[idx];\n             ya = epsA / za;\n \n-            temp = ya * 1073741824.0;\n+            temp = ya * HEX_40000000;\n             final double yaa = (ya + temp) - temp;\n             final double yab = ya - yaa;\n \n-            temp = za * 1073741824.0;\n+            temp = za * HEX_40000000;\n             final double zaa = (za + temp) - temp;\n             final double zab = za - zaa;\n \n         }\n \n         // Split y\n-        double temp = x * 1073741824.0;\n+        double temp = x * HEX_40000000;\n         final double xa = x + temp - temp;\n         final double xb = x - xa;\n \n         // Compute ratio r = x/y\n         final double r = y/x;\n-        temp = r * 1073741824.0;\n+        temp = r * HEX_40000000;\n         double ra = r + temp - temp;\n         double rb = r - ra;\n \n       /* Compute asin(x) = atan(x/sqrt(1-x*x)) */\n \n       /* Split x */\n-      double temp = x * 1073741824.0;\n+      double temp = x * HEX_40000000;\n       final double xa = x + temp - temp;\n       final double xb = x - xa;\n \n       /* Square root */\n       double y;\n       y = sqrt(za);\n-      temp = y * 1073741824.0;\n+      temp = y * HEX_40000000;\n       ya = y + temp - temp;\n       yb = y - ya;\n \n \n       // Compute ratio r = x/y\n       double r = x/y;\n-      temp = r * 1073741824.0;\n+      temp = r * HEX_40000000;\n       double ra = r + temp - temp;\n       double rb = r - ra;\n \n       /* Compute acos(x) = atan(sqrt(1-x*x)/x) */\n \n       /* Split x */\n-      double temp = x * 1073741824.0;\n+      double temp = x * HEX_40000000;\n       final double xa = x + temp - temp;\n       final double xb = x - xa;\n \n \n       /* Square root */\n       double y = sqrt(za);\n-      temp = y * 1073741824.0;\n+      temp = y * HEX_40000000;\n       ya = y + temp - temp;\n       yb = y - ya;\n \n           return Math.PI/2; // so return the appropriate value\n       }\n \n-      if (abs(r) < Double.MAX_VALUE/1073741824.0){ // is it safe to split r ?\n-          temp = r * 1073741824.0;\n+      if (abs(r) < Double.MAX_VALUE/HEX_40000000){ // is it safe to split r ?\n+          temp = r * HEX_40000000;          \n       } else {\n           temp = 0.0;\n       }\n       est += (xs - est*est*est) / (3*est*est);\n \n       // Do one round of Newton's method in extended precision to get the last bit right.\n-      double temp = est * 1073741824.0;\n+      double temp = est * HEX_40000000;\n       double ya = est + temp - temp;\n       double yb = est - ya;\n \n       double za = ya * ya;\n       double zb = ya * yb * 2.0 + yb * yb;\n-      temp = za * 1073741824.0;\n+      temp = za * HEX_40000000;\n       double temp2 = za + temp - temp;\n       zb += za - temp2;\n       za = temp2;\n             return x;\n         }\n \n+        // These are PI/180 split into high and low order bits\n         final double facta = 0.01745329052209854;\n         final double factb = 1.997844754509471E-9;\n \n         double temp = 0;\n-        if (abs(x) < Double.MAX_VALUE/1073741824.0) { // prevent overflow to infinity\n-            temp = x * 1073741824.0;\n+        if (abs(x) < Double.MAX_VALUE/HEX_40000000) { // prevent overflow to infinity\n+            temp = x * HEX_40000000;\n         }\n         double xa = x + temp - temp;\n         double xb = x - xa;\n             return x;\n         }\n \n+        // These are 180/PI split into high and low order bits\n         final double facta = 57.2957763671875;\n         final double factb = 3.145894820876798E-6;\n \n         double temp = 0;\n-        if (abs(x) < Double.MAX_VALUE/1073741824.0) { // prevent overflow to infinity\n-            temp = x * 1073741824.0;\n+        if (abs(x) < Double.MAX_VALUE/HEX_40000000) { // prevent overflow to infinity\n+            temp = x * HEX_40000000;\n         }\n         double xa = x + temp - temp;\n         double xb = x - xa;", "timestamp": 1295582583, "metainfo": ""}