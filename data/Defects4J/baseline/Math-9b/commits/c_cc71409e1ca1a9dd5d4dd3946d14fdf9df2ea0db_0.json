{"sha": "cc71409e1ca1a9dd5d4dd3946d14fdf9df2ea0db", "log": "MATH-545 Added \"cosine\" method in \"RealVector\" interface and default implementation in \"AbstractRealVector\".   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n import org.apache.commons.math.exception.MathUnsupportedOperationException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.OutOfRangeException;\n+import org.apache.commons.math.exception.MathArithmeticException;\n import org.apache.commons.math.analysis.FunctionUtils;\n import org.apache.commons.math.analysis.function.Add;\n import org.apache.commons.math.analysis.function.Multiply;\n             d += e.getValue() * v.getEntry(e.getIndex());\n         }\n         return d;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double cosine(RealVector v) {\n+        final double norm = getNorm();\n+        final double vNorm = v.getNorm();\n+\n+        if (norm == 0 ||\n+            vNorm == 0) {\n+            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n+        }\n+        return dotProduct(v) / (norm * vNorm);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double cosine(double[] v) {\n+        return cosine(new ArrayRealVector(v, false));\n     }\n \n     /** {@inheritDoc} */\n--- a/src/main/java/org/apache/commons/math/linear/RealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/RealVector.java\n     double dotProduct(double[] v);\n \n     /**\n+     * Computes the cosine of the angle between this vector and the\n+     * argument.\n+     *\n+     * @param v Vector.\n+     * @return the cosine of the angle between this vector and {@code v}.\n+     */\n+    double cosine(RealVector v);\n+\n+    /**\n+     * Computes the cosine of the angle between this vector and the\n+     * vector whose components are given as argument.\n+     *\n+     * @param v Components of a vector.\n+     * @return the cosine of the angle between this vector and {@code v}.\n+     */\n+    double cosine(double[] v);\n+\n+    /**\n      * Returns the L<sub>2</sub> norm of the vector.\n      * <p>The L<sub>2</sub> norm is the root of the sum of\n      * the squared elements.</p>\n--- a/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.apache.commons.math.exception.MathArithmeticException;\n+import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.analysis.function.Abs;\n import org.apache.commons.math.analysis.function.Acos;\n import org.apache.commons.math.analysis.function.Asin;\n             return dot;\n         }\n \n+        public double cosine(RealVector v) {\n+            throw unsupported();\n+        }\n+\n+        public double cosine(double[] v) {\n+            throw unsupported();\n+        }\n+\n         public double getNorm() {\n             throw unsupported();\n         }\n         Assert.assertTrue(Double.isNaN(v4.getMaxValue()));\n     }\n \n+    @Test\n+    public void testCosine() {\n+        final ArrayRealVector v = new ArrayRealVector(new double[] {1, 0, 0});\n+\n+        double[] wData = new double[] {1, 1, 0};\n+        RealVector w = new ArrayRealVector(wData);\n+        Assert.assertEquals(FastMath.sqrt(2) / 2, v.cosine(wData), normTolerance);\n+        Assert.assertEquals(FastMath.sqrt(2) / 2, v.cosine(w), normTolerance);\n+\n+        wData = new double[] {1, 0, 0};\n+        w = new ArrayRealVector(wData);\n+        Assert.assertEquals(1, v.cosine(wData), normTolerance);\n+        Assert.assertEquals(1, v.cosine(w), normTolerance);\n+\n+        wData = new double[] {0, 1, 0};\n+        w = new ArrayRealVector(wData);\n+        Assert.assertEquals(0, v.cosine(wData), normTolerance);\n+        Assert.assertEquals(0, v.cosine(w), 0);\n+\n+        wData = new double[] {-1, 0, 0};\n+        w = new ArrayRealVector(wData);\n+        Assert.assertEquals(-1, v.cosine(wData), normTolerance);\n+        Assert.assertEquals(-1, v.cosine(w), normTolerance);\n+    }\n+\n+    @Test(expected=MathArithmeticException.class)\n+    public void testCosinePrecondition1() {\n+        final ArrayRealVector v = new ArrayRealVector(new double[] {0, 0, 0});\n+        final ArrayRealVector w = new ArrayRealVector(new double[] {1, 0, 0});\n+        v.cosine(w);\n+    }\n+    @Test(expected=MathArithmeticException.class)\n+    public void testCosinePrecondition2() {\n+        final ArrayRealVector v = new ArrayRealVector(new double[] {0, 0, 0});\n+        final ArrayRealVector w = new ArrayRealVector(new double[] {1, 0, 0});\n+        w.cosine(v);\n+    }\n+    @Test(expected=DimensionMismatchException.class)\n+    public void testCosinePrecondition3() {\n+        final ArrayRealVector v = new ArrayRealVector(new double[] {1, 2, 3});\n+        final ArrayRealVector w = new ArrayRealVector(new double[] {1, 2, 3, 4});\n+        v.cosine(w);\n+    }\n \n     /** verifies that two vectors are close (sup norm) */\n     protected void assertClose(String msg, double[] m, double[] n,", "timestamp": 1300358299, "metainfo": ""}