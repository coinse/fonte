{"sha": "3f1319f71ffa0afc79db38097b17d8b8d1393309", "log": "Tab and trailing space removal  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/stat/StatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/StatUtilsTest.java\n     }\n     \n     \n-\t/**\n-\t * Run the test with the values 50 and 100 and assume standardized values \n-\t */\n-\n-\tpublic void testNormalize1() {\n-\t\tdouble sample[] = { 50, 100 };\n-\t\tdouble expectedSample[] = { -25 / Math.sqrt(1250), 25 / Math.sqrt(1250) };\n-\t\tdouble[] out = StatUtils.normalize(sample);\n-\t\tfor (int i = 0; i < out.length; i++) {\n-\t\t\tassertEquals(out[i], expectedSample[i]);\n-\t\t}\n-\n-\t}\n-\n-\t/**\n-\t * Run with 77 random values, assuming that the outcome has a mean of 0 and a standard deviation of 1 with a\n-\t * precision of 1E-10.\n-\t */\n-\n-\tpublic void testNormalize2() {\n-\t\t// create an sample with 77 values \n-\t\tint length = 77;\n-\t\tdouble sample[] = new double[length];\n-\t\tfor (int i = 0; i < length; i++) {\n-\t\t\tsample[i] = Math.random();\n-\t\t}\n-\t\t// normalize this sample\n-\t\tdouble standardizedSample[] = StatUtils.normalize(sample);\n-\n-\t\tDescriptiveStatistics stats = new DescriptiveStatistics();\n-\t\t// Add the data from the array\n-\t\tfor (int i = 0; i < length; i++) {\n-\t\t\tstats.addValue(standardizedSample[i]);\n-\t\t}\n-\t\t// the calculations do have a limited precision  \n-\t\tdouble distance = 1E-10;\n-\t\t// check the mean an standard deviation\n-\t\tassertEquals(0.0, stats.getMean(), distance);\n-\t\tassertEquals(1.0, stats.getStandardDeviation(), distance);\n-\n-\t}\n+    /**\n+     * Run the test with the values 50 and 100 and assume standardized values    \n+     */\n+\n+    public void testNormalize1() {\n+        double sample[] = { 50, 100 };\n+        double expectedSample[] = { -25 / Math.sqrt(1250), 25 / Math.sqrt(1250) };\n+        double[] out = StatUtils.normalize(sample);\n+        for (int i = 0; i < out.length; i++) {\n+            assertEquals(out[i], expectedSample[i]);\n+        }\n+\n+    }\n+\n+    /**\n+     * Run with 77 random values, assuming that the outcome has a mean of 0 and a standard deviation of 1 with a\n+     * precision of 1E-10.\n+     */\n+\n+    public void testNormalize2() {\n+        // create an sample with 77 values    \n+        int length = 77;\n+        double sample[] = new double[length];\n+        for (int i = 0; i < length; i++) {\n+            sample[i] = Math.random();\n+        }\n+        // normalize this sample\n+        double standardizedSample[] = StatUtils.normalize(sample);\n+\n+        DescriptiveStatistics stats = new DescriptiveStatistics();\n+        // Add the data from the array\n+        for (int i = 0; i < length; i++) {\n+            stats.addValue(standardizedSample[i]);\n+        }\n+        // the calculations do have a limited precision    \n+        double distance = 1E-10;\n+        // check the mean an standard deviation\n+        assertEquals(0.0, stats.getMean(), distance);\n+        assertEquals(1.0, stats.getStandardDeviation(), distance);\n+\n+    }\n     \n }", "timestamp": 1295305325, "metainfo": ""}