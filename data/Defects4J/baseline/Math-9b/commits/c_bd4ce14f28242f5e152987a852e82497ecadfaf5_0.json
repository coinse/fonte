{"sha": "bd4ce14f28242f5e152987a852e82497ecadfaf5", "log": "fixed checkstyle errors  ", "commit": "\n--- a/src/java/org/apache/commons/math/random/RandomDataImpl.java\n+++ b/src/java/org/apache/commons/math/random/RandomDataImpl.java\n  * </ul>\n  * </p>\n  * \n- * @version $Revision$ $Date: 2008-11-23 08:27:09 -0600 (Sun, 23 Nov\n- *          2008) $\n+ * @version $Revision$ $Date$\n  */\n public class RandomDataImpl implements RandomData, Serializable {\n \n             double muFactorialLog = MathUtils.factorialLog((int) mu);\n \n             double c1 = Math.sqrt(Math.PI * mu / 2.0);\n-            double c2 = c1\n-                    + Math.sqrt(Math.PI * muDeltaHalf\n-                            / (2.0 * Math.exp(1.0 / mu2delta)));\n+            double c2 = c1 +\n+                        Math.sqrt(Math.PI * muDeltaHalf /\n+                                  (2.0 * Math.exp(1.0 / mu2delta)));\n             double c3 = c2 + 2.0;\n             double c4 = c3 + Math.exp(1.0 / 78.0);\n-            double c = c4 + 2.0 / delta * mu2delta\n-                    * Math.exp(-delta / mu2delta * (1.0 + delta / 2.0));\n+            double c = c4 + 2.0 / delta * mu2delta *\n+                       Math.exp(-delta / mu2delta * (1.0 + delta / 2.0));\n \n             double y = 0.0;\n             double x = 0.0;\n                     x = Math.ceil(y);\n                     w = -delta / mu2delta * (1.0 + y / 2.0) - e - x * logMeanMu;\n                 }\n-                accept = (w <= x * Math.log(mu)\n-                        - MathUtils.factorialLog((int) (mu + x))\n-                        / muFactorialLog);\n+                accept = (w <= x * Math.log(mu) -\n+                         MathUtils.factorialLog((int) (mu + x)) /\n+                         muFactorialLog);\n             }\n             // cast to long is acceptable because both x and mu are whole\n             // numbers.", "timestamp": 1240159796, "metainfo": ""}