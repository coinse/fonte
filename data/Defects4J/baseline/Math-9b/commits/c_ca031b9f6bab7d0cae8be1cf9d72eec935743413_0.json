{"sha": "ca031b9f6bab7d0cae8be1cf9d72eec935743413", "log": "Deprecated DifferentiableUnivariateFunction.  The interface and its implementations should be removed for 4.0. The remaining uses in the library are only there for compatibility. Everything else now use the new UnivariateDifferentiableFunction interface and DerivativeStructure, which allow both arbitrary differentiation order and arbitrary number of free parameters.  The next step for 3.1 is to replace the multidimensional functions (i.e. multivariate functions, vector valued functions and matrix valued functions).  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/DifferentiableUnivariateFunction.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/DifferentiableUnivariateFunction.java\n  * Extension of {@link UnivariateFunction} representing a differentiable univariate real function.\n  *\n  * @version $Id$\n+ * @deprecated as of 3.1 replaced by {@link org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction}\n  */\n+@Deprecated\n public interface DifferentiableUnivariateFunction\n     extends UnivariateFunction {\n \n--- a/src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java\n      *\n      * @param f List of functions.\n      * @return the composite function.\n+     * @deprecated as of 3.1 replaced by {@link #compose(UnivariateDifferentiableFunction...)}\n      */\n     public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction ... f) {\n         return new DifferentiableUnivariateFunction() {\n      *\n      * @param f List of functions.\n      * @return a function that computes the sum of the functions.\n-     */\n+     * @deprecated as of 3.1 replaced by {@link #add(UnivariateDifferentiableFunction...)}\n+     */\n+    @Deprecated\n     public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction ... f) {\n         return new DifferentiableUnivariateFunction() {\n             /** {@inheritDoc} */\n      *\n      * @param f List of functions.\n      * @return a function that computes the product of the functions.\n+     * @deprecated as of 3.1 replaced by {@link #multiply(UnivariateDifferentiableFunction...)}\n      */\n     public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction ... f) {\n         return new DifferentiableUnivariateFunction() {\n--- a/src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java\n \n package org.apache.commons.math3.analysis;\n \n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.analysis.function.Add;\n import org.apache.commons.math3.analysis.function.Constant;\n import org.apache.commons.math3.analysis.function.Cos;\n \n     @Test\n     public void testComposeDifferentiable() {\n-        DifferentiableUnivariateFunction id = new Identity();\n-        Assert.assertEquals(1, FunctionUtils.compose(id, id, id).derivative().value(3), EPS);\n-\n-        DifferentiableUnivariateFunction c = new Constant(4);\n-        Assert.assertEquals(0, FunctionUtils.compose(id, c).derivative().value(3), EPS);\n-        Assert.assertEquals(0, FunctionUtils.compose(c, id).derivative().value(3), EPS);\n-\n-        DifferentiableUnivariateFunction m = new Minus();\n-        Assert.assertEquals(-1, FunctionUtils.compose(m).derivative().value(3), EPS);\n-        Assert.assertEquals(1, FunctionUtils.compose(m, m).derivative().value(3), EPS);\n-\n-        DifferentiableUnivariateFunction inv = new Inverse();\n-        Assert.assertEquals(0.25, FunctionUtils.compose(inv, m, id).derivative().value(2), EPS);\n-\n-        DifferentiableUnivariateFunction pow = new Power(2);\n-        Assert.assertEquals(108, FunctionUtils.compose(pow, pow).derivative().value(3), EPS);\n-\n-        DifferentiableUnivariateFunction log = new Log();\n+        UnivariateDifferentiableFunction id = new Identity();\n+        Assert.assertEquals(1, FunctionUtils.compose(id, id, id).value(new DerivativeStructure(1, 1, 0, 3)).getPartialDerivative(1), EPS);\n+\n+        UnivariateDifferentiableFunction c = new Constant(4);\n+        Assert.assertEquals(0, FunctionUtils.compose(id, c).value(new DerivativeStructure(1, 1, 0, 3)).getPartialDerivative(1), EPS);\n+        Assert.assertEquals(0, FunctionUtils.compose(c, id).value(new DerivativeStructure(1, 1, 0, 3)).getPartialDerivative(1), EPS);\n+\n+        UnivariateDifferentiableFunction m = new Minus();\n+        Assert.assertEquals(-1, FunctionUtils.compose(m).value(new DerivativeStructure(1, 1, 0, 3)).getPartialDerivative(1), EPS);\n+        Assert.assertEquals(1, FunctionUtils.compose(m, m).value(new DerivativeStructure(1, 1, 0, 3)).getPartialDerivative(1), EPS);\n+\n+        UnivariateDifferentiableFunction inv = new Inverse();\n+        Assert.assertEquals(0.25, FunctionUtils.compose(inv, m, id).value(new DerivativeStructure(1, 1, 0, 2)).getPartialDerivative(1), EPS);\n+\n+        UnivariateDifferentiableFunction pow = new Power(2);\n+        Assert.assertEquals(108, FunctionUtils.compose(pow, pow).value(new DerivativeStructure(1, 1, 0, 3)).getPartialDerivative(1), EPS);\n+\n+        UnivariateDifferentiableFunction log = new Log();\n         double a = 9876.54321;\n-        Assert.assertEquals(pow.derivative().value(a) / pow.value(a),\n-                            FunctionUtils.compose(log, pow).derivative().value(a), EPS);\n+        Assert.assertEquals(pow.value(new DerivativeStructure(1, 1, 0, a)).getPartialDerivative(1) / pow.value(a),\n+                            FunctionUtils.compose(log, pow).value(new DerivativeStructure(1, 1, 0, a)).getPartialDerivative(1), EPS);\n     }\n \n     @Test\n \n     @Test\n     public void testAddDifferentiable() {\n-        DifferentiableUnivariateFunction sin = new Sin();\n-        DifferentiableUnivariateFunction c = new Constant(4);\n-        DifferentiableUnivariateFunction m = new Minus();\n-        DifferentiableUnivariateFunction inv = new Inverse();\n+        UnivariateDifferentiableFunction sin = new Sin();\n+        UnivariateDifferentiableFunction c = new Constant(4);\n+        UnivariateDifferentiableFunction m = new Minus();\n+        UnivariateDifferentiableFunction inv = new Inverse();\n \n         final double a = 123.456;\n         Assert.assertEquals(- 1 / (a * a) -1 + Math.cos(a),\n-                            FunctionUtils.add(inv, m, c, sin).derivative().value(a),\n+                            FunctionUtils.add(inv, m, c, sin).value(new DerivativeStructure(1, 1, 0, a)).getPartialDerivative(1),\n                             EPS);\n     }\n \n \n     @Test\n     public void testMultiplyDifferentiable() {\n-        DifferentiableUnivariateFunction c = new Constant(4);\n-        DifferentiableUnivariateFunction id = new Identity();\n+        UnivariateDifferentiableFunction c = new Constant(4);\n+        UnivariateDifferentiableFunction id = new Identity();\n         final double a = 1.2345678;\n-        Assert.assertEquals(8 * a, FunctionUtils.multiply(c, id, id).derivative().value(a), EPS);\n-\n-        DifferentiableUnivariateFunction inv = new Inverse();\n-        DifferentiableUnivariateFunction pow = new Power(2.5);\n-        DifferentiableUnivariateFunction cos = new Cos();\n+        Assert.assertEquals(8 * a, FunctionUtils.multiply(c, id, id).value(new DerivativeStructure(1, 1, 0, a)).getPartialDerivative(1), EPS);\n+\n+        UnivariateDifferentiableFunction inv = new Inverse();\n+        UnivariateDifferentiableFunction pow = new Power(2.5);\n+        UnivariateDifferentiableFunction cos = new Cos();\n         Assert.assertEquals(1.5 * Math.sqrt(a) * Math.cos(a) - Math.pow(a, 1.5) * Math.sin(a),\n-                            FunctionUtils.multiply(inv, pow, cos).derivative().value(a), EPS);\n-\n-        DifferentiableUnivariateFunction cosh = new Cosh();\n+                            FunctionUtils.multiply(inv, pow, cos).value(new DerivativeStructure(1, 1, 0, a)).getPartialDerivative(1), EPS);\n+\n+        UnivariateDifferentiableFunction cosh = new Cosh();\n         Assert.assertEquals(1.5 * Math.sqrt(a) * Math.cosh(a) + Math.pow(a, 1.5) * Math.sinh(a),\n-                            FunctionUtils.multiply(inv, pow, cosh).derivative().value(a), 8 * EPS);\n+                            FunctionUtils.multiply(inv, pow, cosh).value(new DerivativeStructure(1, 1, 0, a)).getPartialDerivative(1), 8 * EPS);\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/math3/analysis/SumSincFunction.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/SumSincFunction.java\n  */\n package org.apache.commons.math3.analysis;\n \n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.analysis.function.Sinc;\n \n /**\n  * @version $Id$\n  */\n public class SumSincFunction implements DifferentiableMultivariateFunction {\n-    private static final DifferentiableUnivariateFunction sinc = new Sinc();\n-    private static final UnivariateFunction sincDeriv = sinc.derivative();\n+    private static final UnivariateDifferentiableFunction sinc = new Sinc();\n \n     /**\n      * Factor that will multiply each term of the sum.\n     public MultivariateFunction partialDerivative(final int k) {\n         return new MultivariateFunction() {\n             public double value(double[] point) {\n-                return sincDeriv.value(point[k]);\n+                return sinc.value(new DerivativeStructure(1, 1, 0, point[k])).getPartialDerivative(1);\n             }\n         };\n     }\n                 final double[] r = new double[n];\n                 for (int i = 0; i < n; i++) {\n                     final double x = point[i];\n-                    r[i] = factor * sincDeriv.value(x);\n+                    r[i] = factor * sinc.value(new DerivativeStructure(1, 1, 0, x)).getPartialDerivative(1);\n                 }\n                 return r;\n             }\n--- a/src/test/java/org/apache/commons/math3/analysis/solvers/BrentSolverTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/solvers/BrentSolverTest.java\n  */\n package org.apache.commons.math3.analysis.solvers;\n \n-import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.MonitoredFunction;\n import org.apache.commons.math3.analysis.QuinticFunction;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.analysis.function.Constant;\n import org.apache.commons.math3.analysis.function.Inverse;\n import org.apache.commons.math3.analysis.function.Sin;\n \n     @Test\n     public void testMath832() {\n-        final DifferentiableUnivariateFunction f = new DifferentiableUnivariateFunction() {\n-                private final DifferentiableUnivariateFunction sqrt = new Sqrt();\n-                private final DifferentiableUnivariateFunction inv = new Inverse();\n-                private final DifferentiableUnivariateFunction func\n+        final UnivariateFunction f = new UnivariateFunction() {\n+                private final UnivariateDifferentiableFunction sqrt = new Sqrt();\n+                private final UnivariateDifferentiableFunction inv = new Inverse();\n+                private final UnivariateDifferentiableFunction func\n                     = FunctionUtils.add(FunctionUtils.multiply(new Constant(1e2), sqrt),\n                                         FunctionUtils.multiply(new Constant(1e6), inv),\n                                         FunctionUtils.multiply(new Constant(1e4),\n                                                                FunctionUtils.compose(inv, sqrt)));\n \n                 public double value(double x) {\n-                    return func.value(x);\n+                    return func.value(new DerivativeStructure(1, 1, 0, x)).getPartialDerivative(1);\n                 }\n \n-                public UnivariateFunction derivative() {\n-                    return func.derivative();\n-                }\n             };\n \n         BrentSolver solver = new BrentSolver();\n-        final double result = solver.solve(99,\n-                                           f.derivative(),\n-                                           1, 1e30, 1 + 1e-10);\n+        final double result = solver.solve(99, f, 1, 1e30, 1 + 1e-10);\n         Assert.assertEquals(804.93558250, result, 1e-8);\n     }\n }", "timestamp": 1347438850, "metainfo": ""}