{"sha": "916c991b5f28cfb00d6113921011d42ad7793d88", "log": "Moved univariate statistical aggregates into univariate package.   ", "commit": "\n--- a/src/java/org/apache/commons/math/random/EmpiricalDistribution.java\n+++ b/src/java/org/apache/commons/math/random/EmpiricalDistribution.java\n import java.net.URL;\n import java.util.ArrayList;\n \n-import org.apache.commons.math.stat.SummaryStatistics;\n+import org.apache.commons.math.stat.univariate.SummaryStatistics;\n \n /**\n  * Represents an <a href=\"http://random.mat.sbg.ac.at/~ste/dipl/node11.html\">\n  * build grouped frequnecy histograms representing the input data or to\n  * generate random values \"like\" those in the input file -- i.e., the values\n  * generated will follow the distribution of the values in the file.\n- * @version $Revision: 1.16 $ $Date: 2004/03/21 21:57:18 $\n+ * @version $Revision: 1.17 $ $Date: 2004/04/12 02:27:49 $\n  */\n public interface EmpiricalDistribution {\n  \n--- a/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n import java.io.InputStreamReader;\n import java.net.URL;\n \n-import org.apache.commons.math.stat.SummaryStatistics;\n+import org.apache.commons.math.stat.univariate.SummaryStatistics;\n \n /**\n  * Implements <code>EmpiricalDistribution</code> interface.  This implementation\n  *    entry per line.</li>\n  * </ol></p>\n  *\n- * @version $Revision: 1.17 $ $Date: 2004/02/21 21:35:15 $\n+ * @version $Revision: 1.18 $ $Date: 2004/04/12 02:27:49 $\n  */\n public class EmpiricalDistributionImpl implements Serializable, EmpiricalDistribution {\n \n--- a/src/java/org/apache/commons/math/stat/inference/TestStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/inference/TestStatistic.java\n package org.apache.commons.math.stat.inference;\n \n import org.apache.commons.math.MathException;\n-import org.apache.commons.math.stat.StatisticalSummary;\n+import org.apache.commons.math.stat.univariate.StatisticalSummary;\n \n /**\n  * A collection of commonly used test statistics and statistical tests.\n  * \n- * @version $Revision: 1.3 $ $Date: 2004/04/11 20:42:33 $ \n+ * @version $Revision: 1.4 $ $Date: 2004/04/12 02:27:49 $ \n  */\n public interface TestStatistic {\n     \n--- a/src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/TestStatisticImpl.java\n import org.apache.commons.math.distribution.DistributionFactory;\n import org.apache.commons.math.distribution.TDistribution;\n import org.apache.commons.math.distribution.ChiSquaredDistribution;\n-import org.apache.commons.math.stat.StatisticalSummary;\n import org.apache.commons.math.stat.StatUtils;\n+import org.apache.commons.math.stat.univariate.StatisticalSummary;\n \n /**\n  * Implements test statistics defined in the TestStatistic interface.\n  *\n- * @version $Revision: 1.3 $ $Date: 2004/04/11 20:42:33 $\n+ * @version $Revision: 1.4 $ $Date: 2004/04/12 02:27:49 $\n  */\n public class TestStatisticImpl implements TestStatistic, Serializable {\n \n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/univariate/AbstractDescriptiveStatistics.java\n+/*\n+ * Copyright 2003-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.univariate;\n+\n+import java.util.Arrays;\n+\n+import org.apache.commons.math.stat.univariate.moment.GeometricMean;\n+import org.apache.commons.math.stat.univariate.moment.Kurtosis;\n+import org.apache.commons.math.stat.univariate.moment.Mean;\n+import org.apache.commons.math.stat.univariate.moment.Skewness;\n+import org.apache.commons.math.stat.univariate.moment.Variance;\n+import org.apache.commons.math.stat.univariate.rank.Max;\n+import org.apache.commons.math.stat.univariate.rank.Min;\n+import org.apache.commons.math.stat.univariate.rank.Percentile;\n+import org.apache.commons.math.stat.univariate.summary.Sum;\n+import org.apache.commons.math.stat.univariate.summary.SumOfSquares;\n+\n+/**\n+ * Abstract superclass for DescriptiveStatistics implementations. \n+ * \n+ * @version $Revision: 1.1 $ $Date: 2004/04/12 02:27:49 $\n+ */\n+public abstract class AbstractDescriptiveStatistics\n+    extends DescriptiveStatistics {\n+        \n+    /**\n+     * Create an AbstractDescriptiveStatistics\n+     */\n+    public AbstractDescriptiveStatistics() {\n+    }\n+\n+    /**\n+     * Create an AbstractDescriptiveStatistics with a specific Window\n+     * @param window WindowSIze for stat calculation\n+     */\n+    public AbstractDescriptiveStatistics(int window)  {\n+    \tsetWindowSize(window);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#getSum()\n+     */\n+    public double getSum() {\n+    \treturn apply(new Sum());\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#getSumsq()\n+     */\n+    public double getSumsq() {\n+    \treturn apply(new SumOfSquares());\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#getMean()\n+     */\n+    public double getMean() {\n+    \treturn apply(new Mean());\n+    }\n+\n+    /**\n+    * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#getStandardDeviation()\n+     */\n+    public double getStandardDeviation() {\n+    \tdouble stdDev = Double.NaN;\n+    \tif (getN() > 0) {\n+    \t\tif (getN() > 1) {\n+    \t\t\tstdDev = Math.sqrt(getVariance());\n+    \t\t} else {\n+    \t\t\tstdDev = 0.0;\n+    \t\t}\n+    \t}\n+    \treturn (stdDev);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#getVariance()\n+     */\n+    public double getVariance() {\n+    \treturn apply(new Variance());\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#getSkewness()\n+     */\n+    public double getSkewness() {\n+    \treturn apply(new Skewness());\n+    }\n+\n+    /**\n+      * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#getKurtosis()\n+     */\n+    public double getKurtosis() {\n+    \treturn apply(new Kurtosis());\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#getKurtosisClass()\n+     */\n+    public int getKurtosisClass() {\n+    \tint kClass = MESOKURTIC;\n+\n+    \tdouble kurtosis = getKurtosis();\n+    \tif (kurtosis > 0) {\n+    \t\tkClass = LEPTOKURTIC;\n+    \t} else if (kurtosis < 0) {\n+    \t\tkClass = PLATYKURTIC;\n+    \t}\n+    \treturn (kClass);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#getMax()\n+     */\n+    public double getMax() {\n+    \treturn apply(new Max());\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#getMin()\n+     */\n+    public double getMin() {\n+    \treturn apply(new Min());\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#getGeometricMean()\n+     */\n+    public double getGeometricMean() {\n+    \treturn apply(new GeometricMean());\n+    }\n+    \n+    /**\n+     * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#getPercentile(double)\n+     */\n+    public double getPercentile(double p) {\n+    \treturn apply(new Percentile(p));\n+    }\n+    \n+    /**\n+     * Generates a text report displaying\n+     * univariate statistics from values that\n+     * have been added.\n+     * @return String with line feeds displaying statistics\n+     */\n+    public String toString() {\n+    \tStringBuffer outBuffer = new StringBuffer();\n+    \toutBuffer.append(\"UnivariateImpl:\\n\");\n+    \toutBuffer.append(\"n: \" + getN() + \"\\n\");\n+    \toutBuffer.append(\"min: \" + getMin() + \"\\n\");\n+    \toutBuffer.append(\"max: \" + getMax() + \"\\n\");\n+    \toutBuffer.append(\"mean: \" + getMean() + \"\\n\");\n+    \toutBuffer.append(\"std dev: \" + getStandardDeviation() + \"\\n\");\n+    \toutBuffer.append(\"skewness: \" + getSkewness() + \"\\n\");\n+    \toutBuffer.append(\"kurtosis: \" + getKurtosis() + \"\\n\");\n+    \treturn outBuffer.toString();\n+    }\n+    \n+    /**\n+     * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#getSortedValues()\n+     */\n+    public double[] getSortedValues() {\n+        double[] sort = getValues();\n+        Arrays.sort(sort);\n+        return sort;\n+    }\n+    \n+    /**\n+     * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#addValue(double)\n+     */\n+    public abstract void addValue(double value);\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#getValues()\n+     */\n+    public abstract double[] getValues();\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#getElement(int)\n+     */\n+    public abstract double getElement(int index);\n+    \n+    /**\n+      * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#apply(UnivariateStatistic)\n+     */\n+    public abstract double apply(UnivariateStatistic stat);\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatistics.java\n+/*\n+ * Copyright 2003-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.univariate;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.discovery.tools.DiscoverClass;\n+\n+\n+/**\n+ * Abstract factory class for univariate statistical summaries.\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2004/04/12 02:27:49 $\n+ */\n+public abstract class DescriptiveStatistics implements Serializable, StatisticalSummary {\n+\n+\t/**\n+\t * Create an instance of a <code>DescriptiveStatistics</code>\n+\t * @return a new factory. \n+\t */\n+\tpublic static DescriptiveStatistics newInstance(String cls) throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n+\t\treturn newInstance(Class.forName(cls));\n+\t}\n+\t/**\n+\t * Create an instance of a <code>DescriptiveStatistics</code>\n+\t * @return a new factory. \n+\t */\n+\tpublic static DescriptiveStatistics newInstance(Class cls) throws InstantiationException, IllegalAccessException {\n+\t\treturn (DescriptiveStatistics)cls.newInstance();\n+\t}\n+\t\n+\t\t/**\n+\t * Create an instance of a <code>DescriptiveStatistics</code>\n+\t * @return a new factory. \n+\t */\n+\tpublic static DescriptiveStatistics newInstance() {\n+\t\tDescriptiveStatistics factory = null;\n+\t\ttry {\n+\t\t\tDiscoverClass dc = new DiscoverClass();\n+\t\t\tfactory = (DescriptiveStatistics) dc.newInstance(\n+\t\t\t\tDescriptiveStatistics.class,\n+\t\t\t\t\"org.apache.commons.math.stat.univariate.DescriptiveStatisticsImpl\");\n+\t\t} catch(Exception ex) {\n+\t\t\t// ignore as default implementation will be used.\n+\t\t}\n+\t\treturn factory;\n+\t}\n+\t\n+\t/**\n+\t * This constant signals that a Univariate implementation\n+\t * takes into account the contributions of an infinite number of\n+\t * elements.  In other words, if getWindow returns this\n+\t * constant, there is, in effect, no \"window\".\n+\t */\n+\tpublic static final int INFINITE_WINDOW = -1;\n+\n+\t/**\n+\t * A LEPTOKURTIC set has a positive kurtosis (a high peak) \n+\t */\n+\tpublic static int LEPTOKURTIC = 1;\n+\t/**\n+\t * A MESOKURTIC set has a kurtosis of 0 - it is a normal distribution\n+\t */\n+\tpublic static int MESOKURTIC = 0;\n+\t/**\n+\t * A PLATYKURTIC set has a negative kurtosis (a flat \"peak\")\n+\t */\n+\tpublic static int PLATYKURTIC = -1;\n+\n+\t/**\n+\t * Adds the value to the set of numbers\n+\t * @param v the value to be added \n+\t */\n+\tpublic abstract void addValue(double v);\n+\n+\t/** \n+\t * Returns the <a href=\"http://www.xycoon.com/arithmetic_mean.htm\">\n+\t * arithmetic mean </a> of the available values \n+\t * @return The mean or Double.NaN if no values have been added.\n+\t */\n+\tpublic abstract double getMean();\n+\n+\t/** \n+\t * Returns the <a href=\"http://www.xycoon.com/geometric_mean.htm\">\n+\t * geometric mean </a> of the available values\n+\t * @return The geometricMean, Double.NaN if no values have been added, \n+\t * or if the productof the available values is less than or equal to 0.\n+\t */\n+\tpublic abstract double getGeometricMean();\n+\n+\t/** \n+\t * Returns the variance of the available values.\n+\t * @return The variance, Double.NaN if no values have been added \n+\t * or 0.0 for a single value set.  \n+\t */\n+\tpublic abstract double getVariance();\n+\n+\t/** \n+\t * Returns the standard deviation of the available values.\n+\t * @return The standard deviation, Double.NaN if no values have been added \n+\t * or 0.0 for a single value set. \n+\t */\n+\tpublic abstract double getStandardDeviation();\n+\n+\t/**\n+\t * Returns the skewness of the available values. Skewness is a \n+\t * measure of the assymetry of a given distribution.\n+\t * @return The skewness, Double.NaN if no values have been added \n+\t * or 0.0 for a value set &lt;=2. \n+\t */\n+\tpublic abstract double getSkewness();\n+\n+\t/**\n+\t * Returns the Kurtosis of the available values. Kurtosis is a \n+\t * measure of the \"peakedness\" of a distribution\n+\t * @return The kurtosis, Double.NaN if no values have been added, or 0.0 \n+\t * for a value set &lt;=3. \n+\t */\n+\tpublic abstract double getKurtosis();\n+\n+\t/**\n+\t * Returns the Kurtosis \"classification\" a distribution can be \n+\t * leptokurtic (high peak), platykurtic (flat peak), \n+\t * or mesokurtic (zero kurtosis).  \n+\t * \n+\t * @return A static constant defined in this interface, \n+\t *         StoredDeviation.LEPTOKURITC, StoredDeviation.PLATYKURTIC, or \n+\t *         StoredDeviation.MESOKURTIC\n+\t */\n+\tpublic abstract int getKurtosisClass();\n+    \n+\t/** \n+\t * Returns the maximum of the available values\n+\t * @return The max or Double.NaN if no values have been added.\n+\t */\n+\tpublic abstract double getMax();\n+\n+\t/** \n+\t* Returns the minimum of the available values\n+\t* @return The min or Double.NaN if no values have been added.\n+\t*/\n+\tpublic abstract double getMin();\n+\n+\t/** \n+\t * Returns the number of available values\n+\t * @return The number of available values\n+\t */\n+\tpublic abstract long getN();\n+\n+\t/**\n+\t * Returns the sum of the values that have been added to Univariate.\n+\t * @return The sum or Double.NaN if no values have been added\n+\t */\n+\tpublic abstract double getSum();\n+\n+\t/**\n+\t * Returns the sum of the squares of the available values.\n+\t * @return The sum of the squares or Double.NaN if no \n+\t * values have been added.\n+\t */\n+\tpublic abstract double getSumsq();\n+\n+\t/** \n+\t * Resets all statistics and storage\n+\t */\n+\tpublic abstract void clear();\n+\n+\t/**\n+\t * Univariate has the ability to return only measures for the\n+\t * last N elements added to the set of values.\n+\t * @return The current window size or -1 if its Infinite.\n+\t */\n+\n+\tpublic abstract int getWindowSize();\n+\n+\t/**\n+\t * WindowSize controls the number of values which contribute \n+\t * to the values returned by Univariate.  For example, if \n+\t * windowSize is set to 3 and the values {1,2,3,4,5} \n+\t * have been added <strong> in that order</strong> \n+\t * then the <i>available values</i> are {3,4,5} and all\n+\t * reported statistics will be based on these values\n+\t * @param windowSize sets the size of the window.\n+\t */\n+\tpublic abstract void setWindowSize(int windowSize);\n+\t\n+    /**\n+     * Returns the current set of values in an array of double primitives.  \n+     * The order of addition is preserved.  The returned array is a fresh\n+     * copy of the underlying data -- i.e., it is not a reference to the\n+     * stored data.\n+     * \n+     * @return returns the current set of numbers in the order in which they \n+     *         were added to this set\n+     */\n+\tpublic abstract double[] getValues();\n+\n+    /**\n+     * Returns the current set of values in an array of double primitives,  \n+     * sorted in ascending order.  The returned array is a fresh\n+     * copy of the underlying data -- i.e., it is not a reference to the\n+     * stored data.\n+     * @return returns the current set of \n+     * numbers sorted in ascending order        \n+     */\n+\tpublic abstract double[] getSortedValues();\n+\n+    /**\n+     * Returns the element at the specified index\n+     * @param index The Index of the element\n+     * @return return the element at the specified index\n+     */\n+\tpublic abstract double getElement(int index);\n+\n+    /**\n+     * Returns an estimate for the pth percentile of the stored values. \n+     * <p>\n+     * The implementation provided here follows the first estimation procedure presented\n+     * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section2/prc252.htm\">here.</a>\n+     * <p>\n+     * <strong>Preconditions</strong>:<ul>\n+     * <li><code>0 &lt; p &lt; 100</code> (otherwise an \n+     * <code>IllegalArgumentException</code> is thrown)</li>\n+     * <li>at least one value must be stored (returns <code>Double.NaN\n+     *     </code> otherwise)</li>\n+     * </ul>\n+     * \n+     * @param p the requested percentile (scaled from 0 - 100)\n+     * @return An estimate for the pth percentile of the stored data \n+     * values\n+     */\n+\tpublic abstract double getPercentile(double p);\n+\t\n+\t/**\n+\t * Apply the given statistic to the data associated with this set of statistics.\n+\t * @param stat the statistic to apply\n+\t * @return the computed value of the statistic.\n+\t */\n+\tpublic abstract double apply(UnivariateStatistic stat);\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java\n+/*\n+ * Copyright 2003-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.univariate;\n+\n+import java.io.Serializable;\n+\n+import java.util.Arrays;\n+\n+import org.apache.commons.math.util.ContractableDoubleArray;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2004/04/12 02:27:49 $\n+ */\n+public class DescriptiveStatisticsImpl extends AbstractDescriptiveStatistics implements Serializable {\n+\n+\t/** hold the window size **/\n+\tprotected int windowSize = INFINITE_WINDOW;\n+    \n+    /** \n+     *  Stored data values\n+     */\n+    protected ContractableDoubleArray eDA;\n+\n+    /**\n+     * Construct a DescriptiveStatisticsImpl with infinite window\n+     */\n+    public DescriptiveStatisticsImpl() {\n+    \tsuper();\n+        eDA = new ContractableDoubleArray();\n+    }\n+    \n+    /**\n+     * Construct a DescriptiveStatisticsImpl with finite window\n+     */\n+    public DescriptiveStatisticsImpl(int window) {\n+    \tsuper(window);\n+    \teDA = new ContractableDoubleArray();\n+    }\n+\n+    public int getWindowSize() {\n+    \treturn windowSize;\n+    }\n+    \n+    /**\n+     * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#getValues()\n+     */\n+    public double[] getValues() {\n+\n+        double[] copiedArray = new double[eDA.getNumElements()];\n+        System.arraycopy(\n+            eDA.getElements(),\n+            0,\n+            copiedArray,\n+            0,\n+            eDA.getNumElements());\n+        return copiedArray;\n+    }\n+    \n+    /**\n+     * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#getSortedValues()\n+     */\n+    public double[] getSortedValues() {\n+    \tdouble[] sort = getValues();\n+    \tArrays.sort(sort);\n+    \treturn sort;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#getElement(int)\n+     */\n+    public double getElement(int index) {\n+        return eDA.getElement(index);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#getN()\n+     */\n+    public long getN() {\n+        return eDA.getNumElements();\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#addValue(double)\n+     */\n+    public synchronized void addValue(double v) {\n+        if (windowSize != INFINITE_WINDOW) {\n+            if (getN() == windowSize) {\n+                eDA.addElementRolling(v);\n+            } else if (getN() < windowSize) {\n+                eDA.addElement(v);\n+            } else {\n+                String msg =\n+                    \"A window Univariate had more element than \" +\n+                    \"the windowSize.  This is an inconsistent state.\";\n+                throw new RuntimeException(msg);\n+            }\n+        } else {\n+            eDA.addElement(v);\n+        }\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#clear()\n+     */\n+    public synchronized void clear() {\n+        eDA.clear();\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#setWindowSize(int)\n+     */\n+    public synchronized void setWindowSize(int windowSize) {\n+        this.windowSize = windowSize;\n+\n+        // We need to check to see if we need to discard elements\n+        // from the front of the array.  If the windowSize is less than \n+        // the current number of elements.\n+        if (windowSize < eDA.getNumElements()) {\n+            eDA.discardFrontElements(eDA.getNumElements() - windowSize);\n+        }\n+    }\n+\n+    /**\n+     * Apply the given statistic to this univariate collection.\n+     * @param stat the statistic to apply\n+     * @return the computed value of the statistic.\n+     */\n+    public double apply(UnivariateStatistic stat) {\n+        if (eDA != null) {\n+            return stat.evaluate(eDA.getValues(), eDA.start(), eDA.getNumElements());\n+        }\n+        return Double.NaN;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/univariate/StatisticalSummary.java\n+/*\n+ * Copyright 2004,2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.univariate;\n+\n+/**\n+ *  Reporting interface for basic univariate statistics.\n+ * \n+  * @version $Revision: 1.1 $ $Date: 2004/04/12 02:27:49 $\n+ */\n+public interface StatisticalSummary {\n+\t/** \n+\t * Returns the <a href=\"http://www.xycoon.com/arithmetic_mean.htm\">\n+\t * arithmetic mean </a> of the available values \n+\t * @return The mean or Double.NaN if no values have been added.\n+\t */\n+\tpublic abstract double getMean();\n+\t/** \n+\t * Returns the variance of the available values.\n+\t * @return The variance, Double.NaN if no values have been added \n+\t * or 0.0 for a single value set.  \n+\t */\n+\tpublic abstract double getVariance();\n+\t/** \n+\t * Returns the standard deviation of the available values.\n+\t * @return The standard deviation, Double.NaN if no values have been added \n+\t * or 0.0 for a single value set. \n+\t */\n+\tpublic abstract double getStandardDeviation();\n+\t/** \n+\t * Returns the maximum of the available values\n+\t * @return The max or Double.NaN if no values have been added.\n+\t */\n+\tpublic abstract double getMax();\n+\t/** \n+\t* Returns the minimum of the available values\n+\t* @return The min or Double.NaN if no values have been added.\n+\t*/\n+\tpublic abstract double getMin();\n+\t/** \n+\t * Returns the number of available values\n+\t * @return The number of available values\n+\t */\n+\tpublic abstract long getN();\n+\t/**\n+\t * Returns the sum of the values that have been added to Univariate.\n+\t * @return The sum or Double.NaN if no values have been added\n+\t */\n+\tpublic abstract double getSum();\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/univariate/SummaryStatistics.java\n+/*\n+ * Copyright 2004,2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.univariate;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.discovery.tools.DiscoverClass;\n+\n+/**\n+ * Abstract factory class for univariate statistical summaries.\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2004/04/12 02:27:49 $\n+ */\n+public abstract class SummaryStatistics implements Serializable, StatisticalSummary{\n+\n+\t/**\n+\t * Create an instance of a <code>SummaryStatistics</code>\n+\t * @return a new factory. \n+\t */\n+\tpublic static SummaryStatistics newInstance(String cls) throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n+\t\treturn newInstance(Class.forName(cls));\n+\t}\n+\t/**\n+\t * Create an instance of a <code>DescriptiveStatistics</code>\n+\t * @return a new factory. \n+\t */\n+\tpublic static SummaryStatistics newInstance(Class cls) throws InstantiationException, IllegalAccessException {\n+\t\treturn (SummaryStatistics)cls.newInstance();\n+\t}\n+\t\n+\t\t/**\n+\t * Create an instance of a <code>DescriptiveStatistics</code>\n+\t * @return a new factory. \n+\t */\n+\tpublic static SummaryStatistics newInstance() {\n+\t\tSummaryStatistics factory = null;\n+\t\ttry {\n+\t\t\tDiscoverClass dc = new DiscoverClass();\n+\t\t\tfactory = (SummaryStatistics) dc.newInstance(\n+\t\t\t\tSummaryStatistics.class,\n+\t\t\t\t\"org.apache.commons.math.stat.univariate.SummaryStatisticsImpl\");\n+\t\t} catch(Exception ex) {\n+\t\t\t// ignore as default implementation will be used.\n+\t\t}\n+\t\treturn factory;\n+\t}\n+\t\n+\t/**\n+\t * Adds the value to the data to be summarized\n+\t * @param v the value to be added \n+\t */\n+\tpublic abstract void addValue(double v);\n+\n+\t/** \n+\t * Returns the <a href=\"http://www.xycoon.com/arithmetic_mean.htm\">\n+\t * arithmetic mean </a> of the available values \n+\t * @return The mean or Double.NaN if no values have been added.\n+\t */\n+\tpublic abstract double getMean();\n+\n+\t/** \n+\t * Returns the <a href=\"http://www.xycoon.com/geometric_mean.htm\">\n+\t * geometric mean </a> of the available values\n+\t * @return The geometricMean, Double.NaN if no values have been added, \n+\t * or if the productof the available values is less than or equal to 0.\n+\t */\n+\tpublic abstract double getGeometricMean();\n+\n+\t/** \n+\t * Returns the variance of the available values.\n+\t * @return The variance, Double.NaN if no values have been added \n+\t * or 0.0 for a single value set.  \n+\t */\n+\tpublic abstract double getVariance();\n+\n+\t/** \n+\t * Returns the standard deviation of the available values.\n+\t * @return The standard deviation, Double.NaN if no values have been added \n+\t * or 0.0 for a single value set. \n+\t */\n+\tpublic abstract double getStandardDeviation();\n+    \n+\t/** \n+\t * Returns the maximum of the available values\n+\t * @return The max or Double.NaN if no values have been added.\n+\t */\n+\tpublic abstract double getMax();\n+\n+\t/** \n+\t* Returns the minimum of the available values\n+\t* @return The min or Double.NaN if no values have been added.\n+\t*/\n+\tpublic abstract double getMin();\n+\n+\t/** \n+\t * Returns the number of available values\n+\t * @return The number of available values\n+\t */\n+\tpublic abstract long getN();\n+\n+\t/**\n+\t * Returns the sum of the values that have been added to Univariate.\n+\t * @return The sum or Double.NaN if no values have been added\n+\t */\n+\tpublic abstract double getSum();\n+\n+\t/**\n+\t * Returns the sum of the squares of the available values.\n+\t * @return The sum of the squares or Double.NaN if no \n+\t * values have been added.\n+\t */\n+\tpublic abstract double getSumsq();\n+\n+\t/** \n+\t * Resets all statistics\n+\t */\n+\tpublic abstract void clear();\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/univariate/SummaryStatisticsImpl.java\n+/*\n+ * Copyright 2004,2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.univariate;\n+\n+import org.apache.commons.math.stat.univariate.moment.SecondMoment;\n+import org.apache.commons.math.stat.univariate.moment.GeometricMean;\n+import org.apache.commons.math.stat.univariate.moment.Mean;\n+import org.apache.commons.math.stat.univariate.moment.Variance;\n+import org.apache.commons.math.stat.univariate.rank.Max;\n+import org.apache.commons.math.stat.univariate.rank.Min;\n+import org.apache.commons.math.stat.univariate.summary.Sum;\n+import org.apache.commons.math.stat.univariate.summary.SumOfLogs;\n+import org.apache.commons.math.stat.univariate.summary.SumOfSquares;\n+\n+/**\n+ * Provides a default {@link SummaryStatistics} implementation.\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2004/04/12 02:27:49 $  \n+ */\n+public class SummaryStatisticsImpl extends SummaryStatistics {\n+\n+    /** count of values that have been added */\n+    protected long n = 0;\n+    \n+    /** SecondMoment is used to compute the mean and variance */\n+    protected SecondMoment secondMoment = null;\n+    \n+    /** sum of values that have been added */\n+    protected Sum sum = null;\n+\n+    /** sum of the square of each value that has been added */\n+    protected SumOfSquares sumsq = null;\n+\n+    /** min of values that have been added */\n+    protected Min min = null;\n+\n+    /** max of values that have been added */\n+    protected Max max = null;\n+\n+    /** sumLog of values that have been added */\n+    protected SumOfLogs sumLog = null;\n+\n+    /** geoMean of values that have been added */\n+    protected GeometricMean geoMean = null;\n+\n+    /** mean of values that have been added */\n+    protected Mean mean = null;\n+\n+    /** variance of values that have been added */\n+    protected Variance variance = null;\n+\n+    /**\n+     * Construct a SummaryStatistics\n+     */\n+    public SummaryStatisticsImpl() {\n+        sum = new Sum();\n+        sumsq = new SumOfSquares();\n+        min = new Min();\n+        max = new Max();\n+        sumLog = new SumOfLogs();\n+        geoMean = new GeometricMean();\n+        secondMoment = new SecondMoment();\n+    }\n+\n+    /**\n+     * Add a value to the data\n+     * \n+     * @param value  the value to add\n+     */\n+    public void addValue(double value) {\n+    \tsum.increment(value);\n+    \tsumsq.increment(value);\n+    \tmin.increment(value);\n+    \tmax.increment(value);\n+    \tsumLog.increment(value);\n+    \tgeoMean.increment(value);\n+    \tsecondMoment.increment(value);\n+    \tn++;\n+    }\n+\n+    /** \n+     * Returns the number of available values\n+     * @return The number of available values\n+     */\n+    public long getN() {\n+        return n;\n+    }\n+\n+    /**\n+     * Returns the sum of the values that have been added to Univariate.\n+     * @return The sum or Double.NaN if no values have been added\n+     */\n+    public double getSum() {\n+        return sum.getResult();\n+    }\n+\n+    /**\n+     * Returns the sum of the squares of the values that have been added.\n+     * <p>\n+     *  Double.NaN is returned if no values have been added.</p>\n+     * \n+     * @return The sum of squares\n+     */\n+    public double getSumsq() {\n+        return sumsq.getResult();\n+    }\n+\n+    /**\n+     * Returns the mean of the values that have been added.\n+     * <p>\n+     *  Double.NaN is returned if no values have been added.</p>\n+     * \n+     * @return the mean\n+     */\n+    public double getMean() {\n+      return new Mean(secondMoment).getResult();\n+    }\n+\n+    /**\n+     * Returns the standard deviation of the values that have been added.\n+     * <p>\n+     *  Double.NaN is returned if no values have been added.</p>\n+     * \n+     * @return the standard deviation\n+     */\n+    public double getStandardDeviation() {\n+        double stdDev = Double.NaN;\n+        if (getN() > 0) {\n+            if (getN() > 1) {\n+                stdDev = Math.sqrt(getVariance());\n+            } else {\n+                stdDev = 0.0;\n+            }\n+        }\n+        return (stdDev);\n+    }\n+\n+    /**\n+     * Returns the variance of the values that have been added.\n+     * <p>\n+     *  Double.NaN is returned if no values have been added.</p>\n+     *\n+     * @return the variance \n+     */\n+    public double getVariance() {\n+        return new Variance(secondMoment).getResult();\n+    }\n+\n+    /**\n+     * Returns the maximum of the values that have been added.\n+     * <p>\n+     *  Double.NaN is returned if no values have been added.</p>\n+     *\n+     * @return the maximum  \n+     */\n+    public double getMax() {\n+        return max.getResult();\n+    }\n+\n+    /**\n+     * Returns the minimum of the values that have been added.\n+     * <p>\n+     *  Double.NaN is returned if no values have been added.</p>\n+     *\n+     * @return the minimum  \n+     */\n+    public double getMin() {\n+        return min.getResult();\n+    }\n+\n+    /**\n+     * Returns the geometric mean of the values that have been added.\n+     * <p>\n+     *  Double.NaN is returned if no values have been added.</p>\n+     *\n+     * @return the geometric mean  \n+     */\n+    public double getGeometricMean() {\n+        return geoMean.getResult();\n+    }\n+    \n+    /**\n+     * Generates a text report displaying\n+     * summary statistics from values that\n+     * have been added.\n+     * @return String with line feeds displaying statistics\n+     */\n+    public String toString() {\n+        StringBuffer outBuffer = new StringBuffer();\n+        outBuffer.append(\"SummaryStatistics:\\n\");\n+        outBuffer.append(\"n: \" + n + \"\\n\");\n+        outBuffer.append(\"min: \" + min + \"\\n\");\n+        outBuffer.append(\"max: \" + max + \"\\n\");\n+        outBuffer.append(\"mean: \" + getMean() + \"\\n\");\n+        outBuffer.append(\"std dev: \" + getStandardDeviation() + \"\\n\");\n+        return outBuffer.toString();\n+    }\n+\n+    /** \n+\t * Resets all statistics and storage\n+\t */\n+    public void clear() {\n+        this.n = 0;\n+        min.clear();\n+        max.clear();\n+        sum.clear();\n+        sumLog.clear();\n+        sumsq.clear();\n+        geoMean.clear();\n+        secondMoment.clear();\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java\n+++ b/src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java\n import java.util.Iterator;\n \n import org.apache.commons.math.RetryTestCase;\n-import org.apache.commons.math.stat.SummaryStatistics;\n+import org.apache.commons.math.stat.univariate.SummaryStatistics;\n \n /**\n  * Test cases for the EmpiricalDistribution class\n  *\n- * @version $Revision: 1.15 $ $Date: 2004/03/07 16:32:44 $\n+ * @version $Revision: 1.16 $ $Date: 2004/04/12 02:27:49 $\n  */\n \n public final class EmpiricalDistributionTest extends RetryTestCase {\n--- a/src/test/org/apache/commons/math/random/RandomDataTest.java\n+++ b/src/test/org/apache/commons/math/random/RandomDataTest.java\n \n import org.apache.commons.math.RetryTestCase;\n import org.apache.commons.math.stat.Frequency;\n-import org.apache.commons.math.stat.SummaryStatistics;\n import org.apache.commons.math.stat.inference.TestStatisticImpl;\n+import org.apache.commons.math.stat.univariate.SummaryStatistics;\n \n /**\n  * Test cases for the RandomData class.\n  *\n- * @version $Revision: 1.14 $ $Date: 2004/04/11 20:42:33 $\n+ * @version $Revision: 1.15 $ $Date: 2004/04/12 02:27:49 $\n  */\n \n public final class RandomDataTest extends RetryTestCase {\n--- a/src/test/org/apache/commons/math/random/ValueServerTest.java\n+++ b/src/test/org/apache/commons/math/random/ValueServerTest.java\n import java.net.URL;\n \n import org.apache.commons.math.RetryTestCase;\n-import org.apache.commons.math.stat.SummaryStatistics;\n+import org.apache.commons.math.stat.univariate.SummaryStatistics;\n  \n /**\n  * Test cases for the ValueServer class.\n  *\n- * @version $Revision: 1.14 $ $Date: 2004/03/07 16:32:44 $\n+ * @version $Revision: 1.15 $ $Date: 2004/04/12 02:27:49 $\n  */\n \n public final class ValueServerTest extends RetryTestCase {\n--- a/src/test/org/apache/commons/math/stat/CertifiedDataTest.java\n+++ b/src/test/org/apache/commons/math/stat/CertifiedDataTest.java\n import org.apache.commons.logging.LogFactory;\n import org.apache.commons.logging.Log;\n \n+import org.apache.commons.math.stat.univariate.SummaryStatistics;\n+import org.apache.commons.math.stat.univariate.SummaryStatisticsImpl;\n+import org.apache.commons.math.stat.univariate.DescriptiveStatistics;\n+\n /**\n- * Test cases for the {@link DescriptiveStatistics} class.\n- * @version $Revision: 1.16 $ $Date: 2004/03/18 05:52:36 $\n+ * Certified data test cases.\n+ * @version $Revision: 1.17 $ $Date: 2004/04/12 02:27:49 $\n  */\n public class CertifiedDataTest extends TestCase  {\n \n \t/**\n \t * Test StorelessDescriptiveStatistics\n \t*/\n-\tpublic void testUnivariateImpl() {\n-\t\tSummaryStatistics u = null;\n-\t\ttry {\n-\t\t\tu = SummaryStatistics.newInstance(SummaryStatisticsImpl.class);\n-\t\t} catch (InstantiationException e) {\n-\t\t\t// TODO Auto-generated catch block\n-\t\t\te.printStackTrace();\n-\t\t} catch (IllegalAccessException e) {\n-\t\t\t// TODO Auto-generated catch block\n-\t\t\te.printStackTrace();\n-\t\t}\n-\n+\tpublic void testUnivariateImpl() throws Exception {\n+\t\tSummaryStatistics u = SummaryStatistics.newInstance(SummaryStatisticsImpl.class);\n \t\tloadStats(\"data/PiDigits.txt\", u);\n \t\tassertEquals(\"PiDigits: std\", std, u.getStandardDeviation(), .0000000000001);\n \t\tassertEquals(\"PiDigits: mean\", mean, u.getMean(), .0000000000001);\t\n--- a/src/test/org/apache/commons/math/stat/StatUtilsTest.java\n+++ b/src/test/org/apache/commons/math/stat/StatUtilsTest.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.apache.commons.math.stat.univariate.DescriptiveStatistics;\n+\n /**\n  * Test cases for the {@link StatUtils} class.\n- * @version $Revision: 1.13 $ $Date: 2004/02/21 21:35:17 $\n+ * @version $Revision: 1.14 $ $Date: 2004/04/12 02:27:49 $\n  */\n \n public final class StatUtilsTest extends TestCase {\n--- a/src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java\n+++ b/src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java\n import org.apache.commons.beanutils.PropertyUtils;\n import org.apache.commons.lang.StringUtils;\n import org.apache.commons.math.TestUtils;\n-import org.apache.commons.math.stat.DescriptiveStatistics;\n-import org.apache.commons.math.stat.SummaryStatistics;\n+import org.apache.commons.math.stat.univariate.DescriptiveStatistics;\n+import org.apache.commons.math.stat.univariate.SummaryStatistics;\n \n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2004/03/18 05:52:37 $\n+ * @version $Revision: 1.2 $ $Date: 2004/04/12 02:27:50 $\n  */\n public abstract class CertifiedDataAbstractTest extends TestCase {\n \t\n--- a/src/test/org/apache/commons/math/stat/inference/TestStatisticTest.java\n+++ b/src/test/org/apache/commons/math/stat/inference/TestStatisticTest.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.math.stat.SummaryStatistics;\n+import org.apache.commons.math.stat.univariate.SummaryStatistics;\n /**\n  * Test cases for the TestStatistic class.\n  *\n- * @version $Revision: 1.2 $ $Date: 2004/04/11 20:42:33 $\n+ * @version $Revision: 1.3 $ $Date: 2004/04/12 02:27:50 $\n  */\n \n public final class TestStatisticTest extends TestCase {\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java\n+/*\n+ * Copyright 2003-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.univariate;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.math.beans.*;\n+import org.apache.commons.math.stat.multivariate.*;\n+\n+/**\n+ * Test cases for the {@link BeanListUnivariateImpl} class.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2004/04/12 02:27:50 $\n+ */\n+\n+public final class BeanListUnivariateImplTest extends TestCase {\n+    \n+    private List patientList = null;\n+    private double tolerance = Double.MIN_VALUE;\n+    \n+    public BeanListUnivariateImplTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() {  \n+        patientList = new ArrayList();\n+\n+        // Create and add patient bean 1\n+        VitalStats vs1 = new VitalStats( new Double(120.0), \n+                                         new Double(96.4) );\n+        Patient p1 = new Patient( vs1, new Integer( 35 ) );\n+        patientList.add( p1 );\n+\n+        // Create and add patient bean 2\n+        VitalStats vs2 = new VitalStats( new Double(70.0), \n+                                         new Double(97.4) );\n+        Patient p2 = new Patient( vs2, new Integer( 23 ) );\n+        patientList.add( p2 );\n+\n+        // Create and add patient bean 3\n+        VitalStats vs3 = new VitalStats( new Double(90.0), \n+                                         new Double(98.6) );\n+        Patient p3 = new Patient( vs3, new Integer( 42 ) );\n+        patientList.add( p3 );\n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(BeanListUnivariateImplTest.class);\n+        suite.setName(\"Frequency Tests\");\n+        return suite;\n+    }\n+    \n+    /** test stats */\n+    public void testStats() {\n+    \t\n+        DescriptiveStatistics u = new BeanListUnivariateImpl( patientList ); \n+\n+        assertEquals(\"total count\",3,u.getN(),tolerance);\n+\n+        u.clear();\n+        assertEquals(\"total count\",0,u.getN(),tolerance);    \n+    }     \n+    \n+    public void testPropStats() {\n+\n+        DescriptiveStatistics heartU = new BeanListUnivariateImpl( patientList,\n+                                          \"vitalStats.heartRate\" );\n+\n+        \n+\n+        assertEquals( \"Mean heart rate unexpected\", 93.333, \n+                      heartU.getMean(), 0.001 );\n+        assertEquals( \"Max heart rate unexpected\", 120.0, \n+                      heartU.getMax(), 0.001 );\n+\n+        DescriptiveStatistics ageU = new BeanListUnivariateImpl( patientList,\n+                                                           \"age\" );\n+\n+        assertEquals( \"Mean age unexpected\", 33.333,\n+                      ageU.getMean(), 0.001 );\n+        assertEquals( \"Max age unexpected\", 42.0,\n+                      ageU.getMax(), 0.001 );\n+\n+    }\n+    \n+    public void testSetPropertyName(){\n+        BeanListUnivariateImpl u = new BeanListUnivariateImpl(null);\n+        String expected = \"property\";\n+        u.setPropertyName(expected);\n+        assertEquals(expected, u.getPropertyName());\n+    }\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/univariate/DescriptiveStatisticsTest.java\n+/*\n+ * Copyright 2003-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.univariate;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.math.TestUtils;\n+import org.apache.commons.math.random.RandomData;\n+import org.apache.commons.math.random.RandomDataImpl;\n+\n+/**\n+ * Test cases for the {@link Univariate} class.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2004/04/12 02:27:50 $\n+ */\n+\n+public final class DescriptiveStatisticsTest extends TestCase {\n+    private double one = 1;\n+    private float two = 2;\n+    private int three = 3;\n+    private double mean = 2;\n+    private double sumSq = 18;\n+    private double sum = 8;\n+    private double var = 0.666666666666666666667;\n+    private double std = Math.sqrt(var);\n+    private double n = 4;\n+    private double min = 1;\n+    private double max = 3;\n+    private double skewness = 0;\n+    private double kurtosis = 0.5;\n+    private int kClass = DescriptiveStatistics.LEPTOKURTIC;\n+    private double tolerance = 10E-15;\n+    \n+    public DescriptiveStatisticsTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() {  \n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(DescriptiveStatisticsTest.class);\n+        suite.setName(\"Descriptive Statistics Tests\");\n+        return suite;\n+    }\n+    \n+    /** test stats */\n+    public void testStats() {\n+        DescriptiveStatistics u = DescriptiveStatistics.newInstance(); \n+        assertEquals(\"total count\",0,u.getN(),tolerance);\n+        u.addValue(one);\n+        u.addValue(two);\n+        u.addValue(two);\n+        u.addValue(three);\n+        assertEquals(\"N\",n,u.getN(),tolerance);\n+        assertEquals(\"sum\",sum,u.getSum(),tolerance);\n+        assertEquals(\"sumsq\",sumSq,u.getSumsq(),tolerance);\n+        assertEquals(\"var\",var,u.getVariance(),tolerance);\n+        assertEquals(\"std\",std,u.getStandardDeviation(),tolerance);\n+        assertEquals(\"mean\",mean,u.getMean(),tolerance);\n+        assertEquals(\"min\",min,u.getMin(),tolerance);\n+        assertEquals(\"max\",max,u.getMax(),tolerance);\n+        u.clear();\n+        assertEquals(\"total count\",0,u.getN(),tolerance);    \n+    }     \n+    \n+    public void testN0andN1Conditions() throws Exception {\n+    \tDescriptiveStatistics u = DescriptiveStatistics.newInstance();\n+    \t    \t\n+            assertTrue(\"Mean of n = 0 set should be NaN\", \n+                Double.isNaN( u.getMean() ) );\n+            assertTrue(\"Standard Deviation of n = 0 set should be NaN\", \n+                Double.isNaN( u.getStandardDeviation() ) );\n+            assertTrue(\"Variance of n = 0 set should be NaN\",\n+                Double.isNaN(u.getVariance() ) );\n+\n+            u.addValue(one);\n+\n+            assertTrue( \"Mean of n = 1 set should be value of single item n1\",\n+                u.getMean() == one);\n+            assertTrue( \"StdDev of n = 1 set should be zero, instead it is: \" \n+                + u.getStandardDeviation(), u.getStandardDeviation() == 0);\n+            assertTrue( \"Variance of n = 1 set should be zero\", \n+                u.getVariance() == 0);\t\n+    }\n+    \n+    public void testSkewAndKurtosis() {\n+    \tDescriptiveStatistics u = DescriptiveStatistics.newInstance();\n+    \t\n+    \tdouble[] testArray = \n+        { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,\n+          9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };\n+  \t  \tfor( int i = 0; i < testArray.length; i++) {\n+  \t  \t\tu.addValue( testArray[i]);\n+  \t  \t}\n+  \t  \t\n+\t\tassertEquals(\"mean\", 12.40455, u.getMean(), 0.0001);\n+\t\tassertEquals(\"variance\", 10.00236, u.getVariance(), 0.0001);\n+\t\tassertEquals(\"skewness\", 1.437424, u.getSkewness(), 0.0001);\n+  \t  \tassertEquals(\"kurtosis\", 2.37719, u.getKurtosis(), 0.0001);\n+    }\n+\n+    public void testProductAndGeometricMean() throws Exception {\n+    \tDescriptiveStatistics u = DescriptiveStatistics.newInstance();\n+        u.setWindowSize(10);\n+    \t    \t\n+        u.addValue( 1.0 );\n+        u.addValue( 2.0 );\n+        u.addValue( 3.0 );\n+        u.addValue( 4.0 );\n+\n+        //assertEquals( \"Product not expected\", \n+        //    24.0, u.getProduct(), Double.MIN_VALUE );\n+        assertEquals( \"Geometric mean not expected\", \n+            2.213364, u.getGeometricMean(), 0.00001 );\n+\n+        // Now test rolling - StorelessDescriptiveStatistics should discount the contribution\n+        // of a discarded element\n+        for( int i = 0; i < 10; i++ ) {\n+            u.addValue( i + 2 );\n+        }\n+        // Values should be (2,3,4,5,6,7,8,9,10,11)\n+        \n+        //assertEquals( \"Product not expected\", 39916800.0, \n+        //    u.getProduct(), 0.00001 );\n+        assertEquals( \"Geometric mean not expected\", 5.755931, \n+            u.getGeometricMean(), 0.00001 );\n+    }\n+    \n+\tpublic void testAddValue() {\n+\t\tdouble[] test1 = {5,4,3,2,1,0};\n+\t\tdouble[] test2 = {5,2,1,0,4,3};\n+\n+\t\tDescriptiveStatistics stats = DescriptiveStatistics.newInstance();\n+\t\tstats.setWindowSize(12);\n+\t\t\n+\t\tfor(int i = 0; i < test1.length; i++){\n+\t\t\tstats.addValue(test1[i]);\n+\t\t}     \n+\t\t\n+\t\tdouble[] test3 = stats.getValues();\n+\t\t\n+\t\tfor(int i = 0; i < 6; i++){\n+\t\t\tassertEquals( \"Added value [\"+i+\"] not equal\", \n+\t\t\ttest3[i], test1[i],0.0);\n+\t\t\t//System.out.println(test3[i] + \" \"+test1[i]);\n+\t\t}     \n+\t\t\t\t\n+\t\tfor(int i = 0; i < test2.length; i++){\n+\t\t\tstats.addValue(test2[i]);\n+\t\t}     \n+ \n+\t\ttest3 = stats.getValues();  \n+\t\t\n+\t\tfor(int i = 6; i < 12; i++){\n+\t\t\tassertEquals( \"Added value [\"+i+\"] not equal\", \n+\t\t\ttest3[i], test2[i-6],0.0);\n+\t\t\t//System.out.println(test3[i] + \" \"+test2[i-6]);\n+\t\t}    \n+\t\t\n+\t\tfor(int i = 0; i < test2.length; i++){\n+\t\t\tstats.addValue(test2[i]);\n+\t\t}     \n+ \n+\t\ttest3 = stats.getValues();  \n+\t\t\n+\t\tfor(int i = 0; i < 6; i++){\n+\t\t\tassertEquals( \"Added value [\"+i+\"] not equal\", \n+\t\t\ttest3[i], test2[i],0.0);\n+\t\t\t//System.out.println(test3[i] + \" \"+test2[i]);\n+\t\t}  \n+\t\t\n+\t\tfor(int i = 6; i < 12; i++){\n+\t\t\tassertEquals( \"Added value [\"+i+\"] not equal\", \n+\t\t\ttest3[i], test2[i-6],0.0);\n+\t\t\t//System.out.println(test3[i] + \" \"+test2[i-6]);\n+\t\t}  \n+\t\t \n+\t}\n+\t\n+    public void testGetSortedValues() {\n+        double[] test1 = {5,4,3,2,1};\n+        double[] test2 = {5,2,1,3,4,0};\n+        double[] test3 = {1};\n+        int[] testi = null;\n+        double[] test4 = null;\n+        RandomData rd = new RandomDataImpl();\n+        tstGetSortedValues(test1);\n+        tstGetSortedValues(test2);\n+        tstGetSortedValues(test3);\n+        for (int i = 0; i < 10; i++) {\n+            testi = rd.nextPermutation(10,6);\n+            test4 = new double[6];\n+            for (int j = 0; j < testi.length; j++) {\n+                test4[j] = (double) testi[j];\n+            }\n+            tstGetSortedValues(test4);\n+        }\n+        for (int i = 0; i < 10; i++) {\n+            testi = rd.nextPermutation(10,5);\n+            test4 = new double[5];\n+            for (int j = 0; j < testi.length; j++) {\n+                test4[j] = (double) testi[j];\n+            }\n+            tstGetSortedValues(test4);\n+        }        \n+    }\n+    \n+        \n+        \n+    private void tstGetSortedValues(double[] test) {\n+        DescriptiveStatistics u = DescriptiveStatistics.newInstance();\n+        u.setWindowSize(test.length);\n+        for (int i = 0; i < test.length; i++) {\n+            u.addValue(test[i]);\n+        }\n+        double[] sorted = u.getSortedValues();\n+        if (sorted.length != test.length) {\n+            fail(\"wrong length for sorted values array\");\n+        }\n+        for (int i = 0; i < sorted.length-1; i++) {\n+            if (sorted[i] > sorted[i+1]) {\n+                fail(\"sorted values out of sequence\");\n+            }\n+        }\n+    }\n+    \n+    public void testPercentiles() {\n+        double[] test = {5,4,3,2,1};\n+        DescriptiveStatistics u = DescriptiveStatistics.newInstance();\n+        u.setWindowSize(110);\n+        for (int i = 0; i < test.length; i++) {\n+            u.addValue(test[i]);\n+        }\n+        assertEquals(\"expecting min\",1,u.getPercentile(5),10E-12);\n+        assertEquals(\"expecting max\",5,u.getPercentile(99),10E-12);\n+        assertEquals(\"expecting middle\",3,u.getPercentile(50),10E-12);\n+        try {\n+            double x = u.getPercentile(0);\n+            fail(\"expecting IllegalArgumentException for getPercentile(0)\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            double x = u.getPercentile(120);\n+            fail(\"expecting IllegalArgumentException for getPercentile(120)\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        \n+        u.clear();\n+        double[] test2 = {1,2,3,4};\n+        for (int i = 0; i < test2.length; i++) {\n+            u.addValue(test2[i]);\n+        }\n+        assertEquals(\"Q1\",1.25,u.getPercentile(25),10E-12);\n+        assertEquals(\"Q3\",3.75,u.getPercentile(75),10E-12);\n+        assertEquals(\"Q2\",2.5,u.getPercentile(50),10E-12);\n+        \n+        u.clear();\n+        double[] test3 = {1};\n+        for (int i = 0; i < test3.length; i++) {\n+            u.addValue(test3[i]);\n+        }\n+        assertEquals(\"Q1\",1,u.getPercentile(25),10E-12);\n+        assertEquals(\"Q3\",1,u.getPercentile(75),10E-12);\n+        assertEquals(\"Q2\",1,u.getPercentile(50),10E-12);\n+        \n+        u.clear();\n+        RandomData rd = new RandomDataImpl();\n+        int[] testi = rd.nextPermutation(100,100); // will contain 0-99\n+        for (int j = 0; j < testi.length; j++) {\n+            u.addValue((double) testi[j]);  //OK, laugh at me for the cast\n+        }\n+        for (int i = 1; i < 100; i++) {\n+            assertEquals(\"percentile \" + i,\n+                (double) i-1 + (double) i*(.01), u.getPercentile(i),10E-12);\n+        }\n+        \n+        u.clear();\n+        double[] test4 = {1,2,3,4,100};\n+        for (int i = 0; i < test4.length; i++) {\n+            u.addValue(test4[i]);\n+        }\n+        assertEquals(\"80th\",80.8,u.getPercentile(80),10E-12);\n+        \n+        u.clear();\n+        assertTrue(\"empty value set should return NaN\",\n+            Double.isNaN(u.getPercentile(50)));\n+    }\n+                      \n+    /** test stats */\n+    public void testSerialization() {\n+        DescriptiveStatistics u = DescriptiveStatistics.newInstance(); \n+        assertEquals(\"total count\",0,u.getN(),tolerance);\n+        u.addValue(one);\n+        u.addValue(two);\n+        \n+        DescriptiveStatistics u2 = (DescriptiveStatistics)TestUtils.serializeAndRecover(u); \n+ \n+        u2.addValue(two);\n+        u2.addValue(three);\n+        \n+        assertEquals(\"N\",n,u2.getN(),tolerance);\n+        assertEquals(\"sum\",sum,u2.getSum(),tolerance);\n+        assertEquals(\"sumsq\",sumSq,u2.getSumsq(),tolerance);\n+        assertEquals(\"var\",var,u2.getVariance(),tolerance);\n+        assertEquals(\"std\",std,u2.getStandardDeviation(),tolerance);\n+        assertEquals(\"mean\",mean,u2.getMean(),tolerance);\n+        assertEquals(\"min\",min,u2.getMin(),tolerance);\n+        assertEquals(\"max\",max,u2.getMax(),tolerance);\n+\n+        u2.clear();\n+        assertEquals(\"total count\",0,u2.getN(),tolerance);    \n+    }       \n+                                   \n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/univariate/ListUnivariateImpl.java\n+/*\n+ * Copyright 2003-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.univariate;\n+\n+import java.util.List;\n+\n+import org.apache.commons.math.MathException;\n+import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n+import org.apache.commons.math.stat.univariate.AbstractDescriptiveStatistics;\n+import org.apache.commons.math.util.DefaultTransformer;\n+import org.apache.commons.math.util.NumberTransformer;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2004/04/12 02:27:50 $\n+ */\n+public class ListUnivariateImpl extends AbstractDescriptiveStatistics {\n+\n+    /**\n+     * Holds a reference to a list - GENERICs are going to make\n+     * out lives easier here as we could only accept List<Number>\n+     */\n+    protected List list;\n+\n+    /** Number Transformer maps Objects to Number for us. */\n+    protected NumberTransformer transformer;\n+    \n+    /** hold the window size **/\n+    protected int windowSize = DescriptiveStatistics.INFINITE_WINDOW;\n+\n+    /**\n+     * Construct a ListUnivariate with a specific List.\n+     * @param list The list that will back this DescriptiveStatistics\n+     */\n+    public ListUnivariateImpl(List list) {\n+        this(list, new DefaultTransformer());\n+    }\n+    \n+    /**\n+     * Construct a ListUnivariate with a specific List.\n+     * @param list The list that will back this DescriptiveStatistics\n+     * @param transformer the number transformer used to convert the list items.\n+     */\n+    public ListUnivariateImpl(List list, NumberTransformer transformer) {\n+        super();\n+        this.list = list;\n+        this.transformer = transformer;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#getValues()\n+     */\n+    public double[] getValues() {\n+\n+        int length = list.size();\n+\n+        // If the window size is not INFINITE_WINDOW AND\n+        // the current list is larger that the window size, we need to\n+        // take into account only the last n elements of the list\n+        // as definied by windowSize\n+\n+        if (windowSize != DescriptiveStatistics.INFINITE_WINDOW &&\n+            windowSize < list.size())\n+        {\n+            length = list.size() - Math.max(0, list.size() - windowSize);\n+        }\n+\n+        // Create an array to hold all values\n+        double[] copiedArray = new double[length];\n+\n+        for (int i = 0; i < copiedArray.length; i++) {\n+            copiedArray[i] = getElement(i);\n+        }\n+        return copiedArray;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#getElement(int)\n+     */\n+    public double getElement(int index) {\n+\n+        double value = Double.NaN;\n+\n+        int calcIndex = index;\n+\n+        if (windowSize != DescriptiveStatistics.INFINITE_WINDOW &&\n+            windowSize < list.size())\n+        {\n+            calcIndex = (list.size() - windowSize) + index;\n+        }\n+\n+        \n+        try {\n+\t\t\tvalue = transformer.transform(list.get(calcIndex));\n+\t\t} catch (MathException e) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te.printStackTrace();\n+\t\t}\n+        \n+        return value;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#getN()\n+     */\n+    public long getN() {\n+        int n = 0;\n+\n+        if (windowSize != DescriptiveStatistics.INFINITE_WINDOW) {\n+            if (list.size() > windowSize) {\n+                n = windowSize;\n+            } else {\n+                n = list.size();\n+            }\n+        } else {\n+            n = list.size();\n+        }\n+        return n;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#addValue(double)\n+     */\n+    public void addValue(double v) {\n+        list.add(new Double(v));\n+    }\n+    \n+    /**\n+     * Adds an object to this list. \n+     * @param o Object to add to the list\n+     */\n+    public void addObject(Object o) {\n+        list.add(o);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#clear()\n+     */\n+    public void clear() {\n+        list.clear();\n+    }\n+    \n+    /**\n+     * Apply the given statistic to this univariate collection.\n+     * @param stat the statistic to apply\n+     * @return the computed value of the statistic.\n+     */\n+    public double apply(UnivariateStatistic stat) {\n+        double[] v = this.getValues();\n+\n+        if (v != null) {\n+            return stat.evaluate(v, 0, v.length);\n+        }\n+        return Double.NaN;\n+    }\n+    \n+    /**\n+     * Access the number transformer.\n+     * @return the number transformer.\n+     */\n+    public NumberTransformer getTransformer() {\n+        return transformer;\n+    }\n+\n+    /**\n+     * Modify the number transformer.\n+     * @param transformer the new number transformer.\n+     */\n+    public void setTransformer(NumberTransformer transformer) {\n+        this.transformer = transformer;\n+    }\n+    \n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#setWindowSize(int)\n+     */\n+    public synchronized void setWindowSize(int windowSize) {\n+    \tthis.windowSize = windowSize;\n+    \t//Discard elements from the front of the list if the windowSize is less than \n+    \t// the size of the list.\n+    \tint extra = list.size() - windowSize;\n+    \tfor (int i = 0; i < extra; i++) {\n+    \t\tlist.remove(0);\n+    \t}\n+    }\n+    \t\n+    \tpublic int getWindowSize() {\n+    \t\treturn windowSize;\n+    \t}\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/univariate/ListUnivariateImplTest.java\n+/*\n+ * Copyright 2003-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.univariate;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test cases for the {@link Univariate} class.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2004/04/12 02:27:50 $\n+ */\n+\n+public final class ListUnivariateImplTest extends TestCase {\n+    private double one = 1;\n+    private float two = 2;\n+    private int three = 3;\n+\n+    private double mean = 2;\n+    private double sumSq = 18;\n+    private double sum = 8;\n+    private double var = 0.666666666666666666667;\n+    private double std = Math.sqrt(var);\n+    private double n = 4;\n+    private double min = 1;\n+    private double max = 3;\n+    private double skewness = 0;\n+    private double kurtosis = 0.5;\n+    private int kClass = DescriptiveStatistics.LEPTOKURTIC;\n+    private double tolerance = 10E-15;\n+    \n+    public ListUnivariateImplTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() {  \n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(ListUnivariateImplTest.class);\n+        suite.setName(\"Frequency Tests\");\n+        return suite;\n+    }\n+    \n+    /** test stats */\n+    public void testStats() {\n+    \tList externalList = new ArrayList();\n+    \t\n+        DescriptiveStatistics u = new ListUnivariateImpl( externalList ); \n+\n+        assertEquals(\"total count\",0,u.getN(),tolerance);\n+        u.addValue(one);\n+        u.addValue(two);\n+        u.addValue(two);\n+        u.addValue(three);\n+        assertEquals(\"N\",n,u.getN(),tolerance);\n+        assertEquals(\"sum\",sum,u.getSum(),tolerance);\n+        assertEquals(\"sumsq\",sumSq,u.getSumsq(),tolerance);\n+        assertEquals(\"var\",var,u.getVariance(),tolerance);\n+        assertEquals(\"std\",std,u.getStandardDeviation(),tolerance);\n+        assertEquals(\"mean\",mean,u.getMean(),tolerance);\n+        assertEquals(\"min\",min,u.getMin(),tolerance);\n+        assertEquals(\"max\",max,u.getMax(),tolerance);\n+        u.clear();\n+        assertEquals(\"total count\",0,u.getN(),tolerance);    \n+    }     \n+    \n+    public void testN0andN1Conditions() throws Exception {\n+    \tList list = new ArrayList();\n+    \t\n+    \tDescriptiveStatistics u = new ListUnivariateImpl( list );\n+    \t    \t\n+\t\tassertTrue(\"Mean of n = 0 set should be NaN\", Double.isNaN( u.getMean() ) );\n+\t\tassertTrue(\"Standard Deviation of n = 0 set should be NaN\", Double.isNaN( u.getStandardDeviation() ) );\n+\t\tassertTrue(\"Variance of n = 0 set should be NaN\", Double.isNaN(u.getVariance() ) );\n+\n+\t\tlist.add( new Double(one));\n+\n+\t\tassertTrue( \"Mean of n = 1 set should be value of single item n1\", u.getMean() == one);\n+\t\tassertTrue( \"StdDev of n = 1 set should be zero, instead it is: \" + u.getStandardDeviation(), u.getStandardDeviation() == 0);\n+\t\tassertTrue( \"Variance of n = 1 set should be zero\", u.getVariance() == 0);\t\n+    }\n+    \n+    public void testSkewAndKurtosis() {\n+    \tDescriptiveStatistics u = DescriptiveStatistics.newInstance();\n+    \t\n+    \tdouble[] testArray = { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,\n+  \t  \t\t\t\t\t\t\t\t\t\t 9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };\n+  \t  \tfor( int i = 0; i < testArray.length; i++) {\n+  \t  \t\tu.addValue( testArray[i]);\n+  \t  \t}\n+  \t  \t\n+\t\tassertEquals(\"mean\", 12.40455, u.getMean(), 0.0001);\n+\t\tassertEquals(\"variance\", 10.00236, u.getVariance(), 0.0001);\n+\t\tassertEquals(\"skewness\", 1.437424, u.getSkewness(), 0.0001);\n+  \t  \tassertEquals(\"kurtosis\", 2.37719, u.getKurtosis(), 0.0001);\n+    }\n+\n+    public void testProductAndGeometricMean() throws Exception {\n+    \tListUnivariateImpl u = new ListUnivariateImpl(new ArrayList());\n+        u.setWindowSize(10);\n+    \t    \t\n+        u.addValue( 1.0 );\n+        u.addValue( 2.0 );\n+        u.addValue( 3.0 );\n+        u.addValue( 4.0 );\n+\n+        assertEquals( \"Geometric mean not expected\", 2.213364, u.getGeometricMean(), 0.00001 );\n+\n+        // Now test rolling - StorelessDescriptiveStatistics should discount the contribution\n+        // of a discarded element\n+        for( int i = 0; i < 10; i++ ) {\n+            u.addValue( i + 2 );\n+        }\n+        // Values should be (2,3,4,5,6,7,8,9,10,11)\n+        \n+        assertEquals( \"Geometric mean not expected\", 5.755931, u.getGeometricMean(), 0.00001 );\n+\n+\n+    }\n+\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/univariate/MixedListUnivariateImplTest.java\n+/*\n+ * Copyright 2003-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.univariate;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.commons.math.util.NumberTransformer;\n+import org.apache.commons.math.util.TransformerMap;\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test cases for the {@link Univariate} class.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2004/04/12 02:27:50 $\n+ */\n+\n+public final class MixedListUnivariateImplTest extends TestCase {\n+    private double one = 1;\n+    private float two = 2;\n+    private int three = 3;\n+\n+    private double mean = 2;\n+    private double sumSq = 18;\n+    private double sum = 8;\n+    private double var = 0.666666666666666666667;\n+    private double std = Math.sqrt(var);\n+    private double n = 4;\n+    private double min = 1;\n+    private double max = 3;\n+    private double skewness = 0;\n+    private double kurtosis = 0.5;\n+    private int kClass = DescriptiveStatistics.LEPTOKURTIC;\n+    private double tolerance = 10E-15;\n+\n+    private TransformerMap transformers = new TransformerMap();\n+    \n+    public MixedListUnivariateImplTest(String name) {\n+        super(name);\n+        transformers = new TransformerMap();\n+\n+        transformers.putTransformer(Foo.class, new NumberTransformer() {\n+            public double transform(Object o) {\n+                return Double.parseDouble(((Foo) o).heresFoo());\n+            }\n+        });\n+\n+        transformers.putTransformer(Bar.class, new NumberTransformer() {\n+            public double transform(Object o) {\n+                return Double.parseDouble(((Bar) o).heresBar());\n+            }\n+\n+        });\n+\n+    }\n+\n+    public void setUp() {\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(MixedListUnivariateImplTest.class);\n+        suite.setName(\"Mixed List Tests\");\n+        return suite;\n+    }\n+\n+    /** test stats */\n+    public void testStats() {\n+        List externalList = new ArrayList();\n+\n+        DescriptiveStatistics u = new ListUnivariateImpl(externalList,transformers);\n+\n+        assertEquals(\"total count\", 0, u.getN(), tolerance);\n+        u.addValue(one);\n+        u.addValue(two);\n+        u.addValue(two);\n+        u.addValue(three);\n+        assertEquals(\"N\", n, u.getN(), tolerance);\n+        assertEquals(\"sum\", sum, u.getSum(), tolerance);\n+        assertEquals(\"sumsq\", sumSq, u.getSumsq(), tolerance);\n+        assertEquals(\"var\", var, u.getVariance(), tolerance);\n+        assertEquals(\"std\", std, u.getStandardDeviation(), tolerance);\n+        assertEquals(\"mean\", mean, u.getMean(), tolerance);\n+        assertEquals(\"min\", min, u.getMin(), tolerance);\n+        assertEquals(\"max\", max, u.getMax(), tolerance);\n+        u.clear();\n+        assertEquals(\"total count\", 0, u.getN(), tolerance);\n+    }\n+\n+    public void testN0andN1Conditions() throws Exception {\n+        List list = new ArrayList();\n+\n+        DescriptiveStatistics u = new ListUnivariateImpl(new ArrayList(),transformers);\n+\n+        assertTrue(\n+            \"Mean of n = 0 set should be NaN\",\n+            Double.isNaN(u.getMean()));\n+        assertTrue(\n+            \"Standard Deviation of n = 0 set should be NaN\",\n+            Double.isNaN(u.getStandardDeviation()));\n+        assertTrue(\n+            \"Variance of n = 0 set should be NaN\",\n+            Double.isNaN(u.getVariance()));\n+\n+        u.addValue(one);\n+\n+        assertTrue(\n+            \"Mean of n = 1 set should be value of single item n1, instead it is \" + u.getMean() ,\n+            u.getMean() == one);\n+            \n+        assertTrue(\n+            \"StdDev of n = 1 set should be zero, instead it is: \"\n+                + u.getStandardDeviation(),\n+            u.getStandardDeviation() == 0);\n+        assertTrue(\n+            \"Variance of n = 1 set should be zero\",\n+            u.getVariance() == 0);\n+    }\n+\n+    public void testSkewAndKurtosis() {\n+        ListUnivariateImpl u =\n+            new ListUnivariateImpl(new ArrayList(), transformers);\n+\n+        u.addObject(\"12.5\");\n+        u.addObject(new Integer(12));\n+        u.addObject(\"11.8\");\n+        u.addObject(\"14.2\");\n+        u.addObject(new Foo());\n+        u.addObject(\"14.5\");\n+        u.addObject(new Long(21));\n+        u.addObject(\"8.2\");\n+        u.addObject(\"10.3\");\n+        u.addObject(\"11.3\");\n+        u.addObject(new Float(14.1));\n+        u.addObject(\"9.9\");\n+        u.addObject(\"12.2\");\n+        u.addObject(new Bar());\n+        u.addObject(\"12.1\");\n+        u.addObject(\"11\");\n+        u.addObject(new Double(19.8));\n+        u.addObject(\"11\");\n+        u.addObject(\"10\");\n+        u.addObject(\"8.8\");\n+        u.addObject(\"9\");\n+        u.addObject(\"12.3\");\n+\n+\n+        assertEquals(\"mean\", 12.40455, u.getMean(), 0.0001);\n+        assertEquals(\"variance\", 10.00236, u.getVariance(), 0.0001);\n+        assertEquals(\"skewness\", 1.437424, u.getSkewness(), 0.0001);\n+        assertEquals(\"kurtosis\", 2.37719, u.getKurtosis(), 0.0001);\n+    }\n+\n+    public void testProductAndGeometricMean() throws Exception {\n+        ListUnivariateImpl u = new ListUnivariateImpl(new ArrayList(),transformers);\n+        u.setWindowSize(10);\n+\n+        u.addValue(1.0);\n+        u.addValue(2.0);\n+        u.addValue(3.0);\n+        u.addValue(4.0);\n+\n+        assertEquals(\n+            \"Geometric mean not expected\",\n+            2.213364,\n+            u.getGeometricMean(),\n+            0.00001);\n+\n+        // Now test rolling - StorelessDescriptiveStatistics should discount the contribution\n+        // of a discarded element\n+        for (int i = 0; i < 10; i++) {\n+            u.addValue(i + 2);\n+        }\n+        // Values should be (2,3,4,5,6,7,8,9,10,11)\n+        assertEquals(\n+            \"Geometric mean not expected\",\n+            5.755931,\n+            u.getGeometricMean(),\n+            0.00001);\n+\n+    }\n+\n+    public final class Foo {\n+        public String heresFoo() {\n+            return \"14.9\";\n+        }\n+    }\n+\n+    public final class Bar {\n+        public String heresBar() {\n+            return \"12.0\";\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/univariate/StoreUnivariateImplTest.java\n+/*\n+ * Copyright 2003-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.univariate;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.math.random.RandomData;\n+import org.apache.commons.math.random.RandomDataImpl;\n+\n+/**\n+ * Test cases for the {@link Univariate} class.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2004/04/12 02:27:50 $\n+ */\n+\n+public final class StoreUnivariateImplTest extends TestCase {\n+    private double one = 1;\n+    private float two = 2;\n+    private int three = 3;\n+    private double mean = 2;\n+    private double sumSq = 18;\n+    private double sum = 8;\n+    private double var = 0.666666666666666666667;\n+    private double std = Math.sqrt(var);\n+    private double n = 4;\n+    private double min = 1;\n+    private double max = 3;\n+    private double skewness = 0;\n+    private double kurtosis = 0.5;\n+    private int kClass = DescriptiveStatistics.LEPTOKURTIC;\n+    private double tolerance = 10E-15;\n+    \n+    public StoreUnivariateImplTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() {  \n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(StoreUnivariateImplTest.class);\n+        suite.setName(\"Frequency Tests\");\n+        return suite;\n+    }\n+    \n+    /** test stats */\n+    public void testStats() {\n+        DescriptiveStatistics u = DescriptiveStatistics.newInstance(); \n+        assertEquals(\"total count\",0,u.getN(),tolerance);\n+        u.addValue(one);\n+        u.addValue(two);\n+        u.addValue(two);\n+        u.addValue(three);\n+        assertEquals(\"N\",n,u.getN(),tolerance);\n+        assertEquals(\"sum\",sum,u.getSum(),tolerance);\n+        assertEquals(\"sumsq\",sumSq,u.getSumsq(),tolerance);\n+        assertEquals(\"var\",var,u.getVariance(),tolerance);\n+        assertEquals(\"std\",std,u.getStandardDeviation(),tolerance);\n+        assertEquals(\"mean\",mean,u.getMean(),tolerance);\n+        assertEquals(\"min\",min,u.getMin(),tolerance);\n+        assertEquals(\"max\",max,u.getMax(),tolerance);\n+        u.clear();\n+        assertEquals(\"total count\",0,u.getN(),tolerance);    \n+    }     \n+    \n+    public void testN0andN1Conditions() throws Exception {\n+    \tDescriptiveStatistics u = DescriptiveStatistics.newInstance(); \n+    \t    \t\n+            assertTrue(\"Mean of n = 0 set should be NaN\", \n+                Double.isNaN( u.getMean() ) );\n+            assertTrue(\"Standard Deviation of n = 0 set should be NaN\", \n+                Double.isNaN( u.getStandardDeviation() ) );\n+            assertTrue(\"Variance of n = 0 set should be NaN\",\n+                Double.isNaN(u.getVariance() ) );\n+\n+            u.addValue(one);\n+\n+            assertTrue( \"Mean of n = 1 set should be value of single item n1\",\n+                u.getMean() == one);\n+            assertTrue( \"StdDev of n = 1 set should be zero, instead it is: \" \n+                + u.getStandardDeviation(), u.getStandardDeviation() == 0);\n+            assertTrue( \"Variance of n = 1 set should be zero\", \n+                u.getVariance() == 0);\t\n+    }\n+    \n+    public void testSkewAndKurtosis() {\n+    \tDescriptiveStatistics u = DescriptiveStatistics.newInstance(); \n+    \t\n+    \tdouble[] testArray = \n+        { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,\n+          9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };\n+  \t  \tfor( int i = 0; i < testArray.length; i++) {\n+  \t  \t\tu.addValue( testArray[i]);\n+  \t  \t}\n+  \t  \t\n+\t\tassertEquals(\"mean\", 12.40455, u.getMean(), 0.0001);\n+\t\tassertEquals(\"variance\", 10.00236, u.getVariance(), 0.0001);\n+\t\tassertEquals(\"skewness\", 1.437424, u.getSkewness(), 0.0001);\n+  \t  \tassertEquals(\"kurtosis\", 2.37719, u.getKurtosis(), 0.0001);\n+    }\n+\n+    public void testProductAndGeometricMean() throws Exception {\n+    \tDescriptiveStatistics u = DescriptiveStatistics.newInstance(); \n+        u.setWindowSize(10);\n+    \t    \t\n+        u.addValue( 1.0 );\n+        u.addValue( 2.0 );\n+        u.addValue( 3.0 );\n+        u.addValue( 4.0 );\n+\n+        //assertEquals( \"Product not expected\", \n+        //    24.0, u.getProduct(), Double.MIN_VALUE );\n+        assertEquals( \"Geometric mean not expected\", \n+            2.213364, u.getGeometricMean(), 0.00001 );\n+\n+        // Now test rolling - StorelessDescriptiveStatistics should discount the contribution\n+        // of a discarded element\n+        for( int i = 0; i < 10; i++ ) {\n+            u.addValue( i + 2 );\n+        }\n+        // Values should be (2,3,4,5,6,7,8,9,10,11)\n+        \n+        //assertEquals( \"Product not expected\", 39916800.0, \n+        //    u.getProduct(), 0.00001 );\n+        assertEquals( \"Geometric mean not expected\", 5.755931, \n+            u.getGeometricMean(), 0.00001 );\n+    }\n+    \n+    public void testGetSortedValues() {\n+        double[] test1 = {5,4,3,2,1};\n+        double[] test2 = {5,2,1,3,4,0};\n+        double[] test3 = {1};\n+        int[] testi = null;\n+        double[] test4 = null;\n+        RandomData rd = new RandomDataImpl();\n+        tstGetSortedValues(test1);\n+        tstGetSortedValues(test2);\n+        tstGetSortedValues(test3);\n+        for (int i = 0; i < 10; i++) {\n+            testi = rd.nextPermutation(10,6);\n+            test4 = new double[6];\n+            for (int j = 0; j < testi.length; j++) {\n+                test4[j] = (double) testi[j];\n+            }\n+            tstGetSortedValues(test4);\n+        }\n+        for (int i = 0; i < 10; i++) {\n+            testi = rd.nextPermutation(10,5);\n+            test4 = new double[5];\n+            for (int j = 0; j < testi.length; j++) {\n+                test4[j] = (double) testi[j];\n+            }\n+            tstGetSortedValues(test4);\n+        }        \n+    }\n+    \n+        \n+    private void tstGetSortedValues(double[] test) {\n+        DescriptiveStatistics u = DescriptiveStatistics.newInstance(); \n+        for (int i = 0; i < test.length; i++) {\n+            u.addValue(test[i]);\n+        }\n+        double[] sorted = u.getSortedValues();\n+        if (sorted.length != test.length) {\n+            fail(\"wrong length for sorted values array\");\n+        }\n+        for (int i = 0; i < sorted.length-1; i++) {\n+            if (sorted[i] > sorted[i+1]) {\n+                fail(\"sorted values out of sequence\");\n+            }\n+        }\n+    }\n+    \n+    public void testPercentiles() {\n+        double[] test = {5,4,3,2,1};\n+        DescriptiveStatistics u = DescriptiveStatistics.newInstance(); \n+        for (int i = 0; i < test.length; i++) {\n+            u.addValue(test[i]);\n+        }\n+        assertEquals(\"expecting min\",1,u.getPercentile(5),10E-12);\n+        assertEquals(\"expecting max\",5,u.getPercentile(99),10E-12);\n+        assertEquals(\"expecting middle\",3,u.getPercentile(50),10E-12);\n+        try {\n+            double x = u.getPercentile(0);\n+            fail(\"expecting IllegalArgumentException for getPercentile(0)\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            double x = u.getPercentile(120);\n+            fail(\"expecting IllegalArgumentException for getPercentile(120)\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        \n+        u.clear();\n+        double[] test2 = {1,2,3,4};\n+        for (int i = 0; i < test2.length; i++) {\n+            u.addValue(test2[i]);\n+        }\n+        assertEquals(\"Q1\",1.25,u.getPercentile(25),10E-12);\n+        assertEquals(\"Q3\",3.75,u.getPercentile(75),10E-12);\n+        assertEquals(\"Q2\",2.5,u.getPercentile(50),10E-12);\n+        \n+        u.clear();\n+        double[] test3 = {1};\n+        for (int i = 0; i < test3.length; i++) {\n+            u.addValue(test3[i]);\n+        }\n+        assertEquals(\"Q1\",1,u.getPercentile(25),10E-12);\n+        assertEquals(\"Q3\",1,u.getPercentile(75),10E-12);\n+        assertEquals(\"Q2\",1,u.getPercentile(50),10E-12);\n+        \n+        u.clear();\n+        RandomData rd = new RandomDataImpl();\n+        int[] testi = rd.nextPermutation(100,100); // will contain 0-99\n+        for (int j = 0; j < testi.length; j++) {\n+            u.addValue((double) testi[j]);  //OK, laugh at me for the cast\n+        }\n+        for (int i = 1; i < 100; i++) {\n+            assertEquals(\"percentile \" + i,\n+                (double) i-1 + (double) i*(.01), u.getPercentile(i),10E-12);\n+        }\n+        \n+        u.clear();\n+        double[] test4 = {1,2,3,4,100};\n+        for (int i = 0; i < test4.length; i++) {\n+            u.addValue(test4[i]);\n+        }\n+        assertEquals(\"80th\",80.8,u.getPercentile(80),10E-12);\n+        \n+        u.clear();\n+        assertTrue(\"empty value set should return NaN\",\n+            Double.isNaN(u.getPercentile(50)));\n+    }\n+                                     \n+}\n+\n--- a/src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java\n+++ b/src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java\n  */\n package org.apache.commons.math.stat.univariate;\n \n-import org.apache.commons.math.stat.SummaryStatistics;\n \n import junit.framework.Test;\n import junit.framework.TestCase;\n /**\n  * Test cases for the {@link DescriptiveStatistics} class.\n  *\n- * @version $Revision: 1.3 $ $Date: 2004/02/21 21:35:17 $\n+ * @version $Revision: 1.4 $ $Date: 2004/04/12 02:27:50 $\n  */\n \n public final class UnivariateImplTest extends TestCase {", "timestamp": 1081736870, "metainfo": ""}