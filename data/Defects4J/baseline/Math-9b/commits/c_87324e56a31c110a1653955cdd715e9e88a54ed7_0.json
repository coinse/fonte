{"sha": "87324e56a31c110a1653955cdd715e9e88a54ed7", "log": "MATH-908 Added constructor. Javadoc.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java\n  * function value between two successive iterations. It is however possible\n  * to define a custom convergence checker that might terminate the algorithm\n  * earlier.\n+ * <br/>\n+ * The internal line search optimizer is a {@link BrentOptimizer} with a\n+ * convergence checker set to {@link SimpleUnivariateValueChecker}.\n  *\n  * @version $Id$\n  * @since 2.2\n     public PowellOptimizer(double rel,\n                            double abs) {\n         this(rel, abs, null);\n+    }\n+\n+    /**\n+     * Builds an instance with the default convergence checking procedure.\n+     *\n+     * @param rel Relative threshold.\n+     * @param abs Absolute threshold.\n+     * @param lineRel Relative threshold for the internal line search optimizer.\n+     * @param lineAbs Absolute threshold for the internal line search optimizer.\n+     * @throws NotStrictlyPositiveException if {@code abs <= 0}.\n+     * @throws NumberIsTooSmallException if {@code rel < 2 * Math.ulp(1d)}.\n+     */\n+    public PowellOptimizer(double rel,\n+                           double abs,\n+                           double lineRel,\n+                           double lineAbs) {\n+        this(rel, abs, lineRel, lineAbs, null);\n     }\n \n     /** {@inheritDoc} */\n--- a/src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java\n                         double fLineTol,\n                         double pointTol) {\n         final MultivariateOptimizer optim = new PowellOptimizer(fTol, Math.ulp(1d),\n-                                                                fLineTol, Math.ulp(1d), null);\n+                                                                fLineTol, Math.ulp(1d));\n \n         final PointValuePair result = optim.optimize(1000, func, goal, init);\n         final double[] point = result.getPoint();", "timestamp": 1353935799, "metainfo": ""}