{"sha": "2fcdbb07ce96a28d082acf86ee9891e5fb2a341d", "log": "Added correlation package, Covariance class.  JIRA: MATH-114  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/correlation/Covariance.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.correlation;\n+\n+import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.linear.RealMatrix;\n+import org.apache.commons.math.linear.DenseRealMatrix;\n+import org.apache.commons.math.stat.descriptive.moment.Mean;\n+import org.apache.commons.math.stat.descriptive.moment.Variance;\n+\n+/**\n+ * Computes covariances for pairs of arrays or columns of a matrix.\n+ * \n+ * <p>The constructors that take <code>RealMatrix</code> or \n+ * <code>double[][]</code> arguments generate correlation matrices.  The\n+ * columns of the input matrices are assumed to represent variable values.</p>\n+ * \n+ * <p>The constructor argument <code>biasCorrected</code> determines whether or\n+ * not computed covariances are bias-corrected.</p>\n+ * \n+ * <p>Unbiased covariances are given by the formula</p>\n+ * <code>cov(X, Y) = &Sigma;[(x<sub>i</sub> - E(X))(y<sub>i</sub> - E(Y))] / (n - 1)</code>\n+ * where <code>E(x)</code> is the mean of <code>X</code> and <code>E(Y)</code>\n+ * is the mean of the <code>Y</code> values.\n+ * \n+ * <p>Non-bias-corrected estimates use <code>n</code> in place of <code>n - 1</code>\n+ * \n+ * @version $Revision$ $Date$\n+ * @since 2.0\n+ */\n+public class Covariance {\n+    \n+    /** covariance matrix */\n+    private final RealMatrix covarianceMatrix;\n+    \n+    public Covariance() {\n+        super();\n+        covarianceMatrix = null;\n+    }\n+    \n+    /**\n+     * Create a Covariance matrix from a rectangular array\n+     * whose columns represent covariates.\n+     * \n+     * <p>The <code>biasCorrected</code> parameter determines whether or not\n+     * covariance estimates are bias-corrected.</p>\n+     * \n+     * <p>The input array must be rectangular with at least two columns\n+     * and two rows.</p>\n+     * \n+     * @param data rectangular array with columns representing covariates\n+     * @param biasCorrected true means covariances are bias-corrected\n+     * @throws IllegalArgumentException if the input data array is not\n+     * rectangular with at least two rows and two columns.\n+     */\n+    public Covariance(double[][] data, boolean biasCorrected) {\n+        this(new DenseRealMatrix(data), biasCorrected);\n+    }\n+    \n+    /**\n+     * Create a Covariance matrix from a rectangular array\n+     * whose columns represent covariates.\n+     * \n+     * <p>The input array must be rectangular with at least two columns\n+     * and two rows</p>\n+     * \n+     * @param data rectangular array with columns representing covariates\n+     * @throws IllegalArgumentException if the input data array is not\n+     * rectangular with at least two rows and two columns.\n+     */\n+    public Covariance(double[][] data) {\n+        this(data, true);\n+    }\n+    \n+    /**\n+     * Create a covariance matrix from a matrix whose columns\n+     * represent covariates.\n+     * \n+     * <p>The <code>biasCorrected</code> parameter determines whether or not\n+     * covariance estimates are bias-corrected.</p>\n+     * \n+     * <p>The matrix must have at least two columns and two rows</p>\n+     * \n+     * @param matrix matrix with columns representing covariates\n+     * @param biasCorrected true means covariances are bias-corrected\n+     * @throws IllegalArgumentException if the input matrix does not have\n+     * at least two rows and two columns\n+     */\n+    public Covariance(RealMatrix matrix, boolean biasCorrected) {\n+       checkSufficientData(matrix);\n+       covarianceMatrix = computeCovariance(matrix, biasCorrected);\n+    }\n+    \n+    /**\n+     * Create a covariance matrix from a matrix whose columns\n+     * represent covariates.\n+     * \n+     * <p>The matrix must have at least two columns and two rows</p>\n+     * \n+     * @param matrix matrix with columns representing covariates\n+     * @throws IllegalArgumentException if the input matrix does not have\n+     * at least two rows and two columns\n+     */\n+    public Covariance(RealMatrix matrix) {\n+        this(matrix, true);\n+    }\n+    \n+    /**\n+     * Returns the covariance matrix\n+     * \n+     * @return covariance matrix\n+     */\n+    public RealMatrix getCovarianceMatrix() {\n+        return covarianceMatrix;\n+    }\n+    \n+    /**\n+     * Create a covariance matrix from a matrix whose columns represent\n+     * covariates.\n+     * \n+     * <p>The input matrix must have at least two columns and two rows</p>\n+     * \n+     * <p>The <code>biasCorrected</code> parameter determines whether or not\n+     * covariance estimates are bias-corrected.</p>\n+     * \n+     * @return covariance matrix\n+     */\n+    protected RealMatrix computeCovariance(RealMatrix matrix, boolean biasCorrected) {\n+        int dimension = matrix.getColumnDimension();\n+        Variance variance = new Variance(biasCorrected);\n+        RealMatrix outMatrix = new DenseRealMatrix(dimension, dimension);\n+        for (int i = 0; i < dimension; i++) {\n+            for (int j = 0; j < i; j++) {\n+              double cov = covariance(matrix.getColumn(i), matrix.getColumn(j), biasCorrected);\n+              outMatrix.setEntry(i, j, cov);\n+              outMatrix.setEntry(j, i, cov);\n+            }\n+            outMatrix.setEntry(i, i, variance.evaluate(matrix.getColumn(i)));\n+        }\n+        return outMatrix;\n+    }\n+    \n+    /**\n+     * Computes the covariance between the two arrays.\n+     * \n+     * <p>Array lengths must match and the common length must be at least 2.</p>\n+     *\n+     * @param xArray first data array\n+     * @param yArray second data array\n+     * @param biasCorrected if true, returned value will be bias-corrected \n+     * @return returns the covariance for the two arrays \n+     * @throws  IllegalArgumentException if the arrays lengths do not match or\n+     * there is insufficient data\n+     */\n+    public double covariance(final double[] xArray, final double[] yArray, boolean biasCorrected) \n+        throws IllegalArgumentException {\n+        Mean mean = new Mean();\n+        double result = 0d;\n+        long length = xArray.length;\n+        if(length == yArray.length && length > 1) {\n+            double xMean = mean.evaluate(xArray);\n+            double yMean = mean.evaluate(yArray);\n+            for (int i = 0; i < xArray.length; i++) {\n+                double xDev = xArray[i] - xMean;\n+                double yDev = yArray[i] - yMean;\n+                result += (xDev * yDev - result) / (i + 1);\n+            }\n+        }\n+        else {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+               \"Arrays must have the same length and both must have at \" +\n+               \"least two elements. xArray has size {0}, yArray has {1} elements\",\n+                    new Object[] {xArray.length, yArray.length});\n+        }\n+        return biasCorrected ? result * ((double) length / (double)(length - 1)) : result;\n+    }\n+    \n+    /**\n+     * Throws IllegalArgumentException of the matrix does not have at least\n+     * two columns and two rows\n+     */\n+    private void checkSufficientData(final RealMatrix matrix) {\n+        int nRows = matrix.getRowDimension();\n+        int nCols = matrix.getColumnDimension();\n+        if (nRows < 2 || nCols < 2) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                    \"Insufficient data:  only {0} rows and {1} columns.\",\n+                    new Object[]{nRows, nCols});\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/correlation/CovarianceTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.correlation;\n+\n+import org.apache.commons.math.TestUtils;\n+import org.apache.commons.math.linear.RealMatrix;\n+import org.apache.commons.math.linear.RealMatrixImpl;\n+import org.apache.commons.math.stat.descriptive.moment.Variance;\n+\n+import junit.framework.TestCase;\n+\n+public class CovarianceTest extends TestCase {\n+    \n+    protected final double[] longleyData = new double[] {\n+            60323,83.0,234289,2356,1590,107608,1947,\n+            61122,88.5,259426,2325,1456,108632,1948,\n+            60171,88.2,258054,3682,1616,109773,1949,\n+            61187,89.5,284599,3351,1650,110929,1950,\n+            63221,96.2,328975,2099,3099,112075,1951,\n+            63639,98.1,346999,1932,3594,113270,1952,\n+            64989,99.0,365385,1870,3547,115094,1953,\n+            63761,100.0,363112,3578,3350,116219,1954,\n+            66019,101.2,397469,2904,3048,117388,1955,\n+            67857,104.6,419180,2822,2857,118734,1956,\n+            68169,108.4,442769,2936,2798,120445,1957,\n+            66513,110.8,444546,4681,2637,121950,1958,\n+            68655,112.6,482704,3813,2552,123366,1959,\n+            69564,114.2,502601,3931,2514,125368,1960,\n+            69331,115.7,518173,4806,2572,127852,1961,\n+            70551,116.9,554894,4007,2827,130081,1962\n+        };\n+    \n+    protected final double[] swissData = new double[] {\n+            80.2,17.0,15,12,9.96,\n+            83.1,45.1,6,9,84.84,\n+            92.5,39.7,5,5,93.40,\n+            85.8,36.5,12,7,33.77,\n+            76.9,43.5,17,15,5.16,\n+            76.1,35.3,9,7,90.57,\n+            83.8,70.2,16,7,92.85,\n+            92.4,67.8,14,8,97.16,\n+            82.4,53.3,12,7,97.67,\n+            82.9,45.2,16,13,91.38,\n+            87.1,64.5,14,6,98.61,\n+            64.1,62.0,21,12,8.52,\n+            66.9,67.5,14,7,2.27,\n+            68.9,60.7,19,12,4.43,\n+            61.7,69.3,22,5,2.82,\n+            68.3,72.6,18,2,24.20,\n+            71.7,34.0,17,8,3.30,\n+            55.7,19.4,26,28,12.11,\n+            54.3,15.2,31,20,2.15,\n+            65.1,73.0,19,9,2.84,\n+            65.5,59.8,22,10,5.23,\n+            65.0,55.1,14,3,4.52,\n+            56.6,50.9,22,12,15.14,\n+            57.4,54.1,20,6,4.20,\n+            72.5,71.2,12,1,2.40,\n+            74.2,58.1,14,8,5.23,\n+            72.0,63.5,6,3,2.56,\n+            60.5,60.8,16,10,7.72,\n+            58.3,26.8,25,19,18.46,\n+            65.4,49.5,15,8,6.10,\n+            75.5,85.9,3,2,99.71,\n+            69.3,84.9,7,6,99.68,\n+            77.3,89.7,5,2,100.00,\n+            70.5,78.2,12,6,98.96,\n+            79.4,64.9,7,3,98.22,\n+            65.0,75.9,9,9,99.06,\n+            92.2,84.6,3,3,99.46,\n+            79.3,63.1,13,13,96.83,\n+            70.4,38.4,26,12,5.62,\n+            65.7,7.7,29,11,13.79,\n+            72.7,16.7,22,13,11.22,\n+            64.4,17.6,35,32,16.92,\n+            77.6,37.6,15,7,4.97,\n+            67.6,18.7,25,7,8.65,\n+            35.0,1.2,37,53,42.34,\n+            44.7,46.6,16,29,50.43,\n+            42.8,27.7,22,29,58.33\n+        };\n+ \n+    \n+    /**\n+     * Test Longley dataset against R.\n+     * Data Source: J. Longley (1967) \"An Appraisal of Least Squares\n+     * Programs for the Electronic Computer from the Point of View of the User\"\n+     * Journal of the American Statistical Association, vol. 62. September,\n+     * pp. 819-841.\n+     * \n+     * Data are from NIST:\n+     * http://www.itl.nist.gov/div898/strd/lls/data/LINKS/DATA/Longley.dat\n+     */\n+    public void testLongly() {  \n+        RealMatrix matrix = createRealMatrix(longleyData, 16, 7);\n+        RealMatrix covarianceMatrix = new Covariance(matrix).getCovarianceMatrix();\n+        double[] rData = new double[] {\n+         12333921.73333333246, 3.679666000000000e+04, 343330206.333333313,\n+         1649102.666666666744, 1117681.066666666651, 23461965.733333334, 16240.93333333333248,\n+         36796.66000000000, 1.164576250000000e+02, 1063604.115416667,\n+         6258.666250000000, 3490.253750000000, 73503.000000000, 50.92333333333334,\n+         343330206.33333331347, 1.063604115416667e+06, 9879353659.329166412,\n+         56124369.854166664183, 30880428.345833335072, 685240944.600000024, 470977.90000000002328,\n+         1649102.66666666674, 6.258666250000000e+03, 56124369.854166664,\n+         873223.429166666698, -115378.762499999997, 4462741.533333333, 2973.03333333333330,\n+         1117681.06666666665, 3.490253750000000e+03, 30880428.345833335,\n+         -115378.762499999997, 484304.095833333326, 1764098.133333333, 1382.43333333333339,\n+         23461965.73333333433, 7.350300000000000e+04, 685240944.600000024,\n+         4462741.533333333209, 1764098.133333333302, 48387348.933333330, 32917.40000000000146,\n+         16240.93333333333, 5.092333333333334e+01, 470977.900000000,\n+         2973.033333333333, 1382.433333333333, 32917.40000000, 22.66666666666667\n+        };\n+        \n+        TestUtils.assertEquals(\"covariance matrix\", createRealMatrix(rData, 7, 7), covarianceMatrix, 10E-9);\n+\n+    }\n+    \n+    /**\n+     * Test R Swiss fertility dataset against R.\n+     * Data Source: R datasets package\n+     */\n+    public void testSwissFertility() {\n+         RealMatrix matrix = createRealMatrix(swissData, 47, 5);\n+         RealMatrix covarianceMatrix = new Covariance(matrix).getCovarianceMatrix();\n+         double[] rData = new double[] {\n+           156.0424976873265, 100.1691489361702, -64.36692876965772, -79.7295097132285, 241.5632030527289,\n+           100.169148936170251, 515.7994172062905, -124.39283071230344, -139.6574005550416, 379.9043755781684,\n+           -64.3669287696577, -124.3928307123034, 63.64662349676226, 53.5758556891767, -190.5606105457909,\n+           -79.7295097132285, -139.6574005550416, 53.57585568917669, 92.4560592044403, -61.6988297872340,\n+            241.5632030527289, 379.9043755781684, -190.56061054579092, -61.6988297872340, 1739.2945371877890\n+         };\n+         \n+         TestUtils.assertEquals(\"covariance matrix\", createRealMatrix(rData, 5, 5), covarianceMatrix, 10E-13);\n+    }\n+    \n+    /**\n+     * Constant column\n+     */\n+    public void testConstant() {\n+        double[] noVariance = new double[] {1, 1, 1, 1};\n+        double[] values = new double[] {1, 2, 3, 4};\n+        assertEquals(0d, new Covariance().covariance(noVariance, values, true), Double.MIN_VALUE);\n+        assertEquals(0d, new Covariance().covariance(noVariance, noVariance, true), Double.MIN_VALUE);\n+    }\n+    \n+    \n+    /**\n+     * Insufficient data\n+     */\n+    public void testInsufficientData() {\n+        double[] one = new double[] {1};\n+        double[] two = new double[] {2};\n+        try {\n+            new Covariance().covariance(one, two, false);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // Expected\n+        }\n+        RealMatrix matrix = new RealMatrixImpl(new double[][] {{0},{1}});\n+        try {\n+            new Covariance(matrix);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // Expected\n+        }\n+    }\n+    \n+    /**\n+     * Verify that diagonal entries are consistent with Variance computation and matrix matches\n+     * column-by-column covariances\n+     */\n+    public void testConsistency() {\n+        RealMatrix matrix = createRealMatrix(swissData, 47, 5);\n+        RealMatrix covarianceMatrix = new Covariance(matrix).getCovarianceMatrix();\n+        \n+        // Variances on the diagonal\n+        Variance variance = new Variance();\n+        for (int i = 0; i < 5; i++) {\n+            assertEquals(variance.evaluate(matrix.getColumn(i)), covarianceMatrix.getEntry(i,i), 10E-14);\n+        }\n+        \n+        // Symmetry, column-consistency\n+        assertEquals(covarianceMatrix.getEntry(2, 3), \n+                new Covariance().covariance(matrix.getColumn(2), matrix.getColumn(3), true), 10E-14);\n+        assertEquals(covarianceMatrix.getEntry(2, 3), covarianceMatrix.getEntry(3, 2), Double.MIN_VALUE);\n+        \n+        // All columns same -> all entries = column variance\n+        RealMatrix repeatedColumns = new RealMatrixImpl(47, 3);\n+        for (int i = 0; i < 3; i++) {\n+            repeatedColumns.setColumnMatrix(i, matrix.getColumnMatrix(0));\n+        }\n+        covarianceMatrix = new Covariance(repeatedColumns).getCovarianceMatrix();\n+        double columnVariance = variance.evaluate(matrix.getColumn(0));\n+        for (int i = 0; i < 3; i++) {\n+            for (int j = 0; j < 3; j++) {\n+                assertEquals(columnVariance, covarianceMatrix.getEntry(i, j), 10E-14);\n+            }\n+        }\n+        \n+    }\n+    \n+    protected RealMatrix createRealMatrix(double[] data, int nRows, int nCols) {\n+        double[][] matrixData = new double[nRows][nCols];\n+        int ptr = 0;\n+        for (int i = 0; i < nRows; i++) {\n+            System.arraycopy(data, ptr, matrixData[i], 0, nCols);\n+            ptr += nCols;\n+        }\n+        return new RealMatrixImpl(matrixData); \n+    }\n+}", "timestamp": 1234437714, "metainfo": ""}