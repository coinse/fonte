{"sha": "c7b489f1e9cf9ceaff0f5844fdcf6630224ebf16", "log": "added checks for integer overflows during double to Fraction conversion JIRA: MATH-182  ", "commit": "\n--- a/src/java/org/apache/commons/math/MessagesResources_fr.java\n+++ b/src/java/org/apache/commons/math/MessagesResources_fr.java\n     // org.apache.commons.math.fraction.FractionConversionException\n     { \"Unable to convert {0} to fraction after {1} iterations\",\n       \"Impossible de convertir {0} en fraction apr\\u00e8s {1} it\\u00e9rations\" },\n+    { \"Overflow trying to convert {0} to fraction ({1}/{2})\",\n+      \"D\\u00e9passement de capacit\\u00e9 lors de la conversion de {0} en fraction ({1}/{2})\" },\n \n     // org.apache.commons.math.analysis.UnivariateRealSolverUtils\n     { \"Number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4},\" +\n--- a/src/java/org/apache/commons/math/fraction/Fraction.java\n+++ b/src/java/org/apache/commons/math/fraction/Fraction.java\n     public static final Fraction ZERO = new Fraction(0, 1);\n \n     /** Serializable version identifier */\n-    private static final long serialVersionUID = 5463066929751300926L;\n+    private static final long serialVersionUID = -8958519416450949235L;\n     \n     /** The denominator. */\n     private int denominator;\n     private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n         throws FractionConversionException\n     {\n+        long overflow = Integer.MAX_VALUE;\n         double r0 = value;\n-        int a0 = (int)Math.floor(r0);\n+        long a0 = (long)Math.floor(r0);\n+        if (a0 > overflow) {\n+            throw new FractionConversionException(value, a0, 1l);\n+        }\n \n         // check for (almost) integer arguments, which should not go\n         // to iterations.\n         if (Math.abs(a0 - value) < epsilon) {\n-            this.numerator = a0;\n+            this.numerator = (int) a0;\n             this.denominator = 1;\n             return;\n         }\n-        \n-        int p0 = 1;\n-        int q0 = 0;\n-        int p1 = a0;\n-        int q1 = 1;\n-\n-        int p2 = 0;\n-        int q2 = 1;\n+\n+       long p0 = 1;\n+        long q0 = 0;\n+        long p1 = a0;\n+        long q1 = 1;\n+\n+        long p2 = 0;\n+        long q2 = 1;\n \n         int n = 0;\n         boolean stop = false;\n         do {\n             ++n;\n             double r1 = 1.0 / (r0 - a0);\n-            int a1 = (int)Math.floor(r1);\n+            long a1 = (long)Math.floor(r1);\n             p2 = (a1 * p1) + p0;\n             q2 = (a1 * q1) + q0;\n+            if ((p2 > overflow) || (q2 > overflow)) {\n+                throw new FractionConversionException(value, p2, q2);\n+            }\n             \n             double convergent = (double)p2 / (double)q2;\n             if (n < maxIterations && Math.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n         }\n         \n         if (q2 < maxDenominator) {\n-            this.numerator = p2;\n-            this.denominator = q2;\n+            this.numerator = (int) p2;\n+            this.denominator = (int) q2;\n         } else {\n-            this.numerator = p1;\n-            this.denominator = q1;\n+            this.numerator = (int) p1;\n+            this.denominator = (int) q1;\n         }\n \n     }\n--- a/src/java/org/apache/commons/math/fraction/FractionConversionException.java\n+++ b/src/java/org/apache/commons/math/fraction/FractionConversionException.java\n \n package org.apache.commons.math.fraction;\n \n-import org.apache.commons.math.MaxIterationsExceededException;\n+import org.apache.commons.math.ConvergenceException;\n \n /**\n  * Error thrown when a double value cannot be converted to a fraction\n  *\n  * @version $Revision$ $Date$\n  */\n-public class FractionConversionException extends MaxIterationsExceededException {\n+public class FractionConversionException extends ConvergenceException {\n \n     /** Serializable version identifier. */\n-    private static final long serialVersionUID = 4588659344016668813L;\n+    private static final long serialVersionUID = -4661812640132576263L;\n \n     /**\n      * Constructs an exception with specified formatted detail message.\n      * @param maxIterations maximal number of iterations allowed\n      */\n     public FractionConversionException(double value, int maxIterations) {\n-        super(maxIterations,\n-              \"Unable to convert {0} to fraction after {1} iterations\",\n+        super(\"Unable to convert {0} to fraction after {1} iterations\",\n               new Object[] { new Double(value), new Integer(maxIterations) });\n     }\n \n+    /**\n+     * Constructs an exception with specified formatted detail message.\n+     * Message formatting is delegated to {@link java.text.MessageFormat}.\n+     * @param value double value to convert\n+     * @param p current numerator \n+     * @param q current denominator\n+     */\n+    public FractionConversionException(double value, long p, long q) {\n+        super(\"Overflow trying to convert {0} to fraction ({1}/{2})\",\n+              new Object[] { new Double(value), new Long(p), new Long(q) });\n+    }\n+\n }\n--- a/src/test/org/apache/commons/math/fraction/FractionTest.java\n+++ b/src/test/org/apache/commons/math/fraction/FractionTest.java\n         assertFraction(769, 1250, new Fraction(0.6152, 9999));\n     }\n \n+    public void testIntegerOverflow() {\n+        checkIntegerOverflow(0.75000000001455192);\n+        checkIntegerOverflow(1.0e10);\n+    }\n+\n+    private void checkIntegerOverflow(double a) {\n+        try {\n+            new Fraction(a, 1.0e-12, 1000);\n+            fail(\"an exception should have been thrown\");\n+        } catch (ConvergenceException ce) {\n+            // expected behavior\n+        } catch (Exception e) {\n+            fail(\"wrong exception caught\");\n+        }\n+    }\n+\n     public void testEpsilonLimitConstructor() throws ConvergenceException  {\n         assertFraction(2, 5, new Fraction(0.4, 1.0e-5, 100));\n ", "timestamp": 1201867332, "metainfo": ""}