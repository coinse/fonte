{"sha": "0b1b9a9dc86da871ce5e7839b1b2df13c99dd9f8", "log": "Submitted Javadoc fixes from Andreou Andreas   ", "commit": "\n--- a/src/java/org/apache/commons/math/ContractableDoubleArray.java\n+++ b/src/java/org/apache/commons/math/ContractableDoubleArray.java\n     /**\n      * Adds an element to the end of this expandable array\n      * \n-     * @return value to be added to end of array\n+     * @param value to be added to end of array\n      */\n     public synchronized void addElement(double value) {\n         super.addElement(value);\n     /**\n      * Sets the contraction criteria for this ExpandContractDoubleArray. \n      * \n-     * @param new contraction criteria\n+     * @param contractionCriteria contraction criteria\n      */\n     public void setContractionCriteria(float contractionCriteria) {\n         checkContractExpand(contractionCriteria, getExpansionFactor());\n      * expansionCriteria\n      * \n      * @param expansionFactor \n-     * @param contractionCriteria\n+     * @param contractionCritera\n      */\n     protected void checkContractExpand(float contractionCritera, \n                                         float expansionFactor) {\n--- a/src/java/org/apache/commons/math/EmpiricalDistribution.java\n+++ b/src/java/org/apache/commons/math/EmpiricalDistribution.java\n  * generate random values \"like\" those in the input file -- i.e., the values\n  * generated will follow the distribution of the values in the file.\n  * @author  Phil Steitz\n- * @version $Revision: 1.3 $\n+ * @version $Revision: 1.4 $\n  */\n public interface EmpiricalDistribution {\n     \n     \n     /**\n      * Computes the empirical distribution from the input file\n-     * @param URL url of the input file\n+     * @param file url of the input file\n      * @throws IOException if an IO error occurs\n      */\n     void load(File file) throws IOException;\n      * Saves distribution to a file. Overwrites the file if it exists.\n      * <strong>Preconditions:</strong><ul>\n      * <li>the distribution must be loaded before invoking this method</li></ul>\n-     * @param fully qualified file path for the file to be written\n+     * @param filePath fully qualified file path for the file to be written\n      * @throws IOException if an error occurs reading the file\n      * @throws IllegalStateException if the distribution has not been loaded\n      */\n--- a/src/java/org/apache/commons/math/ExpandableDoubleArray.java\n+++ b/src/java/org/apache/commons/math/ExpandableDoubleArray.java\n      * array class.  Note that this function will also expand the internal \n      * array as needed.\n      * \n-     * @param a new number of elements\n+     * @param i a new number of elements\n      */\n     public synchronized void setNumElements(int i) {\n \n     /**\n      * Adds an element to the end of this expandable array\n      * \n-     * @return value to be added to end of array\n+     * @param value value to be added to end of array\n      */\n     public synchronized void addElement(double value) {\n         numElements++;\n--- a/src/java/org/apache/commons/math/FixedDoubleArray.java\n+++ b/src/java/org/apache/commons/math/FixedDoubleArray.java\n      * make little sense to allow people to \"drop\" objects from the\n      * \"front\". \n      *\n-     * @param number of elements to discard.\n+     * @param i number of elements to discard.\n      *\n      * @see org.apache.commons.math.DoubleArray#discardFrontElements(int)\n      */\n--- a/src/java/org/apache/commons/math/RandomDataImpl.java\n+++ b/src/java/org/apache/commons/math/RandomDataImpl.java\n  * identical).</li></ul>\n  * \n  * @author Phil Steitz\n- * @version $Revision: 1.4 $ $Date: 2003/06/05 18:35:24 $\n+ * @version $Revision: 1.5 $ $Date: 2003/06/11 14:50:29 $\n  */\n public class RandomDataImpl implements RandomData {\n     \n      * shuffle to randomly re-order the last <code>end</code> elements of list.\n      * \n      * @param list list to be shuffled\n-     * @end element past which shuffling begins\n+     * @param end element past which shuffling begins\n      */\n     private void shuffle(int[] list, int end) {\n         int target = 0;\n--- a/src/java/org/apache/commons/math/RealMatrix.java\n+++ b/src/java/org/apache/commons/math/RealMatrix.java\n /**\n  * Interface defining a real-valued matrix with basic algebraic operations\n  * @author  Phil Steitz\n- * @version $Revision: 1.2 $ $Date: 2003/05/13 19:08:14 $\n+ * @version $Revision: 1.3 $ $Date: 2003/06/11 14:50:29 $\n  */\n public interface RealMatrix {\n \n     \n     /**\n      * Sets/overwrites the underlying data for the matrix\n-     * @param    2-dimensional array of entries\n+     * @param  data  2-dimensional array of entries\n      */\n     public void setData(double[][] data);\n     \n     /**\n      * Returns the entry in the specified row and column\n      * @param row  row location of entry to be fetched  \n-     * @param col  column location of entry to be fetched \n+     * @param column  column location of entry to be fetched\n      * @return     matrix entry in row,column\n      * @throws     IllegalArgumentException if entry does not exist\n      */\n     /**\n      * Sets the entry in the specified row and column to the specified value\n      * @param row    row location of entry to be set \n-     * @param col    column location of entry to be set\n+     * @param column    column location of entry to be set\n      * @param value  value to set \n      * @throws IllegalArgumentException if entry does not exist\n      */\n     \n     /**\n      * Returns the determinant of this matrix\n-     * @returns determinant\n+     * @return determinant\n      */\n     public double getDeterminant();\n     \n--- a/src/java/org/apache/commons/math/RealMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/RealMatrixImpl.java\n /**\n  * Implementation for RealMatrix using double[][] array\n  * @author  Phil Stetiz\n- * @version $Revision: 1.2 $ $Date: 2003/05/13 19:08:14 $\n+ * @version $Revision: 1.3 $ $Date: 2003/06/11 14:50:29 $\n  */\n public class RealMatrixImpl implements RealMatrix, Serializable {\n \n      * Create a new RealMatrix with the supplied row and column dimensions\n      * @param rowDimension      the number of rows in the new matrix\n      * @param columnDimension   the number of columns in the new matrix\n-     * @return                  newly created matrix\n      */ \n     public RealMatrixImpl(int rowDimension,\n         int columnDimension) {\n     \n     /**\n      * Sets/overwrites the underlying data for the matrix\n-     * @param    2-dimensional array of entries\n+     * @param  data  2-dimensional array of entries\n      */\n     public void setData(double[][] data) {\n         this.data = data;\n     /**\n      * Returns the entry in the specified row and column\n      * @param row  row location of entry to be fetched  \n-     * @param col  column location of entry to be fetched \n+     * @param column  column location of entry to be fetched\n      * @return     matrix entry in row,column\n      * @throws     IllegalArgumentException if entry does not exist\n      */\n     /**\n      * Sets the entry in the specified row and column to the specified value\n      * @param row    row location of entry to be set \n-     * @param col    column location of entry to be set\n+     * @param column    column location of entry to be set\n      * @param value  value to set \n      * @throws IllegalArgumentException if entry does not exist\n      */\n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n     \n     /**\n      * Create a F distribution using the given degrees of freedom.\n-     * @param degreesOfFreedom the degrees of freedom.\n+     * @param numeratorDegreesOfFreedom the degrees of freedom.\n+     * @param denominatorDegreesOfFreedom\n      */\n     public FDistributionImpl(double numeratorDegreesOfFreedom,\n             double denominatorDegreesOfFreedom){\n--- a/src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java\n+++ b/src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java\n \n     /** \n      * Returns the most frequently occuring value\n-     * @see org.apache.commons.math.StoreUnivariate#getMode()\n+     * @see org.apache.commons.math.stat.StoreUnivariate#getMode()\n      */\n     public double getMode() {\n         // Mode depends on a refactor Freq class\n \n     /**\n      * Returns the skewness of this collection of values\n-     * @see org.apache.commons.math.StoreUnivariate#getSkewness()\n+     * @see org.apache.commons.math.stat.StoreUnivariate#getSkewness()\n      */\n     public double getSkewness() {\n         // Initialize the skewness\n \n     /**\n      * Returns the kurtosis for this collection of values\n-     * @see org.apache.commons.math.StoreUnivariate#getKurtosis()\n+     * @see org.apache.commons.math.stat.StoreUnivariate#getKurtosis()\n      */\n     public double getKurtosis() {\n         // Initialize the kurtosis\n     /**\n      * Returns the type or class of kurtosis that this collection of \n      * values exhibits\n-     * @see org.apache.commons.math.StoreUnivariate#getKurtosisClass()\n+     * @see org.apache.commons.math.stat.StoreUnivariate#getKurtosisClass()\n      */\n     public int getKurtosisClass() {\n \n \n     /**\n      * Returns the mean for this collection of values\n-     * @see org.apache.commons.math.Univariate#getMean()\n+     * @see org.apache.commons.math.stat.Univariate#getMean()\n      */\n     public double getMean() {\n         double arithMean = getSum() / getN();\n \n     /**\n      * Returns the geometric mean for this collection of values\n-     * @see org.apache.commons.math.Univariate#getGeometricMean()\n+     * @see org.apache.commons.math.stat.Univariate#getGeometricMean()\n      */\n     public double getGeometricMean() {\n         double gMean = Math.pow(getProduct(),(1.0/getN()));\n \n     /**\n      * Returns the product for this collection of values\n-     * @see org.apache.commons.math.Univariate#getProduct()\n+     * @see org.apache.commons.math.stat.Univariate#getProduct()\n      */\n     public double getProduct() {\n         double product = Double.NaN;\n \n     /**\n      * Returns the variance for this collection of values\n-     * @see org.apache.commons.math.Univariate#getVariance()\n+     * @see org.apache.commons.math.stat.Univariate#getVariance()\n      */\n     public double getVariance() {\n         // Initialize variance\n \n     /**\n      * Returns the standard deviation for this collection of values\n-     * @see org.apache.commons.math.Univariate#getStandardDeviation()\n+     * @see org.apache.commons.math.stat.Univariate#getStandardDeviation()\n      */\n     public double getStandardDeviation() {\n         double stdDev = Double.NaN;\n \n     /**\n      * Returns the maximum value contained herein.\n-     * @see org.apache.commons.math.Univariate#getMax()\n+     * @see org.apache.commons.math.stat.Univariate#getMax()\n      */\n     public double getMax() {\n \n \n     /**\n      * Returns the minimum value contained herein\n-     * @see org.apache.commons.math.Univariate#getMin()\n+     * @see org.apache.commons.math.stat.Univariate#getMin()\n      */\n     public double getMin() {\n         // Initialize minimum to NaN\n \n     /**\n      * Returns the sum of all values contained herein\n-     * @see org.apache.commons.math.Univariate#getSum()\n+     * @see org.apache.commons.math.stat.Univariate#getSum()\n      */\n     public double getSum() {\n         double accum = 0.0;\n \n     /**\n      * Returns the sun of the squares of all values contained herein\n-     * @see org.apache.commons.math.Univariate#getSumsq()\n+     * @see org.apache.commons.math.stat.Univariate#getSumsq()\n      */\n     public double getSumsq() {\n         double accum = 0.0;\n     /**\n      * Uses <a href=\"http://www.nist.gov/dads/HTML/shellsort.html\">Shell sort\n      * </a>\n-     * @see org.apache.commons.math.StoreUnivariate#getSortedValues()\n+     * @see org.apache.commons.math.stat.StoreUnivariate#getSortedValues()\n      *\n      */ \n     public double[] getSortedValues() {\n     \n     /**\n      * Returns an estimate for the pth percentile of the stored values\n-     * @see org.apache.commons.math.StoreUnivariate#getPercentile()\n+     * @see org.apache.commons.math.stat.StoreUnivariate#getPercentile(double)\n      */\n     public double getPercentile(double p) {    \n         if ((p > 100) || (p <= 0)) {", "timestamp": 1055343030, "metainfo": ""}