{"sha": "8cfe8b609eeda562f4d446f5cbeb8e8e01b32370", "log": "added the getSwitchingFunctions and clearSwitchingfunctions to the integrator interface JIRA: MATH-202  ", "commit": "\n--- a/src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java\n  */\n \n package org.apache.commons.math.ode;\n+\n+import java.util.Collection;\n \n /**\n  * This abstract class holds the common part of all adaptive\n    * @param convergence convergence threshold in the event time search\n    * @param maxIterationCount upper limit of the iteration count in\n    * the event time search\n+   * @see #getSwitchingFunctions()\n+   * @see #clearSwitchingFunctions()\n    */\n   public void addSwitchingFunction(SwitchingFunction function,\n                                    double maxCheckInterval,\n                                    double convergence,\n                                    int maxIterationCount) {\n     switchesHandler.add(function, maxCheckInterval, convergence, maxIterationCount);\n+  }\n+\n+  /** Get all the switching functions that have been added to the integrator.\n+   * @return an unmodifiable collection of the added switching functions\n+   * @see #add(SwitchingFunction, double, double, int)\n+   * @see #clearSwitchingFunctions()\n+   */\n+  public Collection getSwitchingFunctions() {\n+      return switchesHandler.getSwitchingFunctions();\n+  }\n+\n+  /** Remove all the switching functions that have been added to the integrator.\n+   * @see #add(SwitchingFunction, double, double, int)\n+   * @see #getSwitchingFunctions()\n+   */\n+  public void clearSwitchingFunctions() {\n+      switchesHandler.clearSwitchingFunctions();\n   }\n \n   /** Perform some sanity checks on the integration parameters.\n--- a/src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java\n  */\n \n package org.apache.commons.math.ode;\n+\n+import java.util.Collection;\n \n /** This interface represents a first order integrator for\n  * differential equations.\n    * @param convergence convergence threshold in the event time search\n    * @param maxIterationCount upper limit of the iteration count in\n    * the event time search\n+   * @see #getSwitchingFunctions()\n+   * @see #clearSwitchingFunctions()\n    */\n   public void addSwitchingFunction(SwitchingFunction function,\n                                    double maxCheckInterval,\n                                    double convergence,\n                                    int maxIterationCount);\n+\n+  /** Get all the switching functions that have been added to the integrator.\n+   * @return an unmodifiable collection of the added switching functions\n+   * @see #add(SwitchingFunction, double, double, int)\n+   * @see #clearSwitchingFunctions()\n+   */\n+  public Collection getSwitchingFunctions();\n+\n+  /** Remove all the switching functions that have been added to the integrator.\n+   * @see #add(SwitchingFunction, double, double, int)\n+   * @see #getSwitchingFunctions()\n+   */\n+  public void clearSwitchingFunctions();\n \n   /** Integrate the differential equations up to the given time.\n    * <p>This method solves an Initial Value Problem (IVP).</p>\n--- a/src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java\n  */\n \n package org.apache.commons.math.ode;\n+\n+import java.util.Collection;\n \n /**\n  * This class implements the common part of all fixed step Runge-Kutta\n    * @param convergence convergence threshold in the event time search\n    * @param maxIterationCount upper limit of the iteration count in\n    * the event time search\n+   * @see #getSwitchingFunctions()\n+   * @see #clearSwitchingFunctions()\n    */\n   public void addSwitchingFunction(SwitchingFunction function,\n                                    double maxCheckInterval,\n                                    double convergence,\n                                    int maxIterationCount) {\n     switchesHandler.add(function, maxCheckInterval, convergence, maxIterationCount);\n+  }\n+\n+  /** Get all the switching functions that have been added to the integrator.\n+   * @return an unmodifiable collection of the added switching functions\n+   * @see #add(SwitchingFunction, double, double, int)\n+   * @see #clearSwitchingFunctions()\n+   */\n+  public Collection getSwitchingFunctions() {\n+      return switchesHandler.getSwitchingFunctions();\n+  }\n+\n+  /** Remove all the switching functions that have been added to the integrator.\n+   * @see #add(SwitchingFunction, double, double, int)\n+   * @see #getSwitchingFunctions()\n+   */\n+  public void clearSwitchingFunctions() {\n+      switchesHandler.clearSwitchingFunctions();\n   }\n \n   /** Perform some sanity checks on the integration parameters.\n--- a/src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java\n+++ b/src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java\n import org.apache.commons.math.FunctionEvaluationException;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n \n    * @param convergence convergence threshold in the event time search\n    * @param maxIterationCount upper limit of the iteration count in\n    * the event time search\n+   * @see #getSwitchingFunctions()\n+   * @see #clearSwitchingFunctions()\n    */\n   public void add(SwitchingFunction function, double maxCheckInterval,\n                   double convergence, int maxIterationCount) {\n     functions.add(new SwitchState(function, maxCheckInterval,\n                                   convergence, maxIterationCount));\n+  }\n+\n+  /** Get all the switching functions that have been added to the handler.\n+   * @return an unmodifiable collection of the added switching functions\n+   * @see #add(SwitchingFunction, double, double, int)\n+   * @see #clearSwitchingFunctions()\n+   */\n+  public Collection getSwitchingFunctions() {\n+      return Collections.unmodifiableCollection(functions);\n+  }\n+\n+  /** Remove all the switching functions that have been added to the handler.\n+   * @see #add(SwitchingFunction, double, double, int)\n+   * @see #getSwitchingFunctions()\n+   */\n+  public void clearSwitchingFunctions() {\n+      functions.clear();\n   }\n \n   /** Check if the handler does not have any condition.\n--- a/src/test/org/apache/commons/math/ode/ClassicalRungeKuttaIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/ClassicalRungeKuttaIntegratorTest.java\n           integ.addSwitchingFunction(functions[l],\n                                      Double.POSITIVE_INFINITY, 1.0e-6 * step, 1000);\n         }\n+        assertEquals(functions.length, integ.getSwitchingFunctions().size());\n         integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n                         pb.getFinalTime(), new double[pb.getDimension()]);\n \n         }\n         previousError = error;\n         assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);\n+        integ.clearSwitchingFunctions();\n+        assertEquals(0, integ.getSwitchingFunctions().size());\n       }\n \n     }\n--- a/src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java\n       integ.addSwitchingFunction(functions[l],\n                                  Double.POSITIVE_INFINITY, 1.0e-8 * maxStep, 1000);\n     }\n+    assertEquals(functions.length, integ.getSwitchingFunctions().size());\n     integ.integrate(pb,\n                     pb.getInitialTime(), pb.getInitialState(),\n                     pb.getFinalTime(), new double[pb.getDimension()]);\n     assertTrue(handler.getMaximalValueError() < 5.0e-6);\n     assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);\n     assertEquals(12.0, handler.getLastTime(), 1.0e-8 * maxStep);\n+    integ.clearSwitchingFunctions();\n+    assertEquals(0, integ.getSwitchingFunctions().size());\n \n   }\n \n--- a/src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java\n       integ.addSwitchingFunction(functions[l],\n                                  Double.POSITIVE_INFINITY, 1.0e-8 * maxStep, 1000);\n     }\n+    assertEquals(functions.length, integ.getSwitchingFunctions().size());\n     integ.integrate(pb,\n                     pb.getInitialTime(), pb.getInitialState(),\n                     pb.getFinalTime(), new double[pb.getDimension()]);\n     assertTrue(handler.getMaximalValueError() < 5.0e-8);\n     assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);\n     assertEquals(12.0, handler.getLastTime(), 1.0e-8 * maxStep);\n+    integ.clearSwitchingFunctions();\n+    assertEquals(0, integ.getSwitchingFunctions().size());\n \n   }\n \n--- a/src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java\n       integ.addSwitchingFunction(functions[l],\n                                  Double.POSITIVE_INFINITY, 1.0e-8 * maxStep, 1000);\n     }\n+    assertEquals(functions.length, integ.getSwitchingFunctions().size());\n     integ.integrate(pb,\n                     pb.getInitialTime(), pb.getInitialState(),\n                     pb.getFinalTime(), new double[pb.getDimension()]);\n     assertTrue(handler.getMaximalValueError() < 5.0e-8);\n     assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);\n     assertEquals(12.0, handler.getLastTime(), 1.0e-8 * maxStep);\n+    integ.clearSwitchingFunctions();\n+    assertEquals(0, integ.getSwitchingFunctions().size());\n \n   }\n \n--- a/src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java\n       integ.addSwitchingFunction(functions[l],\n                                  Double.POSITIVE_INFINITY, 1.0e-8 * maxStep, 1000);\n     }\n+    assertEquals(functions.length, integ.getSwitchingFunctions().size());\n     integ.integrate(pb,\n                     pb.getInitialTime(), pb.getInitialState(),\n                     pb.getFinalTime(), new double[pb.getDimension()]);\n     assertTrue(handler.getMaximalValueError() < 1.0e-7);\n     assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);\n     assertEquals(12.0, handler.getLastTime(), 1.0e-8 * maxStep);\n+    integ.clearSwitchingFunctions();\n+    assertEquals(0, integ.getSwitchingFunctions().size());\n \n   }\n ", "timestamp": 1209048240, "metainfo": ""}