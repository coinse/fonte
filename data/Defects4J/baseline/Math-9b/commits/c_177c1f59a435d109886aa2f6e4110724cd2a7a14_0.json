{"sha": "177c1f59a435d109886aa2f6e4110724cd2a7a14", "log": "Removed unnecessary exceptions.   ", "commit": "\n--- a/src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java\n import java.util.Arrays;\n import java.util.Random;\n \n-import org.apache.commons.math.MathException;\n import org.apache.commons.math.Retry;\n import org.apache.commons.math.RetryRunner;\n import org.apache.commons.math.analysis.MultivariateRealFunction;\n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.exception.MultiDimensionMismatchException;\n import org.apache.commons.math.exception.NoDataException;\n import org.apache.commons.math.exception.NotPositiveException;\n     static final int LAMBDA = 4 + (int)(3.*Math.log(DIM));\n    \n     @Test(expected = OutOfRangeException.class)\n-    public void testInitOutofbounds() throws MathUserException, MathException {\n+    public void testInitOutofbounds() {\n         double[] startPoint = point(DIM,3);\n         double[] insigma = null;\n         double[][] boundaries = boundaries(DIM,-1,2);\n     }\n     \n     @Test(expected = MultiDimensionMismatchException.class)\n-    public void testBoundariesDimensionMismatch() throws MathUserException, MathException {\n+    public void testBoundariesDimensionMismatch() {\n         double[] startPoint = point(DIM,0.5);\n         double[] insigma = null;\n         double[][] boundaries = boundaries(DIM+1,-1,2);\n     }\n \n     @Test(expected = NoDataException.class)\n-    public void testBoundariesNoData() throws MathUserException, MathException {\n+    public void testBoundariesNoData() {\n         double[] startPoint = point(DIM,0.5);\n         double[] insigma = null;\n         double[][] boundaries = boundaries(DIM,-1,2);\n     }\n \n     @Test(expected = NotPositiveException.class)\n-    public void testInputSigmaNegative() throws MathUserException, MathException {\n+    public void testInputSigmaNegative() {\n         double[] startPoint = point(DIM,0.5);\n         double[] insigma = point(DIM,-0.5);\n         double[][] boundaries = null;\n     }\n \n     @Test(expected = OutOfRangeException.class)\n-    public void testInputSigmaOutOfRange() throws MathUserException, MathException {\n+    public void testInputSigmaOutOfRange() {\n         double[] startPoint = point(DIM,0.5);\n         double[] insigma = point(DIM, 1.1);\n         double[][] boundaries = boundaries(DIM,-1,2);\n     }\n \n     @Test(expected = MultiDimensionMismatchException.class)\n-    public void testInputSigmaDimensionMismatch() throws MathUserException, MathException {\n+    public void testInputSigmaDimensionMismatch() {\n         double[] startPoint = point(DIM,0.5);\n         double[] insigma = point(DIM+1,-0.5);\n         double[][] boundaries = null;\n     \n     @Test\n     @Retry(3)\n-    public void testRosen() throws MathException {\n+    public void testRosen() {\n         double[] startPoint = point(DIM,0.1);\n         double[] insigma = point(DIM,0.1);\n         double[][] boundaries = null;\n \n     @Test\n     @Retry(3)\n-    public void testMaximize() throws MathException {\n+    public void testMaximize() {\n         double[] startPoint = point(DIM,1.0);\n         double[] insigma = point(DIM,0.1);\n         double[][] boundaries = null;\n     }\n \n     @Test\n-    public void testEllipse() throws MathException {\n+    public void testEllipse() {\n         double[] startPoint = point(DIM,1.0);\n         double[] insigma = point(DIM,0.1);\n         double[][] boundaries = null;\n     }\n \n     @Test\n-    public void testElliRotated() throws MathException {\n+    public void testElliRotated() {\n         double[] startPoint = point(DIM,1.0);\n         double[] insigma = point(DIM,0.1);\n         double[][] boundaries = null;\n     }\n \n     @Test\n-    public void testCigar() throws MathException {\n+    public void testCigar() {\n         double[] startPoint = point(DIM,1.0);\n         double[] insigma = point(DIM,0.1);\n         double[][] boundaries = null;\n     }\n \n     @Test\n-    public void testTwoAxes() throws MathException {\n+    public void testTwoAxes() {\n         double[] startPoint = point(DIM,1.0);\n         double[] insigma = point(DIM,0.1);\n         double[][] boundaries = null;\n     }\n \n     @Test\n-    public void testCigTab() throws MathException {\n+    public void testCigTab() {\n         double[] startPoint = point(DIM,1.0);\n         double[] insigma = point(DIM,0.3);\n         double[][] boundaries = null;\n     }\n \n     @Test\n-    public void testSphere() throws MathException {\n+    public void testSphere() {\n         double[] startPoint = point(DIM,1.0);\n         double[] insigma = point(DIM,0.1);\n         double[][] boundaries = null;\n     }\n \n     @Test\n-    public void testTablet() throws MathException {\n+    public void testTablet() {\n         double[] startPoint = point(DIM,1.0);\n         double[] insigma = point(DIM,0.1);\n         double[][] boundaries = null;\n     }\n \n     @Test\n-    public void testDiffPow() throws MathException {\n+    public void testDiffPow() {\n         double[] startPoint = point(DIM,1.0);\n         double[] insigma = point(DIM,0.1);\n         double[][] boundaries = null;\n     }\n \n     @Test\n-    public void testSsDiffPow() throws MathException {\n+    public void testSsDiffPow() {\n         double[] startPoint = point(DIM,1.0);\n         double[] insigma = point(DIM,0.1);\n         double[][] boundaries = null;\n     }\n \n     @Test\n-    public void testAckley() throws MathException {\n+    public void testAckley() {\n         double[] startPoint = point(DIM,1.0);\n         double[] insigma = point(DIM,1.0);\n         double[][] boundaries = null;\n     }\n \n     @Test\n-    public void testRastrigin() throws MathException {\n+    public void testRastrigin() {\n         double[] startPoint = point(DIM,0.1);\n         double[] insigma = point(DIM,0.1);\n         double[][] boundaries = null;\n     }\n \n     @Test\n-    public void testConstrainedRosen() throws MathException {\n+    public void testConstrainedRosen() {\n         double[] startPoint = point(DIM,0.1);\n         double[] insigma = point(DIM,0.1);\n         double[][] boundaries = boundaries(DIM,-1,2);\n     }\n \n     @Test\n-    public void testDiagonalRosen() throws MathException {\n+    public void testDiagonalRosen() {\n         double[] startPoint = point(DIM,0.1);\n         double[] insigma = point(DIM,0.1);\n         double[][] boundaries = null;\n             double fTol,\n             double pointTol,\n             int maxEvaluations,\n-            RealPointValuePair expected)\n-    throws MathException {\n+            RealPointValuePair expected) {\n         int dim = startPoint.length;\n         // test diagonalOnly = 0 - slow but normally fewer feval#\n         MultivariateRealOptimizer optim =", "timestamp": 1305548031, "metainfo": ""}