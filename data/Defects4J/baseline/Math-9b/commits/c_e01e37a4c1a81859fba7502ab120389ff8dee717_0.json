{"sha": "e01e37a4c1a81859fba7502ab120389ff8dee717", "log": "moved test problems one package up, to prepare their reuse for stiff integrators  ", "commit": "\n--- a/src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java\n+++ b/src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java\n import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator;\n import org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator;\n-import org.apache.commons.math.ode.nonstiff.TestProblem3;\n import org.apache.commons.math.ode.sampling.DummyStepInterpolator;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n \n--- /dev/null\n+++ b/src/test/org/apache/commons/math/ode/TestProblem1.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.ode;\n+\n+/**\n+ * This class is used in the junit tests for the ODE integrators.\n+\n+ * <p>This specific problem is the following differential equation :\n+ * <pre>\n+ *    y' = -y\n+ * </pre>\n+ * the solution of this equation is a simple exponential function :\n+ * <pre>\n+ *   y (t) = y (t0) exp (t0-t)\n+ * </pre>\n+ * </p>\n+\n+ */\n+public class TestProblem1\n+  extends TestProblemAbstract {\n+\n+  /** Serializable version identifier. */\n+  private static final long serialVersionUID = 1977870815289373164L;\n+\n+  /** theoretical state */\n+  private double[] y;\n+\n+  /**\n+   * Simple constructor.\n+   */\n+  public TestProblem1() {\n+    super();\n+    double[] y0 = { 1.0, 0.1 };\n+    setInitialConditions(0.0, y0);\n+    setFinalConditions(4.0);\n+    double[] errorScale = { 1.0, 1.0 };\n+    setErrorScale(errorScale);\n+    y = new double[y0.length];\n+  }\n+ \n+  /**\n+   * Copy constructor.\n+   * @param problem problem to copy\n+   */\n+  public TestProblem1(TestProblem1 problem) {\n+    super(problem);\n+    y = problem.y.clone();\n+  }\n+\n+  /**\n+   * Clone operation.\n+   * @return a copy of the instance\n+   */\n+  @Override\n+  public Object clone() {\n+    return new TestProblem1(this);\n+  }\n+\n+  @Override\n+  public void doComputeDerivatives(double t, double[] y, double[] yDot) {\n+\n+    // compute the derivatives\n+    for (int i = 0; i < n; ++i)\n+      yDot[i] = -y[i];\n+\n+  }\n+\n+  @Override\n+  public double[] computeTheoreticalState(double t) {\n+    double c = Math.exp (t0 - t);\n+    for (int i = 0; i < n; ++i) {\n+      y[i] = c * y0[i];\n+    }\n+    return y;\n+  }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/ode/TestProblem2.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.ode;\n+\n+/**\n+ * This class is used in the junit tests for the ODE integrators.\n+\n+ * <p>This specific problem is the following differential equation :\n+ * <pre>\n+ *    y' = t^3 - t y\n+ * </pre>\n+ * with the initial condition y (0) = 0. The solution of this equation\n+ * is the following function :\n+ * <pre>\n+ *   y (t) = t^2 + 2 (exp (- t^2 / 2) - 1)\n+ * </pre>\n+ * </p>\n+\n+ */\n+public class TestProblem2\n+  extends TestProblemAbstract {\n+\n+  /** Serializable version identifier. */\n+  private static final long serialVersionUID = 8330741783213512366L;\n+\n+  /** theoretical state */\n+  private double[] y;\n+\n+  /**\n+   * Simple constructor.\n+   */\n+  public TestProblem2() {\n+    super();\n+    double[] y0 = { 0.0 };\n+    setInitialConditions(0.0, y0);\n+    setFinalConditions(1.0);\n+    double[] errorScale = { 1.0 };\n+    setErrorScale(errorScale);\n+    y = new double[y0.length];\n+  }\n+ \n+  /**\n+   * Copy constructor.\n+   * @param problem problem to copy\n+   */\n+  public TestProblem2(TestProblem2 problem) {\n+    super(problem);\n+    y = problem.y.clone();\n+  }\n+\n+  /**\n+   * Clone operation.\n+   * @return a copy of the instance\n+   */\n+  @Override\n+  public Object clone() {\n+    return new TestProblem2(this);\n+  }\n+\n+  @Override\n+  public void doComputeDerivatives(double t, double[] y, double[] yDot) {\n+\n+    // compute the derivatives\n+    for (int i = 0; i < n; ++i)\n+      yDot[i] = t * (t * t - y[i]);\n+\n+  }\n+\n+  @Override\n+  public double[] computeTheoreticalState(double t) {\n+    double t2 = t * t;\n+    double c = t2 + 2 * (Math.exp (-0.5 * t2) - 1);\n+    for (int i = 0; i < n; ++i) {\n+      y[i] = c;\n+    }\n+    return y;\n+  }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/ode/TestProblem3.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.ode;\n+\n+/**\n+ * This class is used in the junit tests for the ODE integrators.\n+\n+ * <p>This specific problem is the following differential equation :\n+ * <pre>\n+ *    y1'' = -y1/r^3  y1 (0) = 1-e  y1' (0) = 0\n+ *    y2'' = -y2/r^3  y2 (0) = 0    y2' (0) =sqrt((1+e)/(1-e))\n+ *    r = sqrt (y1^2 + y2^2), e = 0.9\n+ * </pre>\n+ * This is a two-body problem in the plane which can be solved by\n+ * Kepler's equation\n+ * <pre>\n+ *   y1 (t) = ...\n+ * </pre>\n+ * </p>\n+\n+ */\n+public class TestProblem3\n+  extends TestProblemAbstract {\n+\n+  /** Serializable version identifier. */\n+  private static final long serialVersionUID = 8567328542728919999L;\n+\n+  /** Eccentricity */\n+  double e;\n+\n+  /** theoretical state */\n+  private double[] y;\n+\n+  /**\n+   * Simple constructor.\n+   * @param e eccentricity\n+   */\n+  public TestProblem3(double e) {\n+    super();\n+    this.e = e;\n+    double[] y0 = { 1 - e, 0, 0, Math.sqrt((1+e)/(1-e)) };\n+    setInitialConditions(0.0, y0);\n+    setFinalConditions(20.0);\n+    double[] errorScale = { 1.0, 1.0, 1.0, 1.0 };\n+    setErrorScale(errorScale);\n+    y = new double[y0.length];\n+  }\n+ \n+  /**\n+   * Simple constructor.\n+   */\n+  public TestProblem3() {\n+    this(0.1);\n+  }\n+ \n+  /**\n+   * Copy constructor.\n+   * @param problem problem to copy\n+   */\n+  public TestProblem3(TestProblem3 problem) {\n+    super(problem);\n+    e = problem.e;\n+    y = problem.y.clone();\n+  }\n+\n+  /**\n+   * Clone operation.\n+   * @return a copy of the instance\n+   */\n+  @Override\n+  public Object clone() {\n+    return new TestProblem3(this);\n+  }\n+\n+  @Override\n+  public void doComputeDerivatives(double t, double[] y, double[] yDot) {\n+\n+    // current radius\n+    double r2 = y[0] * y[0] + y[1] * y[1];\n+    double invR3 = 1 / (r2 * Math.sqrt(r2));\n+\n+    // compute the derivatives\n+    yDot[0] = y[2];\n+    yDot[1] = y[3];\n+    yDot[2] = -invR3  * y[0];\n+    yDot[3] = -invR3  * y[1];\n+\n+  }\n+\n+  @Override\n+  public double[] computeTheoreticalState(double t) {\n+\n+    // solve Kepler's equation\n+    double E = t;\n+    double d = 0;\n+    double corr = 0;\n+    do {\n+      double f2  = e * Math.sin(E);\n+      double f0  = d - f2;\n+      double f1  = 1 - e * Math.cos(E);\n+      double f12 = f1 + f1;\n+      corr  = f0 * f12 / (f1 * f12 - f0 * f2);\n+      d -= corr;\n+      E = t + d;\n+    } while (Math.abs(corr) > 1.0e-12);\n+\n+    double cosE = Math.cos(E);\n+    double sinE = Math.sin(E);\n+\n+    y[0] = cosE - e;\n+    y[1] = Math.sqrt(1 - e * e) * sinE;\n+    y[2] = -sinE / (1 - e * cosE);\n+    y[3] = Math.sqrt(1 - e * e) * cosE / (1 - e * cosE);\n+\n+    return y;\n+  }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/ode/TestProblem4.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.ode;\n+\n+import org.apache.commons.math.ode.events.EventHandler;\n+\n+/**\n+ * This class is used in the junit tests for the ODE integrators.\n+\n+ * <p>This specific problem is the following differential equation :\n+ * <pre>\n+ *    x'' = -x\n+ * </pre>\n+ * And when x decreases down to 0, the state should be changed as follows :\n+ * <pre>\n+ *   x' -> -x'\n+ * </pre>\n+ * The theoretical solution of this problem is x = |sin(t+a)|\n+ * </p>\n+\n+ */\n+public class TestProblem4\n+  extends TestProblemAbstract {\n+\n+  /** Serializable version identifier. */\n+  private static final long serialVersionUID = -5910438521889015745L;\n+\n+  /** Time offset. */\n+  private double a;\n+\n+  /** theoretical state */\n+  private double[] y;\n+\n+  /** Simple constructor. */\n+  public TestProblem4() {\n+    super();\n+    a = 1.2;\n+    double[] y0 = { Math.sin(a), Math.cos(a) };\n+    setInitialConditions(0.0, y0);\n+    setFinalConditions(15);\n+    double[] errorScale = { 1.0, 0.0 };\n+    setErrorScale(errorScale);\n+    y = new double[y0.length];\n+  }\n+ \n+  /**\n+   * Copy constructor.\n+   * @param problem problem to copy\n+   */\n+  public TestProblem4(TestProblem4 problem) {\n+    super(problem);\n+    a = problem.a;\n+    y = problem.y.clone();\n+  }\n+\n+  /**\n+   * Clone operation.\n+   * @return a copy of the instance\n+   */\n+  @Override\n+  public Object clone() {\n+    return new TestProblem4(this);\n+  }\n+\n+  @Override\n+  public EventHandler[] getEventsHandlers() {\n+    return new EventHandler[] { new Bounce(), new Stop() };\n+  }\n+\n+  @Override\n+  public void doComputeDerivatives(double t, double[] y, double[] yDot) {\n+    yDot[0] =  y[1];\n+    yDot[1] = -y[0];\n+  }\n+\n+  @Override\n+  public double[] computeTheoreticalState(double t) {\n+    double sin = Math.sin(t + a);\n+    double cos = Math.cos(t + a);\n+    y[0] = Math.abs(sin);\n+    y[1] = (sin >= 0) ? cos : -cos;\n+    return y;\n+  }\n+\n+  private static class Bounce implements EventHandler {\n+\n+    private static final long serialVersionUID = 1356097180027801200L;\n+    private int sign;\n+\n+    public Bounce() {\n+      sign = +1;\n+    }\n+\n+    public double g(double t, double[] y) {\n+      return sign * y[0];\n+    }\n+\n+    public int eventOccurred(double t, double[] y, boolean increasing) {\n+      // this sign change is needed because the state will be reset soon\n+      sign = -sign;\n+      return EventHandler.RESET_STATE;\n+    }\n+  \n+    public void resetState(double t, double[] y) {\n+      y[0] = -y[0];\n+      y[1] = -y[1];\n+    }\n+\n+  }\n+\n+  private static class Stop implements EventHandler {\n+\n+    private static final long serialVersionUID = 6975050568227951931L;\n+\n+    public Stop() {\n+    }\n+\n+    public double g(double t, double[] y) {\n+      return t - 12.0;\n+    }\n+\n+    public int eventOccurred(double t, double[] y, boolean increasing) {\n+      return EventHandler.STOP;\n+    }\n+  \n+    public void resetState(double t, double[] y) {\n+    }\n+\n+  }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/ode/TestProblem5.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.ode;\n+\n+/**\n+ * This class is used in the junit tests for the ODE integrators.\n+ * <p>This is the same as problem 1 except integration is done\n+ * backward in time</p>\n+ */\n+public class TestProblem5\n+  extends TestProblem1 {\n+\n+  /** Serializable version identifier. */\n+  private static final long serialVersionUID = 7579233102411804237L;\n+\n+  /**\n+   * Simple constructor.\n+   */\n+  public TestProblem5() {\n+    super();\n+    setFinalConditions(2 * t0 - t1);\n+  }\n+ \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/ode/TestProblem6.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.ode;\n+\n+/**\n+ * This class is used in the junit tests for the ODE integrators.\n+\n+ * <p>This specific problem is the following differential equation :\n+ * <pre>\n+ *    y' = 3x^5 - y\n+ * </pre>\n+ * when the initial condition is y(0) = -360, the solution of this\n+ * equation degenerates to a simple quintic polynomial function :\n+ * <pre>\n+ *   y (t) = 3x^5 - 15x^4 + 60x^3 - 180x^2 + 360x - 360\n+ * </pre>\n+ * </p>\n+\n+ */\n+public class TestProblem6\n+  extends TestProblemAbstract {\n+\n+    /** Serializable version identifier. */\n+    private static final long serialVersionUID = 1353409119804352378L;\n+\n+    /** theoretical state */\n+    private double[] y;\n+\n+    /**\n+     * Simple constructor.\n+     */\n+    public TestProblem6() {\n+        super();\n+        double[] y0 = { -360.0 };\n+        setInitialConditions(0.0, y0);\n+        setFinalConditions(1.0);\n+        double[] errorScale = { 1.0 };\n+        setErrorScale(errorScale);\n+        y = new double[y0.length];\n+    }\n+\n+    /**\n+     * Copy constructor.\n+     * @param problem problem to copy\n+     */\n+    public TestProblem6(TestProblem6 problem) {\n+        super(problem);\n+        y = problem.y.clone();\n+    }\n+\n+    /**\n+     * Clone operation.\n+     * @return a copy of the instance\n+     */\n+    @Override\n+    public Object clone() {\n+        return new TestProblem6(this);\n+    }\n+\n+    @Override\n+    public void doComputeDerivatives(double t, double[] y, double[] yDot) {\n+\n+        // compute the derivatives\n+        double t2 = t  * t;\n+        double t4 = t2 * t2;\n+        double t5 = t4 * t;\n+        for (int i = 0; i < n; ++i) {\n+            yDot[i] = 3 * t5 - y[i];\n+        }\n+\n+    }\n+\n+    @Override\n+    public double[] computeTheoreticalState(double t) {\n+        for (int i = 0; i < n; ++i) {\n+            y[i] = ((((3 * t - 15) * t + 60) * t - 180) * t + 360) * t - 360;\n+        }\n+        return y;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/ode/TestProblemAbstract.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.ode;\n+\n+import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n+import org.apache.commons.math.ode.events.EventHandler;\n+\n+/**\n+ * This class is used as the base class of the problems that are\n+ * integrated during the junit tests for the ODE integrators.\n+ */\n+public abstract class TestProblemAbstract\n+  implements FirstOrderDifferentialEquations, Cloneable {\n+\n+  /** Serializable version identifier. */\n+  private static final long serialVersionUID = -8521928974502839379L;\n+\n+  /** Dimension of the problem. */\n+  protected int n;\n+\n+  /** Number of functions calls. */\n+  protected int calls;\n+\n+  /** Initial time */\n+  protected double t0;\n+\n+  /** Initial state */\n+  protected double[] y0;\n+\n+  /** Final time */\n+  protected double t1;\n+\n+  /** Error scale */\n+  protected double[] errorScale;\n+\n+  /**\n+   * Simple constructor.\n+   */\n+  protected TestProblemAbstract() {\n+    n          = 0;\n+    calls      = 0;\n+    t0         = 0;\n+    y0         = null;\n+    t1         = 0;\n+    errorScale = null;\n+  }\n+\n+  /**\n+   * Copy constructor.\n+   * @param problem problem to copy\n+   */\n+  protected TestProblemAbstract(TestProblemAbstract problem) {\n+    n     = problem.n;\n+    calls = problem.calls;\n+    t0    = problem.t0;\n+    if (problem.y0 == null) {\n+      y0 = null;\n+    } else {\n+      y0 = problem.y0.clone();\n+    }\n+    if (problem.errorScale == null) {\n+      errorScale = null;\n+    } else {\n+      errorScale = problem.errorScale.clone();\n+    }\n+    t1 = problem.t1;\n+  }\n+\n+  /**\n+   * Clone operation.\n+   * @return a copy of the instance\n+   */\n+  @Override\n+  public abstract Object clone();\n+\n+  /**\n+   * Set the initial conditions\n+   * @param t0 initial time\n+   * @param y0 initial state vector\n+   */\n+  protected void setInitialConditions(double t0, double[] y0) {\n+    calls     = 0;\n+    n         = y0.length;\n+    this.t0   = t0;\n+    this.y0   = y0.clone(); \n+   }\n+\n+  /**\n+   * Set the final conditions.\n+   * @param t1 final time\n+   */\n+  protected void setFinalConditions(double t1) {\n+    this.t1 = t1;\n+  }\n+\n+  /**\n+   * Set the error scale\n+   * @param errorScale error scale\n+   */\n+  protected void setErrorScale(double[] errorScale) {\n+    this.errorScale = errorScale.clone(); \n+  }\n+\n+  public int getDimension() {\n+    return n;\n+  }\n+\n+  /**\n+   * Get the initial time.\n+   * @return initial time\n+   */\n+  public double getInitialTime() {\n+    return t0;\n+  }\n+\n+  /**\n+   * Get the initial state vector.\n+   * @return initial state vector\n+   */\n+  public double[] getInitialState() {\n+    return y0;\n+  }\n+\n+  /**\n+   * Get the final time.\n+   * @return final time\n+   */\n+  public double getFinalTime() {\n+    return t1;\n+  }\n+\n+  /**\n+   * Get the error scale.\n+   * @return error scale\n+   */\n+  public double[] getErrorScale() {\n+    return errorScale;\n+  }\n+\n+  /**\n+   * Get the events handlers.\n+   * @return events handlers   */\n+  public EventHandler[] getEventsHandlers() {\n+    return new EventHandler[0];\n+  }\n+\n+  /**\n+   * Get the number of calls.\n+   * @return nuber of calls\n+   */\n+  public int getCalls() {\n+    return calls;\n+  }\n+\n+  public void computeDerivatives(double t, double[] y, double[] yDot) {\n+    ++calls;\n+    doComputeDerivatives(t, y, yDot);\n+  }\n+\n+  abstract public void doComputeDerivatives(double t, double[] y, double[] yDot);\n+\n+  /**\n+   * Compute the theoretical state at the specified time.\n+   * @param t time at which the state is required\n+   * @return state vector at time t\n+   */\n+  abstract public double[] computeTheoreticalState(double t);\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/ode/TestProblemFactory.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.ode;\n+\n+/**\n+ * This class is used in the junit tests for the ODE integrators.\n+ */\n+public class TestProblemFactory {\n+\n+  /** Problems pool. */\n+  private static TestProblemAbstract[] pool = {\n+    new TestProblem1(),\n+    new TestProblem2(),\n+    new TestProblem3(),\n+    new TestProblem4(),\n+    new TestProblem5(),\n+    new TestProblem6()\n+  };\n+\n+  /**\n+   * Private constructor.\n+   * This is a utility class, so there are no instance at all.\n+   */\n+  private TestProblemFactory() {\n+  }\n+\n+  /**\n+   * Get the problems.\n+   * @return array of problems to solve\n+   */\n+  public static TestProblemAbstract[] getProblems() {\n+    return pool;\n+  }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/ode/TestProblemHandler.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.ode;\n+\n+import org.apache.commons.math.ode.DerivativeException;\n+import org.apache.commons.math.ode.ODEIntegrator;\n+import org.apache.commons.math.ode.sampling.StepHandler;\n+import org.apache.commons.math.ode.sampling.StepInterpolator;\n+\n+/**\n+ * This class is used to handle steps for the test problems\n+ * integrated during the junit tests for the ODE integrators.\n+ */\n+public class TestProblemHandler\n+  implements StepHandler {\n+\n+  /** Associated problem. */\n+  private TestProblemAbstract problem;\n+\n+  /** Maximal errors encountered during the integration. */\n+  private double maxValueError;\n+  private double maxTimeError;\n+\n+  /** Error at the end of the integration. */\n+  private double lastError;\n+\n+  /** Time at the end of integration. */\n+  private double lastTime;\n+\n+  /** ODE solver used. */\n+  private ODEIntegrator integrator;\n+\n+  /** Expected start for step. */\n+  private double expectedStepStart;\n+\n+  /**\n+   * Simple constructor.\n+   * @param problem problem for which steps should be handled\n+   * @param integrator ODE solver used\n+   */\n+  public TestProblemHandler(TestProblemAbstract problem, ODEIntegrator integrator) {\n+    this.problem = problem;\n+    this.integrator = integrator;\n+    reset();\n+  }\n+\n+  public boolean requiresDenseOutput() {\n+    return true;\n+  }\n+\n+  public void reset() {\n+    maxValueError = 0;\n+    maxTimeError  = 0;\n+    lastError     = 0;\n+    expectedStepStart = Double.NaN;\n+  }\n+\n+  public void handleStep(StepInterpolator interpolator,\n+                         boolean isLast)\n+    throws DerivativeException {\n+\n+    double start = integrator.getCurrentStepStart();\n+    if (Math.abs((start - problem.getInitialTime()) / integrator.getCurrentSignedStepsize()) > 0.001) {\n+        // multistep integrators do not handle the first steps themselves\n+        // so we have to make sure the integrator we look at has really started its work\n+        if (!Double.isNaN(expectedStepStart)) {\n+            maxTimeError = Math.max(maxTimeError, Math.abs(start - expectedStepStart));\n+        }\n+        expectedStepStart = start + integrator.getCurrentSignedStepsize();\n+    }\n+\n+    double pT = interpolator.getPreviousTime();\n+    double cT = interpolator.getCurrentTime();\n+    double[] errorScale = problem.getErrorScale();\n+\n+    // store the error at the last step\n+    if (isLast) {\n+      double[] interpolatedY = interpolator.getInterpolatedState();\n+      double[] theoreticalY  = problem.computeTheoreticalState(cT);\n+      for (int i = 0; i < interpolatedY.length; ++i) {\n+        double error = Math.abs(interpolatedY[i] - theoreticalY[i]);\n+        lastError = Math.max(error, lastError);\n+      }\n+      lastTime = cT;\n+    }\n+\n+    // walk through the step\n+    for (int k = 0; k <= 20; ++k) {\n+\n+      double time = pT + (k * (cT - pT)) / 20;\n+      interpolator.setInterpolatedTime(time);\n+      double[] interpolatedY = interpolator.getInterpolatedState();\n+      double[] theoreticalY  = problem.computeTheoreticalState(interpolator.getInterpolatedTime());\n+\n+      // update the errors\n+      for (int i = 0; i < interpolatedY.length; ++i) {\n+        double error = errorScale[i] * Math.abs(interpolatedY[i] - theoreticalY[i]);\n+        maxValueError = Math.max(error, maxValueError);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Get the maximal value error encountered during integration.\n+   * @return maximal value error\n+   */\n+  public double getMaximalValueError() {\n+    return maxValueError;\n+  }\n+\n+  /**\n+   * Get the maximal time error encountered during integration.\n+   * @return maximal time error\n+   */\n+  public double getMaximalTimeError() {\n+    return maxTimeError;\n+  }\n+\n+  /**\n+   * Get the error at the end of the integration.\n+   * @return error at the end of the integration\n+   */\n+  public double getLastError() {\n+    return lastError;\n+  }\n+\n+  /**\n+   * Get the time at the end of the integration.\n+   * @return time at the end of the integration.\n+   */\n+  public double getLastTime() {\n+    return lastTime;\n+  }\n+\n+}\n--- a/src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n import org.apache.commons.math.ode.IntegratorException;\n+import org.apache.commons.math.ode.TestProblem1;\n+import org.apache.commons.math.ode.TestProblem5;\n+import org.apache.commons.math.ode.TestProblem6;\n+import org.apache.commons.math.ode.TestProblemHandler;\n import org.junit.Test;\n \n public class AdamsBashforthIntegratorTest {\n--- a/src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n import org.apache.commons.math.ode.IntegratorException;\n+import org.apache.commons.math.ode.TestProblem1;\n+import org.apache.commons.math.ode.TestProblem5;\n+import org.apache.commons.math.ode.TestProblem6;\n+import org.apache.commons.math.ode.TestProblemHandler;\n import org.junit.Test;\n \n public class AdamsMoultonIntegratorTest {\n--- a/src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n import org.apache.commons.math.ode.IntegratorException;\n+import org.apache.commons.math.ode.TestProblem1;\n+import org.apache.commons.math.ode.TestProblem3;\n+import org.apache.commons.math.ode.TestProblem5;\n+import org.apache.commons.math.ode.TestProblemAbstract;\n+import org.apache.commons.math.ode.TestProblemFactory;\n+import org.apache.commons.math.ode.TestProblemHandler;\n import org.apache.commons.math.ode.events.EventHandler;\n import org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n--- a/src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java\n import org.apache.commons.math.ode.ContinuousOutputModel;\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.IntegratorException;\n+import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils;\n import org.junit.Test;\n--- a/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n import org.apache.commons.math.ode.IntegratorException;\n+import org.apache.commons.math.ode.TestProblem1;\n+import org.apache.commons.math.ode.TestProblem3;\n+import org.apache.commons.math.ode.TestProblem4;\n+import org.apache.commons.math.ode.TestProblem5;\n+import org.apache.commons.math.ode.TestProblemAbstract;\n+import org.apache.commons.math.ode.TestProblemHandler;\n import org.apache.commons.math.ode.events.EventHandler;\n import org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator;\n import org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator;\n--- a/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java\n import org.apache.commons.math.ode.ContinuousOutputModel;\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.IntegratorException;\n+import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n import org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils;\n--- a/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n import org.apache.commons.math.ode.IntegratorException;\n+import org.apache.commons.math.ode.TestProblem1;\n+import org.apache.commons.math.ode.TestProblem3;\n+import org.apache.commons.math.ode.TestProblem4;\n+import org.apache.commons.math.ode.TestProblem5;\n+import org.apache.commons.math.ode.TestProblemHandler;\n import org.apache.commons.math.ode.events.EventHandler;\n import org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator;\n import org.apache.commons.math.ode.sampling.DummyStepHandler;\n--- a/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java\n import org.apache.commons.math.ode.ContinuousOutputModel;\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.IntegratorException;\n+import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n import org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils;\n--- a/src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n import org.apache.commons.math.ode.IntegratorException;\n+import org.apache.commons.math.ode.TestProblem1;\n+import org.apache.commons.math.ode.TestProblem5;\n+import org.apache.commons.math.ode.TestProblemAbstract;\n+import org.apache.commons.math.ode.TestProblemFactory;\n+import org.apache.commons.math.ode.TestProblemHandler;\n import org.apache.commons.math.ode.events.EventHandler;\n import org.apache.commons.math.ode.nonstiff.EulerIntegrator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n--- a/src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java\n import org.apache.commons.math.ode.ContinuousOutputModel;\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.IntegratorException;\n+import org.apache.commons.math.ode.TestProblem1;\n+import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils;\n import org.junit.Test;\n--- a/src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n import org.apache.commons.math.ode.IntegratorException;\n+import org.apache.commons.math.ode.TestProblem1;\n+import org.apache.commons.math.ode.TestProblem3;\n+import org.apache.commons.math.ode.TestProblem5;\n+import org.apache.commons.math.ode.TestProblemAbstract;\n+import org.apache.commons.math.ode.TestProblemFactory;\n+import org.apache.commons.math.ode.TestProblemHandler;\n import org.apache.commons.math.ode.events.EventHandler;\n import org.apache.commons.math.ode.nonstiff.GillIntegrator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n--- a/src/test/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java\n import org.apache.commons.math.ode.ContinuousOutputModel;\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.IntegratorException;\n+import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.nonstiff.GillIntegrator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils;\n--- a/src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n import org.apache.commons.math.ode.IntegratorException;\n+import org.apache.commons.math.ode.TestProblem1;\n+import org.apache.commons.math.ode.TestProblem3;\n+import org.apache.commons.math.ode.TestProblem4;\n+import org.apache.commons.math.ode.TestProblem5;\n+import org.apache.commons.math.ode.TestProblemAbstract;\n+import org.apache.commons.math.ode.TestProblemHandler;\n import org.apache.commons.math.ode.events.EventHandler;\n import org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n--- a/src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java\n import org.apache.commons.math.ode.ContinuousOutputModel;\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.IntegratorException;\n+import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n import org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils;\n--- a/src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n import org.apache.commons.math.ode.IntegratorException;\n+import org.apache.commons.math.ode.TestProblem1;\n+import org.apache.commons.math.ode.TestProblem3;\n+import org.apache.commons.math.ode.TestProblem4;\n+import org.apache.commons.math.ode.TestProblem5;\n+import org.apache.commons.math.ode.TestProblemHandler;\n import org.apache.commons.math.ode.events.EventException;\n import org.apache.commons.math.ode.events.EventHandler;\n import org.apache.commons.math.ode.nonstiff.HighamHall54Integrator;\n--- a/src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java\n import org.apache.commons.math.ode.ContinuousOutputModel;\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.IntegratorException;\n+import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n import org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils;\n--- a/src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n import org.apache.commons.math.ode.IntegratorException;\n+import org.apache.commons.math.ode.TestProblem1;\n+import org.apache.commons.math.ode.TestProblem5;\n+import org.apache.commons.math.ode.TestProblemAbstract;\n+import org.apache.commons.math.ode.TestProblemFactory;\n+import org.apache.commons.math.ode.TestProblemHandler;\n import org.apache.commons.math.ode.events.EventHandler;\n import org.apache.commons.math.ode.nonstiff.MidpointIntegrator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n--- a/src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java\n import org.apache.commons.math.ode.ContinuousOutputModel;\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.IntegratorException;\n+import org.apache.commons.math.ode.TestProblem1;\n+import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils;\n import org.junit.Test;\n--- a/src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n import org.apache.commons.math.ode.IntegratorException;\n+import org.apache.commons.math.ode.TestProblem1;\n+import org.apache.commons.math.ode.TestProblem3;\n+import org.apache.commons.math.ode.TestProblem5;\n+import org.apache.commons.math.ode.TestProblemAbstract;\n+import org.apache.commons.math.ode.TestProblemFactory;\n+import org.apache.commons.math.ode.TestProblemHandler;\n import org.apache.commons.math.ode.events.EventHandler;\n import org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n--- a/src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java\n import org.apache.commons.math.ode.ContinuousOutputModel;\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.IntegratorException;\n+import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils;\n import org.junit.Test;\n--- a/src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java\n import org.apache.commons.math.ode.ContinuousOutputModel;\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.IntegratorException;\n+import org.apache.commons.math.ode.TestProblem1;\n+import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator;\n-import org.apache.commons.math.ode.nonstiff.TestProblem1;\n-import org.apache.commons.math.ode.nonstiff.TestProblem3;\n import org.junit.Test;\n \n public class NordsieckStepInterpolatorTest {\n--- a/src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java\n+++ b/src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n import org.apache.commons.math.ode.IntegratorException;\n-import org.apache.commons.math.ode.nonstiff.TestProblemAbstract;\n+import org.apache.commons.math.ode.TestProblemAbstract;\n \n public class StepInterpolatorTestUtils {\n \n--- a/src/test/org/apache/commons/math/ode/sampling/StepNormalizerTest.java\n+++ b/src/test/org/apache/commons/math/ode/sampling/StepNormalizerTest.java\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n import org.apache.commons.math.ode.IntegratorException;\n+import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator;\n-import org.apache.commons.math.ode.nonstiff.TestProblem3;\n import org.apache.commons.math.ode.sampling.FixedStepHandler;\n import org.apache.commons.math.ode.sampling.StepNormalizer;\n ", "timestamp": 1246225438, "metainfo": ""}