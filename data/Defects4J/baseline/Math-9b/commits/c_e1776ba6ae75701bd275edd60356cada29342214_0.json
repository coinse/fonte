{"sha": "e1776ba6ae75701bd275edd60356cada29342214", "log": "[MATH-828] Fixed numerical instabilities in SimplexSolver leading to unbounded solutions.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n         Integer minPos = null;\n         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {\n             final double entry = tableau.getEntry(0, i);\n-            if (Precision.compareTo(entry, minValue, maxUlps) < 0) {\n+            // check if the entry is strictly smaller than the current minimum\n+            // do not use a ulp/epsilon check\n+            if (entry < minValue) {\n                 minValue = entry;\n                 minPos = i;\n             }\n \n             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                 final double ratio = rhs / entry;\n-                final int cmp = Precision.compareTo(ratio, minRatio, maxUlps);\n+                // check if the entry is strictly equal to the current min ratio\n+                // do not use a ulp/epsilon check\n+                final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n                     minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n         }\n \n         if (minRatioPositions.size() == 0) {\n-          return null;\n+            return null;\n         } else if (minRatioPositions.size() > 1) {\n-          // there's a degeneracy as indicated by a tie in the minimum ratio test\n-          // check if there's an artificial variable that can be forced out of the basis\n-          for (Integer row : minRatioPositions) {\n-            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-              int column = i + tableau.getArtificialVariableOffset();\n-              final double entry = tableau.getEntry(row, column);\n-              if (Precision.equals(entry, 1d, maxUlps) &&\n-                  row.equals(tableau.getBasicRow(column))) {\n-                return row;\n-              }\n-            }\n-          }\n+            // there's a degeneracy as indicated by a tie in the minimum ratio test\n+\n+            // 1. check if there's an artificial variable that can be forced out of the basis\n+            for (Integer row : minRatioPositions) {\n+                for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n+                    int column = i + tableau.getArtificialVariableOffset();\n+                    final double entry = tableau.getEntry(row, column);\n+                    if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n+                        return row;\n+                    }\n+                }\n+            }\n+\n+            // 2. apply Bland's rule to prevent cycling:\n+            //    take the row for which the corresponding basic variable has the smallest index\n+            //\n+            // see http://www.stanford.edu/class/msande310/blandrule.pdf\n+            // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n+            Integer minRow = null;\n+            int minIndex = tableau.getWidth();\n+            for (Integer row : minRatioPositions) {\n+                for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1 && minRow != row; i++) {\n+                    if (row == tableau.getBasicRow(i)) {\n+                        if (i < minIndex) {\n+                            minIndex = i;\n+                            minRow = row;\n+                        }\n+                    }\n+                }\n+            }\n+\n+            return minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n         // set the rest of the pivot column to 0\n         for (int i = 0; i < tableau.getHeight(); i++) {\n             if (i != pivotRow) {\n-                double multiplier = tableau.getEntry(i, pivotCol);\n+                final double multiplier = tableau.getEntry(i, pivotCol);\n                 tableau.subtractRow(i, pivotRow, multiplier);\n             }\n         }\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+\n+import odk.lang.FastMath;\n \n import org.apache.commons.math3.linear.Array2DRowRealMatrix;\n import org.apache.commons.math3.linear.MatrixUtils;\n     /** Default amount of error to accept in floating point comparisons (as ulps). */\n     private static final int DEFAULT_ULPS = 10;\n \n+    /** The cut-off threshold to zero-out entries. */\n+    private static final double CUTOFF_THRESHOLD = 1e-12;\n+\n     /** Serializable version identifier. */\n     private static final long serialVersionUID = -1369660067587938365L;\n \n      */\n     protected void subtractRow(final int minuendRow, final int subtrahendRow,\n                                final double multiple) {\n-        tableau.setRowVector(minuendRow, tableau.getRowVector(minuendRow)\n-            .subtract(tableau.getRowVector(subtrahendRow).mapMultiply(multiple)));\n+        for (int i = 0; i < getWidth(); i++) {\n+            double result = tableau.getEntry(minuendRow, i) - tableau.getEntry(subtrahendRow, i) * multiple;\n+            // cut-off values smaller than the CUTOFF_THRESHOLD, otherwise may lead to numerical instabilities\n+            if (FastMath.abs(result) < CUTOFF_THRESHOLD) {\n+                result = 0.0;\n+            }\n+            tableau.setEntry(minuendRow, i, result);\n+        }\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java\n+++ b/src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java\n \n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.List;\n \n import org.apache.commons.math3.optimization.GoalType;\n import org.apache.commons.math3.optimization.PointValuePair;\n \n public class SimplexSolverTest {\n \n+    @Test\n+    public void testMath828() {\n+        LinearObjectiveFunction f = new LinearObjectiveFunction(\n+                new double[] { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, 0.0);\n+        \n+        ArrayList <LinearConstraint>constraints = new ArrayList<LinearConstraint>();\n+\n+        constraints.add(new LinearConstraint(new double[] {0.0, 39.0, 23.0, 96.0, 15.0, 48.0, 9.0, 21.0, 48.0, 36.0, 76.0, 19.0, 88.0, 17.0, 16.0, 36.0,}, Relationship.GEQ, 15.0));\n+        constraints.add(new LinearConstraint(new double[] {0.0, 59.0, 93.0, 12.0, 29.0, 78.0, 73.0, 87.0, 32.0, 70.0, 68.0, 24.0, 11.0, 26.0, 65.0, 25.0,}, Relationship.GEQ, 29.0));\n+        constraints.add(new LinearConstraint(new double[] {0.0, 74.0, 5.0, 82.0, 6.0, 97.0, 55.0, 44.0, 52.0, 54.0, 5.0, 93.0, 91.0, 8.0, 20.0, 97.0,}, Relationship.GEQ, 6.0));\n+        constraints.add(new LinearConstraint(new double[] {8.0, -3.0, -28.0, -72.0, -8.0, -31.0, -31.0, -74.0, -47.0, -59.0, -24.0, -57.0, -56.0, -16.0, -92.0, -59.0,}, Relationship.GEQ, 0.0));\n+        constraints.add(new LinearConstraint(new double[] {25.0, -7.0, -99.0, -78.0, -25.0, -14.0, -16.0, -89.0, -39.0, -56.0, -53.0, -9.0, -18.0, -26.0, -11.0, -61.0,}, Relationship.GEQ, 0.0));\n+        constraints.add(new LinearConstraint(new double[] {33.0, -95.0, -15.0, -4.0, -33.0, -3.0, -20.0, -96.0, -27.0, -13.0, -80.0, -24.0, -3.0, -13.0, -57.0, -76.0,}, Relationship.GEQ, 0.0));\n+        constraints.add(new LinearConstraint(new double[] {7.0, -95.0, -39.0, -93.0, -7.0, -94.0, -94.0, -62.0, -76.0, -26.0, -53.0, -57.0, -31.0, -76.0, -53.0, -52.0,}, Relationship.GEQ, 0.0));\n+        \n+        double epsilon = 1e-6;\n+        PointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MINIMIZE, true);\n+        Assert.assertEquals(1.0d, solution.getValue(), epsilon);\n+        Assert.assertTrue(validSolution(solution, constraints, epsilon));\n+    }\n+    \n     @Test\n     public void testMath781() {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 6, 7 }, 0);\n         return new LinearConstraint(lhs, relationship, rhs);\n     }\n \n+    private static boolean validSolution(PointValuePair solution, List<LinearConstraint> constraints, double epsilon) {\n+        double[] vals = solution.getPoint();\n+        for (LinearConstraint c : constraints) {\n+            double[] coeffs = c.getCoefficients().toArray();\n+            double result = 0.0d;\n+            for (int i = 0; i < vals.length; i++) {\n+                result += vals[i] * coeffs[i];\n+            }\n+            \n+            switch (c.getRelationship()) {\n+            case EQ:\n+                if (!Precision.equals(result, c.getValue(), epsilon)) {\n+                    return false;\n+                }\n+                break;\n+                \n+            case GEQ:\n+                if (Precision.compareTo(result, c.getValue(), epsilon) < 0) {\n+                    return false;\n+                }\n+                break;\n+                \n+            case LEQ:\n+                if (Precision.compareTo(result, c.getValue(), epsilon) > 0) {\n+                    return false;\n+                }\n+                break;\n+            }\n+        }\n+        \n+        return true;\n+    }\n+\n }", "timestamp": 1343493460, "metainfo": ""}