{"sha": "0a904461932f2c0455611e77ec6a8d8aced2980b", "log": "Attempting to recover last revision.   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/ConvergenceException.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math;\n+\n+/**\n+ * Error thrown when a numerical computation can not be performed because the\n+ * numerical result failed to converge to a finite value.\n+ * \n+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:22 $\n+ */\n+public class ConvergenceException extends MathException {\n+    /**\n+     * Default constructor.\n+     */\n+    public ConvergenceException() {\n+        this(null, null);\n+    }\n+    \n+    /**\n+     * Construct an exception with the given message.\n+     * @param message descriptive error message. \n+     */\n+    public ConvergenceException(String message) {\n+        this(message, null);\n+    }\n+\n+    /**\n+     * Construct an exception with the given message and root cause.\n+     * @param message descriptive error message.\n+     * @param cause root cause.\n+     */\n+    public ConvergenceException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+\n+    /**\n+     * Create an exception with a given root cause.\n+     * @param throwable caught exception causing this problem\n+     */\n+    public ConvergenceException(Throwable throwable) {\n+        this(null, throwable);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/MathConfigurationException.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math;\n+\n+/**\n+ * Signals a configuration problem with any of the factory methods.\n+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:22 $\n+ */\n+public class MathConfigurationException extends MathException {\n+\n+    /**\n+     * Default constructor.\n+     */\n+    public MathConfigurationException() {\n+        this(null, null);\n+    }\n+\n+    /**\n+     * Construct an exception with the given message.\n+     * @param message message describing the problem\n+     */\n+    public MathConfigurationException(final String message) {\n+        this(message, null);\n+    }\n+\n+    /**\n+     * Construct an exception with the given message and root cause.\n+     * @param message message describing the problem\n+     * @param throwable caught exception causing this problem\n+     */\n+    public MathConfigurationException(\n+        final String message,\n+        final Throwable throwable) {\n+        super(message, throwable);\n+    }\n+\n+    /**\n+     * Construct an exception with the given root cause.\n+     * @param throwable caught exception causing this problem\n+     */\n+    public MathConfigurationException(final Throwable throwable) {\n+        this(null, throwable);\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/MathException.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math;\n+\n+import org.apache.commons.lang.exception.NestableException;\n+\n+/**\n+ * A generic exception indicating problems in the math package.\n+ * @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:22 $\n+ */\n+public class MathException extends NestableException {\n+\n+    /**\n+     * Constructs a MathException\n+     */\n+    public MathException() {\n+        this(null, null);\n+    }\n+\n+    /**\n+     * Create an exception with a given error message.\n+     * @param message message describing the problem\n+     */\n+    public MathException(final String message) {\n+        this(message, null);\n+    }\n+\n+    /**\n+     * Create an exception with a given error message and root cause.\n+     * @param message message describing the problem\n+     * @param throwable caught exception causing this problem\n+     */\n+    public MathException(final String message, final Throwable throwable) {\n+        super(message, throwable);\n+    }\n+\n+    /**\n+     * Create an exception with a given root cause.\n+     * @param throwable caught exception causing this problem\n+     */\n+    public MathException(final Throwable throwable) {\n+        this(null, throwable);\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/BisectionSolver.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ * Provide the bisection algorithm for solving for zeros of real univariate\n+ * functions.  It will only search for one zero in the given interval.  The\n+ * function is supposed to be continuous but not necessarily smooth.\n+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:17 $\n+ */\n+public class BisectionSolver extends UnivariateRealSolverImpl {\n+    /**\n+     * Construct a solver for the given function.\n+     * @param f function to solve.\n+     */\n+    public BisectionSolver(UnivariateRealFunction f) {\n+        super(f, 100, 1E-6);\n+    }\n+\n+    /**\n+     * Solve for a zero in the given interval.\n+     * @param min the lower bound for the interval.\n+     * @param max the upper bound for the interval.\n+     * @param initial the start value to use (ignored).\n+     * @return the value where the function is zero\n+     * @throws MathException if the iteration count was exceeded or the\n+     *  solver detects convergence problems otherwise.\n+     */\n+    public double solve(double min, double max, double initial)\n+        throws MathException {\n+            \n+        return solve(min, max);\n+    }\n+    \n+    /**\n+     * Solve for a zero root in the given interval.\n+     * @param min the lower bound for the interval.\n+     * @param max the upper bound for the interval.\n+     * @return the value where the function is zero\n+     * @throws MathException if the iteration count was exceeded or the\n+     *  solver detects convergence problems otherwise.\n+     */\n+    public double solve(double min, double max) throws MathException {\n+        clearResult();\n+\n+        double m;\n+        double fm;\n+        double fmin;\n+        \n+        int i = 0;\n+        while (i < maximalIterationCount) {\n+            m = midpoint(min, max);\n+            fmin = f.value(min);\n+            fm = f.value(m);\n+\n+            if (fm * fmin > 0.0) {\n+                // max and m bracket the root.\n+                min = m;\n+                fmin = fm;\n+            } else {\n+                // min and m bracket the root.\n+                max = m;\n+            }\n+\n+            if (Math.abs(max - min) <= absoluteAccuracy) {\n+                m = midpoint(min, max);\n+                setResult(m, i);\n+                return m;\n+            }\n+            ++i;\n+        }\n+        \n+        throw new MathException(\"Maximal iteration number exceeded\");\n+    }\n+\n+    /**\n+     * Compute the midpoint of two values.\n+     * @param a first value.\n+     * @param b second value.\n+     * @return the midpoint. \n+     */\n+    public static double midpoint(double a, double b) {\n+        return (a + b) * .5;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ * Provide the Brent algorithm for solving for zeros of real univariate\n+ * functions.\n+ * It will only search for one zero in the given interval.\n+ * The function is supposed to be continuous but not necessarily smooth.\n+ *  \n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $\n+ */\n+public class BrentSolver extends UnivariateRealSolverImpl {\n+    /**\n+     * Construct a solver for the given function.\n+     * @param f function to solve.\n+     */\n+    public BrentSolver(UnivariateRealFunction f) {\n+        super(f, 100, 1E-6);\n+    }\n+\n+    /**\n+     * Solve for a zero in the given interval.\n+     * @param min the lower bound for the interval.\n+     * @param max the upper bound for the interval.\n+     * @param initial the start value to use (ignored).\n+     * @return the value where the function is zero\n+     * @throws MathException if the iteration count was exceeded or the\n+     *  solver detects convergence problems otherwise.\n+     */\n+    public double solve(double min, double max, double initial)\n+        throws MathException {\n+            \n+        return solve(min, max);\n+    }\n+    \n+    /**\n+     * Solve for a zero root in the given interval.\n+     * @param min the lower bound for the interval.\n+     * @param max the upper bound for the interval.\n+     * @return the value where the function is zero\n+     * @throws MathException if the iteration count was exceeded or the\n+     *  solver detects convergence problems otherwise.\n+     */\n+    public double solve(double min, double max) throws MathException {\n+        clearResult();\n+        // Index 0 is the old approximation for the root.\n+        // Index 1 is the last calculated approximation  for the root.\n+        // Index 2 is a bracket for the root with respect to x1.\n+        double x0 = min;\n+        double x1 = max;\n+        double y0 = f.value(x0);\n+        double y1 = f.value(x1);\n+        if ((y0 > 0) == (y1 > 0)) {\n+            throw new MathException(\"Interval doesn't bracket a zero.\");\n+        }\n+        double x2 = x0;\n+        double y2 = y0;\n+        double delta = x1 - x0;\n+        double oldDelta = delta;\n+\n+        int i = 0;\n+        while (i < maximalIterationCount) {\n+            if (Math.abs(y2) < Math.abs(y1)) {\n+                x0 = x1;\n+                x1 = x2;\n+                x2 = x0;\n+                y0 = y1;\n+                y1 = y2;\n+                y2 = y0;\n+            }\n+            if (Math.abs(y1) <= functionValueAccuracy) {\n+                // Avoid division by very small values. Assume\n+                // the iteration has converged (the problem may\n+                // still be ill conditioned)\n+                setResult(x1, i);\n+                return result;\n+            }\n+            double dx = (x2 - x1);\n+            double tolerance =\n+                Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);\n+            if (Math.abs(dx) <= tolerance) {\n+                setResult(x1, i);\n+                return result;\n+            }\n+            if ((Math.abs(oldDelta) < tolerance) ||\n+                    (Math.abs(y0) <= Math.abs(y1))) {\n+                // Force bisection.\n+                delta = 0.5 * dx;\n+                oldDelta = delta;\n+            } else {\n+                double r3 = y1 / y0;\n+                double p;\n+                double p1;\n+                if (x0 == x2) {\n+                    // Linear interpolation.\n+                    p = dx * r3;\n+                    p1 = 1.0 - r3;\n+                } else {\n+                    // Inverse quadratic interpolation.\n+                    double r1 = y0 / y2;\n+                    double r2 = y1 / y2;\n+                    p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));\n+                    p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n+                }\n+                if (p > 0.0) {\n+                    p1 = -p1;\n+                } else {\n+                    p = -p;\n+                }\n+                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||\n+                        p >= Math.abs(0.5 * oldDelta * p1)) {\n+                    // Inverse quadratic interpolation gives a value\n+                    // in the wrong direction, or progress is slow.\n+                    // Fall back to bisection.\n+                    delta = 0.5 * dx;\n+                    oldDelta = delta;\n+                } else {\n+                    oldDelta = delta;\n+                    delta = p / p1;\n+                }\n+            }\n+            // Save old X1, Y1 \n+            x0 = x1;\n+            y0 = y1;\n+            // Compute new X1, Y1\n+            if (Math.abs(delta) > tolerance) {\n+                x1 = x1 + delta;\n+            } else if (dx > 0.0) {\n+                x1 = x1 + 0.5 * tolerance;\n+            } else if (dx <= 0.0) {\n+                x1 = x1 - 0.5 * tolerance;\n+            }\n+            y1 = f.value(x1);\n+            if ((y1 > 0) == (y2 > 0)) {\n+                x2 = x0;\n+                y2 = y0;\n+                delta = x1 - x0;\n+                oldDelta = delta;\n+            }\n+            i++;\n+        }\n+        throw new MathException(\"Maximal iteration number exceeded.\");\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/ConvergenceException.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+import org.apache.commons.lang.exception.NestableRuntimeException;\n+\n+/**\n+ * Error thrown when a numerical computation can not be performed because the\n+ * numerical result failed to converge to a finite value.\n+ * \n+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:17 $\n+ */\n+public class ConvergenceException extends NestableRuntimeException {\n+    /**\n+     * Default constructor.\n+     */\n+    public ConvergenceException() {\n+        this(null, null);\n+    }\n+    \n+    /**\n+     * Construct an exception with the given message.\n+     * @param message descriptive error message. \n+     */\n+    public ConvergenceException(String message) {\n+        this(message, null);\n+    }\n+\n+    /**\n+     * Construct an exception with the given message and root cause.\n+     * @param message descriptive error message.\n+     * @param cause root cause.\n+     */\n+    public ConvergenceException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+\n+    /**\n+     * Create an exception with a given root cause.\n+     * @param throwable caught exception causing this problem\n+     */\n+    public ConvergenceException(Throwable throwable) {\n+        this(null, throwable);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/CubicSplineFunction.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+import java.util.Arrays;\n+\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ * Represents a cubic spline function.\n+ * Spline functions map a certain interval of real numbers to real numbers.\n+ * A cubic spline consists of segments of cubic functions. For this class,\n+ * polynominal coefficents are used.\n+ * Arguments outside of the domain cause an IllegalArgumentException.\n+ * \n+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:17 $\n+ */\n+public class CubicSplineFunction implements UnivariateRealFunction {\n+    /** Spline segment interval delimiters. Size is N+1 for N segments. */\n+    private double xval[];\n+\n+    /**\n+     * The spline segment's polynominal coefficients.\n+     * The first index runs over the intervals, size is N.\n+     * The second index adresses the coefficients in the segment, with\n+     * index 0 being the absolute coefficient and index 3 the coefficient\n+     * for the third power.\n+     * The coefficients are setup so that x runs from 0 to xval[i+1]-xval[i].\n+     */\n+    private double c[][];\n+\n+    /**\n+     * Construct a function with the given segment delimiters and polynomial\n+     * coefficients.\n+     * @param xval Spline segment interval delimiters\n+     * @param c spline segment's polynominal coefficients\n+     */\n+    public CubicSplineFunction(double xval[], double c[][]) {\n+        super();\n+        // TODO: should copy the arguments here, for safety. This could be a major overhead.\n+        this.xval = xval;\n+        this.c = c;\n+    }\n+\n+    /**\n+     * Compute the value for the function.\n+     * @param x the point for which the function value should be computed\n+     * @return the value\n+     * @throws MathException if the function couldn't be computed due to\n+     *  missing additional data or other environmental problems.\n+     * @see UnivariateRealFunction#value(double)\n+     */\n+    public double value(double x) throws MathException {\n+        if (x < xval[0] || x > xval[xval.length - 1]) {\n+            throw new IllegalArgumentException(\"Argument outside domain\");\n+        }\n+        int i = Arrays.binarySearch(xval, x);\n+        if (i < 0) {\n+            i = -i - 2;\n+        }\n+        x = x - xval[i];\n+        return ((c[i][3] * x + c[i][2]) * x + c[i][1]) * x + c[i][0];\n+    }\n+\n+    /**\n+     * Compute the value for the first derivative of the function.\n+     * It is recommended to provide this method only if the first derivative is\n+     * analytical. Numerical derivatives may be acceptable in some cases.\n+     * An implementation should throw an UnsupportedOperationException if\n+     * this method is not implemented.\n+     * @param x the point for which the first derivative should be computed\n+     * @return the value\n+     * @throws MathException if the derivative couldn't be computed.\n+     * @see UnivariateRealFunction#firstDerivative(double)\n+     */\n+    public double firstDerivative(double x) throws MathException {\n+        if (x < xval[0] || x > xval[xval.length - 1]) {\n+            throw new IllegalArgumentException(\"Argument outside domain\");\n+        }\n+        int i = Arrays.binarySearch(xval, x);\n+        if (i < 0) {\n+            i = -i - 2;\n+        }\n+        x = x - xval[i];\n+        return (3 * c[i][3] * x + 2 * c[i][2]) * x + c[i][1];\n+    }\n+\n+    /**\n+     * Compute the value for the second derivative of the function.\n+     * It is recommended to provide this method only if the second derivative is\n+     * analytical. Numerical derivatives may be acceptable in some cases.\n+     * An implementation should throw an UnsupportedOperationException if\n+     * this method is not implemented.\n+     * @param x the point for which the first derivative should be computed\n+     * @return the value\n+     * @throws MathException if the second derivative couldn't be computed.\n+     * @see UnivariateRealFunction#secondDerivative(double)\n+     */\n+    public double secondDerivative(double x) throws MathException {\n+        if (x < xval[0] || x > xval[xval.length - 1]) {\n+            throw new IllegalArgumentException(\"Argument outside domain\");\n+        }\n+        int i = Arrays.binarySearch(xval, x);\n+        if (i < 0) {\n+            i = -i - 2;\n+        }\n+        x = x - xval[i];\n+        return 6 * c[i][3] * x + 2 * c[i][2];\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/QuinticFunction.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ * Auxillary class for testing solvers.\n+ * \n+ * @author pietsch at apache.org\n+ *\n+ */\n+public class QuinticFunction implements UnivariateRealFunction {\n+\n+    /* Evaluate quintic.\n+     * @see org.apache.commons.math.UnivariateRealFunction#value(double)\n+     */\n+    public double value(double x) throws MathException {\n+        return (x-1)*(x-0.5)*x*(x+0.5)*(x+1);\n+    }\n+\n+    /* First derivative of quintic.\n+     * @see org.apache.commons.math.UnivariateRealFunction#firstDerivative(double)\n+     */\n+    public double firstDerivative(double x) throws MathException {\n+        return (5*x*x-3.75)*x*x+0.25;\n+    }\n+\n+    /* Second order derivative of quintic.\n+     * Unsupported.\n+     * @see org.apache.commons.math.UnivariateRealFunction#secondDerivative(double)\n+     */\n+    public double secondDerivative(double x) throws MathException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/RootFinding.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ * Utility class comprised of root finding techniques.\n+ *\n+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:17 $\n+ */\n+public class RootFinding {\n+    /**\n+     * Default constructor. Prohibit construction.\n+     */\n+    private RootFinding() {\n+        super();\n+    }\n+\n+    /**\n+     * For a function, f, this method returns two values, a and b that bracket\n+     * a root of f.  That is to say, there exists a value c between a and b\n+     * such that f(c) = 0.\n+     *\n+     * @param function the function\n+     * @param initial midpoint of the returned range.\n+     * @param lowerBound for numerical safety, a never is less than this value.\n+     * @param upperBound for numerical safety, b never is greater than this\n+     *                   value.\n+     * @return a two element array holding {a, b}.\n+     * @throws MathException if a root can not be bracketted.\n+     */\n+    public static double[] bracket(UnivariateRealFunction function,\n+                                   double initial,\n+                                   double lowerBound,\n+                                   double upperBound) throws MathException {\n+        return bracket( function, initial, lowerBound, upperBound,\n+            Integer.MAX_VALUE ) ;\n+    }\n+\n+    /**\n+     * For a function, f, this method returns two values, a and b that bracket\n+     * a root of f.  That is to say, there exists a value c between a and b\n+     * such that f(c) = 0.\n+     *\n+     * @param function the function\n+     * @param initial midpoint of the returned range.\n+     * @param lowerBound for numerical safety, a never is less than this value.\n+     * @param upperBound for numerical safety, b never is greater than this\n+     *                   value.\n+     * @param maximumIterations to guard against infinite looping, maximum\n+     *                          number of iterations to perform\n+     * @return a two element array holding {a, b}.\n+     * @throws MathException if a root can not be bracketted.\n+     */\n+    public static double[] bracket(UnivariateRealFunction function,\n+                                   double initial,\n+                                   double lowerBound,\n+                                   double upperBound,\n+                                   int maximumIterations) throws MathException {\n+        double a = initial;\n+        double b = initial;\n+        double fa;\n+        double fb;\n+        int numIterations = 0 ;\n+\n+        do {\n+            a = Math.max(a - 1.0, lowerBound);\n+            b = Math.min(b + 1.0, upperBound);\n+            fa = function.value(a);\n+            fb = function.value(b);\n+            numIterations += 1 ;\n+        } while ( (fa * fb > 0.0) && ( numIterations < maximumIterations ) );\n+\n+        return new double[]{a, b};\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/SecantSolver.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ * Provide the secant algorithm for solving for zeros of real univariate\n+ * functions. Because of forced bracketing, convergence is slower than\n+ * the unrestricted secant algorithm. However, slow convergence of the\n+ * Regula Falsi can be avoided.\n+ * It will only search for one zero in the given interval.\n+ * The function is supposed to be continuous but not necessarily smooth.\n+ *  \n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $\n+ */\n+public class SecantSolver extends UnivariateRealSolverImpl {\n+    /**\n+     * Construct a solver for the given function.\n+     * @param f function to solve.\n+     */\n+    public SecantSolver(UnivariateRealFunction f) {\n+        super(f, 100, 1E-6);\n+    }\n+\n+    /**\n+     * Solve for a zero in the given interval.\n+     * @param min the lower bound for the interval.\n+     * @param max the upper bound for the interval.\n+     * @param initial the start value to use (ignored).\n+     * @return the value where the function is zero\n+     * @throws MathException if the iteration count was exceeded or the\n+     *  solver detects convergence problems otherwise.\n+     */\n+    public double solve(double min, double max, double initial)\n+        throws MathException {\n+            \n+        return solve(min, max);\n+    }\n+    \n+    /**\n+     * Solve for a zero root in the given interval.\n+     * @param min the lower bound for the interval.\n+     * @param max the upper bound for the interval.\n+     * @return the value where the function is zero\n+     * @throws MathException if the iteration count was exceeded or the\n+     *  solver detects convergence problems otherwise.\n+     */\n+    public double solve(double min, double max) throws MathException {\n+        clearResult();\n+        // Index 0 is the old approximation for the root.\n+        // Index 1 is the last calculated approximation  for the root.\n+        // Index 2 is a bracket for the root with respect to x0.\n+        // OldDelta is the length of the bracketing interval of the last\n+        // iteration.\n+        double x0 = min;\n+        double x1 = max;\n+        double y0 = f.value(x0);\n+        double y1 = f.value(x1);\n+        if ((y0 > 0) == (y1 > 0)) {\n+            throw new MathException(\"Interval doesn't bracket a zero.\");\n+        }\n+        double x2 = x0;\n+        double y2 = y0;\n+        double oldDelta = x2 - x1;\n+        int i = 0;\n+        while (i < maximalIterationCount) {\n+            if (Math.abs(y2) < Math.abs(y1)) {\n+                x0 = x1;\n+                x1 = x2;\n+                x2 = x0;\n+                y0 = y1;\n+                y1 = y2;\n+                y2 = y0;\n+            }\n+            if (Math.abs(y1) <= functionValueAccuracy) {\n+                setResult(x1, i);\n+                return result;\n+            }\n+            if (Math.abs(oldDelta) <\n+                Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy)) {\n+                setResult(x1, i);\n+                return result;\n+            }\n+            double delta;\n+            if (Math.abs(y1) > Math.abs(y0)) {\n+                // Function value increased in last iteration. Force bisection.\n+                delta = 0.5 * oldDelta;\n+            } else {\n+                delta = (x0 - x1) / (1 - y0 / y1);\n+                if (delta / oldDelta > 1) {\n+                    // New approximation falls outside bracket.\n+                    // Fall back to bisection.\n+                    delta = 0.5 * oldDelta;\n+                }\n+            }\n+            x0 = x1;\n+            y0 = y1;\n+            x1 = x1 + delta;\n+            y1 = f.value(x1);\n+            if ((y1 > 0) == (y2 > 0)) {\n+                // New bracket is (x0,x1).                    \n+                x2 = x0;\n+                y2 = y0;\n+            }\n+            oldDelta = x2 - x1;\n+            i++;\n+        }\n+        throw new MathException(\"Maximal iteration number exceeded\");\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/SinFunction.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ * Auxillary class for testing solvers.\n+ *\n+ * The function is extraordinarily well behaved around zero roots: it\n+ * has an inflection point there (second order derivative is zero),\n+ * which means linear approximation (Regula Falsi) will converge\n+ * quadratically.\n+ * \n+ * @author pietsch at apache.org\n+ *\n+ */\n+public class SinFunction implements UnivariateRealFunction {\n+\n+    /* Evaluate sinus fuction.\n+     * @see org.apache.commons.math.UnivariateRealFunction#value(double)\n+     */\n+    public double value(double x) throws MathException {\n+        return Math.sin(x);\n+    }\n+\n+    /* First derivative of sinus function\n+     * @see org.apache.commons.math.UnivariateRealFunction#firstDerivative(double)\n+     */\n+    public double firstDerivative(double x) throws MathException {\n+        return Math.cos(x);\n+    }\n+\n+    /* Second derivative of sinus function.\n+     * Unsupported.\n+     * @see org.apache.commons.math.UnivariateRealFunction#secondDerivative(double)\n+     */\n+    public double secondDerivative(double x) throws MathException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/SplineInterpolator.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+/**\n+ * Computes a natural spline interpolation for the data set.\n+ *\n+ * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:17 $\n+ *\n+ */\n+public class SplineInterpolator implements UnivariateRealInterpolator {\n+    /** the natural spline coefficients. */\n+    private double[][] c = null;\n+\n+    /**\n+     * Computes an interpolating function for the data set.\n+     * @param xval the arguments for the interpolation points\n+     * @param yval the values for the interpolation points\n+     * @return a function which interpolates the data set\n+     */\n+    public UnivariateRealFunction interpolate(double[] xval, double[] yval) {\n+        if (xval.length != yval.length) {\n+            throw new IllegalArgumentException(\"Dataset arrays must have same length.\");\n+        }\n+\n+        if (c == null) {\n+            // Number of intervals. The number of data points is N+1.\n+            int n = xval.length - 1;\n+            // Check whether the xval vector has ascending values.\n+            // Separation should be checked too (not implemented: which criteria?).\n+            for (int i = 0; i < n; i++) {\n+                if (xval[i] >= xval[i + 1]) {\n+                    throw new IllegalArgumentException(\"Dataset must specify sorted, ascending x values.\");\n+                }\n+            }\n+            // Vectors for the equation system. There are n-1 equations for the unknowns s[i] (1<=i<=N-1),\n+            // which are second order derivatives for the spline at xval[i]. At the end points, s[0]=s[N]=0.\n+            // Vectors are offset by -1, except the lower diagonal vector which is offset by -2. Layout:\n+            // d[0]*s[1]+u[0]*s[2]                                           = b[0]\n+            // l[0]*s[1]+d[1]*s[2]+u[1]*s[3]                                 = b[1]\n+            //           l[1]*s[2]+d[2]*s[3]+u[2]*s[4]                       = b[2]\n+            //                           ...\n+            //                     l[N-4]*s[N-3]+d[N-3]*s[N-2]+u[N-3]*s[N-1] = b[N-3]\n+            //                                   l[N-3]*s[N-2]+d[N-2]*s[N-1] = b[N-2]\n+            // Vector b is the right hand side (RHS) of the system.\n+            double b[] = new double[n - 1];\n+            // Vector d is diagonal of the matrix and also holds the computed solution.\n+            double d[] = new double[n - 1];\n+            // Setup right hand side and diagonal.\n+            double dquot = (yval[1] - yval[0]) / (xval[1] - xval[0]);\n+            for (int i = 0; i < n - 1; i++) {\n+                // TODO avoid recomputing the term\n+                //    (yval[i + 2] - yval[i + 1]) / (xval[i + 2] - xval[i + 1])\n+                // take it from the previous loop pass. Note: the interesting part of performance\n+                // loss is the range check in the array access, not the computation itself.\n+                double dquotNext = \n+                    (yval[i + 2] - yval[i + 1]) / (xval[i + 2] - xval[i + 1]);\n+                b[i] = 6.0 * (dquotNext - dquot);\n+                d[i] = 2.0 * (xval[i + 2] - xval[i]);\n+                dquot = dquotNext;\n+            }\n+            // u[] and l[] (for the upper and lower diagonal respectively) are not\n+            // really needed, the computation is folded into the system solving loops.\n+            // Keep this for documentation purposes:\n+            //double u[] = new double[n - 2]; // upper diagonal\n+            //double l[] = new double[n - 2]; // lower diagonal\n+            // Set up upper and lower diagonal. Keep the offsets in mind.\n+            //for (int i = 0; i < n - 2; i++) {\n+            //  u[i] = xval[i + 2] - xval[i + 1];\n+            //  l[i] = xval[i + 2] - xval[i + 1];\n+            //}\n+            // Solve the system: forward pass.\n+            for (int i = 0; i < n - 2; i++) {\n+                double delta = xval[i + 2] - xval[i + 1];\n+                double deltaquot = delta / d[i];\n+                d[i + 1] -= delta * deltaquot;\n+                b[i + 1] -= b[i] * deltaquot;\n+            }\n+            // Solve the system: backward pass.\n+            d[n - 2] = b[n - 2] / d[n - 2];\n+            for (int i = n - 3; i >= 0; i--) {\n+                d[i] = (b[i] - (xval[i + 2] - xval[i + 1]) * d[i + 1]) / d[i];\n+            }\n+            // Compute coefficients as usual polynomial coefficients.\n+            // Not the best with respect to roundoff on evaluation, but simple.\n+            c = new double[n][4];\n+            double delta = xval[1] - xval[0];\n+            c[0][3] = d[0] / delta / 6.0;\n+            c[0][2] = 0.0;\n+            c[0][1] = (yval[1] - yval[0]) / delta - d[0] * delta / 6.0;\n+            for (int i = 1; i < n - 2; i++) {\n+                delta = xval[i + 1] - xval[i];\n+                c[i][3] = (d[i] - d[i - 1]) / delta / 6.0;\n+                c[i][2] = d[i - 1] / 2.0;\n+                c[i][1] =\n+                    (yval[i + 1] - yval[i]) / delta -\n+                        (d[i] / 2.0 - d[i - 1]) * delta / 3.0;\n+            }\n+            delta = (xval[n] - xval[n - 1]);\n+            c[n - 1][3] = -d[n - 2] / delta / 6.0;\n+            c[n - 1][2] = d[n - 2] / 2.0;\n+            c[n - 1][1] =\n+                (yval[n] - yval[n - 1]) / delta - d[n - 2] * delta / 3.0;\n+            for (int i = 0; i < n; i++) {\n+                c[i][0] = yval[i];\n+            }\n+        }\n+\n+        // TODO: copy xval, unless copied in CubicSplineFunction constructor\n+        return new CubicSplineFunction(xval, c);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateFunction.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+/**\n+ * @version $Revision: 1.4 $ $Date: 2003/11/14 22:22:17 $\n+ */\n+public interface UnivariateFunction {\n+    // TODO: More documentation\n+\n+    /**\n+     * \n+     */\n+    double evaluate(double x);\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ * Provide an interface univariate real functions.\n+ * The object may held temporary data which is shared between calculations\n+ * of the value and the derivatives for the same argument. It is not guaranteed\n+ * that derivatives are evaluated after the value, the evaluation algorithm\n+ * should throw an InvalidStateException if it can't cope with this.\n+ *  \n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $\n+ */\n+public interface UnivariateRealFunction {\n+    /**\n+     * Compute the value for the function.\n+     * @param x the point for which the function value should be computed\n+     * @return the value\n+     * @throws MathException if the function couldn't be computed due to\n+     *  missing additional data or other environmental problems.\n+     */\n+    public double value(double x) throws MathException;\n+\n+    /**\n+     * Compute the value for the first derivative of the function.\n+     * It is recommended to provide this method only if the first derivative is\n+     * analytical. Numerical derivatives may be acceptable in some cases.\n+     * An implementation should throw an UnsupportedOperationException if\n+     * this method is not implemented.\n+     * @param x the point for which the first derivative should be computed\n+     * @return the value\n+     * @throws MathException if the derivative couldn't be computed.\n+     */\n+    public double firstDerivative(double x) throws MathException;\n+\n+    /**\n+     * Compute the value for the second derivative of the function.\n+     * It is recommended to provide this method only if the second derivative is\n+     * analytical. Numerical derivatives may be acceptable in some cases.\n+     * An implementation should throw an UnsupportedOperationException if\n+     * this method is not implemented.\n+     * @param x the point for which the first derivative should be computed\n+     * @return the value\n+     * @throws MathException if the second derivative couldn't be computed.\n+     */\n+    public double secondDerivative(double x) throws MathException;\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ * Interface for interpolating a data set.\n+ *  \n+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:17 $\n+ */\n+public interface UnivariateRealInterpolator {\n+\n+    /**\n+     * Computes an interpolating function for the data set.\n+     * @param xval the arguments for the interpolation points\n+     * @param yval the values for the interpolation points\n+     * @return a function which interpolates the data set\n+     * @throws MathException if arguments violate assumptions made by the\n+     *         interpolationg algorithm\n+     */\n+    public UnivariateRealFunction interpolate(double xval[], double yval[])\n+        throws MathException;\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ * Provide an interface to algorithms for solving for zeros of real univariate\n+ * functions.\n+ * An implementation will only search for one zero in the given interval.\n+ *  \n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $\n+ */\n+public interface UnivariateRealSolver {\n+\n+    /**\n+     * Set the upper limit for the number of iterations.\n+     * \n+     * Usually a high iteration count indicates convergence problems. However,\n+     * the \"reasonable value\" varies widely for different solvers, users are\n+     * advised to use the default value supplied by the solver.\n+     *  \n+     * An exception will be thrown if the number is exceeded.\n+     *  \n+     * @param count maximum number of iterations\n+     */\n+    public void setMaximalIterationCount(int count);\n+\n+    /**\n+     * Get the upper limit for the number of iterations.\n+     * \n+     * @return the actual upper limit\n+     */\n+    public int getMaximalIterationCount();\n+\n+    /**\n+     * Reset the upper limit for the number of iterations to the default.\n+     * \n+     * The default value is supplied by the solver implementation.\n+     * \n+     * @see #setMaximalIterationCount(int)\n+     */\n+    public void resetMaximalIterationCount();\n+\n+    /**\n+     * Set the absolute accuracy.\n+     * \n+     * The default is usually choosen so taht roots in the interval\n+     * -10..-0.1 and +0.1..+10 can be found wit a reasonable accuracy. If the\n+     * expected absolute value of your roots is of much smaller magnitude, set\n+     * this to a smaller value.\n+     * \n+     * Solvers are advised to do a plausibility check with the relative\n+     * accuracy, but clients should not rely on this.\n+     *  \n+     * @param accuracy the accuracy.\n+     * @throws MathException if the accuracy can't be achieved by the solver or\n+     *         is otherwise deemed unreasonable. \n+     */\n+    public void setAbsoluteAccuracy(double accuracy) throws MathException;\n+\n+    /**\n+     * Get the actual absolute accuracy.\n+     * \n+     * @return the accuracy\n+     */\n+    public double getAbsoluteAccuracy();\n+\n+    /**\n+     * Reset the absolute accuracy to the default.\n+     * \n+     * The default value is provided by the solver implementation.\n+     */\n+    public void resetAbsoluteAccuracy();\n+\n+    /**\n+     * Set the relative accuracy.\n+     * \n+     * This is used to stop iterations if the absolute accuracy can't be\n+     * achieved due to large values or short mantissa length.\n+     * \n+     * If this should be the primary criterium for convergence rather then a\n+     * safety measure, set the absolute accuracy to a ridiculously small value,\n+     * like 1E-1000.\n+     * \n+     * @param accuracy the relative accuracy.\n+     * @throws MathException if the accuracy can't be achieved by the solver or\n+     *         is otherwise deemed unreasonable. \n+     */\n+    public void setRelativeAccuracy(double accuracy) throws MathException;\n+\n+    /**\n+     * Get the actual relative accuracy.\n+     * @return the accuracy\n+     */\n+    public double getRelativeAccuracy();\n+\n+    /**\n+     * Reset the relative accuracy to the default.\n+     * The default value is provided by the solver implementation.\n+     */\n+    public void resetRelativeAccuracy();\n+\n+    /**\n+     * Set the function value accuracy.\n+     * \n+     * This is used to determine whan an evaluated function value or some other\n+     * value which is used as divisor is zero.\n+     * \n+     * This is a safety guard and it shouldn't be necesary to change this in\n+     * general.\n+     * \n+     * @param accuracy the accuracy.\n+     * @throws MathException if the accuracy can't be achieved by the solver or\n+     *         is otherwise deemed unreasonable. \n+     */\n+    public void setFunctionValueAccuracy(double accuracy) throws MathException;\n+\n+    /**\n+     * Get the actual function value accuracy.\n+     * @return the accuracy\n+     */\n+    public double getFunctionValueAccuracy();\n+\n+    /**\n+     * Reset the actual function accuracy to the default.\n+     * The default value is provided by the solver implementation.\n+     */\n+    public void resetFunctionValueAccuracy();\n+\n+    /**\n+     * Solve for a zero root in the given interval.\n+     * A solver may require that the interval brackets a single zero root.\n+     * @param min the lower bound for the interval.\n+     * @param max the upper bound for the interval.\n+     * @return a value where the function is zero\n+     * @throws MathException if the iteration count was exceeded or the\n+     *  solver detects convergence problems otherwise.\n+     */\n+    public double solve(double min, double max) throws MathException;\n+\n+    /**\n+     * Solve for a zero in the given interval, start at startValue.\n+     * A solver may require that the interval brackets a single zero root.\n+     * @param min the lower bound for the interval.\n+     * @param max the upper bound for the interval.\n+     * @param startValue the start value to use\n+     * @return a value where the function is zero\n+     * @throws MathException if the iteration count was exceeded or the\n+     *  solver detects convergence problems otherwise.\n+     */\n+    public double solve(double min, double max, double startValue)\n+        throws MathException;\n+\n+    /**\n+     * Get the result of the last run of the solver.\n+     * @return the last result.\n+     * @throws MathException if there is no result available, either\n+     * because no result was yet computed or the last attempt failed.\n+     */\n+    public double getResult() throws MathException;\n+\n+    /**\n+     * Get the number of iterations in the last run of the solver.\n+     * This is mainly meant for testing purposes. It may occasionally\n+     * help track down performance problems: if the iteration count\n+     * is notoriously high, check whether the function is evaluated\n+     * properly, and whether another solver is more amenable to the\n+     * problem.\n+     * @return the last iteration count.\n+     * @throws MathException if there is no result available, either\n+     * because no result was yet computed or the last attempt failed.\n+     */\n+    public int getIterationCount() throws MathException;\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+import org.apache.commons.discovery.tools.DiscoverClass;\n+\n+/**\n+ * A factory to easily get a default solver and some convenience\n+ * functions.\n+ * Because solvers are easily reusable, the factory does not\n+ * store configuration data and creates preconfigured solvers\n+ * (this may be controversial, because the configuration data\n+ * may also be used for the default solver used by the static\n+ * solve() method). \n+ * @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:17 $\n+ */\n+public abstract class UnivariateRealSolverFactory {\n+    /**\n+     * Default constructor.\n+     */\n+    protected UnivariateRealSolverFactory() {\n+    }\n+\n+    /**\n+     * Create a new factory.\n+     * @return a new factory.\n+     */\n+    public static UnivariateRealSolverFactory newInstance() {\n+        UnivariateRealSolverFactory factory = null;\n+        try {\n+            DiscoverClass dc = new DiscoverClass();\n+            factory = (UnivariateRealSolverFactory) dc.newInstance(\n+                UnivariateRealSolverFactory.class,\n+                \"org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl\");\n+        } catch(Exception ex) {\n+            // ignore as default implementation will be used.\n+        }\n+        return factory;\n+    }\n+    \n+    /**\n+     * Create a new {@link UnivariateRealSolver} for the given function.  The\n+     * actual solver returned is determined by the underlying factory.\n+     * @param f the function.\n+     * @return the new solver.\n+     */\n+    public abstract UnivariateRealSolver newDefaultSolver(\n+        UnivariateRealFunction f);\n+    \n+    /**\n+     * Create a new {@link UnivariateRealSolver} for the given function.  The\n+     * solver is an implementation of the bisection method.\n+     * @param f the function.\n+     * @return the new solver.\n+     */\n+    public abstract UnivariateRealSolver newBisectionSolver(\n+        UnivariateRealFunction f);\n+    \n+    /**\n+     * Create a new {@link UnivariateRealSolver} for the given function.  The\n+     * solver is an implementation of the Brent method.\n+     * @param f the function.\n+     * @return the new solver.\n+     */\n+    public abstract UnivariateRealSolver newBrentSolver(\n+        UnivariateRealFunction f);\n+    \n+    /**\n+     * Create a new {@link UnivariateRealSolver} for the given function.  The\n+     * solver is an implementation of the secant method.\n+     * @param f the function.\n+     * @return the new solver.\n+     */\n+    public abstract UnivariateRealSolver newSecantSolver(\n+        UnivariateRealFunction f);\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+\n+/**\n+ * A factory to easily get a default solver and some convenience\n+ * functions.\n+ * Because solvers are easily reusable, the factory does not\n+ * store configuration data and creates preconfigured solvers\n+ * (this may be controversial, because the configuration data\n+ * may also be used for the default solver used by the static\n+ * solve() method). \n+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:18 $\n+ */\n+public class UnivariateRealSolverFactoryImpl\n+    extends UnivariateRealSolverFactory {\n+        \n+    /**\n+     * Default constructor.\n+     */\n+    public UnivariateRealSolverFactoryImpl() {\n+    }\n+\n+    /**\n+     * Create a new {@link UnivariateRealSolver} for the given function.  The\n+     * actual solver returned is determined by the underlying factory.\n+     * \n+     * This factory returns a {@link BrentSolver} instance.\n+     *\n+     * @param f the function.\n+     * @return the new solver.\n+     */\n+    public UnivariateRealSolver newDefaultSolver(UnivariateRealFunction f) {\n+        return newBrentSolver(f);\n+    }\n+    \n+    /**\n+     * Create a new {@link UnivariateRealSolver} for the given function.  The\n+     * solver is an implementation of the bisection method.\n+     * @param f the function.\n+     * @return the new solver.\n+     */\n+    public UnivariateRealSolver newBisectionSolver(UnivariateRealFunction f) {\n+        return new BisectionSolver(f);\n+    }\n+\n+    /**\n+     * Create a new {@link UnivariateRealSolver} for the given function.  The\n+     * solver is an implementation of the Brent method.\n+     * @param f the function.\n+     * @return the new solver.\n+     */\n+    public UnivariateRealSolver newBrentSolver(UnivariateRealFunction f) {\n+        return new BrentSolver(f);\n+    }\n+\n+    /**\n+     * Create a new {@link UnivariateRealSolver} for the given function.  The\n+     * solver is an implementation of the secant method.\n+     * @param f the function.\n+     * @return the new solver.\n+     */\n+    public UnivariateRealSolver newSecantSolver(UnivariateRealFunction f) {\n+        return new SecantSolver(f);\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.analysis;\n+\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ * Provide a default implementation for several functions useful to generic\n+ * solvers.\n+ *  \n+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:17 $\n+ */\n+public abstract class UnivariateRealSolverImpl\n+    implements UnivariateRealSolver {\n+\n+    /** Maximum absolute error. */\n+    protected double absoluteAccuracy;\n+\n+    /** Maximum relative error. */\n+    protected double relativeAccuracy;\n+\n+    /** Maximum error of function. */\n+    protected double functionValueAccuracy;\n+\n+    /** Maximum number of iterations. */\n+    protected int maximalIterationCount;\n+\n+    /** Default maximum absolute error. */\n+    protected double defaultAbsoluteAccuracy;\n+\n+    /** Default maximum relative error. */\n+    protected double defaultRelativeAccuracy;\n+\n+    /** Default maximum error of function. */\n+    protected double defaultFunctionValueAccuracy;\n+\n+    /** Default maximum number of iterations. */\n+    protected int defaultMaximalIterationCount;\n+\n+    /** Indicates where a root has been computed. */\n+    protected boolean resultComputed = false;\n+\n+    /** The last computed root. */\n+    protected double result;\n+\n+    // Mainly for test framework.\n+    /** The last iteration count. */\n+    protected int iterationCount;\n+\n+    /** The function to solve. */\n+    protected UnivariateRealFunction f;\n+\n+    /**\n+     * Construct a solver with given iteration count and accuracy.\n+     * @param f the function to solve.\n+     * @param defaultAbsoluteAccuracy maximum absolue error.\n+     * @param defaultMaximalIterationCount maximum number of iterations.\n+     */\n+    protected UnivariateRealSolverImpl(\n+        UnivariateRealFunction f,\n+        int defaultMaximalIterationCount,\n+        double defaultAbsoluteAccuracy) {\n+        \n+        super();\n+        \n+        this.f = f;\n+        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;\n+        this.defaultRelativeAccuracy = 1E-14;\n+        this.defaultFunctionValueAccuracy = 1E-15;\n+        this.absoluteAccuracy = defaultAbsoluteAccuracy;\n+        this.relativeAccuracy = defaultRelativeAccuracy;\n+        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n+        this.defaultMaximalIterationCount = defaultMaximalIterationCount;\n+        this.maximalIterationCount = defaultMaximalIterationCount;\n+    }\n+\n+    /**\n+     * Access the last computed root.\n+     * @return the last computed root.\n+     * @throws MathException if no root has been computed.\n+     */\n+    public double getResult() throws MathException {\n+        if (resultComputed) {\n+            return result;\n+        } else {\n+            // TODO: could this be an IllegalStateException instead?\n+            throw new MathException(\"No result available\");\n+        }\n+    }\n+\n+    /**\n+     * Access the last iteration count.\n+     * @return the last iteration count.\n+     * @throws MathException if no root has been computed.\n+     *  \n+     */\n+    public int getIterationCount() throws MathException {\n+        if (resultComputed) {\n+            return iterationCount;\n+        } else {\n+            // TODO: could this be an IllegalStateException instead?\n+            throw new MathException(\"No result available\");\n+        }\n+    }\n+\n+    /**\n+     * Convenience function for implementations.\n+     * @param result the result to set\n+     * @param iterationCount the iteration count to set\n+     */\n+    protected final void setResult(double result, int iterationCount) {\n+        this.result = result;\n+        this.iterationCount = iterationCount;\n+        this.resultComputed = true;\n+    }\n+\n+    /**\n+     * Convenience function for implementations.\n+     */\n+    protected final void clearResult() {\n+        this.resultComputed = false;\n+    }\n+\n+    /**\n+     * Set the absolute accuracy.\n+     * \n+     * @param accuracy the accuracy.\n+     * @throws MathException if the accuracy can't be achieved by the solver or\n+     *         is otherwise deemed unreasonable. \n+     */\n+    public void setAbsoluteAccuracy(double accuracy)\n+        throws MathException {\n+        absoluteAccuracy = accuracy;\n+    }\n+\n+    /**\n+     * Get the actual absolute accuracy.\n+     * \n+     * @return the accuracy\n+     */\n+    public double getAbsoluteAccuracy() {\n+        return absoluteAccuracy;\n+    }\n+\n+    /**\n+     * Reset the absolute accuracy to the default.\n+     */\n+    public void resetAbsoluteAccuracy() {\n+        absoluteAccuracy = defaultAbsoluteAccuracy;\n+    }\n+\n+    /**\n+     * Set the upper limit for the number of iterations.\n+     * \n+     * @param count maximum number of iterations\n+     */\n+    public void setMaximalIterationCount(int count) {\n+        maximalIterationCount = count;\n+    }\n+\n+    /**\n+     * Get the upper limit for the number of iterations.\n+     * \n+     * @return the actual upper limit\n+     */\n+    public int getMaximalIterationCount() {\n+        return maximalIterationCount;\n+    }\n+\n+    /**\n+     * Reset the upper limit for the number of iterations to the default.\n+     */\n+    public void resetMaximalIterationCount() {\n+        maximalIterationCount = defaultMaximalIterationCount;\n+    }\n+\n+    /**\n+     * Set the relative accuracy.\n+     * \n+     * @param accuracy the relative accuracy.\n+     * @throws MathException if the accuracy can't be achieved by the solver or\n+     *         is otherwise deemed unreasonable. \n+     */\n+    public void setRelativeAccuracy(double accuracy) throws MathException {\n+        relativeAccuracy = accuracy;\n+    }\n+\n+    /**\n+     * Get the actual relative accuracy.\n+     * @return the accuracy\n+     */\n+    public double getRelativeAccuracy() {\n+        return relativeAccuracy;\n+    }\n+\n+    /**\n+     * Reset the relative accuracy to the default.\n+     */\n+    public void resetRelativeAccuracy() {\n+        relativeAccuracy = defaultRelativeAccuracy;\n+    }\n+\n+    /**\n+     * Set the function value accuracy.\n+     * \n+     * @param accuracy the accuracy.\n+     * @throws MathException if the accuracy can't be achieved by the solver or\n+     *         is otherwise deemed unreasonable. \n+     */\n+    public void setFunctionValueAccuracy(double accuracy)\n+        throws MathException {\n+        functionValueAccuracy = accuracy;\n+    }\n+\n+    /**\n+     * Get the actual function value accuracy.\n+     * @return the accuracy\n+     */\n+    public double getFunctionValueAccuracy() {\n+        return functionValueAccuracy;\n+    }\n+\n+    /**\n+     * Reset the actual function accuracy to the default.\n+     */\n+    public void resetFunctionValueAccuracy() {\n+        functionValueAccuracy = defaultFunctionValueAccuracy;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ * Utility routines for {@link UnivariateRealSolver} objects.\n+ * @version $Revision: 1.4 $ $Date: 2003/11/14 22:22:17 $\n+ */\n+public class UnivariateRealSolverUtil {\n+    /**\n+     * Default constructor.\n+     */\n+    private UnivariateRealSolverUtil() {\n+        super();\n+    }\n+\n+    /**\n+     * Method to solve for zeros of real univariate functions.  A\n+     * default solver is created and used for solving. \n+     * @param f the function.\n+     * @param x0 the lower bound for the interval.\n+     * @param x1 the upper bound for the interval.\n+     * @return a value where the function is zero.\n+     * @throws MathException if the iteration count was exceeded or the\n+     *         solver detects convergence problems otherwise.\n+     */\n+    public static double solve(UnivariateRealFunction f, double x0, double x1)\n+        throws MathException {\n+            \n+        return UnivariateRealSolverFactory.newInstance().newDefaultSolver(f)\n+            .solve(x0, x1);\n+    }\n+\n+    /**\n+     * Convience method to solve for zeros of real univariate functions.  A\n+     * default solver is created and used for solving. \n+     * @param f the function.\n+     * @param x0 the lower bound for the interval.\n+     * @param x1 the upper bound for the interval.\n+     * @param absoluteAccuracy the accuracy to be used by the solver.\n+     * @return a value where the function is zero.\n+     * @throws MathException if the iteration count was exceeded or the\n+     *         solver detects convergence problems otherwise.\n+     */\n+    public static double solve(\n+        UnivariateRealFunction f,\n+        double x0,\n+        double x1,\n+        double absoluteAccuracy)\n+        throws MathException {\n+            \n+        UnivariateRealSolver solver = UnivariateRealSolverFactory.newInstance()\n+            .newDefaultSolver(f);\n+        solver.setAbsoluteAccuracy(absoluteAccuracy);\n+        return solver.solve(x0, x1);\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ * Utility routines for {@link UnivariateRealSolver} objects.\n+ * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:18 $\n+ */\n+public class UnivariateRealSolverUtils {\n+    /**\n+     * Default constructor.\n+     */\n+    private UnivariateRealSolverUtils() {\n+        super();\n+    }\n+\n+    /**\n+     * Method to solve for zeros of real univariate functions.  A\n+     * default solver is created and used for solving. \n+     * @param f the function.\n+     * @param x0 the lower bound for the interval.\n+     * @param x1 the upper bound for the interval.\n+     * @return a value where the function is zero.\n+     * @throws MathException if the iteration count was exceeded or the\n+     *         solver detects convergence problems otherwise.\n+     */\n+    public static double solve(UnivariateRealFunction f, double x0, double x1)\n+        throws MathException\n+    {\n+        if(f == null){\n+            throw new IllegalArgumentException(\"f can not be null.\");    \n+        }\n+        \n+        return UnivariateRealSolverFactory.newInstance().newDefaultSolver(f)\n+            .solve(x0, x1);\n+    }\n+\n+    /**\n+     * Convience method to solve for zeros of real univariate functions.  A\n+     * default solver is created and used for solving. \n+     * @param f the function.\n+     * @param x0 the lower bound for the interval.\n+     * @param x1 the upper bound for the interval.\n+     * @param absoluteAccuracy the accuracy to be used by the solver.\n+     * @return a value where the function is zero.\n+     * @throws MathException if the iteration count was exceeded or the\n+     *         solver detects convergence problems otherwise.\n+     */\n+    public static double solve(\n+        UnivariateRealFunction f,\n+        double x0,\n+        double x1,\n+        double absoluteAccuracy)\n+        throws MathException\n+    {\n+        if(f == null){\n+            throw new IllegalArgumentException(\"f can not be null.\");    \n+        }\n+            \n+        UnivariateRealSolver solver = UnivariateRealSolverFactory.newInstance()\n+            .newDefaultSolver(f);\n+        solver.setAbsoluteAccuracy(absoluteAccuracy);\n+        return solver.solve(x0, x1);\n+    }\n+\n+    /**\n+     * For a function, f, this method returns two values, a and b that bracket\n+     * a root of f.  That is to say, there exists a value c between a and b\n+     * such that f(c) = 0.\n+     *\n+     * @param function the function\n+     * @param initial midpoint of the returned range.\n+     * @param lowerBound for numerical safety, a never is less than this value.\n+     * @param upperBound for numerical safety, b never is greater than this\n+     *                   value.\n+     * @return a two element array holding {a, b}.\n+     * @throws MathException if a root can not be bracketted.\n+     */\n+    public static double[] bracket(UnivariateRealFunction function,\n+                                   double initial,\n+                                   double lowerBound,\n+                                   double upperBound) throws MathException {\n+        return bracket( function, initial, lowerBound, upperBound,\n+            Integer.MAX_VALUE ) ;\n+    }\n+\n+    /**\n+     * For a function, f, this method returns two values, a and b that bracket\n+     * a root of f.  That is to say, there exists a value c between a and b\n+     * such that f(c) = 0.\n+     *\n+     * @param function the function\n+     * @param initial midpoint of the returned range.\n+     * @param lowerBound for numerical safety, a never is less than this value.\n+     * @param upperBound for numerical safety, b never is greater than this\n+     *                   value.\n+     * @param maximumIterations to guard against infinite looping, maximum\n+     *                          number of iterations to perform\n+     * @return a two element array holding {a, b}.\n+     * @throws MathException if a root can not be bracketted.\n+     */\n+    public static double[] bracket(UnivariateRealFunction function,\n+                                   double initial,\n+                                   double lowerBound,\n+                                   double upperBound,\n+                                   int maximumIterations) throws MathException {\n+        double a = initial;\n+        double b = initial;\n+        double fa;\n+        double fb;\n+        int numIterations = 0 ;\n+    \n+        do {\n+            a = Math.max(a - 1.0, lowerBound);\n+            b = Math.min(b + 1.0, upperBound);\n+            fa = function.value(a);\n+            fb = function.value(b);\n+            numIterations += 1 ;\n+        } while ( (fa * fb > 0.0) && ( numIterations < maximumIterations ) );\n+    \n+        return new double[]{a, b};\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/complex/Complex.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Geronimo\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Geronimo\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ * ====================================================================\n+ */\n+\n+package org.apache.commons.math.complex;\n+\n+/**\n+ * Reference:\n+ *   http://myweb.lmu.edu/dmsmith/ZMLIB.pdf\n+ * \n+ * @version $Revision: 1.3 $ $Date: 2003/11/14 22:22:22 $\n+ */\n+public class Complex {\n+\n+    /** The square root of -1. */    \n+    public static final Complex I = new Complex(0.0, 1.0);\n+    \n+    /** */\n+    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);\n+\n+    /** 1. */    \n+    public static final Complex ONE = new Complex(1.0, 0.0);\n+    \n+    /** The imaginary part. */\n+    protected double imaginary;\n+    \n+    /** The real part. */\n+    protected double real;\n+    \n+    /**\n+     * Create a complex number given the real and imaginary parts.\n+     * @param real the real part.\n+     * @param imaginary the imaginary part.\n+     */\n+    public Complex(double real, double imaginary) {\n+        super();\n+        this.real = real;\n+        this.imaginary = imaginary;\n+    }\n+\n+    /**\n+     * Return the absolute value of this complex number.\n+     * @return the absolute value.\n+     */\n+    public double abs() {\n+        if (isNaN()) {\n+            return Double.NaN;\n+        }\n+        return Math.sqrt(squareSum());       \n+    }\n+    \n+    /**\n+     * Return the sum of this complex number and the given complex number.\n+     * @param rhs the other complex number.\n+     * @return the complex number sum.\n+     */\n+    public Complex add(Complex rhs) {\n+        if (isNaN() || rhs.isNaN()) {\n+            return NaN;\n+        }\n+        \n+        return new Complex(real + rhs.getReal(),\n+            imaginary + rhs.getImaginary());\n+    }\n+    \n+    /**\n+     * Return the conjugate of this complex number.\n+     * @return the conjugate.\n+     */\n+    public Complex conjugate() {\n+        if (isNaN()) {\n+            return NaN;\n+        }\n+        \n+        return new Complex(real, -imaginary);\n+    }\n+    \n+    /**\n+     * Return the quotient of this complex number and the given complex number.\n+     * @param rhs the other complex number.\n+     * @return the complex number quotient.\n+     */\n+    public Complex divide(Complex rhs) {\n+        if (isNaN() || rhs.isNaN()) {\n+            return NaN;\n+        }\n+        \n+        if (Math.abs(rhs.getReal()) < Math.abs(rhs.getImaginary())) {\n+            double q = rhs.getReal() / rhs.getImaginary();\n+            double d = (rhs.getReal() * q) + rhs.getImaginary();\n+            return new Complex(((real * q) + imaginary) / d,\n+                ((imaginary * q) - real) / d);\n+        } else {\n+            double q = rhs.getImaginary() / rhs.getReal();\n+            double d = (rhs.getImaginary() * q) + rhs.getReal();\n+            return new Complex(((imaginary * q) + real) / d,\n+                (imaginary - (real * q)) / d);\n+        }\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public boolean equals(Object other) {\n+        boolean ret;\n+        \n+        if (this == other) { \n+            ret = true;\n+        } else if (other == null) {\n+            ret = false;\n+        } else {\n+            try {\n+                Complex rhs = (Complex)other;\n+                ret = (Double.doubleToRawLongBits(real) ==\n+                        Double.doubleToRawLongBits(rhs.getReal())) &&\n+                    (Double.doubleToRawLongBits(imaginary) ==\n+                        Double.doubleToRawLongBits(rhs.getImaginary())); \n+            } catch (ClassCastException ex) {\n+                // ignore exception\n+                ret = false;\n+            }\n+        }\n+        \n+        return ret;\n+    }\n+\n+    /**\n+     * Access the imaginary part.\n+     * @return the imaginary part.\n+     */\n+    public double getImaginary() {\n+        return imaginary;\n+    }\n+\n+    /**\n+     * Access the real part.\n+     * @return the real part.\n+     */\n+    public double getReal() {\n+        return real;\n+    }\n+    \n+    /**\n+     * Returns true if this complex number is the special Not-a-Number (NaN)\n+     * value.\n+     * @return true if the value represented by this object is NaN; false\n+     *         otherwise.\n+     */\n+    public boolean isNaN() {\n+        return Double.isNaN(real) || Double.isNaN(imaginary);        \n+    }\n+    \n+    /**\n+     * Return the product of this complex number and the given complex number.\n+     * @param rhs the other complex number.\n+     * @return the complex number product.\n+     */\n+    public Complex multiply(Complex rhs) {\n+        if (isNaN() || rhs.isNaN()) {\n+            return NaN;\n+        }\n+        \n+        double p = (real + imaginary) * (rhs.getReal() + rhs.getImaginary());\n+        double ac = real * rhs.getReal();\n+        double bd = imaginary * rhs.getImaginary();\n+        return new Complex(ac - bd, p - ac - bd);\n+    }\n+    \n+    /**\n+     * Return the additive inverse of this complex number.\n+     * @return the negation of this complex number.\n+     */\n+    public Complex negate() {\n+        if (isNaN()) {\n+            return NaN;\n+        }\n+        \n+        return new Complex(-real, -imaginary);\n+    }\n+    \n+    /**\n+     * Return the sum of the squared terms.\n+     * @return the square sum.\n+     */\n+    private double squareSum() {\n+        return real * real + imaginary * imaginary;\n+    }\n+    \n+    /**\n+     * Return the difference between this complex number and the given complex\n+     * number.\n+     * @param rhs the other complex number.\n+     * @return the complex number difference.\n+     */\n+    public Complex subtract(Complex rhs) {\n+        if (isNaN() || rhs.isNaN()) {\n+            return NaN;\n+        }\n+        \n+        return new Complex(real - rhs.getReal(),\n+            imaginary - rhs.getImaginary());\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/complex/ComplexMath.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Geronimo\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Geronimo\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ * ====================================================================\n+ */\n+\n+package org.apache.commons.math.complex;\n+\n+import org.apache.commons.math.util.MathUtils;\n+\n+/**\n+ * Reference:\n+ *   http://myweb.lmu.edu/dmsmith/ZMLIB.pdf\n+ * \n+ * @version $Revision: 1.3 $ $Date: 2003/11/14 22:22:22 $\n+ */\n+public class ComplexMath {\n+    \n+    /**\n+     * \n+     */\n+    private ComplexMath() {\n+        super();\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public static Complex acos(Complex z) {\n+        if (z.isNaN()) {\n+            return Complex.NaN;\n+        }\n+\n+        return Complex.I.negate().multiply(log(z.add(\n+            Complex.I.multiply(sqrt1z(z)))));       \n+    }\n+    \n+    /**\n+     * \n+     */\n+    public static Complex asin(Complex z) {\n+        if (z.isNaN()) {\n+            return Complex.NaN;\n+        }\n+\n+        return Complex.I.negate().multiply(log(sqrt1z(z).add(\n+            Complex.I.multiply(z))));       \n+    }\n+    \n+    /**\n+     * \n+     */\n+    public static Complex atan(Complex z) {\n+        if (z.isNaN()) {\n+            return Complex.NaN;\n+        }\n+        \n+        return Complex.I.multiply(\n+            log(Complex.I.add(z).divide(Complex.I.subtract(z))))\n+            .multiply(new Complex(2.0, 0.0));\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public static Complex cos(Complex z) {\n+        if (z.isNaN()) {\n+            return Complex.NaN;\n+        }\n+        \n+        double a = z.getReal();\n+        double b = z.getImaginary();\n+        \n+        return new Complex(Math.cos(a) * MathUtils.cosh(b),\n+            -Math.sin(a) * MathUtils.sinh(b));\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public static Complex cosh(Complex z) {\n+        if (z.isNaN()) {\n+            return Complex.NaN;\n+        }\n+        \n+        double a = z.getReal();\n+        double b = z.getImaginary();\n+        \n+        return new Complex(MathUtils.cosh(a) * Math.cos(b),\n+            MathUtils.sinh(a) * Math.sin(b));\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public static Complex exp(Complex z) {\n+        if (z.isNaN()) {\n+            return Complex.NaN;\n+        }\n+        \n+        double b = z.getImaginary();\n+        double expA = Math.exp(z.getReal());\n+        double sinB = Math.sin(b);\n+        double cosB = Math.cos(b);\n+        return new Complex(expA * cosB, expA * sinB);\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public static Complex log(Complex z) {\n+        if (z.isNaN()) {\n+            return Complex.NaN;\n+        }\n+\n+        return new Complex(Math.log(z.abs()),\n+            Math.atan2(z.getImaginary(), z.getReal()));        \n+    }\n+    \n+    /**\n+     * \n+     */\n+    public static Complex pow(Complex y, Complex x) {\n+        return exp(x.multiply(log(y)));\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public static Complex sin(Complex z) {\n+        if (z.isNaN()) {\n+            return Complex.NaN;\n+        }\n+        \n+        double a = z.getReal();\n+        double b = z.getImaginary();\n+        \n+        return new Complex(Math.sin(a) * MathUtils.cosh(b),\n+            Math.cos(a) * MathUtils.sinh(b));\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public static Complex sinh(Complex z) {\n+        if (z.isNaN()) {\n+            return Complex.NaN;\n+        }\n+        \n+        double a = z.getReal();\n+        double b = z.getImaginary();\n+        \n+        return new Complex(MathUtils.sinh(a) * Math.cos(b),\n+            MathUtils.cosh(a) * Math.sin(b));\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public static Complex sqrt(Complex z) {\n+        if (z.isNaN()) {\n+            return Complex.NaN;\n+        }\n+        \n+        double a = z.getReal();\n+        double b = z.getImaginary();\n+        \n+        double t = Math.sqrt((Math.abs(a) + z.abs()) / 2.0);\n+        if (a >= 0.0) {\n+            return new Complex(t, b / (2.0 * t));\n+        } else {\n+            double s = (b > 0.0 ? 1.0 : (b < 0.0 ? -1.0 : 0.0));\n+            return new Complex(Math.abs(z.getImaginary()) / (2.0 * t), s * t);\n+        }\n+    }\n+    \n+    /**\n+     * Returns the square root of 1 - z^2.\n+     * @return the square root of 1 - z^2.\n+     */\n+    public static Complex sqrt1z(Complex z) {\n+        return sqrt(Complex.ONE.subtract(z.multiply(z)));\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public static Complex tan(Complex z) {\n+        if (z.isNaN()) {\n+            return Complex.NaN;\n+        }\n+        \n+        double a2 = 2.0 * z.getReal();\n+        double b2 = 2.0 * z.getImaginary();\n+        double d = Math.cos(a2) + MathUtils.cosh(b2);\n+        \n+        return new Complex(Math.sin(a2) / d, MathUtils.sinh(b2) / 2);\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public static Complex tanh(Complex z) {\n+        if (z.isNaN()) {\n+            return Complex.NaN;\n+        }\n+        \n+        double a2 = 2.0 * z.getReal();\n+        double b2 = 2.0 * z.getImaginary();\n+        double d = MathUtils.cosh(a2) + Math.cos(b2);\n+        \n+        return new Complex(MathUtils.sinh(a2) / d, Math.sin(b2) / 2);\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+import org.apache.commons.math.MathException;\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.analysis.UnivariateRealSolverUtils;\n+\n+/**\n+ * Base class for various continuous distributions.  It provides default\n+ * implementations for some of the methods that do not vary from distribution\n+ * to distribution.\n+ *  \n+ * @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:19 $\n+ */\n+public abstract class AbstractContinuousDistribution\n+    implements ContinuousDistribution {\n+        \n+    /**\n+     * Default constructor.\n+     */\n+    protected AbstractContinuousDistribution() {\n+        super();\n+    }\n+\n+    /**\n+     * For this distribution, X, this method returns P(x0 &lt; X &lt; x1).  This\n+     * is accomplished by using the equality P(x0 &lt; X &lt; x1) =\n+     * P(X &lt; x1) - P(X &lt; x0).\n+     * \n+     * @param x0 the lower bound\n+     * @param x1 the upper bound\n+     * @return the cummulative probability. \n+     */\n+    public double cummulativeProbability(double x0, double x1) {\n+        return cummulativeProbability(x1) - cummulativeProbability(x0);\n+    }\n+    \n+    /**\n+     * For this distribution, X, this method returns the critical point x, such\n+     * that P(X &lt; x) = <code>p</code>.\n+     *\n+     * @param p the desired probability\n+     * @return x, such that P(X &lt; x) = <code>p</code>\n+     */\n+    public double inverseCummulativeProbability(final double p) {\n+        if (p < 0.0 || p > 1.0) {\n+            throw new IllegalArgumentException(\n+                \"p must be between 0.0 and 1.0, inclusive.\");\n+        }\n+        \n+        // by default, do simple root finding using bracketing and bisection.\n+        // subclasses can overide if there is a better method.\n+        UnivariateRealFunction rootFindingFunction =\n+            new UnivariateRealFunction() {\n+                \n+            public double value(double x) throws MathException {\n+                return cummulativeProbability(x) - p;\n+            }\n+\n+            public double firstDerivative(double x) throws MathException {\n+                return 0;\n+            }\n+\n+            public double secondDerivative(double x) throws MathException {\n+                return 0;\n+            }\n+        };\n+        \n+        try {\n+            // bracket root\n+            double[] bracket = UnivariateRealSolverUtils.bracket(rootFindingFunction,\n+                getInitialDomain(p), getDomainLowerBound(p),\n+                getDomainUpperBound(p));\n+            \n+            // find root\n+            double root = UnivariateRealSolverUtils.solve(\n+                rootFindingFunction, bracket[0], bracket[1]);\n+        \n+            return root;\n+        } catch (MathException ex) {\n+            // this should never happen.\n+            return Double.NaN;\n+        }\n+    }\n+    \n+    /**\n+     * Access the initial domain value, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return initial domain value\n+     */\n+    protected abstract double getInitialDomain(double p);\n+    \n+    /**\n+     * Access the domain value lower bound, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value lower bound, i.e.\n+     *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n+     */\n+    protected abstract double getDomainLowerBound(double p);\n+    \n+    /**\n+     * Access the domain value upper bound, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value upper bound, i.e.\n+     *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n+     */\n+    protected abstract double getDomainUpperBound(double p);\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+\n+/**\n+ * Base class for various discrete distributions.  It provides default\n+ * implementations for some of the methods that do not vary from distribution\n+ * to distribution.\n+ *  \n+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:19 $\n+ */\n+public abstract class AbstractDiscreteDistribution\n+    implements DiscreteDistribution {\n+        \n+    /**\n+     * Default constructor.\n+     */\n+    protected AbstractDiscreteDistribution() {\n+        super();\n+    }\n+    \n+    /**\n+     * For this disbution, X, this method returns P(x0 &le; X &le; x1).\n+     * @param x0 the inclusive, lower bound\n+     * @param x1 the inclusive, upper bound\n+     * @return the cummulative probability. \n+     */\n+    public double cummulativeProbability(int x0, int x1) {\n+        return cummulativeProbability(x1) - \n+            cummulativeProbability(x0 - 1);\n+    }\n+    \n+    /**\n+     * For this distribution, X, this method returns the critical point x, such\n+     * that P(X &le; x) &le; <code>p</code>.\n+     *\n+     * @param p the desired probability\n+     * @return x, such that P(X &lt; x) = <code>p</code>\n+     */\n+    public int inverseCummulativeProbability(final double p) {\n+        if (p < 0.0 || p > 1.0) {\n+            throw new IllegalArgumentException(\n+                \"p must be between 0.0 and 1.0, inclusive.\");\n+        }\n+        \n+        // by default, do simple bisection.\n+        // subclasses can override if there is a better method.\n+        int x0 = getDomainLowerBound(p);\n+        int x1 = getDomainUpperBound(p);\n+        double pm;\n+        while (x0 < x1) {\n+            int xm = x0 + (x1 - x0) / 2;\n+            pm = cummulativeProbability(xm);\n+            if (pm > p) {\n+                // update x1\n+                if (xm == x1) {\n+                    // this can happen with integer division\n+                    // simply decrement x1\n+                    --x1;\n+                } else {\n+                    // update x1 normally\n+                    x1 = xm;\n+                }\n+            } else {\n+                // update x0\n+                if (xm == x0) {\n+                    // this can happen with integer division\n+                    // simply increment x0\n+                    ++x0;\n+                } else {\n+                    // update x0 normally\n+                    x0 = xm;\n+                }\n+            }\n+        }\n+        \n+        // insure x0 is the correct critical point\n+        pm = cummulativeProbability(x0);\n+        while (pm > p) {\n+            --x0;\n+            pm = cummulativeProbability(x0);\n+        }\n+        \n+        return x0;        \n+    }\n+    \n+    /**\n+     * Access the domain value lower bound, based on <code>p</code>, used to\n+     * bracket a PDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value lower bound, i.e.\n+     *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n+     */\n+    protected abstract int getDomainLowerBound(double p);\n+    \n+    /**\n+     * Access the domain value upper bound, based on <code>p</code>, used to\n+     * bracket a PDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value upper bound, i.e.\n+     *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n+     */\n+    protected abstract int getDomainUpperBound(double p);\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/BinomialDistribution.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+/**\n+ * The Binomial Distribution.\n+ * \n+ * Instances of BinomialDistribution objects should be created using\n+ * {@link DistributionFactory#createBinomialDistribution(int, double)}.\n+ * \n+ * References:\n+ * <ul>\n+ * <li><a href=\"http://mathworld.wolfram.com/BinomialDistribution.html\">\n+ * Binomial Distribution</a></li>\n+ * </ul>\n+ * \n+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:19 $\n+ */\n+public interface BinomialDistribution extends DiscreteDistribution {\n+    /**\n+     * Access the number of trials for this distribution.\n+     * @return the number of trials.\n+     */\n+    int getNumberOfTrials();\n+    \n+    /**\n+     * Access the probability of success for this distribution.\n+     * @return the probability of success.\n+     */\n+    double getProbabilityOfSuccess();\n+    \n+    /**\n+     * Change the number of trials for this distribution.\n+     * @param trials the new number of trials.\n+     */\n+    void setNumberOfTrials(int trials);\n+    \n+    /**\n+     * Change the probability of success for this distribution.\n+     * @param p the new probability of success.\n+     */\n+    void setProbabilityOfSuccess(double p);\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.commons.math.MathException;\n+import org.apache.commons.math.special.Beta;\n+import org.apache.commons.math.util.MathUtils;\n+\n+/**\n+ * The default implementation of {@link BinomialDistribution}.\n+ * \n+ * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:19 $\n+ */\n+public class BinomialDistributionImpl extends AbstractDiscreteDistribution\n+    implements BinomialDistribution {\n+\n+    /** The number of trials. */\n+    private int numberOfTrials;\n+    \n+    /** The probability of success. */\n+    private double probabilityOfSuccess;\n+    \n+    /**\n+     * Create a binomial distribution with the given number of trials and\n+     * probability of success.\n+     * @param trials the number of trials.\n+     * @param p the probability of success.\n+     */\n+    public BinomialDistributionImpl(int trials, double p) {\n+        super();\n+        setNumberOfTrials(trials);\n+        setProbabilityOfSuccess(p);\n+    }\n+    \n+    /**\n+     * Access the number of trials for this distribution.\n+     * @return the number of trials.\n+     */\n+    public int getNumberOfTrials() {\n+        return numberOfTrials;\n+    }\n+\n+    /**\n+     * Access the probability of success for this distribution.\n+     * @return the probability of success.\n+     */\n+    public double getProbabilityOfSuccess() {\n+        return probabilityOfSuccess;\n+    }\n+\n+    /**\n+     * Change the number of trials for this distribution.\n+     * @param trials the new number of trials.\n+     */\n+    public void setNumberOfTrials(int trials) {\n+        if (trials < 0) {\n+            throw new IllegalArgumentException(\n+                \"number of trials must be non-negative.\");\n+        }\n+        numberOfTrials = trials;\n+    }\n+\n+    /**\n+     * Change the probability of success for this distribution.\n+     * @param p the new probability of success.\n+     */\n+    public void setProbabilityOfSuccess(double p) {\n+        if (p < 0.0 || p > 1.0) {\n+            throw new IllegalArgumentException(\n+                \"probability of success must be between 0.0 and 1.0, inclusive.\");\n+        }\n+        probabilityOfSuccess = p;\n+    }\n+    \n+    /**\n+     * Access the domain value lower bound, based on <code>p</code>, used to\n+     * bracket a PDF root.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value lower bound, i.e.\n+     *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n+     */\n+    protected int getDomainLowerBound(double p) {\n+        return -1;\n+    }\n+\n+    /**\n+     * Access the domain value upper bound, based on <code>p</code>, used to\n+     * bracket a PDF root.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value upper bound, i.e.\n+     *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n+     */\n+    protected int getDomainUpperBound(double p) {\n+        return getNumberOfTrials();\n+    }\n+\n+    /**\n+     * For this disbution, X, this method returns P(X &le; x).\n+     * @param x the value at which the PDF is evaluated.\n+     * @return PDF for this distribution. \n+     */\n+    public double cummulativeProbability(int x) {\n+        double ret;\n+        if (x < 0) {\n+            ret = 0.0;\n+        } else if (x >= getNumberOfTrials()) {\n+            ret = 1.0;\n+        } else {\n+            try {\n+                ret = 1.0 - Beta.regularizedBeta(getProbabilityOfSuccess(),\n+                    x + 1.0, getNumberOfTrials() - x);\n+            } catch (MathException ex) {\n+                LogFactory.getLog(getClass()).error(\n+                    \"Failed to compute cummulative probability, returning NaN.\",\n+                    ex);\n+                ret = Double.NaN;\n+            }\n+        }\n+        return ret;\n+    }\n+\n+    /**\n+     * For this disbution, X, this method returns P(X = x).\n+     * @param x the value at which the PMF is evaluated.\n+     * @return PMF for this distribution. \n+     */\n+    public double probability(int x) {\n+        double ret;\n+        if (x < 0 || x > getNumberOfTrials()) {\n+            ret = 0.0;\n+        } else {\n+            ret = MathUtils.binomialCoefficientDouble(getNumberOfTrials(), x) *\n+                Math.pow(getProbabilityOfSuccess(), x) *\n+                Math.pow(1.0 - getProbabilityOfSuccess(),\n+                    getNumberOfTrials() - x);\n+        }\n+        return ret;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+/**\n+ * The Chi-Squared Distribution.\n+ * \n+ * Instances of ChiSquaredDistribution objects should be created using\n+ * {@link DistributionFactory#createChiSquareDistribution(double)}.\n+ * \n+ * References:\n+ * <ul>\n+ * <li><a href=\"http://mathworld.wolfram.com/Chi-SquaredDistribution.html\">\n+ * Chi-Squared Distribution</a></li>\n+ * </ul>\n+ * \n+ * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:19 $\n+ */\n+public interface ChiSquaredDistribution extends ContinuousDistribution {\n+    /**\n+     * Modify the degrees of freedom.\n+     * @param degreesOfFreedom the new degrees of freedom.\n+     */\n+    void setDegreesOfFreedom(double degreesOfFreedom);\n+    \n+    /**\n+     * Access the degrees of freedom.\n+     * @return the degrees of freedom.\n+     */\n+    double getDegreesOfFreedom();\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+/**\n+ * The default implementation of {@link ChiSquaredDistribution}\n+ * \n+ * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:19 $\n+ */\n+public class ChiSquaredDistributionImpl\n+    extends AbstractContinuousDistribution\n+    implements ChiSquaredDistribution {\n+    \n+    /** Internal Gamma distribution. */    \n+    private GammaDistribution gamma;\n+    \n+    /**\n+     * Create a Chi-Squared distribution with the given degrees of freedom.\n+     * @param degreesOfFreedom degrees of freedom.\n+     */\n+    public ChiSquaredDistributionImpl(double degreesOfFreedom) {\n+        super();\n+        setGamma(DistributionFactory.newInstance().createGammaDistribution(\n+            degreesOfFreedom / 2.0, 2.0));\n+    }\n+    \n+    /**\n+     * Modify the degrees of freedom.\n+     * @param degreesOfFreedom the new degrees of freedom.\n+     */\n+    public void setDegreesOfFreedom(double degreesOfFreedom) {\n+        getGamma().setAlpha(degreesOfFreedom / 2.0);\n+    }\n+        \n+    /**\n+     * Access the degrees of freedom.\n+     * @return the degrees of freedom.\n+     */\n+    public double getDegreesOfFreedom() {\n+        return getGamma().getAlpha() * 2.0;\n+    }\n+        \n+    /**\n+     * For this disbution, X, this method returns P(X &lt; x).\n+     * @param x the value at which the CDF is evaluated.\n+     * @return CDF for this distribution. \n+     */\n+    public double cummulativeProbability(double x) {\n+        return getGamma().cummulativeProbability(x);\n+    }\n+        \n+    /**\n+     * Access the domain value lower bound, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value lower bound, i.e.\n+     *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n+     */\n+    protected double getDomainLowerBound(double p) {\n+        return Double.MIN_VALUE * getGamma().getBeta();\n+    }\n+\n+    /**\n+     * Access the domain value upper bound, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value upper bound, i.e.\n+     *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n+     */\n+    protected double getDomainUpperBound(double p) {\n+        // NOTE: chi squared is skewed to the left\n+        // NOTE: therefore, P(X < &mu;) > .5\n+\n+        double ret;\n+\n+        if (p < .5) {\n+            // use mean\n+            ret = getDegreesOfFreedom();\n+        } else {\n+            // use max\n+            ret = Double.MAX_VALUE;\n+        }\n+        \n+        return ret;\n+    }\n+\n+    /**\n+     * Access the initial domain value, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return initial domain value\n+     */\n+    protected double getInitialDomain(double p) {\n+        // NOTE: chi squared is skewed to the left\n+        // NOTE: therefore, P(X < &mu;) > .5\n+        \n+        double ret;\n+\n+        if (p < .5) {\n+            // use 1/2 mean\n+            ret = getDegreesOfFreedom() * .5;\n+        } else {\n+            // use mean\n+            ret = getDegreesOfFreedom();\n+        }\n+        \n+        return ret;\n+    }\n+    \n+    /**\n+     * Modify the Gamma distribution.\n+     * @param gamma the new distribution.\n+     */\n+    private void setGamma(GammaDistribution gamma) {\n+        this.gamma = gamma;\n+    }\n+\n+    /**\n+     * Access the Gamma distribution.\n+     * @return the internal Gamma distribution.\n+     */\n+    private GammaDistribution getGamma() {\n+        return gamma;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/ContinuousDistribution.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+/**\n+ * Base interface for various continuous distributions.\n+ * \n+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:19 $\n+ */\n+public interface ContinuousDistribution {\n+    /**\n+     * For this disbution, X, this method returns P(X &lt; x).\n+     * @param x the value at which the CDF is evaluated.\n+     * @return CDF for this distribution. \n+     */\n+    double cummulativeProbability(double x);\n+\n+    /**\n+     * For this disbution, X, this method returns P(x0 &lt; X &lt; x1).\n+     * @param x0 the lower bound\n+     * @param x1 the upper bound\n+     * @return the cummulative probability. \n+     */\n+    double cummulativeProbability(double x0, double x1);\n+    \n+    /**\n+     * For this disbution, X, this method returns x such that P(X &lt; x) = p.\n+     * @param p the cummulative probability.\n+     * @return x. \n+     */\n+    double inverseCummulativeProbability(double p);\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/DiscreteDistribution.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+/**\n+ * Base interface for various discrete distributions.\n+ * \n+ * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:19 $\n+ */\n+public interface DiscreteDistribution {\n+    /**\n+     * For this disbution, X, this method returns P(X = x).\n+     * @param x the value at which the PMF is evaluated.\n+     * @return PMF for this distribution. \n+     */\n+    double probability(int x);\n+    \n+    /**\n+     * For this disbution, X, this method returns P(X &le; x).\n+     * @param x the value at which the PDF is evaluated.\n+     * @return PDF for this distribution. \n+     */\n+    double cummulativeProbability(int x);\n+\n+    /**\n+     * For this disbution, X, this method returns P(x0 &le; X &le; x1).\n+     * @param x0 the inclusive, lower bound\n+     * @param x1 the inclusive, upper bound\n+     * @return the cummulative probability. \n+     */\n+    double cummulativeProbability(int x0, int x1);\n+    \n+    /**\n+     * For this disbution, X, this method returns x such that P(X &le; x) <= p.\n+     * @param p the cummulative probability.\n+     * @return x. \n+     */\n+    int inverseCummulativeProbability(double p);\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.stat.distribution;\n+\n+import org.apache.commons.discovery.tools.DiscoverClass;\n+\n+/**\n+ * This factory provids the means to create common statistical distributions.\n+ * The following distributions are supported:\n+ * <ul>\n+ * <li>Binomial</li>\n+ * <li>Chi-Squared</li>\n+ * <li>Exponential</li>\n+ * <li>F</li>\n+ * <li>Gamma</li>\n+ * <li>Student's t</li>\n+ * </ul>\n+ * \n+ * Common usage:<pre>\n+ * DistributionFactory factory = DistributionFactory.newInstance();\n+ * \n+ * // create a Chi-Square distribution with 5 degrees of freedom.\n+ * ChiSquaredDistribution chi = factory.createChiSquareDistribution(5.0);\n+ * </pre>\n+ * \n+ * @version $Revision: 1.16 $ $Date: 2003/11/14 22:22:19 $\n+ */\n+public abstract class DistributionFactory {\n+    /**\n+     * Default constructor.\n+     */\n+    protected DistributionFactory() {\n+        super();\n+    }\n+    \n+    /**\n+     * Create an instance of a <code>DistributionFactory</code>\n+     * @return a new factory. \n+     */\n+    public static DistributionFactory newInstance() {\n+        DistributionFactory factory = null;\n+        try {\n+            DiscoverClass dc = new DiscoverClass();\n+            factory = (DistributionFactory) dc.newInstance(\n+                DistributionFactory.class,\n+                \"org.apache.commons.math.stat.distribution.DistributionFactoryImpl\");\n+        } catch(Exception ex) {\n+            // ignore as default implementation will be used.\n+        }\n+        return factory;\n+    }\n+\n+    /**\n+     * Create a binomial distribution with the given number of trials and\n+     * probability of success.\n+     * @param numberOfTrials the number of trials.\n+     * @param probabilityOfSuccess the probability of success.\n+     * @return a new binomial distribution.\n+     */\n+    public abstract BinomialDistribution createBinomialDistribution(\n+        int numberOfTrials, double probabilityOfSuccess);\n+        \n+    /**\n+     * Create a new chi-square distribution with the given degrees of freedom.\n+     * @param degreesOfFreedom degrees of freedom.\n+     * @return a new chi-square distribution.  \n+     */\n+    public abstract ChiSquaredDistribution createChiSquareDistribution(\n+        double degreesOfFreedom);\n+    \n+    /**\n+     * Create a new exponential distribution with the given degrees of freedom.\n+     * @param mean mean.\n+     * @return a new exponential distribution.  \n+     */\n+    public abstract ExponentialDistribution createExponentialDistribution(\n+        double mean);\n+    \n+    /**\n+     * Create a new F-distribution with the given degrees of freedom.\n+     * @param numeratorDegreesOfFreedom numerator degrees of freedom.\n+     * @param denominatorDegreesOfFreedom denominator degrees of freedom.\n+     * @return a new F-distribution.  \n+     */\n+    public abstract FDistribution createFDistribution(\n+        double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom);\n+    \n+    /**\n+     * Create a new gamma distribution with the given alpha and beta values.\n+     * @param alpha the shape parameter.\n+     * @param beta the scale parameter.\n+     * @return a new gamma distribution.  \n+     */\n+    public abstract GammaDistribution createGammaDistribution(\n+        double alpha, double beta);\n+\n+    /**\n+     * Create a new t distribution with the given degrees of freedom.\n+     * @param degreesOfFreedom degrees of freedom.\n+     * @return a new t distribution.  \n+     */\n+    public abstract TDistribution createTDistribution(double degreesOfFreedom);\n+    \n+    /**\n+     * Create a new hypergeometric distribution with the given the population\n+     * size, the number of successes in the population, and the sample size.\n+     * @param populationSize the population size.\n+     * @param numberOfSuccesses number of successes in the population.\n+     * @param sampleSize the sample size.\n+     * @return a new hypergeometric desitribution.\n+     */\n+    public abstract HypergeometricDistribution\n+        createHypergeometricDistribution(int populationSize,\n+            int numberOfSuccesses, int sampleSize);\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+\n+/**\n+ * A concrete distribution factory.  This is the default factory used by\n+ * Commons-Math.\n+ *  \n+ * @version $Revision: 1.14 $ $Date: 2003/11/14 22:22:19 $\n+ */\n+public class DistributionFactoryImpl extends DistributionFactory {\n+    /**\n+     * Default constructor.  Package scope to prevent unwanted instantiation. \n+     */\n+    public DistributionFactoryImpl() {\n+        super();\n+    }\n+    \n+    /**\n+     * Create a new chi-square distribution with the given degrees of freedom.\n+     * @param degreesOfFreedom degrees of freedom.\n+     * @return a new chi-square distribution.  \n+     */\n+    public ChiSquaredDistribution createChiSquareDistribution(\n+        final double degreesOfFreedom) {\n+            \n+        return new ChiSquaredDistributionImpl(degreesOfFreedom);\n+    }\n+    \n+    /**\n+     * Create a new gamma distribution the given alpha and beta values.\n+     * @param alpha the shape parameter.\n+     * @param beta the scale parameter.\n+     * @return a new gamma distribution.  \n+     */\n+    public GammaDistribution createGammaDistribution(\n+        double alpha, double beta) {\n+\n+        return new GammaDistributionImpl(alpha, beta);\n+    }\n+\n+    /**\n+     * Create a new t distribution with the given degrees of freedom.\n+     * @param degreesOfFreedom degrees of freedom.\n+     * @return a new t distribution.  \n+     */\n+    public TDistribution createTDistribution(double degreesOfFreedom) {\n+        return new TDistributionImpl(degreesOfFreedom);\n+    }\n+\n+    /**\n+     * Create a new F-distribution with the given degrees of freedom.\n+     * @param numeratorDegreesOfFreedom numerator degrees of freedom.\n+     * @param denominatorDegreesOfFreedom denominator degrees of freedom.\n+     * @return a new F-distribution.  \n+     */\n+    public FDistribution createFDistribution(\n+        double numeratorDegreesOfFreedom,\n+        double denominatorDegreesOfFreedom) {\n+        return new FDistributionImpl(numeratorDegreesOfFreedom,\n+            denominatorDegreesOfFreedom);\n+    }\n+\n+    /**\n+     * Create a new exponential distribution with the given degrees of freedom.\n+     * @param mean mean.\n+     * @return a new exponential distribution.  \n+     */\n+    public ExponentialDistribution createExponentialDistribution(double mean) {\n+        return new ExponentialDistributionImpl(mean);\n+    }    \n+\n+    /**\n+     * Create a binomial distribution with the given number of trials and\n+     * probability of success.\n+     * @param numberOfTrials the number of trials.\n+     * @param probabilityOfSuccess the probability of success.\n+     * @return a new binomial distribution.\n+     */\n+    public BinomialDistribution createBinomialDistribution(\n+        int numberOfTrials, double probabilityOfSuccess) {\n+        return new BinomialDistributionImpl(numberOfTrials,\n+            probabilityOfSuccess);\n+    }\n+\n+    /**\n+     * Create a new hypergeometric distribution with the given the population\n+     * size, the number of successes in the population, and the sample size.\n+     * @param populationSize the population size.\n+     * @param numberOfSuccesses number of successes in the population.\n+     * @param sampleSize the sample size.\n+     * @return a new hypergeometric desitribution.\n+     */\n+    public HypergeometricDistribution createHypergeometricDistribution(\n+        int populationSize,\n+        int numberOfSuccesses,\n+        int sampleSize)\n+    {\n+        return new HypergeometricDistributionImpl(populationSize,\n+            numberOfSuccesses, sampleSize);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/ExponentialDistribution.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+/**\n+ * The Exponential Distribution.\n+ * \n+ * Instances of ExponentialDistribution objects should be created using\n+ * {@link DistributionFactory#createExponentialDistribution(double)}.\n+ * \n+ * References:\n+ * <ul>\n+ * <li><a href=\"http://mathworld.wolfram.com/ExponentialDistribution.html\">\n+ * Exponential Distribution</a></li>\n+ * \n+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:19 $\n+ */\n+public interface ExponentialDistribution extends ContinuousDistribution {\n+    /**\n+     * Modify the mean.\n+     * @param mean the new mean.\n+     */\n+    void setMean(double mean);\n+    \n+    /**\n+     * Access the mean.\n+     * @return the mean.\n+     */\n+    double getMean();\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+/**\n+ * The default implementation of {@link ExponentialDistribution}\n+ * \n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:19 $\n+ */\n+public class ExponentialDistributionImpl\n+    implements ExponentialDistribution {\n+\n+    /** The mean of this distribution. */\n+    private double mean;\n+    \n+    /**\n+     * Create a exponential distribution with the given mean.\n+     * @param mean mean of this distribution.\n+     */\n+    public ExponentialDistributionImpl(double mean) {\n+        super();\n+        setMean(mean);\n+    }\n+\n+    /**\n+     * Modify the mean.\n+     * @param mean the new mean.\n+     */\n+    public void setMean(double mean) {\n+        if (mean <= 0.0) {\n+            throw new IllegalArgumentException(\"mean must be positive.\");\n+        }\n+        this.mean = mean;\n+    }\n+\n+    /**\n+     * Access the mean.\n+     * @return the mean.\n+     */\n+    public double getMean() {\n+        return mean;\n+    }\n+\n+    /**\n+     * For this disbution, X, this method returns P(X &lt; x).\n+     * \n+     * The implementation of this method is based on:\n+     * <ul>\n+     * <li>\n+     * <a href=\"http://mathworld.wolfram.com/ExponentialDistribution.html\">\n+     * Exponential Distribution</a>, equation (1).</li>\n+     * </ul>\n+     * \n+     * @param x the value at which the CDF is evaluated.\n+     * @return CDF for this distribution.\n+     */\n+    public double cummulativeProbability(double x) {\n+        double ret;\n+        if (x <= 0.0) {\n+            ret = 0.0;\n+        } else {\n+            ret = 1.0 - Math.exp(-x / getMean());\n+        }\n+        return ret;\n+    }\n+    \n+    /**\n+     * For this distribution, X, this method returns the critical point x, such\n+     * that P(X &lt; x) = <code>p</code>.\n+     *\n+     * @param p the desired probability\n+     * @return x, such that P(X &lt; x) = <code>p</code>\n+     */\n+    public double inverseCummulativeProbability(double p) {\n+        double ret;\n+        \n+        if (p < 0.0 || p > 1.0) {\n+            ret = Double.NaN;\n+        } else if (p == 1.0) {\n+            ret = Double.POSITIVE_INFINITY;\n+        } else {\n+            ret = -getMean() * Math.log(1.0 - p);\n+        }\n+        \n+        return ret;\n+    }\n+    \n+    /**\n+     * For this disbution, X, this method returns P(x0 &lt; X &lt; x1).\n+     * @param x0 the lower bound\n+     * @param x1 the upper bound\n+     * @return the cummulative probability. \n+     */\n+    public double cummulativeProbability(double x0, double x1) {\n+        return cummulativeProbability(x1) - cummulativeProbability(x0);\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/FDistribution.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+/**\n+ * F-Distribution.\n+ * \n+ * Instances of FDistribution objects should be created using\n+ * {@link DistributionFactory#createFDistribution(double,double)}.\n+ * \n+ * References:\n+ * <ul>\n+ * <li><a href=\"http://mathworld.wolfram.com/F-Distribution.html\">\n+ * F-Distribution</a></li>\n+ * </ul>\n+ * \n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:19 $\n+ */\n+public interface FDistribution extends ContinuousDistribution {\n+    /**\n+     * Modify the numerator degrees of freedom.\n+     * @param degreesOfFreedom the new numerator degrees of freedom.\n+     */\n+    void setNumeratorDegreesOfFreedom(double degreesOfFreedom);\n+    \n+    /**\n+     * Access the numerator degrees of freedom.\n+     * @return the numerator degrees of freedom.\n+     */\n+    double getNumeratorDegreesOfFreedom();\n+    \n+    /**\n+     * Modify the denominator degrees of freedom.\n+     * @param degreesOfFreedom the new denominator degrees of freedom.\n+     */\n+    void setDenominatorDegreesOfFreedom(double degreesOfFreedom);\n+    \n+    /**\n+     * Access the denominator degrees of freedom.\n+     * @return the denominator degrees of freedom.\n+     */\n+    double getDenominatorDegreesOfFreedom();\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.commons.math.MathException;\n+import org.apache.commons.math.special.Beta;\n+\n+/**\n+ * Default implementation of\n+ * {@link org.apache.commons.math.stat.distribution.FDistribution}.\n+ * \n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:19 $\n+ */\n+public class FDistributionImpl\n+    extends AbstractContinuousDistribution\n+    implements FDistribution {\n+\n+    /** The numerator degrees of freedom*/\n+    private double numeratorDegreesOfFreedom;\n+\n+    /** The numerator degrees of freedom*/\n+    private double denominatorDegreesOfFreedom;\n+    \n+    /**\n+     * Create a F distribution using the given degrees of freedom.\n+     * @param numeratorDegreesOfFreedom the numerator degrees of freedom.\n+     * @param denominatorDegreesOfFreedom the denominator degrees of freedom.\n+     */\n+    public FDistributionImpl(double numeratorDegreesOfFreedom,\n+            double denominatorDegreesOfFreedom) {\n+        super();\n+        setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);\n+        setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);\n+    }\n+    \n+    /**\n+     * For this disbution, X, this method returns P(X &lt; x).\n+     * \n+     * The implementation of this method is based on:\n+     * <ul>\n+     * <li>\n+     * <a href=\"http://mathworld.wolfram.com/F-Distribution.html\">\n+     * F-Distribution</a>, equation (4).</li>\n+     * </ul>\n+     * \n+     * @param x the value at which the CDF is evaluated.\n+     * @return CDF for this distribution. \n+     */\n+    public double cummulativeProbability(double x) {\n+        double ret;\n+        if (x <= 0.0) {\n+            ret = 0.0;\n+        } else {\n+            double n = getNumeratorDegreesOfFreedom();\n+            double m = getDenominatorDegreesOfFreedom();\n+            \n+            try {\n+                ret = Beta.regularizedBeta((n * x) / (m + n * x),\n+                    0.5 * n,\n+                    0.5 * m);\n+            } catch (MathException ex) {\n+                LogFactory.getLog(getClass()).error(\n+                    \"Failed to compute cummulative probability, returning NaN.\",\n+                    ex);\n+                ret = Double.NaN;\n+            }\n+        }\n+        return ret;\n+    }\n+        \n+    /**\n+     * Access the domain value lower bound, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value lower bound, i.e.\n+     *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n+     */\n+    protected double getDomainLowerBound(double p) {\n+        return 0.0;\n+    }\n+\n+    /**\n+     * Access the domain value upper bound, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value upper bound, i.e.\n+     *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n+     */\n+    protected double getDomainUpperBound(double p) {\n+        return Double.MAX_VALUE;\n+    }\n+\n+    /**\n+     * Access the initial domain value, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return initial domain value\n+     */\n+    protected double getInitialDomain(double p) {\n+        return getDenominatorDegreesOfFreedom() /\n+            (getDenominatorDegreesOfFreedom() - 2.0);\n+    }\n+    \n+    /**\n+     * Modify the numerator degrees of freedom.\n+     * @param degreesOfFreedom the new numerator degrees of freedom.\n+     */\n+    public void setNumeratorDegreesOfFreedom(double degreesOfFreedom) {\n+        if (degreesOfFreedom <= 0.0) {\n+            throw new IllegalArgumentException(\n+                \"degrees of freedom must be positive.\");\n+        }\n+        this.numeratorDegreesOfFreedom = degreesOfFreedom;\n+    }\n+    \n+    /**\n+     * Access the numerator degrees of freedom.\n+     * @return the numerator degrees of freedom.\n+     */\n+    public double getNumeratorDegreesOfFreedom() {\n+        return numeratorDegreesOfFreedom;\n+    }\n+    \n+    /**\n+     * Modify the denominator degrees of freedom.\n+     * @param degreesOfFreedom the new denominator degrees of freedom.\n+     */\n+    public void setDenominatorDegreesOfFreedom(double degreesOfFreedom) {\n+        if (degreesOfFreedom <= 0.0) {\n+            throw new IllegalArgumentException(\n+                \"degrees of freedom must be positive.\");\n+        }\n+        this.denominatorDegreesOfFreedom = degreesOfFreedom;\n+    }\n+    \n+    /**\n+     * Access the denominator degrees of freedom.\n+     * @return the denominator degrees of freedom.\n+     */\n+    public double getDenominatorDegreesOfFreedom() {\n+        return denominatorDegreesOfFreedom;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/GammaDistribution.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+/**\n+ * The Gamma Distribution.\n+ * \n+ * Instances of GammaDistribution objects should be created using\n+ * {@link DistributionFactory#createGammaDistribution(double,double)}.\n+ * \n+ * References:\n+ * <ul>\n+ * <li><a href=\"http://mathworld.wolfram.com/GammaDistribution.html\">\n+ * Gamma Distribution</a></li>\n+ * </ul>\n+ *  \n+ * @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:19 $\n+ */\n+public interface GammaDistribution extends ContinuousDistribution {\n+    /**\n+     * Modify the shape parameter, alpha.\n+     * @param alpha the new shape parameter.\n+     */\n+    void setAlpha(double alpha);\n+    \n+    /**\n+     * Access the shape parameter, alpha\n+     * @return alpha.\n+     */\n+    double getAlpha();\n+    \n+    /**\n+     * Modify the scale parameter, beta.\n+     * @param beta the new scale parameter.\n+     */\n+    void setBeta(double beta);\n+    \n+    /**\n+     * Access the scale parameter, beta\n+     * @return beta.\n+     */\n+    double getBeta();\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.commons.math.MathException;\n+import org.apache.commons.math.special.Gamma;\n+\n+/**\n+ * The default implementation of {@link GammaDistribution}\n+ * \n+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:19 $\n+ */\n+public class GammaDistributionImpl extends AbstractContinuousDistribution\n+    implements GammaDistribution {\n+\n+    /** The shape parameter. */\n+    private double alpha;\n+    \n+    /** The scale parameter. */\n+    private double beta;\n+    \n+    /**\n+     * Create a new gamma distribution with the given alpha and beta values.\n+     * @param alpha the shape parameter.\n+     * @param beta the scale parameter.\n+     */\n+    public GammaDistributionImpl(double alpha, double beta) {\n+        super();\n+        setAlpha(alpha);\n+        setBeta(beta);\n+    }\n+    \n+    /**\n+     * For this disbution, X, this method returns P(X &lt; x).\n+     * \n+     * The implementation of this method is based on:\n+     * <ul>\n+     * <li>\n+     * <a href=\"http://mathworld.wolfram.com/Chi-SquaredDistribution.html\">\n+     * Chi-Squared Distribution</a>, equation (9).</li>\n+     * <li>Casella, G., & Berger, R. (1990). <i>Statistical Inference</i>.\n+     * Belmont, CA: Duxbury Press.</li>\n+     * </ul>\n+     * \n+     * @param x the value at which the CDF is evaluated.\n+     * @return CDF for this distribution. \n+     */\n+    public double cummulativeProbability(double x) {\n+        double ret;\n+    \n+        if (x <= 0.0) {\n+            ret = 0.0;\n+        } else {\n+            try {\n+                ret = Gamma.regularizedGammaP(getAlpha(), x / getBeta());\n+            } catch(MathException ex){\n+                LogFactory.getLog(getClass()).error(\n+                    \"Failed to compute cummulative probability, returning NaN.\",\n+                    ex);\n+                ret = Double.NaN;\n+            }\n+        }\n+    \n+        return ret;\n+    }\n+    \n+    /**\n+     * Modify the shape parameter, alpha.\n+     * @param alpha the new shape parameter.\n+     */\n+    public void setAlpha(double alpha) {\n+        if (alpha <= 0.0) {\n+            throw new IllegalArgumentException(\"alpha must be positive\");\n+        }\n+        this.alpha = alpha;\n+    }\n+    \n+    /**\n+     * Access the shape parameter, alpha\n+     * @return alpha.\n+     */\n+    public double getAlpha() {\n+        return alpha;\n+    }\n+    \n+    /**\n+     * Modify the scale parameter, beta.\n+     * @param beta the new scale parameter.\n+     */\n+    public void setBeta(double beta) {\n+        if (beta <= 0.0) {\n+            throw new IllegalArgumentException(\"beta must be positive\");\n+        }\n+        this.beta = beta;\n+    }\n+    \n+    /**\n+     * Access the scale parameter, beta\n+     * @return beta.\n+     */\n+    public double getBeta() {\n+        return beta;\n+    }\n+    \n+    /**\n+     * Access the domain value lower bound, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value lower bound, i.e.\n+     *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>\n+     * TODO: try to improve on this estimate\n+     */\n+    protected double getDomainLowerBound(double p) {\n+        return Double.MIN_VALUE;\n+    }\n+\n+    /**\n+     * Access the domain value upper bound, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value upper bound, i.e.\n+     *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n+     * TODO: try to improve on this estimate\n+     */\n+    protected double getDomainUpperBound(double p) {\n+        // NOTE: gamma is skewed to the left\n+        // NOTE: therefore, P(X < &mu;) > .5\n+\n+        double ret;\n+\n+        if (p < .5) {\n+            // use mean\n+            ret = getAlpha() * getBeta();\n+        } else {\n+            // use max value\n+            ret = Double.MAX_VALUE;\n+        }\n+        \n+        return ret;\n+    }\n+\n+    /**\n+     * Access the initial domain value, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return initial domain value\n+     * TODO: try to improve on this estimate\n+     */\n+    protected double getInitialDomain(double p) {\n+        // Gamma is skewed to the left, therefore, P(X < &mu;) > .5\n+\n+        double ret;\n+\n+        if (p < .5) {\n+            // use 1/2 mean\n+            ret = getAlpha() * getBeta() * .5;\n+        } else {\n+            // use mean\n+            ret = getAlpha() * getBeta();\n+        }\n+        \n+        return ret;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.stat.distribution;\n+\n+/**\n+ * The Hypergeometric Distribution.\n+ * \n+ * Instances of HypergeometricDistribution objects should be created using\n+ * {@link DistributionFactory#createHypergeometricDistribution(int, int, int)}.\n+ * \n+ * References:\n+ * <ul>\n+ * <li><a href=\"http://mathworld.wolfram.com/HypergeometricDistribution.html\">\n+ * Hypergeometric Distribution</a></li>\n+ * </ul>\n+ * \n+ * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:19 $\n+ */\n+public interface HypergeometricDistribution extends DiscreteDistribution {\n+    /**\n+     * Access the number of successes.\n+     * @return the number of successes.\n+     */\n+    public abstract int getNumberOfSuccesses();\n+    \n+    /**\n+     * Access the population size.\n+     * @return the population size.\n+     */\n+    public abstract int getPopulationSize();\n+    \n+    /**\n+     * Access the sample size.\n+     * @return the sample size.\n+     */\n+    public abstract int getSampleSize();\n+    \n+    /**\n+     * Modify the number of successes.\n+     * @param num the new number of successes.\n+     */\n+    public abstract void setNumberOfSuccesses(int num);\n+    \n+    /**\n+     * Modify the population size.\n+     * @param size the new population size.\n+     */\n+    public abstract void setPopulationSize(int size);\n+    \n+    /**\n+     * Modify the sample size.\n+     * @param size the new sample size.\n+     */\n+    public abstract void setSampleSize(int size);\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.stat.distribution;\n+\n+import org.apache.commons.math.util.MathUtils;\n+\n+/**\n+ * The default implementation of {@link HypergeometricDistribution}.\n+ * \n+ * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:19 $\n+ */\n+public class HypergeometricDistributionImpl extends AbstractDiscreteDistribution\n+    implements HypergeometricDistribution\n+{\n+\n+    /** The number of successes in the population. */\n+    private int numberOfSuccesses;\n+    \n+    /** The population size. */\n+    private int populationSize;\n+    \n+    /** The sample size. */\n+    private int sampleSize;\n+    \n+    /**\n+     * Construct a new hypergeometric distribution with the given the population\n+     * size, the number of successes in the population, and the sample size.\n+     * @param populationSize the population size.\n+     * @param numberOfSuccesses number of successes in the population.\n+     * @param sampleSize the sample size.\n+     */\n+    public HypergeometricDistributionImpl(int populationSize,\n+        int numberOfSuccesses, int sampleSize)\n+    {\n+        super();\n+        setPopulationSize(populationSize);\n+        setSampleSize(sampleSize);\n+        setNumberOfSuccesses(numberOfSuccesses);\n+    }\n+\n+    /**\n+     * For this disbution, X, this method returns P(X &le; x).\n+     * @param x the value at which the PDF is evaluated.\n+     * @return PDF for this distribution. \n+     */\n+    public double cummulativeProbability(int x) {\n+        double ret;\n+        \n+        int n = getPopulationSize();\n+        int m = getNumberOfSuccesses();\n+        int k = getSampleSize();\n+\n+        int[] domain = getDomain(n, m, k);\n+        if (x < domain[0]) {\n+            ret = 0.0;\n+        } else if(x >= domain[1]) {\n+            ret = 1.0;\n+        } else {\n+            ret = 0.0;\n+            for (int i = domain[0]; i <= x; ++i){\n+                ret += probability(n, m, k, i);\n+            }\n+        }\n+        \n+        return ret;\n+    }\n+\n+    /**\n+     * Return the domain for the given hypergeometric distribution parameters.\n+     * @param n the population size.\n+     * @param m number of successes in the population.\n+     * @param k the sample size.\n+     * @return a two element array containing the lower and upper bounds of the\n+     *         hypergeometric distribution.  \n+     */\n+    private int[] getDomain(int n, int m, int k){\n+        return new int[]{\n+            getLowerDomain(n, m, k),\n+            getUpperDomain(m, k)\n+        };\n+    }\n+    \n+    /**\n+     * Access the domain value lower bound, based on <code>p</code>, used to\n+     * bracket a PDF root.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value lower bound, i.e.\n+     *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n+     */\n+    protected int getDomainLowerBound(double p) {\n+        return getLowerDomain(getPopulationSize(), getNumberOfSuccesses(),\n+            getSampleSize());\n+    }\n+    \n+    /**\n+     * Access the domain value upper bound, based on <code>p</code>, used to\n+     * bracket a PDF root.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value upper bound, i.e.\n+     *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n+     */\n+    protected int getDomainUpperBound(double p) {\n+        return getUpperDomain(getSampleSize(), getNumberOfSuccesses());\n+    }\n+\n+    /**\n+     * Return the lowest domain value for the given hypergeometric distribution\n+     * parameters.\n+     * @param n the population size.\n+     * @param m number of successes in the population.\n+     * @param k the sample size.\n+     * @return the lowest domain value of the hypergeometric distribution.  \n+     */\n+    private int getLowerDomain(int n, int m, int k) {\n+        return Math.max(0, m - (n - k));\n+    }\n+\n+    /**\n+     * Access the number of successes.\n+     * @return the number of successes.\n+     */\n+    public int getNumberOfSuccesses() {\n+        return numberOfSuccesses;\n+    }\n+\n+    /**\n+     * Access the population size.\n+     * @return the population size.\n+     */\n+    public int getPopulationSize() {\n+        return populationSize;\n+    }\n+\n+    /**\n+     * Access the sample size.\n+     * @return the sample size.\n+     */\n+    public int getSampleSize() {\n+        return sampleSize;\n+    }\n+\n+    /**\n+     * Return the highest domain value for the given hypergeometric distribution\n+     * parameters.\n+     * @param m number of successes in the population.\n+     * @param k the sample size.\n+     * @return the highest domain value of the hypergeometric distribution.  \n+     */\n+    private int getUpperDomain(int m, int k){\n+        return Math.min(k, m);\n+    }\n+\n+    /**\n+     * For this disbution, X, this method returns P(X = x).\n+     * @param x the value at which the PMF is evaluated.\n+     * @return PMF for this distribution. \n+     */\n+    public double probability(int x) {\n+        double ret;\n+        \n+        int n = getPopulationSize();\n+        int m = getNumberOfSuccesses();\n+        int k = getSampleSize();\n+\n+        int[] domain = getDomain(n, m, k);\n+        if(x < domain[0] || x > domain[1]){\n+            ret = 0.0;\n+        } else {\n+            ret = probability(n, m, k, x);\n+        }\n+        \n+        return ret;\n+    }\n+\n+    /**\n+     * For the disbution, X, defined by the given hypergeometric distribution\n+     * parameters, this method returns P(X = x).\n+     * @param n the population size.\n+     * @param m number of successes in the population.\n+     * @param k the sample size.\n+     * @param x the value at which the PMF is evaluated.\n+     * @return PMF for the distribution. \n+     */\n+    private double probability(int n, int m, int k, int x) {\n+        return Math.exp(MathUtils.binomialCoefficientLog(m, x) +\n+            MathUtils.binomialCoefficientLog(n - m, k - x) -\n+            MathUtils.binomialCoefficientLog(n, k));\n+    }\n+    \n+    /**\n+     * Modify the number of successes.\n+     * @param num the new number of successes.\n+     */\n+    public void setNumberOfSuccesses(int num) {\n+        if(num < 0){\n+            throw new IllegalArgumentException(\n+                \"number of successes must be non-negative.\");\n+        }\n+        numberOfSuccesses = num;\n+    }\n+\n+    /**\n+     * Modify the population size.\n+     * @param size the new population size.\n+     */\n+    public void setPopulationSize(int size) {\n+        if(size <= 0){\n+            throw new IllegalArgumentException(\n+                \"population size must be positive.\");\n+        }\n+        populationSize = size;\n+    }\n+\n+    /**\n+     * Modify the sample size.\n+     * @param size the new sample size.\n+     */\n+    public void setSampleSize(int size) {\n+        if(size < 0){\n+            throw new IllegalArgumentException(\n+                \"sample size must be non-negative.\");\n+        }\n+        sampleSize = size;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/TDistribution.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+/**\n+ * Student's t-Distribution.\n+ * \n+ * Instances of TDistribution objects should be created using\n+ * {@link DistributionFactory#createTDistribution(double)}\n+ * \n+ * References:\n+ * <ul>\n+ * <li><a href=\"http://mathworld.wolfram.com/Studentst-Distribution.html\">\n+ * Student's t-Distribution</a></li>\n+ * </ul>\n+ * \n+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:25:28 $\n+ */\n+public interface TDistribution extends ContinuousDistribution {\n+    /**\n+     * Modify the degrees of freedom.\n+     * @param degreesOfFreedom the new degrees of freedom.\n+     */\n+    void setDegreesOfFreedom(double degreesOfFreedom);\n+    \n+    /**\n+     * Access the degrees of freedom.\n+     * @return the degrees of freedom.\n+     */\n+    double getDegreesOfFreedom();\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/TDistributionImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.commons.math.MathException;\n+import org.apache.commons.math.special.Beta;\n+\n+/**\n+ * Default implementation of\n+ * {@link org.apache.commons.math.stat.distribution.TDistribution}.\n+ * \n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:25:28 $\n+ */\n+public class TDistributionImpl\n+    extends AbstractContinuousDistribution\n+    implements TDistribution {\n+\n+    /** The degrees of freedom*/\n+    private double degreesOfFreedom;\n+    \n+    /**\n+     * Create a t distribution using the given degrees of freedom.\n+     * @param degreesOfFreedom the degrees of freedom.\n+     */\n+    public TDistributionImpl(double degreesOfFreedom) {\n+        super();\n+        setDegreesOfFreedom(degreesOfFreedom);\n+    }\n+\n+    /**\n+     * Modify the degrees of freedom.\n+     * @param degreesOfFreedom the new degrees of freedom.\n+     */\n+    public void setDegreesOfFreedom(double degreesOfFreedom) {\n+        if (degreesOfFreedom <= 0.0) {\n+            throw new IllegalArgumentException(\n+                \"degrees of freedom must be positive.\");\n+        }\n+        this.degreesOfFreedom = degreesOfFreedom;\n+    }\n+\n+    /**\n+     * Access the degrees of freedom.\n+     * @return the degrees of freedom.\n+     */\n+    public double getDegreesOfFreedom() {\n+        return degreesOfFreedom;\n+    }\n+\n+    /**\n+     * For this disbution, X, this method returns P(X &lt; <code>x</code>).\n+     * @param x the value at which the CDF is evaluated.\n+     * @return CDF evaluted at <code>x</code>. \n+     */\n+    public double cummulativeProbability(double x) {\n+        double ret;\n+        if (x == 0.0) {\n+            ret = 0.5;\n+        } else {\n+            double t;\n+            try {\n+                t = Beta.regularizedBeta(\n+                    getDegreesOfFreedom() / (getDegreesOfFreedom() + (x * x)),\n+                    0.5 * getDegreesOfFreedom(),\n+                    0.5);\n+                if (x < 0.0) {\n+                    ret = 0.5 * t;\n+                } else {\n+                    ret = 1.0 - 0.5 * t;\n+                }\n+            } catch (MathException ex) {\n+                LogFactory.getLog(getClass()).error(\n+                    \"Failed to compute cummulative probability, returning NaN.\",\n+                    ex);\n+                ret = Double.NaN;\n+            }\n+        }\n+        \n+        return ret;\n+    }\n+        \n+    /**\n+     * Access the domain value lower bound, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value lower bound, i.e.\n+     *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n+     */\n+    protected double getDomainLowerBound(double p) {\n+        return -Double.MAX_VALUE;\n+    }\n+\n+    /**\n+     * Access the domain value upper bound, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value upper bound, i.e.\n+     *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n+     */\n+    protected double getDomainUpperBound(double p) {\n+        return Double.MAX_VALUE;\n+    }\n+\n+    /**\n+     * Access the initial domain value, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return initial domain value\n+     */\n+    protected double getInitialDomain(double p) {\n+        return 0.0;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/linear/RealMatrix.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.linear;\n+\n+/**\n+ * Interface defining a real-valued matrix with basic algebraic operations\n+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:19 $\n+ */\n+public interface RealMatrix {\n+\n+    /**\n+     * Returns a (deep) copy of this.\n+     *\n+     * @return matrix copy\n+     */\n+    RealMatrix copy();\n+    \n+    /**\n+     * Compute the sum of this and m.\n+     *\n+     * @param m    matrix to be added\n+     * @return     this + m\n+     * @exception  IllegalArgumentException if m is not the same size as this\n+     */\n+    RealMatrix add(RealMatrix m) throws IllegalArgumentException;   \n+    \n+    /**\n+     * Compute this minus m.\n+     *\n+     * @param m    matrix to be subtracted\n+     * @return     this + m\n+     * @exception  IllegalArgumentException if m is not the same size as this\n+     */\n+    RealMatrix subtract(RealMatrix m) throws IllegalArgumentException;   \n+    \n+    /**\n+     * Returns the rank of the matrix.\n+     *\n+     * @return the rank of this matrix\n+     */\n+    int getRank();\n+    \n+     /**\n+     * Returns the result of adding d to each entry of this.\n+     *\n+     * @param d    value to be added to each entry\n+     * @return     d + this\n+     */\n+    RealMatrix scalarAdd(double d);\n+    \n+    /**\n+     * Returns the result multiplying each entry of this by d.\n+     *\n+     * @param d    value to multiply all entries by\n+     * @return     d * this\n+     */\n+    RealMatrix scalarMultiply(double d);\n+    \n+    /**\n+     * Returns the result postmultiplying this by m.\n+     *\n+     * @param m    matrix to postmultiply by\n+     * @return     this * m\n+     * @throws     IllegalArgumentException \n+     *             if columnDimension(this) != rowDimension(m)\n+     */\n+    RealMatrix multiply(RealMatrix m) throws IllegalArgumentException;\n+    \n+    /**\n+     * Returns matrix entries as a two-dimensional array.\n+     *\n+     * @return    2-dimensional array of entries\n+     */\n+    double[][] getData();\n+    \n+    /**\n+     * Overwrites the underlying data for the matrix with\n+     * a fresh copy of <code>data</code>.\n+     *\n+     * @param  data  2-dimensional array of entries\n+     */\n+    void setData(double[][] data);\n+    \n+    /**\n+     * Returns the <a href=\"http://mathworld.wolfram.com/\n+     * MaximumAbsoluteRowSumNorm.html\">maximum absolute row sum norm</a> \n+     * of the matrix.\n+     *\n+     * @return norm\n+     */\n+    double getNorm();\n+    \n+    /**\n+     * Returns the entries in row number <code>row</code> as an array.\n+     *\n+     * @param row the row to be fetched\n+     * @return array of entries in the row\n+     * @throws IllegalArgumentException if row > rowDimension\n+     */\n+    double[] getRow(int row) throws IllegalArgumentException;\n+    \n+    /**\n+     * Returns the entries in column number <code>col</code> as an array.\n+     *\n+     * @param col  column to fetch\n+     * @return array of entries in the column\n+     * @throws IllegalArgumentException if column > columnDimension\n+     */\n+    double[] getColumn(int col) throws IllegalArgumentException;\n+    \n+    /**\n+     * Returns the entry in the specified row and column.\n+     *\n+     * @param row  row location of entry to be fetched  \n+     * @param column  column location of entry to be fetched\n+     * @return     matrix entry in row,column\n+     * @throws     IllegalArgumentException if entry does not exist\n+     */\n+    double getEntry(int row, int column) throws IllegalArgumentException;\n+    \n+    /**\n+     * Sets the entry in the specified row and column to the specified value.\n+     *\n+     * @param row    row location of entry to be set \n+     * @param column    column location of entry to be set\n+     * @param value  value to set \n+     * @throws IllegalArgumentException if entry does not exist\n+     */\n+    void setEntry(int row, int column, double value) \n+        throws IllegalArgumentException;\n+    \n+    /**\n+     * Returns the transpose of this matrix.\n+     *\n+     * @return transpose matrix\n+     */\n+    RealMatrix transpose();\n+    \n+    /**\n+     * Returns the inverse of this matrix.\n+     *\n+     * @return inverse matrix\n+     * @throws IllegalArgumentException if *this is not invertible\n+     */\n+    RealMatrix inverse() throws IllegalArgumentException;\n+    \n+    /**\n+     * Returns the determinant of this matrix.\n+     *\n+     * @return determinant\n+     */\n+    double getDeterminant();\n+    \n+    /**\n+     * Is this a square matrix?\n+     * @return true if the matrix is square (rowDimension = columnDimension)\n+     */\n+    boolean isSquare();\n+    \n+    /**\n+     * Is this a singular matrix?\n+     * @return true if the matrix is singular\n+     */\n+    boolean isSingular();\n+    \n+    /**\n+     * Returns the number of rows in the matrix.\n+     *\n+     * @return rowDimension\n+     */\n+    int getRowDimension();\n+    \n+    /**\n+     * Returns the number of columns in the matrix.\n+     *\n+     * @return columnDimension\n+     */\n+    int getColumnDimension();\n+    \n+    /**\n+     * Returns the <a href=\"http://mathworld.wolfram.com/MatrixTrace.html\">\n+     * trace</a> of the matrix (the sum of the elements on the main diagonal).\n+     *\n+     * @return trace\n+     */\n+    double getTrace();\n+    \n+    /**\n+     * Returns the result of multiplying this by the vector <code>v</code>.\n+     *\n+     * @param v the vector to operate on\n+     * @return this*v\n+     * @throws IllegalArgumentException if columnDimension != v.size()\n+     */\n+    double[] operate(double[] v) throws IllegalArgumentException;\n+    \n+    /**\n+     * Returns the result of premultiplying this by the vector <code>v</code>.\n+     *\n+     * @param v the row vector to premultiply by\n+     * @return v*this\n+     * @throws IllegalArgumentException if rowDimension != v.size()\n+     */\n+    RealMatrix preMultiply(double[] v) throws IllegalArgumentException;  \n+    \n+    /**\n+     * Returns the solution vector for a linear system with coefficient\n+     * matrix = this and constant vector = <code>b</code>.\n+     *\n+     * @param b  constant vector\n+     * @return   vector of solution values to AX = b, where A is *this\n+     * @throws   IllegalArgumentException if rowDimension != b.length or matrix \n+     *           is singular\n+     */\n+    double[] solve(double[] b) throws IllegalArgumentException;\n+    \n+    /**\n+     * Returns a matrix of (column) solution vectors for linear systems with\n+     * coefficient matrix = this and constant vectors = columns of\n+     * <code>b</code>. \n+     *\n+     * @param b  matrix of constant vectors forming RHS of linear systems to\n+     * to solve\n+     * @return matrix of solution vectors\n+     * @throws IllegalArgumentException if rowDimension != row dimension of b\n+     * or this is not square or singular\n+     */\n+    RealMatrix solve(RealMatrix b) throws IllegalArgumentException;\n+}\n+\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.linear;\n+import java.io.Serializable;\n+\n+/**\n+ * Implementation for RealMatrix using a double[][] array to store entries\n+ * and <a href=\"http://www.math.gatech.edu/~bourbaki/\n+ * math2601/Web-notes/2num.pdf\">LU decompostion</a> to support linear system \n+ * solution and inverse.\n+ * <p>\n+ * The <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes\n+ * /2num.pdf\">LU decompostion</a> is performed as needed, to support the \n+ * following operations: <ul>\n+ * <li>solve</li>\n+ * <li>isSingular</li>\n+ * <li>getDeterminant</li>\n+ * <li>inverse</li> </ul>\n+ * <p>\n+ * <strong>Usage note</strong>:<br>\n+ * The LU decomposition is stored and reused on subsequent calls.  If matrix\n+ * data are modified using any of the public setXxx methods, the saved \n+ * decomposition is discarded.  If data are modified via references to the\n+ * underlying array obtained using <code>getDataRef()</code>, then the stored\n+ * LU decomposition will not be discarded.  In this case, you need to \n+ * explicitly invoke <code>LUDecompose()</code> to recompute the decomposition\n+ * before using any of the methods above.\n+ *\n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:19 $\n+ */\n+public class RealMatrixImpl implements RealMatrix, Serializable {\n+\n+    /** Entries of the matrix */\n+    private double data[][] = null;\n+    \n+    /** Entries of LU decomposition.\n+     * All updates to data (other than luDecompostion) *must* set this to null\n+     */\n+    private double lu[][] = null;\n+    \n+    /** Pivot array associated with LU decompostion */\n+    private int[] pivot = null;\n+    \n+    /** Parity of the permutation associated with the LU decomposition */\n+    private int parity = 1;\n+    \n+    /** Bound to determine effective singularity in LU decomposition */\n+    private static double TOO_SMALL = 10E-12;\n+    \n+    /** \n+     * Creates a matrix with no data\n+     */\n+    public RealMatrixImpl() {\n+    }\n+    \n+    /**\n+     * Create a new RealMatrix with the supplied row and column dimensions.\n+     *\n+     * @param rowDimension      the number of rows in the new matrix\n+     * @param columnDimension   the number of columns in the new matrix\n+     */\n+    public RealMatrixImpl(int rowDimension,\n+    int columnDimension) {\n+        data = new double[rowDimension][columnDimension];\n+        lu = null;\n+    }\n+    \n+    /**\n+     * Create a new RealMatrix using the <code>data</code> as the underlying\n+     * data array.\n+     * <p>\n+     * The input array is copied, not referenced.\n+     *\n+     * @param d data for new matrix\n+     */\n+    public RealMatrixImpl(double[][] d) {\n+        this.copyIn(d);\n+        lu = null;\n+    }\n+    \n+    /**\n+     * Create a new (column) RealMatrix using <code>v</code> as the \n+     * data for the unique column of the <code>v.length x 1</code> matrix \n+     * created.\n+     * <p>\n+     * The input array is copied, not referenced.\n+     *\n+     * @param v column vector holding data for new matrix\n+     */\n+    public RealMatrixImpl(double[] v) {\n+        int nRows = v.length;\n+        data = new double[nRows][1];\n+        for (int row = 0; row < nRows; row++) {\n+            data[row][0] = v[row];\n+        }\n+    }\n+    \n+    /**\n+     * Create a new RealMatrix which is a copy of this.\n+     *\n+     * @return  the cloned matrix\n+     */\n+    public RealMatrix copy() {\n+        return new RealMatrixImpl(this.copyOut());\n+    }\n+    \n+    /**\n+     * Compute the sum of this and <code>m</code>.\n+     *\n+     * @param m    matrix to be added\n+     * @return     this + m\n+     * @exception  IllegalArgumentException if m is not the same size as this\n+     */\n+    public RealMatrix add(RealMatrix m) throws IllegalArgumentException {\n+        if (this.getColumnDimension() != m.getColumnDimension() ||\n+        this.getRowDimension() != m.getRowDimension()) {\n+            throw new IllegalArgumentException(\"matrix dimension mismatch\");\n+        }\n+        int rowCount = this.getRowDimension();\n+        int columnCount = this.getColumnDimension();\n+        double[][] outData = new double[rowCount][columnCount];\n+        double[][] mData = m.getData();\n+        for (int row = 0; row < rowCount; row++) {\n+            for (int col = 0; col < columnCount; col++) {\n+                outData[row][col] = data[row][col] + mData[row][col];\n+            }\n+        }\n+        return new RealMatrixImpl(outData);\n+    }\n+    \n+    /**\n+     * Compute  this minus <code>m</code>.\n+     *\n+     * @param m    matrix to be subtracted\n+     * @return     this + m\n+     * @exception  IllegalArgumentException if m is not the same size as *this\n+     */\n+    public RealMatrix subtract(RealMatrix m) throws IllegalArgumentException {\n+        if (this.getColumnDimension() != m.getColumnDimension() ||\n+        this.getRowDimension() != m.getRowDimension()) {\n+            throw new IllegalArgumentException(\"matrix dimension mismatch\");\n+        }\n+        int rowCount = this.getRowDimension();\n+        int columnCount = this.getColumnDimension();\n+        double[][] outData = new double[rowCount][columnCount];\n+        double[][] mData = m.getData();\n+        for (int row = 0; row < rowCount; row++) {\n+            for (int col = 0; col < columnCount; col++) {\n+                outData[row][col] = data[row][col] - mData[row][col];\n+            }\n+        }\n+        return new RealMatrixImpl(outData);\n+    }\n+    \n+    /**\n+     * Returns the rank of the matrix.\n+     *\n+     * @return the rank of this matrix\n+     */\n+    public int getRank() {\n+        // FIXME: need to add singular value decomposition or drop this\n+        throw new UnsupportedOperationException(\"not implemented yet\");\n+    }\n+    \n+    \n+    /**\n+     * Returns the result of adding d to each entry of this.\n+     *\n+     * @param d    value to be added to each entry\n+     * @return     d + this\n+     */\n+    public RealMatrix scalarAdd(double d) {\n+        int rowCount = this.getRowDimension();\n+        int columnCount = this.getColumnDimension();\n+        double[][] outData = new double[rowCount][columnCount];\n+        for (int row = 0; row < rowCount; row++) {\n+            for (int col = 0; col < columnCount; col++) {\n+                outData[row][col] = data[row][col] + d;\n+            }\n+        }\n+        return new RealMatrixImpl(outData);\n+    }\n+    \n+    /**\n+     * Returns the result multiplying each entry of this by <code>d</code>\n+     * @param d  value to multiply all entries by\n+     * @return d * this\n+     */\n+    public RealMatrix scalarMultiply(double d) {\n+        int rowCount = this.getRowDimension();\n+        int columnCount = this.getColumnDimension();\n+        double[][] outData = new double[rowCount][columnCount];\n+        for (int row = 0; row < rowCount; row++) {\n+            for (int col = 0; col < columnCount; col++) {\n+                outData[row][col] = data[row][col] * d;\n+            }\n+        }\n+        return new RealMatrixImpl(outData);\n+    }\n+    \n+    /**\n+     * Returns the result postmultiplying this by <code>m</code>.\n+     * @param m    matrix to postmultiply by\n+     * @return     this*m\n+     * @throws     IllegalArgumentException\n+     *             if columnDimension(this) != rowDimension(m)\n+     */\n+    public RealMatrix multiply(RealMatrix m) throws IllegalArgumentException {\n+        if (this.getColumnDimension() != m.getRowDimension()) {\n+            throw new IllegalArgumentException\n+            (\"Matrices are not multiplication compatible.\");\n+        }\n+        int nRows = this.getRowDimension();\n+        int nCols = this.getColumnDimension();\n+        double[][] mData = m.getData();\n+        double[][] outData =\n+        new double[nRows][nCols];\n+        double sum = 0;\n+        for (int row = 0; row < nRows; row++) {\n+            for (int col = 0; col < nCols; col++) {\n+                sum = 0;\n+                for (int i = 0; i < nCols; i++) {\n+                    sum += data[row][i] * mData[i][col];\n+                }\n+                outData[row][col] = sum;\n+            }\n+        }\n+        return new RealMatrixImpl(outData);\n+    }\n+    \n+    /**\n+     * Returns matrix entries as a two-dimensional array.\n+     * <p>\n+     * Makes a fresh copy of the underlying data.\n+     *\n+     * @return    2-dimensional array of entries\n+     */\n+    public double[][] getData() {\n+        return copyOut();\n+    }\n+    \n+    /**\n+     * Overwrites the underlying data for the matrix\n+     * with a fresh copy of <code>inData</code>.\n+     *\n+     * @param  inData 2-dimensional array of entries\n+     */\n+    public void setData(double[][] inData) {\n+        copyIn(inData);\n+        lu = null;\n+    }\n+    \n+    /**\n+     * Returns a reference to the underlying data array.\n+     * <p>\n+     * Does not make a fresh copy of the underlying data.\n+     *\n+     * @return 2-dimensional array of entries\n+     */\n+    public double[][] getDataRef() {\n+        return data;\n+    }\n+    \n+    /**\n+     * Overwrites the underlying data for the matrix\n+     * with a reference to <code>inData</code>.\n+     * <p>\n+     * Does not make a fresh copy of <code>data</code>.\n+     *\n+     * @param  inData 2-dimensional array of entries\n+     */\n+    public void setDataRef(double[][] inData) {\n+        this.data = inData;\n+        lu = null;\n+    }\n+    \n+    /**\n+     *\n+     * @return norm\n+     */\n+    public double getNorm() {\n+        double maxColSum = 0;\n+        for (int col = 0; col < this.getColumnDimension(); col++) {\n+            double sum = 0;\n+            for (int row = 0; row < this.getRowDimension(); row++) {\n+                sum += Math.abs(data[row][col]);\n+            }\n+            maxColSum = Math.max(maxColSum, sum);\n+        }\n+        return maxColSum;\n+    }\n+    \n+    /**\n+     *\n+     * @param row  the row to be fetched\n+     * @return array of entries in the row\n+     * @throws IllegalArgumentException if row > rowDimension or row < 1\n+     */\n+    public double[] getRow(int row) throws IllegalArgumentException {\n+        if (row > this.getRowDimension() || row < 1) {\n+            throw new IllegalArgumentException(\"illegal row argument\");\n+        }\n+        int ncols = this.getColumnDimension();\n+        double[] out = new double[ncols];\n+        System.arraycopy(data[row - 1], 0, out, 0, ncols);\n+        return out;\n+    }\n+    \n+    /**\n+     * @param col column to fetch\n+     * @return array of entries in the column\n+     * @throws IllegalArgumentException if column > columnDimension or\n+     * column < 1\n+     */\n+    public double[] getColumn(int col) throws IllegalArgumentException {\n+        if (col > this.getColumnDimension() || col < 1) {\n+            throw new IllegalArgumentException(\"illegal column argument\");\n+        }\n+        int nRows = this.getRowDimension();\n+        double[] out = new double[nRows];\n+        for (int row = 0; row < nRows; row++) {\n+            out[row] = data[row][col - 1];\n+        }\n+        return out;\n+    }\n+    \n+    /**\n+     * @param row  row location of entry to be fetched\n+     * @param column  column location of entry to be fetched\n+     * @return matrix entry in row,column\n+     * @throws IllegalArgumentException if entry does not exist\n+     */\n+    public double getEntry(int row, int column)\n+    throws IllegalArgumentException {\n+        if (row < 1 || column < 1 || row > this.getRowDimension() ||\n+            column > this.getColumnDimension()) {\n+                \n+            throw new IllegalArgumentException\n+            (\"matrix entry does not exist\");\n+        }\n+        return data[row - 1][column - 1];\n+    }\n+    \n+    /**\n+     * @param row    row location of entry to be set\n+     * @param column    column location of entry to be set\n+     * @param value  value to set\n+     * @throws IllegalArgumentException if entry does not exist\n+     */\n+    public void setEntry(int row, int column, double value)\n+    throws IllegalArgumentException {\n+        if (row < 1 || column < 1 || row > this.getRowDimension() ||\n+            column > this.getColumnDimension()) {\n+                \n+            throw new IllegalArgumentException\n+            (\"matrix entry does not exist\");\n+        }\n+        data[row - 1][column - 1] = value;\n+        lu = null;\n+    }\n+    \n+    /**\n+     *\n+     * @return transpose matrix\n+     */\n+    public RealMatrix transpose() {\n+        int nRows = this.getRowDimension();\n+        int nCols = this.getColumnDimension();\n+        RealMatrixImpl out = new RealMatrixImpl(nCols, nRows);\n+        double[][] outData = out.getDataRef();\n+        for (int row = 0; row < nRows; row++) {\n+            for (int col = 0; col < nCols; col++) {\n+                outData[col][row] = data[row][col];\n+            }\n+        }\n+        return out;\n+    }   \n+    \n+    /**\n+     * @return inverse matrix\n+     * @throws IllegalArgumentException if this is not invertible\n+     */\n+    public RealMatrix inverse() throws IllegalArgumentException {\n+        return solve(getIdentity(this.getRowDimension()));\n+    }\n+    \n+    /**\n+     * @return determinant\n+     * @throws IllegalArgumentException if matrix is not square\n+     */\n+    public double getDeterminant() throws IllegalArgumentException {\n+        if (!isSquare()) {\n+            throw new IllegalArgumentException(\"matrix is not square\");\n+        }\n+        if (isSingular()) {  // note: this has side effect of attempting LU\n+            return 0d;        //       decomp if lu == null\n+        } else {\n+            double det = (double) parity;\n+            for (int i = 0; i < this.getRowDimension(); i++) {\n+                det *= lu[i][i];\n+            }\n+            return det;\n+        }\n+    }\n+    \n+    /**\n+     * @return true if the matrix is square (rowDimension = columnDimension)\n+     */\n+    public boolean isSquare() {\n+        return (this.getColumnDimension() == this.getRowDimension());\n+    }\n+    \n+    /**\n+     * @return true if the matrix is singular\n+     */\n+    public boolean isSingular() {\n+        if (lu == null) {\n+            try {\n+                LUDecompose();\n+                return false;\n+            } catch (IllegalArgumentException ex) {\n+                return true;\n+            }\n+        } else {            // LU decomp must have been successfully performed\n+            return false;   // so the matrix is not singular\n+        }\n+    }\n+    \n+    /**\n+     * @return rowDimension\n+     */\n+    public int getRowDimension() {\n+        return data.length;\n+    }\n+    \n+    /**\n+     * @return columnDimension\n+     */\n+    public int getColumnDimension() {\n+        return data[0].length;\n+    }\n+    \n+    /**\n+     * @return trace\n+     * @throws IllegalArgumentException if the matrix is not square\n+     */\n+    public double getTrace() throws IllegalArgumentException {\n+        if (!isSquare()) {\n+            throw new IllegalArgumentException(\"matrix is not square\");\n+        }\n+        double trace = data[0][0];\n+        for (int i = 1; i < this.getRowDimension(); i++) {\n+            trace += data[i][i];\n+        }\n+        return trace;\n+    }\n+    \n+    /**\n+     * @param v vector to operate on\n+     * @throws IllegalArgumentException if columnDimension != v.length\n+     * @return resulting vector\n+     */\n+    public double[] operate(double[] v) throws IllegalArgumentException {\n+        if (v.length != this.getColumnDimension()) {\n+            throw new IllegalArgumentException(\"vector has wrong length\");\n+        }\n+        int nRows = this.getRowDimension();\n+        int nCols = this.getColumnDimension();\n+        double[] out = new double[v.length];\n+        for (int row = 0; row < nRows; row++) {\n+            double sum = 0;\n+            for (int i = 0; i < nCols; i++) {\n+                sum += data[row][i] * v[i];\n+            }\n+            out[row] = sum;\n+        }\n+        return out;      \n+    }\n+    \n+    /**\n+     * @param v vector to premultiply by\n+     * @throws IllegalArgumentException if rowDimension != v.length\n+     * @return resulting matrix\n+     */\n+    public RealMatrix preMultiply(double[] v) throws IllegalArgumentException {\n+        int nCols = this.getColumnDimension();\n+        if (v.length != nCols) {\n+            throw new IllegalArgumentException(\"vector has wrong length\");\n+        }\n+        // being a bit lazy here -- probably should implement directly, like\n+        // operate\n+        RealMatrix pm = new RealMatrixImpl(v).transpose();\n+        return pm.multiply(this);     \n+    }\n+    \n+    /**\n+     * @param b  constant vector\n+     * @return   vector of solution values to AX = b, where A is this\n+     * @throws   IllegalArgumentException if rowDimension != b.length or matrix\n+     *           is singular\n+     */\n+    public double[] solve(double[] b) throws IllegalArgumentException {\n+        int nRows = this.getRowDimension();\n+        if (b.length != nRows) {\n+            throw new IllegalArgumentException\n+                (\"constant vector has wrong length\");\n+        }\n+        RealMatrix bMatrix = new RealMatrixImpl(b);\n+        double[][] solution = ((RealMatrixImpl) (solve(bMatrix))).getDataRef();\n+        double[] out = new double[nRows];\n+        for (int row = 0; row < nRows; row++) {\n+            out[row] = solution[row][0];\n+        }\n+        return out;\n+    }\n+       \n+    /**\n+     * Uses LU decomposition, performing the composition if the matrix has\n+     * not been decomposed, or if there have been changes to the matrix since\n+     * the last decomposition.\n+     *\n+     * @param b the constant vector\n+     * @return solution matrix\n+     * @throws IllegalArgumentException if this is singular or dimensions\n+     * do not match.\n+     */\n+    public RealMatrix solve(RealMatrix b) throws IllegalArgumentException {\n+        if (!this.isSquare()) {\n+            throw new IllegalArgumentException\n+                (\"coefficient matrix is not square\");\n+        }\n+        if (b.getRowDimension() != this.getRowDimension()) {\n+            throw new IllegalArgumentException(\"Incorrect row dimension\");\n+        }\n+        if (this.isSingular()) {  // side effect: compute LU decomp\n+            throw new IllegalArgumentException(\"Matrix is singular.\");\n+        }\n+        \n+        int nCol = this.getColumnDimension();\n+        int nColB = b.getColumnDimension();\n+        int nRowB = b.getRowDimension();\n+        \n+        // Apply permutations to b\n+        double[][] bv = b.getData();\n+        double[][] bp = new double[nRowB][nColB];\n+        for (int row = 0; row < nRowB; row++) {\n+            for (int col = 0; col < nColB; col++) {\n+                bp[row][col] = bv[pivot[row]][col];\n+            }\n+        }\n+        bv = null;\n+        \n+        // Solve LY = b\n+        for (int col = 0; col < nCol; col++) {\n+            for (int i = col + 1; i < nCol; i++) {\n+                for (int j = 0; j < nColB; j++) {\n+                    bp[i][j] -= bp[col][j] * lu[i][col];\n+                }\n+            }\n+        }\n+        \n+        // Solve UX = Y\n+        for (int col = nCol - 1; col >= 0; col--) {\n+            for (int j = 0; j < nColB; j++) {\n+                bp[col][j] /= lu[col][col];\n+            }\n+            for (int i = 0; i < col; i++) {\n+                for (int j = 0; j < nColB; j++) {\n+                    bp[i][j] -= bp[col][j] * lu[i][col];\n+                }\n+            }\n+        }\n+        \n+        RealMatrixImpl outMat = new RealMatrixImpl(bp);\n+        return outMat;\n+    }\n+    \n+    /**\n+     * Computes a new <a href=\"http://www.math.gatech.edu/~bourbaki/\n+     * math2601/Web-notes/2num.pdf\">LU decompostion</a> for this matrix,\n+     * storing the result for use by other methods.\n+     * <p>\n+     * <strong>Implementation Note</strong>:<br>\n+     * Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/\n+     * people/sd/lectures/nummeth98/linear.htm\">Crout's algortithm</a>,\n+     * with partial pivoting.\n+     * <p>\n+     * <strong>Usage Note</strong>:<br>\n+     * This method should rarely be invoked directly. Its only use is\n+     * to force recomputation of the LU decomposition when changes have been\n+     * made to the underlying data using direct array references. Changes\n+     * made using setXxx methods will trigger recomputation when needed\n+     * automatically.\n+     *\n+     * @throws IllegalArgumentException if the matrix is singular\n+     */\n+    public void LUDecompose() throws IllegalArgumentException {\n+        int nRows = this.getRowDimension();\n+        int nCols = this.getColumnDimension();\n+        if (nRows < nCols) {\n+            throw new IllegalArgumentException\n+              (\"LU decomposition requires row dimension >= column dimension\");\n+        }\n+        lu = this.getData();\n+        \n+        // Initialize pivot array and parity\n+        pivot = new int[nRows];\n+        for (int row = 0; row < nRows; row++) {\n+            pivot[row] = row;\n+        }\n+        parity = 1;\n+        \n+        // Loop over columns\n+        for (int col = 0; col < nCols; col++) {\n+            \n+            double sum = 0;\n+            \n+            // upper\n+            for (int row = 0; row < col; row++) {\n+                sum = lu[row][col];\n+                for (int i = 0; i < row; i++) {\n+                    sum -= lu[row][i] * lu[i][col];\n+                }\n+                lu[row][col] = sum;\n+            }\n+            \n+            // lower\n+            int max = col; // pivot row\n+            double largest = 0d;\n+            for (int row = col; row < nRows; row++) {\n+                sum = lu[row][col];\n+                for (int i = 0; i < col; i++) {\n+                    sum -= lu[row][i] * lu[i][col];\n+                }\n+                lu[row][col] = sum;\n+                \n+                // maintain best pivot choice\n+                if (Math.abs(sum) > largest) {\n+                    largest = Math.abs(sum);\n+                    max = row;\n+                }\n+            }\n+            \n+            // Singularity check\n+            if (Math.abs(lu[max][col]) < TOO_SMALL) {\n+                lu = null;\n+                throw new IllegalArgumentException(\"matrix is singular\");\n+            }\n+            \n+            // Pivot if necessary\n+            if (max != col) {\n+                double tmp = 0;\n+                for (int i = 0; i < nCols; i++) {\n+                    tmp = lu[max][i];\n+                    lu[max][i] = lu[col][i];\n+                    lu[col][i] = tmp;\n+                }\n+                int temp = pivot[max];\n+                pivot[max] = pivot[col];\n+                pivot[col] = temp;\n+                parity = -parity;\n+            }\n+            \n+            //Divide the lower elements by the \"winning\" diagonal elt.\n+            for (int row = col + 1; row < nRows; row++) {\n+                lu[row][col] /= lu[col][col];\n+            }\n+        }\n+    }\n+    \n+    //------------------------ Protected methods\n+    \n+    /**\n+     * Returns <code>dimension x dimension</code> identity matrix.\n+     *\n+     * @param dimension dimension of identity matrix to generate\n+     * @return identity matrix\n+     */\n+    protected RealMatrix getIdentity(int dimension) {\n+        RealMatrixImpl out = new RealMatrixImpl(dimension, dimension);\n+        double[][] d = out.getDataRef();\n+        for (int row = 0; row < dimension; row++) {\n+            for (int col = 0; col < dimension; col++) {\n+                d[row][col] = row == col ? 1d : 0d;\n+            }\n+        }\n+        return out;\n+    }\n+    \n+    //------------------------ Private methods\n+    \n+    /**\n+     * Returns a fresh copy of the underlying data array.\n+     *\n+     * @return a copy of the underlying data array.\n+     */\n+    private double[][] copyOut() {\n+        int nRows = this.getRowDimension();\n+        double[][] out =\n+            new double[nRows][this.getColumnDimension()];\n+        // can't copy 2-d array in one shot, otherwise get row references\n+        for (int i = 0; i < nRows; i++) {\n+            System.arraycopy(data[i], 0, out[i], 0, data[i].length);\n+        }\n+        return out;\n+    }\n+    \n+    /**\n+     * Replaces data with a fresh copy of the input array.\n+     *\n+     * @param in data to copy in\n+     */\n+    private void copyIn(double[][] in) {\n+        int nRows = in.length;\n+        int nCols = in[0].length;\n+        data = new double[nRows][nCols];\n+        System.arraycopy(in, 0, data, 0, in.length);\n+        for (int i = 0; i < nRows ; i++) {\n+            System.arraycopy(in[i], 0, data[i], 0, nCols);\n+        }\n+        lu = null;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/random/EmpiricalDistribution.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.random;\n+\n+import java.io.IOException;\n+import java.io.File;\n+import java.util.ArrayList;\n+\n+import org.apache.commons.math.stat.Univariate;\n+\n+/**\n+ * Represents an <a href=\"http://random.mat.sbg.ac.at/~ste/dipl/node11.html\">\n+ * empirical probability distribution</a> -- a probability distribution derived\n+ * from observed data without making any assumptions about the functional form\n+ * of the population distribution that the data come from.<p>\n+ * Implementations of this interface maintain data structures, called \n+ * <i>distribution digests</i>, that describe empirical distributions and \n+ * support the following operations: <ul>\n+ * <li>loading the distribution from a file of observed data values</li>\n+ * <li>saving and re-loading distribution digests to/from \"digest files\" </li>\n+ * <li>dividing the input data into \"bin ranges\" and reporting bin frequency\n+ *     counts (data for histogram)</li>\n+ * <li>reporting univariate statistics describing the full set of data values\n+ *     as well as the observations within each bin</li>\n+ * <li>generating random values from the distribution</li>\n+ * </ul>\n+ * Applications can use <code>EmpiricalDistribution</code> implementations to \n+ * build grouped frequnecy histograms representing the input data or to\n+ * generate random values \"like\" those in the input file -- i.e., the values\n+ * generated will follow the distribution of the values in the file.\n+ * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:21 $\n+ */\n+public interface EmpiricalDistribution {\n+    \n+    /**\n+     * Computes the empirical distribution from the input file\n+     * @param filePath fully qualified name of a file in the local file system\n+     * @throws IOException if an IO error occurs\n+     */\n+    void load(String filePath) throws IOException; \n+    \n+    /**\n+     * Computes the empirical distribution from the input file\n+     * @param file url of the input file\n+     * @throws IOException if an IO error occurs\n+     */\n+    void load(File file) throws IOException;\n+    \n+    /** \n+     * Generates a random value from this distribution.\n+     * <strong>Preconditions:</strong><ul>\n+     * <li>the distribution must be loaded before invoking this method</li></ul>\n+     * @return the random value.\n+     * @throws IllegalStateException if the distribution has not been loaded\n+     */\n+    double getNextValue() throws IllegalStateException;  \n+    \n+     \n+    /** \n+     * Returns a Univariate describing this distribution.\n+     * <strong>Preconditions:</strong><ul>\n+     * <li>the distribution must be loaded before invoking this method</li></ul>\n+     * @return the sample statistics\n+     * @throws IllegalStateException if the distribution has not been loaded\n+     */\n+    Univariate getSampleStats() throws IllegalStateException;\n+    \n+    /** \n+     * Loads a saved distribution from a file.\n+     * @param file File reference for a file containing a digested distribution\n+     * @throws IOException if an error occurs reading the file\n+     */\n+    void loadDistribution(File file) throws IOException;  \n+    \n+    /** \n+     * Loads a saved distribution from a file.\n+     * @param filePath fully qualified file path for a file \n+     * containing a digested distribution \n+     * @throws IOException if an error occurs reading the file\n+     */\n+    void loadDistribution(String filePath) throws IOException; \n+    \n+    /** \n+     * Saves distribution to a file. Overwrites the file if it exists.\n+     * <strong>Preconditions:</strong><ul>\n+     * <li>the distribution must be loaded before invoking this method</li></ul>\n+     * @param filePath fully qualified file path for the file to be written\n+     * @throws IOException if an error occurs reading the file\n+     * @throws IllegalStateException if the distribution has not been loaded\n+     */\n+    void saveDistribution(String filePath) throws \n+        IOException,IllegalStateException;\n+    \n+    /** \n+     * Saves distribution to a file. Overwrites the file if it exists.\n+     * <strong>Preconditions:</strong><ul>\n+     * <li>the distribution must be loaded before invoking this method</li></ul>\n+     * @param file File reference for the file to be written\n+     * @throws IOException if an error occurs reading the file\n+     * @throws IllegalStateException if the distribution has not been loaded\n+     */\n+    void saveDistribution(File file) throws IOException,IllegalStateException;\n+    \n+    /**\n+     * property indicating whether or not the distribution has been loaded\n+     * @return true if the distribution has been loaded\n+     */\n+    boolean isLoaded();  \n+    \n+     /** \n+     * Returns the number of bins\n+     * @return the number of bins.\n+     */\n+    int getBinCount();\n+    \n+    /** \n+     * Returns a list of Univariates containing statistics describing the\n+     * values in each of the bins.  The ArrayList is indexed on the bin number.\n+     * @return ArrayList of bin statistics.\n+     */\n+    ArrayList getBinStats();\n+    \n+    /** \n+     * Returns the array of upper bounds for the bins.  Bins are: <br/>\n+     * [min,upperBounds[0]],(upperBounds[0],upperBounds[1]],...,\n+     *  (upperBounds[binCount-1],max]\n+     * @return array of bin upper bounds\n+     */\n+    double[] getUpperBounds();\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.random;\n+\n+import java.util.ArrayList;\n+import java.io.Serializable;\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.commons.math.stat.Univariate;\n+import org.apache.commons.math.stat.UnivariateImpl;\n+\n+/**\n+ * Implements <code>EmpiricalDistribution</code> interface.  This implementation\n+ * uses what amounts to the \n+ * <a href=\"http://nedwww.ipac.caltech.edu/level5/March02/Silverman/Silver2_6.html\">\n+ * Variable Kernel Method</a> with Gaussian smoothing:<p>\n+ * <strong>Digesting the input file</strong>\n+ * <ol><li>Pass the file once to compute min and max.</li>  \n+ * <li>Divide the range from min-max into <code>binCount</code> \"bins.\"</li>\n+ * <li>Pass the data file again, computing bin counts and univariate\n+ *     statistics (mean, std dev.) for each of the bins </li>\n+ * <li>Divide the interval (0,1) into subintervals associated with the bins,\n+ *     with the length of a bin's subinterval proportional to its count.</li></ol>\n+ * <strong>Generating random values from the distribution</strong><ol>\n+ * <li>Generate a uniformly distributed value in (0,1) </li>\n+ * <li>Select the subinterval to which the value belongs.\n+ * <li>Generate a random Gaussian value with mean = mean of the associated\n+ *     bin and std dev = std dev of associated bin.</li></ol></p><p>\n+ *<strong>USAGE NOTES:</strong><ul>\n+ *<li>The <code>binCount</code> is set by default to 1000.  A good rule of thumb\n+ *    is to set the bin count to approximately the length of the input file divided\n+ *    by 10.  See TODO: add reference </li>\n+ *<li>The input file <i>must</i> be a plain text file containing one valid numeric\n+ *    entry per line.</li>\n+ * </ol></p>\n+ *\n+ * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:21 $\n+ */\n+public class EmpiricalDistributionImpl implements Serializable,EmpiricalDistribution {\n+\n+    \n+    /** List of Univariate objects characterizing the bins */\n+    private ArrayList binStats = null;\n+    \n+    /** Sample statistics */\n+    Univariate sampleStats = null;\n+    \n+    /** number of bins */\n+    private int binCount = 1000;\n+    \n+    /** is the distribution loaded? */\n+    private boolean loaded = false;\n+    \n+    /** upper bounds of subintervals in (0,1) \"belonging\" to the bins */\n+    private double[] upperBounds = null;\n+    \n+    /** RandomData instance to use in repeated calls to getNext() */\n+    private RandomData randomData = new RandomDataImpl();\n+    \n+    /** \n+     * Creates a new EmpiricalDistribution  with the default bin count\n+     */\n+    public EmpiricalDistributionImpl() {\n+        binStats = new ArrayList();\n+    }\n+    \n+    /** \n+     * Creates a new EmpiricalDistribution  with the specified bin count\n+     * @param binCount number of bins\n+     */\n+    public EmpiricalDistributionImpl(int binCount) {\n+        this.binCount = binCount;\n+        binStats = new ArrayList();\n+    }\n+    \n+    \n+    public void load(String filePath) throws IOException {\n+        File file = new File(filePath);\n+        load(file);\n+    }\n+    \n+     \n+    public void load(File file) throws IOException {\n+        // Pass the file once to get sample stats\n+         BufferedReader in = null;\n+         try {  \n+            in = new BufferedReader(new FileReader(file));\n+            String str = null;\n+            double val = 0.0;\n+            sampleStats = new UnivariateImpl();\n+            while ((str = in.readLine()) != null) {\n+              val = new Double(str).doubleValue();\n+              sampleStats.addValue(val);   \n+            }\n+            in.close();\n+            in = null;\n+         } finally {\n+             if (in != null) try {in.close();} catch (Exception ex) {};\n+         }               \n+        \n+         // Load array of bin upper bounds -- evenly spaced from min - max\n+         double min = sampleStats.getMin();\n+         double max = sampleStats.getMax();\n+         double delta = (max - min)/(new Double(binCount)).doubleValue();\n+         double[] binUpperBounds = new double[binCount];\n+         binUpperBounds[0] = min + delta;\n+         for (int i = 1; i< binCount - 1; i++) {\n+             binUpperBounds[i] = binUpperBounds[i-1] + delta;\n+         }\n+         binUpperBounds[binCount -1] = max;\n+         \n+        // Initialize binStats ArrayList\n+        if (!binStats.isEmpty()) {\n+            binStats.clear();\n+        }\n+        for (int i = 0; i < binCount; i++) {\n+            Univariate stats = new UnivariateImpl();\n+            binStats.add(i,stats);\n+        }\n+         \n+        // Pass the data again, filling data in binStats Array \n+         try {\n+            in = new BufferedReader(new FileReader(file));\n+            String str = null;\n+            double val = 0.0d;\n+            while ((str = in.readLine()) != null) {\n+              val = new Double(str).doubleValue();\n+              \n+              // Find bin and add value to binStats for the bin\n+              boolean found = false;\n+              int i = 0; \n+              while (!found) {\n+                  if (i >= binCount) {\n+                      throw new RuntimeException(\"bin alignment error\");\n+                  }\n+                  if (val <= binUpperBounds[i]) {\n+                      found = true;\n+                      Univariate stats = (Univariate)binStats.get(i);\n+                      stats.addValue(val);\n+                  }\n+                  i++;\n+              }       \n+            }\n+            in.close();\n+            in = null;\n+         } finally {\n+             if (in != null) try {in.close();} catch (Exception ex) {};\n+         }               \n+        \n+         // Assign upperBounds based on bin counts\n+         upperBounds = new double[binCount];\n+         upperBounds[0] = \n+            ((double)((Univariate)binStats.get(0)).getN())/\n+                (double)sampleStats.getN();\n+         for (int i = 1; i < binCount-1; i++) {\n+             upperBounds[i] = upperBounds[i-1] +\n+             ((double)((Univariate)binStats.get(i)).getN())/\n+                (double)sampleStats.getN();\n+         }\n+         upperBounds[binCount-1] = 1.0d;   \n+         \n+         loaded = true;\n+    }\n+    \n+    /**\n+     * Generates a random value from this distribution\n+     * @return the random value.\n+     * @throws IllegalStateException if the distribution has not been loaded\n+     */\n+    public double getNextValue() throws IllegalStateException {    \n+        \n+        if (!loaded) {\n+            throw new IllegalStateException(\"distribution not loaded\");\n+        }\n+        \n+        // Start with a uniformly distributed random number in (0,1)\n+        double x = Math.random();\n+       \n+        // Use this to select the bin and generate a Gaussian within the bin\n+        for (int i = 0; i < binCount; i++) {\n+           if (x <= upperBounds[i]) {\n+               Univariate stats = (Univariate)binStats.get(i);\n+               if (stats.getN() > 0) { \n+                   if (stats.getStandardDeviation() > 0) {  // more than one obs \n+                        return randomData.nextGaussian\n+                            (stats.getMean(),stats.getStandardDeviation());\n+                   } else {\n+                       return stats.getMean(); // only one obs in bin\n+                   }\n+               }\n+           }\n+        }\n+        throw new RuntimeException(\"No bin selected\");\n+    }\n+       \n+    public void loadDistribution(String filePath) throws IOException {\n+        throw new UnsupportedOperationException(\"Not Implemented yet :-(\");\n+    }\n+    \n+    public void loadDistribution(File file) throws IOException {\n+        throw new UnsupportedOperationException(\"Not Implemented yet :-(\");\n+    }\n+       \n+    public void saveDistribution(String filePath) throws \n+        IOException,IllegalStateException {\n+       throw new UnsupportedOperationException(\"Not Implemented yet :-(\");\n+    }\n+    \n+    public void saveDistribution(File file) throws \n+        IOException,IllegalStateException {\n+       throw new UnsupportedOperationException(\"Not Implemented yet :-(\");\n+    }\n+        \n+    public Univariate getSampleStats() {\n+        return sampleStats;\n+    }\n+    \n+    public int getBinCount() {\n+        return binCount;\n+    }\n+      \n+    public ArrayList getBinStats() {\n+        return binStats;\n+    }\n+       \n+    public double[] getUpperBounds() {\n+        return upperBounds;\n+    }\n+    \n+    public boolean isLoaded() {\n+        return loaded;\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/random/RandomData.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.random;\n+import java.util.Collection;\n+\n+/**\n+ * Random data generation utilities\n+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:21 $\n+ */\n+public interface RandomData {      \n+    /**\n+     * Generates a random string of hex characters of length\n+     * <code>len</code>.\n+     * <p>\n+     * The generated string will be random, but not cryptographically \n+     * secure. To generate cryptographically secure strings, use \n+     * <code>nextSecureHexString</code>\n+     * <p>\n+     * <strong>Preconditions</strong>:<ul>\n+     * <li><code>len > 0</code> (otherwise an IllegalArgumentException \n+     *     is thrown.)</li>\n+     * </ul>\n+     * \n+     * @param len the length of the string to be generated\n+     * @return random string of hex characters of length <code>len</code>  \n+     */\n+    String nextHexString(int len);  \n+    \n+    /**\n+     * Generates a uniformly distributed random integer between \n+     * <code>lower</code> and <code>upper</code> (endpoints included).\n+     * <p>\n+     * The generated integer will be random, but not cryptographically secure.\n+     * To generate cryptographically secure integer sequences, use \n+     * <code>nextSecureInt</code>.\n+     * <p>\n+     * <strong>Preconditions</strong>:<ul>\n+     * <li><code>lower < upper</code> (otherwise an IllegalArgumentException \n+     *     is thrown.)</li>\n+     * </ul>\n+     *\n+     * @param lower lower bound for generated integer\n+     * @param upper upper bound for generated integer\n+     * @return a random integer greater than or equal to <code>lower</code> \n+     * and less than or equal to <code>upper</code>.\n+     */\n+    int nextInt(int lower, int upper);  \n+    \n+    /**\n+     * Generates a uniformly distributed random long integer between\n+     * <code>lower</code> and <code>upper</code> (endpoints included).\n+     * <p>\n+     * The generated long integer values will be random, but not \n+     * cryptographically secure.\n+     * To generate cryptographically secure sequences of longs, use \n+     * <code>nextSecureLong</code>\n+     * <p>\n+     * <strong>Preconditions</strong>:<ul>\n+     * <li><code>lower < upper</code> (otherwise an IllegalArgumentException \n+     *     is thrown.)</li>\n+     * </ul>\n+     *\n+     * @param lower lower bound for generated integer\n+     * @param upper upper bound for generated integer\n+     * @return a random integer greater than or equal to <code>lower</code>\n+     * and less than or equal to <code>upper</code>.\n+     */\n+    long nextLong(long lower, long upper);  \n+    \n+    /**\n+     * Generates a random string of hex characters from a secure random \n+     * sequence.\n+     * <p>\n+     * If cryptographic security is not required, \n+     * use <code>nextHexString()</code>.\n+     * <p>\n+     * <strong>Preconditions</strong>:<ul>\n+     * <li><code>len > 0</code> (otherwise an IllegalArgumentException \n+     *     is thrown.)</li>\n+     * </ul>\n+     * @param len length of return string\n+     * @return the random hex string\n+     */\n+    String nextSecureHexString(int len);  \n+    \n+    /**\n+     * Generates a uniformly distributed random integer between \n+     * <code>lower</code> and <code>upper</code> (endpoints included) \n+     * from a secure random sequence.\n+     * <p>\n+     * Sequences of integers generated using this method will be \n+     * cryptographically secure. If cryptographic security is not required, \n+     * <code>nextInt</code> should be used instead of this method. \n+     * <p>\n+     * <strong>Definition</strong>:\n+     * <a href=\"http://www.wikipedia.org/wiki/\n+     * Cryptographically_secure_pseudo-random_number_generator\">\n+     * Secure Random Sequence</a>\n+     * <p>\n+     * <strong>Preconditions</strong>:<ul>\n+     * <li><code>lower < upper</code> (otherwise an IllegalArgumentException \n+     *     is thrown.)</li>\n+     * </ul>\n+     *\n+     * @param lower lower bound for generated integer\n+     * @param upper upper bound for generated integer\n+     * @return a random integer greater than or equal to <code>lower</code>\n+     * and less than or equal to <code>upper</code>.\n+     */\n+    int nextSecureInt(int lower, int upper);  \n+    \n+    /**\n+     * Generates a random long integer between <code>lower</code>\n+     * and <code>upper</code> (endpoints included).<p>\n+     * Sequences of long values generated using this method will be \n+     * cryptographically secure. If cryptographic security is not required,\n+     * <code>nextLong</code> should be used instead of this method.\n+     * <p>\n+     * <strong>Definition</strong>:\n+     * <a href=\"http://www.wikipedia.org/wiki/\n+     * Cryptographically_secure_pseudo-random_number_generator\">\n+     * Secure Random Sequence</a>\n+     * <p>\n+     * <strong>Preconditions</strong>:<ul>\n+     * <li><code>lower < upper</code> (otherwise an IllegalArgumentException \n+     *     is thrown.)</li>\n+     * </ul>\n+     *\n+     * @param lower lower bound for generated integer\n+     * @param upper upper bound for generated integer\n+     * @return a long integer greater than or equal to <code>lower</code>\n+     * and less than or equal to <code>upper</code>.\n+     */\n+    long nextSecureLong(long lower, long upper);  \n+    \n+    /** \n+     * Generates a random value from the Poisson distribution with \n+     * the given mean.\n+     * <p>\n+     * <strong>Definition</strong>: \n+     * <a href=\"http://www.itl.nist.gov/div898/handbook/\n+     * eda/section3/eda366j.htm\">\n+     * Poisson Distribution</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The specified mean <i>must</i> be positive (otherwise an \n+     *     IllegalArgumentException is thrown.)</li>\n+     * </ul>\n+     * @param mean Mean of the distribution\n+     * @return poisson deviate with the specified mean\n+     */\n+    long nextPoisson(double mean);  \n+    \n+    /** \n+     * Generates a random value from the\n+     * Normal (or Gaussian) distribution with the given mean\n+     * and standard deviation.\n+     * <p>\n+     * <strong>Definition</strong>: \n+     * <a href=\"http://www.itl.nist.gov/div898/handbook/\n+     * eda/section3/eda3661.htm\">\n+     * Normal Distribution</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li><code>sigma > 0</code> (otherwise an IllegalArgumentException \n+     *     is thrown.)</li>\n+     * </ul>\n+     * @param mu Mean of the distribution\n+     * @param sigma Standard deviation of the distribution\n+     * @return random value from Gaussian distribution with mean = mu,\n+     * standard deviation = sigma\n+     */\n+    double nextGaussian(double mu, double sigma);  \n+    \n+    /**\n+     * Generates a random value from the exponential distribution\n+     * with expected value = <code>mean</code>.\n+     * <p>\n+     * <strong>Definition</strong>: \n+     * <a href=\"http://www.itl.nist.gov/div898/handbook/\n+     * eda/section3/eda3667.htm\">\n+     * Exponential Distribution</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li><code>mu >= 0</code> (otherwise an IllegalArgumentException \n+     *     is thrown.)</li>\n+     * </ul>\n+     * @param mean Mean of the distribution\n+     * @return random value from exponential distribution\n+     */\n+    double nextExponential(double mean);   \n+    \n+    /**\n+     * Generates a uniformly distributed random value from the open interval\n+     * (<code>lower</code>,<code>upper</code>) (i.e., endpoints excluded).\n+     * <p>\n+     * <strong>Definition</strong>: \n+     * <a href=\"http://www.itl.nist.gov/div898/handbook/\n+     * eda/section3/eda3662.htm\">\n+     * Uniform Distribution</a> <code>lower</code> and \n+     * <code>upper - lower</code> are the \n+     * <a href = \"http://www.itl.nist.gov/div898/handbook/eda/\n+     * section3/eda364.htm\">\n+     * location and scale parameters</a>, respectively.\n+     * <p>\n+     * <strong>Preconditions</strong>:<ul>\n+     * <li><code>lower < upper</code> (otherwise an IllegalArgumentException \n+     *     is thrown.)</li>\n+     * </ul>\n+     *\n+     * @param lower lower endpoint of the interval of support\n+     * @param upper upper endpoint of the interval of support\n+     * @return uniformly distributed random value between lower\n+     * and upper (exclusive)\n+     */\n+    double nextUniform(double lower, double upper);\n+    \n+    /**\n+     * Generates an integer array of length <code>k</code> whose entries\n+     * are selected randomly, without repetition, from the integers <code>\n+     * 0 through n-1</code> (inclusive). \n+     * <p>\n+     * Generated arrays represent permutations\n+     * of <code>n</code> taken <code>k</code> at a time. \n+     * <p>\n+     * <strong>Preconditions:</strong><ul>\n+     * <li> <code>k <= n</code></li>\n+     * <li> <code>n > 0</code> </li>\n+     * </ul>\n+     * If the preconditions are not met, an IllegalArgumentException is\n+     * thrown.\n+     * \n+     * @param n domain of the permutation\n+     * @param k size of the permutation\n+     * @return random k-permutation of n \n+     */\n+    int[] nextPermutation(int n, int k);\n+    \n+    /**\n+     * Returns an array of <code>k</code> objects selected randomly\n+     * from the Collection <code>c</code>. \n+     * <p>\n+     * Sampling from <code>c</code>\n+     * is without replacement; but if <code>c</code> contains identical\n+     * objects, the sample may include repeats.  If all elements of <code>\n+     * c</code> are distinct, the resulting object array represents a \n+     * <a href=\"http://rkb.home.cern.ch/rkb/AN16pp/\n+     * node250.html#SECTION0002500000000000000000\">\n+     * Simple Random Sample</a> of size\n+     * <code>k</code> from the elements of <code>c</code>.\n+     * <p>   \n+     * <strong>Preconditions:</strong><ul>\n+     * <li> k must be less than or equal to the size of c </li>\n+     * <li> c must not be empty </li>\n+     * </ul>\n+     * If the preconditions are not met, an IllegalArgumentException is\n+     * thrown.\n+     * \n+     * @param c collection to be sampled\n+     * @param k size of the sample\n+     * @return random sample of k elements from c \n+     */\n+    Object[] nextSample(Collection c, int k);\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/random/RandomDataImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.random;\n+\n+import java.security.MessageDigest;\n+import java.security.SecureRandom;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.util.Random;\n+import java.util.Collection;\n+\n+/**\n+ * Implements the <code>RandomData</code> interface using \n+ * <code>java.util.Random</code> and \n+ * <code>java.util.Random.SecureRandom</code> instances to generate data. \n+ * <p>\n+ * Supports reseeding the underlying \n+ * <a href=\"http://www.wikipedia.org/wiki/Pseudo-random_number_generator\">\n+ * PRNG</a>. The <code>SecurityProvider</code> and <code>Algorithm</code>\n+ * used by the <code>SecureRandom</code> instance can also be reset.\n+ * <p>\n+ * For details on the PRNGs, see the JDK documentation for \n+ * <code>java.util.Random</code> and \n+ * <code>java.util.Random.SecureRandom</code>\n+ * <p>\n+ * <strong>Usage Notes</strong>: <ul>\n+ * <li>\n+ * Instance variables are used to maintain <code>Random</code> and \n+ * <code>SecureRandom</code> instances used in data generation. Therefore,\n+ * to generate a random sequence of values or strings, you should use just\n+ * <strong>one</strong> <code>RandomDataImpl</code> instance repeatedly.</li>\n+ * <li>\n+ * The \"secure\" methods are *much* slower.  These should be used only when\n+ * a <a href=\"http://www.wikipedia.org/wiki/\n+ * Cryptographically_secure_pseudo-random_number_generator\"> Secure Random \n+ * Sequence</a> is required.</li>\n+ * <li>\n+ * When a new <code>RandomDataImpl</code> is created, the underlying random\n+ * number generators are <strong>not</strong> intialized.  The first call to a\n+ * data generation method, or to a <code>reSeed()</code> method instantiates\n+ * the appropriate generator.  If you do not explicitly seed the generator, it\n+ * is by default seeded with the current time in milliseconds</li>\n+ * <li>\n+ * The <code>reSeed</code> and <code>reSeedSecure</code> methods delegate \n+ * to the corresponding methods on the underlying <code>Random</code> and \n+ * <code>SecureRandom</code> instances.  Therefore, the contracts of these \n+ * methods are as defined in the JDK documentation.  In particular, \n+ * <code>reSeed(long)</code> fully resets the initial state of the non-secure \n+ * random number generator (so that reseeding with a specific value always \n+ * results in the same subsequent random sequence); whereas reSeedSecure(long)\n+ * does <strong>not</strong> reinitialize the secure random number generator \n+ * (so secure sequences started with calls to reseedSecure(long) won't be \n+ * identical).</li></ul>\n+ * \n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $\n+ */\n+public class RandomDataImpl implements RandomData {\n+    \n+    /** underlying random number generator */\n+    private Random rand = null;\n+    \n+    /** underlying secure random number generator */\n+    private SecureRandom secRand = null;\n+    \n+    /**\n+     * Construct a RandomDataImpl.\n+     */\n+    public RandomDataImpl() {\n+    }\n+          \n+    /**\n+     * <strong>Algorithm Description:</strong> hex strings are generated \n+     * using a 2-step process. <ol>\n+     * <li>\n+     * len/2+1 binary bytes are generated using the underlying Random</li>\n+     * <li>\n+     * Each binary byte is translated into 2 hex digits</li></ol>\n+     * @param len the desired string length.\n+     * @return the random string.\n+     */\n+    public String nextHexString(int len) {\n+        if (len <= 0) {\n+            throw new IllegalArgumentException(\"length must be positive\");\n+        }\n+            \n+        //Get a random number generator\n+        Random ran = getRan();\n+        \n+        //Initialize output buffer\n+        StringBuffer outBuffer = new StringBuffer();\n+            \n+        //Get int(len/2)+1 random bytes\n+        byte[] randomBytes = new byte[(len / 2) + 1];\n+        ran.nextBytes(randomBytes);\n+ \n+        //Convert each byte to 2 hex digits\n+        for (int i = 0; i < randomBytes.length; i++) {\n+            Integer c = new Integer(randomBytes[i]);\n+                \n+            /* Add 128 to byte value to make interval 0-255 before\n+             * doing hex conversion.\n+             * This guarantees <= 2 hex digits from toHexString()\n+             * toHexString would otherwise add 2^32 to negative arguments.\n+             */\n+             String hex = Integer.toHexString(c.intValue() + 128);\n+                \n+             // Make sure we add 2 hex digits for each byte\n+             if (hex.length() == 1)  {\n+                 hex = \"0\" + hex;\n+             }\n+             outBuffer.append(hex);\n+        }\n+        return outBuffer.toString().substring(0, len);\n+    }\n+\n+    /**\n+     * Generate a random int value uniformly distributed between\n+     * <code>lower</code> and <code>upper</code>, inclusive.\n+     * @param lower the lower bound.\n+     * @param upper the upper bound.\n+     * @return the random integer.\n+     */       \n+    public int nextInt(int lower, int upper) {\n+        if (lower >= upper) {\n+            throw new IllegalArgumentException\n+                (\"upper bound must be > lower bound\");\n+        }\n+        Random rand = getRan();\n+        return lower + (int) (rand.nextDouble() * (upper - lower + 1));\n+    }\n+    \n+    /**\n+     * Generate a random long value uniformly distributed between\n+     * <code>lower</code> and <code>upper</code>, inclusive.\n+     * @param lower the lower bound.\n+     * @param upper the upper bound.\n+     * @return the random integer.\n+     */       \n+    public long nextLong(long lower, long upper) {\n+        if (lower >= upper) {\n+            throw new IllegalArgumentException\n+                (\"upper bound must be > lower bound\");\n+        }\n+        Random rand = getRan();\n+        return lower + (long) (rand.nextDouble() * (upper - lower + 1));\n+    }\n+    \n+     /**\n+     * <strong>Algorithm Description:</strong> hex strings are generated in \n+     * 40-byte segments using a 3-step process. <ol>\n+     * <li>\n+     * 20 random bytes are generated using the underlying \n+     * <code>SecureRandom</code>.</li>\n+     * <li>\n+     * SHA-1 hash is applied to yield a 20-byte binary digest.</li>\n+     * <li>\n+     * Each byte of the binary digest is converted to 2 hex digits</li></ol>\n+     * <p>\n+     * TODO: find external reference or provide justification for the claim \n+     * that this yields a cryptographically secure sequence of hex strings.\n+     * @param len the desired string length.\n+     * @return the random string.\n+     */\n+    public String nextSecureHexString(int len) {\n+        if (len <= 0) {\n+            throw new IllegalArgumentException(\"length must be positive\");\n+        }\n+       \n+       // Get SecureRandom and setup Digest provider\n+       SecureRandom secRan = getSecRan();\n+       MessageDigest alg = null;\n+       try {\n+            alg = MessageDigest.getInstance(\"SHA-1\");\n+       } catch (NoSuchAlgorithmException ex) {\n+           return null; // gulp FIXME? -- this *should* never fail.\n+       }\n+       alg.reset(); \n+       \n+       //Compute number of iterations required (40 bytes each)\n+       int numIter = (len / 40) + 1;\n+       \n+       StringBuffer outBuffer = new StringBuffer();\n+       for (int iter = 1; iter < numIter + 1; iter++) {\n+            byte[] randomBytes = new byte[40];\n+            secRan.nextBytes(randomBytes);\n+            alg.update(randomBytes);\n+    \n+            //Compute hash -- will create 20-byte binary hash\n+            byte hash[] = alg.digest();\n+            \n+            //Loop over the hash, converting each byte to 2 hex digits\n+            for (int i = 0; i < hash.length; i++) {\n+                Integer c = new Integer(hash[i]);\n+        \n+                /* Add 128 to byte value to make interval 0-255\n+                 * This guarantees <= 2 hex digits from toHexString()\n+                 * toHexString would otherwise add 2^32 to negative \n+                 * arguments\n+                 */\n+                String hex = Integer.toHexString(c.intValue() + 128);\n+                    \n+               //Keep strings uniform length -- guarantees 40 bytes\n+                if (hex.length() == 1) {\n+                    hex = \"0\" + hex;\n+                }\n+               outBuffer.append(hex);\n+            }\n+        }\n+        return outBuffer.toString().substring(0, len);\n+    }\n+     \n+    /**\n+     * Generate a random int value uniformly distributed between\n+     * <code>lower</code> and <code>upper</code>, inclusive.  This algorithm\n+     * using a secure random number generator for its engine.\n+     * @param lower the lower bound.\n+     * @param upper the upper bound.\n+     * @return the random integer.\n+     */       \n+    public int nextSecureInt(int lower, int upper) {\n+          if (lower >= upper) {\n+              throw new IllegalArgumentException\n+                (\"lower bound must be < upper bound\");\n+          }\n+          SecureRandom sec = getSecRan();\n+          return lower + (int) (sec.nextDouble() * (upper - lower + 1));\n+    }\n+     \n+    /**\n+     * Generate a random long value uniformly distributed between\n+     * <code>lower</code> and <code>upper</code>, inclusive.  This algorithm\n+     * using a secure random number generator for its engine.\n+     * @param lower the lower bound.\n+     * @param upper the upper bound.\n+     * @return the random integer.\n+     */       \n+    public long nextSecureLong(long lower, long upper) {\n+        if (lower >= upper) {\n+            throw new IllegalArgumentException\n+            (\"lower bound must be < upper bound\");\n+        }\n+        SecureRandom sec = getSecRan();\n+        return lower + (long) (sec.nextDouble() * (upper - lower + 1));\n+    }\n+    \n+    /** \n+     * <strong>Algorithm Description</strong>:\n+     * Uses simulation of a Poisson process using Uniform deviates, as \n+     * described \n+     * <a href =\"http://dmawww.epfl.ch/benarous/Pmmi/interactive/rng7.htm\">\n+     * here</a>\n+     * @param mean mean of the Poisson distribution.\n+     * @return the random Poisson value.\n+     */\n+    public long nextPoisson(double mean) {\n+        if (mean <= 0) {\n+            throw new IllegalArgumentException(\"Poisson mean must be > 0\");\n+        }\n+        double p = Math.exp(-mean);\n+        long n = 0;\n+        double r = 1.0d;\n+        Random rand = getRan();\n+        while (true) {\n+            double rnd = rand.nextDouble();\n+            r = r * rnd;\n+            if (r >= p) {\n+                n++;\n+            } else {\n+                return n;\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Generate a random value from a Normal distribution.  This algorithm \n+     * generates random values for the general Normal distribution with the\n+     * given mean, <code>mu</code> and the given standard deviation,\n+     * <code>sigma</code>.\n+     * @param mu the mean of the distribution.\n+     * @param sigma the standard deviation of the distribution.\n+     * @return the random Normal value.\n+     */\n+    public double nextGaussian(double mu, double sigma) {\n+        if (sigma <= 0) {\n+            throw new IllegalArgumentException(\"Gaussian std dev must be > 0\");\n+        }\n+        Random rand = getRan();\n+        return sigma * rand.nextGaussian() + mu;\n+    }\n+    \n+    /**\n+     * <strong>Algorithm Description</strong>:  Uses the \n+     * <a href=\"http://www.jesus.ox.ac.uk/~clifford/a5/chap1/node5.html\"> \n+     * Inversion Method</a> to generate exponential from uniform deviates.\n+     * @param mean the mean of the distribution.\n+     * @return the random Exponential value.\n+     */\n+    public double nextExponential(double mean)  {\n+        if (mean < 0.0)  {\n+            throw new IllegalArgumentException\n+                (\"Exponential mean must be >= 0\");\n+        }\n+        Random rand = getRan();\n+        double unif = rand.nextDouble();\n+        while (unif == 0.0d) {\n+            unif = rand.nextDouble();\n+        }\n+        return -mean * Math.log(unif);\n+    }\n+    \n+    /**\n+     * <strong>Algorithm Description</strong>: scales the output of \n+     * Random.nextDouble(), but rejects 0 values (i.e., will generate another\n+     * random double if Random.nextDouble() returns 0). \n+     * This is necessary to provide a symmetric output interval \n+     * (both endpoints excluded).\n+     * @param lower the lower bound.\n+     * @param upper the upper bound.\n+     * @return the random value.\n+     */\n+    public double nextUniform(double lower, double upper) {\n+        if (lower >= upper) {\n+            throw new IllegalArgumentException\n+            (\"lower bound must be <= upper bound\");\n+        }\n+        Random rand = getRan();\n+        \n+        // insure nextDouble() isn't 0.0\n+        double u = rand.nextDouble();\n+        while(u <= 0.0){\n+            u = rand.nextDouble();\n+        }\n+        \n+        return lower + u * (upper - lower);\n+    }\n+    \n+    /** \n+     * Returns the static Random used to generate random data.\n+     * <p>\n+     * Creates and initializes if null.\n+     * \n+     * @return the static Random used to generate random data\n+     */\n+    private Random getRan() {\n+        if (rand == null) {\n+            rand = new Random();\n+            rand.setSeed(System.currentTimeMillis());\n+        }\n+        return rand;\n+    }\n+    \n+    /** \n+     * Returns the static SecureRandom used to generate secure random data.\n+     * <p>\n+     * Creates and initializes if null.\n+     *\n+     * @return the static SecureRandom used to generate secure random data\n+     */\n+    private SecureRandom getSecRan() {\n+        if (secRand == null) {\n+            secRand = new SecureRandom();\n+            secRand.setSeed(System.currentTimeMillis());\n+        }\n+        return secRand;\n+    }\n+    \n+    /**\n+     * Reseeds the random number generator with the supplied seed.\n+     * <p>\n+     * Will create and initialize if null.\n+     *\n+     * @param seed the seed value to use\n+     */\n+    public void reSeed(long seed) {\n+        if (rand == null) {\n+            rand = new Random();\n+        }\n+        rand.setSeed(seed);\n+    }\n+    \n+    /**\n+     * Reseeds the secure random number generator with the current time\n+     * in milliseconds. \n+     * <p> \n+     * Will create and initialize if null.\n+     */\n+    public void reSeedSecure() {\n+        if (secRand == null) {\n+            secRand = new SecureRandom();\n+        }\n+        secRand.setSeed(System.currentTimeMillis());\n+    }\n+    \n+    /**\n+     * Reseeds the secure random number generator with the supplied seed.\n+     * <p>\n+     * Will create and initialize if null.\n+     *\n+     * @param seed the seed value to use\n+     */\n+    public void reSeedSecure(long seed) {\n+        if (secRand == null) {\n+            secRand = new SecureRandom();\n+        }\n+        secRand.setSeed(seed);\n+    }\n+    \n+    /**\n+     * Reseeds the random number generator with the current time\n+     * in milliseconds.\n+     */\n+    public void reSeed() {\n+        if (rand == null) {\n+            rand = new Random();\n+        }\n+        rand.setSeed(System.currentTimeMillis());\n+    }\n+    \n+    /**\n+     * Sets the PRNG algorithm for the underlying SecureRandom instance\n+     * using the Security Provider API.  The Security Provider API is defined in \n+     * <a href=\"http://java.sun.com/j2se/1.3/docs/guide/security/CryptoSpec.html#AppA\">\n+     * Java Cryptography Architecture API Specification & Reference.</a>\n+     * <p>\n+     * <strong>USAGE NOTE:</strong> This method carries <i>significant</i> \n+     * overhead and may take several seconds to execute.\n+     * </p>\n+     *\n+     * @param algorithm the name of the PRNG algorithm\n+     * @param provider the name of the provider \n+     * @throws NoSuchAlgorithmException if the specified algorithm \n+     * is not available\n+     * @throws NoSuchProviderException if the specified provider \n+     * is not installed\n+     */\n+    public void setSecureAlgorithm(String algorithm, String provider) \n+        throws NoSuchAlgorithmException, NoSuchProviderException {\n+        secRand = SecureRandom.getInstance(algorithm, provider);\n+    }\n+    \n+    /**\n+     * Uses a 2-cycle permutation shuffle to generate a random permutation.\n+     * The shuffling process is described\n+     * <a href=http://www.maths.abdn.ac.uk/~igc/tch/mx4002/notes/node83.html>\n+     * here</a>.\n+     * @param n the population size.\n+     * @param k the number to choose.\n+     * @return the random permutation.\n+     */\n+    public int[] nextPermutation(int n, int k) {\n+        if (k > n) {\n+            throw new IllegalArgumentException\n+                (\"permutation k exceeds n\");\n+        }       \n+        if (k == 0) {\n+            throw new IllegalArgumentException\n+                (\"permutation k must be > 0\");\n+        }\n+        \n+        int[] index = getNatural(n);\n+        shuffle(index, n - k);\n+        int[] result = new int[k];\n+        for (int i = 0; i < k; i++) {\n+            result[i] = index[n - i - 1];\n+        }\n+  \n+        return result;\n+    }\n+    \n+    /**\n+     * Uses a 2-cycle permutation shuffle to generate a random permutation.\n+     * <strong>Algorithm Description</strong>: Uses a 2-cycle permutation \n+     * shuffle to generate a random permutation of <code>c.size()</code> and \n+     * then returns the elements whose indexes correspond to the elements of \n+     * the generated permutation.  \n+     * This technique is described, and proven to generate random samples, \n+     * <a href=\"http://www.maths.abdn.ac.uk/~igc/tch/mx4002/notes/node83.html\">\n+     * here</a>\n+     * @param c Collection to sample from.\n+     * @param k sample size.\n+     * @return the random sample.\n+     */ \n+    public Object[] nextSample(Collection c, int k) {\n+        int len = c.size();\n+        if (k > len) {\n+            throw new IllegalArgumentException\n+                (\"sample size exceeds collection size\");\n+        }\n+        if (k == 0) {\n+            throw new IllegalArgumentException\n+                (\"sample size must be > 0\");\n+        }\n+            \n+       Object[] objects = c.toArray();\n+       int[] index = nextPermutation(len, k);\n+       Object[] result = new Object[k];\n+       for (int i = 0; i < k; i++) {\n+           result[i] = objects[index[i]];\n+       }  \n+       return result;\n+    }\n+    \n+    //------------------------Private methods----------------------------------\n+    \n+    /** \n+     * Uses a 2-cycle permutation shuffle to randomly re-order the last elements\n+     * of list.\n+     * \n+     * @param list list to be shuffled\n+     * @param end element past which shuffling begins\n+     */\n+    private void shuffle(int[] list, int end) {\n+        int target = 0;\n+        for (int i = list.length - 1 ; i >= end; i--) {\n+            if (i == 0) {\n+                target = 0; \n+            } else {\n+                target = nextInt(0, i);\n+            }\n+            int temp = list[target];\n+            list[target] = list[i];\n+            list[i] = temp;\n+        }      \n+    }\n+    \n+    /**\n+     * Returns an array representing n.\n+     *\n+     * @param n the natural number to represent\n+     * @return array with entries = elements of n\n+     */\n+    private int[] getNatural(int n) {\n+        int[] natural = new int[n];\n+        for (int i = 0; i < n; i++) {\n+            natural[i] = i;\n+        }\n+        return natural;\n+    }\n+        \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/random/ValueServer.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.random;\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.File;\n+import java.net.URL;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+\n+/**\n+ * Generates values for use in simulation applications.\n+ * <p>\n+ * How values are generated is determined by the <code>mode</code>\n+ * property. \n+ * <p> \n+ * Supported <code>mode</code> values are: <ul>\n+ * <li> DIGEST_MODE -- uses an empirical distribution </li>\n+ * <li> REPLAY_MODE -- replays data from <code>valuesFile</code></li> \n+ * <li> UNIFORM_MODE -- generates uniformly distributed random values with\n+ *                      mean = <code>mu</code> </li>\n+ * <li> EXPONENTIAL_MODE -- generates exponentially distributed random values\n+ *                         with mean = <code>mu</code></li>\n+ * <li> GAUSSIAN_MODE -- generates Gaussian distributed random values with\n+ *                       mean = <code>mu</code> and \n+ *                       standard deviation = <code>sigma</code></li>\n+ * <li> CONSTANT_MODE -- returns <code>mu</code> every time.</li></ul> \n+ *\n+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:21 $\n+ *\n+ */\n+public class ValueServer {\n+    /** mode determines how values are generated */\n+    private int mode = 5;\n+    \n+    /** URI to raw data values  */\n+    private URL valuesFileURL = null;\n+    \n+    /** Mean for use with non-data-driven modes */\n+    private double mu = 0.0;\n+    \n+    /** Standard deviation for use with GAUSSIAN_MODE */\n+    private double sigma = 0.0;\n+    \n+    /** Empirical probability distribution for use with DIGEST_MODE */\n+    private EmpiricalDistribution empiricalDistribution = null;\n+    \n+    /** file pointer for REPLAY_MODE */\n+    private BufferedReader filePointer = null;\n+    \n+    /** RandomDataImpl to use for random data generation */\n+    private RandomDataImpl randomData = new RandomDataImpl();\n+    \n+    // Data generation modes ======================================\n+   \n+    /** Use empirical distribution  */\n+    public static final int DIGEST_MODE = 0;        \n+    \n+    /** Replay data from valuesFilePath */\n+    public static final int REPLAY_MODE = 1;      \n+    \n+    /** Uniform random deviates with mean = mu */\n+    public static final int UNIFORM_MODE = 2;    \n+    \n+    /** Exponential random deviates with mean = mu */\n+    public static final int EXPONENTIAL_MODE = 3;  \n+    \n+    /** Gaussian random deviates with mean = mu, std dev = sigma */\n+    public static final int GAUSSIAN_MODE = 4;  \n+    \n+    /** Always return mu */\n+    public static final int CONSTANT_MODE = 5;   \n+    \n+    /** Creates new ValueServer */\n+    public ValueServer() {\n+    }\n+\n+    /** \n+     * Returns the next generated value, generated according\n+     * to the mode value (see MODE constants). \n+     *\n+     * @return generated value \n+     * @throws IOException in REPLAY_MODE if a file I/O error occurs\n+     */\n+    public double getNext() throws IOException {\n+        switch (mode) {\n+            case DIGEST_MODE: return getNextDigest();\n+            case REPLAY_MODE: return getNextReplay();\n+            case UNIFORM_MODE: return getNextUniform();\n+            case EXPONENTIAL_MODE: return getNextExponential();\n+            case GAUSSIAN_MODE: return getNextGaussian();\n+            case CONSTANT_MODE: return mu;\n+            default: throw new IllegalStateException\n+                       (\"Bad mode: \" + mode);\n+        }\n+    }\n+    \n+    /**\n+     * Fills the input array with values generated using getNext() repeatedly.\n+     *\n+     * @param values array to be filled\n+     * @throws IOException in REPLAY_MODE if a file I/O error occurs\n+     */\n+    public void fill(double[] values) throws IOException {\n+        for (int i = 0; i < values.length; i++) {\n+            values[i] = getNext();\n+        }\n+    }\n+    \n+    /**\n+     * Returns an array of length <code>length</code> with values generated \n+     * using getNext() repeatedly.\n+     *\n+     * @param length length of output array\n+     * @return array of generated values\n+     * @throws IOException in REPLAY_MODE if a file I/O error occurs\n+     */\n+    public double[] fill(int length) throws IOException {\n+        double[] out = new double[length];\n+        for (int i = 0; i < length; i++) {\n+            out[i] = getNext();\n+        }\n+        return out;\n+    }       \n+    \n+    /** \n+     * Computes the empirical distribution using values from the file\n+     * in <code>valuesFilePath</code>, using the default number of bins.\n+     * <p>\n+     * <code>valuesFileURL</code> must exist and be\n+     * readable by *this at runtime.\n+     * <p>\n+     * This method must be called before using <code>getNext()</code>\n+     * with <code>mode = DISGEST_MODE</code>\n+     *\n+     * @throws IOException if an I/O error occurs reading the input file\n+     */\n+    public void computeDistribution() throws IOException {\n+        empiricalDistribution = new EmpiricalDistributionImpl();\n+        empiricalDistribution.load(valuesFileURL.getFile());\n+    }\n+    \n+    /** \n+     * Computes the empirical distribution using values from the file\n+     * in <code>valuesFilePath</code> and <code>binCount</code> bins.\n+     * <p>\n+     * <code>valuesFileURL</code> must exist and be\n+     * readable by *this at runtime.\n+     * <p>\n+     * This method must be called before using <code>getNext()</code>\n+     * with <code>mode = DISGEST_MODE</code>\n+     *\n+     * @param binCount the number of bins used in computing the empirical\n+     * distribution\n+     * @throws IOException if an error occurs reading the input file\n+     */\n+    public void computeDistribution(int binCount) \n+            throws IOException {\n+        empiricalDistribution = new EmpiricalDistributionImpl(binCount);\n+        empiricalDistribution.load(valuesFileURL.getFile());\n+        mu = empiricalDistribution.getSampleStats().getMean();\n+        sigma = empiricalDistribution.getSampleStats().getStandardDeviation();\n+    }\n+    \n+    /** Getter for property mode.\n+     * @return Value of property mode.\n+     */\n+    public int getMode() {\n+        return mode;\n+    }\n+    \n+    /** Setter for property mode.\n+     * @param mode New value of property mode.\n+     */\n+    public void setMode(int mode) {\n+        this.mode = mode;\n+    }\n+    \n+    /** Getter for property valuesFilePath.\n+     * @return Value of property valuesFilePath.\n+     */\n+    public String getValuesFileURL() {\n+        return valuesFileURL.toString();\n+    }\n+    \n+    /** Setter for property valuesFilePath.\n+     * @param url New value of property valuesFilePath.\n+     * @throws MalformedURLException if url is not well formed\n+     */\n+    public void setValuesFileURL(String url) throws MalformedURLException {\n+        this.valuesFileURL = new URL(url);\n+    }\n+    \n+    /** Getter for property empiricalDistribution.\n+     * @return Value of property empiricalDistribution.\n+     */\n+    public EmpiricalDistribution getEmpiricalDistribution() {\n+        return empiricalDistribution;\n+    }    \n+    \n+    /**  \n+     * Opens <code>valuesFilePath</code> to use in REPLAY_MODE.\n+     *\n+     * @throws IOException if an error occurs opening the file\n+     */\n+    public void openReplayFile() throws IOException {\n+        filePointer = new BufferedReader(new FileReader\n+                            (new File(valuesFileURL.getFile())));\n+    }\n+    \n+    /** \n+     * Closes <code>valuesFilePath</code> after use in REPLAY_MODE.\n+     *\n+     * @throws IOException if an error occurs closing the file\n+     */\n+    public void closeReplayFile() throws IOException {\n+        if (filePointer != null) {\n+            filePointer.close();\n+            filePointer = null;\n+        }     \n+    }\n+    \n+    /** Getter for property mu.\n+     * @return Value of property mu.\n+     */\n+    public double getMu() {\n+        return mu;\n+    }\n+    \n+    /** Setter for property mu.\n+     * @param mu New value of property mu.\n+     */\n+    public void setMu(double mu) {\n+        this.mu = mu;\n+    }\n+    \n+    /** Getter for property sigma.\n+     * @return Value of property sigma.\n+     */\n+    public double getSigma() {\n+        return sigma;\n+    }\n+    \n+    /** Setter for property sigma.\n+     * @param sigma New value of property sigma.\n+     */\n+    public void setSigma(double sigma) {\n+        this.sigma = sigma;\n+    }\n+    \n+    //------------- private methods ---------------------------------\n+    \n+    /** \n+     * Gets a random value in DIGEST_MODE.\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>Before this method is called, <code>computeDistribution()</code>\n+     * must have completed successfully; otherwise an \n+     * <code>IllegalStateException</code> will be thrown</li></ul>\n+     *\n+     * @return next random value from the empirical distribution digest \n+     */\n+    private double getNextDigest() {\n+        if ((empiricalDistribution == null) ||\n+            (empiricalDistribution.getBinStats().size() == 0)) {\n+            throw new IllegalStateException(\"Digest not initialized\");\n+        }\n+        return empiricalDistribution.getNextValue();     \n+    }\n+    \n+    /**\n+     * Gets next sequential value from the <code>valuesFilePath</code> \n+     * opened by <code>openReplayFile()</code>.\n+     * <p>\n+     * Throws an IOException if <code>filePointer</code> is null or read fails.\n+     * Will wrap around to BOF is EOF is encountered.\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li> openReplayfile() must have completed successfully before \n+     * invoking this method; otherwise an <code>IlleglaStateException</code>\n+     * will be thrown</li></ul>\n+     *\n+     * @return next value from the replay file\n+     * @throws IOException if there is a problem reading from the file\n+     */\n+    private double getNextReplay() throws IOException {\n+        String str = null;\n+        if (filePointer == null) {\n+            throw new IllegalStateException(\"replay file not open\");\n+        }\n+        if ((str = filePointer.readLine()) == null) {\n+            closeReplayFile();\n+            openReplayFile();\n+            str = filePointer.readLine();\n+        }         \n+        return new Double(str).doubleValue();\n+    }\n+    \n+    /** \n+     * Gets a uniformly distributed random value with mean = mu. \n+     *\n+     * @return random uniform value\n+     */\n+    private double getNextUniform() {\n+        return randomData.nextUniform(0, 2 * mu);\n+    }\n+    \n+    /** \n+     * Gets an exponentially distributed random value with mean = mu. \n+     *\n+     * @return random exponential value\n+     */\n+    private double getNextExponential() {\n+        return randomData.nextExponential(mu);    \n+    }\n+    \n+    /** \n+     * Gets a Gaussian distributed random value with mean = mu\n+     * and standard deviation = sigma.\n+     *\n+     * @return random Gaussian value\n+     */\n+    private double getNextGaussian() {\n+        return randomData.nextGaussian(mu, sigma);\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/special/Beta.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.special;\n+\n+import org.apache.commons.math.MathException;\n+import org.apache.commons.math.util.ContinuedFraction;\n+\n+/**\n+ * This is a utility class that provides computation methods related to the\n+ * Beta family of functions.\n+ * \n+ * @version $Revision: 1.12 $ $Date: 2003/11/14 22:22:17 $\n+ */\n+public class Beta {\n+    /** Maximum allowed numerical error. */\n+    private static final double DEFAULT_EPSILON = 10e-9;\n+\n+    /**\n+     * Default constructor.  Prohibit instantiation.\n+     */\n+    private Beta() {\n+        super();\n+    }\n+\n+    /**\n+     * Returns the regularized beta function I(x, a, b).\n+     * \n+     * @param x ???\n+     * @param a ???\n+     * @param b ???\n+     * @return the regularized beta function I(x, a, b)\n+     * @throws MathException if the algorithm fails to converge.\n+     */\n+    public static double regularizedBeta(double x, double a, double b)\n+        throws MathException\n+    {\n+        return regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n+    }\n+\n+    /**\n+     * Returns the regularized beta function I(x, a, b).\n+     * \n+     * @param x ???\n+     * @param a ???\n+     * @param b ???\n+     * @param epsilon When the absolute value of the nth item in the\n+     *                series is less than epsilon the approximation ceases\n+     *                to calculate further elements in the series.\n+     * @return the regularized beta function I(x, a, b)\n+     * @throws MathException if the algorithm fails to converge.\n+     */\n+    public static double regularizedBeta(double x, double a, double b,\n+        double epsilon) throws MathException\n+    {\n+        return regularizedBeta(x, a, b, epsilon, Integer.MAX_VALUE);\n+    }\n+\n+    /**\n+     * Returns the regularized beta function I(x, a, b).\n+     * \n+     * @param x ???\n+     * @param a ???\n+     * @param b ???\n+     * @param maxIterations Maximum number of \"iterations\" to complete. \n+     * @return the regularized beta function I(x, a, b)\n+     * @throws MathException if the algorithm fails to converge.\n+     */\n+    public static double regularizedBeta(double x, double a, double b,\n+        int maxIterations) throws MathException\n+    {\n+        return regularizedBeta(x, a, b, DEFAULT_EPSILON, maxIterations);\n+    }\n+    \n+    /**\n+     * Returns the regularized beta function I(x, a, b).\n+     * \n+     * The implementation of this method is based on:\n+     * <ul>\n+     * <li>\n+     * <a href=\"http://mathworld.wolfram.com/RegularizedBetaFunction.html\">\n+     * Regularized Beta Function</a>.</li>\n+     * <li>\n+     * <a href=\"http://functions.wolfram.com/06.21.10.0001.01\">\n+     * Regularized Beta Function</a>.</li>\n+     * </ul>\n+     * \n+     * @param x ???\n+     * @param a ???\n+     * @param b ???\n+     * @param epsilon When the absolute value of the nth item in the\n+     *                series is less than epsilon the approximation ceases\n+     *                to calculate further elements in the series.\n+     * @param maxIterations Maximum number of \"iterations\" to complete. \n+     * @return the regularized beta function I(x, a, b)\n+     * @throws MathException if the algorithm fails to converge.\n+     */\n+    public static double regularizedBeta(double x, final double a,\n+        final double b, double epsilon, int maxIterations) throws MathException\n+    {\n+        double ret;\n+\n+        if (Double.isNaN(x) || Double.isNaN(a) || Double.isNaN(b) || (x < 0) ||\n+            (x > 1) || (a <= 0.0) || (b <= 0.0)) {\n+            ret = Double.NaN;\n+        } else {\n+            ContinuedFraction fraction = new ContinuedFraction() {\n+                protected double getB(int n, double x) {\n+                    double ret;\n+                    double m;\n+                    switch (n) {\n+                        case 1 :\n+                            ret = 1.0;\n+                            break;\n+                        default :\n+                            if (n % 2 == 0) { // even\n+                                m = (n - 2.0) / 2.0;\n+                                ret = -((a + m) * (a + b + m) * x) /\n+                                    ((a + (2 * m)) * (a + (2 * m) + 1.0));\n+                            } else {\n+                                m = (n - 1.0) / 2.0;\n+                                ret = (m * (b - m) * x) /\n+                                    ((a + (2 * m) - 1) * (a + (2 * m)));\n+                            }\n+                            break;\n+                    }\n+                    return ret;\n+                }\n+\n+                protected double getA(int n, double x) {\n+                    double ret;\n+                    switch (n) {\n+                        case 0 :\n+                            ret = 0.0;\n+                            break;\n+                        default :\n+                            ret = 1.0;\n+                            break;\n+                    }\n+                    return ret;\n+                }\n+            };\n+            ret = Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x)) -\n+                Math.log(a) - logBeta(a, b, epsilon, maxIterations)) *\n+                fraction.evaluate(x, epsilon, maxIterations);\n+        }\n+\n+        return ret;\n+    }\n+\n+    /**\n+     * Returns the natural logarithm of the beta function B(a, b).\n+     * \n+     * @param a ???\n+     * @param b ???\n+     * @return log(B(a, b))\n+     */\n+    public static double logBeta(double a, double b) {\n+        return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n+    }\n+    \n+    /**\n+     * Returns the natural logarithm of the beta function B(a, b).\n+     *\n+     * The implementation of this method is based on:\n+     * <ul>\n+     * <li><a href=\"http://mathworld.wolfram.com/BetaFunction.html\">\n+     * Beta Function</a>, equation (1).</li>\n+     * </ul>\n+     * \n+     * @param a ???\n+     * @param b ???\n+     * @param epsilon When the absolute value of the nth item in the\n+     *                series is less than epsilon the approximation ceases\n+     *                to calculate further elements in the series.\n+     * @param maxIterations Maximum number of \"iterations\" to complete. \n+     * @return log(B(a, b))\n+     */\n+    public static double logBeta(double a, double b, double epsilon,\n+        int maxIterations) {\n+            \n+        double ret;\n+\n+        if (Double.isNaN(a) || Double.isNaN(b) || (a <= 0.0) || (b <= 0.0)) {\n+            ret = Double.NaN;\n+        } else {\n+            ret = Gamma.logGamma(a) + Gamma.logGamma(b) -\n+                Gamma.logGamma(a + b);\n+        }\n+\n+        return ret;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.special;\n+\n+import org.apache.commons.math.ConvergenceException;\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ * This is a utility class that provides computation methods related to the\n+ * Gamma family of functions.\n+ * \n+ * @version $Revision: 1.14 $ $Date: 2003/11/14 22:22:17 $\n+ */\n+public class Gamma {\n+    /** Maximum allowed numerical error. */\n+    private static final double DEFAULT_EPSILON = 10e-9;\n+\n+    /** Lanczos coefficients */\n+    private static double[] lanczos =\n+    {\n+        0.99999999999999709182,\n+        57.156235665862923517,\n+        -59.597960355475491248,\n+        14.136097974741747174,\n+        -0.49191381609762019978,\n+        .33994649984811888699e-4,\n+        .46523628927048575665e-4,\n+        -.98374475304879564677e-4,\n+        .15808870322491248884e-3,\n+        -.21026444172410488319e-3,\n+        .21743961811521264320e-3,\n+        -.16431810653676389022e-3,\n+        .84418223983852743293e-4,\n+        -.26190838401581408670e-4,\n+        .36899182659531622704e-5,\n+    };\n+\n+    \n+    /**\n+     * Default constructor.  Prohibit instantiation.\n+     */\n+    private Gamma() {\n+        super();\n+    }\n+\n+    /**\n+     * Returns the regularized gamma function P(a, x).\n+     * \n+     * @param a ???\n+     * @param x ???\n+     * @return the regularized gamma function P(a, x)\n+     * @throws MathException if the algorithm fails to converge.\n+     */\n+    public static double regularizedGammaP(double a, double x)\n+        throws MathException\n+    {\n+        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);\n+    }\n+    \n+    /**\n+     * Returns the regularized gamma function P(a, x).\n+     * \n+     * The implementation of this method is based on:\n+     * <ul>\n+     * <li>\n+     * <a href=\"http://mathworld.wolfram.com/RegularizedGammaFunction.html\">\n+     * Regularized Gamma Function</a>, equation (1).</li>\n+     * <li>\n+     * <a href=\"http://mathworld.wolfram.com/IncompleteGammaFunction.html\">\n+     * Incomplete Gamma Function</a>, equation (4).</li>\n+     * <li>\n+     * <a href=\"http://mathworld.wolfram.com/ConfluentHypergeometricFunctionoftheFirstKind.html\">\n+     * Confluent Hypergeometric Function of the First Kind</a>, equation (1).\n+     * </li>\n+     * </ul>\n+     * \n+     * @param a ???\n+     * @param x ???\n+     * @param epsilon When the absolute value of the nth item in the\n+     *                series is less than epsilon the approximation ceases\n+     *                to calculate further elements in the series.\n+     * @param maxIterations Maximum number of \"iterations\" to complete. \n+     * @return the regularized gamma function P(a, x)\n+     * @throws MathException if the algorithm fails to converge.\n+     */\n+    public static double regularizedGammaP(double a, \n+                                           double x, \n+                                           double epsilon, \n+                                           int maxIterations) \n+        throws MathException\n+    {\n+        double ret;\n+\n+        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n+            ret = Double.NaN;\n+        } else if (x == 0.0) {\n+            ret = 0.0;\n+        } else {\n+            // calculate series\n+            double n = 0.0; // current element index\n+            double an = 1.0 / a; // n-th element in the series\n+            double sum = an; // partial sum\n+            while (Math.abs(an) > epsilon && n < maxIterations) {\n+                // compute next element in the series\n+                n = n + 1.0;\n+                an = an * (x / (a + n));\n+\n+                // update partial sum\n+                sum = sum + an;\n+            }\n+            if (n >= maxIterations) {\n+                throw new ConvergenceException(\n+                    \"maximum number of iterations reached\");\n+            } else {\n+                ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\n+            }\n+        }\n+\n+        return ret;\n+    }\n+\n+    /**\n+     * Returns the natural logarithm of the gamma function &#915;(x).\n+     *\n+     * The implementation of this method is based on:\n+     * <ul>\n+     * <li><a href=\"http://mathworld.wolfram.com/GammaFunction.html\">\n+     * Gamma Function</a>, equation (28).</li>\n+     * <li><a href=\"http://mathworld.wolfram.com/LanczosApproximation.html\">\n+     * Lanczos Approximation</a>, equations (1) through (5).</li>\n+     * <li><a href=\"http://my.fit.edu/~gabdo/gamma.txt\">Paul Godfrey, A note on\n+     * the computation of the convergent Lanczos complex Gamma approximation\n+     * </a></li>\n+     * </ul>\n+     * \n+     * @param x ???\n+     * @return log(&#915;(x))\n+     */\n+    public static double logGamma(double x) {\n+        double ret;\n+\n+        if (Double.isNaN(x) || (x <= 0.0)) {\n+            ret = Double.NaN;\n+        } else {\n+            double g = 607.0 / 128.0;\n+\n+            double sum = 0.0;\n+            for (int i = 1; i < lanczos.length; ++i) {\n+                sum = sum + (lanczos[i] / (x + i));\n+            }\n+            sum = sum + lanczos[0];\n+\n+            double tmp = x + g + .5;\n+            ret = ((x + .5) * Math.log(tmp)) - tmp +\n+                (.5 * Math.log(2.0 * Math.PI)) + Math.log(sum) - Math.log(x);\n+        }\n+\n+        return ret;\n+    }\n+}\n+\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import java.util.Arrays;\n+\n+import org.apache.commons.math.stat.univariate.rank.Percentile;\n+\n+/**\n+ * Provides univariate measures for an array of doubles. \n+ * @version $Revision: 1.15 $ $Date: 2003/11/14 22:22:18 $\n+ */\n+public abstract class AbstractStoreUnivariate\n+    extends AbstractUnivariate\n+    implements StoreUnivariate {\n+\n+    /** Percentile */\n+    protected Percentile percentile = new Percentile(50);\n+        \n+    /**\n+     * Create an AbstractStoreUnivariate\n+     */\n+    public AbstractStoreUnivariate() {\n+        super();\n+    }\n+\n+    /**\n+     * Create an AbstractStoreUnivariate with a specific Window\n+     * @param window WindowSIze for stat calculation\n+     */\n+    public AbstractStoreUnivariate(int window) {\n+        super(window);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.StoreUnivariate#getPercentile(double)\n+     */\n+    public double getPercentile(double p) {\n+        percentile.setPercentile(p);\n+        return apply(percentile);\n+    }\n+    \n+    /**\n+     * @see org.apache.commons.math.stat.StoreUnivariate#getSortedValues()\n+     */\n+    public double[] getSortedValues() {\n+        double[] sort = getValues();\n+        Arrays.sort(sort);\n+        return sort;\n+    }\n+    \n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#addValue(double)\n+     */\n+    public abstract void addValue(double value);\n+\n+    /**\n+     * @see org.apache.commons.math.stat.StoreUnivariate#getValues()\n+     */\n+    public abstract double[] getValues();\n+\n+\n+    /**\n+     * @see org.apache.commons.math.stat.StoreUnivariate#getElement(int)\n+     */\n+    public abstract double getElement(int index);\n+\n+\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/AbstractUnivariate.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n+import org.apache.commons.math.stat.univariate.moment.FourthMoment;\n+import org.apache.commons.math.stat.univariate.moment.GeometricMean;\n+import org.apache.commons.math.stat.univariate.moment.Kurtosis;\n+import org.apache.commons.math.stat.univariate.moment.Mean;\n+import org.apache.commons.math.stat.univariate.moment.Skewness;\n+import org.apache.commons.math.stat.univariate.moment.Variance;\n+import org.apache.commons.math.stat.univariate.rank.Max;\n+import org.apache.commons.math.stat.univariate.rank.Min;\n+import org.apache.commons.math.stat.univariate.summary.Sum;\n+import org.apache.commons.math.stat.univariate.summary.SumOfLogs;\n+import org.apache.commons.math.stat.univariate.summary.SumOfSquares;\n+\n+/**\n+ * Provides univariate measures for an array of doubles.\n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:18 $  \n+ */\n+public abstract class AbstractUnivariate implements Univariate {\n+\n+    /** hold the window size **/\n+    protected int windowSize = Univariate.INFINITE_WINDOW;\n+\n+    /** count of values that have been added */\n+    protected int n = 0;\n+\n+    /** FourthMoment is used in calculating mean, variance,skew and kurtosis */\n+    protected FourthMoment moment = null;\n+    \n+    /** sum of values that have been added */\n+    protected Sum sum = null;\n+\n+    /** sum of the square of each value that has been added */\n+    protected SumOfSquares sumsq = null;\n+\n+    /** min of values that have been added */\n+    protected Min min = null;\n+\n+    /** max of values that have been added */\n+    protected Max max = null;\n+\n+    /** sumLog of values that have been added */\n+    protected SumOfLogs sumLog = null;\n+\n+    /** geoMean of values that have been added */\n+    protected GeometricMean geoMean = null;\n+\n+    /** mean of values that have been added */\n+    protected Mean mean = null;\n+\n+    /** variance of values that have been added */\n+    protected Variance variance = null;\n+\n+    /** skewness of values that have been added */\n+    protected Skewness skewness = null;\n+\n+    /** kurtosis of values that have been added */\n+    protected Kurtosis kurtosis = null;\n+\n+    /**\n+     * Construct an AbstractUnivariate\n+     */\n+    public AbstractUnivariate() {\n+        super();\n+        \n+        sum = new Sum();\n+        sumsq = new SumOfSquares();\n+        min = new Min();\n+        max = new Max();\n+        sumLog = new SumOfLogs();\n+        geoMean = new GeometricMean();\n+\n+        moment = new FourthMoment();\n+        mean = new Mean(moment);\n+        variance = new Variance(moment);\n+        skewness = new Skewness(moment);\n+        kurtosis = new Kurtosis(moment);\n+    }\n+\n+    /**\n+     * Construct an AbstractUnivariate with a window\n+     * @param window The Window Size\n+     */\n+    public AbstractUnivariate(int window) {\n+        this();\n+        setWindowSize(window);\n+    }\n+\n+    /**\n+     * Apply the given statistic to this univariate collection.\n+     * @param stat the statistic to apply\n+     * @return the computed value of the statistic.\n+     */\n+    public abstract double apply(UnivariateStatistic stat);\n+    \n+\n+    /**\n+     * If windowSize is set to Infinite, \n+     * statistics are calculated using the following \n+     * <a href=\"http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf\">\n+     * recursive strategy\n+     * </a>.\n+     * @see org.apache.commons.math.stat.Univariate#addValue(double)\n+     */\n+    public abstract void addValue(double value);\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#getN()\n+     */\n+    public int getN() {\n+        return n;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#getSum()\n+     */\n+    public double getSum() {\n+        return apply(sum);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#getSumsq()\n+     */\n+    public double getSumsq() {\n+        return apply(sumsq);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#getMean()\n+     */\n+    public double getMean() {\n+        return apply(mean);\n+    }\n+\n+    /**\n+     * Returns the standard deviation for this collection of values\n+     * @see org.apache.commons.math.stat.Univariate#getStandardDeviation()\n+     */\n+    public double getStandardDeviation() {\n+        double stdDev = Double.NaN;\n+        if (getN() > 0) {\n+            if (getN() > 1) {\n+                stdDev = Math.sqrt(getVariance());\n+            } else {\n+                stdDev = 0.0;\n+            }\n+        }\n+        return (stdDev);\n+    }\n+\n+    /**\n+     * Returns the variance of the values that have been added via West's\n+     * algorithm as described by\n+     * <a href=\"http://doi.acm.org/10.1145/359146.359152\">Chan, T. F. and\n+     * J. G. Lewis 1979, <i>Communications of the ACM</i>,\n+     * vol. 22 no. 9, pp. 526-531.</a>.\n+     *\n+     * @return The variance of a set of values.  \n+     *         Double.NaN is returned for an empty \n+     *         set of values and 0.0 is returned for \n+     *         a &lt;= 1 value set.\n+     */\n+    public double getVariance() {\n+        return apply(variance);\n+    }\n+\n+    /**\n+     * Returns the skewness of the values that have been added as described by\n+     * <a href=\"http://mathworld.wolfram.com/k-Statistic.html\">\n+     * Equation (6) for k-Statistics</a>.\n+     * @return The skew of a set of values.  Double.NaN is returned for\n+     *         an empty set of values and 0.0 is returned for a \n+     *         &lt;= 2 value set.\n+     */\n+    public double getSkewness() {\n+        return apply(skewness);\n+    }\n+\n+    /**\n+     * Returns the kurtosis of the values that have been added as described by\n+     * <a href=\"http://mathworld.wolfram.com/k-Statistic.html\">\n+     * Equation (7) for k-Statistics</a>.\n+     *\n+     * @return The kurtosis of a set of values.  Double.NaN is returned for\n+     *         an empty set of values and 0.0 is returned for a &lt;= 3 \n+     *         value set.\n+     */\n+    public double getKurtosis() {\n+        return apply(kurtosis);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.StoreUnivariate#getKurtosisClass()\n+     */\n+    public int getKurtosisClass() {\n+        int kClass = Univariate.MESOKURTIC;\n+\n+        double kurtosis = getKurtosis();\n+        if (kurtosis > 0) {\n+            kClass = Univariate.LEPTOKURTIC;\n+        } else if (kurtosis < 0) {\n+            kClass = Univariate.PLATYKURTIC;\n+        }\n+        return (kClass);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#getMax()\n+     */\n+    public double getMax() {\n+        return apply(max);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#getMin()\n+     */\n+    public double getMin() {\n+        return apply(min);\n+    }\n+\n+    /**\n+    * @see org.apache.commons.math.stat.Univariate#getGeometricMean()\n+    */\n+    public double getGeometricMean() {\n+        return apply(geoMean);\n+    }\n+    \n+    /**\n+     * Generates a text report displaying\n+     * univariate statistics from values that\n+     * have been added.\n+     * @return String with line feeds displaying statistics\n+     */\n+    public String toString() {\n+        StringBuffer outBuffer = new StringBuffer();\n+        outBuffer.append(\"UnivariateImpl:\\n\");\n+        outBuffer.append(\"n: \" + n + \"\\n\");\n+        outBuffer.append(\"min: \" + min + \"\\n\");\n+        outBuffer.append(\"max: \" + max + \"\\n\");\n+        outBuffer.append(\"mean: \" + getMean() + \"\\n\");\n+        outBuffer.append(\"std dev: \" + getStandardDeviation() + \"\\n\");\n+        outBuffer.append(\"skewness: \" + getSkewness() + \"\\n\");\n+        outBuffer.append(\"kurtosis: \" + getKurtosis() + \"\\n\");\n+        return outBuffer.toString();\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#clear()\n+     */\n+    public void clear() {\n+        this.n = 0;\n+        min.clear();\n+        max.clear();\n+        sum.clear();\n+        sumLog.clear();\n+        sumsq.clear();\n+        geoMean.clear();\n+        \n+        moment.clear();\n+        mean.clear();\n+        variance.clear();\n+        skewness.clear();\n+        kurtosis.clear();\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#getWindowSize()\n+     */\n+    public int getWindowSize() {\n+        return windowSize;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#setWindowSize(int)\n+     */\n+    public void setWindowSize(int windowSize) {\n+        clear();\n+        this.windowSize = windowSize;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/Applyable.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n+\n+/**\n+ * Applyable.java\n+ * \n+ * TODO: add javadocs\n+ * \n+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:18 $\n+ */\n+public interface Applyable {\n+    \n+    /**\n+     * Applies a UnivariateStatistic object against this object \n+     * and returns the result.\n+     * @param stat The stat to apply.\n+     * @return The result value of the application.\n+     */\n+    double apply(UnivariateStatistic stat);\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import java.util.List;\n+\n+import org.apache.commons.math.util.BeanTransformer;\n+\n+/**\n+ * This implementation of StoreUnivariate uses commons-beanutils to gather\n+ * univariate statistics for a List of Java Beans by property.  This \n+ * implementation uses beanutils' PropertyUtils to get a simple, nested,\n+ * indexed, mapped, or combined property from an element of a List.\n+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:18 $\n+ */\n+public class BeanListUnivariateImpl extends ListUnivariateImpl {\n+\n+    /**\n+     * propertyName of the property to get from the bean\n+     */\n+    private String propertyName;\n+\n+    /**\n+     * Construct a BeanListUnivariate with specified\n+     * backing list\n+     * @param list Backing List\n+     */\n+    public BeanListUnivariateImpl(List list) {\n+        this(list, null);\n+    }\n+\n+    /**\n+     * Construct a BeanListUnivariate with specified\n+     * backing list and propertyName\n+     * @param list Backing List\n+     * @param propertyName Bean propertyName\n+     */\n+    public BeanListUnivariateImpl(List list, String propertyName) {\n+        super(list);\n+        setPropertyName(propertyName);\n+    }\n+\n+    /**\n+     * @return propertyName\n+     */\n+    public String getPropertyName() {\n+        return propertyName;\n+    }\n+\n+    /**\n+     * @param propertyName Name of Property\n+     */\n+    public void setPropertyName(String propertyName) {\n+        this.propertyName = propertyName;\n+        setTransformer(new BeanTransformer(propertyName));\n+    }\n+\n+    /**\n+      * @see org.apache.commons.math.stat.Univariate#addValue(double)\n+      */\n+    public void addValue(double v) {\n+        String msg =\n+            \"The BeanListUnivariateImpl does not accept values \" +\n+            \"through the addValue method.  Because elements of this list \" +\n+            \"are JavaBeans, one must be sure to set the 'propertyName' \" +\n+            \"property and add new Beans to the underlying list via the \" +\n+            \"addBean(Object bean) method\";\n+        throw new UnsupportedOperationException(msg);\n+    }\n+\n+    /**\n+     * Adds a bean to this list. \n+     *\n+     * @param bean Bean to add to the list\n+     */\n+    public void addObject(Object bean) {\n+        list.add(bean);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/BivariateRegression.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.stat;\n+import org.apache.commons.math.stat.distribution.DistributionFactory;\n+import org.apache.commons.math.stat.distribution.TDistribution;\n+\n+/**\n+ * Estimates an ordinary least squares regression model\n+ * with one independent variable.\n+ * <p>\n+ * <code> y = intercept + slope * x  </code>\n+ * <p>\n+ * Standard errors for <code>intercept</code> and <code>slope</code> are \n+ * available as well as ANOVA, r-square and Pearson's r statistics.\n+ * <p>\n+ * Observations (x,y pairs) can be added to the model one at a time or they \n+ * can be provided in a 2-dimensional array.  The observations are not stored\n+ * in memory, so there is no limit to the number of observations that can be\n+ * added to the model. \n+ * <p>\n+ * <strong>Usage Notes</strong>: <ul>\n+ * <li> When there are fewer than two observations in the model, or when\n+ * there is no variation in the x values (i.e. all x values are the same) \n+ * all statistics return <code>NaN</code>. At least two observations with\n+ * different x coordinates are requred to estimate a bivariate regression \n+ * model.\n+ * </li>\n+ * <li> getters for the statistics always compute values based on the current\n+ * set of observations -- i.e., you can get statistics, then add more data\n+ * and get updated statistics without using a new instance.  There is no \n+ * \"compute\" method that updates all statistics.  Each of the getters performs\n+ * the necessary computations to return the requested statistic.</li>\n+ * </ul>\n+ *\n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:18 $\n+ */\n+public class BivariateRegression {\n+    \n+    /** sum of x values */\n+    private double sumX = 0d;\n+    \n+    /** total variation in x (sum of squared deviations from xbar) */\n+    private double sumXX = 0d;\n+    \n+    /** sum of y values */\n+    private double sumY = 0d;\n+    \n+    /** total variation in y (sum of squared deviations from ybar) */\n+    private double sumYY = 0d;\n+    \n+    /** sum of products */\n+    private double sumXY = 0d;\n+    \n+    /** number of observations */\n+    private long n = 0;\n+    \n+    /** mean of accumulated x values, used in updating formulas */\n+    private double xbar = 0;\n+    \n+    /** mean of accumulated y values, used in updating formulas */\n+    private double ybar = 0;\n+    \n+    \n+    // ---------------------Public methods--------------------------------------\n+    \n+    /**\n+     * Adds the observation (x,y) to the regression data set.\n+     * <p>\n+     * Uses updating formulas for means and sums of squares defined in \n+     * \"Algorithms for Computing the Sample Variance: Analysis and\n+     * Recommendations\", Chan, T.F., Golub, G.H., and LeVeque, R.J. \n+     * 1983, American Statistician, vol. 37, pp. 242-247, referenced in\n+     * Weisberg, S. \"Applied Linear Regression\". 2nd Ed. 1985\n+     *\n+     *\n+     * @param x independent variable value\n+     * @param y dependent variable value\n+     */\n+    public void addData(double x, double y) {\n+        if (n == 0) {\n+            xbar = x;\n+            ybar = y;\n+        } else {\n+            sumXX += ((double) n / (double) (n + 1)) * (x - xbar) * (x - xbar);\n+            sumYY += ((double) n / (double) (n + 1)) * (y - ybar) * (y - ybar);\n+            sumXY += ((double) n / (double) (n + 1)) * (x - xbar) * (y - ybar);\n+            xbar += (1d / (double) (n + 1)) * (x - xbar);\n+            ybar += (1d / (double) (n + 1)) * (y - ybar);\n+        }\n+        sumX += x;\n+        sumY += y;\n+        n++;\n+    } \n+    \n+    /**\n+     * Adds the observations represented by the elements in \n+     * <code>data</code>.\n+     * <p>\n+     * <code>(data[0][0],data[0][1])</code> will be the first observation, then\n+     * <code>(data[1][0],data[1][1])</code>, etc. <p> \n+     * \n+     * This method does not replace data that has already been added.  \n+     * To replace all data, use <code>clear()</code> before adding the new \n+     * data.\n+     * \n+     * @param data array of observations to be added\n+     */\n+    public void addData(double[][] data) {\n+       for (int i = 0; i < data.length; i++) {\n+            addData(data[i][0], data[i][1]);\n+       }\n+    }\n+    \n+    /**\n+     * Clears all data from the model.\n+     */\n+    public void clear() {\n+        sumX = 0d;\n+        sumXX = 0d;\n+        sumY = 0d;\n+        sumYY = 0d;\n+        sumXY = 0d;\n+        n = 0;\n+    }\n+          \n+    /**\n+     * Returns the number of observations that have been added to the model.\n+     *\n+     * @return n number of observations that have been added.\n+     */\n+    public long getN() {\n+        return n;\n+    }\n+    \n+    /**\n+     * Returns the \"predicted\" <code>y</code> value associated with the \n+     * supplied <code>x</code> value.\n+     * <p>\n+     * <code> predict(x) = intercept + slope * x </code>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>At least two observations (with at least two different x values)\n+     * must have been added before invoking this method. If this method is \n+     * invoked before a model can be estimated, <code>Double,NaN</code> is\n+     * returned.\n+     * </li></ul>\n+     *\n+     * @param x input <code>x</code> value\n+     * @return predicted <code>y</code> value\n+     */\n+    public double predict(double x) {\n+        double b1 = getSlope();\n+        return getIntercept(b1) + b1 * x;\n+    }\n+    \n+    /**\n+     * Returns the intercept of the estimated regression line.\n+     * <p>\n+     * The least squares estimate of the intercept is computed using the \n+     * <a href=\"http://www.xycoon.com/estimation4.htm\">normal equations</a>.\n+     * The intercept is sometimes denoted b0. \n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>At least two observations (with at least two different x values)\n+     * must have been added before invoking this method. If this method is \n+     * invoked before a model can be estimated, <code>Double,NaN</code> is\n+     * returned.\n+     * </li></ul>\n+     *\n+     * @return the intercept of the regression line\n+     */\n+     public double getIntercept() {\n+         return getIntercept(getSlope());\n+     }\n+     \n+     /**\n+     * Returns the slope of the estimated regression line.  \n+     * <p>\n+     * The least squares estimate of the slope is computed using the \n+     * <a href=\"http://www.xycoon.com/estimation4.htm\">normal equations</a>.\n+     * The slope is sometimes denoted b1. \n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>At least two observations (with at least two different x values)\n+     * must have been added before invoking this method. If this method is \n+     * invoked before a model can be estimated, <code>Double.NaN</code> is\n+     * returned.\n+     * </li></ul>\n+     *\n+     * @return the slope of the regression line\n+     */\n+     public double getSlope() {\n+         if (n < 2) {\n+             return Double.NaN;  //not enough data \n+         }\n+         if (Math.abs(sumXX) < 10 * Double.MIN_VALUE) { \n+             return Double.NaN; //not enough variation in x\n+         }\n+         return sumXY / sumXX;\n+     }\n+     \n+     /**\n+      * Returns the <a href=\"http://www.xycoon.com/SumOfSquares.htm\">\n+      * sum of squared errors</a> (SSE) associated with the regression \n+      * model.\n+      * <p>\n+      * <strong>Preconditions</strong>: <ul>\n+      * <li>At least two observations (with at least two different x values)\n+      * must have been added before invoking this method. If this method is \n+      * invoked before a model can be estimated, <code>Double,NaN</code> is\n+      * returned.\n+      * </li></ul>\n+      *\n+      * @return sum of squared errors associated with the regression model\n+      */\n+     public double getSumSquaredErrors() {\n+         return getSumSquaredErrors(getSlope());\n+     }\n+     \n+     /**\n+      * Returns the sum of squared deviations of the y values about their mean.\n+      * <p>\n+      * This is defined as SSTO \n+      * <a href=\"http://www.xycoon.com/SumOfSquares.htm\">here</a>.\n+      * <p>\n+      * If <code>n < 2</code>, this returns <code>Double.NaN</code>.\n+      *\n+      * @return sum of squared deviations of y values\n+      */\n+     public double getTotalSumSquares() {\n+         if (n < 2) {\n+             return Double.NaN;\n+         }\n+         return sumYY;\n+     }\n+         \n+     /**\n+      * Returns the sum of squared deviations of the predicted y values about \n+      * their mean (which equals the mean of y).\n+      * <p>\n+      * This is usually abbreviated SSR or SSM.  It is defined as SSM \n+      * <a href=\"http://www.xycoon.com/SumOfSquares.htm\">here</a>\n+      * <p>\n+      * <strong>Preconditions</strong>: <ul>\n+      * <li>At least two observations (with at least two different x values)\n+      * must have been added before invoking this method. If this method is \n+      * invoked before a model can be estimated, <code>Double,NaN</code> is\n+      * returned.\n+      * </li></ul>\n+      *\n+      * @return sum of squared deviations of predicted y values\n+      */\n+     public double getRegressionSumSquares() {\n+         return getRegressionSumSquares(getSlope());\n+     }\n+     \n+     /**\n+      * Returns the sum of squared errors divided by the degrees of freedom,\n+      * usually abbreviated MSE. \n+      * <p>\n+      * If there are fewer than <strong>three</strong> data pairs in the model,\n+      * or if there is no variation in <code>x</code>, this returns \n+      * <code>Double.NaN</code>.\n+      *\n+      * @return sum of squared deviations of y values\n+      */\n+     public double getMeanSquareError() {\n+         if (n < 3) {\n+             return Double.NaN;\n+         }\n+         return getSumSquaredErrors() / (double) (n - 2);\n+     }\n+     \n+     /**\n+      * Returns <a href=\"http://www.stt.msu.edu/~xiaoyimi/STT200/Lecture5.pdf\">\n+      * Pearson's product moment correlation coefficient</a>,\n+      * usually denoted r. \n+      * <p>\n+      * <strong>Preconditions</strong>: <ul>\n+      * <li>At least two observations (with at least two different x values)\n+      * must have been added before invoking this method. If this method is \n+      * invoked before a model can be estimated, <code>Double,NaN</code> is\n+      * returned.\n+      * </li></ul>\n+      *\n+      * @return Pearson's r\n+      */\n+     public double getR() {\n+         double b1 = getSlope();\n+         double result = Math.sqrt(getRSquare(b1));\n+         if (b1 < 0) {\n+             result = -result;\n+         }\n+         return result;\n+     }\n+             \n+     /** \n+      * Returns the <a href=\"http://www.xycoon.com/coefficient1.htm\"> \n+      * coefficient of determination</a>,\n+      * usually denoted r-square. \n+      * <p>\n+      * <strong>Preconditions</strong>: <ul>\n+      * <li>At least two observations (with at least two different x values)\n+      * must have been added before invoking this method. If this method is \n+      * invoked before a model can be estimated, <code>Double,NaN</code> is\n+      * returned.\n+      * </li></ul>\n+      *\n+      * @return r-square\n+      */\n+     public double getRSquare() {\n+         return getRSquare(getSlope());\n+     }\n+     \n+         \n+     /**\n+      * Returns the <a href=\"http://www.xycoon.com/standarderrorb0.htm\">\n+      * standard error of the intercept estimate</a>, \n+      * usually denoted s(b0). \n+      * <p>\n+      * If there are fewer that <strong>three</strong> observations in the \n+      * model, or if there is no variation in x, this returns \n+      * <code>Double.NaN</code>.\n+      *\n+      * @return standard error associated with intercept estimate\n+      */\n+     public double getInterceptStdErr() {\n+         return Math.sqrt(getMeanSquareError() * ((1d / (double) n) +\n+            (xbar * xbar) / sumXX));\n+     }\n+             \n+     /**\n+      * Returns the <a href=\"http://www.xycoon.com/standerrorb(1).htm\">standard\n+      * error of the slope estimate</a>,\n+      * usually denoted s(b1). \n+      * <p>\n+      * If there are fewer that <strong>three</strong> data pairs in the model,\n+      * or if there is no variation in x, this returns <code>Double.NaN</code>.\n+      *\n+      * @return standard error associated with slope estimate\n+      */\n+     public double getSlopeStdErr() {\n+         return Math.sqrt(getMeanSquareError() / sumXX);\n+     }\n+     \n+     /**\n+      * Returns the half-width of a 95% confidence interval for the slope\n+      * estimate.\n+      * <p>\n+      * The 95% confidence interval is \n+      * <p>\n+      * <code>(getSlope() - getSlopeConfidenceInterval(), \n+      * getSlope() + getSlopeConfidenceInterval())</code>\n+      * <p>\n+      * If there are fewer that <strong>three</strong> observations in the \n+      * model, or if there is no variation in x, this returns \n+      * <code>Double.NaN</code>.\n+      * <p>\n+      * <strong>Usage Note</strong>:<br>\n+      * The validity of this statistic depends on the assumption that the \n+      * observations included in the model are drawn from a\n+      * <a href=\"http://mathworld.wolfram.com/\n+      * BivariateNormalDistribution.html\">Bivariate Normal Distribution</a>.\n+      *\n+      * @return half-width of 95% confidence interval for the slope estimate\n+      */\n+     public double getSlopeConfidenceInterval() {   \n+        return getSlopeConfidenceInterval(0.05d); \n+     }\n+     \n+     /**\n+      * Returns the half-width of a (100-100*alpha)% confidence interval for \n+      * the slope estimate.\n+      * <p>\n+      * The (100-100*alpha)% confidence interval is \n+      * <p>\n+      * <code>(getSlope() - getSlopeConfidenceInterval(), \n+      * getSlope() + getSlopeConfidenceInterval())</code>\n+      * <p>\n+      * To request, for example, a 99% confidence interval, use \n+      * <code>alpha = .01</code>\n+      * <p>\n+      * <strong>Usage Note</strong>:<br>\n+      * The validity of this statistic depends on the assumption that the \n+      * observations included in the model are drawn from a\n+      * <a href=\"http://mathworld.wolfram.com/\n+      * BivariateNormalDistribution.html\">Bivariate Normal Distribution</a>.\n+      * <p>\n+      * <strong> Preconditions:</strong><ul>\n+      * <li>If there are fewer that <strong>three</strong> observations in the \n+      * model, or if there is no variation in x, this returns \n+      * <code>Double.NaN</code>. \n+      * </li>\n+      * <li><code>(0 < alpha < 1)</code>; otherwise an \n+      * <code>IllegalArgumentException</code> is thrown.\n+      * </li></ul>    \n+      *\n+      * @param alpha the desired significance level \n+      * @return half-width of 95% confidence interval for the slope estimate\n+      */\n+     public double getSlopeConfidenceInterval(double alpha) { \n+         if (alpha >= 1 || alpha <= 0) {\n+             throw new IllegalArgumentException();\n+         }\n+         return getSlopeStdErr() * \n+            getTDistribution().inverseCummulativeProbability(1d - alpha / 2d); \n+     }\n+     \n+     /**\n+      * Returns the significance level of the slope (equiv) correlation. \n+      * <p>\n+      * Specifically, the returned value is the smallest <code>alpha</code>\n+      * such that the slope confidence interval with significance level\n+      * equal to <code>alpha</code> does not include <code>0</code>.\n+      * On regression output, this is often denoted <code>Prob(|t| > 0)</code>\n+      * <p>\n+      * <strong>Usage Note</strong>:<br>\n+      * The validity of this statistic depends on the assumption that the \n+      * observations included in the model are drawn from a\n+      * <a href=\"http://mathworld.wolfram.com/\n+      * BivariateNormalDistribution.html\">Bivariate Normal Distribution</a>.\n+      * <p>\n+      * If there are fewer that <strong>three</strong> observations in the \n+      * model, or if there is no variation in x, this returns \n+      * <code>Double.NaN</code>.\n+      *\n+      * @return significance level for slope/correlation\n+      */\n+     public double getSignificance() {\n+         return (1d - getTDistribution().cummulativeProbability(\n+                Math.abs(getSlope()) / getSlopeStdErr()));\n+     }\n+     \n+     // ---------------------Private methods-----------------------------------\n+     \n+     /**\n+     * Returns the intercept of the estimated regression line, given the slope.\n+     * <p>\n+     * Will return <code>NaN</code> if slope is <code>NaN</code>.\n+     *\n+     * @param slope current slope\n+     * @return the intercept of the regression line\n+     */\n+     private double getIntercept(double slope) {\n+         return (sumY - slope * sumX) / ((double) n);\n+     }\n+       \n+     /**\n+      * Returns the sum of squared errors associated with the regression \n+      * model, using the slope of the regression line. \n+      * <p> \n+      * Returns NaN if the slope is NaN.\n+      * \n+      * @param b1 current slope\n+      * @return sum of squared errors associated with the regression model\n+      */\n+     private double getSumSquaredErrors(double b1) {\n+         return sumYY - sumXY * sumXY / sumXX;\n+     } \n+     \n+     /** \n+      * Computes r-square from the slope.\n+      * <p>\n+      * will return NaN if slope is Nan.\n+      *\n+      * @param b1 current slope\n+      * @return r-square\n+      */\n+     private double getRSquare(double b1) {\n+         double ssto = getTotalSumSquares();\n+         return (ssto - getSumSquaredErrors(b1)) / ssto;\n+     }\n+     \n+     /**\n+      * Computes SSR from b1.\n+      * \n+      * @param slope regression slope estimate\n+      * @return sum of squared deviations of predicted y values\n+      */\n+     private double getRegressionSumSquares(double slope) {\n+         return slope * slope * sumXX;\n+     }\n+     \n+     /**\n+      * Uses distribution framework to get a t distribution instance \n+      * with df = n - 2\n+      *\n+      * @return t distribution with df = n - 2\n+      */\n+     private TDistribution getTDistribution() {\n+         return DistributionFactory.newInstance().createTDistribution(n - 2);\n+     }\n+}\n+\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import java.util.Iterator;\n+\n+import org.apache.commons.collections.Bag;\n+import org.apache.commons.collections.HashBag;\n+\n+/** \n+ * Maintains a frequency distribution. <br>\n+ * Accepts int, long or string values, converting\n+ * all to Strings and maintaining frequency counts.\n+ * \n+ * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:18 $\n+ */\n+public class Frequency {\n+    /** name for this frequency distribution. */\n+    private String name;\n+\n+    /** underlying collection */\n+    private Bag freqTable = new HashBag();\n+\n+    /**\n+     * Default constructor.\n+     */\n+    public Frequency() {\n+        this(null);\n+    }\n+\n+    /**\n+     * Construct a frequency distribution with the given name.\n+     * @param name the name for the new distribution.\n+     */\n+    public Frequency(String name) {\n+        super();\n+        setName(name);\n+    }\n+\n+    /**\n+     * Return a string representation of describing this frequency\n+     * distribution.\n+     * @return a string representation.\n+     */\n+    public String toString() {\n+        StringBuffer outBuffer = new StringBuffer();\n+        outBuffer.append(\"Value \\t Frequency \\n\");\n+        Iterator iter = freqTable.uniqueSet().iterator();\n+        while (iter.hasNext()) {\n+            Object value = iter.next();\n+            outBuffer.append(value);\n+            outBuffer.append('\\t');\n+            outBuffer.append(freqTable.getCount(value));\n+            outBuffer.append('\\n');\n+        }\n+        return outBuffer.toString();\n+    }\n+\n+    /**\n+     * Adds 1 to the frequency count for v\n+     * @param v the value to add.\n+     */\n+    public void addValue(String v) {\n+        freqTable.add(v);\n+    }\n+\n+    /**\n+     * Adds 1 to the frequency count for v\n+     * @param v the value to add.\n+     */\n+    public void addValue(int v) {\n+        addValue((new Integer(v)).toString());\n+    }\n+\n+    /**\n+     * Adds 1 to the frequency count for v.\n+     * @param v the value to add.\n+     */\n+    public void addValue(long v) {\n+        addValue((new Long(v)).toString());\n+    }\n+\n+    /**\n+     * Returns the number of values = v\n+     * @param v the value to lookup.\n+     * @return the absolute frequency of v.\n+     */\n+    public long getCount(String v) {\n+        return freqTable.getCount(v);\n+    }\n+\n+    /**\n+     * Returns the sum of all frequencies\n+     * @return the aggregate frequency.\n+     */\n+    public long getSumFreq() {\n+        return freqTable.size();\n+    }\n+\n+    /**\n+     * Returns the percentage of values = v.\n+     * @param v the value to lookup.\n+     * @return the relative frequency of v.\n+     */\n+    public double getPct(String v) {\n+        return (double) getCount(v) / (double) getSumFreq();        \n+    }\n+\n+    /** Clears the frequency table */\n+    public void clear() {\n+        freqTable.clear();\n+    }\n+\n+    /** Getter for property name.\n+     * @return Value of property name.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /** Setter for property name.\n+     * @param name New value of property name.\n+     */\n+    public void setName(java.lang.String name) {\n+        this.name = name;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/ListUnivariateImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import java.util.List;\n+\n+import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n+import org.apache.commons.math.util.DefaultTransformer;\n+import org.apache.commons.math.util.NumberTransformer;\n+\n+/**\n+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:18 $\n+ */\n+public class ListUnivariateImpl\n+    extends AbstractStoreUnivariate\n+    implements StoreUnivariate {\n+\n+    /**\n+     * Holds a reference to a list - GENERICs are going to make\n+     * out lives easier here as we could only accept List<Number>\n+     */\n+    protected List list;\n+\n+    /** Number Transformer maps Objects to Number for us. */\n+    protected NumberTransformer transformer;\n+\n+    /**\n+     * Construct a ListUnivariate with a specific List.\n+     * @param list The list that will back this Univariate\n+     */\n+    public ListUnivariateImpl(List list) {\n+        this(list, new DefaultTransformer());\n+    }\n+    \n+    /**\n+     * Construct a ListUnivariate with a specific List.\n+     * @param list The list that will back this Univariate\n+     * @param transformer the number transformer used to convert the list items.\n+     */\n+    public ListUnivariateImpl(List list, NumberTransformer transformer) {\n+        super();\n+        this.list = list;\n+        this.transformer = transformer;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.StoreUnivariate#getValues()\n+     */\n+    public double[] getValues() {\n+\n+        int length = list.size();\n+\n+        // If the window size is not INFINITE_WINDOW AND\n+        // the current list is larger that the window size, we need to\n+        // take into account only the last n elements of the list\n+        // as definied by windowSize\n+\n+        if (windowSize != Univariate.INFINITE_WINDOW &&\n+            windowSize < list.size())\n+        {\n+            length = list.size() - Math.max(0, list.size() - windowSize);\n+        }\n+\n+        // Create an array to hold all values\n+        double[] copiedArray = new double[length];\n+\n+        for (int i = 0; i < copiedArray.length; i++) {\n+            copiedArray[i] = getElement(i);\n+        }\n+        return copiedArray;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.StoreUnivariate#getElement(int)\n+     */\n+    public double getElement(int index) {\n+\n+        double value = Double.NaN;\n+\n+        int calcIndex = index;\n+\n+        if (windowSize != Univariate.INFINITE_WINDOW &&\n+            windowSize < list.size())\n+        {\n+            calcIndex = (list.size() - windowSize) + index;\n+        }\n+\n+        try {\n+            value = transformer.transform(list.get(calcIndex));\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+\n+        return value;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#getN()\n+     */\n+    public int getN() {\n+        int n = 0;\n+\n+        if (windowSize != Univariate.INFINITE_WINDOW) {\n+            if (list.size() > windowSize) {\n+                n = windowSize;\n+            } else {\n+                n = list.size();\n+            }\n+        } else {\n+            n = list.size();\n+        }\n+        return n;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#addValue(double)\n+     */\n+    public void addValue(double v) {\n+        list.add(new Double(v));\n+    }\n+    \n+    /**\n+     * Adds an object to this list. \n+     * @param o Object to add to the list\n+     */\n+    public void addObject(Object o) {\n+        list.add(o);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#clear()\n+     */\n+    public void clear() {\n+        super.clear();\n+        list.clear();\n+    }\n+    \n+    /**\n+     * Apply the given statistic to this univariate collection.\n+     * @param stat the statistic to apply\n+     * @return the computed value of the statistic.\n+     */\n+    public double apply(UnivariateStatistic stat) {\n+        double[] v = this.getValues();\n+\n+        if (v != null) {\n+            return stat.evaluate(v, 0, v.length);\n+        }\n+        return Double.NaN;\n+    }\n+    \n+    /**\n+     * Access the number transformer.\n+     * @return the number transformer.\n+     */\n+    public NumberTransformer getTransformer() {\n+        return transformer;\n+    }\n+\n+    /**\n+     * Modify the number transformer.\n+     * @param transformer the new number transformer.\n+     */\n+    public void setTransformer(NumberTransformer transformer) {\n+        this.transformer = transformer;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/StatUtils.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n+import org.apache.commons.math.stat.univariate.moment.Mean;\n+import org.apache.commons.math.stat.univariate.moment.Variance;\n+import org.apache.commons.math.stat.univariate.rank.Max;\n+import org.apache.commons.math.stat.univariate.rank.Min;\n+import org.apache.commons.math.stat.univariate.summary.Product;\n+import org.apache.commons.math.stat.univariate.summary.Sum;\n+import org.apache.commons.math.stat.univariate.summary.SumOfLogs;\n+import org.apache.commons.math.stat.univariate.summary.SumOfSquares;\n+\n+/**\n+ * StatUtils provides easy static implementations of common double[] based\n+ * statistical methods. These return a single result value or in some cases, as\n+ * identified in the javadoc for each method, Double.NaN.\n+ * @version $Revision: 1.21 $ $Date: 2003/11/14 22:22:18 $\n+ */\n+public final class StatUtils {\n+\n+\t/** sum */\n+\tprivate static UnivariateStatistic sum = new Sum();\n+\t\n+\t/** sumSq */\n+\tprivate static UnivariateStatistic sumSq = new SumOfSquares();\n+\t\n+\t/** prod */\n+\tprivate static UnivariateStatistic prod = new Product();\n+\t\n+\t/** sumLog */\n+\tprivate static UnivariateStatistic sumLog = new SumOfLogs();\n+\t\n+\t/** min */\n+\tprivate static UnivariateStatistic min = new Min();\t\n+\t\n+\t/** max */\n+\tprivate static UnivariateStatistic max = new Max();\t\n+\t\n+\t/** mean */\n+\tprivate static UnivariateStatistic mean = new Mean();\t\n+\t\n+\t/** variance */\n+\tprivate static UnivariateStatistic variance = new Variance();\t\n+\t\t\n+    /**\n+     * Private Constructor\n+     */\n+    private StatUtils() {\n+    }\n+\n+    /**\n+     * The sum of the values that have been added to Univariate.\n+     * @param values Is a double[] containing the values\n+     * @return the sum of the values or Double.NaN if the array is empty\n+     */\n+    public static double sum(final double[] values) {\n+\t\treturn sum.evaluate(values);\n+    }\n+\n+    /**\n+     * The sum of the values that have been added to Univariate.\n+     * @param values Is a double[] containing the values\n+     * @param begin processing at this point in the array\n+     * @param length processing at this point in the array\n+     * @return the sum of the values or Double.NaN if the array is empty\n+     */\n+    public static double sum(\n+        final double[] values,\n+        final int begin,\n+        final int length) {\n+        return sum.evaluate(values, begin, length);\n+    }\n+\n+    /**\n+     * Returns the sum of the squares of the available values.\n+     * @param values Is a double[] containing the values\n+     * @return the sum of the squared values or Double.NaN if the array is empty\n+     */\n+    public static double sumSq(final double[] values) {\n+\t\treturn sumSq.evaluate(values);\n+    }\n+\n+    /**\n+     * Returns the sum of the squares of the available values.\n+     * @param values Is a double[] containing the values\n+     * @param begin processing at this point in the array\n+     * @param length processing at this point in the array\n+     * @return the sum of the squared values or Double.NaN if the array is empty\n+     */\n+    public static double sumSq(\n+        final double[] values,\n+        final int begin,\n+        final int length) {\n+        return sumSq.evaluate(values, begin, length);\n+    }\n+\n+    /**\n+     * Returns the product for this collection of values\n+     * @param values Is a double[] containing the values\n+     * @return the product values or Double.NaN if the array is empty\n+     */\n+    public static double product(final double[] values) {\n+        return prod.evaluate(values);\n+    }\n+\n+    /**\n+     * Returns the product for this collection of values\n+     * @param values Is a double[] containing the values\n+     * @param begin processing at this point in the array\n+     * @param length processing at this point in the array\n+     * @return the product values or Double.NaN if the array is empty\n+     */\n+    public static double product(\n+        final double[] values,\n+        final int begin,\n+        final int length) {\n+        return prod.evaluate(values, begin, length);\n+    }\n+\n+    /**\n+     * Returns the sum of the natural logs for this collection of values\n+     * @param values Is a double[] containing the values\n+     * @return the sumLog value or Double.NaN if the array is empty\n+     */\n+    public static double sumLog(final double[] values) {\n+\t\treturn sumLog.evaluate(values);\n+    }\n+\n+    /**\n+     * Returns the sum of the natural logs for this collection of values\n+     * @param values Is a double[] containing the values\n+     * @param begin processing at this point in the array\n+     * @param length processing at this point in the array\n+     * @return the sumLog value or Double.NaN if the array is empty\n+     */\n+    public static double sumLog(\n+        final double[] values,\n+        final int begin,\n+        final int length) {\n+\t\treturn sumLog.evaluate(values, begin, length);\n+    }\n+\n+    /**\n+     * Returns the <a href=http://www.xycoon.com/arithmetic_mean.htm>\n+     * arithmetic mean </a> of the available values\n+     * @param values Is a double[] containing the values\n+     * @return the mean of the values or Double.NaN if the array is empty\n+     */\n+    public static double mean(final double[] values) {\n+\t\treturn mean.evaluate(values);\n+    }\n+\n+    /**\n+      * Returns the <a href=http://www.xycoon.com/arithmetic_mean.htm>\n+      * arithmetic mean </a> of the available values\n+     * @param values Is a double[] containing the values\n+     * @param begin processing at this point in the array\n+     * @param length processing at this point in the array\n+      * @return the mean of the values or Double.NaN if the array is empty\n+      */\n+    public static double mean(\n+        final double[] values,\n+        final int begin,\n+        final int length) {\n+        return mean.evaluate(values, begin, length);\n+    }\n+\n+    /**\n+     * Returns the variance of the available values. This uses a corrected\n+     * two pass algorithm of the following\n+     * <a href=\"http://lib-www.lanl.gov/numerical/bookcpdf/c14-1.pdf\">\n+     * corrected two pass formula (14.1.8)</a>, and also referenced in:<p/>\n+     * \"Algorithms for Computing the Sample Variance: Analysis and\n+     * Recommendations\", Chan, T.F., Golub, G.H., and LeVeque, R.J.\n+     * 1983, American Statistician, vol. 37, pp. 242?247.\n+     *\n+     * @param values Is a double[] containing the values\n+     * @return the result, Double.NaN if no values for an empty array\n+     * or 0.0 for a single value set.\n+     */\n+    public static double variance(final double[] values) {\n+\t\treturn variance.evaluate(values);\n+    }\n+\n+    /**\n+     * Returns the variance of the available values. This uses a corrected\n+     * two pass algorithm of the following\n+     * <a href=\"http://lib-www.lanl.gov/numerical/bookcpdf/c14-1.pdf\">\n+     * corrected two pass formula (14.1.8)</a>, and also referenced in:<p/>\n+     * \"Algorithms for Computing the Sample Variance: Analysis and\n+     * Recommendations\", Chan, T.F., Golub, G.H., and LeVeque, R.J.\n+     * 1983, American Statistician, vol. 37, pp. 242?247.\n+     *\n+     * @param values Is a double[] containing the values\n+     * @param begin processing at this point in the array\n+     * @param length processing at this point in the array\n+     * @return the result, Double.NaN if no values for an empty array\n+     * or 0.0 for a single value set.\n+     */\n+    public static double variance(\n+        final double[] values,\n+        final int begin,\n+        final int length) {\n+        return variance.evaluate(values, begin, length);\n+    }\n+\n+    /**\n+     * Returns the maximum of the available values\n+     * @param values Is a double[] containing the values\n+     * @return the maximum of the values or Double.NaN if the array is empty\n+     */\n+    public static double max(final double[] values) {\n+\t\treturn max.evaluate(values);\n+    }\n+\n+    /**\n+     * Returns the maximum of the available values\n+     * @param values Is a double[] containing the values\n+     * @param begin processing at this point in the array\n+     * @param length processing at this point in the array\n+     * @return the maximum of the values or Double.NaN if the array is empty\n+     */\n+    public static double max(\n+        final double[] values,\n+        final int begin,\n+        final int length) {\n+        return max.evaluate(values, begin, length);\n+    }\n+\n+    /**\n+     * Returns the minimum of the available values\n+     * @param values Is a double[] containing the values\n+     * @return the minimum of the values or Double.NaN if the array is empty\n+     */\n+    public static double min(final double[] values) {\n+\t\treturn min.evaluate(values);\n+    }\n+\n+    /**\n+     * Returns the minimum of the available values\n+     * @param values Is a double[] containing the values\n+     * @param begin processing at this point in the array\n+     * @param length processing at this point in the array\n+     * @return the minimum of the values or Double.NaN if the array is empty\n+     */\n+    public static double min(\n+        final double[] values,\n+        final int begin,\n+        final int length) {\n+        return min.evaluate(values, begin, length);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/StoreUnivariate.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+/**\n+ * StoreUnivariate implements the Univariate interface \n+ * but maintains the set of values which contribute to \n+ * the values being returned.  This implementation of \n+ * Univariate provides additional percentile functionality \n+ * such as.  This additional functionality comes with \n+ * a price of increased storage costs.\n+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:18 $\n+ */\n+public interface StoreUnivariate extends Univariate {\n+\n+    /**\n+     * Returns the current set of values in an array of double primitives.  \n+     * The order of addition is preserved.  The returned array is a fresh\n+     * copy of the underlying data -- i.e., it is not a reference to the\n+     * stored data.\n+     * \n+     * @return returns the current set of numbers in the order in which they \n+     *         were added to this set\n+     */\n+    double[] getValues();\n+\n+    /**\n+     * Returns the current set of values in an array of double primitives,  \n+     * sorted in ascending order.  The returned array is a fresh\n+     * copy of the underlying data -- i.e., it is not a reference to the\n+     * stored data.\n+     * @return returns the current set of \n+     * numbers sorted in ascending order        \n+     */\n+    double[] getSortedValues();\n+\n+    /**\n+     * Returns the element at the specified index\n+     * @param index The Index of the element\n+     * @return return the element at the specified index\n+     */\n+    double getElement(int index);\n+\n+    /**\n+     * Returns an estimate for the pth percentile of the stored values. \n+     * This estimate follows the interpolation-adjusted defintion presented \n+     * <a href=\"http://www.utdallas.edu/~ammann/stat5311/node8.html\">here</a>\n+     * <p/>\n+     * <strong>Preconditions</strong>:<ul>\n+     * <li><code>0 &lt; p &lt; 100</code> (otherwise an \n+     * <code>IllegalArgumentException</code> is thrown)</li>\n+     * <li>at least one value must be stored (returns <code>Double.NaN\n+     *     </code> otherwise)</li>\n+     * </ul>\n+     * \n+     * @param p the requested percentile (scaled from 0 - 100)\n+     * @return An estimate for the pth percentile of the stored data \n+     * values\n+     */\n+    double getPercentile(double p);\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n+import org.apache.commons.math.util.ContractableDoubleArray;\n+\n+/**\n+ * @version $Revision: 1.12 $ $Date: 2003/11/14 22:22:18 $\n+ */\n+public class StoreUnivariateImpl extends AbstractStoreUnivariate {\n+\n+    /** A contractable double array is used.  memory is reclaimed when \n+     * the storage of the array becomes too empty.\n+     */\n+    protected ContractableDoubleArray eDA;\n+\n+    /**\n+     * Construct a StoreUnivariateImpl\n+     */\n+    public StoreUnivariateImpl() {\n+        eDA = new ContractableDoubleArray();\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.StoreUnivariate#getValues()\n+     */\n+    public double[] getValues() {\n+\n+        double[] copiedArray = new double[eDA.getNumElements()];\n+        System.arraycopy(\n+            eDA.getElements(),\n+            0,\n+            copiedArray,\n+            0,\n+            eDA.getNumElements());\n+        return copiedArray;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.StoreUnivariate#getElement(int)\n+     */\n+    public double getElement(int index) {\n+        return eDA.getElement(index);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#getN()\n+     */\n+    public int getN() {\n+        return eDA.getNumElements();\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#addValue(double)\n+     */\n+    public synchronized void addValue(double v) {\n+        if (windowSize != Univariate.INFINITE_WINDOW) {\n+            if (getN() == windowSize) {\n+                eDA.addElementRolling(v);\n+            } else if (getN() < windowSize) {\n+                eDA.addElement(v);\n+            } else {\n+                String msg =\n+                    \"A window Univariate had more element than \" +\n+                    \"the windowSize.  This is an inconsistent state.\";\n+                throw new RuntimeException(msg);\n+            }\n+        } else {\n+            eDA.addElement(v);\n+        }\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#clear()\n+     */\n+    public synchronized void clear() {\n+        super.clear();\n+        eDA.clear();\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#setWindowSize(int)\n+     */\n+    public synchronized void setWindowSize(int windowSize) {\n+        this.windowSize = windowSize;\n+\n+        // We need to check to see if we need to discard elements\n+        // from the front of the array.  If the windowSize is less than \n+        // the current number of elements.\n+        if (windowSize < eDA.getNumElements()) {\n+            eDA.discardFrontElements(eDA.getNumElements() - windowSize);\n+        }\n+    }\n+\n+    /**\n+     * Apply the given statistic to this univariate collection.\n+     * @param stat the statistic to apply\n+     * @return the computed value of the statistic.\n+     */\n+    public double apply(UnivariateStatistic stat) {\n+        if (eDA != null) {\n+            return stat.evaluate(eDA.getValues(), eDA.start(), eDA.getNumElements());\n+        }\n+        return Double.NaN;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/TestStatistic.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+/**\n+ * A collection of commonly used test statistics and statistical tests.\n+ * \n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:18 $ \n+ */\n+public interface TestStatistic {\n+    \n+    /**\n+     * Computes the <a href=\"http://www.itl.nist.gov/div898/handbook/eda\n+     * /section3/eda35f.htm\">Chi-Square statistic</a> comparing \n+     * <code>observed</code> and <code>expected</code> freqeuncy counts. \n+     * <p>\n+     * This statistic can be used to perform Chi-Square tests.\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>Expected counts must all be positive.  \n+     * </li>\n+     * <li>Observed counds must all be >= 0.   \n+     * </li>\n+     * <li>The observed and expected arrays must have the same length and\n+     * their common length must be at least 2.  \n+     * </li></ul><p>\n+     * If any of the preconditions are not met, an \n+     * <code>IllegalArgumentException</code> is thrown.\n+     *\n+     * @param observed array of observed frequency counts\n+     * @param expected array of exptected frequency counts\n+     * @return chiSquare statistic\n+     * @throws IllegalArgumentException if preconditions are not met\n+     */\n+    double chiSquare(double[] expected, double[] observed) \n+        throws IllegalArgumentException;\n+    \n+    /**\n+     * Returns the <i>observed significance level</i>, or <a href=\n+     * \"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n+     * p-value</a>, associated with a <a href=\"http://www.itl.nist.gov/div898/\n+     * handbook/eda/section3/eda35f.htm\">Chi-square goodness of fit test</a>\n+     * comparing the <code>observed</code> frequency counts to those in the \n+     * <code>expected</code> array.\n+     * <p>\n+     * The number returned is the smallest significance level\n+     * at which one can reject the null hypothesis that the observed counts\n+     * conform to the frequency distribution described by the expected counts. \n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>Expected counts must all be positive.  \n+     * </li>\n+     * <li>Observed counds must all be >= 0.   \n+     * </li>\n+     * <li>The observed and expected arrays must have the same length and\n+     * their common length must be at least 2.  \n+     * </li></ul><p>\n+     * If any of the preconditions are not met, an \n+     * <code>IllegalArgumentException</code> is thrown.\n+     *\n+     * @param observed array of observed frequency counts\n+     * @param expected array of exptected frequency counts\n+     * @return p-value\n+     * @throws IllegalArgumentException if preconditions are not met\n+     */\n+    double chiSquareTest(double[] expected, double[] observed) \n+        throws IllegalArgumentException;\n+    \n+    /**\n+     * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/eda/\n+     * section3/eda35f.htm\">Chi-square goodness of fit test</a> evaluating the \n+     * null hypothesis that the observed counts conform to the frequency \n+     * distribution described by the expected counts, with significance level \n+     * <code>alpha</code>.\n+     * <p>\n+     * <strong>Example:</strong><br>\n+     * To test the hypothesis that <code>observed</code> follows \n+     * <code>expected</code> at the 99% level, use <p>\n+     * <code>chiSquareTest(expected, observed, 0.01) </code>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>Expected counts must all be positive.  \n+     * </li>\n+     * <li>Observed counds must all be >= 0.   \n+     * </li>\n+     * <li>The observed and expected arrays must have the same length and\n+     * their common length must be at least 2.  \n+     * <li> <code> 0 < alpha < 0.5 </code>\n+     * </li></ul><p>\n+     * If any of the preconditions are not met, an \n+     * <code>IllegalArgumentException</code> is thrown.\n+     *\n+     * @param observed array of observed frequency counts\n+     * @param expected array of exptected frequency counts\n+     * @param alpha significance level of the test\n+     * @return true iff null hypothesis can be rejected with confidence\n+     * 1 - alpha\n+     * @throws IllegalArgumentException if preconditions are not met\n+     */\n+    boolean chiSquareTest(double[] expected, double[] observed, double alpha) \n+        throws IllegalArgumentException;\n+    \n+    /**\n+     * Computes a <a href=\"http://www.itl.nist.gov/div898/handbook/prc/\n+     * section2/prc22.htm#formula\"> t statistic </a> given observed values and \n+     * a comparison constant.\n+     * <p>\n+     * This statistic can be used to perform a one sample t-test for the mean.\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The observed array length must be at least 2.\n+     * </li></ul>\n+     *\n+     * @param mu comparison constant\n+     * @param observed array of values\n+     * @return t statistic\n+     * @throws IllegalArgumentException if input array length is less than 2\n+     */\n+    double t(double mu, double[] observed) \n+        throws IllegalArgumentException;\n+    \n+    /**\n+     * Computes a <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3\n+     * /prc31.htm\">2-sample t statistic </a>, without the assumption of equal\n+     * sample variances.\n+     * <p>\n+     * This statistic can be used to perform a two-sample t-test to compare\n+     * sample means.\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The observed array lengths must both be at least 5.\n+     * </li></ul>\n+     *\n+     * @param sample1 array of sample data values\n+     * @param sample2 array of sample data values\n+     * @return t statistic\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    double t(double[] sample1, double[] sample2) \n+        throws IllegalArgumentException;\n+    \n+    /**\n+     * Returns the <i>observed significance level</i>, or <a href=\n+     * \"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n+     * p-value</a>, associated with a two-sample, two-tailed t-test \n+     * comparing the means of the input arrays.\n+     * <p>\n+     * The number returned is the smallest significance level\n+     * at which one can reject the null hypothesis that the two means are\n+     * equal in favor of the two-sided alternative that they are different. \n+     * For a one-sided test, divide the returned value by 2.\n+     * <p>\n+     * The test does not assume that the underlying popuation variances are\n+     * equal and it uses approximated degrees of freedom computed from the \n+     * sample data as described <a href=\"http://www.itl.nist.gov/div898/\n+     * handbook/prc/section3/prc31.htm\">here</a>\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the p-value depends on the assumptions of the parametric\n+     * t-test procedure, as discussed <a href=\"http://www.basic.nwu.edu/\n+     * statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The observed array lengths must both be at least 5.\n+     * </li></ul>\n+     *\n+     * @param sample1 array of sample data values\n+     * @param sample2 array of sample data values\n+     * @return p-value for t-test\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    double tTest(double[] sample1, double[] sample2)\n+        throws IllegalArgumentException;\n+    \n+    /**\n+     * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/eda/\n+     * section3/eda353.htm\">two-sided t-test</a> evaluating the null \n+     * hypothesis that <code>sample1</code> and <code>sample2</code> are drawn \n+     * from populations with the same mean, with significance level \n+     * <code>alpha</code>.\n+     * <p>\n+     * Returns <code>true</code> iff the null hypothesis that the means are\n+     * equal can be rejected with confidence <code>1 - alpha</code>.  To \n+     * perform a 1-sided test, use <code>alpha / 2</code>\n+     * <p>\n+     * <strong>Examples:</strong><br><ol>\n+     * <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at\n+     * the 95% level, use <br><code>tTest(sample1, sample2, 0.05) </code>\n+     * </li>\n+     * <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2 </code>\n+     * at the 99% level, first verify that the measured mean of \n+     * <code>sample 1</code> is less than the mean of <code>sample 2</code>\n+     * and then use <br><code>tTest(sample1, sample2, 0.005) </code>\n+     * </li></ol>\n+     * <p>\n+     * The test does not assume that the underlying popuation variances are\n+     * equal and it uses approximated degrees of freedom computed from the \n+     * sample data as described <a href=\"http://www.itl.nist.gov/div898/\n+     * handbook/prc/section3/prc31.htm\">here</a>\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the test depends on the assumptions of the parametric\n+     * t-test procedure, as discussed <a href=\"http://www.basic.nwu.edu/\n+     * statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The observed array lengths must both be at least 5.\n+     * </li>\n+     * <li> <code> 0 < alpha < 0.5 </code>\n+     * </li></ul>\n+     *\n+     * @param sample1 array of sample data values\n+     * @param sample2 array of sample data values\n+     * @param alpha significance level of the test\n+     * @return true if the null hypothesis can be rejected with \n+     * confidence 1 - alpha\n+     * @throws IllegalArgumentException if the preconditions are not met\n+     */\n+    boolean tTest(double[] sample1, double[] sample2, double alpha)\n+        throws IllegalArgumentException;\n+    \n+    /**\n+     * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/eda/\n+     * section3/eda353.htm\">two-sided t-test</a> evaluating the null \n+     * hypothesis that the mean of the population from which \n+     * <code>sample</code> is drawn equals <code>mu</code>.\n+     * <p>\n+     * Returns <code>true</code> iff the null hypothesis can be \n+     * rejected with confidence <code>1 - alpha</code>.  To \n+     * perform a 1-sided test, use <code>alpha / 2</code>\n+     * <p>\n+     * <strong>Examples:</strong><br><ol>\n+     * <li>To test the (2-sided) hypothesis <code>sample mean = mu </code> at\n+     * the 95% level, use <br><code>tTest(mu, sample, 0.05) </code>\n+     * </li>\n+     * <li>To test the (one-sided) hypothesis <code> sample mean < mu </code>\n+     * at the 99% level, first verify that the measured sample mean is less \n+     * than <code>mu</code> and then use \n+     * <br><code>tTest(mu, sample, 0.005) </code>\n+     * </li></ol>\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the test depends on the assumptions of the one-sample \n+     * parametric t-test procedure, as discussed \n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/\n+     * sg_glos.html#one-sample\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The observed array length must be at least 5.\n+     * </li></ul>\n+     *\n+     * @param mu constant value to compare sample mean against\n+     * @param sample array of sample data values\n+     * @param alpha significance level of the test\n+     * @return p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    boolean tTest(double mu, double[] sample, double alpha)\n+        throws IllegalArgumentException;\n+    \n+    /**\n+     * Returns the <i>observed significance level</i>, or <a href=\n+     * \"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n+     * p-value</a>, associated with a one-sample, two-tailed t-test \n+     * comparing the mean of the input array with the constant <code>mu</code>.\n+     * <p>\n+     * The number returned is the smallest significance level\n+     * at which one can reject the null hypothesis that the mean equals \n+     * <code>mu</code> in favor of the two-sided alternative that the mean\n+     * is different from <code>mu</code>. For a one-sided test, divide the \n+     * returned value by 2.\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the test depends on the assumptions of the parametric\n+     * t-test procedure, as discussed <a href=\"http://www.basic.nwu.edu/\n+     * statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The observed array length must be at least 5.\n+     * </li></ul>\n+     *\n+     * @param mu constant value to compare sample mean against\n+     * @param sample array of sample data values\n+     * @return p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    double tTest(double mu, double[] sample)\n+        throws IllegalArgumentException;\n+    \n+    /**\n+     * Computes a <a href=\"http://www.itl.nist.gov/div898/handbook/prc/\n+     * section2/prc22.htm#formula\"> t statistic </a> to use in comparing \n+     * the dataset described by <code>sampleStats</code> to <code>mu</code>.\n+     * <p>\n+     * This statistic can be used to perform a one sample t-test for the mean.\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li><code>observed.getN() > = 2</code>.\n+     * </li></ul>\n+     *\n+     * @param mu comparison constant\n+     * @param sampleStats Univariate holding sample summary statitstics\n+     * @return t statistic\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    double t(double mu, Univariate sampleStats) \n+        throws IllegalArgumentException;\n+    \n+    /**\n+     * Computes a <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3\n+     * /prc31.htm\">2-sample t statistic </a>, comparing the datasets described\n+     * by two Univariates without the assumption of equal sample variances.\n+     * <p>\n+     * This statistic can be used to perform a two-sample t-test to compare\n+     * sample means.\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The datasets described by the two Univariates must each contain\n+     * at least 5 observations.\n+     * </li></ul>\n+     *\n+     * @param sampleStats1 Univariate describing data from the first sample\n+     * @param sampleStats2 Univariate describing data from the second sample\n+     * @return t statistic\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    double t(Univariate sampleStats1, Univariate sampleStats2) \n+        throws IllegalArgumentException;\n+    \n+    /**\n+     * Returns the <i>observed significance level</i>, or <a href=\n+     * \"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n+     * p-value</a>, associated with a two-sample, two-tailed t-test \n+     * comparing the means of the datasets described by two Univariates.\n+     * <p>\n+     * The number returned is the smallest significance level\n+     * at which one can reject the null hypothesis that the two means are\n+     * equal in favor of the two-sided alternative that they are different. \n+     * For a one-sided test, divide the returned value by 2.\n+     * <p>\n+     * The test does not assume that the underlying popuation variances are\n+     * equal and it uses approximated degrees of freedom computed from the \n+     * sample data as described <a href=\"http://www.itl.nist.gov/div898/\n+     * handbook/prc/section3/prc31.htm\">here</a>\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the p-value depends on the assumptions of the parametric\n+     * t-test procedure, as discussed <a href=\"http://www.basic.nwu.edu/\n+     * statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The datasets described by the two Univariates must each contain\n+     * at least 5 observations.\n+     * </li></ul>\n+     *\n+     * @param sampleStats1 Univariate describing data from the first sample\n+     * @param sampleStats2 Univariate describing data from the second sample\n+     * @return p-value for t-test\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    double tTest(Univariate sampleStats1, Univariate sampleStats2)\n+        throws IllegalArgumentException;\n+    \n+    /**\n+     * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/eda/\n+     * section3/eda353.htm\">two-sided t-test</a> evaluating the null \n+     * hypothesis that <code>sampleStats1</code> and <code>sampleStats2</code> \n+     * describe datasets drawn from populations with the same mean, with \n+     * significance level <code>alpha</code>.\n+     * <p>\n+     * Returns <code>true</code> iff the null hypothesis that the means are\n+     * equal can be rejected with confidence <code>1 - alpha</code>.  To \n+     * perform a 1-sided test, use <code>alpha / 2</code>\n+     * <p>\n+     * <strong>Examples:</strong><br><ol>\n+     * <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at\n+     * the 95% level, use \n+     * <br><code>tTest(sampleStats1, sampleStats2, 0.05) </code>\n+     * </li>\n+     * <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2 </code>\n+     * at the 99% level, first verify that the measured mean of \n+     * <code>sample 1</code> is less than the mean of <code>sample 2</code>\n+     * and then use <br><code>tTest(sampleStats1, sampleStats2, 0.005) </code>\n+     * </li></ol>\n+     * <p>\n+     * The test does not assume that the underlying popuation variances are\n+     * equal and it uses approximated degrees of freedom computed from the \n+     * sample data as described <a href=\"http://www.itl.nist.gov/div898/\n+     * handbook/prc/section3/prc31.htm\">here</a>\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the test depends on the assumptions of the parametric\n+     * t-test procedure, as discussed <a href=\"http://www.basic.nwu.edu/\n+     * statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The datasets described by the two Univariates must each contain\n+     * at least 5 observations.\n+     * </li>\n+     * <li> <code> 0 < alpha < 0.5 </code>\n+     * </li></ul>\n+     *\n+     * @param sampleStats1 Univariate describing sample data values\n+     * @param sampleStats2 Univariate describing sample data values\n+     * @param alpha significance level of the test\n+     * @return true if the null hypothesis can be rejected with \n+     * confidence 1 - alpha\n+     * @throws IllegalArgumentException if the preconditions are not met\n+     */\n+    boolean tTest(Univariate sampleStats1, Univariate sampleStats2, \n+        double alpha)\n+        throws IllegalArgumentException;\n+    \n+    /**\n+     * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/eda/\n+     * section3/eda353.htm\">two-sided t-test</a> evaluating the null \n+     * hypothesis that the mean of the population from which the dataset  \n+     * described by <code>stats</code> is drawn equals <code>mu</code>.\n+     * <p>\n+     * Returns <code>true</code> iff the null hypothesis can be \n+     * rejected with confidence <code>1 - alpha</code>.  To \n+     * perform a 1-sided test, use <code>alpha / 2</code>\n+     * <p>\n+     * <strong>Examples:</strong><br><ol>\n+     * <li>To test the (2-sided) hypothesis <code>sample mean = mu </code> at\n+     * the 95% level, use <br><code>tTest(mu, sampleStats, 0.05) </code>\n+     * </li>\n+     * <li>To test the (one-sided) hypothesis <code> sample mean < mu </code>\n+     * at the 99% level, first verify that the measured sample mean is less \n+     * than <code>mu</code> and then use \n+     * <br><code>tTest(mu, sampleStats, 0.005) </code>\n+     * </li></ol>\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the test depends on the assumptions of the one-sample \n+     * parametric t-test procedure, as discussed \n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/\n+     * sg_glos.html#one-sample\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The sample must include at least 5 observations.\n+     * </li></ul>\n+     *\n+     * @param mu constant value to compare sample mean against\n+     * @param sampleStats Univariate describing sample data values\n+     * @param alpha significance level of the test\n+     * @return p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    boolean tTest(double mu, Univariate sampleStats, double alpha)\n+        throws IllegalArgumentException;\n+    \n+    /**\n+     * Returns the <i>observed significance level</i>, or <a href=\n+     * \"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n+     * p-value</a>, associated with a one-sample, two-tailed t-test \n+     * comparing the mean of the dataset described by <code>sampleStats</code>\n+     * with the constant <code>mu</code>.\n+     * <p>\n+     * The number returned is the smallest significance level\n+     * at which one can reject the null hypothesis that the mean equals \n+     * <code>mu</code> in favor of the two-sided alternative that the mean\n+     * is different from <code>mu</code>. For a one-sided test, divide the \n+     * returned value by 2.\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the test depends on the assumptions of the parametric\n+     * t-test procedure, as discussed <a href=\"http://www.basic.nwu.edu/\n+     * statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The sample must contain at least 5 observations.\n+     * </li></ul>\n+     *\n+     * @param mu constant value to compare sample mean against\n+     * @param sampleStats Univariate describing sample data\n+     * @return p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    double tTest(double mu, Univariate sampleStats)\n+        throws IllegalArgumentException;\n+}\n+\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/TestStatisticImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.stat;\n+\n+import org.apache.commons.math.stat.distribution.DistributionFactory;\n+import org.apache.commons.math.stat.distribution.TDistribution;\n+import org.apache.commons.math.stat.distribution.ChiSquaredDistribution;\n+\n+/**\n+ * Implements test statistics defined in the TestStatistic interface.\n+ *\n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:18 $\n+ */\n+public class TestStatisticImpl implements TestStatistic {\n+    \n+    /**\n+     * Default constructor\n+     */\n+    public TestStatisticImpl() {\n+    }\n+    \n+    /**\n+     * @param observed array of observed frequency counts\n+     * @param expected array of expected frequency counts\n+     * @return chi-square test statistic\n+     * @throws IllegalArgumentException if preconditions are not met\n+     * or length is less than 2\n+     */\n+    public double chiSquare(double[] expected, double[] observed)\n+        throws IllegalArgumentException {\n+        double sumSq = 0.0d;\n+        double dev = 0.0d;\n+        if ((expected.length < 2) || (expected.length != observed.length)) {\n+            throw new IllegalArgumentException\n+                (\"observed, expected array lengths incorrect\");\n+        }\n+        if ((StatUtils.min(expected) <= 0) || (StatUtils.min(observed) < 0)) {\n+            throw new IllegalArgumentException\n+                (\"observed counts must be non-negative,\" + \n+                    \" expected counts must be postive\");\n+        }\n+        for (int i = 0; i < observed.length; i++) {\n+            dev = (observed[i] - expected[i]);\n+            sumSq += dev * dev / expected[i];\n+        }\n+        \n+        return sumSq;\n+    }\n+    \n+    /**\n+     * @param observed array of observed frequency counts\n+     * @param expected array of exptected frequency counts\n+     * @return p-value\n+     * @throws IllegalArgumentException if preconditions are not met\n+     */\n+    public double chiSquareTest(double[] expected, double[] observed) \n+        throws IllegalArgumentException {\n+        ChiSquaredDistribution chiSquaredDistribution = \n+            DistributionFactory.newInstance().createChiSquareDistribution\n+                ((double) expected.length - 1);\n+        return 1 - chiSquaredDistribution.cummulativeProbability(\n+            chiSquare(expected, observed));     \n+    }\n+    \n+    /**\n+     * @param observed array of observed frequency counts\n+     * @param expected array of exptected frequency counts\n+     * @param alpha significance level of the test\n+     * @return true iff null hypothesis can be rejected with confidence\n+     * 1 - alpha\n+     * @throws IllegalArgumentException if preconditions are not met\n+     */\n+    public boolean chiSquareTest(double[] expected, double[] observed, \n+        double alpha) \n+        throws IllegalArgumentException {\n+        if ((alpha <= 0) || (alpha > 0.5)) {\n+           throw new IllegalArgumentException\n+                (\"bad significance level: \" + alpha);\n+        }\n+        return (chiSquareTest(expected, observed) < alpha);\n+    }\n+\n+    /**\n+     * @param mu comparison constant\n+     * @param observed array of values\n+     * @return t statistic\n+     * @throws IllegalArgumentException if input array length is less than 5\n+     */\n+    public double t(double mu, double[] observed) \n+    throws IllegalArgumentException {\n+        if ((observed == null) || (observed.length < 5)) {\n+            throw new IllegalArgumentException\n+                (\"insufficient data for t statistic\");\n+        }\n+        return t(StatUtils.mean(observed), mu, StatUtils.variance(observed), \n+            observed.length);\n+    }\n+    \n+    /**\n+     * @param mu constant value to compare sample mean against\n+     * @param sample array of sample data values\n+     * @param alpha significance level of the test\n+     * @return p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    public boolean tTest(double mu, double[] sample, double alpha)\n+        throws IllegalArgumentException {\n+        if ((alpha <= 0) || (alpha > 0.5)) {\n+           throw new IllegalArgumentException\n+                (\"bad significance level: \" + alpha);\n+        }   \n+        return (tTest(mu, sample) < alpha);\n+    }\n+                       \n+    /**\n+     * @param sample1 array of sample data values\n+     * @param sample2 array of sample data values\n+     * @return t-statistic\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    public double t(double[] sample1, double[] sample2) \n+        throws IllegalArgumentException {\n+        if ((sample1 == null) || (sample2 == null || \n+            Math.min(sample1.length, sample2.length) < 5)) {\n+            throw new IllegalArgumentException\n+                (\"insufficient data for t statistic\");\n+        }\n+        return t(StatUtils.mean(sample1), StatUtils.mean(sample2), \n+            StatUtils.variance(sample1), StatUtils.variance(sample2), \n+            (double) sample1.length, (double) sample2.length);\n+    }\n+    \n+    /**\n+     *\n+     * @param sample1 array of sample data values\n+     * @param sample2 array of sample data values\n+     * @return tTest p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    public double tTest(double[] sample1, double[] sample2)\n+        throws IllegalArgumentException  {\n+        if ((sample1 == null) || (sample2 == null ||\n+        Math.min(sample1.length, sample2.length) < 5)) {\n+            throw new IllegalArgumentException\n+            (\"insufficient data\");\n+        }\n+        return tTest(StatUtils.mean(sample1), StatUtils.mean(sample2), \n+            StatUtils.variance(sample1), StatUtils.variance(sample2), \n+            (double) sample1.length, (double) sample2.length);      \n+    }\n+    \n+    /**\n+     * @param sample1 array of sample data values\n+     * @param sample2 array of sample data values\n+     * @param alpha significance level\n+     * @return true if the null hypothesis can be rejected with \n+     * confidence 1 - alpha\n+     * @throws IllegalArgumentException if the preconditions are not met\n+     */\n+    public boolean tTest(double[] sample1, double[] sample2, double alpha)\n+        throws IllegalArgumentException {\n+       if ((alpha <= 0) || (alpha > 0.5)) {\n+           throw new IllegalArgumentException\n+                (\"bad significance level: \" + alpha);\n+       }\n+       return (tTest(sample1, sample2) < alpha);\n+    }\n+    \n+    /**\n+     * @param mu constant value to compare sample mean against\n+     * @param sample array of sample data values\n+     * @return p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    public double tTest(double mu, double[] sample) \n+        throws IllegalArgumentException {\n+        if ((sample == null) || (sample.length < 5)) {\n+            throw new IllegalArgumentException\n+                (\"insufficient data for t statistic\");\n+        }\n+        return tTest(StatUtils.mean(sample), mu, StatUtils.variance(sample),\n+            sample.length);\n+    }\n+    \n+    /**\n+     * @param mu comparison constant\n+     * @param sampleStats Univariate holding sample summary statitstics\n+     * @return t statistic\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    public double t(double mu, Univariate sampleStats) \n+        throws IllegalArgumentException {\n+        if ((sampleStats == null) || (sampleStats.getN() < 5)) {\n+            throw new IllegalArgumentException\n+                (\"insufficient data for t statistic\");\n+        }\n+        return t(sampleStats.getMean(), mu, sampleStats.getVariance(), \n+            sampleStats.getN());\n+    }\n+    \n+    /**\n+     * @param sampleStats1 Univariate describing data from the first sample\n+     * @param sampleStats2 Univariate describing data from the second sample\n+     * @return t statistic\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    public double t(Univariate sampleStats1, Univariate sampleStats2) \n+        throws IllegalArgumentException {\n+        if ((sampleStats1 == null) || (sampleStats2 == null || \n+            Math.min(sampleStats1.getN(), sampleStats2.getN()) < 5)) {\n+            throw new IllegalArgumentException\n+                (\"insufficient data for t statistic\");\n+        }\n+        return t(sampleStats1.getMean(), sampleStats2.getMean(), \n+            sampleStats1.getVariance(), sampleStats2.getVariance(), \n+            (double) sampleStats1.getN(), (double) sampleStats2.getN());\n+    }\n+    \n+    /**\n+     * @param sampleStats1 Univariate describing data from the first sample\n+     * @param sampleStats2 Univariate describing data from the second sample\n+     * @return p-value for t-test\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    public double tTest(Univariate sampleStats1, Univariate sampleStats2)\n+        throws IllegalArgumentException {\n+        if ((sampleStats1 == null) || (sampleStats2 == null || \n+            Math.min(sampleStats1.getN(), sampleStats2.getN()) < 5)) {\n+            throw new IllegalArgumentException\n+                (\"insufficient data for t statistic\");\n+        }\n+         return tTest(sampleStats1.getMean(), sampleStats2.getMean(), \n+            sampleStats1.getVariance(), sampleStats2.getVariance(), \n+            (double) sampleStats1.getN(), (double) sampleStats2.getN());\n+    }\n+    \n+    /**\n+     * @param sampleStats1 Univariate describing sample data values\n+     * @param sampleStats2 Univariate describing sample data values\n+     * @param alpha significance level of the test\n+     * @return true if the null hypothesis can be rejected with \n+     * confidence 1 - alpha\n+     * @throws IllegalArgumentException if the preconditions are not met\n+     */\n+    public boolean tTest(Univariate sampleStats1, Univariate sampleStats2, \n+    double alpha) throws IllegalArgumentException {\n+        if ((alpha <= 0) || (alpha > 0.5)) {\n+            throw new IllegalArgumentException\n+                (\"bad significance level: \" + alpha);\n+        }\n+        return (tTest(sampleStats1, sampleStats2) < alpha);\n+    }\n+    \n+    /**\n+     * @param mu constant value to compare sample mean against\n+     * @param sampleStats Univariate describing sample data values\n+     * @param alpha significance level of the test\n+     * @return p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    public boolean tTest(double mu, Univariate sampleStats, double alpha)\n+        throws IllegalArgumentException {\n+        if ((alpha <= 0) || (alpha > 0.5)) {\n+           throw new IllegalArgumentException\n+                (\"bad significance level: \" + alpha);\n+        }   \n+        return (tTest(mu, sampleStats) < alpha);\n+    }\n+    \n+    /**\n+     * @param mu constant value to compare sample mean against\n+     * @param sampleStats Univariate describing sample data\n+     * @return p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    public double tTest(double mu, Univariate sampleStats)\n+        throws IllegalArgumentException {\n+        if ((sampleStats == null) || (sampleStats.getN() < 5)) {\n+            throw new IllegalArgumentException\n+                (\"insufficient data for t statistic\");\n+        }\n+        return tTest(sampleStats.getMean(), mu, sampleStats.getVariance(),\n+            sampleStats.getN());\n+    }\n+    \n+    //----------------------------------------------- Private methods \n+    \n+    /**\n+     * Computes approximate degrees of freedom for 2-sample t-test.\n+     * \n+     * @param v1 first sample variance\n+     * @param v2 second sample variance\n+     * @param n1 first sample n\n+     * @param n2 second sample n\n+     * @return approximate degrees of freedom\n+     */\n+    private double df(double v1, double v2, double n1, double n2) {\n+        return (((v1 / n1) + (v2 / n2)) * ((v1 / n1) + (v2 / n2))) /\n+            ((v1 * v1) / (n1 * n1 * (n1 - 1d)) + \n+                (v2 * v2) / (n2 * n2 * (n2 - 1d)));       \n+    }\n+    \n+     /**\n+     * Computes t test statistic for 2-sample t-test.\n+     * \n+     * @param m1 first sample mean\n+     * @param m2 second sample mean\n+     * @param v1 first sample variance\n+     * @param v2 second sample variance\n+     * @param n1 first sample n\n+     * @param n2 second sample n\n+     * @return t test statistic\n+     */\n+    private double t(double m1, double m2, double v1, double v2, double n1, \n+        double n2) {\n+        return (m1 - m2) / Math.sqrt((v1 / n1) + (v2 / n2));\n+    }\n+    \n+    /**\n+     * Computes t test statistic for 1-sample t-test.\n+     * \n+     * @param m sample mean\n+     * @param mu constant to test against\n+     * @param v sample variance\n+     * @param n sample n\n+     * @return t test statistic\n+     */\n+    private double t(double m, double mu, double v, double n) {\n+        return (m - mu) / Math.sqrt(v / n);\n+    }\n+    \n+    /**\n+     * Computes p-value for 2-sided, 2-sample t-test.\n+     * \n+     * @param m1 first sample mean\n+     * @param m2 second sample mean\n+     * @param v1 first sample variance\n+     * @param v2 second sample variance\n+     * @param n1 first sample n\n+     * @param n2 second sample n\n+     * @return p-value\n+     */\n+    private double tTest(double m1, double m2, double v1, double v2, double n1, \n+        double n2) {\n+        double t = Math.abs(t(m1, m2, v1, v2, n1, n2));\n+        TDistribution tDistribution = \n+            DistributionFactory.newInstance().createTDistribution\n+                (df(v1, v2, n1, n2));\n+        return 1.0 - tDistribution.cummulativeProbability(-t, t); \n+    }\n+    \n+    /**\n+     * Computes p-value for 2-sided, 1-sample t-test.\n+     * \n+     * @param m sample mean\n+     * @param mu constant to test against\n+     * @param v sample variance\n+     * @param n sample n\n+     * @return p-value\n+     */\n+    private double tTest(double m, double mu, double v, double n) {\n+    double t = Math.abs(t(m, mu, v, n)); \n+        TDistribution tDistribution = \n+            DistributionFactory.newInstance().createTDistribution\n+                (n - 1);\n+        return 1.0 - tDistribution.cummulativeProbability(-t, t);\n+    }          \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/Univariate.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+/**\n+ *\n+ * Accumulates univariate statistics for values fed in \n+ * through the addValue() method. This interface defines the LCD interface\n+ * which all Univariate implementations must implement. <p>\n+ * A \"rolling\" capability is supported by all implementations with the following\n+ * contract: <p>\n+ * <i> Setting the windowSize property limits the domain of all statistics to\n+ * the last <code>windowSize</code> values added.</i><p>\n+ * We use the term <i>available values</i> throughout the API documentation\n+ * to refer to these values when the windowSize is set. For example, if the\n+ * windowSize is set to 3 and the values {1,2,3,4,5} have been added <strong>\n+ * in that order</strong> then the <i>available values</i> are {3,4,5} and all\n+ * reported statistics will be based on these values<p>\n+ * The default windowSize is \"infinite\" -- i.e., all values added are included\n+ * in all computations.\n+ * @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:18 $\n+*/\n+public interface Univariate extends Applyable{\n+    /**\n+     * A LEPTOKURTIC set has a positive kurtosis (a high peak) \n+     */\n+    public static int LEPTOKURTIC = 1;\n+    /**\n+     * A MESOKURTIC set has a kurtosis of 0 - it is a normal distribution\n+     */\n+    public static int MESOKURTIC = 0;\n+    /**\n+     * A PLATYKURTIC set has a negative kurtosis (a flat \"peak\")\n+     */\n+    public static int PLATYKURTIC = -1;\n+\n+    /**\n+     * Adds the value to the set of numbers\n+     * @param v the value to be added \n+     */\n+    void addValue(double v);\n+\n+    /** \n+     * Returns the <a href=\"http://www.xycoon.com/arithmetic_mean.htm\">\n+     * arithmetic mean </a> of the available values \n+     * @return The mean or Double.NaN if no values have been added.\n+     */\n+    double getMean();\n+\n+    /** \n+     * Returns the <a href=\"http://www.xycoon.com/geometric_mean.htm\">\n+     * geometric mean </a> of the available values\n+     * @return The geometricMean, Double.NaN if no values have been added, \n+     * or if the productof the available values is less than or equal to 0.\n+     */\n+    double getGeometricMean();\n+\n+    /** \n+     * Returns the variance of the available values.\n+     * @return The variance, Double.NaN if no values have been added \n+     * or 0.0 for a single value set.  \n+     */\n+    double getVariance();\n+\n+    /** \n+     * Returns the standard deviation of the available values.\n+     * @return The standard deviation, Double.NaN if no values have been added \n+     * or 0.0 for a single value set. \n+     */\n+    double getStandardDeviation();\n+\n+    /**\n+     * Returns the skewness of the available values. Skewness is a \n+     * measure of the assymetry of a given distribution.\n+     * @return The skewness, Double.NaN if no values have been added \n+     * or 0.0 for a value set &lt;=2. \n+     */\n+    double getSkewness();\n+\n+    /**\n+     * Returns the Kurtosis of the available values. Kurtosis is a \n+     * measure of the \"peakedness\" of a distribution\n+     * @return The kurtosis, Double.NaN if no values have been added, or 0.0 \n+     * for a value set &lt;=3. \n+     */\n+    double getKurtosis();\n+\n+    /**\n+     * Returns the Kurtosis \"classification\" a distribution can be \n+     * leptokurtic (high peak), platykurtic (flat peak), \n+     * or mesokurtic (zero kurtosis).  \n+     * \n+     * @return A static constant defined in this interface, \n+     *         StoredDeviation.LEPTOKURITC, StoredDeviation.PLATYKURTIC, or \n+     *         StoredDeviation.MESOKURTIC\n+     */\n+    int getKurtosisClass();\n+    \n+    /** \n+     * Returns the maximum of the available values\n+     * @return The max or Double.NaN if no values have been added.\n+     */\n+    double getMax();\n+\n+    /** \n+    * Returns the minimum of the available values\n+    * @return The min or Double.NaN if no values have been added.\n+    */\n+    double getMin();\n+\n+    /** \n+     * Returns the number of available values\n+     * @return The number of available values\n+     */\n+    int getN();\n+\n+    /**\n+     * Returns the sum of the values that have been added to Univariate.\n+     * @return The sum or Double.NaN if no values have been added\n+     */\n+    double getSum();\n+\n+    /**\n+     * Returns the sum of the squares of the available values.\n+     * @return The sum of the squares or Double.NaN if no \n+     * values have been added.\n+     */\n+    double getSumsq();\n+\n+    /** \n+     * Resets all statistics and storage\n+     */\n+    void clear();\n+\n+    /**\n+     * This constant signals that a Univariate implementation\n+     * takes into account the contributions of an infinite number of\n+     * elements.  In other words, if getWindow returns this\n+     * constant, there is, in effect, no \"window\".\n+     */\n+    static final int INFINITE_WINDOW = -1;\n+\n+    /**\n+     * Univariate has the ability to return only measures for the\n+     * last N elements added to the set of values.\n+     * @return The current window size or -1 if its Infinite.\n+     */\n+\n+    int getWindowSize();\n+\n+    /**\n+     * WindowSize controls the number of values which contribute \n+     * to the values returned by Univariate.  For example, if \n+     * windowSize is set to 3 and the values {1,2,3,4,5} \n+     * have been added <strong> in that order</strong> \n+     * then the <i>available values</i> are {3,4,5} and all\n+     * reported statistics will be based on these values\n+     * @param windowSize sets the size of the window.\n+     */\n+    void setWindowSize(int windowSize);\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/UnivariateImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic;\n+import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n+import org.apache.commons.math.util.FixedDoubleArray;\n+\n+/**\n+ *\n+ * Accumulates univariate statistics for values fed in\n+ * through the addValue() method.  Does not store raw data values.\n+ * All data are represented internally as doubles.\n+ * Integers, floats and longs can be added, but they will be converted\n+ * to doubles by addValue().\n+ *\n+ * @version $Revision: 1.25 $ $Date: 2003/11/14 22:22:18 $\n+*/\n+public class UnivariateImpl\n+    extends AbstractUnivariate\n+    implements Univariate, Serializable {\n+\n+    /** fixed storage */\n+    private FixedDoubleArray storage = null;\n+\n+    /** Creates new univariate with an infinite window */\n+    public UnivariateImpl() {\n+        super();\n+    }\n+\n+    /** \n+     * Creates a new univariate with a fixed window \n+     * @param window Window Size\n+     */\n+    public UnivariateImpl(int window) {\n+        super(window);\n+        storage = new FixedDoubleArray(window);\n+    }\n+\n+    /**\n+     *  If windowSize is set to Infinite, moments \n+     *  are calculated using the following \n+     * <a href=\"http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf\">\n+     * recursive strategy\n+     * </a>.\n+     * Otherwise, stat methods delegate to StatUtils.\n+     * @see org.apache.commons.math.stat.Univariate#addValue(double)\n+     */\n+    public void addValue(double value) {\n+\n+        if (storage != null) {\n+            /* then all getters deligate to StatUtils\n+             * and this clause simply adds/rolls a value in the storage array \n+             */\n+            if (getWindowSize() == n) {\n+                storage.addElementRolling(value);\n+            } else {\n+                n++;\n+                storage.addElement(value);\n+            }\n+\n+        } else {\n+            /* If the windowSize is infinite don't store any values and there \n+             * is no need to discard the influence of any single item.\n+             */\n+            n++;\n+            min.increment(value);\n+            max.increment(value);\n+            sum.increment(value);\n+            sumsq.increment(value);\n+            sumLog.increment(value);\n+            geoMean.increment(value);\n+\n+            moment.increment(value);\n+            //mean.increment(value);\n+            //variance.increment(value);\n+            //skewness.increment(value);\n+            //kurtosis.increment(value);\n+        }\n+    }\n+\n+    /**\n+     * Generates a text report displaying\n+     * univariate statistics from values that\n+     * have been added.\n+     * @return String with line feeds displaying statistics\n+     */\n+    public String toString() {\n+        StringBuffer outBuffer = new StringBuffer();\n+        outBuffer.append(\"UnivariateImpl:\\n\");\n+        outBuffer.append(\"n: \" + getN() + \"\\n\");\n+        outBuffer.append(\"min: \" + getMin() + \"\\n\");\n+        outBuffer.append(\"max: \" + getMax() + \"\\n\");\n+        outBuffer.append(\"mean: \" + getMean() + \"\\n\");\n+        outBuffer.append(\"std dev: \" + getStandardDeviation() + \"\\n\");\n+        outBuffer.append(\"skewness: \" + getSkewness() + \"\\n\");\n+        outBuffer.append(\"kurtosis: \" + getKurtosis() + \"\\n\");\n+        return outBuffer.toString();\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#clear()\n+     */\n+    public void clear() {\n+        super.clear();\n+        if (getWindowSize() != INFINITE_WINDOW) {\n+            storage = new FixedDoubleArray(getWindowSize());\n+        }\n+    }\n+\n+    /**\n+     * Apply the given statistic to this univariate collection.\n+     * @param stat the statistic to apply\n+     * @return the computed value of the statistic.\n+     */\n+    public double apply(UnivariateStatistic stat) {\n+        \n+        if (storage != null) {\n+            return stat.evaluate(storage.getValues(), storage.start(), storage.getNumElements());\n+        } else if (stat instanceof StorelessUnivariateStatistic) {\n+            return ((StorelessUnivariateStatistic) stat).getResult();\n+        }\n+\n+        return Double.NaN;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate;\n+\n+/**\n+ *\n+ * Abstract Implementation for StorelessUnivariateStatistics.\n+ * Provides the ability to extend polymophically so that\n+ * indiviual statistics do not need to implement these methods unless\n+ * there are better algorithms for handling the calculation.\n+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:21 $\n+ */\n+public abstract class AbstractStorelessUnivariateStatistic\n+    extends AbstractUnivariateStatistic\n+    implements StorelessUnivariateStatistic {\n+\n+    /**\n+     * This implements the AbstractUnivariateStatistic impl to funnel\n+     * calculation off to the instantanious increment method. In most cases of\n+     * StorelessUnivariateStatistic this is never really used because more\n+     * efficient algorithms are available for that statistic.\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n+     */\n+    public double evaluate(\n+        final double[] values,\n+        final int begin,\n+        final int length) {\n+        if (this.test(values, begin, length)) {\n+            this.clear();\n+            int l = begin + length;\n+            for (int i = begin; i < l; i++) {\n+                increment(values[i]);\n+            }\n+        }\n+        return getResult();\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()\n+     */\n+    public abstract void clear();\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()\n+     */\n+    public abstract double getResult();\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n+     */\n+    public abstract void increment(final double d);\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate;\n+\n+/**\n+ * Abstract Implementation for UnivariateStatistics.\n+ * Provides the ability to extend polymophically so that\n+ * indiviual statistics do not need to implement these methods.\n+ * @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:21 $\n+ */\n+public abstract class AbstractUnivariateStatistic\n+    implements UnivariateStatistic {\n+\n+    /**\n+     * This implementation provides a simple wrapper around the double[]\n+     * and passes the request onto the evaluate(DoubleArray da) method.\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[])\n+     */\n+    public double evaluate(final double[] values) {\n+        return evaluate(values, 0, values.length);\n+    }\n+\n+    /**\n+     * Subclasses of AbstractUnivariateStatistc need to implement this method.\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n+     */\n+    public abstract double evaluate(\n+        final double[] values,\n+        final int begin,\n+        final int length);\n+\n+    /**\n+     * this protected test method used by all methods to verify the content\n+     * of the array and indicies are correct.\n+     * @param values Is a double[] containing the values\n+     * @param begin processing at this point in the array\n+     * @param length processing at this point in the array\n+     * @return this is used to determine if the array is of 0 length or not,\n+     * it is used by an individual statistic to determine if continuation\n+     * of a statistical calculation should continue or return NaN.\n+     */\n+    protected boolean test(\n+        final double[] values,\n+        final int begin,\n+        final int length) {\n+\n+        if (length > values.length) {\n+            throw new IllegalArgumentException(\"length > values.length\");\n+        }\n+\n+        if (begin + length > values.length) {\n+            throw new IllegalArgumentException(\n+                \"begin + length > values.length\");\n+        }\n+\n+        if (values == null) {\n+            throw new IllegalArgumentException(\"input value array is null\");\n+        }\n+\n+        if (values.length == 0 || length == 0) {\n+            return false;\n+        }\n+\n+        return true;\n+\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate;\n+\n+/**\n+ * Extends the capabilities of UnivariateStatistic with a statefull incremental\n+ * strategy through three methods for calculating a statistic without having to\n+ * maintain a double[] of the values. Because a StorelessUnivariateStatistic\n+ * does not require that a double[] storage structure be maintained with the\n+ * values in it, there are only a subset of known statistics can actually be\n+ * implemented using it. If a Statistic cannot be implemented in a Storeless\n+ * approach it should implement the UnivariateStatistic interface directly\n+ * instead.\n+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:21 $\n+ */\n+public interface StorelessUnivariateStatistic extends UnivariateStatistic {\n+\n+    /**\n+     * Increments the internal state of the Storagless\n+     * Implementation.\n+     * @param d is the value to increment the state by.\n+     */\n+    void increment(double d);\n+\n+    /**\n+     * Returns the current state of the statistic after the\n+     * last increment.\n+     * @return value of the statistic, Double.NaN if it\n+     * has been cleared or just instantiated.\n+     */\n+    double getResult();\n+\n+\n+    /**\n+     * Clears all the internal state of the Statistic\n+     */\n+    void clear();\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate;\n+\n+/**\n+ * UnivariateStatistic interface provides methods to evaluate\n+ * double[] based content using an implemented statistical approach.\n+ * The interface provides two \"stateless\" simple methods to calculate\n+ * a statistic from a double[] based parameter.\n+ * @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:21 $\n+ */\n+public interface UnivariateStatistic {\n+\n+    /**\n+     * Evaluates the double[] returning the result of the evaluation.\n+     * @param values Is a double[] containing the values\n+     * @return the result of the evaluation or Double.NaN\n+     * if the array is empty\n+     */\n+    double evaluate(double[] values);\n+\n+    /**\n+     * Evaluates part of a double[] returning the result\n+     * of the evaluation.\n+     * @param values Is a double[] containing the values\n+     * @param begin processing at this point in the array\n+     * @param length processing at this point in the array\n+     * @return the result of the evaluation or Double.NaN\n+     * if the array is empty\n+     */\n+    double evaluate(double[] values, int begin, int length);\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.moment;\n+\n+import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;\n+\n+/**\n+ * FirstMoment.java\n+ *\n+ * The FirstMoment (arithmentic mean) is calculated using the following\n+ * <a href=\"http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf\">\n+ * recursive strategy\n+ * </a>. Both incremental and evaluation strategies currently use this approach.\n+ * @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:20 $\n+ */\n+public class FirstMoment extends AbstractStorelessUnivariateStatistic {\n+\n+    /** count of values that have been added */\n+    protected int n = 0;\n+\n+    /** first moment of values that have been added */\n+    protected double m1 = Double.NaN;\n+\n+    /**\n+     * temporary internal state made available for\n+     * higher order moments\n+     */\n+    protected double dev = 0.0;\n+\n+    /**\n+     * temporary internal state made available for\n+     * higher order moments\n+     */\n+    protected double v = 0.0;\n+\n+    /**\n+     * temporary internal state made available for\n+     * higher order moments\n+     */\n+    protected double n0 = 0.0;\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n+     */\n+    public void increment(final double d) {\n+        if (n < 1) {\n+            m1 = 0.0;\n+        }\n+\n+        n++;\n+        dev = d - m1;\n+        n0 = (double) n;\n+        v = dev / n0;\n+\n+        m1 += v;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()\n+     */\n+    public void clear() {\n+        m1 = Double.NaN;\n+        n = 0;\n+        dev = 0.0;\n+        v = 0.0;\n+        n0 = 0.0;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()\n+     */\n+    public double getResult() {\n+        return m1;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.moment;\n+\n+/**\n+ * The FourthMoment is calculated using the following\n+ * <a href=\"http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf\">\n+ * recursive strategy\n+ * </a>. Both incremental and evaluation strategies currently use this approach.\n+ * @version $Revision: 1.12 $ $Date: 2003/11/14 22:22:20 $\n+ */\n+public class FourthMoment extends ThirdMoment {\n+\n+    /** fourth moment of values that have been added */\n+    protected double m4 = Double.NaN;\n+\n+    /** temporary internal state made available for higher order moments */\n+    protected double prevM3 = 0.0;\n+\n+    /** temporary internal state made available for higher order moments */\n+    protected double n3 = 0.0;\n+\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n+     */\n+    public void increment(final double d) {\n+        if (n < 1) {\n+            m4 = 0.0;\n+            m3 = 0.0;\n+            m2 = 0.0;\n+            m1 = 0.0;\n+        }\n+\n+        /* retain previous m3 */\n+        prevM3 = m3;\n+\n+        /* increment m1, m2 and m3 (and prevM2, _n0, _n1, _n2, _v, _v2) */\n+        super.increment(d);\n+\n+        n3 = (double) (n - 3);\n+\n+        m4 = m4 - (4.0 * v * prevM3) + (6.0 * v2 * prevM2) +\n+            ((n0 * n0) - 3 * n1) * (v2 * v2 * n1 * n0);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()\n+     */\n+    public double getResult() {\n+        return m4;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()\n+     */\n+    public void clear() {\n+        super.clear();\n+        m4 = Double.NaN;\n+        prevM3 = 0.0;\n+        n3 = 0.0;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.moment;\n+\n+import org.apache.commons.math.stat.univariate.summary.SumOfLogs;\n+\n+/**\n+ * Returns the <a href=\"http://www.xycoon.com/geometric_mean.htm\">\n+ * geometric mean </a> of the available values\n+ * @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:20 $\n+ */\n+public class GeometricMean extends SumOfLogs {\n+\n+    /** */\n+    protected int n = 0;\n+\n+    /** */\n+    private double geoMean = Double.NaN;\n+\n+    /** */\n+    private double lastSum = 0.0;\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n+     */\n+    public void increment(final double d) {\n+        n++;\n+        super.increment(d);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()\n+     */\n+    public double getResult() {\n+        if (lastSum != super.getResult() || n == 1) {\n+            lastSum = super.getResult();\n+            geoMean = Math.exp(lastSum / (double) n);\n+        }\n+        return geoMean;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()\n+     */\n+    public void clear() {\n+        super.clear();\n+        lastSum = 0.0;\n+        geoMean = Double.NaN;\n+        n = 0;\n+    }\n+\n+    /**\n+     * Returns the geometric mean for this collection of values\n+     * @param values Is a double[] containing the values\n+     * @param begin processing at this point in the array\n+     * @param length processing at this point in the array\n+     * @return the geometric mean or Double.NaN if the array is empty or\n+     * any of the values are &lt;= 0.\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n+     */\n+    public double evaluate(\n+        final double[] values,\n+        final int begin,\n+        final int length) {\n+        return Math.exp(\n+            super.evaluate(values, begin, length) / (double) length);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.moment;\n+\n+import org\n+    .apache\n+    .commons\n+    .math\n+    .stat\n+    .univariate\n+    .AbstractStorelessUnivariateStatistic;\n+\n+/**\n+ * @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:20 $\n+ */\n+public class Kurtosis extends AbstractStorelessUnivariateStatistic {\n+\n+    /** */\n+    protected FourthMoment moment = null;\n+\n+    /** */\n+    protected boolean incMoment = true;\n+\n+    /** */\n+    private double kurtosis = Double.NaN;\n+\n+    /** */\n+    private int n = 0;\n+\n+    /**\n+     * Construct a Kurtosis\n+     */\n+    public Kurtosis() {\n+        moment = new FourthMoment();\n+    }\n+\n+    /**\n+     * Construct a Kurtosis with an external moment\n+     * @param m4 external Moment\n+     */\n+    public Kurtosis(final FourthMoment m4) {\n+        incMoment = false;\n+        this.moment = m4;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n+     */\n+    public void increment(final double d) {\n+        if (incMoment) {\n+            moment.increment(d);\n+        }\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()\n+     */\n+    public double getResult() {\n+        if (n < moment.n) {\n+            if (moment.n <= 0) {\n+                kurtosis = Double.NaN;\n+            }\n+\n+            double variance =\n+                (moment.n < 1) ? 0.0 : moment.m2 / (double) (moment.n - 1);\n+\n+            if (moment.n <= 3 || variance < 10E-20) {\n+                kurtosis = 0.0;\n+            } else {\n+                kurtosis =\n+                    (moment.n0 * (moment.n0 + 1) * moment.m4 -\n+                    3 * moment.m2 * moment.m2 * moment.n1) /\n+                    (moment.n1 * moment.n2 * moment.n3 * variance * variance);\n+            }\n+            n = moment.n;\n+        }\n+\n+        return kurtosis;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()\n+     */\n+    public void clear() {\n+        if (incMoment) {\n+            moment.clear();\n+        }\n+        kurtosis = Double.NaN;\n+        n = 0;\n+    }\n+\n+    /*UnvariateStatistic Approach */\n+\n+    /** */\n+    Mean mean = new Mean();\n+\n+    /**\n+     * Returns the kurtosis for this collection of values. Kurtosis is a\n+     * measure of the \"peakedness\" of a distribution.  This algorithm uses a\n+     * corrected two pass algorithm of the following\n+     * <a href=\"http://lib-www.lanl.gov/numerical/bookcpdf/c14-1.pdf\">\n+     * corrected two pass formula (14.1.8)</a>, and also referenced in:\n+     * <p>\n+     * \"Algorithms for Computing the Sample Variance: Analysis and\n+     * Recommendations\", Chan, T.F., Golub, G.H., and LeVeque, R.J.\n+     * 1983, American Statistician, vol. 37, pp. 242?247.\n+     * </p>\n+     * @param values Is a double[] containing the values\n+     * @param begin processing at this point in the array\n+     * @param length processing at this point in the array\n+     * @return the kurtosis of the values or Double.NaN if the array is empty\n+     */\n+    public double evaluate(\n+        final double[] values,\n+        final int begin,\n+        final int length) {\n+\n+        // Initialize the kurtosis\n+        double kurt = Double.NaN;\n+\n+        if (test(values, begin, length)) {\n+            if (length <= 3) {\n+                kurt = 0.0;\n+            } else {\n+\n+                // Get the mean and the standard deviation\n+                double m = mean.evaluate(values, begin, length);\n+\n+                // Calc the std, this is implemented here instead\n+                // of using the standardDeviation method eliminate\n+                // a duplicate pass to get the mean\n+                double accum = 0.0;\n+                double accum2 = 0.0;\n+                for (int i = begin; i < begin + length; i++) {\n+                    accum += Math.pow((values[i] - m), 2.0);\n+                    accum2 += (values[i] - m);\n+                }\n+\n+                double stdDev =\n+                    Math.sqrt(\n+                        (accum - (Math.pow(accum2, 2) / ((double) length))) /\n+                        (double) (length - 1));\n+\n+                // Sum the ^4 of the distance from the mean divided by the\n+                // standard deviation\n+                double accum3 = 0.0;\n+                for (int i = begin; i < begin + length; i++) {\n+                    accum3 += Math.pow((values[i] - m) / stdDev, 4.0);\n+                }\n+\n+                // Get N\n+                double n0 = length;\n+\n+                double coefficientOne =\n+                    (n0 * (n0 + 1)) / ((n0 - 1) * (n0 - 2) * (n0 - 3));\n+                double termTwo =\n+                    ((3 * Math.pow(n0 - 1, 2.0)) / ((n0 - 2) * (n0 - 3)));\n+\n+                // Calculate kurtosis\n+                kurt = (coefficientOne * accum3) - termTwo;\n+            }\n+        }\n+\n+        return kurt;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Mean.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.moment;\n+\n+import org\n+    .apache\n+    .commons\n+    .math\n+    .stat\n+    .univariate\n+    .AbstractStorelessUnivariateStatistic;\n+import org.apache.commons.math.stat.univariate.summary.Sum;\n+\n+/**\n+ * Returns the <a href=\"http://www.xycoon.com/arithmetic_mean.htm\">\n+ * arithmetic mean </a> of the available values.\n+ * @version $Revision: 1.12 $ $Date: 2003/11/14 22:22:20 $\n+ */\n+public class Mean extends AbstractStorelessUnivariateStatistic {\n+\n+    /** first moment of values that have been added */\n+    protected FirstMoment moment = null;\n+\n+    /** */\n+    protected boolean incMoment = true;\n+\n+    /** */\n+    public Mean() {\n+        moment = new FirstMoment();\n+    }\n+\n+    /**\n+     * Constructs a Mean with an External Moment.\n+     * @param m1 the moment\n+     */\n+    public Mean(final FirstMoment m1) {\n+        this.moment = m1;\n+        incMoment = false;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n+     */\n+    public void increment(final double d) {\n+        if (incMoment) {\n+            moment.increment(d);\n+        }\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()\n+     */\n+    public void clear() {\n+        if (incMoment) {\n+            moment.clear();\n+        }\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()\n+     */\n+    public double getResult() {\n+        return moment.m1;\n+    }\n+\n+    /*UnvariateStatistic Approach */\n+\n+    /** */\n+    protected Sum sum = new Sum();\n+\n+    /**\n+     * Returns the <a href=\"http://www.xycoon.com/arithmetic_mean.htm\">\n+     * arithmetic mean </a> of a double[] of the available values.\n+     * @param values Is a double[] containing the values\n+     * @param begin processing at this point in the array\n+     * @param length processing at this point in the array\n+     * @return the mean of the values or Double.NaN if the array is empty\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n+     */\n+    public double evaluate(\n+        final double[] values,\n+        final int begin,\n+        final int length) {\n+        if (test(values, begin, length)) {\n+            return sum.evaluate(values) / ((double) length);\n+        }\n+        return Double.NaN;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.moment;\n+\n+/**\n+ * The SecondMoment is calculated using the following\n+ * <a href=\"http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf\">\n+ * recursive strategy\n+ * </a>. Both incremental and evaluation strategies currently use this approach.\n+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:20 $\n+ */\n+public class SecondMoment extends FirstMoment {\n+\n+    /** second moment of values that have been added */\n+    protected double m2 = Double.NaN;\n+\n+    /** temporary internal state made availabel for higher order moments */\n+    protected double n1 = 0.0;\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n+     */\n+    public void increment(final double d) {\n+        if (n < 1) {\n+            m1 = m2 = 0.0;\n+        }\n+\n+        /* increment m1 and _n0, _dev,  _v) */\n+        super.increment(d);\n+\n+        n1 = n0 - 1;\n+\n+        /* increment and return m2 */\n+        m2 += n1 * dev * v;\n+\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()\n+     */\n+    public void clear() {\n+        super.clear();\n+        m2 = Double.NaN;\n+        n1 = 0.0;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()\n+     */\n+    public double getResult() {\n+        return m2;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.moment;\n+\n+import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;\n+\n+/**\n+ * @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:20 $\n+ */\n+public class Skewness extends AbstractStorelessUnivariateStatistic {\n+\n+    /** */\n+    protected ThirdMoment moment = null;\n+\n+    /** */\n+    protected boolean incMoment = true;\n+\n+    /** */\n+    protected double skewness = Double.NaN;\n+\n+    /** */\n+    private int n = 0;\n+\n+    /**\n+     * Constructs a Skewness\n+     */\n+    public Skewness() {\n+        moment = new ThirdMoment();\n+    }\n+\n+    /**\n+     * Constructs a Skewness with an external moment\n+     * @param m3 external moment\n+     */\n+    public Skewness(final ThirdMoment m3) {\n+        incMoment = false;\n+        this.moment = m3;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n+     */\n+    public void increment(final double d) {\n+        if (incMoment) {\n+            moment.increment(d);\n+        }\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()\n+     */\n+    public double getResult() {\n+        if (n < moment.n) {\n+            if (moment.n <= 0) {\n+                skewness = Double.NaN;\n+            }\n+\n+            double variance =\n+                (moment.n < 1) ? 0.0 : moment.m2 / (double) (moment.n - 1);\n+\n+            if (moment.n <= 2 || variance < 10E-20) {\n+                skewness = 0.0;\n+            } else {\n+                skewness = (moment.n0 * moment.m3) /\n+                    (moment.n1 * moment.n2 * Math.sqrt(variance) * variance);\n+            }\n+            n = moment.n;\n+        }\n+        return skewness;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()\n+     */\n+    public void clear() {\n+        if (incMoment) {\n+            moment.clear();\n+        }\n+        skewness = Double.NaN;\n+        n = 0;\n+    }\n+\n+    /*UnvariateStatistic Approach */\n+\n+    /** */\n+    Mean mean = new Mean();\n+\n+    /**\n+     * Returns the skewness of a collection of values.  Skewness is a\n+     * measure of the assymetry of a given distribution.\n+     * This algorithm uses a corrected two pass algorithm of the following\n+     * <a href=\"http://lib-www.lanl.gov/numerical/bookcpdf/c14-1.pdf\">\n+     * corrected two pass formula (14.1.8)</a>, and also referenced in\n+     * <p>\n+     * \"Algorithms for Computing the Sample Variance: Analysis and\n+     * Recommendations\", Chan, T.F., Golub, G.H., and LeVeque, R.J.\n+     * 1983, American Statistician, vol. 37, pp. 242?247.\n+     * </p>\n+     * @param values Is a double[] containing the values\n+     * @param begin processing at this point in the array\n+     * @param length processing at this point in the array\n+     * @return the skewness of the values or Double.NaN if the array is empty\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n+     */\n+    public double evaluate(\n+        final double[] values,\n+        final int begin,\n+        final int length) {\n+\n+        // Initialize the skewness\n+        double skew = Double.NaN;\n+\n+        if (test(values, begin, length)) {\n+\n+            if (length <= 2) {\n+                skew = 0.0;\n+            } else {\n+                // Get the mean and the standard deviation\n+                double m = mean.evaluate(values, begin, length);\n+\n+                // Calc the std, this is implemented here instead\n+                // of using the standardDeviation method eliminate\n+                // a duplicate pass to get the mean\n+                double accum = 0.0;\n+                double accum2 = 0.0;\n+                for (int i = begin; i < begin + length; i++) {\n+                    accum += Math.pow((values[i] - m), 2.0);\n+                    accum2 += (values[i] - m);\n+                }\n+                double stdDev =\n+                    Math.sqrt(\n+                        (accum - (Math.pow(accum2, 2) / ((double) length))) /\n+                            (double) (length - 1));\n+\n+                // Calculate the skew as the sum the cubes of the distance\n+                // from the mean divided by the standard deviation.\n+                double accum3 = 0.0;\n+                for (int i = begin; i < begin + length; i++) {\n+                    accum3 += Math.pow((values[i] - m) / stdDev, 3.0);\n+                }\n+\n+                // Get N\n+                double n0 = length;\n+\n+                // Calculate skewness\n+                skew = (n0 / ((n0 - 1) * (n0 - 2))) * accum3;\n+            }\n+        }\n+\n+        return skew;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.moment;\n+\n+/**\n+ *\n+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:20 $\n+ */\n+public class StandardDeviation extends Variance {\n+\n+    /** */\n+    protected double std = Double.NaN;\n+\n+    /** */\n+    private double lastVar = 0.0;\n+\n+    /**\n+     * Constructs a StandardDeviation\n+     */\n+    public StandardDeviation() {\n+        super();\n+    }\n+\n+    /**\n+     * Constructs a StandardDeviation with an external moment\n+     * @param m2 the external moment\n+     */\n+    public StandardDeviation(final SecondMoment m2) {\n+        super(m2);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n+     */\n+    public void increment(final double d) {\n+        super.increment(d);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()\n+     */\n+    public double getResult() {\n+        if (lastVar != super.getResult()) {\n+            lastVar = super.getResult();\n+            if (Double.isNaN(lastVar)) {\n+                std = Double.NaN;\n+            } else if (lastVar == 0.0) {\n+                std = 0.0;\n+            } else {\n+                std = Math.sqrt(lastVar);\n+            }\n+        }\n+        return std;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()\n+     */\n+    public void clear() {\n+        super.clear();\n+        lastVar = 0.0;\n+    }\n+\n+    /**\n+     * Returns the Standard Deviation on an array of values.\n+     * @param values Is a double[] containing the values\n+     * @param begin processing at this point in the array\n+     * @param length processing at this point in the array\n+     * @return the result, Double.NaN if no values for an empty array\n+     * or 0.0 for a single value set.\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n+     */\n+    public double evaluate(\n+        final double[] values,\n+        final int begin,\n+        final int length) {\n+\n+        double var = super.evaluate(values, begin, length);\n+\n+        if (Double.isNaN(var)) {\n+            return Double.NaN;\n+        }\n+\n+        return var != 0.0 ? Math.sqrt(var) : 0.0;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.moment;\n+\n+/**\n+ * The ThirdMoment (arithmentic mean) is calculated using the following\n+ * <a href=\"http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf\">\n+ * recursive strategy\n+ * </a>. Both incremental and evaluation strategies currently use this approach.\n+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:20 $\n+ */\n+public class ThirdMoment extends SecondMoment {\n+\n+    /** third moment of values that have been added */\n+    protected double m3 = Double.NaN;\n+\n+    /** temporary internal state made availabel for higher order moments */\n+    protected double v2 = 0.0;\n+\n+    /** temporary internal state made availabel for higher order moments */\n+    protected double n2 = 0.0;\n+\n+    /** temporary internal state made availabel for higher order moments */\n+    protected double prevM2 = 0.0;\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n+     */\n+    public void increment(final double d) {\n+        if (n < 1) {\n+            m3 = m2 = m1 = 0.0;\n+        }\n+\n+        /* retain a reference to the last m2*/\n+        prevM2 = m2;\n+\n+        /* increment m1 and m2 (and _n0, _n1, _v) */\n+        super.increment(d);\n+\n+        v2 = v * v;\n+        n2 = (double) (n - 2);\n+\n+        m3 = m3 - (3.0 * v * prevM2) + (n0 * n1 * n2 * v2 * v);\n+\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()\n+     */\n+    public double getResult() {\n+        return m3;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()\n+     */\n+    public void clear() {\n+        super.clear();\n+        m3 = Double.NaN;\n+        v2 = 0.0;\n+        n2 = 0.0;\n+        prevM2 = 0.0;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Variance.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.moment;\n+\n+import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;\n+\n+/**\n+ *\n+ * @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:20 $\n+ */\n+public class Variance extends AbstractStorelessUnivariateStatistic {\n+\n+    /** SecondMoment is used in incremental calculation of Variance*/\n+    protected SecondMoment moment = null;\n+\n+    /**\n+     * Boolean test to determine if this Variance should also increment\n+     * the second moment, this evaluates to false when this Variance is\n+     * constructed with an external SecondMoment as a parameter.\n+     */\n+    protected boolean incMoment = true;\n+\n+    /**\n+     * This property maintains the latest calculated\n+     * variance for efficiency when getResult() is called\n+     * many times between increments.\n+     */\n+    protected double variance = Double.NaN;\n+\n+    /**\n+     * Maintains the current count of inrementations that have occured.\n+     * If the external SecondMoment is used, the this is updated from\n+     * that moments counter\n+     */\n+    protected int n = 0;\n+\n+    /**\n+     * Constructs a Variance.\n+     */\n+    public Variance() {\n+        moment = new SecondMoment();\n+    }\n+\n+    /**\n+     * Constructs a Variance based on an externalized second moment.\n+     * @param m2 the SecondMoment (Thrid or Fourth moments work\n+     * here as well.)\n+     */\n+    public Variance(final SecondMoment m2) {\n+        incMoment = false;\n+        this.moment = m2;\n+    }\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n+     */\n+    public void increment(final double d) {\n+        if (incMoment) {\n+            moment.increment(d);\n+        }\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()\n+     */\n+    public double getResult() {\n+        if (n < moment.n) {\n+            if (moment.n <= 0) {\n+                variance = Double.NaN;\n+            } else if (moment.n <= 1) {\n+                variance = 0.0;\n+            } else {\n+                variance = moment.m2 / (moment.n0 - 1);\n+            }\n+            n = moment.n;\n+        }\n+\n+        return variance;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()\n+     */\n+    public void clear() {\n+        if (incMoment) {\n+            moment.clear();\n+        }\n+        variance = Double.NaN;\n+        n = 0;\n+    }\n+\n+    /** Mean to be used in UnvariateStatistic evaluation approach. */\n+    protected Mean mean = new Mean();\n+\n+    /**\n+     * Returns the variance of the available values. This uses a corrected\n+     * two pass algorithm of the following\n+     * <a href=\"http://lib-www.lanl.gov/numerical/bookcpdf/c14-1.pdf\">\n+     * corrected two pass formula (14.1.8)</a>, and also referenced in:\n+     * <p>\n+     * \"Algorithms for Computing the Sample Variance: Analysis and\n+     * Recommendations\", Chan, T.F., Golub, G.H., and LeVeque, R.J.\n+     * 1983, American Statistician, vol. 37, pp. 242?247.\n+     * </p>\n+     * @param values Is a double[] containing the values\n+     * @param begin processing at this point in the array\n+     * @param length processing at this point in the array\n+     * @return the result, Double.NaN if no values for an empty array\n+     * or 0.0 for a single value set.\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n+     */\n+    public double evaluate(\n+        final double[] values,\n+        final int begin,\n+        final int length) {\n+\n+        double var = Double.NaN;\n+\n+        if (test(values, begin, length)) {\n+            if (length == 1) {\n+                var = 0.0;\n+            } else if (length > 1) {\n+                double m = mean.evaluate(values, begin, length);\n+                double accum = 0.0;\n+                double accum2 = 0.0;\n+                for (int i = begin; i < begin + length; i++) {\n+                    accum += Math.pow((values[i] - m), 2.0);\n+                    accum2 += (values[i] - m);\n+                }\n+                var = (accum - (Math.pow(accum2, 2) / ((double) length))) /\n+                    (double) (length - 1);\n+            }\n+        }\n+        return var;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Max.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.rank;\n+\n+import org\n+    .apache\n+    .commons\n+    .math\n+    .stat\n+    .univariate\n+    .AbstractStorelessUnivariateStatistic;\n+\n+/**\n+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:21 $\n+ */\n+public class Max extends AbstractStorelessUnivariateStatistic {\n+\n+    /** */\n+    private double value = Double.NaN;\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n+     */\n+    public void increment(final double d) {\n+        value = Double.isNaN(value) ? d : Math.max(value, d);\n+    }\n+\n+    /**\n+         * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()\n+         */\n+    public void clear() {\n+        value = Double.NaN;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()\n+     */\n+    public double getResult() {\n+        return value;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n+     */\n+    public double evaluate(\n+        final double[] values,\n+        final int begin,\n+        final int length) {\n+        double max = Double.NaN;\n+        if (test(values, begin, length)) {\n+            max = values[begin];\n+            for (int i = begin; i < begin + length; i++) {\n+                max = (max > values[i]) ? max : values[i];\n+            }\n+        }\n+        return max;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Median.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.rank;\n+\n+\n+/**\n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $\n+ */\n+public class Median extends Percentile {\n+\n+    /**\n+     *\n+     */\n+    public Median() {\n+        super(50.0);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Min.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.rank;\n+\n+import org\n+    .apache\n+    .commons\n+    .math\n+    .stat\n+    .univariate\n+    .AbstractStorelessUnivariateStatistic;\n+\n+/**\n+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:21 $\n+ */\n+public class Min extends AbstractStorelessUnivariateStatistic {\n+\n+    /** */\n+    private double value = Double.NaN;\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n+     */\n+    public void increment(final double d) {\n+        value = Double.isNaN(value) ? d : Math.min(value, d);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()\n+     */\n+    public void clear() {\n+        value = Double.NaN;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()\n+     */\n+    public double getResult() {\n+        return value;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n+     */\n+    public double evaluate(\n+        final double[] values,\n+        final int begin,\n+        final int length) {\n+        double min = Double.NaN;\n+        if (test(values, begin, length)) {\n+            min = values[begin];\n+            for (int i = begin; i < begin + length; i++) {\n+                min = (min < values[i]) ? min : values[i];\n+            }\n+        }\n+        return min;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.rank;\n+\n+import java.util.Arrays;\n+import org.apache.commons.math.stat.univariate.AbstractUnivariateStatistic;\n+\n+/**\n+ * @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:21 $\n+ */\n+public class Percentile extends AbstractUnivariateStatistic {\n+\n+    /** */\n+    private double percentile = 0.0;\n+\n+    /**\n+     * Constructs a Percentile with a default percentile\n+     * value of 50.0.\n+     */\n+    public Percentile() {\n+        super();\n+        percentile = 50.0;\n+    }\n+\n+    /**\n+     * Constructs a Percentile with the specific percentile value.\n+     * @param p the percentile\n+     */\n+    public Percentile(final double p) {\n+        this.percentile = p;\n+    }\n+\n+    /**\n+     * Evaluates the double[] top the specified percentile.\n+     * This does not alter the interal percentile state of the\n+     * statistic.\n+     * @param values Is a double[] containing the values\n+     * @param p Is the percentile to evaluate to.\n+     * @return the result of the evaluation or Double.NaN\n+     * if the array is empty\n+     */\n+    public double evaluate(final double[] values, final double p) {\n+        return evaluate(values, 0, values.length, p);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n+     */\n+    public double evaluate(\n+        final double[] values,\n+        final int start,\n+        final int length) {\n+\n+        return evaluate(values, start, length, percentile);\n+    }\n+\n+    /**\n+     * Evaluates the double[] top the specified percentile.\n+     * This does not alter the interal percentile state of the\n+     * statistic.\n+     * @param values Is a double[] containing the values\n+     * @param begin processing at this point in the array\n+     * @param length processing at this point in the array\n+     * @param p Is the percentile to evaluate to.*\n+     * @return the result of the evaluation or Double.NaN\n+     * if the array is empty\n+     */\n+    public double evaluate(\n+        final double[] values,\n+        final int begin,\n+        final int length,\n+        final double p) {\n+\n+        test(values, begin, length);\n+\n+        if ((p > 100) || (p <= 0)) {\n+            throw new IllegalArgumentException(\"invalid percentile value\");\n+        }\n+        double n = (double) length;\n+        if (n == 0) {\n+            return Double.NaN;\n+        }\n+        if (n == 1) {\n+            return values[begin]; // always return single value for n = 1\n+        }\n+        double pos = p * (n + 1) / 100;\n+        double fpos = Math.floor(pos);\n+        int intPos = (int) fpos;\n+        double dif = pos - fpos;\n+        double[] sorted = new double[length];\n+        System.arraycopy(values, begin, sorted, 0, length);\n+        Arrays.sort(sorted);\n+\n+        if (pos < 1) {\n+            return sorted[0];\n+        }\n+        if (pos >= n) {\n+            return sorted[length - 1];\n+        }\n+        double lower = sorted[intPos - 1];\n+        double upper = sorted[intPos];\n+        return lower + dif * (upper - lower);\n+    }\n+\n+    /**\n+     * The default internal state of this percentile can be set.\n+     * This will return that value.\n+     * @return percentile\n+     */\n+    public double getPercentile() {\n+        return percentile;\n+    }\n+\n+    /**\n+     * The default internal state of this percentile can be set.\n+     * This will setthat value.\n+     * @param p a value between 0 <= p <= 100\n+     */\n+    public void setPercentile(final double p) {\n+        percentile = p;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/Product.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.summary;\n+\n+import org\n+    .apache\n+    .commons\n+    .math\n+    .stat\n+    .univariate\n+    .AbstractStorelessUnivariateStatistic;\n+\n+/**\n+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:23 $\n+ */\n+public class Product extends AbstractStorelessUnivariateStatistic {\n+\n+    /**\n+     * The current Running Product.\n+     */\n+    private double value = Double.NaN;\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n+     */\n+    public void increment(final double d) {\n+        if (Double.isNaN(value)) {\n+            value = d;\n+        } else {\n+            value *= d;\n+        }\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()\n+     */\n+    public double getResult() {\n+        return value;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()\n+     */\n+    public void clear() {\n+        value = Double.NaN;\n+    }\n+\n+    /**\n+     * Returns the product for this collection of values\n+     * @param values Is a double[] containing the values\n+     * @param begin processing at this point in the array\n+     * @param length processing at this point in the array\n+     * @return the product values or Double.NaN if the array is empty\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n+     */\n+    public double evaluate(\n+        final double[] values,\n+        final int begin,\n+        final int length) {\n+        double product = Double.NaN;\n+        if (test(values, begin, length)) {\n+            product = 1.0;\n+            for (int i = begin; i < begin + length; i++) {\n+                product *= values[i];\n+            }\n+        }\n+        return product;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/Sum.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.summary;\n+\n+import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;\n+\n+/**\n+ * @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:23 $\n+ */\n+public class Sum extends AbstractStorelessUnivariateStatistic {\n+\n+    /**\n+     * The currently running sum.\n+     */\n+    private double value = Double.NaN;\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n+     */\n+    public void increment(final double d) {\n+        if (Double.isNaN(value)) {\n+            value = d;\n+        } else {\n+            value += d;\n+        }\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()\n+     */\n+    public double getResult() {\n+        return value;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()\n+     */\n+    public void clear() {\n+        value = Double.NaN;\n+    }\n+\n+    /**\n+     * The sum of the values that have been added to Univariate.\n+     * @param values Is a double[] containing the values\n+     * @param begin processing at this point in the array\n+     * @param length processing at this point in the array\n+     * @return the sum of the values or Double.NaN if the array is empty\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n+     */\n+    public double evaluate(\n+        final double[] values,\n+        final int begin,\n+        final int length) {\n+        double sum = Double.NaN;\n+        if (test(values, begin, length)) {\n+            sum = 0.0;\n+            for (int i = begin; i < begin + length; i++) {\n+                sum += values[i];\n+            }\n+        }\n+        return sum;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.summary;\n+\n+import org\n+    .apache\n+    .commons\n+    .math\n+    .stat\n+    .univariate\n+    .AbstractStorelessUnivariateStatistic;\n+\n+/**\n+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:23 $\n+ */\n+public class SumOfLogs extends AbstractStorelessUnivariateStatistic {\n+\n+    /**\n+     * The currently running value\n+     */\n+    private double value = Double.NaN;\n+\n+    /** */\n+    private boolean init = true;\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n+     */\n+    public void increment(final double d) {\n+        if (init) {\n+            value = Math.log(d);\n+            init = false;\n+        } else {\n+            value += Math.log(d);\n+        }\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()\n+     */\n+    public double getResult() {\n+        return value;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()\n+     */\n+    public void clear() {\n+        value = Double.NaN;\n+        init = true;\n+    }\n+\n+    /**\n+     * Returns the sum of the natural logs for this collection of values\n+     * @param values Is a double[] containing the values\n+     * @param begin processing at this point in the array\n+     * @param length processing at this point in the array\n+     * @return the sumLog value or Double.NaN if the array is empty\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n+     */\n+    public double evaluate(\n+        final double[] values,\n+        final int begin,\n+        final int length) {\n+        double sumLog = Double.NaN;\n+        if (test(values, begin, length)) {\n+            sumLog = 0.0;\n+            for (int i = begin; i < begin + length; i++) {\n+                sumLog += Math.log(values[i]);\n+            }\n+        }\n+        return sumLog;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.summary;\n+\n+import org\n+    .apache\n+    .commons\n+    .math\n+    .stat\n+    .univariate\n+    .AbstractStorelessUnivariateStatistic;\n+\n+/**\n+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:23 $\n+ */\n+public class SumOfSquares extends AbstractStorelessUnivariateStatistic {\n+\n+    /**\n+     * The currently running sumSq\n+     */\n+    private double value = Double.NaN;\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n+     */\n+    public void increment(final double d) {\n+        if (Double.isNaN(value)) {\n+            value = d * d;\n+        } else {\n+            value += d * d;\n+        }\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()\n+     */\n+    public double getResult() {\n+        return value;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()\n+     */\n+    public void clear() {\n+        value = Double.NaN;\n+    }\n+\n+    /**\n+     * Returns the sum of the squares of the available values.\n+     * @param values Is a double[] containing the values\n+     * @param begin processing at this point in the array\n+     * @param length processing at this point in the array\n+     * @return the sum of the squared values or Double.NaN if the array is empty\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n+     */\n+    public double evaluate(\n+        final double[] values,\n+        final int begin,\n+        final int length) {\n+        double sumSq = Double.NaN;\n+        if (test(values, begin, length)) {\n+            sumSq = 0.0;\n+            for (int i = begin; i < begin + length; i++) {\n+                sumSq += Math.pow(values[i], 2.0);\n+            }\n+        }\n+        return sumSq;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/util/BeanTransformer.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.util;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import org.apache.commons.beanutils.PropertyUtils;\n+import org.apache.commons.logging.LogFactory;\n+\n+/**\n+ * Uses PropertyUtils to map a Bean getter to a double value.\n+ * @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:17 $\n+ */\n+public class BeanTransformer implements NumberTransformer {\n+\n+    /**\n+     * The propertyName for this Transformer\n+     */\n+    private String propertyName;\n+\n+    /**\n+     * Create a BeanTransformer\n+     */\n+    public BeanTransformer() {\n+        this(null);\n+    }\n+\n+    /**\n+     * Create a BeanTransformer with a specific PropertyName.\n+     * @param property The property.\n+     */\n+    public BeanTransformer(final String property) {\n+        super();\n+        setPropertyName(property);\n+    }\n+\n+    /**\n+     * Get the property String\n+     * @return the Property Name String\n+     */\n+    public String getPropertyName() {\n+        return propertyName;\n+    }\n+\n+    /**\n+     * Set the propertyString\n+     * @param string The string to set the property to.\n+     */\n+    public void setPropertyName(final String string) {\n+        propertyName = string;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.util.NumberTransformer#transform(java.lang.Object)\n+     */\n+    public double transform(final Object o) {\n+        double d = Double.NaN;\n+        try {\n+            d =\n+                ((Number) PropertyUtils.getProperty(o, getPropertyName()))\n+                    .doubleValue();\n+        } catch (IllegalAccessException e) {\n+            LogFactory.getLog(getClass()).error(\n+                \"Property can not be accessed.  Using NaN.\", e);\n+        } catch (InvocationTargetException e) {\n+            LogFactory.getLog(getClass()).error(\n+                \"Property accessor method threw an exception.  Using NaN.\", e);\n+            e.printStackTrace();\n+        } catch (NoSuchMethodException e) {\n+            LogFactory.getLog(getClass()).error(\n+                \"Property accessor method does not exist.  Using NaN.\", e);\n+        }\n+        return d;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/util/ContinuedFraction.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.util;\n+\n+import org.apache.commons.math.ConvergenceException;\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ * Provides a generic means to evaluate continued fractions.  Subclasses simply\n+ * provided the a and b coefficients to evaluate the continued fraction.\n+ * \n+ * References:\n+ * <ul>\n+ * <li><a href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">\n+ * Continued Fraction</a></li>\n+ * </ul>\n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $\n+ */\n+public abstract class ContinuedFraction {\n+    /** Maximum allowed numerical error. */\n+    private static final double DEFAULT_EPSILON = 10e-9;\n+\n+    /**\n+     * Default constructor.\n+     */\n+    protected ContinuedFraction() {\n+        super();\n+    }\n+\n+    /**\n+     * Access the n-th a coefficient of the continued fraction.  Since a can be\n+     * a function of the evaluation point, x, that is passed in as well.\n+     * @param n the coefficient index to retrieve.\n+     * @param x the evaluation point.\n+     * @return the n-th a coefficient.\n+     */\n+    protected abstract double getA(int n, double x);\n+\n+    /**\n+     * Access the n-th b coefficient of the continued fraction.  Since b can be\n+     * a function of the evaluation point, x, that is passed in as well.\n+     * @param n the coefficient index to retrieve.\n+     * @param x the evaluation point.\n+     * @return the n-th b coefficient.\n+     */\n+    protected abstract double getB(int n, double x);\n+\n+    /**\n+     * Evaluates the continued fraction at the value x.\n+     * @param x the evaluation point.\n+     * @return the value of the continued fraction evaluated at x. \n+     * @throws MathException if the algorithm fails to converge.\n+     */\n+    public double evaluate(double x) throws MathException {\n+        return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);\n+    }\n+\n+    /**\n+     * Evaluates the continued fraction at the value x.\n+     * @param x the evaluation point.\n+     * @param epsilon maximum error allowed.\n+     * @return the value of the continued fraction evaluated at x. \n+     * @throws MathException if the algorithm fails to converge.\n+     */\n+    public double evaluate(double x, double epsilon) throws MathException {\n+        return evaluate(x, epsilon, Integer.MAX_VALUE);\n+    }\n+\n+    /**\n+     * Evaluates the continued fraction at the value x.\n+     * @param x the evaluation point.\n+     * @param maxIterations maximum number of convergents\n+     * @return the value of the continued fraction evaluated at x. \n+     * @throws MathException if the algorithm fails to converge.\n+     */\n+    public double evaluate(double x, int maxIterations) throws MathException {\n+        return evaluate(x, DEFAULT_EPSILON, maxIterations);\n+    }\n+\n+    /**\n+     * Evaluates the continued fraction at the value x.\n+     * \n+     * The implementation of this method is based on:\n+     * <ul>\n+     * <li>O. E-gecio-glu, C . K. Koc, J. Rifa i Coma,\n+     * <a href=\"http://citeseer.nj.nec.com/egecioglu91fast.html\">\n+     * Fast Computation of Continued Fractions</a>, Computers Math. Applic.,\n+     * 21(2--3), 1991, 167--169.</li>\n+     * </ul>\n+     * \n+     * @param x the evaluation point.\n+     * @param epsilon maximum error allowed.\n+     * @param maxIterations maximum number of convergents\n+     * @return the value of the continued fraction evaluated at x. \n+     * @throws MathException if the algorithm fails to converge.\n+     */\n+    public double evaluate(double x, double epsilon, int maxIterations)\n+        throws MathException\n+    {\n+        double[][] f = new double[2][2];\n+        double[][] a = new double[2][2];\n+        double[][] an = new double[2][2];\n+\n+        a[0][0] = getA(0, x);\n+        a[0][1] = 1.0;\n+        a[1][0] = 1.0;\n+        a[1][1] = 0.0;\n+\n+        return evaluate(1, x, a, an, f, epsilon, maxIterations);\n+    }\n+\n+    /**\n+     * Evaluates the n-th convergent, fn = pn / qn, for this continued fraction\n+     * at the value x.\n+     * @param n the convergent to compute.\n+     * @param x the evaluation point.\n+     * @param a (n-1)-th convergent matrix.  (Input)\n+     * @param an the n-th coefficient matrix. (Output)\n+     * @param f the n-th convergent matrix. (Output)\n+     * @param epsilon maximum error allowed.\n+     * @param maxIterations maximum number of convergents\n+     * @return the value of the the n-th convergent for this continued fraction\n+     *         evaluated at x. \n+     * @throws MathException if the algorithm fails to converge.\n+     */\n+    private double evaluate(\n+        int n,\n+        double x,\n+        double[][] a,\n+        double[][] an,\n+        double[][] f,\n+        double epsilon,\n+        int maxIterations) throws MathException \n+    {\n+        double ret;\n+\n+        // create next matrix\n+        an[0][0] = getA(n, x);\n+        an[0][1] = 1.0;\n+        an[1][0] = getB(n, x);\n+        an[1][1] = 0.0;\n+\n+        // multiply a and an, save as f\n+        f[0][0] = (a[0][0] * an[0][0]) + (a[0][1] * an[1][0]);\n+        f[0][1] = (a[0][0] * an[0][1]) + (a[0][1] * an[1][1]);\n+        f[1][0] = (a[1][0] * an[0][0]) + (a[1][1] * an[1][0]);\n+        f[1][1] = (a[1][0] * an[0][1]) + (a[1][1] * an[1][1]);\n+\n+        // determine if we're close enough\n+        if (Math.abs((f[0][0] * f[1][1]) - (f[1][0] * f[0][1])) <\n+            Math.abs(epsilon * f[1][0] * f[1][1]))\n+        {\n+            ret = f[0][0] / f[1][0];\n+        } else {\n+            if (n >= maxIterations) {\n+                throw new ConvergenceException(\n+                    \"Continued fraction convergents failed to converge.\");\n+            }\n+            // compute next\n+            ret = evaluate(n + 1, x, f /* new a */\n+            , an /* reuse an */\n+            , a /* new f */\n+            , epsilon, maxIterations);\n+        }\n+\n+        return ret;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/util/ContractableDoubleArray.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.util;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * <p>\n+ * A variable length double array implementation and extension of \n+ * ExpandableDoubleArray which automatically handles expanding and\n+ * contracting double arrays.\n+ * </p>\n+ *\n+ * <p>\n+ * This class extends the functionality of ExpandableDoubleArray and\n+ * inherits the expansion parameters from that class.  If a developer\n+ * instantiates a ContractableDoubleArray and only adds values to\n+ * that instance, the behavior of this class is no different from\n+ * the behavior of the super-class ExpandableDoubleArray.  If, on the\n+ * other hand, elements are removed from the array, this implementation\n+ * tests an additional parameter <code>contractionCriteria</code>.  The\n+ * <code>contractionCriteria</code> dictates when this implementation\n+ * will contract the size of the internal storage array to\n+ * the number of elements + 1.  This check is performed after every\n+ * operation that alters the number of elements in the array.\n+ * </p>\n+ *\n+ * <p>\n+ * Note that the contractionCriteria must always be greater than the\n+ * expansionFactor.  If this were not the case (assume a \n+ * contractionCriteria of 1.5f and a expansionFactor of 2.0f) an\n+ * endless series of expansions and contractions would occur.  If the \n+ * length of this array is highly varied over time it is a good idea\n+ * to trade efficient memory usage for performance.  Each time an array\n+ * is expanded or contracted the meaningful portions of the internal\n+ * storage array are copied to a new array and the reference to the \n+ * internal storage array is swapped.\n+ * </p>\n+ * \n+ * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:17 $\n+ */\n+public class ContractableDoubleArray\n+    extends ExpandableDoubleArray\n+    implements Serializable {\n+\n+    /** The contraction criteria defines the conditions under which this\n+     * object will \"resize\" the internal array to the number of elements\n+     * contained in the element array + 1\n+     */\n+    private float contractionCriteria = 2.5f;\n+\n+    /**\n+     * Create an expandable double array with the default initial capacity of \n+     * 16, an expansion factor of 2.00, and a contractionCriteria of 2.5\n+     */\n+    public ContractableDoubleArray() {\n+        super();\n+    }\n+\n+    /**\n+     * Create an expandable double array with the specified initial capacity, \n+     * the defult expansion factor of 2.00, and a contractionCriteria of 2.5\n+     * \n+     * @param initialCapacity The initial size of the internal storage array\n+     */\n+    public ContractableDoubleArray(int initialCapacity) {\n+        super(initialCapacity);\n+    }\n+\n+    /**\n+     * Create an expandable double array with the specificed initial capacity \n+     * and expand factor, with a contractionCriteria of 2.5\n+     * \n+     * @param initialCapacity The initial size of the internal storage array\n+     * @param expansionFactor the array will be expanded based on this \n+     *                        parameter\n+     */\n+    public ContractableDoubleArray(\n+        int initialCapacity,\n+        float expansionFactor) {\n+        this.expansionFactor = expansionFactor;\n+        setInitialCapacity(initialCapacity);\n+        internalArray = new double[initialCapacity];\n+        checkContractExpand(getContractionCriteria(), expansionFactor);\n+    }\n+\n+    /**\n+     * Create an expandable double array with the\n+     * specificed initial capacity, expand factor, and contractionCriteria\n+     * \n+     * @param initialCapacity The initial size of the internal storage array\n+     * @param expansionFactor the array will be expanded based on this \n+     *                        parameter\n+     * @param contractionCriteria The contraction Criteria.\n+     */\n+    public ContractableDoubleArray(\n+        int initialCapacity,\n+        float expansionFactor,\n+        float contractionCriteria) {\n+        this.contractionCriteria = contractionCriteria;\n+        this.expansionFactor = expansionFactor;\n+        setInitialCapacity(initialCapacity);\n+        internalArray = new double[initialCapacity];\n+        checkContractExpand(contractionCriteria, expansionFactor);\n+    }\n+\n+    /**\n+     * Contracts the storage array to the (size of the element set) + 1 - to \n+     * avoid a zero length array. This function also resets the startIndex to \n+     * zero. \n+     */\n+    public synchronized void contract() {\n+        double[] tempArray = new double[numElements + 1];\n+\n+        // Copy and swap - copy only the element array from the src array.\n+        System.arraycopy(internalArray, startIndex, tempArray, 0, numElements);\n+        internalArray = tempArray;\n+\n+        // Reset the start index to zero\n+        startIndex = 0;\n+    }\n+\n+    /**\n+     * Adds an element to the end of this expandable array\n+     * \n+     * @param value to be added to end of array\n+     */\n+    public synchronized void addElement(double value) {\n+        super.addElement(value);\n+        if (shouldContract()) {\n+            contract();\n+        }\n+    }\n+\n+    /**\n+     * <p>\n+     * Adds an element to the end of this expandable array and \n+     * discards a value from the front of the array.  This method\n+     * has the effect of adding a value to the end of the list\n+     * and discarded an element from the front of the list.\n+     * </p>\n+     *\n+     * <p>\n+     * When an array rolls it actually \"scrolls\" the element array in \n+     * the internal storage array.  An element is added to the end of the\n+     * array, and the first element of the array is discard by incrementing\n+     * the starting index of the element array within the internal\n+     * storage array.  Over time this will create an orphaned prefix\n+     * to the element array within the internal storage array.  If this\n+     * function is called frequently, this orphaned prefix list will\n+     * gradually push the internal storage vs. element storage to\n+     * the contractionCriteria.\n+     * </p>\n+     * @param value to be added to end of array\n+     * @return value added\n+     */\n+    public synchronized double addElementRolling(double value) {\n+        double discarded = super.addElementRolling(value);\n+        // Check the contraction criteria\n+        if (shouldContract()) {\n+            contract();\n+        }\n+        return discarded;\n+    }\n+\n+    /**\n+     * Should contract returns true if the ratio of (internal storage length) \n+     * to (number of elements) is larger than the contractionCriteria value.  \n+     * In other words, using the default value of 2.5, if the internal storage\n+     * array provides more than 2.5x the space needed to store numElements, \n+     * then this function returns true\n+     * \n+     * @return true if array satisfies the contraction criteria\n+     */\n+    private synchronized boolean shouldContract() {\n+        boolean shouldContract = false;\n+        if ((internalArray.length / numElements) > contractionCriteria) {\n+            shouldContract = true;\n+        }\n+        return shouldContract;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.util.DoubleArray#setElement(int, double)\n+     */\n+    public synchronized void setElement(int index, double value) {\n+        super.setElement(index, value);\n+        if (shouldContract()) {\n+            contract();\n+        }\n+    }\n+\n+    /**\n+     * Method invokes the super class' setExpansionFactor but first it\n+     * must validate the combination of expansionFactor and \n+     * contractionCriteria.\n+     *\n+     * @see org.apache.commons.math.util.ExpandableDoubleArray#setExpansionFactor(float)\n+     */\n+    public void setExpansionFactor(float expansionFactor) {\n+        checkContractExpand(getContractionCriteria(), expansionFactor);\n+        super.setExpansionFactor(expansionFactor);\n+    }\n+\n+    /**\n+     * The contraction criteria defines when the internal array will contract \n+     * to store only the number of elements in the element array.  This \n+     * contractionCriteria gaurantees that the internal storage array will \n+     * never exceed this factor more than the space needed to store \n+     * numElements.\n+     * \n+     * @return the contraction criteria used to reclaim memory when array is \n+     *         empty\n+     */\n+    public float getContractionCriteria() {\n+        return contractionCriteria;\n+    }\n+\n+    /**\n+     * Sets the contraction criteria for this ExpandContractDoubleArray. \n+     * \n+     * @param contractionCriteria contraction criteria\n+     */\n+    public void setContractionCriteria(float contractionCriteria) {\n+        checkContractExpand(contractionCriteria, getExpansionFactor());\n+\n+        this.contractionCriteria = contractionCriteria;\n+    }\n+\n+    /**\n+     * Checks the expansion factor and the contraction criteria and throws an \n+     * IllegalArgumentException if the contractionCriteria is less than the \n+     * expansionCriteria\n+     * \n+     * @param expansionFactor factor to be checked\n+     * @param contractionCritera critera to be checked\n+     */\n+    protected void checkContractExpand(\n+        float contractionCritera,\n+        float expansionFactor) {\n+\n+        if (contractionCritera < expansionFactor) {\n+            String msg =\n+                \"Contraction criteria can never be smaller than \" +\n+                \"the expansion factor.  This would lead to a never \" +\n+                \"ending loop of expansion and contraction as a newly \" +\n+                \"expanded internal storage array would immediately \" +\n+                \"satisfy the criteria for contraction\";\n+            throw new IllegalArgumentException(msg);\n+        }\n+\n+        if (contractionCriteria <= 1.0) {\n+            String msg =\n+                \"The contraction criteria must be a number larger \" +\n+                \"than one.  If the contractionCriteria is less than or \" +\n+                \"equal to one an endless loop of contraction and \" +\n+                \"expansion would ensue as an internalArray.length \" +\n+                \"== numElements would satisfy the contraction criteria\";\n+            throw new IllegalArgumentException(msg);\n+        }\n+\n+        if (expansionFactor < 1.0) {\n+            String msg =\n+                \"The expansion factor must be a number greater than 1.0\";\n+            throw new IllegalArgumentException(msg);\n+        }\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.util.ExpandableDoubleArray#discardFrontElements(int)\n+     */\n+    public synchronized void discardFrontElements(int i) {\n+        super.discardFrontElements(i);\n+        if (shouldContract()) {\n+            contract();\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/util/DefaultTransformer.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.util;\n+\n+import org.apache.commons.beanutils.ConversionException;\n+import org.apache.commons.beanutils.converters.DoubleConverter;\n+\n+/**\n+ * A Default NumberTransformer for java.lang.Numbers and Numeric Strings. \n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $\n+ */\n+public class DefaultTransformer implements NumberTransformer {\n+    /** Converter used to transform objects. */\n+    private static final DoubleConverter converter =\n+        new DoubleConverter(new Double(Double.NaN));\n+    \n+    /**\n+     * @see org.apache.commons.collections.Transformer#transform(java.lang.Object)\n+     */\n+    public double transform(Object o) {\n+        double d;\n+        try {\n+            d = ((Double)converter.convert(Double.class, o)).doubleValue();\n+        } catch(ConversionException ex){\n+            d = Double.NaN;\n+        }\n+        return d;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/util/DoubleArray.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.util;\n+\n+\n+/**\n+ * Provides a single interface for dealing with various flavors\n+ * of double arrays.  This arrays framework follows the model of the\n+ * Collections API by allowing a user to select from a number of \n+ * array implementations with support for various storage mechanisms\n+ * such as automatic expansion, contraction, and array \"rolling\".\n+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:17 $\n+ */\n+public interface DoubleArray {\n+\n+    /**\n+     * Returns the number of elements currently in the array.  Please note\n+     * that this is different from the length of the internal storage array.  \n+     * @return number of elements\n+     */\n+    int getNumElements();\n+\n+    /**\n+     * Returns the element at the specified index.  Note that if an\n+     * out of bounds index is supplied a ArrayIndexOutOfBoundsException \n+     * will be thrown.\n+     * \n+     * @param index index to fetch a value from\n+     * @return value stored at the specified index\n+     *\n+     */\n+    double getElement(int index);\n+\n+    /**\n+     * Sets the element at the specified index.  This method will expand the \n+     * internal storage array to accomodate the insertion of a value at an \n+     * index beyond the current capacity.\n+     * @param index index to store a value in\n+     * @param value value to store at the specified index\n+     */\n+    void setElement(int index, double value);\n+\n+    /**\n+     * Adds an element to the end of this expandable array\n+     * \n+     * @param value to be added to end of array\n+     */\n+    void addElement(double value);\n+\n+    /**\n+     * Adds an element and moves the window of elements up one.  This\n+     * has the effect of a FIFO.  when you \"roll\" the array an element is \n+     * removed from the array.  The return value of this function is the \n+     * discarded double.\n+     * \n+     * @param value the value to be added to the array\n+     * @return the value which has been discarded or \"pushed\" out of the array\n+     *         by this rolling insert.\n+     */\n+    double addElementRolling(double value);\n+\n+    /**\n+     * Returns a double[] of elements\n+     *\n+     * @return all elements added to the array\n+     */\n+    double[] getElements();\n+\n+    /**\n+     * Clear the double array\n+     */\n+    void clear();\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/util/ExpandableDoubleArray.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.util;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * <p>\n+ * A DoubleArray implementation which automatically expands\n+ * an internal double array to handle an array of arbitrary length.  This \n+ * implementation of DoubleArray is provided to support scenarios in\n+ * which the ultimate length of an array is unknown, and the \n+ * developer can control the expansion process through the\n+ * <code>initialCapacity</code> and <code>expansionFactor</code> \n+ * parameters.\n+ * </p>\n+ *\n+ * <p>\n+ * This implementation also allows a developer to:\n+ * <ul>\n+ *  <li>Resize an array via <code>setNumElements(int)</code></li>\n+ *  <li>Discard elements from the front of an array via\n+ *      <code>discardFrontElements(int)</code></li>\n+ *  <li>Find the minimum and maximum values stored in this array</li>\n+ * </ul>\n+ * </p>\n+ *\n+ * <p>\n+ * The initialCapacity parameter sets the capacity of the initial\n+ * storage array, and the expansionFactor is the factor by which\n+ * the current storage capacity is multiplied each time the internal\n+ * array needs to be expanded.  <b>Please note</b> that the length of the \n+ * internal storage array has nothing to do with the number of elements \n+ * currently stored in this array.  If one creates an instance of this\n+ * class with an initialCapacity of \"2\" and an expansion factor of \"2\", and\n+ * then adds 3546 elements to the array, this implementation will need to\n+ * expand the array 10 times - first from 2 -> 4. then 4 -> 8, 8 -> 16,\n+ * and so on until we reach 4096 which is sufficient to hold 3546 elements.\n+ * </p>\n+ * @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:17 $\n+ */\n+public class ExpandableDoubleArray implements Serializable, DoubleArray {\n+\n+    // TODO: expansionFactor is valuable, by if I only need storage\n+    // for 1025 items and I use the default settings, I'll end up\n+    // with enough storage for 2048 elements.  Maybe this implementation\n+    // should have flags for incremental growth - (i.e. when expanding, only\n+    // increase storage by a constant size - 100, 200 ) ?\n+\n+    /** \n+     * This is the internal storage array.\n+     */\n+    protected double[] internalArray;\n+\n+    /** \n+     * Number of elements in the array\n+     */\n+    protected int numElements = 0;\n+\n+    /** \n+     * Keeps track of a starting index\n+     */\n+    protected int startIndex = 0;\n+\n+    /**The initial capacity of the array. \n+     * Initial capacity is not exposed as a property as it is only meaningful\n+     * when passed to a constructor.\n+     */\n+    protected int initialCapacity = 16;\n+\n+    /** The expand factor of the array.  When the array need to be expanded, \n+     * the new array size will be internalArray.length * expandFactor \n+     */\n+    protected float expansionFactor = 2.0f;\n+\n+    /**\n+     * Create an expandable double array with the\n+     * default initial capactiy of 16 and an expansion factor of 2.00\n+     */\n+    public ExpandableDoubleArray() {\n+        internalArray = new double[initialCapacity];\n+    }\n+\n+    /**\n+     * Create an expandable double array with the\n+     * specified initial capacity and the defult expansion factor of 2.00\n+     * \n+     * @param initialCapacity The initial size of the internal storage array\n+     */\n+    public ExpandableDoubleArray(int initialCapacity) {\n+        setInitialCapacity(initialCapacity);\n+        internalArray = new double[this.initialCapacity];\n+    }\n+\n+    /**\n+     * Create an expandable double array with the\n+     * specificed initial capacity and expand factor.\n+     * \n+     * @param initialCapacity The initial size of the internal storage array\n+     * @param expansionFactor the array will be expanded based on this \n+     *                        parameter\n+     */\n+    public ExpandableDoubleArray(int initialCapacity, float expansionFactor) {\n+        setInitialCapacity(initialCapacity);\n+        setExpansionFactor(expansionFactor);\n+        this.initialCapacity = initialCapacity;\n+        internalArray = new double[initialCapacity];\n+    }\n+\n+    /**\n+     * The expansion factor controls the size of a new aray when an array \n+     * needs to be expanded. When a value is inserted into a full array, the \n+     * new array size is calculated as the current array size times this \n+     * expansion factor.  The default expansion factor is 2.0\n+     * \n+     * @return the expansion factor of this expandable double array\n+     */\n+    public float getExpansionFactor() {\n+        return expansionFactor;\n+    }\n+\n+    /**\n+     * Sets the expansion factor for this expandable double array.  \n+     * The expansion factor will affect the next expansion of this array.\n+     * \n+     * @param expansionFactor the expansion factor of this array\n+     */\n+    public void setExpansionFactor(float expansionFactor) {\n+\n+        // The expansion factor *must* be larger than 1.0, otherwise we'll \n+        // have an inconsistency upon expansion we'll start shrinking which \n+        // will lead to ArrayIndexOutOfBound exceptions.\n+        if (expansionFactor > 1.0) {\n+            this.expansionFactor = expansionFactor;\n+        } else {\n+            String msg =\n+                \"The expansion factor must be a number greater \" + \"than 1.0\";\n+            throw new IllegalArgumentException(msg);\n+        }\n+    }\n+\n+    /**\n+     * Sets the initial capacity\n+     * @param initialCapacity of the array\n+     */\n+    public void setInitialCapacity(int initialCapacity) {\n+        if (initialCapacity > 0) {\n+            this.initialCapacity = initialCapacity;\n+        } else {\n+            String msg =\n+                \"The initial capacity supplied: \" + initialCapacity +\n+                \"must be a positive integer\";\n+            throw new IllegalArgumentException(msg);\n+        }\n+    }\n+\n+    /**\n+     * Returns the internal storage array\n+     * \n+     * @return the internal storage array used by this object\n+     */\n+    public double[] getValues() {\n+        return (internalArray);\n+    }\n+\n+    /**\n+     * Returns the starting index of the internal array.\n+     * @return starting index\n+     */\n+    public int start() {\n+        return startIndex;\n+    }\n+\n+    /**\n+     * Returns the number of elements currently in the array.  Please note\n+     * that this is different from the length of the internal storage array.  \n+     * @return number of elements\n+     */\n+    public int getNumElements() {\n+        return (numElements);\n+    }\n+\n+    /**\n+     * This function allows you to control the number of elements contained \n+     * in this array, and can be used to \"throw\" out the last n values in an \n+     * array.  This feature is mainly targetted at the subclasses of this \n+     * array class.  Note that this function will also expand the internal \n+     * array as needed.\n+     * \n+     * @param i a new number of elements\n+     */\n+    public synchronized void setNumElements(int i) {\n+\n+        // If index is negative thrown an error\n+        if (i < 0) {\n+            String msg =\n+                \"Number of elements must be zero or a positive \" + \"integer\";\n+            throw new IllegalArgumentException(msg);\n+        }\n+\n+        // Test the new num elements, check to see if the array needs to be \n+        // expanded to accomodate this new number of elements\n+        if ((startIndex + i) > internalArray.length) {\n+            expandTo(startIndex + i);\n+        }\n+\n+        // Set the new number of elements to new value\n+        numElements = i;\n+    }\n+\n+    /**\n+     * Returns the element at the specified index\n+     * \n+     * @param index index to fetch a value from\n+     * @return value stored at the specified index\n+     */\n+    public double getElement(int index) {\n+        double value = Double.NaN;\n+        if (index >= numElements) {\n+            String msg =\n+                \"The index specified: \" + index +\n+                \" is larger than the current number of elements\";\n+            throw new ArrayIndexOutOfBoundsException(msg);\n+        } else if (index >= 0) {\n+            value = internalArray[startIndex + index];\n+        } else {\n+            String msg =\n+                \"Elements cannot be retrieved from a negative array index\";\n+            throw new ArrayIndexOutOfBoundsException(msg);\n+        }\n+        return value;\n+    }\n+\n+    /**\n+     * Sets the element at the specified index.  This method will expand the \n+     * internal storage array to accomodate the insertion of a value at an \n+     * index beyond the current capacity.\n+     *\n+     * @param index index to store a value in\n+     * @param value value to store at the specified index\n+     */\n+    public synchronized void setElement(int index, double value) {\n+\n+        if (index < 0) {\n+            String msg = \"Cannot set an element at a negative index\";\n+            throw new ArrayIndexOutOfBoundsException(msg);\n+        }\n+\n+        if ((startIndex + index) >= internalArray.length) {\n+            expandTo(startIndex + (index + 1));\n+            numElements = index + 1;\n+        }\n+        internalArray[startIndex + index] = value;\n+    }\n+\n+    /**\n+     * Expands the internal storage array to the specified size.\n+     * \n+     * @param size Size of the new internal storage array\n+     */\n+    private synchronized void expandTo(int size) {\n+        double[] tempArray = new double[size];\n+        // Copy and swap\n+        System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);\n+        internalArray = tempArray;\n+    }\n+\n+    /**\n+     * Expands the internal storage array using the expansion factor\n+     */\n+    protected synchronized void expand() {\n+\n+        // notice the use of Math.ceil(), this gaurantees that we will always \n+        // have an array of at least currentSize + 1.   Assume that the \n+        // current initial capacity is 1 and the expansion factor\n+        // is 1.000000000000000001.  The newly calculated size will be \n+        // rounded up to 2 after the multiplication is performed.\n+        int newSize = (int) Math.ceil(internalArray.length * expansionFactor);\n+        double[] tempArray = new double[newSize];\n+\n+        // Copy and swap\n+        System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);\n+        internalArray = tempArray;\n+    }\n+\n+    /**\n+     * Adds an element to the end of this expandable array\n+     * \n+     * @param value value to be added to end of array\n+     */\n+    public synchronized void addElement(double value) {\n+        numElements++;\n+        if ((startIndex + numElements) > internalArray.length) {\n+            expand();\n+        }\n+        internalArray[startIndex + (numElements - 1)] = value;\n+    }\n+\n+    /**\n+     * Adds an element and moves the window of elements up one.  This\n+     * has the effect of a FIFO.  when you \"roll\" the array an element is \n+     * removed from the array.  The return value of this function is the \n+     * discarded double.\n+     * @param value the value to add\n+     * @return the value which has been discarded or \"pushed\" out of the array \n+     * by this rolling insert.\n+     */\n+    public synchronized double addElementRolling(double value) {\n+        double discarded = internalArray[startIndex];\n+\n+        if ((startIndex + (numElements + 1)) > internalArray.length) {\n+            expand();\n+        }\n+        // Increment the start index\n+        startIndex += 1;\n+\n+        // Add the new value\n+        internalArray[startIndex + (numElements - 1)] = value;\n+\n+        return discarded;\n+    }\n+\n+    /**\n+     * Notice the package scope on this method.   This method is simply here \n+     * for the JUnit test, it allows us check if the expansion is working \n+     * properly after a number of expansions.  This is not meant to be a part \n+     * of the public interface of this class.\n+     * \n+     * @return the length of the internal storage array.\n+     */\n+    int getInternalLength() {\n+        return (internalArray.length);\n+    }\n+\n+    /**\n+     * Clear the array, reset the size to the initialCapacity and the number \n+     * of elements to zero.\n+     */\n+    public synchronized void clear() {\n+        numElements = 0;\n+        internalArray = new double[initialCapacity];\n+    }\n+\n+    /**\n+     * Discards values from the front of the list.  This function removes n \n+     * elements from the front of the array.\n+     * \n+     * @param i number of elements to discard from the front of the array.\n+     */\n+    public synchronized void discardFrontElements(int i) {\n+\n+        if (i > numElements) {\n+            String msg = \"Cannot discard more elements than are\" +\n+                \"contained in this array.\";\n+            throw new IllegalArgumentException(msg);\n+        } else if (i < 0) {\n+            String msg = \"Cannot discard a negative number of elements.\";\n+            throw new IllegalArgumentException(msg);\n+        } else {\n+            // \"Subtract\" this number of discarded from numElements \n+            numElements -= i;\n+            startIndex += i;\n+        }\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.util.DoubleArray#getElements()\n+     */\n+    public double[] getElements() {\n+        double[] elementArray = new double[numElements];\n+        System.arraycopy(\n+            internalArray,\n+            startIndex,\n+            elementArray,\n+            0,\n+            numElements);\n+        return elementArray;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/util/FixedDoubleArray.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.util;\n+\n+/**\n+ * <p>\n+ * Provides an implementation of the DoubleArray with a maximum number of\n+ * elements.  Creating an array implementation with an upper limit on the\n+ * number of elements allows us to support a more efficient \"rolling\" \n+ * mechanism to support addElementRoling(double). Please note that this\n+ * implementation will not preserve the order of the values supplied to\n+ * this array, calling getValues() will return an array of indeterminate\n+ * order.\n+ * </p>\n+ * \n+ * <p>\n+ * Values are added to this array by calling addElement(double) or \n+ * addElementRolling(double).  If addElement(double) is called on \n+ * an array that already contains the maximum number of elements, an\n+ * ArrayIndexOutOfBoundsException will be thrown to reflect an attempt to\n+ * add a value beyond the boundaries of the fixed length array - in this\n+ * respect a FixedDoubleArray can be considered \"full\".  Calling \n+ * addElementRolling(double) on an array which contains the maximum\n+ * number of elements will cause the array to overwrite the \"oldest\"\n+ * value in the array.\n+ * </p>\n+ *\n+ * <p>\n+ * This class is called FixedDoubleArray not because it is of a fixed size.\n+ * The name is appropriate because the internal storage array remains \n+ * \"fixed\" in memory, this implementation will never allocate, or copy\n+ * the internal storage array to a new array instance.\n+ * </p>\n+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:17 $\n+ */\n+public class FixedDoubleArray implements DoubleArray {\n+\n+    /**\n+     * This is the internal storage array.  This array is assigned\n+     * a known fixed size in the constructor\n+     */\n+    private double[] internalArray;\n+\n+    /**\n+     * Size determined the number of elements in the array at\n+     * any given time. When an array is created is maxElements\n+     * of 100, it is of size 0, and size increases as values are\n+     * added.\n+     */\n+    private int size = 0;\n+\n+    /**\n+     * This index points to the location of the next update.  Next\n+     * add, cycles from 0 to (maxElement-1)\n+     */\n+    private int nextAdd = 0;\n+ \n+    /**\n+     * The maximum number of elements in the FixedDoubleArray\n+     */\n+    private int maxElements = 0;\n+\n+    /**\n+     * Create a fixed array for double primitives which can hold up to\n+     * <code>maxElements</codec> doubles.  This implementation of \n+     * DoubleArray was created to provide a more \"performance-oriented\"\n+     * in-place rolling mechanism for calculations which need to\n+     * operate on a rolling window of values.\n+     *\n+     * @param maxElements the maximum number of elements this \n+     *        FixeddoubleArray may contain.\n+     */\n+    public FixedDoubleArray(int maxElements) {\n+        this.maxElements = maxElements;\n+        internalArray = new double[maxElements];\n+    }\n+\n+    /**\n+     * Create a fixed array backed by the provided double[] implementation. \n+     * the array should have all the elements occupied. the size and maxElements\n+     * are drawn from the array's length.\n+     * \n+     * This implementation of DoubleArray was created to provide a more \n+     * \"performance-oriented\" in-place rolling mechanism for calculations \n+     * which need to operate on a rolling window of values.\n+     * @param array the backing array\n+     */\n+    public FixedDoubleArray(double[] array) {\n+        this.maxElements = array.length;\n+        this.size = array.length;\n+        internalArray = array;\n+    }\n+\n+    /**\n+     * Retrieves the current size of the array.\n+     * @see org.apache.commons.math.util.DoubleArray#getNumElements()\n+     */\n+    public int getNumElements() {\n+        return size;\n+    }\n+\n+    /**\n+     * Returns the element value at the specified index.  Please note that\n+     * the size of the element array is not directly related to the \n+     * maximum number of elements which this array can contain.  One can\n+     * create an instance of FixedDoubleArray with a maximum of\n+     * ten elements, add three items, and get any items from index 0 to index\n+     * 2 - trying to retrieve an element outside of the current element\n+     * array will throw an ArrayIndexOutOfBoundsException.\n+     *\n+     * @see org.apache.commons.math.util.DoubleArray#getElement(int)\n+     */\n+    public double getElement(int index) {\n+        if (index > (size - 1)) {\n+            String msg =\n+                \"Attempted to retrieve an element outside of \" +\n+                \"the element array\";\n+            throw new ArrayIndexOutOfBoundsException(msg);\n+        } else {\n+            // Return the element requested, if the index supplied\n+            // is negative this statement may also throw an\n+            // ArrayIndexOutOfBoundException.\n+            return internalArray[index];\n+        }\n+    }\n+\n+    /**\n+     * <p>\n+     * Sets the element at the specified index to the value supplied.\n+     * </p>\n+     *\n+     * <p>Implementation Notes:\n+     * <ul>\n+     *  This implementation will not expand the array to the specified\n+     *  size.  Unlike the expandable double array implementation calling\n+     *  setElement(10, 3.0) on an array with 5 elements will throw an\n+     *  ArrayIndexOutOfBoundsException.\n+     * </ul>\n+     * <ul>\n+     *  The number of elements in an array corresponds to the number\n+     *  of elements that have been added to this FixedDoubleArray.  This\n+     *  is not the same as the maximum number of elements which can be\n+     *  contained in this array.  A FixedDoubleArray instance can be\n+     *  created with a maximum upper limit of 10 elements, until 10\n+     *  elements have been added to this array, the size of the array\n+     *  reflects the number of elements added.\n+     * </ul>\n+     * </p>\n+     *\n+     * @see org.apache.commons.math.util.DoubleArray#setElement(int, double)\n+     */\n+    public void setElement(int index, double value) {\n+        if (index > (size - 1)) {\n+            String msg =\n+                \"Attempted to set an element outside of\" + \"the element array\";\n+            throw new ArrayIndexOutOfBoundsException(msg);\n+        } else {\n+            internalArray[index] = value;\n+        }\n+    }\n+\n+    /** \n+     * Add an element to the current array, testing to see if \n+     * this array has already met or exceeded the maximum number\n+     * of elements\n+     *\n+     * @see org.apache.commons.math.util.DoubleArray#addElement(double)\n+     */\n+    public void addElement(double value) {\n+        if (size < internalArray.length) {\n+            size++;\n+\n+            internalArray[nextAdd] = value;\n+\n+            // Incremenet nextAdd and then modulo it against maxElements\n+            // this has the effect of repeatedly \"cycling\" nextAdd\n+            // between 0 and (maxElements-1) endlessly.\n+            nextAdd++;\n+            nextAdd = nextAdd % (maxElements);\n+\n+        } else {\n+            // If the array has ALREADY reached the maximum size allowable,\n+            // we throw an ArrayIndexOutOfBoundsException - the end-user\n+            // is trying to add an element beyond the boundaries of the\n+            // fixed array.\n+            String msg =\n+                \"Attempted to add a value to an array of fixed \" +\n+                \"size, please use addElementRolling \" +\n+                \"to avoid this exception\";\n+            throw new ArrayIndexOutOfBoundsException(msg);\n+        }\n+    }\n+\n+    /**\n+     * <p>\n+     * Adds an element by \"rolling\" the new value into the current array \n+     * while discarding the element which was added <code>maxElement</code>\n+     * add operations ago.  The value replaced is returned from this \n+     * method.  Until an array contains the maximum number of element, this\n+     * method has the same result as the addElement(double) operation.  Once\n+     * the maximum number of elements has been reached this implementation\n+     * inserts the new values starting at index 0 of the internal storage \n+     * array.  This allows for efficient rolling, but prevents us from \n+     * preserving the order of the added values.\n+     * </p>\n+     *\n+     * <p>\n+     * <b>Note:</b> This function will return <code>Double.NaN</code> if\n+     * no value has been discarded in this roll.  This can happen when\n+     * the array has not met the size limitation introduced in the \n+     * constructor.\n+     * </p>\n+     * @param value the value to be added to the array\n+     * @return Returns the value which a has been \"removed\" from the \n+     *         database.  <b>Important:</b> If the element array has\n+     *         not reached the maximum size, then it is possible that\n+     *         no element will be discarded from a given roll.  In this\n+     *         case this method will return a <code>Double.NaN</code> value.\n+     *\n+     * @see org.apache.commons.math.util.DoubleArray#addElementRolling(double)\n+     */\n+    public double addElementRolling(double value) {\n+\n+        // Create the discarded primitive.  If no element is\n+        // discarded by this roll, this method will return a\n+        // Double.NaN value.\n+        double discarded = Double.NaN;\n+\n+        if (size < internalArray.length) {\n+            size++;\n+        } else {\n+            // If we've reached the length of the internal\n+            // storage array, we have to start \"discarding\"\n+            // values from the original array.\n+\n+            // Obtain the value discarded by this overwrite\n+            discarded = internalArray[nextAdd];\n+        }\n+\n+        internalArray[nextAdd] = value;\n+\n+        // nextAdd cycles between 0 and (maxElements-1).\n+        nextAdd++;\n+        nextAdd = nextAdd % maxElements;\n+\n+        // but we return the value which was \"replaced\"\n+        return (discarded);\n+    }\n+\n+    /**\n+     * Provides an array of double[] which contain the\n+     * number of elements added to this array.  This  \n+     * method will return an array from zero to maxElements in length.\n+     * \n+     * @return The array of elements added to this DoubleArray\n+     *         implementation.\n+     * @see org.apache.commons.math.util.DoubleArray#getElements()\n+     */\n+    public double[] getElements() {\n+        double[] copy = new double[size];\n+        System.arraycopy(internalArray, 0, copy, 0, size);\n+        return copy;\n+    }\n+\n+    /**\n+     * Returns the internal storage array\n+     * \n+     * @return the internal storage array used by this object\n+     */\n+    public double[] getValues() {\n+        return (internalArray);\n+    }\n+\n+    /**\n+     * The starting index in the InternalArray.\n+     * @return starting index.\n+     */\n+    public int start() {\n+        return 0;\n+    }\n+\n+    /**\n+     * Clear the array - drop all the data and start with a blank\n+     * internal array.  This implementation takes care of\n+     * setting the size of the array back to zero, and reinitializing\n+     * the internal storage array.\n+     *\n+     * @see org.apache.commons.math.util.DoubleArray#clear()\n+     */\n+    public void clear() {\n+        size = 0;\n+        nextAdd = 0;\n+        internalArray = new double[maxElements];\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.util;\n+\n+/**\n+ * Some useful additions to the built-in functions in {@link Math}.\n+ *\n+ * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:17 $\n+ */\n+public final class MathUtils {\n+\n+    /**\n+     * Private Constructor\n+     */\n+    private MathUtils() {\n+    }\n+\n+    /**\n+     * For a double precision value x, this method returns +1.0 if x >= 0\n+     * and -1.0 if x < 0.\n+     * @param x the value, a double\n+     * @return +1.0 or -1.0, depending on the the sign of x\n+     */\n+    public static double sign(final double x) {\n+        if (x >= 0.0) {\n+            return 1.0;\n+        } else {\n+            return -1.0;\n+        }\n+    }\n+\n+    /**\n+     * For a float value x, this method returns +1.0F if x >= 0\n+     * and -1.0F if x < 0.\n+     * @param x the value, a float\n+     * @return +1.0F or -1.0F, depending on the the sign of x\n+     */\n+    public static float sign(final float x) {\n+        if (x >= 0.0F) {\n+            return 1.0F;\n+        } else {\n+            return -1.0F;\n+        }\n+    }\n+\n+    /**\n+     * For a byte value x, this method returns (byte)(+1) if x >= 0\n+     * and (byte)(-1) if x < 0.\n+     * @param x the value, a byte\n+     * @return (byte)(+1) or (byte)(-1), depending on the the sign of x\n+     */\n+    public static byte sign(final byte x) {\n+        if (x >= (byte) 0) {\n+            return (byte) 1;\n+        } else {\n+            return (byte) (-1);\n+        }\n+    }\n+\n+    /**\n+     * For a short value x, this method returns (short)(+1) if x >= 0\n+     * and (short)(-1) if x < 0.\n+     *\n+     * @param x the value, a short\n+     * @return (short)(+1) or (short)(-1), depending on the the sign of x\n+     */\n+    public static short sign(final short x) {\n+        if (x >= (short) 0) {\n+            return (short) 1;\n+        } else {\n+            return (short) (-1);\n+        }\n+    }\n+\n+    /**\n+     * For an int value x, this method returns +1 if x >= 0\n+     * and -1 if x < 0.\n+     *\n+     * @param x the value, an int\n+     * @return +1 or -1, depending on the the sign of x\n+     */\n+    public static int sign(final int x) {\n+        if (x >= 0) {\n+            return 1;\n+        } else {\n+            return -1;\n+        }\n+    }\n+\n+    /**\n+     * For a long value x, this method returns +1L if x >= 0\n+     * and -1L if x < 0.\n+     *\n+     * @param x the value, a long\n+     * @return +1L or -1L, depending on the the sign of x\n+     */\n+    public static long sign(final long x) {\n+        if (x >= 0L) {\n+            return 1L;\n+        } else {\n+            return -1L;\n+        }\n+    }\n+    /**\n+     * Returns an exact representation of the\n+     * <a href=\"http://mathworld.wolfram.com/BinomialCoefficient.html\">\n+     * Binomial Coefficient</a>,  \"<code>n choose k</code>\",\n+     * the number of <code>k</code>-element subsets that can be selected from\n+     * an <code>n</code>-element set.\n+     * <p>\n+     * <Strong>Preconditions</strong>:<ul>\n+     * <li> <code>0 < k <= n </code> (otherwise\n+     * <li> <code>0 < k <= n </code> (otherwise\n+     *      <code>IllegalArgumentException</code> is thrown)</li>\n+     * <li> The result is small enough to fit into a <code>long</code>. The\n+     *      largest value of <code>n</code> for which all coefficients are\n+     *      <code> < Long.MAX_VALUE</code> is 66.  If the computed value\n+     * <li> The result is small enough to fit into a <code>long</code>.  The\n+     *      largest value of <code>n</code> for which all coefficients are\n+     *      <code> < Long.MAX_VALUE</code> is 66.  If the computed value\n+     *      exceeds <code>Long.MAX_VALUE</code> an <code>ArithMeticException\n+     *      </code> is thrown.</li>\n+     * </ul>\n+     *\n+     *\n+     * @param n the size of the set\n+     * @param k the size of the subsets to be counted\n+     * @return <code>n choose k</code>\n+     */\n+    public static long binomialCoefficient(final int n, final int k) {\n+        if (n < k) {\n+            throw new IllegalArgumentException(\n+                \"must have n >= k for binomial coefficient (n,k)\");\n+        }\n+        if (n <= 0) {\n+            throw new IllegalArgumentException(\n+                \"must have n > 0 for binomial coefficient (n,k)\");\n+        }\n+        if ((n == k) || (k == 0)) {\n+            return 1;\n+        }\n+        if ((k == 1) || (k == n - 1)) {\n+            return n;\n+        }\n+\n+        long result = Math.round(binomialCoefficientDouble(n, k));\n+        if (result == Long.MAX_VALUE) {\n+            throw new ArithmeticException(\n+                \"result too large to represent in a long integer\");\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Returns a <code>double</code> representation of the\n+     * <a href=\"http://mathworld.wolfram.com/BinomialCoefficient.html\">\n+     * Binomial Coefficient</a>,  \"<code>n choose k</code>\",\n+     * the number of <code>k</code>-element subsets that can be selected from\n+     * an <code>n</code>-element set.\n+     * <p>\n+     * <Strong>Preconditions</strong>:<ul>\n+     * <li> <code>0 < k <= n </code> (otherwise\n+     *      <code>IllegalArgumentException</code> is thrown)</li>\n+     * <li> The result is small enough to fit into a <code>double</code>.\n+     *      The largest value of <code>n</code> for which all coefficients are\n+     *      < Double.MAX_VALUE is 1029.  If the computed value exceeds\n+     *      Double.MAX_VALUE, Double.POSITIVE_INFINITY is returned</li>\n+     * </ul>\n+     *\n+     * @param n the size of the set\n+     * @param k the size of the subsets to be counted\n+     * @return <code>n choose k</code>\n+     */\n+    public static double binomialCoefficientDouble(final int n, final int k) {\n+        return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);\n+    }\n+\n+    /**\n+     * Returns the natural <code>log</code> of the\n+     * <a href=\"http://mathworld.wolfram.com/BinomialCoefficient.html\">\n+     * Binomial Coefficient</a>,  \"<code>n choose k</code>\",\n+     * the number of <code>k</code>-element subsets that can be selected from\n+     * an <code>n</code>-element set.\n+     * <p>\n+     * <Strong>Preconditions</strong>:<ul>\n+     * <li> <code>0 < k <= n </code> (otherwise\n+     *      <code>IllegalArgumentException</code> is thrown)</li>\n+     * </ul>\n+     *\n+     * @param n the size of the set\n+     * @param k the size of the subsets to be counted\n+     * @return <code>n choose k</code>\n+     */\n+    public static double binomialCoefficientLog(final int n, final int k) {\n+        if (n < k) {\n+            throw new IllegalArgumentException(\n+                \"must have n >= k for binomial coefficient (n,k)\");\n+        }\n+        if (n <= 0) {\n+            throw new IllegalArgumentException(\n+                \"must have n > 0 for binomial coefficient (n,k)\");\n+        }\n+        if ((n == k) || (k == 0)) {\n+            return 0;\n+        }\n+        if ((k == 1) || (k == n - 1)) {\n+            return Math.log((double) n);\n+        }\n+        double logSum = 0;\n+\n+        // n!/k!\n+        for (int i = k + 1; i <= n; i++) {\n+            logSum += Math.log((double) i);\n+        }\n+\n+        // divide by (n-k)!\n+        for (int i = 2; i <= n - k; i++) {\n+            logSum -= Math.log((double) i);\n+        }\n+\n+        return logSum;\n+    }\n+\n+    /**\n+     * Returns n!.  Shorthand for <code>n</code>\n+     * <a href=\"http://mathworld.wolfram.com/Factorial.html\">\n+     * Factorial</a>, the product of the numbers <code>1,...,n</code>.\n+     * \n+     * <p>\n+     * <Strong>Preconditions</strong>:<ul>\n+     * <li> <code>n > 0</code> (otherwise\n+     *      <code>IllegalArgumentException</code> is thrown)</li>\n+     * <li> The result is small enough to fit into a <code>long</code>.  The\n+     *      largest value of <code>n</code> for which <code>n!</code>\n+     *      < Long.MAX_VALUE</code> is 20.  If the computed value\n+     *      exceeds <code>Long.MAX_VALUE</code> an <code>ArithMeticException\n+     *      </code> is thrown.</li>\n+     * </ul>\n+     * </p>\n+     * \n+     * @param n argument\n+     * @return <code>n!</code>\n+     */\n+    public static long factorial(final int n) {\n+        long result = Math.round(factorialDouble(n));\n+        if (result == Long.MAX_VALUE) {\n+            throw new ArithmeticException(\n+                \"result too large to represent in a long integer\");\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Returns n!.  Shorthand for <code>n</code>\n+     * <a href=\"http://mathworld.wolfram.com/Factorial.html\">\n+     * Factorial</a>, the product of the numbers <code>1,...,n</code> as a\n+     * <code>double</code>.\n+     * \n+     * <p>\n+     * <Strong>Preconditions</strong>:<ul>\n+     * <li> <code>n > 0</code> (otherwise\n+     *      <code>IllegalArgumentException</code> is thrown)</li>\n+     * <li> The result is small enough to fit into a <code>double</code>.  The\n+     *      largest value of <code>n</code> for which <code>n!</code>\n+     *      < Double.MAX_VALUE</code> is 170.  If the computed value exceeds\n+     *      Double.MAX_VALUE, Double.POSITIVE_INFINITY is returned</li>\n+     * </ul>\n+     * </p>\n+     * \n+     * @param n argument\n+     * @return <code>n!</code>\n+     */\n+    public static double factorialDouble(final int n) {\n+        if (n <= 0) {\n+            throw new IllegalArgumentException(\"must have n > 0 for n!\");\n+        }\n+        return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n+    }\n+\n+    /**\n+      * Returns the natural logarithm of n!.\n+      * <p>\n+      * <Strong>Preconditions</strong>:<ul>\n+      * <li> <code>n > 0</code> (otherwise\n+      *      <code>IllegalArgumentException</code> is thrown)</li>\n+      * </ul>\n+      *\n+      * @param n argument\n+      * @return <code>n!</code>\n+      */\n+    public static double factorialLog(final int n) {\n+        if (n <= 0) {\n+            throw new IllegalArgumentException(\"must have n > 0 for n!\");\n+        }\n+        double logSum = 0;\n+        for (int i = 2; i <= n; i++) {\n+            logSum += Math.log((double) i);\n+        }\n+        return logSum;\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public static double cosh(double x) {\n+        return (Math.exp(x) + Math.exp(-x)) / 2.0;\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public static double sinh(double x) {\n+        return (Math.exp(x) - Math.exp(-x)) / 2.0;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/util/NumberTransformer.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.util;\n+\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ * Subclasses implementing this interface can transform Objects to doubles.\n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $\n+ */\n+public interface NumberTransformer {\n+    \n+    /**\n+     * Implementing this interface provides a facility to transform\n+     * from Object to Double.\n+     * \n+     * @param o the Object to be transformed.\n+     * @return the double value of the Object.\n+     * @throws MathException if the Object can not be transformed into a Double. \n+     */\n+    double transform(Object o) throws MathException;\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/util/TransformerMap.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.util;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This TansformerMap automates the transformation of of mixed object types.\n+ * It provides a means to set NumberTransformers that will be selected \n+ * based on the Class of the object handed to the Maps\n+ * <code>double transform(Object o)</code> method.\n+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:17 $\n+ */\n+public class TransformerMap implements NumberTransformer {\n+\n+    /**\n+     * A default Number Transformer for Numbers and numeric Strings.\n+     */\n+    private NumberTransformer defaultTransformer = null;\n+\n+    /**\n+     * The internal Map.\n+     */\n+    private Map map = null;\n+\n+    /**\n+     * \n+     */\n+    public TransformerMap() {\n+        map = new HashMap();\n+        defaultTransformer = new DefaultTransformer();\n+    }\n+\n+    /**\n+     * Tests if a Class is present in the TransformerMap.\n+     * @param key Class to check\n+     * @return true|false\n+     */\n+    public boolean containsClass(Class key) {\n+        return map.containsKey(key);\n+    }\n+\n+    /**\n+     * Tests if a NumberTransformer is present in the TransformerMap.\n+     * @param value NumberTransformer to check\n+     * @return true|false\n+     */\n+    public boolean containsTransformer(NumberTransformer value) {\n+        return map.containsValue(value);\n+    }\n+\n+    /**\n+     * Returns the Transformer that is mapped to a class\n+     * if mapping is not present, this returns null.\n+     * @param key The Class of the object\n+     * @return the mapped NumberTransformer or null.\n+     */\n+    public NumberTransformer getTransformer(Class key) {\n+        return (NumberTransformer) map.get(key);\n+    }\n+\n+    /**\n+     * Sets a Class to Transformer Mapping in the Map. If\n+     * the Class is already present, this overwrites that\n+     * mapping.\n+     * @param key The Class\n+     * @param transformer The NumberTransformer\n+     * @return the replaced transformer if one is present\n+     */\n+    public Object putTransformer(Class key, NumberTransformer transformer) {\n+        return map.put(key, transformer);\n+    }\n+\n+    /**\n+     * Removes a Class to Transformer Mapping in the Map.\n+     * @param key The Class\n+     * @return the removed transformer if one is present or\n+     * null if none was present.\n+     */\n+    public Object removeTransformer(Class key) {\n+        return map.remove(key);\n+    }\n+\n+    /**\n+     * Clears all the Class to Transformer mappings.\n+     */\n+    public void clear() {\n+        map.clear();\n+    }\n+\n+    /**\n+     * Returns the Set of Classes used as keys in the map.\n+     * @return Set of Classes\n+     */\n+    public Set classes() {\n+        return map.keySet();\n+    }\n+\n+    /**\n+     * Returns the Set of NumberTransformers used as values \n+     * in the map.\n+     * @return Set of NumberTransformers\n+     */\n+    public Collection transformers() {\n+        return map.values();\n+    }\n+\n+    /**\n+     * Attempts to transform the Object against the map of\n+     * NumberTransformers. Otherwise it returns Double.NaN.\n+     * \n+     * @see org.apache.commons.math.util.NumberTransformer#transform(java.lang.Object)\n+     */\n+    public double transform(Object o) {\n+        double value = Double.NaN;\n+\n+        try {\n+            if (o instanceof Number || o instanceof String) {\n+                value = defaultTransformer.transform(o);\n+            } else {\n+                NumberTransformer trans =\n+                    (NumberTransformer) this.getTransformer(o.getClass());\n+                if (trans != null) {\n+                    value = trans.transform(o);\n+                }\n+            }\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+\n+        return value;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/MathConfigurationExceptionTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:23 $\n+ */\n+public class MathConfigurationExceptionTest extends TestCase {\n+    /**\n+     * \n+     */\n+    public void testConstructor(){\n+        MathConfigurationException ex = new MathConfigurationException();\n+        assertNull(ex.getCause());\n+        assertNull(ex.getMessage());\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testConstructorMessage(){\n+        String msg = \"message\";\n+        MathConfigurationException ex = new MathConfigurationException(msg);\n+        assertNull(ex.getCause());\n+        assertEquals(msg, ex.getMessage());\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testConstructorMessageCause(){\n+        String outMsg = \"outer message\";\n+        String inMsg = \"inner message\";\n+        Exception cause = new Exception(inMsg);\n+        MathConfigurationException ex = new MathConfigurationException(outMsg, cause);\n+        assertEquals(outMsg, ex.getMessage());\n+        assertEquals(cause, ex.getCause());\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testConstructorCause(){\n+        String inMsg = \"inner message\";\n+        Exception cause = new Exception(inMsg);\n+        MathConfigurationException ex = new MathConfigurationException(cause);\n+        assertEquals(cause, ex.getCause());\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/MathExceptionTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:23 $\n+ */\n+public class MathExceptionTest extends TestCase {\n+    /**\n+     * \n+     */\n+    public void testConstructor(){\n+        MathException ex = new MathException();\n+        assertNull(ex.getCause());\n+        assertNull(ex.getMessage());\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testConstructorMessage(){\n+        String msg = \"message\";\n+        MathException ex = new MathException(msg);\n+        assertNull(ex.getCause());\n+        assertEquals(msg, ex.getMessage());\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testConstructorMessageCause(){\n+        String outMsg = \"outer message\";\n+        String inMsg = \"inner message\";\n+        Exception cause = new Exception(inMsg);\n+        MathException ex = new MathException(outMsg, cause);\n+        assertEquals(outMsg, ex.getMessage());\n+        assertEquals(cause, ex.getCause());\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testConstructorCause(){\n+        String inMsg = \"inner message\";\n+        Exception cause = new Exception(inMsg);\n+        MathException ex = new MathException(cause);\n+        assertEquals(cause, ex.getCause());\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/TestUtils.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math;\n+\n+import junit.framework.Assert;\n+\n+/**\n+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:23 $\n+ */\n+public class TestUtils {\n+    /**\n+     * \n+     */\n+    private TestUtils() {\n+        super();\n+    }\n+\n+    public static void assertEquals(double expected, double actual, double delta) {\n+        // check for NaN\n+        if(Double.isNaN(expected)){\n+            Assert.assertTrue(Double.isNaN(actual));\n+        } else {\n+            Assert.assertEquals(expected, actual, delta);\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/analysis/BisectionSolverTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+import org.apache.commons.math.MathException;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:17 $\n+ */\n+public final class BisectionSolverTest extends TestCase {\n+    /**\n+     *\n+     */\n+    public void testSinZero() throws MathException {\n+        UnivariateRealFunction f = new SinFunction();\n+        double result;\n+        \n+        UnivariateRealSolver solver = new BisectionSolver(f);\n+        result = solver.solve(3, 4);\n+        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());\n+\n+        result = solver.solve(1, 4);\n+        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());\n+    }\n+\n+    /**\n+     *\n+     */\n+    public void testQuinticZero() throws MathException {\n+        UnivariateRealFunction f = new QuinticFunction();\n+        double result;\n+\n+        UnivariateRealSolver solver = new BisectionSolver(f);\n+        result = solver.solve(-0.2, 0.2);\n+        assertEquals(result, 0, solver.getAbsoluteAccuracy());\n+\n+        result = solver.solve(-0.1, 0.3);\n+        assertEquals(result, 0, solver.getAbsoluteAccuracy());\n+\n+        result = solver.solve(-0.3, 0.45);\n+        assertEquals(result, 0, solver.getAbsoluteAccuracy());\n+\n+        result = solver.solve(0.3, 0.7);\n+        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n+\n+        result = solver.solve(0.2, 0.6);\n+        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n+\n+        result = solver.solve(0.05, 0.95);\n+        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n+\n+        result = solver.solve(0.85, 1.25);\n+        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n+\n+        result = solver.solve(0.8, 1.2);\n+        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n+\n+        result = solver.solve(0.85, 1.75);\n+        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n+\n+        result = solver.solve(0.55, 1.45);\n+        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n+\n+        result = solver.solve(0.85, 5);\n+        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testSetFunctionValueAccuracy(){\n+        double expected = 1.0e-2;\n+        \n+        UnivariateRealFunction f = new QuinticFunction();\n+        UnivariateRealSolver solver = new BisectionSolver(f);\n+        try {\n+            solver.setFunctionValueAccuracy(expected);\n+            assertEquals(expected, solver.getFunctionValueAccuracy(), 1.0e-2);\n+        } catch (MathException ex) {\n+            fail(ex.getMessage());\n+        }\n+    }        \n+    \n+    /**\n+     * \n+     */\n+    public void testResetFunctionValueAccuracy(){\n+        double newValue = 1.0e-2;\n+        \n+        UnivariateRealFunction f = new QuinticFunction();\n+        UnivariateRealSolver solver = new BisectionSolver(f);\n+        try {\n+            double oldValue = solver.getFunctionValueAccuracy();\n+            solver.setFunctionValueAccuracy(newValue);\n+            solver.resetFunctionValueAccuracy();\n+            assertEquals(oldValue, solver.getFunctionValueAccuracy(), 1.0e-2);\n+        } catch(MathException ex){\n+            fail(ex.getMessage());\n+        }\n+    }        \n+    \n+    /**\n+     * \n+     */\n+    public void testSetAbsoluteAccuracy(){\n+        double expected = 1.0e-2;\n+        \n+        UnivariateRealFunction f = new QuinticFunction();\n+        UnivariateRealSolver solver = new BisectionSolver(f);\n+        try {\n+            solver.setAbsoluteAccuracy(expected);\n+            assertEquals(expected, solver.getAbsoluteAccuracy(), 1.0e-2);\n+        } catch(MathException ex){\n+            fail(ex.getMessage());\n+        }\n+    }        \n+    \n+    /**\n+     * \n+     */\n+    public void testResetAbsoluteAccuracy(){\n+        double newValue = 1.0e-2;\n+        \n+        UnivariateRealFunction f = new QuinticFunction();\n+        UnivariateRealSolver solver = new BisectionSolver(f);\n+        try {\n+            double oldValue = solver.getAbsoluteAccuracy();\n+            solver.setAbsoluteAccuracy(newValue);\n+            solver.resetAbsoluteAccuracy();\n+            assertEquals(oldValue, solver.getAbsoluteAccuracy(), 1.0e-2);\n+        } catch(MathException ex){\n+            fail(ex.getMessage());\n+        }\n+    }        \n+    \n+    /**\n+     * \n+     */\n+    public void testSetMaximalIterationCount(){\n+        int expected = 100;\n+        \n+        UnivariateRealFunction f = new QuinticFunction();\n+        UnivariateRealSolver solver = new BisectionSolver(f);\n+        solver.setMaximalIterationCount(expected);\n+        assertEquals(expected, solver.getMaximalIterationCount());\n+    }        \n+    \n+    /**\n+     * \n+     */\n+    public void testResetMaximalIterationCount(){\n+        int newValue = 10000;\n+        \n+        UnivariateRealFunction f = new QuinticFunction();\n+        UnivariateRealSolver solver = new BisectionSolver(f);\n+        int oldValue = solver.getMaximalIterationCount();\n+        solver.setMaximalIterationCount(newValue);\n+        solver.resetMaximalIterationCount();\n+        assertEquals(oldValue, solver.getMaximalIterationCount());\n+    }        \n+    \n+    /**\n+     * \n+     */\n+    public void testSetRelativeAccuracy(){\n+        double expected = 1.0e-2;\n+        \n+        UnivariateRealFunction f = new QuinticFunction();\n+        UnivariateRealSolver solver = new BisectionSolver(f);\n+        try {\n+            solver.setRelativeAccuracy(expected);\n+            assertEquals(expected, solver.getRelativeAccuracy(), 1.0e-2);\n+        } catch(MathException ex){\n+            fail(ex.getMessage());\n+        }\n+    }        \n+    \n+    /**\n+     * \n+     */\n+    public void testResetRelativeAccuracy(){\n+        double newValue = 1.0e-2;\n+        \n+        UnivariateRealFunction f = new QuinticFunction();\n+        UnivariateRealSolver solver = new BisectionSolver(f);\n+        try {\n+            double oldValue = solver.getRelativeAccuracy();\n+            solver.setRelativeAccuracy(newValue);\n+            solver.resetRelativeAccuracy();\n+            assertEquals(oldValue, solver.getRelativeAccuracy(), 1.0e-2);\n+        } catch(MathException ex){\n+            fail(ex.getMessage());\n+        }\n+    }        \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.analysis;\n+\n+import org.apache.commons.math.ConvergenceException;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:17 $\n+ */\n+public class ConvergenceExceptionTest extends TestCase {\n+    /**\n+     * \n+     */\n+    public void testConstructor(){\n+        ConvergenceException ex = new ConvergenceException();\n+        assertNull(ex.getCause());\n+        assertNull(ex.getMessage());\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testConstructorMessage(){\n+        String msg = \"message\";\n+        ConvergenceException ex = new ConvergenceException(msg);\n+        assertNull(ex.getCause());\n+        assertEquals(msg, ex.getMessage());\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testConstructorMessageCause(){\n+        String outMsg = \"outer message\";\n+        String inMsg = \"inner message\";\n+        Exception cause = new Exception(inMsg);\n+        ConvergenceException ex = new ConvergenceException(outMsg, cause);\n+        assertEquals(outMsg, ex.getMessage());\n+        assertEquals(cause, ex.getCause());\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testConstructorCause(){\n+        String inMsg = \"inner message\";\n+        Exception cause = new Exception(inMsg);\n+        ConvergenceException ex = new ConvergenceException(cause);\n+        assertEquals(cause, ex.getCause());\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/analysis/InterpolatorTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+import org.apache.commons.math.MathException;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test the interpolation framework.\n+ *\n+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:16 $ \n+ */\n+public class InterpolatorTest extends TestCase {\n+\n+    public InterpolatorTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(InterpolatorTest.class);\n+        suite.setName(\"UnivariateRealInterpolator Tests\");\n+        return suite;\n+    }\n+\n+    public void testInterpolateLinearDegenerateTwoSegment()\n+        throws MathException {\n+        System.out.println(\" deg 2 seg\");\n+        double xval[] = { 0.0, 0.5, 1.0 };\n+        double yval[] = { 0.0, 0.5, 1.0 };\n+        UnivariateRealInterpolator i = new SplineInterpolator();\n+        UnivariateRealFunction f = i.interpolate(xval, yval);\n+        double x;\n+        x = 0.0;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = 0.5;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = 1 - 1E-6;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+    }\n+\n+    public void testInterpolateLinearDegenerateThreeSegment()\n+        throws MathException {\n+        System.out.println(\" deg 3 seg\");\n+        double xval[] = { 0.0, 0.5, 1.0, 1.5 };\n+        double yval[] = { 0.0, 0.5, 1.0, 1.5 };\n+        UnivariateRealInterpolator i = new SplineInterpolator();\n+        UnivariateRealFunction f = i.interpolate(xval, yval);\n+        double x;\n+        x = 0.0;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = 0.5 - 1E-6;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = 0.5;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = 1 - 1E-6;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = 1;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = 1.5 - 1E-6;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+    }\n+\n+    public void testInterpolateLinear() throws MathException {\n+        System.out.println(\" triang 2 seg\");\n+        double xval[] = { 0.0, 0.5, 1.0 };\n+        double yval[] = { 0.0, 0.5, 0.0 };\n+        UnivariateRealInterpolator i = new SplineInterpolator();\n+        UnivariateRealFunction f = i.interpolate(xval, yval);\n+        double x;\n+        x = 0.0;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = 0.5 - 1E-6;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = 0.5;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = 1 - 1E-6;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+    }\n+\n+    public void testInterpolateSin() throws MathException {\n+        System.out.println(\" sin\");\n+        double xval[] =\n+            {\n+                0.0,\n+                Math.PI / 6.0,\n+                Math.PI / 2.0,\n+                5.0 * Math.PI / 6.0,\n+                Math.PI,\n+                7.0 * Math.PI / 6.0,\n+                3.0 * Math.PI / 2.0,\n+                11.0 * Math.PI / 6.0,\n+                2.0 * Math.PI };\n+        double yval[] = { 0.0, 0.5, 1.0, 0.5, 0.0, -0.5, -1.0, -0.5, 0.0 };\n+\n+        System.out.println(\"n=\" + xval.length);\n+        UnivariateRealInterpolator i = new SplineInterpolator();\n+        UnivariateRealFunction f = i.interpolate(xval, yval);\n+        double x;\n+        x = 0.0;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = Math.PI / 6.0 - 1E-6;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = Math.PI / 6.0 + 1E-6;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = Math.PI / 2 - 1E-6;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = Math.PI / 2 + 1E-6;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = Math.PI - 1E-6;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = Math.PI + 1E-6;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = 2.0 * Math.PI - 1E-6;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        //assertEquals(0.5,f.value(Math.PI/6.0),)\n+    }\n+\n+    public void testIllegalArguments() throws MathException {\n+        // Data set arrays of different size.\n+        UnivariateRealInterpolator i = new SplineInterpolator();\n+        try {\n+            double xval[] = { 0.0, 1.0 };\n+            double yval[] = { 0.0, 1.0, 2.0 };\n+            i.interpolate(xval, yval);\n+            fail(\"Failed to detect data set array with different sizes.\");\n+        } catch (IllegalArgumentException iae) {\n+        }\n+        // X values not sorted.\n+        try {\n+            double xval[] = { 0.0, 1.0, 0.5 };\n+            double yval[] = { 0.0, 1.0, 2.0 };\n+            i.interpolate(xval, yval);\n+            fail(\"Failed to detect unsorted arguments.\");\n+        } catch (IllegalArgumentException iae) {\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/analysis/QuinticFunction.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ * Auxillary class for testing solvers.\n+ *\n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $ \n+ */\n+public class QuinticFunction implements UnivariateRealFunction {\n+\n+    /* Evaluate quintic.\n+     * @see org.apache.commons.math.UnivariateRealFunction#value(double)\n+     */\n+    public double value(double x) throws MathException {\n+        return (x-1)*(x-0.5)*x*(x+0.5)*(x+1);\n+    }\n+\n+    /* First derivative of quintic.\n+     * @see org.apache.commons.math.UnivariateRealFunction#firstDerivative(double)\n+     */\n+    public double firstDerivative(double x) throws MathException {\n+        return (5*x*x-3.75)*x*x+0.25;\n+    }\n+\n+    /* Second order derivative of quintic.\n+     * Unsupported.\n+     * @see org.apache.commons.math.UnivariateRealFunction#secondDerivative(double)\n+     */\n+    public double secondDerivative(double x) throws MathException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/analysis/RealSolverTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+import org.apache.commons.math.MathException;\n+\n+import junit.framework.Assert;\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Testcase for UnivariateRealSolver.\n+ * Because Brent-Dekker is guaranteed to converge in less than the default\n+ * maximum iteration count due to bisection fallback, it is quite hard to\n+ * debug. I include measured iteration counts plus one in order to detect\n+ * regressions. On average Brent-Dekker should use 4..5 iterations for the\n+ * default absolute accuracy of 10E-8 for sinus and the quintic function around\n+ * zero, and 5..10 iterations for the other zeros.\n+ * \n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:16 $\n+ */\n+public final class RealSolverTest extends TestCase {\n+\n+    public RealSolverTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(RealSolverTest.class);\n+        suite.setName(\"UnivariateRealSolver Tests\");\n+        return suite;\n+    }\n+\n+    public void testSinZero() throws MathException {\n+        // The sinus function is behaved well around the root at #pi. The second\n+        // order derivative is zero, which means linar approximating methods will\n+        // still converge quadratically. \n+        UnivariateRealFunction f = new SinFunction();\n+        double result;\n+        UnivariateRealSolver solver = new BrentSolver(f);\n+        // Somewhat benign interval. The function is monotonous.\n+        result = solver.solve(3, 4);\n+        System.out.println(\n+            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());\n+        // 4 iterations on i586 JDK 1.4.1.\n+        assertTrue(solver.getIterationCount() <= 5);\n+        // Larger and somewhat less benign interval. The function is grows first.\n+        result = solver.solve(1, 4);\n+        System.out.println(\n+            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());\n+        // 5 iterations on i586 JDK 1.4.1.\n+        assertTrue(solver.getIterationCount() <= 6);\n+        solver = new SecantSolver(f);\n+        result = solver.solve(3, 4);\n+        System.out.println(\n+            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());\n+        // 4 iterations on i586 JDK 1.4.1.\n+        assertTrue(solver.getIterationCount() <= 5);\n+        result = solver.solve(1, 4);\n+        System.out.println(\n+            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());\n+        // 5 iterations on i586 JDK 1.4.1.\n+        assertTrue(solver.getIterationCount() <= 6);\n+    }\n+\n+    public void testQuinticZero() throws MathException {\n+        // The quintic function has zeroes at 0, +-0.5 and +-1.\n+        // Around the root of 0 the function is well behaved, with a second derivative\n+        // of zero a 0.\n+        // The other roots are less well to find, in particular the root at 1, because\n+        // the function grows fast for x>1.\n+        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n+        // intervals containing these values are harder for the solvers.\n+        UnivariateRealFunction f = new QuinticFunction();\n+        double result;\n+        // Brent-Dekker solver.\n+        UnivariateRealSolver solver = new BrentSolver(f);\n+        // Symmetric bracket around 0. Test whether solvers can handle hitting\n+        // the root in the first iteration.\n+        result = solver.solve(-0.2, 0.2);\n+        System.out.println(\n+            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        assertEquals(result, 0, solver.getAbsoluteAccuracy());\n+        assertTrue(solver.getIterationCount() <= 2);\n+        // 1 iterations on i586 JDK 1.4.1.\n+        // Asymmetric bracket around 0, just for fun. Contains extremum.\n+        result = solver.solve(-0.1, 0.3);\n+        System.out.println(\n+            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        assertEquals(result, 0, solver.getAbsoluteAccuracy());\n+        // 5 iterations on i586 JDK 1.4.1.\n+        assertTrue(solver.getIterationCount() <= 6);\n+        // Large bracket around 0. Contains two extrema.\n+        result = solver.solve(-0.3, 0.45);\n+        System.out.println(\n+            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        assertEquals(result, 0, solver.getAbsoluteAccuracy());\n+        // 6 iterations on i586 JDK 1.4.1.\n+        assertTrue(solver.getIterationCount() <= 7);\n+        // Benign bracket around 0.5, function is monotonous.\n+        result = solver.solve(0.3, 0.7);\n+        System.out.println(\n+            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n+        // 6 iterations on i586 JDK 1.4.1.\n+        assertTrue(solver.getIterationCount() <= 7);\n+        // Less benign bracket around 0.5, contains one extremum.\n+        result = solver.solve(0.2, 0.6);\n+        System.out.println(\n+            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n+        // 6 iterations on i586 JDK 1.4.1.\n+        assertTrue(solver.getIterationCount() <= 7);\n+        // Large, less benign bracket around 0.5, contains both extrema.\n+        result = solver.solve(0.05, 0.95);\n+        System.out.println(\n+            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n+        // 8 iterations on i586 JDK 1.4.1.\n+        assertTrue(solver.getIterationCount() <= 9);\n+        // Relatively benign bracket around 1, function is monotonous. Fast growth for x>1\n+        // is still a problem.\n+        result = solver.solve(0.85, 1.25);\n+        System.out.println(\n+            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n+        // 8 iterations on i586 JDK 1.4.1.\n+        assertTrue(solver.getIterationCount() <= 9);\n+        // Less benign bracket around 1 with extremum.\n+        result = solver.solve(0.8, 1.2);\n+        System.out.println(\n+            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n+        // 8 iterations on i586 JDK 1.4.1.\n+        assertTrue(solver.getIterationCount() <= 9);\n+        // Large bracket around 1. Monotonous.\n+        result = solver.solve(0.85, 1.75);\n+        System.out.println(\n+            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n+        // 10 iterations on i586 JDK 1.4.1.\n+        assertTrue(solver.getIterationCount() <= 11);\n+        // Large bracket around 1. Interval contains extremum.\n+        result = solver.solve(0.55, 1.45);\n+        System.out.println(\n+            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n+        // 7 iterations on i586 JDK 1.4.1.\n+        assertTrue(solver.getIterationCount() <= 8);\n+        // Very large bracket around 1 for testing fast growth behaviour.\n+        result = solver.solve(0.85, 5);\n+        System.out.println(\n+            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n+        // 12 iterations on i586 JDK 1.4.1.\n+        assertTrue(solver.getIterationCount() <= 13);\n+        // Secant solver.\n+        solver = new SecantSolver(f);\n+        result = solver.solve(-0.2, 0.2);\n+        System.out.println(\n+            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        assertEquals(result, 0, solver.getAbsoluteAccuracy());\n+        // 1 iterations on i586 JDK 1.4.1.\n+        assertTrue(solver.getIterationCount() <= 2);\n+        result = solver.solve(-0.1, 0.3);\n+        System.out.println(\n+            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        assertEquals(result, 0, solver.getAbsoluteAccuracy());\n+        // 5 iterations on i586 JDK 1.4.1.\n+        assertTrue(solver.getIterationCount() <= 6);\n+        result = solver.solve(-0.3, 0.45);\n+        System.out.println(\n+            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        assertEquals(result, 0, solver.getAbsoluteAccuracy());\n+        // 6 iterations on i586 JDK 1.4.1.\n+        assertTrue(solver.getIterationCount() <= 7);\n+        result = solver.solve(0.3, 0.7);\n+        System.out.println(\n+            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n+        // 7 iterations on i586 JDK 1.4.1.\n+        assertTrue(solver.getIterationCount() <= 8);\n+        result = solver.solve(0.2, 0.6);\n+        System.out.println(\n+            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n+        // 6 iterations on i586 JDK 1.4.1.\n+        assertTrue(solver.getIterationCount() <= 7);\n+        result = solver.solve(0.05, 0.95);\n+        System.out.println(\n+            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n+        // 8 iterations on i586 JDK 1.4.1.\n+        assertTrue(solver.getIterationCount() <= 9);\n+        result = solver.solve(0.85, 1.25);\n+        System.out.println(\n+            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n+        // 10 iterations on i586 JDK 1.4.1.\n+        assertTrue(solver.getIterationCount() <= 11);\n+        result = solver.solve(0.8, 1.2);\n+        System.out.println(\n+            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n+        // 8 iterations on i586 JDK 1.4.1.\n+        assertTrue(solver.getIterationCount() <= 9);\n+        result = solver.solve(0.85, 1.75);\n+        System.out.println(\n+            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n+        // 14 iterations on i586 JDK 1.4.1.\n+        assertTrue(solver.getIterationCount() <= 15);\n+        // The followig is especially slow because the solver first has to reduce\n+        // the bracket to exclude the extremum. After that, convergence is rapide.\n+        result = solver.solve(0.55, 1.45);\n+        System.out.println(\n+            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n+        // 7 iterations on i586 JDK 1.4.1.\n+        assertTrue(solver.getIterationCount() <= 8);\n+        result = solver.solve(0.85, 5);\n+        System.out.println(\n+            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n+        // 14 iterations on i586 JDK 1.4.1.\n+        assertTrue(solver.getIterationCount() <= 15);\n+        // Static solve method\n+        result = UnivariateRealSolverUtils.solve(f, -0.2, 0.2);\n+        assertEquals(result, 0, solver.getAbsoluteAccuracy());\n+        result = UnivariateRealSolverUtils.solve(f, -0.1, 0.3);\n+        Assert.assertEquals(result, 0, 1E-8);\n+        result = UnivariateRealSolverUtils.solve(f, -0.3, 0.45);\n+        Assert.assertEquals(result, 0, 1E-6);\n+        result = UnivariateRealSolverUtils.solve(f, 0.3, 0.7);\n+        Assert.assertEquals(result, 0.5, 1E-6);\n+        result = UnivariateRealSolverUtils.solve(f, 0.2, 0.6);\n+        Assert.assertEquals(result, 0.5, 1E-6);\n+        result = UnivariateRealSolverUtils.solve(f, 0.05, 0.95);\n+        Assert.assertEquals(result, 0.5, 1E-6);\n+        result = UnivariateRealSolverUtils.solve(f, 0.85, 1.25);\n+        Assert.assertEquals(result, 1.0, 1E-6);\n+        result = UnivariateRealSolverUtils.solve(f, 0.8, 1.2);\n+        Assert.assertEquals(result, 1.0, 1E-6);\n+        result = UnivariateRealSolverUtils.solve(f, 0.85, 1.75);\n+        Assert.assertEquals(result, 1.0, 1E-6);\n+        result = UnivariateRealSolverUtils.solve(f, 0.55, 1.45);\n+        Assert.assertEquals(result, 1.0, 1E-6);\n+        result = UnivariateRealSolverUtils.solve(f, 0.85, 5);\n+        Assert.assertEquals(result, 1.0, 1E-6);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/analysis/SinFunction.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ * Auxillary class for testing solvers.\n+ *\n+ * The function is extraordinarily well behaved around zero roots: it\n+ * has an inflection point there (second order derivative is zero),\n+ * which means linear approximation (Regula Falsi) will converge\n+ * quadratically.\n+ * \n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $\n+ */\n+public class SinFunction implements UnivariateRealFunction {\n+\n+    /* Evaluate sinus fuction.\n+     * @see org.apache.commons.math.UnivariateRealFunction#value(double)\n+     */\n+    public double value(double x) throws MathException {\n+        return Math.sin(x);\n+    }\n+\n+    /* First derivative of sinus function\n+     * @see org.apache.commons.math.UnivariateRealFunction#firstDerivative(double)\n+     */\n+    public double firstDerivative(double x) throws MathException {\n+        return Math.cos(x);\n+    }\n+\n+    /* Second derivative of sinus function.\n+     * Unsupported.\n+     * @see org.apache.commons.math.UnivariateRealFunction#secondDerivative(double)\n+     */\n+    public double secondDerivative(double x) throws MathException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.analysis;\n+\n+import org.apache.commons.math.MathException;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:17 $\n+ */\n+public class UnivariateRealSolverUtilsTest extends TestCase {\n+    /**\n+     * \n+     */\n+    public void testSolveNull(){\n+        try {\n+            UnivariateRealSolverUtils.solve(null, 0.0, 4.0);\n+            fail();\n+        } catch(MathException ex){\n+            fail(\"math exception should no be thrown.\");\n+        } catch(IllegalArgumentException ex){\n+            // success\n+        }\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testSolveSin(){\n+        try {\n+            double x = UnivariateRealSolverUtils.solve(new SinFunction(), 1.0,\n+                4.0);\n+            assertEquals(Math.PI, x, 1.0e-4);\n+        } catch(MathException ex){\n+            fail(\"math exception should no be thrown.\");\n+        }\n+    }\n+\n+    /**\n+     * \n+     */\n+    public void testSolveAccuracyNull(){\n+        try {\n+            double accuracy = 1.0e-6;\n+            UnivariateRealSolverUtils.solve(null, 0.0, 4.0, accuracy);\n+            fail();\n+        } catch(MathException ex){\n+            fail(\"math exception should no be thrown.\");\n+        } catch(IllegalArgumentException ex){\n+            // success\n+        }\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testSolveAccuracySin(){\n+        try {\n+            double accuracy = 1.0e-6;\n+            double x = UnivariateRealSolverUtils.solve(new SinFunction(), 1.0,\n+                4.0, accuracy);\n+            assertEquals(Math.PI, x, accuracy);\n+        } catch(MathException ex){\n+            fail(\"math exception should no be thrown.\");\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/beans/Patient.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.beans;\n+\n+/**\n+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:22 $\n+ */\n+public class Patient {\n+\n+    private VitalStats vitalStats;\n+    private Integer age;\n+\n+    public Patient() {\n+    }\n+\n+    public Patient(VitalStats vitalStats, Integer age) {\n+        setVitalStats( vitalStats );\n+        setAge( age );\n+    }\n+\n+    public VitalStats getVitalStats() {\n+        return( vitalStats );\n+    }\n+\n+    public void setVitalStats(VitalStats vitalStats) {\n+        this.vitalStats = vitalStats;\n+    }\n+\n+    public Integer getAge() {\n+        return age;\n+    }\n+\n+    public void setAge(Integer age) {\n+        this.age = age;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/beans/VitalStats.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.beans;\n+\n+/**\n+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:22 $\n+ */\n+public class VitalStats {\n+\n+    private Double heartrate;\n+    private Double temperature;\n+\n+    public VitalStats() {\n+    }\n+\n+    public VitalStats(Double heartrate, Double temperature) {\n+        setHeartRate( heartrate );\n+        setTemperature( temperature );\n+    }\n+\n+    public Double getHeartRate() {\n+        return heartrate;\n+    }\n+\n+    public void setHeartRate(Double heartrate) {\n+        this.heartrate = heartrate;\n+    }\n+\n+    public Double getTemperature() {\n+        return temperature;\n+    }\n+\n+    public void setTemperature(Double temperature) {\n+        this.temperature = temperature;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/complex/ComplexTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Geronimo\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Geronimo\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ * ====================================================================\n+ */\n+\n+package org.apache.commons.math.complex;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.3 $ $Date: 2003/11/14 22:22:24 $\n+ */\n+public class ComplexTest extends TestCase {\n+    \n+    public void testConstructor() {\n+        Complex z = new Complex(3.0, 4.0);\n+        assertEquals(3.0, z.getReal(), 1.0e-5);\n+        assertEquals(4.0, z.getImaginary(), 1.0e-5);\n+    }\n+    \n+    public void testConstructorNaN() {\n+        Complex z = new Complex(3.0, Double.NaN);\n+        assertTrue(z.isNaN());\n+\n+        z = new Complex(Double.NaN, 4.0);\n+        assertTrue(z.isNaN());\n+\n+        z = new Complex(3.0, 4.0);\n+        assertFalse(z.isNaN());\n+    }\n+    \n+    public void testAbs() {\n+        Complex z = new Complex(3.0, 4.0);\n+        assertEquals(5.0, z.abs(), 1.0e-5);\n+    }\n+    \n+    public void testAdd() {\n+        Complex x = new Complex(3.0, 4.0);\n+        Complex y = new Complex(5.0, 6.0);\n+        Complex z = x.add(y);\n+        assertEquals(8.0, z.getReal(), 1.0e-5);\n+        assertEquals(10.0, z.getImaginary(), 1.0e-5);\n+    }\n+    \n+    public void testAddNaN() {\n+        Complex x = new Complex(3.0, 4.0);\n+        Complex z = x.add(Complex.NaN);\n+        assertTrue(z.isNaN());\n+    }\n+    \n+    public void testConjugate() {\n+        Complex x = new Complex(3.0, 4.0);\n+        Complex z = x.conjugate();\n+        assertEquals(3.0, z.getReal(), 1.0e-5);\n+        assertEquals(-4.0, z.getImaginary(), 1.0e-5);\n+    }\n+    \n+    public void testConjugateNaN() {\n+        Complex z = Complex.NaN.conjugate();\n+        assertTrue(z.isNaN());\n+    }\n+    \n+    public void testDivide() {\n+        Complex x = new Complex(3.0, 4.0);\n+        Complex y = new Complex(5.0, 6.0);\n+        Complex z = x.divide(y);\n+        assertEquals(39.0 / 61.0, z.getReal(), 1.0e-5);\n+        assertEquals(2.0 / 61.0, z.getImaginary(), 1.0e-5);\n+    }\n+    \n+    public void testDivideNaN() {\n+        Complex x = new Complex(3.0, 4.0);\n+        Complex z = x.divide(Complex.NaN);\n+        assertTrue(z.isNaN());\n+    }\n+    \n+    public void testMultiply() {\n+        Complex x = new Complex(3.0, 4.0);\n+        Complex y = new Complex(5.0, 6.0);\n+        Complex z = x.multiply(y);\n+        assertEquals(-9.0, z.getReal(), 1.0e-5);\n+        assertEquals(38.0, z.getImaginary(), 1.0e-5);\n+    }\n+    \n+    public void testMultiplyNaN() {\n+        Complex x = new Complex(3.0, 4.0);\n+        Complex z = x.multiply(Complex.NaN);\n+        assertTrue(z.isNaN());\n+    }\n+    \n+    public void testNegate() {\n+        Complex x = new Complex(3.0, 4.0);\n+        Complex z = x.negate();\n+        assertEquals(-3.0, z.getReal(), 1.0e-5);\n+        assertEquals(-4.0, z.getImaginary(), 1.0e-5);\n+    }\n+    \n+    public void testNegateNaN() {\n+        Complex z = Complex.NaN.negate();\n+        assertTrue(z.isNaN());\n+    }\n+    \n+    public void testSubtract() {\n+        Complex x = new Complex(3.0, 4.0);\n+        Complex y = new Complex(5.0, 6.0);\n+        Complex z = x.subtract(y);\n+        assertEquals(-2.0, z.getReal(), 1.0e-5);\n+        assertEquals(-2.0, z.getImaginary(), 1.0e-5);\n+    }\n+    \n+    public void testSubtractNaN() {\n+        Complex x = new Complex(3.0, 4.0);\n+        Complex z = x.subtract(Complex.NaN);\n+        assertTrue(z.isNaN());\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:22 $\n+ */\n+public class BinomialDistributionTest extends TestCase {\n+    private BinomialDistribution b;\n+    \n+    /**\n+     * Constructor for ChiSquareDistributionTest.\n+     * @param name\n+     */\n+    public BinomialDistributionTest(String name) {\n+        super(name);\n+    }\n+\n+    /*\n+     * @see TestCase#setUp()\n+     */\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        b = DistributionFactory.newInstance().createBinomialDistribution(10, 0.70);\n+    }\n+\n+    /*\n+     * @see TestCase#tearDown()\n+     */\n+    protected void tearDown() throws Exception {\n+        b = null;\n+        super.tearDown();\n+    }\n+\n+    public void testInverseCummulativeProbability001() {\n+        testValue(1, .001);\n+    }\n+    \n+    public void testInverseCumulativeProbability010() {\n+        testValue(2, .010);\n+    }\n+    \n+    public void testInverseCumulativeProbability025() {\n+        testValue(3, .025);\n+    }\n+\n+    public void testInverseCumulativeProbability050() {\n+        testValue(4, .050);\n+    }\n+    \n+    public void testInverseCumulativeProbability100() {\n+        testValue(4, .100);\n+    }\n+\n+    public void testInverseCummulativeProbability999() {\n+        testValue(9, .999);\n+    }\n+    \n+    public void testInverseCumulativeProbability990() {\n+        testValue(9, .990);\n+    }\n+    \n+    public void testInverseCumulativeProbability975() {\n+        testValue(9, .975);\n+    }\n+\n+    public void testInverseCumulativeProbability950() {\n+        testValue(8, .950);\n+    }\n+    \n+    public void testInverseCumulativeProbability900() {\n+        testValue(8, .900);\n+    }\n+\n+    public void testCummulativeProbability1() {\n+        testProbability(1, .00014);\n+    }\n+    \n+    public void testCumulativeProbability2() {\n+        testProbability(2, .00159);\n+    }\n+    \n+    public void testCumulativeProbability3() {\n+        testProbability(3, .01059);\n+    }\n+\n+    public void testCumulativeProbability4() {\n+        testProbability(4, .04735);\n+    }\n+    \n+    public void testCumulativeProbability9() {\n+        testProbability(9, .97175);\n+    }\n+\n+    public void testCummulativeProbability8() {\n+        testProbability(8, .85069);\n+    }\n+    \n+    private void testProbability(int x, double expected){\n+        double actual = b.cummulativeProbability(x);\n+        assertEquals(expected, actual, 10e-4);\n+    }\n+    \n+    private void testValue(int expected, double p){\n+        int actual = b.inverseCummulativeProbability(p);\n+        assertEquals(expected, actual);\n+        assertTrue(b.cummulativeProbability(actual) <= p);\n+        assertTrue(b.cummulativeProbability(actual + 1) >= p);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.stat.distribution;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:22 $\n+ */\n+public class ChiSquareDistributionTest extends TestCase {\n+    private ChiSquaredDistribution chiSquare;\n+    \n+\t/**\n+\t * Constructor for ChiSquareDistributionTest.\n+\t * @param name\n+\t */\n+\tpublic ChiSquareDistributionTest(String name) {\n+\t\tsuper(name);\n+\t}\n+\n+\t/*\n+\t * @see TestCase#setUp()\n+\t */\n+\tprotected void setUp() throws Exception {\n+\t\tsuper.setUp();\n+        chiSquare = DistributionFactory.newInstance().createChiSquareDistribution(5.0);\n+\t}\n+\n+\t/*\n+\t * @see TestCase#tearDown()\n+\t */\n+\tprotected void tearDown() throws Exception {\n+        chiSquare = null;\n+\t\tsuper.tearDown();\n+\t}\n+\n+    public void testLowerTailProbability(){\n+        testProbability( .210, .001);\n+        testProbability( .554, .010);\n+        testProbability( .831, .025);\n+        testProbability(1.145, .050);\n+        testProbability(1.610, .100);\n+    }\n+\n+    public void testUpperTailProbability(){\n+        testProbability(20.515, .999);\n+        testProbability(15.086, .990);\n+        testProbability(12.833, .975);\n+        testProbability(11.070, .950);\n+        testProbability( 9.236, .900);\n+    }\n+    \n+    public void testLowerTailValues(){\n+        testValue(.001,  .210);\n+        testValue(.010,  .554);\n+        testValue(.025,  .831);\n+        testValue(.050, 1.145);\n+        testValue(.100, 1.610);\n+    }\n+    \n+    public void testUpperTailValues(){\n+        testValue(.999, 20.515);\n+        testValue(.990, 15.086);\n+        testValue(.975, 12.833);\n+        testValue(.950, 11.070);\n+        testValue(.900,  9.236);\n+    }\n+    \n+    private void testProbability(double x, double expected){\n+        double actual = chiSquare.cummulativeProbability(x);\n+        assertEquals(\"probability for \" + x, expected, actual, 10e-4);\n+    }\n+    \n+    private void testValue(double p, double expected){\n+        double actual = chiSquare.inverseCummulativeProbability(p);\n+        assertEquals(\"value for \" + p, expected, actual, 10e-4);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.stat.distribution;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:22 $\n+ */\n+public class DistributionFactoryImplTest extends TestCase {\n+    /** */\n+    private DistributionFactory factory;\n+    \n+\t/**\n+\t * Constructor for DistributionFactoryImplTest.\n+\t * @param name\n+\t */\n+\tpublic DistributionFactoryImplTest(String name) {\n+\t\tsuper(name);\n+\t}\n+\t/**\n+\t * @throws java.lang.Exception\n+\t */\n+\tprotected void setUp() throws Exception {\n+\t\tsuper.setUp();\n+        factory = new DistributionFactoryImpl();\n+\t}\n+\n+\t/**\n+\t * @throws java.lang.Exception\n+\t */\n+\tprotected void tearDown() throws Exception {\n+        factory = null;\n+\t\tsuper.tearDown();\n+\t}\n+    \n+    public void testCreateChiSquareDistributionNegative(){\n+        try {\n+            factory.createChiSquareDistribution(-1.0);\n+            fail(\"negative degrees of freedom.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateChiSquareDistributionZero(){\n+        try {\n+            factory.createChiSquareDistribution(0.0);\n+            fail(\"zero degrees of freedom.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateChiSquareDistributionPositive(){\n+        try {\n+            factory.createChiSquareDistribution(1.0);\n+        } catch (IllegalArgumentException ex) {\n+            fail(\"positive degrees of freedom.  IllegalArgumentException is not expected\");\n+        }\n+    }\n+    \n+    public void testCreateFDistributionNegativePositive(){\n+        try {\n+            factory.createFDistribution(-1.0, 1.0);\n+            fail(\"negative degrees of freedom.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateFDistributionZeroPositive(){\n+        try {\n+            factory.createFDistribution(0.0, 1.0);\n+            fail(\"zero degrees of freedom.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateFDistributionPositiveNegative(){\n+        try {\n+            factory.createFDistribution(1.0, -1.0);\n+            fail(\"negative degrees of freedom.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateFDistributionPositiveZero(){\n+        try {\n+            factory.createFDistribution(1.0, 0.0);\n+            fail(\"zero degrees of freedom.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateFDistributionPositivePositive(){\n+        try {\n+            factory.createFDistribution(1.0, 1.0);\n+        } catch (IllegalArgumentException ex) {\n+            fail(\"positive degrees of freedom.  IllegalArgumentException is not expected\");\n+        }\n+    }\n+    \n+    public void testCreateExponentialDistributionNegative(){\n+        try {\n+            factory.createExponentialDistribution(-1.0);\n+            fail(\"negative mean.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateExponentialDistributionZero(){\n+        try {\n+            factory.createExponentialDistribution(0.0);\n+            fail(\"zero mean.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateExponentialDistributionPositive(){\n+        try {\n+            factory.createExponentialDistribution(1.0);\n+        } catch (IllegalArgumentException ex) {\n+            fail(\"positive mean.  IllegalArgumentException is not expected\");\n+        }\n+    }\n+    \n+    public void testCreateGammaDistributionNegativePositive(){\n+        try {\n+            factory.createGammaDistribution(-1.0, 1.0);\n+            fail(\"negative alpha.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateGammaDistributionZeroPositive(){\n+        try {\n+            factory.createGammaDistribution(0.0, 1.0);\n+            fail(\"zero alpha.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateGammaDistributionPositiveNegative(){\n+        try {\n+            factory.createGammaDistribution(1.0, -1.0);\n+            fail(\"negative beta.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateGammaDistributionPositiveZero(){\n+        try {\n+            factory.createGammaDistribution(1.0, 0.0);\n+            fail(\"zero beta.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateGammaDistributionPositivePositive(){\n+        try {\n+            factory.createGammaDistribution(1.0, 1.0);\n+        } catch (IllegalArgumentException ex) {\n+            fail(\"positive alpah and beta.  IllegalArgumentException is not expected\");\n+        }\n+    }\n+    \n+    public void testCreateTDistributionNegative(){\n+        try {\n+            factory.createTDistribution(-1.0);\n+            fail(\"negative degrees of freedom.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateTDistributionZero(){\n+        try {\n+            factory.createTDistribution(0.0);\n+            fail(\"zero degrees of freedom.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateTDistributionPositive(){\n+        try {\n+            factory.createTDistribution(1.0);\n+        } catch (IllegalArgumentException ex) {\n+            fail(\"positive degrees of freedom.  IllegalArgumentException is not expected\");\n+        }\n+    }\n+    \n+    public void testBinomialDistributionNegativePositive(){\n+        try {\n+            factory.createBinomialDistribution(-1, 0.5);\n+            fail(\"negative number of trials.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex ) {\n+        }\n+    }\n+    \n+    public void testBinomialDistributionZeroPositive(){\n+        try {\n+            factory.createBinomialDistribution(0, 0.5);\n+        } catch (IllegalArgumentException ex ) {\n+            fail(\"zero number of trials.  IllegalArgumentException is not expected\");\n+        }\n+    }\n+    \n+    public void testBinomialDistributionPositivePositive(){\n+        try {\n+            factory.createBinomialDistribution(10, 0.5);\n+        } catch (IllegalArgumentException ex ) {\n+            fail(\"positive number of trials.  IllegalArgumentException is not expected\");\n+        }\n+    }\n+    \n+    public void testBinomialDistributionPositiveNegative(){\n+        try {\n+            factory.createBinomialDistribution(10, -0.5);\n+            fail(\"negative probability of success.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex ) {\n+        }\n+    }\n+    \n+    public void testBinomialDistributionPositiveZero(){\n+        try {\n+            factory.createBinomialDistribution(10, 0.0);\n+        } catch (IllegalArgumentException ex ) {\n+            fail(\"zero probability of success.  IllegalArgumentException is not expected\");\n+        }\n+    }\n+    \n+    public void testBinomialDistributionPositiveOne(){\n+        try {\n+            factory.createBinomialDistribution(10, 1.0);\n+        } catch (IllegalArgumentException ex ) {\n+            fail(\"valid probability of success.  IllegalArgumentException is not expected\");\n+        }\n+    }\n+    \n+    public void testBinomialDistributionPositiveTwo(){\n+        try {\n+            factory.createBinomialDistribution(10, 2.0);\n+            fail(\"high probability of success.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex ) {\n+        }\n+    }\n+    \n+    public void testHypergeometricDistributionNegativePositivePositive(){\n+        try {\n+            factory.createHypergeometricDistribution(-1, 10, 10);\n+            fail(\"negative population size.  IllegalArgumentException expected\");\n+        } catch(IllegalArgumentException ex) {\n+        }\n+    }\n+    \n+    public void testHypergeometricDistributionZeroPositivePositive(){\n+        try {\n+            factory.createHypergeometricDistribution(0, 10, 10);\n+            fail(\"zero population size.  IllegalArgumentException expected\");\n+        } catch(IllegalArgumentException ex) {\n+        }\n+    }\n+    \n+    public void testHypergeometricDistributionPositiveNegativePositive(){\n+        try {\n+            factory.createHypergeometricDistribution(20, -1, 10);\n+            fail(\"negative number of successes.  IllegalArgumentException expected\");\n+        } catch(IllegalArgumentException ex) {\n+        }\n+    }\n+    \n+    public void testHypergeometricDistributionPositiveZeroPositive(){\n+        try {\n+            factory.createHypergeometricDistribution(20, 0, 10);\n+        } catch(IllegalArgumentException ex) {\n+            fail(\"valid number of successes.  IllegalArgumentException is not expected\");\n+        }\n+    }\n+    \n+    public void testHypergeometricDistributionPositivePositiveNegative(){\n+        try {\n+            factory.createHypergeometricDistribution(20, 10, -1);\n+            fail(\"negative sample size.  IllegalArgumentException expected\");\n+        } catch(IllegalArgumentException ex) {\n+        }\n+    }\n+    \n+    public void testHypergeometricDistributionPositivePositiveZero(){\n+        try {\n+            factory.createHypergeometricDistribution(20, 10, 0);\n+        } catch(IllegalArgumentException ex) {\n+            fail(\"valid sample size.  IllegalArgumentException is not expected\");\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+import org.apache.commons.math.TestUtils;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:22 $\n+ */\n+public class ExponentialDistributionTest extends TestCase {\n+    private ExponentialDistribution exp;\n+    \n+    /**\n+     * Constructor for ChiSquareDistributionTest.\n+     * @param name\n+     */\n+    public ExponentialDistributionTest(String name) {\n+        super(name);\n+    }\n+\n+    /*\n+     * @see TestCase#setUp()\n+     */\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        exp = DistributionFactory.newInstance().createExponentialDistribution(5.0);\n+    }\n+\n+    /*\n+     * @see TestCase#tearDown()\n+     */\n+    protected void tearDown() throws Exception {\n+        exp = null;\n+        super.tearDown();\n+    }\n+\n+    public void testInverseCummulativeProbability001() {\n+        testValue(.005003, .001);\n+    }\n+    \n+    public void testInverseCummulativeProbability010() {\n+        testValue(0.050252, .010);\n+    }\n+    \n+    public void testInverseCummulativeProbability025() {\n+        testValue(0.126589, .025);\n+    }\n+\n+    public void testInverseCummulativeProbability050() {\n+        testValue(0.256566, .050);\n+    }\n+    \n+    public void testInverseCummulativeProbability100() {\n+        testValue(0.526803, .100);\n+    }\n+\n+    public void testInverseCummulativeProbability999() {\n+        testValue(34.5388, .999);\n+    }\n+    \n+    public void testInverseCummulativeProbability990() {\n+        testValue(23.0259, .990);\n+    }\n+    \n+    public void testInverseCummulativeProbability975() {\n+        testValue(18.4444, .975);\n+    }\n+\n+    public void testInverseCummulativeProbability950() {\n+        testValue(14.9787, .950);\n+    }\n+    \n+    public void testInverseCummulativeProbability900() {\n+        testValue(11.5129, .900);\n+    }\n+\n+    public void testCummulativeProbability001() {\n+        testProbability(0.005003, .001);\n+    }\n+    \n+    public void testCummulativeProbability010() {\n+        testProbability(0.050252, .010);\n+    }\n+    \n+    public void testCummulativeProbability025() {\n+        testProbability(0.126589, .025);\n+    }\n+\n+    public void testCummulativeProbability050() {\n+        testProbability(0.256566, .050);\n+    }\n+    \n+    public void testCummulativeProbability100() {\n+        testProbability(0.526803, .100);\n+    }\n+\n+    public void testCummulativeProbability999() {\n+        testProbability(34.5388, .999);\n+    }\n+    \n+    public void testCummulativeProbability990() {\n+        testProbability(23.0259, .990);\n+    }\n+    \n+    public void testCummulativeProbability975() {\n+        testProbability(18.4444, .975);\n+    }\n+\n+    public void testCummulativeProbability950() {\n+        testProbability(14.9787, .950);\n+    }\n+    \n+    public void testCummulativeProbability900() {\n+        testProbability(11.5129, .900);\n+    }\n+\n+    public void testCummulativeProbabilityNegative() {\n+        testProbability(-1.0, 0.0);\n+    }\n+\n+    public void testCummulativeProbabilityZero() {\n+        testProbability(0.0, 0.0);\n+    }\n+\n+    public void testInverseCummulativeProbabilityNegative() {\n+        testValue(Double.NaN, -1.0);\n+    }\n+\n+    public void testInverseCummulativeProbabilityZero() {\n+        testValue(0.0, 0.0);\n+    }\n+\n+    public void testInverseCummulativeProbabilityOne() {\n+        testValue(Double.POSITIVE_INFINITY, 1.0);\n+    }\n+\n+    public void testInverseCummulativeProbabilityPositive() {\n+        testValue(Double.NaN, 2.0);\n+    }\n+    \n+    public void testCummulativeProbability2() {\n+        double actual = exp.cummulativeProbability(0.25, 0.75);\n+        assertEquals(0.0905214, actual, 10e-4);\n+    }\n+    \n+    private void testProbability(double x, double expected){\n+        double actual = exp.cummulativeProbability(x);\n+        TestUtils.assertEquals(expected, actual, 10e-4);\n+    }\n+    \n+    private void testValue(double expected, double p){\n+        double actual = exp.inverseCummulativeProbability(p);\n+        TestUtils.assertEquals(expected, actual, 10e-4);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/distribution/FDistributionTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:22 $\n+ */\n+public class FDistributionTest extends TestCase {\n+    private FDistribution f;\n+    \n+    /**\n+     * Constructor for ChiSquareDistributionTest.\n+     * @param name\n+     */\n+    public FDistributionTest(String name) {\n+        super(name);\n+    }\n+\n+    /*\n+     * @see TestCase#setUp()\n+     */\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        f = DistributionFactory.newInstance().createFDistribution(5.0, 6.0);\n+    }\n+\n+    /*\n+     * @see TestCase#tearDown()\n+     */\n+    protected void tearDown() throws Exception {\n+        f = null;\n+        super.tearDown();\n+    }\n+\n+    public void testLowerTailProbability(){\n+        testProbability(1.0 / 10.67, .010);\n+        testProbability(1.0 /  6.98, .025);\n+        testProbability(1.0 /  4.95, .050);\n+        testProbability(1.0 /  3.40, .100);\n+    }\n+\n+    public void testUpperTailProbability(){\n+        testProbability(8.75, .990);\n+        testProbability(5.99, .975);\n+        testProbability(4.39, .950);\n+        testProbability(3.11, .900);\n+    }\n+    \n+    public void testLowerTailValues(){\n+        testValue(1.0 / 10.67, .010);\n+        testValue(1.0 /  6.98, .025);\n+        testValue(1.0 /  4.95, .050);\n+        testValue(1.0 /  3.40, .100);\n+    }\n+    \n+    public void testUpperTailValues(){\n+        testValue(8.75, .990);\n+        testValue(5.99, .975);\n+        testValue(4.39, .950);\n+        testValue(3.11, .900);\n+    }\n+    \n+    private void testProbability(double x, double expected){\n+        double actual = f.cummulativeProbability(x);\n+        assertEquals(\"probability for \" + x, expected, actual, 1e-3);\n+    }\n+    \n+    private void testValue(double expected, double p){\n+        double actual = f.inverseCummulativeProbability(p);\n+        assertEquals(\"value for \" + p, expected, actual, 1e-2);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/distribution/GammaDistributionTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.stat.distribution;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:22 $\n+ */\n+public class GammaDistributionTest extends TestCase {\n+    public void testProbabilities(){\n+        testProbability(-1.000, 4.0, 2.0, .0000);\n+        testProbability(15.501, 4.0, 2.0, .9499);\n+        testProbability( 0.504, 4.0, 1.0, .0018);\n+        testProbability(10.011, 1.0, 2.0, .9933);\n+        testProbability( 5.000, 2.0, 2.0, .7127);\n+    }\n+    \n+    public void testValues(){\n+        testValue(15.501, 4.0, 2.0, .9499);\n+        testValue( 0.504, 4.0, 1.0, .0018);\n+        testValue(10.011, 1.0, 2.0, .9933);\n+        testValue( 5.000, 2.0, 2.0, .7127);\n+    }\n+            \n+    private void testProbability(double x, double a, double b, double expected){\n+        double actual = DistributionFactory.newInstance().createGammaDistribution(a, b).cummulativeProbability(x);\n+        assertEquals(\"probability for \" + x, expected, actual, 10e-4);\n+    }\n+\n+    private void testValue(double expected, double a, double b, double p){\n+        double actual = DistributionFactory.newInstance().createGammaDistribution(a, b).inverseCummulativeProbability(p);\n+        assertEquals(\"critical value for \" + p, expected, actual, 10e-4);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.stat.distribution;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:22 $\n+ */\n+public class HypergeometricDistributionTest extends TestCase {\n+    private HypergeometricDistribution h;\n+    \n+    /**\n+     * Constructor for ChiSquareDistributionTest.\n+     * @param name\n+     */\n+    public HypergeometricDistributionTest(String name) {\n+        super(name);\n+    }\n+\n+    /*\n+     * @see TestCase#setUp()\n+     */\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        h = DistributionFactory.newInstance().createHypergeometricDistribution(10, 5, 5);\n+    }\n+\n+    /*\n+     * @see TestCase#tearDown()\n+     */\n+    protected void tearDown() throws Exception {\n+        h = null;\n+        super.tearDown();\n+    }\n+\n+    public void testInverseCummulativeProbability001() {\n+        testValue(-1, .001);\n+    }\n+    \n+    public void testInverseCumulativeProbability010() {\n+        testValue(0, .010);\n+    }\n+    \n+    public void testInverseCumulativeProbability025() {\n+        testValue(0, .025);\n+    }\n+\n+    public void testInverseCumulativeProbability050() {\n+        testValue(0, .050);\n+    }\n+    \n+    public void testInverseCumulativeProbability100() {\n+        testValue(0, .100);\n+    }\n+\n+    public void testInverseCummulativeProbability999() {\n+        testValue(4, .999);\n+    }\n+    \n+    public void testInverseCumulativeProbability990() {\n+        testValue(3, .990);\n+    }\n+    \n+    public void testInverseCumulativeProbability975() {\n+        testValue(3, .975);\n+    }\n+\n+    public void testInverseCumulativeProbability950() {\n+        testValue(3, .950);\n+    }\n+    \n+    public void testInverseCumulativeProbability900() {\n+        testValue(3, .900);\n+    }\n+\n+    public void testCummulativeProbability0() {\n+        testProbability(0, .00400);\n+    }\n+\n+    public void testCummulativeProbability1() {\n+        testProbability(1, .10318);\n+    }\n+    \n+    public void testCumulativeProbability2() {\n+        testProbability(2, .50000);\n+    }\n+    \n+    public void testCumulativeProbability3() {\n+        testProbability(3, .89683);\n+    }\n+\n+    public void testCumulativeProbability4() {\n+        testProbability(4, .99603);\n+    }\n+    \n+    public void testCumulativeProbability5() {\n+        testProbability(5, 1.00000);\n+    }\n+\n+    private void testProbability(int x, double expected){\n+        double actual = h.cummulativeProbability(x);\n+        assertEquals(expected, actual, 10e-4);\n+    }\n+    \n+    private void testValue(int expected, double p){\n+        int actual = h.inverseCummulativeProbability(p);\n+        assertEquals(expected, actual);\n+        assertTrue(h.cummulativeProbability(actual) <= p);\n+        assertTrue(h.cummulativeProbability(actual + 1) >= p);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/distribution/TDistributionTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:22 $\n+ */\n+public class TDistributionTest extends TestCase {\n+    private TDistribution t;\n+    \n+    /**\n+     * Constructor for ChiSquareDistributionTest.\n+     * @param name\n+     */\n+    public TDistributionTest(String name) {\n+        super(name);\n+    }\n+\n+    /*\n+     * @see TestCase#setUp()\n+     */\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        t = DistributionFactory.newInstance().createTDistribution(5.0);\n+    }\n+\n+    /*\n+     * @see TestCase#tearDown()\n+     */\n+    protected void tearDown() throws Exception {\n+        t = null;\n+        super.tearDown();\n+    }\n+\n+    public void testInverseCummulativeProbability001() {\n+        testValue(-5.893, .001);\n+    }\n+    \n+    public void testInverseCumulativeProbability010() {\n+        testValue(-3.365, .010);\n+    }\n+    \n+    public void testInverseCumulativeProbability025() {\n+        testValue(-2.571, .025);\n+    }\n+\n+    public void testInverseCumulativeProbability050() {\n+        testValue(-2.015, .050);\n+    }\n+    \n+    public void testInverseCumulativeProbability100() {\n+        testValue(-1.476, .100);\n+    }\n+\n+    public void testInverseCummulativeProbability999() {\n+        testValue(5.893, .999);\n+    }\n+    \n+    public void testInverseCumulativeProbability990() {\n+        testValue(3.365, .990);\n+    }\n+    \n+    public void testInverseCumulativeProbability975() {\n+        testValue(2.571, .975);\n+    }\n+\n+    public void testInverseCumulativeProbability950() {\n+        testValue(2.015, .950);\n+    }\n+    \n+    public void testInverseCumulativeProbability900() {\n+        testValue(1.476, .900);\n+    }\n+\n+    public void testCummulativeProbability001() {\n+        testProbability(-5.893, .001);\n+    }\n+    \n+    public void testCumulativeProbability010() {\n+        testProbability(-3.365, .010);\n+    }\n+    \n+    public void testCumulativeProbability025() {\n+        testProbability(-2.571, .025);\n+    }\n+\n+    public void testCumulativeProbability050() {\n+        testProbability(-2.015, .050);\n+    }\n+    \n+    public void testCumulativeProbability100() {\n+        testProbability(-1.476, .100);\n+    }\n+\n+    public void testCummulativeProbability999() {\n+        testProbability(5.893, .999);\n+    }\n+    \n+    public void testCumulativeProbability990() {\n+        testProbability(3.365, .990);\n+    }\n+    \n+    public void testCumulativeProbability975() {\n+        testProbability(2.571, .975);\n+    }\n+\n+    public void testCumulativeProbability950() {\n+        testProbability(2.015, .950);\n+    }\n+    \n+    public void testCumulativeProbability900() {\n+        testProbability(1.476, .900);\n+    }\n+    \n+    private void testProbability(double x, double expected){\n+        double actual = t.cummulativeProbability(x);\n+        assertEquals(expected, actual, 10e-4);\n+    }\n+    \n+    private void testValue(double expected, double p){\n+        double actual = t.inverseCummulativeProbability(p);\n+        assertEquals(expected, actual, 10e-4);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.linear;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test cases for the {@link RealMatrixImpl} class.\n+ *\n+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:19 $\n+ */\n+\n+public final class RealMatrixImplTest extends TestCase {\n+    \n+    private double[][] testData = { {1d,2d,3d}, {2d,5d,3d}, {1d,0d,8d} };\n+    private double[][] testDataPlus2 = { {3d,4d,5d}, {4d,7d,5d}, {3d,2d,10d} };\n+    private double[][] testDataMinus = { {-1d,-2d,-3d}, {-2d,-5d,-3d}, \n+       {-1d,0d,-8d} };\n+    private double[] testDataRow1 = {1d,2d,3d};\n+    private double[] testDataCol3 = {3d,3d,8d};\n+    private double[][] testDataInv = \n+        { {-40d,16d,9d}, {13d,-5d,-3d}, {5d,-2d,-1d} };\n+    private double[][] preMultTest = {{8,12,33}};\n+    private double[][] testData2 ={ {1d,2d,3d}, {2d,5d,3d}};\n+    private double[][] testData2T = { {1d,2d}, {2d,5d}, {3d,3d}};\n+    private double[][] testDataPlusInv = \n+        { {-39d,18d,12d}, {15d,0d,0d}, {6d,-2d,7d} };\n+    private double[][] id = { {1d,0d,0d}, {0d,1d,0d}, {0d,0d,1d} };\n+    private double[][] luData = { {2d,3d,3d}, {0d,5d,7d}, {6d,9d,8d} };\n+    private double[][] singular = { {2d,3d}, {2d,3d} };\n+    private double[][] bigSingular = {{1d,2d,3d,4d}, {2d,5d,3d,4d},\n+        {7d,3d,256d,1930d}, {3d,7d,6d,8d}}; // 4th row = 1st + 2nd\n+    private double[][] detData = { {1d,2d,3d}, {4d,5d,6d}, {7d,8d,10d} };\n+    private double[] testVector = {1,2,3};\n+    private double[] testVector2 = {1,2,3,4};\n+    private double entryTolerance = 10E-16;\n+    private double normTolerance = 10E-14;\n+    \n+    public RealMatrixImplTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() {\n+        \n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(RealMatrixImplTest.class);\n+        suite.setName(\"RealMatrixImpl Tests\");\n+        return suite;\n+    }\n+    \n+    /** test dimensions */\n+    public void testDimensions() {\n+        RealMatrixImpl m = new RealMatrixImpl(testData);\n+        RealMatrixImpl m2 = new RealMatrixImpl(testData2);\n+        assertEquals(\"testData row dimension\",3,m.getRowDimension());\n+        assertEquals(\"testData column dimension\",3,m.getColumnDimension());\n+        assertTrue(\"testData is square\",m.isSquare());\n+        assertEquals(\"testData2 row dimension\",m2.getRowDimension(),2);\n+        assertEquals(\"testData2 column dimension\",m2.getColumnDimension(),3);\n+        assertTrue(\"testData2 is not square\",!m2.isSquare());\n+        RealMatrixImpl m3 = new RealMatrixImpl();\n+        m3.setData(testData);\n+    } \n+    \n+    /** test copy functions */\n+    public void testCopyFunctions() {\n+        RealMatrixImpl m = new RealMatrixImpl(testData);\n+        RealMatrixImpl m2 = new RealMatrixImpl(testData2);\n+        m2.setData(m.getData());\n+        assertClose(\"getData\",m2,m,entryTolerance);\n+        // no dangling reference...\n+        m2.setEntry(1,1,2000d);\n+        RealMatrixImpl m3 = new RealMatrixImpl(testData);\n+        assertClose(\"no getData side effect\",m,m3,entryTolerance);\n+        m3 = (RealMatrixImpl) m.copy();\n+        double[][] stompMe = {{1d,2d,3d}};\n+        m3.setDataRef(stompMe);\n+        assertClose(\"no copy side effect\",m,new RealMatrixImpl(testData),\n+            entryTolerance);\n+    }           \n+    \n+    /** test add */\n+    public void testAdd() {\n+        RealMatrixImpl m = new RealMatrixImpl(testData);\n+        RealMatrixImpl mInv = new RealMatrixImpl(testDataInv);\n+        RealMatrixImpl mPlusMInv = (RealMatrixImpl)m.add(mInv);\n+        double[][] sumEntries = mPlusMInv.getData();\n+        for (int row = 0; row < m.getRowDimension(); row++) {\n+            for (int col = 0; col < m.getColumnDimension(); col++) {\n+                assertEquals(\"sum entry entry\",\n+                    testDataPlusInv[row][col],sumEntries[row][col],\n+                        entryTolerance);\n+            }\n+        }    \n+    }\n+    \n+    /** test add failure */\n+    public void testAddFail() {\n+        RealMatrixImpl m = new RealMatrixImpl(testData);\n+        RealMatrixImpl m2 = new RealMatrixImpl(testData2);\n+        try {\n+            RealMatrixImpl mPlusMInv = (RealMatrixImpl)m.add(m2);\n+            fail(\"IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    /** test norm */\n+    public void testNorm() {\n+        RealMatrixImpl m = new RealMatrixImpl(testData);\n+        RealMatrixImpl m2 = new RealMatrixImpl(testData2);\n+        assertEquals(\"testData norm\",14d,m.getNorm(),entryTolerance);\n+        assertEquals(\"testData2 norm\",7d,m2.getNorm(),entryTolerance);\n+    }\n+    \n+     /** test m-n = m + -n */\n+    public void testPlusMinus() {\n+        RealMatrixImpl m = new RealMatrixImpl(testData);\n+        RealMatrixImpl m2 = new RealMatrixImpl(testDataInv);\n+        assertClose(\"m-n = m + -n\",m.subtract(m2),\n+            m2.scalarMultiply(-1d).add(m),entryTolerance);        \n+        try {\n+            RealMatrix a = m.subtract(new RealMatrixImpl(testData2));\n+            fail(\"Expecting illegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }      \n+    }\n+    \n+    /** test multiply */\n+     public void testMultiply() {\n+        RealMatrixImpl m = new RealMatrixImpl(testData);\n+        RealMatrixImpl mInv = new RealMatrixImpl(testDataInv);\n+        RealMatrixImpl identity = new RealMatrixImpl(id);\n+        RealMatrixImpl m2 = new RealMatrixImpl(testData2);\n+        assertClose(\"inverse multiply\",m.multiply(mInv),\n+            identity,entryTolerance);\n+        assertClose(\"inverse multiply\",mInv.multiply(m),\n+            identity,entryTolerance);\n+        assertClose(\"identity multiply\",m.multiply(identity),\n+            m,entryTolerance);\n+        assertClose(\"identity multiply\",identity.multiply(mInv),\n+            mInv,entryTolerance);\n+        assertClose(\"identity multiply\",m2.multiply(identity),\n+            m2,entryTolerance); \n+        try {\n+            RealMatrix a = m.multiply(new RealMatrixImpl(bigSingular));\n+            fail(\"Expecting illegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }      \n+    }   \n+        \n+    /** test isSingular */\n+    public void testIsSingular() {\n+        RealMatrixImpl m = new RealMatrixImpl(singular);\n+        assertTrue(\"singular\",m.isSingular());\n+        m = new RealMatrixImpl(bigSingular);\n+        assertTrue(\"big singular\",m.isSingular());\n+        m = new RealMatrixImpl(id);\n+        assertTrue(\"identity nonsingular\",!m.isSingular());\n+        m = new RealMatrixImpl(testData);\n+        assertTrue(\"testData nonsingular\",!m.isSingular());\n+    }\n+        \n+    /** test inverse */\n+    public void testInverse() {\n+        RealMatrixImpl m = new RealMatrixImpl(testData);\n+        RealMatrix mInv = new RealMatrixImpl(testDataInv);\n+        assertClose(\"inverse\",mInv,m.inverse(),normTolerance);\n+        assertClose(\"inverse^2\",m,m.inverse().inverse(),10E-12);\n+    }\n+    \n+    /** test solve */\n+    public void testSolve() {\n+        RealMatrixImpl m = new RealMatrixImpl(testData);\n+        RealMatrix mInv = new RealMatrixImpl(testDataInv);\n+        // being a bit slothful here -- actually testing that X = A^-1 * B\n+        assertClose(\"inverse-operate\",mInv.operate(testVector),\n+            m.solve(testVector),normTolerance);\n+        try {\n+            double[] x = m.solve(testVector2);\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }       \n+        RealMatrix bs = new RealMatrixImpl(bigSingular);\n+        try {\n+            RealMatrix a = bs.solve(bs);\n+            fail(\"Expecting illegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            RealMatrix a = m.solve(bs);\n+            fail(\"Expecting illegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            RealMatrix a = (new RealMatrixImpl(testData2)).solve(bs);\n+            fail(\"Expecting illegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        } \n+        try {\n+            (new RealMatrixImpl(testData2)).LUDecompose();\n+            fail(\"Expecting illegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }  \n+    }\n+    \n+    /** test determinant */\n+    public void testDeterminant() {       \n+        RealMatrix m = new RealMatrixImpl(bigSingular);\n+        assertEquals(\"singular determinant\",0,m.getDeterminant(),0);\n+        m = new RealMatrixImpl(detData);\n+        assertEquals(\"nonsingular test\",-3d,m.getDeterminant(),normTolerance);\n+        try {\n+            double a = new RealMatrixImpl(testData2).getDeterminant();\n+            fail(\"Expecting illegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }      \n+    }\n+    \n+    /** test trace */\n+    public void testTrace() {\n+        RealMatrix m = new RealMatrixImpl(id);\n+        assertEquals(\"identity trace\",3d,m.getTrace(),entryTolerance);\n+        m = new RealMatrixImpl(testData2);\n+        try {\n+            double x = m.getTrace();\n+            fail(\"Expecting illegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }      \n+    }\n+    \n+    /** test sclarAdd */\n+    public void testScalarAdd() {\n+        RealMatrix m = new RealMatrixImpl(testData);\n+        assertClose(\"scalar add\",new RealMatrixImpl(testDataPlus2),\n+            m.scalarAdd(2d),entryTolerance);\n+    }\n+                    \n+    /** test operate */\n+    public void testOperate() {\n+        RealMatrix m = new RealMatrixImpl(id);\n+        double[] x = m.operate(testVector);\n+        assertClose(\"identity operate\",testVector,x,entryTolerance);\n+        m = new RealMatrixImpl(bigSingular);\n+        try {\n+            x = m.operate(testVector);\n+            fail(\"Expecting illegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }      \n+    }\n+    \n+    /** test transpose */\n+    public void testTranspose() {\n+        RealMatrix m = new RealMatrixImpl(testData); \n+        assertClose(\"inverse-transpose\",m.inverse().transpose(),\n+            m.transpose().inverse(),normTolerance);\n+        m = new RealMatrixImpl(testData2);\n+        RealMatrix mt = new RealMatrixImpl(testData2T);\n+        assertClose(\"transpose\",mt,m.transpose(),normTolerance);\n+    }\n+    \n+    /** test preMultiply */\n+    public void testPremultiply() {\n+        RealMatrix m = new RealMatrixImpl(testData);\n+        RealMatrix mp = new RealMatrixImpl(preMultTest);\n+        assertClose(\"premultiply\",m.preMultiply(testVector),mp,normTolerance);\n+        m = new RealMatrixImpl(bigSingular);\n+        try {\n+            RealMatrix x = m.preMultiply(testVector);\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testGetVectors() {\n+        RealMatrix m = new RealMatrixImpl(testData);\n+        assertClose(\"get row\",m.getRow(1),testDataRow1,entryTolerance);\n+        assertClose(\"get col\",m.getColumn(3),testDataCol3,entryTolerance);\n+        try {\n+            double[] x = m.getRow(10);\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            double[] x = m.getColumn(-1);\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testEntryMutators() {\n+        RealMatrix m = new RealMatrixImpl(testData);\n+        assertEquals(\"get entry\",m.getEntry(1,2),2d,entryTolerance);\n+        m.setEntry(1,2,100d);\n+        assertEquals(\"get entry\",m.getEntry(1,2),100d,entryTolerance);\n+        try {\n+            double x = m.getEntry(0,2);\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            m.setEntry(1,4,200d);\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+        \n+    \n+    //--------------- -----------------Private methods\n+        \n+    /** verifies that two matrices are close (1-norm) */              \n+    private void assertClose(String msg, RealMatrix m, RealMatrix n,\n+        double tolerance) {\n+        assertTrue(msg,m.subtract(n).getNorm() < tolerance);\n+    }\n+    \n+    /** verifies that two vectors are close (sup norm) */\n+    private void assertClose(String msg, double[] m, double[] n,\n+        double tolerance) {\n+        if (m.length != n.length) {\n+            fail(\"vectors not same length\");\n+        }\n+        for (int i = 0; i < m.length; i++) {\n+            assertEquals(msg + \" \" +  i + \" elements differ\", \n+                m[i],n[i],tolerance);\n+        }\n+    }\n+    \n+    /** Useful for debugging */\n+    private void dumpMatrix(RealMatrix m) {\n+          for (int i = 0; i < m.getRowDimension(); i++) {\n+              String os = \"\";\n+              for (int j = 0; j < m.getColumnDimension(); j++) {\n+                  os += m.getEntry(i+1, j+1) + \" \";\n+              }\n+              System.out.println(os);\n+          }\n+    }\n+        \n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.random;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import java.io.File;\n+import java.net.URL;\n+\n+import org.apache.commons.math.stat.Univariate;\n+import org.apache.commons.math.stat.UnivariateImpl;\n+\n+/**\n+ * Test cases for the EmpiricalDistribution class\n+ *\n+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:22 $\n+ */\n+\n+public final class EmpiricalDistributionTest extends TestCase {\n+\n+    private EmpiricalDistribution empiricalDistribution = null;\n+    private File file = null;\n+    \n+    public EmpiricalDistributionTest(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp() {\n+        empiricalDistribution = new EmpiricalDistributionImpl(100);\n+        URL url = getClass().getResource(\"testData.txt\");\n+        file = new File(url.getFile());\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(EmpiricalDistributionTest.class);\n+        suite.setName(\"EmpiricalDistribution Tests\");\n+        return suite;\n+    }\n+\n+    /**\n+     * Test EmpiricalDistrbution.load() using sample data file.<br> \n+     * Check that the sampleCount, mu and sigma match data in \n+     * the sample data file.\n+     */\n+    public void testLoad() throws Exception {\n+        empiricalDistribution.load(file);   \n+        // testData File has 10000 values, with mean ~ 5.0, std dev ~ 1\n+        // Make sure that loaded distribution matches this\n+        assertEquals(empiricalDistribution.getSampleStats().getN(),1000,10E-7);\n+        //TODO: replace with statistical tests\n+        assertEquals\n+            (empiricalDistribution.getSampleStats().getMean(),\n+                5.069831575018909,10E-7);\n+        assertEquals\n+          (empiricalDistribution.getSampleStats().getStandardDeviation(),\n+                1.0173699343977738,10E-7);\n+    }\n+    \n+    /** \n+      * Generate 1000 random values and make sure they look OK.<br>\n+      * Note that there is a non-zero (but very small) probability that\n+      * these tests will fail even if the code is working as designed.\n+      */\n+    public void testNext() throws Exception {\n+        tstGen(0.1);\n+    }\n+    \n+    /**\n+      * Make sure exception thrown if digest getNext is attempted\n+      * before loading empiricalDistribution.\n+     */\n+    public void testNexFail() {\n+        try {\n+            empiricalDistribution.getNextValue();\n+            fail(\"Expecting IllegalStateException\");\n+        } catch (IllegalStateException ex) {;}\n+    }\n+    \n+    /**\n+     * Make sure we can handle a grid size that is too fine\n+     */\n+    public void testGridTooFine() throws Exception {\n+        empiricalDistribution = new EmpiricalDistributionImpl(10000);\n+        tstGen(0.1);    \n+    }\n+    \n+    /**\n+     * How about too fat?\n+     */\n+    public void testGridTooFat() throws Exception {\n+        empiricalDistribution = new EmpiricalDistributionImpl(1);\n+        tstGen(5); // ridiculous tolerance; but ridiculous grid size\n+                   // really just checking to make sure we do not bomb\n+    }\n+    \n+    private void tstGen(double tolerance)throws Exception {\n+        empiricalDistribution.load(file);   \n+        Univariate stats = new UnivariateImpl();\n+        for (int i = 1; i < 1000; i++) {\n+            stats.addValue(empiricalDistribution.getNextValue());\n+        }\n+        //TODO: replace these with statistical tests -- refactor as necessary\n+        assertEquals(\"mean\", stats.getMean(),5.069831575018909,tolerance);\n+        assertEquals\n+         (\"std dev\", stats.getStandardDeviation(),1.0173699343977738,tolerance);\n+    }\n+        \n+        \n+       \n+        \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/random/RandomDataTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.random;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import java.security.NoSuchProviderException;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.HashSet;\n+\n+import org.apache.commons.math.stat.Frequency;\n+import org.apache.commons.math.stat.TestStatisticImpl;\n+import org.apache.commons.math.stat.Univariate;\n+import org.apache.commons.math.stat.UnivariateImpl;\n+\n+/**\n+ * Test cases for the RandomData class.\n+ *\n+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:22 $\n+ */\n+\n+public final class RandomDataTest extends TestCase {\n+\n+    public RandomDataTest(String name) {\n+        super(name);\n+    }\n+\n+    private long smallSampleSize = 1000;\n+    private double[] expected = {250,250,250,250};\n+    private int largeSampleSize = 10000;\n+    private int tolerance = 50;\n+    private String[] hex = \n+        {\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"}; \n+    private RandomDataImpl randomData = new RandomDataImpl(); \n+    private TestStatisticImpl testStatistic = new TestStatisticImpl();\n+    \n+    \n+    public void setUp() { \n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(RandomDataTest.class);\n+        suite.setName(\"RandomData Tests\");\n+        return suite;\n+    }\n+\n+    /** test dispersion and failure modes for nextInt() */\n+    public void testNextInt() {\n+        try {\n+            int x = randomData.nextInt(4,3);\n+            fail(\"IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        Frequency freq = new Frequency();\n+        int value = 0;\n+        for (int i=0;i<smallSampleSize;i++) {\n+            value = randomData.nextInt(0,3);\n+            assertTrue(\"nextInt range\",(value >= 0) && (value <= 3));\n+            freq.addValue(value);  \n+        }\n+        double[] observed = new double[4];\n+        for (int i=0; i<4; i++) {\n+            String iString = new Integer(i).toString();\n+            observed[i] = freq.getCount(iString);\n+        } \n+        \n+        /* Use ChiSquare dist with df = 4-1 = 3, alpha = .001\n+         * Change to 11.34 for alpha = .01\n+         */\n+        assertTrue(\"chi-square test -- will fail about 1 in 1000 times\",\n+            testStatistic.chiSquare(expected,observed) < 16.27);    \n+    }\n+    \n+    /** test dispersion and failure modes for nextLong() */\n+    public void testNextLong() {\n+       try {\n+            long x = randomData.nextLong(4,3);\n+            fail(\"IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+       Frequency freq = new Frequency();\n+       long value = 0;\n+        for (int i=0;i<smallSampleSize;i++) {\n+            value = randomData.nextLong(0,3);\n+            assertTrue(\"nextInt range\",(value >= 0) && (value <= 3));\n+            freq.addValue(value);  \n+        }\n+        double[] observed = new double[4];\n+        for (int i=0; i<4; i++) {\n+            String iString = new Integer(i).toString();\n+            observed[i] = freq.getCount(iString);\n+        } \n+        \n+        /* Use ChiSquare dist with df = 4-1 = 3, alpha = .001\n+         * Change to 11.34 for alpha = .01\n+         */\n+        assertTrue(\"chi-square test -- will fail about 1 in 1000 times\",\n+            testStatistic.chiSquare(expected,observed) < 16.27);    \n+    }\n+    \n+    /** test dispersion and failure modes for nextSecureLong() */\n+    public void testNextSecureLong() {\n+        try {\n+            long x = randomData.nextSecureLong(4,3);\n+            fail(\"IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        Frequency freq = new Frequency();\n+        long value = 0;\n+        for (int i=0;i<smallSampleSize;i++) {\n+            value = randomData.nextSecureLong(0,3);\n+            assertTrue(\"nextInt range\",(value >= 0) && (value <= 3));\n+            freq.addValue(value);  \n+        }\n+        double[] observed = new double[4];\n+        for (int i=0; i<4; i++) {\n+            String iString = new Integer(i).toString();\n+            observed[i] = freq.getCount(iString);\n+        } \n+        \n+        /* Use ChiSquare dist with df = 4-1 = 3, alpha = .001\n+         * Change to 11.34 for alpha = .01\n+         */\n+        assertTrue(\"chi-square test -- will fail about 1 in 1000 times\",\n+            testStatistic.chiSquare(expected,observed) < 16.27);    \n+    }\n+    \n+    /** test dispersion and failure modes for nextSecureInt() */\n+    public void testNextSecureInt() {\n+        try {\n+            long x = randomData.nextSecureInt(4,3);\n+            fail(\"IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        Frequency freq = new Frequency();\n+        int value = 0;\n+        for (int i=0;i<smallSampleSize;i++) {\n+            value = randomData.nextSecureInt(0,3);\n+            assertTrue(\"nextInt range\",(value >= 0) && (value <= 3));\n+            freq.addValue(value);  \n+        }\n+        double[] observed = new double[4];\n+        for (int i=0; i<4; i++) {\n+            String iString = new Integer(i).toString();\n+            observed[i] = freq.getCount(iString);\n+        } \n+        \n+        /* Use ChiSquare dist with df = 4-1 = 3, alpha = .001\n+         * Change to 11.34 for alpha = .01\n+         */\n+        assertTrue(\"chi-square test -- will fail about 1 in 1000 times\",\n+            testStatistic.chiSquare(expected,observed) < 16.27);    \n+    }\n+    \n+    /** \n+     * Make sure that empirical distribution of random Poisson(4)'s \n+     * has P(X <= 5) close to actual cumulative Poisson probablity\n+     * and that nextPoisson fails when mean is non-positive\n+     * TODO: replace with statistical test, adding test stat to TestStatistic\n+     */\n+    public void testNextPoisson() {\n+        try {\n+            long x = randomData.nextPoisson(0);\n+            fail(\"zero mean -- expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        Frequency f = new Frequency();\n+        long v = 0;\n+        for (int i = 0; i<largeSampleSize; i++) {\n+            try {\n+                f.addValue(randomData.nextPoisson(4.0d));\n+            } catch (Exception ex) {\n+                fail(ex.getMessage());\n+            }\n+        }\n+        long cumFreq = f.getCount(\"0\") + f.getCount(\"1\") + f.getCount(\"2\") + \n+                        f.getCount(\"3\") + f.getCount(\"4\") + f.getCount(\"5\");\n+        long sumFreq = f.getSumFreq();\n+        double cumPct = \n+            new Double(cumFreq).doubleValue()/new Double(sumFreq).doubleValue();\n+        assertEquals(\"cum Poisson(4)\",cumPct,0.7851,0.2);\n+        try {\n+            long x = randomData.nextPoisson(-1);\n+            fail(\"negative mean supplied -- IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            long x = randomData.nextPoisson(0);\n+            fail(\"0 mean supplied -- IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        \n+    }\n+    \n+    /** test dispersion and failute modes for nextHex() */\n+    public void testNextHex() {\n+        try {\n+            String x = randomData.nextHexString(-1);\n+            fail(\"negative length supplied -- IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            String x = randomData.nextHexString(0);\n+            fail(\"zero length supplied -- IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        String hexString = randomData.nextHexString(3);\n+        if (hexString.length() != 3) {\n+                fail(\"incorrect length for generated string\");\n+        }\n+        hexString = randomData.nextHexString(1);\n+        if (hexString.length() != 1) {\n+                fail(\"incorrect length for generated string\");\n+        }\n+        try {\n+            hexString = randomData.nextHexString(0);\n+            fail(\"zero length requested -- expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        if (hexString.length() != 1) {\n+                fail(\"incorrect length for generated string\");\n+        }      \n+        Frequency f = new Frequency();\n+        for (int i = 0; i < smallSampleSize; i++) {\n+            hexString = randomData.nextHexString(100);\n+            if (hexString.length() != 100) {\n+                fail(\"incorrect length for generated string\");\n+            }\n+            for (int j = 0; j < hexString.length(); j++) {\n+                f.addValue(hexString.substring(j,j+1));\n+            }\n+        }\n+        double[] expected = new double[16];\n+        double[] observed = new double[16];\n+        for (int i = 0; i < 16; i++) {\n+            expected[i] = (double)smallSampleSize*100/(double)16;\n+            observed[i] = f.getCount(hex[i]);\n+        }\n+        /* Use ChiSquare dist with df = 16-1 = 15, alpha = .001\n+         * Change to 30.58 for alpha = .01\n+         */\n+        assertTrue(\"chi-square test -- will fail about 1 in 1000 times\",\n+            testStatistic.chiSquare(expected,observed) < 37.70);    \n+    }\n+    \n+    /** test dispersion and failute modes for nextHex() */\n+    public void testNextSecureHex() {\n+        try {\n+            String x = randomData.nextSecureHexString(-1);\n+            fail(\"negative length -- IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            String x = randomData.nextSecureHexString(0);\n+            fail(\"zero length -- IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        String hexString = randomData.nextSecureHexString(3);\n+        if (hexString.length() != 3) {\n+                fail(\"incorrect length for generated string\");\n+        }\n+        hexString = randomData.nextSecureHexString(1);\n+        if (hexString.length() != 1) {\n+                fail(\"incorrect length for generated string\");\n+        }\n+        try {\n+            hexString = randomData.nextSecureHexString(0);\n+            fail(\"zero length requested -- expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        if (hexString.length() != 1) {\n+                fail(\"incorrect length for generated string\");\n+        }      \n+        Frequency f = new Frequency();\n+        for (int i = 0; i < smallSampleSize; i++) {\n+            hexString = randomData.nextSecureHexString(100);\n+            if (hexString.length() != 100) {\n+                fail(\"incorrect length for generated string\");\n+            }\n+            for (int j = 0; j < hexString.length(); j++) {\n+                f.addValue(hexString.substring(j,j+1));\n+            }\n+        }\n+        double[] expected = new double[16];\n+        double[] observed = new double[16];\n+        for (int i = 0; i < 16; i++) {\n+            expected[i] = (double)smallSampleSize*100/(double)16;\n+            observed[i] = f.getCount(hex[i]);\n+        }\n+        /* Use ChiSquare dist with df = 16-1 = 15, alpha = .001\n+         * Change to 30.58 for alpha = .01\n+         */\n+        assertTrue(\"chi-square test -- will fail about 1 in 1000 times\",\n+            testStatistic.chiSquare(expected,observed) < 37.70);    \n+    }\n+    \n+    /** test failure modes and dispersion of nextUniform() */  \n+    public void testNextUniform() {    \n+        try {\n+            double x = randomData.nextUniform(4,3);\n+            fail(\"IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            double x = randomData.nextUniform(3,3);\n+            fail(\"IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        double[] expected = new double[] {500,500};\n+        double[] observed = new double[] {0,0};\n+        double lower = -1d;\n+        double upper = 20d;\n+        double midpoint = (lower + upper)/2d;\n+        double result = 0;\n+        for (int i = 0; i < 1000; i++) {\n+            result = randomData.nextUniform(lower,upper);\n+            if ((result == lower) || (result == upper)) {\n+                fail(\"generated value equal to an endpoint: \" + result);\n+            } \n+            if (result < midpoint) {\n+                observed[0]++;\n+            } else {\n+                observed[1]++;\n+            }\n+        }\n+        /* Use ChiSquare dist with df = 2-1 = 1, alpha = .001\n+         * Change to 6.64 for alpha = .01\n+         */\n+        assertTrue(\"chi-square test -- will fail about 1 in 1000 times\",\n+            testStatistic.chiSquare(expected,observed) < 10.83);  \n+    }\n+    \n+    /** test failure modes and distribution of nextGaussian() */  \n+    public void testNextGaussian() { \n+        try {\n+            double x = randomData.nextGaussian(0,0);\n+            fail(\"zero sigma -- IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        Univariate u = new UnivariateImpl();\n+        for (int i = 0; i<largeSampleSize; i++) {\n+            u.addValue(randomData.nextGaussian(0,1));\n+        }\n+        double xbar = u.getMean();\n+        double s = u.getStandardDeviation();\n+        double n = (double) u.getN(); \n+        /* t-test at .001-level TODO: replace with externalized t-test, with\n+         * test statistic defined in TestStatistic\n+         */\n+        assertTrue(Math.abs(xbar)/(s/Math.sqrt(n))< 3.29);\n+    }\n+    \n+    /** test failure modes and distribution of nextExponential() */  \n+    public void testNextExponential() {\n+        try {\n+            double x = randomData.nextExponential(-1);\n+            fail(\"negative mean -- expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        assertEquals(\"0 mean\", 0,randomData.nextExponential(0),10E-8); \n+        long cumFreq = 0;\n+        double v = 0;\n+        for (int i = 0; i < largeSampleSize; i++) {\n+            v = randomData.nextExponential(1);\n+            assertTrue(\"exponential deviate postive\", v > 0);\n+            if (v < 2) cumFreq++;\n+        }\n+        /* TODO: Replace with a statistical test, with statistic added to\n+         * TestStatistic.  Check below compares observed cumulative distribution\n+         * evaluated at 2 with exponential CDF \n+         */\n+        assertEquals(\"exponential cumulative distribution\",\n+            (double)cumFreq/(double)largeSampleSize,0.8646647167633873,.2);\n+    } \n+    \n+    /** test reseeding, algorithm/provider games */\n+    public void testConfig() throws NoSuchProviderException, \n+      NoSuchAlgorithmException{\n+        randomData.reSeed(1000);\n+        double v = randomData.nextUniform(0,1);\n+        randomData.reSeed();\n+        assertTrue(\"different seeds\", \n+            Math.abs(v - randomData.nextUniform(0,1)) > 10E-12);\n+        randomData.reSeed(1000);\n+        assertEquals(\"same seeds\",v,randomData.nextUniform(0,1),10E-12);\n+        randomData.reSeedSecure(1000);\n+        String hex = randomData.nextSecureHexString(40);\n+        randomData.reSeedSecure();\n+        assertTrue(\"different seeds\",\n+            !hex.equals(randomData.nextSecureHexString(40)));\n+        randomData.reSeedSecure(1000);\n+        assertTrue(\"same seeds\",\n+            !hex.equals(randomData.nextSecureHexString(40))); \n+        \n+        /* remove this test back soon,\n+         * since it takes about 4 seconds */\n+         \n+        randomData.setSecureAlgorithm(\"SHA1PRNG\",\"SUN\");\n+        assertTrue(\"different seeds\",\n+            !hex.equals(randomData.nextSecureHexString(40)));\n+        try {\n+            randomData.setSecureAlgorithm(\"NOSUCHTHING\",\"SUN\");\n+            fail(\"expecting NoSuchAlgorithmException\");\n+        } catch (NoSuchAlgorithmException ex) {\n+            ;\n+        }\n+        \n+        try {\n+            randomData.setSecureAlgorithm(\"SHA1PRNG\",\"NOSUCHPROVIDER\");\n+            fail(\"expecting NoSuchProviderException\");\n+        } catch (NoSuchProviderException ex) {\n+            ;\n+        } \n+        \n+        // test reseeding without first using the generators\n+        RandomDataImpl rd = new RandomDataImpl();\n+        rd.reSeed(100);\n+        double ret = rd.nextLong(1,2);\n+        RandomDataImpl rd2 = new RandomDataImpl();\n+        rd2.reSeedSecure(2000);\n+        ret = rd2.nextSecureLong(1,2);\n+        rd = new RandomDataImpl();\n+        rd.reSeed();\n+        ret = rd.nextLong(1,2);\n+        rd2 = new RandomDataImpl();\n+        rd2.reSeedSecure();\n+        ret = rd2.nextSecureLong(1,2);\n+    }\n+    \n+    /** tests for nextSample() sampling from Collection */\n+    public void testNextSample() {\n+       Object[][] c = {{\"0\",\"1\"},{\"0\",\"2\"},{\"0\",\"3\"},{\"0\",\"4\"},{\"1\",\"2\"},\n+                        {\"1\",\"3\"},{\"1\",\"4\"},{\"2\",\"3\"},{\"2\",\"4\"},{\"3\",\"4\"}};\n+       double[] observed = {0,0,0,0,0,0,0,0,0,0};\n+       double[] expected = {100,100,100,100,100,100,100,100,100,100};\n+       \n+       HashSet cPop = new HashSet();  //{0,1,2,3,4}\n+       for (int i = 0; i < 5; i++) {\n+           cPop.add(Integer.toString(i));\n+       }\n+       \n+       Object[] sets = new Object[10]; // 2-sets from 5\n+       for (int i = 0; i < 10; i ++) {\n+           HashSet hs = new HashSet();\n+           hs.add(c[i][0]);\n+           hs.add(c[i][1]);\n+           sets[i] = hs;\n+       }\n+       \n+       for (int i = 0; i < 1000; i ++) {\n+           Object[] cSamp = randomData.nextSample(cPop,2);\n+           observed[findSample(sets,cSamp)]++;\n+       }\n+       \n+        /* Use ChiSquare dist with df = 10-1 = 9, alpha = .001\n+         * Change to 21.67 for alpha = .01\n+         */\n+        assertTrue(\"chi-square test -- will fail about 1 in 1000 times\",\n+            testStatistic.chiSquare(expected,observed) < 27.88);  \n+       \n+       // Make sure sample of size = size of collection returns same collection\n+       HashSet hs = new HashSet();\n+       hs.add(\"one\");\n+       Object[] one = randomData.nextSample(hs,1);\n+       String oneString = (String) one[0];\n+       if ((one.length != 1) || !oneString.equals(\"one\")){\n+           fail(\"bad sample for set size = 1, sample size = 1\");\n+       }\n+       \n+       // Make sure we fail for sample size > collection size\n+       try {\n+           one = randomData.nextSample(hs,2);\n+           fail(\"sample size > set size, expecting IllegalArgumentException\");\n+       } catch (IllegalArgumentException ex) {\n+           ;\n+       }\n+       \n+       // Make sure we fail for empty collection\n+       try {\n+           hs = new HashSet();\n+           one = randomData.nextSample(hs,0);\n+           fail(\"n = k = 0, expecting IllegalArgumentException\");\n+       } catch (IllegalArgumentException ex) {\n+           ;\n+       }\n+    }\n+    \n+    private int findSample(Object[] u, Object[] samp) {\n+        int result = -1;\n+        for (int i = 0; i < u.length; i++) {\n+            HashSet set = (HashSet) u[i];\n+            HashSet sampSet = new HashSet();\n+            for (int j = 0; j < samp.length; j++) {\n+                sampSet.add(samp[j]);\n+            }\n+            if (set.equals(sampSet)) {                 \n+               return i;\n+           }\n+        }\n+        fail(\"sample not found:{\" + samp[0] + \",\" + samp[1] + \"}\");\n+        return -1;\n+    }\n+    \n+    /** tests for nextPermutation */\n+    public void testNextPermutation() {\n+         int[][] p = {{0,1,2},{0,2,1},{1,0,2},{1,2,0},{2,0,1},{2,1,0}};\n+         double[] observed = {0,0,0,0,0,0,};\n+         double[] expected = {100,100,100,100,100,100};\n+         \n+         for (int i = 0; i < 600; i++) {\n+             int[] perm = randomData.nextPermutation(3,3);\n+             observed[findPerm(p,perm)]++;\n+         }  \n+         \n+        /* Use ChiSquare dist with df = 6-1 = 5, alpha = .001\n+         * Change to 15.09 for alpha = .01\n+         */\n+        assertTrue(\"chi-square test -- will fail about 1 in 1000 times\",\n+            testStatistic.chiSquare(expected,observed) < 20.52); \n+         \n+         // Check size = 1 boundary case\n+         int[] perm = randomData.nextPermutation(1,1);\n+         if ((perm.length != 1) || (perm[0] != 0)){\n+           fail(\"bad permutation for n = 1, sample k = 1\");\n+           \n+        // Make sure we fail for k size > n \n+        try {\n+           perm = randomData.nextPermutation(2,3);\n+           fail(\"permutation k > n, expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+           ;\n+        }\n+           \n+        // Make sure we fail for n = 0\n+        try {\n+           perm = randomData.nextPermutation(0,0);\n+           fail(\"permutation k = n = 0, expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+           ;\n+        }\n+           \n+        \n+       }\n+         \n+    }\n+    \n+    private int findPerm(int[][] p, int[] samp) {\n+        int result = -1;\n+        for (int i = 0; i < p.length; i++) {\n+            boolean good = true;\n+            for (int j = 0; j < samp.length; j++) {\n+                if (samp[j] != p[i][j]) {\n+                    good = false;\n+                }\n+            }\n+            if (good)  {\n+                return i;\n+            }\n+        }        \n+        fail(\"permutation not found\");\n+        return -1;\n+    }\n+                \n+                       \n+            \n+        \n+    \n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/random/ValueServerTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.random;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import java.net.URL;\n+\n+import org.apache.commons.math.stat.Univariate;\n+import org.apache.commons.math.stat.UnivariateImpl;\n+ \n+/**\n+ * Test cases for the ValueServer class.\n+ *\n+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:22 $\n+ */\n+\n+public final class ValueServerTest extends TestCase {\n+\n+    private ValueServer vs = new ValueServer();\n+    \n+    public ValueServerTest(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp() {\n+        vs.setMode(ValueServer.DIGEST_MODE);\n+        try {\n+            URL url = getClass().getResource(\"testData.txt\");\n+            vs.setValuesFileURL(url.toExternalForm()); \n+        } catch (Exception ex) {\n+            fail(\"malformed test URL\");\n+        }\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(ValueServerTest.class);\n+        suite.setName(\"ValueServer Tests\");\n+        return suite;\n+    }\n+\n+   \n+    /** \n+      * Generate 1000 random values and make sure they look OK.<br>\n+      * Note that there is a non-zero (but very small) probability that\n+      * these tests will fail even if the code is working as designed.\n+      */\n+    public void testNextDigest() throws Exception{\n+        double next = 0.0;\n+        double tolerance = 0.1;\n+        vs.computeDistribution();\n+        assertTrue(\"empirical distribution property\", \n+            vs.getEmpiricalDistribution() != null);\n+        Univariate stats = new UnivariateImpl();\n+        for (int i = 1; i < 1000; i++) {\n+            next = vs.getNext();\n+            stats.addValue(next);\n+        }    \n+        assertEquals(\"mean\", 5.069831575018909, stats.getMean(), tolerance);\n+        assertEquals\n+         (\"std dev\", 1.0173699343977738, stats.getStandardDeviation(), \n+            tolerance);\n+        \n+        vs.computeDistribution(500);\n+        stats = new UnivariateImpl();\n+        for (int i = 1; i < 1000; i++) {\n+            next = vs.getNext();\n+            stats.addValue(next);\n+        }    \n+        assertEquals(\"mean\", 5.069831575018909, stats.getMean(), tolerance);\n+        assertEquals\n+         (\"std dev\", 1.0173699343977738, stats.getStandardDeviation(), \n+            tolerance);\n+        \n+    }\n+    \n+    /**\n+      * Make sure exception thrown if digest getNext is attempted\n+      * before loading empiricalDistribution.\n+      */\n+    public void testNextDigestFail() throws Exception {\n+        try {\n+            vs.getNext();\n+            fail(\"Expecting IllegalStateException\");\n+        } catch (IllegalStateException ex) {;}\n+    }\n+    \n+    /**\n+      * Make sure exception thrown if nextReplay() is attempted\n+      * before opening replay file.\n+      */\n+    public void testNextReplayFail() throws Exception {\n+        try {\n+            vs.setMode(ValueServer.REPLAY_MODE);\n+            vs.getNext();\n+            fail(\"Expecting IllegalStateException\");\n+        } catch (IllegalStateException ex) {;}\n+    }\n+    \n+    /**\n+     * Test ValueServer REPLAY_MODE using values in testData file.<br> \n+     * Check that the values 1,2,1001,1002 match data file values 1 and 2.\n+     * the sample data file.\n+     */\n+    public void testReplay() throws Exception {\n+        double firstDataValue = 4.038625496201205;\n+        double secondDataValue = 3.6485326248346936;\n+        double tolerance = 10E-15;\n+        double compareValue = 0.0d;\n+        vs.setMode(ValueServer.REPLAY_MODE);\n+        vs.openReplayFile();\n+        compareValue = vs.getNext();\n+        assertEquals(compareValue,firstDataValue,tolerance);\n+        compareValue = vs.getNext();\n+        assertEquals(compareValue,secondDataValue,tolerance);\n+        for (int i = 3; i < 1001; i++) {\n+           compareValue = vs.getNext();\n+        }\n+        compareValue = vs.getNext();\n+        assertEquals(compareValue,firstDataValue,tolerance);\n+        compareValue = vs.getNext();\n+        assertEquals(compareValue,secondDataValue,tolerance);\n+        vs.closeReplayFile();\n+        // make sure no NPE\n+        vs.closeReplayFile();\n+    }\n+    \n+    /** \n+     * Test other ValueServer modes\n+     */\n+    public void testModes() throws Exception {\n+        vs.setMode(ValueServer.CONSTANT_MODE);\n+        vs.setMu(0);\n+        assertEquals(\"constant mode test\",vs.getMu(),vs.getNext(),Double.MIN_VALUE);\n+        vs.setMode(ValueServer.UNIFORM_MODE);\n+        vs.setMu(2);\n+        double val = vs.getNext();\n+        assertTrue(val > 0 && val < 4);\n+        vs.setSigma(1);\n+        vs.setMode(ValueServer.GAUSSIAN_MODE);\n+        val = vs.getNext();\n+        assertTrue(\"gaussian value close enough to mean\",\n+            val < vs.getMu() + 100*vs.getSigma());\n+        vs.setMode(ValueServer.EXPONENTIAL_MODE);\n+        val = vs.getNext();\n+        assertTrue(val > 0);\n+        try {\n+            vs.setMode(1000);\n+            vs.getNext();\n+            fail(\"bad mode, expecting IllegalStateException\");\n+        } catch (IllegalStateException ex) {\n+            ;\n+        }\n+    }\n+    \n+    /**\n+     * Test fill\n+     */\n+    public void testFill() throws Exception {\n+        vs.setMode(ValueServer.CONSTANT_MODE);\n+        vs.setMu(2);\n+        double[] val = new double[5];\n+        vs.fill(val);\n+        for (int i = 0; i < 5; i++) {\n+            assertEquals(\"fill test in place\",2,val[i],Double.MIN_VALUE);\n+        }\n+        double v2[] = vs.fill(3);\n+        for (int i = 0; i < 3; i++) {\n+            assertEquals(\"fill test in place\",2,v2[i],Double.MIN_VALUE);\n+        }\n+    }\n+    \n+    /**\n+     * Test getters to make Clover happy\n+     */\n+    public void testProperties() throws Exception {\n+        vs.setMode(ValueServer.CONSTANT_MODE);\n+        assertEquals(\"mode test\",ValueServer.CONSTANT_MODE,vs.getMode());\n+        vs.setValuesFileURL(\"http://www.apache.org\");\n+        String s = vs.getValuesFileURL();\n+        assertEquals(\"valuesFileURL test\",\"http://www.apache.org\",s);\n+    }\n+        \n+        \n+        \n+        \n+        \n+        \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/special/BetaTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.special;\n+\n+import org.apache.commons.math.MathException;\n+import org.apache.commons.math.TestUtils;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:23 $\n+ */\n+public class BetaTest extends TestCase {\n+    /**\n+     * Constructor for BetaTest.\n+     * @param name\n+     */\n+    public BetaTest(String name) {\n+        super(name);\n+    }\n+\n+    private void testRegularizedBeta(double expected, double x, double a,\n+        double b)\n+    {\n+        try {\n+            double actual = Beta.regularizedBeta(x, a, b);\n+            TestUtils.assertEquals(expected, actual, 10e-5);\n+        } catch(MathException ex){\n+            fail(ex.getMessage());\n+        }\n+    }\n+\n+    private void testLogBeta(double expected, double a, double b) {\n+        double actual = Beta.logBeta(a, b);\n+        TestUtils.assertEquals(expected, actual, 10e-5);\n+    }\n+\n+    public void testRegularizedBetaNanPositivePositive() {\n+        testRegularizedBeta(Double.NaN, Double.NaN, 1.0, 1.0);\n+    }\n+\n+    public void testRegularizedBetaPositiveNanPositive() {\n+        testRegularizedBeta(Double.NaN, 0.5, Double.NaN, 1.0);\n+    }\n+\n+    public void testRegularizedBetaPositivePositiveNan() {\n+        testRegularizedBeta(Double.NaN, 0.5, 1.0, Double.NaN);\n+    }\n+    \n+    public void testRegularizedBetaNegativePositivePositive() {\n+        testRegularizedBeta(Double.NaN, -0.5, 1.0, 2.0);\n+    }\n+    \n+    public void testRegularizedBetaPositiveNegativePositive() {\n+        testRegularizedBeta(Double.NaN, 0.5, -1.0, 2.0);\n+    }\n+    \n+    public void testRegularizedBetaPositivePositiveNegative() {\n+        testRegularizedBeta(Double.NaN, 0.5, 1.0, -2.0);\n+    }\n+    \n+    public void testRegularizedBetaZeroPositivePositive() {\n+        testRegularizedBeta(0.0, 0.0, 1.0, 2.0);\n+    }\n+    \n+    public void testRegularizedBetaPositiveZeroPositive() {\n+        testRegularizedBeta(Double.NaN, 0.5, 0.0, 2.0);\n+    }\n+    \n+    public void testRegularizedBetaPositivePositiveZero() {\n+        testRegularizedBeta(Double.NaN, 0.5, 1.0, 0.0);\n+    }\n+    \n+    public void testRegularizedBetaPositivePositivePositive() {\n+        testRegularizedBeta(0.75, 0.5, 1.0, 2.0);\n+    }\n+    \n+    public void testLogBetaNanPositive() {\n+        testLogBeta(Double.NaN, Double.NaN, 2.0);\n+    }\n+    \n+    public void testLogBetaPositiveNan() {\n+        testLogBeta(Double.NaN, 1.0, Double.NaN);\n+    }\n+    \n+    public void testLogBetaNegativePositive() {\n+        testLogBeta(Double.NaN, -1.0, 2.0);\n+    }\n+    \n+    public void testLogBetaPositiveNegative() {\n+        testLogBeta(Double.NaN, 1.0, -2.0);\n+    }\n+    \n+    public void testLogBetaZeroPositive() {\n+        testLogBeta(Double.NaN, 0.0, 2.0);\n+    }\n+    \n+    public void testLogBetaPositiveZero() {\n+        testLogBeta(Double.NaN, 1.0, 0.0);\n+    }\n+    \n+    public void testLogBetaPositivePositive() {\n+        testLogBeta(-0.693147, 1.0, 2.0);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/special/GammaTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.special;\n+\n+import org.apache.commons.math.MathException;\n+import org.apache.commons.math.TestUtils;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:23 $\n+ */\n+public class GammaTest extends TestCase {\n+    /**\n+     * Constructor for BetaTest.\n+     * @param name\n+     */\n+    public GammaTest(String name) {\n+        super(name);\n+    }\n+\n+    private void testRegularizedGamma(double expected, double a, double x) {\n+        try {\n+            double actual = Gamma.regularizedGammaP(a, x);\n+            TestUtils.assertEquals(expected, actual, 10e-5);\n+        } catch(MathException ex){\n+            fail(ex.getMessage());\n+        }\n+    }\n+\n+    private void testLogGamma(double expected, double x) {\n+        double actual = Gamma.logGamma(x);\n+        TestUtils.assertEquals(expected, actual, 10e-5);\n+    }\n+\n+    public void testRegularizedGammaNanPositive() {\n+        testRegularizedGamma(Double.NaN, Double.NaN, 1.0);\n+    }\n+\n+    public void testRegularizedGammaPositiveNan() {\n+        testRegularizedGamma(Double.NaN, 1.0, Double.NaN);\n+    }\n+    \n+    public void testRegularizedGammaNegativePositive() {\n+        testRegularizedGamma(Double.NaN, -1.5, 1.0);\n+    }\n+    \n+    public void testRegularizedGammaPositiveNegative() {\n+        testRegularizedGamma(Double.NaN, 1.0, -1.0);\n+    }\n+    \n+    public void testRegularizedGammaZeroPositive() {\n+        testRegularizedGamma(Double.NaN, 0.0, 1.0);\n+    }\n+    \n+    public void testRegularizedGammaPositiveZero() {\n+        testRegularizedGamma(0.0, 1.0, 0.0);\n+    }\n+    \n+    public void testRegularizedGammaPositivePositive() {\n+        testRegularizedGamma(0.632121, 1.0, 1.0);\n+    }\n+    \n+    public void testLogGammaNan() {\n+        testLogGamma(Double.NaN, Double.NaN);\n+    }\n+    \n+    public void testLogGammaNegative() {\n+        testLogGamma(Double.NaN, -1.0);\n+    }\n+    \n+    public void testLogGammaZero() {\n+        testLogGamma(Double.NaN, 0.0);\n+    }\n+    \n+    public void testLogGammaPositive() {\n+        testLogGamma(0.693147, 3.0);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.math.beans.*;\n+\n+/**\n+ * Test cases for the {@link BeanListUnivariateImpl} class.\n+ *\n+ * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:18 $\n+ */\n+\n+public final class BeanListUnivariateImplTest extends TestCase {\n+    \n+    private List patientList = null;\n+    private double tolerance = Double.MIN_VALUE;\n+    \n+    public BeanListUnivariateImplTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() {  \n+        patientList = new ArrayList();\n+\n+        // Create and add patient bean 1\n+        VitalStats vs1 = new VitalStats( new Double(120.0), \n+                                         new Double(96.4) );\n+        Patient p1 = new Patient( vs1, new Integer( 35 ) );\n+        patientList.add( p1 );\n+\n+        // Create and add patient bean 2\n+        VitalStats vs2 = new VitalStats( new Double(70.0), \n+                                         new Double(97.4) );\n+        Patient p2 = new Patient( vs2, new Integer( 23 ) );\n+        patientList.add( p2 );\n+\n+        // Create and add patient bean 3\n+        VitalStats vs3 = new VitalStats( new Double(90.0), \n+                                         new Double(98.6) );\n+        Patient p3 = new Patient( vs3, new Integer( 42 ) );\n+        patientList.add( p3 );\n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(BeanListUnivariateImplTest.class);\n+        suite.setName(\"Frequency Tests\");\n+        return suite;\n+    }\n+    \n+    /** test stats */\n+    public void testStats() {\n+    \t\n+        StoreUnivariate u = new BeanListUnivariateImpl( patientList ); \n+\n+        assertEquals(\"total count\",3,u.getN(),tolerance);\n+\n+        u.clear();\n+        assertEquals(\"total count\",0,u.getN(),tolerance);    \n+    }     \n+    \n+    public void testPropStats() {\n+\n+        StoreUnivariate heartU = new BeanListUnivariateImpl( patientList,\n+                                          \"vitalStats.heartRate\" );\n+\n+        \n+\n+        assertEquals( \"Mean heart rate unexpected\", 93.333, \n+                      heartU.getMean(), 0.001 );\n+        assertEquals( \"Max heart rate unexpected\", 120.0, \n+                      heartU.getMax(), 0.001 );\n+\n+        StoreUnivariate ageU = new BeanListUnivariateImpl( patientList,\n+                                                           \"age\" );\n+\n+        assertEquals( \"Mean age unexpected\", 33.333,\n+                      ageU.getMean(), 0.001 );\n+        assertEquals( \"Max age unexpected\", 42.0,\n+                      ageU.getMax(), 0.001 );\n+\n+    }\n+    \n+    public void testSetPropertyName(){\n+        BeanListUnivariateImpl u = new BeanListUnivariateImpl(null);\n+        String expected = \"property\";\n+        u.setPropertyName(expected);\n+        assertEquals(expected, u.getPropertyName());\n+    }\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/BivariateRegressionTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+/**\n+ * Test cases for the TestStatistic class.\n+ *\n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:18 $\n+ */\n+\n+public final class BivariateRegressionTest extends TestCase {\n+\n+    /* \n+     * NIST \"Norris\" refernce data set from \n+     * http://www.itl.nist.gov/div898/strd/lls/data/LINKS/DATA/Norris.dat\n+     * Strangely, order is {y,x}\n+     */\n+    private double[][] data = {{0.1,0.2},{338.8,337.4},{118.1,118.2},\n+        {888.0,884.6},{9.2,10.1},{228.1,226.5},{668.5,666.3},{998.5,996.3},\n+        {449.1,448.6},{778.9,777.0},{559.2,558.2},{0.3,0.4},{0.1,0.6},\n+        {778.1,775.5},{668.8,666.9},{339.3,338.0},{448.9,447.5},{10.8,11.6},\n+        {557.7,556.0},{228.3,228.1},{998.0,995.8},{888.8,887.6},{119.6,120.2},\n+        {0.3,0.3},{0.6,0.3},{557.6,556.8},{339.3,339.1},{888.0,887.2},\n+        {998.5,999.0},{778.9,779.0},{10.2,11.1},{117.6,118.3},{228.9,229.2},\n+        {668.4,669.1},{449.2,448.9},{0.2,0.5}}; \n+        \n+    /* \n+     * Correlation example from \n+     * http://www.xycoon.com/correlation.htm\n+     */\n+    private double[][] corrData = {{101.0,99.2},{100.1,99.0},{100.0,100.0},\n+        {90.6,111.6},{86.5,122.2},{89.7,117.6},{90.6,121.1},{82.8,136.0},\n+        {70.1,154.2},{65.4,153.6},{61.3,158.5},{62.5,140.6},{63.6,136.2},\n+        {52.6,168.0},{59.7,154.3},{59.5,149.0},{61.3,165.5}};\n+        \n+    /*\n+     * From Moore and Mcabe, \"Introduction to the Practice of Statistics\"\n+     * Example 10.3 \n+     */\n+    private double[][] infData = {{15.6,5.2},{26.8,6.1},{37.8,8.7},{36.4,8.5},\n+    {35.5,8.8},{18.6,4.9},{15.3,4.5},{7.9,2.5},{0.0,1.1}};\n+    \n+    /*\n+     * From http://www.xycoon.com/simple_linear_regression.htm\n+     */\n+    private double[][] infData2 = {{1,3},{2,5},{3,7},{4,14},{5,11}};\n+    \n+    public BivariateRegressionTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() { \n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(BivariateRegressionTest.class);\n+        suite.setName(\"BivariateRegression Tests\");\n+        return suite;\n+    }\n+    \n+    public void testNorris() {\n+       BivariateRegression regression = new BivariateRegression();\n+       for (int i = 0; i < data.length; i++) {\n+           regression.addData(data[i][1],data[i][0]);\n+       }\n+       assertEquals(\"slope\",1.00211681802045, \n+            regression.getSlope(),10E-12);\n+       assertEquals(\"slope std err\",0.429796848199937E-03, \n+            regression.getSlopeStdErr(),10E-12);\n+       assertEquals(\"number of observations\",36,regression.getN());\n+       assertEquals(\"intercept\", -0.262323073774029,\n+            regression.getIntercept(),10E-12);\n+       assertEquals(\"std err intercept\", 0.232818234301152, \n+            regression.getInterceptStdErr(),10E-12);\n+       assertEquals(\"r-square\",0.999993745883712,\n+            regression.getRSquare(),10E-12);\n+       assertEquals(\"SSR\",4255954.13232369, \n+            regression.getRegressionSumSquares(),10E-9);\n+       assertEquals(\"MSE\",0.782864662630069, \n+            regression.getMeanSquareError(),10E-10);\n+       assertEquals(\"SSE\",26.6173985294224, \n+            regression.getSumSquaredErrors(),10E-9);\n+       assertEquals(\"predict(0)\",-0.262323073774029,\n+            regression.predict(0),10E-12);\n+       assertEquals(\"predict(1)\",1.00211681802045-0.262323073774029,\n+            regression.predict(1),10E-12);\n+    }\n+    \n+    public void testCorr() {\n+       BivariateRegression regression = new BivariateRegression();\n+       regression.addData(corrData);\n+       assertEquals(\"number of observations\",17,regression.getN());\n+       assertEquals(\"r-square\",.896123,\n+            regression.getRSquare(),10E-6);\n+       assertEquals(\"r\",-.946638, \n+            regression.getR(),10E-6);\n+    }  \n+    \n+    public void testNaNs() {\n+        \n+        BivariateRegression regression = new BivariateRegression();\n+        \n+        assertTrue(\"intercept not NaN\",Double.isNaN(regression.getIntercept()));\n+        assertTrue(\"slope not NaN\",Double.isNaN(regression.getSlope()));\n+        assertTrue(\"slope std err not NaN\",\n+            Double.isNaN(regression.getSlopeStdErr()));\n+        assertTrue(\"intercept std err not NaN\",\n+            Double.isNaN(regression.getInterceptStdErr()));\n+        assertTrue(\"MSE not NaN\",Double.isNaN(regression.getMeanSquareError()));\n+        assertTrue(\"e not NaN\",Double.isNaN(regression.getR()));\n+        assertTrue(\"r-square not NaN\",Double.isNaN(regression.getRSquare()));\n+        assertTrue(\"RSS not NaN\",\n+            Double.isNaN(regression.getRegressionSumSquares()));\n+        assertTrue(\"SSE not NaN\",Double.isNaN(regression.getSumSquaredErrors()));\n+        assertTrue(\"SSTO not NaN\",Double.isNaN(regression.getTotalSumSquares()));\n+        assertTrue(\"predict not NaN\",Double.isNaN(regression.predict(0)));\n+        \n+        regression.addData(1,2);\n+        regression.addData(1,3);\n+        \n+        // No x variation, so these should still blow...\n+        assertTrue(\"intercept not NaN\",Double.isNaN(regression.getIntercept()));\n+        assertTrue(\"slope not NaN\",Double.isNaN(regression.getSlope()));\n+        assertTrue(\"slope std err not NaN\",\n+            Double.isNaN(regression.getSlopeStdErr()));\n+        assertTrue(\"intercept std err not NaN\",\n+            Double.isNaN(regression.getInterceptStdErr()));\n+        assertTrue(\"MSE not NaN\",Double.isNaN(regression.getMeanSquareError()));\n+        assertTrue(\"e not NaN\",Double.isNaN(regression.getR()));\n+        assertTrue(\"r-square not NaN\",Double.isNaN(regression.getRSquare()));\n+        assertTrue(\"RSS not NaN\",\n+            Double.isNaN(regression.getRegressionSumSquares()));\n+        assertTrue(\"SSE not NaN\",Double.isNaN(regression.getSumSquaredErrors()));\n+        assertTrue(\"predict not NaN\",Double.isNaN(regression.predict(0)));\n+        \n+        // but SSTO should be OK\n+         assertTrue(\"SSTO NaN\",!Double.isNaN(regression.getTotalSumSquares()));\n+        \n+        regression = new BivariateRegression();\n+        \n+        regression.addData(1,2);\n+        regression.addData(3,3);\n+        \n+        // All should be OK except MSE, s(b0), s(b1) which need one more df \n+        assertTrue(\"interceptNaN\",!Double.isNaN(regression.getIntercept()));\n+        assertTrue(\"slope NaN\",!Double.isNaN(regression.getSlope()));\n+        assertTrue(\"slope std err not NaN\",\n+            Double.isNaN(regression.getSlopeStdErr()));\n+        assertTrue(\"intercept std err not NaN\",\n+            Double.isNaN(regression.getInterceptStdErr()));\n+        assertTrue(\"MSE not NaN\",Double.isNaN(regression.getMeanSquareError()));\n+        assertTrue(\"r NaN\",!Double.isNaN(regression.getR()));\n+        assertTrue(\"r-square NaN\",!Double.isNaN(regression.getRSquare()));\n+        assertTrue(\"RSS NaN\",\n+            !Double.isNaN(regression.getRegressionSumSquares()));\n+        assertTrue(\"SSE NaN\",!Double.isNaN(regression.getSumSquaredErrors()));\n+        assertTrue(\"SSTO NaN\",!Double.isNaN(regression.getTotalSumSquares()));\n+        assertTrue(\"predict NaN\",!Double.isNaN(regression.predict(0)));\n+        \n+        regression.addData(1,4);\n+        \n+        // MSE, MSE, s(b0), s(b1) should all be OK now\n+        assertTrue(\"MSE NaN\",!Double.isNaN(regression.getMeanSquareError()));\n+        assertTrue(\"slope std err NaN\",\n+            !Double.isNaN(regression.getSlopeStdErr()));\n+        assertTrue(\"intercept std err NaN\",\n+            !Double.isNaN(regression.getInterceptStdErr()));\n+    }\n+    \n+    public void testClear() {\n+       BivariateRegression regression = new BivariateRegression();\n+       regression.addData(corrData);\n+       assertEquals(\"number of observations\",17,regression.getN());\n+       regression.clear();\n+       assertEquals(\"number of observations\",0,regression.getN());\n+       regression.addData(corrData);\n+       assertEquals(\"r-square\",.896123,regression.getRSquare(),10E-6);\n+       regression.addData(data);\n+       assertEquals(\"number of observations\",53,regression.getN());\n+    }\n+    \n+    public void testInference() {\n+       BivariateRegression regression = new BivariateRegression();\n+       regression.addData(infData);\n+       assertEquals(\"slope confidence interval\", 0.0271,\n+            regression.getSlopeConfidenceInterval(),0.0001);\n+       assertEquals(\"slope std err\",0.01146,\n+            regression.getSlopeStdErr(),0.0001);\n+       \n+       regression = new BivariateRegression();\n+       regression.addData(infData2);\n+       assertEquals(\"significance\", 0.023331,\n+            regression.getSignificance(),0.0001);\n+       \n+       //FIXME: get a real example to test against with alpha = .01\n+       assertTrue(\"tighter means wider\",\n+            regression.getSlopeConfidenceInterval() < \n+            regression.getSlopeConfidenceInterval(0.01));\n+       \n+       try {\n+           double x = regression.getSlopeConfidenceInterval(1);\n+           fail(\"expecting IllegalArgumentException for alpha = 1\");\n+       } catch (IllegalArgumentException ex) {\n+           ;\n+       }\n+       \n+    }                                        \n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/CertifiedDataTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import java.io.BufferedReader;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import org.apache.commons.logging.*;\n+/**\n+ * Test cases for the {@link Univariate} class.\n+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:18 $\n+ */\n+public class CertifiedDataTest extends TestCase {\n+\n+\tprotected Univariate u = null;\n+\n+\tprotected double mean = Double.NaN;\n+\n+\tprotected double std = Double.NaN;\n+\n+\tprotected Log log = LogFactory.getLog(this.getClass());\n+\n+\t/**\n+\t * Certified Data Test Constructor\n+\t * @param name\n+\t */\n+\tpublic CertifiedDataTest(String name) {\n+\t\tsuper(name);\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see junit.framework.TestCase#setUp()\n+\t */\n+\tpublic void setUp() {\n+\t}\n+\n+\t/**\n+\t * @return The test suite\n+\t */\n+\tpublic static Test suite() {\n+\t\tTestSuite suite = new TestSuite(CertifiedDataTest.class);\n+\t\tsuite.setName(\"Certified Tests\");\n+\t\treturn suite;\n+\t}\n+\n+\t/**\n+\t * Test UnivariateImpl\n+\t*/\n+\tpublic void testUnivariateImpl() {\n+\n+\t\tu = new UnivariateImpl();\n+\n+\t\tloadStats(\"data/Lew.txt\");\n+\t\tassertEquals(\"Lew: std\", std, u.getStandardDeviation(), .000000000001);\n+\t\tassertEquals(\"Lew: mean\", mean, u.getMean(), .000000000001);\n+\t\t\n+\t\tloadStats(\"data/Lottery.txt\");\n+\t\tassertEquals(\"Lottery: std\", std, u.getStandardDeviation(), .000000000001);\n+\t\tassertEquals(\"Lottery: mean\", mean, u.getMean(), .000000000001);\t\n+\t\t\n+\t\tloadStats(\"data/PiDigits.txt\");\n+\t\tassertEquals(\"PiDigits: std\", std, u.getStandardDeviation(), .0000000000001);\n+\t\tassertEquals(\"PiDigits: mean\", mean, u.getMean(), .0000000000001);\t\n+\n+\t\tloadStats(\"data/Mavro.txt\");\n+\t\tassertEquals(\"Mavro: std\", std, u.getStandardDeviation(), .00000000000001);\n+\t\tassertEquals(\"Mavro: mean\", mean, u.getMean(), .00000000000001);\n+\t\t\n+\t\t//loadStats(\"data/Michelso.txt\");\n+\t\t//assertEquals(\"Michelso: std\", std, u.getStandardDeviation(), .00000000000001);\n+\t\t//assertEquals(\"Michelso: mean\", mean, u.getMean(), .00000000000001);\t\n+\t\t\t\t\t\t\t\t\t\t\n+\t\tloadStats(\"data/NumAcc1.txt\");\n+\t\tassertEquals(\"NumAcc1: std\", std, u.getStandardDeviation(), .00000000000001);\n+\t\tassertEquals(\"NumAcc1: mean\", mean, u.getMean(), .00000000000001);\n+\t\t\n+\t\t//loadStats(\"data/NumAcc2.txt\");\n+\t\t//assertEquals(\"NumAcc2: std\", std, u.getStandardDeviation(), .000000001);\n+\t\t//assertEquals(\"NumAcc2: mean\", mean, u.getMean(), .00000000000001);\n+\t}\n+\n+\t/**\n+\t * Test UnivariateImpl\n+\t */\n+\tpublic void testStoredUnivariateImpl() {\n+\n+\t\tu = new StoreUnivariateImpl();\n+\t\t\n+\t\tloadStats(\"data/Lew.txt\");\n+\t\tassertEquals(\"Lew: std\", std, u.getStandardDeviation(), .000000000001);\n+\t\tassertEquals(\"Lew: mean\", mean, u.getMean(), .000000000001);\n+\t\t\n+\t\tloadStats(\"data/Lottery.txt\");\n+\t\tassertEquals(\"Lottery: std\", std, u.getStandardDeviation(), .000000000001);\n+\t\tassertEquals(\"Lottery: mean\", mean, u.getMean(), .000000000001);\t\t\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \n+\t\tloadStats(\"data/PiDigits.txt\");\n+\t\tassertEquals(\"PiDigits: std\", std, u.getStandardDeviation(), .0000000000001);\n+\t\tassertEquals(\"PiDigits: mean\", mean, u.getMean(), .0000000000001);\n+\t\t\n+\t\tloadStats(\"data/Mavro.txt\");\n+\t\tassertEquals(\"Mavro: std\", std, u.getStandardDeviation(), .00000000000001);\n+\t\tassertEquals(\"Mavro: mean\", mean, u.getMean(), .00000000000001);\t\t\n+\t\t\n+\t\t//loadStats(\"data/Michelso.txt\");\n+\t\t//assertEquals(\"Michelso: std\", std, u.getStandardDeviation(), .00000000000001);\n+\t\t//assertEquals(\"Michelso: mean\", mean, u.getMean(), .00000000000001);\t\n+\n+\t\tloadStats(\"data/NumAcc1.txt\");\n+\t\tassertEquals(\"NumAcc1: std\", std, u.getStandardDeviation(), .00000000000001);\n+\t\tassertEquals(\"NumAcc1: mean\", mean, u.getMean(), .00000000000001);\n+\t\t\n+\t\t//loadStats(\"data/NumAcc2.txt\");\n+\t\t//assertEquals(\"NumAcc2: std\", std, u.getStandardDeviation(), .000000001);\n+\t\t//assertEquals(\"NumAcc2: mean\", mean, u.getMean(), .00000000000001);\n+\t}\n+\n+\t/**\n+\t * loads a Univariate off of a test file\n+\t * @param file\n+\t */\n+\tprivate void loadStats(String resource) {\n+\n+\t\ttry {\n+\n+\t\t\tu.clear();\n+\t\t\tmean = Double.NaN;\n+\t\t\tstd = Double.NaN;\n+\n+\t\t\tBufferedReader in =\n+\t\t\t\tnew BufferedReader(\n+\t\t\t\t\tnew InputStreamReader(\n+\t\t\t\t\t\tgetClass().getResourceAsStream(resource)));\n+\n+\t\t\tString line = null;\n+\n+\t\t\tfor (int j = 0; j < 60; j++) {\n+\t\t\t\tline = in.readLine();\n+\t\t\t\tif (j == 40) {\n+\t\t\t\t\tmean =\n+\t\t\t\t\t\tDouble.parseDouble(\n+\t\t\t\t\t\t\tline.substring(line.lastIndexOf(\":\") + 1).trim());\n+\t\t\t\t}\n+\t\t\t\tif (j == 41) {\n+\t\t\t\t\tstd =\n+\t\t\t\t\t\tDouble.parseDouble(\n+\t\t\t\t\t\t\tline.substring(line.lastIndexOf(\":\") + 1).trim());\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tline = in.readLine();\n+\n+\t\t\twhile (line != null) {\n+\n+\t\t\t\tu.addValue(Double.parseDouble(line.trim()));\n+\t\t\t\tline = in.readLine();\n+\t\t\t}\n+\n+\t\t\tin.close();\n+\n+\t\t} catch (FileNotFoundException fnfe) {\n+\t\t\tlog.error(fnfe.getMessage(), fnfe);\n+\t\t} catch (IOException ioe) {\n+\t\t\tlog.error(ioe.getMessage(), ioe);\n+\t\t}\n+\t}\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/FrequencyTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.StringReader;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test cases for the {@link Frequency} class.\n+ *\n+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:18 $\n+ */\n+\n+public final class FrequencyTest extends TestCase {\n+    private long oneL = 1;\n+    private long twoL = 2;\n+    private int oneI = 1;\n+    private int twoI = 2;\n+    private String oneS = \"1\";\n+    private String twoS = \"2\";\n+    private double tolerance = 10E-15;\n+    \n+    public FrequencyTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() {  \n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(FrequencyTest.class);\n+        suite.setName(\"Frequency Tests\");\n+        return suite;\n+    }\n+    \n+    /** test freq counts */\n+    public void testCounts() {\n+        Frequency f = new Frequency(\"test counts\"); \n+        assertEquals(\"total count\",0,f.getSumFreq());\n+        f.addValue(oneL);\n+        f.addValue(twoL);\n+        f.addValue(oneS);\n+        f.addValue(oneI);\n+        assertEquals(\"one frequency count\",3,f.getCount(\"1\"));\n+        assertEquals(\"two frequency count\",1,f.getCount(\"2\"));\n+        assertEquals(\"foo frequency count\",0,f.getCount(\"foo\"));\n+        assertEquals(\"total count\",4,f.getSumFreq());\n+        f.clear();\n+        assertEquals(\"total count\",0,f.getSumFreq());\n+    }     \n+    \n+    /** test pcts */\n+    public void testPcts() {\n+        Frequency f = new Frequency(\"test pcts\"); \n+        f.addValue(oneL);\n+        f.addValue(twoL);\n+        f.addValue(oneI);\n+        f.addValue(twoI);\n+        f.addValue(\"foo\");\n+        f.addValue(\"foo\");\n+        f.addValue(\"foo\");\n+        f.addValue(\"foo\");\n+        assertEquals(\"one pct\",0.25,f.getPct(\"1\"),tolerance);\n+        assertEquals(\"two pct\",0.25,f.getPct(\"2\"),tolerance);\n+        assertEquals(\"foo pct\",0.5,f.getPct(\"foo\"),tolerance);\n+        assertEquals(\"bar pct\",0,f.getPct(\"bar\"),tolerance);\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testToString(){\n+        Frequency f = new Frequency(\"test toString\"); \n+        f.addValue(oneL);\n+        f.addValue(twoL);\n+        f.addValue(oneI);\n+        f.addValue(twoI);\n+        \n+        String s = f.toString();\n+        assertNotNull(s);\n+        BufferedReader reader = new BufferedReader(new StringReader(s));\n+        try {\n+            String line = reader.readLine(); // header line\n+            assertNotNull(line);\n+            \n+            line = reader.readLine(); // one's or two's line\n+            assertNotNull(line);\n+                        \n+            line = reader.readLine(); // one's or two's line\n+            assertNotNull(line);\n+\n+            line = reader.readLine(); // no more elements\n+            assertNull(line);\n+        } catch(IOException ex){\n+            fail(ex.getMessage());\n+        }        \n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testSetName(){\n+        String name = \"name\";\n+        Frequency f = new Frequency();\n+        f.setName(name);\n+        assertEquals(name, f.getName());\n+    }              \n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test cases for the {@link Univariate} class.\n+ *\n+ * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:18 $\n+ */\n+\n+public final class ListUnivariateImplTest extends TestCase {\n+    private double one = 1;\n+    private float two = 2;\n+    private int three = 3;\n+\n+    private double mean = 2;\n+    private double sumSq = 18;\n+    private double sum = 8;\n+    private double var = 0.666666666666666666667;\n+    private double std = Math.sqrt(var);\n+    private double n = 4;\n+    private double min = 1;\n+    private double max = 3;\n+    private double skewness = 0;\n+    private double kurtosis = 0.5;\n+    private int kClass = StoreUnivariate.LEPTOKURTIC;\n+    private double tolerance = 10E-15;\n+    \n+    public ListUnivariateImplTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() {  \n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(ListUnivariateImplTest.class);\n+        suite.setName(\"Frequency Tests\");\n+        return suite;\n+    }\n+    \n+    /** test stats */\n+    public void testStats() {\n+    \tList externalList = new ArrayList();\n+    \t\n+        StoreUnivariate u = new ListUnivariateImpl( externalList ); \n+\n+        assertEquals(\"total count\",0,u.getN(),tolerance);\n+        u.addValue(one);\n+        u.addValue(two);\n+        u.addValue(two);\n+        u.addValue(three);\n+        assertEquals(\"N\",n,u.getN(),tolerance);\n+        assertEquals(\"sum\",sum,u.getSum(),tolerance);\n+        assertEquals(\"sumsq\",sumSq,u.getSumsq(),tolerance);\n+        assertEquals(\"var\",var,u.getVariance(),tolerance);\n+        assertEquals(\"std\",std,u.getStandardDeviation(),tolerance);\n+        assertEquals(\"mean\",mean,u.getMean(),tolerance);\n+        assertEquals(\"min\",min,u.getMin(),tolerance);\n+        assertEquals(\"max\",max,u.getMax(),tolerance);\n+        u.clear();\n+        assertEquals(\"total count\",0,u.getN(),tolerance);    \n+    }     \n+    \n+    public void testN0andN1Conditions() throws Exception {\n+    \tList list = new ArrayList();\n+    \t\n+    \tStoreUnivariate u = new ListUnivariateImpl( list );\n+    \t    \t\n+\t\tassertTrue(\"Mean of n = 0 set should be NaN\", Double.isNaN( u.getMean() ) );\n+\t\tassertTrue(\"Standard Deviation of n = 0 set should be NaN\", Double.isNaN( u.getStandardDeviation() ) );\n+\t\tassertTrue(\"Variance of n = 0 set should be NaN\", Double.isNaN(u.getVariance() ) );\n+\n+\t\tlist.add( new Double(one));\n+\n+\t\tassertTrue( \"Mean of n = 1 set should be value of single item n1\", u.getMean() == one);\n+\t\tassertTrue( \"StdDev of n = 1 set should be zero, instead it is: \" + u.getStandardDeviation(), u.getStandardDeviation() == 0);\n+\t\tassertTrue( \"Variance of n = 1 set should be zero\", u.getVariance() == 0);\t\n+    }\n+    \n+    public void testSkewAndKurtosis() {\n+    \tStoreUnivariate u = new StoreUnivariateImpl();\n+    \t\n+    \tdouble[] testArray = { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,\n+  \t  \t\t\t\t\t\t\t\t\t\t 9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };\n+  \t  \tfor( int i = 0; i < testArray.length; i++) {\n+  \t  \t\tu.addValue( testArray[i]);\n+  \t  \t}\n+  \t  \t\n+\t\tassertEquals(\"mean\", 12.40455, u.getMean(), 0.0001);\n+\t\tassertEquals(\"variance\", 10.00236, u.getVariance(), 0.0001);\n+\t\tassertEquals(\"skewness\", 1.437424, u.getSkewness(), 0.0001);\n+  \t  \tassertEquals(\"kurtosis\", 2.37719, u.getKurtosis(), 0.0001);\n+    }\n+\n+    public void testProductAndGeometricMean() throws Exception {\n+    \tListUnivariateImpl u = new ListUnivariateImpl(new ArrayList());\n+        u.setWindowSize(10);\n+    \t    \t\n+        u.addValue( 1.0 );\n+        u.addValue( 2.0 );\n+        u.addValue( 3.0 );\n+        u.addValue( 4.0 );\n+\n+        assertEquals( \"Geometric mean not expected\", 2.213364, u.getGeometricMean(), 0.00001 );\n+\n+        // Now test rolling - UnivariateImpl should discount the contribution\n+        // of a discarded element\n+        for( int i = 0; i < 10; i++ ) {\n+            u.addValue( i + 2 );\n+        }\n+        // Values should be (2,3,4,5,6,7,8,9,10,11)\n+        \n+        assertEquals( \"Geometric mean not expected\", 5.755931, u.getGeometricMean(), 0.00001 );\n+\n+\n+    }\n+\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.math.util.NumberTransformer;\n+import org.apache.commons.math.util.TransformerMap;\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test cases for the {@link Univariate} class.\n+ *\n+ * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:18 $\n+ */\n+\n+public final class MixedListUnivariateImplTest extends TestCase {\n+    private double one = 1;\n+    private float two = 2;\n+    private int three = 3;\n+\n+    private double mean = 2;\n+    private double sumSq = 18;\n+    private double sum = 8;\n+    private double var = 0.666666666666666666667;\n+    private double std = Math.sqrt(var);\n+    private double n = 4;\n+    private double min = 1;\n+    private double max = 3;\n+    private double skewness = 0;\n+    private double kurtosis = 0.5;\n+    private int kClass = StoreUnivariate.LEPTOKURTIC;\n+    private double tolerance = 10E-15;\n+\n+    private TransformerMap transformers = new TransformerMap();\n+    \n+    public MixedListUnivariateImplTest(String name) {\n+        super(name);\n+        transformers = new TransformerMap();\n+\n+        transformers.putTransformer(Foo.class, new NumberTransformer() {\n+            public double transform(Object o) {\n+                return Double.parseDouble(((Foo) o).heresFoo());\n+            }\n+        });\n+\n+        transformers.putTransformer(Bar.class, new NumberTransformer() {\n+            public double transform(Object o) {\n+                return Double.parseDouble(((Bar) o).heresBar());\n+            }\n+\n+        });\n+\n+    }\n+\n+    public void setUp() {\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(MixedListUnivariateImplTest.class);\n+        suite.setName(\"Mixed List Tests\");\n+        return suite;\n+    }\n+\n+    /** test stats */\n+    public void testStats() {\n+        List externalList = new ArrayList();\n+\n+        StoreUnivariate u = new ListUnivariateImpl(externalList,transformers);\n+\n+        assertEquals(\"total count\", 0, u.getN(), tolerance);\n+        u.addValue(one);\n+        u.addValue(two);\n+        u.addValue(two);\n+        u.addValue(three);\n+        assertEquals(\"N\", n, u.getN(), tolerance);\n+        assertEquals(\"sum\", sum, u.getSum(), tolerance);\n+        assertEquals(\"sumsq\", sumSq, u.getSumsq(), tolerance);\n+        assertEquals(\"var\", var, u.getVariance(), tolerance);\n+        assertEquals(\"std\", std, u.getStandardDeviation(), tolerance);\n+        assertEquals(\"mean\", mean, u.getMean(), tolerance);\n+        assertEquals(\"min\", min, u.getMin(), tolerance);\n+        assertEquals(\"max\", max, u.getMax(), tolerance);\n+        u.clear();\n+        assertEquals(\"total count\", 0, u.getN(), tolerance);\n+    }\n+\n+    public void testN0andN1Conditions() throws Exception {\n+        List list = new ArrayList();\n+\n+        StoreUnivariate u = new ListUnivariateImpl(new ArrayList(),transformers);\n+\n+        assertTrue(\n+            \"Mean of n = 0 set should be NaN\",\n+            Double.isNaN(u.getMean()));\n+        assertTrue(\n+            \"Standard Deviation of n = 0 set should be NaN\",\n+            Double.isNaN(u.getStandardDeviation()));\n+        assertTrue(\n+            \"Variance of n = 0 set should be NaN\",\n+            Double.isNaN(u.getVariance()));\n+\n+        u.addValue(one);\n+\n+        assertTrue(\n+            \"Mean of n = 1 set should be value of single item n1, instead it is \" + u.getMean() ,\n+            u.getMean() == one);\n+            \n+        assertTrue(\n+            \"StdDev of n = 1 set should be zero, instead it is: \"\n+                + u.getStandardDeviation(),\n+            u.getStandardDeviation() == 0);\n+        assertTrue(\n+            \"Variance of n = 1 set should be zero\",\n+            u.getVariance() == 0);\n+    }\n+\n+    public void testSkewAndKurtosis() {\n+        ListUnivariateImpl u =\n+            new ListUnivariateImpl(new ArrayList(), transformers);\n+\n+        u.addObject(\"12.5\");\n+        u.addObject(new Integer(12));\n+        u.addObject(\"11.8\");\n+        u.addObject(\"14.2\");\n+        u.addObject(new Foo());\n+        u.addObject(\"14.5\");\n+        u.addObject(new Long(21));\n+        u.addObject(\"8.2\");\n+        u.addObject(\"10.3\");\n+        u.addObject(\"11.3\");\n+        u.addObject(new Float(14.1));\n+        u.addObject(\"9.9\");\n+        u.addObject(\"12.2\");\n+        u.addObject(new Bar());\n+        u.addObject(\"12.1\");\n+        u.addObject(\"11\");\n+        u.addObject(new Double(19.8));\n+        u.addObject(\"11\");\n+        u.addObject(\"10\");\n+        u.addObject(\"8.8\");\n+        u.addObject(\"9\");\n+        u.addObject(\"12.3\");\n+\n+\n+        assertEquals(\"mean\", 12.40455, u.getMean(), 0.0001);\n+        assertEquals(\"variance\", 10.00236, u.getVariance(), 0.0001);\n+        assertEquals(\"skewness\", 1.437424, u.getSkewness(), 0.0001);\n+        assertEquals(\"kurtosis\", 2.37719, u.getKurtosis(), 0.0001);\n+    }\n+\n+    public void testProductAndGeometricMean() throws Exception {\n+        ListUnivariateImpl u = new ListUnivariateImpl(new ArrayList(),transformers);\n+        u.setWindowSize(10);\n+\n+        u.addValue(1.0);\n+        u.addValue(2.0);\n+        u.addValue(3.0);\n+        u.addValue(4.0);\n+\n+        assertEquals(\n+            \"Geometric mean not expected\",\n+            2.213364,\n+            u.getGeometricMean(),\n+            0.00001);\n+\n+        // Now test rolling - UnivariateImpl should discount the contribution\n+        // of a discarded element\n+        for (int i = 0; i < 10; i++) {\n+            u.addValue(i + 2);\n+        }\n+        // Values should be (2,3,4,5,6,7,8,9,10,11)\n+        assertEquals(\n+            \"Geometric mean not expected\",\n+            5.755931,\n+            u.getGeometricMean(),\n+            0.00001);\n+\n+    }\n+\n+    public final class Foo {\n+        public String heresFoo() {\n+            return \"14.9\";\n+        }\n+    }\n+\n+    public final class Bar {\n+        public String heresBar() {\n+            return \"12.0\";\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/StatUtilsTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test cases for the {@link StatUtils} class.\n+ * @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:18 $\n+ */\n+\n+public final class StatUtilsTest extends TestCase {\n+\n+    private double one = 1;\n+    private float two = 2;\n+    private int three = 3;\n+    private double mean = 2;\n+    private double sumSq = 18;\n+    private double sum = 8;\n+    private double var = 0.666666666666666666667;\n+    private double std = Math.sqrt(var);\n+    private double n = 4;\n+    private double min = 1;\n+    private double max = 3;\n+    private double skewness = 0;\n+    private double kurtosis = 0.5;\n+    private int kClass = StoreUnivariate.LEPTOKURTIC;\n+    private double tolerance = 10E-15;\n+\n+    public StatUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp() {\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(StatUtilsTest.class);\n+        suite.setName(\"StatUtil Tests\");\n+        return suite;\n+    }\n+\n+    /** test stats */\n+    public void testStats() {\n+        double[] values = new double[] { one, two, two, three };\n+        assertEquals(\"sum\", sum, StatUtils.sum(values), tolerance);\n+        assertEquals(\"sumsq\", sumSq, StatUtils.sumSq(values), tolerance);\n+        assertEquals(\"var\", var, StatUtils.variance(values), tolerance);\n+        assertEquals(\"mean\", mean, StatUtils.mean(values), tolerance);\n+        assertEquals(\"min\", min, StatUtils.min(values), tolerance);\n+        assertEquals(\"max\", max, StatUtils.max(values), tolerance);\n+    }\n+\n+    public void testN0andN1Conditions() throws Exception {\n+        double[] values = new double[0];\n+\n+        assertTrue(\n+            \"Mean of n = 0 set should be NaN\",\n+            Double.isNaN(StatUtils.mean(values)));\n+        assertTrue(\n+            \"Variance of n = 0 set should be NaN\",\n+            Double.isNaN(StatUtils.variance(values)));\n+\n+        values = new double[] { one };\n+\n+        assertTrue(\n+            \"Mean of n = 1 set should be value of single item n1\",\n+            StatUtils.mean(values) == one);\n+        assertTrue(\n+            \"Variance of n = 1 set should be zero\",\n+            StatUtils.variance(values) == 0);\n+    }\n+\n+    public void testSkewAndKurtosis() {\n+\n+        double[] values =\n+            {\n+                12.5,\n+                12,\n+                11.8,\n+                14.2,\n+                14.9,\n+                14.5,\n+                21,\n+                8.2,\n+                10.3,\n+                11.3,\n+                14.1,\n+                9.9,\n+                12.2,\n+                12,\n+                12.1,\n+                11,\n+                19.8,\n+                11,\n+                10,\n+                8.8,\n+                9,\n+                12.3 };\n+\n+        assertEquals(\"mean\", 12.40455, StatUtils.mean(values), 0.0001);\n+        assertEquals(\"variance\", 10.00236, StatUtils.variance(values), 0.0001);\n+    }\n+\n+    public void testProductAndGeometricMean() throws Exception {\n+        double[] values = { 1.0, 2.0, 3.0, 4.0 };\n+\n+        assertEquals(\n+            \"Product not expected\",\n+            24.0,\n+            StatUtils.product(values),\n+            Double.MIN_VALUE);\n+    }\n+\n+    public void testArrayIndexConditions() throws Exception {\n+        double[] values = { 1.0, 2.0, 3.0, 4.0 };\n+\n+        assertEquals(\n+            \"Sum not expected\",\n+            5.0,\n+            StatUtils.sum(values, 1, 2),\n+            Double.MIN_VALUE);\n+        assertEquals(\n+            \"Sum not expected\",\n+            3.0,\n+            StatUtils.sum(values, 0, 2),\n+            Double.MIN_VALUE);\n+        assertEquals(\n+            \"Sum not expected\",\n+            7.0,\n+            StatUtils.sum(values, 2, 2),\n+            Double.MIN_VALUE);\n+\n+        try {\n+            StatUtils.sum(values, 2, 3);\n+            assertTrue(\"Didn't throw exception\", false);\n+        } catch (Exception e) {\n+            assertTrue(true);\n+        }\n+\n+        try {\n+            StatUtils.sum(values, -1, 2);\n+            assertTrue(\"Didn't throw exception\", false);\n+        } catch (Exception e) {\n+            assertTrue(true);\n+        }\n+\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.math.random.RandomData;\n+import org.apache.commons.math.random.RandomDataImpl;\n+\n+/**\n+ * Test cases for the {@link Univariate} class.\n+ *\n+ * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:18 $\n+ */\n+\n+public final class StoreUnivariateImplTest extends TestCase {\n+    private double one = 1;\n+    private float two = 2;\n+    private int three = 3;\n+    private double mean = 2;\n+    private double sumSq = 18;\n+    private double sum = 8;\n+    private double var = 0.666666666666666666667;\n+    private double std = Math.sqrt(var);\n+    private double n = 4;\n+    private double min = 1;\n+    private double max = 3;\n+    private double skewness = 0;\n+    private double kurtosis = 0.5;\n+    private int kClass = StoreUnivariate.LEPTOKURTIC;\n+    private double tolerance = 10E-15;\n+    \n+    public StoreUnivariateImplTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() {  \n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(StoreUnivariateImplTest.class);\n+        suite.setName(\"Frequency Tests\");\n+        return suite;\n+    }\n+    \n+    /** test stats */\n+    public void testStats() {\n+        StoreUnivariate u = new StoreUnivariateImpl(); \n+        assertEquals(\"total count\",0,u.getN(),tolerance);\n+        u.addValue(one);\n+        u.addValue(two);\n+        u.addValue(two);\n+        u.addValue(three);\n+        assertEquals(\"N\",n,u.getN(),tolerance);\n+        assertEquals(\"sum\",sum,u.getSum(),tolerance);\n+        assertEquals(\"sumsq\",sumSq,u.getSumsq(),tolerance);\n+        assertEquals(\"var\",var,u.getVariance(),tolerance);\n+        assertEquals(\"std\",std,u.getStandardDeviation(),tolerance);\n+        assertEquals(\"mean\",mean,u.getMean(),tolerance);\n+        assertEquals(\"min\",min,u.getMin(),tolerance);\n+        assertEquals(\"max\",max,u.getMax(),tolerance);\n+        u.clear();\n+        assertEquals(\"total count\",0,u.getN(),tolerance);    \n+    }     \n+    \n+    public void testN0andN1Conditions() throws Exception {\n+    \tStoreUnivariate u = new StoreUnivariateImpl();\n+    \t    \t\n+            assertTrue(\"Mean of n = 0 set should be NaN\", \n+                Double.isNaN( u.getMean() ) );\n+            assertTrue(\"Standard Deviation of n = 0 set should be NaN\", \n+                Double.isNaN( u.getStandardDeviation() ) );\n+            assertTrue(\"Variance of n = 0 set should be NaN\",\n+                Double.isNaN(u.getVariance() ) );\n+\n+            u.addValue(one);\n+\n+            assertTrue( \"Mean of n = 1 set should be value of single item n1\",\n+                u.getMean() == one);\n+            assertTrue( \"StdDev of n = 1 set should be zero, instead it is: \" \n+                + u.getStandardDeviation(), u.getStandardDeviation() == 0);\n+            assertTrue( \"Variance of n = 1 set should be zero\", \n+                u.getVariance() == 0);\t\n+    }\n+    \n+    public void testSkewAndKurtosis() {\n+    \tStoreUnivariate u = new StoreUnivariateImpl();\n+    \t\n+    \tdouble[] testArray = \n+        { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,\n+          9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };\n+  \t  \tfor( int i = 0; i < testArray.length; i++) {\n+  \t  \t\tu.addValue( testArray[i]);\n+  \t  \t}\n+  \t  \t\n+\t\tassertEquals(\"mean\", 12.40455, u.getMean(), 0.0001);\n+\t\tassertEquals(\"variance\", 10.00236, u.getVariance(), 0.0001);\n+\t\tassertEquals(\"skewness\", 1.437424, u.getSkewness(), 0.0001);\n+  \t  \tassertEquals(\"kurtosis\", 2.37719, u.getKurtosis(), 0.0001);\n+    }\n+\n+    public void testProductAndGeometricMean() throws Exception {\n+    \tStoreUnivariateImpl u = new StoreUnivariateImpl();\n+        u.setWindowSize(10);\n+    \t    \t\n+        u.addValue( 1.0 );\n+        u.addValue( 2.0 );\n+        u.addValue( 3.0 );\n+        u.addValue( 4.0 );\n+\n+        //assertEquals( \"Product not expected\", \n+        //    24.0, u.getProduct(), Double.MIN_VALUE );\n+        assertEquals( \"Geometric mean not expected\", \n+            2.213364, u.getGeometricMean(), 0.00001 );\n+\n+        // Now test rolling - UnivariateImpl should discount the contribution\n+        // of a discarded element\n+        for( int i = 0; i < 10; i++ ) {\n+            u.addValue( i + 2 );\n+        }\n+        // Values should be (2,3,4,5,6,7,8,9,10,11)\n+        \n+        //assertEquals( \"Product not expected\", 39916800.0, \n+        //    u.getProduct(), 0.00001 );\n+        assertEquals( \"Geometric mean not expected\", 5.755931, \n+            u.getGeometricMean(), 0.00001 );\n+    }\n+    \n+    public void testGetSortedValues() {\n+        double[] test1 = {5,4,3,2,1};\n+        double[] test2 = {5,2,1,3,4,0};\n+        double[] test3 = {1};\n+        int[] testi = null;\n+        double[] test4 = null;\n+        RandomData rd = new RandomDataImpl();\n+        tstGetSortedValues(test1);\n+        tstGetSortedValues(test2);\n+        tstGetSortedValues(test3);\n+        for (int i = 0; i < 10; i++) {\n+            testi = rd.nextPermutation(10,6);\n+            test4 = new double[6];\n+            for (int j = 0; j < testi.length; j++) {\n+                test4[j] = (double) testi[j];\n+            }\n+            tstGetSortedValues(test4);\n+        }\n+        for (int i = 0; i < 10; i++) {\n+            testi = rd.nextPermutation(10,5);\n+            test4 = new double[5];\n+            for (int j = 0; j < testi.length; j++) {\n+                test4[j] = (double) testi[j];\n+            }\n+            tstGetSortedValues(test4);\n+        }        \n+    }\n+    \n+        \n+    private void tstGetSortedValues(double[] test) {\n+        StoreUnivariateImpl u = new StoreUnivariateImpl();\n+        for (int i = 0; i < test.length; i++) {\n+            u.addValue(test[i]);\n+        }\n+        double[] sorted = u.getSortedValues();\n+        if (sorted.length != test.length) {\n+            fail(\"wrong length for sorted values array\");\n+        }\n+        for (int i = 0; i < sorted.length-1; i++) {\n+            if (sorted[i] > sorted[i+1]) {\n+                fail(\"sorted values out of sequence\");\n+            }\n+        }\n+    }\n+    \n+    public void testPercentiles() {\n+        double[] test = {5,4,3,2,1};\n+        StoreUnivariateImpl u = new StoreUnivariateImpl();\n+        for (int i = 0; i < test.length; i++) {\n+            u.addValue(test[i]);\n+        }\n+        assertEquals(\"expecting min\",1,u.getPercentile(5),10E-12);\n+        assertEquals(\"expecting max\",5,u.getPercentile(99),10E-12);\n+        assertEquals(\"expecting middle\",3,u.getPercentile(50),10E-12);\n+        try {\n+            double x = u.getPercentile(0);\n+            fail(\"expecting IllegalArgumentException for getPercentile(0)\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            double x = u.getPercentile(120);\n+            fail(\"expecting IllegalArgumentException for getPercentile(120)\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        \n+        u.clear();\n+        double[] test2 = {1,2,3,4};\n+        for (int i = 0; i < test2.length; i++) {\n+            u.addValue(test2[i]);\n+        }\n+        assertEquals(\"Q1\",1.25,u.getPercentile(25),10E-12);\n+        assertEquals(\"Q3\",3.75,u.getPercentile(75),10E-12);\n+        assertEquals(\"Q2\",2.5,u.getPercentile(50),10E-12);\n+        \n+        u.clear();\n+        double[] test3 = {1};\n+        for (int i = 0; i < test3.length; i++) {\n+            u.addValue(test3[i]);\n+        }\n+        assertEquals(\"Q1\",1,u.getPercentile(25),10E-12);\n+        assertEquals(\"Q3\",1,u.getPercentile(75),10E-12);\n+        assertEquals(\"Q2\",1,u.getPercentile(50),10E-12);\n+        \n+        u.clear();\n+        RandomData rd = new RandomDataImpl();\n+        int[] testi = rd.nextPermutation(100,100); // will contain 0-99\n+        for (int j = 0; j < testi.length; j++) {\n+            u.addValue((double) testi[j]);  //OK, laugh at me for the cast\n+        }\n+        for (int i = 1; i < 100; i++) {\n+            assertEquals(\"percentile \" + i,\n+                (double) i-1 + (double) i*(.01), u.getPercentile(i),10E-12);\n+        }\n+        \n+        u.clear();\n+        double[] test4 = {1,2,3,4,100};\n+        for (int i = 0; i < test4.length; i++) {\n+            u.addValue(test4[i]);\n+        }\n+        assertEquals(\"80th\",80.8,u.getPercentile(80),10E-12);\n+        \n+        u.clear();\n+        assertTrue(\"empty value set should return NaN\",\n+            Double.isNaN(u.getPercentile(50)));\n+    }\n+                                     \n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/TestStatisticTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+/**\n+ * Test cases for the TestStatistic class.\n+ *\n+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:18 $\n+ */\n+\n+public final class TestStatisticTest extends TestCase {\n+\n+    private TestStatisticImpl testStatistic = new TestStatisticImpl();\n+    \n+    public TestStatisticTest(String name) {\n+        super(name);\n+    }\n+    \n+    \n+    public void setUp() { \n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(TestStatisticTest.class);\n+        suite.setName(\"TestStatistic Tests\");\n+        return suite;\n+    }\n+\n+    public void testChiSquare() {\n+       double[] observed = {11,24,69,96};\n+       double[] expected = {8.2,25.2,65.8,100.8};\n+       assertEquals(\"chi-square statistic\", \n+           1.39743495,testStatistic.chiSquare(expected,observed),10E-5);\n+       \n+       double[] tooShortObs = {0};\n+       double[] tooShortEx = {1};\n+       try {\n+           testStatistic.chiSquare(tooShortObs,tooShortEx);\n+           fail(\"arguments too short, IllegalArgumentException expected\");\n+       } catch (IllegalArgumentException ex) {\n+           ;\n+       }\n+       \n+       try {\n+           testStatistic.chiSquareTest(tooShortObs,tooShortEx);\n+           fail(\"arguments too short, IllegalArgumentException expected\");\n+       } catch (IllegalArgumentException ex) {\n+           ;\n+       }\n+       \n+       double[] unMatchedObs = {0,1,2,3};\n+       double[] unMatchedEx = {1,1,2};\n+       try {\n+           testStatistic.chiSquare(unMatchedEx,unMatchedObs);\n+           fail(\"arrays have different lengths,\" + \n+                \" IllegalArgumentException expected\");\n+       } catch (IllegalArgumentException ex) {\n+           ;\n+       }       \n+       expected[0] = 0;\n+       try {\n+           testStatistic.chiSquareTest(expected, observed, .01);\n+           fail(\"bad expected count, IllegalArgumentException expected\");\n+       } catch (IllegalArgumentException ex) {\n+           ;\n+       }     \n+       /** from http://www.vsenvirginia.org/stat/classpractice/Voter_Preferences_CP.pdf */\n+       double[] observed1 = {504, 523, 72, 70, 31};\n+       double[] expected1 = {480, 540, 84, 60, 36};\n+       assertEquals(\"chi-square test statistic\", 5.81,\n+            testStatistic.chiSquare(expected1,observed1),10E-2);\n+       assertEquals(\"chi-square p-value\", 0.21, \n+        testStatistic.chiSquareTest(expected1, observed1),10E-2); \n+       assertTrue(\"chi-square test reject\", \n+        testStatistic.chiSquareTest(expected1, observed1, 0.3));\n+       assertTrue(\"chi-square test accept\", \n+        !testStatistic.chiSquareTest(expected1, observed1, 0.1));  \n+       try {\n+           testStatistic.chiSquareTest(expected1, observed1, 95);\n+           fail(\"alpha out of range, IllegalArgumentException expected\");\n+       } catch (IllegalArgumentException ex) {\n+           ;\n+       }\n+    }\n+       \n+    public void testT(){\n+\tdouble[] observed = {93.0, 103.0, 95.0, 101.0, 91.0, 105.0, 96.0,\n+            94.0, 101.0, 88.0, 98.0, 94.0, 101.0, 92.0, 95.0};\n+        double mu = 100.0;\n+        Univariate sampleStats = new UnivariateImpl();\n+        for (int i = 0; i < observed.length; i++) {\n+            sampleStats.addValue(observed[i]);\n+        }\n+        \n+        assertEquals(\"t statistic\", -2.82, testStatistic.t(mu, observed),\n+            10E-3);\n+        assertEquals(\"t statistic\", -2.82, testStatistic.t(mu, sampleStats),\n+            10E-3);\n+        \n+        double[] nullObserved = null;\n+        try {\n+            testStatistic.t(mu, nullObserved);\n+            fail(\"arguments too short, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        \n+        UnivariateImpl nullStats = null;\n+        try {\n+            testStatistic.t(mu, nullStats);\n+            fail(\"arguments too short, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        \n+        double[] emptyObs = {};\n+        try {\n+            testStatistic.t(mu, emptyObs);\n+            fail(\"arguments too short, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        \n+        Univariate emptyStats = new UnivariateImpl();\n+        try {\n+            testStatistic.t(mu, emptyStats);\n+            fail(\"arguments too short, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        \n+        double[] tooShortObs = {1.0};\n+        try {\n+            testStatistic.t(mu, tooShortObs);\n+            fail(\"arguments too short, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            testStatistic.tTest(mu, tooShortObs);\n+            fail(\"arguments too short, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        \n+        Univariate tooShortStats = new UnivariateImpl();\n+        tooShortStats.addValue(0d);\n+        tooShortStats.addValue(2d);\n+        try {\n+            testStatistic.t(mu, tooShortStats);\n+            fail(\"arguments too short, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            testStatistic.tTest(mu, tooShortStats);\n+            fail(\"arguments too short, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+            \n+        /** Moore and McCabe Example 8.3, p 516 */\n+        double[] oneSidedP = {2d, 0d, 6d, 6d, 3d, 3d, 2d, 3d, -6d, 6d, 6d, \n+            6d, 3d, 0d, 1d, 1d, 0d, 2d, 3d, 3d};\n+        Univariate oneSidedPStats = new UnivariateImpl();\n+        for (int i = 0; i < oneSidedP.length; i++) {\n+            oneSidedPStats.addValue(oneSidedP[i]);\n+        }\n+        assertEquals(\"one sample t stat\",3.86,\n+            testStatistic.t(0d,oneSidedP),0.01);\n+        assertEquals(\"one sample t stat\",3.86,\n+            testStatistic.t(0d,oneSidedPStats),0.01);\n+        assertEquals(\"one sample p value\",0.00052,\n+            testStatistic.tTest(0d,oneSidedP)/2d,10E-5);\n+        assertEquals(\"one sample p value\",0.00052,\n+            testStatistic.tTest(0d,oneSidedPStats)/2d,10E-5);\n+        assertTrue(\"one sample t-test reject\",\n+            testStatistic.tTest(0d,oneSidedP,0.01));\n+        assertTrue(\"one sample t-test reject\",\n+            testStatistic.tTest(0d,oneSidedPStats,0.01));\n+        assertTrue(\"one sample t-test accept\",\n+            !testStatistic.tTest(0d,oneSidedP,0.0001));\n+        assertTrue(\"one sample t-test accept\",\n+            !testStatistic.tTest(0d,oneSidedPStats,0.0001));\n+        try {\n+           testStatistic.tTest(0d,oneSidedP, 95);\n+           fail(\"alpha out of range, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+           ;\n+        }\n+        try {\n+           testStatistic.tTest(0d,oneSidedPStats, 95);\n+           fail(\"alpha out of range, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+           ;\n+        }   \n+        \n+        /** Moore and McCabe Example 8.12, p 552 */\n+        double[] sample1 = {7d, -4d, 18d, 17d, -3d, -5d, 1d, 10d, 11d, -2d};\n+        double[] sample2 = {-1d, 12d, -1d, -3d, 3d, -5d, 5d, 2d, -11d, -1d, -3d};\n+        Univariate sampleStats1 = new UnivariateImpl();\n+        for (int i = 0; i < sample1.length; i++) {\n+            sampleStats1.addValue(sample1[i]);\n+        }\n+        Univariate sampleStats2 = new UnivariateImpl();\n+        for (int i = 0; i < sample2.length; i++) {\n+            sampleStats2.addValue(sample2[i]);\n+        }\n+        //FIXME: textbook example reported t stat uses pooled variance\n+        // should replace with R-verified example\n+        assertEquals(\"two sample t stat\",1.634,\n+            testStatistic.t(sample1, sample2), 0.1); \n+        assertEquals(\"two sample t stat\",1.634,\n+            testStatistic.t(sampleStats1, sampleStats2), 0.1); \n+        // This test is OK, since book reports non-pooled exact p-value\n+        assertEquals(\"two sample p value\",0.059, \n+            testStatistic.tTest(sample1, sample2)/2d, 10E-3);\n+        assertEquals(\"two sample p value\",0.059, \n+            testStatistic.tTest(sampleStats1, sampleStats2)/2d, 10E-3);\n+        assertTrue(\"two sample t-test reject\",\n+            testStatistic.tTest(sample1, sample2, 0.2));\n+        assertTrue(\"two sample t-test reject\",\n+            testStatistic.tTest(sampleStats1, sampleStats2, 0.2));\n+        assertTrue(\"two sample t-test accept\",\n+            !testStatistic.tTest(sample1, sample2,0.1));  \n+        assertTrue(\"two sample t-test accept\",\n+            !testStatistic.tTest(sampleStats1, sampleStats2,0.1));  \n+        try {\n+           testStatistic.tTest(sample1, sample2, 95);\n+           fail(\"alpha out of range, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+           ;\n+        }\n+        try {\n+           testStatistic.tTest(sampleStats1, sampleStats2, 95);\n+           fail(\"alpha out of range, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+           ;\n+        }\n+        try {\n+           testStatistic.tTest(sample1, tooShortObs, .01);\n+           fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+           ;\n+        }\n+        try {\n+           testStatistic.tTest(sampleStats1, tooShortStats, .01);\n+           fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+           ;\n+        }\n+        try {\n+           testStatistic.tTest(sample1, tooShortObs);\n+           fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+           ;\n+        }\n+        try {\n+           testStatistic.tTest(sampleStats1, tooShortStats);\n+           fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+           ;\n+        }\n+        try {\n+           testStatistic.t(sample1, tooShortObs);\n+           fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+           ;\n+        }\n+        try {\n+           testStatistic.t(sampleStats1, tooShortStats);\n+           fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+           ;\n+        }\n+    }\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/UnivariateImplTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test cases for the {@link Univariate} class.\n+ *\n+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:18 $\n+ */\n+\n+public final class UnivariateImplTest extends TestCase {\n+    private double one = 1;\n+    private float twoF = 2;\n+    private long twoL = 2;\n+    private int three = 3;\n+    private double mean = 2;\n+    private double sumSq = 18;\n+    private double sum = 8;\n+    private double var = 0.666666666666666666667;\n+    private double std = Math.sqrt(var);\n+    private double n = 4;\n+    private double min = 1;\n+    private double max = 3;\n+    private double tolerance = 10E-15;\n+    \n+    public UnivariateImplTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() {  \n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(UnivariateImplTest.class);\n+        suite.setName(\"Frequency Tests\");\n+        return suite;\n+    }\n+    \n+    /** test stats */\n+    public void testStats() {\n+        UnivariateImpl u = new UnivariateImpl(); \n+        assertEquals(\"total count\",0,u.getN(),tolerance);\n+        u.addValue(one);\n+        u.addValue(twoF);\n+        u.addValue(twoL);\n+        u.addValue(three);\n+        assertEquals(\"N\",n,u.getN(),tolerance);\n+        assertEquals(\"sum\",sum,u.getSum(),tolerance);\n+        assertEquals(\"sumsq\",sumSq,u.getSumsq(),tolerance);\n+        assertEquals(\"var\",var,u.getVariance(),tolerance);\n+        assertEquals(\"std\",std,u.getStandardDeviation(),tolerance);\n+        assertEquals(\"mean\",mean,u.getMean(),tolerance);\n+        assertEquals(\"min\",min,u.getMin(),tolerance);\n+        assertEquals(\"max\",max,u.getMax(),tolerance);\n+        u.clear();\n+        assertEquals(\"total count\",0,u.getN(),tolerance);    \n+    }     \n+    \n+    public void testN0andN1Conditions() throws Exception {\n+    \tUnivariateImpl u = new UnivariateImpl();\n+        assertTrue(\"Mean of n = 0 set should be NaN\", \n+            Double.isNaN( u.getMean() ) );\n+\t\tassertTrue(\"Standard Deviation of n = 0 set should be NaN\", \n+            Double.isNaN( u.getStandardDeviation() ) );\n+\t\tassertTrue(\"Variance of n = 0 set should be NaN\", \n+            Double.isNaN(u.getVariance() ) );\n+\t\tassertTrue(\"skew of n = 0 set should be NaN\",\n+\t\t\tDouble.isNaN(u.getSkewness() ) );\t\n+\t\tassertTrue(\"kurtosis of n = 0 set should be NaN\", \n+\t\t\tDouble.isNaN(u.getKurtosis() ) );\t\t\n+\t\t\n+\t\n+\t\t/* n=1 */\n+\t\tu.addValue(one);\n+\t\tassertTrue(\"mean should be one (n = 1)\", \n+\t\t\tu.getMean() == one);\n+\t\tassertTrue(\"geometric should be one (n = 1) instead it is \" + u.getGeometricMean(), \n+\t\t\tu.getGeometricMean() == one);\n+\t\tassertTrue(\"Std should be zero (n = 1)\", \n+\t\t\tu.getStandardDeviation() == 0.0);\n+\t\tassertTrue(\"variance should be zero (n = 1)\", \n+\t\t\tu.getVariance() == 0.0);\n+\t\tassertTrue(\"skew should be zero (n = 1)\", \n+\t\t\tu.getSkewness() == 0.0);\n+\t\tassertTrue(\"kurtosis should be zero (n = 1)\", \n+\t\t\tu.getKurtosis() == 0.0);\t\t\n+\t\t\t\t\t\n+\t\t/* n=2 */\t\t\t\t\n+\t\tu.addValue(twoF);\n+\t\tassertTrue(\"Std should not be zero (n = 2)\", \n+\t\t\tu.getStandardDeviation() != 0.0);\n+\t\tassertTrue(\"variance should not be zero (n = 2)\", \n+\t\t\tu.getVariance() != 0.0);\n+\t\tassertTrue(\"skew should not be zero (n = 2)\", \n+\t\t\tu.getSkewness() == 0.0);\n+\t\tassertTrue(\"kurtosis should be zero (n = 2)\", \n+\t\t\tu.getKurtosis() == 0.0);\n+\n+\t\t/* n=3 */\n+\t\tu.addValue(twoL);\n+\t\tassertTrue(\"skew should not be zero (n = 3)\", \n+\t\t\tu.getSkewness() != 0.0);\n+\t\tassertTrue(\"kurtosis should be zero (n = 3)\", \n+\t\t\tu.getKurtosis() == 0.0);\n+        \n+\t\t/* n=4 */\n+\t\tu.addValue(three);\n+\t\tassertTrue(\"kurtosis should not be zero (n = 4)\", \n+\t\t\tu.getKurtosis() != 0.0);        \n+            \n+    }\n+\n+    public void testProductAndGeometricMean() throws Exception {\n+    \tUnivariateImpl u = new UnivariateImpl(10);\n+    \t    \t\n+        u.addValue( 1.0 );\n+        u.addValue( 2.0 );\n+        u.addValue( 3.0 );\n+        u.addValue( 4.0 );\n+\n+        assertEquals( \"Geometric mean not expected\", 2.213364, \n+            u.getGeometricMean(), 0.00001 );\n+\n+        // Now test rolling - UnivariateImpl should discount the contribution\n+        // of a discarded element\n+        for( int i = 0; i < 10; i++ ) {\n+            u.addValue( i + 2 );\n+        }\n+        // Values should be (2,3,4,5,6,7,8,9,10,11)\n+        \n+        assertEquals( \"Geometric mean not expected\", 5.755931, \n+            u.getGeometricMean(), 0.00001 );\n+    }\n+    \n+    public void testRollingMinMax() {\n+        UnivariateImpl u = new UnivariateImpl(3);\n+        u.addValue( 1.0 );\n+        u.addValue( 5.0 );\n+        u.addValue( 3.0 );\n+        u.addValue( 4.0 ); // discarding min\n+        assertEquals( \"min not expected\", 3.0, \n+            u.getMin(), Double.MIN_VALUE);\n+        u.addValue(1.0);  // discarding max\n+        assertEquals( \"max not expected\", 4.0, \n+            u.getMax(), Double.MIN_VALUE);\n+    }\n+    \n+    public void testNaNContracts() {\n+        UnivariateImpl u = new UnivariateImpl();\n+        double nan = Double.NaN;\n+        assertTrue(\"mean not NaN\",Double.isNaN(u.getMean())); \n+        assertTrue(\"min not NaN\",Double.isNaN(u.getMin())); \n+        assertTrue(\"std dev not NaN\",Double.isNaN(u.getStandardDeviation())); \n+        assertTrue(\"var not NaN\",Double.isNaN(u.getVariance())); \n+        assertTrue(\"geom mean not NaN\",Double.isNaN(u.getGeometricMean()));\n+        \n+        u.addValue(1.0);\n+        \n+        assertEquals( \"mean not expected\", 1.0, \n+            u.getMean(), Double.MIN_VALUE);\n+        assertEquals( \"variance not expected\", 0.0, \n+            u.getVariance(), Double.MIN_VALUE);\n+        assertEquals( \"geometric mean not expected\", 1.0, \n+            u.getGeometricMean(), Double.MIN_VALUE);\n+        \n+        u.addValue(-1.0);\n+        \n+        assertTrue(\"geom mean not NaN\",Double.isNaN(u.getGeometricMean()));\n+        \n+        u.addValue(0.0);\n+        \n+        assertTrue(\"geom mean not NaN\",Double.isNaN(u.getGeometricMean()));\n+        \n+        //FiXME: test all other NaN contract specs\n+    }\n+\n+    public void testSkewAndKurtosis() {\n+        Univariate u = new UnivariateImpl();\n+        \n+        double[] testArray = \n+        { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,\n+          9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };\n+        for( int i = 0; i < testArray.length; i++) {\n+            u.addValue( testArray[i]);\n+        }\n+        \n+        assertEquals(\"mean\", 12.40455, u.getMean(), 0.0001);\n+        assertEquals(\"variance\", 10.00236, u.getVariance(), 0.0001);\n+        assertEquals(\"skewness\", 1.437424, u.getSkewness(), 0.0001);\n+        assertEquals(\"kurtosis\", 2.37719, u.getKurtosis(), 0.0001);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/univariate/InteractionTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate;\n+\n+import org.apache.commons.math.stat.univariate.moment.FourthMoment;\n+import org.apache.commons.math.stat.univariate.moment.Kurtosis;\n+import org.apache.commons.math.stat.univariate.moment.Mean;\n+import org.apache.commons.math.stat.univariate.moment.Skewness;\n+import org.apache.commons.math.stat.univariate.moment.Variance;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:23 $\n+ */\n+public class InteractionTest extends TestCase {\n+\n+    protected double mean = 12.40454545454550;\n+    protected double var = 10.00235930735930;\n+    protected double skew = 1.437423729196190;\n+    protected double kurt = 2.377191264804700;\n+\n+    protected double tolerance = 10E-12;\n+\n+    protected double[] testArray =\n+        {\n+            12.5,\n+            12,\n+            11.8,\n+            14.2,\n+            14.9,\n+            14.5,\n+            21,\n+            8.2,\n+            10.3,\n+            11.3,\n+            14.1,\n+            9.9,\n+            12.2,\n+            12,\n+            12.1,\n+            11,\n+            19.8,\n+            11,\n+            10,\n+            8.8,\n+            9,\n+            12.3 };\n+\n+    public InteractionTest(String name) {\n+        super(name);\n+    }\n+\n+\n+    public void testInteraction() {\n+        \n+        FourthMoment m4 = new FourthMoment();\n+        Mean m = new Mean(m4);\n+        Variance v = new Variance(m4);\n+        Skewness s= new Skewness(m4);\n+        Kurtosis k = new Kurtosis(m4);\n+\n+        for (int i = 0; i < testArray.length; i++){\n+            m4.increment(testArray[i]);\n+            m.increment(testArray[i]);\n+            v.increment(testArray[i]);\n+            s.increment(testArray[i]);\n+            k.increment(testArray[i]);\n+        }\n+        \n+        assertEquals(mean,m.getResult(),tolerance);\n+        assertEquals(var,v.getResult(),tolerance);\n+        assertEquals(skew ,s.getResult(),tolerance);\n+        assertEquals(kurt,k.getResult(),tolerance);\n+\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate;\n+\n+\n+/**\n+ * Test cases for the {@link UnivariateStatistic} class.\n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:23 $\n+ */\n+public abstract class StorelessUnivariateStatisticAbstractTest\n+    extends UnivariateStatisticAbstractTest {\n+\n+    public StorelessUnivariateStatisticAbstractTest(String name) {\n+        super(name);\n+    }\n+\n+    public abstract UnivariateStatistic getUnivariateStatistic();\n+\n+    public abstract double expectedValue();\n+\n+    public void testIncrementation() throws Exception {\n+\n+        StorelessUnivariateStatistic statistic =\n+            (StorelessUnivariateStatistic) getUnivariateStatistic();\n+\n+        statistic.clear();\n+\n+        for (int i = 0; i < testArray.length; i++) {\n+            statistic.increment(testArray[i]);\n+        }\n+\n+        assertEquals(expectedValue(), statistic.getResult(), getTolerance());\n+        \n+        statistic.clear();\n+\n+        assertTrue(Double.isNaN(statistic.getResult()));\n+        \n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test cases for the {@link UnivariateStatistic} class.\n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:23 $\n+ */\n+public abstract class UnivariateStatisticAbstractTest extends TestCase {\n+\n+    protected double mean = 12.40454545454550;\n+    protected double geoMean = 12.070589161633011;\n+\n+    protected double var = 10.00235930735930;\n+    protected double std = Math.sqrt(var);\n+    protected double skew = 1.437423729196190;\n+    protected double kurt = 2.377191264804700;\n+\n+    protected double min = 8.2;\n+    protected double max = 21;\n+    protected double median = 12;\n+    protected double percentile5 = 8.81;\n+    protected double percentile95 = 19.555;\n+\n+    protected double product = 628096400563833200000000.0;\n+    protected double sumLog = 54.79698061164520;\n+    protected double sumSq = 3595.250;\n+    protected double sum = 272.90;\n+\n+    protected double tolerance = 10E-12;\n+\n+    protected double[] testArray =\n+        {\n+            12.5,\n+            12,\n+            11.8,\n+            14.2,\n+            14.9,\n+            14.5,\n+            21,\n+            8.2,\n+            10.3,\n+            11.3,\n+            14.1,\n+            9.9,\n+            12.2,\n+            12,\n+            12.1,\n+            11,\n+            19.8,\n+            11,\n+            10,\n+            8.8,\n+            9,\n+            12.3 };\n+\n+    public UnivariateStatisticAbstractTest(String name) {\n+        super(name);\n+    }\n+\n+    public abstract UnivariateStatistic getUnivariateStatistic();\n+\n+    public abstract double expectedValue();\n+\n+    public double getTolerance() {\n+        return tolerance;\n+    }\n+\n+    public void testEvaluation() throws Exception {\n+        assertEquals(\n+            expectedValue(),\n+            getUnivariateStatistic().evaluate(testArray),\n+            getTolerance());\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.moment;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;\n+import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n+\n+/**\n+ * Test cases for the {@link UnivariateStatistic} class.\n+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:21 $\n+ */\n+public class GeometricMeanTest extends StorelessUnivariateStatisticAbstractTest{\n+\n+    protected GeometricMean stat;\n+    \n+    /**\n+     * @param name\n+     */\n+    public GeometricMeanTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(GeometricMeanTest.class);\n+        suite.setName(\"Mean  Tests\");\n+        return suite;\n+    }\n+    \n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()\n+     */\n+    public UnivariateStatistic getUnivariateStatistic() {\n+       \n+        if(stat == null)\n+            stat = new GeometricMean();\n+            \n+        return stat;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()\n+     */\n+    public double expectedValue() {\n+        return this.geoMean;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.moment;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;\n+import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n+\n+/**\n+ * Test cases for the {@link UnivariateStatistic} class.\n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $\n+ */\n+public class KurtosisTest extends StorelessUnivariateStatisticAbstractTest{\n+\n+    protected Kurtosis stat;\n+    \n+    /**\n+     * @param name\n+     */\n+    public KurtosisTest(String name) {\n+        super(name);\n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(KurtosisTest.class);\n+        suite.setName(\"Kurtosis  Tests\");\n+        return suite;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()\n+     */\n+    public UnivariateStatistic getUnivariateStatistic() {\n+       \n+        if(stat == null)\n+            stat = new Kurtosis();\n+            \n+        return stat;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()\n+     */\n+    public double expectedValue() {\n+        return this.kurt;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.moment;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;\n+import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n+\n+/**\n+ * Test cases for the {@link UnivariateStatistic} class.\n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $\n+ */\n+public class MeanTest extends StorelessUnivariateStatisticAbstractTest{\n+\n+    protected Mean stat;\n+    \n+    /**\n+     * @param name\n+     */\n+    public MeanTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(MeanTest.class);\n+        suite.setName(\"Mean  Tests\");\n+        return suite;\n+    }\n+    \n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()\n+     */\n+    public UnivariateStatistic getUnivariateStatistic() {\n+       \n+        if(stat == null)\n+            stat = new Mean();\n+            \n+        return stat;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()\n+     */\n+    public double expectedValue() {\n+        return this.mean;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.moment;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;\n+import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n+\n+/**\n+ * Test cases for the {@link UnivariateStatistic} class.\n+ * \n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $\n+ */\n+public class SkewnessTest extends StorelessUnivariateStatisticAbstractTest{\n+\n+    protected Skewness stat;\n+    \n+    /**\n+     * @param name\n+     */\n+    public SkewnessTest(String name) {\n+        super(name);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()\n+     */\n+    public UnivariateStatistic getUnivariateStatistic() {\n+       \n+        if(stat == null)\n+            stat = new Skewness();\n+            \n+        return stat;\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(SkewnessTest.class);\n+        suite.setName(\"Skewness Tests\");\n+        return suite;\n+    }\n+    \n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()\n+     */\n+    public double expectedValue() {\n+        return this.skew;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.moment;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;\n+import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n+\n+/**\n+ * Test cases for the {@link UnivariateStatistic} class.\n+ * \n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $\n+ */\n+public class StandardDeviationTest extends StorelessUnivariateStatisticAbstractTest{\n+\n+    protected StandardDeviation stat;\n+    \n+    /**\n+     * @param name\n+     */\n+    public StandardDeviationTest(String name) {\n+        super(name);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()\n+     */\n+    public UnivariateStatistic getUnivariateStatistic() {\n+       \n+        if(stat == null)\n+            stat = new StandardDeviation();\n+            \n+        return stat;\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(StandardDeviationTest.class);\n+        suite.setName(\"StandardDeviation Tests\");\n+        return suite;\n+    }\n+    \n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()\n+     */\n+    public double expectedValue() {\n+        return this.std;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.moment;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;\n+import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n+\n+/**\n+ * Test cases for the {@link UnivariateStatistic} class.\n+ * \n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $\n+ */\n+public class VarianceTest extends StorelessUnivariateStatisticAbstractTest{\n+\n+    protected Variance stat;\n+    \n+    /**\n+     * @param name\n+     */\n+    public VarianceTest(String name) {\n+        super(name);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()\n+     */\n+    public UnivariateStatistic getUnivariateStatistic() {\n+       \n+        if(stat == null)\n+            stat = new Variance();\n+            \n+        return stat;\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(VarianceTest.class);\n+        suite.setName(\"Variance Tests\");\n+        return suite;\n+    }\n+    \n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()\n+     */\n+    public double expectedValue() {\n+        return this.var;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.rank;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;\n+import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n+\n+/**\n+ * Test cases for the {@link UnivariateStatistic} class.\n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $\n+ */\n+public class MaxTest extends StorelessUnivariateStatisticAbstractTest{\n+\n+    protected Max stat;\n+    \n+    /**\n+     * @param name\n+     */\n+    public MaxTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(MaxTest.class);\n+        suite.setName(\"Max  Tests\");\n+        return suite;\n+    }\n+    \n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()\n+     */\n+    public UnivariateStatistic getUnivariateStatistic() {\n+       \n+        if(stat == null)\n+            stat = new Max();\n+            \n+        return stat;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()\n+     */\n+    public double expectedValue() {\n+        return this.max;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.rank;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n+import org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest;\n+\n+/**\n+ * Test cases for the {@link UnivariateStatistic} class.\n+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:21 $\n+ */\n+public class MedianTest extends UnivariateStatisticAbstractTest{\n+\n+    protected Median stat;\n+    \n+    /**\n+     * @param name\n+     */\n+    public MedianTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(MedianTest.class);\n+        suite.setName(\"Median  Tests\");\n+        return suite;\n+    }\n+    \n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()\n+     */\n+    public UnivariateStatistic getUnivariateStatistic() {\n+       \n+        if(stat == null)\n+            stat = new Median();\n+            \n+        return stat;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()\n+     */\n+    public double expectedValue() {\n+        return this.median;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.rank;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;\n+import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n+\n+/**\n+ * Test cases for the {@link UnivariateStatistic} class.\n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $\n+ */\n+public class MinTest extends StorelessUnivariateStatisticAbstractTest{\n+\n+    protected Min stat;\n+    \n+    /**\n+     * @param name\n+     */\n+    public MinTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(MinTest.class);\n+        suite.setName(\"Min  Tests\");\n+        return suite;\n+    }\n+    \n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()\n+     */\n+    public UnivariateStatistic getUnivariateStatistic() {\n+       \n+        if(stat == null)\n+            stat = new Min();\n+            \n+        return stat;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()\n+     */\n+    public double expectedValue() {\n+        return this.min;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.rank;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n+import org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest;\n+\n+/**\n+ * Test cases for the {@link UnivariateStatistic} class.\n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $\n+ */\n+public class PercentileTest extends UnivariateStatisticAbstractTest{\n+\n+    protected Percentile stat;\n+    \n+    /**\n+     * @param name\n+     */\n+    public PercentileTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(PercentileTest.class);\n+        suite.setName(\"Percentile Tests\");\n+        return suite;\n+    }\n+    \n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()\n+     */\n+    public UnivariateStatistic getUnivariateStatistic() {\n+       \n+        if(stat == null)\n+            stat = new Percentile(95.0);\n+            \n+        return stat;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()\n+     */\n+    public double expectedValue() {\n+        // TODO: fix this bad calculation in Percentile\n+        return 20.82;\n+    }\n+\n+    public void testHighPercentile(){\n+        double[] d = new double[]{1, 2, 3};\n+        Percentile p = new Percentile(75);\n+        assertEquals(3.0, p.evaluate(d), 1.0e-5);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.summary;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;\n+import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n+\n+/**\n+ * Test cases for the {@link UnivariateStatistic} class.\n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:22 $\n+ */\n+public class ProductTest extends StorelessUnivariateStatisticAbstractTest{\n+\n+    protected Product stat;\n+    \n+    /**\n+     * @param name\n+     */\n+    public ProductTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(ProductTest.class);\n+        suite.setName(\"Product Tests\");\n+        return suite;\n+    }\n+    \n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()\n+     */\n+    public UnivariateStatistic getUnivariateStatistic() {\n+       \n+        if(stat == null)\n+            stat = new Product();\n+            \n+        return stat;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()\n+     */\n+    public double expectedValue() {\n+        return this.product;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.summary;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;\n+import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n+\n+/**\n+ * Test cases for the {@link UnivariateStatistic} class.\n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:22 $\n+ */\n+public class SumLogTest extends StorelessUnivariateStatisticAbstractTest{\n+\n+    protected SumOfLogs stat;\n+    \n+    /**\n+     * @param name\n+     */\n+    public SumLogTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(SumLogTest.class);\n+        suite.setName(\"SumLog Tests\");\n+        return suite;\n+    }\n+    \n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()\n+     */\n+    public UnivariateStatistic getUnivariateStatistic() {\n+       \n+        if(stat == null)\n+            stat = new SumOfLogs();\n+            \n+        return stat;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()\n+     */\n+    public double expectedValue() {\n+        return this.sumLog;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.summary;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;\n+import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n+\n+/**\n+ * Test cases for the {@link UnivariateStatistic} class.\n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:22 $\n+ */\n+public class SumSqTest extends StorelessUnivariateStatisticAbstractTest{\n+\n+    protected SumOfSquares stat;\n+    \n+    /**\n+     * @param name\n+     */\n+    public SumSqTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(SumSqTest.class);\n+        suite.setName(\"SumSq Tests\");\n+        return suite;\n+    }\n+    \n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()\n+     */\n+    public UnivariateStatistic getUnivariateStatistic() {\n+       \n+        if(stat == null)\n+            stat = new SumOfSquares();\n+            \n+        return stat;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()\n+     */\n+    public double expectedValue() {\n+        return this.sumSq;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate.summary;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;\n+import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n+\n+/**\n+ * Test cases for the {@link UnivariateStatistic} class.\n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:22 $\n+ */\n+public class SumTest extends StorelessUnivariateStatisticAbstractTest{\n+\n+    protected Sum stat;\n+    \n+    /**\n+     * @param name\n+     */\n+    public SumTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(SumTest.class);\n+        suite.setName(\"Sum Tests\");\n+        return suite;\n+    }\n+    \n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()\n+     */\n+    public UnivariateStatistic getUnivariateStatistic() {\n+       \n+        if(stat == null)\n+            stat = new Sum();\n+            \n+        return stat;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()\n+     */\n+    public double expectedValue() {\n+        return this.sum;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/util/BeanTransformerTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.util;\n+\n+import org.apache.commons.math.TestUtils;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:23 $\n+ */\n+public class BeanTransformerTest extends TestCase {\n+    \n+    /**\n+     *\n+     */\n+    public void testConstructor(){\n+        BeanTransformer b = new BeanTransformer();\n+        assertNull(b.getPropertyName());\n+    }\n+    \n+    /**\n+     *\n+     */\n+    public void testConstructorString(){\n+        String name = \"property\";\n+        BeanTransformer b = new BeanTransformer(name);\n+        assertEquals(name, b.getPropertyName());\n+    }\n+    \n+    /**\n+     *\n+     */\n+    public void testSetPropertyName(){\n+        String name = \"property\";\n+        BeanTransformer b = new BeanTransformer();\n+        b.setPropertyName(name);\n+        assertEquals(name, b.getPropertyName());\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testTransformNoSuchMethod(){\n+        BeanTransformer b = new BeanTransformer(\"z\");\n+        TestBean target = new TestBean();\n+        double value = b.transform(target);\n+        TestUtils.assertEquals(Double.NaN, value, 1.0e-2);\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testTransform(){\n+        BeanTransformer b = new BeanTransformer(\"x\");\n+        TestBean target = new TestBean();\n+        double value = b.transform(target);\n+        TestUtils.assertEquals(1.0, value, 1.0e-2);\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testTransformInvocationError(){\n+        BeanTransformer b = new BeanTransformer(\"z\");\n+        TestBean target = new TestBean();\n+        double value = b.transform(target);\n+        TestUtils.assertEquals(Double.NaN, value, 1.0e-2);\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testTransformInvalidType(){\n+        BeanTransformer b = new BeanTransformer(\"y\");\n+        TestBean target = new TestBean();\n+        try {\n+            b.transform(target);\n+            fail();\n+        } catch(ClassCastException ex){\n+            // success\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/util/ContinuedFractionTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.util;\n+\n+import org.apache.commons.math.MathException;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:23 $\n+ */\n+public class ContinuedFractionTest extends TestCase {\n+\t/**\n+\t * Constructor for ContinuedFractionTest.\n+\t * @param name\n+\t */\n+\tpublic ContinuedFractionTest(String name) {\n+\t\tsuper(name);\n+\t}\n+\n+\tpublic void testGoldenRation(){\n+        ContinuedFraction cf = new ContinuedFraction() {\n+\t\t\tpublic double getA(int n, double x) {\n+\t\t\t\treturn 1.0;\n+\t\t\t}\n+\n+\t\t\tpublic double getB(int n, double x) {\n+\t\t\t\treturn 1.0;\n+\t\t\t}\n+\t\t};\n+        \n+        try {\n+            double gr = cf.evaluate(0.0, 10e-9);\n+            assertEquals(1.61803399, gr, 10e-9);\n+        } catch (MathException e) {\n+            fail(e.getMessage());\n+        }\n+\t}\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.util;\n+\n+\n+/**\n+ * This class contains test cases for the ExpandableDoubleArray.\n+ * \n+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:23 $\n+ */\n+public class ContractableDoubleArrayTest extends ExpandableDoubleArrayTest {\n+\n+\tpublic ContractableDoubleArrayTest(String name) {\n+\t\tsuper( name );\n+\t}\n+\t\n+\t/* (non-Javadoc)\n+\t * @see junit.framework.TestCase#setUp()\n+\t */\n+\tprotected void setUp() throws Exception {\n+\t\tda = new ContractableDoubleArray();\n+\t\tra = new ContractableDoubleArray();\n+\t}\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/util/DefaultTransformerTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.util;\n+\n+import java.math.BigDecimal;\n+\n+import org.apache.commons.math.TestUtils;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:23 $\n+ */\n+public class DefaultTransformerTest extends TestCase {\n+    /**\n+     * \n+     */\n+    public void testTransformDouble(){\n+        double expected = 1.0;\n+        Double input = new Double(expected);\n+        DefaultTransformer t = new DefaultTransformer();\n+        assertEquals(expected, t.transform(input), 1.0e-4);\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testTransformNull(){\n+        double expected = Double.NaN;\n+        DefaultTransformer t = new DefaultTransformer();\n+        TestUtils.assertEquals(expected, t.transform(null), 1.0e-4);\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testTransformInteger(){\n+        double expected = 1.0;\n+        Integer input = new Integer(1);\n+        DefaultTransformer t = new DefaultTransformer();\n+        assertEquals(expected, t.transform(input), 1.0e-4);\n+    }        \n+    \n+    /**\n+     * \n+     */\n+    public void testTransformBigDecimal(){\n+        double expected = 1.0;\n+        BigDecimal input = new BigDecimal(\"1.0\");\n+        DefaultTransformer t = new DefaultTransformer();\n+        assertEquals(expected, t.transform(input), 1.0e-4);\n+    }        \n+    \n+    /**\n+     * \n+     */\n+    public void testTransformString(){\n+        double expected = 1.0;\n+        String input = \"1.0\";\n+        DefaultTransformer t = new DefaultTransformer();\n+        assertEquals(expected, t.transform(input), 1.0e-4);\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testTransformObject(){\n+        double expected = Double.NaN;\n+        Boolean input = Boolean.TRUE;\n+        DefaultTransformer t = new DefaultTransformer();\n+        TestUtils.assertEquals(expected, t.transform(input), 1.0e-4);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.util;\n+\n+import org.apache.commons.math.stat.StatUtils;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * This class contains test cases for the ExpandableDoubleArray.\n+ * \n+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:23 $\n+ */\n+public abstract class DoubleArrayAbstractTest extends TestCase {\n+\n+\tprotected DoubleArray da = null;\n+\n+\t// Array used to test rolling\n+\tprotected DoubleArray ra = null;\n+\n+\tpublic DoubleArrayAbstractTest(String name) {\n+\t\tsuper(name);\n+\t}\n+\n+\tpublic void testAdd1000() {\n+\n+\t\tfor (int i = 0; i < 1000; i++) {\n+\t\t\tda.addElement(i);\n+\t\t}\n+\n+\t\tassertEquals(\n+\t\t\t\"Number of elements should be equal to 1000 after adding 1000 values\",\n+\t\t\t1000,\n+\t\t\tda.getNumElements());\n+\n+\t\tassertEquals(\n+\t\t\t\"The element at the 56th index should be 56\",\n+\t\t\t56.0,\n+\t\t\tda.getElement(56),\n+\t\t\tDouble.MIN_VALUE);\n+\n+\t}\n+\n+\tpublic void testGetValues() {\n+\t\tdouble[] controlArray = { 2.0, 4.0, 6.0 };\n+\n+\t\tda.addElement(2.0);\n+\t\tda.addElement(4.0);\n+\t\tda.addElement(6.0);\n+\t\tdouble[] testArray = da.getElements();\n+\n+\t\tfor (int i = 0; i < da.getNumElements(); i++) {\n+\t\t\tassertEquals(\n+\t\t\t\t\"The testArray values should equal the controlArray values, index i: \"\n+\t\t\t\t\t+ i\n+\t\t\t\t\t+ \" does not match\",\n+\t\t\t\ttestArray[i],\n+\t\t\t\tcontrolArray[i],\n+\t\t\t\tDouble.MIN_VALUE);\n+\t\t}\n+\n+\t}\n+\n+\tpublic void testAddElementRolling() {\n+\t\tra.addElement(0.5);\n+\t\tra.addElement(1.0);\n+\t\tra.addElement(1.0);\n+\t\tra.addElement(1.0);\n+\t\tra.addElement(1.0);\n+\t\tra.addElement(1.0);\n+\t\tra.addElementRolling(2.0);\n+\n+\t\tassertEquals(\n+\t\t\t\"There should be 6 elements in the eda\",\n+\t\t\t6,\n+\t\t\tra.getNumElements());\n+\t\tassertEquals(\n+\t\t\t\"The max element should be 2.0\",\n+\t\t\t2.0,\n+            StatUtils.max(ra.getElements()),\n+\t\t\tDouble.MIN_VALUE);\n+\t\tassertEquals(\n+\t\t\t\"The min element should be 1.0\",\n+\t\t\t1.0,\n+            StatUtils.min(ra.getElements()),\n+\t\t\tDouble.MIN_VALUE);\n+\n+\t\tfor (int i = 0; i < 1024; i++) {\n+\t\t\tra.addElementRolling(i);\n+\t\t}\n+\n+\t\tassertEquals(\n+\t\t\t\"We just inserted 1024 rolling elements, num elements should still be 6\",\n+\t\t\t6,\n+\t\t\tra.getNumElements());\n+\t}\n+\n+\tpublic void testMinMax() {\n+\t\tda.addElement(2.0);\n+\t\tda.addElement(22.0);\n+\t\tda.addElement(-2.0);\n+\t\tda.addElement(21.0);\n+\t\tda.addElement(22.0);\n+\t\tda.addElement(42.0);\n+\t\tda.addElement(62.0);\n+\t\tda.addElement(22.0);\n+\t\tda.addElement(122.0);\n+\t\tda.addElement(1212.0);\n+\n+\t\tassertEquals(\"Min should be -2.0\", -2.0, StatUtils.min(da.getElements()), Double.MIN_VALUE);\n+\t\tassertEquals(\n+\t\t\t\"Max should be 1212.0\",\n+\t\t\t1212.0,\n+            StatUtils.max(da.getElements()),\n+\t\t\tDouble.MIN_VALUE);\n+\t}\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.util;\n+\n+\n+/**\n+ * This class contains test cases for the ExpandableDoubleArray.\n+ * \n+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:23 $\n+ */\n+public class ExpandableDoubleArrayTest extends DoubleArrayAbstractTest {\n+\n+\tpublic ExpandableDoubleArrayTest(String name) {\n+\t\tsuper( name );\n+\t}\n+\t\n+\t/* (non-Javadoc)\n+\t * @see junit.framework.TestCase#setUp()\n+\t */\n+\tprotected void setUp() throws Exception {\n+\t\tda = new ExpandableDoubleArray();\n+\t\tra = new ExpandableDoubleArray();\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see junit.framework.TestCase#tearDown()\n+\t */\n+\tprotected void tearDown() throws Exception {\n+\t\tda = null;\n+\t\tra = null;\n+\t}\n+\t\n+\t\n+\t/** TEST NORMAL OPERATIONS - calling super class test and then checking internal\n+\t *   storage **/\n+\t\n+\t\n+\tpublic void testSetElementArbitraryExpansion() {\n+\t\tdouble[] controlArray = {2.0, 4.0, 6.0};\n+\t\t\n+\t\tda.addElement(2.0);\n+\t\tda.addElement(4.0);\n+\t\tda.addElement(6.0);\n+\t\tda.setElement(1, 3.0);\n+\t\t\n+\t\t// Expand the array arbitrarily to 1000 items\n+\t\tda.setElement(1000, 3.4);\n+\n+\t\tassertEquals( \"The number of elements should now be 1001, it isn't\", da.getNumElements(), 1001);\n+\t\t\n+\t\tassertEquals( \"Uninitialized Elements are default value of 0.0, index 766 wasn't\", 0.0,\n+\t\t\t\t\t\t\tda.getElement( 760 ), Double.MIN_VALUE );\n+\t\t\n+\t\tassertEquals( \"The 1000th index should be 3.4, it isn't\", 3.4, da.getElement(1000), Double.MIN_VALUE );\n+\t\tassertEquals( \"The 0th index should be 2.0, it isn't\", 2.0, da.getElement(0), Double.MIN_VALUE);\t\t\n+\t\t\n+\t}\n+\t\t\n+\tpublic void testAdd1000() {\n+\t\tsuper.testAdd1000();\n+\t\tassertEquals(\"Internal Storage length should be 1024 if we started out with initial capacity of \" +\n+\t\t\t\"16 and an expansion factor of 2.0\",\n+\t\t\t\t\t\t\t1024, ((ExpandableDoubleArray) da).getInternalLength());\n+\t}\n+\t\n+\tpublic void testAddElementRolling() {\n+\t\tsuper.testAddElementRolling();\n+\t}\n+\n+\tpublic void testSetNumberOfElements() {\n+\t\tda.addElement( 1.0 );\n+\t\tda.addElement( 1.0 );\n+\t\tda.addElement( 1.0 );\n+\t\tda.addElement( 1.0 );\n+\t\tda.addElement( 1.0 );\n+\t\tda.addElement( 1.0 );\n+\t\tassertEquals( \"Number of elements should equal 6\", da.getNumElements(), 6);\n+\t\t\n+\t\t((ExpandableDoubleArray) da).setNumElements( 3 );\n+\t\tassertEquals( \"Number of elements should equal 3\", da.getNumElements(), 3);\n+\t\t\n+\t\ttry {\n+\t\t\t((ExpandableDoubleArray) da).setNumElements( -3 );\n+\t\t\tfail( \"Setting number of elements to negative should've thrown an exception\");\n+\t\t} catch( IllegalArgumentException iae ) {\n+\t\t}\n+\n+\t\t((ExpandableDoubleArray) da).setNumElements(1024);\n+\t\tassertEquals( \"Number of elements should now be 1024\", da.getNumElements(), 1024);\n+\t\tassertEquals( \"Element 453 should be a default double\", da.getElement( 453 ), 0.0, Double.MIN_VALUE);\n+\t\t\t\t\n+\t}\n+\n+\t/** TESTS WHICH FOCUS ON ExpandableSpecific internal storage */\n+\n+\tpublic void testWithInitialCapacity() {\n+\n+\t\tExpandableDoubleArray eDA2 = new ExpandableDoubleArray(2);\n+\t\tassertEquals(\"Initial number of elements should be 0\", 0, eDA2.getNumElements());\n+\n+\t\tint iterations = (int) Math.pow(2.0, 15.0);\n+\n+\t\tfor( int i = 0; i < iterations; i++) {\n+\t\t\teDA2.addElement( i );\n+\t\t}\n+\t\t\n+\t\tassertEquals(\"Number of elements should be equal to 2^15\", (int) Math.pow(2.0, 15.0), eDA2.getNumElements());\n+\t\t\n+\t\teDA2.addElement( 2.0 );\n+\t\t\n+\t\tassertEquals(\"Number of elements should be equals to 2^15 + 1\",\n+\t\t        ( (int) Math.pow(2.0, 15.0) + 1 ), eDA2.getNumElements() );\n+\t}\n+\n+\tpublic void testWithInitialCapacityAndExpansionFactor() {\n+\n+\t\tExpandableDoubleArray eDA3 = new ExpandableDoubleArray(3, 3.0f);\n+\t\tassertEquals(\"Initial number of elements should be 0\", 0, eDA3.getNumElements() );\n+\n+\t\tint iterations = (int) Math.pow(3.0, 7.0);\n+\n+\t\tfor( int i = 0; i < iterations; i++) {\n+\t\t\teDA3.addElement( i );\n+\t\t}\n+\t\t\n+\t\tassertEquals(\"Number of elements should be equal to 3^7\", (int) Math.pow(3.0, 7.0), eDA3.getNumElements());\n+\t\t\n+\t\teDA3.addElement( 2.0 );\n+\t\t\n+\t\tassertEquals(\"Number of elements should be equals to 3^7 + 1\",\n+\t\t\t( (int) Math.pow(3.0, 7.0) + 1 ), eDA3.getNumElements() );\n+\t\t\t\t\t\t   \n+\t\tassertEquals(\"Expansion factor should equal 3.0\", 3.0f, eDA3.getExpansionFactor(), Double.MIN_VALUE);\n+\t}\n+\t\n+\tpublic void testDiscard() {\n+\t\tda.addElement(2.0);\n+\t\tda.addElement(2.0);\n+\t\tda.addElement(2.0);\n+\t\tda.addElement(2.0);\n+\t\tda.addElement(2.0);\n+\t\tda.addElement(2.0);\n+\t\tda.addElement(2.0);\n+\t\tda.addElement(2.0);\n+\t\tda.addElement(2.0);\n+\t\tda.addElement(2.0);\n+\t\tda.addElement(2.0);\n+\t\tassertEquals( \"Number of elements should be 11\", 11, da.getNumElements());\n+\t\t\n+\t\t((ExpandableDoubleArray)da).discardFrontElements(5);\n+\t\tassertEquals( \"Number of elements should be 6\", 6, da.getNumElements());\n+\t\t\n+\t\ttry {\n+            ((ExpandableDoubleArray)da).discardFrontElements(-1);\n+\t\t\tfail( \"Trying to discard a negative number of element is not allowed\");\n+\t\t} catch( Exception e ){\n+\t\t}\n+\t\t\n+\t\ttry {\n+            ((ExpandableDoubleArray)da).discardFrontElements( 10000 );\n+\t\t\tfail( \"You can't discard more elements than the array contains\");\n+\t\t} catch( Exception e ){\n+\t\t}\n+\t\t\n+\t}\n+\t\t\n+\t/** TEST ERROR CONDITIONS **/\n+\n+\tpublic void testIllegalInitialCapacity() {\n+\t\ttry {\n+\t\t\tExpandableDoubleArray eDA = new ExpandableDoubleArray(-3, 2.0f);\n+\t\t\tfail( \"That constructor should have thrown an IllegalArgumentException because \" +\n+\t\t\t\t\"the initialCapacity was negative, if it didn't then\" +\n+\t\t\t\t\" the range checking of initialCapacity is not working properly\" );\n+\t\t} catch( IllegalArgumentException iae ) {\n+\t\t}\n+\t\ttry {\n+\t\t\tExpandableDoubleArray eDA = new ExpandableDoubleArray(0, 2.0f);\n+\t\t\tfail( \"That constructor should have thrown an IllegalArgumentException because \" +\n+\t\t\t\t\"the initialCapacity was ZERO if it didn't then\" +\n+\t\t\t\t\" the range checking of initialCapacity is not working properly\" );\n+\t\t} catch( IllegalArgumentException iae ) {\n+\t\t}\n+\t}\n+\t\n+\tpublic void testIllegalExpansionFactor() {\n+\t\ttry {\n+\t\t\tExpandableDoubleArray eDA = new ExpandableDoubleArray(3, 0.66f);\n+\t\t\tfail( \"That constructor should have thrown an IllegalArgumentException because \" +\n+\t\t\t\t\"the expansionFactor for 0.66 which would shrink the array instead of expand the array\");\n+\t\t} catch( IllegalArgumentException iae ) {\n+\t\t}\n+\t\ttry {\n+\t\t\tExpandableDoubleArray eDA = new ExpandableDoubleArray(3, 0.0f);\n+\t\t\tfail( \"That constructor should have thrown an IllegalArgumentException because \" +\n+\t\t\t\t\"the expansionFactor for 0.0\");\n+\t\t} catch( IllegalArgumentException iae) {\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\tExpandableDoubleArray eDA = new ExpandableDoubleArray(3, -4.35f);\n+\t\t\tfail( \"That constructor should have thrown an IllegalArgumentException because \" +\n+\t\t\t\t\"the expansionFactor for -4.35\");\n+\t\t} catch( IllegalArgumentException iae) {\n+\t\t}\n+\t}\n+\t\n+\tpublic void testSetOutOfBounds() {\n+\t\t\ttry {\n+\t\t\t\tda.setElement( -1, 2.0);\n+\t\t\t\tfail( \"Cannot set a negative index\");\t\n+\t\t\t} catch( Exception e ){\n+\t\t\t}\n+\t}\n+\t\n+\tpublic void testGetOutOfBounds() {\n+\t\ttry {\n+\t\t\tda.getElement(10000);\n+\t\t\tfail( \"Cannot get an element that is larger than the number of elements\");\n+\t\t} catch( Exception e ) {\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\tda.getElement(-3);\n+\t\t\tfail(\"Cannot get a negative index\");\n+\t\t} catch( Exception e ){\n+\t\t}\n+\t}\n+\t\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.util;\n+\n+\n+/**\n+ * This class contains test cases for the ExpandableDoubleArray.\n+ * \n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:23 $\n+ */\n+public class FixedDoubleArrayTest extends DoubleArrayAbstractTest {\n+\n+\tpublic FixedDoubleArrayTest(String name) {\n+\t\tsuper( name );\n+\t}\n+\t\n+\t/* (non-Javadoc)\n+\t * @see junit.framework.TestCase#setUp()\n+\t */\n+\tprotected void setUp() throws Exception {\n+\t\tda = new FixedDoubleArray(4000);\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see junit.framework.TestCase#tearDown()\n+\t */\n+\tprotected void tearDown() throws Exception {\n+\t\tda = null;\n+\t}\n+\t\n+\t\n+\t/** TEST NORMAL OPERATIONS - calling super class test and then checking internal\n+\t *   storage **/\n+\t\n+\tpublic void testAddElementRolling() {\n+\t\tra = new FixedDoubleArray(6);\n+\n+\t\tsuper.testAddElementRolling();\n+\t\t\n+\t\tassertEquals( \"FixedDoubleArray should have 6 size internal storage\", \n+\t\t\t\t\t\t\t\t6, ((FixedDoubleArray) ra).getValues().length);\t\t\n+\t}\n+\t\n+\tpublic void testExceedingElements() {\n+\t\t\n+\t\tfor( int i = 0; i < 3999; i++) {\n+\t\t\tda.addElement( 1.0 );\n+\t\t}\n+\n+\t\tda.addElement( 1.0 );\n+\t\t\n+\t\ttry {\n+\t\t\tda.addElement( 2.0 );\n+\t\t\tfail( \" Adding more than 4000 elements should cause an exception \");\n+\t\t} catch( Exception e ) {\n+\t\t}\n+\t\t\n+\t\tda.addElementRolling(2.0);\n+\t\tassertEquals( \"This is the first rolling add, the first element should be 2.0\",\n+\t\t\t\t\t\t\t\t2.0, da.getElement(0), Double.MIN_VALUE);\n+\t}\n+\t\n+\tpublic void testGetExceeding() {\n+\t\ttry {\n+\t\t\tda.getElement(100);\n+\t\t\tfail( \"I haven't added 100 elements to the list yet, trying to getElement(100) should \" +\n+\t\t\t\t\"thrown an error\");\n+\t\t} catch (Exception e ){ \n+\t\t}\n+\t\t\n+\t}\n+\n+\tpublic void testSetElement() {\n+\t\tda.addElement( 1.0 );\n+\t\tda.addElement( 1.0 );\n+\t\tda.addElement( 1.0 );\n+\t\tda.addElement( 1.0 );\n+\t\tda.addElement( 1.0 );\n+\t\tda.addElement( 1.0 );\n+\t\tda.addElement( 1.0 );\n+\t\t\n+\t\tda.setElement( 2, 4.0 );\n+\t\tassertEquals( \"Index 2 should be 4.0\", 4.0, da.getElement(2), Double.MIN_VALUE);\n+\t\t\n+\t\ttry {\n+\t\t\tda.setElement(2000, 45.0);\n+\t\t\tfail( \"The array does not contain 2000 elements yet, setting this element should\" +\n+\t\t\t\t\" cause an excpetion\");\n+\t\t} catch(Exception e) {\n+\t\t}\n+\t\t\n+\t}\n+\n+\tpublic void testOnlyRolling() {\n+\t\tfor( int i = 0; i < 8000; i++) {\n+\t\t\tda.addElementRolling( i );\n+\t\t}\n+\t\t\n+\t\tassertEquals( \"The 2000th element should equal 6000\",\n+\t\t\t6000.0, da.getElement(2000), Double.MIN_VALUE);\n+\t}\n+\t\n+\tpublic void testClear() {\n+\t\tfor( int i = 0; i < 10; i++) {\n+\t\t\tda.addElementRolling(1.0);\n+\t\t}\n+\t\t\n+\t\tassertEquals( \"There should be ten elements in the array\",\n+\t\t\t\t\t\t\t\t10, da.getNumElements() );\n+\t\t\n+\t\tda.clear();\n+\n+\t\tassertEquals( \"There should be zero elements in the array\",\n+\t\t\t\t\t\t\t\t0, da.getNumElements() );\n+\n+\t\tfor( int i = 0; i < 10; i++) {\n+\t\t\tda.addElementRolling(1.0);\n+\t\t}\n+\t\t\n+\t\tassertEquals( \"There should be ten elements in the array\",\n+\t\t\t\t\t\t\t\t10, da.getNumElements() );\n+\t\t\t\t\n+\t}\n+\t\n+\t\t\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/util/MathUtilsTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.util;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test cases for the MathUtils class.\n+ *\n+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:23 $\n+ */\n+\n+public final class MathUtilsTest extends TestCase {\n+\n+    public MathUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp() {\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(MathUtilsTest.class);\n+        suite.setName(\"MathUtils Tests\");\n+        return suite;\n+    }\n+    \n+    public void testBinomialCoefficient() {\n+        long[] bcoef5 = {1,5,10,10,5,1};\n+        long[] bcoef6 = {1,6,15,20,15,6,1};\n+        for (int i = 0; i < 6; i++) {\n+            assertEquals(\"5 choose \" + i, bcoef5[i], \n+                MathUtils.binomialCoefficient(5,i));\n+        }\n+        for (int i = 0; i < 7; i++) {\n+            assertEquals(\"6 choose \" + i, bcoef6[i], \n+                MathUtils.binomialCoefficient(6,i));\n+        }\n+        \n+        for (int n = 1; n < 10; n++) {\n+            for (int k = 0; k <= n; k++) {\n+                assertEquals(n + \" choose \" + k, binomialCoefficient(n, k), \n+                    MathUtils.binomialCoefficient(n, k));\n+                assertEquals(n + \" choose \" + k,(double) binomialCoefficient(n, k), \n+                    MathUtils.binomialCoefficientDouble(n, k),Double.MIN_VALUE);\n+                assertEquals(n + \" choose \" + k,\n+                    Math.log((double) binomialCoefficient(n, k)), \n+                    MathUtils.binomialCoefficientLog(n, k),10E-12);\n+            }\n+        }\n+      \n+      /* \n+       * Takes a long time for recursion to unwind, but succeeds \n+       * and yields exact value = 2,333,606,220\n+        \n+        assertEquals(MathUtils.binomialCoefficient(34,17),\n+            binomialCoefficient(34,17));\n+       */\n+    }\n+    \n+    public void testBinomialCoefficientFail() {\n+        try {\n+            long x = MathUtils.binomialCoefficient(0,0);\n+            fail (\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            long x = MathUtils.binomialCoefficient(4,5);\n+            fail (\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            double x = MathUtils.binomialCoefficientDouble(0,0);\n+            fail (\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            double x = MathUtils.binomialCoefficientDouble(4,5);\n+            fail (\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            double x = MathUtils.binomialCoefficientLog(0,0);\n+            fail (\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            double x = MathUtils.binomialCoefficientLog(4,5);\n+            fail (\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            long x = MathUtils.binomialCoefficient(67,34);\n+            fail (\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {\n+            ;\n+        }\n+        double x = MathUtils.binomialCoefficientDouble(1030,515);\n+        assertTrue(\"expecting infinite binomial coefficient\",\n+            Double.isInfinite(x));\n+    }\n+\n+    public void testFactorial() {\n+        for (int i = 1; i < 10; i++) {\n+            assertEquals(i + \"! \",factorial(i),MathUtils.factorial(i));\n+            assertEquals(i + \"! \",(double)factorial(i),\n+                MathUtils.factorialDouble(i),Double.MIN_VALUE);\n+            assertEquals(i + \"! \",Math.log((double)factorial(i)),\n+                MathUtils.factorialLog(i),10E-12);\n+        }\n+    }\n+\n+    public void testFactorialFail() {\n+        try {\n+            long x = MathUtils.factorial(0);\n+            fail (\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            double x = MathUtils.factorialDouble(0);\n+            fail (\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            double x = MathUtils.factorialLog(0);\n+            fail (\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            double x = MathUtils.factorial(21);\n+            fail (\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {\n+            ;\n+        }\n+        assertTrue(\"expecting infinite factorial value\",\n+            Double.isInfinite(MathUtils.factorialDouble(171)));\n+\n+    }\n+\n+\n+    /**\n+     * Exact recursive implementation to test against\n+     */\n+    private long binomialCoefficient(int n, int k) {\n+        if ((n == k) || (k == 0)) {\n+            return 1;\n+        }\n+        if ((k == 1) || (k == n - 1)) {\n+            return n;\n+        }\n+        return binomialCoefficient(n - 1, k - 1) +\n+            binomialCoefficient(n - 1, k);\n+    }\n+\n+    /**\n+     * Finds the largest values of n for which binomialCoefficient and\n+     * binomialCoefficientDouble will return values that fit in a long, double,\n+     * resp.  Remove comments around test below to get this in test-report\n+     *\n+        public void testLimits() {\n+            findBinomialLimits();\n+        }\n+     */\n+\n+    private void findBinomialLimits() {\n+        /**\n+         * will kick out 66 as the limit for long\n+         */\n+        boolean foundLimit = false;\n+        int test = 10;\n+        while (!foundLimit) {\n+            try {\n+                double x = MathUtils.binomialCoefficient(test, test / 2);\n+            } catch (ArithmeticException ex) {\n+                foundLimit = true;\n+                System.out.println\n+                    (\"largest n for binomialCoefficient = \" + (test - 1) );\n+            }\n+            test++;\n+        }\n+\n+       /**\n+        * will kick out 1029 as the limit for double\n+        */\n+        foundLimit = false;\n+        test = 10;\n+        while (!foundLimit) {\n+            double x = MathUtils.binomialCoefficientDouble(test, test / 2);\n+            if (Double.isInfinite(x)) {\n+                foundLimit = true;\n+                System.out.println\n+                    (\"largest n for binomialCoefficientD = \" + (test - 1) );\n+            }\n+            test++;\n+        }\n+    }\n+\n+    /**\n+     * Finds the largest values of n for which factiorial and\n+     * factorialDouble will return values that fit in a long, double,\n+     * resp.  Remove comments around test below to get this in test-report\n+\n+        public void testFactiorialLimits() {\n+            findFactorialLimits();\n+        }\n+     */\n+\n+    private void findFactorialLimits() {\n+        /**\n+         * will kick out 20 as the limit for long\n+         */\n+        boolean foundLimit = false;\n+        int test = 10;\n+        while (!foundLimit) {\n+            try {\n+                double x = MathUtils.factorial(test);\n+            } catch (ArithmeticException ex) {\n+                foundLimit = true;\n+                System.out.println\n+                    (\"largest n for factorial = \" + (test - 1) );\n+            }\n+            test++;\n+        }\n+\n+       /**\n+        * will kick out 170 as the limit for double\n+        */\n+        foundLimit = false;\n+        test = 10;\n+        while (!foundLimit) {\n+            double x = MathUtils.factorialDouble(test);\n+            if (Double.isInfinite(x)) {\n+                foundLimit = true;\n+                System.out.println\n+                    (\"largest n for factorialDouble = \" + (test - 1) );\n+            }\n+            test++;\n+        }\n+    }\n+\n+\n+    /**\n+     * Exact direct multiplication implementation to test against\n+     */\n+    private long factorial(int n) {\n+        long result = 1;\n+        for (int i = 2; i <= n; i++) {\n+            result *= i;\n+        }\n+        return result;\n+    }\n+\n+\n+    public void testSignDouble() {\n+        double delta = 0.0 ;\n+        assertEquals( 1.0, MathUtils.sign( 2.0 ), delta ) ;\n+        assertEquals( -1.0, MathUtils.sign( -2.0 ), delta ) ;\n+    }\n+\n+\n+    public void testSignFloat() {\n+        float delta = 0.0F ;\n+        assertEquals( 1.0F, MathUtils.sign( 2.0F ), delta ) ;\n+        assertEquals( -1.0F, MathUtils.sign( -2.0F ), delta ) ;\n+    }\n+\n+\n+    public void testSignByte() {\n+        assertEquals( (byte)1, MathUtils.sign( (byte)2 ) ) ;\n+        assertEquals( (byte)(-1), MathUtils.sign( (byte)(-2) ) ) ;\n+    }\n+\n+\n+    public void testSignShort() {\n+        assertEquals( (short)1, MathUtils.sign( (short)2 ) ) ;\n+        assertEquals( (short)(-1), MathUtils.sign( (short)(-2) ) ) ;\n+    }\n+\n+\n+    public void testSignInt() {\n+        assertEquals( (int)1, MathUtils.sign( (int)(2) ) ) ;\n+        assertEquals( (int)(-1), MathUtils.sign( (int)(-2) ) ) ;\n+    }\n+\n+\n+    public void testSignLong() {\n+        assertEquals( 1L, MathUtils.sign( 2L ) ) ;\n+        assertEquals( -1L, MathUtils.sign( -2L ) ) ;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/util/TestBean.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.util;\n+\n+/**\n+ * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:23 $\n+ */\n+public class TestBean {\n+    private Double x = new Double(1.0);\n+    \n+    private String y = \"1.0\";\n+    \n+    private Double z = new Double(2.0);\n+    \n+    /**\n+     * \n+     */\n+    public Double getX() {\n+        return x;\n+    }\n+\n+    /**\n+     * \n+     */\n+    public String getY() {\n+        return y;\n+    }\n+\n+    /**\n+     * \n+     */\n+    public void setX(Double double1) {\n+        x = double1;\n+    }\n+\n+    /**\n+     * \n+     */\n+    public void setY(String string) {\n+        y = string;\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public Double getZ() {\n+        throw new RuntimeException();\n+    }\n+\n+    /**\n+     * \n+     */\n+    public void setZ(Double double1) {\n+        z = double1;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/util/TransformerMapTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.util;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:23 $\n+ */\n+public class TransformerMapTest extends TestCase {\n+    /**\n+     * \n+     */\n+    public void testPutTransformer(){\n+        NumberTransformer expected = new DefaultTransformer();\n+        \n+        TransformerMap map = new TransformerMap();\n+        map.putTransformer(TransformerMapTest.class, expected);\n+        assertEquals(expected, map.getTransformer(TransformerMapTest.class));\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testContainsClass(){\n+        NumberTransformer expected = new DefaultTransformer();\n+        TransformerMap map = new TransformerMap();\n+        map.putTransformer(TransformerMapTest.class, expected);\n+        assertTrue(map.containsClass(TransformerMapTest.class));\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testContainsTransformer(){\n+        NumberTransformer expected = new DefaultTransformer();\n+        TransformerMap map = new TransformerMap();\n+        map.putTransformer(TransformerMapTest.class, expected);\n+        assertTrue(map.containsTransformer(expected));\n+    }\n+\n+    /**\n+     * \n+     */\n+    public void testRemoveTransformer(){\n+        NumberTransformer expected = new DefaultTransformer();\n+        \n+        TransformerMap map = new TransformerMap();\n+        map.putTransformer(TransformerMapTest.class, expected);\n+        assertTrue(map.containsClass(TransformerMapTest.class));\n+        assertTrue(map.containsTransformer(expected));\n+        map.removeTransformer(TransformerMapTest.class);\n+        assertFalse(map.containsClass(TransformerMapTest.class));\n+        assertFalse(map.containsTransformer(expected));\n+    }\n+\n+    /**\n+     * \n+     */\n+    public void testClear(){\n+        NumberTransformer expected = new DefaultTransformer();\n+        \n+        TransformerMap map = new TransformerMap();\n+        map.putTransformer(TransformerMapTest.class, expected);\n+        assertTrue(map.containsClass(TransformerMapTest.class));\n+        map.clear();\n+        assertFalse(map.containsClass(TransformerMapTest.class));\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testClasses(){\n+        NumberTransformer expected = new DefaultTransformer();\n+        TransformerMap map = new TransformerMap();\n+        map.putTransformer(TransformerMapTest.class, expected);\n+        assertTrue(map.classes().contains(TransformerMapTest.class));\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testTransformers(){\n+        NumberTransformer expected = new DefaultTransformer();\n+        TransformerMap map = new TransformerMap();\n+        map.putTransformer(TransformerMapTest.class, expected);\n+        assertTrue(map.transformers().contains(expected));\n+    }\n+}", "timestamp": 1068848728, "metainfo": ""}