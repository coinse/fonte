{"sha": "72cd0ef5b41e567a88575134e5a593ae448336b9", "log": "Added distance to point to 2D Line and Segment.  Patch provided by Curtis Jensen applied with minor modifications.  JIRA: MATH-641  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java\n         return FastMath.abs(getOffset(p)) < 1.0e-10;\n     }\n \n+    /** Compute the distance between the instance and a point.\n+     *  This is a shortcut for invoking FastMath.abs(getOffset(p)), \n+     *  and provides consistency with what is in the \n+     *  org.apache.commons.math3.geometry.euclidean.threed.Line class.\n+     *  \n+     * @param p to check\n+     * @return distance between the instance and the point\n+     */\n+    public double distance(final Vector2D p) {\n+        return FastMath.abs(getOffset(p));\n+    }\n+\n     /** Check the instance is parallel to another line.\n      * @param line other line to check\n      * @return true if the instance is parallel to the other line\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java\n  */\n package org.apache.commons.math3.geometry.euclidean.twod;\n \n+import org.apache.commons.math3.util.FastMath;\n \n /** Simple container for a two-points segment.\n  * @version $Id$\n         return line;\n     }\n \n+    /**\n+     * Calculates the shortest distance from a point to this line segment.  \n+     * <p>\n+     * If the perpendicular extension from the point to the line does not \n+     * cross in the bounds of the line segment, the shortest distance to \n+     * the two end points will be returned.\n+     * </p>\n+     * \n+     * Algorithm adapted from: http://www.codeguru.com/forum/printthread.php?s=cc8cf0596231f9a7dba4da6e77c29db3&t=194400&pp=15&page=1 \n+     */\n+    public double distance(final Vector2D p) {\n+        final double deltaX = end.getX() - start.getX();\n+        final double deltaY = end.getY() - start.getY();\n+\n+        final double r = ((p.getX() - start.getX()) * deltaX + (p.getY() - start.getY()) * deltaY) /\n+                         (deltaX * deltaX + deltaY * deltaY);\n+\n+        // r == 0 => P = startPt\n+        // r == 1 => P = endPt\n+        // r < 0 => P is on the backward extension of the segment\n+        // r > 1 => P is on the forward extension of the segment\n+        // 0 < r < 1 => P is on the segment\n+\n+        // if point isn't on the line segment, just return the shortest distance to the end points\n+        if (r < 0 || r > 1) {\n+            final double dist1 = getStart().distance(p);\n+            final double dist2 = getEnd().distance(p);\n+\n+            return FastMath.min(dist1, dist2);\n+        }\n+        else {\n+            // find point on line and see if it is in the line segment\n+            final double px = start.getX() + r * deltaX;\n+            final double py = start.getY() + r * deltaY;\n+\n+            final Vector2D interPt = new Vector2D(px, py);\n+            return interPt.distance(p);\n+        }\n+    }\n }\n--- a/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/LineTest.java\n+++ b/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/LineTest.java\n     }\n \n     @Test\n+    public void testDistance() {\n+        Line l = new Line(new Vector2D(2, 1), new Vector2D(-2, -2));\n+        Assert.assertEquals(+5.0, l.distance(new Vector2D(5, -3)), 1.0e-10);\n+        Assert.assertEquals(+5.0, l.distance(new Vector2D(-5, 2)), 1.0e-10);\n+    }\n+\n+    @Test\n     public void testPointAt() {\n         Line l = new Line(new Vector2D(2, 1), new Vector2D(-2, -2));\n         for (double a = -2.0; a < 2.0; a += 0.2) {\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.geometry.euclidean.twod;\n+\n+import org.apache.commons.math3.geometry.euclidean.twod.Line;\n+import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;\n+import org.apache.commons.math3.util.FastMath;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class SegmentTest {\n+\n+    @Test\n+    public void testDistance() {\n+        Vector2D start = new Vector2D(2, 2);\n+        Vector2D end = new Vector2D(-2, -2);\n+        Segment segment = new Segment(start, end, new Line(start, end));\n+\n+        // distance to center of segment\n+        Assert.assertEquals(FastMath.sqrt(2), segment.distance(new Vector2D(1, -1)), 1.0e-10);\n+\n+        // distance a point on segment\n+        Assert.assertEquals(FastMath.sin(Math.PI / 4.0), segment.distance(new Vector2D(0, -1)), 1.0e-10);\n+\n+        // distance to end point\n+        Assert.assertEquals(FastMath.sqrt(8), segment.distance(new Vector2D(0, 4)), 1.0e-10);\n+\n+        // distance to start point\n+        Assert.assertEquals(FastMath.sqrt(8), segment.distance(new Vector2D(0, -4)), 1.0e-10);\n+    }\n+}", "timestamp": 1349011348, "metainfo": ""}