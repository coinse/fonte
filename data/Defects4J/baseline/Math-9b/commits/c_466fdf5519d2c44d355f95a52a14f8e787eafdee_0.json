{"sha": "466fdf5519d2c44d355f95a52a14f8e787eafdee", "log": "Cleanup / complete AggregateSummaryStatistics implementation  * Fully synchronized access to aggregating SummaryStatistics instance  * Exposed all SummaryStatistics stats  * Improved test coverage  * Improved javadoc JIRA: MATH-224  ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java\n \n /**\n  * <p>\n- * A StatisticalSummary that aggregates statistics from several data sets or\n+ * An aggregator for {@code SummaryStatistics} from several data sets or\n  * data set partitions.  In its simplest usage mode, the client creates an\n  * instance via the zero-argument constructor, then uses\n  * {@link #createContributingStatistics()} to obtain a {@code SummaryStatistics}\n  * Clients with specialized requirements can use alternative constructors to\n  * control the statistics implementations and initial values used by the\n  * contributing and the internal aggregate {@code SummaryStatistics} objects.\n- * </p>\n+ * </p><p>\n+ * A static {@link #aggregate(Collection)} method is also included that computes\n+ * aggregate statistics directly from a Collection of SummaryStatistics instances.\n+ * </p><p>\n+ * When {@link #createContributingStatistics()} is used to create SummaryStatistics\n+ * instances to be aggregated concurrently, the created instances' \n+ * {@link SummaryStatistics#addValue(double)} methods must synchronize on the aggregating\n+ * instance maintained by this class.  In multithreaded environments, if the functionality\n+ * provided by {@link #aggregate(Collection)} is adequate, that method should be used\n+ * to avoid unecessary computation and synchronization delays.</p>\n  *\n  * @since 2.0\n  * @version $Revision:$ $Date:$\n \n  \n     /** Serializable version identifier */\n-   private static final long serialVersionUID = -8207112444016386906L;\n+    private static final long serialVersionUID = -8207112444016386906L;\n \n     /**\n      * A SummaryStatistics serving as a prototype for creating SummaryStatistics\n     private final SummaryStatistics statisticsPrototype;\n     \n     /**\n-     * The SummaryStatistics in which aggregate statistics are accumulated \n+     * The SummaryStatistics in which aggregate statistics are accumulated.\n      */\n     private final SummaryStatistics statistics;\n     \n      * @see StatisticalSummary#getMax()\n      */\n     public double getMax() {\n-        return statistics.getMax();\n+        synchronized (statistics) {\n+            return statistics.getMax();\n+        }\n     }\n \n     /**\n      * @see StatisticalSummary#getMean()\n      */\n     public double getMean() {\n-        return statistics.getMean();\n+        synchronized (statistics) {\n+            return statistics.getMean();\n+        }\n     }\n \n     /**\n      * @see StatisticalSummary#getMin()\n      */\n     public double getMin() {\n-        return statistics.getMin();\n+        synchronized (statistics) {\n+            return statistics.getMin();\n+        }\n     }\n \n     /**\n      * @see StatisticalSummary#getN()\n      */\n     public long getN() {\n-        return statistics.getN();\n+        synchronized (statistics) {\n+            return statistics.getN();\n+        }\n     }\n \n     /**\n      * @see StatisticalSummary#getStandardDeviation()\n      */\n     public double getStandardDeviation() {\n-        return statistics.getStandardDeviation();\n+        synchronized (statistics) {\n+            return statistics.getStandardDeviation();\n+        }\n     }\n \n     /**\n      * @see StatisticalSummary#getSum()\n      */\n     public double getSum() {\n-        return statistics.getSum();\n+        synchronized (statistics) {\n+            return statistics.getSum();\n+        }\n     }\n \n     /**\n      * @see StatisticalSummary#getVariance()\n      */\n     public double getVariance() {\n-        return statistics.getVariance();\n+        synchronized (statistics) {\n+            return statistics.getVariance();\n+        }\n+    }\n+    \n+    /**\n+     * Returns the sum of the logs of all the aggregated data.\n+     * \n+     * @return the sum of logs\n+     * @see SummaryStatistics#getSumOfLogs()\n+     */\n+    public double getSumOfLogs() {\n+        synchronized (statistics) {\n+            return statistics.getSumOfLogs();\n+        }\n+    }\n+    \n+    /**\n+     * Returns the geometric mean of all the aggregated data.\n+     * \n+     * @return the geometric mean\n+     * @see SummaryStatistics#getGeometricMean()\n+     */\n+    public double getGeometricMean() {\n+        synchronized (statistics) {\n+            return statistics.getGeometricMean();\n+        }\n+    }\n+    \n+    /**\n+     * Returns the sum of the squares of all the aggregated data.\n+     * \n+     * @return The sum of squares\n+     * @see SummaryStatistics#getSumsq()\n+     */\n+    public double getSumsq() {\n+        synchronized (statistics) {\n+            return statistics.getSumsq();\n+        }\n+    }\n+    \n+    /**\n+     * Returns a statistic related to the Second Central Moment.  Specifically,\n+     * what is returned is the sum of squared deviations from the sample mean\n+     * among the all of the aggregated data.\n+     * \n+     * @return second central moment statistic\n+     * @see SummaryStatistics#getSecondMoment()\n+     */\n+    public double getSecondMoment() {\n+        synchronized (statistics) {\n+            return statistics.getSecondMoment();\n+        }\n+    }\n+    \n+    /**\n+     * Return a {@link StatisticalSummaryValues} instance reporting current\n+     * aggregate statistics.\n+     * \n+     * @return Current values of aggregate statistics\n+     */\n+    public StatisticalSummary getSummary() {\n+        synchronized (statistics) {\n+            return new StatisticalSummaryValues(getMean(), getVariance(), getN(), \n+                    getMax(), getMin(), getSum());\n+        }\n     }\n \n     /**\n--- a/src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java\n     }\n     \n     /**\n+     * Verify that aggregating over a partition gives the same results\n+     * as direct computation.\n+     * \n+     *  1) Randomly generate a dataset of 10-100 values\n+     *     from [-100, 100]\n+     *  2) Divide the dataset it into 2-5 partitions\n+     *  3) Create an AggregateSummaryStatistic and ContributingStatistics\n+     *     for each partition \n+     *  4) Compare results from the AggregateSummaryStatistic with values\n+     *     returned by a single SummaryStatistics instance that is provided \n+     *     the full dataset\n+     */\n+    public void testAggregationConsistency() throws Exception {\n+        \n+        // Generate a random sample and random partition\n+        double[] totalSample = generateSample();\n+        double[][] subSamples = generatePartition(totalSample);\n+        int nSamples = subSamples.length;\n+        \n+        // Create aggregator and total stats for comparison\n+        AggregateSummaryStatistics aggregate = new AggregateSummaryStatistics();\n+        SummaryStatistics totalStats = new SummaryStatistics();\n+        \n+        // Create array of component stats\n+        SummaryStatistics componentStats[] = new SummaryStatistics[nSamples];\n+        \n+        for (int i = 0; i < nSamples; i++) {\n+            \n+            // Make componentStats[i] a contributing statistic to aggregate\n+            componentStats[i] = aggregate.createContributingStatistics();\n+            \n+            // Add values from subsample\n+            for (int j = 0; j < subSamples[i].length; j++) {\n+                componentStats[i].addValue(subSamples[i][j]);\n+            }\n+        }\n+        \n+        // Compute totalStats directly\n+        for (int i = 0; i < totalSample.length; i++) {\n+            totalStats.addValue(totalSample[i]);\n+        }\n+        \n+        /*\n+         * Compare statistics in totalStats with aggregate.\n+         * Note that guaranteed success of this comparison depends on the\n+         * fact that <aggregate> gets values in exactly the same order\n+         * as <totalStats>. \n+         *  \n+         */\n+        assertEquals(totalStats.getSummary(), aggregate.getSummary());  \n+        \n+    }\n+    \n+    /**\n      * Test aggregate function by randomly generating a dataset of 10-100 values\n      * from [-100, 100], dividing it into 2-5 partitions, computing stats for each\n      * partition and comparing the result of aggregate(...) applied to the collection\n     }\n     \n     /**\n-     * Verifies that two StatisticalSummaryValues report the same values up\n+     * Verifies that a StatisticalSummary and a StatisticalSummaryValues are equal up\n      * to delta, with NaNs, infinities returned in the same spots. For max, min, n, values\n      * have to agree exactly, delta is used only for sum, mean, variance, std dev.\n      */", "timestamp": 1247100812, "metainfo": ""}