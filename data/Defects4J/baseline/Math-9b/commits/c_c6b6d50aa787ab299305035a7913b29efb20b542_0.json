{"sha": "c6b6d50aa787ab299305035a7913b29efb20b542", "log": "Added a way to build a sub-line from its endpoints, and to retrieve the enpoints from a sub-line.  JIRA: MATH-592  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java\n     public Vector2D toSpace(final Vector<Euclidean1D> point) {\n         final double abscissa = ((Vector1D) point).getX();\n         return new Vector2D(abscissa * cos - originOffset * sin,\n-                           abscissa * sin + originOffset * cos);\n+                            abscissa * sin + originOffset * cos);\n     }\n \n     /** Get the intersection point of the instance and another line.\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java\n  */\n package org.apache.commons.math.geometry.euclidean.twod;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n import org.apache.commons.math.geometry.euclidean.oned.Euclidean1D;\n+import org.apache.commons.math.geometry.euclidean.oned.Interval;\n import org.apache.commons.math.geometry.euclidean.oned.IntervalsSet;\n import org.apache.commons.math.geometry.euclidean.oned.OrientedPoint;\n import org.apache.commons.math.geometry.euclidean.oned.Vector1D;\n     public SubLine(final Hyperplane<Euclidean2D> hyperplane,\n                    final Region<Euclidean1D> remainingRegion) {\n         super(hyperplane, remainingRegion);\n+    }\n+\n+    /** Create a sub-line from two endpoints.\n+     * @param start start point\n+     * @param end end point\n+     */\n+    public SubLine(final Vector2D start, final Vector2D end) {\n+        super(new Line(start, end), buildIntervalSet(start, end));\n+    }\n+\n+    /** Get the endpoints of the sub-line.\n+     * <p>\n+     * A subline may be any arbitrary number of disjoints segments, so the endpoints\n+     * are provided as a list of endpoint pairs. Each element of the list represents\n+     * one segment, and each segment contains a start point at index 0 and an end point\n+     * at index 1. If the sub-line is unbounded in the negative infinity direction,\n+     * the start point of the first segment will have infinite coordinates. If the\n+     * sub-line is unbounded in the positive infinity direction, the end point of the\n+     * last segment will have infinite coordinates. So a sub-line covering the whole\n+     * line will contain just one row and both elements of this row will have infinite\n+     * coordinates. If the sub-line is empty, the returned list will contain 0 segments.\n+     * </p>\n+     * @return list of segments endpoints\n+     */\n+    public List<Vector2D[]> getSegments() {\n+\n+        final Line line = (Line) getHyperplane();\n+        final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();\n+        final List<Vector2D[]> segments = new ArrayList<Vector2D[]>();\n+\n+        for (final Interval interval : list) {\n+            final Vector2D start = line.toSpace(new Vector1D(interval.getLower()));\n+            final Vector2D end   = line.toSpace(new Vector1D(interval.getUpper()));\n+            segments.add(new Vector2D[] { start, end });\n+        }\n+\n+        return segments;\n+\n+    }\n+\n+    /** Build an interval set from two points.\n+     * @param start start point\n+     * @param end end point\n+     * @return an interval set\n+     */\n+    private static IntervalsSet buildIntervalSet(final Vector2D start, final Vector2D end) {\n+        final Line line = new Line(start, end);\n+        return new IntervalsSet(line.toSubSpace(start).getX(),\n+                                line.toSubSpace(end).getX());\n     }\n \n     /** {@inheritDoc} */\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.geometry.euclidean.twod;\n+\n+import java.util.List;\n+\n+import org.apache.commons.math.geometry.euclidean.oned.Euclidean1D;\n+import org.apache.commons.math.geometry.euclidean.oned.IntervalsSet;\n+import org.apache.commons.math.geometry.partitioning.RegionFactory;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class SubLineTest {\n+\n+    @Test\n+    public void testEndPoints() {\n+        SubLine sub = new SubLine(new Vector2D(-1, -7), new Vector2D(7, -1));\n+        List<Vector2D[]> segments = sub.getSegments();\n+        Assert.assertEquals(1, segments.size());\n+        Assert.assertEquals(-1, segments.get(0)[0].getX(), 1.0e-10);\n+        Assert.assertEquals(-7, segments.get(0)[0].getY(), 1.0e-10);\n+        Assert.assertEquals( 7, segments.get(0)[1].getX(), 1.0e-10);\n+        Assert.assertEquals(-1, segments.get(0)[1].getY(), 1.0e-10);\n+    }\n+\n+    @Test\n+    public void testNoEndPoints() {\n+        SubLine wholeLine = new Line(new Vector2D(-1, 7), new Vector2D(7, 1)).wholeHyperplane();\n+        List<Vector2D[]> segments = wholeLine.getSegments();\n+        Assert.assertEquals(1, segments.size());\n+        Assert.assertTrue(Double.isInfinite(segments.get(0)[0].getX()) &&\n+                          segments.get(0)[0].getX() < 0);\n+        Assert.assertTrue(Double.isInfinite(segments.get(0)[0].getY()) &&\n+                          segments.get(0)[0].getY() > 0);\n+        Assert.assertTrue(Double.isInfinite(segments.get(0)[1].getX()) &&\n+                          segments.get(0)[1].getX() > 0);\n+        Assert.assertTrue(Double.isInfinite(segments.get(0)[1].getY()) &&\n+                          segments.get(0)[1].getY() < 0);\n+    }\n+\n+    @Test\n+    public void testNoSegments() {\n+        SubLine empty = new SubLine(new Line(new Vector2D(-1, -7), new Vector2D(7, -1)),\n+                                    new RegionFactory<Euclidean1D>().getComplement(new IntervalsSet()));\n+        List<Vector2D[]> segments = empty.getSegments();\n+        Assert.assertEquals(0, segments.size());\n+    }\n+\n+    @Test\n+    public void testSeveralSegments() {\n+        SubLine twoSubs = new SubLine(new Line(new Vector2D(-1, -7), new Vector2D(7, -1)),\n+                                    new RegionFactory<Euclidean1D>().union(new IntervalsSet(1, 2),\n+                                                                           new IntervalsSet(3, 4)));\n+        List<Vector2D[]> segments = twoSubs.getSegments();\n+        Assert.assertEquals(2, segments.size());\n+    }\n+\n+    @Test\n+    public void testHalfInfiniteNeg() {\n+        SubLine empty = new SubLine(new Line(new Vector2D(-1, -7), new Vector2D(7, -1)),\n+                                    new IntervalsSet(Double.NEGATIVE_INFINITY, 0.0));\n+        List<Vector2D[]> segments = empty.getSegments();\n+        Assert.assertEquals(1, segments.size());\n+        Assert.assertTrue(Double.isInfinite(segments.get(0)[0].getX()) &&\n+                          segments.get(0)[0].getX() < 0);\n+        Assert.assertTrue(Double.isInfinite(segments.get(0)[0].getY()) &&\n+                          segments.get(0)[0].getY() < 0);\n+        Assert.assertEquals( 3, segments.get(0)[1].getX(), 1.0e-10);\n+        Assert.assertEquals(-4, segments.get(0)[1].getY(), 1.0e-10);\n+    }\n+\n+    @Test\n+    public void testHalfInfinitePos() {\n+        SubLine empty = new SubLine(new Line(new Vector2D(-1, -7), new Vector2D(7, -1)),\n+                                    new IntervalsSet(0.0, Double.POSITIVE_INFINITY));\n+        List<Vector2D[]> segments = empty.getSegments();\n+        Assert.assertEquals(1, segments.size());\n+        Assert.assertEquals( 3, segments.get(0)[0].getX(), 1.0e-10);\n+        Assert.assertEquals(-4, segments.get(0)[0].getY(), 1.0e-10);\n+        Assert.assertTrue(Double.isInfinite(segments.get(0)[1].getX()) &&\n+                          segments.get(0)[1].getX() > 0);\n+        Assert.assertTrue(Double.isInfinite(segments.get(0)[1].getY()) &&\n+                          segments.get(0)[1].getY() > 0);\n+    }\n+\n+}", "timestamp": 1308165600, "metainfo": ""}