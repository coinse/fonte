{"sha": "ce9df69d21cab16658506653654a588adab47cf5", "log": "Integrated the new differentiation framework in the solvers package.  As discussed on the developers mailing list, a separate NewtonRaphsonSolver has been set up using the new interfaces, and the older NewtonSolver has been deprecated. It should be removed in 4.0.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/AbstractDifferentiableUnivariateSolver.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/AbstractDifferentiableUnivariateSolver.java\n  *\n  * @since 3.0\n  * @version $Id$\n+ * @deprecated as of 3.1, replaced by {@link AbstractUnivariateDifferentiableSolver}\n  */\n+@Deprecated\n public abstract class AbstractDifferentiableUnivariateSolver\n     extends BaseAbstractUnivariateSolver<DifferentiableUnivariateFunction>\n     implements DifferentiableUnivariateSolver {\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math3.analysis.solvers;\n+\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+\n+/**\n+ * Provide a default implementation for several functions useful to generic\n+ * solvers.\n+ *\n+ * @since 3.1\n+ * @version $Id$\n+ */\n+public abstract class AbstractUnivariateDifferentiableSolver\n+    extends BaseAbstractUnivariateSolver<UnivariateDifferentiable>\n+    implements UnivariateDifferentiableSolver {\n+\n+    /** Function to solve. */\n+    private UnivariateDifferentiable function;\n+\n+    /**\n+     * Construct a solver with given absolute accuracy.\n+     *\n+     * @param absoluteAccuracy Maximum absolute error.\n+     */\n+    protected AbstractUnivariateDifferentiableSolver(final double absoluteAccuracy) {\n+        super(absoluteAccuracy);\n+    }\n+\n+    /**\n+     * Construct a solver with given accuracies.\n+     *\n+     * @param relativeAccuracy Maximum relative error.\n+     * @param absoluteAccuracy Maximum absolute error.\n+     * @param functionValueAccuracy Maximum function value error.\n+     */\n+    protected AbstractUnivariateDifferentiableSolver(final double relativeAccuracy,\n+                                                     final double absoluteAccuracy,\n+                                                     final double functionValueAccuracy) {\n+        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);\n+    }\n+\n+    /**\n+     * Compute the objective function value.\n+     *\n+     * @param point Point at which the objective function must be evaluated.\n+     * @return the objective function value and derivative at specified point.\n+     * @throws org.apache.commons.math3.exception.TooManyEvaluationsException\n+     * if the maximal number of evaluations is exceeded.\n+     */\n+    protected DerivativeStructure computeObjectiveValueAndDerivative(double point) {\n+        incrementEvaluationCount();\n+        return function.value(new DerivativeStructure(1, 1, 0, point));\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected void setup(int maxEval, UnivariateDifferentiable f,\n+                         double min, double max, double startValue) {\n+        super.setup(maxEval, f, min, max, startValue);\n+        function = f;\n+    }\n+}\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver.java\n      * Method {@link #computeObjectiveValue(double)} calls this method internally.\n      * It is provided for subclasses that do not exclusively use\n      * {@code computeObjectiveValue} to solve the function.\n-     * See e.g. {@link AbstractDifferentiableUnivariateSolver}.\n+     * See e.g. {@link AbstractUnivariateDifferentiableSolver}.\n      */\n     protected void incrementEvaluationCount() {\n         try {\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/DifferentiableUnivariateSolver.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/DifferentiableUnivariateSolver.java\n  * Implementations will search for only one zero in the given interval.\n  *\n  * @version $Id$\n+ * @deprecated as of 3.1, replaced by {@link UnivariateDifferentiableSolver}\n  */\n public interface DifferentiableUnivariateSolver\n     extends BaseUnivariateSolver<DifferentiableUnivariateFunction> {}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math3.analysis.solvers;\n+\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.util.FastMath;\n+\n+/**\n+ * Implements <a href=\"http://mathworld.wolfram.com/NewtonsMethod.html\">\n+ * Newton's Method</a> for finding zeros of real univariate differentiable\n+ * functions.\n+ *\n+ * @since 3.1\n+ * @version $Id$\n+ */\n+public class NewtonRaphsonSolver extends AbstractUnivariateDifferentiableSolver {\n+    /** Default absolute accuracy. */\n+    private static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;\n+\n+    /**\n+     * Construct a solver.\n+     */\n+    public NewtonRaphsonSolver() {\n+        this(DEFAULT_ABSOLUTE_ACCURACY);\n+    }\n+    /**\n+     * Construct a solver.\n+     *\n+     * @param absoluteAccuracy Absolute accuracy.\n+     */\n+    public NewtonRaphsonSolver(double absoluteAccuracy) {\n+        super(absoluteAccuracy);\n+    }\n+\n+    /**\n+     * Find a zero near the midpoint of {@code min} and {@code max}.\n+     *\n+     * @param f Function to solve.\n+     * @param min Lower bound for the interval.\n+     * @param max Upper bound for the interval.\n+     * @param maxEval Maximum number of evaluations.\n+     * @return the value where the function is zero.\n+     * @throws org.apache.commons.math3.exception.TooManyEvaluationsException\n+     * if the maximum evaluation count is exceeded.\n+     * @throws org.apache.commons.math3.exception.NumberIsTooLargeException\n+     * if {@code min >= max}.\n+     */\n+    @Override\n+    public double solve(int maxEval, final UnivariateDifferentiable f,\n+                        final double min, final double max) {\n+        return super.solve(maxEval, f, UnivariateSolverUtils.midpoint(min, max));\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected double doSolve() {\n+        final double startValue = getStartValue();\n+        final double absoluteAccuracy = getAbsoluteAccuracy();\n+\n+        double x0 = startValue;\n+        double x1;\n+        while (true) {\n+            final DerivativeStructure y0 = computeObjectiveValueAndDerivative(x0);\n+            x1 = x0 - (y0.getValue() / y0.getPartialDerivative(1));\n+            if (FastMath.abs(x1 - x0) <= absoluteAccuracy) {\n+                return x1;\n+            }\n+\n+            x0 = x1;\n+        }\n+    }\n+}\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/NewtonSolver.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/NewtonSolver.java\n  * <p>\n  * The function should be continuous but not necessarily smooth.</p>\n  *\n+ * @deprecated as of 3.1, replaced by {@link NewtonRaphsonSolverTest}\n  * @version $Id$\n  */\n+@Deprecated\n public class NewtonSolver extends AbstractDifferentiableUnivariateSolver {\n     /** Default absolute accuracy. */\n     private static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.analysis.solvers;\n+\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+\n+\n+/**\n+ * Interface for (univariate real) rootfinding algorithms.\n+ * Implementations will search for only one zero in the given interval.\n+ *\n+ * @since 3.1\n+ * @version $Id$\n+ */\n+public interface UnivariateDifferentiableSolver\n+    extends BaseUnivariateSolver<UnivariateDifferentiable> {}\n--- a/src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java\n \n package org.apache.commons.math3.analysis.solvers;\n \n-import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.QuinticFunction;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n \n     private void compare(final UnivariateDifferentiable f,\n                          double root, double min, double max) {\n-        DifferentiableUnivariateFunction df = new DifferentiableUnivariateFunction() {\n-            public double value(double x) {\n-                return f.value(x);\n-            }\n-            \n-            public UnivariateFunction derivative() {\n-                return new UnivariateFunction() {\n-                    public double value(double x) {\n-                        return f.value(new DerivativeStructure(1, 1, 0, x)).getPartialDerivative(1);\n-                    }\n-                };\n-            }\n-        };\n-        NewtonSolver newton = new NewtonSolver(1.0e-12);\n+        NewtonRaphsonSolver newton = new NewtonRaphsonSolver(1.0e-12);\n         BracketingNthOrderBrentSolver bracketing =\n                 new BracketingNthOrderBrentSolver(1.0e-12, 1.0e-12, 1.0e-18, 5);\n         double resultN;\n         try {\n-            resultN = newton.solve(100, df, min, max);\n+            resultN = newton.solve(100, f, min, max);\n         } catch (TooManyEvaluationsException tmee) {\n             resultN = Double.NaN;\n         }\n         double resultB;\n         try {\n-            resultB = bracketing.solve(100, df, min, max);\n+            resultB = bracketing.solve(100, f, min, max);\n         } catch (TooManyEvaluationsException tmee) {\n             resultB = Double.NaN;\n         }\n         Assert.assertEquals(root, resultN, newton.getAbsoluteAccuracy());\n         Assert.assertEquals(root, resultB, bracketing.getAbsoluteAccuracy());\n-        Assert.assertTrue(bracketing.getEvaluations() < newton.getEvaluations());\n+\n+        // bracketing solver evaluates only function value, we set the weight to 1\n+        final int weightedBracketingEvaluations = bracketing.getEvaluations();\n+\n+        // Newton-Raphson solver evaluates both function value and derivative, we set the weight to 2\n+        final int weightedNewtonEvaluations = 2 * newton.getEvaluations();\n+\n+        Assert.assertTrue(weightedBracketingEvaluations < weightedNewtonEvaluations);\n+\n     }\n \n     private static abstract class TestFunction implements UnivariateDifferentiable {\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.analysis.solvers;\n+\n+import org.apache.commons.math3.analysis.QuinticFunction;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.function.Sin;\n+import org.apache.commons.math3.util.FastMath;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+\n+/**\n+ * @version $Id$\n+ */\n+public final class NewtonRaphsonSolverTest {\n+    /**\n+     *\n+     */\n+    @Test\n+    public void testSinZero() {\n+        UnivariateDifferentiable f = new Sin();\n+        double result;\n+\n+        NewtonRaphsonSolver solver = new NewtonRaphsonSolver();\n+        result = solver.solve(100, f, 3, 4);\n+        Assert.assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());\n+\n+        result = solver.solve(100, f, 1, 4);\n+        Assert.assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());\n+\n+        Assert.assertTrue(solver.getEvaluations() > 0);\n+    }\n+\n+    /**\n+     *\n+     */\n+    @Test\n+    public void testQuinticZero() {\n+        final UnivariateDifferentiable f = new QuinticFunction();\n+        double result;\n+\n+        NewtonRaphsonSolver solver = new NewtonRaphsonSolver();\n+        result = solver.solve(100, f, -0.2, 0.2);\n+        Assert.assertEquals(result, 0, solver.getAbsoluteAccuracy());\n+\n+        result = solver.solve(100, f, -0.1, 0.3);\n+        Assert.assertEquals(result, 0, solver.getAbsoluteAccuracy());\n+\n+        result = solver.solve(100, f, -0.3, 0.45);\n+        Assert.assertEquals(result, 0, solver.getAbsoluteAccuracy());\n+\n+        result = solver.solve(100, f, 0.3, 0.7);\n+        Assert.assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n+\n+        result = solver.solve(100, f, 0.2, 0.6);\n+        Assert.assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n+\n+        result = solver.solve(100, f, 0.05, 0.95);\n+        Assert.assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n+\n+        result = solver.solve(100, f, 0.85, 1.25);\n+        Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n+\n+        result = solver.solve(100, f, 0.8, 1.2);\n+        Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n+\n+        result = solver.solve(100, f, 0.85, 1.75);\n+        Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n+\n+        result = solver.solve(100, f, 0.55, 1.45);\n+        Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n+\n+        result = solver.solve(100, f, 0.85, 5);\n+        Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n+    }\n+}\n--- a/src/test/java/org/apache/commons/math3/analysis/solvers/NewtonSolverTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/solvers/NewtonSolverTest.java\n \n /**\n  * @version $Id$\n+ * @deprecated\n  */\n+@Deprecated\n public final class NewtonSolverTest {\n     /**\n      *", "timestamp": 1345889160, "metainfo": ""}