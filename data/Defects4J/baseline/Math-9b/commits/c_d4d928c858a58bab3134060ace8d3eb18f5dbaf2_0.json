{"sha": "d4d928c858a58bab3134060ace8d3eb18f5dbaf2", "log": "MATH-798 Unit test.   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/optimization/fitting/GaussianFitterTest.java\n+++ b/src/test/java/org/apache/commons/math3/optimization/fitting/GaussianFitterTest.java\n         Assert.assertEquals(53.1572792, p[1], 1e-7);\n         Assert.assertEquals(5.75214622, p[2], 1e-8);\n     }\n+\n+    @Test\n+    public void testMath798() {\n+        final GaussianFitter fitter = new GaussianFitter(new LevenbergMarquardtOptimizer());\n+\n+        // When the data points are not commented out below, the fit stalls.\n+        // This is expected however, since the whole dataset hardly looks like\n+        // a Gaussian.\n+        // When commented out, the fit proceeds fine.\n+\n+        fitter.addObservedPoint(0.23, 395.0);\n+        //fitter.addObservedPoint(0.68, 0.0);\n+        fitter.addObservedPoint(1.14, 376.0);\n+        //fitter.addObservedPoint(1.59, 0.0);\n+        fitter.addObservedPoint(2.05, 163.0);\n+        //fitter.addObservedPoint(2.50, 0.0);\n+        fitter.addObservedPoint(2.95, 49.0);\n+        //fitter.addObservedPoint(3.41, 0.0);\n+        fitter.addObservedPoint(3.86, 16.0);\n+        //fitter.addObservedPoint(4.32, 0.0);\n+        fitter.addObservedPoint(4.77, 1.0);\n+\n+        final double[] p = fitter.fit();\n+\n+        // Values are copied from a previous run of this test.\n+        Assert.assertEquals(420.8397296167364, p[0], 1e-12);\n+        Assert.assertEquals(0.603770729862231, p[1], 1e-15);\n+        Assert.assertEquals(1.0786447936766612, p[2], 1e-14);\n+    }\n     \n     /**\n      * Adds the specified points to specified <code>GaussianFitter</code>", "timestamp": 1339579856, "metainfo": ""}