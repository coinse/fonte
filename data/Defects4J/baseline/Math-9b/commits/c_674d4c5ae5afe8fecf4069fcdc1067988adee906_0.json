{"sha": "674d4c5ae5afe8fecf4069fcdc1067988adee906", "log": "Added createXIdentityMatrix methods to MatrixUtils and deprecated getIdentity methods in RealMatrixImpl, BigMatrixImpl. Modified RealMatrixImpl, BigMatrixImpl constructors to throw IllegalArgumentExceptions instead of ArrayIndexOutOfBounds when dimension arguments are not positive.   ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n     /** Serialization id */\n     static final long serialVersionUID = -1011428905656140431L;\n     \n-    /** The number zero. */\n-    private static final BigDecimal ZERO = new BigDecimal(0);\n-    \n-    /** The number one. */\n-    private static final BigDecimal ONE = new BigDecimal(1);\n-    \n     /** Entries of the matrix */\n     private BigDecimal data[][] = null;\n     \n     /** Bound to determine effective singularity in LU decomposition */\n     protected static BigDecimal TOO_SMALL = new BigDecimal(10E-12);\n     \n+    /** BigDecimal 0 */\n+    static final BigDecimal ZERO = new BigDecimal(0);\n+    /** BigDecimal 1 */\n+    static final BigDecimal ONE = new BigDecimal(1);\n+    \n     /** \n      * Creates a matrix with no data\n      */\n      *\n      * @param rowDimension      the number of rows in the new matrix\n      * @param columnDimension   the number of columns in the new matrix\n+     * @throws IllegalArgumentException if row or column dimension is not\n+     *  positive\n      */\n     public BigMatrixImpl(int rowDimension, int columnDimension) {\n+        if (rowDimension <=0 || columnDimension <=0) {\n+            throw new IllegalArgumentException\n+            (\"row and column dimensions must be positive\");\n+        }\n         data = new BigDecimal[rowDimension][columnDimension];\n         lu = null;\n     }\n      * @throws InvalidMatrixException if this is not invertible\n      */\n     public BigMatrix inverse() throws InvalidMatrixException {\n-        return solve(getIdentity(this.getRowDimension()));\n+        return solve(MatrixUtils.createBigIdentityMatrix\n+                (this.getRowDimension()));\n     }\n     \n     /**\n      *\n      * @param dimension dimension of identity matrix to generate\n      * @return identity matrix\n+     * @throws IllegalArgumentException if dimension is not positive\n+     * @deprecated  use {@link MatrixUtils#createBigIdentityMatrix}\n      */\n     protected BigMatrix getIdentity(int dimension) {\n-        BigMatrixImpl out = new BigMatrixImpl(dimension, dimension);\n-        BigDecimal[][] d = out.getDataRef();\n-        for (int row = 0; row < dimension; row++) {\n-            for (int col = 0; col < dimension; col++) {\n-                d[row][col] = row == col ? ONE : ZERO;\n-            }\n-        }\n-        return out;\n+        return MatrixUtils.createBigIdentityMatrix(dimension);\n     }\n     \n     /**\n--- a/src/java/org/apache/commons/math/linear/MatrixUtils.java\n+++ b/src/java/org/apache/commons/math/linear/MatrixUtils.java\n     }\n     \n     /**\n+     * Returns <code>dimension x dimension</code> identity matrix.\n+     *\n+     * @param dimension dimension of identity matrix to generate\n+     * @return identity matrix\n+     * @throws IllegalArgumentException if dimension is not positive\n+     */\n+    public static RealMatrix createRealIdentityMatrix(int dimension) {\n+        RealMatrixImpl out = new RealMatrixImpl(dimension, dimension);\n+        double[][] d = out.getDataRef();\n+        for (int row = 0; row < dimension; row++) {\n+            for (int col = 0; col < dimension; col++) {\n+                d[row][col] = row == col ? 1d : 0d;\n+            }\n+        }\n+        return out;\n+    }\n+    \n+    /**\n      * Returns a {@link BigMatrix} whose entries are the the values in the\n      * the input array.  The input array is copied, not referenced.\n      * \n         }\n         return new BigMatrixImpl(data);\n     }\n+    /** BigDecimal constants */\n+    //private static final BigDecimal ZERO = new BigDecimal(0);      \n+    //private static final BigDecimal ONE = new BigDecimal(1);\n+    \n+    /**\n+     * Returns <code>dimension x dimension</code> identity matrix.\n+     *\n+     * @param dimension dimension of identity matrix to generate\n+     * @return identity matrix\n+     * @throws IllegalArgumentException if dimension is not positive\n+     */\n+    public static BigMatrix createBigIdentityMatrix(int dimension) {\n+        BigMatrixImpl out = new BigMatrixImpl(dimension, dimension);\n+        BigDecimal[][] d = out.getDataRef();\n+        for (int row = 0; row < dimension; row++) {\n+            for (int col = 0; col < dimension; col++) {\n+                d[row][col] = row == col ? BigMatrixImpl.ONE : BigMatrixImpl.ZERO;\n+            }\n+        }\n+        return out;\n+    }\n     \n }\n \n--- a/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n     /**\n      * Create a new RealMatrix with the supplied row and column dimensions.\n      *\n-     * @param rowDimension      the number of rows in the new matrix\n-     * @param columnDimension   the number of columns in the new matrix\n+     * @param rowDimension  the number of rows in the new matrix\n+     * @param columnDimension  the number of columns in the new matrix\n+     * @throws IllegalArgumentException if row or column dimension is not\n+     *  positive\n      */\n     public RealMatrixImpl(int rowDimension, int columnDimension) {\n+        if (rowDimension <= 0 || columnDimension <= 0) {\n+            throw new IllegalArgumentException(\n+                    \"row and column dimensions must be postive\");\n+        }\n         data = new double[rowDimension][columnDimension];\n         lu = null;\n     }\n      * @throws InvalidMatrixException if this is not invertible\n      */\n     public RealMatrix inverse() throws InvalidMatrixException {\n-        return solve(getIdentity(this.getRowDimension()));\n+        return solve(MatrixUtils.createRealIdentityMatrix\n+                (this.getRowDimension()));\n     }\n \n     /**\n      *\n      * @param dimension dimension of identity matrix to generate\n      * @return identity matrix\n+     * @throws IllegalArgumentException  if dimension is not positive\n+     * @deprecated use {@link MatrixUtils#createRealIdentityMatrix}\n      */\n     protected RealMatrix getIdentity(int dimension) {\n-        RealMatrixImpl out = new RealMatrixImpl(dimension, dimension);\n-        double[][] d = out.getDataRef();\n-        for (int row = 0; row < dimension; row++) {\n-            for (int col = 0; col < dimension; col++) {\n-                d[row][col] = row == col ? 1d : 0d;\n-            }\n-        }\n-        return out;\n+        return MatrixUtils.createRealIdentityMatrix(dimension);\n     }\n \n     /**\n--- a/src/test/org/apache/commons/math/linear/MatrixUtilsTest.java\n+++ b/src/test/org/apache/commons/math/linear/MatrixUtilsTest.java\n             // expected\n         } \n     }\n+    \n+    /**\n+     * Verifies that the matrix is an identity matrix\n+     */\n+    protected void checkIdentityMatrix(RealMatrix m) {\n+        for (int i = 0; i < m.getRowDimension(); i++) {\n+            for (int j =0; j < m.getColumnDimension(); j++) {\n+                if (i == j) {\n+                    assertEquals(m.getEntry(i, j), 1d, 0);\n+                } else {\n+                    assertEquals(m.getEntry(i, j), 0d, 0);\n+                }\n+            }\n+        }   \n+    }\n+    \n+    public void testCreateIdentityMatrix() {\n+        checkIdentityMatrix(MatrixUtils.createRealIdentityMatrix(3));\n+        checkIdentityMatrix(MatrixUtils.createRealIdentityMatrix(2));\n+        checkIdentityMatrix(MatrixUtils.createRealIdentityMatrix(1));\n+        try {\n+            MatrixUtils.createRealIdentityMatrix(0);\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+    \n+    /**\n+     * Verifies that the matrix is an identity matrix\n+     */\n+    protected void checkIdentityBigMatrix(BigMatrix m) {\n+        for (int i = 0; i < m.getRowDimension(); i++) {\n+            for (int j =0; j < m.getColumnDimension(); j++) {\n+                if (i == j) {\n+                    assertEquals(m.getEntry(i, j), BigMatrixImpl.ONE);\n+                } else {\n+                    assertEquals(m.getEntry(i, j), BigMatrixImpl.ZERO);\n+                }\n+            }\n+        }   \n+    }\n+    \n+    public void testCreateBigIdentityMatrix() {\n+        checkIdentityBigMatrix(MatrixUtils.createBigIdentityMatrix(3));\n+        checkIdentityBigMatrix(MatrixUtils.createBigIdentityMatrix(2));\n+        checkIdentityBigMatrix(MatrixUtils.createBigIdentityMatrix(1));\n+        try {\n+            MatrixUtils.createRealIdentityMatrix(0);\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n         \n }\n ", "timestamp": 1116692959, "metainfo": ""}