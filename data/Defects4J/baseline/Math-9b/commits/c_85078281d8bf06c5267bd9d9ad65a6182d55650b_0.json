{"sha": "85078281d8bf06c5267bd9d9ad65a6182d55650b", "log": "Deprecated abstract factory methods and made SummaryStatistics a concrete classes. Pushed implementations up from SummaryStatisticsImpl. Made implementations of statistics configurable via setters.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n import java.io.Serializable;\n \n import org.apache.commons.discovery.tools.DiscoverClass;\n+import org.apache.commons.math.stat.descriptive.moment.GeometricMean;\n+import org.apache.commons.math.stat.descriptive.moment.Mean;\n+import org.apache.commons.math.stat.descriptive.moment.SecondMoment;\n+import org.apache.commons.math.stat.descriptive.moment.Variance;\n+import org.apache.commons.math.stat.descriptive.rank.Max;\n+import org.apache.commons.math.stat.descriptive.rank.Min;\n+import org.apache.commons.math.stat.descriptive.summary.Sum;\n+import org.apache.commons.math.stat.descriptive.summary.SumOfLogs;\n+import org.apache.commons.math.stat.descriptive.summary.SumOfSquares;\n import org.apache.commons.math.util.MathUtils;\n \n /**\n- * Abstract factory class for univariate statistical summaries.\n+ * <p>Computes summary statistics for a stream of data values added using the \n+ * {@link #addValue(double) addValue} method. The data values are not stored in\n+ * memory, so this class can be used to compute statistics for very large\n+ * data streams.</p>\n+ * \n+ * <p>The {@link StorelessUnivariateStatistic} instances used to maintain\n+ * summary state and compute statistics are configurable via setters.\n+ * For example, the default implementation for the variance can be overridden by\n+ * calling {@link #setVarianceImpl(StorelessUnivariateStatistic)}. Actual\n+ * parameters to these methods must implement the \n+ * {@link StorelessUnivariateStatistic} interface and configuration must be\n+ * completed before <code>addValue</code> is called. No configuration is\n+ * necessary to use the default, commons-math provided implementations.</p>\n+ * \n+ * <p>Note: This class is not thread-safe. Use \n+ * {@link SynchronizedSummaryStatistics} if concurrent access from multiple\n+ * threads is required.</p>\n  *\n  * @version $Revision$ $Date$\n  */\n-public abstract class SummaryStatistics implements StatisticalSummary, Serializable {\n+public class SummaryStatistics implements StatisticalSummary, Serializable {\n \n     /** Serialization UID */\n-    private static final long serialVersionUID = -6400596334135654825L;\n+    private static final long serialVersionUID = -3346512372447011854L;\n      \n     /**\n      * Create an instance of a <code>SummaryStatistics</code>\n      * \n      * @param cls the type of <code>SummaryStatistics</code> object to\n      *        create. \n-     * @return a new factory. \n+     * @return a new instance. \n+     * @deprecated to be removed in commons-math 2.0\n      * @throws InstantiationException is thrown if the object can not be\n      *            created.\n      * @throws IllegalAccessException is thrown if the type's default\n     /**\n      * Create an instance of a <code>SummaryStatistics</code>\n      * \n-     * @return a new SummaryStatistics instance. \n+     * @return a new SummaryStatistics instance.\n+     * @deprecated to be removed in commons-math 2.0 \n      */\n     public static SummaryStatistics newInstance() {\n         SummaryStatistics instance = null;\n         return instance;\n     }\n     \n+    /**\n+     * Construct a SummaryStatistics instance\n+     */\n+    public SummaryStatistics() {\n+    }\n+    \n+    /** count of values that have been added */\n+    protected long n = 0;\n+    \n+    /** SecondMoment is used to compute the mean and variance */\n+    protected SecondMoment secondMoment = new SecondMoment();\n+    \n+    /** sum of values that have been added */\n+    protected Sum sum = new Sum();\n+\n+    /** sum of the square of each value that has been added */\n+    protected SumOfSquares sumsq = new SumOfSquares();\n+\n+    /** min of values that have been added */\n+    protected Min min = new Min();\n+\n+    /** max of values that have been added */\n+    protected Max max = new Max();\n+\n+    /** sumLog of values that have been added */\n+    protected SumOfLogs sumLog = new SumOfLogs();\n+\n+    /** geoMean of values that have been added */\n+    protected GeometricMean geoMean = new GeometricMean();\n+\n+    /** mean of values that have been added */\n+    protected Mean mean = new Mean();\n+\n+    /** variance of values that have been added */\n+    protected Variance variance = new Variance();\n+    \n+    //  Statistics implementations - can be reset by setters \n+    private StorelessUnivariateStatistic sumImpl = sum;\n+    private StorelessUnivariateStatistic sumsqImpl = sumsq;\n+    private StorelessUnivariateStatistic minImpl = min;\n+    private StorelessUnivariateStatistic maxImpl = max;\n+    private StorelessUnivariateStatistic sumLogImpl = sumLog;\n+    private StorelessUnivariateStatistic geoMeanImpl = geoMean;\n+    private StorelessUnivariateStatistic meanImpl = mean;\n+    private StorelessUnivariateStatistic varianceImpl = variance;\n \n     /**\n      * Return a {@link StatisticalSummaryValues} instance reporting current\n     }\n     \n     /**\n-     * Adds the value to the data to be summarized\n-     * @param v the value to be added \n-     */\n-    public abstract void addValue(double v);\n-\n-    /** \n-     * Returns the <a href=\"http://www.xycoon.com/arithmetic_mean.htm\">\n-     * arithmetic mean </a> of the available values \n-     * @return The mean or Double.NaN if no values have been added.\n-     */\n-    public abstract double getMean();\n-\n-    /** \n-     * Returns the <a href=\"http://www.xycoon.com/geometric_mean.htm\">\n-     * geometric mean </a> of the available values\n-     * @return The geometricMean, Double.NaN if no values have been added, \n-     * or if the productof the available values is less than or equal to 0.\n-     */\n-    public abstract double getGeometricMean();\n-\n-    /** \n-     * Returns the variance of the available values.\n-     * @return The variance, Double.NaN if no values have been added \n-     * or 0.0 for a single value set.  \n-     */\n-    public abstract double getVariance();\n-\n-    /** \n-     * Returns the standard deviation of the available values.\n-     * @return The standard deviation, Double.NaN if no values have been added \n-     * or 0.0 for a single value set. \n-     */\n-    public abstract double getStandardDeviation();\n-    \n-    /** \n-     * Returns the maximum of the available values\n-     * @return The max or Double.NaN if no values have been added.\n-     */\n-    public abstract double getMax();\n-\n-    /** \n-    * Returns the minimum of the available values\n-    * @return The min or Double.NaN if no values have been added.\n-    */\n-    public abstract double getMin();\n+     * Add a value to the data\n+     * \n+     * @param value  the value to add\n+     */\n+    public void addValue(double value) {\n+        sumImpl.increment(value);\n+        sumsqImpl.increment(value);\n+        minImpl.increment(value);\n+        maxImpl.increment(value);\n+        sumLogImpl.increment(value);\n+        geoMean.increment(value);\n+        secondMoment.increment(value);\n+        // If mean or variance have been overridden,\n+        // need to increment these, since they don't have secondMoment\n+        if (!(meanImpl instanceof Mean)) {\n+                meanImpl.increment(value);\n+        }\n+        if (!(varianceImpl instanceof Variance)) {\n+            varianceImpl.increment(value);\n+        }\n+        n++;\n+    }\n \n     /** \n      * Returns the number of available values\n      * @return The number of available values\n      */\n-    public abstract long getN();\n-\n-    /**\n-     * Returns the sum of the values that have been added to Univariate.\n-     * @return The sum or Double.NaN if no values have been added\n-     */\n-    public abstract double getSum();\n-\n-    /**\n-     * Returns the sum of the squares of the available values.\n-     * @return The sum of the squares or Double.NaN if no \n-     * values have been added.\n-     */\n-    public abstract double getSumsq();\n+    public long getN() {\n+        return n;\n+    }\n+\n+    /**\n+     * Returns the sum of the values that have been added\n+     * @return The sum or <code>Double.NaN</code> if no values have been added\n+     */\n+    public double getSum() {\n+        return sumImpl.getResult();\n+    }\n+\n+    /**\n+     * Returns the sum of the squares of the values that have been added.\n+     * <p>\n+     *  Double.NaN is returned if no values have been added.</p>\n+     * \n+     * @return The sum of squares\n+     */\n+    public double getSumsq() {\n+        return sumsqImpl.getResult();\n+    }\n+\n+    /**\n+     * Returns the mean of the values that have been added.\n+     * <p>\n+     *  Double.NaN is returned if no values have been added.</p>\n+     * \n+     * @return the mean\n+     */\n+    public double getMean() {\n+      if (mean == meanImpl) {\n+          return new Mean(secondMoment).getResult();\n+      } else {\n+          return meanImpl.getResult();\n+      }\n+    }\n+\n+    /**\n+     * Returns the standard deviation of the values that have been added.\n+     * <p>\n+     *  Double.NaN is returned if no values have been added.</p>\n+     * \n+     * @return the standard deviation\n+     */\n+    public double getStandardDeviation() {\n+        double stdDev = Double.NaN;\n+        if (getN() > 0) {\n+            if (getN() > 1) {\n+                stdDev = Math.sqrt(getVariance());\n+            } else {\n+                stdDev = 0.0;\n+            }\n+        }\n+        return (stdDev);\n+    }\n+\n+    /**\n+     * Returns the variance of the values that have been added.\n+     * <p>\n+     *  Double.NaN is returned if no values have been added.</p>\n+     *\n+     * @return the variance \n+     */\n+    public double getVariance() {\n+        if (varianceImpl == variance) {\n+            return new Variance(secondMoment).getResult();\n+        } else {\n+            return varianceImpl.getResult();\n+        }\n+    }\n+\n+    /**\n+     * Returns the maximum of the values that have been added.\n+     * <p>\n+     *  Double.NaN is returned if no values have been added.</p>\n+     *\n+     * @return the maximum  \n+     */\n+    public double getMax() {\n+        return maxImpl.getResult();\n+    }\n+\n+    /**\n+     * Returns the minimum of the values that have been added.\n+     * <p>\n+     *  Double.NaN is returned if no values have been added.</p>\n+     *\n+     * @return the minimum  \n+     */\n+    public double getMin() {\n+        return minImpl.getResult();\n+    }\n+\n+    /**\n+     * Returns the geometric mean of the values that have been added.\n+     * <p>\n+     *  Double.NaN is returned if no values have been added.</p>\n+     *\n+     * @return the geometric mean  \n+     */\n+    public double getGeometricMean() {\n+        return geoMeanImpl.getResult();\n+    }\n+    \n+    /**\n+     * Generates a text report displaying\n+     * summary statistics from values that\n+     * have been added.\n+     * @return String with line feeds displaying statistics\n+     */\n+    public String toString() {\n+        StringBuffer outBuffer = new StringBuffer();\n+        outBuffer.append(\"SummaryStatistics:\\n\");\n+        outBuffer.append(\"n: \" + getN() + \"\\n\");\n+        outBuffer.append(\"min: \" + getMin() + \"\\n\");\n+        outBuffer.append(\"max: \" + getMax() + \"\\n\");\n+        outBuffer.append(\"mean: \" + getMean() + \"\\n\");\n+        outBuffer.append(\"geometric mean: \" + getGeometricMean() + \"\\n\");\n+        outBuffer.append(\"variance: \" + getVariance() + \"\\n\");\n+        outBuffer.append(\"sum of squares: \" + getSumsq() + \"\\n\");\n+        outBuffer.append(\"standard deviation: \" + getStandardDeviation() + \"\\n\");\n+        return outBuffer.toString();\n+    }\n \n     /** \n-     * Resets all statistics\n-     */\n-    public abstract void clear();\n+     * Resets all statistics and storage\n+     */\n+    public void clear() {\n+        this.n = 0;\n+        minImpl.clear();\n+        maxImpl.clear();\n+        sumImpl.clear();\n+        sumLogImpl.clear();\n+        sumsqImpl.clear();\n+        geoMeanImpl.clear();\n+        secondMoment.clear();\n+        if (meanImpl != mean) {\n+            meanImpl.clear();\n+        }\n+        if (varianceImpl != variance) {\n+            varianceImpl.clear();\n+        }\n+    }\n     \n     /**\n      * Returns true iff <code>object</code> is a <code>SummaryStatistics</code>\n         return result;\n     }\n \n+    // Getters and setters for statistics implementations\n+    /**\n+     * Returns the currently configured Sum implementation\n+     * \n+     * @return the StorelessUnivariateStatistic implementing the sum\n+     */\n+    public synchronized StorelessUnivariateStatistic getSumImpl() {\n+        return sumImpl;\n+    }\n+\n+    /**\n+     * <p>Sets the implementation for the Sum.</p>\n+     * <p>This method must be activated before any data has been added - i.e.,\n+     * before {@link #addValue(double) addValue} has been used to add data; \n+     * otherwise an IllegalStateException will be thrown.</p>\n+     * \n+     * @param sumImpl the StorelessUnivariateStatistic instance to use\n+     * for computing the Sum\n+     * @throws IllegalStateException if data has already been added\n+     *  (i.e if n > 0)\n+     */\n+    public synchronized void setSumImpl(StorelessUnivariateStatistic sumImpl) {\n+        checkEmpty();\n+        this.sumImpl = sumImpl;\n+    }\n+\n+    /**\n+     * Returns the currently configured sum of squares implementation\n+     * \n+     * @return the StorelessUnivariateStatistic implementing the sum of squares\n+     */\n+    public synchronized StorelessUnivariateStatistic getSumsqImpl() {\n+        return sumsqImpl;\n+    }\n+\n+    /**\n+     * <p>Sets the implementation for the sum of squares.</p>\n+     * <p>This method must be activated before any data has been added - i.e.,\n+     * before {@link #addValue(double) addValue} has been used to add data; \n+     * otherwise an IllegalStateException will be thrown.</p>\n+     * \n+     * @param sumsqImpl the StorelessUnivariateStatistic instance to use\n+     * for computing the sum of squares\n+     * @throws IllegalStateException if data has already been added\n+     *  (i.e if n > 0)\n+     */\n+    public synchronized void setSumsqImpl(\n+            StorelessUnivariateStatistic sumsqImpl) {\n+        checkEmpty();\n+        this.sumsqImpl = sumsqImpl;\n+    }\n+\n+    /**\n+     * Returns the currently configured minimum implementation\n+     * \n+     * @return the StorelessUnivariateStatistic implementing the minimum\n+     */\n+    public synchronized StorelessUnivariateStatistic getMinImpl() {\n+        return minImpl;\n+    }\n+\n+    /**\n+     * <p>Sets the implementation for the minimum.</p>\n+     * <p>This method must be activated before any data has been added - i.e.,\n+     * before {@link #addValue(double) addValue} has been used to add data; \n+     * otherwise an IllegalStateException will be thrown.</p>\n+     * \n+     * @param minImpl the StorelessUnivariateStatistic instance to use\n+     * for computing the minimum\n+     * @throws IllegalStateException if data has already been added\n+     *  (i.e if n > 0)\n+     */\n+    public synchronized void setMinImpl(StorelessUnivariateStatistic minImpl) {\n+        checkEmpty();\n+        this.minImpl = minImpl;\n+    }\n+\n+    /**\n+     * Returns the currently configured maximum implementation\n+     * \n+     * @return the StorelessUnivariateStatistic implementing the maximum\n+     */\n+    public synchronized StorelessUnivariateStatistic getMaxImpl() {\n+        return maxImpl;\n+    }\n+\n+    /**\n+     * <p>Sets the implementation for the maximum.</p>\n+     * <p>This method must be activated before any data has been added - i.e.,\n+     * before {@link #addValue(double) addValue} has been used to add data; \n+     * otherwise an IllegalStateException will be thrown.</p>\n+     * \n+     * @param maxImpl the StorelessUnivariateStatistic instance to use\n+     * for computing the maximum\n+     * @throws IllegalStateException if data has already been added\n+     *  (i.e if n > 0)\n+     */\n+    public synchronized void setMaxImpl(StorelessUnivariateStatistic maxImpl) {\n+        checkEmpty();\n+        this.maxImpl = maxImpl;\n+    }\n+\n+    /**\n+     * Returns the currently configured sum of logs implementation\n+     * \n+     * @return the StorelessUnivariateStatistic implementing the log sum\n+     */\n+    public synchronized StorelessUnivariateStatistic getSumLogImpl() {\n+        return sumLogImpl;\n+    }\n+\n+    /**\n+     * <p>Sets the implementation for the sum of logs.</p>\n+     * <p>This method must be activated before any data has been added - i.e.,\n+     * before {@link #addValue(double) addValue} has been used to add data; \n+     * otherwise an IllegalStateException will be thrown.</p>\n+     * \n+     * @param sumLogImpl the StorelessUnivariateStatistic instance to use\n+     * for computing the log sum\n+     * @throws IllegalStateException if data has already been added \n+     *  (i.e if n > 0)\n+     */\n+    public synchronized void setSumLogImpl(\n+            StorelessUnivariateStatistic sumLogImpl) {\n+        checkEmpty();\n+        this.sumLogImpl = sumLogImpl;\n+    }\n+\n+    /**\n+     * Returns the currently configured geometric mean implementation\n+     * \n+     * @return the StorelessUnivariateStatistic implementing the geometric mean\n+     */\n+    public synchronized StorelessUnivariateStatistic getGeoMeanImpl() {\n+        return geoMeanImpl;\n+    }\n+\n+    /**\n+     * <p>Sets the implementation for the geometric mean.</p>\n+     * <p>This method must be activated before any data has been added - i.e.,\n+     * before {@link #addValue(double) addValue} has been used to add data; \n+     * otherwise an IllegalStateException will be thrown.</p>\n+     * \n+     * @param geoMeanImpl the StorelessUnivariateStatistic instance to use\n+     * for computing the geometric mean\n+     * @throws IllegalStateException if data has already been added\n+     *  (i.e if n > 0)\n+     */\n+    public synchronized void setGeoMeanImpl(\n+            StorelessUnivariateStatistic geoMeanImpl) {\n+        checkEmpty();\n+        this.geoMeanImpl = geoMeanImpl;\n+    }\n+\n+    /**\n+     * Returns the currently configured mean implementation\n+     * \n+     * @return the StorelessUnivariateStatistic implementing the mean\n+     */\n+    public synchronized StorelessUnivariateStatistic getMeanImpl() {\n+        return meanImpl;\n+    }\n+\n+    /**\n+     * <p>Sets the implementation for the mean.</p>\n+     * <p>This method must be activated before any data has been added - i.e.,\n+     * before {@link #addValue(double) addValue} has been used to add data; \n+     * otherwise an IllegalStateException will be thrown.</p>\n+     * \n+     * @param meanImpl the StorelessUnivariateStatistic instance to use\n+     * for computing the mean\n+     * @throws IllegalStateException if data has already been added\n+     *  (i.e if n > 0)\n+     */\n+    public synchronized void setMeanImpl(\n+            StorelessUnivariateStatistic meanImpl) {\n+        checkEmpty();\n+        this.meanImpl = meanImpl;\n+    }\n+\n+    /**\n+     * Returns the currently configured variance implementation\n+     * \n+     * @return the StorelessUnivariateStatistic implementing the variance\n+     */\n+    public synchronized StorelessUnivariateStatistic getVarianceImpl() {\n+        return varianceImpl;\n+    }\n+\n+    /**\n+     * <p>Sets the implementation for the variance.</p>\n+     * <p>This method must be activated before any data has been added - i.e.,\n+     * before {@link #addValue(double) addValue} has been used to add data; \n+     * otherwise an IllegalStateException will be thrown.</p>\n+     * \n+     * @param varianceImpl the StorelessUnivariateStatistic instance to use\n+     * for computing the variance\n+     * @throws IllegalStateException if data has already been added\n+     *  (i.e if n > 0)\n+     */\n+    public synchronized void setVarianceImpl(\n+            StorelessUnivariateStatistic varianceImpl) {\n+        checkEmpty();\n+        this.varianceImpl = varianceImpl;\n+    }\n+    \n+    /**\n+     * Throws IllegalStateException if n > 0.\n+     */\n+    private void checkEmpty() {\n+        if (n > 0) {\n+            throw new IllegalStateException(\n+                \"Implementations must be configured before values are added.\");\n+        }\n+    }\n+\n }\n--- a/src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java\n package org.apache.commons.math.stat.descriptive;\n \n import java.io.Serializable;\n-import org.apache.commons.math.stat.descriptive.moment.SecondMoment;\n-import org.apache.commons.math.stat.descriptive.moment.GeometricMean;\n-import org.apache.commons.math.stat.descriptive.moment.Mean;\n-import org.apache.commons.math.stat.descriptive.moment.Variance;\n-import org.apache.commons.math.stat.descriptive.rank.Max;\n-import org.apache.commons.math.stat.descriptive.rank.Min;\n-import org.apache.commons.math.stat.descriptive.summary.Sum;\n-import org.apache.commons.math.stat.descriptive.summary.SumOfLogs;\n-import org.apache.commons.math.stat.descriptive.summary.SumOfSquares;\n \n /**\n  * Provides a default {@link SummaryStatistics} implementation.\n- *\n+ * \n+ * @deprecated to be removed in commons math 2.0.  Use {@link SummaryStatistics}.\n  * @version $Revision$ $Date$  \n  */\n public class SummaryStatisticsImpl extends SummaryStatistics implements Serializable {\n \n     /** Serializable version identifier */\n-    private static final long serialVersionUID = 8787174276883311692L;\n-\n-    /** count of values that have been added */\n-    protected long n = 0;\n-    \n-    /** SecondMoment is used to compute the mean and variance */\n-    protected SecondMoment secondMoment = null;\n-    \n-    /** sum of values that have been added */\n-    protected Sum sum = null;\n-\n-    /** sum of the square of each value that has been added */\n-    protected SumOfSquares sumsq = null;\n-\n-    /** min of values that have been added */\n-    protected Min min = null;\n-\n-    /** max of values that have been added */\n-    protected Max max = null;\n-\n-    /** sumLog of values that have been added */\n-    protected SumOfLogs sumLog = null;\n-\n-    /** geoMean of values that have been added */\n-    protected GeometricMean geoMean = null;\n-\n-    /** mean of values that have been added */\n-    protected Mean mean = null;\n-\n-    /** variance of values that have been added */\n-    protected Variance variance = null;\n+    private static final long serialVersionUID = 8528794411480425963L;\n \n     /**\n      * Construct a SummaryStatistics\n      */\n     public SummaryStatisticsImpl() {\n-        sum = new Sum();\n-        sumsq = new SumOfSquares();\n-        min = new Min();\n-        max = new Max();\n-        sumLog = new SumOfLogs();\n-        geoMean = new GeometricMean();\n-        secondMoment = new SecondMoment();\n-    }\n-\n-    /**\n-     * Add a value to the data\n-     * \n-     * @param value  the value to add\n-     */\n-    public void addValue(double value) {\n-        sum.increment(value);\n-        sumsq.increment(value);\n-        min.increment(value);\n-        max.increment(value);\n-        sumLog.increment(value);\n-        geoMean.increment(value);\n-        secondMoment.increment(value);\n-        n++;\n-    }\n-\n-    /** \n-     * Returns the number of available values\n-     * @return The number of available values\n-     */\n-    public long getN() {\n-        return n;\n-    }\n-\n-    /**\n-     * Returns the sum of the values that have been added to Univariate.\n-     * @return The sum or Double.NaN if no values have been added\n-     */\n-    public double getSum() {\n-        return sum.getResult();\n-    }\n-\n-    /**\n-     * Returns the sum of the squares of the values that have been added.\n-     * <p>\n-     *  Double.NaN is returned if no values have been added.</p>\n-     * \n-     * @return The sum of squares\n-     */\n-    public double getSumsq() {\n-        return sumsq.getResult();\n-    }\n-\n-    /**\n-     * Returns the mean of the values that have been added.\n-     * <p>\n-     *  Double.NaN is returned if no values have been added.</p>\n-     * \n-     * @return the mean\n-     */\n-    public double getMean() {\n-      return new Mean(secondMoment).getResult();\n-    }\n-\n-    /**\n-     * Returns the standard deviation of the values that have been added.\n-     * <p>\n-     *  Double.NaN is returned if no values have been added.</p>\n-     * \n-     * @return the standard deviation\n-     */\n-    public double getStandardDeviation() {\n-        double stdDev = Double.NaN;\n-        if (getN() > 0) {\n-            if (getN() > 1) {\n-                stdDev = Math.sqrt(getVariance());\n-            } else {\n-                stdDev = 0.0;\n-            }\n-        }\n-        return (stdDev);\n-    }\n-\n-    /**\n-     * Returns the variance of the values that have been added.\n-     * <p>\n-     *  Double.NaN is returned if no values have been added.</p>\n-     *\n-     * @return the variance \n-     */\n-    public double getVariance() {\n-        return new Variance(secondMoment).getResult();\n-    }\n-\n-    /**\n-     * Returns the maximum of the values that have been added.\n-     * <p>\n-     *  Double.NaN is returned if no values have been added.</p>\n-     *\n-     * @return the maximum  \n-     */\n-    public double getMax() {\n-        return max.getResult();\n-    }\n-\n-    /**\n-     * Returns the minimum of the values that have been added.\n-     * <p>\n-     *  Double.NaN is returned if no values have been added.</p>\n-     *\n-     * @return the minimum  \n-     */\n-    public double getMin() {\n-        return min.getResult();\n-    }\n-\n-    /**\n-     * Returns the geometric mean of the values that have been added.\n-     * <p>\n-     *  Double.NaN is returned if no values have been added.</p>\n-     *\n-     * @return the geometric mean  \n-     */\n-    public double getGeometricMean() {\n-        return geoMean.getResult();\n+        super();\n     }\n     \n-    /**\n-     * Generates a text report displaying\n-     * summary statistics from values that\n-     * have been added.\n-     * @return String with line feeds displaying statistics\n-     */\n-    public String toString() {\n-        StringBuffer outBuffer = new StringBuffer();\n-        outBuffer.append(\"SummaryStatistics:\\n\");\n-        outBuffer.append(\"n: \" + getN() + \"\\n\");\n-        outBuffer.append(\"min: \" + getMin() + \"\\n\");\n-        outBuffer.append(\"max: \" + getMax() + \"\\n\");\n-        outBuffer.append(\"mean: \" + getMean() + \"\\n\");\n-        outBuffer.append(\"geometric mean: \" + getGeometricMean() + \"\\n\");\n-        outBuffer.append(\"variance: \" + getVariance() + \"\\n\");\n-        outBuffer.append(\"sum of squares: \" + getSumsq() + \"\\n\");\n-        outBuffer.append(\"standard deviation: \" + getStandardDeviation() + \"\\n\");\n-        return outBuffer.toString();\n-    }\n-\n-    /** \n-     * Resets all statistics and storage\n-     */\n     public void clear() {\n-        this.n = 0;\n-        min.clear();\n-        max.clear();\n-        sum.clear();\n-        sumLog.clear();\n-        sumsq.clear();\n-        geoMean.clear();\n-        secondMoment.clear();\n+        super.clear();\n     }\n \n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.descriptive;\n+\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.math.TestUtils;\n+import org.apache.commons.math.stat.descriptive.moment.Mean;\n+/**\n+ * Test cases for the {@link SummaryStatistics} class.\n+ * When SummaryStatisticsImpl is removed in math 2.0, test cases from\n+ * SummaryStatisticsImplTest should be merged into this class.\n+ *\n+ * @version $Revision: 566833 $ $Date: 2007-08-16 13:36:33 -0700 (Thu, 16 Aug 2007) $\n+ */\n+\n+public final class SummaryStatisticsTest extends TestCase {\n+    \n+    protected SummaryStatistics u = null;\n+    \n+    public SummaryStatisticsTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() {  \n+        u = new SummaryStatistics();\n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(SummaryStatisticsTest.class);\n+        suite.setName(\"SummaryStatistics tests\");\n+        return suite;\n+    }\n+    \n+    public void testSetterInjection() throws Exception {\n+        u.setMeanImpl(new sumMean());\n+        u.addValue(1);\n+        u.addValue(3);\n+        assertEquals(4, u.getMean(), 1E-14);\n+        u.clear();\n+        u.addValue(1);\n+        u.addValue(2);\n+        assertEquals(3, u.getMean(), 1E-14);\n+        u.clear();\n+        u.setMeanImpl(new Mean()); // OK after clear\n+    }\n+    \n+    public void testSetterIllegalState() throws Exception {\n+        u.addValue(1);\n+        u.addValue(3);\n+        try {\n+            u.setMeanImpl(new sumMean());\n+            fail(\"Expecting IllegalStateException\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+    \n+    /**\n+     * Bogus mean implementation to test setter injection.\n+     * Returns the sum instead of the mean.\n+     */\n+    class sumMean implements StorelessUnivariateStatistic {   \n+        private double sum = 0;\n+        private long n = 0;\n+        public double evaluate(double[] values, int begin, int length) {\n+            return 0;\n+        }\n+        public double evaluate(double[] values) {\n+            return 0;\n+        }\n+        public void clear() {\n+          sum = 0; \n+          n = 0;\n+        }\n+        public long getN() {\n+            return n;\n+        }\n+        public double getResult() {\n+            return sum;\n+        }\n+        public void increment(double d) {\n+            sum += d;\n+            n++;\n+        }\n+        public void incrementAll(double[] values, int start, int length) {\n+        }\n+        public void incrementAll(double[] values) {\n+        }   \n+    }  \n+}", "timestamp": 1197082119, "metainfo": ""}