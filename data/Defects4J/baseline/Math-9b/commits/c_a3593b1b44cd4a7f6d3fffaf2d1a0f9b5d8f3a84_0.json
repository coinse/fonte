{"sha": "a3593b1b44cd4a7f6d3fffaf2d1a0f9b5d8f3a84", "log": "Fixed typo in class name.   ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math3/distribution/AbstractIntegerDistributionTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.distribution;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test cases for AbstractIntegerDistribution default implementations.\n+ *\n+ * @version $Id$\n+ */\n+public class AbstractIntegerDistributionTest {\n+    protected final DiceDistribution diceDistribution = new DiceDistribution();\n+    protected final double p = diceDistribution.probability(1);\n+\n+    @Test\n+    public void testCumulativeProbabilitiesSingleArguments() throws Exception {\n+        for (int i = 1; i < 7; i++) {\n+            Assert.assertEquals(p * i,\n+                    diceDistribution.cumulativeProbability(i), Double.MIN_VALUE);\n+        }\n+        Assert.assertEquals(0.0,\n+                diceDistribution.cumulativeProbability(0), Double.MIN_VALUE);\n+        Assert.assertEquals(1.0,\n+                diceDistribution.cumulativeProbability(7), Double.MIN_VALUE);\n+    }\n+\n+    @Test\n+    public void testCumulativeProbabilitiesRangeArguments() throws Exception {\n+        int lower = 0;\n+        int upper = 6;\n+        for (int i = 0; i < 2; i++) {\n+            // cum(0,6) = p(0 < X <= 6) = 1, cum(1,5) = 4/6, cum(2,4) = 2/6\n+            Assert.assertEquals(1 - p * 2 * i,\n+                    diceDistribution.cumulativeProbability(lower, upper), 1E-12);\n+            lower++;\n+            upper--;\n+        }\n+        for (int i = 0; i < 6; i++) {\n+            Assert.assertEquals(p, diceDistribution.cumulativeProbability(i, i+1), 1E-12);\n+        }\n+    }\n+\n+    /**\n+     * Simple distribution modeling a 6-sided die\n+     */\n+    class DiceDistribution extends AbstractIntegerDistribution {\n+        public static final long serialVersionUID = 23734213;\n+\n+        private final double p = 1d/6d;\n+\n+        public double probability(int x) {\n+            if (x < 1 || x > 6) {\n+                return 0;\n+            } else {\n+                return p;\n+            }\n+        }\n+\n+        public double cumulativeProbability(int x) {\n+            if (x < 1) {\n+                return 0;\n+            } else if (x >= 6) {\n+                return 1;\n+            } else {\n+                return p * x;\n+            }\n+        }\n+\n+        public double getNumericalMean() {\n+            return 3.5;\n+        }\n+\n+        public double getNumericalVariance() {\n+            return 12.5 - 3.5 * 3.5;  // E(X^2) - E(X)^2\n+        }\n+\n+        public int getSupportLowerBound() {\n+            return 1;\n+        }\n+\n+        public int getSupportUpperBound() {\n+            return 6;\n+        }\n+\n+        public final boolean isSupportConnected() {\n+            return true;\n+        }\n+    }\n+}", "timestamp": 1342699265, "metainfo": ""}