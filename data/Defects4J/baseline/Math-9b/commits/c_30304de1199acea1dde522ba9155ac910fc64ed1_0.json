{"sha": "30304de1199acea1dde522ba9155ac910fc64ed1", "log": "Issues   https://issues.apache.org/jira/browse/MATH-348   https://issues.apache.org/jira/browse/MATH-349    ", "commit": "\n--- a/src/main/java/org/apache/commons/math/distribution/BetaDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/BetaDistribution.java\n  */\n public interface BetaDistribution extends ContinuousDistribution, HasDensity<Double> {\n     /**\n-      * Modify the shape parameter, alpha.\n-      * @param alpha the new shape parameter.\n-      */\n-     void setAlpha(double alpha);\n+     * Modify the shape parameter, alpha.\n+     * @param alpha the new shape parameter.\n+     * @deprecated as of 2.1\n+     */\n+    @Deprecated\n+    void setAlpha(double alpha);\n \n      /**\n       * Access the shape parameter, alpha\n      /**\n       * Modify the shape parameter, beta.\n       * @param beta the new scale parameter.\n+      * @deprecated as of 2.1\n       */\n+     @Deprecated\n      void setBeta(double beta);\n \n      /**\n--- a/src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java\n         z = Double.NaN;\n     }\n \n-    /** {@inheritDoc} */\n+    /** {@inheritDoc}\n+     * @deprecated as of 2.1 (class will become immutable in 3.0)\n+     */\n+    @Deprecated\n     public void setAlpha(double alpha) {\n         this.alpha = alpha;\n         z = Double.NaN;\n         return alpha;\n     }\n \n-    /** {@inheritDoc} */\n+    /** {@inheritDoc}\n+     * @deprecated as of 2.1 (class will become immutable in 3.0)\n+     */\n+    @Deprecated\n     public void setBeta(double beta) {\n         this.beta = beta;\n         z = Double.NaN;\n--- a/src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java\n     /**\n      * Change the number of trials for this distribution.\n      * @param trials the new number of trials.\n+     * @deprecated as of v2.1\n      */\n+    @Deprecated\n     void setNumberOfTrials(int trials);\n \n     /**\n      * Change the probability of success for this distribution.\n      * @param p the new probability of success.\n+     * @deprecated as of v2.1\n      */\n+    @Deprecated\n     void setProbabilityOfSuccess(double p);\n }\n--- a/src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n      */\n     public BinomialDistributionImpl(int trials, double p) {\n         super();\n-        setNumberOfTrials(trials);\n-        setProbabilityOfSuccess(p);\n+        setNumberOfTrialsInternal(trials);\n+        setProbabilityOfSuccessInternal(p);\n     }\n \n     /**\n      * @param trials the new number of trials.\n      * @throws IllegalArgumentException if <code>trials</code> is not a valid\n      *             number of trials.\n-     */\n+     * @deprecated as of 2.1 (class will become immutable in 3.0)\n+     */\n+    @Deprecated\n     public void setNumberOfTrials(int trials) {\n+        setNumberOfTrialsInternal(trials);\n+    }\n+    /**\n+     * Change the number of trials for this distribution.\n+     *\n+     * @param trials the new number of trials.\n+     * @throws IllegalArgumentException if <code>trials</code> is not a valid\n+     *             number of trials.\n+     */\n+    private void setNumberOfTrialsInternal(int trials) {\n         if (trials < 0) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                     \"number of trials must be non-negative ({0})\", trials);\n      * @param p the new probability of success.\n      * @throws IllegalArgumentException if <code>p</code> is not a valid\n      *             probability.\n-     */\n+     * @deprecated as of 2.1 (class will become immutable in 3.0)\n+     */\n+    @Deprecated\n     public void setProbabilityOfSuccess(double p) {\n+        setProbabilityOfSuccessInternal(p);\n+    }\n+    /**\n+     * Change the probability of success for this distribution.\n+     *\n+     * @param p the new probability of success.\n+     * @throws IllegalArgumentException if <code>p</code> is not a valid\n+     *             probability.\n+     */\n+    private void setProbabilityOfSuccessInternal(double p) {\n         if (p < 0.0 || p > 1.0) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                     \"{0} out of [{1}, {2}] range\", p, 0.0, 1.0);\n      */\n     @Override\n     protected int getDomainUpperBound(double p) {\n-        return getNumberOfTrials();\n+        return numberOfTrials;\n     }\n \n     /**\n         double ret;\n         if (x < 0) {\n             ret = 0.0;\n-        } else if (x >= getNumberOfTrials()) {\n+        } else if (x >= numberOfTrials) {\n             ret = 1.0;\n         } else {\n             ret = 1.0 - Beta.regularizedBeta(getProbabilityOfSuccess(),\n-                    x + 1.0, getNumberOfTrials() - x);\n+                    x + 1.0, numberOfTrials - x);\n         }\n         return ret;\n     }\n      */\n     public double probability(int x) {\n         double ret;\n-        if (x < 0 || x > getNumberOfTrials()) {\n+        if (x < 0 || x > numberOfTrials) {\n             ret = 0.0;\n         } else {\n             ret = Math.exp(SaddlePointExpansion.logBinomialProbability(x,\n--- a/src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java\n     /**\n      * Modify the median.\n      * @param median for this distribution\n+     * @deprecated as of v2.1\n      */\n+    @Deprecated\n     void setMedian(double median);\n \n     /**\n      * Modify the scale parameter.\n      * @param s scale parameter for this distribution\n+     * @deprecated as of v2.1\n      */\n+    @Deprecated\n     void setScale(double s);\n }\n--- a/src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java\n      */\n     public CauchyDistributionImpl(double median, double s){\n         super();\n-        setMedian(median);\n-        setScale(s);\n+        setMedianInternal(median);\n+        setScaleInternal(s);\n     }\n \n     /**\n     /**\n      * Modify the median.\n      * @param median for this distribution\n-     */\n+     * @deprecated as of 2.1 (class will become immutable in 3.0)\n+     */\n+    @Deprecated\n     public void setMedian(double median) {\n+        setMedianInternal(median);\n+    }\n+    /**\n+     * Modify the median.\n+     * @param median for this distribution\n+     */\n+    private void setMedianInternal(double median) {\n         this.median = median;\n     }\n \n      * Modify the scale parameter.\n      * @param s scale parameter for this distribution\n      * @throws IllegalArgumentException if <code>sd</code> is not positive.\n-     */\n+     * @deprecated as of 2.1 (class will become immutable in 3.0)\n+     */\n+    @Deprecated\n     public void setScale(double s) {\n+        setScaleInternal(s);\n+    }\n+    /**\n+     * Modify the scale parameter.\n+     * @param s scale parameter for this distribution\n+     * @throws IllegalArgumentException if <code>sd</code> is not positive.\n+     */\n+    private void setScaleInternal(double s) {\n         if (s <= 0.0) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                   \"scale must be positive ({0})\", s);\n         if (p < .5) {\n             ret = -Double.MAX_VALUE;\n         } else {\n-            ret = getMedian();\n+            ret = median;\n         }\n \n         return ret;\n         double ret;\n \n         if (p < .5) {\n-            ret = getMedian();\n+            ret = median;\n         } else {\n             ret = Double.MAX_VALUE;\n         }\n         double ret;\n \n         if (p < .5) {\n-            ret = getMedian() - getScale();\n+            ret = median - scale;\n         } else if (p > .5) {\n-            ret = getMedian() + getScale();\n-        } else {\n-            ret = getMedian();\n+            ret = median + scale;\n+        } else {\n+            ret = median;\n         }\n \n         return ret;\n--- a/src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java\n     /**\n      * Modify the degrees of freedom.\n      * @param degreesOfFreedom the new degrees of freedom.\n+     * @deprecated as of v2.1\n      */\n+    @Deprecated\n     void setDegreesOfFreedom(double degreesOfFreedom);\n \n     /**\n--- a/src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n      * @param df degrees of freedom.\n      * @param g the underlying gamma distribution used to compute probabilities.\n      * @since 1.2\n-     */\n+     * @deprecated as of 2.1 (to avoid possibly inconsistent state, the\n+     * \"GammaDistribution\" will be instantiated internally)\n+     */\n+    @Deprecated\n     public ChiSquaredDistributionImpl(double df, GammaDistribution g) {\n         super();\n-        setGamma(g);\n-        setDegreesOfFreedom(df);\n+        setGammaInternal(g);\n+        setDegreesOfFreedomInternal(df);\n     }\n \n     /**\n      * Modify the degrees of freedom.\n      * @param degreesOfFreedom the new degrees of freedom.\n-     */\n+     * @deprecated as of 2.1 (class will become immutable in 3.0)\n+     */\n+    @Deprecated\n     public void setDegreesOfFreedom(double degreesOfFreedom) {\n-        getGamma().setAlpha(degreesOfFreedom / 2.0);\n+        setDegreesOfFreedomInternal(degreesOfFreedom);\n+    }\n+    /**\n+     * Modify the degrees of freedom.\n+     * @param degreesOfFreedom the new degrees of freedom.\n+     */\n+    private void setDegreesOfFreedomInternal(double degreesOfFreedom) {\n+        gamma.setAlpha(degreesOfFreedom / 2.0);\n     }\n \n     /**\n      * @return the degrees of freedom.\n      */\n     public double getDegreesOfFreedom() {\n-        return getGamma().getAlpha() * 2.0;\n+        return gamma.getAlpha() * 2.0;\n     }\n \n     /**\n      *            computed due to convergence or other numerical errors.\n      */\n     public double cumulativeProbability(double x) throws MathException {\n-        return getGamma().cumulativeProbability(x);\n+        return gamma.cumulativeProbability(x);\n     }\n \n     /**\n      */\n     @Override\n     protected double getDomainLowerBound(double p) {\n-        return Double.MIN_VALUE * getGamma().getBeta();\n+        return Double.MIN_VALUE * gamma.getBeta();\n     }\n \n     /**\n      * insuring the gamma distribution has the proper parameter settings.\n      * @param g the new distribution.\n      * @since 1.2 made public\n-     */\n+     * @deprecated as of 2.1 (class will become immutable in 3.0)\n+     */\n+    @Deprecated\n     public void setGamma(GammaDistribution g) {\n+        setGammaInternal(g);\n+    }\n+    /**\n+     * Modify the underlying gamma distribution.  The caller is responsible for\n+     * insuring the gamma distribution has the proper parameter settings.\n+     * @param g the new distribution.\n+     * @since 1.2 made public\n+     */\n+    private void setGammaInternal(GammaDistribution g) {\n         this.gamma = g;\n \n     }\n--- a/src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java\n     /**\n      * Modify the mean.\n      * @param mean the new mean.\n+     * @deprecated as of v2.1\n      */\n+    @Deprecated\n     void setMean(double mean);\n \n     /**\n--- a/src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n      */\n     public ExponentialDistributionImpl(double mean) {\n         super();\n-        setMean(mean);\n+        setMeanInternal(mean);\n     }\n \n     /**\n      * Modify the mean.\n      * @param mean the new mean.\n      * @throws IllegalArgumentException if <code>mean</code> is not positive.\n-     */\n+     * @deprecated as of 2.1 (class will become immutable in 3.0)\n+     */\n+    @Deprecated\n     public void setMean(double mean) {\n+        setMeanInternal(mean);\n+    }\n+    /**\n+     * Modify the mean.\n+     * @param mean the new mean.\n+     * @throws IllegalArgumentException if <code>mean</code> is not positive.\n+     */\n+    private void setMeanInternal(double mean) {\n         if (mean <= 0.0) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                   \"mean must be positive ({0})\", mean);\n         if (x < 0) {\n             return 0;\n         }\n-        return Math.exp(-x / getMean()) / getMean();\n+        return Math.exp(-x / mean) / mean;\n     }\n \n     /**\n         if (x <= 0.0) {\n             ret = 0.0;\n         } else {\n-            ret = 1.0 - Math.exp(-x / getMean());\n+            ret = 1.0 - Math.exp(-x / mean);\n         }\n         return ret;\n     }\n         } else if (p == 1.0) {\n             ret = Double.POSITIVE_INFINITY;\n         } else {\n-            ret = -getMean() * Math.log(1.0 - p);\n+            ret = -mean * Math.log(1.0 - p);\n         }\n \n         return ret;\n \n         if (p < .5) {\n             // use mean\n-            return getMean();\n+            return mean;\n         } else {\n             // use max\n             return Double.MAX_VALUE;\n         // Exponential is skewed to the left, therefore, P(X < &mu;) > .5\n         if (p < .5) {\n             // use 1/2 mean\n-            return getMean() * .5;\n+            return mean * .5;\n         } else {\n             // use mean\n-            return getMean();\n+            return mean;\n         }\n     }\n }\n--- a/src/main/java/org/apache/commons/math/distribution/FDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/FDistribution.java\n     /**\n      * Modify the numerator degrees of freedom.\n      * @param degreesOfFreedom the new numerator degrees of freedom.\n+     * @deprecated as of v2.1\n      */\n+    @Deprecated\n     void setNumeratorDegreesOfFreedom(double degreesOfFreedom);\n \n     /**\n     /**\n      * Modify the denominator degrees of freedom.\n      * @param degreesOfFreedom the new denominator degrees of freedom.\n+     * @deprecated as of v2.1\n      */\n+    @Deprecated\n     void setDenominatorDegreesOfFreedom(double degreesOfFreedom);\n \n     /**\n--- a/src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java\n      * @param denominatorDegreesOfFreedom the denominator degrees of freedom.\n      */\n     public FDistributionImpl(double numeratorDegreesOfFreedom,\n-            double denominatorDegreesOfFreedom) {\n+                             double denominatorDegreesOfFreedom) {\n         super();\n-        setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);\n-        setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);\n+        setNumeratorDegreesOfFreedomInternal(numeratorDegreesOfFreedom);\n+        setDenominatorDegreesOfFreedomInternal(denominatorDegreesOfFreedom);\n     }\n \n     /**\n         if (x <= 0.0) {\n             ret = 0.0;\n         } else {\n-            double n = getNumeratorDegreesOfFreedom();\n-            double m = getDenominatorDegreesOfFreedom();\n+            double n = numeratorDegreesOfFreedom;\n+            double m = denominatorDegreesOfFreedom;\n \n             ret = Beta.regularizedBeta((n * x) / (m + n * x),\n                 0.5 * n,\n     @Override\n     protected double getInitialDomain(double p) {\n         double ret = 1.0;\n-        double d = getDenominatorDegreesOfFreedom();\n+        double d = denominatorDegreesOfFreedom;\n         if (d > 2.0) {\n             // use mean\n             ret = d / (d - 2.0);\n      * @param degreesOfFreedom the new numerator degrees of freedom.\n      * @throws IllegalArgumentException if <code>degreesOfFreedom</code> is not\n      *         positive.\n-     */\n+     * @deprecated as of 2.1 (class will become immutable in 3.0)\n+     */\n+    @Deprecated\n     public void setNumeratorDegreesOfFreedom(double degreesOfFreedom) {\n+        setNumeratorDegreesOfFreedomInternal(degreesOfFreedom);\n+    }\n+\n+    /**\n+     * Modify the numerator degrees of freedom.\n+     * @param degreesOfFreedom the new numerator degrees of freedom.\n+     * @throws IllegalArgumentException if <code>degreesOfFreedom</code> is not\n+     *         positive.\n+     */\n+    private void setNumeratorDegreesOfFreedomInternal(double degreesOfFreedom) {\n         if (degreesOfFreedom <= 0.0) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                   NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE, degreesOfFreedom);\n      * @param degreesOfFreedom the new denominator degrees of freedom.\n      * @throws IllegalArgumentException if <code>degreesOfFreedom</code> is not\n      *         positive.\n-     */\n+     * @deprecated as of 2.1 (class will become immutable in 3.0)\n+     */\n+    @Deprecated\n     public void setDenominatorDegreesOfFreedom(double degreesOfFreedom) {\n+        setDenominatorDegreesOfFreedomInternal(degreesOfFreedom);\n+    }\n+\n+    /**\n+     * Modify the denominator degrees of freedom.\n+     * @param degreesOfFreedom the new denominator degrees of freedom.\n+     * @throws IllegalArgumentException if <code>degreesOfFreedom</code> is not\n+     *         positive.\n+     */\n+    private void setDenominatorDegreesOfFreedomInternal(double degreesOfFreedom) {\n         if (degreesOfFreedom <= 0.0) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                   NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE, degreesOfFreedom);\n--- a/src/main/java/org/apache/commons/math/distribution/GammaDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/GammaDistribution.java\n     /**\n      * Modify the shape parameter, alpha.\n      * @param alpha the new shape parameter.\n+     * @deprecated as of v2.1\n      */\n+    @Deprecated\n     void setAlpha(double alpha);\n \n     /**\n     /**\n      * Modify the scale parameter, beta.\n      * @param beta the new scale parameter.\n+     * @deprecated as of v2.1\n      */\n+    @Deprecated\n     void setBeta(double beta);\n \n     /**\n--- a/src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n      */\n     public GammaDistributionImpl(double alpha, double beta) {\n         super();\n-        setAlpha(alpha);\n-        setBeta(beta);\n+        setAlphaInternal(alpha);\n+        setBetaInternal(beta);\n     }\n \n     /**\n         if (x <= 0.0) {\n             ret = 0.0;\n         } else {\n-            ret = Gamma.regularizedGammaP(getAlpha(), x / getBeta());\n+            ret = Gamma.regularizedGammaP(alpha, x / beta);\n         }\n \n         return ret;\n      * Modify the shape parameter, alpha.\n      * @param alpha the new shape parameter.\n      * @throws IllegalArgumentException if <code>alpha</code> is not positive.\n-     */\n+     * @deprecated as of 2.1 (class will become immutable in 3.0)\n+     */\n+    @Deprecated\n     public void setAlpha(double alpha) {\n+        setAlphaInternal(alpha);\n+    }\n+\n+    /**\n+     * Modify the shape parameter, alpha.\n+     * @param alpha the new shape parameter.\n+     * @throws IllegalArgumentException if <code>alpha</code> is not positive.\n+     */\n+    private void setAlphaInternal(double alpha) {\n         if (alpha <= 0.0) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                   \"alpha must be positive ({0})\",\n      * Modify the scale parameter, beta.\n      * @param beta the new scale parameter.\n      * @throws IllegalArgumentException if <code>beta</code> is not positive.\n-     */\n+     * @deprecated as of 2.1 (class will become immutable in 3.0)\n+     */\n+    @Deprecated\n     public void setBeta(double beta) {\n+        setBetaInternal(beta);\n+    }\n+\n+    /**\n+     * Modify the scale parameter, beta.\n+     * @param beta the new scale parameter.\n+     * @throws IllegalArgumentException if <code>beta</code> is not positive.\n+     */\n+    private void setBetaInternal(double beta) {\n         if (beta <= 0.0) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                   \"beta must be positive ({0})\",\n      */\n     public double density(Double x) {\n         if (x < 0) return 0;\n-        return Math.pow(x / getBeta(), getAlpha() - 1) / getBeta() * Math.exp(-x / getBeta()) / Math.exp(Gamma.logGamma(getAlpha()));\n+        return Math.pow(x / beta, alpha - 1) / beta * Math.exp(-x / beta) / Math.exp(Gamma.logGamma(alpha));\n     }\n \n     /**\n \n         if (p < .5) {\n             // use mean\n-            ret = getAlpha() * getBeta();\n+            ret = alpha * beta;\n         } else {\n             // use max value\n             ret = Double.MAX_VALUE;\n \n         if (p < .5) {\n             // use 1/2 mean\n-            ret = getAlpha() * getBeta() * .5;\n+            ret = alpha * beta * .5;\n         } else {\n             // use mean\n-            ret = getAlpha() * getBeta();\n+            ret = alpha * beta;\n         }\n \n         return ret;\n--- a/src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java\n     /**\n      * Modify the number of successes.\n      * @param num the new number of successes.\n+     * @deprecated as of v2.1\n      */\n+    @Deprecated\n     void setNumberOfSuccesses(int num);\n \n     /**\n      * Modify the population size.\n      * @param size the new population size.\n+     * @deprecated as of v2.1\n      */\n+    @Deprecated\n     void setPopulationSize(int size);\n \n     /**\n      * Modify the sample size.\n      * @param size the new sample size.\n+     * @deprecated as of v2.1\n      */\n+    @Deprecated\n     void setSampleSize(int size);\n-\n }\n--- a/src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java\n                             \"sample size ({0}) must be less than or equal to population size ({1})\",\n                             sampleSize, populationSize);\n         }\n-        setPopulationSize(populationSize);\n-        setSampleSize(sampleSize);\n-        setNumberOfSuccesses(numberOfSuccesses);\n+\n+        setPopulationSizeInternal(populationSize);\n+        setSampleSizeInternal(sampleSize);\n+        setNumberOfSuccessesInternal(numberOfSuccesses);\n     }\n \n     /**\n     public double cumulativeProbability(int x) {\n         double ret;\n \n-        int n = getPopulationSize();\n-        int m = getNumberOfSuccesses();\n-        int k = getSampleSize();\n-\n-        int[] domain = getDomain(n, m, k);\n+        int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize);\n         if (x < domain[0]) {\n             ret = 0.0;\n         } else if (x >= domain[1]) {\n             ret = 1.0;\n         } else {\n-            ret = innerCumulativeProbability(domain[0], x, 1, n, m, k);\n+            ret = innerCumulativeProbability(domain[0], x, 1, populationSize,\n+                                             numberOfSuccesses, sampleSize);\n         }\n \n         return ret;\n      */\n     @Override\n     protected int getDomainLowerBound(double p) {\n-        return getLowerDomain(getPopulationSize(), getNumberOfSuccesses(),\n-                getSampleSize());\n+        return getLowerDomain(populationSize, numberOfSuccesses, sampleSize);\n     }\n \n     /**\n      */\n     @Override\n     protected int getDomainUpperBound(double p) {\n-        return getUpperDomain(getSampleSize(), getNumberOfSuccesses());\n+        return getUpperDomain(sampleSize, numberOfSuccesses);\n     }\n \n     /**\n     public double probability(int x) {\n         double ret;\n \n-        int m = getPopulationSize();\n-        int s = getNumberOfSuccesses();\n-        int f = m - s;\n-        int k = getSampleSize();\n-\n-        int[] domain = getDomain(m, s, k);\n+        int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize);\n         if (x < domain[0] || x > domain[1]) {\n             ret = 0.0;\n         } else {\n-            double p = (double) sampleSize / (double) m;\n-            double q = (double) (m - sampleSize) / (double) m;\n+            double p = (double) sampleSize / (double) populationSize;\n+            double q = (double) (populationSize - sampleSize) / (double) populationSize;\n             double p1 = SaddlePointExpansion.logBinomialProbability(x,\n                     numberOfSuccesses, p, q);\n             double p2 =\n-                SaddlePointExpansion.logBinomialProbability(sampleSize - x, f, p, q);\n+                SaddlePointExpansion.logBinomialProbability(sampleSize - x,\n+                    populationSize - numberOfSuccesses, p, q);\n             double p3 =\n-                SaddlePointExpansion.logBinomialProbability(sampleSize, m, p, q);\n+                SaddlePointExpansion.logBinomialProbability(sampleSize, populationSize, p, q);\n             ret = Math.exp(p1 + p2 - p3);\n         }\n \n      *\n      * @param num the new number of successes.\n      * @throws IllegalArgumentException if <code>num</code> is negative.\n-     */\n+     * @deprecated as of 2.1 (class will become immutable in 3.0)\n+     */\n+    @Deprecated\n     public void setNumberOfSuccesses(int num) {\n+        setNumberOfSuccessesInternal(num);\n+    }\n+    /**\n+     * Modify the number of successes.\n+     *\n+     * @param num the new number of successes.\n+     * @throws IllegalArgumentException if <code>num</code> is negative.\n+     */\n+    private void setNumberOfSuccessesInternal(int num) {\n         if (num < 0) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                     \"number of successes must be non-negative ({0})\", num);\n      *\n      * @param size the new population size.\n      * @throws IllegalArgumentException if <code>size</code> is not positive.\n-     */\n+     * @deprecated as of 2.1 (class will become immutable in 3.0)\n+     */\n+    @Deprecated\n     public void setPopulationSize(int size) {\n+        setPopulationSizeInternal(size);\n+    }\n+    /**\n+     * Modify the population size.\n+     *\n+     * @param size the new population size.\n+     * @throws IllegalArgumentException if <code>size</code> is not positive.\n+     */\n+    private void setPopulationSizeInternal(int size) {\n         if (size <= 0) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                     \"population size must be positive ({0})\", size);\n      *\n      * @param size the new sample size.\n      * @throws IllegalArgumentException if <code>size</code> is negative.\n-     */\n+     * @deprecated as of 2.1 (class will become immutable in 3.0)\n+     */\n+    @Deprecated\n     public void setSampleSize(int size) {\n+        setSampleSizeInternal(size);\n+    }\n+    /**\n+     * Modify the sample size.\n+     *\n+     * @param size the new sample size.\n+     * @throws IllegalArgumentException if <code>size</code> is negative.\n+     */\n+    private void setSampleSizeInternal(int size) {\n         if (size < 0) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                     \"sample size must be positive ({0})\", size);\n     public double upperCumulativeProbability(int x) {\n         double ret;\n \n-        int n = getPopulationSize();\n-        int m = getNumberOfSuccesses();\n-        int k = getSampleSize();\n-\n-        int[] domain = getDomain(n, m, k);\n+        final int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize);\n         if (x < domain[0]) {\n             ret = 1.0;\n         } else if (x > domain[1]) {\n             ret = 0.0;\n         } else {\n-            ret = innerCumulativeProbability(domain[1], x, -1, n, m, k);\n+            ret = innerCumulativeProbability(domain[1], x, -1, populationSize, numberOfSuccesses, sampleSize);\n         }\n \n         return ret;\n--- a/src/main/java/org/apache/commons/math/distribution/NormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistribution.java\n     /**\n      * Modify the mean.\n      * @param mean for this distribution\n+     * @deprecated as of v2.1\n      */\n+    @Deprecated\n     void setMean(double mean);\n     /**\n      * Access the standard deviation.\n     /**\n      * Modify the standard deviation.\n      * @param sd standard deviation for this distribution\n+     * @deprecated as of v2.1\n      */\n+    @Deprecated\n     void setStandardDeviation(double sd);\n \n     /**\n--- a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n      */\n     public NormalDistributionImpl(double mean, double sd, double inverseCumAccuracy) {\n         super();\n-        this.mean = mean;\n-        this.standardDeviation = sd;\n+        setMeanInternal(mean);\n+        setStandardDeviationInternal(sd);\n         solverAbsoluteAccuracy = inverseCumAccuracy;\n     }\n \n     /**\n      * Modify the mean.\n      * @param mean for this distribution\n-     */\n+     * @deprecated as of 2.1 (class will become immutable in 3.0)\n+     */\n+    @Deprecated\n     public void setMean(double mean) {\n+        setMeanInternal(mean);\n+    }\n+    /**\n+     * Modify the mean.\n+     * @param mean for this distribution\n+     */\n+    private void setMeanInternal(double mean) {\n         this.mean = mean;\n     }\n \n      * Modify the standard deviation.\n      * @param sd standard deviation for this distribution\n      * @throws IllegalArgumentException if <code>sd</code> is not positive.\n-     */\n+     * @deprecated as of 2.1 (class will become immutable in 3.0)\n+     */\n+    @Deprecated\n     public void setStandardDeviation(double sd) {\n+        setStandardDeviationInternal(sd);\n+    }\n+    /**\n+     * Modify the standard deviation.\n+     * @param sd standard deviation for this distribution\n+     * @throws IllegalArgumentException if <code>sd</code> is not positive.\n+     */\n+    private void setStandardDeviationInternal(double sd) {\n         if (sd <= 0.0) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                   \"standard deviation must be positive ({0})\",\n      * @return The pdf at point x.\n      */\n     public double density(Double x) {\n-        double x0 = x - getMean();\n-        return Math.exp(-x0 * x0 / (2 * getStandardDeviation() * getStandardDeviation())) / (getStandardDeviation() * SQRT2PI);\n+        double x0 = x - mean;\n+        return Math.exp(-x0 * x0 / (2 * standardDeviation * standardDeviation)) / (standardDeviation * SQRT2PI);\n     }\n \n     /**\n         if (p < .5) {\n             ret = -Double.MAX_VALUE;\n         } else {\n-            ret = getMean();\n+            ret = mean;\n         }\n \n         return ret;\n         double ret;\n \n         if (p < .5) {\n-            ret = getMean();\n+            ret = mean;\n         } else {\n             ret = Double.MAX_VALUE;\n         }\n         double ret;\n \n         if (p < .5) {\n-            ret = getMean() - getStandardDeviation();\n+            ret = mean - standardDeviation;\n         } else if (p > .5) {\n-            ret = getMean() + getStandardDeviation();\n+            ret = mean + standardDeviation;\n         } else {\n-            ret = getMean();\n+            ret = mean;\n         }\n \n         return ret;\n--- a/src/main/java/org/apache/commons/math/distribution/PascalDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/PascalDistribution.java\n      * Change the number of successes for this distribution.\n      *\n      * @param successes the new number of successes\n+     * @deprecated as of v2.1\n      */\n+    @Deprecated\n     void setNumberOfSuccesses(int successes);\n \n     /**\n      * Change the probability of success for this distribution.\n      *\n      * @param p the new probability of success\n+     * @deprecated as of v2.1\n      */\n+    @Deprecated\n     void setProbabilityOfSuccess(double p);\n }\n--- a/src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java\n      */\n     public PascalDistributionImpl(int r, double p) {\n         super();\n-        setNumberOfSuccesses(r);\n-        setProbabilityOfSuccess(p);\n+        setNumberOfSuccessesInternal(r);\n+        setProbabilityOfSuccessInternal(p);\n     }\n \n     /**\n      * @param successes the new number of successes\n      * @throws IllegalArgumentException if <code>successes</code> is not\n      *         positive.\n-     */\n+     * @deprecated as of 2.1 (class will become immutable in 3.0)\n+     */\n+    @Deprecated\n     public void setNumberOfSuccesses(int successes) {\n+        setNumberOfSuccessesInternal(successes);\n+    }\n+    /**\n+     * Change the number of successes for this distribution.\n+     * @param successes the new number of successes\n+     * @throws IllegalArgumentException if <code>successes</code> is not\n+     *         positive.\n+     */\n+    private void setNumberOfSuccessesInternal(int successes) {\n         if (successes < 0) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                   \"number of successes must be non-negative ({0})\",\n      * @param p the new probability of success\n      * @throws IllegalArgumentException if <code>p</code> is not a valid\n      *         probability.\n-     */\n+     * @deprecated as of 2.1 (class will become immutable in 3.0)\n+     */\n+    @Deprecated\n     public void setProbabilityOfSuccess(double p) {\n+        setProbabilityOfSuccessInternal(p);\n+    }\n+    /**\n+     * Change the probability of success for this distribution.\n+     * @param p the new probability of success\n+     * @throws IllegalArgumentException if <code>p</code> is not a valid\n+     *         probability.\n+     */\n+    private void setProbabilityOfSuccessInternal(double p) {\n         if (p < 0.0 || p > 1.0) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                   \"{0} out of [{1}, {2}] range\", p, 0.0, 1.0);\n         if (x < 0) {\n             ret = 0.0;\n         } else {\n-            ret = Beta.regularizedBeta(getProbabilityOfSuccess(),\n-                getNumberOfSuccesses(), x + 1);\n+            ret = Beta.regularizedBeta(probabilityOfSuccess,\n+                numberOfSuccesses, x + 1);\n         }\n         return ret;\n     }\n             ret = 0.0;\n         } else {\n             ret = MathUtils.binomialCoefficientDouble(x +\n-                  getNumberOfSuccesses() - 1, getNumberOfSuccesses() - 1) *\n-                  Math.pow(getProbabilityOfSuccess(), getNumberOfSuccesses()) *\n-                  Math.pow(1.0 - getProbabilityOfSuccess(), x);\n+                  numberOfSuccesses - 1, numberOfSuccesses - 1) *\n+                  Math.pow(probabilityOfSuccess, numberOfSuccesses) *\n+                  Math.pow(1.0 - probabilityOfSuccess, x);\n         }\n         return ret;\n     }\n--- a/src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java\n      *\n      * @param p the mean\n      * @throws IllegalArgumentException if p &le; 0\n+     * @deprecated as of v2.1\n      */\n+    @Deprecated\n     void setMean(double p);\n \n     /**\n--- a/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\n      * @param z a normal distribution used to compute normal approximations.\n      * @throws IllegalArgumentException if p &le; 0\n      * @since 1.2\n-     */\n+     * @deprecated as of 2.1 (to avoid possibly inconsistent state, the\n+     * \"NormalDistribution\" will be instantiated internally)\n+     */\n+    @Deprecated\n     public PoissonDistributionImpl(double p, NormalDistribution z) {\n         super();\n-        setNormal(z);\n-        setMean(p);\n+        setNormalAndMeanInternal(z, p);\n     }\n \n     /**\n      * @return the Poisson mean for the distribution.\n      */\n     public double getMean() {\n-        return this.mean;\n+        return mean;\n     }\n \n     /**\n      *\n      * @param p the Poisson mean value\n      * @throws IllegalArgumentException if p &le; 0\n-     */\n+     * @deprecated as of 2.1 (class will become immutable in 3.0)\n+     */\n+    @Deprecated\n     public void setMean(double p) {\n+        setNormalAndMeanInternal(normal, p);\n+    }\n+    /**\n+     * Set the Poisson mean for the distribution. The mean value must be\n+     * positive; otherwise an <code>IllegalArgument</code> is thrown.\n+     *\n+     * @param z the new distribution\n+     * @param p the Poisson mean value\n+     * @throws IllegalArgumentException if p &le; 0\n+     */\n+    private void setNormalAndMeanInternal(NormalDistribution z,\n+                                          double p) {\n         if (p <= 0) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                     \"the Poisson mean must be positive ({0})\", p);\n         }\n-        this.mean = p;\n+        mean = p;\n+        normal = z;\n         normal.setMean(p);\n         normal.setStandardDeviation(Math.sqrt(p));\n     }\n      *\n      * @param value the new distribution\n      * @since 1.2\n-     */\n+     * @deprecated as of 2.1 (class will become immutable in 3.0)\n+     */\n+    @Deprecated\n     public void setNormal(NormalDistribution value) {\n-        normal = value;\n-    }\n-\n+        setNormalAndMeanInternal(value, mean);\n+    }\n }\n--- a/src/main/java/org/apache/commons/math/distribution/TDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/TDistribution.java\n     /**\n      * Modify the degrees of freedom.\n      * @param degreesOfFreedom the new degrees of freedom.\n+     * @deprecated as of v2.1\n      */\n+    @Deprecated\n     void setDegreesOfFreedom(double degreesOfFreedom);\n \n     /**\n--- a/src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java\n      */\n     public TDistributionImpl(double degreesOfFreedom) {\n         super();\n-        setDegreesOfFreedom(degreesOfFreedom);\n+        setDegreesOfFreedomInternal(degreesOfFreedom);\n     }\n \n     /**\n      * Modify the degrees of freedom.\n      * @param degreesOfFreedom the new degrees of freedom.\n+     * @deprecated as of 2.1 (class will become immutable in 3.0)\n      */\n+    @Deprecated\n     public void setDegreesOfFreedom(double degreesOfFreedom) {\n+        setDegreesOfFreedomInternal(degreesOfFreedom);\n+    }\n+    /**\n+     * Modify the degrees of freedom.\n+     * @param degreesOfFreedom the new degrees of freedom.\n+     */\n+    private void setDegreesOfFreedomInternal(double degreesOfFreedom) {\n         if (degreesOfFreedom <= 0.0) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                   \"degrees of freedom must be positive ({0})\",\n         } else {\n             double t =\n                 Beta.regularizedBeta(\n-                    getDegreesOfFreedom() / (getDegreesOfFreedom() + (x * x)),\n-                    0.5 * getDegreesOfFreedom(),\n+                    degreesOfFreedom / (degreesOfFreedom + (x * x)),\n+                    0.5 * degreesOfFreedom,\n                     0.5);\n             if (x < 0.0) {\n                 ret = 0.5 * t;\n--- a/src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java\n     /**\n      * Modify the shape parameter.\n      * @param alpha The new shape parameter value.\n+     * @deprecated as of v2.1\n      */\n+    @Deprecated\n     void setShape(double alpha);\n \n     /**\n      * Modify the scale parameter.\n      * @param beta The new scale parameter value.\n+     * @deprecated as of v2.1\n      */\n+    @Deprecated\n     void setScale(double beta);\n }\n--- a/src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java\n      */\n     public WeibullDistributionImpl(double alpha, double beta){\n         super();\n-        setShape(alpha);\n-        setScale(beta);\n+        setShapeInternal(alpha);\n+        setScaleInternal(beta);\n     }\n \n     /**\n         if (x <= 0.0) {\n             ret = 0.0;\n         } else {\n-            ret = 1.0 - Math.exp(-Math.pow(x / getScale(), getShape()));\n+            ret = 1.0 - Math.exp(-Math.pow(x / scale, shape));\n         }\n         return ret;\n     }\n         } else  if (p == 1) {\n             ret = Double.POSITIVE_INFINITY;\n         } else {\n-            ret = getScale() * Math.pow(-Math.log(1.0 - p), 1.0 / getShape());\n+            ret = scale * Math.pow(-Math.log(1.0 - p), 1.0 / shape);\n         }\n         return ret;\n     }\n     /**\n      * Modify the shape parameter.\n      * @param alpha the new shape parameter value.\n+     * @deprecated as of 2.1 (class will become immutable in 3.0)\n      */\n+    @Deprecated\n     public void setShape(double alpha) {\n+        setShapeInternal(alpha);\n+    }\n+    /**\n+     * Modify the shape parameter.\n+     * @param alpha the new shape parameter value.\n+     */\n+    private void setShapeInternal(double alpha) {\n         if (alpha <= 0.0) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                   \"shape must be positive ({0})\",\n     /**\n      * Modify the scale parameter.\n      * @param beta the new scale parameter value.\n+     * @deprecated as of 2.1 (class will become immutable in 3.0)\n      */\n+    @Deprecated\n     public void setScale(double beta) {\n+        setScaleInternal(beta);\n+    }\n+    /**\n+     * Modify the scale parameter.\n+     * @param beta the new scale parameter value.\n+     */\n+    private void setScaleInternal(double beta) {\n         if (beta <= 0.0) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                   \"scale must be positive ({0})\",\n     @Override\n     protected double getInitialDomain(double p) {\n         // use median\n-        return Math.pow(getScale() * Math.log(2.0), 1.0 / getShape());\n+        return Math.pow(scale * Math.log(2.0), 1.0 / shape);\n     }\n }\n--- a/src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java\n      *\n      * @param n the number of elements\n      * @throws IllegalArgumentException if n &le; 0\n+     * @deprecated as of v2.1\n      */\n+    @Deprecated\n     void setNumberOfElements(int n);\n \n     /**\n      *\n      * @param s the exponent\n      * @throws IllegalArgumentException if s &le; 0.0\n+     * @deprecated as of v2.1\n      */\n+    @Deprecated\n     void setExponent(double s);\n-\n }\n--- a/src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java\n      */\n     public ZipfDistributionImpl(final int numberOfElements, final double exponent)\n         throws IllegalArgumentException {\n-        setNumberOfElements(numberOfElements);\n-        setExponent(exponent);\n+        setNumberOfElementsInternal(numberOfElements);\n+        setExponentInternal(exponent);\n     }\n \n     /**\n      *\n      * @param n the number of elements\n      * @exception IllegalArgumentException if n &le; 0\n-     */\n-    public void setNumberOfElements(final int n)\n+     * @deprecated as of 2.1 (class will become immutable in 3.0)\n+     */\n+    @Deprecated\n+    public void setNumberOfElements(final int n) {\n+        setNumberOfElementsInternal(n);\n+    }\n+    /**\n+     * Set the number of elements (e.g. corpus size) for the distribution.\n+     * The parameter value must be positive; otherwise an\n+     * <code>IllegalArgumentException</code> is thrown.\n+     *\n+     * @param n the number of elements\n+     * @exception IllegalArgumentException if n &le; 0\n+     */\n+    private void setNumberOfElementsInternal(final int n)\n         throws IllegalArgumentException {\n         if (n <= 0) {\n             throw MathRuntimeException.createIllegalArgumentException(\n      *\n      * @param s the exponent\n      * @exception IllegalArgumentException if s &le; 0.0\n-     */\n-    public void setExponent(final double s)\n+     * @deprecated as of 2.1 (class will become immutable in 3.0)\n+     */\n+    @Deprecated\n+    public void setExponent(final double s) {\n+        setExponentInternal(s);\n+    }\n+    /**\n+     * Set the exponent characterising the distribution.\n+     * The parameter value must be positive; otherwise an\n+     * <code>IllegalArgumentException</code> is thrown.\n+     *\n+     * @param s the exponent\n+     * @exception IllegalArgumentException if s &le; 0.0\n+     */\n+    private void setExponentInternal(final double s)\n         throws IllegalArgumentException {\n         if (s <= 0.0) {\n             throw MathRuntimeException.createIllegalArgumentException(\n      * @return the value of the probability mass function at x\n      */\n     public double probability(final int x) {\n-        if (x <= 0 || x > getNumberOfElements()) {\n+        if (x <= 0 || x > numberOfElements) {\n             return 0.0;\n         }\n \n     public double cumulativeProbability(final int x) {\n         if (x <= 0) {\n             return 0.0;\n-        } else if (x >= getNumberOfElements()) {\n+        } else if (x >= numberOfElements) {\n             return 1.0;\n         }\n ", "timestamp": 1268139224, "metainfo": ""}