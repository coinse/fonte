{"sha": "2464bb227c15c88586c70b2ce4513038ae6ebb70", "log": "MATH-795: extracted   - testSubVectorInvalidIndex1(),   - testSubVectorInvalidIndex2(),   - testSubVectorInvalidIndex3(),   - testSubVectorInvalidIndex4() from RealVectorAbstractTest.testDataInOut(). This test revealed that positivity of the number of elements was not checked for in RealVector.getSubVector(int, int).  This is corrected, and a NotPositiveException is now thrown (corresponding error message has been added to LocalizedFormats).   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\n+++ b/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\n     NOT_POSITIVE_DEGREES_OF_FREEDOM(\"degrees of freedom must be positive ({0})\"),\n     NOT_POSITIVE_ELEMENT_AT_INDEX(\"element {0} is not positive: {1}\"),\n     NOT_POSITIVE_EXPONENT(\"invalid exponent {0} (must be positive)\"),\n+    NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE(\"number of elements should be positive ({0})\"),\n     EXPONENT(\"exponent ({0})\"), /* keep */\n     NOT_POSITIVE_LENGTH(\"length must be positive ({0})\"),\n     LENGTH(\"length ({0})\"), /* keep */\n--- a/src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java\n+++ b/src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java\n import java.util.Iterator;\n \n import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.exception.NotPositiveException;\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.NumberIsTooLargeException;\n     /** {@inheritDoc} */\n     @Override\n     public RealVector getSubVector(int index, int n) {\n+        if (n < 0) {\n+            throw new NotPositiveException(LocalizedFormats.NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, n);\n+        }\n         ArrayRealVector out = new ArrayRealVector(n);\n         try {\n             System.arraycopy(data, index, out.data, 0, n);\n--- a/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java\n+++ b/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java\n import java.io.Serializable;\n \n import org.apache.commons.math3.exception.MathArithmeticException;\n+import org.apache.commons.math3.exception.NotPositiveException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n import org.apache.commons.math3.util.OpenIntToDoubleHashMap;\n import org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator;\n     @Override\n     public OpenMapRealVector getSubVector(int index, int n) {\n         checkIndex(index);\n+        if (n < 0) {\n+            throw new NotPositiveException(LocalizedFormats.NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, n);\n+        }\n         checkIndex(index + n - 1);\n         OpenMapRealVector res = new OpenMapRealVector(n);\n         int end = index + n;\n--- a/src/main/java/org/apache/commons/math3/linear/RealVector.java\n+++ b/src/main/java/org/apache/commons/math3/linear/RealVector.java\n      * @return a vector containing n elements.\n      * @throws org.apache.commons.math3.exception.OutOfRangeException\n      * if the index is not valid.\n+     * @throws org.apache.commons.math3.exception.NotPositiveException\n+     * if the number of elements is not positive\n      */\n     public abstract RealVector getSubVector(int index, int n);\n \n--- a/src/test/java/org/apache/commons/math3/exception/util/LocalizedFormatsTest.java\n+++ b/src/test/java/org/apache/commons/math3/exception/util/LocalizedFormatsTest.java\n \n     @Test\n     public void testMessageNumber() {\n-        Assert.assertEquals(309, LocalizedFormats.values().length);\n+        Assert.assertEquals(310, LocalizedFormats.values().length);\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.MathArithmeticException;\n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n+import org.apache.commons.math3.exception.NotPositiveException;\n import org.apache.commons.math3.exception.NumberIsTooSmallException;\n import org.apache.commons.math3.exception.OutOfRangeException;\n import org.apache.commons.math3.util.FastMath;\n     }\n \n     @Test\n-    public void testGetSubvector() {\n+    public void testGetSubVector() {\n         final double x = getPreferredEntryValue();\n         final double[] data = {x, x, x, 1d, x, 2d, x, x, 3d, x, x, x, 4d, x, x, x};\n         final int index = 1;\n         TestUtils.assertEquals(\"\", expected, actual, 0d);\n     }\n \n+    @Test(expected = OutOfRangeException.class)\n+    public void testGetSubVectorInvalidIndex1() {\n+        final int n = 10;\n+        create(new double[n]).getSubVector(-1, 2);\n+    }\n+\n+    @Test(expected = OutOfRangeException.class)\n+    public void testGetSubVectorInvalidIndex2() {\n+        final int n = 10;\n+        create(new double[n]).getSubVector(n, 2);\n+    }\n+\n+    @Test(expected = OutOfRangeException.class)\n+    public void testGetSubVectorInvalidIndex3() {\n+        final int n = 10;\n+        create(new double[n]).getSubVector(0, n + 1);\n+    }\n+\n+    @Test(expected = NotPositiveException.class)\n+    public void testGetSubVectorInvalidIndex4() {\n+        final int n = 10;\n+        create(new double[n]).getSubVector(3, -2);\n+    }\n+\n     @Test\n     public void testDataInOut() {\n         final RealVector v1 = create(vec1);\n         final RealVector v2 = create(vec2);\n         final RealVector v4 = create(vec4);\n         final RealVector v2_t = createAlien(vec2);\n-\n-        try {\n-            v4.getSubVector(3, 7);\n-            Assert.fail(\"OutOfRangeException expected\");\n-        } catch (OutOfRangeException ex) {\n-            // expected behavior\n-        }\n \n         final RealVector v_set1 = v1.copy();\n         v_set1.setEntry(1, 11.0);\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n     @Test\n     @Ignore(\"Abstract class RealVector does not implement getSubvector(int, int)\")\n     @Override\n-    public void testGetSubvector() {\n+    public void testGetSubVector() {\n+        // Do nothing\n+    }\n+\n+    @Test\n+    @Ignore(\"Abstract class RealVector does not implement getSubvector(int, int)\")\n+    @Override\n+    public void testGetSubVectorInvalidIndex1() {\n+        // Do nothing\n+    }\n+\n+    @Test\n+    @Ignore(\"Abstract class RealVector does not implement getSubvector(int, int)\")\n+    @Override\n+    public void testGetSubVectorInvalidIndex2() {\n+        // Do nothing\n+    }\n+\n+    @Test\n+    @Ignore(\"Abstract class RealVector does not implement getSubvector(int, int)\")\n+    @Override\n+    public void testGetSubVectorInvalidIndex3() {\n+        // Do nothing\n+    }\n+\n+    @Test\n+    @Ignore(\"Abstract class RealVector does not implement getSubvector(int, int)\")\n+    @Override\n+    public void testGetSubVectorInvalidIndex4() {\n         // Do nothing\n     }\n ", "timestamp": 1339134611, "metainfo": ""}