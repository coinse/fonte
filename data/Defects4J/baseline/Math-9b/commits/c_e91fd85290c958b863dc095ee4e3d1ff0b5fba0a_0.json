{"sha": "e91fd85290c958b863dc095ee4e3d1ff0b5fba0a", "log": "Added tests for row, column, subMatrix accessors, equals and hashcode, toString.   ", "commit": "\n--- a/src/test/org/apache/commons/math/linear/BigMatrixImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/BigMatrixImplTest.java\n /**\n  * Test cases for the {@link BigMatrixImpl} class.\n  *\n- * @version $Revision: 1.3 $ $Date: 2004/09/05 01:19:23 $\n+ * @version $Revision: 1.4 $ $Date: 2004/10/25 02:23:29 $\n  */\n \n public final class BigMatrixImplTest extends TestCase {\n     \n-    private double[][] testData = { {1d,2d,3d}, {2d,5d,3d}, {1d,0d,8d} };\n-    private String[][] testDataString = { {\"1\",\"2\",\"3\"}, {\"2\",\"5\",\"3\"}, {\"1\",\"0\",\"8\"} };\n-    private double[][] testDataLU = {{2d, 5d, 3d}, {.5d, -2.5d, 6.5d}, {0.5d, 0.2d, .2d}};\n-    private double[][] testDataPlus2 = { {3d,4d,5d}, {4d,7d,5d}, {3d,2d,10d} };\n-    private double[][] testDataMinus = { {-1d,-2d,-3d}, {-2d,-5d,-3d}, \n-       {-1d,0d,-8d} };\n-    private double[] testDataRow1 = {1d,2d,3d};\n-    private double[] testDataCol3 = {3d,3d,8d};\n-    private double[][] testDataInv = \n+    // Test data for String constructors\n+    protected  String[][] testDataString = { {\"1\",\"2\",\"3\"}, {\"2\",\"5\",\"3\"}, {\"1\",\"0\",\"8\"} };\n+    \n+    // 3 x 3 identity matrix\n+    protected double[][] id = { {1d,0d,0d}, {0d,1d,0d}, {0d,0d,1d} };\n+    \n+    // Test data for group operations\n+    protected double[][] testData = { {1d,2d,3d}, {2d,5d,3d}, {1d,0d,8d} };\n+    protected double[][] testDataLU = {{2d, 5d, 3d}, {.5d, -2.5d, 6.5d}, {0.5d, 0.2d, .2d}};\n+    protected double[][] testDataPlus2 = { {3d,4d,5d}, {4d,7d,5d}, {3d,2d,10d} };\n+    protected double[][] testDataMinus = { {-1d,-2d,-3d}, {-2d,-5d,-3d}, \n+            {-1d,0d,-8d} };\n+    protected double[] testDataRow1 = {1d,2d,3d};\n+    protected double[] testDataCol3 = {3d,3d,8d};\n+    protected double[][] testDataInv = \n         { {-40d,16d,9d}, {13d,-5d,-3d}, {5d,-2d,-1d} };\n-    private double[] preMultTest = {8,12,33};\n-    private double[][] testData2 ={ {1d,2d,3d}, {2d,5d,3d}};\n-    private double[][] testData2T = { {1d,2d}, {2d,5d}, {3d,3d}};\n-    private double[][] testDataPlusInv = \n+    protected double[] preMultTest = {8,12,33};\n+    protected double[][] testData2 ={ {1d,2d,3d}, {2d,5d,3d}};\n+    protected double[][] testData2T = { {1d,2d}, {2d,5d}, {3d,3d}};\n+    protected double[][] testDataPlusInv = \n         { {-39d,18d,12d}, {15d,0d,0d}, {6d,-2d,7d} };\n-    private double[][] id = { {1d,0d,0d}, {0d,1d,0d}, {0d,0d,1d} };\n-    private double[][] luData = { {2d,3d,3d}, {0d,5d,7d}, {6d,9d,8d} };\n-    private double[][] luDataLUDecomposition = { {6d,9d,8d}, {0d,5d,7d}, {0.33333333333333,0d,0.33333333333333} };\n-    private double[][] singular = { {2d,3d}, {2d,3d} };\n-    private double[][] bigSingular = {{1d,2d,3d,4d}, {2d,5d,3d,4d},\n-        {7d,3d,256d,1930d}, {3d,7d,6d,8d}}; // 4th row = 1st + 2nd\n-    private double[][] detData = { {1d,2d,3d}, {4d,5d,6d}, {7d,8d,10d} };\n-    private double[][] detData2 = { {1d, 3d}, {2d, 4d}};\n-    private double[] testVector = {1,2,3};\n-    private double[] testVector2 = {1,2,3,4};\n-    private double entryTolerance = 10E-16;\n-    private double normTolerance = 10E-14;\n+    \n+    // lu decomposition tests\n+    protected double[][] luData = { {2d,3d,3d}, {0d,5d,7d}, {6d,9d,8d} };\n+    protected double[][] luDataLUDecomposition = { {6d,9d,8d}, {0d,5d,7d},\n+            {0.33333333333333,0d,0.33333333333333} };\n+    \n+    // singular matrices\n+    protected double[][] singular = { {2d,3d}, {2d,3d} };\n+    protected double[][] bigSingular = {{1d,2d,3d,4d}, {2d,5d,3d,4d},\n+            {7d,3d,256d,1930d}, {3d,7d,6d,8d}}; // 4th row = 1st + 2nd\n+    protected double[][] detData = { {1d,2d,3d}, {4d,5d,6d}, {7d,8d,10d} };\n+    protected double[][] detData2 = { {1d, 3d}, {2d, 4d}};\n+    \n+    // vectors\n+    protected double[] testVector = {1,2,3};\n+    protected double[] testVector2 = {1,2,3,4};\n+    \n+    // submatrix accessor tests\n+    protected double[][] subTestData = {{1, 2, 3, 4}, {1.5, 2.5, 3.5, 4.5},\n+            {2, 4, 6, 8}, {4, 5, 6, 7}}; \n+    // array selections\n+    protected double[][] subRows02Cols13 = { {2, 4}, {4, 8}};\n+    protected double[][] subRows03Cols12 = { {2, 3}, {5, 6}};\n+    protected double[][] subRows03Cols123 = { {2, 3, 4} , {5, 6, 7}};\n+    // effective permutations\n+    protected double[][] subRows20Cols123 = { {4, 6, 8} , {2, 3, 4}};\n+    protected double[][] subRows31Cols31 = {{7, 5}, {4.5, 2.5}};\n+    // contiguous ranges\n+    protected double[][] subRows01Cols23 = {{3,4} , {3.5, 4.5}};\n+    protected double[][] subRows23Cols00 = {{2} , {4}};\n+    protected double[][] subRows00Cols33 = {{4}};\n+    // row matrices\n+    protected double[][] subRow0 = {{1,2,3,4}};\n+    protected double[][] subRow3 = {{4,5,6,7}};\n+    // column matrices\n+    protected double[][] subColumn1 = {{2}, {2.5}, {4}, {5}};\n+    protected double[][] subColumn3 = {{4}, {4.5}, {8}, {7}};\n+    \n+    // tolerances\n+    protected double entryTolerance = 10E-16;\n+    protected double normTolerance = 10E-14;\n     \n     public BigMatrixImplTest(String name) {\n         super(name);\n         } catch (InvalidMatrixException ex) {\n             // expected\n         }\n+    }\n+    \n+   /**\n+    * test submatrix accessors\n+    */\n+    public void testSubMatrix() {\n+        BigMatrix m = new BigMatrixImpl(subTestData);\n+        BigMatrix mRows23Cols00 = new BigMatrixImpl(subRows23Cols00);\n+        BigMatrix mRows00Cols33 = new BigMatrixImpl(subRows00Cols33);\n+        BigMatrix mRows01Cols23 = new BigMatrixImpl(subRows01Cols23);\n+        BigMatrix mRows02Cols13 = new BigMatrixImpl(subRows02Cols13);\n+        BigMatrix mRows03Cols12 = new BigMatrixImpl(subRows03Cols12);\n+        BigMatrix mRows03Cols123 = new BigMatrixImpl(subRows03Cols123);\n+        BigMatrix mRows20Cols123 = new BigMatrixImpl(subRows20Cols123);\n+        BigMatrix mRows31Cols31 = new BigMatrixImpl(subRows31Cols31);\n+        assertEquals(\"Rows23Cols00\", mRows23Cols00, \n+                m.getSubMatrix(2 , 3 , 0, 0));\n+        assertEquals(\"Rows00Cols33\", mRows00Cols33, \n+                m.getSubMatrix(0 , 0 , 3, 3));\n+        assertEquals(\"Rows01Cols23\", mRows01Cols23,\n+                m.getSubMatrix(0 , 1 , 2, 3));   \n+        assertEquals(\"Rows02Cols13\", mRows02Cols13,\n+                m.getSubMatrix(new int[] {0,2}, new int[] {1,3}));  \n+        assertEquals(\"Rows03Cols12\", mRows03Cols12,\n+                m.getSubMatrix(new int[] {0,3}, new int[] {1,2}));  \n+        assertEquals(\"Rows03Cols123\", mRows03Cols123,\n+                m.getSubMatrix(new int[] {0,3}, new int[] {1,2,3})); \n+        assertEquals(\"Rows20Cols123\", mRows20Cols123,\n+                m.getSubMatrix(new int[] {2,0}, new int[] {1,2,3})); \n+        assertEquals(\"Rows31Cols31\", mRows31Cols31,\n+                m.getSubMatrix(new int[] {3,1}, new int[] {3,1})); \n+        assertEquals(\"Rows31Cols31\", mRows31Cols31,\n+                m.getSubMatrix(new int[] {3,1}, new int[] {3,1})); \n+        \n+        try {\n+            m.getSubMatrix(1,0,2,4);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+        try {\n+            m.getSubMatrix(-1,1,2,2);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+        try {\n+            m.getSubMatrix(1,0,2,2);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+        try {\n+            m.getSubMatrix(1,0,2,4);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+        try {\n+            m.getSubMatrix(new int[] {}, new int[] {0});\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+        try {\n+            m.getSubMatrix(new int[] {0}, new int[] {4});\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+    }\n+    \n+    public void testGetColumnMatrix() {\n+        BigMatrix m = new BigMatrixImpl(subTestData);\n+        BigMatrix mColumn1 = new BigMatrixImpl(subColumn1);\n+        BigMatrix mColumn3 = new BigMatrixImpl(subColumn3);\n+        assertEquals(\"Column1\", mColumn1, \n+                m.getColumnMatrix(1));\n+        assertEquals(\"Column3\", mColumn3, \n+                m.getColumnMatrix(3));\n+        try {\n+            m.getColumnMatrix(-1);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+        try {\n+            m.getColumnMatrix(4);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+    }\n+    \n+    public void testGetRowMatrix() {\n+        BigMatrix m = new BigMatrixImpl(subTestData);\n+        BigMatrix mRow0 = new BigMatrixImpl(subRow0);\n+        BigMatrix mRow3 = new BigMatrixImpl(subRow3);\n+        assertEquals(\"Row0\", mRow0, \n+                m.getRowMatrix(0));\n+        assertEquals(\"Row3\", mRow3, \n+                m.getRowMatrix(3));\n+        try {\n+            m.getRowMatrix(-1);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+        try {\n+            m.getRowMatrix(4);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+    }\n+    \n+    public void testEqualsAndHashCode() {\n+        BigMatrixImpl m = new BigMatrixImpl(testData);\n+        BigMatrixImpl m1 = (BigMatrixImpl) m.copy();\n+        BigMatrixImpl mt = (BigMatrixImpl) m.transpose();\n+        assertTrue(m.hashCode() != mt.hashCode());\n+        assertEquals(m.hashCode(), m1.hashCode());\n+        assertEquals(m, m);\n+        assertEquals(m, m1);\n+        assertFalse(m.equals(null));\n+        assertFalse(m.equals(mt));\n+        assertFalse(m.equals(new BigMatrixImpl(bigSingular)));\n+        // Different scales make BigDecimals, so matrices unequal\n+        m = new BigMatrixImpl(new String[][] {{\"2.0\"}});\n+        m1 = new BigMatrixImpl(new String[][] {{\"2.00\"}});\n+        assertTrue(m.hashCode() != m1.hashCode());\n+        assertFalse(m.equals(m1));\n+    }\n+    \n+    public void testToString() {\n+        BigMatrixImpl m = new BigMatrixImpl(testData);\n+        assertEquals(\"BigMatrixImpl{{1,2,3},{2,5,3},{1,0,8}}\",\n+                m.toString());\n+        m = new BigMatrixImpl();\n+        assertEquals(\"BigMatrixImpl{}\",\n+                m.toString());\n     }\n     \n     //--------------- -----------------Protected methods", "timestamp": 1098671009, "metainfo": ""}