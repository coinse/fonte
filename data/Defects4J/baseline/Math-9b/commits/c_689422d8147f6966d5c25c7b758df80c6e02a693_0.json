{"sha": "689422d8147f6966d5c25c7b758df80c6e02a693", "log": "Using methods from JDK.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java\n+++ b/src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java\n \n import java.io.Serializable;\n import java.util.Collection;\n+import java.util.Arrays;\n \n import org.apache.commons.math3.util.MathArrays;\n \n         if (!(other instanceof EuclideanDoublePoint)) {\n             return false;\n         }\n-        final double[] otherPoint = ((EuclideanDoublePoint) other).getPoint();\n-        if (point.length != otherPoint.length) {\n-            return false;\n-        }\n-        for (int i = 0; i < point.length; i++) {\n-            if (point[i] != otherPoint[i]) {\n-                return false;\n-            }\n-        }\n-        return true;\n+        return Arrays.equals(point, ((EuclideanDoublePoint) other).point);\n     }\n \n     /**\n     /** {@inheritDoc} */\n     @Override\n     public int hashCode() {\n-        int hashCode = 0;\n-        for (final Double i : point) {\n-            hashCode += i.hashCode() * 13 + 7;\n-        }\n-        return hashCode;\n+        return Arrays.hashCode(point);\n     }\n \n     /** {@inheritDoc} */\n     @Override\n     public String toString() {\n-        final StringBuilder buff = new StringBuilder(\"(\");\n-        final double[] coordinates = getPoint();\n-        for (int i = 0; i < coordinates.length; i++) {\n-            buff.append(coordinates[i]);\n-            if (i < coordinates.length - 1) {\n-                buff.append(',');\n-            }\n-        }\n-        buff.append(')');\n-        return buff.toString();\n+        return Arrays.toString(point);\n     }\n \n }", "timestamp": 1353710045, "metainfo": ""}