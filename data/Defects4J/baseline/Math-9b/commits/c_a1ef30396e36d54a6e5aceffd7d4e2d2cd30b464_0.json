{"sha": "a1ef30396e36d54a6e5aceffd7d4e2d2cd30b464", "log": "MATH-574 Allow outer product for vectors of different sizes.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\n         if (v instanceof ArrayRealVector) {\n             return outerProduct((ArrayRealVector) v);\n         } else {\n-            checkVectorDimensions(v);\n             final int m = data.length;\n-            final RealMatrix out = MatrixUtils.createRealMatrix(m, m);\n-            for (int i = 0; i < data.length; i++) {\n-                for (int j = 0; j < data.length; j++) {\n+            final int n = v.getDimension();\n+            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);\n+            for (int i = 0; i < m; i++) {\n+                for (int j = 0; j < n; j++) {\n                     out.setEntry(i, j, data[i] * v.getEntry(j));\n                 }\n             }\n     /** {@inheritDoc} */\n     @Override\n     public RealMatrix outerProduct(double[] v) {\n-        checkVectorDimensions(v.length);\n         final int m = data.length;\n-        final RealMatrix out = MatrixUtils.createRealMatrix(m, m);\n-        for (int i = 0; i < data.length; i++) {\n-            for (int j = 0; j < data.length; j++) {\n+        final int n = v.length;\n+        final RealMatrix out = MatrixUtils.createRealMatrix(m, n);\n+        for (int i = 0; i < m; i++) {\n+            for (int j = 0; j < n; j++) {\n                 out.setEntry(i, j, data[i] * v[j]);\n             }\n         }\n--- a/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java\n         v.cosine(w);\n     }\n \n+    @Test\n+    public void testOuterProduct() {\n+        final ArrayRealVector u = new ArrayRealVector(new double[] {1, 2, -3});\n+        final ArrayRealVector v = new ArrayRealVector(new double[] {4, -2});\n+\n+        final RealMatrix uv = u.outerProduct(v);\n+\n+        final double tol = Math.ulp(1d);\n+        Assert.assertEquals(4, uv.getEntry(0, 0), tol);\n+        Assert.assertEquals(-2, uv.getEntry(0, 1), tol);\n+        Assert.assertEquals(8, uv.getEntry(1, 0), tol);\n+        Assert.assertEquals(-4, uv.getEntry(1, 1), tol);\n+        Assert.assertEquals(-12, uv.getEntry(2, 0), tol);\n+        Assert.assertEquals(6, uv.getEntry(2, 1), tol);\n+    }\n+\n     /** verifies that two vectors are close (sup norm) */\n     protected void assertClose(String msg, double[] m, double[] n,\n             double tolerance) {", "timestamp": 1305215380, "metainfo": ""}