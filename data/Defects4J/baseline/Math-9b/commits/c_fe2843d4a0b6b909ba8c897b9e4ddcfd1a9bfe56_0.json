{"sha": "fe2843d4a0b6b909ba8c897b9e4ddcfd1a9bfe56", "log": "By having \"UnivariateStatistic\" extend the new \"MathArrays.Function\" interface, subclassing \"ResizableDoubleArray\" is not necessary to achieve the required functionality (see MATH-894).   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java\n+++ b/src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java\n     /**\n      *  Stored data values\n      */\n-    private StatArray eDA = new StatArray();\n+    private ResizableDoubleArray eDA = new ResizableDoubleArray();\n \n     /** Mean statistic implementation - can be reset by setter. */\n     private UnivariateStatistic meanImpl = new Mean();\n      */\n     public DescriptiveStatistics(double[] initialDoubleArray) {\n         if (initialDoubleArray != null) {\n-            eDA = new StatArray(initialDoubleArray);\n+            eDA = new ResizableDoubleArray(initialDoubleArray);\n         }\n     }\n \n         dest.skewnessImpl = source.skewnessImpl;\n         dest.percentileImpl = source.percentileImpl;\n     }\n-\n-    /**\n-     * Provides a method to compute a statistics on the contents of the\n-     * array.\n-     */\n-    private static class StatArray extends ResizableDoubleArray {\n-        /** Default constructor. */\n-        public StatArray() {}\n-\n-        /**\n-         * Builds an instance with the same contents as the given array.\n-         *\n-         * @param initialArray Data.\n-         */\n-        public StatArray(double[] initialArray) {\n-            super(initialArray);\n-        }\n-\n-        /**\n-         * Builds a copy of the given instance.\n-         *\n-         * @param other Array.\n-         * @throws NullArgumentException if the argument is {@code null}.\n-         */\n-        public StatArray(StatArray other)\n-            throws NullArgumentException {\n-            super(other);\n-        }\n-\n-        /**\n-         * Computes the given statistics from the contents of this array.\n-         *\n-         * @param stat Statistics.\n-         * @return the result of evaluating the statistics on the current\n-         * contents of this array.\n-         */\n-        public double compute(UnivariateStatistic stat) {\n-            return stat.evaluate(getArrayRef(),\n-                                 getStartIndex(),\n-                                 getNumElements());\n-        }\n-\n-        /**\n-         * Creates a copy of this instance.\n-         *\n-         * @return a copy of this instance.\n-         */\n-        public StatArray copy() {\n-            return new StatArray(this);\n-        }\n-    }\n }\n--- a/src/main/java/org/apache/commons/math3/stat/descriptive/UnivariateStatistic.java\n+++ b/src/main/java/org/apache/commons/math3/stat/descriptive/UnivariateStatistic.java\n package org.apache.commons.math3.stat.descriptive;\n \n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n+import org.apache.commons.math3.util.MathArrays;\n \n \n /**\n  *\n  * @version $Id$\n  */\n-public interface UnivariateStatistic {\n-\n+public interface UnivariateStatistic extends MathArrays.Function {\n     /**\n      * Returns the result of evaluating the statistic over the input array.\n      *\n      * @return a copy of the statistic\n      */\n     UnivariateStatistic copy();\n-\n }", "timestamp": 1353025938, "metainfo": ""}