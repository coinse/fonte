{"sha": "855942dc1ebe8deb83dad804b054eafeec7a1a64", "log": "Caught NoClassDefFound Error when DiscoverClass is not present, eliminating runtime dependency on [discovery], [logging]. Removed factory method taking string class name (use of Class.ForName()).   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatistics.java\n /**\n  * Abstract factory class for univariate statistical summaries.\n  *\n- * @version $Revision: 1.8 $ $Date: 2004/06/23 16:26:16 $\n+ * @version $Revision: 1.9 $ $Date: 2004/07/10 16:04:47 $\n  */\n public abstract class DescriptiveStatistics implements StatisticalSummary, Serializable {\n     \n      *            created.\n      * @throws IllegalAccessException is thrown if the type's default\n      *            constructor is not accessible.\n-     * @throws ClassNotFoundException if the named\n-     *            <code>DescriptiveStatistics</code> type can not be found.\n-     */\n-    public static DescriptiveStatistics newInstance(String cls) throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n-        return newInstance(Class.forName(cls));\n-    }\n-    \n-    /**\n-     * Create an instance of a <code>DescriptiveStatistics</code>\n-     * @param cls the type of <code>DescriptiveStatistics</code> object to\n-     *        create. \n-     * @return a new factory. \n-     * @throws InstantiationException is thrown if the object can not be\n-     *            created.\n-     * @throws IllegalAccessException is thrown if the type's default\n-     *            constructor is not accessible.\n      */\n     public static DescriptiveStatistics newInstance(Class cls) throws InstantiationException, IllegalAccessException {\n         return (DescriptiveStatistics)cls.newInstance();\n             factory = (DescriptiveStatistics) dc.newInstance(\n                 DescriptiveStatistics.class,\n                 \"org.apache.commons.math.stat.univariate.DescriptiveStatisticsImpl\");\n-        } catch(Exception ex) {\n-            ex.printStackTrace();\n-            // ignore as default implementation will be used.\n+        } catch(Throwable t) {\n+            return new DescriptiveStatisticsImpl();\n         }\n         return factory;\n     }\n--- a/src/java/org/apache/commons/math/stat/univariate/SummaryStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/SummaryStatistics.java\n /**\n  * Abstract factory class for univariate statistical summaries.\n  *\n- * @version $Revision: 1.9 $ $Date: 2004/06/23 16:26:16 $\n+ * @version $Revision: 1.10 $ $Date: 2004/07/10 16:04:47 $\n  */\n public abstract class SummaryStatistics implements StatisticalSummary, Serializable {\n \n     /** Serialization UID */\n     static final long serialVersionUID = -6400596334135654825L;\n-    \n-    /**\n-     * Create an instance of a <code>SummaryStatistics</code>\n-     * @param cls the type of <code>SummaryStatistics</code> object to\n-     *        create. \n-     * @return a new factory. \n-     * @throws InstantiationException is thrown if the object can not be\n-     *            created.\n-     * @throws IllegalAccessException is thrown if the type's default\n-     *            constructor is not accessible.\n-     * @throws ClassNotFoundException if the named\n-     *            <code>SummaryStatistics</code> type can not be found.\n-     */\n-    public static SummaryStatistics newInstance(String cls) throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n-        return newInstance(Class.forName(cls));\n-    }\n      \n     /**\n      * Create an instance of a <code>DescriptiveStatistics</code>\n     \n     /**\n      * Create an instance of a <code>DescriptiveStatistics</code>\n-     * @return a new factory. \n+     * @return a new SummaryStatistics instance. \n      */\n     public static SummaryStatistics newInstance() {\n-        SummaryStatistics factory = null;\n+        SummaryStatistics instance = null;\n         try {\n             DiscoverClass dc = new DiscoverClass();\n-            factory = (SummaryStatistics) dc.newInstance(\n+            instance = (SummaryStatistics) dc.newInstance(\n                 SummaryStatistics.class,\n                 \"org.apache.commons.math.stat.univariate.SummaryStatisticsImpl\");\n-        } catch(Exception ex) {\n-            // ignore as default implementation will be used.\n+        } catch(Throwable t) {\n+            return new SummaryStatisticsImpl();\n         }\n-        return factory;\n+        return instance;\n     }\n     \n ", "timestamp": 1089475487, "metainfo": ""}