{"sha": "d7238cad823da5d2edce8ec9fb8341623eee1fe1", "log": "Javadoc Added optional support for transposition of linear operators.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/RealLinearOperator.java\n+++ b/src/main/java/org/apache/commons/math/linear/RealLinearOperator.java\n \n package org.apache.commons.math.linear;\n \n+import org.apache.commons.math.exception.DimensionMismatchException;\n+\n /**\n  * This class defines a linear operator operating on real ({@code double})\n- * vector spaces.\n- * No direct access to the coefficients of the underlying matrix is provided.\n+ * vector spaces. No direct access to the coefficients of the underlying matrix\n+ * is provided.\n  *\n  * The motivation for such an interface is well stated by\n  * <a href=\"#BARR1994\">Barrett et al. (1994)</a>:\n  * <blockquote>\n  *  We restrict ourselves to iterative methods, which work by repeatedly\n  *  improving an approximate solution until it is accurate enough. These\n- *  methods access the coefficient matrix {@code A} of the linear system\n- *  only via the matrix-vector product {@code y = A x} (and perhaps\n- *  {@code z} = {@code A}<sup>T</sup> {@code x}). Thus the user need only\n- *  supply a subroutine for computing {@code y} (and perhaps {@code z})\n- *  given {@code x}, which permits full exploitation of the sparsity or\n- *  other special structure of A.\n+ *  methods access the coefficient matrix A of the linear system only via the\n+ *  matrix-vector product y = A &middot; x\n+ *  (and perhaps z = A<sup>T</sup> &middot; x). Thus the user need only\n+ *  supply a subroutine for computing y (and perhaps z) given x, which permits\n+ *  full exploitation of the sparsity or other special structure of A.\n  * </blockquote>\n  * <br/>\n  *\n      * if the column dimension does not match the size of {@code x}.\n      */\n     public abstract RealVector operate(final RealVector x);\n+\n+    /**\n+     * Returns the result of multiplying the transpose of {@code this} operator\n+     * by the vector {@code x} (optional operation). The default implementation\n+     * throws an {@link UnsupportedOperationException}. Users overriding this\n+     * method must also override {@link #isTransposable()}.\n+     *\n+     * @param x Vector to operate on.\n+     * @return the product of the transpose of {@code this} instance with\n+     * {@code x}.\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if the row dimension does not match the size of {@code x}.\n+     * @throws UnsupportedOperationException if this operation is not supported\n+     * by {@code this} operator\n+     */\n+    public RealVector operateTranspose(final RealVector x)\n+        throws DimensionMismatchException, UnsupportedOperationException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Returns {@code true} if this operator supports\n+     * {@link #operateTranspose(RealVector)}. If {@code true} is returned,\n+     * {@link #operateTranspose(RealVector)} should not throw\n+     * {@code UnsupportedOperationException}. The default implementation returns\n+     * {@code false}.\n+     *\n+     * @return {@code false}\n+     */\n+    public boolean isTransposable() {\n+        return false;\n+    }\n }", "timestamp": 1326438679, "metainfo": ""}