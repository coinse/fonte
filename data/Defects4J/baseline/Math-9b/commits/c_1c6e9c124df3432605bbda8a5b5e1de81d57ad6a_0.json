{"sha": "1c6e9c124df3432605bbda8a5b5e1de81d57ad6a", "log": "This patch exposes the start index, internal double array of DOubleArray Implementations.  It adds a NumberTransformer framework for mapping Objects and Bean Properties to double primitives It also corrects some checkstyle and javadoc errors.   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/util/BeanTransformer.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.util;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import org.apache.commons.beanutils.PropertyUtils;\n+\n+/**\n+ * Uses PropertyUtils to map a Bean getter to a double value.\n+ * \n+ * @author Mark Diggory\n+ */\n+public class BeanTransformer implements NumberTransformer {\n+\n+    /**\n+     * The propertyName for this Transformer\n+     */\n+    private String propertyName;\n+\n+    /**\n+     * Create a BeanTransformer \n+     */\n+    public BeanTransformer() {\n+        super();\n+    }\n+\n+    /**\n+     * Create a BeanTransformer with a specific PropertyName.\n+     * @param propertyName The property.\n+     */\n+    public BeanTransformer(String propertyName) {\n+        this.propertyName = propertyName;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.util.NumberTransformer#transform(java.lang.Object)\n+     */\n+    public double transform(Object o) {\n+        double d = Double.NaN;\n+        try {\n+            d =\n+                ((Number) PropertyUtils.getProperty(o, propertyName))\n+                    .doubleValue();\n+        } catch (IllegalAccessException e) {\n+            e.printStackTrace();\n+        } catch (InvocationTargetException e) {\n+            e.printStackTrace();\n+        } catch (NoSuchMethodException e) {\n+            e.printStackTrace();\n+        }\n+        return d;\n+    }\n+\n+    /**\n+     * Get the property String\n+     * @return the Property Name String\n+     */\n+    public String getPropertyName() {\n+        return propertyName;\n+    }\n+\n+    /**\n+     * Set the propertyString\n+     * @param string The string to set the property to.\n+     */\n+    public void setPropertyName(String string) {\n+        propertyName = string;\n+    }\n+\n+}\n--- a/src/java/org/apache/commons/math/util/ContinuedFraction.java\n+++ b/src/java/org/apache/commons/math/util/ContinuedFraction.java\n public abstract class ContinuedFraction {\n     /** Maximum allowed numerical error. */\n     private static final double DEFAULT_EPSILON = 10e-9;\n-    \n+\n     /**\n      * Default constructor.\n      */\n     protected ContinuedFraction() {\n         super();\n     }\n-    \n+\n     /**\n      * Access the n-th a coefficient of the continued fraction.  Since a can be\n      * a function of the evaluation point, x, that is passed in as well.\n      * @return the n-th a coefficient.\n      */\n     protected abstract double getA(int n, double x);\n-    \n+\n     /**\n      * Access the n-th b coefficient of the continued fraction.  Since b can be\n      * a function of the evaluation point, x, that is passed in as well.\n      * @return the n-th b coefficient.\n      */\n     protected abstract double getB(int n, double x);\n-    \n+\n     /**\n      * Evaluates the continued fraction at the value x.\n      * @param x the evaluation point.\n      */\n     public double evaluate(double x) {\n         return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);\n-    }    \n-    \n+    }\n+\n     /**\n      * Evaluates the continued fraction at the value x.\n      * @param x the evaluation point.\n      */\n     public double evaluate(double x, double epsilon) {\n         return evaluate(x, epsilon, Integer.MAX_VALUE);\n-    }    \n-    \n+    }\n+\n     /**\n      * Evaluates the continued fraction at the value x.\n      * @param x the evaluation point.\n      */\n     public double evaluate(double x, int maxIterations) {\n         return evaluate(x, DEFAULT_EPSILON, maxIterations);\n-    }    \n-    \n+    }\n+\n     /**\n      * Evaluates the continued fraction at the value x.\n      * \n         double[][] f = new double[2][2];\n         double[][] a = new double[2][2];\n         double[][] an = new double[2][2];\n-        \n+\n         a[0][0] = getA(0, x);\n         a[0][1] = 1.0;\n         a[1][0] = 1.0;\n \n         return evaluate(1, x, a, an, f, epsilon, maxIterations);\n     }\n-    \n+\n     /**\n      * Evaluates the n-th convergent, fn = pn / qn, for this continued fraction\n      * at the value x.\n      * @return the value of the the n-th convergent for this continued fraction\n      *         evaluated at x. \n      */\n-    private double evaluate(int n, double x, double[][] a, double[][] an,\n-            double[][] f, double epsilon, int maxIterations) {\n+    private double evaluate(\n+        int n,\n+        double x,\n+        double[][] a,\n+        double[][] an,\n+        double[][] f,\n+        double epsilon,\n+        int maxIterations) {\n         double ret;\n-        \n+\n         // create next matrix\n         an[0][0] = getA(n, x);\n         an[0][1] = 1.0;\n         an[1][0] = getB(n, x);\n         an[1][1] = 0.0;\n-        \n+\n         // multiply a and an, save as f\n         f[0][0] = (a[0][0] * an[0][0]) + (a[0][1] * an[1][0]);\n         f[0][1] = (a[0][0] * an[0][1]) + (a[0][1] * an[1][1]);\n         f[1][0] = (a[1][0] * an[0][0]) + (a[1][1] * an[1][0]);\n         f[1][1] = (a[1][0] * an[0][1]) + (a[1][1] * an[1][1]);\n-        \n+\n         // determine if we're close enough\n-        if (Math.abs((f[0][0] * f[1][1]) - (f[1][0] * f[0][1])) <\n-                Math.abs(epsilon * f[1][0] * f[1][1])) {\n+        if (Math.abs((f[0][0] * f[1][1]) - (f[1][0] * f[0][1]))\n+            < Math.abs(epsilon * f[1][0] * f[1][1])) {\n             ret = f[0][0] / f[1][0];\n         } else {\n             if (n >= maxIterations) {\n                     \"Continued fraction convergents failed to converge.\");\n             }\n             // compute next\n-            ret = evaluate(n + 1, x, f /* new a */, an /* reuse an */,\n-                            a /* new f */, epsilon, maxIterations);\n+            ret = evaluate(n + 1, x, f /* new a */\n+            , an /* reuse an */\n+            , a /* new f */\n+            , epsilon, maxIterations);\n         }\n-        \n+\n         return ret;\n     }\n }\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/util/DefaultTransformer.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.util;\n+\n+/**\n+ * A Default NumberTransformer for java.lang.Numbers and Numeric Strings. \n+ * @author Mark Diggory\n+ */\n+public class DefaultTransformer implements NumberTransformer {\n+\n+    /**\n+     * @see org.apache.commons.collections.Transformer#transform(java.lang.Object)\n+     */\n+    public double transform(Object o) {\n+        double d = Double.NaN;\n+\n+        if (o instanceof Number) {\n+            return ((Number) o).doubleValue();\n+        } else {\n+            try {\n+                d = Double.parseDouble(o.toString());\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+            }\n+        }\n+        return d;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/util/NumberTransformer.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.util;\n+\n+/**\n+ * Subclasses implementing this interface can transform Objects to doubles.\n+ * \n+ * @author Mark Diggory\n+ */\n+public interface NumberTransformer {\n+    \n+    /**\n+     * Implementing this interface provides a facility to transform\n+     * from Object to Double.\n+     * \n+     * @param o the Object to be transformed.\n+     * @return the double value of the Object.\n+     */\n+    double transform(Object o);\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/util/TransformerMap.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.util;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This TansformerMap automates the transformation of of mixed object types.\n+ * It provides a means to set NumberTransformers that will be selected \n+ * based on the Class of the object handed to the Maps\n+ * <code>double transform(Object o)</code> method.\n+ * \n+ * @author Mark Diggory\n+ */\n+public class TransformerMap implements NumberTransformer {\n+\n+    /**\n+     * A default Number Transformer for Numbers and numeric Strings.\n+     */\n+    private NumberTransformer defaultTransformer = null;\n+\n+    /**\n+     * The internal Map.\n+     */\n+    private Map map = null;\n+\n+    /**\n+     * \n+     */\n+    public TransformerMap() {\n+        map = new HashMap();\n+        defaultTransformer = new DefaultTransformer();\n+    }\n+\n+    /**\n+     * Tests if a Class is present in the TransformerMap.\n+     * @param key Class to check\n+     * @return true|false\n+     */\n+    public boolean containsClass(Class key) {\n+        return map.containsKey(key);\n+    }\n+\n+    /**\n+     * Tests if a NumberTransformer is present in the TransformerMap.\n+     * @param value NumberTransformer to check\n+     * @return true|false\n+     */\n+    public boolean containsTransformer(NumberTransformer value) {\n+        return map.containsValue(value);\n+    }\n+\n+    /**\n+     * Returns the Transformer that is mapped to a class\n+     * if mapping is not present, this returns null.\n+     * @param key The Class of the object\n+     * @return the mapped NumberTransformer or null.\n+     */\n+    public NumberTransformer getTransformer(Class key) {\n+        return (NumberTransformer) map.get(key);\n+    }\n+\n+    /**\n+     * Sets a Class to Transformer Mapping in the Map. If\n+     * the Class is already present, this overwrites that\n+     * mapping.\n+     * @param key The Class\n+     * @param transformer The NumberTransformer\n+     * @return the replaced transformer if one is present\n+     */\n+    public Object putTransformer(Class key, NumberTransformer transformer) {\n+        return map.put(key, transformer);\n+    }\n+\n+    /**\n+     * Removes a Class to Transformer Mapping in the Map.\n+     * @param key The Class\n+     * @return the removed transformer if one is present or\n+     * null if none was present.\n+     */\n+    public Object removeTransformer(Class key) {\n+        return map.remove(key);\n+    }\n+\n+    /**\n+     * Clears all the Class to Transformer mappings.\n+     */\n+    public void clear() {\n+        map.clear();\n+    }\n+\n+    /**\n+     * Returns the Set of Classes used as keys in the map.\n+     * @return Set of Classes\n+     */\n+    public Set classes() {\n+        return map.keySet();\n+    }\n+\n+    /**\n+     * Returns the Set of NumberTransformers used as values \n+     * in the map.\n+     * @return Set of NumberTransformers\n+     */\n+    public Collection transformers() {\n+        return map.values();\n+    }\n+\n+    /**\n+     * Attempts to transform the Object against the map of\n+     * NumberTransformers. Otherwise it returns Double.NaN.\n+     * \n+     * @see org.apache.commons.math.util.NumberTransformer#transform(java.lang.Object)\n+     */\n+    public double transform(Object o) {\n+        double value = Double.NaN;\n+\n+        try {\n+            if (o instanceof Number || o instanceof String) {\n+                value = defaultTransformer.transform(o);\n+            } else {\n+                NumberTransformer trans =\n+                    (NumberTransformer) this.getTransformer(o.getClass());\n+                if (trans != null) {\n+                    value = trans.transform(o);\n+                }\n+            }\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+\n+        return value;\n+    }\n+\n+}", "timestamp": 1057428815, "metainfo": ""}