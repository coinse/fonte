{"sha": "911f0fe11146590554ec11d1277d6e2ba55bd7e9", "log": "epsilon needs to be set before calling isZero, plus copy epsilon for append  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/SparseRealVector.java\n+++ b/src/java/org/apache/commons/math/linear/SparseRealVector.java\n     protected SparseRealVector(SparseRealVector v, int resize) {\n         virtualSize = v.getDimension() + resize;\n         entries = new OpenIntToDoubleHashMap(v.entries);\n-        epsilon = DEFAULT_ZERO_TOLERANCE;\n+        epsilon = v.getEpsilon();\n     }\n \n     /**\n     public SparseRealVector(double[] values, double epsilon) {\n         virtualSize = values.length;\n         entries = new OpenIntToDoubleHashMap(0.0);\n+        this.epsilon = epsilon;\n         for (int key = 0; key < values.length; key++) {\n             double value = values[key];\n             if (!isZero(value)) {\n                 entries.put(key, value);\n             }\n         }\n-        this.epsilon = epsilon;\n     }\n \n     /**\n     public SparseRealVector(Double[] values, double epsilon) {\n         virtualSize = values.length;\n         entries = new OpenIntToDoubleHashMap(0.0);\n+        this.epsilon = epsilon;\n         for (int key = 0; key < values.length; key++) {\n             double value = values[key].doubleValue();\n             if (!isZero(value)) {\n                 entries.put(key, value);\n             }\n         }\n-        this.epsilon = epsilon;\n     }\n \n     /**\n     public SparseRealVector(RealVector v) {\n         virtualSize = v.getDimension();\n         entries = new OpenIntToDoubleHashMap(0.0);\n+        epsilon = DEFAULT_ZERO_TOLERANCE;\n         for (int key = 0; key < virtualSize; key++) {\n             double value = v.getEntry(key);\n             if (!isZero(value)) {\n                 entries.put(key, value);\n             }\n         }\n-        epsilon = DEFAULT_ZERO_TOLERANCE;\n     }\n \n     /**", "timestamp": 1235532772, "metainfo": ""}