{"sha": "c44b2009e01632c51980c22d05340c769cbf34c9", "log": "added tests showing that issues MATH-303 and MATH-304 are both invalid. Jira: MATH-303, MATH-304  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.commons.math.optimization.fitting;\n+\n+import org.apache.commons.math.FunctionEvaluationException;\n+import org.apache.commons.math.optimization.OptimizationException;\n+import org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class CurveFitterTest {\n+\n+    @Test\n+    public void testMath303()\n+        throws OptimizationException, FunctionEvaluationException {\n+\n+        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n+        CurveFitter fitter = new CurveFitter(optimizer);\n+        fitter.addObservedPoint(2.805d, 0.6934785852953367d);\n+        fitter.addObservedPoint(2.74333333333333d, 0.6306772025518496d);\n+        fitter.addObservedPoint(1.655d, 0.9474675497289684);\n+        fitter.addObservedPoint(1.725d, 0.9013594835804194d);\n+\n+        ParametricRealFunction sif = new SimpleInverseFunction();\n+\n+        double[] initialguess1 = new double[1];\n+        initialguess1[0] = 1.0d;\n+        Assert.assertEquals(1, fitter.fit(sif, initialguess1).length);\n+\n+        double[] initialguess2 = new double[2];\n+        initialguess2[0] = 1.0d;\n+        initialguess2[1] = .5d;\n+        Assert.assertEquals(2, fitter.fit(sif, initialguess2).length);\n+\n+    }\n+\n+    @Test\n+    public void testMath304()\n+        throws OptimizationException, FunctionEvaluationException {\n+\n+        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n+        CurveFitter fitter = new CurveFitter(optimizer);\n+        fitter.addObservedPoint(2.805d, 0.6934785852953367d);\n+        fitter.addObservedPoint(2.74333333333333d, 0.6306772025518496d);\n+        fitter.addObservedPoint(1.655d, 0.9474675497289684);\n+        fitter.addObservedPoint(1.725d, 0.9013594835804194d);\n+\n+        ParametricRealFunction sif = new SimpleInverseFunction();\n+\n+        double[] initialguess1 = new double[1];\n+        initialguess1[0] = 1.0d;\n+        Assert.assertEquals(1.6357215104109237, fitter.fit(sif, initialguess1)[0], 1.0e-14);\n+\n+        double[] initialguess2 = new double[1];\n+        initialguess2[0] = 10.0d;\n+        Assert.assertEquals(1.6357215104109237, fitter.fit(sif, initialguess1)[0], 1.0e-14);\n+\n+    }\n+\n+    private static class SimpleInverseFunction implements ParametricRealFunction {\n+\n+        public double value(double x, double[] parameters) {\n+            return parameters[0] / x + (parameters.length < 2 ? 0 : parameters[1]);\n+        }\n+\n+        public double[] gradient(double x, double[] doubles) {\n+            double[] gradientVector = new double[doubles.length];\n+            gradientVector[0] = 1 / x;\n+            if (doubles.length >= 2) {\n+                gradientVector[1] = 1;\n+            }\n+            return gradientVector; \n+        }\n+    }\n+\n+}", "timestamp": 1261935217, "metainfo": ""}