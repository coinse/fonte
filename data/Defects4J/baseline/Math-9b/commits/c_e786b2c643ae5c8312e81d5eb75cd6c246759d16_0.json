{"sha": "e786b2c643ae5c8312e81d5eb75cd6c246759d16", "log": "Added a workaround for an OpenJDK issue on sparc solaris.  The compiler has issues with very small double constants, despite they are perfectly legal Java and representable in IEEE754.  JIRA: MATH-721  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/util/Precision.java\n+++ b/src/main/java/org/apache/commons/math3/util/Precision.java\n  * @version $Id$\n  */\n public class Precision {\n+\n+    /** Exponent offset in IEEE754 representation. */\n+    private static final long EXPONENT_OFFSET = 1023l;\n+\n     /**\n      * Smallest positive number such that {@code 1 - EPSILON} is not\n      * numerically equal to 1: {@value}.\n-     */\n-    public static final double EPSILON = 0x1.0p-53;\n+     * In IEEE 754 arithmetic, this is 2<sup>-53</sup>: {@value}.\n+     */\n+    public static final double EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);\n     /**\n      * Safe minimum, such that {@code 1 / SAFE_MIN} does not overflow.\n      * In IEEE 754 arithmetic, this is also the smallest normalized\n      * number 2<sup>-1022</sup>: {@value}.\n      */\n-    public static final double SAFE_MIN = 0x1.0p-1022;\n+    public static final double SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);\n+\n     /** Offset to order signed double numbers lexicographically. */\n     private static final long SGN_MASK = 0x8000000000000000L;\n     /** Offset to order signed double numbers lexicographically. */\n--- a/src/test/java/org/apache/commons/math3/util/PrecisionTest.java\n+++ b/src/test/java/org/apache/commons/math3/util/PrecisionTest.java\n \n \n     @Test\n+    public void testIssue721() {\n+        Assert.assertEquals(-53,   FastMath.getExponent(Precision.EPSILON));\n+        Assert.assertEquals(-1022, FastMath.getExponent(Precision.SAFE_MIN));\n+    }\n+\n+\n+    @Test\n     public void testRepresentableDelta() {\n-        int totalCount = 0;\n         int nonRepresentableCount = 0;\n         final double x = 100;\n         final int numTrials = 10000;", "timestamp": 1334952911, "metainfo": ""}