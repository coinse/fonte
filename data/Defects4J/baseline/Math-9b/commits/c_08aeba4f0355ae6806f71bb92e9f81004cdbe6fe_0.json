{"sha": "08aeba4f0355ae6806f71bb92e9f81004cdbe6fe", "log": "PR: 29414 I changed the continued fraction used in regularizedBeta resulting in faster  convergence.  I added the test case provided by scott and ran all units tests  with all of them passing.   ", "commit": "\n--- a/src/java/org/apache/commons/math/special/Beta.java\n+++ b/src/java/org/apache/commons/math/special/Beta.java\n  * This is a utility class that provides computation methods related to the\n  * Beta family of functions.\n  * \n- * @version $Revision: 1.19 $ $Date: 2004/04/27 04:37:59 $\n+ * @version $Revision: 1.20 $ $Date: 2004/06/10 18:27:47 $\n  */\n public class Beta implements Serializable {\n     /** Maximum allowed numerical error. */\n             (x > 1) || (a <= 0.0) || (b <= 0.0))\n         {\n             ret = Double.NaN;\n-        } else if (x > (a + 1.0) / (a + b + 1.0)) {\n+        } else if (x > (a + 1.0) / (a + b + 2.0)) {\n             ret = 1.0 - regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);\n         } else {\n             ContinuedFraction fraction = new ContinuedFraction() {\n                 protected double getB(int n, double x) {\n                     double ret;\n                     double m;\n-                    switch (n) {\n-                        case 1 :\n-                            ret = 1.0;\n-                            break;\n-                        default :\n-                            if (n % 2 == 0) { // even\n-                                m = (n - 2.0) / 2.0;\n-                                ret = -((a + m) * (a + b + m) * x) /\n-                                    ((a + (2 * m)) * (a + (2 * m) + 1.0));\n-                            } else {\n-                                m = (n - 1.0) / 2.0;\n-                                ret = (m * (b - m) * x) /\n-                                    ((a + (2 * m) - 1) * (a + (2 * m)));\n-                            }\n-                            break;\n+                    if (n % 2 == 0) { // even\n+                        m = n / 2.0;\n+                        ret = (m * (b - m) * x) /\n+                            ((a + (2 * m) - 1) * (a + (2 * m)));\n+                    } else {\n+                        m = (n - 1.0) / 2.0;\n+                        ret = -((a + m) * (a + b + m) * x) /\n+                                ((a + (2 * m)) * (a + (2 * m) + 1.0));\n                     }\n                     return ret;\n                 }\n \n                 protected double getA(int n, double x) {\n-                    double ret;\n-                    switch (n) {\n-                        case 0 :\n-                            ret = 0.0;\n-                            break;\n-                        default :\n-                            ret = 1.0;\n-                            break;\n-                    }\n-                    return ret;\n+                    return 1.0;\n                 }\n             };\n             ret = Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x)) -\n                 Math.log(a) - logBeta(a, b, epsilon, maxIterations)) *\n-                fraction.evaluate(x, epsilon, maxIterations);\n+                1.0 / fraction.evaluate(x, epsilon, maxIterations);\n         }\n \n         return ret;\n--- a/src/test/org/apache/commons/math/distribution/FDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/FDistributionTest.java\n  * Extends ContinuousDistributionAbstractTest.  See class javadoc for\n  * ContinuousDistributionAbstractTest for details.\n  * \n- * @version $Revision: 1.14 $ $Date: 2004/05/30 01:39:33 $\n+ * @version $Revision: 1.15 $ $Date: 2004/06/10 18:27:47 $\n  */\n public class FDistributionTest extends ContinuousDistributionAbstractTest {\n \n         }\n     } \n \n+    public void testLargeDegreesOfFreedom() throws Exception {\n+        org.apache.commons.math.distribution.FDistributionImpl fd =\n+            new org.apache.commons.math.distribution.FDistributionImpl(\n+                100000., 100000.);\n+        double p = fd.cumulativeProbability(.999);\n+        double x = fd.inverseCumulativeProbability(p);\n+        assertEquals(.999, x, 1.0e-5);\n+    }\n }", "timestamp": 1086892067, "metainfo": ""}