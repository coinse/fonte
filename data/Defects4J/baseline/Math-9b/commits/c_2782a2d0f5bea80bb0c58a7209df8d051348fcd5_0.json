{"sha": "2782a2d0f5bea80bb0c58a7209df8d051348fcd5", "log": "Fixed spelling of INFINITE_WINDOW.  PR: 20234 Submitted by: Al Chou   ", "commit": "\n--- a/src/java/org/apache/commons/math/ListUnivariateImpl.java\n+++ b/src/java/org/apache/commons/math/ListUnivariateImpl.java\n \n     // Holds the value of the windowSize, initial windowSize is the constant\n     // Univariate.INFINITE_WINDOW\n-    private int windowSize = Univariate.INIFINTE_WINDOW;\n+    private int windowSize = Univariate.INFINITE_WINDOW;\n \n     // Holds a reference to a list - GENERICs are going to make\n     // out lives easier here as we could only accept List<Number>\n         // If we've got a windowSize, we might not care about the entire list.\n         List effectiveList = list;\n \n-        // If the window size is not INIFINITE_WINDOW AND\n+        // If the window size is not INFINITE_WINDOW AND\n         // the current list is larger that the window size, we need to\n         // take into account only the last n elements of the list\n         // as definied by windowSize\n-        if (windowSize != Univariate.INIFINTE_WINDOW &&\n+        if (windowSize != Univariate.INFINITE_WINDOW &&\n             windowSize < list.size()) {\n             effectiveList = list.subList((list.size() - 1) - windowSize, \n                                           (list.size()-1));\n     public double getElement(int index) {\n \n         double value = Double.NaN;\n-        if (windowSize != Univariate.INIFINTE_WINDOW &&\n+        if (windowSize != Univariate.INFINITE_WINDOW &&\n             windowSize < list.size()) {\n \n             int calcIndex = (list.size() - windowSize) + index;\n     public int getN() {\n         int N = 0;\n \n-        if (windowSize != Univariate.INIFINTE_WINDOW) {\n+        if (windowSize != Univariate.INFINITE_WINDOW) {\n             if (list.size() > windowSize) {\n                 N = windowSize;\n             } else {\n--- a/src/java/org/apache/commons/math/StoreUnivariateImpl.java\n+++ b/src/java/org/apache/commons/math/StoreUnivariateImpl.java\n     DoubleArray eDA;\n \n     // Store the windowSize\n-    private int windowSize = Univariate.INIFINTE_WINDOW;\n+    private int windowSize = Univariate.INFINITE_WINDOW;\n \n     public StoreUnivariateImpl() {\n         // A contractable double array is used.  memory is reclaimed when\n      * @see org.apache.commons.math.Univariate#addValue(double)\n      */\n     public synchronized void addValue(double v) {\n-        if( windowSize != Univariate.INIFINTE_WINDOW ) {\n+        if( windowSize != Univariate.INFINITE_WINDOW ) {\n             if( getN() == windowSize ) {\n                 eDA.addElementRolling( v );\n             } else if( getN() < windowSize ) {\n--- a/src/java/org/apache/commons/math/Univariate.java\n+++ b/src/java/org/apache/commons/math/Univariate.java\n  * @author Phil Steitz\n  * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n  * @author Mark Diggory\n- * @version $Revision: 1.6 $ $Date: 2003/05/23 17:33:18 $\n+ * @version $Revision: 1.7 $ $Date: 2003/05/26 17:40:20 $\n  * \n */\n public interface Univariate {\n      * elements.  In other words, if getWindow returns this\n      * constant, there is, in effect, no \"window\".\n      */\n-    static final int INIFINTE_WINDOW = -1;\n+    static final int INFINITE_WINDOW = -1;\n \n     /**\n      * Univariate has the ability to return only measures for the\n--- a/src/java/org/apache/commons/math/UnivariateImpl.java\n+++ b/src/java/org/apache/commons/math/UnivariateImpl.java\n  * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n  * @author Mark Diggory\n  * @author Brent Worden\n- * @version $Revision: 1.7 $ $Date: 2003/05/23 17:33:18 $\n+ * @version $Revision: 1.8 $ $Date: 2003/05/26 17:40:20 $\n  * \n */\n public class UnivariateImpl implements Univariate, Serializable {\n \n     /** hold the window size **/\n-    private int windowSize = Univariate.INIFINTE_WINDOW;\n+    private int windowSize = Univariate.INFINITE_WINDOW;\n \n     /** Just in case, the windowSize is not inifinite, we need to\n      *   keep an array to remember values 0 to N\n             product = 1.0;\n         }\n \n-        if( windowSize != Univariate.INIFINTE_WINDOW ) {\n+        if( windowSize != Univariate.INFINITE_WINDOW ) {\n \n             if( windowSize == n ) {\n                 double discarded = doubleArray.addElementRolling( v );", "timestamp": 1053970820, "metainfo": ""}