{"sha": "a96ae799963961cd4aff7e1e45abad3ecc21bbbb", "log": "trying to recover history for solvers  ", "commit": "\n--- a/src/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n  * <p>\n  * The function should be continuous but not necessarily smooth.</p>\n  * \n- * @version $Revision: 724191 $ $Date: 2008-12-07 21:24:10 +0100 (dim., 07 d\u00e9c. 2008) $\n+ * @version $Revision$ $Date$\n  */\n public class BisectionSolver extends UnivariateRealSolverImpl {\n     \n--- a/src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java\n  * Laguerre's method is global in the sense that it can start with any initial\n  * approximation and be able to solve all roots from that point.</p>\n  *\n- * @version $Revision: 724191 $ $Date: 2008-12-07 21:24:10 +0100 (dim., 07 d\u00e9c. 2008) $\n+ * @version $Revision$ $Date$\n  * @since 1.2\n  */\n public class LaguerreSolver extends UnivariateRealSolverImpl {\n--- a/src/java/org/apache/commons/math/analysis/solvers/MullerSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/MullerSolver.java\n  * restrict ourselves to real functions. Methods solve() and solve2() find\n  * real zeros, using different ways to bypass complex arithmetics.</p>\n  *\n- * @version $Revision: 729291 $ $Date: 2008-12-24 11:47:53 +0100 (mer., 24 d\u00e9c. 2008) $\n+ * @version $Revision$ $Date$\n  * @since 1.2\n  */\n public class MullerSolver extends UnivariateRealSolverImpl {\n--- a/src/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java\n  * <p> \n  * The function should be continuous but not necessarily smooth.</p>\n  *\n- * @version $Revision: 729291 $ $Date: 2008-12-24 11:47:53 +0100 (mer., 24 d\u00e9c. 2008) $\n+ * @version $Revision$ $Date$\n  */\n public class NewtonSolver extends UnivariateRealSolverImpl {\n     \n--- a/src/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java\n  * <p>\n  * The function should be continuous but not necessarily smooth.</p>\n  *  \n- * @version $Revision: 724191 $ $Date: 2008-12-07 21:24:10 +0100 (dim., 07 d\u00e9c. 2008) $\n+ * @version $Revision$ $Date$\n  * @since 1.2\n  */\n public class RiddersSolver extends UnivariateRealSolverImpl {\n--- a/src/java/org/apache/commons/math/analysis/solvers/SecantSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/SecantSolver.java\n  * <p>\n  * The function is assumed to be continuous but not necessarily smooth.</p>\n  *  \n- * @version $Revision: 724191 $ $Date: 2008-12-07 21:24:10 +0100 (dim., 07 d\u00e9c. 2008) $\n+ * @version $Revision$ $Date$\n  */\n public class SecantSolver extends UnivariateRealSolverImpl implements Serializable {\n     \n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java\n  * <p>\n  * Implementations will search for only one zero in the given interval.</p>\n  *  \n- * @version $Revision: 724191 $ $Date: 2008-12-07 21:24:10 +0100 (Sun, 07 Dec 2008) $\n+ * @version $Revision$ $Date$\n  */\n public interface UnivariateRealSolver extends ConvergingAlgorithm {\n \n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java\n  * BrentSolver solver = factory.newBrentSolver();\n  * </pre>\n  *\n- * @version $Revision: 724191 $ $Date: 2008-12-07 21:24:10 +0100 (dim., 07 d\u00e9c. 2008) $\n+ * @version $Revision$ $Date$\n  */\n public abstract class UnivariateRealSolverFactory {\n     /**\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java\n  * <p>\n  * The default solver returned by this factory is a {@link BrentSolver}.</p>\n  *\n- * @version $Revision: 724191 $ $Date: 2008-12-07 21:24:10 +0100 (dim., 07 d\u00e9c. 2008) $\n+ * @version $Revision$ $Date$\n  */\n public class UnivariateRealSolverFactoryImpl extends UnivariateRealSolverFactory {\n         \n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\n  * Provide a default implementation for several functions useful to generic\n  * solvers.\n  *  \n- * @version $Revision: 724191 $ $Date: 2008-12-07 21:24:10 +0100 (Sun, 07 Dec 2008) $\n+ * @version $Revision$ $Date$\n  */\n public abstract class UnivariateRealSolverImpl\n     extends ConvergingAlgorithmImpl implements UnivariateRealSolver {\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n /**\n  * Utility routines for {@link UnivariateRealSolver} objects.\n  * \n- * @version $Revision: 724191 $ $Date: 2008-12-07 21:24:10 +0100 (dim., 07 d\u00e9c. 2008) $\n+ * @version $Revision$ $Date$\n  */\n public class UnivariateRealSolverUtils {\n     /**", "timestamp": 1232308132, "metainfo": ""}