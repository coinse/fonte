{"sha": "e23eb4d782b2faca29e8c517564bcb3938516d28", "log": "MATH-915 Restore backwards-compatibility (for release 3.1).   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java\n       * {@link #random} instance variable instead.\n       */\n     @Deprecated\n-    protected final RandomDataImpl randomData = new RandomDataImpl();\n+    protected RandomDataImpl randomData = new RandomDataImpl();\n     /** RNG instance used to generate samples from the distribution. */\n     protected final RandomGenerator random;\n     /** Solver absolute accuracy for inverse cumulative computation */\n--- a/src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java\n import java.util.List;\n \n import org.apache.commons.math3.distribution.AbstractRealDistribution;\n+import org.apache.commons.math3.distribution.RealDistribution;\n import org.apache.commons.math3.distribution.NormalDistribution;\n-import org.apache.commons.math3.distribution.RealDistribution;\n import org.apache.commons.math3.exception.MathIllegalStateException;\n import org.apache.commons.math3.exception.MathInternalError;\n import org.apache.commons.math3.exception.NullArgumentException;\n     /** upper bounds of subintervals in (0,1) \"belonging\" to the bins */\n     private double[] upperBounds = null;\n \n-    /** RandomDataImpl instance to use in repeated calls to getNext() */\n-    private final RandomDataGenerator randomData;\n+    /** Data generator. */\n+    private final RandomDataGenerator randomDataGen;\n+    /**\n+     * XXX Enable backward-compatibility (to be removed in 4.0).\n+     */\n+    private final boolean useRandomDataImpl;\n \n     /**\n      * Creates a new EmpiricalDistribution with the default bin count.\n      */\n     public EmpiricalDistribution() {\n-        this(DEFAULT_BIN_COUNT, new RandomDataGenerator());\n+        this(DEFAULT_BIN_COUNT);\n     }\n \n     /**\n      * @param binCount number of bins\n      */\n     public EmpiricalDistribution(int binCount) {\n-        this(binCount, new RandomDataGenerator());\n+        this(binCount, (RandomGenerator) null);\n     }\n \n     /**\n      * provided {@link RandomGenerator} as the source of random data.\n      *\n      * @param binCount number of bins\n-     * @param generator random data generator (may be null, resulting in default JDK generator)\n+     * @param randomData random data generator (may be null, resulting in a default generator)\n+     * @deprecated As of 3.1. To be removed in 4.0. Please use\n+     * {@link #EmpiricalDistribution(int,RandomDataGenerator)} instead.\n+     */\n+    @Deprecated\n+    public EmpiricalDistribution(int binCount, RandomDataImpl randomData) {\n+        this.binCount = binCount;\n+        this.randomData = randomData == null ?\n+            new RandomDataImpl() :\n+            randomData;\n+        binStats = new ArrayList<SummaryStatistics>();\n+        useRandomDataImpl = true;\n+        randomDataGen = null;\n+    }\n+    /**\n+     * Creates a new EmpiricalDistribution with the specified bin count using the\n+     * provided {@link RandomGenerator} as the source of random data.\n+     *\n+     * @param randomData random data generator (may be null, resulting in a default generator)\n+     * @deprecated As of 3.1. To be removed in 4.0. Please use\n+     * {@link #EmpiricalDistribution(RandomDataGenerator)} instead.\n+     */\n+    @Deprecated\n+    public EmpiricalDistribution(RandomDataImpl randomData) {\n+        this(DEFAULT_BIN_COUNT, randomData);\n+    }\n+\n+    /**\n+     * Creates a new EmpiricalDistribution with the specified bin count using the\n+     * provided {@link RandomGenerator} as the source of random data.\n+     *\n+     * @param binCount number of bins\n+     * @param randomData random data generator (may be null, resulting in a default generator)\n+     */\n+    public EmpiricalDistribution(int binCount, RandomDataGenerator randomData) {\n+        this.binCount = binCount;\n+        this.randomDataGen = randomData == null ?\n+            new RandomDataGenerator() :\n+            randomData;\n+        binStats = new ArrayList<SummaryStatistics>();\n+        useRandomDataImpl = false; // XXX Remove in 4.0\n+    }\n+    /**\n+     * Creates a new EmpiricalDistribution with the specified bin count using the\n+     * provided {@link RandomGenerator} as the source of random data.\n+     *\n+     * @param randomData random data generator (may be null, resulting in a default generator)\n+     */\n+    public EmpiricalDistribution(RandomDataGenerator randomData) {\n+        this(DEFAULT_BIN_COUNT, randomData);\n+    }\n+\n+    /**\n+     * Creates a new EmpiricalDistribution with the specified bin count using the\n+     * provided {@link RandomGenerator} as the source of random data.\n+     *\n+     * @param binCount number of bins\n+     * @param generator random data generator (may be null, resulting in a default generator)\n      * @since 3.0\n      */\n     public EmpiricalDistribution(int binCount, RandomGenerator generator) {\n-        super(generator);\n-        this.binCount = binCount;\n-        this.randomData = new RandomDataGenerator(generator);\n-        this.binStats = new ArrayList<SummaryStatistics>();\n+        this(binCount, new RandomDataGenerator(generator));\n     }\n \n     /**\n      * Creates a new EmpiricalDistribution with default bin count using the\n      * provided {@link RandomGenerator} as the source of random data.\n      *\n-     * @param generator random data generator (may be null, resulting in default JDK generator)\n+     * @param generator random data generator (may be null, resulting in default generator)\n      * @since 3.0\n      */\n     public EmpiricalDistribution(RandomGenerator generator) {\n     }\n \n     /**\n-     * Creates a new EmpiricalDistribution with the specified bin count using the\n-     * provided {@link RandomDataImpl} instance as the source of random data.\n-     *\n-     * @param binCount number of bins\n-     * @param randomData random data generator (may be null, resulting in default JDK generator)\n-     * @since 3.0\n-     */\n-    @SuppressWarnings(\"deprecation\")  // Superclass argumentless constructor is deprecated\n-    public EmpiricalDistribution(int binCount, RandomDataGenerator randomData) {\n-        this.binCount = binCount;\n-        this.randomData = randomData;\n-        binStats = new ArrayList<SummaryStatistics>();\n-    }\n-\n-    /**\n-     * Creates a new EmpiricalDistribution with default bin count using the\n-     * provided {@link RandomDataImpl} as the source of random data.\n-     *\n-     * @param randomData random data generator (may be null, resulting in default JDK generator)\n-     * @since 3.0\n-     */\n-    public EmpiricalDistribution(RandomDataGenerator randomData) {\n-        this(DEFAULT_BIN_COUNT, randomData);\n-    }\n-\n-     /**\n      * Computes the empirical distribution from the provided\n      * array of numbers.\n      *\n             throw new MathIllegalStateException(LocalizedFormats.DISTRIBUTION_NOT_LOADED);\n         }\n \n-        // Start with a uniformly distributed random number in (0,1)\n-        final double x = randomData.nextUniform(0,1);\n-\n-        // Use this to select the bin and generate a Gaussian within the bin\n-        for (int i = 0; i < binCount; i++) {\n-           if (x <= upperBounds[i]) {\n-               SummaryStatistics stats = binStats.get(i);\n-               if (stats.getN() > 0) {\n-                   if (stats.getStandardDeviation() > 0) {  // more than one obs\n-                       return randomData.nextGaussian(stats.getMean(),\n-                                                      stats.getStandardDeviation());\n-                   } else {\n-                       return stats.getMean(); // only one obs in bin\n-                   }\n-               }\n-           }\n+        if (useRandomDataImpl) {\n+            // XXX backward compatibility.\n+            // Start with a uniformly distributed random number in (0, 1)\n+            final double x = randomData.nextUniform(0,1);\n+            // Use this to select the bin and generate a Gaussian within the bin\n+            for (int i = 0; i < binCount; i++) {\n+                if (x <= upperBounds[i]) {\n+                    SummaryStatistics stats = binStats.get(i);\n+                    if (stats.getN() > 0) {\n+                        if (stats.getStandardDeviation() > 0) {  // more than one obs\n+                            return randomData.nextGaussian(stats.getMean(),\n+                                                           stats.getStandardDeviation());\n+                        } else {\n+                            return stats.getMean(); // only one obs in bin\n+                        }\n+                    }\n+                }\n+            }\n+        } else {\n+            // Start with a uniformly distributed random number in (0, 1)\n+            final double x = randomDataGen.nextUniform(0, 1);\n+            // Use this to select the bin and generate a Gaussian within the bin\n+            for (int i = 0; i < binCount; i++) {\n+                if (x <= upperBounds[i]) {\n+                    SummaryStatistics stats = binStats.get(i);\n+                    if (stats.getN() > 0) {\n+                        if (stats.getStandardDeviation() > 0) {  // more than one obs\n+                            return randomDataGen.nextGaussian(stats.getMean(),\n+                                                              stats.getStandardDeviation());\n+                        } else {\n+                            return stats.getMean(); // only one obs in bin\n+                        }\n+                    }\n+                }\n+            }\n         }\n         throw new MathIllegalStateException(LocalizedFormats.NO_BIN_SELECTED);\n     }\n      * @since 3.0\n      */\n     public void reSeed(long seed) {\n-        randomData.reSeed(seed);\n+        if (useRandomDataImpl) {\n+            // XXX backward compatibility.\n+            randomData.reSeed(seed);\n+        } else {\n+            randomDataGen.reSeed(seed);\n+        }\n     }\n \n     // Distribution methods ---------------------------\n      */\n     @Override\n     public void reseedRandomGenerator(long seed) {\n-        randomData.reSeed(seed);\n+        reSeed(seed);\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java\n     public void setUp() {\n         super.setUp();\n         empiricalDistribution = new EmpiricalDistribution(100);\n+//         empiricalDistribution = new EmpiricalDistribution(100, new RandomDataImpl()); // XXX Deprecated API\n         url = getClass().getResource(\"testData.txt\");\n         final ArrayList<Double> list = new ArrayList<Double>();\n         try {\n             empiricalDistribution2 = new EmpiricalDistribution(100);\n+//             empiricalDistribution2 = new EmpiricalDistribution(100, new RandomDataImpl()); // XXX Deprecated API\n             BufferedReader in =\n                 new BufferedReader(new InputStreamReader(\n                         url.openStream()));", "timestamp": 1355497076, "metainfo": ""}