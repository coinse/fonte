{"sha": "8cbbb20da0291b5c073eba9e206d758df6692430", "log": "Added incrementAll(double[]) methods.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java\n  *\n  * Abstract Implementation for the {@link StorelessUnivariateStatistic} interface.\n  * <p>\n- * Provides a default <code>evaluate()</code> implementation.\n+ * Provides default <code>evaluate()</code> and <code>incrementAll(double[])<code>\n+ * implementations. \n+ * <p>\n+ * <strong>Note that these implementations are not synchronized.</strong>\n  *\n- * @version $Revision: 1.17 $ $Date: 2004/06/23 16:26:16 $\n+ * @version $Revision: 1.18 $ $Date: 2004/07/04 22:03:03 $\n  */\n public abstract class AbstractStorelessUnivariateStatistic\n     extends AbstractUnivariateStatistic\n     static final long serialVersionUID = -44915725420072521L;\n     \n     /**\n-     * This default implementation just calls {@link #increment} in a loop over the input array and \n-     * then {@link #getResult} to compute the return value.  \n+     * This default implementation calls {@link #clear}, then invokes \n+     * {@link #increment} in a loop over the the input array, and then uses \n+     * {@link #getResult} to compute the return value.  \n      * <p>\n-     * Most implementations will override this method with a more efficient implementation that works\n-     * directly with the input array.\n+     * Note that this implementation changes the internal state of the\n+     * statistic.  Its side effects are the same as invoking {@link #clear} and\n+     * then {@link #incrementAll(double[])}.\n+     * <p>\n+     * Implementations may override this method with a more efficient \n+     * implementation that works directly with the input array.\n+     * <p>\n+     * If the array is null, an IllegalArgumentException is thrown.\n+     * \n+     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[])\n+     */\n+    public double evaluate(final double[] values) {\n+        if (values == null) {\n+            throw new IllegalArgumentException(\"input value array is null\");\n+        }\n+        return evaluate(values, 0, values.length);\n+    }\n+    \n+    /**\n+     * This default implementation calls {@link #clear}, then invokes \n+     * {@link #increment} in a loop over the specified portion of the input \n+     * array, and then uses {@link #getResult} to compute the return value.  \n+     * <p>\n+     * Note that this implementation changes the internal state of the\n+     * statistic.  Its side effects are the same as invoking {@link #clear} and\n+     * then {@link #incrementAll(double[], int, int)}.\n+     * <p>\n+     * Implementations may override this method with a more efficient \n+     * implementation that works directly with the input array.\n+     * <p>\n+     * If the array is null or the index parameters are not valid, an \n+     * IllegalArgumentException is thrown.\n      * \n      * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n      */\n     public double evaluate(final double[] values, final int begin, final int length) {\n-        if (this.test(values, begin, length)) {\n-            this.clear();\n-            int l = begin + length;\n-            for (int i = begin; i < l; i++) {\n-                increment(values[i]);\n-            }\n+        if (test(values, begin, length)) {\n+            clear();\n+            incrementAll(values, begin, length);\n         }\n         return getResult();\n     }\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n      */\n     public abstract void increment(final double d);\n+    \n+    /**\n+     * This default implementation just calls {@link #increment} in a loop over\n+     * the input array.   \n+     * <p>\n+     * Throws IllegalArgumentException if the input values array is null.\n+     * \n+     * @param values values to add\n+     * @throws IllegalArgumentException if values is null\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#incrementAll(double[])\n+     */\n+    public void incrementAll(double[] values) {\n+        if (values == null) {\n+            throw new IllegalArgumentException(\"input values array is null\");\n+        }\n+        incrementAll(values, 0, values.length);\n+    } \n+   \n+    /**\n+     * This default implementation just calls {@link #increment} in a loop over\n+     * the specified portion of the input array.\n+     * <p>\n+     * Throws IllegalArgumentException if the input values array is null.\n+     * \n+     * @param values  array holding values to add\n+     * @param begin   index of the first array element to add\n+     * @param length  number of array elements to add\n+     * @throws IllegalArgumentException if values is null\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#incrementAll(double[], int, int)\n+     */\n+    public void incrementAll(double[] values, int begin, int length) {\n+        if (test(values, begin, length)) {\n+            int k = begin + length;\n+            for (int i = begin; i < k; i++) {\n+                increment(values[i]);\n+            }   \n+        }\n+    }\n     \n     /**\n      * Returns true iff <code>object</code> is an \n--- a/src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java\n package org.apache.commons.math.stat.univariate;\n \n /**\n- * Extends the definition of {@link UnivariateStatistic} with an {@link #increment}\n- * method for adding values and updating internal state incrementally.  \n+ * Extends the definition of {@link UnivariateStatistic} with \n+ * {@link #increment} and {@link #incrementAll(double[])} methods for adding\n+ * values and updating internal state.  \n  * <p>\n  * This interface is designed to be used for calculating statistics that can be computed in \n  * one pass through the data without storing the full array of sample values.\n  *\n- * @version $Revision: 1.16 $ $Date: 2004/06/23 16:26:16 $\n+ * @version $Revision: 1.17 $ $Date: 2004/07/04 22:03:03 $\n  */\n public interface StorelessUnivariateStatistic extends UnivariateStatistic {\n \n      * @param d  the new value.\n      */\n     void increment(double d);\n+    \n+    /**\n+     * Updates the internal state of the statistic to reflect addition of\n+     * all values in the values array.  Does not clear the statistic first --\n+     * i.e., the values are added <strong>incrementally</stong> to the dataset.\n+     * \n+     * @param values  array holding the new values to add\n+     * @throws IllegalArgumentException if the array is null\n+     */\n+    void incrementAll(double[] values);\n+    \n+    /**\n+     * Updates the internal state of the statistic to reflect addition of\n+     * the values in the designated portion of the values array.  Does not\n+     * clear the statistic first -- i.e., the values are added \n+     * <strong>incrementally</stong> to the dataset.\n+     * \n+     * @param values  array holding the new values to add\n+     * @param start  the array index of the first value to add\n+     * @param length  the number of elements to add\n+     * @throws IllegalArgumentException if the array is null or the index\n+     */\n+    void incrementAll(double[] values, int start, int length);\n \n     /**\n      * Returns the current value of the Statistic.", "timestamp": 1088978583, "metainfo": ""}