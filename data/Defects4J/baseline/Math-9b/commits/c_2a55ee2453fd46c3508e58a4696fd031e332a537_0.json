{"sha": "2a55ee2453fd46c3508e58a4696fd031e332a537", "log": "code style adaptations for SchurTransformer  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/SchurTransformer.java\n+++ b/src/main/java/org/apache/commons/math3/linear/SchurTransformer.java\n                 iteration = 0;\n             } else if (l == idx - 1) {\n                 // Two roots found\n-                shift.w = matrixT[idx][idx-1] * matrixT[idx-1][idx];\n-                double p = (matrixT[idx-1][idx-1] - matrixT[idx][idx]) / 2.0;\n+                shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];\n+                double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0;\n                 double q = p * p + shift.w;\n                 double z = FastMath.sqrt(FastMath.abs(q));\n                 matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;\n-                matrixT[idx-1][idx-1] = matrixT[idx-1][idx-1] + shift.exShift;\n+                matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift;\n                 shift.x = matrixT[idx][idx];\n \n                 if (q >= 0) {\n                     } else {\n                         z = p - z;\n                     }\n-                    shift.x = matrixT[idx][idx-1];\n+                    shift.x = matrixT[idx][idx - 1];\n                     double s = FastMath.abs(shift.x) + FastMath.abs(z);\n                     p = shift.x / s;\n                     q = z / s;\n                     q = q / r;\n \n                     // Row modification\n-                    for (int j = idx-1; j < n; j++) {\n-                        z = matrixT[idx-1][j];\n-                        matrixT[idx-1][j] = q * z + p * matrixT[idx][j];\n+                    for (int j = idx - 1; j < n; j++) {\n+                        z = matrixT[idx - 1][j];\n+                        matrixT[idx - 1][j] = q * z + p * matrixT[idx][j];\n                         matrixT[idx][j] = q * matrixT[idx][j] - p * z;\n                     }\n \n                     // Column modification\n                     for (int i = 0; i <= idx; i++) {\n-                        z = matrixT[i][idx-1];\n-                        matrixT[i][idx-1] = q * z + p * matrixT[i][idx];\n+                        z = matrixT[i][idx - 1];\n+                        matrixT[i][idx - 1] = q * z + p * matrixT[i][idx];\n                         matrixT[i][idx] = q * matrixT[i][idx] - p * z;\n                     }\n \n                     // Accumulate transformations\n                     for (int i = 0; i <= n - 1; i++) {\n-                        z = matrixP[i][idx-1];\n-                        matrixP[i][idx-1] = q * z + p * matrixP[i][idx];\n+                        z = matrixP[i][idx - 1];\n+                        matrixP[i][idx - 1] = q * z + p * matrixP[i][idx];\n                         matrixP[i][idx] = q * matrixP[i][idx] - p * z;\n                     }\n                 }\n      * Contains variable names as present in the original JAMA code.\n      */\n     private static class ShiftInfo {\n-        /** TODO: document */\n+        /** TODO: describe */\n         double x;\n-        /** TODO: document */\n+        /** TODO: describe */\n         double y;\n-        /** TODO: document */\n+        /** TODO: describe */\n         double w;\n         /** Indicates an exceptional shift. */\n         double exShift;", "timestamp": 1336322582, "metainfo": ""}