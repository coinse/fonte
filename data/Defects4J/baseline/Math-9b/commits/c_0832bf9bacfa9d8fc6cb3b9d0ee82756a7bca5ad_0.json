{"sha": "0832bf9bacfa9d8fc6cb3b9d0ee82756a7bca5ad", "log": "fixed serialization problems  ", "commit": "\n--- a/src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java\n \n package org.apache.commons.math.optimization.linear;\n \n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n import java.io.Serializable;\n \n+import org.apache.commons.math.linear.MatrixUtils;\n import org.apache.commons.math.linear.RealVector;\n import org.apache.commons.math.linear.RealVectorImpl;\n \n     private static final long serialVersionUID = -764632794033034092L;\n \n     /** Coefficients of the constraint (left hand side). */\n-    private final RealVector coefficients;\n+    private final transient RealVector coefficients;\n \n     /** Relationship between left and right hand sides (=, &lt;=, >=). */\n     private final Relationship relationship;\n         return value;\n     }\n \n+    /** {@inheritDoc} */\n+    @Override\n+    public boolean equals(Object other) {\n+\n+      if (this == other) { \n+        return true;\n+      }\n+\n+      if (other == null) {\n+        return false;\n+      }\n+\n+      try {\n+\n+          LinearConstraint rhs = (LinearConstraint) other;\n+          return (relationship == rhs.relationship) &&\n+                 (value        == rhs.value) &&\n+                 coefficients.equals(rhs.coefficients);\n+\n+      } catch (ClassCastException ex) {\n+          // ignore exception\n+          return false;\n+      }\n+\n+    }\n+    \n+    /** {@inheritDoc} */\n+    @Override\n+    public int hashCode() {\n+        return relationship.hashCode() ^\n+               Double.valueOf(value).hashCode() ^\n+               coefficients.hashCode();\n+    }\n+\n+    /** Serialize the instance.\n+     * @param oos stream where object should be written\n+     * @throws IOException if object cannot be written to stream\n+     */\n+    private void writeObject(ObjectOutputStream oos)\n+        throws IOException {\n+        oos.defaultWriteObject();\n+        MatrixUtils.serializeRealVector(coefficients, oos);\n+    }\n+\n+    /** Deserialize the instance.\n+     * @param ois stream from which the object should be read\n+     * @throws ClassNotFoundException if a class in the stream cannot be found\n+     * @throws IOException if object cannot be read from the stream\n+     */\n+    private void readObject(ObjectInputStream ois)\n+      throws ClassNotFoundException, IOException {\n+        ois.defaultReadObject();\n+        MatrixUtils.deserializeRealVector(this, \"coefficients\", ois);\n+    }\n+\n }\n--- a/src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java\n \n package org.apache.commons.math.optimization.linear;\n \n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n import java.io.Serializable;\n \n+import org.apache.commons.math.linear.MatrixUtils;\n import org.apache.commons.math.linear.RealVector;\n import org.apache.commons.math.linear.RealVectorImpl;\n \n     private static final long serialVersionUID = -4531815507568396090L;\n \n     /** Coefficients of the constraint (c<sub>i</sub>). */\n-    private final RealVector coefficients;\n+    private final transient RealVector coefficients;\n \n     /** Constant term of the linear equation. */\n     private final double constantTerm;\n         return coefficients.dotProduct(point) + constantTerm;\n     }\n \n+    /** {@inheritDoc} */\n+    @Override\n+    public boolean equals(Object other) {\n+\n+      if (this == other) { \n+        return true;\n+      }\n+\n+      if (other == null) {\n+        return false;\n+      }\n+\n+      try {\n+\n+          LinearObjectiveFunction rhs = (LinearObjectiveFunction) other;\n+          return (constantTerm == rhs.constantTerm) && coefficients.equals(rhs.coefficients);\n+\n+      } catch (ClassCastException ex) {\n+          // ignore exception\n+          return false;\n+      }\n+\n+    }\n+    \n+    /** {@inheritDoc} */\n+    @Override\n+    public int hashCode() {\n+        return Double.valueOf(constantTerm).hashCode() ^ coefficients.hashCode();\n+    }\n+\n+    /** Serialize the instance.\n+     * @param oos stream where object should be written\n+     * @throws IOException if object cannot be written to stream\n+     */\n+    private void writeObject(ObjectOutputStream oos)\n+        throws IOException {\n+        oos.defaultWriteObject();\n+        MatrixUtils.serializeRealVector(coefficients, oos);\n+    }\n+\n+    /** Deserialize the instance.\n+     * @param ois stream from which the object should be read\n+     * @throws ClassNotFoundException if a class in the stream cannot be found\n+     * @throws IOException if object cannot be read from the stream\n+     */\n+    private void readObject(ObjectInputStream ois)\n+      throws ClassNotFoundException, IOException {\n+        ois.defaultReadObject();\n+        MatrixUtils.deserializeRealVector(this, \"coefficients\", ois);\n+    }\n+\n }\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n \n package org.apache.commons.math.optimization.linear;\n \n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n \n+import org.apache.commons.math.linear.MatrixUtils;\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.linear.RealMatrixImpl;\n import org.apache.commons.math.linear.RealVector;\n     private final boolean restrictToNonNegative;\n \n     /** Simple tableau. */\n-    protected RealMatrix tableau;\n+    protected transient RealMatrix tableau;\n \n     /** Number of decision variables. */\n     protected final int numDecisionVariables;\n         return tableau.getData();\n     }\n \n+    /** {@inheritDoc} */\n+    @Override\n+    public boolean equals(Object other) {\n+\n+      if (this == other) { \n+        return true;\n+      }\n+\n+      if (other == null) {\n+        return false;\n+      }\n+\n+      try {\n+\n+          SimplexTableau rhs = (SimplexTableau) other;\n+          return (restrictToNonNegative  == rhs.restrictToNonNegative) &&\n+                 (numDecisionVariables   == rhs.numDecisionVariables) &&\n+                 (numSlackVariables      == rhs.numSlackVariables) &&\n+                 (numArtificialVariables == rhs.numArtificialVariables) &&\n+                 (epsilon                == rhs.epsilon) &&\n+                 f.equals(rhs.f) &&\n+                 constraints.equals(rhs.constraints) &&\n+                 tableau.equals(rhs.tableau);\n+\n+      } catch (ClassCastException ex) {\n+          // ignore exception\n+          return false;\n+      }\n+\n+    }\n+    \n+    /** {@inheritDoc} */\n+    @Override\n+    public int hashCode() {\n+        return Boolean.valueOf(restrictToNonNegative).hashCode() ^\n+               numDecisionVariables ^\n+               numSlackVariables ^\n+               numArtificialVariables ^\n+               Double.valueOf(epsilon).hashCode() ^\n+               f.hashCode() ^\n+               constraints.hashCode() ^\n+               tableau.hashCode();\n+    }\n+\n+    /** Serialize the instance.\n+     * @param oos stream where object should be written\n+     * @throws IOException if object cannot be written to stream\n+     */\n+    private void writeObject(ObjectOutputStream oos)\n+        throws IOException {\n+        oos.defaultWriteObject();\n+        MatrixUtils.serializeRealMatrix(tableau, oos);\n+    }\n+\n+    /** Deserialize the instance.\n+     * @param ois stream from which the object should be read\n+     * @throws ClassNotFoundException if a class in the stream cannot be found\n+     * @throws IOException if object cannot be read from the stream\n+     */\n+    private void readObject(ObjectInputStream ois)\n+      throws ClassNotFoundException, IOException {\n+        ois.defaultReadObject();\n+        MatrixUtils.deserializeRealMatrix(this, \"tableau\", ois);\n+    }\n }", "timestamp": 1243933586, "metainfo": ""}