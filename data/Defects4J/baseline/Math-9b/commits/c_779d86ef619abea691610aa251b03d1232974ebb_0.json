{"sha": "779d86ef619abea691610aa251b03d1232974ebb", "log": "improved consistency between Vector3D and RealMatrix API (multiply -> scalarMultiply) improved javadoc  ", "commit": "\n--- a/src/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/java/org/apache/commons/math/geometry/Vector3D.java\n     return new Vector3D(x - factor * v.x, y - factor * v.y, z - factor * v.z);\n   }\n \n-  /** Normalize the instance.\n+  /** Get a normalized vector aligned with the instance.\n    * @return a new normalized vector\n-   * @exception ArithmeticException if the norm is null\n+   * @exception ArithmeticException if the norm is zero\n    */\n   public Vector3D normalize() {\n     double s = getNorm();\n     if (s == 0) {\n-      throw new ArithmeticException(\"null norm\");\n-    }\n-    return multiply(1 / s);\n+      throw new ArithmeticException(\"cannot normalize a zero norm vector\");\n+    }\n+    return scalarMultiply(1 / s);\n   }\n \n   /** Get a vector orthogonal to the instance.\n    * @param a scalar\n    * @return a new vector\n    */\n-  public Vector3D multiply(double a) {\n+  public Vector3D scalarMultiply(double a) {\n     return new Vector3D(a * x, a * y, a * z);\n   }\n \n   private final double z;\n \n   /** Serializable version identifier */\n-  private static final long serialVersionUID = 7318440192750283659L;\n+  private static final long serialVersionUID = -5721105387745193385L;\n+\n \n }\n--- a/src/test/org/apache/commons/math/geometry/RotationTest.java\n+++ b/src/test/org/apache/commons/math/geometry/RotationTest.java\n     Vector3D u = new Vector3D(3, 2, 1);\n     Vector3D v = new Vector3D(-4, 2, 2);\n     Rotation r = new Rotation(u, v);\n-    checkVector(r.applyTo(u.multiply(v.getNorm())), v.multiply(u.getNorm()));\n+    checkVector(r.applyTo(u.scalarMultiply(v.getNorm())), v.scalarMultiply(u.getNorm()));\n \n     checkAngle(new Rotation(u, u.negate()).getAngle(), Math.PI);\n \n--- a/src/test/org/apache/commons/math/geometry/Vector3DTest.java\n+++ b/src/test/org/apache/commons/math/geometry/Vector3DTest.java\n \n   public void testScalarProduct() {\n     Vector3D v = new Vector3D(1, 2, 3);\n-    v = v.multiply(3);\n+    v = v.scalarMultiply(3);\n     checkVector(v, 3, 6, 9);\n \n-    checkVector(v.multiply(0.5), 1.5, 3, 4.5);\n+    checkVector(v.scalarMultiply(0.5), 1.5, 3, 4.5);\n \n   }\n \n \n     Vector3D  k = v1.normalize();\n     Vector3D  i = k.orthogonal();\n-    Vector3D v2 = k.multiply(Math.cos(1.2)).add(i.multiply(Math.sin(1.2)));\n+    Vector3D v2 = k.scalarMultiply(Math.cos(1.2)).add(i.scalarMultiply(Math.sin(1.2)));\n \n     assertTrue(Math.abs(Vector3D.angle(v1, v2) - 1.2) < 1.0e-12);\n ", "timestamp": 1203071090, "metainfo": ""}