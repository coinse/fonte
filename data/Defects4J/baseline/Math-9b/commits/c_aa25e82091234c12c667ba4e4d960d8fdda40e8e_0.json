{"sha": "aa25e82091234c12c667ba4e4d960d8fdda40e8e", "log": "added tests for asin and acos JIRA: MATH-375  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/util/FastMathTest.java\n+++ b/src/test/java/org/apache/commons/math/util/FastMathTest.java\n     }\n \n     @Test\n+    public void testAsinAccuracy() {\n+        double maxerrulp = 0.0;\n+\n+        for (int i=0; i<10000; i++) {\n+            double x = ((generator.nextDouble() * 2.0) - 1.0) * generator.nextDouble(); \n+\n+            double tst = FastMath.asin(x);\n+            double ref = DfpMath.asin(field.newDfp(x)).toDouble();\n+            double err = (tst - ref) / ref;\n+\n+            if (err != 0) {\n+                double ulp = Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref) ^ 1)));\n+                double errulp = field.newDfp(tst).subtract(DfpMath.asin(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();\n+                //System.out.println(x+\"\\t\"+tst+\"\\t\"+ref+\"\\t\"+err+\"\\t\"+errulp);\n+\n+                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n+            }\n+        }\n+\n+        Assert.assertTrue(\"asin() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n+    }\n+\n+    @Test\n+    public void testAcosAccuracy() {\n+        double maxerrulp = 0.0;\n+\n+        for (int i=0; i<10000; i++) {\n+            double x = ((generator.nextDouble() * 2.0) - 1.0) * generator.nextDouble(); \n+\n+            double tst = FastMath.acos(x);\n+            double ref = DfpMath.acos(field.newDfp(x)).toDouble();\n+            double err = (tst - ref) / ref;\n+\n+            if (err != 0) {\n+                double ulp = Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref) ^ 1)));\n+                double errulp = field.newDfp(tst).subtract(DfpMath.acos(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();\n+                //System.out.println(x+\"\\t\"+tst+\"\\t\"+ref+\"\\t\"+err+\"\\t\"+errulp);\n+\n+                maxerrulp = Math.max(maxerrulp, Math.abs(errulp));\n+            }\n+        }\n+\n+        Assert.assertTrue(\"acos() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n+    }\n+\n+    @Test\n     public void testToDegrees() {\n         double maxerrulp = 0.0;\n         for (int i = 0; i < NUMBER_OF_TRIALS; i++) {\n             x = 0;\n             time = System.currentTimeMillis();\n             for (int i = 0; i < numberOfRuns; i++)\n+                x += StrictMath.asin(i / 10000000.0);\n+            time = System.currentTimeMillis() - time;\n+            System.out.print(\"StrictMath.asin \" + time + \"\\t\" + x + \"\\t\");\n+\n+            x = 0;\n+            time = System.currentTimeMillis();\n+            for (int i = 0; i < numberOfRuns; i++)\n+                x += FastMath.asin(i / 10000000.0);\n+            time = System.currentTimeMillis() - time;\n+            System.out.println(\"FastMath.asin \" + time + \"\\t\" + x);\n+\n+            x = 0;\n+            time = System.currentTimeMillis();\n+            for (int i = 0; i < numberOfRuns; i++)\n                 x += StrictMath.cos(i / 1000000.0);\n             time = System.currentTimeMillis() - time;\n             System.out.print(\"StrictMath.cos \" + time + \"\\t\" + x + \"\\t\");\n             x = 0;\n             time = System.currentTimeMillis();\n             for (int i = 0; i < numberOfRuns; i++)\n+                x += StrictMath.acos(i / 10000000.0);\n+            time = System.currentTimeMillis() - time;\n+            System.out.print(\"StrictMath.acos \" + time + \"\\t\" + x + \"\\t\");\n+\n+            x = 0;\n+            time = System.currentTimeMillis();\n+            for (int i = 0; i < numberOfRuns; i++)\n+                x += FastMath.acos(i / 10000000.0);\n+            time = System.currentTimeMillis() - time;\n+            System.out.println(\"FastMath.acos \" + time + \"\\t\" + x);\n+\n+            x = 0;\n+            time = System.currentTimeMillis();\n+            for (int i = 0; i < numberOfRuns; i++)\n                 x += StrictMath.tan(i / 1000000.0);\n             time = System.currentTimeMillis() - time;\n             System.out.print(\"StrictMath.tan \" + time + \"\\t\" + x + \"\\t\");\n             x = 0;\n             time = System.currentTimeMillis();\n             for (int i = 0; i < numberOfRuns; i++)\n+                x += FastMath.cbrt(i / 1000000.0);\n+            time = System.currentTimeMillis() - time;\n+            System.out.println(\"FastMath.cbrt \" + time + \"\\t\" + x);\n+\n+           x = 0;\n+            time = System.currentTimeMillis();\n+            for (int i = 0; i < numberOfRuns; i++)\n                 x += StrictMath.expm1(-i / 100000.0);\n             time = System.currentTimeMillis() - time;\n             System.out.print(\"StrictMath.expm1 \" + time + \"\\t\" + x + \"\\t\");", "timestamp": 1284223368, "metainfo": ""}