{"sha": "947dbf7122ee3d63278a9d63ec071c6b3cfba3be", "log": "[MATH-893] Add new NaNStrategy FAILED, thanks to Patrick Meyer.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/stat/ranking/NaNStrategy.java\n+++ b/src/main/java/org/apache/commons/math3/stat/ranking/NaNStrategy.java\n  * <li>FIXED - NaNs are left \"in place,\" that is the rank transformation is\n  * applied to the other elements in the input array, but the NaN elements\n  * are returned unchanged.</li>\n+ * <li>FAILED - If any NaN is encountered in the input array, an appropriate\n+ * exception is thrown</li>\n  * </ul>\n  *\n  * @since 2.0\n     REMOVED,\n \n     /** NaNs are left in place */\n-    FIXED\n+    FIXED,\n+\n+    /** NaNs result in an exception */\n+    FAILED\n }\n--- a/src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java\n+++ b/src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java\n import java.util.List;\n \n import org.apache.commons.math3.exception.MathInternalError;\n+import org.apache.commons.math3.exception.NotANumberException;\n import org.apache.commons.math3.random.RandomData;\n import org.apache.commons.math3.random.RandomDataImpl;\n import org.apache.commons.math3.random.RandomGenerator;\n      *\n      * @param data array to be ranked\n      * @return array of ranks\n+     * @throws NotANumberException if the selected {@link NaNStrategy} is {@code FAILED}\n+     * and a {@link Double#NaN} is encountered in the input data\n      */\n     public double[] rank(double[] data) {\n \n                 break;\n             case FIXED:   // Record positions of NaNs\n                 nanPositions = getNanPositions(ranks);\n+                break;\n+            case FAILED:\n+                nanPositions = getNanPositions(ranks);\n+                if (nanPositions.size() > 0) {\n+                    throw new NotANumberException();\n+                }\n                 break;\n             default: // this should not happen unless NaNStrategy enum is changed\n                 throw new MathInternalError();\n--- a/src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java\n package org.apache.commons.math3.stat.ranking;\n \n import org.apache.commons.math3.TestUtils;\n+import org.apache.commons.math3.exception.NotANumberException;\n import org.apache.commons.math3.random.JDKRandomGenerator;\n import org.apache.commons.math3.random.RandomGenerator;\n import org.junit.Test;\n         correctRanks = new double[] { 3, 4, 1.5, 1.5 };\n         TestUtils.assertEquals(correctRanks, ranks, 0d);\n     }\n+    \n+    @Test(expected=NotANumberException.class)\n+    public void testNaNsFailed() {\n+        double[] data = { 0, Double.POSITIVE_INFINITY, Double.NaN, Double.NEGATIVE_INFINITY };\n+        NaturalRanking ranking = new NaturalRanking(NaNStrategy.FAILED);\n+        ranking.rank(data);\n+    }\n+    \n+    @Test\n+    public void testNoNaNsFailed() {\n+        double[] data = { 1, 2, 3, 4 };\n+        NaturalRanking ranking = new NaturalRanking(NaNStrategy.FAILED);\n+        double[] ranks = ranking.rank(data);\n+        TestUtils.assertEquals(data, ranks, 0d);\n+    }\n+    \n }", "timestamp": 1352567691, "metainfo": ""}