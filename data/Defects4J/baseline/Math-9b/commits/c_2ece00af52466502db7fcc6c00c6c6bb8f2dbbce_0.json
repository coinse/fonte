{"sha": "2ece00af52466502db7fcc6c00c6c6bb8f2dbbce", "log": "remove eclipse generated equals since it doesn't work.  Will add a working equals later  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/SparseRealVector.java\n+++ b/src/java/org/apache/commons/math/linear/SparseRealVector.java\n         return getData();\n     }\n \n-    /* (non-Javadoc)\n-     * @see java.lang.Object#hashCode()\n-     */\n-    @Override\n-    public int hashCode() {\n-        final int prime = 31;\n-        int result = 1;\n-        result = prime * result + ((entries == null) ? 0 : entries.hashCode());\n-        long temp;\n-        temp = Double.doubleToLongBits(epsilon);\n-        result = prime * result + (int) (temp ^ (temp >>> 32));\n-        result = prime * result + virtualSize;\n-        return result;\n-    }\n-\n-    /* (non-Javadoc)\n-     * @see java.lang.Object#equals(java.lang.Object)\n-     */\n-    @Override\n-    public boolean equals(Object obj) {\n-        if (this == obj)\n-            return true;\n-        if (obj == null)\n-            return false;\n-        if (!(obj instanceof SparseRealVector))\n-            return false;\n-        SparseRealVector other = (SparseRealVector) obj;\n-        if (entries == null) {\n-            if (other.entries != null)\n-                return false;\n-        } else if (!entries.equals(other.entries)){\n-            return false;\n-        }if (Double.doubleToLongBits(epsilon) != Double\n-                .doubleToLongBits(other.epsilon))\n-            return false;\n-        if (virtualSize != other.virtualSize)\n-            return false;\n-        return true;\n-    }\n }\n--- a/src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java\n+++ b/src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java\n         count = 0;\n     }\n \n-    /* (non-Javadoc)\n-     * @see java.lang.Object#hashCode()\n-     */\n-    @Override\n-    public int hashCode() {\n-        final int prime = 31;\n-        int result = 1;\n-        result = prime * result + Arrays.hashCode(keys);\n-        long temp;\n-        temp = Double.doubleToLongBits(missingEntries);\n-        result = prime * result + (int) (temp ^ (temp >>> 32));\n-        result = prime * result + size;\n-        result = prime * result + Arrays.hashCode(states);\n-        result = prime * result + Arrays.hashCode(values);\n-        return result;\n-    }\n-\n-    /* (non-Javadoc)\n-     * @see java.lang.Object#equals(java.lang.Object)\n-     */\n-    @Override\n-    public boolean equals(Object obj) {\n-        if (this == obj)\n-            return true;\n-        if (obj == null)\n-            return false;\n-        if (getClass() != obj.getClass())\n-            return false;\n-        OpenIntToDoubleHashMap other = (OpenIntToDoubleHashMap) obj;\n-        if (!Arrays.equals(keys, other.keys))\n-            return false;\n-        if (Double.doubleToLongBits(missingEntries) != Double\n-                .doubleToLongBits(other.missingEntries))\n-            return false;\n-        if (size != other.size)\n-            return false;\n-        if (!Arrays.equals(states, other.states)){\n-            return false;\n-        }\n-        if (!Arrays.equals(values, other.values)){\n-            return false;\n-        }\n-        return true;\n-    }\n-\n+    \n }\n--- a/src/test/org/apache/commons/math/linear/SparseRealVectorTest.java\n+++ b/src/test/org/apache/commons/math/linear/SparseRealVectorTest.java\n         v.setEntry(1, 1);\n         assertTrue(v.isInfinite());\n \n+        //TODO: backing store doesn't implement equals\n         //TODO: differeciate from resetting to zero\n         //v.setEntry(0, 0);\n         //assertEquals(v, new SparseRealVector(new double[] { 0, 1, 2 }));\n-        assertNotSame(v, new SparseRealVector(new double[] { 0, 1, 2 + Math.ulp(2)}));\n-        assertNotSame(v, new SparseRealVector(new double[] { 0, 1, 2, 3 }));\n+        //assertNotSame(v, new SparseRealVector(new double[] { 0, 1, 2 + Math.ulp(2)}));\n+        //assertNotSame(v, new SparseRealVector(new double[] { 0, 1, 2, 3 }));\n \n         //assertEquals(new SparseRealVector(new double[] { Double.NaN, 1, 2 }).hashCode(),\n         //              new SparseRealVector(new double[] { 0, Double.NaN, 2 }).hashCode());", "timestamp": 1234234958, "metainfo": ""}