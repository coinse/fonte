{"sha": "034b1d68bd181fe876ae2106c428a80ee274a59d", "log": "preparing test to work with multistep integrators  ", "commit": "\n--- a/src/test/org/apache/commons/math/ode/nonstiff/TestProblemHandler.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/TestProblemHandler.java\n     maxValueError = 0;\n     maxTimeError  = 0;\n     lastError     = 0;\n-    expectedStepStart = problem.getInitialTime();\n+    expectedStepStart = Double.NaN;\n   }\n \n   public void handleStep(StepInterpolator interpolator,\n     throws DerivativeException {\n \n     double start = integrator.getCurrentStepStart();\n-    maxTimeError = Math.max(maxTimeError, Math.abs(start - expectedStepStart));\n-    expectedStepStart = start + integrator.getCurrentSignedStepsize();\n+    if (Math.abs((start - problem.getInitialTime()) / integrator.getCurrentSignedStepsize()) > 0.001) {\n+        // multistep integrators do not handle the first steps themselves\n+        // so we have to make sure the integrator we look at has really started its work\n+        if (!Double.isNaN(expectedStepStart)) {\n+            maxTimeError = Math.max(maxTimeError, Math.abs(start - expectedStepStart));\n+        }\n+        expectedStepStart = start + integrator.getCurrentSignedStepsize();\n+    }\n \n     double pT = interpolator.getPreviousTime();\n     double cT = interpolator.getCurrentTime();", "timestamp": 1216048571, "metainfo": ""}