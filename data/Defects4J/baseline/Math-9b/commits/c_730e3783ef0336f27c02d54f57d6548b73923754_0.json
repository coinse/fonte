{"sha": "730e3783ef0336f27c02d54f57d6548b73923754", "log": "Improved performance of nextInt(int) in BitsStreamGenerator. JIRA: MATH-642  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java\n+++ b/src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java\n         return next(32);\n     }\n \n-    /** {@inheritDoc} */\n+    /**\n+     * {@inheritDoc}\n+     * <p>This default implementation is copied from Apache Harmony\n+     * java.util.Random (r929253).</p>\n+     *\n+     * <p>Implementation notes: <ul>\n+     * <li>If n is a power of 2, this method returns\n+     * {@code (int) ((n * (long) next(31)) >> 31)}.</li>\n+     *\n+     * <li>If n is not a power of 2, what is returned is {@code next(31) % n}\n+     * with {@code next(31)} values rejected (i.e. regenerated) until a\n+     * value that is larger than the remainder of {@code Integer.MAX_VALUE / n}\n+     * is generated. Rejection of this initial segment is necessary to ensure\n+     * a uniform distribution.</li></ul></p>\n+     */\n     public int nextInt(int n) throws IllegalArgumentException {\n-\n-        if (n < 1) {\n-            throw new NotStrictlyPositiveException(n);\n+        if (n > 0) {\n+            if ((n & -n) == n) {\n+                return (int) ((n * (long) next(31)) >> 31);\n+            }\n+            int bits;\n+            int val;\n+            do {\n+                bits = next(31);\n+                val = bits % n;\n+            } while (bits - val + (n - 1) < 0);\n+            return val;\n         }\n-\n-        // find bit mask for n\n-        int mask = n;\n-        mask |= mask >> 1;\n-        mask |= mask >> 2;\n-        mask |= mask >> 4;\n-        mask |= mask >> 8;\n-        mask |= mask >> 16;\n-\n-        while (true) {\n-            final int random = next(32) & mask;\n-            if (random < n) {\n-                return random;\n-            }\n-        }\n-\n+        throw new NotStrictlyPositiveException(n);\n     }\n \n     /** {@inheritDoc} */\n--- a/src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java\n  */\n package org.apache.commons.math.random;\n \n+import java.util.Arrays;\n+\n import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.stat.Frequency;\n import org.apache.commons.math.stat.descriptive.SummaryStatistics;\n     public void testNextSecureHex() {}\n \n     @Test\n-    public void testNextIntDirect() {\n+    /**\n+     * Tests uniformity of nextInt(int) distribution by generating 1000\n+     * samples for each of 10 test values and for each sample performing\n+     * a chi-square test of homogeneity of the observed distribution with\n+     * the expected uniform distribution.  Tests are performed at the .01\n+     * level and an average failure rate higher than 2% (i.e. more than 20\n+     * null hypothesis rejections) causes the test case to fail.\n+     * \n+     * All random values are generated using the generator instance used by\n+     * other tests and the generator is not reseeded, so this is a fixed seed\n+     * test.\n+     */\n+    public void testNextIntDirect() throws Exception {\n+        // Set up test values - end of the array filled randomly\n+        int[] testValues = new int[] {4, 10, 12, 32, 100, 10000, 0, 0, 0, 0};\n+        for (int i = 6; i < 10; i++) {\n+            final int val = generator.nextInt();\n+            testValues[i] = val < 0 ? -val : val + 1;\n+        }\n+        \n+        final int numTests = 1000;\n+        for (int i = 0; i < testValues.length; i++) {\n+            final int n = testValues[i];\n+            // Set up bins\n+            int[] binUpperBounds;\n+            if (n < 32) {\n+                binUpperBounds = new int[n];\n+                for (int k = 0; k < n; k++) {\n+                    binUpperBounds[k] = k;\n+                }\n+            } else {\n+                binUpperBounds = new int[10];\n+                final int step = n / 10;\n+                for (int k = 0; k < 9; k++) {\n+                    binUpperBounds[k] = (k + 1) * step;\n+                }\n+                binUpperBounds[9] = n - 1;\n+            }  \n+            // Run the tests\n+            int numFailures = 0;\n+            final int binCount = binUpperBounds.length;\n+            final long[] observed = new long[binCount];\n+            final double[] expected = new double[binCount];\n+            expected[0] = binUpperBounds[0] == 0 ? (double) smallSampleSize / (double) n :\n+                (double) ((binUpperBounds[0] + 1) * smallSampleSize) / (double) n;\n+            for (int k = 1; k < binCount; k++) {\n+                expected[k] = (double) smallSampleSize * \n+                (double) (binUpperBounds[k] - binUpperBounds[k - 1]) / (double) n;\n+            }\n+            for (int j = 0; j < numTests; j++) {\n+                Arrays.fill(observed, 0);\n+                for (int k = 0; k < smallSampleSize; k++) {\n+                    final int value = generator.nextInt(n);\n+                    Assert.assertTrue(\"nextInt range\",(value >= 0) && (value < n));\n+                    for (int l = 0; l < binCount; l++) {\n+                        if (binUpperBounds[l] >= value) {\n+                            observed[l]++;\n+                            break;\n+                        }\n+                    }\n+                }\n+                if (testStatistic.chiSquareTest(expected, observed) < 0.01) {\n+                    numFailures++;\n+                }  \n+            }\n+            if ((double) numFailures / (double) numTests > 0.02) {\n+                Assert.fail(\"Too many failures for n = \" + n +\n+                \" \" + numFailures + \" out of \" + numTests + \" tests failed.\");\n+            }\n+        }\n+    }\n+    \n+    @Test(expected=MathIllegalArgumentException.class)\n+    public void testNextIntIAE() {\n         try {\n             generator.nextInt(-1);\n             Assert.fail(\"MathIllegalArgumentException expected\");\n         } catch (MathIllegalArgumentException ex) {\n             // ignored\n         }\n-        Frequency freq = new Frequency();\n-        int value = 0;\n-        for (int i=0; i<smallSampleSize; i++) {\n-            value = generator.nextInt(4);\n-            Assert.assertTrue(\"nextInt range\",(value >= 0) && (value <= 3));\n-            freq.addValue(value);\n-        }\n-        long[] observed = new long[4];\n-        for (int i=0; i<4; i++) {\n-            observed[i] = freq.getCount(i);\n-        }\n-\n-        /* Use ChiSquare dist with df = 4-1 = 3, alpha = .001\n-         * Change to 11.34 for alpha = .01\n-         */\n-        Assert.assertTrue(\"chi-square test -- will fail about 1 in 1000 times\",\n-                testStatistic.chiSquare(expected,observed) < 16.27);\n+        generator.nextInt(0);\n     }\n \n     @Test", "timestamp": 1312777324, "metainfo": ""}