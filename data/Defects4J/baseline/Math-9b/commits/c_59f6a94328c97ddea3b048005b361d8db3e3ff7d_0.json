{"sha": "59f6a94328c97ddea3b048005b361d8db3e3ff7d", "log": "Removed dependency on DistributionFactory.  Added settable normal distribution field.  ", "commit": "\n--- a/src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\n     /** Serializable version identifier */\n     private static final long serialVersionUID = -3349935121172596109L;\n     \n+    private NormalDistribution normal;\n+    \n     /**\n      * Holds the Poisson mean for the distribution.\n      */\n      * @throws IllegalArgumentException if p &le; 0\n      */\n     public PoissonDistributionImpl(double p) {\n+        this(p, new NormalDistributionImpl());\n+    }\n+\n+    /**\n+     * Create a new Poisson distribution with the given the mean.\n+     * The mean value must be positive; otherwise an \n+     * <code>IllegalArgument</code> is thrown.\n+     * \n+     * @param p the Poisson mean\n+     * @param z a normal distribution used to compute normal approximations.\n+     * @throws IllegalArgumentException if p &le; 0\n+     * @since 1.2\n+     */\n+    public PoissonDistributionImpl(double p, NormalDistribution z) {\n         super();\n+        setNormal(z);\n         setMean(p);\n     }\n \n                     \"The Poisson mean must be positive\");\n         }\n         this.mean = p;\n+        normal.setMean(p);\n+        normal.setStandardDeviation(Math.sqrt(p));\n     }\n \n     /**\n      * @throws MathException if an error occurs computing the normal approximation\n      */\n     public double normalApproximateProbability(int x) throws MathException {\n-        NormalDistribution normal = DistributionFactory.newInstance()\n-                .createNormalDistribution(getMean(),\n-                        Math.sqrt(getMean()));\n-\n         // calculate the probability using half-correction\n         return normal.cumulativeProbability(x + 0.5);\n     }\n         return Integer.MAX_VALUE;\n     }\n     \n+    /**\n+     * Modify the normal distribution used to compute normal approximations.\n+     * The caller is responsible for insuring the normal distribution has the\n+     * proper parameter settings.\n+     * @param value the new distribution\n+     * @since 1.2\n+     */\n+    public void setNormal(NormalDistribution value) {\n+        normal = value;\n+    }\n+    \n }", "timestamp": 1181224536, "metainfo": ""}