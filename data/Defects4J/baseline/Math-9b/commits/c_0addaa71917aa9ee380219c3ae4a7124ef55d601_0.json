{"sha": "0addaa71917aa9ee380219c3ae4a7124ef55d601", "log": "Serializable changes for FieldVector and FieldMatrix  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java\n \n package org.apache.commons.math.linear;\n \n-import java.io.Serializable;\n import java.lang.reflect.Array;\n import java.util.Arrays;\n \n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public abstract class AbstractFieldMatrix<T extends FieldElement<T>> implements FieldMatrix<T>, Serializable {\n+public abstract class AbstractFieldMatrix<T extends FieldElement<T>> implements FieldMatrix<T> {\n     \n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = -3665653040524315561L;\n-\n     /** Field to which the elements belong. */\n     private final Field<T> field;\n \n         return array;\n     }\n \n+    /**\n+     * Constructor for use with Serializable\n+     */\n+    protected AbstractFieldMatrix() {\n+        field = null;\n+    }\n+    \n     /**\n      * Creates a matrix with no data\n      * @param field field to which the elements belong\n--- a/src/java/org/apache/commons/math/linear/DenseFieldMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/DenseFieldMatrix.java\n  */\n \n package org.apache.commons.math.linear;\n+\n+import java.io.Serializable;\n \n import org.apache.commons.math.Field;\n import org.apache.commons.math.FieldElement;\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public class DenseFieldMatrix<T extends FieldElement<T>> extends AbstractFieldMatrix<T> {\n+public class DenseFieldMatrix<T extends FieldElement<T>> extends AbstractFieldMatrix<T> implements Serializable {\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -4602336630143123183L;\n--- a/src/java/org/apache/commons/math/linear/FieldMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/FieldMatrix.java\n \n package org.apache.commons.math.linear;\n \n-import java.io.Serializable;\n \n import org.apache.commons.math.Field;\n import org.apache.commons.math.FieldElement;\n  * @param <T> the type of the field elements\n  * @version $Revision$ $Date$\n  */\n-public interface FieldMatrix<T extends FieldElement<T>> extends AnyMatrix, Serializable {\n+public interface FieldMatrix<T extends FieldElement<T>> extends AnyMatrix {\n \n     /**\n      * Get the type of field elements of the matrix.\n--- a/src/java/org/apache/commons/math/linear/FieldMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/FieldMatrixImpl.java\n \n package org.apache.commons.math.linear;\n \n+import java.io.Serializable;\n+\n import org.apache.commons.math.Field;\n import org.apache.commons.math.FieldElement;\n import org.apache.commons.math.MathRuntimeException;\n  * @param <T> the type of the field elements\n  * @version $Revision$ $Date$\n  */\n-public class FieldMatrixImpl<T extends FieldElement<T>> extends AbstractFieldMatrix<T> {\n+public class FieldMatrixImpl<T extends FieldElement<T>> extends AbstractFieldMatrix<T> implements Serializable {\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = 7260756672015356458L;\n--- a/src/java/org/apache/commons/math/linear/FieldVector.java\n+++ b/src/java/org/apache/commons/math/linear/FieldVector.java\n  * limitations under the License.\n  */\n package org.apache.commons.math.linear;\n-\n-import java.io.Serializable;\n \n import org.apache.commons.math.Field;\n import org.apache.commons.math.FieldElement;\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public interface FieldVector<T extends FieldElement<T>> extends Serializable {\n+public interface FieldVector<T extends FieldElement<T>>  {\n \n     /**\n      * Get the type of field elements of the vector.\n--- a/src/java/org/apache/commons/math/linear/FieldVectorImpl.java\n+++ b/src/java/org/apache/commons/math/linear/FieldVectorImpl.java\n  */\n package org.apache.commons.math.linear;\n \n+import java.io.Serializable;\n import java.lang.reflect.Array;\n import java.util.Arrays;\n \n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public class FieldVectorImpl<T extends FieldElement<T>> implements FieldVector<T> {\n+public class FieldVectorImpl<T extends FieldElement<T>> implements FieldVector<T>, Serializable {\n \n     /** Serializable version identifier. */\n     private static final long serialVersionUID = 7648186910365927050L;\n--- a/src/java/org/apache/commons/math/linear/SparseFieldVector.java\n+++ b/src/java/org/apache/commons/math/linear/SparseFieldVector.java\n  */\n package org.apache.commons.math.linear;\n \n+import java.io.Serializable;\n import java.lang.reflect.Array;\n \n import org.apache.commons.math.Field;\n  * @version $Revision: 728186 $ $Date: 2009-04-25 12:39:38 -0700 (Sat, 25 Apr 2009) $\n  * @since 2.0\n */\n-public class SparseFieldVector<T extends FieldElement<T>> implements FieldVector<T> {\n+public class SparseFieldVector<T extends FieldElement<T>> implements FieldVector<T>, Serializable {\n     \n     /**\n      *  Serial version id\n--- a/src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java\n+++ b/src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java\n  */\n package org.apache.commons.math.linear;\n \n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n import java.util.Arrays;\n import java.util.Random;\n \n         }\n \n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSerial()  {\n+        try {\n+            File test = File.createTempFile(\"DFM\",\".ser\");\n+            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(test));\n+            DenseFieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);\n+            out.writeObject(m);\n+            out.close();\n+            ObjectInputStream in = new ObjectInputStream(new FileInputStream(test));\n+            DenseFieldMatrix<Fraction> nm = (DenseFieldMatrix<Fraction>)in.readObject();\n+            in.close();\n+            test.delete();\n+            assertEquals(m,nm);\n+            \n+        } catch (IOException e) {\n+            fail(\"IOException: \"+e);\n+        } catch (ClassNotFoundException e) {\n+            fail(\"Can't happen: \"+e);\n+        }\n+    }\n+  \n     private static class SetVisitor extends DefaultFieldMatrixChangingVisitor<Fraction> {\n         public SetVisitor() {\n             super(Fraction.ZERO);\n--- a/src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java\n  * limitations under the License.\n  */\n package org.apache.commons.math.linear;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n \n import junit.framework.Test;\n import junit.framework.TestCase;\n         }\n \n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSerial()  {\n+        try {\n+            File test = File.createTempFile(\"FMI\",\".ser\");\n+            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(test));\n+            FieldMatrixImpl<Fraction> m = new FieldMatrixImpl<Fraction>(testData);\n+            out.writeObject(m);\n+            out.close();\n+            ObjectInputStream in = new ObjectInputStream(new FileInputStream(test));\n+            FieldMatrixImpl<Fraction> nm = (FieldMatrixImpl<Fraction>)in.readObject();\n+            in.close();\n+            test.delete();\n+            assertEquals(m,nm);\n+            \n+        } catch (IOException e) {\n+            fail(\"IOException: \"+e);\n+        } catch (ClassNotFoundException e) {\n+            fail(\"Can't happen: \"+e);\n+        }\n+    }\n+  \n     private static class SetVisitor extends DefaultFieldMatrixChangingVisitor<Fraction> {\n         public SetVisitor() {\n             super(Fraction.ZERO);\n--- a/src/test/org/apache/commons/math/linear/FieldVectorImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/FieldVectorImplTest.java\n  */\n package org.apache.commons.math.linear;\n \n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n import java.io.Serializable;\n import java.lang.reflect.Array;\n \n \n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    public void testSerial()  {\n+        try {\n+            File test = File.createTempFile(\"FVI\",\".ser\");\n+            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(test));\n+            FieldVectorImpl<Fraction> v = new FieldVectorImpl<Fraction>(vec1);\n+            out.writeObject(v);\n+            out.close();\n+            ObjectInputStream in = new ObjectInputStream(new FileInputStream(test));\n+            FieldVectorImpl<Fraction> nv = (FieldVectorImpl<Fraction>)in.readObject();\n+            in.close();\n+            test.delete();\n+            assertEquals(v,nv);\n+            \n+        } catch (IOException e) {\n+            fail(\"IOException: \"+e);\n+        } catch (ClassNotFoundException e) {\n+            fail(\"Can't happen: \"+e);\n+        }\n+    }\n+  \n     /** verifies that two vectors are equals */\n     protected void checkArray(String msg, Fraction[] m, Fraction[] n) {\n         if (m.length != n.length) {", "timestamp": 1243207623, "metainfo": ""}