{"sha": "20b4a70d3637a287ec4153d7f7d085cc59fa7a80", "log": "Added test case to ensure permuting arrays changes hash.  ", "commit": "\n--- a/src/test/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/org/apache/commons/math/util/MathUtilsTest.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.apache.commons.math.random.RandomDataImpl;\n import org.apache.commons.math.TestUtils;\n \n /**\n         assertFalse(MathUtils.hash(new double[] { 1d }) ==\n                     MathUtils.hash(new double[] { 1d, 1d }));\n     }\n+    \n+    /**\n+     * Make sure that permuted arrays do not hash to the same value.\n+     */\n+    public void testPermutedArrayHash() {\n+        double[] original = new double[10];\n+        double[] permuted = new double[10];\n+        RandomDataImpl random = new RandomDataImpl();\n+        \n+        // Generate 10 distinct random values\n+        for (int i = 0; i < 10; i++) {\n+            original[i] = random.nextUniform((double)i + 0.5, (double)i + 0.75);\n+        }\n+        \n+        // Generate a random permutation, making sure it is not the identity\n+        boolean isIdentity = true;\n+        do {\n+            int[] permutation = random.nextPermutation(10, 10);\n+            for (int i = 0; i < 10; i++) {\n+                if (i != permutation[i]) {\n+                    isIdentity = false;\n+                }\n+                permuted[i] = original[permutation[i]];\n+            }\n+        } while (isIdentity);\n+        \n+        // Verify that permuted array has different hash\n+        assertFalse(MathUtils.hash(original) == MathUtils.hash(permuted));\n+    }\n \n     public void testIndicatorByte() {\n         assertEquals((byte)1, MathUtils.indicator((byte)2));", "timestamp": 1227454511, "metainfo": ""}