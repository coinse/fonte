{"sha": "ca6d8b8144edb3783449d47dd6523213fbaa101b", "log": "MATH-894 New method \"getCapacity\". Deprecated \"getInternalLength\".   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java\n+++ b/src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java\n      * of the public interface of this class.\n      *\n      * @return the length of the internal storage array.\n-     */\n+     * @deprecated As of 3.1. Please use {@link #getCapacity()} instead.\n+     */\n+    @Deprecated\n     synchronized int getInternalLength() {\n+        return internalArray.length;\n+    }\n+\n+    /**\n+     * Gets the currently allocated size of the internal data structure used\n+     * for storing elements.\n+     * This is not to be confused with {@link #getNumElements() the number of\n+     * elements actually stored}.\n+     *\n+     * @return the length of the internal array.\n+     */\n+    public int getCapacity() {\n         return internalArray.length;\n     }\n \n--- a/src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java\n+++ b/src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java\n \n         ResizableDoubleArray testDa = new ResizableDoubleArray(2);\n         Assert.assertEquals(0, testDa.getNumElements());\n-        Assert.assertEquals(2, testDa.getInternalLength());\n+        Assert.assertEquals(2, testDa.getCapacity());\n         Assert.assertEquals(defaultExpansionFactor, testDa.getExpansionFactor(), 0);\n         Assert.assertEquals(defaultContractionCriteria, testDa.getContractionCriteria(), 0);\n         Assert.assertEquals(defaultMode, testDa.getExpansionMode());\n \n         testDa = new ResizableDoubleArray(2, 2.0f);\n         Assert.assertEquals(0, testDa.getNumElements());\n-        Assert.assertEquals(2, testDa.getInternalLength());\n+        Assert.assertEquals(2, testDa.getCapacity());\n         Assert.assertEquals(defaultExpansionFactor, testDa.getExpansionFactor(), 0);\n         Assert.assertEquals(defaultContractionCriteria, testDa.getContractionCriteria(), 0);\n         Assert.assertEquals(defaultMode, testDa.getExpansionMode());\n \n         testDa = new ResizableDoubleArray(2, 2.0f, 3.0f);\n         Assert.assertEquals(0, testDa.getNumElements());\n-        Assert.assertEquals(2, testDa.getInternalLength());\n+        Assert.assertEquals(2, testDa.getCapacity());\n         Assert.assertEquals(defaultExpansionFactor, testDa.getExpansionFactor(), 0);\n         Assert.assertEquals(3.0f, testDa.getContractionCriteria(), 0);\n         Assert.assertEquals(defaultMode, testDa.getExpansionMode());\n         testDa = new ResizableDoubleArray(2, 2.0f, 3.0f,\n                 ResizableDoubleArray.ADDITIVE_MODE);\n         Assert.assertEquals(0, testDa.getNumElements());\n-        Assert.assertEquals(2, testDa.getInternalLength());\n+        Assert.assertEquals(2, testDa.getCapacity());\n         Assert.assertEquals(defaultExpansionFactor, testDa.getExpansionFactor(), 0);\n         Assert.assertEquals(3.0f, testDa.getContractionCriteria(), 0);\n         Assert.assertEquals(ResizableDoubleArray.ADDITIVE_MODE,\n         da.addElement(2.0);\n         da.addElement(4.0);\n         da.addElement(6.0);\n-        Assert.assertEquals(16, ((ResizableDoubleArray) da).getInternalLength());\n+        Assert.assertEquals(16, ((ResizableDoubleArray) da).getCapacity());\n         Assert.assertEquals(3, da.getNumElements());\n         da.setElement(3, 7.0);\n-        Assert.assertEquals(16, ((ResizableDoubleArray) da).getInternalLength());\n+        Assert.assertEquals(16, ((ResizableDoubleArray) da).getCapacity());\n         Assert.assertEquals(4, da.getNumElements());\n         da.setElement(10, 10.0);\n-        Assert.assertEquals(16, ((ResizableDoubleArray) da).getInternalLength());\n+        Assert.assertEquals(16, ((ResizableDoubleArray) da).getCapacity());\n         Assert.assertEquals(11, da.getNumElements());\n         da.setElement(9, 10.0);\n-        Assert.assertEquals(16, ((ResizableDoubleArray) da).getInternalLength());\n+        Assert.assertEquals(16, ((ResizableDoubleArray) da).getCapacity());\n         Assert.assertEquals(11, da.getNumElements());\n \n         try {\n \n         ResizableDoubleArray testDa = new ResizableDoubleArray(2, 2.0f, 3.0f,\n                 ResizableDoubleArray.ADDITIVE_MODE);\n-        Assert.assertEquals(2, testDa.getInternalLength());\n+        Assert.assertEquals(2, testDa.getCapacity());\n         testDa.addElement(1d);\n         testDa.addElement(1d);\n-        Assert.assertEquals(2, testDa.getInternalLength());\n+        Assert.assertEquals(2, testDa.getCapacity());\n         testDa.addElement(1d);\n-        Assert.assertEquals(4, testDa.getInternalLength());\n+        Assert.assertEquals(4, testDa.getCapacity());\n     }\n \n     @Override\n         super.testAdd1000();\n         Assert.assertEquals(\"Internal Storage length should be 1024 if we started out with initial capacity of \" +\n                 \"16 and an expansion factor of 2.0\",\n-                1024, ((ResizableDoubleArray) da).getInternalLength());\n+                1024, ((ResizableDoubleArray) da).getCapacity());\n     }\n     \n     @Test\n         // ADDITIVE_MODE  (x's are occupied storage locations, 0's are open)\n         testDa = new ResizableDoubleArray(2, 2.0f, 2.5f,\n                 ResizableDoubleArray.ADDITIVE_MODE);        \n-        Assert.assertEquals(2, testDa.getInternalLength());\n+        Assert.assertEquals(2, testDa.getCapacity());\n         testDa.addElements(new double[] { 1d }); // x,0\n         testDa.addElements(new double[] { 2d }); // x,x\n         testDa.addElements(new double[] { 3d }); // x,x,x,0 -- expanded\n         Assert.assertEquals(1d, testDa.getElement(0), 0);\n         Assert.assertEquals(2d, testDa.getElement(1), 0);\n         Assert.assertEquals(3d, testDa.getElement(2), 0);\n-        Assert.assertEquals(4, testDa.getInternalLength());  // x,x,x,0\n+        Assert.assertEquals(4, testDa.getCapacity());  // x,x,x,0\n         Assert.assertEquals(3, testDa.getNumElements());\n     }\n \n         // ADDITIVE_MODE  (x's are occupied storage locations, 0's are open)\n         ResizableDoubleArray testDa = new ResizableDoubleArray(2, 2.0f, 2.5f,\n                 ResizableDoubleArray.ADDITIVE_MODE);\n-        Assert.assertEquals(2, testDa.getInternalLength());\n+        Assert.assertEquals(2, testDa.getCapacity());\n         testDa.addElement(1d); // x,0\n         testDa.addElement(2d); // x,x\n         testDa.addElement(3d); // x,x,x,0 -- expanded\n         Assert.assertEquals(1d, testDa.getElement(0), 0);\n         Assert.assertEquals(2d, testDa.getElement(1), 0);\n         Assert.assertEquals(3d, testDa.getElement(2), 0);\n-        Assert.assertEquals(4, testDa.getInternalLength());  // x,x,x,0\n+        Assert.assertEquals(4, testDa.getCapacity());  // x,x,x,0\n         Assert.assertEquals(3, testDa.getNumElements());\n         testDa.addElementRolling(4d);\n         Assert.assertEquals(2d, testDa.getElement(0), 0);\n         Assert.assertEquals(3d, testDa.getElement(1), 0);\n         Assert.assertEquals(4d, testDa.getElement(2), 0);\n-        Assert.assertEquals(4, testDa.getInternalLength());  // 0,x,x,x\n+        Assert.assertEquals(4, testDa.getCapacity());  // 0,x,x,x\n         Assert.assertEquals(3, testDa.getNumElements());\n         testDa.addElementRolling(5d);   // 0,0,x,x,x,0 -- time to contract\n         Assert.assertEquals(3d, testDa.getElement(0), 0);\n         Assert.assertEquals(4d, testDa.getElement(1), 0);\n         Assert.assertEquals(5d, testDa.getElement(2), 0);\n-        Assert.assertEquals(4, testDa.getInternalLength());  // contracted -- x,x,x,0\n+        Assert.assertEquals(4, testDa.getCapacity());  // contracted -- x,x,x,0\n         Assert.assertEquals(3, testDa.getNumElements());\n         try {\n             testDa.getElement(4);", "timestamp": 1352727206, "metainfo": ""}