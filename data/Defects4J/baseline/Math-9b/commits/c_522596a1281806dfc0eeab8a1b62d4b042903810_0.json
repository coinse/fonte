{"sha": "522596a1281806dfc0eeab8a1b62d4b042903810", "log": "\"final\", formatting.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n      * if the covariance matrix cannot be computed.\n      */\n     public double[] getSigma() {\n-        double[] sig = new double[cols];\n-        double[][] cov = getCovariances();\n+        final double[] sig = new double[cols];\n+        final double[][] cov = getCovariances();\n         for (int i = 0; i < sig.length; ++i) {\n             sig[i] = FastMath.sqrt(cov[i][i]);\n         }\n     /** {@inheritDoc} */\n     @Override\n     public PointVectorValuePair optimize(int maxEval,\n-                                            final DifferentiableMultivariateVectorFunction f,\n-                                            final double[] target, final double[] weights,\n-                                            final double[] startPoint) {\n+                                         final DifferentiableMultivariateVectorFunction f,\n+                                         final double[] target, final double[] weights,\n+                                         final double[] startPoint) {\n         // Reset counter.\n         jacobianEvaluations = 0;\n ", "timestamp": 1336565656, "metainfo": ""}