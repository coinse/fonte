{"sha": "d3221394b65050c57519dd09633380a43ecb48f5", "log": "PR: http://nagoya.apache.org/bugzilla/show_bug.cgi?id=20488 Submitted by:\tBrent Worden  Initial submission of the distribution library   ", "commit": "\n--- a/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n-/* ====================================================================\n- * The Apache Software License, Version 1.1\n- *\n- * Copyright (c) 2003 The Apache Software Foundation.  All rights\n- * reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and/or other materials provided with the\n- *    distribution.\n- *\n- * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowlegement:\n- *       \"This product includes software developed by the\n- *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n- *\n- * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n- *    Foundation\" must not be used to endorse or promote products derived\n- *    from this software without prior written permission. For written\n- *    permission, please contact apache@apache.org.\n- *\n- * 5. Products derived from this software may not be called \"Apache\"\n- *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Software Foundation.\n- *\n- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n- * ====================================================================\n- *\n- * This software consists of voluntary contributions made by many\n- * individuals on behalf of the Apache Software Foundation.  For more\n- * information on the Apache Software Foundation, please see\n- * <http://www.apache.org/>.\n- */\n-package org.apache.commons.math.stat.distribution;\n-\n-import org.apache.commons.math.RootFinding;\n-import org.apache.commons.math.UnivariateFunction;\n-\n-/**\n- * Base class for various continuous distributions.  It provides default\n- * implementations for some of the methods that do not vary from distribution\n- * to distribution.\n- *  \n- * @author Brent Worden\n- */\n-public abstract class AbstractContinuousDistribution\n-    implements ContinuousDistribution {\n-        \n-    /**\n-     * Default constructor.\n-     */\n-    protected AbstractContinuousDistribution() {\n-        super();\n-    }\n-\n-    /**\n-     * For this disbution, X, this method returns P(x0 &lt; X &lt; x1).  This\n-     * is accomplished by using the equality P(x0 &lt; X &lt; x1) =\n-     * P(X &lt; x1) - P(X &lt; x0).\n-     * \n-     * @param x0 the lower bound\n-     * @param x1 the upper bound\n-     * @return the cummulative probability. \n-     */\n-    public double cummulativeProbability(double x0, double x1) {\n-        return cummulativeProbability(x1) - cummulativeProbability(x0);\n-    }\n-    \n-    /**\n-     * \n-     */\n-    public double inverseCummulativeProbability(final double p){\n-        if(p < 0.0 || p > 1.0){\n-            throw new IllegalArgumentException(\"p must be between 0.0 and 1.0 inclusive.\");\n-        }\n-        \n-        // by default, do simple root finding using bracketing and bisection.\n-        // subclasses can overide if there is a better method.\n-        UnivariateFunction rootFindingFunction = new UnivariateFunction() {\n-\t\t\tpublic double evaluate(double x) {\n-\t\t\t\treturn cummulativeProbability(x) - p;\n-\t\t\t}\n-\t\t};\n-        \n-        // bracket root\n-        double[] bracket = RootFinding.bracket(rootFindingFunction, getMean(), getDomainLowerBound(), getDomainUpperBound());\n-        \n-        // find root\n-        double root = RootFinding.bisection(rootFindingFunction, bracket[0], bracket[1]);\n-        \n-        return root;\n-    }\n-}\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+import org.apache.commons.math.RootFinding;\n+import org.apache.commons.math.UnivariateFunction;\n+\n+/**\n+ * Base class for various continuous distributions.  It provides default\n+ * implementations for some of the methods that do not vary from distribution\n+ * to distribution.\n+ *  \n+ * @author Brent Worden\n+ */\n+public abstract class AbstractContinuousDistribution\n+    implements ContinuousDistribution {\n+        \n+    /**\n+     * Default constructor.\n+     */\n+    protected AbstractContinuousDistribution() {\n+        super();\n+    }\n+\n+    /**\n+     * For this distribution, X, this method returns P(x0 &lt; X &lt; x1).  This\n+     * is accomplished by using the equality P(x0 &lt; X &lt; x1) =\n+     * P(X &lt; x1) - P(X &lt; x0).\n+     * \n+     * @param x0 the lower bound\n+     * @param x1 the upper bound\n+     * @return the cummulative probability. \n+     */\n+    public double cummulativeProbability(double x0, double x1) {\n+        return cummulativeProbability(x1) - cummulativeProbability(x0);\n+    }\n+    \n+    /**\n+     * For this distribution, X, this method returns the critical point x, such\n+     * that P(X &lt; x) = <code>p</code>.\n+     *\n+     * @param p the desired probability\n+     * @return x, such that P(X &lt; x) = <code>p</code>\n+     */\n+    public double inverseCummulativeProbability(final double p){\n+        if(p < 0.0 || p > 1.0){\n+            throw new IllegalArgumentException(\n+                \"p must be between 0.0 and 1.0, inclusive.\");\n+        }\n+        \n+        // by default, do simple root finding using bracketing and bisection.\n+        // subclasses can overide if there is a better method.\n+        UnivariateFunction rootFindingFunction = new UnivariateFunction() {\n+            public double evaluate(double x) {\n+                return cummulativeProbability(x) - p;\n+            }\n+        };\n+        \n+        // bracket root\n+        double[] bracket = RootFinding.bracket(rootFindingFunction,\n+            getInitialDomain(p), getDomainLowerBound(p),\n+            getDomainUpperBound(p));\n+        \n+        // find root\n+        double root = RootFinding.bisection(rootFindingFunction, bracket[0],\n+            bracket[1]);\n+        \n+        return root;\n+    }\n+    \n+    /**\n+     * Access the initial domain value, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return initial domain value\n+     */\n+    protected abstract double getInitialDomain(double p);\n+    \n+    /**\n+     * Access the domain value lower bound, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value lower bound, i.e.\n+     *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n+     */\n+    protected abstract double getDomainLowerBound(double p);\n+    \n+    /**\n+     * Access the domain value upper bound, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value upper bound, i.e.\n+     *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n+     */\n+    protected abstract double getDomainUpperBound(double p);\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+/**\n+ * <p>\n+ * The Chi-Squared Distribution\n+ * </p>\n+ * \n+ * <p>\n+ * Instances of ChiSquaredDistribution objects should be created using\n+ * {@link DistributionFactory#createChiSquareDistribution(double)}\n+ * </p>\n+ * \n+ * <p>\n+ * References:\n+ * <ul>\n+ * <li><a href=\"http://mathworld.wolfram.com/Chi-SquaredDistribution.html\">\n+ * Chi-Squared Distribution</a></li>\n+ * </p>\n+ * \n+ * @author Brent Worden\n+ */\n+public interface ChiSquaredDistribution extends ContinuousDistribution {\n+    /**\n+     * Modify the degrees of freedom.\n+     * @param degreesOfFreedom the new degrees of freedom.\n+     */\n+    void setDegreesOfFreedom(double degreesOfFreedom);\n+    \n+    /**\n+     * Access the degrees of freedom.\n+     * @return the degrees of freedom.\n+     */\n+    double getDegreesOfFreedom();\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n+package org.apache.commons.math.stat.distribution;\n+\n+/**\n+ * The default implementation of {@link ChiSquaredDistribution}\n+ * \n+ * @author Brent Worden\n+ */\n+public class ChiSquaredDistributionImpl\n+    extends AbstractContinuousDistribution\n+    implements ChiSquaredDistribution {\n+    \n+    /** Internal Gamma distribution. */    \n+    private GammaDistribution gamma;\n+    \n+    /**\n+     * Create a Chi-Squared distribution with the given degrees of freedom.\n+     * @param degreesOfFreedom degrees of freedom.\n+     */\n+    public ChiSquaredDistributionImpl(double degreesOfFreedom){\n+        super();\n+        setGamma(DistributionFactory.newInstance().createGammaDistribution(\n+            degreesOfFreedom / 2.0, 2.0));\n+    }\n+    \n+    /**\n+     * Modify the degrees of freedom.\n+     * @param degreesOfFreedom the new degrees of freedom.\n+     */\n+    public void setDegreesOfFreedom(double degreesOfFreedom) {\n+        getGamma().setAlpha(degreesOfFreedom / 2.0);\n+    }\n+        \n+    /**\n+     * Access the degrees of freedom.\n+     * @return the degrees of freedom.\n+     */\n+    public double getDegreesOfFreedom() {\n+        return getGamma().getAlpha() * 2.0;\n+    }\n+        \n+    /**\n+     * For this disbution, X, this method returns P(X &lt; x).\n+     * @param x the value at which the CDF is evaluated.\n+     * @return CDF for this distribution. \n+     */\n+    public double cummulativeProbability(double x) {\n+        return getGamma().cummulativeProbability(x);\n+    }\n+        \n+    /**\n+     * Access the domain value lower bound, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value lower bound, i.e.\n+     *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n+     */\n+    protected double getDomainLowerBound(double p){\n+        return Double.MIN_VALUE * getGamma().getBeta();\n+    }\n+\n+    /**\n+     * Access the domain value upper bound, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value upper bound, i.e.\n+     *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n+     */\n+    protected double getDomainUpperBound(double p){\n+        // NOTE: chi squared is skewed to the left\n+        // NOTE: therefore, P(X < &mu;) > .5\n+\n+        double ret;\n+\n+        if(p < .5){\n+            // use mean\n+            ret = getDegreesOfFreedom();\n+        } else {\n+            // use max\n+            ret = Double.MAX_VALUE;\n+        }\n+        \n+        return ret;\n+    }\n+\n+    /**\n+     * Access the initial domain value, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return initial domain value\n+     */\n+    protected double getInitialDomain(double p){\n+        // NOTE: chi squared is skewed to the left\n+        // NOTE: therefore, P(X < &mu;) > .5\n+        \n+        double ret;\n+\n+        if(p < .5){\n+            // use 1/2 mean\n+            ret = getDegreesOfFreedom() * .5;\n+        } else {\n+            // use mean\n+            ret = getDegreesOfFreedom();\n+        }\n+        \n+        return ret;\n+    }\n+    \n+    /**\n+     * Modify the Gamma distribution.\n+     * @param gamma the new distribution.\n+     */\n+    private void setGamma(GammaDistribution gamma) {\n+        this.gamma = gamma;\n+    }\n+\n+    /**\n+     * Access the Gamma distribution.\n+     * @return the internal Gamma distribution.\n+     */\n+    private GammaDistribution getGamma() {\n+        return gamma;\n+    }\n+}\n--- a/src/java/org/apache/commons/math/distribution/ContinuousDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/ContinuousDistribution.java\n-/* ====================================================================\n- * The Apache Software License, Version 1.1\n- *\n- * Copyright (c) 2003 The Apache Software Foundation.  All rights\n- * reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and/or other materials provided with the\n- *    distribution.\n- *\n- * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowlegement:\n- *       \"This product includes software developed by the\n- *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n- *\n- * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n- *    Foundation\" must not be used to endorse or promote products derived\n- *    from this software without prior written permission. For written\n- *    permission, please contact apache@apache.org.\n- *\n- * 5. Products derived from this software may not be called \"Apache\"\n- *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Software Foundation.\n- *\n- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n- * ====================================================================\n- *\n- * This software consists of voluntary contributions made by many\n- * individuals on behalf of the Apache Software Foundation.  For more\n- * information on the Apache Software Foundation, please see\n- * <http://www.apache.org/>.\n- */\n-package org.apache.commons.math.stat.distribution;\n-\n-/**\n- * Base interface for various continuous distributions.\n- * \n- * @author Brent Worden\n- */\n-public interface ContinuousDistribution {\n-    /**\n-     * For this disbution, X, this method returns P(X &lt; x).\n-     * @param x the value at which the CDF is evaluated.\n-     * @return CDF for this distribution. \n-     */\n-    double cummulativeProbability(double x);\n-\n-    /**\n-     * For this disbution, X, this method returns P(x0 &lt; X &lt; x1).\n-     * @param x0 the lower bound\n-     * @param x1 the upper bound\n-     * @return the cummulative probability. \n-     */\n-    double cummulativeProbability(double x0, double x1);\n-    \n-    /**\n-     * For this disbution, X, this method returns x such that P(X &lt; x) = p.\n-     * @param p the cummulative probability.\n-     * @return x. \n-     */\n-    double inverseCummulativeProbability(double p);\n-    \n-    /**\n-     * \n-     */\n-    double getMean();\n-    \n-    /**\n-     * \n-     */\n-    double getDomainLowerBound();\n-    \n-    /**\n-     * \n-     */\n-    double getDomainUpperBound();\n-}\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+/**\n+ * Base interface for various continuous distributions.\n+ * \n+ * @author Brent Worden\n+ */\n+public interface ContinuousDistribution {\n+    /**\n+     * For this disbution, X, this method returns P(X &lt; x).\n+     * @param x the value at which the CDF is evaluated.\n+     * @return CDF for this distribution. \n+     */\n+    double cummulativeProbability(double x);\n+\n+    /**\n+     * For this disbution, X, this method returns P(x0 &lt; X &lt; x1).\n+     * @param x0 the lower bound\n+     * @param x1 the upper bound\n+     * @return the cummulative probability. \n+     */\n+    double cummulativeProbability(double x0, double x1);\n+    \n+    /**\n+     * For this disbution, X, this method returns x such that P(X &lt; x) = p.\n+     * @param p the cummulative probability.\n+     * @return x. \n+     */\n+    double inverseCummulativeProbability(double p);\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+/**\n+ * <p>\n+ * This factory provids the means to create common statistical distributions.\n+ * The following distributions are supported:\n+ * <ul>\n+ * <li>Chi-Squared</li>\n+ * <li>Gamma</li>\n+ * </ul>\n+ * </p>\n+ * \n+ * <p>\n+ * Common usage:<pre>\n+ * DistributionFactory factory = DistributionFactory.newInstance();\n+ * \n+ * // create a Chi-Square distribution with 5 degrees of freedom.\n+ * ChiSquaredDistribution chi = factory.createChiSquareDistribution(5.0);\n+ * </pre>\n+ * </p>\n+ * \n+ * @author Brent Worden\n+ */\n+public abstract class DistributionFactory {\n+    /**\n+     * Default constructor.\n+     */\n+    protected DistributionFactory() {\n+        super();\n+    }\n+    \n+    /**\n+     * Create an instance of a <code>DistributionFactory</code>\n+     * @return a new factory. \n+     */\n+    public static DistributionFactory newInstance() {\n+        // for now, return the only concrete factory.\n+        // later, allow for a plugable implementation, possible using SPI and\n+        // commons-discovery.\n+        return new DistributionFactoryImpl();\n+    }\n+    \n+    /**\n+     * Create a new chi-square distribution with the given degrees of freedom.\n+     * @param degreesOfFreedom degrees of freedom.\n+     * @return a new chi-square distribution.  \n+     */\n+    public abstract ChiSquaredDistribution createChiSquareDistribution(\n+        double degreesOfFreedom\n+    );\n+    \n+    /**\n+     * Create a new gamma distribution with the given alpha and beta values.\n+     * @param alpha the shape parameter.\n+     * @param beta the scale parameter.\n+     * @return a new gamma distribution.  \n+     */\n+    public abstract GammaDistribution createGammaDistribution(\n+        double alpha, double beta);\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+\n+/**\n+ * A concrete distribution factory.  This is the default factory used by\n+ * Commons-Math.\n+ *  \n+ * @author Brent Worden\n+ */\n+public class DistributionFactoryImpl extends DistributionFactory {\n+    /**\n+     * Default constructor.  Package scope to prevent unwanted instantiation. \n+     */\n+    DistributionFactoryImpl() {\n+        super();\n+    }\n+    \n+    /**\n+     * Create a new chi-square distribution with the given degrees of freedom.\n+     * @param degreesOfFreedom degrees of freedom.\n+     * @return a new chi-square distribution.  \n+     */\n+    public ChiSquaredDistribution createChiSquareDistribution(\n+        final double degreesOfFreedom) {\n+            \n+        return new ChiSquaredDistributionImpl(degreesOfFreedom);\n+    }\n+    \n+    /**\n+     * Create a new gamma distribution the given alpha and beta values.\n+     * @param alpha the shape parameter.\n+     * @param beta the scale parameter.\n+     * @return a new gamma distribution.  \n+     */\n+    public GammaDistribution createGammaDistribution(\n+        double alpha, double beta) {\n+\n+        return new GammaDistributionImpl(alpha, beta);\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/GammaDistribution.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+/**\n+ * <p>\n+ * The Gamma Distribution\n+ * </p>\n+ * \n+ * <p>\n+ * Instances of GammaDistribution objects should be created using\n+ * {@link DistributionFactory#createGammaDistribution(double)}\n+ * </p>\n+ * \n+ * <p>\n+ * References:\n+ * <ul>\n+ * <li><a href=\"http://mathworld.wolfram.com/GammaDistribution.html\">\n+ * Gamma Distribution</a></li>\n+ * </p>\n+ *  \n+ * @author Brent Worden\n+ */\n+public interface GammaDistribution extends ContinuousDistribution {\n+    /**\n+     * Modify the shape parameter, alpha.\n+     * @param alpha the new shape parameter.\n+     */\n+    void setAlpha(double alpha);\n+    \n+    /**\n+     * Access the shape parameter, alpha\n+     * @return alpha.\n+     */\n+    double getAlpha();\n+    \n+    /**\n+     * Modify the scale parameter, beta.\n+     * @param beta the new scale parameter.\n+     */\n+    void setBeta(double beta);\n+    \n+    /**\n+     * Access the scale parameter, beta\n+     * @return beta.\n+     */\n+    double getBeta();\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+import org.apache.commons.math.special.Gamma;\n+\n+/**\n+ * The default implementation of {@link GammaDistribution}\n+ * \n+ * @author Brent Worden\n+ */\n+public class GammaDistributionImpl extends AbstractContinuousDistribution\n+    implements GammaDistribution {\n+\n+    /** The shape parameter. */\n+    private double alpha;\n+    \n+    /** The scale parameter. */\n+    private double beta;\n+    \n+    /**\n+     * Create a new gamma distribution with the given alpha and beta values.\n+     * @param alpha the shape parameter.\n+     * @param beta the scale parameter.\n+     */\n+    public GammaDistributionImpl(double alpha, double beta) {\n+        super();\n+        setAlpha(alpha);\n+        setBeta(beta);\n+    }\n+    \n+    /**\n+     * <p>\n+     * For this disbution, X, this method returns P(X &lt; x).\n+     * </p>\n+     * \n+     * <p>\n+     * The implementation of this method is based on:\n+     * <ul>\n+     * <li>\n+     * <a href=\"http://mathworld.wolfram.com/Chi-SquaredDistribution.html\">\n+     * Chi-Squared Distribution</a>, equation (9).</li>\n+     * <li>Casella, G., & Berger, R. (1990). <i>Statistical Inference</i>.\n+     * Belmont, CA: Duxbury Press.</li>\n+     * </ul>\n+     * </p>\n+     * \n+     * @param x the value at which the CDF is evaluated.\n+     * @return CDF for this distribution. \n+     */\n+    public double cummulativeProbability(double x) {\n+        double ret;\n+    \n+        if (x <= 0.0) {\n+            ret = 0.0;\n+        } else {\n+            ret = Gamma.regularizedGammaP(getAlpha(), x / getBeta());\n+        }\n+    \n+        return ret;\n+    }\n+    \n+    /**\n+     * Modify the shape parameter, alpha.\n+     * @param alpha the new shape parameter.\n+     */\n+    public void setAlpha(double alpha) {\n+        if (alpha <= 0.0) {\n+            throw new IllegalArgumentException(\"alpha must be positive\");\n+        }\n+        this.alpha = alpha;\n+    }\n+    \n+    /**\n+     * Access the shape parameter, alpha\n+     * @return alpha.\n+     */\n+    public double getAlpha() {\n+        return alpha;\n+    }\n+    \n+    /**\n+     * Modify the scale parameter, beta.\n+     * @param beta the new scale parameter.\n+     */\n+    public void setBeta(double beta) {\n+        if (beta <= 0.0) {\n+            throw new IllegalArgumentException(\"beta must be positive\");\n+        }\n+        this.beta = beta;\n+    }\n+    \n+    /**\n+     * Access the scale parameter, beta\n+     * @return beta.\n+     */\n+    public double getBeta() {\n+        return beta;\n+    }\n+    \n+    /**\n+     * Access the domain value lower bound, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value lower bound, i.e.\n+     *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n+     */\n+    protected double getDomainLowerBound(double p) {\n+        // TODO: try to improve on this estimate\n+        return Double.MIN_VALUE;\n+    }\n+\n+    /**\n+     * Access the domain value upper bound, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value upper bound, i.e.\n+     *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n+     */\n+    protected double getDomainUpperBound(double p) {\n+        // NOTE: gamma is skewed to the left\n+        // NOTE: therefore, P(X < &mu;) > .5\n+        // TODO: try to improve on this estimate\n+\n+        double ret;\n+\n+        if(p < .5){\n+            // use mean\n+            ret = getAlpha() * getBeta();\n+        } else {\n+            // use max value\n+            ret = Double.MAX_VALUE;\n+        }\n+        \n+        return ret;\n+    }\n+\n+    /**\n+     * Access the initial domain value, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return initial domain value\n+     */\n+    protected double getInitialDomain(double p) {\n+        // NOTE: gamma is skewed to the left\n+        // NOTE: therefore, P(X < &mu;) > .5\n+        // TODO: try to improve on this estimate\n+\n+        double ret;\n+\n+        if(p < .5){\n+            // use 1/2 mean\n+            ret = getAlpha() * getBeta() * .5;\n+        } else {\n+            // use mean\n+            ret = getAlpha() * getBeta();\n+        }\n+        \n+        return ret;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.special;\n+\n+import org.apache.commons.math.ConvergenceException;\n+\n+/**\n+ * This is a utility class that provides computation methods related to the\n+ * Gamma family of functions.\n+ * \n+ * @author Brent Worden\n+ */\n+public class Gamma {\n+    /** Maximum number of iteration allowed for iterative methods. */\n+    // TODO: try to reduce this.  regularizedGammaP doesn't converge very\n+    // fast for large values of x.\n+    private static final int MAXIMUM_ITERATIONS = 100;\n+\n+    /** Maximum allowed numerical error. */\n+    private static final double EPSILON = 10e-9;\n+\n+    /**\n+     * Default constructor.  Prohibit instantiation.\n+     */\n+    private Gamma() {\n+        super();\n+    }\n+\n+    /**\n+     * <p>\n+     * Returns the regularized gamma function P(a, x).\n+     * </p>\n+     * \n+     * <p>\n+     * The implementation of this method is based on:\n+     * <ul>\n+     * <li>\n+     * <a href=\"http://mathworld.wolfram.com/RegularizedGammaFunction.html\">\n+     * Regularized Gamma Function</a>, equation (1).</li>\n+     * <li>\n+     * <a href=\"http://mathworld.wolfram.com/IncompleteGammaFunction.html\">\n+     * Incomplete Gamma Function</a>, equation (4).</li>\n+     * <li>\n+     * <a href=\"http://mathworld.wolfram.com/ConfluentHypergeometricFunctionoftheFirstKind.html\">\n+     * Confluent Hypergeometric Function of the First Kind</a>, equation (1).\n+     * </li>\n+     * </ul>\n+     * </p>\n+     * \n+     * @param a ???\n+     * @param x ???\n+     * @return the regularized gamma function P(a, x)\n+     */\n+    public static double regularizedGammaP(double a, double x) {\n+        double ret;\n+\n+        if (a <= 0.0) {\n+            throw new IllegalArgumentException(\"a must be positive\");\n+        } else if (x <= 0.0) {\n+            throw new IllegalArgumentException(\"x must be non-negative\");\n+        } else {\n+            // calculate series\n+            double n = 0.0; // current element index\n+            double an = 1.0 / a; // n-th element in the series\n+            double sum = an; // partial sum\n+            while (Math.abs(an) > EPSILON && n < MAXIMUM_ITERATIONS) {\n+                // compute next element in the series\n+                n = n + 1.0;\n+                an = an * (x / (a + n));\n+\n+                // update partial sum\n+                sum = sum + an;\n+            }\n+            if (n >= MAXIMUM_ITERATIONS) {\n+                throw new ConvergenceException(\n+                    \"maximum number of iterations reached\");\n+            } else {\n+                ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\n+            }\n+        }\n+\n+        return ret;\n+    }\n+\n+    /**\n+     * <p>\n+     * Returns the natural logarithm of the gamma function &#915;(x).\n+     * </p>\n+     *\n+     * <p> \n+     * The implementation of this method is based on:\n+     * <ul>\n+     * <li><a href=\"http://mathworld.wolfram.com/GammaFunction.html\">\n+     * Gamma Function</a>, equation (28).</li>\n+     * <li><a href=\"http://mathworld.wolfram.com/LanczosApproximation.html\">\n+     * Lanczos Approximation</a>, equations (1) through (5).</li>\n+     * <li><a href=\"http://my.fit.edu/~gabdo/gamma.txt\">Paul Godfrey, A note on\n+     * the computation of the convergent Lanczos complex Gamma approximation\n+     * </a></li>\n+     * </ul>\n+     * </p>\n+     * \n+     * @param x ???\n+     * @return log(&#915;(x))\n+     */\n+    public static double logGamma(double x) {\n+        double ret;\n+\n+        if (x <= 0.0) {\n+            throw new IllegalArgumentException(\n+                \"x must be non-negative\");\n+        } else {\n+            double g = 607.0 / 128.0;\n+\n+            // Lanczos coefficients\n+            double[] c =\n+                {\n+                    0.99999999999999709182,\n+                    57.156235665862923517,\n+                    -59.597960355475491248,\n+                    14.136097974741747174,\n+                    -0.49191381609762019978,\n+                    .33994649984811888699e-4,\n+                    .46523628927048575665e-4,\n+                    -.98374475304879564677e-4,\n+                    .15808870322491248884e-3,\n+                    -.21026444172410488319e-3,\n+                    .21743961811521264320e-3,\n+                    -.16431810653676389022e-3,\n+                    .84418223983852743293e-4,\n+                    -.26190838401581408670e-4,\n+                    .36899182659531622704e-5,\n+                    };\n+\n+            double sum = 0.0;\n+            for (int i = 1; i < c.length; ++i) {\n+                sum = sum + (c[i] / (x + i));\n+            }\n+            sum = sum + c[0];\n+\n+            double tmp = x + g + .5;\n+            ret = ((x + .5) * Math.log(tmp)) - tmp\n+                + (.5 * Math.log(2.0 * Math.PI)) + Math.log(sum) - Math.log(x);\n+        }\n+\n+        return ret;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java\n+package org.apache.commons.math.stat.distribution;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @author Brent Worden\n+ */\n+public class ChiSquareDistributionTest extends TestCase {\n+    private ChiSquaredDistribution chiSquare;\n+    \n+\t/**\n+\t * Constructor for ChiSquareDistributionTest.\n+\t * @param name\n+\t */\n+\tpublic ChiSquareDistributionTest(String name) {\n+\t\tsuper(name);\n+\t}\n+\n+\t/*\n+\t * @see TestCase#setUp()\n+\t */\n+\tprotected void setUp() throws Exception {\n+\t\tsuper.setUp();\n+        chiSquare = DistributionFactory.newInstance().createChiSquareDistribution(5.0);\n+\t}\n+\n+\t/*\n+\t * @see TestCase#tearDown()\n+\t */\n+\tprotected void tearDown() throws Exception {\n+        chiSquare = null;\n+\t\tsuper.tearDown();\n+\t}\n+\n+    public void testLowerTailProbability(){\n+        testProbability( .210, .001);\n+        testProbability( .554, .010);\n+        testProbability( .831, .025);\n+        testProbability(1.145, .050);\n+        testProbability(1.610, .100);\n+    }\n+\n+    public void testUpperTailProbability(){\n+        testProbability(20.515, .999);\n+        testProbability(15.086, .990);\n+        testProbability(12.833, .975);\n+        testProbability(11.070, .950);\n+        testProbability( 9.236, .900);\n+    }\n+    \n+    public void testLowerTailValues(){\n+        testValue(.001,  .210);\n+        testValue(.010,  .554);\n+        testValue(.025,  .831);\n+        testValue(.050, 1.145);\n+        testValue(.100, 1.610);\n+    }\n+    \n+    public void testUpperTailValues(){\n+        testValue(.999, 20.515);\n+        testValue(.990, 15.086);\n+        testValue(.975, 12.833);\n+        testValue(.950, 11.070);\n+        testValue(.900,  9.236);\n+    }\n+    \n+    private void testProbability(double x, double expected){\n+        double actual = chiSquare.cummulativeProbability(x);\n+        assertEquals(\"probability for \" + x, expected, actual, 10e-4);\n+    }\n+    \n+    private void testValue(double p, double expected){\n+        double actual = chiSquare.inverseCummulativeProbability(p);\n+        assertEquals(\"value for \" + p, expected, actual, 10e-4);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java\n+package org.apache.commons.math.stat.distribution;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @author Brent Worden\n+ */\n+public class DistributionFactoryImplTest extends TestCase {\n+    /** */\n+    private DistributionFactory factory;\n+    \n+\t/**\n+\t * Constructor for DistributionFactoryImplTest.\n+\t * @param name\n+\t */\n+\tpublic DistributionFactoryImplTest(String name) {\n+\t\tsuper(name);\n+\t}\n+\t/**\n+\t * @throws java.lang.Exception\n+\t */\n+\tprotected void setUp() throws Exception {\n+\t\tsuper.setUp();\n+        factory = new DistributionFactoryImpl();\n+\t}\n+\n+\t/**\n+\t * @throws java.lang.Exception\n+\t */\n+\tprotected void tearDown() throws Exception {\n+        factory = null;\n+\t\tsuper.tearDown();\n+\t}\n+    \n+    public void testCreateChiSquareDistributionNegative(){\n+        try {\n+            factory.createChiSquareDistribution(-1.0);\n+            fail(\"negative degrees of freedom.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateChiSquareDistributionZero(){\n+        try {\n+            factory.createChiSquareDistribution(0.0);\n+            fail(\"zero degrees of freedom.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateChiSquareDistributionPositive(){\n+        try {\n+            factory.createChiSquareDistribution(1.0);\n+        } catch (IllegalArgumentException ex) {\n+            fail(\"positive degrees of freedom.  IllegalArgumentException is not expected\");\n+        }\n+    }\n+    \n+    public void testCreateGammaDistributionNegativePositive(){\n+        try {\n+            factory.createGammaDistribution(-1.0, 1.0);\n+            fail(\"negative alpha.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateGammaDistributionZeroPositive(){\n+        try {\n+            factory.createGammaDistribution(0.0, 1.0);\n+            fail(\"zero alpha.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateGammaDistributionPositiveNegative(){\n+        try {\n+            factory.createGammaDistribution(1.0, -1.0);\n+            fail(\"negative beta.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateGammaDistributionPositiveZero(){\n+        try {\n+            factory.createGammaDistribution(1.0, 0.0);\n+            fail(\"zero beta.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateGammaDistributionPositivePositive(){\n+        try {\n+            factory.createGammaDistribution(1.0, 1.0);\n+        } catch (IllegalArgumentException ex) {\n+            fail(\"positive alpah and beta.  IllegalArgumentException is not expected\");\n+        }\n+    }\n+//    \n+//    public void testCreateTDistributionNegative(){\n+//        try {\n+//            factory.createTDistribution(-1.0);\n+//            fail(\"negative degrees of freedom.  IllegalArgumentException expected\");\n+//        } catch (IllegalArgumentException ex) {\n+//            ;\n+//        }\n+//    }\n+//    \n+//    public void testCreateTDistributionZero(){\n+//        try {\n+//            factory.createTDistribution(0.0);\n+//            fail(\"zero degrees of freedom.  IllegalArgumentException expected\");\n+//        } catch (IllegalArgumentException ex) {\n+//            ;\n+//        }\n+//    }\n+//    \n+//    public void testCreateTDistributionPositive(){\n+//        try {\n+//            factory.createTDistribution(1.0);\n+//        } catch (IllegalArgumentException ex) {\n+//            fail(\"positive degrees of freedom.  IllegalArgumentException is not expected\");\n+//        }\n+//    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/distribution/GammaDistributionTest.java\n+package org.apache.commons.math.stat.distribution;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @author Brent Worden\n+ */\n+public class GammaDistributionTest extends TestCase {\n+\t/**\n+\t * Constructor for ChiSquareDistributionTest.\n+\t * @param name\n+\t */\n+\tpublic GammaDistributionTest(String name) {\n+\t\tsuper(name);\n+\t}\n+\n+    public void testProbabilities(){\n+        testProbability(15.5, 4.0, 2.0, .9499);\n+        testProbability( 0.5, 4.0, 1.0, .0018);\n+        testProbability(10.0, 1.0, 2.0, .9933);\n+        testProbability( 5.0, 2.0, 2.0, .7127);\n+    }\n+    \n+    private void testProbability(double x, double a, double b, double expected){\n+        double actual = DistributionFactory.newInstance().createGammaDistribution(a, b).cummulativeProbability(x);\n+        assertEquals(\"probability for \" + x, expected, actual, 10e-4);\n+    }\n+}", "timestamp": 1054821833, "metainfo": ""}