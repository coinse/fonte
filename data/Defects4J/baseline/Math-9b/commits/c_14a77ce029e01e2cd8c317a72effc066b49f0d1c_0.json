{"sha": "14a77ce029e01e2cd8c317a72effc066b49f0d1c", "log": "compute state variation avoiding cancellation in a critical subtraction to preserve accuracy  ", "commit": "\n--- a/src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java\n import java.util.Arrays;\n \n import org.apache.commons.math.linear.Array2DRowRealMatrix;\n+import org.apache.commons.math.ode.DerivativeException;\n \n /**\n  * This class implements an interpolator for integrators using Nordsieck representation.\n \n     /** Nordsieck vector. */\n     private Array2DRowRealMatrix nordsieck;\n+\n+    /** State variation. */\n+    protected double[] stateVariation;\n \n     /** Simple constructor.\n      * This constructor builds an instance that is not usable yet, the\n         if (interpolator.nordsieck != null) {\n             nordsieck = new Array2DRowRealMatrix(interpolator.nordsieck.getDataRef(), true);\n         }\n+        if (interpolator.stateVariation != null) {\n+        \tstateVariation = interpolator.stateVariation.clone();\n+        }\n     }\n \n     /** {@inheritDoc} */\n     @Override\n     public void reinitialize(final double[] y, final boolean forward) {\n         super.reinitialize(y, forward);\n+        stateVariation = new double[y.length];\n     }\n \n     /** Reinitialize the instance.\n \n     }\n \n+    /**\n+     * Get the state vector variation from current to interpolated state.\n+     * <p>This method is aimed at computing y(t<sub>interpolation</sub>)\n+     * -y(t<sub>current</sub>) accurately by avoiding the cancellation errors\n+     * that would occur if the subtraction were performed explicitly.</p>\n+     * <p>The returned vector is a reference to a reused array, so\n+     * it should not be modified and it should be copied if it needs\n+     * to be preserved across several calls.</p>\n+     * @return state vector at time {@link #getInterpolatedTime}\n+     * @see #getInterpolatedDerivatives()\n+     * @throws DerivativeException if this call induces an automatic\n+     * step finalization that throws one\n+     */\n+    public double[] getInterpolatedStateVariation()\n+        throws DerivativeException {\n+    \t// compute and ignore interpolated state\n+    \t// to make sure state variation is computed as a side effect\n+    \tgetInterpolatedState();\n+    \treturn stateVariation;\n+    }\n+\n     /** {@inheritDoc} */\n     @Override\n     protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH) {\n         final double x = interpolatedTime - referenceTime;\n         final double normalizedAbscissa = x / scalingH;\n \n-        Arrays.fill(interpolatedState, 0.0);\n+        Arrays.fill(stateVariation, 0.0);\n         Arrays.fill(interpolatedDerivatives, 0.0);\n \n         // apply Taylor formula from high order to low order,\n             final double power = Math.pow(normalizedAbscissa, order);\n             for (int j = 0; j < nDataI.length; ++j) {\n                 final double d = nDataI[j] * power;\n-                interpolatedState[j]       += d;\n+                stateVariation[j]          += d;\n                 interpolatedDerivatives[j] += order * d;\n             }\n         }\n \n         for (int j = 0; j < currentState.length; ++j) {\n-            interpolatedState[j] += currentState[j] + scaled[j] * normalizedAbscissa;\n+        \tstateVariation[j] += scaled[j] * normalizedAbscissa;\n+        \tinterpolatedState[j] = currentState[j] + stateVariation[j];\n             interpolatedDerivatives[j] =\n                 (interpolatedDerivatives[j] + scaled[j] * normalizedAbscissa) / x;\n         }\n             out.writeBoolean(true);\n             out.writeObject(nordsieck);\n         }\n+\n+        // we don't save state variation, it will be recomputed\n \n     }\n \n \n         if (hasScaled && hasNordsieck) {\n             // we can now set the interpolated time and state\n+            stateVariation = new double[n];\n             setInterpolatedTime(t);\n+        } else {\n+            stateVariation = null;\n         }\n \n     }", "timestamp": 1246802760, "metainfo": ""}