{"sha": "423d4ac4d1b4fdc4c58de6198e2e688135f6fbde", "log": "Initial Certified Tests for Univariate. Note UnivariateImpl currently fails   ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/CertifiedDataTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.FilenameFilter;\n+import java.io.IOException;\n+import java.net.URL;\n+import org.apache.commons.logging.*;\n+/**\n+ * Test cases for the {@link Univariate} class.\n+ *\n+ * @author Mark R. Diggory\n+ * @version $Revision: 1.1 $ $Date: 2003/06/02 04:25:52 $\n+ */\n+\n+public class CertifiedDataTest extends TestCase {\n+\n+\tprotected double tolerance = .01;\n+\n+\tprotected File[] dataFiles = null;\n+\n+\tprotected Univariate u = null;\n+\n+\tprotected double mean = Double.NaN;\n+\n+\tprotected double std = Double.NaN;\n+\n+\tprotected Log log = LogFactory.getLog(this.getClass());\n+\n+\t/**\n+\t * Certified Data Test Constructor\n+\t * @param name\n+\t */\n+\tpublic CertifiedDataTest(String name) {\n+\t\tsuper(name);\n+\t\tsetUp();\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see junit.framework.TestCase#setUp()\n+\t */\n+\tpublic void setUp() {\n+\t\tURL url = getClass().getResource(\"data\");\n+\t\tFile file = new File(url.getFile());\n+\n+\t\tdataFiles = file.listFiles(new FilenameFilter() {\n+\t\t\tpublic boolean accept(File dir, String name) {\n+\t\t\t\treturn name.endsWith(\".dat\");\n+\t\t\t}\n+\t\t});\n+\n+\t}\n+\n+\t/**\n+\t * @return The test suite\n+\t */\n+\tpublic static Test suite() {\n+\t\tTestSuite suite = new TestSuite(CertifiedDataTest.class);\n+\t\tsuite.setName(\"Certified Tests\");\n+\t\treturn suite;\n+\t}\n+\n+\t/**\n+\t * Test UnivariateImpl\n+\t */\n+\tpublic void testUnivariateImpl() {\n+\n+\t\tfor (int i = 0; i < dataFiles.length; i++) {\n+\n+\t\t\tu = new UnivariateImpl();\n+\n+\t\t\tloadStats(dataFiles[i]);\n+\n+\t\t\tassertEquals(\n+\t\t\t\tdataFiles[i].getName() + \":std\",\n+\t\t\t\tstd,\n+\t\t\t\tu.getStandardDeviation(),\n+\t\t\t\ttolerance);\n+\t\t\t\t\n+\t\t\tassertEquals(\n+\t\t\t\tdataFiles[i].getName() + \":mean\",\n+\t\t\t\tmean,\n+\t\t\t\tu.getMean(),\n+\t\t\t\ttolerance);\n+\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Test UnivariateImpl\n+\t */\n+\tpublic void testStoredUnivariateImpl() {\n+\n+\t\tfor (int i = 0; i < dataFiles.length; i++) {\n+\n+\t\t\tu = new StoreUnivariateImpl();\n+\n+\t\t\tloadStats(dataFiles[i]);\n+\n+\t\t\tassertEquals(\n+\t\t\t\tdataFiles[i].getName() + \":std\",\n+\t\t\t\tstd,\n+\t\t\t\tu.getStandardDeviation(),\n+\t\t\t\ttolerance);\n+\t\t\tassertEquals(\n+\t\t\t\tdataFiles[i].getName() + \":mean\",\n+\t\t\t\tmean,\n+\t\t\t\tu.getMean(),\n+\t\t\t\ttolerance);\n+\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * loads a Univariate off of a test file\n+\t * @param file\n+\t */\n+\tprivate void loadStats(File file) {\n+\n+\t\ttry {\n+\n+\t\t\tu.clear();\n+\t\t\tmean = Double.NaN;\n+\t\t\tstd = Double.NaN;\n+\t\t\t\n+\t\t\tBufferedReader in = new BufferedReader(new FileReader(file));\n+\n+\t\t\tString line = null;\n+\n+\t\t\tfor (int j = 0; j < 60; j++) {\n+\t\t\t\tline = in.readLine();\n+\t\t\t\tif (j == 40) {\n+\t\t\t\t\tmean =\n+\t\t\t\t\t\tDouble.parseDouble(\n+\t\t\t\t\t\t\tline.substring(line.lastIndexOf(\":\") + 1).trim());\n+\t\t\t\t}\n+\t\t\t\tif (j == 41) {\n+\t\t\t\t\tstd =\n+\t\t\t\t\t\tDouble.parseDouble(\n+\t\t\t\t\t\t\tline.substring(line.lastIndexOf(\":\") + 1).trim());\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tline = in.readLine();\n+\n+\t\t\twhile (line != null) {\n+\t\t\t\tif(file.getName().equals(\"NumAcc4.dat\")){\n+\t\t\t\t\tSystem.out.println(\"Line: \" + line);\n+\t\t\t\t\tSystem.out.println(\"Mean: \" + u.getMean()); \n+\t\t\t\t\tSystem.out.println(\"Std: \" + u.getStandardDeviation()); \n+\t\t\t\t}\t\t\t\t\n+\t\t\t\t\n+\t\t\t\t\n+\t\t\t\tu.addValue(Double.parseDouble(line.trim()));\n+\t\t\t\tline = in.readLine();\n+\t\t\t}\n+\n+\t\t\tin.close();\n+\t\t\tSystem.out.println(\" \"); \n+\t\t} catch (FileNotFoundException fnfe) {\n+\t\t\tlog.error(fnfe.getMessage(), fnfe);\n+\t\t} catch (IOException ioe) {\n+\t\t\tlog.error(ioe.getMessage(), ioe);\n+\t\t}\n+\t}\n+}", "timestamp": 1054527952, "metainfo": ""}