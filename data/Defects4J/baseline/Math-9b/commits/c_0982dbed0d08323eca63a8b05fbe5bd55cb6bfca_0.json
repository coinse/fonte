{"sha": "0982dbed0d08323eca63a8b05fbe5bd55cb6bfca", "log": "removed references to InvalidStateException, they are never thrown cleaned up exception messages  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/LUDecompositionImpl.java\n+++ b/src/java/org/apache/commons/math/linear/LUDecompositionImpl.java\n \n package org.apache.commons.math.linear;\n \n+import org.apache.commons.math.MathRuntimeException;\n+\n /**\n  * Calculates the LUP-decomposition of a square matrix.\n  * <p>The LUP-decomposition of a matrix A consists of three matrices\n      * @param matrix The matrix to decompose.\n      * @param singularityThreshold threshold (based on partial row norm)\n      * under which a matrix is considered singular\n-     * @exception InvalidMatrixException if matrix is not square\n+     * @exception NonSquareMatrixException if matrix is not square\n      */\n     public LUDecompositionImpl(RealMatrix matrix, double singularityThreshold)\n-        throws InvalidMatrixException {\n+        throws NonSquareMatrixException {\n \n         if (!matrix.isSquare()) {\n             throw new NonSquareMatrixException(matrix.getRowDimension(), matrix.getColumnDimension());\n     }\n \n     /** {@inheritDoc} */\n-    public RealMatrix getL()\n-        throws IllegalStateException {\n+    public RealMatrix getL() {\n         if ((cachedL == null) && !singular) {\n             final int m = pivot.length;\n             cachedL = MatrixUtils.createRealMatrix(m, m);\n     }\n \n     /** {@inheritDoc} */\n-    public RealMatrix getU()\n-        throws IllegalStateException {\n+    public RealMatrix getU() {\n         if ((cachedU == null) && !singular) {\n             final int m = pivot.length;\n             cachedU = MatrixUtils.createRealMatrix(m, m);\n     }\n \n     /** {@inheritDoc} */\n-    public RealMatrix getP()\n-        throws IllegalStateException {\n+    public RealMatrix getP() {\n         if ((cachedP == null) && !singular) {\n             final int m = pivot.length;\n             cachedP = MatrixUtils.createRealMatrix(m, m);\n     }\n \n     /** {@inheritDoc} */\n-    public int[] getPivot()\n-        throws IllegalStateException {\n+    public int[] getPivot() {\n         return pivot.clone();\n     }\n \n \n         /** {@inheritDoc} */\n         public double[] solve(double[] b)\n-        throws IllegalStateException, IllegalArgumentException, InvalidMatrixException {\n+            throws IllegalArgumentException, InvalidMatrixException {\n \n             final int m = pivot.length;\n             if (b.length != m) {\n-                throw new IllegalArgumentException(\"constant vector has wrong length\");\n+                throw MathRuntimeException.createIllegalArgumentException(\n+                        \"vector length mismatch: got {0} but expected {1}\",\n+                        new Object[] { b.length, m });\n             }\n             if (singular) {\n                 throw new SingularMatrixException();\n \n         /** {@inheritDoc} */\n         public RealVector solve(RealVector b)\n-        throws IllegalStateException, IllegalArgumentException, InvalidMatrixException {\n+            throws IllegalArgumentException, InvalidMatrixException {\n             try {\n                 return solve((RealVectorImpl) b);\n             } catch (ClassCastException cce) {\n \n                 final int m = pivot.length;\n                 if (b.getDimension() != m) {\n-                    throw new IllegalArgumentException(\"constant vector has wrong length\");\n+                    throw MathRuntimeException.createIllegalArgumentException(\n+                            \"vector length mismatch: got {0} but expected {1}\",\n+                            new Object[] { b.getDimension(), m });\n                 }\n                 if (singular) {\n                     throw new SingularMatrixException();\n          * @exception InvalidMatrixException if decomposed matrix is singular\n          */\n         public RealVectorImpl solve(RealVectorImpl b)\n-        throws IllegalArgumentException, InvalidMatrixException {\n+            throws IllegalArgumentException, InvalidMatrixException {\n             return new RealVectorImpl(solve(b.getDataRef()), false);\n         }\n \n         /** {@inheritDoc} */\n         public RealMatrix solve(RealMatrix b)\n-        throws IllegalArgumentException, InvalidMatrixException {\n+            throws IllegalArgumentException, InvalidMatrixException {\n \n             final int m = pivot.length;\n             if (b.getRowDimension() != m) {\n-                throw new IllegalArgumentException(\"Incorrect row dimension\");\n+                throw MathRuntimeException.createIllegalArgumentException(\n+                        \"dimensions mismatch: got {0}x{1} but expected {2}x{3}\",\n+                        new Object[] { b.getRowDimension(), b.getColumnDimension(), m, \"n\"});\n             }\n             if (singular) {\n                 throw new SingularMatrixException();\n         }\n \n         /** {@inheritDoc} */\n-        public RealMatrix getInverse()\n-        throws IllegalStateException, InvalidMatrixException {\n+        public RealMatrix getInverse() throws InvalidMatrixException {\n             return solve(MatrixUtils.createRealIdentityMatrix(pivot.length));\n         }\n ", "timestamp": 1234712632, "metainfo": ""}