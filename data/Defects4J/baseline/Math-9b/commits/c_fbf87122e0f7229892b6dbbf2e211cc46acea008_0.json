{"sha": "fbf87122e0f7229892b6dbbf2e211cc46acea008", "log": "propagated trunk changes from r699157 into branch 2.0 MATH-227.  fixed F distribution inverse CDF computation for small denominator degrees of freedom.  ", "commit": "\n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n      * @return initial domain value\n      */\n     protected double getInitialDomain(double p) {\n-        return getDenominatorDegreesOfFreedom() /\n-            (getDenominatorDegreesOfFreedom() - 2.0);\n+        double ret = 1.0;\n+        double d = getDenominatorDegreesOfFreedom();\n+        if (d > 2.0) {\n+            // use mean\n+            ret = d / (d - 2.0);\n+        }\n+        return ret;\n     }\n     \n     /**\n--- a/src/test/org/apache/commons/math/distribution/FDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/FDistributionTest.java\n         double x = fd.inverseCumulativeProbability(p);\n         assertEquals(.999, x, 1.0e-5);\n     }\n+\n+    public void testSmallDegreesOfFreedom() throws Exception {\n+        org.apache.commons.math.distribution.FDistributionImpl fd =\n+            new org.apache.commons.math.distribution.FDistributionImpl(\n+                1.0, 1.0);\n+        double p = fd.cumulativeProbability(0.975);\n+        double x = fd.inverseCumulativeProbability(p);\n+        assertEquals(0.975, x, 1.0e-5);\n+\n+        fd.setDenominatorDegreesOfFreedom(2.0);\n+        p = fd.cumulativeProbability(0.975);\n+        x = fd.inverseCumulativeProbability(p);\n+        assertEquals(0.975, x, 1.0e-5);\n+    }\n+\n }", "timestamp": 1222458673, "metainfo": ""}