{"sha": "623ba574065bd409789968951c7060904cdaccb4", "log": "MATH-536 Simplified string representation (when a coefficient is an integer number). Upgraded unit tests to JUnit 4. Code and Javadoc formatting clean-up.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java\n  * Immutable representation of a real polynomial function with real coefficients.\n  * <p>\n  * <a href=\"http://mathworld.wolfram.com/HornersMethod.html\">Horner's Method</a>\n- *  is used to evaluate the function.</p>\n+ * is used to evaluate the function.</p>\n  *\n  * @version $Revision$ $Date$\n  */\n public class PolynomialFunction implements DifferentiableUnivariateRealFunction, Serializable {\n-\n     /**\n      * Serialization identifier\n      */\n     private static final long serialVersionUID = -7726511984200295583L;\n-\n     /**\n      * The coefficients of the polynomial, ordered by degree -- i.e.,\n      * coefficients[0] is the constant term and coefficients[n] is the\n      * The constructor makes a copy of the input array and assigns the copy to\n      * the coefficients property.</p>\n      *\n-     * @param c polynomial coefficients\n-     * @throws NullPointerException if c is null\n-     * @throws NoDataException if c is empty\n+     * @param c Polynomial coefficients.\n+     * @throws NullPointerException if {@code c} is {@code null}.\n+     * @throws NoDataException if {@code c} is empty.\n      */\n     public PolynomialFunction(double c[]) {\n         super();\n     /**\n      * Compute the value of the function for the given argument.\n      * <p>\n-     *  The value returned is <br>\n-     *   <code>coefficients[n] * x^n + ... + coefficients[1] * x  + coefficients[0]</code>\n+     *  The value returned is <br/>\n+     *  <code>coefficients[n] * x^n + ... + coefficients[1] * x  + coefficients[0]</code>\n      * </p>\n      *\n-     * @param x the argument for which the function value should be computed\n-     * @return the value of the polynomial at the given point\n+     * @param x Argument for which the function value should be computed.\n+     * @return the value of the polynomial at the given point.\n      * @see UnivariateRealFunction#value(double)\n      */\n     public double value(double x) {\n        return evaluate(coefficients, x);\n     }\n \n-\n-    /**\n-     *  Returns the degree of the polynomial\n-     *\n-     * @return the degree of the polynomial\n+    /**\n+     * Returns the degree of the polynomial.\n+     *\n+     * @return the degree of the polynomial.\n      */\n     public int degree() {\n         return coefficients.length - 1;\n      * Changes made to the returned copy will not affect the coefficients of\n      * the polynomial.</p>\n      *\n-     * @return  a fresh copy of the coefficients array\n+     * @return a fresh copy of the coefficients array.\n      */\n     public double[] getCoefficients() {\n         return coefficients.clone();\n      * Uses Horner's Method to evaluate the polynomial with the given coefficients at\n      * the argument.\n      *\n-     * @param coefficients  the coefficients of the polynomial to evaluate\n-     * @param argument  the input value\n-     * @return  the value of the polynomial\n-     * @throws NoDataException if coefficients is empty\n-     * @throws NullPointerException if coefficients is null\n+     * @param coefficients Coefficients of the polynomial to evaluate.\n+     * @param argument Input value.\n+     * @return the value of the polynomial.\n+     * @throws NoDataException if {@code coefficients} is empty.\n+     * @throws NullPointerException if {@code coefficients} is {@code null}.\n      */\n     protected static double evaluate(double[] coefficients, double argument) {\n         int n = coefficients.length;\n \n     /**\n      * Add a polynomial to the instance.\n-     * @param p polynomial to add\n-     * @return a new polynomial which is the sum of the instance and p\n+     *\n+     * @param p Polynomial to add.\n+     * @return a new polynomial which is the sum of the instance and {@code p}.\n      */\n     public PolynomialFunction add(final PolynomialFunction p) {\n-\n         // identify the lowest degree polynomial\n         final int lowLength  = FastMath.min(coefficients.length, p.coefficients.length);\n         final int highLength = FastMath.max(coefficients.length, p.coefficients.length);\n                          highLength - lowLength);\n \n         return new PolynomialFunction(newCoefficients);\n-\n     }\n \n     /**\n      * Subtract a polynomial from the instance.\n-     * @param p polynomial to subtract\n-     * @return a new polynomial which is the difference the instance minus p\n+     *\n+     * @param p Polynomial to subtract.\n+     * @return a new polynomial which is the difference the instance minus {@code p}.\n      */\n     public PolynomialFunction subtract(final PolynomialFunction p) {\n-\n         // identify the lowest degree polynomial\n         int lowLength  = FastMath.min(coefficients.length, p.coefficients.length);\n         int highLength = FastMath.max(coefficients.length, p.coefficients.length);\n         }\n \n         return new PolynomialFunction(newCoefficients);\n-\n     }\n \n     /**\n      * Negate the instance.\n-     * @return a new polynomial\n+     *\n+     * @return a new polynomial.\n      */\n     public PolynomialFunction negate() {\n         double[] newCoefficients = new double[coefficients.length];\n \n     /**\n      * Multiply the instance by a polynomial.\n-     * @param p polynomial to multiply by\n-     * @return a new polynomial\n+     *\n+     * @param p Polynomial to multiply by.\n+     * @return a new polynomial.\n      */\n     public PolynomialFunction multiply(final PolynomialFunction p) {\n-\n         double[] newCoefficients = new double[coefficients.length + p.coefficients.length - 1];\n \n         for (int i = 0; i < newCoefficients.length; ++i) {\n         }\n \n         return new PolynomialFunction(newCoefficients);\n-\n     }\n \n     /**\n      * Returns the coefficients of the derivative of the polynomial with the given coefficients.\n      *\n-     * @param coefficients  the coefficients of the polynomial to differentiate\n-     * @return the coefficients of the derivative or null if coefficients has length 1.\n-     * @throws NoDataException if coefficients is empty\n-     * @throws NullPointerException if coefficients is null\n+     * @param coefficients Coefficients of the polynomial to differentiate.\n+     * @return the coefficients of the derivative or {@code null} if coefficients has length 1.\n+     * @throws NoDataException if {@code coefficients} is empty.\n+     * @throws NullPointerException if {@code coefficients} is {@code null}.\n      */\n     protected static double[] differentiate(double[] coefficients) {\n         int n = coefficients.length;\n             return new double[]{0};\n         }\n         double[] result = new double[n - 1];\n-        for (int i = n - 1; i  > 0; i--) {\n+        for (int i = n - 1; i > 0; i--) {\n             result[i - 1] = i * coefficients[i];\n         }\n         return result;\n     }\n \n     /**\n-     * Returns the derivative as a PolynomialRealFunction\n-     *\n-     * @return  the derivative polynomial\n+     * Returns the derivative as a {@link PolynomialFunction}.\n+     *\n+     * @return the derivative polynomial.\n      */\n     public PolynomialFunction polynomialDerivative() {\n         return new PolynomialFunction(differentiate(coefficients));\n     }\n \n     /**\n-     * Returns the derivative as a UnivariateRealFunction\n-     *\n-     * @return  the derivative function\n+     * Returns the derivative as a {@link UnivariateRealFunction}.\n+     *\n+     * @return the derivative function.\n      */\n     public UnivariateRealFunction derivative() {\n         return polynomialDerivative();\n     }\n \n-    /** Returns a string representation of the polynomial.\n-\n+    /**\n+     * Returns a string representation of the polynomial.\n+     *\n      * <p>The representation is user oriented. Terms are displayed lowest\n      * degrees first. The multiplications signs, coefficients equals to\n      * one and null terms are not displayed (except if the polynomial is 0,\n      * (i.e. we display <code>-3</code> for a constant negative polynomial,\n      * but <code>1 - 3 x + x^2</code> if the negative coefficient is not\n      * the first one displayed).</p>\n-\n-     * @return a string representation of the polynomial\n-\n+     *\n+     * @return a string representation of the polynomial.\n      */\n     @Override\n-     public String toString() {\n-\n-       StringBuilder s = new StringBuilder();\n-       if (coefficients[0] == 0.0) {\n-         if (coefficients.length == 1) {\n-           return \"0\";\n-         }\n-       } else {\n-         s.append(Double.toString(coefficients[0]));\n-       }\n-\n-       for (int i = 1; i < coefficients.length; ++i) {\n-\n-         if (coefficients[i] != 0) {\n-\n-           if (s.length() > 0) {\n-             if (coefficients[i] < 0) {\n-               s.append(\" - \");\n-             } else {\n-               s.append(\" + \");\n-             }\n-           } else {\n-             if (coefficients[i] < 0) {\n-               s.append(\"-\");\n-             }\n-           }\n-\n-           double absAi = FastMath.abs(coefficients[i]);\n-           if ((absAi - 1) != 0) {\n-             s.append(Double.toString(absAi));\n-             s.append(' ');\n-           }\n-\n-           s.append(\"x\");\n-           if (i > 1) {\n-             s.append('^');\n-             s.append(Integer.toString(i));\n-           }\n-         }\n-\n-       }\n-\n-       return s.toString();\n-\n-     }\n+    public String toString() {\n+        StringBuilder s = new StringBuilder();\n+        if (coefficients[0] == 0.0) {\n+            if (coefficients.length == 1) {\n+                return \"0\";\n+            }\n+        } else {\n+            //         s.append(Double.toString(coefficients[0])); XXX\n+            s.append(toString(coefficients[0]));\n+        }\n+\n+        for (int i = 1; i < coefficients.length; ++i) {\n+            if (coefficients[i] != 0) {\n+                if (s.length() > 0) {\n+                    if (coefficients[i] < 0) {\n+                        s.append(\" - \");\n+                    } else {\n+                        s.append(\" + \");\n+                    }\n+                } else {\n+                    if (coefficients[i] < 0) {\n+                        s.append(\"-\");\n+                    }\n+                }\n+\n+                double absAi = FastMath.abs(coefficients[i]);\n+                if ((absAi - 1) != 0) {\n+                    //             s.append(Double.toString(absAi)); XXX\n+                    s.append(toString(absAi));\n+                    s.append(' ');\n+                }\n+\n+                s.append(\"x\");\n+                if (i > 1) {\n+                    s.append('^');\n+                    s.append(Integer.toString(i));\n+                }\n+            }\n+        }\n+\n+        return s.toString();\n+    }\n+\n+    /**\n+     * Creates a string representing a coefficient, removing \".0\" endings.\n+     *\n+     * @param coeff Coefficient.\n+     * @return a string representation of {@code coeff}.\n+     */\n+    private static String toString(double coeff) {\n+        final String c = Double.toString(coeff);\n+        if (c.endsWith(\".0\")) {\n+            return c.substring(0, c.length() - 2);\n+        } else {\n+            return c;\n+        }\n+    }\n \n     /** {@inheritDoc} */\n     @Override\n     /** {@inheritDoc} */\n     @Override\n     public boolean equals(Object obj) {\n-        if (this == obj)\n+        if (this == obj) {\n             return true;\n-        if (!(obj instanceof PolynomialFunction))\n+        }\n+        if (!(obj instanceof PolynomialFunction)) {\n             return false;\n+        }\n         PolynomialFunction other = (PolynomialFunction) obj;\n-        if (!Arrays.equals(coefficients, other.coefficients))\n+        if (!Arrays.equals(coefficients, other.coefficients)) {\n             return false;\n+        }\n         return true;\n     }\n-\n }\n--- a/src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java\n \n import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.util.FastMath;\n-// junit\n-import junit.framework.TestCase;\n+\n+import org.junit.Test;\n+import org.junit.Assert;\n \n /**\n  * Tests the PolynomialFunction implementation of a UnivariateRealFunction.\n  *\n  * @version $Revision$\n- * @author Matt Cliff <matt@mattcliff.com>\n  */\n-public final class PolynomialFunctionTest extends TestCase {\n-\n+public final class PolynomialFunctionTest {\n     /** Error tolerance for tests */\n-    protected double tolerance = 1.0e-12;\n+    protected double tolerance = 1e-12;\n \n     /**\n      * tests the value of a constant polynomial.\n      *\n      * <p>value of this is 2.5 everywhere.</p>\n      */\n+    @Test\n     public void testConstants() {\n         double[] c = { 2.5 };\n-        PolynomialFunction f = new PolynomialFunction( c );\n+        PolynomialFunction f = new PolynomialFunction(c);\n \n         // verify that we are equal to c[0] at several (nonsymmetric) places\n-        assertEquals( f.value( 0.0), c[0], tolerance );\n-        assertEquals( f.value( -1.0), c[0], tolerance );\n-        assertEquals( f.value( -123.5), c[0], tolerance );\n-        assertEquals( f.value( 3.0), c[0], tolerance );\n-        assertEquals( f.value( 456.89), c[0], tolerance );\n-\n-        assertEquals(f.degree(), 0);\n-        assertEquals(f.derivative().value(0), 0, tolerance);\n-\n-        assertEquals(f.polynomialDerivative().derivative().value(0), 0, tolerance);\n+        Assert.assertEquals(f.value(0), c[0], tolerance);\n+        Assert.assertEquals(f.value(-1), c[0], tolerance);\n+        Assert.assertEquals(f.value(-123.5), c[0], tolerance);\n+        Assert.assertEquals(f.value(3), c[0], tolerance);\n+        Assert.assertEquals(f.value(456.89), c[0], tolerance);\n+\n+        Assert.assertEquals(f.degree(), 0);\n+        Assert.assertEquals(f.derivative().value(0), 0, tolerance);\n+\n+        Assert.assertEquals(f.polynomialDerivative().derivative().value(0), 0, tolerance);\n     }\n \n     /**\n      *\n      * <p>This will test the function f(x) = 3*x - 1.5</p>\n      * <p>This will have the values\n-     *  <tt>f(0.0) = -1.5, f(-1.0) = -4.5, f(-2.5) = -9.0,\n-     *      f(0.5) = 0.0, f(1.5) = 3.0</tt> and <tt>f(3.0) = 7.5</tt>\n+     *  <tt>f(0) = -1.5, f(-1) = -4.5, f(-2.5) = -9,\n+     *      f(0.5) = 0, f(1.5) = 3</tt> and <tt>f(3) = 7.5</tt>\n      * </p>\n      */\n+    @Test\n     public void testLinear() {\n-        double[] c = { -1.5, 3.0 };\n-        PolynomialFunction f = new PolynomialFunction( c );\n+        double[] c = { -1.5, 3 };\n+        PolynomialFunction f = new PolynomialFunction(c);\n \n         // verify that we are equal to c[0] when x=0\n-        assertEquals( f.value( 0.0), c[0], tolerance );\n+        Assert.assertEquals(f.value(0), c[0], tolerance);\n \n         // now check a few other places\n-        assertEquals( -4.5, f.value( -1.0), tolerance );\n-        assertEquals( -9.0, f.value( -2.5), tolerance );\n-        assertEquals( 0.0, f.value( 0.5), tolerance );\n-        assertEquals( 3.0, f.value( 1.5), tolerance );\n-        assertEquals( 7.5, f.value( 3.0), tolerance );\n-\n-        assertEquals(f.degree(), 1);\n-\n-        assertEquals(f.polynomialDerivative().derivative().value(0), 0, tolerance);\n-\n-    }\n-\n+        Assert.assertEquals(-4.5, f.value(-1), tolerance);\n+        Assert.assertEquals(-9, f.value(-2.5), tolerance);\n+        Assert.assertEquals(0, f.value(0.5), tolerance);\n+        Assert.assertEquals(3, f.value(1.5), tolerance);\n+        Assert.assertEquals(7.5, f.value(3), tolerance);\n+\n+        Assert.assertEquals(f.degree(), 1);\n+\n+        Assert.assertEquals(f.polynomialDerivative().derivative().value(0), 0, tolerance);\n+    }\n \n     /**\n      * Tests a second order polynomial.\n      * <p> This will test the function f(x) = 2x^2 - 3x -2 = (2x+1)(x-2)</p>\n-     *\n-     */\n+     */\n+    @Test\n     public void testQuadratic() {\n-        double[] c = { -2.0, -3.0, 2.0 };\n-        PolynomialFunction f = new PolynomialFunction( c );\n+        double[] c = { -2, -3, 2 };\n+        PolynomialFunction f = new PolynomialFunction(c);\n \n         // verify that we are equal to c[0] when x=0\n-        assertEquals( f.value( 0.0), c[0], tolerance );\n+        Assert.assertEquals(f.value(0), c[0], tolerance);\n \n         // now check a few other places\n-        assertEquals( 0.0, f.value( -0.5), tolerance );\n-        assertEquals( 0.0, f.value( 2.0), tolerance );\n-        assertEquals( -2.0, f.value( 1.5), tolerance );\n-        assertEquals( 7.0, f.value( -1.5), tolerance );\n-        assertEquals( 265.5312, f.value( 12.34), tolerance );\n-\n-    }\n-\n+        Assert.assertEquals(0, f.value(-0.5), tolerance);\n+        Assert.assertEquals(0, f.value(2), tolerance);\n+        Assert.assertEquals(-2, f.value(1.5), tolerance);\n+        Assert.assertEquals(7, f.value(-1.5), tolerance);\n+        Assert.assertEquals(265.5312, f.value(12.34), tolerance);\n+    }\n \n     /**\n      * This will test the quintic function\n      *   f(x) = x^2(x-5)(x+3)(x-1) = x^5 - 3x^4 -13x^3 + 15x^2</p>\n-     *\n-     */\n+     */\n+    @Test\n     public void testQuintic() {\n-        double[] c = { 0.0, 0.0, 15.0, -13.0, -3.0, 1.0 };\n-        PolynomialFunction f = new PolynomialFunction( c );\n+        double[] c = { 0, 0, 15, -13, -3, 1 };\n+        PolynomialFunction f = new PolynomialFunction(c);\n \n         // verify that we are equal to c[0] when x=0\n-        assertEquals( f.value( 0.0), c[0], tolerance );\n+        Assert.assertEquals(f.value(0), c[0], tolerance);\n \n         // now check a few other places\n-        assertEquals( 0.0, f.value( 5.0), tolerance );\n-        assertEquals( 0.0, f.value( 1.0), tolerance );\n-        assertEquals( 0.0, f.value( -3.0), tolerance );\n-        assertEquals( 54.84375, f.value( -1.5), tolerance );\n-        assertEquals( -8.06637, f.value( 1.3), tolerance );\n-\n-        assertEquals(f.degree(), 5);\n-\n-    }\n-\n+        Assert.assertEquals(0, f.value(5), tolerance);\n+        Assert.assertEquals(0, f.value(1), tolerance);\n+        Assert.assertEquals(0, f.value(-3), tolerance);\n+        Assert.assertEquals(54.84375, f.value(-1.5), tolerance);\n+        Assert.assertEquals(-8.06637, f.value(1.3), tolerance);\n+\n+        Assert.assertEquals(f.degree(), 5);\n+    }\n \n     /**\n      * tests the firstDerivative function by comparison\n      * <tt>f(x) = x^3 - 2x^2 + 6x + 3, g(x) = 3x^2 - 4x + 6</tt>\n      * and <tt>h(x) = 6x - 4</tt>\n      */\n+    @Test\n     public void testfirstDerivativeComparison() {\n-        double[] f_coeff = { 3.0, 6.0, -2.0, 1.0 };\n-        double[] g_coeff = { 6.0, -4.0, 3.0 };\n-        double[] h_coeff = { -4.0, 6.0 };\n-\n-        PolynomialFunction f = new PolynomialFunction( f_coeff );\n-        PolynomialFunction g = new PolynomialFunction( g_coeff );\n-        PolynomialFunction h = new PolynomialFunction( h_coeff );\n+        double[] f_coeff = { 3, 6, -2, 1 };\n+        double[] g_coeff = { 6, -4, 3 };\n+        double[] h_coeff = { -4, 6 };\n+\n+        PolynomialFunction f = new PolynomialFunction(f_coeff);\n+        PolynomialFunction g = new PolynomialFunction(g_coeff);\n+        PolynomialFunction h = new PolynomialFunction(h_coeff);\n \n         // compare f' = g\n-        assertEquals( f.derivative().value(0.0), g.value(0.0), tolerance );\n-        assertEquals( f.derivative().value(1.0), g.value(1.0), tolerance );\n-        assertEquals( f.derivative().value(100.0), g.value(100.0), tolerance );\n-        assertEquals( f.derivative().value(4.1), g.value(4.1), tolerance );\n-        assertEquals( f.derivative().value(-3.25), g.value(-3.25), tolerance );\n+        Assert.assertEquals(f.derivative().value(0), g.value(0), tolerance);\n+        Assert.assertEquals(f.derivative().value(1), g.value(1), tolerance);\n+        Assert.assertEquals(f.derivative().value(100), g.value(100), tolerance);\n+        Assert.assertEquals(f.derivative().value(4.1), g.value(4.1), tolerance);\n+        Assert.assertEquals(f.derivative().value(-3.25), g.value(-3.25), tolerance);\n \n         // compare g' = h\n-        assertEquals( g.derivative().value(FastMath.PI), h.value(FastMath.PI), tolerance );\n-        assertEquals( g.derivative().value(FastMath.E),  h.value(FastMath.E),  tolerance );\n-\n-    }\n-\n+        Assert.assertEquals(g.derivative().value(FastMath.PI), h.value(FastMath.PI), tolerance);\n+        Assert.assertEquals(g.derivative().value(FastMath.E),  h.value(FastMath.E),  tolerance);\n+    }\n+\n+    @Test\n     public void testString() {\n-        PolynomialFunction p = new PolynomialFunction(new double[] { -5.0, 3.0, 1.0 });\n-        checkPolynomial(p, \"-5.0 + 3.0 x + x^2\");\n-        checkPolynomial(new PolynomialFunction(new double[] { 0.0, -2.0, 3.0 }),\n-                        \"-2.0 x + 3.0 x^2\");\n-        checkPolynomial(new PolynomialFunction(new double[] { 1.0, -2.0, 3.0 }),\n-                      \"1.0 - 2.0 x + 3.0 x^2\");\n-        checkPolynomial(new PolynomialFunction(new double[] { 0.0,  2.0, 3.0 }),\n-                       \"2.0 x + 3.0 x^2\");\n-        checkPolynomial(new PolynomialFunction(new double[] { 1.0,  2.0, 3.0 }),\n-                     \"1.0 + 2.0 x + 3.0 x^2\");\n-        checkPolynomial(new PolynomialFunction(new double[] { 1.0,  0.0, 3.0 }),\n-                     \"1.0 + 3.0 x^2\");\n-        checkPolynomial(new PolynomialFunction(new double[] { 0.0 }),\n+        PolynomialFunction p = new PolynomialFunction(new double[] { -5, 3, 1 });\n+        checkPolynomial(p, \"-5 + 3 x + x^2\");\n+        checkPolynomial(new PolynomialFunction(new double[] { 0, -2, 3 }),\n+                        \"-2 x + 3 x^2\");\n+        checkPolynomial(new PolynomialFunction(new double[] { 1, -2, 3 }),\n+                      \"1 - 2 x + 3 x^2\");\n+        checkPolynomial(new PolynomialFunction(new double[] { 0,  2, 3 }),\n+                       \"2 x + 3 x^2\");\n+        checkPolynomial(new PolynomialFunction(new double[] { 1,  2, 3 }),\n+                     \"1 + 2 x + 3 x^2\");\n+        checkPolynomial(new PolynomialFunction(new double[] { 1,  0, 3 }),\n+                     \"1 + 3 x^2\");\n+        checkPolynomial(new PolynomialFunction(new double[] { 0 }),\n                      \"0\");\n     }\n \n+    @Test\n     public void testAddition() {\n-\n-        PolynomialFunction p1 = new PolynomialFunction(new double[] { -2.0, 1.0 });\n-        PolynomialFunction p2 = new PolynomialFunction(new double[] { 2.0, -1.0, 0.0 });\n+        PolynomialFunction p1 = new PolynomialFunction(new double[] { -2, 1 });\n+        PolynomialFunction p2 = new PolynomialFunction(new double[] { 2, -1, 0 });\n         checkNullPolynomial(p1.add(p2));\n \n         p2 = p1.add(p1);\n-        checkPolynomial(p2, \"-4.0 + 2.0 x\");\n-\n-        p1 = new PolynomialFunction(new double[] { 1.0, -4.0, 2.0 });\n-        p2 = new PolynomialFunction(new double[] { -1.0, 3.0, -2.0 });\n+        checkPolynomial(p2, \"-4 + 2 x\");\n+\n+        p1 = new PolynomialFunction(new double[] { 1, -4, 2 });\n+        p2 = new PolynomialFunction(new double[] { -1, 3, -2 });\n         p1 = p1.add(p2);\n-        assertEquals(1, p1.degree());\n+        Assert.assertEquals(1, p1.degree());\n         checkPolynomial(p1, \"-x\");\n-\n-    }\n-\n+    }\n+\n+    @Test\n     public void testSubtraction() {\n-\n-        PolynomialFunction p1 = new PolynomialFunction(new double[] { -2.0, 1.0 });\n+        PolynomialFunction p1 = new PolynomialFunction(new double[] { -2, 1 });\n         checkNullPolynomial(p1.subtract(p1));\n \n-        PolynomialFunction p2 = new PolynomialFunction(new double[] { -2.0, 6.0 });\n+        PolynomialFunction p2 = new PolynomialFunction(new double[] { -2, 6 });\n         p2 = p2.subtract(p1);\n-        checkPolynomial(p2, \"5.0 x\");\n-\n-        p1 = new PolynomialFunction(new double[] { 1.0, -4.0, 2.0 });\n-        p2 = new PolynomialFunction(new double[] { -1.0, 3.0, 2.0 });\n+        checkPolynomial(p2, \"5 x\");\n+\n+        p1 = new PolynomialFunction(new double[] { 1, -4, 2 });\n+        p2 = new PolynomialFunction(new double[] { -1, 3, 2 });\n         p1 = p1.subtract(p2);\n-        assertEquals(1, p1.degree());\n-        checkPolynomial(p1, \"2.0 - 7.0 x\");\n-\n-    }\n-\n+        Assert.assertEquals(1, p1.degree());\n+        checkPolynomial(p1, \"2 - 7 x\");\n+    }\n+\n+    @Test\n     public void testMultiplication() {\n-\n-        PolynomialFunction p1 = new PolynomialFunction(new double[] { -3.0, 2.0 });\n-        PolynomialFunction p2 = new PolynomialFunction(new double[] { 3.0, 2.0, 1.0 });\n-        checkPolynomial(p1.multiply(p2), \"-9.0 + x^2 + 2.0 x^3\");\n-\n-        p1 = new PolynomialFunction(new double[] { 0.0, 1.0 });\n+        PolynomialFunction p1 = new PolynomialFunction(new double[] { -3, 2 });\n+        PolynomialFunction p2 = new PolynomialFunction(new double[] { 3, 2, 1 });\n+        checkPolynomial(p1.multiply(p2), \"-9 + x^2 + 2 x^3\");\n+\n+        p1 = new PolynomialFunction(new double[] { 0, 1 });\n         p2 = p1;\n         for (int i = 2; i < 10; ++i) {\n             p2 = p2.multiply(p1);\n             checkPolynomial(p2, \"x^\" + i);\n         }\n-\n-    }\n-\n+    }\n+\n+    @Test\n     public void testSerial() {\n-        PolynomialFunction p2 = new PolynomialFunction(new double[] { 3.0, 2.0, 1.0 });\n-        assertEquals(p2, TestUtils.serializeAndRecover(p2));\n+        PolynomialFunction p2 = new PolynomialFunction(new double[] { 3, 2, 1 });\n+        Assert.assertEquals(p2, TestUtils.serializeAndRecover(p2));\n     }\n \n     /**\n      * <tt>f(x) = x^3 - 2x^2 + 6x + 3, g(x) = 3x^2 - 4x + 6</tt>\n      * and <tt>h(x) = 6x - 4</tt>\n      */\n+    @Test\n     public void testMath341() {\n-        double[] f_coeff = { 3.0, 6.0, -2.0, 1.0 };\n-        double[] g_coeff = { 6.0, -4.0, 3.0 };\n-        double[] h_coeff = { -4.0, 6.0 };\n-\n-        PolynomialFunction f = new PolynomialFunction( f_coeff );\n-        PolynomialFunction g = new PolynomialFunction( g_coeff );\n-        PolynomialFunction h = new PolynomialFunction( h_coeff );\n+        double[] f_coeff = { 3, 6, -2, 1 };\n+        double[] g_coeff = { 6, -4, 3 };\n+        double[] h_coeff = { -4, 6 };\n+\n+        PolynomialFunction f = new PolynomialFunction(f_coeff);\n+        PolynomialFunction g = new PolynomialFunction(g_coeff);\n+        PolynomialFunction h = new PolynomialFunction(h_coeff);\n \n         // compare f' = g\n-        assertEquals( f.derivative().value(0.0), g.value(0.0), tolerance );\n-        assertEquals( f.derivative().value(1.0), g.value(1.0), tolerance );\n-        assertEquals( f.derivative().value(100.0), g.value(100.0), tolerance );\n-        assertEquals( f.derivative().value(4.1), g.value(4.1), tolerance );\n-        assertEquals( f.derivative().value(-3.25), g.value(-3.25), tolerance );\n+        Assert.assertEquals(f.derivative().value(0), g.value(0), tolerance);\n+        Assert.assertEquals(f.derivative().value(1), g.value(1), tolerance);\n+        Assert.assertEquals(f.derivative().value(100), g.value(100), tolerance);\n+        Assert.assertEquals(f.derivative().value(4.1), g.value(4.1), tolerance);\n+        Assert.assertEquals(f.derivative().value(-3.25), g.value(-3.25), tolerance);\n \n         // compare g' = h\n-        assertEquals( g.derivative().value(FastMath.PI), h.value(FastMath.PI), tolerance );\n-        assertEquals( g.derivative().value(FastMath.E),  h.value(FastMath.E),  tolerance );\n+        Assert.assertEquals(g.derivative().value(FastMath.PI), h.value(FastMath.PI), tolerance);\n+        Assert.assertEquals(g.derivative().value(FastMath.E),  h.value(FastMath.E),  tolerance);\n     }\n \n     public void checkPolynomial(PolynomialFunction p, String reference) {\n-        assertEquals(reference, p.toString());\n+        Assert.assertEquals(reference, p.toString());\n     }\n \n     private void checkNullPolynomial(PolynomialFunction p) {\n         for (double coefficient : p.getCoefficients()) {\n-            assertEquals(0.0, coefficient, 1.0e-15);\n+            Assert.assertEquals(0, coefficient, 1e-15);\n         }\n     }\n-\n }\n--- a/src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java\n \n import org.apache.commons.math.util.FastMath;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n+import org.junit.Assert;\n \n /**\n  * Tests the PolynomialsUtils class.\n  *\n  * @version $Revision$ $Date$\n  */\n-public class PolynomialsUtilsTest extends TestCase {\n-\n+public class PolynomialsUtilsTest {\n+\n+    @Test\n     public void testFirstChebyshevPolynomials() {\n-\n-        checkPolynomial(PolynomialsUtils.createChebyshevPolynomial(3), \"-3.0 x + 4.0 x^3\");\n-        checkPolynomial(PolynomialsUtils.createChebyshevPolynomial(2), \"-1.0 + 2.0 x^2\");\n+        checkPolynomial(PolynomialsUtils.createChebyshevPolynomial(3), \"-3 x + 4 x^3\");\n+        checkPolynomial(PolynomialsUtils.createChebyshevPolynomial(2), \"-1 + 2 x^2\");\n         checkPolynomial(PolynomialsUtils.createChebyshevPolynomial(1), \"x\");\n-        checkPolynomial(PolynomialsUtils.createChebyshevPolynomial(0), \"1.0\");\n-\n-        checkPolynomial(PolynomialsUtils.createChebyshevPolynomial(7), \"-7.0 x + 56.0 x^3 - 112.0 x^5 + 64.0 x^7\");\n-        checkPolynomial(PolynomialsUtils.createChebyshevPolynomial(6), \"-1.0 + 18.0 x^2 - 48.0 x^4 + 32.0 x^6\");\n-        checkPolynomial(PolynomialsUtils.createChebyshevPolynomial(5), \"5.0 x - 20.0 x^3 + 16.0 x^5\");\n-        checkPolynomial(PolynomialsUtils.createChebyshevPolynomial(4), \"1.0 - 8.0 x^2 + 8.0 x^4\");\n-\n-    }\n-\n+        checkPolynomial(PolynomialsUtils.createChebyshevPolynomial(0), \"1\");\n+\n+        checkPolynomial(PolynomialsUtils.createChebyshevPolynomial(7), \"-7 x + 56 x^3 - 112 x^5 + 64 x^7\");\n+        checkPolynomial(PolynomialsUtils.createChebyshevPolynomial(6), \"-1 + 18 x^2 - 48 x^4 + 32 x^6\");\n+        checkPolynomial(PolynomialsUtils.createChebyshevPolynomial(5), \"5 x - 20 x^3 + 16 x^5\");\n+        checkPolynomial(PolynomialsUtils.createChebyshevPolynomial(4), \"1 - 8 x^2 + 8 x^4\");\n+\n+    }\n+\n+    @Test\n     public void testChebyshevBounds() {\n         for (int k = 0; k < 12; ++k) {\n             PolynomialFunction Tk = PolynomialsUtils.createChebyshevPolynomial(k);\n-            for (double x = -1.0; x <= 1.0; x += 0.02) {\n-                assertTrue(k + \" \" + Tk.value(x), FastMath.abs(Tk.value(x)) < (1.0 + 1.0e-12));\n+            for (double x = -1; x <= 1; x += 0.02) {\n+                Assert.assertTrue(k + \" \" + Tk.value(x), FastMath.abs(Tk.value(x)) < (1 + 1e-12));\n             }\n         }\n     }\n \n+    @Test\n     public void testChebyshevDifferentials() {\n         for (int k = 0; k < 12; ++k) {\n \n         }\n     }\n \n+    @Test\n     public void testFirstHermitePolynomials() {\n-\n-        checkPolynomial(PolynomialsUtils.createHermitePolynomial(3), \"-12.0 x + 8.0 x^3\");\n-        checkPolynomial(PolynomialsUtils.createHermitePolynomial(2), \"-2.0 + 4.0 x^2\");\n-        checkPolynomial(PolynomialsUtils.createHermitePolynomial(1), \"2.0 x\");\n-        checkPolynomial(PolynomialsUtils.createHermitePolynomial(0), \"1.0\");\n-\n-        checkPolynomial(PolynomialsUtils.createHermitePolynomial(7), \"-1680.0 x + 3360.0 x^3 - 1344.0 x^5 + 128.0 x^7\");\n-        checkPolynomial(PolynomialsUtils.createHermitePolynomial(6), \"-120.0 + 720.0 x^2 - 480.0 x^4 + 64.0 x^6\");\n-        checkPolynomial(PolynomialsUtils.createHermitePolynomial(5), \"120.0 x - 160.0 x^3 + 32.0 x^5\");\n-        checkPolynomial(PolynomialsUtils.createHermitePolynomial(4), \"12.0 - 48.0 x^2 + 16.0 x^4\");\n+        checkPolynomial(PolynomialsUtils.createHermitePolynomial(3), \"-12 x + 8 x^3\");\n+        checkPolynomial(PolynomialsUtils.createHermitePolynomial(2), \"-2 + 4 x^2\");\n+        checkPolynomial(PolynomialsUtils.createHermitePolynomial(1), \"2 x\");\n+        checkPolynomial(PolynomialsUtils.createHermitePolynomial(0), \"1\");\n+\n+        checkPolynomial(PolynomialsUtils.createHermitePolynomial(7), \"-1680 x + 3360 x^3 - 1344 x^5 + 128 x^7\");\n+        checkPolynomial(PolynomialsUtils.createHermitePolynomial(6), \"-120 + 720 x^2 - 480 x^4 + 64 x^6\");\n+        checkPolynomial(PolynomialsUtils.createHermitePolynomial(5), \"120 x - 160 x^3 + 32 x^5\");\n+        checkPolynomial(PolynomialsUtils.createHermitePolynomial(4), \"12 - 48 x^2 + 16 x^4\");\n \n     }\n \n         }\n     }\n \n+    @Test\n     public void testFirstLaguerrePolynomials() {\n-\n-        checkPolynomial(PolynomialsUtils.createLaguerrePolynomial(3), 6l, \"6.0 - 18.0 x + 9.0 x^2 - x^3\");\n-        checkPolynomial(PolynomialsUtils.createLaguerrePolynomial(2), 2l, \"2.0 - 4.0 x + x^2\");\n-        checkPolynomial(PolynomialsUtils.createLaguerrePolynomial(1), 1l, \"1.0 - x\");\n-        checkPolynomial(PolynomialsUtils.createLaguerrePolynomial(0), 1l, \"1.0\");\n+        checkPolynomial(PolynomialsUtils.createLaguerrePolynomial(3), 6l, \"6 - 18 x + 9 x^2 - x^3\");\n+        checkPolynomial(PolynomialsUtils.createLaguerrePolynomial(2), 2l, \"2 - 4 x + x^2\");\n+        checkPolynomial(PolynomialsUtils.createLaguerrePolynomial(1), 1l, \"1 - x\");\n+        checkPolynomial(PolynomialsUtils.createLaguerrePolynomial(0), 1l, \"1\");\n \n         checkPolynomial(PolynomialsUtils.createLaguerrePolynomial(7), 5040l,\n-                \"5040.0 - 35280.0 x + 52920.0 x^2 - 29400.0 x^3\"\n-                + \" + 7350.0 x^4 - 882.0 x^5 + 49.0 x^6 - x^7\");\n+                \"5040 - 35280 x + 52920 x^2 - 29400 x^3\"\n+                + \" + 7350 x^4 - 882 x^5 + 49 x^6 - x^7\");\n         checkPolynomial(PolynomialsUtils.createLaguerrePolynomial(6),  720l,\n-                \"720.0 - 4320.0 x + 5400.0 x^2 - 2400.0 x^3 + 450.0 x^4\"\n-                + \" - 36.0 x^5 + x^6\");\n+                \"720 - 4320 x + 5400 x^2 - 2400 x^3 + 450 x^4\"\n+                + \" - 36 x^5 + x^6\");\n         checkPolynomial(PolynomialsUtils.createLaguerrePolynomial(5),  120l,\n-        \"120.0 - 600.0 x + 600.0 x^2 - 200.0 x^3 + 25.0 x^4 - x^5\");\n+        \"120 - 600 x + 600 x^2 - 200 x^3 + 25 x^4 - x^5\");\n         checkPolynomial(PolynomialsUtils.createLaguerrePolynomial(4),   24l,\n-        \"24.0 - 96.0 x + 72.0 x^2 - 16.0 x^3 + x^4\");\n+        \"24 - 96 x + 72 x^2 - 16 x^3 + x^4\");\n \n     }\n \n         }\n     }\n \n+    @Test\n     public void testFirstLegendrePolynomials() {\n-\n-        checkPolynomial(PolynomialsUtils.createLegendrePolynomial(3),  2l, \"-3.0 x + 5.0 x^3\");\n-        checkPolynomial(PolynomialsUtils.createLegendrePolynomial(2),  2l, \"-1.0 + 3.0 x^2\");\n+        checkPolynomial(PolynomialsUtils.createLegendrePolynomial(3),  2l, \"-3 x + 5 x^3\");\n+        checkPolynomial(PolynomialsUtils.createLegendrePolynomial(2),  2l, \"-1 + 3 x^2\");\n         checkPolynomial(PolynomialsUtils.createLegendrePolynomial(1),  1l, \"x\");\n-        checkPolynomial(PolynomialsUtils.createLegendrePolynomial(0),  1l, \"1.0\");\n-\n-        checkPolynomial(PolynomialsUtils.createLegendrePolynomial(7), 16l, \"-35.0 x + 315.0 x^3 - 693.0 x^5 + 429.0 x^7\");\n-        checkPolynomial(PolynomialsUtils.createLegendrePolynomial(6), 16l, \"-5.0 + 105.0 x^2 - 315.0 x^4 + 231.0 x^6\");\n-        checkPolynomial(PolynomialsUtils.createLegendrePolynomial(5),  8l, \"15.0 x - 70.0 x^3 + 63.0 x^5\");\n-        checkPolynomial(PolynomialsUtils.createLegendrePolynomial(4),  8l, \"3.0 - 30.0 x^2 + 35.0 x^4\");\n-\n-    }\n-\n+        checkPolynomial(PolynomialsUtils.createLegendrePolynomial(0),  1l, \"1\");\n+\n+        checkPolynomial(PolynomialsUtils.createLegendrePolynomial(7), 16l, \"-35 x + 315 x^3 - 693 x^5 + 429 x^7\");\n+        checkPolynomial(PolynomialsUtils.createLegendrePolynomial(6), 16l, \"-5 + 105 x^2 - 315 x^4 + 231 x^6\");\n+        checkPolynomial(PolynomialsUtils.createLegendrePolynomial(5),  8l, \"15 x - 70 x^3 + 63 x^5\");\n+        checkPolynomial(PolynomialsUtils.createLegendrePolynomial(4),  8l, \"3 - 30 x^2 + 35 x^4\");\n+\n+    }\n+\n+    @Test\n     public void testLegendreDifferentials() {\n         for (int k = 0; k < 12; ++k) {\n \n         }\n     }\n \n+    @Test\n     public void testHighDegreeLegendre() {\n         PolynomialsUtils.createLegendrePolynomial(40);\n         double[] l40 = PolynomialsUtils.createLegendrePolynomial(40).getCoefficients();\n-        double denominator = 274877906944.0;\n+        double denominator = 274877906944d;\n         double[] numerators = new double[] {\n-                          +34461632205.0,            -28258538408100.0,          +3847870979902950.0,        -207785032914759300.0,\n-                  +5929294332103310025.0,     -103301483474866556880.0,    +1197358103913226000200.0,    -9763073770369381232400.0,\n-              +58171647881784229843050.0,  -260061484647976556945400.0,  +888315281771246239250340.0, -2345767627188139419665400.0,\n-            +4819022625419112503443050.0, -7710436200670580005508880.0, +9566652323054238154983240.0, -9104813935044723209570256.0,\n-            +6516550296251767619752905.0, -3391858621221953912598660.0, +1211378079007840683070950.0,  -265365894974690562152100.0,\n-              +26876802183334044115405.0\n+                          +34461632205d,            -28258538408100d,          +3847870979902950d,        -207785032914759300d,\n+                  +5929294332103310025d,     -103301483474866556880d,    +1197358103913226000200d,    -9763073770369381232400d,\n+              +58171647881784229843050d,  -260061484647976556945400d,  +888315281771246239250340d, -2345767627188139419665400d,\n+            +4819022625419112503443050d, -7710436200670580005508880d, +9566652323054238154983240d, -9104813935044723209570256d,\n+            +6516550296251767619752905d, -3391858621221953912598660d, +1211378079007840683070950d,  -265365894974690562152100d,\n+              +26876802183334044115405d\n         };\n         for (int i = 0; i < l40.length; ++i) {\n             if (i % 2 == 0) {\n                 double ci = numerators[i / 2] / denominator;\n-                assertEquals(ci, l40[i], FastMath.abs(ci) * 1.0e-15);\n+                Assert.assertEquals(ci, l40[i], FastMath.abs(ci) * 1e-15);\n             } else {\n-                assertEquals(0.0, l40[i], 0.0);\n+                Assert.assertEquals(0, l40[i], 0);\n             }\n         }\n     }\n \n     private void checkPolynomial(PolynomialFunction p, long denominator, String reference) {\n         PolynomialFunction q = new PolynomialFunction(new double[] { denominator});\n-        assertEquals(reference, p.multiply(q).toString());\n+        Assert.assertEquals(reference, p.multiply(q).toString());\n     }\n \n     private void checkPolynomial(PolynomialFunction p, String reference) {\n-        assertEquals(reference, p.toString());\n+        Assert.assertEquals(reference, p.toString());\n     }\n \n     private void checkNullPolynomial(PolynomialFunction p) {\n         for (double coefficient : p.getCoefficients()) {\n-            assertEquals(0.0, coefficient, 1.0e-13);\n-        }\n-    }\n-\n+            Assert.assertEquals(0, coefficient, 1e-13);\n+        }\n+    }\n }", "timestamp": 1298811490, "metainfo": ""}