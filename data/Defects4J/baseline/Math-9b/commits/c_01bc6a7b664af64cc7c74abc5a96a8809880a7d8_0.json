{"sha": "01bc6a7b664af64cc7c74abc5a96a8809880a7d8", "log": "added min/max getters for real vectors For compatibility reasons, these methods have been put in the topmost abstract class but not in the interface yet. It could be pushed to the interface when next major version will be released. JIRA: MATH-334  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n         return d;\n     }\n \n+    /** Get the index of the minimum entry.\n+     * @return index of the minimum entry or -1 if vector length is 0\n+     * or all entries are NaN\n+     */\n+    public int getMinIndex() {\n+        int minIndex    = -1;\n+        double minValue = Double.POSITIVE_INFINITY;\n+        Iterator<Entry> iterator = iterator();\n+        while (iterator.hasNext()) {\n+            final Entry entry = iterator.next();\n+            if (entry.getValue() <= minValue) {\n+                minIndex = entry.getIndex();\n+                minValue = entry.getValue();\n+            }\n+        }\n+        return minIndex;\n+    }\n+\n+    /** Get the value of the minimum entry.\n+     * @return value of the minimum entry or NaN if all entries are NaN\n+     */\n+    public double getMinValue() {\n+        final int minIndex = getMinIndex();\n+        return minIndex < 0 ? Double.NaN : getEntry(minIndex);\n+    }\n+\n+    /** Get the index of the maximum entry.\n+     * @return index of the maximum entry or -1 if vector length is 0\n+     * or all entries are NaN\n+     */\n+    public int getMaxIndex() {\n+        int maxIndex    = -1;\n+        double maxValue = Double.NEGATIVE_INFINITY;\n+        Iterator<Entry> iterator = iterator();\n+        while (iterator.hasNext()) {\n+            final Entry entry = iterator.next();\n+            if (entry.getValue() >= maxValue) {\n+                maxIndex = entry.getIndex();\n+                maxValue = entry.getValue();\n+            }\n+        }\n+        return maxIndex;\n+    }\n+\n+    /** Get the value of the maximum entry.\n+     * @return value of the maximum entry or NaN if all entries are NaN\n+     */\n+    public double getMaxValue() {\n+        final int maxIndex = getMaxIndex();\n+        return maxIndex < 0 ? Double.NaN : getEntry(maxIndex);\n+    }\n+\n     /** {@inheritDoc} */\n     public RealVector mapAbs() {\n         return copy().mapAbsToSelf();\n--- a/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java\n     }\n \n \n+    public void testMinMax()  {\n+        ArrayRealVector v1 = new ArrayRealVector(new double[] { 0, -6, 4, 12, 7 });\n+        assertEquals(1,  v1.getMinIndex());\n+        assertEquals(-6, v1.getMinValue(), 1.0e-12);\n+        assertEquals(3,  v1.getMaxIndex());\n+        assertEquals(12, v1.getMaxValue(), 1.0e-12);\n+        ArrayRealVector v2 = new ArrayRealVector(new double[] { Double.NaN, 3, Double.NaN, -2 });\n+        assertEquals(3,  v2.getMinIndex());\n+        assertEquals(-2, v2.getMinValue(), 1.0e-12);\n+        assertEquals(1,  v2.getMaxIndex());\n+        assertEquals(3, v2.getMaxValue(), 1.0e-12);\n+        ArrayRealVector v3 = new ArrayRealVector(new double[] { Double.NaN, Double.NaN });\n+        assertEquals(-1,  v3.getMinIndex());\n+        assertTrue(Double.isNaN(v3.getMinValue()));\n+        assertEquals(-1,  v3.getMaxIndex());\n+        assertTrue(Double.isNaN(v3.getMaxValue()));\n+        ArrayRealVector v4 = new ArrayRealVector(new double[0]);\n+        assertEquals(-1,  v4.getMinIndex());\n+        assertTrue(Double.isNaN(v4.getMinValue()));\n+        assertEquals(-1,  v4.getMaxIndex());\n+        assertTrue(Double.isNaN(v4.getMaxValue()));\n+    }\n+\n+\n     /** verifies that two vectors are close (sup norm) */\n     protected void assertClose(String msg, double[] m, double[] n,\n             double tolerance) {", "timestamp": 1264707751, "metainfo": ""}