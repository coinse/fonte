{"sha": "cd7b7ace9552b2119e6f3cb1cecbf3a16fc24532", "log": "Changed G-test method names to follow conventions in the inference package.  JIRA: MATH-878.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/stat/inference/GTest.java\n+++ b/src/main/java/org/apache/commons/math3/stat/inference/GTest.java\n      * @throws DimensionMismatchException if the array lengths do not match or\n      * are less than 2.\n      */\n-    public double gValueGoodnessOfFit(final double[] expected, final long[] observed)\n+    public double g(final double[] expected, final long[] observed)\n             throws NotPositiveException, NotStrictlyPositiveException,\n             DimensionMismatchException {\n \n      * frequency distribution described by the expected counts.</p>\n      *\n      * <p>The probability returned is the tail probability beyond\n-     * {@link #gValueGoodnessOfFit(double[], long[]) gValueGoodnessOfFit(expected, observed)}\n+     * {@link #g(double[], long[]) gValueGoodnessOfFit(expected, observed)}\n      * in the ChiSquare distribution with degrees of freedom one less than the\n      * common length of {@code expected} and {@code observed}.</p>\n      *\n      * @throws MaxCountExceededException if an error occurs computing the\n      * p-value.\n      */\n-    public double gTestGoodnessOfFitPValue(final double[] expected, final long[] observed)\n+    public double gTest(final double[] expected, final long[] observed)\n             throws NotPositiveException, NotStrictlyPositiveException,\n             DimensionMismatchException, MaxCountExceededException {\n \n         final ChiSquaredDistribution distribution =\n                 new ChiSquaredDistribution(expected.length - 1.0);\n         return 1.0 - distribution.cumulativeProbability(\n-                gValueGoodnessOfFit(expected, observed));\n+                g(expected, observed));\n     }\n \n     /**\n      * (2nd ed.). Sparky House Publishing, Baltimore, Maryland.\n      *\n      * <p> The probability returned is the tail probability beyond\n-     * {@link #gValueGoodnessOfFit(double[], long[]) gValueGoodnessOfFit(expected, observed)}\n+     * {@link #g(double[], long[]) gValueGoodnessOfFit(expected, observed)}\n      * in the ChiSquare distribution with degrees of freedom two less than the\n      * common length of {@code expected} and {@code observed}.</p>\n      *\n      * @throws MaxCountExceededException if an error occurs computing the\n      * p-value.\n      */\n-    public double gTestGoodnessOfFitIntrinsicPValue(final double[] expected, final long[] observed)\n+    public double gTestIntrinsic(final double[] expected, final long[] observed)\n             throws NotPositiveException, NotStrictlyPositiveException,\n             DimensionMismatchException, MaxCountExceededException {\n \n         final ChiSquaredDistribution distribution =\n                 new ChiSquaredDistribution(expected.length - 2.0);\n         return 1.0 - distribution.cumulativeProbability(\n-                gValueGoodnessOfFit(expected, observed));\n+                g(expected, observed));\n     }\n \n     /**\n      * use </p><p>\n      * {@code gTest(expected, observed, 0.01)}</p>\n      *\n-     * <p>Returns true iff {@link #gTestGoodnessOfFitPValue(double[], long[])\n+     * <p>Returns true iff {@link #gTest(double[], long[])\n      *  gTestGoodnessOfFitPValue(expected, observed)} < alpha</p>\n      *\n      * <p><strong>Preconditions</strong>: <ul>\n      * @throws OutOfRangeException if alpha is not strictly greater than zero\n      * and less than or equal to 0.5\n      */\n-    public boolean gTestGoodnessOfFit(final double[] expected, final long[] observed,\n+    public boolean gTest(final double[] expected, final long[] observed,\n             final double alpha)\n             throws NotPositiveException, NotStrictlyPositiveException,\n             DimensionMismatchException, OutOfRangeException, MaxCountExceededException {\n             throw new OutOfRangeException(LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL,\n                     alpha, 0, 0.5);\n         }\n-        return gTestGoodnessOfFitPValue(expected, observed) < alpha;\n+        return gTest(expected, observed) < alpha;\n     }\n \n     /**\n      * {@code observed1} or {@code observed2} are zero, or if the count\n      * at the same index is zero for both arrays.\n      */\n-    public double gValueDataSetsComparison(final long[] observed1, final long[] observed2)\n+    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n             throws DimensionMismatchException, NotPositiveException, ZeroException {\n \n         // Make sure lengths are same\n \n     /**\n      * Calculates the root log-likelihood ratio for 2 state Datasets. See\n-     * {@link #gValueDataSetsComparison(long[], long[] )}.\n+     * {@link #gDataSetsComparison(long[], long[] )}.\n      *\n      * <p>Given two events A and B, let k11 be the number of times both events\n      * occur, k12 the incidence of B without A, k21 the count of A without B,\n      */\n     public double rootLogLikelihoodRatio(final long k11, long k12,\n             final long k21, final long k22) {\n-        final double llr = gValueDataSetsComparison(\n+        final double llr = gDataSetsComparison(\n                 new long[]{k11, k12}, new long[]{k21, k22});\n         double sqrt = FastMath.sqrt(llr);\n         if ((double) k11 / (k11 + k12) < (double) k21 / (k21 + k22)) {\n      * can reject the null hypothesis that the observed counts conform to the\n      * same distribution. </p>\n      *\n-     * <p>See {@link #gTestGoodnessOfFitPValue(double[], long[])} for details\n+     * <p>See {@link #gTest(double[], long[])} for details\n      * on how the p-value is computed.  The degrees of of freedom used to\n      * perform the test is one less than the common length of the input observed\n      * count arrays.</p>\n      * @throws MaxCountExceededException if an error occurs computing the\n      * p-value.\n      */\n-    public double gTestDataSetsComparisonPValue(final long[] observed1,\n+    public double gTestDataSetsComparison(final long[] observed1,\n             final long[] observed2)\n             throws DimensionMismatchException, NotPositiveException, ZeroException,\n             MaxCountExceededException {\n         final ChiSquaredDistribution distribution = new ChiSquaredDistribution(\n                 (double) observed1.length - 1);\n         return 1 - distribution.cumulativeProbability(\n-                gValueDataSetsComparison(observed1, observed2));\n+                gDataSetsComparison(observed1, observed2));\n     }\n \n     /**\n      * significance level {@code alpha}. Returns true iff the null\n      * hypothesis can be rejected  with 100 * (1 - alpha) percent confidence.\n      * </p>\n-     * <p>See {@link #gValueDataSetsComparison(long[], long[])} for details\n+     * <p>See {@link #gDataSetsComparison(long[], long[])} for details\n      * on the formula used to compute the G (LLR) statistic used in the test and\n-     * {@link #gTestGoodnessOfFitPValue(double[], long[])} for information on how\n+     * {@link #gTest(double[], long[])} for information on how\n      * the observed significance level is computed. The degrees of of freedom used\n      * to perform the test is one less than the common length of the input observed\n      * count arrays. </p>\n             throw new OutOfRangeException(\n                     LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL, alpha, 0, 0.5);\n         }\n-        return gTestDataSetsComparisonPValue(observed1, observed2) < alpha;\n+        return gTestDataSetsComparison(observed1, observed2) < alpha;\n     }\n }\n--- a/src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java\n         };\n \n         Assert.assertEquals(\"G test statistic\",\n-                0.348721, testStatistic.gValueGoodnessOfFit(exp, obs), 1E-6);\n-        final double p_gtgf = testStatistic.gTestGoodnessOfFitPValue(exp, obs);\n+                0.348721, testStatistic.g(exp, obs), 1E-6);\n+        final double p_gtgf = testStatistic.gTest(exp, obs);\n         Assert.assertEquals(\"g-Test p-value\", 0.55483, p_gtgf, 1E-5);\n \n-        Assert.assertFalse(testStatistic.gTestGoodnessOfFit(exp, obs, 0.05));\n+        Assert.assertFalse(testStatistic.gTest(exp, obs, 0.05));\n     }\n \n     @Test\n             70, 79, 3, 4\n         };\n         Assert.assertEquals(\"G test statistic\",\n-                13.144799, testStatistic.gValueGoodnessOfFit(exp, obs), 1E-6);\n-        final double p_gtgf = testStatistic.gTestGoodnessOfFitPValue(exp, obs);\n+                13.144799, testStatistic.g(exp, obs), 1E-6);\n+        final double p_gtgf = testStatistic.gTest(exp, obs);\n         Assert.assertEquals(\"g-Test p-value\", 0.004333, p_gtgf, 1E-5);\n \n-        Assert.assertTrue(testStatistic.gTestGoodnessOfFit(exp, obs, 0.05));\n+        Assert.assertTrue(testStatistic.gTest(exp, obs, 0.05));\n     }\n \n     @Test\n         };\n \n         Assert.assertEquals(\"G test statistic\",\n-                4.5554, testStatistic.gValueGoodnessOfFit(exp, obs), 1E-4);\n+                4.5554, testStatistic.g(exp, obs), 1E-4);\n         // Intrinisic (Hardy-Weinberg proportions) P-Value should be 0.033\n-        final double p_gtgf = testStatistic.gTestGoodnessOfFitIntrinsicPValue(exp, obs);\n+        final double p_gtgf = testStatistic.gTestIntrinsic(exp, obs);\n         Assert.assertEquals(\"g-Test p-value\", 0.0328, p_gtgf, 1E-4);\n \n-        Assert.assertFalse(testStatistic.gTestGoodnessOfFit(exp, obs, 0.05));\n+        Assert.assertFalse(testStatistic.gTest(exp, obs, 0.05));\n     }\n \n     @Test\n             807, 759, 184\n         };\n \n-        final double g = testStatistic.gValueDataSetsComparison(obs1, obs2);\n+        final double g = testStatistic.gDataSetsComparison(obs1, obs2);\n \n         Assert.assertEquals(\"G test statistic\",\n                 7.3008170, g, 1E-6);\n-        final double p_gti = testStatistic.gTestDataSetsComparisonPValue(obs1, obs2);\n+        final double p_gti = testStatistic.gTestDataSetsComparison(obs1, obs2);\n \n         Assert.assertEquals(\"g-Test p-value\", 0.0259805, p_gti, 1E-6);\n         Assert.assertTrue(testStatistic.gTestDataSetsComparison(obs1, obs2, 0.05));\n             116, 67, 161\n         };\n \n-        final double g = testStatistic.gValueDataSetsComparison(obs1, obs2);\n+        final double g = testStatistic.gDataSetsComparison(obs1, obs2);\n \n         Assert.assertEquals(\"G test statistic\",\n                 6.227288, g, 1E-6);\n-        final double p_gti = testStatistic.gTestDataSetsComparisonPValue(obs1, obs2);\n+        final double p_gti = testStatistic.gTestDataSetsComparison(obs1, obs2);\n \n         Assert.assertEquals(\"g-Test p-value\", 0.04443, p_gti, 1E-5);\n         Assert.assertTrue(testStatistic.gTestDataSetsComparison(obs1, obs2, 0.05));\n             42, 49\n         };\n \n-        final double g = testStatistic.gValueDataSetsComparison(obs1, obs2);\n+        final double g = testStatistic.gDataSetsComparison(obs1, obs2);\n         Assert.assertEquals(\"G test statistic\",\n                 2.8187, g, 1E-4);\n-        final double p_gti = testStatistic.gTestDataSetsComparisonPValue(obs1, obs2);\n+        final double p_gti = testStatistic.gTestDataSetsComparison(obs1, obs2);\n         Assert.assertEquals(\"g-Test p-value\", 0.09317325, p_gti, 1E-6);\n \n         Assert.assertFalse(testStatistic.gTestDataSetsComparison(obs1, obs2, 0.05));\n         long[] observed1 = {10, -1, 12, 10, 15};\n         long[] observed2 = {15, 10, 10, 15, 5};\n         try {\n-            testStatistic.gTestDataSetsComparisonPValue(\n+            testStatistic.gTestDataSetsComparison(\n                     observed1, observed2);\n             Assert.fail(\"Expecting NotPositiveException - negative count\");\n         } catch (NotPositiveException ex) {\n         long[] observed3 = {10, 0, 12, 10, 15};\n         long[] observed4 = {15, 0, 10, 15, 5};\n         try {\n-            testStatistic.gTestDataSetsComparisonPValue(\n+            testStatistic.gTestDataSetsComparison(\n                     observed3, observed4);\n             Assert.fail(\"Expecting ZeroException - double 0's\");\n         } catch (ZeroException ex) {\n         long[] observed5 = {10, 10, 12, 10, 15};\n         long[] observed6 = {0, 0, 0, 0, 0};\n         try {\n-            testStatistic.gTestDataSetsComparisonPValue(\n+            testStatistic.gTestDataSetsComparison(\n                     observed5, observed6);\n             Assert.fail(\"Expecting ZeroException - vanishing counts\");\n         } catch (ZeroException ex) {\n         final double[] expected = { 1, 1, 2 };\n         final long[] observed2 = {3, 4};\n         try {\n-            testStatistic.gTestGoodnessOfFitPValue(expected, observed);\n+            testStatistic.gTest(expected, observed);\n             Assert.fail(\"arrays have different lengths, DimensionMismatchException expected\");\n         } catch (DimensionMismatchException ex) {\n             // expected\n         }\n         try {\n-            testStatistic.gTestDataSetsComparisonPValue(observed, observed2);\n+            testStatistic.gTestDataSetsComparison(observed, observed2);\n             Assert.fail(\"arrays have different lengths, DimensionMismatchException expected\");\n         } catch (DimensionMismatchException ex) {\n             // expected\n         final double[] expected = { 1, 1, 2, 3};\n         final long[] observed2 = {3, 4, 5, 0};\n         try {\n-            testStatistic.gTestGoodnessOfFitPValue(expected, observed);\n+            testStatistic.gTest(expected, observed);\n             Assert.fail(\"negative observed count, NotPositiveException expected\");\n         } catch (NotPositiveException ex) {\n             // expected\n         }\n         try {\n-            testStatistic.gTestDataSetsComparisonPValue(observed, observed2);\n+            testStatistic.gTestDataSetsComparison(observed, observed2);\n             Assert.fail(\"negative observed count, NotPositiveException expected\");\n         } catch (NotPositiveException ex) {\n             // expected\n         final long[] observed = { 0, 1, 2, -3 };\n         final double[] expected = { 1, 0, 2, 3};\n         try {\n-            testStatistic.gTestGoodnessOfFitPValue(expected, observed);\n+            testStatistic.gTest(expected, observed);\n             Assert.fail(\"zero expected count, NotStrictlyPositiveException expected\");\n         } catch (NotStrictlyPositiveException ex) {\n             // expected\n         final double[] expected = { 1, 2, 2, 3};\n         final long[] observed2 = { 0, 2, 2, 3 };\n         try {\n-            testStatistic.gTestGoodnessOfFit(expected, observed, 0.8);\n+            testStatistic.gTest(expected, observed, 0.8);\n             Assert.fail(\"zero expected count, NotStrictlyPositiveException expected\");\n         } catch (OutOfRangeException ex) {\n             // expected\n       final double[] expected3 = {1, 1, 1, 1, 1};\n       final double tol = 1E-15;\n       Assert.assertEquals(\n-              testStatistic.gTestGoodnessOfFitPValue(expected1, observed),\n-              testStatistic.gTestGoodnessOfFitPValue(expected2, observed),\n+              testStatistic.gTest(expected1, observed),\n+              testStatistic.gTest(expected2, observed),\n               tol);\n       Assert.assertEquals(\n-              testStatistic.gTestGoodnessOfFitPValue(expected1, observed),\n-              testStatistic.gTestGoodnessOfFitPValue(expected3, observed),\n+              testStatistic.gTest(expected1, observed),\n+              testStatistic.gTest(expected3, observed),\n               tol);\n     }\n ", "timestamp": 1352694586, "metainfo": ""}