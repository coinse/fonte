{"sha": "d3d2350a00d7b132cf9cfc92bd921d0c0c28244f", "log": "MATH-496 Create FastMath copySign methods  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math/util/FastMath.java\n     // Generic helper methods\n     \n     /**\n-     * Get the sign information (works even for 0).\n-     * \n-     * @param d the value to check\n-     * \n-     * @return +1.0 or -1.0, never 0.0\n-     */\n-    private static double getSign(double d){ // TODO perhaps move to MathUtils?\n-        long l = Double.doubleToLongBits(d);\n-        return l < 0 ? -1.0 : 1.0;\n-    }\n-\n-    /**\n      * Get the high order bits from the mantissa.\n      * Equivalent to adding and subtracting HEX_40000 but also works for very large numbers\n      * \n         int idx;\n \n         if (xa == 0.0) { // Matches +/- 0.0; return correct sign\n-            return leftPlane ? getSign(xa) * Math.PI : xa;\n+            return leftPlane ? copySign(Math.PI, xa) : xa;\n         }\n \n         if (xa < 0) {\n                 if (x > 0) {\n                     return y; // return +/- 0.0\n                 } else {\n-                    return getSign(y) * Math.PI;\n+                    return copySign(Math.PI, y);\n                 }\n             }\n \n         return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation\n     }\n     \n+    /**\n+     * Returns the first argument with the sign of the second argument.\n+     * A NaN {@code sign} argument is treated as positive.\n+     * \n+     * @param magnitude the value to return\n+     * @param sign the sign for the returned value\n+     * @return the magnitude with the same sign as the {@code sign} argument\n+     */\n+    public static double copySign(double magnitude, double sign){\n+        long m = Double.doubleToLongBits(magnitude);\n+        long s = Double.doubleToLongBits(sign);\n+        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK\n+            return magnitude;\n+        }\n+        return -magnitude; // flip sign\n+    }\n+\n+    /**\n+     * Returns the first argument with the sign of the second argument.\n+     * A NaN {@code sign} argument is treated as positive.\n+     * \n+     * @param magnitude the value to return\n+     * @param sign the sign for the returned value\n+     * @return the magnitude with the same sign as the {@code sign} argument\n+     */\n+    public static float copySign(float magnitude, float sign){\n+        int m = Float.floatToIntBits(magnitude);\n+        int s = Float.floatToIntBits(sign);\n+        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK\n+            return magnitude;\n+        }\n+        return -magnitude; // flip sign\n+    }\n }", "timestamp": 1295744249, "metainfo": ""}