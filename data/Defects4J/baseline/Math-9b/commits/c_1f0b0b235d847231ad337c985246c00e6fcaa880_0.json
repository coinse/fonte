{"sha": "1f0b0b235d847231ad337c985246c00e6fcaa880", "log": "Rearrange so static classes are at the end; no need to scroll past to get to the code  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math/util/FastMath.java\n     /** Napier's constant e, base of the natural logarithm. */\n     public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;\n \n-    /** Index of exp(0) in the array of integer exponentials. */\n-    private static final int EXP_INT_TABLE_MAX_INDEX = 750;\n-\n-    /** Length of the array of integer exponentials. */\n-    private static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;\n+    private static final int TWO_POWER_10 = 1024;\n \n     /** Indicator for precomputed tables.\n      * <p>\n      * </p>\n      */\n     private static final boolean USE_PRECOMPUTED_TABLES = false;\n+\n+    /** log(2) (high bits). */\n+    private static final double LN_2_A = 0.693147063255310059;\n+\n+    /** log(2) (low bits). */\n+    private static final double LN_2_B = 1.17304635250823482e-7;\n+\n+    /** Coefficients for log, when input 0.99 < x < 1.01. */\n+    private static final double LN_QUICK_COEF[][] = {\n+        {1.0, 5.669184079525E-24},\n+        {-0.25, -0.25},\n+        {0.3333333134651184, 1.986821492305628E-8},\n+        {-0.25, -6.663542893624021E-14},\n+        {0.19999998807907104, 1.1921056801463227E-8},\n+        {-0.1666666567325592, -7.800414592973399E-9},\n+        {0.1428571343421936, 5.650007086920087E-9},\n+        {-0.12502530217170715, -7.44321345601866E-11},\n+        {0.11113807559013367, 9.219544613762692E-9},\n+    };\n+\n+    /** Coefficients for log in the range of 1.0 < x < 1.0 + 2^-10. */\n+    private static final double LN_HI_PREC_COEF[][] = {\n+        {1.0, -6.032174644509064E-23},\n+        {-0.25, -0.25},\n+        {0.3333333134651184, 1.9868161777724352E-8},\n+        {-0.2499999701976776, -2.957007209750105E-8},\n+        {0.19999954104423523, 1.5830993332061267E-10},\n+        {-0.16624879837036133, -2.6033824355191673E-8}\n+    };\n+\n+    /** Sine, Cosine, Tangent tables are for 0, 1/8, 2/8, ... 13/8 = PI/2 approx. */\n+    private static final int SINE_TABLE_LEN = 14;\n+    \n+    /** Sine table (high bits). */\n+    private static final double SINE_TABLE_A[] =\n+        {\n+        +0.0d,\n+        +0.1246747374534607d,\n+        +0.24740394949913025d,\n+        +0.366272509098053d,\n+        +0.4794255495071411d,\n+        +0.5850973129272461d,\n+        +0.6816387176513672d,\n+        +0.7675435543060303d,\n+        +0.8414709568023682d,\n+        +0.902267575263977d,\n+        +0.9489846229553223d,\n+        +0.9808930158615112d,\n+        +0.9974949359893799d,\n+        +0.9985313415527344d,\n+    };\n+\n+    /** Sine table (low bits). */\n+    private static final double SINE_TABLE_B[] =\n+        {\n+        +0.0d,\n+        -4.068233003401932E-9d,\n+        +9.755392680573412E-9d,\n+        +1.9987994582857286E-8d,\n+        -1.0902938113007961E-8d,\n+        -3.9986783938944604E-8d,\n+        +4.23719669792332E-8d,\n+        -5.207000323380292E-8d,\n+        +2.800552834259E-8d,\n+        +1.883511811213715E-8d,\n+        -3.5997360512765566E-9d,\n+        +4.116164446561962E-8d,\n+        +5.0614674548127384E-8d,\n+        -1.0129027912496858E-9d,\n+    };\n+\n+    /** Cosine table (high bits). */\n+    private static final double COSINE_TABLE_A[] =\n+        {\n+        +1.0d,\n+        +0.9921976327896118d,\n+        +0.9689123630523682d,\n+        +0.9305076599121094d,\n+        +0.8775825500488281d,\n+        +0.8109631538391113d,\n+        +0.7316888570785522d,\n+        +0.6409968137741089d,\n+        +0.5403022766113281d,\n+        +0.4311765432357788d,\n+        +0.3153223395347595d,\n+        +0.19454771280288696d,\n+        +0.07073719799518585d,\n+        -0.05417713522911072d,\n+    };\n+\n+    /** Cosine table (low bits). */\n+    private static final double COSINE_TABLE_B[] =\n+        {\n+        +0.0d,\n+        +3.4439717236742845E-8d,\n+        +5.865827662008209E-8d,\n+        -3.7999795083850525E-8d,\n+        +1.184154459111628E-8d,\n+        -3.43338934259355E-8d,\n+        +1.1795268640216787E-8d,\n+        +4.438921624363781E-8d,\n+        +2.925681159240093E-8d,\n+        -2.6437112632041807E-8d,\n+        +2.2860509143963117E-8d,\n+        -4.813899778443457E-9d,\n+        +3.6725170580355583E-9d,\n+        +2.0217439756338078E-10d,\n+    };\n+\n+\n+    /** Tangent table, used by atan() (high bits). */\n+    private static final double TANGENT_TABLE_A[] =\n+        {\n+        +0.0d,\n+        +0.1256551444530487d,\n+        +0.25534194707870483d,\n+        +0.3936265707015991d,\n+        +0.5463024377822876d,\n+        +0.7214844226837158d,\n+        +0.9315965175628662d,\n+        +1.1974215507507324d,\n+        +1.5574076175689697d,\n+        +2.092571258544922d,\n+        +3.0095696449279785d,\n+        +5.041914939880371d,\n+        +14.101419448852539d,\n+        -18.430862426757812d,\n+    };\n+\n+    /** Tangent table, used by atan() (low bits). */\n+    private static final double TANGENT_TABLE_B[] =\n+        {\n+        +0.0d,\n+        -7.877917738262007E-9d,\n+        -2.5857668567479893E-8d,\n+        +5.2240336371356666E-9d,\n+        +5.206150291559893E-8d,\n+        +1.8307188599677033E-8d,\n+        -5.7618793749770706E-8d,\n+        +7.848361555046424E-8d,\n+        +1.0708593250394448E-7d,\n+        +1.7827257129423813E-8d,\n+        +2.893485277253286E-8d,\n+        +3.1660099222737955E-7d,\n+        +4.983191803254889E-7d,\n+        -3.356118100840571E-7d,\n+    };\n+\n+    /** Bits of 1/(2*pi), need for reducePayneHanek(). */\n+    private static final long RECIP_2PI[] = new long[] {\n+        (0x28be60dbL << 32) | 0x9391054aL,\n+        (0x7f09d5f4L << 32) | 0x7d4d3770L,\n+        (0x36d8a566L << 32) | 0x4f10e410L,\n+        (0x7f9458eaL << 32) | 0xf7aef158L,\n+        (0x6dc91b8eL << 32) | 0x909374b8L,\n+        (0x01924bbaL << 32) | 0x82746487L,\n+        (0x3f877ac7L << 32) | 0x2c4a69cfL,\n+        (0xba208d7dL << 32) | 0x4baed121L,\n+        (0x3a671c09L << 32) | 0xad17df90L,\n+        (0x4e64758eL << 32) | 0x60d4ce7dL,\n+        (0x272117e2L << 32) | 0xef7e4a0eL,\n+        (0xc7fe25ffL << 32) | 0xf7816603L,\n+        (0xfbcbc462L << 32) | 0xd6829b47L,\n+        (0xdb4d9fb3L << 32) | 0xc9f2c26dL,\n+        (0xd3d18fd9L << 32) | 0xa797fa8bL,\n+        (0x5d49eeb1L << 32) | 0xfaf97c5eL,\n+        (0xcf41ce7dL << 32) | 0xe294a4baL,\n+         0x9afed7ecL << 32  };\n+\n+    /** Bits of pi/4, need for reducePayneHanek(). */\n+    private static final long PI_O_4_BITS[] = new long[] {\n+        (0xc90fdaa2L << 32) | 0x2168c234L,\n+        (0xc4c6628bL << 32) | 0x80dc1cd1L };\n+\n+    /** Eighths.\n+     * This is used by sinQ, because its faster to do a table lookup than\n+     * a multiply in this time-critical routine\n+     */\n+    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};\n+\n+    /** Table of 2^((n+2)/3) */\n+    private static final double CBRTTWO[] = { 0.6299605249474366,\n+                                            0.7937005259840998,\n+                                            1.0,\n+                                            1.2599210498948732,\n+                                            1.5874010519681994 };\n+\n+    /*\n+     *  There are 52 bits in the mantissa of a double.\n+     *  For additional precision, the code splits double numbers into two parts,\n+     *  by clearing the low order 30 bits if possible, and then performs the arithmetic\n+     *  on each half separately.\n+     */\n+\n+    /**\n+     * 0x40000000 - used to split a double into two parts, both with the low order bits cleared.\n+     * Equivalent to 2^30.\n+     */\n+    private static final long HEX_40000000 = 0x40000000L; // 1073741824L\n+\n+    /** Mask used to clear low order 30 bits */\n+    private static final long MASK_30BITS = -1L - (HEX_40000000 -1); // 0xFFFFFFFFC0000000L;\n+\n+    /** 2^52 - double numbers this large must be integral (no fraction) or NaN or Infinite */\n+    private static final double TWO_POWER_52 = 4503599627370496.0;\n+    \n+    // Initialize tables\n+    // static {\n+    //   if (USE_PRECOMPUTED_TABLES) { // suppress table initialisation as now hard-coded\n+    //     int i;\n+\n+    //     // Build the sine and cosine tables\n+    //     buildSinCosTables();\n+    //   }\n+    // }\n+\n+    /**\n+     * Private Constructor\n+     */\n+    private FastMath() {\n+    }\n+\n+    // Generic helper methods\n+\n+    /**\n+     * Get the high order bits from the mantissa.\n+     * Equivalent to adding and subtracting HEX_40000 but also works for very large numbers\n+     *\n+     * @param d the value to split\n+     * @return the high order part of the mantissa\n+     */\n+    private static double doubleHighPart(double d) {\n+        if (d > -MathUtils.SAFE_MIN && d < MathUtils.SAFE_MIN){\n+            return d; // These are un-normalised - don't try to convert\n+        }\n+        long xl = Double.doubleToLongBits(d);\n+        xl = xl & MASK_30BITS; // Drop low order bits\n+        return Double.longBitsToDouble(xl);\n+    }\n+\n+    /** Compute the square root of a number.\n+     * <p><b>Note:</b> this implementation currently delegates to {@link Math#sqrt}\n+     * @param a number on which evaluation is done\n+     * @return square root of a\n+     */\n+    public static double sqrt(final double a) {\n+        return Math.sqrt(a);\n+    }\n+\n+    /** Compute the hyperbolic cosine of a number.\n+     * @param x number on which evaluation is done\n+     * @return hyperbolic cosine of x\n+     */\n+    public static double cosh(double x) {\n+      if (x != x) {\n+          return x;\n+      }\n+\n+      // cosh[z] = (exp(z) + exp(-z))/2\n+\n+      // for numbers with magnitude 20 or so, \n+      // exp(-z) can be ignored in comparison with exp(z)\n+\n+      if (x > 20.0) {\n+          return exp(x)/2.0;\n+      }\n+\n+      if (x < -20) {\n+          return exp(-x)/2.0;\n+      }\n+\n+      double hiPrec[] = new double[2];\n+      if (x < 0.0) {\n+          x = -x;\n+      }\n+      exp(x, 0.0, hiPrec);\n+\n+      double ya = hiPrec[0] + hiPrec[1];\n+      double yb = -(ya - hiPrec[0] - hiPrec[1]);\n+\n+      double temp = ya * HEX_40000000;\n+      double yaa = ya + temp - temp;\n+      double yab = ya - yaa;\n+\n+      // recip = 1/y\n+      double recip = 1.0/ya;\n+      temp = recip * HEX_40000000;\n+      double recipa = recip + temp - temp;\n+      double recipb = recip - recipa;\n+\n+      // Correct for rounding in division\n+      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;\n+      // Account for yb\n+      recipb += -yb * recip * recip;\n+\n+      // y = y + 1/y\n+      temp = ya + recipa;\n+      yb += -(temp - ya - recipa);\n+      ya = temp;\n+      temp = ya + recipb;\n+      yb += -(temp - ya - recipb);\n+      ya = temp;\n+\n+      double result = ya + yb;\n+      result *= 0.5;\n+      return result;\n+    }\n+\n+    /** Compute the hyperbolic sine of a number.\n+     * @param x number on which evaluation is done\n+     * @return hyperbolic sine of x\n+     */\n+    public static double sinh(double x) {\n+      boolean negate = false;\n+      if (x != x) {\n+          return x;\n+      }\n+\n+      // sinh[z] = (exp(z) - exp(-z) / 2\n+      \n+      // for values of z larger than about 20, \n+      // exp(-z) can be ignored in comparison with exp(z)\n+      \n+      if (x > 20.0) {\n+          return exp(x)/2.0;\n+      }\n+\n+      if (x < -20) {\n+          return -exp(-x)/2.0;\n+      }\n+\n+      if (x == 0) {\n+          return x;\n+      }\n+\n+      if (x < 0.0) {\n+          x = -x;\n+          negate = true;\n+      }\n+\n+      double result;\n+\n+      if (x > 0.25) {\n+          double hiPrec[] = new double[2];\n+          exp(x, 0.0, hiPrec);\n+\n+          double ya = hiPrec[0] + hiPrec[1];\n+          double yb = -(ya - hiPrec[0] - hiPrec[1]);\n+\n+          double temp = ya * HEX_40000000;\n+          double yaa = ya + temp - temp;\n+          double yab = ya - yaa;\n+\n+          // recip = 1/y\n+          double recip = 1.0/ya;\n+          temp = recip * HEX_40000000;\n+          double recipa = recip + temp - temp;\n+          double recipb = recip - recipa;\n+\n+          // Correct for rounding in division\n+          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;\n+          // Account for yb\n+          recipb += -yb * recip * recip;\n+\n+          recipa = -recipa;\n+          recipb = -recipb;\n+\n+          // y = y + 1/y\n+          temp = ya + recipa;\n+          yb += -(temp - ya - recipa);\n+          ya = temp;\n+          temp = ya + recipb;\n+          yb += -(temp - ya - recipb);\n+          ya = temp;\n+\n+          result = ya + yb;\n+          result *= 0.5;\n+      }\n+      else {\n+          double hiPrec[] = new double[2];\n+          expm1(x, hiPrec);\n+\n+          double ya = hiPrec[0] + hiPrec[1];\n+          double yb = -(ya - hiPrec[0] - hiPrec[1]);\n+\n+          /* Compute expm1(-x) = -expm1(x) / (expm1(x) + 1) */\n+          double denom = 1.0 + ya;\n+          double denomr = 1.0 / denom;\n+          double denomb = -(denom - 1.0 - ya) + yb;\n+          double ratio = ya * denomr;\n+          double temp = ratio * HEX_40000000;\n+          double ra = ratio + temp - temp;\n+          double rb = ratio - ra;\n+\n+          temp = denom * HEX_40000000;\n+          double za = denom + temp - temp;\n+          double zb = denom - za;\n+\n+          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;\n+\n+          // Adjust for yb\n+          rb += yb*denomr;                        // numerator\n+          rb += -ya * denomb * denomr * denomr;   // denominator\n+\n+          // y = y - 1/y\n+          temp = ya + ra;\n+          yb += -(temp - ya - ra);\n+          ya = temp;\n+          temp = ya + rb;\n+          yb += -(temp - ya - rb);\n+          ya = temp;\n+\n+          result = ya + yb;\n+          result *= 0.5;\n+      }\n+\n+      if (negate) {\n+          result = -result;\n+      }\n+\n+      return result;\n+    }\n+\n+    /** Compute the hyperbolic tangent of a number.\n+     * @param x number on which evaluation is done\n+     * @return hyperbolic tangent of x\n+     */\n+    public static double tanh(double x) {\n+      boolean negate = false;\n+\n+      if (x != x) {\n+          return x;\n+      }\n+\n+      // tanh[z] = sinh[z] / cosh[z] \n+      // = (exp(z) - exp(-z)) / (exp(z) + exp(-z))\n+      // = (exp(2x) - 1) / (exp(2x) + 1)\n+      \n+      // for magnitude > 20, sinh[z] == cosh[z] in double precision\n+\n+      if (x > 20.0) {\n+          return 1.0;\n+      }\n+\n+      if (x < -20) {\n+          return -1.0;\n+      }\n+\n+      if (x == 0) {\n+          return x;\n+      }\n+\n+      if (x < 0.0) {\n+          x = -x;\n+          negate = true;\n+      }\n+\n+      double result;\n+      if (x >= 0.5) {\n+          double hiPrec[] = new double[2];\n+          // tanh(x) = (exp(2x) - 1) / (exp(2x) + 1)\n+          exp(x*2.0, 0.0, hiPrec);\n+\n+          double ya = hiPrec[0] + hiPrec[1];\n+          double yb = -(ya - hiPrec[0] - hiPrec[1]);\n+\n+          /* Numerator */\n+          double na = -1.0 + ya;\n+          double nb = -(na + 1.0 - ya);\n+          double temp = na + yb;\n+          nb += -(temp - na - yb);\n+          na = temp;\n+\n+          /* Denominator */\n+          double da = 1.0 + ya;\n+          double db = -(da - 1.0 - ya);\n+          temp = da + yb;\n+          db += -(temp - da - yb);\n+          da = temp;\n+\n+          temp = da * HEX_40000000;\n+          double daa = da + temp - temp;\n+          double dab = da - daa;\n+\n+          // ratio = na/da\n+          double ratio = na/da;\n+          temp = ratio * HEX_40000000;\n+          double ratioa = ratio + temp - temp;\n+          double ratiob = ratio - ratioa;\n+\n+          // Correct for rounding in division\n+          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;\n+\n+          // Account for nb\n+          ratiob += nb / da;\n+          // Account for db\n+          ratiob += -db * na / da / da;\n+\n+          result = ratioa + ratiob;\n+      }\n+      else {\n+          double hiPrec[] = new double[2];\n+          // tanh(x) = expm1(2x) / (expm1(2x) + 2)\n+          expm1(x*2.0, hiPrec);\n+\n+          double ya = hiPrec[0] + hiPrec[1];\n+          double yb = -(ya - hiPrec[0] - hiPrec[1]);\n+\n+          /* Numerator */\n+          double na = ya;\n+          double nb = yb;\n+\n+          /* Denominator */\n+          double da = 2.0 + ya;\n+          double db = -(da - 2.0 - ya);\n+          double temp = da + yb;\n+          db += -(temp - da - yb);\n+          da = temp;\n+\n+          temp = da * HEX_40000000;\n+          double daa = da + temp - temp;\n+          double dab = da - daa;\n+\n+          // ratio = na/da\n+          double ratio = na/da;\n+          temp = ratio * HEX_40000000;\n+          double ratioa = ratio + temp - temp;\n+          double ratiob = ratio - ratioa;\n+\n+          // Correct for rounding in division\n+          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;\n+\n+          // Account for nb\n+          ratiob += nb / da;\n+          // Account for db\n+          ratiob += -db * na / da / da;\n+\n+          result = ratioa + ratiob;\n+      }\n+\n+      if (negate) {\n+          result = -result;\n+      }\n+\n+      return result;\n+    }\n+\n+    /** Compute the inverse hyperbolic cosine of a number.\n+     * @param a number on which evaluation is done\n+     * @return inverse hyperbolic cosine of a\n+     */\n+    public static double acosh(final double a) {\n+        return FastMath.log(a + FastMath.sqrt(a * a - 1));\n+    }\n+\n+    /** Compute the inverse hyperbolic sine of a number.\n+     * @param a number on which evaluation is done\n+     * @return inverse hyperbolic sine of a\n+     */\n+    public static double asinh(double a) {\n+\n+        boolean negative = false;\n+        if (a < 0) {\n+            negative = true;\n+            a = -a;\n+        }\n+\n+        double absAsinh;\n+        if (a > 0.167) {\n+            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);\n+        } else {\n+            final double a2 = a * a;\n+            if (a > 0.097) {\n+                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);\n+            } else if (a > 0.036) {\n+                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);\n+            } else if (a > 0.0036) {\n+                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);\n+            } else {\n+                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0) * 3.0 / 4.0) / 2.0);\n+            }\n+        }\n+\n+        return negative ? -absAsinh : absAsinh;\n+\n+    }\n+\n+    /** Compute the inverse hyperbolic tangent of a number.\n+     * @param a number on which evaluation is done\n+     * @return inverse hyperbolic tangent of a\n+     */\n+    public static double atanh(double a) {\n+\n+        boolean negative = false;\n+        if (a < 0) {\n+            negative = true;\n+            a = -a;\n+        }\n+\n+        double absAtanh;\n+        if (a > 0.15) {\n+            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));\n+        } else {\n+            final double a2 = a * a;\n+            if (a > 0.087) {\n+                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));\n+            } else if (a > 0.031) {\n+                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));\n+            } else if (a > 0.003) {\n+                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0)))));\n+            } else {\n+                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));\n+            }\n+        }\n+\n+        return negative ? -absAtanh : absAtanh;\n+\n+    }\n+\n+    /** Compute the signum of a number.\n+     * The signum is -1 for negative numbers, +1 for positive numbers and 0 otherwise\n+     * @param a number on which evaluation is done\n+     * @return -1.0, -0.0, +0.0, +1.0 or NaN depending on sign of a\n+     */\n+    public static double signum(final double a) {\n+        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a\n+    }\n+\n+    /** Compute the signum of a number.\n+     * The signum is -1 for negative numbers, +1 for positive numbers and 0 otherwise\n+     * @param a number on which evaluation is done\n+     * @return -1.0, -0.0, +0.0, +1.0 or NaN depending on sign of a\n+     */\n+    public static float signum(final float a) {\n+        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a\n+    }\n+\n+    /** Compute next number towards positive infinity.\n+     * @param a number to which neighbor should be computed\n+     * @return neighbor of a towards positive infinity\n+     */\n+    public static double nextUp(final double a) {\n+        return nextAfter(a, Double.POSITIVE_INFINITY);\n+    }\n+\n+    /** Compute next number towards positive infinity.\n+     * @param a number to which neighbor should be computed\n+     * @return neighbor of a towards positive infinity\n+     */\n+    public static float nextUp(final float a) {\n+        return nextAfter(a, Float.POSITIVE_INFINITY);\n+    }\n+\n+    /** Returns a pseudo-random number between 0.0 and 1.0.\n+     * <p><b>Note:</b> this implementation currently delegates to {@link Math#random}\n+     * @return a random number between 0.0 and 1.0\n+     */\n+    public static double random() {\n+        return Math.random();\n+    }\n+\n+    /**\n+     * Exponential function.\n+     *\n+     * Computes exp(x), function result is nearly rounded.   It will be correctly\n+     * rounded to the theoretical value for 99.9% of input values, otherwise it will\n+     * have a 1 UPL error.\n+     *\n+     * Method:\n+     *    Lookup intVal = exp(int(x))\n+     *    Lookup fracVal = exp(int(x-int(x) / 1024.0) * 1024.0 );\n+     *    Compute z as the exponential of the remaining bits by a polynomial minus one\n+     *    exp(x) = intVal * fracVal * (1 + z)\n+     *\n+     * Accuracy:\n+     *    Calculation is done with 63 bits of precision, so result should be correctly\n+     *    rounded for 99.9% of input values, with less than 1 ULP error otherwise.\n+     *\n+     * @param x   a double\n+     * @return double e<sup>x</sup>\n+     */\n+    public static double exp(double x) {\n+        return exp(x, 0.0, null);\n+    }\n+\n+    /**\n+     * Internal helper method for exponential function.\n+     * @param x original argument of the exponential function\n+     * @param extra extra bits of precision on input (To Be Confirmed)\n+     * @param hiPrec extra bits of precision on output (To Be Confirmed)\n+     * @return exp(x)\n+     */\n+    private static double exp(double x, double extra, double[] hiPrec) {\n+        double intPartA;\n+        double intPartB;\n+        int intVal;\n+\n+        /* Lookup exp(floor(x)).\n+         * intPartA will have the upper 22 bits, intPartB will have the lower\n+         * 52 bits.\n+         */\n+        if (x < 0.0) {\n+            intVal = (int) -x;\n+\n+            if (intVal > 746) {\n+                if (hiPrec != null) {\n+                    hiPrec[0] = 0.0;\n+                    hiPrec[1] = 0.0;\n+                }\n+                return 0.0;\n+            }\n+\n+            if (intVal > 709) {\n+                /* This will produce a subnormal output */\n+                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;\n+                if (hiPrec != null) {\n+                    hiPrec[0] /= 285040095144011776.0;\n+                    hiPrec[1] /= 285040095144011776.0;\n+                }\n+                return result;\n+            }\n+\n+            if (intVal == 709) {\n+                /* exp(1.494140625) is nearly a machine number... */\n+                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;\n+                if (hiPrec != null) {\n+                    hiPrec[0] /= 4.455505956692756620;\n+                    hiPrec[1] /= 4.455505956692756620;\n+                }\n+                return result;\n+            }\n+\n+            intVal++;\n+\n+            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];\n+            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];\n+\n+            intVal = -intVal;\n+        } else {\n+            intVal = (int) x;\n+\n+            if (intVal > 709) {\n+                if (hiPrec != null) {\n+                    hiPrec[0] = Double.POSITIVE_INFINITY;\n+                    hiPrec[1] = 0.0;\n+                }\n+                return Double.POSITIVE_INFINITY;\n+            }\n+\n+            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];\n+            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];\n+        }\n+\n+        /* Get the fractional part of x, find the greatest multiple of 2^-10 less than\n+         * x and look up the exp function of it.\n+         * fracPartA will have the upper 22 bits, fracPartB the lower 52 bits.\n+         */\n+        final int intFrac = (int) ((x - intVal) * 1024.0);\n+        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];\n+        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];\n+\n+        /* epsilon is the difference in x from the nearest multiple of 2^-10.  It\n+         * has a value in the range 0 <= epsilon < 2^-10.\n+         * Do the subtraction from x as the last step to avoid possible loss of percison.\n+         */\n+        final double epsilon = x - (intVal + intFrac / 1024.0);\n+\n+        /* Compute z = exp(epsilon) - 1.0 via a minimax polynomial.  z has\n+       full double precision (52 bits).  Since z < 2^-10, we will have\n+       62 bits of precision when combined with the contant 1.  This will be\n+       used in the last addition below to get proper rounding. */\n+\n+        /* Remez generated polynomial.  Converges on the interval [0, 2^-10], error\n+       is less than 0.5 ULP */\n+        double z = 0.04168701738764507;\n+        z = z * epsilon + 0.1666666505023083;\n+        z = z * epsilon + 0.5000000000042687;\n+        z = z * epsilon + 1.0;\n+        z = z * epsilon + -3.940510424527919E-20;\n+\n+        /* Compute (intPartA+intPartB) * (fracPartA+fracPartB) by binomial\n+       expansion.\n+       tempA is exact since intPartA and intPartB only have 22 bits each.\n+       tempB will have 52 bits of precision.\n+         */\n+        double tempA = intPartA * fracPartA;\n+        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;\n+\n+        /* Compute the result.  (1+z)(tempA+tempB).  Order of operations is\n+       important.  For accuracy add by increasing size.  tempA is exact and\n+       much larger than the others.  If there are extra bits specified from the\n+       pow() function, use them. */\n+        final double tempC = tempB + tempA;\n+        final double result;\n+        if (extra != 0.0) {\n+            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;\n+        } else {\n+            result = tempC*z + tempB + tempA;\n+        }\n+\n+        if (hiPrec != null) {\n+            // If requesting high precision\n+            hiPrec[0] = tempA;\n+            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;\n+        }\n+\n+        return result;\n+    }\n+\n+    /** Compute exp(x) - 1\n+     * @param x number to compute shifted exponential\n+     * @return exp(x) - 1\n+     */\n+    public static double expm1(double x) {\n+      return expm1(x, null);\n+    }\n+\n+    /** Internal helper method for expm1\n+     * @param x number to compute shifted exponential\n+     * @param hiPrecOut receive high precision result for -1.0 < x < 1.0\n+     * @return exp(x) - 1\n+     */\n+    private static double expm1(double x, double hiPrecOut[]) {\n+        if (x != x || x == 0.0) { // NaN or zero\n+            return x;\n+        }\n+\n+        if (x <= -1.0 || x >= 1.0) {\n+            // If not between +/- 1.0\n+            //return exp(x) - 1.0;\n+            double hiPrec[] = new double[2];\n+            exp(x, 0.0, hiPrec);\n+            if (x > 0.0) {\n+                return -1.0 + hiPrec[0] + hiPrec[1];\n+            } else {\n+                final double ra = -1.0 + hiPrec[0];\n+                double rb = -(ra + 1.0 - hiPrec[0]);\n+                rb += hiPrec[1];\n+                return ra + rb;\n+            }\n+        }\n+\n+        double baseA;\n+        double baseB;\n+        double epsilon;\n+        boolean negative = false;\n+\n+        if (x < 0.0) {\n+            x = -x;\n+            negative = true;\n+        }\n+\n+        {\n+            int intFrac = (int) (x * 1024.0);\n+            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;\n+            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];\n+\n+            double temp = tempA + tempB;\n+            tempB = -(temp - tempA - tempB);\n+            tempA = temp;\n+\n+            temp = tempA * HEX_40000000;\n+            baseA = tempA + temp - temp;\n+            baseB = tempB + (tempA - baseA);\n+\n+            epsilon = x - intFrac/1024.0;\n+        }\n+\n+\n+        /* Compute expm1(epsilon) */\n+        double zb = 0.008336750013465571;\n+        zb = zb * epsilon + 0.041666663879186654;\n+        zb = zb * epsilon + 0.16666666666745392;\n+        zb = zb * epsilon + 0.49999999999999994;\n+        zb = zb * epsilon;\n+        zb = zb * epsilon;\n+\n+        double za = epsilon;\n+        double temp = za + zb;\n+        zb = -(temp - za - zb);\n+        za = temp;\n+\n+        temp = za * HEX_40000000;\n+        temp = za + temp - temp;\n+        zb += za - temp;\n+        za = temp;\n+\n+        /* Combine the parts.   expm1(a+b) = expm1(a) + expm1(b) + expm1(a)*expm1(b) */\n+        double ya = za * baseA;\n+        //double yb = za*baseB + zb*baseA + zb*baseB;\n+        temp = ya + za * baseB;\n+        double yb = -(temp - ya - za * baseB);\n+        ya = temp;\n+\n+        temp = ya + zb * baseA;\n+        yb += -(temp - ya - zb * baseA);\n+        ya = temp;\n+\n+        temp = ya + zb * baseB;\n+        yb += -(temp - ya - zb*baseB);\n+        ya = temp;\n+\n+        //ya = ya + za + baseA;\n+        //yb = yb + zb + baseB;\n+        temp = ya + baseA;\n+        yb += -(temp - baseA - ya);\n+        ya = temp;\n+\n+        temp = ya + za;\n+        //yb += (ya > za) ? -(temp - ya - za) : -(temp - za - ya);\n+        yb += -(temp - ya - za);\n+        ya = temp;\n+\n+        temp = ya + baseB;\n+        //yb += (ya > baseB) ? -(temp - ya - baseB) : -(temp - baseB - ya);\n+        yb += -(temp - ya - baseB);\n+        ya = temp;\n+\n+        temp = ya + zb;\n+        //yb += (ya > zb) ? -(temp - ya - zb) : -(temp - zb - ya);\n+        yb += -(temp - ya - zb);\n+        ya = temp;\n+\n+        if (negative) {\n+            /* Compute expm1(-x) = -expm1(x) / (expm1(x) + 1) */\n+            double denom = 1.0 + ya;\n+            double denomr = 1.0 / denom;\n+            double denomb = -(denom - 1.0 - ya) + yb;\n+            double ratio = ya * denomr;\n+            temp = ratio * HEX_40000000;\n+            final double ra = ratio + temp - temp;\n+            double rb = ratio - ra;\n+\n+            temp = denom * HEX_40000000;\n+            za = denom + temp - temp;\n+            zb = denom - za;\n+\n+            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;\n+\n+            // f(x) = x/1+x\n+            // Compute f'(x)\n+            // Product rule:  d(uv) = du*v + u*dv\n+            // Chain rule:  d(f(g(x)) = f'(g(x))*f(g'(x))\n+            // d(1/x) = -1/(x*x)\n+            // d(1/1+x) = -1/( (1+x)^2) *  1 =  -1/((1+x)*(1+x))\n+            // d(x/1+x) = -x/((1+x)(1+x)) + 1/1+x = 1 / ((1+x)(1+x))\n+\n+            // Adjust for yb\n+            rb += yb * denomr;                      // numerator\n+            rb += -ya * denomb * denomr * denomr;   // denominator\n+\n+            // negate\n+            ya = -ra;\n+            yb = -rb;\n+        }\n+\n+        if (hiPrecOut != null) {\n+            hiPrecOut[0] = ya;\n+            hiPrecOut[1] = yb;\n+        }\n+\n+        return ya + yb;\n+    }\n+\n+    /**\n+     * Natural logarithm.\n+     *\n+     * @param x   a double\n+     * @return log(x)\n+     */\n+    public static double log(final double x) {\n+        return log(x, null);\n+    }\n+\n+    /**\n+     * Internal helper method for natural logarithm function.\n+     * @param x original argument of the natural logarithm function\n+     * @param hiPrec extra bits of precision on output (To Be Confirmed)\n+     * @return log(x)\n+     */\n+    private static double log(final double x, final double[] hiPrec) {\n+        if (x==0) { // Handle special case of +0/-0\n+            return Double.NEGATIVE_INFINITY;\n+        }\n+        long bits = Double.doubleToLongBits(x);\n+\n+        /* Handle special cases of negative input, and NaN */\n+        if ((bits & 0x8000000000000000L) != 0 || x != x) {\n+            if (x != 0.0) {\n+                if (hiPrec != null) {\n+                    hiPrec[0] = Double.NaN;\n+                }\n+\n+                return Double.NaN;\n+            }\n+        }\n+\n+        /* Handle special cases of Positive infinity. */\n+        if (x == Double.POSITIVE_INFINITY) {\n+            if (hiPrec != null) {\n+                hiPrec[0] = Double.POSITIVE_INFINITY;\n+            }\n+\n+            return Double.POSITIVE_INFINITY;\n+        }\n+\n+        /* Extract the exponent */\n+        int exp = (int)(bits >> 52)-1023;\n+\n+        if ((bits & 0x7ff0000000000000L) == 0) {\n+            // Subnormal!\n+            if (x == 0) {\n+                // Zero\n+                if (hiPrec != null) {\n+                    hiPrec[0] = Double.NEGATIVE_INFINITY;\n+                }\n+\n+                return Double.NEGATIVE_INFINITY;\n+            }\n+\n+            /* Normalize the subnormal number. */\n+            bits <<= 1;\n+            while ( (bits & 0x0010000000000000L) == 0) {\n+                exp--;\n+                bits <<= 1;\n+            }\n+        }\n+\n+\n+        if (exp == -1 || exp == 0) {\n+            if (x < 1.01 && x > 0.99 && hiPrec == null) {\n+                /* The normal method doesn't work well in the range [0.99, 1.01], so call do a straight\n+           polynomial expansion in higer precision. */\n+\n+               /* Compute x - 1.0 and split it */\n+                double xa = x - 1.0;\n+                double xb = xa - x + 1.0;\n+                double tmp = xa * HEX_40000000;\n+                double aa = xa + tmp - tmp;\n+                double ab = xa - aa;\n+                xa = aa;\n+                xb = ab;\n+\n+                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];\n+                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];\n+\n+                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {\n+                    /* Multiply a = y * x */\n+                    aa = ya * xa;\n+                    ab = ya * xb + yb * xa + yb * xb;\n+                    /* split, so now y = a */\n+                    tmp = aa * HEX_40000000;\n+                    ya = aa + tmp - tmp;\n+                    yb = aa - ya + ab;\n+\n+                    /* Add  a = y + lnQuickCoef */\n+                    aa = ya + LN_QUICK_COEF[i][0];\n+                    ab = yb + LN_QUICK_COEF[i][1];\n+                    /* Split y = a */\n+                    tmp = aa * HEX_40000000;\n+                    ya = aa + tmp - tmp;\n+                    yb = aa - ya + ab;\n+                }\n+\n+                /* Multiply a = y * x */\n+                aa = ya * xa;\n+                ab = ya * xb + yb * xa + yb * xb;\n+                /* split, so now y = a */\n+                tmp = aa * HEX_40000000;\n+                ya = aa + tmp - tmp;\n+                yb = aa - ya + ab;\n+\n+                return ya + yb;\n+            }\n+        }\n+\n+        // lnm is a log of a number in the range of 1.0 - 2.0, so 0 <= lnm < ln(2)\n+        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n+\n+        /*\n+    double epsilon = x / Double.longBitsToDouble(bits & 0xfffffc0000000000L);\n+\n+    epsilon -= 1.0;\n+         */\n+\n+        // y is the most significant 10 bits of the mantissa\n+        //double y = Double.longBitsToDouble(bits & 0xfffffc0000000000L);\n+        //double epsilon = (x - y) / y;\n+        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n+\n+        double lnza = 0.0;\n+        double lnzb = 0.0;\n+\n+        if (hiPrec != null) {\n+            /* split epsilon -> x */\n+            double tmp = epsilon * HEX_40000000;\n+            double aa = epsilon + tmp - tmp;\n+            double ab = epsilon - aa;\n+            double xa = aa;\n+            double xb = ab;\n+\n+            /* Need a more accurate epsilon, so adjust the division. */\n+            double numer = bits & 0x3ffffffffffL;\n+            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n+            aa = numer - xa*denom - xb * denom;\n+            xb += aa / denom;\n+\n+            /* Remez polynomial evaluation */\n+            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];\n+            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];\n+\n+            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n+                /* Multiply a = y * x */\n+                aa = ya * xa;\n+                ab = ya * xb + yb * xa + yb * xb;\n+                /* split, so now y = a */\n+                tmp = aa * HEX_40000000;\n+                ya = aa + tmp - tmp;\n+                yb = aa - ya + ab;\n+\n+                /* Add  a = y + lnHiPrecCoef */\n+                aa = ya + LN_HI_PREC_COEF[i][0];\n+                ab = yb + LN_HI_PREC_COEF[i][1];\n+                /* Split y = a */\n+                tmp = aa * HEX_40000000;\n+                ya = aa + tmp - tmp;\n+                yb = aa - ya + ab;\n+            }\n+\n+            /* Multiply a = y * x */\n+            aa = ya * xa;\n+            ab = ya * xb + yb * xa + yb * xb;\n+\n+            /* split, so now lnz = a */\n+            /*\n+      tmp = aa * 1073741824.0;\n+      lnza = aa + tmp - tmp;\n+      lnzb = aa - lnza + ab;\n+             */\n+            lnza = aa + ab;\n+            lnzb = -(lnza - aa - ab);\n+        } else {\n+            /* High precision not required.  Eval Remez polynomial\n+         using standard double precision */\n+            lnza = -0.16624882440418567;\n+            lnza = lnza * epsilon + 0.19999954120254515;\n+            lnza = lnza * epsilon + -0.2499999997677497;\n+            lnza = lnza * epsilon + 0.3333333333332802;\n+            lnza = lnza * epsilon + -0.5;\n+            lnza = lnza * epsilon + 1.0;\n+            lnza = lnza * epsilon;\n+        }\n+\n+        /* Relative sizes:\n+         * lnzb     [0, 2.33E-10]\n+         * lnm[1]   [0, 1.17E-7]\n+         * ln2B*exp [0, 1.12E-4]\n+         * lnza      [0, 9.7E-4]\n+         * lnm[0]   [0, 0.692]\n+         * ln2A*exp [0, 709]\n+         */\n+\n+        /* Compute the following sum:\n+         * lnzb + lnm[1] + ln2B*exp + lnza + lnm[0] + ln2A*exp;\n+         */\n+\n+        //return lnzb + lnm[1] + ln2B*exp + lnza + lnm[0] + ln2A*exp;\n+        double a = LN_2_A*exp;\n+        double b = 0.0;\n+        double c = a+lnm[0];\n+        double d = -(c-a-lnm[0]);\n+        a = c;\n+        b = b + d;\n+\n+        c = a + lnza;\n+        d = -(c - a - lnza);\n+        a = c;\n+        b = b + d;\n+\n+        c = a + LN_2_B*exp;\n+        d = -(c - a - LN_2_B*exp);\n+        a = c;\n+        b = b + d;\n+\n+        c = a + lnm[1];\n+        d = -(c - a - lnm[1]);\n+        a = c;\n+        b = b + d;\n+\n+        c = a + lnzb;\n+        d = -(c - a - lnzb);\n+        a = c;\n+        b = b + d;\n+\n+        if (hiPrec != null) {\n+            hiPrec[0] = a;\n+            hiPrec[1] = b;\n+        }\n+\n+        return a + b;\n+    }\n+\n+    /** Compute log(1 + x).\n+     * @param x a number\n+     * @return log(1 + x)\n+     */\n+    public static double log1p(final double x) {\n+\n+        if (x == -1) {\n+            return x/0.0;   // -Infinity\n+        }\n+\n+        if (x > 0 && 1/x == 0) { // x = Infinity\n+            return x;\n+        }\n+\n+        if (x>1e-6 || x<-1e-6) {\n+            double xpa = 1.0 + x;\n+            double xpb = -(xpa - 1.0 - x);\n+\n+            double hiPrec[] = new double[2];\n+\n+            final double lores = log(xpa, hiPrec);\n+            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN\n+                return lores;\n+            }\n+\n+            /* Do a taylor series expansion around xpa */\n+            /* f(x+y) = f(x) + f'(x)*y + f''(x)/2 y^2 */\n+            double fx1 = xpb/xpa;\n+\n+            double epsilon = 0.5 * fx1 + 1.0;\n+            epsilon = epsilon * fx1;\n+\n+            return epsilon + hiPrec[1] + hiPrec[0];\n+        }\n+\n+        /* Value is small |x| < 1e6, do a Taylor series centered on 1.0 */\n+        double y = x * 0.333333333333333 - 0.5;\n+        y = y * x + 1.0;\n+        y = y * x;\n+\n+        return y;\n+    }\n+\n+    /** Compute the base 10 logarithm.\n+     * @param x a number\n+     * @return log10(x)\n+     */\n+    public static double log10(final double x) {\n+        final double hiPrec[] = new double[2];\n+\n+        final double lores = log(x, hiPrec);\n+        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN\n+            return lores;\n+        }\n+\n+        final double tmp = hiPrec[0] * HEX_40000000;\n+        final double lna = hiPrec[0] + tmp - tmp;\n+        final double lnb = hiPrec[0] - lna + hiPrec[1];\n+\n+        final double rln10a = 0.4342944622039795;\n+        final double rln10b = 1.9699272335463627E-8;\n+\n+        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;\n+    }\n+\n+    /**\n+     * Power function.  Compute x^y.\n+     *\n+     * @param x   a double\n+     * @param y   a double\n+     * @return double\n+     */\n+    public static double pow(double x, double y) {\n+        final double lns[] = new double[2];\n+\n+        if (y == 0.0) {\n+            return 1.0;\n+        }\n+\n+        if (x != x) { // X is NaN\n+            return x;\n+        }\n+\n+\n+        if (x == 0) {\n+            long bits = Double.doubleToLongBits(x);\n+            if ((bits & 0x8000000000000000L) != 0) {\n+                // -zero\n+                long yi = (long) y;\n+\n+                if (y < 0 && y == yi && (yi & 1) == 1) {\n+                    return Double.NEGATIVE_INFINITY;\n+                }\n+\n+                if (y > 0 && y == yi && (yi & 1) == 1) {\n+                    return -0.0;\n+                }\n+            }\n+\n+            if (y < 0) {\n+                return Double.POSITIVE_INFINITY;\n+            }\n+            if (y > 0) {\n+                return 0.0;\n+            }\n+\n+            return Double.NaN;\n+        }\n+\n+        if (x == Double.POSITIVE_INFINITY) {\n+            if (y != y) { // y is NaN\n+                return y;\n+            }\n+            if (y < 0.0) {\n+                return 0.0;\n+            } else {\n+                return Double.POSITIVE_INFINITY;\n+            }\n+        }\n+\n+        if (y == Double.POSITIVE_INFINITY) {\n+            if (x * x == 1.0) {\n+                return Double.NaN;\n+            }\n+\n+            if (x * x > 1.0) {\n+                return Double.POSITIVE_INFINITY;\n+            } else {\n+                return 0.0;\n+            }\n+        }\n+\n+        if (x == Double.NEGATIVE_INFINITY) {\n+            if (y != y) { // y is NaN\n+                return y;\n+            }\n+\n+            if (y < 0) {\n+                long yi = (long) y;\n+                if (y == yi && (yi & 1) == 1) {\n+                    return -0.0;\n+                }\n+\n+                return 0.0;\n+            }\n+\n+            if (y > 0)  {\n+                long yi = (long) y;\n+                if (y == yi && (yi & 1) == 1) {\n+                    return Double.NEGATIVE_INFINITY;\n+                }\n+\n+                return Double.POSITIVE_INFINITY;\n+            }\n+        }\n+\n+        if (y == Double.NEGATIVE_INFINITY) {\n+\n+            if (x * x == 1.0) {\n+                return Double.NaN;\n+            }\n+\n+            if (x * x < 1.0) {\n+                return Double.POSITIVE_INFINITY;\n+            } else {\n+                return 0.0;\n+            }\n+        }\n+\n+        /* Handle special case x<0 */\n+        if (x < 0) {\n+            // y is an even integer in this case\n+            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {\n+                return pow(-x, y);\n+            }\n+\n+            if (y == (long) y) {\n+                // If y is an integer\n+                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);\n+            } else {\n+                return Double.NaN;\n+            }\n+        }\n+\n+        /* Split y into ya and yb such that y = ya+yb */\n+        double ya;\n+        double yb;\n+        if (y < 8e298 && y > -8e298) {\n+            double tmp1 = y * HEX_40000000;\n+            ya = y + tmp1 - tmp1;\n+            yb = y - ya;\n+        } else {\n+            double tmp1 = y * 9.31322574615478515625E-10;\n+            double tmp2 = tmp1 * 9.31322574615478515625E-10;\n+            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;\n+            yb = y - ya;\n+        }\n+\n+        /* Compute ln(x) */\n+        final double lores = log(x, lns);\n+        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN\n+            return lores;\n+        }\n+\n+        double lna = lns[0];\n+        double lnb = lns[1];\n+\n+        /* resplit lns */\n+        double tmp1 = lna * HEX_40000000;\n+        double tmp2 = lna + tmp1 - tmp1;\n+        lnb += lna - tmp2;\n+        lna = tmp2;\n+\n+        // y*ln(x) = (aa+ab)\n+        final double aa = lna * ya;\n+        final double ab = lna * yb + lnb * ya + lnb * yb;\n+\n+        lna = aa+ab;\n+        lnb = -(lna - aa - ab);\n+\n+        double z = 1.0 / 120.0;\n+        z = z * lnb + (1.0 / 24.0);\n+        z = z * lnb + (1.0 / 6.0);\n+        z = z * lnb + 0.5;\n+        z = z * lnb + 1.0;\n+        z = z * lnb;\n+\n+        final double result = exp(lna, z, null);\n+        //result = result + result * z;\n+        return result;\n+    }\n+\n+\n+    /**\n+     *  Computes sin(x) - x, where |x| < 1/16.\n+     *  Use a Remez polynomial approximation.\n+     *  @param x a number smaller than 1/16\n+     *  @return sin(x) - x\n+     */\n+    private static double polySine(final double x)\n+    {\n+        double x2 = x*x;\n+\n+        double p = 2.7553817452272217E-6;\n+        p = p * x2 + -1.9841269659586505E-4;\n+        p = p * x2 + 0.008333333333329196;\n+        p = p * x2 + -0.16666666666666666;\n+        //p *= x2;\n+        //p *= x;\n+        p = p * x2 * x;\n+\n+        return p;\n+    }\n+\n+    /**\n+     *  Computes cos(x) - 1, where |x| < 1/16.\n+     *  Use a Remez polynomial approximation.\n+     *  @param x a number smaller than 1/16\n+     *  @return cos(x) - 1\n+     */\n+    private static double polyCosine(double x) {\n+        double x2 = x*x;\n+\n+        double p = 2.479773539153719E-5;\n+        p = p * x2 + -0.0013888888689039883;\n+        p = p * x2 + 0.041666666666621166;\n+        p = p * x2 + -0.49999999999999994;\n+        p *= x2;\n+\n+        return p;\n+    }\n+\n+    /**\n+     *  Compute sine over the first quadrant (0 < x < pi/2).\n+     *  Use combination of table lookup and rational polynomial expansion.\n+     *  @param xa number from which sine is requested\n+     *  @param xb extra bits for x (may be 0.0)\n+     *  @return sin(xa + xb)\n+     */\n+    private static double sinQ(double xa, double xb) {\n+        int idx = (int) ((xa * 8.0) + 0.5);\n+        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;\n+\n+        // Table lookups\n+        final double sintA = SINE_TABLE_A[idx];\n+        final double sintB = SINE_TABLE_B[idx];\n+        final double costA = COSINE_TABLE_A[idx];\n+        final double costB = COSINE_TABLE_B[idx];\n+\n+        // Polynomial eval of sin(epsilon), cos(epsilon)\n+        double sinEpsA = epsilon;\n+        double sinEpsB = polySine(epsilon);\n+        final double cosEpsA = 1.0;\n+        final double cosEpsB = polyCosine(epsilon);\n+\n+        // Split epsilon   xa + xb = x\n+        final double temp = sinEpsA * HEX_40000000;\n+        double temp2 = (sinEpsA + temp) - temp;\n+        sinEpsB +=  sinEpsA - temp2;\n+        sinEpsA = temp2;\n+\n+        /* Compute sin(x) by angle addition formula */\n+        double result;\n+\n+        /* Compute the following sum:\n+         *\n+         * result = sintA + costA*sinEpsA + sintA*cosEpsB + costA*sinEpsB +\n+         *          sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;\n+         *\n+         * Ranges of elements\n+         *\n+         * xxxtA   0            PI/2\n+         * xxxtB   -1.5e-9      1.5e-9\n+         * sinEpsA -0.0625      0.0625\n+         * sinEpsB -6e-11       6e-11\n+         * cosEpsA  1.0\n+         * cosEpsB  0           -0.0625\n+         *\n+         */\n+\n+        //result = sintA + costA*sinEpsA + sintA*cosEpsB + costA*sinEpsB +\n+        //          sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;\n+\n+        //result = sintA + sintA*cosEpsB + sintB + sintB * cosEpsB;\n+        //result += costA*sinEpsA + costA*sinEpsB + costB*sinEpsA + costB * sinEpsB;\n+        double a = 0;\n+        double b = 0;\n+\n+        double t = sintA;\n+        double c = a + t;\n+        double d = -(c - a - t);\n+        a = c;\n+        b = b + d;\n+\n+        t = costA * sinEpsA;\n+        c = a + t;\n+        d = -(c - a - t);\n+        a = c;\n+        b = b + d;\n+\n+        b = b + sintA * cosEpsB + costA * sinEpsB;\n+        /*\n+    t = sintA*cosEpsB;\n+    c = a + t;\n+    d = -(c - a - t);\n+    a = c;\n+    b = b + d;\n+\n+    t = costA*sinEpsB;\n+    c = a + t;\n+    d = -(c - a - t);\n+    a = c;\n+    b = b + d;\n+         */\n+\n+        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;\n+        /*\n+    t = sintB;\n+    c = a + t;\n+    d = -(c - a - t);\n+    a = c;\n+    b = b + d;\n+\n+    t = costB*sinEpsA;\n+    c = a + t;\n+    d = -(c - a - t);\n+    a = c;\n+    b = b + d;\n+\n+    t = sintB*cosEpsB;\n+    c = a + t;\n+    d = -(c - a - t);\n+    a = c;\n+    b = b + d;\n+\n+    t = costB*sinEpsB;\n+    c = a + t;\n+    d = -(c - a - t);\n+    a = c;\n+    b = b + d;\n+         */\n+\n+        if (xb != 0.0) {\n+            t = ((costA + costB) * (cosEpsA + cosEpsB) -\n+                 (sintA + sintB) * (sinEpsA + sinEpsB)) * xb;  // approximate cosine*xb\n+            c = a + t;\n+            d = -(c - a - t);\n+            a = c;\n+            b = b + d;\n+        }\n+\n+        result = a + b;\n+\n+        return result;\n+    }\n+\n+    /**\n+     * Compute cosine in the first quadrant by subtracting input from PI/2 and\n+     * then calling sinQ.  This is more accurate as the input approaches PI/2.\n+     *  @param xa number from which cosine is requested\n+     *  @param xb extra bits for x (may be 0.0)\n+     *  @return cos(xa + xb)\n+     */\n+    private static double cosQ(double xa, double xb) {\n+        final double pi2a = 1.5707963267948966;\n+        final double pi2b = 6.123233995736766E-17;\n+\n+        final double a = pi2a - xa;\n+        double b = -(a - pi2a + xa);\n+        b += pi2b - xb;\n+\n+        return sinQ(a, b);\n+    }\n+\n+    /**\n+     *  Compute tangent (or cotangent) over the first quadrant.   0 < x < pi/2\n+     *  Use combination of table lookup and rational polynomial expansion.\n+     *  @param xa number from which sine is requested\n+     *  @param xb extra bits for x (may be 0.0)\n+     *  @param cotanFlag if true, compute the cotangent instead of the tangent\n+     *  @return tan(xa+xb) (or cotangent, depending on cotanFlag)\n+     */\n+    private static double tanQ(double xa, double xb, boolean cotanFlag) {\n+\n+        int idx = (int) ((xa * 8.0) + 0.5);\n+        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;\n+\n+        // Table lookups\n+        final double sintA = SINE_TABLE_A[idx];\n+        final double sintB = SINE_TABLE_B[idx];\n+        final double costA = COSINE_TABLE_A[idx];\n+        final double costB = COSINE_TABLE_B[idx];\n+\n+        // Polynomial eval of sin(epsilon), cos(epsilon)\n+        double sinEpsA = epsilon;\n+        double sinEpsB = polySine(epsilon);\n+        final double cosEpsA = 1.0;\n+        final double cosEpsB = polyCosine(epsilon);\n+\n+        // Split epsilon   xa + xb = x\n+        double temp = sinEpsA * HEX_40000000;\n+        double temp2 = (sinEpsA + temp) - temp;\n+        sinEpsB +=  sinEpsA - temp2;\n+        sinEpsA = temp2;\n+\n+        /* Compute sin(x) by angle addition formula */\n+\n+        /* Compute the following sum:\n+         *\n+         * result = sintA + costA*sinEpsA + sintA*cosEpsB + costA*sinEpsB +\n+         *          sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;\n+         *\n+         * Ranges of elements\n+         *\n+         * xxxtA   0            PI/2\n+         * xxxtB   -1.5e-9      1.5e-9\n+         * sinEpsA -0.0625      0.0625\n+         * sinEpsB -6e-11       6e-11\n+         * cosEpsA  1.0\n+         * cosEpsB  0           -0.0625\n+         *\n+         */\n+\n+        //result = sintA + costA*sinEpsA + sintA*cosEpsB + costA*sinEpsB +\n+        //          sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;\n+\n+        //result = sintA + sintA*cosEpsB + sintB + sintB * cosEpsB;\n+        //result += costA*sinEpsA + costA*sinEpsB + costB*sinEpsA + costB * sinEpsB;\n+        double a = 0;\n+        double b = 0;\n+\n+        // Compute sine\n+        double t = sintA;\n+        double c = a + t;\n+        double d = -(c - a - t);\n+        a = c;\n+        b = b + d;\n+\n+        t = costA*sinEpsA;\n+        c = a + t;\n+        d = -(c - a - t);\n+        a = c;\n+        b = b + d;\n+\n+        b = b + sintA*cosEpsB + costA*sinEpsB;\n+        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;\n+\n+        double sina = a + b;\n+        double sinb = -(sina - a - b);\n+\n+        // Compute cosine\n+\n+        a = b = c = d = 0.0;\n+\n+        t = costA*cosEpsA;\n+        c = a + t;\n+        d = -(c - a - t);\n+        a = c;\n+        b = b + d;\n+\n+        t = -sintA*sinEpsA;\n+        c = a + t;\n+        d = -(c - a - t);\n+        a = c;\n+        b = b + d;\n+\n+        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;\n+        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);\n+\n+        double cosa = a + b;\n+        double cosb = -(cosa - a - b);\n+\n+        if (cotanFlag) {\n+            double tmp;\n+            tmp = cosa; cosa = sina; sina = tmp;\n+            tmp = cosb; cosb = sinb; sinb = tmp;\n+        }\n+\n+\n+        /* estimate and correct, compute 1.0/(cosa+cosb) */\n+        /*\n+    double est = (sina+sinb)/(cosa+cosb);\n+    double err = (sina - cosa*est) + (sinb - cosb*est);\n+    est += err/(cosa+cosb);\n+    err = (sina - cosa*est) + (sinb - cosb*est);\n+         */\n+\n+        // f(x) = 1/x,   f'(x) = -1/x^2\n+\n+        double est = sina/cosa;\n+\n+        /* Split the estimate to get more accurate read on division rounding */\n+        temp = est * HEX_40000000;\n+        double esta = (est + temp) - temp;\n+        double estb =  est - esta;\n+\n+        temp = cosa * HEX_40000000;\n+        double cosaa = (cosa + temp) - temp;\n+        double cosab =  cosa - cosaa;\n+\n+        //double err = (sina - est*cosa)/cosa;  // Correction for division rounding\n+        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding\n+        err += sinb/cosa;                     // Change in est due to sinb\n+        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb\n+\n+        if (xb != 0.0) {\n+            // tan' = 1 + tan^2      cot' = -(1 + cot^2)\n+            // Approximate impact of xb\n+            double xbadj = xb + est*est*xb;\n+            if (cotanFlag) {\n+                xbadj = -xbadj;\n+            }\n+\n+            err += xbadj;\n+        }\n+\n+        return est+err;\n+    }\n+\n+    /** Reduce the input argument using the Payne and Hanek method.\n+     *  This is good for all inputs 0.0 < x < inf\n+     *  Output is remainder after dividing by PI/2\n+     *  The result array should contain 3 numbers.\n+     *  result[0] is the integer portion, so mod 4 this gives the quadrant.\n+     *  result[1] is the upper bits of the remainder\n+     *  result[2] is the lower bits of the remainder\n+     *\n+     * @param x number to reduce\n+     * @param result placeholder where to put the result\n+     */\n+    private static void reducePayneHanek(double x, double result[])\n+    {\n+        /* Convert input double to bits */\n+        long inbits = Double.doubleToLongBits(x);\n+        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;\n+\n+        /* Convert to fixed point representation */\n+        inbits &= 0x000fffffffffffffL;\n+        inbits |= 0x0010000000000000L;\n+\n+        /* Normalize input to be between 0.5 and 1.0 */\n+        exponent++;\n+        inbits <<= 11;\n+\n+        /* Based on the exponent, get a shifted copy of recip2pi */\n+        long shpi0;\n+        long shpiA;\n+        long shpiB;\n+        int idx = exponent >> 6;\n+        int shift = exponent - (idx << 6);\n+\n+        if (shift != 0) {\n+            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);\n+            shpi0 |= RECIP_2PI[idx] >>> (64-shift);\n+            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));\n+            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));\n+        } else {\n+            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];\n+            shpiA = RECIP_2PI[idx];\n+            shpiB = RECIP_2PI[idx+1];\n+        }\n+\n+        /* Multiply input by shpiA */\n+        long a = inbits >>> 32;\n+        long b = inbits & 0xffffffffL;\n+\n+        long c = shpiA >>> 32;\n+        long d = shpiA & 0xffffffffL;\n+\n+        long ac = a * c;\n+        long bd = b * d;\n+        long bc = b * c;\n+        long ad = a * d;\n+\n+        long prodB = bd + (ad << 32);\n+        long prodA = ac + (ad >>> 32);\n+\n+        boolean bita = (bd & 0x8000000000000000L) != 0;\n+        boolean bitb = (ad & 0x80000000L ) != 0;\n+        boolean bitsum = (prodB & 0x8000000000000000L) != 0;\n+\n+        /* Carry */\n+        if ( (bita && bitb) ||\n+                ((bita || bitb) && !bitsum) ) {\n+            prodA++;\n+        }\n+\n+        bita = (prodB & 0x8000000000000000L) != 0;\n+        bitb = (bc & 0x80000000L ) != 0;\n+\n+        prodB = prodB + (bc << 32);\n+        prodA = prodA + (bc >>> 32);\n+\n+        bitsum = (prodB & 0x8000000000000000L) != 0;\n+\n+        /* Carry */\n+        if ( (bita && bitb) ||\n+                ((bita || bitb) && !bitsum) ) {\n+            prodA++;\n+        }\n+\n+        /* Multiply input by shpiB */\n+        c = shpiB >>> 32;\n+        d = shpiB & 0xffffffffL;\n+        ac = a * c;\n+        bc = b * c;\n+        ad = a * d;\n+\n+        /* Collect terms */\n+        ac = ac + ((bc + ad) >>> 32);\n+\n+        bita = (prodB & 0x8000000000000000L) != 0;\n+        bitb = (ac & 0x8000000000000000L ) != 0;\n+        prodB += ac;\n+        bitsum = (prodB & 0x8000000000000000L) != 0;\n+        /* Carry */\n+        if ( (bita && bitb) ||\n+                ((bita || bitb) && !bitsum) ) {\n+            prodA++;\n+        }\n+\n+        /* Multiply by shpi0 */\n+        c = shpi0 >>> 32;\n+        d = shpi0 & 0xffffffffL;\n+\n+        bd = b * d;\n+        bc = b * c;\n+        ad = a * d;\n+\n+        prodA += bd + ((bc + ad) << 32);\n+\n+        /*\n+         * prodA, prodB now contain the remainder as a fraction of PI.  We want this as a fraction of\n+         * PI/2, so use the following steps:\n+         * 1.) multiply by 4.\n+         * 2.) do a fixed point muliply by PI/4.\n+         * 3.) Convert to floating point.\n+         * 4.) Multiply by 2\n+         */\n+\n+        /* This identifies the quadrant */\n+        int intPart = (int)(prodA >>> 62);\n+\n+        /* Multiply by 4 */\n+        prodA <<= 2;\n+        prodA |= prodB >>> 62;\n+        prodB <<= 2;\n+\n+        /* Multiply by PI/4 */\n+        a = prodA >>> 32;\n+        b = prodA & 0xffffffffL;\n+\n+        c = PI_O_4_BITS[0] >>> 32;\n+        d = PI_O_4_BITS[0] & 0xffffffffL;\n+\n+        ac = a * c;\n+        bd = b * d;\n+        bc = b * c;\n+        ad = a * d;\n+\n+        long prod2B = bd + (ad << 32);\n+        long prod2A = ac + (ad >>> 32);\n+\n+        bita = (bd & 0x8000000000000000L) != 0;\n+        bitb = (ad & 0x80000000L ) != 0;\n+        bitsum = (prod2B & 0x8000000000000000L) != 0;\n+\n+        /* Carry */\n+        if ( (bita && bitb) ||\n+                ((bita || bitb) && !bitsum) ) {\n+            prod2A++;\n+        }\n+\n+        bita = (prod2B & 0x8000000000000000L) != 0;\n+        bitb = (bc & 0x80000000L ) != 0;\n+\n+        prod2B = prod2B + (bc << 32);\n+        prod2A = prod2A + (bc >>> 32);\n+\n+        bitsum = (prod2B & 0x8000000000000000L) != 0;\n+\n+        /* Carry */\n+        if ( (bita && bitb) ||\n+                ((bita || bitb) && !bitsum) ) {\n+            prod2A++;\n+        }\n+\n+        /* Multiply input by pio4bits[1] */\n+        c = PI_O_4_BITS[1] >>> 32;\n+        d = PI_O_4_BITS[1] & 0xffffffffL;\n+        ac = a * c;\n+        bc = b * c;\n+        ad = a * d;\n+\n+        /* Collect terms */\n+        ac = ac + ((bc + ad) >>> 32);\n+\n+        bita = (prod2B & 0x8000000000000000L) != 0;\n+        bitb = (ac & 0x8000000000000000L ) != 0;\n+        prod2B += ac;\n+        bitsum = (prod2B & 0x8000000000000000L) != 0;\n+        /* Carry */\n+        if ( (bita && bitb) ||\n+                ((bita || bitb) && !bitsum) ) {\n+            prod2A++;\n+        }\n+\n+        /* Multiply inputB by pio4bits[0] */\n+        a = prodB >>> 32;\n+        b = prodB & 0xffffffffL;\n+        c = PI_O_4_BITS[0] >>> 32;\n+        d = PI_O_4_BITS[0] & 0xffffffffL;\n+        ac = a * c;\n+        bc = b * c;\n+        ad = a * d;\n+\n+        /* Collect terms */\n+        ac = ac + ((bc + ad) >>> 32);\n+\n+        bita = (prod2B & 0x8000000000000000L) != 0;\n+        bitb = (ac & 0x8000000000000000L ) != 0;\n+        prod2B += ac;\n+        bitsum = (prod2B & 0x8000000000000000L) != 0;\n+        /* Carry */\n+        if ( (bita && bitb) ||\n+                ((bita || bitb) && !bitsum) ) {\n+            prod2A++;\n+        }\n+\n+        /* Convert to double */\n+        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits\n+        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits\n+\n+        double sumA = tmpA + tmpB;\n+        double sumB = -(sumA - tmpA - tmpB);\n+\n+        /* Multiply by PI/2 and return */\n+        result[0] = intPart;\n+        result[1] = sumA * 2.0;\n+        result[2] = sumB * 2.0;\n+    }\n+\n+    /**\n+     *  Sine function.\n+     *  @param x a number\n+     *  @return sin(x)\n+     */\n+    public static double sin(double x) {\n+        boolean negative = false;\n+        int quadrant = 0;\n+        double xa;\n+        double xb = 0.0;\n+\n+        /* Take absolute value of the input */\n+        xa = x;\n+        if (x < 0) {\n+            negative = true;\n+            xa = -xa;\n+        }\n+\n+        /* Check for zero and negative zero */\n+        if (xa == 0.0) {\n+            long bits = Double.doubleToLongBits(x);\n+            if (bits < 0) {\n+                return -0.0;\n+            }\n+            return 0.0;\n+        }\n+\n+        if (xa != xa || xa == Double.POSITIVE_INFINITY) {\n+            return Double.NaN;\n+        }\n+\n+        /* Perform any argument reduction */\n+        if (xa > 3294198.0) {\n+            // PI * (2**20)\n+            // Argument too big for CodyWaite reduction.  Must use\n+            // PayneHanek.\n+            double reduceResults[] = new double[3];\n+            reducePayneHanek(xa, reduceResults);\n+            quadrant = ((int) reduceResults[0]) & 3;\n+            xa = reduceResults[1];\n+            xb = reduceResults[2];\n+        } else if (xa > 1.5707963267948966) {\n+            /* Inline the Cody/Waite reduction for performance */\n+\n+            // Estimate k\n+            //k = (int)(xa / 1.5707963267948966);\n+            int k = (int)(xa * 0.6366197723675814);\n+\n+            // Compute remainder\n+            double remA;\n+            double remB;\n+            while (true) {\n+                double a = -k * 1.570796251296997;\n+                remA = xa + a;\n+                remB = -(remA - xa - a);\n+\n+                a = -k * 7.549789948768648E-8;\n+                double b = remA;\n+                remA = a + b;\n+                remB += -(remA - b - a);\n+\n+                a = -k * 6.123233995736766E-17;\n+                b = remA;\n+                remA = a + b;\n+                remB += -(remA - b - a);\n+\n+                if (remA > 0.0) {\n+                    break;\n+                }\n+\n+                // Remainder is negative, so decrement k and try again.\n+                // This should only happen if the input is very close\n+                // to an even multiple of pi/2\n+                k--;\n+            }\n+            quadrant = k & 3;\n+            xa = remA;\n+            xb = remB;\n+        }\n+\n+        if (negative) {\n+            quadrant ^= 2;  // Flip bit 1\n+        }\n+\n+        switch (quadrant) {\n+            case 0:\n+                return sinQ(xa, xb);\n+            case 1:\n+                return cosQ(xa, xb);\n+            case 2:\n+                return -sinQ(xa, xb);\n+            case 3:\n+                return -cosQ(xa, xb);\n+            default:\n+                return Double.NaN;\n+        }\n+    }\n+\n+    /**\n+     *  Cosine function\n+     *  @param x a number\n+     *  @return cos(x)\n+     */\n+    public static double cos(double x) {\n+        int quadrant = 0;\n+\n+        /* Take absolute value of the input */\n+        double xa = x;\n+        if (x < 0) {\n+            xa = -xa;\n+        }\n+\n+        if (xa != xa || xa == Double.POSITIVE_INFINITY) {\n+            return Double.NaN;\n+        }\n+\n+        /* Perform any argument reduction */\n+        double xb = 0;\n+        if (xa > 3294198.0) {\n+            // PI * (2**20)\n+            // Argument too big for CodyWaite reduction.  Must use\n+            // PayneHanek.\n+            double reduceResults[] = new double[3];\n+            reducePayneHanek(xa, reduceResults);\n+            quadrant = ((int) reduceResults[0]) & 3;\n+            xa = reduceResults[1];\n+            xb = reduceResults[2];\n+        } else if (xa > 1.5707963267948966) {\n+            /* Inline the Cody/Waite reduction for performance */\n+\n+            // Estimate k\n+            //k = (int)(xa / 1.5707963267948966);\n+            int k = (int)(xa * 0.6366197723675814);\n+\n+            // Compute remainder\n+            double remA;\n+            double remB;\n+            while (true) {\n+                double a = -k * 1.570796251296997;\n+                remA = xa + a;\n+                remB = -(remA - xa - a);\n+\n+                a = -k * 7.549789948768648E-8;\n+                double b = remA;\n+                remA = a + b;\n+                remB += -(remA - b - a);\n+\n+                a = -k * 6.123233995736766E-17;\n+                b = remA;\n+                remA = a + b;\n+                remB += -(remA - b - a);\n+\n+                if (remA > 0.0) {\n+                    break;\n+                }\n+\n+                // Remainder is negative, so decrement k and try again.\n+                // This should only happen if the input is very close\n+                // to an even multiple of pi/2\n+                k--;\n+            }\n+            quadrant = k & 3;\n+            xa = remA;\n+            xb = remB;\n+        }\n+\n+        //if (negative)\n+        //  quadrant = (quadrant + 2) % 4;\n+\n+        switch (quadrant) {\n+            case 0:\n+                return cosQ(xa, xb);\n+            case 1:\n+                return -sinQ(xa, xb);\n+            case 2:\n+                return -cosQ(xa, xb);\n+            case 3:\n+                return sinQ(xa, xb);\n+            default:\n+                return Double.NaN;\n+        }\n+    }\n+\n+    /**\n+     *   Tangent function\n+     *  @param x a number\n+     *  @return tan(x)\n+     */\n+    public static double tan(double x) {\n+        boolean negative = false;\n+        int quadrant = 0;\n+\n+        /* Take absolute value of the input */\n+        double xa = x;\n+        if (x < 0) {\n+            negative = true;\n+            xa = -xa;\n+        }\n+\n+        /* Check for zero and negative zero */\n+        if (xa == 0.0) {\n+            long bits = Double.doubleToLongBits(x);\n+            if (bits < 0) {\n+                return -0.0;\n+            }\n+            return 0.0;\n+        }\n+\n+        if (xa != xa || xa == Double.POSITIVE_INFINITY) {\n+            return Double.NaN;\n+        }\n+\n+        /* Perform any argument reduction */\n+        double xb = 0;\n+        if (xa > 3294198.0) {\n+            // PI * (2**20)\n+            // Argument too big for CodyWaite reduction.  Must use\n+            // PayneHanek.\n+            double reduceResults[] = new double[3];\n+            reducePayneHanek(xa, reduceResults);\n+            quadrant = ((int) reduceResults[0]) & 3;\n+            xa = reduceResults[1];\n+            xb = reduceResults[2];\n+        } else if (xa > 1.5707963267948966) {\n+            /* Inline the Cody/Waite reduction for performance */\n+\n+            // Estimate k\n+            //k = (int)(xa / 1.5707963267948966);\n+            int k = (int)(xa * 0.6366197723675814);\n+\n+            // Compute remainder\n+            double remA;\n+            double remB;\n+            while (true) {\n+                double a = -k * 1.570796251296997;\n+                remA = xa + a;\n+                remB = -(remA - xa - a);\n+\n+                a = -k * 7.549789948768648E-8;\n+                double b = remA;\n+                remA = a + b;\n+                remB += -(remA - b - a);\n+\n+                a = -k * 6.123233995736766E-17;\n+                b = remA;\n+                remA = a + b;\n+                remB += -(remA - b - a);\n+\n+                if (remA > 0.0) {\n+                    break;\n+                }\n+\n+                // Remainder is negative, so decrement k and try again.\n+                // This should only happen if the input is very close\n+                // to an even multiple of pi/2\n+                k--;\n+            }\n+            quadrant = k & 3;\n+            xa = remA;\n+            xb = remB;\n+        }\n+\n+        if (xa > 1.5) {\n+            // Accurracy suffers between 1.5 and PI/2\n+            final double pi2a = 1.5707963267948966;\n+            final double pi2b = 6.123233995736766E-17;\n+\n+            final double a = pi2a - xa;\n+            double b = -(a - pi2a + xa);\n+            b += pi2b - xb;\n+\n+            xa = a + b;\n+            xb = -(xa - a - b);\n+            quadrant ^= 1;\n+            negative ^= true;\n+        }\n+\n+        double result;\n+        if ((quadrant & 1) == 0) {\n+            result = tanQ(xa, xb, false);\n+        } else {\n+            result = -tanQ(xa, xb, true);\n+        }\n+\n+        if (negative) {\n+            result = -result;\n+        }\n+\n+        return result;\n+    }\n+\n+    /**\n+     * Arctangent function\n+     *  @param x a number\n+     *  @return atan(x)\n+     */\n+    public static double atan(double x) {\n+        return atan(x, 0.0, false);\n+    }\n+\n+    /** Internal helper function to compute arctangent.\n+     * @param xa number from which arctangent is requested\n+     * @param xb extra bits for x (may be 0.0)\n+     * @param leftPlane if true, result angle must be put in the left half plane\n+     * @return atan(xa + xb) (or angle shifted by {@code PI} if leftPlane is true)\n+     */\n+    private static double atan(double xa, double xb, boolean leftPlane) {\n+        boolean negate = false;\n+        int idx;\n+\n+        if (xa == 0.0) { // Matches +/- 0.0; return correct sign\n+            return leftPlane ? copySign(Math.PI, xa) : xa;\n+        }\n+\n+        if (xa < 0) {\n+            // negative\n+            xa = -xa;\n+            xb = -xb;\n+            negate = true;\n+        }\n+\n+        if (xa > 1.633123935319537E16) { // Very large input\n+            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);\n+        }\n+\n+        /* Estimate the closest tabulated arctan value, compute eps = xa-tangentTable */\n+        if (xa < 1.0) {\n+            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);\n+        } else {\n+            double temp = 1.0/xa;\n+            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);\n+        }\n+        double epsA = xa - TANGENT_TABLE_A[idx];\n+        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);\n+        epsB += xb - TANGENT_TABLE_B[idx];\n+\n+        double temp = epsA + epsB;\n+        epsB = -(temp - epsA - epsB);\n+        epsA = temp;\n+\n+        /* Compute eps = eps / (1.0 + xa*tangent) */\n+        temp = xa * HEX_40000000;\n+        double ya = xa + temp - temp;\n+        double yb = xb + xa - ya;\n+        xa = ya;\n+        xb += yb;\n+\n+        //if (idx > 8 || idx == 0)\n+        if (idx == 0) {\n+            /* If the slope of the arctan is gentle enough (< 0.45), this approximation will suffice */\n+            //double denom = 1.0 / (1.0 + xa*tangentTableA[idx] + xb*tangentTableA[idx] + xa*tangentTableB[idx] + xb*tangentTableB[idx]);\n+            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));\n+            //double denom = 1.0 / (1.0 + xa*tangentTableA[idx]);\n+            ya = epsA * denom;\n+            yb = epsB * denom;\n+        } else {\n+            double temp2 = xa * TANGENT_TABLE_A[idx];\n+            double za = 1.0 + temp2;\n+            double zb = -(za - 1.0 - temp2);\n+            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];\n+            temp = za + temp2;\n+            zb += -(temp - za - temp2);\n+            za = temp;\n+\n+            zb += xb * TANGENT_TABLE_B[idx];\n+            ya = epsA / za;\n+\n+            temp = ya * HEX_40000000;\n+            final double yaa = (ya + temp) - temp;\n+            final double yab = ya - yaa;\n+\n+            temp = za * HEX_40000000;\n+            final double zaa = (za + temp) - temp;\n+            final double zab = za - zaa;\n+\n+            /* Correct for rounding in division */\n+            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;\n+\n+            yb += -epsA * zb / za / za;\n+            yb += epsB / za;\n+        }\n+\n+\n+        epsA = ya;\n+        epsB = yb;\n+\n+        /* Evaluate polynomial */\n+        double epsA2 = epsA*epsA;\n+\n+        /*\n+    yb = -0.09001346640161823;\n+    yb = yb * epsA2 + 0.11110718400605211;\n+    yb = yb * epsA2 + -0.1428571349122913;\n+    yb = yb * epsA2 + 0.19999999999273194;\n+    yb = yb * epsA2 + -0.33333333333333093;\n+    yb = yb * epsA2 * epsA;\n+         */\n+\n+        yb = 0.07490822288864472;\n+        yb = yb * epsA2 + -0.09088450866185192;\n+        yb = yb * epsA2 + 0.11111095942313305;\n+        yb = yb * epsA2 + -0.1428571423679182;\n+        yb = yb * epsA2 + 0.19999999999923582;\n+        yb = yb * epsA2 + -0.33333333333333287;\n+        yb = yb * epsA2 * epsA;\n+\n+\n+        ya = epsA;\n+\n+        temp = ya + yb;\n+        yb = -(temp - ya - yb);\n+        ya = temp;\n+\n+        /* Add in effect of epsB.   atan'(x) = 1/(1+x^2) */\n+        yb += epsB / (1.0 + epsA * epsA);\n+\n+        double result;\n+        double resultb;\n+\n+        //result = yb + eighths[idx] + ya;\n+        double za = EIGHTHS[idx] + ya;\n+        double zb = -(za - EIGHTHS[idx] - ya);\n+        temp = za + yb;\n+        zb += -(temp - za - yb);\n+        za = temp;\n+\n+        result = za + zb;\n+        resultb = -(result - za - zb);\n+\n+        if (leftPlane) {\n+            // Result is in the left plane\n+            final double pia = 1.5707963267948966*2.0;\n+            final double pib = 6.123233995736766E-17*2.0;\n+\n+            za = pia - result;\n+            zb = -(za - pia + result);\n+            zb += pib - resultb;\n+\n+            result = za + zb;\n+            resultb = -(result - za - zb);\n+        }\n+\n+\n+        if (negate ^ leftPlane) {\n+            result = -result;\n+        }\n+\n+        return result;\n+    }\n+\n+    /**\n+     * Two arguments arctangent function\n+     * @param y ordinate\n+     * @param x abscissa\n+     * @return phase angle of point (x,y) between {@code -PI} and {@code PI}\n+     */\n+    public static double atan2(double y, double x) {\n+        if (x !=x || y != y) {\n+            return Double.NaN;\n+        }\n+\n+        if (y == 0.0) {\n+            double result = x*y;\n+            double invx = 1.0/x;\n+            double invy = 1.0/y;\n+\n+            if (invx == 0.0) { // X is infinite\n+                if (x > 0) {\n+                    return y; // return +/- 0.0\n+                } else {\n+                    return copySign(Math.PI, y);\n+                }\n+            }\n+\n+            if (x < 0.0 || invx < 0.0) {\n+                if (y < 0.0 || invy < 0.0) {\n+                    return -Math.PI;\n+                } else {\n+                    return Math.PI;\n+                }\n+            } else {\n+                return result;\n+            }\n+        }\n+\n+        // y cannot now be zero\n+\n+        if (y == Double.POSITIVE_INFINITY) {\n+            if (x == Double.POSITIVE_INFINITY) {\n+                return Math.PI/4.0;\n+            }\n+\n+            if (x == Double.NEGATIVE_INFINITY) {\n+                return Math.PI*3.0/4.0;\n+            }\n+\n+            return Math.PI/2.0;\n+        }\n+\n+        if (y == Double.NEGATIVE_INFINITY) {\n+            if (x == Double.POSITIVE_INFINITY) {\n+                return -Math.PI/4.0;\n+            }\n+\n+            if (x == Double.NEGATIVE_INFINITY) {\n+                return -Math.PI*3.0/4.0;\n+            }\n+\n+            return -Math.PI/2.0;\n+        }\n+\n+        if (x == Double.POSITIVE_INFINITY) {\n+            if (y > 0.0 || 1/y > 0.0) {\n+                return 0.0;\n+            }\n+\n+            if (y < 0.0 || 1/y < 0.0) {\n+                return -0.0;\n+            }\n+        }\n+\n+        if (x == Double.NEGATIVE_INFINITY)\n+        {\n+            if (y > 0.0 || 1/y > 0.0) {\n+                return Math.PI;\n+            }\n+\n+            if (y < 0.0 || 1/y < 0.0) {\n+                return -Math.PI;\n+            }\n+        }\n+\n+        // Neither y nor x can be infinite or NAN here\n+\n+        if (x == 0) {\n+            if (y > 0.0 || 1/y > 0.0) {\n+                return Math.PI/2.0;\n+            }\n+\n+            if (y < 0.0 || 1/y < 0.0) {\n+                return -Math.PI/2.0;\n+            }\n+        }\n+\n+        // Compute ratio r = y/x\n+        final double r = y/x;\n+        if (Double.isInfinite(r)) { // bypass calculations that can create NaN\n+            return atan(r, 0, x < 0);\n+        }\n+\n+        double ra = doubleHighPart(r);\n+        double rb = r - ra;\n+\n+        // Split x\n+        final double xa = doubleHighPart(x);\n+        final double xb = x - xa;\n+\n+        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;\n+\n+        double temp = ra + rb;\n+        rb = -(temp - ra - rb);\n+        ra = temp;\n+\n+        if (ra == 0) { // Fix up the sign so atan works correctly\n+            ra = copySign(0.0, y);\n+        }\n+\n+        // Call atan\n+        double result = atan(ra, rb, x < 0);\n+\n+        return result;\n+    }\n+\n+    /** Compute the arc sine of a number.\n+     * @param x number on which evaluation is done\n+     * @return arc sine of x\n+     */\n+    public static double asin(double x) {\n+      if (x != x) {\n+          return Double.NaN;\n+      }\n+\n+      if (x > 1.0 || x < -1.0) {\n+          return Double.NaN;\n+      }\n+\n+      if (x == 1.0) {\n+          return Math.PI/2.0;\n+      }\n+\n+      if (x == -1.0) {\n+          return -Math.PI/2.0;\n+      }\n+\n+      if (x == 0.0) { // Matches +/- 0.0; return correct sign\n+          return x;\n+      }\n+\n+      /* Compute asin(x) = atan(x/sqrt(1-x*x)) */\n+\n+      /* Split x */\n+      double temp = x * HEX_40000000;\n+      final double xa = x + temp - temp;\n+      final double xb = x - xa;\n+\n+      /* Square it */\n+      double ya = xa*xa;\n+      double yb = xa*xb*2.0 + xb*xb;\n+\n+      /* Subtract from 1 */\n+      ya = -ya;\n+      yb = -yb;\n+\n+      double za = 1.0 + ya;\n+      double zb = -(za - 1.0 - ya);\n+\n+      temp = za + yb;\n+      zb += -(temp - za - yb);\n+      za = temp;\n+\n+      /* Square root */\n+      double y;\n+      y = sqrt(za);\n+      temp = y * HEX_40000000;\n+      ya = y + temp - temp;\n+      yb = y - ya;\n+\n+      /* Extend precision of sqrt */\n+      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);\n+\n+      /* Contribution of zb to sqrt */\n+      double dx = zb / (2.0*y);\n+\n+      // Compute ratio r = x/y\n+      double r = x/y;\n+      temp = r * HEX_40000000;\n+      double ra = r + temp - temp;\n+      double rb = r - ra;\n+\n+      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division\n+      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.\n+\n+      temp = ra + rb;\n+      rb = -(temp - ra - rb);\n+      ra = temp;\n+\n+      return atan(ra, rb, false);\n+    }\n+\n+    /** Compute the arc cosine of a number.\n+     * @param x number on which evaluation is done\n+     * @return arc cosine of x\n+     */\n+    public static double acos(double x) {\n+      if (x != x) {\n+          return Double.NaN;\n+      }\n+\n+      if (x > 1.0 || x < -1.0) {\n+          return Double.NaN;\n+      }\n+\n+      if (x == -1.0) {\n+          return Math.PI;\n+      }\n+\n+      if (x == 1.0) {\n+          return 0.0;\n+      }\n+\n+      if (x == 0) {\n+          return Math.PI/2.0;\n+      }\n+\n+      /* Compute acos(x) = atan(sqrt(1-x*x)/x) */\n+\n+      /* Split x */\n+      double temp = x * HEX_40000000;\n+      final double xa = x + temp - temp;\n+      final double xb = x - xa;\n+\n+      /* Square it */\n+      double ya = xa*xa;\n+      double yb = xa*xb*2.0 + xb*xb;\n+\n+      /* Subtract from 1 */\n+      ya = -ya;\n+      yb = -yb;\n+\n+      double za = 1.0 + ya;\n+      double zb = -(za - 1.0 - ya);\n+\n+      temp = za + yb;\n+      zb += -(temp - za - yb);\n+      za = temp;\n+\n+      /* Square root */\n+      double y = sqrt(za);\n+      temp = y * HEX_40000000;\n+      ya = y + temp - temp;\n+      yb = y - ya;\n+\n+      /* Extend precision of sqrt */\n+      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);\n+\n+      /* Contribution of zb to sqrt */\n+      yb += zb / (2.0*y);\n+      y = ya+yb;\n+      yb = -(y - ya - yb);\n+\n+      // Compute ratio r = y/x\n+      double r = y/x;\n+\n+      // Did r overflow?\n+      if (Double.isInfinite(r)) { // x is effectively zero\n+          return Math.PI/2; // so return the appropriate value\n+      }\n+\n+      double ra = doubleHighPart(r);\n+      double rb = r - ra;\n+\n+      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division\n+      rb += yb / x;  // Add in effect additional bits of sqrt.\n+\n+      temp = ra + rb;\n+      rb = -(temp - ra - rb);\n+      ra = temp;\n+\n+      return atan(ra, rb, x<0);\n+    }\n+\n+    /** Compute the cubic root of a number.\n+     * @param x number on which evaluation is done\n+     * @return cubic root of x\n+     */\n+    public static double cbrt(double x) {\n+      /* Convert input double to bits */\n+      long inbits = Double.doubleToLongBits(x);\n+      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;\n+      boolean subnormal = false;\n+\n+      if (exponent == -1023) {\n+          if (x == 0) {\n+              return x;\n+          }\n+\n+          /* Subnormal, so normalize */\n+          subnormal = true;\n+          x *= 1.8014398509481984E16;  // 2^54\n+          inbits = Double.doubleToLongBits(x);\n+          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;\n+      }\n+\n+      if (exponent == 1024) {\n+          // Nan or infinity.  Don't care which.\n+          return x;\n+      }\n+\n+      /* Divide the exponent by 3 */\n+      int exp3 = exponent / 3;\n+\n+      /* p2 will be the nearest power of 2 to x with its exponent divided by 3 */\n+      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |\n+                                          (long)(((exp3 + 1023) & 0x7ff)) << 52);\n+\n+      /* This will be a number between 1 and 2 */\n+      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);\n+\n+      /* Estimate the cube root of mant by polynomial */\n+      double est = -0.010714690733195933;\n+      est = est * mant + 0.0875862700108075;\n+      est = est * mant + -0.3058015757857271;\n+      est = est * mant + 0.7249995199969751;\n+      est = est * mant + 0.5039018405998233;\n+\n+      est *= CBRTTWO[exponent % 3 + 2];\n+\n+      // est should now be good to about 15 bits of precision.   Do 2 rounds of\n+      // Newton's method to get closer,  this should get us full double precision\n+      // Scale down x for the purpose of doing newtons method.  This avoids over/under flows.\n+      final double xs = x / (p2*p2*p2);\n+      est += (xs - est*est*est) / (3*est*est);\n+      est += (xs - est*est*est) / (3*est*est);\n+\n+      // Do one round of Newton's method in extended precision to get the last bit right.\n+      double temp = est * HEX_40000000;\n+      double ya = est + temp - temp;\n+      double yb = est - ya;\n+\n+      double za = ya * ya;\n+      double zb = ya * yb * 2.0 + yb * yb;\n+      temp = za * HEX_40000000;\n+      double temp2 = za + temp - temp;\n+      zb += za - temp2;\n+      za = temp2;\n+\n+      zb = za * yb + ya * zb + zb * yb;\n+      za = za * ya;\n+\n+      double na = xs - za;\n+      double nb = -(na - xs + za);\n+      nb -= zb;\n+\n+      est += (na+nb)/(3*est*est);\n+\n+      /* Scale by a power of two, so this is exact. */\n+      est *= p2;\n+\n+      if (subnormal) {\n+          est *= 3.814697265625E-6;  // 2^-18\n+      }\n+\n+      return est;\n+    }\n+\n+    /**\n+     *  Convert degrees to radians, with error of less than 0.5 ULP\n+     *  @param x angle in degrees\n+     *  @return x converted into radians\n+     */\n+    public static double toRadians(double x)\n+    {\n+        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n+            return x;\n+        }\n+\n+        // These are PI/180 split into high and low order bits\n+        final double facta = 0.01745329052209854;\n+        final double factb = 1.997844754509471E-9;\n+\n+        double xa = doubleHighPart(x);\n+        double xb = x - xa;\n+\n+        double result = xb * factb + xb * facta + xa * factb + xa * facta;\n+        if (result == 0) {\n+            result = result * x; // ensure correct sign if calculation underflows\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     *  Convert radians to degrees, with error of less than 0.5 ULP\n+     *  @param x angle in radians\n+     *  @return x converted into degrees\n+     */\n+    public static double toDegrees(double x)\n+    {\n+        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n+            return x;\n+        }\n+\n+        // These are 180/PI split into high and low order bits\n+        final double facta = 57.2957763671875;\n+        final double factb = 3.145894820876798E-6;\n+\n+        double xa = doubleHighPart(x);\n+        double xb = x - xa;\n+\n+        return xb * factb + xb * facta + xa * factb + xa * facta;\n+    }\n+\n+    /**\n+     * Absolute value.\n+     * @param x number from which absolute value is requested\n+     * @return abs(x)\n+     */\n+    public static int abs(final int x) {\n+        return (x < 0) ? -x : x;\n+    }\n+\n+    /**\n+     * Absolute value.\n+     * @param x number from which absolute value is requested\n+     * @return abs(x)\n+     */\n+    public static long abs(final long x) {\n+        return (x < 0l) ? -x : x;\n+    }\n+\n+    /**\n+     * Absolute value.\n+     * @param x number from which absolute value is requested\n+     * @return abs(x)\n+     */\n+    public static float abs(final float x) {\n+        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0\n+    }\n+\n+    /**\n+     * Absolute value.\n+     * @param x number from which absolute value is requested\n+     * @return abs(x)\n+     */\n+    public static double abs(double x) {\n+        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n+    }\n+\n+    /**\n+     * Compute least significant bit (Unit in Last Position) for a number.\n+     * @param x number from which ulp is requested\n+     * @return ulp(x)\n+     */\n+    public static double ulp(double x) {\n+        if (Double.isInfinite(x)) {\n+            return Double.POSITIVE_INFINITY;\n+        }\n+        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));\n+    }\n+\n+    /**\n+     * Compute least significant bit (Unit in Last Position) for a number.\n+     * @param x number from which ulp is requested\n+     * @return ulp(x)\n+     */\n+    public static float ulp(float x) {\n+        if (Float.isInfinite(x)) {\n+            return Float.POSITIVE_INFINITY;\n+        }\n+        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));\n+    }\n+\n+    /**\n+     * Multiply a double number by a power of 2.\n+     * @param d number to multiply\n+     * @param n power of 2\n+     * @return d &times; 2<sup>n</sup>\n+     */\n+    public static double scalb(final double d, final int n) {\n+\n+        // first simple and fast handling when 2^n can be represented using normal numbers\n+        if ((n > -1023) && (n < 1024)) {\n+            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);\n+        }\n+\n+        // handle special cases\n+        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {\n+            return d;\n+        }\n+        if (n < -2098) {\n+            return (d > 0) ? 0.0 : -0.0;\n+        }\n+        if (n > 2097) {\n+            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;\n+        }\n+\n+        // decompose d\n+        final long bits = Double.doubleToLongBits(d);\n+        final long sign = bits & 0x8000000000000000L;\n+        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;\n+        long mantissa   = bits & 0x000fffffffffffffL;\n+\n+        // compute scaled exponent\n+        int scaledExponent = exponent + n;\n+\n+        if (n < 0) {\n+            // we are really in the case n <= -1023\n+            if (scaledExponent > 0) {\n+                // both the input and the result are normal numbers, we only adjust the exponent\n+                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);\n+            } else if (scaledExponent > -53) {\n+                // the input is a normal number and the result is a subnormal number\n+\n+                // recover the hidden mantissa bit\n+                mantissa = mantissa | (1L << 52);\n+\n+                // scales down complete mantissa, hence losing least significant bits\n+                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));\n+                mantissa = mantissa >>> (1 - scaledExponent);\n+                if (mostSignificantLostBit != 0) {\n+                    // we need to add 1 bit to round up the result\n+                    mantissa++;\n+                }\n+                return Double.longBitsToDouble(sign | mantissa);\n+\n+            } else {\n+                // no need to compute the mantissa, the number scales down to 0\n+                return (sign == 0L) ? 0.0 : -0.0;\n+            }\n+        } else {\n+            // we are really in the case n >= 1024\n+            if (exponent == 0) {\n+\n+                // the input number is subnormal, normalize it\n+                while ((mantissa >>> 52) != 1) {\n+                    mantissa = mantissa << 1;\n+                    --scaledExponent;\n+                }\n+                ++scaledExponent;\n+                mantissa = mantissa & 0x000fffffffffffffL;\n+\n+                if (scaledExponent < 2047) {\n+                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);\n+                } else {\n+                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;\n+                }\n+\n+            } else if (scaledExponent < 2047) {\n+                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);\n+            } else {\n+                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;\n+            }\n+        }\n+\n+    }\n+\n+    /**\n+     * Multiply a float number by a power of 2.\n+     * @param f number to multiply\n+     * @param n power of 2\n+     * @return f &times; 2<sup>n</sup>\n+     */\n+    public static float scalb(final float f, final int n) {\n+\n+        // first simple and fast handling when 2^n can be represented using normal numbers\n+        if ((n > -127) && (n < 128)) {\n+            return f * Float.intBitsToFloat((n + 127) << 23);\n+        }\n+\n+        // handle special cases\n+        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {\n+            return f;\n+        }\n+        if (n < -277) {\n+            return (f > 0) ? 0.0f : -0.0f;\n+        }\n+        if (n > 276) {\n+            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;\n+        }\n+\n+        // decompose f\n+        final int bits = Float.floatToIntBits(f);\n+        final int sign = bits & 0x80000000;\n+        int  exponent  = (bits >>> 23) & 0xff;\n+        int mantissa   = bits & 0x007fffff;\n+\n+        // compute scaled exponent\n+        int scaledExponent = exponent + n;\n+\n+        if (n < 0) {\n+            // we are really in the case n <= -127\n+            if (scaledExponent > 0) {\n+                // both the input and the result are normal numbers, we only adjust the exponent\n+                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);\n+            } else if (scaledExponent > -24) {\n+                // the input is a normal number and the result is a subnormal number\n+\n+                // recover the hidden mantissa bit\n+                mantissa = mantissa | (1 << 23);\n+\n+                // scales down complete mantissa, hence losing least significant bits\n+                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));\n+                mantissa = mantissa >>> (1 - scaledExponent);\n+                if (mostSignificantLostBit != 0) {\n+                    // we need to add 1 bit to round up the result\n+                    mantissa++;\n+                }\n+                return Float.intBitsToFloat(sign | mantissa);\n+\n+            } else {\n+                // no need to compute the mantissa, the number scales down to 0\n+                return (sign == 0) ? 0.0f : -0.0f;\n+            }\n+        } else {\n+            // we are really in the case n >= 128\n+            if (exponent == 0) {\n+\n+                // the input number is subnormal, normalize it\n+                while ((mantissa >>> 23) != 1) {\n+                    mantissa = mantissa << 1;\n+                    --scaledExponent;\n+                }\n+                ++scaledExponent;\n+                mantissa = mantissa & 0x007fffff;\n+\n+                if (scaledExponent < 255) {\n+                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);\n+                } else {\n+                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;\n+                }\n+\n+            } else if (scaledExponent < 255) {\n+                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);\n+            } else {\n+                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;\n+            }\n+        }\n+\n+    }\n+\n+    /**\n+     * Get the next machine representable number after a number, moving\n+     * in the direction of another number.\n+     * <p>\n+     * The ordering is as follows (increasing):\n+     * <ul>\n+     * <li>-INFINITY</li>\n+     * <li>-MAX_VALUE</li>\n+     * <li>-MIN_VALUE</li>\n+     * <li>-0.0</li>\n+     * <li>+0.0</li>\n+     * <li>+MIN_VALUE</li>\n+     * <li>+MAX_VALUE</li>\n+     * <li>+INFINITY</li>\n+     * <li></li>\n+     * <p>\n+     * If arguments compare equal, then the second argument is returned.\n+     * <p>\n+     * If {@code direction} is greater than {@code d},\n+     * the smallest machine representable number strictly greater than\n+     * {@code d} is returned; if less, then the largest representable number\n+     * strictly less than {@code d} is returned.</p>\n+     * <p>\n+     * If {@code d} is infinite and direction does not\n+     * bring it back to finite numbers, it is returned unchanged.</p>\n+     *\n+     * @param d base number\n+     * @param direction (the only important thing is whether\n+     * {@code direction} is greater or smaller than {@code d})\n+     * @return the next machine representable number in the specified direction\n+     */\n+    public static double nextAfter(double d, double direction) {\n+\n+        // handling of some important special cases\n+        if (Double.isNaN(d) || Double.isNaN(direction)) {\n+            return Double.NaN;\n+        } else if (d == direction) {\n+            return direction;\n+        } else if (Double.isInfinite(d)) {\n+            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;\n+        } else if (d == 0) {\n+            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;\n+        }\n+        // special cases MAX_VALUE to infinity and  MIN_VALUE to 0\n+        // are handled just as normal numbers\n+\n+        final long bits = Double.doubleToLongBits(d);\n+        final long sign = bits & 0x8000000000000000L;\n+        if ((direction < d) ^ (sign == 0L)) {\n+            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));\n+        } else {\n+            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));\n+        }\n+\n+    }\n+\n+    /**\n+     * Get the next machine representable number after a number, moving\n+     * in the direction of another number.\n+     * <p>\n+     * The ordering is as follows (increasing):\n+     * <ul>\n+     * <li>-INFINITY</li>\n+     * <li>-MAX_VALUE</li>\n+     * <li>-MIN_VALUE</li>\n+     * <li>-0.0</li>\n+     * <li>+0.0</li>\n+     * <li>+MIN_VALUE</li>\n+     * <li>+MAX_VALUE</li>\n+     * <li>+INFINITY</li>\n+     * <li></li>\n+     * <p>\n+     * If arguments compare equal, then the second argument is returned.\n+     * <p>\n+     * If {@code direction} is greater than {@code f},\n+     * the smallest machine representable number strictly greater than\n+     * {@code f} is returned; if less, then the largest representable number\n+     * strictly less than {@code f} is returned.</p>\n+     * <p>\n+     * If {@code f} is infinite and direction does not\n+     * bring it back to finite numbers, it is returned unchanged.</p>\n+     *\n+     * @param f base number\n+     * @param direction (the only important thing is whether\n+     * {@code direction} is greater or smaller than {@code f})\n+     * @return the next machine representable number in the specified direction\n+     */\n+    public static float nextAfter(final float f, final double direction) {\n+\n+        // handling of some important special cases\n+        if (Double.isNaN(f) || Double.isNaN(direction)) {\n+            return Float.NaN;\n+        } else if (f == direction) {\n+            return (float) direction;\n+        } else if (Float.isInfinite(f)) {\n+            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;\n+        } else if (f == 0f) {\n+            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;\n+        }\n+        // special cases MAX_VALUE to infinity and  MIN_VALUE to 0\n+        // are handled just as normal numbers\n+\n+        final int bits = Float.floatToIntBits(f);\n+        final int sign = bits & 0x80000000;\n+        if ((direction < f) ^ (sign == 0)) {\n+            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));\n+        } else {\n+            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));\n+        }\n+\n+    }\n+\n+    /** Get the largest whole number smaller than x.\n+     * @param x number from which floor is requested\n+     * @return a double number f such that f is an integer f <= x < f + 1.0\n+     */\n+    public static double floor(double x) {\n+        long y;\n+\n+        if (x != x) { // NaN\n+            return x;\n+        }\n+\n+        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {\n+            return x;\n+        }\n+\n+        y = (long) x;\n+        if (x < 0 && y != x) {\n+            y--;\n+        }\n+\n+        if (y == 0) {\n+            return x*y;\n+        }\n+\n+        return y;\n+    }\n+\n+    /** Get the smallest whole number larger than x.\n+     * @param x number from which ceil is requested\n+     * @return a double number c such that c is an integer c - 1.0 < x <= c\n+     */\n+    public static double ceil(double x) {\n+        double y;\n+\n+        if (x != x) { // NaN\n+            return x;\n+        }\n+\n+        y = floor(x);\n+        if (y == x) {\n+            return y;\n+        }\n+\n+        y += 1.0;\n+\n+        if (y == 0) {\n+            return x*y;\n+        }\n+\n+        return y;\n+    }\n+\n+    /** Get the whole number that is the nearest to x, or the even one if x is exactly half way between two integers.\n+     * @param x number from which nearest whole number is requested\n+     * @return a double number r such that r is an integer r - 0.5 <= x <= r + 0.5\n+     */\n+    public static double rint(double x) {\n+        double y = floor(x);\n+        double d = x - y;\n+\n+        if (d > 0.5) {\n+            if (y == -1.0) {\n+                return -0.0; // Preserve sign of operand\n+            }\n+            return y+1.0;\n+        }\n+        if (d < 0.5) {\n+            return y;\n+        }\n+\n+        /* half way, round to even */\n+        long z = (long) y;\n+        return (z & 1) == 0 ? y : y + 1.0;\n+    }\n+\n+    /** Get the closest long to x.\n+     * @param x number from which closest long is requested\n+     * @return closest long to x\n+     */\n+    public static long round(double x) {\n+        return (long) floor(x + 0.5);\n+    }\n+\n+    /** Get the closest int to x.\n+     * @param x number from which closest int is requested\n+     * @return closest int to x\n+     */\n+    public static int round(final float x) {\n+        return (int) floor(x + 0.5f);\n+    }\n+\n+    /** Compute the minimum of two values\n+     * @param a first value\n+     * @param b second value\n+     * @return a if a is lesser or equal to b, b otherwise\n+     */\n+    public static int min(final int a, final int b) {\n+        return (a <= b) ? a : b;\n+    }\n+\n+    /** Compute the minimum of two values\n+     * @param a first value\n+     * @param b second value\n+     * @return a if a is lesser or equal to b, b otherwise\n+     */\n+    public static long min(final long a, final long b) {\n+        return (a <= b) ? a : b;\n+    }\n+\n+    /** Compute the minimum of two values\n+     * @param a first value\n+     * @param b second value\n+     * @return a if a is lesser or equal to b, b otherwise\n+     */\n+    public static float min(final float a, final float b) {\n+        if (a > b) {\n+            return b;\n+        }\n+        if (a < b) {\n+            return a;\n+        }\n+        /* if either arg is NaN, return NaN */\n+        if (a != b) {\n+            return Float.NaN;\n+        }\n+        /* min(+0.0,-0.0) == -0.0 */\n+        /* 0x80000000 == Float.floatToRawIntBits(-0.0d) */\n+        int bits = Float.floatToRawIntBits(a);\n+        if (bits == 0x80000000) {\n+            return a;\n+        }\n+        return b;\n+    }\n+\n+    /** Compute the minimum of two values\n+     * @param a first value\n+     * @param b second value\n+     * @return a if a is lesser or equal to b, b otherwise\n+     */\n+    public static double min(final double a, final double b) {\n+        if (a > b) {\n+            return b;\n+        }\n+        if (a < b) {\n+            return a;\n+        }\n+        /* if either arg is NaN, return NaN */\n+        if (a != b) {\n+            return Double.NaN;\n+        }\n+        /* min(+0.0,-0.0) == -0.0 */\n+        /* 0x8000000000000000L == Double.doubleToRawLongBits(-0.0d) */\n+        long bits = Double.doubleToRawLongBits(a);\n+        if (bits == 0x8000000000000000L) {\n+            return a;\n+        }\n+        return b;\n+    }\n+\n+    /** Compute the maximum of two values\n+     * @param a first value\n+     * @param b second value\n+     * @return b if a is lesser or equal to b, a otherwise\n+     */\n+    public static int max(final int a, final int b) {\n+        return (a <= b) ? b : a;\n+    }\n+\n+    /** Compute the maximum of two values\n+     * @param a first value\n+     * @param b second value\n+     * @return b if a is lesser or equal to b, a otherwise\n+     */\n+    public static long max(final long a, final long b) {\n+        return (a <= b) ? b : a;\n+    }\n+\n+    /** Compute the maximum of two values\n+     * @param a first value\n+     * @param b second value\n+     * @return b if a is lesser or equal to b, a otherwise\n+     */\n+    public static float max(final float a, final float b) {\n+        if (a > b) {\n+            return a;\n+        }\n+        if (a < b) {\n+            return b;\n+        }\n+        /* if either arg is NaN, return NaN */\n+        if (a != b) {\n+            return Float.NaN;\n+        }\n+        /* min(+0.0,-0.0) == -0.0 */\n+        /* 0x80000000 == Float.floatToRawIntBits(-0.0d) */\n+        int bits = Float.floatToRawIntBits(a);\n+        if (bits == 0x80000000) {\n+            return b;\n+        }\n+        return a;\n+    }\n+\n+    /** Compute the maximum of two values\n+     * @param a first value\n+     * @param b second value\n+     * @return b if a is lesser or equal to b, a otherwise\n+     */\n+    public static double max(final double a, final double b) {\n+        if (a > b) {\n+            return a;\n+        }\n+        if (a < b) {\n+            return b;\n+        }\n+        /* if either arg is NaN, return NaN */\n+        if (a != b) {\n+            return Double.NaN;\n+        }\n+        /* min(+0.0,-0.0) == -0.0 */\n+        /* 0x8000000000000000L == Double.doubleToRawLongBits(-0.0d) */\n+        long bits = Double.doubleToRawLongBits(a);\n+        if (bits == 0x8000000000000000L) {\n+            return b;\n+        }\n+        return a;\n+    }\n+\n+    /**\n+     * Returns the hypotenuse of a triangle with sides {@code x} and {@code y}\n+     * - sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)<br/>\n+     * avoiding intermediate overflow or underflow.\n+     *\n+     * <ul>\n+     * <li> If either argument is infinite, then the result is positive infinity.</li>\n+     * <li> else, if either argument is NaN then the result is NaN.</li>\n+     * </ul>\n+     *\n+     * @param x a value\n+     * @param y a value\n+     * @return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)\n+     */\n+    public static double hypot(final double x, final double y) {\n+        if (Double.isInfinite(x) || Double.isInfinite(y)) {\n+            return Double.POSITIVE_INFINITY;\n+        } else if (Double.isNaN(x) || Double.isNaN(y)) {\n+            return Double.NaN;\n+        } else {\n+\n+            final int expX = getExponent(x);\n+            final int expY = getExponent(y);\n+            if (expX > expY + 27) {\n+                // y is neglectible with respect to x\n+                return abs(x);\n+            } else if (expY > expX + 27) {\n+                // x is neglectible with respect to y\n+                return abs(y);\n+            } else {\n+\n+                // find an intermediate scale to avoid both overflow and underflow\n+                final int middleExp = (expX + expY) / 2;\n+\n+                // scale parameters without losing precision\n+                final double scaledX = scalb(x, -middleExp);\n+                final double scaledY = scalb(y, -middleExp);\n+\n+                // compute scaled hypotenuse\n+                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);\n+\n+                // remove scaling\n+                return scalb(scaledH, middleExp);\n+\n+            }\n+\n+        }\n+    }\n+\n+    /**\n+     * Computes the remainder as prescribed by the IEEE 754 standard.\n+     * The remainder value is mathematically equal to {@code x - y*n}\n+     * where {@code n} is the mathematical integer closest to the exact mathematical value\n+     * of the quotient {@code x/y}.\n+     * If two mathematical integers are equally close to {@code x/y} then\n+     * {@code n} is the integer that is even.\n+     * <p>\n+     * <ul>\n+     * <li>If either operand is NaN, the result is NaN.</li>\n+     * <li>If the result is not NaN, the sign of the result equals the sign of the dividend.</li>\n+     * <li>If the dividend is an infinity, or the divisor is a zero, or both, the result is NaN.</li>\n+     * <li>If the dividend is finite and the divisor is an infinity, the result equals the dividend.</li>\n+     * <li>If the dividend is a zero and the divisor is finite, the result equals the dividend.</li>\n+     * </ul>\n+     * <p><b>Note:</b> this implementation currently delegates to {@link StrictMath#IEEEremainder}\n+     * @param dividend the number to be divided\n+     * @param divisor the number by which to divide\n+     * @return the remainder, rounded\n+     */\n+    public static double IEEEremainder(double dividend, double divisor) {\n+        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation\n+    }\n+\n+    /**\n+     * Returns the first argument with the sign of the second argument.\n+     * A NaN {@code sign} argument is treated as positive.\n+     *\n+     * @param magnitude the value to return\n+     * @param sign the sign for the returned value\n+     * @return the magnitude with the same sign as the {@code sign} argument\n+     */\n+    public static double copySign(double magnitude, double sign){\n+        long m = Double.doubleToLongBits(magnitude);\n+        long s = Double.doubleToLongBits(sign);\n+        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK\n+            return magnitude;\n+        }\n+        return -magnitude; // flip sign\n+    }\n+\n+    /**\n+     * Returns the first argument with the sign of the second argument.\n+     * A NaN {@code sign} argument is treated as positive.\n+     *\n+     * @param magnitude the value to return\n+     * @param sign the sign for the returned value\n+     * @return the magnitude with the same sign as the {@code sign} argument\n+     */\n+    public static float copySign(float magnitude, float sign){\n+        int m = Float.floatToIntBits(magnitude);\n+        int s = Float.floatToIntBits(sign);\n+        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK\n+            return magnitude;\n+        }\n+        return -magnitude; // flip sign\n+    }\n+\n+    /**\n+     * Return the exponent of a double number, removing the bias.\n+     * <p>\n+     * For double numbers of the form 2<sup>x</sup>, the unbiased\n+     * exponent is exactly x.\n+     * </p>\n+     * @param d number from which exponent is requested\n+     * @return exponent for d in IEEE754 representation, without bias\n+     */\n+    public static int getExponent(final double d) {\n+        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;\n+    }\n+\n+    /**\n+     * Return the exponent of a float number, removing the bias.\n+     * <p>\n+     * For float numbers of the form 2<sup>x</sup>, the unbiased\n+     * exponent is exactly x.\n+     * </p>\n+     * @param f number from which exponent is requested\n+     * @return exponent for d in IEEE754 representation, without bias\n+     */\n+    public static int getExponent(final float f) {\n+        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;\n+    }\n+\n+    // print out contents of arrays, and check the length\n+    // used to generate the preset arrays originally\n+    public static void main(String[] a){\n+        FastMathCalc.printarray(\"EXP_INT_TABLE_A\", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);\n+        FastMathCalc.printarray(\"EXP_INT_TABLE_B\", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);\n+        FastMathCalc.printarray(\"EXP_FRAC_TABLE_A\", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);\n+        FastMathCalc.printarray(\"EXP_FRAC_TABLE_B\", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);\n+        FastMathCalc.printarray(\"LN_MANT\",LN_MANT_LEN, lnMant.LN_MANT);\n+        FastMathCalc.printarray(\"SINE_TABLE_A\", SINE_TABLE_LEN, SINE_TABLE_A);\n+        FastMathCalc.printarray(\"SINE_TABLE_B\", SINE_TABLE_LEN, SINE_TABLE_B);\n+        FastMathCalc.printarray(\"COSINE_TABLE_A\", SINE_TABLE_LEN, COSINE_TABLE_A);\n+        FastMathCalc.printarray(\"COSINE_TABLE_B\", SINE_TABLE_LEN, COSINE_TABLE_B);\n+        FastMathCalc.printarray(\"TANGENT_TABLE_A\", SINE_TABLE_LEN, TANGENT_TABLE_A);\n+        FastMathCalc.printarray(\"TANGENT_TABLE_B\", SINE_TABLE_LEN, TANGENT_TABLE_B);\n+    }\n+\n+\n+    //  ===================================== large static tables ====================================\n+\n+\n+    /** Index of exp(0) in the array of integer exponentials. */\n+    private static final int EXP_INT_TABLE_MAX_INDEX = 750;\n+\n+    /** Length of the array of integer exponentials. */\n+    private static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;\n \n     // Enclose large data table in nested static class so it's only loaded on first access\n     private static class ExpIntTable {\n         }\n     }\n \n-      private static final int TWO_POWER_10 = 1024;\n-      private static final int EXP_FRAC_TABLE_LEN = TWO_POWER_10 + 1; // 0, 1/1024, ... 1024/1024\n-\n-      // Enclose large data table in nested static class so it's only loaded on first access\n-      private static class ExpFracTable {\n-          /** Exponential over the range of 0 - 1 in increments of 2^-10\n-           * exp(x/1024) =  expFracTableA[x] + expFracTableB[x].\n-           * 1024 = 2^10\n-           */\n-          private static final double[] EXP_FRAC_TABLE_A;\n-          /** Exponential over the range of 0 - 1 in increments of 2^-10\n-           * exp(x/1024) =  expFracTableA[x] + expFracTableB[x].\n-           */\n-          private static final double[] EXP_FRAC_TABLE_B;\n-\n-          static {\n-              if (FastMath.USE_PRECOMPUTED_TABLES) {\n-                  EXP_FRAC_TABLE_A = new double[FastMath.EXP_FRAC_TABLE_LEN];\n-                  EXP_FRAC_TABLE_B = new double[FastMath.EXP_FRAC_TABLE_LEN];\n-\n-                  final double tmp[] = new double[2];\n-                  final double recip[] = new double[2];\n-\n-                  // Populate expFracTable\n-                  for (int i = 0; i < EXP_FRAC_TABLE_A.length; i++) {\n-                      FastMathCalc.slowexp(i/1024.0, tmp); // TWO_POWER_10\n-                      EXP_FRAC_TABLE_A[i] = tmp[0];\n-                      EXP_FRAC_TABLE_B[i] = tmp[1];\n-                  }\n-              } else {\n-                  EXP_FRAC_TABLE_A = new double[] {\n-        +1.0d,\n-        +1.0009770393371582d,\n-        +1.0019550323486328d,\n-        +1.0029339790344238d,\n-        +1.0039138793945312d,\n-        +1.004894733428955d,\n-        +1.0058765411376953d,\n-        +1.006859302520752d,\n-        +1.007843017578125d,\n-        +1.0088276863098145d,\n-        +1.0098135471343994d,\n-        +1.0108001232147217d,\n-        +1.0117876529693604d,\n-        +1.0127761363983154d,\n-        +1.013765811920166d,\n-        +1.014756202697754d,\n-        +1.0157477855682373d,\n-        +1.016740083694458d,\n-        +1.0177335739135742d,\n-        +1.0187277793884277d,\n-        +1.0197231769561768d,\n-        +1.0207195281982422d,\n-        +1.021716833114624d,\n-        +1.0227150917053223d,\n-        +1.023714303970337d,\n-        +1.024714469909668d,\n-        +1.0257158279418945d,\n-        +1.0267179012298584d,\n-        +1.0277209281921387d,\n-        +1.0287251472473145d,\n-        +1.0297303199768066d,\n-        +1.0307364463806152d,\n-        +1.0317435264587402d,\n-        +1.0327515602111816d,\n-        +1.0337605476379395d,\n-        +1.0347704887390137d,\n-        +1.0357816219329834d,\n-        +1.0367934703826904d,\n-        +1.037806510925293d,\n-        +1.038820505142212d,\n-        +1.0398354530334473d,\n-        +1.040851354598999d,\n-        +1.0418684482574463d,\n-        +1.0428862571716309d,\n-        +1.043905258178711d,\n-        +1.0449252128601074d,\n-        +1.0459461212158203d,\n-        +1.0469679832458496d,\n-        +1.0479910373687744d,\n-        +1.0490150451660156d,\n-        +1.0500397682189941d,\n-        +1.0510656833648682d,\n-        +1.0520927906036377d,\n-        +1.0531206130981445d,\n-        +1.0541496276855469d,\n-        +1.0551795959472656d,\n-        +1.0562105178833008d,\n-        +1.0572423934936523d,\n-        +1.0582754611968994d,\n-        +1.059309482574463d,\n-        +1.0603444576263428d,\n-        +1.061380386352539d,\n-        +1.0624175071716309d,\n-        +1.06345534324646d,\n-        +1.0644943714141846d,\n-        +1.0655345916748047d,\n-        +1.066575527191162d,\n-        +1.067617654800415d,\n-        +1.0686607360839844d,\n-        +1.0697050094604492d,\n-        +1.0707499980926514d,\n-        +1.071796178817749d,\n-        +1.072843313217163d,\n-        +1.0738916397094727d,\n-        +1.0749409198760986d,\n-        +1.075991153717041d,\n-        +1.0770423412322998d,\n-        +1.078094720840454d,\n-        +1.0791480541229248d,\n-        +1.080202341079712d,\n-        +1.0812578201293945d,\n-        +1.0823142528533936d,\n-        +1.083371639251709d,\n-        +1.08443021774292d,\n-        +1.0854897499084473d,\n-        +1.086550235748291d,\n-        +1.0876119136810303d,\n-        +1.088674545288086d,\n-        +1.089738130569458d,\n-        +1.0908029079437256d,\n-        +1.0918686389923096d,\n-        +1.092935562133789d,\n-        +1.094003438949585d,\n-        +1.0950722694396973d,\n-        +1.096142053604126d,\n-        +1.0972130298614502d,\n-        +1.09828519821167d,\n-        +1.099358320236206d,\n-        +1.1004323959350586d,\n-        +1.1015074253082275d,\n-        +1.102583646774292d,\n-        +1.103661060333252d,\n-        +1.1047391891479492d,\n-        +1.105818748474121d,\n-        +1.1068990230560303d,\n-        +1.107980489730835d,\n-        +1.1090631484985352d,\n-        +1.1101467609405518d,\n-        +1.1112313270568848d,\n-        +1.1123170852661133d,\n-        +1.1134037971496582d,\n-        +1.1144917011260986d,\n-        +1.1155805587768555d,\n-        +1.1166706085205078d,\n-        +1.1177616119384766d,\n-        +1.1188538074493408d,\n-        +1.1199469566345215d,\n-        +1.1210410594940186d,\n-        +1.1221363544464111d,\n-        +1.1232328414916992d,\n-        +1.1243302822113037d,\n-        +1.1254286766052246d,\n-        +1.126528263092041d,\n-        +1.127629041671753d,\n-        +1.1287307739257812d,\n-        +1.129833459854126d,\n-        +1.1309373378753662d,\n-        +1.132042407989502d,\n-        +1.133148431777954d,\n-        +1.1342556476593018d,\n-        +1.1353638172149658d,\n-        +1.1364731788635254d,\n-        +1.1375834941864014d,\n-        +1.1386950016021729d,\n-        +1.1398074626922607d,\n-        +1.1409211158752441d,\n-        +1.142035961151123d,\n-        +1.1431517601013184d,\n-        +1.14426851272583d,\n-        +1.1453864574432373d,\n-        +1.14650559425354d,\n-        +1.1476259231567383d,\n-        +1.148747205734253d,\n-        +1.149869441986084d,\n-        +1.1509928703308105d,\n-        +1.1521174907684326d,\n-        +1.153243064880371d,\n-        +1.154369831085205d,\n-        +1.1554977893829346d,\n-        +1.1566267013549805d,\n-        +1.1577568054199219d,\n-        +1.1588881015777588d,\n-        +1.160020351409912d,\n-        +1.161153793334961d,\n-        +1.1622881889343262d,\n-        +1.163423776626587d,\n-        +1.1645605564117432d,\n-        +1.1656982898712158d,\n-        +1.166837215423584d,\n-        +1.1679773330688477d,\n-        +1.1691184043884277d,\n-        +1.1702606678009033d,\n-        +1.1714041233062744d,\n-        +1.172548532485962d,\n-        +1.173694133758545d,\n-        +1.1748409271240234d,\n-        +1.1759889125823975d,\n-        +1.177137851715088d,\n-        +1.1782879829406738d,\n-        +1.1794393062591553d,\n-        +1.1805915832519531d,\n-        +1.1817450523376465d,\n-        +1.1828997135162354d,\n-        +1.1840553283691406d,\n-        +1.1852121353149414d,\n-        +1.1863701343536377d,\n-        +1.1875293254852295d,\n-        +1.1886897087097168d,\n-        +1.1898510456085205d,\n-        +1.1910135746002197d,\n-        +1.1921772956848145d,\n-        +1.1933419704437256d,\n-        +1.1945080757141113d,\n-        +1.1956751346588135d,\n-        +1.1968433856964111d,\n-        +1.1980125904083252d,\n-        +1.1991832256317139d,\n-        +1.200354814529419d,\n-        +1.2015275955200195d,\n-        +1.2027015686035156d,\n-        +1.2038767337799072d,\n-        +1.2050528526306152d,\n-        +1.2062301635742188d,\n-        +1.2074086666107178d,\n-        +1.2085883617401123d,\n-        +1.2097692489624023d,\n-        +1.210951328277588d,\n-        +1.2121343612670898d,\n-        +1.2133188247680664d,\n-        +1.2145042419433594d,\n-        +1.2156908512115479d,\n-        +1.2168786525726318d,\n-        +1.2180676460266113d,\n-        +1.2192575931549072d,\n-        +1.2204489707946777d,\n-        +1.2216413021087646d,\n-        +1.222834825515747d,\n-        +1.224029779434204d,\n-        +1.2252256870269775d,\n-        +1.2264227867126465d,\n-        +1.227621078491211d,\n-        +1.2288203239440918d,\n-        +1.2300209999084473d,\n-        +1.2312228679656982d,\n-        +1.2324256896972656d,\n-        +1.2336299419403076d,\n-        +1.234835147857666d,\n-        +1.23604154586792d,\n-        +1.2372493743896484d,\n-        +1.2384581565856934d,\n-        +1.2396681308746338d,\n-        +1.2408792972564697d,\n-        +1.2420918941497803d,\n-        +1.2433054447174072d,\n-        +1.2445201873779297d,\n-        +1.2457361221313477d,\n-        +1.2469532489776611d,\n-        +1.2481715679168701d,\n-        +1.2493910789489746d,\n-        +1.2506117820739746d,\n-        +1.2518336772918701d,\n-        +1.2530567646026611d,\n-        +1.2542810440063477d,\n-        +1.2555065155029297d,\n-        +1.2567331790924072d,\n-        +1.2579610347747803d,\n-        +1.2591900825500488d,\n-        +1.260420322418213d,\n-        +1.2616519927978516d,\n-        +1.2628846168518066d,\n-        +1.2641184329986572d,\n-        +1.2653534412384033d,\n-        +1.266589879989624d,\n-        +1.2678272724151611d,\n-        +1.2690660953521729d,\n-        +1.27030611038208d,\n-        +1.2715470790863037d,\n-        +1.272789478302002d,\n-        +1.2740330696105957d,\n-        +1.275277853012085d,\n-        +1.2765238285064697d,\n-        +1.27777099609375d,\n-        +1.2790195941925049d,\n-        +1.2802691459655762d,\n-        +1.281519889831543d,\n-        +1.2827720642089844d,\n-        +1.2840254306793213d,\n-        +1.2852799892425537d,\n-        +1.2865357398986816d,\n-        +1.287792682647705d,\n-        +1.2890510559082031d,\n-        +1.2903103828430176d,\n-        +1.2915711402893066d,\n-        +1.2928330898284912d,\n-        +1.2940962314605713d,\n-        +1.2953605651855469d,\n-        +1.296626091003418d,\n-        +1.2978930473327637d,\n-        +1.2991611957550049d,\n-        +1.3004305362701416d,\n-        +1.3017010688781738d,\n-        +1.3029727935791016d,\n-        +1.304245948791504d,\n-        +1.3055200576782227d,\n-        +1.3067958354949951d,\n-        +1.308072566986084d,\n-        +1.3093504905700684d,\n-        +1.3106298446655273d,\n-        +1.3119103908538818d,\n-        +1.3131921291351318d,\n-        +1.3144752979278564d,\n-        +1.3157594203948975d,\n-        +1.317044973373413d,\n-        +1.3183319568634033d,\n-        +1.31961989402771d,\n-        +1.3209092617034912d,\n-        +1.322199821472168d,\n-        +1.3234915733337402d,\n-        +1.324784755706787d,\n-        +1.3260791301727295d,\n-        +1.3273746967315674d,\n-        +1.3286716938018799d,\n-        +1.329969882965088d,\n-        +1.3312692642211914d,\n-        +1.3325698375701904d,\n-        +1.333871841430664d,\n-        +1.3351752758026123d,\n-        +1.336479663848877d,\n-        +1.3377854824066162d,\n-        +1.339092493057251d,\n-        +1.3404009342193604d,\n-        +1.3417105674743652d,\n-        +1.3430213928222656d,\n-        +1.3443336486816406d,\n-        +1.3456470966339111d,\n-        +1.3469617366790771d,\n-        +1.3482778072357178d,\n-        +1.349595069885254d,\n-        +1.3509137630462646d,\n-        +1.352233648300171d,\n-        +1.3535549640655518d,\n-        +1.3548774719238281d,\n-        +1.356201171875d,\n-        +1.3575263023376465d,\n-        +1.3588526248931885d,\n-        +1.360180139541626d,\n-        +1.361509084701538d,\n-        +1.3628394603729248d,\n-        +1.364171028137207d,\n-        +1.3655037879943848d,\n-        +1.366837978363037d,\n-        +1.368173360824585d,\n-        +1.3695101737976074d,\n-        +1.3708481788635254d,\n-        +1.372187614440918d,\n-        +1.373528242111206d,\n-        +1.3748703002929688d,\n-        +1.376213550567627d,\n-        +1.3775582313537598d,\n-        +1.378904104232788d,\n-        +1.380251407623291d,\n-        +1.3815999031066895d,\n-        +1.3829498291015625d,\n-        +1.384300947189331d,\n-        +1.3856534957885742d,\n-        +1.387007236480713d,\n-        +1.3883624076843262d,\n-        +1.389719009399414d,\n-        +1.3910768032073975d,\n-        +1.3924360275268555d,\n-        +1.393796443939209d,\n-        +1.395158290863037d,\n-        +1.3965213298797607d,\n-        +1.397885799407959d,\n-        +1.3992514610290527d,\n-        +1.4006187915802002d,\n-        +1.401987075805664d,\n-        +1.4033570289611816d,\n-        +1.4047281742095947d,\n-        +1.4061005115509033d,\n-        +1.4074742794036865d,\n-        +1.4088494777679443d,\n-        +1.4102261066436768d,\n-        +1.4116039276123047d,\n-        +1.4129831790924072d,\n-        +1.4143636226654053d,\n-        +1.415745496749878d,\n-        +1.4171288013458252d,\n-        +1.418513298034668d,\n-        +1.4198992252349854d,\n-        +1.4212865829467773d,\n-        +1.4226751327514648d,\n-        +1.424065351486206d,\n-        +1.4254565238952637d,\n-        +1.426849365234375d,\n-        +1.4282433986663818d,\n-        +1.4296388626098633d,\n-        +1.4310357570648193d,\n-        +1.432433843612671d,\n-        +1.433833360671997d,\n-        +1.4352343082427979d,\n-        +1.4366366863250732d,\n-        +1.4380402565002441d,\n-        +1.4394452571868896d,\n-        +1.4408516883850098d,\n-        +1.4422595500946045d,\n-        +1.4436686038970947d,\n-        +1.4450790882110596d,\n-        +1.446491003036499d,\n-        +1.447904348373413d,\n-        +1.4493188858032227d,\n-        +1.450735092163086d,\n-        +1.4521524906158447d,\n-        +1.4535713195800781d,\n-        +1.454991340637207d,\n-        +1.4564130306243896d,\n-        +1.4578359127044678d,\n-        +1.4592602252960205d,\n-        +1.460686206817627d,\n-        +1.4621131420135498d,\n-        +1.4635417461395264d,\n-        +1.4649717807769775d,\n-        +1.4664030075073242d,\n-        +1.4678359031677246d,\n-        +1.4692699909210205d,\n-        +1.470705509185791d,\n-        +1.4721424579620361d,\n-        +1.4735808372497559d,\n-        +1.475020408630371d,\n-        +1.47646164894104d,\n-        +1.4779040813446045d,\n-        +1.4793481826782227d,\n-        +1.4807934761047363d,\n-        +1.4822404384613037d,\n-        +1.4836885929107666d,\n-        +1.485138177871704d,\n-        +1.4865891933441162d,\n-        +1.488041639328003d,\n-        +1.4894955158233643d,\n-        +1.4909508228302002d,\n-        +1.4924075603485107d,\n-        +1.493865728378296d,\n-        +1.4953253269195557d,\n-        +1.49678635597229d,\n-        +1.49824857711792d,\n-        +1.4997124671936035d,\n-        +1.5011777877807617d,\n-        +1.5026445388793945d,\n-        +1.504112720489502d,\n-        +1.505582332611084d,\n-        +1.5070531368255615d,\n-        +1.5085256099700928d,\n-        +1.5099995136260986d,\n-        +1.511474847793579d,\n-        +1.5129516124725342d,\n-        +1.5144298076629639d,\n-        +1.5159096717834473d,\n-        +1.5173907279968262d,\n-        +1.5188732147216797d,\n-        +1.5203571319580078d,\n-        +1.5218427181243896d,\n-        +1.523329496383667d,\n-        +1.524817943572998d,\n-        +1.5263078212738037d,\n-        +1.5277988910675049d,\n-        +1.5292916297912598d,\n-        +1.5307857990264893d,\n-        +1.5322813987731934d,\n-        +1.5337786674499512d,\n-        +1.5352771282196045d,\n-        +1.5367772579193115d,\n-        +1.538278579711914d,\n-        +1.5397815704345703d,\n-        +1.5412859916687012d,\n-        +1.5427920818328857d,\n-        +1.5442993640899658d,\n-        +1.5458080768585205d,\n-        +1.547318458557129d,\n-        +1.548830270767212d,\n-        +1.5503435134887695d,\n-        +1.5518584251403809d,\n-        +1.5533745288848877d,\n-        +1.5548923015594482d,\n-        +1.5564115047454834d,\n-        +1.5579321384429932d,\n-        +1.5594542026519775d,\n-        +1.5609779357910156d,\n-        +1.5625030994415283d,\n-        +1.5640296936035156d,\n-        +1.5655577182769775d,\n-        +1.5670874118804932d,\n-        +1.5686185359954834d,\n-        +1.5701510906219482d,\n-        +1.5716853141784668d,\n-        +1.5732207298278809d,\n-        +1.5747578144073486d,\n-        +1.5762965679168701d,\n-        +1.577836513519287d,\n-        +1.5793781280517578d,\n-        +1.5809214115142822d,\n-        +1.5824658870697021d,\n-        +1.5840120315551758d,\n-        +1.5855598449707031d,\n-        +1.587108850479126d,\n-        +1.5886595249176025d,\n-        +1.5902118682861328d,\n-        +1.5917654037475586d,\n-        +1.593320608139038d,\n-        +1.5948774814605713d,\n-        +1.596435785293579d,\n-        +1.5979955196380615d,\n-        +1.5995566844940186d,\n-        +1.6011195182800293d,\n-        +1.6026840209960938d,\n-        +1.6042497158050537d,\n-        +1.6058173179626465d,\n-        +1.6073861122131348d,\n-        +1.6089565753936768d,\n-        +1.6105287075042725d,\n-        +1.6121022701263428d,\n-        +1.6136772632598877d,\n-        +1.6152539253234863d,\n-        +1.6168320178985596d,\n-        +1.6184117794036865d,\n-        +1.619992971420288d,\n-        +1.6215758323669434d,\n-        +1.6231601238250732d,\n-        +1.6247460842132568d,\n-        +1.626333475112915d,\n-        +1.627922534942627d,\n-        +1.6295130252838135d,\n-        +1.6311051845550537d,\n-        +1.6326987743377686d,\n-        +1.634294033050537d,\n-        +1.6358907222747803d,\n-        +1.6374890804290771d,\n-        +1.6390891075134277d,\n-        +1.640690565109253d,\n-        +1.6422934532165527d,\n-        +1.6438980102539062d,\n-        +1.6455042362213135d,\n-        +1.6471118927001953d,\n-        +1.6487212181091309d,\n-        +1.6503322124481201d,\n-        +1.651944637298584d,\n-        +1.6535584926605225d,\n-        +1.6551742553710938d,\n-        +1.6567914485931396d,\n-        +1.6584100723266602d,\n-        +1.6600303649902344d,\n-        +1.6616523265838623d,\n-        +1.663275957107544d,\n-        +1.6649010181427002d,\n-        +1.666527509689331d,\n-        +1.6681559085845947d,\n-        +1.669785737991333d,\n-        +1.671417236328125d,\n-        +1.6730501651763916d,\n-        +1.674684762954712d,\n-        +1.676321029663086d,\n-        +1.6779589653015137d,\n-        +1.679598331451416d,\n-        +1.681239366531372d,\n-        +1.6828820705413818d,\n-        +1.6845262050628662d,\n-        +1.6861720085144043d,\n-        +1.687819480895996d,\n-        +1.6894686222076416d,\n-        +1.6911191940307617d,\n-        +1.6927716732025146d,\n-        +1.6944255828857422d,\n-        +1.6960809230804443d,\n-        +1.6977381706237793d,\n-        +1.6993968486785889d,\n-        +1.7010571956634521d,\n-        +1.7027192115783691d,\n-        +1.7043828964233398d,\n-        +1.7060482501983643d,\n-        +1.7077150344848633d,\n-        +1.709383487701416d,\n-        +1.7110536098480225d,\n-        +1.7127254009246826d,\n-        +1.7143988609313965d,\n-        +1.716073989868164d,\n-        +1.7177505493164062d,\n-        +1.7194287776947021d,\n-        +1.7211089134216309d,\n-        +1.7227904796600342d,\n-        +1.7244737148284912d,\n-        +1.726158618927002d,\n-        +1.7278449535369873d,\n-        +1.7295331954956055d,\n-        +1.7312231063842773d,\n-        +1.7329144477844238d,\n-        +1.7346076965332031d,\n-        +1.736302375793457d,\n-        +1.7379989624023438d,\n-        +1.739696979522705d,\n-        +1.7413966655731201d,\n-        +1.7430980205535889d,\n-        +1.7448012828826904d,\n-        +1.7465059757232666d,\n-        +1.7482123374938965d,\n-        +1.74992036819458d,\n-        +1.7516300678253174d,\n-        +1.7533416748046875d,\n-        +1.7550547122955322d,\n-        +1.7567694187164307d,\n-        +1.7584857940673828d,\n-        +1.7602040767669678d,\n-        +1.7619237899780273d,\n-        +1.7636451721191406d,\n-        +1.7653684616088867d,\n-        +1.7670931816101074d,\n-        +1.768819808959961d,\n-        +1.770547866821289d,\n-        +1.77227783203125d,\n-        +1.7740094661712646d,\n-        +1.775742769241333d,\n-        +1.777477741241455d,\n-        +1.7792143821716309d,\n-        +1.7809526920318604d,\n-        +1.7826926708221436d,\n-        +1.7844345569610596d,\n-        +1.7861778736114502d,\n-        +1.7879230976104736d,\n-        +1.7896699905395508d,\n-        +1.7914185523986816d,\n-        +1.7931687831878662d,\n-        +1.7949209213256836d,\n-        +1.7966744899749756d,\n-        +1.7984299659729004d,\n-        +1.800187110900879d,\n-        +1.8019459247589111d,\n-        +1.8037066459655762d,\n-        +1.8054687976837158d,\n-        +1.8072328567504883d,\n-        +1.8089985847473145d,\n-        +1.8107659816741943d,\n-        +1.812535285949707d,\n-        +1.8143062591552734d,\n-        +1.8160789012908936d,\n-        +1.8178532123565674d,\n-        +1.819629430770874d,\n-        +1.8214070796966553d,\n-        +1.8231868743896484d,\n-        +1.8249680995941162d,\n-        +1.8267512321472168d,\n-        +1.828536033630371d,\n-        +1.830322504043579d,\n-        +1.83211088180542d,\n-        +1.8339009284973145d,\n-        +1.8356926441192627d,\n-        +1.8374862670898438d,\n-        +1.8392815589904785d,\n-        +1.841078519821167d,\n-        +1.8428773880004883d,\n-        +1.8446779251098633d,\n-        +1.846480131149292d,\n-        +1.8482842445373535d,\n-        +1.8500902652740479d,\n-        +1.8518977165222168d,\n-        +1.8537070751190186d,\n-        +1.8555183410644531d,\n-        +1.8573312759399414d,\n-        +1.8591458797454834d,\n-        +1.8609623908996582d,\n-        +1.8627805709838867d,\n-        +1.864600658416748d,\n-        +1.866422414779663d,\n-        +1.8682458400726318d,\n-        +1.8700714111328125d,\n-        +1.8718984127044678d,\n-        +1.8737273216247559d,\n-        +1.8755581378936768d,\n-        +1.8773906230926514d,\n-        +1.8792247772216797d,\n-        +1.8810608386993408d,\n-        +1.8828988075256348d,\n-        +1.8847384452819824d,\n-        +1.886579990386963d,\n-        +1.888423204421997d,\n-        +1.890268325805664d,\n-        +1.8921151161193848d,\n-        +1.8939638137817383d,\n-        +1.8958141803741455d,\n-        +1.8976664543151855d,\n-        +1.8995206356048584d,\n-        +1.901376485824585d,\n-        +1.9032342433929443d,\n-        +1.9050939083099365d,\n-        +1.9069552421569824d,\n-        +1.908818244934082d,\n-        +1.9106833934783936d,\n-        +1.9125502109527588d,\n-        +1.9144186973571777d,\n-        +1.9162893295288086d,\n-        +1.9181616306304932d,\n-        +1.9200356006622314d,\n-        +1.9219114780426025d,\n-        +1.9237892627716064d,\n-        +1.9256689548492432d,\n-        +1.9275505542755127d,\n-        +1.929433822631836d,\n-        +1.931318759918213d,\n-        +1.9332058429718018d,\n-        +1.9350945949554443d,\n-        +1.9369852542877197d,\n-        +1.938877820968628d,\n-        +1.940772294998169d,\n-        +1.9426684379577637d,\n-        +1.9445664882659912d,\n-        +1.9464664459228516d,\n-        +1.9483680725097656d,\n-        +1.9502718448638916d,\n-        +1.9521772861480713d,\n-        +1.9540846347808838d,\n-        +1.955993890762329d,\n-        +1.9579050540924072d,\n-        +1.959817886352539d,\n-        +1.9617326259613037d,\n-        +1.9636495113372803d,\n-        +1.9655680656433105d,\n-        +1.9674885272979736d,\n-        +1.9694106578826904d,\n-        +1.9713349342346191d,\n-        +1.9732608795166016d,\n-        +1.975188970565796d,\n-        +1.977118730545044d,\n-        +1.9790503978729248d,\n-        +1.9809842109680176d,\n-        +1.982919692993164d,\n-        +1.9848570823669434d,\n-        +1.9867963790893555d,\n-        +1.9887375831604004d,\n-        +1.990680456161499d,\n-        +1.9926254749298096d,\n-        +1.994572401046753d,\n-        +1.996521234512329d,\n-        +1.998471736907959d,\n-        +2.000424385070801d,\n-        +2.0023789405822754d,\n-        +2.004335403442383d,\n-        +2.006293773651123d,\n-        +2.008254051208496d,\n-        +2.010216236114502d,\n-        +2.0121798515319824d,\n-        +2.014145851135254d,\n-        +2.016113758087158d,\n-        +2.0180835723876953d,\n-        +2.0200552940368652d,\n-        +2.022029399871826d,\n-        +2.0240049362182617d,\n-        +2.02598237991333d,\n-        +2.0279617309570312d,\n-        +2.0299429893493652d,\n-        +2.0319266319274902d,\n-        +2.03391170501709d,\n-        +2.0358991622924805d,\n-        +2.0378880500793457d,\n-        +2.039879322052002d,\n-        +2.041872501373291d,\n-        +2.0438671112060547d,\n-        +2.0458641052246094d,\n-        +2.047863006591797d,\n-        +2.049863815307617d,\n-        +2.0518670082092285d,\n-        +2.0538716316223145d,\n-        +2.055878162384033d,\n-        +2.057887077331543d,\n-        +2.0598974227905273d,\n-        +2.0619101524353027d,\n-        +2.063924789428711d,\n-        +2.065941333770752d,\n-        +2.067959785461426d,\n-        +2.0699801445007324d,\n-        +2.07200288772583d,\n-        +2.0740270614624023d,\n-        +2.0760536193847656d,\n-        +2.0780820846557617d,\n-        +2.0801124572753906d,\n-        +2.0821447372436523d,\n-        +2.084178924560547d,\n-        +2.0862154960632324d,\n-        +2.0882534980773926d,\n-        +2.0902938842773438d,\n-        +2.0923361778259277d,\n-        +2.0943803787231445d,\n-        +2.0964269638061523d,\n-        +2.0984749794006348d,\n-        +2.100525379180908d,\n-        +2.1025776863098145d,\n-        +2.1046319007873535d,\n-        +2.1066884994506836d,\n-        +2.1087465286254883d,\n-        +2.110806941986084d,\n-        +2.1128692626953125d,\n-        +2.114933490753174d,\n-        +2.117000102996826d,\n-        +2.1190686225891113d,\n-        +2.1211390495300293d,\n-        +2.12321138381958d,\n-        +2.1252856254577637d,\n-        +2.1273622512817383d,\n-        +2.1294407844543457d,\n-        +2.131521224975586d,\n-        +2.133604049682617d,\n-        +2.135688304901123d,\n-        +2.13777494430542d,\n-        +2.139863967895508d,\n-        +2.1419544219970703d,\n-        +2.144047260284424d,\n-        +2.14614200592041d,\n-        +2.1482391357421875d,\n-        +2.1503376960754395d,\n-        +2.1524391174316406d,\n-        +2.1545419692993164d,\n-        +2.156647205352783d,\n-        +2.1587538719177246d,\n-        +2.1608633995056152d,\n-        +2.1629743576049805d,\n-        +2.1650876998901367d,\n-        +2.167203426361084d,\n-        +2.169320583343506d,\n-        +2.1714401245117188d,\n-        +2.1735615730285645d,\n-        +2.175685405731201d,\n-        +2.1778111457824707d,\n-        +2.179938793182373d,\n-        +2.1820688247680664d,\n-        +2.1842007637023926d,\n-        +2.1863350868225098d,\n-        +2.1884708404541016d,\n-        +2.1906094551086426d,\n-        +2.192749500274658d,\n-        +2.194891929626465d,\n-        +2.1970362663269043d,\n-        +2.1991829872131348d,\n-        +2.201331615447998d,\n-        +2.2034826278686523d,\n-        +2.2056355476379395d,\n-        +2.2077903747558594d,\n-        +2.2099475860595703d,\n-        +2.212106704711914d,\n-        +2.214268207550049d,\n-        +2.2164316177368164d,\n-        +2.218596935272217d,\n-        +2.220764636993408d,\n-        +2.2229342460632324d,\n-        +2.2251062393188477d,\n-        +2.2272801399230957d,\n-        +2.2294564247131348d,\n-        +2.2316346168518066d,\n-        +2.2338151931762695d,\n-        +2.2359976768493652d,\n-        +2.2381820678710938d,\n-        +2.2403693199157715d,\n-        +2.242558002471924d,\n-        +2.244749069213867d,\n-        +2.2469425201416016d,\n-        +2.2491378784179688d,\n-        +2.2513351440429688d,\n-        +2.2535347938537598d,\n-        +2.2557363510131836d,\n-        +2.2579402923583984d,\n-        +2.2601466178894043d,\n-        +2.262354850769043d,\n-        +2.2645654678344727d,\n-        +2.266777992248535d,\n-        +2.2689924240112305d,\n-        +2.271209716796875d,\n-        +2.273428440093994d,\n-        +2.2756495475769043d,\n-        +2.2778730392456055d,\n-        +2.2800989151000977d,\n-        +2.2823266983032227d,\n-        +2.2845563888549805d,\n-        +2.2867884635925293d,\n-        +2.289022922515869d,\n-        +2.291259288787842d,\n-        +2.2934980392456055d,\n-        +2.295738697052002d,\n-        +2.2979817390441895d,\n-        +2.300227165222168d,\n-        +2.3024744987487793d,\n-        +2.3047242164611816d,\n-        +2.306975841522217d,\n-        +2.309229850769043d,\n-        +2.31148624420166d,\n-        +2.31374454498291d,\n-        +2.316005229949951d,\n-        +2.318267822265625d,\n-        +2.32053279876709d,\n-        +2.3228001594543457d,\n-        +2.3250694274902344d,\n-        +2.3273415565490723d,\n-        +2.3296151161193848d,\n-        +2.3318915367126465d,\n-        +2.334169864654541d,\n-        +2.3364500999450684d,\n-        +2.338733196258545d,\n-        +2.3410181999206543d,\n-        +2.3433055877685547d,\n-        +2.345594882965088d,\n-        +2.347886562347412d,\n-        +2.3501806259155273d,\n-        +2.3524770736694336d,\n-        +2.3547754287719727d,\n-        +2.3570761680603027d,\n-        +2.3593788146972656d,\n-        +2.3616843223571777d,\n-        +2.3639917373657227d,\n-        +2.3663015365600586d,\n-        +2.3686132431030273d,\n-        +2.370927333831787d,\n-        +2.373243808746338d,\n-        +2.3755626678466797d,\n-        +2.3778839111328125d,\n-        +2.380207061767578d,\n-        +2.3825325965881348d,\n-        +2.3848605155944824d,\n-        +2.387190818786621d,\n-        +2.3895230293273926d,\n-        +2.391857624053955d,\n-        +2.3941946029663086d,\n-        +2.396533966064453d,\n-        +2.3988752365112305d,\n-        +2.401218891143799d,\n-        +2.4035654067993164d,\n-        +2.4059133529663086d,\n-        +2.40826416015625d,\n-        +2.4106173515319824d,\n-        +2.4129724502563477d,\n-        +2.415329933166504d,\n-        +2.417689800262451d,\n-        +2.4200520515441895d,\n-        +2.4224166870117188d,\n-        +2.424783229827881d,\n-        +2.427152633666992d,\n-        +2.4295239448547363d,\n-        +2.4318976402282715d,\n-        +2.4342737197875977d,\n-        +2.436652183532715d,\n-        +2.439032554626465d,\n-        +2.441415786743164d,\n-        +2.4438014030456543d,\n-        +2.4461889266967773d,\n-        +2.4485788345336914d,\n-        +2.4509711265563965d,\n-        +2.4533658027648926d,\n-        +2.4557628631591797d,\n-        +2.458162307739258d,\n-        +2.460564136505127d,\n-        +2.462968349456787d,\n-        +2.46537446975708d,\n-        +2.4677834510803223d,\n-        +2.4701943397521973d,\n-        +2.4726080894470215d,\n-        +2.4750237464904785d,\n-        +2.4774417877197266d,\n-        +2.479862689971924d,\n-        +2.482285499572754d,\n-        +2.484710693359375d,\n-        +2.487138271331787d,\n-        +2.4895682334899902d,\n-        +2.4920010566711426d,\n-        +2.4944357872009277d,\n-        +2.496872901916504d,\n-        +2.499312400817871d,\n-        +2.5017542839050293d,\n-        +2.5041985511779785d,\n-        +2.5066452026367188d,\n-        +2.50909423828125d,\n-        +2.5115456581115723d,\n-        +2.5139999389648438d,\n-        +2.516456127166748d,\n-        +2.5189146995544434d,\n-        +2.5213756561279297d,\n-        +2.5238394737243652d,\n-        +2.5263051986694336d,\n-        +2.528773307800293d,\n-        +2.5312442779541016d,\n-        +2.533717155456543d,\n-        +2.5361928939819336d,\n-        +2.538670539855957d,\n-        +2.5411510467529297d,\n-        +2.5436339378356934d,\n-        +2.546119213104248d,\n-        +2.5486068725585938d,\n-        +2.5510969161987305d,\n-        +2.553589344024658d,\n-        +2.556084632873535d,\n-        +2.558581829071045d,\n-        +2.5610814094543457d,\n-        +2.5635838508605957d,\n-        +2.5660886764526367d,\n-        +2.5685958862304688d,\n-        +2.571105480194092d,\n-        +2.573617458343506d,\n-        +2.576131820678711d,\n-        +2.5786490440368652d,\n-        +2.5811686515808105d,\n-        +2.5836901664733887d,\n-        +2.586214542388916d,\n-        +2.5887417793273926d,\n-        +2.591270923614502d,\n-        +2.5938024520874023d,\n-        +2.596336841583252d,\n-        +2.5988736152648926d,\n-        +2.601412773132324d,\n-        +2.603954315185547d,\n-        +2.6064987182617188d,\n-        +2.6090455055236816d,\n-        +2.6115946769714355d,\n-        +2.6141462326049805d,\n-        +2.6167001724243164d,\n-        +2.6192569732666016d,\n-        +2.6218161582946777d,\n-        +2.624377727508545d,\n-        +2.626941680908203d,\n-        +2.6295084953308105d,\n-        +2.632077217102051d,\n-        +2.6346492767333984d,\n-        +2.637223243713379d,\n-        +2.6398000717163086d,\n-        +2.6423792839050293d,\n-        +2.644960880279541d,\n-        +2.6475448608398438d,\n-        +2.6501317024230957d,\n-        +2.6527209281921387d,\n-        +2.655313014984131d,\n-        +2.657907009124756d,\n-        +2.6605043411254883d,\n-        +2.6631035804748535d,\n-        +2.665705680847168d,\n-        +2.6683101654052734d,\n-        +2.67091703414917d,\n-        +2.6735267639160156d,\n-        +2.6761388778686523d,\n-        +2.67875337600708d,\n-        +2.681370735168457d,\n-        +2.683990478515625d,\n-        +2.686613082885742d,\n-        +2.689237594604492d,\n-        +2.6918654441833496d,\n-        +2.69449520111084d,\n-        +2.6971278190612793d,\n-        +2.699763298034668d,\n-        +2.7024011611938477d,\n-        +2.7050414085388184d,\n-        +2.70768404006958d,\n-        +2.710329532623291d,\n-        +2.712977886199951d,\n-        +2.7156286239624023d,\n-        +2.7182817459106445d,\n-                  };\n-\n-                  EXP_FRAC_TABLE_B = new double[] {\n-        +0.0d,\n-        +1.552583321178453E-10d,\n-        +1.2423699995465188E-9d,\n-        +4.194022929828008E-9d,\n-        +9.94381632344361E-9d,\n-        +1.9426261544163577E-8d,\n-        +3.3576783010266685E-8d,\n-        +5.3331719086630523E-8d,\n-        +7.962832297769345E-8d,\n-        +1.1340476362128895E-7d,\n-        -8.281845251820919E-8d,\n-        -3.126416414805498E-8d,\n-        +3.058997113995161E-8d,\n-        +1.0368579417304741E-7d,\n-        -4.9452513107409435E-8d,\n-        +4.8955889659397494E-8d,\n-        -7.698155155722897E-8d,\n-        +5.051784853384516E-8d,\n-        -4.443661736519001E-8d,\n-        +1.1593958457401774E-7d,\n-        +5.575759739697068E-8d,\n-        +1.4385227981629147E-8d,\n-        -7.227368462584163E-9d,\n-        -8.129108387083023E-9d,\n-        +1.263202100290635E-8d,\n-        +5.600896265625552E-8d,\n-        -1.154629885168314E-7d,\n-        -2.399186832888246E-8d,\n-        +9.295948298604103E-8d,\n-        -2.070841011504222E-9d,\n-        -6.97066538508643E-8d,\n-        -1.0898941254272996E-7d,\n-        -1.1895963756343625E-7d,\n-        -9.865691193993138E-8d,\n-        -4.711988033385175E-8d,\n-        +3.6613751875298095E-8d,\n-        -8.491135959370133E-8d,\n-        +6.610611940107793E-8d,\n-        +1.3794148633283659E-8d,\n-        -2.462631860370667E-9d,\n-        +1.830278273495162E-8d,\n-        +7.705834203598065E-8d,\n-        -6.364563771711373E-8d,\n-        +7.39978436695387E-8d,\n-        +1.4122417557484554E-8d,\n-        -3.881598887298574E-9d,\n-        +2.0958481826069642E-8d,\n-        +8.96162975425619E-8d,\n-        -3.535214171178576E-8d,\n-        -1.1455271549574576E-7d,\n-        +9.140964977432485E-8d,\n-        +1.0667524445105459E-7d,\n-        -6.777752790396222E-8d,\n-        +4.586785041291296E-8d,\n-        -2.8245462428022094E-8d,\n-        -5.071761314397018E-8d,\n-        -2.0566368810068663E-8d,\n-        +6.319146317890346E-8d,\n-        -3.687854305539139E-8d,\n-        -8.137269363160008E-8d,\n-        -6.930491127388755E-8d,\n-        +3.1184473002226595E-10d,\n-        -1.0995299963140049E-7d,\n-        +7.772668425499348E-8d,\n-        +8.750367485925089E-8d,\n-        -7.963112393823186E-8d,\n-        +5.415131809829094E-8d,\n-        +1.3006683896462346E-8d,\n-        +3.634736373360733E-8d,\n-        -1.132504393233074E-7d,\n-        +4.2046187038837375E-8d,\n-        +2.6396811618001066E-8d,\n-        +7.92177143584738E-8d,\n-        -3.691100820545433E-8d,\n-        -8.257112559083188E-8d,\n-        -5.676200971739166E-8d,\n-        +4.151794514828518E-8d,\n-        -2.5147255753587636E-8d,\n-        -1.7335469415174996E-8d,\n-        +6.595784859136531E-8d,\n-        -1.2680354928109105E-8d,\n-        -1.3824992526093461E-8d,\n-        +6.353142754175797E-8d,\n-        -1.8021197722549054E-8d,\n-        -1.9054827792903468E-8d,\n-        +6.144098503892116E-8d,\n-        -1.3940903373095247E-8d,\n-        -5.7694907599522404E-9d,\n-        +8.696863522320578E-8d,\n-        +2.6869297963554945E-8d,\n-        +5.3366470162689076E-8d,\n-        -7.094204160127543E-8d,\n-        -1.0662027949814858E-7d,\n-        -5.26498707801063E-8d,\n-        +9.198855229106814E-8d,\n-        +8.989677431456647E-8d,\n-        -5.790384407322479E-8d,\n-        -1.1197236522467887E-7d,\n-        -7.12854317090566E-8d,\n-        +6.51813137650059E-8d,\n-        +6.003465022483798E-8d,\n-        -8.569906238528267E-8d,\n-        +1.0584469687624562E-7d,\n-        -7.956144278281947E-8d,\n-        +7.43676272093501E-8d,\n-        +9.182512565315022E-8d,\n-        -2.6157563728873715E-8d,\n-        -4.012947040998503E-8d,\n-        +5.094280572218447E-8d,\n-        +9.675095351161728E-9d,\n-        +7.552139802281006E-8d,\n-        +1.1099566726533146E-8d,\n-        +5.58656252899437E-8d,\n-        -2.756054703800197E-8d,\n-        +2.791018095971047E-10d,\n-        -9.799351869734466E-8d,\n-        -8.291832428736212E-8d,\n-        +4.654720780112994E-8d,\n-        +5.302803981406403E-8d,\n-        -6.243126731995636E-8d,\n-        -6.036655299348577E-8d,\n-        +6.026878587378257E-8d,\n-        +6.210379583313526E-8d,\n-        -5.381287389094251E-8d,\n-        -4.8012970400697E-8d,\n-        +8.055420567281602E-8d,\n-        +9.452180117175641E-8d,\n-        -5.057430382371206E-9d,\n-        +2.1288872215266507E-8d,\n-        -6.380305844689076E-8d,\n-        -2.0858800984600168E-8d,\n-        -8.724006061713588E-8d,\n-        -2.3470351753125604E-8d,\n-        -6.690931338790221E-8d,\n-        +2.192160831263035E-8d,\n-        +5.6648446166177225E-9d,\n-        -1.1461755745719884E-7d,\n-        -9.944393412663547E-8d,\n-        +5.2249837964645906E-8d,\n-        +1.0311034276196487E-7d,\n-        +5.4203784018566126E-8d,\n-        -9.340259278913173E-8d,\n-        -1.0022192034216903E-7d,\n-        +3.481513333662908E-8d,\n-        +7.436036590244714E-8d,\n-        +1.9485199912395296E-8d,\n-        +1.0968068384729757E-7d,\n-        +1.0760175582979094E-7d,\n-        +1.4322981952798675E-8d,\n-        +6.933855730431659E-8d,\n-        +3.530656968851287E-8d,\n-        -8.669526204279467E-8d,\n-        -5.7169586962345785E-8d,\n-        -1.1345515834332824E-7d,\n-        -1.605251622332555E-8d,\n-        -2.298302779758532E-9d,\n-        -7.110952399338234E-8d,\n-        +1.70164513845372E-8d,\n-        +2.4746155561368937E-8d,\n-        -4.6834239957353325E-8d,\n-        +4.1781076667923185E-8d,\n-        +5.326182134294869E-8d,\n-        -1.1302647617762544E-8d,\n-        +8.759667154796094E-8d,\n-        +1.126326877851684E-7d,\n-        +6.48979555673987E-8d,\n-        -5.451390316294111E-8d,\n-        -6.0896188500539086E-9d,\n-        -2.7152010585461855E-8d,\n-        -1.1660424775832058E-7d,\n-        -3.492984900939992E-8d,\n-        -1.944841848873016E-8d,\n-        -6.905990750285027E-8d,\n-        +5.575538653428039E-8d,\n-        +1.1768108384670781E-7d,\n-        +1.178204606523101E-7d,\n-        +5.727787111340131E-8d,\n-        -6.284125161007433E-8d,\n-        -3.0118152047565877E-9d,\n-        -5.448044533034374E-10d,\n-        -5.433154287341921E-8d,\n-        +7.515630833946181E-8d,\n-        -8.780756503572527E-8d,\n-        -6.527407547535494E-8d,\n-        -9.45487863616303E-8d,\n-        +6.390098458668406E-8d,\n-        -6.564672913105876E-8d,\n-        -5.238488022920792E-9d,\n-        +7.824500749252316E-9d,\n-        -2.5339299158309795E-8d,\n-        -1.036103313062145E-7d,\n-        +1.2550633697348567E-8d,\n-        +8.584676196065558E-8d,\n-        +1.1740089468291563E-7d,\n-        +1.0833697012353316E-7d,\n-        +5.978002467397905E-8d,\n-        -2.7143806069290897E-8d,\n-        +8.711129287069315E-8d,\n-        -7.316349947981893E-8d,\n-        -3.00015852582934E-8d,\n-        -2.0691000399732483E-8d,\n-        -4.4100097152254264E-8d,\n-        -9.909612209943178E-8d,\n-        +5.38733640215475E-8d,\n-        -6.0893829005035E-8d,\n-        +3.457553391989844E-8d,\n-        +1.0300006058273187E-7d,\n-        -9.290053015365092E-8d,\n-        -7.514966995961323E-8d,\n-        -8.10254145615142E-8d,\n-        -1.0938612624777085E-7d,\n-        +7.932952721989251E-8d,\n-        +9.428257290008738E-9d,\n-        -7.952636967837795E-8d,\n-        +5.203033137154554E-8d,\n-        -7.159157201731446E-8d,\n-        +2.7593424989059015E-8d,\n-        +1.1231621190000476E-7d,\n-        -5.469119869891027E-8d,\n-        +4.560067256086347E-9d,\n-        +5.280427179595944E-8d,\n-        +9.119538242455128E-8d,\n-        -1.1753008498403413E-7d,\n-        -9.537874867759656E-8d,\n-        -7.96118345325538E-8d,\n-        -6.907085854395348E-8d,\n-        -6.259620482221904E-8d,\n-        -5.902712448725381E-8d,\n-        -5.720173456146447E-8d,\n-        -5.5957016861703E-8d,\n-        -5.412881689012608E-8d,\n-        -5.0551842723970724E-8d,\n-        -4.405966390424518E-8d,\n-        -3.348471032333413E-8d,\n-        -1.7658271111516935E-8d,\n-        +4.589506477601956E-9d,\n-        +3.4429618182751655E-8d,\n-        +7.303420385174346E-8d,\n-        -1.168420305422519E-7d,\n-        -5.718749537552229E-8d,\n-        +1.4754809136835937E-8d,\n-        +1.001616104682875E-7d,\n-        -3.8207793300052055E-8d,\n-        +7.766278405014509E-8d,\n-        -2.7883635712109803E-8d,\n-        -1.1524714043067699E-7d,\n-        +5.517333625963128E-8d,\n-        +7.724278756071081E-9d,\n-        -1.7990934773848504E-8d,\n-        -2.0786347668702902E-8d,\n-        +5.251554594269693E-10d,\n-        +4.7131849857076246E-8d,\n-        -1.1819540733893871E-7d,\n-        -1.742885956093543E-8d,\n-        +1.1220467571570283E-7d,\n-        +3.347954541376715E-8d,\n-        -1.399157980498908E-8d,\n-        -2.9013441705763093E-8d,\n-        -1.0389614239253089E-8d,\n-        +4.307749759934266E-8d,\n-        -1.0583192018912101E-7d,\n-        +2.0919226941745448E-8d,\n-        -5.2305110482722706E-8d,\n-        -8.588407110184028E-8d,\n-        -7.861419797923639E-8d,\n-        -2.929085835358592E-8d,\n-        +6.329175751021792E-8d,\n-        -3.807794163054899E-8d,\n-        -9.377320954068088E-8d,\n-        -1.0258469865953145E-7d,\n-        -6.330187984612758E-8d,\n-        +2.5286958775281306E-8d,\n-        -7.40238661307607E-8d,\n-        +1.1681688445204168E-7d,\n-        -1.1623125976292733E-7d,\n-        -5.6696107089038004E-8d,\n-        +5.822140627806124E-8d,\n-        -8.678466172071259E-9d,\n-        -1.7757121899175995E-8d,\n-        +3.220665454652531E-8d,\n-        -9.598330731102836E-8d,\n-        +7.573375369829243E-8d,\n-        +7.174547784678893E-8d,\n-        -1.0672213971363184E-7d,\n-        +1.8395252217743006E-8d,\n-        -2.8511112548600118E-8d,\n-        -7.79306270997787E-9d,\n-        +8.178019529487065E-8d,\n-        +3.0220784595602374E-9d,\n-        -4.4156343103298585E-9d,\n-        +6.07014616741277E-8d,\n-        -3.8809601937571554E-8d,\n-        -6.329342805230603E-8d,\n-        -1.1511990258493999E-8d,\n-        +1.177739474561431E-7d,\n-        +8.738625278484571E-8d,\n-        -1.0143341551207646E-7d,\n-        +2.9394972678456236E-8d,\n-        +4.278345398213486E-9d,\n-        +6.28805835150457E-8d,\n-        -3.197037359731606E-8d,\n-        -4.060821046423735E-8d,\n-        +3.82160283750664E-8d,\n-        -3.2666060441373307E-8d,\n-        -1.3584500601329896E-8d,\n-        +9.671332777035621E-8d,\n-        +6.10626893063691E-8d,\n-        +1.1913723189736356E-7d,\n-        +3.3774671482641995E-8d,\n-        +4.4651109654500895E-8d,\n-        -8.539328154875224E-8d,\n-        -1.166799420361101E-7d,\n-        -4.794765976694151E-8d,\n-        -1.1635256954820579E-7d,\n-        -8.221241452580445E-8d,\n-        +5.5737717715868425E-8d,\n-        +6.034539636024073E-8d,\n-        -6.712199323081945E-8d,\n-        -8.697724830833087E-8d,\n-        +2.0494942705297694E-9d,\n-        -3.718924074653624E-8d,\n-        +3.499747150995707E-8d,\n-        -1.8535359161566028E-8d,\n-        +4.1905679587096103E-8d,\n-        -2.0821912536551675E-8d,\n-        +3.297776915751238E-8d,\n-        -3.3835280846270374E-8d,\n-        +1.8437339356553904E-8d,\n-        -4.734187609526424E-8d,\n-        +8.527976799299225E-9d,\n-        -5.1088103279787804E-8d,\n-        +1.3513294656751725E-8d,\n-        -3.480032127343472E-8d,\n-        +4.367697180842916E-8d,\n-        +1.1815196363705356E-8d,\n-        +1.0932279207149782E-7d,\n-        +9.907230065250944E-8d,\n-        -1.764389559496152E-8d,\n-        -1.1135725625095859E-9d,\n-        -8.846040040259342E-8d,\n-        -3.996962588736431E-8d,\n-        -9.276238757878814E-8d,\n-        -7.12139818505956E-9d,\n-        -2.016525972830718E-8d,\n-        +1.0782585410141121E-7d,\n-        -9.868269632073771E-8d,\n-        +7.686861750031585E-8d,\n-        -7.947087669425045E-8d,\n-        -8.955768055535647E-8d,\n-        +4.791582240886607E-8d,\n-        +9.583994718167641E-8d,\n-        +5.5524866689108584E-8d,\n-        -7.171796605211277E-8d,\n-        -4.6157237582310713E-8d,\n-        -1.0489751005162237E-7d,\n-        -8.204903560604627E-9d,\n-        +6.818588687884566E-9d,\n-        -5.850916105103205E-8d,\n-        +3.5549586192569994E-8d,\n-        +5.1896700056778354E-8d,\n-        -8.146080588190463E-9d,\n-        +9.516285362051742E-8d,\n-        -1.1368933260611668E-7d,\n-        +8.187871486648885E-8d,\n-        -3.206182925646474E-8d,\n-        +2.265440168347286E-8d,\n-        +8.938334752179552E-9d,\n-        -7.187922490287331E-8d,\n-        +1.9952407216533937E-8d,\n-        +4.734805892507655E-8d,\n-        +1.1642439930208906E-8d,\n-        -8.582843599651953E-8d,\n-        -5.3086706437795354E-9d,\n-        +1.6121782610217253E-8d,\n-        -2.0197142620980974E-8d,\n-        -1.129242035557684E-7d,\n-        -2.2298267863810133E-8d,\n-        +1.4605950309628873E-8d,\n-        -8.663710700190489E-10d,\n-        -6.736873974532501E-8d,\n-        +5.486523121881414E-8d,\n-        -1.0965249168570443E-7d,\n-        -8.27343074126263E-8d,\n-        -1.0144703278439455E-7d,\n-        +7.39809943048038E-8d,\n-        -3.193297932837415E-8d,\n-        +5.900393284617182E-8d,\n-        +1.0973020465397083E-7d,\n-        -1.1681436418514489E-7d,\n-        +9.5985669644661E-8d,\n-        +3.423560333632085E-8d,\n-        -6.22836197265283E-8d,\n-        +4.621027492345726E-8d,\n-        -1.1575484316683829E-7d,\n-        -6.997545435826076E-8d,\n-        -5.3502441327259514E-8d,\n-        -6.49667713553005E-8d,\n-        -1.029980741248172E-7d,\n-        +7.219393868923887E-8d,\n-        -1.4854841678687828E-8d,\n-        +1.1406713393562271E-7d,\n-        -1.650155887561251E-8d,\n-        +7.165331603232264E-8d,\n-        -9.692697614257269E-8d,\n-        -4.402550702194912E-8d,\n-        -6.679737442193143E-9d,\n-        +1.6492800268960003E-8d,\n-        +2.68759245092879E-8d,\n-        +2.5854805721793077E-8d,\n-        +1.4815967715704613E-8d,\n-        -4.852711011229633E-9d,\n-        -3.176199594915881E-8d,\n-        -6.452129525125173E-8d,\n-        -1.01738658407525E-7d,\n-        +9.639780418418697E-8d,\n-        +5.4445606140746644E-8d,\n-        +1.2219361033150988E-8d,\n-        -2.8883532688356087E-8d,\n-        -6.746431126005811E-8d,\n-        -1.0212284427080097E-7d,\n-        +1.0696094577483825E-7d,\n-        +8.43527683868743E-8d,\n-        +6.987544103716777E-8d,\n-        +6.493457409236137E-8d,\n-        +7.093715125593688E-8d,\n-        +8.929153091001965E-8d,\n-        -1.1701113164306871E-7d,\n-        -6.972256643013266E-8d,\n-        -5.848862070736576E-9d,\n-        +7.602385197610123E-8d,\n-        -6.110775144284437E-8d,\n-        +6.101012058093429E-8d,\n-        -3.304167134225169E-8d,\n-        -1.0342514383702196E-7d,\n-        +8.969907328603505E-8d,\n-        +7.091600108064668E-8d,\n-        +8.006778743052707E-8d,\n-        +1.1857939200074815E-7d,\n-        -5.0541412403312774E-8d,\n-        +5.0970277930552287E-8d,\n-        -5.229355472795119E-8d,\n-        +1.1793478462381443E-7d,\n-        +8.625007227318527E-8d,\n-        +9.250422086873268E-8d,\n-        -1.0028661472061573E-7d,\n-        -1.384914052949463E-8d,\n-        +1.1483560326413004E-7d,\n-        +4.878798101459259E-8d,\n-        +2.7866921183936055E-8d,\n-        +5.3514180410849046E-8d,\n-        -1.1124565511436785E-7d,\n-        +1.186914813275767E-8d,\n-        -5.253258132241335E-8d,\n-        -6.458486486369316E-8d,\n-        -2.2838888809969377E-8d,\n-        +7.415557606805398E-8d,\n-        -1.0568403170659571E-8d,\n-        -3.7139182948393606E-8d,\n-        -4.1022790876160215E-9d,\n-        +8.999821367768787E-8d,\n-        +8.201043988912348E-9d,\n-        -9.616457442665051E-9d,\n-        +3.8005886250603055E-8d,\n-        -8.588890051473289E-8d,\n-        +9.699937202692456E-8d,\n-        +1.11298006674538E-7d,\n-        -4.1527104733570825E-8d,\n-        +1.1682852007826251E-7d,\n-        +1.1099648061301941E-7d,\n-        -5.755303038890997E-8d,\n-        +8.948877445235827E-8d,\n-        +7.675780395028194E-8d,\n-        -9.427143563390596E-8d,\n-        +5.471416081500162E-8d,\n-        +4.8354824064383506E-8d,\n-        -1.118706134478866E-7d,\n-        +5.235528379688445E-8d,\n-        +6.567708120053687E-8d,\n-        -7.042204992948526E-8d,\n-        -1.1603891006723397E-7d,\n-        -6.968742825553785E-8d,\n-        +7.01199184127881E-8d,\n-        +6.645352711199266E-8d,\n-        -7.919617109348822E-8d,\n-        +1.1149986927391714E-7d,\n-        -7.522074418324674E-8d,\n-        +7.739252980388984E-8d,\n-        +9.39987974788905E-8d,\n-        -2.390421480210064E-8d,\n-        -3.639873824357815E-8d,\n-        +5.8015881615938497E-8d,\n-        +2.2423186335040668E-8d,\n-        +9.674534330665206E-8d,\n-        +4.4068830785712375E-8d,\n-        +1.0431875573076199E-7d,\n-        +4.0584538834428926E-8d,\n-        +9.279423236781974E-8d,\n-        +2.404020521381534E-8d,\n-        +7.425346071427343E-8d,\n-        +6.529321706138789E-9d,\n-        +6.080174837146273E-8d,\n-        +1.6902327633329284E-10d,\n-        +6.456806922371733E-8d,\n-        +1.7100134295216033E-8d,\n-        +9.770510970673519E-8d,\n-        +6.94872148530716E-8d,\n-        -6.602926393514549E-8d,\n-        -6.889997193778161E-8d,\n-        +6.240235720677117E-8d,\n-        +9.098790295810902E-8d,\n-        +1.8386917534879182E-8d,\n-        +8.454972737414241E-8d,\n-        +5.259099728747365E-8d,\n-        -7.595453077213505E-8d,\n-        -6.113203624663034E-8d,\n-        +9.859622328905143E-8d,\n-        -7.206766550807255E-8d,\n-        -9.474579567171831E-8d,\n-        +3.210408693366267E-8d,\n-        +7.160716418525417E-8d,\n-        +2.530870537724554E-8d,\n-        -1.0524451040704701E-7d,\n-        -8.008561371849434E-8d,\n-        +1.0233519853128553E-7d,\n-        -3.326791455362767E-8d,\n-        -8.504961764629757E-9d,\n-        -6.024017201863256E-8d,\n-        +5.1500902632092514E-8d,\n-        +8.98570720774568E-8d,\n-        +5.638724693948384E-8d,\n-        -4.734813904255994E-8d,\n-        +1.8631451577542948E-8d,\n-        +1.7470924137873214E-8d,\n-        -4.926470933588261E-8d,\n-        +5.84096713620797E-8d,\n-        +1.0364355880696472E-7d,\n-        +8.800655674349468E-8d,\n-        +1.3069802481237792E-8d,\n-        +1.1882454749452428E-7d,\n-        -6.999215748398631E-8d,\n-        -7.49674072510849E-8d,\n-        +1.054760847603618E-7d,\n-        -3.920012014371067E-9d,\n-        +7.526183084319617E-8d,\n-        +1.0618494853096868E-7d,\n-        +9.043280094115832E-8d,\n-        +2.9590395068826316E-8d,\n-        -7.475571347653619E-8d,\n-        +1.7401160143611842E-8d,\n-        +6.923209420670962E-8d,\n-        +8.232829924979753E-8d,\n-        +5.82825404854514E-8d,\n-        -1.3108606792380822E-9d,\n-        -9.485602512220194E-8d,\n-        +1.7663064617118723E-8d,\n-        +9.942682855652123E-8d,\n-        -8.638275100090915E-8d,\n-        -6.132639063569726E-8d,\n-        -6.221897889344726E-8d,\n-        -8.745525834919404E-8d,\n-        +1.029901759234897E-7d,\n-        +3.3888561478632076E-8d,\n-        -5.47315553588771E-8d,\n-        +7.715994473741065E-8d,\n-        -4.566098167230033E-8d,\n-        +5.5257514455273825E-8d,\n-        -9.530545662611411E-8d,\n-        -1.889488909834863E-8d,\n-        +4.769006625301079E-8d,\n-        +1.0607041998938709E-7d,\n-        -8.054981263802322E-8d,\n-        -3.370929373457322E-8d,\n-        +9.799164177397836E-9d,\n-        +5.160291611526656E-8d,\n-        +9.333090708652975E-8d,\n-        -1.0180490545927503E-7d,\n-        -5.533523366931846E-8d,\n-        -4.044932340334176E-9d,\n-        +5.370131904567218E-8d,\n-        -1.1887814032213867E-7d,\n-        -4.3307634616102625E-8d,\n-        +4.363437558318513E-8d,\n-        -9.482896784430338E-8d,\n-        +1.9782818312325887E-8d,\n-        -8.77224935488516E-8d,\n-        +6.113879253864931E-8d,\n-        -8.822335132515693E-9d,\n-        -5.753754066078771E-8d,\n-        -8.335545536862392E-8d,\n-        -8.462309712606694E-8d,\n-        -5.968586877433824E-8d,\n-        -6.887556547891059E-9d,\n-        +7.542967150507818E-8d,\n-        -4.949331199790077E-8d,\n-        +9.684172421525468E-8d,\n-        +3.9260317944365246E-8d,\n-        +1.784536881359796E-8d,\n-        +3.426282345243592E-8d,\n-        +9.018025618601154E-8d,\n-        -5.1151708476133135E-8d,\n-        +8.877492215808044E-8d,\n-        +3.479545684576179E-8d,\n-        +2.7002575714977818E-8d,\n-        +6.707201545505014E-8d,\n-        -8.173742908533777E-8d,\n-        +5.909041310777802E-8d,\n-        +1.439903710393587E-8d,\n-        +2.4289317341982113E-8d,\n-        +9.044519282818302E-8d,\n-        -2.3866331257845713E-8d,\n-        -7.853944465095286E-8d,\n-        -7.188526769607005E-8d,\n-        -2.2132706360079843E-9d,\n-        -1.0624985110080394E-7d,\n-        +9.453598391231829E-8d,\n-        -1.134160131581847E-7d,\n-        -1.315295870404327E-8d,\n-        -7.981320644583728E-8d,\n-        -7.327771300038971E-8d,\n-        +8.155647334672472E-9d,\n-        -7.222791579580787E-8d,\n-        -7.430436987497092E-8d,\n-        +3.633404807819848E-9d,\n-        -7.512438321498593E-8d,\n-        -7.044869765481105E-8d,\n-        +1.9372589859580955E-8d,\n-        -4.2365298585101096E-8d,\n-        -1.552830824758035E-8d,\n-        +1.0160071259930585E-7d,\n-        +7.232201430620959E-8d,\n-        -1.0164389431039905E-7d,\n-        +5.826233477413577E-8d,\n-        +7.6927415825689E-8d,\n-        -4.392309439525734E-8d,\n-        -6.414337408955734E-8d,\n-        +1.799550702470095E-8d,\n-        -3.4194410638967946E-8d,\n-        +1.9437762419688045E-8d,\n-        -5.7792549966531335E-8d,\n-        -2.5731071572354522E-8d,\n-        +1.173595905705643E-7d,\n-        -1.0361863127101014E-7d,\n-        +2.8330789837569332E-8d,\n-        +3.81131861433539E-8d,\n-        -7.252724942149532E-8d,\n-        -6.342604067787756E-8d,\n-        +6.716441526213986E-8d,\n-        +8.257484966196574E-8d,\n-        -1.5443717968117592E-8d,\n-        +1.3280021798948244E-8d,\n-        -6.79180673261558E-8d,\n-        -1.8863249269709046E-8d,\n-        -7.62162303263991E-8d,\n-        +2.011589233663723E-10d,\n-        -2.62683511147141E-8d,\n-        +8.455684903712996E-8d,\n-        +9.602293320384794E-8d,\n-        +9.896378545255258E-9d,\n-        +6.636396724067746E-8d,\n-        +2.8777050870552646E-8d,\n-        -1.0109271059094341E-7d,\n-        -8.305334708631055E-8d,\n-        +8.467026501338835E-8d,\n-        -7.29821745001452E-8d,\n-        -7.739491336852633E-8d,\n-        +7.321238022013781E-8d,\n-        -9.621538067089515E-8d,\n-        -1.0705722541811197E-7d,\n-        +4.247240125405735E-8d,\n-        +1.1574222007764044E-7d,\n-        +1.145412771487496E-7d,\n-        +4.066036653218687E-8d,\n-        -1.0410796803072171E-7d,\n-        -7.955085231106037E-8d,\n-        +1.1612776191572459E-7d,\n-        +7.888519481107568E-9d,\n-        +7.436813814737735E-8d,\n-        +7.894935661289349E-8d,\n-        +2.343525263620692E-8d,\n-        -9.036933434595339E-8d,\n-        -2.2239222395888823E-8d,\n-        -8.784622656707742E-9d,\n-        -4.819540032304379E-8d,\n-        +9.975892708522332E-8d,\n-        -3.9945124955316294E-8d,\n-        +1.1345047468988893E-8d,\n-        +1.702808472925844E-8d,\n-        -2.10770182066344E-8d,\n-        -1.0114948914089626E-7d,\n-        +1.70518021921727E-8d,\n-        +9.693260855961159E-8d,\n-        -9.809953482725758E-8d,\n-        -8.937957126662392E-8d,\n-        -1.134963954323427E-7d,\n-        +6.980004387880031E-8d,\n-        -1.4494150014095534E-8d,\n-        +1.122932337832262E-7d,\n-        -2.483811732227808E-8d,\n-        +5.278759515330048E-8d,\n-        +1.0859222881334994E-7d,\n-        -9.400056055939758E-8d,\n-        -7.630957994128623E-8d,\n-        -7.490757191850264E-8d,\n-        -8.794689652049879E-8d,\n-        -1.1357810855950775E-7d,\n-        +8.846862323478745E-8d,\n-        +4.32092015744956E-8d,\n-        -9.082923009890997E-9d,\n-        -6.655106680680314E-8d,\n-        +1.1108184705020206E-7d,\n-        +4.8838973948592766E-8d,\n-        -1.2998975819628988E-8d,\n-        -7.25680516883106E-8d,\n-        -1.280024819379844E-7d,\n-        -1.7743467191652895E-7d,\n-        -2.1899520225809197E-7d,\n-        +2.2602433110285232E-7d,\n-        +2.0582268590356215E-7d,\n-        +1.9911192455808124E-7d,\n-        +2.0776878313278689E-7d,\n-        +2.3367183133931002E-7d,\n-        -1.9813568387704588E-7d,\n-        -1.320972037315105E-7d,\n-        -4.316580502355056E-8d,\n-        +7.054443447243064E-8d,\n-        +2.109212796025238E-7d,\n-        -9.698281856949837E-8d,\n-        +1.0239791185239086E-7d,\n-        -1.4271754202157014E-7d,\n-        +1.232402895636637E-7d,\n-        -5.150590480969644E-8d,\n-        -1.882201085012735E-7d,\n-        +1.918355503889933E-7d,\n-        +1.368893262241355E-7d,\n-        +1.256828068633383E-7d,\n-        +1.601222826656464E-7d,\n-        -2.3472125169205568E-7d,\n-        -1.032634625827871E-7d,\n-        +7.957037517331382E-8d,\n-        -1.6114314525832115E-7d,\n-        +1.3018591370778052E-7d,\n-        +1.8007284821359149E-9d,\n-        -6.75421764491544E-8d,\n-        -7.592155950645605E-8d,\n-        -2.1414301981236817E-8d,\n-        +9.79045937979623E-8d,\n-        -1.9287515190177685E-7d,\n-        +6.184953843236509E-8d,\n-        -8.966500602352001E-8d,\n-        -1.686490951669855E-7d,\n-        -1.7316830893872364E-7d,\n-        -1.0128633727463388E-7d,\n-        +4.8935021740786486E-8d,\n-        -1.9740129448026905E-7d,\n-        +1.1532102163380318E-7d,\n-        +3.5371542244169364E-8d,\n-        +4.153321337726989E-8d,\n-        +1.3575372396796738E-7d,\n-        -1.5685449228299222E-7d,\n-        +1.1933437776279623E-7d,\n-        +1.2599421120614435E-8d,\n-        +1.7331079674066365E-9d,\n-        +8.869266069401045E-8d,\n-        -2.013999442282902E-7d,\n-        +8.709065843311144E-8d,\n-        +2.453117120472083E-9d,\n-        +2.3489472779602617E-8d,\n-        +1.5216652792122652E-7d,\n-        -8.638415150333099E-8d,\n-        -2.1335475961524608E-7d,\n-        -2.2677272333821516E-7d,\n-        -1.246635423141374E-7d,\n-        +9.494921297991565E-8d,\n-        -4.27932550865546E-8d,\n-        -5.907349480138712E-8d,\n-        +4.809072216941908E-8d,\n-        -1.9615359732789476E-7d,\n-        +1.6385396676990034E-7d,\n-        +1.7642714221524228E-7d,\n-        -1.564440844355254E-7d,\n-        +1.2090653407564583E-7d,\n-        +5.679855838941285E-8d,\n-        +1.3006497185242537E-7d,\n-        -1.341336085949317E-7d,\n-        +2.1987686050231372E-7d,\n-        -2.3641341460419062E-7d,\n-        -7.048932272279454E-8d,\n-        -2.3401958604540354E-7d,\n-        +2.2867766559333004E-7d,\n-        -1.1089952719756529E-7d,\n-        +1.7977178878541792E-7d,\n-        +1.4903074102418675E-7d,\n-        -2.011072593789072E-7d,\n-        +8.504948422097802E-8d,\n-        +5.5846006716348844E-8d,\n-        +1.9014079059505456E-7d,\n-        +1.3119976852347583E-8d,\n-        +3.645999732952202E-9d,\n-        +1.6374611405314333E-7d,\n-        +1.8612397134087598E-8d,\n-        +4.7113225346448296E-8d,\n-        -2.2555535676499395E-7d,\n-        +1.5631615647329739E-7d,\n-        -2.3574653182047758E-7d,\n-        +3.08072210937242E-8d,\n-        +4.344259288116142E-9d,\n-        +1.6374489573868447E-7d,\n-        +3.42171232580676E-8d,\n-        +9.46452492584643E-8d,\n-        -1.297587351085525E-7d,\n-        -1.601065201853145E-7d,\n-        +5.6550495386976275E-9d,\n-        -1.0725602261510391E-7d,\n-        -1.9945408945084193E-8d,\n-        -2.071910882200156E-7d,\n-        -1.900947109027913E-7d,\n-        +3.34069282059055E-8d,\n-        -1.145810806477298E-8d,\n-        +1.5421457732308477E-7d,\n-        +5.5657084775121975E-8d,\n-        +1.7177785285061278E-7d,\n-        +2.7813027425289027E-8d,\n-        +1.0267509648109748E-7d,\n-        -7.839574072711142E-8d,\n-        -3.648293887796095E-8d,\n-        +2.3049492079013518E-7d,\n-        -2.290530257391564E-7d,\n-        +1.747018414872141E-8d,\n-        +1.8477759656842807E-8d,\n-        -2.2394073401050633E-7d,\n-        -2.3085653185818848E-7d,\n-        -1.7598351175286083E-10d,\n-        -6.640551220774385E-9d,\n-        +2.2868466674913266E-7d,\n-        +2.3106230530437902E-7d,\n-        +2.594209135294356E-9d,\n-        +2.2221434720602702E-8d,\n-        -1.847872222755186E-7d,\n-        -1.3948659218254467E-7d,\n-        +1.6023339607737848E-7d,\n-        -2.3718944120137026E-7d,\n-        +1.0087056692827474E-7d,\n-        +2.228553660510707E-7d,\n-        +1.3088328582956644E-7d,\n-        -1.7292527438195104E-7d,\n-        -2.0961068531216087E-7d,\n-        +2.2951597845188004E-8d,\n-        +5.005103745740068E-8d,\n-        -1.2618366811281002E-7d,\n-        -2.6784582477238417E-8d,\n-        -1.2645600379949252E-7d,\n-        +5.3774170051560117E-8d,\n-        +3.9205810725333715E-8d,\n-        -1.6802196396307013E-7d,\n-        -8.893078799284047E-8d,\n-        -1.9821451970481713E-7d,\n-        -1.689060694498032E-8d,\n-        -1.9648717830943396E-8d,\n-        -2.0433926409457167E-7d,\n-        -9.1973399031975E-8d,\n-        -1.5723449006087263E-7d,\n-        +7.887051614592191E-8d,\n-        +1.4166246290402286E-7d,\n-        +3.330146018487787E-8d,\n-        +2.3278688667580978E-7d,\n-        -2.1139124097042925E-7d,\n-        +1.334449995534113E-7d,\n-        -1.6104730195920897E-7d,\n-        -1.3902314592614197E-7d,\n-        +2.0169027167169864E-7d,\n-        -9.040643863751471E-8d,\n-        -5.946190852360168E-8d,\n-        -1.8013411720005014E-7d,\n-        +2.6595401669835947E-8d,\n-        +8.607292924069425E-8d,\n-        +4.84038176769263E-10d,\n-        -2.2798356346688802E-7d,\n-        -1.203028719549339E-7d,\n-        -1.5111906039270745E-7d,\n-        +1.5859915617670956E-7d,\n-        -1.426262681506497E-7d,\n-        -9.892260062323546E-8d,\n-        -1.8492643515928268E-7d,\n-        +7.840210076743552E-8d,\n-        +2.1643071541578027E-7d,\n-        +2.313664294893465E-7d,\n-        +1.2541842003811723E-7d,\n-        -9.920197743470107E-8d,\n-        +3.655589133934081E-8d,\n-        +5.807052689551411E-8d,\n-        -3.244024724169575E-8d,\n-        -2.327564406466327E-7d,\n-        -6.38187356721971E-8d,\n-        -2.3995994000400915E-10d,\n-        -3.9793609609721186E-8d,\n-        -1.802510054588344E-7d,\n-        +5.745586744591196E-8d,\n-        +1.987228872666507E-7d,\n-        -2.3105188606976847E-7d,\n-        +2.0088042407239129E-7d,\n-        +6.624793114025702E-8d,\n-        -1.5587043044056635E-7d,\n-        +1.3606464059428694E-8d,\n-        +1.0008761540741556E-7d,\n-        +1.058213771597129E-7d,\n-        +3.3058299602856804E-8d,\n-        -1.1594886810010702E-7d,\n-        +1.378919824418909E-7d,\n-        -1.5683631181406778E-7d,\n-        -4.4200075770425176E-8d,\n-        +1.2250985436706623E-9d,\n-        -1.8297013058336644E-8d,\n-        -1.005004229646318E-7d,\n-        +2.337202285991116E-7d,\n-        +3.296104292035678E-8d,\n-        -2.23668185816307E-7d,\n-        -5.7055442971184756E-8d,\n-        +5.82391923137467E-8d,\n-        +1.244950238958056E-7d,\n-        +1.4399358260219398E-7d,\n-        +1.1901862840583523E-7d,\n-        +5.1856152603337505E-8d,\n-        -5.520562000491495E-8d,\n-        -1.9987622893254038E-7d,\n-        +9.697418238031897E-8d,\n-        -1.1603376405901542E-7d,\n-        +1.170714288147407E-7d,\n-        -1.550851303094034E-7d,\n-        +2.3472546699189522E-8d,\n-        +1.78211222185955E-7d,\n-        -1.6540009048230807E-7d,\n-        -5.137865010872577E-8d,\n-        +4.57490653163866E-8d,\n-        +1.2829599363166098E-7d,\n-        +1.985773325073412E-7d,\n-        -2.1792661654989742E-7d,\n-        -1.652218131743459E-7d,\n-        -1.178234251477505E-7d,\n-        -7.34071933723896E-8d,\n-        -2.9646587857612632E-8d,\n-        +1.5787194498912167E-8d,\n-        +6.52252321321176E-8d,\n-        +1.2100088103262734E-7d,\n-        +1.8544977697201776E-7d,\n-        -2.159273204728711E-7d,\n-        -1.2711589287782304E-7d,\n-        -2.2610609958205195E-8d,\n-        +9.993330547750349E-8d,\n-        -2.33974236642384E-7d,\n-        -6.830955860192377E-8d,\n-        +1.2244183812423448E-7d,\n-        -1.3620325027706252E-7d,\n-        +1.1178574689680927E-7d,\n-        -8.490693031052439E-8d,\n-        +2.2975389535985893E-7d,\n-        +1.0445707500867073E-7d,\n-        +1.8405243253979117E-8d,\n-        -2.6033812325397097E-8d,\n-        -2.6489990728664908E-8d,\n-        +1.9409124727247465E-8d,\n-        +1.1403826867020365E-7d,\n-        -2.1706266226554237E-7d,\n-        -1.7839974359909697E-8d,\n-        +2.3725087624341041E-7d,\n-        +7.37567604176979E-8d,\n-        -2.9098805266958403E-8d,\n-        -6.892713087722722E-8d,\n-        -4.333719263537725E-8d,\n-        +5.006436936098099E-8d,\n-        +2.1367325342138113E-7d,\n-        -2.6949659655907758E-8d,\n-        -1.9256682968755803E-7d,\n-        +1.960616287777496E-7d,\n-        +1.876664741413704E-7d,\n-        -2.1534486893602122E-7d,\n-        -5.688830723853217E-8d,\n-        +1.8861113228746644E-7d,\n-        +4.6730779443102234E-8d,\n-        -3.275360514112964E-9d,\n-        +4.1011920825226876E-8d,\n-        +1.820141955326842E-7d,\n-        -5.468175655175594E-8d,\n-        -1.8981247089866317E-7d,\n-        -2.209492705846306E-7d,\n-        -1.4566110577298295E-7d,\n-        +3.848544860465368E-8d,\n-        -1.429109630340783E-7d,\n-        -2.105749999899302E-7d,\n-        -1.6206609756618993E-7d,\n-        +5.058693461947143E-9d,\n-        -1.8359244902596882E-7d,\n-        +2.2810251664891242E-7d,\n-        -1.8791776732592608E-7d,\n-        +1.3106843166204263E-9d,\n-        -1.5543153797220025E-7d,\n-        -1.7884997059081524E-7d,\n-        -6.648490725635754E-8d,\n-        +1.8412576154421806E-7d,\n-        +9.860939269906055E-8d,\n-        +1.5627006743114285E-7d,\n-        -1.17260039161597E-7d,\n-        +2.3416513526430908E-7d,\n-        -2.1749172296989992E-7d,\n-        -3.9242560971295217E-8d,\n-        -1.822826971477839E-7d,\n-        -1.6729355321895212E-7d,\n-        +8.208715337901827E-9d,\n-        -1.301267783434537E-7d,\n-        -1.029741755377153E-7d,\n-        +9.215765583599035E-8d,\n-        -1.907487641016455E-8d,\n-        +4.2661388254716074E-8d,\n-        -1.9697226735187428E-7d,\n-        +2.1819935527247946E-7d,\n-        -1.398318929248588E-7d,\n-        +1.6195123407015624E-7d,\n-        +1.723826394935661E-7d,\n-        -1.0602700638269148E-7d,\n-        -1.9392742205954563E-7d,\n-        -8.880302882034106E-8d,\n-        +2.1186420987133E-7d,\n-        +2.3375763256988976E-7d,\n-        -2.0599801342241997E-8d,\n-        -7.184550924856607E-8d,\n-        +8.254840070367875E-8d,\n-                  };\n-              }\n-          }\n-      }\n-\n-    private static final int LN_MANT_LEN = 1024; // MAGIC NUMBER\n+    private static final int EXP_FRAC_TABLE_LEN = TWO_POWER_10 + 1; // 0, 1/1024, ... 1024/1024\n \n     // Enclose large data table in nested static class so it's only loaded on first access\n-      private static class lnMant {\n-          /** Extended precision logarithm table over the range 1 - 2 in increments of 2^-10. */\n-          private static final double[][] LN_MANT;\n-\n-          static {\n-              if (FastMath.USE_PRECOMPUTED_TABLES) {\n-                  LN_MANT = new double[FastMath.LN_MANT_LEN][];\n-\n-                  // Populate lnMant table\n-                  for (int i = 0; i < LN_MANT.length; i++) {\n-                      final double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );\n-                      LN_MANT[i] = FastMathCalc.slowLog(d);\n-                  }\n-              } else {\n-                  LN_MANT = new double[][] { \n-        {+0.0d,                   +0.0d,                   }, // 0\n-        {+9.760860120877624E-4d,  -3.903230345984362E-11d, }, // 1\n-        {+0.0019512202125042677d, -8.124251825289188E-11d, }, // 2\n-        {+0.0029254043474793434d, -1.8374207360194882E-11d,}, // 3\n-        {+0.0038986406289041042d, -2.1324678121885073E-10d,}, // 4\n-        {+0.004870930686593056d,  -4.5199654318611534E-10d,}, // 5\n-        {+0.00584227591753006d,   -2.933016992001806E-10d, }, // 6\n-        {+0.006812678650021553d,  -2.325147219074669E-10d, }, // 7\n-        {+0.007782140746712685d,  -3.046577356838847E-10d, }, // 8\n-        {+0.008750664070248604d,  -5.500631513861575E-10d, }, // 9\n-        {+0.00971824862062931d,   +8.48292035519895E-10d,  }, // 10\n-        {+0.010684899985790253d,  +1.1422610134013436E-10d,}, // 11\n-        {+0.01165061630308628d,   +9.168889933128375E-10d, }, // 12\n-        {+0.012615403160452843d,  -5.303786078838E-10d,    }, // 13\n-        {+0.013579258695244789d,  -5.688639355498786E-10d, }, // 14\n-        {+0.01454218477010727d,   +7.296670293275653E-10d, }, // 15\n-        {+0.015504186972975731d,  -4.370104767451421E-10d, }, // 16\n-        {+0.016465261578559875d,  +1.43695591408832E-9d,   }, // 17\n-        {+0.01742541790008545d,   -1.1862263158849434E-9d, }, // 18\n-        {+0.018384650349617004d,  -9.482976524690715E-10d, }, // 19\n-        {+0.01934296265244484d,   +1.9068609515836638E-10d,}, // 20\n-        {+0.020300358533859253d,  +2.655990315697216E-10d, }, // 21\n-        {+0.021256837993860245d,  +1.0315548713040775E-9d, }, // 22\n-        {+0.022212404757738113d,  +5.13345647019085E-10d,  }, // 23\n-        {+0.02316705882549286d,   +4.5604151934208014E-10d,}, // 24\n-        {+0.02412080392241478d,   -1.1255706987475148E-9d, }, // 25\n-        {+0.025073636323213577d,  +1.2289023836765196E-9d, }, // 26\n-        {+0.02602556347846985d,   +1.7990281828096504E-9d, }, // 27\n-        {+0.026976589113473892d,  -1.4152718164638451E-9d, }, // 28\n-        {+0.02792670577764511d,   +7.568772963781632E-10d, }, // 29\n-        {+0.0288759246468544d,    -1.1449998592111558E-9d, }, // 30\n-        {+0.029824241995811462d,  -1.6850976862319495E-9d, }, // 31\n-        {+0.030771657824516296d,  +8.422373919843096E-10d, }, // 32\n-        {+0.0317181795835495d,    +6.872350402175489E-10d, }, // 33\n-        {+0.03266380727291107d,   -4.541194749189272E-10d, }, // 34\n-        {+0.03360854089260101d,   -8.9064764856495E-10d,   }, // 35\n-        {+0.034552380442619324d,  +1.0640404096769032E-9d, }, // 36\n-        {+0.0354953333735466d,    -3.5901655945224663E-10d,}, // 37\n-        {+0.03643739968538284d,   -3.4829517943661266E-9d, }, // 38\n-        {+0.037378571927547455d,  +8.149473794244232E-10d, }, // 39\n-        {+0.03831886500120163d,   -6.990650304449166E-10d, }, // 40\n-        {+0.03925827145576477d,   +1.0883076226453258E-9d, }, // 41\n-        {+0.040196798741817474d,  +3.845192807999274E-10d, }, // 42\n-        {+0.04113444685935974d,   -1.1570594692045927E-9d, }, // 43\n-        {+0.04207121580839157d,   -1.8877045166697178E-9d, }, // 44\n-        {+0.043007105588912964d,  -1.6332083257987747E-10d,}, // 45\n-        {+0.04394212365150452d,   -1.7950057534514933E-9d, }, // 46\n-        {+0.04487626254558563d,   +2.302710041648838E-9d,  }, // 47\n-        {+0.045809537172317505d,  -1.1410233017161343E-9d, }, // 48\n-        {+0.04674194008111954d,   -3.0498741599744685E-9d, }, // 49\n-        {+0.04767347127199173d,   -1.8026348269183678E-9d, }, // 50\n-        {+0.04860413819551468d,   -3.233204600453039E-9d,  }, // 51\n-        {+0.04953393340110779d,   +1.7211688427961583E-9d, }, // 52\n-        {+0.05046287178993225d,   -2.329967807055457E-10d, }, // 53\n-        {+0.05139094591140747d,   -4.191810118556531E-11d, }, // 54\n-        {+0.052318163216114044d,  -3.5574324788328143E-9d, }, // 55\n-        {+0.053244516253471375d,  -1.7346590916458485E-9d, }, // 56\n-        {+0.05417001247406006d,   -4.343048751383674E-10d, }, // 57\n-        {+0.055094651877880096d,  +1.92909364037955E-9d,   }, // 58\n-        {+0.056018441915512085d,  -5.139745677199588E-10d, }, // 59\n-        {+0.05694137513637543d,   +1.2637629975129189E-9d, }, // 60\n-        {+0.05786345899105072d,   +1.3840561112481119E-9d, }, // 61\n-        {+0.058784693479537964d,  +1.414889689612056E-9d,  }, // 62\n-        {+0.05970507860183716d,   +2.9199191907666474E-9d, }, // 63\n-        {+0.0606246218085289d,    +7.90594243412116E-12d,  }, // 64\n-        {+0.06154331564903259d,   +1.6844747839686189E-9d, }, // 65\n-        {+0.06246116757392883d,   +2.0498074572151747E-9d, }, // 66\n-        {+0.06337818503379822d,   -4.800180493433863E-9d,  }, // 67\n-        {+0.06429435312747955d,   -2.4220822960064277E-9d, }, // 68\n-        {+0.06520968675613403d,   -4.179048566709334E-9d,  }, // 69\n-        {+0.06612417101860046d,   +6.363872957010456E-9d,  }, // 70\n-        {+0.06703783571720123d,   +9.339468680056365E-10d, }, // 71\n-        {+0.06795066595077515d,   -4.04226739708981E-9d,   }, // 72\n-        {+0.0688626617193222d,    -7.043545052852817E-9d,  }, // 73\n-        {+0.06977382302284241d,   -6.552819560439773E-9d,  }, // 74\n-        {+0.07068414986133575d,   -1.0571674860370546E-9d, }, // 75\n-        {+0.07159365713596344d,   -3.948954622015801E-9d,  }, // 76\n-        {+0.07250232994556427d,   +1.1776625988228244E-9d, }, // 77\n-        {+0.07341018319129944d,   +9.221072639606492E-10d, }, // 78\n-        {+0.07431721687316895d,   -3.219119568928366E-9d,  }, // 79\n-        {+0.0752234160900116d,    +5.147575929018918E-9d,  }, // 80\n-        {+0.07612881064414978d,   -2.291749683541979E-9d,  }, // 81\n-        {+0.07703337073326111d,   +5.749565906124772E-9d,  }, // 82\n-        {+0.07793712615966797d,   +9.495158151301779E-10d, }, // 83\n-        {+0.07884006202220917d,   -3.144331429489291E-10d, }, // 84\n-        {+0.0797421783208847d,    +3.430029236134205E-9d,  }, // 85\n-        {+0.08064348995685577d,   -1.2499290483167703E-9d, }, // 86\n-        {+0.08154398202896118d,   +2.011215719133196E-9d,  }, // 87\n-        {+0.08244366943836212d,   -2.2728753031387152E-10d,}, // 88\n-        {+0.0833425521850586d,    -6.508966857277253E-9d,  }, // 89\n-        {+0.0842406153678894d,    -4.801131671405377E-10d, }, // 90\n-        {+0.08513787388801575d,   +4.406750291994231E-9d,  }, // 91\n-        {+0.08603434264659882d,   -5.304795662536171E-9d,  }, // 92\n-        {+0.08692999184131622d,   +1.6284313912612293E-9d, }, // 93\n-        {+0.08782485127449036d,   -3.158898981674071E-9d,  }, // 94\n-        {+0.08871890604496002d,   -3.3324878834139977E-9d, }, // 95\n-        {+0.08961215615272522d,   +2.536961912893389E-9d,  }, // 96\n-        {+0.09050461649894714d,   +9.737596728980696E-10d, }, // 97\n-        {+0.0913962870836258d,    -6.600437262505396E-9d,  }, // 98\n-        {+0.09228715300559998d,   -3.866609889222889E-9d,  }, // 99\n-        {+0.09317722916603088d,   -4.311847594020281E-9d,  }, // 100\n-        {+0.09406651556491852d,   -6.525851105645959E-9d,  }, // 101\n-        {+0.09495499730110168d,   +5.799080912675435E-9d,  }, // 102\n-        {+0.09584270417690277d,   +4.2634204358490415E-9d, }, // 103\n-        {+0.09672962129116058d,   +5.167390528799477E-9d,  }, // 104\n-        {+0.09761576354503632d,   -4.994827392841906E-9d,  }, // 105\n-        {+0.09850110113620758d,   +4.970725577861395E-9d,  }, // 106\n-        {+0.09938566386699677d,   +6.6496705953229645E-9d, }, // 107\n-        {+0.10026945173740387d,   +1.4262712796792241E-9d, }, // 108\n-        {+0.1011524498462677d,    +5.5822855204629114E-9d, }, // 109\n-        {+0.10203467309474945d,   +5.593494835247651E-9d,  }, // 110\n-        {+0.10291612148284912d,   +2.8332008343480686E-9d, }, // 111\n-        {+0.10379679501056671d,   -1.3289231465997192E-9d, }, // 112\n-        {+0.10467669367790222d,   -5.526819276639527E-9d,  }, // 113\n-        {+0.10555580258369446d,   +6.503128678219282E-9d,  }, // 114\n-        {+0.10643415153026581d,   +6.317463237641817E-9d,  }, // 115\n-        {+0.10731174051761627d,   -4.728528221305482E-9d,  }, // 116\n-        {+0.10818853974342346d,   +4.519199083083901E-9d,  }, // 117\n-        {+0.10906457901000977d,   +5.606492666349878E-9d,  }, // 118\n-        {+0.10993985831737518d,   -1.220176214398581E-10d, }, // 119\n-        {+0.11081436276435852d,   +3.5759315936869937E-9d, }, // 120\n-        {+0.11168810725212097d,   +3.1367659571899855E-9d, }, // 121\n-        {+0.11256109178066254d,   -1.0543075713098835E-10d,}, // 122\n-        {+0.11343331634998322d,   -4.820065619207094E-9d,  }, // 123\n-        {+0.11430476605892181d,   +5.221136819669415E-9d,  }, // 124\n-        {+0.11517547070980072d,   +1.5395018670011342E-9d, }, // 125\n-        {+0.11604541540145874d,   +3.5638391501880846E-10d,}, // 126\n-        {+0.11691460013389587d,   +2.9885336757136527E-9d, }, // 127\n-        {+0.11778303980827332d,   -4.151889860890893E-9d,  }, // 128\n-        {+0.11865071952342987d,   -4.853823938804204E-9d,  }, // 129\n-        {+0.11951763927936554d,   +2.189226237170704E-9d,  }, // 130\n-        {+0.12038381397724152d,   +3.3791993048776982E-9d, }, // 131\n-        {+0.1212492436170578d,    +1.5811884868243975E-11d,}, // 132\n-        {+0.12211392819881439d,   -6.6045909118908625E-9d, }, // 133\n-        {+0.1229778528213501d,    -2.8786263916116364E-10d,}, // 134\n-        {+0.12384103238582611d,   +5.354472503748251E-9d,  }, // 135\n-        {+0.12470348179340363d,   -3.2924463896248744E-9d, }, // 136\n-        {+0.12556517124176025d,   +4.856678149580005E-9d,  }, // 137\n-        {+0.12642613053321838d,   +1.2791850600366742E-9d, }, // 138\n-        {+0.12728634476661682d,   +2.1525945093362843E-9d, }, // 139\n-        {+0.12814581394195557d,   +8.749974471767862E-9d,  }, // 140\n-        {+0.129004567861557d,     -7.461209161105275E-9d,  }, // 141\n-        {+0.12986254692077637d,   +1.4390208226263824E-8d, }, // 142\n-        {+0.1307198405265808d,    -1.3839477920475328E-8d, }, // 143\n-        {+0.13157635927200317d,   -1.483283901239408E-9d,  }, // 144\n-        {+0.13243216276168823d,   -6.889072914229094E-9d,  }, // 145\n-        {+0.1332872211933136d,    +9.990351100568362E-10d, }, // 146\n-        {+0.13414156436920166d,   -6.370937412495338E-9d,  }, // 147\n-        {+0.13499516248703003d,   +2.05047480130511E-9d,   }, // 148\n-        {+0.1358480453491211d,    -2.29509872547079E-9d,   }, // 149\n-        {+0.13670018315315247d,   +1.16354361977249E-8d,   }, // 150\n-        {+0.13755163550376892d,   -1.452496267904829E-8d,  }, // 151\n-        {+0.1384023129940033d,    +9.865115839786888E-9d,  }, // 152\n-        {+0.13925230503082275d,   -3.369999130712228E-9d,  }, // 153\n-        {+0.14010155200958252d,   +6.602496401651853E-9d,  }, // 154\n-        {+0.14095008373260498d,   +1.1205312852298845E-8d, }, // 155\n-        {+0.14179790019989014d,   +1.1660367213160203E-8d, }, // 156\n-        {+0.142645001411438d,     +9.186471222585239E-9d,  }, // 157\n-        {+0.14349138736724854d,   +4.999341878263704E-9d,  }, // 158\n-        {+0.14433705806732178d,   +3.11611905696257E-10d,  }, // 159\n-        {+0.14518201351165771d,   -3.6671598175618173E-9d, }, // 160\n-        {+0.14602625370025635d,   -5.730477881659618E-9d,  }, // 161\n-        {+0.14686977863311768d,   -4.674900007989718E-9d,  }, // 162\n-        {+0.1477125883102417d,    +6.999732437141968E-10d, }, // 163\n-        {+0.14855468273162842d,   +1.159150872494107E-8d,  }, // 164\n-        {+0.14939609169960022d,   -6.082714828488485E-10d, }, // 165\n-        {+0.15023678541183472d,   -4.905712741596318E-9d,  }, // 166\n-        {+0.1510767638683319d,    -1.124848988733307E-10d, }, // 167\n-        {+0.15191605687141418d,   -1.484557220949851E-8d,  }, // 168\n-        {+0.15275460481643677d,   +1.1682026251371384E-8d, }, // 169\n-        {+0.15359249711036682d,   -8.757272519238786E-9d,  }, // 170\n-        {+0.15442964434623718d,   +1.4419920764774415E-8d, }, // 171\n-        {+0.15526613593101501d,   -7.019891063126053E-9d,  }, // 172\n-        {+0.15610191226005554d,   -1.230153548825964E-8d,  }, // 173\n-        {+0.15693697333335876d,   -2.574172005933276E-10d, }, // 174\n-        {+0.15777134895324707d,   +4.748140799544371E-10d, }, // 175\n-        {+0.15860503911972046d,   -8.943081874891003E-9d,  }, // 176\n-        {+0.15943801403045654d,   +2.4500739038517657E-9d, }, // 177\n-        {+0.1602703034877777d,    +6.007922084557054E-9d,  }, // 178\n-        {+0.16110190749168396d,   +2.8835418231126645E-9d, }, // 179\n-        {+0.1619328260421753d,    -5.772862039728412E-9d,  }, // 180\n-        {+0.16276302933692932d,   +1.0988372954605789E-8d, }, // 181\n-        {+0.16359257698059082d,   -5.292913162607026E-9d,  }, // 182\n-        {+0.16442140936851501d,   +6.12956339275823E-9d,   }, // 183\n-        {+0.16524958610534668d,   -1.3210039516811888E-8d, }, // 184\n-        {+0.16607704758644104d,   -2.5711014608334873E-9d, }, // 185\n-        {+0.16690382361412048d,   +9.37721319457112E-9d,   }, // 186\n-        {+0.1677299439907074d,    -6.0370682395944045E-9d, }, // 187\n-        {+0.168555349111557d,     +1.1918249660105651E-8d, }, // 188\n-        {+0.1693800985813141d,    +4.763282949656017E-9d,  }, // 189\n-        {+0.17020416259765625d,   +3.4223342273948817E-9d, }, // 190\n-        {+0.1710275411605835d,    +9.014612241310916E-9d,  }, // 191\n-        {+0.1718502640724182d,    -7.145758990550526E-9d,  }, // 192\n-        {+0.172672301530838d,     -1.4142763934081504E-8d, }, // 193\n-        {+0.1734936535358429d,    -1.0865453656579032E-8d, }, // 194\n-        {+0.17431432008743286d,   +3.794385569450774E-9d,  }, // 195\n-        {+0.1751343309879303d,    +1.1399188501627291E-9d, }, // 196\n-        {+0.17595365643501282d,   +1.2076238768270153E-8d, }, // 197\n-        {+0.1767723262310028d,    +7.901084730502162E-9d,  }, // 198\n-        {+0.17759034037590027d,   -1.0288181007465474E-8d, }, // 199\n-        {+0.1784076690673828d,    -1.15945645153806E-8d,   }, // 200\n-        {+0.17922431230545044d,   +5.073923825786778E-9d,  }, // 201\n-        {+0.18004029989242554d,   +1.1004278077575267E-8d, }, // 202\n-        {+0.1808556318283081d,    +7.2831502374676964E-9d, }, // 203\n-        {+0.18167030811309814d,   -5.0054634662706464E-9d, }, // 204\n-        {+0.18248429894447327d,   +5.022108460298934E-9d,  }, // 205\n-        {+0.18329763412475586d,   +8.642254225732676E-9d,  }, // 206\n-        {+0.18411031365394592d,   +6.931054493326395E-9d,  }, // 207\n-        {+0.18492233753204346d,   +9.619685356326533E-10d, }, // 208\n-        {+0.18573370575904846d,   -8.194157257980706E-9d,  }, // 209\n-        {+0.18654438853263855d,   +1.0333241479437797E-8d, }, // 210\n-        {+0.1873544454574585d,    -1.9948340196027965E-9d, }, // 211\n-        {+0.1881638467311859d,    -1.4313002926259948E-8d, }, // 212\n-        {+0.1889725625514984d,    +4.241536392174967E-9d,  }, // 213\n-        {+0.18978065252304077d,   -4.877952454011428E-9d,  }, // 214\n-        {+0.1905880868434906d,    -1.0813801247641613E-8d, }, // 215\n-        {+0.1913948655128479d,    -1.2513218445781325E-8d, }, // 216\n-        {+0.19220098853111267d,   -8.925958555729115E-9d,  }, // 217\n-        {+0.1930064558982849d,    +9.956860681280245E-10d, }, // 218\n-        {+0.193811297416687d,     -1.1505428993246996E-8d, }, // 219\n-        {+0.1946154534816742d,    +1.4217997464522202E-8d, }, // 220\n-        {+0.19541901350021362d,   -1.0200858727747717E-8d, }, // 221\n-        {+0.19622188806533813d,   +5.682607223902455E-9d,  }, // 222\n-        {+0.1970241367816925d,    +3.2988908516009827E-9d, }, // 223\n-        {+0.19782572984695435d,   +1.3482965534659446E-8d, }, // 224\n-        {+0.19862669706344604d,   +7.462678536479685E-9d,  }, // 225\n-        {+0.1994270384311676d,    -1.3734273888891115E-8d, }, // 226\n-        {+0.20022669434547424d,   +1.0521983802642893E-8d, }, // 227\n-        {+0.20102575421333313d,   -8.152742388541905E-9d,  }, // 228\n-        {+0.2018241584300995d,    -9.133484280193855E-9d,  }, // 229\n-        {+0.20262190699577332d,   +8.59763959528144E-9d,   }, // 230\n-        {+0.2034190595149994d,    -1.3548568223001414E-8d, }, // 231\n-        {+0.20421552658081055d,   +1.4847880344628818E-8d, }, // 232\n-        {+0.20501139760017395d,   +5.390620378060543E-9d,  }, // 233\n-        {+0.2058066427707672d,    -1.1109834472051523E-8d, }, // 234\n-        {+0.20660123229026794d,   -3.845373872038116E-9d,  }, // 235\n-        {+0.20739519596099854d,   -1.6149279479975042E-9d, }, // 236\n-        {+0.20818853378295898d,   -3.4174925203771133E-9d, }, // 237\n-        {+0.2089812457561493d,    -8.254443919468538E-9d,  }, // 238\n-        {+0.20977330207824707d,   +1.4672790944499144E-8d, }, // 239\n-        {+0.2105647623538971d,    +6.753452542942992E-9d,  }, // 240\n-        {+0.21135559678077698d,   -1.218609462241927E-9d,  }, // 241\n-        {+0.21214580535888672d,   -8.254218316367887E-9d,  }, // 242\n-        {+0.21293538808822632d,   -1.3366540360587255E-8d, }, // 243\n-        {+0.2137243151664734d,    +1.4231244750190031E-8d, }, // 244\n-        {+0.2145126760005951d,    -1.3885660525939072E-8d, }, // 245\n-        {+0.21530038118362427d,   -7.3304404046850136E-9d, }, // 246\n-        {+0.2160874605178833d,    +5.072117654842356E-9d,  }, // 247\n-        {+0.21687394380569458d,   -5.505080220459036E-9d,  }, // 248\n-        {+0.21765980124473572d,   -8.286782292266659E-9d,  }, // 249\n-        {+0.2184450328350067d,    -2.302351152358085E-9d,  }, // 250\n-        {+0.21922963857650757d,   +1.3416565858314603E-8d, }, // 251\n-        {+0.22001364827156067d,   +1.0033721426962048E-8d, }, // 252\n-        {+0.22079706192016602d,   -1.1487079818684332E-8d, }, // 253\n-        {+0.22157981991767883d,   +9.420348186357043E-9d,  }, // 254\n-        {+0.2223619818687439d,    +1.4110645699377834E-8d, }, // 255\n-        {+0.2231435477733612d,    +3.5408485497116107E-9d, }, // 256\n-        {+0.22392448782920837d,   +8.468072777056227E-9d,  }, // 257\n-        {+0.2247048318386078d,    +4.255446699237779E-11d, }, // 258\n-        {+0.22548454999923706d,   +9.016946273084244E-9d,  }, // 259\n-        {+0.22626367211341858d,   +6.537034810260226E-9d,  }, // 260\n-        {+0.22704219818115234d,   -6.451285264969768E-9d,  }, // 261\n-        {+0.22782009840011597d,   +7.979956357126066E-10d, }, // 262\n-        {+0.22859740257263184d,   -5.759582672039005E-10d, }, // 263\n-        {+0.22937411069869995d,   -9.633854121180397E-9d,  }, // 264\n-        {+0.23015019297599792d,   +4.363736368635843E-9d,  }, // 265\n-        {+0.23092567920684814d,   +1.2549416560182509E-8d, }, // 266\n-        {+0.231700599193573d,     -1.3946383592553814E-8d, }, // 267\n-        {+0.2324748933315277d,    -1.458843364504023E-8d,  }, // 268\n-        {+0.23324856162071228d,   +1.1551692104697154E-8d, }, // 269\n-        {+0.23402166366577148d,   +5.795621295524984E-9d,  }, // 270\n-        {+0.23479416966438293d,   -1.1301979046684263E-9d, }, // 271\n-        {+0.23556607961654663d,   -8.303779721781787E-9d,  }, // 272\n-        {+0.23633739352226257d,   -1.4805271785394075E-8d, }, // 273\n-        {+0.23710808157920837d,   +1.0085373835899469E-8d, }, // 274\n-        {+0.2378782033920288d,    +7.679117635349454E-9d,  }, // 275\n-        {+0.2386477291584015d,    +8.69177352065934E-9d,   }, // 276\n-        {+0.23941665887832642d,   +1.4034725764547136E-8d, }, // 277\n-        {+0.24018502235412598d,   -5.185064518887831E-9d,  }, // 278\n-        {+0.2409527599811554d,    +1.1544236628121676E-8d, }, // 279\n-        {+0.24171993136405945d,   +5.523085719902123E-9d,  }, // 280\n-        {+0.24248650670051575d,   +7.456824943331887E-9d,  }, // 281\n-        {+0.24325251579284668d,   -1.1555923403029638E-8d, }, // 282\n-        {+0.24401789903640747d,   +8.988361382732908E-9d,  }, // 283\n-        {+0.2447827160358429d,    +1.0381848020926893E-8d, }, // 284\n-        {+0.24554696679115295d,   -6.480706118857055E-9d,  }, // 285\n-        {+0.24631062150001526d,   -1.0904271124793968E-8d, }, // 286\n-        {+0.2470736801624298d,    -1.998183061531611E-9d,  }, // 287\n-        {+0.247836172580719d,     -8.676137737360023E-9d,  }, // 288\n-        {+0.24859806895256042d,   -2.4921733203932487E-10d,}, // 289\n-        {+0.2493593990802765d,    -5.635173762130303E-9d,  }, // 290\n-        {+0.2501201629638672d,    -2.3951455355985637E-8d, }, // 291\n-        {+0.25088030099868774d,   +5.287121672447825E-9d,  }, // 292\n-        {+0.2516399025917053d,    -6.447877375049486E-9d,  }, // 293\n-        {+0.25239890813827515d,   +1.32472428796441E-9d,   }, // 294\n-        {+0.2531573176383972d,    +2.9479464287605006E-8d, }, // 295\n-        {+0.2539151906967163d,    +1.9284247135543574E-8d, }, // 296\n-        {+0.2546725273132324d,    -2.8390360197221716E-8d, }, // 297\n-        {+0.255429208278656d,     +6.533522495226226E-9d,  }, // 298\n-        {+0.2561853528022766d,    +5.713225978895991E-9d,  }, // 299\n-        {+0.25694090127944946d,   +2.9618050962556135E-8d, }, // 300\n-        {+0.25769591331481934d,   +1.950605015323617E-8d,  }, // 301\n-        {+0.25845038890838623d,   -2.3762031507525576E-8d, }, // 302\n-        {+0.2592042088508606d,    +1.98818938195077E-8d,   }, // 303\n-        {+0.25995755195617676d,   -2.751925069084042E-8d,  }, // 304\n-        {+0.2607102394104004d,    +1.3703391844683932E-8d, }, // 305\n-        {+0.26146239042282104d,   +2.5193525310038174E-8d, }, // 306\n-        {+0.2622140049934387d,    +7.802219817310385E-9d,  }, // 307\n-        {+0.26296502351760864d,   +2.1983272709242607E-8d, }, // 308\n-        {+0.2637155055999756d,    +8.979279989292184E-9d,  }, // 309\n-        {+0.2644653916358948d,    +2.9240221157844312E-8d, }, // 310\n-        {+0.265214741230011d,     +2.4004885823813374E-8d, }, // 311\n-        {+0.2659635543823242d,    -5.885186277410878E-9d,  }, // 312\n-        {+0.2667117714881897d,    +1.4300386517357162E-11d,}, // 313\n-        {+0.2674594521522522d,    -1.7063531531989365E-8d, }, // 314\n-        {+0.26820653676986694d,   +3.3218524692903896E-9d, }, // 315\n-        {+0.2689530849456787d,    +2.3998252479954764E-9d, }, // 316\n-        {+0.2696990966796875d,    -1.8997462070389404E-8d, }, // 317\n-        {+0.27044451236724854d,   -4.350745270980051E-10d, }, // 318\n-        {+0.2711893916130066d,    -6.892221115467135E-10d, }, // 319\n-        {+0.27193373441696167d,   -1.89333199110902E-8d,   }, // 320\n-        {+0.272677481174469d,     +5.262017392507765E-9d,  }, // 321\n-        {+0.27342069149017334d,   +1.3115046679980076E-8d, }, // 322\n-        {+0.2741633653640747d,    +5.4468361834451975E-9d, }, // 323\n-        {+0.2749055027961731d,    -1.692337384653611E-8d,  }, // 324\n-        {+0.27564704418182373d,   +6.426479056697412E-9d,  }, // 325\n-        {+0.2763880491256714d,    +1.670735065191342E-8d,  }, // 326\n-        {+0.27712851762771606d,   +1.4733029698334834E-8d, }, // 327\n-        {+0.27786844968795776d,   +1.315498542514467E-9d,  }, // 328\n-        {+0.2786078453063965d,    -2.2735061539223372E-8d, }, // 329\n-        {+0.27934664487838745d,   +2.994379757313727E-9d,  }, // 330\n-        {+0.28008490800857544d,   +1.970577274107218E-8d,  }, // 331\n-        {+0.28082263469696045d,   +2.820392733542077E-8d,  }, // 332\n-        {+0.2815598249435425d,    +2.929187356678173E-8d,  }, // 333\n-        {+0.28229647874832153d,   +2.377086680926386E-8d,  }, // 334\n-        {+0.2830325961112976d,    +1.2440393009992529E-8d, }, // 335\n-        {+0.2837681770324707d,    -3.901826104778096E-9d,  }, // 336\n-        {+0.2845032215118408d,    -2.4459827842685974E-8d, }, // 337\n-        {+0.2852376699447632d,    +1.1165241398059789E-8d, }, // 338\n-        {+0.28597164154052734d,   -1.54434478239181E-8d,   }, // 339\n-        {+0.28670501708984375d,   +1.5714110564653245E-8d, }, // 340\n-        {+0.28743791580200195d,   -1.3782394940142479E-8d, }, // 341\n-        {+0.2881702184677124d,    +1.6063569876284005E-8d, }, // 342\n-        {+0.28890204429626465d,   -1.317176818216125E-8d,  }, // 343\n-        {+0.28963327407836914d,   +1.8504673536253893E-8d, }, // 344\n-        {+0.29036402702331543d,   -7.334319635123628E-9d,  }, // 345\n-        {+0.29109418392181396d,   +2.9300903540317107E-8d, }, // 346\n-        {+0.2918238639831543d,    +9.979706999541057E-9d,  }, // 347\n-        {+0.29255300760269165d,   -4.916314210412424E-9d,  }, // 348\n-        {+0.293281614780426d,     -1.4611908070155308E-8d, }, // 349\n-        {+0.2940096855163574d,    -1.833351586679361E-8d,  }, // 350\n-        {+0.29473721981048584d,   -1.530926726615185E-8d,  }, // 351\n-        {+0.2954642176628113d,    -4.7689754029101934E-9d, }, // 352\n-        {+0.29619067907333374d,   +1.4055868011423819E-8d, }, // 353\n-        {+0.296916663646698d,     -1.7672547212604003E-8d, }, // 354\n-        {+0.2976420521736145d,    +2.0020234215759705E-8d, }, // 355\n-        {+0.2983669638633728d,    +8.688424478730524E-9d,  }, // 356\n-        {+0.2990913391113281d,    +8.69851089918337E-9d,   }, // 357\n-        {+0.29981517791748047d,   +2.0810681643102672E-8d, }, // 358\n-        {+0.3005385398864746d,    -1.3821169493779352E-8d, }, // 359\n-        {+0.301261305809021d,     +2.4769140784919128E-8d, }, // 360\n-        {+0.3019835948944092d,    +1.8127576600610336E-8d, }, // 361\n-        {+0.3027053475379944d,    +2.6612401062437074E-8d, }, // 362\n-        {+0.3034266233444214d,    -8.629042891789934E-9d,  }, // 363\n-        {+0.3041473627090454d,    -2.724174869314043E-8d,  }, // 364\n-        {+0.30486756563186646d,   -2.8476975783775358E-8d, }, // 365\n-        {+0.3055872321128845d,    -1.1587600174449919E-8d, }, // 366\n-        {+0.3063063621520996d,    +2.417189020581056E-8d,  }, // 367\n-        {+0.3070250153541565d,    +1.99407553679345E-8d,   }, // 368\n-        {+0.3077431917190552d,    -2.35387025694381E-8d,   }, // 369\n-        {+0.3084607720375061d,    +1.3683509995845583E-8d, }, // 370\n-        {+0.30917787551879883d,   +1.3137214081023085E-8d, }, // 371\n-        {+0.30989450216293335d,   -2.444006866174775E-8d,  }, // 372\n-        {+0.3106105327606201d,    +2.0896888605749563E-8d, }, // 373\n-        {+0.31132614612579346d,   -2.893149098508887E-8d,  }, // 374\n-        {+0.31204116344451904d,   +5.621509038251498E-9d,  }, // 375\n-        {+0.3127557039260864d,    +6.0778104626050015E-9d, }, // 376\n-        {+0.3134697675704956d,    -2.6832941696716294E-8d, }, // 377\n-        {+0.31418323516845703d,   +2.6826625274495256E-8d, }, // 378\n-        {+0.31489628553390503d,   -1.1030897183911054E-8d, }, // 379\n-        {+0.31560879945755005d,   -2.047124671392676E-8d,  }, // 380\n-        {+0.3163207769393921d,    -7.709990443086711E-10d, }, // 381\n-        {+0.3170322775840759d,    -1.0812918808112342E-8d, }, // 382\n-        {+0.3177432417869568d,    +9.727979174888975E-9d,  }, // 383\n-        {+0.31845372915267944d,   +1.9658551724508715E-9d, }, // 384\n-        {+0.3191636800765991d,    +2.6222628001695826E-8d, }, // 385\n-        {+0.3198731541633606d,    +2.3609400272358744E-8d, }, // 386\n-        {+0.32058215141296387d,   -5.159602957634814E-9d,  }, // 387\n-        {+0.32129061222076416d,   +2.329701319016099E-10d, }, // 388\n-        {+0.32199859619140625d,   -1.910633190395738E-8d,  }, // 389\n-        {+0.32270604372024536d,   -2.863180390093667E-9d,  }, // 390\n-        {+0.32341301441192627d,   -9.934041364456825E-9d,  }, // 391\n-        {+0.3241194486618042d,    +1.999240777687192E-8d,  }, // 392\n-        {+0.3248254060745239d,    +2.801670341647724E-8d,  }, // 393\n-        {+0.32553088665008545d,   +1.4842534265191358E-8d, }, // 394\n-        {+0.32623589038848877d,   -1.882789920477354E-8d,  }, // 395\n-        {+0.3269403576850891d,    -1.268923579073577E-8d,  }, // 396\n-        {+0.32764434814453125d,   -2.564688370677835E-8d,  }, // 397\n-        {+0.3283478021621704d,    +2.6015626820520968E-9d, }, // 398\n-        {+0.32905077934265137d,   +1.3147747907784344E-8d, }, // 399\n-        {+0.3297532796859741d,    +6.686493860720675E-9d,  }, // 400\n-        {+0.33045530319213867d,   -1.608884086544153E-8d,  }, // 401\n-        {+0.33115679025650024d,   +5.118287907840204E-9d,  }, // 402\n-        {+0.3318578004837036d,    +1.139367970944884E-8d,  }, // 403\n-        {+0.3325583338737488d,    +3.426327822115399E-9d,  }, // 404\n-        {+0.33325839042663574d,   -1.809622142990733E-8d,  }, // 405\n-        {+0.3339579105377197d,    +7.116780143398601E-9d,  }, // 406\n-        {+0.3346569538116455d,    +2.0145352306345386E-8d, }, // 407\n-        {+0.3353555202484131d,    +2.167272474431968E-8d,  }, // 408\n-        {+0.33605360984802246d,   +1.2380696294966822E-8d, }, // 409\n-        {+0.33675122261047363d,   -7.050361059209181E-9d,  }, // 410\n-        {+0.3374482989311218d,    +2.366314656322868E-8d,  }, // 411\n-        {+0.3381449580192566d,    -1.4010540194086646E-8d, }, // 412\n-        {+0.3388410806655884d,    -1.860165465666482E-10d, }, // 413\n-        {+0.33953672647476196d,   +6.206776940880773E-9d,  }, // 414\n-        {+0.34023189544677734d,   +5.841137379010982E-9d,  }, // 415\n-        {+0.3409265875816345d,    -6.11041311179286E-10d,  }, // 416\n-        {+0.3416208028793335d,    -1.2479264502054702E-8d, }, // 417\n-        {+0.34231454133987427d,   -2.909443297645926E-8d,  }, // 418\n-        {+0.34300774335861206d,   +9.815805717097634E-9d,  }, // 419\n-        {+0.3437005281448364d,    -1.4291517981101049E-8d, }, // 420\n-        {+0.3443927764892578d,    +1.8457821628427503E-8d, }, // 421\n-        {+0.34508460760116577d,   -1.0481908869377813E-8d, }, // 422\n-        {+0.34577590227127075d,   +1.876076001514746E-8d,  }, // 423\n-        {+0.3464667797088623d,    -1.2362653723769037E-8d, }, // 424\n-        {+0.3471571207046509d,    +1.6016578405624026E-8d, }, // 425\n-        {+0.347847044467926d,     -1.4652759033760925E-8d, }, // 426\n-        {+0.3485364317893982d,    +1.549533655901835E-8d,  }, // 427\n-        {+0.34922540187835693d,   -1.2093068629412478E-8d, }, // 428\n-        {+0.3499138355255127d,    +2.244531711424792E-8d,  }, // 429\n-        {+0.35060185194015503d,   +5.538565518604807E-10d, }, // 430\n-        {+0.35128939151763916d,   -1.7511499366215853E-8d, }, // 431\n-        {+0.3519763946533203d,    +2.850385787215544E-8d,  }, // 432\n-        {+0.35266298055648804d,   +2.003926370146842E-8d,  }, // 433\n-        {+0.35334908962249756d,   +1.734665280502264E-8d,  }, // 434\n-        {+0.3540347218513489d,    +2.1071983674869414E-8d, }, // 435\n-        {+0.35471993684768677d,   -2.774475773922311E-8d,  }, // 436\n-        {+0.3554046154022217d,    -9.250975291734664E-9d,  }, // 437\n-        {+0.3560888171195984d,    +1.7590672330295415E-8d, }, // 438\n-        {+0.35677260160446167d,   -6.1837904549178745E-9d, }, // 439\n-        {+0.35745590925216675d,   -2.0330362973820856E-8d, }, // 440\n-        {+0.3581387400627136d,    -2.42109990366786E-8d,   }, // 441\n-        {+0.3588210940361023d,    -1.7188958587407816E-8d, }, // 442\n-        {+0.35950297117233276d,   +1.3711958590112228E-9d, }, // 443\n-        {+0.3601844310760498d,    -2.7501042008405925E-8d, }, // 444\n-        {+0.36086535453796387d,   +1.6036460343275798E-8d, }, // 445\n-        {+0.3615458607673645d,    +1.3405964389498495E-8d, }, // 446\n-        {+0.36222589015960693d,   +2.484237749027735E-8d,  }, // 447\n-        {+0.36290550231933594d,   -8.629967484362177E-9d,  }, // 448\n-        {+0.36358463764190674d,   -2.6778729562324134E-8d, }, // 449\n-        {+0.36426329612731934d,   -2.8977490516960565E-8d, }, // 450\n-        {+0.36494147777557373d,   -1.4601106624823502E-8d, }, // 451\n-        {+0.3656191825866699d,    +1.69742947894444E-8d,   }, // 452\n-        {+0.3662964701652527d,    +6.7666740211281175E-9d, }, // 453\n-        {+0.36697328090667725d,   +1.500201674336832E-8d,  }, // 454\n-        {+0.3676496744155884d,    -1.730424167425052E-8d,  }, // 455\n-        {+0.36832553148269653d,   +2.9676011119845104E-8d, }, // 456\n-        {+0.36900103092193604d,   -2.2253590346826743E-8d, }, // 457\n-        {+0.36967599391937256d,   +6.3372065441089185E-9d, }, // 458\n-        {+0.37035053968429565d,   -3.145816653215968E-9d,  }, // 459\n-        {+0.37102460861206055d,   +9.515812117036965E-9d,  }, // 460\n-        {+0.371698260307312d,     -1.4669965113042639E-8d, }, // 461\n-        {+0.3723714351654053d,    -1.548715389333397E-8d,  }, // 462\n-        {+0.37304413318634033d,   +7.674361647125109E-9d,  }, // 463\n-        {+0.37371641397476196d,   -4.181177882069608E-9d,  }, // 464\n-        {+0.3743882179260254d,    +9.158530500130718E-9d,  }, // 465\n-        {+0.3750596046447754d,    -1.13047236597869E-8d,   }, // 466\n-        {+0.3757305145263672d,    -5.36108186384227E-9d,   }, // 467\n-        {+0.3764009475708008d,    +2.7593452284747873E-8d, }, // 468\n-        {+0.37707096338272095d,   +2.8557016344085205E-8d, }, // 469\n-        {+0.3777405619621277d,    -1.868818164036E-9d,     }, // 470\n-        {+0.3784096837043762d,    -3.479042513414447E-9d,  }, // 471\n-        {+0.37907832860946655d,   +2.432550290565648E-8d,  }, // 472\n-        {+0.37974655628204346d,   +2.2538131805476768E-8d, }, // 473\n-        {+0.38041436672210693d,   -8.244395239939089E-9d,  }, // 474\n-        {+0.3810817003250122d,    -7.821867597227376E-9d,  }, // 475\n-        {+0.3817485570907593d,    +2.4400089062515914E-8d, }, // 476\n-        {+0.3824149966239929d,    +2.9410015940087773E-8d, }, // 477\n-        {+0.38308101892471313d,   +7.799913824734797E-9d,  }, // 478\n-        {+0.38374656438827515d,   +1.976524624939355E-8d,  }, // 479\n-        {+0.38441169261932373d,   +6.291008309266035E-9d,  }, // 480\n-        {+0.3850763440132141d,    +2.757030889767851E-8d,  }, // 481\n-        {+0.38574057817459106d,   +2.4585794728405612E-8d, }, // 482\n-        {+0.3864043951034546d,    -2.0764122246389383E-9d, }, // 483\n-        {+0.3870677351951599d,    +7.77328837578952E-9d,   }, // 484\n-        {+0.3877306580543518d,    -4.8859560029989374E-9d, }, // 485\n-        {+0.3883931040763855d,    +2.0133131420595028E-8d, }, // 486\n-        {+0.38905513286590576d,   +2.380738071335498E-8d,  }, // 487\n-        {+0.3897167444229126d,    +6.7171126157142075E-9d, }, // 488\n-        {+0.39037787914276123d,   +2.9046141593926277E-8d, }, // 489\n-        {+0.3910386562347412d,    -2.7836800219410262E-8d, }, // 490\n-        {+0.3916988968849182d,    +1.545909820981726E-8d,  }, // 491\n-        {+0.39235877990722656d,   -1.930436269002062E-8d,  }, // 492\n-        {+0.3930181860923767d,    -1.2343297554921835E-8d, }, // 493\n-        {+0.3936771750450134d,    -2.268889128622553E-8d,  }, // 494\n-        {+0.39433568716049194d,   +9.835827818608177E-9d,  }, // 495\n-        {+0.39499378204345703d,   +2.6197411946856397E-8d, }, // 496\n-        {+0.3956514596939087d,    +2.6965931069318893E-8d, }, // 497\n-        {+0.3963087201118469d,    +1.2710331127772166E-8d, }, // 498\n-        {+0.39696556329727173d,   -1.6001563011916016E-8d, }, // 499\n-        {+0.39762192964553833d,   +1.0016001590267064E-9d, }, // 500\n-        {+0.3982778787612915d,    +4.680767399874334E-9d,  }, // 501\n-        {+0.39893341064453125d,   -4.399582029272418E-9d,  }, // 502\n-        {+0.39958852529525757d,   -2.5676078228301587E-8d, }, // 503\n-        {+0.4002431631088257d,    +1.0181870233355787E-9d, }, // 504\n-        {+0.40089738368988037d,   +1.6639728835984655E-8d, }, // 505\n-        {+0.40155118703842163d,   +2.174860642202632E-8d,  }, // 506\n-        {+0.40220457315444946d,   +1.6903781197123503E-8d, }, // 507\n-        {+0.40285754203796387d,   +2.663119647467697E-9d,  }, // 508\n-        {+0.40351009368896484d,   -2.0416603812329616E-8d, }, // 509\n-        {+0.4041621685028076d,    +7.82494078472695E-9d,   }, // 510\n-        {+0.40481382608413696d,   +2.833770747113627E-8d,  }, // 511\n-        {+0.40546512603759766d,   -1.7929433274271985E-8d, }, // 512\n-        {+0.40611594915390015d,   -1.1214757379328965E-8d, }, // 513\n-        {+0.4067663550376892d,    -1.0571553019207106E-8d, }, // 514\n-        {+0.40741634368896484d,   -1.5449538712332313E-8d, }, // 515\n-        {+0.40806591510772705d,   -2.529950530235105E-8d,  }, // 516\n-        {+0.40871500968933105d,   +2.0031331601617008E-8d, }, // 517\n-        {+0.4093637466430664d,    +1.880755298741952E-9d,  }, // 518\n-        {+0.41001206636428833d,   -1.9600580584843318E-8d, }, // 519\n-        {+0.41065990924835205d,   +1.573691633515306E-8d,  }, // 520\n-        {+0.4113073945045471d,    -1.0772154376548336E-8d, }, // 521\n-        {+0.411954402923584d,     +2.0624330192486066E-8d, }, // 522\n-        {+0.4126010537147522d,    -8.741139170029572E-9d,  }, // 523\n-        {+0.4132472276687622d,    +2.0881457123894216E-8d, }, // 524\n-        {+0.41389304399490356d,   -9.177488027521808E-9d,  }, // 525\n-        {+0.4145383834838867d,    +2.0829952491625585E-8d, }, // 526\n-        {+0.4151833653450012d,    -7.767915492597301E-9d,  }, // 527\n-        {+0.4158278703689575d,    +2.4774753446082082E-8d, }, // 528\n-        {+0.41647201776504517d,   -2.1581119071750435E-10d,}, // 529\n-        {+0.4171157479286194d,    -2.260047972865202E-8d,  }, // 530\n-        {+0.4177590012550354d,    +1.775884601423381E-8d,  }, // 531\n-        {+0.41840189695358276d,   +2.185301053838889E-9d,  }, // 532\n-        {+0.4190443754196167d,    -9.185071463667081E-9d,  }, // 533\n-        {+0.4196864366531372d,    -1.5821896727910552E-8d, }, // 534\n-        {+0.4203280806541443d,    -1.719582086188318E-8d,  }, // 535\n-        {+0.42096930742263794d,   -1.2778508303324259E-8d, }, // 536\n-        {+0.42161011695861816d,   -2.042639194493364E-9d,  }, // 537\n-        {+0.42225050926208496d,   +1.5538093219698803E-8d, }, // 538\n-        {+0.4228905439376831d,    -1.9115659590156936E-8d, }, // 539\n-        {+0.42353010177612305d,   +1.3729680248843432E-8d, }, // 540\n-        {+0.42416930198669434d,   -4.611893838830296E-9d,  }, // 541\n-        {+0.4248080849647522d,    -1.4013456880651706E-8d, }, // 542\n-        {+0.42544645071029663d,   -1.3953728897042917E-8d, }, // 543\n-        {+0.42608439922332764d,   -3.912427573594197E-9d,  }, // 544\n-        {+0.4267219305038452d,    +1.6629734283189315E-8d, }, // 545\n-        {+0.42735910415649414d,   -1.1413593493354881E-8d, }, // 546\n-        {+0.42799586057662964d,   -2.792046157580119E-8d,  }, // 547\n-        {+0.42863214015960693d,   +2.723009182661306E-8d,  }, // 548\n-        {+0.42926812171936035d,   -2.4260535621557444E-8d, }, // 549\n-        {+0.42990362644195557d,   -3.064060124024764E-9d,  }, // 550\n-        {+0.43053877353668213d,   -2.787640178598121E-8d,  }, // 551\n-        {+0.4311734437942505d,    +2.102412085257792E-8d,  }, // 552\n-        {+0.4318077564239502d,    +2.4939635093999683E-8d, }, // 553\n-        {+0.43244171142578125d,   -1.5619414792273914E-8d, }, // 554\n-        {+0.4330751895904541d,    +1.9065734894871523E-8d, }, // 555\n-        {+0.4337083101272583d,    +1.0294301092654604E-8d, }, // 556\n-        {+0.4343410134315491d,    +1.8178469851136E-8d,    }, // 557\n-        {+0.4349733591079712d,    -1.6379825102473853E-8d, }, // 558\n-        {+0.4356052279472351d,    +2.6334323946685834E-8d, }, // 559\n-        {+0.43623673915863037d,   +2.761628769925529E-8d,  }, // 560\n-        {+0.436867892742157d,     -1.2030229087793677E-8d, }, // 561\n-        {+0.4374985694885254d,    +2.7106814809424793E-8d, }, // 562\n-        {+0.43812888860702515d,   +2.631993083235205E-8d,  }, // 563\n-        {+0.43875885009765625d,   -1.3890028312254422E-8d, }, // 564\n-        {+0.43938833475112915d,   +2.6186133735555794E-8d, }, // 565\n-        {+0.4400174617767334d,    +2.783809071694788E-8d,  }, // 566\n-        {+0.440646231174469d,     -8.436135220472006E-9d,  }, // 567\n-        {+0.44127458333969116d,   -2.2534815932619883E-8d, }, // 568\n-        {+0.4419025182723999d,    -1.3961804471714283E-8d, }, // 569\n-        {+0.4425300359725952d,    +1.7778112039716255E-8d, }, // 570\n-        {+0.4431571960449219d,    +1.3574569976673652E-8d, }, // 571\n-        {+0.4437839984893799d,    -2.607907890164073E-8d,  }, // 572\n-        {+0.4444103240966797d,    +1.8518879652136628E-8d, }, // 573\n-        {+0.44503629207611084d,   +2.865065604247164E-8d,  }, // 574\n-        {+0.44566190242767334d,   +4.806827797299427E-9d,  }, // 575\n-        {+0.4462870955467224d,    +7.0816970994232115E-9d, }, // 576\n-        {+0.44691193103790283d,   -2.3640641240074437E-8d, }, // 577\n-        {+0.4475363492965698d,    -2.7267718387865538E-8d, }, // 578\n-        {+0.4481603503227234d,    -3.3126235292976077E-9d, }, // 579\n-        {+0.4487839937210083d,    -1.0894001590268427E-8d, }, // 580\n-        {+0.4494072198867798d,    +1.0077883359971829E-8d, }, // 581\n-        {+0.4500300884246826d,    +4.825712712114668E-10d, }, // 582\n-        {+0.450652539730072d,     +2.0407987470746858E-8d, }, // 583\n-        {+0.4512746334075928d,    +1.073186581170719E-8d,  }, // 584\n-        {+0.4518963694572449d,    -2.8064314757880205E-8d, }, // 585\n-        {+0.45251762866973877d,   +2.3709316816226527E-8d, }, // 586\n-        {+0.4531385898590088d,    -1.2281487504266522E-8d, }, // 587\n-        {+0.4537591338157654d,    -1.634864487421458E-8d,  }, // 588\n-        {+0.45437926054000854d,   +1.1985747222409522E-8d, }, // 589\n-        {+0.45499902963638306d,   +1.3594057956219485E-8d, }, // 590\n-        {+0.4556184411048889d,    -1.1047585095328619E-8d, }, // 591\n-        {+0.45623743534088135d,   -1.8592937532754405E-9d, }, // 592\n-        {+0.4568560719490051d,    -1.797135137545755E-8d,  }, // 593\n-        {+0.4574742913246155d,    +6.943684261645378E-10d, }, // 594\n-        {+0.4580921530723572d,    -4.994175141684681E-9d,  }, // 595\n-        {+0.45870959758758545d,   +2.5039391215625133E-8d, }, // 596\n-        {+0.45932674407958984d,   -2.7943366835352838E-8d, }, // 597\n-        {+0.45994341373443604d,   +1.534146910128904E-8d,  }, // 598\n-        {+0.46055978536605835d,   -2.3450920230816267E-8d, }, // 599\n-        {+0.46117573976516724d,   -2.4642997069960124E-8d, }, // 600\n-        {+0.4617912769317627d,    +1.2232622070370946E-8d, }, // 601\n-        {+0.4624064564704895d,    +2.80378133047839E-8d,   }, // 602\n-        {+0.46302127838134766d,   +2.3238237048117092E-8d, }, // 603\n-        {+0.46363574266433716d,   -1.7013046451109475E-9d, }, // 604\n-        {+0.46424978971481323d,   +1.3287778803035383E-8d, }, // 605\n-        {+0.46486347913742065d,   +9.06393426961373E-9d,   }, // 606\n-        {+0.4654768109321594d,    -1.3910598647592876E-8d, }, // 607\n-        {+0.46608972549438477d,   +4.430214458933614E-9d,  }, // 608\n-        {+0.46670228242874146d,   +4.942270562885745E-9d,  }, // 609\n-        {+0.4673144817352295d,    -1.1914734393460718E-8d, }, // 610\n-        {+0.4679262638092041d,    +1.3922696570638494E-8d, }, // 611\n-        {+0.46853768825531006d,   +2.3307929211781914E-8d, }, // 612\n-        {+0.46914875507354736d,   +1.669813444584674E-8d,  }, // 613\n-        {+0.469759464263916d,     -5.450354376430758E-9d,  }, // 614\n-        {+0.47036975622177124d,   +1.6922605350647674E-8d, }, // 615\n-        {+0.4709796905517578d,    +2.4667033200046904E-8d, }, // 616\n-        {+0.47158926725387573d,   +1.8236762070433784E-8d, }, // 617\n-        {+0.472198486328125d,     -1.915204563140137E-9d,  }, // 618\n-        {+0.47280728816986084d,   +2.426795414605756E-8d,  }, // 619\n-        {+0.4734157919883728d,    -2.19717006713618E-8d,   }, // 620\n-        {+0.47402387857437134d,   -2.0974352165535873E-8d, }, // 621\n-        {+0.47463154792785645d,   +2.770970558184228E-8d,  }, // 622\n-        {+0.4752389192581177d,    +5.32006955298355E-9d,   }, // 623\n-        {+0.47584593296051025d,   -2.809054633964104E-8d,  }, // 624\n-        {+0.4764525294303894d,    -1.2470243596102937E-8d, }, // 625\n-        {+0.4770587682723999d,    -6.977226702440138E-9d,  }, // 626\n-        {+0.47766464948654175d,   -1.1165866833118273E-8d, }, // 627\n-        {+0.47827017307281494d,   -2.4591344661022708E-8d, }, // 628\n-        {+0.4788752794265747d,    +1.2794996377383974E-8d, }, // 629\n-        {+0.4794800877571106d,    -1.7772927065973874E-8d, }, // 630\n-        {+0.48008447885513306d,   +3.35657712457243E-9d,   }, // 631\n-        {+0.48068851232528687d,   +1.7020465042442242E-8d, }, // 632\n-        {+0.481292188167572d,     +2.365953779624783E-8d,  }, // 633\n-        {+0.4818955063819885d,    +2.3713798664443718E-8d, }, // 634\n-        {+0.4824984669685364d,    +1.7622455019548098E-8d, }, // 635\n-        {+0.4831010699272156d,    +5.823920246566496E-9d,  }, // 636\n-        {+0.4837033152580261d,    -1.1244184344361017E-8d, }, // 637\n-        {+0.48430514335632324d,   +2.645961716432205E-8d,  }, // 638\n-        {+0.4849066734313965d,    +1.6207809718247905E-10d,}, // 639\n-        {+0.4855077862739563d,    +2.9507744508973654E-8d, }, // 640\n-        {+0.48610860109329224d,   -4.278201128741098E-9d,  }, // 641\n-        {+0.48670899868011475d,   +1.844722015961139E-8d,  }, // 642\n-        {+0.4873090982437134d,    -2.1092372471088425E-8d, }, // 643\n-        {+0.4879087805747986d,    -3.2555596107382053E-9d, }, // 644\n-        {+0.48850810527801514d,   +1.2784366845429667E-8d, }, // 645\n-        {+0.48910707235336304d,   +2.7457984659996047E-8d, }, // 646\n-        {+0.48970574140548706d,   -1.8409546441412518E-8d, }, // 647\n-        {+0.49030399322509766d,   -5.179903818099661E-9d,  }, // 648\n-        {+0.4909018874168396d,    +7.97053127828682E-9d,   }, // 649\n-        {+0.4914994239807129d,    +2.146925464473481E-8d,  }, // 650\n-        {+0.4920966625213623d,    -2.3861648589988232E-8d, }, // 651\n-        {+0.4926934838294983d,    -8.386923035320549E-9d,  }, // 652\n-        {+0.4932899475097656d,    +8.713990131749256E-9d,  }, // 653\n-        {+0.4938860535621643d,    +2.7865534085810115E-8d, }, // 654\n-        {+0.4944818615913391d,    -1.011325138560159E-8d,  }, // 655\n-        {+0.4950772523880005d,    +1.4409851026316708E-8d, }, // 656\n-        {+0.495672345161438d,     -1.735227547472004E-8d,  }, // 657\n-        {+0.49626702070236206d,   +1.4231078209064581E-8d, }, // 658\n-        {+0.49686139822006226d,   -9.628709342929729E-9d,  }, // 659\n-        {+0.4974554181098938d,    -2.8907074856577267E-8d, }, // 660\n-        {+0.4980490207672119d,    +1.6419797090870802E-8d, }, // 661\n-        {+0.49864232540130615d,   +7.561041519403049E-9d,  }, // 662\n-        {+0.49923527240753174d,   +4.538983468118194E-9d,  }, // 663\n-        {+0.49982786178588867d,   +7.770560657946324E-9d,  }, // 664\n-        {+0.500420093536377d,     +1.767197002609876E-8d,  }, // 665\n-        {+0.5010119676589966d,    +3.46586694799214E-8d,   }, // 666\n-        {+0.5016034841537476d,    +5.914537964556077E-8d,  }, // 667\n-        {+0.5021947622299194d,    -2.7663203939320167E-8d, }, // 668\n-        {+0.5027855634689331d,    +1.3064749115929298E-8d, }, // 669\n-        {+0.5033761262893677d,    -5.667682106730711E-8d,  }, // 670\n-        {+0.503966212272644d,     +1.9424534974370594E-9d, }, // 671\n-        {+0.5045560598373413d,    -4.908494602153544E-8d,  }, // 672\n-        {+0.5051454305648804d,    +2.906989285008994E-8d,  }, // 673\n-        {+0.5057345628738403d,    -1.602000800745108E-9d,  }, // 674\n-        {+0.5063233375549316d,    -2.148245271118002E-8d,  }, // 675\n-        {+0.5069117546081543d,    -3.016329994276181E-8d,  }, // 676\n-        {+0.5074998140335083d,    -2.7237099632871992E-8d, }, // 677\n-        {+0.5080875158309937d,    -1.2297127301923986E-8d, }, // 678\n-        {+0.5086748600006104d,    +1.5062624834468093E-8d, }, // 679\n-        {+0.5092618465423584d,    +5.524744954836658E-8d,  }, // 680\n-        {+0.5098485946655273d,    -1.054736327333046E-8d,  }, // 681\n-        {+0.5104348659515381d,    +5.650063324725722E-8d,  }, // 682\n-        {+0.5110208988189697d,    +1.8376017791642605E-8d, }, // 683\n-        {+0.5116065740585327d,    -5.309470636324855E-9d,  }, // 684\n-        {+0.512191891670227d,     -1.4154089255217218E-8d, }, // 685\n-        {+0.5127768516540527d,    -7.756800301729815E-9d,  }, // 686\n-        {+0.5133614540100098d,    +1.4282730618002001E-8d, }, // 687\n-        {+0.5139456987380981d,    +5.2364136172269755E-8d, }, // 688\n-        {+0.5145297050476074d,    -1.2322940607922115E-8d, }, // 689\n-        {+0.5151132345199585d,    +5.903831350855322E-8d,  }, // 690\n-        {+0.5156965255737305d,    +2.8426856726994483E-8d, }, // 691\n-        {+0.5162794589996338d,    +1.544882070711032E-8d,  }, // 692\n-        {+0.5168620347976685d,    +2.0500353979930155E-8d, }, // 693\n-        {+0.5174442529678345d,    +4.397691311390564E-8d,  }, // 694\n-        {+0.5180262327194214d,    -3.2936025225250634E-8d, }, // 695\n-        {+0.5186077356338501d,    +2.857419553449673E-8d,  }, // 696\n-        {+0.5191890001296997d,    -9.51761338269325E-9d,   }, // 697\n-        {+0.5197699069976807d,    -2.7609457648450225E-8d, }, // 698\n-        {+0.520350456237793d,     -2.5309316441333305E-8d, }, // 699\n-        {+0.5209306478500366d,    -2.2258513086839407E-9d, }, // 700\n-        {+0.5215104818344116d,    +4.203159541613745E-8d,  }, // 701\n-        {+0.5220900774002075d,    -1.1356287358852729E-8d, }, // 702\n-        {+0.5226693153381348d,    -4.279090925831093E-8d,  }, // 703\n-        {+0.5232481956481934d,    -5.188364552285819E-8d,  }, // 704\n-        {+0.5238267183303833d,    -3.82465458937857E-8d,   }, // 705\n-        {+0.5244048833847046d,    -1.4923330530645769E-9d, }, // 706\n-        {+0.5249826908111572d,    +5.8765598932137004E-8d, }, // 707\n-        {+0.5255602598190308d,    +2.3703896609663678E-8d, }, // 708\n-        {+0.5261374711990356d,    +1.2917117341231647E-8d, }, // 709\n-        {+0.5267143249511719d,    +2.6789862192139226E-8d, }, // 710\n-        {+0.527290940284729d,     -5.350322253112414E-8d,  }, // 711\n-        {+0.5278670787811279d,    +1.0839714455426386E-8d, }, // 712\n-        {+0.5284429788589478d,    -1.821729591343314E-8d,  }, // 713\n-        {+0.5290185213088989d,    -2.1083014672301448E-8d, }, // 714\n-        {+0.5295937061309814d,    +2.623848491704216E-9d,  }, // 715\n-        {+0.5301685333251953d,    +5.328392630534142E-8d,  }, // 716\n-        {+0.5307431221008301d,    +1.206790586971942E-8d,  }, // 717\n-        {+0.5313173532485962d,    -1.4356011804377797E-9d, }, // 718\n-        {+0.5318912267684937d,    +1.3152074173459994E-8d, }, // 719\n-        {+0.5324647426605225d,    +5.6208949382936426E-8d, }, // 720\n-        {+0.5330380201339722d,    +8.90310227565917E-9d,   }, // 721\n-        {+0.5336109399795532d,    -9.179458802504127E-9d,  }, // 722\n-        {+0.5341835021972656d,    +2.337337845617735E-9d,  }, // 723\n-        {+0.5347557067871094d,    +4.3828918300477925E-8d, }, // 724\n-        {+0.535327672958374d,     -3.5392250480081715E-9d, }, // 725\n-        {+0.53589928150177d,      -2.0183663375378704E-8d, }, // 726\n-        {+0.5364705324172974d,    -5.730898606435436E-9d,  }, // 727\n-        {+0.537041425704956d,     +4.0191927599879235E-8d, }, // 728\n-        {+0.5376120805740356d,    -1.2522542401353875E-9d, }, // 729\n-        {+0.5381823778152466d,    -1.0482571326594316E-8d, }, // 730\n-        {+0.5387523174285889d,    +1.2871924223480165E-8d, }, // 731\n-        {+0.539322018623352d,     -5.002774317612589E-8d,  }, // 732\n-        {+0.539891242980957d,     +3.960668706590162E-8d,  }, // 733\n-        {+0.5404602289199829d,    +4.372568630242375E-8d,  }, // 734\n-        {+0.5410289764404297d,    -3.730232461206926E-8d,  }, // 735\n-        {+0.5415972471237183d,    +3.5309026109857795E-8d, }, // 736\n-        {+0.5421652793884277d,    +2.3508325311148225E-8d, }, // 737\n-        {+0.5427329540252686d,    +4.6871403168921666E-8d, }, // 738\n-        {+0.5433003902435303d,    -1.3445113140270216E-8d, }, // 739\n-        {+0.5438674688339233d,    -3.786663982218041E-8d,  }, // 740\n-        {+0.5444341897964478d,    -2.602850370608209E-8d,  }, // 741\n-        {+0.5450005531311035d,    +2.2433348713144506E-8d, }, // 742\n-        {+0.5455666780471802d,    -1.1326936872620137E-8d, }, // 743\n-        {+0.5461324453353882d,    -7.737252533211342E-9d,  }, // 744\n-        {+0.5466978549957275d,    +3.3564604642699844E-8d, }, // 745\n-        {+0.5472630262374878d,    -6.269066061111782E-9d,  }, // 746\n-        {+0.5478278398513794d,    -7.667998948729528E-9d,  }, // 747\n-        {+0.5483922958374023d,    +2.9728170818998143E-8d, }, // 748\n-        {+0.5489565134048462d,    -1.2930091396008281E-8d, }, // 749\n-        {+0.5495203733444214d,    -1.607434968107079E-8d,  }, // 750\n-        {+0.5500838756561279d,    +2.0653935146671156E-8d, }, // 751\n-        {+0.5506471395492554d,    -2.1596593091833788E-8d, }, // 752\n-        {+0.5512100458145142d,    -2.3259315921149476E-8d, }, // 753\n-        {+0.5517725944519043d,    +1.6022492496522704E-8d, }, // 754\n-        {+0.5523349046707153d,    -2.260433328226171E-8d,  }, // 755\n-        {+0.5528968572616577d,    -1.957497997726303E-8d,  }, // 756\n-        {+0.5534584522247314d,    +2.5465477111883854E-8d, }, // 757\n-        {+0.5540198087692261d,    -6.33792454933092E-9d,   }, // 758\n-        {+0.554580807685852d,     +4.577835263278281E-9d,  }, // 759\n-        {+0.5551414489746094d,    +5.856589221771548E-8d,  }, // 760\n-        {+0.5557018518447876d,    +3.6769498759522324E-8d, }, // 761\n-        {+0.5562618970870972d,    +5.874989409410614E-8d,  }, // 762\n-        {+0.5568217039108276d,    +5.649147309876989E-9d,  }, // 763\n-        {+0.5573811531066895d,    -2.9726830960751796E-9d, }, // 764\n-        {+0.5579402446746826d,    +3.323458344853057E-8d,  }, // 765\n-        {+0.5584990978240967d,    -4.588749093664028E-9d,  }, // 766\n-        {+0.5590575933456421d,    +3.115616594184543E-9d,  }, // 767\n-        {+0.5596157312393188d,    +5.6696103838614634E-8d, }, // 768\n-        {+0.5601736307144165d,    +3.7291263280048303E-8d, }, // 769\n-        {+0.5607312917709351d,    -5.4751646725093355E-8d, }, // 770\n-        {+0.5612884759902954d,    +1.9332630743320287E-8d, }, // 771\n-        {+0.5618454217910767d,    +2.147161515775941E-8d,  }, // 772\n-        {+0.5624021291732788d,    -4.7989172862560625E-8d, }, // 773\n-        {+0.5629583597183228d,    +4.971378973445109E-8d,  }, // 774\n-        {+0.5635144710540771d,    -4.2702997139152675E-8d, }, // 775\n-        {+0.5640701055526733d,    +3.273212962622764E-8d,  }, // 776\n-        {+0.5646255016326904d,    +3.79438125545842E-8d,   }, // 777\n-        {+0.5651806592941284d,    -2.6725298288329835E-8d, }, // 778\n-        {+0.5657354593276978d,    -4.1723833577410244E-8d, }, // 779\n-        {+0.5662899017333984d,    -6.71028256490915E-9d,   }, // 780\n-        {+0.56684410572052d,      -4.055299181908475E-8d,  }, // 781\n-        {+0.567397952079773d,     -2.3702295314000405E-8d, }, // 782\n-        {+0.5679514408111572d,    +4.4181618172507453E-8d, }, // 783\n-        {+0.5685046911239624d,    +4.4228706309734985E-8d, }, // 784\n-        {+0.5690577030181885d,    -2.3222346436879016E-8d, }, // 785\n-        {+0.5696103572845459d,    -3.862412756175274E-8d,  }, // 786\n-        {+0.5701626539230347d,    -1.6390743801589046E-9d, }, // 787\n-        {+0.5707147121429443d,    -3.1139472791083883E-8d, }, // 788\n-        {+0.5712664127349854d,    -7.579587391156013E-9d,  }, // 789\n-        {+0.5718178749084473d,    -4.983281844744412E-8d,  }, // 790\n-        {+0.5723689794540405d,    -3.835454246739619E-8d,  }, // 791\n-        {+0.5729197263717651d,    +2.7190020372374008E-8d, }, // 792\n-        {+0.5734702348709106d,    +2.7925807446276126E-8d, }, // 793\n-        {+0.574020504951477d,     -3.5813506001861646E-8d, }, // 794\n-        {+0.5745704174041748d,    -4.448550564530588E-8d,  }, // 795\n-        {+0.5751199722290039d,    +2.2423840341717488E-9d, }, // 796\n-        {+0.5756692886352539d,    -1.450709904687712E-8d,  }, // 797\n-        {+0.5762182474136353d,    +2.4806815282282017E-8d, }, // 798\n-        {+0.5767669677734375d,    +1.3057724436551892E-9d, }, // 799\n-        {+0.5773153305053711d,    +3.4529452510568104E-8d, }, // 800\n-        {+0.5778634548187256d,    +5.598413198183808E-9d,  }, // 801\n-        {+0.5784112215042114d,    +3.405124925700107E-8d,  }, // 802\n-        {+0.5789587497711182d,    +1.0074354568442952E-9d, }, // 803\n-        {+0.5795059204101562d,    +2.600448597385527E-8d,  }, // 804\n-        {+0.5800528526306152d,    -9.83920263200211E-9d,   }, // 805\n-        {+0.5805994272232056d,    +1.3012807963586057E-8d, }, // 806\n-        {+0.5811457633972168d,    -2.432215917965441E-8d,  }, // 807\n-        {+0.5816917419433594d,    -2.308736892479391E-9d,  }, // 808\n-        {+0.5822374820709229d,    -3.983067093146514E-8d,  }, // 809\n-        {+0.5827828645706177d,    -1.735366061128156E-8d,  }, // 810\n-        {+0.5833280086517334d,    -5.376251584638963E-8d,  }, // 811\n-        {+0.5838727951049805d,    -2.952399778965259E-8d,  }, // 812\n-        {+0.5844172239303589d,    +5.5685313670430624E-8d, }, // 813\n-        {+0.5849615335464478d,    -3.6230268489088716E-8d, }, // 814\n-        {+0.5855053663253784d,    +5.267948957869391E-8d,  }, // 815\n-        {+0.5860490798950195d,    -3.489144132234588E-8d,  }, // 816\n-        {+0.5865923166275024d,    +5.9006122320612716E-8d, }, // 817\n-        {+0.5871354341506958d,    -2.2934896740542648E-8d, }, // 818\n-        {+0.5876781940460205d,    -4.1975650319859075E-8d, }, // 819\n-        {+0.5882205963134766d,    +2.2036094805348692E-9d, }, // 820\n-        {+0.5887627601623535d,    -9.287179048539306E-9d,  }, // 821\n-        {+0.5893045663833618d,    +4.3079982556221595E-8d, }, // 822\n-        {+0.589846134185791d,     +4.041399585161321E-8d,  }, // 823\n-        {+0.5903874635696411d,    -1.696746473863933E-8d,  }, // 824\n-        {+0.5909284353256226d,    -9.53795080582038E-9d,   }, // 825\n-        {+0.5914691686630249d,    -5.619010749352923E-8d,  }, // 826\n-        {+0.5920095443725586d,    -3.7398514182529506E-8d, }, // 827\n-        {+0.5925495624542236d,    +4.71524479659295E-8d,   }, // 828\n-        {+0.5930894613265991d,    -4.0640692434639215E-8d, }, // 829\n-        {+0.5936288833618164d,    +5.716453096255401E-8d,  }, // 830\n-        {+0.5941681861877441d,    -1.6745661720946737E-8d, }, // 831\n-        {+0.5947071313858032d,    -2.3639110433141897E-8d, }, // 832\n-        {+0.5952457189559937d,    +3.67972590471072E-8d,   }, // 833\n-        {+0.595784068107605d,     +4.566672575206695E-8d,  }, // 834\n-        {+0.5963221788406372d,    +3.2813537149653483E-9d, }, // 835\n-        {+0.5968599319458008d,    +2.916199305533732E-8d,  }, // 836\n-        {+0.5973974466323853d,    +4.410412409109416E-9d,  }, // 837\n-        {+0.5979346036911011d,    +4.85464582112459E-8d,   }, // 838\n-        {+0.5984715223312378d,    +4.267089756924666E-8d,  }, // 839\n-        {+0.5990082025527954d,    -1.2906712010774655E-8d, }, // 840\n-        {+0.5995445251464844d,    +1.3319784467641742E-9d, }, // 841\n-        {+0.6000806093215942d,    -3.35137581974451E-8d,   }, // 842\n-        {+0.6006163358688354d,    +2.0734340706476473E-9d, }, // 843\n-        {+0.6011518239974976d,    -1.0808162722402073E-8d, }, // 844\n-        {+0.601686954498291d,     +4.735781872502109E-8d,  }, // 845\n-        {+0.6022218465805054d,    +5.76686738430634E-8d,   }, // 846\n-        {+0.6027565002441406d,    +2.043049589651736E-8d,  }, // 847\n-        {+0.6032907962799072d,    +5.515817703577808E-8d,  }, // 848\n-        {+0.6038248538970947d,    +4.2947540692649586E-8d, }, // 849\n-        {+0.6043586730957031d,    -1.589678872195875E-8d,  }, // 850\n-        {+0.6048921346664429d,    -1.8613847754677912E-9d, }, // 851\n-        {+0.6054253578186035d,    -3.3851886626187444E-8d, }, // 852\n-        {+0.6059582233428955d,    +7.64416021682279E-9d,   }, // 853\n-        {+0.6064908504486084d,    +3.7201467248814224E-9d, }, // 854\n-        {+0.6070232391357422d,    -4.532172996647129E-8d,  }, // 855\n-        {+0.6075552701950073d,    -1.997046552871766E-8d,  }, // 856\n-        {+0.6080870628356934d,    -3.913411606668587E-8d,  }, // 857\n-        {+0.6086184978485107d,    +1.6697361107868944E-8d, }, // 858\n-        {+0.609149694442749d,     +2.8614950293715483E-8d, }, // 859\n-        {+0.6096806526184082d,    -3.081552929643174E-9d,  }, // 860\n-        {+0.6102112531661987d,    +4.111645931319645E-8d,  }, // 861\n-        {+0.6107416152954102d,    +4.2298539553668435E-8d, }, // 862\n-        {+0.6112717390060425d,    +7.630546413718035E-10d, }, // 863\n-        {+0.6118015050888062d,    +3.601718675118614E-8d,  }, // 864\n-        {+0.6123310327529907d,    +2.914906573537692E-8d,  }, // 865\n-        {+0.6128603219985962d,    -1.9544361222269494E-8d, }, // 866\n-        {+0.613389253616333d,     +9.442671392695732E-9d,  }, // 867\n-        {+0.6139179468154907d,    -2.8031202304593286E-9d, }, // 868\n-        {+0.6144464015960693d,    -5.598619958143586E-8d,  }, // 869\n-        {+0.6149744987487793d,    -3.060220883766096E-8d,  }, // 870\n-        {+0.6155023574829102d,    -4.556583652800433E-8d,  }, // 871\n-        {+0.6160298585891724d,    +1.8626341656366314E-8d, }, // 872\n-        {+0.6165571212768555d,    +4.305870564227991E-8d,  }, // 873\n-        {+0.6170841455459595d,    +2.8024460607734262E-8d, }, // 874\n-        {+0.6176109313964844d,    -2.6183651590639875E-8d, }, // 875\n-        {+0.6181373596191406d,    -6.406189112730307E-11d, }, // 876\n-        {+0.6186635494232178d,    -1.2534241706168776E-8d, }, // 877\n-        {+0.6191893815994263d,    +5.5906456251308664E-8d, }, // 878\n-        {+0.6197150945663452d,    -3.286964881802063E-8d,  }, // 879\n-        {+0.6202404499053955d,    -4.0153537978961E-8d,    }, // 880\n-        {+0.6207654476165771d,    +3.434477109643361E-8d,  }, // 881\n-        {+0.6212903261184692d,    -4.750377491075032E-8d,  }, // 882\n-        {+0.6218148469924927d,    -4.699152670372743E-8d,  }, // 883\n-        {+0.6223390102386475d,    +3.617013128065961E-8d,  }, // 884\n-        {+0.6228630542755127d,    -3.6149218175202596E-8d, }, // 885\n-        {+0.6233867406845093d,    -2.5243286814648133E-8d, }, // 886\n-        {+0.6239101886749268d,    -5.003410681432538E-8d,  }, // 887\n-        {+0.6244332790374756d,    +8.974417915105033E-9d,  }, // 888\n-        {+0.6249561309814453d,    +3.285935446876949E-8d,  }, // 889\n-        {+0.6254787445068359d,    +2.190661054038537E-8d,  }, // 890\n-        {+0.6260011196136475d,    -2.3598354190515998E-8d, }, // 891\n-        {+0.6265231370925903d,    +1.5838762427747586E-8d, }, // 892\n-        {+0.6270449161529541d,    +2.129323729978037E-8d,  }, // 893\n-        {+0.6275664567947388d,    -6.950808333865794E-9d,  }, // 894\n-        {+0.6280876398086548d,    +5.059959203156465E-8d,  }, // 895\n-        {+0.6286087036132812d,    -4.41909071122557E-8d,   }, // 896\n-        {+0.6291294097900391d,    -5.262093550784066E-8d,  }, // 897\n-        {+0.6296497583389282d,    +2.559185648444699E-8d,  }, // 898\n-        {+0.6301699876785278d,    -4.768920119497491E-8d,  }, // 899\n-        {+0.6306898593902588d,    -3.376406008397877E-8d,  }, // 900\n-        {+0.6312094926834106d,    -5.156097914033476E-8d,  }, // 901\n-        {+0.6317287683486938d,    +1.840992392368355E-8d,  }, // 902\n-        {+0.632247805595398d,     +5.721951534729663E-8d,  }, // 903\n-        {+0.6327667236328125d,    -5.406177467045421E-8d,  }, // 904\n-        {+0.6332851648330688d,    +4.247320713683124E-8d,  }, // 905\n-        {+0.6338034868240356d,    -1.0524557502830645E-8d, }, // 906\n-        {+0.6343214511871338d,    +2.5641927558519502E-8d, }, // 907\n-        {+0.6348391771316528d,    +3.204135737993823E-8d,  }, // 908\n-        {+0.6353566646575928d,    +8.951285029786536E-9d,  }, // 909\n-        {+0.6358739137649536d,    -4.335116707228395E-8d,  }, // 910\n-        {+0.6363908052444458d,    -5.380016714089483E-9d,  }, // 911\n-        {+0.6369074583053589d,    +3.931710344901743E-9d,  }, // 912\n-        {+0.6374238729476929d,    -1.5140150088220166E-8d, }, // 913\n-        {+0.6379399299621582d,    +5.688910024377372E-8d,  }, // 914\n-        {+0.638455867767334d,     -1.8124135273572568E-8d, }, // 915\n-        {+0.6389714479446411d,    -1.486720391901626E-9d,  }, // 916\n-        {+0.6394867897033691d,    -1.2133811978747018E-8d, }, // 917\n-        {+0.6400018930435181d,    -4.9791700939901716E-8d, }, // 918\n-        {+0.6405166387557983d,    +5.022188652837274E-9d,  }, // 919\n-        {+0.6410311460494995d,    +3.337143177933685E-8d,  }, // 920\n-        {+0.6415454149246216d,    +3.55284719912458E-8d,   }, // 921\n-        {+0.6420594453811646d,    +1.1765332726757802E-8d, }, // 922\n-        {+0.6425732374191284d,    -3.7646381826067834E-8d, }, // 923\n-        {+0.6430866718292236d,    +6.773803682579552E-9d,  }, // 924\n-        {+0.6435998678207397d,    +2.608736797081283E-8d,  }, // 925\n-        {+0.6441128253936768d,    +2.056466263408266E-8d,  }, // 926\n-        {+0.6446255445480347d,    -9.524376551107945E-9d,  }, // 927\n-        {+0.6451379060745239d,    +5.5299060775883977E-8d, }, // 928\n-        {+0.6456501483917236d,    -2.3114497793159813E-8d, }, // 929\n-        {+0.6461620330810547d,    -6.077779731902102E-9d,  }, // 930\n-        {+0.6466736793518066d,    -1.2531793589140273E-8d, }, // 931\n-        {+0.6471850872039795d,    -4.220866994206517E-8d,  }, // 932\n-        {+0.6476961374282837d,    +2.4368339445199057E-8d, }, // 933\n-        {+0.6482070684432983d,    -5.095229574221907E-8d,  }, // 934\n-        {+0.6487176418304443d,    -2.9485356677301627E-8d, }, // 935\n-        {+0.6492279767990112d,    -3.0173901411577916E-8d, }, // 936\n-        {+0.649738073348999d,     -5.275210583909726E-8d,  }, // 937\n-        {+0.6502478122711182d,    +2.2254737134350224E-8d, }, // 938\n-        {+0.6507574319839478d,    -4.330693978322885E-8d,  }, // 939\n-        {+0.6512666940689087d,    -1.0753950588009912E-8d, }, // 940\n-        {+0.6517757177352905d,    +9.686179886293545E-10d, }, // 941\n-        {+0.6522845029830933d,    -7.875434494414498E-9d,  }, // 942\n-        {+0.6527930498123169d,    -3.702271091849158E-8d,  }, // 943\n-        {+0.6533012390136719d,    +3.2999073763758614E-8d, }, // 944\n-        {+0.6538093090057373d,    -3.5966064858620067E-8d, }, // 945\n-        {+0.6543170213699341d,    -5.23735298540578E-9d,   }, // 946\n-        {+0.6548244953155518d,    +6.237715351293023E-9d,  }, // 947\n-        {+0.6553317308425903d,    -1.279462699936282E-9d,  }, // 948\n-        {+0.6558387279510498d,    -2.7527887552743672E-8d, }, // 949\n-        {+0.6563453674316406d,    +4.696233317356646E-8d,  }, // 950\n-        {+0.6568518877029419d,    -1.5967172745329108E-8d, }, // 951\n-        {+0.6573580503463745d,    +2.2361985518423144E-8d, }, // 952\n-        {+0.657863974571228d,     +4.2999935789083046E-8d, }, // 953\n-        {+0.6583696603775024d,    +4.620570188811826E-8d,  }, // 954\n-        {+0.6588751077651978d,    +3.223791487908353E-8d,  }, // 955\n-        {+0.659380316734314d,     +1.3548138612715822E-9d, }, // 956\n-        {+0.6598852872848511d,    -4.618575323863973E-8d,  }, // 957\n-        {+0.6603899002075195d,    +9.082960673843353E-9d,  }, // 958\n-        {+0.6608942747116089d,    +4.820873399634487E-8d,  }, // 959\n-        {+0.6613985300064087d,    -4.776104368314602E-8d,  }, // 960\n-        {+0.6619024276733398d,    -4.0151502150238136E-8d, }, // 961\n-        {+0.6624060869216919d,    -4.791602708710648E-8d,  }, // 962\n-        {+0.6629093885421753d,    +4.8410188461165925E-8d, }, // 963\n-        {+0.6634125709533691d,    +1.0663697110471944E-8d, }, // 964\n-        {+0.6639155149459839d,    -4.1691464781797555E-8d, }, // 965\n-        {+0.66441810131073d,      +1.080835500478704E-8d,  }, // 966\n-        {+0.664920449256897d,     +4.920784622407246E-8d,  }, // 967\n-        {+0.6654226779937744d,    -4.544868396511241E-8d,  }, // 968\n-        {+0.6659245491027832d,    -3.448944157854234E-8d,  }, // 969\n-        {+0.6664261817932129d,    -3.6870882345139385E-8d, }, // 970\n-        {+0.6669275760650635d,    -5.234055273962444E-8d,  }, // 971\n-        {+0.6674286127090454d,    +3.856291077979099E-8d,  }, // 972\n-        {+0.6679295301437378d,    -2.327375671320742E-9d,  }, // 973\n-        {+0.6684302091598511d,    -5.555080534042001E-8d,  }, // 974\n-        {+0.6689305305480957d,    -1.6471487337453832E-9d, }, // 975\n-        {+0.6694306135177612d,    +4.042486803683015E-8d,  }, // 976\n-        {+0.6699305772781372d,    -4.8293856891818295E-8d, }, // 977\n-        {+0.6704301834106445d,    -2.9134931730784303E-8d, }, // 978\n-        {+0.6709295511245728d,    -2.1058207594753368E-8d, }, // 979\n-        {+0.6714286804199219d,    -2.3814619551682855E-8d, }, // 980\n-        {+0.6719275712966919d,    -3.7155475428252136E-8d, }, // 981\n-        {+0.6724261045455933d,    +5.8376834484391746E-8d, }, // 982\n-        {+0.6729245185852051d,    +2.4611679969129262E-8d, }, // 983\n-        {+0.6734226942062378d,    -1.899407107267079E-8d,  }, // 984\n-        {+0.6739205121994019d,    +4.7016079464436395E-8d, }, // 985\n-        {+0.6744182109832764d,    -1.5529608026276525E-8d, }, // 986\n-        {+0.6749155521392822d,    +3.203391672602453E-8d,  }, // 987\n-        {+0.6754127740859985d,    -4.8465821804075345E-8d, }, // 988\n-        {+0.6759096384048462d,    -1.8364507801369988E-8d, }, // 989\n-        {+0.6764062643051147d,    +3.3739397633046517E-9d, }, // 990\n-        {+0.6769026517868042d,    +1.6994526063192333E-8d, }, // 991\n-        {+0.6773988008499146d,    +2.2741891590028428E-8d, }, // 992\n-        {+0.6778947114944458d,    +2.0860312877435047E-8d, }, // 993\n-        {+0.678390383720398d,     +1.1593703222523284E-8d, }, // 994\n-        {+0.678885817527771d,     -4.814386594291911E-9d,  }, // 995\n-        {+0.6793810129165649d,    -2.812076759125914E-8d,  }, // 996\n-        {+0.6798759698867798d,    -5.808261186903479E-8d,  }, // 997\n-        {+0.680370569229126d,     +2.4751837654582522E-8d, }, // 998\n-        {+0.6808650493621826d,    -1.7793890245755405E-8d, }, // 999\n-        {+0.6813591718673706d,    +5.294053246347931E-8d,  }, // 1000\n-        {+0.681853175163269d,     -1.2220826223585654E-9d, }, // 1001\n-        {+0.6823468208312988d,    +5.8377876767612725E-8d, }, // 1002\n-        {+0.6828403472900391d,    -6.437492120743254E-9d,  }, // 1003\n-        {+0.6833335161209106d,    +4.2990710043633113E-8d, }, // 1004\n-        {+0.6838265657424927d,    -3.1516131027023284E-8d, }, // 1005\n-        {+0.684319257736206d,     +8.70017386744679E-9d,   }, // 1006\n-        {+0.6848117113113403d,    +4.466959125843237E-8d,  }, // 1007\n-        {+0.6853040456771851d,    -4.25782656420497E-8d,   }, // 1008\n-        {+0.6857960224151611d,    -1.4386267593671393E-8d, }, // 1009\n-        {+0.6862877607345581d,    +1.0274494061148778E-8d, }, // 1010\n-        {+0.686779260635376d,     +3.164186629229597E-8d,  }, // 1011\n-        {+0.6872705221176147d,    +4.995334552140326E-8d,  }, // 1012\n-        {+0.687761664390564d,     -5.3763211240398744E-8d, }, // 1013\n-        {+0.6882524490356445d,    -4.0852427502515625E-8d, }, // 1014\n-        {+0.688742995262146d,     -3.0287143914420064E-8d, }, // 1015\n-        {+0.6892333030700684d,    -2.183125937905008E-8d,  }, // 1016\n-        {+0.6897233724594116d,    -1.524901992178814E-8d,  }, // 1017\n-        {+0.6902132034301758d,    -1.0305018010328949E-8d, }, // 1018\n-        {+0.6907027959823608d,    -6.764191876212205E-9d,  }, // 1019\n-        {+0.6911921501159668d,    -4.391824838015402E-9d,  }, // 1020\n-        {+0.6916812658309937d,    -2.9535446262017846E-9d, }, // 1021\n-        {+0.6921701431274414d,    -2.2153227096187463E-9d, }, // 1022\n-        {+0.6926587820053101d,    -1.943473623641502E-9d,  }, // 1023\n-                  };\n-              }\n-          }\n-      }\n-\n-    /** log(2) (high bits). */\n-    private static final double LN_2_A = 0.693147063255310059;\n-\n-    /** log(2) (low bits). */\n-    private static final double LN_2_B = 1.17304635250823482e-7;\n-\n-    /** Coefficients for log, when input 0.99 < x < 1.01. */\n-    private static final double LN_QUICK_COEF[][] = {\n-        {1.0, 5.669184079525E-24},\n-        {-0.25, -0.25},\n-        {0.3333333134651184, 1.986821492305628E-8},\n-        {-0.25, -6.663542893624021E-14},\n-        {0.19999998807907104, 1.1921056801463227E-8},\n-        {-0.1666666567325592, -7.800414592973399E-9},\n-        {0.1428571343421936, 5.650007086920087E-9},\n-        {-0.12502530217170715, -7.44321345601866E-11},\n-        {0.11113807559013367, 9.219544613762692E-9},\n-    };\n-\n-    /** Coefficients for log in the range of 1.0 < x < 1.0 + 2^-10. */\n-    private static final double LN_HI_PREC_COEF[][] = {\n-        {1.0, -6.032174644509064E-23},\n-        {-0.25, -0.25},\n-        {0.3333333134651184, 1.9868161777724352E-8},\n-        {-0.2499999701976776, -2.957007209750105E-8},\n-        {0.19999954104423523, 1.5830993332061267E-10},\n-        {-0.16624879837036133, -2.6033824355191673E-8}\n-    };\n-\n-    /** Sine, Cosine, Tangent tables are for 0, 1/8, 2/8, ... 13/8 = PI/2 approx. */\n-    private static final int SINE_TABLE_LEN = 14;\n-    \n-    /** Sine table (high bits). */\n-    private static final double SINE_TABLE_A[] =\n-        {\n-        +0.0d,\n-        +0.1246747374534607d,\n-        +0.24740394949913025d,\n-        +0.366272509098053d,\n-        +0.4794255495071411d,\n-        +0.5850973129272461d,\n-        +0.6816387176513672d,\n-        +0.7675435543060303d,\n-        +0.8414709568023682d,\n-        +0.902267575263977d,\n-        +0.9489846229553223d,\n-        +0.9808930158615112d,\n-        +0.9974949359893799d,\n-        +0.9985313415527344d,\n-    };\n-\n-    /** Sine table (low bits). */\n-    private static final double SINE_TABLE_B[] =\n-        {\n-        +0.0d,\n-        -4.068233003401932E-9d,\n-        +9.755392680573412E-9d,\n-        +1.9987994582857286E-8d,\n-        -1.0902938113007961E-8d,\n-        -3.9986783938944604E-8d,\n-        +4.23719669792332E-8d,\n-        -5.207000323380292E-8d,\n-        +2.800552834259E-8d,\n-        +1.883511811213715E-8d,\n-        -3.5997360512765566E-9d,\n-        +4.116164446561962E-8d,\n-        +5.0614674548127384E-8d,\n-        -1.0129027912496858E-9d,\n-    };\n-\n-    /** Cosine table (high bits). */\n-    private static final double COSINE_TABLE_A[] =\n-        {\n-        +1.0d,\n-        +0.9921976327896118d,\n-        +0.9689123630523682d,\n-        +0.9305076599121094d,\n-        +0.8775825500488281d,\n-        +0.8109631538391113d,\n-        +0.7316888570785522d,\n-        +0.6409968137741089d,\n-        +0.5403022766113281d,\n-        +0.4311765432357788d,\n-        +0.3153223395347595d,\n-        +0.19454771280288696d,\n-        +0.07073719799518585d,\n-        -0.05417713522911072d,\n-    };\n-\n-    /** Cosine table (low bits). */\n-    private static final double COSINE_TABLE_B[] =\n-        {\n-        +0.0d,\n-        +3.4439717236742845E-8d,\n-        +5.865827662008209E-8d,\n-        -3.7999795083850525E-8d,\n-        +1.184154459111628E-8d,\n-        -3.43338934259355E-8d,\n-        +1.1795268640216787E-8d,\n-        +4.438921624363781E-8d,\n-        +2.925681159240093E-8d,\n-        -2.6437112632041807E-8d,\n-        +2.2860509143963117E-8d,\n-        -4.813899778443457E-9d,\n-        +3.6725170580355583E-9d,\n-        +2.0217439756338078E-10d,\n-    };\n-\n-\n-    /** Tangent table, used by atan() (high bits). */\n-    private static final double TANGENT_TABLE_A[] =\n-        {\n-        +0.0d,\n-        +0.1256551444530487d,\n-        +0.25534194707870483d,\n-        +0.3936265707015991d,\n-        +0.5463024377822876d,\n-        +0.7214844226837158d,\n-        +0.9315965175628662d,\n-        +1.1974215507507324d,\n-        +1.5574076175689697d,\n-        +2.092571258544922d,\n-        +3.0095696449279785d,\n-        +5.041914939880371d,\n-        +14.101419448852539d,\n-        -18.430862426757812d,\n-    };\n-\n-    /** Tangent table, used by atan() (low bits). */\n-    private static final double TANGENT_TABLE_B[] =\n-        {\n-        +0.0d,\n-        -7.877917738262007E-9d,\n-        -2.5857668567479893E-8d,\n-        +5.2240336371356666E-9d,\n-        +5.206150291559893E-8d,\n-        +1.8307188599677033E-8d,\n-        -5.7618793749770706E-8d,\n-        +7.848361555046424E-8d,\n-        +1.0708593250394448E-7d,\n-        +1.7827257129423813E-8d,\n-        +2.893485277253286E-8d,\n-        +3.1660099222737955E-7d,\n-        +4.983191803254889E-7d,\n-        -3.356118100840571E-7d,\n-    };\n-\n-    /** Bits of 1/(2*pi), need for reducePayneHanek(). */\n-    private static final long RECIP_2PI[] = new long[] {\n-        (0x28be60dbL << 32) | 0x9391054aL,\n-        (0x7f09d5f4L << 32) | 0x7d4d3770L,\n-        (0x36d8a566L << 32) | 0x4f10e410L,\n-        (0x7f9458eaL << 32) | 0xf7aef158L,\n-        (0x6dc91b8eL << 32) | 0x909374b8L,\n-        (0x01924bbaL << 32) | 0x82746487L,\n-        (0x3f877ac7L << 32) | 0x2c4a69cfL,\n-        (0xba208d7dL << 32) | 0x4baed121L,\n-        (0x3a671c09L << 32) | 0xad17df90L,\n-        (0x4e64758eL << 32) | 0x60d4ce7dL,\n-        (0x272117e2L << 32) | 0xef7e4a0eL,\n-        (0xc7fe25ffL << 32) | 0xf7816603L,\n-        (0xfbcbc462L << 32) | 0xd6829b47L,\n-        (0xdb4d9fb3L << 32) | 0xc9f2c26dL,\n-        (0xd3d18fd9L << 32) | 0xa797fa8bL,\n-        (0x5d49eeb1L << 32) | 0xfaf97c5eL,\n-        (0xcf41ce7dL << 32) | 0xe294a4baL,\n-         0x9afed7ecL << 32  };\n-\n-    /** Bits of pi/4, need for reducePayneHanek(). */\n-    private static final long PI_O_4_BITS[] = new long[] {\n-        (0xc90fdaa2L << 32) | 0x2168c234L,\n-        (0xc4c6628bL << 32) | 0x80dc1cd1L };\n-\n-    /** Eighths.\n-     * This is used by sinQ, because its faster to do a table lookup than\n-     * a multiply in this time-critical routine\n-     */\n-    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};\n-\n-    /** Table of 2^((n+2)/3) */\n-    private static final double CBRTTWO[] = { 0.6299605249474366,\n-                                            0.7937005259840998,\n-                                            1.0,\n-                                            1.2599210498948732,\n-                                            1.5874010519681994 };\n-\n-    /*\n-     *  There are 52 bits in the mantissa of a double.\n-     *  For additional precision, the code splits double numbers into two parts,\n-     *  by clearing the low order 30 bits if possible, and then performs the arithmetic\n-     *  on each half separately.\n-     */\n-\n-    /**\n-     * 0x40000000 - used to split a double into two parts, both with the low order bits cleared.\n-     * Equivalent to 2^30.\n-     */\n-    private static final long HEX_40000000 = 0x40000000L; // 1073741824L\n-\n-    /** Mask used to clear low order 30 bits */\n-    private static final long MASK_30BITS = -1L - (HEX_40000000 -1); // 0xFFFFFFFFC0000000L;\n-\n-    /** 2^52 - double numbers this large must be integral (no fraction) or NaN or Infinite */\n-    private static final double TWO_POWER_52 = 4503599627370496.0;\n-    \n-    // Initialize tables\n-    // static {\n-    //   if (USE_PRECOMPUTED_TABLES) { // suppress table initialisation as now hard-coded\n-    //     int i;\n-\n-    //     // Build the sine and cosine tables\n-    //     buildSinCosTables();\n-    //   }\n-    // }\n-\n-    public static void main(String[] a){\n-        FastMathCalc.printarray(\"EXP_INT_TABLE_A\", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);\n-        FastMathCalc.printarray(\"EXP_INT_TABLE_B\", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);\n-        FastMathCalc.printarray(\"EXP_FRAC_TABLE_A\", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);\n-        FastMathCalc.printarray(\"EXP_FRAC_TABLE_B\", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);\n-        FastMathCalc.printarray(\"LN_MANT\",LN_MANT_LEN, lnMant.LN_MANT);\n-        FastMathCalc.printarray(\"SINE_TABLE_A\", SINE_TABLE_LEN, SINE_TABLE_A);\n-        FastMathCalc.printarray(\"SINE_TABLE_B\", SINE_TABLE_LEN, SINE_TABLE_B);\n-        FastMathCalc.printarray(\"COSINE_TABLE_A\", SINE_TABLE_LEN, COSINE_TABLE_A);\n-        FastMathCalc.printarray(\"COSINE_TABLE_B\", SINE_TABLE_LEN, COSINE_TABLE_B);\n-        FastMathCalc.printarray(\"TANGENT_TABLE_A\", SINE_TABLE_LEN, TANGENT_TABLE_A);\n-        FastMathCalc.printarray(\"TANGENT_TABLE_B\", SINE_TABLE_LEN, TANGENT_TABLE_B);\n-    }\n-\n-    /**\n-     * Private Constructor\n-     */\n-    private FastMath() {\n-    }\n-\n-    // Generic helper methods\n-\n-    /**\n-     * Get the high order bits from the mantissa.\n-     * Equivalent to adding and subtracting HEX_40000 but also works for very large numbers\n-     *\n-     * @param d the value to split\n-     * @return the high order part of the mantissa\n-     */\n-    private static double doubleHighPart(double d) {\n-        if (d > -MathUtils.SAFE_MIN && d < MathUtils.SAFE_MIN){\n-            return d; // These are un-normalised - don't try to convert\n-        }\n-        long xl = Double.doubleToLongBits(d);\n-        xl = xl & MASK_30BITS; // Drop low order bits\n-        return Double.longBitsToDouble(xl);\n-    }\n-\n-    /** Compute the square root of a number.\n-     * <p><b>Note:</b> this implementation currently delegates to {@link Math#sqrt}\n-     * @param a number on which evaluation is done\n-     * @return square root of a\n-     */\n-    public static double sqrt(final double a) {\n-        return Math.sqrt(a);\n-    }\n-\n-    /** Compute the hyperbolic cosine of a number.\n-     * @param x number on which evaluation is done\n-     * @return hyperbolic cosine of x\n-     */\n-    public static double cosh(double x) {\n-      if (x != x) {\n-          return x;\n-      }\n-\n-      // cosh[z] = (exp(z) + exp(-z))/2\n-\n-      // for numbers with magnitude 20 or so, \n-      // exp(-z) can be ignored in comparison with exp(z)\n-\n-      if (x > 20.0) {\n-          return exp(x)/2.0;\n-      }\n-\n-      if (x < -20) {\n-          return exp(-x)/2.0;\n-      }\n-\n-      double hiPrec[] = new double[2];\n-      if (x < 0.0) {\n-          x = -x;\n-      }\n-      exp(x, 0.0, hiPrec);\n-\n-      double ya = hiPrec[0] + hiPrec[1];\n-      double yb = -(ya - hiPrec[0] - hiPrec[1]);\n-\n-      double temp = ya * HEX_40000000;\n-      double yaa = ya + temp - temp;\n-      double yab = ya - yaa;\n-\n-      // recip = 1/y\n-      double recip = 1.0/ya;\n-      temp = recip * HEX_40000000;\n-      double recipa = recip + temp - temp;\n-      double recipb = recip - recipa;\n-\n-      // Correct for rounding in division\n-      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;\n-      // Account for yb\n-      recipb += -yb * recip * recip;\n-\n-      // y = y + 1/y\n-      temp = ya + recipa;\n-      yb += -(temp - ya - recipa);\n-      ya = temp;\n-      temp = ya + recipb;\n-      yb += -(temp - ya - recipb);\n-      ya = temp;\n-\n-      double result = ya + yb;\n-      result *= 0.5;\n-      return result;\n-    }\n-\n-    /** Compute the hyperbolic sine of a number.\n-     * @param x number on which evaluation is done\n-     * @return hyperbolic sine of x\n-     */\n-    public static double sinh(double x) {\n-      boolean negate = false;\n-      if (x != x) {\n-          return x;\n-      }\n-\n-      // sinh[z] = (exp(z) - exp(-z) / 2\n-      \n-      // for values of z larger than about 20, \n-      // exp(-z) can be ignored in comparison with exp(z)\n-      \n-      if (x > 20.0) {\n-          return exp(x)/2.0;\n-      }\n-\n-      if (x < -20) {\n-          return -exp(-x)/2.0;\n-      }\n-\n-      if (x == 0) {\n-          return x;\n-      }\n-\n-      if (x < 0.0) {\n-          x = -x;\n-          negate = true;\n-      }\n-\n-      double result;\n-\n-      if (x > 0.25) {\n-          double hiPrec[] = new double[2];\n-          exp(x, 0.0, hiPrec);\n-\n-          double ya = hiPrec[0] + hiPrec[1];\n-          double yb = -(ya - hiPrec[0] - hiPrec[1]);\n-\n-          double temp = ya * HEX_40000000;\n-          double yaa = ya + temp - temp;\n-          double yab = ya - yaa;\n-\n-          // recip = 1/y\n-          double recip = 1.0/ya;\n-          temp = recip * HEX_40000000;\n-          double recipa = recip + temp - temp;\n-          double recipb = recip - recipa;\n-\n-          // Correct for rounding in division\n-          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;\n-          // Account for yb\n-          recipb += -yb * recip * recip;\n-\n-          recipa = -recipa;\n-          recipb = -recipb;\n-\n-          // y = y + 1/y\n-          temp = ya + recipa;\n-          yb += -(temp - ya - recipa);\n-          ya = temp;\n-          temp = ya + recipb;\n-          yb += -(temp - ya - recipb);\n-          ya = temp;\n-\n-          result = ya + yb;\n-          result *= 0.5;\n-      }\n-      else {\n-          double hiPrec[] = new double[2];\n-          expm1(x, hiPrec);\n-\n-          double ya = hiPrec[0] + hiPrec[1];\n-          double yb = -(ya - hiPrec[0] - hiPrec[1]);\n-\n-          /* Compute expm1(-x) = -expm1(x) / (expm1(x) + 1) */\n-          double denom = 1.0 + ya;\n-          double denomr = 1.0 / denom;\n-          double denomb = -(denom - 1.0 - ya) + yb;\n-          double ratio = ya * denomr;\n-          double temp = ratio * HEX_40000000;\n-          double ra = ratio + temp - temp;\n-          double rb = ratio - ra;\n-\n-          temp = denom * HEX_40000000;\n-          double za = denom + temp - temp;\n-          double zb = denom - za;\n-\n-          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;\n-\n-          // Adjust for yb\n-          rb += yb*denomr;                        // numerator\n-          rb += -ya * denomb * denomr * denomr;   // denominator\n-\n-          // y = y - 1/y\n-          temp = ya + ra;\n-          yb += -(temp - ya - ra);\n-          ya = temp;\n-          temp = ya + rb;\n-          yb += -(temp - ya - rb);\n-          ya = temp;\n-\n-          result = ya + yb;\n-          result *= 0.5;\n-      }\n-\n-      if (negate) {\n-          result = -result;\n-      }\n-\n-      return result;\n-    }\n-\n-    /** Compute the hyperbolic tangent of a number.\n-     * @param x number on which evaluation is done\n-     * @return hyperbolic tangent of x\n-     */\n-    public static double tanh(double x) {\n-      boolean negate = false;\n-\n-      if (x != x) {\n-          return x;\n-      }\n-\n-      // tanh[z] = sinh[z] / cosh[z] \n-      // = (exp(z) - exp(-z)) / (exp(z) + exp(-z))\n-      // = (exp(2x) - 1) / (exp(2x) + 1)\n-      \n-      // for magnitude > 20, sinh[z] == cosh[z] in double precision\n-\n-      if (x > 20.0) {\n-          return 1.0;\n-      }\n-\n-      if (x < -20) {\n-          return -1.0;\n-      }\n-\n-      if (x == 0) {\n-          return x;\n-      }\n-\n-      if (x < 0.0) {\n-          x = -x;\n-          negate = true;\n-      }\n-\n-      double result;\n-      if (x >= 0.5) {\n-          double hiPrec[] = new double[2];\n-          // tanh(x) = (exp(2x) - 1) / (exp(2x) + 1)\n-          exp(x*2.0, 0.0, hiPrec);\n-\n-          double ya = hiPrec[0] + hiPrec[1];\n-          double yb = -(ya - hiPrec[0] - hiPrec[1]);\n-\n-          /* Numerator */\n-          double na = -1.0 + ya;\n-          double nb = -(na + 1.0 - ya);\n-          double temp = na + yb;\n-          nb += -(temp - na - yb);\n-          na = temp;\n-\n-          /* Denominator */\n-          double da = 1.0 + ya;\n-          double db = -(da - 1.0 - ya);\n-          temp = da + yb;\n-          db += -(temp - da - yb);\n-          da = temp;\n-\n-          temp = da * HEX_40000000;\n-          double daa = da + temp - temp;\n-          double dab = da - daa;\n-\n-          // ratio = na/da\n-          double ratio = na/da;\n-          temp = ratio * HEX_40000000;\n-          double ratioa = ratio + temp - temp;\n-          double ratiob = ratio - ratioa;\n-\n-          // Correct for rounding in division\n-          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;\n-\n-          // Account for nb\n-          ratiob += nb / da;\n-          // Account for db\n-          ratiob += -db * na / da / da;\n-\n-          result = ratioa + ratiob;\n-      }\n-      else {\n-          double hiPrec[] = new double[2];\n-          // tanh(x) = expm1(2x) / (expm1(2x) + 2)\n-          expm1(x*2.0, hiPrec);\n-\n-          double ya = hiPrec[0] + hiPrec[1];\n-          double yb = -(ya - hiPrec[0] - hiPrec[1]);\n-\n-          /* Numerator */\n-          double na = ya;\n-          double nb = yb;\n-\n-          /* Denominator */\n-          double da = 2.0 + ya;\n-          double db = -(da - 2.0 - ya);\n-          double temp = da + yb;\n-          db += -(temp - da - yb);\n-          da = temp;\n-\n-          temp = da * HEX_40000000;\n-          double daa = da + temp - temp;\n-          double dab = da - daa;\n-\n-          // ratio = na/da\n-          double ratio = na/da;\n-          temp = ratio * HEX_40000000;\n-          double ratioa = ratio + temp - temp;\n-          double ratiob = ratio - ratioa;\n-\n-          // Correct for rounding in division\n-          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;\n-\n-          // Account for nb\n-          ratiob += nb / da;\n-          // Account for db\n-          ratiob += -db * na / da / da;\n-\n-          result = ratioa + ratiob;\n-      }\n-\n-      if (negate) {\n-          result = -result;\n-      }\n-\n-      return result;\n-    }\n-\n-    /** Compute the inverse hyperbolic cosine of a number.\n-     * @param a number on which evaluation is done\n-     * @return inverse hyperbolic cosine of a\n-     */\n-    public static double acosh(final double a) {\n-        return FastMath.log(a + FastMath.sqrt(a * a - 1));\n-    }\n-\n-    /** Compute the inverse hyperbolic sine of a number.\n-     * @param a number on which evaluation is done\n-     * @return inverse hyperbolic sine of a\n-     */\n-    public static double asinh(double a) {\n-\n-        boolean negative = false;\n-        if (a < 0) {\n-            negative = true;\n-            a = -a;\n-        }\n-\n-        double absAsinh;\n-        if (a > 0.167) {\n-            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);\n-        } else {\n-            final double a2 = a * a;\n-            if (a > 0.097) {\n-                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);\n-            } else if (a > 0.036) {\n-                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);\n-            } else if (a > 0.0036) {\n-                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);\n-            } else {\n-                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0) * 3.0 / 4.0) / 2.0);\n-            }\n-        }\n-\n-        return negative ? -absAsinh : absAsinh;\n-\n-    }\n-\n-    /** Compute the inverse hyperbolic tangent of a number.\n-     * @param a number on which evaluation is done\n-     * @return inverse hyperbolic tangent of a\n-     */\n-    public static double atanh(double a) {\n-\n-        boolean negative = false;\n-        if (a < 0) {\n-            negative = true;\n-            a = -a;\n-        }\n-\n-        double absAtanh;\n-        if (a > 0.15) {\n-            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));\n-        } else {\n-            final double a2 = a * a;\n-            if (a > 0.087) {\n-                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));\n-            } else if (a > 0.031) {\n-                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));\n-            } else if (a > 0.003) {\n-                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0)))));\n-            } else {\n-                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));\n-            }\n-        }\n-\n-        return negative ? -absAtanh : absAtanh;\n-\n-    }\n-\n-    /** Compute the signum of a number.\n-     * The signum is -1 for negative numbers, +1 for positive numbers and 0 otherwise\n-     * @param a number on which evaluation is done\n-     * @return -1.0, -0.0, +0.0, +1.0 or NaN depending on sign of a\n-     */\n-    public static double signum(final double a) {\n-        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a\n-    }\n-\n-    /** Compute the signum of a number.\n-     * The signum is -1 for negative numbers, +1 for positive numbers and 0 otherwise\n-     * @param a number on which evaluation is done\n-     * @return -1.0, -0.0, +0.0, +1.0 or NaN depending on sign of a\n-     */\n-    public static float signum(final float a) {\n-        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a\n-    }\n-\n-    /** Compute next number towards positive infinity.\n-     * @param a number to which neighbor should be computed\n-     * @return neighbor of a towards positive infinity\n-     */\n-    public static double nextUp(final double a) {\n-        return nextAfter(a, Double.POSITIVE_INFINITY);\n-    }\n-\n-    /** Compute next number towards positive infinity.\n-     * @param a number to which neighbor should be computed\n-     * @return neighbor of a towards positive infinity\n-     */\n-    public static float nextUp(final float a) {\n-        return nextAfter(a, Float.POSITIVE_INFINITY);\n-    }\n-\n-    /** Returns a pseudo-random number between 0.0 and 1.0.\n-     * <p><b>Note:</b> this implementation currently delegates to {@link Math#random}\n-     * @return a random number between 0.0 and 1.0\n-     */\n-    public static double random() {\n-        return Math.random();\n-    }\n-\n-    /**\n-     * Exponential function.\n-     *\n-     * Computes exp(x), function result is nearly rounded.   It will be correctly\n-     * rounded to the theoretical value for 99.9% of input values, otherwise it will\n-     * have a 1 UPL error.\n-     *\n-     * Method:\n-     *    Lookup intVal = exp(int(x))\n-     *    Lookup fracVal = exp(int(x-int(x) / 1024.0) * 1024.0 );\n-     *    Compute z as the exponential of the remaining bits by a polynomial minus one\n-     *    exp(x) = intVal * fracVal * (1 + z)\n-     *\n-     * Accuracy:\n-     *    Calculation is done with 63 bits of precision, so result should be correctly\n-     *    rounded for 99.9% of input values, with less than 1 ULP error otherwise.\n-     *\n-     * @param x   a double\n-     * @return double e<sup>x</sup>\n-     */\n-    public static double exp(double x) {\n-        return exp(x, 0.0, null);\n-    }\n-\n-    /**\n-     * Internal helper method for exponential function.\n-     * @param x original argument of the exponential function\n-     * @param extra extra bits of precision on input (To Be Confirmed)\n-     * @param hiPrec extra bits of precision on output (To Be Confirmed)\n-     * @return exp(x)\n-     */\n-    private static double exp(double x, double extra, double[] hiPrec) {\n-        double intPartA;\n-        double intPartB;\n-        int intVal;\n-\n-        /* Lookup exp(floor(x)).\n-         * intPartA will have the upper 22 bits, intPartB will have the lower\n-         * 52 bits.\n+    private static class ExpFracTable {\n+        /** Exponential over the range of 0 - 1 in increments of 2^-10\n+         * exp(x/1024) =  expFracTableA[x] + expFracTableB[x].\n+         * 1024 = 2^10\n          */\n-        if (x < 0.0) {\n-            intVal = (int) -x;\n-\n-            if (intVal > 746) {\n-                if (hiPrec != null) {\n-                    hiPrec[0] = 0.0;\n-                    hiPrec[1] = 0.0;\n-                }\n-                return 0.0;\n-            }\n-\n-            if (intVal > 709) {\n-                /* This will produce a subnormal output */\n-                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;\n-                if (hiPrec != null) {\n-                    hiPrec[0] /= 285040095144011776.0;\n-                    hiPrec[1] /= 285040095144011776.0;\n-                }\n-                return result;\n-            }\n-\n-            if (intVal == 709) {\n-                /* exp(1.494140625) is nearly a machine number... */\n-                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;\n-                if (hiPrec != null) {\n-                    hiPrec[0] /= 4.455505956692756620;\n-                    hiPrec[1] /= 4.455505956692756620;\n-                }\n-                return result;\n-            }\n-\n-            intVal++;\n-\n-            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];\n-            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];\n-\n-            intVal = -intVal;\n-        } else {\n-            intVal = (int) x;\n-\n-            if (intVal > 709) {\n-                if (hiPrec != null) {\n-                    hiPrec[0] = Double.POSITIVE_INFINITY;\n-                    hiPrec[1] = 0.0;\n-                }\n-                return Double.POSITIVE_INFINITY;\n-            }\n-\n-            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];\n-            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];\n-        }\n-\n-        /* Get the fractional part of x, find the greatest multiple of 2^-10 less than\n-         * x and look up the exp function of it.\n-         * fracPartA will have the upper 22 bits, fracPartB the lower 52 bits.\n+        private static final double[] EXP_FRAC_TABLE_A;\n+        /** Exponential over the range of 0 - 1 in increments of 2^-10\n+         * exp(x/1024) =  expFracTableA[x] + expFracTableB[x].\n          */\n-        final int intFrac = (int) ((x - intVal) * 1024.0);\n-        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];\n-        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];\n-\n-        /* epsilon is the difference in x from the nearest multiple of 2^-10.  It\n-         * has a value in the range 0 <= epsilon < 2^-10.\n-         * Do the subtraction from x as the last step to avoid possible loss of percison.\n-         */\n-        final double epsilon = x - (intVal + intFrac / 1024.0);\n-\n-        /* Compute z = exp(epsilon) - 1.0 via a minimax polynomial.  z has\n-       full double precision (52 bits).  Since z < 2^-10, we will have\n-       62 bits of precision when combined with the contant 1.  This will be\n-       used in the last addition below to get proper rounding. */\n-\n-        /* Remez generated polynomial.  Converges on the interval [0, 2^-10], error\n-       is less than 0.5 ULP */\n-        double z = 0.04168701738764507;\n-        z = z * epsilon + 0.1666666505023083;\n-        z = z * epsilon + 0.5000000000042687;\n-        z = z * epsilon + 1.0;\n-        z = z * epsilon + -3.940510424527919E-20;\n-\n-        /* Compute (intPartA+intPartB) * (fracPartA+fracPartB) by binomial\n-       expansion.\n-       tempA is exact since intPartA and intPartB only have 22 bits each.\n-       tempB will have 52 bits of precision.\n-         */\n-        double tempA = intPartA * fracPartA;\n-        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;\n-\n-        /* Compute the result.  (1+z)(tempA+tempB).  Order of operations is\n-       important.  For accuracy add by increasing size.  tempA is exact and\n-       much larger than the others.  If there are extra bits specified from the\n-       pow() function, use them. */\n-        final double tempC = tempB + tempA;\n-        final double result;\n-        if (extra != 0.0) {\n-            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;\n-        } else {\n-            result = tempC*z + tempB + tempA;\n-        }\n-\n-        if (hiPrec != null) {\n-            // If requesting high precision\n-            hiPrec[0] = tempA;\n-            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;\n-        }\n-\n-        return result;\n-    }\n-\n-    /** Compute exp(x) - 1\n-     * @param x number to compute shifted exponential\n-     * @return exp(x) - 1\n-     */\n-    public static double expm1(double x) {\n-      return expm1(x, null);\n-    }\n-\n-    /** Internal helper method for expm1\n-     * @param x number to compute shifted exponential\n-     * @param hiPrecOut receive high precision result for -1.0 < x < 1.0\n-     * @return exp(x) - 1\n-     */\n-    private static double expm1(double x, double hiPrecOut[]) {\n-        if (x != x || x == 0.0) { // NaN or zero\n-            return x;\n-        }\n-\n-        if (x <= -1.0 || x >= 1.0) {\n-            // If not between +/- 1.0\n-            //return exp(x) - 1.0;\n-            double hiPrec[] = new double[2];\n-            exp(x, 0.0, hiPrec);\n-            if (x > 0.0) {\n-                return -1.0 + hiPrec[0] + hiPrec[1];\n-            } else {\n-                final double ra = -1.0 + hiPrec[0];\n-                double rb = -(ra + 1.0 - hiPrec[0]);\n-                rb += hiPrec[1];\n-                return ra + rb;\n-            }\n-        }\n-\n-        double baseA;\n-        double baseB;\n-        double epsilon;\n-        boolean negative = false;\n-\n-        if (x < 0.0) {\n-            x = -x;\n-            negative = true;\n-        }\n-\n-        {\n-            int intFrac = (int) (x * 1024.0);\n-            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;\n-            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];\n-\n-            double temp = tempA + tempB;\n-            tempB = -(temp - tempA - tempB);\n-            tempA = temp;\n-\n-            temp = tempA * HEX_40000000;\n-            baseA = tempA + temp - temp;\n-            baseB = tempB + (tempA - baseA);\n-\n-            epsilon = x - intFrac/1024.0;\n-        }\n-\n-\n-        /* Compute expm1(epsilon) */\n-        double zb = 0.008336750013465571;\n-        zb = zb * epsilon + 0.041666663879186654;\n-        zb = zb * epsilon + 0.16666666666745392;\n-        zb = zb * epsilon + 0.49999999999999994;\n-        zb = zb * epsilon;\n-        zb = zb * epsilon;\n-\n-        double za = epsilon;\n-        double temp = za + zb;\n-        zb = -(temp - za - zb);\n-        za = temp;\n-\n-        temp = za * HEX_40000000;\n-        temp = za + temp - temp;\n-        zb += za - temp;\n-        za = temp;\n-\n-        /* Combine the parts.   expm1(a+b) = expm1(a) + expm1(b) + expm1(a)*expm1(b) */\n-        double ya = za * baseA;\n-        //double yb = za*baseB + zb*baseA + zb*baseB;\n-        temp = ya + za * baseB;\n-        double yb = -(temp - ya - za * baseB);\n-        ya = temp;\n-\n-        temp = ya + zb * baseA;\n-        yb += -(temp - ya - zb * baseA);\n-        ya = temp;\n-\n-        temp = ya + zb * baseB;\n-        yb += -(temp - ya - zb*baseB);\n-        ya = temp;\n-\n-        //ya = ya + za + baseA;\n-        //yb = yb + zb + baseB;\n-        temp = ya + baseA;\n-        yb += -(temp - baseA - ya);\n-        ya = temp;\n-\n-        temp = ya + za;\n-        //yb += (ya > za) ? -(temp - ya - za) : -(temp - za - ya);\n-        yb += -(temp - ya - za);\n-        ya = temp;\n-\n-        temp = ya + baseB;\n-        //yb += (ya > baseB) ? -(temp - ya - baseB) : -(temp - baseB - ya);\n-        yb += -(temp - ya - baseB);\n-        ya = temp;\n-\n-        temp = ya + zb;\n-        //yb += (ya > zb) ? -(temp - ya - zb) : -(temp - zb - ya);\n-        yb += -(temp - ya - zb);\n-        ya = temp;\n-\n-        if (negative) {\n-            /* Compute expm1(-x) = -expm1(x) / (expm1(x) + 1) */\n-            double denom = 1.0 + ya;\n-            double denomr = 1.0 / denom;\n-            double denomb = -(denom - 1.0 - ya) + yb;\n-            double ratio = ya * denomr;\n-            temp = ratio * HEX_40000000;\n-            final double ra = ratio + temp - temp;\n-            double rb = ratio - ra;\n-\n-            temp = denom * HEX_40000000;\n-            za = denom + temp - temp;\n-            zb = denom - za;\n-\n-            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;\n-\n-            // f(x) = x/1+x\n-            // Compute f'(x)\n-            // Product rule:  d(uv) = du*v + u*dv\n-            // Chain rule:  d(f(g(x)) = f'(g(x))*f(g'(x))\n-            // d(1/x) = -1/(x*x)\n-            // d(1/1+x) = -1/( (1+x)^2) *  1 =  -1/((1+x)*(1+x))\n-            // d(x/1+x) = -x/((1+x)(1+x)) + 1/1+x = 1 / ((1+x)(1+x))\n-\n-            // Adjust for yb\n-            rb += yb * denomr;                      // numerator\n-            rb += -ya * denomb * denomr * denomr;   // denominator\n-\n-            // negate\n-            ya = -ra;\n-            yb = -rb;\n-        }\n-\n-        if (hiPrecOut != null) {\n-            hiPrecOut[0] = ya;\n-            hiPrecOut[1] = yb;\n-        }\n-\n-        return ya + yb;\n-    }\n-\n-    /**\n-     * Natural logarithm.\n-     *\n-     * @param x   a double\n-     * @return log(x)\n-     */\n-    public static double log(final double x) {\n-        return log(x, null);\n-    }\n-\n-    /**\n-     * Internal helper method for natural logarithm function.\n-     * @param x original argument of the natural logarithm function\n-     * @param hiPrec extra bits of precision on output (To Be Confirmed)\n-     * @return log(x)\n-     */\n-    private static double log(final double x, final double[] hiPrec) {\n-        if (x==0) { // Handle special case of +0/-0\n-            return Double.NEGATIVE_INFINITY;\n-        }\n-        long bits = Double.doubleToLongBits(x);\n-\n-        /* Handle special cases of negative input, and NaN */\n-        if ((bits & 0x8000000000000000L) != 0 || x != x) {\n-            if (x != 0.0) {\n-                if (hiPrec != null) {\n-                    hiPrec[0] = Double.NaN;\n-                }\n-\n-                return Double.NaN;\n-            }\n-        }\n-\n-        /* Handle special cases of Positive infinity. */\n-        if (x == Double.POSITIVE_INFINITY) {\n-            if (hiPrec != null) {\n-                hiPrec[0] = Double.POSITIVE_INFINITY;\n-            }\n-\n-            return Double.POSITIVE_INFINITY;\n-        }\n-\n-        /* Extract the exponent */\n-        int exp = (int)(bits >> 52)-1023;\n-\n-        if ((bits & 0x7ff0000000000000L) == 0) {\n-            // Subnormal!\n-            if (x == 0) {\n-                // Zero\n-                if (hiPrec != null) {\n-                    hiPrec[0] = Double.NEGATIVE_INFINITY;\n-                }\n-\n-                return Double.NEGATIVE_INFINITY;\n-            }\n-\n-            /* Normalize the subnormal number. */\n-            bits <<= 1;\n-            while ( (bits & 0x0010000000000000L) == 0) {\n-                exp--;\n-                bits <<= 1;\n-            }\n-        }\n-\n-\n-        if (exp == -1 || exp == 0) {\n-            if (x < 1.01 && x > 0.99 && hiPrec == null) {\n-                /* The normal method doesn't work well in the range [0.99, 1.01], so call do a straight\n-           polynomial expansion in higer precision. */\n-\n-               /* Compute x - 1.0 and split it */\n-                double xa = x - 1.0;\n-                double xb = xa - x + 1.0;\n-                double tmp = xa * HEX_40000000;\n-                double aa = xa + tmp - tmp;\n-                double ab = xa - aa;\n-                xa = aa;\n-                xb = ab;\n-\n-                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];\n-                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];\n-\n-                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {\n-                    /* Multiply a = y * x */\n-                    aa = ya * xa;\n-                    ab = ya * xb + yb * xa + yb * xb;\n-                    /* split, so now y = a */\n-                    tmp = aa * HEX_40000000;\n-                    ya = aa + tmp - tmp;\n-                    yb = aa - ya + ab;\n-\n-                    /* Add  a = y + lnQuickCoef */\n-                    aa = ya + LN_QUICK_COEF[i][0];\n-                    ab = yb + LN_QUICK_COEF[i][1];\n-                    /* Split y = a */\n-                    tmp = aa * HEX_40000000;\n-                    ya = aa + tmp - tmp;\n-                    yb = aa - ya + ab;\n-                }\n-\n-                /* Multiply a = y * x */\n-                aa = ya * xa;\n-                ab = ya * xb + yb * xa + yb * xb;\n-                /* split, so now y = a */\n-                tmp = aa * HEX_40000000;\n-                ya = aa + tmp - tmp;\n-                yb = aa - ya + ab;\n-\n-                return ya + yb;\n-            }\n-        }\n-\n-        // lnm is a log of a number in the range of 1.0 - 2.0, so 0 <= lnm < ln(2)\n-        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n-\n-        /*\n-    double epsilon = x / Double.longBitsToDouble(bits & 0xfffffc0000000000L);\n-\n-    epsilon -= 1.0;\n-         */\n-\n-        // y is the most significant 10 bits of the mantissa\n-        //double y = Double.longBitsToDouble(bits & 0xfffffc0000000000L);\n-        //double epsilon = (x - y) / y;\n-        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n-\n-        double lnza = 0.0;\n-        double lnzb = 0.0;\n-\n-        if (hiPrec != null) {\n-            /* split epsilon -> x */\n-            double tmp = epsilon * HEX_40000000;\n-            double aa = epsilon + tmp - tmp;\n-            double ab = epsilon - aa;\n-            double xa = aa;\n-            double xb = ab;\n-\n-            /* Need a more accurate epsilon, so adjust the division. */\n-            double numer = bits & 0x3ffffffffffL;\n-            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n-            aa = numer - xa*denom - xb * denom;\n-            xb += aa / denom;\n-\n-            /* Remez polynomial evaluation */\n-            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];\n-            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];\n-\n-            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n-                /* Multiply a = y * x */\n-                aa = ya * xa;\n-                ab = ya * xb + yb * xa + yb * xb;\n-                /* split, so now y = a */\n-                tmp = aa * HEX_40000000;\n-                ya = aa + tmp - tmp;\n-                yb = aa - ya + ab;\n-\n-                /* Add  a = y + lnHiPrecCoef */\n-                aa = ya + LN_HI_PREC_COEF[i][0];\n-                ab = yb + LN_HI_PREC_COEF[i][1];\n-                /* Split y = a */\n-                tmp = aa * HEX_40000000;\n-                ya = aa + tmp - tmp;\n-                yb = aa - ya + ab;\n-            }\n-\n-            /* Multiply a = y * x */\n-            aa = ya * xa;\n-            ab = ya * xb + yb * xa + yb * xb;\n-\n-            /* split, so now lnz = a */\n-            /*\n-      tmp = aa * 1073741824.0;\n-      lnza = aa + tmp - tmp;\n-      lnzb = aa - lnza + ab;\n-             */\n-            lnza = aa + ab;\n-            lnzb = -(lnza - aa - ab);\n-        } else {\n-            /* High precision not required.  Eval Remez polynomial\n-         using standard double precision */\n-            lnza = -0.16624882440418567;\n-            lnza = lnza * epsilon + 0.19999954120254515;\n-            lnza = lnza * epsilon + -0.2499999997677497;\n-            lnza = lnza * epsilon + 0.3333333333332802;\n-            lnza = lnza * epsilon + -0.5;\n-            lnza = lnza * epsilon + 1.0;\n-            lnza = lnza * epsilon;\n-        }\n-\n-        /* Relative sizes:\n-         * lnzb     [0, 2.33E-10]\n-         * lnm[1]   [0, 1.17E-7]\n-         * ln2B*exp [0, 1.12E-4]\n-         * lnza      [0, 9.7E-4]\n-         * lnm[0]   [0, 0.692]\n-         * ln2A*exp [0, 709]\n-         */\n-\n-        /* Compute the following sum:\n-         * lnzb + lnm[1] + ln2B*exp + lnza + lnm[0] + ln2A*exp;\n-         */\n-\n-        //return lnzb + lnm[1] + ln2B*exp + lnza + lnm[0] + ln2A*exp;\n-        double a = LN_2_A*exp;\n-        double b = 0.0;\n-        double c = a+lnm[0];\n-        double d = -(c-a-lnm[0]);\n-        a = c;\n-        b = b + d;\n-\n-        c = a + lnza;\n-        d = -(c - a - lnza);\n-        a = c;\n-        b = b + d;\n-\n-        c = a + LN_2_B*exp;\n-        d = -(c - a - LN_2_B*exp);\n-        a = c;\n-        b = b + d;\n-\n-        c = a + lnm[1];\n-        d = -(c - a - lnm[1]);\n-        a = c;\n-        b = b + d;\n-\n-        c = a + lnzb;\n-        d = -(c - a - lnzb);\n-        a = c;\n-        b = b + d;\n-\n-        if (hiPrec != null) {\n-            hiPrec[0] = a;\n-            hiPrec[1] = b;\n-        }\n-\n-        return a + b;\n-    }\n-\n-    /** Compute log(1 + x).\n-     * @param x a number\n-     * @return log(1 + x)\n-     */\n-    public static double log1p(final double x) {\n-\n-        if (x == -1) {\n-            return x/0.0;   // -Infinity\n-        }\n-\n-        if (x > 0 && 1/x == 0) { // x = Infinity\n-            return x;\n-        }\n-\n-        if (x>1e-6 || x<-1e-6) {\n-            double xpa = 1.0 + x;\n-            double xpb = -(xpa - 1.0 - x);\n-\n-            double hiPrec[] = new double[2];\n-\n-            final double lores = log(xpa, hiPrec);\n-            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN\n-                return lores;\n-            }\n-\n-            /* Do a taylor series expansion around xpa */\n-            /* f(x+y) = f(x) + f'(x)*y + f''(x)/2 y^2 */\n-            double fx1 = xpb/xpa;\n-\n-            double epsilon = 0.5 * fx1 + 1.0;\n-            epsilon = epsilon * fx1;\n-\n-            return epsilon + hiPrec[1] + hiPrec[0];\n-        }\n-\n-        /* Value is small |x| < 1e6, do a Taylor series centered on 1.0 */\n-        double y = x * 0.333333333333333 - 0.5;\n-        y = y * x + 1.0;\n-        y = y * x;\n-\n-        return y;\n-    }\n-\n-    /** Compute the base 10 logarithm.\n-     * @param x a number\n-     * @return log10(x)\n-     */\n-    public static double log10(final double x) {\n-        final double hiPrec[] = new double[2];\n-\n-        final double lores = log(x, hiPrec);\n-        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN\n-            return lores;\n-        }\n-\n-        final double tmp = hiPrec[0] * HEX_40000000;\n-        final double lna = hiPrec[0] + tmp - tmp;\n-        final double lnb = hiPrec[0] - lna + hiPrec[1];\n-\n-        final double rln10a = 0.4342944622039795;\n-        final double rln10b = 1.9699272335463627E-8;\n-\n-        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;\n-    }\n-\n-    /**\n-     * Power function.  Compute x^y.\n-     *\n-     * @param x   a double\n-     * @param y   a double\n-     * @return double\n-     */\n-    public static double pow(double x, double y) {\n-        final double lns[] = new double[2];\n-\n-        if (y == 0.0) {\n-            return 1.0;\n-        }\n-\n-        if (x != x) { // X is NaN\n-            return x;\n-        }\n-\n-\n-        if (x == 0) {\n-            long bits = Double.doubleToLongBits(x);\n-            if ((bits & 0x8000000000000000L) != 0) {\n-                // -zero\n-                long yi = (long) y;\n-\n-                if (y < 0 && y == yi && (yi & 1) == 1) {\n-                    return Double.NEGATIVE_INFINITY;\n-                }\n-\n-                if (y > 0 && y == yi && (yi & 1) == 1) {\n-                    return -0.0;\n-                }\n-            }\n-\n-            if (y < 0) {\n-                return Double.POSITIVE_INFINITY;\n-            }\n-            if (y > 0) {\n-                return 0.0;\n-            }\n-\n-            return Double.NaN;\n-        }\n-\n-        if (x == Double.POSITIVE_INFINITY) {\n-            if (y != y) { // y is NaN\n-                return y;\n-            }\n-            if (y < 0.0) {\n-                return 0.0;\n-            } else {\n-                return Double.POSITIVE_INFINITY;\n-            }\n-        }\n-\n-        if (y == Double.POSITIVE_INFINITY) {\n-            if (x * x == 1.0) {\n-                return Double.NaN;\n-            }\n-\n-            if (x * x > 1.0) {\n-                return Double.POSITIVE_INFINITY;\n-            } else {\n-                return 0.0;\n-            }\n-        }\n-\n-        if (x == Double.NEGATIVE_INFINITY) {\n-            if (y != y) { // y is NaN\n-                return y;\n-            }\n-\n-            if (y < 0) {\n-                long yi = (long) y;\n-                if (y == yi && (yi & 1) == 1) {\n-                    return -0.0;\n-                }\n-\n-                return 0.0;\n-            }\n-\n-            if (y > 0)  {\n-                long yi = (long) y;\n-                if (y == yi && (yi & 1) == 1) {\n-                    return Double.NEGATIVE_INFINITY;\n-                }\n-\n-                return Double.POSITIVE_INFINITY;\n-            }\n-        }\n-\n-        if (y == Double.NEGATIVE_INFINITY) {\n-\n-            if (x * x == 1.0) {\n-                return Double.NaN;\n-            }\n-\n-            if (x * x < 1.0) {\n-                return Double.POSITIVE_INFINITY;\n-            } else {\n-                return 0.0;\n-            }\n-        }\n-\n-        /* Handle special case x<0 */\n-        if (x < 0) {\n-            // y is an even integer in this case\n-            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {\n-                return pow(-x, y);\n-            }\n-\n-            if (y == (long) y) {\n-                // If y is an integer\n-                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);\n-            } else {\n-                return Double.NaN;\n-            }\n-        }\n-\n-        /* Split y into ya and yb such that y = ya+yb */\n-        double ya;\n-        double yb;\n-        if (y < 8e298 && y > -8e298) {\n-            double tmp1 = y * HEX_40000000;\n-            ya = y + tmp1 - tmp1;\n-            yb = y - ya;\n-        } else {\n-            double tmp1 = y * 9.31322574615478515625E-10;\n-            double tmp2 = tmp1 * 9.31322574615478515625E-10;\n-            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;\n-            yb = y - ya;\n-        }\n-\n-        /* Compute ln(x) */\n-        final double lores = log(x, lns);\n-        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN\n-            return lores;\n-        }\n-\n-        double lna = lns[0];\n-        double lnb = lns[1];\n-\n-        /* resplit lns */\n-        double tmp1 = lna * HEX_40000000;\n-        double tmp2 = lna + tmp1 - tmp1;\n-        lnb += lna - tmp2;\n-        lna = tmp2;\n-\n-        // y*ln(x) = (aa+ab)\n-        final double aa = lna * ya;\n-        final double ab = lna * yb + lnb * ya + lnb * yb;\n-\n-        lna = aa+ab;\n-        lnb = -(lna - aa - ab);\n-\n-        double z = 1.0 / 120.0;\n-        z = z * lnb + (1.0 / 24.0);\n-        z = z * lnb + (1.0 / 6.0);\n-        z = z * lnb + 0.5;\n-        z = z * lnb + 1.0;\n-        z = z * lnb;\n-\n-        final double result = exp(lna, z, null);\n-        //result = result + result * z;\n-        return result;\n-    }\n-\n-\n-    /**\n-     *  Computes sin(x) - x, where |x| < 1/16.\n-     *  Use a Remez polynomial approximation.\n-     *  @param x a number smaller than 1/16\n-     *  @return sin(x) - x\n-     */\n-    private static double polySine(final double x)\n-    {\n-        double x2 = x*x;\n-\n-        double p = 2.7553817452272217E-6;\n-        p = p * x2 + -1.9841269659586505E-4;\n-        p = p * x2 + 0.008333333333329196;\n-        p = p * x2 + -0.16666666666666666;\n-        //p *= x2;\n-        //p *= x;\n-        p = p * x2 * x;\n-\n-        return p;\n-    }\n-\n-    /**\n-     *  Computes cos(x) - 1, where |x| < 1/16.\n-     *  Use a Remez polynomial approximation.\n-     *  @param x a number smaller than 1/16\n-     *  @return cos(x) - 1\n-     */\n-    private static double polyCosine(double x) {\n-        double x2 = x*x;\n-\n-        double p = 2.479773539153719E-5;\n-        p = p * x2 + -0.0013888888689039883;\n-        p = p * x2 + 0.041666666666621166;\n-        p = p * x2 + -0.49999999999999994;\n-        p *= x2;\n-\n-        return p;\n-    }\n-\n-    /**\n-     *  Compute sine over the first quadrant (0 < x < pi/2).\n-     *  Use combination of table lookup and rational polynomial expansion.\n-     *  @param xa number from which sine is requested\n-     *  @param xb extra bits for x (may be 0.0)\n-     *  @return sin(xa + xb)\n-     */\n-    private static double sinQ(double xa, double xb) {\n-        int idx = (int) ((xa * 8.0) + 0.5);\n-        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;\n-\n-        // Table lookups\n-        final double sintA = SINE_TABLE_A[idx];\n-        final double sintB = SINE_TABLE_B[idx];\n-        final double costA = COSINE_TABLE_A[idx];\n-        final double costB = COSINE_TABLE_B[idx];\n-\n-        // Polynomial eval of sin(epsilon), cos(epsilon)\n-        double sinEpsA = epsilon;\n-        double sinEpsB = polySine(epsilon);\n-        final double cosEpsA = 1.0;\n-        final double cosEpsB = polyCosine(epsilon);\n-\n-        // Split epsilon   xa + xb = x\n-        final double temp = sinEpsA * HEX_40000000;\n-        double temp2 = (sinEpsA + temp) - temp;\n-        sinEpsB +=  sinEpsA - temp2;\n-        sinEpsA = temp2;\n-\n-        /* Compute sin(x) by angle addition formula */\n-        double result;\n-\n-        /* Compute the following sum:\n-         *\n-         * result = sintA + costA*sinEpsA + sintA*cosEpsB + costA*sinEpsB +\n-         *          sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;\n-         *\n-         * Ranges of elements\n-         *\n-         * xxxtA   0            PI/2\n-         * xxxtB   -1.5e-9      1.5e-9\n-         * sinEpsA -0.0625      0.0625\n-         * sinEpsB -6e-11       6e-11\n-         * cosEpsA  1.0\n-         * cosEpsB  0           -0.0625\n-         *\n-         */\n-\n-        //result = sintA + costA*sinEpsA + sintA*cosEpsB + costA*sinEpsB +\n-        //          sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;\n-\n-        //result = sintA + sintA*cosEpsB + sintB + sintB * cosEpsB;\n-        //result += costA*sinEpsA + costA*sinEpsB + costB*sinEpsA + costB * sinEpsB;\n-        double a = 0;\n-        double b = 0;\n-\n-        double t = sintA;\n-        double c = a + t;\n-        double d = -(c - a - t);\n-        a = c;\n-        b = b + d;\n-\n-        t = costA * sinEpsA;\n-        c = a + t;\n-        d = -(c - a - t);\n-        a = c;\n-        b = b + d;\n-\n-        b = b + sintA * cosEpsB + costA * sinEpsB;\n-        /*\n-    t = sintA*cosEpsB;\n-    c = a + t;\n-    d = -(c - a - t);\n-    a = c;\n-    b = b + d;\n-\n-    t = costA*sinEpsB;\n-    c = a + t;\n-    d = -(c - a - t);\n-    a = c;\n-    b = b + d;\n-         */\n-\n-        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;\n-        /*\n-    t = sintB;\n-    c = a + t;\n-    d = -(c - a - t);\n-    a = c;\n-    b = b + d;\n-\n-    t = costB*sinEpsA;\n-    c = a + t;\n-    d = -(c - a - t);\n-    a = c;\n-    b = b + d;\n-\n-    t = sintB*cosEpsB;\n-    c = a + t;\n-    d = -(c - a - t);\n-    a = c;\n-    b = b + d;\n-\n-    t = costB*sinEpsB;\n-    c = a + t;\n-    d = -(c - a - t);\n-    a = c;\n-    b = b + d;\n-         */\n-\n-        if (xb != 0.0) {\n-            t = ((costA + costB) * (cosEpsA + cosEpsB) -\n-                 (sintA + sintB) * (sinEpsA + sinEpsB)) * xb;  // approximate cosine*xb\n-            c = a + t;\n-            d = -(c - a - t);\n-            a = c;\n-            b = b + d;\n-        }\n-\n-        result = a + b;\n-\n-        return result;\n-    }\n-\n-    /**\n-     * Compute cosine in the first quadrant by subtracting input from PI/2 and\n-     * then calling sinQ.  This is more accurate as the input approaches PI/2.\n-     *  @param xa number from which cosine is requested\n-     *  @param xb extra bits for x (may be 0.0)\n-     *  @return cos(xa + xb)\n-     */\n-    private static double cosQ(double xa, double xb) {\n-        final double pi2a = 1.5707963267948966;\n-        final double pi2b = 6.123233995736766E-17;\n-\n-        final double a = pi2a - xa;\n-        double b = -(a - pi2a + xa);\n-        b += pi2b - xb;\n-\n-        return sinQ(a, b);\n-    }\n-\n-    /**\n-     *  Compute tangent (or cotangent) over the first quadrant.   0 < x < pi/2\n-     *  Use combination of table lookup and rational polynomial expansion.\n-     *  @param xa number from which sine is requested\n-     *  @param xb extra bits for x (may be 0.0)\n-     *  @param cotanFlag if true, compute the cotangent instead of the tangent\n-     *  @return tan(xa+xb) (or cotangent, depending on cotanFlag)\n-     */\n-    private static double tanQ(double xa, double xb, boolean cotanFlag) {\n-\n-        int idx = (int) ((xa * 8.0) + 0.5);\n-        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;\n-\n-        // Table lookups\n-        final double sintA = SINE_TABLE_A[idx];\n-        final double sintB = SINE_TABLE_B[idx];\n-        final double costA = COSINE_TABLE_A[idx];\n-        final double costB = COSINE_TABLE_B[idx];\n-\n-        // Polynomial eval of sin(epsilon), cos(epsilon)\n-        double sinEpsA = epsilon;\n-        double sinEpsB = polySine(epsilon);\n-        final double cosEpsA = 1.0;\n-        final double cosEpsB = polyCosine(epsilon);\n-\n-        // Split epsilon   xa + xb = x\n-        double temp = sinEpsA * HEX_40000000;\n-        double temp2 = (sinEpsA + temp) - temp;\n-        sinEpsB +=  sinEpsA - temp2;\n-        sinEpsA = temp2;\n-\n-        /* Compute sin(x) by angle addition formula */\n-\n-        /* Compute the following sum:\n-         *\n-         * result = sintA + costA*sinEpsA + sintA*cosEpsB + costA*sinEpsB +\n-         *          sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;\n-         *\n-         * Ranges of elements\n-         *\n-         * xxxtA   0            PI/2\n-         * xxxtB   -1.5e-9      1.5e-9\n-         * sinEpsA -0.0625      0.0625\n-         * sinEpsB -6e-11       6e-11\n-         * cosEpsA  1.0\n-         * cosEpsB  0           -0.0625\n-         *\n-         */\n-\n-        //result = sintA + costA*sinEpsA + sintA*cosEpsB + costA*sinEpsB +\n-        //          sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;\n-\n-        //result = sintA + sintA*cosEpsB + sintB + sintB * cosEpsB;\n-        //result += costA*sinEpsA + costA*sinEpsB + costB*sinEpsA + costB * sinEpsB;\n-        double a = 0;\n-        double b = 0;\n-\n-        // Compute sine\n-        double t = sintA;\n-        double c = a + t;\n-        double d = -(c - a - t);\n-        a = c;\n-        b = b + d;\n-\n-        t = costA*sinEpsA;\n-        c = a + t;\n-        d = -(c - a - t);\n-        a = c;\n-        b = b + d;\n-\n-        b = b + sintA*cosEpsB + costA*sinEpsB;\n-        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;\n-\n-        double sina = a + b;\n-        double sinb = -(sina - a - b);\n-\n-        // Compute cosine\n-\n-        a = b = c = d = 0.0;\n-\n-        t = costA*cosEpsA;\n-        c = a + t;\n-        d = -(c - a - t);\n-        a = c;\n-        b = b + d;\n-\n-        t = -sintA*sinEpsA;\n-        c = a + t;\n-        d = -(c - a - t);\n-        a = c;\n-        b = b + d;\n-\n-        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;\n-        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);\n-\n-        double cosa = a + b;\n-        double cosb = -(cosa - a - b);\n-\n-        if (cotanFlag) {\n-            double tmp;\n-            tmp = cosa; cosa = sina; sina = tmp;\n-            tmp = cosb; cosb = sinb; sinb = tmp;\n-        }\n-\n-\n-        /* estimate and correct, compute 1.0/(cosa+cosb) */\n-        /*\n-    double est = (sina+sinb)/(cosa+cosb);\n-    double err = (sina - cosa*est) + (sinb - cosb*est);\n-    est += err/(cosa+cosb);\n-    err = (sina - cosa*est) + (sinb - cosb*est);\n-         */\n-\n-        // f(x) = 1/x,   f'(x) = -1/x^2\n-\n-        double est = sina/cosa;\n-\n-        /* Split the estimate to get more accurate read on division rounding */\n-        temp = est * HEX_40000000;\n-        double esta = (est + temp) - temp;\n-        double estb =  est - esta;\n-\n-        temp = cosa * HEX_40000000;\n-        double cosaa = (cosa + temp) - temp;\n-        double cosab =  cosa - cosaa;\n-\n-        //double err = (sina - est*cosa)/cosa;  // Correction for division rounding\n-        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding\n-        err += sinb/cosa;                     // Change in est due to sinb\n-        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb\n-\n-        if (xb != 0.0) {\n-            // tan' = 1 + tan^2      cot' = -(1 + cot^2)\n-            // Approximate impact of xb\n-            double xbadj = xb + est*est*xb;\n-            if (cotanFlag) {\n-                xbadj = -xbadj;\n-            }\n-\n-            err += xbadj;\n-        }\n-\n-        return est+err;\n-    }\n-\n-    /** Reduce the input argument using the Payne and Hanek method.\n-     *  This is good for all inputs 0.0 < x < inf\n-     *  Output is remainder after dividing by PI/2\n-     *  The result array should contain 3 numbers.\n-     *  result[0] is the integer portion, so mod 4 this gives the quadrant.\n-     *  result[1] is the upper bits of the remainder\n-     *  result[2] is the lower bits of the remainder\n-     *\n-     * @param x number to reduce\n-     * @param result placeholder where to put the result\n-     */\n-    private static void reducePayneHanek(double x, double result[])\n-    {\n-        /* Convert input double to bits */\n-        long inbits = Double.doubleToLongBits(x);\n-        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;\n-\n-        /* Convert to fixed point representation */\n-        inbits &= 0x000fffffffffffffL;\n-        inbits |= 0x0010000000000000L;\n-\n-        /* Normalize input to be between 0.5 and 1.0 */\n-        exponent++;\n-        inbits <<= 11;\n-\n-        /* Based on the exponent, get a shifted copy of recip2pi */\n-        long shpi0;\n-        long shpiA;\n-        long shpiB;\n-        int idx = exponent >> 6;\n-        int shift = exponent - (idx << 6);\n-\n-        if (shift != 0) {\n-            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);\n-            shpi0 |= RECIP_2PI[idx] >>> (64-shift);\n-            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));\n-            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));\n-        } else {\n-            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];\n-            shpiA = RECIP_2PI[idx];\n-            shpiB = RECIP_2PI[idx+1];\n-        }\n-\n-        /* Multiply input by shpiA */\n-        long a = inbits >>> 32;\n-        long b = inbits & 0xffffffffL;\n-\n-        long c = shpiA >>> 32;\n-        long d = shpiA & 0xffffffffL;\n-\n-        long ac = a * c;\n-        long bd = b * d;\n-        long bc = b * c;\n-        long ad = a * d;\n-\n-        long prodB = bd + (ad << 32);\n-        long prodA = ac + (ad >>> 32);\n-\n-        boolean bita = (bd & 0x8000000000000000L) != 0;\n-        boolean bitb = (ad & 0x80000000L ) != 0;\n-        boolean bitsum = (prodB & 0x8000000000000000L) != 0;\n-\n-        /* Carry */\n-        if ( (bita && bitb) ||\n-                ((bita || bitb) && !bitsum) ) {\n-            prodA++;\n-        }\n-\n-        bita = (prodB & 0x8000000000000000L) != 0;\n-        bitb = (bc & 0x80000000L ) != 0;\n-\n-        prodB = prodB + (bc << 32);\n-        prodA = prodA + (bc >>> 32);\n-\n-        bitsum = (prodB & 0x8000000000000000L) != 0;\n-\n-        /* Carry */\n-        if ( (bita && bitb) ||\n-                ((bita || bitb) && !bitsum) ) {\n-            prodA++;\n-        }\n-\n-        /* Multiply input by shpiB */\n-        c = shpiB >>> 32;\n-        d = shpiB & 0xffffffffL;\n-        ac = a * c;\n-        bc = b * c;\n-        ad = a * d;\n-\n-        /* Collect terms */\n-        ac = ac + ((bc + ad) >>> 32);\n-\n-        bita = (prodB & 0x8000000000000000L) != 0;\n-        bitb = (ac & 0x8000000000000000L ) != 0;\n-        prodB += ac;\n-        bitsum = (prodB & 0x8000000000000000L) != 0;\n-        /* Carry */\n-        if ( (bita && bitb) ||\n-                ((bita || bitb) && !bitsum) ) {\n-            prodA++;\n-        }\n-\n-        /* Multiply by shpi0 */\n-        c = shpi0 >>> 32;\n-        d = shpi0 & 0xffffffffL;\n-\n-        bd = b * d;\n-        bc = b * c;\n-        ad = a * d;\n-\n-        prodA += bd + ((bc + ad) << 32);\n-\n-        /*\n-         * prodA, prodB now contain the remainder as a fraction of PI.  We want this as a fraction of\n-         * PI/2, so use the following steps:\n-         * 1.) multiply by 4.\n-         * 2.) do a fixed point muliply by PI/4.\n-         * 3.) Convert to floating point.\n-         * 4.) Multiply by 2\n-         */\n-\n-        /* This identifies the quadrant */\n-        int intPart = (int)(prodA >>> 62);\n-\n-        /* Multiply by 4 */\n-        prodA <<= 2;\n-        prodA |= prodB >>> 62;\n-        prodB <<= 2;\n-\n-        /* Multiply by PI/4 */\n-        a = prodA >>> 32;\n-        b = prodA & 0xffffffffL;\n-\n-        c = PI_O_4_BITS[0] >>> 32;\n-        d = PI_O_4_BITS[0] & 0xffffffffL;\n-\n-        ac = a * c;\n-        bd = b * d;\n-        bc = b * c;\n-        ad = a * d;\n-\n-        long prod2B = bd + (ad << 32);\n-        long prod2A = ac + (ad >>> 32);\n-\n-        bita = (bd & 0x8000000000000000L) != 0;\n-        bitb = (ad & 0x80000000L ) != 0;\n-        bitsum = (prod2B & 0x8000000000000000L) != 0;\n-\n-        /* Carry */\n-        if ( (bita && bitb) ||\n-                ((bita || bitb) && !bitsum) ) {\n-            prod2A++;\n-        }\n-\n-        bita = (prod2B & 0x8000000000000000L) != 0;\n-        bitb = (bc & 0x80000000L ) != 0;\n-\n-        prod2B = prod2B + (bc << 32);\n-        prod2A = prod2A + (bc >>> 32);\n-\n-        bitsum = (prod2B & 0x8000000000000000L) != 0;\n-\n-        /* Carry */\n-        if ( (bita && bitb) ||\n-                ((bita || bitb) && !bitsum) ) {\n-            prod2A++;\n-        }\n-\n-        /* Multiply input by pio4bits[1] */\n-        c = PI_O_4_BITS[1] >>> 32;\n-        d = PI_O_4_BITS[1] & 0xffffffffL;\n-        ac = a * c;\n-        bc = b * c;\n-        ad = a * d;\n-\n-        /* Collect terms */\n-        ac = ac + ((bc + ad) >>> 32);\n-\n-        bita = (prod2B & 0x8000000000000000L) != 0;\n-        bitb = (ac & 0x8000000000000000L ) != 0;\n-        prod2B += ac;\n-        bitsum = (prod2B & 0x8000000000000000L) != 0;\n-        /* Carry */\n-        if ( (bita && bitb) ||\n-                ((bita || bitb) && !bitsum) ) {\n-            prod2A++;\n-        }\n-\n-        /* Multiply inputB by pio4bits[0] */\n-        a = prodB >>> 32;\n-        b = prodB & 0xffffffffL;\n-        c = PI_O_4_BITS[0] >>> 32;\n-        d = PI_O_4_BITS[0] & 0xffffffffL;\n-        ac = a * c;\n-        bc = b * c;\n-        ad = a * d;\n-\n-        /* Collect terms */\n-        ac = ac + ((bc + ad) >>> 32);\n-\n-        bita = (prod2B & 0x8000000000000000L) != 0;\n-        bitb = (ac & 0x8000000000000000L ) != 0;\n-        prod2B += ac;\n-        bitsum = (prod2B & 0x8000000000000000L) != 0;\n-        /* Carry */\n-        if ( (bita && bitb) ||\n-                ((bita || bitb) && !bitsum) ) {\n-            prod2A++;\n-        }\n-\n-        /* Convert to double */\n-        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits\n-        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits\n-\n-        double sumA = tmpA + tmpB;\n-        double sumB = -(sumA - tmpA - tmpB);\n-\n-        /* Multiply by PI/2 and return */\n-        result[0] = intPart;\n-        result[1] = sumA * 2.0;\n-        result[2] = sumB * 2.0;\n-    }\n-\n-    /**\n-     *  Sine function.\n-     *  @param x a number\n-     *  @return sin(x)\n-     */\n-    public static double sin(double x) {\n-        boolean negative = false;\n-        int quadrant = 0;\n-        double xa;\n-        double xb = 0.0;\n-\n-        /* Take absolute value of the input */\n-        xa = x;\n-        if (x < 0) {\n-            negative = true;\n-            xa = -xa;\n-        }\n-\n-        /* Check for zero and negative zero */\n-        if (xa == 0.0) {\n-            long bits = Double.doubleToLongBits(x);\n-            if (bits < 0) {\n-                return -0.0;\n-            }\n-            return 0.0;\n-        }\n-\n-        if (xa != xa || xa == Double.POSITIVE_INFINITY) {\n-            return Double.NaN;\n-        }\n-\n-        /* Perform any argument reduction */\n-        if (xa > 3294198.0) {\n-            // PI * (2**20)\n-            // Argument too big for CodyWaite reduction.  Must use\n-            // PayneHanek.\n-            double reduceResults[] = new double[3];\n-            reducePayneHanek(xa, reduceResults);\n-            quadrant = ((int) reduceResults[0]) & 3;\n-            xa = reduceResults[1];\n-            xb = reduceResults[2];\n-        } else if (xa > 1.5707963267948966) {\n-            /* Inline the Cody/Waite reduction for performance */\n-\n-            // Estimate k\n-            //k = (int)(xa / 1.5707963267948966);\n-            int k = (int)(xa * 0.6366197723675814);\n-\n-            // Compute remainder\n-            double remA;\n-            double remB;\n-            while (true) {\n-                double a = -k * 1.570796251296997;\n-                remA = xa + a;\n-                remB = -(remA - xa - a);\n-\n-                a = -k * 7.549789948768648E-8;\n-                double b = remA;\n-                remA = a + b;\n-                remB += -(remA - b - a);\n-\n-                a = -k * 6.123233995736766E-17;\n-                b = remA;\n-                remA = a + b;\n-                remB += -(remA - b - a);\n-\n-                if (remA > 0.0) {\n-                    break;\n-                }\n-\n-                // Remainder is negative, so decrement k and try again.\n-                // This should only happen if the input is very close\n-                // to an even multiple of pi/2\n-                k--;\n-            }\n-            quadrant = k & 3;\n-            xa = remA;\n-            xb = remB;\n-        }\n-\n-        if (negative) {\n-            quadrant ^= 2;  // Flip bit 1\n-        }\n-\n-        switch (quadrant) {\n-            case 0:\n-                return sinQ(xa, xb);\n-            case 1:\n-                return cosQ(xa, xb);\n-            case 2:\n-                return -sinQ(xa, xb);\n-            case 3:\n-                return -cosQ(xa, xb);\n-            default:\n-                return Double.NaN;\n-        }\n-    }\n-\n-    /**\n-     *  Cosine function\n-     *  @param x a number\n-     *  @return cos(x)\n-     */\n-    public static double cos(double x) {\n-        int quadrant = 0;\n-\n-        /* Take absolute value of the input */\n-        double xa = x;\n-        if (x < 0) {\n-            xa = -xa;\n-        }\n-\n-        if (xa != xa || xa == Double.POSITIVE_INFINITY) {\n-            return Double.NaN;\n-        }\n-\n-        /* Perform any argument reduction */\n-        double xb = 0;\n-        if (xa > 3294198.0) {\n-            // PI * (2**20)\n-            // Argument too big for CodyWaite reduction.  Must use\n-            // PayneHanek.\n-            double reduceResults[] = new double[3];\n-            reducePayneHanek(xa, reduceResults);\n-            quadrant = ((int) reduceResults[0]) & 3;\n-            xa = reduceResults[1];\n-            xb = reduceResults[2];\n-        } else if (xa > 1.5707963267948966) {\n-            /* Inline the Cody/Waite reduction for performance */\n-\n-            // Estimate k\n-            //k = (int)(xa / 1.5707963267948966);\n-            int k = (int)(xa * 0.6366197723675814);\n-\n-            // Compute remainder\n-            double remA;\n-            double remB;\n-            while (true) {\n-                double a = -k * 1.570796251296997;\n-                remA = xa + a;\n-                remB = -(remA - xa - a);\n-\n-                a = -k * 7.549789948768648E-8;\n-                double b = remA;\n-                remA = a + b;\n-                remB += -(remA - b - a);\n-\n-                a = -k * 6.123233995736766E-17;\n-                b = remA;\n-                remA = a + b;\n-                remB += -(remA - b - a);\n-\n-                if (remA > 0.0) {\n-                    break;\n-                }\n-\n-                // Remainder is negative, so decrement k and try again.\n-                // This should only happen if the input is very close\n-                // to an even multiple of pi/2\n-                k--;\n-            }\n-            quadrant = k & 3;\n-            xa = remA;\n-            xb = remB;\n-        }\n-\n-        //if (negative)\n-        //  quadrant = (quadrant + 2) % 4;\n-\n-        switch (quadrant) {\n-            case 0:\n-                return cosQ(xa, xb);\n-            case 1:\n-                return -sinQ(xa, xb);\n-            case 2:\n-                return -cosQ(xa, xb);\n-            case 3:\n-                return sinQ(xa, xb);\n-            default:\n-                return Double.NaN;\n-        }\n-    }\n-\n-    /**\n-     *   Tangent function\n-     *  @param x a number\n-     *  @return tan(x)\n-     */\n-    public static double tan(double x) {\n-        boolean negative = false;\n-        int quadrant = 0;\n-\n-        /* Take absolute value of the input */\n-        double xa = x;\n-        if (x < 0) {\n-            negative = true;\n-            xa = -xa;\n-        }\n-\n-        /* Check for zero and negative zero */\n-        if (xa == 0.0) {\n-            long bits = Double.doubleToLongBits(x);\n-            if (bits < 0) {\n-                return -0.0;\n-            }\n-            return 0.0;\n-        }\n-\n-        if (xa != xa || xa == Double.POSITIVE_INFINITY) {\n-            return Double.NaN;\n-        }\n-\n-        /* Perform any argument reduction */\n-        double xb = 0;\n-        if (xa > 3294198.0) {\n-            // PI * (2**20)\n-            // Argument too big for CodyWaite reduction.  Must use\n-            // PayneHanek.\n-            double reduceResults[] = new double[3];\n-            reducePayneHanek(xa, reduceResults);\n-            quadrant = ((int) reduceResults[0]) & 3;\n-            xa = reduceResults[1];\n-            xb = reduceResults[2];\n-        } else if (xa > 1.5707963267948966) {\n-            /* Inline the Cody/Waite reduction for performance */\n-\n-            // Estimate k\n-            //k = (int)(xa / 1.5707963267948966);\n-            int k = (int)(xa * 0.6366197723675814);\n-\n-            // Compute remainder\n-            double remA;\n-            double remB;\n-            while (true) {\n-                double a = -k * 1.570796251296997;\n-                remA = xa + a;\n-                remB = -(remA - xa - a);\n-\n-                a = -k * 7.549789948768648E-8;\n-                double b = remA;\n-                remA = a + b;\n-                remB += -(remA - b - a);\n-\n-                a = -k * 6.123233995736766E-17;\n-                b = remA;\n-                remA = a + b;\n-                remB += -(remA - b - a);\n-\n-                if (remA > 0.0) {\n-                    break;\n-                }\n-\n-                // Remainder is negative, so decrement k and try again.\n-                // This should only happen if the input is very close\n-                // to an even multiple of pi/2\n-                k--;\n-            }\n-            quadrant = k & 3;\n-            xa = remA;\n-            xb = remB;\n-        }\n-\n-        if (xa > 1.5) {\n-            // Accurracy suffers between 1.5 and PI/2\n-            final double pi2a = 1.5707963267948966;\n-            final double pi2b = 6.123233995736766E-17;\n-\n-            final double a = pi2a - xa;\n-            double b = -(a - pi2a + xa);\n-            b += pi2b - xb;\n-\n-            xa = a + b;\n-            xb = -(xa - a - b);\n-            quadrant ^= 1;\n-            negative ^= true;\n-        }\n-\n-        double result;\n-        if ((quadrant & 1) == 0) {\n-            result = tanQ(xa, xb, false);\n-        } else {\n-            result = -tanQ(xa, xb, true);\n-        }\n-\n-        if (negative) {\n-            result = -result;\n-        }\n-\n-        return result;\n-    }\n-\n-    /**\n-     * Arctangent function\n-     *  @param x a number\n-     *  @return atan(x)\n-     */\n-    public static double atan(double x) {\n-        return atan(x, 0.0, false);\n-    }\n-\n-    /** Internal helper function to compute arctangent.\n-     * @param xa number from which arctangent is requested\n-     * @param xb extra bits for x (may be 0.0)\n-     * @param leftPlane if true, result angle must be put in the left half plane\n-     * @return atan(xa + xb) (or angle shifted by {@code PI} if leftPlane is true)\n-     */\n-    private static double atan(double xa, double xb, boolean leftPlane) {\n-        boolean negate = false;\n-        int idx;\n-\n-        if (xa == 0.0) { // Matches +/- 0.0; return correct sign\n-            return leftPlane ? copySign(Math.PI, xa) : xa;\n-        }\n-\n-        if (xa < 0) {\n-            // negative\n-            xa = -xa;\n-            xb = -xb;\n-            negate = true;\n-        }\n-\n-        if (xa > 1.633123935319537E16) { // Very large input\n-            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);\n-        }\n-\n-        /* Estimate the closest tabulated arctan value, compute eps = xa-tangentTable */\n-        if (xa < 1.0) {\n-            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);\n-        } else {\n-            double temp = 1.0/xa;\n-            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);\n-        }\n-        double epsA = xa - TANGENT_TABLE_A[idx];\n-        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);\n-        epsB += xb - TANGENT_TABLE_B[idx];\n-\n-        double temp = epsA + epsB;\n-        epsB = -(temp - epsA - epsB);\n-        epsA = temp;\n-\n-        /* Compute eps = eps / (1.0 + xa*tangent) */\n-        temp = xa * HEX_40000000;\n-        double ya = xa + temp - temp;\n-        double yb = xb + xa - ya;\n-        xa = ya;\n-        xb += yb;\n-\n-        //if (idx > 8 || idx == 0)\n-        if (idx == 0) {\n-            /* If the slope of the arctan is gentle enough (< 0.45), this approximation will suffice */\n-            //double denom = 1.0 / (1.0 + xa*tangentTableA[idx] + xb*tangentTableA[idx] + xa*tangentTableB[idx] + xb*tangentTableB[idx]);\n-            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));\n-            //double denom = 1.0 / (1.0 + xa*tangentTableA[idx]);\n-            ya = epsA * denom;\n-            yb = epsB * denom;\n-        } else {\n-            double temp2 = xa * TANGENT_TABLE_A[idx];\n-            double za = 1.0 + temp2;\n-            double zb = -(za - 1.0 - temp2);\n-            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];\n-            temp = za + temp2;\n-            zb += -(temp - za - temp2);\n-            za = temp;\n-\n-            zb += xb * TANGENT_TABLE_B[idx];\n-            ya = epsA / za;\n-\n-            temp = ya * HEX_40000000;\n-            final double yaa = (ya + temp) - temp;\n-            final double yab = ya - yaa;\n-\n-            temp = za * HEX_40000000;\n-            final double zaa = (za + temp) - temp;\n-            final double zab = za - zaa;\n-\n-            /* Correct for rounding in division */\n-            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;\n-\n-            yb += -epsA * zb / za / za;\n-            yb += epsB / za;\n-        }\n-\n-\n-        epsA = ya;\n-        epsB = yb;\n-\n-        /* Evaluate polynomial */\n-        double epsA2 = epsA*epsA;\n-\n-        /*\n-    yb = -0.09001346640161823;\n-    yb = yb * epsA2 + 0.11110718400605211;\n-    yb = yb * epsA2 + -0.1428571349122913;\n-    yb = yb * epsA2 + 0.19999999999273194;\n-    yb = yb * epsA2 + -0.33333333333333093;\n-    yb = yb * epsA2 * epsA;\n-         */\n-\n-        yb = 0.07490822288864472;\n-        yb = yb * epsA2 + -0.09088450866185192;\n-        yb = yb * epsA2 + 0.11111095942313305;\n-        yb = yb * epsA2 + -0.1428571423679182;\n-        yb = yb * epsA2 + 0.19999999999923582;\n-        yb = yb * epsA2 + -0.33333333333333287;\n-        yb = yb * epsA2 * epsA;\n-\n-\n-        ya = epsA;\n-\n-        temp = ya + yb;\n-        yb = -(temp - ya - yb);\n-        ya = temp;\n-\n-        /* Add in effect of epsB.   atan'(x) = 1/(1+x^2) */\n-        yb += epsB / (1.0 + epsA * epsA);\n-\n-        double result;\n-        double resultb;\n-\n-        //result = yb + eighths[idx] + ya;\n-        double za = EIGHTHS[idx] + ya;\n-        double zb = -(za - EIGHTHS[idx] - ya);\n-        temp = za + yb;\n-        zb += -(temp - za - yb);\n-        za = temp;\n-\n-        result = za + zb;\n-        resultb = -(result - za - zb);\n-\n-        if (leftPlane) {\n-            // Result is in the left plane\n-            final double pia = 1.5707963267948966*2.0;\n-            final double pib = 6.123233995736766E-17*2.0;\n-\n-            za = pia - result;\n-            zb = -(za - pia + result);\n-            zb += pib - resultb;\n-\n-            result = za + zb;\n-            resultb = -(result - za - zb);\n-        }\n-\n-\n-        if (negate ^ leftPlane) {\n-            result = -result;\n-        }\n-\n-        return result;\n-    }\n-\n-    /**\n-     * Two arguments arctangent function\n-     * @param y ordinate\n-     * @param x abscissa\n-     * @return phase angle of point (x,y) between {@code -PI} and {@code PI}\n-     */\n-    public static double atan2(double y, double x) {\n-        if (x !=x || y != y) {\n-            return Double.NaN;\n-        }\n-\n-        if (y == 0.0) {\n-            double result = x*y;\n-            double invx = 1.0/x;\n-            double invy = 1.0/y;\n-\n-            if (invx == 0.0) { // X is infinite\n-                if (x > 0) {\n-                    return y; // return +/- 0.0\n-                } else {\n-                    return copySign(Math.PI, y);\n-                }\n-            }\n-\n-            if (x < 0.0 || invx < 0.0) {\n-                if (y < 0.0 || invy < 0.0) {\n-                    return -Math.PI;\n-                } else {\n-                    return Math.PI;\n+        private static final double[] EXP_FRAC_TABLE_B;\n+\n+        static {\n+            if (FastMath.USE_PRECOMPUTED_TABLES) {\n+                EXP_FRAC_TABLE_A = new double[FastMath.EXP_FRAC_TABLE_LEN];\n+                EXP_FRAC_TABLE_B = new double[FastMath.EXP_FRAC_TABLE_LEN];\n+\n+                final double tmp[] = new double[2];\n+                final double recip[] = new double[2];\n+\n+                // Populate expFracTable\n+                for (int i = 0; i < EXP_FRAC_TABLE_A.length; i++) {\n+                    FastMathCalc.slowexp(i/1024.0, tmp); // TWO_POWER_10\n+                    EXP_FRAC_TABLE_A[i] = tmp[0];\n+                    EXP_FRAC_TABLE_B[i] = tmp[1];\n                 }\n             } else {\n-                return result;\n+                EXP_FRAC_TABLE_A = new double[] {\n+      +1.0d,\n+      +1.0009770393371582d,\n+      +1.0019550323486328d,\n+      +1.0029339790344238d,\n+      +1.0039138793945312d,\n+      +1.004894733428955d,\n+      +1.0058765411376953d,\n+      +1.006859302520752d,\n+      +1.007843017578125d,\n+      +1.0088276863098145d,\n+      +1.0098135471343994d,\n+      +1.0108001232147217d,\n+      +1.0117876529693604d,\n+      +1.0127761363983154d,\n+      +1.013765811920166d,\n+      +1.014756202697754d,\n+      +1.0157477855682373d,\n+      +1.016740083694458d,\n+      +1.0177335739135742d,\n+      +1.0187277793884277d,\n+      +1.0197231769561768d,\n+      +1.0207195281982422d,\n+      +1.021716833114624d,\n+      +1.0227150917053223d,\n+      +1.023714303970337d,\n+      +1.024714469909668d,\n+      +1.0257158279418945d,\n+      +1.0267179012298584d,\n+      +1.0277209281921387d,\n+      +1.0287251472473145d,\n+      +1.0297303199768066d,\n+      +1.0307364463806152d,\n+      +1.0317435264587402d,\n+      +1.0327515602111816d,\n+      +1.0337605476379395d,\n+      +1.0347704887390137d,\n+      +1.0357816219329834d,\n+      +1.0367934703826904d,\n+      +1.037806510925293d,\n+      +1.038820505142212d,\n+      +1.0398354530334473d,\n+      +1.040851354598999d,\n+      +1.0418684482574463d,\n+      +1.0428862571716309d,\n+      +1.043905258178711d,\n+      +1.0449252128601074d,\n+      +1.0459461212158203d,\n+      +1.0469679832458496d,\n+      +1.0479910373687744d,\n+      +1.0490150451660156d,\n+      +1.0500397682189941d,\n+      +1.0510656833648682d,\n+      +1.0520927906036377d,\n+      +1.0531206130981445d,\n+      +1.0541496276855469d,\n+      +1.0551795959472656d,\n+      +1.0562105178833008d,\n+      +1.0572423934936523d,\n+      +1.0582754611968994d,\n+      +1.059309482574463d,\n+      +1.0603444576263428d,\n+      +1.061380386352539d,\n+      +1.0624175071716309d,\n+      +1.06345534324646d,\n+      +1.0644943714141846d,\n+      +1.0655345916748047d,\n+      +1.066575527191162d,\n+      +1.067617654800415d,\n+      +1.0686607360839844d,\n+      +1.0697050094604492d,\n+      +1.0707499980926514d,\n+      +1.071796178817749d,\n+      +1.072843313217163d,\n+      +1.0738916397094727d,\n+      +1.0749409198760986d,\n+      +1.075991153717041d,\n+      +1.0770423412322998d,\n+      +1.078094720840454d,\n+      +1.0791480541229248d,\n+      +1.080202341079712d,\n+      +1.0812578201293945d,\n+      +1.0823142528533936d,\n+      +1.083371639251709d,\n+      +1.08443021774292d,\n+      +1.0854897499084473d,\n+      +1.086550235748291d,\n+      +1.0876119136810303d,\n+      +1.088674545288086d,\n+      +1.089738130569458d,\n+      +1.0908029079437256d,\n+      +1.0918686389923096d,\n+      +1.092935562133789d,\n+      +1.094003438949585d,\n+      +1.0950722694396973d,\n+      +1.096142053604126d,\n+      +1.0972130298614502d,\n+      +1.09828519821167d,\n+      +1.099358320236206d,\n+      +1.1004323959350586d,\n+      +1.1015074253082275d,\n+      +1.102583646774292d,\n+      +1.103661060333252d,\n+      +1.1047391891479492d,\n+      +1.105818748474121d,\n+      +1.1068990230560303d,\n+      +1.107980489730835d,\n+      +1.1090631484985352d,\n+      +1.1101467609405518d,\n+      +1.1112313270568848d,\n+      +1.1123170852661133d,\n+      +1.1134037971496582d,\n+      +1.1144917011260986d,\n+      +1.1155805587768555d,\n+      +1.1166706085205078d,\n+      +1.1177616119384766d,\n+      +1.1188538074493408d,\n+      +1.1199469566345215d,\n+      +1.1210410594940186d,\n+      +1.1221363544464111d,\n+      +1.1232328414916992d,\n+      +1.1243302822113037d,\n+      +1.1254286766052246d,\n+      +1.126528263092041d,\n+      +1.127629041671753d,\n+      +1.1287307739257812d,\n+      +1.129833459854126d,\n+      +1.1309373378753662d,\n+      +1.132042407989502d,\n+      +1.133148431777954d,\n+      +1.1342556476593018d,\n+      +1.1353638172149658d,\n+      +1.1364731788635254d,\n+      +1.1375834941864014d,\n+      +1.1386950016021729d,\n+      +1.1398074626922607d,\n+      +1.1409211158752441d,\n+      +1.142035961151123d,\n+      +1.1431517601013184d,\n+      +1.14426851272583d,\n+      +1.1453864574432373d,\n+      +1.14650559425354d,\n+      +1.1476259231567383d,\n+      +1.148747205734253d,\n+      +1.149869441986084d,\n+      +1.1509928703308105d,\n+      +1.1521174907684326d,\n+      +1.153243064880371d,\n+      +1.154369831085205d,\n+      +1.1554977893829346d,\n+      +1.1566267013549805d,\n+      +1.1577568054199219d,\n+      +1.1588881015777588d,\n+      +1.160020351409912d,\n+      +1.161153793334961d,\n+      +1.1622881889343262d,\n+      +1.163423776626587d,\n+      +1.1645605564117432d,\n+      +1.1656982898712158d,\n+      +1.166837215423584d,\n+      +1.1679773330688477d,\n+      +1.1691184043884277d,\n+      +1.1702606678009033d,\n+      +1.1714041233062744d,\n+      +1.172548532485962d,\n+      +1.173694133758545d,\n+      +1.1748409271240234d,\n+      +1.1759889125823975d,\n+      +1.177137851715088d,\n+      +1.1782879829406738d,\n+      +1.1794393062591553d,\n+      +1.1805915832519531d,\n+      +1.1817450523376465d,\n+      +1.1828997135162354d,\n+      +1.1840553283691406d,\n+      +1.1852121353149414d,\n+      +1.1863701343536377d,\n+      +1.1875293254852295d,\n+      +1.1886897087097168d,\n+      +1.1898510456085205d,\n+      +1.1910135746002197d,\n+      +1.1921772956848145d,\n+      +1.1933419704437256d,\n+      +1.1945080757141113d,\n+      +1.1956751346588135d,\n+      +1.1968433856964111d,\n+      +1.1980125904083252d,\n+      +1.1991832256317139d,\n+      +1.200354814529419d,\n+      +1.2015275955200195d,\n+      +1.2027015686035156d,\n+      +1.2038767337799072d,\n+      +1.2050528526306152d,\n+      +1.2062301635742188d,\n+      +1.2074086666107178d,\n+      +1.2085883617401123d,\n+      +1.2097692489624023d,\n+      +1.210951328277588d,\n+      +1.2121343612670898d,\n+      +1.2133188247680664d,\n+      +1.2145042419433594d,\n+      +1.2156908512115479d,\n+      +1.2168786525726318d,\n+      +1.2180676460266113d,\n+      +1.2192575931549072d,\n+      +1.2204489707946777d,\n+      +1.2216413021087646d,\n+      +1.222834825515747d,\n+      +1.224029779434204d,\n+      +1.2252256870269775d,\n+      +1.2264227867126465d,\n+      +1.227621078491211d,\n+      +1.2288203239440918d,\n+      +1.2300209999084473d,\n+      +1.2312228679656982d,\n+      +1.2324256896972656d,\n+      +1.2336299419403076d,\n+      +1.234835147857666d,\n+      +1.23604154586792d,\n+      +1.2372493743896484d,\n+      +1.2384581565856934d,\n+      +1.2396681308746338d,\n+      +1.2408792972564697d,\n+      +1.2420918941497803d,\n+      +1.2433054447174072d,\n+      +1.2445201873779297d,\n+      +1.2457361221313477d,\n+      +1.2469532489776611d,\n+      +1.2481715679168701d,\n+      +1.2493910789489746d,\n+      +1.2506117820739746d,\n+      +1.2518336772918701d,\n+      +1.2530567646026611d,\n+      +1.2542810440063477d,\n+      +1.2555065155029297d,\n+      +1.2567331790924072d,\n+      +1.2579610347747803d,\n+      +1.2591900825500488d,\n+      +1.260420322418213d,\n+      +1.2616519927978516d,\n+      +1.2628846168518066d,\n+      +1.2641184329986572d,\n+      +1.2653534412384033d,\n+      +1.266589879989624d,\n+      +1.2678272724151611d,\n+      +1.2690660953521729d,\n+      +1.27030611038208d,\n+      +1.2715470790863037d,\n+      +1.272789478302002d,\n+      +1.2740330696105957d,\n+      +1.275277853012085d,\n+      +1.2765238285064697d,\n+      +1.27777099609375d,\n+      +1.2790195941925049d,\n+      +1.2802691459655762d,\n+      +1.281519889831543d,\n+      +1.2827720642089844d,\n+      +1.2840254306793213d,\n+      +1.2852799892425537d,\n+      +1.2865357398986816d,\n+      +1.287792682647705d,\n+      +1.2890510559082031d,\n+      +1.2903103828430176d,\n+      +1.2915711402893066d,\n+      +1.2928330898284912d,\n+      +1.2940962314605713d,\n+      +1.2953605651855469d,\n+      +1.296626091003418d,\n+      +1.2978930473327637d,\n+      +1.2991611957550049d,\n+      +1.3004305362701416d,\n+      +1.3017010688781738d,\n+      +1.3029727935791016d,\n+      +1.304245948791504d,\n+      +1.3055200576782227d,\n+      +1.3067958354949951d,\n+      +1.308072566986084d,\n+      +1.3093504905700684d,\n+      +1.3106298446655273d,\n+      +1.3119103908538818d,\n+      +1.3131921291351318d,\n+      +1.3144752979278564d,\n+      +1.3157594203948975d,\n+      +1.317044973373413d,\n+      +1.3183319568634033d,\n+      +1.31961989402771d,\n+      +1.3209092617034912d,\n+      +1.322199821472168d,\n+      +1.3234915733337402d,\n+      +1.324784755706787d,\n+      +1.3260791301727295d,\n+      +1.3273746967315674d,\n+      +1.3286716938018799d,\n+      +1.329969882965088d,\n+      +1.3312692642211914d,\n+      +1.3325698375701904d,\n+      +1.333871841430664d,\n+      +1.3351752758026123d,\n+      +1.336479663848877d,\n+      +1.3377854824066162d,\n+      +1.339092493057251d,\n+      +1.3404009342193604d,\n+      +1.3417105674743652d,\n+      +1.3430213928222656d,\n+      +1.3443336486816406d,\n+      +1.3456470966339111d,\n+      +1.3469617366790771d,\n+      +1.3482778072357178d,\n+      +1.349595069885254d,\n+      +1.3509137630462646d,\n+      +1.352233648300171d,\n+      +1.3535549640655518d,\n+      +1.3548774719238281d,\n+      +1.356201171875d,\n+      +1.3575263023376465d,\n+      +1.3588526248931885d,\n+      +1.360180139541626d,\n+      +1.361509084701538d,\n+      +1.3628394603729248d,\n+      +1.364171028137207d,\n+      +1.3655037879943848d,\n+      +1.366837978363037d,\n+      +1.368173360824585d,\n+      +1.3695101737976074d,\n+      +1.3708481788635254d,\n+      +1.372187614440918d,\n+      +1.373528242111206d,\n+      +1.3748703002929688d,\n+      +1.376213550567627d,\n+      +1.3775582313537598d,\n+      +1.378904104232788d,\n+      +1.380251407623291d,\n+      +1.3815999031066895d,\n+      +1.3829498291015625d,\n+      +1.384300947189331d,\n+      +1.3856534957885742d,\n+      +1.387007236480713d,\n+      +1.3883624076843262d,\n+      +1.389719009399414d,\n+      +1.3910768032073975d,\n+      +1.3924360275268555d,\n+      +1.393796443939209d,\n+      +1.395158290863037d,\n+      +1.3965213298797607d,\n+      +1.397885799407959d,\n+      +1.3992514610290527d,\n+      +1.4006187915802002d,\n+      +1.401987075805664d,\n+      +1.4033570289611816d,\n+      +1.4047281742095947d,\n+      +1.4061005115509033d,\n+      +1.4074742794036865d,\n+      +1.4088494777679443d,\n+      +1.4102261066436768d,\n+      +1.4116039276123047d,\n+      +1.4129831790924072d,\n+      +1.4143636226654053d,\n+      +1.415745496749878d,\n+      +1.4171288013458252d,\n+      +1.418513298034668d,\n+      +1.4198992252349854d,\n+      +1.4212865829467773d,\n+      +1.4226751327514648d,\n+      +1.424065351486206d,\n+      +1.4254565238952637d,\n+      +1.426849365234375d,\n+      +1.4282433986663818d,\n+      +1.4296388626098633d,\n+      +1.4310357570648193d,\n+      +1.432433843612671d,\n+      +1.433833360671997d,\n+      +1.4352343082427979d,\n+      +1.4366366863250732d,\n+      +1.4380402565002441d,\n+      +1.4394452571868896d,\n+      +1.4408516883850098d,\n+      +1.4422595500946045d,\n+      +1.4436686038970947d,\n+      +1.4450790882110596d,\n+      +1.446491003036499d,\n+      +1.447904348373413d,\n+      +1.4493188858032227d,\n+      +1.450735092163086d,\n+      +1.4521524906158447d,\n+      +1.4535713195800781d,\n+      +1.454991340637207d,\n+      +1.4564130306243896d,\n+      +1.4578359127044678d,\n+      +1.4592602252960205d,\n+      +1.460686206817627d,\n+      +1.4621131420135498d,\n+      +1.4635417461395264d,\n+      +1.4649717807769775d,\n+      +1.4664030075073242d,\n+      +1.4678359031677246d,\n+      +1.4692699909210205d,\n+      +1.470705509185791d,\n+      +1.4721424579620361d,\n+      +1.4735808372497559d,\n+      +1.475020408630371d,\n+      +1.47646164894104d,\n+      +1.4779040813446045d,\n+      +1.4793481826782227d,\n+      +1.4807934761047363d,\n+      +1.4822404384613037d,\n+      +1.4836885929107666d,\n+      +1.485138177871704d,\n+      +1.4865891933441162d,\n+      +1.488041639328003d,\n+      +1.4894955158233643d,\n+      +1.4909508228302002d,\n+      +1.4924075603485107d,\n+      +1.493865728378296d,\n+      +1.4953253269195557d,\n+      +1.49678635597229d,\n+      +1.49824857711792d,\n+      +1.4997124671936035d,\n+      +1.5011777877807617d,\n+      +1.5026445388793945d,\n+      +1.504112720489502d,\n+      +1.505582332611084d,\n+      +1.5070531368255615d,\n+      +1.5085256099700928d,\n+      +1.5099995136260986d,\n+      +1.511474847793579d,\n+      +1.5129516124725342d,\n+      +1.5144298076629639d,\n+      +1.5159096717834473d,\n+      +1.5173907279968262d,\n+      +1.5188732147216797d,\n+      +1.5203571319580078d,\n+      +1.5218427181243896d,\n+      +1.523329496383667d,\n+      +1.524817943572998d,\n+      +1.5263078212738037d,\n+      +1.5277988910675049d,\n+      +1.5292916297912598d,\n+      +1.5307857990264893d,\n+      +1.5322813987731934d,\n+      +1.5337786674499512d,\n+      +1.5352771282196045d,\n+      +1.5367772579193115d,\n+      +1.538278579711914d,\n+      +1.5397815704345703d,\n+      +1.5412859916687012d,\n+      +1.5427920818328857d,\n+      +1.5442993640899658d,\n+      +1.5458080768585205d,\n+      +1.547318458557129d,\n+      +1.548830270767212d,\n+      +1.5503435134887695d,\n+      +1.5518584251403809d,\n+      +1.5533745288848877d,\n+      +1.5548923015594482d,\n+      +1.5564115047454834d,\n+      +1.5579321384429932d,\n+      +1.5594542026519775d,\n+      +1.5609779357910156d,\n+      +1.5625030994415283d,\n+      +1.5640296936035156d,\n+      +1.5655577182769775d,\n+      +1.5670874118804932d,\n+      +1.5686185359954834d,\n+      +1.5701510906219482d,\n+      +1.5716853141784668d,\n+      +1.5732207298278809d,\n+      +1.5747578144073486d,\n+      +1.5762965679168701d,\n+      +1.577836513519287d,\n+      +1.5793781280517578d,\n+      +1.5809214115142822d,\n+      +1.5824658870697021d,\n+      +1.5840120315551758d,\n+      +1.5855598449707031d,\n+      +1.587108850479126d,\n+      +1.5886595249176025d,\n+      +1.5902118682861328d,\n+      +1.5917654037475586d,\n+      +1.593320608139038d,\n+      +1.5948774814605713d,\n+      +1.596435785293579d,\n+      +1.5979955196380615d,\n+      +1.5995566844940186d,\n+      +1.6011195182800293d,\n+      +1.6026840209960938d,\n+      +1.6042497158050537d,\n+      +1.6058173179626465d,\n+      +1.6073861122131348d,\n+      +1.6089565753936768d,\n+      +1.6105287075042725d,\n+      +1.6121022701263428d,\n+      +1.6136772632598877d,\n+      +1.6152539253234863d,\n+      +1.6168320178985596d,\n+      +1.6184117794036865d,\n+      +1.619992971420288d,\n+      +1.6215758323669434d,\n+      +1.6231601238250732d,\n+      +1.6247460842132568d,\n+      +1.626333475112915d,\n+      +1.627922534942627d,\n+      +1.6295130252838135d,\n+      +1.6311051845550537d,\n+      +1.6326987743377686d,\n+      +1.634294033050537d,\n+      +1.6358907222747803d,\n+      +1.6374890804290771d,\n+      +1.6390891075134277d,\n+      +1.640690565109253d,\n+      +1.6422934532165527d,\n+      +1.6438980102539062d,\n+      +1.6455042362213135d,\n+      +1.6471118927001953d,\n+      +1.6487212181091309d,\n+      +1.6503322124481201d,\n+      +1.651944637298584d,\n+      +1.6535584926605225d,\n+      +1.6551742553710938d,\n+      +1.6567914485931396d,\n+      +1.6584100723266602d,\n+      +1.6600303649902344d,\n+      +1.6616523265838623d,\n+      +1.663275957107544d,\n+      +1.6649010181427002d,\n+      +1.666527509689331d,\n+      +1.6681559085845947d,\n+      +1.669785737991333d,\n+      +1.671417236328125d,\n+      +1.6730501651763916d,\n+      +1.674684762954712d,\n+      +1.676321029663086d,\n+      +1.6779589653015137d,\n+      +1.679598331451416d,\n+      +1.681239366531372d,\n+      +1.6828820705413818d,\n+      +1.6845262050628662d,\n+      +1.6861720085144043d,\n+      +1.687819480895996d,\n+      +1.6894686222076416d,\n+      +1.6911191940307617d,\n+      +1.6927716732025146d,\n+      +1.6944255828857422d,\n+      +1.6960809230804443d,\n+      +1.6977381706237793d,\n+      +1.6993968486785889d,\n+      +1.7010571956634521d,\n+      +1.7027192115783691d,\n+      +1.7043828964233398d,\n+      +1.7060482501983643d,\n+      +1.7077150344848633d,\n+      +1.709383487701416d,\n+      +1.7110536098480225d,\n+      +1.7127254009246826d,\n+      +1.7143988609313965d,\n+      +1.716073989868164d,\n+      +1.7177505493164062d,\n+      +1.7194287776947021d,\n+      +1.7211089134216309d,\n+      +1.7227904796600342d,\n+      +1.7244737148284912d,\n+      +1.726158618927002d,\n+      +1.7278449535369873d,\n+      +1.7295331954956055d,\n+      +1.7312231063842773d,\n+      +1.7329144477844238d,\n+      +1.7346076965332031d,\n+      +1.736302375793457d,\n+      +1.7379989624023438d,\n+      +1.739696979522705d,\n+      +1.7413966655731201d,\n+      +1.7430980205535889d,\n+      +1.7448012828826904d,\n+      +1.7465059757232666d,\n+      +1.7482123374938965d,\n+      +1.74992036819458d,\n+      +1.7516300678253174d,\n+      +1.7533416748046875d,\n+      +1.7550547122955322d,\n+      +1.7567694187164307d,\n+      +1.7584857940673828d,\n+      +1.7602040767669678d,\n+      +1.7619237899780273d,\n+      +1.7636451721191406d,\n+      +1.7653684616088867d,\n+      +1.7670931816101074d,\n+      +1.768819808959961d,\n+      +1.770547866821289d,\n+      +1.77227783203125d,\n+      +1.7740094661712646d,\n+      +1.775742769241333d,\n+      +1.777477741241455d,\n+      +1.7792143821716309d,\n+      +1.7809526920318604d,\n+      +1.7826926708221436d,\n+      +1.7844345569610596d,\n+      +1.7861778736114502d,\n+      +1.7879230976104736d,\n+      +1.7896699905395508d,\n+      +1.7914185523986816d,\n+      +1.7931687831878662d,\n+      +1.7949209213256836d,\n+      +1.7966744899749756d,\n+      +1.7984299659729004d,\n+      +1.800187110900879d,\n+      +1.8019459247589111d,\n+      +1.8037066459655762d,\n+      +1.8054687976837158d,\n+      +1.8072328567504883d,\n+      +1.8089985847473145d,\n+      +1.8107659816741943d,\n+      +1.812535285949707d,\n+      +1.8143062591552734d,\n+      +1.8160789012908936d,\n+      +1.8178532123565674d,\n+      +1.819629430770874d,\n+      +1.8214070796966553d,\n+      +1.8231868743896484d,\n+      +1.8249680995941162d,\n+      +1.8267512321472168d,\n+      +1.828536033630371d,\n+      +1.830322504043579d,\n+      +1.83211088180542d,\n+      +1.8339009284973145d,\n+      +1.8356926441192627d,\n+      +1.8374862670898438d,\n+      +1.8392815589904785d,\n+      +1.841078519821167d,\n+      +1.8428773880004883d,\n+      +1.8446779251098633d,\n+      +1.846480131149292d,\n+      +1.8482842445373535d,\n+      +1.8500902652740479d,\n+      +1.8518977165222168d,\n+      +1.8537070751190186d,\n+      +1.8555183410644531d,\n+      +1.8573312759399414d,\n+      +1.8591458797454834d,\n+      +1.8609623908996582d,\n+      +1.8627805709838867d,\n+      +1.864600658416748d,\n+      +1.866422414779663d,\n+      +1.8682458400726318d,\n+      +1.8700714111328125d,\n+      +1.8718984127044678d,\n+      +1.8737273216247559d,\n+      +1.8755581378936768d,\n+      +1.8773906230926514d,\n+      +1.8792247772216797d,\n+      +1.8810608386993408d,\n+      +1.8828988075256348d,\n+      +1.8847384452819824d,\n+      +1.886579990386963d,\n+      +1.888423204421997d,\n+      +1.890268325805664d,\n+      +1.8921151161193848d,\n+      +1.8939638137817383d,\n+      +1.8958141803741455d,\n+      +1.8976664543151855d,\n+      +1.8995206356048584d,\n+      +1.901376485824585d,\n+      +1.9032342433929443d,\n+      +1.9050939083099365d,\n+      +1.9069552421569824d,\n+      +1.908818244934082d,\n+      +1.9106833934783936d,\n+      +1.9125502109527588d,\n+      +1.9144186973571777d,\n+      +1.9162893295288086d,\n+      +1.9181616306304932d,\n+      +1.9200356006622314d,\n+      +1.9219114780426025d,\n+      +1.9237892627716064d,\n+      +1.9256689548492432d,\n+      +1.9275505542755127d,\n+      +1.929433822631836d,\n+      +1.931318759918213d,\n+      +1.9332058429718018d,\n+      +1.9350945949554443d,\n+      +1.9369852542877197d,\n+      +1.938877820968628d,\n+      +1.940772294998169d,\n+      +1.9426684379577637d,\n+      +1.9445664882659912d,\n+      +1.9464664459228516d,\n+      +1.9483680725097656d,\n+      +1.9502718448638916d,\n+      +1.9521772861480713d,\n+      +1.9540846347808838d,\n+      +1.955993890762329d,\n+      +1.9579050540924072d,\n+      +1.959817886352539d,\n+      +1.9617326259613037d,\n+      +1.9636495113372803d,\n+      +1.9655680656433105d,\n+      +1.9674885272979736d,\n+      +1.9694106578826904d,\n+      +1.9713349342346191d,\n+      +1.9732608795166016d,\n+      +1.975188970565796d,\n+      +1.977118730545044d,\n+      +1.9790503978729248d,\n+      +1.9809842109680176d,\n+      +1.982919692993164d,\n+      +1.9848570823669434d,\n+      +1.9867963790893555d,\n+      +1.9887375831604004d,\n+      +1.990680456161499d,\n+      +1.9926254749298096d,\n+      +1.994572401046753d,\n+      +1.996521234512329d,\n+      +1.998471736907959d,\n+      +2.000424385070801d,\n+      +2.0023789405822754d,\n+      +2.004335403442383d,\n+      +2.006293773651123d,\n+      +2.008254051208496d,\n+      +2.010216236114502d,\n+      +2.0121798515319824d,\n+      +2.014145851135254d,\n+      +2.016113758087158d,\n+      +2.0180835723876953d,\n+      +2.0200552940368652d,\n+      +2.022029399871826d,\n+      +2.0240049362182617d,\n+      +2.02598237991333d,\n+      +2.0279617309570312d,\n+      +2.0299429893493652d,\n+      +2.0319266319274902d,\n+      +2.03391170501709d,\n+      +2.0358991622924805d,\n+      +2.0378880500793457d,\n+      +2.039879322052002d,\n+      +2.041872501373291d,\n+      +2.0438671112060547d,\n+      +2.0458641052246094d,\n+      +2.047863006591797d,\n+      +2.049863815307617d,\n+      +2.0518670082092285d,\n+      +2.0538716316223145d,\n+      +2.055878162384033d,\n+      +2.057887077331543d,\n+      +2.0598974227905273d,\n+      +2.0619101524353027d,\n+      +2.063924789428711d,\n+      +2.065941333770752d,\n+      +2.067959785461426d,\n+      +2.0699801445007324d,\n+      +2.07200288772583d,\n+      +2.0740270614624023d,\n+      +2.0760536193847656d,\n+      +2.0780820846557617d,\n+      +2.0801124572753906d,\n+      +2.0821447372436523d,\n+      +2.084178924560547d,\n+      +2.0862154960632324d,\n+      +2.0882534980773926d,\n+      +2.0902938842773438d,\n+      +2.0923361778259277d,\n+      +2.0943803787231445d,\n+      +2.0964269638061523d,\n+      +2.0984749794006348d,\n+      +2.100525379180908d,\n+      +2.1025776863098145d,\n+      +2.1046319007873535d,\n+      +2.1066884994506836d,\n+      +2.1087465286254883d,\n+      +2.110806941986084d,\n+      +2.1128692626953125d,\n+      +2.114933490753174d,\n+      +2.117000102996826d,\n+      +2.1190686225891113d,\n+      +2.1211390495300293d,\n+      +2.12321138381958d,\n+      +2.1252856254577637d,\n+      +2.1273622512817383d,\n+      +2.1294407844543457d,\n+      +2.131521224975586d,\n+      +2.133604049682617d,\n+      +2.135688304901123d,\n+      +2.13777494430542d,\n+      +2.139863967895508d,\n+      +2.1419544219970703d,\n+      +2.144047260284424d,\n+      +2.14614200592041d,\n+      +2.1482391357421875d,\n+      +2.1503376960754395d,\n+      +2.1524391174316406d,\n+      +2.1545419692993164d,\n+      +2.156647205352783d,\n+      +2.1587538719177246d,\n+      +2.1608633995056152d,\n+      +2.1629743576049805d,\n+      +2.1650876998901367d,\n+      +2.167203426361084d,\n+      +2.169320583343506d,\n+      +2.1714401245117188d,\n+      +2.1735615730285645d,\n+      +2.175685405731201d,\n+      +2.1778111457824707d,\n+      +2.179938793182373d,\n+      +2.1820688247680664d,\n+      +2.1842007637023926d,\n+      +2.1863350868225098d,\n+      +2.1884708404541016d,\n+      +2.1906094551086426d,\n+      +2.192749500274658d,\n+      +2.194891929626465d,\n+      +2.1970362663269043d,\n+      +2.1991829872131348d,\n+      +2.201331615447998d,\n+      +2.2034826278686523d,\n+      +2.2056355476379395d,\n+      +2.2077903747558594d,\n+      +2.2099475860595703d,\n+      +2.212106704711914d,\n+      +2.214268207550049d,\n+      +2.2164316177368164d,\n+      +2.218596935272217d,\n+      +2.220764636993408d,\n+      +2.2229342460632324d,\n+      +2.2251062393188477d,\n+      +2.2272801399230957d,\n+      +2.2294564247131348d,\n+      +2.2316346168518066d,\n+      +2.2338151931762695d,\n+      +2.2359976768493652d,\n+      +2.2381820678710938d,\n+      +2.2403693199157715d,\n+      +2.242558002471924d,\n+      +2.244749069213867d,\n+      +2.2469425201416016d,\n+      +2.2491378784179688d,\n+      +2.2513351440429688d,\n+      +2.2535347938537598d,\n+      +2.2557363510131836d,\n+      +2.2579402923583984d,\n+      +2.2601466178894043d,\n+      +2.262354850769043d,\n+      +2.2645654678344727d,\n+      +2.266777992248535d,\n+      +2.2689924240112305d,\n+      +2.271209716796875d,\n+      +2.273428440093994d,\n+      +2.2756495475769043d,\n+      +2.2778730392456055d,\n+      +2.2800989151000977d,\n+      +2.2823266983032227d,\n+      +2.2845563888549805d,\n+      +2.2867884635925293d,\n+      +2.289022922515869d,\n+      +2.291259288787842d,\n+      +2.2934980392456055d,\n+      +2.295738697052002d,\n+      +2.2979817390441895d,\n+      +2.300227165222168d,\n+      +2.3024744987487793d,\n+      +2.3047242164611816d,\n+      +2.306975841522217d,\n+      +2.309229850769043d,\n+      +2.31148624420166d,\n+      +2.31374454498291d,\n+      +2.316005229949951d,\n+      +2.318267822265625d,\n+      +2.32053279876709d,\n+      +2.3228001594543457d,\n+      +2.3250694274902344d,\n+      +2.3273415565490723d,\n+      +2.3296151161193848d,\n+      +2.3318915367126465d,\n+      +2.334169864654541d,\n+      +2.3364500999450684d,\n+      +2.338733196258545d,\n+      +2.3410181999206543d,\n+      +2.3433055877685547d,\n+      +2.345594882965088d,\n+      +2.347886562347412d,\n+      +2.3501806259155273d,\n+      +2.3524770736694336d,\n+      +2.3547754287719727d,\n+      +2.3570761680603027d,\n+      +2.3593788146972656d,\n+      +2.3616843223571777d,\n+      +2.3639917373657227d,\n+      +2.3663015365600586d,\n+      +2.3686132431030273d,\n+      +2.370927333831787d,\n+      +2.373243808746338d,\n+      +2.3755626678466797d,\n+      +2.3778839111328125d,\n+      +2.380207061767578d,\n+      +2.3825325965881348d,\n+      +2.3848605155944824d,\n+      +2.387190818786621d,\n+      +2.3895230293273926d,\n+      +2.391857624053955d,\n+      +2.3941946029663086d,\n+      +2.396533966064453d,\n+      +2.3988752365112305d,\n+      +2.401218891143799d,\n+      +2.4035654067993164d,\n+      +2.4059133529663086d,\n+      +2.40826416015625d,\n+      +2.4106173515319824d,\n+      +2.4129724502563477d,\n+      +2.415329933166504d,\n+      +2.417689800262451d,\n+      +2.4200520515441895d,\n+      +2.4224166870117188d,\n+      +2.424783229827881d,\n+      +2.427152633666992d,\n+      +2.4295239448547363d,\n+      +2.4318976402282715d,\n+      +2.4342737197875977d,\n+      +2.436652183532715d,\n+      +2.439032554626465d,\n+      +2.441415786743164d,\n+      +2.4438014030456543d,\n+      +2.4461889266967773d,\n+      +2.4485788345336914d,\n+      +2.4509711265563965d,\n+      +2.4533658027648926d,\n+      +2.4557628631591797d,\n+      +2.458162307739258d,\n+      +2.460564136505127d,\n+      +2.462968349456787d,\n+      +2.46537446975708d,\n+      +2.4677834510803223d,\n+      +2.4701943397521973d,\n+      +2.4726080894470215d,\n+      +2.4750237464904785d,\n+      +2.4774417877197266d,\n+      +2.479862689971924d,\n+      +2.482285499572754d,\n+      +2.484710693359375d,\n+      +2.487138271331787d,\n+      +2.4895682334899902d,\n+      +2.4920010566711426d,\n+      +2.4944357872009277d,\n+      +2.496872901916504d,\n+      +2.499312400817871d,\n+      +2.5017542839050293d,\n+      +2.5041985511779785d,\n+      +2.5066452026367188d,\n+      +2.50909423828125d,\n+      +2.5115456581115723d,\n+      +2.5139999389648438d,\n+      +2.516456127166748d,\n+      +2.5189146995544434d,\n+      +2.5213756561279297d,\n+      +2.5238394737243652d,\n+      +2.5263051986694336d,\n+      +2.528773307800293d,\n+      +2.5312442779541016d,\n+      +2.533717155456543d,\n+      +2.5361928939819336d,\n+      +2.538670539855957d,\n+      +2.5411510467529297d,\n+      +2.5436339378356934d,\n+      +2.546119213104248d,\n+      +2.5486068725585938d,\n+      +2.5510969161987305d,\n+      +2.553589344024658d,\n+      +2.556084632873535d,\n+      +2.558581829071045d,\n+      +2.5610814094543457d,\n+      +2.5635838508605957d,\n+      +2.5660886764526367d,\n+      +2.5685958862304688d,\n+      +2.571105480194092d,\n+      +2.573617458343506d,\n+      +2.576131820678711d,\n+      +2.5786490440368652d,\n+      +2.5811686515808105d,\n+      +2.5836901664733887d,\n+      +2.586214542388916d,\n+      +2.5887417793273926d,\n+      +2.591270923614502d,\n+      +2.5938024520874023d,\n+      +2.596336841583252d,\n+      +2.5988736152648926d,\n+      +2.601412773132324d,\n+      +2.603954315185547d,\n+      +2.6064987182617188d,\n+      +2.6090455055236816d,\n+      +2.6115946769714355d,\n+      +2.6141462326049805d,\n+      +2.6167001724243164d,\n+      +2.6192569732666016d,\n+      +2.6218161582946777d,\n+      +2.624377727508545d,\n+      +2.626941680908203d,\n+      +2.6295084953308105d,\n+      +2.632077217102051d,\n+      +2.6346492767333984d,\n+      +2.637223243713379d,\n+      +2.6398000717163086d,\n+      +2.6423792839050293d,\n+      +2.644960880279541d,\n+      +2.6475448608398438d,\n+      +2.6501317024230957d,\n+      +2.6527209281921387d,\n+      +2.655313014984131d,\n+      +2.657907009124756d,\n+      +2.6605043411254883d,\n+      +2.6631035804748535d,\n+      +2.665705680847168d,\n+      +2.6683101654052734d,\n+      +2.67091703414917d,\n+      +2.6735267639160156d,\n+      +2.6761388778686523d,\n+      +2.67875337600708d,\n+      +2.681370735168457d,\n+      +2.683990478515625d,\n+      +2.686613082885742d,\n+      +2.689237594604492d,\n+      +2.6918654441833496d,\n+      +2.69449520111084d,\n+      +2.6971278190612793d,\n+      +2.699763298034668d,\n+      +2.7024011611938477d,\n+      +2.7050414085388184d,\n+      +2.70768404006958d,\n+      +2.710329532623291d,\n+      +2.712977886199951d,\n+      +2.7156286239624023d,\n+      +2.7182817459106445d,\n+                };\n+\n+                EXP_FRAC_TABLE_B = new double[] {\n+      +0.0d,\n+      +1.552583321178453E-10d,\n+      +1.2423699995465188E-9d,\n+      +4.194022929828008E-9d,\n+      +9.94381632344361E-9d,\n+      +1.9426261544163577E-8d,\n+      +3.3576783010266685E-8d,\n+      +5.3331719086630523E-8d,\n+      +7.962832297769345E-8d,\n+      +1.1340476362128895E-7d,\n+      -8.281845251820919E-8d,\n+      -3.126416414805498E-8d,\n+      +3.058997113995161E-8d,\n+      +1.0368579417304741E-7d,\n+      -4.9452513107409435E-8d,\n+      +4.8955889659397494E-8d,\n+      -7.698155155722897E-8d,\n+      +5.051784853384516E-8d,\n+      -4.443661736519001E-8d,\n+      +1.1593958457401774E-7d,\n+      +5.575759739697068E-8d,\n+      +1.4385227981629147E-8d,\n+      -7.227368462584163E-9d,\n+      -8.129108387083023E-9d,\n+      +1.263202100290635E-8d,\n+      +5.600896265625552E-8d,\n+      -1.154629885168314E-7d,\n+      -2.399186832888246E-8d,\n+      +9.295948298604103E-8d,\n+      -2.070841011504222E-9d,\n+      -6.97066538508643E-8d,\n+      -1.0898941254272996E-7d,\n+      -1.1895963756343625E-7d,\n+      -9.865691193993138E-8d,\n+      -4.711988033385175E-8d,\n+      +3.6613751875298095E-8d,\n+      -8.491135959370133E-8d,\n+      +6.610611940107793E-8d,\n+      +1.3794148633283659E-8d,\n+      -2.462631860370667E-9d,\n+      +1.830278273495162E-8d,\n+      +7.705834203598065E-8d,\n+      -6.364563771711373E-8d,\n+      +7.39978436695387E-8d,\n+      +1.4122417557484554E-8d,\n+      -3.881598887298574E-9d,\n+      +2.0958481826069642E-8d,\n+      +8.96162975425619E-8d,\n+      -3.535214171178576E-8d,\n+      -1.1455271549574576E-7d,\n+      +9.140964977432485E-8d,\n+      +1.0667524445105459E-7d,\n+      -6.777752790396222E-8d,\n+      +4.586785041291296E-8d,\n+      -2.8245462428022094E-8d,\n+      -5.071761314397018E-8d,\n+      -2.0566368810068663E-8d,\n+      +6.319146317890346E-8d,\n+      -3.687854305539139E-8d,\n+      -8.137269363160008E-8d,\n+      -6.930491127388755E-8d,\n+      +3.1184473002226595E-10d,\n+      -1.0995299963140049E-7d,\n+      +7.772668425499348E-8d,\n+      +8.750367485925089E-8d,\n+      -7.963112393823186E-8d,\n+      +5.415131809829094E-8d,\n+      +1.3006683896462346E-8d,\n+      +3.634736373360733E-8d,\n+      -1.132504393233074E-7d,\n+      +4.2046187038837375E-8d,\n+      +2.6396811618001066E-8d,\n+      +7.92177143584738E-8d,\n+      -3.691100820545433E-8d,\n+      -8.257112559083188E-8d,\n+      -5.676200971739166E-8d,\n+      +4.151794514828518E-8d,\n+      -2.5147255753587636E-8d,\n+      -1.7335469415174996E-8d,\n+      +6.595784859136531E-8d,\n+      -1.2680354928109105E-8d,\n+      -1.3824992526093461E-8d,\n+      +6.353142754175797E-8d,\n+      -1.8021197722549054E-8d,\n+      -1.9054827792903468E-8d,\n+      +6.144098503892116E-8d,\n+      -1.3940903373095247E-8d,\n+      -5.7694907599522404E-9d,\n+      +8.696863522320578E-8d,\n+      +2.6869297963554945E-8d,\n+      +5.3366470162689076E-8d,\n+      -7.094204160127543E-8d,\n+      -1.0662027949814858E-7d,\n+      -5.26498707801063E-8d,\n+      +9.198855229106814E-8d,\n+      +8.989677431456647E-8d,\n+      -5.790384407322479E-8d,\n+      -1.1197236522467887E-7d,\n+      -7.12854317090566E-8d,\n+      +6.51813137650059E-8d,\n+      +6.003465022483798E-8d,\n+      -8.569906238528267E-8d,\n+      +1.0584469687624562E-7d,\n+      -7.956144278281947E-8d,\n+      +7.43676272093501E-8d,\n+      +9.182512565315022E-8d,\n+      -2.6157563728873715E-8d,\n+      -4.012947040998503E-8d,\n+      +5.094280572218447E-8d,\n+      +9.675095351161728E-9d,\n+      +7.552139802281006E-8d,\n+      +1.1099566726533146E-8d,\n+      +5.58656252899437E-8d,\n+      -2.756054703800197E-8d,\n+      +2.791018095971047E-10d,\n+      -9.799351869734466E-8d,\n+      -8.291832428736212E-8d,\n+      +4.654720780112994E-8d,\n+      +5.302803981406403E-8d,\n+      -6.243126731995636E-8d,\n+      -6.036655299348577E-8d,\n+      +6.026878587378257E-8d,\n+      +6.210379583313526E-8d,\n+      -5.381287389094251E-8d,\n+      -4.8012970400697E-8d,\n+      +8.055420567281602E-8d,\n+      +9.452180117175641E-8d,\n+      -5.057430382371206E-9d,\n+      +2.1288872215266507E-8d,\n+      -6.380305844689076E-8d,\n+      -2.0858800984600168E-8d,\n+      -8.724006061713588E-8d,\n+      -2.3470351753125604E-8d,\n+      -6.690931338790221E-8d,\n+      +2.192160831263035E-8d,\n+      +5.6648446166177225E-9d,\n+      -1.1461755745719884E-7d,\n+      -9.944393412663547E-8d,\n+      +5.2249837964645906E-8d,\n+      +1.0311034276196487E-7d,\n+      +5.4203784018566126E-8d,\n+      -9.340259278913173E-8d,\n+      -1.0022192034216903E-7d,\n+      +3.481513333662908E-8d,\n+      +7.436036590244714E-8d,\n+      +1.9485199912395296E-8d,\n+      +1.0968068384729757E-7d,\n+      +1.0760175582979094E-7d,\n+      +1.4322981952798675E-8d,\n+      +6.933855730431659E-8d,\n+      +3.530656968851287E-8d,\n+      -8.669526204279467E-8d,\n+      -5.7169586962345785E-8d,\n+      -1.1345515834332824E-7d,\n+      -1.605251622332555E-8d,\n+      -2.298302779758532E-9d,\n+      -7.110952399338234E-8d,\n+      +1.70164513845372E-8d,\n+      +2.4746155561368937E-8d,\n+      -4.6834239957353325E-8d,\n+      +4.1781076667923185E-8d,\n+      +5.326182134294869E-8d,\n+      -1.1302647617762544E-8d,\n+      +8.759667154796094E-8d,\n+      +1.126326877851684E-7d,\n+      +6.48979555673987E-8d,\n+      -5.451390316294111E-8d,\n+      -6.0896188500539086E-9d,\n+      -2.7152010585461855E-8d,\n+      -1.1660424775832058E-7d,\n+      -3.492984900939992E-8d,\n+      -1.944841848873016E-8d,\n+      -6.905990750285027E-8d,\n+      +5.575538653428039E-8d,\n+      +1.1768108384670781E-7d,\n+      +1.178204606523101E-7d,\n+      +5.727787111340131E-8d,\n+      -6.284125161007433E-8d,\n+      -3.0118152047565877E-9d,\n+      -5.448044533034374E-10d,\n+      -5.433154287341921E-8d,\n+      +7.515630833946181E-8d,\n+      -8.780756503572527E-8d,\n+      -6.527407547535494E-8d,\n+      -9.45487863616303E-8d,\n+      +6.390098458668406E-8d,\n+      -6.564672913105876E-8d,\n+      -5.238488022920792E-9d,\n+      +7.824500749252316E-9d,\n+      -2.5339299158309795E-8d,\n+      -1.036103313062145E-7d,\n+      +1.2550633697348567E-8d,\n+      +8.584676196065558E-8d,\n+      +1.1740089468291563E-7d,\n+      +1.0833697012353316E-7d,\n+      +5.978002467397905E-8d,\n+      -2.7143806069290897E-8d,\n+      +8.711129287069315E-8d,\n+      -7.316349947981893E-8d,\n+      -3.00015852582934E-8d,\n+      -2.0691000399732483E-8d,\n+      -4.4100097152254264E-8d,\n+      -9.909612209943178E-8d,\n+      +5.38733640215475E-8d,\n+      -6.0893829005035E-8d,\n+      +3.457553391989844E-8d,\n+      +1.0300006058273187E-7d,\n+      -9.290053015365092E-8d,\n+      -7.514966995961323E-8d,\n+      -8.10254145615142E-8d,\n+      -1.0938612624777085E-7d,\n+      +7.932952721989251E-8d,\n+      +9.428257290008738E-9d,\n+      -7.952636967837795E-8d,\n+      +5.203033137154554E-8d,\n+      -7.159157201731446E-8d,\n+      +2.7593424989059015E-8d,\n+      +1.1231621190000476E-7d,\n+      -5.469119869891027E-8d,\n+      +4.560067256086347E-9d,\n+      +5.280427179595944E-8d,\n+      +9.119538242455128E-8d,\n+      -1.1753008498403413E-7d,\n+      -9.537874867759656E-8d,\n+      -7.96118345325538E-8d,\n+      -6.907085854395348E-8d,\n+      -6.259620482221904E-8d,\n+      -5.902712448725381E-8d,\n+      -5.720173456146447E-8d,\n+      -5.5957016861703E-8d,\n+      -5.412881689012608E-8d,\n+      -5.0551842723970724E-8d,\n+      -4.405966390424518E-8d,\n+      -3.348471032333413E-8d,\n+      -1.7658271111516935E-8d,\n+      +4.589506477601956E-9d,\n+      +3.4429618182751655E-8d,\n+      +7.303420385174346E-8d,\n+      -1.168420305422519E-7d,\n+      -5.718749537552229E-8d,\n+      +1.4754809136835937E-8d,\n+      +1.001616104682875E-7d,\n+      -3.8207793300052055E-8d,\n+      +7.766278405014509E-8d,\n+      -2.7883635712109803E-8d,\n+      -1.1524714043067699E-7d,\n+      +5.517333625963128E-8d,\n+      +7.724278756071081E-9d,\n+      -1.7990934773848504E-8d,\n+      -2.0786347668702902E-8d,\n+      +5.251554594269693E-10d,\n+      +4.7131849857076246E-8d,\n+      -1.1819540733893871E-7d,\n+      -1.742885956093543E-8d,\n+      +1.1220467571570283E-7d,\n+      +3.347954541376715E-8d,\n+      -1.399157980498908E-8d,\n+      -2.9013441705763093E-8d,\n+      -1.0389614239253089E-8d,\n+      +4.307749759934266E-8d,\n+      -1.0583192018912101E-7d,\n+      +2.0919226941745448E-8d,\n+      -5.2305110482722706E-8d,\n+      -8.588407110184028E-8d,\n+      -7.861419797923639E-8d,\n+      -2.929085835358592E-8d,\n+      +6.329175751021792E-8d,\n+      -3.807794163054899E-8d,\n+      -9.377320954068088E-8d,\n+      -1.0258469865953145E-7d,\n+      -6.330187984612758E-8d,\n+      +2.5286958775281306E-8d,\n+      -7.40238661307607E-8d,\n+      +1.1681688445204168E-7d,\n+      -1.1623125976292733E-7d,\n+      -5.6696107089038004E-8d,\n+      +5.822140627806124E-8d,\n+      -8.678466172071259E-9d,\n+      -1.7757121899175995E-8d,\n+      +3.220665454652531E-8d,\n+      -9.598330731102836E-8d,\n+      +7.573375369829243E-8d,\n+      +7.174547784678893E-8d,\n+      -1.0672213971363184E-7d,\n+      +1.8395252217743006E-8d,\n+      -2.8511112548600118E-8d,\n+      -7.79306270997787E-9d,\n+      +8.178019529487065E-8d,\n+      +3.0220784595602374E-9d,\n+      -4.4156343103298585E-9d,\n+      +6.07014616741277E-8d,\n+      -3.8809601937571554E-8d,\n+      -6.329342805230603E-8d,\n+      -1.1511990258493999E-8d,\n+      +1.177739474561431E-7d,\n+      +8.738625278484571E-8d,\n+      -1.0143341551207646E-7d,\n+      +2.9394972678456236E-8d,\n+      +4.278345398213486E-9d,\n+      +6.28805835150457E-8d,\n+      -3.197037359731606E-8d,\n+      -4.060821046423735E-8d,\n+      +3.82160283750664E-8d,\n+      -3.2666060441373307E-8d,\n+      -1.3584500601329896E-8d,\n+      +9.671332777035621E-8d,\n+      +6.10626893063691E-8d,\n+      +1.1913723189736356E-7d,\n+      +3.3774671482641995E-8d,\n+      +4.4651109654500895E-8d,\n+      -8.539328154875224E-8d,\n+      -1.166799420361101E-7d,\n+      -4.794765976694151E-8d,\n+      -1.1635256954820579E-7d,\n+      -8.221241452580445E-8d,\n+      +5.5737717715868425E-8d,\n+      +6.034539636024073E-8d,\n+      -6.712199323081945E-8d,\n+      -8.697724830833087E-8d,\n+      +2.0494942705297694E-9d,\n+      -3.718924074653624E-8d,\n+      +3.499747150995707E-8d,\n+      -1.8535359161566028E-8d,\n+      +4.1905679587096103E-8d,\n+      -2.0821912536551675E-8d,\n+      +3.297776915751238E-8d,\n+      -3.3835280846270374E-8d,\n+      +1.8437339356553904E-8d,\n+      -4.734187609526424E-8d,\n+      +8.527976799299225E-9d,\n+      -5.1088103279787804E-8d,\n+      +1.3513294656751725E-8d,\n+      -3.480032127343472E-8d,\n+      +4.367697180842916E-8d,\n+      +1.1815196363705356E-8d,\n+      +1.0932279207149782E-7d,\n+      +9.907230065250944E-8d,\n+      -1.764389559496152E-8d,\n+      -1.1135725625095859E-9d,\n+      -8.846040040259342E-8d,\n+      -3.996962588736431E-8d,\n+      -9.276238757878814E-8d,\n+      -7.12139818505956E-9d,\n+      -2.016525972830718E-8d,\n+      +1.0782585410141121E-7d,\n+      -9.868269632073771E-8d,\n+      +7.686861750031585E-8d,\n+      -7.947087669425045E-8d,\n+      -8.955768055535647E-8d,\n+      +4.791582240886607E-8d,\n+      +9.583994718167641E-8d,\n+      +5.5524866689108584E-8d,\n+      -7.171796605211277E-8d,\n+      -4.6157237582310713E-8d,\n+      -1.0489751005162237E-7d,\n+      -8.204903560604627E-9d,\n+      +6.818588687884566E-9d,\n+      -5.850916105103205E-8d,\n+      +3.5549586192569994E-8d,\n+      +5.1896700056778354E-8d,\n+      -8.146080588190463E-9d,\n+      +9.516285362051742E-8d,\n+      -1.1368933260611668E-7d,\n+      +8.187871486648885E-8d,\n+      -3.206182925646474E-8d,\n+      +2.265440168347286E-8d,\n+      +8.938334752179552E-9d,\n+      -7.187922490287331E-8d,\n+      +1.9952407216533937E-8d,\n+      +4.734805892507655E-8d,\n+      +1.1642439930208906E-8d,\n+      -8.582843599651953E-8d,\n+      -5.3086706437795354E-9d,\n+      +1.6121782610217253E-8d,\n+      -2.0197142620980974E-8d,\n+      -1.129242035557684E-7d,\n+      -2.2298267863810133E-8d,\n+      +1.4605950309628873E-8d,\n+      -8.663710700190489E-10d,\n+      -6.736873974532501E-8d,\n+      +5.486523121881414E-8d,\n+      -1.0965249168570443E-7d,\n+      -8.27343074126263E-8d,\n+      -1.0144703278439455E-7d,\n+      +7.39809943048038E-8d,\n+      -3.193297932837415E-8d,\n+      +5.900393284617182E-8d,\n+      +1.0973020465397083E-7d,\n+      -1.1681436418514489E-7d,\n+      +9.5985669644661E-8d,\n+      +3.423560333632085E-8d,\n+      -6.22836197265283E-8d,\n+      +4.621027492345726E-8d,\n+      -1.1575484316683829E-7d,\n+      -6.997545435826076E-8d,\n+      -5.3502441327259514E-8d,\n+      -6.49667713553005E-8d,\n+      -1.029980741248172E-7d,\n+      +7.219393868923887E-8d,\n+      -1.4854841678687828E-8d,\n+      +1.1406713393562271E-7d,\n+      -1.650155887561251E-8d,\n+      +7.165331603232264E-8d,\n+      -9.692697614257269E-8d,\n+      -4.402550702194912E-8d,\n+      -6.679737442193143E-9d,\n+      +1.6492800268960003E-8d,\n+      +2.68759245092879E-8d,\n+      +2.5854805721793077E-8d,\n+      +1.4815967715704613E-8d,\n+      -4.852711011229633E-9d,\n+      -3.176199594915881E-8d,\n+      -6.452129525125173E-8d,\n+      -1.01738658407525E-7d,\n+      +9.639780418418697E-8d,\n+      +5.4445606140746644E-8d,\n+      +1.2219361033150988E-8d,\n+      -2.8883532688356087E-8d,\n+      -6.746431126005811E-8d,\n+      -1.0212284427080097E-7d,\n+      +1.0696094577483825E-7d,\n+      +8.43527683868743E-8d,\n+      +6.987544103716777E-8d,\n+      +6.493457409236137E-8d,\n+      +7.093715125593688E-8d,\n+      +8.929153091001965E-8d,\n+      -1.1701113164306871E-7d,\n+      -6.972256643013266E-8d,\n+      -5.848862070736576E-9d,\n+      +7.602385197610123E-8d,\n+      -6.110775144284437E-8d,\n+      +6.101012058093429E-8d,\n+      -3.304167134225169E-8d,\n+      -1.0342514383702196E-7d,\n+      +8.969907328603505E-8d,\n+      +7.091600108064668E-8d,\n+      +8.006778743052707E-8d,\n+      +1.1857939200074815E-7d,\n+      -5.0541412403312774E-8d,\n+      +5.0970277930552287E-8d,\n+      -5.229355472795119E-8d,\n+      +1.1793478462381443E-7d,\n+      +8.625007227318527E-8d,\n+      +9.250422086873268E-8d,\n+      -1.0028661472061573E-7d,\n+      -1.384914052949463E-8d,\n+      +1.1483560326413004E-7d,\n+      +4.878798101459259E-8d,\n+      +2.7866921183936055E-8d,\n+      +5.3514180410849046E-8d,\n+      -1.1124565511436785E-7d,\n+      +1.186914813275767E-8d,\n+      -5.253258132241335E-8d,\n+      -6.458486486369316E-8d,\n+      -2.2838888809969377E-8d,\n+      +7.415557606805398E-8d,\n+      -1.0568403170659571E-8d,\n+      -3.7139182948393606E-8d,\n+      -4.1022790876160215E-9d,\n+      +8.999821367768787E-8d,\n+      +8.201043988912348E-9d,\n+      -9.616457442665051E-9d,\n+      +3.8005886250603055E-8d,\n+      -8.588890051473289E-8d,\n+      +9.699937202692456E-8d,\n+      +1.11298006674538E-7d,\n+      -4.1527104733570825E-8d,\n+      +1.1682852007826251E-7d,\n+      +1.1099648061301941E-7d,\n+      -5.755303038890997E-8d,\n+      +8.948877445235827E-8d,\n+      +7.675780395028194E-8d,\n+      -9.427143563390596E-8d,\n+      +5.471416081500162E-8d,\n+      +4.8354824064383506E-8d,\n+      -1.118706134478866E-7d,\n+      +5.235528379688445E-8d,\n+      +6.567708120053687E-8d,\n+      -7.042204992948526E-8d,\n+      -1.1603891006723397E-7d,\n+      -6.968742825553785E-8d,\n+      +7.01199184127881E-8d,\n+      +6.645352711199266E-8d,\n+      -7.919617109348822E-8d,\n+      +1.1149986927391714E-7d,\n+      -7.522074418324674E-8d,\n+      +7.739252980388984E-8d,\n+      +9.39987974788905E-8d,\n+      -2.390421480210064E-8d,\n+      -3.639873824357815E-8d,\n+      +5.8015881615938497E-8d,\n+      +2.2423186335040668E-8d,\n+      +9.674534330665206E-8d,\n+      +4.4068830785712375E-8d,\n+      +1.0431875573076199E-7d,\n+      +4.0584538834428926E-8d,\n+      +9.279423236781974E-8d,\n+      +2.404020521381534E-8d,\n+      +7.425346071427343E-8d,\n+      +6.529321706138789E-9d,\n+      +6.080174837146273E-8d,\n+      +1.6902327633329284E-10d,\n+      +6.456806922371733E-8d,\n+      +1.7100134295216033E-8d,\n+      +9.770510970673519E-8d,\n+      +6.94872148530716E-8d,\n+      -6.602926393514549E-8d,\n+      -6.889997193778161E-8d,\n+      +6.240235720677117E-8d,\n+      +9.098790295810902E-8d,\n+      +1.8386917534879182E-8d,\n+      +8.454972737414241E-8d,\n+      +5.259099728747365E-8d,\n+      -7.595453077213505E-8d,\n+      -6.113203624663034E-8d,\n+      +9.859622328905143E-8d,\n+      -7.206766550807255E-8d,\n+      -9.474579567171831E-8d,\n+      +3.210408693366267E-8d,\n+      +7.160716418525417E-8d,\n+      +2.530870537724554E-8d,\n+      -1.0524451040704701E-7d,\n+      -8.008561371849434E-8d,\n+      +1.0233519853128553E-7d,\n+      -3.326791455362767E-8d,\n+      -8.504961764629757E-9d,\n+      -6.024017201863256E-8d,\n+      +5.1500902632092514E-8d,\n+      +8.98570720774568E-8d,\n+      +5.638724693948384E-8d,\n+      -4.734813904255994E-8d,\n+      +1.8631451577542948E-8d,\n+      +1.7470924137873214E-8d,\n+      -4.926470933588261E-8d,\n+      +5.84096713620797E-8d,\n+      +1.0364355880696472E-7d,\n+      +8.800655674349468E-8d,\n+      +1.3069802481237792E-8d,\n+      +1.1882454749452428E-7d,\n+      -6.999215748398631E-8d,\n+      -7.49674072510849E-8d,\n+      +1.054760847603618E-7d,\n+      -3.920012014371067E-9d,\n+      +7.526183084319617E-8d,\n+      +1.0618494853096868E-7d,\n+      +9.043280094115832E-8d,\n+      +2.9590395068826316E-8d,\n+      -7.475571347653619E-8d,\n+      +1.7401160143611842E-8d,\n+      +6.923209420670962E-8d,\n+      +8.232829924979753E-8d,\n+      +5.82825404854514E-8d,\n+      -1.3108606792380822E-9d,\n+      -9.485602512220194E-8d,\n+      +1.7663064617118723E-8d,\n+      +9.942682855652123E-8d,\n+      -8.638275100090915E-8d,\n+      -6.132639063569726E-8d,\n+      -6.221897889344726E-8d,\n+      -8.745525834919404E-8d,\n+      +1.029901759234897E-7d,\n+      +3.3888561478632076E-8d,\n+      -5.47315553588771E-8d,\n+      +7.715994473741065E-8d,\n+      -4.566098167230033E-8d,\n+      +5.5257514455273825E-8d,\n+      -9.530545662611411E-8d,\n+      -1.889488909834863E-8d,\n+      +4.769006625301079E-8d,\n+      +1.0607041998938709E-7d,\n+      -8.054981263802322E-8d,\n+      -3.370929373457322E-8d,\n+      +9.799164177397836E-9d,\n+      +5.160291611526656E-8d,\n+      +9.333090708652975E-8d,\n+      -1.0180490545927503E-7d,\n+      -5.533523366931846E-8d,\n+      -4.044932340334176E-9d,\n+      +5.370131904567218E-8d,\n+      -1.1887814032213867E-7d,\n+      -4.3307634616102625E-8d,\n+      +4.363437558318513E-8d,\n+      -9.482896784430338E-8d,\n+      +1.9782818312325887E-8d,\n+      -8.77224935488516E-8d,\n+      +6.113879253864931E-8d,\n+      -8.822335132515693E-9d,\n+      -5.753754066078771E-8d,\n+      -8.335545536862392E-8d,\n+      -8.462309712606694E-8d,\n+      -5.968586877433824E-8d,\n+      -6.887556547891059E-9d,\n+      +7.542967150507818E-8d,\n+      -4.949331199790077E-8d,\n+      +9.684172421525468E-8d,\n+      +3.9260317944365246E-8d,\n+      +1.784536881359796E-8d,\n+      +3.426282345243592E-8d,\n+      +9.018025618601154E-8d,\n+      -5.1151708476133135E-8d,\n+      +8.877492215808044E-8d,\n+      +3.479545684576179E-8d,\n+      +2.7002575714977818E-8d,\n+      +6.707201545505014E-8d,\n+      -8.173742908533777E-8d,\n+      +5.909041310777802E-8d,\n+      +1.439903710393587E-8d,\n+      +2.4289317341982113E-8d,\n+      +9.044519282818302E-8d,\n+      -2.3866331257845713E-8d,\n+      -7.853944465095286E-8d,\n+      -7.188526769607005E-8d,\n+      -2.2132706360079843E-9d,\n+      -1.0624985110080394E-7d,\n+      +9.453598391231829E-8d,\n+      -1.134160131581847E-7d,\n+      -1.315295870404327E-8d,\n+      -7.981320644583728E-8d,\n+      -7.327771300038971E-8d,\n+      +8.155647334672472E-9d,\n+      -7.222791579580787E-8d,\n+      -7.430436987497092E-8d,\n+      +3.633404807819848E-9d,\n+      -7.512438321498593E-8d,\n+      -7.044869765481105E-8d,\n+      +1.9372589859580955E-8d,\n+      -4.2365298585101096E-8d,\n+      -1.552830824758035E-8d,\n+      +1.0160071259930585E-7d,\n+      +7.232201430620959E-8d,\n+      -1.0164389431039905E-7d,\n+      +5.826233477413577E-8d,\n+      +7.6927415825689E-8d,\n+      -4.392309439525734E-8d,\n+      -6.414337408955734E-8d,\n+      +1.799550702470095E-8d,\n+      -3.4194410638967946E-8d,\n+      +1.9437762419688045E-8d,\n+      -5.7792549966531335E-8d,\n+      -2.5731071572354522E-8d,\n+      +1.173595905705643E-7d,\n+      -1.0361863127101014E-7d,\n+      +2.8330789837569332E-8d,\n+      +3.81131861433539E-8d,\n+      -7.252724942149532E-8d,\n+      -6.342604067787756E-8d,\n+      +6.716441526213986E-8d,\n+      +8.257484966196574E-8d,\n+      -1.5443717968117592E-8d,\n+      +1.3280021798948244E-8d,\n+      -6.79180673261558E-8d,\n+      -1.8863249269709046E-8d,\n+      -7.62162303263991E-8d,\n+      +2.011589233663723E-10d,\n+      -2.62683511147141E-8d,\n+      +8.455684903712996E-8d,\n+      +9.602293320384794E-8d,\n+      +9.896378545255258E-9d,\n+      +6.636396724067746E-8d,\n+      +2.8777050870552646E-8d,\n+      -1.0109271059094341E-7d,\n+      -8.305334708631055E-8d,\n+      +8.467026501338835E-8d,\n+      -7.29821745001452E-8d,\n+      -7.739491336852633E-8d,\n+      +7.321238022013781E-8d,\n+      -9.621538067089515E-8d,\n+      -1.0705722541811197E-7d,\n+      +4.247240125405735E-8d,\n+      +1.1574222007764044E-7d,\n+      +1.145412771487496E-7d,\n+      +4.066036653218687E-8d,\n+      -1.0410796803072171E-7d,\n+      -7.955085231106037E-8d,\n+      +1.1612776191572459E-7d,\n+      +7.888519481107568E-9d,\n+      +7.436813814737735E-8d,\n+      +7.894935661289349E-8d,\n+      +2.343525263620692E-8d,\n+      -9.036933434595339E-8d,\n+      -2.2239222395888823E-8d,\n+      -8.784622656707742E-9d,\n+      -4.819540032304379E-8d,\n+      +9.975892708522332E-8d,\n+      -3.9945124955316294E-8d,\n+      +1.1345047468988893E-8d,\n+      +1.702808472925844E-8d,\n+      -2.10770182066344E-8d,\n+      -1.0114948914089626E-7d,\n+      +1.70518021921727E-8d,\n+      +9.693260855961159E-8d,\n+      -9.809953482725758E-8d,\n+      -8.937957126662392E-8d,\n+      -1.134963954323427E-7d,\n+      +6.980004387880031E-8d,\n+      -1.4494150014095534E-8d,\n+      +1.122932337832262E-7d,\n+      -2.483811732227808E-8d,\n+      +5.278759515330048E-8d,\n+      +1.0859222881334994E-7d,\n+      -9.400056055939758E-8d,\n+      -7.630957994128623E-8d,\n+      -7.490757191850264E-8d,\n+      -8.794689652049879E-8d,\n+      -1.1357810855950775E-7d,\n+      +8.846862323478745E-8d,\n+      +4.32092015744956E-8d,\n+      -9.082923009890997E-9d,\n+      -6.655106680680314E-8d,\n+      +1.1108184705020206E-7d,\n+      +4.8838973948592766E-8d,\n+      -1.2998975819628988E-8d,\n+      -7.25680516883106E-8d,\n+      -1.280024819379844E-7d,\n+      -1.7743467191652895E-7d,\n+      -2.1899520225809197E-7d,\n+      +2.2602433110285232E-7d,\n+      +2.0582268590356215E-7d,\n+      +1.9911192455808124E-7d,\n+      +2.0776878313278689E-7d,\n+      +2.3367183133931002E-7d,\n+      -1.9813568387704588E-7d,\n+      -1.320972037315105E-7d,\n+      -4.316580502355056E-8d,\n+      +7.054443447243064E-8d,\n+      +2.109212796025238E-7d,\n+      -9.698281856949837E-8d,\n+      +1.0239791185239086E-7d,\n+      -1.4271754202157014E-7d,\n+      +1.232402895636637E-7d,\n+      -5.150590480969644E-8d,\n+      -1.882201085012735E-7d,\n+      +1.918355503889933E-7d,\n+      +1.368893262241355E-7d,\n+      +1.256828068633383E-7d,\n+      +1.601222826656464E-7d,\n+      -2.3472125169205568E-7d,\n+      -1.032634625827871E-7d,\n+      +7.957037517331382E-8d,\n+      -1.6114314525832115E-7d,\n+      +1.3018591370778052E-7d,\n+      +1.8007284821359149E-9d,\n+      -6.75421764491544E-8d,\n+      -7.592155950645605E-8d,\n+      -2.1414301981236817E-8d,\n+      +9.79045937979623E-8d,\n+      -1.9287515190177685E-7d,\n+      +6.184953843236509E-8d,\n+      -8.966500602352001E-8d,\n+      -1.686490951669855E-7d,\n+      -1.7316830893872364E-7d,\n+      -1.0128633727463388E-7d,\n+      +4.8935021740786486E-8d,\n+      -1.9740129448026905E-7d,\n+      +1.1532102163380318E-7d,\n+      +3.5371542244169364E-8d,\n+      +4.153321337726989E-8d,\n+      +1.3575372396796738E-7d,\n+      -1.5685449228299222E-7d,\n+      +1.1933437776279623E-7d,\n+      +1.2599421120614435E-8d,\n+      +1.7331079674066365E-9d,\n+      +8.869266069401045E-8d,\n+      -2.013999442282902E-7d,\n+      +8.709065843311144E-8d,\n+      +2.453117120472083E-9d,\n+      +2.3489472779602617E-8d,\n+      +1.5216652792122652E-7d,\n+      -8.638415150333099E-8d,\n+      -2.1335475961524608E-7d,\n+      -2.2677272333821516E-7d,\n+      -1.246635423141374E-7d,\n+      +9.494921297991565E-8d,\n+      -4.27932550865546E-8d,\n+      -5.907349480138712E-8d,\n+      +4.809072216941908E-8d,\n+      -1.9615359732789476E-7d,\n+      +1.6385396676990034E-7d,\n+      +1.7642714221524228E-7d,\n+      -1.564440844355254E-7d,\n+      +1.2090653407564583E-7d,\n+      +5.679855838941285E-8d,\n+      +1.3006497185242537E-7d,\n+      -1.341336085949317E-7d,\n+      +2.1987686050231372E-7d,\n+      -2.3641341460419062E-7d,\n+      -7.048932272279454E-8d,\n+      -2.3401958604540354E-7d,\n+      +2.2867766559333004E-7d,\n+      -1.1089952719756529E-7d,\n+      +1.7977178878541792E-7d,\n+      +1.4903074102418675E-7d,\n+      -2.011072593789072E-7d,\n+      +8.504948422097802E-8d,\n+      +5.5846006716348844E-8d,\n+      +1.9014079059505456E-7d,\n+      +1.3119976852347583E-8d,\n+      +3.645999732952202E-9d,\n+      +1.6374611405314333E-7d,\n+      +1.8612397134087598E-8d,\n+      +4.7113225346448296E-8d,\n+      -2.2555535676499395E-7d,\n+      +1.5631615647329739E-7d,\n+      -2.3574653182047758E-7d,\n+      +3.08072210937242E-8d,\n+      +4.344259288116142E-9d,\n+      +1.6374489573868447E-7d,\n+      +3.42171232580676E-8d,\n+      +9.46452492584643E-8d,\n+      -1.297587351085525E-7d,\n+      -1.601065201853145E-7d,\n+      +5.6550495386976275E-9d,\n+      -1.0725602261510391E-7d,\n+      -1.9945408945084193E-8d,\n+      -2.071910882200156E-7d,\n+      -1.900947109027913E-7d,\n+      +3.34069282059055E-8d,\n+      -1.145810806477298E-8d,\n+      +1.5421457732308477E-7d,\n+      +5.5657084775121975E-8d,\n+      +1.7177785285061278E-7d,\n+      +2.7813027425289027E-8d,\n+      +1.0267509648109748E-7d,\n+      -7.839574072711142E-8d,\n+      -3.648293887796095E-8d,\n+      +2.3049492079013518E-7d,\n+      -2.290530257391564E-7d,\n+      +1.747018414872141E-8d,\n+      +1.8477759656842807E-8d,\n+      -2.2394073401050633E-7d,\n+      -2.3085653185818848E-7d,\n+      -1.7598351175286083E-10d,\n+      -6.640551220774385E-9d,\n+      +2.2868466674913266E-7d,\n+      +2.3106230530437902E-7d,\n+      +2.594209135294356E-9d,\n+      +2.2221434720602702E-8d,\n+      -1.847872222755186E-7d,\n+      -1.3948659218254467E-7d,\n+      +1.6023339607737848E-7d,\n+      -2.3718944120137026E-7d,\n+      +1.0087056692827474E-7d,\n+      +2.228553660510707E-7d,\n+      +1.3088328582956644E-7d,\n+      -1.7292527438195104E-7d,\n+      -2.0961068531216087E-7d,\n+      +2.2951597845188004E-8d,\n+      +5.005103745740068E-8d,\n+      -1.2618366811281002E-7d,\n+      -2.6784582477238417E-8d,\n+      -1.2645600379949252E-7d,\n+      +5.3774170051560117E-8d,\n+      +3.9205810725333715E-8d,\n+      -1.6802196396307013E-7d,\n+      -8.893078799284047E-8d,\n+      -1.9821451970481713E-7d,\n+      -1.689060694498032E-8d,\n+      -1.9648717830943396E-8d,\n+      -2.0433926409457167E-7d,\n+      -9.1973399031975E-8d,\n+      -1.5723449006087263E-7d,\n+      +7.887051614592191E-8d,\n+      +1.4166246290402286E-7d,\n+      +3.330146018487787E-8d,\n+      +2.3278688667580978E-7d,\n+      -2.1139124097042925E-7d,\n+      +1.334449995534113E-7d,\n+      -1.6104730195920897E-7d,\n+      -1.3902314592614197E-7d,\n+      +2.0169027167169864E-7d,\n+      -9.040643863751471E-8d,\n+      -5.946190852360168E-8d,\n+      -1.8013411720005014E-7d,\n+      +2.6595401669835947E-8d,\n+      +8.607292924069425E-8d,\n+      +4.84038176769263E-10d,\n+      -2.2798356346688802E-7d,\n+      -1.203028719549339E-7d,\n+      -1.5111906039270745E-7d,\n+      +1.5859915617670956E-7d,\n+      -1.426262681506497E-7d,\n+      -9.892260062323546E-8d,\n+      -1.8492643515928268E-7d,\n+      +7.840210076743552E-8d,\n+      +2.1643071541578027E-7d,\n+      +2.313664294893465E-7d,\n+      +1.2541842003811723E-7d,\n+      -9.920197743470107E-8d,\n+      +3.655589133934081E-8d,\n+      +5.807052689551411E-8d,\n+      -3.244024724169575E-8d,\n+      -2.327564406466327E-7d,\n+      -6.38187356721971E-8d,\n+      -2.3995994000400915E-10d,\n+      -3.9793609609721186E-8d,\n+      -1.802510054588344E-7d,\n+      +5.745586744591196E-8d,\n+      +1.987228872666507E-7d,\n+      -2.3105188606976847E-7d,\n+      +2.0088042407239129E-7d,\n+      +6.624793114025702E-8d,\n+      -1.5587043044056635E-7d,\n+      +1.3606464059428694E-8d,\n+      +1.0008761540741556E-7d,\n+      +1.058213771597129E-7d,\n+      +3.3058299602856804E-8d,\n+      -1.1594886810010702E-7d,\n+      +1.378919824418909E-7d,\n+      -1.5683631181406778E-7d,\n+      -4.4200075770425176E-8d,\n+      +1.2250985436706623E-9d,\n+      -1.8297013058336644E-8d,\n+      -1.005004229646318E-7d,\n+      +2.337202285991116E-7d,\n+      +3.296104292035678E-8d,\n+      -2.23668185816307E-7d,\n+      -5.7055442971184756E-8d,\n+      +5.82391923137467E-8d,\n+      +1.244950238958056E-7d,\n+      +1.4399358260219398E-7d,\n+      +1.1901862840583523E-7d,\n+      +5.1856152603337505E-8d,\n+      -5.520562000491495E-8d,\n+      -1.9987622893254038E-7d,\n+      +9.697418238031897E-8d,\n+      -1.1603376405901542E-7d,\n+      +1.170714288147407E-7d,\n+      -1.550851303094034E-7d,\n+      +2.3472546699189522E-8d,\n+      +1.78211222185955E-7d,\n+      -1.6540009048230807E-7d,\n+      -5.137865010872577E-8d,\n+      +4.57490653163866E-8d,\n+      +1.2829599363166098E-7d,\n+      +1.985773325073412E-7d,\n+      -2.1792661654989742E-7d,\n+      -1.652218131743459E-7d,\n+      -1.178234251477505E-7d,\n+      -7.34071933723896E-8d,\n+      -2.9646587857612632E-8d,\n+      +1.5787194498912167E-8d,\n+      +6.52252321321176E-8d,\n+      +1.2100088103262734E-7d,\n+      +1.8544977697201776E-7d,\n+      -2.159273204728711E-7d,\n+      -1.2711589287782304E-7d,\n+      -2.2610609958205195E-8d,\n+      +9.993330547750349E-8d,\n+      -2.33974236642384E-7d,\n+      -6.830955860192377E-8d,\n+      +1.2244183812423448E-7d,\n+      -1.3620325027706252E-7d,\n+      +1.1178574689680927E-7d,\n+      -8.490693031052439E-8d,\n+      +2.2975389535985893E-7d,\n+      +1.0445707500867073E-7d,\n+      +1.8405243253979117E-8d,\n+      -2.6033812325397097E-8d,\n+      -2.6489990728664908E-8d,\n+      +1.9409124727247465E-8d,\n+      +1.1403826867020365E-7d,\n+      -2.1706266226554237E-7d,\n+      -1.7839974359909697E-8d,\n+      +2.3725087624341041E-7d,\n+      +7.37567604176979E-8d,\n+      -2.9098805266958403E-8d,\n+      -6.892713087722722E-8d,\n+      -4.333719263537725E-8d,\n+      +5.006436936098099E-8d,\n+      +2.1367325342138113E-7d,\n+      -2.6949659655907758E-8d,\n+      -1.9256682968755803E-7d,\n+      +1.960616287777496E-7d,\n+      +1.876664741413704E-7d,\n+      -2.1534486893602122E-7d,\n+      -5.688830723853217E-8d,\n+      +1.8861113228746644E-7d,\n+      +4.6730779443102234E-8d,\n+      -3.275360514112964E-9d,\n+      +4.1011920825226876E-8d,\n+      +1.820141955326842E-7d,\n+      -5.468175655175594E-8d,\n+      -1.8981247089866317E-7d,\n+      -2.209492705846306E-7d,\n+      -1.4566110577298295E-7d,\n+      +3.848544860465368E-8d,\n+      -1.429109630340783E-7d,\n+      -2.105749999899302E-7d,\n+      -1.6206609756618993E-7d,\n+      +5.058693461947143E-9d,\n+      -1.8359244902596882E-7d,\n+      +2.2810251664891242E-7d,\n+      -1.8791776732592608E-7d,\n+      +1.3106843166204263E-9d,\n+      -1.5543153797220025E-7d,\n+      -1.7884997059081524E-7d,\n+      -6.648490725635754E-8d,\n+      +1.8412576154421806E-7d,\n+      +9.860939269906055E-8d,\n+      +1.5627006743114285E-7d,\n+      -1.17260039161597E-7d,\n+      +2.3416513526430908E-7d,\n+      -2.1749172296989992E-7d,\n+      -3.9242560971295217E-8d,\n+      -1.822826971477839E-7d,\n+      -1.6729355321895212E-7d,\n+      +8.208715337901827E-9d,\n+      -1.301267783434537E-7d,\n+      -1.029741755377153E-7d,\n+      +9.215765583599035E-8d,\n+      -1.907487641016455E-8d,\n+      +4.2661388254716074E-8d,\n+      -1.9697226735187428E-7d,\n+      +2.1819935527247946E-7d,\n+      -1.398318929248588E-7d,\n+      +1.6195123407015624E-7d,\n+      +1.723826394935661E-7d,\n+      -1.0602700638269148E-7d,\n+      -1.9392742205954563E-7d,\n+      -8.880302882034106E-8d,\n+      +2.1186420987133E-7d,\n+      +2.3375763256988976E-7d,\n+      -2.0599801342241997E-8d,\n+      -7.184550924856607E-8d,\n+      +8.254840070367875E-8d,\n+                };\n             }\n         }\n-\n-        // y cannot now be zero\n-\n-        if (y == Double.POSITIVE_INFINITY) {\n-            if (x == Double.POSITIVE_INFINITY) {\n-                return Math.PI/4.0;\n+    }\n+\n+    private static final int LN_MANT_LEN = TWO_POWER_10; // (see LN_MANT comment below)\n+\n+    // Enclose large data table in nested static class so it's only loaded on first access\n+    private static class lnMant {\n+        /** Extended precision logarithm table over the range 1 - 2 in increments of 2^-10. */\n+        private static final double[][] LN_MANT;\n+\n+        static {\n+            if (FastMath.USE_PRECOMPUTED_TABLES) {\n+                LN_MANT = new double[FastMath.LN_MANT_LEN][];\n+\n+                // Populate lnMant table\n+                for (int i = 0; i < LN_MANT.length; i++) {\n+                    final double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );\n+                    LN_MANT[i] = FastMathCalc.slowLog(d);\n+                }\n+            } else {\n+                LN_MANT = new double[][] { \n+      {+0.0d,                   +0.0d,                   }, // 0\n+      {+9.760860120877624E-4d,  -3.903230345984362E-11d, }, // 1\n+      {+0.0019512202125042677d, -8.124251825289188E-11d, }, // 2\n+      {+0.0029254043474793434d, -1.8374207360194882E-11d,}, // 3\n+      {+0.0038986406289041042d, -2.1324678121885073E-10d,}, // 4\n+      {+0.004870930686593056d,  -4.5199654318611534E-10d,}, // 5\n+      {+0.00584227591753006d,   -2.933016992001806E-10d, }, // 6\n+      {+0.006812678650021553d,  -2.325147219074669E-10d, }, // 7\n+      {+0.007782140746712685d,  -3.046577356838847E-10d, }, // 8\n+      {+0.008750664070248604d,  -5.500631513861575E-10d, }, // 9\n+      {+0.00971824862062931d,   +8.48292035519895E-10d,  }, // 10\n+      {+0.010684899985790253d,  +1.1422610134013436E-10d,}, // 11\n+      {+0.01165061630308628d,   +9.168889933128375E-10d, }, // 12\n+      {+0.012615403160452843d,  -5.303786078838E-10d,    }, // 13\n+      {+0.013579258695244789d,  -5.688639355498786E-10d, }, // 14\n+      {+0.01454218477010727d,   +7.296670293275653E-10d, }, // 15\n+      {+0.015504186972975731d,  -4.370104767451421E-10d, }, // 16\n+      {+0.016465261578559875d,  +1.43695591408832E-9d,   }, // 17\n+      {+0.01742541790008545d,   -1.1862263158849434E-9d, }, // 18\n+      {+0.018384650349617004d,  -9.482976524690715E-10d, }, // 19\n+      {+0.01934296265244484d,   +1.9068609515836638E-10d,}, // 20\n+      {+0.020300358533859253d,  +2.655990315697216E-10d, }, // 21\n+      {+0.021256837993860245d,  +1.0315548713040775E-9d, }, // 22\n+      {+0.022212404757738113d,  +5.13345647019085E-10d,  }, // 23\n+      {+0.02316705882549286d,   +4.5604151934208014E-10d,}, // 24\n+      {+0.02412080392241478d,   -1.1255706987475148E-9d, }, // 25\n+      {+0.025073636323213577d,  +1.2289023836765196E-9d, }, // 26\n+      {+0.02602556347846985d,   +1.7990281828096504E-9d, }, // 27\n+      {+0.026976589113473892d,  -1.4152718164638451E-9d, }, // 28\n+      {+0.02792670577764511d,   +7.568772963781632E-10d, }, // 29\n+      {+0.0288759246468544d,    -1.1449998592111558E-9d, }, // 30\n+      {+0.029824241995811462d,  -1.6850976862319495E-9d, }, // 31\n+      {+0.030771657824516296d,  +8.422373919843096E-10d, }, // 32\n+      {+0.0317181795835495d,    +6.872350402175489E-10d, }, // 33\n+      {+0.03266380727291107d,   -4.541194749189272E-10d, }, // 34\n+      {+0.03360854089260101d,   -8.9064764856495E-10d,   }, // 35\n+      {+0.034552380442619324d,  +1.0640404096769032E-9d, }, // 36\n+      {+0.0354953333735466d,    -3.5901655945224663E-10d,}, // 37\n+      {+0.03643739968538284d,   -3.4829517943661266E-9d, }, // 38\n+      {+0.037378571927547455d,  +8.149473794244232E-10d, }, // 39\n+      {+0.03831886500120163d,   -6.990650304449166E-10d, }, // 40\n+      {+0.03925827145576477d,   +1.0883076226453258E-9d, }, // 41\n+      {+0.040196798741817474d,  +3.845192807999274E-10d, }, // 42\n+      {+0.04113444685935974d,   -1.1570594692045927E-9d, }, // 43\n+      {+0.04207121580839157d,   -1.8877045166697178E-9d, }, // 44\n+      {+0.043007105588912964d,  -1.6332083257987747E-10d,}, // 45\n+      {+0.04394212365150452d,   -1.7950057534514933E-9d, }, // 46\n+      {+0.04487626254558563d,   +2.302710041648838E-9d,  }, // 47\n+      {+0.045809537172317505d,  -1.1410233017161343E-9d, }, // 48\n+      {+0.04674194008111954d,   -3.0498741599744685E-9d, }, // 49\n+      {+0.04767347127199173d,   -1.8026348269183678E-9d, }, // 50\n+      {+0.04860413819551468d,   -3.233204600453039E-9d,  }, // 51\n+      {+0.04953393340110779d,   +1.7211688427961583E-9d, }, // 52\n+      {+0.05046287178993225d,   -2.329967807055457E-10d, }, // 53\n+      {+0.05139094591140747d,   -4.191810118556531E-11d, }, // 54\n+      {+0.052318163216114044d,  -3.5574324788328143E-9d, }, // 55\n+      {+0.053244516253471375d,  -1.7346590916458485E-9d, }, // 56\n+      {+0.05417001247406006d,   -4.343048751383674E-10d, }, // 57\n+      {+0.055094651877880096d,  +1.92909364037955E-9d,   }, // 58\n+      {+0.056018441915512085d,  -5.139745677199588E-10d, }, // 59\n+      {+0.05694137513637543d,   +1.2637629975129189E-9d, }, // 60\n+      {+0.05786345899105072d,   +1.3840561112481119E-9d, }, // 61\n+      {+0.058784693479537964d,  +1.414889689612056E-9d,  }, // 62\n+      {+0.05970507860183716d,   +2.9199191907666474E-9d, }, // 63\n+      {+0.0606246218085289d,    +7.90594243412116E-12d,  }, // 64\n+      {+0.06154331564903259d,   +1.6844747839686189E-9d, }, // 65\n+      {+0.06246116757392883d,   +2.0498074572151747E-9d, }, // 66\n+      {+0.06337818503379822d,   -4.800180493433863E-9d,  }, // 67\n+      {+0.06429435312747955d,   -2.4220822960064277E-9d, }, // 68\n+      {+0.06520968675613403d,   -4.179048566709334E-9d,  }, // 69\n+      {+0.06612417101860046d,   +6.363872957010456E-9d,  }, // 70\n+      {+0.06703783571720123d,   +9.339468680056365E-10d, }, // 71\n+      {+0.06795066595077515d,   -4.04226739708981E-9d,   }, // 72\n+      {+0.0688626617193222d,    -7.043545052852817E-9d,  }, // 73\n+      {+0.06977382302284241d,   -6.552819560439773E-9d,  }, // 74\n+      {+0.07068414986133575d,   -1.0571674860370546E-9d, }, // 75\n+      {+0.07159365713596344d,   -3.948954622015801E-9d,  }, // 76\n+      {+0.07250232994556427d,   +1.1776625988228244E-9d, }, // 77\n+      {+0.07341018319129944d,   +9.221072639606492E-10d, }, // 78\n+      {+0.07431721687316895d,   -3.219119568928366E-9d,  }, // 79\n+      {+0.0752234160900116d,    +5.147575929018918E-9d,  }, // 80\n+      {+0.07612881064414978d,   -2.291749683541979E-9d,  }, // 81\n+      {+0.07703337073326111d,   +5.749565906124772E-9d,  }, // 82\n+      {+0.07793712615966797d,   +9.495158151301779E-10d, }, // 83\n+      {+0.07884006202220917d,   -3.144331429489291E-10d, }, // 84\n+      {+0.0797421783208847d,    +3.430029236134205E-9d,  }, // 85\n+      {+0.08064348995685577d,   -1.2499290483167703E-9d, }, // 86\n+      {+0.08154398202896118d,   +2.011215719133196E-9d,  }, // 87\n+      {+0.08244366943836212d,   -2.2728753031387152E-10d,}, // 88\n+      {+0.0833425521850586d,    -6.508966857277253E-9d,  }, // 89\n+      {+0.0842406153678894d,    -4.801131671405377E-10d, }, // 90\n+      {+0.08513787388801575d,   +4.406750291994231E-9d,  }, // 91\n+      {+0.08603434264659882d,   -5.304795662536171E-9d,  }, // 92\n+      {+0.08692999184131622d,   +1.6284313912612293E-9d, }, // 93\n+      {+0.08782485127449036d,   -3.158898981674071E-9d,  }, // 94\n+      {+0.08871890604496002d,   -3.3324878834139977E-9d, }, // 95\n+      {+0.08961215615272522d,   +2.536961912893389E-9d,  }, // 96\n+      {+0.09050461649894714d,   +9.737596728980696E-10d, }, // 97\n+      {+0.0913962870836258d,    -6.600437262505396E-9d,  }, // 98\n+      {+0.09228715300559998d,   -3.866609889222889E-9d,  }, // 99\n+      {+0.09317722916603088d,   -4.311847594020281E-9d,  }, // 100\n+      {+0.09406651556491852d,   -6.525851105645959E-9d,  }, // 101\n+      {+0.09495499730110168d,   +5.799080912675435E-9d,  }, // 102\n+      {+0.09584270417690277d,   +4.2634204358490415E-9d, }, // 103\n+      {+0.09672962129116058d,   +5.167390528799477E-9d,  }, // 104\n+      {+0.09761576354503632d,   -4.994827392841906E-9d,  }, // 105\n+      {+0.09850110113620758d,   +4.970725577861395E-9d,  }, // 106\n+      {+0.09938566386699677d,   +6.6496705953229645E-9d, }, // 107\n+      {+0.10026945173740387d,   +1.4262712796792241E-9d, }, // 108\n+      {+0.1011524498462677d,    +5.5822855204629114E-9d, }, // 109\n+      {+0.10203467309474945d,   +5.593494835247651E-9d,  }, // 110\n+      {+0.10291612148284912d,   +2.8332008343480686E-9d, }, // 111\n+      {+0.10379679501056671d,   -1.3289231465997192E-9d, }, // 112\n+      {+0.10467669367790222d,   -5.526819276639527E-9d,  }, // 113\n+      {+0.10555580258369446d,   +6.503128678219282E-9d,  }, // 114\n+      {+0.10643415153026581d,   +6.317463237641817E-9d,  }, // 115\n+      {+0.10731174051761627d,   -4.728528221305482E-9d,  }, // 116\n+      {+0.10818853974342346d,   +4.519199083083901E-9d,  }, // 117\n+      {+0.10906457901000977d,   +5.606492666349878E-9d,  }, // 118\n+      {+0.10993985831737518d,   -1.220176214398581E-10d, }, // 119\n+      {+0.11081436276435852d,   +3.5759315936869937E-9d, }, // 120\n+      {+0.11168810725212097d,   +3.1367659571899855E-9d, }, // 121\n+      {+0.11256109178066254d,   -1.0543075713098835E-10d,}, // 122\n+      {+0.11343331634998322d,   -4.820065619207094E-9d,  }, // 123\n+      {+0.11430476605892181d,   +5.221136819669415E-9d,  }, // 124\n+      {+0.11517547070980072d,   +1.5395018670011342E-9d, }, // 125\n+      {+0.11604541540145874d,   +3.5638391501880846E-10d,}, // 126\n+      {+0.11691460013389587d,   +2.9885336757136527E-9d, }, // 127\n+      {+0.11778303980827332d,   -4.151889860890893E-9d,  }, // 128\n+      {+0.11865071952342987d,   -4.853823938804204E-9d,  }, // 129\n+      {+0.11951763927936554d,   +2.189226237170704E-9d,  }, // 130\n+      {+0.12038381397724152d,   +3.3791993048776982E-9d, }, // 131\n+      {+0.1212492436170578d,    +1.5811884868243975E-11d,}, // 132\n+      {+0.12211392819881439d,   -6.6045909118908625E-9d, }, // 133\n+      {+0.1229778528213501d,    -2.8786263916116364E-10d,}, // 134\n+      {+0.12384103238582611d,   +5.354472503748251E-9d,  }, // 135\n+      {+0.12470348179340363d,   -3.2924463896248744E-9d, }, // 136\n+      {+0.12556517124176025d,   +4.856678149580005E-9d,  }, // 137\n+      {+0.12642613053321838d,   +1.2791850600366742E-9d, }, // 138\n+      {+0.12728634476661682d,   +2.1525945093362843E-9d, }, // 139\n+      {+0.12814581394195557d,   +8.749974471767862E-9d,  }, // 140\n+      {+0.129004567861557d,     -7.461209161105275E-9d,  }, // 141\n+      {+0.12986254692077637d,   +1.4390208226263824E-8d, }, // 142\n+      {+0.1307198405265808d,    -1.3839477920475328E-8d, }, // 143\n+      {+0.13157635927200317d,   -1.483283901239408E-9d,  }, // 144\n+      {+0.13243216276168823d,   -6.889072914229094E-9d,  }, // 145\n+      {+0.1332872211933136d,    +9.990351100568362E-10d, }, // 146\n+      {+0.13414156436920166d,   -6.370937412495338E-9d,  }, // 147\n+      {+0.13499516248703003d,   +2.05047480130511E-9d,   }, // 148\n+      {+0.1358480453491211d,    -2.29509872547079E-9d,   }, // 149\n+      {+0.13670018315315247d,   +1.16354361977249E-8d,   }, // 150\n+      {+0.13755163550376892d,   -1.452496267904829E-8d,  }, // 151\n+      {+0.1384023129940033d,    +9.865115839786888E-9d,  }, // 152\n+      {+0.13925230503082275d,   -3.369999130712228E-9d,  }, // 153\n+      {+0.14010155200958252d,   +6.602496401651853E-9d,  }, // 154\n+      {+0.14095008373260498d,   +1.1205312852298845E-8d, }, // 155\n+      {+0.14179790019989014d,   +1.1660367213160203E-8d, }, // 156\n+      {+0.142645001411438d,     +9.186471222585239E-9d,  }, // 157\n+      {+0.14349138736724854d,   +4.999341878263704E-9d,  }, // 158\n+      {+0.14433705806732178d,   +3.11611905696257E-10d,  }, // 159\n+      {+0.14518201351165771d,   -3.6671598175618173E-9d, }, // 160\n+      {+0.14602625370025635d,   -5.730477881659618E-9d,  }, // 161\n+      {+0.14686977863311768d,   -4.674900007989718E-9d,  }, // 162\n+      {+0.1477125883102417d,    +6.999732437141968E-10d, }, // 163\n+      {+0.14855468273162842d,   +1.159150872494107E-8d,  }, // 164\n+      {+0.14939609169960022d,   -6.082714828488485E-10d, }, // 165\n+      {+0.15023678541183472d,   -4.905712741596318E-9d,  }, // 166\n+      {+0.1510767638683319d,    -1.124848988733307E-10d, }, // 167\n+      {+0.15191605687141418d,   -1.484557220949851E-8d,  }, // 168\n+      {+0.15275460481643677d,   +1.1682026251371384E-8d, }, // 169\n+      {+0.15359249711036682d,   -8.757272519238786E-9d,  }, // 170\n+      {+0.15442964434623718d,   +1.4419920764774415E-8d, }, // 171\n+      {+0.15526613593101501d,   -7.019891063126053E-9d,  }, // 172\n+      {+0.15610191226005554d,   -1.230153548825964E-8d,  }, // 173\n+      {+0.15693697333335876d,   -2.574172005933276E-10d, }, // 174\n+      {+0.15777134895324707d,   +4.748140799544371E-10d, }, // 175\n+      {+0.15860503911972046d,   -8.943081874891003E-9d,  }, // 176\n+      {+0.15943801403045654d,   +2.4500739038517657E-9d, }, // 177\n+      {+0.1602703034877777d,    +6.007922084557054E-9d,  }, // 178\n+      {+0.16110190749168396d,   +2.8835418231126645E-9d, }, // 179\n+      {+0.1619328260421753d,    -5.772862039728412E-9d,  }, // 180\n+      {+0.16276302933692932d,   +1.0988372954605789E-8d, }, // 181\n+      {+0.16359257698059082d,   -5.292913162607026E-9d,  }, // 182\n+      {+0.16442140936851501d,   +6.12956339275823E-9d,   }, // 183\n+      {+0.16524958610534668d,   -1.3210039516811888E-8d, }, // 184\n+      {+0.16607704758644104d,   -2.5711014608334873E-9d, }, // 185\n+      {+0.16690382361412048d,   +9.37721319457112E-9d,   }, // 186\n+      {+0.1677299439907074d,    -6.0370682395944045E-9d, }, // 187\n+      {+0.168555349111557d,     +1.1918249660105651E-8d, }, // 188\n+      {+0.1693800985813141d,    +4.763282949656017E-9d,  }, // 189\n+      {+0.17020416259765625d,   +3.4223342273948817E-9d, }, // 190\n+      {+0.1710275411605835d,    +9.014612241310916E-9d,  }, // 191\n+      {+0.1718502640724182d,    -7.145758990550526E-9d,  }, // 192\n+      {+0.172672301530838d,     -1.4142763934081504E-8d, }, // 193\n+      {+0.1734936535358429d,    -1.0865453656579032E-8d, }, // 194\n+      {+0.17431432008743286d,   +3.794385569450774E-9d,  }, // 195\n+      {+0.1751343309879303d,    +1.1399188501627291E-9d, }, // 196\n+      {+0.17595365643501282d,   +1.2076238768270153E-8d, }, // 197\n+      {+0.1767723262310028d,    +7.901084730502162E-9d,  }, // 198\n+      {+0.17759034037590027d,   -1.0288181007465474E-8d, }, // 199\n+      {+0.1784076690673828d,    -1.15945645153806E-8d,   }, // 200\n+      {+0.17922431230545044d,   +5.073923825786778E-9d,  }, // 201\n+      {+0.18004029989242554d,   +1.1004278077575267E-8d, }, // 202\n+      {+0.1808556318283081d,    +7.2831502374676964E-9d, }, // 203\n+      {+0.18167030811309814d,   -5.0054634662706464E-9d, }, // 204\n+      {+0.18248429894447327d,   +5.022108460298934E-9d,  }, // 205\n+      {+0.18329763412475586d,   +8.642254225732676E-9d,  }, // 206\n+      {+0.18411031365394592d,   +6.931054493326395E-9d,  }, // 207\n+      {+0.18492233753204346d,   +9.619685356326533E-10d, }, // 208\n+      {+0.18573370575904846d,   -8.194157257980706E-9d,  }, // 209\n+      {+0.18654438853263855d,   +1.0333241479437797E-8d, }, // 210\n+      {+0.1873544454574585d,    -1.9948340196027965E-9d, }, // 211\n+      {+0.1881638467311859d,    -1.4313002926259948E-8d, }, // 212\n+      {+0.1889725625514984d,    +4.241536392174967E-9d,  }, // 213\n+      {+0.18978065252304077d,   -4.877952454011428E-9d,  }, // 214\n+      {+0.1905880868434906d,    -1.0813801247641613E-8d, }, // 215\n+      {+0.1913948655128479d,    -1.2513218445781325E-8d, }, // 216\n+      {+0.19220098853111267d,   -8.925958555729115E-9d,  }, // 217\n+      {+0.1930064558982849d,    +9.956860681280245E-10d, }, // 218\n+      {+0.193811297416687d,     -1.1505428993246996E-8d, }, // 219\n+      {+0.1946154534816742d,    +1.4217997464522202E-8d, }, // 220\n+      {+0.19541901350021362d,   -1.0200858727747717E-8d, }, // 221\n+      {+0.19622188806533813d,   +5.682607223902455E-9d,  }, // 222\n+      {+0.1970241367816925d,    +3.2988908516009827E-9d, }, // 223\n+      {+0.19782572984695435d,   +1.3482965534659446E-8d, }, // 224\n+      {+0.19862669706344604d,   +7.462678536479685E-9d,  }, // 225\n+      {+0.1994270384311676d,    -1.3734273888891115E-8d, }, // 226\n+      {+0.20022669434547424d,   +1.0521983802642893E-8d, }, // 227\n+      {+0.20102575421333313d,   -8.152742388541905E-9d,  }, // 228\n+      {+0.2018241584300995d,    -9.133484280193855E-9d,  }, // 229\n+      {+0.20262190699577332d,   +8.59763959528144E-9d,   }, // 230\n+      {+0.2034190595149994d,    -1.3548568223001414E-8d, }, // 231\n+      {+0.20421552658081055d,   +1.4847880344628818E-8d, }, // 232\n+      {+0.20501139760017395d,   +5.390620378060543E-9d,  }, // 233\n+      {+0.2058066427707672d,    -1.1109834472051523E-8d, }, // 234\n+      {+0.20660123229026794d,   -3.845373872038116E-9d,  }, // 235\n+      {+0.20739519596099854d,   -1.6149279479975042E-9d, }, // 236\n+      {+0.20818853378295898d,   -3.4174925203771133E-9d, }, // 237\n+      {+0.2089812457561493d,    -8.254443919468538E-9d,  }, // 238\n+      {+0.20977330207824707d,   +1.4672790944499144E-8d, }, // 239\n+      {+0.2105647623538971d,    +6.753452542942992E-9d,  }, // 240\n+      {+0.21135559678077698d,   -1.218609462241927E-9d,  }, // 241\n+      {+0.21214580535888672d,   -8.254218316367887E-9d,  }, // 242\n+      {+0.21293538808822632d,   -1.3366540360587255E-8d, }, // 243\n+      {+0.2137243151664734d,    +1.4231244750190031E-8d, }, // 244\n+      {+0.2145126760005951d,    -1.3885660525939072E-8d, }, // 245\n+      {+0.21530038118362427d,   -7.3304404046850136E-9d, }, // 246\n+      {+0.2160874605178833d,    +5.072117654842356E-9d,  }, // 247\n+      {+0.21687394380569458d,   -5.505080220459036E-9d,  }, // 248\n+      {+0.21765980124473572d,   -8.286782292266659E-9d,  }, // 249\n+      {+0.2184450328350067d,    -2.302351152358085E-9d,  }, // 250\n+      {+0.21922963857650757d,   +1.3416565858314603E-8d, }, // 251\n+      {+0.22001364827156067d,   +1.0033721426962048E-8d, }, // 252\n+      {+0.22079706192016602d,   -1.1487079818684332E-8d, }, // 253\n+      {+0.22157981991767883d,   +9.420348186357043E-9d,  }, // 254\n+      {+0.2223619818687439d,    +1.4110645699377834E-8d, }, // 255\n+      {+0.2231435477733612d,    +3.5408485497116107E-9d, }, // 256\n+      {+0.22392448782920837d,   +8.468072777056227E-9d,  }, // 257\n+      {+0.2247048318386078d,    +4.255446699237779E-11d, }, // 258\n+      {+0.22548454999923706d,   +9.016946273084244E-9d,  }, // 259\n+      {+0.22626367211341858d,   +6.537034810260226E-9d,  }, // 260\n+      {+0.22704219818115234d,   -6.451285264969768E-9d,  }, // 261\n+      {+0.22782009840011597d,   +7.979956357126066E-10d, }, // 262\n+      {+0.22859740257263184d,   -5.759582672039005E-10d, }, // 263\n+      {+0.22937411069869995d,   -9.633854121180397E-9d,  }, // 264\n+      {+0.23015019297599792d,   +4.363736368635843E-9d,  }, // 265\n+      {+0.23092567920684814d,   +1.2549416560182509E-8d, }, // 266\n+      {+0.231700599193573d,     -1.3946383592553814E-8d, }, // 267\n+      {+0.2324748933315277d,    -1.458843364504023E-8d,  }, // 268\n+      {+0.23324856162071228d,   +1.1551692104697154E-8d, }, // 269\n+      {+0.23402166366577148d,   +5.795621295524984E-9d,  }, // 270\n+      {+0.23479416966438293d,   -1.1301979046684263E-9d, }, // 271\n+      {+0.23556607961654663d,   -8.303779721781787E-9d,  }, // 272\n+      {+0.23633739352226257d,   -1.4805271785394075E-8d, }, // 273\n+      {+0.23710808157920837d,   +1.0085373835899469E-8d, }, // 274\n+      {+0.2378782033920288d,    +7.679117635349454E-9d,  }, // 275\n+      {+0.2386477291584015d,    +8.69177352065934E-9d,   }, // 276\n+      {+0.23941665887832642d,   +1.4034725764547136E-8d, }, // 277\n+      {+0.24018502235412598d,   -5.185064518887831E-9d,  }, // 278\n+      {+0.2409527599811554d,    +1.1544236628121676E-8d, }, // 279\n+      {+0.24171993136405945d,   +5.523085719902123E-9d,  }, // 280\n+      {+0.24248650670051575d,   +7.456824943331887E-9d,  }, // 281\n+      {+0.24325251579284668d,   -1.1555923403029638E-8d, }, // 282\n+      {+0.24401789903640747d,   +8.988361382732908E-9d,  }, // 283\n+      {+0.2447827160358429d,    +1.0381848020926893E-8d, }, // 284\n+      {+0.24554696679115295d,   -6.480706118857055E-9d,  }, // 285\n+      {+0.24631062150001526d,   -1.0904271124793968E-8d, }, // 286\n+      {+0.2470736801624298d,    -1.998183061531611E-9d,  }, // 287\n+      {+0.247836172580719d,     -8.676137737360023E-9d,  }, // 288\n+      {+0.24859806895256042d,   -2.4921733203932487E-10d,}, // 289\n+      {+0.2493593990802765d,    -5.635173762130303E-9d,  }, // 290\n+      {+0.2501201629638672d,    -2.3951455355985637E-8d, }, // 291\n+      {+0.25088030099868774d,   +5.287121672447825E-9d,  }, // 292\n+      {+0.2516399025917053d,    -6.447877375049486E-9d,  }, // 293\n+      {+0.25239890813827515d,   +1.32472428796441E-9d,   }, // 294\n+      {+0.2531573176383972d,    +2.9479464287605006E-8d, }, // 295\n+      {+0.2539151906967163d,    +1.9284247135543574E-8d, }, // 296\n+      {+0.2546725273132324d,    -2.8390360197221716E-8d, }, // 297\n+      {+0.255429208278656d,     +6.533522495226226E-9d,  }, // 298\n+      {+0.2561853528022766d,    +5.713225978895991E-9d,  }, // 299\n+      {+0.25694090127944946d,   +2.9618050962556135E-8d, }, // 300\n+      {+0.25769591331481934d,   +1.950605015323617E-8d,  }, // 301\n+      {+0.25845038890838623d,   -2.3762031507525576E-8d, }, // 302\n+      {+0.2592042088508606d,    +1.98818938195077E-8d,   }, // 303\n+      {+0.25995755195617676d,   -2.751925069084042E-8d,  }, // 304\n+      {+0.2607102394104004d,    +1.3703391844683932E-8d, }, // 305\n+      {+0.26146239042282104d,   +2.5193525310038174E-8d, }, // 306\n+      {+0.2622140049934387d,    +7.802219817310385E-9d,  }, // 307\n+      {+0.26296502351760864d,   +2.1983272709242607E-8d, }, // 308\n+      {+0.2637155055999756d,    +8.979279989292184E-9d,  }, // 309\n+      {+0.2644653916358948d,    +2.9240221157844312E-8d, }, // 310\n+      {+0.265214741230011d,     +2.4004885823813374E-8d, }, // 311\n+      {+0.2659635543823242d,    -5.885186277410878E-9d,  }, // 312\n+      {+0.2667117714881897d,    +1.4300386517357162E-11d,}, // 313\n+      {+0.2674594521522522d,    -1.7063531531989365E-8d, }, // 314\n+      {+0.26820653676986694d,   +3.3218524692903896E-9d, }, // 315\n+      {+0.2689530849456787d,    +2.3998252479954764E-9d, }, // 316\n+      {+0.2696990966796875d,    -1.8997462070389404E-8d, }, // 317\n+      {+0.27044451236724854d,   -4.350745270980051E-10d, }, // 318\n+      {+0.2711893916130066d,    -6.892221115467135E-10d, }, // 319\n+      {+0.27193373441696167d,   -1.89333199110902E-8d,   }, // 320\n+      {+0.272677481174469d,     +5.262017392507765E-9d,  }, // 321\n+      {+0.27342069149017334d,   +1.3115046679980076E-8d, }, // 322\n+      {+0.2741633653640747d,    +5.4468361834451975E-9d, }, // 323\n+      {+0.2749055027961731d,    -1.692337384653611E-8d,  }, // 324\n+      {+0.27564704418182373d,   +6.426479056697412E-9d,  }, // 325\n+      {+0.2763880491256714d,    +1.670735065191342E-8d,  }, // 326\n+      {+0.27712851762771606d,   +1.4733029698334834E-8d, }, // 327\n+      {+0.27786844968795776d,   +1.315498542514467E-9d,  }, // 328\n+      {+0.2786078453063965d,    -2.2735061539223372E-8d, }, // 329\n+      {+0.27934664487838745d,   +2.994379757313727E-9d,  }, // 330\n+      {+0.28008490800857544d,   +1.970577274107218E-8d,  }, // 331\n+      {+0.28082263469696045d,   +2.820392733542077E-8d,  }, // 332\n+      {+0.2815598249435425d,    +2.929187356678173E-8d,  }, // 333\n+      {+0.28229647874832153d,   +2.377086680926386E-8d,  }, // 334\n+      {+0.2830325961112976d,    +1.2440393009992529E-8d, }, // 335\n+      {+0.2837681770324707d,    -3.901826104778096E-9d,  }, // 336\n+      {+0.2845032215118408d,    -2.4459827842685974E-8d, }, // 337\n+      {+0.2852376699447632d,    +1.1165241398059789E-8d, }, // 338\n+      {+0.28597164154052734d,   -1.54434478239181E-8d,   }, // 339\n+      {+0.28670501708984375d,   +1.5714110564653245E-8d, }, // 340\n+      {+0.28743791580200195d,   -1.3782394940142479E-8d, }, // 341\n+      {+0.2881702184677124d,    +1.6063569876284005E-8d, }, // 342\n+      {+0.28890204429626465d,   -1.317176818216125E-8d,  }, // 343\n+      {+0.28963327407836914d,   +1.8504673536253893E-8d, }, // 344\n+      {+0.29036402702331543d,   -7.334319635123628E-9d,  }, // 345\n+      {+0.29109418392181396d,   +2.9300903540317107E-8d, }, // 346\n+      {+0.2918238639831543d,    +9.979706999541057E-9d,  }, // 347\n+      {+0.29255300760269165d,   -4.916314210412424E-9d,  }, // 348\n+      {+0.293281614780426d,     -1.4611908070155308E-8d, }, // 349\n+      {+0.2940096855163574d,    -1.833351586679361E-8d,  }, // 350\n+      {+0.29473721981048584d,   -1.530926726615185E-8d,  }, // 351\n+      {+0.2954642176628113d,    -4.7689754029101934E-9d, }, // 352\n+      {+0.29619067907333374d,   +1.4055868011423819E-8d, }, // 353\n+      {+0.296916663646698d,     -1.7672547212604003E-8d, }, // 354\n+      {+0.2976420521736145d,    +2.0020234215759705E-8d, }, // 355\n+      {+0.2983669638633728d,    +8.688424478730524E-9d,  }, // 356\n+      {+0.2990913391113281d,    +8.69851089918337E-9d,   }, // 357\n+      {+0.29981517791748047d,   +2.0810681643102672E-8d, }, // 358\n+      {+0.3005385398864746d,    -1.3821169493779352E-8d, }, // 359\n+      {+0.301261305809021d,     +2.4769140784919128E-8d, }, // 360\n+      {+0.3019835948944092d,    +1.8127576600610336E-8d, }, // 361\n+      {+0.3027053475379944d,    +2.6612401062437074E-8d, }, // 362\n+      {+0.3034266233444214d,    -8.629042891789934E-9d,  }, // 363\n+      {+0.3041473627090454d,    -2.724174869314043E-8d,  }, // 364\n+      {+0.30486756563186646d,   -2.8476975783775358E-8d, }, // 365\n+      {+0.3055872321128845d,    -1.1587600174449919E-8d, }, // 366\n+      {+0.3063063621520996d,    +2.417189020581056E-8d,  }, // 367\n+      {+0.3070250153541565d,    +1.99407553679345E-8d,   }, // 368\n+      {+0.3077431917190552d,    -2.35387025694381E-8d,   }, // 369\n+      {+0.3084607720375061d,    +1.3683509995845583E-8d, }, // 370\n+      {+0.30917787551879883d,   +1.3137214081023085E-8d, }, // 371\n+      {+0.30989450216293335d,   -2.444006866174775E-8d,  }, // 372\n+      {+0.3106105327606201d,    +2.0896888605749563E-8d, }, // 373\n+      {+0.31132614612579346d,   -2.893149098508887E-8d,  }, // 374\n+      {+0.31204116344451904d,   +5.621509038251498E-9d,  }, // 375\n+      {+0.3127557039260864d,    +6.0778104626050015E-9d, }, // 376\n+      {+0.3134697675704956d,    -2.6832941696716294E-8d, }, // 377\n+      {+0.31418323516845703d,   +2.6826625274495256E-8d, }, // 378\n+      {+0.31489628553390503d,   -1.1030897183911054E-8d, }, // 379\n+      {+0.31560879945755005d,   -2.047124671392676E-8d,  }, // 380\n+      {+0.3163207769393921d,    -7.709990443086711E-10d, }, // 381\n+      {+0.3170322775840759d,    -1.0812918808112342E-8d, }, // 382\n+      {+0.3177432417869568d,    +9.727979174888975E-9d,  }, // 383\n+      {+0.31845372915267944d,   +1.9658551724508715E-9d, }, // 384\n+      {+0.3191636800765991d,    +2.6222628001695826E-8d, }, // 385\n+      {+0.3198731541633606d,    +2.3609400272358744E-8d, }, // 386\n+      {+0.32058215141296387d,   -5.159602957634814E-9d,  }, // 387\n+      {+0.32129061222076416d,   +2.329701319016099E-10d, }, // 388\n+      {+0.32199859619140625d,   -1.910633190395738E-8d,  }, // 389\n+      {+0.32270604372024536d,   -2.863180390093667E-9d,  }, // 390\n+      {+0.32341301441192627d,   -9.934041364456825E-9d,  }, // 391\n+      {+0.3241194486618042d,    +1.999240777687192E-8d,  }, // 392\n+      {+0.3248254060745239d,    +2.801670341647724E-8d,  }, // 393\n+      {+0.32553088665008545d,   +1.4842534265191358E-8d, }, // 394\n+      {+0.32623589038848877d,   -1.882789920477354E-8d,  }, // 395\n+      {+0.3269403576850891d,    -1.268923579073577E-8d,  }, // 396\n+      {+0.32764434814453125d,   -2.564688370677835E-8d,  }, // 397\n+      {+0.3283478021621704d,    +2.6015626820520968E-9d, }, // 398\n+      {+0.32905077934265137d,   +1.3147747907784344E-8d, }, // 399\n+      {+0.3297532796859741d,    +6.686493860720675E-9d,  }, // 400\n+      {+0.33045530319213867d,   -1.608884086544153E-8d,  }, // 401\n+      {+0.33115679025650024d,   +5.118287907840204E-9d,  }, // 402\n+      {+0.3318578004837036d,    +1.139367970944884E-8d,  }, // 403\n+      {+0.3325583338737488d,    +3.426327822115399E-9d,  }, // 404\n+      {+0.33325839042663574d,   -1.809622142990733E-8d,  }, // 405\n+      {+0.3339579105377197d,    +7.116780143398601E-9d,  }, // 406\n+      {+0.3346569538116455d,    +2.0145352306345386E-8d, }, // 407\n+      {+0.3353555202484131d,    +2.167272474431968E-8d,  }, // 408\n+      {+0.33605360984802246d,   +1.2380696294966822E-8d, }, // 409\n+      {+0.33675122261047363d,   -7.050361059209181E-9d,  }, // 410\n+      {+0.3374482989311218d,    +2.366314656322868E-8d,  }, // 411\n+      {+0.3381449580192566d,    -1.4010540194086646E-8d, }, // 412\n+      {+0.3388410806655884d,    -1.860165465666482E-10d, }, // 413\n+      {+0.33953672647476196d,   +6.206776940880773E-9d,  }, // 414\n+      {+0.34023189544677734d,   +5.841137379010982E-9d,  }, // 415\n+      {+0.3409265875816345d,    -6.11041311179286E-10d,  }, // 416\n+      {+0.3416208028793335d,    -1.2479264502054702E-8d, }, // 417\n+      {+0.34231454133987427d,   -2.909443297645926E-8d,  }, // 418\n+      {+0.34300774335861206d,   +9.815805717097634E-9d,  }, // 419\n+      {+0.3437005281448364d,    -1.4291517981101049E-8d, }, // 420\n+      {+0.3443927764892578d,    +1.8457821628427503E-8d, }, // 421\n+      {+0.34508460760116577d,   -1.0481908869377813E-8d, }, // 422\n+      {+0.34577590227127075d,   +1.876076001514746E-8d,  }, // 423\n+      {+0.3464667797088623d,    -1.2362653723769037E-8d, }, // 424\n+      {+0.3471571207046509d,    +1.6016578405624026E-8d, }, // 425\n+      {+0.347847044467926d,     -1.4652759033760925E-8d, }, // 426\n+      {+0.3485364317893982d,    +1.549533655901835E-8d,  }, // 427\n+      {+0.34922540187835693d,   -1.2093068629412478E-8d, }, // 428\n+      {+0.3499138355255127d,    +2.244531711424792E-8d,  }, // 429\n+      {+0.35060185194015503d,   +5.538565518604807E-10d, }, // 430\n+      {+0.35128939151763916d,   -1.7511499366215853E-8d, }, // 431\n+      {+0.3519763946533203d,    +2.850385787215544E-8d,  }, // 432\n+      {+0.35266298055648804d,   +2.003926370146842E-8d,  }, // 433\n+      {+0.35334908962249756d,   +1.734665280502264E-8d,  }, // 434\n+      {+0.3540347218513489d,    +2.1071983674869414E-8d, }, // 435\n+      {+0.35471993684768677d,   -2.774475773922311E-8d,  }, // 436\n+      {+0.3554046154022217d,    -9.250975291734664E-9d,  }, // 437\n+      {+0.3560888171195984d,    +1.7590672330295415E-8d, }, // 438\n+      {+0.35677260160446167d,   -6.1837904549178745E-9d, }, // 439\n+      {+0.35745590925216675d,   -2.0330362973820856E-8d, }, // 440\n+      {+0.3581387400627136d,    -2.42109990366786E-8d,   }, // 441\n+      {+0.3588210940361023d,    -1.7188958587407816E-8d, }, // 442\n+      {+0.35950297117233276d,   +1.3711958590112228E-9d, }, // 443\n+      {+0.3601844310760498d,    -2.7501042008405925E-8d, }, // 444\n+      {+0.36086535453796387d,   +1.6036460343275798E-8d, }, // 445\n+      {+0.3615458607673645d,    +1.3405964389498495E-8d, }, // 446\n+      {+0.36222589015960693d,   +2.484237749027735E-8d,  }, // 447\n+      {+0.36290550231933594d,   -8.629967484362177E-9d,  }, // 448\n+      {+0.36358463764190674d,   -2.6778729562324134E-8d, }, // 449\n+      {+0.36426329612731934d,   -2.8977490516960565E-8d, }, // 450\n+      {+0.36494147777557373d,   -1.4601106624823502E-8d, }, // 451\n+      {+0.3656191825866699d,    +1.69742947894444E-8d,   }, // 452\n+      {+0.3662964701652527d,    +6.7666740211281175E-9d, }, // 453\n+      {+0.36697328090667725d,   +1.500201674336832E-8d,  }, // 454\n+      {+0.3676496744155884d,    -1.730424167425052E-8d,  }, // 455\n+      {+0.36832553148269653d,   +2.9676011119845104E-8d, }, // 456\n+      {+0.36900103092193604d,   -2.2253590346826743E-8d, }, // 457\n+      {+0.36967599391937256d,   +6.3372065441089185E-9d, }, // 458\n+      {+0.37035053968429565d,   -3.145816653215968E-9d,  }, // 459\n+      {+0.37102460861206055d,   +9.515812117036965E-9d,  }, // 460\n+      {+0.371698260307312d,     -1.4669965113042639E-8d, }, // 461\n+      {+0.3723714351654053d,    -1.548715389333397E-8d,  }, // 462\n+      {+0.37304413318634033d,   +7.674361647125109E-9d,  }, // 463\n+      {+0.37371641397476196d,   -4.181177882069608E-9d,  }, // 464\n+      {+0.3743882179260254d,    +9.158530500130718E-9d,  }, // 465\n+      {+0.3750596046447754d,    -1.13047236597869E-8d,   }, // 466\n+      {+0.3757305145263672d,    -5.36108186384227E-9d,   }, // 467\n+      {+0.3764009475708008d,    +2.7593452284747873E-8d, }, // 468\n+      {+0.37707096338272095d,   +2.8557016344085205E-8d, }, // 469\n+      {+0.3777405619621277d,    -1.868818164036E-9d,     }, // 470\n+      {+0.3784096837043762d,    -3.479042513414447E-9d,  }, // 471\n+      {+0.37907832860946655d,   +2.432550290565648E-8d,  }, // 472\n+      {+0.37974655628204346d,   +2.2538131805476768E-8d, }, // 473\n+      {+0.38041436672210693d,   -8.244395239939089E-9d,  }, // 474\n+      {+0.3810817003250122d,    -7.821867597227376E-9d,  }, // 475\n+      {+0.3817485570907593d,    +2.4400089062515914E-8d, }, // 476\n+      {+0.3824149966239929d,    +2.9410015940087773E-8d, }, // 477\n+      {+0.38308101892471313d,   +7.799913824734797E-9d,  }, // 478\n+      {+0.38374656438827515d,   +1.976524624939355E-8d,  }, // 479\n+      {+0.38441169261932373d,   +6.291008309266035E-9d,  }, // 480\n+      {+0.3850763440132141d,    +2.757030889767851E-8d,  }, // 481\n+      {+0.38574057817459106d,   +2.4585794728405612E-8d, }, // 482\n+      {+0.3864043951034546d,    -2.0764122246389383E-9d, }, // 483\n+      {+0.3870677351951599d,    +7.77328837578952E-9d,   }, // 484\n+      {+0.3877306580543518d,    -4.8859560029989374E-9d, }, // 485\n+      {+0.3883931040763855d,    +2.0133131420595028E-8d, }, // 486\n+      {+0.38905513286590576d,   +2.380738071335498E-8d,  }, // 487\n+      {+0.3897167444229126d,    +6.7171126157142075E-9d, }, // 488\n+      {+0.39037787914276123d,   +2.9046141593926277E-8d, }, // 489\n+      {+0.3910386562347412d,    -2.7836800219410262E-8d, }, // 490\n+      {+0.3916988968849182d,    +1.545909820981726E-8d,  }, // 491\n+      {+0.39235877990722656d,   -1.930436269002062E-8d,  }, // 492\n+      {+0.3930181860923767d,    -1.2343297554921835E-8d, }, // 493\n+      {+0.3936771750450134d,    -2.268889128622553E-8d,  }, // 494\n+      {+0.39433568716049194d,   +9.835827818608177E-9d,  }, // 495\n+      {+0.39499378204345703d,   +2.6197411946856397E-8d, }, // 496\n+      {+0.3956514596939087d,    +2.6965931069318893E-8d, }, // 497\n+      {+0.3963087201118469d,    +1.2710331127772166E-8d, }, // 498\n+      {+0.39696556329727173d,   -1.6001563011916016E-8d, }, // 499\n+      {+0.39762192964553833d,   +1.0016001590267064E-9d, }, // 500\n+      {+0.3982778787612915d,    +4.680767399874334E-9d,  }, // 501\n+      {+0.39893341064453125d,   -4.399582029272418E-9d,  }, // 502\n+      {+0.39958852529525757d,   -2.5676078228301587E-8d, }, // 503\n+      {+0.4002431631088257d,    +1.0181870233355787E-9d, }, // 504\n+      {+0.40089738368988037d,   +1.6639728835984655E-8d, }, // 505\n+      {+0.40155118703842163d,   +2.174860642202632E-8d,  }, // 506\n+      {+0.40220457315444946d,   +1.6903781197123503E-8d, }, // 507\n+      {+0.40285754203796387d,   +2.663119647467697E-9d,  }, // 508\n+      {+0.40351009368896484d,   -2.0416603812329616E-8d, }, // 509\n+      {+0.4041621685028076d,    +7.82494078472695E-9d,   }, // 510\n+      {+0.40481382608413696d,   +2.833770747113627E-8d,  }, // 511\n+      {+0.40546512603759766d,   -1.7929433274271985E-8d, }, // 512\n+      {+0.40611594915390015d,   -1.1214757379328965E-8d, }, // 513\n+      {+0.4067663550376892d,    -1.0571553019207106E-8d, }, // 514\n+      {+0.40741634368896484d,   -1.5449538712332313E-8d, }, // 515\n+      {+0.40806591510772705d,   -2.529950530235105E-8d,  }, // 516\n+      {+0.40871500968933105d,   +2.0031331601617008E-8d, }, // 517\n+      {+0.4093637466430664d,    +1.880755298741952E-9d,  }, // 518\n+      {+0.41001206636428833d,   -1.9600580584843318E-8d, }, // 519\n+      {+0.41065990924835205d,   +1.573691633515306E-8d,  }, // 520\n+      {+0.4113073945045471d,    -1.0772154376548336E-8d, }, // 521\n+      {+0.411954402923584d,     +2.0624330192486066E-8d, }, // 522\n+      {+0.4126010537147522d,    -8.741139170029572E-9d,  }, // 523\n+      {+0.4132472276687622d,    +2.0881457123894216E-8d, }, // 524\n+      {+0.41389304399490356d,   -9.177488027521808E-9d,  }, // 525\n+      {+0.4145383834838867d,    +2.0829952491625585E-8d, }, // 526\n+      {+0.4151833653450012d,    -7.767915492597301E-9d,  }, // 527\n+      {+0.4158278703689575d,    +2.4774753446082082E-8d, }, // 528\n+      {+0.41647201776504517d,   -2.1581119071750435E-10d,}, // 529\n+      {+0.4171157479286194d,    -2.260047972865202E-8d,  }, // 530\n+      {+0.4177590012550354d,    +1.775884601423381E-8d,  }, // 531\n+      {+0.41840189695358276d,   +2.185301053838889E-9d,  }, // 532\n+      {+0.4190443754196167d,    -9.185071463667081E-9d,  }, // 533\n+      {+0.4196864366531372d,    -1.5821896727910552E-8d, }, // 534\n+      {+0.4203280806541443d,    -1.719582086188318E-8d,  }, // 535\n+      {+0.42096930742263794d,   -1.2778508303324259E-8d, }, // 536\n+      {+0.42161011695861816d,   -2.042639194493364E-9d,  }, // 537\n+      {+0.42225050926208496d,   +1.5538093219698803E-8d, }, // 538\n+      {+0.4228905439376831d,    -1.9115659590156936E-8d, }, // 539\n+      {+0.42353010177612305d,   +1.3729680248843432E-8d, }, // 540\n+      {+0.42416930198669434d,   -4.611893838830296E-9d,  }, // 541\n+      {+0.4248080849647522d,    -1.4013456880651706E-8d, }, // 542\n+      {+0.42544645071029663d,   -1.3953728897042917E-8d, }, // 543\n+      {+0.42608439922332764d,   -3.912427573594197E-9d,  }, // 544\n+      {+0.4267219305038452d,    +1.6629734283189315E-8d, }, // 545\n+      {+0.42735910415649414d,   -1.1413593493354881E-8d, }, // 546\n+      {+0.42799586057662964d,   -2.792046157580119E-8d,  }, // 547\n+      {+0.42863214015960693d,   +2.723009182661306E-8d,  }, // 548\n+      {+0.42926812171936035d,   -2.4260535621557444E-8d, }, // 549\n+      {+0.42990362644195557d,   -3.064060124024764E-9d,  }, // 550\n+      {+0.43053877353668213d,   -2.787640178598121E-8d,  }, // 551\n+      {+0.4311734437942505d,    +2.102412085257792E-8d,  }, // 552\n+      {+0.4318077564239502d,    +2.4939635093999683E-8d, }, // 553\n+      {+0.43244171142578125d,   -1.5619414792273914E-8d, }, // 554\n+      {+0.4330751895904541d,    +1.9065734894871523E-8d, }, // 555\n+      {+0.4337083101272583d,    +1.0294301092654604E-8d, }, // 556\n+      {+0.4343410134315491d,    +1.8178469851136E-8d,    }, // 557\n+      {+0.4349733591079712d,    -1.6379825102473853E-8d, }, // 558\n+      {+0.4356052279472351d,    +2.6334323946685834E-8d, }, // 559\n+      {+0.43623673915863037d,   +2.761628769925529E-8d,  }, // 560\n+      {+0.436867892742157d,     -1.2030229087793677E-8d, }, // 561\n+      {+0.4374985694885254d,    +2.7106814809424793E-8d, }, // 562\n+      {+0.43812888860702515d,   +2.631993083235205E-8d,  }, // 563\n+      {+0.43875885009765625d,   -1.3890028312254422E-8d, }, // 564\n+      {+0.43938833475112915d,   +2.6186133735555794E-8d, }, // 565\n+      {+0.4400174617767334d,    +2.783809071694788E-8d,  }, // 566\n+      {+0.440646231174469d,     -8.436135220472006E-9d,  }, // 567\n+      {+0.44127458333969116d,   -2.2534815932619883E-8d, }, // 568\n+      {+0.4419025182723999d,    -1.3961804471714283E-8d, }, // 569\n+      {+0.4425300359725952d,    +1.7778112039716255E-8d, }, // 570\n+      {+0.4431571960449219d,    +1.3574569976673652E-8d, }, // 571\n+      {+0.4437839984893799d,    -2.607907890164073E-8d,  }, // 572\n+      {+0.4444103240966797d,    +1.8518879652136628E-8d, }, // 573\n+      {+0.44503629207611084d,   +2.865065604247164E-8d,  }, // 574\n+      {+0.44566190242767334d,   +4.806827797299427E-9d,  }, // 575\n+      {+0.4462870955467224d,    +7.0816970994232115E-9d, }, // 576\n+      {+0.44691193103790283d,   -2.3640641240074437E-8d, }, // 577\n+      {+0.4475363492965698d,    -2.7267718387865538E-8d, }, // 578\n+      {+0.4481603503227234d,    -3.3126235292976077E-9d, }, // 579\n+      {+0.4487839937210083d,    -1.0894001590268427E-8d, }, // 580\n+      {+0.4494072198867798d,    +1.0077883359971829E-8d, }, // 581\n+      {+0.4500300884246826d,    +4.825712712114668E-10d, }, // 582\n+      {+0.450652539730072d,     +2.0407987470746858E-8d, }, // 583\n+      {+0.4512746334075928d,    +1.073186581170719E-8d,  }, // 584\n+      {+0.4518963694572449d,    -2.8064314757880205E-8d, }, // 585\n+      {+0.45251762866973877d,   +2.3709316816226527E-8d, }, // 586\n+      {+0.4531385898590088d,    -1.2281487504266522E-8d, }, // 587\n+      {+0.4537591338157654d,    -1.634864487421458E-8d,  }, // 588\n+      {+0.45437926054000854d,   +1.1985747222409522E-8d, }, // 589\n+      {+0.45499902963638306d,   +1.3594057956219485E-8d, }, // 590\n+      {+0.4556184411048889d,    -1.1047585095328619E-8d, }, // 591\n+      {+0.45623743534088135d,   -1.8592937532754405E-9d, }, // 592\n+      {+0.4568560719490051d,    -1.797135137545755E-8d,  }, // 593\n+      {+0.4574742913246155d,    +6.943684261645378E-10d, }, // 594\n+      {+0.4580921530723572d,    -4.994175141684681E-9d,  }, // 595\n+      {+0.45870959758758545d,   +2.5039391215625133E-8d, }, // 596\n+      {+0.45932674407958984d,   -2.7943366835352838E-8d, }, // 597\n+      {+0.45994341373443604d,   +1.534146910128904E-8d,  }, // 598\n+      {+0.46055978536605835d,   -2.3450920230816267E-8d, }, // 599\n+      {+0.46117573976516724d,   -2.4642997069960124E-8d, }, // 600\n+      {+0.4617912769317627d,    +1.2232622070370946E-8d, }, // 601\n+      {+0.4624064564704895d,    +2.80378133047839E-8d,   }, // 602\n+      {+0.46302127838134766d,   +2.3238237048117092E-8d, }, // 603\n+      {+0.46363574266433716d,   -1.7013046451109475E-9d, }, // 604\n+      {+0.46424978971481323d,   +1.3287778803035383E-8d, }, // 605\n+      {+0.46486347913742065d,   +9.06393426961373E-9d,   }, // 606\n+      {+0.4654768109321594d,    -1.3910598647592876E-8d, }, // 607\n+      {+0.46608972549438477d,   +4.430214458933614E-9d,  }, // 608\n+      {+0.46670228242874146d,   +4.942270562885745E-9d,  }, // 609\n+      {+0.4673144817352295d,    -1.1914734393460718E-8d, }, // 610\n+      {+0.4679262638092041d,    +1.3922696570638494E-8d, }, // 611\n+      {+0.46853768825531006d,   +2.3307929211781914E-8d, }, // 612\n+      {+0.46914875507354736d,   +1.669813444584674E-8d,  }, // 613\n+      {+0.469759464263916d,     -5.450354376430758E-9d,  }, // 614\n+      {+0.47036975622177124d,   +1.6922605350647674E-8d, }, // 615\n+      {+0.4709796905517578d,    +2.4667033200046904E-8d, }, // 616\n+      {+0.47158926725387573d,   +1.8236762070433784E-8d, }, // 617\n+      {+0.472198486328125d,     -1.915204563140137E-9d,  }, // 618\n+      {+0.47280728816986084d,   +2.426795414605756E-8d,  }, // 619\n+      {+0.4734157919883728d,    -2.19717006713618E-8d,   }, // 620\n+      {+0.47402387857437134d,   -2.0974352165535873E-8d, }, // 621\n+      {+0.47463154792785645d,   +2.770970558184228E-8d,  }, // 622\n+      {+0.4752389192581177d,    +5.32006955298355E-9d,   }, // 623\n+      {+0.47584593296051025d,   -2.809054633964104E-8d,  }, // 624\n+      {+0.4764525294303894d,    -1.2470243596102937E-8d, }, // 625\n+      {+0.4770587682723999d,    -6.977226702440138E-9d,  }, // 626\n+      {+0.47766464948654175d,   -1.1165866833118273E-8d, }, // 627\n+      {+0.47827017307281494d,   -2.4591344661022708E-8d, }, // 628\n+      {+0.4788752794265747d,    +1.2794996377383974E-8d, }, // 629\n+      {+0.4794800877571106d,    -1.7772927065973874E-8d, }, // 630\n+      {+0.48008447885513306d,   +3.35657712457243E-9d,   }, // 631\n+      {+0.48068851232528687d,   +1.7020465042442242E-8d, }, // 632\n+      {+0.481292188167572d,     +2.365953779624783E-8d,  }, // 633\n+      {+0.4818955063819885d,    +2.3713798664443718E-8d, }, // 634\n+      {+0.4824984669685364d,    +1.7622455019548098E-8d, }, // 635\n+      {+0.4831010699272156d,    +5.823920246566496E-9d,  }, // 636\n+      {+0.4837033152580261d,    -1.1244184344361017E-8d, }, // 637\n+      {+0.48430514335632324d,   +2.645961716432205E-8d,  }, // 638\n+      {+0.4849066734313965d,    +1.6207809718247905E-10d,}, // 639\n+      {+0.4855077862739563d,    +2.9507744508973654E-8d, }, // 640\n+      {+0.48610860109329224d,   -4.278201128741098E-9d,  }, // 641\n+      {+0.48670899868011475d,   +1.844722015961139E-8d,  }, // 642\n+      {+0.4873090982437134d,    -2.1092372471088425E-8d, }, // 643\n+      {+0.4879087805747986d,    -3.2555596107382053E-9d, }, // 644\n+      {+0.48850810527801514d,   +1.2784366845429667E-8d, }, // 645\n+      {+0.48910707235336304d,   +2.7457984659996047E-8d, }, // 646\n+      {+0.48970574140548706d,   -1.8409546441412518E-8d, }, // 647\n+      {+0.49030399322509766d,   -5.179903818099661E-9d,  }, // 648\n+      {+0.4909018874168396d,    +7.97053127828682E-9d,   }, // 649\n+      {+0.4914994239807129d,    +2.146925464473481E-8d,  }, // 650\n+      {+0.4920966625213623d,    -2.3861648589988232E-8d, }, // 651\n+      {+0.4926934838294983d,    -8.386923035320549E-9d,  }, // 652\n+      {+0.4932899475097656d,    +8.713990131749256E-9d,  }, // 653\n+      {+0.4938860535621643d,    +2.7865534085810115E-8d, }, // 654\n+      {+0.4944818615913391d,    -1.011325138560159E-8d,  }, // 655\n+      {+0.4950772523880005d,    +1.4409851026316708E-8d, }, // 656\n+      {+0.495672345161438d,     -1.735227547472004E-8d,  }, // 657\n+      {+0.49626702070236206d,   +1.4231078209064581E-8d, }, // 658\n+      {+0.49686139822006226d,   -9.628709342929729E-9d,  }, // 659\n+      {+0.4974554181098938d,    -2.8907074856577267E-8d, }, // 660\n+      {+0.4980490207672119d,    +1.6419797090870802E-8d, }, // 661\n+      {+0.49864232540130615d,   +7.561041519403049E-9d,  }, // 662\n+      {+0.49923527240753174d,   +4.538983468118194E-9d,  }, // 663\n+      {+0.49982786178588867d,   +7.770560657946324E-9d,  }, // 664\n+      {+0.500420093536377d,     +1.767197002609876E-8d,  }, // 665\n+      {+0.5010119676589966d,    +3.46586694799214E-8d,   }, // 666\n+      {+0.5016034841537476d,    +5.914537964556077E-8d,  }, // 667\n+      {+0.5021947622299194d,    -2.7663203939320167E-8d, }, // 668\n+      {+0.5027855634689331d,    +1.3064749115929298E-8d, }, // 669\n+      {+0.5033761262893677d,    -5.667682106730711E-8d,  }, // 670\n+      {+0.503966212272644d,     +1.9424534974370594E-9d, }, // 671\n+      {+0.5045560598373413d,    -4.908494602153544E-8d,  }, // 672\n+      {+0.5051454305648804d,    +2.906989285008994E-8d,  }, // 673\n+      {+0.5057345628738403d,    -1.602000800745108E-9d,  }, // 674\n+      {+0.5063233375549316d,    -2.148245271118002E-8d,  }, // 675\n+      {+0.5069117546081543d,    -3.016329994276181E-8d,  }, // 676\n+      {+0.5074998140335083d,    -2.7237099632871992E-8d, }, // 677\n+      {+0.5080875158309937d,    -1.2297127301923986E-8d, }, // 678\n+      {+0.5086748600006104d,    +1.5062624834468093E-8d, }, // 679\n+      {+0.5092618465423584d,    +5.524744954836658E-8d,  }, // 680\n+      {+0.5098485946655273d,    -1.054736327333046E-8d,  }, // 681\n+      {+0.5104348659515381d,    +5.650063324725722E-8d,  }, // 682\n+      {+0.5110208988189697d,    +1.8376017791642605E-8d, }, // 683\n+      {+0.5116065740585327d,    -5.309470636324855E-9d,  }, // 684\n+      {+0.512191891670227d,     -1.4154089255217218E-8d, }, // 685\n+      {+0.5127768516540527d,    -7.756800301729815E-9d,  }, // 686\n+      {+0.5133614540100098d,    +1.4282730618002001E-8d, }, // 687\n+      {+0.5139456987380981d,    +5.2364136172269755E-8d, }, // 688\n+      {+0.5145297050476074d,    -1.2322940607922115E-8d, }, // 689\n+      {+0.5151132345199585d,    +5.903831350855322E-8d,  }, // 690\n+      {+0.5156965255737305d,    +2.8426856726994483E-8d, }, // 691\n+      {+0.5162794589996338d,    +1.544882070711032E-8d,  }, // 692\n+      {+0.5168620347976685d,    +2.0500353979930155E-8d, }, // 693\n+      {+0.5174442529678345d,    +4.397691311390564E-8d,  }, // 694\n+      {+0.5180262327194214d,    -3.2936025225250634E-8d, }, // 695\n+      {+0.5186077356338501d,    +2.857419553449673E-8d,  }, // 696\n+      {+0.5191890001296997d,    -9.51761338269325E-9d,   }, // 697\n+      {+0.5197699069976807d,    -2.7609457648450225E-8d, }, // 698\n+      {+0.520350456237793d,     -2.5309316441333305E-8d, }, // 699\n+      {+0.5209306478500366d,    -2.2258513086839407E-9d, }, // 700\n+      {+0.5215104818344116d,    +4.203159541613745E-8d,  }, // 701\n+      {+0.5220900774002075d,    -1.1356287358852729E-8d, }, // 702\n+      {+0.5226693153381348d,    -4.279090925831093E-8d,  }, // 703\n+      {+0.5232481956481934d,    -5.188364552285819E-8d,  }, // 704\n+      {+0.5238267183303833d,    -3.82465458937857E-8d,   }, // 705\n+      {+0.5244048833847046d,    -1.4923330530645769E-9d, }, // 706\n+      {+0.5249826908111572d,    +5.8765598932137004E-8d, }, // 707\n+      {+0.5255602598190308d,    +2.3703896609663678E-8d, }, // 708\n+      {+0.5261374711990356d,    +1.2917117341231647E-8d, }, // 709\n+      {+0.5267143249511719d,    +2.6789862192139226E-8d, }, // 710\n+      {+0.527290940284729d,     -5.350322253112414E-8d,  }, // 711\n+      {+0.5278670787811279d,    +1.0839714455426386E-8d, }, // 712\n+      {+0.5284429788589478d,    -1.821729591343314E-8d,  }, // 713\n+      {+0.5290185213088989d,    -2.1083014672301448E-8d, }, // 714\n+      {+0.5295937061309814d,    +2.623848491704216E-9d,  }, // 715\n+      {+0.5301685333251953d,    +5.328392630534142E-8d,  }, // 716\n+      {+0.5307431221008301d,    +1.206790586971942E-8d,  }, // 717\n+      {+0.5313173532485962d,    -1.4356011804377797E-9d, }, // 718\n+      {+0.5318912267684937d,    +1.3152074173459994E-8d, }, // 719\n+      {+0.5324647426605225d,    +5.6208949382936426E-8d, }, // 720\n+      {+0.5330380201339722d,    +8.90310227565917E-9d,   }, // 721\n+      {+0.5336109399795532d,    -9.179458802504127E-9d,  }, // 722\n+      {+0.5341835021972656d,    +2.337337845617735E-9d,  }, // 723\n+      {+0.5347557067871094d,    +4.3828918300477925E-8d, }, // 724\n+      {+0.535327672958374d,     -3.5392250480081715E-9d, }, // 725\n+      {+0.53589928150177d,      -2.0183663375378704E-8d, }, // 726\n+      {+0.5364705324172974d,    -5.730898606435436E-9d,  }, // 727\n+      {+0.537041425704956d,     +4.0191927599879235E-8d, }, // 728\n+      {+0.5376120805740356d,    -1.2522542401353875E-9d, }, // 729\n+      {+0.5381823778152466d,    -1.0482571326594316E-8d, }, // 730\n+      {+0.5387523174285889d,    +1.2871924223480165E-8d, }, // 731\n+      {+0.539322018623352d,     -5.002774317612589E-8d,  }, // 732\n+      {+0.539891242980957d,     +3.960668706590162E-8d,  }, // 733\n+      {+0.5404602289199829d,    +4.372568630242375E-8d,  }, // 734\n+      {+0.5410289764404297d,    -3.730232461206926E-8d,  }, // 735\n+      {+0.5415972471237183d,    +3.5309026109857795E-8d, }, // 736\n+      {+0.5421652793884277d,    +2.3508325311148225E-8d, }, // 737\n+      {+0.5427329540252686d,    +4.6871403168921666E-8d, }, // 738\n+      {+0.5433003902435303d,    -1.3445113140270216E-8d, }, // 739\n+      {+0.5438674688339233d,    -3.786663982218041E-8d,  }, // 740\n+      {+0.5444341897964478d,    -2.602850370608209E-8d,  }, // 741\n+      {+0.5450005531311035d,    +2.2433348713144506E-8d, }, // 742\n+      {+0.5455666780471802d,    -1.1326936872620137E-8d, }, // 743\n+      {+0.5461324453353882d,    -7.737252533211342E-9d,  }, // 744\n+      {+0.5466978549957275d,    +3.3564604642699844E-8d, }, // 745\n+      {+0.5472630262374878d,    -6.269066061111782E-9d,  }, // 746\n+      {+0.5478278398513794d,    -7.667998948729528E-9d,  }, // 747\n+      {+0.5483922958374023d,    +2.9728170818998143E-8d, }, // 748\n+      {+0.5489565134048462d,    -1.2930091396008281E-8d, }, // 749\n+      {+0.5495203733444214d,    -1.607434968107079E-8d,  }, // 750\n+      {+0.5500838756561279d,    +2.0653935146671156E-8d, }, // 751\n+      {+0.5506471395492554d,    -2.1596593091833788E-8d, }, // 752\n+      {+0.5512100458145142d,    -2.3259315921149476E-8d, }, // 753\n+      {+0.5517725944519043d,    +1.6022492496522704E-8d, }, // 754\n+      {+0.5523349046707153d,    -2.260433328226171E-8d,  }, // 755\n+      {+0.5528968572616577d,    -1.957497997726303E-8d,  }, // 756\n+      {+0.5534584522247314d,    +2.5465477111883854E-8d, }, // 757\n+      {+0.5540198087692261d,    -6.33792454933092E-9d,   }, // 758\n+      {+0.554580807685852d,     +4.577835263278281E-9d,  }, // 759\n+      {+0.5551414489746094d,    +5.856589221771548E-8d,  }, // 760\n+      {+0.5557018518447876d,    +3.6769498759522324E-8d, }, // 761\n+      {+0.5562618970870972d,    +5.874989409410614E-8d,  }, // 762\n+      {+0.5568217039108276d,    +5.649147309876989E-9d,  }, // 763\n+      {+0.5573811531066895d,    -2.9726830960751796E-9d, }, // 764\n+      {+0.5579402446746826d,    +3.323458344853057E-8d,  }, // 765\n+      {+0.5584990978240967d,    -4.588749093664028E-9d,  }, // 766\n+      {+0.5590575933456421d,    +3.115616594184543E-9d,  }, // 767\n+      {+0.5596157312393188d,    +5.6696103838614634E-8d, }, // 768\n+      {+0.5601736307144165d,    +3.7291263280048303E-8d, }, // 769\n+      {+0.5607312917709351d,    -5.4751646725093355E-8d, }, // 770\n+      {+0.5612884759902954d,    +1.9332630743320287E-8d, }, // 771\n+      {+0.5618454217910767d,    +2.147161515775941E-8d,  }, // 772\n+      {+0.5624021291732788d,    -4.7989172862560625E-8d, }, // 773\n+      {+0.5629583597183228d,    +4.971378973445109E-8d,  }, // 774\n+      {+0.5635144710540771d,    -4.2702997139152675E-8d, }, // 775\n+      {+0.5640701055526733d,    +3.273212962622764E-8d,  }, // 776\n+      {+0.5646255016326904d,    +3.79438125545842E-8d,   }, // 777\n+      {+0.5651806592941284d,    -2.6725298288329835E-8d, }, // 778\n+      {+0.5657354593276978d,    -4.1723833577410244E-8d, }, // 779\n+      {+0.5662899017333984d,    -6.71028256490915E-9d,   }, // 780\n+      {+0.56684410572052d,      -4.055299181908475E-8d,  }, // 781\n+      {+0.567397952079773d,     -2.3702295314000405E-8d, }, // 782\n+      {+0.5679514408111572d,    +4.4181618172507453E-8d, }, // 783\n+      {+0.5685046911239624d,    +4.4228706309734985E-8d, }, // 784\n+      {+0.5690577030181885d,    -2.3222346436879016E-8d, }, // 785\n+      {+0.5696103572845459d,    -3.862412756175274E-8d,  }, // 786\n+      {+0.5701626539230347d,    -1.6390743801589046E-9d, }, // 787\n+      {+0.5707147121429443d,    -3.1139472791083883E-8d, }, // 788\n+      {+0.5712664127349854d,    -7.579587391156013E-9d,  }, // 789\n+      {+0.5718178749084473d,    -4.983281844744412E-8d,  }, // 790\n+      {+0.5723689794540405d,    -3.835454246739619E-8d,  }, // 791\n+      {+0.5729197263717651d,    +2.7190020372374008E-8d, }, // 792\n+      {+0.5734702348709106d,    +2.7925807446276126E-8d, }, // 793\n+      {+0.574020504951477d,     -3.5813506001861646E-8d, }, // 794\n+      {+0.5745704174041748d,    -4.448550564530588E-8d,  }, // 795\n+      {+0.5751199722290039d,    +2.2423840341717488E-9d, }, // 796\n+      {+0.5756692886352539d,    -1.450709904687712E-8d,  }, // 797\n+      {+0.5762182474136353d,    +2.4806815282282017E-8d, }, // 798\n+      {+0.5767669677734375d,    +1.3057724436551892E-9d, }, // 799\n+      {+0.5773153305053711d,    +3.4529452510568104E-8d, }, // 800\n+      {+0.5778634548187256d,    +5.598413198183808E-9d,  }, // 801\n+      {+0.5784112215042114d,    +3.405124925700107E-8d,  }, // 802\n+      {+0.5789587497711182d,    +1.0074354568442952E-9d, }, // 803\n+      {+0.5795059204101562d,    +2.600448597385527E-8d,  }, // 804\n+      {+0.5800528526306152d,    -9.83920263200211E-9d,   }, // 805\n+      {+0.5805994272232056d,    +1.3012807963586057E-8d, }, // 806\n+      {+0.5811457633972168d,    -2.432215917965441E-8d,  }, // 807\n+      {+0.5816917419433594d,    -2.308736892479391E-9d,  }, // 808\n+      {+0.5822374820709229d,    -3.983067093146514E-8d,  }, // 809\n+      {+0.5827828645706177d,    -1.735366061128156E-8d,  }, // 810\n+      {+0.5833280086517334d,    -5.376251584638963E-8d,  }, // 811\n+      {+0.5838727951049805d,    -2.952399778965259E-8d,  }, // 812\n+      {+0.5844172239303589d,    +5.5685313670430624E-8d, }, // 813\n+      {+0.5849615335464478d,    -3.6230268489088716E-8d, }, // 814\n+      {+0.5855053663253784d,    +5.267948957869391E-8d,  }, // 815\n+      {+0.5860490798950195d,    -3.489144132234588E-8d,  }, // 816\n+      {+0.5865923166275024d,    +5.9006122320612716E-8d, }, // 817\n+      {+0.5871354341506958d,    -2.2934896740542648E-8d, }, // 818\n+      {+0.5876781940460205d,    -4.1975650319859075E-8d, }, // 819\n+      {+0.5882205963134766d,    +2.2036094805348692E-9d, }, // 820\n+      {+0.5887627601623535d,    -9.287179048539306E-9d,  }, // 821\n+      {+0.5893045663833618d,    +4.3079982556221595E-8d, }, // 822\n+      {+0.589846134185791d,     +4.041399585161321E-8d,  }, // 823\n+      {+0.5903874635696411d,    -1.696746473863933E-8d,  }, // 824\n+      {+0.5909284353256226d,    -9.53795080582038E-9d,   }, // 825\n+      {+0.5914691686630249d,    -5.619010749352923E-8d,  }, // 826\n+      {+0.5920095443725586d,    -3.7398514182529506E-8d, }, // 827\n+      {+0.5925495624542236d,    +4.71524479659295E-8d,   }, // 828\n+      {+0.5930894613265991d,    -4.0640692434639215E-8d, }, // 829\n+      {+0.5936288833618164d,    +5.716453096255401E-8d,  }, // 830\n+      {+0.5941681861877441d,    -1.6745661720946737E-8d, }, // 831\n+      {+0.5947071313858032d,    -2.3639110433141897E-8d, }, // 832\n+      {+0.5952457189559937d,    +3.67972590471072E-8d,   }, // 833\n+      {+0.595784068107605d,     +4.566672575206695E-8d,  }, // 834\n+      {+0.5963221788406372d,    +3.2813537149653483E-9d, }, // 835\n+      {+0.5968599319458008d,    +2.916199305533732E-8d,  }, // 836\n+      {+0.5973974466323853d,    +4.410412409109416E-9d,  }, // 837\n+      {+0.5979346036911011d,    +4.85464582112459E-8d,   }, // 838\n+      {+0.5984715223312378d,    +4.267089756924666E-8d,  }, // 839\n+      {+0.5990082025527954d,    -1.2906712010774655E-8d, }, // 840\n+      {+0.5995445251464844d,    +1.3319784467641742E-9d, }, // 841\n+      {+0.6000806093215942d,    -3.35137581974451E-8d,   }, // 842\n+      {+0.6006163358688354d,    +2.0734340706476473E-9d, }, // 843\n+      {+0.6011518239974976d,    -1.0808162722402073E-8d, }, // 844\n+      {+0.601686954498291d,     +4.735781872502109E-8d,  }, // 845\n+      {+0.6022218465805054d,    +5.76686738430634E-8d,   }, // 846\n+      {+0.6027565002441406d,    +2.043049589651736E-8d,  }, // 847\n+      {+0.6032907962799072d,    +5.515817703577808E-8d,  }, // 848\n+      {+0.6038248538970947d,    +4.2947540692649586E-8d, }, // 849\n+      {+0.6043586730957031d,    -1.589678872195875E-8d,  }, // 850\n+      {+0.6048921346664429d,    -1.8613847754677912E-9d, }, // 851\n+      {+0.6054253578186035d,    -3.3851886626187444E-8d, }, // 852\n+      {+0.6059582233428955d,    +7.64416021682279E-9d,   }, // 853\n+      {+0.6064908504486084d,    +3.7201467248814224E-9d, }, // 854\n+      {+0.6070232391357422d,    -4.532172996647129E-8d,  }, // 855\n+      {+0.6075552701950073d,    -1.997046552871766E-8d,  }, // 856\n+      {+0.6080870628356934d,    -3.913411606668587E-8d,  }, // 857\n+      {+0.6086184978485107d,    +1.6697361107868944E-8d, }, // 858\n+      {+0.609149694442749d,     +2.8614950293715483E-8d, }, // 859\n+      {+0.6096806526184082d,    -3.081552929643174E-9d,  }, // 860\n+      {+0.6102112531661987d,    +4.111645931319645E-8d,  }, // 861\n+      {+0.6107416152954102d,    +4.2298539553668435E-8d, }, // 862\n+      {+0.6112717390060425d,    +7.630546413718035E-10d, }, // 863\n+      {+0.6118015050888062d,    +3.601718675118614E-8d,  }, // 864\n+      {+0.6123310327529907d,    +2.914906573537692E-8d,  }, // 865\n+      {+0.6128603219985962d,    -1.9544361222269494E-8d, }, // 866\n+      {+0.613389253616333d,     +9.442671392695732E-9d,  }, // 867\n+      {+0.6139179468154907d,    -2.8031202304593286E-9d, }, // 868\n+      {+0.6144464015960693d,    -5.598619958143586E-8d,  }, // 869\n+      {+0.6149744987487793d,    -3.060220883766096E-8d,  }, // 870\n+      {+0.6155023574829102d,    -4.556583652800433E-8d,  }, // 871\n+      {+0.6160298585891724d,    +1.8626341656366314E-8d, }, // 872\n+      {+0.6165571212768555d,    +4.305870564227991E-8d,  }, // 873\n+      {+0.6170841455459595d,    +2.8024460607734262E-8d, }, // 874\n+      {+0.6176109313964844d,    -2.6183651590639875E-8d, }, // 875\n+      {+0.6181373596191406d,    -6.406189112730307E-11d, }, // 876\n+      {+0.6186635494232178d,    -1.2534241706168776E-8d, }, // 877\n+      {+0.6191893815994263d,    +5.5906456251308664E-8d, }, // 878\n+      {+0.6197150945663452d,    -3.286964881802063E-8d,  }, // 879\n+      {+0.6202404499053955d,    -4.0153537978961E-8d,    }, // 880\n+      {+0.6207654476165771d,    +3.434477109643361E-8d,  }, // 881\n+      {+0.6212903261184692d,    -4.750377491075032E-8d,  }, // 882\n+      {+0.6218148469924927d,    -4.699152670372743E-8d,  }, // 883\n+      {+0.6223390102386475d,    +3.617013128065961E-8d,  }, // 884\n+      {+0.6228630542755127d,    -3.6149218175202596E-8d, }, // 885\n+      {+0.6233867406845093d,    -2.5243286814648133E-8d, }, // 886\n+      {+0.6239101886749268d,    -5.003410681432538E-8d,  }, // 887\n+      {+0.6244332790374756d,    +8.974417915105033E-9d,  }, // 888\n+      {+0.6249561309814453d,    +3.285935446876949E-8d,  }, // 889\n+      {+0.6254787445068359d,    +2.190661054038537E-8d,  }, // 890\n+      {+0.6260011196136475d,    -2.3598354190515998E-8d, }, // 891\n+      {+0.6265231370925903d,    +1.5838762427747586E-8d, }, // 892\n+      {+0.6270449161529541d,    +2.129323729978037E-8d,  }, // 893\n+      {+0.6275664567947388d,    -6.950808333865794E-9d,  }, // 894\n+      {+0.6280876398086548d,    +5.059959203156465E-8d,  }, // 895\n+      {+0.6286087036132812d,    -4.41909071122557E-8d,   }, // 896\n+      {+0.6291294097900391d,    -5.262093550784066E-8d,  }, // 897\n+      {+0.6296497583389282d,    +2.559185648444699E-8d,  }, // 898\n+      {+0.6301699876785278d,    -4.768920119497491E-8d,  }, // 899\n+      {+0.6306898593902588d,    -3.376406008397877E-8d,  }, // 900\n+      {+0.6312094926834106d,    -5.156097914033476E-8d,  }, // 901\n+      {+0.6317287683486938d,    +1.840992392368355E-8d,  }, // 902\n+      {+0.632247805595398d,     +5.721951534729663E-8d,  }, // 903\n+      {+0.6327667236328125d,    -5.406177467045421E-8d,  }, // 904\n+      {+0.6332851648330688d,    +4.247320713683124E-8d,  }, // 905\n+      {+0.6338034868240356d,    -1.0524557502830645E-8d, }, // 906\n+      {+0.6343214511871338d,    +2.5641927558519502E-8d, }, // 907\n+      {+0.6348391771316528d,    +3.204135737993823E-8d,  }, // 908\n+      {+0.6353566646575928d,    +8.951285029786536E-9d,  }, // 909\n+      {+0.6358739137649536d,    -4.335116707228395E-8d,  }, // 910\n+      {+0.6363908052444458d,    -5.380016714089483E-9d,  }, // 911\n+      {+0.6369074583053589d,    +3.931710344901743E-9d,  }, // 912\n+      {+0.6374238729476929d,    -1.5140150088220166E-8d, }, // 913\n+      {+0.6379399299621582d,    +5.688910024377372E-8d,  }, // 914\n+      {+0.638455867767334d,     -1.8124135273572568E-8d, }, // 915\n+      {+0.6389714479446411d,    -1.486720391901626E-9d,  }, // 916\n+      {+0.6394867897033691d,    -1.2133811978747018E-8d, }, // 917\n+      {+0.6400018930435181d,    -4.9791700939901716E-8d, }, // 918\n+      {+0.6405166387557983d,    +5.022188652837274E-9d,  }, // 919\n+      {+0.6410311460494995d,    +3.337143177933685E-8d,  }, // 920\n+      {+0.6415454149246216d,    +3.55284719912458E-8d,   }, // 921\n+      {+0.6420594453811646d,    +1.1765332726757802E-8d, }, // 922\n+      {+0.6425732374191284d,    -3.7646381826067834E-8d, }, // 923\n+      {+0.6430866718292236d,    +6.773803682579552E-9d,  }, // 924\n+      {+0.6435998678207397d,    +2.608736797081283E-8d,  }, // 925\n+      {+0.6441128253936768d,    +2.056466263408266E-8d,  }, // 926\n+      {+0.6446255445480347d,    -9.524376551107945E-9d,  }, // 927\n+      {+0.6451379060745239d,    +5.5299060775883977E-8d, }, // 928\n+      {+0.6456501483917236d,    -2.3114497793159813E-8d, }, // 929\n+      {+0.6461620330810547d,    -6.077779731902102E-9d,  }, // 930\n+      {+0.6466736793518066d,    -1.2531793589140273E-8d, }, // 931\n+      {+0.6471850872039795d,    -4.220866994206517E-8d,  }, // 932\n+      {+0.6476961374282837d,    +2.4368339445199057E-8d, }, // 933\n+      {+0.6482070684432983d,    -5.095229574221907E-8d,  }, // 934\n+      {+0.6487176418304443d,    -2.9485356677301627E-8d, }, // 935\n+      {+0.6492279767990112d,    -3.0173901411577916E-8d, }, // 936\n+      {+0.649738073348999d,     -5.275210583909726E-8d,  }, // 937\n+      {+0.6502478122711182d,    +2.2254737134350224E-8d, }, // 938\n+      {+0.6507574319839478d,    -4.330693978322885E-8d,  }, // 939\n+      {+0.6512666940689087d,    -1.0753950588009912E-8d, }, // 940\n+      {+0.6517757177352905d,    +9.686179886293545E-10d, }, // 941\n+      {+0.6522845029830933d,    -7.875434494414498E-9d,  }, // 942\n+      {+0.6527930498123169d,    -3.702271091849158E-8d,  }, // 943\n+      {+0.6533012390136719d,    +3.2999073763758614E-8d, }, // 944\n+      {+0.6538093090057373d,    -3.5966064858620067E-8d, }, // 945\n+      {+0.6543170213699341d,    -5.23735298540578E-9d,   }, // 946\n+      {+0.6548244953155518d,    +6.237715351293023E-9d,  }, // 947\n+      {+0.6553317308425903d,    -1.279462699936282E-9d,  }, // 948\n+      {+0.6558387279510498d,    -2.7527887552743672E-8d, }, // 949\n+      {+0.6563453674316406d,    +4.696233317356646E-8d,  }, // 950\n+      {+0.6568518877029419d,    -1.5967172745329108E-8d, }, // 951\n+      {+0.6573580503463745d,    +2.2361985518423144E-8d, }, // 952\n+      {+0.657863974571228d,     +4.2999935789083046E-8d, }, // 953\n+      {+0.6583696603775024d,    +4.620570188811826E-8d,  }, // 954\n+      {+0.6588751077651978d,    +3.223791487908353E-8d,  }, // 955\n+      {+0.659380316734314d,     +1.3548138612715822E-9d, }, // 956\n+      {+0.6598852872848511d,    -4.618575323863973E-8d,  }, // 957\n+      {+0.6603899002075195d,    +9.082960673843353E-9d,  }, // 958\n+      {+0.6608942747116089d,    +4.820873399634487E-8d,  }, // 959\n+      {+0.6613985300064087d,    -4.776104368314602E-8d,  }, // 960\n+      {+0.6619024276733398d,    -4.0151502150238136E-8d, }, // 961\n+      {+0.6624060869216919d,    -4.791602708710648E-8d,  }, // 962\n+      {+0.6629093885421753d,    +4.8410188461165925E-8d, }, // 963\n+      {+0.6634125709533691d,    +1.0663697110471944E-8d, }, // 964\n+      {+0.6639155149459839d,    -4.1691464781797555E-8d, }, // 965\n+      {+0.66441810131073d,      +1.080835500478704E-8d,  }, // 966\n+      {+0.664920449256897d,     +4.920784622407246E-8d,  }, // 967\n+      {+0.6654226779937744d,    -4.544868396511241E-8d,  }, // 968\n+      {+0.6659245491027832d,    -3.448944157854234E-8d,  }, // 969\n+      {+0.6664261817932129d,    -3.6870882345139385E-8d, }, // 970\n+      {+0.6669275760650635d,    -5.234055273962444E-8d,  }, // 971\n+      {+0.6674286127090454d,    +3.856291077979099E-8d,  }, // 972\n+      {+0.6679295301437378d,    -2.327375671320742E-9d,  }, // 973\n+      {+0.6684302091598511d,    -5.555080534042001E-8d,  }, // 974\n+      {+0.6689305305480957d,    -1.6471487337453832E-9d, }, // 975\n+      {+0.6694306135177612d,    +4.042486803683015E-8d,  }, // 976\n+      {+0.6699305772781372d,    -4.8293856891818295E-8d, }, // 977\n+      {+0.6704301834106445d,    -2.9134931730784303E-8d, }, // 978\n+      {+0.6709295511245728d,    -2.1058207594753368E-8d, }, // 979\n+      {+0.6714286804199219d,    -2.3814619551682855E-8d, }, // 980\n+      {+0.6719275712966919d,    -3.7155475428252136E-8d, }, // 981\n+      {+0.6724261045455933d,    +5.8376834484391746E-8d, }, // 982\n+      {+0.6729245185852051d,    +2.4611679969129262E-8d, }, // 983\n+      {+0.6734226942062378d,    -1.899407107267079E-8d,  }, // 984\n+      {+0.6739205121994019d,    +4.7016079464436395E-8d, }, // 985\n+      {+0.6744182109832764d,    -1.5529608026276525E-8d, }, // 986\n+      {+0.6749155521392822d,    +3.203391672602453E-8d,  }, // 987\n+      {+0.6754127740859985d,    -4.8465821804075345E-8d, }, // 988\n+      {+0.6759096384048462d,    -1.8364507801369988E-8d, }, // 989\n+      {+0.6764062643051147d,    +3.3739397633046517E-9d, }, // 990\n+      {+0.6769026517868042d,    +1.6994526063192333E-8d, }, // 991\n+      {+0.6773988008499146d,    +2.2741891590028428E-8d, }, // 992\n+      {+0.6778947114944458d,    +2.0860312877435047E-8d, }, // 993\n+      {+0.678390383720398d,     +1.1593703222523284E-8d, }, // 994\n+      {+0.678885817527771d,     -4.814386594291911E-9d,  }, // 995\n+      {+0.6793810129165649d,    -2.812076759125914E-8d,  }, // 996\n+      {+0.6798759698867798d,    -5.808261186903479E-8d,  }, // 997\n+      {+0.680370569229126d,     +2.4751837654582522E-8d, }, // 998\n+      {+0.6808650493621826d,    -1.7793890245755405E-8d, }, // 999\n+      {+0.6813591718673706d,    +5.294053246347931E-8d,  }, // 1000\n+      {+0.681853175163269d,     -1.2220826223585654E-9d, }, // 1001\n+      {+0.6823468208312988d,    +5.8377876767612725E-8d, }, // 1002\n+      {+0.6828403472900391d,    -6.437492120743254E-9d,  }, // 1003\n+      {+0.6833335161209106d,    +4.2990710043633113E-8d, }, // 1004\n+      {+0.6838265657424927d,    -3.1516131027023284E-8d, }, // 1005\n+      {+0.684319257736206d,     +8.70017386744679E-9d,   }, // 1006\n+      {+0.6848117113113403d,    +4.466959125843237E-8d,  }, // 1007\n+      {+0.6853040456771851d,    -4.25782656420497E-8d,   }, // 1008\n+      {+0.6857960224151611d,    -1.4386267593671393E-8d, }, // 1009\n+      {+0.6862877607345581d,    +1.0274494061148778E-8d, }, // 1010\n+      {+0.686779260635376d,     +3.164186629229597E-8d,  }, // 1011\n+      {+0.6872705221176147d,    +4.995334552140326E-8d,  }, // 1012\n+      {+0.687761664390564d,     -5.3763211240398744E-8d, }, // 1013\n+      {+0.6882524490356445d,    -4.0852427502515625E-8d, }, // 1014\n+      {+0.688742995262146d,     -3.0287143914420064E-8d, }, // 1015\n+      {+0.6892333030700684d,    -2.183125937905008E-8d,  }, // 1016\n+      {+0.6897233724594116d,    -1.524901992178814E-8d,  }, // 1017\n+      {+0.6902132034301758d,    -1.0305018010328949E-8d, }, // 1018\n+      {+0.6907027959823608d,    -6.764191876212205E-9d,  }, // 1019\n+      {+0.6911921501159668d,    -4.391824838015402E-9d,  }, // 1020\n+      {+0.6916812658309937d,    -2.9535446262017846E-9d, }, // 1021\n+      {+0.6921701431274414d,    -2.2153227096187463E-9d, }, // 1022\n+      {+0.6926587820053101d,    -1.943473623641502E-9d,  }, // 1023\n+                };\n             }\n-\n-            if (x == Double.NEGATIVE_INFINITY) {\n-                return Math.PI*3.0/4.0;\n-            }\n-\n-            return Math.PI/2.0;\n-        }\n-\n-        if (y == Double.NEGATIVE_INFINITY) {\n-            if (x == Double.POSITIVE_INFINITY) {\n-                return -Math.PI/4.0;\n-            }\n-\n-            if (x == Double.NEGATIVE_INFINITY) {\n-                return -Math.PI*3.0/4.0;\n-            }\n-\n-            return -Math.PI/2.0;\n-        }\n-\n-        if (x == Double.POSITIVE_INFINITY) {\n-            if (y > 0.0 || 1/y > 0.0) {\n-                return 0.0;\n-            }\n-\n-            if (y < 0.0 || 1/y < 0.0) {\n-                return -0.0;\n-            }\n-        }\n-\n-        if (x == Double.NEGATIVE_INFINITY)\n-        {\n-            if (y > 0.0 || 1/y > 0.0) {\n-                return Math.PI;\n-            }\n-\n-            if (y < 0.0 || 1/y < 0.0) {\n-                return -Math.PI;\n-            }\n-        }\n-\n-        // Neither y nor x can be infinite or NAN here\n-\n-        if (x == 0) {\n-            if (y > 0.0 || 1/y > 0.0) {\n-                return Math.PI/2.0;\n-            }\n-\n-            if (y < 0.0 || 1/y < 0.0) {\n-                return -Math.PI/2.0;\n-            }\n-        }\n-\n-        // Compute ratio r = y/x\n-        final double r = y/x;\n-        if (Double.isInfinite(r)) { // bypass calculations that can create NaN\n-            return atan(r, 0, x < 0);\n-        }\n-\n-        double ra = doubleHighPart(r);\n-        double rb = r - ra;\n-\n-        // Split x\n-        final double xa = doubleHighPart(x);\n-        final double xb = x - xa;\n-\n-        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;\n-\n-        double temp = ra + rb;\n-        rb = -(temp - ra - rb);\n-        ra = temp;\n-\n-        if (ra == 0) { // Fix up the sign so atan works correctly\n-            ra = copySign(0.0, y);\n-        }\n-\n-        // Call atan\n-        double result = atan(ra, rb, x < 0);\n-\n-        return result;\n+        }\n     }\n \n-    /** Compute the arc sine of a number.\n-     * @param x number on which evaluation is done\n-     * @return arc sine of x\n-     */\n-    public static double asin(double x) {\n-      if (x != x) {\n-          return Double.NaN;\n-      }\n-\n-      if (x > 1.0 || x < -1.0) {\n-          return Double.NaN;\n-      }\n-\n-      if (x == 1.0) {\n-          return Math.PI/2.0;\n-      }\n-\n-      if (x == -1.0) {\n-          return -Math.PI/2.0;\n-      }\n-\n-      if (x == 0.0) { // Matches +/- 0.0; return correct sign\n-          return x;\n-      }\n-\n-      /* Compute asin(x) = atan(x/sqrt(1-x*x)) */\n-\n-      /* Split x */\n-      double temp = x * HEX_40000000;\n-      final double xa = x + temp - temp;\n-      final double xb = x - xa;\n-\n-      /* Square it */\n-      double ya = xa*xa;\n-      double yb = xa*xb*2.0 + xb*xb;\n-\n-      /* Subtract from 1 */\n-      ya = -ya;\n-      yb = -yb;\n-\n-      double za = 1.0 + ya;\n-      double zb = -(za - 1.0 - ya);\n-\n-      temp = za + yb;\n-      zb += -(temp - za - yb);\n-      za = temp;\n-\n-      /* Square root */\n-      double y;\n-      y = sqrt(za);\n-      temp = y * HEX_40000000;\n-      ya = y + temp - temp;\n-      yb = y - ya;\n-\n-      /* Extend precision of sqrt */\n-      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);\n-\n-      /* Contribution of zb to sqrt */\n-      double dx = zb / (2.0*y);\n-\n-      // Compute ratio r = x/y\n-      double r = x/y;\n-      temp = r * HEX_40000000;\n-      double ra = r + temp - temp;\n-      double rb = r - ra;\n-\n-      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division\n-      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.\n-\n-      temp = ra + rb;\n-      rb = -(temp - ra - rb);\n-      ra = temp;\n-\n-      return atan(ra, rb, false);\n-    }\n-\n-    /** Compute the arc cosine of a number.\n-     * @param x number on which evaluation is done\n-     * @return arc cosine of x\n-     */\n-    public static double acos(double x) {\n-      if (x != x) {\n-          return Double.NaN;\n-      }\n-\n-      if (x > 1.0 || x < -1.0) {\n-          return Double.NaN;\n-      }\n-\n-      if (x == -1.0) {\n-          return Math.PI;\n-      }\n-\n-      if (x == 1.0) {\n-          return 0.0;\n-      }\n-\n-      if (x == 0) {\n-          return Math.PI/2.0;\n-      }\n-\n-      /* Compute acos(x) = atan(sqrt(1-x*x)/x) */\n-\n-      /* Split x */\n-      double temp = x * HEX_40000000;\n-      final double xa = x + temp - temp;\n-      final double xb = x - xa;\n-\n-      /* Square it */\n-      double ya = xa*xa;\n-      double yb = xa*xb*2.0 + xb*xb;\n-\n-      /* Subtract from 1 */\n-      ya = -ya;\n-      yb = -yb;\n-\n-      double za = 1.0 + ya;\n-      double zb = -(za - 1.0 - ya);\n-\n-      temp = za + yb;\n-      zb += -(temp - za - yb);\n-      za = temp;\n-\n-      /* Square root */\n-      double y = sqrt(za);\n-      temp = y * HEX_40000000;\n-      ya = y + temp - temp;\n-      yb = y - ya;\n-\n-      /* Extend precision of sqrt */\n-      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);\n-\n-      /* Contribution of zb to sqrt */\n-      yb += zb / (2.0*y);\n-      y = ya+yb;\n-      yb = -(y - ya - yb);\n-\n-      // Compute ratio r = y/x\n-      double r = y/x;\n-\n-      // Did r overflow?\n-      if (Double.isInfinite(r)) { // x is effectively zero\n-          return Math.PI/2; // so return the appropriate value\n-      }\n-\n-      double ra = doubleHighPart(r);\n-      double rb = r - ra;\n-\n-      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division\n-      rb += yb / x;  // Add in effect additional bits of sqrt.\n-\n-      temp = ra + rb;\n-      rb = -(temp - ra - rb);\n-      ra = temp;\n-\n-      return atan(ra, rb, x<0);\n-    }\n-\n-    /** Compute the cubic root of a number.\n-     * @param x number on which evaluation is done\n-     * @return cubic root of x\n-     */\n-    public static double cbrt(double x) {\n-      /* Convert input double to bits */\n-      long inbits = Double.doubleToLongBits(x);\n-      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;\n-      boolean subnormal = false;\n-\n-      if (exponent == -1023) {\n-          if (x == 0) {\n-              return x;\n-          }\n-\n-          /* Subnormal, so normalize */\n-          subnormal = true;\n-          x *= 1.8014398509481984E16;  // 2^54\n-          inbits = Double.doubleToLongBits(x);\n-          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;\n-      }\n-\n-      if (exponent == 1024) {\n-          // Nan or infinity.  Don't care which.\n-          return x;\n-      }\n-\n-      /* Divide the exponent by 3 */\n-      int exp3 = exponent / 3;\n-\n-      /* p2 will be the nearest power of 2 to x with its exponent divided by 3 */\n-      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |\n-                                          (long)(((exp3 + 1023) & 0x7ff)) << 52);\n-\n-      /* This will be a number between 1 and 2 */\n-      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);\n-\n-      /* Estimate the cube root of mant by polynomial */\n-      double est = -0.010714690733195933;\n-      est = est * mant + 0.0875862700108075;\n-      est = est * mant + -0.3058015757857271;\n-      est = est * mant + 0.7249995199969751;\n-      est = est * mant + 0.5039018405998233;\n-\n-      est *= CBRTTWO[exponent % 3 + 2];\n-\n-      // est should now be good to about 15 bits of precision.   Do 2 rounds of\n-      // Newton's method to get closer,  this should get us full double precision\n-      // Scale down x for the purpose of doing newtons method.  This avoids over/under flows.\n-      final double xs = x / (p2*p2*p2);\n-      est += (xs - est*est*est) / (3*est*est);\n-      est += (xs - est*est*est) / (3*est*est);\n-\n-      // Do one round of Newton's method in extended precision to get the last bit right.\n-      double temp = est * HEX_40000000;\n-      double ya = est + temp - temp;\n-      double yb = est - ya;\n-\n-      double za = ya * ya;\n-      double zb = ya * yb * 2.0 + yb * yb;\n-      temp = za * HEX_40000000;\n-      double temp2 = za + temp - temp;\n-      zb += za - temp2;\n-      za = temp2;\n-\n-      zb = za * yb + ya * zb + zb * yb;\n-      za = za * ya;\n-\n-      double na = xs - za;\n-      double nb = -(na - xs + za);\n-      nb -= zb;\n-\n-      est += (na+nb)/(3*est*est);\n-\n-      /* Scale by a power of two, so this is exact. */\n-      est *= p2;\n-\n-      if (subnormal) {\n-          est *= 3.814697265625E-6;  // 2^-18\n-      }\n-\n-      return est;\n-    }\n-\n-    /**\n-     *  Convert degrees to radians, with error of less than 0.5 ULP\n-     *  @param x angle in degrees\n-     *  @return x converted into radians\n-     */\n-    public static double toRadians(double x)\n-    {\n-        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n-            return x;\n-        }\n-\n-        // These are PI/180 split into high and low order bits\n-        final double facta = 0.01745329052209854;\n-        final double factb = 1.997844754509471E-9;\n-\n-        double xa = doubleHighPart(x);\n-        double xb = x - xa;\n-\n-        double result = xb * factb + xb * facta + xa * factb + xa * facta;\n-        if (result == 0) {\n-            result = result * x; // ensure correct sign if calculation underflows\n-        }\n-        return result;\n-    }\n-\n-    /**\n-     *  Convert radians to degrees, with error of less than 0.5 ULP\n-     *  @param x angle in radians\n-     *  @return x converted into degrees\n-     */\n-    public static double toDegrees(double x)\n-    {\n-        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n-            return x;\n-        }\n-\n-        // These are 180/PI split into high and low order bits\n-        final double facta = 57.2957763671875;\n-        final double factb = 3.145894820876798E-6;\n-\n-        double xa = doubleHighPart(x);\n-        double xb = x - xa;\n-\n-        return xb * factb + xb * facta + xa * factb + xa * facta;\n-    }\n-\n-    /**\n-     * Absolute value.\n-     * @param x number from which absolute value is requested\n-     * @return abs(x)\n-     */\n-    public static int abs(final int x) {\n-        return (x < 0) ? -x : x;\n-    }\n-\n-    /**\n-     * Absolute value.\n-     * @param x number from which absolute value is requested\n-     * @return abs(x)\n-     */\n-    public static long abs(final long x) {\n-        return (x < 0l) ? -x : x;\n-    }\n-\n-    /**\n-     * Absolute value.\n-     * @param x number from which absolute value is requested\n-     * @return abs(x)\n-     */\n-    public static float abs(final float x) {\n-        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0\n-    }\n-\n-    /**\n-     * Absolute value.\n-     * @param x number from which absolute value is requested\n-     * @return abs(x)\n-     */\n-    public static double abs(double x) {\n-        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n-    }\n-\n-    /**\n-     * Compute least significant bit (Unit in Last Position) for a number.\n-     * @param x number from which ulp is requested\n-     * @return ulp(x)\n-     */\n-    public static double ulp(double x) {\n-        if (Double.isInfinite(x)) {\n-            return Double.POSITIVE_INFINITY;\n-        }\n-        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));\n-    }\n-\n-    /**\n-     * Compute least significant bit (Unit in Last Position) for a number.\n-     * @param x number from which ulp is requested\n-     * @return ulp(x)\n-     */\n-    public static float ulp(float x) {\n-        if (Float.isInfinite(x)) {\n-            return Float.POSITIVE_INFINITY;\n-        }\n-        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));\n-    }\n-\n-    /**\n-     * Multiply a double number by a power of 2.\n-     * @param d number to multiply\n-     * @param n power of 2\n-     * @return d &times; 2<sup>n</sup>\n-     */\n-    public static double scalb(final double d, final int n) {\n-\n-        // first simple and fast handling when 2^n can be represented using normal numbers\n-        if ((n > -1023) && (n < 1024)) {\n-            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);\n-        }\n-\n-        // handle special cases\n-        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {\n-            return d;\n-        }\n-        if (n < -2098) {\n-            return (d > 0) ? 0.0 : -0.0;\n-        }\n-        if (n > 2097) {\n-            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;\n-        }\n-\n-        // decompose d\n-        final long bits = Double.doubleToLongBits(d);\n-        final long sign = bits & 0x8000000000000000L;\n-        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;\n-        long mantissa   = bits & 0x000fffffffffffffL;\n-\n-        // compute scaled exponent\n-        int scaledExponent = exponent + n;\n-\n-        if (n < 0) {\n-            // we are really in the case n <= -1023\n-            if (scaledExponent > 0) {\n-                // both the input and the result are normal numbers, we only adjust the exponent\n-                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);\n-            } else if (scaledExponent > -53) {\n-                // the input is a normal number and the result is a subnormal number\n-\n-                // recover the hidden mantissa bit\n-                mantissa = mantissa | (1L << 52);\n-\n-                // scales down complete mantissa, hence losing least significant bits\n-                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));\n-                mantissa = mantissa >>> (1 - scaledExponent);\n-                if (mostSignificantLostBit != 0) {\n-                    // we need to add 1 bit to round up the result\n-                    mantissa++;\n-                }\n-                return Double.longBitsToDouble(sign | mantissa);\n-\n-            } else {\n-                // no need to compute the mantissa, the number scales down to 0\n-                return (sign == 0L) ? 0.0 : -0.0;\n-            }\n-        } else {\n-            // we are really in the case n >= 1024\n-            if (exponent == 0) {\n-\n-                // the input number is subnormal, normalize it\n-                while ((mantissa >>> 52) != 1) {\n-                    mantissa = mantissa << 1;\n-                    --scaledExponent;\n-                }\n-                ++scaledExponent;\n-                mantissa = mantissa & 0x000fffffffffffffL;\n-\n-                if (scaledExponent < 2047) {\n-                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);\n-                } else {\n-                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;\n-                }\n-\n-            } else if (scaledExponent < 2047) {\n-                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);\n-            } else {\n-                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;\n-            }\n-        }\n-\n-    }\n-\n-    /**\n-     * Multiply a float number by a power of 2.\n-     * @param f number to multiply\n-     * @param n power of 2\n-     * @return f &times; 2<sup>n</sup>\n-     */\n-    public static float scalb(final float f, final int n) {\n-\n-        // first simple and fast handling when 2^n can be represented using normal numbers\n-        if ((n > -127) && (n < 128)) {\n-            return f * Float.intBitsToFloat((n + 127) << 23);\n-        }\n-\n-        // handle special cases\n-        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {\n-            return f;\n-        }\n-        if (n < -277) {\n-            return (f > 0) ? 0.0f : -0.0f;\n-        }\n-        if (n > 276) {\n-            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;\n-        }\n-\n-        // decompose f\n-        final int bits = Float.floatToIntBits(f);\n-        final int sign = bits & 0x80000000;\n-        int  exponent  = (bits >>> 23) & 0xff;\n-        int mantissa   = bits & 0x007fffff;\n-\n-        // compute scaled exponent\n-        int scaledExponent = exponent + n;\n-\n-        if (n < 0) {\n-            // we are really in the case n <= -127\n-            if (scaledExponent > 0) {\n-                // both the input and the result are normal numbers, we only adjust the exponent\n-                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);\n-            } else if (scaledExponent > -24) {\n-                // the input is a normal number and the result is a subnormal number\n-\n-                // recover the hidden mantissa bit\n-                mantissa = mantissa | (1 << 23);\n-\n-                // scales down complete mantissa, hence losing least significant bits\n-                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));\n-                mantissa = mantissa >>> (1 - scaledExponent);\n-                if (mostSignificantLostBit != 0) {\n-                    // we need to add 1 bit to round up the result\n-                    mantissa++;\n-                }\n-                return Float.intBitsToFloat(sign | mantissa);\n-\n-            } else {\n-                // no need to compute the mantissa, the number scales down to 0\n-                return (sign == 0) ? 0.0f : -0.0f;\n-            }\n-        } else {\n-            // we are really in the case n >= 128\n-            if (exponent == 0) {\n-\n-                // the input number is subnormal, normalize it\n-                while ((mantissa >>> 23) != 1) {\n-                    mantissa = mantissa << 1;\n-                    --scaledExponent;\n-                }\n-                ++scaledExponent;\n-                mantissa = mantissa & 0x007fffff;\n-\n-                if (scaledExponent < 255) {\n-                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);\n-                } else {\n-                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;\n-                }\n-\n-            } else if (scaledExponent < 255) {\n-                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);\n-            } else {\n-                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;\n-            }\n-        }\n-\n-    }\n-\n-    /**\n-     * Get the next machine representable number after a number, moving\n-     * in the direction of another number.\n-     * <p>\n-     * The ordering is as follows (increasing):\n-     * <ul>\n-     * <li>-INFINITY</li>\n-     * <li>-MAX_VALUE</li>\n-     * <li>-MIN_VALUE</li>\n-     * <li>-0.0</li>\n-     * <li>+0.0</li>\n-     * <li>+MIN_VALUE</li>\n-     * <li>+MAX_VALUE</li>\n-     * <li>+INFINITY</li>\n-     * <li></li>\n-     * <p>\n-     * If arguments compare equal, then the second argument is returned.\n-     * <p>\n-     * If {@code direction} is greater than {@code d},\n-     * the smallest machine representable number strictly greater than\n-     * {@code d} is returned; if less, then the largest representable number\n-     * strictly less than {@code d} is returned.</p>\n-     * <p>\n-     * If {@code d} is infinite and direction does not\n-     * bring it back to finite numbers, it is returned unchanged.</p>\n-     *\n-     * @param d base number\n-     * @param direction (the only important thing is whether\n-     * {@code direction} is greater or smaller than {@code d})\n-     * @return the next machine representable number in the specified direction\n-     */\n-    public static double nextAfter(double d, double direction) {\n-\n-        // handling of some important special cases\n-        if (Double.isNaN(d) || Double.isNaN(direction)) {\n-            return Double.NaN;\n-        } else if (d == direction) {\n-            return direction;\n-        } else if (Double.isInfinite(d)) {\n-            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;\n-        } else if (d == 0) {\n-            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;\n-        }\n-        // special cases MAX_VALUE to infinity and  MIN_VALUE to 0\n-        // are handled just as normal numbers\n-\n-        final long bits = Double.doubleToLongBits(d);\n-        final long sign = bits & 0x8000000000000000L;\n-        if ((direction < d) ^ (sign == 0L)) {\n-            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));\n-        } else {\n-            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));\n-        }\n-\n-    }\n-\n-    /**\n-     * Get the next machine representable number after a number, moving\n-     * in the direction of another number.\n-     * <p>\n-     * The ordering is as follows (increasing):\n-     * <ul>\n-     * <li>-INFINITY</li>\n-     * <li>-MAX_VALUE</li>\n-     * <li>-MIN_VALUE</li>\n-     * <li>-0.0</li>\n-     * <li>+0.0</li>\n-     * <li>+MIN_VALUE</li>\n-     * <li>+MAX_VALUE</li>\n-     * <li>+INFINITY</li>\n-     * <li></li>\n-     * <p>\n-     * If arguments compare equal, then the second argument is returned.\n-     * <p>\n-     * If {@code direction} is greater than {@code f},\n-     * the smallest machine representable number strictly greater than\n-     * {@code f} is returned; if less, then the largest representable number\n-     * strictly less than {@code f} is returned.</p>\n-     * <p>\n-     * If {@code f} is infinite and direction does not\n-     * bring it back to finite numbers, it is returned unchanged.</p>\n-     *\n-     * @param f base number\n-     * @param direction (the only important thing is whether\n-     * {@code direction} is greater or smaller than {@code f})\n-     * @return the next machine representable number in the specified direction\n-     */\n-    public static float nextAfter(final float f, final double direction) {\n-\n-        // handling of some important special cases\n-        if (Double.isNaN(f) || Double.isNaN(direction)) {\n-            return Float.NaN;\n-        } else if (f == direction) {\n-            return (float) direction;\n-        } else if (Float.isInfinite(f)) {\n-            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;\n-        } else if (f == 0f) {\n-            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;\n-        }\n-        // special cases MAX_VALUE to infinity and  MIN_VALUE to 0\n-        // are handled just as normal numbers\n-\n-        final int bits = Float.floatToIntBits(f);\n-        final int sign = bits & 0x80000000;\n-        if ((direction < f) ^ (sign == 0)) {\n-            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));\n-        } else {\n-            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));\n-        }\n-\n-    }\n-\n-    /** Get the largest whole number smaller than x.\n-     * @param x number from which floor is requested\n-     * @return a double number f such that f is an integer f <= x < f + 1.0\n-     */\n-    public static double floor(double x) {\n-        long y;\n-\n-        if (x != x) { // NaN\n-            return x;\n-        }\n-\n-        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {\n-            return x;\n-        }\n-\n-        y = (long) x;\n-        if (x < 0 && y != x) {\n-            y--;\n-        }\n-\n-        if (y == 0) {\n-            return x*y;\n-        }\n-\n-        return y;\n-    }\n-\n-    /** Get the smallest whole number larger than x.\n-     * @param x number from which ceil is requested\n-     * @return a double number c such that c is an integer c - 1.0 < x <= c\n-     */\n-    public static double ceil(double x) {\n-        double y;\n-\n-        if (x != x) { // NaN\n-            return x;\n-        }\n-\n-        y = floor(x);\n-        if (y == x) {\n-            return y;\n-        }\n-\n-        y += 1.0;\n-\n-        if (y == 0) {\n-            return x*y;\n-        }\n-\n-        return y;\n-    }\n-\n-    /** Get the whole number that is the nearest to x, or the even one if x is exactly half way between two integers.\n-     * @param x number from which nearest whole number is requested\n-     * @return a double number r such that r is an integer r - 0.5 <= x <= r + 0.5\n-     */\n-    public static double rint(double x) {\n-        double y = floor(x);\n-        double d = x - y;\n-\n-        if (d > 0.5) {\n-            if (y == -1.0) {\n-                return -0.0; // Preserve sign of operand\n-            }\n-            return y+1.0;\n-        }\n-        if (d < 0.5) {\n-            return y;\n-        }\n-\n-        /* half way, round to even */\n-        long z = (long) y;\n-        return (z & 1) == 0 ? y : y + 1.0;\n-    }\n-\n-    /** Get the closest long to x.\n-     * @param x number from which closest long is requested\n-     * @return closest long to x\n-     */\n-    public static long round(double x) {\n-        return (long) floor(x + 0.5);\n-    }\n-\n-    /** Get the closest int to x.\n-     * @param x number from which closest int is requested\n-     * @return closest int to x\n-     */\n-    public static int round(final float x) {\n-        return (int) floor(x + 0.5f);\n-    }\n-\n-    /** Compute the minimum of two values\n-     * @param a first value\n-     * @param b second value\n-     * @return a if a is lesser or equal to b, b otherwise\n-     */\n-    public static int min(final int a, final int b) {\n-        return (a <= b) ? a : b;\n-    }\n-\n-    /** Compute the minimum of two values\n-     * @param a first value\n-     * @param b second value\n-     * @return a if a is lesser or equal to b, b otherwise\n-     */\n-    public static long min(final long a, final long b) {\n-        return (a <= b) ? a : b;\n-    }\n-\n-    /** Compute the minimum of two values\n-     * @param a first value\n-     * @param b second value\n-     * @return a if a is lesser or equal to b, b otherwise\n-     */\n-    public static float min(final float a, final float b) {\n-        if (a > b) {\n-            return b;\n-        }\n-        if (a < b) {\n-            return a;\n-        }\n-        /* if either arg is NaN, return NaN */\n-        if (a != b) {\n-            return Float.NaN;\n-        }\n-        /* min(+0.0,-0.0) == -0.0 */\n-        /* 0x80000000 == Float.floatToRawIntBits(-0.0d) */\n-        int bits = Float.floatToRawIntBits(a);\n-        if (bits == 0x80000000) {\n-            return a;\n-        }\n-        return b;\n-    }\n-\n-    /** Compute the minimum of two values\n-     * @param a first value\n-     * @param b second value\n-     * @return a if a is lesser or equal to b, b otherwise\n-     */\n-    public static double min(final double a, final double b) {\n-        if (a > b) {\n-            return b;\n-        }\n-        if (a < b) {\n-            return a;\n-        }\n-        /* if either arg is NaN, return NaN */\n-        if (a != b) {\n-            return Double.NaN;\n-        }\n-        /* min(+0.0,-0.0) == -0.0 */\n-        /* 0x8000000000000000L == Double.doubleToRawLongBits(-0.0d) */\n-        long bits = Double.doubleToRawLongBits(a);\n-        if (bits == 0x8000000000000000L) {\n-            return a;\n-        }\n-        return b;\n-    }\n-\n-    /** Compute the maximum of two values\n-     * @param a first value\n-     * @param b second value\n-     * @return b if a is lesser or equal to b, a otherwise\n-     */\n-    public static int max(final int a, final int b) {\n-        return (a <= b) ? b : a;\n-    }\n-\n-    /** Compute the maximum of two values\n-     * @param a first value\n-     * @param b second value\n-     * @return b if a is lesser or equal to b, a otherwise\n-     */\n-    public static long max(final long a, final long b) {\n-        return (a <= b) ? b : a;\n-    }\n-\n-    /** Compute the maximum of two values\n-     * @param a first value\n-     * @param b second value\n-     * @return b if a is lesser or equal to b, a otherwise\n-     */\n-    public static float max(final float a, final float b) {\n-        if (a > b) {\n-            return a;\n-        }\n-        if (a < b) {\n-            return b;\n-        }\n-        /* if either arg is NaN, return NaN */\n-        if (a != b) {\n-            return Float.NaN;\n-        }\n-        /* min(+0.0,-0.0) == -0.0 */\n-        /* 0x80000000 == Float.floatToRawIntBits(-0.0d) */\n-        int bits = Float.floatToRawIntBits(a);\n-        if (bits == 0x80000000) {\n-            return b;\n-        }\n-        return a;\n-    }\n-\n-    /** Compute the maximum of two values\n-     * @param a first value\n-     * @param b second value\n-     * @return b if a is lesser or equal to b, a otherwise\n-     */\n-    public static double max(final double a, final double b) {\n-        if (a > b) {\n-            return a;\n-        }\n-        if (a < b) {\n-            return b;\n-        }\n-        /* if either arg is NaN, return NaN */\n-        if (a != b) {\n-            return Double.NaN;\n-        }\n-        /* min(+0.0,-0.0) == -0.0 */\n-        /* 0x8000000000000000L == Double.doubleToRawLongBits(-0.0d) */\n-        long bits = Double.doubleToRawLongBits(a);\n-        if (bits == 0x8000000000000000L) {\n-            return b;\n-        }\n-        return a;\n-    }\n-\n-    /**\n-     * Returns the hypotenuse of a triangle with sides {@code x} and {@code y}\n-     * - sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)<br/>\n-     * avoiding intermediate overflow or underflow.\n-     *\n-     * <ul>\n-     * <li> If either argument is infinite, then the result is positive infinity.</li>\n-     * <li> else, if either argument is NaN then the result is NaN.</li>\n-     * </ul>\n-     *\n-     * @param x a value\n-     * @param y a value\n-     * @return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)\n-     */\n-    public static double hypot(final double x, final double y) {\n-        if (Double.isInfinite(x) || Double.isInfinite(y)) {\n-            return Double.POSITIVE_INFINITY;\n-        } else if (Double.isNaN(x) || Double.isNaN(y)) {\n-            return Double.NaN;\n-        } else {\n-\n-            final int expX = getExponent(x);\n-            final int expY = getExponent(y);\n-            if (expX > expY + 27) {\n-                // y is neglectible with respect to x\n-                return abs(x);\n-            } else if (expY > expX + 27) {\n-                // x is neglectible with respect to y\n-                return abs(y);\n-            } else {\n-\n-                // find an intermediate scale to avoid both overflow and underflow\n-                final int middleExp = (expX + expY) / 2;\n-\n-                // scale parameters without losing precision\n-                final double scaledX = scalb(x, -middleExp);\n-                final double scaledY = scalb(y, -middleExp);\n-\n-                // compute scaled hypotenuse\n-                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);\n-\n-                // remove scaling\n-                return scalb(scaledH, middleExp);\n-\n-            }\n-\n-        }\n-    }\n-\n-    /**\n-     * Computes the remainder as prescribed by the IEEE 754 standard.\n-     * The remainder value is mathematically equal to {@code x - y*n}\n-     * where {@code n} is the mathematical integer closest to the exact mathematical value\n-     * of the quotient {@code x/y}.\n-     * If two mathematical integers are equally close to {@code x/y} then\n-     * {@code n} is the integer that is even.\n-     * <p>\n-     * <ul>\n-     * <li>If either operand is NaN, the result is NaN.</li>\n-     * <li>If the result is not NaN, the sign of the result equals the sign of the dividend.</li>\n-     * <li>If the dividend is an infinity, or the divisor is a zero, or both, the result is NaN.</li>\n-     * <li>If the dividend is finite and the divisor is an infinity, the result equals the dividend.</li>\n-     * <li>If the dividend is a zero and the divisor is finite, the result equals the dividend.</li>\n-     * </ul>\n-     * <p><b>Note:</b> this implementation currently delegates to {@link StrictMath#IEEEremainder}\n-     * @param dividend the number to be divided\n-     * @param divisor the number by which to divide\n-     * @return the remainder, rounded\n-     */\n-    public static double IEEEremainder(double dividend, double divisor) {\n-        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation\n-    }\n-\n-    /**\n-     * Returns the first argument with the sign of the second argument.\n-     * A NaN {@code sign} argument is treated as positive.\n-     *\n-     * @param magnitude the value to return\n-     * @param sign the sign for the returned value\n-     * @return the magnitude with the same sign as the {@code sign} argument\n-     */\n-    public static double copySign(double magnitude, double sign){\n-        long m = Double.doubleToLongBits(magnitude);\n-        long s = Double.doubleToLongBits(sign);\n-        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK\n-            return magnitude;\n-        }\n-        return -magnitude; // flip sign\n-    }\n-\n-    /**\n-     * Returns the first argument with the sign of the second argument.\n-     * A NaN {@code sign} argument is treated as positive.\n-     *\n-     * @param magnitude the value to return\n-     * @param sign the sign for the returned value\n-     * @return the magnitude with the same sign as the {@code sign} argument\n-     */\n-    public static float copySign(float magnitude, float sign){\n-        int m = Float.floatToIntBits(magnitude);\n-        int s = Float.floatToIntBits(sign);\n-        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK\n-            return magnitude;\n-        }\n-        return -magnitude; // flip sign\n-    }\n-\n-    /**\n-     * Return the exponent of a double number, removing the bias.\n-     * <p>\n-     * For double numbers of the form 2<sup>x</sup>, the unbiased\n-     * exponent is exactly x.\n-     * </p>\n-     * @param d number from which exponent is requested\n-     * @return exponent for d in IEEE754 representation, without bias\n-     */\n-    public static int getExponent(final double d) {\n-        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;\n-    }\n-\n-    /**\n-     * Return the exponent of a float number, removing the bias.\n-     * <p>\n-     * For float numbers of the form 2<sup>x</sup>, the unbiased\n-     * exponent is exactly x.\n-     * </p>\n-     * @param f number from which exponent is requested\n-     * @return exponent for d in IEEE754 representation, without bias\n-     */\n-    public static int getExponent(final float f) {\n-        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;\n-    }\n-\n }", "timestamp": 1315787877, "metainfo": ""}