{"sha": "767ba4dfcfb1567d6cbb692ff3e50a8fc4da04e5", "log": "Populated throws clause of RealMatrix (MATH-854); javadoc + formatting.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/RealMatrix.java\n+++ b/src/main/java/org/apache/commons/math3/linear/RealMatrix.java\n package org.apache.commons.math3.linear;\n \n import org.apache.commons.math3.exception.DimensionMismatchException;\n+import org.apache.commons.math3.exception.NotPositiveException;\n+import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.exception.OutOfRangeException;\n import org.apache.commons.math3.exception.ZeroException;\n  * @version $Id$\n  */\n public interface RealMatrix extends AnyMatrix {\n-    /**\n-     * Create a new RealMatrix of the same type as the instance with the supplied\n+\n+    /**\n+     * Create a new RealMatrix of the same type as the instance with the\n+     * supplied\n      * row and column dimensions.\n      *\n-     * @param rowDimension  the number of rows in the new matrix\n-     * @param columnDimension  the number of columns in the new matrix\n+     * @param rowDimension the number of rows in the new matrix\n+     * @param columnDimension the number of columns in the new matrix\n      * @return a new matrix of the same type as the instance\n-     * @throws org.apache.commons.math3.exception.NotStrictlyPositiveException\n-     * if row or column dimension is not positive.\n+     * @throws NotStrictlyPositiveException if row or column dimension is not\n+     * positive.\n      * @since 2.0\n      */\n-    RealMatrix createMatrix(final int rowDimension, final int columnDimension);\n+    RealMatrix createMatrix(int rowDimension, int columnDimension)\n+        throws NotStrictlyPositiveException;\n \n     /**\n      * Returns a (deep) copy of this.\n     RealMatrix copy();\n \n     /**\n-     * Compute the sum of this and m.\n-     *\n-     * @param m    matrix to be added\n-     * @return     this + m\n-     * @throws  IllegalArgumentException if m is not the same size as this\n-     */\n-    RealMatrix add(RealMatrix m);\n-\n-    /**\n-     * Compute this minus m.\n-     *\n-     * @param m    matrix to be subtracted\n-     * @return     this - m\n-     * @throws  IllegalArgumentException if m is not the same size as this\n-     */\n-    RealMatrix subtract(RealMatrix m);\n-\n-     /**\n-     * Returns the result of adding d to each entry of this.\n-     *\n-     * @param d    value to be added to each entry\n-     * @return     d + this\n+     * Returns the sum of {@code this} and {@code m}.\n+     *\n+     * @param m matrix to be added\n+     * @return {@code this + m}\n+     * @throws MatrixDimensionMismatchException if {@code m} is not the same\n+     * size as {@code this}.\n+     */\n+    RealMatrix add(RealMatrix m)\n+        throws MatrixDimensionMismatchException;\n+\n+    /**\n+     * Computes {@code this} minus {@code m}.\n+     *\n+     * @param m matrix to be subtracted\n+     * @return {@code this - m}\n+     * @throws MatrixDimensionMismatchException if {@code m} is not the same\n+     * size as {@code this}.\n+     */\n+    RealMatrix subtract(RealMatrix m)\n+        throws MatrixDimensionMismatchException;\n+\n+    /**\n+     * Returns the result of adding {@code d} to each entry of {@code this}.\n+     *\n+     * @param d value to be added to each entry\n+     * @return {@code d + this}\n      */\n     RealMatrix scalarAdd(double d);\n \n     /**\n-     * Returns the result multiplying each entry of this by d.\n-     *\n-     * @param d    value to multiply all entries by\n-     * @return     d * this\n+     * Returns the result of multiplying each entry of {@code this} by\n+     * {@code d}.\n+     *\n+     * @param d value to multiply all entries by\n+     * @return {@code d * this}\n      */\n     RealMatrix scalarMultiply(double d);\n \n     /**\n-     * Returns the result of postmultiplying this by m.\n-     *\n-     * @param m    matrix to postmultiply by\n-     * @return     this * m\n-     * @throws     IllegalArgumentException\n-     *             if columnDimension(this) != rowDimension(m)\n-     */\n-    RealMatrix multiply(RealMatrix m);\n-\n-    /**\n-     * Returns the result premultiplying this by <code>m</code>.\n-     * @param m    matrix to premultiply by\n-     * @return     m * this\n-     * @throws     IllegalArgumentException\n-     *             if rowDimension(this) != columnDimension(m)\n-     */\n-    RealMatrix preMultiply(RealMatrix m);\n-\n-    /**\n-     * Returns the result multiplying this with itself <code>p</code> times.\n-     * Depending on the underlying storage, instability for high powers might occur.\n-     * @param      p raise this to power p\n-     * @return     this^p\n-     * @throws     IllegalArgumentException if p < 0\n-     *             NonSquareMatrixException if the matrix is not square\n-     */\n-    RealMatrix power(final int p);\n+     * Returns the result of postmultiplying {@code this} by {@code m}.\n+     *\n+     * @param m matrix to postmultiply by\n+     * @return {@code this * m}\n+     * @throws DimensionMismatchException if\n+     * {@code columnDimension(this) != rowDimension(m)}\n+     */\n+    RealMatrix multiply(RealMatrix m)\n+        throws DimensionMismatchException;\n+\n+    /**\n+     * Returns the result of premultiplying {@code this} by {@code m}.\n+     *\n+     * @param m matrix to premultiply by\n+     * @return {@code m * this}\n+     * @throws DimensionMismatchException if\n+     * {@code rowDimension(this) != columnDimension(m)}\n+     */\n+    RealMatrix preMultiply(RealMatrix m)\n+        throws DimensionMismatchException;\n+\n+    /**\n+     * Returns the result of multiplying {@code this} with itself {@code p}\n+     * times. Depending on the underlying storage, instability for high powers\n+     * might occur.\n+     *\n+     * @param p raise {@code this} to power {@code p}\n+     * @return {@code this^p}\n+     * @throws NotPositiveException if {@code p < 0}\n+     * @throws NonSquareMatrixException if the matrix is not square\n+     */\n+    RealMatrix power(final int p)\n+        throws NotPositiveException, NonSquareMatrixException;\n \n     /**\n      * Returns matrix entries as a two-dimensional array.\n      *\n-     * @return    2-dimensional array of entries\n+     * @return 2-dimensional array of entries\n      */\n     double[][] getData();\n \n      * @param startColumn Initial column index\n      * @param endColumn Final column index (inclusive)\n      * @return The subMatrix containing the data of the\n-     *         specified rows and columns\n-     * @throws org.apache.commons.math3.exception.OutOfRangeException if\n-     * the indices are not valid.\n-     */\n-    RealMatrix getSubMatrix(int startRow, int endRow, int startColumn, int endColumn);\n+     * specified rows and columns.\n+     * @throws OutOfRangeException if the indices are not valid.\n+     */\n+    RealMatrix getSubMatrix(int startRow, int endRow, int startColumn,\n+        int endColumn)\n+        throws OutOfRangeException;\n+\n+    /**\n+     * Gets a submatrix. Rows and columns are indicated\n+     * counting from 0 to n-1.\n+     *\n+     * @param selectedRows Array of row indices.\n+     * @param selectedColumns Array of column indices.\n+     * @return The subMatrix containing the data in the\n+     * specified rows and columns\n+     * @throws OutOfRangeException if the indices are not valid.\n+     */\n+    RealMatrix getSubMatrix(int[] selectedRows, int[] selectedColumns)\n+        throws OutOfRangeException;\n \n    /**\n-    * Gets a submatrix. Rows and columns are indicated\n-    * counting from 0 to n-1.\n-    *\n-    * @param selectedRows Array of row indices.\n-    * @param selectedColumns Array of column indices.\n-    * @return The subMatrix containing the data in the\n-    *         specified rows and columns\n-    * @throws org.apache.commons.math3.exception.OutOfRangeException if\n-    * the indices are not valid.\n-    */\n-    RealMatrix getSubMatrix(int[] selectedRows, int[] selectedColumns);\n-\n-   /**\n-    * Copy a submatrix. Rows and columns are indicated\n-    * counting from 0 to n-1.\n+    * Copy a submatrix. Rows and columns are indicated counting from 0 to n-1.\n     *\n     * @param startRow Initial row index\n     * @param endRow Final row index (inclusive)\n     * @param endColumn Final column index (inclusive)\n     * @param destination The arrays where the submatrix data should be copied\n     * (if larger than rows/columns counts, only the upper-left part will be used)\n-    * @throws org.apache.commons.math3.exception.OutOfRangeException if the\n-    * indices are not valid.\n-    * @exception IllegalArgumentException if the destination array is too small\n+    * @throws OutOfRangeException if the indices are not valid.\n+    * @throws MatrixDimensionMismatchException if the destination array is too\n+    * small.\n     */\n-    void copySubMatrix(int startRow, int endRow, int startColumn, int endColumn,\n-                       double[][] destination);\n+    void copySubMatrix(int startRow, int endRow, int startColumn,\n+        int endColumn, double[][] destination)\n+        throws OutOfRangeException, MatrixDimensionMismatchException;\n+\n     /**\n      * Copy a submatrix. Rows and columns are indicated\n      * counting from 0 to n-1.\n      * @param selectedColumns Array of column indices.\n      * @param destination The arrays where the submatrix data should be copied\n      * (if larger than rows/columns counts, only the upper-left part will be used)\n-     * @throws org.apache.commons.math3.exception.OutOfRangeException if the\n-     * indices are not valid.\n-     * @exception IllegalArgumentException if the destination array is too small\n-     */\n-    void copySubMatrix(int[] selectedRows, int[] selectedColumns, double[][] destination);\n+     * @throws OutOfRangeException if the indices are not valid.\n+     * @throws MatrixDimensionMismatchException if the destination array is too\n+     * small.\n+     */\n+    void copySubMatrix(int[] selectedRows, int[] selectedColumns,\n+        double[][] destination)\n+        throws OutOfRangeException, MatrixDimensionMismatchException;\n \n    /**\n-    * Replace the submatrix starting at <code>row, column</code> using data in\n-    * the input <code>subMatrix</code> array. Indexes are 0-based.\n+    * Replace the submatrix starting at {@code row, column} using data in the\n+    * input {@code subMatrix} array. Indexes are 0-based.\n     * <p>\n     * Example:<br>\n     * Starting with <pre>\n     * 9  0  1  2\n     * </pre>\n     * and <code>subMatrix = {{3, 4} {5,6}}</code>, invoking\n-    * <code>setSubMatrix(subMatrix,1,1))</code> will result in <pre>\n+    * {@code setSubMatrix(subMatrix,1,1))} will result in <pre>\n     * 1  2  3  4\n     * 5  3  4  8\n     * 9  5  6  2\n         throws ZeroException, OutOfRangeException, DimensionMismatchException, NullArgumentException;\n \n    /**\n-    * Geet the entries at the given row index\n-    * as a row matrix.  Row indices start at 0.\n+    * Get the entries at the given row index as a row matrix.  Row indices start\n+    * at 0.\n     *\n     * @param row Row to be fetched.\n     * @return row Matrix.\n-    * @throws org.apache.commons.math3.exception.OutOfRangeException if\n-    * the specified row index is invalid.\n+    * @throws OutOfRangeException if the specified row index is invalid.\n     */\n-   RealMatrix getRowMatrix(int row);\n-\n-   /**\n-    * Set the entries at the given row index\n-    * as a row matrix.  Row indices start at 0.\n-    *\n-    * @param row Row to be set.\n-    * @param matrix Row matrix (must have one row and the same number of\n-    * columns as the instance).\n-    * @throws org.apache.commons.math3.exception.OutOfRangeException if the\n-    * specified row index is invalid.\n-    * @throws MatrixDimensionMismatchException\n-    * if the matrix dimensions do not match one instance row.\n-    */\n-    void setRowMatrix(int row, RealMatrix matrix);\n-\n-   /**\n-    * Get the entries at the given column index\n-    * as a column matrix.  Column indices start at 0.\n-    *\n-    * @param column Column to be fetched.\n-    * @return column Matrix.\n-    * @throws org.apache.commons.math3.exception.OutOfRangeException if\n-    * the specified column index is invalid.\n-    */\n-   RealMatrix getColumnMatrix(int column);\n-\n-   /**\n-    * Set the entries at the given column index\n-    * as a column matrix.  Column indices start at 0.\n-    *\n-    * @param column Column to be set.\n-    * @param matrix Column matrix (must have one column and the same number\n-    * of rows as the instance).\n-    * @throws org.apache.commons.math3.exception.OutOfRangeException if\n-    * the specified column index is invalid.\n-    * @throws MatrixDimensionMismatchException\n-    * if the {@code matrix} dimensions do not match one instance column.\n-    */\n-    void setColumnMatrix(int column, RealMatrix matrix);\n-\n-   /**\n-    * Returns the entries in row number <code>row</code>\n-    * as a vector.  Row indices start at 0.\n-    *\n-    * @param row Row to be fetched.\n-    * @return a row vector.\n-    * @throws org.apache.commons.math3.exception.OutOfRangeException if\n-    * the specified row index is invalid.\n-    */\n-   RealVector getRowVector(int row);\n-\n-   /**\n-    * Set the entries at the given row index.\n-    * as a vector.  Row indices start at 0.\n-    *\n-    * @param row Row to be set.\n-    * @param vector row vector (must have the same number of columns\n-    * as the instance).\n-    * @throws org.apache.commons.math3.exception.OutOfRangeException if\n-    * the specified row index is invalid.\n-    * @throws MatrixDimensionMismatchException\n-    * if the vector dimension does not match one instance row.\n-    */\n-    void setRowVector(int row, RealVector vector);\n-\n-   /**\n-    * Get the entries at the given column index\n-    * as a vector.  Column indices start at 0.\n-    *\n-    * @param column Column to be fetched.\n-    * @return a column vector.\n-    * @throws org.apache.commons.math3.exception.OutOfRangeException if\n-    * the specified column index is invalid\n-    */\n-   RealVector getColumnVector(int column);\n-\n-   /**\n-    * Set the entries at the given column index\n-    * as a vector.  Column indices start at 0.\n-    *\n-    * @param column Column to be set.\n-    * @param vector column vector (must have the same number of rows as\n-    * the instance).\n-    * @throws org.apache.commons.math3.exception.OutOfRangeException if the\n-    * specified column index is invalid.\n-    * @throws MatrixDimensionMismatchException\n-    * if the vector dimension does not match one instance column.\n-    */\n-    void setColumnVector(int column, RealVector vector);\n-\n-    /**\n-     * Get the entries at the given row index.\n-     * Row indices start at 0.\n+   RealMatrix getRowMatrix(int row) throws OutOfRangeException;\n+\n+    /**\n+     * Sets the specified {@code row} of {@code this} matrix to the entries of\n+     * the specified row {@code matrix}. Row indices start at 0.\n+     *\n+     * @param row Row to be set.\n+     * @param matrix Row matrix to be copied (must have one row and the same\n+     * number of columns as the instance).\n+     * @throws OutOfRangeException if the specified row index is invalid.\n+     * @throws MatrixDimensionMismatchException if the row dimension of the\n+     * {@code matrix} is not {@code 1}, or the column dimensions of {@code this}\n+     * and {@code matrix} do not match.\n+     */\n+    void setRowMatrix(int row, RealMatrix matrix)\n+        throws OutOfRangeException, MatrixDimensionMismatchException;\n+\n+    /**\n+     * Get the entries at the given column index as a column matrix. Column\n+     * indices start at 0.\n+     *\n+     * @param column Column to be fetched.\n+     * @return column Matrix.\n+     * @throws OutOfRangeException if the specified column index is invalid.\n+     */\n+    RealMatrix getColumnMatrix(int column)\n+        throws OutOfRangeException;\n+\n+    /**\n+     * Sets the specified {@code column} of {@code this} matrix to the entries\n+     * of the specified column {@code matrix}. Column indices start at 0.\n+     *\n+     * @param column Column to be set.\n+     * @param matrix Column matrix to be copied (must have one column and the\n+     * same number of rows as the instance).\n+     * @throws OutOfRangeException if the specified column index is invalid.\n+     * @throws MatrixDimensionMismatchException if the column dimension of the\n+     * {@code matrix} is not {@code 1}, or the row dimensions of {@code this}\n+     * and {@code matrix} do not match.\n+     */\n+    void setColumnMatrix(int column, RealMatrix matrix)\n+        throws OutOfRangeException, MatrixDimensionMismatchException;\n+\n+    /**\n+     * Returns the entries in row number {@code row} as a vector. Row indices\n+     * start at 0.\n+     *\n+     * @param row Row to be fetched.\n+     * @return a row vector.\n+     * @throws OutOfRangeException if the specified row index is invalid.\n+     */\n+    RealVector getRowVector(int row)\n+        throws OutOfRangeException;\n+\n+    /**\n+     * Sets the specified {@code row} of {@code this} matrix to the entries of\n+     * the specified {@code vector}. Row indices start at 0.\n+     *\n+     * @param row Row to be set.\n+     * @param vector row vector to be copied (must have the same number of\n+     * column as the instance).\n+     * @throws OutOfRangeException if the specified row index is invalid.\n+     * @throws MatrixDimensionMismatchException if the {@code vector} dimension\n+     * does not match the column dimension of {@code this} matrix.\n+     */\n+    void setRowVector(int row, RealVector vector)\n+        throws OutOfRangeException, MatrixDimensionMismatchException;\n+\n+    /**\n+     * Get the entries at the given column index as a vector. Column indices\n+     * start at 0.\n+     *\n+     * @param column Column to be fetched.\n+     * @return a column vector.\n+     * @throws OutOfRangeException if the specified column index is invalid\n+     */\n+    RealVector getColumnVector(int column)\n+        throws OutOfRangeException;\n+\n+    /**\n+     * Sets the specified {@code column} of {@code this} matrix to the entries\n+     * of the specified {@code vector}. Column indices start at 0.\n+     *\n+     * @param column Column to be set.\n+     * @param vector column vector to be copied (must have the same number of\n+     * rows as the instance).\n+     * @throws OutOfRangeException if the specified column index is invalid.\n+     * @throws MatrixDimensionMismatchException if the {@code vector} dimension\n+     * does not match the row dimension of {@code this} matrix.\n+     */\n+    void setColumnVector(int column, RealVector vector)\n+        throws OutOfRangeException, MatrixDimensionMismatchException;\n+\n+    /**\n+     * Get the entries at the given row index. Row indices start at 0.\n      *\n      * @param row Row to be fetched.\n      * @return the array of entries in the row.\n-     * @throws org.apache.commons.math3.exception.OutOfRangeException if the\n-     * specified row index is not valid.\n-     */\n-    double[] getRow(int row);\n-\n-    /**\n-     * Set the entries at the given row index\n-     * as a row matrix.  Row indices start at 0.\n+     * @throws OutOfRangeException if the specified row index is not valid.\n+     */\n+    double[] getRow(int row) throws OutOfRangeException;\n+\n+    /**\n+     * Sets the specified {@code row} of {@code this} matrix to the entries\n+     * of the specified {@code array}. Row indices start at 0.\n      *\n      * @param row Row to be set.\n-     * @param array Row matrix (must have the same number of columns as\n-     * the instance)\n-     * @throws org.apache.commons.math3.exception.OutOfRangeException if the\n-     * specified row index is invalid.\n-     * @throws MatrixDimensionMismatchException\n-     * if the array size does not match one instance row.\n-     */\n-    void setRow(int row, double[] array);\n-\n-    /**\n-     * Get the entries at the given column index as an array.\n-     * Column indices start at 0.\n+     * @param array Row matrix to be copied (must have the same number of\n+     * columns as the instance)\n+     * @throws OutOfRangeException if the specified row index is invalid.\n+     * @throws MatrixDimensionMismatchException if the {@code array} length does\n+     * not match the column dimension of {@code this} matrix.\n+     */\n+    void setRow(int row, double[] array)\n+        throws OutOfRangeException, MatrixDimensionMismatchException;\n+\n+    /**\n+     * Get the entries at the given column index as an array. Column indices\n+     * start at 0.\n      *\n      * @param column Column to be fetched.\n      * @return the array of entries in the column.\n-     * @throws org.apache.commons.math3.exception.OutOfRangeException if the\n-     * specified column index is not valid.\n-     */\n-    double[] getColumn(int column);\n-\n-    /**\n-     * Set the entries at the given column index\n-     * as a column matrix array.  Column indices start at 0.\n+     * @throws OutOfRangeException if the specified column index is not valid.\n+     */\n+    double[] getColumn(int column) throws OutOfRangeException;\n+\n+    /**\n+     * Sets the specified {@code column} of {@code this} matrix to the entries\n+     * of the specified {@code array}. Column indices start at 0.\n      *\n      * @param column Column to be set.\n-     * @param array Column array (must have the same number of rows as\n-     * the instance).\n-     * @throws org.apache.commons.math3.exception.OutOfRangeException if the\n-     * specified column index is invalid.\n-     * @throws MatrixDimensionMismatchException\n-     * if the array size does not match one instance column.\n-     */\n-    void setColumn(int column, double[] array);\n-\n-    /**\n-     * Get the entry in the specified row and column.\n-     * Row and column indices start at 0.\n-     *\n-     * @param row Row location of entry to be fetched.\n-     * @param column Column location of entry to be fetched.\n+     * @param array Column array to be copied (must have the same number of\n+     * rows as the instance).\n+     * @throws OutOfRangeException if the specified column index is invalid.\n+     * @throws MatrixDimensionMismatchException if the {@code array} length does\n+     * not match the row dimension of {@code this} matrix.\n+     */\n+    void setColumn(int column, double[] array)\n+        throws OutOfRangeException, MatrixDimensionMismatchException;\n+\n+    /**\n+     * Get the entry in the specified row and column. Row and column indices\n+     * start at 0.\n+     *\n+     * @param row Row index of entry to be fetched.\n+     * @param column Column index of entry to be fetched.\n      * @return the matrix entry at {@code (row, column)}.\n-     * @throws org.apache.commons.math3.exception.OutOfRangeException if the\n-     * row or column index is not valid.\n-     */\n-    double getEntry(int row, int column);\n-\n-    /**\n-     * Set the entry in the specified row and column.\n-     * Row and column indices start at 0.\n-     *\n-     * @param row Row location of entry to be set.\n-     * @param column Column location of entry to be set.\n-     * @param value matrix entry to be set.\n-     * @throws org.apache.commons.math3.exception.OutOfRangeException if\n-     * the row or column index is not valid\n+     * @throws OutOfRangeException if the row or column index is not valid.\n+     */\n+    double getEntry(int row, int column) throws OutOfRangeException;\n+\n+    /**\n+     * Set the entry in the specified row and column. Row and column indices\n+     * start at 0.\n+     *\n+     * @param row Row index of entry to be set.\n+     * @param column Column index of entry to be set.\n+     * @param value the new value of the entry.\n+     * @throws OutOfRangeException if the row or column index is not valid\n      * @since 2.0\n      */\n-    void setEntry(int row, int column, double value);\n-\n-    /**\n-     * Change an entry in the specified row and column.\n-     * Row and column indices start at 0.\n-     *\n-     * @param row Row location of entry to be set.\n-     * @param column Column location of entry to be set.\n+    void setEntry(int row, int column, double value) throws OutOfRangeException;\n+\n+    /**\n+     * Adds (in place) the specified value to the specified entry of\n+     * {@code this} matrix. Row and column indices start at 0.\n+     *\n+     * @param row Row index of the entry to be modified.\n+     * @param column Column index of the entry to be modified.\n      * @param increment value to add to the matrix entry.\n-     * @throws org.apache.commons.math3.exception.OutOfRangeException if\n-     * the row or column index is not valid.\n+     * @throws OutOfRangeException if the row or column index is not valid.\n      * @since 2.0\n      */\n-    void addToEntry(int row, int column, double increment);\n-\n-    /**\n-     * Change an entry in the specified row and column.\n-     * Row and column indices start at 0.\n-     *\n-     * @param row Row location of entry to be set.\n-     * @param column Column location of entry to be set.\n+    void addToEntry(int row, int column, double increment) throws OutOfRangeException;\n+\n+    /**\n+     * Multiplies (in place) the specified entry of {@code this} matrix by the\n+     * specified value. Row and column indices start at 0.\n+     *\n+     * @param row Row index of the entry to be modified.\n+     * @param column Column index of the entry to be modified.\n      * @param factor Multiplication factor for the matrix entry.\n-     * @throws org.apache.commons.math3.exception.OutOfRangeException if\n-     * the row or column index is not valid.\n+     * @throws OutOfRangeException if the row or column index is not valid.\n      * @since 2.0\n      */\n-    void multiplyEntry(int row, int column, double factor);\n+    void multiplyEntry(int row, int column, double factor) throws OutOfRangeException;\n \n     /**\n      * Returns the transpose of this matrix.\n      * trace</a> of the matrix (the sum of the elements on the main diagonal).\n      *\n      * @return the trace.\n-     * @throws NonSquareMatrixException\n-     * if the matrix is not square.\n-     */\n-    double getTrace();\n-\n-    /**\n-     * Returns the result of multiplying this by the vector <code>v</code>.\n+     * @throws NonSquareMatrixException if the matrix is not square.\n+     */\n+    double getTrace() throws NonSquareMatrixException;\n+\n+    /**\n+     * Returns the result of multiplying this by the vector {@code v}.\n      *\n      * @param v the vector to operate on\n-     * @return this*v\n-     * @throws IllegalArgumentException if columnDimension != v.size()\n-     */\n-    double[] operate(double[] v);\n-\n-    /**\n-     * Returns the result of multiplying this by the vector <code>v</code>.\n+     * @return {@code this * v}\n+     * @throws DimensionMismatchException if the length of {@code v} does not\n+     * match the column dimension of {@code this}.\n+     */\n+    double[] operate(double[] v) throws DimensionMismatchException;\n+\n+    /**\n+     * Returns the result of multiplying this by the vector {@code v}.\n      *\n      * @param v the vector to operate on\n-     * @return this*v\n-     * @throws IllegalArgumentException if columnDimension != v.size()\n-     */\n-    RealVector operate(RealVector v);\n-\n-    /**\n-     * Returns the (row) vector result of premultiplying this by the vector <code>v</code>.\n+     * @return {@code this * v}\n+     * @throws DimensionMismatchException if the dimension of {@code v} does not\n+     * match the column dimension of {@code this}.\n+     */\n+    RealVector operate(RealVector v) throws DimensionMismatchException;\n+\n+    /**\n+     * Returns the (row) vector result of premultiplying this by the vector {@code v}.\n      *\n      * @param v the row vector to premultiply by\n-     * @return v*this\n-     * @throws IllegalArgumentException if rowDimension != v.size()\n-     */\n-    double[] preMultiply(double[] v);\n-\n-    /**\n-     * Returns the (row) vector result of premultiplying this by the vector <code>v</code>.\n+     * @return {@code v * this}\n+     * @throws DimensionMismatchException if the length of {@code v} does not\n+     * match the row dimension of {@code this}.\n+     */\n+    double[] preMultiply(double[] v) throws DimensionMismatchException;\n+\n+    /**\n+     * Returns the (row) vector result of premultiplying this by the vector {@code v}.\n      *\n      * @param v the row vector to premultiply by\n-     * @return v*this\n-     * @throws IllegalArgumentException if rowDimension != v.size()\n-     */\n-    RealVector preMultiply(RealVector v);\n+     * @return {@code v * this}\n+     * @throws DimensionMismatchException if the dimension of {@code v} does not\n+     * match the row dimension of {@code this}.\n+     */\n+    RealVector preMultiply(RealVector v) throws DimensionMismatchException;\n \n     /**\n      * Visit (and possibly change) all matrix entries in row order.\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index\n-     * @throws org.apache.commons.math3.exception.OutOfRangeException if\n-     * the indices are not valid.\n+     * @throws OutOfRangeException if the indices are not valid.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor, int, int, int, int)\n      * @return the value returned by {@link RealMatrixChangingVisitor#end()} at the end\n      * of the walk\n      */\n-    double walkInRowOrder(RealMatrixChangingVisitor visitor,\n-                          int startRow, int endRow, int startColumn, int endColumn);\n+    double walkInRowOrder(RealMatrixChangingVisitor visitor, int startRow,\n+        int endRow, int startColumn, int endColumn)\n+        throws OutOfRangeException;\n \n     /**\n      * Visit (but don't change) some matrix entries in row order.\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index\n-     * @throws org.apache.commons.math3.exception.OutOfRangeException if\n-     * the indices are not valid.\n+     * @throws OutOfRangeException if the indices are not valid.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor)\n      * @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)\n      * @return the value returned by {@link RealMatrixPreservingVisitor#end()} at the end\n      * of the walk\n      */\n-    double walkInRowOrder(RealMatrixPreservingVisitor visitor,\n-                          int startRow, int endRow, int startColumn, int endColumn);\n+    double walkInRowOrder(RealMatrixPreservingVisitor visitor, int startRow,\n+        int endRow, int startColumn, int endColumn)\n+        throws OutOfRangeException;\n \n     /**\n      * Visit (and possibly change) all matrix entries in column order.\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index\n-     * @throws org.apache.commons.math3.exception.OutOfRangeException if\n-     * the indices are not valid.\n+     * @throws OutOfRangeException if the indices are not valid.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor)\n      * @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)\n      * @return the value returned by {@link RealMatrixChangingVisitor#end()} at the end\n      * of the walk\n      */\n-    double walkInColumnOrder(RealMatrixChangingVisitor visitor,\n-                             int startRow, int endRow, int startColumn, int endColumn);\n+    double walkInColumnOrder(RealMatrixChangingVisitor visitor, int startRow,\n+        int endRow, int startColumn, int endColumn)\n+        throws OutOfRangeException;\n \n     /**\n      * Visit (but don't change) some matrix entries in column order.\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index\n-     * @throws org.apache.commons.math3.exception.OutOfRangeException if\n-     * the indices are not valid.\n+     * @throws OutOfRangeException if the indices are not valid.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor)\n      * @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)\n      * @return the value returned by {@link RealMatrixPreservingVisitor#end()} at the end\n      * of the walk\n      */\n-    double walkInColumnOrder(RealMatrixPreservingVisitor visitor,\n-                             int startRow, int endRow, int startColumn, int endColumn);\n+    double walkInColumnOrder(RealMatrixPreservingVisitor visitor, int startRow,\n+        int endRow, int startColumn, int endColumn)\n+        throws OutOfRangeException;\n \n     /**\n      * Visit (and possibly change) all matrix entries using the fastest possible order.\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index (inclusive)\n-     * @throws org.apache.commons.math3.exception.OutOfRangeException if\n-     * the indices are not valid.\n+     * @throws OutOfRangeException if the indices are not valid.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor)\n      * @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)\n      * of the walk\n      */\n     double walkInOptimizedOrder(RealMatrixChangingVisitor visitor,\n-                                int startRow, int endRow, int startColumn, int endColumn);\n+        int startRow, int endRow, int startColumn, int endColumn)\n+        throws OutOfRangeException;\n \n     /**\n      * Visit (but don't change) some matrix entries using the fastest possible order.\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index (inclusive)\n-     * @throws org.apache.commons.math3.exception.OutOfRangeException if the\n-     * indices are not valid.\n+     * @throws OutOfRangeException if the indices are not valid.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor)\n      * @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)\n      * of the walk\n      */\n     double walkInOptimizedOrder(RealMatrixPreservingVisitor visitor,\n-                                int startRow, int endRow, int startColumn, int endColumn);\n+        int startRow, int endRow, int startColumn, int endColumn)\n+        throws OutOfRangeException;\n }", "timestamp": 1347864484, "metainfo": ""}