{"sha": "0b5d49d24bcc5a1030920f0f6b4c429c430eced9", "log": "Added  add/subtract/multiply/divide functions with integer parameters to Fraction  ", "commit": "\n--- a/src/java/org/apache/commons/math/fraction/BigFraction.java\n+++ b/src/java/org/apache/commons/math/fraction/BigFraction.java\n  */\n public class BigFraction extends Number implements Comparable<BigFraction> {\n \n+    /** A fraction representing \"2 / 1\". */\n+    public static final BigFraction TWO = new BigFraction(2);\n+\n     /** A fraction representing \"1\". */\n-    public static final BigFraction ONE = new BigFraction(1, 1);\n+    public static final BigFraction ONE = new BigFraction(1);\n \n     /** A fraction representing \"0\". */\n-    public static final BigFraction ZERO = new BigFraction(0, 1);\n+    public static final BigFraction ZERO = new BigFraction(0);\n+\n+    /** A fraction representing \"-1 / 1\". */\n+    public static final BigFraction MINUS_ONE = new BigFraction(-1);\n \n     /** A fraction representing \"4/5\". */\n     public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);\n     /** A fraction representing \"2/3\". */\n     public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);\n \n-    /** A fraction representing \"-1 / 1\". */\n-    public static final BigFraction MINUS_ONE = new BigFraction(-1, 1);\n-\n     /** Serializable version identifier. */\n-    private static final long serialVersionUID = -5984892138972589598L;\n+    private static final long serialVersionUID = -130662482360701382L;\n \n     /** <code>BigInteger</code> representation of 100. */\n     private static final BigInteger ONE_HUNDRED_DOUBLE = BigInteger.valueOf(100);\n--- a/src/java/org/apache/commons/math/fraction/Fraction.java\n+++ b/src/java/org/apache/commons/math/fraction/Fraction.java\n     /** A fraction representing \"2 / 1\". */\n     public static final Fraction TWO = new Fraction(2, 1);\n \n-    /** A fraction representing \"1 / 1\". */\n+    /** A fraction representing \"1\". */\n     public static final Fraction ONE = new Fraction(1, 1);\n \n-    /** A fraction representing \"0 / 1\". */\n+    /** A fraction representing \"0\". */\n     public static final Fraction ZERO = new Fraction(0, 1);\n+\n+    /** A fraction representing \"4/5\". */\n+    public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);\n+\n+    /** A fraction representing \"1/5\". */\n+    public static final Fraction ONE_FIFTH = new Fraction(1, 5);\n+\n+    /** A fraction representing \"1/2\". */\n+    public static final Fraction ONE_HALF = new Fraction(1, 2);\n+\n+    /** A fraction representing \"1/4\". */\n+    public static final Fraction ONE_QUARTER = new Fraction(1, 4);\n+\n+    /** A fraction representing \"1/3\". */\n+    public static final Fraction ONE_THIRD = new Fraction(1, 3);\n+\n+    /** A fraction representing \"3/5\". */\n+    public static final Fraction THREE_FIFTHS = new Fraction(3, 5);\n+\n+    /** A fraction representing \"3/4\". */\n+    public static final Fraction THREE_QUARTERS = new Fraction(3, 4);\n+\n+    /** A fraction representing \"4/5\". */\n+    public static final Fraction TWO_FIFTHS = new Fraction(4, 5);\n+\n+    /** A fraction representing \"2/4\". */\n+    public static final Fraction TWO_QUARTERS = new Fraction(2, 4);\n+\n+    /** A fraction representing \"2/3\". */\n+    public static final Fraction TWO_THIRDS = new Fraction(2, 3);\n \n     /** A fraction representing \"-1 / 1\". */\n     public static final Fraction MINUS_ONE = new Fraction(-1, 1);\n     }\n     \n     /**\n+     * Create a fraction from an int. \n+     * The fraction is num / 1.\n+     * @param num the numerator.\n+     */\n+    public Fraction(int num) {\n+        this(num, 1);\n+    }\n+    \n+    /**\n      * Create a fraction given the numerator and denominator.  The fraction is\n      * reduced to lowest terms.\n      * @param num the numerator.\n      * @throws ArithmeticException if the denominator is <code>zero</code>\n      */\n     public Fraction(int num, int den) {\n-        super();\n         if (den == 0) {\n             throw MathRuntimeException.createArithmeticException(\"zero denominator in fraction {0}/{1}\",\n                                                                  num, den);\n             den = -den;\n         }\n         // reduce numerator and denominator by greatest common denominator.\n-        int d = MathUtils.gcd(num, den);\n+        final int d = MathUtils.gcd(num, den);\n         if (d > 1) {\n             num /= d;\n             den /= d;\n         \n         // move sign to numerator.\n         if (den < 0) {\n-            num *= -1;\n-            den *= -1;\n-        }\n-        this.numerator = num;\n+            num = -num;\n+            den = -den;\n+        }\n+        this.numerator   = num;\n         this.denominator = den;\n     }\n     \n         long dOn = ((long) denominator) * object.numerator;\n         return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);\n     }\n-    \n+\n     /**\n      * Gets the fraction as a <tt>double</tt>. This calculates the fraction as\n      * the numerator divided by denominator.\n     }\n \n     /**\n+     * Add an integer to the fraction.\n+     * @param i the <tt>integer</tt> to add.\n+     * @return this + i\n+     */\n+    public Fraction add(final int i) {\n+        return new Fraction(numerator + i * denominator, denominator);\n+    }\n+\n+    /**\n      * <p>Subtracts the value of another fraction from the value of this one, \n      * returning the result in reduced form.</p>\n      *\n      */\n     public Fraction subtract(Fraction fraction) {\n         return addSub(fraction, false /* subtract */);\n+    }\n+\n+    /**\n+     * Subtract an integer from the fraction.\n+     * @param i the <tt>integer</tt> to subtract.\n+     * @return this - i\n+     */\n+    public Fraction subtract(final int i) {\n+        return new Fraction(numerator - i * denominator, denominator);\n     }\n \n     /** \n     }\n \n     /**\n+     * Multiply the fraction by an integer.\n+     * @param i the <tt>integer</tt> to multiply by.\n+     * @return this * i\n+     */\n+    public Fraction multiply(final int i) {\n+        return new Fraction(numerator * i, denominator);\n+    }\n+\n+    /**\n      * <p>Divide the value of this fraction by another.</p>\n      *\n      * @param fraction  the fraction to divide by, must not be <code>null</code>\n         }\n         return multiply(fraction.reciprocal());\n     }\n-    \n+\n+    /**\n+     * Divide the fraction by an integer.\n+     * @param i the <tt>integer</tt> to divide by.\n+     * @return this * i\n+     */\n+    public Fraction divide(final int i) {\n+        return new Fraction(numerator, denominator * i);\n+    }\n+\n     /**\n      * <p>Creates a <code>Fraction</code> instance with the 2 parts\n      * of a fraction Y/Z.</p>\n         denominator /= gcd;\n         return new Fraction(numerator, denominator);\n     }\n+\n }\n--- a/src/test/org/apache/commons/math/fraction/FractionTest.java\n+++ b/src/test/org/apache/commons/math/fraction/FractionTest.java\n         Fraction f = f1.add(f2);\n         assertEquals(Integer.MAX_VALUE, f.getNumerator());\n         assertEquals(1, f.getDenominator());\n+        f = f1.add(1);\n+        assertEquals(Integer.MAX_VALUE, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n         \n         f1 = new Fraction(-1, 13*13*2*2);\n         f2 = new Fraction(-2, 13*17*2);\n             f = f1.divide(f1.reciprocal());  // should overflow\n             fail(\"expecting ArithmeticException\");\n         } catch (ArithmeticException ex) {}\n+\n+        f1 = new Fraction(6, 35);\n+        f  = f1.divide(15);\n+        assertEquals(2, f.getNumerator());\n+        assertEquals(175, f.getDenominator());\n+\n     }\n     \n     public void testMultiply() {\n             f.multiply(null);\n             fail(\"expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {}\n+\n+        f1 = new Fraction(6, 35);\n+        f  = f1.multiply(15);\n+        assertEquals(18, f.getNumerator());\n+        assertEquals(7, f.getDenominator());\n     }\n     \n     public void testSubtract() {\n         f1 = new Fraction(Integer.MAX_VALUE, 1);\n         f2 = Fraction.ONE;\n         f = f1.subtract(f2);\n+        assertEquals(Integer.MAX_VALUE-1, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        f = f1.subtract(1);\n         assertEquals(Integer.MAX_VALUE-1, f.getNumerator());\n         assertEquals(1, f.getDenominator());\n ", "timestamp": 1238588129, "metainfo": ""}