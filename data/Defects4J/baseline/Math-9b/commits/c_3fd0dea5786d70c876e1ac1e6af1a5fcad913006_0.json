{"sha": "3fd0dea5786d70c876e1ac1e6af1a5fcad913006", "log": "MATH-795   - Factored out testSerial().   - In RealVectorTest, the vector returned by create(double[]) should really be of type RealVectorTest.TestVectorImpl, as the minimal implementation is to be tested. This causes some tests not to pass, they are skipped for the time being (overriden from RealVectorAbstractTest, without @Test annotation). When the tests in RealVectorAbstractTest are split, only the smaller tests which do not make sense in the present context will be skipped.   - In RealVectorTest, the constructor of RealVectorTest.TestVectorImpl now makes a defensive copy of the specified double[] array (see Javadoc of     + RealVectorAbstractTest.create(double[]),     + RealVectorAbstractTest.createAlien(double[]).   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n     }\n \n     @Test\n-    public void testSerial()  {\n-        ArrayRealVector v = new ArrayRealVector(new double[] { 0, 1, 2 });\n-        Assert.assertEquals(v,TestUtils.serializeAndRecover(v));\n-    }\n-\n-    @Test\n     public void testZeroVectors() {\n         Assert.assertEquals(0, new ArrayRealVector(new double[0]).getDimension());\n         Assert.assertEquals(0, new ArrayRealVector(new double[0], true).getDimension());\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n \n import junit.framework.Assert;\n \n+import org.apache.commons.math3.TestUtils;\n import org.apache.commons.math3.analysis.function.Abs;\n import org.apache.commons.math3.analysis.function.Acos;\n import org.apache.commons.math3.analysis.function.Asin;\n public abstract class RealVectorAbstractTest {\n     /**\n      * Creates a new instance of {@link RealVector}, with specified entries.\n-     * The returned vector must be of the type currently tested.\n+     * The returned vector must be of the type currently tested. It should be\n+     * noted that some tests assume that no references to the specified\n+     * {@code double[]} are kept in the returned object: if necessary, defensive\n+     * copy of this array should be made.\n      *\n      * @param data the entries of the vector to be created\n      * @return a new {@link RealVector} of the type to be tested\n     /**\n      * Creates a new instance of {@link RealVector}, with specified entries.\n      * The type of the returned vector must be different from the type currently\n-     * tested.\n+     * tested. It should be noted that some tests assume that no references to\n+     * the specified {@code double[]} are kept in the returned object: if\n+     * necessary, defensive copy of this array should be made.\n      *\n      * @param data the entries of the vector to be created\n      * @return a new {@link RealVector} of an alien type\n         Assert.assertTrue(v.equals(v.getSubVector(0, v.getDimension())));\n     }\n \n+    @Test\n+    public void testSerial()  {\n+        RealVector v = create(new double[] { 0, 1, 2 });\n+        Assert.assertEquals(v,TestUtils.serializeAndRecover(v));\n+    }\n+\n     /*\n      * TESTS OF THE VISITOR PATTERN\n      */\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.linear.RealVector.Entry;\n+import org.apache.commons.math3.util.MathArrays;\n+\n import java.util.Iterator;\n import java.util.Random;\n \n         private double[] values;\n \n         TestVectorImpl(double[] values) {\n-            this.values = values;\n+            this.values = MathArrays.copyOf(values);\n         }\n \n         @Override\n \n     @Override\n     public RealVector create(final double[] data) {\n-        return new OpenMapRealVector(data);\n+        return new TestVectorImpl(data);\n     }\n \n     @Override\n     public RealVector createAlien(double[] data) {\n         return new TestVectorImpl(data);\n     }\n+\n+    @Override\n+    public void testDataInOut() {\n+        /*\n+         *  TODO Some of the tests carried out in testDataInOut() do not pass,\n+         *  as the methods to be tested are not implemented in TestVectorImpl.\n+         *  For the time being, testDataInOut() is overriden, while ommitting\n+         *  the @Test annotation, which effectively skips the test.\n+         *\n+         *  In the future, testDataInOut() should be split in smaller units, and\n+         *  only those units which do not make sense should be skipped.\n+         */\n+    }\n+\n+    @Override\n+    public void testPredicates() {\n+        /*\n+         *  TODO Some of the tests carried out in testPredicates() do not pass,\n+         *  as the methods to be tested are not implemented in TestVectorImpl.\n+         *  For the time being, testPredicates() is overriden, while ommitting\n+         *  the @Test annotation, which effectively skips the test.\n+         *\n+         *  In the future, testPredicates() should be split in smaller units, and\n+         *  only those units which do not make sense should be skipped.\n+         */\n+    }\n+\n+    @Override\n+    public void testSerial() {\n+        /*\n+         * Abstract class RealVector is not serializable, so this test is skipped\n+         * (@Test annotation ommitted).\n+         */\n+    }\n }\n--- a/src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java\n \n     }\n \n-    @Test\n-    public void testSerial()  {\n-        OpenMapRealVector v = new OpenMapRealVector(new double[] { 0, 1, 2 });\n-        Assert.assertEquals(v,TestUtils.serializeAndRecover(v));\n-    }\n-\n     /* Check that the operations do not throw an exception (cf. MATH-645). */\n     @Test\n     public void testConcurrentModification() {", "timestamp": 1338874657, "metainfo": ""}