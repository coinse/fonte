{"sha": "67502e7c76f184c27e3f70912952e240e7132078", "log": "MATH-854 Populate \"throws\" clause.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolatingFunction.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolatingFunction.java\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.NoDataException;\n import org.apache.commons.math3.exception.OutOfRangeException;\n+import org.apache.commons.math3.exception.NonMonotonicSequenceException;\n import org.apache.commons.math3.util.MathArrays;\n \n /**\n      * every grid point.\n      * @throws DimensionMismatchException if the various arrays do not contain\n      * the expected number of elements.\n-     * @throws org.apache.commons.math3.exception.NonMonotonicSequenceException\n-     * if {@code x} or {@code y} are not strictly increasing.\n+     * @throws NonMonotonicSequenceException if {@code x} or {@code y} are\n+     * not strictly increasing.\n      * @throws NoDataException if any of the arrays has zero length.\n      */\n     public BicubicSplineInterpolatingFunction(double[] x,\n                                               double[][] dFdX,\n                                               double[][] dFdY,\n                                               double[][] d2FdXdY)\n-        throws DimensionMismatchException {\n+        throws DimensionMismatchException,\n+               NoDataException,\n+               NonMonotonicSequenceException {\n         final int xLen = x.length;\n         final int yLen = y.length;\n \n     /**\n      * {@inheritDoc}\n      */\n-    public double value(double x, double y) {\n+    public double value(double x, double y)\n+        throws OutOfRangeException {\n         final int i = searchIndex(x, xval);\n         if (i == -1) {\n             throw new OutOfRangeException(x, xval[0], xval[xval.length - 1]);\n      * @param y y-coordinate.\n      * @return the value at point (x, y) of the first partial derivative with\n      * respect to x.\n-     */\n-    public double partialDerivativeX(double x, double y) {\n+     * @throws OutOfRangeException if {@code x} (resp. {@code y}) is outside\n+     * the range defined by the boundary values of {@code xval} (resp.\n+     * {@code yval}).\n+     */\n+    public double partialDerivativeX(double x, double y)\n+        throws OutOfRangeException {\n         return partialDerivative(0, x, y);\n     }\n     /**\n      * @param y y-coordinate.\n      * @return the value at point (x, y) of the first partial derivative with\n      * respect to y.\n-     */\n-    public double partialDerivativeY(double x, double y) {\n+     * @throws OutOfRangeException if {@code x} (resp. {@code y}) is outside\n+     * the range defined by the boundary values of {@code xval} (resp.\n+     * {@code yval}).\n+     */\n+    public double partialDerivativeY(double x, double y)\n+        throws OutOfRangeException {\n         return partialDerivative(1, x, y);\n     }\n     /**\n      * @param y y-coordinate.\n      * @return the value at point (x, y) of the second partial derivative with\n      * respect to x.\n-     */\n-    public double partialDerivativeXX(double x, double y) {\n+     * @throws OutOfRangeException if {@code x} (resp. {@code y}) is outside\n+     * the range defined by the boundary values of {@code xval} (resp.\n+     * {@code yval}).\n+     */\n+    public double partialDerivativeXX(double x, double y)\n+        throws OutOfRangeException {\n         return partialDerivative(2, x, y);\n     }\n     /**\n      * @param y y-coordinate.\n      * @return the value at point (x, y) of the second partial derivative with\n      * respect to y.\n-     */\n-    public double partialDerivativeYY(double x, double y) {\n+     * @throws OutOfRangeException if {@code x} (resp. {@code y}) is outside\n+     * the range defined by the boundary values of {@code xval} (resp.\n+     * {@code yval}).\n+     */\n+    public double partialDerivativeYY(double x, double y)\n+        throws OutOfRangeException {\n         return partialDerivative(3, x, y);\n     }\n     /**\n      * @param x x-coordinate.\n      * @param y y-coordinate.\n      * @return the value at point (x, y) of the second partial cross-derivative.\n-     */\n-    public double partialDerivativeXY(double x, double y) {\n+     * @throws OutOfRangeException if {@code x} (resp. {@code y}) is outside\n+     * the range defined by the boundary values of {@code xval} (resp.\n+     * {@code yval}).\n+     */\n+    public double partialDerivativeXY(double x, double y)\n+        throws OutOfRangeException {\n         return partialDerivative(4, x, y);\n     }\n \n      * @param x x-coordinate.\n      * @param y y-coordinate.\n      * @return the value at point (x, y) of the selected partial derivative.\n-     */\n-    private double partialDerivative(int which, double x, double y) {\n+     * @throws OutOfRangeException if {@code x} (resp. {@code y}) is outside\n+     * the range defined by the boundary values of {@code xval} (resp.\n+     * {@code yval}).\n+     */\n+    private double partialDerivative(int which, double x, double y)\n+        throws OutOfRangeException {\n         if (partialDerivatives == null) {\n             computePartialDerivatives();\n         }\n      * @param val Coordinate samples.\n      * @return the index in {@code val} corresponding to the interval\n      * containing {@code c}, or {@code -1} if {@code c} is out of the\n-     * range defined by the end values of {@code val}.\n+     * range defined by the boundary values of {@code val}.\n      */\n     private int searchIndex(double c, double[] val) {\n         if (c < val[0]) {\n--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolator.java\n import org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.NoDataException;\n+import org.apache.commons.math3.exception.NumberIsTooSmallException;\n+import org.apache.commons.math3.exception.NonMonotonicSequenceException;\n import org.apache.commons.math3.util.MathArrays;\n \n /**\n      */\n     public BicubicSplineInterpolatingFunction interpolate(final double[] xval,\n                                                           final double[] yval,\n-                                                          final double[][] fval) {\n+                                                          final double[][] fval)\n+        throws NoDataException,\n+               DimensionMismatchException,\n+               NonMonotonicSequenceException {\n         if (xval.length == 0 || yval.length == 0 || fval.length == 0) {\n             throw new NoDataException();\n         }\n     }\n \n     /**\n-     * Compute the next index of an array, clipping if necessary.\n-     * It is assumed (but not checked) that {@code i} is larger than or equal to 0}.\n+     * Computes the next index of an array, clipping if necessary.\n+     * It is assumed (but not checked) that {@code i >= 0}.\n      *\n-     * @param i Index\n-     * @param max Upper limit of the array\n-     * @return the next index\n+     * @param i Index.\n+     * @param max Upper limit of the array.\n+     * @return the next index.\n      */\n     private int nextIndex(int i, int max) {\n         final int index = i + 1;\n         return index < max ? index : index - 1;\n     }\n     /**\n-     * Compute the previous index of an array, clipping if necessary.\n-     * It is assumed (but not checked) that {@code i} is smaller than the size of the array.\n+     * Computes the previous index of an array, clipping if necessary.\n+     * It is assumed (but not checked) that {@code i} is smaller than the size\n+     * of the array.\n      *\n-     * @param i Index\n-     * @return the previous index\n+     * @param i Index.\n+     * @return the previous index.\n      */\n     private int previousIndex(int i) {\n         final int index = i - 1;\n--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/BivariateGridInterpolator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/BivariateGridInterpolator.java\n package org.apache.commons.math3.analysis.interpolation;\n \n import org.apache.commons.math3.analysis.BivariateFunction;\n+import org.apache.commons.math3.exception.DimensionMismatchException;\n+import org.apache.commons.math3.exception.NoDataException;\n \n /**\n  * Interface representing a bivariate real interpolating function where the\n      * @param fval The values of the interpolation points on all the grid knots:\n      * {@code fval[i][j] = f(xval[i], yval[j])}.\n      * @return a function which interpolates the dataset.\n-     * @throws org.apache.commons.math3.exception.NoDataException if any of\n-     * the arrays has zero length.\n-     * @throws org.apache.commons.math3.exception.DimensionMismatchException\n-     * if the array lengths are inconsistent.\n+     * @throws NoDataException if any of the arrays has zero length.\n+     * @throws DimensionMismatchException if the array lengths are inconsistent.\n      */\n     BivariateFunction interpolate(double[] xval, double[] yval,\n-                                      double[][] fval);\n+                                  double[][] fval)\n+        throws NoDataException,\n+               DimensionMismatchException;\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/DividedDifferenceInterpolator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/DividedDifferenceInterpolator.java\n import java.io.Serializable;\n import org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm;\n import org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm;\n+import org.apache.commons.math3.exception.DimensionMismatchException;\n+import org.apache.commons.math3.exception.NoDataException;\n+import org.apache.commons.math3.exception.NumberIsTooSmallException;\n+import org.apache.commons.math3.exception.NonMonotonicSequenceException;\n \n /**\n  * Implements the <a href=\"\n      * @param x Interpolating points array.\n      * @param y Interpolating values array.\n      * @return a function which interpolates the dataset.\n-     * @throws org.apache.commons.math3.exception.DimensionMismatchException\n-     * if the array lengths are different.\n-     * @throws org.apache.commons.math3.exception.NumberIsTooSmallException\n-     * if the number of points is less than 2.\n-     * @throws org.apache.commons.math3.exception.NonMonotonicSequenceException\n-     * if {@code x} is not sorted in strictly increasing order.\n+     * @throws DimensionMismatchException if the array lengths are different.\n+     * @throws NumberIsTooSmallException if the number of points is less than 2.\n+     * @throws NonMonotonicSequenceException if {@code x} is not sorted in\n+     * strictly increasing order.\n      */\n-    public PolynomialFunctionNewtonForm interpolate(double x[], double y[]) {\n+    public PolynomialFunctionNewtonForm interpolate(double x[], double y[])\n+        throws DimensionMismatchException,\n+               NumberIsTooSmallException,\n+               NonMonotonicSequenceException {\n         /**\n          * a[] and c[] are defined in the general formula of Newton form:\n          * p(x) = a[0] + a[1](x-c[0]) + a[2](x-c[0])(x-c[1]) + ... +\n      * @param x Interpolating points array.\n      * @param y Interpolating values array.\n      * @return a fresh copy of the divided difference array.\n-     * @throws org.apache.commons.math3.exception.DimensionMismatchException\n-     * if the array lengths are different.\n-     * @throws org.apache.commons.math3.exception.NumberIsTooSmallException\n-     * if the number of points is less than 2.\n-     * @throws org.apache.commons.math3.exception.NonMonotonicSequenceException\n+     * @throws DimensionMismatchException if the array lengths are different.\n+     * @throws NumberIsTooSmallException if the number of points is less than 2.\n+     * @throws NonMonotonicSequenceException\n      * if {@code x} is not sorted in strictly increasing order.\n      */\n-    protected static double[] computeDividedDifference(final double x[], final double y[]) {\n+    protected static double[] computeDividedDifference(final double x[], final double y[])\n+        throws DimensionMismatchException,\n+               NumberIsTooSmallException,\n+               NonMonotonicSequenceException {\n         PolynomialFunctionLagrangeForm.verifyInterpolationArray(x, y, true);\n \n         final double[] divdiff = y.clone(); // initialization\n--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/LinearInterpolator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/LinearInterpolator.java\n  */\n package org.apache.commons.math3.analysis.interpolation;\n \n-import org.apache.commons.math3.exception.DimensionMismatchException;\n-import org.apache.commons.math3.exception.util.LocalizedFormats;\n-import org.apache.commons.math3.exception.NumberIsTooSmallException;\n import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;\n import org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;\n import org.apache.commons.math3.util.MathArrays;\n+import org.apache.commons.math3.exception.DimensionMismatchException;\n+import org.apache.commons.math3.exception.NumberIsTooSmallException;\n+import org.apache.commons.math3.exception.NonMonotonicSequenceException;\n+import org.apache.commons.math3.exception.util.LocalizedFormats;\n \n /**\n  * Implements a linear function for interpolation of real univariate functions.\n public class LinearInterpolator implements UnivariateInterpolator {\n     /**\n      * Computes a linear interpolating function for the data set.\n+     *\n      * @param x the arguments for the interpolation points\n      * @param y the values for the interpolation points\n      * @return a function which interpolates the data set\n      * @throws DimensionMismatchException if {@code x} and {@code y}\n      * have different sizes.\n-     * @throws org.apache.commons.math3.exception.NonMonotonicSequenceException\n-     * if {@code x} is not sorted in strict increasing order.\n+     * @throws NonMonotonicSequenceException if {@code x} is not sorted in\n+     * strict increasing order.\n      * @throws NumberIsTooSmallException if the size of {@code x} is smaller\n      * than 2.\n      */\n-    public PolynomialSplineFunction interpolate(double x[], double y[]) {\n+    public PolynomialSplineFunction interpolate(double x[], double y[])\n+        throws DimensionMismatchException,\n+               NumberIsTooSmallException,\n+               NonMonotonicSequenceException {\n         if (x.length != y.length) {\n             throw new DimensionMismatchException(x.length, y.length);\n         }\n             m[i] = (y[i + 1] - y[i]) / (x[i + 1] - x[i]);\n         }\n \n-        PolynomialFunction polynomials[] = new PolynomialFunction[n];\n+        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n         final double coefficients[] = new double[2];\n         for (int i = 0; i < n; i++) {\n             coefficients[0] = y[i];\n--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/LoessInterpolator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/LoessInterpolator.java\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.NoDataException;\n import org.apache.commons.math3.exception.NumberIsTooSmallException;\n+import org.apache.commons.math3.exception.NonMonotonicSequenceException;\n+import org.apache.commons.math3.exception.NotFiniteNumberException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n import org.apache.commons.math3.util.FastMath;\n import org.apache.commons.math3.util.MathUtils;\n  * @since 2.0\n  */\n public class LoessInterpolator\n-        implements UnivariateInterpolator, Serializable {\n+    implements UnivariateInterpolator, Serializable {\n     /** Default value of the bandwidth parameter. */\n     public static final double DEFAULT_BANDWIDTH = 0.3;\n     /** Default value of the number of robustness iterations. */\n      * @see #LoessInterpolator(double, int)\n      * @since 2.1\n      */\n-    public LoessInterpolator(double bandwidth, int robustnessIters, double accuracy) {\n+    public LoessInterpolator(double bandwidth, int robustnessIters, double accuracy)\n+        throws OutOfRangeException,\n+               NotPositiveException {\n         if (bandwidth < 0 ||\n             bandwidth > 1) {\n             throw new OutOfRangeException(LocalizedFormats.BANDWIDTH, bandwidth, 0, 1);\n      * @param xval the arguments for the interpolation points\n      * @param yval the values for the interpolation points\n      * @return A cubic spline built upon a loess fit to the data at the original abscissae\n-     * @throws org.apache.commons.math3.exception.NonMonotonicSequenceException\n-     * if {@code xval} not sorted in strictly increasing order.\n+     * @throws NonMonotonicSequenceException if {@code xval} not sorted in\n+     * strictly increasing order.\n      * @throws DimensionMismatchException if {@code xval} and {@code yval} have\n      * different sizes.\n      * @throws NoDataException if {@code xval} or {@code yval} has zero size.\n-     * @throws org.apache.commons.math3.exception.NotFiniteNumberException if\n-     * any of the arguments and values are not finite real numbers.\n+     * @throws NotFiniteNumberException if any of the arguments and values are\n+     * not finite real numbers.\n      * @throws NumberIsTooSmallException if the bandwidth is too small to\n      * accomodate the size of the input data (i.e. the bandwidth must be\n      * larger than 2/n).\n      */\n-    public final PolynomialSplineFunction interpolate(final double[] xval, final double[] yval) {\n+    public final PolynomialSplineFunction interpolate(final double[] xval,\n+                                                      final double[] yval)\n+        throws NonMonotonicSequenceException,\n+               DimensionMismatchException,\n+               NoDataException,\n+               NotFiniteNumberException,\n+               NumberIsTooSmallException {\n         return new SplineInterpolator().interpolate(xval, smooth(xval, yval));\n     }\n \n      * @param weights point weights: coefficients by which the robustness weight\n      * of a point is multiplied.\n      * @return the values of the loess fit at corresponding original abscissae.\n-     * @throws org.apache.commons.math3.exception.NonMonotonicSequenceException\n-     * if {@code xval} not sorted in strictly increasing order.\n+     * @throws NonMonotonicSequenceException if {@code xval} not sorted in\n+     * strictly increasing order.\n      * @throws DimensionMismatchException if {@code xval} and {@code yval} have\n      * different sizes.\n      * @throws NoDataException if {@code xval} or {@code yval} has zero size.\n-     * @throws org.apache.commons.math3.exception.NotFiniteNumberException if\n-     * any of the arguments and values are not finite real numbers.\n+     * @throws NotFiniteNumberException if any of the arguments and values are\n+     not finite real numbers.\n      * @throws NumberIsTooSmallException if the bandwidth is too small to\n      * accomodate the size of the input data (i.e. the bandwidth must be\n      * larger than 2/n).\n      * @since 2.1\n      */\n     public final double[] smooth(final double[] xval, final double[] yval,\n-                                 final double[] weights)  {\n+                                 final double[] weights)\n+        throws NonMonotonicSequenceException,\n+               DimensionMismatchException,\n+               NoDataException,\n+               NotFiniteNumberException,\n+               NumberIsTooSmallException {\n         if (xval.length != yval.length) {\n             throw new DimensionMismatchException(xval.length, yval.length);\n         }\n      * @param xval the arguments for the interpolation points\n      * @param yval the values for the interpolation points\n      * @return values of the loess fit at corresponding original abscissae\n-     * @throws org.apache.commons.math3.exception.NonMonotonicSequenceException\n-     * if {@code xval} not sorted in strictly increasing order.\n+     * @throws NonMonotonicSequenceException if {@code xval} not sorted in\n+     * strictly increasing order.\n      * @throws DimensionMismatchException if {@code xval} and {@code yval} have\n      * different sizes.\n      * @throws NoDataException if {@code xval} or {@code yval} has zero size.\n-     * @throws org.apache.commons.math3.exception.NotFiniteNumberException if\n-     * any of the arguments and values are not finite real numbers.\n+     * @throws NotFiniteNumberException if any of the arguments and values are\n+     * not finite real numbers.\n      * @throws NumberIsTooSmallException if the bandwidth is too small to\n      * accomodate the size of the input data (i.e. the bandwidth must be\n      * larger than 2/n).\n      */\n-    public final double[] smooth(final double[] xval, final double[] yval) {\n+    public final double[] smooth(final double[] xval, final double[] yval)\n+        throws NonMonotonicSequenceException,\n+               DimensionMismatchException,\n+               NoDataException,\n+               NotFiniteNumberException,\n+               NumberIsTooSmallException {\n         if (xval.length != yval.length) {\n             throw new DimensionMismatchException(xval.length, yval.length);\n         }\n--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/MicrosphereInterpolatingFunction.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/MicrosphereInterpolatingFunction.java\n     }\n \n     /**\n-     * @param xval the arguments for the interpolation points.\n+     * @param xval Arguments for the interpolation points.\n      * {@code xval[i][0]} is the first component of interpolation point\n      * {@code i}, {@code xval[i][1]} is the second component, and so on\n      * until {@code xval[i][d-1]}, the last component of that interpolation\n      * point (where {@code dimension} is thus the dimension of the sampled\n      * space).\n-     * @param yval the values for the interpolation points\n+     * @param yval Values for the interpolation points.\n      * @param brightnessExponent Brightness dimming factor.\n      * @param microsphereElements Number of surface elements of the\n      * microsphere.\n                                             double[] yval,\n                                             int brightnessExponent,\n                                             int microsphereElements,\n-                                            UnitSphereRandomVectorGenerator rand) {\n+                                            UnitSphereRandomVectorGenerator rand)\n+        throws DimensionMismatchException,\n+               NoDataException,\n+               NullArgumentException {\n         if (xval == null ||\n             yval == null) {\n             throw new NullArgumentException();\n--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/MicrosphereInterpolator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/MicrosphereInterpolator.java\n import org.apache.commons.math3.analysis.MultivariateFunction;\n import org.apache.commons.math3.exception.NotPositiveException;\n import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n+import org.apache.commons.math3.exception.NoDataException;\n+import org.apache.commons.math3.exception.DimensionMismatchException;\n+import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.random.UnitSphereRandomVectorGenerator;\n \n /**\n      * @throws NotStrictlyPositiveException if {@code elements <= 0}.\n      */\n     public MicrosphereInterpolator(final int elements,\n-                                   final int exponent) {\n+                                   final int exponent)\n+        throws NotPositiveException,\n+               NotStrictlyPositiveException {\n         if (exponent < 0) {\n             throw new NotPositiveException(exponent);\n         }\n      * {@inheritDoc}\n      */\n     public MultivariateFunction interpolate(final double[][] xval,\n-                                                final double[] yval) {\n+                                            final double[] yval)\n+        throws DimensionMismatchException,\n+               NoDataException,\n+               NullArgumentException {\n         final UnitSphereRandomVectorGenerator rand\n             = new UnitSphereRandomVectorGenerator(xval[0].length);\n         return new MicrosphereInterpolatingFunction(xval, yval,\n--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/NevilleInterpolator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/NevilleInterpolator.java\n import java.io.Serializable;\n \n import org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm;\n+import org.apache.commons.math3.exception.DimensionMismatchException;\n+import org.apache.commons.math3.exception.NumberIsTooSmallException;\n+import org.apache.commons.math3.exception.NonMonotonicSequenceException;\n \n /**\n  * Implements the <a href=\"http://mathworld.wolfram.com/NevillesAlgorithm.html\">\n     /**\n      * Computes an interpolating function for the data set.\n      *\n-     * @param x the interpolating points array\n-     * @param y the interpolating values array\n+     * @param x Interpolating points.\n+     * @param y Interpolating values.\n      * @return a function which interpolates the data set\n-     * @throws org.apache.commons.math3.exception.DimensionMismatchException if\n-     * the array lengths are different.\n-     * @throws org.apache.commons.math3.exception.NumberIsTooSmallException if\n-     * the number of points is less than 2.\n-     * @throws org.apache.commons.math3.exception.NonMonotonicSequenceException\n-     * if two abscissae have the same value.\n+     * @throws DimensionMismatchException if the array lengths are different.\n+     * @throws NumberIsTooSmallException if the number of points is less than 2.\n+     * @throws NonMonotonicSequenceException if two abscissae have the same\n+     * value.\n      */\n-    public PolynomialFunctionLagrangeForm interpolate(double x[], double y[]) {\n+    public PolynomialFunctionLagrangeForm interpolate(double x[], double y[])\n+        throws DimensionMismatchException,\n+               NumberIsTooSmallException,\n+               NonMonotonicSequenceException {\n         return new PolynomialFunctionLagrangeForm(x, y);\n     }\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java\n     @Override\n     public BicubicSplineInterpolatingFunction interpolate(final double[] xval,\n                                                           final double[] yval,\n-                                                          final double[][] fval) {\n+                                                          final double[][] fval)\n+        throws NoDataException,\n+               DimensionMismatchException {\n         if (xval.length == 0 || yval.length == 0 || fval.length == 0) {\n             throw new NoDataException();\n         }\n--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/SplineInterpolator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/SplineInterpolator.java\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n import org.apache.commons.math3.exception.NumberIsTooSmallException;\n+import org.apache.commons.math3.exception.NonMonotonicSequenceException;\n import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;\n import org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;\n import org.apache.commons.math3.util.MathArrays;\n      * @return a function which interpolates the data set\n      * @throws DimensionMismatchException if {@code x} and {@code y}\n      * have different sizes.\n-     * @throws org.apache.commons.math3.exception.NonMonotonicSequenceException\n-     * if {@code x} is not sorted in strict increasing order.\n+     * @throws NonMonotonicSequenceException if {@code x} is not sorted in\n+     * strict increasing order.\n      * @throws NumberIsTooSmallException if the size of {@code x} is smaller\n      * than 3.\n      */\n-    public PolynomialSplineFunction interpolate(double x[], double y[]) {\n+    public PolynomialSplineFunction interpolate(double x[], double y[])\n+        throws DimensionMismatchException,\n+               NumberIsTooSmallException,\n+               NonMonotonicSequenceException {\n         if (x.length != y.length) {\n             throw new DimensionMismatchException(x.length, y.length);\n         }\n \n         return new PolynomialSplineFunction(x, polynomials);\n     }\n-\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/TricubicSplineInterpolatingFunction.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/TricubicSplineInterpolatingFunction.java\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.NoDataException;\n import org.apache.commons.math3.exception.OutOfRangeException;\n+import org.apache.commons.math3.exception.NonMonotonicSequenceException;\n import org.apache.commons.math3.util.MathArrays;\n \n /**\n      * @throws NoDataException if any of the arrays has zero length.\n      * @throws DimensionMismatchException if the various arrays do not contain\n      * the expected number of elements.\n-     * @throws IllegalArgumentException if {@code x}, {@code y} or {@code z}\n+     * @throws Exception if {@code x}, {@code y} or {@code z}\n      * are not strictly increasing.\n      */\n     public TricubicSplineInterpolatingFunction(double[] x,\n                                                double[][][] d2FdXdY,\n                                                double[][][] d2FdXdZ,\n                                                double[][][] d2FdYdZ,\n-                                               double[][][] d3FdXdYdZ) {\n+                                               double[][][] d3FdXdYdZ)\n+        throws NoDataException,\n+               DimensionMismatchException,\n+               NonMonotonicSequenceException {\n         final int xLen = x.length;\n         final int yLen = y.length;\n         final int zLen = z.length;\n \n     /**\n      * {@inheritDoc}\n-     */\n-    public double value(double x, double y, double z) {\n+     *\n+     * @throws OutOfRangeException if any of the variables is outside its\n+     * interpolation range.\n+     */\n+    public double value(double x, double y, double z)\n+        throws OutOfRangeException {\n         final int i = searchIndex(x, xval);\n         if (i == -1) {\n             throw new OutOfRangeException(x, xval[0], xval[xval.length - 1]);\n      * @param y y-coordinate of the interpolation point.\n      * @param z z-coordinate of the interpolation point.\n      * @return the interpolated value.\n-     */\n-    public double value(double x, double y, double z) {\n+     * @throws OutOfRangeException if {@code x}, {@code y} or\n+     * {@code z} are not in the interval {@code [0, 1]}.\n+     */\n+    public double value(double x, double y, double z)\n+        throws OutOfRangeException {\n         if (x < 0 || x > 1) {\n             throw new OutOfRangeException(x, 0, 1);\n         }\n--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/TricubicSplineInterpolator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/TricubicSplineInterpolator.java\n \n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.NoDataException;\n+import org.apache.commons.math3.exception.NonMonotonicSequenceException;\n import org.apache.commons.math3.util.MathArrays;\n \n /**\n     public TricubicSplineInterpolatingFunction interpolate(final double[] xval,\n                                                            final double[] yval,\n                                                            final double[] zval,\n-                                                           final double[][][] fval) {\n+                                                           final double[][][] fval)\n+        throws NoDataException,\n+               DimensionMismatchException,\n+               NonMonotonicSequenceException {\n         if (xval.length == 0 || yval.length == 0 || zval.length == 0 || fval.length == 0) {\n             throw new NoDataException();\n         }\n--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/TrivariateGridInterpolator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/TrivariateGridInterpolator.java\n package org.apache.commons.math3.analysis.interpolation;\n \n import org.apache.commons.math3.analysis.TrivariateFunction;\n+import org.apache.commons.math3.exception.DimensionMismatchException;\n+import org.apache.commons.math3.exception.NoDataException;\n \n /**\n  * Interface representing a trivariate real interpolating function where the\n      * @param fval the values of the interpolation points on all the grid knots:\n      * {@code fval[i][j][k] = f(xval[i], yval[j], zval[k])}.\n      * @return a function that interpolates the data set.\n-     * @throws org.apache.commons.math3.exception.NoDataException if any of\n-     * the arrays has zero length.\n-     * @throws org.apache.commons.math3.exception.DimensionMismatchException\n-     * if the array lengths are inconsistent.\n+     * @throws NoDataException if any of the arrays has zero length.\n+     * @throws DimensionMismatchException if the array lengths are inconsistent.\n      */\n     TrivariateFunction interpolate(double[] xval, double[] yval, double[] zval,\n-                                       double[][][] fval);\n+                                   double[][][] fval)\n+        throws NoDataException,\n+               DimensionMismatchException;\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/UnivariatePeriodicInterpolator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/UnivariatePeriodicInterpolator.java\n      * on each side of the interpolated point.\n      */\n     public UnivariatePeriodicInterpolator(UnivariateInterpolator interpolator,\n-                                              double period,\n-                                              int extend) {\n+                                          double period,\n+                                          int extend) {\n         this.interpolator = interpolator;\n         this.period = period;\n         this.extend = extend;\n      * @param period Period.\n      */\n     public UnivariatePeriodicInterpolator(UnivariateInterpolator interpolator,\n-                                              double period) {\n+                                          double period) {\n         this(interpolator, period, DEFAULT_EXTEND);\n     }\n \n      * iss larger then the size of {@code xval}.\n      */\n     public UnivariateFunction interpolate(double[] xval,\n-                                              double[] yval) {\n+                                          double[] yval)\n+        throws NumberIsTooSmallException {\n         if (xval.length < extend) {\n             throw new NumberIsTooSmallException(xval.length, extend, true);\n         }", "timestamp": 1346543692, "metainfo": ""}