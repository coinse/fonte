{"sha": "520f36b43a13681db338a07ac6c251cbe1a7a6e5", "log": "[MATH-779] Fixed iterator() method in ListPopulation to return an iterator of the unmodifiable list, thanks to Reid Hochstedler.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java\n+++ b/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java\n     }\n \n     /**\n-     * Chromosome list iterator\n+     * Returns an iterator over the unmodifiable list of chromosomes.\n+     * <p>Any call to {@link Iterator#remove()} will result in a {@link UnsupportedOperationException}.</p>\n      *\n      * @return chromosome iterator\n      */\n     public Iterator<Chromosome> iterator() {\n-        return chromosomes.iterator();\n+        return getChromosomes().iterator();\n     }\n }\n--- a/src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java\n+++ b/src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java\n \n \n import java.util.ArrayList;\n+import java.util.Iterator;\n \n import org.apache.commons.math3.exception.NotPositiveException;\n import org.apache.commons.math3.exception.NumberIsTooLargeException;\n         }\n     }\n     \n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testIterator() {\n+        final ArrayList<Chromosome> chromosomes = new ArrayList<Chromosome>();\n+        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n+        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n+        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n+\n+        final ListPopulation population = new ListPopulation(10) {\n+            public Population nextGeneration() {\n+                // not important\n+                return null;\n+            }\n+        };\n+\n+        population.addChromosomes(chromosomes);\n+\n+        final Iterator<Chromosome> iter = population.iterator();\n+        while (iter.hasNext()) {\n+            iter.next();\n+            iter.remove();\n+        }\n+    }\n+    \n     @Test(expected=NumberIsTooSmallException.class)\n     public void testSetPopulationLimitTooSmall() {\n         final ArrayList<Chromosome> chromosomes = new ArrayList<Chromosome> ();", "timestamp": 1334255573, "metainfo": ""}