{"sha": "5a5322744427201e81ccb964da6166ff06bdb2d0", "log": "added new constructors to MathUserException to provide more control to user  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/exception/MathUserException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathUserException.java\n import java.util.Locale;\n \n import org.apache.commons.math.exception.util.ArgUtils;\n-import org.apache.commons.math.exception.util.MessageFactory;\n import org.apache.commons.math.exception.util.Localizable;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n+import org.apache.commons.math.exception.util.MessageFactory;\n \n /**\n  * This class is intended as a sort of communication channel between\n     /** Serializable version Id. */\n     private static final long serialVersionUID = -6024911025449780478L;\n     /**\n-     * Pattern used to build the message (problem description).\n+     * Pattern used to build the specific part of the message (problem description).\n      */\n-    private final Localizable pattern;\n+    private final Localizable specific;\n+    /**\n+     * Pattern used to build the general part of the message (problem description).\n+     */\n+    private final Localizable general;\n     /**\n      * Arguments used to build the message.\n      */\n     private final Object[] arguments;\n \n     /**\n-     * Default constructor.\n+     * Build an exception with a default message.\n      */\n     public MathUserException() {\n-        this(null);\n+        this((Throwable) null);\n     }\n \n     /**\n-     * @param cause Cause of the error.\n-     * @param args Arguments.\n+     * Build an exception with a default message.\n+     * @param cause Cause of the error (may be null).\n      */\n-    public MathUserException(Throwable cause,\n-                             Object ... args) {\n-        this(null, cause, args);\n+    public MathUserException(final Throwable cause) {\n+        this(cause, LocalizedFormats.USER_EXCEPTION);\n     }\n \n     /**\n-     * @param pattern Message pattern explaining the cause of the error.\n-     * @param cause Cause of the error.\n-     * @param args Arguments.\n+     * Build an exception with a localizable message.\n+     * @param pattern Format specifier.\n+     * @param arguments Format arguments.\n      */\n-    public MathUserException(Localizable pattern,\n-                             Throwable cause,\n-                             Object ... args) {\n-        this.pattern  = pattern;\n-        arguments = ArgUtils.flatten(args);\n+    public MathUserException(final Localizable pattern, final Object ... arguments) {\n+        this((Throwable) null, pattern, arguments);\n+    }\n+\n+    /**\n+     * Build an exception with a localizable message.\n+     * @param cause Cause of the error (may be null).\n+     * @param pattern Format specifier.\n+     * @param arguments Format arguments.\n+     */\n+    public MathUserException(final Throwable cause,\n+                             final Localizable pattern, final Object ... arguments) {\n+        this(cause, (Localizable) null, pattern, arguments);\n+    }\n+\n+    /**\n+     * Builds an exception from two patterns (specific and general) and\n+     * an argument list.\n+     *\n+     * @param specific Format specifier for the specific part (may be null).\n+     * @param general Format specifier for the general part (may be null).\n+     * @param arguments Format arguments. They will be substituted in\n+     * <em>both</em> the {@code general} and {@code specific} format specifiers.\n+     */\n+    public MathUserException(final Localizable specific, final Localizable general,\n+                             final Object ... arguments) {\n+        this((Throwable) null, specific, general, arguments);\n+    }\n+\n+    /**\n+     * Builds an exception from two patterns (specific and general) and\n+     * an argument list.\n+     *\n+     * @param cause Cause of the error (may be null).\n+     * @param specific Format specifier for the specific part (may be null).\n+     * @param general Format specifier for the general part (may be null).\n+     * @param arguments Format arguments. They will be substituted in\n+     * <em>both</em> the {@code general} and {@code specific} format specifiers.\n+     */\n+    public MathUserException(final Throwable cause,\n+                             final Localizable specific, final Localizable general,\n+                             final Object ... arguments) {\n+        super(cause);\n+        this.specific  = specific;\n+        this.general   = general;\n+        this.arguments = ArgUtils.flatten(arguments);\n     }\n \n     /**\n      * @return the localized message.\n      */\n     public String getMessage(final Locale locale) {\n-        return MessageFactory.buildMessage(locale,\n-                                           pattern,\n-                                           LocalizedFormats.USER_EXCEPTION,\n-                                           arguments);\n+        return MessageFactory.buildMessage(locale, specific, general, arguments);\n     }\n \n    /** {@inheritDoc} */", "timestamp": 1289849993, "metainfo": ""}