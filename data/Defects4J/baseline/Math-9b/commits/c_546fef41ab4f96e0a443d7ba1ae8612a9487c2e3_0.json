{"sha": "546fef41ab4f96e0a443d7ba1ae8612a9487c2e3", "log": "improved test coverage  ", "commit": "\n--- a/src/test/org/apache/commons/math/optimization/NelderMeadTest.java\n+++ b/src/test/org/apache/commons/math/optimization/NelderMeadTest.java\n         nm.minimizes(rosenbrock, 100, new ValueChecker(1.0e-3),\n                      new double[][] {\n                        { -1.2, 1.0 }, { 0.9, 1.2 }, { 3.5, -2.3 }\n-                     }, 3, 1642738l);\n-\n-    assertTrue(count < 200);\n+                     }, 10, 1642738l);\n+\n+    assertTrue(count > 700);\n+    assertTrue(count < 800);\n     assertEquals(0.0, optimum.cost, 5.0e-5);\n     assertEquals(1.0, optimum.point[0], 0.01);\n     assertEquals(1.0, optimum.point[1], 0.01);\n \n     PointCostPair[] minima = nm.getMinima();\n-    assertEquals(3, minima.length);\n-    for (int i = 1; i < minima.length; ++i) {\n-        if (minima[i] != null) {\n-            assertTrue(minima[i-1].cost <= minima[i].cost);\n+    assertEquals(10, minima.length);\n+    assertNotNull(minima[0]);\n+    assertNull(minima[minima.length - 1]);\n+    for (int i = 0; i < minima.length; ++i) {\n+        if (minima[i] == null) {\n+            if ((i + 1) < minima.length) {\n+                assertTrue(minima[i+1] == null);\n+            }\n+        } else {\n+            if (i > 0) {\n+                assertTrue(minima[i-1].cost <= minima[i].cost);\n+            }\n         }\n     }\n ", "timestamp": 1189412601, "metainfo": ""}