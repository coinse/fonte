{"sha": "1d5be0610d78ba72b831fdd36ba8a76d41b872ee", "log": "Replaced obsolete exceptions.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java\n+++ b/src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java\n import java.io.Serializable;\n import java.util.Arrays;\n \n-import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.exception.MathIllegalStateException;\n import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n \n     /**\n      * Substitutes <code>value</code> for the most recently added value.\n      * Returns the value that has been replaced. If the array is empty (i.e.\n-     * if {@link #numElements} is zero), a MathRuntimeException is thrown.\n+     * if {@link #numElements} is zero), an IllegalStateException is thrown.\n      *\n      * @param value new value to substitute for the most recently added value\n      * @return value that has been replaced in the array\n+     * @throws IllegalStateException if the array is empty\n      * @since 2.0\n      */\n     public synchronized double substituteMostRecentElement(double value) {\n         if (numElements < 1) {\n-            throw MathRuntimeException.createArrayIndexOutOfBoundsException(\n+            throw new MathIllegalStateException(\n                     LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY);\n         }\n \n     protected void checkContractExpand(float contraction, float expansion) {\n \n         if (contraction < expansion) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n+            throw new MathIllegalArgumentException(\n                     LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR,\n                     contraction, expansion);\n         }\n \n         if (contraction <= 1.0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n+            throw new MathIllegalArgumentException(\n                     LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_ONE,\n                     contraction);\n         }\n \n         if (expansion <= 1.0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n+            throw new MathIllegalArgumentException(\n                     LocalizedFormats.EXPANSION_FACTOR_SMALLER_THAN_ONE,\n                     expansion);\n         }\n      */\n     private synchronized void discardExtremeElements(int i,boolean front) {\n         if (i > numElements) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n+            throw new MathIllegalArgumentException(\n                     LocalizedFormats.TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY,\n                     i, numElements);\n        } else if (i < 0) {\n-           throw MathRuntimeException.createIllegalArgumentException(\n+           throw new MathIllegalArgumentException(\n                    LocalizedFormats.CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS,\n                    i);\n         } else {\n      */\n     public synchronized double getElement(int index) {\n         if (index >= numElements) {\n-            throw MathRuntimeException.createArrayIndexOutOfBoundsException(\n-                    LocalizedFormats.INDEX_LARGER_THAN_MAX,\n-                    index, numElements - 1);\n+            throw new ArrayIndexOutOfBoundsException(index);\n         } else if (index >= 0) {\n             return internalArray[startIndex + index];\n         } else {\n-            throw MathRuntimeException.createArrayIndexOutOfBoundsException(\n-                    LocalizedFormats.CANNOT_RETRIEVE_AT_NEGATIVE_INDEX,\n-                    index);\n+            throw new ArrayIndexOutOfBoundsException(index);\n         }\n     }\n \n      */\n     public synchronized void setElement(int index, double value) {\n         if (index < 0) {\n-            throw MathRuntimeException.createArrayIndexOutOfBoundsException(\n-                    LocalizedFormats.CANNOT_SET_AT_NEGATIVE_INDEX,\n-                    index);\n+            throw new ArrayIndexOutOfBoundsException(index);\n         }\n         if (index + 1 > numElements) {\n             numElements = index + 1;\n     public void setExpansionMode(int expansionMode) {\n         if (expansionMode != MULTIPLICATIVE_MODE &&\n                 expansionMode != ADDITIVE_MODE) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n+            throw new MathIllegalArgumentException(\n                     LocalizedFormats.UNSUPPORTED_EXPANSION_MODE,\n                     expansionMode, MULTIPLICATIVE_MODE, \"MULTIPLICATIVE_MODE\",\n                     ADDITIVE_MODE, \"ADDITIVE_MODE\");\n                 this.initialCapacity = initialCapacity;\n             }\n         } else {\n-            throw MathRuntimeException.createIllegalArgumentException(\n+            throw new MathIllegalArgumentException(\n                     LocalizedFormats.INITIAL_CAPACITY_NOT_POSITIVE,\n                     initialCapacity);\n         }\n \n         // If index is negative thrown an error\n         if (i < 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n+            throw new MathIllegalArgumentException(\n                     LocalizedFormats.INDEX_NOT_POSITIVE,\n                     i);\n         }", "timestamp": 1317579003, "metainfo": ""}