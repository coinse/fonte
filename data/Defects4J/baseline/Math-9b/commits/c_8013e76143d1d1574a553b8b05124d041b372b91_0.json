{"sha": "8013e76143d1d1574a553b8b05124d041b372b91", "log": "MATH-807: in o.a.c.m3.util.IterationManager, created a new constructor which allows for the specification of a o.a.c.m3.util.Incrementor.MaxCountExceededCallback, to be called when the maximum number of iterations is reached. Updated the javadoc of iterative linear solvers accordingly.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/IterativeLinearSolver.java\n+++ b/src/main/java/org/apache/commons/math3/linear/IterativeLinearSolver.java\n      * @throws MaxCountExceededException at exhaustion of the iteration count,\n      * unless a custom\n      * {@link org.apache.commons.math3.util.Incrementor.MaxCountExceededCallback callback}\n-     * has been set at construction\n+     * has been set at construction of the {@link IterationManager}\n      */\n     public RealVector solve(final RealLinearOperator a, final RealVector b)\n         throws NullArgumentException, NonSquareOperatorException,\n      * @throws MaxCountExceededException at exhaustion of the iteration count,\n      * unless a custom\n      * {@link org.apache.commons.math3.util.Incrementor.MaxCountExceededCallback callback}\n-     * has been set at construction\n+     * has been set at construction of the {@link IterationManager}\n      */\n     public RealVector solve(RealLinearOperator a, RealVector b, RealVector x0)\n         throws NullArgumentException, NonSquareOperatorException,\n      * @throws MaxCountExceededException at exhaustion of the iteration count,\n      * unless a custom\n      * {@link org.apache.commons.math3.util.Incrementor.MaxCountExceededCallback callback}\n-     * has been set at construction\n+     * has been set at construction of the {@link IterationManager}\n      */\n     public abstract RealVector solveInPlace(RealLinearOperator a, RealVector b,\n         RealVector x0) throws NullArgumentException, NonSquareOperatorException,\n--- a/src/main/java/org/apache/commons/math3/linear/PreconditionedIterativeLinearSolver.java\n+++ b/src/main/java/org/apache/commons/math3/linear/PreconditionedIterativeLinearSolver.java\n      * @throws MaxCountExceededException at exhaustion of the iteration count,\n      * unless a custom\n      * {@link org.apache.commons.math3.util.Incrementor.MaxCountExceededCallback callback}\n-     * has been set at construction\n+     * has been set at construction of the {@link IterationManager}\n      */\n     public RealVector solve(final RealLinearOperator a,\n         final RealLinearOperator m, final RealVector b, final RealVector x0)\n      * @throws MaxCountExceededException at exhaustion of the iteration count,\n      * unless a custom\n      * {@link org.apache.commons.math3.util.Incrementor.MaxCountExceededCallback callback}\n-     * has been set at construction\n+     * has been set at construction of the {@link IterationManager}\n      */\n     public RealVector solve(RealLinearOperator a, RealLinearOperator m,\n         RealVector b) throws NullArgumentException, NonSquareOperatorException,\n      * @throws MaxCountExceededException at exhaustion of the iteration count,\n      * unless a custom\n      * {@link org.apache.commons.math3.util.Incrementor.MaxCountExceededCallback callback}\n-     * has been set at construction.\n+     * has been set at construction of the {@link IterationManager}\n      */\n     public abstract RealVector solveInPlace(RealLinearOperator a,\n         RealLinearOperator m, RealVector b, RealVector x0) throws\n--- a/src/main/java/org/apache/commons/math3/linear/SymmLQ.java\n+++ b/src/main/java/org/apache/commons/math3/linear/SymmLQ.java\n      * @throws MaxCountExceededException at exhaustion of the iteration count,\n      * unless a custom\n      * {@link org.apache.commons.math3.util.Incrementor.MaxCountExceededCallback callback}\n-     * has been set at construction\n+     * has been set at construction of the {@link IterationManager}\n      * @throws NonSelfAdjointOperatorException if {@link #getCheck()} is\n      * {@code true}, and {@code a} or {@code m} is not self-adjoint\n      * @throws NonPositiveDefiniteOperatorException if {@code m} is not\n      * @throws MaxCountExceededException at exhaustion of the iteration count,\n      * unless a custom\n      * {@link org.apache.commons.math3.util.Incrementor.MaxCountExceededCallback callback}\n-     * has been set at construction\n+     * has been set at construction of the {@link IterationManager}\n      * @throws NonSelfAdjointOperatorException if {@link #getCheck()} is\n      * {@code true}, and {@code a} is not self-adjoint\n      * @throws IllConditionedOperatorException if {@code a} is ill-conditioned\n      * @throws MaxCountExceededException at exhaustion of the iteration count,\n      * unless a custom\n      * {@link org.apache.commons.math3.util.Incrementor.MaxCountExceededCallback callback}\n-     * has been set at construction\n+     * has been set at construction of the {@link IterationManager}\n      * @throws NonSelfAdjointOperatorException if {@link #getCheck()} is\n      * {@code true}, and {@code a} or {@code m} is not self-adjoint\n      * @throws NonPositiveDefiniteOperatorException if {@code m} is not positive\n--- a/src/main/java/org/apache/commons/math3/util/IterationManager.java\n+++ b/src/main/java/org/apache/commons/math3/util/IterationManager.java\n     /**\n      * Creates a new instance of this class.\n      *\n-     * @param maxIterations Maximum number of iterations.\n+     * @param maxIterations the maximum number of iterations\n      */\n     public IterationManager(final int maxIterations) {\n-        this.iterations = new Incrementor();\n-        this.iterations.setMaximalCount(maxIterations);\n+        this(maxIterations, null);\n+    }\n+\n+    /**\n+     * Creates a new instance of this class.\n+     *\n+     * @param maxIterations the maximum number of iterations\n+     * @param callBack the function to be called when the maximum number of\n+     * iterations has been reached (can be {@code null})\n+     */\n+    public IterationManager(final int maxIterations,\n+                            final Incrementor.MaxCountExceededCallback callBack) {\n+        this.iterations = new Incrementor(maxIterations, callBack);\n         this.listeners = new CopyOnWriteArrayList<IterationListener>();\n     }\n ", "timestamp": 1340464354, "metainfo": ""}