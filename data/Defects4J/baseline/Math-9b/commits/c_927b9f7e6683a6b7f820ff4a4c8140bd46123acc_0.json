{"sha": "927b9f7e6683a6b7f820ff4a4c8140bd46123acc", "log": "Javadoc, formatting.   ", "commit": "\n--- a/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n import java.io.BufferedReader;\n import java.io.FileReader;\n import java.io.File;\n-import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.InputStreamReader;\n import java.net.URL;\n  *    entry per line.</li>\n  * </ul></p>\n  *\n- * @version $Revision: 1.24 $ $Date: 2004/06/14 23:54:17 $\n+ * @version $Revision: 1.25 $ $Date: 2004/06/15 18:33:16 $\n  */\n public class EmpiricalDistributionImpl implements Serializable, EmpiricalDistribution {\n \n     private RandomData randomData = new RandomDataImpl();\n \n     /**\n-     * Creates a new EmpiricalDistribution  with the default bin count\n+     * Creates a new EmpiricalDistribution with the default bin count.\n      */\n     public EmpiricalDistributionImpl() {\n         binStats = new ArrayList();\n     }\n \n     /**\n-     * Creates a new EmpiricalDistribution  with the specified bin count\n+     * Creates a new EmpiricalDistribution  with the specified bin count.\n+     * \n      * @param binCount number of bins\n      */\n     public EmpiricalDistributionImpl(int binCount) {\n         binStats = new ArrayList();\n     }\n \n-    /**\n-     * @see org.apache.commons.math.random.EmpiricalDistribution#load(double[])\n+     /**\n+     * Computes the empirical distribution from the provided\n+     * array of numbers.\n+     * \n+     * @param in the input data array\n      */\n     public void load(double[] in) {\n         DataAdapter da = new ArrayDataAdapter(in);\n \n     }\n \n+    /**\n+     * Computes the empirical distribution using data read from a URL.\n+     * @param url  url of the input file\n+     * \n+     * @throws IOException if an IO error occurs\n+     */\n     public void load(URL url) throws IOException {\n         BufferedReader in =\n             new BufferedReader(new InputStreamReader(url.openStream()));\n         }\n     }\n \n+    /**\n+     * Computes the empirical distribution from the input file.\n+     * \n+     * @param file the input file\n+     * @throws IOException if an IO error occurs\n+     */\n     public void load(File file) throws IOException {\n         BufferedReader in = new BufferedReader(new FileReader(file));\n         try {\n      * <code>beanStats</code> abstracting the source of data.\n      */\n     private abstract class DataAdapter{\n+        /** \n+         * Compute bin stats.\n+         * \n+         * @param min minimum value\n+         * @param delta  grid size\n+         * @throws Exception  if an error occurs computing bin stats\n+         */\n         public abstract void computeBinStats(double min, double delta)\n                 throws Exception;\n+        /**\n+         * Compute sample statistics.\n+         * \n+         * @throws Exception if an error occurs computing sample stats\n+         */\n         public abstract void computeStats() throws Exception;\n     }\n     /**\n      * is returned.\n      */\n     private class DataAdapterFactory{\n+        /**\n+         * Creates a DataAdapter from a data object\n+         * \n+         * @param in object providing access to the data\n+         * @return DataAdapter instance\n+         */\n         public DataAdapter getAdapter(Object in) {\n             if (in instanceof BufferedReader) {\n                 BufferedReader inputStream = (BufferedReader) in;\n      * <code>DataAdapter</code> for data provided through some input stream\n      */\n     private class StreamDataAdapter extends DataAdapter{\n+        \n+        /** Input stream providng access to the data */\n         BufferedReader inputStream;\n+        \n+        /**\n+         * Create a StreamDataAdapter from a BufferedReader\n+         * \n+         * @param in BufferedReader input stream\n+         */\n         public StreamDataAdapter(BufferedReader in){\n             super();\n             inputStream = in;\n         }\n         /**\n          * Computes binStats\n+         * \n+         * @param min  minimum value\n+         * @param delta  grid size\n+         * @throws IOException if an IO error occurs\n          */\n         public void computeBinStats(double min, double delta)\n                 throws IOException {\n         }\n         /**\n          * Computes sampleStats\n+         * \n+         * @throws IOException if an IOError occurs\n          */\n         public void computeStats() throws IOException {\n             String str = null;\n      * <code>DataAdapter</code> for data provided as array of doubles.\n      */\n     private class ArrayDataAdapter extends DataAdapter{\n+        \n+        /** Array of input  data values */\n         private double[] inputArray;\n+        \n+        /**\n+         * Construct an ArrayDataAdapter from a double[] array\n+         * \n+         * @param in double[] array holding the data\n+         */\n         public ArrayDataAdapter(double[] in){\n             super();\n             inputArray = in;\n         }\n         /**\n          * Computes sampleStats\n+         * \n+         * @throws IOException if an IO error occurs\n          */\n         public void computeStats() throws IOException {\n             sampleStats = SummaryStatistics.newInstance();\n         }\n         /**\n          * Computes binStats\n+         * \n+         * @param min  minimum value\n+         * @param delta  grid size\n+         * @throws IOException  if an IO error occurs\n          */\n         public void computeBinStats(double min, double delta)\n             throws IOException {\n             for (int i = 0; i < inputArray.length; i++) {\n                 SummaryStatistics stats =\n                     (SummaryStatistics) binStats.get(\n-                        Math.max((int) Math.ceil((inputArray[i] - min) / delta)\n-                            - 1, 0));\n+                        Math.max((int) Math.ceil(\n+                                (inputArray[i] - min) / delta)- 1, 0));\n                 stats.addValue(inputArray[i]);\n             }\n         }\n \n     /**\n      * Fills binStats array (second pass through data file).\n+     * \n+     * @param in object providing access to the data\n+     * @throws IOException  if an IO error occurs\n      */\n     private void fillBinStats(Object in) throws IOException {\n         // Load array of bin upper bounds -- evenly spaced from min - max\n     }\n \n     /**\n-     * Generates a random value from this distribution\n+     * Generates a random value from this distribution.\n+     * \n      * @return the random value.\n      * @throws IllegalStateException if the distribution has not been loaded\n      */\n         throw new RuntimeException(\"No bin selected\");\n     }\n \n+    /**\n+     * Returns a DescriptiveStatistics describing this distribution.\n+     * <strong>Preconditions:</strong><ul>\n+     * <li>the distribution must be loaded before invoking this method</li></ul>\n+     * \n+     * @return the sample statistics\n+     * @throws IllegalStateException if the distribution has not been loaded\n+     */\n     public SummaryStatistics getSampleStats() {\n         return sampleStats;\n     }\n \n+    /**\n+     * Returns the number of bins.\n+     * \n+     * @return the number of bins.\n+     */\n     public int getBinCount() {\n         return binCount;\n     }\n \n+    /**\n+     * Returns a list of Univariates containing statistics describing the\n+     * values in each of the bins.  The ArrayList is indexed on the bin number.\n+     * \n+     * @return ArrayList of bin statistics.\n+     */\n     public ArrayList getBinStats() {\n         return binStats;\n     }\n \n+    /**\n+     * Returns the array of upper bounds for the bins.  Bins are: <br/>\n+     * [min,upperBounds[0]],(upperBounds[0],upperBounds[1]],...,\n+     *  (upperBounds[binCount-1],max]\n+     * \n+     * @return array of bin upper bounds\n+     */\n     public double[] getUpperBounds() {\n         return upperBounds;\n     }\n \n+    /**\n+     * Property indicating whether or not the distribution has been loaded.\n+     * \n+     * @return true if the distribution has been loaded\n+     */\n     public boolean isLoaded() {\n         return loaded;\n     }", "timestamp": 1087324396, "metainfo": ""}