{"sha": "ce852f91460b7789afe7b44198fe0f64f1ccced2", "log": "Improved javadoc. Eliminated unecessary / unused data members. Made increment() and clear() throw IllegalStatException when the statistic is based on an external moment. Ensured that Double.NaN is returned for n < 4.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java\n  *  kurtosis = { [n(n+1) / (n -1)(n - 2)(n-3)] sum[(x_i - mean)^4] / std^4 } - [3(n-1)^2 / (n-2)(n-3)]\n  *  <p>\n  *  where n is the number of values, mean is the {@link Mean} and std is the {@link StandardDeviation}\n+ * <p>\n+ *  Note that this statistic is undefined for n < 4.  <code>Double.Nan</code> is returned when\n+ *  there is not sufficient data to compute the statistic.\n  * \n- * @version $Revision: 1.19 $ $Date: 2004/04/27 16:42:30 $\n+ * @version $Revision: 1.20 $ $Date: 2004/06/18 01:42:47 $\n  */\n public class Kurtosis extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     /** Serializable version identifier */\n     static final long serialVersionUID = 2784465764798260919L;  \n       \n-    /** */\n+    /**Fourth Moment on which this statistic is based */\n     protected FourthMoment moment = null;\n \n-    /** */\n+    /** \n+     * Determines whether or not this statistic can be incremented or cleared.\n+     * <p>\n+     * Statistics based on (contructed from) external moments cannot\n+     * be incremented or cleared.\n+    */\n     protected boolean incMoment = true;\n \n-    /** */\n-    private double kurtosis = Double.NaN;\n-\n-    /** */\n-    private long n = 0;\n \n     /**\n      * Construct a Kurtosis\n     }\n \n     /**\n-     * Construct a Kurtosis with an external moment\n+     * Construct a Kurtosis from an external moment\n+     * \n      * @param m4 external Moment\n      */\n     public Kurtosis(final FourthMoment m4) {\n     public void increment(final double d) {\n         if (incMoment) {\n             moment.increment(d);\n+        }  else  {\n+            throw new IllegalStateException\n+            (\"Statistics constructed from external moments cannot be incremented\");\n         }\n     }\n \n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()\n      */\n     public double getResult() {\n-        if (n < moment.n) {\n-            if (moment.n <= 0) {\n-                kurtosis = Double.NaN;\n-            }\n-\n-            double variance =\n-                (moment.n < 1) ? 0.0 : moment.m2 / (double) (moment.n - 1);\n-\n-            if (moment.n <= 3 || variance < 10E-20) {\n-                kurtosis = 0.0;\n-            } else {\n-                kurtosis =\n-                    (moment.n0 * (moment.n0 + 1) * moment.m4 -\n-                    3 * moment.m2 * moment.m2 * moment.n1) /\n-                    (moment.n1 * moment.n2 * moment.n3 * variance * variance);\n-            }\n-            n = moment.n;\n+        double kurtosis = Double.NaN;\n+        if (moment.getN() > 3) {\n+            double variance = moment.m2 / (double) (moment.n - 1);\n+                \n+                if (moment.n <= 3 || variance < 10E-20) {\n+                    kurtosis = 0.0;\n+                } else {\n+                    kurtosis =\n+                        (moment.n0 * (moment.n0 + 1) * moment.m4 -\n+                                3 * moment.m2 * moment.m2 * moment.n1) /\n+                                (moment.n1 * moment.n2 * moment.n3 * variance * variance);\n+                }\n         }\n-\n         return kurtosis;\n     }\n \n     public void clear() {\n         if (incMoment) {\n             moment.clear();\n+        } else  {\n+            throw new IllegalStateException\n+                (\"Statistics constructed from external moments cannot be cleared\");\n         }\n-        kurtosis = Double.NaN;\n-        n = 0;\n     }\n \n     /**\n         return moment.getN();\n     }\n     \n-    /*UnvariateStatistic Approach */\n-\n-    /** */\n-    Mean mean = new Mean();\n+    /* UnvariateStatistic Approach  */\n \n     /**\n      * Returns the kurtosis for this collection of values.  \n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n      * @param length the number of elements to include\n-     * @return the kurtosis of the values or Double.NaN if the array is empty\n+     * @return the kurtosis of the values or Double.NaN if the array is empty or has fewer than\n+     *  four elements\n      */\n-    public double evaluate(\n-        final double[] values,\n-        final int begin,\n-        final int length) {\n-\n-        // Initialize the kurtosis\n-        double kurt = Double.NaN;\n-\n-        if (test(values, begin, length)) {\n-            if (length <= 3) {\n-                kurt = 0.0;\n-            } else {\n-\n-                // Get the mean and the standard deviation\n-                double m = mean.evaluate(values, begin, length);\n-\n-                // Calc the std, this is implemented here instead\n-                // of using the standardDeviation method eliminate\n-                // a duplicate pass to get the mean\n-                double accum = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    accum += Math.pow((values[i] - m), 2.0);\n-                    accum2 += (values[i] - m);\n-                }\n-\n-                double stdDev =\n-                    Math.sqrt(\n+    public double evaluate(final double[] values,final int begin, final int length) {\n+        // Initialize the kurtosis  \n+        double kurt = Double.NaN;   \n+        \n+        if (test(values, begin, length) && length > 3) {\n+            Mean mean = new Mean();          \n+            // Get the mean and the standard deviation\n+            double m = mean.evaluate(values, begin, length);\n+            \n+            // Calc the std, this is implemented here instead\n+            // of using the standardDeviation method eliminate\n+            // a duplicate pass to get the mean\n+            double accum = 0.0;\n+            double accum2 = 0.0;\n+            for (int i = begin; i < begin + length; i++) {\n+                accum += Math.pow((values[i] - m), 2.0);\n+                accum2 += (values[i] - m);\n+            }\n+            \n+            double stdDev =Math.sqrt(\n                         (accum - (Math.pow(accum2, 2) / ((double) length))) /\n                         (double) (length - 1));\n-\n-                // Sum the ^4 of the distance from the mean divided by the\n-                // standard deviation\n-                double accum3 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    accum3 += Math.pow((values[i] - m), 4.0);\n-                }\n-                accum3 /= Math.pow(stdDev, 4.0d);\n-\n-                // Get N\n-                double n0 = length;\n-\n-                double coefficientOne =\n-                    (n0 * (n0 + 1)) / ((n0 - 1) * (n0 - 2) * (n0 - 3));\n-                double termTwo =\n-                    ((3 * Math.pow(n0 - 1, 2.0)) / ((n0 - 2) * (n0 - 3)));\n-\n-                // Calculate kurtosis\n-                kurt = (coefficientOne * accum3) - termTwo;\n+            \n+            // Sum the ^4 of the distance from the mean divided by the\n+            // standard deviation\n+            double accum3 = 0.0;\n+            for (int i = begin; i < begin + length; i++) {\n+                accum3 += Math.pow((values[i] - m), 4.0);\n             }\n+            accum3 /= Math.pow(stdDev, 4.0d);\n+            \n+            // Get N\n+            double n0 = length;\n+            \n+            double coefficientOne =\n+                (n0 * (n0 + 1)) / ((n0 - 1) * (n0 - 2) * (n0 - 3));\n+            double termTwo =\n+                ((3 * Math.pow(n0 - 1, 2.0)) / ((n0 - 2) * (n0 - 3)));\n+            \n+            // Calculate kurtosis\n+            kurt = (coefficientOne * accum3) - termTwo;\n         }\n-\n+        \n         return kurt;\n     }\n ", "timestamp": 1087522967, "metainfo": ""}