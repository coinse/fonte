{"sha": "717b56b998f0fe37f2a8f6b1468ddc62f3802c4a", "log": "Fixed CheckStyle warnings.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java\n  * weights.\n  * Subclasses must implement the {@link #computeRule(int) computeRule} method.\n  *\n- * <T> Type of the number used to represent the points and weights of the\n- * quadrature rules.\n+ * @param <T> Type of the number used to represent the points and weights of\n+ * the quadrature rules.\n  *\n  * @version $Id$\n  * @since 3.1\n         }\n         return rule;\n     }\n-    \n+\n     /**\n      * Stores a rule.\n      *\n     /**\n      * Converts the from the actual {@code Number} type to {@code double}\n      *\n+     * @param <T> Type of the number used to represent the points and\n+     * weights of the quadrature rules.\n      * @param rule Points and weights.\n      * @return points and weights as {@code double}s.\n      */\n--- a/src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java\n  */\n package org.apache.commons.math3.analysis.integration.gauss;\n \n-import java.util.Map;\n-import java.util.TreeMap;\n import org.apache.commons.math3.util.Pair;\n-import org.apache.commons.math3.exception.DimensionMismatchException;\n \n /**\n  * Class that provides different ways to compute the nodes and weights to be\n      * Performs a change of variable so that the integration can be performed\n      * on an arbitrary interval {@code [a, b]}.\n      * It is assumed that the natural interval is {@code [-1, 1]}.\n-     * \n+     *\n      * @param rule Original points and weights.\n      * @param a Lower bound of the integration interval.\n      * @param b Lower bound of the integration interval.\n--- a/src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java\n  * @since 3.1\n  */\n public class LegendreHighPrecisionRuleFactory extends BaseRuleFactory<BigDecimal> {\n+    /** Settings for enhanced precision computations. */\n     private final MathContext mContext;\n     /** The number {@code 2}. */\n     private final BigDecimal two;\n--- a/src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java\n  */\n package org.apache.commons.math3.analysis.integration.gauss;\n \n-import java.math.MathContext;\n-import java.math.BigDecimal;\n import org.apache.commons.math3.util.Pair;\n \n /**\n             points[iMax] = 0d;\n             weights[iMax] = w;\n         }\n- \n+\n         return new Pair<Double[], Double[]>(points, weights);\n     }\n }\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math3/analysis/integration/gauss/package-info.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/**\n+ *\n+ * Gauss family of quadrature schemes.\n+ *\n+ */\n+package org.apache.commons.math3.analysis.integration.gauss;\n--- a/src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java\n+++ b/src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.NumberIsTooLargeException;\n-import org.apache.commons.math3.exception.MathArithmeticException;\n import org.apache.commons.math3.exception.OutOfRangeException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n import org.apache.commons.math3.util.MathUtils;\n--- a/src/main/java/org/apache/commons/math3/linear/RealVector.java\n+++ b/src/main/java/org/apache/commons/math3/linear/RealVector.java\n      * not equal to this {@code RealVector} instance.\n      */\n     @Override\n-    public boolean equals(Object obj) {\n+    public boolean equals(Object other) {\n         throw new UnsupportedOperationException();\n     }\n \n--- a/src/main/java/org/apache/commons/math3/optimization/PointValuePair.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/PointValuePair.java\n \n     /** Internal class used only for serialization. */\n     private static class DataTransferObject implements Serializable {\n-\n         /** Serializable UID. */\n         private static final long serialVersionUID = 20120513L;\n-\n-        /** Point coordinates.\n+        /**\n+         * Point coordinates.\n          * @Serial\n          */\n-        final double[] point;\n-\n-        /** Value of the objective function at the point.\n+        private final double[] point;\n+        /**\n+         * Value of the objective function at the point.\n          * @Serial\n          */\n-        final double value;\n+        private final double value;\n \n         /** Simple constructor.\n          * @param point Point coordinates.\n--- a/src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java\n \n     /** Internal class used only for serialization. */\n     private static class DataTransferObject implements Serializable {\n-\n         /** Serializable UID. */\n         private static final long serialVersionUID = 20120513L;\n-\n-        /** Point coordinates.\n+        /**\n+         * Point coordinates.\n          * @Serial\n          */\n-        final double[] point;\n-\n-        /** Value of the objective function at the point.\n+        private final double[] point;\n+        /**\n+         * Value of the objective function at the point.\n          * @Serial\n          */\n-        final double[] value;\n+        private final double[] value;\n \n         /** Simple constructor.\n          * @param point Point coordinates.\n         private Object readResolve() {\n             return new PointVectorValuePair(point, value, false);\n         }\n-\n     }\n-\n }", "timestamp": 1342395758, "metainfo": ""}