{"sha": "479f7773075c136b43a9cf120704c77c0a4880ab", "log": "Javadoc only.  Added missing </p>'s  ", "commit": "\n--- a/src/java/org/apache/commons/math/distribution/AbstractDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/AbstractDistribution.java\n      * For a random variable X whose values are distributed according\n      * to this distribution, this method returns P(x0 &le; X &le; x1).\n      * <p>\n-     * The default implementation uses the identity\n+     * The default implementation uses the identity</p>\n      * <p>\n-     * P(x0 &le; X &le; x1) = P(X &le; x1) - P(X &le; x0)\n+     * P(x0 &le; X &le; x1) = P(X &le; x1) - P(X &le; x0) </p>\n      * \n      * @param x0 the (inclusive) lower bound\n      * @param x1 the (inclusive) upper bound\n--- a/src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n      * that P(X &le; x) &le; <code>p</code>.\n      * <p>\n      * Returns <code>-1</code> for p=0 and <code>Integer.MAX_VALUE</code> for\n-     * p=1.\n+     * p=1.</p>\n      *\n      * @param p the desired probability\n      * @return the largest x such that P(X &le; x) <= p\n--- a/src/java/org/apache/commons/math/distribution/CauchyDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/CauchyDistribution.java\n  * Cauchy Distribution.\n  *\n  * <p>\n- * References:<p>\n+ * References:\n  * <ul>\n  * <li><a href=\"http://mathworld.wolfram.com/CauchyDistribution.html\">\n  * Cauchy Distribution</a></li>\n--- a/src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java\n      * that P(X &lt; x) = <code>p</code>.\n      * <p>\n      * Returns <code>Double.NEGATIVE_INFINITY</code> for p=0 and \n-     * <code>Double.POSITIVE_INFINITY</code> for p=1.\n+     * <code>Double.POSITIVE_INFINITY</code> for p=1.</p>\n      *\n      * @param p the desired probability\n      * @return x, such that P(X &lt; x) = <code>p</code>\n--- a/src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n      * For this distribution, X, this method returns the critical point x, such\n      * that P(X &lt; x) = <code>p</code>.\n      * <p>\n-     * Returns 0 for p=0 and <code>Double.POSITIVE_INFINITY</code> for p=1.\n+     * Returns 0 for p=0 and <code>Double.POSITIVE_INFINITY</code> for p=1.</p>\n      *\n      * @param p the desired probability\n      * @return x, such that P(X &lt; x) = <code>p</code>\n--- a/src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n      * For this distribution, X, this method returns the critical point x, such\n      * that P(X &lt; x) = <code>p</code>.\n      * <p>\n-     * Returns 0 for p=0 and <code>Double.POSITIVE_INFINITY</code> for p=1.\n+     * Returns 0 for p=0 and <code>Double.POSITIVE_INFINITY</code> for p=1.</p>\n      * \n      * @param p the desired probability\n      * @return x, such that P(X &lt; x) = <code>p</code>\n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n      * For this distribution, X, this method returns the critical point x, such\n      * that P(X &lt; x) = <code>p</code>.\n      * <p>\n-     * Returns 0 for p=0 and <code>Double.POSITIVE_INFINITY</code> for p=1.\n+     * Returns 0 for p=0 and <code>Double.POSITIVE_INFINITY</code> for p=1.</p>\n      *\n      * @param p the desired probability\n      * @return x, such that P(X &lt; x) = <code>p</code>\n--- a/src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n      * For this distribution, X, this method returns the critical point x, such\n      * that P(X &lt; x) = <code>p</code>.\n      * <p>\n-     * Returns 0 for p=0 and <code>Double.POSITIVE_INFINITY</code> for p=1.\n+     * Returns 0 for p=0 and <code>Double.POSITIVE_INFINITY</code> for p=1.</p>\n      *\n      * @param p the desired probability\n      * @return x, such that P(X &lt; x) = <code>p</code>\n--- a/src/java/org/apache/commons/math/distribution/IntegerDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/IntegerDistribution.java\n      * P(X &le; M) =1, then <code>M</code> is returned by \n      * <code>inverseCumulativeProbability(1).</code>\n      * If there is no such value, <code>M, Integer.MAX_VALUE</code> is \n-     * returned.</li></ul>\n+     * returned.</li></ul></p>\n      * \n      * @param p the cumulative probability.\n      * @return the largest x such that P(X &le; x) <= p\n--- a/src/java/org/apache/commons/math/distribution/NormalDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistribution.java\n  * Normal (Gauss) Distribution.\n  *\n  * <p>\n- * References:<p>\n+ * References:</p><p>\n  * <ul>\n  * <li><a href=\"http://mathworld.wolfram.com/NormalDistribution.html\">\n  * Normal Distribution</a></li>\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n      * that P(X &lt; x) = <code>p</code>.\n      * <p>\n      * Returns <code>Double.NEGATIVE_INFINITY</code> for p=0 and \n-     * <code>Double.POSITIVE_INFINITY</code> for p=1.\n+     * <code>Double.POSITIVE_INFINITY</code> for p=1.</p>\n      *\n      * @param p the desired probability\n      * @return x, such that P(X &lt; x) = <code>p</code>\n--- a/src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java\n      * P(X &le; x) &le; <code>p</code>.\n      * <p>\n      * Returns <code>-1</code> for p=0 and <code>Integer.MAX_VALUE</code>\n-     * for p=1.\n+     * for p=1.</p>\n      * @param p the desired probability\n      * @return the largest x such that P(X &le; x) <= p\n      * @throws MathException if the inverse cumulative probability can not be\n--- a/src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\n      * distribution is used to approximate the Poisson distribution.\n      * <p>\n      * The computation uses \"half-correction\" -- evaluating the normal\n-     * distribution function at <code>x + 0.5</code>\n+     * distribution function at <code>x + 0.5</code></p>\n      * \n      * @param x the upper bound, inclusive\n      * @return the distribution function value calculated using a normal approximation\n--- a/src/java/org/apache/commons/math/distribution/TDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/TDistributionImpl.java\n      * that P(X &lt; x) = <code>p</code>.\n      * <p>\n      * Returns <code>Double.NEGATIVE_INFINITY</code> for p=0 and \n-     * <code>Double.POSITIVE_INFINITY</code> for p=1.\n+     * <code>Double.POSITIVE_INFINITY</code> for p=1.</p>\n      *\n      * @param p the desired probability\n      * @return x, such that P(X &lt; x) = <code>p</code>\n--- a/src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java\n      * that P(X &lt; x) = <code>p</code>.\n      * <p>\n      * Returns <code>Double.NEGATIVE_INFINITY</code> for p=0 and \n-     * <code>Double.POSITIVE_INFINITY</code> for p=1.\n+     * <code>Double.POSITIVE_INFINITY</code> for p=1.</p>\n      *\n      * @param p the desired probability\n      * @return x, such that P(X &lt; x) = <code>p</code>\n--- a/src/java/org/apache/commons/math/fraction/Fraction.java\n+++ b/src/java/org/apache/commons/math/fraction/Fraction.java\n      *   - a valid maxDenominator value and the epsilon value set to zero\n      *     (that way epsilon only has effect if there is an exact match before\n      *     the maxDenominator value is reached).\n-     * <p>\n+     * </p><p>\n      *\n      * It has been done this way so that the same code can be (re)used for both\n      * scenarios. However this could be confusing to users if it were part of\n--- a/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java\n+++ b/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java\n  * <p>\n  * Minus signs are only allowed in the whole number part - i.e.,\n  * \"-3 1/2\" is legitimate and denotes -7/2, but \"-3 -1/2\" is invalid and\n- * will result in a <code>ParseException</code>.\n+ * will result in a <code>ParseException</code>.</p>\n  * \n  * @since 1.1\n  * @version $Revision$ $Date$\n      * <p>\n      * Minus signs are only allowed in the whole number part - i.e.,\n      * \"-3 1/2\" is legitimate and denotes -7/2, but \"-3 -1/2\" is invalid and\n-     * will result in a <code>ParseException</code>.\n+     * will result in a <code>ParseException</code>.</p>\n      * \n      * @param source the string to parse\n      * @param pos input/ouput parsing parameter.\n--- a/src/java/org/apache/commons/math/linear/BigMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/BigMatrix.java\n  * BigDecimal representations for the entries.\n  * <p>\n  * Matrix element indexing is 0-based -- e.g., <code>getEntry(0, 0)</code>\n- * returns the element in the first row, first column of the matrix.\n+ * returns the element in the first row, first column of the matrix.</p>\n  *\n  * @version $Revision$ $Date$\n  */\n      * Returns the entries in row number <code>row</code> as an array.\n      * <p>\n      * Row indices start at 0.  A <code>MatrixIndexException</code> is thrown\n-     * unless <code>0 <= row < rowDimension.</code>\n+     * unless <code>0 <= row < rowDimension.</code></p>\n      *\n      * @param row the row to be fetched\n      * @return array of entries in the row\n      * of double values.\n      * <p>\n      * Row indices start at 0.  A <code>MatrixIndexException</code> is thrown\n-     * unless <code>0 <= row < rowDimension.</code>\n+     * unless <code>0 <= row < rowDimension.</code></p>\n      *\n      * @param row the row to be fetched\n      * @return array of entries in the row\n      * Returns the entries in column number <code>col</code> as an array.\n      * <p>\n      * Column indices start at 0.  A <code>MatrixIndexException</code> is thrown\n-     * unless <code>0 <= column < columnDimension.</code>\n+     * unless <code>0 <= column < columnDimension.</code></p>\n      *\n      * @param col the column to be fetched\n      * @return array of entries in the column\n      * of double values.\n      * <p>\n      * Column indices start at 0.  A <code>MatrixIndexException</code> is thrown\n-     * unless <code>0 <= column < columnDimension.</code>\n+     * unless <code>0 <= column < columnDimension.</code></p>\n      *\n      * @param col the column to be fetched\n      * @return array of entries in the column\n      * <li><code>0 <= row < rowDimension</code></li>\n      * <li><code> 0 <= column < columnDimension</code></li>\n      * </ul>\n-     * otherwise a <code>MatrixIndexException</code> is thrown.\n+     * otherwise a <code>MatrixIndexException</code> is thrown.</p>\n      *\n      * @param row  row location of entry to be fetched  \n      * @param column  column location of entry to be fetched\n      * <li><code>0 <= row < rowDimension</code></li>\n      * <li><code> 0 <= column < columnDimension</code></li>\n      * </ul>\n-     * otherwise a <code>MatrixIndexException</code> is thrown.\n+     * otherwise a <code>MatrixIndexException</code> is thrown.</p>\n      *\n      * @param row  row location of entry to be fetched\n      * @param column  column location of entry to be fetched\n--- a/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n  * <li>solve</li>\n  * <li>isSingular</li>\n  * <li>getDeterminant</li>\n- * <li>inverse</li> </ul>\n+ * <li>inverse</li> </ul></p>\n  * <p>\n * <strong>Usage notes</strong>:<br>\n  * <ul><li>\n  * <li>\n  * As specified in the {@link BigMatrix} interface, matrix element indexing\n  * is 0-based -- e.g., <code>getEntry(0, 0)</code>\n- * returns the element in the first row, first column of the matrix.</li></ul>\n+ * returns the element in the first row, first column of the matrix.</li></ul></p>\n+ * \n  * @version $Revision$ $Date$\n  */\n public class BigMatrixImpl implements BigMatrix, Serializable {\n      * Create a new BigMatrix using the <code>data</code> as the underlying\n      * data array.\n      * <p>\n-     * The input array is copied, not referenced.\n+     * The input array is copied, not referenced.</p>\n      *\n      * @param d data for new matrix\n      * @throws IllegalArgumentException if <code>d</code> is not rectangular\n      * Create a new BigMatrix using the <code>data</code> as the underlying\n      * data array.\n      * <p>\n-     * The input array is copied, not referenced.\n+     * The input array is copied, not referenced.</p>\n      *\n      * @param d data for new matrix\n      * @throws IllegalArgumentException if <code>d</code> is not rectangular\n      * data for the unique column of the <code>v.length x 1</code> matrix \n      * created.\n      * <p>\n-     * The input array is copied, not referenced.\n+     * The input array is copied, not referenced.</p>\n      *\n      * @param v column vector holding data for new matrix\n      */\n     /**\n      * Returns matrix entries as a two-dimensional array.\n      * <p>\n-     * Makes a fresh copy of the underlying data.\n+     * Makes a fresh copy of the underlying data.</p>\n      *\n      * @return    2-dimensional array of entries\n      */\n      * Returns matrix entries as a two-dimensional array.\n      * <p>\n      * Makes a fresh copy of the underlying data converted to\n-     * <code>double</code> values.\n+     * <code>double</code> values.</p>\n      *\n      * @return    2-dimensional array of entries\n      */\n     /**\n      * Returns a reference to the underlying data array.\n      * <p>\n-     * Does not make a fresh copy of the underlying data.\n+     * Does not make a fresh copy of the underlying data.</p>\n      *\n      * @return 2-dimensional array of entries\n      */\n      * 1  2  3  4\n      * 5  3  4  8\n      * 9  5  6  2\n-     * </pre>\n+     * </pre></p>\n      * \n      * @param subMatrix  array containing the submatrix replacement data\n      * @param row  row coordinate of the top, left element to be replaced\n      * Returns the entries in row number <code>row</code> as an array.\n      * <p>\n      * Row indices start at 0.  A <code>MatrixIndexException</code> is thrown\n-     * unless <code>0 <= row < rowDimension.</code>\n+     * unless <code>0 <= row < rowDimension.</code></p>\n      *\n      * @param row the row to be fetched\n      * @return array of entries in the row\n      * of double values.\n      * <p>\n      * Row indices start at 0.  A <code>MatrixIndexException</code> is thrown\n-     * unless <code>0 <= row < rowDimension.</code>\n+     * unless <code>0 <= row < rowDimension.</code></p>\n      *\n      * @param row the row to be fetched\n      * @return array of entries in the row\n      * Returns the entries in column number <code>col</code> as an array.\n      * <p>\n      * Column indices start at 0.  A <code>MatrixIndexException</code> is thrown\n-     * unless <code>0 <= column < columnDimension.</code>\n+     * unless <code>0 <= column < columnDimension.</code></p>\n      *\n      * @param col the column to be fetched\n      * @return array of entries in the column\n      * of double values.\n      * <p>\n      * Column indices start at 0.  A <code>MatrixIndexException</code> is thrown\n-     * unless <code>0 <= column < columnDimension.</code>\n+     * unless <code>0 <= column < columnDimension.</code></p>\n      *\n      * @param col the column to be fetched\n      * @return array of entries in the column\n      * <li><code>0 <= row < rowDimension</code></li>\n      * <li><code> 0 <= column < columnDimension</code></li>\n      * </ul>\n-     * otherwise a <code>MatrixIndexException</code> is thrown.\n+     * otherwise a <code>MatrixIndexException</code> is thrown.</p>\n      *\n      * @param row  row location of entry to be fetched  \n      * @param column  column location of entry to be fetched\n      * <li><code>0 <= row < rowDimension</code></li>\n      * <li><code> 0 <= column < columnDimension</code></li>\n      * </ul>\n-     * otherwise a <code>MatrixIndexException</code> is thrown.\n+     * otherwise a <code>MatrixIndexException</code> is thrown.</p>\n      *\n      * @param row  row location of entry to be fetched\n      * @param column  column location of entry to be fetched\n      * <p>\n      * <strong>Implementation Note</strong>:<br>\n      * Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\">\n-     * Crout's algortithm</a>, with partial pivoting.\n+     * Crout's algortithm</a>, with partial pivoting.</p>\n      * <p>\n      * <strong>Usage Note</strong>:<br>\n      * This method should rarely be invoked directly. Its only use is\n      * to force recomputation of the LU decomposition when changes have been\n      * made to the underlying data using direct array references. Changes\n      * made using setXxx methods will trigger recomputation when needed\n-     * automatically.\n+     * automatically.</p>\n      *\n      * @throws InvalidMatrixException if the matrix is non-square or singular.\n      */\n      * The matrix returned is a compact representation of the LU decomposition. \n      * Elements below the main diagonal correspond to entries of the \"L\" matrix;   \n      * elements on and above the main diagonal correspond to entries of the \"U\"\n-     * matrix.\n+     * matrix.</p>\n      * <p>\n      * Example: <pre>\n      * \n      * \n      * The L and U matrices satisfy the matrix equation LU = permuteRows(this), <br>\n      *  where permuteRows reorders the rows of the matrix to follow the order determined\n-     *  by the <a href=#getPermutation()>permutation</a> property.\n+     *  by the <a href=#getPermutation()>permutation</a> property.</p>\n      * \n      * @return LU decomposition matrix\n      * @throws InvalidMatrixException if the matrix is non-square or singular.\n      * <p>\n      * Example:\n      * permutation = [1, 2, 0] means current 2nd row is first, current third row is second\n-     * and current first row is last.\n-     * <p>\n-     * Returns a fresh copy of the array.\n+     * and current first row is last.</p>\n+     * <p>\n+     * Returns a fresh copy of the array.</p>\n      * \n      * @return the permutation\n      */\n     /**\n      * Replaces data with a fresh copy of the input array.\n      * <p>\n-     * Verifies that the input array is rectangular and non-empty.\n+     * Verifies that the input array is rectangular and non-empty.</p>\n      *\n      * @param in data to copy in\n      * @throws IllegalArgumentException if input array is emtpy or not\n--- a/src/java/org/apache/commons/math/linear/RealMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrix.java\n  * Interface defining a real-valued matrix with basic algebraic operations.\n  * <p>\n  * Matrix element indexing is 0-based -- e.g., <code>getEntry(0, 0)</code>\n- * returns the element in the first row, first column of the matrix.\n+ * returns the element in the first row, first column of the matrix.</p>\n  * \n  * @version $Revision$ $Date$\n  */\n      * Returns the entries in row number <code>row</code> as an array.\n      * <p>\n      * Row indices start at 0.  A <code>MatrixIndexException</code> is thrown\n-     * unless <code>0 <= row < rowDimension.</code>\n+     * unless <code>0 <= row < rowDimension.</code></p>\n      *\n      * @param row the row to be fetched\n      * @return array of entries in the row\n      * Returns the entries in column number <code>col</code> as an array.\n      * <p>\n      * Column indices start at 0.  A <code>MatrixIndexException</code> is thrown\n-     * unless <code>0 <= column < columnDimension.</code>\n+     * unless <code>0 <= column < columnDimension.</code></p>\n      *\n      * @param col the column to be fetched\n      * @return array of entries in the column\n      * <li><code>0 <= row < rowDimension</code></li>\n      * <li><code> 0 <= column < columnDimension</code></li>\n      * </ul>\n-     * otherwise a <code>MatrixIndexException</code> is thrown.\n+     * otherwise a <code>MatrixIndexException</code> is thrown.</p>\n      * \n      * @param row  row location of entry to be fetched\n      * @param column  column location of entry to be fetched\n--- a/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n  * <li>solve</li>\n  * <li>isSingular</li>\n  * <li>getDeterminant</li>\n- * <li>inverse</li> </ul>\n+ * <li>inverse</li> </ul></p>\n  * <p>\n  * <strong>Usage notes</strong>:<br>\n  * <ul><li>\n  * As specified in the {@link RealMatrix} interface, matrix element indexing\n  * is 0-based -- e.g., <code>getEntry(0, 0)</code>\n  * returns the element in the first row, first column of the matrix.</li></ul>\n+ * </p>\n  *\n  * @version $Revision$ $Date$\n  */\n      * Create a new RealMatrix using the input array as the underlying\n      * data array.\n      * <p>\n-     * The input array is copied, not referenced.\n+     * The input array is copied, not referenced.</p>\n      *\n      * @param d data for new matrix\n      * @throws IllegalArgumentException if <code>data</code> is not rectangular\n      * data for the unique column of the <code>v.length x 1</code> matrix\n      * created.\n      * <p>\n-     * The input array is copied, not referenced.\n+     * The input array is copied, not referenced.</p>\n      *\n      * @param v column vector holding data for new matrix\n      */\n     /**\n      * Returns matrix entries as a two-dimensional array.\n      * <p>\n-     * Makes a fresh copy of the underlying data.\n+     * Makes a fresh copy of the underlying data.</p>\n      *\n      * @return    2-dimensional array of entries\n      */\n     /**\n      * Returns a reference to the underlying data array.\n      * <p>\n-     * Does not make a fresh copy of the underlying data.\n+     * Does not make a fresh copy of the underlying data.</p>\n      *\n      * @return 2-dimensional array of entries\n      */\n      * 1  2  3  4\n      * 5  3  4  8\n      * 9  5  6  2\n-     * </pre>\n+     * </pre></p>\n      * \n      * @param subMatrix  array containing the submatrix replacement data\n      * @param row  row coordinate of the top, left element to be replaced\n      * Returns the entries in row number <code>row</code> as an array.\n      * <p>\n      * Row indices start at 0.  A <code>MatrixIndexException</code> is thrown\n-     * unless <code>0 <= row < rowDimension.</code>\n+     * unless <code>0 <= row < rowDimension.</code></p>\n      *\n      * @param row the row to be fetched\n      * @return array of entries in the row\n      * Returns the entries in column number <code>col</code> as an array.\n      * <p>\n      * Column indices start at 0.  A <code>MatrixIndexException</code> is thrown\n-     * unless <code>0 <= column < columnDimension.</code>\n+     * unless <code>0 <= column < columnDimension.</code></p>\n      *\n      * @param col the column to be fetched\n      * @return array of entries in the column\n      * <li><code>0 <= row < rowDimension</code></li>\n      * <li><code> 0 <= column < columnDimension</code></li>\n      * </ul>\n-     * otherwise a <code>MatrixIndexException</code> is thrown.\n+     * otherwise a <code>MatrixIndexException</code> is thrown.</p>\n      * \n      * @param row  row location of entry to be fetched\n      * @param column  column location of entry to be fetched\n      * <p>\n      * <strong>Implementation Note</strong>:<br>\n      * Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\">\n-     * Crout's algorithm</a>, with partial pivoting.\n+     * Crout's algorithm</a>, with partial pivoting.</p>\n      * <p>\n      * <strong>Usage Note</strong>:<br>\n      * This method should rarely be invoked directly. Its only use is\n      * to force recomputation of the LU decomposition when changes have been\n      * made to the underlying data using direct array references. Changes\n      * made using setXxx methods will trigger recomputation when needed\n-     * automatically.\n+     * automatically.</p>\n      *\n      * @throws InvalidMatrixException if the matrix is non-square or singular.\n      */\n      * The matrix returned is a compact representation of the LU decomposition.\n      * Elements below the main diagonal correspond to entries of the \"L\" matrix;\n      * elements on and above the main diagonal correspond to entries of the \"U\"\n-     * matrix.\n+     * matrix.</p>\n      * <p>\n      * Example: <pre>\n      *\n      *\n      * The L and U matrices satisfy the matrix equation LU = permuteRows(this), <br>\n      *  where permuteRows reorders the rows of the matrix to follow the order determined\n-     *  by the <a href=#getPermutation()>permutation</a> property.\n+     *  by the <a href=#getPermutation()>permutation</a> property.</p>\n      *\n      * @return LU decomposition matrix\n      * @throws InvalidMatrixException if the matrix is non-square or singular.\n      * <p>\n      * Example:\n      * permutation = [1, 2, 0] means current 2nd row is first, current third row is second\n-     * and current first row is last.\n-     * <p>\n-     * Returns a fresh copy of the array.\n+     * and current first row is last.</p>\n+     * <p>\n+     * Returns a fresh copy of the array.</p>\n      *\n      * @return the permutation\n      */\n     /**\n      * Replaces data with a fresh copy of the input array.\n      * <p>\n-     * Verifies that the input array is rectangular and non-empty\n+     * Verifies that the input array is rectangular and non-empty.</p>\n      *\n      * @param in data to copy in\n      * @throws IllegalArgumentException if input array is empty or not\n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n  * <p>\n  * Accepts int, long, char or Object values.  New values added must be \n  * comparable to those that have been added, otherwise the add method will \n- * throw an IllegalArgumentException.  \n+ * throw an IllegalArgumentException.</p>\n  * <p>\n  * Integer values (int, long, Integer, Long) are not distinguished by type -- \n  * i.e. <code>addValue(new Long(2)), addValue(2), addValue(2l)</code> all have\n- * the same effect (similarly for arguments to <code>getCount,</code> etc.).\n+ * the same effect (similarly for arguments to <code>getCount,</code> etc.).</p>\n  * <p>\n  * The values are ordered using the default (natural order), unless a  \n- * <code>Comparator</code> is supplied in the constructor.\n+ * <code>Comparator</code> is supplied in the constructor.</p>\n  *\n  * @version $Revision$ $Date$\n  */\n      * <p>\n      * If added values are itegral (i.e., integers, longs, Integers, or Longs), \n      * they are converted to Longs when they are added, so the objects returned\n-     * by the Iterator will in this case be Longs.\n+     * by the Iterator will in this case be Longs.</p>\n      * \n      * @return values Iterator\n      */\n       * Returns the percentage of values that are equal to v\n      * (as a proportion between 0 and 1).\n      * <p>\n-     * Returns <code>Double.NaN</code> if no values have been added.\n+     * Returns <code>Double.NaN</code> if no values have been added.</p>\n      * \n      * @param v the value to lookup\n      * @return the proportion of values equal to v\n     }\n     \n     /**\n-      * Returns the percentage of values that are equal to v\n+     * Returns the percentage of values that are equal to v\n      * (as a proportion between 0 and 1).\n      * \n      * @param v the value to lookup\n     }\n     \n     /**\n-      * Returns the percentage of values that are equal to v\n+     * Returns the percentage of values that are equal to v\n      * (as a proportion between 0 and 1).\n      * \n      * @param v the value to lookup\n     /**\n      * Returns the cumulative frequency of values less than or equal to v.\n      * <p>\n-     * Returns 0 if v is not comparable to the values set.\n+     * Returns 0 if v is not comparable to the values set.</p>\n      * \n      * @param v the value to lookup.\n      * @return the proportion of values equal to v\n      /**\n      * Returns the cumulative frequency of values less than or equal to v.\n      * <p>\n-     * Returns 0 if v is not comparable to the values set.\n+     * Returns 0 if v is not comparable to the values set.</p>\n      * \n      * @param v the value to lookup\n      * @return the proportion of values equal to v\n      /**\n      * Returns the cumulative frequency of values less than or equal to v.\n      * <p>\n-     * Returns 0 if v is not comparable to the values set.\n+     * Returns 0 if v is not comparable to the values set.</p>\n      * \n      * @param v the value to lookup\n      * @return the proportion of values equal to v\n     /**\n      * Returns the cumulative frequency of values less than or equal to v.\n      * <p>\n-     * Returns 0 if v is not comparable to the values set.\n+     * Returns 0 if v is not comparable to the values set.</p>\n      * \n      * @param v the value to lookup\n      * @return the proportion of values equal to v\n     \n     //----------------------------------------------------------------------------------------------\n     \n-     /**\n+    /**\n      * Returns the cumulative percentage of values less than or equal to v\n      * (as a proportion between 0 and 1).\n      * <p>\n      * Returns <code>Double.NaN</code> if no values have been added.\n      * Returns 0 if at least one value has been added, but v is not comparable\n-     * to the values set.\n+     * to the values set.</p>\n      * \n      * @param v the value to lookup\n      * @return the proportion of values less than or equal to v\n      * Returns the cumulative percentage of values less than or equal to v\n      * (as a proportion between 0 and 1).\n      * <p>\n-     * Returns 0 if v is not comparable to the values set.\n+     * Returns 0 if v is not comparable to the values set.</p>\n      * \n      * @param v the value to lookup\n      * @return the proportion of values less than or equal to v\n      * Returns the cumulative percentage of values less than or equal to v\n      * (as a proportion between 0 and 1).\n      * <p>\n-     * Returns 0 if v is not comparable to the values set.\n+     * Returns 0 if v is not comparable to the values set.</p>\n      * \n      * @param v the value to lookup\n      * @return the proportion of values less than or equal to v\n      * Returns the cumulative percentage of values less than or equal to v\n      * (as a proportion between 0 and 1).\n      * <p>\n-     * Returns 0 if v is not comparable to the values set.\n+     * Returns 0 if v is not comparable to the values set.</p>\n      * \n      * @param v the value to lookup\n      * @return the proportion of values less than or equal to v\n--- a/src/java/org/apache/commons/math/stat/StatUtils.java\n+++ b/src/java/org/apache/commons/math/stat/StatUtils.java\n      * <code>Double.NaN</code> if the array is empty.\n      * <p>\n      * Throws <code>IllegalArgumentException</code> if the input array\n-     * is null.\n+     * is null.</p>\n      * \n      * @param values  array of values to sum\n      * @return the sum of the values or <code>Double.NaN</code> if the array\n      * the input array, or <code>Double.NaN</code> if the designated subarray\n      * is empty.\n      * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n      * \n      * @param values the input array\n      * @param begin index of the first array element to include\n      * Returns the sum of the squares of the entries in the input array, or \n      * <code>Double.NaN</code> if the array is empty.\n      * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n      * \n      * @param values  input array\n      * @return the sum of the squared values or <code>Double.NaN</code> if the\n      * the input array, or <code>Double.NaN</code> if the designated subarray\n      * is empty.\n      * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n      * \n      * @param values the input array\n      * @param begin index of the first array element to include\n      * Returns the product of the entries in the input array, or \n      * <code>Double.NaN</code> if the array is empty.\n      * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n      * \n      * @param values the input array\n      * @return the product of the values or Double.NaN if the array is empty\n      * the input array, or <code>Double.NaN</code> if the designated subarray\n      * is empty.\n      * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n      * \n      * @param values the input array\n      * @param begin index of the first array element to include\n      * Returns the sum of the natural logs of the entries in the input array, or \n      * <code>Double.NaN</code> if the array is empty.\n      * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n      * <p>\n      * See {@link org.apache.commons.math.stat.descriptive.summary.SumOfLogs}.\n+     * </p>\n      * \n      * @param values the input array\n      * @return the sum of the natural logs of the values or Double.NaN if \n      * the input array, or <code>Double.NaN</code> if the designated subarray\n      * is empty.\n      * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.\n-     * <p>\n-      * See {@link org.apache.commons.math.stat.descriptive.summary.SumOfLogs}.\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n+     * <p>\n+     * See {@link org.apache.commons.math.stat.descriptive.summary.SumOfLogs}.\n+     * </p>\n      * \n      * @param values the input array\n      * @param begin index of the first array element to include\n      * Returns the arithmetic mean of the entries in the input array, or \n      * <code>Double.NaN</code> if the array is empty.\n      * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n      * <p>\n      * See {@link org.apache.commons.math.stat.descriptive.moment.Mean} for\n-     * details on the computing algorithm.\n+     * details on the computing algorithm.</p>\n      * \n      * @param values the input array\n      * @return the mean of the values or Double.NaN if the array is empty\n      * the input array, or <code>Double.NaN</code> if the designated subarray\n      * is empty.\n      * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n      * <p>\n      * See {@link org.apache.commons.math.stat.descriptive.moment.Mean} for\n-     * details on the computing algorithm.\n+     * details on the computing algorithm.</p>\n      * \n      * @param values the input array\n      * @param begin index of the first array element to include\n      * Returns the geometric mean of the entries in the input array, or \n      * <code>Double.NaN</code> if the array is empty.\n      * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n      * <p>\n      * See {@link org.apache.commons.math.stat.descriptive.moment.GeometricMean}\n-     * for details on the computing algorithm.\n+     * for details on the computing algorithm.</p>\n      * \n      * @param values the input array\n      * @return the geometric mean of the values or Double.NaN if the array is empty\n      * the input array, or <code>Double.NaN</code> if the designated subarray\n      * is empty.\n      * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n      * <p>\n      * See {@link org.apache.commons.math.stat.descriptive.moment.GeometricMean}\n-     * for details on the computing algorithm.\n+     * for details on the computing algorithm.</p>\n      * \n      * @param values the input array\n      * @param begin index of the first array element to include\n      * <code>Double.NaN</code> if the array is empty.\n      * <p>\n      * See {@link org.apache.commons.math.stat.descriptive.moment.Variance} for\n-     * details on the computing algorithm.\n-     * <p>\n-     * Returns 0 for a single-value (i.e. length = 1) sample.\n-     * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * details on the computing algorithm.</p>\n+     * <p>\n+     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n      * \n      * @param values the input array\n      * @return the variance of the values or Double.NaN if the array is empty\n      * is empty.\n      * <p>\n      * See {@link org.apache.commons.math.stat.descriptive.moment.Variance} for\n-     * details on the computing algorithm.\n-     * <p>\n-     * Returns 0 for a single-value (i.e. length = 1) sample.\n+     * details on the computing algorithm.</p>\n+     * <p>\n+     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n      * <p>\n      * Throws <code>IllegalArgumentException</code> if the array is null or the\n-     * array index parameters are not valid.\n+     * array index parameters are not valid.</p>\n      * \n      * @param values the input array\n      * @param begin index of the first array element to include\n      * <code>Double.NaN</code> if the designated subarray is empty.\n      * <p>\n      * See {@link org.apache.commons.math.stat.descriptive.moment.Variance} for\n-     * details on the computing algorithm.\n+     * details on the computing algorithm.</p>\n      * <p>\n      * The formula used assumes that the supplied mean value is the arithmetic\n      * mean of the sample data, not a known population parameter.  This method\n      * is supplied only to save computation when the mean has already been\n-     * computed.\n-     * <p>\n-     * Returns 0 for a single-value (i.e. length = 1) sample.\n+     * computed.</p>\n+     * <p>\n+     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n      * <p>\n      * Throws <code>IllegalArgumentException</code> if the array is null or the\n-     * array index parameters are not valid.\n+     * array index parameters are not valid.</p>\n      * \n      * @param values the input array\n      * @param mean the precomputed mean value\n      * is empty.  \n      * <p>\n      * See {@link org.apache.commons.math.stat.descriptive.moment.Variance} for\n-     * details on the computing algorithm.   \n+     * details on the computing algorithm.</p>  \n      * <p>\n      * The formula used assumes that the supplied mean value is the arithmetic\n      * mean of the sample data, not a known population parameter.  This method\n      * is supplied only to save computation when the mean has already been\n-     * computed.\n-     * <p>\n-     * Returns 0 for a single-value (i.e. length = 1) sample.\n-     * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * computed.</p>\n+     * <p>\n+     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n      * \n      * @param values the input array\n      * @param mean the precomputed mean value\n      * Returns the maximum of the entries in the input array, or \n      * <code>Double.NaN</code> if the array is empty.\n      * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n      * <p>\n      * <ul>\n      * <li>The result is <code>NaN</code> iff all values are <code>NaN</code> \n      * (i.e. <code>NaN</code> values have no impact on the value of the statistic).</li>\n      * <li>If any of the values equals <code>Double.POSITIVE_INFINITY</code>, \n      * the result is <code>Double.POSITIVE_INFINITY.</code></li>\n-     * </ul>\n+     * </ul></p>\n      * \n      * @param values the input array\n      * @return the maximum of the values or Double.NaN if the array is empty\n      * is empty.\n      * <p>\n      * Throws <code>IllegalArgumentException</code> if the array is null or\n-     * the array index parameters are not valid.\n+     * the array index parameters are not valid.</p>\n      * <p>\n      * <ul>\n      * <li>The result is <code>NaN</code> iff all values are <code>NaN</code> \n      * (i.e. <code>NaN</code> values have no impact on the value of the statistic).</li>\n      * <li>If any of the values equals <code>Double.POSITIVE_INFINITY</code>, \n      * the result is <code>Double.POSITIVE_INFINITY.</code></li>\n-     * </ul>\n+     * </ul></p>\n      * \n      * @param values the input array\n      * @param begin index of the first array element to include\n      * Returns the minimum of the entries in the input array, or \n      * <code>Double.NaN</code> if the array is empty.\n      * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n      * <p>\n      * <ul>\n      * <li>The result is <code>NaN</code> iff all values are <code>NaN</code> \n      * (i.e. <code>NaN</code> values have no impact on the value of the statistic).</li>\n      * <li>If any of the values equals <code>Double.NEGATIVE_INFINITY</code>, \n      * the result is <code>Double.NEGATIVE_INFINITY.</code></li>\n-     * </ul> \n+     * </ul> </p>\n      * \n      * @param values the input array\n      * @return the minimum of the values or Double.NaN if the array is empty\n      * is empty.\n      * <p>\n      * Throws <code>IllegalArgumentException</code> if the array is null or\n-     * the array index parameters are not valid.\n+     * the array index parameters are not valid.</p>\n      * <p>\n      * <ul>\n      * <li>The result is <code>NaN</code> iff all values are <code>NaN</code> \n      * (i.e. <code>NaN</code> values have no impact on the value of the statistic).</li>\n      * <li>If any of the values equals <code>Double.NEGATIVE_INFINITY</code>, \n      * the result is <code>Double.NEGATIVE_INFINITY.</code></li>\n-     * </ul> \n+     * </ul></p>\n      * \n      * @param values the input array\n      * @param begin index of the first array element to include\n      * <p>\n      * <ul>\n      * <li>Returns <code>Double.NaN</code> if <code>values</code> has length \n-     * <code>0</code></li>\n+     * <code>0</code></li></p>\n      * <li>Returns (for any value of <code>p</code>) <code>values[0]</code>\n      *  if <code>values</code> has length <code>1</code></li>\n      * <li>Throws <code>IllegalArgumentException</code> if <code>values</code>\n      * is null  or p is not a valid quantile value (p must be greater than 0\n      * and less than or equal to 100)</li>\n-     * </ul>\n+     * </ul></p>\n      * <p>\n      * See {@link org.apache.commons.math.stat.descriptive.rank.Percentile} for\n-     * a description of the percentile estimation algorithm used.\n+     * a description of the percentile estimation algorithm used.</p>\n      * \n      * @param values input array of values\n      * @param p the percentile value to compute\n      *  is null , <code>begin</code> or <code>length</code> is invalid, or \n      * <code>p</code> is not a valid quantile value (p must be greater than 0\n      * and less than or equal to 100)</li>\n-     * </ul>\n+     * </ul></p>\n      * <p>\n       * See {@link org.apache.commons.math.stat.descriptive.rank.Percentile} for\n-      * a description of the percentile estimation algorithm used.\n+      * a description of the percentile estimation algorithm used.</p>\n      * \n      * @param values array of input values\n      * @param p  the percentile to compute\n--- a/src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java\n  * Abstract implementation of the {@link StorelessUnivariateStatistic} interface.\n  * <p>\n  * Provides default <code>evaluate()</code> and <code>incrementAll(double[])<code>\n- * implementations. \n+ * implementations.</p>\n  * <p>\n- * <strong>Note that these implementations are not synchronized.</strong>\n+ * <strong>Note that these implementations are not synchronized.</strong></p>\n  *\n  * @version $Revision$ $Date$\n  */\n      * <p>\n      * Note that this implementation changes the internal state of the\n      * statistic.  Its side effects are the same as invoking {@link #clear} and\n-     * then {@link #incrementAll(double[])}.\n+     * then {@link #incrementAll(double[])}.</p>\n      * <p>\n      * Implementations may override this method with a more efficient and\n      * possibly more accurate implementation that works directly with the\n-     * input array.\n+     * input array.</p>\n      * <p>\n-     * If the array is null, an IllegalArgumentException is thrown.\n+     * If the array is null, an IllegalArgumentException is thrown.</p>\n      * \n      * @see org.apache.commons.math.stat.descriptive.UnivariateStatistic#evaluate(double[])\n      */\n      * <p>\n      * Note that this implementation changes the internal state of the\n      * statistic.  Its side effects are the same as invoking {@link #clear} and\n-     * then {@link #incrementAll(double[], int, int)}.\n+     * then {@link #incrementAll(double[], int, int)}.</p>\n      * <p>\n      * Implementations may override this method with a more efficient and\n      * possibly more accurate implementation that works directly with the\n-     * input array.\n+     * input array.</p>\n      * <p>\n      * If the array is null or the index parameters are not valid, an \n-     * IllegalArgumentException is thrown.\n+     * IllegalArgumentException is thrown.</p>\n      * \n      * @see org.apache.commons.math.stat.descriptive.UnivariateStatistic#evaluate(double[], int, int)\n      */\n      * This default implementation just calls {@link #increment} in a loop over\n      * the input array.   \n      * <p>\n-     * Throws IllegalArgumentException if the input values array is null.\n+     * Throws IllegalArgumentException if the input values array is null.</p>\n      * \n      * @param values values to add\n      * @throws IllegalArgumentException if values is null\n      * This default implementation just calls {@link #increment} in a loop over\n      * the specified portion of the input array.\n      * <p>\n-     * Throws IllegalArgumentException if the input values array is null.\n+     * Throws IllegalArgumentException if the input values array is null.</p>\n      * \n      * @param values  array holding values to add\n      * @param begin   index of the first array element to add\n--- a/src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java\n  * <p>\n  * Provides a default implementation of <code>evaluate(double[]),</code> \n  * delegating to <code>evaluate(double[], int, int)</code> in the natural way.\n+ * </p>\n  * <p>\n  * Also includes a <code>test</code> method that performs generic parameter\n- * validation for the <code>evaluate</code> methods.\n- * <p>\n+ * validation for the <code>evaluate</code> methods.</p>\n  * \n  * @version $Revision$ $Date$\n  */\n      * or the indices are invalid</li>\n      * <li>returns <code>false</li> if the array is non-null, but \n      * <code>length</code> is 0.\n-     * </ul>\n+     * </ul></p>\n      *\n      * @param values the input array\n      * @param begin index of the first array element to include\n--- a/src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n      * <p>\n      * The implementation provided here follows the first estimation procedure presented\n      * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section2/prc252.htm\">here.</a>\n-     * <p>\n+     * </p><p>\n      * <strong>Preconditions</strong>:<ul>\n      * <li><code>0 &lt; p &lt; 100</code> (otherwise an \n      * <code>IllegalArgumentException</code> is thrown)</li>\n      * <li>at least one value must be stored (returns <code>Double.NaN\n      *     </code> otherwise)</li>\n-     * </ul>\n+     * </ul></p>\n      * \n      * @param p the requested percentile (scaled from 0 - 100)\n      * @return An estimate for the pth percentile of the stored data \n--- a/src/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatistic.java\n  * {@link #increment} and {@link #incrementAll(double[])} methods for adding\n  * values and updating internal state.  \n  * <p>\n- * This interface is designed to be used for calculating statistics that can be computed in \n- * one pass through the data without storing the full array of sample values.\n+ * This interface is designed to be used for calculating statistics that can be\n+ * computed in one pass through the data without storing the full array of\n+ * sample values.</p>\n  *\n  * @version $Revision$ $Date$\n  */\n--- a/src/java/org/apache/commons/math/stat/descriptive/UnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/UnivariateStatistic.java\n  * <p>\n  * Includes \"stateless\" <code>evaluate</code> methods that take\n  * <code>double[]</code> arrays as input and return the value of the statistic\n- * applied to the input values.\n+ * applied to the input values.</p>\n  * \n  * @version $Revision$ $Date$\n  */\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java\n /**\n  * Computes the first moment (arithmetic mean).  Uses the definitional formula:\n  * <p>\n- * mean = sum(x_i) / n\n+ * mean = sum(x_i) / n </p>\n  * <p>\n- * where <code>n</code> is the number of observations.\n+ * where <code>n</code> is the number of observations. </p>\n  * <p>\n  * To limit numeric errors, the value of the statistic is computed using the\n- * following recursive updating algorithm:\n+ * following recursive updating algorithm: </p>\n  * <p>\n  * <ol>\n  * <li>Initialize <code>m = </code> the first value</li>\n  * <li>For each additional value, update using <br>\n  *   <code>m = m + (new value - m) / (number of observations)</code></li>\n- * </ol>\n+ * </ol></p>\n  * <p>\n- *  Returns <code>Double.NaN</code> if the dataset is empty.\n+ *  Returns <code>Double.NaN</code> if the dataset is empty.</p>\n  * <p>\n  * <strong>Note that this implementation is not synchronized.</strong> If \n  * multiple threads access an instance of this class concurrently, and at least\n  * one of the threads invokes the <code>increment()</code> or \n- * <code>clear()</code> method, it must be synchronized externally.\n+ * <code>clear()</code> method, it must be synchronized externally.</p>\n  *\n  * @version $Revision$ $Date$\n  */\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java\n  * Computes a statistic related to the Fourth Central Moment.  Specifically,\n  * what is computed is the sum of \n  * <p>\n- * (x_i - xbar) ^ 4,\n+ * (x_i - xbar) ^ 4, </p>\n  * <p>\n  * where the x_i are the \n- * sample observations and xbar is the sample mean.\n+ * sample observations and xbar is the sample mean. </p>\n  * <p>\n- * The following recursive updating formula is used:\n+ * The following recursive updating formula is used: </p>\n  * <p>\n  * Let <ul>\n  * <li> dev = (current obs - previous mean) </li>\n  * <li> m2 = previous value of {@link ThirdMoment} </li>\n  * <li> n = number of observations (including current obs) </li>\n  * </ul>\n- * Then\n+ * Then </p>\n  * <p>\n  * new value = old value - 4 * (dev/n) * m3 + 6 * (dev/n)^2 * m2 + <br>\n- * [n^2 - 3 * (n-1)] * dev^4 * (n-1) / n^3\n+ * [n^2 - 3 * (n-1)] * dev^4 * (n-1) / n^3 </p>\n  * <p>\n  * Returns <code>Double.NaN</code> if no data values have been added and\n- * returns <code>0</code> if there is just one value in the data set.\n+ * returns <code>0</code> if there is just one value in the data set. </p>\n  * <p>\n  * <strong>Note that this implementation is not synchronized.</strong> If \n  * multiple threads access an instance of this class concurrently, and at least\n  * one of the threads invokes the <code>increment()</code> or \n- * <code>clear()</code> method, it must be synchronized externally.\n+ * <code>clear()</code> method, it must be synchronized externally. </p>\n  * \n  * @version $Revision$ $Date$\n  */\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java\n  * geometric mean </a> of the available values.\n  * <p>\n  * Uses a {@link SumOfLogs} instance to compute sum of logs and returns\n- * <code> exp( 1/n  (sum of logs) ).</code>  Therefore,\n+ * <code> exp( 1/n  (sum of logs) ).</code>  Therefore, </p>\n  * <ul>\n  * <li>If any of values are < 0, the result is <code>NaN.</code></li>\n  * <li>If all values are non-negative and less than \n  * <li>If both <code>Double.POSITIVE_INFINITY</code> and \n  * <code>Double.NEGATIVE_INFINITY</code> are among the values, the result is\n  * <code>NaN.</code></li>\n- * </ul>\n+ * </ul> </p>\n  * <p>\n  * <strong>Note that this implementation is not synchronized.</strong> If \n  * multiple threads access an instance of this class concurrently, and at least\n  * one of the threads invokes the <code>increment()</code> or \n- * <code>clear()</code> method, it must be synchronized externally.\n+ * <code>clear()</code> method, it must be synchronized externally.</p>\n  * \n  *\n  * @version $Revision$ $Date$\n      * Returns the geometric mean of the entries in the specified portion\n      * of the input array.\n      * <p>\n-     * See {@link GeometricMean} for details on the computing algorithm.\n+     * See {@link GeometricMean} for details on the computing algorithm.</p>\n      * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n      * \n      * @param values input array containing the values\n      * @param begin first array element to include\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java\n /**\n  * Computes the Kurtosis of the available values.\n  * <p>\n- * We use the following (unbiased) formula to define kurtosis:\n+ * We use the following (unbiased) formula to define kurtosis:</p>\n  *  <p>\n  *  kurtosis = { [n(n+1) / (n -1)(n - 2)(n-3)] sum[(x_i - mean)^4] / std^4 } - [3(n-1)^2 / (n-2)(n-3)]\n- *  <p>\n+ *  </p><p>\n  *  where n is the number of values, mean is the {@link Mean} and std is the\n- * {@link StandardDeviation}\n+ * {@link StandardDeviation}</p>\n  * <p>\n  *  Note that this statistic is undefined for n < 4.  <code>Double.Nan</code>\n- *  is returned when there is not sufficient data to compute the statistic.\n+ *  is returned when there is not sufficient data to compute the statistic.</p>\n  * <p>\n  * <strong>Note that this implementation is not synchronized.</strong> If \n  * multiple threads access an instance of this class concurrently, and at least\n  * one of the threads invokes the <code>increment()</code> or \n- * <code>clear()</code> method, it must be synchronized externally.\n+ * <code>clear()</code> method, it must be synchronized externally.</p>\n  * \n  * @version $Revision$ $Date$\n  */\n      * Determines whether or not this statistic can be incremented or cleared.\n      * <p>\n      * Statistics based on (constructed from) external moments cannot\n-     * be incremented or cleared.\n+     * be incremented or cleared.</p>\n     */\n     protected boolean incMoment;\n \n      * Returns the kurtosis of the entries in the specified portion of the\n      * input array.  \n      * <p>\n-     * See {@link Kurtosis} for details on the computing algorithm.\n+     * See {@link Kurtosis} for details on the computing algorithm.</p>\n      * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n      * \n      * @param values the input array\n      * @param begin index of the first array element to include\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n      * Determines whether or not this statistic can be incremented or cleared.\n      * <p>\n      * Statistics based on (constructed from) external moments cannot\n-     * be incremented or cleared.\n+     * be incremented or cleared.</p>\n      */\n     protected boolean incMoment;\n \n      * the input array, or <code>Double.NaN</code> if the designated subarray\n      * is empty.\n      * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n      * <p>\n-     * See {@link Mean} for details on the computing algorithm.\n+     * See {@link Mean} for details on the computing algorithm.</p>\n      * \n      * @param values the input array\n      * @param begin index of the first array element to include\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java\n  * Computes a statistic related to the Second Central Moment.  Specifically,\n  * what is computed is the sum of squared deviations from the sample mean.\n  * <p>\n- * The following recursive updating formula is used:\n+ * The following recursive updating formula is used:</p>\n  * <p>\n  * Let <ul>\n  * <li> dev = (current obs - previous mean) </li>\n  * <li> n = number of observations (including current obs) </li>\n  * </ul>\n- * Then\n+ * Then</p>\n  * <p>\n- * new value = old value + dev^2 * (n -1) / n.\n+ * new value = old value + dev^2 * (n -1) / n.</p>\n  * <p>\n  * Returns <code>Double.NaN</code> if no data values have been added and\n- * returns <code>0</code> if there is just one value in the data set.\n+ * returns <code>0</code> if there is just one value in the data set.</p>\n  * <p>\n  * <strong>Note that this implementation is not synchronized.</strong> If \n  * multiple threads access an instance of this class concurrently, and at least\n  * one of the threads invokes the <code>increment()</code> or \n- * <code>clear()</code> method, it must be synchronized externally.\n+ * <code>clear()</code> method, it must be synchronized externally.</p>\n  * \n  * @version $Revision$ $Date$\n  */\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java\n /**\n  * Computes the skewness of the available values.\n  * <p>\n- * We use the following (unbiased) formula to define skewness:\n+ * We use the following (unbiased) formula to define skewness:</p>\n  * <p>\n- * skewness = [n / (n -1) (n - 2)] sum[(x_i - mean)^3] / std^3\n+ * skewness = [n / (n -1) (n - 2)] sum[(x_i - mean)^3] / std^3 </p>\n  * <p>\n  * where n is the number of values, mean is the {@link Mean} and std is the \n- * {@link StandardDeviation}\n+ * {@link StandardDeviation} </p>\n  * <p>\n  * <strong>Note that this implementation is not synchronized.</strong> If \n  * multiple threads access an instance of this class concurrently, and at least\n  * one of the threads invokes the <code>increment()</code> or \n- * <code>clear()</code> method, it must be synchronized externally.\n+ * <code>clear()</code> method, it must be synchronized externally. </p>\n  * \n  * @version $Revision$ $Date$\n  */\n      * Determines whether or not this statistic can be incremented or cleared.\n      * <p>\n      * Statistics based on (constructed from) external moments cannot\n-     * be incremented or cleared.\n+     * be incremented or cleared.</p>\n     */\n     protected boolean incMoment;\n \n     /**\n      * Returns the value of the statistic based on the values that have been added.\n      * <p>\n-     * See {@link Skewness} for the definition used in the computation.\n+     * See {@link Skewness} for the definition used in the computation.</p>\n      * \n      * @return the skewness of the available values.\n      */\n      * Returns the Skewness of the entries in the specifed portion of the\n      * input array.\n      * <p>\n-     * See {@link Skewness} for the definition used in the computation.\n+     * See {@link Skewness} for the definition used in the computation.</p>\n      * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n      * \n      * @param values the input array\n      * @param begin the index of the first array element to include\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java\n  * <strong>Note that this implementation is not synchronized.</strong> If \n  * multiple threads access an instance of this class concurrently, and at least\n  * one of the threads invokes the <code>increment()</code> or \n- * <code>clear()</code> method, it must be synchronized externally.\n+ * <code>clear()</code> method, it must be synchronized externally.</p>\n  * \n  * @version $Revision$ $Date$\n  */\n      * Returns the Standard Deviation of the entries in the input array, or \n      * <code>Double.NaN</code> if the array is empty.\n      * <p>\n-     * Returns 0 for a single-value (i.e. length = 1) sample.\n-     * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.\n-     * <p>\n-     * Does not change the internal state of the statistic.\n+     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n+     * <p>\n+     * Does not change the internal state of the statistic.</p>\n      * \n      * @param values the input array\n      * @return the standard deviation of the values or Double.NaN if length = 0\n      * the input array, or <code>Double.NaN</code> if the designated subarray\n      * is empty.\n      * <p>\n-     * Returns 0 for a single-value (i.e. length = 1) sample.\n-     * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.\n-     * <p>\n-     * Does not change the internal state of the statistic.\n+     * Returns 0 for a single-value (i.e. length = 1) sample. </p>\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n+     * <p>\n+     * Does not change the internal state of the statistic.</p>\n      * \n      * @param values the input array\n      * @param begin index of the first array element to include\n      * the input array, using the precomputed mean value.  Returns\n      * <code>Double.NaN</code> if the designated subarray is empty.\n      * <p>\n-     * Returns 0 for a single-value (i.e. length = 1) sample.\n+     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n      * <p>\n      * The formula used assumes that the supplied mean value is the arithmetic\n      * mean of the sample data, not a known population parameter.  This method\n      * is supplied only to save computation when the mean has already been\n-     * computed.\n-     * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.\n-     * <p>\n-     * Does not change the internal state of the statistic.\n+     * computed.</p>\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n+     * <p>\n+     * Does not change the internal state of the statistic.</p>\n      * \n      * @param values the input array\n      * @param mean the precomputed mean value\n      * the precomputed mean value.  Returns\n      * <code>Double.NaN</code> if the designated subarray is empty.\n      * <p>\n-     * Returns 0 for a single-value (i.e. length = 1) sample.\n+     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n      * <p>\n      * The formula used assumes that the supplied mean value is the arithmetic\n      * mean of the sample data, not a known population parameter.  This method\n      * is supplied only to save computation when the mean has already been\n-     * computed.\n-     * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.\n-     * <p>\n-     * Does not change the internal state of the statistic.\n+     * computed.</p>\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n+     * <p>\n+     * Does not change the internal state of the statistic.</p>\n      * \n      * @param values the input array\n      * @param mean the precomputed mean value\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java\n  * Computes a statistic related to the Third Central Moment.  Specifically,\n  * what is computed is the sum of cubed deviations from the sample mean.\n  * <p>\n- * The following recursive updating formula is used:\n+ * The following recursive updating formula is used:</p>\n  * <p>\n  * Let <ul>\n  * <li> dev = (current obs - previous mean) </li>\n  * <li> m2 = previous value of {@link SecondMoment} </li>\n  * <li> n = number of observations (including current obs) </li>\n  * </ul>\n- * Then\n+ * Then</p>\n  * <p>\n- * new value = old value - 3 * (dev/n) * m2 + (n-1) * (n -2) * (dev^3/n^2)\n+ * new value = old value - 3 * (dev/n) * m2 + (n-1) * (n -2) * (dev^3/n^2)</p>\n  * <p>\n  * Returns <code>Double.NaN</code> if no data values have been added and\n- * returns <code>0</code> if there is just one value in the data set.\n+ * returns <code>0</code> if there is just one value in the data set.</p>\n  * <p>\n  * <strong>Note that this implementation is not synchronized.</strong> If \n  * multiple threads access an instance of this class concurrently, and at least\n  * one of the threads invokes the <code>increment()</code> or \n- * <code>clear()</code> method, it must be synchronized externally.\n+ * <code>clear()</code> method, it must be synchronized externally.</p>\n  * \n  * @version $Revision$ $Date$\n  */\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n  * Computes the variance of the available values.  By default, the unbiased\n  * \"sample variance\" definitional formula is used: \n  * <p>\n- * variance = sum((x_i - mean)^2) / (n - 1)\n+ * variance = sum((x_i - mean)^2) / (n - 1) </p>\n  * <p>\n  * where mean is the {@link Mean} and <code>n</code> is the number\n- * of sample observations.  \n+ * of sample observations.</p>\n  * <p>\n  * The definitional formula does not have good numerical properties, so\n  * this implementation does not compute the statistic using the definitional\n  * <code>incrementAll</code> and then executing <code>getResult</code> will\n  * sometimes give a different, less accurate, result than executing \n  * <code>evaluate</code> with the full array of values. The former approach\n- * should only be used when the full array of values is not available.\n+ * should only be used when the full array of values is not available.</p>\n  * <p>\n  * The \"population variance\"  ( sum((x_i - mean)^2) / n ) can also\n  * be computed using this statistic.  The <code>isBiasCorrected</code>\n  * property determines whether the \"population\" or \"sample\" value is\n  * returned by the <code>evaluate</code> and <code>getResult</code> methods.\n  * To compute population variances, set this property to <code>false.</code>\n+ * </p>\n  * <p>\n  * <strong>Note that this implementation is not synchronized.</strong> If \n  * multiple threads access an instance of this class concurrently, and at least\n      * Returns the variance of the entries in the input array, or \n      * <code>Double.NaN</code> if the array is empty.\n      * <p>\n-     * See {@link Variance} for details on the computing algorithm.\n-     * <p>\n-     * Returns 0 for a single-value (i.e. length = 1) sample.\n-     * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.\n-     * <p>\n-     * Does not change the internal state of the statistic.\n+     * See {@link Variance} for details on the computing algorithm.</p>\n+     * <p>\n+     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n+     * <p>\n+     * Does not change the internal state of the statistic.</p>\n      * \n      * @param values the input array\n      * @return the variance of the values or Double.NaN if length = 0\n      * the input array, or <code>Double.NaN</code> if the designated subarray\n      * is empty.\n      * <p>\n-     * See {@link Variance} for details on the computing algorithm.\n-     * <p>\n-     * Returns 0 for a single-value (i.e. length = 1) sample.\n-     * <p>\n-     * Does not change the internal state of the statistic.\n-     * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * See {@link Variance} for details on the computing algorithm.</p>\n+     * <p>\n+     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n+     * <p>\n+     * Does not change the internal state of the statistic.</p>\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n      * \n      * @param values the input array\n      * @param begin index of the first array element to include\n      * the input array, using the precomputed mean value.  Returns \n      * <code>Double.NaN</code> if the designated subarray is empty.\n      * <p>\n-     * See {@link Variance} for details on the computing algorithm.\n+     * See {@link Variance} for details on the computing algorithm.</p>\n      * <p>\n      * The formula used assumes that the supplied mean value is the arithmetic\n      * mean of the sample data, not a known population parameter.  This method\n      * is supplied only to save computation when the mean has already been\n-     * computed.\n-     * <p>\n-     * Returns 0 for a single-value (i.e. length = 1) sample.\n-     * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.\n-     * <p>\n-     * Does not change the internal state of the statistic.\n+     * computed.</p>\n+     * <p>\n+     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n+     * <p>\n+     * Does not change the internal state of the statistic.</p>\n      * \n      * @param values the input array\n      * @param mean the precomputed mean value\n      * precomputed mean value.  Returns <code>Double.NaN</code> if the array\n      * is empty.\n      * <p>\n-     * See {@link Variance} for details on the computing algorithm.\n+     * See {@link Variance} for details on the computing algorithm.</p>\n      * <p>\n      * If <code>isBiasCorrected</code> is <code>true</code> the formula used\n      * assumes that the supplied mean value is the arithmetic mean of the\n      * sample data, not a known population parameter.  If the mean is a known\n      * population parameter, or if the \"population\" version of the variance is\n      * desired, set <code>isBiasCorrected</code> to <code>false</code> before\n-     * invoking this method.\n-     * <p>\n-     * Returns 0 for a single-value (i.e. length = 1) sample.\n-     * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.\n-     * <p>\n-     * Does not change the internal state of the statistic.\n+     * invoking this method.</p>\n+     * <p>\n+     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n+     * <p>\n+     * Does not change the internal state of the statistic.</p>\n      * \n      * @param values the input array\n      * @param mean the precomputed mean value\n--- a/src/java/org/apache/commons/math/stat/descriptive/rank/Max.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/rank/Max.java\n  * (i.e. <code>NaN</code> values have no impact on the value of the statistic).</li>\n  * <li>If any of the values equals <code>Double.POSITIVE_INFINITY</code>, \n  * the result is <code>Double.POSITIVE_INFINITY.</code></li>\n- * </ul>\n+ * </ul></p>\n * <p>\n  * <strong>Note that this implementation is not synchronized.</strong> If \n  * multiple threads access an instance of this class concurrently, and at least\n  * one of the threads invokes the <code>increment()</code> or \n- * <code>clear()</code> method, it must be synchronized externally.\n+ * <code>clear()</code> method, it must be synchronized externally.</p>\n  * \n  * @version $Revision$ $Date$\n  */\n     }\n \n     /**\n-         * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#clear()\n-         */\n+     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#clear()\n+     */\n     public void clear() {\n         value = Double.NaN;\n         n = 0;\n      * is empty.\n      * <p>\n      * Throws <code>IllegalArgumentException</code> if the array is null or\n-     * the array index parameters are not valid.\n+     * the array index parameters are not valid.</p>\n      * <p>\n      * <ul>\n      * <li>The result is <code>NaN</code> iff all values are <code>NaN</code> \n      * (i.e. <code>NaN</code> values have no impact on the value of the statistic).</li>\n      * <li>If any of the values equals <code>Double.POSITIVE_INFINITY</code>, \n      * the result is <code>Double.POSITIVE_INFINITY.</code></li>\n-     * </ul>\n+     * </ul></p>\n      * \n      * @param values the input array\n      * @param begin index of the first array element to include\n--- a/src/java/org/apache/commons/math/stat/descriptive/rank/Median.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/rank/Median.java\n  * <strong>Note that this implementation is not synchronized.</strong> If \n  * multiple threads access an instance of this class concurrently, and at least\n  * one of the threads invokes the <code>increment()</code> or \n- * <code>clear()</code> method, it must be synchronized externally.\n+ * <code>clear()</code> method, it must be synchronized externally.</p>\n  * \n  * @version $Revision$ $Date$\n  */\n--- a/src/java/org/apache/commons/math/stat/descriptive/rank/Min.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/rank/Min.java\n  * (i.e. <code>NaN</code> values have no impact on the value of the statistic).</li>\n  * <li>If any of the values equals <code>Double.NEGATIVE_INFINITY</code>, \n  * the result is <code>Double.NEGATIVE_INFINITY.</code></li>\n- * </ul> \n+ * </ul></p>\n  * <p>\n  * <strong>Note that this implementation is not synchronized.</strong> If \n  * multiple threads access an instance of this class concurrently, and at least\n  * one of the threads invokes the <code>increment()</code> or \n- * <code>clear()</code> method, it must be synchronized externally.\n+ * <code>clear()</code> method, it must be synchronized externally.</p>\n  * \n  * @version $Revision$ $Date$\n  */\n      * is empty.\n      * <p>\n      * Throws <code>IllegalArgumentException</code> if the array is null or\n-     * the array index parameters are not valid.\n+     * the array index parameters are not valid.</p>\n      * <p>\n      * <ul>\n      * <li>The result is <code>NaN</code> iff all values are <code>NaN</code> \n      * (i.e. <code>NaN</code> values have no impact on the value of the statistic).</li>\n      * <li>If any of the values equals <code>Double.NEGATIVE_INFINITY</code>, \n      * the result is <code>Double.NEGATIVE_INFINITY.</code></li>\n-     * </ul> \n+     * </ul> </p>\n      * \n      * @param values the input array\n      * @param begin index of the first array element to include\n--- a/src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java\n  * <code>floor(pos)</code> in the array and let <code>upper</code> be the\n  * next element in the array.  Return <code>lower + d * (upper - lower)</code>\n  * </li>\n- * </ol>\n+ * </ol></p>\n  * <p>\n  * To compute percentiles, the data must be (totally) ordered.  Input arrays\n  * are copied and then sorted using  {@link java.util.Arrays#sort(double[])}.\n  * <code>Double.NaN</code> larger than any other value (including \n  * <code>Double.POSITIVE_INFINITY</code>).  Therefore, for example, the median\n  * (50th percentile) of  \n- * <code>{0, 1, 2, 3, 4, Double.NaN}</code> evaluates to <code>2.5.</code>  \n+ * <code>{0, 1, 2, 3, 4, Double.NaN}</code> evaluates to <code>2.5.</code></p>\n  * <p>\n  * Since percentile estimation usually involves interpolation between array \n  * elements, arrays containing  <code>NaN</code> or infinite values will often\n- * result in <code>NaN<code> or infinite values returned.\n+ * result in <code>NaN<code> or infinite values returned.</p>\n  * <p>\n  * <strong>Note that this implementation is not synchronized.</strong> If \n  * multiple threads access an instance of this class concurrently, and at least\n  * one of the threads invokes the <code>increment()</code> or \n- * <code>clear()</code> method, it must be synchronized externally.\n+ * <code>clear()</code> method, it must be synchronized externally.</p>\n  * \n  * @version $Revision$ $Date$\n  */\n      * in the <code>values</code> array.\n      * <p>\n      * Calls to this method do not modify the internal <code>quantile</code>\n-     * state of this statistic.\n+     * state of this statistic.</p>\n      * <p>\n      * <ul>\n      * <li>Returns <code>Double.NaN</code> if <code>values</code> has length \n      * <li>Throws <code>IllegalArgumentException</code> if <code>values</code>\n      * is null or p is not a valid quantile value (p must be greater than 0\n      * and less than or equal to 100) </li>\n-     * </ul>\n+     * </ul></p>\n      * <p>\n      * See {@link Percentile} for a description of the percentile estimation\n-     * algorithm used.\n+     * algorithm used.</p>\n      * \n      * @param values input array of values\n      * @param p the percentile value to compute\n      * <li>Throws <code>IllegalArgumentException</code> if <code>values</code>\n      * is null,  or <code>start</code> or <code>length</code> \n      * is invalid</li>\n-     * </ul>\n+     * </ul></p>\n      * <p>\n      * See {@link Percentile} for a description of the percentile estimation\n-     * algorithm used.\n+     * algorithm used.</p>\n      * \n      * @param values the input array\n      * @param start index of the first array element to include\n      * values.\n      * <p>\n      * Calls to this method do not modify the internal <code>quantile</code>\n-     * state of this statistic.\n+     * state of this statistic.</p>\n      * <p>\n      * <ul>\n      * <li>Returns <code>Double.NaN</code> if <code>length = 0</code></li>\n      *  is null , <code>begin</code> or <code>length</code> is invalid, or \n      * <code>p</code> is not a valid quantile value (p must be greater than 0\n      * and less than or equal to 100)</li>\n-     * </ul>\n-     * <p>\n-      * See {@link Percentile} for a description of the percentile estimation\n-      * algorithm used.\n+     * </ul></p>\n+     * <p>\n+     * See {@link Percentile} for a description of the percentile estimation\n+     * algorithm used.</p>\n      * \n      * @param values array of input values\n      * @param p  the percentile to compute\n--- a/src/java/org/apache/commons/math/stat/descriptive/summary/Product.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/summary/Product.java\n  * Returns the product of the available values.\n  * <p>\n  * If there are no values in the dataset, or any of the values are \n- * <code>NaN</code>, then <code>NaN</code> is returned.  \n-* <p>\n+ * <code>NaN</code>, then <code>NaN</code> is returned.</p>\n+ * <p>\n  * <strong>Note that this implementation is not synchronized.</strong> If \n  * multiple threads access an instance of this class concurrently, and at least\n  * one of the threads invokes the <code>increment()</code> or \n- * <code>clear()</code> method, it must be synchronized externally.\n+ * <code>clear()</code> method, it must be synchronized externally.</p>\n  * \n  * @version $Revision$ $Date$\n  */\n      * the input array, or <code>Double.NaN</code> if the designated subarray\n      * is empty.\n      * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n      * \n      * @param values the input array\n      * @param begin index of the first array element to include\n--- a/src/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n   * Returns the sum of the available values.\n  * <p>\n  * If there are no values in the dataset, or any of the values are \n- * <code>NaN</code>, then <code>NaN</code> is returned.  \n+ * <code>NaN</code>, then <code>NaN</code> is returned.</p>\n  * <p>\n  * <strong>Note that this implementation is not synchronized.</strong> If \n  * multiple threads access an instance of this class concurrently, and at least\n  * one of the threads invokes the <code>increment()</code> or \n- * <code>clear()</code> method, it must be synchronized externally.\n+ * <code>clear()</code> method, it must be synchronized externally.</p>\n  * \n  * @version $Revision$ $Date$\n  */\n      * the input array, or <code>Double.NaN</code> if the designated subarray\n      * is empty.\n      * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n      * \n      * @param values the input array\n      * @param begin index of the first array element to include\n--- a/src/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java\n  * <li>If both <code>Double.POSITIVE_INFINITY</code> and \n  * <code>Double.NEGATIVE_INFINITY</code> are among the values, the result is\n  * <code>NaN.</code></li>\n- * </ul>\n+ * </ul></p>\n  * <p>\n  * <strong>Note that this implementation is not synchronized.</strong> If \n  * multiple threads access an instance of this class concurrently, and at least\n  * one of the threads invokes the <code>increment()</code> or \n- * <code>clear()</code> method, it must be synchronized externally.\n+ * <code>clear()</code> method, it must be synchronized externally.</p>\n  * \n  * @version $Revision$ $Date$\n  */\n      * the input array, or <code>Double.NaN</code> if the designated subarray\n      * is empty.\n      * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n      * <p>\n-     * See {@link SumOfLogs}.\n+     * See {@link SumOfLogs}.</p>\n      * \n      * @param values the input array\n      * @param begin index of the first array element to include\n--- a/src/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java\n  * Returns the sum of the squares of the available values.\n  * <p>\n  * If there are no values in the dataset, or any of the values are \n- * <code>NaN</code>, then <code>NaN</code> is returned.  \n+ * <code>NaN</code>, then <code>NaN</code> is returned.</p>\n  * <p>\n  * <strong>Note that this implementation is not synchronized.</strong> If \n  * multiple threads access an instance of this class concurrently, and at least\n  * one of the threads invokes the <code>increment()</code> or \n- * <code>clear()</code> method, it must be synchronized externally.\n+ * <code>clear()</code> method, it must be synchronized externally.</p>\n  * \n  * @version $Revision$ $Date$\n  */\n      * the input array, or <code>Double.NaN</code> if the designated subarray\n      * is empty.\n      * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n      * \n      * @param values the input array\n      * @param begin index of the first array element to include\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTest.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTest.java\n      * frequency counts. \n      * <p>\n      * This statistic can be used to perform a Chi-Square test evaluating the null hypothesis that\n-     *  the observed counts follow the expected distribution.\n+     *  the observed counts follow the expected distribution.</p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>Expected counts must all be positive.  \n      * </li>\n      * <li>The observed and expected arrays must have the same length and\n      * their common length must be at least 2.  \n-     * </li></ul><p>\n-     * If any of the preconditions are not met, an \n-     * <code>IllegalArgumentException</code> is thrown.\n+     * </li></ul></p><p>\n+     * If any of the preconditions are not met, an \n+     * <code>IllegalArgumentException</code> is thrown.</p>\n      *\n      * @param observed array of observed frequency counts\n      * @param expected array of expected frequency counts\n      * <p>\n      * The number returned is the smallest significance level at which one can reject \n      * the null hypothesis that the observed counts conform to the frequency distribution \n-     * described by the expected counts. \n+     * described by the expected counts.</p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>Expected counts must all be positive.  \n      * </li>\n      * <li>The observed and expected arrays must have the same length and\n      * their common length must be at least 2.  \n-     * </li></ul><p>\n-     * If any of the preconditions are not met, an \n-     * <code>IllegalArgumentException</code> is thrown.\n+     * </li></ul></p><p>\n+     * If any of the preconditions are not met, an \n+     * <code>IllegalArgumentException</code> is thrown.</p>\n      *\n      * @param observed array of observed frequency counts\n      * @param expected array of expected frequency counts\n      * <p>\n      * <strong>Example:</strong><br>\n      * To test the hypothesis that <code>observed</code> follows \n-     * <code>expected</code> at the 99% level, use <p>\n-     * <code>chiSquareTest(expected, observed, 0.01) </code>\n+     * <code>expected</code> at the 99% level, use </p><p>\n+     * <code>chiSquareTest(expected, observed, 0.01) </code></p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>Expected counts must all be positive.  \n      * <li>The observed and expected arrays must have the same length and\n      * their common length must be at least 2.  \n      * <li> <code> 0 < alpha < 0.5 </code>\n-     * </li></ul><p>\n-     * If any of the preconditions are not met, an \n-     * <code>IllegalArgumentException</code> is thrown.\n+     * </li></ul></p><p>\n+     * If any of the preconditions are not met, an \n+     * <code>IllegalArgumentException</code> is thrown.</p>\n      *\n      * @param observed array of observed frequency counts\n      * @param expected array of expected frequency counts\n      *  chi-square test of independence</a> based on the input <code>counts</code>\n      *  array, viewed as a two-way table.  \n      * <p>\n-     * The rows of the 2-way table are <code>count[0], ... , count[count.length - 1] </code>\n+     * The rows of the 2-way table are \n+     * <code>count[0], ... , count[count.length - 1] </code></p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>All counts must be >= 0.  \n      * </li>\n-     * <li>The count array must be rectangular (i.e. all count[i] subarrays must have the same length). \n-     * </li>\n-     * <li>The 2-way table represented by <code>counts</code> must have at least 2 columns and\n-     *        at least 2 rows.\n-     * </li>\n-     * </li></ul><p>\n-     * If any of the preconditions are not met, an \n-     * <code>IllegalArgumentException</code> is thrown.\n+     * <li>The count array must be rectangular (i.e. all count[i] subarrays\n+     *  must have the same length). \n+     * </li>\n+     * <li>The 2-way table represented by <code>counts</code> must have at\n+     *  least 2 columns and at least 2 rows.\n+     * </li>\n+     * </li></ul></p><p>\n+     * If any of the preconditions are not met, an \n+     * <code>IllegalArgumentException</code> is thrown.</p>\n      *\n      * @param counts array representation of 2-way table\n      * @return chiSquare statistic\n      * chi-square test of independence</a> based on the input <code>counts</code>\n      * array, viewed as a two-way table.  \n      * <p>\n-     * The rows of the 2-way table are <code>count[0], ... , count[count.length - 1] </code>\n+     * The rows of the 2-way table are \n+     * <code>count[0], ... , count[count.length - 1] </code></p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>All counts must be >= 0.  \n      * <li>The 2-way table represented by <code>counts</code> must have at least 2 columns and\n      *        at least 2 rows.\n      * </li>\n-     * </li></ul><p>\n-     * If any of the preconditions are not met, an \n-     * <code>IllegalArgumentException</code> is thrown.\n+     * </li></ul></p><p>\n+     * If any of the preconditions are not met, an \n+     * <code>IllegalArgumentException</code> is thrown.</p>\n      *\n      * @param counts array representation of 2-way table\n      * @return p-value\n      * with significance level <code>alpha</code>.  Returns true iff the null hypothesis can be rejected\n      * with 100 * (1 - alpha) percent confidence.\n      * <p>\n-     * The rows of the 2-way table are <code>count[0], ... , count[count.length - 1] </code>\n+     * The rows of the 2-way table are \n+     * <code>count[0], ... , count[count.length - 1] </code></p>\n      * <p>\n      * <strong>Example:</strong><br>\n-     * To test the null hypothesis that the counts in <code>count[0], ... , count[count.length - 1] </code>\n-     *  all correspond to the same underlying probability distribution at the 99% level, use <p>\n-     * <code>chiSquareTest(counts, 0.01) </code>\n+     * To test the null hypothesis that the counts in\n+     * <code>count[0], ... , count[count.length - 1] </code>\n+     *  all correspond to the same underlying probability distribution at the 99% level, use </p><p>\n+     * <code>chiSquareTest(counts, 0.01) </code></p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>All counts must be >= 0.  \n      * <li>The 2-way table represented by <code>counts</code> must have at least 2 columns and\n      *        at least 2 rows.\n      * </li>\n-     * </li></ul><p>\n-     * If any of the preconditions are not met, an \n-     * <code>IllegalArgumentException</code> is thrown.\n+     * </li></ul></p><p>\n+     * If any of the preconditions are not met, an \n+     * <code>IllegalArgumentException</code> is thrown.</p>\n      *\n      * @param counts array representation of 2-way table\n      * @param alpha significance level of the test\n--- a/src/java/org/apache/commons/math/stat/inference/TTest.java\n+++ b/src/java/org/apache/commons/math/stat/inference/TTest.java\n  * <li>Homoscedastic (equal variance assumption) or heteroscedastic\n  * (for two sample tests)</li>\n  * <li>Fixed significance level (boolean-valued) or returning p-values.\n- * </li></ul>\n+ * </li></ul></p>\n  * <p>\n  * Test statistics are available for all tests.  Methods including \"Test\" in\n  * in their names perform tests, all other methods return t-statistics.  Among\n  * the \"Test\" methods, <code>double-</code>valued methods return p-values;\n  * <code>boolean-</code>valued methods perform fixed significance level tests.\n  * Significance levels are always specified as numbers between 0 and 0.5\n- * (e.g. tests at the 95% level  use <code>alpha=0.05</code>).\n+ * (e.g. tests at the 95% level  use <code>alpha=0.05</code>).</p>\n  * <p>\n  * Input to tests can be either <code>double[]</code> arrays or \n- * {@link StatisticalSummary} instances.\n+ * {@link StatisticalSummary} instances.</p>\n  * \n  *\n  * @version $Revision$ $Date$ \n      * <strong>Preconditions</strong>: <ul>\n      * <li>The input arrays must have the same length and their common length\n      * must be at least 2.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n      * at which one can reject the null hypothesis that the mean of the paired\n      * differences is 0 in favor of the two-sided alternative that the mean paired \n      * difference is not equal to 0. For a one-sided test, divide the returned \n-     * value by 2.\n+     * value by 2.</p>\n      * <p>\n      * This test is equivalent to a one-sample t-test computed using\n      * {@link #tTest(double, double[])} with <code>mu = 0</code> and the sample\n      * array consisting of the signed differences between corresponding elements of \n-     * <code>sample1</code> and <code>sample2.</code>\n+     * <code>sample1</code> and <code>sample2.</code></p>\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the p-value depends on the assumptions of the parametric\n      * t-test procedure, as discussed \n      * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n-     * here</a>\n+     * here</a></p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The input array lengths must be the same and their common length must\n      * be at least 2.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n      * <p>\n      * Returns <code>true</code> iff the null hypothesis can be rejected with \n      * confidence <code>1 - alpha</code>.  To perform a 1-sided test, use \n-     * <code>alpha * 2</code>\n+     * <code>alpha * 2</code></p>\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the test depends on the assumptions of the parametric\n      * t-test procedure, as discussed \n      * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n-     * here</a>\n+     * here</a></p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The input array lengths must be the same and their common length \n      * must be at least 2.\n      * </li>\n      * <li> <code> 0 < alpha < 0.5 </code>\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n      * t statistic </a> given observed values and a comparison constant.\n      * <p>\n      * This statistic can be used to perform a one sample t-test for the mean.\n-     * <p>\n+     * </p><p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The observed array length must be at least 2.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param mu comparison constant\n      * @param observed array of values\n      * <code>sampleStats</code> to <code>mu</code>.\n      * <p>\n      * This statistic can be used to perform a one sample t-test for the mean.\n-     * <p>\n+     * </p><p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li><code>observed.getN() > = 2</code>.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param mu comparison constant\n      * @param sampleStats DescriptiveStatistics holding sample summary statitstics\n      * equal variances hypothesis, use {@link #t(double[], double[])}.\n      * <p>\n      * This statistic can be used to perform a (homoscedastic) two-sample\n-     * t-test to compare sample means.   \n-     * <p>\n-     * The t-statisitc is\n+     * t-test to compare sample means.</p>\n+     * <p>\n+     * The t-statisitc is</p>\n      * <p>\n      * &nbsp;&nbsp;<code>  t = (m1 - m2) / (sqrt(1/n1 +1/n2) sqrt(var))</code>\n-     * <p>\n+     * </p><p>\n      * where <strong><code>n1</code></strong> is the size of first sample; \n      * <strong><code> n2</code></strong> is the size of second sample; \n      * <strong><code> m1</code></strong> is the mean of first sample;  \n      * <strong><code> m2</code></strong> is the mean of second sample</li>\n      * </ul>\n      * and <strong><code>var</code></strong> is the pooled variance estimate:\n-     * <p>\n+     * </p><p>\n      * <code>var = sqrt(((n1 - 1)var1 + (n2 - 1)var2) / ((n1-1) + (n2-1)))</code>\n-     * <p> \n+     * </p><p> \n      * with <strong><code>var1<code></strong> the variance of the first sample and\n      * <strong><code>var2</code></strong> the variance of the second sample.\n-     * <p>\n+     * </p><p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The observed array lengths must both be at least 2.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n      * variances, use {@link #homoscedasticT(double[], double[])}.\n      * <p>\n      * This statistic can be used to perform a two-sample t-test to compare\n-     * sample means.\n-     * <p>\n-     * The t-statisitc is\n+     * sample means.</p>\n+     * <p>\n+     * The t-statisitc is</p>\n      * <p>\n      * &nbsp;&nbsp; <code>  t = (m1 - m2) / sqrt(var1/n1 + var2/n2)</code>\n-     * <p>\n+     * </p><p>\n      *  where <strong><code>n1</code></strong> is the size of the first sample\n      * <strong><code> n2</code></strong> is the size of the second sample; \n      * <strong><code> m1</code></strong> is the mean of the first sample;  \n      * <strong><code> m2</code></strong> is the mean of the second sample;\n      * <strong><code> var1</code></strong> is the variance of the first sample;\n      * <strong><code> var2</code></strong> is the variance of the second sample;  \n-     * <p>\n+     * </p><p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The observed array lengths must both be at least 2.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n      * compute a t-statistic under the equal variances assumption.\n      * <p>\n      * This statistic can be used to perform a two-sample t-test to compare\n-     * sample means.\n-     * <p>\n-      * The returned  t-statisitc is\n+     * sample means.</p>\n+     * <p>\n+      * The returned  t-statisitc is</p>\n      * <p>\n      * &nbsp;&nbsp; <code>  t = (m1 - m2) / sqrt(var1/n1 + var2/n2)</code>\n-     * <p>\n+     * </p><p>\n      * where <strong><code>n1</code></strong> is the size of the first sample; \n      * <strong><code> n2</code></strong> is the size of the second sample; \n      * <strong><code> m1</code></strong> is the mean of the first sample;  \n      * <strong><code> m2</code></strong> is the mean of the second sample\n      * <strong><code> var1</code></strong> is the variance of the first sample;  \n      * <strong><code> var2</code></strong> is the variance of the second sample\n-     * <p>\n+     * </p><p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The datasets described by the two Univariates must each contain\n      * at least 2 observations.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param sampleStats1 StatisticalSummary describing data from the first sample\n      * @param sampleStats2 StatisticalSummary describing data from the second sample\n      * {@link #t(StatisticalSummary, StatisticalSummary)}.\n      * <p>\n      * This statistic can be used to perform a (homoscedastic) two-sample\n-     * t-test to compare sample means.\n-     * <p>\n-     * The t-statisitc returned is\n+     * t-test to compare sample means.</p>\n+     * <p>\n+     * The t-statisitc returned is</p>\n      * <p>\n      * &nbsp;&nbsp;<code>  t = (m1 - m2) / (sqrt(1/n1 +1/n2) sqrt(var))</code>\n-     * <p>\n+     * </p><p>\n      * where <strong><code>n1</code></strong> is the size of first sample; \n      * <strong><code> n2</code></strong> is the size of second sample; \n      * <strong><code> m1</code></strong> is the mean of first sample;  \n      * <strong><code> m2</code></strong> is the mean of second sample\n      * and <strong><code>var</code></strong> is the pooled variance estimate:\n-     * <p>\n+     * </p><p>\n      * <code>var = sqrt(((n1 - 1)var1 + (n2 - 1)var2) / ((n1-1) + (n2-1)))</code>\n-     * <p> \n+     * </p><p> \n      * with <strong><code>var1<code></strong> the variance of the first sample and\n      * <strong><code>var2</code></strong> the variance of the second sample.\n-     * <p>\n+     * </p><p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The datasets described by the two Univariates must each contain\n      * at least 2 observations.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param sampleStats1 StatisticalSummary describing data from the first sample\n      * @param sampleStats2 StatisticalSummary describing data from the second sample\n      * at which one can reject the null hypothesis that the mean equals \n      * <code>mu</code> in favor of the two-sided alternative that the mean\n      * is different from <code>mu</code>. For a one-sided test, divide the \n-     * returned value by 2.\n+     * returned value by 2.</p>\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the test depends on the assumptions of the parametric\n      * t-test procedure, as discussed \n      * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n-     * <p>\n+     * </p><p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The observed array length must be at least 2.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param mu constant value to compare sample mean against\n      * @param sample array of sample data values\n      * <p>\n      * Returns <code>true</code> iff the null hypothesis can be \n      * rejected with confidence <code>1 - alpha</code>.  To \n-     * perform a 1-sided test, use <code>alpha * 2</code>\n+     * perform a 1-sided test, use <code>alpha * 2</code></p>\n      * <p>\n      * <strong>Examples:</strong><br><ol>\n      * <li>To test the (2-sided) hypothesis <code>sample mean = mu </code> at\n      * at the 99% level, first verify that the measured sample mean is less \n      * than <code>mu</code> and then use \n      * <br><code>tTest(mu, sample, 0.02) </code>\n-     * </li></ol>\n+     * </li></ol></p>\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the test depends on the assumptions of the one-sample \n      * parametric t-test procedure, as discussed \n      * <a href=\"http://www.basic.nwu.edu/statguidefiles/sg_glos.html#one-sample\">here</a>\n-     * <p>\n+     * </p><p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The observed array length must be at least 2.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param mu constant value to compare sample mean against\n      * @param sample array of sample data values\n      * at which one can reject the null hypothesis that the mean equals \n      * <code>mu</code> in favor of the two-sided alternative that the mean\n      * is different from <code>mu</code>. For a one-sided test, divide the \n-     * returned value by 2.\n+     * returned value by 2.</p>\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the test depends on the assumptions of the parametric\n      * t-test procedure, as discussed \n      * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n-     * here</a>\n+     * here</a></p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The sample must contain at least 2 observations.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param mu constant value to compare sample mean against\n      * @param sampleStats StatisticalSummary describing sample data\n      * <p>\n      * Returns <code>true</code> iff the null hypothesis can be rejected with\n      * confidence <code>1 - alpha</code>.  To  perform a 1-sided test, use\n-     * <code>alpha * 2.</code>\n+     * <code>alpha * 2.</code></p>\n      * <p>\n      * <strong>Examples:</strong><br><ol>\n      * <li>To test the (2-sided) hypothesis <code>sample mean = mu </code> at\n      * at the 99% level, first verify that the measured sample mean is less \n      * than <code>mu</code> and then use \n      * <br><code>tTest(mu, sampleStats, 0.02) </code>\n-     * </li></ol>\n+     * </li></ol></p>\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the test depends on the assumptions of the one-sample \n      * parametric t-test procedure, as discussed \n      * <a href=\"http://www.basic.nwu.edu/statguidefiles/sg_glos.html#one-sample\">here</a>\n-     * <p>\n+     * </p><p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The sample must include at least 2 observations.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param mu constant value to compare sample mean against\n      * @param sampleStats StatisticalSummary describing sample data values\n      * The number returned is the smallest significance level\n      * at which one can reject the null hypothesis that the two means are\n      * equal in favor of the two-sided alternative that they are different. \n-     * For a one-sided test, divide the returned value by 2.\n+     * For a one-sided test, divide the returned value by 2.</p>\n      * <p>\n      * The test does not assume that the underlying popuation variances are\n      * equal  and it uses approximated degrees of freedom computed from the \n      * as described \n      * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n      * here.</a>  To perform the test under the assumption of equal subpopulation\n-     * variances, use {@link #homoscedasticTTest(double[], double[])}. \n+     * variances, use {@link #homoscedasticTTest(double[], double[])}.</p>\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the p-value depends on the assumptions of the parametric\n      * t-test procedure, as discussed \n      * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n-     * here</a>\n+     * here</a></p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The observed array lengths must both be at least 2.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n      * comparing the means of the input arrays, under the assumption that\n      * the two samples are drawn from subpopulations with equal variances.\n      * To perform the test without the equal variances assumption, use\n-     * {@link #tTest(double[], double[])}.\n+     * {@link #tTest(double[], double[])}.</p>\n      * <p>\n      * The number returned is the smallest significance level\n      * at which one can reject the null hypothesis that the two means are\n      * equal in favor of the two-sided alternative that they are different. \n-     * For a one-sided test, divide the returned value by 2.\n+     * For a one-sided test, divide the returned value by 2.</p>\n      * <p>\n      * A pooled variance estimate is used to compute the t-statistic.  See\n      * {@link #homoscedasticT(double[], double[])}. The sum of the sample sizes\n-     * minus 2 is used as the degrees of freedom.\n+     * minus 2 is used as the degrees of freedom.</p>\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the p-value depends on the assumptions of the parametric\n      * t-test procedure, as discussed \n      * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n-     * here</a>\n+     * here</a></p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The observed array lengths must both be at least 2.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n      * <p>\n      * Returns <code>true</code> iff the null hypothesis that the means are\n      * equal can be rejected with confidence <code>1 - alpha</code>.  To \n-     * perform a 1-sided test, use <code>alpha * 2</code>\n+     * perform a 1-sided test, use <code>alpha * 2</code></p>\n      * <p>\n      * See {@link #t(double[], double[])} for the formula used to compute the\n      * t-statistic.  Degrees of freedom are approximated using the\n      * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n-     * Welch-Satterthwaite approximation.</a>\n-    \n+     * Welch-Satterthwaite approximation.</a></p>\n      * <p>\n      * <strong>Examples:</strong><br><ol>\n      * <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at\n      * at the 99% level, first verify that the measured  mean of <code>sample 1</code>\n      * is less than the mean of <code>sample 2</code> and then use \n      * <br><code>tTest(sample1, sample2, 0.02) </code>\n-     * </li></ol>\n+     * </li></ol></p>\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the test depends on the assumptions of the parametric\n      * t-test procedure, as discussed \n      * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n-     * here</a>\n+     * here</a></p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The observed array lengths must both be at least 2.\n      * </li>\n      * <li> <code> 0 < alpha < 0.5 </code>\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n      * equal can be rejected with confidence <code>1 - alpha</code>.  To \n      * perform a 1-sided test, use <code>alpha * 2.</code>  To perform the test\n      * without the assumption of equal subpopulation variances, use \n-     * {@link #tTest(double[], double[], double)}.\n+     * {@link #tTest(double[], double[], double)}.</p>\n      * <p>\n      * A pooled variance estimate is used to compute the t-statistic. See\n      * {@link #t(double[], double[])} for the formula. The sum of the sample\n-     * sizes minus 2 is used as the degrees of freedom.\n+     * sizes minus 2 is used as the degrees of freedom.</p>\n      * <p>\n      * <strong>Examples:</strong><br><ol>\n      * <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at\n      * <code>sample 1</code> is less than the mean of <code>sample 2</code>\n      * and then use\n      * <br><code>tTest(sample1, sample2, 0.02) </code>\n-     * </li></ol>\n+     * </li></ol></p>\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the test depends on the assumptions of the parametric\n      * t-test procedure, as discussed \n      * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n-     * here</a>\n+     * here</a></p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The observed array lengths must both be at least 2.\n      * </li>\n      * <li> <code> 0 < alpha < 0.5 </code>\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n      * The number returned is the smallest significance level\n      * at which one can reject the null hypothesis that the two means are\n      * equal in favor of the two-sided alternative that they are different. \n-     * For a one-sided test, divide the returned value by 2.\n+     * For a one-sided test, divide the returned value by 2.</p>\n      * <p>\n      * The test does not assume that the underlying popuation variances are\n      * equal  and it uses approximated degrees of freedom computed from the \n      * sample data to compute the p-value.   To perform the test assuming\n      * equal variances, use \n-     * {@link #homoscedasticTTest(StatisticalSummary, StatisticalSummary)}.\n+     * {@link #homoscedasticTTest(StatisticalSummary, StatisticalSummary)}.</p>\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the p-value depends on the assumptions of the parametric\n      * t-test procedure, as discussed \n      * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n-     * here</a>\n+     * here</a></p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The datasets described by the two Univariates must each contain\n      * at least 2 observations.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param sampleStats1  StatisticalSummary describing data from the first sample\n      * @param sampleStats2  StatisticalSummary describing data from the second sample\n      * The number returned is the smallest significance level\n      * at which one can reject the null hypothesis that the two means are\n      * equal in favor of the two-sided alternative that they are different. \n-     * For a one-sided test, divide the returned value by 2.\n+     * For a one-sided test, divide the returned value by 2.</p>\n      * <p>\n      * See {@link #homoscedasticT(double[], double[])} for the formula used to\n      * compute the t-statistic. The sum of the  sample sizes minus 2 is used as\n-     * the degrees of freedom.\n+     * the degrees of freedom.</p>\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the p-value depends on the assumptions of the parametric\n      * t-test procedure, as discussed \n      * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n-     * <p>\n+     * </p><p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The datasets described by the two Univariates must each contain\n      * at least 2 observations.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param sampleStats1  StatisticalSummary describing data from the first sample\n      * @param sampleStats2  StatisticalSummary describing data from the second sample\n      * <p>\n      * Returns <code>true</code> iff the null hypothesis that the means are\n      * equal can be rejected with confidence <code>1 - alpha</code>.  To \n-     * perform a 1-sided test, use <code>alpha * 2</code>\n+     * perform a 1-sided test, use <code>alpha * 2</code></p>\n      * <p>\n      * See {@link #t(double[], double[])} for the formula used to compute the\n      * t-statistic.  Degrees of freedom are approximated using the\n      * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n-     * Welch-Satterthwaite approximation.</a>\n+     * Welch-Satterthwaite approximation.</a></p>\n      * <p>\n      * <strong>Examples:</strong><br><ol>\n      * <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at\n      * <code>sample 1</code> is less than  the mean of <code>sample 2</code>\n      * and then use \n      * <br><code>tTest(sampleStats1, sampleStats2, 0.02) </code>\n-     * </li></ol>\n+     * </li></ol></p>\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the test depends on the assumptions of the parametric\n      * t-test procedure, as discussed \n      * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n-     * here</a>\n+     * here</a></p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The datasets described by the two Univariates must each contain\n      * at least 2 observations.\n      * </li>\n      * <li> <code> 0 < alpha < 0.5 </code>\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param sampleStats1 StatisticalSummary describing sample data values\n      * @param sampleStats2 StatisticalSummary describing sample data values\n--- a/src/java/org/apache/commons/math/stat/inference/TTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/TTestImpl.java\n  * Implements t-test statistics defined in the {@link TTest} interface.\n  * <p>\n  * Uses commons-math {@link org.apache.commons.math.distribution.TDistribution}\n- * implementation to estimate exact p-values.\n+ * implementation to estimate exact p-values.</p>\n  *\n  * @version $Revision$ $Date$\n  */\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The input arrays must have the same length and their common length\n      * must be at least 2.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n      * at which one can reject the null hypothesis that the mean of the paired\n      * differences is 0 in favor of the two-sided alternative that the mean paired \n      * difference is not equal to 0. For a one-sided test, divide the returned \n-     * value by 2.\n+     * value by 2.</p>\n      * <p>\n      * This test is equivalent to a one-sample t-test computed using\n      * {@link #tTest(double, double[])} with <code>mu = 0</code> and the sample\n      * array consisting of the signed differences between corresponding elements of \n-     * <code>sample1</code> and <code>sample2.</code>\n+     * <code>sample1</code> and <code>sample2.</code></p>\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the p-value depends on the assumptions of the parametric\n      * t-test procedure, as discussed \n      * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n-     * here</a>\n+     * here</a></p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The input array lengths must be the same and their common length must\n      * be at least 2.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n      * <p>\n      * Returns <code>true</code> iff the null hypothesis can be rejected with \n      * confidence <code>1 - alpha</code>.  To perform a 1-sided test, use \n-     * <code>alpha * 2</code>\n+     * <code>alpha * 2</code></p>\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the test depends on the assumptions of the parametric\n      * t-test procedure, as discussed \n      * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n-     * here</a>\n+     * here</a></p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The input array lengths must be the same and their common length \n      * must be at least 2.\n      * </li>\n      * <li> <code> 0 < alpha < 0.5 </code>\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n      * t statistic </a> given observed values and a comparison constant.\n      * <p>\n      * This statistic can be used to perform a one sample t-test for the mean.\n-     * <p>\n+     * </p><p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The observed array length must be at least 2.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param mu comparison constant\n      * @param observed array of values\n      * <code>sampleStats</code> to <code>mu</code>.\n      * <p>\n      * This statistic can be used to perform a one sample t-test for the mean.\n-     * <p>\n+     * </p><p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li><code>observed.getN() > = 2</code>.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param mu comparison constant\n      * @param sampleStats DescriptiveStatistics holding sample summary statitstics\n      * equal variances hypothesis, use {@link #t(double[], double[])}.\n      * <p>\n      * This statistic can be used to perform a (homoscedastic) two-sample\n-     * t-test to compare sample means.   \n-     * <p>\n-     * The t-statisitc is\n+     * t-test to compare sample means.</p>\n+     * <p>\n+     * The t-statisitc is</p>\n      * <p>\n      * &nbsp;&nbsp;<code>  t = (m1 - m2) / (sqrt(1/n1 +1/n2) sqrt(var))</code>\n-     * <p>\n+     * </p><p>\n      * where <strong><code>n1</code></strong> is the size of first sample; \n      * <strong><code> n2</code></strong> is the size of second sample; \n      * <strong><code> m1</code></strong> is the mean of first sample;  \n      * <strong><code> m2</code></strong> is the mean of second sample</li>\n      * </ul>\n      * and <strong><code>var</code></strong> is the pooled variance estimate:\n-     * <p>\n+     * </p><p>\n      * <code>var = sqrt(((n1 - 1)var1 + (n2 - 1)var2) / ((n1-1) + (n2-1)))</code>\n-     * <p> \n+     * </p><p> \n      * with <strong><code>var1<code></strong> the variance of the first sample and\n      * <strong><code>var2</code></strong> the variance of the second sample.\n-     * <p>\n+     * </p><p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The observed array lengths must both be at least 2.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n      * variances, use {@link #homoscedasticT(double[], double[])}.\n      * <p>\n      * This statistic can be used to perform a two-sample t-test to compare\n-     * sample means.\n-     * <p>\n-     * The t-statisitc is\n+     * sample means.</p>\n+     * <p>\n+     * The t-statisitc is</p>\n      * <p>\n      * &nbsp;&nbsp; <code>  t = (m1 - m2) / sqrt(var1/n1 + var2/n2)</code>\n-     * <p>\n+     * </p><p>\n      *  where <strong><code>n1</code></strong> is the size of the first sample\n      * <strong><code> n2</code></strong> is the size of the second sample; \n      * <strong><code> m1</code></strong> is the mean of the first sample;  \n      * <strong><code> m2</code></strong> is the mean of the second sample;\n      * <strong><code> var1</code></strong> is the variance of the first sample;\n      * <strong><code> var2</code></strong> is the variance of the second sample;  \n-     * <p>\n+     * </p><p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The observed array lengths must both be at least 2.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n      * compute a t-statistic under the equal variances assumption.\n      * <p>\n      * This statistic can be used to perform a two-sample t-test to compare\n-     * sample means.\n-     * <p>\n-      * The returned  t-statisitc is\n+     * sample means.</p>\n+     * <p>\n+      * The returned  t-statisitc is</p>\n      * <p>\n      * &nbsp;&nbsp; <code>  t = (m1 - m2) / sqrt(var1/n1 + var2/n2)</code>\n-     * <p>\n+     * </p><p>\n      * where <strong><code>n1</code></strong> is the size of the first sample; \n      * <strong><code> n2</code></strong> is the size of the second sample; \n      * <strong><code> m1</code></strong> is the mean of the first sample;  \n      * <strong><code> m2</code></strong> is the mean of the second sample\n      * <strong><code> var1</code></strong> is the variance of the first sample;  \n      * <strong><code> var2</code></strong> is the variance of the second sample\n-     * <p>\n+     * </p><p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The datasets described by the two Univariates must each contain\n      * at least 2 observations.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param sampleStats1 StatisticalSummary describing data from the first sample\n      * @param sampleStats2 StatisticalSummary describing data from the second sample\n      * {@link #t(StatisticalSummary, StatisticalSummary)}.\n      * <p>\n      * This statistic can be used to perform a (homoscedastic) two-sample\n-     * t-test to compare sample means.\n-     * <p>\n-     * The t-statisitc returned is\n+     * t-test to compare sample means.</p>\n+     * <p>\n+     * The t-statisitc returned is</p>\n      * <p>\n      * &nbsp;&nbsp;<code>  t = (m1 - m2) / (sqrt(1/n1 +1/n2) sqrt(var))</code>\n-     * <p>\n+     * </p><p>\n      * where <strong><code>n1</code></strong> is the size of first sample; \n      * <strong><code> n2</code></strong> is the size of second sample; \n      * <strong><code> m1</code></strong> is the mean of first sample;  \n      * <strong><code> m2</code></strong> is the mean of second sample\n      * and <strong><code>var</code></strong> is the pooled variance estimate:\n-     * <p>\n+     * </p><p>\n      * <code>var = sqrt(((n1 - 1)var1 + (n2 - 1)var2) / ((n1-1) + (n2-1)))</code>\n      * <p> \n      * with <strong><code>var1<code></strong> the variance of the first sample and\n      * <strong><code>var2</code></strong> the variance of the second sample.\n-     * <p>\n+     * </p><p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The datasets described by the two Univariates must each contain\n      * at least 2 observations.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param sampleStats1 StatisticalSummary describing data from the first sample\n      * @param sampleStats2 StatisticalSummary describing data from the second sample\n      * at which one can reject the null hypothesis that the mean equals \n      * <code>mu</code> in favor of the two-sided alternative that the mean\n      * is different from <code>mu</code>. For a one-sided test, divide the \n-     * returned value by 2.\n+     * returned value by 2.</p>\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the test depends on the assumptions of the parametric\n      * t-test procedure, as discussed \n      * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n-     * <p>\n+     * </p><p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The observed array length must be at least 2.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param mu constant value to compare sample mean against\n      * @param sample array of sample data values\n      * Returns <code>true</code> iff the null hypothesis can be \n      * rejected with confidence <code>1 - alpha</code>.  To \n      * perform a 1-sided test, use <code>alpha * 2</code>\n-     * <p>\n+     * </p><p>\n      * <strong>Examples:</strong><br><ol>\n      * <li>To test the (2-sided) hypothesis <code>sample mean = mu </code> at\n      * the 95% level, use <br><code>tTest(mu, sample, 0.05) </code>\n      * at the 99% level, first verify that the measured sample mean is less \n      * than <code>mu</code> and then use \n      * <br><code>tTest(mu, sample, 0.02) </code>\n-     * </li></ol>\n+     * </li></ol></p>\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the test depends on the assumptions of the one-sample \n      * parametric t-test procedure, as discussed \n      * <a href=\"http://www.basic.nwu.edu/statguidefiles/sg_glos.html#one-sample\">here</a>\n-     * <p>\n+     * </p><p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The observed array length must be at least 2.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param mu constant value to compare sample mean against\n      * @param sample array of sample data values\n      * at which one can reject the null hypothesis that the mean equals \n      * <code>mu</code> in favor of the two-sided alternative that the mean\n      * is different from <code>mu</code>. For a one-sided test, divide the \n-     * returned value by 2.\n+     * returned value by 2.</p>\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the test depends on the assumptions of the parametric\n      * t-test procedure, as discussed \n      * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n-     * here</a>\n+     * here</a></p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The sample must contain at least 2 observations.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param mu constant value to compare sample mean against\n      * @param sampleStats StatisticalSummary describing sample data\n      * <p>\n      * Returns <code>true</code> iff the null hypothesis can be rejected with\n      * confidence <code>1 - alpha</code>.  To  perform a 1-sided test, use\n-     * <code>alpha * 2.</code>\n+     * <code>alpha * 2.</code></p>\n      * <p>\n      * <strong>Examples:</strong><br><ol>\n      * <li>To test the (2-sided) hypothesis <code>sample mean = mu </code> at\n      * at the 99% level, first verify that the measured sample mean is less \n      * than <code>mu</code> and then use \n      * <br><code>tTest(mu, sampleStats, 0.02) </code>\n-     * </li></ol>\n+     * </li></ol></p>\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the test depends on the assumptions of the one-sample \n      * parametric t-test procedure, as discussed \n      * <a href=\"http://www.basic.nwu.edu/statguidefiles/sg_glos.html#one-sample\">here</a>\n-     * <p>\n+     * </p><p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The sample must include at least 2 observations.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param mu constant value to compare sample mean against\n      * @param sampleStats StatisticalSummary describing sample data values\n      * The number returned is the smallest significance level\n      * at which one can reject the null hypothesis that the two means are\n      * equal in favor of the two-sided alternative that they are different. \n-     * For a one-sided test, divide the returned value by 2.\n+     * For a one-sided test, divide the returned value by 2.</p>\n      * <p>\n      * The test does not assume that the underlying popuation variances are\n      * equal  and it uses approximated degrees of freedom computed from the \n      * as described \n      * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n      * here.</a>  To perform the test under the assumption of equal subpopulation\n-     * variances, use {@link #homoscedasticTTest(double[], double[])}. \n+     * variances, use {@link #homoscedasticTTest(double[], double[])}.</p>\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the p-value depends on the assumptions of the parametric\n      * t-test procedure, as discussed \n      * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n-     * here</a>\n+     * here</a></p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The observed array lengths must both be at least 2.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n      * The number returned is the smallest significance level\n      * at which one can reject the null hypothesis that the two means are\n      * equal in favor of the two-sided alternative that they are different. \n-     * For a one-sided test, divide the returned value by 2.\n+     * For a one-sided test, divide the returned value by 2.</p>\n      * <p>\n      * A pooled variance estimate is used to compute the t-statistic.  See\n      * {@link #homoscedasticT(double[], double[])}. The sum of the sample sizes\n-     * minus 2 is used as the degrees of freedom.\n+     * minus 2 is used as the degrees of freedom.</p>\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the p-value depends on the assumptions of the parametric\n      * t-test procedure, as discussed \n      * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n-     * here</a>\n+     * here</a></p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The observed array lengths must both be at least 2.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n      * <p>\n      * Returns <code>true</code> iff the null hypothesis that the means are\n      * equal can be rejected with confidence <code>1 - alpha</code>.  To \n-     * perform a 1-sided test, use <code>alpha / 2</code>\n+     * perform a 1-sided test, use <code>alpha / 2</code></p>\n      * <p>\n      * See {@link #t(double[], double[])} for the formula used to compute the\n      * t-statistic.  Degrees of freedom are approximated using the\n      * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n-     * Welch-Satterthwaite approximation.</a>\n+     * Welch-Satterthwaite approximation.</a></p>\n       \n      * <p>\n      * <strong>Examples:</strong><br><ol>\n      * the 99% level, first verify that the measured  mean of <code>sample 1</code>\n      * is less than the mean of <code>sample 2</code> and then use \n      * <br><code>tTest(sample1, sample2, 0.02) </code>\n-     * </li></ol>\n+     * </li></ol></p>\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the test depends on the assumptions of the parametric\n      * t-test procedure, as discussed \n      * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n-     * here</a>\n+     * here</a></p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The observed array lengths must both be at least 2.\n      * </li>\n      * <li> <code> 0 < alpha < 0.5 </code>\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n      * equal can be rejected with confidence <code>1 - alpha</code>.  To \n      * perform a 1-sided test, use <code>alpha * 2.</code>  To perform the test\n      * without the assumption of equal subpopulation variances, use \n-     * {@link #tTest(double[], double[], double)}.\n+     * {@link #tTest(double[], double[], double)}.</p>\n      * <p>\n      * A pooled variance estimate is used to compute the t-statistic. See\n      * {@link #t(double[], double[])} for the formula. The sum of the sample\n-     * sizes minus 2 is used as the degrees of freedom.\n+     * sizes minus 2 is used as the degrees of freedom.</p>\n      * <p>\n      * <strong>Examples:</strong><br><ol>\n      * <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at\n      * <code>sample 1</code> is less than the mean of <code>sample 2</code>\n      * and then use\n      * <br><code>tTest(sample1, sample2, 0.02) </code>\n-     * </li></ol>\n+     * </li></ol></p>\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the test depends on the assumptions of the parametric\n      * t-test procedure, as discussed \n      * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n-     * here</a>\n+     * here</a></p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The observed array lengths must both be at least 2.\n      * </li>\n      * <li> <code> 0 < alpha < 0.5 </code>\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n      * The number returned is the smallest significance level\n      * at which one can reject the null hypothesis that the two means are\n      * equal in favor of the two-sided alternative that they are different. \n-     * For a one-sided test, divide the returned value by 2.\n+     * For a one-sided test, divide the returned value by 2.</p>\n      * <p>\n      * The test does not assume that the underlying popuation variances are\n      * equal  and it uses approximated degrees of freedom computed from the \n      * sample data to compute the p-value.   To perform the test assuming\n      * equal variances, use \n-     * {@link #homoscedasticTTest(StatisticalSummary, StatisticalSummary)}.\n+     * {@link #homoscedasticTTest(StatisticalSummary, StatisticalSummary)}.</p>\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the p-value depends on the assumptions of the parametric\n      * t-test procedure, as discussed \n      * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n-     * here</a>\n+     * here</a></p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The datasets described by the two Univariates must each contain\n      * at least 2 observations.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param sampleStats1  StatisticalSummary describing data from the first sample\n      * @param sampleStats2  StatisticalSummary describing data from the second sample\n      * The number returned is the smallest significance level\n      * at which one can reject the null hypothesis that the two means are\n      * equal in favor of the two-sided alternative that they are different. \n-     * For a one-sided test, divide the returned value by 2.\n+     * For a one-sided test, divide the returned value by 2.</p>\n      * <p>\n      * See {@link #homoscedasticT(double[], double[])} for the formula used to\n      * compute the t-statistic. The sum of the  sample sizes minus 2 is used as\n-     * the degrees of freedom.\n+     * the degrees of freedom.</p>\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the p-value depends on the assumptions of the parametric\n      * t-test procedure, as discussed \n      * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n-     * <p>\n+     * </p><p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The datasets described by the two Univariates must each contain\n      * at least 2 observations.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param sampleStats1  StatisticalSummary describing data from the first sample\n      * @param sampleStats2  StatisticalSummary describing data from the second sample\n      * <p>\n      * Returns <code>true</code> iff the null hypothesis that the means are\n      * equal can be rejected with confidence <code>1 - alpha</code>.  To \n-     * perform a 1-sided test, use <code>alpha * 2</code>\n+     * perform a 1-sided test, use <code>alpha * 2</code></p>\n      * <p>\n      * See {@link #t(double[], double[])} for the formula used to compute the\n      * t-statistic.  Degrees of freedom are approximated using the\n      * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n-     * Welch-Satterthwaite approximation.</a>\n+     * Welch-Satterthwaite approximation.</a></p>\n      * <p>\n      * <strong>Examples:</strong><br><ol>\n      * <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at\n      * <code>sample 1</code> is less than  the mean of <code>sample 2</code>\n      * and then use \n      * <br><code>tTest(sampleStats1, sampleStats2, 0.02) </code>\n-     * </li></ol>\n+     * </li></ol></p>\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the test depends on the assumptions of the parametric\n      * t-test procedure, as discussed \n      * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n-     * here</a>\n+     * here</a></p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The datasets described by the two Univariates must each contain\n      * at least 2 observations.\n      * </li>\n      * <li> <code> 0 < alpha < 0.5 </code>\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param sampleStats1 StatisticalSummary describing sample data values\n      * @param sampleStats2 StatisticalSummary describing sample data values\n     /**\n      * Computes t test statistic for 2-sample t-test.\n      * <p>\n-     * Does not assume that subpopulation variances are equal.\n+     * Does not assume that subpopulation variances are equal.</p>\n      * \n      * @param m1 first sample mean\n      * @param m2 second sample mean\n      * Computes p-value for 2-sided, 2-sample t-test.\n      * <p>\n      * Does not assume subpopulation variances are equal. Degrees of freedom\n-     * are estimated from the data.\n+     * are estimated from the data.</p>\n      * \n      * @param m1 first sample mean\n      * @param m2 second sample mean\n      * Computes p-value for 2-sided, 2-sample t-test, under the assumption\n      * of equal subpopulation variances.\n      * <p>\n-     * The sum of the sample sizes minus 2 is used as degrees of freedom.\n+     * The sum of the sample sizes minus 2 is used as degrees of freedom.</p>\n      * \n      * @param m1 first sample mean\n      * @param m2 second sample mean\n--- a/src/java/org/apache/commons/math/stat/inference/UnknownDistributionChiSquareTest.java\n+++ b/src/java/org/apache/commons/math/stat/inference/UnknownDistributionChiSquareTest.java\n      * <br/><code>K = &sqrt;[&sum(observed2 / &sum;(observed1)]</code>\n      * </p>\n      * <p>This statistic can be used to perform a Chi-Square test evaluating the null hypothesis that\n-     * both observed counts follow the same distribution.\n+     * both observed counts follow the same distribution.</p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>Observed counts must be non-negative.\n      * </li>\n      * <li>The arrays <code>observed1</code> and <code>observed2</code> must have the same length and\n      * their common length must be at least 2.\n-     * </li></ul><p>\n+     * </li></ul></p><p>\n      * If any of the preconditions are not met, an\n-     * <code>IllegalArgumentException</code> is thrown.\n+     * <code>IllegalArgumentException</code> is thrown.</p>\n      *\n      * @param observed1 array of observed frequency counts of the first data set\n      * @param observed2 array of observed frequency counts of the second data set\n      * their common length must be at least 2.\n      * </li></ul><p>\n      * If any of the preconditions are not met, an\n-     * <code>IllegalArgumentException</code> is thrown.\n+     * <code>IllegalArgumentException</code> is thrown.</p>\n      *\n      * @param observed1 array of observed frequency counts of the first data set\n      * @param observed2 array of observed frequency counts of the second data set\n      * <li> <code> 0 < alpha < 0.5 </code>\n      * </li></ul><p>\n      * If any of the preconditions are not met, an\n-     * <code>IllegalArgumentException</code> is thrown.\n+     * <code>IllegalArgumentException</code> is thrown.</p>\n      *\n      * @param observed1 array of observed frequency counts of the first data set\n      * @param observed2 array of observed frequency counts of the second data set\n--- a/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n  * Estimates an ordinary least squares regression model\n  * with one independent variable.\n  * <p>\n- * <code> y = intercept + slope * x  </code>\n+ * <code> y = intercept + slope * x  </code></p>\n  * <p>\n  * Standard errors for <code>intercept</code> and <code>slope</code> are \n- * available as well as ANOVA, r-square and Pearson's r statistics.\n+ * available as well as ANOVA, r-square and Pearson's r statistics.</p>\n  * <p>\n  * Observations (x,y pairs) can be added to the model one at a time or they \n  * can be provided in a 2-dimensional array.  The observations are not stored\n  * in memory, so there is no limit to the number of observations that can be\n- * added to the model. \n+ * added to the model.</p> \n  * <p>\n  * <strong>Usage Notes</strong>: <ul>\n  * <li> When there are fewer than two observations in the model, or when\n  * and get updated statistics without using a new instance.  There is no \n  * \"compute\" method that updates all statistics.  Each of the getters performs\n  * the necessary computations to return the requested statistic.</li>\n- * </ul>\n+ * </ul></p>\n  *\n  * @version $Revision$ $Date$\n  */\n      * \"Algorithms for Computing the Sample Variance: Analysis and\n      * Recommendations\", Chan, T.F., Golub, G.H., and LeVeque, R.J. \n      * 1983, American Statistician, vol. 37, pp. 242-247, referenced in\n-     * Weisberg, S. \"Applied Linear Regression\". 2nd Ed. 1985\n+     * Weisberg, S. \"Applied Linear Regression\". 2nd Ed. 1985.</p>\n      *\n      *\n      * @param x independent variable value\n      * <code>data</code>.\n      * <p>\n      * <code>(data[0][0],data[0][1])</code> will be the first observation, then\n-     * <code>(data[1][0],data[1][1])</code>, etc. \n+     * <code>(data[1][0],data[1][1])</code>, etc.</p>\n      * <p> \n      * This method does not replace data that has already been added.  The\n      * observations represented by <code>data</code> are added to the existing\n-     * dataset.\n+     * dataset.</p>\n      * <p> \n      * To replace all data, use <code>clear()</code> before adding the new \n-     * data.\n+     * data.</p>\n      * \n      * @param data array of observations to be added\n      */\n      * supplied <code>x</code> value,  based on the data that has been\n      * added to the model when this method is activated.\n      * <p>\n-     * <code> predict(x) = intercept + slope * x </code>\n+     * <code> predict(x) = intercept + slope * x </code></p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>At least two observations (with at least two different x values)\n      * must have been added before invoking this method. If this method is \n      * invoked before a model can be estimated, <code>Double,NaN</code> is\n      * returned.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @param x input <code>x</code> value\n      * @return predicted <code>y</code> value\n      * <p>\n      * The least squares estimate of the intercept is computed using the \n      * <a href=\"http://www.xycoon.com/estimation4.htm\">normal equations</a>.\n-     * The intercept is sometimes denoted b0. \n+     * The intercept is sometimes denoted b0.</p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>At least two observations (with at least two different x values)\n      * must have been added before invoking this method. If this method is \n      * invoked before a model can be estimated, <code>Double,NaN</code> is\n      * returned.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @return the intercept of the regression line\n      */\n     * <p>\n     * The least squares estimate of the slope is computed using the \n     * <a href=\"http://www.xycoon.com/estimation4.htm\">normal equations</a>.\n-    * The slope is sometimes denoted b1. \n+    * The slope is sometimes denoted b1.</p>\n     * <p>\n     * <strong>Preconditions</strong>: <ul>\n     * <li>At least two observations (with at least two different x values)\n     * must have been added before invoking this method. If this method is \n     * invoked before a model can be estimated, <code>Double.NaN</code> is\n     * returned.\n-    * </li></ul>\n+    * </li></ul></p>\n     *\n     * @return the slope of the regression line\n     */\n      * sum of squared errors</a> (SSE) associated with the regression \n      * model.\n      * <p>\n-     * The sum is computed using the computational formula\n-     * <p>\n-     * <code>SSE = SYY - (SXY * SXY / SXX)</code>\n+     * The sum is computed using the computational formula</p>\n+     * <p>\n+     * <code>SSE = SYY - (SXY * SXY / SXX)</code></p>\n      * <p>\n      * where <code>SYY</code> is the sum of the squared deviations of the y\n      * values about their mean, <code>SXX</code> is similarly defined and\n      * <code>SXY</code> is the sum of the products of x and y mean deviations.\n-     * <p>\n+     * </p><p>\n      * The sums are accumulated using the updating algorithm referenced in \n-     * {@link #addData}.  \n+     * {@link #addData}.</p>\n      * <p>\n      * The return value is constrained to be non-negative - i.e., if due to \n      * rounding errors the computational formula returns a negative result, \n-     * 0 is returned.\n+     * 0 is returned.</p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>At least two observations (with at least two different x values)\n      * must have been added before invoking this method. If this method is \n      * invoked before a model can be estimated, <code>Double,NaN</code> is\n      * returned.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @return sum of squared errors associated with the regression model\n      */\n      * Returns the sum of squared deviations of the y values about their mean.\n      * <p>\n      * This is defined as SSTO \n-     * <a href=\"http://www.xycoon.com/SumOfSquares.htm\">here</a>.\n-     * <p>\n-     * If <code>n < 2</code>, this returns <code>Double.NaN</code>.\n+     * <a href=\"http://www.xycoon.com/SumOfSquares.htm\">here</a>.</p>\n+     * <p>\n+     * If <code>n < 2</code>, this returns <code>Double.NaN</code>.</p>\n      *\n      * @return sum of squared deviations of y values\n      */\n      * their mean (which equals the mean of y).\n      * <p>\n      * This is usually abbreviated SSR or SSM.  It is defined as SSM \n-     * <a href=\"http://www.xycoon.com/SumOfSquares.htm\">here</a>\n+     * <a href=\"http://www.xycoon.com/SumOfSquares.htm\">here</a></p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>At least two observations (with at least two different x values)\n      * must have been added before invoking this method. If this method is \n      * invoked before a model can be estimated, <code>Double.NaN</code> is\n      * returned.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @return sum of squared deviations of predicted y values\n      */\n      * <p>\n      * If there are fewer than <strong>three</strong> data pairs in the model,\n      * or if there is no variation in <code>x</code>, this returns \n-     * <code>Double.NaN</code>.\n+     * <code>Double.NaN</code>.</p>\n      *\n      * @return sum of squared deviations of y values\n      */\n      * must have been added before invoking this method. If this method is \n      * invoked before a model can be estimated, <code>Double,NaN</code> is\n      * returned.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @return Pearson's r\n      */\n      * must have been added before invoking this method. If this method is \n      * invoked before a model can be estimated, <code>Double,NaN</code> is\n      * returned.\n-     * </li></ul>\n+     * </li></ul></p>\n      *\n      * @return r-square\n      */\n      * <p>\n      * If there are fewer that <strong>three</strong> observations in the \n      * model, or if there is no variation in x, this returns \n-     * <code>Double.NaN</code>.\n+     * <code>Double.NaN</code>.</p>\n      *\n      * @return standard error associated with intercept estimate\n      */\n      * <p>\n      * If there are fewer that <strong>three</strong> data pairs in the model,\n      * or if there is no variation in x, this returns <code>Double.NaN</code>.\n-     *\n+     * </p>\n+     * \n      * @return standard error associated with slope estimate\n      */\n     public double getSlopeStdErr() {\n      * Returns the half-width of a 95% confidence interval for the slope\n      * estimate.\n      * <p>\n-     * The 95% confidence interval is \n+     * The 95% confidence interval is</p>\n      * <p>\n      * <code>(getSlope() - getSlopeConfidenceInterval(), \n-     * getSlope() + getSlopeConfidenceInterval())</code>\n+     * getSlope() + getSlopeConfidenceInterval())</code></p>\n      * <p>\n      * If there are fewer that <strong>three</strong> observations in the \n      * model, or if there is no variation in x, this returns \n-     * <code>Double.NaN</code>.\n+     * <code>Double.NaN</code>.</p>\n      * <p>\n      * <strong>Usage Note</strong>:<br>\n      * The validity of this statistic depends on the assumption that the \n      * observations included in the model are drawn from a\n      * <a href=\"http://mathworld.wolfram.com/BivariateNormalDistribution.html\">\n-     * Bivariate Normal Distribution</a>.\n+     * Bivariate Normal Distribution</a>.</p>\n      *\n      * @return half-width of 95% confidence interval for the slope estimate\n-     * \n      * @throws MathException if the confidence interval can not be computed.\n      */\n     public double getSlopeConfidenceInterval() throws MathException {\n      * Returns the half-width of a (100-100*alpha)% confidence interval for \n      * the slope estimate.\n      * <p>\n-     * The (100-100*alpha)% confidence interval is \n+     * The (100-100*alpha)% confidence interval is </p>\n      * <p>\n      * <code>(getSlope() - getSlopeConfidenceInterval(), \n-     * getSlope() + getSlopeConfidenceInterval())</code>\n+     * getSlope() + getSlopeConfidenceInterval())</code></p>\n      * <p>\n      * To request, for example, a 99% confidence interval, use \n-     * <code>alpha = .01</code>\n+     * <code>alpha = .01</code></p>\n      * <p>\n      * <strong>Usage Note</strong>:<br>\n      * The validity of this statistic depends on the assumption that the \n      * observations included in the model are drawn from a\n      * <a href=\"http://mathworld.wolfram.com/BivariateNormalDistribution.html\">\n-     * Bivariate Normal Distribution</a>.\n+     * Bivariate Normal Distribution</a>.</p>\n      * <p>\n      * <strong> Preconditions:</strong><ul>\n      * <li>If there are fewer that <strong>three</strong> observations in the \n      * model, or if there is no variation in x, this returns \n-     * <code>Double.NaN</code>. \n+     * <code>Double.NaN</code>.\n      * </li>\n      * <li><code>(0 < alpha < 1)</code>; otherwise an \n      * <code>IllegalArgumentException</code> is thrown.\n-     * </li></ul>    \n+     * </li></ul></p> \n      *\n      * @param alpha the desired significance level \n      * @return half-width of 95% confidence interval for the slope estimate\n      * such that the slope confidence interval with significance level\n      * equal to <code>alpha</code> does not include <code>0</code>.\n      * On regression output, this is often denoted <code>Prob(|t| > 0)</code>\n-     * <p>\n+     * </p><p>\n      * <strong>Usage Note</strong>:<br>\n      * The validity of this statistic depends on the assumption that the \n      * observations included in the model are drawn from a\n      * <a href=\"http://mathworld.wolfram.com/BivariateNormalDistribution.html\">\n-     * Bivariate Normal Distribution</a>.\n+     * Bivariate Normal Distribution</a>.</p>\n      * <p>\n      * If there are fewer that <strong>three</strong> observations in the \n      * model, or if there is no variation in x, this returns \n-     * <code>Double.NaN</code>.\n+     * <code>Double.NaN</code>.</p>\n      *\n      * @return significance level for slope/correlation\n      * @throws MathException if the significance level can not be computed.\n     /**\n     * Returns the intercept of the estimated regression line, given the slope.\n     * <p>\n-    * Will return <code>NaN</code> if slope is <code>NaN</code>.\n+    * Will return <code>NaN</code> if slope is <code>NaN</code>.</p>\n     *\n     * @param slope current slope\n     * @return the intercept of the regression line\n--- a/src/java/org/apache/commons/math/transform/FastCosineTransformer.java\n+++ b/src/java/org/apache/commons/math/transform/FastCosineTransformer.java\n  * <b>Fast Fourier Transforms</b>, ISBN 0849371635, chapter 3.\n  * <p>\n  * FCT is its own inverse, up to a multiplier depending on conventions.\n- * The equations are listed in the comments of the corresponding methods.\n+ * The equations are listed in the comments of the corresponding methods.</p>\n  * <p>\n  * Different from FFT and FST, FCT requires the length of data set to be\n  * power of 2 plus one. Users should especially pay attention to the\n- * function transformation on how this affects the sampling.\n+ * function transformation on how this affects the sampling.</p>\n  *\n  * @version $Revision$ $Date$\n  */\n      * <p>\n      * The formula is $ F_n = (1/2) [f_0 + (-1)^n f_N] +\n      *                        \\Sigma_{k=0}^{N-1} f_k \\cos(\\pi nk/N) $\n-     *\n+     * </p>\n+     * \n      * @param f the real data array to be transformed\n      * @return the real transformed array\n      * @throws MathException if any math-related errors occur\n      * <p>\n      * The formula is $ F_n = (1/2) [f_0 + (-1)^n f_N] +\n      *                        \\Sigma_{k=0}^{N-1} f_k \\cos(\\pi nk/N) $\n-     *\n+     * </p>\n+     * \n      * @param f the function to be sampled and transformed\n      * @param min the lower bound for the interval\n      * @param max the upper bound for the interval\n \n     /**\n      * Transform the given real data set.\n+     * <p>\n+     * The formula is $ F_n = \\sqrt{1/2N} [f_0 + (-1)^n f_N] +\n+     *                        \\sqrt{2/N} \\Sigma_{k=0}^{N-1} f_k \\cos(\\pi nk/N) $\n+     * </p>\n+     * \n+     * @param f the real data array to be transformed\n+     * @return the real transformed array\n+     * @throws MathException if any math-related errors occur\n+     * @throws IllegalArgumentException if any parameters are invalid\n+     */\n+    public double[] transform2(double f[]) throws MathException,\n+        IllegalArgumentException {\n+\n+        double scaling_coefficient = Math.sqrt(2.0 / (f.length-1));\n+        return FastFourierTransformer.scaleArray(fct(f), scaling_coefficient);\n+    }\n+\n+    /**\n+     * Transform the given real function, sampled on the given interval.\n      * <p>\n      * The formula is $ F_n = \\sqrt{1/2N} [f_0 + (-1)^n f_N] +\n      *                        \\sqrt{2/N} \\Sigma_{k=0}^{N-1} f_k \\cos(\\pi nk/N) $\n      *\n-     * @param f the real data array to be transformed\n-     * @return the real transformed array\n-     * @throws MathException if any math-related errors occur\n-     * @throws IllegalArgumentException if any parameters are invalid\n-     */\n-    public double[] transform2(double f[]) throws MathException,\n-        IllegalArgumentException {\n-\n-        double scaling_coefficient = Math.sqrt(2.0 / (f.length-1));\n-        return FastFourierTransformer.scaleArray(fct(f), scaling_coefficient);\n-    }\n-\n-    /**\n-     * Transform the given real function, sampled on the given interval.\n-     * <p>\n-     * The formula is $ F_n = \\sqrt{1/2N} [f_0 + (-1)^n f_N] +\n-     *                        \\sqrt{2/N} \\Sigma_{k=0}^{N-1} f_k \\cos(\\pi nk/N) $\n-     *\n+     * </p>\n+     * \n      * @param f the function to be sampled and transformed\n      * @param min the lower bound for the interval\n      * @param max the upper bound for the interval\n      * <p>\n      * The formula is $ f_k = (1/N) [F_0 + (-1)^k F_N] +\n      *                        (2/N) \\Sigma_{n=0}^{N-1} F_n \\cos(\\pi nk/N) $\n-     *\n+     * </p>\n+     * \n      * @param f the real data array to be inversely transformed\n      * @return the real inversely transformed array\n      * @throws MathException if any math-related errors occur\n      * <p>\n      * The formula is $ f_k = (1/N) [F_0 + (-1)^k F_N] +\n      *                        (2/N) \\Sigma_{n=0}^{N-1} F_n \\cos(\\pi nk/N) $\n-     *\n+     * </p>\n+     * \n      * @param f the function to be sampled and inversely transformed\n      * @param min the lower bound for the interval\n      * @param max the upper bound for the interval\n      * <p>\n      * The formula is $ f_k = \\sqrt{1/2N} [F_0 + (-1)^k F_N] +\n      *                        \\sqrt{2/N} \\Sigma_{n=0}^{N-1} F_n \\cos(\\pi nk/N) $\n-     *\n+     * </p>\n+     * \n      * @param f the real data array to be inversely transformed\n      * @return the real inversely transformed array\n      * @throws MathException if any math-related errors occur\n      * <p>\n      * The formula is $ f_k = \\sqrt{1/2N} [F_0 + (-1)^k F_N] +\n      *                        \\sqrt{2/N} \\Sigma_{n=0}^{N-1} F_n \\cos(\\pi nk/N) $\n-     *\n+     * </p>\n+     * \n      * @param f the function to be sampled and inversely transformed\n      * @param min the lower bound for the interval\n      * @param max the upper bound for the interval\n--- a/src/java/org/apache/commons/math/transform/FastFourierTransformer.java\n+++ b/src/java/org/apache/commons/math/transform/FastFourierTransformer.java\n  * <p>\n  * There are several conventions for the definition of FFT and inverse FFT,\n  * mainly on different coefficient and exponent. Here the equations are listed\n- * in the comments of the corresponding methods.\n+ * in the comments of the corresponding methods.</p>\n  * <p>\n  * We require the length of data set to be power of 2, this greatly simplifies\n  * and speeds up the code. Users can pad the data with zeros to meet this\n  * requirement. There are other flavors of FFT, for reference, see S. Winograd,\n  * <i>On computing the discrete Fourier transform</i>, Mathematics of Computation,\n- * 32 (1978), 175 - 199.\n+ * 32 (1978), 175 - 199.</p>\n  *\n  * @version $Revision$ $Date$\n  */\n      * Transform the given real data set.\n      * <p>\n      * The formula is $ y_n = \\Sigma_{k=0}^{N-1} e^{-2 \\pi i nk/N} x_k $\n-     *\n+     * </p>\n+     * \n      * @param f the real data array to be transformed\n      * @return the complex transformed array\n      * @throws MathException if any math-related errors occur\n      * Transform the given real function, sampled on the given interval.\n      * <p>\n      * The formula is $ y_n = \\Sigma_{k=0}^{N-1} e^{-2 \\pi i nk/N} x_k $\n-     *\n+     * </p>\n+     * \n      * @param f the function to be sampled and transformed\n      * @param min the lower bound for the interval\n      * @param max the upper bound for the interval\n      * Transform the given complex data set.\n      * <p>\n      * The formula is $ y_n = \\Sigma_{k=0}^{N-1} e^{-2 \\pi i nk/N} x_k $\n-     *\n+     * </p>\n+     * \n      * @param f the complex data array to be transformed\n      * @return the complex transformed array\n      * @throws MathException if any math-related errors occur\n      * Transform the given real data set.\n      * <p>\n      * The formula is $y_n = (1/\\sqrt{N}) \\Sigma_{k=0}^{N-1} e^{-2 \\pi i nk/N} x_k$\n-     *\n+     * </p>\n+     * \n      * @param f the real data array to be transformed\n      * @return the complex transformed array\n      * @throws MathException if any math-related errors occur\n      * Transform the given real function, sampled on the given interval.\n      * <p>\n      * The formula is $y_n = (1/\\sqrt{N}) \\Sigma_{k=0}^{N-1} e^{-2 \\pi i nk/N} x_k$\n-     *\n+     * </p>\n+     * \n      * @param f the function to be sampled and transformed\n      * @param min the lower bound for the interval\n      * @param max the upper bound for the interval\n      * Transform the given complex data set.\n      * <p>\n      * The formula is $y_n = (1/\\sqrt{N}) \\Sigma_{k=0}^{N-1} e^{-2 \\pi i nk/N} x_k$\n-     *\n+     * </p>\n+     * \n      * @param f the complex data array to be transformed\n      * @return the complex transformed array\n      * @throws MathException if any math-related errors occur\n      * Inversely transform the given real data set.\n      * <p>\n      * The formula is $ x_k = (1/N) \\Sigma_{n=0}^{N-1} e^{2 \\pi i nk/N} y_n $\n-     *\n+     * </p>\n+     * \n      * @param f the real data array to be inversely transformed\n      * @return the complex inversely transformed array\n      * @throws MathException if any math-related errors occur\n      * Inversely transform the given real function, sampled on the given interval.\n      * <p>\n      * The formula is $ x_k = (1/N) \\Sigma_{n=0}^{N-1} e^{2 \\pi i nk/N} y_n $\n-     *\n+     * </p>\n+     * \n      * @param f the function to be sampled and inversely transformed\n      * @param min the lower bound for the interval\n      * @param max the upper bound for the interval\n      * Inversely transform the given complex data set.\n      * <p>\n      * The formula is $ x_k = (1/N) \\Sigma_{n=0}^{N-1} e^{2 \\pi i nk/N} y_n $\n-     *\n+     * </p>\n+     * \n      * @param f the complex data array to be inversely transformed\n      * @return the complex inversely transformed array\n      * @throws MathException if any math-related errors occur\n      * Inversely transform the given real data set.\n      * <p>\n      * The formula is $x_k = (1/\\sqrt{N}) \\Sigma_{n=0}^{N-1} e^{2 \\pi i nk/N} y_n$\n-     *\n+     * </p>\n+     * \n      * @param f the real data array to be inversely transformed\n      * @return the complex inversely transformed array\n      * @throws MathException if any math-related errors occur\n      * Inversely transform the given real function, sampled on the given interval.\n      * <p>\n      * The formula is $x_k = (1/\\sqrt{N}) \\Sigma_{n=0}^{N-1} e^{2 \\pi i nk/N} y_n$\n-     *\n+     * </p>\n+     * \n      * @param f the function to be sampled and inversely transformed\n      * @param min the lower bound for the interval\n      * @param max the upper bound for the interval\n      * Inversely transform the given complex data set.\n      * <p>\n      * The formula is $x_k = (1/\\sqrt{N}) \\Sigma_{n=0}^{N-1} e^{2 \\pi i nk/N} y_n$\n-     *\n+     * </p>\n+     * \n      * @param f the complex data array to be inversely transformed\n      * @return the complex inversely transformed array\n      * @throws MathException if any math-related errors occur\n      * <p>\n      * The computed omega[] = { 1, w, w^2, ... w^(n-1) } where\n      * w = exp(-2 \\pi i / n), i = sqrt(-1). Note n is positive for\n-     * forward transform and negative for inverse transform.\n+     * forward transform and negative for inverse transform. </p>\n      * \n      * @param n the integer passed in\n      * @throws IllegalArgumentException if n = 0\n      * The interval is divided equally into N sections and sample points\n      * are taken from min to max-(max-min)/N. Usually f(x) is periodic\n      * such that f(min) = f(max) (note max is not sampled), but we don't\n-     * require that.\n+     * require that.</p>\n      *\n      * @param f the function to be sampled\n      * @param min the lower bound for the interval\n--- a/src/java/org/apache/commons/math/transform/FastSineTransformer.java\n+++ b/src/java/org/apache/commons/math/transform/FastSineTransformer.java\n  * <b>Fast Fourier Transforms</b>, ISBN 0849371635, chapter 3.\n  * <p>\n  * FST is its own inverse, up to a multiplier depending on conventions.\n- * The equations are listed in the comments of the corresponding methods.\n+ * The equations are listed in the comments of the corresponding methods.</p>\n  * <p>\n  * Similar to FFT, we also require the length of data set to be power of 2.\n  * In addition, the first element must be 0 and it's enforced in function\n- * transformation after sampling.\n+ * transformation after sampling.</p>\n  *\n  * @version $Revision$ $Date$\n  */\n      * Transform the given real data set.\n      * <p>\n      * The formula is $ F_n = \\Sigma_{k=0}^{N-1} f_k \\sin(\\pi nk/N) $\n-     *\n+     * </p>\n+     * \n      * @param f the real data array to be transformed\n      * @return the real transformed array\n      * @throws MathException if any math-related errors occur\n      * Transform the given real function, sampled on the given interval.\n      * <p>\n      * The formula is $ F_n = \\Sigma_{k=0}^{N-1} f_k \\sin(\\pi nk/N) $\n-     *\n+     * </p>\n+     * \n      * @param f the function to be sampled and transformed\n      * @param min the lower bound for the interval\n      * @param max the upper bound for the interval\n      * Transform the given real data set.\n      * <p>\n      * The formula is $ F_n = \\sqrt{2/N} \\Sigma_{k=0}^{N-1} f_k \\sin(\\pi nk/N) $\n-     *\n+     * </p>\n+     * \n      * @param f the real data array to be transformed\n      * @return the real transformed array\n      * @throws MathException if any math-related errors occur\n      * Transform the given real function, sampled on the given interval.\n      * <p>\n      * The formula is $ F_n = \\sqrt{2/N} \\Sigma_{k=0}^{N-1} f_k \\sin(\\pi nk/N) $\n-     *\n+     * </p>\n+     * \n      * @param f the function to be sampled and transformed\n      * @param min the lower bound for the interval\n      * @param max the upper bound for the interval\n      * Inversely transform the given real data set.\n      * <p>\n      * The formula is $ f_k = (2/N) \\Sigma_{n=0}^{N-1} F_n \\sin(\\pi nk/N) $\n-     *\n+     * </p>\n+     * \n      * @param f the real data array to be inversely transformed\n      * @return the real inversely transformed array\n      * @throws MathException if any math-related errors occur\n      * Inversely transform the given real function, sampled on the given interval.\n      * <p>\n      * The formula is $ f_k = (2/N) \\Sigma_{n=0}^{N-1} F_n \\sin(\\pi nk/N) $\n-     *\n+     * </p>\n+     * \n      * @param f the function to be sampled and inversely transformed\n      * @param min the lower bound for the interval\n      * @param max the upper bound for the interval\n      * Inversely transform the given real data set.\n      * <p>\n      * The formula is $ f_k = \\sqrt{2/N} \\Sigma_{n=0}^{N-1} F_n \\sin(\\pi nk/N) $\n-     *\n+     * </p>\n+     * \n      * @param f the real data array to be inversely transformed\n      * @return the real inversely transformed array\n      * @throws MathException if any math-related errors occur\n      * Inversely transform the given real function, sampled on the given interval.\n      * <p>\n      * The formula is $ f_k = \\sqrt{2/N} \\Sigma_{n=0}^{N-1} F_n \\sin(\\pi nk/N) $\n-     *\n+     * </p>\n+     * \n      * @param f the function to be sampled and inversely transformed\n      * @param min the lower bound for the interval\n      * @param max the upper bound for the interval\n--- a/src/java/org/apache/commons/math/util/ContinuedFraction.java\n+++ b/src/java/org/apache/commons/math/util/ContinuedFraction.java\n      * The recurrence relationship defined in those equations can result in\n      * very large intermediate results which can result in numerical overflow.\n      * As a means to combat these overflow conditions, the intermediate results\n-     * are scaled whenever they threaten to become numerically unstable.\n+     * are scaled whenever they threaten to become numerically unstable.</p>\n      *   \n      * @param x the evaluation point.\n      * @param epsilon maximum error allowed.\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n      * <code>Long.MAX_VALUE</code> an <code>ArithMeticException\n      *      </code> is\n      * thrown.</li>\n-     * </ul>\n+     * </ul></p>\n      * \n      * @param n the size of the set\n      * @param k the size of the subsets to be counted\n      * largest value of <code>n</code> for which all coefficients are <\n      * Double.MAX_VALUE is 1029. If the computed value exceeds Double.MAX_VALUE,\n      * Double.POSITIVE_INFINITY is returned</li>\n-     * </ul>\n+     * </ul></p>\n      * \n      * @param n the size of the set\n      * @param k the size of the subsets to be counted\n      * <ul>\n      * <li> <code>0 <= k <= n </code> (otherwise\n      * <code>IllegalArgumentException</code> is thrown)</li>\n-     * </ul>\n+     * </ul></p>\n      * \n      * @param n the size of the set\n      * @param k the size of the subsets to be counted\n      * <ul>\n      * <li> <code>n >= 0</code> (otherwise\n      * <code>IllegalArgumentException</code> is thrown)</li>\n-     * </ul>\n+     * </ul></p>\n      * \n      * @param n argument\n      * @return <code>n!</code>\n      * If <code>direction</code> is greater than or equal to<code>d</code>,\n      * the smallest machine representable number strictly greater than\n      * <code>d</code> is returned; otherwise the largest representable number\n-     * strictly less than <code>d</code> is returned.\n-     * <p>\n-     * If <code>d</code> is NaN or Infinite, it is returned unchanged.\n+     * strictly less than <code>d</code> is returned.</p>\n+     * <p>\n+     * If <code>d</code> is NaN or Infinite, it is returned unchanged.</p>\n      * \n      * @param d base number\n      * @param direction (the only important thing is whether\n      * for byte value <code>x</code>.\n      * <p>\n      * For a byte value x, this method returns (byte)(+1) if x > 0, (byte)(0) if\n-     * x = 0, and (byte)(-1) if x < 0.\n+     * x = 0, and (byte)(-1) if x < 0.</p>\n      * \n      * @param x the value, a byte\n      * @return (byte)(+1), (byte)(0), or (byte)(-1), depending on the sign of x\n      * For a double value <code>x</code>, this method returns\n      * <code>+1.0</code> if <code>x > 0</code>, <code>0.0</code> if\n      * <code>x = 0.0</code>, and <code>-1.0</code> if <code>x < 0</code>.\n-     * Returns <code>NaN</code> if <code>x</code> is <code>NaN</code>.\n+     * Returns <code>NaN</code> if <code>x</code> is <code>NaN</code>.</p>\n      * \n      * @param x the value, a double\n      * @return +1.0, 0.0, or -1.0, depending on the sign of x\n      * <p>\n      * For a float value x, this method returns +1.0F if x > 0, 0.0F if x =\n      * 0.0F, and -1.0F if x < 0. Returns <code>NaN</code> if <code>x</code>\n-     * is <code>NaN</code>.\n+     * is <code>NaN</code>.</p>\n      * \n      * @param x the value, a float\n      * @return +1.0F, 0.0F, or -1.0F, depending on the sign of x\n      * for int value <code>x</code>.\n      * <p>\n      * For an int value x, this method returns +1 if x > 0, 0 if x = 0, and -1\n-     * if x < 0.\n+     * if x < 0.</p>\n      * \n      * @param x the value, an int\n      * @return +1, 0, or -1, depending on the sign of x\n      * for long value <code>x</code>.\n      * <p>\n      * For a long value x, this method returns +1L if x > 0, 0L if x = 0, and\n-     * -1L if x < 0.\n+     * -1L if x < 0.</p>\n      * \n      * @param x the value, a long\n      * @return +1L, 0L, or -1L, depending on the sign of x\n      * for short value <code>x</code>.\n      * <p>\n      * For a short value x, this method returns (short)(+1) if x > 0, (short)(0)\n-     * if x = 0, and (short)(-1) if x < 0.\n+     * if x = 0, and (short)(-1) if x < 0.</p>\n      * \n      * @param x the value, a short\n      * @return (short)(+1), (short)(0), or (short)(-1), depending on the sign of\n--- a/src/java/org/apache/commons/math/util/ResizableDoubleArray.java\n+++ b/src/java/org/apache/commons/math/util/ResizableDoubleArray.java\n  * properties enforce this requirement, throwing IllegalArgumentException if it\n  * is violated.\n  * </p>\n- * <p>\n  * @version $Revision$ $Date$\n  */\n public class ResizableDoubleArray implements DoubleArray, Serializable {\n      * the new array size will be <code>internalArray.length * expansionFactor.</code>\n      * If <code>expansionMode</code> is set to ADDITIVE_MODE,  the length\n      * after expansion will be <code>internalArray.length + expansionFactor</code>\n+     * </p>\n      */\n     protected synchronized void expand() {\n ", "timestamp": 1202018040, "metainfo": ""}