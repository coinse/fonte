{"sha": "f84d2e0666306d510837b3129c50fb1a31e11e1c", "log": "MATH-664 Added a user-defined singularity threshold (with 0 as default to retain previous behaviour).   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/QRDecomposition.java\n+++ b/src/main/java/org/apache/commons/math/linear/QRDecomposition.java\n  * @since 1.2 (changed to concrete class in 3.0)\n  */\n public class QRDecomposition {\n-\n     /**\n      * A packed TRANSPOSED representation of the QR decomposition.\n      * <p>The elements BELOW the diagonal are the elements of the UPPER triangular\n      * from which an explicit form of Q can be recomputed if desired.</p>\n      */\n     private double[][] qrt;\n-\n     /** The diagonal elements of R. */\n     private double[] rDiag;\n-\n     /** Cached value of Q. */\n     private RealMatrix cachedQ;\n-\n     /** Cached value of QT. */\n     private RealMatrix cachedQT;\n-\n     /** Cached value of R. */\n     private RealMatrix cachedR;\n-\n     /** Cached value of H. */\n     private RealMatrix cachedH;\n+    /** Singularity threshold. */\n+    private final double threshold;\n \n     /**\n      * Calculates the QR-decomposition of the given matrix.\n+     * The singularity threshold defaults to zero.\n+     *\n      * @param matrix The matrix to decompose.\n+     *\n+     * @see #QRDecomposition(RealMatrix,double)\n      */\n     public QRDecomposition(RealMatrix matrix) {\n+        this(matrix, 0d);\n+    }\n+\n+    /**\n+     * Calculates the QR-decomposition of the given matrix.\n+     *\n+     * @param matrix The matrix to decompose.\n+     * @param threshold Singularity threshold.\n+     */\n+    public QRDecomposition(RealMatrix matrix,\n+                           double threshold) {\n+        this.threshold = threshold;\n \n         final int m = matrix.getRowDimension();\n         final int n = matrix.getColumnDimension();\n      * @return a solver\n      */\n     public DecompositionSolver getSolver() {\n-        return new Solver(qrt, rDiag);\n+        return new Solver(qrt, rDiag, threshold);\n     }\n \n     /** Specialized solver. */\n     private static class Solver implements DecompositionSolver {\n-\n         /**\n          * A packed TRANSPOSED representation of the QR decomposition.\n          * <p>The elements BELOW the diagonal are the elements of the UPPER triangular\n          * from which an explicit form of Q can be recomputed if desired.</p>\n          */\n         private final double[][] qrt;\n-\n         /** The diagonal elements of R. */\n         private final double[] rDiag;\n+        /** Singularity threshold. */\n+        private final double threshold;\n \n         /**\n          * Build a solver from decomposed matrix.\n-         * @param qrt packed TRANSPOSED representation of the QR decomposition\n-         * @param rDiag diagonal elements of R\n+         *\n+         * @param qrt Packed TRANSPOSED representation of the QR decomposition.\n+         * @param rDiag Diagonal elements of R.\n+         * @param threshold Singularity threshold.\n          */\n-        private Solver(final double[][] qrt, final double[] rDiag) {\n+        private Solver(final double[][] qrt,\n+                       final double[] rDiag,\n+                       final double threshold) {\n             this.qrt   = qrt;\n             this.rDiag = rDiag;\n+            this.threshold = threshold;\n         }\n \n         /** {@inheritDoc} */\n         public boolean isNonSingular() {\n-\n             for (double diag : rDiag) {\n-                if (diag == 0) {\n+                if (FastMath.abs(diag) <= threshold) {\n                     return false;\n                 }\n             }", "timestamp": 1326373546, "metainfo": ""}