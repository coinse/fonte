{"sha": "b9f4e914df109dedee24e7b5674d6cfdee170ff9", "log": "fixed javadoc  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/SparseFieldMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/SparseFieldMatrix.java\n import org.apache.commons.math.util.OpenIntToFieldHashMap;\n \n /**\n-* Sparse matrix implementation based on an open addressed map.\n-* \n-* @version $Revision: 762117 $ $Date: 2009-04-05 09:53:35 -0700 (Sun, 05 Apr 2009) $\n-* @since 2.0\n-*/\n+ * Sparse matrix implementation based on an open addressed map.\n+ * \n+ * @param <T> the type of the field elements\n+ * @version $Revision: 762117 $ $Date: 2009-04-05 09:53:35 -0700 (Sun, 05 Apr 2009) $\n+ * @since 2.0\n+ */\n public class SparseFieldMatrix<T extends FieldElement<T>> extends AbstractFieldMatrix<T> {\n     /**\n      *  Serial id\n--- a/src/java/org/apache/commons/math/linear/SparseFieldVector.java\n+++ b/src/java/org/apache/commons/math/linear/SparseFieldVector.java\n \n /**\n  * This class implements the {@link FieldVector} interface with a {@link OpenIntToFieldHashMap} backing store.\n+ * @param <T> the type of the field elements\n  * @version $Revision: 728186 $ $Date: 2009-04-25 12:39:38 -0700 (Sat, 25 Apr 2009) $\n  * @since 2.0\n-*/\n+ */\n public class SparseFieldVector<T extends FieldElement<T>> implements FieldVector<T>, Serializable {\n     \n     /**\n      * or one of the <code>append</code> method ({@link #append(Field<T>)}, {@link\n      * #append(Field<T>[])}, {@link #append(FieldVector)}) to gather data\n      * into this vector.</p>\n+     * @param field field to which the elements belong\n      */\n     public SparseFieldVector(Field<T> field) {\n         this(field, 0);\n     \n     /**\n      * Construct a (dimension)-length vector of zeros.\n+     * @param field field to which the elements belong\n      * @param dimension Size of the vector\n-     * @param epsilon The tolerance for having a value considered zero\n      */\n     public SparseFieldVector(Field<T> field, int dimension) {\n         this.field = field;\n     \n     /**\n      * Build a vector with known the sparseness (for advanced use only).\n+     * @param field field to which the elements belong\n      * @param dimension The size of the vector\n      * @param expectedSize The expected number of non-zero entries\n-     * @param epsilon The tolerance for having a value considered zero\n      */\n     public SparseFieldVector(Field<T> field, int dimension, int expectedSize) {\n         this.field = field;\n     /**\n      * Create from a Field array.\n      * Only non-zero entries will be stored\n+     * @param field field to which the elements belong\n      * @param values The set of values to create from\n-     * @param epsilon The tolerance for having a value considered zero\n      */\n     public SparseFieldVector(Field<T> field, T[] values) {\n         this.field = field;\n     \n     /**\n      * Optimized method to add sparse vectors.\n+     * @param v vector to add\n      * @return The sum of <code>this</code> and <code>v</code>\n      * @throws IllegalArgumentException If the dimensions don't match\n      */\n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n         }\n     }\n \n-    /* (non-Javadoc)\n-     * @see java.lang.Object#hashCode()\n-     */\n+    /** {@inheritDoc} */\n     @Override\n     public int hashCode() {\n         final int prime = 31;\n         int result = 1;\n-        result = prime * result\n-                + ((freqTable == null) ? 0 : freqTable.hashCode());\n+        result = prime * result +\n+                 ((freqTable == null) ? 0 : freqTable.hashCode());\n         return result;\n     }\n \n-    /* (non-Javadoc)\n-     * @see java.lang.Object#equals(java.lang.Object)\n-     */\n+    /** {@inheritDoc} */\n     @Override\n     public boolean equals(Object obj) {\n         if (this == obj)\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java\n         Arrays.fill(productsSums, 0.0);\n     }\n \n-    /** @inheritDoc{} */\n+    /** {@inheritDoc} */\n     @Override\n     public int hashCode() {\n         final int prime = 31;\n         return result;\n     }\n \n-    /** @inheritDoc{} */\n+    /** {@inheritDoc} */\n     @Override\n     public boolean equals(Object obj) {\n         if (this == obj)\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java\n         return (means.length == 0) ? 0 : means[0].getN();\n     }\n \n-    /* @inheritDocs{} */\n+    /** {@inheritDoc} */\n     @Override\n     public int hashCode() {\n         final int prime = 31;\n         return result;\n     }\n \n-    /* @inheritDocs{} */\n+    /** {@inheritDoc} */\n     @Override\n     public boolean equals(Object obj) {\n         if (this == obj)", "timestamp": 1243862659, "metainfo": ""}