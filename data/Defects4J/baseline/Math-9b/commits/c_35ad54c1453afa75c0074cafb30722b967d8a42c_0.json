{"sha": "35ad54c1453afa75c0074cafb30722b967d8a42c", "log": "use the new function objects were possible in tests.  ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/analysis/QuinticFunction.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/QuinticFunction.java\n  */\n package org.apache.commons.math3.analysis;\n \n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+\n /**\n  * Auxiliary class for testing solvers.\n  *\n  * @version $Id$\n  */\n-public class QuinticFunction implements DifferentiableUnivariateFunction {\n+public class QuinticFunction implements UnivariateDifferentiable {\n \n     /* Evaluate quintic.\n      * @see org.apache.commons.math3.UnivariateFunction#value(double)\n         return (x-1)*(x-0.5)*x*(x+0.5)*(x+1);\n     }\n \n-    public UnivariateFunction derivative() {\n-        return new UnivariateFunction() {\n-            public double value(double x) {\n-                return (5*x*x-3.75)*x*x+0.25;\n-            }\n-        };\n+    public DerivativeStructure value(DerivativeStructure t) {\n+        return t.subtract(1).multiply(t.subtract(0.5)).multiply(t).multiply(t.add(0.5)).multiply(t.add(1));\n     }\n+\n }\n--- a/src/test/java/org/apache/commons/math3/analysis/SumSincFunction.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/SumSincFunction.java\n  */\n package org.apache.commons.math3.analysis;\n \n+import org.apache.commons.math3.analysis.function.Sinc;\n+\n /**\n  * Auxiliary class for testing optimizers.\n  *\n  * @version $Id$\n  */\n public class SumSincFunction implements DifferentiableMultivariateFunction {\n-    private static final DifferentiableUnivariateFunction sinc = new SincFunction();\n+    private static final DifferentiableUnivariateFunction sinc = new Sinc();\n     private static final UnivariateFunction sincDeriv = sinc.derivative();\n \n     /**\n--- a/src/test/java/org/apache/commons/math3/analysis/XMinus5Function.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/XMinus5Function.java\n  */\n package org.apache.commons.math3.analysis;\n \n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+\n /**\n  * Auxiliary class for testing solvers.\n  *\n  * @version $Id$\n  */\n-public class XMinus5Function implements DifferentiableUnivariateFunction {\n+public class XMinus5Function implements UnivariateDifferentiable {\n \n     /* Evaluate x - 5 fuction.\n      * @see org.apache.commons.math3.UnivariateFunction#value(double)\n         return x - 5;\n     }\n \n-    /* First derivative of x - 5 function\n-     */\n-    public UnivariateFunction derivative() {\n-        return new UnivariateFunction() {\n-            public double value(double x) {\n-                return 1.0;\n-            }\n-        };\n+    public DerivativeStructure value(DerivativeStructure t) {\n+        return t.subtract(5);\n     }\n+\n }\n--- a/src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java\n import java.util.Random;\n \n import org.apache.commons.math3.analysis.QuinticFunction;\n-import org.apache.commons.math3.analysis.SinFunction;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.function.Sin;\n import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;\n import org.apache.commons.math3.exception.TooManyEvaluationsException;\n import org.apache.commons.math3.util.FastMath;\n \n     @Test\n     public void testSinFunction() {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         BaseAbstractUnivariateIntegrator integrator\n             = new IterativeLegendreGaussIntegrator(5, 1.0e-14, 1.0e-10, 2, 15);\n         double min, max, expected, result, tolerance;\n--- a/src/test/java/org/apache/commons/math3/analysis/integration/LegendreGaussIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/integration/LegendreGaussIntegratorTest.java\n import java.util.Random;\n \n import org.apache.commons.math3.analysis.QuinticFunction;\n-import org.apache.commons.math3.analysis.SinFunction;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.function.Sin;\n import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;\n import org.apache.commons.math3.exception.TooManyEvaluationsException;\n import org.apache.commons.math3.util.FastMath;\n \n     @Test\n     public void testSinFunction() {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         BaseAbstractUnivariateIntegrator integrator = new LegendreGaussIntegrator(5, 1.0e-14, 1.0e-10, 2, 15);\n         double min, max, expected, result, tolerance;\n \n--- a/src/test/java/org/apache/commons/math3/analysis/integration/RombergIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/integration/RombergIntegratorTest.java\n package org.apache.commons.math3.analysis.integration;\n \n import org.apache.commons.math3.analysis.QuinticFunction;\n-import org.apache.commons.math3.analysis.SinFunction;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.function.Sin;\n import org.apache.commons.math3.exception.NumberIsTooLargeException;\n import org.apache.commons.math3.exception.NumberIsTooSmallException;\n import org.apache.commons.math3.util.FastMath;\n      */\n     @Test\n     public void testSinFunction() {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         UnivariateIntegrator integrator = new RombergIntegrator();\n         double min, max, expected, result, tolerance;\n \n      */\n     @Test\n     public void testParameters() {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n \n         try {\n             // bad interval\n--- a/src/test/java/org/apache/commons/math3/analysis/integration/SimpsonIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/integration/SimpsonIntegratorTest.java\n package org.apache.commons.math3.analysis.integration;\n \n import org.apache.commons.math3.analysis.QuinticFunction;\n-import org.apache.commons.math3.analysis.SinFunction;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.function.Sin;\n import org.apache.commons.math3.exception.NumberIsTooLargeException;\n import org.apache.commons.math3.exception.NumberIsTooSmallException;\n import org.apache.commons.math3.util.FastMath;\n      */\n     @Test\n     public void testSinFunction() {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         UnivariateIntegrator integrator = new SimpsonIntegrator();\n         double min, max, expected, result, tolerance;\n \n      */\n     @Test\n     public void testParameters() {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         try {\n             // bad interval\n             new SimpsonIntegrator().integrate(1000, f, 1, -1);\n--- a/src/test/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegratorTest.java\n package org.apache.commons.math3.analysis.integration;\n \n import org.apache.commons.math3.analysis.QuinticFunction;\n-import org.apache.commons.math3.analysis.SinFunction;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.function.Sin;\n import org.apache.commons.math3.exception.NumberIsTooLargeException;\n import org.apache.commons.math3.exception.NumberIsTooSmallException;\n import org.apache.commons.math3.util.FastMath;\n      */\n     @Test\n     public void testSinFunction() {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         UnivariateIntegrator integrator = new TrapezoidIntegrator();\n         double min, max, expected, result, tolerance;\n \n      */\n     @Test\n     public void testParameters() {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n \n         try {\n             // bad interval\n--- a/src/test/java/org/apache/commons/math3/analysis/interpolation/DividedDifferenceInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/interpolation/DividedDifferenceInterpolatorTest.java\n  */\n package org.apache.commons.math3.analysis.interpolation;\n \n+import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.function.Expm1;\n+import org.apache.commons.math3.analysis.function.Sin;\n import org.apache.commons.math3.exception.NonMonotonicSequenceException;\n-import org.apache.commons.math3.analysis.Expm1Function;\n-import org.apache.commons.math3.analysis.SinFunction;\n-import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.util.FastMath;\n import org.junit.Assert;\n import org.junit.Test;\n      */\n     @Test\n     public void testSinFunction() {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         UnivariateInterpolator interpolator = new DividedDifferenceInterpolator();\n         double x[], y[], z, expected, result, tolerance;\n \n      */\n     @Test\n     public void testExpm1Function() {\n-        UnivariateFunction f = new Expm1Function();\n+        UnivariateFunction f = new Expm1();\n         UnivariateInterpolator interpolator = new DividedDifferenceInterpolator();\n         double x[], y[], z, expected, result, tolerance;\n \n--- a/src/test/java/org/apache/commons/math3/analysis/interpolation/NevilleInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/interpolation/NevilleInterpolatorTest.java\n  */\n package org.apache.commons.math3.analysis.interpolation;\n \n+import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.function.Expm1;\n+import org.apache.commons.math3.analysis.function.Sin;\n import org.apache.commons.math3.exception.NonMonotonicSequenceException;\n-import org.apache.commons.math3.analysis.Expm1Function;\n-import org.apache.commons.math3.analysis.SinFunction;\n-import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.util.FastMath;\n import org.junit.Assert;\n import org.junit.Test;\n      */\n     @Test\n     public void testSinFunction() {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         UnivariateInterpolator interpolator = new NevilleInterpolator();\n         double x[], y[], z, expected, result, tolerance;\n \n      */\n     @Test\n     public void testExpm1Function() {\n-        UnivariateFunction f = new Expm1Function();\n+        UnivariateFunction f = new Expm1();\n         UnivariateInterpolator interpolator = new NevilleInterpolator();\n         double x[], y[], z, expected, result, tolerance;\n \n--- a/src/test/java/org/apache/commons/math3/analysis/solvers/BaseSecantSolverAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/solvers/BaseSecantSolverAbstractTest.java\n package org.apache.commons.math3.analysis.solvers;\n \n import org.apache.commons.math3.analysis.QuinticFunction;\n-import org.apache.commons.math3.analysis.SinFunction;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.XMinus5Function;\n+import org.apache.commons.math3.analysis.function.Sin;\n+import org.apache.commons.math3.exception.NoBracketingException;\n import org.apache.commons.math3.exception.NumberIsTooLargeException;\n-import org.apache.commons.math3.exception.NoBracketingException;\n import org.apache.commons.math3.util.FastMath;\n import org.junit.Assert;\n import org.junit.Test;\n         // The sinus function is behaved well around the root at pi. The second\n         // order derivative is zero, which means linear approximating methods\n         // still converge quadratically.\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         double result;\n         UnivariateSolver solver = getSolver();\n \n \n     @Test\n     public void testBadEndpoints() {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         UnivariateSolver solver = getSolver();\n         try {  // bad interval\n             solver.solve(100, f, 1, -1);\n \n     @Test\n     public void testSolutionLeftSide() {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         UnivariateSolver solver = getSolver();\n         double left = -1.5;\n         double right = 0.05;\n \n     @Test\n     public void testSolutionRightSide() {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         UnivariateSolver solver = getSolver();\n         double left = -1.5;\n         double right = 0.05;\n     }\n     @Test\n     public void testSolutionBelowSide() {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         UnivariateSolver solver = getSolver();\n         double left = -1.5;\n         double right = 0.05;\n \n     @Test\n     public void testSolutionAboveSide() {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         UnivariateSolver solver = getSolver();\n         double left = -1.5;\n         double right = 0.05;\n--- a/src/test/java/org/apache/commons/math3/analysis/solvers/BisectionSolverTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/solvers/BisectionSolverTest.java\n package org.apache.commons.math3.analysis.solvers;\n \n import org.apache.commons.math3.analysis.QuinticFunction;\n-import org.apache.commons.math3.analysis.SinFunction;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.function.Sin;\n import org.apache.commons.math3.util.FastMath;\n import org.junit.Assert;\n import org.junit.Test;\n public final class BisectionSolverTest {\n     @Test\n     public void testSinZero() {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         double result;\n \n         BisectionSolver solver = new BisectionSolver();\n \n     @Test\n     public void testMath369() {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         BisectionSolver solver = new BisectionSolver();\n         Assert.assertEquals(FastMath.PI, solver.solve(100, f, 3.0, 3.2, 3.1), solver.getAbsoluteAccuracy());\n     }\n--- a/src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.QuinticFunction;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n import org.apache.commons.math3.exception.NumberIsTooSmallException;\n import org.apache.commons.math3.exception.TooManyEvaluationsException;\n-import org.apache.commons.math3.util.FastMath;\n import org.junit.Assert;\n import org.junit.Test;\n \n         // 80 digits and checked with emacs (only the first 20 digits are reproduced here)\n         compare(new TestFunction(0.0, -2, 2) {\n             @Override\n-            public double value(double x)      { return FastMath.sin(x) - 0.5 * x; }\n-            @Override\n-            public double derivative(double x) { return FastMath.cos(x) - 0.5; }\n+            public DerivativeStructure value(DerivativeStructure x) {\n+                return x.sin().subtract(x.multiply(0.5));\n+            }\n         });\n         compare(new TestFunction(6.3087771299726890947, -5, 10) {\n             @Override\n-            public double value(double x)      { return FastMath.pow(x, 5) + x - 10000; }\n-            @Override\n-            public double derivative(double x) { return 5 * FastMath.pow(x, 4) + 1; }\n+            public DerivativeStructure value(DerivativeStructure x) {\n+                return x.pow(5).add(x).subtract(10000);\n+            }\n         });\n         compare(new TestFunction(9.6335955628326951924, 0.001, 10) {\n             @Override\n-            public double value(double x)      { return FastMath.sqrt(x) - 1 / x - 3; }\n-            @Override\n-            public double derivative(double x) { return 0.5 / FastMath.sqrt(x) + 1 / (x * x); }\n+            public DerivativeStructure value(DerivativeStructure x) {\n+                return x.sqrt().subtract(x.reciprocal()).subtract(3);\n+            }\n         });\n         compare(new TestFunction(2.8424389537844470678, -5, 5) {\n             @Override\n-            public double value(double x)      { return FastMath.exp(x) + x - 20; }\n-            @Override\n-            public double derivative(double x) { return FastMath.exp(x) + 1; }\n+            public DerivativeStructure value(DerivativeStructure x) {\n+                return x.exp().add(x).subtract(20);\n+            }\n         });\n         compare(new TestFunction(8.3094326942315717953, 0.001, 10) {\n             @Override\n-            public double value(double x)      { return FastMath.log(x) + FastMath.sqrt(x) - 5; }\n-            @Override\n-            public double derivative(double x) { return 1 / x + 0.5 / FastMath.sqrt(x); }\n+            public DerivativeStructure value(DerivativeStructure x) {\n+                return x.log().add(x.sqrt()).subtract(5);\n+            }\n         });\n         compare(new TestFunction(1.4655712318767680266, -0.5, 1.5) {\n             @Override\n-            public double value(double x)      { return (x - 1) * x * x - 1; }\n-            @Override\n-            public double derivative(double x) { return (3 * x - 2) * x; }\n+            public DerivativeStructure value(DerivativeStructure x) {\n+                return x.subtract(1).multiply(x).multiply(x).subtract(1);\n+            }\n         });\n \n     }\n         compare(f, f.getRoot(), f.getMin(), f.getMax());\n     }\n \n-    private void compare(DifferentiableUnivariateFunction f,\n+    private void compare(final UnivariateDifferentiable f,\n                          double root, double min, double max) {\n+        DifferentiableUnivariateFunction df = new DifferentiableUnivariateFunction() {\n+            public double value(double x) {\n+                return f.value(x);\n+            }\n+            \n+            public UnivariateFunction derivative() {\n+                return new UnivariateFunction() {\n+                    public double value(double x) {\n+                        return f.value(new DerivativeStructure(1, 1, 0, x)).getPartialDerivative(1);\n+                    }\n+                };\n+            }\n+        };\n         NewtonSolver newton = new NewtonSolver(1.0e-12);\n         BracketingNthOrderBrentSolver bracketing =\n                 new BracketingNthOrderBrentSolver(1.0e-12, 1.0e-12, 1.0e-18, 5);\n         double resultN;\n         try {\n-            resultN = newton.solve(100, f, min, max);\n+            resultN = newton.solve(100, df, min, max);\n         } catch (TooManyEvaluationsException tmee) {\n             resultN = Double.NaN;\n         }\n         double resultB;\n         try {\n-            resultB = bracketing.solve(100, f, min, max);\n+            resultB = bracketing.solve(100, df, min, max);\n         } catch (TooManyEvaluationsException tmee) {\n             resultB = Double.NaN;\n         }\n         Assert.assertTrue(bracketing.getEvaluations() < newton.getEvaluations());\n     }\n \n-    private static abstract class TestFunction implements DifferentiableUnivariateFunction {\n+    private static abstract class TestFunction implements UnivariateDifferentiable {\n \n         private final double root;\n         private final double min;\n             return max;\n         }\n \n-        public abstract double value(double x);\n-\n-        public abstract double derivative(double x);\n-\n-        public UnivariateFunction derivative() {\n-            return new UnivariateFunction() {\n-                public double value(double x) {\n-                     return derivative(x);\n-                }\n-            };\n-        }\n+        public double value(final double x) {\n+            return value(new DerivativeStructure(0, 0, x)).getValue();\n+        }\n+\n+        public abstract DerivativeStructure value(final DerivativeStructure t);\n \n     }\n \n--- a/src/test/java/org/apache/commons/math3/analysis/solvers/BrentSolverTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/solvers/BrentSolverTest.java\n  */\n package org.apache.commons.math3.analysis.solvers;\n \n+import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n+import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.MonitoredFunction;\n import org.apache.commons.math3.analysis.QuinticFunction;\n-import org.apache.commons.math3.analysis.SinFunction;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n-import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n-import org.apache.commons.math3.analysis.FunctionUtils;\n+import org.apache.commons.math3.analysis.function.Constant;\n+import org.apache.commons.math3.analysis.function.Inverse;\n+import org.apache.commons.math3.analysis.function.Sin;\n import org.apache.commons.math3.analysis.function.Sqrt;\n-import org.apache.commons.math3.analysis.function.Inverse;\n-import org.apache.commons.math3.analysis.function.Constant;\n+import org.apache.commons.math3.exception.NoBracketingException;\n+import org.apache.commons.math3.exception.NumberIsTooLargeException;\n+import org.apache.commons.math3.exception.TooManyEvaluationsException;\n import org.apache.commons.math3.util.FastMath;\n-import org.apache.commons.math3.exception.NumberIsTooLargeException;\n-import org.apache.commons.math3.exception.NoBracketingException;\n-import org.apache.commons.math3.exception.TooManyEvaluationsException;\n import org.junit.Assert;\n import org.junit.Test;\n \n         // The sinus function is behaved well around the root at pi. The second\n         // order derivative is zero, which means linar approximating methods will\n         // still converge quadratically.\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         double result;\n         UnivariateSolver solver = new BrentSolver();\n         // Somewhat benign interval. The function is monotone.\n \n     @Test\n     public void testRootEndpoints() {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         BrentSolver solver = new BrentSolver();\n \n         // endpoint is root\n \n     @Test\n     public void testBadEndpoints() {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         BrentSolver solver = new BrentSolver();\n         try {  // bad interval\n             solver.solve(100, f, 1, -1);\n--- a/src/test/java/org/apache/commons/math3/analysis/solvers/MullerSolver2Test.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/solvers/MullerSolver2Test.java\n  */\n package org.apache.commons.math3.analysis.solvers;\n \n-import org.apache.commons.math3.analysis.Expm1Function;\n import org.apache.commons.math3.analysis.QuinticFunction;\n-import org.apache.commons.math3.analysis.SinFunction;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.function.Expm1;\n+import org.apache.commons.math3.analysis.function.Sin;\n+import org.apache.commons.math3.exception.NoBracketingException;\n import org.apache.commons.math3.exception.NumberIsTooLargeException;\n-import org.apache.commons.math3.exception.NoBracketingException;\n import org.apache.commons.math3.util.FastMath;\n import org.junit.Assert;\n import org.junit.Test;\n      */\n     @Test\n     public void testSinFunction() {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         UnivariateSolver solver = new MullerSolver2();\n         double min, max, expected, result, tolerance;\n \n      */\n     @Test\n     public void testExpm1Function() {\n-        UnivariateFunction f = new Expm1Function();\n+        UnivariateFunction f = new Expm1();\n         UnivariateSolver solver = new MullerSolver2();\n         double min, max, expected, result, tolerance;\n \n      */\n     @Test\n     public void testParameters() {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         UnivariateSolver solver = new MullerSolver2();\n \n         try {\n--- a/src/test/java/org/apache/commons/math3/analysis/solvers/MullerSolverTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/solvers/MullerSolverTest.java\n  */\n package org.apache.commons.math3.analysis.solvers;\n \n-import org.apache.commons.math3.analysis.Expm1Function;\n import org.apache.commons.math3.analysis.QuinticFunction;\n-import org.apache.commons.math3.analysis.SinFunction;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.function.Expm1;\n+import org.apache.commons.math3.analysis.function.Sin;\n+import org.apache.commons.math3.exception.NoBracketingException;\n import org.apache.commons.math3.exception.NumberIsTooLargeException;\n-import org.apache.commons.math3.exception.NoBracketingException;\n import org.apache.commons.math3.util.FastMath;\n import org.junit.Assert;\n import org.junit.Test;\n      */\n     @Test\n     public void testSinFunction() {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         UnivariateSolver solver = new MullerSolver();\n         double min, max, expected, result, tolerance;\n \n      */\n     @Test\n     public void testExpm1Function() {\n-        UnivariateFunction f = new Expm1Function();\n+        UnivariateFunction f = new Expm1();\n         UnivariateSolver solver = new MullerSolver();\n         double min, max, expected, result, tolerance;\n \n      */\n     @Test\n     public void testParameters() {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         UnivariateSolver solver = new MullerSolver();\n \n         try {\n--- a/src/test/java/org/apache/commons/math3/analysis/solvers/NewtonSolverTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/solvers/NewtonSolverTest.java\n \n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.QuinticFunction;\n-import org.apache.commons.math3.analysis.SinFunction;\n+import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.function.Sin;\n import org.apache.commons.math3.util.FastMath;\n import org.junit.Assert;\n import org.junit.Test;\n      */\n     @Test\n     public void testSinZero() {\n-        DifferentiableUnivariateFunction f = new SinFunction();\n+        DifferentiableUnivariateFunction f = new Sin();\n         double result;\n \n         NewtonSolver solver = new NewtonSolver();\n      */\n     @Test\n     public void testQuinticZero() {\n-        DifferentiableUnivariateFunction f = new QuinticFunction();\n+        final UnivariateDifferentiable q = new QuinticFunction();\n+        DifferentiableUnivariateFunction f = new DifferentiableUnivariateFunction() {\n+\n+            public double value(double x) {\n+                return q.value(x);\n+            }\n+\n+            public UnivariateFunction derivative() {\n+                return new UnivariateFunction() {\n+                    public double value(double x) {\n+                        return q.value(new DerivativeStructure(1, 1, 0, x)).getPartialDerivative(1);\n+                    }\n+                };\n+            }\n+\n+        };\n         double result;\n \n         NewtonSolver solver = new NewtonSolver();\n--- a/src/test/java/org/apache/commons/math3/analysis/solvers/RiddersSolverTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/solvers/RiddersSolverTest.java\n  */\n package org.apache.commons.math3.analysis.solvers;\n \n-import org.apache.commons.math3.analysis.Expm1Function;\n import org.apache.commons.math3.analysis.QuinticFunction;\n-import org.apache.commons.math3.analysis.SinFunction;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n-import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.analysis.function.Expm1;\n+import org.apache.commons.math3.analysis.function.Sin;\n import org.apache.commons.math3.exception.NoBracketingException;\n import org.apache.commons.math3.exception.NumberIsTooLargeException;\n+import org.apache.commons.math3.util.FastMath;\n import org.junit.Assert;\n import org.junit.Test;\n \n      */\n     @Test\n     public void testSinFunction() {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         UnivariateSolver solver = new RiddersSolver();\n         double min, max, expected, result, tolerance;\n \n      */\n     @Test\n     public void testExpm1Function() {\n-        UnivariateFunction f = new Expm1Function();\n+        UnivariateFunction f = new Expm1();\n         UnivariateSolver solver = new RiddersSolver();\n         double min, max, expected, result, tolerance;\n \n      */\n     @Test\n     public void testParameters() {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         UnivariateSolver solver = new RiddersSolver();\n \n         try {\n--- a/src/test/java/org/apache/commons/math3/analysis/solvers/UnivariateSolverUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/solvers/UnivariateSolverUtilsTest.java\n \n package org.apache.commons.math3.analysis.solvers;\n \n-import org.apache.commons.math3.exception.MathIllegalArgumentException;\n-import org.apache.commons.math3.analysis.SinFunction;\n import org.apache.commons.math3.analysis.QuinticFunction;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.function.Sin;\n+import org.apache.commons.math3.exception.MathIllegalArgumentException;\n import org.apache.commons.math3.util.FastMath;\n import org.junit.Assert;\n import org.junit.Test;\n  */\n public class UnivariateSolverUtilsTest {\n \n-    protected UnivariateFunction sin = new SinFunction();\n+    protected UnivariateFunction sin = new Sin();\n \n     @Test(expected=MathIllegalArgumentException.class)\n     public void testSolveNull() {\n--- a/src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java\n package org.apache.commons.math3.optimization.univariate;\n \n \n+import org.apache.commons.math3.analysis.QuinticFunction;\n+import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.function.Sin;\n import org.apache.commons.math3.exception.NumberIsTooLargeException;\n import org.apache.commons.math3.exception.NumberIsTooSmallException;\n import org.apache.commons.math3.exception.TooManyEvaluationsException;\n-import org.apache.commons.math3.analysis.QuinticFunction;\n-import org.apache.commons.math3.analysis.SinFunction;\n-import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.optimization.ConvergenceChecker;\n import org.apache.commons.math3.optimization.GoalType;\n-import org.apache.commons.math3.optimization.ConvergenceChecker;\n import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;\n import org.apache.commons.math3.util.FastMath;\n import org.junit.Assert;\n \n     @Test\n     public void testSinMin() {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         UnivariateOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);\n         Assert.assertEquals(3 * Math.PI / 2, optimizer.optimize(200, f, GoalType.MINIMIZE, 4, 5).getPoint(),1e-8);\n         Assert.assertTrue(optimizer.getEvaluations() <= 50);\n \n     @Test\n     public void testSinMinWithValueChecker() {\n-        final UnivariateFunction f = new SinFunction();\n+        final UnivariateFunction f = new Sin();\n         final ConvergenceChecker<UnivariatePointValuePair> checker = new SimpleUnivariateValueChecker(1e-5, 1e-14);\n         // The default stopping criterion of Brent's algorithm should not\n         // pass, but the search will stop at the given relative tolerance\n \n     @Test\n     public void testMinEndpoints() {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         UnivariateOptimizer optimizer = new BrentOptimizer(1e-8, 1e-14);\n \n         // endpoint is minimum\n--- a/src/test/java/org/apache/commons/math3/optimization/univariate/UnivariateMultiStartOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math3/optimization/univariate/UnivariateMultiStartOptimizerTest.java\n package org.apache.commons.math3.optimization.univariate;\n \n import org.apache.commons.math3.analysis.QuinticFunction;\n-import org.apache.commons.math3.analysis.SinFunction;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n-import org.apache.commons.math3.optimization.univariate.BrentOptimizer;\n+import org.apache.commons.math3.analysis.function.Sin;\n import org.apache.commons.math3.optimization.GoalType;\n import org.apache.commons.math3.random.JDKRandomGenerator;\n import org.apache.commons.math3.util.FastMath;\n+import org.junit.Assert;\n import org.junit.Test;\n-import org.junit.Assert;\n \n public class UnivariateMultiStartOptimizerTest {\n \n     @Test\n     public void testSinMin() {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         UnivariateOptimizer underlying = new BrentOptimizer(1e-10, 1e-14);\n         JDKRandomGenerator g = new JDKRandomGenerator();\n         g.setSeed(44428400075l);\n--- a/src/test/java/org/apache/commons/math3/transform/FastCosineTransformerTest.java\n+++ b/src/test/java/org/apache/commons/math3/transform/FastCosineTransformerTest.java\n import java.util.Arrays;\n import java.util.Collection;\n \n-import org.apache.commons.math3.analysis.SinFunction;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.function.Sin;\n import org.apache.commons.math3.analysis.function.Sinc;\n import org.apache.commons.math3.exception.MathIllegalStateException;\n import org.apache.commons.math3.util.FastMath;\n     @Test\n     public void testParameters()\n         throws Exception {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         FastCosineTransformer transformer;\n         transformer = new FastCosineTransformer(DctNormalization.STANDARD_DCT_I);\n \n     /** Test of transformer for the sine function. */\n     @Test\n     public void testSinFunction() {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         FastCosineTransformer transformer;\n         transformer = new FastCosineTransformer(DctNormalization.STANDARD_DCT_I);\n         double min, max, result[], tolerance = 1E-12;\n--- a/src/test/java/org/apache/commons/math3/transform/FastFourierTransformerTest.java\n+++ b/src/test/java/org/apache/commons/math3/transform/FastFourierTransformerTest.java\n \n import java.util.Random;\n \n-import org.apache.commons.math3.analysis.SinFunction;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.function.Sin;\n import org.apache.commons.math3.analysis.function.Sinc;\n      */\n     @Test\n     public void testSinFunction() {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         FastFourierTransformer transformer;\n         transformer = new FastFourierTransformer(DftNormalization.STANDARD);\n         Complex result[]; int N = 1 << 8;\n--- a/src/test/java/org/apache/commons/math3/transform/FastSineTransformerTest.java\n+++ b/src/test/java/org/apache/commons/math3/transform/FastSineTransformerTest.java\n import java.util.Arrays;\n import java.util.Collection;\n \n-import org.apache.commons.math3.analysis.SinFunction;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.function.Sin;\n import org.apache.commons.math3.analysis.function.Sinc;\n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n import org.apache.commons.math3.exception.MathIllegalStateException;\n      */\n     @Test\n     public void testSinFunction() {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         FastSineTransformer transformer;\n         transformer = new FastSineTransformer(DstNormalization.STANDARD_DST_I);\n         double min, max, result[], tolerance = 1E-12; int N = 1 << 8;\n      */\n     @Test\n     public void testParameters() throws Exception {\n-        UnivariateFunction f = new SinFunction();\n+        UnivariateFunction f = new Sin();\n         FastSineTransformer transformer;\n         transformer = new FastSineTransformer(DstNormalization.STANDARD_DST_I);\n ", "timestamp": 1345313471, "metainfo": ""}