{"sha": "cf9d715a5877d7e622f867ac090fa7dc34f3f835", "log": "Change Complex to use readResolve instead of introspection  ", "commit": "\n--- a/src/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/java/org/apache/commons/math/complex/Complex.java\n \n package org.apache.commons.math.complex;\n \n-import java.io.IOException;\n-import java.io.ObjectInputStream;\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n     }\n \n     /**\n-     * Deserialize a Complex Object.\n-     * @param ois The stream to deserialize from.\n-     * @throws IOException If there is an error reading the stream.\n-     * @throws ClassNotFoundException If this class cannot be found.\n-     */\n-     private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {\n-        ois.defaultReadObject();\n-\n-        try {\n-            final java.lang.reflect.Field fNaN = getClass().getDeclaredField(\"isNaN\");\n-            fNaN.setAccessible(true);\n-            fNaN.set(this, Double.isNaN(real) || Double.isNaN(imaginary));\n-            final java.lang.reflect.Field fInf = getClass().getDeclaredField(\"isInfinite\");\n-            fInf.setAccessible(true);\n-            fInf.set(this, !isNaN && (Double.isInfinite(real) || Double.isInfinite(imaginary)));\n-        } catch (IllegalAccessException iae) {\n-            IOException ioe = new IOException();\n-            ioe.initCause(iae);\n-            throw ioe;\n-        } catch (NoSuchFieldException nsfe) {\n-            IOException ioe = new IOException();\n-            ioe.initCause(nsfe);\n-            throw ioe;\n-        }\n-\n-    }\n-\n+     * <p>Resolve the transient fields in a deserialized Complex Object.</p>\n+     * <p>Subclasses will need to override {@link #createComplex} to deserialize properly</p> \n+     * @return A Complex instance with all fields resolved.\n+     * @since 2.0\n+     */\n+    private final Object readResolve() {\n+        return createComplex(real, imaginary);\n+    }\n+    \n     /** {@inheritDoc} */\n     public ComplexField getField() {\n         return ComplexField.getInstance();", "timestamp": 1245466818, "metainfo": ""}