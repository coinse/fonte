{"sha": "b704ce8686d77cd8c2b28374a40ee42d806be563", "log": "Add an optimized dotProduct to OpenMapRealVector. Slightly modified from contribution by Jake Mannix. JIRA: MATH-317   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n     public double getDistance(RealVector v) throws IllegalArgumentException {\n         checkVectorDimensions(v);\n         double d = 0;\n-        Iterator<Entry> it = sparseIterator();\n+        Iterator<Entry> it = iterator();\n         Entry e;\n         while (it.hasNext() && (e = it.next()) != null) {\n             final double diff = e.getValue() - v.getEntry(e.getIndex());\n \n     /** {@inheritDoc} */\n     public double getDistance(double[] v) throws IllegalArgumentException {\n-        checkVectorDimensions(v.length);\n-        double d = 0;\n-        Iterator<Entry> it = iterator();\n-        Entry e;\n-        while (it.hasNext() && (e = it.next()) != null) {\n-            final double diff = e.getValue() - v[e.getIndex()];\n-            d += diff * diff;\n-        }\n-        return Math.sqrt(d);\n+        return getDistance(new ArrayRealVector(v,false));\n     }\n \n     /** {@inheritDoc} */\n--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n         return new OpenMapRealVector(this);\n     }\n \n+    /**\n+     * Optimized method to compute the dot product with an OpenMapRealVector.\n+     * Iterates over the smaller of the two.\n+     * @param v The vector to compute the dot product with\n+     * @return The dot product of <code>this</code> and <code>v</code>\n+     * @throws IllegalArgumentException If the dimensions don't match\n+     */\n+    public double dotProduct(OpenMapRealVector v) throws IllegalArgumentException {\n+        checkVectorDimensions(v.getDimension());\n+        boolean thisIsSmaller  = entries.size() < v.entries.size();\n+        Iterator iter = thisIsSmaller  ? entries.iterator() : v.entries.iterator();\n+        OpenIntToDoubleHashMap larger = thisIsSmaller  ? v.entries : entries;\n+        double d = 0;\n+        while(iter.hasNext()) {\n+            iter.advance();\n+            d += iter.value() * larger.get(iter.key());\n+        }\n+        return d;\n+    }\n+    \n+    /** {@inheritDoc} */\n+    public double dotProduct(RealVector v) throws IllegalArgumentException {\n+        if(v instanceof OpenMapRealVector) {\n+            return dotProduct((OpenMapRealVector)v);\n+        } else {\n+            return super.dotProduct(v);\n+        }\n+    }\n \n     /** {@inheritDoc} */\n     public OpenMapRealVector ebeDivide(RealVector v) throws IllegalArgumentException {", "timestamp": 1260759220, "metainfo": ""}