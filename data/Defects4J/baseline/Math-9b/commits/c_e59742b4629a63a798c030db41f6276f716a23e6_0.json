{"sha": "e59742b4629a63a798c030db41f6276f716a23e6", "log": "Forced symmetry in binomialCoefficientLog and added test cases for MathUtils. JIRA: MATH-242 Reported and patched by Christian Semrau  ", "commit": "\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n         if (n < 1030) { \n             return Math.log(binomialCoefficientDouble(n, k));\n         } \n-        \n+\n+        if (k > n / 2) {\n+            return binomialCoefficientLog(n, n - k);\n+        }\n+\n         /*\n          * Sum logs for values that could overflow\n          */\n         double logSum = 0;\n \n-        // n!/k!\n-        for (int i = k + 1; i <= n; i++) {\n-            logSum += Math.log((double)i);\n-        }\n-\n-        // divide by (n-k)!\n-        for (int i = 2; i <= n - k; i++) {\n-            logSum -= Math.log((double)i);\n+        // n!/(n-k)!\n+        for (int i = n - k + 1; i <= n; i++) {\n+            logSum += Math.log((double) i);\n+        }\n+\n+        // divide by k!\n+        for (int i = 2; i <= k; i++) {\n+            logSum -= Math.log((double) i);\n         }\n \n         return logSum;      \n--- a/src/test/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/org/apache/commons/math/util/MathUtilsTest.java\n         } else if ((k == 1) || (k == n - 1)) {\n             result = n;\n         } else {\n+            // Reduce stack depth for larger values of n\n+            if (k < n - 100) {\n+                binomialCoefficient(n - 100, k);\n+            }\n+            if (k > 100) {\n+                binomialCoefficient(n - 100, k - 100);\n+            }\n             result = MathUtils.addAndCheck(binomialCoefficient(n - 1, k - 1),\n                 binomialCoefficient(n - 1, k));\n         }\n         assertEquals(min, MathUtils.addAndCheck(0L, min));\n         assertEquals(1, MathUtils.addAndCheck(-1L, 2L));\n         assertEquals(1, MathUtils.addAndCheck(2L, -1L));\n+        assertEquals(-3, MathUtils.addAndCheck(-2L, -1L));\n+        assertEquals(min, MathUtils.addAndCheck(min + 1, -1L));\n         testAddAndCheckLongFailure(max, 1L);\n         testAddAndCheckLongFailure(min, -1L);\n         testAddAndCheckLongFailure(1L, max);\n             }\n         }\n \n-        assertEquals(binomialCoefficient(34, 17), MathUtils\n-            .binomialCoefficient(34, 17));\n+        int[] n = { 34, 66, 100, 1500, 1500 };\n+        int[] k = { 17, 33, 10, 1500 - 4, 4 };\n+        for (int i = 0; i < n.length; i++) {\n+            long expected = binomialCoefficient(n[i], k[i]);\n+            assertEquals(n[i] + \" choose \" + k[i], expected,\n+                MathUtils.binomialCoefficient(n[i], k[i]));\n+            assertEquals(n[i] + \" choose \" + k[i], (double) expected,\n+                MathUtils.binomialCoefficientDouble(n[i], k[i]), 0.0);\n+            assertEquals(\"log(\" + n[i] + \" choose \" + k[i] + \")\", Math.log(expected),\n+                MathUtils.binomialCoefficientLog(n[i], k[i]), 0.0);\n+        }\n     }\n \n     /**\n                 } catch (ArithmeticException ex) {\n                     shouldThrow = true;\n                 }\n-                assertEquals(n+\",\"+k, shouldThrow, didThrow);\n-                assertEquals(n+\",\"+k, exactResult, ourResult);\n-                assertTrue(n+\",\"+k, (n > 66 || !didThrow));\n+                assertEquals(n + \" choose \" + k, exactResult, ourResult);\n+                assertEquals(n + \" choose \" + k, shouldThrow, didThrow);\n+                assertTrue(n + \" choose \" + k, (n > 66 || !didThrow));\n+\n+                if (!shouldThrow && exactResult > 1) {\n+                    assertEquals(n + \" choose \" + k, 1.,\n+                        MathUtils.binomialCoefficientDouble(n, k) / exactResult, 1e-10);\n+                    assertEquals(n + \" choose \" + k, 1,\n+                        MathUtils.binomialCoefficientLog(n, k) / Math.log(exactResult), 1e-10);\n+                }\n             }\n         }\n \n             // Expected\n         }\n \n-        // Larger values cannot be computed directly by our\n-        // test implementation because of stack limitations,\n-        // so we make little jumps to fill the cache.\n-        for (int i = 2000; i <= 10000; i += 2000) {\n-            ourResult = MathUtils.binomialCoefficient(i, 3);\n-            exactResult = binomialCoefficient(i, 3);\n-            assertEquals(exactResult, ourResult);\n-        }\n+        int n = 10000;\n+        ourResult = MathUtils.binomialCoefficient(n, 3);\n+        exactResult = binomialCoefficient(n, 3);\n+        assertEquals(exactResult, ourResult);\n+        assertEquals(1, MathUtils.binomialCoefficientDouble(n, 3) / exactResult, 1e-10);\n+        assertEquals(1, MathUtils.binomialCoefficientLog(n, 3) / Math.log(exactResult), 1e-10);\n \n     }\n \n         } catch (IllegalArgumentException ex) {\n             ;\n         }\n+\n+        try {\n+            MathUtils.binomialCoefficient(-1, -2);\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            MathUtils.binomialCoefficientDouble(-1, -2);\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            MathUtils.binomialCoefficientLog(-1, -2);\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+\n         try {\n             MathUtils.binomialCoefficient(67, 30);\n             fail(\"expecting ArithmeticException\");\n \n         assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));\n \n+        assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));\n+        // abs(Integer.MIN_VALUE) == Integer.MIN_VALUE\n+        assertEquals(Integer.MIN_VALUE, MathUtils.gcd(Integer.MIN_VALUE, 0));\n+        try {\n+            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n+        } catch (ArithmeticException expected) {\n+            //\n+        }\n     }\n \n     public void testHash() {\n         assertEquals(1.0, MathUtils.indicator(2.0), delta);\n         assertEquals(1.0, MathUtils.indicator(0.0), delta);\n         assertEquals(-1.0, MathUtils.indicator(-2.0), delta);\n+        assertEquals(Double.NaN, MathUtils.indicator(Double.NaN));\n     }\n \n     public void testIndicatorFloat() {\n         assertEquals(min, MathUtils.mulAndCheck(1L, min));\n         assertEquals(0L, MathUtils.mulAndCheck(0L, max));\n         assertEquals(0L, MathUtils.mulAndCheck(0L, min));\n+        assertEquals(1L, MathUtils.mulAndCheck(-1L, -1L));\n+        assertEquals(min, MathUtils.mulAndCheck(min / 2, 2));\n         testMulAndCheckLongFailure(max, 2L);\n         testMulAndCheckLongFailure(2L, max);\n         testMulAndCheckLongFailure(min, 2L);\n     }\n \n     public void testSignByte() {\n-        assertEquals((byte)1, MathUtils.indicator((byte)2));\n-        assertEquals((byte)(-1), MathUtils.indicator((byte)(-2)));\n+        assertEquals((byte) 1, MathUtils.sign((byte) 2));\n+        assertEquals((byte) 0, MathUtils.sign((byte) 0));\n+        assertEquals((byte) (-1), MathUtils.sign((byte) (-2)));\n     }\n \n     public void testSignDouble() {\n         double delta = 0.0;\n-        assertEquals(1.0, MathUtils.indicator(2.0), delta);\n-        assertEquals(-1.0, MathUtils.indicator(-2.0), delta);\n+        assertEquals(1.0, MathUtils.sign(2.0), delta);\n+        assertEquals(0.0, MathUtils.sign(0.0), delta);\n+        assertEquals(-1.0, MathUtils.sign(-2.0), delta);\n+        assertEquals(-0. / 0., MathUtils.sign(Double.NaN), delta);\n     }\n \n     public void testSignFloat() {\n         float delta = 0.0F;\n-        assertEquals(1.0F, MathUtils.indicator(2.0F), delta);\n-        assertEquals(-1.0F, MathUtils.indicator(-2.0F), delta);\n+        assertEquals(1.0F, MathUtils.sign(2.0F), delta);\n+        assertEquals(0.0F, MathUtils.sign(0.0F), delta);\n+        assertEquals(-1.0F, MathUtils.sign(-2.0F), delta);\n+        assertEquals(Float.NaN, MathUtils.sign(Float.NaN), delta);\n     }\n \n     public void testSignInt() {\n-        assertEquals((int)1, MathUtils.indicator((int)(2)));\n-        assertEquals((int)(-1), MathUtils.indicator((int)(-2)));\n+        assertEquals((int) 1, MathUtils.sign((int) 2));\n+        assertEquals((int) 0, MathUtils.sign((int) 0));\n+        assertEquals((int) (-1), MathUtils.sign((int) (-2)));\n     }\n \n     public void testSignLong() {\n-        assertEquals(1L, MathUtils.indicator(2L));\n-        assertEquals(-1L, MathUtils.indicator(-2L));\n+        assertEquals(1L, MathUtils.sign(2L));\n+        assertEquals(0L, MathUtils.sign(0L));\n+        assertEquals(-1L, MathUtils.sign(-2L));\n     }\n \n     public void testSignShort() {\n-        assertEquals((short)1, MathUtils.indicator((short)2));\n-        assertEquals((short)(-1), MathUtils.indicator((short)(-2)));\n+        assertEquals((short) 1, MathUtils.sign((short) 2));\n+        assertEquals((short) 0, MathUtils.sign((short) 0));\n+        assertEquals((short) (-1), MathUtils.sign((short) (-2)));\n     }\n \n     public void testSinh() {\n         int big = Integer.MAX_VALUE;\n         int bigNeg = Integer.MIN_VALUE;\n         assertEquals(big, MathUtils.subAndCheck(big, 0));\n+        assertEquals(bigNeg + 1, MathUtils.subAndCheck(bigNeg, -1));\n+        assertEquals(-1, MathUtils.subAndCheck(bigNeg, -big));\n         try {\n             MathUtils.subAndCheck(big, -1);\n             fail(\"Expecting ArithmeticException\");\n         assertEquals(max, MathUtils.subAndCheck(max, 0));\n         assertEquals(min, MathUtils.subAndCheck(min, 0));\n         assertEquals(-max, MathUtils.subAndCheck(0, max));\n+        assertEquals(min + 1, MathUtils.subAndCheck(min, -1));\n+        // min == -1-max\n+        assertEquals(-1, MathUtils.subAndCheck(-max - 1, -max));\n+        assertEquals(max, MathUtils.subAndCheck(-1, -1 - max));\n         testSubAndCheckLongFailure(0L, min);\n         testSubAndCheckLongFailure(max, -1L);\n         testSubAndCheckLongFailure(min, 1L);", "timestamp": 1232537436, "metainfo": ""}