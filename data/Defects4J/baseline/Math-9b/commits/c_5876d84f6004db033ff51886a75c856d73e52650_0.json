{"sha": "5876d84f6004db033ff51886a75c856d73e52650", "log": "Added derivatives evaluation for field Hermite interpolator.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java\n \n     }\n \n+    /** Interpolate value and first derivatives at a specified abscissa.\n+     * @param x interpolation abscissa\n+     * @param order maximum derivation order\n+     * @return interpolated value and derivatives (value in row 0,\n+     * 1<sup>st</sup> derivative in row 1, ... n<sup>th</sup> derivative in row n)\n+     * @exception NoDataException if sample is empty\n+     */\n+    public T[][] derivatives(T x, int order) throws NoDataException {\n+\n+        // safety check\n+        if (abscissae.isEmpty()) {\n+            throw new NoDataException(LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE);\n+        }\n+\n+        final T zero = x.getField().getZero();\n+        final T one  = x.getField().getOne();\n+        final T[] tj = MathArrays.buildArray(x.getField(), order + 1);\n+        tj[0] = zero;\n+        for (int i = 0; i < order; ++i) {\n+            tj[i + 1] = tj[i].add(one);\n+        }\n+\n+        final T[][] derivatives =\n+                MathArrays.buildArray(x.getField(), order + 1, topDiagonal.get(0).length);\n+        final T[] valueCoeff = MathArrays.buildArray(x.getField(), order + 1);\n+        valueCoeff[0] = x.getField().getOne();\n+        for (int i = 0; i < topDiagonal.size(); ++i) {\n+            T[] dividedDifference = topDiagonal.get(i);\n+            final T deltaX = x.subtract(abscissae.get(i));\n+            for (int j = order; j >= 0; --j) {\n+                for (int k = 0; k < derivatives[j].length; ++k) {\n+                    derivatives[j][k] =\n+                            derivatives[j][k].add(dividedDifference[k].multiply(valueCoeff[j]));\n+                }\n+                valueCoeff[j] = valueCoeff[j].multiply(deltaX);\n+                if (j > 0) {\n+                    valueCoeff[j] = valueCoeff[j].add(tj[j].multiply(valueCoeff[j - 1]));\n+                }\n+            }\n+        }\n+\n+        return derivatives;\n+\n+    }\n+\n }\n--- a/src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java\n         for (int x = -10; x < 10; x++) {\n             BigFraction y = interpolator.value(new BigFraction(x))[0];\n             Assert.assertEquals(BigFraction.ZERO, y);\n+            BigFraction[][] derivatives = interpolator.derivatives(new BigFraction(x), 1);\n+            Assert.assertEquals(BigFraction.ZERO, derivatives[0][0]);\n+            Assert.assertEquals(BigFraction.ZERO, derivatives[1][0]);\n         }\n     }\n \n         for (double x = -10; x < 10; x += 1.0) {\n             BigFraction y = interpolator.value(new BigFraction(x))[0];\n             Assert.assertEquals((x - 1) * (x - 2), y.doubleValue(), 1.0e-15);\n+            BigFraction[][] derivatives = interpolator.derivatives(new BigFraction(x), 3);\n+            Assert.assertEquals((x - 1) * (x - 2), derivatives[0][0].doubleValue(), 1.0e-15);\n+            Assert.assertEquals(2 * x - 3, derivatives[1][0].doubleValue(), 1.0e-15);\n+            Assert.assertEquals(2, derivatives[2][0].doubleValue(), 1.0e-15);\n+            Assert.assertEquals(0, derivatives[3][0].doubleValue(), 1.0e-15);\n         }\n     }\n \n         interpolator.addSamplePoint(new BigFraction(0), new BigFraction[] { new BigFraction(1) }, new BigFraction[] { new BigFraction(2) });\n         interpolator.addSamplePoint(new BigFraction(1), new BigFraction[] { new BigFraction(4) });\n         interpolator.addSamplePoint(new BigFraction(2), new BigFraction[] { new BigFraction(5) }, new BigFraction[] { new BigFraction(2) });\n-        Assert.assertEquals(new BigFraction(1), interpolator.value(new BigFraction(0))[0]);\n-        Assert.assertEquals(new BigFraction(4), interpolator.value(new BigFraction(1))[0]);\n-        Assert.assertEquals(new BigFraction(5), interpolator.value(new BigFraction(2))[0]);\n+        BigFraction[][] derivatives = interpolator.derivatives(new BigFraction(0), 5);\n+        Assert.assertEquals(new BigFraction(  1), derivatives[0][0]);\n+        Assert.assertEquals(new BigFraction(  2), derivatives[1][0]);\n+        Assert.assertEquals(new BigFraction(  8), derivatives[2][0]);\n+        Assert.assertEquals(new BigFraction(-24), derivatives[3][0]);\n+        Assert.assertEquals(new BigFraction( 24), derivatives[4][0]);\n+        Assert.assertEquals(new BigFraction(  0), derivatives[5][0]);\n+        derivatives = interpolator.derivatives(new BigFraction(1), 5);\n+        Assert.assertEquals(new BigFraction(  4), derivatives[0][0]);\n+        Assert.assertEquals(new BigFraction(  2), derivatives[1][0]);\n+        Assert.assertEquals(new BigFraction( -4), derivatives[2][0]);\n+        Assert.assertEquals(new BigFraction(  0), derivatives[3][0]);\n+        Assert.assertEquals(new BigFraction( 24), derivatives[4][0]);\n+        Assert.assertEquals(new BigFraction(  0), derivatives[5][0]);\n+        derivatives = interpolator.derivatives(new BigFraction(2), 5);\n+        Assert.assertEquals(new BigFraction(  5), derivatives[0][0]);\n+        Assert.assertEquals(new BigFraction(  2), derivatives[1][0]);\n+        Assert.assertEquals(new BigFraction(  8), derivatives[2][0]);\n+        Assert.assertEquals(new BigFraction( 24), derivatives[3][0]);\n+        Assert.assertEquals(new BigFraction( 24), derivatives[4][0]);\n+        Assert.assertEquals(new BigFraction(  0), derivatives[5][0]);\n     }\n \n     @Test\n     }\n \n     @Test(expected=NoDataException.class)\n-    public void testEmptySample() {\n+    public void testEmptySampleValue() {\n         new FieldHermiteInterpolator<BigFraction>().value(BigFraction.ZERO);\n+    }\n+\n+    @Test(expected=NoDataException.class)\n+    public void testEmptySampleDerivative() {\n+        new FieldHermiteInterpolator<BigFraction>().derivatives(BigFraction.ZERO, 1);\n     }\n \n     @Test(expected=IllegalArgumentException.class)", "timestamp": 1361820712, "metainfo": ""}