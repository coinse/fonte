{"sha": "d906626837a54933700463101cc3081d2c80b1ce", "log": "Changed some methods to return interface types. Improved javadoc.   ", "commit": "\n--- a/src/java/org/apache/commons/math/random/EmpiricalDistribution.java\n+++ b/src/java/org/apache/commons/math/random/EmpiricalDistribution.java\n import java.io.IOException;\n import java.io.File;\n import java.net.URL;\n-import java.util.ArrayList;\n+import java.util.List;\n \n-import org.apache.commons.math.stat.univariate.SummaryStatistics;\n+import org.apache.commons.math.stat.univariate.StatisticalSummary;\n \n /**\n  * Represents an <a href=\"http://random.mat.sbg.ac.at/~ste/dipl/node11.html\">\n  * <i>distribution digests</i>, that describe empirical distributions and\n  * support the following operations: <ul>\n  * <li>loading the distribution from a file of observed data values</li>\n- * <li>saving and re-loading distribution digests to/from \"digest files\" </li>\n  * <li>dividing the input data into \"bin ranges\" and reporting bin frequency\n  *     counts (data for histogram)</li>\n  * <li>reporting univariate statistics describing the full set of data values\n  * build grouped frequnecy histograms representing the input data or to\n  * generate random values \"like\" those in the input file -- i.e., the values\n  * generated will follow the distribution of the values in the file.\n- * @version $Revision: 1.20 $ $Date: 2004/06/14 23:45:33 $\n+ * \n+ * @version $Revision: 1.21 $ $Date: 2004/07/18 23:57:11 $\n  */\n public interface EmpiricalDistribution {\n \n     /**\n      * Computes the empirical distribution from the provided\n      * array of numbers.\n+     * \n      * @param dataArray the data array\n      */\n     void load(double[] dataArray);\n \n     /**\n      * Computes the empirical distribution from the input file.\n+     * \n      * @param file the input file\n      * @throws IOException if an IO error occurs\n      */\n \n     /**\n      * Computes the empirical distribution using data read from a URL.\n+     * \n      * @param url url of the input file\n      * @throws IOException if an IO error occurs\n      */\n      * <strong>Preconditions:</strong><ul>\n      * <li>the distribution must be loaded before invoking this method</li></ul>\n      * @return the random value.\n+     * \n      * @throws IllegalStateException if the distribution has not been loaded\n      */\n     double getNextValue() throws IllegalStateException;\n \n \n     /**\n-     * Returns a DescriptiveStatistics describing this distribution.\n+     * Returns a {@link StatisticalSummary} describing this distribution.\n      * <strong>Preconditions:</strong><ul>\n-     * <li>the distribution must be loaded before invoking this method</li></ul>\n+     * <li>the distribution must be loaded before invoking this method</li>\n+     * </ul>\n+     * \n      * @return the sample statistics\n      * @throws IllegalStateException if the distribution has not been loaded\n      */\n-    SummaryStatistics getSampleStats() throws IllegalStateException;\n+    StatisticalSummary getSampleStats() throws IllegalStateException;\n \n     /**\n-     * property indicating whether or not the distribution has been loaded\n+     * Property indicating whether or not the distribution has been loaded.\n+     * \n      * @return true if the distribution has been loaded\n      */\n     boolean isLoaded();\n \n      /**\n-     * Returns the number of bins\n-     * @return the number of bins.\n+     * Returns the number of bins.\n+     * \n+     * @return the number of bins\n      */\n     int getBinCount();\n \n     /**\n-     * Returns a list of Univariates containing statistics describing the\n-     * values in each of the bins.  The ArrayList is indexed on the bin number.\n-     * @return ArrayList of bin statistics.\n+     * Returns a list of {@link SummaryStatistics} containing statistics\n+     * describing the values in each of the bins.  The List is indexed on\n+     * the bin number.\n+     * \n+     * @return List of bin statistics\n      */\n-    ArrayList getBinStats();\n+    List getBinStats();\n \n     /**\n      * Returns the array of upper bounds for the bins.  Bins are: <br/>\n      * [min,upperBounds[0]],(upperBounds[0],upperBounds[1]],...,\n-     *  (upperBounds[binCount-1],max]\n+     *  (upperBounds[binCount-1],max].\n+     * \n      * @return array of bin upper bounds\n      */\n     double[] getUpperBounds();\n--- a/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n \n package org.apache.commons.math.random;\n \n-import java.util.ArrayList;\n import java.io.Serializable;\n import java.io.BufferedReader;\n import java.io.FileReader;\n import java.io.IOException;\n import java.io.InputStreamReader;\n import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n \n import org.apache.commons.math.stat.univariate.SummaryStatistics;\n+import org.apache.commons.math.stat.univariate.StatisticalSummary;\n \n /**\n  * Implements <code>EmpiricalDistribution</code> interface.  This implementation\n  *    entry per line.</li>\n  * </ul></p>\n  *\n- * @version $Revision: 1.27 $ $Date: 2004/06/23 16:26:17 $\n+ * @version $Revision: 1.28 $ $Date: 2004/07/18 23:57:11 $\n  */\n public class EmpiricalDistributionImpl implements Serializable, EmpiricalDistribution {\n \n     }\n \n     /**\n-     * Returns a DescriptiveStatistics describing this distribution.\n+     * Returns a {@link StatisticalSummary} describing this distribution.\n      * <strong>Preconditions:</strong><ul>\n      * <li>the distribution must be loaded before invoking this method</li></ul>\n      * \n      * @return the sample statistics\n      * @throws IllegalStateException if the distribution has not been loaded\n      */\n-    public SummaryStatistics getSampleStats() {\n+    public StatisticalSummary getSampleStats() {\n         return sampleStats;\n     }\n \n     }\n \n     /**\n-     * Returns a list of Univariates containing statistics describing the\n-     * values in each of the bins.  The ArrayList is indexed on the bin number.\n-     * \n-     * @return ArrayList of bin statistics.\n-     */\n-    public ArrayList getBinStats() {\n+     * Returns an ArrayList of {@link SummaryStatistics} instances containing\n+     * statistics describing the values in each of the bins.  The ArrayList is\n+     * indexed on the bin number.\n+     * \n+     * @return List of bin statistics.\n+     */\n+    public List getBinStats() {\n         return binStats;\n     }\n ", "timestamp": 1090195031, "metainfo": ""}