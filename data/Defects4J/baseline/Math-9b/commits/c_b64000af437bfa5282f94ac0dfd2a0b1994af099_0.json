{"sha": "b64000af437bfa5282f94ac0dfd2a0b1994af099", "log": "fixed javadoc comments, added @since tags to new classes and methods, corrected hyperlinks in user guide, add fraction unit tests.  ", "commit": "\n--- a/src/java/org/apache/commons/math/distribution/CauchyDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/CauchyDistribution.java\n  * </ul>\n  * </p>\n  *\n+ * @since 1.1\n  * @version $Revision$ $Date$\n  */\n public interface CauchyDistribution extends ContinuousDistribution {\n--- a/src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java\n  * Default implementation of\n  * {@link org.apache.commons.math.distribution.CauchyDistribution}.\n  *\n- * @version $Revision: 1.13 $ $Date$\n+ * @since 1.1\n+ * @version $Revision$ $Date$\n  */\n public class CauchyDistributionImpl extends AbstractContinuousDistribution \n \t\timplements CauchyDistribution, Serializable {\n--- a/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n+++ b/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n      * @param median the median of the distribution\n      * @param scale the scale\n      * @return a new cauchy distribution  \n+     * @since 1.1\n      */           \n     public CauchyDistribution createCauchyDistribution(\n         double median, double scale)\n      * @param alpha the shape parameter.\n      * @param beta the scale parameter.\n      * @return a new Weibull distribution.  \n+     * @since 1.1\n      */               \n     public WeibullDistribution createWeibullDistribution(\n         double alpha, double beta)\n--- a/src/java/org/apache/commons/math/distribution/WeibullDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/WeibullDistribution.java\n  * </ul>\n  * </p>\n  *\n+ * @since 1.1\n  * @version $Revision: 1.12 $ $Date: 2004-06-23 11:26:18 -0500 (Wed, 23 Jun 2004) $\n  */\n public interface WeibullDistribution extends ContinuousDistribution {\n--- a/src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java\n  * Default implementation of\n  * {@link org.apache.commons.math.distribution.WeibullDistribution}.\n  *\n+ * @since 1.1\n  * @version $Revision: 1.13 $ $Date: 2004-07-24 16:41:37 -0500 (Sat, 24 Jul 2004) $\n  */\n public class WeibullDistributionImpl extends AbstractContinuousDistribution\n     }\n \n     /**\n-     * Access alpha.\n-     * @return the alpha.\n+     * Access the shape parameter.\n+     * @return the shape parameter.\n      */\n     public double getShape() {\n         return alpha;\n     }\n     \n     /**\n-     * Access beta.\n-     * @return the beta.\n+     * Access the scale parameter.\n+     * @return the scale parameter.\n      */\n     public double getScale() {\n         return beta;\n     }\n     \n     /**\n-     * Modify alpha.\n-     * @param alpha The new alpha value.\n+     * Modify the shape parameter.\n+     * @param alpha the new shape parameter value.\n      */\n     public void setShape(double alpha) {\n         if (alpha <= 0.0) {\n     }\n     \n     /**\n-     * Modify beta.\n-     * @param beta The new beta value.\n+     * Modify the scale parameter.\n+     * @param beta the new scale parameter value.\n      */\n     public void setScale(double beta) {\n         if (beta <= 0.0) {\n--- a/src/java/org/apache/commons/math/fraction/Fraction.java\n+++ b/src/java/org/apache/commons/math/fraction/Fraction.java\n /**\n  * Representation of a rational number.\n  *\n- * @author Apache Software Foundation\n+ * @since 1.1\n  * @version $Revision$ $Date$\n  */\n public class Fraction extends Number implements Comparable {\n--- a/src/java/org/apache/commons/math/fraction/FractionFormat.java\n+++ b/src/java/org/apache/commons/math/fraction/FractionFormat.java\n  * format for each of the whole number, numerator and, denominator can be\n  * configured.\n  *\n- * @author Apache Software Foundation\n+ * @since 1.1\n  * @version $Revision$ $Date$\n  */\n public class FractionFormat extends Format implements Serializable {\n--- a/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java\n+++ b/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java\n  * Formats a Fraction number in proper format.  The number format for each of\n  * the whole number, numerator and, denominator can be configured.\n  * \n- * @author Apache Software Foundation\n+ * @since 1.1\n  * @version $Revision$ $Date$\n  */\n public class ProperFractionFormat extends FractionFormat {\n--- a/src/java/org/apache/commons/math/random/AbstractRandomGenerator.java\n+++ b/src/java/org/apache/commons/math/random/AbstractRandomGenerator.java\n /*\n  * Copyright 2005 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * performant implementations of the other methods if the underlying PRNG\n  * supplies them.\n  *\n+ * @since 1.1\n  * @version $Revision$ $Date$\n  */\n public abstract class AbstractRandomGenerator implements RandomGenerator {\n--- a/src/java/org/apache/commons/math/random/JDKRandomGenerator.java\n+++ b/src/java/org/apache/commons/math/random/JDKRandomGenerator.java\n /*\n  * Copyright 2005 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * Extension of <code>java.util.Random</code> to implement \n  * {@link RandomGenerator}.\n  *\n+ * @since 1.1\n  * @version $Revision:$ $Date$\n  */\n public class JDKRandomGenerator extends Random implements RandomGenerator {\n--- a/src/java/org/apache/commons/math/random/RandomDataImpl.java\n+++ b/src/java/org/apache/commons/math/random/RandomDataImpl.java\n      * as the source of (non-secure) random data.\n      * \n      * @param rand  the source of (non-secure) random data\n+     * @since 1.1\n      */\n     public RandomDataImpl(RandomGenerator rand) {\n         super();\n      * <strong>Algorithm Description</strong>:\n      * Uses simulation of a Poisson process using Uniform deviates, as\n      * described\n-     * <a href =\"http://dmawww.epfl.ch/benarous/Pmmi/interactive/rng7.htm\">\n+     * <a href=\"http://irmi.epfl.ch/cmos/Pmmi/interactive/rng7.htm\">\n      * here.</a>\n      * <p>\n      * The Poisson process (and hence value returned) is bounded by \n      * Creates and initializes a default generator if null.\n      *\n      * @return the Random used to generate random data\n+     * @since 1.1\n      */\n     private RandomGenerator getRan() {\n         if (rand == null) {\n--- a/src/java/org/apache/commons/math/random/RandomGenerator.java\n+++ b/src/java/org/apache/commons/math/random/RandomGenerator.java\n /*\n  * Copyright 2005 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * Interface extracted from <code>java.util.Random</code>.  This interface is\n  * implemented by {@link AbstractRandomGenerator}.  \n  *\n+ * @since 1.1\n  * @version $Revision:$ $Date$\n  */\n public interface RandomGenerator {\n--- a/src/java/org/apache/commons/math/random/ValueServer.java\n+++ b/src/java/org/apache/commons/math/random/ValueServer.java\n      * of random data.\n      * \n      * @param randomData the RandomData instance used to source random data\n+     * @since 1.1\n      */\n     public ValueServer(RandomData randomData) {\n         super();\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n      * @param x the value to round.\n      * @param scale the number of digits to the right of the decimal point.\n      * @return the rounded value.\n+     * @since 1.1\n      */\n     public static double round(double x, int scale) {\n         return round(x, scale, BigDecimal.ROUND_HALF_UP);\n      * @param roundingMethod the rounding method as defined in\n      *        {@link BigDecimal}. \n      * @return the rounded value.\n+     * @since 1.1\n      */\n     public static double round(\n         double x, int scale, int roundingMethod)\n      * @param x the value to round.\n      * @param scale the number of digits to the right of the decimal point.\n      * @return the rounded value.\n+     * @since 1.1\n      */\n     public static float round(float x, int scale) {\n         return round(x, scale, BigDecimal.ROUND_HALF_UP);\n      * @param roundingMethod the rounding method as defined in\n      *        {@link BigDecimal}. \n      * @return the rounded value.\n+     * @since 1.1\n      */\n     public static float round(float x, int scale, int roundingMethod) {\n         return (new BigDecimal(x).setScale(scale, roundingMethod)).floatValue();\n--- a/src/test/org/apache/commons/math/fraction/FractionTest.java\n+++ b/src/test/org/apache/commons/math/fraction/FractionTest.java\n         assertFraction(-1, 2, new Fraction(1, -2));\n         assertFraction(-1, 2, new Fraction(-2, 4));\n         assertFraction(-1, 2, new Fraction(2, -4));\n+        \n+        // overflow\n+        try {\n+            new Fraction(Integer.MIN_VALUE, -1);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // success\n+        }\n+        try {\n+            new Fraction(1, Integer.MIN_VALUE);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // success\n+        }\n+    }\n+    \n+    public void testCompareTo() {\n+        Fraction first = new Fraction(1, 2);\n+        Fraction second = new Fraction(1, 3);\n+        Fraction third = new Fraction(1, 2);\n+        \n+        assertEquals(0, first.compareTo(first));\n+        assertEquals(0, first.compareTo(third));\n+        assertEquals(1, first.compareTo(second));\n+        assertEquals(-1, second.compareTo(first));\n+    }\n+    \n+    public void testDoubleValue() {\n+        Fraction first = new Fraction(1, 2);\n+        Fraction second = new Fraction(1, 3);\n+\n+        assertEquals(0.5, first.doubleValue(), 0.0);\n+        assertEquals(1.0 / 3.0, second.doubleValue(), 0.0);\n+    }\n+    \n+    public void testFloatValue() {\n+        Fraction first = new Fraction(1, 2);\n+        Fraction second = new Fraction(1, 3);\n+\n+        assertEquals(0.5f, first.floatValue(), 0.0f);\n+        assertEquals((float)(1.0 / 3.0), second.floatValue(), 0.0f);\n+    }\n+    \n+    public void testIntValue() {\n+        Fraction first = new Fraction(1, 2);\n+        Fraction second = new Fraction(3, 2);\n+\n+        assertEquals(0, first.intValue());\n+        assertEquals(1, second.intValue());\n+    }\n+    \n+    public void testLongValue() {\n+        Fraction first = new Fraction(1, 2);\n+        Fraction second = new Fraction(3, 2);\n+\n+        assertEquals(0L, first.longValue());\n+        assertEquals(1L, second.longValue());\n     }\n     \n     public void testConstructorDouble() {", "timestamp": 1116739544, "metainfo": ""}