{"sha": "5d3146439c1e6fd76aa0a24c0252404741bb1b82", "log": "Moved instance field initialization into constructor.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java\n  */\n package org.apache.commons.math.stat.univariate.moment;\n \n-import java.io.Serializable;\n-\n import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;\n \n /**\n  *  <p>\n  *  kurtosis = { [n(n+1) / (n -1)(n - 2)(n-3)] sum[(x_i - mean)^4] / std^4 } - [3(n-1)^2 / (n-2)(n-3)]\n  *  <p>\n- *  where n is the number of values, mean is the {@link Mean} and std is the {@link StandardDeviation}\n+ *  where n is the number of values, mean is the {@link Mean} and std is the\n+ * {@link StandardDeviation}\n  * <p>\n- *  Note that this statistic is undefined for n < 4.  <code>Double.Nan</code> is returned when\n- *  there is not sufficient data to compute the statistic.\n+ *  Note that this statistic is undefined for n < 4.  <code>Double.Nan</code>\n+ *  is returned when there is not sufficient data to compute the statistic.\n  * <p>\n  * <strong>Note that this implementation is not synchronized.</strong> If \n  * multiple threads access an instance of this class concurrently, and at least\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.27 $ $Date: 2004/07/10 17:09:08 $\n+ * @version $Revision: 1.28 $ $Date: 2004/07/18 05:34:26 $\n  */\n-public class Kurtosis extends AbstractStorelessUnivariateStatistic implements Serializable {\n+public class Kurtosis extends AbstractStorelessUnivariateStatistic  {\n \n     /** Serializable version identifier */\n     static final long serialVersionUID = 2784465764798260919L;  \n       \n     /**Fourth Moment on which this statistic is based */\n-    protected FourthMoment moment = null;\n+    protected FourthMoment moment;\n \n     /** \n      * Determines whether or not this statistic can be incremented or cleared.\n      * Statistics based on (constructed from) external moments cannot\n      * be incremented or cleared.\n     */\n-    protected boolean incMoment = true;\n-\n+    protected boolean incMoment;\n \n     /**\n      * Construct a Kurtosis\n      */\n     public Kurtosis() {\n+        incMoment = true;\n         moment = new FourthMoment();\n     }\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Mean.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Mean.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.21 $ $Date: 2004/07/10 17:09:08 $\n+ * @version $Revision: 1.22 $ $Date: 2004/07/18 05:34:26 $\n  */\n public class Mean extends AbstractStorelessUnivariateStatistic \n     implements Serializable {\n     static final long serialVersionUID = -1296043746617791564L;    \n     \n     /** First moment on which this statistic is based. */\n-    protected FirstMoment moment = null;\n+    protected FirstMoment moment;\n \n     /** \n      * Determines whether or not this statistic can be incremented or cleared.\n      * Statistics based on (constructed from) external moments cannot\n      * be incremented or cleared.\n      */\n-    protected boolean incMoment = true;\n+    protected boolean incMoment;\n \n     /** Constructs a Mean. */\n     public Mean() {\n+        incMoment = true;\n         moment = new FirstMoment();\n     }\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.25 $ $Date: 2004/07/10 17:02:43 $\n+ * @version $Revision: 1.26 $ $Date: 2004/07/18 05:34:26 $\n  */\n public class Skewness extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n      * Statistics based on (constructed from) external moments cannot\n      * be incremented or cleared.\n     */\n-    protected boolean incMoment = true;\n+    protected boolean incMoment;\n \n     /**\n      * Constructs a Skewness\n      */\n     public Skewness() {\n+        incMoment = true;\n         moment = new ThirdMoment();\n     }\n ", "timestamp": 1090128866, "metainfo": ""}