{"sha": "4fb7f83c535cad9b5f263108a60ad1726bda4565", "log": "Merged ChiSquareTest implementation and interface, removed use of MathException. JIRA: MATH-488, MATH-739  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java\n  */\n package org.apache.commons.math.stat.inference;\n \n-import org.apache.commons.math.MathException;\n+import org.apache.commons.math.distribution.ChiSquaredDistribution;\n+import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.MaxCountExceededException;\n+import org.apache.commons.math.exception.NotPositiveException;\n+import org.apache.commons.math.exception.NotStrictlyPositiveException;\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.exception.OutOfRangeException;\n+import org.apache.commons.math.exception.ZeroException;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n+import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n- * An interface for Chi-Square tests.\n- * <p>This interface handles only known distributions. If the distribution is\n- * unknown and should be provided by a sample, then the {@link UnknownDistributionChiSquareTest\n- * UnknownDistributionChiSquareTest} extended interface should be used instead.</p>\n+ * Implements Chi-Square test statistics.\n+ * <p>This implementation handles both, known and unknown distributions.</p>\n+ * <p>Two samples tests are used when the distribution is unknown <i>a priori</i>\n+ * but provided by one sample. We compare the second sample against the first.</p>\n+ *\n  * @version $Id$\n  */\n-public interface ChiSquareTest {\n-\n-     /**\n+public class ChiSquareTest {\n+\n+    /**\n+     * Construct a ChiSquareTest\n+     */\n+    public ChiSquareTest() {\n+        super();\n+    }\n+\n+    /**\n      * Computes the <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda35f.htm\">\n      * Chi-Square statistic</a> comparing <code>observed</code> and <code>expected</code>\n      * frequency counts.\n      * <p>\n-     * This statistic can be used to perform a Chi-Square test evaluating the null hypothesis that\n-     *  the observed counts follow the expected distribution.</p>\n+     * This statistic can be used to perform a Chi-Square test evaluating the null\n+     * hypothesis that the observed counts follow the expected distribution.</p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>Expected counts must all be positive.\n      * </li>\n-     * <li>Observed counts must all be >= 0.\n+     * <li>Observed counts must all be &ge; 0.\n      * </li>\n      * <li>The observed and expected arrays must have the same length and\n      * their common length must be at least 2.\n      * </li></ul></p><p>\n      * If any of the preconditions are not met, an\n      * <code>IllegalArgumentException</code> is thrown.</p>\n+     * <p><strong>Note: </strong>This implementation rescales the\n+     * <code>expected</code> array if necessary to ensure that the sum of the\n+     * expected and observed counts are equal.</p>\n      *\n      * @param observed array of observed frequency counts\n      * @param expected array of expected frequency counts\n-     * @return chiSquare statistic\n-     * @throws IllegalArgumentException if preconditions are not met\n-     */\n-    double chiSquare(double[] expected, long[] observed)\n-        throws IllegalArgumentException;\n+     * @return chiSquare test statistic\n+     * @throws NotPositiveException if one element of <code>expected</code> is not\n+     * positive\n+     * @throws NotStrictlyPositiveException if one element of <code>observed</code> is\n+     * not strictly positive\n+     * @throws DimensionMismatchException if the arrays length is less than 2\n+     */\n+    public double chiSquare(final double[] expected, final long[] observed)\n+        throws NotPositiveException, NotStrictlyPositiveException,\n+        DimensionMismatchException {\n+\n+        if (expected.length < 2) {\n+            throw new DimensionMismatchException(expected.length, 2);\n+        }\n+        if (expected.length != observed.length) {\n+            throw new DimensionMismatchException(expected.length, observed.length);\n+        }\n+        checkPositive(expected);\n+        checkNonNegative(observed);\n+\n+        double sumExpected = 0d;\n+        double sumObserved = 0d;\n+        for (int i = 0; i < observed.length; i++) {\n+            sumExpected += expected[i];\n+            sumObserved += observed[i];\n+        }\n+        double ratio = 1.0d;\n+        boolean rescale = false;\n+        if (FastMath.abs(sumExpected - sumObserved) > 10E-6) {\n+            ratio = sumObserved / sumExpected;\n+            rescale = true;\n+        }\n+        double sumSq = 0.0d;\n+        for (int i = 0; i < observed.length; i++) {\n+            if (rescale) {\n+                final double dev = observed[i] - ratio * expected[i];\n+                sumSq += dev * dev / (ratio * expected[i]);\n+            } else {\n+                final double dev = observed[i] - expected[i];\n+                sumSq += dev * dev / expected[i];\n+            }\n+        }\n+        return sumSq;\n+\n+    }\n \n     /**\n      * Returns the <i>observed significance level</i>, or <a href=\n      * <strong>Preconditions</strong>: <ul>\n      * <li>Expected counts must all be positive.\n      * </li>\n-     * <li>Observed counts must all be >= 0.\n+     * <li>Observed counts must all be &ge; 0.\n      * </li>\n      * <li>The observed and expected arrays must have the same length and\n      * their common length must be at least 2.\n      * </li></ul></p><p>\n      * If any of the preconditions are not met, an\n      * <code>IllegalArgumentException</code> is thrown.</p>\n+     * <p><strong>Note: </strong>This implementation rescales the\n+     * <code>expected</code> array if necessary to ensure that the sum of the\n+     * expected and observed counts are equal.</p>\n      *\n      * @param observed array of observed frequency counts\n      * @param expected array of expected frequency counts\n      * @return p-value\n-     * @throws IllegalArgumentException if preconditions are not met\n-     * @throws MathException if an error occurs computing the p-value\n-     */\n-    double chiSquareTest(double[] expected, long[] observed)\n-        throws IllegalArgumentException, MathException;\n+     * @throws NotPositiveException if one element of <code>expected</code> is not\n+     * positive\n+     * @throws NotStrictlyPositiveException if one element of <code>observed</code> is\n+     * not strictly positive\n+     * @throws DimensionMismatchException if the arrays length is less than 2\n+     * @throws MaxCountExceededException if an error occurs computing the p-value\n+     */\n+    public double chiSquareTest(final double[] expected, final long[] observed)\n+        throws NotPositiveException, NotStrictlyPositiveException,\n+        DimensionMismatchException, MaxCountExceededException {\n+\n+        ChiSquaredDistribution distribution =\n+            new ChiSquaredDistribution(expected.length - 1.0);\n+        return 1.0 - distribution.cumulativeProbability(chiSquare(expected, observed));\n+\n+    }\n \n     /**\n      * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda35f.htm\">\n-     * Chi-square goodness of fit test</a> evaluating the null hypothesis that the observed counts\n-     * conform to the frequency distribution described by the expected counts, with\n-     * significance level <code>alpha</code>.  Returns true iff the null hypothesis can be rejected\n-     * with 100 * (1 - alpha) percent confidence.\n+     * Chi-square goodness of fit test</a> evaluating the null hypothesis that the\n+     * observed counts conform to the frequency distribution described by the expected\n+     * counts, with significance level <code>alpha</code>.  Returns true iff the null\n+     * hypothesis can be rejected with 100 * (1 - alpha) percent confidence.\n      * <p>\n      * <strong>Example:</strong><br>\n      * To test the hypothesis that <code>observed</code> follows\n      * <strong>Preconditions</strong>: <ul>\n      * <li>Expected counts must all be positive.\n      * </li>\n-     * <li>Observed counts must all be >= 0.\n+     * <li>Observed counts must all be &ge; 0.\n      * </li>\n      * <li>The observed and expected arrays must have the same length and\n      * their common length must be at least 2.\n-     * <li> <code> 0 < alpha < 0.5 </code>\n+     * <li> <code> 0 &lt; alpha &lt; 0.5 </code>\n      * </li></ul></p><p>\n      * If any of the preconditions are not met, an\n      * <code>IllegalArgumentException</code> is thrown.</p>\n+     * <p><strong>Note: </strong>This implementation rescales the\n+     * <code>expected</code> array if necessary to ensure that the sum of the\n+     * expected and observed counts are equal.</p>\n      *\n      * @param observed array of observed frequency counts\n      * @param expected array of expected frequency counts\n      * @param alpha significance level of the test\n      * @return true iff null hypothesis can be rejected with confidence\n      * 1 - alpha\n-     * @throws IllegalArgumentException if preconditions are not met\n-     * @throws MathException if an error occurs performing the test\n-     */\n-    boolean chiSquareTest(double[] expected, long[] observed, double alpha)\n-        throws IllegalArgumentException, MathException;\n+     * @throws NotPositiveException if one element of <code>expected</code> is not\n+     * positive\n+     * @throws NotStrictlyPositiveException if one element of <code>observed</code> is\n+     * not strictly positive\n+     * @throws DimensionMismatchException if the arrays length is less than 2\n+     * @throws OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]\n+     * @throws MaxCountExceededException if an error occurs computing the p-value\n+     */\n+    public boolean chiSquareTest(final double[] expected, final long[] observed,\n+                                 final double alpha)\n+        throws NotPositiveException, NotStrictlyPositiveException,\n+        DimensionMismatchException, OutOfRangeException, MaxCountExceededException {\n+\n+        if ((alpha <= 0) || (alpha > 0.5)) {\n+            throw new OutOfRangeException(LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL,\n+                                          alpha, 0, 0.5);\n+        }\n+        return chiSquareTest(expected, observed) < alpha;\n+\n+    }\n \n     /**\n      *  Computes the Chi-Square statistic associated with a\n      * <code>count[0], ... , count[count.length - 1] </code></p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n-     * <li>All counts must be >= 0.\n+     * <li>All counts must be &ge; 0.\n      * </li>\n      * <li>The count array must be rectangular (i.e. all count[i] subarrays\n      *  must have the same length).\n      * <code>IllegalArgumentException</code> is thrown.</p>\n      *\n      * @param counts array representation of 2-way table\n-     * @return chiSquare statistic\n-     * @throws IllegalArgumentException if preconditions are not met\n-     */\n-    double chiSquare(long[][] counts)\n-    throws IllegalArgumentException;\n+     * @return chiSquare test statistic\n+     * @throws NullArgumentException if the array is null\n+     * @throws DimensionMismatchException if the array is not rectangular\n+     * @throws NotPositiveException if one entry is not positive\n+     */\n+    public double chiSquare(final long[][] counts)\n+        throws NullArgumentException, NotPositiveException,\n+        DimensionMismatchException {\n+\n+        checkArray(counts);\n+        int nRows = counts.length;\n+        int nCols = counts[0].length;\n+\n+        // compute row, column and total sums\n+        double[] rowSum = new double[nRows];\n+        double[] colSum = new double[nCols];\n+        double total = 0.0d;\n+        for (int row = 0; row < nRows; row++) {\n+            for (int col = 0; col < nCols; col++) {\n+                rowSum[row] += counts[row][col];\n+                colSum[col] += counts[row][col];\n+                total += counts[row][col];\n+            }\n+        }\n+\n+        // compute expected counts and chi-square\n+        double sumSq = 0.0d;\n+        double expected = 0.0d;\n+        for (int row = 0; row < nRows; row++) {\n+            for (int col = 0; col < nCols; col++) {\n+                expected = (rowSum[row] * colSum[col]) / total;\n+                sumSq += ((counts[row][col] - expected) *\n+                        (counts[row][col] - expected)) / expected;\n+            }\n+        }\n+        return sumSq;\n+\n+    }\n \n     /**\n      * Returns the <i>observed significance level</i>, or <a href=\n      * <code>count[0], ... , count[count.length - 1] </code></p>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n-     * <li>All counts must be >= 0.\n-     * </li>\n-     * <li>The count array must be rectangular (i.e. all count[i] subarrays must have the same length).\n-     * </li>\n-     * <li>The 2-way table represented by <code>counts</code> must have at least 2 columns and\n-     *        at least 2 rows.\n+     * <li>All counts must be &ge; 0.\n+     * </li>\n+     * <li>The count array must be rectangular (i.e. all count[i] subarrays must have\n+     *     the same length).\n+     * </li>\n+     * <li>The 2-way table represented by <code>counts</code> must have at least 2\n+     *     columns and at least 2 rows.\n      * </li>\n      * </li></ul></p><p>\n      * If any of the preconditions are not met, an\n      *\n      * @param counts array representation of 2-way table\n      * @return p-value\n-     * @throws IllegalArgumentException if preconditions are not met\n-     * @throws MathException if an error occurs computing the p-value\n-     */\n-    double chiSquareTest(long[][] counts)\n-    throws IllegalArgumentException, MathException;\n+     * @throws NullArgumentException if the array is null\n+     * @throws DimensionMismatchException if the array is not rectangular\n+     * @throws NotPositiveException if one entry is not positive\n+     * @throws MaxCountExceededException if an error occurs computing the p-value\n+     */\n+    public double chiSquareTest(final long[][] counts)\n+        throws NullArgumentException, DimensionMismatchException,\n+        NotPositiveException, MaxCountExceededException {\n+\n+        checkArray(counts);\n+        double df = ((double) counts.length -1) * ((double) counts[0].length - 1);\n+        ChiSquaredDistribution distribution;\n+        distribution = new ChiSquaredDistribution(df);\n+        return 1 - distribution.cumulativeProbability(chiSquare(counts));\n+\n+    }\n \n     /**\n      * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section4/prc45.htm\">\n-     * chi-square test of independence</a> evaluating the null hypothesis that the classifications\n-     * represented by the counts in the columns of the input 2-way table are independent of the rows,\n-     * with significance level <code>alpha</code>.  Returns true iff the null hypothesis can be rejected\n-     * with 100 * (1 - alpha) percent confidence.\n+     * chi-square test of independence</a> evaluating the null hypothesis that the\n+     * classifications represented by the counts in the columns of the input 2-way table\n+     * are independent of the rows, with significance level <code>alpha</code>.\n+     * Returns true iff the null hypothesis can be rejected with 100 * (1 - alpha) percent\n+     * confidence.\n      * <p>\n      * The rows of the 2-way table are\n      * <code>count[0], ... , count[count.length - 1] </code></p>\n      * <strong>Example:</strong><br>\n      * To test the null hypothesis that the counts in\n      * <code>count[0], ... , count[count.length - 1] </code>\n-     *  all correspond to the same underlying probability distribution at the 99% level, use </p><p>\n-     * <code>chiSquareTest(counts, 0.01) </code></p>\n-     * <p>\n-     * <strong>Preconditions</strong>: <ul>\n-     * <li>All counts must be >= 0.\n-     * </li>\n-     * <li>The count array must be rectangular (i.e. all count[i] subarrays must have the same length).\n-     * </li>\n+     *  all correspond to the same underlying probability distribution at the 99% level, use</p>\n+     * <p><code>chiSquareTest(counts, 0.01)</code></p>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>All counts must be &ge; 0.\n+     * </li>\n+     * <li>The count array must be rectangular (i.e. all count[i] subarrays must have the\n+     *     same length).</li>\n      * <li>The 2-way table represented by <code>counts</code> must have at least 2 columns and\n-     *        at least 2 rows.\n-     * </li>\n+     *     at least 2 rows.</li>\n      * </li></ul></p><p>\n      * If any of the preconditions are not met, an\n      * <code>IllegalArgumentException</code> is thrown.</p>\n      * @param alpha significance level of the test\n      * @return true iff null hypothesis can be rejected with confidence\n      * 1 - alpha\n-     * @throws IllegalArgumentException if preconditions are not met\n-     * @throws MathException if an error occurs performing the test\n-     */\n-    boolean chiSquareTest(long[][] counts, double alpha)\n-    throws IllegalArgumentException, MathException;\n+     * @throws NullArgumentException if the array is null\n+     * @throws DimensionMismatchException if the array is not rectangular\n+     * @throws NotPositiveException if one entry is not positive\n+     * @throws OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]\n+     * @throws MaxCountExceededException if an error occurs computing the p-value\n+     */\n+    public boolean chiSquareTest(final long[][] counts, final double alpha)\n+        throws NullArgumentException, DimensionMismatchException,\n+        NotPositiveException, OutOfRangeException, MaxCountExceededException {\n+\n+        if ((alpha <= 0) || (alpha > 0.5)) {\n+            throw new OutOfRangeException(LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL,\n+                                          alpha, 0, 0.5);\n+        }\n+        return chiSquareTest(counts) < alpha;\n+\n+    }\n+\n+    /**\n+     * <p>Computes a\n+     * <a href=\"http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/chi2samp.htm\">\n+     * Chi-Square two sample test statistic</a> comparing bin frequency counts\n+     * in <code>observed1</code> and <code>observed2</code>.  The\n+     * sums of frequency counts in the two samples are not required to be the\n+     * same.  The formula used to compute the test statistic is</p>\n+     * <code>\n+     * &sum;[(K * observed1[i] - observed2[i]/K)<sup>2</sup> / (observed1[i] + observed2[i])]\n+     * </code> where\n+     * <br/><code>K = &sqrt;[&sum(observed2 / &sum;(observed1)]</code>\n+     * </p>\n+     * <p>This statistic can be used to perform a Chi-Square test evaluating the\n+     * null hypothesis that both observed counts follow the same distribution.</p>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>Observed counts must be non-negative.\n+     * </li>\n+     * <li>Observed counts for a specific bin must not both be zero.\n+     * </li>\n+     * <li>Observed counts for a specific sample must not all be 0.\n+     * </li>\n+     * <li>The arrays <code>observed1</code> and <code>observed2</code> must have\n+     * the same length and their common length must be at least 2.\n+     * </li></ul></p><p>\n+     * If any of the preconditions are not met, an\n+     * <code>IllegalArgumentException</code> is thrown.</p>\n+     *\n+     * @param observed1 array of observed frequency counts of the first data set\n+     * @param observed2 array of observed frequency counts of the second data set\n+     * @return chiSquare test statistic\n+     * @throws DimensionMismatchException the the length of the arrays does not match\n+     * @throws NotPositiveException if one entry in <code>observed1</code> or\n+     * <code>observed2</code> is not positive\n+     * @throws ZeroException if either all counts of <code>observed1</code> or\n+     * <code>observed2</code> are zero, or if the count at the same index is zero\n+     * for both arrays\n+     * @since 1.2\n+     */\n+    public double chiSquareDataSetsComparison(long[] observed1, long[] observed2)\n+        throws DimensionMismatchException, NotPositiveException, ZeroException {\n+\n+        // Make sure lengths are same\n+        if (observed1.length < 2) {\n+            throw new DimensionMismatchException(observed1.length, 2);\n+        }\n+        if (observed1.length != observed2.length) {\n+            throw new DimensionMismatchException(observed1.length, observed2.length);\n+        }\n+\n+        // Ensure non-negative counts\n+        checkNonNegative(observed1);\n+        checkNonNegative(observed2);\n+\n+        // Compute and compare count sums\n+        long countSum1 = 0;\n+        long countSum2 = 0;\n+        boolean unequalCounts = false;\n+        double weight = 0.0;\n+        for (int i = 0; i < observed1.length; i++) {\n+            countSum1 += observed1[i];\n+            countSum2 += observed2[i];\n+        }\n+        // Ensure neither sample is uniformly 0\n+        if (countSum1 == 0 || countSum2 == 0) {\n+            throw new ZeroException();\n+        }\n+        // Compare and compute weight only if different\n+        unequalCounts = countSum1 != countSum2;\n+        if (unequalCounts) {\n+            weight = FastMath.sqrt((double) countSum1 / (double) countSum2);\n+        }\n+        // Compute ChiSquare statistic\n+        double sumSq = 0.0d;\n+        double dev = 0.0d;\n+        double obs1 = 0.0d;\n+        double obs2 = 0.0d;\n+        for (int i = 0; i < observed1.length; i++) {\n+            if (observed1[i] == 0 && observed2[i] == 0) {\n+                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n+            } else {\n+                obs1 = observed1[i];\n+                obs2 = observed2[i];\n+                if (unequalCounts) { // apply weights\n+                    dev = obs1/weight - obs2 * weight;\n+                } else {\n+                    dev = obs1 - obs2;\n+                }\n+                sumSq += (dev * dev) / (obs1 + obs2);\n+            }\n+        }\n+        return sumSq;\n+    }\n+\n+    /**\n+     * <p>Returns the <i>observed significance level</i>, or <a href=\n+     * \"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n+     * p-value</a>, associated with a Chi-Square two sample test comparing\n+     * bin frequency counts in <code>observed1</code> and\n+     * <code>observed2</code>.\n+     * </p>\n+     * <p>The number returned is the smallest significance level at which one\n+     * can reject the null hypothesis that the observed counts conform to the\n+     * same distribution.\n+     * </p>\n+     * <p>See {@link #chiSquareDataSetsComparison(long[], long[])} for details\n+     * on the formula used to compute the test statistic. The degrees of\n+     * of freedom used to perform the test is one less than the common length\n+     * of the input observed count arrays.\n+     * </p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>Observed counts must be non-negative.\n+     * </li>\n+     * <li>Observed counts for a specific bin must not both be zero.\n+     * </li>\n+     * <li>Observed counts for a specific sample must not all be 0.\n+     * </li>\n+     * <li>The arrays <code>observed1</code> and <code>observed2</code> must\n+     * have the same length and\n+     * their common length must be at least 2.\n+     * </li></ul><p>\n+     * If any of the preconditions are not met, an\n+     * <code>IllegalArgumentException</code> is thrown.</p>\n+     *\n+     * @param observed1 array of observed frequency counts of the first data set\n+     * @param observed2 array of observed frequency counts of the second data set\n+     * @return p-value\n+     * @throws DimensionMismatchException the the length of the arrays does not match\n+     * @throws NotPositiveException if one entry in <code>observed1</code> or\n+     * <code>observed2</code> is not positive\n+     * @throws ZeroException if either all counts of <code>observed1</code> or\n+     * <code>observed2</code> are zero, or if the count at the same index is zero\n+     * for both arrays\n+     * @throws MaxCountExceededException if an error occurs computing the p-value\n+     * @since 1.2\n+     */\n+    public double chiSquareTestDataSetsComparison(long[] observed1, long[] observed2)\n+        throws DimensionMismatchException, NotPositiveException, ZeroException,\n+        MaxCountExceededException {\n+\n+        ChiSquaredDistribution distribution;\n+        distribution = new ChiSquaredDistribution((double) observed1.length - 1);\n+        return 1 - distribution.cumulativeProbability(\n+                chiSquareDataSetsComparison(observed1, observed2));\n+\n+    }\n+\n+    /**\n+     * <p>Performs a Chi-Square two sample test comparing two binned data\n+     * sets. The test evaluates the null hypothesis that the two lists of\n+     * observed counts conform to the same frequency distribution, with\n+     * significance level <code>alpha</code>.  Returns true iff the null\n+     * hypothesis can be rejected with 100 * (1 - alpha) percent confidence.\n+     * </p>\n+     * <p>See {@link #chiSquareDataSetsComparison(long[], long[])} for\n+     * details on the formula used to compute the Chisquare statistic used\n+     * in the test. The degrees of of freedom used to perform the test is\n+     * one less than the common length of the input observed count arrays.\n+     * </p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>Observed counts must be non-negative.\n+     * </li>\n+     * <li>Observed counts for a specific bin must not both be zero.\n+     * </li>\n+     * <li>Observed counts for a specific sample must not all be 0.\n+     * </li>\n+     * <li>The arrays <code>observed1</code> and <code>observed2</code> must\n+     * have the same length and their common length must be at least 2.\n+     * </li>\n+     * <li> <code> 0 < alpha < 0.5 </code>\n+     * </li></ul><p>\n+     * If any of the preconditions are not met, an\n+     * <code>IllegalArgumentException</code> is thrown.</p>\n+     *\n+     * @param observed1 array of observed frequency counts of the first data set\n+     * @param observed2 array of observed frequency counts of the second data set\n+     * @param alpha significance level of the test\n+     * @return true iff null hypothesis can be rejected with confidence\n+     * 1 - alpha\n+     * @throws DimensionMismatchException the the length of the arrays does not match\n+     * @throws NotPositiveException if one entry in <code>observed1</code> or\n+     * <code>observed2</code> is not positive\n+     * @throws ZeroException if either all counts of <code>observed1</code> or\n+     * <code>observed2</code> are zero, or if the count at the same index is zero\n+     * for both arrays\n+     * @throws OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]\n+     * @throws MaxCountExceededException if an error occurs performing the test\n+     * @since 1.2\n+     */\n+    public boolean chiSquareTestDataSetsComparison(final long[] observed1,\n+                                                   final long[] observed2,\n+                                                   final double alpha)\n+        throws DimensionMismatchException, NotPositiveException,\n+        ZeroException, OutOfRangeException, MaxCountExceededException {\n+\n+        if (alpha <= 0 ||\n+            alpha > 0.5) {\n+            throw new OutOfRangeException(LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL,\n+                                          alpha, 0, 0.5);\n+        }\n+        return chiSquareTestDataSetsComparison(observed1, observed2) < alpha;\n+\n+    }\n+\n+    /**\n+     * Checks to make sure that the input long[][] array is rectangular,\n+     * has at least 2 rows and 2 columns, and has all non-negative entries.\n+     *\n+     * @param in input 2-way table to check\n+     * @throws NullArgumentException if the array is null\n+     * @throws DimensionMismatchException if the array is not valid\n+     * @throws NotPositiveException if one entry is not positive\n+     */\n+    private void checkArray(final long[][] in)\n+        throws NullArgumentException, DimensionMismatchException,\n+        NotPositiveException {\n+\n+        if (in.length < 2) {\n+            throw new DimensionMismatchException(in.length, 2);\n+        }\n+\n+        if (in[0].length < 2) {\n+            throw new DimensionMismatchException(in[0].length, 2);\n+        }\n+\n+        checkRectangular(in);\n+        checkNonNegative(in);\n+\n+    }\n+\n+    //---------------------  Private array methods -- should find a utility home for these\n+\n+    /**\n+     * Throws DimensionMismatchException if the input array is not rectangular.\n+     *\n+     * @param in array to be tested\n+     * @throws NullArgumentException if input array is null\n+     * @throws DimensionMismatchException if input array is not rectangular\n+     */\n+    private void checkRectangular(final long[][] in)\n+        throws NullArgumentException, DimensionMismatchException {\n+\n+        MathUtils.checkNotNull(in);\n+        for (int i = 1; i < in.length; i++) {\n+            if (in[i].length != in[0].length) {\n+                throw new DimensionMismatchException(\n+                        LocalizedFormats.DIFFERENT_ROWS_LENGTHS,\n+                        in[i].length, in[0].length);\n+            }\n+        }\n+\n+    }\n+\n+    /**\n+     * Check all entries of the input array are strictly positive.\n+     *\n+     * @param in Array to be tested.\n+     * @throws NotStrictlyPositiveException if one entry is not strictly positive.\n+     */\n+    private void checkPositive(final double[] in)\n+        throws NotStrictlyPositiveException {\n+\n+        for (int i = 0; i < in.length; i++) {\n+            if (in[i] <= 0) {\n+                throw new NotStrictlyPositiveException(in[i]);\n+            }\n+        }\n+\n+    }\n+\n+    /**\n+     * Check all entries of the input array are >= 0.\n+     *\n+     * @param in Array to be tested.\n+     * @throws NotPositiveException if one entry is negative.\n+     */\n+    private void checkNonNegative(final long[] in)\n+        throws NotPositiveException {\n+\n+        for (int i = 0; i < in.length; i++) {\n+            if (in[i] < 0) {\n+                throw new NotPositiveException(in[i]);\n+            }\n+        }\n+\n+    }\n+\n+    /**\n+     * Check all entries of the input array are >= 0.\n+     *\n+     * @param in Array to be tested.\n+     * @throws NotPositiveException if one entry is negative.\n+     */\n+    private void checkNonNegative(final long[][] in)\n+        throws NotPositiveException {\n+\n+        for (int i = 0; i < in.length; i ++) {\n+            for (int j = 0; j < in[i].length; j++) {\n+                if (in[i][j] < 0) {\n+                    throw new NotPositiveException(in[i][j]);\n+                }\n+            }\n+        }\n+\n+    }\n \n }\n--- a/src/main/java/org/apache/commons/math/stat/inference/TestUtils.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/TestUtils.java\n import org.apache.commons.math.exception.ConvergenceException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MaxCountExceededException;\n+import org.apache.commons.math.exception.NotPositiveException;\n+import org.apache.commons.math.exception.NotStrictlyPositiveException;\n import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.OutOfRangeException;\n+import org.apache.commons.math.exception.ZeroException;\n import org.apache.commons.math.stat.descriptive.StatisticalSummary;\n \n /**\n     private static final TTest T_TEST = new TTestImpl();\n \n     /** Singleton ChiSquareTest instance. */\n-    private static final ChiSquareTest CHI_SQUARE_TEST = new ChiSquareTestImpl();\n-\n-    /** Singleton ChiSquareTest instance. */\n-    private static final UnknownDistributionChiSquareTest UNKNOWN_DISTRIBUTION_CHI_SQUARE_TEST =\n-        new ChiSquareTestImpl();\n+    private static final ChiSquareTest CHI_SQUARE_TEST = new ChiSquareTest();\n \n     /** Singleton OneWayAnova instance. */\n     private static final OneWayAnova ONE_WAY_ANANOVA = new OneWayAnova();\n \n-    /** Singleton MannWhitneyUTest instance using default ranking. */\n-    private static final MannWhitneyUTest MANN_WHITNEY_U_TEST = new MannWhitneyUTest();\n-\n-    /** Singleton WilcoxonSignedRankTest instance. */\n-    private static final WilcoxonSignedRankTest WILCOXON_SIGNED_RANK_TEST =\n-        new WilcoxonSignedRankTest();\n-\n     /**\n      * Prevent instantiation.\n      */\n     /**\n      * @see org.apache.commons.math.stat.inference.ChiSquareTest#chiSquare(double[], long[])\n      */\n-    public static double chiSquare(double[] expected, long[] observed)\n-        throws IllegalArgumentException {\n+    public static double chiSquare(final double[] expected, final long[] observed)\n+        throws NotPositiveException, NotStrictlyPositiveException,\n+        DimensionMismatchException {\n         return CHI_SQUARE_TEST.chiSquare(expected, observed);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.inference.ChiSquareTest#chiSquare(long[][])\n      */\n-    public static double chiSquare(long[][] counts)\n-        throws IllegalArgumentException {\n+    public static double chiSquare(final long[][] counts)\n+        throws NullArgumentException, NotPositiveException,\n+        DimensionMismatchException {\n         return CHI_SQUARE_TEST.chiSquare(counts);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.inference.ChiSquareTest#chiSquareTest(double[], long[], double)\n      */\n-    public static boolean chiSquareTest(double[] expected, long[] observed,\n-        double alpha)\n-        throws IllegalArgumentException, MathException {\n+    public static boolean chiSquareTest(final double[] expected, final long[] observed,\n+                                        final double alpha)\n+        throws NotPositiveException, NotStrictlyPositiveException,\n+        DimensionMismatchException, OutOfRangeException, MaxCountExceededException {\n         return CHI_SQUARE_TEST.chiSquareTest(expected, observed, alpha);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.inference.ChiSquareTest#chiSquareTest(double[], long[])\n      */\n-    public static double chiSquareTest(double[] expected, long[] observed)\n-        throws IllegalArgumentException, MathException {\n+    public static double chiSquareTest(final double[] expected, final long[] observed)\n+        throws NotPositiveException, NotStrictlyPositiveException,\n+        DimensionMismatchException, MaxCountExceededException {\n         return CHI_SQUARE_TEST.chiSquareTest(expected, observed);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.inference.ChiSquareTest#chiSquareTest(long[][], double)\n      */\n-    public static boolean chiSquareTest(long[][] counts, double alpha)\n-        throws IllegalArgumentException, MathException {\n+    public static boolean chiSquareTest(final long[][] counts, final double alpha)\n+        throws NullArgumentException, DimensionMismatchException,\n+        NotPositiveException, OutOfRangeException, MaxCountExceededException {\n         return CHI_SQUARE_TEST.chiSquareTest(counts, alpha);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.inference.ChiSquareTest#chiSquareTest(long[][])\n      */\n-    public static double chiSquareTest(long[][] counts)\n-        throws IllegalArgumentException, MathException {\n+    public static double chiSquareTest(final long[][] counts)\n+        throws NullArgumentException, DimensionMismatchException,\n+        NotPositiveException, MaxCountExceededException {\n         return CHI_SQUARE_TEST.chiSquareTest(counts);\n     }\n \n      *\n      * @since 1.2\n      */\n-    public static double chiSquareDataSetsComparison(long[] observed1, long[] observed2)\n-        throws IllegalArgumentException {\n-        return UNKNOWN_DISTRIBUTION_CHI_SQUARE_TEST.chiSquareDataSetsComparison(observed1, observed2);\n+    public static double chiSquareDataSetsComparison(final long[] observed1,\n+                                                     final long[] observed2)\n+        throws DimensionMismatchException, NotPositiveException, ZeroException {\n+        return CHI_SQUARE_TEST.chiSquareDataSetsComparison(observed1, observed2);\n     }\n \n     /**\n      *\n      * @since 1.2\n      */\n-    public static double chiSquareTestDataSetsComparison(long[] observed1, long[] observed2)\n-        throws IllegalArgumentException, MathException {\n-        return UNKNOWN_DISTRIBUTION_CHI_SQUARE_TEST.chiSquareTestDataSetsComparison(observed1, observed2);\n-    }\n-\n+    public static double chiSquareTestDataSetsComparison(final long[] observed1,\n+                                                         final long[] observed2)\n+        throws DimensionMismatchException, NotPositiveException, ZeroException,\n+        MaxCountExceededException {\n+        return CHI_SQUARE_TEST.chiSquareTestDataSetsComparison(observed1, observed2);\n+    }\n \n     /**\n      * @see org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest#chiSquareTestDataSetsComparison(long[], long[], double)\n      *\n      * @since 1.2\n      */\n-    public static boolean chiSquareTestDataSetsComparison(long[] observed1, long[] observed2,\n-        double alpha)\n-        throws IllegalArgumentException, MathException {\n-        return UNKNOWN_DISTRIBUTION_CHI_SQUARE_TEST.chiSquareTestDataSetsComparison(observed1, observed2, alpha);\n+    public static boolean chiSquareTestDataSetsComparison(final long[] observed1,\n+                                                          final long[] observed2,\n+                                                          final double alpha)\n+        throws DimensionMismatchException, NotPositiveException,\n+        ZeroException, OutOfRangeException, MaxCountExceededException {\n+        return CHI_SQUARE_TEST.chiSquareTestDataSetsComparison(observed1, observed2, alpha);\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/math/TestUtils.java\n+++ b/src/test/java/org/apache/commons/math/TestUtils.java\n import org.apache.commons.math.linear.FieldMatrix;\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.stat.inference.ChiSquareTest;\n-import org.apache.commons.math.stat.inference.ChiSquareTestImpl;\n import org.apache.commons.math.util.FastMath;\n import org.apache.commons.math.util.Precision;\n import org.junit.Assert;\n      * @param alpha significance level of the test\n      */\n     public static void assertChiSquareAccept(String[] valueLabels, double[] expected, long[] observed, double alpha) throws Exception {\n-        ChiSquareTest chiSquareTest = new ChiSquareTestImpl();\n+        ChiSquareTest chiSquareTest = new ChiSquareTest();\n \n         // Fail if we can reject null hypothesis that distributions are the same\n         if (chiSquareTest.chiSquareTest(expected, observed, alpha)) {\n--- a/src/test/java/org/apache/commons/math/random/RandomDataTest.java\n+++ b/src/test/java/org/apache/commons/math/random/RandomDataTest.java\n import org.apache.commons.math.stat.Frequency;\n import org.apache.commons.math.stat.descriptive.SummaryStatistics;\n import org.apache.commons.math.stat.inference.ChiSquareTest;\n-import org.apache.commons.math.stat.inference.ChiSquareTestImpl;\n import org.apache.commons.math.util.FastMath;\n import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.junit.Assert;\n     private final String[] hex = { \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\",\n             \"a\", \"b\", \"c\", \"d\", \"e\", \"f\" };\n     protected RandomDataImpl randomData = null;\n-    protected final ChiSquareTestImpl testStatistic = new ChiSquareTestImpl();\n+    protected final ChiSquareTest testStatistic = new ChiSquareTest();\n \n     @Test\n     public void testNextIntExtremeValues() {\n         }\n \n         // Use chisquare test to verify that generated values are poisson(mean)-distributed\n-        ChiSquareTest chiSquareTest = new ChiSquareTestImpl();\n+        ChiSquareTest chiSquareTest = new ChiSquareTest();\n             // Fail if we can reject null hypothesis that distributions are the same\n         if (chiSquareTest.chiSquareTest(expected, observed, alpha)) {\n             StringBuilder msgBuffer = new StringBuilder();\n--- a/src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java\n  */\n package org.apache.commons.math.stat.inference;\n \n-import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.NotPositiveException;\n+import org.apache.commons.math.exception.NotStrictlyPositiveException;\n+import org.apache.commons.math.exception.OutOfRangeException;\n+import org.apache.commons.math.exception.ZeroException;\n import org.junit.Assert;\n import org.junit.Test;\n \n \n public class ChiSquareTestTest {\n \n-    protected UnknownDistributionChiSquareTest testStatistic = new ChiSquareTestImpl();\n+    protected ChiSquareTest testStatistic = new ChiSquareTest();\n \n     @Test\n     public void testChiSquare() throws Exception {\n \n         try {\n             testStatistic.chiSquareTest(expected1, observed1, 95);\n-            Assert.fail(\"alpha out of range, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"alpha out of range, OutOfRangeException expected\");\n+        } catch (OutOfRangeException ex) {\n             // expected\n         }\n \n         double[] tooShortEx = { 1 };\n         try {\n             testStatistic.chiSquare(tooShortEx, tooShortObs);\n-            Assert.fail(\"arguments too short, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"arguments too short, DimensionMismatchException expected\");\n+        } catch (DimensionMismatchException ex) {\n             // expected\n         }\n \n         double[] unMatchedEx = { 1, 1, 2 };\n         try {\n             testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n-            Assert.fail(\"arrays have different lengths, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"arrays have different lengths, DimensionMismatchException expected\");\n+        } catch (DimensionMismatchException ex) {\n             // expected\n         }\n \n         expected[0] = 0;\n         try {\n             testStatistic.chiSquareTest(expected, observed, .01);\n-            Assert.fail(\"bad expected count, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"bad expected count, NotStrictlyPositiveException expected\");\n+        } catch (NotStrictlyPositiveException ex) {\n             // expected\n         }\n \n         observed[0] = -1;\n         try {\n             testStatistic.chiSquareTest(expected, observed, .01);\n-            Assert.fail(\"bad expected count, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"bad expected count, NotPositiveException expected\");\n+        } catch (NotPositiveException ex) {\n             // expected\n         }\n \n         long[][] counts3 = { {40, 22, 43}, {91, 21, 28}, {60, 10}};\n         try {\n             testStatistic.chiSquare(counts3);\n-            Assert.fail(\"Expecting MathIllegalArgumentException\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"Expecting DimensionMismatchException\");\n+        } catch (DimensionMismatchException ex) {\n             // expected\n         }\n \n         long[][] counts4 = {{40, 22, 43}};\n         try {\n             testStatistic.chiSquare(counts4);\n-            Assert.fail(\"Expecting MathIllegalArgumentException\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"Expecting DimensionMismatchException\");\n+        } catch (DimensionMismatchException ex) {\n             // expected\n         }\n         long[][] counts5 = {{40}, {40}, {30}, {10}};\n         try {\n             testStatistic.chiSquare(counts5);\n-            Assert.fail(\"Expecting MathIllegalArgumentException\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"Expecting DimensionMismatchException\");\n+        } catch (DimensionMismatchException ex) {\n             // expected\n         }\n \n         long[][] counts6 = {{10, -2}, {30, 40}, {60, 90} };\n         try {\n             testStatistic.chiSquare(counts6);\n-            Assert.fail(\"Expecting MathIllegalArgumentException\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"Expecting NotPositiveException\");\n+        } catch (NotPositiveException ex) {\n             // expected\n         }\n \n         // bad alpha\n         try {\n             testStatistic.chiSquareTest(counts, 0);\n-            Assert.fail(\"Expecting MathIllegalArgumentException\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"Expecting OutOfRangeException\");\n+        } catch (OutOfRangeException ex) {\n             // expected\n         }\n     }\n         long[] obs = new long[] {\n             2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899\n         };\n-        org.apache.commons.math.stat.inference.ChiSquareTestImpl csti =\n-            new org.apache.commons.math.stat.inference.ChiSquareTestImpl();\n+        org.apache.commons.math.stat.inference.ChiSquareTest csti =\n+            new org.apache.commons.math.stat.inference.ChiSquareTest();\n         double cst = csti.chiSquareTest(exp, obs);\n         Assert.assertEquals(\"chi-square p-value\", 0.0, cst, 1E-3);\n         Assert.assertEquals( \"chi-square test statistic\",\n     /** Target values verified using DATAPLOT version 2006.3 */\n     @Test\n     public void testChiSquareDataSetsComparisonEqualCounts()\n-    throws Exception {\n+        throws Exception {\n         long[] observed1 = {10, 12, 12, 10};\n         long[] observed2 = {5, 15, 14, 10};\n         Assert.assertEquals(\"chi-square p value\", 0.541096,\n     /** Target values verified using DATAPLOT version 2006.3 */\n     @Test\n     public void testChiSquareDataSetsComparisonUnEqualCounts()\n-    throws Exception {\n+        throws Exception {\n         long[] observed1 = {10, 12, 12, 10, 15};\n         long[] observed2 = {15, 10, 10, 15, 5};\n         Assert.assertEquals(\"chi-square p value\", 0.124115,\n \n     @Test\n     public void testChiSquareDataSetsComparisonBadCounts()\n-    throws Exception {\n+        throws Exception {\n         long[] observed1 = {10, -1, 12, 10, 15};\n         long[] observed2 = {15, 10, 10, 15, 5};\n         try {\n             testStatistic.chiSquareTestDataSetsComparison(\n                     observed1, observed2);\n-            Assert.fail(\"Expecting MathIllegalArgumentException - negative count\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"Expecting NotPositiveException - negative count\");\n+        } catch (NotPositiveException ex) {\n             // expected\n         }\n         long[] observed3 = {10, 0, 12, 10, 15};\n         try {\n             testStatistic.chiSquareTestDataSetsComparison(\n                     observed3, observed4);\n-            Assert.fail(\"Expecting MathIllegalArgumentException - double 0's\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"Expecting ZeroException - double 0's\");\n+        } catch (ZeroException ex) {\n             // expected\n         }\n         long[] observed5 = {10, 10, 12, 10, 15};\n         try {\n             testStatistic.chiSquareTestDataSetsComparison(\n                     observed5, observed6);\n-            Assert.fail(\"Expecting MathIllegalArgumentException - vanishing counts\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"Expecting ZeroException - vanishing counts\");\n+        } catch (ZeroException ex) {\n             // expected\n         }\n     }\n--- a/src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.exception.NotPositiveException;\n+import org.apache.commons.math.exception.NotStrictlyPositiveException;\n+import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.stat.descriptive.SummaryStatistics;\n import org.junit.Assert;\n import org.junit.Test;\n \n         try {\n             TestUtils.chiSquareTest(expected1, observed1, 95);\n-            Assert.fail(\"alpha out of range, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"alpha out of range, OutOfRangeException expected\");\n+        } catch (OutOfRangeException ex) {\n             // expected\n         }\n \n         double[] tooShortEx = { 1 };\n         try {\n             TestUtils.chiSquare(tooShortEx, tooShortObs);\n-            Assert.fail(\"arguments too short, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"arguments too short, DimensionMismatchException expected\");\n+        } catch (DimensionMismatchException ex) {\n             // expected\n         }\n \n         double[] unMatchedEx = { 1, 1, 2 };\n         try {\n             TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n-            Assert.fail(\"arrays have different lengths, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"arrays have different lengths, DimensionMismatchException expected\");\n+        } catch (DimensionMismatchException ex) {\n             // expected\n         }\n \n         expected[0] = 0;\n         try {\n             TestUtils.chiSquareTest(expected, observed, .01);\n-            Assert.fail(\"bad expected count, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"bad expected count, NotStrictlyPositiveException expected\");\n+        } catch (NotStrictlyPositiveException ex) {\n             // expected\n         }\n \n         observed[0] = -1;\n         try {\n             TestUtils.chiSquareTest(expected, observed, .01);\n-            Assert.fail(\"bad expected count, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"bad expected count, NotPositiveException expected\");\n+        } catch (NotPositiveException ex) {\n             // expected\n         }\n \n         long[][] counts3 = { {40, 22, 43}, {91, 21, 28}, {60, 10}};\n         try {\n             TestUtils.chiSquare(counts3);\n-            Assert.fail(\"Expecting MathIllegalArgumentException\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"Expecting DimensionMismatchException\");\n+        } catch (DimensionMismatchException ex) {\n             // expected\n         }\n \n         long[][] counts4 = {{40, 22, 43}};\n         try {\n             TestUtils.chiSquare(counts4);\n-            Assert.fail(\"Expecting MathIllegalArgumentException\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"Expecting DimensionMismatchException\");\n+        } catch (DimensionMismatchException ex) {\n             // expected\n         }\n         long[][] counts5 = {{40}, {40}, {30}, {10}};\n         try {\n             TestUtils.chiSquare(counts5);\n-            Assert.fail(\"Expecting MathIllegalArgumentException\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"Expecting DimensionMismatchException\");\n+        } catch (DimensionMismatchException ex) {\n             // expected\n         }\n \n         long[][] counts6 = {{10, -2}, {30, 40}, {60, 90} };\n         try {\n             TestUtils.chiSquare(counts6);\n-            Assert.fail(\"Expecting MathIllegalArgumentException\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"Expecting NotPositiveException\");\n+        } catch (NotPositiveException ex) {\n             // expected\n         }\n \n         // bad alpha\n         try {\n             TestUtils.chiSquareTest(counts, 0);\n-            Assert.fail(\"Expecting MathIllegalArgumentException\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"Expecting OutOfRangeException\");\n+        } catch (OutOfRangeException ex) {\n             // expected\n         }\n     }\n         long[] obs = new long[] {\n                 2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899\n         };\n-        org.apache.commons.math.stat.inference.ChiSquareTestImpl csti =\n-            new org.apache.commons.math.stat.inference.ChiSquareTestImpl();\n+        org.apache.commons.math.stat.inference.ChiSquareTest csti =\n+            new org.apache.commons.math.stat.inference.ChiSquareTest();\n         double cst = csti.chiSquareTest(exp, obs);\n         Assert.assertEquals(\"chi-square p-value\", 0.0, cst, 1E-3);\n         Assert.assertEquals( \"chi-square test statistic\",", "timestamp": 1329070073, "metainfo": ""}