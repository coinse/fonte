{"sha": "60a5394d6e8fe82bf0ba01fcb1c7f6f33e77ee97", "log": "New test for sin and cos derivatives.  ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java\n     }\n \n     @Test\n-    public void testPower() {\n+    public void testPow() {\n         for (int maxOrder = 1; maxOrder < 5; ++maxOrder) {\n             for (int n = 0; n < 10; ++n) {\n \n     }\n \n     @Test\n+    public void testSinCos() {\n+        double epsilon = 5.0e-16;\n+        for (int maxOrder = 0; maxOrder < 6; ++maxOrder) {\n+            for (double x = 0.1; x < 1.2; x += 0.001) {\n+                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n+                DerivativeStructure sin = dsX.sin();\n+                DerivativeStructure cos = dsX.cos();\n+                double s = FastMath.sin(x);\n+                double c = FastMath.cos(x);\n+                for (int n = 0; n <= maxOrder; ++n) {\n+                    switch (n % 4) {\n+                    case 0 :\n+                        Assert.assertEquals( s, sin.getPartialDerivative(n), epsilon);\n+                        Assert.assertEquals( c, cos.getPartialDerivative(n), epsilon);\n+                        break;\n+                    case 1 :\n+                        Assert.assertEquals( c, sin.getPartialDerivative(n), epsilon);\n+                        Assert.assertEquals(-s, cos.getPartialDerivative(n), epsilon);\n+                        break;\n+                    case 2 :\n+                        Assert.assertEquals(-s, sin.getPartialDerivative(n), epsilon);\n+                        Assert.assertEquals(-c, cos.getPartialDerivative(n), epsilon);\n+                        break;\n+                    default :\n+                        Assert.assertEquals(-c, sin.getPartialDerivative(n), epsilon);\n+                        Assert.assertEquals( s, cos.getPartialDerivative(n), epsilon);\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n     public void testTangentDefinition() {\n         double[] epsilon = new double[] { 5.0e-16, 2.0e-15, 3.0e-14, 5.0e-13, 2.0e-11 };\n         for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {", "timestamp": 1344601092, "metainfo": ""}