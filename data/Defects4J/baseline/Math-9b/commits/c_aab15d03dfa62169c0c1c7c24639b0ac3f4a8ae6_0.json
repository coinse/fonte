{"sha": "aab15d03dfa62169c0c1c7c24639b0ac3f4a8ae6", "log": "improved javadoc  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/ode/events/EventHandler.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventHandler.java\n  * during ODE integration.\n  *\n  * <p>Some events can be triggered at discrete times as an ODE problem\n- * is solved. These occurs for example when the integration process\n+ * is solved. This occurs for example when the integration process\n  * should be stopped as some state is reached (G-stop facility) when the\n  * precise date is unknown a priori, or when the derivatives have\n  * discontinuities, or simply when the user wants to monitor some\n   /** Handle an event and choose what to do next.\n \n    * <p>This method is called when the integrator has accepted a step\n-   * ending exactly on a sign change of the function, just before the\n-   * step handler itself is called. It allows the user to update his\n-   * internal data to acknowledge the fact the event has been handled\n-   * (for example setting a flag in the {@link\n+   * ending exactly on a sign change of the function, just <em>before</em>\n+   * the step handler itself is called (see below for scheduling). It\n+   * allows the user to update his internal data to acknowledge the fact\n+   * the event has been handled (for example setting a flag in the {@link\n    * org.apache.commons.math.ode.FirstOrderDifferentialEquations\n    * differential equations} to switch the derivatives computation in\n    * case of discontinuity), or to direct the integrator to either stop\n    *   be taken (apart from having called this method) and integration\n    *   will continue.</li>\n    * </ul>\n+\n+   * <p>The scheduling between this method and the {@link\n+   * org.apache.commons.math.ode.sampling.StepHandler StepHandler} method {@link\n+   * org.apache.commons.math.ode.sampling.StepNormalizerStepHandler#handleStep(\n+   * org.apache.commons.math.ode.sampling.StepInterpolator, boolean)\n+   * handleStep(interpolator, isLast)} is to call this method first and\n+   * <code>handleStep</code> afterwards. This scheduling allows the integrator to\n+   * pass <code>true</code> as the <code>isLast</code> parameter to the step\n+   * handler to make it aware the step will be the last one if this method\n+   * returns {@link #STOP}. As the interpolator may be used to navigate back\n+   * throughout the last step (as {@link\n+   * org.apache.commons.math.ode.sampling.StepNormalizerStepNormalizer\n+   * StepNormalizer} does for example), user code called by this method and user\n+   * code called by step handlers may experience apparently out of order values\n+   * of the independent time variable. As an example, if the same user object\n+   * implements both this {@link EventHandler EventHandler} interface and the\n+   * {@link org.apache.commons.math.ode.sampling.FixedStepHandler FixedStepHandler}\n+   * interface, a <em>forward</em> integration may call its\n+   * <code>eventOccurred</code> method with t = 10 first and call its\n+   * <code>handleStep</code> method with t = 9 afterwards. Such out of order\n+   * calls are limited to the size of the integration step for {@link\n+   * org.apache.commons.math.ode.sampling.StepHandler variable step handlers} and\n+   * to the size of the fixed step for {@link\n+   * org.apache.commons.math.ode.sampling.FixedStepHandler fixed step handlers}.</p>\n \n    * @param t current value of the independent <i>time</i> variable\n    * @param y array containing the current value of the state vector", "timestamp": 1263832278, "metainfo": ""}