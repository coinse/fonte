{"sha": "8a668a8e31a8124a6e882305b8c9c5932016cc1d", "log": "Added Stirling numbers of the second kind in ArithmeticUtils.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java\n+++ b/src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java\n package org.apache.commons.math3.util;\n \n import java.math.BigInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n import org.apache.commons.math3.exception.MathArithmeticException;\n import org.apache.commons.math3.exception.NotPositiveException;\n import org.apache.commons.math3.exception.NumberIsTooLargeException;\n                479001600l,         6227020800l,         87178291200l,\n            1307674368000l,     20922789888000l,     355687428096000l,\n         6402373705728000l, 121645100408832000l, 2432902008176640000l };\n+\n+    /** Stirling numbers of the second kind. */\n+    static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]> (null);\n \n     /** Private constructor. */\n     private ArithmeticUtils() {\n     }\n \n     /**\n+     * Returns the <a\n+     * href=\"http://mathworld.wolfram.com/StirlingNumberoftheSecondKind.html\">\n+     * Stirling number of the second kind</a>, \"{@code S(n,k)}\", the number of\n+     * ways of partitioning an {@code n}-element set into {@code k} non-empty\n+     * subsets.\n+     * <p>\n+     * The preconditions are {@code 0 <= k <= n } (otherwise\n+     * {@code NotPositiveException} is thrown)\n+     * </p>\n+     * @param n the size of the set\n+     * @param k the number of non-empty subsets\n+     * @return {@code S(n,k)}\n+     * @throws NotPositiveException if {@code k < 0}.\n+     * @throws NumberIsTooLargeException if {@code k > n}.\n+     * @throws MathArithmeticException if some overflow happens, typically for n exceeding 25 and\n+     * k between 20 and n-2 (S(n,n-1) is handled specifically and does not overflow)\n+     */\n+    public static long stirlingS2(final int n, final int k)\n+        throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException {\n+        if (k < 0) {\n+            throw new NotPositiveException(k);\n+        }\n+        if (k > n) {\n+            throw new NumberIsTooLargeException(k, n, true);\n+        }\n+\n+        long[][] stirlingS2 = STIRLING_S2.get();\n+\n+        if (stirlingS2 == null) {\n+            // the cache has never been initialized, compute the first numbers\n+            // by direct recurrence relation\n+\n+            // as S(26,9) = 11201516780955125625 is larger than Long.MAX_VALUE\n+            // we must stop computation at row 26\n+            final int maxIndex = 26;\n+            stirlingS2 = new long[maxIndex][];\n+            stirlingS2[0] = new long[] { 1l };\n+            for (int i = 1; i < stirlingS2.length; ++i) {\n+                stirlingS2[i] = new long[i + 1];\n+                stirlingS2[i][0] = 0;\n+                stirlingS2[i][1] = 1;\n+                stirlingS2[i][i] = 1;\n+                for (int j = 2; j < i; ++j) {\n+                    stirlingS2[i][j] = j * stirlingS2[i - 1][j] + stirlingS2[i - 1][j - 1];\n+                }\n+            }\n+\n+            // atomically save the cache\n+            STIRLING_S2.compareAndSet(null, stirlingS2);\n+\n+        }\n+\n+        if (n < stirlingS2.length) {\n+            // the number is in the small cache\n+            return stirlingS2[n][k];\n+        } else {\n+            // use explicit formula to compute the number without caching it\n+            if (k == 0) {\n+                return 0;\n+            } else if (k == 1 || k == n) {\n+                return 1;\n+            } else if (k == 2) {\n+                return (1l << (n - 1)) - 1l;\n+            } else if (k == n - 1) {\n+                return binomialCoefficient(n, 2);\n+            } else {\n+                // definition formula: note that this may trigger some overflow\n+                long sum = 0;\n+                long sign = ((k & 0x1) == 0) ? 1 : -1;\n+                for (int j = 1; j <= k; ++j) {\n+                    sign = -sign;\n+                    sum += sign * binomialCoefficient(k, j) * pow(j, n);\n+                    if (sum < 0) {\n+                        // there was an overflow somewhere\n+                        throw new MathArithmeticException(LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN,\n+                                                          n, 0, stirlingS2.length - 1);\n+                    }\n+                }\n+                return sum / factorial(k);\n+            }\n+        }\n+\n+    }\n+\n+    /**\n      * Add two long integers, checking for overflow.\n      *\n      * @param a Addend.\n--- a/src/test/java/org/apache/commons/math3/util/ArithmeticUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math3/util/ArithmeticUtilsTest.java\n \n import org.apache.commons.math3.exception.MathArithmeticException;\n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n+import org.apache.commons.math3.exception.NotPositiveException;\n+import org.apache.commons.math3.exception.NumberIsTooLargeException;\n import org.apache.commons.math3.random.RandomDataImpl;\n import org.junit.Assert;\n import org.junit.Test;\n         }\n     }\n \n+    @Test\n+    public void testStirlingS2() {\n+\n+        Assert.assertEquals(1, ArithmeticUtils.stirlingS2(0, 0));\n+\n+        for (int n = 1; n < 30; ++n) {\n+            Assert.assertEquals(0, ArithmeticUtils.stirlingS2(n, 0));\n+            Assert.assertEquals(1, ArithmeticUtils.stirlingS2(n, 1));\n+            if (n > 2) {\n+                Assert.assertEquals((1l << (n - 1)) - 1l, ArithmeticUtils.stirlingS2(n, 2));\n+                Assert.assertEquals(ArithmeticUtils.binomialCoefficient(n, 2),\n+                                    ArithmeticUtils.stirlingS2(n, n - 1));\n+            }\n+            Assert.assertEquals(1, ArithmeticUtils.stirlingS2(n, n));\n+        }\n+        Assert.assertEquals(536870911l, ArithmeticUtils.stirlingS2(30, 2));\n+        Assert.assertEquals(576460752303423487l, ArithmeticUtils.stirlingS2(60, 2));\n+\n+        Assert.assertEquals(   25, ArithmeticUtils.stirlingS2( 5, 3));\n+        Assert.assertEquals(   90, ArithmeticUtils.stirlingS2( 6, 3));\n+        Assert.assertEquals(   65, ArithmeticUtils.stirlingS2( 6, 4));\n+        Assert.assertEquals(  301, ArithmeticUtils.stirlingS2( 7, 3));\n+        Assert.assertEquals(  350, ArithmeticUtils.stirlingS2( 7, 4));\n+        Assert.assertEquals(  140, ArithmeticUtils.stirlingS2( 7, 5));\n+        Assert.assertEquals(  966, ArithmeticUtils.stirlingS2( 8, 3));\n+        Assert.assertEquals( 1701, ArithmeticUtils.stirlingS2( 8, 4));\n+        Assert.assertEquals( 1050, ArithmeticUtils.stirlingS2( 8, 5));\n+        Assert.assertEquals(  266, ArithmeticUtils.stirlingS2( 8, 6));\n+        Assert.assertEquals( 3025, ArithmeticUtils.stirlingS2( 9, 3));\n+        Assert.assertEquals( 7770, ArithmeticUtils.stirlingS2( 9, 4));\n+        Assert.assertEquals( 6951, ArithmeticUtils.stirlingS2( 9, 5));\n+        Assert.assertEquals( 2646, ArithmeticUtils.stirlingS2( 9, 6));\n+        Assert.assertEquals(  462, ArithmeticUtils.stirlingS2( 9, 7));\n+        Assert.assertEquals( 9330, ArithmeticUtils.stirlingS2(10, 3));\n+        Assert.assertEquals(34105, ArithmeticUtils.stirlingS2(10, 4));\n+        Assert.assertEquals(42525, ArithmeticUtils.stirlingS2(10, 5));\n+        Assert.assertEquals(22827, ArithmeticUtils.stirlingS2(10, 6));\n+        Assert.assertEquals( 5880, ArithmeticUtils.stirlingS2(10, 7));\n+        Assert.assertEquals(  750, ArithmeticUtils.stirlingS2(10, 8));\n+\n+    }\n+\n+    @Test(expected=NotPositiveException.class)\n+    public void testStirlingS2NegativeN() {\n+        ArithmeticUtils.stirlingS2(3, -1);\n+    }\n+\n+    @Test(expected=NumberIsTooLargeException.class)\n+    public void testStirlingS2LargeK() {\n+        ArithmeticUtils.stirlingS2(3, 4);\n+    }\n+\n+    @Test(expected=MathArithmeticException.class)\n+    public void testStirlingS2Overflow() {\n+        ArithmeticUtils.stirlingS2(26, 9);\n+    }\n+\n     /**\n      * Exact (caching) recursive implementation to test against\n      */", "timestamp": 1344600923, "metainfo": ""}