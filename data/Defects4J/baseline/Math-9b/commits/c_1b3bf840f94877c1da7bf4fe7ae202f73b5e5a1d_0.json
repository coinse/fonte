{"sha": "1b3bf840f94877c1da7bf4fe7ae202f73b5e5a1d", "log": "Added RandomAdaptor to complete PRNG pluggability framework, updated User Guide.  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/random/RandomAdaptor.java\n+/*\n+ * Copyright 2005 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.random;\n+\n+import java.util.Random;\n+\n+/**\n+ * Extension of <code>java.util.Random</code> wrapping a\n+ * {@link RandomGenerator}.   \n+ *\n+ * @since 1.1\n+ * @version $Revision:$ $Date$\n+ */\n+public class RandomAdaptor extends Random implements RandomGenerator {\n+    \n+    /** Wrapped randomGenerator instance */\n+    private RandomGenerator randomGenerator = null;\n+    \n+    /** \n+     * Prevent instantiation without a generator argument\n+     */ \n+    private RandomAdaptor() { }\n+    \n+    /**\n+     * Construct a RandomAdaptor wrapping the supplied RandomGenerator.\n+     * \n+     * @param randomGenerator  the wrapped generator\n+     */\n+    public RandomAdaptor(RandomGenerator randomGenerator) {\n+        this.randomGenerator = randomGenerator;\n+    } \n+    \n+    /**\n+     * Factory method to create a <code>Random</code> using the supplied\n+     * <code>RandomGenerator</code>.\n+     * \n+     * @param randomGenerator\n+     * @return a Random instance wrapping the RandomGenerator\n+     */\n+    public static Random createAdaptor(RandomGenerator randomGenerator) {\n+        return new RandomAdaptor(randomGenerator);\n+    }\n+    \n+    /* (non-Javadoc)\n+     * @see java.util.Random#nextBoolean()\n+     */\n+    public boolean nextBoolean() {\n+        return randomGenerator.nextBoolean();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see java.util.Random#nextBytes(byte[])\n+     */\n+    public void nextBytes(byte[] bytes) {\n+        randomGenerator.nextBytes(bytes);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see java.util.Random#nextDouble()\n+     */\n+    public double nextDouble() {\n+        return randomGenerator.nextDouble();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see java.util.Random#nextFloat()\n+     */\n+    public float nextFloat() {\n+        return randomGenerator.nextFloat();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see java.util.Random#nextGaussian()\n+     */\n+    public double nextGaussian() {\n+        return randomGenerator.nextGaussian();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see java.util.Random#nextInt()\n+     */\n+    public int nextInt() {\n+        return randomGenerator.nextInt();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see java.util.Random#nextInt(int)\n+     */\n+    public int nextInt(int n) {\n+        return randomGenerator.nextInt(n);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see java.util.Random#nextLong()\n+     */\n+    public long nextLong() {\n+        return randomGenerator.nextLong();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see java.util.Random#setSeed(long)\n+     */\n+    public void setSeed(long seed) {\n+        if (randomGenerator != null) {  // required to avoid NPE in constructor\n+            randomGenerator.setSeed(seed);\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/random/RandomAdaptorTest.java\n+/*\n+ * Copyright 2005 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.random;\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import java.util.Random;\n+\n+/**\n+ * Test cases for the RandomAdaptor class\n+ *\n+ * @version $Revision:$ $Date$\n+ */\n+\n+public class RandomAdaptorTest extends RandomDataTest {\n+    \n+    public RandomAdaptorTest(String name) {\n+        super(name);\n+    } \n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(RandomAdaptorTest.class);\n+        suite.setName(\"RandomAdaptor Tests\");\n+        return suite;\n+    }\n+    \n+    public void testAdaptor() {\n+        ConstantGenerator generator = new ConstantGenerator();\n+        Random random = RandomAdaptor.createAdaptor(generator);\n+        checkConstant(random);\n+        RandomAdaptor randomAdaptor = new RandomAdaptor(generator);\n+        checkConstant(randomAdaptor); \n+    }\n+    \n+    private void checkConstant(Random random) {\n+        byte[] bytes = new byte[] {0};\n+        random.nextBytes(bytes);\n+        assertEquals(0, bytes[0]);  \n+        assertEquals(false, random.nextBoolean());\n+        assertEquals(0, random.nextDouble(), 0);\n+        assertEquals(0, random.nextFloat(), 0);\n+        assertEquals(0, random.nextGaussian(), 0);\n+        assertEquals(0, random.nextInt());\n+        assertEquals(0, random.nextInt(1));\n+        assertEquals(0, random.nextLong());\n+        random.setSeed(100);\n+        assertEquals(0, random.nextDouble(), 0);\n+    }\n+    \n+    /*\n+     * \"Constant\" generator to test Adaptor delegation.\n+     * \"Powered by Eclipse ;-)\"\n+     * \n+     */\n+    private class ConstantGenerator implements RandomGenerator {\n+        \n+        public boolean nextBoolean() {\n+            return false;\n+        }\n+        \n+        public void nextBytes(byte[] bytes) {\n+        }\n+\n+        public double nextDouble() {\n+            return 0;\n+        }\n+\n+        public float nextFloat() {\n+            return 0;\n+        }\n+\n+        public double nextGaussian() {\n+            return 0;\n+        }\n+\n+        public int nextInt() {\n+            return 0;\n+        }\n+\n+        public int nextInt(int n) {\n+            return 0;\n+        }\n+\n+        public long nextLong() {\n+            return 0;\n+        }\n+\n+        public void setSeed(long seed) {\n+        }       \n+    }\n+}", "timestamp": 1117681605, "metainfo": ""}