{"sha": "49a9b44d803fcb5a5bb9b553cc632e03ec3ea4de", "log": "Unnecessary to cast byte into byte  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/dfp/DfpMath.java\n+++ b/src/main/java/org/apache/commons/math/dfp/DfpMath.java\n         final int ia = inta.intValue();\n         if (ia > 2147483646) {\n             // return +Infinity\n-            return a.newInstance((byte)1, (byte) Dfp.INFINITE);\n+            return a.newInstance((byte)1, Dfp.INFINITE);\n         }\n \n         if (ia < -2147483646) {\n         if (a.equals(a.getZero()) || a.lessThan(a.getZero()) || a.isNaN()) {\n             // negative, zero or NaN\n             a.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);\n-            return a.dotrap(DfpField.FLAG_INVALID, \"ln\", a, a.newInstance((byte)1, (byte) Dfp.QNAN));\n+            return a.dotrap(DfpField.FLAG_INVALID, \"ln\", a, a.newInstance((byte)1, Dfp.QNAN));\n         }\n \n         if (a.classify() == Dfp.INFINITE) {\n         if (x.isNaN() || y.isNaN()) {\n             // Test for NaNs\n             x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);\n-            return x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, x.newInstance((byte)1, (byte) Dfp.QNAN));\n+            return x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, x.newInstance((byte)1, Dfp.QNAN));\n         }\n \n         // X == 0\n                 if (y.greaterThan(zero)) {\n                     return x.newInstance(zero);\n                 } else {\n-                    return x.newInstance(x.newInstance((byte)1, (byte)Dfp.INFINITE));\n+                    return x.newInstance(x.newInstance((byte)1, Dfp.INFINITE));\n                 }\n             } else {\n                 // X == -0\n                     if (y.greaterThan(zero)) {\n                         return x.newInstance(zero.negate());\n                     } else {\n-                        return x.newInstance(x.newInstance((byte)-1, (byte)Dfp.INFINITE));\n+                        return x.newInstance(x.newInstance((byte)-1, Dfp.INFINITE));\n                     }\n                 } else {\n                     // Y is not odd integer\n                     if (y.greaterThan(zero)) {\n                         return x.newInstance(zero);\n                     } else {\n-                        return x.newInstance(x.newInstance((byte)1, (byte)Dfp.INFINITE));\n+                        return x.newInstance(x.newInstance((byte)1, Dfp.INFINITE));\n                     }\n                 }\n             }\n \n         if (x.equals(one) && y.classify() == Dfp.INFINITE) {\n             x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);\n-            return x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, x.newInstance((byte)1, (byte) Dfp.QNAN));\n+            return x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, x.newInstance((byte)1, Dfp.QNAN));\n         }\n \n         if (x.classify() == Dfp.INFINITE) {\n                 if (y.classify() == Dfp.FINITE && y.rint().equals(y) && !y.remainder(two).equals(zero)) {\n                     // If y is odd integer\n                     if (y.greaterThan(zero)) {\n-                        return x.newInstance(x.newInstance((byte)-1, (byte)Dfp.INFINITE));\n+                        return x.newInstance(x.newInstance((byte)-1, Dfp.INFINITE));\n                     } else {\n                         return x.newInstance(zero.negate());\n                     }\n                 } else {\n                     // Y is not odd integer\n                     if (y.greaterThan(zero)) {\n-                        return x.newInstance(x.newInstance((byte)1, (byte)Dfp.INFINITE));\n+                        return x.newInstance(x.newInstance((byte)1, Dfp.INFINITE));\n                     } else {\n                         return x.newInstance(zero);\n                     }\n \n         if (invert && !y.rint().equals(y)) {\n             x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);\n-            return x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, x.newInstance((byte)1, (byte) Dfp.QNAN));\n+            return x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, x.newInstance((byte)1, Dfp.QNAN));\n         }\n \n         // End special cases", "timestamp": 1285897089, "metainfo": ""}