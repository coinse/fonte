{"sha": "c7e91c8311d306e6a8f6191f9f2f69e09f50c3ba", "log": "Separating test cases.   ", "commit": "\n--- a/src/test/java/org/apache/commons/math/complex/ComplexTest.java\n+++ b/src/test/java/org/apache/commons/math/complex/ComplexTest.java\n     public void testDivideZero() {\n         Complex x = new Complex(3.0, 4.0);\n         Complex z = x.divide(Complex.ZERO);\n+        // Assert.assertEquals(z, Complex.INF); // See MATH-657\n+        Assert.assertEquals(z, Complex.NaN);\n+    }\n+\n+    @Test\n+    public void testDivideZeroZero() {\n+        Complex x = new Complex(0.0, 0.0);\n+        Complex z = x.divide(Complex.ZERO);\n         Assert.assertEquals(z, Complex.NaN);\n     }\n \n \n     @Test\n     public void testScalarMultiplyInf() {\n-        Complex x = new Complex(1,1);\n+        Complex x = new Complex(1, 1);\n         double yDouble = Double.POSITIVE_INFINITY;\n         Complex yComplex = new Complex(yDouble);\n         Assert.assertEquals(x.multiply(yComplex), x.multiply(yDouble));\n         \n         yDouble = Double.NEGATIVE_INFINITY;\n-         yComplex = new Complex(yDouble);\n+        yComplex = new Complex(yDouble);\n         Assert.assertEquals(x.multiply(yComplex), x.multiply(yDouble));\n     }\n \n     }\n \n     @Test\n+    public void testAtanI() {\n+        Assert.assertTrue(Complex.I.atan().isNaN());\n+    }\n+\n+    @Test\n     public void testAtanNaN() {\n         Assert.assertTrue(Complex.NaN.atan().isNaN());\n-        Assert.assertTrue(Complex.I.atan().isNaN());\n     }\n \n     @Test", "timestamp": 1315231456, "metainfo": ""}