{"sha": "849284f1db2aa7c1620897db0ec50b1b38bd9684", "log": "Fixed error computing cumulative frequencies when actual parameter is an Integer.  Reported to commons-dev list by Jon Langlois.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n  * The values are ordered using the default (natural order), unless a  \n  * <code>Comparator</code> is supplied in the constructor.\n  *\n- * @version $Revision: 1.27 $ $Date: 2004/08/22 01:42:58 $\n+ * @version $Revision: 1.28 $ $Date: 2004/09/19 22:47:27 $\n  */\n public class Frequency implements Serializable {\n     \n     \n     /**\n      * Returns an Iterator over the set of values that have been added.\n+     * <p>\n+     * If added values are itegral (i.e., integers, longs, Integers, or Longs), \n+     * they are converted to Longs when they are added, so the objects returned\n+     * by the Iterator will in this case be Longs.\n      * \n      * @return values Iterator\n      */\n     public long getCumFreq(Object v) {\n         if (getSumFreq() == 0) {\n             return 0;\n+        }\n+        if (v instanceof Integer) {\n+            return getCumFreq(((Integer) v).longValue());\n         }\n         Comparator c = freqTable.comparator();\n         if (c == null) {\n--- a/src/test/org/apache/commons/math/stat/FrequencyTest.java\n+++ b/src/test/org/apache/commons/math/stat/FrequencyTest.java\n /**\n  * Test cases for the {@link Frequency} class.\n  *\n- * @version $Revision: 1.13 $ $Date: 2004/08/12 15:33:39 $\n+ * @version $Revision: 1.14 $ $Date: 2004/09/19 22:47:27 $\n  */\n \n public final class FrequencyTest extends TestCase {\n         assertEquals(\"zero cumulative frequency\", 0, f.getCumFreq(0));\n         assertEquals(\"one cumulative frequency\", 3,  f.getCumFreq(1));\n         assertEquals(\"two cumulative frequency\", 4,  f.getCumFreq(2));\n+        assertEquals(\"Integer argument cum freq\",4, f.getCumFreq(new Integer(2)));\n         assertEquals(\"five cumulative frequency\", 4,  f.getCumFreq(5));\n         assertEquals(\"foo cumulative frequency\", 0,  f.getCumFreq(\"foo\"));\n         \n         assertEquals(\"foo pct\",0,f.getPct(\"foo\"),tolerance);\n         assertEquals(\"one cum pct\",0.25,f.getCumPct(1),tolerance);\n         assertEquals(\"two cum pct\",0.50,f.getCumPct(new Long(2)),tolerance);\n+        assertEquals(\"Integer argument\",0.50,f.getCumPct(new Integer(2)),tolerance);\n         assertEquals(\"three cum pct\",1.0,f.getCumPct(threeL),tolerance);\n         assertEquals(\"five cum pct\",1.0,f.getCumPct(5),tolerance);\n         assertEquals(\"zero cum pct\",0.0,f.getCumPct(0),tolerance);", "timestamp": 1095634047, "metainfo": ""}