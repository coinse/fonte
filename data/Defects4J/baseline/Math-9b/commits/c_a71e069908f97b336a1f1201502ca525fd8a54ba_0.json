{"sha": "a71e069908f97b336a1f1201502ca525fd8a54ba", "log": "PR: http://www.mail-archive.com/commons-dev@jakarta.apache.org/msg29959.html   Submitted by:\tMatt Cliff   Reviewed by:\tMark Diggory   ", "commit": "\n--- a/src/java/org/apache/commons/math/analysis/CubicSplineFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/CubicSplineFunction.java\n  * polynominal coefficents are used.\n  * Arguments outside of the domain cause an IllegalArgumentException.\n  * \n- * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:17 $\n+ * @version $Revision: 1.8 $ $Date: 2003/11/15 18:44:52 $\n  */\n public class CubicSplineFunction implements UnivariateRealFunction {\n     /** Spline segment interval delimiters. Size is N+1 for N segments. */\n      * @param x the point for which the first derivative should be computed\n      * @return the value\n      * @throws MathException if the derivative couldn't be computed.\n-     * @see UnivariateRealFunction#firstDerivative(double)\n      */\n     public double firstDerivative(double x) throws MathException {\n         if (x < xval[0] || x > xval[xval.length - 1]) {\n      * @param x the point for which the first derivative should be computed\n      * @return the value\n      * @throws MathException if the second derivative couldn't be computed.\n-     * @see UnivariateRealFunction#secondDerivative(double)\n      */\n     public double secondDerivative(double x) throws MathException {\n         if (x < xval[0] || x > xval[xval.length - 1]) {\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/PolynomialFunction.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+\n+\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ * Represents a Polynomial function.\n+ * Spline functions map a certain interval of real numbers to real numbers.\n+ * A cubic spline consists of segments of cubic functions. For this class,\n+ * polynominal coefficents are used.\n+ * Arguments outside of the domain cause an IllegalArgumentException.\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2003/11/15 18:44:52 $\n+ */\n+public class PolynomialFunction implements UnivariateRealFunction {\n+\n+    /**\n+     * The polynominal coefficients.\n+     * The index represents the coefficients of the polynomail, with\n+     * index 0 being the absolute coefficient and index N the coefficient\n+     * for the Nth power.\n+     */\n+    private double c[];\n+\n+    /**\n+     * Construct a function with the given segment delimiters and polynomial\n+     * coefficients.\n+     * @param c polynominal coefficients\n+     */\n+    public PolynomialFunction(double c[]) {\n+        super();\n+        // TODO: should copy the arguments here, for safety. This could be a major overhead.\n+        this.c = c;\n+    }\n+\n+    /**\n+     * Compute the value for the function.\n+     *\n+     * <p>This can be explicitly determined by \n+     *   <tt>c_n * x^n + ... + c_1 * x  + c_0</tt>\n+     * </p>\n+     *\n+     * @param x the point for which the function value should be computed\n+     * @return the value\n+     * @throws MathException if the function couldn't be computed due to\n+     *  missing additional data or other environmental problems.\n+     * @see UnivariateRealFunction#value(double)\n+     */\n+    public double value(double x) throws MathException {\n+\n+        double value = c[0];\n+\n+        for (int i=1; i < c.length; i++ ) {\n+            value += c[i] * Math.pow( x, (int)i);\n+        }\n+\n+        return value;\n+    }\n+\n+\n+\n+    /**\n+     * Compute the value for the first derivative of the function.\n+     *\n+     * <p>This can be explicitly determined by \n+     *   <tt>n * c_n * x^(n-1) + ... + 2 * c_2 * x  + c_1</tt>\n+     * </p>\n+     *\n+     * @param x the point for which the first derivative should be computed\n+     * @return the value\n+     * @throws MathException if the derivative couldn't be computed.\n+     */\n+    public double firstDerivative(double x) throws MathException {\n+\n+        double value = c[1];\n+\n+        if ( c.length > 1 ) {\n+            for (int i=2; i < c.length; i++ ) {\n+                value += i * c[i] * Math.pow( x, (int)i-1);\n+            }\n+        }\n+\n+        return value;\n+    }\n+\n+    /**\n+     * Compute the value for the second derivative of the function.\n+     * \n+     * <p>This can be explicitly determined by \n+     *   <tt>n * (n-1) * c_n * x^(n-2) + ... + 3 * 2 * c_3 * x  + 2 * c_2</tt>\n+     * </p>\n+     * \n+     * @param x the point for which the first derivative should be computed\n+     * @return the value\n+     * @throws MathException if the second derivative couldn't be computed.\n+     */\n+    public double secondDerivative(double x) throws MathException {\n+\n+        double value = 2.0 * c[2];\n+\n+        if ( c.length > 2 ) {\n+            for (int i=3; i < c.length; i++ ) {\n+                value += i * (i-1) * c[i] * Math.pow( x, (int)i-2);\n+            }\n+        }\n+\n+        return value;\n+    }\n+\n+\n+    /** \n+     * local power function using integer powers.\n+     * <p>The Math.pow() function always returns absolute value,\n+     *   and is a bit 'heavier' since it can handle double values\n+     *   for the exponential value.</p>\n+     * @param x any double value\n+     * @param n must be 0 or greater \n+     * @return x^n (or 0 if n < 0 ).\n+     * @throws MathException if n < 0.\n+     */\n+//     private double pow( double x, int n ) throws MathException {\n+//         double value = x;\n+//         if ( n < 0 ) {\n+//             throw new MathException( \"power n must be 0 or greater\" );\n+//         } else if ( n == 0 ) {\n+//             // x^0 = 1 always.\n+//             value = 1.0;\n+//         } else {\n+//             // only multiply for powers > 1.\n+//             for (int i=1; i < n; i++) {\n+//                 value *= x;\n+//             }\n+//         }\n+\n+//         System.out.println(\"pow:\"+x+\"^\"+n+\"=\"+value);\n+//         return value;\n+//     }\n+\n+}\n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java\n  * that derivatives are evaluated after the value, the evaluation algorithm\n  * should throw an InvalidStateException if it can't cope with this.\n  *  \n- * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $\n+ * @version $Revision: 1.9 $ $Date: 2003/11/15 18:44:52 $\n  */\n public interface UnivariateRealFunction {\n     /**\n      */\n     public double value(double x) throws MathException;\n \n-    /**\n-     * Compute the value for the first derivative of the function.\n-     * It is recommended to provide this method only if the first derivative is\n-     * analytical. Numerical derivatives may be acceptable in some cases.\n-     * An implementation should throw an UnsupportedOperationException if\n-     * this method is not implemented.\n-     * @param x the point for which the first derivative should be computed\n-     * @return the value\n-     * @throws MathException if the derivative couldn't be computed.\n-     */\n-    public double firstDerivative(double x) throws MathException;\n-\n-    /**\n-     * Compute the value for the second derivative of the function.\n-     * It is recommended to provide this method only if the second derivative is\n-     * analytical. Numerical derivatives may be acceptable in some cases.\n-     * An implementation should throw an UnsupportedOperationException if\n-     * this method is not implemented.\n-     * @param x the point for which the first derivative should be computed\n-     * @return the value\n-     * @throws MathException if the second derivative couldn't be computed.\n-     */\n-    public double secondDerivative(double x) throws MathException;\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+// commons-math\n+import org.apache.commons.math.MathException;\n+\n+// junit\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests the PolynomialFunction implementation of a UnivariateRealFunction.\n+ *\n+ * @version $Revision: 1.1 $\n+ * @author Matt Cliff <matt@mattcliff.com>\n+ */\n+public final class PolynomialFunctionTest extends TestCase {\n+\n+    // all values are known precisely accept 15 digit precision error \n+    final double error = 1.0e-15;\n+\n+    /**\n+     * tests the value of a constant polynomial.\n+     *\n+     * <p>value of this is 2.5 everywhere.</p>\n+     */\n+    public void testConstants() throws MathException {\n+        double[] c = { 2.5 };\n+        UnivariateRealFunction f = new PolynomialFunction( c );\n+\n+        // verify that we are equal to c[0] at several (nonsymmetric) places\n+        assertEquals( f.value( 0.0), c[0], error );\n+        assertEquals( f.value( -1.0), c[0], error );\n+        assertEquals( f.value( -123.5), c[0], error );\n+        assertEquals( f.value( 3.0), c[0], error );\n+        assertEquals( f.value( 456.89), c[0], error );\n+    }\n+\n+\n+\n+    /**\n+     * tests the value of a linear polynomial.\n+     *\n+     * <p>This will test the function f(x) = 3*x - 1.5</p>\n+     * <p>This will have the values \n+     *  <tt>f(0.0) = -1.5, f(-1.0) = -4.5, f(-2.5) = -9.0,\n+     *      f(0.5) = 0.0, f(1.5) = 3.0</tt> and <tt>f(3.0) = 7.5</tt>\n+     * </p>\n+     */\n+    public void testLinear() throws MathException {\n+        double[] c = { -1.5, 3.0 };\n+        UnivariateRealFunction f = new PolynomialFunction( c );\n+\n+        // verify that we are equal to c[0] when x=0\n+        assertEquals( f.value( 0.0), c[0], error );\n+\n+        // now check a few other places\n+        assertEquals( -4.5, f.value( -1.0), error );\n+        assertEquals( -9.0, f.value( -2.5), error );\n+        assertEquals( 0.0, f.value( 0.5), error );\n+        assertEquals( 3.0, f.value( 1.5), error );\n+        assertEquals( 7.5, f.value( 3.0), error );\n+    \n+    }\n+\n+\n+    /**\n+     * Tests a second order polynomial.\n+     * <p> This will test the function f(x) = 2x^2 - 3x -2 = (2x+1)(x-2)</p>\n+     *\n+     */\n+    public void testQuadratic() throws MathException {\n+        double[] c = { -2.0, -3.0, 2.0 };\n+        UnivariateRealFunction f = new PolynomialFunction( c );\n+\n+        // verify that we are equal to c[0] when x=0\n+        assertEquals( f.value( 0.0), c[0], error );\n+\n+        // now check a few other places\n+        assertEquals( 0.0, f.value( -0.5), error );\n+        assertEquals( 0.0, f.value( 2.0), error );\n+        assertEquals( -2.0, f.value( 1.5), error );\n+        assertEquals( 7.0, f.value( -1.5), error );\n+        assertEquals( 265.5312, f.value( 12.34), error );\n+    \n+    }    \n+\n+\n+    /** \n+     * This will test the quintic function \n+     *   f(x) = x^2(x-5)(x+3)(x-1) = x^5 - 3x^4 -13x^3 + 15x^2</p>\n+     *\n+     */\n+    public void testQuintic() throws MathException {\n+        double[] c = { 0.0, 0.0, 15.0, -13.0, -3.0, 1.0 };\n+        UnivariateRealFunction f = new PolynomialFunction( c );\n+\n+        // verify that we are equal to c[0] when x=0\n+        assertEquals( f.value( 0.0), c[0], error );\n+\n+        // now check a few other places\n+        assertEquals( 0.0, f.value( 5.0), error );\n+        assertEquals( 0.0, f.value( 1.0), error );\n+        assertEquals( 0.0, f.value( -3.0), error );\n+        assertEquals( 54.84375, f.value( -1.5), error );\n+        assertEquals( -8.06637, f.value( 1.3), error );\n+    \n+    }    \n+\n+\n+    /**\n+     * tests the derivative function by comparision\n+     *\n+     * <p>This will test the functions \n+     * <tt>f(x) = x^3 - 2x^2 + 6x + 3, g(x) = 3x^2 - 4x + 6</tt>\n+     * and <tt>h(x) = 6x - 4</tt>\n+     */\n+    public void testDerivativeComparision() throws MathException {\n+        double[] f_coeff = { 3.0, 6.0, -2.0, 1.0 };\n+        double[] g_coeff = { 6.0, -4.0, 3.0 };\n+        double[] h_coeff = { -4.0, 6.0 };\n+\n+        PolynomialFunction f = new PolynomialFunction( f_coeff );\n+        PolynomialFunction g = new PolynomialFunction( g_coeff );\n+        PolynomialFunction h = new PolynomialFunction( h_coeff );\n+\n+        // compare f' = g\n+        assertEquals( f.firstDerivative(0.0), g.value(0.0), error );\n+        assertEquals( f.firstDerivative(1.0), g.value(1.0), error );\n+        assertEquals( f.firstDerivative(100.0), g.value(100.0), error );\n+        assertEquals( f.firstDerivative(4.1), g.value(4.1), error );\n+        assertEquals( f.firstDerivative(-3.25), g.value(-3.25), error );\n+\n+        // compare g' = h\n+\n+\n+        // compare f'' = h\n+    }\n+\n+\n+\n+\n+\n+}\n--- a/src/test/org/apache/commons/math/analysis/QuinticFunction.java\n+++ b/src/test/org/apache/commons/math/analysis/QuinticFunction.java\n /**\n  * Auxillary class for testing solvers.\n  *\n- * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $ \n+ * @version $Revision: 1.9 $ $Date: 2003/11/15 18:44:52 $ \n  */\n public class QuinticFunction implements UnivariateRealFunction {\n \n     }\n \n     /* First derivative of quintic.\n-     * @see org.apache.commons.math.UnivariateRealFunction#firstDerivative(double)\n      */\n     public double firstDerivative(double x) throws MathException {\n         return (5*x*x-3.75)*x*x+0.25;\n     }\n \n-    /* Second order derivative of quintic.\n-     * Unsupported.\n-     * @see org.apache.commons.math.UnivariateRealFunction#secondDerivative(double)\n-     */\n-    public double secondDerivative(double x) throws MathException {\n-        throw new UnsupportedOperationException();\n-    }\n-\n }\n--- a/src/test/org/apache/commons/math/analysis/SinFunction.java\n+++ b/src/test/org/apache/commons/math/analysis/SinFunction.java\n  * which means linear approximation (Regula Falsi) will converge\n  * quadratically.\n  * \n- * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $\n+ * @version $Revision: 1.9 $ $Date: 2003/11/15 18:44:52 $\n  */\n public class SinFunction implements UnivariateRealFunction {\n \n     }\n \n     /* First derivative of sinus function\n-     * @see org.apache.commons.math.UnivariateRealFunction#firstDerivative(double)\n      */\n     public double firstDerivative(double x) throws MathException {\n         return Math.cos(x);\n     }\n \n-    /* Second derivative of sinus function.\n-     * Unsupported.\n-     * @see org.apache.commons.math.UnivariateRealFunction#secondDerivative(double)\n-     */\n-    public double secondDerivative(double x) throws MathException {\n-        throw new UnsupportedOperationException();\n-    }\n-\n }", "timestamp": 1068921892, "metainfo": ""}