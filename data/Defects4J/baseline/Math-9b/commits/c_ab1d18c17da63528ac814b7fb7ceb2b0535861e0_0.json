{"sha": "ab1d18c17da63528ac814b7fb7ceb2b0535861e0", "log": "Javadoc fixes.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/FunctionUtils.java\n+++ b/src/main/java/org/apache/commons/math/analysis/FunctionUtils.java\n     private FunctionUtils() {}\n \n     /**\n-     * Compose functions.\n+     * Compose functions.  The functions in the argument list are composed\n+     * sequentially, in the order given.  For example, compose(f1,f2,f3)\n+     * acts like f1(f2(f3(x))).\n      *\n      * @param f List of functions.\n-     * @return the composed function.\n+     * @return the composite function.\n      */\n     public static UnivariateRealFunction compose(final UnivariateRealFunction ... f) {\n         return new UnivariateRealFunction() {\n      * Add functions.\n      *\n      * @param f List of functions.\n-     * @return a function that computes the addition of the functions.\n+     * @return a function that computes the sum of the functions.\n      */\n     public static UnivariateRealFunction add(final UnivariateRealFunction ... f) {\n         return new UnivariateRealFunction() {\n      * Multiply functions.\n      *\n      * @param f List of functions.\n-     * @return a function that computes the multiplication of the functions.\n+     * @return a function that computes the product of the functions.\n      */\n     public static UnivariateRealFunction multiply(final UnivariateRealFunction ... f) {\n         return new UnivariateRealFunction() {\n     }\n \n     /**\n-     * Combine functions.\n+     * Returns the univariate function <br/>\n+     * {@code h(x) = combiner(f(x), g(x))}.\n      *\n      * @param combiner Combiner function.\n      * @param f Function.\n      * @param g Function.\n-     * @return the composed function.\n+     * @return the composite function.\n      */\n     public static UnivariateRealFunction combine(final BivariateRealFunction combiner,\n                                                  final UnivariateRealFunction f,\n     }\n \n     /**\n-     * Generate a collector function.\n+     * Returns a MultivariateRealFunction h(x[]) defined by <pre> <code>\n+     * h(x[]) = combiner(...combiner(combiner(initialValue,f(x[0])),f(x[1]))...),f(x[x.length-1]))\n+     * </code></pre>\n      *\n      * @param combiner Combiner function.\n      * @param f Function.\n     }\n \n     /**\n-     * Generate a collector function.\n+     * Returns a MultivariateRealFunction h(x[]) defined by <pre> <code>\n+     * h(x[]) = combiner(...combiner(combiner(initialValue,x[0]),x[1])...),x[x.length-1])\n+     * </code></pre>\n      *\n      * @param combiner Combiner function.\n      * @param initialValue Initial value.\n      *\n      * @param f Binary function.\n      * @param fixed Value to which the first argument of {@code f} is set.\n-     * @return a unary function.\n+     * @return the unary function h(x) = f(fixed, x)\n      */\n     public static UnivariateRealFunction fix1stArgument(final BivariateRealFunction f,\n                                                         final double fixed) {\n      *\n      * @param f Binary function.\n      * @param fixed Value to which the second argument of {@code f} is set.\n-     * @return a unary function.\n+     * @return the unary function h(x) = f(x, fixed)\n      */\n     public static UnivariateRealFunction fix2ndArgument(final BivariateRealFunction f,\n                                                         final double fixed) {\n--- a/src/main/java/org/apache/commons/math/analysis/ParametricUnivariateRealFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/ParametricUnivariateRealFunction.java\n  * An interface representing a real function that depends on one independent\n  * variable plus some extra parameters.\n  *\n+ * @since 3.0\n  * @version $Id$\n  */\n public interface ParametricUnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Cbrt.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Cbrt.java\n import org.apache.commons.math.util.FastMath;\n \n /**\n- * Cubic-root function.\n+ * Cube root function.\n  *\n  * @version $Id$\n  * @since 3.0\n--- a/src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java\n public class HarmonicOscillator implements DifferentiableUnivariateRealFunction {\n     /** Amplitude. */\n     private final double amplitude;\n-    /** Angular requency. */\n+    /** Angular frequency. */\n     private final double omega;\n     /** Phase. */\n     private final double phase;\n--- a/src/main/java/org/apache/commons/math/analysis/function/Sinc.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Sinc.java\n import org.apache.commons.math.util.FastMath;\n \n /**\n- * Sinc function.\n+ * Sinc function, defined by <pre><code>\n+ *\n+ * sinc(x) = 1 if abs(x) < 1e-9;\n+ *           sin(x) / x; otherwise\n+ * </code></pre>\n  *\n  * @version $Id$\n  * @since 3.0\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java\n \n /**\n  * Implements the <a href=\"\n- * \"http://mathworld.wolfram.com/NewtonsDividedDifferenceInterpolationFormula.html\">\n+ * http://mathworld.wolfram.com/NewtonsDividedDifferenceInterpolationFormula.html\">\n  * Divided Difference Algorithm</a> for interpolation of real univariate\n  * functions. For reference, see <b>Introduction to Numerical Analysis</b>,\n  * ISBN 038795452X, chapter 2.\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java\n  * Scatterplots</a>\n  * <p/>\n  * This class implements both the loess method and serves as an interpolation\n- * adapter to it, allowing to build a spline on the obtained loess fit.\n+ * adapter to it, allowing one to build a spline on the obtained loess fit.\n  *\n  * @version $Id$\n  * @since 2.0\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolator.java\n  * reference, see <b>Introduction to Numerical Analysis</b>, ISBN 038795452X,\n  * chapter 2.\n  * <p>\n- * The actual code of Neville's evalution is in PolynomialFunctionLagrangeForm,\n+ * The actual code of Neville's algorithm is in PolynomialFunctionLagrangeForm,\n  * this class provides an easy-to-use interface to it.</p>\n  *\n  * @version $Id$\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/UnivariateRealPeriodicInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/UnivariateRealPeriodicInterpolator.java\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n \n /**\n- * Adapter for class implementing the {@link UnivariateRealInterpolator}\n+ * Adapter for classes implementing the {@link UnivariateRealInterpolator}\n  * interface.\n  * The data to be interpolated is assumed to be periodic. Thus values that are\n  * outside of the range can be passed to the interpolation function: They will\n--- a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java\n \n     /**\n      * Dedicated parametric polynomial class.\n+     *\n+     * @since 3.0\n      */\n     public static class Parametric implements ParametricUnivariateRealFunction {\n         /** {@inheritDoc} */\n--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n      * @return\n      */\n     private double bobyqb(\n-            ArrayRealVector xbase, \n+            ArrayRealVector xbase,\n             Array2DRowRealMatrix xpt,\n             ArrayRealVector fval,\n             ArrayRealVector xopt,\n             }\n \n             f = computeObjectiveValue(currentBest.toArray());\n-            \n+\n             if (!isMinimize)\n                 f = -f;\n             if (ntrits == -1) {\n                     currentBest.setEntry(j, upperBound[j]);\n                 }\n             }\n-            \n+\n             final double objectiveValue = computeObjectiveValue(currentBest.toArray());\n             final double f = isMinimize ? objectiveValue : -objectiveValue;\n             final int numEval = getEvaluations(); // nfm + 1\n         double ds;\n         int iu;\n         double dhd, dhs, cth, shs, sth, ssq, beta=0, sdec, blen;\n-        int iact = -1; \n+        int iact = -1;\n         int nact = 0;\n         double angt = 0, qred;\n         int isav;\n                 if (pq.getEntry(k) != ZERO) {\n                     for (int i = 0; i < n; i++) {\n                         hs.setEntry(i, hs.getEntry(i) + tmp.getEntry(k) * xpt.getEntry(k, i));\n-                    } \n+                    }\n                 }\n             }\n             if (crvmin != ZERO) {\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java\n      * if the number of allowed evaluations is exceeded.\n      * @throws org.apache.commons.math.exception.DimensionMismatchException\n      * if the start point dimension is wrong.\n+     * @since 3.0\n      */\n     public double[] fit(int maxEval, final ParametricUnivariateRealFunction f,\n                         final double[] initialGuess) {\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n      * </ul>\n      * @return the parameters of the Gaussian function that best fits the\n      * observed points (in the same order as above).\n+     * @since 3.0\n      */\n     public double[] fit(double[] initialGuess) {\n         final ParametricUnivariateRealFunction f = new ParametricUnivariateRealFunction() {", "timestamp": 1317957639, "metainfo": ""}