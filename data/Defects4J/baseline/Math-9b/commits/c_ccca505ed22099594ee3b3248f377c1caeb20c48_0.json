{"sha": "ccca505ed22099594ee3b3248f377c1caeb20c48", "log": "Changed inverseCumulativeProbability to correctly handle p=0,1 as discussed on commons-dev.   ", "commit": "\n--- a/src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n /**\n  * The default implementation of {@link ChiSquaredDistribution}\n  *\n- * @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:15 $\n+ * @version $Revision: 1.19 $ $Date: 2004/07/24 20:43:29 $\n  */\n public class ChiSquaredDistributionImpl\n     extends AbstractContinuousDistribution\n      */\n     public double cumulativeProbability(double x) throws MathException {\n         return getGamma().cumulativeProbability(x);\n+    }\n+    \n+    /**\n+     * For this distribution, X, this method returns the critical point x, such\n+     * that P(X &lt; x) = <code>p</code>.\n+     * <p>\n+     * Returns 0 for p=0 and <code>Double.POSITIVE_INFINITY</code> for p=1.\n+     *\n+     * @param p the desired probability\n+     * @return x, such that P(X &lt; x) = <code>p</code>\n+     * @throws MathException if the inverse cumulative probability can not be\n+     *         computed due to convergence or other numerical errors.\n+     * @throws IllegalArgumentException if <code>p</code> is not a valid\n+     *         probability.\n+     */\n+    public double inverseCumulativeProbability(final double p)\n+        throws MathException {\n+        if (p == 0) {\n+            return 0d;\n+        }\n+        if (p == 1) {\n+            return Double.POSITIVE_INFINITY;\n+        }\n+        return super.inverseCumulativeProbability(p);\n     }\n         \n     /**\n--- a/src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java\n  * Extends ContinuousDistributionAbstractTest.  See class javadoc for\n  * ContinuousDistributionAbstractTest for details.\n  * \n- * @version $Revision: 1.15 $ $Date: 2004/05/29 22:52:44 $\n+ * @version $Revision: 1.16 $ $Date: 2004/07/24 20:43:29 $\n  */\n public class ChiSquareDistributionTest extends ContinuousDistributionAbstractTest {\n     \n     public double[] makeCumulativeTestValues() {\n         return new double[] {0.001d, 0.01d, 0.025d, 0.05d, 0.1d, 0.999d,\n                 0.990d, 0.975d, 0.950d, 0.900d}; \n-        }\n+    }\n+    \n+    /** Creates the default inverse cumulative probability test input values */\n+    public double[] makeInverseCumulativeTestPoints() {\n+        return new double[] {0, 0.001d, 0.01d, 0.025d, 0.05d, 0.1d, 0.999d,\n+                0.990d, 0.975d, 0.950d, 0.900d, 1};     \n+    }\n+    \n+    /** Creates the default inverse cumulative probability density test expected values */\n+    public double[] makeInverseCumulativeTestValues() {\n+        return new double[] {0, 0.210216d, 0.5542981d, 0.8312116d, 1.145476d, 1.610308d, \n+                20.51501d, 15.08627d, 12.83250d, 11.07050d, 9.236357d, \n+                Double.POSITIVE_INFINITY};\n+    }\n     \n  // --------------------- Override tolerance  --------------\n     protected void setup() throws Exception {\n                 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, \n                 0.5318646, 0.1526342});\n         setInverseCumulativeTestValues(getCumulativeTestPoints());\n+        setInverseCumulativeTestPoints(getCumulativeTestValues());\n         verifyCumulativeProbabilities();\n         verifyInverseCumulativeProbabilities();\n     }", "timestamp": 1090701809, "metainfo": ""}