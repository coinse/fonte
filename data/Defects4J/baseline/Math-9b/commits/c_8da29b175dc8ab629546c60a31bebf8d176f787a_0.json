{"sha": "8da29b175dc8ab629546c60a31bebf8d176f787a", "log": "Removed double[][] solve(double[][]) from EigenDecompositionImpl.Solver  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n             return new ArrayRealVector(bp, false);\n         }\n \n-        /** Solve the linear equation A &times; X = B for matrices A.\n-         * <p>The A matrix is implicit, it is provided by the underlying\n-         * decomposition algorithm.</p>\n-         * @param b right-hand side of the equation A &times; X = B\n-         * @param reuseB if true, the b array will be reused and returned,\n-         * instead of being copied\n-         * @return a matrix X that minimizes the two norm of A &times; X - B\n-         * @throws org.apache.commons.math.exception.DimensionMismatchException\n-         * if the matrices dimensions do not match.\n-         * @throws SingularMatrixException\n-         * if the decomposed matrix is singular.\n-         */\n-        private double[][] solve(double[][] b, boolean reuseB) {\n+        /** {@inheritDoc} */\n+        public RealMatrix solve(RealMatrix b) {\n \n             if (!isNonSingular()) {\n                 throw new SingularMatrixException();\n             }\n \n             final int m = realEigenvalues.length;\n-            if (b.length != m) {\n-                throw new DimensionMismatchException(b.length, m);\n-            }\n-\n-            final int nColB = b[0].length;\n-            final double[][] bp;\n-            if (reuseB) {\n-                bp = b;\n-            } else {\n-                bp = new double[m][nColB];\n-            }\n+            if (b.getRowDimension() != m) {\n+                throw new DimensionMismatchException(b.getRowDimension(), m);\n+            }\n+\n+            final int nColB = b.getColumnDimension();\n+            final double[][] bp = new double[m][nColB];\n             final double[] tmpCol = new double[m];\n             for (int k = 0; k < nColB; ++k) {\n                 for (int i = 0; i < m; ++i) {\n-                    tmpCol[i] = b[i][k];\n+                    tmpCol[i] = b.getEntry(i, k);\n                     bp[i][k]  = 0;\n                 }\n                 for (int i = 0; i < m; ++i) {\n                 }\n             }\n \n-            return bp;\n-\n-        }\n-\n-        /** {@inheritDoc} */\n-        public double[][] solve(double[][] b) {\n-            return solve(b, false);\n-        }\n-\n-        /** {@inheritDoc} */\n-        public RealMatrix solve(RealMatrix b) {\n-            return new Array2DRowRealMatrix(solve(b.getData(), true), false);\n+            return new Array2DRowRealMatrix(bp, false);\n+\n         }\n \n         /**", "timestamp": 1315534342, "metainfo": ""}