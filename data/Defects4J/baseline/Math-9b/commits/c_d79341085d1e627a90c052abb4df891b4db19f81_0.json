{"sha": "d79341085d1e627a90c052abb4df891b4db19f81", "log": "MATH-795: factored out unit tests of getDistance and getNorm.   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n         doTestEbeBinaryOperationDimensionMismatch(BinaryOperation.DIV);\n     }\n \n+    private void doTestGetDistance(final boolean mixed) {\n+        final double x = getPreferredEntryValue();\n+        final double[] data1 = new double[] { x, x, 1d, x, 2d, x, x, 3d, x };\n+        final double[] data2 = new double[] { 4d, x, x, 5d, 6d, 7d, x, x, 8d };\n+        final RealVector v1 = create(data1);\n+        final RealVector v2;\n+        if (mixed) {\n+            v2 = createAlien(data2);\n+        } else {\n+            v2 = create(data2);\n+        }\n+        final double actual = v1.getDistance(v2);\n+        double expected = 0d;\n+        for (int i = 0; i < data1.length; i++) {\n+            final double delta = data2[i] - data1[i];\n+            expected += delta * delta;\n+        }\n+        expected = FastMath.sqrt(expected);\n+        Assert.assertEquals(\"\", expected, actual, 0d);\n+    }\n+\n+    @Test\n+    public void testGetDistanceSameType() {\n+        doTestGetDistance(false);\n+    }\n+\n+    @Test\n+    public void testGetDistanceMixedTypes() {\n+        doTestGetDistance(true);\n+    }\n+\n+    @Test\n+    public void testGetNorm() {\n+        final double x = getPreferredEntryValue();\n+        final double[] data = new double[] { x, x, 1d, x, 2d, x, x, 3d, x };\n+        final RealVector v = create(data);\n+        final double actual = v.getNorm();\n+        double expected = 0d;\n+        for (int i = 0; i < data.length; i++) {\n+            expected += data[i] * data[i];\n+        }\n+        expected = FastMath.sqrt(expected);\n+        Assert.assertEquals(\"\", expected, actual, 0d);\n+    }\n+\n     @Test\n     public void testDataInOut() {\n         final RealVector v1 = create(vec1);\n         double d_getLInfNorm = v5.getLInfNorm();\n         Assert.assertEquals(\"compare values  \", 6.0, d_getLInfNorm,\n                             normTolerance);\n-\n-        // octave = sqrt(sumsq(v1-v2))\n-        double dist = v1.getDistance(v2);\n-        Assert.assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),\n-                            dist, normTolerance);\n-\n-        // octave = sqrt(sumsq(v1-v2))\n-        double dist_2 = v1.getDistance(v2_t);\n-        Assert.assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),\n-                            dist_2, normTolerance);\n \n         // octave = ???\n         double d_getL1Distance = v1.getL1Distance(v2);", "timestamp": 1340602929, "metainfo": ""}