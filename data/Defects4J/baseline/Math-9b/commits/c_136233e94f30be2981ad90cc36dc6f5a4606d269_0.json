{"sha": "136233e94f30be2981ad90cc36dc6f5a4606d269", "log": "MATH-894 Introducing new interface for operating on a \"double[]\" (added in the \"MathArrays\" class). Using this interface, operations can be performed on the internal array of a \"ResizeableDoubleArray\" through a new \"compute\" method. Thanks to Phil Steitz.    ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/util/MathArrays.java\n+++ b/src/main/java/org/apache/commons/math3/util/MathArrays.java\n      * Private constructor.\n      */\n     private MathArrays() {}\n+\n+    /**\n+     * Real-valued function that operate on an array or a part of it.\n+     */\n+    public interface Function {\n+        /**\n+         * Operates on an entire array.\n+         *\n+         * @param array Array to operate on.\n+         * @return the result of the operation.\n+         */\n+        double evaluate(double[] array);\n+        /**\n+         * @param array Array to operate on.\n+         * @param startIndex Index of the first element to take into account.\n+         * @param numElements Number of elements to take into account.\n+         * @return the result of the operation.\n+         */\n+        double evaluate(double[] array,\n+                        int startIndex,\n+                        int numElements);\n+    }\n \n     /**\n      * Calculates the L<sub>1</sub> (sum of abs) distance between two points.\n--- a/src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java\n+++ b/src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java\n         }\n     }\n \n+    /**\n+     * Performs an operation on the addressable elements of the array.\n+     *\n+     * @param f Function to be applied on this array.\n+     * @return the result.\n+     */\n+    public double compute(MathArrays.Function f) {\n+        return f.evaluate(internalArray, startIndex, numElements);\n+    }\n \n     /**\n      * Sets the element at the specified index.  If the specified index is greater than\n--- a/src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java\n+++ b/src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java\n         Assert.assertEquals(v2, a.getElement(index), 0d);\n     }\n \n+    @Test\n+    public void testCompute() {\n+        final ResizableDoubleArray a = new ResizableDoubleArray();\n+        final int max = 20;\n+        for (int i = 1; i <= max; i++) {\n+            a.setElement(i, i);\n+        }\n+\n+        final MathArrays.Function add = new MathArrays.Function() {\n+                public double evaluate(double[] a, int index, int num) {\n+                    double sum = 0;\n+                    final int max = index + num;\n+                    for (int i = index; i < max; i++) {\n+                        sum += a[i];\n+                    }\n+                    return sum;\n+                }\n+                public double evaluate(double[] a) {\n+                    return evaluate(a, 0, a.length);\n+                }\n+            };\n+\n+        final double sum = a.compute(add);\n+        Assert.assertEquals(0.5 * max * (max + 1), sum, 0);\n+    }\n+\n     private void verifyEquality(ResizableDoubleArray a, ResizableDoubleArray b) {\n         Assert.assertTrue(b.equals(a));\n         Assert.assertTrue(a.equals(b));", "timestamp": 1353025110, "metainfo": ""}