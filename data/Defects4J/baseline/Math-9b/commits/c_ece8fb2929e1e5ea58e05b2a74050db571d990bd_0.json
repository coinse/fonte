{"sha": "ece8fb2929e1e5ea58e05b2a74050db571d990bd", "log": "Moved array argument validation methods from ChiSquareTest to MathArrays. JIRA: MATH-885.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java\n+++ b/src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java\n import org.apache.commons.math3.exception.ZeroException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n import org.apache.commons.math3.util.FastMath;\n-import org.apache.commons.math3.util.MathUtils;\n+import org.apache.commons.math3.util.MathArrays;\n \n /**\n  * Implements Chi-Square test statistics.\n         if (expected.length != observed.length) {\n             throw new DimensionMismatchException(expected.length, observed.length);\n         }\n-        checkPositive(expected);\n-        checkNonNegative(observed);\n+        MathArrays.checkPositive(expected);\n+        MathArrays.checkNonNegative(observed);\n \n         double sumExpected = 0d;\n         double sumObserved = 0d;\n         ChiSquaredDistribution distribution =\n             new ChiSquaredDistribution(expected.length - 1.0);\n         return 1.0 - distribution.cumulativeProbability(chiSquare(expected, observed));\n-\n     }\n \n     /**\n         }\n \n         // Ensure non-negative counts\n-        checkNonNegative(observed1);\n-        checkNonNegative(observed2);\n+        MathArrays.checkNonNegative(observed1);\n+        MathArrays.checkNonNegative(observed2);\n \n         // Compute and compare count sums\n         long countSum1 = 0;\n             throw new DimensionMismatchException(in[0].length, 2);\n         }\n \n-        checkRectangular(in);\n-        checkNonNegative(in);\n-\n-    }\n-\n-    //---------------------  Private array methods -- should find a utility home for these\n-\n-    /**\n-     * Throws DimensionMismatchException if the input array is not rectangular.\n-     *\n-     * @param in array to be tested\n-     * @throws NullArgumentException if input array is null\n-     * @throws DimensionMismatchException if input array is not rectangular\n-     */\n-    private void checkRectangular(final long[][] in)\n-        throws NullArgumentException, DimensionMismatchException {\n-\n-        MathUtils.checkNotNull(in);\n-        for (int i = 1; i < in.length; i++) {\n-            if (in[i].length != in[0].length) {\n-                throw new DimensionMismatchException(\n-                        LocalizedFormats.DIFFERENT_ROWS_LENGTHS,\n-                        in[i].length, in[0].length);\n-            }\n-        }\n-\n-    }\n-\n-    /**\n-     * Check all entries of the input array are strictly positive.\n-     *\n-     * @param in Array to be tested.\n-     * @throws NotStrictlyPositiveException if one entry is not strictly positive.\n-     */\n-    private void checkPositive(final double[] in)\n-        throws NotStrictlyPositiveException {\n-\n-        for (int i = 0; i < in.length; i++) {\n-            if (in[i] <= 0) {\n-                throw new NotStrictlyPositiveException(in[i]);\n-            }\n-        }\n-\n-    }\n-\n-    /**\n-     * Check all entries of the input array are >= 0.\n-     *\n-     * @param in Array to be tested.\n-     * @throws NotPositiveException if one entry is negative.\n-     */\n-    private void checkNonNegative(final long[] in)\n-        throws NotPositiveException {\n-\n-        for (int i = 0; i < in.length; i++) {\n-            if (in[i] < 0) {\n-                throw new NotPositiveException(in[i]);\n-            }\n-        }\n-\n-    }\n-\n-    /**\n-     * Check all entries of the input array are >= 0.\n-     *\n-     * @param in Array to be tested.\n-     * @throws NotPositiveException if one entry is negative.\n-     */\n-    private void checkNonNegative(final long[][] in)\n-        throws NotPositiveException {\n-\n-        for (int i = 0; i < in.length; i ++) {\n-            for (int j = 0; j < in[i].length; j++) {\n-                if (in[i][j] < 0) {\n-                    throw new NotPositiveException(in[i][j]);\n-                }\n-            }\n-        }\n+        MathArrays.checkRectangular(in);\n+        MathArrays.checkNonNegative(in);\n \n     }\n \n--- a/src/main/java/org/apache/commons/math3/util/MathArrays.java\n+++ b/src/main/java/org/apache/commons/math3/util/MathArrays.java\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.MathInternalError;\n import org.apache.commons.math3.exception.NonMonotonicSequenceException;\n+import org.apache.commons.math3.exception.NotPositiveException;\n+import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n      */\n     public static void checkOrder(double[] val) throws NonMonotonicSequenceException {\n         checkOrder(val, OrderDirection.INCREASING, true);\n+    }\n+\n+    /**\n+     * Throws DimensionMismatchException if the input array is not rectangular.\n+     *\n+     * @param in array to be tested\n+     * @throws NullArgumentException if input array is null\n+     * @throws DimensionMismatchException if input array is not rectangular\n+     */\n+    public static void checkRectangular(final long[][] in)\n+        throws NullArgumentException, DimensionMismatchException {\n+        MathUtils.checkNotNull(in);\n+        for (int i = 1; i < in.length; i++) {\n+            if (in[i].length != in[0].length) {\n+                throw new DimensionMismatchException(\n+                        LocalizedFormats.DIFFERENT_ROWS_LENGTHS,\n+                        in[i].length, in[0].length);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Check that all entries of the input array are strictly positive.\n+     *\n+     * @param in Array to be tested\n+     * @throws NotStrictlyPositiveException if any entries of the array are not\n+     * strictly positive.\n+     */\n+    public static void checkPositive(final double[] in)\n+        throws NotStrictlyPositiveException {\n+        for (int i = 0; i < in.length; i++) {\n+            if (in[i] <= 0) {\n+                throw new NotStrictlyPositiveException(in[i]);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Check that all entries of the input array are >= 0.\n+     *\n+     * @param in Array to be tested\n+     * @throws NotPositiveException if any array entries are less than 0.\n+     */\n+    public static void checkNonNegative(final long[] in)\n+        throws NotPositiveException {\n+        for (int i = 0; i < in.length; i++) {\n+            if (in[i] < 0) {\n+                throw new NotPositiveException(in[i]);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Check all entries of the input array are >= 0.\n+     *\n+     * @param in Array to be tested\n+     * @throws NotPositiveException if any array entries are less than 0.\n+     */\n+    public static void checkNonNegative(final long[][] in)\n+        throws NotPositiveException {\n+        for (int i = 0; i < in.length; i ++) {\n+            for (int j = 0; j < in[i].length; j++) {\n+                if (in[i][j] < 0) {\n+                    throw new NotPositiveException(in[i][j]);\n+                }\n+            }\n+        }\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/math3/util/MathArraysTest.java\n+++ b/src/test/java/org/apache/commons/math3/util/MathArraysTest.java\n import java.util.Arrays;\n import org.apache.commons.math3.exception.NonMonotonicSequenceException;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n+import org.apache.commons.math3.exception.NotPositiveException;\n+import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.exception.MathArithmeticException;\n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n                                                                 new Double(-27.5) },\n                 MathArrays.OrderDirection.DECREASING, false));\n     }\n+    \n+    @Test\n+    public void testCheckRectangular() {\n+        final long[][] rect = new long[][] {{0, 1}, {2, 3}};\n+        final long[][] ragged = new long[][] {{0, 1}, {2}};\n+        final long[][] nullArray = null;\n+        final long[][] empty = new long[][] {};\n+        MathArrays.checkRectangular(rect);\n+        MathArrays.checkRectangular(empty);\n+        try {\n+            MathArrays.checkRectangular(ragged);\n+            Assert.fail(\"Expecting DimensionMismatchException\");\n+        } catch (DimensionMismatchException ex) {\n+            // Expected\n+        }\n+        try {\n+            MathArrays.checkRectangular(nullArray);\n+            Assert.fail(\"Expecting NullArgumentException\");\n+        } catch (NullArgumentException ex) {\n+            // Expected\n+        } \n+    }\n+    \n+    @Test\n+    public void testCheckPositive() {\n+        final double[] positive = new double[] {1, 2, 3};\n+        final double[] nonNegative = new double[] {0, 1, 2};\n+        final double[] nullArray = null;\n+        final double[] empty = new double[] {};\n+        MathArrays.checkPositive(positive);\n+        MathArrays.checkPositive(empty);\n+        try {\n+            MathArrays.checkPositive(nullArray);\n+            Assert.fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+            // Expected\n+        }\n+        try {\n+            MathArrays.checkPositive(nonNegative);\n+            Assert.fail(\"Expecting NotStrictlyPositiveException\");\n+        } catch (NotStrictlyPositiveException ex) {\n+            // Expected\n+        }\n+    }\n+    \n+    @Test\n+    public void testCheckNonNegative() {\n+        final long[] nonNegative = new long[] {0, 1};\n+        final long[] hasNegative = new long[] {-1};\n+        final long[] nullArray = null;\n+        final long[] empty = new long[] {};\n+        MathArrays.checkNonNegative(nonNegative);\n+        MathArrays.checkNonNegative(empty);\n+        try {\n+            MathArrays.checkNonNegative(nullArray);\n+            Assert.fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+            // Expected\n+        }\n+        try {\n+            MathArrays.checkNonNegative(hasNegative);\n+            Assert.fail(\"Expecting NotPositiveException\");\n+        } catch (NotPositiveException ex) {\n+            // Expected\n+        }\n+    }\n+    \n+    @Test\n+    public void testCheckNonNegative2D() {\n+        final long[][] nonNegative = new long[][] {{0, 1}, {1, 0}};\n+        final long[][] hasNegative = new long[][] {{-1}, {0}};\n+        final long[][] nullArray = null;\n+        final long[][] empty = new long[][] {};\n+        MathArrays.checkNonNegative(nonNegative);\n+        MathArrays.checkNonNegative(empty);\n+        try {\n+            MathArrays.checkNonNegative(nullArray);\n+            Assert.fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+            // Expected\n+        }\n+        try {\n+            MathArrays.checkNonNegative(hasNegative);\n+            Assert.fail(\"Expecting NotPositiveException\");\n+        } catch (NotPositiveException ex) {\n+            // Expected\n+        }\n+    }\n \n     @Test\n     public void testSortInPlace() {", "timestamp": 1351483574, "metainfo": ""}