{"sha": "d13d1dceb4c839719d55a0f6b19736a4a30a71fd", "log": "Added R-squared and adjusted R-squared statistics to OLSMultipleLinearRegression JIRA: MATH-386    ", "commit": "\n--- a/src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java\n+++ b/src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java\n import org.apache.commons.math.linear.QRDecompositionImpl;\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.linear.RealVector;\n+import org.apache.commons.math.stat.descriptive.moment.SecondMoment;\n \n /**\n  * <p>Implements ordinary least squares (OLS) to estimate the parameters of a\n     }\n \n     /**\n+     * Returns the sum of squared deviations of Y from its mean.\n+     *\n+     * @return total sum of squares\n+     */\n+    public double calculateTotalSumOfSquares() {\n+        return new SecondMoment().evaluate(Y.getData());\n+    }\n+\n+    /**\n+     * Returns the sum of square residuals.\n+     *\n+     * @return residual sum of squares\n+     */\n+    public double calculateResidualSumOfSquares() {\n+        final RealVector residuals = calculateResiduals();\n+        return residuals.dotProduct(residuals);\n+    }\n+\n+    /**\n+     * Returns the R-Squared statistic, defined by the formula <pre>\n+     * R<sup>2</sup> = 1 - SSR / SSTO\n+     * </pre>\n+     * where SSR is the {@link #calculateResidualSumOfSquares() sum of squared residuals}\n+     * and SSTO is the {@link #calculateTotalSumOfSquares() total sum of squares}\n+     *\n+     * @return R-square statistic\n+     */\n+    public double calculateRSquared() {\n+        return 1 - calculateResidualSumOfSquares() / calculateTotalSumOfSquares();\n+    }\n+\n+    /**\n+     * Returns the adjusted R-squared statistic, defined by the formula <pre>\n+     * R<sup>2</sup><sub>adj</sub> = 1 - [SSR (n - 1)] / [SSTO (n - p)]\n+     * </pre>\n+     * where SSR is the {@link #calculateResidualSumOfSquares() sum of squared residuals},\n+     * SSTO is the {@link #calculateTotalSumOfSquares() total sum of squares}, n is the number\n+     * of observations and p is the number of parameters estimated (including the intercept).\n+     *\n+     * @return adjusted R-Squared statistic\n+     */\n+    public double calculateAdjustedRSquared() {\n+        final double n = X.getRowDimension();\n+        return 1 - (calculateResidualSumOfSquares() * (n - 1)) /\n+            (calculateTotalSumOfSquares() * (n - X.getColumnDimension()));\n+       // return 1 - ((1 - calculateRSquare()) * (n - 1) / (n - X.getColumnDimension() - 1));\n+    }\n+\n+    /**\n      * Loads new x sample data, overriding any previous sample\n      *\n      * @param x the [n,k] array representing the x sample\n--- a/src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java\n        assertEquals(0.0,\n                      errors.subtract(referenceVariance).getNorm(),\n                      5.0e-16 * referenceVariance.getNorm());\n-       \n+       assertEquals(1, ((OLSMultipleLinearRegression) regression).calculateRSquared(), 1E-12);\n     }\n \n \n         \n         // Check regression standard error against R\n         assertEquals(304.8540735619638, model.estimateRegressionStandardError(), 1E-10);\n+        \n+        // Check R-Square statistics against R\n+        assertEquals(0.995479004577296, model.calculateRSquared(), 1E-12);\n+        assertEquals(0.992465007628826, model.calculateAdjustedRSquared(), 1E-12);\n         \n         checkVarianceConsistency(model);\n     }\n         // Check regression standard error against R\n         assertEquals(7.73642194433223, model.estimateRegressionStandardError(), 1E-12);\n         \n+        // Check R-Square statistics against R\n+        assertEquals(0.649789742860228, model.calculateRSquared(), 1E-12);\n+        assertEquals(0.6164363850373927, model.calculateAdjustedRSquared(), 1E-12);\n+        \n         checkVarianceConsistency(model);\n     }\n ", "timestamp": 1282532101, "metainfo": ""}