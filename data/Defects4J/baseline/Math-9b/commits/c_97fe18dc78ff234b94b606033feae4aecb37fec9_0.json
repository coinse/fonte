{"sha": "97fe18dc78ff234b94b606033feae4aecb37fec9", "log": "Unnecessary to cast byte into byte  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/dfp/DfpTest.java\n+++ b/src/test/java/org/apache/commons/math/dfp/DfpTest.java\n         Assert.assertEquals(\"toString #1\", \"Infinity\", pinf.toString());\n         Assert.assertEquals(\"toString #2\", \"-Infinity\", ninf.toString());\n         Assert.assertEquals(\"toString #3\", \"NaN\", nan.toString());\n-        Assert.assertEquals(\"toString #4\", \"NaN\", field.newDfp((byte) 1, (byte) Dfp.QNAN).toString());\n-        Assert.assertEquals(\"toString #5\", \"NaN\", field.newDfp((byte) 1, (byte) Dfp.SNAN).toString());\n+        Assert.assertEquals(\"toString #4\", \"NaN\", field.newDfp((byte) 1, Dfp.QNAN).toString());\n+        Assert.assertEquals(\"toString #5\", \"NaN\", field.newDfp((byte) 1, Dfp.SNAN).toString());\n         Assert.assertEquals(\"toString #6\", \"1.2300000000000000e100\", field.newDfp(\"1.23e100\").toString());\n         Assert.assertEquals(\"toString #7\", \"-1.2300000000000000e100\", field.newDfp(\"-1.23e100\").toString());\n         Assert.assertEquals(\"toString #8\", \"12345678.1234\", field.newDfp(\"12345678.1234\").toString());\n              pinf,\n              0, \"Sqrt #8\");\n \n-        test(field.newDfp((byte) 1, (byte) Dfp.QNAN).sqrt(),\n+        test(field.newDfp((byte) 1, Dfp.QNAN).sqrt(),\n              nan,\n              0, \"Sqrt #9\");\n \n-        test(field.newDfp((byte) 1, (byte) Dfp.SNAN).sqrt(),\n+        test(field.newDfp((byte) 1, Dfp.SNAN).sqrt(),\n              nan,\n              DfpField.FLAG_INVALID, \"Sqrt #9\");\n     }", "timestamp": 1285897573, "metainfo": ""}