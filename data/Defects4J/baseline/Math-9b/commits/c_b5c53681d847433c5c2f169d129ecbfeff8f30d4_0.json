{"sha": "b5c53681d847433c5c2f169d129ecbfeff8f30d4", "log": "Removed unchecked exceptions from method signatures. See   - Commons-Dev mailing list http://mail-archives.apache.org/mod_mbox/commons-dev/201201.mbox/%3C20120113105913.GM6537%40dusk.harfang.homelinux.org%3E   - \"Effective Java, second edition\", item 62.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/random/RandomData.java\n+++ b/src/main/java/org/apache/commons/math/random/RandomData.java\n package org.apache.commons.math.random;\n import java.util.Collection;\n \n-import org.apache.commons.math.exception.NotStrictlyPositiveException;\n-import org.apache.commons.math.exception.NumberIsTooLargeException;\n-\n /**\n  * Random data generation utilities.\n  * @version $Id$\n      *\n      * @param len the length of the string to be generated\n      * @return a random string of hex characters of length {@code len}\n-     * @throws NotStrictlyPositiveException if {@code len <= 0}\n-     */\n-    String nextHexString(int len) throws NotStrictlyPositiveException;\n+     * @throws org.apache.commons.math.exception.NotStrictlyPositiveException\n+     * if {@code len <= 0}\n+     */\n+    String nextHexString(int len);\n \n     /**\n      * Generates a uniformly distributed random integer between {@code lower}\n      * @param upper upper bound for generated integer\n      * @return a random integer greater than or equal to {@code lower}\n      * and less than or equal to {@code upper}\n-     * @throws NumberIsTooLargeException if {@code lower >= upper}\n-     */\n-    int nextInt(int lower, int upper) throws NumberIsTooLargeException;\n+     * @throws org.apache.commons.math.exception.NumberIsTooLargeException\n+     * if {@code lower >= upper}\n+     */\n+    int nextInt(int lower, int upper);\n \n     /**\n      * Generates a uniformly distributed random long integer between\n      * @param upper upper bound for generated long integer\n      * @return a random long integer greater than or equal to {@code lower} and\n      * less than or equal to {@code upper}\n-     * @throws NumberIsTooLargeException if {@code lower >= upper}.\n-     */\n-    long nextLong(long lower, long upper) throws NumberIsTooLargeException;\n+     * @throws org.apache.commons.math.exception.NumberIsTooLargeException\n+     * if {@code lower >= upper}.\n+     */\n+    long nextLong(long lower, long upper);\n \n     /**\n      * Generates a random string of hex characters from a secure random\n      *\n      * @param len the length of the string to be generated\n      * @return a random string of hex characters of length {@code len}\n-     * @throws NotStrictlyPositiveException if {@code len <= 0}\n-     */\n-    String nextSecureHexString(int len) throws NotStrictlyPositiveException;\n+     * @throws org.apache.commons.math.exception.NotStrictlyPositiveException\n+     * if {@code len <= 0}\n+     */\n+    String nextSecureHexString(int len);\n \n     /**\n      * Generates a uniformly distributed random integer between {@code lower}\n      * @param upper upper bound for generated integer\n      * @return a random integer greater than or equal to {@code lower} and less\n      * than or equal to {@code upper}.\n-     * @throws NumberIsTooLargeException if {@code lower >= upper}.\n-     */\n-    int nextSecureInt(int lower, int upper) throws NumberIsTooLargeException;\n+     * @throws org.apache.commons.math.exception.NumberIsTooLargeException\n+     * if {@code lower >= upper}.\n+     */\n+    int nextSecureInt(int lower, int upper);\n \n     /**\n      * Generates a uniformly distributed random long integer between\n      * @param upper upper bound for generated integer\n      * @return a random long integer greater than or equal to {@code lower} and\n      * less than or equal to {@code upper}.\n-     * @throws NumberIsTooLargeException if {@code lower >= upper}.\n-     */\n-    long nextSecureLong(long lower, long upper)\n-            throws NumberIsTooLargeException;\n+     * @throws org.apache.commons.math.exception.NumberIsTooLargeException\n+     * if {@code lower >= upper}.\n+     */\n+    long nextSecureLong(long lower, long upper);\n \n     /**\n      * Generates a random value from the Poisson distribution with the given\n      *\n      * @param mean the mean of the Poisson distribution\n      * @return a random value following the specified Poisson distribution\n-     * @throws NotStrictlyPositiveException if {@code mean <= 0}.\n-     */\n-    long nextPoisson(double mean) throws NotStrictlyPositiveException;\n+     * @throws org.apache.commons.math.exception.NotStrictlyPositiveException\n+     * if {@code mean <= 0}.\n+     */\n+    long nextPoisson(double mean);\n \n     /**\n      * Generates a random value from the Normal (or Gaussian) distribution with\n      * @param mu the mean of the distribution\n      * @param sigma the standard deviation of the distribution\n      * @return a random value following the specified Gaussian distribution\n-     * @throws NotStrictlyPositiveException if {@code sigma <= 0}.\n-     */\n-    double nextGaussian(double mu, double sigma)\n-            throws NotStrictlyPositiveException;\n+     * @throws org.apache.commons.math.exception.NotStrictlyPositiveException\n+     * if {@code sigma <= 0}.\n+     */\n+    double nextGaussian(double mu, double sigma);\n \n     /**\n      * Generates a random value from the exponential distribution\n      *\n      * @param mean the mean of the distribution\n      * @return a random value following the specified exponential distribution\n-     * @throws NotStrictlyPositiveException if {@code mean <= 0}.\n-     */\n-    double nextExponential(double mean) throws NotStrictlyPositiveException;\n+     * @throws org.apache.commons.math.exception.NotStrictlyPositiveException\n+     * if {@code mean <= 0}.\n+     */\n+    double nextExponential(double mean);\n \n     /**\n      * Generates a uniformly distributed random value from the open interval\n      * @param upper the exclusive upper bound of the support\n      * @return a uniformly distributed random value between lower and upper\n      * (exclusive)\n-     * @throws NumberIsTooLargeException if {@code lower >= upper}\n-     */\n-    double nextUniform(double lower, double upper)\n-            throws NumberIsTooLargeException;\n+     * @throws org.apache.commons.math.exception.NumberIsTooLargeException\n+     * if {@code lower >= upper}\n+     */\n+    double nextUniform(double lower, double upper);\n \n     /**\n      * Generates a uniformly distributed random value from the interval\n      * @param lowerInclusive {@code true} if the lower bound is inclusive\n      * @return uniformly distributed random value in the {@code (lower, upper)}\n      * interval, if {@code lowerInclusive} is {@code false}, or in the\n-     * {@code [lower, upper)} interval, if {@code lowerInclusive} is {@code true}\n-     * @throws NumberIsTooLargeException if {@code lower >= upper}\n-     */\n-    double nextUniform(double lower, double upper, boolean lowerInclusive)\n-            throws NumberIsTooLargeException;\n+     * {@code [lower, upper)} interval, if {@code lowerInclusive} is\n+     * {@code true}\n+     * @throws org.apache.commons.math.exception.NumberIsTooLargeException\n+     * if {@code lower >= upper}\n+     */\n+    double nextUniform(double lower, double upper, boolean lowerInclusive);\n \n     /**\n      * Generates an integer array of length {@code k} whose entries are selected\n      * @param k the size of the permutation\n      * @return a random {@code k}-permutation of {@code n}, as an array of\n      * integers\n-     * @throws NumberIsTooLargeException if {@code k > n}.\n-     * @throws NotStrictlyPositiveException if {@code k <= 0}.\n-     */\n-    int[] nextPermutation(int n, int k)\n-            throws NumberIsTooLargeException, NotStrictlyPositiveException;\n+     * @throws org.apache.commons.math.exception.NumberIsTooLargeException\n+     * if {@code k > n}.\n+     * @throws org.apache.commons.math.exception.NotStrictlyPositiveException\n+     * if {@code k <= 0}.\n+     */\n+    int[] nextPermutation(int n, int k);\n \n     /**\n      * Returns an array of {@code k} objects selected randomly from the\n      * @param c the collection to be sampled\n      * @param k the size of the sample\n      * @return a random sample of {@code k} elements from {@code c}\n-     * @throws NumberIsTooLargeException if {@code k > c.size()}.\n-     * @throws NotStrictlyPositiveException if {@code k <= 0}.\n-     */\n-    Object[] nextSample(Collection<?> c, int k)\n-            throws NumberIsTooLargeException, NotStrictlyPositiveException;\n+     * @throws org.apache.commons.math.exception.NumberIsTooLargeException\n+     * if {@code k > c.size()}.\n+     * @throws org.apache.commons.math.exception.NotStrictlyPositiveException\n+     * if {@code k <= 0}.\n+     */\n+    Object[] nextSample(Collection<?> c, int k);\n }\n--- a/src/main/java/org/apache/commons/math/random/RandomDataImpl.java\n+++ b/src/main/java/org/apache/commons/math/random/RandomDataImpl.java\n      * @return the random string.\n      * @throws NotStrictlyPositiveException if {@code len <= 0}.\n      */\n-    public String nextHexString(int len) throws NotStrictlyPositiveException {\n+    public String nextHexString(int len) {\n         if (len <= 0) {\n             throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);\n         }\n     }\n \n     /** {@inheritDoc} */\n-    public int nextInt(int lower, int upper) throws NumberIsTooLargeException {\n+    public int nextInt(int lower, int upper) {\n         if (lower >= upper) {\n             throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,\n                                                 lower, upper, false);\n      * </ol>\n      * </p>\n      */\n-    public String nextSecureHexString(int len) throws NotStrictlyPositiveException {\n+    public String nextSecureHexString(int len) {\n         if (len <= 0) {\n             throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);\n         }\n     }\n \n     /** {@inheritDoc} */\n-    public long nextSecureLong(long lower, long upper)\n-        throws NumberIsTooLargeException {\n+    public long nextSecureLong(long lower, long upper) {\n \n         if (lower >= upper) {\n             throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,\n      * Devroye, Luc. (1981).<i>The Computer Generation of Poisson Random Variables</i>\n      * <strong>Computing</strong> vol. 26 pp. 197-207.</li></ul></p>\n      */\n-    public long nextPoisson(double mean) throws NotStrictlyPositiveException {\n+    public long nextPoisson(double mean) {\n         if (mean <= 0) {\n             throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);\n         }\n     }\n \n     /** {@inheritDoc} */\n-    public double nextGaussian(double mu, double sigma)\n-        throws NotStrictlyPositiveException {\n+    public double nextGaussian(double mu, double sigma) {\n \n         if (sigma <= 0) {\n             throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sigma);\n      * Communications of the ACM, 15, 873-882.\n      * </p>\n      */\n-    public double nextExponential(double mean)\n-        throws NotStrictlyPositiveException {\n+    public double nextExponential(double mean) {\n \n         if (mean <= 0.0) {\n             throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);\n      * @throws MathIllegalArgumentException if one of the bounds is infinite or\n      * {@code NaN} or either bound is infinite or NaN\n      */\n-    public double nextUniform(double lower, double upper)\n-        throws NumberIsTooLargeException, MathIllegalArgumentException {\n+    public double nextUniform(double lower, double upper) {\n \n         return nextUniform(lower, upper, false);\n     }\n      * @since 3.0\n      */\n     public double nextUniform(double lower, double upper,\n-        boolean lowerInclusive)\n-        throws NumberIsTooLargeException, MathIllegalArgumentException {\n+        boolean lowerInclusive) {\n \n         if (lower >= upper) {\n             throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,\n      * here</a>\n      * </p>\n      */\n-    public Object[] nextSample(Collection<?> c, int k)\n-        throws NumberIsTooLargeException, NotStrictlyPositiveException {\n+    public Object[] nextSample(Collection<?> c, int k) {\n \n         int len = c.size();\n         if (k > len) {", "timestamp": 1326695907, "metainfo": ""}