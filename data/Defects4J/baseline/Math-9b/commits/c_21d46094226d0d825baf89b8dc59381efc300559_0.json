{"sha": "21d46094226d0d825baf89b8dc59381efc300559", "log": "MATH-170.  added SynchronizedDescriptiveStatistics class.  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatistics.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.descriptive;\n+\n+/**\n+ * Implementation of\n+ * {@link org.apache.commons.math.stat.descriptive.DescriptiveStatistics} that\n+ * is safe to use in a mulithreaded environment.  Multiple threads can safely\n+ * operate on a single instance without causing runtime exceptions due to race\n+ * conditions.  In effect, this implementation makes modification and access\n+ * methods atomic operations for a signle instance.  That is to say, as one\n+ * thread is computing a statistic from the instance, no other thread can modify\n+ * the instance nor compute another statistic. \n+ *\n+ * @version $Revision: 480440 $ $Date: 2006-11-29 01:14:12 -0600 (Wed, 29 Nov 2006) $\n+ */\n+public class SynchronizedDescriptiveStatistics extends DescriptiveStatisticsImpl {\n+\n+    /** Serialization UID */\n+    private static final long serialVersionUID = 1L;\n+\n+    /**\n+     * Construct an instance with infinite window\n+     */\n+    public SynchronizedDescriptiveStatistics() {\n+        this(INFINITE_WINDOW);\n+    }\n+\n+    /**\n+     * Construct an instance with finite window\n+     * @param window the finite window size.\n+     */\n+    public SynchronizedDescriptiveStatistics(int window) {\n+        super(window);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.descriptive.DescriptiveStatistics#addValue(double)\n+     */\n+    public synchronized void addValue(double v) {\n+        super.addValue(v);\n+    }\n+\n+    /**\n+     * Apply the given statistic to this univariate collection.\n+     * @param stat the statistic to apply\n+     * @return the computed value of the statistic.\n+     */\n+    public synchronized double apply(UnivariateStatistic stat) {\n+        return super.apply(stat);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.descriptive.DescriptiveStatistics#clear()\n+     */\n+    public synchronized void clear() {\n+        super.clear();\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.descriptive.DescriptiveStatistics#getElement(int)\n+     */\n+    public synchronized double getElement(int index) {\n+        return super.getElement(index);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.descriptive.DescriptiveStatistics#getN()\n+     */\n+    public synchronized long getN() {\n+        return super.getN();\n+    }\n+\n+    /** \n+     * Returns the standard deviation of the available values.\n+     * @return The standard deviation, Double.NaN if no values have been added \n+     * or 0.0 for a single value set. \n+     */\n+    public synchronized double getStandardDeviation() {\n+        return super.getStandardDeviation();\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.descriptive.DescriptiveStatistics#getValues()\n+     */\n+    public synchronized double[] getValues() {\n+        return super.getValues();\n+    }\n+\n+    /**\n+     * Access the window size.\n+     * @return the current window size.\n+     */\n+    public synchronized int getWindowSize() {\n+        return super.getWindowSize();\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.descriptive.DescriptiveStatistics#setWindowSize(int)\n+     */\n+    public synchronized void setWindowSize(int windowSize) {\n+        super.setWindowSize(windowSize);\n+    }\n+\n+    /**\n+     * Generates a text report displaying univariate statistics from values\n+     * that have been added.  Each statistic is displayed on a separate\n+     * line.\n+     * \n+     * @return String with line feeds displaying statistics\n+     */\n+    public synchronized String toString() {\n+        return super.toString();\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatisticsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law\n+ * or agreed to in writing, software distributed under the License is\n+ * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the specific language\n+ * governing permissions and limitations under the License.\n+ */\n+package org.apache.commons.math.stat.descriptive;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test cases for the {@link SynchronizedDescriptiveStatisticsTest} class.\n+ * @version $Revision: 566833 $ $Date: 2007-08-16 15:36:33 -0500 (Thu, 16 Aug\n+ *          2007) $\n+ */\n+public final class SynchronizedDescriptiveStatisticsTest extends DescriptiveStatisticsTest {\n+\n+    public SynchronizedDescriptiveStatisticsTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(SynchronizedDescriptiveStatisticsTest.class);\n+        suite.setName(\"SynchronizedDescriptiveStatistics Tests\");\n+        return suite;\n+    }\n+\n+    protected DescriptiveStatistics createDescriptiveStatistics() {\n+        return new SynchronizedDescriptiveStatistics();\n+    }\n+}", "timestamp": 1193809278, "metainfo": ""}