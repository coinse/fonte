{"sha": "dd88f79321dfc3ffb2574b304b895adb48576ed5", "log": "Removed dependency on DistributionFactory.  Added settable t distribution field.  ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/inference/TTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/TTestImpl.java\n import org.apache.commons.math.MathException;\n import org.apache.commons.math.distribution.DistributionFactory;\n import org.apache.commons.math.distribution.TDistribution;\n+import org.apache.commons.math.distribution.TDistributionImpl;\n import org.apache.commons.math.stat.StatUtils;\n import org.apache.commons.math.stat.descriptive.StatisticalSummary;\n \n  */\n public class TTestImpl implements TTest  {\n \n-    /** Cached DistributionFactory used to create TDistribution instances */\n-    private DistributionFactory distributionFactory = null;\n+    /** Distribution used to compute inference statistics. */\n+    private TDistribution distribution;\n     \n     /**\n      * Default constructor.\n      */\n     public TTestImpl() {\n+        this(new TDistributionImpl(1.0));\n+    }\n+    \n+    /**\n+     * Create a test instance using the given distribution for computing\n+     * inference statistics.\n+     * @param t distribution used to compute inference statistics.\n+     * @since 1.2\n+     */\n+    public TTestImpl(TDistribution t) {\n         super();\n+        setDistribution(t);\n     }\n     \n     /**\n     /**\n      * Gets a DistributionFactory to use in creating TDistribution instances.\n      * @return a distribution factory.\n+     * @deprecated inject TDistribution directly instead of using a factory.\n      */\n     protected DistributionFactory getDistributionFactory() {\n-        if (distributionFactory == null) {\n-            distributionFactory = DistributionFactory.newInstance();\n-        }\n-        return distributionFactory;\n+        return DistributionFactory.newInstance();\n     }\n     \n     /**\n     protected double tTest(double m, double mu, double v, double n)\n     throws MathException {\n         double t = Math.abs(t(m, mu, v, n));\n-        TDistribution tDistribution = \n-            getDistributionFactory().createTDistribution(n - 1);\n-        return 1.0 - tDistribution.cumulativeProbability(-t, t);\n+        distribution.setDegreesOfFreedom(n - 1);\n+        return 1.0 - distribution.cumulativeProbability(-t, t);\n     }\n \n     /**\n     throws MathException {\n         double t = Math.abs(t(m1, m2, v1, v2, n1, n2));\n         double degreesOfFreedom = 0;\n-        degreesOfFreedom= df(v1, v2, n1, n2);\n-        TDistribution tDistribution =\n-            getDistributionFactory().createTDistribution(degreesOfFreedom);\n-        return 1.0 - tDistribution.cumulativeProbability(-t, t);\n+        degreesOfFreedom = df(v1, v2, n1, n2);\n+        distribution.setDegreesOfFreedom(degreesOfFreedom);\n+        return 1.0 - distribution.cumulativeProbability(-t, t);\n     }\n     \n     /**\n             double v2, double n1, double n2)\n     throws MathException {\n         double t = Math.abs(homoscedasticT(m1, m2, v1, v2, n1, n2));\n-        double degreesOfFreedom = 0;\n-            degreesOfFreedom = (double) (n1 + n2 - 2);\n-        TDistribution tDistribution =\n-            getDistributionFactory().createTDistribution(degreesOfFreedom);\n-        return 1.0 - tDistribution.cumulativeProbability(-t, t);\n-    }   \n+        double degreesOfFreedom = (double) (n1 + n2 - 2);\n+        distribution.setDegreesOfFreedom(degreesOfFreedom);\n+        return 1.0 - distribution.cumulativeProbability(-t, t);\n+    }\n+    \n+    /**\n+     * Modify the distribution used to compute inference statistics.\n+     * @param value the new distribution\n+     * @since 1.2\n+     */\n+    public void setDistribution(TDistribution value) {\n+        distribution = value;\n+    }\n }", "timestamp": 1181222565, "metainfo": ""}