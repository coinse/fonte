{"sha": "2d846db3aec18dd081e680be05f6e0faad1cb186", "log": "[MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n      * </p>\n      *\n      * <p>\n-     * The implementation of this method is based on equations 14-17 of:\n+     * The implementation of this method is based on the modified Lentz algorithm as described\n+     * on page 18 ff. in:\n      * <ul>\n      * <li>\n-     *   Eric W. Weisstein. \"Continued Fraction.\" From MathWorld--A Wolfram Web\n-     *   Resource. <a target=\"_blank\"\n-     *   href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">\n-     *   http://mathworld.wolfram.com/ContinuedFraction.html</a>\n+     *   I. J. Thompson,  A. R. Barnett. \"Coulomb and Bessel Functions of Complex Arguments and Order.\"\n+     *   <a target=\"_blank\" href=\"http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf\">\n+     *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>\n      * </li>\n      * </ul>\n-     * The recurrence relationship defined in those equations can result in\n-     * very large intermediate results which can result in numerical overflow.\n-     * As a means to combat these overflow conditions, the intermediate results\n-     * are scaled whenever they threaten to become numerically unstable.</p>\n+     * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in\n+     * <a href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">Continued Fraction / MathWorld</a>.\n+     * </p>\n      *\n      * @param x the evaluation point.\n      * @param epsilon maximum error allowed.\n      * @throws ConvergenceException if the algorithm fails to converge.\n      */\n     public double evaluate(double x, double epsilon, int maxIterations) {\n-        double p0 = 1.0;\n-        double p1 = getA(0, x);\n-        double q0 = 0.0;\n-        double q1 = 1.0;\n-        double c = p1 / q1;\n-        int n = 0;\n-        double relativeError = Double.MAX_VALUE;\n-        while (n < maxIterations && relativeError > epsilon) {\n-            ++n;\n-            double a = getA(n, x);\n-            double b = getB(n, x);\n-            double p2 = a * p1 + b * p0;\n-            double q2 = a * q1 + b * q0;\n-            boolean infinite = false;\n-            if (Double.isInfinite(p2) || Double.isInfinite(q2)) {\n-                /*\n-                 * Need to scale. Try successive powers of the larger of a or b\n-                 * up to 5th power. Throw ConvergenceException if one or both\n-                 * of p2, q2 still overflow.\n-                 */\n-                double scaleFactor = 1d;\n-                double lastScaleFactor = 1d;\n-                final int maxPower = 5;\n-                final double scale = FastMath.max(a,b);\n-                if (scale <= 0) {  // Can't scale\n-                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n-                                                   x);\n-                }\n-                infinite = true;\n-                for (int i = 0; i < maxPower; i++) {\n-                    lastScaleFactor = scaleFactor;\n-                    scaleFactor *= scale;\n-                    if (a != 0.0 && a > b) {\n-                        p2 = p1 / lastScaleFactor + (b / scaleFactor * p0);\n-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * q0);\n-                    } else if (b != 0) {\n-                        p2 = (a / scaleFactor * p1) + p0 / lastScaleFactor;\n-                        q2 = (a / scaleFactor * q1) + q0 / lastScaleFactor;\n-                    }\n-                    infinite = Double.isInfinite(p2) || Double.isInfinite(q2);\n-                    if (!infinite) {\n-                        break;\n-                    }\n-                }\n+        final double small = 1e-50;\n+        double hPrev = getA(0, x);\n+\n+        // use the value of small as epsilon criteria for zero checks\n+        if (Precision.equals(hPrev, 0.0, small)) {\n+            hPrev = small;\n+        }\n+\n+        int n = 1;\n+        double dPrev = 0.0;\n+        double cPrev = hPrev;\n+        double hN = hPrev;\n+\n+        while (n < maxIterations) {\n+            final double a = getA(n, x);\n+            final double b = getB(n, x);\n+\n+            double dN = a + b * dPrev;\n+            if (Precision.equals(dN, 0.0, small)) {\n+                dN = small;\n+            }\n+            double cN = a + b / cPrev;\n+            if (Precision.equals(cN, 0.0, small)) {\n+                cN = small;\n             }\n \n-            if (infinite) {\n-               // Scaling failed\n-               throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n-                                              x);\n+            dN = 1 / dN;\n+            final double deltaN = cN * dN;\n+            hN = hPrev * deltaN;\n+\n+            if (Double.isInfinite(hN)) {\n+                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n+                                               x);\n             }\n-\n-            double r = p2 / q2;\n-\n-            if (Double.isNaN(r)) {\n+            if (Double.isNaN(hN)) {\n                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n                                                x);\n             }\n-            relativeError = FastMath.abs(r / c - 1.0);\n \n-            // prepare for next iteration\n-            c = p2 / q2;\n-            p0 = p1;\n-            p1 = p2;\n-            q0 = q1;\n-            q1 = q2;\n+            if (FastMath.abs(deltaN - 1.0) < epsilon) {\n+                break;\n+            }\n+\n+            dPrev = dN;\n+            cPrev = cN;\n+            hPrev = hN;\n+            n++;\n         }\n \n         if (n >= maxIterations) {\n                                                 maxIterations, x);\n         }\n \n-        return c;\n+        return hN;\n     }\n+\n }\n--- a/src/test/java/org/apache/commons/math3/distribution/BinomialDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math3/distribution/BinomialDistributionTest.java\n         Assert.assertEquals(dist.getNumericalVariance(), 30d * 0.3d * (1d - 0.3d), tol);\n     }\n \n+    @Test\n+    public void testMath718() {\n+        // for large trials the evaluation of ContinuedFraction was inaccurate\n+        // do a sweep over several large trials to test if the current implementation is\n+        // numerically stable.\n+\n+        for (int trials = 500000; trials < 20000000; trials += 100000) {\n+            BinomialDistribution dist = new BinomialDistribution(trials, 0.5);\n+            int p = dist.inverseCumulativeProbability(0.5);\n+            Assert.assertEquals(trials / 2, p);\n+        }\n+\n+    }\n }\n--- a/src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java\n         Assert.assertEquals(dist.getNumericalMean(), 5d / (5d - 2d), tol);\n         Assert.assertEquals(dist.getNumericalVariance(), (2d * 5d * 5d * 4d) / 9d, tol);\n     }\n+\n+    @Test\n+    public void testMath785() {\n+        // this test was failing due to inaccurate results from ContinuedFraction.\n+\n+        try {\n+            double prob = 0.01;\n+            FDistribution f = new FDistribution(200000, 200000);\n+            double result = f.inverseCumulativeProbability(prob);\n+            Assert.assertTrue(result < 1.0);\n+        } catch (Exception e) {\n+            Assert.fail(\"Failing to calculate inverse cumulative probability\");\n+        }\n+    }\n }", "timestamp": 1337630130, "metainfo": ""}