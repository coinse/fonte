{"sha": "f0d00db1048dfa3664d914bdfe96164e143b16a7", "log": "Removed dependency on DistributionFactory.  Added settable t distribution field.  ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n import java.io.Serializable;\n \n import org.apache.commons.math.MathException;\n-import org.apache.commons.math.distribution.DistributionFactory;\n import org.apache.commons.math.distribution.TDistribution;\n+import org.apache.commons.math.distribution.TDistributionImpl;\n \n /**\n  * Estimates an ordinary least squares regression model\n     /** Serializable version identifier */\n     private static final long serialVersionUID = -3004689053607543335L;\n \n+    /** the distribution used to compute inference statistics. */\n+    private TDistribution distribution;\n+    \n     /** sum of x values */\n     private double sumX = 0d;\n \n      * Create an empty SimpleRegression instance\n      */\n     public SimpleRegression() {\n+        this(new TDistributionImpl(1.0));\n+    }\n+    \n+    /**\n+     * Create an empty SimpleRegression using the given distribution object to\n+     * compute inference statistics.\n+     * @param t the distribution used to compute inference statistics.\n+     * @since 1.2\n+     */\n+    public SimpleRegression(TDistribution t) {\n         super();\n+        setDistribution(t);\n     }\n     \n     /**\n         sumX += x;\n         sumY += y;\n         n++;\n+        \n+        if (n > 2) {\n+            distribution.setDegreesOfFreedom(n - 2);\n+        }\n     }\n \n     /**\n             throw new IllegalArgumentException();\n         }\n         return getSlopeStdErr() *\n-            getTDistribution().inverseCumulativeProbability(1d - alpha / 2d);\n+            distribution.inverseCumulativeProbability(1d - alpha / 2d);\n     }\n \n     /**\n      * @throws MathException if the significance level can not be computed.\n      */\n     public double getSignificance() throws MathException {\n-        return 2d* (1.0 - getTDistribution().cumulativeProbability(\n+        return 2d * (1.0 - distribution.cumulativeProbability(\n                     Math.abs(getSlope()) / getSlopeStdErr()));\n     }\n \n     private double getRegressionSumSquares(double slope) {\n         return slope * slope * sumXX;\n     }\n-\n-    /**\n-     * Uses distribution framework to get a t distribution instance \n-     * with df = n - 2\n-     *\n-     * @return t distribution with df = n - 2\n-     */\n-    private TDistribution getTDistribution() {\n-        return DistributionFactory.newInstance().createTDistribution(n - 2);\n+    \n+    /**\n+     * Modify the distribution used to compute inference statistics.\n+     * @param value the new distribution\n+     * @since 1.2\n+     */\n+    public void setDistribution(TDistribution value) {\n+        distribution = value;\n+        \n+        // modify degrees of freedom\n+        if (n > 2) {\n+            distribution.setDegreesOfFreedom(n - 2);\n+        }\n     }\n }", "timestamp": 1181221737, "metainfo": ""}