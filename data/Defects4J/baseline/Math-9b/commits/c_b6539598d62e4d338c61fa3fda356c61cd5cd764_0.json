{"sha": "b6539598d62e4d338c61fa3fda356c61cd5cd764", "log": "Forgot to commit updated unit tests in rev 1211318 (MATH-677).  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java\n+++ b/src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java\n      */\n     @Test\n     public void testAdHocData() {\n-        FastFourierTransformer transformer = new FastFourierTransformer();\n+        FastFourierTransformer transformer = FastFourierTransformer.create();\n         Complex result[]; double tolerance = 1E-12;\n \n         double x[] = {1.3, 2.4, 1.7, 4.1, 2.9, 1.7, 5.1, 2.7};\n         FastFourierTransformer.scaleArray(x2, 1.0 / FastMath.sqrt(x2.length));\n         Complex y2[] = y;\n \n-        result = transformer.transform2(y2);\n+        transformer = FastFourierTransformer.createUnitary();\n+        result = transformer.transform(y2);\n         for (int i = 0; i < result.length; i++) {\n             Assert.assertEquals(x2[i], result[i].getReal(), tolerance);\n             Assert.assertEquals(0.0, result[i].getImaginary(), tolerance);\n         }\n \n-        result = transformer.inverseTransform2(x2);\n+        result = transformer.inverseTransform(x2);\n         for (int i = 0; i < result.length; i++) {\n             Assert.assertEquals(y2[i].getReal(), result[i].getReal(), tolerance);\n             Assert.assertEquals(y2[i].getImaginary(), result[i].getImaginary(), tolerance);\n \n     @Test\n     public void test2DData() {\n-        FastFourierTransformer transformer = new FastFourierTransformer();\n+        FastFourierTransformer transformer = FastFourierTransformer.create();\n+        double tolerance = 1E-12;\n+        Complex[][] input = new Complex[][] {new Complex[] {new Complex(1, 0),\n+                                                            new Complex(2, 0)},\n+                                             new Complex[] {new Complex(3, 1),\n+                                                            new Complex(4, 2)}};\n+        Complex[][] goodOutput = new Complex[][] {new Complex[] {new Complex(5,\n+                1.5), new Complex(-1, -.5)}, new Complex[] {new Complex(-2,\n+                -1.5), new Complex(0, .5)}};\n+        for (int i = 0; i < goodOutput.length; i++) {\n+            FastFourierTransformer.scaleArray(\n+                goodOutput[i],\n+                FastMath.sqrt(goodOutput[i].length) *\n+                    FastMath.sqrt(goodOutput.length));\n+        }\n+        Complex[][] output = (Complex[][])transformer.mdfft(input, true);\n+        Complex[][] output2 = (Complex[][])transformer.mdfft(output, false);\n+\n+        Assert.assertEquals(input.length, output.length);\n+        Assert.assertEquals(input.length, output2.length);\n+        Assert.assertEquals(input[0].length, output[0].length);\n+        Assert.assertEquals(input[0].length, output2[0].length);\n+        Assert.assertEquals(input[1].length, output[1].length);\n+        Assert.assertEquals(input[1].length, output2[1].length);\n+\n+        for (int i = 0; i < input.length; i++) {\n+            for (int j = 0; j < input[0].length; j++) {\n+                Assert.assertEquals(input[i][j].getImaginary(), output2[i][j].getImaginary(),\n+                             tolerance);\n+                Assert.assertEquals(input[i][j].getReal(), output2[i][j].getReal(), tolerance);\n+                Assert.assertEquals(goodOutput[i][j].getImaginary(), output[i][j].getImaginary(),\n+                             tolerance);\n+                Assert.assertEquals(goodOutput[i][j].getReal(), output[i][j].getReal(), tolerance);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void test2DDataUnitary() {\n+        FastFourierTransformer transformer = FastFourierTransformer.createUnitary();\n         double tolerance = 1E-12;\n         Complex[][] input = new Complex[][] {new Complex[] {new Complex(1, 0),\n                                                             new Complex(2, 0)},\n     @Test\n     public void testSinFunction() {\n         UnivariateFunction f = new SinFunction();\n-        FastFourierTransformer transformer = new FastFourierTransformer();\n+        FastFourierTransformer transformer = FastFourierTransformer.create();\n         Complex result[]; int N = 1 << 8;\n         double min, max, tolerance = 1E-12;\n \n     @Test\n     public void testParameters() throws Exception {\n         UnivariateFunction f = new SinFunction();\n-        FastFourierTransformer transformer = new FastFourierTransformer();\n+        FastFourierTransformer transformer = FastFourierTransformer.create();\n \n         try {\n             // bad interval", "timestamp": 1323243562, "metainfo": ""}