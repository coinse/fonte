{"sha": "e3c25c933acbde46ca3c3e79b95f341c1cd963b1", "log": "Changed to use, rathern than duplicate Realmatrix Frobenius norm.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\n         diagC = square(diagD);\n         pc = zeros(dimension, 1); // evolution paths for C and sigma\n         ps = zeros(dimension, 1); // B defines the coordinate system\n-        normps = norm(ps);\n+        normps = ps.getFrobeniusNorm();\n \n         B = eye(dimension, dimension);\n         D = ones(dimension, 1); // diagonal D defines the scaling\n         ps = ps.scalarMultiply(1. - cs).add(\n                 B.multiply(zmean).scalarMultiply(\n                         Math.sqrt(cs * (2. - cs) * mueff)));\n-        normps = norm(ps);\n+        normps = ps.getFrobeniusNorm();\n         boolean hsig = normps /\n             Math.sqrt(1. - Math.pow(1. - cs, 2. * iterations)) /\n                 chiN < 1.4 + 2. / (dimension + 1.);\n     /**\n      * @param m\n      *            Input matrix.\n-     * @return Norm of the matrix.\n-     */\n-    private static double norm(final RealMatrix m) {\n-        double sum = 0;\n-        for (int r = 0; r < m.getRowDimension(); r++)\n-            for (int c = 0; c < m.getColumnDimension(); c++) {\n-                double e = m.getEntry(r, c);\n-                sum += e*e;\n-            }\n-        return Math.sqrt(sum);\n-    }\n-\n-    /**\n-     * @param m\n-     *            Input matrix.\n      * @return Row matrix representing the sums of the rows.\n      */\n     private static RealMatrix sumRows(final RealMatrix m) {", "timestamp": 1301982741, "metainfo": ""}