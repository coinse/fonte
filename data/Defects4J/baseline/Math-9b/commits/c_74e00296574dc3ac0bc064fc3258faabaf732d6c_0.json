{"sha": "74e00296574dc3ac0bc064fc3258faabaf732d6c", "log": "Check first step size in embedded Runge-Kutta integrators.  JIRA: MATH-727  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n         }\n \n         stepSize = hNew;\n+        if (forward) {\n+            if (stepStart + stepSize >= t) {\n+                stepSize = t - stepStart;\n+            }\n+        } else {\n+            if (stepStart + stepSize <= t) {\n+                stepSize = t - stepStart;\n+            }\n+        }\n \n         // next stages\n         for (int k = 1; k < stages; ++k) {\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java\n   }\n \n   @Test\n+  public void testTooLargeFirstStep() {\n+\n+      AdaptiveStepsizeIntegrator integ =\n+              new DormandPrince853Integrator(0, Double.POSITIVE_INFINITY, Double.NaN, Double.NaN);\n+      final double start = 0.0;\n+      final double end   = 0.001;\n+      FirstOrderDifferentialEquations equations = new FirstOrderDifferentialEquations() {\n+\n+          public int getDimension() {\n+              return 1;\n+          }\n+\n+          public void computeDerivatives(double t, double[] y, double[] yDot) {\n+              Assert.assertTrue(t >= FastMath.nextAfter(start, Double.NEGATIVE_INFINITY));\n+              Assert.assertTrue(t <= FastMath.nextAfter(end,   Double.POSITIVE_INFINITY));\n+              yDot[0] = -100.0 * y[0];\n+          }\n+\n+      };\n+\n+      integ.setStepSizeControl(0, 1.0, 1.0e-6, 1.0e-8);\n+      integ.integrate(equations, start, new double[] { 1.0 }, end, new double[1]);\n+\n+  }\n+\n+  @Test\n   public void testBackward()\n       {\n \n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java\n   }\n \n   @Test\n+  public void testTooLargeFirstStep() {\n+\n+      AdaptiveStepsizeIntegrator integ =\n+              new GraggBulirschStoerIntegrator(0, Double.POSITIVE_INFINITY, Double.NaN, Double.NaN);\n+      final double start = 0.0;\n+      final double end   = 0.001;\n+      FirstOrderDifferentialEquations equations = new FirstOrderDifferentialEquations() {\n+\n+          public int getDimension() {\n+              return 1;\n+          }\n+\n+          public void computeDerivatives(double t, double[] y, double[] yDot) {\n+              Assert.assertTrue(t >= FastMath.nextAfter(start, Double.NEGATIVE_INFINITY));\n+              Assert.assertTrue(t <= FastMath.nextAfter(end,   Double.POSITIVE_INFINITY));\n+              yDot[0] = -100.0 * y[0];\n+          }\n+\n+      };\n+\n+      integ.setStepSizeControl(0, 1.0, 1.0e-6, 1.0e-8);\n+      integ.integrate(equations, start, new double[] { 1.0 }, end, new double[1]);\n+\n+  }\n+\n+  @Test\n   public void testUnstableDerivative() {\n     final StepProblem stepProblem = new StepProblem(0.0, 1.0, 2.0);\n     FirstOrderIntegrator integ =", "timestamp": 1324140925, "metainfo": ""}