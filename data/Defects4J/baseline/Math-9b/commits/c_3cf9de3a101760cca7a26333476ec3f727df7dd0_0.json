{"sha": "3cf9de3a101760cca7a26333476ec3f727df7dd0", "log": "Add missing @Deprecated annotations  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/ArgumentOutsideDomainException.java\n+++ b/src/main/java/org/apache/commons/math/ArgumentOutsideDomainException.java\n  * @deprecated in 2.2 (to be removed in 3.0). Please use\n  * {@link org.apache.commons.math.exception.OutOfRangeException} instead.\n  */\n+@Deprecated\n public class ArgumentOutsideDomainException extends FunctionEvaluationException {\n \n     /** Serializable version identifier. */\n--- a/src/main/java/org/apache/commons/math/ConvergingAlgorithm.java\n+++ b/src/main/java/org/apache/commons/math/ConvergingAlgorithm.java\n  * @since 2.0\n  * @deprecated in 2.2 (to be removed in 3.0).\n  */\n+@Deprecated\n public interface ConvergingAlgorithm {\n \n     /**\n--- a/src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java\n+++ b/src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java\n  * @since 2.0\n  * @deprecated in 2.2 (to be removed in 3.0).\n  */\n+@Deprecated\n public abstract class ConvergingAlgorithmImpl implements ConvergingAlgorithm {\n \n     /** Maximum absolute error. */\n      * @deprecated in 2.2. Derived classes should use the \"setter\" methods\n      * in order to assign meaningful values to all the instances variables.\n      */\n+    @Deprecated\n     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,\n                                       final double defaultAbsoluteAccuracy) {\n         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;\n      * @deprecated in 2.2 (to be removed as soon as the single non-default one\n      * has been removed).\n      */\n+    @Deprecated\n     protected ConvergingAlgorithmImpl() {}\n \n     /** {@inheritDoc} */\n--- a/src/main/java/org/apache/commons/math/DuplicateSampleAbscissaException.java\n+++ b/src/main/java/org/apache/commons/math/DuplicateSampleAbscissaException.java\n  * @version $Revision$ $Date$\n  * @deprecated in 2.2 (to be removed in 3.0).\n  */\n+@Deprecated\n public class DuplicateSampleAbscissaException extends MathException  {\n \n     /** Serializable version identifier */\n--- a/src/main/java/org/apache/commons/math/FunctionEvaluationException.java\n+++ b/src/main/java/org/apache/commons/math/FunctionEvaluationException.java\n  * @deprecated in 2.2 (to be removed in 3.0). Please use\n  * {@link org.apache.commons.math.exception.FunctionEvaluationException} instead.\n  */\n+@Deprecated\n public class FunctionEvaluationException extends MathException  {\n \n     /** Serializable version identifier. */\n--- a/src/main/java/org/apache/commons/math/MathRuntimeException.java\n+++ b/src/main/java/org/apache/commons/math/MathRuntimeException.java\n      * @deprecated in 2.2. Please use {@link org.apache.commons.math.exception.MathUnsupportedOperationException}\n      * instead.\n      */\n+    @Deprecated\n     public static UnsupportedOperationException createUnsupportedOperationException(final Localizable pattern,\n                                                                                     final Object ... arguments) {\n         return new UnsupportedOperationException() {\n      * @since 2.2\n      * @deprecated in 2.2. Checks for \"null\" must not be performed in Commons-Math.\n      */\n+    @Deprecated\n     public static NullPointerException createNullPointerException(final Localizable pattern,\n                                                                   final Object ... arguments) {\n         return new NullPointerException() {\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java\n  * {@link org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator}.\n  * This class will be removed in math 3.0.\n  */\n+@Deprecated\n public class SmoothingBicubicSplineInterpolator\n     implements BivariateRealGridInterpolator {\n     /**\n--- a/src/main/java/org/apache/commons/math/linear/InvalidMatrixException.java\n+++ b/src/main/java/org/apache/commons/math/linear/InvalidMatrixException.java\n  * @deprecated since 2.2. Please use the classes in the\n  * {@link org.apache.commons.math.exception} package.\n  */\n+@Deprecated\n public class InvalidMatrixException extends MathRuntimeException {\n \n     /** Serializable version identifier. */\n--- a/src/main/java/org/apache/commons/math/linear/MatrixIndexException.java\n+++ b/src/main/java/org/apache/commons/math/linear/MatrixIndexException.java\n  * @deprecated in 2.2 (to be removed in 3.0). Please use the exceptions in package\n  * {@link org.apache.commons.math.exception}.\n  */\n+@Deprecated\n public class MatrixIndexException extends MathRuntimeException {\n \n     /** Serializable version identifier */\n--- a/src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java\n+++ b/src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java\n  * @since 2.0\n  * @deprecated To be removed in 3.0.\n  */\n+@Deprecated\n public interface RealConvergenceChecker {\n \n   /** Check if the optimization algorithm has converged considering the last points.\n--- a/src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java\n      * @exception MathIllegalStateException if no bracket can be found\n      * @deprecated in 2.2 (must be replaced with \"BracketFinder\").\n      */\n+    @Deprecated\n     private double findUpperBound(final UnivariateRealFunction f,\n                                   final double a, final double h)\n         throws FunctionEvaluationException {\n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java\n  * @version $Revision$ $Date$ \n  * @deprecated To be removed in math 3.0 (when the class for which it is a test will also be removed).\n  */\n+@Deprecated\n public final class SmoothingBicubicSplineInterpolatorTest {\n     /**\n      * Test preconditions.\n--- a/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n      * @deprecated To be removed in release 3.0 (replaced by {@link\n      * #testArrayEqualsIncludingNaN()}.\n      */\n+    @Deprecated\n     public void testArrayEquals() {\n         assertFalse(MathUtils.equals(new double[] { 1d }, null));\n         assertFalse(MathUtils.equals(null, new double[] { 1d }));", "timestamp": 1288834893, "metainfo": ""}