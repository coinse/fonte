{"sha": "09d7a6a9f0d656567a181ae03beb02017eb7354c", "log": "* Changed testNextHex, textNextSecureHex to use ChiSquareTest via TestUtils method (These tests were written before either of these existed.) * Dropped @Retry from testNextHex (no longer needed because randomData is now initialized with a fixed seed). * Dropped extraneous checks (must have been cut-paste error).  JIRA: MATH-598     ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/random/RandomDataTest.java\n+++ b/src/test/java/org/apache/commons/math3/random/RandomDataTest.java\n \n     /** test dispersion and failure modes for nextHex() */\n     @Test\n-    @Retry(3)\n-    public void testNextHex() {\n+    public void testNextHex() throws Exception {\n         try {\n             randomData.nextHexString(-1);\n             Assert.fail(\"negative length supplied -- MathIllegalArgumentException expected\");\n             Assert.fail(\"zero length requested -- expecting MathIllegalArgumentException\");\n         } catch (MathIllegalArgumentException ex) {\n             // ignored\n-        }\n-        if (hexString.length() != 1) {\n-            Assert.fail(\"incorrect length for generated string\");\n         }\n         Frequency f = new Frequency();\n         for (int i = 0; i < smallSampleSize; i++) {\n             expected[i] = (double) smallSampleSize * 100 / 16;\n             observed[i] = f.getCount(hex[i]);\n         }\n-        /*\n-         * Use ChiSquare dist with df = 16-1 = 15, alpha = .001 Change to 30.58\n-         * for alpha = .01\n-         */\n-        Assert.assertTrue(\"chi-square test -- will fail about 1 in 1000 times\",\n-                testStatistic.chiSquare(expected, observed) < 37.70);\n+        TestUtils.assertChiSquareAccept(expected, observed, 0.001);\n     }\n \n     /** test dispersion and failure modes for nextHex() */\n     @Test\n-    public void testNextSecureHex() {\n+    public void testNextSecureHex() throws Exception {\n         try {\n             randomData.nextSecureHexString(-1);\n             Assert.fail(\"negative length -- MathIllegalArgumentException expected\");\n             Assert.fail(\"zero length requested -- expecting MathIllegalArgumentException\");\n         } catch (MathIllegalArgumentException ex) {\n             // ignored\n-        }\n-        if (hexString.length() != 1) {\n-            Assert.fail(\"incorrect length for generated string\");\n         }\n         Frequency f = new Frequency();\n         for (int i = 0; i < smallSampleSize; i++) {\n             expected[i] = (double) smallSampleSize * 100 / 16;\n             observed[i] = f.getCount(hex[i]);\n         }\n-        /*\n-         * Use ChiSquare dist with df = 16-1 = 15, alpha = .001 Change to 30.58\n-         * for alpha = .01\n-         */\n-        Assert.assertTrue(\"chi-square test -- will fail about 1 in 1000 times\",\n-                testStatistic.chiSquare(expected, observed) < 37.70);\n+        TestUtils.assertChiSquareAccept(expected, observed, 0.001);\n     }\n \n     @Test", "timestamp": 1338144348, "metainfo": ""}