{"sha": "742bc40d53168a12d68832c36f8710e6fe61992c", "log": "Reword to not reveal too much about implementation (apart from IOD of large tables).  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math/util/FastMath.java\n  * </p>\n  * <p>\n  * FastMath speed is achieved by relying heavily on optimizing compilers\n- * to native code present in many JVM todays and use of large tables.\n- * Precomputed literal arrays are provided in this class to speed up load\n- * time. If users prefer to compute the tables automatically at load time,\n- * they can change the compile-time constant {@code USE_PRECOMPUTED_TABLES}\n- * and set it to {@code false}. This will increase class load time at first\n- * use, but this overhead will occur only once per run, regardless of the\n- * number of subsequent calls to computation methods. Note that FastMath is\n+ * to native code present in many JVMs today and use of large tables.\n+ * The larger tables are lazily initialised on first use, so that the setup\n+ * time does not penalise methods that don't need them. \n+ * </p>\n+ * <p>\n+ * Note that FastMath is\n  * extensively used inside Apache Commons Math, so by calling some algorithms,\n- * the one-shot overhead when the constant is set to false will occur\n+ * the overhead when the the tables need to be intialised will occur\n  * regardless of the end-user calling FastMath methods directly or not.\n  * Performance figures for a specific JVM and hardware can be evaluated by\n  * running the FastMathTestPerformance tests in the test directory of the source", "timestamp": 1315754680, "metainfo": ""}