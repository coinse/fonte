{"sha": "73a1cbc72278817d07f6170f983962df82753d23", "log": "Unused  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java\n         v1.setEntry(1, 3);\n         v1.setEntry(2, 0);\n \n-        RealVector w;\n-\n-        w = u.ebeMultiply(v1);\n-        w = u.ebeDivide(v1);\n+        u.ebeMultiply(v1);\n+        u.ebeDivide(v1);\n     }\n }\n--- a/src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java\n     @Test(expected=NumberIsTooSmallException.class)\n     public void testProblemDimensionTooSmall() {\n         double[] startPoint = point(1, 0.5);\n-        double[][] boundaries = null;\n         doTest(new Rosen(), startPoint, null,\n                GoalType.MINIMIZE,\n                1e-13, 1e-6, 2000, null);\n     }\n \n     private static class DiffPow implements MultivariateRealFunction {\n-        private int fcount = 0;\n+//        private int fcount = 0;\n         public double value(double[] x) {\n             double f = 0;\n             for (int i = 0; i < x.length; ++i)\n--- a/src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java\n         }, new double[] { 1, 1, 1 });\n \n         LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n-        VectorialPointValuePair optimum\n-            = optimizer.optimize(100, problem, problem.target,\n-                                 new double[] { 1, 1, 1 },\n-                                 new double[] { 0, 0, 0 });\n+        optimizer.optimize(100, problem, problem.target,\n+                             new double[] { 1, 1, 1 },\n+                             new double[] { 0, 0, 0 });\n         Assert.assertTrue(FastMath.sqrt(problem.target.length) * optimizer.getRMS() > 0.6);\n \n-        final double[][] m = optimizer.getCovariances();\n+        optimizer.getCovariances();\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java\n+++ b/src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java\n      */\n     public void testAlphaRangeBelowZero() {\n         try {\n-            StableRandomGenerator generator = new StableRandomGenerator(rg,\n+            new StableRandomGenerator(rg,\n                     -1.0, 0.0);\n         } catch (OutOfRangeException e) {\n             assertEquals(-1.0, e.getArgument());\n \n     public void testAlphaRangeAboveTwo() {\n         try {\n-            StableRandomGenerator generator = new StableRandomGenerator(rg,\n+            new StableRandomGenerator(rg,\n                     3.0, 0.0);\n         } catch (OutOfRangeException e) {\n             assertEquals(3.0, e.getArgument());\n \n     public void testBetaRangeBelowMinusOne() {\n         try {\n-            StableRandomGenerator generator = new StableRandomGenerator(rg,\n+            new StableRandomGenerator(rg,\n                     1.0, -2.0);\n         } catch (OutOfRangeException e) {\n             assertEquals(-2.0, e.getArgument());\n \n     public void testBetaRangeAboveOne() {\n         try {\n-            StableRandomGenerator generator = new StableRandomGenerator(rg,\n+            new StableRandomGenerator(rg,\n                     1.0, 2.0);\n         } catch (OutOfRangeException e) {\n             assertEquals(2.0, e.getArgument());", "timestamp": 1320940350, "metainfo": ""}