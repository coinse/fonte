{"sha": "e730c83d05d28d870e8108b6d4535df46d228a5b", "log": "Added orthogonality tests for special polynomials.  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java\n  */\n package org.apache.commons.math.analysis.polynomials;\n \n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.analysis.integration.LegendreGaussIntegrator;\n import org.apache.commons.math.util.FastMath;\n-\n+import org.junit.Assert;\n import org.junit.Test;\n-import org.junit.Assert;\n \n /**\n  * Tests the PolynomialsUtils class.\n     }\n \n     @Test\n+    public void testChebyshevOrthogonality() {\n+        UnivariateRealFunction weight = new UnivariateRealFunction() {\n+            public double value(double x) {\n+                return 1 / FastMath.sqrt(1 - x * x);\n+            }\n+        };\n+        for (int i = 0; i < 10; ++i) {\n+            PolynomialFunction pi = PolynomialsUtils.createChebyshevPolynomial(i);\n+            for (int j = 0; j <= i; ++j) {\n+                PolynomialFunction pj = PolynomialsUtils.createChebyshevPolynomial(j);\n+                checkOrthogonality(pi, pj, weight, -0.9999, 0.9999, 1.5, 0.03);\n+            }\n+        }\n+    }\n+\n+    @Test\n     public void testFirstHermitePolynomials() {\n         checkPolynomial(PolynomialsUtils.createHermitePolynomial(3), \"-12 x + 8 x^3\");\n         checkPolynomial(PolynomialsUtils.createHermitePolynomial(2), \"-2 + 4 x^2\");\n \n             checkNullPolynomial(Hk0g0.add(Hk1g1.add(Hk2g2)));\n \n+        }\n+    }\n+\n+    @Test\n+    public void testHermiteOrthogonality() {\n+        UnivariateRealFunction weight = new UnivariateRealFunction() {\n+            public double value(double x) {\n+                return FastMath.exp(-x * x);\n+            }\n+        };\n+        for (int i = 0; i < 10; ++i) {\n+            PolynomialFunction pi = PolynomialsUtils.createHermitePolynomial(i);\n+            for (int j = 0; j <= i; ++j) {\n+                PolynomialFunction pj = PolynomialsUtils.createHermitePolynomial(j);\n+                checkOrthogonality(pi, pj, weight, -50, 50, 1.5, 1.0e-8);\n+            }\n         }\n     }\n \n     }\n \n     @Test\n+    public void testLaguerreOrthogonality() {\n+        UnivariateRealFunction weight = new UnivariateRealFunction() {\n+            public double value(double x) {\n+                return FastMath.exp(-x);\n+            }\n+        };\n+        for (int i = 0; i < 10; ++i) {\n+            PolynomialFunction pi = PolynomialsUtils.createLaguerrePolynomial(i);\n+            for (int j = 0; j <= i; ++j) {\n+                PolynomialFunction pj = PolynomialsUtils.createLaguerrePolynomial(j);\n+                checkOrthogonality(pi, pj, weight, 0.0, 100.0, 0.99999, 1.0e-13);\n+            }\n+        }\n+    }\n+\n+    @Test\n     public void testFirstLegendrePolynomials() {\n         checkPolynomial(PolynomialsUtils.createLegendrePolynomial(3),  2l, \"-3 x + 5 x^3\");\n         checkPolynomial(PolynomialsUtils.createLegendrePolynomial(2),  2l, \"-1 + 3 x^2\");\n \n             checkNullPolynomial(Pk0g0.add(Pk1g1.add(Pk2g2)));\n \n+        }\n+    }\n+\n+    @Test\n+    public void testLegendreOrthogonality() {\n+        UnivariateRealFunction weight = new UnivariateRealFunction() {\n+            public double value(double x) {\n+                return 1;\n+            }\n+        };\n+        for (int i = 0; i < 10; ++i) {\n+            PolynomialFunction pi = PolynomialsUtils.createLegendrePolynomial(i);\n+            for (int j = 0; j <= i; ++j) {\n+                PolynomialFunction pj = PolynomialsUtils.createLegendrePolynomial(j);\n+                checkOrthogonality(pi, pj, weight, -1, 1, 0.1, 1.0e-13);\n+            }\n         }\n     }\n \n     }\n \n     @Test\n-    public void testShift(){\n+    public void testShift() {\n         // f1(x) = 1 + x + 2 x^2\n         PolynomialFunction f1x = new PolynomialFunction(new double[] { 1, 1, 2 });\n \n             Assert.assertEquals(0, coefficient, 1e-13);\n         }\n     }\n+\n+    private void checkOrthogonality(final PolynomialFunction p1,\n+                                    final PolynomialFunction p2,\n+                                    final UnivariateRealFunction weight,\n+                                    final double a, final double b,\n+                                    final double nonZeroThreshold,\n+                                    final double zeroThreshold) {\n+        UnivariateRealFunction f = new UnivariateRealFunction() {\n+            public double value(double x) {\n+                return weight.value(x) * p1.value(x) * p2.value(x);\n+            }\n+        };\n+        double dotProduct =\n+                new LegendreGaussIntegrator(5, 1.0e-9, 1.0e-8, 2, 15).integrate(1000000, f, a, b);\n+        if (p1.degree() == p2.degree()) {\n+            // integral should be non-zero\n+            Assert.assertTrue(\"I(\" + p1.degree() + \", \" + p2.degree() + \") = \"+ dotProduct,\n+                              FastMath.abs(dotProduct) > nonZeroThreshold);\n+        } else {\n+            // integral should be zero\n+            Assert.assertEquals(\"I(\" + p1.degree() + \", \" + p2.degree() + \") = \"+ dotProduct,\n+                                0.0, FastMath.abs(dotProduct), zeroThreshold);\n+        }\n+    }\n }", "timestamp": 1317998085, "metainfo": ""}