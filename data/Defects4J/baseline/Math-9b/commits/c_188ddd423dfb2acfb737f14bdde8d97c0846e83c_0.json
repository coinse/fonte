{"sha": "188ddd423dfb2acfb737f14bdde8d97c0846e83c", "log": "MATH-361 and MATH-195 (continued). Added new exceptions. Corrected some typos in Javadoc.   ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/exception/ConvergenceException.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.exception;\n+\n+import org.apache.commons.math.exception.util.Localizable;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n+\n+/**\n+ * Error thrown when a numerical computation can not be performed because the\n+ * numerical result failed to converge to a finite value.\n+ *\n+ * @since 3.0\n+ * @version $Revision$ $Date$\n+ */\n+public class ConvergenceException extends MathIllegalStateException {\n+    /** Serializable version Id. */\n+    private static final long serialVersionUID = 4330003017885151975L;\n+\n+    /**\n+     * Construct the exception.\n+     */\n+    public ConvergenceException() {\n+        this(null);\n+    }\n+    /**\n+     * Construct the exception with a specific context.\n+     *\n+     * @param specific Specific contexte pattern.\n+     */\n+    public ConvergenceException(Localizable specific) {\n+        this(specific,\n+             LocalizedFormats.CONVERGENCE_FAILED,\n+             null);\n+    }\n+    /**\n+     * Construct the exception with a specific context and arguments.\n+     *\n+     * @param specific Specific contexte pattern.\n+     * @param args Arguments.\n+     */\n+    public ConvergenceException(Localizable specific,\n+                                Object ... args) {\n+        super(specific,\n+              LocalizedFormats.CONVERGENCE_FAILED,\n+              args);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/exception/MathIllegalStateException.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.exception;\n+\n+import java.util.Locale;\n+\n+import org.apache.commons.math.exception.util.ArgUtils;\n+import org.apache.commons.math.exception.util.MessageFactory;\n+import org.apache.commons.math.exception.util.Localizable;\n+\n+/**\n+ * Base class for all exceptions that signal a mismatch between the\n+ * current state and the user's expectations.\n+ *\n+ * @since 3.0\n+ * @version $Revision$ $Date$\n+ */\n+public class MathIllegalStateException extends IllegalStateException {\n+\n+    /** Serializable version Id. */\n+    private static final long serialVersionUID = -6024911025449780478L;\n+\n+    /**\n+     * Pattern used to build the message (specific context).\n+     */\n+    private final Localizable specific;\n+    /**\n+     * Pattern used to build the message (general problem description).\n+     */\n+    private final Localizable general;\n+    /**\n+     * Arguments used to build the message.\n+     */\n+    private final Object[] arguments;\n+\n+    /**\n+     * @param specific Message pattern providing the specific context of\n+     * the error.\n+     * @param general Message pattern explaining the cause of the error.\n+     * @param args Arguments.\n+     */\n+    public MathIllegalStateException(Localizable specific,\n+                                     Localizable general,\n+                                     Object ... args) {\n+        this.specific = specific;\n+        this.general = general;\n+        arguments = ArgUtils.flatten(args);\n+    }\n+    /**\n+     * @param general Message pattern explaining the cause of the error.\n+     * @param args Arguments.\n+     */\n+    public MathIllegalStateException(Localizable general,\n+                                     Object ... args) {\n+        this(null, general, args);\n+    }\n+\n+    /**\n+     * Get the message in a specified locale.\n+     *\n+     * @param locale Locale in which the message should be translated.\n+     *\n+     * @return the localized message.\n+     */\n+    public String getMessage(final Locale locale) {\n+        return MessageFactory.buildMessage(locale, specific, general, arguments);\n+    }\n+\n+   /** {@inheritDoc} */\n+    @Override\n+    public String getMessage() {\n+        return getMessage(Locale.US);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public String getLocalizedMessage() {\n+        return getMessage(Locale.getDefault());\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/exception/MaxCountExceededException.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.exception;\n+\n+import org.apache.commons.math.exception.util.Localizable;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n+\n+/**\n+ * Exception to be thrown when some counter maximum value is exceeded.\n+ *\n+ * @since 3.0\n+ * @version $Revision$ $Date$\n+ */\n+public class MaxCountExceededException extends MathIllegalStateException {\n+    /** Serializable version Id. */\n+    private static final long serialVersionUID = 4330003017885151975L;\n+\n+    /**\n+     * Maximum number of evaluations.\n+     */\n+    private final Number max;\n+\n+    /**\n+     * Construct the exception.\n+     *\n+     * @param max Maximum.\n+     */\n+    public MaxCountExceededException(Number max) {\n+        this(null, max);\n+    }\n+    /**\n+     * Construct the exception with a specific context.\n+     *\n+     * @param specific Specific contexte pattern.\n+     * @param max Maximum.\n+     */\n+    public MaxCountExceededException(Localizable specific,\n+                                     Number max) {\n+        super(specific,\n+              LocalizedFormats.MAX_COUNT_EXCEEDED,\n+              max);\n+\n+        this.max = max;\n+    }\n+\n+    /**\n+     * @return the maximum number of evaluations.\n+     */\n+    public Number getMax() {\n+        return max;\n+    }\n+}\n--- a/src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java\n+++ b/src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java\n      * Construct the exception.\n      *\n      * @param wrong Value that is larger than the maximum.\n-     * @param max maximum.\n+     * @param max Maximum.\n      * @param boundIsAllowed if true the maximum is included in the allowed range.\n      */\n     public NumberIsTooLargeException(Number wrong,\n     /**\n      * Construct the exception with a specific context.\n      *\n-     * @param specific Specific contexte pattern .\n+     * @param specific Specific contexte pattern.\n      * @param wrong Value that is larger than the maximum.\n-     * @param max maximum.\n+     * @param max Maximum.\n      * @param boundIsAllowed if true the maximum is included in the allowed range.\n      */\n     public NumberIsTooLargeException(Localizable specific,\n \n     /**\n      * @return {@code true} if the maximum is included in the allowed range.\n-     **/\n+     */\n     public boolean getBoundIsAllowed() {\n         return boundIsAllowed;\n     }\n \n     /**\n      * @return the maximum.\n-     **/\n+     */\n     public Number getMax() {\n         return max;\n     }\n--- a/src/main/java/org/apache/commons/math/exception/NumberIsTooSmallException.java\n+++ b/src/main/java/org/apache/commons/math/exception/NumberIsTooSmallException.java\n      * Construct the exception.\n      *\n      * @param wrong Value that is smaller than the minimum.\n-     * @param min minimum.\n+     * @param min Minimum.\n      * @param boundIsAllowed Whether {@code min} is included in the allowed range.\n      */\n     public NumberIsTooSmallException(Number wrong,\n     /**\n      * Construct the exception with a specific context.\n      *\n-     * @param specific Specific contexte pattern .\n+     * @param specific Specific contexte pattern.\n      * @param wrong Value that is smaller than the minimum.\n-     * @param min minimum.\n+     * @param min Minimum.\n      * @param boundIsAllowed Whether {@code min} is included in the allowed range.\n      */\n     public NumberIsTooSmallException(Localizable specific,\n \n     /**\n      * @return {@code true} if the minimum is included in the allowed range.\n-     **/\n+     */\n     public boolean getBoundIsAllowed() {\n         return boundIsAllowed;\n     }\n \n     /**\n      * @return the minimum.\n-     **/\n+     */\n     public Number getMin() {\n         return min;\n     }\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/exception/TooManyEvaluationsException.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.exception;\n+\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n+\n+/**\n+ * Exception to be thrown when the maximal number of evaluations is exceeded.\n+ *\n+ * @since 3.0\n+ * @version $Revision$ $Date$\n+ */\n+public class TooManyEvaluationsException extends MaxCountExceededException {\n+    /** Serializable version Id. */\n+    private static final long serialVersionUID = 4330003017885151975L;\n+\n+    /**\n+     * Construct the exception.\n+     *\n+     * @param max Maximum number of evaluations.\n+     */\n+    public TooManyEvaluationsException(Number max) {\n+        super(LocalizedFormats.EVALUATIONS, max);\n+    }\n+}\n--- a/src/main/java/org/apache/commons/math/exception/ZeroException.java\n+++ b/src/main/java/org/apache/commons/math/exception/ZeroException.java\n     /**\n      * Construct the exception with a specific context.\n      *\n-     * @param specific Specific contexte pattern .\n+     * @param specific Specific context pattern.\n      */\n     public ZeroException(Localizable specific) {\n         super(specific, LocalizedFormats.ZERO_NOT_ALLOWED, 0);\n--- a/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n+++ b/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n     CONTINUED_FRACTION_NAN_DIVERGENCE(\"Continued fraction diverged to NaN for value {0}\"),\n     CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(\"contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.\"),\n     CONTRACTION_CRITERIA_SMALLER_THAN_ONE(\"contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.\"),\n-    CONVERGENCE_FAILED(\"convergence failed\"),\n+    CONVERGENCE_FAILED(\"convergence failed\"), /* keep */\n     CUMULATIVE_PROBABILITY_RETURNED_NAN(\"Cumulative probability function returned NaN for argument {0} p = {1}\"),\n     DIFFERENT_ROWS_LENGTHS(\"some rows have length {0} while others have length {1}\"),\n     DIGEST_NOT_INITIALIZED(\"digest not initialized\"),\n     LOWER_BOUND_NOT_BELOW_UPPER_BOUND(\"lower bound ({0}) must be strictly less than upper bound ({1})\"), /* keep */\n     LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(\"lower endpoint ({0}) must be less than or equal to upper endpoint ({1})\"),\n     MAP_MODIFIED_WHILE_ITERATING(\"map has been modified while iterating\"),\n+    EVALUATIONS(\"evaluations\"), /* keep */\n+    MAX_COUNT_EXCEEDED(\"maximal count ({0}) exceeded\"), /* keep */\n     MAX_EVALUATIONS_EXCEEDED(\"maximal number of evaluations ({0}) exceeded\"),\n     MAX_ITERATIONS_EXCEEDED(\"maximal number of iterations ({0}) exceeded\"),\n     MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(\"minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}\"),\n     NOT_SUBTRACTION_COMPATIBLE_MATRICES(\"{0}x{1} and {2}x{3} matrices are not subtraction compatible\"),\n     NOT_SYMMETRIC_MATRIX(\"not symmetric matrix\"),\n     NO_BIN_SELECTED(\"no bin selected\"),\n-    NO_CONVERGENCE_WITH_ANY_START_POINT(\"none of the {0} start points lead to convergence\"),\n+    NO_CONVERGENCE_WITH_ANY_START_POINT(\"none of the {0} start points lead to convergence\"), /* keep */\n     NO_DATA(\"no data\"), /* keep */\n     NO_DEGREES_OF_FREEDOM(\"no degrees of freedom ({0} measurements, {1} parameters)\"),\n     NO_DENSITY_FOR_THIS_DISTRIBUTION(\"This distribution does not have a density function implemented\"),\n     NO_FEASIBLE_SOLUTION(\"no feasible solution\"),\n-    NO_OPTIMUM_COMPUTED_YET(\"no optimum computed yet\"),\n+    NO_OPTIMUM_COMPUTED_YET(\"no optimum computed yet\"), /* keep */\n     NO_RESULT_AVAILABLE(\"no result available\"),\n     NO_SUCH_MATRIX_ENTRY(\"no entry at indices ({0}, {1}) in a {2}x{3} matrix\"),\n     NULL_NOT_ALLOWED(\"null is not allowed\"), /* keep */", "timestamp": 1283129449, "metainfo": ""}