{"sha": "a7a8be5ea5ec9ee72635181436fd046825d5af84", "log": "[MATH-644] added unit test.  ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java\n import org.apache.commons.math3.exception.NotPositiveException;\n import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n import org.apache.commons.math3.exception.NumberIsTooLargeException;\n+import org.apache.commons.math3.util.Precision;\n import org.junit.Assert;\n import org.junit.Test;\n \n         Assert.assertEquals(dist.getNumericalMean(), 55d * 200d / 3000d, tol);\n         Assert.assertEquals(dist.getNumericalVariance(), ( 200d * 55d * (3000d - 200d) * (3000d - 55d) ) / ( (3000d * 3000d * 2999d) ), tol);\n     }\n+    \n+    @Test\n+    public void testMath644() {\n+        int N = 14761461;  // population\n+        int m = 1035;      // successes in population\n+        int n = 1841;      // number of trials\n+\n+        int k = 0;\n+        final HypergeometricDistribution dist = new HypergeometricDistribution(N, m, n);\n+        \n+        Assert.assertTrue(Precision.compareTo(1.0, dist.upperCumulativeProbability(k), 1) == 0);\n+        Assert.assertTrue(Precision.compareTo(dist.cumulativeProbability(k), 0.0, 1) > 0);\n+        \n+        // another way to calculate the upper cumulative probability\n+        double upper = 1.0 - dist.cumulativeProbability(k) + dist.probability(k);\n+        Assert.assertTrue(Precision.compareTo(1.0, upper, 1) == 0);\n+    }\n }", "timestamp": 1338508512, "metainfo": ""}