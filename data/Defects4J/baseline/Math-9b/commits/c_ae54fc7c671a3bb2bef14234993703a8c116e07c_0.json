{"sha": "ae54fc7c671a3bb2bef14234993703a8c116e07c", "log": "Fix generics warnings in GaussIntegratorFactory.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java\n  */\n package org.apache.commons.math3.analysis.integration.gauss;\n \n+import java.math.BigDecimal;\n+\n import org.apache.commons.math3.util.Pair;\n \n /**\n  */\n public class GaussIntegratorFactory {\n     /** Generator of Gauss-Legendre integrators. */\n-    private final BaseRuleFactory legendre = new LegendreRuleFactory();\n+    private final BaseRuleFactory<Double> legendre = new LegendreRuleFactory();\n     /** Generator of Gauss-Legendre integrators. */\n-    private final BaseRuleFactory legendreHighPrecision = new LegendreHighPrecisionRuleFactory();\n+    private final BaseRuleFactory<BigDecimal> legendreHighPrecision = new LegendreHighPrecisionRuleFactory();\n \n     /**\n      * Creates an integrator of the given order, and whose call to the\n      * @param numberOfPoints Order of the integration rule.\n      * @return the integration nodes and weights.\n      */\n-    private static Pair<double[], double[]> getRule(BaseRuleFactory factory,\n+    private static Pair<double[], double[]> getRule(BaseRuleFactory<? extends Number> factory,\n                                                     int numberOfPoints) {\n         return factory.getRule(numberOfPoints);\n     }", "timestamp": 1342987272, "metainfo": ""}