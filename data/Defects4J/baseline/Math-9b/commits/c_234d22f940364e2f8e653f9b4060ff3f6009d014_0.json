{"sha": "234d22f940364e2f8e653f9b4060ff3f6009d014", "log": "MATH-795: in RealVectorTest, cleaned-up testSparseIterator().   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n  * Tests for {@link RealVector}.\n  */\n public class RealVectorTest extends RealVectorAbstractTest{\n-    private double[] vec1 = { 1d, 2d, 3d, 4d, 5d };\n-    private double[] vec2 = { -3d, 0d, 0d, 2d, 1d };\n \n     @Override\n     public RealVector create(final double[] data) {\n \n     @Test\n     public void testSparseIterator() throws Exception {\n-        RealVector v = new RealVectorTestImpl(vec2.clone());\n+        /*\n+         * For non-default values, use x + 1, x + 2, etc... to make sure that\n+         * these values are really different from x.\n+         */\n+        final double x = getPreferredEntryValue();\n+        final double[] data = {\n+            x, x + 1d, x, x, x + 2d, x + 3d, x + 4d, x, x, x, x + 5d, x + 6d, x\n+        };\n+\n+        RealVector v = create(data);\n         Entry e;\n         int i = 0;\n-        double[] nonDefaultV2 = { -3d, 2d, 1d };\n-        for(Iterator<Entry> it = v.sparseIterator(); it.hasNext() && (e = it.next()) != null; i++) {\n-            Assert.assertEquals(nonDefaultV2[i], e.getValue(), 0);\n-        }\n-        double [] onlyOne = {0d, 1.0, 0d};\n-        v = new RealVectorTestImpl(onlyOne);\n-        for(Iterator<Entry> it = v.sparseIterator(); it.hasNext() && (e = it.next()) != null; ) {\n+        final double[] nonDefault = {\n+            x + 1d, x + 2d, x + 3d, x + 4d, x + 5d, x + 6d\n+        };\n+        for (Iterator<Entry> it = v.sparseIterator(); it.hasNext(); i++) {\n+            e = it.next();\n+            Assert.assertEquals(nonDefault[i], e.getValue(), 0);\n+        }\n+        double [] onlyOne = {x, x + 1d, x};\n+        v = create(onlyOne);\n+        for(Iterator<Entry> it = v.sparseIterator(); it.hasNext(); ) {\n+            e = it.next();\n             Assert.assertEquals(onlyOne[1], e.getValue(), 0);\n         }\n-\n     }\n \n     @Test", "timestamp": 1341600869, "metainfo": ""}