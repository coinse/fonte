{"sha": "8ae7ff26d78a1706ea4748813a9ccf0bec0544e8", "log": "MATH-854   - filled the \"throws\" clause of Array2DRowRealMatrix,   - corrected some method signatures in RealMatrix and AbstractRealMatrix accordingly,   - in AbstractRealMatrix, removed \"abstract implementations\" of some methods specified in interface RealMatrix, as they serve no purpose.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java\n     }\n \n     /** {@inheritDoc} */\n-    public abstract RealMatrix createMatrix(final int rowDimension, final int columnDimension);\n-\n-    /** {@inheritDoc} */\n     public abstract RealMatrix copy();\n \n     /** {@inheritDoc} */\n             setEntry(i, column, array[i]);\n         }\n     }\n-\n-    /** {@inheritDoc} */\n-    public abstract double getEntry(int row, int column);\n-\n-    /** {@inheritDoc} */\n-    public abstract void setEntry(int row, int column, double value);\n \n     /** {@inheritDoc} */\n     public void addToEntry(int row, int column, double increment)\n--- a/src/main/java/org/apache/commons/math3/linear/Array2DRowRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math3/linear/Array2DRowRealMatrix.java\n import java.io.Serializable;\n \n import org.apache.commons.math3.exception.DimensionMismatchException;\n+import org.apache.commons.math3.exception.MathIllegalStateException;\n+import org.apache.commons.math3.exception.NoDataException;\n+import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n import org.apache.commons.math3.exception.NullArgumentException;\n-import org.apache.commons.math3.exception.NoDataException;\n-import org.apache.commons.math3.exception.MathIllegalStateException;\n+import org.apache.commons.math3.exception.NumberIsTooSmallException;\n+import org.apache.commons.math3.exception.OutOfRangeException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n import org.apache.commons.math3.util.MathUtils;\n \n      *\n      * @param rowDimension Number of rows in the new matrix.\n      * @param columnDimension Number of columns in the new matrix.\n-     * @throws org.apache.commons.math3.exception.NotStrictlyPositiveException\n-     * if the row or column dimension is not positive.\n-     */\n-    public Array2DRowRealMatrix(final int rowDimension, final int columnDimension) {\n+     * @throws NotStrictlyPositiveException if the row or column dimension is\n+     * not positive.\n+     */\n+    public Array2DRowRealMatrix(final int rowDimension,\n+                                final int columnDimension)\n+        throws NotStrictlyPositiveException {\n         super(rowDimension, columnDimension);\n         data = new double[rowDimension][columnDimension];\n     }\n      * @param d Data for new matrix.\n      * @param copyArray if {@code true}, the input array will be copied,\n      * otherwise it will be referenced.\n-     * @throws DimensionMismatchException if {@code d} is not rectangular\n-     * (not all rows have the same length) or empty.\n+     * @throws DimensionMismatchException if {@code d} is not rectangular.\n+     * @throws NoDataException if {@code d} row or colum dimension is zero.\n      * @throws NullArgumentException if {@code d} is {@code null}.\n-     * @throws NoDataException if there are not at least one row and one column.\n      * @see #Array2DRowRealMatrix(double[][])\n      */\n-    public Array2DRowRealMatrix(final double[][] d, final boolean copyArray) {\n+    public Array2DRowRealMatrix(final double[][] d, final boolean copyArray)\n+        throws DimensionMismatchException, NoDataException,\n+        NullArgumentException {\n         if (copyArray) {\n             copyIn(d);\n         } else {\n     }\n \n     /** {@inheritDoc} */\n-    @Override\n     public RealMatrix createMatrix(final int rowDimension,\n-                                   final int columnDimension) {\n+                                   final int columnDimension)\n+        throws NotStrictlyPositiveException {\n         return new Array2DRowRealMatrix(rowDimension, columnDimension);\n     }\n \n     }\n \n     /**\n-     * Compute the sum of this matrix with {@code m}.\n+     * Compute the sum of {@code this} and {@code m}.\n      *\n      * @param m Matrix to be added.\n-     * @return {@code this} + m.\n-     * @throws MatrixDimensionMismatchException\n-     * if {@code m} is not the same size as this matrix.\n-     */\n-    public Array2DRowRealMatrix add(final Array2DRowRealMatrix m) {\n+     * @return {@code this + m}.\n+     * @throws MatrixDimensionMismatchException if {@code m} is not the same\n+     * size as {@code this}.\n+     */\n+    public Array2DRowRealMatrix add(final Array2DRowRealMatrix m)\n+        throws MatrixDimensionMismatchException {\n         // Safety check.\n         MatrixUtils.checkAdditionCompatible(this, m);\n \n     }\n \n     /**\n-     * Subtract {@code m} from this matrix.\n+     * Returns {@code this} minus {@code m}.\n      *\n      * @param m Matrix to be subtracted.\n-     * @return {@code this} - m.\n-     * @throws MatrixDimensionMismatchException\n-     * if {@code m} is not the same size as this matrix.\n-     */\n-    public Array2DRowRealMatrix subtract(final Array2DRowRealMatrix m) {\n-        // Safety check.\n+     * @return {@code this - m}\n+     * @throws MatrixDimensionMismatchException if {@code m} is not the same\n+     * size as {@code this}.\n+     */\n+    public Array2DRowRealMatrix subtract(final Array2DRowRealMatrix m)\n+        throws MatrixDimensionMismatchException {\n         MatrixUtils.checkSubtractionCompatible(this, m);\n \n         final int rowCount    = getRowDimension();\n     }\n \n     /**\n-     * Postmultiplying this matrix by {@code m}.\n-     *\n-     * @param m Matrix to postmultiply by.\n-     * @return {@code this} * m.\n-     * @throws DimensionMismatchException if the number of columns of this\n-     * matrix is not equal to the number of rows of {@code m}.\n-     */\n-    public Array2DRowRealMatrix multiply(final Array2DRowRealMatrix m) {\n-        // Safety check.\n+     * Returns the result of postmultiplying {@code this} by {@code m}.\n+     *\n+     * @param m matrix to postmultiply by\n+     * @return {@code this * m}\n+     * @throws DimensionMismatchException if\n+     * {@code columnDimension(this) != rowDimension(m)}\n+     */\n+    public Array2DRowRealMatrix multiply(final Array2DRowRealMatrix m)\n+        throws DimensionMismatchException {\n         MatrixUtils.checkMultiplicationCompatible(this, m);\n \n         final int nRows = this.getRowDimension();\n \n     /** {@inheritDoc} */\n     @Override\n-    public void setSubMatrix(final double[][] subMatrix,\n-                             final int row, final int column) {\n+    public void setSubMatrix(final double[][] subMatrix, final int row,\n+                             final int column)\n+        throws NoDataException, OutOfRangeException,\n+        DimensionMismatchException, NullArgumentException {\n         if (data == null) {\n             if (row > 0) {\n                 throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);\n     }\n \n     /** {@inheritDoc} */\n-    @Override\n-    public double getEntry(final int row, final int column) {\n+    public double getEntry(final int row, final int column)\n+        throws OutOfRangeException {\n         MatrixUtils.checkMatrixIndex(this, row, column);\n         return data[row][column];\n     }\n \n     /** {@inheritDoc} */\n-    @Override\n-    public void setEntry(final int row, final int column, final double value) {\n+    public void setEntry(final int row, final int column, final double value)\n+        throws OutOfRangeException {\n         MatrixUtils.checkMatrixIndex(this, row, column);\n         data[row][column] = value;\n     }\n \n     /** {@inheritDoc} */\n     @Override\n-    public void addToEntry(final int row, final int column, final double increment) {\n+    public void addToEntry(final int row, final int column,\n+                           final double increment)\n+        throws OutOfRangeException {\n         MatrixUtils.checkMatrixIndex(this, row, column);\n         data[row][column] += increment;\n     }\n \n     /** {@inheritDoc} */\n     @Override\n-    public void multiplyEntry(final int row, final int column, final double factor) {\n+    public void multiplyEntry(final int row, final int column,\n+                              final double factor)\n+        throws OutOfRangeException {\n         MatrixUtils.checkMatrixIndex(this, row, column);\n         data[row][column] *= factor;\n     }\n \n     /** {@inheritDoc} */\n     @Override\n-    public double[] operate(final double[] v) {\n+    public double[] operate(final double[] v)\n+        throws DimensionMismatchException {\n         final int nRows = this.getRowDimension();\n         final int nCols = this.getColumnDimension();\n         if (v.length != nCols) {\n \n     /** {@inheritDoc} */\n     @Override\n-    public double[] preMultiply(final double[] v) {\n+    public double[] preMultiply(final double[] v)\n+        throws DimensionMismatchException {\n         final int nRows = getRowDimension();\n         final int nCols = getColumnDimension();\n         if (v.length != nRows) {\n     @Override\n     public double walkInRowOrder(final RealMatrixChangingVisitor visitor,\n                                  final int startRow, final int endRow,\n-                                 final int startColumn, final int endColumn) {\n+                                 final int startColumn, final int endColumn)\n+        throws OutOfRangeException, NumberIsTooSmallException {\n         MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);\n         visitor.start(getRowDimension(), getColumnDimension(),\n                       startRow, endRow, startColumn, endColumn);\n     @Override\n     public double walkInRowOrder(final RealMatrixPreservingVisitor visitor,\n                                  final int startRow, final int endRow,\n-                                 final int startColumn, final int endColumn) {\n+                                 final int startColumn, final int endColumn)\n+        throws OutOfRangeException, NumberIsTooSmallException {\n         MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);\n         visitor.start(getRowDimension(), getColumnDimension(),\n                       startRow, endRow, startColumn, endColumn);\n     @Override\n     public double walkInColumnOrder(final RealMatrixChangingVisitor visitor,\n                                     final int startRow, final int endRow,\n-                                    final int startColumn, final int endColumn) {\n+                                    final int startColumn, final int endColumn)\n+        throws OutOfRangeException, NumberIsTooSmallException {\n         MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);\n         visitor.start(getRowDimension(), getColumnDimension(),\n                       startRow, endRow, startColumn, endColumn);\n     @Override\n     public double walkInColumnOrder(final RealMatrixPreservingVisitor visitor,\n                                     final int startRow, final int endRow,\n-                                    final int startColumn, final int endColumn) {\n+                                    final int startColumn, final int endColumn)\n+        throws OutOfRangeException, NumberIsTooSmallException {\n         MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);\n         visitor.start(getRowDimension(), getColumnDimension(),\n                       startRow, endRow, startColumn, endColumn);\n      * @param in Data to copy.\n      * @throws NoDataException if the input array is empty.\n      * @throws DimensionMismatchException if the input array is not rectangular.\n-     * @throws NullArgumentException if\n-     * the input array is {@code null}.\n+     * @throws NullArgumentException if the input array is {@code null}.\n      */\n     private void copyIn(final double[][] in)\n         throws DimensionMismatchException, NoDataException, NullArgumentException {\n--- a/src/main/java/org/apache/commons/math3/linear/RealMatrix.java\n+++ b/src/main/java/org/apache/commons/math3/linear/RealMatrix.java\n         throws MatrixDimensionMismatchException;\n \n     /**\n-     * Computes {@code this} minus {@code m}.\n+     * Returns {@code this} minus {@code m}.\n      *\n      * @param m matrix to be subtracted\n      * @return {@code this - m}", "timestamp": 1348167045, "metainfo": ""}