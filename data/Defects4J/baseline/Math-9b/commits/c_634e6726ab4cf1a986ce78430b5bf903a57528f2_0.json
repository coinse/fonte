{"sha": "634e6726ab4cf1a986ce78430b5bf903a57528f2", "log": "MATH-795: in RealVectorAbstractTest, refactored unit tests of   - RealVector RealVector.combine(double, double, RealVector),   - RealVector RealVector.combineToSelf(double, double, RealVector).   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n import java.util.Arrays;\n import java.util.Iterator;\n import java.util.NoSuchElementException;\n-import java.util.Random;\n \n import org.apache.commons.math3.TestUtils;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n         }\n     }\n \n+    private void doTestCombine(final boolean inPlace, final boolean mixed) {\n+        final int n = values.length * values.length;\n+        final double[] data1 = new double[n];\n+        final double[] data2 = new double[n];\n+        for (int i = 0; i < values.length; i++) {\n+            for (int j = 0; j < values.length; j++) {\n+                final int index = values.length * i + j;\n+                data1[index] = values[i];\n+                data2[index] = values[j];\n+            }\n+        }\n+        final RealVector v1 = create(data1);\n+        final RealVector v2 = mixed ? createAlien(data2) : create(data2);\n+        final double[] expected = new double[n];\n+        for (int i = 0; i < values.length; i++) {\n+            final double a1 = values[i];\n+            for (int j = 0; j < values.length; j++) {\n+                final double a2 = values[j];\n+                for (int k = 0; k < n; k++) {\n+                    expected[k] = a1 * data1[k] + a2 * data2[k];\n+                }\n+                final RealVector actual;\n+                if (inPlace) {\n+                    final RealVector v1bis = v1.copy();\n+                    actual = v1bis.combineToSelf(a1, a2, v2);\n+                    Assert.assertSame(v1bis, actual);\n+                } else {\n+                    actual = v1.combine(a1, a2, v2);\n+                }\n+                TestUtils.assertEquals(\"a1 = \" + a1 + \", a2 = \" + a2, expected,\n+                    actual, 0.);\n+            }\n+        }\n+    }\n+\n+    private void doTestCombineDimensionMismatch(final boolean inPlace, final boolean mixed) {\n+        final RealVector v1 = create(new double[10]);\n+        final RealVector v2;\n+        if (mixed) {\n+            v2 = createAlien(new double[15]);\n+        } else {\n+            v2 = create(new double[15]);\n+        }\n+        if (inPlace) {\n+            v1.combineToSelf(1.0, 1.0, v2);\n+        } else {\n+            v1.combine(1.0, 1.0, v2);\n+        }\n+    }\n+\n+    @Test\n+    public void testCombineSameType() {\n+        doTestCombine(false, false);\n+    }\n+\n+    @Test\n+    public void testCombineMixedTypes() {\n+        doTestCombine(false, true);\n+    }\n+\n+    @Test(expected = DimensionMismatchException.class)\n+    public void testCombineDimensionMismatchSameType() {\n+        doTestCombineDimensionMismatch(false, false);\n+    }\n+\n+    @Test(expected = DimensionMismatchException.class)\n+    public void testCombineDimensionMismatchMixedTypes() {\n+        doTestCombineDimensionMismatch(false, true);\n+    }\n+\n+    @Test\n+    public void testCombineToSelfSameType() {\n+        doTestCombine(true, false);\n+    }\n+\n+    @Test\n+    public void testCombineToSelfMixedTypes() {\n+        doTestCombine(true, true);\n+    }\n+\n+    @Test(expected = DimensionMismatchException.class)\n+    public void testCombineToSelfDimensionMismatchSameType() {\n+        doTestCombineDimensionMismatch(true, false);\n+    }\n+\n+    @Test(expected = DimensionMismatchException.class)\n+    public void testCombineToSelfDimensionMismatchMixedTypes() {\n+        doTestCombineDimensionMismatch(true, true);\n+    }\n+\n     @Test\n     public void testDataInOut() {\n         final RealVector v1 = create(vec1);\n         v.cosine(w);\n     }\n \n-    @Test(expected=DimensionMismatchException.class)\n-    public void testCombinePreconditionSameType() {\n-        final double a = 1d;\n-        final double b = 2d;\n-        double[] aux = new double[] { 3d, 4d, 5d };\n-        final RealVector x = create(aux);\n-        aux = new double[] { 6d, 7d };\n-        final RealVector y = create(aux);\n-        x.combine(a, b, y);\n-    }\n-\n-    @Test\n-    public void testCombineSameType() {\n-        final Random random = new Random(20110726);\n-        final int dim = 10;\n-        final double a = (2 * random.nextDouble() - 1);\n-        final double b = (2 * random.nextDouble() - 1);\n-        final double[] dataX = new double[dim];\n-        final double[] dataY = new double[dim];\n-        final double[] expected = new double[dim];\n-        for (int i = 0; i < dim; i++) {\n-            dataX[i] = 2 * random.nextDouble() - 1;\n-            dataY[i] = 2 * random.nextDouble() - 1;\n-            expected[i] = a * dataX[i] + b * dataY[i];\n-        }\n-        final RealVector x = create(dataX);\n-        final RealVector y = create(dataY);\n-        final double[] actual = x.combine(a, b, y).toArray();\n-        for (int i = 0; i < dim; i++) {\n-            final double delta;\n-            if (expected[i] == 0d) {\n-                delta = Math.ulp(1d);\n-            } else {\n-                delta = Math.ulp(expected[i]);\n-            }\n-            Assert.assertEquals(\"elements [\" + i + \"] differ\",\n-                                expected[i],\n-                                actual[i],\n-                                delta);\n-        }\n-    }\n-\n-    @Test(expected=DimensionMismatchException.class)\n-    public void testCombinePreconditionMixedType() {\n-        final double a = 1d;\n-        final double b = 2d;\n-        double[] aux = new double[] { 3d, 4d, 5d };\n-        final RealVector x = create(aux);\n-        aux = new double[] { 6d, 7d };\n-        final RealVector y = create(aux);\n-        x.combine(a, b, y);\n-    }\n-\n-    @Test\n-    public void testCombineMixedTypes() {\n-        final Random random = new Random(20110726);\n-        final int dim = 10;\n-        final double a = (2 * random.nextDouble() - 1);\n-        final double b = (2 * random.nextDouble() - 1);\n-        final double[] dataX = new double[dim];\n-        final double[] dataY = new double[dim];\n-        final double[] expected = new double[dim];\n-        for (int i = 0; i < dim; i++) {\n-            dataX[i] = 2 * random.nextDouble() - 1;\n-            dataY[i] = 2 * random.nextDouble() - 1;\n-            expected[i] = a * dataX[i] + b * dataY[i];\n-        }\n-        final RealVector x = create(dataX);\n-        final RealVector y = createAlien(dataY);\n-\n-        final double[] actual = x.combine(a, b, y).toArray();\n-        for (int i = 0; i < dim; i++) {\n-            final double delta;\n-            if (expected[i] == 0d) {\n-                delta = Math.ulp(1d);\n-            } else {\n-                delta = Math.ulp(expected[i]);\n-            }\n-            Assert.assertEquals(\"elements [\" + i + \"] differ\",\n-                                expected[i],\n-                                actual[i],\n-                                delta);\n-        }\n-    }\n-\n-    @Test(expected=DimensionMismatchException.class)\n-    public void testCombineToSelfPreconditionSameType() {\n-        final double a = 1d;\n-        final double b = 2d;\n-        double[] aux = new double[] { 3d, 4d, 5d };\n-        final RealVector x = create(aux);\n-        aux = new double[] { 6d, 7d };\n-        final RealVector y = create(aux);\n-        x.combineToSelf(a, b, y);\n-    }\n-\n-    @Test\n-    public void testCombineToSelfSameType() {\n-        final Random random = new Random(20110726);\n-        final int dim = 10;\n-        final double a = (2 * random.nextDouble() - 1);\n-        final double b = (2 * random.nextDouble() - 1);\n-        final double[] dataX = new double[dim];\n-        final double[] dataY = new double[dim];\n-        final double[] expected = new double[dim];\n-        for (int i = 0; i < dim; i++) {\n-            dataX[i] = 2 * random.nextDouble() - 1;\n-            dataY[i] = 2 * random.nextDouble() - 1;\n-            expected[i] = a * dataX[i] + b * dataY[i];\n-        }\n-        final RealVector x = create(dataX);\n-        final RealVector y = create(dataY);\n-        Assert.assertSame(x, x.combineToSelf(a, b, y));\n-        final double[] actual = x.toArray();\n-        for (int i = 0; i < dim; i++) {\n-            final double delta;\n-            if (expected[i] == 0d) {\n-                delta = Math.ulp(1d);\n-            } else {\n-                delta = Math.ulp(expected[i]);\n-            }\n-            Assert.assertEquals(\"elements [\" + i + \"] differ\",\n-                                expected[i],\n-                                actual[i],\n-                                delta);\n-        }\n-    }\n-\n-    @Test(expected=DimensionMismatchException.class)\n-    public void testCombineToSelfPreconditionMixedType() {\n-        final double a = 1d;\n-        final double b = 2d;\n-        double[] aux = new double[] { 3d, 4d, 5d };\n-        final RealVector x = create(aux);\n-        aux = new double[] { 6d, 7d };\n-        final RealVector y = createAlien(aux);\n-        x.combineToSelf(a, b, y);\n-    }\n-\n-    @Test\n-    public void testCombineToSelfMixedTypes() {\n-        final Random random = new Random(20110726);\n-        final int dim = 10;\n-        final double a = (2 * random.nextDouble() - 1);\n-        final double b = (2 * random.nextDouble() - 1);\n-        final double[] dataX = new double[dim];\n-        final double[] dataY = new double[dim];\n-        final double[] expected = new double[dim];\n-        for (int i = 0; i < dim; i++) {\n-            dataX[i] = 2 * random.nextDouble() - 1;\n-            dataY[i] = 2 * random.nextDouble() - 1;\n-            expected[i] = a * dataX[i] + b * dataY[i];\n-        }\n-        final RealVector x = create(dataX);\n-        final RealVector y = create(dataY);\n-        Assert.assertSame(x, x.combineToSelf(a, b, y));\n-        final double[] actual = x.toArray();\n-        for (int i = 0; i < dim; i++) {\n-            final double delta;\n-            if (expected[i] == 0d) {\n-                delta = Math.ulp(1d);\n-            } else {\n-                delta = Math.ulp(expected[i]);\n-            }\n-            Assert.assertEquals(\"elements [\" + i + \"] differ\",\n-                                expected[i],\n-                                actual[i],\n-                                delta);\n-        }\n-    }\n-\n     /*\n      * TESTS OF THE VISITOR PATTERN\n      */", "timestamp": 1341207970, "metainfo": ""}