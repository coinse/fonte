{"sha": "d7f23ef317b82db42614e5db5a712460ccaa131d", "log": "MATH-428 Added a constructor.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java\n     private final int dimension;\n \n     /**\n-     * Default constructor.\n-     * Build a unit hypercube.\n+     * Build a unit hypercube simplex.\n      *\n      * @param n Dimension of the simplex.\n      */\n     protected AbstractSimplex(int n) {\n-        this(createUnitHypercubeSteps(n));\n+        this(n, 1d);\n+    }\n+\n+    /**\n+     * Build a hypercube simplex with the given side length.\n+     *\n+     * @param n Dimension of the simplex.\n+     * @param sideLength Length of the sides of the hypercube.\n+     */\n+    protected AbstractSimplex(int n,\n+                              double sideLength) {\n+        this(createHypercubeSteps(n, sideLength));\n     }\n \n     /**\n      * Create steps for a unit hypercube.\n      *\n      * @param n Dimension of the hypercube.\n-     * @return unit steps.\n-     */\n-    private static double[] createUnitHypercubeSteps(int n) {\n+     * @param sideLength Length of the sides of the hypercube.\n+     * @return the steps.\n+     */\n+    private static double[] createHypercubeSteps(int n,\n+                                                 double sideLength) {\n         final double[] steps = new double[n];\n         for (int i = 0; i < n; i++) {\n-            steps[i] = 1;\n+            steps[i] = sideLength;\n         }\n         return steps;\n     }", "timestamp": 1288869679, "metainfo": ""}