{"sha": "c483d2519decda566f39204779c00da7c5093a84", "log": "MATH-685 Method \"addToEntry\" in \"RealVector\".   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\n     }\n \n     /** {@inheritDoc} */\n+    public void addToEntry(int index, double increment) {\n+        data[index] += increment;\n+    }\n+\n+    /** {@inheritDoc} */\n     @Override\n     public void setSubVector(int index, RealVector v) {\n         if (v instanceof ArrayRealVector) {\n--- a/src/main/java/org/apache/commons/math/linear/RealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/RealVector.java\n     public abstract void setEntry(int index, double value);\n \n     /**\n+     * Change an entry at the specified index.\n+     *\n+     * @param index Index location of entry to be set.\n+     * @param increment Value to add to the vector entry.\n+     * @throws org.apache.commons.math.exception.OutOfRangeException if\n+     * the index is not valid.\n+     * @since 3.0\n+     */\n+    public void addToEntry(int index, double increment) {\n+        setEntry(index, getEntry(index) + increment);\n+    }\n+\n+    /**\n      * Construct a new vector by appending a vector to this vector.\n      *\n      * @param v vector to append to this one.\n \n             /** {@inheritDoc} */\n             @Override\n+            public void addToEntry(int index, double value) {\n+                throw new MathUnsupportedOperationException();\n+            }\n+\n+            /** {@inheritDoc} */\n+            @Override\n             public int getDimension() {\n                 return v.getDimension();\n             }\n--- a/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java\n         }\n     }\n \n+    @Test\n+    public void testAddToEntry() {\n+        final double[] v = new double[] { 1, 2, 3 };\n+        final ArrayRealVector x = new ArrayRealVector(v);\n+        final double inc = 7;\n+        for (int i = 0; i < x.getDimension(); i++) {\n+            x.addToEntry(i, inc);\n+        }\n+        for (int i = 0; i < x.getDimension(); i++) {\n+            Assert.assertEquals(v[i] + inc, x.getEntry(i), 0);\n+        }\n+    }\n+\n     /** verifies that two vectors are close (sup norm) */\n     protected void assertClose(String msg, double[] m, double[] n,\n             double tolerance) {\n--- a/src/test/java/org/apache/commons/math/linear/RealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/RealVectorTest.java\n                                 actual[i], delta);\n         }\n     }\n+\n+    @Test\n+    public void testAddToEntry() {\n+        final double[] v = new double[] { 1, 2, 3 };\n+        final RealVector x = new TestVectorImpl(v.clone());\n+        final double inc = 7;\n+        for (int i = 0; i < x.getDimension(); i++) {\n+            x.addToEntry(i, inc);\n+        }\n+        for (int i = 0; i < x.getDimension(); i++) {\n+            Assert.assertEquals(v[i] + inc, x.getEntry(i), 0);\n+        }\n+    }\n }\n--- a/src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java\n     static {\n         EXCLUDE.add(\"getEntry\");\n         EXCLUDE.add(\"setEntry\");\n+        EXCLUDE.add(\"addToEntry\");\n         EXCLUDE.add(\"getSubVector\");\n         EXCLUDE.add(\"setSubVector\");\n         EXCLUDE.add(\"iterator\");\n         RealVector v = RealVector.unmodifiableRealVector(u);\n         for (int i = 0; i < DIM; i++) {\n             v.setEntry(i, 0d);\n+        }\n+    }\n+\n+    @Test(expected = MathUnsupportedOperationException.class)\n+    public void testAddToEntry() {\n+        RealVector u = createVector();\n+        RealVector v = RealVector.unmodifiableRealVector(u);\n+        for (int i = 0; i < DIM; i++) {\n+            v.addToEntry(i, 0d);\n         }\n     }\n ", "timestamp": 1318889442, "metainfo": ""}