{"sha": "b1872b6749d527f17cdb58abc66d58f3fcad71d7", "log": "Fixed error in getCumFreq (use custom comparator when one is supplied). Removed tabs.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n import java.util.Comparator;\n import java.text.NumberFormat;\n \n+import org.apache.commons.collections.ComparatorUtils;\n import org.apache.commons.collections.SortedBag;\n import org.apache.commons.collections.TreeBag;\n \n  * The values are ordered using the default (natural order), unless a  <code>Comparator</code>\n  *  is supplied in the constructor.\n  * \n- * @version $Revision: 1.16 $ $Date: 2004/02/22 22:01:29 $\n+ * @version $Revision: 1.17 $ $Date: 2004/03/07 00:54:31 $\n  */\n public class Frequency implements Serializable {\n     \n      * @param comparator Comparator used to order values\n      */\n     public Frequency(Comparator comparator) {\n-    \tfreqTable = new TreeBag(comparator);\n+        freqTable = new TreeBag(comparator);\n     }\n \n     /**\n      * @return a string representation.\n      */\n     public String toString() {\n-    \tNumberFormat nf = NumberFormat.getPercentInstance();\n+        NumberFormat nf = NumberFormat.getPercentInstance();\n         StringBuffer outBuffer = new StringBuffer();\n         outBuffer.append(\"Value \\t Freq. \\t Pct. \\t Cum Pct. \\n\");\n         Iterator iter = freqTable.uniqueSet().iterator();\n      * @param v the value to add.\n      */\n     public void addValue(Object v) {\n-    \ttry {\n-    \t\tfreqTable.add(v);\n-    \t} catch (ClassCastException ex) {\t\n-    \t\t//TreeBag will throw ClassCastException if v is not comparable\n-    \t\tthrow new IllegalArgumentException(\"Value not comparable to existing values.\");\n-    \t}\n+        try {\n+            freqTable.add(v);\n+        } catch (ClassCastException ex) {   \n+            //TreeBag will throw ClassCastException if v is not comparable\n+            throw new IllegalArgumentException(\"Value not comparable to existing values.\");\n+        }\n     }\n \n     /**\n      * @param v the value to add.\n      */\n     public void addValue(char v) {\n-    \taddValue(new Character(v));\n+        addValue(new Character(v));\n     }\n     \n     /** Clears the frequency table */\n     public void clear() {\n-    \tfreqTable.clear();\n+        freqTable.clear();\n     }\n     \n     /**\n      * @return values Iterator\n      */\n     public Iterator valuesIterator() {\n-    \treturn freqTable.uniqueSet().iterator();\n+        return freqTable.uniqueSet().iterator();\n     }\n     \n     //-------------------------------------------------------------------------\n      * @return the total frequency count.\n      */\n     public long getSumFreq() {\n-    \treturn freqTable.size();\n+        return freqTable.size();\n     }\n \n     /**\n      * @return the frequency of v.\n      */\n     public long getCount(Object v) {\n-    \tlong result = 0;\n-    \ttry { \n-    \t\tresult = freqTable.getCount(v);\n-    \t} catch (Exception ex) {\n-    \t\t// ignore and return 0 -- ClassCastException will be thrown if value is not comparable\n-    \t}\n-    \treturn result;\n+        long result = 0;\n+        try { \n+            result = freqTable.getCount(v);\n+        } catch (Exception ex) {\n+            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable\n+        }\n+        return result;\n     }\n \n     /**\n      * @return the frequency of v.\n      */\n     public long getCount(int v) {\n-    \tlong result = 0;\n-    \ttry { \n-    \t\tresult = freqTable.getCount(new Long(v));\n-    \t} catch (Exception ex) {\n-    \t\t// ignore and return 0 -- ClassCastException will be thrown if value is not comparable\n-    \t}\n-    \treturn result;\n+        long result = 0;\n+        try { \n+            result = freqTable.getCount(new Long(v));\n+        } catch (Exception ex) {\n+            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable\n+        }\n+        return result;\n     }\n     \n     /**\n      * @return the frequency of v.\n      */\n     public long getCount(long v) {\n-    \tlong result = 0;\n-    \ttry { \n-    \t\tresult = freqTable.getCount(new Long(v));\n-    \t} catch (Exception ex) {\n-    \t\t// ignore and return 0 -- ClassCastException will be thrown if value is not comparable\n-    \t}\n-    \treturn result;\n+        long result = 0;\n+        try { \n+            result = freqTable.getCount(new Long(v));\n+        } catch (Exception ex) {\n+            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable\n+        }\n+        return result;\n     }\n     \n     /**\n      * @return the frequency of v.\n      */\n     public long getCount(char v) {\n-    \tlong result = 0;\n-    \ttry { \n-    \t\tresult = freqTable.getCount(new Character(v));\n-    \t} catch (Exception ex) {\n-    \t\t// ignore and return 0 -- ClassCastException will be thrown if value is not comparable\n-    \t}\n-    \treturn result;\n+        long result = 0;\n+        try { \n+            result = freqTable.getCount(new Character(v));\n+        } catch (Exception ex) {\n+            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable\n+        }\n+        return result;\n     }\n     \n     //-------------------------------------------------------------\n      * @return the proportion of values equal to v\n      */\n     public double getPct(Object v) {\n-    \treturn (double) getCount(v) / (double) getSumFreq();        \n+        return (double) getCount(v) / (double) getSumFreq();        \n     }\n     \n     /**\n      * @return the proportion of values equal to v\n      */\n     public double getPct(long v) {\n-    \treturn getPct(new Long(v));         \n+        return getPct(new Long(v));         \n     }\n     \n     /**\n      * @return the proportion of values equal to v\n      */\n     public double getPct(char v) {\n-    \treturn getPct(new Character(v));         \n+        return getPct(new Character(v));         \n     }\n     \n     //-----------------------------------------------------------------------------------------\n      * @return the proportion of values equal to v\n      */\n     public long getCumFreq(Object v) {\n-    \tlong result = 0;\n-    \ttry {\n-    \t\tresult = freqTable.getCount(v);\n-    \t} catch (ClassCastException ex) {\n-    \t\treturn result;   // v is not comparable\n-    \t}\n-    \tComparable c = (Comparable) v;\n-    \tif (c.compareTo(freqTable.first()) < 0) {\n-    \t\treturn 0;\t// v is comparable, but less than the first value\n-    \t}\n-    \tif (c.compareTo(freqTable.last()) > 0) {\n-    \t\treturn getSumFreq();\t// v is comparable, but greater than the last value\n-    \t}\n-    \tIterator values = valuesIterator();\n-    \twhile (values.hasNext()) {\n-    \t\tObject nextValue = values.next();\n-    \t\tif (c.compareTo(nextValue) > 0) {\n-    \t\t\tresult += getCount(nextValue);\n-    \t\t} else {\n-    \t\t\treturn result;\n-    \t\t}\n-    \t}\n-    \treturn result;\n+        Comparator c = freqTable.comparator();\n+        if (c == null) {\n+            c = ComparatorUtils.NATURAL_COMPARATOR;\n+        }\n+        long result = 0;\n+        try {\n+            result = freqTable.getCount(v);\n+        } catch (ClassCastException ex) {\n+            return result;   // v is not comparable\n+        }\n+        if (c.compare(v, freqTable.first()) < 0) {\n+            return\n+        System.out.println(\"iterating...\"); 0;   // v is comparable, but less than the first value\n+        }\n+        if (c.compare(v, freqTable.last()) >= 0) {\n+            return getSumFreq();    // v is comparable, but greater than the last value\n+        }\n+        Iterator values = valuesIterator();\n+        while (values.hasNext()) {\n+            Object nextValue = values.next();\n+            if (c.compare(v, nextValue) > 0) {\n+                result += getCount(nextValue);\n+            } else {\n+                return result;\n+            }\n+        }\n+        return result;\n     }\n     \n      /**\n      * @return the proportion of values equal to v\n      */\n     public long getCumFreq(int v) {\n-    \treturn getCumFreq(new Long(v));       \n+        return getCumFreq(new Long(v));       \n     }\n     \n      /**\n      * @return the proportion of values equal to v\n      */\n     public long getCumFreq(long v) {\n-    \treturn getCumFreq(new Long(v));         \n+        return getCumFreq(new Long(v));         \n     }\n     \n     /**\n      * @return the proportion of values equal to v\n      */\n     public long getCumFreq(char v) {\n-    \treturn getCumFreq(new Character(v));         \n+        return getCumFreq(new Character(v));         \n     }\n     \n     //----------------------------------------------------------------------------------------------\n      * @return the proportion of values equal to v\n      */\n     public double getCumPct(Object v) {\n-    \treturn (double) getCumFreq(v) / (double) getSumFreq();        \n+        return (double) getCumFreq(v) / (double) getSumFreq();        \n     }\n     \n     /**\n      * @return the proportion of values equal to v\n      */\n     public double getCumPct(int v) {\n-    \treturn getCumPct(new Long(v));       \n+        return getCumPct(new Long(v));       \n     }\n     \n     /**\n      * @return the proportion of values equal to v\n      */\n     public double getCumPct(long v) {\n-    \treturn getCumPct(new Long(v));         \n+        return getCumPct(new Long(v));         \n     }\n     \n     /**\n      * @return the proportion of values equal to v\n      */\n     public double getCumPct(char v) {\n-    \treturn getCumPct(new Character(v));         \n+        return getCumPct(new Character(v));         \n     }\n }", "timestamp": 1078620871, "metainfo": ""}