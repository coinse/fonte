{"sha": "3a6d84ac3ceba78c196b48a018e25f75b7fbf7a4", "log": "Updated throws declarations for transform package.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/transform/FastCosineTransformer.java\n+++ b/src/main/java/org/apache/commons/math3/transform/FastCosineTransformer.java\n      * @throws MathIllegalArgumentException if the length of the data array is\n      * not a power of two plus one\n      */\n-    public double[] transform(final double[] f, final TransformType type) {\n+    public double[] transform(final double[] f, final TransformType type)\n+      throws MathIllegalArgumentException {\n         if (type == TransformType.FORWARD) {\n             if (normalization == DctNormalization.ORTHOGONAL_DCT_I) {\n                 final double s = FastMath.sqrt(2.0 / (f.length - 1));\n      */\n     public double[] transform(final UnivariateFunction f,\n         final double min, final double max, final int n,\n-        final TransformType type) {\n+        final TransformType type) throws MathIllegalArgumentException {\n \n         final double[] data = FunctionUtils.sample(f, min, max, n);\n         return transform(data, type);\n--- a/src/main/java/org/apache/commons/math3/transform/RealTransformer.java\n+++ b/src/main/java/org/apache/commons/math3/transform/RealTransformer.java\n package org.apache.commons.math3.transform;\n \n import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.exception.MathIllegalArgumentException;\n+import org.apache.commons.math3.exception.NonMonotonicSequenceException;\n+import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n \n /**\n  * <p>Interface for one-dimensional data sets transformations producing real\n      * @param f the real data array to be transformed (signal)\n      * @param type the type of transform (forward, inverse) to be performed\n      * @return the real transformed array (spectrum)\n+     * @throws MathIllegalArgumentException if the array cannot be transformed\n+     * with the given type (this may be for example due to array size, which is\n+     * constrained in some transforms)\n      */\n-    double[] transform(double[] f, TransformType type);\n+    double[] transform(double[] f, TransformType type) throws MathIllegalArgumentException;\n \n     /**\n      * Returns the (forward, inverse) transform of the specified real function,\n      * @param n the number of sample points\n      * @param type the type of transform (forward, inverse) to be performed\n      * @return the real transformed array\n-     * @throws org.apache.commons.math3.exception.NonMonotonicSequenceException\n-     * if the lower bound is greater than, or equal to the upper bound\n-     * @throws org.apache.commons.math3.exception.NotStrictlyPositiveException\n-     * if the number of sample points is negative\n+     * @throws NonMonotonicSequenceException if the lower bound is greater than,\n+     * or equal to the upper bound\n+     * @throws NotStrictlyPositiveException if the number of sample points is negative\n+     * @throws MathIllegalArgumentException if the sample cannot be transformed\n+     * with the given type (this may be for example due to sample size, which is\n+     * constrained in some transforms)\n      */\n-    double[] transform(UnivariateFunction f,\n-            double min, double max, int n,\n-            TransformType type);\n+    double[] transform(UnivariateFunction f, double min, double max, int n,\n+                       TransformType type)\n+        throws NonMonotonicSequenceException, NotStrictlyPositiveException, MathIllegalArgumentException;\n+\n }", "timestamp": 1347288483, "metainfo": ""}