{"sha": "6f8bcd4ec95c1e74fe372f5f1d4ee08d1bc444a7", "log": "Created utility method to assert equality of two instances of RealVector.   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/TestUtils.java\n+++ b/src/test/java/org/apache/commons/math3/TestUtils.java\n import org.apache.commons.math3.distribution.RealDistribution;\n import org.apache.commons.math3.linear.FieldMatrix;\n import org.apache.commons.math3.linear.RealMatrix;\n+import org.apache.commons.math3.linear.RealVector;\n import org.apache.commons.math3.stat.inference.ChiSquareTest;\n import org.apache.commons.math3.util.FastMath;\n import org.apache.commons.math3.util.Precision;\n        assertContains(null, values, x, epsilon);\n     }\n \n+    /**\n+     * Asserts that all entries of the specified vectors are equal to within a\n+     * positive {@code delta}.\n+     *\n+     * @param message the identifying message for the assertion error (can be\n+     * {@code null})\n+     * @param expected expected value\n+     * @param actual actual value\n+     * @param delta the maximum difference between the entries of the expected\n+     * and actual vectors for which both entries are still considered equal\n+     */\n+    public static void assertEquals(final String message,\n+        final RealVector expected, final RealVector actual, final double delta) {\n+        Assert.assertEquals(message + \", dimension\", expected.getDimension(),\n+            actual.getDimension());\n+        final int dim = expected.getDimension();\n+        for (int i = 0; i < dim; i++) {\n+            Assert.assertEquals(message + \", entry #\" + i,\n+                expected.getEntry(i), actual.getEntry(i), delta);\n+        }\n+    }\n+\n     /** verifies that two matrices are close (1-norm) */\n     public static void assertEquals(String msg, RealMatrix expected, RealMatrix observed, double tolerance) {\n \n         }\n         return sumsq;\n     }\n-    \n+\n     /**\n      * Asserts the null hypothesis for a ChiSquare test.  Fails and dumps arguments and test\n      * statistics if the null hypothesis can be rejected with confidence 100 * (1 - alpha)%\n-     * \n+     *\n      * @param valueLabels labels for the values of the discrete distribution under test\n      * @param expected expected counts\n      * @param observed observed counts\n             msgBuffer.append(alpha);\n             msgBuffer.append(\".\");\n             Assert.fail(msgBuffer.toString());\n-        }   \n-    }\n-    \n+        }\n+    }\n+\n     /**\n      * Asserts the null hypothesis for a ChiSquare test.  Fails and dumps arguments and test\n      * statistics if the null hypothesis can be rejected with confidence 100 * (1 - alpha)%\n-     * \n+     *\n      * @param values integer values whose observed and expected counts are being compared\n      * @param expected expected counts\n      * @param observed observed counts\n         }\n         assertChiSquareAccept(labels, expected, observed, alpha);\n     }\n-    \n+\n     /**\n      * Asserts the null hypothesis for a ChiSquare test.  Fails and dumps arguments and test\n      * statistics if the null hypothesis can be rejected with confidence 100 * (1 - alpha)%\n-     * \n+     *\n      * @param expected expected counts\n      * @param observed observed counts\n      * @param alpha significance level of the test\n         }\n         assertChiSquareAccept(labels, expected, observed, alpha);\n     }\n-    \n+\n     /**\n      * Computes the 25th, 50th and 75th percentiles of the given distribution and returns\n      * these values in an array.\n         quantiles[2] = distribution.inverseCumulativeProbability(0.75d);\n         return quantiles;\n     }\n-    \n+\n     /**\n      * Updates observed counts of values in quartiles.\n      * counts[0] <-> 1st quartile ... counts[3] <-> top quartile\n             counts[2]++;\n         } else {\n             counts[1]++;\n-        }  \n-    }\n-    \n+        }\n+    }\n+\n     /**\n      * Eliminates points with zero mass from densityPoints and densityValues parallel\n      * arrays.  Returns the number of positive mass points and collapses the arrays so\n             System.arraycopy(newValues,0,densityValues,0,positiveMassCount);\n         }\n         return positiveMassCount;\n-    } \n+    }\n }", "timestamp": 1338354808, "metainfo": ""}