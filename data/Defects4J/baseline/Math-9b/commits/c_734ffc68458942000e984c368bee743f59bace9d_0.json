{"sha": "734ffc68458942000e984c368bee743f59bace9d", "log": "MATH-883 Added \"getSquareRoot()\" method. Implementation only supports symmetric, diagonalizable matrices.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java\n+++ b/src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java\n     private RealMatrix cachedD;\n     /** Cached value of Vt. */\n     private RealMatrix cachedVt;\n+    /** Whether the matrix is symmetric. */\n+    private final boolean isSymmetric;\n \n     /**\n      * Calculates the eigen decomposition of the given real matrix.\n      */\n     public EigenDecomposition(final RealMatrix matrix)\n         throws MathArithmeticException {\n-        if (isSymmetric(matrix, false)) {\n+        isSymmetric = isSymmetric(matrix, false);\n+        if (isSymmetric) {\n             transformToTridiagonal(matrix);\n             findEigenVectors(transformer.getQ().getData());\n         } else {\n      * @throws MaxCountExceededException if the algorithm fails to converge.\n      */\n     public EigenDecomposition(final double[] main, final double[] secondary) {\n+        isSymmetric = true;\n         this.main      = main.clone();\n         this.secondary = secondary.clone();\n         transformer    = null;\n             determinant *= lambda;\n         }\n         return determinant;\n+    }\n+\n+    /**\n+     * Computes the square-root of the matrix.\n+     * This implementation assumes that the matrix is symmetric and postive\n+     * definite.\n+     *\n+     * @return the square-root of the matrix.\n+     * @throws MathUnsupportedOperationException if the matrix is not\n+     * symmetric or not positive definite.\n+     */\n+    public RealMatrix getSquareRoot() {\n+        if (!isSymmetric) {\n+            throw new MathUnsupportedOperationException();\n+        }\n+\n+        final double[] sqrtEigenValues = new double[realEigenvalues.length];\n+        for (int i = 0; i < realEigenvalues.length; i++) {\n+            final double eigen = realEigenvalues[i];\n+            if (eigen <= 0) {\n+                throw new MathUnsupportedOperationException();\n+            }\n+            sqrtEigenValues[i] = FastMath.sqrt(eigen);\n+        }\n+        final RealMatrix sqrtEigen = MatrixUtils.createRealDiagonalMatrix(sqrtEigenValues);\n+        final RealMatrix v = getV();\n+        final RealMatrix vT = getVT();\n+\n+        return v.multiply(sqrtEigen).multiply(vT);\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java\n import org.apache.commons.math3.distribution.NormalDistribution;\n import org.apache.commons.math3.util.FastMath;\n import org.apache.commons.math3.util.Precision;\n+import org.apache.commons.math3.exception.MathUnsupportedOperationException;\n import org.junit.After;\n import org.junit.Assert;\n import org.junit.Before;\n \n         double norm = v.multiply(d).multiply(vT).subtract(symmetric).getNorm();\n         Assert.assertEquals(0, norm, 6.0e-13);\n+    }\n+\n+    @Test\n+    public void testSquareRoot() {\n+        final double[][] data = {\n+            { 33, 24,  7 },\n+            { 24, 57, 11 },\n+            {  7, 11,  9 }\n+        };\n+\n+        final EigenDecomposition dec = new EigenDecomposition(MatrixUtils.createRealMatrix(data));\n+        final RealMatrix sqrtM = dec.getSquareRoot();\n+\n+        // Reconstruct initial matrix.\n+        final RealMatrix m = sqrtM.multiply(sqrtM);\n+\n+        final int dim = data.length;\n+        for (int r = 0; r < dim; r++) {\n+            for (int c = 0; c < dim; c++) {\n+                Assert.assertEquals(\"m[\" + r + \"][\" + c + \"]\",\n+                                    data[r][c], m.getEntry(r, c), 1e-13);\n+            }\n+        }\n+    }\n+\n+    @Test(expected=MathUnsupportedOperationException.class)\n+    public void testSquareRootNonSymmetric() {\n+        final double[][] data = {\n+            { 1,  2, 4 },\n+            { 2,  3, 5 },\n+            { 11, 5, 9 }\n+        };\n+\n+        final EigenDecomposition dec = new EigenDecomposition(MatrixUtils.createRealMatrix(data));\n+        final RealMatrix sqrtM = dec.getSquareRoot();\n+    }\n+\n+    @Test(expected=MathUnsupportedOperationException.class)\n+    public void testSquareRootNonPositiveDefinite() {\n+        final double[][] data = {\n+            { 1, 2,  4 },\n+            { 2, 3,  5 },\n+            { 4, 5, -9 }\n+        };\n+\n+        final EigenDecomposition dec = new EigenDecomposition(MatrixUtils.createRealMatrix(data));\n+        final RealMatrix sqrtM = dec.getSquareRoot();\n     }\n \n     @Test", "timestamp": 1351556946, "metainfo": ""}