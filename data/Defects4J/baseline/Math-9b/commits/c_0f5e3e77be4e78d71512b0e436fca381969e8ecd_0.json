{"sha": "0f5e3e77be4e78d71512b0e436fca381969e8ecd", "log": "Added and used a specialized exception for arguments outside domains  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/ArgumentOutsideDomainException.java\n+package org.apache.commons.math;\n+\n+public class ArgumentOutsideDomainException extends FunctionEvaluationException {\n+\n+    /** Serializable version identifier. */\n+    private static final long serialVersionUID = -4965972841162580234L;\n+\n+    /**\n+     * Constructs an exception with specified formatted detail message.\n+     * Message formatting is delegated to {@link java.text.MessageFormat}.\n+     * @param argument  the failing function argument \n+     * @param lower lower bound of the domain\n+     * @param upper upper bound of the domain\n+     */\n+    public ArgumentOutsideDomainException(double argument, double lower, double upper) {\n+        super(argument,\n+              \"Argument {0} outside domain [{1} ; {2}]\",\n+              new Object[] { new Double(argument), new Double(lower), new Double(upper) });\n+    }\n+\n+}\n--- a/src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java\n import java.io.Serializable;\n import java.util.Arrays;\n \n-import org.apache.commons.math.FunctionEvaluationException;\n+import org.apache.commons.math.ArgumentOutsideDomainException;\n \n /**\n  * Represents a polynomial spline function.\n  */\n public class PolynomialSplineFunction \n     implements DifferentiableUnivariateRealFunction, Serializable {\n-   \n+\n     /** Serializable version identifier */\n-    private static final long serialVersionUID = 7011031166416885789L;\n-    \n+    private static final long serialVersionUID = 1619940313389547244L;\n+\n     /** Spline segment interval delimiters (knots).   Size is n+1 for n segments. */\n     private double knots[];\n \n      * \n      * @param v the point for which the function value should be computed\n      * @return the value\n-     * @throws FunctionEvaluationException if v is outside of the domain of\n+     * @throws ArgumentOutsideDomainException if v is outside of the domain of\n      * of the spline function (less than the smallest knot point or greater\n      * than the largest knot point)\n      */\n-    public double value(double v) throws FunctionEvaluationException {\n+    public double value(double v) throws ArgumentOutsideDomainException {\n         if (v < knots[0] || v > knots[n]) {\n-            throw new FunctionEvaluationException(v,\"Argument outside domain\");\n+            throw new ArgumentOutsideDomainException(v, knots[0], knots[n]);\n         }\n         int i = Arrays.binarySearch(knots, v);\n         if (i < 0) {\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/ArgumentOutsideDomainExceptionTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math;\n+\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision:$\n+ */\n+public class ArgumentOutsideDomainExceptionTest extends TestCase {\n+    \n+    public void testConstructor(){\n+        ArgumentOutsideDomainException ex = new ArgumentOutsideDomainException(Math.PI, 10.0, 20.0);\n+        assertNull(ex.getCause());\n+        assertNotNull(ex.getMessage());\n+        assertTrue(ex.getMessage().indexOf(\"3.14\") > 0);\n+        assertEquals(Math.PI, ex.getArgument(), 0);\n+        assertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));\n+    }\n+    \n+}", "timestamp": 1171308537, "metainfo": ""}