{"sha": "37064526036889ab5206776b0913a37ef6006f76", "log": "PR: http://nagoya.apache.org/bugzilla/show_bug.cgi?id=23010 Submitted by:\t Brent Worden  Reviewed by:\tMark Diggory   ", "commit": "\n--- a/src/java/org/apache/commons/math/distribution/BinomialDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/BinomialDistribution.java\n  * The Binomial Distribution.\n  * \n  * Instances of BinomialDistribution objects should be created using\n- * {@link DistributionFactory#createBinomailDistribution(int, double)}.\n+ * {@link DistributionFactory#createBinomialDistribution(int, double)}.\n  * \n  * References:\n  * <ul>\n  * Binomial Distribution</a></li>\n  * </ul>\n  * \n- * @version $Revision: 1.1 $ $Date: 2003/08/16 17:06:15 $\n+ * @version $Revision: 1.2 $ $Date: 2003/09/17 19:19:08 $\n  */\n public interface BinomialDistribution extends DiscreteDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n+++ b/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n+\n package org.apache.commons.math.stat.distribution;\n \n /**\n  * ChiSquaredDistribution chi = factory.createChiSquareDistribution(5.0);\n  * </pre>\n  * \n- * @version $Revision: 1.10 $ $Date: 2003/08/16 17:06:15 $\n+ * @version $Revision: 1.11 $ $Date: 2003/09/17 19:19:08 $\n  */\n public abstract class DistributionFactory {\n     /**\n      * @param probabilityOfSuccess the probability of success.\n      * @return a new binomial distribution.\n      */\n-    public abstract BinomialDistribution createBinomailDistribution(\n+    public abstract BinomialDistribution createBinomialDistribution(\n         int numberOfTrials, double probabilityOfSuccess);\n         \n     /**\n      * @return a new t distribution.  \n      */\n     public abstract TDistribution createTDistribution(double degreesOfFreedom);\n+    \n+    /**\n+     * Create a new hypergeometric distribution with the given the population\n+     * size, the number of successes in the population, and the sample size.\n+     * @param populationSize the population size.\n+     * @param numberOfSuccesses number of successes in the population.\n+     * @param sampleSize the sample size.\n+     * @return a new hypergeometric desitribution.\n+     */\n+    public abstract HypergeometricDistribution\n+        createHypergeometricDistribution(int populationSize,\n+            int numberOfSuccesses, int sampleSize);\n }\n--- a/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java\n  * A concrete distribution factory.  This is the default factory used by\n  * Commons-Math.\n  *  \n- * @version $Revision: 1.8 $ $Date: 2003/08/16 17:06:15 $\n+ * @version $Revision: 1.9 $ $Date: 2003/09/17 19:19:08 $\n  */\n public class DistributionFactoryImpl extends DistributionFactory {\n     /**\n      * @param probabilityOfSuccess the probability of success.\n      * @return a new binomial distribution.\n      */\n-    public BinomialDistribution createBinomailDistribution(\n+    public BinomialDistribution createBinomialDistribution(\n         int numberOfTrials, double probabilityOfSuccess) {\n         return new BinomialDistributionImpl(numberOfTrials,\n             probabilityOfSuccess);\n     }\n \n+    /**\n+     * Create a new hypergeometric distribution with the given the population\n+     * size, the number of successes in the population, and the sample size.\n+     * @param populationSize the population size.\n+     * @param numberOfSuccesses number of successes in the population.\n+     * @param sampleSize the sample size.\n+     * @return a new hypergeometric desitribution.\n+     */\n+    public HypergeometricDistribution createHypergeometricDistribution(\n+        int populationSize,\n+        int numberOfSuccesses,\n+        int sampleSize)\n+    {\n+        return new HypergeometricDistributionImpl(populationSize,\n+            numberOfSuccesses, sampleSize);\n+    }\n+\n }\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.stat.distribution;\n+\n+/**\n+ * The Hypergeometric Distribution.\n+ * \n+ * Instances of HypergeometricDistribution objects should be created using\n+ * {@link DistributionFactory#createHypergeometricDistribution(int, int, int)}.\n+ * \n+ * References:\n+ * <ul>\n+ * <li><a href=\"http://mathworld.wolfram.com/HypergeometricDistribution.html\">\n+ * Hypergeometric Distribution</a></li>\n+ * </ul>\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2003/09/17 19:19:08 $\n+ */\n+public interface HypergeometricDistribution extends DiscreteDistribution {\n+    /**\n+     * Access the number of successes.\n+     * @return the number of successes.\n+     */\n+    public abstract int getNumberOfSuccesses();\n+    \n+    /**\n+     * Access the population size.\n+     * @return the population size.\n+     */\n+    public abstract int getPopulationSize();\n+    \n+    /**\n+     * Access the sample size.\n+     * @return the sample size.\n+     */\n+    public abstract int getSampleSize();\n+    \n+    /**\n+     * Modify the number of successes.\n+     * @param num the new number of successes.\n+     */\n+    public abstract void setNumberOfSuccesses(int num);\n+    \n+    /**\n+     * Modify the population size.\n+     * @param size the new population size.\n+     */\n+    public abstract void setPopulationSize(int size);\n+    \n+    /**\n+     * Modify the sample size.\n+     * @param size the new sample size.\n+     */\n+    public abstract void setSampleSize(int size);\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.stat.distribution;\n+\n+import org.apache.commons.math.util.MathUtils;\n+\n+/**\n+ * The default implementation of {@link HypergeometricDistribution}.\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2003/09/17 19:19:08 $\n+ */\n+public class HypergeometricDistributionImpl extends AbstractDiscreteDistribution\n+    implements HypergeometricDistribution\n+{\n+\n+    /** The number of successes in the population. */\n+    private int numberOfSuccesses;\n+    \n+    /** The population size. */\n+    private int populationSize;\n+    \n+    /** The sample size. */\n+    private int sampleSize;\n+    \n+    /**\n+     * Construct a new hypergeometric distribution with the given the population\n+     * size, the number of successes in the population, and the sample size.\n+     * @param populationSize the population size.\n+     * @param numberOfSuccesses number of successes in the population.\n+     * @param sampleSize the sample size.\n+     */\n+    public HypergeometricDistributionImpl(int populationSize,\n+        int numberOfSuccesses, int sampleSize)\n+    {\n+        super();\n+        setPopulationSize(populationSize);\n+        setSampleSize(sampleSize);\n+        setNumberOfSuccesses(numberOfSuccesses);\n+    }\n+\n+    /**\n+     * For this disbution, X, this method returns P(X &le; x).\n+     * @param x the value at which the PDF is evaluated.\n+     * @return PDF for this distribution. \n+     */\n+    public double cummulativeProbability(int x) {\n+        double ret;\n+        \n+        int n = getPopulationSize();\n+        int m = getNumberOfSuccesses();\n+        int k = getSampleSize();\n+\n+        int[] domain = getDomain(n, m, k);\n+        if (x < domain[0]) {\n+            ret = 0.0;\n+        } else if(x >= domain[1]) {\n+            ret = 1.0;\n+        } else {\n+            ret = 0.0;\n+            for (int i = domain[0]; i <= x; ++i){\n+                ret += probability(n, m, k, i);\n+            }\n+        }\n+        \n+        return ret;\n+    }\n+\n+    /**\n+     * Return the domain for the given hypergeometric distribution parameters.\n+     * @param n the population size.\n+     * @param m number of successes in the population.\n+     * @param k the sample size.\n+     * @return a two element array containing the lower and upper bounds of the\n+     *         hypergeometric distribution.  \n+     */\n+    private int[] getDomain(int n, int m, int k){\n+        return new int[]{\n+            getLowerDomain(n, m, k),\n+            getUpperDomain(m, k)\n+        };\n+    }\n+    \n+    /**\n+     * Access the domain value lower bound, based on <code>p</code>, used to\n+     * bracket a PDF root.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value lower bound, i.e.\n+     *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n+     */\n+    protected int getDomainLowerBound(double p) {\n+        return getLowerDomain(getPopulationSize(), getNumberOfSuccesses(),\n+            getSampleSize());\n+    }\n+    \n+    /**\n+     * Access the domain value upper bound, based on <code>p</code>, used to\n+     * bracket a PDF root.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value upper bound, i.e.\n+     *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n+     */\n+    protected int getDomainUpperBound(double p) {\n+        return getUpperDomain(getSampleSize(), getNumberOfSuccesses());\n+    }\n+\n+    /**\n+     * Return the lowest domain value for the given hypergeometric distribution\n+     * parameters.\n+     * @param n the population size.\n+     * @param m number of successes in the population.\n+     * @param k the sample size.\n+     * @return the lowest domain value of the hypergeometric distribution.  \n+     */\n+    private int getLowerDomain(int n, int m, int k) {\n+        return Math.max(0, m - (n - k));\n+    }\n+\n+    /**\n+     * Access the number of successes.\n+     * @return the number of successes.\n+     */\n+    public int getNumberOfSuccesses() {\n+        return numberOfSuccesses;\n+    }\n+\n+    /**\n+     * Access the population size.\n+     * @return the population size.\n+     */\n+    public int getPopulationSize() {\n+        return populationSize;\n+    }\n+\n+    /**\n+     * Access the sample size.\n+     * @return the sample size.\n+     */\n+    public int getSampleSize() {\n+        return sampleSize;\n+    }\n+\n+    /**\n+     * Return the highest domain value for the given hypergeometric distribution\n+     * parameters.\n+     * @param m number of successes in the population.\n+     * @param k the sample size.\n+     * @return the highest domain value of the hypergeometric distribution.  \n+     */\n+    private int getUpperDomain(int m, int k){\n+        return Math.min(k, m);\n+    }\n+\n+    /**\n+     * For this disbution, X, this method returns P(X = x).\n+     * @param x the value at which the PMF is evaluated.\n+     * @return PMF for this distribution. \n+     */\n+    public double probability(int x) {\n+        double ret;\n+        \n+        int n = getPopulationSize();\n+        int m = getNumberOfSuccesses();\n+        int k = getSampleSize();\n+\n+        int[] domain = getDomain(n, m, k);\n+        if(x < domain[0] || x > domain[1]){\n+            ret = 0.0;\n+        } else {\n+            ret = probability(n, m, k, x);\n+        }\n+        \n+        return ret;\n+    }\n+\n+    /**\n+     * For the disbution, X, defined by the given hypergeometric distribution\n+     * parameters, this method returns P(X = x).\n+     * @param n the population size.\n+     * @param m number of successes in the population.\n+     * @param k the sample size.\n+     * @param x the value at which the PMF is evaluated.\n+     * @return PMF for the distribution. \n+     */\n+    private double probability(int n, int m, int k, int x) {\n+        return Math.exp(MathUtils.binomialCoefficientLog(m, x) +\n+            MathUtils.binomialCoefficientLog(n - m, k - x) -\n+            MathUtils.binomialCoefficientLog(n, k));\n+    }\n+    \n+    /**\n+     * Modify the number of successes.\n+     * @param num the new number of successes.\n+     */\n+    public void setNumberOfSuccesses(int num) {\n+        if(num < 0){\n+            throw new IllegalArgumentException(\n+                \"number of successes must be non-negative.\");\n+        }\n+        numberOfSuccesses = num;\n+    }\n+\n+    /**\n+     * Modify the population size.\n+     * @param size the new population size.\n+     */\n+    public void setPopulationSize(int size) {\n+        if(size <= 0){\n+            throw new IllegalArgumentException(\n+                \"population size must be positive.\");\n+        }\n+        populationSize = size;\n+    }\n+\n+    /**\n+     * Modify the sample size.\n+     * @param size the new sample size.\n+     */\n+    public void setSampleSize(int size) {\n+        if(size < 0){\n+            throw new IllegalArgumentException(\n+                \"sample size must be non-negative.\");\n+        }\n+        sampleSize = size;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/Applyable.java\n+/*\n+ * Created on Jul 15, 2003\n+ *\n+ */\n+package org.apache.commons.math.stat;\n+\n+import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n+\n+/**\n+ * Applyable.java\n+ * \n+ * To change the template for this generated type comment go to\n+ * Window>Preferences>Java>Code Generation>Code and Comments\n+ * \n+ */\n+public interface Applyable {\n+    \n+    /**\n+     * Applies a UnivariateStatistic object against this object \n+     * and returns the result.\n+     * @param stat The stat to apply.\n+     * @return The result value of the application.\n+     */\n+    double apply(UnivariateStatistic stat);\n+    \n+}\n--- a/src/java/org/apache/commons/math/stat/Univariate.java\n+++ b/src/java/org/apache/commons/math/stat/Univariate.java\n  * reported statistics will be based on these values<p>\n  * The default windowSize is \"infinite\" -- i.e., all values added are included\n  * in all computations.\n- * @version $Revision: 1.8 $ $Date: 2003/07/09 21:45:23 $\n+ * @version $Revision: 1.9 $ $Date: 2003/09/17 19:19:09 $\n */\n-public interface Univariate {\n+public interface Univariate extends Applyable{\n     /**\n      * A LEPTOKURTIC set has a positive kurtosis (a high peak) \n      */\n--- a/src/java/org/apache/commons/math/util/BeanTransformer.java\n+++ b/src/java/org/apache/commons/math/util/BeanTransformer.java\n \n import java.lang.reflect.InvocationTargetException;\n import org.apache.commons.beanutils.PropertyUtils;\n+import org.apache.commons.math.MathException;\n \n /**\n  * Uses PropertyUtils to map a Bean getter to a double value.\n- * @version $Revision: 1.4 $ $Date: 2003/08/09 04:03:41 $\n+ * @version $Revision: 1.5 $ $Date: 2003/09/17 19:19:09 $\n  */\n public class BeanTransformer implements NumberTransformer {\n \n     /**\n      * @see org.apache.commons.math.util.NumberTransformer#transform(java.lang.Object)\n      */\n-    public double transform(final Object o) {\n+    public double transform(final Object o) throws MathException {\n         double d = Double.NaN;\n         try {\n             d =\n                 ((Number) PropertyUtils.getProperty(o, propertyName))\n                     .doubleValue();\n         } catch (IllegalAccessException e) {\n-            e.printStackTrace();\n+            throw new MathException(e.getMessage(),e);\n         } catch (InvocationTargetException e) {\n-            e.printStackTrace();\n+            throw new MathException(e.getMessage(),e);\n         } catch (NoSuchMethodException e) {\n-            e.printStackTrace();\n+            throw new MathException(e.getMessage(),e);\n         }\n         return d;\n     }\n--- a/src/java/org/apache/commons/math/util/NumberTransformer.java\n+++ b/src/java/org/apache/commons/math/util/NumberTransformer.java\n  */\n package org.apache.commons.math.util;\n \n+import org.apache.commons.math.MathException;\n+\n /**\n  * Subclasses implementing this interface can transform Objects to doubles.\n- * @version $Revision: 1.3 $ $Date: 2003/07/09 20:04:12 $\n+ * @version $Revision: 1.4 $ $Date: 2003/09/17 19:19:09 $\n  */\n public interface NumberTransformer {\n     \n      * @param o the Object to be transformed.\n      * @return the double value of the Object.\n      */\n-    double transform(Object o);\n+    double transform(Object o) throws MathException;\n }\n--- a/src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java\n      */\n     protected void setUp() throws Exception {\n         super.setUp();\n-        b = DistributionFactory.newInstance().createBinomailDistribution(10, 0.70);\n+        b = DistributionFactory.newInstance().createBinomialDistribution(10, 0.70);\n     }\n \n     /*\n--- a/src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java\n+++ b/src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java\n     \n     public void testBinomialDistributionNegativePositive(){\n         try {\n-            factory.createBinomailDistribution(-1, 0.5);\n+            factory.createBinomialDistribution(-1, 0.5);\n             fail(\"negative number of trials.  IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex ) {\n         }\n     \n     public void testBinomialDistributionZeroPositive(){\n         try {\n-            factory.createBinomailDistribution(0, 0.5);\n+            factory.createBinomialDistribution(0, 0.5);\n         } catch (IllegalArgumentException ex ) {\n             fail(\"zero number of trials.  IllegalArgumentException is not expected\");\n         }\n     \n     public void testBinomialDistributionPositivePositive(){\n         try {\n-            factory.createBinomailDistribution(10, 0.5);\n+            factory.createBinomialDistribution(10, 0.5);\n         } catch (IllegalArgumentException ex ) {\n             fail(\"positive number of trials.  IllegalArgumentException is not expected\");\n         }\n     \n     public void testBinomialDistributionPositiveNegative(){\n         try {\n-            factory.createBinomailDistribution(10, -0.5);\n+            factory.createBinomialDistribution(10, -0.5);\n             fail(\"negative probability of success.  IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex ) {\n         }\n     \n     public void testBinomialDistributionPositiveZero(){\n         try {\n-            factory.createBinomailDistribution(10, 0.0);\n+            factory.createBinomialDistribution(10, 0.0);\n         } catch (IllegalArgumentException ex ) {\n             fail(\"zero probability of success.  IllegalArgumentException is not expected\");\n         }\n     \n     public void testBinomialDistributionPositiveOne(){\n         try {\n-            factory.createBinomailDistribution(10, 1.0);\n+            factory.createBinomialDistribution(10, 1.0);\n         } catch (IllegalArgumentException ex ) {\n             fail(\"valid probability of success.  IllegalArgumentException is not expected\");\n         }\n     \n     public void testBinomialDistributionPositiveTwo(){\n         try {\n-            factory.createBinomailDistribution(10, 2.0);\n+            factory.createBinomialDistribution(10, 2.0);\n             fail(\"high probability of success.  IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex ) {\n         }\n     }\n+    \n+    public void testHypergeometricDistributionNegativePositivePositive(){\n+        try {\n+            factory.createHypergeometricDistribution(-1, 10, 10);\n+            fail(\"negative population size.  IllegalArgumentException expected\");\n+        } catch(IllegalArgumentException ex) {\n+        }\n+    }\n+    \n+    public void testHypergeometricDistributionZeroPositivePositive(){\n+        try {\n+            factory.createHypergeometricDistribution(0, 10, 10);\n+            fail(\"zero population size.  IllegalArgumentException expected\");\n+        } catch(IllegalArgumentException ex) {\n+        }\n+    }\n+    \n+    public void testHypergeometricDistributionPositiveNegativePositive(){\n+        try {\n+            factory.createHypergeometricDistribution(20, -1, 10);\n+            fail(\"negative number of successes.  IllegalArgumentException expected\");\n+        } catch(IllegalArgumentException ex) {\n+        }\n+    }\n+    \n+    public void testHypergeometricDistributionPositiveZeroPositive(){\n+        try {\n+            factory.createHypergeometricDistribution(20, 0, 10);\n+        } catch(IllegalArgumentException ex) {\n+            fail(\"valid number of successes.  IllegalArgumentException is not expected\");\n+        }\n+    }\n+    \n+    public void testHypergeometricDistributionPositivePositiveNegative(){\n+        try {\n+            factory.createHypergeometricDistribution(20, 10, -1);\n+            fail(\"negative sample size.  IllegalArgumentException expected\");\n+        } catch(IllegalArgumentException ex) {\n+        }\n+    }\n+    \n+    public void testHypergeometricDistributionPositivePositiveZero(){\n+        try {\n+            factory.createHypergeometricDistribution(20, 10, 0);\n+        } catch(IllegalArgumentException ex) {\n+            fail(\"valid sample size.  IllegalArgumentException is not expected\");\n+        }\n+    }\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.stat.distribution;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/09/17 19:19:09 $\n+ */\n+public class HypergeometricDistributionTest extends TestCase {\n+    private HypergeometricDistribution h;\n+    \n+    /**\n+     * Constructor for ChiSquareDistributionTest.\n+     * @param name\n+     */\n+    public HypergeometricDistributionTest(String name) {\n+        super(name);\n+    }\n+\n+    /*\n+     * @see TestCase#setUp()\n+     */\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        h = DistributionFactory.newInstance().createHypergeometricDistribution(10, 5, 5);\n+    }\n+\n+    /*\n+     * @see TestCase#tearDown()\n+     */\n+    protected void tearDown() throws Exception {\n+        h = null;\n+        super.tearDown();\n+    }\n+\n+    public void testInverseCummulativeProbability001() {\n+        testValue(-1, .001);\n+    }\n+    \n+    public void testInverseCumulativeProbability010() {\n+        testValue(0, .010);\n+    }\n+    \n+    public void testInverseCumulativeProbability025() {\n+        testValue(0, .025);\n+    }\n+\n+    public void testInverseCumulativeProbability050() {\n+        testValue(0, .050);\n+    }\n+    \n+    public void testInverseCumulativeProbability100() {\n+        testValue(0, .100);\n+    }\n+\n+    public void testInverseCummulativeProbability999() {\n+        testValue(4, .999);\n+    }\n+    \n+    public void testInverseCumulativeProbability990() {\n+        testValue(3, .990);\n+    }\n+    \n+    public void testInverseCumulativeProbability975() {\n+        testValue(3, .975);\n+    }\n+\n+    public void testInverseCumulativeProbability950() {\n+        testValue(3, .950);\n+    }\n+    \n+    public void testInverseCumulativeProbability900() {\n+        testValue(3, .900);\n+    }\n+\n+    public void testCummulativeProbability0() {\n+        testProbability(0, .00400);\n+    }\n+\n+    public void testCummulativeProbability1() {\n+        testProbability(1, .10318);\n+    }\n+    \n+    public void testCumulativeProbability2() {\n+        testProbability(2, .50000);\n+    }\n+    \n+    public void testCumulativeProbability3() {\n+        testProbability(3, .89683);\n+    }\n+\n+    public void testCumulativeProbability4() {\n+        testProbability(4, .99603);\n+    }\n+    \n+    public void testCumulativeProbability5() {\n+        testProbability(5, 1.00000);\n+    }\n+\n+    private void testProbability(int x, double expected){\n+        double actual = h.cummulativeProbability(x);\n+        assertEquals(expected, actual, 10e-4);\n+    }\n+    \n+    private void testValue(int expected, double p){\n+        int actual = h.inverseCummulativeProbability(p);\n+        assertEquals(expected, actual);\n+        assertTrue(h.cummulativeProbability(actual) <= p);\n+        assertTrue(h.cummulativeProbability(actual + 1) >= p);\n+    }\n+}", "timestamp": 1063826349, "metainfo": ""}