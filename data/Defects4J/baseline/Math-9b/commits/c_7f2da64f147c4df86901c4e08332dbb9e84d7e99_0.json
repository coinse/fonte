{"sha": "7f2da64f147c4df86901c4e08332dbb9e84d7e99", "log": "New constructor and \"canIncrement\" method.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/util/Incrementor.java\n+++ b/src/main/java/org/apache/commons/math/util/Incrementor.java\n     private int count;\n \n     /**\n+     * Default constructor.\n+     * For the new instance to be useful, the maximal count must be set\n+     * by calling {@link #setMaximalCount(int) setMaximalCount}.\n+     */\n+    public Incrementor() {\n+        this(0);\n+    }\n+\n+    /**\n+     * Defines a maximal count.\n+     *\n+     * @param max Maximal count.\n+     */\n+    public Incrementor(int max) {\n+        maximalCount = max;\n+        count = 0;\n+    }\n+\n+    /**\n      * Set the upper limit for the counter.\n+     * This does not automatically reset the current count to zero (see\n+     * {@link #resetCount()}).\n      *\n      * @param max Upper limit of the counter.\n      */\n      */\n     public int getCount() {\n         return count;\n+    }\n+\n+    /**\n+     * Check whether a single increment is allowed.\n+     *\n+     * @return {@code false} if the next call to {@link #incrementCount(int)\n+     * incrementCount} will trigger a {@code MaxCountExceededException},\n+     * {@code true} otherwise.\n+     */\n+    public boolean canIncrement() {\n+        return count < maximalCount;\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/math/util/IncrementorTest.java\n+++ b/src/test/java/org/apache/commons/math/util/IncrementorTest.java\n  * Test for {@link Incrementor}.\n  */\n public class IncrementorTest {\n+    @Test\n+    public void testConstructor1() {\n+        final Incrementor i = new Incrementor();\n+        Assert.assertEquals(0, i.getMaximalCount());\n+        Assert.assertEquals(0, i.getCount());\n+    }\n+\n+    @Test\n+    public void testConstructor2() {\n+        final Incrementor i = new Incrementor(10);\n+        Assert.assertEquals(10, i.getMaximalCount());\n+        Assert.assertEquals(0, i.getCount());\n+    }\n+\n+    @Test\n+    public void testCanIncrement1() {\n+        final Incrementor i = new Incrementor(3);\n+        Assert.assertTrue(i.canIncrement());\n+        i.incrementCount();\n+        Assert.assertTrue(i.canIncrement());\n+        i.incrementCount();\n+        Assert.assertTrue(i.canIncrement());\n+        i.incrementCount();\n+        Assert.assertFalse(i.canIncrement());\n+    }\n+\n+    @Test\n+    public void testCanIncrement2() {\n+        final Incrementor i = new Incrementor(3);\n+        while (i.canIncrement()) {\n+            i.incrementCount();\n+        }\n+\n+        // Must keep try/catch because the exception must be generated here,\n+        // and not in the previous loop.\n+        try {\n+            i.incrementCount();\n+            Assert.fail(\"MaxCountExceededException expected\");\n+        } catch (MaxCountExceededException e) {\n+            // Expected.\n+        }\n+    }\n \n     @Test\n     public void testAccessor() {\n         Assert.assertEquals(3, i.getCount());\n     }\n \n-    @Test(expected = MaxCountExceededException.class)\n+    @Test(expected=MaxCountExceededException.class)\n     public void testAboveMaxCount() {\n         final Incrementor i = new Incrementor();\n ", "timestamp": 1315605517, "metainfo": ""}