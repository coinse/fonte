{"sha": "3f892d9e5957dca9312d5a72c6930fae62625da9", "log": "Added JavaDoc to the Complex class, still more work to be done.   ", "commit": "\n--- a/src/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/java/org/apache/commons/math/complex/Complex.java\n import java.io.Serializable;\n \n /**\n- * Reference:\n- *   http://myweb.lmu.edu/dmsmith/ZMLIB.pdf\n- * \n- * @version $Revision: 1.6 $ $Date: 2004/02/21 21:35:14 $\n+ * Representation of a Complex number - a number which has both a \n+ * real and imaginary part.\n+ * \n+ * @author Apache Software Foundation\n+ * @version $Revision: 1.7 $ $Date: 2004/02/29 19:52:01 $\n  */\n public class Complex implements Serializable  {\n \n-    /** The square root of -1. */    \n+    /** The square root of -1. A number representing \"0.0 + 1.0i\".*/    \n     public static final Complex I = new Complex(0.0, 1.0);\n     \n-    /** */\n+    /** A complex number representing \"(Double.NaN) + (Double.NaN)i\" */\n     public static final Complex NaN = new Complex(Double.NaN, Double.NaN);\n \n-    /** 1. */    \n+    /** A complex number representing \"1.0 + 0.0i\" */    \n     public static final Complex ONE = new Complex(1.0, 0.0);\n     \n     /** The imaginary part. */\n     \n     /**\n      * Create a complex number given the real and imaginary parts.\n+     *\n      * @param real the real part.\n      * @param imaginary the imaginary part.\n      */\n \n     /**\n      * Return the absolute value of this complex number.\n+     *\n      * @return the absolute value.\n      */\n     public double abs() {\n     \n     /**\n      * Return the sum of this complex number and the given complex number.\n+     *\n      * @param rhs the other complex number.\n      * @return the complex number sum.\n      */\n     }\n     \n     /**\n-     * Return the conjugate of this complex number.\n-     * @return the conjugate.\n+     * Return the conjugate of this complex number.  The conjugate of\n+     * \"A + Bi\" is \"A - Bi\".  Complex.NaN is returned if either the real or imaginary part of \n+     * this Complex number equals Double.NaN.\n+     *\n+     * @return the conjugate of this Complex object\n      */\n     public Complex conjugate() {\n         if (isNaN()) {\n     }\n     \n     /**\n+     * Test for the equality of two Complex objects.  If both the\n+     * real and imaginary parts of two Complex numbers are exactly\n+     * the same, the two Complex objects are considered to be equal.\n+     *\n+     * @param other Object to test for equality to this\n+     * @return true if two Complex objects are equal, false if\n+     *         object is null, not an instance of Complex, or\n+     *         not equal to this Complex instance.\n      * \n      */\n     public boolean equals(Object other) {\n \n     /**\n      * Access the imaginary part.\n+     *\n      * @return the imaginary part.\n      */\n     public double getImaginary() {\n \n     /**\n      * Access the real part.\n+     *\n      * @return the real part.\n      */\n     public double getReal() {\n     /**\n      * Returns true if this complex number is the special Not-a-Number (NaN)\n      * value.\n+     *\n      * @return true if the value represented by this object is NaN; false\n      *         otherwise.\n      */\n     \n     /**\n      * Return the product of this complex number and the given complex number.\n+     *\n      * @param rhs the other complex number.\n      * @return the complex number product.\n      */\n     \n     /**\n      * Return the additive inverse of this complex number.\n+     *\n      * @return the negation of this complex number.\n      */\n     public Complex negate() {\n     \n     /**\n      * Return the sum of the squared terms.\n+     *\n      * @return the square sum.\n      */\n     private double squareSum() {\n     /**\n      * Return the difference between this complex number and the given complex\n      * number.\n+     *\n      * @param rhs the other complex number.\n      * @return the complex number difference.\n      */", "timestamp": 1078084321, "metainfo": ""}