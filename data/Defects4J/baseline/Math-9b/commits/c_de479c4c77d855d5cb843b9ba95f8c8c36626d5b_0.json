{"sha": "de479c4c77d855d5cb843b9ba95f8c8c36626d5b", "log": "Added equals and hash methods for comparing / hashing double values.   ", "commit": "\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n /**\n  * Some useful additions to the built-in functions in {@link Math}.\n  *\n- * @version $Revision: 1.17 $ $Date: 2004/05/19 14:16:32 $\n+ * @version $Revision: 1.18 $ $Date: 2004/06/17 21:31:00 $\n  */\n public final class MathUtils {\n     \n     public static double sinh(double x) {\n         return (Math.exp(x) - Math.exp(-x)) / 2.0;\n     }\n+    \n+    /**\n+     * Returns an integer hash code representing the given double value.\n+     *\n+     * @param value  the value to be hashed\n+     * @return the hash code\n+     */\n+    public static int hash(double value) {\n+        long bits = Double.doubleToLongBits(value);\n+        return (int)(bits ^ (bits >>> 32));\n+    }\n+    \n+    /**\n+     * Returns true iff both arguments are NaN or\n+     * neither is NaN and they are equal\n+     *\n+     * @param x first value\n+     * @param y second value\n+     * @return true if the values are equal or both are NaN\n+     */\n+    public static boolean equals(double x, double y) {\n+        return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);\n+    }\n }\n--- a/src/test/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/org/apache/commons/math/util/MathUtilsTest.java\n /**\n  * Test cases for the MathUtils class.\n  *\n- * @version $Revision: 1.13 $ $Date: 2004/05/09 04:36:09 $\n+ * @version $Revision: 1.14 $ $Date: 2004/06/17 21:31:00 $\n  */\n \n public final class MathUtilsTest extends TestCase {\n     \n     public void testSinhNaN() {\n         assertTrue(Double.isNaN(MathUtils.sinh(Double.NaN)));\n-    }   \n+    } \n+    \n+    public void testEquals() {\n+        double[] testArray = {Double.NaN, Double.POSITIVE_INFINITY, \n+                Double.NEGATIVE_INFINITY, 1d, 0d};\n+        for (int i = 0; i < testArray.length; i++) {\n+            for (int j = 0; j < testArray.length; j ++) {\n+                if (i == j) {\n+                    assertTrue(MathUtils.equals(testArray[i], testArray[j]));\n+                    assertTrue(MathUtils.equals(testArray[j], testArray[i]));\n+                } else {\n+                    assertTrue(!MathUtils.equals(testArray[i], testArray[j]));\n+                    assertTrue(!MathUtils.equals(testArray[j], testArray[i]));\n+                }\n+            }\n+        } \n+    }\n+    \n+    public void testHash() {\n+        double[] testArray = {Double.NaN, Double.POSITIVE_INFINITY, \n+                Double.NEGATIVE_INFINITY, 1d, 0d, 1E-14, (1 + 1E-14), \n+                Double.MIN_VALUE, Double.MAX_VALUE};\n+        for (int i = 0; i < testArray.length; i++) {\n+            for (int j = 0; j < testArray.length; j ++) {\n+                if (i == j) {\n+                    assertEquals(MathUtils.hash(testArray[i]), MathUtils.hash(testArray[j]));\n+                    assertEquals(MathUtils.hash(testArray[j]), MathUtils.hash(testArray[i]));\n+                } else {\n+                    assertTrue(MathUtils.hash(testArray[i]) != MathUtils.hash(testArray[j]));\n+                    assertTrue(MathUtils.hash(testArray[j]) != MathUtils.hash(testArray[i]));\n+                }\n+            }\n+        } \n+    }\n }", "timestamp": 1087507860, "metainfo": ""}