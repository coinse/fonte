{"sha": "f3d9ac637dbe56de11f0ea97cde4fd0b83bc8233", "log": "added conversion utility functions for   FieldMatrix<Fraction> to RealMatrix   FieldMatrix<BigFraction> to RealMatrix  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/MatrixUtils.java\n+++ b/src/java/org/apache/commons/math/linear/MatrixUtils.java\n import org.apache.commons.math.Field;\n import org.apache.commons.math.FieldElement;\n import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.fraction.BigFraction;\n+import org.apache.commons.math.fraction.Fraction;\n \n /**\n  * A collection of static methods that operate on or return matrices.\n         }\n     }\n \n+    /**\n+     * Convert a {@link FieldMatrix}/{@link Fraction} matrix to a {@link RealMatrix}.\n+     * @param m matrix to convert\n+     * @return converted matrix\n+     */\n+    public static RealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m) {\n+        final FractionMatrixConverter converter = new FractionMatrixConverter();\n+        m.walkInOptimizedOrder(converter);\n+        return converter.getConvertedMatrix();\n+    }\n+\n+    /** Converter for {@link FieldMatrix}/{@link Fraction}. */\n+    private static class FractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<Fraction> {\n+\n+        /** Converted array. */\n+        private double[][] data;\n+\n+        /** Simple constructor. */\n+        public FractionMatrixConverter() {\n+            super(Fraction.ZERO);\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override\n+        public void start(int rows, int columns,\n+                          int startRow, int endRow, int startColumn, int endColumn) {\n+            data = new double[rows][columns];\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override\n+        public void visit(int row, int column, Fraction value) {\n+            data[row][column] = value.doubleValue();\n+        }\n+\n+        /** Get the converted matrix.\n+         * @return converted matrix\n+         */\n+        RealMatrix getConvertedMatrix() {\n+            return new RealMatrixImpl(data, false);\n+        }\n+\n+    }\n+\n+    /**\n+     * Convert a {@link FieldMatrix}/{@link BigFraction} matrix to a {@link RealMatrix}.\n+     * @param m matrix to convert\n+     * @return converted matrix\n+     */\n+    public static RealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m) {\n+        final BigFractionMatrixConverter converter = new BigFractionMatrixConverter();\n+        m.walkInOptimizedOrder(converter);\n+        return converter.getConvertedMatrix();\n+    }\n+\n+    /** Converter for {@link FieldMatrix}/{@link BigFraction}. */\n+    private static class BigFractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<BigFraction> {\n+\n+        /** Converted array. */\n+        private double[][] data;\n+\n+        /** Simple constructor. */\n+        public BigFractionMatrixConverter() {\n+            super(BigFraction.ZERO);\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override\n+        public void start(int rows, int columns,\n+                          int startRow, int endRow, int startColumn, int endColumn) {\n+            data = new double[rows][columns];\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override\n+        public void visit(int row, int column, BigFraction value) {\n+            data[row][column] = value.doubleValue();\n+        }\n+\n+        /** Get the converted matrix.\n+         * @return converted matrix\n+         */\n+        RealMatrix getConvertedMatrix() {\n+            return new RealMatrixImpl(data, false);\n+        }\n+\n+    }\n+\n }\n--- a/src/test/org/apache/commons/math/linear/MatrixUtilsTest.java\n+++ b/src/test/org/apache/commons/math/linear/MatrixUtilsTest.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.apache.commons.math.fraction.BigFraction;\n import org.apache.commons.math.fraction.Fraction;\n import org.apache.commons.math.fraction.FractionConversionException;\n import org.apache.commons.math.fraction.FractionField;\n         }\n     }\n \n+    public void testBigFractionConverter() {\n+        BigFraction[][] bfData = {\n+                { new BigFraction(1), new BigFraction(2), new BigFraction(3) },\n+                { new BigFraction(2), new BigFraction(5), new BigFraction(3) },\n+                { new BigFraction(1), new BigFraction(0), new BigFraction(8) }\n+        };\n+        FieldMatrix<BigFraction> m = new FieldMatrixImpl<BigFraction>(bfData, false);\n+        RealMatrix converted = MatrixUtils.bigFractionMatrixToRealMatrix(m);\n+        RealMatrix reference = new RealMatrixImpl(testData, false);\n+        assertEquals(0.0, converted.subtract(reference).getNorm(), 0.0);\n+    }\n+\n+    public void testFractionConverter() {\n+        Fraction[][] fData = {\n+                { new Fraction(1), new Fraction(2), new Fraction(3) },\n+                { new Fraction(2), new Fraction(5), new Fraction(3) },\n+                { new Fraction(1), new Fraction(0), new Fraction(8) }\n+        };\n+        FieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(fData, false);\n+        RealMatrix converted = MatrixUtils.fractionMatrixToRealMatrix(m);\n+        RealMatrix reference = new RealMatrixImpl(testData, false);\n+        assertEquals(0.0, converted.subtract(reference).getNorm(), 0.0);\n+    }\n+\n     public static final Fraction[][] asFraction(double[][] data) {\n         Fraction d[][] = new Fraction[data.length][];\n         try {", "timestamp": 1243708578, "metainfo": ""}