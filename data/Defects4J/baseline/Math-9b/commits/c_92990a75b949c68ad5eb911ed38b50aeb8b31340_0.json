{"sha": "92990a75b949c68ad5eb911ed38b50aeb8b31340", "log": "added new seeding methods for random generators this will allow implementing some modern and efficient generators that require a lots of bits for seeding in the form of complete integer arrays  ", "commit": "\n--- a/src/java/org/apache/commons/math/random/AbstractRandomGenerator.java\n+++ b/src/java/org/apache/commons/math/random/AbstractRandomGenerator.java\n     public void clear() {\n         cachedNormalDeviate = Double.NaN;\n     }\n-    \n+\n+    /** {@inheritDoc} */\n+    public void setSeed(int seed) {\n+        setSeed((long) seed);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public void setSeed(int[] seed) {\n+        // the following number is the largest prime that fits in 32 bits (it is 2^32 - 5)\n+        final long prime = 4294967291l;\n+\n+        long combined = 0l;\n+        for (int s : seed) {\n+            combined = combined * prime + s;\n+        }\n+        setSeed(combined);\n+    }\n+\n     /**\n      * Sets the seed of the underyling random number generator using a \n      * <code>long</code> seed.  Sequences of values generated starting with the\n--- a/src/java/org/apache/commons/math/random/JDKRandomGenerator.java\n+++ b/src/java/org/apache/commons/math/random/JDKRandomGenerator.java\n  * @version $Revision$ $Date$\n  */\n public class JDKRandomGenerator extends Random implements RandomGenerator {\n-    /** Serializable version identifier */\n-    private static final long serialVersionUID = -3561898582944940550L;\n+\n+    /** Serializable version identifier. */\n+    private static final long serialVersionUID = -7745277476784028798L;\n+\n+    /** {@inheritDoc} */\n+    public void setSeed(int seed) {\n+        setSeed((long) seed);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public void setSeed(int[] seed) {\n+        // the following number is the largest prime that fits in 32 bits (it is 2^32 - 5)\n+        final long prime = 4294967291l;\n+\n+        long combined = 0l;\n+        for (int s : seed) {\n+            combined = combined * prime + s;\n+        }\n+        setSeed(combined);\n+    }\n+\n }\n--- a/src/java/org/apache/commons/math/random/RandomAdaptor.java\n+++ b/src/java/org/apache/commons/math/random/RandomAdaptor.java\n  */\n public class RandomAdaptor extends Random implements RandomGenerator {\n     \n-    /** Serializable version identifier */\n-    private static final long serialVersionUID = 2570805822599485047L;\n+    /** Serializable version identifier. */\n+    private static final long serialVersionUID = 2306581345647615033L;\n \n     /** Wrapped randomGenerator instance */\n     private RandomGenerator randomGenerator = null;\n         return randomGenerator.nextLong();\n     }\n \n-    /**\n-     * Sets the seed of the underyling random number generator using a \n-     * <code>long</code> seed.  Sequences of values generated starting with the\n-     * same seeds should be identical.\n-     *\n-     * @param seed the seed value\n-     */\n+    /** {@inheritDoc} */\n+    public void setSeed(int seed) {\n+        if (randomGenerator != null) {  // required to avoid NPE in constructor\n+            randomGenerator.setSeed(seed);\n+        }\n+    }\n+\n+    /** {@inheritDoc} */\n+    public void setSeed(int[] seed) {\n+        if (randomGenerator != null) {  // required to avoid NPE in constructor\n+            randomGenerator.setSeed(seed);\n+        }\n+    }\n+\n+    /** {@inheritDoc} */\n     @Override\n     public void setSeed(long seed) {\n         if (randomGenerator != null) {  // required to avoid NPE in constructor\n             randomGenerator.setSeed(seed);\n         }\n     }\n+\n }\n--- a/src/java/org/apache/commons/math/random/RandomGenerator.java\n+++ b/src/java/org/apache/commons/math/random/RandomGenerator.java\n public interface RandomGenerator {\n     \n     /**\n-     * Sets the seed of the underyling random number generator using a \n-     * <code>long</code> seed.  Sequences of values generated starting with the\n-     * same seeds should be identical.\n-     *\n+     * Sets the seed of the underyling random number generator using an\n+     * <code>int</code> seed.\n+     * <p>Sequences of values generated starting with the same seeds\n+     * should be identical.\n+     * </p>\n+     * @param seed the seed value\n+     */\n+    void setSeed(int seed);\n+\n+    /**\n+     * Sets the seed of the underyling random number generator using an\n+     * <code>int</code> array seed.\n+     * <p>Sequences of values generated starting with the same seeds\n+     * should be identical.\n+     * </p>\n+     * @param seed the seed value\n+     */\n+    void setSeed(int[] seed);\n+    \n+    /**\n+     * Sets the seed of the underyling random number generator using a\n+     * <code>long</code> seed.\n+     * <p>Sequences of values generated starting with the same seeds\n+     * should be identical.\n+     * </p>\n      * @param seed the seed value\n      */\n     void setSeed(long seed);\n--- a/src/test/org/apache/commons/math/random/RandomAdaptorTest.java\n+++ b/src/test/org/apache/commons/math/random/RandomAdaptorTest.java\n             return 0;\n         }\n \n+        public void setSeed(int seed) {\n+        }\n+        \n+        public void setSeed(int[] seed) {\n+        }\n+\n         public void setSeed(long seed) {\n-        }       \n+        }\n+\n     }\n }", "timestamp": 1248211958, "metainfo": ""}