{"sha": "efa7825880d8c1c7411e51c5e21df6a004b78a3b", "log": "Removed remnants of junit 3.  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java\n import java.util.Iterator;\n import java.util.Random;\n \n-import junit.framework.Assert;\n-\n import org.apache.commons.math.analysis.UnivariateFunction;\n import org.apache.commons.math.analysis.function.Sin;\n import org.apache.commons.math.exception.MathUnsupportedOperationException;\n import org.apache.commons.math.linear.RealVector.Entry;\n+import org.junit.Assert;\n import org.junit.Test;\n \n /**\n--- a/src/test/java/org/apache/commons/math/optimization/BatteryNISTTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/BatteryNISTTest.java\n package org.apache.commons.math.optimization;\n \n import java.util.Arrays;\n-import junit.framework.Assert;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.analysis.DifferentiableMultivariateFunction;\n import org.apache.commons.math.optimization.general.ConjugateGradientFormula;\n import org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizer;\n import org.apache.commons.math.util.FastMath;\n+import org.junit.Assert;\n import org.junit.Test;\n \n /**\n--- a/src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java\n+++ b/src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java\n  */\n package org.apache.commons.math.random;\n \n-import junit.framework.TestCase;\n-\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.stat.StatUtils;\n import org.apache.commons.math.stat.descriptive.DescriptiveStatistics;\n+import org.junit.Assert;\n+import org.junit.Test;\n \n /**\n  * The class <code>StableRandomGeneratorTest</code> contains tests for the class\n  * \n  * @version $Revision$\n  */\n-public class StableRandomGeneratorTest extends TestCase {\n+public class StableRandomGeneratorTest {\n \n     private RandomGenerator rg = new Well19937c(100);\n     private final static int sampleSize = 10000;\n-\n-    /**\n-     * Construct new test instance\n-     * \n-     * @param name the test name\n-     */\n-    public StableRandomGeneratorTest(String name) {\n-        super(name);\n-    }\n \n     /**\n      * Run the double nextDouble() method test Due to leptokurtic property the\n      * \n      * TODO: verify that tolerance this wide is really OK\n      */\n+    @Test\n     public void testNextDouble() {\n         StableRandomGenerator generator = new StableRandomGenerator(rg, 1.3,\n                 0.1);\n         for (int i = 0; i < sample.length; ++i) {\n             sample[i] = generator.nextNormalizedDouble();\n         }\n-        assertEquals(0.0, StatUtils.mean(sample), 0.3);\n+        Assert.assertEquals(0.0, StatUtils.mean(sample), 0.3);\n     }\n \n     /**\n      * If alpha = 2, than it must be Gaussian distribution\n      */\n+    @Test\n     public void testGaussianCase() {\n         StableRandomGenerator generator = new StableRandomGenerator(rg, 2d, 0.0);\n \n         for (int i = 0; i < sample.length; ++i) {\n             sample[i] = generator.nextNormalizedDouble();\n         }\n-        assertEquals(0.0, StatUtils.mean(sample), 0.02);\n-        assertEquals(1.0, StatUtils.variance(sample), 0.02);\n+        Assert.assertEquals(0.0, StatUtils.mean(sample), 0.02);\n+        Assert.assertEquals(1.0, StatUtils.variance(sample), 0.02);\n     }\n \n     /**\n      * If alpha = 1, than it must be Cauchy distribution\n      */\n+    @Test\n     public void testCauchyCase() {\n         StableRandomGenerator generator = new StableRandomGenerator(rg, 1d, 0.0);\n         DescriptiveStatistics summary = new DescriptiveStatistics();\n \n         // Standard Cauchy distribution should have zero median and mode\n         double median = summary.getPercentile(50);\n-        assertEquals(0.0, median, 0.2);\n+        Assert.assertEquals(0.0, median, 0.2);\n     }\n \n     /**\n      * Input parameter range tests\n      */\n+    @Test\n     public void testAlphaRangeBelowZero() {\n         try {\n             new StableRandomGenerator(rg,\n                     -1.0, 0.0);\n-            fail(\"Expected OutOfRangeException\");\n+            Assert.fail(\"Expected OutOfRangeException\");\n         } catch (OutOfRangeException e) {\n-            assertEquals(-1.0, e.getArgument());\n+            Assert.assertEquals(-1.0, e.getArgument());\n         }\n     }\n \n+    @Test\n     public void testAlphaRangeAboveTwo() {\n         try {\n             new StableRandomGenerator(rg,\n                     3.0, 0.0);\n-            fail(\"Expected OutOfRangeException\");\n+            Assert.fail(\"Expected OutOfRangeException\");\n         } catch (OutOfRangeException e) {\n-            assertEquals(3.0, e.getArgument());\n+            Assert.assertEquals(3.0, e.getArgument());\n         }\n     }\n \n+    @Test\n     public void testBetaRangeBelowMinusOne() {\n         try {\n             new StableRandomGenerator(rg,\n                     1.0, -2.0);\n-            fail(\"Expected OutOfRangeException\");\n+            Assert.fail(\"Expected OutOfRangeException\");\n         } catch (OutOfRangeException e) {\n-            assertEquals(-2.0, e.getArgument());\n+            Assert.assertEquals(-2.0, e.getArgument());\n         }\n     }\n \n+    @Test\n     public void testBetaRangeAboveOne() {\n         try {\n             new StableRandomGenerator(rg,\n                     1.0, 2.0);\n-            fail(\"Expected OutOfRangeException\");\n+            Assert.fail(\"Expected OutOfRangeException\");\n         } catch (OutOfRangeException e) {\n-            assertEquals(2.0, e.getArgument());\n+            Assert.assertEquals(2.0, e.getArgument());\n         }\n     }\n }\n--- a/src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java\n  */\n package org.apache.commons.math.stat.regression;\n \n-import junit.framework.Assert;\n-\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.stat.correlation.PearsonsCorrelation;\n import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.util.FastMath;\n+import org.junit.Assert;\n import org.junit.Test;\n-import static org.junit.Assert.*;\n \n /**\n  * MillerUpdatingRegression tests.\n     public void testHasIntercept() {\n         MillerUpdatingRegression instance = new MillerUpdatingRegression(10, false);\n         if (instance.hasIntercept()) {\n-            fail(\"Should not have intercept\");\n+            Assert.fail(\"Should not have intercept\");\n         }\n         instance = new MillerUpdatingRegression(10, true);\n         if (!instance.hasIntercept()) {\n-            fail(\"Should have intercept\");\n+            Assert.fail(\"Should have intercept\");\n         }\n     }\n \n         }\n         instance.addObservations(xAll, y);\n         if (instance.getN() != xAll.length) {\n-            fail(\"Number of observations not correct in bulk addition\");\n+            Assert.fail(\"Number of observations not correct in bulk addition\");\n         }\n         instance.clear();\n         for (int i = 0; i < xAll.length; i++) {\n             instance.addObservation(xAll[i], y[i]);\n         }\n         if (instance.getN() != xAll.length) {\n-            fail(\"Number of observations not correct in drip addition\");\n+            Assert.fail(\"Number of observations not correct in drip addition\");\n         }\n         return;\n     }\n         MillerUpdatingRegression instance = new MillerUpdatingRegression(3, true);\n         try {\n             instance.addObservation(new double[]{1.0}, 0.0);\n-            fail(\"Should throw IllegalArgumentException\");\n+            Assert.fail(\"Should throw IllegalArgumentException\");\n         } catch (IllegalArgumentException iae) {\n         } catch (Exception e) {\n-            fail(\"Should throw IllegalArgumentException\");\n+            Assert.fail(\"Should throw IllegalArgumentException\");\n         }\n         try {\n             instance.addObservation(new double[]{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, 0.0);\n-            fail(\"Should throw IllegalArgumentException\");\n+            Assert.fail(\"Should throw IllegalArgumentException\");\n         } catch (IllegalArgumentException iae) {\n         } catch (Exception e) {\n-            fail(\"Should throw IllegalArgumentException\");\n+            Assert.fail(\"Should throw IllegalArgumentException\");\n         }\n         try {\n             instance.addObservation(new double[]{1.0, 1.0, 1.0}, 0.0);\n         } catch (Exception e) {\n-            fail(\"Should throw IllegalArgumentException\");\n+            Assert.fail(\"Should throw IllegalArgumentException\");\n         }\n \n         //now we try it without an intercept\n         instance = new MillerUpdatingRegression(3, false);\n         try {\n             instance.addObservation(new double[]{1.0}, 0.0);\n-            fail(\"Should throw IllegalArgumentException [NOINTERCEPT]\");\n+            Assert.fail(\"Should throw IllegalArgumentException [NOINTERCEPT]\");\n         } catch (IllegalArgumentException iae) {\n         } catch (Exception e) {\n-            fail(\"Should throw IllegalArgumentException [NOINTERCEPT]\");\n+            Assert.fail(\"Should throw IllegalArgumentException [NOINTERCEPT]\");\n         }\n         try {\n             instance.addObservation(new double[]{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, 0.0);\n-            fail(\"Should throw IllegalArgumentException [NOINTERCEPT]\");\n+            Assert.fail(\"Should throw IllegalArgumentException [NOINTERCEPT]\");\n         } catch (IllegalArgumentException iae) {\n         } catch (Exception e) {\n-            fail(\"Should throw IllegalArgumentException [NOINTERCEPT]\");\n+            Assert.fail(\"Should throw IllegalArgumentException [NOINTERCEPT]\");\n         }\n         try {\n             instance.addObservation(new double[]{1.0, 1.0, 1.0}, 0.0);\n         } catch (Exception e) {\n-            fail(\"Should throw IllegalArgumentException [NOINTERCEPT]\");\n+            Assert.fail(\"Should throw IllegalArgumentException [NOINTERCEPT]\");\n         }\n     }\n \n             double[] y = {1.0};\n             instance.addObservations(tst, y);\n \n-            fail(\"Should throw IllegalArgumentException\");\n+            Assert.fail(\"Should throw IllegalArgumentException\");\n         } catch (IllegalArgumentException iae) {\n         } catch (Exception e) {\n-            fail(\"Should throw IllegalArgumentException\");\n+            Assert.fail(\"Should throw IllegalArgumentException\");\n         }\n \n         try {\n             double[] y = {1.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0};\n             instance.addObservations(tst, y);\n \n-            fail(\"Should throw IllegalArgumentException\");\n+            Assert.fail(\"Should throw IllegalArgumentException\");\n         } catch (IllegalArgumentException iae) {\n         } catch (Exception e) {\n-            fail(\"Should throw IllegalArgumentException\");\n+            Assert.fail(\"Should throw IllegalArgumentException\");\n         }\n     }\n \n \n             TestUtils.assertEquals(0.01552839, result.getMeanSquareError(), 1.0e-8);\n         } catch (Exception e) {\n-            fail(\"Should not throw exception but does\");\n+            Assert.fail(\"Should not throw exception but does\");\n         }\n     }\n \n             TestUtils.assertEquals(0.9883, result.getRSquared(), 1.0e-4);\n             TestUtils.assertEquals(0.01552839, result.getMeanSquareError(), 1.0e-8);\n         } catch (Exception e) {\n-            fail(\"Should not throw exception but does\");\n+            Assert.fail(\"Should not throw exception but does\");\n         }\n     }\n \n //        instance.addObservations(x, y);\n //        RegressionResults result = instance.regress();\n //        if (result == null) {\n-//            fail(\"Null result....\");\n+//            Assert.fail(\"Null result....\");\n //        }\n //\n //        instance.reorderRegressors(new int[]{3, 2}, 0);\n //        double[] beta = result.getParameterEstimates();\n //        double[] betar = resultInverse.getParameterEstimates();\n //        if (Math.abs(beta[0] - betar[0]) > 1.0e-14) {\n-//            fail(\"Parameters not correct after reorder (0,3)\");\n+//            Assert.fail(\"Parameters not correct after reorder (0,3)\");\n //        }\n //        if (Math.abs(beta[1] - betar[1]) > 1.0e-14) {\n-//            fail(\"Parameters not correct after reorder (1,2)\");\n+//            Assert.fail(\"Parameters not correct after reorder (1,2)\");\n //        }\n //        if (Math.abs(beta[2] - betar[2]) > 1.0e-14) {\n-//            fail(\"Parameters not correct after reorder (2,1)\");\n+//            Assert.fail(\"Parameters not correct after reorder (2,1)\");\n //        }\n //        if (Math.abs(beta[3] - betar[3]) > 1.0e-14) {\n-//            fail(\"Parameters not correct after reorder (3,0)\");\n+//            Assert.fail(\"Parameters not correct after reorder (3,0)\");\n //        }\n //    }\n \n \n         for (int i = 0; i < beta.length; i++) {\n             if (Math.abs(beta[i] - betar[i]) > 1.0e-8) {\n-                fail(\"Parameters not correctly estimated\");\n+                Assert.fail(\"Parameters not correctly estimated\");\n             }\n             if (Math.abs(se[i] - ser[i]) > 1.0e-8) {\n-                fail(\"Standard errors not correctly estimated\");\n+                Assert.fail(\"Standard errors not correctly estimated\");\n             }\n             for (int j = 0; j < i; j++) {\n                 if (Math.abs(result.getCovarianceOfParameters(i, j)\n                         - resultRedundant.getCovarianceOfParameters(i, j)) > 1.0e-8) {\n-                    fail(\"Variance Covariance not correct\");\n+                    Assert.fail(\"Variance Covariance not correct\");\n                 }\n             }\n         }\n         double[] ser = resultRedundant.getStdErrorOfEstimates();\n \n         if (Math.abs(beta[0] - betar[0]) > 1.0e-8) {\n-            fail(\"Parameters not correct after reorder (0,3)\");\n+            Assert.fail(\"Parameters not correct after reorder (0,3)\");\n         }\n         if (Math.abs(beta[1] - betar[2]) > 1.0e-8) {\n-            fail(\"Parameters not correct after reorder (1,2)\");\n+            Assert.fail(\"Parameters not correct after reorder (1,2)\");\n         }\n         if (Math.abs(beta[2] - betar[3]) > 1.0e-8) {\n-            fail(\"Parameters not correct after reorder (2,1)\");\n+            Assert.fail(\"Parameters not correct after reorder (2,1)\");\n         }\n         if (Math.abs(beta[3] - betar[5]) > 1.0e-8) {\n-            fail(\"Parameters not correct after reorder (3,0)\");\n+            Assert.fail(\"Parameters not correct after reorder (3,0)\");\n         }\n \n         if (Math.abs(se[0] - ser[0]) > 1.0e-8) {\n-            fail(\"Se not correct after reorder (0,3)\");\n+            Assert.fail(\"Se not correct after reorder (0,3)\");\n         }\n         if (Math.abs(se[1] - ser[2]) > 1.0e-8) {\n-            fail(\"Se not correct after reorder (1,2)\");\n+            Assert.fail(\"Se not correct after reorder (1,2)\");\n         }\n         if (Math.abs(se[2] - ser[3]) > 1.0e-8) {\n-            fail(\"Se not correct after reorder (2,1)\");\n+            Assert.fail(\"Se not correct after reorder (2,1)\");\n         }\n         if (Math.abs(se[3] - ser[5]) > 1.0e-8) {\n-            fail(\"Se not correct after reorder (3,0)\");\n+            Assert.fail(\"Se not correct after reorder (3,0)\");\n         }\n \n         if (Math.abs(result.getCovarianceOfParameters(0, 0)\n                 - resultRedundant.getCovarianceOfParameters(0, 0)) > 1.0e-8) {\n-            fail(\"VCV not correct after reorder (0,0)\");\n+            Assert.fail(\"VCV not correct after reorder (0,0)\");\n         }\n         if (Math.abs(result.getCovarianceOfParameters(0, 1)\n                 - resultRedundant.getCovarianceOfParameters(0, 2)) > 1.0e-8) {\n-            fail(\"VCV not correct after reorder (0,1)<->(0,2)\");\n+            Assert.fail(\"VCV not correct after reorder (0,1)<->(0,2)\");\n         }\n         if (Math.abs(result.getCovarianceOfParameters(0, 2)\n                 - resultRedundant.getCovarianceOfParameters(0, 3)) > 1.0e-8) {\n-            fail(\"VCV not correct after reorder (0,2)<->(0,1)\");\n+            Assert.fail(\"VCV not correct after reorder (0,2)<->(0,1)\");\n         }\n         if (Math.abs(result.getCovarianceOfParameters(0, 3)\n                 - resultRedundant.getCovarianceOfParameters(0, 5)) > 1.0e-8) {\n-            fail(\"VCV not correct after reorder (0,3)<->(0,3)\");\n+            Assert.fail(\"VCV not correct after reorder (0,3)<->(0,3)\");\n         }\n         if (Math.abs(result.getCovarianceOfParameters(1, 0)\n                 - resultRedundant.getCovarianceOfParameters(2, 0)) > 1.0e-8) {\n-            fail(\"VCV not correct after reorder (1,0)<->(2,0)\");\n+            Assert.fail(\"VCV not correct after reorder (1,0)<->(2,0)\");\n         }\n         if (Math.abs(result.getCovarianceOfParameters(1, 1)\n                 - resultRedundant.getCovarianceOfParameters(2, 2)) > 1.0e-8) {\n-            fail(\"VCV not correct  (1,1)<->(2,1)\");\n+            Assert.fail(\"VCV not correct  (1,1)<->(2,1)\");\n         }\n         if (Math.abs(result.getCovarianceOfParameters(1, 2)\n                 - resultRedundant.getCovarianceOfParameters(2, 3)) > 1.0e-8) {\n-            fail(\"VCV not correct  (1,2)<->(2,2)\");\n+            Assert.fail(\"VCV not correct  (1,2)<->(2,2)\");\n         }\n \n         if (Math.abs(result.getCovarianceOfParameters(2, 0)\n                 - resultRedundant.getCovarianceOfParameters(3, 0)) > 1.0e-8) {\n-            fail(\"VCV not correct  (2,0)<->(1,0)\");\n+            Assert.fail(\"VCV not correct  (2,0)<->(1,0)\");\n         }\n         if (Math.abs(result.getCovarianceOfParameters(2, 1)\n                 - resultRedundant.getCovarianceOfParameters(3, 2)) > 1.0e-8) {\n-            fail(\"VCV not correct  (2,1)<->(1,2)\");\n+            Assert.fail(\"VCV not correct  (2,1)<->(1,2)\");\n         }\n \n         if (Math.abs(result.getCovarianceOfParameters(3, 3)\n                 - resultRedundant.getCovarianceOfParameters(5, 5)) > 1.0e-8) {\n-            fail(\"VCV not correct  (3,3)<->(3,2)\");\n+            Assert.fail(\"VCV not correct  (3,3)<->(3,2)\");\n         }\n \n         TestUtils.assertEquals(result.getAdjustedRSquared(), resultRedundant.getAdjustedRSquared(), 1.0e-8);\n         for (int i = 0; i < 4; i++) {\n             for (int j = 0; j < i; j++) {\n                 if (Math.abs(pc[idx] - cp[off] / (diag[i] * diag[j])) > 1.0e-8) {\n-                    fail(\"Failed cross products... i = \" + i + \" j = \" + j);\n+                    Assert.fail(\"Failed cross products... i = \" + i + \" j = \" + j);\n                 }\n                 ++idx;\n                 ++off;\n             }\n             ++off;\n             if (Math.abs(pc[i+off2] - yxcorr[ i] / (FastMath.sqrt(sumysq) * diag[i])) > 1.0e-8) {\n-                fail(\"failed cross product i = \" + i + \" y\");\n+                Assert.fail(\"Assert.failed cross product i = \" + i + \" y\");\n             }\n         }\n         double[] pc2 = instance.getPartialCorrelations(1);\n         for (int i = 1; i < 4; i++) {\n             for (int j = 1; j < i; j++) {\n                 if (Math.abs(pc2[idx] - corr.getEntry(j, i)) > 1.0e-8) {\n-                    fail(\"Failed cross products... i = \" + i + \" j = \" + j);\n+                    Assert.fail(\"Failed cross products... i = \" + i + \" j = \" + j);\n                 }\n                 ++idx;\n             }\n         }\n         double[] pc3 = instance.getPartialCorrelations(2);\n         if (pc3 == null) {\n-            fail(\"Should not be null\");\n+            Assert.fail(\"Should not be null\");\n         }\n         return;\n     }", "timestamp": 1322774447, "metainfo": ""}