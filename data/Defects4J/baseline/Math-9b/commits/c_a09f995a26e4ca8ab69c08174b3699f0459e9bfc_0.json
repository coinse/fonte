{"sha": "a09f995a26e4ca8ab69c08174b3699f0459e9bfc", "log": "MATH-551 Modified \"MathRuntimeException\" class such that \"SerializablePair\" class has become unnecessary.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\n \n import org.apache.commons.math.exception.util.ArgUtils;\n import org.apache.commons.math.exception.util.Localizable;\n-import org.apache.commons.math.util.SerializablePair;\n \n /**\n  * This class is the base class for all exceptions.\n     /**\n      * Various informations that enrich the informative message.\n      */\n-    private List<SerializablePair<Localizable, Object[]>> messages\n-        = new ArrayList<SerializablePair<Localizable, Object[]>>();\n+    private List<Localizable> msgPatterns = new ArrayList<Localizable>();\n+    /**\n+     * Various informations that enrich the informative message.\n+     * The arguments will replace the corresponding place-holders in\n+     * {@link #msgPatterns}.\n+     */\n+    private List<Object[]> msgArguments = new ArrayList<Object[]>();\n+\n     /**\n      * Arbitrary context information.\n      */\n     /** {@inheritDoc} */\n     public void addMessage(Localizable pattern,\n                            Object ... arguments) {\n-        messages.add(new SerializablePair<Localizable, Object[]>(pattern,\n-                                                                 ArgUtils.flatten(arguments)));\n+        msgPatterns.add(pattern);\n+        msgArguments.add(ArgUtils.flatten(arguments));\n     }\n \n     /** {@inheritDoc} */\n                                 String separator) {\n         final StringBuilder sb = new StringBuilder();\n         int count = 0;\n-        final int len = messages.size();\n-        for (SerializablePair<Localizable, Object[]> pair : messages) {\n-            final MessageFormat fmt = new MessageFormat(pair.getKey().getLocalizedString(locale),\n+        final int len = msgPatterns.size();\n+        for (int i = 0; i < len; i++) {\n+            final Localizable pat = msgPatterns.get(i);\n+            final Object[] args = msgArguments.get(i);\n+            final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),\n                                                         locale);\n-            sb.append(fmt.format(pair.getValue()));\n+            sb.append(fmt.format(args));\n             if (++count < len) {\n                 // Add a separator if there are other messages.\n                 sb.append(separator);\n     }\n \n     /**\n-     * Serialize {@link #messages}.\n+     * Serialize  {@link #msgPatterns} and {@link #msgArguments}.\n      *\n      * @param out Stream.\n      * @throws IOException This should never happen.\n     private void serializeMessages(ObjectOutputStream out)\n         throws IOException {\n         // Step 1.\n-        final int len = messages.size();\n+        final int len = msgPatterns.size();\n         out.writeInt(len);\n         // Step 2.\n         for (int i = 0; i < len; i++) {\n-            SerializablePair<Localizable, Object[]> pair = messages.get(i);\n+            final Localizable pat = msgPatterns.get(i);\n             // Step 3.\n-            out.writeObject(pair.getKey());\n-            final Object[] args = pair.getValue();\n+            out.writeObject(pat);\n+            final Object[] args = msgArguments.get(i);\n             final int aLen = args.length;\n             // Step 4.\n             out.writeInt(aLen);\n     }\n \n     /**\n-     * Deserialize {@link #messages}.\n+     * Deserialize {@link #msgPatterns} and {@link #msgArguments}.\n      *\n      * @param in Stream.\n      * @throws IOException This should never happen.\n                ClassNotFoundException {\n         // Step 1.\n         final int len = in.readInt();\n-        messages = new ArrayList<SerializablePair<Localizable, Object[]>>(len);\n+        msgPatterns = new ArrayList<Localizable>(len);\n+        msgArguments = new ArrayList<Object[]>(len);\n         // Step 2.\n         for (int i = 0; i < len; i++) {\n             // Step 3.\n-            final Localizable key = (Localizable) in.readObject();\n+            final Localizable pat = (Localizable) in.readObject();\n+            msgPatterns.add(pat);\n             // Step 4.\n             final int aLen = in.readInt();\n             final Object[] args = new Object[aLen];\n                 // Step 5.\n                 args[j] = in.readObject();\n             }\n-            messages.add(new SerializablePair<Localizable, Object[]>(key, args));\n+            msgArguments.add(args);\n         }\n     }\n ", "timestamp": 1301262691, "metainfo": ""}