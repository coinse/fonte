{"sha": "573785a1cdd35971378c2f38c30d455897fe8a3b", "log": "replaced remaining getEpsilon by using ulps in double comparisons  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n import org.apache.commons.math.linear.RealVector;\n import org.apache.commons.math.optimization.GoalType;\n import org.apache.commons.math.optimization.RealPointValuePair;\n-import org.apache.commons.math.util.FastMath;\n import org.apache.commons.math.util.MathUtils;\n \n /**\n         Integer row = null;\n         for (int i = 0; i < getHeight(); i++) {\n             final double entry = getEntry(i, col);\n-            if (MathUtils.equals(entry, 1d, getEpsilon(entry)) && (row == null)) {\n+            if (MathUtils.equals(entry, 1d, maxUlps) && (row == null)) {\n                 row = i;\n-            } else if (!MathUtils.equals(entry, 0d, getEpsilon(entry))) {\n+            } else if (!MathUtils.equals(entry, 0d, maxUlps)) {\n                 return null;\n             }\n         }\n         // positive cost non-artificial variables\n         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n             final double entry = tableau.getEntry(0, i);\n-            if (MathUtils.compareTo(entry, 0d, getEpsilon(entry)) > 0) {\n+            if (MathUtils.compareTo(entry, 0d, maxUlps) > 0) {\n                 columnsToDrop.add(i);\n             }\n         }\n       throws ClassNotFoundException, IOException {\n         ois.defaultReadObject();\n         MatrixUtils.deserializeRealMatrix(this, \"tableau\", ois);\n-    }\n-    \n-    /**\n-     * Get an epsilon that is adjusted to the magnitude of the given value.\n-     * @param value the value for which to get the epsilon\n-     * @return magnitude-adjusted epsilon using {@link FastMath.ulp}\n-     */\n-    private double getEpsilon(double value) {\n-        return FastMath.ulp(value) * (double) maxUlps;\n     }    \n }\n--- a/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java\n public class SimplexSolverTest {\n \n     @Test\n-    public void test434NegativeVariable() throws OptimizationException\n+    public void testMath434NegativeVariable() throws OptimizationException\n     {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {0.0, 0.0, 1.0}, 0.0d);\n         ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n     }\n \n     @Test(expected = NoFeasibleSolutionException.class)\n-    public void test434UnfeasibleSolution() throws OptimizationException\n+    public void testMath434UnfeasibleSolution() throws OptimizationException\n     {\n         double epsilon = 1e-6;\n \n     }\n \n     @Test\n-    public void test434PivotRowSelection() throws OptimizationException\n+    public void testMath434PivotRowSelection() throws OptimizationException\n     {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {1.0}, 0.0);\n \n     }\n \n     @Test\n-    public void test434PivotRowSelection2() throws OptimizationException\n+    public void testMath434PivotRowSelection2() throws OptimizationException\n     {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {0.0d, 1.0d, 1.0d, 0.0d, 0.0d, 0.0d, 0.0d}, 0.0d);\n ", "timestamp": 1302543820, "metainfo": ""}