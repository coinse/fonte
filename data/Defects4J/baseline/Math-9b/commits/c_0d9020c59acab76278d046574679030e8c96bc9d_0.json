{"sha": "0d9020c59acab76278d046574679030e8c96bc9d", "log": "Added a method to check points in the Interval class.  JIRA: MATH-889  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/Interval.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/Interval.java\n  * limitations under the License.\n  */\n package org.apache.commons.math3.geometry.euclidean.oned;\n+\n+import org.apache.commons.math3.geometry.partitioning.Region.Location;\n \n \n /** This class represents a 1D interval.\n         return 0.5 * (lower + upper);\n     }\n \n+    /** Check a point with respect to the interval.\n+     * @param point point to check\n+     * @param tolerance tolerance below which points are considered to\n+     * belong to the boundary\n+     * @return a code representing the point status: either {@link\n+     * Location#INSIDE}, {@link Location#OUTSIDE} or {@link Location#BOUNDARY}\n+     */\n+    public Location checkPoint(final double point, final double tolerance) {\n+        if (point < lower - tolerance || point > upper + tolerance) {\n+            return Location.OUTSIDE;\n+        } else if (point > lower + tolerance && point < upper - tolerance) {\n+            return Location.INSIDE;\n+        } else {\n+            return Location.BOUNDARY;\n+        }\n+    }\n+\n }\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math3/geometry/euclidean/oned/IntervalTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.geometry.euclidean.oned;\n+\n+import org.apache.commons.math3.geometry.partitioning.Region;\n+import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.util.Precision;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class IntervalTest {\n+\n+    @Test\n+    public void testInterval() {\n+        Interval interval = new Interval(2.3, 5.7);\n+        Assert.assertEquals(3.4, interval.getLength(), 1.0e-10);\n+        Assert.assertEquals(4.0, interval.getMidPoint(), 1.0e-10);\n+        Assert.assertEquals(Region.Location.BOUNDARY, interval.checkPoint(2.3, 1.0e-10));\n+        Assert.assertEquals(Region.Location.BOUNDARY, interval.checkPoint(5.7, 1.0e-10));\n+        Assert.assertEquals(Region.Location.OUTSIDE,  interval.checkPoint(1.2, 1.0e-10));\n+        Assert.assertEquals(Region.Location.OUTSIDE,  interval.checkPoint(8.7, 1.0e-10));\n+        Assert.assertEquals(Region.Location.INSIDE,   interval.checkPoint(3.0, 1.0e-10));\n+        Assert.assertEquals(2.3, interval.getLower(), 1.0e-10);\n+        Assert.assertEquals(5.7, interval.getUpper(), 1.0e-10);\n+    }\n+\n+    @Test\n+    public void testTolerance() {\n+        Interval interval = new Interval(2.3, 5.7);\n+        Assert.assertEquals(Region.Location.OUTSIDE,  interval.checkPoint(1.2, 1.0));\n+        Assert.assertEquals(Region.Location.BOUNDARY, interval.checkPoint(1.2, 1.2));\n+        Assert.assertEquals(Region.Location.OUTSIDE,  interval.checkPoint(8.7, 2.9));\n+        Assert.assertEquals(Region.Location.BOUNDARY, interval.checkPoint(8.7, 3.1));\n+        Assert.assertEquals(Region.Location.INSIDE,   interval.checkPoint(3.0, 0.6));\n+        Assert.assertEquals(Region.Location.BOUNDARY, interval.checkPoint(3.0, 0.8));\n+    }\n+\n+    @Test\n+    public void testInfinite() {\n+        Interval interval = new Interval(9.0, Double.POSITIVE_INFINITY);\n+        Assert.assertEquals(Region.Location.BOUNDARY, interval.checkPoint(9.0, 1.0e-10));\n+        Assert.assertEquals(Region.Location.OUTSIDE,  interval.checkPoint(8.4, 1.0e-10));\n+        for (double e = 1.0; e <= 6.0; e += 1.0) {\n+            Assert.assertEquals(Region.Location.INSIDE,\n+                                interval.checkPoint(FastMath.pow(10.0, e), 1.0e-10));\n+        }\n+        Assert.assertTrue(Double.isInfinite(interval.getLength()));\n+        Assert.assertEquals(9.0, interval.getLower(), 1.0e-10);\n+        Assert.assertTrue(Double.isInfinite(interval.getUpper()));\n+\n+    }\n+\n+    @Test\n+    public void testSinglePoint() {\n+        Interval interval = new Interval(1.0, 1.0);\n+        Assert.assertEquals(0.0, interval.getLength(), Precision.SAFE_MIN);\n+        Assert.assertEquals(1.0, interval.getMidPoint(), Precision.EPSILON);\n+    }\n+\n+}", "timestamp": 1352102419, "metainfo": ""}