{"sha": "111fee5c16181724027c2f0255bb9836c0cb3262", "log": "Added tests for serialization, equals and hashcode.   ", "commit": "\n--- a/src/test/org/apache/commons/math/stat/univariate/SummaryStatisticsImplTest.java\n+++ b/src/test/org/apache/commons/math/stat/univariate/SummaryStatisticsImplTest.java\n /**\n  * Test cases for the {@link DescriptiveStatistics} class.\n  *\n- * @version $Revision: 1.1 $ $Date: 2004/06/16 03:36:12 $\n+ * @version $Revision: 1.2 $ $Date: 2004/06/17 23:16:41 $\n  */\n \n public final class SummaryStatisticsImplTest extends TestCase {\n         verifySummary(summary);     \n     }\n     \n+    public void testSerialization() {\n+        // Empty test\n+        TestUtils.checkSerializedEquality(u);\n+        SummaryStatistics s = (SummaryStatistics) TestUtils.serializeAndRecover(u);\n+        StatisticalSummary summary = s.getSummary();\n+        verifySummary(summary);\n+        \n+        // Add some data\n+        u.addValue(2d);\n+        u.addValue(1d);\n+        u.addValue(3d);\n+        u.addValue(4d);\n+        u.addValue(5d);\n+        \n+        // Test again\n+        TestUtils.checkSerializedEquality(u);\n+        s = (SummaryStatistics) TestUtils.serializeAndRecover(u);\n+        summary = s.getSummary();\n+        verifySummary(summary);\n+        \n+    }\n+    \n+    public void testEqualsAndHashCode() {\n+        SummaryStatistics t = null;\n+        int emptyHash = u.hashCode();\n+        assertTrue(\"reflexive\", u.equals(u));\n+        assertFalse(\"non-null compared to null\", u.equals(t));\n+        assertFalse(\"wrong type\", u.equals(new Double(0)));\n+        t = SummaryStatistics.newInstance();\n+        assertTrue(\"empty instances should be equal\", t.equals(u));\n+        assertTrue(\"empty instances should be equal\", u.equals(t));\n+        assertEquals(\"empty hash code\", emptyHash, t.hashCode());\n+        \n+        // Add some data to u\n+        u.addValue(2d);\n+        u.addValue(1d);\n+        u.addValue(3d);\n+        u.addValue(4d);\n+        assertFalse(\"different n's should make instances not equal\", t.equals(u));\n+        assertFalse(\"different n's should make instances not equal\", u.equals(t));\n+        assertTrue(\"different n's should make hashcodes different\", \n+                u.hashCode() != t.hashCode());\n+        \n+        //Add data in different order to t, should not affect identity or hashcode\n+        t.addValue(4d);\n+        t.addValue(2d);\n+        t.addValue(3d);\n+        t.addValue(1d);\n+        assertTrue(\"summaries based on same data should be equal\", t.equals(u));\n+        assertTrue(\"summaries based on same data should be equal\", u.equals(t));\n+        assertEquals(\"summaries based on same data should have same hashcodes\", \n+                u.hashCode(), t.hashCode());   \n+        \n+        // Clear and make sure summaries are indistinguishable from empty summary\n+        u.clear();\n+        t.clear();\n+        assertTrue(\"empty instances should be equal\", t.equals(u));\n+        assertTrue(\"empty instances should be equal\", u.equals(t));\n+        assertEquals(\"empty hash code\", emptyHash, t.hashCode());\n+        assertEquals(\"empty hash code\", emptyHash, u.hashCode());\n+    }\n+    \n     private void verifySummary(StatisticalSummary s) {\n         assertEquals(\"N\",s.getN(),u.getN());\n         TestUtils.assertEquals(\"sum\",s.getSum(),u.getSum(),tolerance);", "timestamp": 1087514201, "metainfo": ""}