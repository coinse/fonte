{"sha": "bdd3debba8dd297a70f10e053c1a1960f415a4d2", "log": "Addition of a BeanListUnivariateImpl which can gather univariate statistics on a List of JavaBeans.  This implementation extends the ListUnivariateImpl, and uses the PropertyUtils classes from commons-beanutils.  With this implementation, the following is possible:  List persons = new ArrayList(); // populate array with 100 persons Univariate ageU = new BeanListUnivariateImpl( persons, \"age\" ); Univariate incomeU = new BeanListUnivariateImpl( persons, \"jobInfo.income\" ); System.out.println( \"Mean age is: \" + ageU.getMean() ); System.out.println( \"Mean income is: \" + incomeU.getMean() );  Better error handling is needed near our use of PropertyUtils.  This patch introduces a dependency on commons-beanutils, which in turn depends on commons-collections and commons-logging.   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/BeanListUnivariateImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.apache.commons.beanutils.PropertyUtils;\n+\n+/**\n+ * This implementation of StoreUnivariate uses commons-beanutils to gather\n+ * univariate statistics for a List of Java Beans by property.  This \n+ * implementation uses beanutils' PropertyUtils to get a simple, nested,\n+ * indexed, mapped, or combined property from an element of a List.\n+ *\n+ * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n+ */\n+public class BeanListUnivariateImpl extends ListUnivariateImpl {\n+\n+    private String propertyName;\n+\n+    public BeanListUnivariateImpl(List list) {\n+        super( list );\n+    }\n+\n+    public BeanListUnivariateImpl(List list, String propertyName) {\n+        super( list );\n+        setPropertyName( propertyName );\n+    }\n+\n+    public String getPropertyName() {\n+        return propertyName;\n+    }\n+\n+    public void setPropertyName(String propertyName) {\n+        System.out.println( \"Set prop name; \" + propertyName );\n+        this.propertyName = propertyName;\n+    }\n+\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.Univariate#addValue(double)\n+     */\n+    public void addValue(double v) {\n+        String msg = \"The BeanListUnivariateImpl does not accept values \" +\n+            \"through the addValue method.  Because elements of this list \" +\n+            \"are JavaBeans, one must be sure to set the 'propertyName' \" +\n+            \"property and add new Beans to the underlying list via the \" +\n+            \"addBean(Object bean) method\";\n+        throw new UnsupportedOperationException( msg );\n+    }\n+\n+    /**\n+     * Adds a bean to this list. \n+     *\n+     * @param bean Bean to add to the list\n+     */\n+    public void addObject(Object bean) {\n+        list.add(bean);\n+    }\n+\n+    /**\n+     * Reads the property of an element in the list.\n+     *\n+     * @param index The location of the value in the internal List\n+     * @return A Number object representing the value at a given \n+     *         index\n+     */\n+    protected Number getInternalIndex(int index) {\n+\n+        try {\n+            Number n = (Number) PropertyUtils.getProperty( list.get( index ), \n+                                                           propertyName );\n+\n+            return n;\n+        } catch( Exception e ) {\n+            // TODO: We could use a better strategy for error handling\n+            // here.\n+\n+            // This is a somewhat foolish design decision, but until\n+            // we figure out what needs to be done, let's return NaN\n+            return new Double(Double.NaN);\n+        }\n+\n+\n+    }\n+\n+}\n--- a/src/java/org/apache/commons/math/ListUnivariateImpl.java\n+++ b/src/java/org/apache/commons/math/ListUnivariateImpl.java\n      */\n     public double[] getValues() {\n \n-        // If we've got a windowSize, we might not care about the entire list.\n-        List effectiveList = list;\n+        int startIndex = 0;\n+        int endIndex = list.size() - 1;\n+        \n \n         // If the window size is not INFINITE_WINDOW AND\n         // the current list is larger that the window size, we need to\n         // as definied by windowSize\n         if (windowSize != Univariate.INFINITE_WINDOW &&\n             windowSize < list.size()) {\n-            effectiveList = list.subList((list.size() - 1) - windowSize, \n-                                          (list.size()-1));\n+            startIndex = (list.size() - 1) - windowSize;\n         }\n \n         // Create an array to hold all values\n-        double[] copiedArray = new double[effectiveList.size()];\n+        double[] copiedArray = new double[list.size() - startIndex];\n \n-        int i = 0;\n-        Iterator it = effectiveList.iterator();\n-        while(it.hasNext()) {\n-            Number n = (Number) it.next();\n+        for( int i = startIndex; i <= endIndex; i++ ) {\n+            Number n = (Number) getInternalIndex( i );\n             copiedArray[i] = n.doubleValue();\n             i++;\n         }\n \n             int calcIndex = (list.size() - windowSize) + index;\n \n-            Number n = (Number) list.get(calcIndex);\n+            Number n = (Number) getInternalIndex(calcIndex);\n             value = n.doubleValue();\n         } else {\n-            Number n = (Number) list.get(index);\n+            Number n = (Number) getInternalIndex(index);\n             value = n.doubleValue();\n         }\n-        System.out.println( \"Returning value: \" + value );\n         return value;\n     }\n \n     public void setWindowSize(int windowSize) {\n         this.windowSize = windowSize;\n     }\n+\n+    /**\n+     * This function exists to support the function of classes which \n+     * extend the ListUnivariateImpl.\n+     *\n+     * @param index The location of the value in the internal List\n+     * @return A Number object representing the value at a given \n+     *         index\n+     */\n+    protected Number getInternalIndex(int index) {\n+\n+        Number n = (Number) list.get( index );\n+        return n;\n+\n+    }\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/BeanListUnivariateImplTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.math.beans.*;\n+\n+/**\n+ * Test cases for the {@link BeanListUnivariateImpl} class.\n+ *\n+ * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n+ * @version $Revision: 1.1 $ $Date: 2003/05/29 19:41:31 $\n+ */\n+\n+public final class BeanListUnivariateImplTest extends TestCase {\n+    \n+    private List patientList = null;\n+    private double tolerance = Double.MIN_VALUE;\n+    \n+    public BeanListUnivariateImplTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() {  \n+        patientList = new ArrayList();\n+\n+        // Create and add patient bean 1\n+        VitalStats vs1 = new VitalStats( new Double(120.0), \n+                                         new Double(96.4) );\n+        Patient p1 = new Patient( vs1, new Integer( 35 ) );\n+        patientList.add( p1 );\n+\n+        // Create and add patient bean 2\n+        VitalStats vs2 = new VitalStats( new Double(70.0), \n+                                         new Double(97.4) );\n+        Patient p2 = new Patient( vs2, new Integer( 23 ) );\n+        patientList.add( p2 );\n+\n+        // Create and add patient bean 3\n+        VitalStats vs3 = new VitalStats( new Double(90.0), \n+                                         new Double(98.6) );\n+        Patient p3 = new Patient( vs3, new Integer( 42 ) );\n+        patientList.add( p3 );\n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(BeanListUnivariateImplTest.class);\n+        suite.setName(\"Freq Tests\");\n+        return suite;\n+    }\n+    \n+    /** test stats */\n+    public void testStats() {\n+    \t\n+        StoreUnivariate u = new BeanListUnivariateImpl( patientList ); \n+\n+        assertEquals(\"total count\",3,u.getN(),tolerance);\n+\n+        u.clear();\n+        assertEquals(\"total count\",0,u.getN(),tolerance);    \n+    }     \n+    \n+    public void testPropStats() {\n+\n+        StoreUnivariate heartU = new BeanListUnivariateImpl( patientList,\n+                                          \"vitalStats.heartRate\" );\n+\n+        \n+\n+        assertEquals( \"Mean heart rate unexpected\", 93.333, \n+                      heartU.getMean(), 0.001 );\n+        assertEquals( \"Max heart rate unexpected\", 120.0, \n+                      heartU.getMax(), 0.001 );\n+\n+        StoreUnivariate ageU = new BeanListUnivariateImpl( patientList,\n+                                                           \"age\" );\n+\n+        assertEquals( \"Mean age unexpected\", 33.333,\n+                      ageU.getMean(), 0.001 );\n+        assertEquals( \"Max age unexpected\", 42.0,\n+                      ageU.getMax(), 0.001 );\n+\n+    }\n+\n+    /*    public void testN0andN1Conditions() throws Exception {\n+    \tList list = new ArrayList();\n+    \t\n+    \tStoreUnivariate u = new ListUnivariateImpl( list );\n+    \t    \t\n+\t\tassertTrue(\"Mean of n = 0 set should be NaN\", Double.isNaN( u.getMean() ) );\n+\t\tassertTrue(\"Standard Deviation of n = 0 set should be NaN\", Double.isNaN( u.getStandardDeviation() ) );\n+\t\tassertTrue(\"Variance of n = 0 set should be NaN\", Double.isNaN(u.getVariance() ) );\n+\n+\t\tlist.add( new Double(one));\n+\n+\t\tassertTrue( \"Mean of n = 1 set should be value of single item n1\", u.getMean() == one);\n+\t\tassertTrue( \"StdDev of n = 1 set should be zero, instead it is: \" + u.getStandardDeviation(), u.getStandardDeviation() == 0);\n+\t\tassertTrue( \"Variance of n = 1 set should be zero\", u.getVariance() == 0);\t\n+    }\n+    \n+    public void testSkewAndKurtosis() {\n+    \tStoreUnivariate u = new StoreUnivariateImpl();\n+    \t\n+    \tdouble[] testArray = { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,\n+  \t  \t\t\t\t\t\t\t\t\t\t 9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };\n+  \t  \tfor( int i = 0; i < testArray.length; i++) {\n+  \t  \t\tu.addValue( testArray[i]);\n+  \t  \t}\n+  \t  \t\n+\t\tassertEquals(\"mean\", 12.40455, u.getMean(), 0.0001);\n+\t\tassertEquals(\"variance\", 10.00236, u.getVariance(), 0.0001);\n+\t\tassertEquals(\"skewness\", 1.437424, u.getSkewness(), 0.0001);\n+  \t  \tassertEquals(\"kurtosis\", 2.37719, u.getKurtosis(), 0.0001);\n+    }\n+\n+    public void testProductAndGeometricMean() throws Exception {\n+    \tListUnivariateImpl u = new ListUnivariateImpl(new ArrayList());\n+        u.setWindowSize(10);\n+    \t    \t\n+        u.addValue( 1.0 );\n+        u.addValue( 2.0 );\n+        u.addValue( 3.0 );\n+        u.addValue( 4.0 );\n+\n+        assertEquals( \"Product not expected\", 24.0, u.getProduct(), Double.MIN_VALUE );\n+        assertEquals( \"Geometric mean not expected\", 2.213364, u.getGeometricMean(), 0.00001 );\n+\n+        // Now test rolling - UnivariateImpl should discount the contribution\n+        // of a discarded element\n+        for( int i = 0; i < 10; i++ ) {\n+            u.addValue( i + 2 );\n+        }\n+        // Values should be (2,3,4,5,6,7,8,9,10,11)\n+        \n+        assertEquals( \"Product not expected\", 39916800.0, u.getProduct(), 0.00001 );\n+        assertEquals( \"Geometric mean not expected\", 5.755931, u.getGeometricMean(), 0.00001 );\n+\n+\n+        } */\n+\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/beans/Patient.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.beans;\n+\n+public class Patient {\n+\n+    private VitalStats vitalStats;\n+    private Integer age;\n+\n+    public Patient() {\n+    }\n+\n+    public Patient(VitalStats vitalStats, Integer age) {\n+        setVitalStats( vitalStats );\n+        setAge( age );\n+    }\n+\n+    public VitalStats getVitalStats() {\n+        return( vitalStats );\n+    }\n+\n+    public void setVitalStats(VitalStats vitalStats) {\n+        this.vitalStats = vitalStats;\n+    }\n+\n+    public Integer getAge() {\n+        return age;\n+    }\n+\n+    public void setAge(Integer age) {\n+        this.age = age;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/beans/VitalStats.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.beans;\n+\n+public class VitalStats {\n+\n+    private Double heartrate;\n+    private Double temperature;\n+\n+    public VitalStats() {\n+    }\n+\n+    public VitalStats(Double heartrate, Double temperature) {\n+        setHeartRate( heartrate );\n+        setTemperature( temperature );\n+    }\n+\n+    public Double getHeartRate() {\n+        return heartrate;\n+    }\n+\n+    public void setHeartRate(Double heartrate) {\n+        this.heartrate = heartrate;\n+    }\n+\n+    public Double getTemperature() {\n+        return temperature;\n+    }\n+\n+    public void setTemperature(Double temperature) {\n+        this.temperature = temperature;\n+    }\n+}", "timestamp": 1054237292, "metainfo": ""}