{"sha": "0d7d026a48762fc49659e5c9e4b3717345257776", "log": "MATH-707 Renamed \"BivariateRealFunction\" to \"BivariateFunction\".   ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/BivariateFunction.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis;\n+\n+/**\n+ * An interface representing a bivariate real function.\n+ *\n+ * @since 2.1\n+ * @version $Id$\n+ */\n+public interface BivariateFunction {\n+    /**\n+     * Compute the value for the function.\n+     *\n+     * @param x Abscissa for which the function value should be computed.\n+     * @param y Ordinate for which the function value should be computed.\n+     * @return the value.\n+     */\n+    double value(double x, double y);\n+\n+}\n--- a/src/main/java/org/apache/commons/math/analysis/FunctionUtils.java\n+++ b/src/main/java/org/apache/commons/math/analysis/FunctionUtils.java\n      * @param g Function.\n      * @return the composite function.\n      */\n-    public static UnivariateFunction combine(final BivariateRealFunction combiner,\n+    public static UnivariateFunction combine(final BivariateFunction combiner,\n                                                  final UnivariateFunction f,\n                                                  final UnivariateFunction g) {\n         return new UnivariateFunction() {\n      * @param initialValue Initial value.\n      * @return a collector function.\n      */\n-    public static MultivariateFunction collector(final BivariateRealFunction combiner,\n+    public static MultivariateFunction collector(final BivariateFunction combiner,\n                                                      final UnivariateFunction f,\n                                                      final double initialValue) {\n         return new MultivariateFunction() {\n      * @param initialValue Initial value.\n      * @return a collector function.\n      */\n-    public static MultivariateFunction collector(final BivariateRealFunction combiner,\n+    public static MultivariateFunction collector(final BivariateFunction combiner,\n                                                      final double initialValue) {\n         return collector(combiner, new Identity(), initialValue);\n     }\n      * @param fixed Value to which the first argument of {@code f} is set.\n      * @return the unary function h(x) = f(fixed, x)\n      */\n-    public static UnivariateFunction fix1stArgument(final BivariateRealFunction f,\n+    public static UnivariateFunction fix1stArgument(final BivariateFunction f,\n                                                         final double fixed) {\n         return new UnivariateFunction() {\n             /** {@inheritDoc} */\n      * @param fixed Value to which the second argument of {@code f} is set.\n      * @return the unary function h(x) = f(x, fixed)\n      */\n-    public static UnivariateFunction fix2ndArgument(final BivariateRealFunction f,\n+    public static UnivariateFunction fix2ndArgument(final BivariateFunction f,\n                                                         final double fixed) {\n         return new UnivariateFunction() {\n             /** {@inheritDoc} */\n--- a/src/main/java/org/apache/commons/math/analysis/function/Add.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Add.java\n \n package org.apache.commons.math.analysis.function;\n \n-import org.apache.commons.math.analysis.BivariateRealFunction;\n+import org.apache.commons.math.analysis.BivariateFunction;\n \n /**\n  * Add the two operands.\n  * @version $Id$\n  * @since 3.0\n  */\n-public class Add implements BivariateRealFunction {\n+public class Add implements BivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x, double y) {\n         return x + y;\n--- a/src/main/java/org/apache/commons/math/analysis/function/Atan2.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Atan2.java\n \n package org.apache.commons.math.analysis.function;\n \n-import org.apache.commons.math.analysis.BivariateRealFunction;\n+import org.apache.commons.math.analysis.BivariateFunction;\n import org.apache.commons.math.util.FastMath;\n \n /**\n  * @version $Id$\n  * @since 3.0\n  */\n-public class Atan2 implements BivariateRealFunction {\n+public class Atan2 implements BivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x, double y) {\n         return FastMath.atan2(x, y);\n--- a/src/main/java/org/apache/commons/math/analysis/function/Divide.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Divide.java\n \n package org.apache.commons.math.analysis.function;\n \n-import org.apache.commons.math.analysis.BivariateRealFunction;\n+import org.apache.commons.math.analysis.BivariateFunction;\n \n /**\n  * Divide the first operand by the second.\n  * @version $Id$\n  * @since 3.0\n  */\n-public class Divide implements BivariateRealFunction {\n+public class Divide implements BivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x, double y) {\n         return x / y;\n--- a/src/main/java/org/apache/commons/math/analysis/function/Max.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Max.java\n \n package org.apache.commons.math.analysis.function;\n \n-import org.apache.commons.math.analysis.BivariateRealFunction;\n+import org.apache.commons.math.analysis.BivariateFunction;\n import org.apache.commons.math.util.FastMath;\n \n /**\n  * @version $Id$\n  * @since 3.0\n  */\n-public class Max implements BivariateRealFunction {\n+public class Max implements BivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x, double y) {\n         return FastMath.max(x, y);\n--- a/src/main/java/org/apache/commons/math/analysis/function/Min.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Min.java\n \n package org.apache.commons.math.analysis.function;\n \n-import org.apache.commons.math.analysis.BivariateRealFunction;\n+import org.apache.commons.math.analysis.BivariateFunction;\n import org.apache.commons.math.util.FastMath;\n \n /**\n  * @version $Id$\n  * @since 3.0\n  */\n-public class Min implements BivariateRealFunction {\n+public class Min implements BivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x, double y) {\n         return FastMath.min(x, y);\n--- a/src/main/java/org/apache/commons/math/analysis/function/Multiply.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Multiply.java\n \n package org.apache.commons.math.analysis.function;\n \n-import org.apache.commons.math.analysis.BivariateRealFunction;\n+import org.apache.commons.math.analysis.BivariateFunction;\n \n /**\n  * Multiply the two operands.\n  * @version $Id$\n  * @since 3.0\n  */\n-public class Multiply implements BivariateRealFunction {\n+public class Multiply implements BivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x, double y) {\n         return x * y;\n--- a/src/main/java/org/apache/commons/math/analysis/function/Pow.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Pow.java\n \n package org.apache.commons.math.analysis.function;\n \n-import org.apache.commons.math.analysis.BivariateRealFunction;\n+import org.apache.commons.math.analysis.BivariateFunction;\n import org.apache.commons.math.util.FastMath;\n \n /**\n  * @version $Id$\n  * @since 3.0\n  */\n-public class Pow implements BivariateRealFunction {\n+public class Pow implements BivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x, double y) {\n         return FastMath.pow(x, y);\n--- a/src/main/java/org/apache/commons/math/analysis/function/Subtract.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Subtract.java\n \n package org.apache.commons.math.analysis.function;\n \n-import org.apache.commons.math.analysis.BivariateRealFunction;\n+import org.apache.commons.math.analysis.BivariateFunction;\n \n /**\n  * Subtract the second operand from the first.\n  * @version $Id$\n  * @since 3.0\n  */\n-public class Subtract implements BivariateRealFunction {\n+public class Subtract implements BivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x, double y) {\n         return x - y;\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java\n  */\n package org.apache.commons.math.analysis.interpolation;\n \n-import org.apache.commons.math.analysis.BivariateRealFunction;\n+import org.apache.commons.math.analysis.BivariateFunction;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.NoDataException;\n import org.apache.commons.math.exception.OutOfRangeException;\n  * @since 2.1\n  */\n public class BicubicSplineInterpolatingFunction\n-    implements BivariateRealFunction {\n+    implements BivariateFunction {\n     /**\n      * Matrix to compute the spline coefficients from the function values\n      * and function derivatives values\n      * 3 = second partial derivatives wrt y\n      * 4 = cross partial derivatives\n      */\n-    private BivariateRealFunction[][][] partialDerivatives = null;\n+    private BivariateFunction[][][] partialDerivatives = null;\n \n     /**\n      * @param x Sample values of the x-coordinate, in increasing order.\n     private void computePartialDerivatives() {\n         final int lastI = xval.length - 1;\n         final int lastJ = yval.length - 1;\n-        partialDerivatives = new BivariateRealFunction[5][lastI][lastJ];\n+        partialDerivatives = new BivariateFunction[5][lastI][lastJ];\n \n         for (int i = 0; i < lastI; i++) {\n             for (int j = 0; j < lastJ; j++) {\n  * @version $Id$\n  */\n class BicubicSplineFunction\n-    implements BivariateRealFunction {\n+    implements BivariateFunction {\n \n     /** Number of points. */\n     private static final short N = 4;\n     private final double[][] a;\n \n     /** First partial derivative along x. */\n-    private BivariateRealFunction partialDerivativeX;\n+    private BivariateFunction partialDerivativeX;\n \n     /** First partial derivative along y. */\n-    private BivariateRealFunction partialDerivativeY;\n+    private BivariateFunction partialDerivativeY;\n \n     /** Second partial derivative along x. */\n-    private BivariateRealFunction partialDerivativeXX;\n+    private BivariateFunction partialDerivativeXX;\n \n     /** Second partial derivative along y. */\n-    private BivariateRealFunction partialDerivativeYY;\n+    private BivariateFunction partialDerivativeYY;\n \n     /** Second crossed partial derivative. */\n-    private BivariateRealFunction partialDerivativeXY;\n+    private BivariateFunction partialDerivativeXY;\n \n     /**\n      * Simple constructor.\n     /**\n      * @return the partial derivative wrt {@code x}.\n      */\n-    public BivariateRealFunction partialDerivativeX() {\n+    public BivariateFunction partialDerivativeX() {\n         if (partialDerivativeX == null) {\n             computePartialDerivatives();\n         }\n     /**\n      * @return the partial derivative wrt {@code y}.\n      */\n-    public BivariateRealFunction partialDerivativeY() {\n+    public BivariateFunction partialDerivativeY() {\n         if (partialDerivativeY == null) {\n             computePartialDerivatives();\n         }\n     /**\n      * @return the second partial derivative wrt {@code x}.\n      */\n-    public BivariateRealFunction partialDerivativeXX() {\n+    public BivariateFunction partialDerivativeXX() {\n         if (partialDerivativeXX == null) {\n             computePartialDerivatives();\n         }\n     /**\n      * @return the second partial derivative wrt {@code y}.\n      */\n-    public BivariateRealFunction partialDerivativeYY() {\n+    public BivariateFunction partialDerivativeYY() {\n         if (partialDerivativeYY == null) {\n             computePartialDerivatives();\n         }\n     /**\n      * @return the second partial cross-derivative.\n      */\n-    public BivariateRealFunction partialDerivativeXY() {\n+    public BivariateFunction partialDerivativeXY() {\n         if (partialDerivativeXY == null) {\n             computePartialDerivatives();\n         }\n             }\n         }\n \n-        partialDerivativeX = new BivariateRealFunction() {\n+        partialDerivativeX = new BivariateFunction() {\n                 public double value(double x, double y)  {\n                     final double x2 = x * x;\n                     final double[] pX = {0, 1, x, x2};\n                     return apply(pX, pY, aX);\n                 }\n             };\n-        partialDerivativeY = new BivariateRealFunction() {\n+        partialDerivativeY = new BivariateFunction() {\n                 public double value(double x, double y)  {\n                     final double x2 = x * x;\n                     final double x3 = x2 * x;\n                     return apply(pX, pY, aY);\n                 }\n             };\n-        partialDerivativeXX = new BivariateRealFunction() {\n+        partialDerivativeXX = new BivariateFunction() {\n                 public double value(double x, double y)  {\n                     final double[] pX = {0, 0, 1, x};\n \n                     return apply(pX, pY, aXX);\n                 }\n             };\n-        partialDerivativeYY = new BivariateRealFunction() {\n+        partialDerivativeYY = new BivariateFunction() {\n                 public double value(double x, double y)  {\n                     final double x2 = x * x;\n                     final double x3 = x2 * x;\n                     return apply(pX, pY, aYY);\n                 }\n             };\n-        partialDerivativeXY = new BivariateRealFunction() {\n+        partialDerivativeXY = new BivariateFunction() {\n                 public double value(double x, double y)  {\n                     final double x2 = x * x;\n                     final double[] pX = {0, 1, x, x2};\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java\n  */\n package org.apache.commons.math.analysis.interpolation;\n \n-import org.apache.commons.math.analysis.BivariateRealFunction;\n+import org.apache.commons.math.analysis.BivariateFunction;\n \n /**\n  * Interface representing a bivariate real interpolating function where the\n      * @throws org.apache.commons.math.exception.DimensionMismatchException\n      * if the array lengths are inconsistent.\n      */\n-    BivariateRealFunction interpolate(double[] xval, double[] yval,\n+    BivariateFunction interpolate(double[] xval, double[] yval,\n                                       double[][] fval);\n }\n--- a/src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java\n \n     @Test\n     public void testCombine() {\n-        BivariateRealFunction bi = new Add();\n+        BivariateFunction bi = new Add();\n         UnivariateFunction id = new Identity();\n         UnivariateFunction m = new Minus();\n         UnivariateFunction c = FunctionUtils.combine(bi, id, m);\n \n     @Test\n     public void testCollector() {\n-        BivariateRealFunction bi = new Add();\n+        BivariateFunction bi = new Add();\n         MultivariateFunction coll = FunctionUtils.collector(bi, 0);\n         Assert.assertEquals(10, coll.value(new double[] {1, 2, 3, 4}), EPS);\n \n \n     @Test\n     public void testSinc() {\n-        BivariateRealFunction div = new Divide();\n+        BivariateFunction div = new Divide();\n         UnivariateFunction sin = new Sin();\n         UnivariateFunction id = new Identity();\n         UnivariateFunction sinc1 = FunctionUtils.combine(div, sin, id);\n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java\n \n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MathIllegalArgumentException;\n-import org.apache.commons.math.analysis.BivariateRealFunction;\n+import org.apache.commons.math.analysis.BivariateFunction;\n import org.junit.Assert;\n import org.junit.Test;\n \n         double[][] zval = new double[xval.length][yval.length];\n \n         @SuppressWarnings(\"unused\")\n-        BivariateRealFunction bcf = new BicubicSplineInterpolatingFunction(xval, yval, zval,\n+        BivariateFunction bcf = new BicubicSplineInterpolatingFunction(xval, yval, zval,\n                                                                            zval, zval, zval);\n         \n         double[] wxval = new double[] {3, 2, 5, 6.5};\n         double[] xval = new double[] {3, 4, 5, 6.5};\n         double[] yval = new double[] {-4, -3, -1, 2, 2.5};\n         // Function values\n-        BivariateRealFunction f = new BivariateRealFunction() {\n+        BivariateFunction f = new BivariateFunction() {\n                 public double value(double x, double y) {\n                     return 2 * x - 3 * y + 5;\n                 }\n             }\n         }\n \n-        BivariateRealFunction bcf = new BicubicSplineInterpolatingFunction(xval, yval, zval,\n+        BivariateFunction bcf = new BicubicSplineInterpolatingFunction(xval, yval, zval,\n                                                                            dZdX, dZdY, dZdXdY);\n         double x, y;\n         double expected, result;\n         double[] xval = new double[] {3, 4, 5, 6.5};\n         double[] yval = new double[] {-4, -3, -1, 2, 2.5};\n         // Function values\n-        BivariateRealFunction f = new BivariateRealFunction() {\n+        BivariateFunction f = new BivariateFunction() {\n                 public double value(double x, double y) {\n                     return 2 * x * x - 3 * y * y + 4 * x * y - 5;\n                 }\n         }\n         // Partial derivatives with respect to x\n         double[][] dZdX = new double[xval.length][yval.length];\n-        BivariateRealFunction dfdX = new BivariateRealFunction() {\n+        BivariateFunction dfdX = new BivariateFunction() {\n                 public double value(double x, double y) {\n                     return 4 * (x + y);\n                 }\n         }\n         // Partial derivatives with respect to y\n         double[][] dZdY = new double[xval.length][yval.length];\n-        BivariateRealFunction dfdY = new BivariateRealFunction() {\n+        BivariateFunction dfdY = new BivariateFunction() {\n                 public double value(double x, double y) {\n                     return 4 * x - 6 * y;\n                 }\n             }\n         }\n \n-        BivariateRealFunction bcf = new BicubicSplineInterpolatingFunction(xval, yval, zval,\n+        BivariateFunction bcf = new BicubicSplineInterpolatingFunction(xval, yval, zval,\n                                                                            dZdX, dZdY, dZdXdY);\n         double x, y;\n         double expected, result;\n         }\n \n         final BicubicSplineFunction f = new BicubicSplineFunction(coeff);\n-        BivariateRealFunction derivative;\n+        BivariateFunction derivative;\n         final double x = 0.435;\n         final double y = 0.776;\n         final double tol = 1e-13;\n \n-        derivative = new BivariateRealFunction() {\n+        derivative = new BivariateFunction() {\n                 public double value(double x, double y) {\n                     final double x2 = x * x;\n                     final double y2 = y * y;\n         Assert.assertEquals(\"dFdX\", derivative.value(x, y),\n                             f.partialDerivativeX().value(x, y), tol);\n         \n-        derivative = new BivariateRealFunction() {\n+        derivative = new BivariateFunction() {\n                 public double value(double x, double y) {\n                     final double x2 = x * x;\n                     final double x3 = x2 * x;\n         Assert.assertEquals(\"dFdY\", derivative.value(x, y),\n                             f.partialDerivativeY().value(x, y), tol);\n \n-        derivative = new BivariateRealFunction() {\n+        derivative = new BivariateFunction() {\n                 public double value(double x, double y) {\n                     final double y2 = y * y;\n                     final double y3 = y2 * y;\n         Assert.assertEquals(\"d2FdX2\", derivative.value(x, y),\n                             f.partialDerivativeXX().value(x, y), tol);\n \n-        derivative = new BivariateRealFunction() {\n+        derivative = new BivariateFunction() {\n                 public double value(double x, double y) {\n                     final double x2 = x * x;\n                     final double x3 = x2 * x;\n         Assert.assertEquals(\"d2FdY2\", derivative.value(x, y),\n                             f.partialDerivativeYY().value(x, y), tol);\n \n-        derivative = new BivariateRealFunction() {\n+        derivative = new BivariateFunction() {\n                 public double value(double x, double y) {\n                     final double x2 = x * x;\n                     final double y2 = y * y;\n             val[i] = i * delta;\n         }\n         // Function values\n-        BivariateRealFunction f = new BivariateRealFunction() {\n+        BivariateFunction f = new BivariateFunction() {\n                 public double value(double x, double y) {\n                     final double x2 = x * x;\n                     final double x3 = x2 * x;\n         }\n         // Partial derivatives with respect to x\n         double[][] dFdX = new double[sz][sz];\n-        BivariateRealFunction dfdX = new BivariateRealFunction() {\n+        BivariateFunction dfdX = new BivariateFunction() {\n                 public double value(double x, double y) {\n                     final double x2 = x * x;\n                     final double y2 = y * y;                    \n         }\n         // Partial derivatives with respect to y\n         double[][] dFdY = new double[sz][sz];\n-        BivariateRealFunction dfdY = new BivariateRealFunction() {\n+        BivariateFunction dfdY = new BivariateFunction() {\n                 public double value(double x, double y) {\n                     final double x2 = x * x;\n                     final double y2 = y * y;                    \n         }\n         // Partial cross-derivatives\n         double[][] d2FdXdY = new double[sz][sz];\n-        BivariateRealFunction d2fdXdY = new BivariateRealFunction() {\n+        BivariateFunction d2fdXdY = new BivariateFunction() {\n                 public double value(double x, double y) {\n                     return -1 + 8 * x - 2 * y;\n                 }\n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java\n \n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MathIllegalArgumentException;\n-import org.apache.commons.math.analysis.BivariateRealFunction;\n+import org.apache.commons.math.analysis.BivariateFunction;\n import org.junit.Assert;\n import org.junit.Test;\n \n         BivariateRealGridInterpolator interpolator = new BicubicSplineInterpolator();\n         \n         @SuppressWarnings(\"unused\")\n-        BivariateRealFunction p = interpolator.interpolate(xval, yval, zval);\n+        BivariateFunction p = interpolator.interpolate(xval, yval, zval);\n         \n         double[] wxval = new double[] {3, 2, 5, 6.5};\n         try {\n      */\n     @Test\n     public void testPlane() {\n-        BivariateRealFunction f = new BivariateRealFunction() {\n+        BivariateFunction f = new BivariateFunction() {\n                 public double value(double x, double y) {\n                     return 2 * x - 3 * y + 5;\n                 }\n             }\n         }\n \n-        BivariateRealFunction p = interpolator.interpolate(xval, yval, zval);\n+        BivariateFunction p = interpolator.interpolate(xval, yval, zval);\n         double x, y;\n         double expected, result;\n         \n      */\n     @Test\n     public void testParaboloid() {\n-        BivariateRealFunction f = new BivariateRealFunction() {\n+        BivariateFunction f = new BivariateFunction() {\n                 public double value(double x, double y) {\n                     return 2 * x * x - 3 * y * y + 4 * x * y - 5;\n                 }\n             }\n         }\n \n-        BivariateRealFunction p = interpolator.interpolate(xval, yval, zval);\n+        BivariateFunction p = interpolator.interpolate(xval, yval, zval);\n         double x, y;\n         double expected, result;\n         \n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.apache.commons.math.util.FastMath;\n-import org.apache.commons.math.analysis.BivariateRealFunction;\n+import org.apache.commons.math.analysis.BivariateFunction;\n import org.junit.Assert;\n import org.junit.Test;\n \n         BivariateRealGridInterpolator interpolator = new SmoothingPolynomialBicubicSplineInterpolator(0);\n         \n         @SuppressWarnings(\"unused\")\n-        BivariateRealFunction p = interpolator.interpolate(xval, yval, zval);\n+        BivariateFunction p = interpolator.interpolate(xval, yval, zval);\n         \n         double[] wxval = new double[] {3, 2, 5, 6.5};\n         try {\n      */\n     @Test\n     public void testPlane() {\n-        BivariateRealFunction f = new BivariateRealFunction() {\n+        BivariateFunction f = new BivariateFunction() {\n                 public double value(double x, double y) {\n                     return 2 * x - 3 * y + 5\n                         + ((int) (FastMath.abs(5 * x + 3 * y)) % 2 == 0 ? 1 : -1);\n             }\n         }\n \n-        BivariateRealFunction p = interpolator.interpolate(xval, yval, zval);\n+        BivariateFunction p = interpolator.interpolate(xval, yval, zval);\n         double x, y;\n         double expected, result;\n         \n      */\n     @Test\n     public void testParaboloid() {\n-        BivariateRealFunction f = new BivariateRealFunction() {\n+        BivariateFunction f = new BivariateFunction() {\n                 public double value(double x, double y) {\n                     return 2 * x * x - 3 * y * y + 4 * x * y - 5\n                         + ((int) (FastMath.abs(5 * x + 3 * y)) % 2 == 0 ? 1 : -1);\n             }\n         }\n \n-        BivariateRealFunction p = interpolator.interpolate(xval, yval, zval);\n+        BivariateFunction p = interpolator.interpolate(xval, yval, zval);\n         double x, y;\n         double expected, result;\n ", "timestamp": 1327670592, "metainfo": ""}