{"sha": "2671c94177fa9529d75cf50f17945ae4e8f8ae50", "log": "Javadoc improvements.  Made it more explicit which methods modify instance data; formatting; better wording in some comments.  JIRA: MATH-653.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/RealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/RealVector.java\n  * The {@code code map} and {@code mapToSelf} methods operate\n  * on vectors element-wise, i.e. they perform the same operation (adding a scalar,\n  * applying a function ...) on each element in turn. The {@code map}\n- * version creates a new vector to hold the result and do not change the instance.\n- * The {@code mapToSelf} version use the instance itself to store the\n- * results, so the instance is changed by this method. In both cases, the result\n- * vector is returned by the methods, this allows to use the <i>fluent API</i>\n+ * versions create a new vector to hold the result and do not change the instance.\n+ * The {@code mapToSelf} version uses the instance itself to store the\n+ * results, so the instance is changed by this method. In all cases, the result\n+ * vector is returned by the methods, allowing the <i>fluent API</i>\n  * style, like this:\n  * </p>\n  * <pre>\n     public abstract int getDimension();\n \n     /**\n-     * Returns the entry in the specified index.\n+     * Return the entry at the specified index.\n      *\n      * @param index Index location of entry to be fetched.\n      * @return the vector entry at {@code index}.\n \n     /**\n      * Set a single element.\n+     *\n      * @param index element index.\n      * @param value new value for the element.\n      * @throws org.apache.commons.math.exception.OutOfRangeException\n     public abstract void setEntry(int index, double value);\n \n     /**\n-     * Construct a vector by appending a vector to this vector.\n+     * Construct a new vector by appending a vector to this vector.\n      *\n      * @param v vector to append to this one.\n      * @return a new vector\n     public abstract RealVector append(RealVector v);\n \n     /**\n-     * Construct a vector by appending a double to this vector.\n+     * Construct a new vector by appending a double to this vector.\n      *\n      * @param d double to append.\n      * @return a new vector\n     public abstract RealVector append(double d);\n \n     /**\n-     * Construct a vector by appending a double array to this vector.\n+     * Construct a new vector by appending a double array to this vector.\n      *\n      * @param a double array to append.\n      * @return a new vector\n     public abstract RealVector getSubVector(int index, int n);\n \n     /**\n-     * Set a set of consecutive elements.\n+     * Set a sequence of consecutive elements.\n      *\n      * @param index index of first element to be set.\n      * @param v vector containing the values to set.\n     public abstract void setSubVector(int index, RealVector v);\n \n     /**\n-     * Set a set of consecutive elements.\n+     * Set a sequence of consecutive elements.\n      *\n      * @param index index of first element to be set.\n      * @param v vector containing the values to set.\n \n     /**\n      * Compute the sum of this vector and {@code v}.\n+     * Returns a new vector. Does not change instance data.\n      *\n      * @param v Vector to be added.\n      * @return {@code this} + {@code v}.\n \n     /**\n      * Compute the sum of this vector and {@code v}.\n+     * Returns a new vector. Does not change instance data.\n      *\n      * @param v Vector to be added.\n      * @return {@code this} + {@code v}.\n \n     /**\n      * Subtract {@code v} from this vector.\n+     * Returns a new vector. Does not change instance data.\n      *\n      * @param v Vector to be subtracted.\n      * @return {@code this} - {@code v}.\n \n     /**\n      * Subtract {@code v} from this vector.\n+     * Returns a new vector. Does not change instance data.\n      *\n      * @param v Vector to be subtracted.\n      * @return {@code this} - {@code v}.\n \n     /**\n      * Add a value to each entry.\n+     * Returns a new vector. Does not change instance data.\n      *\n      * @param d Value to be added to each entry.\n      * @return {@code this} + {@code d}.\n     public abstract RealVector copy();\n \n     /**\n-     * Compute the dot product.\n+     * Compute the dot product of this vector with a vector built from the\n+     * entries in {@code v}.\n+     *\n      * @param v vector with which dot product should be computed\n      * @return the scalar dot product between instance and v\n      * @throws org.apache.commons.math.exception.DimensionMismatchException\n     }\n \n     /**\n-     * Compute the dot product.\n+     * Compute the dot product of this vector with {@code v}.\n+     *\n      * @param v vector with which dot product should be computed\n      * @return the scalar dot product between instance and v\n      * @throws org.apache.commons.math.exception.DimensionMismatchException\n \n     /**\n      * Element-by-element division.\n+     * Returns a new vector. Does not change instance data.\n      *\n      * @param v vector by which instance elements must be divided\n      * @return a vector containing this[i] / v[i] for all i\n \n     /**\n      * Element-by-element multiplication.\n+     * Returns a new vector. Does not change instance data.\n      *\n      * @param v vector by which instance elements must be multiplied\n      * @return a vector containing this[i] * v[i] for all i\n      * Distance between two vectors.\n      * <p>This method computes the distance consistent with the\n      * L<sub>2</sub> norm, i.e. the square root of the sum of\n-     * elements differences, or euclidian distance.</p>\n+     * element differences, or Euclidian distance.</p>\n+     *\n      * @param v vector to which distance is requested\n      * @return distance between two vectors.\n      * @throws org.apache.commons.math.exception.DimensionMismatchException\n      * Distance between two vectors.\n      * <p>This method computes the distance consistent with the\n      * L<sub>2</sub> norm, i.e. the square root of the sum of\n-     * elements differences, or euclidian distance.</p>\n+     * element differences, or Euclidian distance.</p>\n+     *\n      * @param v vector to which distance is requested\n      * @return distance between two vectors.\n      * @throws org.apache.commons.math.exception.DimensionMismatchException\n      * Returns the L<sub>2</sub> norm of the vector.\n      * <p>The L<sub>2</sub> norm is the root of the sum of\n      * the squared elements.</p>\n+     *\n      * @return norm\n      * @see #getL1Norm()\n      * @see #getLInfNorm()\n     /**\n      * Returns the L<sub>1</sub> norm of the vector.\n      * <p>The L<sub>1</sub> norm is the sum of the absolute\n-     * values of elements.</p>\n+     * values of the elements.</p>\n+     *\n      * @return norm\n      * @see #getNorm()\n      * @see #getLInfNorm()\n     /**\n      * Returns the L<sub>&infin;</sub> norm of the vector.\n      * <p>The L<sub>&infin;</sub> norm is the max of the absolute\n-     * values of elements.</p>\n+     * values of the elements.</p>\n+     *\n      * @return norm\n      * @see #getNorm()\n      * @see #getL1Norm()\n      * Distance between two vectors.\n      * <p>This method computes the distance consistent with\n      * L<sub>1</sub> norm, i.e. the sum of the absolute values of\n-     * elements differences.</p>\n+     * the elements differences.</p>\n+     *\n      * @param v vector to which distance is requested\n      * @return distance between two vectors.\n      * @throws org.apache.commons.math.exception.DimensionMismatchException\n      * Distance between two vectors.\n      * <p>This method computes the distance consistent with\n      * L<sub>1</sub> norm, i.e. the sum of the absolute values of\n-     * elements differences.</p>\n+     * element differences.</p>\n+     *\n      * @param v vector to which distance is requested\n      * @return distance between two vectors.\n      * @throws org.apache.commons.math.exception.DimensionMismatchException\n      * Distance between two vectors.\n      * <p>This method computes the distance consistent with\n      * L<sub>&infin;</sub> norm, i.e. the max of the absolute values of\n-     * elements differences.</p>\n+     * element differences.</p>\n+     *\n      * @param v vector to which distance is requested\n      * @return distance between two vectors.\n      * @throws org.apache.commons.math.exception.DimensionMismatchException\n      * <p>This method computes the distance consistent with\n      * L<sub>&infin;</sub> norm, i.e. the max of the absolute values of\n      * elements differences.</p>\n+     *\n      * @param v vector to which distance is requested\n      * @return distance between two vectors.\n      * @throws org.apache.commons.math.exception.DimensionMismatchException\n         return d;\n     }\n \n-    /** Get the index of the minimum entry.\n-     * @return index of the minimum entry or -1 if vector length is 0\n-     * or all entries are NaN\n+    /**\n+     * Get the index of the minimum entry.\n+     *\n+     * @return index of the minimum entry or -1 if vector length is 0 or\n+     * or all entries are {@code NaN}\n      */\n     public int getMinIndex() {\n         int minIndex    = -1;\n         return minIndex;\n     }\n \n-    /** Get the value of the minimum entry.\n-     * @return value of the minimum entry or NaN if all entries are NaN\n+    /**\n+     * Get the value of the minimum entry.\n+     *\n+     * @return value of the minimum entry or {@code NaN} if all entries are {@code NaN}\n      */\n     public double getMinValue() {\n         final int minIndex = getMinIndex();\n         return minIndex < 0 ? Double.NaN : getEntry(minIndex);\n     }\n \n-    /** Get the index of the maximum entry.\n+    /**\n+     * Get the index of the maximum entry.\n+     *\n      * @return index of the maximum entry or -1 if vector length is 0\n-     * or all entries are NaN\n+     * or all entries are {@code NaN}\n      */\n     public int getMaxIndex() {\n         int maxIndex    = -1;\n         return maxIndex;\n     }\n \n-    /** Get the value of the maximum entry.\n-     * @return value of the maximum entry or NaN if all entries are NaN\n+    /**\n+     * Get the value of the maximum entry.\n+     *\n+     * @return value of the maximum entry or {@code NaN} if all entries are {@code NaN}\n      */\n     public double getMaxValue() {\n         final int maxIndex = getMaxIndex();\n \n \n     /**\n-     * Multiply each entry.\n+     * Multiply each entry by the argument. Returns a new vector.\n+     * Does not change instance data.\n      *\n      * @param d Multiplication factor.\n      * @return {@code this} * {@code d}.\n     }\n \n     /**\n-     * Subtract a value from each entry.\n+     * Subtract a value from each entry. Returns a new vector.\n+     * Does not change instance data.\n      *\n      * @param d Value to be subtracted.\n      * @return {@code this} - {@code d}.\n     }\n \n     /**\n-     * Divide each entry.\n+     * Divide each entry by the argument. Returns a new vector.\n+     * Does not change instance data.\n      *\n      * @param d Value to divide by.\n      * @return {@code this} / {@code d}.\n     }\n \n     /**\n-     * Divide each entry.\n+     * Divide each entry by the argument.\n      * The instance is changed in-place.\n      *\n      * @param d Value to divide by.\n \n     /**\n      * Compute the outer product.\n+     *\n      * @param v vector with which outer product should be computed\n      * @return the matrix outer product between instance and v\n      */\n \n     /**\n      * Compute the outer product.\n+     *\n      * @param v vector with which outer product should be computed\n      * @return the matrix outer product between instance and v\n      */\n \n     /**\n      * Set all elements to a single value.\n+     *\n      * @param value single value to set for all elements\n      */\n     public void set(double value) {\n      * Convert the vector to a double array.\n      * <p>The array is independent from vector data, it's elements\n      * are copied.</p>\n+     *\n      * @return array containing a copy of vector elements\n      */\n     public double[] toArray() {\n \n     /**\n      * Returns vector entries as a double array.\n+     * <p>The array is independent from vector data, it's elements\n+     * are copied.</p>\n      *\n      * @return double array of entries.\n      */\n     }\n \n     /**\n+     * Create a sparse iterator over the vector, which may omit some entries.\n      * Specialized implementations may choose to not iterate over all\n      * dimensions, either because those values are unset, or are equal\n      * to defaultValue(), or are small enough to be ignored for the\n-     * purposes of iteration.\n-     * No guarantees are made about order of iteration.\n+     * purposes of iteration. No guarantees are made about order of iteration.\n      * In dense implementations, this method will often delegate to\n      * {@link #iterator()}.\n      *\n     }\n \n     /**\n-     * Generic dense iterator.\n-     * It iterates in increasing order of the vector index.\n+     * Generic dense iterator. Iteration is in increasing order\n+     * of the vector index.\n      *\n      * @return a dense iterator.\n      */\n      * <pre>\n      *  return copy().mapToSelf(function);\n      * </pre>\n+     * Returns a new vector. Does not change instance data.\n      *\n      * @param function Function to apply to each entry.\n      * @return a new vector.\n      *      e.setValue(function.value(e.getValue()));\n      *  }\n      * </pre>\n+     * Entries of this vector are modified in-place by this method.\n      *\n      * @param function Function to apply to each entry.\n-     * @return this vector.\n+     * @return a reference to this vector.\n      * @throws org.apache.commons.math.exception.MathUserException\n      * if the function throws it.\n      */\n     }\n \n     /**\n-     * Returns the linear combination of {@code this} and {@code y}.\n-     *\n-     * @param a Weight of {@code this}.\n-     * @param b Weight of {@code y}.\n+     * Returns a new vector representing {@code a*this + b*y}, the linear\n+     * combination of {@code this} and a vector with components equal to the\n+     * entries in {@code y}.\n+     * Returns a new vector. Does not change instance data.\n+     *\n+     * @param a Coefficient of {@code this}.\n+     * @param b Coefficient of {@code y}.\n      * @param y Vector with which {@code this} is linearly combined.\n      * @return a vector containing {@code a * this[i] + b * y[i]} for all\n      * {@code i}.\n     }\n \n     /**\n-     * Returns the linear combination of {@code this} and {@code y}.\n-     *\n-     * @param a Weight of {@code this}.\n-     * @param b Weight of {@code y}.\n+     * Returns a new vector representing {@code a*this + b*y}, the linear\n+     * combination of {@code this} and {@code y}.\n+     * Returns a new vector. Does not change instance data.\n+     *\n+     * @param a Coefficient of {@code this}.\n+     * @param b Coefficient of {@code y}.\n      * @param y Vector with which {@code this} is linearly combined.\n      * @return a vector containing {@code a * this[i] + b * y[i]} for all\n      * {@code i}.\n \n     /**\n      * Updates {@code this} with the linear combination of {@code this} and\n-     * {@code y}.\n-     *\n-     * @param a Weight of {@code this}.\n-     * @param b Weight of {@code y}.\n+     * a vector with components equal to the entries of {@code y}.\n+     *\n+     * @param a Coefficient of {@code this}.\n+     * @param b Coefficient of {@code y}.\n      * @param y Vector with which {@code this} is linearly combined.\n      * @return {@code this}, with components equal to\n      * {@code a * this[i] + b * y[i]} for all {@code i}.\n         return this;\n     }\n \n-    /** An entry in the vector. */\n+    /**\n+     *  An entry in the vector.\n+     */\n     protected class Entry {\n         /** Index of this entry. */\n         private int index;\n     }\n \n     /**\n-     * This class should rare be used, but is here to provide\n+     * This class should rarely be used, but is here to provide\n      * a default implementation of sparseIterator(), which is implemented\n      * by walking over the entries, skipping those whose values are the default one.\n      *\n      * Concrete subclasses which are SparseVector implementations should\n-     * make their own sparse iterator, not use this one.\n+     * make their own sparse iterator, rather than using this one.\n      *\n      * This implementation might be useful for ArrayRealVector, when expensive\n      * operations which preserve the default value are to be done on the entries,", "timestamp": 1314546579, "metainfo": ""}