{"sha": "e0f6015655b1d6f616930a8b5497de70e6ec804f", "log": "Made file character set explicit and added file loading tests.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java\n \n import java.io.BufferedReader;\n import java.io.File;\n-import java.io.FileReader;\n+import java.io.FileInputStream;\n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.io.Serializable;\n import java.net.URL;\n+import java.nio.charset.Charset;\n import java.util.ArrayList;\n import java.util.List;\n \n     /** Default bin count */\n     public static final int DEFAULT_BIN_COUNT = 1000;\n \n+    /** Character set for file input */\n+    private static final String FILE_CHARSET = \"US-ASCII\";\n+\n     /** Serializable version identifier */\n     private static final long serialVersionUID = 5729073523949762654L;\n \n \n     /**\n      * Computes the empirical distribution using data read from a URL.\n+\n+     * <p>The input file <i>must</i> be an ASCII text file containing one\n+     * valid numeric entry per line.</p>\n+     *\n      * @param url  url of the input file\n      *\n      * @throws IOException if an IO error occurs\n      */\n     public void load(URL url) throws IOException, NullArgumentException, ZeroException {\n         MathUtils.checkNotNull(url);\n+        Charset charset = Charset.forName(FILE_CHARSET);\n         BufferedReader in =\n-            new BufferedReader(new InputStreamReader(url.openStream()));\n+            new BufferedReader(new InputStreamReader(url.openStream(), charset));\n         try {\n             DataAdapter da = new StreamDataAdapter(in);\n             da.computeStats();\n                 throw new ZeroException(LocalizedFormats.URL_CONTAINS_NO_DATA, url);\n             }\n             // new adapter for the second pass\n-            in = new BufferedReader(new InputStreamReader(url.openStream()));\n+            in = new BufferedReader(new InputStreamReader(url.openStream(), charset));\n             fillBinStats(new StreamDataAdapter(in));\n             loaded = true;\n         } finally {\n     /**\n      * Computes the empirical distribution from the input file.\n      *\n+     * <p>The input file <i>must</i> be an ASCII text file containing one\n+     * valid numeric entry per line.</p>\n+     *\n      * @param file the input file\n      * @throws IOException if an IO error occurs\n      * @throws NullArgumentException if file is null\n      */\n     public void load(File file) throws IOException, NullArgumentException {\n         MathUtils.checkNotNull(file);\n-        BufferedReader in = new BufferedReader(new FileReader(file));\n+        Charset charset = Charset.forName(FILE_CHARSET);\n+        InputStream is = new FileInputStream(file);\n+        BufferedReader in = new BufferedReader(new InputStreamReader(is, charset));\n         try {\n             DataAdapter da = new StreamDataAdapter(in);\n             da.computeStats();\n             // new adapter for second pass\n-            in = new BufferedReader(new FileReader(file));\n+            is = new FileInputStream(file);\n+            in = new BufferedReader(new InputStreamReader(is, charset));\n             fillBinStats(new StreamDataAdapter(in));\n             loaded = true;\n         } finally {\n--- a/src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java\n     /**\n      * Test EmpiricalDistrbution.load() using sample data file.<br>\n      * Check that the sampleCount, mu and sigma match data in\n-     * the sample data file.\n+     * the sample data file. Also verify that load is idempotent.\n      */\n     @Test\n     public void testLoad() throws Exception {\n+        // Load from a URL\n         empiricalDistribution.load(url);\n+        checkDistribution();\n+        \n+        // Load again from a file (also verifies idempotency of load)\n+        File file = new File(url.getFile());\n+        empiricalDistribution.load(file);\n+        checkDistribution();\n+    }\n+    \n+    private void checkDistribution() {\n         // testData File has 10000 values, with mean ~ 5.0, std dev ~ 1\n         // Make sure that loaded distribution matches this\n         Assert.assertEquals(empiricalDistribution.getSampleStats().getN(),1000,10E-7);", "timestamp": 1349485506, "metainfo": ""}