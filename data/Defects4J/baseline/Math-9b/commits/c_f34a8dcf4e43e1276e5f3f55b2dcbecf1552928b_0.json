{"sha": "f34a8dcf4e43e1276e5f3f55b2dcbecf1552928b", "log": "Added \"@Retry\" annotations.   ", "commit": "\n--- a/src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java\n+++ b/src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java\n \n import org.apache.commons.math.stat.Frequency;\n import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.Retry;\n+import org.apache.commons.math.RetryRunner;\n+\n+import org.junit.runner.RunWith;\n import org.junit.Assert;\n import org.junit.Test;\n \n  * @version $Revision$ $Date$\n  */\n \n+@RunWith(RetryRunner.class)\n public class AbstractRandomGeneratorTest extends RandomDataTest {\n \n     protected TestRandomGenerator testGenerator = new TestRandomGenerator();\n \n     @Override\n     @Test\n+    @Retry(2)\n     public void testNextInt() {\n         try {\n             testGenerator.nextInt(-1);\n \n     @Override\n     @Test\n+    @Retry(2)\n     public void testNextLong() {\n         long q1 = Long.MAX_VALUE/4;\n         long q2 = 2 *  q1;\n     }\n \n     @Test\n+    @Retry(2)\n     public void testNextBoolean() {\n         long halfSampleSize = smallSampleSize / 2;\n         double[] expected = {halfSampleSize, halfSampleSize};\n     }\n \n     @Test\n+    @Retry(2)\n     public void testNextFloat() {\n         Frequency freq = new Frequency();\n         float val = 0;", "timestamp": 1303989786, "metainfo": ""}