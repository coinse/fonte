{"sha": "f807797c50224c31c027b511837e354f84744567", "log": "MATH-815 Code update. Unit test.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n package org.apache.commons.math3.distribution;\n \n import org.apache.commons.math3.exception.DimensionMismatchException;\n-import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n import org.apache.commons.math3.linear.Array2DRowRealMatrix;\n import org.apache.commons.math3.linear.EigenDecomposition;\n import org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException;\n import org.apache.commons.math3.linear.SingularMatrixException;\n import org.apache.commons.math3.random.RandomGenerator;\n import org.apache.commons.math3.random.Well19937c;\n-import org.apache.commons.math3.stat.correlation.Covariance;\n import org.apache.commons.math3.util.FastMath;\n import org.apache.commons.math3.util.MathArrays;\n \n     public RealMatrix getCovariances() {\n         return covarianceMatrix.copy();\n     }\n-\n+    \n     /** {@inheritDoc} */\n     public double density(final double[] vals) throws DimensionMismatchException {\n         final int dim = getDimensions();\n             throw new DimensionMismatchException(vals.length, dim);\n         }\n \n-        final double kernel = getKernel(vals);\n-\n         return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n             FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n-            FastMath.exp(kernel);\n+            getExponentTerm(vals);\n     }\n \n     /**\n     }\n \n     /**\n-     * Precomputes some of the multiplications used for determining densities.\n+     * Computes the term used in the exponent (see definition of the distribution).\n      * \n      * @param values Values at which to compute density.\n      * @return the multiplication factor of density calculations.\n      */\n-    private double getKernel(final double[] values) {\n-        double k = 0;\n-        for (int col = 0; col < values.length; col++) {\n-            for (int v = 0; v < values.length; v++) {\n-                k += covarianceMatrixInverse.getEntry(v, col)\n-                    * FastMath.pow(values[v] - means[v], 2);\n-            }\n-        }\n-        return -0.5 * k;\n+    private double getExponentTerm(final double[] values) {\n+        final double[] centered = new double[values.length];\n+        for (int i = 0; i < centered.length; i++) {\n+            centered[i] = values[i] - getMeans()[i];\n+        }\n+        final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered);\n+        double sum = 0;\n+        for (int i = 0; i < preMultiplied.length; i++) {\n+            sum += preMultiplied[i] * centered[i];\n+        }\n+        return FastMath.exp(-0.5 * sum);\n     }\n }\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math3.distribution;\n+\n+import org.apache.commons.math3.stat.correlation.Covariance;\n+import org.apache.commons.math3.linear.RealMatrix;\n+\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Test cases for {@link MultivariateNormalDistribution}.\n+ */\n+public class MultivariateNormalDistributionTest {\n+    /**\n+     * Test the ability of the distribution to report its mean value parameter.\n+     */\n+    @Test\n+    public void testGetMean() {\n+        final double[] mu = { -1.5, 2 };\n+        final double[][] sigma = { { 2, -1.1 },\n+                                   { -1.1, 2 } };\n+        final MultivariateNormalDistribution d = new MultivariateNormalDistribution(mu, sigma);\n+\n+        final double[] m = d.getMeans();\n+        for (int i = 0; i < m.length; i++) {\n+            Assert.assertEquals(mu[i], m[i], 0);\n+        }\n+    }\n+\n+    /**\n+     * Test the ability of the distribution to report its covariance matrix parameter.\n+     */\n+    @Test\n+    public void testGetCovarianceMatrix() {\n+        final double[] mu = { -1.5, 2 };\n+        final double[][] sigma = { { 2, -1.1 },\n+                                   { -1.1, 2 } };\n+        final MultivariateNormalDistribution d = new MultivariateNormalDistribution(mu, sigma);\n+\n+        final RealMatrix s = d.getCovariances();\n+        final int dim = d.getDimensions();\n+        for (int i = 0; i < dim; i++) {\n+            for (int j = 0; j < dim; j++) {\n+                Assert.assertEquals(sigma[i][j], s.getEntry(i, j), 0);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Test the accuracy of sampling from the distribution.\n+     */\n+    @Test\n+    public void testSampling() {\n+        final double[] mu = { -1.5, 2 };\n+        final double[][] sigma = { { 2, -1.1 },\n+                                   { -1.1, 2 } };\n+        final MultivariateNormalDistribution d = new MultivariateNormalDistribution(mu, sigma);\n+        d.reseedRandomGenerator(50);\n+\n+        final int n = 30;\n+\n+        final double[][] samples = d.sample(n);\n+        final int dim = d.getDimensions();\n+        final double[] sampleMeans = new double[dim];\n+\n+        for (int i = 0; i < samples.length; i++) {\n+            for (int j = 0; j < dim; j++) {\n+                sampleMeans[j] += samples[i][j];\n+            }\n+        }\n+\n+        final double sampledMeanTolerance = 1e-1;\n+        for (int j = 0; j < dim; j++) {\n+            sampleMeans[j] /= samples.length;\n+            Assert.assertEquals(mu[j], sampleMeans[j], sampledMeanTolerance);\n+        }\n+\n+        final double sampledCovarianceTolerance = 2;\n+        final double[][] sampleSigma = new Covariance(samples).getCovarianceMatrix().getData();\n+        for (int i = 0; i < dim; i++) {\n+            for (int j = 0; j < dim; j++) {\n+                Assert.assertEquals(sigma[i][j], sampleSigma[i][j], sampledCovarianceTolerance);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Test the accuracy of the distribution when calculating densities.\n+     */\n+    @Test\n+    public void testDensities() {\n+        final double[] mu = { -1.5, 2 };\n+        final double[][] sigma = { { 2, -1.1 },\n+                                   { -1.1, 2 } };\n+        final MultivariateNormalDistribution d = new MultivariateNormalDistribution(mu, sigma);\n+\n+        final double[][] testValues = { { -1.5, 2 },\n+                                        { 4, 4 },\n+                                        { 1.5, -2 },\n+                                        { 0, 0 } };\n+        final double[] densities = new double[testValues.length];\n+        for (int i = 0; i < densities.length; i++) {\n+            densities[i] = d.density(testValues[i]);\n+        }\n+\n+        // From dmvnorm function in R 2.15 CRAN package Mixtools v0.4.5\n+        final double[] correctDensities = { 0.09528357207691344,\n+                                            5.80932710124009e-09,\n+                                            0.001387448895173267,\n+                                            0.03309922090210541 };\n+\n+        for (int i = 0; i < testValues.length; i++) {\n+            Assert.assertEquals(correctDensities[i], densities[i], 1e-16);\n+        }\n+    }\n+}", "timestamp": 1344462742, "metainfo": ""}