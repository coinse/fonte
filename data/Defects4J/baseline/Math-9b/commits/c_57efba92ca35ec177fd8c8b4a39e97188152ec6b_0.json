{"sha": "57efba92ca35ec177fd8c8b4a39e97188152ec6b", "log": "added Field and FieldElement interfaces to allow algorithms operate on any type of field. This change is related to the discussion on dev list http://markmail.org/message/h2rmq6wo7nwqzx4w  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/Field.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Interface representing a <a href=\"http://mathworld.wolfram.com/Field.html\">field</a>.\n+ * <p>\n+ * Classes implementing this interface will often be singletons.\n+ * </p>\n+ * @param <T> the type of the field elements\n+ * @see FieldElement\n+ * @version $Revision$ $Date$\n+ * @since 2.0\n+ */\n+public interface Field<T> extends Serializable {\n+\n+    /** Get the additive identity of the field.\n+     * <p>\n+     * The additive identity is the element e<sub>0</sub> of the field such that\n+     * for all elements a of the field, the equalities a + e<sub>0</sub> =\n+     * e<sub>0</sub> + a = a hold.\n+     * </p>\n+     * @return additive identity of the field\n+     */\n+    T getZero();\n+\n+    /** Get the multiplicative identity of the field.\n+     * <p>\n+     * The multiplicative identity is the element e<sub>1</sub> of the field such that\n+     * for all elements a of the field, the equalities a &times; e<sub>1</sub> =\n+     * e<sub>1</sub> &times; a = a hold.\n+     * </p>\n+     * @return multiplicative identity of the field\n+     */\n+    T getOne();\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/FieldElement.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Interface representing <a href=\"http://mathworld.wolfram.com/Field.html\">field</a> elements.\n+ * @param <T> the type of the field elements\n+ * @see Field\n+ * @version $Revision$ $Date$\n+ * @since 2.0\n+ */\n+public interface FieldElement<T> extends Serializable {\n+\n+    /** Compute this + a.\n+     * @param a element to add\n+     * @return a new element representing this + a\n+     */\n+    T add(T a);\n+\n+    /** Compute this - a.\n+     * @param a element to subtract\n+     * @return a new element representing this - a\n+     */\n+    T subtract(T a);\n+\n+    /** Compute this &times; a.\n+     * @param a element to multiply\n+     * @return a new element representing this &times; a\n+     */\n+    T multiply(T a);\n+\n+    /** Compute this &divide; a.\n+     * @param a element to add\n+     * @return a new element representing this &divide; a\n+     * @exception ArithmeticException if a is the zero of the\n+     * additive operation (i.e. additive identity)\n+     */\n+    T divide(T a) throws ArithmeticException;\n+\n+    /** Get the {@link Field} to which the instance belongs.\n+     * @return {@link Field} to which the instance belongs\n+     */\n+    Field<T> getField();\n+\n+}", "timestamp": 1240158719, "metainfo": ""}