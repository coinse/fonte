{"sha": "6db984f7ba9fbcf74486e8cfda2fd0bdd5532018", "log": "removed warnings about field coming from deprecated base class  ", "commit": "\n--- a/src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java\n     private double max = 3;\n     private double tolerance = 10E-15;\n \n-    protected SummaryStatistics u = null;\n-\n     public SummaryStatisticsAbstractTest(String name) {\n         super(name);\n     }\n \n     protected abstract SummaryStatistics createSummaryStatistics();\n \n-    public void setUp() {\n-        u = createSummaryStatistics();\n-    }\n-\n     /** test stats */\n     public void testStats() {\n+        SummaryStatistics u = createSummaryStatistics();\n         assertEquals(\"total count\",0,u.getN(),tolerance);\n         u.addValue(one);\n         u.addValue(twoF);\n     }     \n \n     public void testN0andN1Conditions() throws Exception {\n+        SummaryStatistics u = createSummaryStatistics();\n         assertTrue(\"Mean of n = 0 set should be NaN\", \n                 Double.isNaN( u.getMean() ) );\n         assertTrue(\"Standard Deviation of n = 0 set should be NaN\", \n \n     }\n \n-    public void testProductAndGeometricMean() throws Exception {            \n+    public void testProductAndGeometricMean() throws Exception {\n+        SummaryStatistics u = createSummaryStatistics();\n         u.addValue( 1.0 );\n         u.addValue( 2.0 );\n         u.addValue( 3.0 );\n     }\n \n     public void testNaNContracts() {\n+        SummaryStatistics u = createSummaryStatistics();\n         assertTrue(\"mean not NaN\",Double.isNaN(u.getMean())); \n         assertTrue(\"min not NaN\",Double.isNaN(u.getMin())); \n         assertTrue(\"std dev not NaN\",Double.isNaN(u.getStandardDeviation())); \n         //FiXME: test all other NaN contract specs\n     }\n \n-    public void testGetSummary() {  \n+    public void testGetSummary() {\n+        SummaryStatistics u = createSummaryStatistics();\n         StatisticalSummary summary = u.getSummary();\n-        verifySummary(summary);\n+        verifySummary(u, summary);\n         u.addValue(1d);\n         summary = u.getSummary();\n-        verifySummary(summary);\n+        verifySummary(u, summary);\n         u.addValue(2d);\n         summary = u.getSummary();\n-        verifySummary(summary);\n+        verifySummary(u, summary);\n         u.addValue(2d);\n         summary = u.getSummary();\n-        verifySummary(summary);     \n+        verifySummary(u, summary);     \n     }\n \n     public void testSerialization() {\n+        SummaryStatistics u = createSummaryStatistics();\n         // Empty test\n         TestUtils.checkSerializedEquality(u);\n         SummaryStatistics s = (SummaryStatistics) TestUtils.serializeAndRecover(u);\n         StatisticalSummary summary = s.getSummary();\n-        verifySummary(summary);\n+        verifySummary(u, summary);\n \n         // Add some data\n         u.addValue(2d);\n         TestUtils.checkSerializedEquality(u);\n         s = (SummaryStatistics) TestUtils.serializeAndRecover(u);\n         summary = s.getSummary();\n-        verifySummary(summary);\n+        verifySummary(u, summary);\n \n     }\n \n     public void testEqualsAndHashCode() {\n+        SummaryStatistics u = createSummaryStatistics();\n         SummaryStatistics t = null;\n         int emptyHash = u.hashCode();\n         assertTrue(\"reflexive\", u.equals(u));\n         assertEquals(\"empty hash code\", emptyHash, u.hashCode());\n     }\n \n-    private void verifySummary(StatisticalSummary s) {\n+    private void verifySummary(SummaryStatistics u, StatisticalSummary s) {\n         assertEquals(\"N\",s.getN(),u.getN());\n         TestUtils.assertEquals(\"sum\",s.getSum(),u.getSum(),tolerance);\n         TestUtils.assertEquals(\"var\",s.getVariance(),u.getVariance(),tolerance);\n--- a/src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java\n     }\n     \n     public void testSetterInjection() throws Exception {\n+        SummaryStatistics u = createSummaryStatistics();\n         u.setMeanImpl(new sumMean());\n         u.addValue(1);\n         u.addValue(3);\n     }\n     \n     public void testSetterIllegalState() throws Exception {\n+        SummaryStatistics u = createSummaryStatistics();\n         u.addValue(1);\n         u.addValue(3);\n         try {", "timestamp": 1200046912, "metainfo": ""}